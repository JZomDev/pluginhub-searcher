package es.weedl;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AccountChatFilterPluginRunner
{
    public static void main(String[] args) throws Exception
    {
        ExternalPluginManager.loadBuiltin(AccountChatFilterPlugin.class);
        RuneLite.main(args);
    }
}

package es.weedl;

import com.google.inject.Guice;
import com.google.inject.testing.fieldbinder.Bind;
import javax.inject.Inject;
import com.google.inject.testing.fieldbinder.BoundFieldModule;
import net.runelite.api.*;
import net.runelite.api.clan.ClanChannel;
import net.runelite.api.clan.ClanChannelMember;
import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class AccountChatFilterPluginTest
{
	private static final String TEST_ACCOUNT_NAME_1 = "Zezima";
	private static final String TEST_ACCOUNT_NAME_2 = "Kate Micucci";

	@Inject
	private AccountChatFilterPlugin accountChatFilterPlugin;

	@Mock
	@Bind
	private Client client;

	@Mock
	@Bind
	private AccountChatFilterConfig accountChatFilterConfig;

	@Before
	public void before()
	{
		Guice.createInjector(BoundFieldModule.of(this)).injectMembers(this);
	}

	@Test
	public void filtersNormalAccountWhenEnabled()
	{
		mockLocalPlayer(TEST_ACCOUNT_NAME_2);
		when(accountChatFilterConfig.filterNormalAccounts()).thenReturn(true);
		accountChatFilterPlugin.updateFilteredAccounts();

		assertTrue(accountChatFilterPlugin.shouldFilter(TEST_ACCOUNT_NAME_1));
	}

	@Test
	public void filtersIronmenWhenEnabled()
	{
		mockLocalPlayer(TEST_ACCOUNT_NAME_2);
		when(accountChatFilterConfig.filterIronmen()).thenReturn(true);
		accountChatFilterPlugin.updateFilteredAccounts();

		assertTrue(accountChatFilterPlugin.shouldFilter(getTestName(AccountIconID.IRONMAN, TEST_ACCOUNT_NAME_1)));
	}

	@Test
	public void filtersHardcoreIronmenWhenEnabled()
	{
		mockLocalPlayer(TEST_ACCOUNT_NAME_2);
		when(accountChatFilterConfig.filterHardcoreIronmen()).thenReturn(true);
		accountChatFilterPlugin.updateFilteredAccounts();

		assertTrue(accountChatFilterPlugin.shouldFilter(getTestName(AccountIconID.HARDCORE_IRONMAN, TEST_ACCOUNT_NAME_1)));
	}

	@Test
	public void filtersUltimateIronmenWhenEnabled()
	{
		mockLocalPlayer(TEST_ACCOUNT_NAME_2);
		when(accountChatFilterConfig.filterUltimateIronmen()).thenReturn(true);
		accountChatFilterPlugin.updateFilteredAccounts();

		assertTrue(accountChatFilterPlugin.shouldFilter(getTestName(AccountIconID.ULTIMATE_IRONMAN, TEST_ACCOUNT_NAME_1)));
	}

	@Test
	public void filtersGroupIronmenWhenEnabled()
	{
		mockLocalPlayer(TEST_ACCOUNT_NAME_2);
		when(accountChatFilterConfig.filterGroupIronmen()).thenReturn(true);
		accountChatFilterPlugin.updateFilteredAccounts();

		assertTrue(accountChatFilterPlugin.shouldFilter(getTestName(AccountIconID.GROUP_IRONMAN, TEST_ACCOUNT_NAME_1)));
	}

	@Test
	public void filtersHardcoreGroupIronmenWhenEnabled()
	{
		mockLocalPlayer(TEST_ACCOUNT_NAME_2);
		when(accountChatFilterConfig.filterHardcoreGroupIronmen()).thenReturn(true);
		accountChatFilterPlugin.updateFilteredAccounts();

		assertTrue(accountChatFilterPlugin.shouldFilter(getTestName(AccountIconID.HARDCORE_GROUP_IRONMAN, TEST_ACCOUNT_NAME_1)));
	}

	@Test
	public void filtersUnrankedGroupIronmenWhenEnabled()
	{
		mockLocalPlayer(TEST_ACCOUNT_NAME_2);
		when(accountChatFilterConfig.filterUnrankedGroupIronmen()).thenReturn(true);
		accountChatFilterPlugin.updateFilteredAccounts();

		assertTrue(accountChatFilterPlugin.shouldFilter(getTestName(AccountIconID.UNRANKED_GROUP_IRONMAN, TEST_ACCOUNT_NAME_1)));
	}

	@Test
	public void filtersLeagueAccountWhenEnabled()
	{
		mockLocalPlayer(TEST_ACCOUNT_NAME_2);
		when(accountChatFilterConfig.filterLeague()).thenReturn(true);
		accountChatFilterPlugin.updateFilteredAccounts();

		assertTrue(accountChatFilterPlugin.shouldFilter(getTestName(AccountIconID.LEAGUE, TEST_ACCOUNT_NAME_1)));
	}

	@Test
	public void skipsSelfWhenDisabled()
	{
		mockLocalPlayer(TEST_ACCOUNT_NAME_1);
		when(accountChatFilterConfig.filterSelf()).thenReturn(false);
		when(accountChatFilterConfig.filterIronmen()).thenReturn(true);
		accountChatFilterPlugin.updateFilteredAccounts();

		assertFalse(accountChatFilterPlugin.shouldFilter(getTestName(AccountIconID.IRONMAN, TEST_ACCOUNT_NAME_1)));
	}

	@Test
	public void skipsFriendWhenDisabled()
	{
		mockLocalPlayer(TEST_ACCOUNT_NAME_2);
		mockIsFriend(TEST_ACCOUNT_NAME_1, true);
		when(accountChatFilterConfig.filterFriends()).thenReturn(false);
		when(accountChatFilterConfig.filterIronmen()).thenReturn(true);
		accountChatFilterPlugin.updateFilteredAccounts();

		assertFalse(accountChatFilterPlugin.shouldFilter(getTestName(AccountIconID.IRONMAN, TEST_ACCOUNT_NAME_1)));
	}

	@Test
	public void skipsFriendsChatWhenDisabled()
	{
		mockLocalPlayer(TEST_ACCOUNT_NAME_2);
		mockIsFriendChatMember(TEST_ACCOUNT_NAME_1);
		when(accountChatFilterConfig.filterFriendsChat()).thenReturn(false);
		when(accountChatFilterConfig.filterIronmen()).thenReturn(true);
		accountChatFilterPlugin.updateFilteredAccounts();

		assertFalse(accountChatFilterPlugin.shouldFilter(getTestName(AccountIconID.IRONMAN, TEST_ACCOUNT_NAME_1)));
	}

	@Test
	public void skipsClanChatWhenDisabled()
	{
		mockLocalPlayer(TEST_ACCOUNT_NAME_2);
		mockIsClanChatMember(TEST_ACCOUNT_NAME_1, false);
		when(accountChatFilterConfig.filterClanChat()).thenReturn(false);
		when(accountChatFilterConfig.filterIronmen()).thenReturn(true);
		accountChatFilterPlugin.updateFilteredAccounts();

		assertFalse(accountChatFilterPlugin.shouldFilter(getTestName(AccountIconID.IRONMAN, TEST_ACCOUNT_NAME_1)));
	}

	@Test
	public void skipsGuestClanChatWhenDisabled()
	{
		mockLocalPlayer(TEST_ACCOUNT_NAME_2);
		mockIsClanChatMember(TEST_ACCOUNT_NAME_1, true);
		when(accountChatFilterConfig.filterClanChat()).thenReturn(false);
		when(accountChatFilterConfig.filterIronmen()).thenReturn(true);
		accountChatFilterPlugin.updateFilteredAccounts();

		assertFalse(accountChatFilterPlugin.shouldFilter(getTestName(AccountIconID.IRONMAN, TEST_ACCOUNT_NAME_1)));
	}

	private void mockLocalPlayer(final String playerName)
	{
		final Player player = mock(Player.class);
		when(player.getName()).thenReturn(playerName);
		when(client.getLocalPlayer()).thenReturn(player);
	}

	private void mockIsFriend(final String playerName, final boolean isFriend)
	{
		when(client.isFriended(eq(" " + playerName), eq(false))).thenReturn(isFriend);
	}

	private void mockIsFriendChatMember(final String playerName)
	{
		final FriendsChatManager friendsChatManager = mock(FriendsChatManager.class);
		final FriendsChatMember friendsChatMember = mock(FriendsChatMember.class);
		when(friendsChatManager.findByName(eq(" " + playerName))).thenReturn(friendsChatMember);
		when(client.getFriendsChatManager()).thenReturn(friendsChatManager);
	}

	private void mockIsClanChatMember(final String playerName, final boolean isGuestClanChannelMember)
	{
		final ClanChannelMember clanChannelMember = mock(ClanChannelMember.class);
		final ClanChannel clanChannel = mock(ClanChannel.class);
		when(clanChannel.findMember(eq(" " + playerName))).thenReturn(clanChannelMember);

		if (isGuestClanChannelMember)
		{
			when(client.getClanChannel()).thenReturn(null);
			when(client.getGuestClanChannel()).thenReturn(clanChannel);
		}
		else
		{
			when(client.getClanChannel()).thenReturn(clanChannel);
		}
	}

	private String getTestName(final AccountIconID accountIconID, final String playerName)
	{
		return accountIconID + " " + playerName;
	}
}
package es.weedl;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("accountChatFilter")
public interface AccountChatFilterConfig extends Config
{
	@ConfigSection(
			name = "General",
			description = "General settings",
			position = 10
	)
	String generalSection = "general";

	@ConfigSection(
			name = "Filtered Account Types",
			description = "Account types to filter",
			position = 20
	)
	String accountTypesSection = "accountTypes";

	@ConfigItem(
			keyName = "filterSelf",
			name = "Filter Self",
			description = "Whether or not to filter yourself if you match a filtered group",
			position = 0,
			section = generalSection
	)
	default boolean filterSelf() { return false; }

	@ConfigItem(
			keyName = "filterFriends",
			name = "Filter Friends",
			description = "Whether or not to filter your friends if they match a filtered group",
			position = 1,
			section = generalSection
	)
	default boolean filterFriends() { return false; }

	@ConfigItem(
			keyName = "filterFriendsChat",
			name = "Filter Friends Chat Members",
			description = "Whether or not to filter members of your current friends chat if they match a filtered group",
			position = 2,
			section = generalSection
	)
	default boolean filterFriendsChat() { return true; }

	@ConfigItem(
			keyName = "filterClanChat",
			name = "Filter Chat Chat Members",
			description = "Whether or not to filter members of your current clan chat if they match a filtered group",
			position = 3,
			section = generalSection
	)
	default boolean filterClanChat() { return true; }

	@ConfigItem(
			keyName = "onlyFilterIcons",
			name = "Only Filter Icons",
			description = "Removes the specified account icons instead of the user's message (toggling will not re-add icons, this is somewhat buggy)",
			position = 4,
			section = generalSection
	)
	default boolean onlyFilterIcons() { return false; }

	@ConfigItem(
		keyName = "filterNormalAccounts",
		name = "Normal Accounts",
		description = "Filters normal accounts",
		position = 20,
		section = accountTypesSection
	)
	default boolean filterNormalAccounts() { return false; }

	@ConfigItem(
		keyName = "filterIronmen",
		name = "Ironmen",
		description = "Filters standard ironman accounts",
		position = 21,
		section = accountTypesSection
	)
	default boolean filterIronmen() { return false; }

	@ConfigItem(
		keyName = "filterHardcoreIronmen",
		name = "Hardcore Ironmen",
		description = "Filters hardcore ironman accounts",
		position = 22,
		section = accountTypesSection
	)
	default boolean filterHardcoreIronmen() { return false; }

	@ConfigItem(
		keyName = "filterUltimateIronmen",
		name = "Ultimate Ironmen",
		description = "Filters ultimate ironman accounts",
		position = 23,
		section = accountTypesSection
	)
	default boolean filterUltimateIronmen() { return false; }

	@ConfigItem(
		keyName = "filterGroupIronmen",
		name = "Group Ironmen",
		description = "Filters group ironman accounts",
		position = 24,
		section = accountTypesSection
	)
	default boolean filterGroupIronmen() { return false; }

	@ConfigItem(
		keyName = "filterHardcoreGroupIronmen",
		name = "Hardcore Group Ironmen",
		description = "Filters hardcore group ironman accounts",
		position = 25,
		section = accountTypesSection
	)
	default boolean filterHardcoreGroupIronmen() { return false; }

	@ConfigItem(
			keyName = "filterUnrankedGroupIronmen",
			name = "Unranked Group Ironmen",
			description = "Filters unranked group ironman accounts",
			position = 26,
			section = accountTypesSection
	)
	default boolean filterUnrankedGroupIronmen() { return false; }

	@ConfigItem(
			keyName = "filterLeagueAccount",
			name = "League Accounts",
			description = "Filters league accounts",
			position = 27,
			section = accountTypesSection
	)
	default boolean filterLeague() { return false; }

	@ConfigItem(
			keyName = "filteredCombatLevel",
			name = "Combat Level",
			description = "Filters chat based on combat level given",
			position = 28
	)
	default int filteredCombatLevel() { return 1; }

	@ConfigItem(
			keyName = "hideCharacterModels",
			name = "Hide Character Models",
			description = "Hides the in-game character model of any filtered players",
			position = 29
	)
	default boolean hideCharacterModels() { return false; }
}

package es.weedl;

import com.google.inject.Provides;
import java.util.*;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.clan.ClanChannel;
import net.runelite.api.events.OverheadTextChanged;
import net.runelite.api.events.ScriptCallbackEvent;
import net.runelite.client.callback.Hooks;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.Text;

@Slf4j
@PluginDescriptor(
	name = "Account Chat Filter"
)
public class AccountChatFilterPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private AccountChatFilterConfig config;

	@Inject
	private Hooks hooks;

	private final Set<AccountIconID> filteredAccountTypes = new HashSet<>();

	private final Map<Integer, String> originalNames = new HashMap<>();
	private final Set<String> filteredAccountNames = new HashSet<>();

	private final Hooks.RenderableDrawListener drawListener = this::shouldDraw;

	@Provides
	final AccountChatFilterConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(AccountChatFilterConfig.class);
	}

	private void addOrRemove(final AccountIconID accountIconID, final boolean isAdd)
	{
		if (isAdd)
		{
			filteredAccountTypes.add(accountIconID);
		}
		else
		{
			filteredAccountTypes.remove(accountIconID);
		}
	}

	protected void updateFilteredAccounts()
	{
		addOrRemove(AccountIconID.IRONMAN, config.filterIronmen());
		addOrRemove(AccountIconID.HARDCORE_IRONMAN, config.filterHardcoreIronmen());
		addOrRemove(AccountIconID.ULTIMATE_IRONMAN, config.filterUltimateIronmen());
		addOrRemove(AccountIconID.GROUP_IRONMAN, config.filterGroupIronmen());
		addOrRemove(AccountIconID.HARDCORE_GROUP_IRONMAN, config.filterHardcoreGroupIronmen());
		addOrRemove(AccountIconID.UNRANKED_GROUP_IRONMAN, config.filterUnrankedGroupIronmen());
		addOrRemove(AccountIconID.LEAGUE, config.filterLeague());
	}

	private void resetNames()
	{
		for (final Integer messageId : originalNames.keySet())
		{
			final String originalName = originalNames.get(messageId);
			final MessageNode messageNode = client.getMessages().get(messageId);
			messageNode.setName(originalName);
		}
	}

	@Override
	protected void startUp() throws Exception
	{
		handleChange();
		hooks.registerRenderableDrawListener(drawListener);
	}

	@Override
	protected void shutDown()
	{
		hooks.unregisterRenderableDrawListener(drawListener);
	}

	@Subscribe
	public void onConfigChanged(final ConfigChanged event)
	{
		if (!"accountChatFilter".equals(event.getGroup()))
		{
			return;
		}

		handleChange();
	}

	private void handleChange()
	{
		updateFilteredAccounts();

		if (!config.onlyFilterIcons())
		{
			resetNames();
		}

		filteredAccountNames.clear();

		//Refresh chat after config change to reflect current rules
		client.refreshChat();
	}

	@Subscribe
	public void onScriptCallbackEvent(final ScriptCallbackEvent event)
	{
		if (!"chatFilterCheck".equals(event.getEventName()))
		{
			return;
		}

		int[] intStack = client.getIntStack();
		int intStackSize = client.getIntStackSize();

		final int messageType = intStack[intStackSize - 2];
		final int messageId = intStack[intStackSize - 1];

		final ChatMessageType chatMessageType = ChatMessageType.of(messageType);
		final MessageNode messageNode = client.getMessages().get(messageId);
		final String name = originalNames.getOrDefault(messageId, messageNode.getName());

		boolean shouldFilter = shouldFilter(name);

		if (shouldFilter)
		{
			filteredAccountNames.add(Text.standardize(name));

			if (config.onlyFilterIcons())
			{
				originalNames.put(messageId, name);
				messageNode.setName(filterIcons(name));
				client.refreshChat();
			}
			else
			{
				boolean blockMessage = isBlockableMessageType(chatMessageType);

				if (blockMessage)
				{
					// Block the message
					intStack[intStackSize - 3] = 0;
				}
			}
		}
		else if (originalNames.containsKey(messageId))
		{
			messageNode.setName(originalNames.remove(messageId));
			client.refreshChat();
		}
	}

	private boolean isBlockableMessageType(final ChatMessageType chatMessageType)
	{
		switch (chatMessageType) {
			case PUBLICCHAT:
			case MODCHAT:
			case AUTOTYPER:
			case PRIVATECHAT:
			case MODPRIVATECHAT:
			case FRIENDSCHAT:
			case CLAN_CHAT:
			case CLAN_GUEST_CHAT:
				return true;
		}

		return false;
	}

	@Subscribe
	public void onOverheadTextChanged(final OverheadTextChanged event)
	{
		if (!(event.getActor() instanceof Player))
		{
			return;
		}

		String message = event.getOverheadText();

		if (shouldFilter(event.getActor().getName()))
		{
			message = " ";
		}

		event.getActor().setOverheadText(message);
	}

	protected String filterIcons(final String name)
	{
		String filteredName = name;
		for (final AccountIconID accountIconID : filteredAccountTypes)
		{
			filteredName = filteredName.replace(accountIconID.toString(), "");
		}
		return filteredName;
	}

	private boolean isSelf(final String name)
	{
		return Text.standardize(name).equals(Text.standardize(client.getLocalPlayer().getName()));
	}

	private boolean isFriend(final String name)
	{
		return client.isFriended(name, false);
	}

	private boolean isFriendsChatMember(final String name)
	{
		final FriendsChatManager friendsChatManager = client.getFriendsChatManager();
		return friendsChatManager != null && friendsChatManager.findByName(name) != null;
	}

	private boolean isClanChatMember(final String name)
	{
		ClanChannel clanChannel = client.getClanChannel();
		if (clanChannel != null && clanChannel.findMember(name) != null)
		{
			return true;
		}

		clanChannel = client.getGuestClanChannel();
		return clanChannel != null && clanChannel.findMember(name) != null;
	}

	private boolean shouldSkipFilters(final String name)
	{
		if (!config.filterSelf() && isSelf(name))
		{
			return true;
		}
		else if (!config.filterFriends() && isFriend(name))
		{
			return true;
		}
		else if (!config.filterFriendsChat() && isFriendsChatMember(name))
		{
			return true;
		}
		else if (!config.filterClanChat() && isClanChatMember(name))
		{
			return true;
		}

		return false;
	}

	private boolean isFilteredAccountType(final String name)
	{
		return filteredAccountTypes.stream().anyMatch(
				(accountIconID -> name.contains(accountIconID.toString()))
		);
	}

	private boolean isNormalAccount(final String name)
	{
		return Arrays.stream(AccountIconID.values()).noneMatch(
				(accountIconID -> name.contains(accountIconID.toString()))
		);
	}

	protected boolean shouldFilter(final String name)
	{
		if (shouldSkipFilters(Text.removeTags(name)))
		{
			return false;
		}

		if (isFilteredAccountType(name))
		{
			return true;
		}

		Player player = getPlayerFromName(name);
		if (player != null && player.getCombatLevel() <= config.filteredCombatLevel()) {
			return true;
		}

		return config.filterNormalAccounts() && isNormalAccount(name);
	}

	boolean shouldDraw(Renderable renderable, boolean drawingUI)
	{
		if (!config.hideCharacterModels()) return true;

		if (renderable instanceof Player)
		{
			Player player = (Player) renderable;
			String name = player.getName();
			return name != null && !filteredAccountNames.contains(Text.standardize(name));
		}

		return true;
	}

	private Player getPlayerFromName(String playerName) {
		String sanitizedName = Text.standardize(playerName);

		Player player = null;
		for (Player p : client.getPlayers()) {
			if (p.getName().toLowerCase().equals(sanitizedName)) {
				player = p;
				break;
			}
		}

		return player;
	}
}

package es.weedl;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.IconID;

@RequiredArgsConstructor
@Getter
public enum AccountIconID {
    IRONMAN(IconID.IRONMAN.getIndex()),
    ULTIMATE_IRONMAN(IconID.ULTIMATE_IRONMAN.getIndex()),
    HARDCORE_IRONMAN(IconID.HARDCORE_IRONMAN.getIndex()),
    GROUP_IRONMAN(41),
    HARDCORE_GROUP_IRONMAN(42),
    UNRANKED_GROUP_IRONMAN(43),
    LEAGUE(IconID.LEAGUE.getIndex());

    private final int index;

    @Override
    public String toString()
    {
        return "<img=" + String.valueOf(this.index) + ">";
    }
}
