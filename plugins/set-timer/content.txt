package com.settimer;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SetTimerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(SetTimerPlugin.class);
		RuneLite.main(args);
	}
}
package com.settimer;

import lombok.extern.slf4j.Slf4j;

import java.awt.*;
import javax.inject.Inject;
import javax.inject.Singleton;
import javax.swing.border.EmptyBorder;
import javax.swing.*;

import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;

@Slf4j
@Singleton
public class SetTimerPanel extends PluginPanel {
	private final SetTimerPlugin plugin;
	private final SetTimerConfig config;

	private static JLabel timerLabel;
	private static JButton button;

	@Inject
	public SetTimerPanel(SetTimerPlugin plugin, SetTimerConfig config)
	{
		this.plugin = plugin;
		this.config = config;

		setLayout(new BorderLayout(0, 4));
		setBackground(ColorScheme.DARK_GRAY_COLOR);
		setBorder(new EmptyBorder(8, 8, 8, 8));
		JPanel mainContent = new JPanel(new BorderLayout());

		button = new JButton("Start");
		button.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 30));
		button.setForeground(Color.WHITE);
		button.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		button.setBorder(BorderFactory.createCompoundBorder(
			BorderFactory.createMatteBorder(1, 1, 1, 1, ColorScheme.DARK_GRAY_COLOR),
			new EmptyBorder(20, 4, 20, 4)
		));

		timerLabel = new JLabel("3:30", SwingConstants.CENTER);
		timerLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 50));

		button.addActionListener(e -> this.plugin.next());

		mainContent.add(timerLabel, BorderLayout.NORTH);
		mainContent.add(button, BorderLayout.SOUTH);

		add(mainContent, BorderLayout.CENTER);
	}

	public void setButtonText(String text)
	{
		button.setText(text);
	}

	public void setTimerText(String text)
	{
		timerLabel.setText(text);
	}

	public void reset()
	{
		setTimerText("3:30");
		setButtonText("Start");
	}
}
package com.settimer;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import net.runelite.client.ui.overlay.infobox.InfoBox;

import java.awt.*;
import java.awt.image.BufferedImage;

import java.util.Timer;
import java.util.TimerTask;

@Getter
@ToString
public class SetTimer extends InfoBox
{
	private static Timer timer;

	@Getter(AccessLevel.PACKAGE)
	@Setter(AccessLevel.PACKAGE)
	private SetTimerState state;

	@Getter(AccessLevel.PACKAGE)
	private int currentTime = 3 * 60 + 30;

	private static final int setTime = 3 * 60 + 30;
	private static final int jadTime = 1 * 60 + 45;

	final SetTimerPlugin plugin;

	public SetTimer(BufferedImage image, SetTimerPlugin plugin)
	{
		super(image, plugin);

		this.plugin = plugin;
		this.state = SetTimerState.IDLE;
	}

	public void start()
	{
		timer = new Timer();
		timer.scheduleAtFixedRate(new TimerTask() {
			public void run() {
				if (currentTime-- == 0)
				{
					currentTime = setTime;
				}
				plugin.update();
			}
		}, 0, 1000);
	}

	public void stop()
	{
		timer.cancel();
		switch (state)
		{
			case STARTED:
				currentTime += jadTime;
				break;
			case IDLE:
			case RESUMED:
				currentTime = setTime;
				break;
			case PAUSED:
			default:
				break;
		}
	}

	@Override
	public String getText()
	{
		final int minutes = currentTime / 60;
		final int seconds = currentTime % 60;
		return String.format("%01d:%02d", minutes, seconds);
	}

	@Override
	public Color getTextColor()
	{
		if (currentTime < 10)
		{
			return Color.RED.brighter();
		}

		return Color.WHITE;
	}
}
package com.settimer;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;
import net.runelite.client.util.HotkeyListener;
import net.runelite.client.util.ImageUtil;
import org.apache.commons.lang3.ArrayUtils;

import javax.inject.Inject;
import java.awt.event.KeyEvent;

@Slf4j
@PluginDescriptor(
	name = "Set Timer",
	description = "Panel to show TzKal-Zuk timer",
	tags = {"timer", "inferno", "pvm"}
)
public class SetTimerPlugin extends Plugin
{
	private SetTimer setTimer;
	private SetTimerPanel panel;
	private NavigationButton navButton;

	private static boolean inInferno = false;
	private static final int INFERNO_REGION_ID = 9043;

	@Inject
	private Client client;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	private ItemManager itemManager;

	@Inject
	private InfoBoxManager infoBoxManager;

	@Inject
	private KeyManager keyManager;

	@Inject
	private SetTimerConfig config;

	private final HotkeyListener setTimerKeyListener = new HotkeyListener(() -> config.timerHotkey()) {
		@Override
		public void keyPressed(KeyEvent e) {
			if (config.timerHotkey().matches(e)) {
				next();
			}
		}
	};

	@Provides
	SetTimerConfig getConfig(ConfigManager configManager) {
		return configManager.getConfig(SetTimerConfig.class);
	}

	@Override
	protected void startUp()
	{
		setTimer = new SetTimer(itemManager.getImage(ItemID.TZREKZUK), this);

		panel = injector.getInstance(SetTimerPanel.class);
		navButton = NavigationButton.builder()
			.tooltip("Set Timer")
			.icon(ImageUtil.loadImageResource(getClass(), "/tzkal-zuk.png"))
			.priority(6)
			.panel(panel)
			.build();

		if (isInInferno() || !config.hide())
		{
			clientToolbar.addNavigation(navButton);
		}

		keyManager.registerKeyListener(setTimerKeyListener);
	}

	@Override
	protected void shutDown()
	{
		keyManager.unregisterKeyListener(setTimerKeyListener);
		clientToolbar.removeNavigation(navButton);
		infoBoxManager.removeIf(SetTimer.class::isInstance);

		panel.reset();
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (!event.getGroup().equals(SetTimerConfig.GROUP))
		{
			return;
		}

		if (event.getKey().equals("hide"))
		{
			if (!inInferno && config.hide())
			{
				clientToolbar.removeNavigation(navButton);
			}
			else
			{
				clientToolbar.addNavigation(navButton);
			}
		}

		if (event.getKey().equals("infobox"))
		{
			infoBoxManager.removeIf(SetTimer.class::isInstance);

			if (config.infobox() && setTimer.getState() != SetTimerState.IDLE)
			{
				infoBoxManager.addInfoBox(setTimer);
			}
		}
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged e)
	{
		inInferno = isInInferno();
		if (!inInferno && config.hide())
		{
			clientToolbar.removeNavigation(navButton);
		}
		else
		{
			clientToolbar.addNavigation(navButton);
		}
	}

	public void next()
	{
		switch (setTimer.getState()){
			case IDLE:
				setTimer.start();
				setTimer.setState(SetTimerState.STARTED);
				panel.setButtonText("Pause");

				if (config.infobox())
				{
					infoBoxManager.addInfoBox(setTimer);
				}
				break;
			case STARTED:
				setTimer.stop();
				setTimer.setState(SetTimerState.PAUSED);
				panel.setButtonText("Resume");
				break;
			case PAUSED:
				setTimer.start();
				setTimer.setState(SetTimerState.RESUMED);
				panel.setButtonText("Reset");
				break;
			case RESUMED:
				setTimer.stop();
				setTimer.setState(SetTimerState.IDLE);
				panel.setButtonText("Start");

				infoBoxManager.removeIf(SetTimer.class::isInstance);
				break;
			default:
				break;
		}

		update();
	}

	public void update()
	{
		panel.setTimerText(setTimer.getText());
	}

	private boolean isInInferno()
	{
		return client.getMapRegions() != null && ArrayUtils.contains(client.getMapRegions(), INFERNO_REGION_ID);
	}
}

package com.settimer;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Keybind;

import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;

@ConfigGroup(SetTimerConfig.GROUP)
public interface SetTimerConfig extends Config
{
	String GROUP = "settimer";

	@ConfigItem(
		keyName = "hide",
		name = "Hide when outside of the Inferno",
		description = "Don't show the button in the sidebar when you're not in the Inferno"
	)
	default boolean hide()
	{
		return true;
	}

	@ConfigItem(
		keyName = "infobox",
		name = "Show infobox when timer is active",
		description = "Display an infobox while the timer is active"
	)
	default boolean infobox()
	{
		return true;
	}

	@ConfigItem(
		keyName = "hotkey",
		name = "Timer Hotkey",
		description = "Pressing this key combination will start and stop the timer",
		position = 1
	)
	default Keybind timerHotkey() {
		return new Keybind(KeyEvent.VK_S, InputEvent.CTRL_DOWN_MASK);
	}
}

package com.settimer;

enum SetTimerState
{
	IDLE,
	STARTED,
	PAUSED,
	RESUMED;
}

