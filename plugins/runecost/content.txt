package com.runecost;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ExamplePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(RuneCostPlugin.class);
		RuneLite.main(args);
	}
}
package com.runecost;


import java.awt.*;
import javax.inject.Inject;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;


@Slf4j

public class RuneCostPanel extends PluginPanel{



    private static final Dimension PREFERRED_SIZE = new Dimension(PluginPanel.PANEL_WIDTH - 100, 30);
    private static final Dimension MINIMUM_SIZE = new Dimension(0, 30);

    private final Dimension RESULT_SIZE = new Dimension(PluginPanel.PANEL_WIDTH - 5, 100);
    String[] options = {"Select Shop"};
    String[] shops = {"Mage Arena", "Magic Guild", "Prifddinas", "Mage of Zamorak", "Baba Yaga", "Runic Emperium"};

    public JTextField getTotalWant() {
        return totalWant;
    }

    public void setResultInfo(String result){
        resultInfo.setText(result);
    }
    private final JTextField totalWant = new JTextField("Total Runes");

    public JTextField getBuyPer(){
        return buyPer;
    }
    private final JTextField buyPer = new JTextField("Buy Per World");


    private final JTextArea resultInfo = new JTextArea(" Waiting for Calculation...");


    public JComboBox<String> getShopOptions() {
        return shopOptions;
    }

    public void setOptions(String[] options) {
        shopOptions.removeAllItems();
        for(String s:options)
            shopOptions.addItem(s);
    }

    private final JComboBox<String> shopOptions = new JComboBox<String>(options);
    private final JComboBox<String> shopsBox = new JComboBox<String>(shops);

    public JButton getConfirmButton() {
        return confirmButton;
    }

    private final JButton confirmButton = new JButton("Submit");
    private GridBagConstraints c;
    @Inject
   public RuneCostPanel(final RuneCostPlugin plugin, RuneCostConfig config)
    {
        super(true);
        setBorder(new EmptyBorder(18, 10, 0, 10));
        setBackground(ColorScheme.DARK_GRAY_COLOR);
        setLayout(new GridBagLayout());

        c = new GridBagConstraints();
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridx = 0;
        c.gridy = 0;
        c.weightx = 1;
        c.weighty = 0;
        c.insets = new Insets(0, 0, 5, 0);


        totalWant.setPreferredSize(PREFERRED_SIZE);
        totalWant.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        totalWant.setBackground(ColorScheme.DARK_GRAY_COLOR);
        // totalWant.setOpaque(true);
        // totalWant.setMinimumSize(MINIMUM_SIZE);

        resultInfo.setForeground(ColorScheme.LIGHT_GRAY_COLOR);


        totalWant.addMouseListener(new Hover("Total Runes"));

        add(totalWant, c);
        c.gridy++;


        c.gridy = 0;
        c.gridx = 1;
        buyPer.setPreferredSize(PREFERRED_SIZE);
        buyPer.setForeground(ColorScheme.LIGHT_GRAY_COLOR);

        buyPer.addMouseListener(new Hover("Buy Per"));

        add(buyPer,c);

        c.gridx = 0;
        c.gridy++;
        shopOptions.setSize(400,400);
        add(shopOptions,c);
        c.gridy++;

        c.gridx = 1;
        c.gridy = 1;
        shopsBox.setSize(200,200);
        shopsBox.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        add(shopsBox, c);


        c.gridy++;

        c.gridx = 0;
        c.gridwidth = 2;
        confirmButton.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        add(confirmButton,c);
        c.gridy++;


        c.gridx = 0;
        c.gridwidth = 2;
        c.gridheight = 10;
        c.insets = new Insets(20, 0, 50, 0);

        resultInfo.setFont(resultInfo.getFont().deriveFont(16f));

        resultInfo.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        resultInfo.setFocusable(false);
        resultInfo.setEditable(false);
        resultInfo.setLineWrap(true);
        resultInfo.setWrapStyleWord(true);
        // resultInfo.setBackground(Color.lightGray);
        add(resultInfo,c);
        c.gridy++;
        log.info("Panel Ran");

    }


    private void calculatePrice()
    {
        //TODO: THIS
    }

    public JComboBox<String> getShopBox() {
        return shopsBox;
    }
}

package com.runecost;

public class ShopStorage {

    private String shopName;
    public String[][] shopItems;

    public float getShopCostPer() {
        return shopCostPer;
    }

    private float shopCostPer;

    ShopStorage(String shopName, float shopCostPer, String[][] shopItems)
    {
        this.shopName = shopName;
        this.shopItems = shopItems;
        this.shopCostPer = shopCostPer;
    }

    public String getShopName() {
        return shopName;
    }
}

package com.runecost;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.*;

import net.runelite.client.ui.ColorScheme;

public class Hover extends MouseAdapter {

    private String lblStr = "";

    public Hover( String lblStr ) {
        this.lblStr = lblStr;
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        JTextField area = (JTextField) e.getComponent();
        if(area.hasFocus())
            return;
        // area.setForeground(new Color(255, 127, 80));
        area.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        // area.setText( String.format( "<html><u>%s</u></html>", lblStr) );
        area.setText("");

    }

    @Override
    public void mouseExited(MouseEvent e) {
        JTextField area = (JTextField) e.getComponent();
        if(area.hasFocus())
            return;
        // area.setText( String.format( "<html><u>%s</u><</html>", lblStr ) );
        //area.setForeground( new Color(245, 245, 245) );
        area.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        area.setText(this.lblStr);
    }
}
package com.runecost;

import com.google.inject.Provides;
import javax.inject.Inject;
import javax.swing.*;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import java.awt.image.BufferedImage;
import java.text.DecimalFormat;

import static java.lang.Integer.parseInt;

@Slf4j
@PluginDescriptor(
        name = "Rune Cost",
        description = "Calculates cost of runes from certain shops in Gielinor"
)
public class RuneCostPlugin extends Plugin {

    @Inject
    private Client client;

    @Inject
    public RuneCostConfig config;

    @Inject
    private ClientToolbar clientToolbar;

    private RuneCostPanel panel;
    private NavigationButton navButton;

    @Provides
    RuneCostConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(RuneCostConfig.class);
    }

    private final ShopStorage[] shops = {
            new ShopStorage("Mage Arena", 0.001f,
                    new String[][]{
                            {"Chaos Rune", "90", "250"},
                            {"Chaos Rune Pack", "9950", "3"},
                            {"Mind Rune Pack", "330", "4"},                            
                            {"Cosmic Rune", "50", "20"},
                            {"Death Rune", "180", "250"},
                            {"Law Rune", "240", "250"},
                            {"Nature Rune", "180", "250"},
                    }),
            new ShopStorage("Magic Guild", 0.001f,
                    new String[][]{
                            {"Chaos Rune", "90", "250"},
                            {"Chaos Rune Pack", "9950", "35"},
                            {"Mind Rune Pack", "330", "40"},
                            {"Law Rune", "240", "250"},
                            {"Soul Rune", "300", "250"},
                            {"Death Rune", "180", "250"},
                            {"Blood Rune", "400", "250"},
                            {"Nature Rune", "180", "250"},
                    }),
            new ShopStorage("Baba Yaga", 0.001f,
                    new String[][]{
                            {"Chaos Rune", "90", "250"},
                            {"Chaos Rune Pack", "9950", "35"},
                            {"Mind Rune Pack", "330", "40"},
                            {"Law Rune", "240", "250"},
                            {"Soul Rune", "300", "250"},
                            {"Death Rune", "180", "250"},
                            {"Blood Rune", "400", "250"},
                            {"Nature Rune", "180", "250"},
                            {"Astral Rune", "50", "250"},                            
                    }),                    
            new ShopStorage("Prifddinas", 0.001f,
                    new String[][]{
                            {"Chaos Rune", "90", "250"},
                            {"Chaos Rune Pack", "9950", "35"},
                            {"Mind Rune Pack", "330", "40"},
                            {"Law Rune", "240", "250"},
                            {"Death Rune", "180", "250"},
                            {"Blood Rune", "400", "250"},
                            {"Cosmic Rune", "50", "250"},
                            {"Nature Rune", "180", "250"},
                    }),
            new ShopStorage("Mage of Zamorak", 0.001f,
                    new String[][]{
                            {"Chaos Rune", "90", "500"},
                            {"Chaos Rune Pack", "9950", "35"},
                            {"Mind Rune Pack", "330", "35"},
                            {"Death Rune", "180", "500"},
                            {"Blood Rune", "400", "500"},
                    }),
            new ShopStorage("The Runic Emporium", 0.001f,
                    new String[][]{
                            {"Chaos Rune", "90", "1000"},
                            {"Chaos Rune Pack", "9950", "30"},
                            {"Mind Rune Pack", "330", "50"},
                            {"Death Rune", "180", "500"},
                            {"Law Rune", "240", "500"},
                            {"Nature Rune", "180", "500"},
                    })
    };

    @Override
    protected void startUp() throws Exception {
        panel = new RuneCostPanel(this, config);
        log.info("Loading Image...");
        BufferedImage icon = ImageUtil.loadImageResource(getClass(), "icon.png");

        navButton = NavigationButton.builder()
                .tooltip("Rune Cost")
                .priority(5)
                .panel(panel)
                .icon(icon)
                .build();

        clientToolbar.addNavigation(navButton);

        panel.getConfirmButton().addActionListener(e -> calculateRuneCost());
        panel.getShopBox().addActionListener(e -> updateShopOptions());
    }

    @Override
    protected void shutDown() throws Exception{
        // panel.removeAll();
        clientToolbar.removeNavigation(navButton);
    }

    private void calculateRuneCost() {
        String shopName = (String) panel.getShopBox().getSelectedItem();
        ShopStorage selectedShop = getShopByName(shopName);

        if (selectedShop != null) {
            String selectedItem = (String) panel.getShopOptions().getSelectedItem();
            int itemIndex = getItemIndex(selectedShop, selectedItem);

            if (itemIndex != -1) {
                int itemCost = parseInt(selectedShop.shopItems[itemIndex][1]);
                int itemStock = parseInt(selectedShop.shopItems[itemIndex][2]);
                int buyLimit = parseInt(panel.getBuyPer().getText());
                int amountWanted = parseInt(panel.getTotalWant().getText());

                if (buyLimit > itemStock) {
                    panel.setResultInfo("You entered too high of a buy per world. The " + shopName + " only has " + itemStock + " in stock");
                    return;
                }

                int[] results = calculateItem(itemCost, itemStock, selectedShop.getShopCostPer(), amountWanted, buyLimit);

                if (results != null) {
                    DecimalFormat df = new DecimalFormat("###,###,###");
                    String totalCost = df.format(results[1]);
                    String perWorld = df.format(results[0]);
                    panel.setResultInfo("Results...\n" +
                            "~Total you will spend: " + totalCost + "\n" +
                            "~Total spent per rune: " + results[1] / amountWanted + "\n" +
                            "~GP Spent Per World: " + perWorld);
                } else {
                    panel.setResultInfo("You entered too high of a buy per world. The " + shopName + " only has " + itemStock + " in stock");
                }
            }
        }
    }

    private ShopStorage getShopByName(String shopName) {
        //Goes through all the shops to check for the correct shot
        for (ShopStorage shop : shops) {
            if (shop.getShopName().equals(shopName)) {
                return shop;
            }
        }
        return null;
    }

    private int getItemIndex(ShopStorage shop, String itemName) {
        for (int i = 0; i < shop.shopItems.length; i++) {
            if (shop.shopItems[i][0].equals(itemName)) {
                return i;
            }
        }
        return -1;
    }

    public int[] calculateItem(int itemCost, int itemStock, float costPer, int amountWanted, int buyPer) {
        int[] results = new int[2];
        float nextCost = 0;
        int currentCost = itemCost;

        int totalSpent = 0;

        if (buyPer > itemStock) {
            return null;
        }

        for (int i = 1; i < buyPer + 1; i++) {
            nextCost = currentCost * (1 + costPer * (i - 1));
            totalSpent += Math.floor(nextCost);
        }

        float amountAdd = totalSpent * 0.02f;
        totalSpent += Math.floor(amountAdd);

        int realTotal = (int) (((float) amountWanted / buyPer) * totalSpent);

        results[0] = totalSpent;
        results[1] = realTotal;

        return results;
    }

    private void updateShopOptions() {
        String shopName = (String) panel.getShopBox().getSelectedItem();
        ShopStorage selectedShop = getShopByName(shopName);

        if (selectedShop != null) {
            panel.setOptions(getColumn(selectedShop.shopItems, 0));
        }
    }

    public String[] getColumn(String[][] array, int index) {
        String[] column = new String[array.length];
        for (int i = 0; i < column.length; i++) {
            column[i] = array[i][index];
        }
        return column;
    }
}

package com.runecost;

//Mandatory!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("runecost")
public interface RuneCostConfig extends Config
{




}
