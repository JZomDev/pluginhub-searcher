package sky.clueSteps;

import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.WidgetItemOverlay;
import net.runelite.client.ui.overlay.components.TextComponent;

import javax.inject.Inject;
import java.awt.*;

class ClueStepOverlay extends WidgetItemOverlay
{
	private final ClueStepPlugin clueStepPlugin;
	private final ClueStepConfig config;

	private final Color NORMAL = Color.WHITE;

	@Inject
	ClueStepOverlay(ClueStepPlugin clueStepPlugin, ClueStepConfig config)
	{
		this.clueStepPlugin = clueStepPlugin;
		this.config = config;
		showOnInventory();
		showOnEquipment();
	}

	public ClueStepConfig.ClueRange GetStepRange(ClueStepType type)
	{
		switch (type)
		{
			case BEGINNER_CLUE:
				return ClueStepConfig.STEPS_BEGINNER;
			case EASY_CLUE:
				return ClueStepConfig.STEPS_EASY;
			case MEDIUM_CLUE:
				return ClueStepConfig.STEPS_MEDIUM;
			case HARD_CLUE:
				return ClueStepConfig.STEPS_HARD;
			case ELITE_CLUE:
				return ClueStepConfig.STEPS_ELITE;
			case MASTER_CLUE:
				return ClueStepConfig.STEPS_MASTER;
			default:
				return null;
		}
	}

	@Override
	public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem widgetItem)
	{
		int steps;
		ClueWithConfig clueWithConfig = ClueWithConfig.findItem(itemId);
		ClueStepType type;

		if (clueWithConfig != null)
		{
			type = clueWithConfig.getType();
			if (!type.getEnabled().test(config))
			{
				return;
			}

			steps = clueStepPlugin.getClueSteps(clueWithConfig.getConfigKey());
		}
		else
		{
			ClueWithStep clue = ClueWithStep.findItem(itemId);
			if (clue == null)
			{
				return;
			}

			type = clue.getType();
			if (!type.getEnabled().test(config))
			{
				return;
			}

			steps = clue.getCharges();
		}

		graphics.setFont(FontManager.getRunescapeSmallFont());

		final Rectangle bounds = widgetItem.getCanvasBounds();
		final TextComponent textComponent = new TextComponent();
		textComponent.setPosition(new Point(bounds.x - 1, bounds.y + 15));
		textComponent.setText(steps < 0 ? "?" : String.valueOf(steps));
		textComponent.setColor(GetColor(steps, type));
		textComponent.render(graphics);
	}

	private Color GetColor(int steps, ClueStepType type)
	{
		if (!config.recolor())
		{
			return NORMAL;
		}

		int maxSteps = GetStepRange(type).getMax();
		switch (maxSteps - steps)
		{
			case 1:
				return config.getColorGuaranteed();
			case 2:
				return config.getColorProbably();
			case 3:
				return config.getColorPossibly();
			default:
				return NORMAL;
		}
	}
}

package sky.clueSteps;

import lombok.Data;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.*;

@ConfigGroup(ClueStepConfig.GROUP)
public interface ClueStepConfig extends Config
{
	String GROUP = "clueSteps";
	String KEY_BEGINNER = "clueBeginner";
	String KEY_EASY = "clueEasy";
	String KEY_MEDIUM = "clueMedium";
	String KEY_HARD = "clueHard";
	String KEY_ELITE = "clueElite";
	String KEY_MASTER = "clueMaster";

	String ID_EASY = "idEasy";
	String ID_MEDIUM = "idMedium";
	String ID_HARD = "idHard";
	String ID_ELITE = "idElite";

	@Data(staticConstructor = "of")
	class ClueRange {
		private final Integer min;
		private final Integer max;
	}

	ClueRange STEPS_BEGINNER = new ClueRange(1, 3);
	ClueRange STEPS_EASY = new ClueRange(2, 4);
	ClueRange STEPS_MEDIUM = new ClueRange(3, 5);
	ClueRange STEPS_HARD = new ClueRange(4, 6);
	ClueRange STEPS_ELITE = new ClueRange(5, 7);
	ClueRange STEPS_MASTER = new ClueRange(6, 8);

	@ConfigItem(
			keyName = "trackBeginner",
			name = "Track beginner",
			description = "Show steps completed on beginner clues.",
			position = 1
	)
	default boolean trackBeginner()
	{
		return true;
	}

	@ConfigItem(
			keyName = "trackEasy",
			name = "Track easy",
			description = "Show steps completed on easy clues.",
			position = 2
	)
	default boolean trackEasy()
	{
		return true;
	}

	@ConfigItem(
			keyName = "trackMedium",
			name = "Track medium",
			description = "Show steps completed on medium clues.",
			position = 3
	)
	default boolean trackMedium()
	{
		return true;
	}

	@ConfigItem(
			keyName = "trackHard",
			name = "Track hard",
			description = "Show steps completed on hard clues.",
			position = 4
	)
	default boolean trackHard()
	{
		return true;
	}

	@ConfigItem(
			keyName = "trackElite",
			name = "Track elite",
			description = "Show steps completed on elite clues.",
			position = 5
	)
	default boolean trackElite()
	{
		return true;
	}

	@ConfigItem(
			keyName = "trackMaster",
			name = "Track master",
			description = "Show steps completed on master clues.",
			position = 6
	)
	default boolean trackMaster()
	{
		return true;
	}

	@ConfigItem(
			keyName = "recolor",
			name = "Recolor step counter",
			description = "Recolors the step counter when the clue can be completed.",
			position = 7
	)
	default boolean recolor()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
			position = 8,
			keyName = "ColorPossibly",
			name = "Color Possibly",
			description = "Color when next step possibly results in a casket"
	)
	default Color getColorPossibly() {
		return Color.ORANGE;
	}

	@Alpha
	@ConfigItem(
			position = 9,
			keyName = "ColorProbably",
			name = "Color Probably",
			description = "Color when next step probably results in a casket"
	)
	default Color getColorProbably() {
		return Color.YELLOW;
	}

	@Alpha
	@ConfigItem(
			position = 10,
			keyName = "ColorGuaranteed",
			name = "Color Guaranteed",
			description = "Color when next step is a guaranteed casket"
	)
	default Color getColorGuaranteed() {
		return Color.GREEN;
	}
}

package sky.clueSteps;

import com.google.common.collect.ImmutableMap;
import lombok.AllArgsConstructor;
import lombok.Getter;

import javax.annotation.Nullable;
import java.util.Map;

@AllArgsConstructor
@Getter
enum ClueWithStep
{
	;
	private final ClueStepType type;
	private final int id;
	private final int charges;

	private static final Map<Integer, ClueWithStep> ID_MAP;

	static
	{
		ImmutableMap.Builder<Integer, ClueWithStep> builder = new ImmutableMap.Builder<>();

		for (ClueWithStep clueStep : values())
		{
			builder.put(clueStep.getId(), clueStep);
		}

		ID_MAP = builder.build();
	}

	@Nullable
	static ClueWithStep findItem(int itemId)
	{
		return ID_MAP.get(itemId);
	}
}

package sky.clueSteps;

import com.google.common.collect.ImmutableMap;
import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.api.ItemID;

import javax.annotation.Nullable;
import java.util.Map;

@AllArgsConstructor
@Getter
enum ClueWithConfig
{
	BEGINNER_CLUE(ItemID.CLUE_SCROLL_BEGINNER, ClueStepConfig.KEY_BEGINNER, ClueStepType.BEGINNER_CLUE),
	EASY_CLUE(ItemID.CLUE_SCROLL_EASY, ClueStepConfig.KEY_EASY, ClueStepType.EASY_CLUE),
	MEDIUM_CLUE(ItemID.CLUE_SCROLL_MEDIUM, ClueStepConfig.KEY_MEDIUM, ClueStepType.MEDIUM_CLUE),
	HARD_CLUE(ItemID.CLUE_SCROLL_HARD, ClueStepConfig.KEY_HARD, ClueStepType.HARD_CLUE),
	ELITE_CLUE(ItemID.CLUE_SCROLL_ELITE, ClueStepConfig.KEY_ELITE, ClueStepType.ELITE_CLUE),
	MASTER_CLUE(ItemID.CLUE_SCROLL_MASTER, ClueStepConfig.KEY_MASTER, ClueStepType.MASTER_CLUE);

	private final int itemId;
	private final String configKey;
	private final ClueStepType type;

	private static final Map<Integer, ClueWithConfig> ID_MAP;

	private static final int[] beginnerIDs = {
			23182
	};

	private static final int[] easyIDs = {
			2677,
			2678,
			2679,
			2680,
			2681,
			2682,
			2683,
			2684,
			2685,
			2686,
			2687,
			2688,
			2689,
			2690,
			2691,
			2692,
			2693,
			2694,
			2695,
			2696,
			2697,
			2698,
			2699,
			2700,
			2701,
			2702,
			2703,
			2704,
			2705,
			2706,
			2707,
			2708,
			2709,
			2710,
			2711,
			2712,
			2713,
			2716,
			2719,
			3490,
			3491,
			3492,
			3493,
			3494,
			3495,
			3496,
			3497,
			3498,
			3499,
			3500,
			3501,
			3502,
			3503,
			3504,
			3505,
			3506,
			3507,
			3508,
			3509,
			3510,
			3512,
			3513,
			3514,
			3515,
			3516,
			3518,
			7236,
			7238,
			10180,
			10182,
			10184,
			10186,
			10188,
			10190,
			10192,
			10194,
			10196,
			10198,
			10200,
			10202,
			10204,
			10206,
			10208,
			10210,
			10212,
			10214,
			10216,
			10218,
			10220,
			10222,
			10224,
			10226,
			10228,
			10230,
			10232,
			12162,
			12164,
			12166,
			12167,
			12168,
			12169,
			12170,
			12172,
			12173,
			12174,
			12175,
			12176,
			12177,
			12178,
			12179,
			12181,
			12182,
			12183,
			12184,
			12185,
			12186,
			12187,
			12188,
			12189,
			12190,
			12191,
			12192,
			19814,
			19816,
			19817,
			19818,
			19819,
			19820,
			19821,
			19822,
			19823,
			19824,
			19825,
			19826,
			19828,
			19829,
			19830,
			19831,
			19833,
			22001,
			23149,
			23150,
			23151,
			23152,
			23153,
			23154,
			23155,
			23156,
			23157,
			23158,
			23159,
			23160,
			23161,
			23162,
			23163,
			23164,
			23165,
			23166,
			25788,
			25789,
			28913,
			28914,
			29853,
			29854
	};

	private static final int[] mediumIDs = {
			2801,
			2803,
			2805,
			2807,
			2809,
			2811,
			2813,
			2815,
			2817,
			2819,
			2821,
			2823,
			2825,
			2827,
			2829,
			2831,
			2833,
			2835,
			2837,
			2839,
			2841,
			2843,
			2845,
			2847,
			2848,
			2849,
			2851,
			2853,
			2855,
			2856,
			2857,
			2858,
			3582,
			3584,
			3586,
			3588,
			3590,
			3592,
			3594,
			3596,
			3598,
			3599,
			3601,
			3602,
			3604,
			3605,
			3607,
			3609,
			3610,
			3611,
			3612,
			3613,
			3614,
			3615,
			3616,
			3617,
			3618,
			7274,
			7276,
			7278,
			7280,
			7282,
			7284,
			7286,
			7288,
			7290,
			7292,
			7294,
			7296,
			7298,
			7300,
			7301,
			7303,
			7304,
			7305,
			7307,
			7309,
			7311,
			7313,
			7315,
			7317,
			10254,
			10256,
			10258,
			10260,
			10262,
			10264,
			10266,
			10268,
			10270,
			10272,
			10274,
			10276,
			10278,
			12021,
			12023,
			12025,
			12027,
			12029,
			12031,
			12033,
			12035,
			12037,
			12039,
			12041,
			12043,
			12045,
			12047,
			12049,
			12051,
			12053,
			12055,
			12057,
			12059,
			12061,
			12063,
			12065,
			12067,
			12069,
			12071,
			19734,
			19736,
			19738,
			19740,
			19742,
			19744,
			19746,
			19748,
			19750,
			19752,
			19754,
			19756,
			19758,
			19760,
			19762,
			19764,
			19766,
			19768,
			19770,
			19772,
			19774,
			19776,
			19778,
			19780,
			23046,
			23131,
			23133,
			23135,
			23136,
			23137,
			23138,
			23139,
			23140,
			23141,
			23142,
			23143,
			25783,
			25784,
			28907, // this is a challenge scroll, it does not follow normal clue standards
			28908,
			28909,
			29857,
			29858
	};

	private static final int[] hardIDs = {
			2722,
			2723,
			2725,
			2727,
			2729,
			2731,
			2733,
			2735,
			2737,
			2739,
			2741,
			2743,
			2745,
			2747,
			2773,
			2774,
			2776,
			2778,
			2780,
			2782,
			2783,
			2785,
			2786,
			2788,
			2790,
			2792,
			2793,
			2794,
			2796,
			2797,
			2799,
			3520,
			3522,
			3524,
			3525,
			3526,
			3528,
			3530,
			3532,
			3534,
			3536,
			3538,
			3540,
			3542,
			3544,
			3546,
			3548,
			3550,
			3552,
			3554,
			3556,
			3558,
			3560,
			3562,
			3564,
			3566,
			3568,
			3570,
			3572,
			3573,
			3574,
			3575,
			3577,
			3579,
			3580,
			7239,
			7241,
			7243,
			7245,
			7247,
			7248,
			7249,
			7250,
			7251,
			7252,
			7253,
			7254,
			7255,
			7256,
			7258,
			7260,
			7262,
			7264,
			7266,
			7268,
			7270,
			7272,
			10234,
			10236,
			10238,
			10240,
			10242,
			10244,
			10246,
			10248,
			10250,
			10252,
			12542,
			12544,
			12546,
			12548,
			12550,
			12552,
			12554,
			12556,
			12558,
			12560,
			12562,
			12564,
			12566,
			12568,
			12570,
			12572,
			12574,
			12576,
			12578,
			12581,
			12584,
			12587,
			12590,
			19840,
			19842,
			19844,
			19846,
			19848,
			19850,
			19852,
			19853,
			19854,
			19856,
			19857,
			19858,
			19860,
			19862,
			19864,
			19866,
			19868,
			19870,
			19872,
			19874,
			19876,
			19878,
			19880,
			19882,
			19884,
			19886,
			19888,
			19890,
			19892,
			19894,
			19896,
			19898,
			19900,
			19902,
			19904,
			19906,
			19908,
			19910,
			21526,
			21527,
			23045,
			23167,
			23168,
			23169,
			23170,
			23172,
			23174,
			23175,
			23176,
			23177,
			23178,
			23179,
			23180,
			23181,
			24493,
			25790,
			25791,
			25792,
			26566,
			28915,
			28916,
			28918,
			29859
	};

	private static final int[] eliteIDs = {
			12073,
			12074,
			12075,
			12076,
			12077,
			12078,
			12079,
			12080,
			12081,
			12082,
			12083,
			12085,
			12086,
			12087,
			12088,
			12089,
			12090,
			12091,
			12092,
			12093,
			12094,
			12095,
			12096,
			12097,
			12098,
			12099,
			12100,
			12101,
			12102,
			12103,
			12104,
			12105,
			12106,
			12107,
			12108,
			12109,
			12110,
			12111,
			12113,
			12114,
			12115,
			12116,
			12117,
			12118,
			12119,
			12120,
			12121,
			12122,
			12123,
			12124,
			12125,
			12126,
			12127,
			12130,
			12132,
			12133,
			12134,
			12135,
			12136,
			12137,
			12138,
			12140,
			12141,
			12142,
			12143,
			12144,
			12145,
			12146,
			12147,
			12148,
			12149,
			12150,
			12151,
			12152,
			12153,
			12154,
			12155,
			12156,
			12157,
			12158,
			12159,
			19782,
			19783,
			19784,
			19785,
			19786,
			19787,
			19788,
			19789,
			19790,
			19791,
			19792,
			19793,
			19794,
			19795,
			19796,
			19797,
			19798,
			19799,
			19800,
			19801,
			19802,
			19803,
			19804,
			19805,
			19806,
			19807,
			19808,
			19809,
			19810,
			19811,
			19813,
			21524,
			21525,
			22000,
			23144,
			23145,
			23146,
			23147,
			23148,
			23770,
			24253,
			24773,
			25498,
			25499,
			25786,
			25787,
			28910,
			28911,
			28912,
			29855,
			29856
	};

	private static final int[] masterIDs = {
			19835
	};

	private static final int[][] IDs = {beginnerIDs, easyIDs, mediumIDs, hardIDs, eliteIDs, masterIDs};

	static
	{
		ImmutableMap.Builder<Integer, ClueWithConfig> builder = new ImmutableMap.Builder<>();

		for (int i = 0; i < 6; i++) {
			for (int ID : IDs[i]) {
				builder.put(ID, values()[i]);
			}
		}

		ID_MAP = builder.build();
	}

	@Nullable
	static ClueWithConfig findItem(int itemId)
	{
		return ID_MAP.get(itemId);
	}
}

package sky.clueSteps;

import com.google.inject.Provides;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.api.widgets.*;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;
import javax.inject.Inject;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@PluginDescriptor(
	name = "Clue Steps",
	description = "Show number of steps done on each clue",
	tags = {"inventory", "clues", "overlay"}
)
@Slf4j
public class ClueStepPlugin extends Plugin
{
	@Inject
	private ConfigManager configManager;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ClueStepOverlay overlay;

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	private static final Pattern BEGINNER_PATTERN = Pattern.compile("You have completed (\\d+) steps? on this beginner clue scroll\\.");
	private static final Pattern EASY_PATTERN = Pattern.compile("You have completed (\\d+) steps? on this easy clue scroll\\.");
	private static final Pattern MEDIUM_PATTERN = Pattern.compile("You have completed (\\d+) steps? on this medium clue scroll\\.");
	private static final Pattern HARD_PATTERN = Pattern.compile("You have completed (\\d+) steps? on this hard clue scroll\\.");
	private static final Pattern ELITE_PATTERN = Pattern.compile("You have completed (\\d+) steps? on this elite clue scroll\\.");
	private static final Pattern MASTER_PATTERN = Pattern.compile("You have completed (\\d+) steps? on this master clue scroll\\.");

	private boolean loginFlag;

	private static final int WATSON_HAS_EASY_VARBIT = 5186;
	private static final int WATSON_HAS_MEDIUM_VARBIT = 5187;
	private static final int WATSON_HAS_HARD_VARBIT = 5188;
	private static final int WATSON_HAS_ELITE_VARBIT = 5189;

	private boolean watsonHasEasy;
	private boolean watsonHasMedium;
	private boolean watsonHasHard;
	private boolean watsonHasElite;

	enum ClueTier {
		EASY,
		MEDIUM,
		HARD,
		ELITE
	}

	@Data(staticConstructor = "of")
	static
	class WatsonChanged {
		private final ClueStepPlugin.ClueTier tier;
		private final boolean givenToWatson;
	}

	@Provides
	ClueStepConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ClueStepConfig.class);
	}

	@Override
	protected void startUp()
	{
		overlayManager.add(overlay);

		if (client.getGameState() == GameState.LOGGED_IN)
		{
			loginFlag = true;
		}
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		switch (event.getGameState())
		{
			case HOPPING:
			case LOGGING_IN:
				loginFlag = true;
				break;
		}
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		if (loginFlag) {
			updateWatson();
			loginFlag = false;
		}
	}

	private void updateWatson()
	{
		for (ClueTier tier : ClueTier.values()) {
			boolean hasClue = watsonHasClue(tier);
			switch (tier)
			{
				case EASY:
					watsonHasEasy = hasClue;
					break;
				case MEDIUM:
					watsonHasMedium = hasClue;
					break;
				case HARD:
					watsonHasHard = hasClue;
					break;
				case ELITE:
					watsonHasElite = hasClue;
					break;
			}
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		if (event.getType() == ChatMessageType.GAMEMESSAGE || event.getType() == ChatMessageType.SPAM)
		{
			String message = Text.removeTags(event.getMessage());
			Matcher beginnerMatcher = BEGINNER_PATTERN.matcher(message);
			Matcher easyMatcher = EASY_PATTERN.matcher(message);
			Matcher mediumMatcher = MEDIUM_PATTERN.matcher(message);
			Matcher hardMatcher = HARD_PATTERN.matcher(message);
			Matcher eliteMatcher = ELITE_PATTERN.matcher(message);
			Matcher masterMatcher = MASTER_PATTERN.matcher(message);

			if (beginnerMatcher.find())
			{
				updateBeginner(Integer.parseInt(beginnerMatcher.group(1)));
			}
			else if (easyMatcher.find())
			{
				updateEasy(Integer.parseInt(easyMatcher.group(1)));
			}
			else if (mediumMatcher.find())
			{
				updateMedium(Integer.parseInt(mediumMatcher.group(1)));
			}
			else if (hardMatcher.find())
			{
				updateHard(Integer.parseInt(hardMatcher.group(1)));
			}
			else if (eliteMatcher.find())
			{
				updateElite(Integer.parseInt(eliteMatcher.group(1)));
			}
			else if (masterMatcher.find())
			{
				updateMaster(Integer.parseInt(masterMatcher.group(1)));
			}
		}
	}

	private void updateBeginner(final int value)
	{
		setClueSteps(ClueStepConfig.KEY_BEGINNER, value);
	}

	private void updateEasy(final int value)
	{
		setClueSteps(ClueStepConfig.KEY_EASY, value);
	}

	private void updateEasy(final int value, final int ID)
	{
		setClueSteps(ClueStepConfig.KEY_EASY, value);
		setClueSteps(ClueStepConfig.ID_EASY, ID);
	}

	private void updateMedium(final int value)
	{
		setClueSteps(ClueStepConfig.KEY_MEDIUM, value);
	}

	private void updateMedium(final int value, final int ID)
	{
		setClueSteps(ClueStepConfig.KEY_MEDIUM, value);
		setClueSteps(ClueStepConfig.ID_MEDIUM, ID);
	}

	private void updateHard(final int value)
	{
		setClueSteps(ClueStepConfig.KEY_HARD, value);
	}

	private void updateHard(final int value, final int ID)
	{
		setClueSteps(ClueStepConfig.KEY_HARD, value);
		setClueSteps(ClueStepConfig.ID_HARD, ID);
	}

	private void updateElite(final int value)
	{
		setClueSteps(ClueStepConfig.KEY_ELITE, value);
	}

	private void updateElite(final int value, final int ID)
	{
		setClueSteps(ClueStepConfig.KEY_ELITE, value);
		setClueSteps(ClueStepConfig.ID_ELITE, ID);
	}

	private void updateMaster(final int value)
	{
		setClueSteps(ClueStepConfig.KEY_MASTER, value);
	}

	int getClueSteps(String key)
	{
		Integer i = configManager.getRSProfileConfiguration(ClueStepConfig.GROUP, key, Integer.class);
		return i == null ? -1 : i;
	}

	private void setClueSteps(String key, int value)
	{
		configManager.setRSProfileConfiguration(ClueStepConfig.GROUP, key, value);
	}

	@Subscribe
	public void onWidgetLoaded(WidgetLoaded event) {
		if (event.getGroupId() == InterfaceID.DIALOG_SPRITE) {
			clientThread.invokeLater(() -> {
				Widget sprite = client.getWidget(ComponentID.DIALOG_SPRITE_SPRITE);
                if (sprite == null) return;
                int clueID = sprite.getItemId();

				switch (clueID){
					case ItemID.REWARD_CASKET_BEGINNER:
						updateBeginner(0);
						return;
					case ItemID.REWARD_CASKET_EASY:
						updateEasy(-1, 0);
						return;
					case ItemID.REWARD_CASKET_MEDIUM:
						updateMedium(-1, 0);
						return;
					case ItemID.REWARD_CASKET_HARD:
						updateHard(-1, 0);
						return;
					case ItemID.REWARD_CASKET_ELITE:
						updateElite(-1, 0);
						return;
					case ItemID.REWARD_CASKET_MASTER:
						updateMaster(0);
						return;
					default:
						break;
				}

				// Beginner and master clues all have the same ID, so can't look at an id change to determine new clue
				ClueWithConfig clueType = ClueWithConfig.findItem(clueID);
				if (clueType == null) { return ;}

				int steps = getClueSteps(clueType.getConfigKey()) + 1;

				switch (clueType.getType()){
					case BEGINNER_CLUE:
						updateBeginner(steps);
						return;
					case MASTER_CLUE:
						updateMaster(steps);
						return;
					default:
						break;
				}
			});
		}
	}

	private ArrayList<WatsonChanged> WatsonChanged()
	{
		boolean[] watsonState = {watsonHasEasy, watsonHasMedium, watsonHasHard, watsonHasElite};
		updateWatson();
		boolean[] updated = {watsonHasEasy, watsonHasMedium, watsonHasHard, watsonHasElite};

		ArrayList<WatsonChanged> changed = new ArrayList<>();

		for (int i = 0; i < watsonState.length; i++) {
			if (watsonState[i] != updated[i])
			{
				changed.add(new WatsonChanged(ClueTier.values()[i], updated[i]));
			}
		}

		return changed;
	}

	@Subscribe
	public void onItemContainerChanged(final ItemContainerChanged event)
	{
		if (loginFlag || event.getContainerId() != InventoryID.INVENTORY.getId()) return;

		Item[] invItems = event.getItemContainer().getItems();
		ArrayList<WatsonChanged> watson = WatsonChanged();

		if (watson.size() > 0)
		{
			if (!watsonHasEasy && !watsonHasMedium && !watsonHasHard && !watsonHasElite)
			{
				// Watson gave a master
				updateMaster(-1);
			}

			// reset the clue given to watson
			for (WatsonChanged w : watson) {
				if (w.givenToWatson) {
					switch (w.tier) {
						case EASY:
							updateEasy(-1, 0);
							break;
						case MEDIUM:
							updateMedium(-1, 0);
							break;
						case HARD:
							updateHard(-1, 0);
							break;
						case ELITE:
							updateElite(-1, 0);
							break;
					}
				}
			}
		}
		else
		{
			// add to the step counter
			for (Item item : invItems)
			{
				ClueWithConfig clue = ClueWithConfig.findItem(item.getId());
				if (clue == null) continue;

				int clueID = item.getId();
				int steps = getClueSteps(clue.getConfigKey()) + 1;

				switch (clue.getType())
				{
					case EASY_CLUE:
						if (getClueSteps(ClueStepConfig.ID_EASY) != clueID)
						{
							updateEasy(steps, clueID);
						}
						break;
					case MEDIUM_CLUE:
						if (getClueSteps(ClueStepConfig.ID_MEDIUM) != clueID)
						{
							updateMedium(steps, clueID);
						}
						break;
					case HARD_CLUE:
						if (getClueSteps(ClueStepConfig.ID_HARD) != clueID)
						{
							updateHard(steps, clueID);
						}
						break;
					case ELITE_CLUE:
						if (getClueSteps(ClueStepConfig.ID_ELITE) != clueID)
						{
							updateElite(steps, clueID);
						}
						break;
					default:
						break;
				}
			}
		}
	}

	public boolean watsonHasClue(ClueTier tier)
	{
		if (tier == ClueTier.EASY)
		{
			return client.getVarbitValue(WATSON_HAS_EASY_VARBIT) == 1;
		}
		else if (tier == ClueTier.MEDIUM)
		{
			return client.getVarbitValue(WATSON_HAS_MEDIUM_VARBIT) == 1;
		}
		else if (tier == ClueTier.HARD)
		{
			return client.getVarbitValue(WATSON_HAS_HARD_VARBIT) == 1;
		}
		else if (tier == ClueTier.ELITE)
		{
			return client.getVarbitValue(WATSON_HAS_ELITE_VARBIT) == 1;
		}
		return false;
	}
}

package sky.clueSteps;

import lombok.AllArgsConstructor;
import lombok.Getter;

import java.util.function.Predicate;

@AllArgsConstructor
@Getter
enum ClueStepType
{
	BEGINNER_CLUE(ClueStepConfig::trackBeginner),
	EASY_CLUE(ClueStepConfig::trackEasy),
	MEDIUM_CLUE(ClueStepConfig::trackMedium),
	HARD_CLUE(ClueStepConfig::trackHard),
	ELITE_CLUE(ClueStepConfig::trackElite),
	MASTER_CLUE(ClueStepConfig::trackMaster);

	private final Predicate<ClueStepConfig> enabled;
}

package sky.clueSteps;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ClueStepsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ClueStepPlugin.class);
		RuneLite.main(args);
	}
}
