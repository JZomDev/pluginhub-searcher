package com.DeathInventory;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DeathInventoryTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(DeathInventoryPlugin.class);
		RuneLite.main(args);
	}
}
package com.DeathInventory;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Keybind;

@ConfigGroup("Death-Inventory")
public interface DeathInventoryConfig extends Config
{
	@ConfigItem(
			keyName = "showAfterDeath",
			name = "Show after dieing before banking",
			description = "Show the inventory display of what you had when you died after you have died before you visit the bank."
	) default boolean showAfterDeath() { return true; }

	@ConfigItem(
			keyName = "showAfterBank",
			name = "Show after Banking",
			description = "Show the inventory display of what you had when you died after you have finished banking."
	) default boolean showAfterBank() { return false; }

	enum showInBankEnum
	{
		Never,
		Once,
		Always
	}

	@ConfigItem(
			keyName = "showInBank",
			name = "Show whilst in the bank",
			description = "Show the inventory display once at the bank of what you had when you died"
	)
	default showInBankEnum showInBank() { return showInBankEnum.Once; }

	@ConfigItem(
			keyName = "toggleKeybind",
			name = "Key Always Show",
			description = "Binds a key (combination) to toggle showing the death inventory display."
	)
	default Keybind toggleKeybind()	{ return Keybind.NOT_SET; }
}


package com.DeathInventory;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.ActorDeath;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.client.ui.overlay.OverlayManager;

import net.runelite.client.util.HotkeyListener;

import java.util.Arrays;

@Slf4j
@PluginDescriptor(
	name = "Death Inventory"
)

public class DeathInventoryPlugin extends Plugin
{
	@Getter
    @Inject
	private Client client;
	@Inject
	private ConfigManager configMan;
	@Inject
	private DeathInventoryConfig config;
	@Inject
	private DeathInventoryOverlay overlay;
	@Inject
	private OverlayManager overlayManager;
	@Inject
	private KeyManager keyManager;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
		keyManager.registerKeyListener(hotkeyListener);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
		keyManager.unregisterKeyListener(hotkeyListener);
	}

	@Subscribe
	public void onActorDeath(ActorDeath actorDeath)
	{
		Actor actor = actorDeath.getActor();
		if (actor instanceof Player)
		{
			Player player = (Player) actor;
			if (player == client.getLocalPlayer()) {
//				final ItemContainer itemContainer = client.getItemContainer(InventoryID.INVENTORY);
//				if (itemContainer == null) {
//					return;
//				}
//				final Item[] items = itemContainer.getItems();
//				int[] itemIDs = new int[INVENTORY_SIZE];
//				int[] itemQuantites = new int[INVENTORY_SIZE];
//
//				for (int i = 0; i < INVENTORY_SIZE; i++) {
//					if (i < items.length) {
//						final Item item = items[i];
//
//						if (item.getQuantity() > 0) {
//							itemIDs[i] = item.getId();
//							itemQuantites[i] = item.getQuantity();
//						}
//					}
//				}
//				configMan.setConfiguration("Death-Inventory","state", "0");
//				configMan.setConfiguration("Death-Inventory", "itemQuantites", Arrays.toString(itemQuantites));
//				configMan.setConfiguration("Death-Inventory", "itemIDs", Arrays.toString(itemIDs));
				overlay.onDeath();
            }
		}
	}

	@Provides
	DeathInventoryConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(DeathInventoryConfig.class);
	}

	private final HotkeyListener hotkeyListener = new HotkeyListener(() -> config.toggleKeybind())
	{
		@Override
		public void hotkeyPressed()
		{
			overlay.toggle();
		}
	};
}

package com.DeathInventory;
import java.awt.*;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.util.Arrays;
import javax.inject.Inject;
import net.runelite.api.*;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ComponentOrientation;
import net.runelite.client.ui.overlay.components.ImageComponent;
import net.runelite.api.widgets.ComponentID;

public class DeathInventoryOverlay extends OverlayPanel {
    private static final int INVENTORY_SIZE = 28;
    private static final ImageComponent PLACEHOLDER_IMAGE = new ImageComponent(
            new BufferedImage(Constants.ITEM_SPRITE_WIDTH, Constants.ITEM_SPRITE_HEIGHT, BufferedImage.TYPE_4BYTE_ABGR));

    private final Client client;
    private final ItemManager itemManager;
    private final ConfigManager configMan;
    private final DeathInventoryConfig config;
    private boolean toggleHotkey = false;

    @Inject
    private DeathInventoryOverlay(Client client, ItemManager itemManager, ConfigManager configMan, DeathInventoryConfig config)
    {
        setPosition(OverlayPosition.BOTTOM_RIGHT);
        panelComponent.setWrap(true);
        panelComponent.setGap(new Point(6, 4));
        panelComponent.setPreferredSize(new Dimension(4 * (Constants.ITEM_SPRITE_WIDTH + 6), 0));
        panelComponent.setOrientation(ComponentOrientation.HORIZONTAL);
        this.itemManager = itemManager;
        this.client = client;
        this.configMan = configMan;
        this.config = config;
    }

    private static int[] fromString(String string) {
        String[] strings = string.replace("[", "").replace("]", "").split(", ");
        int[] result = new int[strings.length];
        for (int i = 0; i < result.length; i++) {
            result[i] = Integer.parseInt(strings[i]);
        }
        return result;
    }

    private void putState(String val) {
        configMan.setConfiguration("Death-Inventory","state", val);
    }

    private String getState () {
        return configMan.getConfiguration("Death-Inventory", "state");
    }

    private boolean shouldShow() {
        // hide after death if configured
        if (getState().equals("0") && !config.showAfterDeath()) { return false; }
        // Hide in the bank after death if not showing and not always shown
        if (config.showInBank().toString().equals("Never") && getState().equals("1")) { return false; }
        // Hide in the bank always if not showing
        if (client.getWidget(ComponentID.BANK_CONTAINER) != null &&  !config.showInBank().toString().equals("Always") && getState().equals("2")) { return false; }
        // Hide in the world always if not showing and not alwyas shown in bank
        if (client.getWidget(ComponentID.BANK_CONTAINER) == null &&  !config.showAfterBank() && getState().equals("2") ) { return false; }
        return true;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        // if bank is open, log the state
        if (client.getWidget(ComponentID.BANK_CONTAINER) != null && getState().equals("0")) { putState("1"); toggleHotkey=false;}

        // if bank was just open and now closed set state to banked
        if (client.getWidget(ComponentID.BANK_CONTAINER) == null && getState().equals("1")) { putState("2"); toggleHotkey=false;}

        // Selective hide depending on state and hotkey toggle
        if (shouldShow() == toggleHotkey) { return null; }

        // Retrieve the inventory when died
        final int[] itemQuantites = fromString(configMan.getConfiguration("Death-Inventory", "itemQuantites"));
        final int[] itemIDs = fromString(configMan.getConfiguration("Death-Inventory", "itemIDs"));

        // Loop over and draw each item
        for (int i = 0; i < itemIDs.length; i++) {
            if (itemQuantites[i] > 0) {
                final BufferedImage image = itemManager.getImage(itemIDs[i], itemQuantites[i], itemQuantites[i] > 1);
                if (image != null) {
                    panelComponent.getChildren().add(new ImageComponent(image));
                    continue;
                }
            }

            // put a placeholder image so each item is aligned properly and the panel is not resized
            panelComponent.getChildren().add(PLACEHOLDER_IMAGE);
        }
        panelComponent.setBackgroundColor(new Color(168, 42, 30, 128));
        return super.render(graphics);
    }

    public void toggle() {
        toggleHotkey = !toggleHotkey;
    }

    public void onDeath() {
        final ItemContainer itemContainer = client.getItemContainer(InventoryID.INVENTORY);
        if (itemContainer == null) {
            return;
        }
        final Item[] items = itemContainer.getItems();
        int[] itemIDs = new int[INVENTORY_SIZE];
        int[] itemQuantites = new int[INVENTORY_SIZE];

        for (int i = 0; i < INVENTORY_SIZE; i++) {
            if (i < items.length) {
                final Item item = items[i];

                if (item.getQuantity() > 0) {
                    itemIDs[i] = item.getId();
                    itemQuantites[i] = item.getQuantity();
                }
            }
        }
        putState("0");
        configMan.setConfiguration("Death-Inventory", "itemQuantites", Arrays.toString(itemQuantites));
        configMan.setConfiguration("Death-Inventory", "itemIDs", Arrays.toString(itemIDs));
        toggleHotkey = false;
    }
}


