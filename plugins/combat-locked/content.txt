package com.combatlocked;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CombatLockedPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CombatLockedPlugin.class);
		RuneLite.main(args);
	}
}
package com.combatlocked;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;

import java.awt.*;

@ConfigGroup(CombatLockedConfig.GROUP)
public interface CombatLockedConfig extends Config
{
	String GROUP = "combatlocked";

	@ConfigSection(
			name = "With Levels Available",
			description = "With Levels Available",
			position = 1
	)
	String availableSection = "withLevelsAvailable";

	@ConfigSection(
			name = "With No Levels Available",
			description = "With No Levels Available",
			position = 2
	)
	String notAvailableSection = "withNoLevelsAvailable";

	@ConfigItem(
			keyName = "levelsPerCa",
			name = "Levels Per Combat Achievement",
			description = "How many levels become available for each Combat Achievement earned",
			position = 0
	)
	default int levelsPerCa()
	{
		return 4;
	}

	@ConfigItem(
			keyName = "showOverlay",
			name = "Show Overlay",
			description = "Show an overlay on the game screen with levels available",
			position = 1
	)
	default boolean showOverlay() { return true; }

	@ConfigItem(
			keyName = "warnWhenCloseAndAvailable",
			name = "Skill tab warning",
			description = "Show a warning in the skill tab when close to leveling and levels are available",
			section = availableSection,
			position = 1
	)
	default boolean warnWhenCloseAndAvailable() { return true; }

	@Range(
			min = 0,
			max = 100
	)
	@ConfigItem(
			keyName = "warnThresholdAvailable",
			name = "Threshold (%)",
			description = "Percentage of level progress to show warning at",
			section = availableSection,
			position = 2
	)
	default int warnThresholdAvailable() {return 90;}

	@Alpha
	@ConfigItem(
			keyName = "warnColorAvailable",
			name = "Color",
			description = "Color for the skill tab warning",
			section = availableSection,
			position = 3
	)
	default Color warnColorAvailable() {return new Color(255, 255, 0, 100);}

	@ConfigItem(
			keyName = "warnWhenCloseNotAvailable",
			name = "Skill tab warning",
			description = "Show a warning in the skill tab when close to leveling and levels are not available",
			section = notAvailableSection,
			position = 1
	)
	default boolean warnWhenCloseNotAvailable() { return true; }

	@Range(
			min = 0,
			max = 100
	)
	@ConfigItem(
			keyName = "warnThresholdNotAvailable",
			name = "Threshold (%)",
			description = "Percentage of level progress to show warning at",
			section = notAvailableSection,
			position = 2
	)
	default int warnThresholdNotAvailable() {return 85;}

	@Alpha
	@ConfigItem(
			keyName = "warnColorNotAvailable",
			name = "Color",
			description = "Color for the skill tab warning",
			section = notAvailableSection,
			position = 3
	)
	default Color warnColorNotAvailable() {return new Color(255, 0, 0, 100);}
}

package com.combatlocked;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;

import javax.inject.Inject;
import javax.sound.sampled.Line;
import java.awt.*;

import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class CombatLockedOverlay extends OverlayPanel {
    private final Client client;
    private final CombatLockedConfig config;
    private final CombatLockedPlugin plugin;

    private final static String TOTAL_CAS_STRING = "Total Combat Achievements:";
    private final static String AVAILABLE_LEVELS_STRING = "Available levels:";
    private final static String[] STRINGS = new String[] {
            TOTAL_CAS_STRING,
            AVAILABLE_LEVELS_STRING,
    };

    @Inject
    private CombatLockedOverlay(Client client, CombatLockedConfig config,CombatLockedPlugin plugin) {
        super(plugin);
        this.plugin = plugin;
        this.client = client;
        this.config = config;
        setPosition(OverlayPosition.TOP_LEFT);
        setPriority(OverlayPriority.MED);
        getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Combat Locked plugin"));
    }

    @Override
    public Dimension render(Graphics2D graphics) {

//        String unspentTiles = addCommasToNumber(plugin.getRemainingTiles());
//        String unlockedTiles = addCommasToNumber(plugin.getTotalTiles());
//        String xpUntilNextTile = addCommasToNumber(plugin.getXpUntilNextTile());

        if (!plugin.getInitialized()) {
            panelComponent.getChildren().add(LineComponent.builder().left("Open the Combat Achievements panel to initialize the plugin. You only have to do this once.").build());
        }
        else {
            panelComponent.getChildren().add(LineComponent.builder().left("Total CAs").right(Integer.toString(plugin.getTotalCas())).build());
            int availableLevels = plugin.getAvailableLevels();
            LineComponent.LineComponentBuilder a = LineComponent.builder().left("Available levels").right(Integer.toString(plugin.getAvailableLevels()));
            if (availableLevels <= 0) {
                a = a.rightColor(Color.red);
            }
            panelComponent.getChildren().add(a.build());
        }

        return super.render(graphics);

//        panelComponent.getChildren().add(LineComponent.builder()
//                .left(UNSPENT_TILES_STRING)
//                .leftColor(getTextColor())
//                .right(unspentTiles)
//                .rightColor(getTextColor())
//                .build());
//
//        if(!(config.enableCustomGameMode() && config.excludeExp())) {
//            panelComponent.getChildren().add(LineComponent.builder()
//                    .left(XP_UNTIL_NEXT_TILE)
//                    .right(xpUntilNextTile)
//                    .build());
//        }
//
//        panelComponent.getChildren().add(LineComponent.builder()
//                .left(UNLOCKED_TILES)
//                .right(unlockedTiles)
//                .build());
//
//        panelComponent.setPreferredSize(new Dimension(
//                getLongestStringWidth(STRINGS, graphics)
//                        + getLongestStringWidth(new String[] {unlockedTiles, unspentTiles}, graphics),
//                0));
//
//        return super.render(graphics);
    }

    /*private Color getTextColor() {
        if(config.enableTileWarnings()) {
            if (plugin.getRemainingTiles() <= 0) {
                return Color.RED;
            } else if (plugin.getRemainingTiles() <= config.warningLimit()) {
                return Color.ORANGE;
            }
        }
        return Color.WHITE;
    }*/

    private int getLongestStringWidth(String[] strings, Graphics2D graphics) {
        int longest = graphics.getFontMetrics().stringWidth("000000");
        for(String i: strings) {
            int currentItemWidth = graphics.getFontMetrics().stringWidth(i);
            if(currentItemWidth > longest) {
                longest = currentItemWidth;
            }
        }
        return longest;
    }

    private String addCommasToNumber(int number) {
        String input = Integer.toString(number);
        StringBuilder output = new StringBuilder();
        for(int x = input.length() - 1; x >= 0; x--) {
            int lastPosition = input.length() - x - 1;
            if(lastPosition != 0 && lastPosition % 3 == 0) {
                output.append(",");
            }
            output.append(input.charAt(x));
        }
        return output.reverse().toString();
    }
}

package com.combatlocked;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.Experience;
import net.runelite.api.GameState;
import net.runelite.api.Skill;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.ScriptPostFired;
import net.runelite.api.events.ScriptPreFired;
import net.runelite.api.events.StatChanged;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.api.widgets.WidgetPositionMode;
import net.runelite.api.widgets.WidgetSizeMode;
import net.runelite.api.widgets.WidgetType;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.RuneScapeProfileChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;
import java.awt.*;
import java.util.Arrays;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
@PluginDescriptor(
        name = "Combat Locked"
)
public class CombatLockedPlugin extends Plugin {
    private static final Skill[] SKILLS = {
            Skill.ATTACK,
            Skill.STRENGTH,
            Skill.DEFENCE,
            Skill.RANGED,
            Skill.PRAYER,
            Skill.MAGIC,
    };
    private static final int SCRIPTID_STATS_SETLEVEL = 394;
    private static final Pattern CA_MESSAGE_PATTERN = Pattern.compile("Congratulations, you've completed an? (?<tier>\\w+) combat task: <col=[0-9a-f]+>(?<task>(.+))</col>");
    private int availableLevels;
    private int totalCas;
    private boolean initialized;
    private String profileKey;
    private final Widget[] warnings = new Widget[24];
    private Widget currentWidget;

    @Inject
    private OverlayManager overlayManager;
    @Inject
    private ConfigManager configManager;
    @Inject
    private CombatLockedOverlay overlay;
    @Inject
    private ClientThread clientThread;

    @Inject
    private Client client;

    @Inject
    private CombatLockedConfig config;

    @Override
    protected void startUp() throws Exception {
        if (config.showOverlay()) {
            overlayManager.add(overlay);
        }
        initialized = false;
        if (client.getGameState() == GameState.LOGGED_IN) {
			this.profileKey = configManager.getRSProfileKey();
            loadCasConfig();
            clientThread.invoke(this::drawWarnings);
        }
    }

    @Override
    protected void shutDown() throws Exception {
        overlayManager.remove(overlay);
        clientThread.invoke(this::removeWarnings);
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event) {
        if (CombatLockedConfig.GROUP.equals(event.getGroup())) {
            updateAvailableLevels();
            updateWarnings();
            if ("showOverlay".equals(event.getKey())) {
                if (config.showOverlay()) {
                    overlayManager.add(overlay);
                }
                else {
                    overlayManager.remove(overlay);
                }
            }
        }
    }

    @Subscribe
    public void onChatMessage(ChatMessage event) {
        if (event.getType() != ChatMessageType.GAMEMESSAGE) {
            return;
        }

        String chatMessage = event.getMessage();

        if (chatMessage.contains("combat task")) {
            final Matcher m = CA_MESSAGE_PATTERN.matcher(chatMessage);
            if (m.find()) {
                this.totalCas++;
                saveCasConfig();
            }
        }

    }

    @Subscribe
    public void onScriptPreFired(ScriptPreFired event) {
        if (event.getScriptId() != SCRIPTID_STATS_SETLEVEL) {
            return;
        }
        this.currentWidget = event.getScriptEvent().getSource();
    }

    @Subscribe
    public void onScriptPostFired(ScriptPostFired event) {
        if (event.getScriptId() == SCRIPTID_STATS_SETLEVEL && currentWidget != null) {
            drawWarning(currentWidget);
        }
    }

    @Subscribe
    public void onWidgetLoaded(WidgetLoaded event) {
        if (event.getGroupId() != 717) {
            return;
        }
        Widget caWidget = client.getWidget(717, 14);
        if (caWidget != null) {
            Widget totalWidget = caWidget.getChild(3);
            if (totalWidget != null) {
                this.totalCas = Integer.parseInt(totalWidget.getText());
                this.initialized = true;
                saveCasConfig();
                updateAvailableLevels();
            }
        }
    }

    @Subscribe
    public void onStatChanged(StatChanged event) {
        updateAvailableLevels();
        Skill skill = event.getSkill();
        int idx = Arrays.asList(SKILLS).indexOf(skill);
        if (warnings[idx] != null) {
            warnings[idx].setHidden(!shouldWarn(skill));
        }
    }

    @Subscribe
    public void onRuneScapeProfileChanged(RuneScapeProfileChanged event) {
        final String profileKey = configManager.getRSProfileKey();

        if (profileKey == null || profileKey.equals(this.profileKey)) {
            return;
        }
        this.profileKey = profileKey;

        loadCasConfig();
    }

    @Provides
    CombatLockedConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(CombatLockedConfig.class);
    }

    int getAvailableLevels() {
        return availableLevels;
    }

    int getTotalCas() {
        return totalCas;
    }

    boolean getInitialized() {
        return initialized;
    }

    private void drawWarnings() {
        Widget skillsContainer = client.getWidget(WidgetInfo.SKILLS_CONTAINER);
        if (skillsContainer == null) {
            return;
        }

        for (Widget skillTile : skillsContainer.getStaticChildren()) {
            drawWarning(skillTile);
        }
    }

    private void drawWarning(Widget skillTile) {
        int idx = WidgetInfo.TO_CHILD(skillTile.getId()) - 1;
        if (idx >= 23 || warnings[idx] != null) {
            return;
        }
        Skill skill = SKILLS[idx];

        Widget box = skillTile.createChild(-1, WidgetType.RECTANGLE);
        box.setWidthMode(WidgetSizeMode.MINUS);
        box.setHeightMode(WidgetSizeMode.MINUS);
        box.setOriginalHeight(4);
        box.setOriginalWidth(4);
        box.setPos(0, 0, WidgetPositionMode.ABSOLUTE_CENTER, WidgetPositionMode.ABSOLUTE_CENTER);
        box.setFilled(true);

        warnings[idx] = box;

        updateWarning(skill);

    }

    private void updateWarnings() {
        clientThread.invoke(() -> {
            for (Skill skill : SKILLS) {
                updateWarning(skill);
            }
        });
    }

    private void updateWarning(Skill skill) {
        int idx = Arrays.asList(SKILLS).indexOf(skill);
        Widget w = warnings[idx];
        w.setOpacity(255 - getWarnColor().getAlpha());
        w.setTextColor(getWarnColor().getRGB());
        w.setHidden(!shouldWarn(skill));
        w.revalidate();
    }

    private void removeWarnings() {
        for (int i = 0; i < warnings.length; i++) {
            removeWarning(warnings[i]);
            warnings[i] = null;
        }
    }

    private void removeWarning(Widget w) {
        if (w == null) {
            return;
        }
        Widget parent = w.getParent();
        Widget[] children = parent.getChildren();
        if (children == null) {
            return;
        }
        for (int i = 0; i < children.length; i++) {
            if (children[i] == w) {
                children[i] = null;
            }
        }
    }

    private void saveCasConfig() {
        if (this.profileKey == null || !this.initialized) {
            return;
        }
        configManager.setConfiguration(CombatLockedConfig.GROUP, this.profileKey, "totalCas", Integer.toString(this.totalCas));
    }

    private void loadCasConfig() {
        if (this.profileKey == null) {
            return;
        }
        String casConfig = configManager.getConfiguration(CombatLockedConfig.GROUP, this.profileKey, "totalCas");
        if (casConfig == null) {
            this.initialized = false;
        } else {
            this.initialized = true;
            this.totalCas = Integer.parseInt(casConfig);
        }
    }

    private void updateAvailableLevels() {
        int totalLevels = Arrays.stream(SKILLS).reduce(0, (a, v) -> a + client.getRealSkillLevel(v), Integer::sum);
        this.availableLevels = this.totalCas * config.levelsPerCa() - totalLevels + SKILLS.length;
//        if (Arrays.asList(SKILLS).contains(Skill.HITPOINTS)) {
//            this.availableLevels += 9;
//        }
    }

    private boolean shouldWarn(Skill skill) {
        if (availableLevels > 0 && !config.warnWhenCloseAndAvailable()) {
            return false;
        }
        if (availableLevels <= 0 && !config.warnWhenCloseNotAvailable()) {
            return false;
        }
        int xp = client.getSkillExperience(skill);
        int level = client.getRealSkillLevel(skill);
        return level < 99 && reverseLerp(Experience.getXpForLevel(level), Experience.getXpForLevel(level + 1), xp) >= getWarnThreshold()/(float)100;
    }

    private int getWarnThreshold() {
        if (availableLevels > 0) {
            return config.warnThresholdAvailable();
        }
        else {
            return config.warnThresholdNotAvailable();
        }
    }

    private Color getWarnColor() {
        if (availableLevels > 0) {
            return config.warnColorAvailable();
        }
        else {
            return config.warnColorNotAvailable();
        }
    }

    private float reverseLerp(int a, int b, int x) {
        return (x - a) / (float) (b - a);
    }
}

