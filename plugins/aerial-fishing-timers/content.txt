package callmemaple.aerialfishingtimers;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AerialFishingTimersPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AerialFishingTimersPlugin.class);
		RuneLite.main(args);
	}
}
package callmemaple.aerialfishingtimers;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.NpcDespawned;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.FishingSpot;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.time.Duration;
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;

import static net.runelite.client.util.RSTimeUnit.GAME_TICKS;

@Slf4j
@PluginDescriptor(
	name = "Aerial Fishing Timers",
	description = "Adds timers to indicate when aerial fishing spots will expire",
	tags = {"fishing","aerial","timer","despawn"}
)
public class AerialFishingTimersPlugin extends Plugin
{
	public static final int SPOT_MAX_SPAWN_TICKS = 19;
	public static final int SPOT_MIN_SPAWN_TICKS = 10;
	public static final Duration SPOT_MAX_SPAWN_DURATION = Duration.of(SPOT_MAX_SPAWN_TICKS, GAME_TICKS);
	public static final float SPOT_RANDOM_PERCENT_THRESHOLD = (float) SPOT_MIN_SPAWN_TICKS / SPOT_MAX_SPAWN_TICKS;

	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private AerialFishingTimersConfig config;

	@Inject
	private AerialFishingTimersOverlay overlay;

	@Getter(AccessLevel.PACKAGE)
	private final Map<NPC, AerialFishingSpot> activeFishingSpots = new HashMap<>();

	@Override
	protected void startUp()
	{
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown()
	{
		activeFishingSpots.clear();
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned event)
	{
		final NPC npc = event.getNpc();

		// Check if the npc spawn is a fishing spot
		if (FishingSpot.findSpot(npc.getId()) == null)
		{
			return;
		}
		// Store the npc and the time spawned
		activeFishingSpots.put(npc, new AerialFishingSpot(npc, Instant.now()));
	}

	@Subscribe
	public void onNpcDespawned(NpcDespawned npcDespawned)
	{
		final NPC spot = npcDespawned.getNpc();
		if (!activeFishingSpots.containsKey(spot))
		{
			return;
		}
		// Remove any despawned fishing spots
		activeFishingSpots.remove(spot);
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		// Remove any stored fishing spots if they should be expired by now
		Instant now = Instant.now();
		activeFishingSpots.values().removeIf(spot -> Duration.between(now, spot.getSpawnTime()).compareTo(SPOT_MAX_SPAWN_DURATION) > 0);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		switch (event.getGameState())
		{
			case HOPPING:
			case LOGGING_IN:
				activeFishingSpots.clear();
				break;
			default:
				break;
		}
	}

	@Provides
	AerialFishingTimersConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(AerialFishingTimersConfig.class);
	}
}

package callmemaple.aerialfishingtimers;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;

import java.awt.Color;

@ConfigGroup("aerialfishingtimers")
public interface AerialFishingTimersConfig extends Config
{
	@ConfigItem(
			keyName = "tickIncrement",
			name = "Increment by Tick",
			description = "This will have the circle increment every game tick instead of continuously",
			position = 1
	)
	default boolean getTickIncrement()
	{
		return false;
	}

	@ConfigItem(
			keyName = "drawExpirationLine",
			name = "Draw Expiration Line",
			description = "This will add a dotted line on each circle to indicate when a fishing spot could despawn",
			position = 2
	)
	default boolean getDrawExpirationLine()
	{
		return false;
	}

	@Range(max=50, min=10)
	@ConfigItem(
		keyName = "circleSize",
		name = "Circle Size",
		description = "How big to make the circular timers",
		position = 3
	)
	default int getCircleSize()
	{
		return 22;
	}

	@Range(max=AerialFishingTimersPlugin.SPOT_MIN_SPAWN_TICKS-1)
	@ConfigItem(
			keyName = "warningThreshold",
			name = "Warning Threshold",
			description = "Adds a warning phase X ticks before the final RNG expiration phase (0 to turn off)",
			position = 4
	)
	default int getWarningThreshold()
	{
		return 0;
	}

	@ConfigSection(
			name = "Colors",
			description = "",
			position = 5
	) String colors = "colors";

	@ConfigItem(
			keyName = "availableColor",
			name = "Available Color",
			description = "Color of the circle when the spot cannot expire",
			position = 6,
			section = colors
	)
	default Color getAvailableColor()
	{
		return Color.GREEN;
	}

	@ConfigItem(
			keyName = "warningColor",
			name = "Warning Color",
			description = "Color of the circle right before the RNG expiration phase",
			position = 7,
			section = colors
	)
	default Color getWarningColor()
	{
		return Color.YELLOW;
	}

	@ConfigItem(
			keyName = "expiringColor",
			name = "Expiring Color",
			description = "Color of the circle when the spot may expire at any moment",
			position = 8,
			section = colors
	)
	default Color getExpiringColor()
	{
		return new Color(255, 150, 30);
	}
}

package callmemaple.aerialfishingtimers;

import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.api.NPC;

import java.time.Instant;

@AllArgsConstructor
@Getter
public class AerialFishingSpot
{
    private NPC npc;
    private Instant spawnTime;
}

package callmemaple.aerialfishingtimers;

import net.runelite.api.Client;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.ItemID;
import net.runelite.api.NPC;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ProgressPieComponent;

import javax.inject.Inject;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Stroke;
import java.awt.geom.Line2D;
import java.time.Instant;
import java.util.Map;

import static callmemaple.aerialfishingtimers.AerialFishingTimersPlugin.*;

public class AerialFishingTimersOverlay extends Overlay
{
    private final Client client;
    private final AerialFishingTimersPlugin plugin;
    private final AerialFishingTimersConfig config;

    @Inject
    private AerialFishingTimersOverlay(Client client, AerialFishingTimersPlugin plugin, AerialFishingTimersConfig config)
    {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        this.plugin = plugin;
        this.client = client;
        this.config = config;
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        // Don't render anything if the player isn't wearing the aerial fishing glove
        if (!isWearingGlove())
        {
            return null;
        }

        Map<NPC, AerialFishingSpot> spots = plugin.getActiveFishingSpots();
        Instant now = Instant.now();
        float warningThreshold = (SPOT_MIN_SPAWN_TICKS - config.getWarningThreshold()) / (float) SPOT_MAX_SPAWN_TICKS;

        for (AerialFishingSpot spot : spots.values())
        {
            LocalPoint location = spot.getNpc().getLocalLocation();
            if (location == null)
            {
                continue;
            }

            // Calculate the percentage of the time into the fishing spot's availability
            Instant spawnTime = spot.getSpawnTime();
            long maxRespawn = SPOT_MAX_SPAWN_DURATION.toMillis();
            long sinceSpawn = now.toEpochMilli() - spawnTime.toEpochMilli();
            float percentProgress = (float) sinceSpawn / maxRespawn;

            // If using tick increment calculate progress by tick instead
            if (config.getTickIncrement())
            {
                float millisPerTick = (SPOT_MAX_SPAWN_DURATION.toMillis() / (float) SPOT_MAX_SPAWN_TICKS);
                percentProgress = (float) ((Math.floor(sinceSpawn / millisPerTick)) / SPOT_MAX_SPAWN_TICKS);
            }

            // Find where to draw the indicator
            Point point = Perspective.localToCanvas(client, location, client.getPlane());
            if (point == null || percentProgress > 1.0f)
            {
                continue;
            }

            if (config.getDrawExpirationLine() && percentProgress < SPOT_RANDOM_PERCENT_THRESHOLD)
            {
                drawExpirationLine(graphics, point);
            }

            // Pick the corresponding fill color based on the progress
            Color pieFillColor = config.getAvailableColor();
            if (percentProgress >= SPOT_RANDOM_PERCENT_THRESHOLD)
            {
                pieFillColor = config.getExpiringColor();
            } else if (percentProgress >= warningThreshold)
            {
                pieFillColor = config.getWarningColor();
            }

            ProgressPieComponent ppc = new ProgressPieComponent();
            ppc.setDiameter(config.getCircleSize());
            ppc.setBorderColor(pieFillColor.darker());
            ppc.setFill(pieFillColor);
            ppc.setPosition(point);
            ppc.setProgress(percentProgress);
            ppc.render(graphics);
        }

        return null;
    }

    private void drawExpirationLine(Graphics2D graphics, Point point)
    {
        // Covert to radians and add a 90 degrees offset so the top of the circle is 0 degrees
        double theta = ((SPOT_RANDOM_PERCENT_THRESHOLD * 360) + 90) * Math.PI / 180;
        double xOffset = (config.getCircleSize()/2f) * Math.cos(theta);
        double yOffset = -1 * (config.getCircleSize()/2f) * Math.sin(theta);

        Stroke dashedStroke = new BasicStroke(1.5f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1.0f, new float[]{2f, 2f}, 1);
        graphics.setStroke(dashedStroke);
        graphics.setColor(config.getExpiringColor());
        graphics.draw(new Line2D.Double(point.getX(), point.getY(), point.getX() + xOffset, point.getY() + yOffset));
    }

    private boolean isWearingGlove()
    {
        ItemContainer equipment = client.getItemContainer(InventoryID.EQUIPMENT);
        if (equipment == null)
        {
            return false;
        }

        int weaponIndex = EquipmentInventorySlot.WEAPON.getSlotIdx();
        Item weapon = equipment.getItem(weaponIndex);
        if (weapon == null)
        {
            return false;
        }

        switch (weapon.getId())
        {
            case ItemID.CORMORANTS_GLOVE:
            case ItemID.CORMORANTS_GLOVE_22817:
                return true;
            default:
                return false;
        }
    }
}
