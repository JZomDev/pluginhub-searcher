package com.imbuedfart;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.events.CommandExecuted;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.events.SoundEffectPlayed;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.audio.AudioPlayer;

import javax.inject.Inject;
import java.io.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadLocalRandom;

@Slf4j
@PluginDescriptor(
        name = "Imbued Fart",
        description = "Plays a fart noise instead of the imbued heart sound @Hooti_osrs"
)
public class ImbuedFartPlugin extends Plugin {
    @Inject
    private Client client;

    @Inject
    private ImbuedFartConfig config;

    @Inject
    private AudioPlayer audioPlayer;

    private static final int FART_FILE_COUNT = 22;

    public static ExecutorService executorService;

    @Provides
    ImbuedFartConfig provideConfig(final ConfigManager configManager)
    {
        return configManager.getConfig(ImbuedFartConfig.class);
    }

    @Override
    protected void startUp() throws Exception
    {
        executorService = Executors.newSingleThreadExecutor();
    }

    @Override
    protected void shutDown() throws Exception
    {
        executorService.shutdown();
    }

    @Subscribe
    public void onMenuOptionClicked(MenuOptionClicked event)
    {
        if (!config.menuEntryTrigger())
        {
            return;
        }

        if (event.getMenuOption().toLowerCase().contains("invigorate")
                && event.getMenuTarget().toLowerCase().contains("heart")
                && event.getMenuAction().equals(MenuAction.CC_OP))
        {
            playRandomFart();
        }
    }

    @Subscribe
    public void onMenuEntryAdded(MenuEntryAdded event)
    {
        if (!config.fartMenuEntry())
        {
            return;
        }

        if (event.getMenuEntry().getOption().toLowerCase().contains("invigorate")
                && event.getMenuEntry().getTarget().toLowerCase().contains("heart")
                && event.getMenuEntry().getType().equals(MenuAction.CC_OP))
        {
            client.getMenu().createMenuEntry(-1)
                    .setOption("Fart")
                    .setTarget(event.getTarget())
                    .setIdentifier(event.getIdentifier())
                    .setParam0(event.getActionParam0())
                    .setParam1(event.getActionParam1())
                    .setType(MenuAction.RUNELITE)
                    .onClick(this::playRandomFart);
        }
    }

    @Subscribe
    public void onCommandExecuted(CommandExecuted event)
    {
        if (event.getCommand().equals("fart"))
        {
            playRandomFart();
        }

        if (event.getCommand().equals("allfarts"))
        {
            executorService.submit(this::playSequentialFarts);
        }
    }

    @Subscribe
    public void onSoundEffectPlayed(SoundEffectPlayed event)
    {
        if (event.getSoundId() == 3887 || event.getSoundId() == 6847)
        {
            event.consume();

            if (!config.menuEntryTrigger())
            {
                playRandomFart();
            }
        }
    }

    public void playRandomFart(MenuEntry menuEntry)
    {
        playRandomFart();
    }

    public void playRandomFart()
    {
        int random = ThreadLocalRandom.current().nextInt(1, FART_FILE_COUNT);
        executorService.submit(() -> playFart(random));
    }

    public void playSequentialFarts()
    {
        for (int i = 1; i <= FART_FILE_COUNT; i++)
        {
            playFart(i);

            try
            {
                Thread.sleep(2000);
            } catch (InterruptedException e)
            {
                throw new RuntimeException(e);
            }
        }
    }

    public void playFart(int index)
    {
        String filename = String.format("/%s.wav", index);

        try
        {
            audioPlayer.play(this.getClass(), filename, config.gain());
        } catch (Exception e)
        {
            log.error(e.getMessage(), e);
        }
    }
}
package com.imbuedfart;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;

@ConfigGroup("imbuedfart")
public interface ImbuedFartConfig extends Config {

    @Range(
            min = 1,
            max = 6
    )
    @ConfigItem(
            keyName = "gain",
            name = "Gain (dB)",
            description = "Gain in dB",
            position = 8
    )
    default int gain()
    {
        return 6;
    }

    @ConfigItem(
            keyName = "fartMenuEntry",
            name = "Show Fart Menu Entry",
            description = "Adds a fart option to your imbued / saturated heart",
            position = 10
    )
    default boolean fartMenuEntry() { return false; }

    @ConfigItem(
            keyName = "menuEntryTrigger",
            name = "Trigger on Click",
            description = "Triggers on click, instead of sound effect, prevents rev spamming, prevents others",
            position = 10
    )
    default boolean menuEntryTrigger() { return false; }
}

package com.imbuedfart;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ImbuedFartPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ImbuedFartPlugin.class);
		RuneLite.main(args);
	}
}
