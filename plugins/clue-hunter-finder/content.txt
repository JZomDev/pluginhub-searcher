package com.cluehunterfinder;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ClueHunterFinderTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ClueHunterFinderPlugin.class);
		RuneLite.main(args);
	}
}

package com.cluehunterfinder;

import java.util.HashMap;
import java.util.Map;
import lombok.Getter;
import net.runelite.api.ItemID;
import net.runelite.api.coords.WorldPoint;

public enum ClueHunterItem
{
	CLUE_HUNTER_BOOTS(new WorldPoint(2580, 3377, 0), ItemID.CLUE_HUNTER_BOOTS, "chboots", "Dig next to an oak tree south-west of the Fishing Guild, just north of East Ardougne."),
	CLUE_HUNTER_GLOVES(new WorldPoint(2580, 3377, 0), ItemID.CLUE_HUNTER_GLOVES, "chgloves", "Dig next to an oak tree south-west of the Fishing Guild, just north of East Ardougne."),
	CLUE_HUNTER_GARB(new WorldPoint(1595, 3626, 0), ItemID.CLUE_HUNTER_GARB, "chgarb", "Dig just north-east of the Shayzien minecart station."),
	CLUE_HUNTER_TROUSERS(new WorldPoint(2819, 3126, 0), ItemID.CLUE_HUNTER_TROUSERS, "chtrousers", "Dig near the entrance to the Pothole Dungeon north of Tai Bwo Wannai."),
	CLUE_HUNTER_CLOAK(new WorldPoint(2614, 3064, 0), ItemID.CLUE_HUNTER_CLOAK, "chcloak", "Dig between two willow trees south-east of Yanille."),
	HELM_OF_RAEDWALD(new WorldPoint(2590, 3231, 0), ItemID.HELM_OF_RAEDWALD, "helmor", "Dig near the iron rocks by the cave entrance east of the Clock Tower. Requires 1 nature rune, 1 superantipoison(1) and leather boots.");

	@Getter
	private final WorldPoint location;

	@Getter
	private final int id;

	@Getter
	private final String findInstruction;

	private final String keyword;

	// TODO: Extract this map in its own class to avoid ugly static
	private static final Map<String, ClueHunterItem> itemMap = generateClueHunterItemMap();
	
	ClueHunterItem(final WorldPoint location, final int id, final String keyword, final String findInstruction)
	{
		this.location = location;
		this.id = id;
		this.keyword = keyword;
		this.findInstruction = findInstruction;
	}

	static Map<String, ClueHunterItem> getClueHunterItemMap()
	{
		return itemMap;
	}

	private static Map<String, ClueHunterItem> generateClueHunterItemMap()
	{
		final Map<String, ClueHunterItem> map = new HashMap<>();
		for (final ClueHunterItem item : ClueHunterItem.values())
		{
			map.put(item.keyword, item);
		}
		return map;
	}
}

package com.cluehunterfinder;

import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.ItemContainer;

public class CommandHandler
{

	private final Client client;

	@Inject
	CommandHandler(final Client client)
	{
		this.client = client;
	}

	ClueHunterItem getItemForCommand(final String itemDescriptor)
	{
		final ClueHunterItem item = ClueHunterItem.getClueHunterItemMap().get(itemDescriptor);
		if (item == null || hasClueHunterItems(item.getId()))
		{
			return null;
		}
		return item;
	}

	private boolean hasClueHunterItems(final int id)
	{
		final ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
		final ItemContainer bank = client.getItemContainer(InventoryID.BANK);
		final ItemContainer equipment = client.getItemContainer(InventoryID.EQUIPMENT);

		return inventory != null && inventory.contains(id) ||
			// TODO: Does not work, think about necessity of this boolean
			bank != null && bank.contains(id) ||
			equipment != null && equipment.contains(id);
	}

}

package com.cluehunterfinder;

import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.coords.WorldPoint;

@Slf4j
public class ClueHunterFinderHintArrow
{

	private final static int MIN_DRAW_DISTANCE = 64;
	private final Client client;

	@Inject
	ClueHunterFinderHintArrow(final Client client)
	{
		this.client = client;
	}

	void setArrow(final WorldPoint target)
	{
		clear();
		if (client.getLocalPlayer() == null)
		{
			return;
		}
		final WorldPoint nextWorldPoint = computeNextWorldPoint(target, client.getLocalPlayer().getWorldLocation());
		client.setHintArrow(nextWorldPoint);
	}

	void clear()
	{
		client.clearHintArrow();
	}

	private WorldPoint computeNextWorldPoint(final WorldPoint target, final WorldPoint current)
	{
		final int distance = current.distanceTo(target);
		final double distanceRatio = MIN_DRAW_DISTANCE / (double) distance;
		if (distanceRatio >= 1)
		{
			return target;
		}

		final int nextWorldPointX = (int) Math.floor((target.getX() - current.getX()) * distanceRatio) + current.getX();
		final int nextWorldPointY = (int) Math.floor((target.getY() - current.getY()) * distanceRatio) + current.getY();
		return new WorldPoint(nextWorldPointX, nextWorldPointY, 0);
	}
}



package com.cluehunterfinder;

import com.google.inject.Provides;
import java.util.Arrays;
import java.util.List;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Item;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.CommandExecuted;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.worldmap.WorldMapPointManager;

@Slf4j
@PluginDescriptor(
	name = "Clue Hunter Finder"
)
public class ClueHunterFinderPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClueHunterFinderConfig config;

	@Inject
	private ItemManager itemManager;

	@Inject
	private WorldMapPointManager worldMapPointManager;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ClueHunterFinderOverlay overlay;

	@Inject
	private CommandHandler handler;

	@Inject
	private ClueHunterFinderHintArrow hintArrow;

	@Getter
	private ClueHunterItem itemToFind;

	@Override
	protected void startUp()
	{
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown()
	{
		itemToFind = null;
		hintArrow.clear();
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onItemContainerChanged(final ItemContainerChanged event)
	{
		final List<Item> items = Arrays.asList(event.getItemContainer().getItems());
		final WorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();

		for (final ClueHunterItem item : ClueHunterItem.values())
		{
			if (playerLocation.equals(item.getLocation()) || items.contains(item.getId()))
			{
				itemToFind = null;
				hintArrow.clear();
				return;
			}
		}
	}

	@Subscribe
	void onCommandExecuted(final CommandExecuted command)
	{
		if (command.getCommand().contentEquals("find"))
		{
			final String[] arguments = command.getArguments();
			itemToFind = handler.getItemForCommand(arguments[0]);
			if (itemToFind == null)
			{
				hintArrow.clear();
			}
		}
	}

	// TODO: Find a less frequent trigger for this that still leads to an accurate arrow depiction
	@Subscribe
	public void onGameTick(final GameTick tick)
	{
		if (itemToFind != null)
		{
			hintArrow.setArrow(itemToFind.getLocation());
		}
	}

	@Provides
	ClueHunterFinderConfig provideConfig(final ConfigManager configManager)
	{
		return configManager.getConfig(ClueHunterFinderConfig.class);
	}
}

package com.cluehunterfinder;

import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

@Slf4j
public class ClueHunterFinderOverlay extends OverlayPanel
{
	private final ClueHunterFinderPlugin plugin;
	private final ItemManager itemManager;

	@Inject
	private ClueHunterFinderOverlay(final ClueHunterFinderPlugin plugin, final ItemManager itemManager)
	{
		this.plugin = plugin;
		this.itemManager = itemManager;
	}

	@Override
	public Dimension render(final Graphics2D graphics)
	{
		final ClueHunterItem item = plugin.getItemToFind();
		if (item == null)
		{
			return null;
		}
		final String titleText = itemManager.getItemComposition(item.getId()).getName();
		panelComponent.getChildren().add(TitleComponent.builder().text(titleText).build());
		panelComponent.getChildren().add(LineComponent.builder().build());
		panelComponent.getChildren().add(LineComponent.builder()
			.left(item.getFindInstruction())
			.build());
		return super.render(graphics);
	}
}

package com.cluehunterfinder;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;

@ConfigGroup("cluehunterfinder")
public interface ClueHunterFinderConfig extends Config
{
}

