package com.cwjoshuak;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class RazorKebbitPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(RazorKebbitPlugin.class);
		RuneLite.main(args);
	}
}

package com.cwjoshuak;

import java.awt.Color;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("razorkebbittracking")
public interface RazorKebbitConfig extends Config {
	@ConfigItem(
		position = 0,
		keyName = "showStart",
		name = "Show Start Objects",
		description = "Show highlights for starting burrows"
	)
	default boolean isStartShown() {
		return true;
	}

	@ConfigItem(
		position = 1,
		keyName = "showClickboxes",
		name = "Show Clickboxes",
		description = "Show clickboxes on trail objects and tunnels instead of tiles"
	)
	default boolean showClickBoxes() {
		return false;
	}

	@Alpha
	@ConfigItem(
		position = 2,
		keyName = "colorStart",
		name = "Start Color",
		description = "Color for burrows that start the trails"
	)
	default Color getStartColor() {
		return Color.CYAN;
	}

	@ConfigItem(
		position = 3,
		keyName = "showBushes",
		name = "Show End Bushes",
		description = "Show highlights for bushes with razor-backed kebbits"
	)
	default boolean isBushesShown() {
		return true;
	}

	@Alpha
	@ConfigItem(
		position = 4,
		keyName = "colorBushes",
		name = "Bush Color",
		description = "Color for tunnels with razor-backed kebbits"
	)
	default Color getBushesColor() {
		return Color.GREEN;
	}

	@ConfigItem(
		position = 5,
		keyName = "showObject",
		name = "Show Trail Objects",
		description = "Show highlights for plants"
	)
	default boolean isObjectShown() {
		return true;
	}

	@Alpha
	@ConfigItem(
		position = 6,
		keyName = "colorGameObject",
		name = "Trail Object Color",
		description = "Color for plants"
	)
	default Color getObjectColor() {
		return Color.CYAN;
	}

	@ConfigItem(
		position = 7,
		keyName = "dynamicMenuEntrySwap",
		name = "Dynamically swap trail menu entries",
		description = "Swap menu entries to only make the correct trail clickable."
	)
	default boolean dynamicMenuEntrySwap() {
		return true;
	}
}

package com.cwjoshuak;

import com.google.common.collect.ImmutableSet;
import net.runelite.api.ObjectID;
import net.runelite.api.coords.WorldPoint;

import java.util.Arrays;
import java.util.Set;

public enum RBKebbitSearchSpot {
	VB_2974(ObjectID.PLANT_19356, new WorldPoint(2362, 3598, 0), 2974),
	VB_2975(ObjectID.PLANT_19357, new WorldPoint(2355, 3598, 0), 2975),
	VB_2976(ObjectID.PLANT_19358, new WorldPoint(2347, 3603, 0), 2976),
	VB_2977(ObjectID.PLANT_19359, new WorldPoint(2358, 3599, 0), 2977),
	VB_2978(ObjectID.PLANT_19360, new WorldPoint(2352, 3603, 0), 2978),
	VB_2979(ObjectID.PLANT_19361, new WorldPoint(2358, 3603, 0), 2979),
	VB_2980(ObjectID.PLANT_19362, new WorldPoint(2363, 3602, 0), 2980),

	VB_2981(ObjectID.PLANT_19363, new WorldPoint(2358, 3607, 0), 2981),
	VB_2982(ObjectID.PLANT_19364, new WorldPoint(2355, 3608, 0), 2982),
	VB_2983(ObjectID.PLANT_19365, new WorldPoint(2351, 3608, 0), 2983),
	VB_2985(ObjectID.PLANT_19372, new WorldPoint(2363, 3617, 0), 2985),
	VB_2986(ObjectID.PLANT_19375, new WorldPoint(2349, 3620, 0), 2986),
	VB_2987(ObjectID.PLANT_19374, new WorldPoint(2356, 3620, 0), 2987),
	VB_2988(ObjectID.PLANT_19375, new WorldPoint(2344, 3612, 0), 2988),
	VB_2989(ObjectID.PLANT_19376, new WorldPoint(2352, 3612, 0), 2989),
	VB_2990(ObjectID.PLANT_19377, new WorldPoint(2349, 3617, 0), 2990),
	VB_2991(ObjectID.PLANT_19378, new WorldPoint(2352, 3618, 0), 2991),
	VB_2992(ObjectID.PLANT_19379, new WorldPoint(2362, 3614, 0), 2992),
	VB_2993(ObjectID.PLANT_19379, new WorldPoint(2360, 3618, 0), 2993);


	int objectId;
	WorldPoint wp;
	int varbit;

	private static final Set<WorldPoint> SPOTS;

	RBKebbitSearchSpot(int objectId, WorldPoint worldPoint, int varbit) {
		this.objectId = objectId;
		this.wp = worldPoint;
		this.varbit = varbit;
	}

	static {
		ImmutableSet.Builder<WorldPoint> spotBuilder = new ImmutableSet.Builder<>();
		for (RBKebbitSearchSpot spot : values()) {
			spotBuilder.add(spot.wp);
		}
		SPOTS = spotBuilder.build();
	}

	static boolean isSearchSpot(WorldPoint location) {
		return SPOTS.contains(location);
	}

	static WorldPoint worldPoint(int varbit) {
		return Arrays.stream(values()).filter(s -> s.varbit == varbit).findFirst().get().wp;
	}
}

package com.cwjoshuak;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Shape;

import net.runelite.api.TileObject;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.*;
import net.runelite.client.util.ColorUtil;

class RazorKebbitOverlay extends Overlay {
	private final RazorKebbitPlugin plugin;
	private final RazorKebbitConfig config;


	@Inject
	public RazorKebbitOverlay(RazorKebbitPlugin plugin, RazorKebbitConfig config) {
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_SCENE);
		this.plugin = plugin;
		this.config = config;
	}

	@Override
	public Dimension render(Graphics2D graphics) {
		if (!plugin.isInRazorKebbitArea()) {
			return null;
		}
		int finishId = plugin.getFinishId();

		// Draw start objects
		if (config.isStartShown() && (finishId == 0) && plugin.getCurrentPath().isEmpty()) {
			plugin.getBurrows().values().forEach((obj) -> OverlayUtil.renderTileOverlay(graphics, obj, "", config.getStartColor()));
		}

		// Draw trail objects
		if (config.isObjectShown() && !(finishId > 0) && !plugin.getCurrentPath().isEmpty()) {
			WorldPoint correct = Iterables.getLast(plugin.getCurrentPath());
			TileObject object = plugin.getTrailObjects().get(correct);
			drawObjectLocation(graphics, object, config.getObjectColor());
		}

		// Draw finish tunnels
		if (config.isBushesShown() && finishId > 0) {
			WorldPoint finishLoc = plugin.getEndLocations().get(finishId - 1);
			TileObject object = plugin.getBushes().get(finishLoc);
			drawObjectLocation(graphics, object, config.getBushesColor());
		}

		return null;
	}

	private void drawObjectLocation(Graphics2D graphics, TileObject object, Color color) {
		if (object == null) {
			return;
		}

		if (config.showClickBoxes()) {
			Shape clickbox = object.getClickbox();
			if (clickbox != null) {
				Color clickBoxColor = ColorUtil.colorWithAlpha(color, color.getAlpha() / 12);

				graphics.setColor(color);
				graphics.draw(clickbox);
				graphics.setColor(clickBoxColor);
				graphics.fill(clickbox);
			}
		} else {
			OverlayUtil.renderTileOverlay(graphics, object, "", color);
		}
	}
}

package com.cwjoshuak;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.inject.Provides;

import javax.inject.Inject;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.callback.ClientThread;

import org.apache.commons.lang3.ArrayUtils;

import java.util.*;
import java.util.stream.Collectors;

@Slf4j
@PluginDescriptor(
	name = "Razor Kebbit Tracking",
	description = "Track razor-backed kebbits like you would Herbiboar.",
	tags = {"razor", "kebbit", "backed", "razorback", "razorbacked", "razor-backed", "kebbits", "hunter", "rumour"}
)
@Getter
public class RazorKebbitPlugin extends Plugin {
	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private RazorKebbitConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private RazorKebbitOverlay overlay;


	private static final List<WorldPoint> END_LOCATIONS = ImmutableList.of(
		new WorldPoint(2358, 3620, 0),
		new WorldPoint(2351, 3619, 0),
		new WorldPoint(2362, 3615, 0),
		new WorldPoint(2354, 3609, 0),
		new WorldPoint(2357, 3607, 0),
		new WorldPoint(2349, 3604, 0),
		new WorldPoint(2360, 3602, 0),
		new WorldPoint(2355, 3601, 0)
	);

	private static final Set<Integer> START_OBJECT_IDS = ImmutableSet.of(
		ObjectID.BURROW,
		ObjectID.BURROW_19439,
		ObjectID.BURROW_19440
	);

	private static final Integer RAZOR_KEBBIT_REGION = 9272;
	private static final Integer VARBIT_FINISH = 2994;
	List<Integer> varbitIds = Arrays.stream(RBKebbitSearchSpot.values()).map(s -> s.varbit).collect(Collectors.toList());
	@Getter
	private final List<WorldPoint> currentPath = Lists.newArrayList();

	@Getter
	private final Map<WorldPoint, TileObject> trailObjects = new HashMap<>();

	@Getter
	private final Map<WorldPoint, TileObject> burrows = new HashMap<>();

	@Getter
	private final Map<WorldPoint, TileObject> bushes = new HashMap<>();

	private boolean inRazorKebbitArea;
	private int finishId;
	public static final String[] TRAIL_MENU_ENTRY_TARGETS = new String[]{
		"Plant", "Bush", "Burrow"
	};

	@Override
	protected void startUp() throws Exception {
		overlayManager.add(overlay);

		if (client.getGameState() == GameState.LOGGED_IN) {
			clientThread.invokeLater(() ->
			{
				inRazorKebbitArea = checkArea();
				updateTrailData(null);
			});
		}
	}

	@Override
	protected void shutDown() throws Exception {
		overlayManager.remove(overlay);
		resetTrailData();
		clearCache();
		inRazorKebbitArea = false;
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event) {
		switch (event.getGameState()) {
			case HOPPING:
			case LOGGING_IN:
				resetTrailData();
				break;
			case LOADING:
				clearCache();
				inRazorKebbitArea = checkArea();
				break;
			default:
				break;
		}
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event) {

		updateTrailData(event);
	}

	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned event) {

		onTileObject(null, event.getGameObject());
	}

	@Subscribe
	public void onGameObjectDespawned(GameObjectDespawned event) {
		onTileObject(event.getGameObject(), null);
	}

	@Subscribe
	public void onGroundObjectSpawned(GroundObjectSpawned event) {

		onTileObject(null, event.getGroundObject());
	}

	@Subscribe
	public void onGroundObjectDespawned(GroundObjectDespawned event) {

		onTileObject(event.getGroundObject(), null);
	}

	private boolean checkArea() {
		final int[] mapRegions = client.getMapRegions();
		return ArrayUtils.contains(mapRegions, RAZOR_KEBBIT_REGION);
	}

	// Store relevant GameObjects
	private void onTileObject(TileObject oldObject, TileObject newObject) {

		if (oldObject != null) {
			WorldPoint oldLocation = oldObject.getWorldLocation();
			burrows.remove(oldLocation);
			trailObjects.remove(oldLocation);
			bushes.remove(oldLocation);
		}

		if (newObject == null) {
			return;
		}
		if (START_OBJECT_IDS.contains(newObject.getId())) {
			burrows.put(newObject.getWorldLocation(), newObject);
			return;
		}
		if (RBKebbitSearchSpot.isSearchSpot(newObject.getWorldLocation())) {
			trailObjects.put(newObject.getWorldLocation(), newObject);
			return;
		}
		if (END_LOCATIONS.contains(newObject.getWorldLocation())) {
			bushes.put(newObject.getWorldLocation(), newObject);
			return;
		}
	}


	private void updateTrailData(VarbitChanged event) {
		if (!inRazorKebbitArea || event == null) {
			return;
		}
		finishId = client.getVarbitValue(VARBIT_FINISH);
		if (varbitIds.contains(event.getVarbitId())) {
			WorldPoint wp = RBKebbitSearchSpot.worldPoint(event.getVarbitId());
			if (event.getValue() == 1 || event.getValue() == 2 || event.getValue() == 3) {
				if (currentPath.contains(wp)) {
					currentPath.remove(wp);
				} else {
					currentPath.add(wp);
				}
			} else {
				currentPath.remove(wp);
			}
		} else if (event.getVarbitId() == VARBIT_FINISH && event.getValue() == 0) {
			resetTrailData();
		}
	}

	@Subscribe
	public void onMenuEntryAdded(MenuEntryAdded event) {
		if (!isInRazorKebbitArea()) {
			return;
		}

		if (config.dynamicMenuEntrySwap()) {
			swapTrailMenuEntries(event);
		}
	}


	private void swapTrailMenuEntries(MenuEntryAdded event) {
		String target = event.getTarget();
		for (String menuTarget : TRAIL_MENU_ENTRY_TARGETS) {
			if (target.contains(menuTarget)) {
				MenuEntry entry = event.getMenuEntry();
				WorldPoint entryTargetPoint = WorldPoint.fromScene(client, entry.getParam0(), entry.getParam1(), client.getPlane());

				if (finishId == 0) {
					if (currentPath.isEmpty() && burrows.get(entryTargetPoint) == null) {
						entry.setDeprioritized(true);
					} else if (!currentPath.isEmpty() && !entryTargetPoint.equals(currentPath.get(currentPath.size() - 1))) {
						entry.setDeprioritized(true);
					}
				} else {
					if (!END_LOCATIONS.contains(entryTargetPoint)) {
						entry.setDeprioritized(true);
					} else {
						if (!entry.getOption().equals("Attack")) {
							entry.setDeprioritized(true);
						}
					}
				}

				return;
			}
		}
	}


	@Provides
	RazorKebbitConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(RazorKebbitConfig.class);
	}

	private void resetTrailData() {
		finishId = 0;
		currentPath.clear();
	}

	private void clearCache() {
		burrows.clear();
		trailObjects.clear();
		bushes.clear();
	}

	List<WorldPoint> getEndLocations() {
		return END_LOCATIONS;
	}
}

