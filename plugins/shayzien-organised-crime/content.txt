package com.dylange.organisedcrime;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class OrganisedCrimePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(OrganisedCrimePlugin.class);
		RuneLite.main(args);
	}
}
package com.dylange.organisedcrime.tools;

import com.dylange.organisedcrime.models.GangInfo;
import net.runelite.api.Client;
import net.runelite.api.widgets.Widget;

import javax.annotation.Nullable;

import static com.dylange.organisedcrime.tools.WidgetConstants.GROUP_ID_INFORMATION_BOARD;

public class InformationBoardTextReader {
    private static final int INDEX_START_INFO_BOARD_TEXT = 5;
    private static final int INDEX_END_INFO_BOARD_TEXT = 16;
    private static final String START_TIME_TEXT = "The meeting is expected to";

    @Nullable
    public static GangInfo getDisplayedGangInfo(Client client) {
        final StringBuilder locationStringBuilder = new StringBuilder();
        final StringBuilder timeStringBuilder = new StringBuilder();

        boolean parsedLocation = false;
        for (int i = INDEX_START_INFO_BOARD_TEXT; i < INDEX_END_INFO_BOARD_TEXT; i++) {
            Widget textItem = client.getWidget(GROUP_ID_INFORMATION_BOARD, i);
            if (textItem != null) {
                String text = textItem.getText();
                if (text != null) {
                    if (text.startsWith(START_TIME_TEXT)) parsedLocation = true;
                    if (parsedLocation) {
                        timeStringBuilder.append(text);
                        timeStringBuilder.append(" ");
                    } else {
                        locationStringBuilder.append(text);
                        locationStringBuilder.append(" ");
                    }
                }
            }
        }

        final String locationText = locationStringBuilder.toString().trim();
        final String timeText = timeStringBuilder.toString().trim();
        if (locationText.isEmpty() || timeText.isEmpty()) {
            return null;
        } else {
            return new GangInfo(
                    locationText,
                    timeText,
                    client.getWorld()
            );
        }
    }
}

package com.dylange.organisedcrime.tools;

public class WidgetConstants {
    public static final int GROUP_ID_INFORMATION_BOARD = 291;
    public static final int GROUP_ID_NO_INFORMATION_ATM = 229;
}

package com.dylange.organisedcrime.tools;

import com.dylange.organisedcrime.config.OrganisedCrimeConfig;
import com.dylange.organisedcrime.models.GangExpectedTime;
import com.dylange.organisedcrime.models.GangInfo;
import com.dylange.organisedcrime.models.OrganisedCrimeLocation;
import com.dylange.organisedcrime.ui.LocationViewState;

import java.util.*;

public class ViewStateMapper {
    public static List<LocationViewState> gangInfoMapToLocationListItems(Map<Integer, GangInfo> gangInfoMap, OrganisedCrimeConfig config) {

        // A mapping of unique locations to a list of collected gang info
        HashMap<OrganisedCrimeLocation, List<GangInfo>> locationToInfoMap = new HashMap<>();

        // Go through the provided input of gang info per world checked, and add it to the above mapping if it is allowed
        // per the provided configuration. i.e. If Arceuus is not ticked, Arceuus locations will not be added.
        gangInfoMap.forEach((world, gangInfo) -> {
            if (!gangInfo.getLocation().isMultiCombat() && config.multiCombatOnly()) return;
            if (gangInfo.getLocation().getArea() == OrganisedCrimeLocation.Area.Arceuus && !config.trackArceuus()) return;
            if (gangInfo.getLocation().getArea() == OrganisedCrimeLocation.Area.Hosidius && !config.trackHosidius()) return;
            if (gangInfo.getLocation().getArea() == OrganisedCrimeLocation.Area.Lovakengj && !config.trackLovakengj()) return;
            if (gangInfo.getLocation().getArea() == OrganisedCrimeLocation.Area.Piscarilius && !config.trackPiscarilius()) return;
            if (gangInfo.getLocation().getArea() == OrganisedCrimeLocation.Area.Shayzien && !config.trackShayzien()) return;
            if (gangInfo.getLocation().getArea() == OrganisedCrimeLocation.Area.Other && !config.trackOther()) return;

            List<GangInfo> existingInfo = locationToInfoMap.get(gangInfo.getLocation());
            if (existingInfo == null) {
                locationToInfoMap.put(gangInfo.getLocation(), Collections.singletonList(gangInfo));
            } else {
                List<GangInfo> updatedList = new ArrayList<>(existingInfo);
                updatedList.add(gangInfo);
                locationToInfoMap.put(gangInfo.getLocation(), updatedList);
            }
        });

        ArrayList<LocationViewState> viewStates = new ArrayList<>();
        locationToInfoMap.forEach((organisedCrimeLocation, gangInfoForLocation) -> {
            SortedMap<GangExpectedTime, Integer> worldToExpectedTime = new TreeMap<>();
            gangInfoForLocation.forEach(gangInfo -> worldToExpectedTime.put(gangInfo.getExpectedTime(), gangInfo.getWorld()));

            viewStates.add(
                    new LocationViewState(
                            organisedCrimeLocation.getDescription(),
                            organisedCrimeLocation.getImage(),
                            worldToExpectedTime
                    )
            );
        });

        return viewStates;
    }
}


package com.dylange.organisedcrime;

import com.dylange.organisedcrime.config.OrganisedCrimeConfig;
import com.dylange.organisedcrime.models.GangInfo;
import com.dylange.organisedcrime.tools.InformationBoardTextReader;
import com.dylange.organisedcrime.tools.ViewStateMapper;
import com.dylange.organisedcrime.ui.LocationViewState;
import com.dylange.organisedcrime.ui.OrganisedCrimePanel;
import com.google.inject.Provides;

import javax.inject.Inject;
import javax.swing.*;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.World;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.WorldService;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.WorldUtil;
import net.runelite.http.api.worlds.WorldResult;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.awt.image.BufferedImage;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;

import static com.dylange.organisedcrime.tools.WidgetConstants.GROUP_ID_INFORMATION_BOARD;
import static com.dylange.organisedcrime.tools.WidgetConstants.GROUP_ID_NO_INFORMATION_ATM;

@Slf4j
@PluginDescriptor(
        name = "Organised crime",
        description = "Keeps track of organised crime locations across worlds",
        enabledByDefault = false
)
public class OrganisedCrimePlugin extends Plugin {
    private static final int PANEL_REFRESH_TICK_THRESHOLD = 50; // 50 ticks, 30 seconds.
    private static final int STALE_DATA_REFRESH_TICK_THRESHOLD = 50; // 50 ticks, 30 seconds.

    private NavigationButton navButton;
    private OrganisedCrimePanel panel;
    private int ticksSinceLastUiUpdate = 0;
    private int ticksSinceLastStaleDataCull = 0;

    private World quickHopTargetWorld;
    private int displaySwitcherAttempts = 0;

    private static final int DISPLAY_SWITCHER_MAX_ATTEMPTS = 3;
    private static final Logger logger = LoggerFactory.getLogger(OrganisedCrimePlugin.class);

    @Inject
    private Client client;

    @Inject
    private ClientToolbar clientToolbar;

    @Inject
    private WorldService worldService;

    @Inject
    private ChatMessageManager chatMessageManager;

    @Inject
    private OrganisedCrimeConfig config;

    public Map<Integer, GangInfo> gangInfoMap = new HashMap<>();

    @Provides
    OrganisedCrimeConfig provideOrganisedCrimeConfig(ConfigManager configManager) {
        return configManager.getConfig(OrganisedCrimeConfig.class);
    }

    @Override
    protected void startUp() throws Exception {
        panel = new OrganisedCrimePanel(config, this::worldClicked);

        final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "icon.png");

        navButton = NavigationButton.builder()
                .tooltip("Organised Crime")
                .icon(icon)
                .priority(5)
                .panel(panel)
                .build();
        clientToolbar.addNavigation(navButton);

        updatePanelData(gangInfoMap);
    }

    @Override
    protected void shutDown() throws Exception {
        gangInfoMap.clear();
        clientToolbar.removeNavigation(navButton);
    }

    public void worldClicked(int world) {
        hop(world);
    }

    @Subscribe
    public void onGameTick(GameTick gameTick) {
        if (++ticksSinceLastUiUpdate >= PANEL_REFRESH_TICK_THRESHOLD) {
            refreshPanel();
        }
        if (++ticksSinceLastStaleDataCull >= STALE_DATA_REFRESH_TICK_THRESHOLD) {
            // Only do this operation if there are still gang info items remaining.
            if (!gangInfoMap.isEmpty()) {
                clearStaleGangInfo();
            }
        }

        if (quickHopTargetWorld == null) {
            return;
        }

        if (client.getWidget(WidgetInfo.WORLD_SWITCHER_LIST) == null) {
            client.openWorldHopper();

            if (++displaySwitcherAttempts >= DISPLAY_SWITCHER_MAX_ATTEMPTS) {
                String chatMessage = new ChatMessageBuilder()
                        .append(ChatColorType.NORMAL)
                        .append("Failed to quick-hop after ")
                        .append(ChatColorType.HIGHLIGHT)
                        .append(Integer.toString(displaySwitcherAttempts))
                        .append(ChatColorType.NORMAL)
                        .append(" attempts.")
                        .build();

                chatMessageManager
                        .queue(QueuedMessage.builder()
                                .type(ChatMessageType.CONSOLE)
                                .runeLiteFormattedMessage(chatMessage)
                                .build());

                displaySwitcherAttempts = 0;
                quickHopTargetWorld = null;
            }
        } else {
            client.hopToWorld(quickHopTargetWorld);
            displaySwitcherAttempts = 0;
            quickHopTargetWorld = null;
        }
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged configChanged) {
        if (configChanged.getGroup().equals("organised-crime")) {
            updatePanelData(gangInfoMap);
        }
    }

    @Subscribe
    public void onWidgetLoaded(WidgetLoaded widgetLoaded) {
//        logger.debug("Widget loaded: " + widgetLoaded.getGroupId()); // Keeping this commented for future me needing to debug this again.
        if (widgetLoaded.getGroupId() == GROUP_ID_NO_INFORMATION_ATM) {
            gangInfoMap.keySet().forEach(world -> logger.debug("Worlds before: " + world));
            logger.debug("Removing world " + client.getWorld() + " from list.");
            gangInfoMap.remove(client.getWorld());
            gangInfoMap.keySet().forEach(world -> logger.debug("Worlds after: " + world));
            updatePanelData(gangInfoMap);
            return;
        }
        if (widgetLoaded.getGroupId() != GROUP_ID_INFORMATION_BOARD) return;

        try {
            final GangInfo gangInfo = InformationBoardTextReader.getDisplayedGangInfo(client);
            if (gangInfo != null) {
                gangInfoMap.put(gangInfo.getWorld(), gangInfo);
                updatePanelData(gangInfoMap);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged gameStateChanged) {
        if (gameStateChanged.getGameState() == GameState.LOGGED_IN) {
            refreshPanel();
            clearStaleGangInfo();
        }
    }

    private void clearStaleGangInfo() {
        Map<Integer, GangInfo> gangInfoCopy = new HashMap<>();
        AtomicBoolean removedAnyStaleValue = new AtomicBoolean(false);
        gangInfoMap.forEach((world, gangInfo) -> {
            if (!gangInfo.getExpectedTime().isStale()) {
                gangInfoCopy.put(world, gangInfo);
            } else {
                removedAnyStaleValue.set(true);
            }
        });

        ticksSinceLastStaleDataCull = 0;
        if (removedAnyStaleValue.get()) {
            gangInfoMap = gangInfoCopy;
            updatePanelData(gangInfoMap);
        }
    }

    private void refreshPanel() {
        ticksSinceLastUiUpdate = 0;
        panel.refresh();
    }

    private void updatePanelData(Map<Integer, GangInfo> data) {
        final List<LocationViewState> listItems = ViewStateMapper.gangInfoMapToLocationListItems(data, config);
        SwingUtilities.invokeLater(() -> {
            if (listItems.isEmpty()) {
                panel.displayEmpty();
            } else {
                panel.display(listItems);
            }
        });
    }

    private void hop(int worldId) {
        WorldResult worldResult = worldService.getWorlds();
        // Don't try to hop if the world doesn't exist
        net.runelite.http.api.worlds.World world = worldResult.findWorld(worldId);
        if (world == null) {
            return;
        }

        final World rsWorld = client.createWorld();
        rsWorld.setActivity(world.getActivity());
        rsWorld.setAddress(world.getAddress());
        rsWorld.setId(world.getId());
        rsWorld.setPlayerCount(world.getPlayers());
        rsWorld.setLocation(world.getLocation());
        rsWorld.setTypes(WorldUtil.toWorldTypes(world.getTypes()));

        if (client.getGameState() == GameState.LOGIN_SCREEN) {
            // on the login screen we can just change the world by ourselves
            client.changeWorld(rsWorld);
            return;
        }

        String chatMessage = new ChatMessageBuilder()
                .append(ChatColorType.NORMAL)
                .append("Quick-hopping to World ")
                .append(ChatColorType.HIGHLIGHT)
                .append(Integer.toString(world.getId()))
                .append(ChatColorType.NORMAL)
                .append("..")
                .build();

        chatMessageManager
                .queue(QueuedMessage.builder()
                        .type(ChatMessageType.CONSOLE)
                        .runeLiteFormattedMessage(chatMessage)
                        .build());

        quickHopTargetWorld = rsWorld;
        displaySwitcherAttempts = 0;
    }
}

package com.dylange.organisedcrime.config;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("organised-crime")
public interface OrganisedCrimeConfig extends Config {
    @ConfigItem(
            keyName = "multi",
            position = 0,
            name = "Multi only",
            description = "Keep track of only multi combat areas."
    )
    default boolean multiCombatOnly() {
        return false;
    }

    @ConfigItem(
            keyName = "Arceuus",
            name = "Arceuus",
            position = 1,
            description = "Track Arceuus locations."
    )
    default boolean trackArceuus() {
        return true;
    }

    @ConfigItem(
            keyName = "hosidius",
            name = "Hosidius",
            position = 2,
            description = "Track Hosidius locations."
    )
    default boolean trackHosidius() {
        return true;
    }

    @ConfigItem(
            keyName = "lovakengj",
            name = "Lovakengj",
            position = 3,
            description = "Track Lovakengj locations."
    )
    default boolean trackLovakengj() {
        return true;
    }

    @ConfigItem(
            keyName = "piscarilius",
            name = "Piscarilius",
            position = 4,
            description = "Track Piscarilius locations."
    )
    default boolean trackPiscarilius() {
        return true;
    }

    @ConfigItem(
            keyName = "shayzien",
            name = "Shayzien",
            position = 5,
            description = "Track Shayzien locations."
    )
    default boolean trackShayzien() {
        return true;
    }

    @ConfigItem(
            keyName = "other",
            name = "Other",
            position = 6,
            description = "Track other locations, not within above house boundaries"
    )
    default boolean trackOther() {
        return true;
    }
}

package com.dylange.organisedcrime.ui;

import com.dylange.organisedcrime.config.OrganisedCrimeConfig;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.PluginErrorPanel;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.util.List;
import java.util.function.Consumer;

@Slf4j
public class OrganisedCrimePanel extends PluginPanel {

    private final OrganisedCrimeConfig config;
    private final JPanel layoutPanel = new JPanel();
    private final Consumer<Integer> onWorldClicked;

    public OrganisedCrimePanel(OrganisedCrimeConfig config, Consumer<Integer> onWorldClicked) {
        this.config = config;
        this.onWorldClicked = onWorldClicked;

        setLayout(new BorderLayout(0, 8));
        setBorder(new EmptyBorder(0, 0, 0, 0));
        setBackground(ColorScheme.DARK_GRAY_COLOR);

        layoutPanel.setLayout(new BoxLayout(layoutPanel, BoxLayout.Y_AXIS));
        add(layoutPanel, BorderLayout.NORTH);
    }

    public void displayEmpty() {
        layoutPanel.removeAll();
        PluginErrorPanel errorPanel = new PluginErrorPanel();
        errorPanel.setContent(
                "Organised Crime Tracker",
                "View the information board to start tracking locations."
        );
        layoutPanel.add(errorPanel);
        layoutPanel.revalidate();
    }

    public void display(List<LocationViewState> viewState) {
        layoutPanel.removeAll();
        viewState.forEach(locationViewState -> {
            layoutPanel.add(new LocationPanel(locationViewState, onWorldClicked));
            layoutPanel.revalidate();
        });
    }

    public void refresh() {
        for (Component component : layoutPanel.getComponents()) {
            if (component instanceof LocationPanel) {
                ((LocationPanel) component).refreshWorldButtons();
            }
        }
    }
}

package com.dylange.organisedcrime.ui;

import com.dylange.organisedcrime.models.GangExpectedTime;

import java.util.Map;

public class LocationViewState {
    private final String description;
    private final String image;
    private final Map<GangExpectedTime, Integer> expectedTimeToWorld;

    public LocationViewState(String description, String image, Map<GangExpectedTime, Integer> expectedTimeToWorld) {
        this.description = description;
        this.image = image;
        this.expectedTimeToWorld = expectedTimeToWorld;
    }

    public String getDescription() {
        return description;
    }

    public String getImage() {
        return image;
    }

    public Map<GangExpectedTime, Integer> getExpectedTimeToWorld() {
        return expectedTimeToWorld;
    }

    @Override
    public String toString() {
        return "LocationViewState{" +
                "description='" + description + '\'' +
                ", image='" + image + '\'' +
                ", expectedTimeToWorld=" + expectedTimeToWorld +
                '}';
    }
}

package com.dylange.organisedcrime.ui;

import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.util.ImageUtil;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.function.Consumer;

@Slf4j
public class LocationPanel extends JPanel {

    private final LocationViewState viewState;
    private final Consumer<Integer> onWorldClicked;
    private final Color backgroundColour = ColorScheme.DARKER_GRAY_COLOR.darker();

    private final JSeparator separator = new JSeparator(JSeparator.HORIZONTAL);
    private final JPanel descriptionContainer = new JPanel();
    private final JPanel worldsContainer = new JPanel();

    private final JTextArea descriptionLabel = new JTextArea();

    public LocationPanel(LocationViewState viewState, Consumer<Integer> onWorldClicked) {
        this.viewState = viewState;
        this.onWorldClicked = onWorldClicked;
        setLayout(new BorderLayout(0, 1));
        setBackground(backgroundColour);
        separator.setBackground(ColorScheme.MEDIUM_GRAY_COLOR);

        descriptionContainer.setLayout(new GridBagLayout());
        descriptionContainer.setBorder(new EmptyBorder(8, 8, 8, 8));
        descriptionContainer.setBackground(backgroundColour);

        int numRows = viewState.getExpectedTimeToWorld().keySet().size();
        worldsContainer.setLayout(new GridLayout(numRows, 1, 0, 2));
        worldsContainer.setBorder(new EmptyBorder(8, 8, 8, 8));
        worldsContainer.setBackground(backgroundColour);

        add(separator, BorderLayout.NORTH);
        add(descriptionContainer, BorderLayout.CENTER);
        add(worldsContainer, BorderLayout.SOUTH);

        descriptionLabel.setText(viewState.getDescription());
        descriptionLabel.setEditable(false);
        descriptionLabel.setWrapStyleWord(true);
        descriptionLabel.setLineWrap(true);
        descriptionLabel.setFont(FontManager.getRunescapeFont());
        GridBagConstraints descriptionConstraints = new GridBagConstraints();
        descriptionConstraints.fill = GridBagConstraints.HORIZONTAL;
        descriptionConstraints.gridy = 0;
        descriptionContainer.add(descriptionLabel, descriptionConstraints);

        BufferedImage locationIcon = ImageUtil.loadImageResource(getClass(), viewState.getImage());
        JLabel locationImage = new JLabel(new ImageIcon(new ImageIcon(locationIcon).getImage().getScaledInstance(214, 214, Image.SCALE_DEFAULT)));
        GridBagConstraints locationImageConstraints = new GridBagConstraints();
        locationImageConstraints.fill = GridBagConstraints.HORIZONTAL;
        locationImageConstraints.gridy = 1;
        locationImageConstraints.anchor = GridBagConstraints.CENTER;
        descriptionContainer.add(locationImage, locationImageConstraints);
        drawWorldsButtons();
    }

    public void refreshWorldButtons() {
        SwingUtilities.invokeLater(this::drawWorldsButtons);
    }

    private void drawWorldsButtons() {
        if (worldsContainer == null || viewState == null) return;
        worldsContainer.removeAll();
        viewState.getExpectedTimeToWorld().forEach((expectedTime, world) -> {
            String buttonText = String.format("W%d %s", world, expectedTime.toString());
            JButton worldButton = new JButton(buttonText);
            worldButton.addActionListener(e -> onWorldClicked.accept(world));
            worldsContainer.add(worldButton);
        });
        worldsContainer.revalidate();
    }
}

package com.dylange.organisedcrime.models;

import java.util.ArrayList;
import java.util.Arrays;

public class OrganisedCrimeLocations {

    public static final LocationGroup[] locationGroups = {
            new Arceuus(),
            new Hosidius(),
            new Lovakengj(),
            new Piscarilius(),
            new Shayzien(),
            new Other(),
    };

    public static final OrganisedCrimeLocation[] allLocations;

    static {
        ArrayList<OrganisedCrimeLocation> locationList = new ArrayList<>();
        for (LocationGroup group : locationGroups) {
            locationList.addAll(Arrays.asList(group.getLocations()));
        }
        allLocations = locationList.toArray(new OrganisedCrimeLocation[0]);
    }

    interface LocationGroup {
        OrganisedCrimeLocation[] getLocations();
    }

    public static class Arceuus implements LocationGroup {
        @Override
        public OrganisedCrimeLocation[] getLocations() {
            return new OrganisedCrimeLocation[]{
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Arceuus,
                            "We've received reports of a gang meeting in Arceuus, in a house south east of the bank.",
                            "The house exactly south-east of the bank, east of the walkway when walking into Arceuus. Ground floor.",
                            "arceuus1.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Arceuus,
                            "We've received reports of a gang meeting in Arceuus, in the temple crypt.",
                            "Inside of the temple on the ground floor marked by green on the map.",
                            "arceuus2.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Arceuus,
                            "We've received reports of a gang meeting in Arceuus, upstairs in a house south west of the temple.",
                            "Middle floor of house with teleport tablet lectern. ",
                            "arceuus3.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Arceuus,
                            "We've received reports of a gang meeting in Arceuus, upstairs in the pub.",
                            "The bar in the south-eastern portion of Arceuus, on the middle floor.",
                            "arceuus4.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Arceuus,
                            "We've received reports of a gang meeting in Arceuus, in a house south east of the temple.",
                            "A house south-east of the temple.",
                            "arceuus5.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Arceuus,
                            "We've received reports of a gang meeting in Arceuus, upstairs in the general store.",
                            "The general store is in the south-east part of Arceuus.",
                            "arceuus6.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Arceuus,
                            "We've received reports of a gang meeting in Arceuus, upstairs in the bank.",
                            "The bank is in the south-west part of Arceuus.",
                            "arceuus7.png",
                            false
                    ),
            };
        }
    }

    public static class Hosidius implements LocationGroup {
        @Override
        public OrganisedCrimeLocation[] getLocations() {
            return new OrganisedCrimeLocation[]{
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Hosidius,
                            "We've received reports of a gang meeting in the Hosidius Marketplace.",
                            "The Hosidius Marketplace is east of the city's bank.",
                            "hosidius1.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Hosidius,
                            "We've received reports of a gang meeting south of Kourend Castle, in the vegetable field by the Mess.",
                            "The field just south of the mess.",
                            "hosidius2.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Hosidius,
                            "We've received reports of a gang meeting in Hosidius, inside the pub.",
                            "The Golden Field pub in the market square.",
                            "hosidius3.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Hosidius,
                            "We've received reports of a gang meeting west of the Tithe Farm.",
                            "The ruins west of the Tithe Farm entrance.",
                            "hosidius4.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Hosidius,
                            "We've received reports of a gang meeting north of the Woodcutting Guild, by the minecart entrance.",
                            "Directly north of the Hosidius mine cart track found north-east of the Woodcutting Guild.",
                            "hosidius5.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Hosidius,
                            "We've received reports of a gang meeting south of Port Piscarilius, by the minecart entrance.",
                            "On the border of Port Piscarilius and Hosidius, next to Raeli. Slightly west of the minecart.",
                            "hosidius6.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Hosidius,
                            "We've received reports of a gang meeting south of Hosidius, in the cabbage patch.",
                            "Just north of the POH portal.",
                            "hosidius7.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Hosidius,
                            "We've received reports of a gang meeting in Hosidius, in the cow field.",
                            "Large cow field, south of the flax field.",
                            "hosidius8.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Hosidius,
                            "We've received reports of a gang meeting inside the Forthos Ruin.",
                            "At the Forthos Ruin.",
                            "hosidius9.png",
                            true
                    ),
            };
        }
    }

    public static class Lovakengj implements LocationGroup {
        @Override
        public OrganisedCrimeLocation[] getLocations() {
            return new OrganisedCrimeLocation[]{
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Lovakengj,
                            "We've received reports of a gang meeting in Lovakengj, in the pub.",
                            "The Deeper Lode pub located south-east",
                            "lovakengj1.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Lovakengj,
                            "We've received reports of a gang meeting in Lovakengj, upstairs in a house south east of the church.",
                            "Climb up the stairs in any of the three buildings south-east of the church.",
                            "lovakengj2.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Lovakengj,
                            "We've received reports of a gang meeting in Lovakengj, in a house south east of the Blast Mine.",
                            "Downstairs in the house just south-east of the Blast Mine, adjacent to a house with an anvil inside.",
                            "lovakengj3.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Lovakengj,
                            "We've received reports of a gang meeting in Lovakengj, upstairs in the building north east of the Lovakengj Assembly.",
                            "Upstairs in the T-shaped building with the furnace north-east of the Lovakengj Assembly.",
                            "lovakengj4.png",
                            true
                    ),
            };
        }
    }

    public static class Piscarilius implements LocationGroup {
        @Override
        public OrganisedCrimeLocation[] getLocations() {
            return new OrganisedCrimeLocation[]{
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Piscarilius,
                            "We've received reports of a gang meeting in Port Piscarilius, inside the foodhall.",
                            "Far east in Piscarilius, in the largest building.",
                            "piscarilius1.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Piscarilius,
                            "We've received reports of a gang meeting in Port Piscarilius, just behind the foodhall.",
                            "Far east in Piscarilius, outside of the largest building.",
                            "piscarilius2.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Piscarilius,
                            "We've received reports of a gang meeting in Port Piscarilius, upstairs in a house west of the general store.",
                            "Upstairs in the house west of the general store.",
                            "piscarilius3.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Piscarilius,
                            "We've received reports of a gang meeting in Port Piscarilius, in a house on the western pier.",
                            "In the western building over the water in the cove.",
                            "piscarilius4.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Piscarilius,
                            "We've received reports of a gang meeting in Port Piscarilius, upstairs in a house north of the general store.",
                            "The middle floor of the house directly south of the bank, upstairs, water and stove icon.",
                            "piscarilius5.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Piscarilius,
                            "We've received reports of a gang meeting in Port Piscarilius, in a house on the south west pier.",
                            "The south-west corner, on the docks, not the main land.",
                            "piscarilius6.png",
                            true
                    ),
            };
        }
    }

    public static class Shayzien implements LocationGroup {
        @Override
        public OrganisedCrimeLocation[] getLocations() {
            return new OrganisedCrimeLocation[]{
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Shayzien,
                            "We've received reports of a gang meeting in the forest south of the Chasm of Fire.",
                            "South of entrance to the Chasm of Fire.",
                            "shayzien1.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Shayzien,
                            "We've received reports of a gang infiltrating our own city! They're meeting in the south west corner of the graveyard.",
                            "South-west corner of the Graveyard of Heroes.",
                            "shayzien2.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Shayzien,
                            "We've received reports of a gang meeting in a ruin south of the Giant Pit.",
                            "South of the Giant Pit.",
                            "shayzien3.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Shayzien,
                            "We've received reports of a gang meeting in the Shayzia Ruin, north east of our city.",
                            "In the Shayzia Ruin.",
                            "shayzien4.png",
                            true
                    ),
            };
        }
    }

    public static class Other implements LocationGroup {
        @Override
        public OrganisedCrimeLocation[] getLocations() {
            return new OrganisedCrimeLocation[]{
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Other,
                            "We've received reports of a gang meeting at the statue of King Rada outside Kourend Castle.",
                            "East of the statue in Kourend Castle.",
                            "other1.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Other,
                            "We've received reports of a gang meeting in the Kourend Woodland barbarian camp.",
                            "The barbarian camp south the Woodcutting Guild.",
                            "other2.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Other,
                            "We've received reports of a gang meeting inside Kourend Castle, in one of the lesser used north eastern rooms.",
                            "The Kourend Castle in one of the north-eastern rooms.",
                            "other3.png",
                            true
                    ),
                    new OrganisedCrimeLocation(
                            OrganisedCrimeLocation.Area.Other,
                            "We've received reports of a gang meeting in a house in Land's End.",
                            "The house north of the bank in Land's End.",
                            "other4.png",
                            false
                    ),
            };
        }
    }
}

package com.dylange.organisedcrime.models;

public class GangExpectedTime implements Comparable<GangExpectedTime> {
    private static final long STALE_THRESHOLD = 5 * 60 * 1000L; // 5 minutes

    private long timeRead;
    private long initialMinutesUntilAppearance;

    public GangExpectedTime(long timeRead, int initialMinutesUntilAppearance) {
        this.timeRead = timeRead;
        this.initialMinutesUntilAppearance = initialMinutesUntilAppearance;
    }

    public boolean isStale() {
        return getTimeUntilExpectedAppearance() * -1f > STALE_THRESHOLD;
    }

    @Override
    public String toString() {
        long deltaTimeMinutes = (getTimeUntilExpectedAppearance() / 1000 / 60);

        if (deltaTimeMinutes == 0) {
            return "Now";
        } else if (deltaTimeMinutes > 0) {
            return String.format("~%s mins", deltaTimeMinutes + 1);
        } else {
            long minutesSinceAppearance = (deltaTimeMinutes * -1) + 1;
            return String.format("~%s mins ago", minutesSinceAppearance);
        }
    }

    @Override
    public int compareTo(GangExpectedTime other) {
        return (int)(this.getExpectedAppearanceTime() - other.getExpectedAppearanceTime());
    }

    private Long getExpectedAppearanceTime() {
        return (timeRead + (initialMinutesUntilAppearance * 60 * 1000));
    }

    private Long getTimeUntilExpectedAppearance() {
        return getExpectedAppearanceTime() - System.currentTimeMillis();
    }
}

package com.dylange.organisedcrime.models;

import lombok.extern.slf4j.Slf4j;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
public class GangInfo implements Comparable<GangInfo> {
    private static Pattern timeRegex = Pattern.compile("([0-9]+)");
    private static Pattern nowRegex = Pattern.compile(".*(now|imminently).*");

    private String locationMessage;
    private int world;
    private GangExpectedTime expectedTime;
    private OrganisedCrimeLocation correspondingLocation;

    public GangInfo(String locationMessage, String timeMessage, int world) {
        this.locationMessage = locationMessage;
        this.world = world;

        long timeRead = System.currentTimeMillis();

        Matcher timeMatcher = timeRegex.matcher(timeMessage);
        if (timeMatcher.find()) {
            this.expectedTime = new GangExpectedTime(
                    timeRead,
                    Integer.parseInt(timeMatcher.group())
            );
        } else {
            Matcher nowMatcher = nowRegex.matcher(timeMessage);
            if (nowMatcher.find()) {
                this.expectedTime = new GangExpectedTime(timeRead, 0);
            } else {
                throw new IllegalArgumentException(String.format("Failed to parse time from \"%s\"", timeMessage));
            }
        }
    }

    public String getLocationMessage() {
        return locationMessage;
    }

    public int getWorld() {
        return world;
    }

    public GangExpectedTime getExpectedTime() {
        return expectedTime;
    }

    public OrganisedCrimeLocation getLocation() throws IllegalStateException {
        if (correspondingLocation != null) return correspondingLocation;

        for (OrganisedCrimeLocation loc : OrganisedCrimeLocations.allLocations) {
            if (loc.getLocationMessage().equals(this.locationMessage)) {
                correspondingLocation = loc;
            }
        }
        if (correspondingLocation != null) {
            return correspondingLocation;
        } else {
            throw new IllegalStateException("Corresponding location info not found for data read from information board.");
        }
    }

    @Override
    public int compareTo(GangInfo gangInfo) {
        return 0;
    }
}

package com.dylange.organisedcrime.models;

import java.util.Objects;

public class OrganisedCrimeLocation {

    private Area area;
    private String locationMessage;
    private String description;
    private String image;
    private boolean isMultiCombat;

    public OrganisedCrimeLocation(Area area, String locationMessage, String description, String image, boolean isMultiCombat) {
        this.area = area;
        this.locationMessage = locationMessage;
        this.description = description;
        this.image = image;
        this.isMultiCombat = isMultiCombat;
    }

    public Area getArea() {
        return area;
    }

    public String getLocationMessage() {
        return locationMessage;
    }

    public String getDescription() {
        return description;
    }

    public String getImage() {
        return image;
    }

    public boolean isMultiCombat() {
        return isMultiCombat;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        OrganisedCrimeLocation that = (OrganisedCrimeLocation) o;
        return isMultiCombat == that.isMultiCombat &&
                locationMessage.equals(that.locationMessage) &&
                description.equals(that.description);
    }

    @Override
    public int hashCode() {
        return Objects.hash(locationMessage, description, isMultiCombat);
    }

    public enum Area {
        Arceuus, Hosidius, Lovakengj, Piscarilius, Shayzien, Other
    }
}

