package com.hueambiance;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class HueAmbiancePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(HueAmbiancePlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2017, Devin French <https://github.com/devinfrench>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.hueambiance;

import java.awt.Color;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Units;

@ConfigGroup("Hue Ambiance")
public interface HueAmbianceConfig extends Config
{
	@ConfigSection(
		name = "Hue bridge",
		description = "Technical settings for the bridge",
		position = 0
	)
	String bridgeSection = "bridgeSection";

	@ConfigSection(
		name = "Configuration",
		description = "Functional configuration",
		position = 1
	)
	String configSection = "configSection";

	@ConfigSection(
		name = "Colors",
		description = "Color configuration",
		position = 2
	)
	String colorSection = "colorSection";

	@ConfigSection(
		name = "Raids",
		description = "Raid configuration",
		position = 3
	)
	String raidsSection = "raidsSections";

	@ConfigItem(
		keyName = "ip",
		name = "Bridge ip",
		description = "Bridge ip",
		position = 0,
		section = bridgeSection
	)
	default String bridgeIp()
	{
		return "";
	}

	@ConfigItem(
		keyName = "token",
		name = "Bridge token",
		description = "Bridge token",
		position = 1,
		section = bridgeSection
	)
	default String bridgeToken()
	{
		return "";
	}

	@ConfigItem(
		keyName = "room",
		name = "Room name",
		description = "The name of the room that needs to be controlled",
		position = 2,
		section = bridgeSection
	)
	default String room()
	{
		return "";
	}

	@ConfigItem(
		keyName = "brightness",
		name = "Brightness",
		description = "Brightness of the lamps in the room in percentages",
		position = 0,
		section = configSection
	)
	@Units(Units.PERCENT)
	default int brightness()
	{
		return 75;
	}

	@ConfigItem(
		keyName = "refreshRate",
		name = "Skybox refresh rate",
		description = "Amount of milliseconds that need to be between skybox updates. A call to the bridge will be done every refresh. A value of 0 will disable skybox refresh",
		position = 1,
		section = configSection
	)
	@Units(Units.MILLISECONDS)
	default int skyboxRefreshRate()
	{
		return 1000;
	}

	@ConfigItem(
		keyName = "hp",
		name = "HP threshold",
		description = "The amount of hp to send a notification at. A value of 0 will disable notification.",
		position = 2,
		section = configSection
	)
	default int hpThreshold()
	{
		return 0;
	}

	@ConfigItem(
		keyName = "prayer",
		name = "Prayer threshold",
		description = "The amount of prayer points to send a notification at. A value of 0 will disable notification.",
		position = 3,
		section = configSection
	)
	default int prayerThreshold()
	{
		return 0;
	}

	@ConfigItem(
		keyName = "itemLow",
		name = "Low item price threshold",
		description = "The price an item must be in order to trigger a notification. A value of 0 will disable notification.",
		position = 4,
		section = configSection
	)
	default int lowItemPriceThreshold()
	{
		return 250_000;
	}

	@ConfigItem(
		keyName = "itemMedium",
		name = "Medium item price threshold",
		description = "The price an item must be in order to trigger a notification. A value of 0 will disable notification.",
		position = 5,
		section = configSection
	)
	default int mediumItemPriceThreshold()
	{
		return 500_000;
	}

	@ConfigItem(
		keyName = "itemHigh",
		name = "High item price threshold",
		description = "The price an item must be in order to trigger a notification. A value of 0 will disable notification.",
		position = 6,
		section = configSection
	)
	default int highItemPriceThreshold()
	{
		return 1_000_000;
	}

	@ConfigItem(
		keyName = "levelUp",
		name = "Level up notifier",
		description = "Enable firework animation on level up",
		position = 7,
		section = configSection
	)
	default boolean levelUpEnabled()
	{
		return true;
	}

	@ConfigItem(
		keyName = "zulrah",
		name = "Zulrah custom ambiance",
		description = "Enables custom ambiance colors for Zulrah",
		position = 8,
		section = configSection
	)
	default boolean zulrahEnabled()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
		keyName = "defaultColor",
		name = "Default",
		description = "Default color to use when skybox is not enabled",
		position = 0,
		section = colorSection
	)
	default Color defaultHueColor()
	{
		return Color.WHITE;
	}

	@Alpha
	@ConfigItem(
		keyName = "hpColor",
		name = "HP",
		description = "Color when low hp",
		position = 1,
		section = colorSection
	)
	default Color lowHpColor()
	{
		return Color.RED;
	}

	@Alpha
	@ConfigItem(
		keyName = "prayerColor",
		name = "Prayer",
		description = "Color when low prayer",
		position = 2,
		section = colorSection
	)
	default Color lowPrayerColor()
	{
		return Color.CYAN;
	}

	@Alpha
	@ConfigItem(
		keyName = "ItemLowColor",
		name = "Item low",
		description = "Color when low value drop received",
		position = 3,
		section = colorSection
	)
	default Color itemLowColor()
	{
		return Color.CYAN;
	}

	@Alpha
	@ConfigItem(
		keyName = "itemMediumColor",
		name = "Item medium",
		description = "Color when medium value drop received",
		position = 4,
		section = colorSection
	)
	default Color itemMediumColor()
	{
		return Color.GREEN;
	}

	@Alpha
	@ConfigItem(
		keyName = "itemHighColor",
		name = "Item high",
		description = "Color when high value drop received",
		position = 5,
		section = colorSection
	)
	default Color itemHighColor()
	{
		return new Color(161, 52, 235);
	}

	@Alpha
	@ConfigItem(
		keyName = "cgEnhanced",
		name = "CG enhanced seed",
		description = "Color when enhanced weapon seed",
		position = 7,
		section = colorSection
	)
	default Color cgEnhanced()
	{
		return new Color(161, 52, 235);
	}

	@Alpha
	@ConfigItem(
		keyName = "cgArmour",
		name = "CG armour seed",
		description = "Color when armour seed is received",
		position = 8,
		section = colorSection
	)
	default Color cgArmour()
	{
		return Color.CYAN;
	}
	@Alpha
	@ConfigItem(
		keyName = "coxOtherPurple",
		name = "Cox show others drop",
		description = "Also display color when it's not your drop.",
		position = 0,
		section = raidsSection
	)
	default boolean coxShowOthersPurple()
	{
		return true;
	}
	@Alpha
	@ConfigItem(
		keyName = "coxColor",
		name = "Cox drop color",
		description = "Color when drop received",
		position = 1,
		section = raidsSection
	)
	default Color coxColor()
	{
		return new Color(161, 52, 235);
	}

	@Alpha
	@ConfigItem(
		keyName = "coxOthersColor",
		name = "Cox other drop color",
		description = "Color when someone else received a drop",
		position = 1,
		section = raidsSection
	)
	default Color coxOthersColor()
	{
		return new Color(161, 52, 235);
	}

	@Alpha
	@ConfigItem(
		keyName = "tobOtherPurple",
		name = "Tob show others drop",
		description = "Also display color when it's not your drop.",
		position = 4,
		section = raidsSection
	)
	default boolean tobShowOthersPurple()
	{
		return true;
	}
	@Alpha
	@ConfigItem(
		keyName = "tobColor",
		name = "Tob drop color",
		description = "Color when drop received",
		position = 5,
		section = raidsSection
	)
	default Color tobColor()
	{
		return new Color(161, 52, 235);
	}

	@Alpha
	@ConfigItem(
		keyName = "tobOthersColor",
		name = "Tob other drop color",
		description = "Color when someone else received a drop",
		position = 6,
		section = raidsSection
	)
	default Color tobOthersColor()
	{
		return new Color(161, 52, 235);
	}

	@Alpha
	@ConfigItem(
		keyName = "toaOtherPurple",
		name = "Toa show others drop",
		description = "Also display color when it's not your drop.",
		position = 7,
		section = raidsSection
	)
	default boolean toaShowOthersPurple()
	{
		return true;
	}
	@Alpha
	@ConfigItem(
		keyName = "toaColor",
		name = "Toa drop color",
		description = "Color when drop received",
		position = 8,
		section = raidsSection
	)
	default Color toaColor()
	{
		return new Color(161, 52, 235);
	}

	@Alpha
	@ConfigItem(
		keyName = "toaOthersColor",
		name = "Toa other drop color",
		description = "Color when someone else received a drop",
		position = 9,
		section = raidsSection
	)
	default Color toaOthersColor()
	{
		return new Color(161, 52, 235);
	}
}

package com.hueambiance.helpers;

import com.google.common.collect.ImmutableSet;

import java.awt.*;
import java.util.Set;

public class Colors
{
	public static final Color RED = new Color(255, 0, 0);
	public static final Color ORANGE = new Color(255, 200, 0);
	public static final Color GREEN = new Color(0, 255, 0);
	public static final Color CYAN = new Color(0, 255, 255);
	public static final Color PINK = new Color(255, 175, 175);
	public static final Color MAGENTA = new Color(255, 0, 255);
	public static final Color YELLOW = new Color(255, 255, 0);

	public static final Set<Color> FIRE_WORKS_COLORS = ImmutableSet.of(
		CYAN, ORANGE, MAGENTA, GREEN, RED, PINK, YELLOW
	);
}

package com.hueambiance.helpers;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ThreadHelper
{
	private static final ExecutorService backgroundExecutor = Executors.newSingleThreadExecutor();

	public static void executeOnBackGround(final Runnable runnable)
	{
		backgroundExecutor.submit(runnable);
	}

	public static void executeOnBackGround(final Runnable runnable, final Runnable callback)
	{
		backgroundExecutor.submit(() -> {
			runnable.run();
			callback.run();
		});
	}
}

package com.hueambiance.helpers;

import static com.hueambiance.helpers.Colors.FIRE_WORKS_COLORS;
import static com.hueambiance.helpers.ThreadHelper.executeOnBackGround;

import com.hueambiance.HueAmbianceConfig;
import io.github.zeroone3010.yahueapi.Room;
import io.github.zeroone3010.yahueapi.State;
import javax.inject.Inject;
import javax.inject.Singleton;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;

@Singleton
public class HueHelper
{

	private static final int MAX_BRIGHTNESS = 254;

	@Inject
	private HueAmbianceConfig config;

	public void performFireWorks(final Room room, final Runnable callback)
	{
		executeForDuration(() -> FIRE_WORKS_COLORS.forEach(color -> {
				setColor(room, color);
				try
				{
					Thread.sleep(250);
				}
				catch (InterruptedException e)
				{
					// do nothing
				}
			}
		), Duration.ofSeconds(5), callback);
	}

	public void setColor(final Room room, final java.awt.Color color)
	{
		executeOnBackGround(() -> room.setState(State.builder().xy(toXY(color)).brightness(getBrightness()).keepCurrentState()));
	}

	public void setAlert(final Room room, final java.awt.Color color)
	{
		executeOnBackGround(() -> {
			room.setState(State.LONG_ALERT);
			setColor(room, color);
		});
	}

	public void stopAlert(final Room room)
	{
		executeOnBackGround(() -> room.setState(State.NO_ALERT));
	}

	public void setColorForDuration(final Room room, final java.awt.Color color, final Duration duration, final Runnable callback)
	{
		executeOnBackGround(() -> {
			setColor(room, color);
			try
			{
				Thread.sleep(duration.toMillis());
			}
			catch (InterruptedException e)
			{
				// do nothing
			}
		}, callback);
	}

	private void executeForDuration(final Runnable task, final Duration duration, Runnable callback)
	{
		executeOnBackGround(() -> {
			final long endTime = System.nanoTime() + duration.toNanos();
			while (endTime > System.nanoTime())
			{
				task.run();
			}
		}, callback);
	}

	private int getBrightness()
	{
		return (int) (config.brightness() / 100.0 * MAX_BRIGHTNESS);
	}

	private List<Float> toXY(final java.awt.Color color)
	{
		final double r = gammaCorrection(color.getRed());
		final double g = gammaCorrection(color.getGreen());
		final double b = gammaCorrection(color.getBlue());
		final double rgbX = r * 0.664511f + g * 0.154324f + b * 0.162028f;
		final double rgbY = r * 0.283881f + g * 0.668433f + b * 0.047685f;
		final double rgbZ = r * 0.000088f + g * 0.072310f + b * 0.986039f;
		final float x = (float) (rgbX / (rgbX + rgbY + rgbZ));
		final float y = (float) (rgbY / (rgbX + rgbY + rgbZ));
		return new ArrayList<Float>(){{
			this.add(x);
			this.add(y);
		}};
	}

	private double gammaCorrection(float component)
	{
		return (component > 0.04045f) ? Math.pow((component + 0.055f) / (1.0f + 0.055f), 2.4f) : (component / 12.92f);
	}
}

package com.hueambiance.overrides;

import com.google.common.collect.ImmutableSet;
import com.hueambiance.AmbianceOverride;
import java.util.Set;
import javax.inject.Inject;
import javax.inject.Singleton;

@Singleton
public class AmbianceOverrides
{
	@Inject
	private HpOverride hpOverride;

	@Inject
	private PrayerOverride prayerOverride;

	@Inject
	private MessageOverride messageOverride;

	@Inject
	private ItemOverride itemOverride;

	@Inject
	private ZulrahOverride zulrahOverride;

	@Inject
	private TobOverride tobOverride;

	@Inject
	private ToaOverride toaOverride;

	// the order in this set makes sure we have the right priority since only 1 override can be active at once
	public Set<AmbianceOverride> getAll()
	{
		return ImmutableSet.of(
			tobOverride,
			toaOverride,
			hpOverride,
			prayerOverride,
			messageOverride,
			itemOverride,
			zulrahOverride
		);
	}
}

package com.hueambiance.overrides;

import com.hueambiance.AmbianceOverride;
import com.hueambiance.HueAmbianceConfig;
import com.hueambiance.helpers.HueHelper;
import io.github.zeroone3010.yahueapi.Room;
import javax.inject.Inject;
import javax.inject.Singleton;
import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.api.Varbits;
import net.runelite.api.events.GameTick;

@Singleton
public class HpOverride implements AmbianceOverride
{

	@Inject
	private HueAmbianceConfig config;

	@Inject
	private Client client;

	@Inject
	private HueHelper hueHelper;

	private boolean currentlyAlerting = false;
	private long lastAlert = 0;

	@Override
	public boolean doesOverride(final Room room)
	{
		final boolean lowHP = checkLowHP();
		if (!lowHP)
		{
			if (currentlyAlerting)
			{
				hueHelper.stopAlert(room);
			}
			currentlyAlerting = false;
		}
		return lowHP;
	}

	@Override
	public void handleGameTick(final GameTick gameTick, final Room room)
	{
		final long currentTime = System.currentTimeMillis();
		if (!currentlyAlerting || currentTime - lastAlert > 10_000L)
		{
			currentlyAlerting = true;
			lastAlert = currentTime;
			hueHelper.setAlert(room, config.lowHpColor());
		}
	}

	private boolean checkLowHP()
	{
		return config.hpThreshold() > 0 &&
			client.getRealSkillLevel(Skill.HITPOINTS) > config.hpThreshold() &&
			client.getBoostedSkillLevel(Skill.HITPOINTS) + client.getVarbitValue(Varbits.NMZ_ABSORPTION) <= config.hpThreshold();
	}
}

package com.hueambiance.overrides;

import com.hueambiance.AmbianceOverride;
import com.hueambiance.HueAmbianceConfig;
import com.hueambiance.helpers.HueHelper;
import io.github.zeroone3010.yahueapi.Room;
import java.time.Duration;
import javax.inject.Inject;
import javax.inject.Singleton;
import net.runelite.api.events.ItemSpawned;
import net.runelite.client.game.ItemManager;

@Singleton
public class ItemOverride implements AmbianceOverride
{
	@Inject
	private HueAmbianceConfig config;

	@Inject
	private ItemManager itemManager;

	@Inject
	private HueHelper hueHelper;

	private boolean active = false;

	@Override
	public boolean doesOverride(final Room room)
	{
		return active;
	}

	@Override
	public void handleItemSpawned(final ItemSpawned itemSpawned, final Room room)
	{
		if (config.lowItemPriceThreshold() > 0 || config.mediumItemPriceThreshold() > 0 || config.highItemPriceThreshold() > 0)
		{
			final int price = itemManager.getItemPrice(itemSpawned.getItem().getId());
			if(config.highItemPriceThreshold() > 0 && price >= config.highItemPriceThreshold())
			{
				active = true;
				hueHelper.setColorForDuration(room, config.itemHighColor(), Duration.ofSeconds(5), () -> active = false);
			} else if(config.mediumItemPriceThreshold() > 0 && price >= config.mediumItemPriceThreshold())
			{
				active = true;
				hueHelper.setColorForDuration(room, config.itemMediumColor(), Duration.ofSeconds(5), () -> active = false);
			} else if(config.lowItemPriceThreshold() > 0 && price >= config.lowItemPriceThreshold())
			{
				active = true;
				hueHelper.setColorForDuration(room, config.itemLowColor(), Duration.ofSeconds(5), () -> active = false);
			}
		}
	}
}

package com.hueambiance.overrides;

import com.hueambiance.AmbianceOverride;
import com.hueambiance.HueAmbianceConfig;
import com.hueambiance.helpers.HueHelper;
import io.github.zeroone3010.yahueapi.Room;
import javax.inject.Inject;
import javax.inject.Singleton;
import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.api.events.GameTick;

@Singleton
public class PrayerOverride implements AmbianceOverride
{

	@Inject
	private HueAmbianceConfig config;

	@Inject
	private Client client;

	@Inject
	private HueHelper hueHelper;

	private boolean currentlyAlerting = false;
	private long lastAlert = 0;

	@Override
	public boolean doesOverride(final Room room)
	{
		final boolean lowPrayer = checkLowPrayer();
		if (!lowPrayer)
		{
			if (currentlyAlerting)
			{
				hueHelper.stopAlert(room);
			}
			currentlyAlerting = false;
		}
		return lowPrayer;
	}

	@Override
	public void handleGameTick(final GameTick gameTick, final Room room)
	{
		final long currentTime = System.currentTimeMillis();
		if (!currentlyAlerting || currentTime - lastAlert > 10_000)
		{
			currentlyAlerting = true;
			lastAlert = currentTime;
			hueHelper.setAlert(room, config.lowPrayerColor());
		}
	}

	private boolean checkLowPrayer()
	{
		return config.prayerThreshold() > 0 &&
			client.getRealSkillLevel(Skill.PRAYER) > config.prayerThreshold() &&
			client.getBoostedSkillLevel(Skill.PRAYER) <= config.prayerThreshold();
	}
}

package com.hueambiance.overrides;

import com.hueambiance.AmbianceOverride;
import com.hueambiance.HueAmbianceConfig;
import com.hueambiance.helpers.HueHelper;
import io.github.zeroone3010.yahueapi.Room;
import net.runelite.api.Client;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameTick;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.time.Duration;

@Singleton
public class ToaOverride implements AmbianceOverride {

    private static final int TOA_TOMB_REGION = 14672;
    private static final int[] VARBIT_MULTILOC_IDS_CHEST = new int[]{
            14356, 14357, 14358, 14359, 14360, 14370, 14371, 14372
    };

    private static final int VARBIT_VALUE_CHEST_KEY = 2;
    private static final int VARBIT_ID_SARCOPHAGUS = 14373;
    private boolean active = false;
    private boolean activatedBefore = false;

    @Inject
    private Client client;

    @Inject
    private HueAmbianceConfig config;

    @Inject
    private HueHelper hueHelper;

    @Override
    public boolean doesOverride(final Room room)
    {
        return active;
    }

    @Override
    public void handleGameTick(final GameTick gameTick, final Room room)
    {
        final LocalPoint lp = client.getLocalPlayer().getLocalLocation();
        final int region = lp == null ? -1 : WorldPoint.fromLocalInstance(client, lp).getRegionID();
        if(region == TOA_TOMB_REGION && !activatedBefore)
        {
            final boolean sarcophagusIsPurple = client.getVarbitValue(VARBIT_ID_SARCOPHAGUS) % 2 != 0;
            if(sarcophagusIsPurple)
            {
                boolean purpleIsMine = true;
                for (final int varbitId : VARBIT_MULTILOC_IDS_CHEST)
                {
                    if (client.getVarbitValue(varbitId) == VARBIT_VALUE_CHEST_KEY)
                    {
                        purpleIsMine = false;
                        break;
                    }
                }

                if (purpleIsMine)
                {
                    active = true;
                    activatedBefore = true;
                    hueHelper.setColorForDuration(room, config.toaColor(), Duration.ofSeconds(15), () -> active = false);
                } else
                {
                    if(config.toaShowOthersPurple())
                    {
                        active = true;
                        activatedBefore = true;
                        hueHelper.setColorForDuration(room, config.toaOthersColor(), Duration.ofSeconds(15), () -> active = false);
                    }
                }
            }
        } else if(region != TOA_TOMB_REGION && activatedBefore)
        {
            activatedBefore = false;
        }
    }
}

package com.hueambiance.overrides;

import com.hueambiance.AmbianceOverride;
import com.hueambiance.HueAmbianceConfig;
import com.hueambiance.helpers.HueHelper;
import io.github.zeroone3010.yahueapi.Room;
import java.time.Duration;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.SneakyThrows;
import net.runelite.api.Client;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.util.Text;

@Singleton
public class MessageOverride implements AmbianceOverride
{
	@Inject
	private Client client;

	@Inject
	private HueAmbianceConfig config;

	@Inject
	private HueHelper hueHelper;

	private boolean active = false;

	@Override
	public boolean doesOverride(final Room room)
	{
		return active;
	}

	@Override
	@SneakyThrows
	public void handleChatMessage(final ChatMessage chatMessage, final Room room)
	{
		switch (chatMessage.getType())
		{
			case GAMEMESSAGE:
				handleGameMessage(Text.removeTags(chatMessage.getMessage()), room);
				break;
			case FRIENDSCHATNOTIFICATION:
				handleFriendsChatNotification(Text.removeTags(chatMessage.getMessage()), room);
				break;
		}
	}

	private void handleGameMessage(final String message, final Room room)
	{
		if (message.contains("Congratulations, you've just advanced"))
		{
			if (config.levelUpEnabled())
			{
				startAction();
				hueHelper.performFireWorks(room, stopAction());
			}
		}
		else if (client.getLocalPlayer().getName() != null && message.contains(client.getLocalPlayer().getName()))
		{
			if (message.contains("Enhanced crystal weapon seed"))
			{
				startAction();
				hueHelper.setColorForDuration(room, config.cgEnhanced(), Duration.ofSeconds(5), stopAction());
			}
			else if (message.contains("Crystal armour seed"))
			{
				startAction();
				hueHelper.setColorForDuration(room, config.cgArmour(), Duration.ofSeconds(5), stopAction());
			}
		}
	}

	private void handleFriendsChatNotification(final String message, final Room room)
	{
		if (message.contains("Special loot"))
		{
			if(client.getLocalPlayer().getName() != null && message.contains(client.getLocalPlayer().getName()))
			{
				startAction();
				hueHelper.setColorForDuration(room, config.coxColor(), Duration.ofSeconds(15), stopAction());
			} else
			{
				if(config.coxShowOthersPurple())
				{
					startAction();
					hueHelper.setColorForDuration(room, config.coxOthersColor(), Duration.ofSeconds(15), stopAction());
				}
			}
		}
	}

	private void startAction()
	{
		active = true;
	}

	private Runnable stopAction()
	{
		return () -> active = false;
	}
}

package com.hueambiance.overrides;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.hueambiance.AmbianceOverride;
import com.hueambiance.HueAmbianceConfig;
import com.hueambiance.helpers.HueHelper;
import io.github.zeroone3010.yahueapi.Room;
import java.awt.Color;
import java.util.Map;
import java.util.Set;
import javax.inject.Inject;
import javax.inject.Singleton;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import static net.runelite.api.NpcID.ZULRAH;
import static net.runelite.api.NpcID.ZULRAH_2043;
import static net.runelite.api.NpcID.ZULRAH_2044;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.NpcChanged;
import net.runelite.api.events.NpcSpawned;

@Singleton
public class ZulrahOverride implements AmbianceOverride
{
	private static final Set<Integer> ZULRAH_REGIONS = ImmutableSet.of(9007, 9008);
	private static final Map<Integer, Color> ZULRAH_COLORS = ImmutableMap.of(
		ZULRAH, Color.GREEN,
		ZULRAH_2043, Color.RED,
		ZULRAH_2044, Color.CYAN
	);

	@Inject
	private Client client;

	@Inject
	private HueAmbianceConfig config;

	@Inject
	private HueHelper hueHelper;

	@Override
	public boolean doesOverride(final Room room)
	{
		return config.zulrahEnabled() && atZulrah();
	}

	@Override
	public void handleNpcSpawned(final NpcSpawned npcSpawned, final Room room)
	{
		if (config.zulrahEnabled())
		{
			final NPC npc = npcSpawned.getNpc();
			if (ZULRAH == npc.getId())
			{
				hueHelper.setColor(room, ZULRAH_COLORS.get(ZULRAH));
			}
		}
	}

	@Override
	public void handleNpcChanged(final NpcChanged npcChanged, final Room room)
	{
		if (config.zulrahEnabled())
		{
			if (ZULRAH_COLORS.containsKey(npcChanged.getNpc().getId()))
			{
				hueHelper.setColor(room, ZULRAH_COLORS.get(npcChanged.getNpc().getId()));
			}
		}
	}

	private boolean atZulrah()
	{
		return client.isInInstancedRegion() &&
			ZULRAH_REGIONS.contains(WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation()).getRegionID());
	}
}

package com.hueambiance.overrides;

import com.hueambiance.AmbianceOverride;
import com.hueambiance.HueAmbianceConfig;
import com.hueambiance.helpers.HueHelper;
import io.github.zeroone3010.yahueapi.Room;
import net.runelite.api.Client;
import net.runelite.api.events.GameObjectSpawned;
import javax.inject.Inject;
import javax.inject.Singleton;
import java.time.Duration;
import java.util.Arrays;
import java.util.List;

@Singleton
public class TobOverride implements AmbianceOverride {

    private static final List<Integer> REWARD_CHEST_IDS = Arrays.asList(33086, 33087, 33088, 33089, 33090);
    private static final int OWN_TOB_PURPLE_CHEST = 32993;
    private static final int OTHER_TOB_PURPLE_CHEST = 32991;

    private boolean active = false;

    @Inject
    private Client client;

    @Inject
    private HueAmbianceConfig config;

    @Inject
    private HueHelper hueHelper;

    @Override
    public boolean doesOverride(final Room room)
    {
        return active;
    }

    @Override
    public void handleGameObjectSpawned(final GameObjectSpawned event, final Room room)
    {
        final int objId = event.getGameObject().getId();
        if (REWARD_CHEST_IDS.contains(objId))
        {
            final int impostorId = client.getObjectDefinition(objId).getImpostor().getId();

            if (impostorId == OWN_TOB_PURPLE_CHEST)
            {
                active = true;
                hueHelper.setColorForDuration(room, config.tobColor(), Duration.ofSeconds(15), () -> active = false);
            }
            else if (impostorId == OTHER_TOB_PURPLE_CHEST)
            {
                if (config.tobShowOthersPurple())
                {
                    active = true;
                    hueHelper.setColorForDuration(room, config.tobOthersColor(), Duration.ofSeconds(15), () -> active = false);
                }
            }
        }
    }
}

package com.hueambiance;

import com.google.inject.Inject;
import com.google.inject.Provides;
import com.hueambiance.helpers.HueHelper;
import com.hueambiance.overrides.AmbianceOverrides;
import io.github.zeroone3010.yahueapi.Hue;
import io.github.zeroone3010.yahueapi.Room;
import java.awt.Color;
import java.util.Optional;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.CommandExecuted;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemSpawned;
import net.runelite.api.events.NpcChanged;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

@Slf4j
@PluginDescriptor(
	name = "Hue Ambiance"
)
public class HueAmbiancePlugin extends Plugin
{
	@Inject
	private Client client;
	@Inject
	private HueAmbianceConfig config;
	@Inject
	private AmbianceOverrides ambianceOverrides;
	@Inject
	private HueHelper hueHelper;

	private Hue hue;
	private Optional<Room> room = Optional.empty();
	private long lastSkyboxUpdate;
	private boolean colorChanged = false;

	private static final long NANO_SECOND_MULTIPLIER = 1_000_000L;

	@Override
	protected void startUp()
	{
		initHue();
	}

	@Override
	protected void shutDown()
	{
		hue = null;
		room = Optional.empty();
	}

	@Subscribe
	public void onGameTick(final GameTick tick)
	{
		room.ifPresent(r -> {
			final Optional<AmbianceOverride> override = ambianceOverrides.getAll().stream().filter(o -> o.doesOverride(r)).findFirst();
			if (override.isPresent())
			{
				override.get().handleGameTick(tick, r);
				colorChanged = true;
			}
			else
			{
				updateSkybox();
			}
		});
	}

	private void updateSkybox()
	{
		room.ifPresent(r -> {
			final long skyboxRefreshRate = config.skyboxRefreshRate();
			if (skyboxRefreshRate > 0)
			{
				colorChanged = true;
				if (System.nanoTime() - lastSkyboxUpdate > (skyboxRefreshRate * NANO_SECOND_MULTIPLIER))
				{
					lastSkyboxUpdate = System.nanoTime();
					final int skyboxColor = client.getSkyboxColor();
					hueHelper.setColor(r, new Color(skyboxColor));
				}
			}
			else
			{
				if (colorChanged)
				{
					setDefaultHueColor();
				}
			}
		});

	}

	@Subscribe
	public void onNpcSpawned(final NpcSpawned npcSpawned)
	{
		room.ifPresent(r -> ambianceOverrides.getAll().stream()
			.filter(o -> o.doesOverride(r))
			.findFirst()
			.ifPresent(override -> override.handleNpcSpawned(npcSpawned, r)));
	}

	@Subscribe
	public void onNpcChanged(final NpcChanged npcChanged)
	{
		room.ifPresent(r -> ambianceOverrides.getAll().stream()
			.filter(o -> o.doesOverride(r))
			.findFirst()
			.ifPresent(override -> override.handleNpcChanged(npcChanged, r)));
	}

	@Subscribe
	public void onChatMessage(final ChatMessage chatMessage)
	{
		room.ifPresent(r -> ambianceOverrides.getAll().forEach(override -> override.handleChatMessage(chatMessage, r)));
	}

	@Subscribe
	public void onItemSpawned(final ItemSpawned itemSpawned)
	{
		room.ifPresent(r -> ambianceOverrides.getAll().forEach(override -> override.handleItemSpawned(itemSpawned, r)));
	}

	@Subscribe
	public void onGameObjectSpawned(final GameObjectSpawned gameObjectSpawned)
	{
		room.ifPresent(r -> ambianceOverrides.getAll().forEach(override -> override.handleGameObjectSpawned(gameObjectSpawned, r)));
	}

	@Subscribe
	public void onConfigChanged(final ConfigChanged configChanged)
	{
		final String key = configChanged.getKey();
		switch (key)
		{
			case "ip":
			case "token":
				initHue();
				break;
			case "room":
				initRoom();
				break;
			case "defaultColor":
			case "brightness":
				colorChanged = true;
				break;
		}
	}

	@Subscribe
	public void onCommandExecuted(CommandExecuted commandExecuted)
	{
		if (commandExecuted.getCommand().equals("testlights"))
		{
			if (room.isPresent())
			{
				client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Your smart lights are currently connected.", "");
			}
			else
			{
				client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Your smart lights are not connected.", "");

			}
		}
	}

	@Provides
	HueAmbianceConfig provideConfig(final ConfigManager configManager)
	{
		return configManager.getConfig(HueAmbianceConfig.class);
	}

	private void initHue()
	{
		if (config.bridgeIp() != null && config.bridgeToken() != null)
		{
			hue = new Hue(config.bridgeIp(), config.bridgeToken());
			initRoom();
		}
	}

	private void initRoom()
	{
		if (config.room() != null)
		{
			room = hue.getRoomByName(config.room());
			setDefaultHueColor();
		}
	}

	private void setDefaultHueColor()
	{
		colorChanged = false;
		room.ifPresent(r -> hueHelper.setColor(r, config.defaultHueColor()));
	}
}

package com.hueambiance;

import io.github.zeroone3010.yahueapi.Room;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemSpawned;
import net.runelite.api.events.NpcChanged;
import net.runelite.api.events.NpcSpawned;

public interface AmbianceOverride
{
	boolean doesOverride(final Room room);

	default void handleGameTick(final GameTick gameTick, final Room room)
	{
	}

	default void handleNpcSpawned(final NpcSpawned npcSpawned, final Room room)
	{
	}

	default void handleNpcChanged(final NpcChanged npcChanged, final Room room)
	{
	}

	default void handleChatMessage(final ChatMessage chatMessage, final Room room)
	{
	}

	default void handleItemSpawned(final ItemSpawned itemSpawned, final Room room)
	{
	}

	default void handleGameObjectSpawned(final GameObjectSpawned gameObjectSpawned, final Room room)
	{
	}
}

