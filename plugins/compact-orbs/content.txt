/*
 * Copyright (c) 2025, cue <https://github.com/its-cue>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.compactorbs.util;

import lombok.Getter;

@Getter
public class SetValue
{
	private final Integer original;
	private final Integer[] modified;

	public SetValue(Integer original, Integer... modified)
	{
		this.original = original;
		this.modified = modified;
	}

	//same function as before, but should allow for multiple 'modified sets' (original, mod_vertical, mod_horizontal, etc) instead of just 1
	public Integer get(boolean modify, int index)
	{
		if (!modify || original == null)
		{
			return original;
		}

		if (modified != null && modified.length > 0)
		{
			if (index >= 0 && index < modified.length && modified[index] != null)
			{
				return modified[index];
			}
			return modified[0];
		}

		return original;
	}

}

/*
 * Copyright (c) 2025, cue <https://github.com/its-cue>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.compactorbs.util;

public enum ValueKey
{
	X,
	Y,
	X_POSITION_MODE,
	Y_POSITION_MODE
}

/*
 * Copyright (c) 2025, cue <https://github.com/its-cue>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.compactorbs;

import static com.compactorbs.CompactOrbsConfig.GROUP_NAME;
import com.compactorbs.widget.WidgetManager;
import com.compactorbs.widget.elements.Compass;
import com.compactorbs.widget.elements.Minimap;
import com.compactorbs.widget.elements.Orbs;
import java.awt.Color;
import java.util.List;
import java.util.function.Supplier;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.gameval.SpriteID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.util.ColorUtil;

@Slf4j
public class CompactOrbsManager
{
	@Inject
	private Client client;

	@Inject
	private ConfigManager configManager;

	@Inject
	private CompactOrbsConfig config;

	@Inject
	private WidgetManager widgetManager;

	private int lastParentId = -1;

	public static final int FORCE_REMAP = -1;

	public boolean isNativelyHidden;

	private boolean resetFixedOrbs = false;

	public static final int ORBS_UPDATE_WORLD_MAP = 1699;
	public static final int ORBS_UPDATE_STORE = 2396;
	public static final int ORBS_UPDATE_ACTIVITY_ADVISOR = 2480;
	public static final int WIKI_ICON_UPDATE = 3305;

	//temp game mode
	public static final int ORBS_UPDATE_GRID_MASTER = 8222;

	private static final int COMPASS_FRAME_SPRITE_ID = 5813;

	public static final int TOP_LEVEL_MINIMAP_CHILD = 33;

	public static final int COMPASS_X = 126;
	public static final int COMPASS_Y = 18;

	private Widget mapButton = null;
	private Widget mapMenu = null;
	private Widget compassButton = null;
	private Widget compassMenu = null;
	private Widget compassFrame = null;

	private static final String MINIMAP_CONFIG_KEY = "hideMinimap";
	private static final String COMPASS_CONFIG_KEY = "hideCompass";

	private static final Color MENU_COLOR = new Color(0xFF9040);

	public void init(int scriptId)
	{
		//revert changes made when in, or switching to, fixed mode
		if (!client.isResized())
		{
			if (!resetFixedOrbs)
			{
				//reset only the required orbs when toggling to fixed mode display
				widgetManager.remapTargets(Orbs.FIXED, false, FORCE_REMAP);
				resetFixedOrbs = true;
			}
			return;
		}
		resetFixedOrbs = false;

		build(scriptId);
	}

	public void build(int scriptId)
	{
		if (!client.isResized())
		{
			return;
		}

		if (scriptId == FORCE_REMAP)
		{
			createCustomChildren();

			widgetManager.setTargetsHidden(isMinimapHidden(), Minimap.values());
			widgetManager.setTargetsHidden((isMinimapHidden() && isCompassHidden()), Compass.values());
			widgetManager.remapTargets(Compass.ALL, isMinimapHidden(), FORCE_REMAP);
			widgetManager.remapTargets(Orbs.ALL, isMinimapHidden(), FORCE_REMAP);

			updateCustomChildren();
		}
		else
		{
			widgetManager.remapTargets(Orbs.ALL, isMinimapHidden(), scriptId);
		}
	}

	public void reset()
	{
		resetFixedOrbs = false;

		clearCustomChildren();

		if (isMinimapHidden())
		{
			widgetManager.setTargetsHidden(false, Minimap.values());

			if (isCompassHidden())
			{
				widgetManager.setTargetsHidden(false, Compass.values());
			}

			widgetManager.remapTargets(Compass.ALL, false, FORCE_REMAP);
		}

		widgetManager.remapTargets((client.isResized() ? Orbs.ALL : Orbs.FIXED), false, FORCE_REMAP);
	}

	private void onMinimapToggle()
	{
		boolean toggle = !isMinimapHidden();
		boolean remapCondition = toggle && !isCompassHidden();
		boolean hiddenCondition = toggle && isCompassHidden();
		executeToggle(
			config::hideMinimap, MINIMAP_CONFIG_KEY,
			() -> widgetManager.setTargetsHidden(toggle, Minimap.values()),
			() -> widgetManager.remapTargets(Compass.ALL, remapCondition, FORCE_REMAP),
			() -> widgetManager.setTargetsHidden(hiddenCondition, Compass.values()),
			() -> widgetManager.remapTargets(Orbs.ALL, toggle, FORCE_REMAP),
			this::updateCustomChildren
		);
	}

	private void onCompassToggle()
	{
		boolean toggle = !isCompassHidden();
		boolean remapCondition = toggle || isMinimapHidden();
		executeToggle(
			config::hideCompass, COMPASS_CONFIG_KEY,
			() -> widgetManager.remapTargets(Compass.ALL, remapCondition, FORCE_REMAP),
			() -> widgetManager.setTargetsHidden(toggle, Compass.values()),
			this::updateCustomChildren
		);
	}

	private void executeToggle(Supplier<Boolean> getter, String key, Runnable... actions)
	{
		configManager.setConfiguration(GROUP_NAME, key, !Boolean.TRUE.equals(getter.get()));

		for (Runnable action : actions)
		{
			action.run();
		}
	}

	void createCustomChildren()
	{
		Widget parent = widgetManager.getCurrentParent();

		if (parent == null)
		{
			clearCustomChildren();
			lastParentId = -1;
			return;
		}

		if (parent.getId() != lastParentId)
		{
			clearCustomChildren();
			lastParentId = parent.getId();
		}

		//if 1 exists, all --should-- exist
		if (!widgetManager.isMissing(compassFrame, parent))
		{
			return;
		}

		final int MINIMAP_BUTTON_X = 190;
		final int MINIMAP_BUTTON_Y = 180;
		final int COMPASS_BUTTON_X = 156;
		final int COMPASS_BUTTON_Y = 32;
		final int BUTTON_SIZE = 17;
		final int COMPASS_FRAME_SIZE = 43;
		final int OPACITY_DEFAULT = 0;
		final int OPACITY_HOVERED = 160;
		final int OFFSET_X = 4;
		final int OFFSET_Y = 14;

		compassFrame = widgetManager.createGraphic(
			parent,
			COMPASS_X - OFFSET_X, COMPASS_Y - OFFSET_Y,
			COMPASS_FRAME_SIZE, COMPASS_FRAME_SIZE,
			OPACITY_DEFAULT,
			config.hideToggle(),
			COMPASS_FRAME_SPRITE_ID
		);

		mapButton = widgetManager.createGraphic(
			parent,
			MINIMAP_BUTTON_X, MINIMAP_BUTTON_Y,
			BUTTON_SIZE, BUTTON_SIZE,
			OPACITY_DEFAULT,
			config.hideToggle(),
			getSpriteId(isMinimapHidden())
		);

		mapMenu = widgetManager.createMenu(
			parent,
			MINIMAP_BUTTON_X, MINIMAP_BUTTON_Y,
			config.hideToggle(),
			getMenuOption(MINIMAP_CONFIG_KEY),
			e -> onMinimapToggle(),
			e -> mapButton.setOpacity(OPACITY_HOVERED),
			e -> mapButton.setOpacity(OPACITY_DEFAULT)
		);

		compassButton = widgetManager.createGraphic(
			parent,
			COMPASS_BUTTON_X, COMPASS_BUTTON_Y,
			BUTTON_SIZE, BUTTON_SIZE,
			OPACITY_DEFAULT,
			config.hideToggle(),
			getSpriteId(isCompassHidden())
		);

		compassMenu = widgetManager.createMenu(
			parent,
			COMPASS_BUTTON_X, COMPASS_BUTTON_Y,
			config.hideToggle(),
			getMenuOption(COMPASS_CONFIG_KEY),
			e -> onCompassToggle(),
			e -> compassButton.setOpacity(OPACITY_HOVERED),
			e -> compassButton.setOpacity(OPACITY_DEFAULT)
		);

	}

	public void updateCustomChildren()
	{
		boolean hideFrame = !isMinimapHidden() || isCompassHidden() || isNativelyHidden;
		boolean hideToggle = config.hideToggle() || isNativelyHidden;

		if (isNativelyHidden)
		{
			//put logout button back when switching to native hiding
			widgetManager.remapTargets(List.of(Orbs.LOGOUT_X_ICON_CONTAINER, Orbs.LOGOUT_X_STONE_CONTAINER), false, FORCE_REMAP);
		}

		if (compassFrame != null)
		{
			compassFrame.setHidden(hideFrame);
		}

		if (mapButton != null)
		{
			mapButton.setSpriteId(getSpriteId(!isMinimapHidden()));
			mapButton.setHidden(hideToggle);

			if (mapMenu != null)
			{
				mapMenu.setAction(0, getMenuOption(MINIMAP_CONFIG_KEY));
				mapMenu.setHidden(hideToggle);
			}
		}

		if (compassButton != null)
		{
			compassButton.setSpriteId(getSpriteId(!isCompassHidden()));
			compassButton.setHidden(hideToggle || !isMinimapHidden());

			if (compassMenu != null)
			{
				compassMenu.setAction(0, getMenuOption(COMPASS_CONFIG_KEY));
				compassMenu.setHidden(hideToggle || !isMinimapHidden());
			}
		}
	}

	public void clearCustomChildren()
	{
		//modern
		widgetManager.clearChildren(InterfaceID.TOPLEVEL_PRE_EOC, TOP_LEVEL_MINIMAP_CHILD);

		//classic
		widgetManager.clearChildren(InterfaceID.TOPLEVEL_OSRS_STRETCH, TOP_LEVEL_MINIMAP_CHILD);

		lastParentId = -1;

		mapButton = null;
		mapMenu = null;
		compassButton = null;
		compassMenu = null;
		compassFrame = null;
	}

	//sprites mirror config state (visible = eye, hidden = crossed eye)
	private int getSpriteId(boolean toggle)
	{
		return !toggle ? SpriteID.GroundItemsVisibility._1 : SpriteID.GroundItemsVisibility._0;
	}

	private String getMenuOption(String key)
	{
		final boolean isMinimap = MINIMAP_CONFIG_KEY.equals(key);
		final boolean isHidden = isMinimap ? isMinimapHidden() : isCompassHidden();

		String target = isMinimap ? "Minimap" : "Compass";
		String action = isHidden ? "Show" : "Hide";

		return action + " " + ColorUtil.wrapWithColorTag(target, MENU_COLOR);
	}

	public boolean isMinimapHidden()
	{
		return config.hideMinimap();
	}

	public boolean isCompassHidden()
	{
		return config.hideCompass();
	}

}

/*
 * Copyright (c) 2025, cue <https://github.com/its-cue>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.compactorbs;

import static com.compactorbs.CompactOrbsManager.FORCE_REMAP;
import static com.compactorbs.CompactOrbsManager.ORBS_UPDATE_ACTIVITY_ADVISOR;
import static com.compactorbs.CompactOrbsManager.ORBS_UPDATE_GRID_MASTER;
import static com.compactorbs.CompactOrbsManager.ORBS_UPDATE_STORE;
import static com.compactorbs.CompactOrbsManager.ORBS_UPDATE_WORLD_MAP;
import static com.compactorbs.CompactOrbsManager.WIKI_ICON_UPDATE;
import com.google.inject.Provides;
import java.util.Set;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.ScriptPostFired;
import net.runelite.api.events.VarbitChanged;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.gameval.VarbitID;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.HotkeyListener;

@PluginDescriptor(
	name = "Compact Orbs",
	description = "Collapse the minimap orbs into a compact view.",
	tags = {"compact", "orbs", "hide", "minimap", "resizable", "classic", "modern"},
	conflicts = {"Fixed Resizable Hybrid"}
)
public class CompactOrbsPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private CompactOrbsConfig config;

	@Inject
	private CompactOrbsManager manager;

	@Inject
	private ConfigManager configManager;

	@Inject
	private KeyManager keyManager;

	private static final Set<Integer> MINIMAP_UPDATE_SCRIPTS =
		Set.of(
			ORBS_UPDATE_WORLD_MAP,
			ORBS_UPDATE_STORE,
			ORBS_UPDATE_ACTIVITY_ADVISOR,
			WIKI_ICON_UPDATE,
			ORBS_UPDATE_GRID_MASTER //temp game mode
		);

	@Override
	protected void startUp() throws Exception
	{
		keyManager.registerKeyListener(hotkeyListener);

		if(client.getGameState() == GameState.LOGGED_IN)
		{
			clientThread.invoke(() -> manager.isNativelyHidden = client.getVarbitValue(VarbitID.MINIMAP_TOGGLE) == 1);
			clientThread.invokeLater(() -> manager.init(FORCE_REMAP));
		}
	}

	@Override
	protected void shutDown() throws Exception
	{
		clientThread.invoke(manager::reset);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		if (client.getGameState() == GameState.LOGGED_IN)
		{
			manager.createCustomChildren();
		}
	}

	@Subscribe
	public void onScriptPostFired(ScriptPostFired event)
	{
		int scriptId = event.getScriptId();

		if (!MINIMAP_UPDATE_SCRIPTS.contains(scriptId) || manager.isNativelyHidden)
		{
			return;
		}

		manager.init(scriptId);
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		if(event.getVarbitId() == VarbitID.MINIMAP_TOGGLE)
		{
			//hide custom buttons when native minimap hiding is active
			manager.isNativelyHidden = event.getValue() == 1;
			manager.updateCustomChildren();
		}
	}

	@Subscribe
	public void onWidgetLoaded(WidgetLoaded event)
	{
		if (event.getGroupId() == InterfaceID.ORBS ||
			event.getGroupId() == InterfaceID.TOPLEVEL_OSRS_STRETCH ||
			event.getGroupId() == InterfaceID.TOPLEVEL_PRE_EOC)
		{
			manager.init(FORCE_REMAP);
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (event.getGroup().equals(CompactOrbsConfig.GROUP_NAME))
		{
			switch (event.getKey())
			{
				case "hideToggle":
				case "hotkeyToggle":
					clientThread.invokeLater(manager::updateCustomChildren);
					break;

				default:
					break;
			}
		}
	}

	private final HotkeyListener hotkeyListener = new HotkeyListener(() -> config.toggleButtonHotkey())
	{
		@Override
		public void hotkeyPressed()
		{
			configManager.setConfiguration(CompactOrbsConfig.GROUP_NAME, "hideToggle", !Boolean.TRUE.equals(config.hideToggle()));
		}
	};

	@Provides
	CompactOrbsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(CompactOrbsConfig.class);
	}
}

/*
 * Copyright (c) 2025, cue <https://github.com/its-cue>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.compactorbs;

import java.awt.event.KeyEvent;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Keybind;

@ConfigGroup(CompactOrbsConfig.GROUP_NAME)
public interface CompactOrbsConfig extends Config
{
	String GROUP_NAME = "compactorbs";

	@ConfigItem(
		keyName = "hideMinimap",
		name = "Hide minimap",
		description = "Enable the ability to collapse the minimap, and reposition the orbs",
		hidden = true
	)
	default boolean hideMinimap()
	{
		return false;
	}

	@ConfigItem(
		keyName = "hideCompass",
		name = "Hide compass",
		description = "Enable the ability to hide the compass, only when the minimap is hidden",
		hidden = true
	)
	default boolean hideCompass()
	{
		return false;
	}

	@ConfigItem(
		keyName = "hideToggle",
		name = "Hide toggle buttons",
		description = "Enable or disable the in-game toggle buttons via config",
		position = 0
	)
	default boolean hideToggle()
	{
		return false;
	}

	@ConfigItem(
		keyName = "hotkeyToggle",
		name = "Hotkey",
		description = "Enable or disable the in-game toggle buttons via hotkey",
		position = 1
	)
	default Keybind toggleButtonHotkey()
	{
		return new Keybind(KeyEvent.VK_INSERT, KeyEvent.SHIFT_DOWN_MASK);
	}
}

/*
 * Copyright (c) 2025, cue <https://github.com/its-cue>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.compactorbs.widget;

import static com.compactorbs.CompactOrbsManager.FORCE_REMAP;
import static com.compactorbs.CompactOrbsManager.TOP_LEVEL_MINIMAP_CHILD;
import com.compactorbs.util.SetValue;
import com.compactorbs.util.ValueKey;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.widgets.JavaScriptCallback;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetType;

@Slf4j
public class WidgetManager
{
	@Inject
	private Client client;

	private boolean remapping = false;
	private final Object sync = new Object();

	public void remapTargets(Iterable<? extends TargetWidget> widgets, boolean modify, int scriptId)
	{
		synchronized (sync)
		{
			if (remapping)
			{
				return;
			}
			remapping = true;
		}

		try
		{
			for (TargetWidget target : widgets)
			{
				if (!shouldUpdateWidget(target, scriptId))
				{
					continue;
				}

				/*if (scriptId != FORCE_REMAP)
				{
					log.debug("remap : {} - [{}.{}]: {}.{}, script: {}",
						modify,
						((Enum<?>) target).getDeclaringClass().getSimpleName(),
						target,
						target.getInterfaceId(),
						target.getChildId(),
						scriptId
					);
				}*/

				remapTarget(target, modify);
			}
		}
		finally
		{
			synchronized (sync)
			{
				remapping = false;
			}
		}
	}

	public void remapTarget(TargetWidget target, boolean modify)
	{
		Widget widget = getTargetWidget(target);
		if (widget == null)
		{
			return;
		}

		target.getPositions().forEach((type, value) -> setValue(widget, type, value, modify));
		widget.revalidate();
	}

	private boolean shouldUpdateWidget(TargetWidget target, int scriptId)
	{
		return (scriptId == FORCE_REMAP) || target.getScriptId() == scriptId;
	}

	private void setValue(Widget widget, ValueKey type, SetValue value, boolean modify)
	{
		if (value == null)
		{
			return;
		}

		Integer v = value.get(modify, 0);//TODO
		if (v == null)
		{
			return;
		}

		switch (type)
		{
			case X:
				updateValue(widget::getOriginalX, widget::setOriginalX, v);
				break;
			case Y:
				updateValue(widget::getOriginalY, widget::setOriginalY, v);
				break;
			case X_POSITION_MODE:
				updateValue(widget::getXPositionMode, widget::setXPositionMode, v);
				break;
		}
	}

	private void updateValue(IntSupplier getter, IntConsumer setter, int value)
	{
		if (getter.getAsInt() != value)
		{
			setter.accept(value);
		}
	}

	public void setTargetsHidden(boolean hidden, TargetWidget... widgets)
	{
		for (TargetWidget target : widgets)
		{
			setHidden(target, hidden);
		}
	}

	public void setHidden(TargetWidget target, boolean hidden)
	{
		Widget widget = getTargetWidget(target);
		if (widget == null)
		{
			return;
		}

		if (hidden != widget.isHidden())
		{
			widget.setHidden(hidden);
			//log.debug("widget : {}.{}, hidden: {}.{}",
			// target.getInterfaceId(), target.getChildId(), widget.isHidden(), hidden);

			//compass menu options
			if (widget.getChildren() != null)
			{
				for (Widget child : widget.getChildren())
				{
					if (child != null)
					{
						child.setHidden(hidden);
						//log.debug("child : {}.{}[{}], hidden: {}",
						// target.getInterfaceId(), target.getChildId(), child.getIndex(), hidden);
					}
				}
			}
		}
	}

	public Widget getTargetWidget(TargetWidget target)
	{
		Widget widget = client.getWidget(target.getInterfaceId(), target.getChildId());
		if (widget == null)
		{
			return null;
		}
		return (target.getArrayId() != -1 ? widget.getChild(target.getArrayId()) : widget);
	}

	public Widget getCurrentParent()
	{
		Widget modern = client.getWidget(InterfaceID.TOPLEVEL_PRE_EOC, TOP_LEVEL_MINIMAP_CHILD);
		if (modern != null && !modern.isHidden())
		{
			return modern;
		}

		Widget classic = client.getWidget(InterfaceID.TOPLEVEL_OSRS_STRETCH, TOP_LEVEL_MINIMAP_CHILD);
		if (classic != null && !classic.isHidden())
		{
			return classic;
		}

		return null;
	}

	public void clearChildren(int interfaceId, int childId)
	{
		Widget widget = client.getWidget(interfaceId, childId);
		if (widget != null)
		{
			//start at index 1, in case the widget inspector is open?
			Widget child = widget.getChild(1);
			if (child != null)
			{
				widget.deleteAllChildren();
			}
		}
	}

	public boolean isMissing(Widget child, Widget parent)
	{
		return child == null || child.getParentId() != parent.getId();
	}

	public Widget createGraphic(
		Widget parent,
		int x, int y,
		int width, int height,
		int opacity,
		boolean hidden,
		int spriteId)
	{
		Widget child = parent.createChild(-1, WidgetType.GRAPHIC);
		child
			.setOriginalX(x)
			.setOriginalY(y)
			.setOriginalWidth(width)
			.setOriginalHeight(height)
			.setOpacity(opacity)
			.setHidden(hidden)
			.setSpriteId(spriteId)
			.revalidate();

		return child;
	}

	public Widget createMenu(
		Widget parent,
		int x, int y,
		boolean hidden,
		String menuOp,
		JavaScriptCallback opListener,
		JavaScriptCallback mouseOver,
		JavaScriptCallback mouseLeave)
	{
		Widget child = parent.createChild(-1, WidgetType.GRAPHIC);
		child
			.setOriginalX(x)
			.setOriginalY(y)
			.setOriginalWidth(16)
			.setOriginalHeight(16)
			.setHasListener(true)
			.setHidden(hidden)
			.setAction(0, menuOp);

		child.setNoClickThrough(true);
		if (opListener != null)
		{
			child.setOnOpListener(opListener);
		}
		if (mouseOver != null)
		{
			child.setOnMouseOverListener(mouseOver);
		}
		if (mouseLeave != null)
		{
			child.setOnMouseLeaveListener(mouseLeave);
		}
		child.revalidate();

		return child;
	}
}

/*
 * Copyright (c) 2025, cue <https://github.com/its-cue>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.compactorbs.widget;

import com.compactorbs.util.SetValue;
import com.compactorbs.util.ValueKey;
import java.util.Map;

public interface TargetWidget
{
	int getInterfaceId();

	int getChildId();

	int getArrayId();

	int getScriptId();

	default Map<ValueKey, SetValue> getPositions()
	{
		return Map.of();
	}
}

/*
 * Copyright (c) 2025, cue <https://github.com/its-cue>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.compactorbs.widget.elements;

import static com.compactorbs.CompactOrbsManager.FORCE_REMAP;
import static com.compactorbs.CompactOrbsManager.ORBS_UPDATE_ACTIVITY_ADVISOR;
import static com.compactorbs.CompactOrbsManager.ORBS_UPDATE_GRID_MASTER;
import static com.compactorbs.CompactOrbsManager.ORBS_UPDATE_STORE;
import static com.compactorbs.CompactOrbsManager.ORBS_UPDATE_WORLD_MAP;
import static com.compactorbs.CompactOrbsManager.WIKI_ICON_UPDATE;
import com.compactorbs.util.SetValue;
import com.compactorbs.util.ValueKey;
import static com.compactorbs.util.ValueKey.X;
import static com.compactorbs.util.ValueKey.X_POSITION_MODE;
import static com.compactorbs.util.ValueKey.Y;
import com.compactorbs.widget.TargetWidget;
import java.util.EnumSet;
import java.util.Map;
import java.util.Set;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.gameval.InterfaceID;

@Getter
@RequiredArgsConstructor
public enum Orbs implements TargetWidget
{

	XP_DROPS_CONTAINER(
		InterfaceID.ORBS, 6, -1,
		FORCE_REMAP,
		Map.of(
			X, new SetValue(0, 112),
			Y, new SetValue(17, 44)
		)
	),
	HP_ORB_CONTAINER(
		InterfaceID.ORBS, 7, -1,
		FORCE_REMAP,
		Map.of(
			X, new SetValue(0, 150),
			Y, new SetValue(37, 42)
		)
	),
	PRAYER_ORB_CONTAINER(
		InterfaceID.ORBS, 18, -1,
		FORCE_REMAP,
		Map.of(
			X, new SetValue(0, 150),
			Y, new SetValue(71, 76)
		)
	),
	RUN_ORB_CONTAINER(
		InterfaceID.ORBS, 26, -1,
		FORCE_REMAP,
		Map.of(
			X, new SetValue(10, 150),
			Y, new SetValue(103, 110)
		)
	),
	SPEC_ORB_CONTAINER(
		InterfaceID.ORBS, 34, -1,
		FORCE_REMAP,
		Map.of(
			X, new SetValue(32, 150),
			Y, new SetValue(128, 144)
		)
	),
	STORE_ORB_CONTAINER(
		InterfaceID.ORBS, 43, -1,
		ORBS_UPDATE_STORE,
		Map.of(
			X, new SetValue(85, 109),
			Y, new SetValue(143, 105)
		)
	),
	ACTIVITY_ORB_CONTAINER(
		InterfaceID.ORBS, 48, -1,
		ORBS_UPDATE_ACTIVITY_ADVISOR,
		Map.of(
			X, new SetValue(55, 109),
			Y, new SetValue(162, 139)
		)
	),
	WORLD_MAP_CONTAINER(
		InterfaceID.ORBS, 49, -1,
		ORBS_UPDATE_WORLD_MAP,
		Map.of(
			X, new SetValue(0, 111),
			Y, new SetValue(115, 72),
			X_POSITION_MODE, new SetValue(2, 0)
		)
	),
	WIKI_CONTAINER(
		InterfaceID.ORBS, 50, -1,
		WIKI_ICON_UPDATE,
		Map.of(
			X, new SetValue(0, 148),
			Y, new SetValue(135, 172),
			X_POSITION_MODE, new SetValue(2, 0)
		)
	),
	LOGOUT_X_ICON_CONTAINER(
		InterfaceID.TOPLEVEL_PRE_EOC, 35, -1,
		FORCE_REMAP,
		Map.of(
			X, new SetValue(2, 177),
			Y, new SetValue(2, 16),
			X_POSITION_MODE, new SetValue(2, 0)
		)
	),
	LOGOUT_X_STONE_CONTAINER(
		InterfaceID.TOPLEVEL_PRE_EOC, 34, -1,
		FORCE_REMAP,
		Map.of(
			X, new SetValue(2, 177),
			Y, new SetValue(2, 16),
			X_POSITION_MODE, new SetValue(2, 0)
		)
	),
	//temp game mode
	GRID_MASTER_CONTAINER(
		InterfaceID.ORBS, 0, 0,
		ORBS_UPDATE_GRID_MASTER,
		Map.of(
			X, new SetValue(55, 109),
			Y, new SetValue(162, 139)
		)
	)

	;

	private final int interfaceId, childId, arrayId, scriptId;

	private final Map<ValueKey, SetValue> positions;

	// exclude: store, world_map, activity advisor, logout_x_icon, logout_x_stone, wiki
	public static final Set<Orbs> FIXED = EnumSet.of(
		HP_ORB_CONTAINER,
		PRAYER_ORB_CONTAINER,
		RUN_ORB_CONTAINER,
		SPEC_ORB_CONTAINER,
		XP_DROPS_CONTAINER
	);

	public static final Set<Orbs> ALL = EnumSet.allOf(Orbs.class);

}

/*
 * Copyright (c) 2025, cue <https://github.com/its-cue>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.compactorbs.widget.elements;

import static com.compactorbs.CompactOrbsManager.COMPASS_X;
import static com.compactorbs.CompactOrbsManager.COMPASS_Y;
import com.compactorbs.util.SetValue;
import com.compactorbs.util.ValueKey;
import static com.compactorbs.util.ValueKey.X;
import static com.compactorbs.util.ValueKey.Y;
import com.compactorbs.widget.TargetWidget;
import java.util.EnumSet;
import java.util.Map;
import java.util.Set;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.gameval.InterfaceID;

@Getter
@RequiredArgsConstructor
public enum Compass implements TargetWidget
{
	//classic resizable
	CLASSIC_COMPASS(
		InterfaceID.TOPLEVEL_OSRS_STRETCH, 29,
		Map.of(
			X, new SetValue(34, COMPASS_X),
			Y, new SetValue(5, COMPASS_Y)
		)
	),
	CLASSIC_COMPASS_CONTAINER(
		InterfaceID.TOPLEVEL_OSRS_STRETCH, 31,
		Map.of(
			X, new SetValue(32, COMPASS_X - 2),
			Y, new SetValue(3, COMPASS_Y - 2)
		)
	),

	//modern resizable
	MODERN_COMPASS(
		InterfaceID.TOPLEVEL_PRE_EOC, 29,
		Map.of(
			X, new SetValue(34, COMPASS_X),
			Y, new SetValue(5, COMPASS_Y)
		)
	),
	MODERN_COMPASS_CONTAINER(
		InterfaceID.TOPLEVEL_PRE_EOC, 31,
		Map.of(
			X, new SetValue(32, COMPASS_X - 2),
			Y, new SetValue(3, COMPASS_Y - 2)
		)
	);

	private final int interfaceId, childId, arrayId = -1, scriptId = -1;

	private final Map<ValueKey, SetValue> positions;

	public static final Set<Compass> ALL = EnumSet.allOf(Compass.class);

}

/*
 * Copyright (c) 2025, cue <https://github.com/its-cue>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.compactorbs.widget.elements;

import com.compactorbs.widget.TargetWidget;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.gameval.InterfaceID;

@Getter
@RequiredArgsConstructor
public enum Minimap implements TargetWidget
{
	//classic_resizable
	CLASSIC_NO_CLICK_0(InterfaceID.TOPLEVEL_OSRS_STRETCH, 23),
	CLASSIC_NO_CLICK_1(InterfaceID.TOPLEVEL_OSRS_STRETCH, 24),
	CLASSIC_NO_CLICK_2(InterfaceID.TOPLEVEL_OSRS_STRETCH, 25),
	CLASSIC_NO_CLICK_3(InterfaceID.TOPLEVEL_OSRS_STRETCH, 26),
	CLASSIC_NO_CLICK_4(InterfaceID.TOPLEVEL_OSRS_STRETCH, 27),
	CLASSIC_NO_CLICK_5(InterfaceID.TOPLEVEL_OSRS_STRETCH, 28),

	CLASSIC_MINIMAP_MASK(InterfaceID.TOPLEVEL_OSRS_STRETCH, 30),
	CLASSIC_MINIMAP(InterfaceID.TOPLEVEL_OSRS_STRETCH, 32),

	//modern resizable
	MODERN_NO_CLICK_0(InterfaceID.TOPLEVEL_PRE_EOC, 23),
	MODERN_NO_CLICK_1(InterfaceID.TOPLEVEL_PRE_EOC, 24),
	MODERN_NO_CLICK_2(InterfaceID.TOPLEVEL_PRE_EOC, 25),
	MODERN_NO_CLICK_3(InterfaceID.TOPLEVEL_PRE_EOC, 26),
	MODERN_NO_CLICK_4(InterfaceID.TOPLEVEL_PRE_EOC, 27),
	MODERN_NO_CLICK_5(InterfaceID.TOPLEVEL_PRE_EOC, 28),

	MODERN_MINIMAP_MASK(InterfaceID.TOPLEVEL_PRE_EOC, 30),
	MODERN_MINIMAP(InterfaceID.TOPLEVEL_PRE_EOC, 32);

	private final int interfaceId, childId, arrayId = -1, scriptId = -1;


}

package com.compactorbs;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CompactOrbsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CompactOrbsPlugin.class);
		RuneLite.main(args);
	}
}
