package com.groupironpanel;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class GroupIronPanelPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(GroupIronPanelPlugin.class);
		RuneLite.main(args);
	}
}
package com.groupironpanel;

import com.google.inject.Provides;

import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.events.GameTick;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetID;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.hiscore.HiscoreClient;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.Text;
import okhttp3.OkHttpClient;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
@PluginDescriptor(
        name = "Group Iron Panel",
        description = "A panel that displays your Group Ironman group's skills and hiscores all in one place"
)
public class GroupIronPanelPlugin extends Plugin {
    private static final Pattern GIM_USERNAME_PATTERN = Pattern.compile("^<.*>(.*)<.*>$");

    private int autoDetectTickCooldown = 0;

    private GroupIronPanel panel;

    private NavigationButton toolbarButton;

    @Inject
    private Client client;

    @Inject
    private ScheduledExecutorService executor;

    @Inject
    private OkHttpClient okHttpClient;

    @Inject
    private ClientToolbar clientToolbar;

    @Inject
    private GroupIronPanelConfig config;

    @Inject
    private HiscoreClient hiscoreClient;

    @Provides
    GroupIronPanelConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(GroupIronPanelConfig.class);
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event) {
        if (event.getGroup().equals("groupironpanel")) {
            executor.execute(this::updatePanel);
        }
    }

    @Override
    protected void startUp() throws Exception {
        panel = new GroupIronPanel(hiscoreClient);
        final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "/GroupIron.png");
        toolbarButton = NavigationButton.builder()
                .tooltip("Group Iron")
                .icon(icon)
                .priority(5)
                .panel(panel)
                .build();

        clientToolbar.addNavigation(toolbarButton);
        updatePanel();
    }

    @Override
    protected void shutDown() throws Exception {
        clientToolbar.removeNavigation(toolbarButton);
    }

    @Subscribe
    private void onGameTick(GameTick gameTick) throws IOException {
        if (config.autoDetectGroup()) {
            // The group info won't actually change very often, so no need to spend time checking it every tick.
            if (autoDetectTickCooldown == 0) {
                tryAutoDetectGroupInformation();
                autoDetectTickCooldown = 5;
            } else if (autoDetectTickCooldown > 0) {
                autoDetectTickCooldown--;
            }
        }
    }

    /**
     * Tries to auto-detect the group name and members.
     * This will only succeed if the group ironman tab is open.
     */
    private void tryAutoDetectGroupInformation() {
        Widget groupNameContainerWidget = client.getWidget(WidgetID.GROUP_IRON_GROUP_ID, 1);
        if (groupNameContainerWidget == null) {
            return;
        }
        Widget[] groupNameWidgets = groupNameContainerWidget.getChildren();
        String groupName = null;
        if (groupNameWidgets != null) {
            for (Widget child : groupNameWidgets) {
                String widgetText = child.getText();
                if (widgetText != null && widgetText.length() > 0) {
                    groupName = widgetText;
                }
            }
        }

        Widget groupMembersContainerWidget = client.getWidget(WidgetID.GROUP_IRON_GROUP_ID, 6);
        if (groupMembersContainerWidget == null) {
            return;
        }
        Widget[] groupMemberWidgets = groupMembersContainerWidget.getChildren();
        List<String> groupMembers = new ArrayList<>();
        if (groupMemberWidgets != null) {
            for (Widget child : groupMemberWidgets) {
                String widgetName = child.getName();
                Matcher matcher = GIM_USERNAME_PATTERN.matcher(widgetName);
                if (matcher.find()) {
                    groupMembers.add(matcher.group(1));
                }
            }
        }

        if (groupName != null && !groupName.isEmpty() && groupMembers.size() > 0) {
            config.setGroupName(groupName);
            config.setGroupMembers(Text.toCSV(groupMembers));
        }
    }

    /**
     * Update the panel with the most up-to-date configuration.
     */
    private void updatePanel() {
        panel.setGroupName(config.groupName());
        panel.setGroupMembers(Text.fromCSV(config.groupMembers()));
        panel.refreshPanel();
    }
}

package com.groupironpanel;

import lombok.extern.slf4j.Slf4j;
import net.runelite.client.hiscore.HiscoreEndpoint;
import net.runelite.client.hiscore.HiscoreResult;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.hiscore.HiscoreClient;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.stream.Collectors;

@Slf4j
public class GroupIronPanel extends PluginPanel {
    private static final int GROUP_IRON_MAX_GROUP_SIZE = 5;

    private HiscoreClient hiscoreClient;

    private JLabel groupNameLabel;

    private List<PlayerStatsPanel> playerStatsPanels;

    public GroupIronPanel(HiscoreClient hiscoreClient) {
        this.hiscoreClient = hiscoreClient;
        rebuild();
    }

    /**
     * Builds the UI controls for the panel.
     */
    private void rebuild() {
        removeAll();

        JPanel groupNamePanel = new JPanel();
        groupNamePanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        groupNamePanel.setBorder(new EmptyBorder(8, 0, 8, 0));

        groupNameLabel = new JLabel();
        groupNameLabel.setFont(new Font(groupNameLabel.getFont().getName(), Font.BOLD, 18));
        groupNamePanel.add(groupNameLabel);

        final BufferedImage refreshIcon = ImageUtil.loadImageResource(getClass(), "/Refresh.png");
        JLabel refreshButton = new JLabel();
        refreshButton.setIcon(new ImageIcon(refreshIcon));
        refreshButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                refreshPanel();
            }
        });
        groupNamePanel.add(refreshButton);

        add(groupNamePanel);

        playerStatsPanels = new ArrayList<>();
        for (int i = 0; i < GROUP_IRON_MAX_GROUP_SIZE; i++) {
            PlayerStatsPanel statsPanel = new PlayerStatsPanel(hiscoreClient);
            statsPanel.setBorder(new EmptyBorder(5, 0, 5, 0));
            playerStatsPanels.add(statsPanel);
            add(statsPanel);
        }
    }

    /**
     * Sets the group name to be displayed in the panel.
     *
     * @param groupName The Group Ironman group name.
     */
    public void setGroupName(String groupName) {
        groupNameLabel.setText(groupName);
    }

    /**
     * Sets the list of group members to be displayed in the panel.
     *
     * @param groupMembers The usernames of the group members.
     */
    public void setGroupMembers(List<String> groupMembers) {
        int i = 0;
        while (i < groupMembers.size()) {
            playerStatsPanels.get(i).setPlayer(groupMembers.get(i));
            i++;
        }
        while (i < GROUP_IRON_MAX_GROUP_SIZE) {
            playerStatsPanels.get(i).setPlayer(null);
            i++;
        }
    }

    /**
     * Refreshes the hiscores for the group and displays them in the panel.
     */
    public void refreshPanel() {
        for (PlayerStatsPanel panel : playerStatsPanels) {
            panel.clearStats();
        }

        List<CompletableFuture<HiscoreResult>> hiscoreFutures = playerStatsPanels
                .stream()
                .map(panel -> hiscoreClient.lookupAsync(panel.getPlayer(), HiscoreEndpoint.NORMAL))
                .collect(Collectors.toList());

        CompletableFuture.allOf(hiscoreFutures.toArray(new CompletableFuture<?>[0])).whenCompleteAsync((result, ex) -> {
            List<HiscoreResult> results = hiscoreFutures.stream().map(future -> {
                try {
                    return future.get();
                } catch (InterruptedException e) {
                    return null;
                } catch (ExecutionException e) {
                    return null;
                }
            }).collect(Collectors.toList());

            SwingUtilities.invokeLater(() -> {
                for (int i = 0; i < playerStatsPanels.size(); i++) {
                    HiscoreResult hiscoreResult = results.get(i);
                    if (hiscoreResult == null) {
                        continue;
                    }
                    playerStatsPanels.get(i).updateStats(hiscoreResult);
                }
            });
        });
    }
}

package com.groupironpanel;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("groupironpanel")
public interface GroupIronPanelConfig extends Config {
    @ConfigItem(
            keyName = "autoDetectGroup",
            name = "Auto-Detect Group",
            description = "Whether the plugin should auto-detect the group information from the group ironman tab in the game",
            position = 0
    )
    default boolean autoDetectGroup() {
        return true;
    }

    @ConfigItem(
            keyName = "groupName",
            name = "Group Name",
            description = "The name of the Group Ironman group",
            position = 1
    )
    default String groupName() {
        return "";
    }

    @ConfigItem(
            keyName = "groupName",
            name = "",
            description = ""
    )
    void setGroupName(String key);

    @ConfigItem(
            keyName = "groupMembers",
            name = "Group Members",
            description = "A comma-separated list of the group members",
            position = 2
    )
    default String groupMembers() {
        return "";
    }

    @ConfigItem(
            keyName = "groupMembers",
            name = "",
            description = ""
    )
    void setGroupMembers(String key);
}

package com.groupironpanel;

import com.google.common.collect.ImmutableList;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Experience;
import net.runelite.client.RuneLite;
import net.runelite.client.hiscore.*;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.QuantityFormatter;

import javax.swing.*;
import java.awt.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static net.runelite.client.hiscore.HiscoreSkill.*;

@Slf4j
public class PlayerStatsPanel extends JPanel {
    private static final List<HiscoreSkill> SKILLS = ImmutableList.of(
            ATTACK, HITPOINTS, MINING,
            STRENGTH, AGILITY, SMITHING,
            DEFENCE, HERBLORE, FISHING,
            RANGED, THIEVING, COOKING,
            PRAYER, CRAFTING, FIREMAKING,
            MAGIC, FLETCHING, WOODCUTTING,
            RUNECRAFT, SLAYER, FARMING,
            CONSTRUCTION, HUNTER
    );

    private Map<HiscoreSkill, JLabel> skillToLabel = new HashMap<>();

    private HiscoreClient hiscoreClient;

    private String username;

    private JLabel usernameLabel;

    public PlayerStatsPanel(HiscoreClient hiscoreClient) {
        this.hiscoreClient = hiscoreClient;
        buildPanel();
    }

    /**
     * Clears the stats on the panel.
     */
    public void clearStats() {
        for (Map.Entry<HiscoreSkill, JLabel> entry : skillToLabel.entrySet()) {
            JLabel label = entry.getValue();
            if (label != null) {
                label.setText("-");
            }
        }
    }

    /**
     * Updates the stats with a given hiscore result.
     *
     * @param playerResult     The hiscore result for the player displayed in this panel.
     */
    public void updateStats(HiscoreResult playerResult) {
        if (playerResult == null) {
            return;
        }

        for (Map.Entry<HiscoreSkill, JLabel> entry : skillToLabel.entrySet()) {
            HiscoreSkill skill = entry.getKey();
            JLabel label = entry.getValue();

            if (label == null) {
                continue;
            }

            Skill resultSkill;

            if (skill == null) {
                int combatLevel = Experience.getCombatLevel(
                        playerResult.getSkill(ATTACK).getLevel(),
                        playerResult.getSkill(STRENGTH).getLevel(),
                        playerResult.getSkill(DEFENCE).getLevel(),
                        playerResult.getSkill(HITPOINTS).getLevel(),
                        playerResult.getSkill(MAGIC).getLevel(),
                        playerResult.getSkill(RANGED).getLevel(),
                        playerResult.getSkill(PRAYER).getLevel()
                );
                label.setText(Integer.toString(combatLevel));
            } else if ((resultSkill = playerResult.getSkill(skill)) != null) {
                final long experience = resultSkill.getExperience();
                if (experience > -1 && skill.getType() == HiscoreSkillType.SKILL) {
                    label.setText(String.valueOf(Experience.getLevelForXp((int) experience)));
                } else {
                    label.setText(String.valueOf(resultSkill.getLevel()));
                }
            }

            label.setToolTipText(buildSkillPanelTooltip(playerResult, skill));
        }
    }

    /**
     * Returns the name of the player represented by this stats panel.
     */
    public String getPlayer() {
        return this.username;
    }

    /**
     * Updates the player to be show in the panel. This does not cause the panel to refresh the player stats.
     *
     * @param username The name of the player to show in this stats panel.
     */
    public void setPlayer(String username) {
        this.username = username;
        usernameLabel.setText(this.username);
        if (username == null || username.isEmpty()) {
            setVisible(false);
        } else {
            setVisible(true);
        }
    }

    /**
     * Builds the UI controls for the player stats panel.
     */
    private void buildPanel() {
        GridBagConstraints constraints = new GridBagConstraints();
        constraints.fill = GridBagConstraints.HORIZONTAL;
        constraints.gridx = 0;
        constraints.gridy = 0;
        constraints.weightx = 1;
        constraints.weighty = 0;
        constraints.insets = new Insets(0, 0, 5, 0);

        setLayout(new GridBagLayout());
        setBackground(ColorScheme.DARKER_GRAY_COLOR);

        JPanel usernamePanel = new JPanel();
        usernamePanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        usernameLabel = new JLabel();
        usernamePanel.add(usernameLabel);
        add(usernamePanel, constraints);
        constraints.gridy++;

        JPanel statsPanel = new JPanel();
        statsPanel.setLayout(new GridLayout(8, 3));
        statsPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        for (HiscoreSkill skill : SKILLS) {
            statsPanel.add(buildSkillPanel(skill));
        }
        add(statsPanel, constraints);
        constraints.gridy++;

        JPanel summaryStatsPanel = new JPanel();
        summaryStatsPanel.setLayout(new GridLayout(1, 2));
        summaryStatsPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        summaryStatsPanel.add(buildSkillPanel(null));
        summaryStatsPanel.add(buildSkillPanel(OVERALL));
        add(summaryStatsPanel, constraints);
        constraints.gridy++;

        setVisible(false);
    }

    /**
     * Builds the JPanel to display a single skill for the player.
     */
    private JPanel buildSkillPanel(HiscoreSkill skill) {
        JPanel panel = new JPanel();
        panel.setBackground(ColorScheme.DARKER_GRAY_COLOR);

        String skillName = (skill == null ? "combat" : skill.name().toLowerCase());

        JLabel label = new JLabel();
        label.setIcon(new ImageIcon(ImageUtil.loadImageResource(RuneLite.class, "/skill_icons_small/" + skillName + ".png")));
        label.setText("-");
        label.setIconTextGap(skill == OVERALL || skill == null ? 10 : 4);
        label.setToolTipText(skill == null ? "Combat" : skill.getName());
        skillToLabel.put(skill, label);
        panel.add(label);

        return panel;
    }

    /**
     * Builds an HTML tooltip for a single skill in the panel.
     * This logic is taken from the builtin Hiscore plugin.
     *
     * @param playerResult     The hiscore result for the player.
     * @param skill            The skill to build the tooltip for.
     */
    private String buildSkillPanelTooltip(HiscoreResult playerResult, HiscoreSkill skill) {
        StringBuilder builder = new StringBuilder();
        builder.append("<html><body style = 'padding: 5px;color:#989898'>");

        if (skill == null) {
            double combatLevel = Experience.getCombatLevelPrecise(
                    playerResult.getSkill(ATTACK).getLevel(),
                    playerResult.getSkill(STRENGTH).getLevel(),
                    playerResult.getSkill(DEFENCE).getLevel(),
                    playerResult.getSkill(HITPOINTS).getLevel(),
                    playerResult.getSkill(MAGIC).getLevel(),
                    playerResult.getSkill(RANGED).getLevel(),
                    playerResult.getSkill(PRAYER).getLevel()
            );
            double combatExperience = playerResult.getSkill(ATTACK).getExperience()
                    + playerResult.getSkill(STRENGTH).getExperience() + playerResult.getSkill(DEFENCE).getExperience()
                    + playerResult.getSkill(HITPOINTS).getExperience() + playerResult.getSkill(MAGIC).getExperience()
                    + playerResult.getSkill(RANGED).getExperience() + playerResult.getSkill(PRAYER).getExperience();
            builder.append("<p><span style = 'color:white'>Combat</span></p>");
            builder.append("<p><span style = 'color:white'>Exact Combat Level:</span> " + QuantityFormatter.formatNumber(combatLevel) + "</p>");
            builder.append("<p><span style = 'color:white'>Experience:</span> " + QuantityFormatter.formatNumber(combatExperience) + "</p>");
        } else if (skill == HiscoreSkill.OVERALL) {
            Skill overallSkill = playerResult.getSkill(skill);
            String rank = (overallSkill.getRank() == -1) ? "Unranked" : QuantityFormatter.formatNumber(overallSkill.getRank());
            String exp = (overallSkill.getExperience() == -1L) ? "Unranked" : QuantityFormatter.formatNumber(overallSkill.getExperience());
            builder.append("<p><span style = 'color:white'>" + skill.getName() + "</span></p>");
            builder.append("<p><span style = 'color:white'>Rank:</span> " + rank + "</p>");
            builder.append("<p><span style = 'color:white'>Experience:</span> " + exp + "</p>");
        } else {
            Skill requestedSkill = playerResult.getSkill(skill);
            final long experience = requestedSkill.getExperience();

            String rank = (requestedSkill.getRank() == -1) ? "Unranked" : QuantityFormatter.formatNumber(requestedSkill.getRank());
            String exp = (experience == -1L) ? "Unranked" : QuantityFormatter.formatNumber(experience);
            String remainingXp;
            if (experience == -1L) {
                remainingXp = "Unranked";
            } else {
                int currentLevel = Experience.getLevelForXp((int) experience);
                remainingXp = (currentLevel + 1 <= Experience.MAX_VIRT_LEVEL) ? QuantityFormatter.formatNumber(Experience.getXpForLevel(currentLevel + 1) - experience) : "0";
            }

            builder.append("<p><span style = 'color:white'>Skill:</span> " + skill.getName() + "</p>");
            builder.append("<p><span style = 'color:white'>Rank:</span> " + rank + "</p>");
            builder.append("<p><span style = 'color:white'>Experience:</span> " + exp + "</p>");
            builder.append("<p><span style = 'color:white'>Remaining XP:</span> " + remainingXp + "</p>");
        }

        if (skill != null && skill.getType() == HiscoreSkillType.SKILL) {
            long experience = playerResult.getSkill(skill).getExperience();
            if (experience >= 0) {
                int currentXp = (int) experience;
                int currentLevel = Experience.getLevelForXp(currentXp);
                int xpForCurrentLevel = Experience.getXpForLevel(currentLevel);
                int xpForNextLevel = currentLevel + 1 <= Experience.MAX_VIRT_LEVEL ? Experience.getXpForLevel(currentLevel + 1) : -1;

                double xpGained = currentXp - xpForCurrentLevel;
                double xpGoal = xpForNextLevel != -1 ? xpForNextLevel - xpForCurrentLevel : 100;
                int progress = (int) ((xpGained / xpGoal) * 100f);

                builder.append("<div style = 'margin-top:3px'>");
                builder.append("<div style = 'background: #070707; border: 1px solid #070707; height: 6px; width: 100%;'>");
                builder.append("<div style = 'height: 6px; width: " + progress + "%; background: #dc8a00;'>");
                builder.append("</div>");
                builder.append("</div>");
                builder.append("</div>");
            }
        }

        builder.append("</body></html>");
        return builder.toString();
    }
}

