package runelite.untrimmed;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class UntrimmedPluginTest {
    public static void main(String[] args) throws Exception {
        ExternalPluginManager.loadBuiltin(UntrimmedPlugin.class);
        RuneLite.main(args);
    }
}
package runelite.untrimmed;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.ActorDeath;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.events.ItemDespawned;
import net.runelite.api.events.ItemSpawned;
import net.runelite.client.config.ConfigManager;

import java.util.*;
import java.util.stream.Collectors;

//@ToString
@Slf4j
public class CapeManager {

    private Client client;

    private List<Integer> untrimmedCapeIds = new ArrayList<>(Arrays.asList(
            ItemID.FARMING_CAPE,
            ItemID.AGILITY_CAPE,
            ItemID.ATTACK_CAPE,
            ItemID.CONSTRUCT_CAPE,
            ItemID.COOKING_CAPE,
            ItemID.CRAFTING_CAPE,
            ItemID.DEFENCE_CAPE,
            ItemID.FIREMAKING_CAPE,
            ItemID.FISHING_CAPE,
            ItemID.FLETCHING_CAPE,
            ItemID.HERBLORE_CAPE,
            ItemID.HITPOINTS_CAPE,
            ItemID.HUNTER_CAPE,
            ItemID.MAGIC_CAPE,
            ItemID.MINING_CAPE,
            ItemID.PRAYER_CAPE,
            ItemID.RANGING_CAPE,
            ItemID.RUNECRAFT_CAPE,
            ItemID.SLAYER_CAPE,
            ItemID.SMITHING_CAPE,
            ItemID.STRENGTH_CAPE,
            ItemID.THIEVING_CAPE,
            ItemID.WOODCUTTING_CAPE
    ));

    private CapeTracker capeTracker;

    private static final String CAPE_TRACKER_KEY = "capeTracker";

    private DeathStatus deathStatus = null;

    public CapeManager(Client client, ConfigManager configManager) {
        this.client = client;
        this.capeTracker = new CapeTracker(configManager);
    }

    public void shutDown() {
        capeTracker.persistData();
    }

    public CapeStorageLocation capeLocation() {
        List<CapeStorageLocation> capeLocations = new ArrayList<>();

        for (Map.Entry<CapeStorageLocation, Integer> entry : capeTracker.entrySet()) {
            CapeStorageLocation location = entry.getKey();
            int count = entry.getValue();
            if (count > 0) {
                capeLocations.add(location);
            }
        }

        if (capeLocations.isEmpty()) {
            return CapeStorageLocation.UNKNOWN;
        }
        log.debug("CapeLocations=" + capeLocations);

        List<CapeStorageLocation> safeLocations = capeLocations.stream()
                .filter(CapeStorageLocation::isSafe)
                .collect(Collectors.toList());

        List<CapeStorageLocation> dangerousLocations = capeLocations.stream()
                .filter(location -> !location.isSafe())
                .collect(Collectors.toList());

        if (!dangerousLocations.isEmpty()) {
            return dangerousLocations.get(0);
        } else {
            return safeLocations.get(0);
        }
    }

    public void onItemContainerChanged(ItemContainerChanged itemContainerChanged) {
        if (deathStatus != null) {
            // death storage container does not get onItemContainerChanged event so we move inventory items to death after reviving
            moveInventoryItemsToDeath();
            deathStatus = null;
        }

        ItemContainer itemContainer = itemContainerChanged.getItemContainer();
        int deathVarpId = 261;
        int deathbankVarpValue = client.getVarpValue(deathVarpId);
        log.debug("deathBankVarpValue=" + deathbankVarpValue);
        CapeStorageLocation location = CapeStorageLocation.of(itemContainer.getId(), deathbankVarpValue);
        capeTracker.put(location, untrimmedCapeCount(itemContainer));
    }

    private void moveInventoryItemsToDeath() {
        Item[] itemsBeforeDeath = deathStatus.getItems();
        Region regionBeforeDeath = deathStatus.getDeathRegion();
        CapeStorageLocation capeStorageLocation = CapeStorageLocation.fromDeathRegion(regionBeforeDeath);

        ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
        if (inventory == null) {
            log.error("Inventory was null when checking what items remained after reviving");
            return;
        }
        Item[] itemsAfterReviving = inventory.getItems();

        int countBeforeDeath = untrimmedCapeCount(itemsBeforeDeath);
        int countAfterReviving = untrimmedCapeCount(itemsAfterReviving);
        int countOfCapesMovedToDeath = countBeforeDeath - countAfterReviving;

        capeTracker.put(capeStorageLocation, countOfCapesMovedToDeath);
    }

    private int untrimmedCapeCount(ItemContainer itemContainer) {
        Item[] items = itemContainer.getItems();
        return untrimmedCapeCount(items);
    }

    private int untrimmedCapeCount(Item[] items) {
        for (Item item : items) {
            if (isUntrimmedCape(item.getId())) {
                // doesnt need to keep checking all items because only 1 untrimmed cape is allowed on any account
                return item.getQuantity();
            }
        }
        return 0;
    }

    public boolean isUntrimmedCape(int itemId) {
        return untrimmedCapeIds.contains(itemId);
    }

    public void onActorDeath(ActorDeath actorDeath) {
        WorldPoint location =
                WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation());
        Region region = Region.get(location.getRegionID());

        ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
        if (inventory == null) {
            log.error("Died and inventory was null.");
            return;
        }
        Item[] items = inventory.getItems();
        deathStatus = new DeathStatus(items, region);
    }

    public void onItemSpawned(ItemSpawned itemSpawned) {
        TileItem item = itemSpawned.getItem();

        if (isUntrimmedCape(item.getId())) {
            capeTracker.put(CapeStorageLocation.GROUND, item.getQuantity());
        }
    }

    public void onItemDespawned(ItemDespawned itemDespawned) {
        TileItem item = itemDespawned.getItem();

        if (isUntrimmedCape(item.getId())) {
            capeTracker.put(CapeStorageLocation.GROUND, 0);
        }
    }

    class DeathStatus {
        private Item[] items;
        private Region deathRegion;

        public DeathStatus(Item[] items, Region deathRegion) {
            this.items = items;
            this.deathRegion = deathRegion;
        }

        public Item[] getItems() {
            return items;
        }

        public Region getDeathRegion() {
            return deathRegion;
        }
    }

}



package runelite.untrimmed;

import lombok.extern.slf4j.Slf4j;
import net.runelite.client.config.ConfigManager;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

// this class wraps a Map to be able to store it in config without worrying about generics when recovering it from configManager
@Slf4j
public class CapeTracker implements Serializable {

    private Map<CapeStorageLocation, Integer> capesFound = new HashMap<>();

    private ConfigManager configManager;

    public CapeTracker(ConfigManager configManager) {
        this.configManager = configManager;
        startUp();
    }

    public void persistData() {
        log.debug("shutting down");
        log.debug("CapesFound=" + capesFound);
        for (CapeStorageLocation location : CapeStorageLocation.values()) {
            String key = "capetracker." + location.name();
            configManager.setConfiguration(UntrimmedConfig.CONFIG_GROUP, key, capesFound.getOrDefault(location, 0));
        }
    }

    private void startUp() {
        log.debug("starting up");
        for (CapeStorageLocation location : CapeStorageLocation.values()) {
            String key = "capetracker." + location.name();
            Integer count = configManager.getConfiguration(UntrimmedConfig.CONFIG_GROUP, key, Integer.class);
            if (count == null) {
                capesFound.put(location, 0);
            } else {
                capesFound.put(location, count);
            }
        }
        log.debug("CapesFound=" + capesFound);
    }

    public int put(CapeStorageLocation capeStorageLocation, int quantity) {
        Integer oldValue = capesFound.put(capeStorageLocation, quantity);
        persistData();
        if (oldValue == null) {
            return 0;
        } else {
            return oldValue;
        }
    }

    public Set<Map.Entry<CapeStorageLocation, Integer>> entrySet() {
        return capesFound.entrySet();
    }
}

package runelite.untrimmed;

import lombok.ToString;
import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.api.events.StatChanged;

import java.util.*;

@ToString
public class SkillXpManager {

    private Map<Skill, Integer> skillXp;

    private static final int LVL_99_XP = 13_034_431;

    private final Client client;

    public SkillXpManager(Client client) {
        // TODO create unit tests mocking client
        this.client = client;
        initializeSkillXp();
    }

    private void initializeSkillXp() {
        skillXp = new HashMap<>();
        for (Skill skill : Skill.values()) {
            if (skill.equals(Skill.OVERALL)) {
                continue;
            }
            skillXp.put(skill, client.getSkillExperience(skill));
        }
    }

    public boolean hasAny99() {
        for (int xp : skillXp.values()) {
            if (xp >= LVL_99_XP) {
                return true;
            }
        }
        return false;
    }

    public boolean isMaxed() {
        for (int xp : skillXp.values()) {
            if (xp < LVL_99_XP) {
                return false;
            }
        }
        return true;
    }

    public boolean isCloseToNew99(int remainingXp) {
        for (int xp : skillXp.values()) {
            if (xp >= LVL_99_XP - remainingXp && xp < LVL_99_XP) {
                return true;
            }
        }
        return false;
    }

    public Skill closestNew99() {
        Optional<Map.Entry<Skill, Integer>> closestSkill = this.skillXp.entrySet().stream()
                .filter(entry -> entry.getValue() < LVL_99_XP)
                .sorted(Collections.reverseOrder(Map.Entry.comparingByValue()))
                .findFirst();
        return closestSkill.map(Map.Entry::getKey).get();
    }

    public void fetchSkillXp() {
        initializeSkillXp();
    }
}

package runelite.untrimmed;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.*;

@ConfigGroup(UntrimmedConfig.CONFIG_GROUP)
public interface UntrimmedConfig extends Config {

    String CONFIG_GROUP = "untrimmed-warning";

    @ConfigItem(
            keyName = "remainingXp",
            name = "Remaining Xp",
            description = "The amount of xp from hitting 99 before you will be alerted that your untrimmed cape is in danger of being lost."
    )
    default int warningXpRange() {
        return 50_000;
    }

    @ConfigItem(
            keyName = "shouldFlash",
            name = "Flash Warning",
            description = "Whether or not to flash warning when it pops up."
    )
    default boolean shouldFlash() {
        return true;
    }

    @Alpha
    @ConfigItem(
            keyName = "flashColor1",
            name = "Flash Color #1",
            description = "The first color to flash between, also controls the non-flashing color.",
            position = 6
    )
    default Color flashColor1() {
        return new Color(255, 0, 0, 150);
    }

    @Alpha
    @ConfigItem(
            keyName = "flashColor2",
            name = "Flash Color #2",
            description = "The second color to flash between.",
            position = 7
    )
    default Color flashColor2() {
        return new Color(70, 61, 50, 150);
    }

    @Alpha
    @ConfigItem(
            keyName = "safeColor",
            name = "Safe Color",
            description = "The color of the overlay if you are near a new 99 but your cape is safe.",
            position = 8
    )
    default Color safeColor() {
        return new Color(8, 132, 60, 150);
    }

    @ConfigItem(
            keyName = "hidePickup",
            name = "Hide Untrimmed Pickup",
            description = "Whether or not to hide left click pickup for untrimmed capes when it would automatically trim on pickup."
    )
    default boolean hidePickup() {
        return true;
    }

    default String secretWord() {
        return "Something";
    }
}
package runelite.untrimmed;

import net.runelite.api.InventoryID;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public enum CapeStorageLocation {

    // deaths office is safe
    // https://www.reddit.com/r/2007scape/comments/hodnxg/practical_confirmation_deaths_office_works_to/

    // doesnt need to be free-to-play world
    // https://www.reddit.com/r/2007scape/comments/yh2zov/comment/iuc8feo/?utm_source=share&utm_medium=web2x&context=3

    GRAVESTONE("at gravestone", AlternateInventoryId.DEATH_INVENTORY_ID, Collections.emptyList(), true),
    DEATH_OFFICE("at Death's Office", AlternateInventoryId.DEATH_INVENTORY_ID, Collections.emptyList(), true),
    ZULRAH("in death storage at Zulrah", AlternateInventoryId.DEATH_INVENTORY_ID, Arrays.asList(33, 0), true),
    HESPORI("in death storage at Hespori", AlternateInventoryId.DEATH_INVENTORY_ID, Arrays.asList(15, 16), true),
    COX("in private storage at Chambers of Xeric", 583, Collections.emptyList(), true),
    GROUND("on the ground (TELE-GRAB ONLY!)", AlternateInventoryId.UNKNOWN_INVENTORY_ID, Collections.emptyList(), true),

    UNKNOWN("at an unknown location", AlternateInventoryId.UNKNOWN_INVENTORY_ID, Collections.emptyList(), false),
    BANK("in the Bank", InventoryID.BANK.getId(), Collections.emptyList(), false),
    // TODO bank placeholder, does this affect anything?
//    BANK_PLACEHOLDER("in bank placeholder", InventoryID.BANK.getId(), false),
    INVENTORY("in the inventory", InventoryID.INVENTORY.getId(), Collections.emptyList(), false),
    EQUIPMENT("equipped", InventoryID.EQUIPMENT.getId(), Collections.emptyList(), false),

    // according to wiki these are untested
    HYDRA("in death storage at Hydra", AlternateInventoryId.DEATH_INVENTORY_ID, Arrays.asList(13, 14), false),
    VORKATH("in death storage at Vorkath", AlternateInventoryId.DEATH_INVENTORY_ID, Arrays.asList(5, 6), false),
    TOB("in death storage at Theatre of Blood", AlternateInventoryId.DEATH_INVENTORY_ID, Arrays.asList(11, 12), false),
    ;

    private final String description;
    private final int inventoryID;
    private final List<Integer> deathVarbits; // id that marks which death storage is currently in-use because they all share the same inventoryID
    private final boolean isSafe;

    CapeStorageLocation(String description, int inventoryID, List<Integer> deathVarbits, boolean isSafe) {
        this.description = description;
        this.inventoryID = inventoryID;
        this.deathVarbits = deathVarbits;
        this.isSafe = isSafe;
    }

    public boolean isSafe() {
        return isSafe;
    }

    public String capeStatus() {
        if (isSafe) {
            return "Your untrimmed cape is SAFE because it is " + description;
        } else {
            return "Your untrimmed cape is in DANGER because it is " + description;
        }
    }

    public static boolean isCapeStorageId(int inventoryID) {
        return Arrays.stream(CapeStorageLocation.values()).anyMatch(capeStorageLocation -> inventoryID == capeStorageLocation.inventoryID);
    }

    public static CapeStorageLocation of(int inventoryID, int deathVarbit) {
        if (inventoryID == AlternateInventoryId.DEATH_INVENTORY_ID) {
            for (CapeStorageLocation location : CapeStorageLocation.values()) {
                if (location.deathVarbits.contains(deathVarbit)) {
                    return location;
                }
            }
        }
        for (CapeStorageLocation location : CapeStorageLocation.values()) {
            if (location.inventoryID == inventoryID) {
                return location;
            }
        }
        return CapeStorageLocation.UNKNOWN;
    }

    public static CapeStorageLocation fromDeathRegion(Region region) {
        if (region.equals(Region.BOSS_HESPORI)) {
            return CapeStorageLocation.HESPORI;
        } else if (region.equals(Region.BOSS_VORKATH)) {
            return CapeStorageLocation.VORKATH;
        } else if (region.equals(Region.BOSS_HYDRA)) {
            return CapeStorageLocation.HYDRA;
        } else if (region.equals(Region.BOSS_ZULRAH)) {
            return CapeStorageLocation.ZULRAH;
        } else if (region.equals(Region.RAIDS_THEATRE_OF_BLOOD)) {
            return CapeStorageLocation.TOB;
        } else {
            return CapeStorageLocation.GRAVESTONE;
        }
    }

    private static class AlternateInventoryId {
        public static final int DEATH_INVENTORY_ID = 525;
        public static final int UNKNOWN_INVENTORY_ID = -1;
    }
}
package runelite.untrimmed;

import com.google.common.collect.ImmutableMap;
import lombok.Getter;

import java.util.Map;

@Getter
public enum Region {
    // Bosses
    BOSS_ABYSSAL_SIRE("Abyssal Sire", 11851, 11850, 12363, 12362),
    BOSS_CERBERUS("Cerberus", 4883, 5140, 5395),
    BOSS_COMMANDER_ZILYANA("Commander Zilyana", 11602),
    BOSS_CORP("Corporeal Beast", 11842, 11844),
    BOSS_DKS("Dagannoth Kings", 11588, 11589),
    BOSS_GENERAL_GRAARDOR("General Graardor", 11347),
    BOSS_GIANT_MOLE("Giant Mole", 6993, 6992),
    BOSS_GROTESQUE_GUARDIANS("Grotesque Guardians", 6727),
    BOSS_HESPORI("Hespori", 5021),
    BOSS_HYDRA("Alchemical Hydra", 5536),
    BOSS_KQ("Kalphite Queen", 13972),
    BOSS_KRAKEN("Kraken", 9116),
    BOSS_KREEARRA("Kree'arra", 11346),
    BOSS_KRIL_TSUTSAROTH("K'ril Tsutsaroth", 11603),
    BOSS_NEX("Nex", 11601),
    BOSS_NIGHTMARE("Nightmare of Ashihama", 15515),
    BOSS_SARACHNIS("Sarachnis", 7322),
    BOSS_SKOTIZO("Skotizo", 6810),
    BOSS_SMOKE_DEVIL("Thermonuclear smoke devil", 9363, 9619),
    BOSS_TEMPOROSS("Tempoross", 12078),
    BOSS_VORKATH("Vorkath", 9023),
    BOSS_WINTERTODT("Wintertodt", 6462),
    BOSS_ZALCANO("Zalcano", 12126),
    BOSS_ZULRAH("Zulrah", 9007, 9008),

    // Cities
    CITY_AL_KHARID("Al Kharid", 13105, 13106),
    CITY_ARCEUUS_HOUSE("Arceuus", 6458, 6459, 6460, 6714, 6715),
    CITY_ARDOUGNE("Ardougne", 9779, 9780, 10035, 10036, 10291, 10292, 10547, 10548),
    CITY_BANDIT_CAMP("Bandit Camp", 12590),
    CITY_BARBARIAN_OUTPOST("Barbarian Outpost", 10039),
    CITY_BARBARIAN_VILLAGE("Barbarian Village", 12341),
    CITY_BEDABIN_CAMP("Bedabin Camp", 12591),
    CITY_BRIMHAVEN("Brimhaven", 11057, 11058),
    CITY_BURGH_DE_ROTT("Burgh de Rott", 13874, 13873, 14130, 14129),
    CITY_BURTHORPE("Burthorpe", 11319, 11575),
    CITY_CANIFIS("Canifis", 13878),
    CITY_CATHERBY("Catherby", 11317, 11318, 11061),
    CITY_CORSAIR_COVE("Corsair Cove", 10028, 10284),
    CITY_DARKMEYER("Darkmeyer", 14388, 14644),
    CITY_DORGESH_KAAN("Dorgesh-Kaan", 10835, 10834),
    CITY_DRAYNOR("Draynor", 12338, 12339),
    CITY_EDGEVILLE("Edgeville", 12342),
    CITY_ENTRANA("Entrana", 11060, 11316),
    CITY_ETCETERIA("Etceteria", 10300),
    CITY_FALADOR("Falador", 11828, 11572, 11827, 12084),
    CITY_GUTANOTH("Gu'Tanoth", 10031),
    CITY_GWENITH("Gwenith", 8757),
    CITY_HOSIDIUS_HOUSE(
            "Hosidius", 6710, 6711, 6712, 6455, 6456, 6966, 6967, 6968, 7221, 7223, 7224, 7478, 7479),
    CITY_JATIZSO("Jatizso", 9531),
    CITY_KELDAGRIM("Keldagrim", 11423, 11422, 11679, 11678),
    CITY_LANDS_END("Land's End", 5941),
    CITY_LLETYA("Lletya", 9265, 11103),
    CITY_LOVAKENGJ_HOUSE("Lovakengj", 5692, 5691, 5947, 6203, 6202, 5690, 5946),
    CITY_LUMBRIDGE("Lumbridge", 12850),
    CITY_LUNAR_ISLE("Lunar Isle", 8253, 8252, 8509, 8508),
    CITY_MARIM("Marim", 11051),
    CITY_MEIYERDITCH("Meiyerditch", 14132, 14387, 14386, 14385),
    CITY_MENAPHOS("Menaphos", 12843),
    CITY_MISCELLANIA("Miscellania", 10044),
    CITY_MOR_UL_REK("Mor Ul Rek", 9808, 9807, 10064, 10063),
    CITY_MORTTON("Mort'ton", 13875),
    CITY_MOS_LE_HARMLESS("Mos Le'Harmless", 14637, 14638, 14639, 14894, 14895, 15151, 15406, 15407),
    CITY_MOUNT_KARUULM("Mount Karuulm", 5179, 4923, 5180),
    CITY_MOUNTAIN_CAMP("Mountain Camp", 11065),
    CITY_MYNYDD("Mynydd", 8501),
    CITY_NARDAH("Nardah", 13613),
    CITY_NEITIZNOT("Neitiznot", 9275),
    CITY_PISCARILIUS_HOUSE("Port Piscarilius", 6969, 6971, 7227, 6970, 7225, 7226),
    CITY_PISCATORIS("Piscatoris", 9273),
    CITY_POLLNIVNEACH("Pollnivneach", 13358),
    CITY_PORT_KHAZARD("Port Khazard", 10545),
    CITY_PORT_PHASMATYS("Port Phasmatys", 14646),
    CITY_PORT_SARIM("Port Sarim", 12081, 12082),
    CITY_PRIFDDINAS(
            "Prifddinas", 8499, 8500, 8755, 8756, 9011, 9012, 9013, 12894, 12895, 13150, 13151),
    CITY_RELLEKKA("Rellekka", 10297, 10553),
    CITY_RIMMINGTON("Rimmington", 11826, 11570),
    CITY_SEERS_VILLAGE("Seers' Village", 10806),
    CITY_SHAYZIEN_HOUSE("Shayzien", 5944, 5943, 6200, 6199, 5686, 5687, 5688, 5689, 5945),
    CITY_SHILO_VILLAGE("Shilo Village", 11310),
    CITY_SLEPE("Slepe", 14643, 14899, 14900, 14901),
    CITY_SOPHANEM("Sophanem", 13099),
    CITY_TAI_BWO_WANNAI("Tai Bwo Wannai", 11056, 11055),
    CITY_TAVERLEY("Taverley", 11574, 11573),
    CITY_TREE_GNOME_STRONGHOLD("Tree Gnome Stronghold", 9525, 9526, 9782, 9781),
    CITY_TREE_GNOME_VILLAGE("Tree Gnome Village", 10033),
    CITY_TROLL_STRONGHOLD("Troll Stronghold", 11321, 11421),
    CITY_UZER("Uzer", 13872),
    CITY_VARROCK("Varrock", 12596, 12597, 12852, 12853, 12854, 13108, 13109, 13110),
    CITY_VER_SINHAZA("Ver Sinhaza", 14642),
    CITY_VOID_OUTPOST("Void Knights' Outpost", 10537),
    CITY_WEISS("Weiss", 11325, 11581),
    CITY_WITCHHAVEN("Witchaven", 10803),
    CITY_YANILLE("Yanille", 10288, 10032),
    CITY_ZANARIS("Zanaris", 9285, 9541, 9540, 9797),
    CITY_ZULANDRA("Zul-Andra", 8495, 8751),

    // Dungeons
    DUNGEON_ABANDONED_MINE("Abandoned Mine", 13618, 13718, 11079, 11078, 11077, 10823, 10822, 10821),
    DUNGEON_AH_ZA_RHOON("Ah Za Rhoon", 11666),
    DUNGEON_ANCIENT_CAVERN("Ancient Cavern", 6483, 6995),
    DUNGEON_APE_ATOLL("Ape Atoll Dungeon", 11150, 10894),
    DUNGEON_APE_ATOLL_BANANA_PLANTATION("Ape Atoll Banana Plantation", 10895),
    DUNGEON_ARDY_BASEMENT("West Ardougne Basement", 10135),
    DUNGEON_ARDY_SEWERS("Ardougne Sewers", 10134, 10136, 10391, 10647),
    DUNGEON_ASGARNIAN_ICE_CAVES("Asgarnian Ice Caves", 11925, 12181),
    DUNGEON_BERVIRIUS_TOMB("Tomb of Bervirius", 11154),
    DUNGEON_BRIMHAVEN("Brimhaven Dungeon", 10901, 10900, 10899, 10645, 10644, 10643),
    DUNGEON_BRINE_RAT_CAVERN("Brine Rat Cavern", 10910),
    DUNGEON_CATACOMBS_OF_KOUREND("Catacombs of Kourend", 6557, 6556, 6813, 6812),
    DUNGEON_CHAMPIONS_CHALLENGE("Champions' Challenge", 12696),
    DUNGEON_CHAOS_DRUID_TOWER("Chaos Druid Tower", 10392),
    DUNGEON_CHASM_OF_FIRE("Chasm of Fire", 5789),
    DUNGEON_CHASM_OF_TEARS("Chasm of Tears", 12948),
    DUNGEON_CHINCHOMPA("Chinchompa Hunting Ground", 10129),
    DUNGEON_CLOCK_TOWER("Clock Tower Basement", 10390),
    DUNGEON_CORSAIR_COVE("Corsair Cove Dungeon", 8076, 8332),
    DUNGEON_CRABCLAW_CAVES("Crabclaw Caves", 6553, 6809),
    DUNGEON_CRANDOR("Crandor Dungeon", 11414),
    DUNGEON_CRASH_SITE_CAVERN("Crash Site Cavern", 8280, 8536),
    DUNGEON_CRUMBLING_TOWER("Crumbling Tower", 7827),
    DUNGEON_DAEYALT_ESSENCE_MINE("Daeyalt Essence Mine", 14744),
    DUNGEON_DIGSITE("Digsite Dungeon", 13464, 13465),
    DUNGEON_DORGESHKAAN("Dorgesh-Kaan South Dungeon", 10833),
    DUNGEON_DORGESHUUN_MINES("Dorgeshuun Mines", 12950, 13206),
    DUNGEON_DRAYNOR_SEWERS("Draynor Sewers", 12439, 12438),
    DUNGEON_DWARVEN_MINES("Dwarven Mines", 12185, 12184, 12183),
    DUNGEON_EAGLES_PEAK("Eagles' Peak Dungeon", 8013),
    DUNGEON_ECTOFUNTUS("Ectofuntus", 14746),
    DUNGEON_EDGEVILLE("Edgeville Dungeon", 12441, 12442, 12443, 12698),
    DUNGEON_ELEMENTAL_WORKSHOP("Elemental Workshop", 10906, 7760),
    DUNGEON_ELVEN_RABBIT_CAVE("Elven rabbit cave", 13252),
    DUNGEON_ENAKHRAS_TEMPLE("Enakhra's Temple", 12423),
    DUNGEON_EVIL_CHICKENS_LAIR("Evil Chicken's Lair", 9796),
    DUNGEON_EXPERIMENT_CAVE("Experiment Cave", 14235, 13979),
    DUNGEON_FEROX_ENCLAVE("Ferox Enclave Dungeon", 12700),
    DUNGEON_FORTHOS("Forthos Dungeon", 7323),
    DUNGEON_FREMENNIK_SLAYER("Fremennik Slayer Dungeon", 10907, 10908, 11164),
    DUNGEON_GLARIALS_TOMB("Glarial's Tomb", 10137),
    DUNGEON_GOBLIN_CAVE("Goblin Cave", 10393),
    DUNGEON_GRAND_TREE_TUNNELS("Grand Tree Tunnels", 9882),
    DUNGEON_HAM_HIDEOUT("H.A.M. Hideout", 12694),
    DUNGEON_HAM_STORE_ROOM("H.A.M. Store room", 10321),
    DUNGEON_HEROES_GUILD("Heroes' Guild Mine", 11674),
    DUNGEON_IORWERTH("Iorwerth Dungeon", 12737, 12738, 12993, 12994),
    DUNGEON_ISLE_OF_SOULS("Isle of Souls Dungeon", 8593),
    DUNGEON_JATIZSO_MINES("Jatizso Mines", 9631),
    DUNGEON_JIGGIG_BURIAL_TOMB("Jiggig Burial Tomb", 9875, 9874),
    DUNGEON_JOGRE("Jogre Dungeon", 11412),
    DUNGEON_KARAMJA("Karamja Dungeon", 11413),
    DUNGEON_KARUULM(
            "Karuulm Slayer Dungeon", 5280, 5279, 5023, 5535, 5022, 4766, 4510, 4511, 4767, 4768, 4512),
    DUNGEON_KGP_HEADQUARTERS("KGP Headquarters", 10658),
    DUNGEON_KRUK(
            "Kruk's Dungeon",
            9358,
            9359,
            9360,
            9615,
            9616,
            9871,
            10125,
            10126,
            10127,
            10128,
            10381,
            10382,
            10383,
            10384,
            10637,
            10638,
            10639,
            10640),
    DUNGEON_LEGENDS_GUILD("Legends' Guild Dungeon", 10904),
    DUNGEON_LIGHTHOUSE("Lighthouse", 10140),
    DUNGEON_LIZARDMAN_CAVES("Lizardman Caves", 5275),
    DUNGEON_LIZARDMAN_TEMPLE("Lizardman Temple", 5277),
    DUNGEON_LUMBRIDGE_SWAMP_CAVES("Lumbridge Swamp Caves", 12693, 12949),
    DUNGEON_LUNAR_ISLE_MINE("Lunar Isle Mine", 9377),
    DUNGEON_MANIACAL_HUNTER("Maniacal Monkey Hunter Area", 11662),
    DUNGEON_MEIYERDITCH_MINE("Meiyerditch Mine", 9544),
    DUNGEON_MISCELLANIA("Miscellania Dungeon", 10144, 10400),
    DUNGEON_MOGRE_CAMP("Mogre Camp", 11924),
    DUNGEON_MOS_LE_HARMLESS_CAVES("Mos Le'Harmless Caves", 14994, 14995, 15251),
    DUNGEON_MOTHERLODE_MINE(
            "Motherlode Mine", 14679, 14680, 14681, 14935, 14936, 14937, 15191, 15192, 15193),
    DUNGEON_MOURNER_TUNNELS("Mourner Tunnels", 7752, 8008),
    DUNGEON_MOUSE_HOLE("Mouse Hole", 9046),
    DUNGEON_MYREDITCH_LABORATORIES("Myreditch Laboratories", 14232, 14233, 14487, 14488),
    DUNGEON_MYREQUE("Myreque Hideout", 13721, 13974, 13977, 13978),
    DUNGEON_MYTHS_GUILD("Myths' Guild Dungeon", 7564, 7820, 7821),
    DUNGEON_OBSERVATORY("Observatory Dungeon", 9362),
    DUNGEON_OGRE_ENCLAVE("Ogre Enclave", 10387),
    DUNGEON_OURANIA("Ourania Cave", 12119),
    DUNGEON_QUIDAMORTEM_CAVE("Quidamortem Cave", 4763),
    DUNGEON_RASHILIYIAS_TOMB("Rashiliyta's Tomb", 11668),
    DUNGEON_RUINS_OF_CAMDOZAAL(
            "Ruins of Camdozaal", 11609, 11610, 11611, 11865, 11866, 11867, 12121, 12122, 12123),
    DUNGEON_SALT_MINE("Salt Mine", 11425),
    DUNGEON_SARADOMINSHRINE("Saradomin Shrine (Paterdomus)", 13722),
    DUNGEON_SHADE_CATACOMBS("Shade Catacombs", 13975),
    DUNGEON_SHADOW("Shadow Dungeon", 10575, 10831),
    DUNGEON_SHAYZIEN_CRYPTS("Shayzien Crypts", 6043),
    DUNGEON_SISTERHOOD_SANCTUARY(
            "Sisterhood Sanctuary", 14999, 15000, 15001, 15255, 15256, 15257, 15511, 15512, 15513),
    DUNGEON_SMOKE("Smoke Dungeon", 12946, 13202),
    DUNGEON_SOPHANEM("Sophanem Dungeon", 13200),
    DUNGEON_SOURHOG_CAVE("Sourhog Cave", 12695),
    DUNGEON_STRONGHOLD_SECURITY("Stronghold of Security", 7505, 8017, 8530, 9297),
    DUNGEON_STRONGHOLD_SLAYER("Stronghold Slayer Cave", 9624, 9625, 9880, 9881),
    DUNGEON_TARNS_LAIR("Tarn's Lair", 12616, 12615),
    DUNGEON_TAVERLEY("Taverley Dungeon", 11416, 11417, 11671, 11672, 11673, 11928, 11929),
    DUNGEON_TEMPLE_OF_IKOV("Temple of Ikov", 10649, 10905, 10650),
    DUNGEON_TEMPLE_OF_LIGHT("Temple of Light", 7496),
    DUNGEON_TEMPLE_OF_MARIMBO("Temple of Marimbo", 11151),
    DUNGEON_THE_WARRENS("The Warrens", 7070, 7326),
    DUNGEON_TOLNA("Dungeon of Tolna", 13209),
    DUNGEON_TOWER_OF_LIFE("Tower of Life Basement", 12100),
    DUNGEON_TRAHAEARN_MINE("Trahaearn Mine", 13250),
    DUNGEON_TUNNEL_OF_CHAOS("Tunnel of Chaos", 12625),
    DUNGEON_UNDERGROUND_PASS("Underground Pass", 9369, 9370),
    DUNGEON_VARROCKSEWERS("Varrock Sewers", 12954, 13210),
    DUNGEON_VIYELDI_CAVES("Viyeldi Caves", 9545, 11153),
    DUNGEON_WARRIORS_GUILD("Warriors' Guild Basement", 11675),
    DUNGEON_WATER_RAVINE("Water Ravine", 13461),
    DUNGEON_WATERBIRTH("Waterbirth Dungeon", 9886, 10142, 7492, 7748),
    DUNGEON_WATERFALL("Waterfall Dungeon", 10394),
    DUNGEON_WEREWOLF_AGILITY("Werewolf Agility Course", 14234),
    DUNGEON_WHITE_WOLF_MOUNTAIN_CAVES("White Wolf Mountain Caves", 11418, 11419),
    DUNGEON_WITCHAVEN_SHRINE("Witchhaven Shrine Dungeon", 10903),
    DUNGEON_WIZARDS_TOWER("Wizards' Tower Basement", 12437),
    DUNGEON_WOODCUTTING_GUILD("Woodcutting Guild Dungeon", 6298),
    DUNGEON_WYVERN_CAVE("Wyvern Cave", 14495, 14496),
    DUNGEON_YANILLE_AGILITY("Yanille Agility Dungeon", 10388),

    // Minigames
    MG_ARDOUGNE_RAT_PITS("Ardougne Rat Pits", 10646),
    MG_BARBARIAN_ASSAULT("Barbarian Assault", 7508, 7509, 10322),
    MG_BARROWS("Barrows", 14131, 14231),
    MG_BLAST_FURNACE("Blast Furnace", 7757),
    MG_BRIMHAVEN_AGILITY_ARENA("Brimhaven Agility Arena", 11157),
    MG_BURTHORPE_GAMES_ROOM("Burthorpe Games Room", 8781),
    MG_CASTLE_WARS("Castle Wars", 9520, 9620),
    MG_CLAN_WARS(
            "Clan Wars",
            12621,
            12622,
            12623,
            13130,
            13131,
            13133,
            13134,
            13135,
            13386,
            13387,
            13390,
            13641,
            13642,
            13643,
            13644,
            13645,
            13646,
            13647,
            13899,
            13900,
            14155,
            14156),
    MG_DUEL_ARENA("Duel Arena", 13362, 13363),
    MG_FISHING_TRAWLER("Fishing Trawler", 7499),
    MG_GAUNTLET("The Gauntlet", 12127, 7512),
    MG_CORRUPTED_GAUNTLET("Corrupted Gauntlet", 7768),
    MG_HALLOWED_SEPULCHRE(
            "Hallowed Sepulchre",
            8797,
            9051,
            9052,
            9053,
            9054,
            9309,
            9563,
            9565,
            9821,
            10074,
            10075,
            10077),
    MG_INFERNO("The Inferno", 9043),
    MG_KELDAGRIM_RAT_PITS("Keldagrim Rat Pits", 7753),
    MG_LAST_MAN_STANDING_DESERTED_ISLAND(
            "LMS - Deserted Island", 13658, 13659, 13660, 13914, 13915, 13916),
    MG_LAST_MAN_STANDING_WILD_VARROCK(
            "LMS - Wild Varrock", 13918, 13919, 13920, 14174, 14175, 14176, 14430, 14431, 14432),
    MG_MAGE_TRAINING_ARENA("Mage Training Arena", 13462, 13463),
    MG_NIGHTMARE_ZONE("Nightmare Zone", 9033),
    MG_PEST_CONTROL("Pest Control", 10536),
    MG_PORT_SARIM_RAT_PITS("Port Sarim Rat Pits", 11926),
    MG_PYRAMID_PLUNDER("Pyramid Plunder", 7749),
    MG_ROGUES_DEN("Rogues' Den", 11854, 11855, 12109, 12110, 12111),
    MG_SORCERESS_GARDEN("Sorceress's Garden", 11605),
    MG_SOUL_WARS("Soul Wars", 8493, 8748, 8749, 9005),
    MG_TEMPLE_TREKKING("Temple Trekking", 8014, 8270, 8256, 8782, 9038, 9294, 9550, 9806),
    MG_TITHE_FARM("Tithe Farm", 7222),
    MG_TROUBLE_BREWING("Trouble Brewing", 15150),
    MG_TZHAAR_FIGHT_CAVES("Tzhaar Fight Caves", 9551),
    MG_TZHAAR_FIGHT_PITS("Tzhaar Fight Pits", 9552),
    MG_VARROCK_RAT_PITS("Varrock Rat Pits", 11599),
    MG_VOLCANIC_MINE("Volcanic Mine", 15263, 15262),
    MG_GUARDIANS_OF_THE_RIFT("Guardians of the Rift", 14484),

    // Raids
    RAIDS_CHAMBERS_OF_XERIC(
            "Chambers of Xeric",
            12889,
            13136,
            13137,
            13138,
            13139,
            13140,
            13141,
            13145,
            13393,
            13394,
            13395,
            13396,
            13397,
            13401),
    RAIDS_THEATRE_OF_BLOOD(
            "Theatre of Blood", 12611, 12612, 12613, 12867, 12869, 13122, 13123, 13125, 13379),

    // Other
    REGION_ABYSSAL_AREA("Abyssal Area", 12108),
    REGION_ABYSSAL_NEXUS("Abyssal Nexus", 12106),
    REGION_AGILITY_PYRAMID("Agility Pyramid", 12105, 13356),
    REGION_AIR_ALTAR("Air Altar", 11339),
    REGION_AL_KHARID_MINE("Al Kharid Mine", 13107),
    REGION_APE_ATOLL("Ape Atoll", 10794, 10795, 10974, 11050),
    REGION_ARANDAR("Arandar", 9266, 9267, 9523),
    REGION_ASGARNIA("Asgarnia", 11825, 11829, 11830, 12085, 12086),
    REGION_BATTLEFIELD("Battlefield", 10034),
    REGION_BATTLEFRONT("Battlefront", 5433, 5434),
    REGION_BLAST_MINE("Blast Mine", 5948),
    REGION_BODY_ALTAR("Body Altar", 10059),
    REGION_CHAOS_ALTAR("Chaos Altar", 9035),
    REGION_COSMIC_ALTAR("Cosmic Altar", 8523),
    REGION_COSMIC_ENTITYS_PLANE("Cosmic Entity's Plane", 8267),
    REGION_CRABCLAW_ISLE("Crabclaw Isle", 6965),
    REGION_CRAFTING_GUILD("Crafting Guild", 11571),
    REGION_CRANDOR("Crandor", 11314, 11315),
    REGION_CRASH_ISLAND("Crash Island", 11562),
    REGION_DARK_ALTAR("Dark Altar", 6716),
    REGION_DEATH_ALTAR("Death Altar", 8779),
    REGION_DEATH_PLATEAU("Death Plateau", 11320),
    REGION_DENSE_ESSENCE("Dense Essence Mine", 6972),
    REGION_DESERT_PLATEAU("Desert Plateau", 13361, 13617),
    REGION_DIGSITE("Digsite", 13365),
    REGION_DRAGONTOOTH("Dragontooth Island", 15159),
    REGION_DRAYNOR_MANOR("Draynor Manor", 12340),
    REGION_DRILL_SERGEANT("Drill Sergeant's Training Camp", 12619),
    REGION_EAGLES_PEAK("Eagles' Peak", 9270),
    REGION_EARTH_ALTAR("Earth Altar", 10571),
    REGION_ENCHANTED_VALLEY("Enchanted Valley", 12102),
    REGION_EVIL_TWIN("Evil Twin Crane Room", 7504),
    REGION_EXAM_CENTRE("Exam Centre", 13364),
    REGION_FALADOR_FARM("Falador Farm", 12083),
    REGION_FARMING_GUILD("Farming Guild", 4922),
    REGION_FELDIP_HILLS("Feldip Hills", 9773, 9774, 10029, 10030, 10285, 10286, 10287, 10542, 10543),
    REGION_FENKENSTRAIN("Fenkenstrain's Castle", 14135),
    REGION_FIGHT_ARENA("Fight Arena", 10289),
    REGION_FIRE_ALTAR("Fire Altar", 10315),
    REGION_FISHER_REALM("Fisher Realm", 10569),
    REGION_FISHING_GUILD("Fishing Guild", 10293),
    REGION_FISHING_PLATFORM("Fishing Platform", 11059),
    REGION_FORSAKEN_TOWER("The Forsaken Tower", 5435),
    REGION_FOSSIL_ISLAND(
            "Fossil Island", 14650, 14651, 14652, 14906, 14907, 14908, 15162, 15163, 15164),
    REGION_FREAKY_FORESTER("Freaky Forester's Clearing", 10314),
    REGION_FREMENNIK("Fremennik Province", 10296, 10552, 10808, 10809, 10810, 10811, 11064),
    REGION_FREMENNIK_ISLES("Fremennik Isles", 9276, 9532),
    REGION_FROGLAND("Frogland", 9802),
    REGION_GALVEK_SHIPWRECKS("Galvek Shipwrecks", 6486, 6487, 6488, 6489, 6742, 6743, 6744, 6745),
    REGION_SOTE_BOSSFIGHT("Song of the Elves", 13148),
    REGION_GORAKS_PLANE("Gorak's Plane", 12115),
    REGION_GRAND_EXCHANGE("Grand Exchange", 12598),
    REGION_GWD("God Wars Dungeon", 11578),
    REGION_HARMONY("Harmony Island", 15148),
    REGION_HAZELMERE("Hazelmere's Island", 10544),
    REGION_ICE_PATH("Ice Path", 11322, 11323),
    REGION_ICEBERG("Iceberg", 10558, 10559),
    REGION_ICYENE_GRAVEYARD("Icyene Graveyard", 14641, 14897, 14898),
    REGION_ISAFDAR("Isafdar", 8497, 8753, 8754, 9009, 9010),
    REGION_ISLAND_OF_STONE("Island of Stone", 9790),
    REGION_ISLE_OF_SOULS(
            "Isle of Souls",
            8236,
            8237,
            8238,
            8491,
            8492,
            8494,
            8747,
            8750,
            9003,
            9004,
            9006,
            9260,
            9261,
            9262),
    REGION_JIGGIG("Jiggig", 9775),
    REGION_KANDARIN(
            "Kandarin",
            9268,
            9269,
            9014,
            9263,
            9264,
            9519,
            9524,
            9527,
            9776,
            9783,
            10037,
            10290,
            10294,
            10546,
            10551,
            10805,
            11062),
    REGION_KARAMJA(
            "Karamja", 10801, 10802, 11054, 11311, 11312, 11313, 11566, 11567, 11568, 11569, 11822),
    REGION_KEBOS_LOWLANDS("Kebos Lowlands", 4665, 4666, 4667, 4921, 5178),
    REGION_KEBOS_SWAMP("Kebos Swamp", 4664, 4920, 5174, 5175, 5176, 5430, 5431),
    REGION_KHARAZI_JUNGLE("Kharazi Jungle", 11053, 11309, 11565, 11821),
    REGION_KHARIDIAN_DESERT(
            "Kharidian Desert",
            12587,
            12844,
            12845,
            12846,
            12847,
            12848,
            13100,
            13101,
            13102,
            13103,
            13104,
            13357,
            13359,
            13360,
            13614,
            13615,
            13616),
    REGION_KILLERWATT_PLANE("Killerwatt Plane", 10577),
    REGION_KOUREND("Great Kourend", 6201, 6457, 6713),
    REGION_KOUREND_WOODLAND("Kourend Woodland", 5942, 6197, 6453),
    REGION_LAW_ALTAR("Law Altar", 9803),
    REGION_LEGENDS_GUILD("Legends' Guild", 10804),
    REGION_LIGHTHOUSE("Lighthouse", 10040),
    REGION_LITHKREN("Lithkren", 14142, 14398),
    REGION_LUMBRIDGE_SWAMP("Lumbridge Swamp", 12593, 12849),
    REGION_MAX_ISLAND("Max Island", 11063),
    REGION_MCGRUBORS_WOOD("McGrubor's Wood", 10550),
    REGION_MIME_STAGE("Mime's Stage", 8010),
    REGION_MIND_ALTAR("Mind Altar", 11083),
    REGION_MISTHALIN("Misthalin", 12594, 12595, 12851),
    REGION_MOLCH("Molch", 5177),
    REGION_MOLCH_ISLAND("Molch Island", 5432),
    REGION_MORYTANIA(
            "Morytania",
            13619,
            13620,
            13621,
            13622,
            13876,
            13877,
            13879,
            14133,
            14134,
            14389,
            14390,
            14391,
            14645,
            14647),
    REGION_MOUNT_QUIDAMORTEM("Mount Quidamortem", 4662, 4663, 4918, 4919),
    REGION_MR_MORDAUTS_CLASSROOM("Mr. Mordaut's Classroom", 7502),
    REGION_MUDSKIPPER("Mudskipper Point", 11824),
    REGION_MYSTERIOUS_OLD_MAN_MAZE("Mysterious Old Man's Maze", 11590, 11591, 11846, 11847),
    REGION_MYTHS_GUILD("Myths' Guild", 9772),
    REGION_NATURE_ALTAR("Nature Altar", 9547),
    REGION_NORTHERN_TUNDRAS("Northern Tundras", 6204, 6205, 6717),
    REGION_OBSERVATORY("Observatory", 9777),
    REGION_ODD_ONE_OUT("Odd One Out", 7754),
    REGION_OTTOS_GROTTO("Otto's Grotto", 10038),
    REGION_OURANIA_HUNTER("Ourania Hunter Area", 9778),
    REGION_PIRATES_COVE("Pirates' Cove", 8763),
    REGION_PISCATORIS_HUNTER_AREA("Piscatoris Hunter Area", 9015, 9016, 9271, 9272, 9528),
    REGION_POH("Player Owned House", 7513, 7514, 7769, 7770),
    REGION_POISON_WASTE("Poison Waste", 8752),
    REGION_PORT_TYRAS("Port Tyras", 8496),
    REGION_PURO_PURO("Puro Puro", 10307),
    REGION_QUARRY("Quarry", 12589),
    REGION_RANGING_GUILD("Ranging Guild", 10549),
    REGION_RATCATCHERS_MANSION("Ratcatchers Mansion", 11343),
    REGION_RUINS_OF_UNKAH("Ruins of Unkah", 12588),
    REGION_RUNE_ESSENCE_MINE("Rune Essence Mine", 11595),
    // The Beekeper, Pinball, and Gravedigger randoms share a region (7758), and although they are
    // not technically ScapeRune, that name is most commonly
    // associated with random events, so those three have been denoted ScapeRune to avoid leaving
    // multiple random event regions without an assigned name.
    REGION_SCAPERUNE("ScapeRune", 10058, 7758, 8261),
    REGION_SEA_SPIRIT_DOCK("Sea Spirit Dock", 12332),
    REGION_SHIP_YARD("Ship Yard", 11823),
    REGION_SILVAREA("Silvarea", 13366),
    REGION_SINCLAR_MANSION("Sinclair Mansion", 10807),
    REGION_SLAYER_TOWER("Slayer Tower", 13623, 13723),
    REGION_SOUL_ALTAR("Soul Altar", 7228),
    REGION_TROLL_ARENA("Troll Arena", 11576),
    REGION_TROLLHEIM("Trollheim", 11577),
    REGION_TROLLWEISS_MTN("Trollweiss Mountain", 11066, 11067, 11068),
    REGION_TUTORIAL_ISLAND("Tutorial Island", 12079, 12080, 12335, 12336, 12436, 12592),
    REGION_UNDERWATER("Underwater", 15008, 15264),
    REGION_WATER_ALTAR("Water Altar", 10827),
    REGION_WATERBIRTH_ISLAND("Waterbirth Island", 10042),
    REGION_WINTERTODT_CAMP("Wintertodt Camp", 6461),
    REGION_WIZARDS_TOWER("Wizards' Tower", 12337),
    REGION_WOODCUTTING_GUILD("Woodcutting Guild", 6198, 6454),
    REGION_WRATH_ALTAR("Wrath Altar", 9291),

    // Wilderness
    WILDERNESS_1_8("Wilderness 1-8", 11831, 12087, 12343, 12599, 12855, 13111, 13367),
    WILDERNESS_9_16("Wilderness 9-16", 11832, 12088, 12344, 12600, 12856, 13112, 13368),
    WILDERNESS_17_24("Wilderness 17-24", 11833, 12089, 12345, 12601, 12857, 13113, 13369),
    WILDERNESS_25_32("Wilderness 25-32", 11834, 12090, 12346, 12602, 12858, 13114, 13370),
    WILDERNESS_33_40("Wilderness 33-40", 11835, 12091, 12347, 12603, 12859, 13115, 13371),
    WILDERNESS_41_48("Wilderness 41-48", 11836, 12092, 12348, 12604, 12860, 13116, 13372),
    WILDERNESS_49_56("Wilderness 49-56", 11837, 12093, 12349, 12605, 12861, 13117, 13373);

    private static final Map<Integer, Region> FROM_REGION;

    static {
        ImmutableMap.Builder<Integer, Region> regionMapBuilder = new ImmutableMap.Builder<>();
        for (Region region : Region.values()) {
            for (int regionId : region.ids) {
                regionMapBuilder.put(regionId, region);
            }
        }
        FROM_REGION = regionMapBuilder.build();
    }

    private final String name;
    private final int[] ids;

    Region(String name, int... ids) {
        this.name = name;
        this.ids = ids;
    }

    public static Region get(final int regionId) {
        return FROM_REGION.get(regionId);
    }
}
package runelite.untrimmed;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.awt.*;

public class WarningOverlay extends OverlayPanel {

    private final UntrimmedConfig config;
    private final Client client;

    private String message;

    private boolean isSafe;

    @Inject
    private WarningOverlay(UntrimmedConfig config, Client client) {
        this.config = config;
        this.client = client;
        this.message = "Placeholder";
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public void setIsSafe(boolean isSafe) {
        this.isSafe = isSafe;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        panelComponent.getChildren().clear();

        panelComponent.getChildren().add((LineComponent.builder())
                .left(message)
                .build());

        if (isSafe) {
            panelComponent.setBackgroundColor(config.safeColor());
        } else if (config.shouldFlash()) {
            if (client.getGameCycle() % 40 >= 20) {
                panelComponent.setBackgroundColor(config.flashColor1());
            } else {
                panelComponent.setBackgroundColor(config.flashColor2());
            }
        } else {
            panelComponent.setBackgroundColor(config.flashColor1());
        }

        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
        return panelComponent.render(graphics);
    }
}
package runelite.untrimmed;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.Skill;
import net.runelite.api.events.*;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;

@Slf4j
@PluginDescriptor(
        name = "Untrimmed Warning"
)
public class UntrimmedPlugin extends Plugin {
    @Inject
    private Client client;

    @Inject
    private UntrimmedConfig config;

    @Inject
    private ConfigManager configManager;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private WarningOverlay overlay;

    private CapeManager capeManager;

    private SkillXpManager skillXpManager;

    private boolean finishedInitializingCharacter = false;

    @Override
    protected void startUp() throws Exception {
        finishedInitializingCharacter = false;
        capeManager = new CapeManager(client, configManager);
        skillXpManager = new SkillXpManager(client);
    }

    @Override
    protected void shutDown() {
        capeManager.shutDown();
    }

    @Subscribe
    void onActorDeath(ActorDeath actorDeath) {
        if (client.getLocalPlayer() == null || actorDeath.getActor() != client.getLocalPlayer()) {
            return;
        }
        capeManager.onActorDeath(actorDeath);
    }

    @Subscribe
    public void onStatChanged(StatChanged statChanged) {
        if (finishedInitializingCharacter) {
            skillXpManager.fetchSkillXp();
            updateCapeInfoBox();
        }
    }

    @Subscribe
    public void onGameTick(GameTick event) {
        // on login it will add xp to the character 1 skill at a time, we know this is finished after the first game tick happens
        if (!finishedInitializingCharacter) {
            finishedInitializingCharacter = true;
            skillXpManager.fetchSkillXp();
            updateCapeInfoBox();
        }
    }

    @Subscribe
    public void onItemContainerChanged(ItemContainerChanged itemContainerChanged) {
        capeManager.onItemContainerChanged(itemContainerChanged);
        updateCapeInfoBox();
    }

    @Subscribe
    public void onItemSpawned(ItemSpawned itemSpawned) {
        capeManager.onItemSpawned(itemSpawned);
    }

    @Subscribe
    public void onItemDespawned(ItemDespawned itemDespawned) {
        capeManager.onItemDespawned(itemDespawned);
    }

    @Subscribe
    public void onMenuEntryAdded(MenuEntryAdded event) {
        MenuAction type = MenuAction.of(event.getType());
        if (type == MenuAction.GROUND_ITEM_FIRST_OPTION || type == MenuAction.GROUND_ITEM_SECOND_OPTION ||
                type == MenuAction.GROUND_ITEM_THIRD_OPTION || type == MenuAction.GROUND_ITEM_FOURTH_OPTION ||
                type == MenuAction.GROUND_ITEM_FIFTH_OPTION || type == MenuAction.WIDGET_TARGET_ON_GROUND_ITEM) {
            final int itemId = event.getIdentifier();

            MenuEntry[] menuEntries = client.getMenuEntries();
            MenuEntry lastEntry = menuEntries[menuEntries.length - 1];

            if (config.hidePickup() && capeManager.isUntrimmedCape(itemId)) {
                lastEntry.setDeprioritized(true);
            }
        }
    }


    @Subscribe
    public void onConfigChanged(ConfigChanged event) {
        if (!event.getGroup().equals(UntrimmedConfig.CONFIG_GROUP)) {
            return;
        }

        if (finishedInitializingCharacter) {
            updateCapeInfoBox();
        }
    }

    private void updateCapeInfoBox() {
        if (!skillXpManager.hasAny99() || skillXpManager.isMaxed()) {
            hideOverlay();
            return;
        }

        if (skillXpManager.isCloseToNew99(config.warningXpRange())) {
            showOverlay(skillXpManager.closestNew99(), capeManager.capeLocation());
        } else {
            hideOverlay();
        }
    }

    private void showOverlay(Skill closestNew99, CapeStorageLocation capeStorageLocation) {
        overlayManager.remove(overlay);
        String message = "Near 99 " + closestNew99.getName() + ". " + capeStorageLocation.capeStatus();
        overlay.setMessage(message);
        overlay.setIsSafe(capeStorageLocation.isSafe());
        overlayManager.add(overlay);
    }

    private void hideOverlay() {
        overlayManager.remove(overlay);
    }

    @Provides
    UntrimmedConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(UntrimmedConfig.class);
    }

    // TODO add ability to switch between profiles like dudewheresmystuff does it
}

