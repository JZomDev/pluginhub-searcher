package com.laur92.runelite.plugins;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ItemXPPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ItemXPPlugin.class);
		RuneLite.main(args);
	}
}
package com.laur92.runelite.plugins;

import com.laur92.runelite.plugins.skills.farming.Compost;
import com.laur92.runelite.plugins.skills.prayer.POHAltar;
import net.runelite.client.config.*;

@ConfigGroup(ItemXPConfig.CONFIG_GROUP)
public interface ItemXPConfig extends Config
{
    String CONFIG_GROUP = "itemXP";
    String PLUGIN_VERSION = "PLUGIN_VERSION";

    String SHOW_LEVEL_REQUIREMENT = "SHOW_LEVEL_REQUIREMENT";
    String SHOW_STACK_CALCULATIONS = "SHOW_STACK_CALCULATIONS";
    String SHOW_SKILL_FARMING = "SHOW_SKILL_FARMING";
    String SHOW_SKILL_PRAYER = "SHOW_SKILL_PRAYER";
    String SHOW_SKILL_FIREMAKING = "SHOW_SKILL_FIREMAKING";
    String SHOW_SKILL_FLETCHING = "SHOW_SKILL_FLETCHING";
    String FARMING_SHOW_RANGE = "FARMING_SHOW_RANGE";
    String FARMING_SHOW_EXPECTED_YIELD = "FARMING_SHOW_EXPECTED_YIELD";
    String FARMING_COMPOST_TYPE = "FARMING_COMPOST_TYPE";
    String FARMING_MAGIC_SECATEURS = "FARMING_MAGIC_SECATEURS";
    String FARMING_SKILL_CAPE = "FARMING_SKILL_CAPE";
    String FARMING_ATTAS = "FARMING_ATTAS";
    String PRAYER_SHOW_ECTO = "PRAYER_SHOW_ECTO";
    String PRAYER_POH_ALTAR = "PRAYER_POH_ALTAR";
    String PRAYER_POH_BURNERS = "PRAYER_POH_BURNERS";
    String PRAYER_CHAOS_TEMPLE = "PRAYER_CHAOS_TEMPLE";
    String PRAYER_OFFERING_SPELLS = "PRAYER_OFFERING_SPELLS";
    String FIREMAKING_SHOW_CAMPFIRE = "FIREMAKING_SHOW_CAMPFIRE";
    String FIREMAKING_SHOW_PYRE = "FIREMAKING_SHOW_PYRE";

    @ConfigSection(
            name = "Overall",
            description = "Overall settings for all tooltips",
            position = 0
    )
    String overallSection = "OVERALL_SECTION";

    @ConfigSection(
            name = "Skills",
            description = "Settings to turn on/off specific skills",
            position = 1
    )
    String skillsSection = "SKILLS_SECTION";

    @ConfigSection(
            name = "Farming",
            description = "Farming specfic settings",
            position = 2,
            closedByDefault = true
    )
    String farmingSkillSection = "FARMING_SKILL_SECTION";

    @ConfigSection(
            name = "Prayer",
            description = "Prayer specfic settings",
            position = 3,
            closedByDefault = true
    )
    String prayerSkillSection = "PRAYER_SKILL_SECTION";

    @ConfigSection(
            name = "Firemaking",
            description = "Firemaking specific settings",
            position = 4,
            closedByDefault = true
    )
    String firemakingSkillSection = "FIREMAKING_SKILL_SECTION";


    @ConfigItem(
            keyName = PLUGIN_VERSION,
            name = "Plugin Version",
            section = overallSection,
            description = "Last loaded plugin version",
            secret = true,
            hidden = true
    )
    default String pluginVersion() { return "0.1"; }

    @ConfigItem(
            position = 0,
            keyName = SHOW_LEVEL_REQUIREMENT,
            name = "Show Level Requirement",
            section = overallSection,
            description = "Configure whether to show the level requirement to use an item"
    )
    default boolean showLevelRequirement()
    {
        return true;
    }

    @ConfigItem(
            position = 1,
            keyName = SHOW_STACK_CALCULATIONS,
            name = "Show Stack XP",
            section = overallSection,
            description = "Also show XP for using entire stack in addition to per item"
    )
    default boolean showStackCalculations() { return true; }


    @ConfigItem(
            position = 0,
            keyName = SHOW_SKILL_FARMING,
            name = "Farming",
            section = skillsSection,
            description = "Show farming related XP on items",
            warning = "This plugin does not take into account the effects of disease or death; all plants are assumed to survive"
    )
    default boolean showFarmingSkill()
    {
        return true;
    }
    @ConfigItem(
            position = 1,
            keyName = SHOW_SKILL_PRAYER,
            name = "Prayer",
            section = skillsSection,
            description = "Show prayer related XP on items"
    )
    default boolean showPrayerSkill()
    {
        return true;
    }

    @ConfigItem(
            position = 2,
            keyName = SHOW_SKILL_FIREMAKING,
            name = "Firemaking",
            section = skillsSection,
            description = "Show firemaking related XP on items"
    )
    default boolean showFiremakingSkill()
    {
        return true;
    }

    @ConfigItem(
            position = 3,
            keyName = SHOW_SKILL_FLETCHING,
            name = "Fletching",
            section = skillsSection,
            description = "Show fletching related XP on items",
            hidden = true
    )
    default boolean showFletchingSkill()
    {
        return true;
    }

    @ConfigItem(
            position = 0,
            keyName = FARMING_SHOW_RANGE,
            name = "Show Yield Range",
            section = farmingSkillSection,
            description = "Show min/max yield from plants"
    )
    default boolean showFarmingYieldRange() { return true; }

    @ConfigItem(
            position = 1,
            keyName = FARMING_SHOW_EXPECTED_YIELD,
            name = "Show Expected Yield",
            section = farmingSkillSection,
            description = "Show the expected number of items harvested for crops",
            warning = "This will be based on other settings in this section"
    )
    default boolean showFarmingExpectedYield() { return true; }

    @ConfigItem(
            position = 2,
            keyName = FARMING_COMPOST_TYPE,
            name = "Compost",
            section = farmingSkillSection,
            description = "The type of compost you use, for harvest calculations"
    )
    default Compost compostType() { return Compost.NONE; }


    @ConfigItem(
            position = 3,
            keyName = FARMING_MAGIC_SECATEURS,
            name = "Magic Secateurs",
            section = farmingSkillSection,
            description = "If you are wielding magic secateurs for harvest bonus"
    )
    default boolean farmingUsingMagicSecateurs() { return false; }

    @ConfigItem(
            position = 4,
            keyName = FARMING_SKILL_CAPE,
            name = "Skill Cape",
            section = farmingSkillSection,
            description = "If you are wearing a farming or max cape"
    )
    default boolean farmingUsingSkillCape() { return false; }

    @ConfigItem(
            position = 5,
            keyName = FARMING_ATTAS,
            name = "Attas Plant",
            section = farmingSkillSection,
            description = "If you have an attas plant growing in the anima patch at the Farming Guild"
    )
    default boolean farmingUsingAttas() { return false; }


    @ConfigItem(
            position = 0,
            keyName = PRAYER_SHOW_ECTO,
            name = "Show Ecto",
            section = prayerSkillSection,
            description = "Show ectofuntus worship experience on bones"
    )
    default boolean prayerShowEcto() { return true; }

    @ConfigItem(
            position = 1,
            keyName = PRAYER_POH_ALTAR,
            name = "POH Altar",
            section = prayerSkillSection,
            description = "Type of altar for POH offering"
    )
    default POHAltar prayerPOHAltar() { return POHAltar.GILDED; }

    @ConfigItem(
            position = 2,
            keyName = PRAYER_POH_BURNERS,
            name = "POH Burners",
            section = prayerSkillSection,
            description = "Number of burners active for POH offering. This setting does nothing if No Altar is chosen above"
    )
    @Range(min = 0, max = 2)
    default int prayerPOHBurners() { return 2; }

    @ConfigItem(
            position = 3,
            keyName = PRAYER_CHAOS_TEMPLE,
            name = "Show Chaos Temple",
            section = prayerSkillSection,
            description = "Show chaos temple offering experience on bones"
    )
    default boolean prayerChaosTemple() { return true; }

    @ConfigItem(
            position = 4,
            keyName = PRAYER_OFFERING_SPELLS,
            name = "Show Offering Spells",
            section = prayerSkillSection,
            description = "Show demonic/sinister offering spell experience on demonic ashes/bones (requires 84/92 magic and arceuus spellbook)"
    )
    default boolean prayerOfferingSpells() { return true; }

    @ConfigItem(
            position = 0,
            keyName = FIREMAKING_SHOW_CAMPFIRE,
            name = "Show Campfire",
            section = firemakingSkillSection,
            description = "Show campfire related experience on logs"
    )
    default boolean firemakingShowCampfire() { return true; }

    @ConfigItem(
            position = 0,
            keyName = FIREMAKING_SHOW_PYRE,
            name = "Show Pyre",
            section = firemakingSkillSection,
            description = "Show experience for turning logs into pyre logs"
    )
    default boolean firemakingShowPyre() { return true; }



}

package com.laur92.runelite.plugins;

import com.google.inject.Inject;
import com.laur92.runelite.plugins.skills.farming.FarmingXP;
import com.laur92.runelite.plugins.skills.firemaking.FiremakingXP;
import com.laur92.runelite.plugins.skills.prayer.PrayerXP;
import net.runelite.api.Client;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.WidgetUtil;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;

import java.awt.*;

public class ItemXPOverlay extends Overlay
{
    private final TooltipManager tooltipManager;
    private final FarmingXP farmingXP;
    private final PrayerXP prayerXP;
    private final FiremakingXP firemakingXP;
    private final Client client;
    private final ItemManager itemManager;

    @Inject
    public ItemXPOverlay(Client client, TooltipManager tooltipManager,
                         FarmingXP farmingXP, PrayerXP prayerXP, FiremakingXP firemakingXP, ItemManager itemManager)
    {
        this.client = client;
        this.tooltipManager = tooltipManager;
        this.farmingXP = farmingXP;
        this.prayerXP = prayerXP;
        this.firemakingXP = firemakingXP;
        this.itemManager = itemManager;
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (client.isMenuOpen()) return null;

        var menu = client.getMenuEntries();
        var menuSize = menu.length;
        if (menuSize == 0) return null;

        var entry = menu[menuSize - 1];
        var widget = entry.getWidget();
        if (widget == null) return null;

        var group = WidgetUtil.componentToInterface(widget.getId());
        var itemId = -1;

        if (group == InterfaceID.EQUIPMENT ||
                // For bank worn equipment, check widget parent to differentiate from normal bank items
                (group == InterfaceID.BANK && widget.getParentId() == ComponentID.BANK_INVENTORY_EQUIPMENT_ITEM_CONTAINER))
        {
            var widgetItem = widget.getChild(1);
            if (widgetItem != null)
            {
                itemId = widgetItem.getItemId();
            }
        }
        else if (widget.getId() == ComponentID.INVENTORY_CONTAINER
                || group == InterfaceID.EQUIPMENT_INVENTORY
                || widget.getId() == ComponentID.BANK_ITEM_CONTAINER
                || group == InterfaceID.BANK_INVENTORY
                || widget.getId() == ComponentID.GROUP_STORAGE_ITEM_CONTAINER
                || group == InterfaceID.GROUP_STORAGE_INVENTORY)
        {
            itemId = widget.getItemId();
        }

        if (itemId == -1) return null;

        itemId = itemManager.canonicalize(itemId);

        var quantity = widget.getItemQuantity();

        var sb = new StringBuilder();
        var hasTooltip = false;

        var farming = farmingXP.getFarmingToolTip(itemId, quantity);
        if(farming != null)
        {
            sb.append(farming);
            hasTooltip = true;
        }

        var prayer = prayerXP.getPrayerToolTip(itemId, quantity);
        if(prayer != null)
        {
            sb.append(prayer);
            hasTooltip = true;
        }

        var firemaking = firemakingXP.getFiremakingToolTip(itemId, quantity);
        if(firemaking != null)
        {
            sb.append(firemaking);
            hasTooltip = true;
        }

        if(hasTooltip)
        {
            tooltipManager.add(new Tooltip(sb.toString()));
        }

        return null;
    }
}

package com.laur92.runelite.plugins.skills.prayer;

import com.laur92.runelite.plugins.ItemXPConfig;
import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.SkillColor;
import net.runelite.client.util.ColorUtil;

import javax.inject.Inject;
import java.awt.*;

import static com.laur92.runelite.plugins.ItemXPPlugin.NEW_LINE;
import static com.laur92.runelite.plugins.ItemXPPlugin.df;

public class PrayerXP
{
    private final ItemXPConfig config;
    private final Client client;

    @Inject
    public PrayerXP(ItemXPConfig config, Client client)
    {
        this.config = config;
        this.client = client;
    }

    public StringBuilder getPrayerToolTip(int itemID, int quantity)
    {
        if(itemID == -1) return null;
        if(!config.showPrayerSkill()) return null;

        PrayerItem item = PrayerItems.getPrayerItem(itemID);

        if(item == null) return null;

        StringBuilder sb = new StringBuilder();
        var currentLevel = client.getRealSkillLevel(Skill.PRAYER);

        sb.append(ColorUtil.wrapWithColorTag("Prayer", SkillColor.PRAYER.getColor()));

        if (config.showLevelRequirement())
        {
            sb.append(ColorUtil.wrapWithColorTag(" (lv ", ColorScheme.BRAND_ORANGE));
            sb.append(ColorUtil.wrapWithColorTag(Integer.toString(item.getLevel()), currentLevel >= item.getLevel() ? Color.GREEN : Color.RED));
            sb.append(ColorUtil.wrapWithColorTag(")", ColorScheme.BRAND_ORANGE));
        }

        switch(item.getItemType())
        {
            case BONES:
                addLine(sb, "Bury", item.getXp(), quantity, null);
                if(config.prayerShowEcto())
                {
                    addLine(sb, "Ecto-worship", item.getXp() * 4, quantity, ColorUtil.fromHex("#8ac485"));
                }
                if(config.prayerPOHAltar() != POHAltar.NONE)
                {
                    var multiplier = config.prayerPOHAltar().altar.getMultiplierNoBurners() + 0.5*config.prayerPOHBurners();
                    addLine(sb, config.prayerPOHAltar().altar.getName(), item.getXp() * multiplier, quantity, ColorUtil.fromHex("#f1c41c"));
                    switch(config.prayerPOHBurners())
                    {
                        case 0:
                            sb.append(" (no burners)");
                            break;
                        case 1:
                            sb.append(" (1 burner)");
                            break;
                        case 2:
                            sb.append(" (2 burners)");
                            break;
                    }
                }
                if(config.prayerChaosTemple())
                {
                    addLine(sb, "Chaos temple worship", item.getXp() * 3.5, quantity, ColorUtil.fromHex("#f6341d"));
                }
                if(config.prayerOfferingSpells())
                {
                    addLine(sb, "Sinister offering", item.getXp() * 3, quantity, ColorUtil.fromHex("#422a29"));
                    sb.append(" (req ");
                    sb.append(ColorUtil.wrapWithColorTag(Integer.toString(92), client.getBoostedSkillLevel(Skill.MAGIC) >= 92 ? Color.GREEN : Color.RED));
                    sb.append(" ");
                    sb.append(ColorUtil.wrapWithColorTag("Magic", SkillColor.MAGIC.getColor()));
                    sb.append(")");
                }
                break;
            case BONEMEAL:
                addLine(sb, "Ecto-worship", item.getXp(), quantity, ColorUtil.fromHex("#8ac485"));
                break;
            case ENRICHED_BONE:
                addLine(sb, "Strange machine", item.getXp(), quantity, null);
                break;
            case GOBLIN_PRIEST_BONE:
                addLine(sb, "Bury in Yu'biusk", item.getXp(), quantity, null);
                break;
            case ASHES:
                addLine(sb, "Scatter", item.getXp(), quantity, null);
                if(config.prayerOfferingSpells())
                {
                    addLine(sb, "Demonic offering", item.getXp() * 3, quantity, ColorUtil.fromHex("#6373bd"));
                    sb.append(" (req ");
                    sb.append(ColorUtil.wrapWithColorTag(Integer.toString(84), client.getBoostedSkillLevel(Skill.MAGIC) >= 84 ? Color.GREEN : Color.RED));
                    sb.append(" ");
                    sb.append(ColorUtil.wrapWithColorTag("Magic", SkillColor.MAGIC.getColor()));
                    sb.append(")");
                }
                break;
            case SHADE_REMAINS:
                //TODO
                break;
            case FISH_OFFERING:
                addLine(sb, "Offer at Camdozaal altar", item.getXp(), quantity, null);
                break;
            case DARK_ALTAR:
                addLine(sb, "Sacrifice at Dark altar", item.getXp(), quantity, null);
                break;
            case EGG_OFFERING:
                addLine(sb, "Offer to shrine", item.getXp(), quantity, null);
                break;
            case BRAZIER:
                addLine(sb, "Offer to saradomin brazier", item.getXp(), quantity, null);
                sb.append(NEW_LINE);
                sb.append(ColorUtil.wrapWithColorTag("Two dust used at a time unless wearing Hallowed symbol", Color.GRAY));
                break;
            case ELIDINIS_WARD:
                addLine(sb, "Fortify", item.getXp(), quantity, null);
                sb.append(" (req ");
                sb.append(ColorUtil.wrapWithColorTag(Integer.toString(90), client.getBoostedSkillLevel(Skill.SMITHING) >= 90 ? Color.GREEN : Color.RED));
                sb.append(" ");
                sb.append(ColorUtil.wrapWithColorTag("Smithing", SkillColor.SMITHING.getColor()));
                sb.append(")");
                break;
        }

        return sb;
    }

    private void addLine(StringBuilder sb, String method, double xp, int quantity, Color colour)
    {
        sb.append(NEW_LINE);
        if(colour != null)
        {
            sb.append(ColorUtil.wrapWithColorTag(method, colour));
        }
        else
        {
            sb.append(method);
        }
        sb.append(": ");
        sb.append(df.format(xp));
        sb.append("xp");
        if(config.showStackCalculations() && quantity > 1)
        {
            sb.append(ColorUtil.colorTag(Color.CYAN));
            sb.append(" (Stack: ");
            sb.append(df.format(xp*quantity));
            sb.append("xp)");
            sb.append(ColorUtil.CLOSING_COLOR_TAG);
        }
    }
}

package com.laur92.runelite.plugins.skills.prayer;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class POHAltarType
{
    private final String name;
    private final double multiplierNoBurners;
}


package com.laur92.runelite.plugins.skills.prayer;

import lombok.Builder;
import lombok.Getter;
import lombok.ToString;

import java.util.Set;

@Builder
@Getter
@ToString
public class PrayerItem
{
    private Set<Integer> itemIDs;
    private PrayerItemType itemType;
    @Builder.Default private int level = 1;
    private double xp;
}

package com.laur92.runelite.plugins.skills.prayer;

import com.google.common.collect.ImmutableSet;
import net.runelite.api.ItemID;

import java.util.*;

public enum PrayerItems
{
    // STANDARD BONES
    BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BONES))
            .itemType(PrayerItemType.BONES)
            .xp(4.5)
            .build()),
    BURNT_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BURNT_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(4.5)
            .build()),
    WOLF_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.WOLF_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(4.5)
            .build()),
    BAT_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BAT_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(5.3)
            .build()),
    BIG_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BIG_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(15)
            .build()),
    SHAIKAHAN_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.SHAIKAHAN_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(25)
            .build()),
    DAGANNOTH_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.DAGANNOTH_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(125)
            .build()),



    //DRACONIC BONES
    BABYDRAGON_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BABYDRAGON_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(30)
            .build()),
    DRAGON_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.DRAGON_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(72)
            .build()),
    DRAKE_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.DRAKE_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(80)
            .build()),
    HYDRA_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.HYDRA_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(110)
            .build()),
    LAVA_DRAGON_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.LAVA_DRAGON_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(85)
            .build()),
    WYRM_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.WYRM_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(50)
            .build()),
    WYVERN_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.WYVERN_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(72)
            .build()),
    SUPERIOR_DRAGON_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.SUPERIOR_DRAGON_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(150)
            .level(70)
            .build()),



    //SIMIAN BONES
    MONKEY_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.MONKEY_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(5)
            .build()),
    SMALL_ZOMBIE_MONKEY_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.SMALL_ZOMBIE_MONKEY_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(5)
            .build()),
    LARGE_ZOMBIE_MONKEY_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.LARGE_ZOMBIE_MONKEY_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(5)
            .build()),
    GORILLA_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.GORILLA_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(18)
            .build()),
    BEARDED_GORILLA_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BEARDED_GORILLA_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(18)
            .build()),
    SMALL_NINJA_MONKEY_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.SMALL_NINJA_MONKEY_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(16)
            .build()),
    MEDIUM_NINJA_MONKEY_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.MEDIUM_NINJA_MONKEY_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(18)
            .build()),
    SKELETON_GORILLA_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BONES_3187)) //Assumption has been made these are the correct item
            .itemType(PrayerItemType.BONES)
            .xp(3)
            .build()),



    //OGRE BONES
    JOGRE_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.JOGRE_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(15)
            .build()),
    BURNT_JOGRE_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BURNT_JOGRE_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(16)
            .build()),

    //TODO: The item IDs on these could be wrong, need to check; refer issue 2
    PASTY_JOGRE_BONES_ONE(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.PASTY_JOGRE_BONES, ItemID.PASTY_JOGRE_BONES_3129))
            .itemType(PrayerItemType.BONES)
            .xp(17)
            .build()),
    PASTY_JOGRE_BONES_TWO(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.PASTY_JOGRE_BONES_3131, ItemID.PASTY_JOGRE_BONES_3132))
            .itemType(PrayerItemType.BONES)
            .xp(16)
            .build()),

    //TODO: The item IDs on these could be wrong, need to check; refer issue 2
    MARINATED_JOGRE_BONES_ONE(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.MARINATED_J_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(18)
            .build()),
    MARINATED_JOGRE_BONES_TWO(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.MARINATED_J_BONES_3133))
            .itemType(PrayerItemType.BONES)
            .xp(17)
            .build()),

    ZOGRE_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.ZOGRE_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(22.5)
            .build()),
    FAYRG_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.FAYRG_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(84)
            .build()),
    RAURG_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.RAURG_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(96)
            .build()),
    OURG_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.OURG_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(140)
            .build()),



    //BONEMEAL
    BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(18)
            .build()),
    WOLF_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.WOLF_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(18)
            .build()),
    BAT_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BAT_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(21.2)
            .build()),
    BIG_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BIG_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(60)
            .build()),
    BURNT_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BURNT_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(18)
            .build()),
    BURNT_JOGRE_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BURNT_JOGRE_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(64)
            .build()),
    BABY_DRAGON_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BABY_DRAGON_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(120)
            .build()),
    DRAGON_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.DRAGON_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(288)
            .build()),
    MONKEY_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.MONKEY_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(20)
            .build()),
    SMALL_NINJA_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.SMALL_NINJA_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(20)
            .build()),
    MEDIUM_NINJA_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.MEDIUM_NINJA_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(18)
            .build()),
    GORILLA_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.GORILLA_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(72)
            .build()),
    BEARDED_GORILLA_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BEARDED_GORILLA_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(72)
            .build()),
    SKELETON_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.SKELETON_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(12)
            .build()),
    SMALL_ZOMBIE_MONKEY_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.SMALL_ZOMBIE_MONKEY_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(20)
            .build()),
    LARGE_ZOMBIE_MONKEY_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.LARGE_ZOMBIE_MONKEY_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(18)
            .build()),
    JOGRE_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.JOGRE_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(60)
            .build()),
    ZOGRE_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.ZOGRE_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(90)
            .build()),
    FAYRG_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.FAYRG_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(336)
            .build()),
    RAURG_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.RAURG_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(384)
            .build()),
    OURG_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.HYDRA_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(560)
            .build()),
    SHAIKAHAN_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.SHAIKAHAN_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(100)
            .build()),
    DAGANNOTHKING_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.DAGANNOTHKING_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(500)
            .build()),
    WYVERN_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.WYVERN_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(288)
            .build()),
    LAVA_DRAGON_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.LAVA_DRAGON_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(340)
            .build()),
    SUPERIOR_DRAGON_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.SUPERIOR_DRAGON_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(600)
            .level(70)
            .build()),
    WYRM_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.WYRM_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(200)
            .build()),
    DRAKE_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.DRAKE_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(320)
            .build()),
    HYDRA_BONEMEAL(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.HYDRA_BONEMEAL))
            .itemType(PrayerItemType.BONEMEAL)
            .xp(440)
            .build()),



    //ENRICHED BONES
    SMALL_ENRICHED_BONE(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.SMALL_ENRICHED_BONE))
            .itemType(PrayerItemType.ENRICHED_BONE)
            .xp(500)
            .build()),
    MEDIUM_ENRICHED_BONE(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.MEDIUM_ENRICHED_BONE))
            .itemType(PrayerItemType.ENRICHED_BONE)
            .xp(1000)
            .build()),
    LARGE_ENRICHED_BONE(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.LARGE_ENRICHED_BONE))
            .itemType(PrayerItemType.ENRICHED_BONE)
            .xp(1500)
            .build()),
    RARE_ENRICHED_BONE(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.RARE_ENRICHED_BONE))
            .itemType(PrayerItemType.ENRICHED_BONE)
            .xp(2500)
            .build()),



    //SPECIAL BONES
    BLEACHED_BONES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BLEACHED_BONES))
            .itemType(PrayerItemType.BONES)
            .xp(4.5)
            .build()),
    CURVED_BONE(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.CURVED_BONE))
            .itemType(PrayerItemType.BONES)
            .xp(15)
            .build()),
    LONG_BONE(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.LONG_BONE))
            .itemType(PrayerItemType.BONES)
            .xp(15.1)
            .build()),



    //GOBLIN PRIESTS
    SNOTHEADS_BONE(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.SNOTHEADS_BONE))
            .itemType(PrayerItemType.GOBLIN_PRIEST_BONE)
            .xp(1250)
            .level(50)
            .build()),
    SNAILFEETS_BONE(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.SNAILFEETS_BONE))
            .itemType(PrayerItemType.GOBLIN_PRIEST_BONE)
            .xp(2500)
            .level(50)
            .build()),
    MOSSCHINS_BONE(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.MOSSCHINS_BONE))
            .itemType(PrayerItemType.GOBLIN_PRIEST_BONE)
            .xp(5000)
            .level(50)
            .build()),
    REDEYES_BONE(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.REDEYES_BONE))
            .itemType(PrayerItemType.GOBLIN_PRIEST_BONE)
            .xp(10000)
            .level(50)
            .build()),
    STRONGBONES_BONE(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.STRONGBONES_BONE))
            .itemType(PrayerItemType.GOBLIN_PRIEST_BONE)
            .xp(20000)
            .level(50)
            .build()),



    //DEMONIC ASHES
    FIENDISH_ASHES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.FIENDISH_ASHES))
            .itemType(PrayerItemType.ASHES)
            .xp(10)
            .build()),
    VILE_ASHES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.VILE_ASHES))
            .itemType(PrayerItemType.ASHES)
            .xp(25)
            .build()),
    MALICIOUS_ASHES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.MALICIOUS_ASHES))
            .itemType(PrayerItemType.ASHES)
            .xp(65)
            .build()),
    ABYSSAL_ASHES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.ABYSSAL_ASHES))
            .itemType(PrayerItemType.ASHES)
            .xp(85)
            .build()),
    INFERNAL_ASHES(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.INFERNAL_ASHES))
            .itemType(PrayerItemType.ASHES)
            .xp(110)
            .build()),



    //SHADE REMAINS
    //TODO: Later (issue 3)



    //FISH OFFERINGS
    GUPPY(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.GUPPY))
            .itemType(PrayerItemType.FISH_OFFERING)
            .xp(4)
            .build()),
    CAVEFISH(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.CAVEFISH))
            .itemType(PrayerItemType.FISH_OFFERING)
            .xp(7)
            .build()),
    TETRA(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.TETRA))
            .itemType(PrayerItemType.FISH_OFFERING)
            .xp(10)
            .build()),
    CATFISH(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.CATFISH))
            .itemType(PrayerItemType.FISH_OFFERING)
            .xp(16)
            .build()),



    //DARK ALTAR
    VORKATHS_HEAD(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.VORKATHS_HEAD))
            .itemType(PrayerItemType.DARK_ALTAR)
            .xp(1000)
            .build()),
    ABYSSAL_HEAD(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.ABYSSAL_HEAD))
            .itemType(PrayerItemType.DARK_ALTAR)
            .xp(2500)
            .build()),
    ALCHEMICAL_HYDRA_HEADS(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.ALCHEMICAL_HYDRA_HEADS))
            .itemType(PrayerItemType.DARK_ALTAR)
            .xp(2500)
            .build()),
    BASILISK_HEAD(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BASILISK_HEAD))
            .itemType(PrayerItemType.DARK_ALTAR)
            .xp(2500)
            .build()),
    COCKATRICE_HEAD(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.COCKATRICE_HEAD))
            .itemType(PrayerItemType.DARK_ALTAR)
            .xp(2500)
            .build()),
    CRAWLING_HAND(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.CRAWLING_HAND_7975))
            .itemType(PrayerItemType.DARK_ALTAR)
            .xp(2500)
            .build()),
    KBD_HEADS(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.KBD_HEADS))
            .itemType(PrayerItemType.DARK_ALTAR)
            .xp(2500)
            .build()),
    KQ_HEAD(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.KQ_HEAD))
            .itemType(PrayerItemType.DARK_ALTAR)
            .xp(2500)
            .build()),
    KURASK_HEAD(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.KURASK_HEAD))
            .itemType(PrayerItemType.DARK_ALTAR)
            .xp(2500)
            .build()),



    //MISCELLANEOUS
    BIRDS_EGG(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BIRDS_EGG, ItemID.BIRDS_EGG_5077, ItemID.BIRDS_EGG_5078))
            .itemType(PrayerItemType.EGG_OFFERING)
            .xp(100)
            .build()),
    VAMPYRE_DUST(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.VAMPYRE_DUST))
            .itemType(PrayerItemType.BRAZIER)
            .xp(200)
            .level(54)
            .build()),
    ELIDINIS_WARD(PrayerItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.ELIDINIS_WARD))
            .itemType(PrayerItemType.ELIDINIS_WARD)
            .xp(220)
            .level(90)
            .build()),
    ;

    private static final Map<Integer, List<PrayerItem>> idsToItem = new HashMap<>();

    static
    {
        Arrays.stream(values())
                .map(fi -> fi.item)
                .forEach(fi -> fi.getItemIDs().forEach(id -> {
                    if (!idsToItem.containsKey(id))
                    {
                        idsToItem.put(id, new ArrayList<>());
                    }
                    idsToItem.get(id).add(fi);
                }));
    }

    public final PrayerItem item;
    PrayerItems(PrayerItem item)
    {
        this.item = item;
    }

    public static PrayerItem getPrayerItem(int itemID)
    {
        if(!idsToItem.containsKey(itemID)) return null;

        return idsToItem.get(itemID).get(0);
    }
}

package com.laur92.runelite.plugins.skills.prayer;

public enum POHAltar
{
    NONE(POHAltarType.builder().name("No altar").multiplierNoBurners(1).build()),
    OAK(POHAltarType.builder().name("Oak altar").multiplierNoBurners(1).build()),
    TEAK(POHAltarType.builder().name("Teak altar").multiplierNoBurners(1.1).build()),
    CLOTH(POHAltarType.builder().name("Cloth altar").multiplierNoBurners(1.25).build()),
    MAHOGANY(POHAltarType.builder().name("Mahogany altar").multiplierNoBurners(1.5).build()),
    LIMESTONE(POHAltarType.builder().name("Limestone altar").multiplierNoBurners(1.75).build()),
    MARBLE(POHAltarType.builder().name("Marble altar").multiplierNoBurners(2).build()),
    GILDED(POHAltarType.builder().name("Gilded altar").multiplierNoBurners(2.5).build()),
    ;

    public final POHAltarType altar;
    POHAltar(POHAltarType altar) { this.altar = altar; }

    @Override
    public String toString()
    {
        return this.altar.getName();
    }
}

package com.laur92.runelite.plugins.skills.prayer;

public enum PrayerItemType
{
    BONES,
    BONEMEAL,
    ENRICHED_BONE,
    GOBLIN_PRIEST_BONE,
    ASHES,
    SHADE_REMAINS,
    FISH_OFFERING,
    DARK_ALTAR,
    EGG_OFFERING,
    BRAZIER,
    ELIDINIS_WARD
}

package com.laur92.runelite.plugins.skills.farming;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class CompostType
{
    private final String name;
    private final int harvestLives;
    private final int itemID;
    private final int xp;
}


package com.laur92.runelite.plugins.skills.farming;

import com.laur92.runelite.plugins.ItemXPConfig;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.JagexColors;
import net.runelite.client.ui.SkillColor;
import net.runelite.client.util.ColorUtil;

import javax.inject.Inject;
import java.awt.*;

import static com.laur92.runelite.plugins.ItemXPPlugin.NEW_LINE;
import static com.laur92.runelite.plugins.ItemXPPlugin.df;

@Slf4j
public class FarmingXP
{
    private final ItemXPConfig config;
    private final Client client;

    private static final Color plantColor = new Color(99, 46, 23);
    private static final Color checkHealthColor = new Color(92, 217, 197);
    private static final Color harvestColor = new Color(18, 121, 7);

    @Inject
    public FarmingXP(ItemXPConfig config, Client client)
    {
        this.config = config;
        this.client = client;
    }

    public StringBuilder getFarmingToolTip(int itemID, int quantity)
    {
        if(itemID == -1) return null;
        if(!config.showFarmingSkill()) return null;

        FarmingItem item = FarmingItems.getFarmingItem(itemID);
        CompostType compost = Compost.getCompost(itemID);

        if(item == null && compost == null) return null;

        StringBuilder sb = new StringBuilder();
        var currentLevel = client.getBoostedSkillLevel(Skill.FARMING);

        sb.append(ColorUtil.wrapWithColorTag("Farming", SkillColor.FARMING.getColor()));

        if(item != null)
        {
            if (config.showLevelRequirement())
            {
                sb.append(ColorUtil.wrapWithColorTag(" (lv ", ColorScheme.BRAND_ORANGE));
                sb.append(ColorUtil.wrapWithColorTag(Integer.toString(item.getLevel()), currentLevel >= item.getLevel() ? Color.GREEN : Color.RED));
                sb.append(ColorUtil.wrapWithColorTag(")", ColorScheme.BRAND_ORANGE));
            }

            sb.append(" ");
            sb.append(getPatchType(item));
            sb.append(" patch");
            sb.append(NEW_LINE);

            FarmingXPCalc calc = new FarmingXPCalc(item);

            addPlant(sb, item, calc, quantity);
            addCheckHealth(sb, item, calc);
            addHarvest(sb, item);
            if (config.showFarmingYieldRange()) addYieldRange(sb, item, calc);
            if (config.showFarmingExpectedYield()) addExpectedYield(sb, item, calc);
            addTotalRange(sb, calc);
            if (config.showFarmingExpectedYield()) addTotalExpected(sb, calc);

            if (config.showStackCalculations())
            {
                int numPlantings = quantity / item.getPlantQuantity();
                var stackCalc = new FarmingXPCalc(item, numPlantings);
                if (config.showFarmingExpectedYield()) addStackYield(sb, item, stackCalc, numPlantings);
                addStackRange(sb, stackCalc);
                if (config.showFarmingExpectedYield()) addStackExpected(sb, stackCalc);
            }
        }
        if(compost != null)
        {
            sb.append(": ");
            sb.append(df.format(compost.getXp()));
            sb.append("xp");
            if(config.showStackCalculations())
            {
                sb.append(NEW_LINE);
                sb.append(ColorUtil.colorTag(Color.CYAN));
                sb.append("Stack Total: ");
                sb.append(df.format((long) compost.getXp() * quantity));
                sb.append("xp");
                sb.append(ColorUtil.CLOSING_COLOR_TAG);
            }
        }

        return sb;
    }

    private void addPlant(StringBuilder sb, FarmingItem item, FarmingXPCalc calc, int quantity)
    {
        sb.append(ColorUtil.wrapWithColorTag("Plant: ", plantColor));
        sb.append(df.format(calc.getPlantXP()));
        sb.append("xp");
        if(item.getPlantQuantity() > 1)
        {
            sb.append(ColorUtil.wrapWithColorTag(" (", JagexColors.DARK_ORANGE_INTERFACE_TEXT));
            sb.append(ColorUtil.wrapWithColorTag(Integer.toString(item.getPlantQuantity()), quantity >= item.getPlantQuantity() ? Color.GREEN : Color.RED));
            sb.append(ColorUtil.wrapWithColorTag(" seeds)", JagexColors.DARK_ORANGE_INTERFACE_TEXT));
        }
    }

    private void addCheckHealth(StringBuilder sb, FarmingItem item, FarmingXPCalc calc)
    {
        if (!(item.getCheckHealthXP() > 0)) return;

        sb.append(NEW_LINE);
        sb.append(ColorUtil.wrapWithColorTag("Check Health: ", checkHealthColor));
        sb.append(df.format(calc.checkHealthXP));
        sb.append("xp");
    }

    private void addHarvest(StringBuilder sb, FarmingItem item)
    {
        if (!(item.getHarvestXP() > 0)) return;

        sb.append(NEW_LINE);
        sb.append(ColorUtil.wrapWithColorTag("Harvest: ", harvestColor));
        sb.append(df.format(item.getHarvestXP()));
        if(item.getPatchType() != FarmingPatchType.FLOWER)
        {
            sb.append("xp per ");
            sb.append(item.getName());
        }
        else
        {
            sb.append("xp");
        }
    }

    private void addYieldRange(StringBuilder sb, FarmingItem item, FarmingXPCalc calc)
    {
        if(calc.minHarvestQuantity == 0 && calc.maxHarvestQuantity == 0) return;

        sb.append(NEW_LINE);
        sb.append(ColorUtil.colorTag(Color.GRAY));

        sb.append("Yield Range: ");
        if(calc.minHarvestQuantity == 0)
        // we're limited at the top of the range
        {
            sb.append("max ");
            sb.append(calc.maxHarvestQuantity);
            sb.append(" ");
            sb.append(calc.maxHarvestQuantity > 1 ? item.getPlural_name() : item.getName());
            if(item.getPatchType() != FarmingPatchType.FLOWER)
            {
                sb.append(" (max ");
                sb.append(df.format(calc.maxHarvestXP));
                sb.append("xp)");
            }
        }
        else if (calc.minHarvestQuantity == calc.maxHarvestQuantity)
        // we've got an exact number
        {
            sb.append(calc.minHarvestQuantity);
            sb.append(" ");
            sb.append(calc.minHarvestQuantity > 1 ? item.getPlural_name() : item.getName());
            if(item.getPatchType() != FarmingPatchType.FLOWER)
            {
                sb.append(" (");
                sb.append(df.format(calc.minHarvestXP));
                sb.append("xp)");
            }
        }
        else if (calc.maxHarvestQuantity == 0)
        // we're limited at the bottom of the range
        {
            sb.append("min ");
            sb.append(calc.minHarvestQuantity);
            sb.append(" ");
            sb.append(calc.minHarvestQuantity > 1 ? item.getPlural_name() : item.getName());
            if(item.getPatchType() != FarmingPatchType.FLOWER)
            {
                sb.append(" (min ");
                sb.append(df.format(calc.minHarvestXP));
                sb.append("xp)");
            }
        }
        else
        // we have a specific range
        {
            sb.append(calc.minHarvestQuantity);
            sb.append("-");
            sb.append(calc.maxHarvestQuantity);
            sb.append(" ");
            sb.append(calc.maxHarvestQuantity > 1 ? item.getPlural_name() : item.getName());
            if(item.getPatchType() != FarmingPatchType.FLOWER)
            {
                sb.append(" (");
                sb.append(df.format(calc.minHarvestXP));
                sb.append("-");
                sb.append(df.format(calc.maxHarvestXP));
                sb.append("xp)");
            }
        }

        sb.append(ColorUtil.CLOSING_COLOR_TAG);
    }


    private void addExpectedYield(StringBuilder sb, FarmingItem item, FarmingXPCalc calc)
    {
        if(calc.expectedHarvestQuantity == 0) return;

        sb.append(NEW_LINE);
        sb.append(ColorUtil.colorTag(Color.ORANGE));

        sb.append("Expected Yield: ");
        sb.append(calc.expectedHarvestQuantity);
        sb.append(" ");
        sb.append(calc.expectedHarvestQuantity > 1 ? item.getPlural_name() : item.getName());
        if(item.getPatchType() != FarmingPatchType.FLOWER)
        {
            sb.append(" (");
            sb.append(df.format(calc.expectedHarvestXP));
            sb.append("xp)");
        }

        sb.append(ColorUtil.CLOSING_COLOR_TAG);
    }

    private void addTotalRange(StringBuilder sb, FarmingXPCalc calc)
    {
        sb.append(NEW_LINE);
        sb.append("Total XP Range: ");

        var minXP = calc.plantXP + calc.checkHealthXP + calc.minHarvestXP;
        var maxXP = calc.plantXP + calc.checkHealthXP + calc.maxHarvestXP;

        if(minXP == maxXP)
        {
            sb.append(df.format(minXP));
        }
        else
        {
            if(calc.minHarvestXP == 0)
            {
                sb.append("max ");
                sb.append(df.format(maxXP));
            }
            else if(calc.maxHarvestXP == 0)
            {
                sb.append("min ");
                sb.append(df.format(minXP));
            }
            else
            {
                sb.append(df.format(minXP));
                sb.append("-");
                sb.append(df.format(maxXP));
            }
        }
        sb.append("xp");
    }

    private void addTotalExpected(StringBuilder sb, FarmingXPCalc calc)
    {
        var expectedXP = calc.plantXP + calc.checkHealthXP + calc.expectedHarvestXP;
        sb.append(NEW_LINE);
        sb.append("Total Expected XP: ");
        sb.append(df.format(expectedXP));
        sb.append("xp");
    }

    private void addStackYield(StringBuilder sb, FarmingItem item, FarmingXPCalc calc, int numPlantings)
    {
        if(calc.expectedHarvestQuantity == 0) return;

        sb.append(NEW_LINE);
        sb.append(ColorUtil.colorTag(Color.MAGENTA));

        sb.append("Stack Expected Yield: ");
        sb.append(calc.expectedHarvestQuantity);
        sb.append(" ");
        sb.append(calc.expectedHarvestQuantity > 1 ? item.getPlural_name() : item.getName());
        sb.append(" (");
        sb.append(df.format(numPlantings));
        sb.append(" plantings)");

        sb.append(ColorUtil.CLOSING_COLOR_TAG);
    }

    private void addStackRange(StringBuilder sb, FarmingXPCalc calc)
    {
        sb.append(NEW_LINE);
        sb.append(ColorUtil.colorTag(Color.CYAN));
        sb.append("Stack Total XP Range: ");

        var minXP = calc.plantXP + calc.checkHealthXP + calc.minHarvestXP;
        var maxXP = calc.plantXP + calc.checkHealthXP + calc.maxHarvestXP;

        if(minXP == maxXP)
        {
            sb.append(df.format(minXP));
        }
        else
        {
            if(calc.minHarvestXP == 0)
            {
                sb.append("max ");
                sb.append(df.format(maxXP));
            }
            else if(calc.maxHarvestXP == 0)
            {
                sb.append("min ");
                sb.append(df.format(minXP));
            }
            else
            {
                sb.append(df.format(minXP));
                sb.append("-");
                sb.append(df.format(maxXP));
            }
        }
        sb.append("xp");
        sb.append(ColorUtil.CLOSING_COLOR_TAG);
    }

    private void addStackExpected(StringBuilder sb, FarmingXPCalc calc)
    {
        var expectedXP = calc.plantXP + calc.checkHealthXP + calc.expectedHarvestXP;
        sb.append(NEW_LINE);
        sb.append(ColorUtil.colorTag(Color.CYAN));
        sb.append("Stack Total Expected XP: ");
        sb.append(df.format(expectedXP));
        sb.append("xp");
        sb.append(ColorUtil.CLOSING_COLOR_TAG);
    }

    private static String getPatchType(FarmingItem item)
    {
        switch(item.getPatchType())
        {
            case ALLOTMENT:
                return "Allotment";
            case FLOWER:
                return "Flower";
            case HERB:
                return "Herb";
            case HOP:
                return "Hops";
            case BUSH:
                return "Bush";
            case TREE:
                return "Tree";
            case FRUIT_TREE:
                return "Fruit tree";
            case SEAWEED:
                return "Seaweed";
            case GRAPE:
                return "Vine";
            case MUSHROOM:
                return "Mushroom";
            case BELLADONNA:
                return "Belladonna";
            case HESPORI:
                return "Hespori";
            case ANIMA:
                return "Anima";
            case HARDWOOD:
                return "Hardwood tree";
            case CALQUAT:
                return "Calquat";
            case CRYSTAL:
                return "Crystal tree";
            case SPIRIT_TREE:
                return "Spirit tree";
            case CELASTRUS:
                return "Celastrus";
            case REDWOOD:
                return "Redwood tree";
            case CACTUS:
                return "Cactus";
            default:
                return "Unknown";
        }
    }

    @Getter
    private class FarmingXPCalc
    {
        private final double plantXP;
        private final double checkHealthXP;

        private final double minHarvestXP;
        private final double maxHarvestXP;
        private final double expectedHarvestXP;

        private final int minHarvestQuantity;
        private final int maxHarvestQuantity;
        private final int expectedHarvestQuantity;

        private boolean usesHarvestLives;
        private int harvestLives;

        public FarmingXPCalc(FarmingItem item)
        {
            this(item, 1);
        }

        public FarmingXPCalc(FarmingItem item, int numTimes)
        {
            plantXP = item.getPlantXP() * numTimes;
            checkHealthXP = item.getCheckHealthXP() * numTimes;

            CompostType compost = config.compostType().compost;

            switch(item.getPatchType())
            {
                case ALLOTMENT:
                case HERB:
                case HOP:
                case SEAWEED:
                case BELLADONNA:
                case CELASTRUS:
                case CACTUS:
                    //Harvest Lives
                    minHarvestQuantity = compost.getHarvestLives() * numTimes;
                    maxHarvestQuantity = 0;
                    usesHarvestLives = true;
                    harvestLives = compost.getHarvestLives();
                    break;
                case GRAPE:
                    //Harvest Lives
                    minHarvestQuantity = 5;
                    maxHarvestQuantity = 0;
                    usesHarvestLives = true;
                    harvestLives = 5;
                    break;
                case FLOWER:
                case BUSH:
                case FRUIT_TREE:
                case MUSHROOM:
                case HESPORI:
                case CALQUAT:
                case CRYSTAL:
                    //Fixed
                    minHarvestQuantity = item.getMinHarvestQuantity() * numTimes;
                    maxHarvestQuantity = item.getMaxHarvestQuantity() * numTimes;
                    break;
                case TREE:
                case ANIMA:
                case HARDWOOD:
                case SPIRIT_TREE:
                case REDWOOD:
                    //Harvest not applicable
                    minHarvestQuantity = 0;
                    maxHarvestQuantity = 0;
                    break;
                default:
                    minHarvestQuantity = 0;
                    maxHarvestQuantity = 0;
                    break;
            }

            if(usesHarvestLives)
            {
                expectedHarvestQuantity = (int)Math.round(
                        calculateExpectedYield(client.getBoostedSkillLevel(Skill.FARMING),
                                item.getMinCTS(), item.getMaxCTS(), harvestLives, item.getPatchType()) * numTimes);
            }
            else
            {
                expectedHarvestQuantity = (minHarvestQuantity + maxHarvestQuantity)/2;
            }

            if(item.getPatchType() != FarmingPatchType.FLOWER)
            {
                minHarvestXP = item.getHarvestXP() * minHarvestQuantity;
                maxHarvestXP = item.getHarvestXP() * maxHarvestQuantity;
                expectedHarvestXP = item.getHarvestXP() * expectedHarvestQuantity;
            }
            else
            {
                minHarvestXP = item.getHarvestXP();
                maxHarvestXP = item.getHarvestXP();
                expectedHarvestXP = item.getHarvestXP();
            }
        }

        //Formula from: https://oldschool.runescape.wiki/w/Farming#Variable_crop_yield
        //CTS values from: https://oldschool.runescape.wiki/w/Talk:Farming#Yield_rates_of_various_crops
        private double calculateExpectedYield(int farmingLevel, int minCTS, int maxCTS, int harvestLives, FarmingPatchType patchType)
        {
            double modifiedMinCTS = minCTS;
            double modifiedMaxCTS = maxCTS;

            double itemBoost = 0;
            // Per https://twitter.com/JagexAsh/status/1691110392443899904, some patches ignore secateurs
            if(config.farmingUsingMagicSecateurs()
                    && patchType != FarmingPatchType.CACTUS
                    && patchType != FarmingPatchType.BELLADONNA
                    && patchType != FarmingPatchType.SEAWEED)
            {
                itemBoost += 0.1;
            }
            if(config.farmingUsingSkillCape())
            {
                itemBoost += 0.05;
            }
            modifiedMinCTS = Math.floor(modifiedMinCTS * (1+itemBoost));
            modifiedMaxCTS = Math.floor(modifiedMaxCTS * (1+itemBoost));

            //TODO: Work out whether to handle diary boosts...

            if(config.farmingUsingAttas())
            {
                modifiedMinCTS = Math.floor(modifiedMinCTS * (1+0.05));
                modifiedMaxCTS = Math.floor(modifiedMaxCTS * (1+0.05));
            }

            var cts = (Math.floor(modifiedMinCTS*(99-farmingLevel)/98)
                            +Math.floor(modifiedMaxCTS*(farmingLevel-1)/98)
                            +1)
                    /256;
            return harvestLives/(1-cts);
        }
    }
}


package com.laur92.runelite.plugins.skills.farming;

@SuppressWarnings("unused")
public enum FarmingPatchType
{
    ALLOTMENT,
    FLOWER,
    HERB,
    HOP,
    BUSH,
    TREE,
    FRUIT_TREE,
    SEAWEED,
    GRAPE,
    MUSHROOM,
    BELLADONNA,
    HESPORI,
    ANIMA,
    HARDWOOD,
    CALQUAT,
    CRYSTAL,
    CELASTRUS,
    REDWOOD,
    CACTUS,
    SPIRIT_TREE
}

package com.laur92.runelite.plugins.skills.farming;

import net.runelite.api.ItemID;

import java.util.*;

public enum Compost
{
    NONE(CompostType.builder()
            .name("No Compost")
            .harvestLives(3)
            .itemID(-1)
            .xp(0)
            .build()),
    NORMAL(CompostType.builder()
            .name("Compost")
            .harvestLives(4)
            .itemID(ItemID.COMPOST)
            .xp(18)
            .build()),
    SUPERCOMPOST(CompostType.builder()
            .name("Supercompost")
            .harvestLives(5)
            .itemID(ItemID.SUPERCOMPOST)
            .xp(26)
            .build()),
    ULTRACOMPOST(CompostType.builder()
            .name("Ultracompost")
            .harvestLives(6)
            .itemID(ItemID.ULTRACOMPOST)
            .xp(36)
            .build());

    private static final Map<Integer, CompostType> idsToCompost = new HashMap<>();

    static
    {
        Arrays.stream(values())
                .map(fi -> fi.compost)
                .forEach(fi -> idsToCompost.put(fi.getItemID(), fi));
    }

    public final CompostType compost;
    Compost(CompostType compost) { this.compost = compost; }

    public static CompostType getCompost(int itemID)
    {
        if(!idsToCompost.containsKey(itemID)) return null;

        return idsToCompost.get(itemID);
    }

    @Override
    public String toString()
    {
        return this.compost.getName();
    }
}

package com.laur92.runelite.plugins.skills.farming;

import com.google.common.collect.ImmutableSet;
import net.runelite.api.ItemID;

import java.util.*;

public enum FarmingItems
{
    POTATO_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.POTATO_SEED, ItemID.POTATO_SEED_7548))
            .name("potato")
            .plural_name("potatoes")
            .level(1)
            .plantXP(8)
            .plantQuantity(3)
            .harvestXP(9)
            .minCTS(101)
            .maxCTS(180)
            .patchType(FarmingPatchType.ALLOTMENT)
            .build()),

    ONION_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.ONION_SEED, ItemID.ONION_SEED_7550))
            .name("onion")
            .plural_name("onions")
            .level(5)
            .plantXP(9.5)
            .plantQuantity(3)
            .harvestXP(10.5)
            .minCTS(105)
            .maxCTS(180)
            .patchType(FarmingPatchType.ALLOTMENT)
            .build()),

    CABBAGE_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.CABBAGE_SEED))
            .name("cabbage")
            .plural_name("cabbages")
            .level(7)
            .plantXP(10)
            .plantQuantity(3)
            .harvestXP(11.5)
            .minCTS(107)
            .maxCTS(180)
            .patchType(FarmingPatchType.ALLOTMENT)
            .build()),

    TOMATO_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.TOMATO_SEED, ItemID.TOMATO_SEED_7562))
            .name("tomato")
            .plural_name("tomatoes")
            .level(12)
            .plantXP(12.5)
            .plantQuantity(3)
            .harvestXP(14)
            .minCTS(112)
            .maxCTS(180)
            .patchType(FarmingPatchType.ALLOTMENT)
            .build()),

    SWEETCORN_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.SWEETCORN_SEED))
            .name("sweetcorn")
            .plural_name("sweetcorn")
            .level(20)
            .plantXP(17)
            .plantQuantity(3)
            .harvestXP(19)
            .minCTS(88)
            .maxCTS(180)
            .patchType(FarmingPatchType.ALLOTMENT)
            .build()),

    STRAWBERRY_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.STRAWBERRY_SEED))
            .name("strawberry")
            .plural_name("strawberries")
            .level(31)
            .plantXP(26)
            .plantQuantity(3)
            .harvestXP(29)
            .minCTS(103)
            .maxCTS(180)
            .patchType(FarmingPatchType.ALLOTMENT)
            .build()),

    WATERMELON_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.WATERMELON_SEED))
            .name("watermelon")
            .plural_name("watermelons")
            .level(47)
            .plantXP(48.5)
            .plantQuantity(3)
            .harvestXP(54.5)
            .minCTS(126)
            .maxCTS(180)
            .patchType(FarmingPatchType.ALLOTMENT)
            .build()),

    SNAPE_GRASS_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.SNAPE_GRASS_SEED))
            .name("snape grass")
            .plural_name("snape grass")
            .level(61)
            .plantXP(82)
            .plantQuantity(3)
            .harvestXP(82)
            .minCTS(148)
            .maxCTS(195)
            .patchType(FarmingPatchType.ALLOTMENT)
            .build()),

    MARIGOLD_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.MARIGOLD_SEED))
            .name("marigold")
            .plural_name("marigolds")
            .level(2)
            .plantXP(8.5)
            .plantQuantity(1)
            .harvestXP(47)
            .minHarvestQuantity(1)
            .maxHarvestQuantity(1)
            .patchType(FarmingPatchType.FLOWER)
            .build()),

    ROSEMARY_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.ROSEMARY_SEED))
            .name("rosemary")
            .plural_name("rosemary")
            .level(11)
            .plantXP(12)
            .plantQuantity(1)
            .harvestXP(66.5)
            .minHarvestQuantity(1)
            .maxHarvestQuantity(1)
            .patchType(FarmingPatchType.FLOWER)
            .build()),

    NASTURTIUM_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.NASTURTIUM_SEED))
            .name("nasturtium")
            .plural_name("nasturtiums")
            .level(24)
            .plantXP(19.5)
            .plantQuantity(1)
            .harvestXP(111)
            .minHarvestQuantity(1)
            .maxHarvestQuantity(1)
            .patchType(FarmingPatchType.FLOWER)
            .build()),

    WOAD_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.WOAD_SEED))
            .name("woad leaf")
            .plural_name("woad leaves")
            .level(25)
            .plantXP(20)
            .plantQuantity(1)
            .harvestXP(115.5)
            .minHarvestQuantity(3)
            .maxHarvestQuantity(3)
            .patchType(FarmingPatchType.FLOWER)
            .build()),

    LIMPWURT_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.LIMPWURT_SEED))
            .name("limpwurt root")
            .plural_name("limpwurt roots")
            .level(26)
            .plantXP(21.5)
            .plantQuantity(1)
            .harvestXP(120)
            .minHarvestQuantity(3)
            .maxHarvestQuantity(13)
            .patchType(FarmingPatchType.FLOWER)
            .build()),

    WHITE_LILY_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.WHITE_LILY_SEED))
            .name("white lily")
            .plural_name("white lilies")
            .level(58)
            .plantXP(42)
            .plantQuantity(1)
            .harvestXP(250)
            .minHarvestQuantity(1)
            .maxHarvestQuantity(1)
            .patchType(FarmingPatchType.FLOWER)
            .build()),

    GUAM_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.GUAM_SEED))
            .name("guam leaf")
            .plural_name("guam leaves")
            .level(9)
            .plantXP(11)
            .plantQuantity(1)
            .harvestXP(12.5)
            .minCTS(25)
            .maxCTS(80)
            .patchType(FarmingPatchType.HERB)
            .build()),

    MARRENTILL_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.MARRENTILL_SEED))
            .name("marrentill leaf")
            .plural_name("marrentill leaves")
            .level(14)
            .plantXP(13.5)
            .plantQuantity(1)
            .harvestXP(15)
            .minCTS(28)
            .maxCTS(80)
            .patchType(FarmingPatchType.HERB)
            .build()),

    TARROMIN_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.TARROMIN_SEED))
            .name("tarromin leaf")
            .plural_name("tarromin leaves")
            .level(19)
            .plantXP(16)
            .plantQuantity(1)
            .harvestXP(18)
            .minCTS(31)
            .maxCTS(80)
            .patchType(FarmingPatchType.HERB)
            .build()),

    HARRALANDER_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.HARRALANDER_SEED))
            .name("harralander leaf")
            .plural_name("harralander leaves")
            .level(26)
            .plantXP(21.5)
            .plantQuantity(1)
            .harvestXP(24)
            .minCTS(36)
            .maxCTS(80)
            .patchType(FarmingPatchType.HERB)
            .build()),

    GOUT_TUBER(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.GOUT_TUBER))
            .name("goutweed")
            .plural_name("goutweed")
            .level(29)
            .plantXP(105)
            .plantQuantity(1)
            .harvestXP(45)
            .minCTS(39)
            .maxCTS(80)
            .patchType(FarmingPatchType.HERB)
            .build()),

    RANARR_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.RANARR_SEED))
            .name("ranarr leaf")
            .plural_name("ranarr leaves")
            .level(32)
            .plantXP(27)
            .plantQuantity(1)
            .harvestXP(30.5)
            .minCTS(39)
            .maxCTS(80)
            .patchType(FarmingPatchType.HERB)
            .build()),

    TOADFLAX_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.TOADFLAX_SEED))
            .name("toadflax leaf")
            .plural_name("toadflax leaves")
            .level(38)
            .plantXP(34)
            .plantQuantity(1)
            .harvestXP(38.5)
            .minCTS(43)
            .maxCTS(80)
            .patchType(FarmingPatchType.HERB)
            .build()),

    IRIT_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.IRIT_SEED))
            .name("irit leaf")
            .plural_name("irit leaves")
            .level(44)
            .plantXP(43)
            .plantQuantity(1)
            .harvestXP(48.5)
            .minCTS(46)
            .maxCTS(80)
            .patchType(FarmingPatchType.HERB)
            .build()),

    AVANTOE_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.AVANTOE_SEED))
            .name("avantoe leaf")
            .plural_name("avantoe leaves")
            .level(50)
            .plantXP(54.5)
            .plantQuantity(1)
            .harvestXP(61.5)
            .minCTS(50)
            .maxCTS(80)
            .patchType(FarmingPatchType.HERB)
            .build()),

    KWUARM_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.HARRALANDER_SEED))
            .name("kwuarm leaf")
            .plural_name("kwuarm leaves")
            .level(56)
            .plantXP(69)
            .plantQuantity(1)
            .harvestXP(78)
            .minCTS(54)
            .maxCTS(80)
            .patchType(FarmingPatchType.HERB)
            .build()),

    SNAPDRAGON_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.SNAPDRAGON_SEED))
            .name("snapdragon leaf")
            .plural_name("snapdragon leaves")
            .level(62)
            .plantXP(87.5)
            .plantQuantity(1)
            .harvestXP(98.5)
            .minCTS(57)
            .maxCTS(80)
            .patchType(FarmingPatchType.HERB)
            .build()),

    CADANTINE_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.CADANTINE_SEED))
            .name("cadantine leaf")
            .plural_name("cadantine leaves")
            .level(67)
            .plantXP(106.5)
            .plantQuantity(1)
            .harvestXP(120)
            .minCTS(60)
            .maxCTS(80)
            .patchType(FarmingPatchType.HERB)
            .build()),

    LANTADYME_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.LANTADYME_SEED))
            .name("lantadyme leaf")
            .plural_name("lantadyme leaves")
            .level(73)
            .plantXP(134.5)
            .plantQuantity(1)
            .harvestXP(151.5)
            .minCTS(64)
            .maxCTS(80)
            .patchType(FarmingPatchType.HERB)
            .build()),

    DWARF_WEED_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.DWARF_WEED_SEED))
            .name("dwarf weed leaf")
            .plural_name("dwarf weed leaves")
            .level(79)
            .plantXP(170.5)
            .plantQuantity(1)
            .harvestXP(192)
            .minCTS(67)
            .maxCTS(80)
            .patchType(FarmingPatchType.HERB)
            .build()),

    TORSTOL_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.TORSTOL_SEED))
            .name("torstol leaf")
            .plural_name("torstol leaves")
            .level(85)
            .plantXP(199.5)
            .plantQuantity(1)
            .harvestXP(244.5)
            .minCTS(71)
            .maxCTS(80)
            .patchType(FarmingPatchType.HERB)
            .build()),

    BARLEY_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BARLEY_SEED))
            .name("barley")
            .plural_name("barley")
            .level(3)
            .plantXP(8.5)
            .plantQuantity(4)
            .harvestXP(9.5)
            .minCTS(103)
            .maxCTS(180)
            .patchType(FarmingPatchType.HOP)
            .build()),

    HAMMERSTONE_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.HAMMERSTONE_SEED))
            .name("hammerstone hops")
            .plural_name("hammerstone hops")
            .level(4)
            .plantXP(9)
            .plantQuantity(4)
            .harvestXP(10)
            .minCTS(104)
            .maxCTS(180)
            .patchType(FarmingPatchType.HOP)
            .build()),

    ASGARNIAN_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.ASGARNIAN_SEED))
            .name("asgarnian hops")
            .plural_name("asgarnian hops")
            .level(8)
            .plantXP(10.9)
            .plantQuantity(4)
            .harvestXP(12)
            .minCTS(108)
            .maxCTS(180)
            .patchType(FarmingPatchType.HOP)
            .build()),

    JUTE_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.JUTE_SEED))
            .name("jute fibre")
            .plural_name("jute fibres")
            .level(13)
            .plantXP(13)
            .plantQuantity(4)
            .harvestXP(14.5)
            .minCTS(113)
            .maxCTS(180)
            .patchType(FarmingPatchType.HOP)
            .build()),

    YANILLIAN_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.YANILLIAN_SEED))
            .name("yanillian hops")
            .plural_name("yanillian hops")
            .level(16)
            .plantXP(14.5)
            .plantQuantity(4)
            .harvestXP(16)
            .minCTS(116)
            .maxCTS(180)
            .patchType(FarmingPatchType.HOP)
            .build()),

    KRANDORIAN_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.KRANDORIAN_SEED))
            .name("krandorian hops")
            .plural_name("krandorian hops")
            .level(21)
            .plantXP(17.5)
            .plantQuantity(4)
            .harvestXP(19.5)
            .minCTS(121)
            .maxCTS(180)
            .patchType(FarmingPatchType.HOP)
            .build()),

    WILDBLOOD_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.WILDBLOOD_SEED))
            .name("wildblood hops")
            .plural_name("wildblood hops")
            .level(28)
            .plantXP(23)
            .plantQuantity(4)
            .harvestXP(26)
            .minCTS(128)
            .maxCTS(180)
            .patchType(FarmingPatchType.HOP)
            .build()),

    REDBERRY_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.REDBERRY_SEED))
            .name("redberries")
            .plural_name("redberries")
            .level(10)
            .plantXP(11.5)
            .plantQuantity(1)
            .checkHealthXP(64)
            .harvestXP(4.5)
            .minHarvestQuantity(4)
            .patchType(FarmingPatchType.BUSH)
            .build()),

    CADAVABERRY_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.CADAVABERRY_SEED))
            .name("cadava berries")
            .plural_name("cadava berries")
            .level(22)
            .plantXP(18)
            .plantQuantity(1)
            .checkHealthXP(102.5)
            .harvestXP(7)
            .minHarvestQuantity(4)
            .patchType(FarmingPatchType.BUSH)
            .build()),

    DWELLBERRY_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.DWELLBERRY_SEED))
            .name("dwellberries")
            .plural_name("dwellberries")
            .level(36)
            .plantXP(31.5)
            .plantQuantity(1)
            .checkHealthXP(177.5)
            .harvestXP(12)
            .minHarvestQuantity(4)
            .patchType(FarmingPatchType.BUSH)
            .build()),

    JANGERBERRY_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.JANGERBERRY_SEED))
            .name("jangerberries")
            .plural_name("jangerberries")
            .level(48)
            .plantXP(50.5)
            .plantQuantity(1)
            .checkHealthXP(284.5)
            .harvestXP(19)
            .minHarvestQuantity(4)
            .maxHarvestQuantity(4)
            .patchType(FarmingPatchType.BUSH)
            .build()),

    WHITEBERRY_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.WHITEBERRY_SEED))
            .name("white berries")
            .plural_name("white berries")
            .level(59)
            .plantXP(78)
            .plantQuantity(1)
            .checkHealthXP(437.5)
            .harvestXP(29)
            .minHarvestQuantity(4)
            .maxHarvestQuantity(4)
            .patchType(FarmingPatchType.BUSH)
            .build()),

    POISON_IVY_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.POISON_IVY_SEED))
            .name("poison ivy berries")
            .plural_name("poison ivy berries")
            .level(70)
            .plantXP(120)
            .plantQuantity(1)
            .checkHealthXP(675)
            .harvestXP(45)
            .minHarvestQuantity(4)
            .patchType(FarmingPatchType.BUSH)
            .build()),

    ACORN(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.ACORN, ItemID.OAK_SAPLING, ItemID.OAK_SEEDLING, ItemID.OAK_SEEDLING_W))
            .name("oak tree")
            .plural_name("oak trees")
            .level(15)
            .plantXP(14)
            .plantQuantity(1)
            .checkHealthXP(467.3)
            .patchType(FarmingPatchType.TREE)
            .build()),

    WILLOW_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.WILLOW_SEED, ItemID.WILLOW_SAPLING, ItemID.WILLOW_SEEDLING, ItemID.WILLOW_SEEDLING_W))
            .name("willow tree")
            .plural_name("willow trees")
            .level(30)
            .plantXP(25)
            .plantQuantity(1)
            .checkHealthXP(1456.5)
            .patchType(FarmingPatchType.TREE)
            .build()),

    MAPLE_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.MAPLE_SEED, ItemID.MAPLE_SAPLING, ItemID.MAPLE_SEEDLING, ItemID.MAPLE_SEEDLING_W))
            .name("maple tree")
            .plural_name("maple trees")
            .level(45)
            .plantXP(45)
            .plantQuantity(1)
            .checkHealthXP(3403.4)
            .patchType(FarmingPatchType.TREE)
            .build()),

    YEW_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.YEW_SEED, ItemID.YEW_SAPLING, ItemID.YEW_SEEDLING, ItemID.YEW_SEEDLING_W))
            .name("yew tree")
            .plural_name("yew trees")
            .level(60)
            .plantXP(81)
            .plantQuantity(1)
            .checkHealthXP(7069.9)
            .patchType(FarmingPatchType.TREE)
            .build()),

    MAGIC_TREE(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.MAGIC_SEED, ItemID.MAGIC_SAPLING, ItemID.MAGIC_SEEDLING, ItemID.MAGIC_SEEDLING_W))
            .name("magic tree")
            .plural_name("magic trees")
            .level(75)
            .plantXP(145.5)
            .plantQuantity(1)
            .checkHealthXP(13768.3)
            .patchType(FarmingPatchType.TREE)
            .build()),

    APPLE_TREE(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.APPLE_TREE_SEED, ItemID.APPLE_SAPLING, ItemID.APPLE_SEEDLING, ItemID.APPLE_SEEDLING_W))
            .name("cooking apple")
            .plural_name("cooking apples")
            .level(27)
            .plantXP(22)
            .plantQuantity(1)
            .checkHealthXP(1199.5)
            .harvestXP(8.5)
            .minHarvestQuantity(6)
            .maxHarvestQuantity(6)
            .patchType(FarmingPatchType.FRUIT_TREE)
            .build()),

    BANANA_TREE(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BANANA_TREE_SEED, ItemID.BANANA_SAPLING, ItemID.BANANA_SEEDLING, ItemID.BANANA_SEEDLING_W))
            .name("banana")
            .plural_name("bananas")
            .level(33)
            .plantXP(28)
            .plantQuantity(1)
            .checkHealthXP(1750.5)
            .harvestXP(10.5)
            .minHarvestQuantity(6)
            .maxHarvestQuantity(6)
            .patchType(FarmingPatchType.FRUIT_TREE)
            .build()),

    ORANGE_TREE(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.ORANGE_TREE_SEED, ItemID.ORANGE_SAPLING, ItemID.ORANGE_SEEDLING, ItemID.ORANGE_SEEDLING_W))
            .name("orange")
            .plural_name("oranges")
            .level(39)
            .plantXP(35.5)
            .plantQuantity(1)
            .checkHealthXP(2470.2)
            .harvestXP(13.5)
            .minHarvestQuantity(6)
            .maxHarvestQuantity(6)
            .patchType(FarmingPatchType.FRUIT_TREE)
            .build()),

    CURRY_TREE(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.CURRY_TREE_SEED, ItemID.CURRY_SAPLING, ItemID.CURRY_SEEDLING, ItemID.CURRY_SEEDLING_W))
            .name("curry leaf")
            .plural_name("curry leaves")
            .level(42)
            .plantXP(40)
            .plantQuantity(1)
            .checkHealthXP(2906.9)
            .harvestXP(15)
            .minHarvestQuantity(6)
            .maxHarvestQuantity(6)
            .patchType(FarmingPatchType.FRUIT_TREE)
            .build()),

    PINEAPPLE_TREE(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.PINEAPPLE_SEED, ItemID.PINEAPPLE_SAPLING, ItemID.PINEAPPLE_SEEDLING, ItemID.PINEAPPLE_SEEDLING_W))
            .name("pineapple")
            .plural_name("pineapples")
            .level(51)
            .plantXP(57)
            .plantQuantity(1)
            .checkHealthXP(4605)
            .harvestXP(21.5)
            .minHarvestQuantity(6)
            .maxHarvestQuantity(6)
            .patchType(FarmingPatchType.FRUIT_TREE)
            .build()),

    PAPAYA_TREE(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.PAPAYA_TREE_SEED, ItemID.PAPAYA_SAPLING, ItemID.PAPAYA_SEEDLING, ItemID.PAPAYA_SEEDLING_W))
            .name("papaya fruit")
            .plural_name("papaya fruits")
            .level(57)
            .plantXP(72)
            .plantQuantity(1)
            .checkHealthXP(6146.6)
            .harvestXP(27)
            .minHarvestQuantity(6)
            .maxHarvestQuantity(6)
            .patchType(FarmingPatchType.FRUIT_TREE)
            .build()),

    PALM_TREE(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.PALM_TREE_SEED, ItemID.PALM_SAPLING, ItemID.PALM_SEEDLING, ItemID.PALM_SEEDLING_W))
            .name("coconut")
            .plural_name("coconuts")
            .level(68)
            .plantXP(110.5)
            .plantQuantity(1)
            .checkHealthXP(10150.1)
            .harvestXP(41.5)
            .minHarvestQuantity(6)
            .maxHarvestQuantity(6)
            .patchType(FarmingPatchType.FRUIT_TREE)
            .build()),

    DRAGONFRUIT_TREE(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.DRAGONFRUIT_TREE_SEED, ItemID.DRAGONFRUIT_SAPLING, ItemID.DRAGONFRUIT_SEEDLING, ItemID.DRAGONFRUIT_SEEDLING_W))
            .name("dragonfruit")
            .plural_name("dragonfruits")
            .level(81)
            .plantXP(140)
            .plantQuantity(1)
            .checkHealthXP(17335)
            .harvestXP(70)
            .minHarvestQuantity(6)
            .maxHarvestQuantity(6)
            .patchType(FarmingPatchType.FRUIT_TREE)
            .build()),

    GIANT_SEAWEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.SEAWEED_SPORE))
            .name("giant seaweed")
            .plural_name("giant seaweed")
            .level(23)
            .plantXP(19)
            .plantQuantity(1)
            .harvestXP(21)
            .minCTS(150)
            .maxCTS(210)
            .patchType(FarmingPatchType.SEAWEED)
            .build()),

    GRAPE_VINE(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.GRAPE_SEED))
            .name("grapes")
            .plural_name("grapes")
            .level(36)
            .plantXP(31.5)
            .plantQuantity(1)
            .checkHealthXP(625)
            .harvestXP(40)
            .minCTS(150) //We don't actually know this value, this has been coded in as an interim number
            .maxCTS(210) //We don't actually know this value, this has been coded in as an interim number
            .patchType(FarmingPatchType.GRAPE)
            .build()),

    BITTERCAP_MUSHROOM(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.MUSHROOM_SPORE))
            .name("bittercap mushrooms")
            .plural_name("bittercap mushrooms")
            .level(53)
            .plantXP(61.5)
            .plantQuantity(1)
            .harvestXP(57.7)
            .minHarvestQuantity(6)
            .maxHarvestQuantity(6)
            .patchType(FarmingPatchType.MUSHROOM)
            .build()),

    NIGHTSHADE(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BELLADONNA_SEED))
            .name("nightshade")
            .plural_name("nightshades")
            .level(63)
            .plantXP(91)
            .plantQuantity(1)
            .harvestXP(512)
            .minCTS(150) //We don't actually know this value, this has been coded in as an interim number
            .maxCTS(210) //We don't actually know this value, this has been coded in as an interim number
            .patchType(FarmingPatchType.BELLADONNA)
            .build()),

    HESPORI(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.HESPORI_SEED))
            .name("hespori")
            .plural_name("hesporis")
            .level(65)
            .plantXP(62)
            .plantQuantity(1)
            .harvestXP(12600)
            .minHarvestQuantity(1)
            .maxHarvestQuantity(1)
            .patchType(FarmingPatchType.HESPORI)
            .build()),

    KRONOS(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.KRONOS_SEED))
            .level(76)
            .plantXP(100)
            .plantQuantity(1)
            .patchType(FarmingPatchType.ANIMA)
            .build()),

    IASOR(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.IASOR_SEED))
            .level(76)
            .plantXP(100)
            .plantQuantity(1)
            .patchType(FarmingPatchType.ANIMA)
            .build()),

    ATTAS(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.ATTAS_SEED))
            .level(76)
            .plantXP(100)
            .plantQuantity(1)
            .patchType(FarmingPatchType.ANIMA)
            .build()),

    TEAK_TREE(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.TEAK_SEED, ItemID.TEAK_SAPLING, ItemID.TEAK_SEEDLING, ItemID.TEAK_SEEDLING_W))
            .name("teak tree")
            .plural_name("teak trees")
            .level(35)
            .plantXP(35)
            .plantQuantity(1)
            .checkHealthXP(7290)
            .patchType(FarmingPatchType.HARDWOOD)
            .build()),

    MAHOGANY_TREE(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.MAHOGANY_SEED, ItemID.MAHOGANY_SAPLING, ItemID.MAHOGANY_SEEDLING, ItemID.MAHOGANY_SEEDLING_W))
            .name("mahogany tree")
            .plural_name("mahogany trees")
            .level(55)
            .plantXP(68)
            .plantQuantity(1)
            .checkHealthXP(15720)
            .patchType(FarmingPatchType.HARDWOOD)
            .build()),

    CALQUAT_TREE(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.CALQUAT_TREE_SEED, ItemID.CALQUAT_SAPLING, ItemID.CALQUAT_SEEDLING, ItemID.CALQUAT_SEEDLING_W))
            .name("calquat fruit")
            .plural_name("calquat fruit")
            .level(72)
            .plantXP(129.5)
            .plantQuantity(1)
            .checkHealthXP(12096)
            .harvestXP(48.5)
            .minHarvestQuantity(6)
            .maxHarvestQuantity(6)
            .patchType(FarmingPatchType.CALQUAT)
            .build()),

    CRYSTAL_ACORN(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.CRYSTAL_ACORN, ItemID.CRYSTAL_SAPLING, ItemID.CRYSTAL_SEEDLING, ItemID.CRYSTAL_SEEDLING_W))
            .name("crystal shard")
            .plural_name("crystal shards")
            .level(74)
            .plantXP(126)
            .plantQuantity(1)
            .checkHealthXP(13240)
            .minHarvestQuantity(8) //We don't know if this uses harvest lives or not, wiki less clear
            .maxHarvestQuantity(16)
            .patchType(FarmingPatchType.CRYSTAL)
            .build()),

    SPIRIT_TREE(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.SPIRIT_SEED, ItemID.SPIRIT_SAPLING, ItemID.SPIRIT_SEEDLING, ItemID.SPIRIT_SEEDLING_W))
            .name("spirit tree")
            .plural_name("spirit trees")
            .level(83)
            .plantXP(199.5)
            .plantQuantity(1)
            .checkHealthXP(19301.8)
            .patchType(FarmingPatchType.SPIRIT_TREE)
            .build()),

    CELASTRUS_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.CELASTRUS_SEED))
            .name("celastrus bark")
            .plural_name("celatrus barks")
            .level(85)
            .plantXP(200)
            .plantQuantity(1)
            .checkHealthXP(14130)
            .harvestXP(23.5)
            .minCTS(150) //We don't actually know this value, this has been coded in as an interim number
            .maxCTS(210) //We don't actually know this value, this has been coded in as an interim number
            .patchType(FarmingPatchType.CELASTRUS)
            .build()),

    REDWOOD_TREE(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.REDWOOD_TREE_SEED, ItemID.REDWOOD_SAPLING, ItemID.REDWOOD_SEEDLING, ItemID.REDWOOD_SEEDLING_W))
            .name("redwood tree")
            .plural_name("redwood trees")
            .level(90)
            .plantXP(230)
            .plantQuantity(1)
            .checkHealthXP(22450)
            .patchType(FarmingPatchType.REDWOOD)
            .build()),

    CACTUS_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.CACTUS_SEED))
            .name("cactus spine")
            .plural_name("cactus spines")
            .level(55)
            .plantXP(66.5)
            .plantQuantity(1)
            .checkHealthXP(374)
            .harvestXP(25)
            .minCTS(5) //We don't actually know this value, this has been coded in as an interim number
            .maxCTS(166) //We don't actually know this value, this has been coded in as an interim number
            .patchType(FarmingPatchType.CACTUS)
            .build()),

    POTATO_CACTUS_SEED(FarmingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.POTATO_CACTUS_SEED))
            .name("potato cactus")
            .plural_name("potato cacti")
            .level(64)
            .plantXP(68)
            .plantQuantity(1)
            .checkHealthXP(230)
            .harvestXP(68)
            .minCTS(5) //We don't actually know this value, this has been coded in as an interim number
            .maxCTS(166) //We don't actually know this value, this has been coded in as an interim number
            .patchType(FarmingPatchType.CACTUS)
            .build()),
    ;

    private static final Map<Integer, List<FarmingItem>> idsToFarmingItem = new HashMap<>();

    static
    {
        Arrays.stream(values())
                .map(fi -> fi.item)
                .forEach(fi -> fi.getItemIDs().forEach(id -> {
                    if (!idsToFarmingItem.containsKey(id))
                    {
                        idsToFarmingItem.put(id, new ArrayList<>());
                    }
                    idsToFarmingItem.get(id).add(fi);
                }));
    }

    public final FarmingItem item;
    FarmingItems(FarmingItem item)
    {
        this.item = item;
    }

    public static FarmingItem getFarmingItem(int farmingItemID)
    {
        if(!idsToFarmingItem.containsKey(farmingItemID)) return null;

        return idsToFarmingItem.get(farmingItemID).get(0);
    }
}


package com.laur92.runelite.plugins.skills.farming;

import lombok.*;

import java.util.Set;

@Builder
@Getter
@ToString
public class FarmingItem
{
    private Set<Integer> itemIDs;
    private String name;
    private String plural_name;
    @Builder.Default private int level = 1;
    private FarmingPatchType patchType;
    private double plantXP;
    private int plantQuantity;
    private double checkHealthXP;
    private double harvestXP;
    private int minHarvestQuantity;
    private int maxHarvestQuantity;
    private int minCTS;
    private int maxCTS;
}


package com.laur92.runelite.plugins.skills.firemaking;

import lombok.Builder;
import lombok.Getter;
import lombok.ToString;

import java.util.Set;

@Builder
@Getter
@ToString
public class FiremakingItem
{
    private Set<Integer> itemIDs;
    private FiremakingItemType itemType;
    @Builder.Default private int level = 1;
    private int minSacredOilDoses;
    private double xp;
}

package com.laur92.runelite.plugins.skills.firemaking;

import com.laur92.runelite.plugins.ItemXPConfig;
import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.SkillColor;
import net.runelite.client.util.ColorUtil;

import javax.inject.Inject;
import java.awt.*;

import static com.laur92.runelite.plugins.ItemXPPlugin.NEW_LINE;
import static com.laur92.runelite.plugins.ItemXPPlugin.df;

public class FiremakingXP
{
    private final ItemXPConfig config;
    private final Client client;

    @Inject
    public FiremakingXP(ItemXPConfig config, Client client)
    {
        this.config = config;
        this.client = client;
    }

    public StringBuilder getFiremakingToolTip(int itemID, int quantity)
    {
        if(itemID == -1) return null;
        if(!config.showFiremakingSkill()) return null;

        FiremakingItem item = FiremakingItems.getFiremakingItem(itemID);

        if(item == null) return null;

        StringBuilder sb = new StringBuilder();
        var currentLevel = client.getBoostedSkillLevel(Skill.FIREMAKING);

        sb.append(ColorUtil.wrapWithColorTag("Firemaking", SkillColor.FIREMAKING.getColor()));

        if (config.showLevelRequirement())
        {
            sb.append(ColorUtil.wrapWithColorTag(" (lv ", ColorScheme.BRAND_ORANGE));
            sb.append(ColorUtil.wrapWithColorTag(Integer.toString(item.getLevel()), currentLevel >= item.getLevel() ? Color.GREEN : Color.RED));
            sb.append(ColorUtil.wrapWithColorTag(")", ColorScheme.BRAND_ORANGE));
        }

        switch(item.getItemType())
        {
            case LOGS:
                addLine(sb, "Burn", item.getXp(), quantity, null);
                if(config.firemakingShowCampfire())
                {
                    addLine(sb, "Add to forester's campfire", Math.floor(item.getXp() * 10 / 3) / 10, quantity, Color.ORANGE);
                }
                if(item.getMinSacredOilDoses() > 0 && config.firemakingShowPyre())
                {
                    double minXP = 10;
                    double maxXP = 16;
                    switch(item.getMinSacredOilDoses())
                    {
                        case 3:
                            minXP = 12;
                            break;
                        case 4:
                            minXP = 16;
                            break;
                    }
                    sb.append(NEW_LINE);
                    sb.append(ColorUtil.wrapWithColorTag("Turn into pyre logs", ColorUtil.fromHex("#98bb2b")));
                    sb.append(": ");
                    if(minXP == maxXP)
                    {
                        sb.append(df.format(minXP));
                    }
                    else
                    {
                        sb.append(df.format(minXP));
                        sb.append("-");
                        sb.append(df.format(maxXP));
                    }
                    sb.append("xp");
                    if(config.showStackCalculations() && quantity > 1)
                    {
                        sb.append(ColorUtil.colorTag(Color.CYAN));
                        sb.append(" (Stack: ");
                        if(minXP == maxXP)
                        {
                            sb.append(df.format(minXP*quantity));
                        }
                        else
                        {
                            sb.append(df.format(minXP*quantity));
                            sb.append("-");
                            sb.append(df.format(maxXP*quantity));
                        }
                        sb.append("xp)");
                        sb.append(ColorUtil.CLOSING_COLOR_TAG);
                    }
                }
                break;
            case PYRE_LOGS:
                addLine(sb, "Cremate remains", item.getXp(), quantity, null);
                break;
            case SACRED_OIL:
                addLine(sb, "Create pyre logs", item.getXp(), quantity, null);
                break;
            case ORIGAMI_BALLOON:
                addLine(sb, "Fly", item.getXp(), quantity, null);
                break;
            case WINDTERTODT_BRAZIER_ROOT:
                addLine(sb, "Add to brazier", 3*(currentLevel), quantity, null);
                break;
            case WINDTERTODT_BRAZIER_KINDLING:
                addLine(sb, "Add to brazier", 3.8*(currentLevel), quantity, null);
                break;
            case BLAST_FURNACE:
                addLine(sb, "Add to blast furnace", item.getXp(), quantity, null);
                break;
            case BONES:
                addLine(sb, "Burn", item.getXp(), quantity, null);
                break;
            case LIGHT_ORB:
                addLine(sb, "Repair", item.getXp(), quantity, null);
                break;
        }

        return sb;
    }

    private void addLine(StringBuilder sb, String method, double xp, int quantity, Color colour)
    {
        sb.append(NEW_LINE);
        if(colour != null)
        {
            sb.append(ColorUtil.wrapWithColorTag(method, colour));
        }
        else
        {
            sb.append(method);
        }
        sb.append(": ");
        sb.append(df.format(xp));
        sb.append("xp");
        if(config.showStackCalculations() && quantity > 1)
        {
            sb.append(ColorUtil.colorTag(Color.CYAN));
            sb.append(" (Stack: ");
            sb.append(df.format(xp*quantity));
            sb.append("xp)");
            sb.append(ColorUtil.CLOSING_COLOR_TAG);
        }
    }
}

package com.laur92.runelite.plugins.skills.firemaking;

public enum FiremakingItemType
{
    LOGS,
    PYRE_LOGS,
    SACRED_OIL,
    ORIGAMI_BALLOON,
    WINDTERTODT_BRAZIER_ROOT,
    WINDTERTODT_BRAZIER_KINDLING,
    BLAST_FURNACE,
    BONES,
    LIGHT_ORB
}

package com.laur92.runelite.plugins.skills.firemaking;

import com.google.common.collect.ImmutableSet;
import net.runelite.api.ItemID;

import java.util.*;

public enum FiremakingItems
{
    // LOGS
    LOGS(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.LOGS, ItemID.ACHEY_TREE_LOGS))
            .itemType(FiremakingItemType.LOGS)
            .xp(40)
            .minSacredOilDoses(2)
            .build()),
    COLOURED_LOGS(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BLUE_LOGS, ItemID.GREEN_LOGS, ItemID.PURPLE_LOGS, ItemID.RED_LOGS, ItemID.WHITE_LOGS))
            .itemType(FiremakingItemType.LOGS)
            .xp(50)
            .build()),
    OAK_LOGS(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.OAK_LOGS))
            .itemType(FiremakingItemType.LOGS)
            .xp(60)
            .level(15)
            .minSacredOilDoses(2)
            .build()),
    WILLOW_LOGS(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.WILLOW_LOGS))
            .itemType(FiremakingItemType.LOGS)
            .xp(90)
            .level(30)
            .minSacredOilDoses(3)
            .build()),
    BLISTERWOOD_LOGS(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BLISTERWOOD_LOGS))
            .itemType(FiremakingItemType.LOGS)
            .xp(96)
            .level(62)
            .build()),
    TEAK_LOGS(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.TEAK_LOGS))
            .itemType(FiremakingItemType.LOGS)
            .xp(105)
            .level(35)
            .minSacredOilDoses(3)
            .build()),
    ARCTIC_PINE_LOGS(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.ARCTIC_PINE_LOGS))
            .itemType(FiremakingItemType.LOGS)
            .xp(125)
            .level(42)
            .minSacredOilDoses(2)
            .build()),
    MAPLE_LOGS(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.MAPLE_LOGS))
            .itemType(FiremakingItemType.LOGS)
            .xp(135)
            .level(45)
            .minSacredOilDoses(3)
            .build()),
    MAHOGANY_LOGS(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.MAHOGANY_LOGS))
            .itemType(FiremakingItemType.LOGS)
            .xp(157.5)
            .level(50)
            .minSacredOilDoses(3)
            .build()),
    YEW_LOGS(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.YEW_LOGS))
            .itemType(FiremakingItemType.LOGS)
            .xp(202.5)
            .level(60)
            .minSacredOilDoses(4)
            .build()),
    MAGIC_LOGS(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.MAGIC_LOGS))
            .itemType(FiremakingItemType.LOGS)
            .xp(303.8)
            .level(75)
            .minSacredOilDoses(4)
            .build()),
    REDWOOD_LOGS(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.REDWOOD_LOGS))
            .itemType(FiremakingItemType.LOGS)
            .xp(350)
            .level(90)
            .minSacredOilDoses(4)
            .build()),


    // PYRE LOGS
    PYRE_LOGS(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.PYRE_LOGS))
            .itemType(FiremakingItemType.PYRE_LOGS)
            .xp(50)
            .level(5)
            .build()),
    OAK_PYRE_LOGS(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.OAK_PYRE_LOGS))
            .itemType(FiremakingItemType.PYRE_LOGS)
            .xp(70)
            .level(20)
            .build()),
    WILLOW_PYRE_LOGS(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.WILLOW_PYRE_LOGS))
            .itemType(FiremakingItemType.PYRE_LOGS)
            .xp(100)
            .level(35)
            .build()),
    TEAK_PYRE_LOGS(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.TEAK_PYRE_LOGS))
            .itemType(FiremakingItemType.PYRE_LOGS)
            .xp(120)
            .level(40)
            .build()),
    ARCTIC_PYRE_LOGS(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.ARCTIC_PYRE_LOGS))
            .itemType(FiremakingItemType.PYRE_LOGS)
            .xp(158)
            .level(47)
            .build()),
    MAPLE_PYRE_LOGS(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.MAPLE_PYRE_LOGS))
            .itemType(FiremakingItemType.PYRE_LOGS)
            .xp(175)
            .level(50)
            .build()),
    MAHOGANY_PYRE_LOGS(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.MAHOGANY_PYRE_LOGS))
            .itemType(FiremakingItemType.PYRE_LOGS)
            .xp(210)
            .level(55)
            .build()),
    YEW_PYRE_LOGS(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.YEW_PYRE_LOGS))
            .itemType(FiremakingItemType.PYRE_LOGS)
            .xp(255)
            .level(65)
            .build()),
    MAGIC_PYRE_LOGS(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.MAGIC_PYRE_LOGS))
            .itemType(FiremakingItemType.PYRE_LOGS)
            .xp(404.5)
            .level(80)
            .build()),
    REDWOOD_PYRE_LOGS(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.REDWOOD_PYRE_LOGS))
            .itemType(FiremakingItemType.PYRE_LOGS)
            .xp(500)
            .level(95)
            .build()),


    // SACRED OIL
    SACRED_OIL_2(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.SACRED_OIL2))
            .itemType(FiremakingItemType.SACRED_OIL)
            .xp(10)
            .build()),
    SACRED_OIL_3(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.SACRED_OIL3))
            .itemType(FiremakingItemType.SACRED_OIL)
            .xp(12)
            .build()),
    SACRED_OIL_4(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.SACRED_OIL4))
            .itemType(FiremakingItemType.SACRED_OIL)
            .xp(16)
            .build()),


    // ORIGAMI BALLOONS
    ORIGAMI_BALLOONS(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.ORIGAMI_BALLOON))
            .itemType(FiremakingItemType.ORIGAMI_BALLOON)
            .xp(20)
            .level(20)
            .build()),


    // WINTERTODT
    BRUMA_ROOT(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BRUMA_ROOT))
            .itemType(FiremakingItemType.WINDTERTODT_BRAZIER_ROOT)
            .level(50)
            .build()),
    BRUMA_KINDLING(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.BRUMA_KINDLING))
            .itemType(FiremakingItemType.WINDTERTODT_BRAZIER_KINDLING)
            .level(50)
            .build()),


    // BLAST FURNACE
    SPADEFUL_OF_COKE(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.SPADEFUL_OF_COKE))
            .itemType(FiremakingItemType.BLAST_FURNACE)
            .xp(5)
            .level(30)
            .build()),


    // BONES
    JOGRE_BONES(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.JOGRE_BONES))
            .itemType(FiremakingItemType.BONES)
            .xp(90)
            .level(30)
            .build()),


    // LIGHT ORB
    LIGHT_ORB(FiremakingItem.builder()
            .itemIDs(ImmutableSet.of(ItemID.LIGHT_ORB))
            .itemType(FiremakingItemType.LIGHT_ORB)
            .xp(1000)
            .level(52)
            .build())
    ;

    private static final Map<Integer, List<FiremakingItem>> idsToItem = new HashMap<>();

    static
    {
        Arrays.stream(values())
                .map(fi -> fi.item)
                .forEach(fi -> fi.getItemIDs().forEach(id -> {
                    if (!idsToItem.containsKey(id))
                    {
                        idsToItem.put(id, new ArrayList<>());
                    }
                    idsToItem.get(id).add(fi);
                }));
    }

    public final FiremakingItem item;
    FiremakingItems(FiremakingItem item)
    {
        this.item = item;
    }

    public static FiremakingItem getFiremakingItem(int itemID)
    {
        if(!idsToItem.containsKey(itemID)) return null;

        return idsToItem.get(itemID).get(0);
    }
}

package com.laur92.runelite.plugins;

import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.util.ColorUtil;

import javax.inject.Inject;
import java.awt.*;

public class ItemXPVersion
{
    public static String CURRENT_VERSION = "0.2";
    @Inject	private ConfigManager configManager;
    @Inject private ClientThread clientThread;
    @Inject private Client client;

    public void CheckForNewVersion()
    {
        var oldVersion = configManager.getConfiguration(ItemXPConfig.CONFIG_GROUP, ItemXPConfig.PLUGIN_VERSION);
        var newVersion = CURRENT_VERSION;

        if(!newVersion.equals(oldVersion))
        {
            clientThread.invokeLater(() -> {
                client.addChatMessage(ChatMessageType.GAMEMESSAGE,
                        "",
                        "[" + ColorUtil.wrapWithColorTag("Item XP Plugin" , Color.MAGENTA) + "] "
                                + "New Version: v" + CURRENT_VERSION,
                        "plugin:item-xp");

                String whatsNew = getWhatsNew(CURRENT_VERSION);

                if(whatsNew != null)
                {
                    client.addChatMessage(ChatMessageType.GAMEMESSAGE,
                            "",
                            "[" + ColorUtil.wrapWithColorTag("Item XP Plugin" , Color.MAGENTA) + "] "
                                    + "What's New: " + whatsNew,
                            "plugin:item-xp");
                }

                configManager.setConfiguration(ItemXPConfig.CONFIG_GROUP, ItemXPConfig.PLUGIN_VERSION, CURRENT_VERSION);
            });
        }
    }

    private String getWhatsNew(String versionNumber)
    {
        switch(versionNumber)
        {
            case "0.2":
                return "Prayer and Firemaking have been added!";
            default:
                return null;
        }
    }
}

package com.laur92.runelite.plugins;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;
import java.math.RoundingMode;
import java.text.DecimalFormat;

@PluginDescriptor(
	name = "Item XP",
	description = "A plugin that adds xp potential tooltips on items",
	tags = {"item", "xp", "farming", "prayer", "firemaking"}
)
@Slf4j
public class ItemXPPlugin extends Plugin
{
	@Inject	private ItemXPOverlay overlay;
	@Inject	private OverlayManager overlayManager;
	@Inject	private Client client;
	@Inject private ItemXPVersion versionManager;

	public static final String NEW_LINE = "</br>";
	public static final DecimalFormat df = new DecimalFormat("#,##0.#");

	static
	{
		df.setRoundingMode(RoundingMode.FLOOR);
	}

	@Override
	protected void startUp()
	{

		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() == GameState.LOGGED_IN)
		{
			versionManager.CheckForNewVersion();
		}
	}

	@Provides
	ItemXPConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ItemXPConfig.class);
	}
}

