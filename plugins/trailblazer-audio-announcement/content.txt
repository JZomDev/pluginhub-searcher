package com.trailblazer.audio.announcement;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TrailblazerAudioAnnouncementPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(TrailblazerAudioAnnouncementPlugin.class);
		RuneLite.main(args);
	}
}
package com.trailblazer.audio.announcement;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(TrailblazerAudioAnnouncementConfig.GROUP)
public interface TrailblazerAudioAnnouncementConfig extends Config
{
	String GROUP = "trailblazeraudioannouncement";

	@ConfigItem(
		keyName = "playCombatAchievement",
		name = "Combat Achievements",
		description = "Should the jingle play when you complete a combat achievement?",
		position = 0
	)
	default boolean playCombatAchievement() { return true; }

	@ConfigItem(
			keyName = "playCollectionLog",
			name = "Collection Log Slot",
			description = "Should the jingle play when you fill in a collection log slot?",
			position = 1
	)
	default boolean playCollectionLog() { return true; }

}

package com.trailblazer.audio.announcement;

public enum Sound {
    JINGLE("/trailblazer_league_task_completion_jingle.wav");

    private final String resourceName;

    Sound(String resourceName) {
        this.resourceName = resourceName;
    }

    String getResourceName() {
        return this.resourceName;
    }
}

package com.trailblazer.audio.announcement;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import java.util.regex.Pattern;

@Slf4j
@PluginDescriptor(
	name = "Trailblazer Audio Announcement",
	description = "Plays the Leagues 2: Trailblazer jingle when completing specific tasks",
	tags = {"trailblazer", "leagues", "sound", "combat achievements", "collection log"}
)
public class TrailblazerAudioAnnouncementPlugin extends Plugin
{
	@Inject
	private Client client;

	@Getter(AccessLevel.PACKAGE)
	@Inject
	private ClientThread clientThread;

	@Inject
	private SoundEngine soundEngine;

	@Inject
	private TrailblazerAudioAnnouncementConfig config;

	private static final Pattern COLLECTION_LOG_ITEM_REGEX = Pattern.compile("New item added to your collection log:.*");
	private static final Pattern COMBAT_TASK_REGEX = Pattern.compile("Congratulations, you've completed an? (?:\\w+) combat task:.*");

	private int ticksSinceLogin = 0;
	private boolean resetTicks = false;

	@Override
	protected void startUp() throws Exception
	{
		log.info("Trailblazer Audio Announcement started!");
	}

	@Override
	protected void shutDown() throws Exception
	{
		log.info("Trailblazer Audio Announcement stopped!");
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		switch(event.getGameState())
		{
			case LOGIN_SCREEN:
			case HOPPING:
			case LOGGING_IN:
			case LOGIN_SCREEN_AUTHENTICATOR:
			case CONNECTION_LOST:
				resetTicks = true;
				// set to 0 here in-case of race condition with varbits changing before this handler is called
				// when game state becomes LOGGED_IN
				ticksSinceLogin = 0;
				break;
			case LOGGED_IN:
				if (resetTicks) {
					resetTicks = false;
					ticksSinceLogin = 0;
				}
		}
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		ticksSinceLogin++;
	}

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage) {
		if (chatMessage.getType() != ChatMessageType.GAMEMESSAGE && chatMessage.getType() != ChatMessageType.SPAM) {
			return;
		}

		if (config.playCollectionLog() && COLLECTION_LOG_ITEM_REGEX.matcher(chatMessage.getMessage()).matches()) {
			soundEngine.playClip(Sound.JINGLE);
		} else if (config.playCombatAchievement() && COMBAT_TASK_REGEX.matcher(chatMessage.getMessage()).matches()) {
			soundEngine.playClip(Sound.JINGLE);
		}
	}

	@Provides
	TrailblazerAudioAnnouncementConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(TrailblazerAudioAnnouncementConfig.class);
	}
}

package com.trailblazer.audio.announcement;

import lombok.extern.slf4j.Slf4j;

import javax.inject.Singleton;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;

@Singleton
@Slf4j
public class SoundEngine {

    private static final long CLIP_MTIME_UNLOADED = -2;

    private long lastClipMTime = CLIP_MTIME_UNLOADED;
    private Clip clip = null;

    private boolean loadClip(Sound sound) {
        try (InputStream resourceStream = SoundEngine.class.getResourceAsStream(sound.getResourceName())) {
            if (resourceStream == null) {
                log.warn("Failed to load jingle " + sound + " as resource stream was null!");
            } else {
                try (InputStream fileStream = new BufferedInputStream(resourceStream);
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(fileStream)) {
                    clip.open(audioInputStream); // liable to error with pulseaudio, works on Windows, no clue about mac
                }
                return true;
            }
        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
            log.warn("Failed to load jingle " + sound, e);
        }
        return false;
    }

    public void playClip(Sound sound) {
        long currentMTime = System.currentTimeMillis();
        if (clip == null || currentMTime != lastClipMTime || !clip.isOpen()) {
            if (clip != null && clip.isOpen()) {
                clip.close();
            }

            try {
                clip = AudioSystem.getClip();
            } catch (LineUnavailableException e) {
                lastClipMTime = CLIP_MTIME_UNLOADED;
                log.warn("Failed to get clip for jingle " + sound, e);
                return;
            }

            lastClipMTime = currentMTime;
            if (!loadClip(sound)) {
                return;
            }
        }

        // From RuneLite base client Notifier class:
        // Using loop instead of start + setFramePosition prevents the clip
        // from not being played sometimes, presumably a race condition in the
        // underlying line driver
        clip.loop(0);
    }
}
