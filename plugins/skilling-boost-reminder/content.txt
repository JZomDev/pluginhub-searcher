package com.jonnesaloranta;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SkillingBoostReminderTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(SkillingBoostReminderPlugin.class);
		RuneLite.main(args);
	}
}
package com.jonnesaloranta;

import com.google.inject.Provides;
import javax.inject.Inject;

import com.jonnesaloranta.enums.BoostItems;
import com.jonnesaloranta.enums.PlayerAnim;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.widgets.Widget;
import net.runelite.client.Notifier;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
		name = "Skilling Boost Reminder",
		description = "Reminds you to use special attack to boost skilling",
		tags = {"skilling", "boost", "reminder", "special attack", "spec", "woodcutting", "fishing", "mining"}
)
public class SkillingBoostReminderPlugin extends Plugin {

	@Inject
	private Client client;

	@Inject
	private SkillingBoostReminderConfig config;

	@Inject
	private ConfigManager configManager;

	@Inject
	private Notifier notifier;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private SkillingBoostReminderOverlay overlay;

	@Getter
	private final int mainHandSlot = EquipmentInventorySlot.WEAPON.getSlotIdx();

	@Getter
	private int mainHandItemID = -1;

	@Getter
	private boolean canBoost = false;

	@Getter
	private boolean isSkilling = false;

	@Getter
	private int timer = 0;

	@Getter
	private boolean isNotified = false;

	private final int specTextWidgetID = 10485796;

	private String reminderMessage = "You can boost with special attack!";

	@Override
	protected void startUp() throws Exception {
		log.info("SkillBoostReminder started!");
		overlayManager.add(overlay);

		checkConfigValues();
	}

	private void checkConfigValues() {
		if(config.offsetX() > 999 || config.offsetX() < -999){
			configManager.setConfiguration("notification", "offsetX", 0);
		}

		if(config.offsetY() > 999 || config.offsetY() < -999){
			configManager.setConfiguration("notification", "offsetY", 0);
		}

	}

	@Override
	protected void shutDown() throws Exception {
		log.info("SkillBoostReminder stopped!");
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onItemContainerChanged(final ItemContainerChanged event) {
		if (event.getContainerId() == InventoryID.EQUIPMENT.getId()) {
			Item mainHandItem = event.getItemContainer().getItems()[mainHandSlot];
			int itemID = mainHandItem.getId();
			if (mainHandItemID != itemID) {
				mainHandItemID = itemID;
			}
		}
	}

	@Subscribe
	public void onGameTick(GameTick event) {
		int animID = client.getLocalPlayer().getAnimation();
		updateSkillingStatus(animID);
		updateBoostStatus();

		if (isSkilling && canBoost && !isNotified) {
			notifyBoost();
		}

		handleWidgetVisibility();
	}

	private void updateSkillingStatus(int animID) {
		switch (animID) {
			case PlayerAnim.ANIM_MINING:
				isSkilling = config.mining();
				break;
			case PlayerAnim.ANIM_FISHING:
			case PlayerAnim.ANIM_FISHING_1:
			case PlayerAnim.ANIM_FISHING_2:
			case PlayerAnim.ANIM_FISHING_3:
			case PlayerAnim.ANIM_FISHING_4:
			case PlayerAnim.ANIM_FISHING_5:
			case PlayerAnim.ANIM_FISHING_6:
				isSkilling = config.fishing();
				break;
			case PlayerAnim.ANIM_WOODCUTTING:
			case PlayerAnim.ANIM_WOODCUTTING_FELLING_AXE:
				isSkilling = config.woodcutting();
				break;
			default:
				isSkilling = false;
				break;
		}
	}


	private void updateBoostStatus() {
		if (isSkilling && isBoostableItem(mainHandItemID)) {
			canBoost = canBoost();
		}
	}

	private boolean isBoostableItem(int itemID) {
		switch (itemID) {
			case BoostItems.DRAGON_PICKAXE:
			case BoostItems.DRAGON_PICKAXE_OR:
			case BoostItems.DRAGON_FELLING_AXE:
			case BoostItems.INFERNAL_PICKAXE:
			case BoostItems.CRYSTAL_PICKAXE:
			case BoostItems.THIRD_AGE_PICKAXE:
			case BoostItems.DRAGON_AXE:
			case BoostItems.DRAGON_AXE_OR:
			case BoostItems.INFERNAL_AXE:
			case BoostItems.CRYSTAL_AXE:
			case BoostItems.THIRD_AGE_AXE:
			case BoostItems.DRAGON_HARPOON:
			case BoostItems.DRAGON_HARPOON_OR:
			case BoostItems.INFERNAL_HARPOON:
				return true;
			default:
				return false;
		}
	}

	private void notifyBoost() {
		if (config.remindChat()) {
			client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", reminderMessage, null);
		}
		if (config.remindNotify()) {
			notifier.notify(reminderMessage);
		}
		isNotified = true;
	}

	private void handleWidgetVisibility() {
		Widget widget = client.getWidget(specTextWidgetID);

		if(canBoost){
			if (timer > 0) {
				timer--;
				if (widget != null) {
					overlay.setHighlighted(timer % 2 == 1);
				}
			} else {
				resetTimer();
			}
		}else{
			resetTimer();
		}
	}

	private void resetTimer() {
		timer = config.remindTimer();
		canBoost = false;
		overlay.setHighlighted(false);
		isNotified = false;
	}

	private boolean canBoost() {
		Widget widget = client.getWidget(specTextWidgetID);
		if (widget != null) {
			String text = widget.getText();
			try {
				return text != null && Integer.parseInt(text) == 100;
			} catch (NumberFormatException e) {
				return false;
			}
		}
		return false;
	}

	@Provides
	SkillingBoostReminderConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(SkillingBoostReminderConfig.class);
	}
}

package com.jonnesaloranta;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.widgets.Widget;
import net.runelite.client.ui.overlay.Overlay;

import javax.inject.Inject;
import java.awt.*;

@Slf4j
public class SkillingBoostReminderOverlay extends Overlay {

    @Getter
    public boolean isHighlighted = false;
    private final Client client;
    private final SkillingBoostReminderConfig config;


    private final int specWidgetID = 10485794;

    @Inject
    private SkillingBoostReminderOverlay(Client client, SkillingBoostReminderConfig config) {
        this.client = client;
        this.config = config;
    }

    public void setHighlighted(boolean b) {
        isHighlighted = b;
    }

    @Override
    public Dimension render(Graphics2D graphics2D) {
        Widget specWidget = client.getWidget(specWidgetID);
        Color color = config.highlightColor();

        if (specWidget == null) {
            return null;
        }

        Rectangle bounds = specWidget.getBounds();

        if (isHighlighted && config.highlightSpecWidget()) {

            Polygon arrow = new Polygon();
            int arrowWidth = bounds.width / 4;
            int arrowHeight = bounds.height / 2;  // Adjust arrow height

            int offsetY = config.offsetY();
            int offsetX = config.offsetX();

            // Set the points for the arrow (upward pointing triangle)
            arrow.addPoint(offsetX + bounds.x + bounds.width / 2, bounds.y + offsetY + 25); // Top point
            arrow.addPoint(offsetX + bounds.x + (bounds.width / 2) - arrowWidth, bounds.y + arrowHeight + offsetY + 25); // Left
            // point
            arrow.addPoint(offsetX + bounds.x + (bounds.width / 2) + arrowWidth, bounds.y + arrowHeight + offsetY + 25); // Right
            // point

            graphics2D.setColor(color);
            graphics2D.fill(arrow);
        }

        return null;
    }

}

package com.jonnesaloranta;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("skillboostreminder")
public interface SkillingBoostReminderConfig extends Config
{
	@ConfigSection(
		name = "Notification",
		description = "Notification settings",
		position = 0
	)
	String notification = "notification";

	@ConfigItem(
			keyName = "remindChat",
			name = "Remind in chat",
			description = "Sends a chat message when you should boost",
			section = "notification",
			position = 0
	)
	default boolean remindChat()
	{
		return true;
	}

	@ConfigItem(
			keyName = "remindNotification",
			name = "Remind with notification",
			description = "Sends a notification per your Runelite settings when you should boost",
			section = "notification",
			position = 1
	)
	default boolean remindNotify()
	{
		return true;
	}

	@ConfigItem(
			keyName = "remindTimer",
			name = "Remind timer in ticks",
			description = "A delay in ticks before reminding again",
			section = "notification",
			position = 2
	)
	// 1 tick = 0.6sec, 50 ticks = 30sec
	default int remindTimer()
	{
		return 50;
	}

	@ConfigItem(
			keyName = "highlightSpecWidget",
			name = "Highlight arrow",
			description = "Highlights the special attack widget with an arrow",
			section = "notification",
			position = 3
	)
	default boolean highlightSpecWidget()
	{
		return true;
	}


	@Alpha
	@ConfigItem(
			keyName = "highlightColor",
			name = "Highlight color",
			description = "Color of the highlight",
			section = "notification",
			position = 4
	)
	default Color highlightColor()
	{
		return Color.GREEN;
	}

	@Range(
			min = -999,
			max = 999
	)
	@ConfigItem(
			keyName = "offsetX",
			name = "Notifier arrow X Offset",
			description = "Adjusts the blinking arrow position left and right. Should default under the special attack button",
			section = "notification",
			position = 5
	)
	default int offsetX()
	{
		return 0;
	}

	@Range(
			min = -999,
			max = 999
	)
	@ConfigItem(
			keyName = "offsetY",
			name = "Notifier arrow Y Offset",
			description = "Adjusts the blinking arrow position up and down. Should default under the special attack button",
			section = "notification",
			position = 6
	)
	default int offsetY()
	{
		return 0;
	}

	@ConfigSection(
			name = "Skills",
			description = "Skill settings",
			position = 1
	)
	String skills = "skills";

	@ConfigItem(
		keyName = "miningBoost",
		name = "Remind mining boost",
		description = "Reminds you to boost when mining",
		section = "skills",
		position = 0
	)
	default boolean mining()
	{
		return true;
	}

	@ConfigItem(
		keyName = "fishingBoost",
		name = "Remind fishing boost",
		description = "Reminds you to boost when fishing",
		section = "skills",
		position = 1
	)
	default boolean fishing()
	{
		return true;
	}

	@ConfigItem(
		keyName = "woodcuttingBoost",
		name = "Remind woodcutting boost",
		description = "Reminds you to boost when woodcutting",
		section = "skills",
		position = 2
	)
	default boolean woodcutting()
	{
		return true;
	}

}

package com.jonnesaloranta.enums;

import net.runelite.api.ItemID;

public class BoostItems {

    public static final int DRAGON_PICKAXE = ItemID.DRAGON_PICKAXE;
    public static final int DRAGON_PICKAXE_OR = ItemID.DRAGON_PICKAXE_OR;
    public static final int DRAGON_FELLING_AXE = ItemID.DRAGON_FELLING_AXE;
    public static final int INFERNAL_PICKAXE = ItemID.INFERNAL_PICKAXE;
    public static final int CRYSTAL_PICKAXE = ItemID.CRYSTAL_PICKAXE;
    public static final int THIRD_AGE_PICKAXE = ItemID._3RD_AGE_PICKAXE;

    public static final int DRAGON_AXE = ItemID.DRAGON_AXE;
    public static final int DRAGON_AXE_OR = ItemID.DRAGON_AXE_OR;
    public static final int INFERNAL_AXE = ItemID.INFERNAL_AXE;
    public static final int CRYSTAL_AXE = ItemID.CRYSTAL_AXE;
    public static final int THIRD_AGE_AXE = ItemID._3RD_AGE_AXE;

    public static final int DRAGON_HARPOON = ItemID.DRAGON_HARPOON;
    public static final int DRAGON_HARPOON_OR = ItemID.DRAGON_HARPOON_OR;
    public static final int INFERNAL_HARPOON = ItemID.INFERNAL_HARPOON;
}

package com.jonnesaloranta.enums;

public class PlayerAnim {

    /**
     * Mining with Dragon Pickaxe
     * */
    public static final int ANIM_MINING = 7139;

    /**
     * Woodcutting with Dragon Axe
     * */
    public static final int ANIM_WOODCUTTING = 2846;

    /**
     * Woodcutting with Dragon Felling Axe
     * */
    public static final int ANIM_WOODCUTTING_FELLING_AXE = 10071;

    /**
     * Fishing with Dragon Harpoon
     * */
    public static final int ANIM_FISHING = 7401;

    /**
     * Regular Harpoon
     * */
    public static final int ANIM_FISHING_1 = 618;

    /**
     * Lobster Pot
     * */
    public static final int ANIM_FISHING_2 = 619;

    /**
     * Big Fishing net
     * */
    public static final int ANIM_FISHING_3 = 620;

    /**
     * Small Fishing Net
     * */
    public static final int ANIM_FISHING_4 = 621;

    /**
     * Fishing Rod (throw tackle)
     * */
    public static final int ANIM_FISHING_5 = 622;

    /**
     * Fishing Rod (fishing)
     * */
    public static final int ANIM_FISHING_6 = 623;

}
