package com.dodgydeals;

import com.google.inject.Provides;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@PluginDescriptor(
		name = "Dodgy Deals",
		description = "Displays an 11x11 radius around the player",
		tags = {"radius", "overlay", "player"}
)
public class DodgyDealsPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private DodgyDealsOverlay overlay;

	@Provides
	DodgyDealsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(DodgyDealsConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
	}
}
package com.dodgydeals;

import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.Player;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.api.Perspective;
import net.runelite.api.NPCComposition;
import net.runelite.client.ui.overlay.components.TitleComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;

import javax.inject.Inject;
import java.awt.*;
import java.util.HashSet;
import java.util.Set;

public class DodgyDealsOverlay extends Overlay
{
    private static final int RADIUS = 5; // Half of 11 (center included)

    private final Client client;
    private final DodgyDealsConfig config;
    private final PanelComponent panelComponent = new PanelComponent();

    private Set<NPC> pickpocketableNPCs = new HashSet<>();

    @Inject
    public DodgyDealsOverlay(Client client, DodgyDealsConfig config)
    {
        this.client = client;
        this.config = config;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        Player player = client.getLocalPlayer();
        if (player == null)
        {
            return null;
        }

        WorldPoint playerLocation = player.getWorldLocation();

        // Clear the previous set of pickpocketable NPCs for this frame
        pickpocketableNPCs.clear();

        // Render the player's 11x11 radius
        for (int dx = -RADIUS; dx <= RADIUS; dx++)
        {
            for (int dy = -RADIUS; dy <= RADIUS; dy++)
            {
                WorldPoint point = new WorldPoint(
                        playerLocation.getX() + dx,
                        playerLocation.getY() + dy,
                        playerLocation.getPlane()
                );

                renderTile(graphics, point);
            }
        }

        // Render NPC highlights within the 11x11 radius, only if they have Pickpocket option
        for (NPC npc : client.getNpcs())
        {
            WorldPoint npcLocation = npc.getWorldLocation();
            renderNpcTile(graphics, npcLocation, npc); // Pass the NPC to the renderNpcTile function
        }

        // Render the tooltip with the number of pickpocketable NPCs
        renderTooltip(graphics);

        return null;
    }

    private void renderTile(Graphics2D graphics, WorldPoint point)
    {
        LocalPoint localPoint = LocalPoint.fromWorld(client, point);
        if (localPoint == null)
        {
            return;
        }

        Polygon tilePoly = Perspective.getCanvasTilePoly(client, localPoint);
        if (tilePoly != null)
        {
            // Get color for the tile and border
            Color tileColor = config.tileColor();
            int tileOpacity = Math.min(255, Math.max(0, config.tileOpacity()));
            int borderOpacity = Math.min(255, Math.max(0, config.borderOpacity()));
            int borderWidth = Math.max(1, config.tileBorderWidth());

            // Apply tile opacity
            Color transparentTileColor = new Color(
                    tileColor.getRed(),
                    tileColor.getGreen(),
                    tileColor.getBlue(),
                    tileOpacity
            );
            graphics.setColor(transparentTileColor);
            graphics.fill(tilePoly); // Fill the tile

            // Apply border opacity
            Color transparentBorderColor = new Color(
                    tileColor.getRed(),
                    tileColor.getGreen(),
                    tileColor.getBlue(),
                    borderOpacity
            );
            graphics.setColor(transparentBorderColor);

            // Handle border drawing with configurable width
            if (borderWidth > 0)
            {
                graphics.setStroke(new BasicStroke(borderWidth));
                graphics.draw(tilePoly); // Draw the border with the specified stroke
            }
        }
    }

    private void renderNpcTile(Graphics2D graphics, WorldPoint npcLocation, NPC npc)
    {
        Player player = client.getLocalPlayer();
        if (player == null) return;

        WorldPoint playerLocation = player.getWorldLocation();

        // Check if NPC is within the 11x11 square around the player
        if (Math.abs(npcLocation.getX() - playerLocation.getX()) <= RADIUS &&
                Math.abs(npcLocation.getY() - playerLocation.getY()) <= RADIUS)
        {
            // Check if the NPC has "Pickpocket" option in its interactions
            if (!hasPickpocketOption(npc)) {
                return; // Skip this NPC if no Pickpocket option
            }

            // Add the NPC to the pickpocketable list
            pickpocketableNPCs.add(npc);

            LocalPoint localPoint = LocalPoint.fromWorld(client, npcLocation);
            if (localPoint == null)
            {
                return;
            }

            Polygon tilePoly = Perspective.getCanvasTilePoly(client, localPoint);
            if (tilePoly != null)
            {
                // Get the NPC highlight color and opacity
                Color npcHighlightColor = config.npcHighlightColor();
                int npcOpacity = Math.min(255, Math.max(0, config.npcHighlightOpacity()));

                // Apply NPC tile highlight opacity
                Color transparentNpcHighlightColor = new Color(
                        npcHighlightColor.getRed(),
                        npcHighlightColor.getGreen(),
                        npcHighlightColor.getBlue(),
                        npcOpacity
                );
                graphics.setColor(transparentNpcHighlightColor);
                graphics.fill(tilePoly); // Fill the NPC's tile
            }
        }
    }

    private boolean hasPickpocketOption(NPC npc)
    {
        // Get the NPCComposition to access the actions
        NPCComposition npcComposition = npc.getComposition();
        if (npcComposition == null)
        {
            return false; // If no composition, return false
        }

        // Get the actions from the NPCComposition
        String[] actions = npcComposition.getActions();
        if (actions == null)
        {
            return false; // If no actions, return false
        }

        // Iterate over NPC interaction options to see if "Pickpocket" is one of them
        for (String option : actions)
        {
            if (option != null && option.equalsIgnoreCase("Pickpocket"))
            {
                return true; // Return true if Pickpocket is found
            }
        }

        return false; // Return false if Pickpocket is not found
    }

    private void renderTooltip(Graphics2D graphics)
    {
        if (!config.showTooltip()) {
            return; // Do nothing if the tooltip is disabled
        }

        // Use configurable tooltip position
        int tooltipX = config.tooltipX();
        int tooltipY = config.tooltipY();

        // Clear the panel component before each render
        panelComponent.getChildren().clear();

        // Add the text for the panel component
        panelComponent.getChildren().add(
                TitleComponent.builder()
                        .text("Pickpocketable NPCs: " + pickpocketableNPCs.size())
                        .color(Color.WHITE)
                        .build()
        );

        // Default to centered at the top
        if (tooltipX == 0)
        {
            tooltipX = client.getCanvasWidth() / 2 - panelComponent.getPreferredSize().width / 2;
        }

        // Set the panel's background color and position
        panelComponent.setPreferredLocation(new Point(tooltipX, tooltipY));
        panelComponent.setBackgroundColor(new Color(0, 0, 0, 128)); // Semi-transparent black

        // Render the panel component
        panelComponent.render(graphics);
    }
}
package com.dodgydeals;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.Color;

@ConfigGroup("dodgydeals")
public interface DodgyDealsConfig extends Config
{
    @ConfigItem(
            keyName = "showTooltip",
            name = "Show Tooltip",
            description = "Toggle the visibility of the tooltip",
            position = 1
    )
    default boolean showTooltip()
    {
        return true;
    }

    @ConfigItem(
            keyName = "tooltipX",
            name = "Tooltip X Position",
            description = "The X coordinate for the tooltip's position",
            position = 2
    )
    default int tooltipX()
    {
        return 0; // Default to centered horizontally
    }

    @ConfigItem(
            keyName = "tooltipY",
            name = "Tooltip Y Position",
            description = "The Y coordinate for the tooltip's position",
            position = 3
    )
    default int tooltipY()
    {
        return 40; // Default to near the top of the screen
    }

    @ConfigItem(
            keyName = "tileColor",
            name = "Tile Color",
            description = "The color of the tiles highlighted around the player",
            position = 4
    )
    default Color tileColor() {
        return new Color(255, 146, 49, 210); // Default color
    }

    @ConfigItem(
            keyName = "tileOpacity",
            name = "Tile Opacity",
            description = "The opacity of the tiles highlighted around the player (0-255)",
            position = 5
    )
    default int tileOpacity() {
        return 128; // Default is 50% opacity
    }

    @ConfigItem(
            keyName = "borderOpacity",
            name = "Tile Border Opacity",
            description = "The opacity of the tile borders (0-255)",
            position = 6
    )
    default int borderOpacity() {
        return 255; // Default is fully opaque
    }

    @ConfigItem(
            keyName = "tileBorderWidth",
            name = "Tile Border Width",
            description = "The width of the tile borders",
            position = 7
    )
    default int tileBorderWidth() {
        return 2; // Default is 2 pixels
    }

    @ConfigItem(
            keyName = "npcHighlightColor",
            name = "NPC Highlight Color",
            description = "The color used to highlight pickpocketable NPCs",
            position = 8
    )
    default Color npcHighlightColor() {
        return Color.GREEN; // Default is green
    }

    @ConfigItem(
            keyName = "npcHighlightOpacity",
            name = "NPC Highlight Opacity",
            description = "The opacity of the NPC highlight (0-255)",
            position = 9
    )
    default int npcHighlightOpacity() {
        return 128; // Default is 50% opacity
    }
}
package com.dodgydeals;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DodgyDealsTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(DodgyDealsPlugin.class);
		RuneLite.main(args);
	}
}
