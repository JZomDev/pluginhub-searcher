package io.hydrox.coffincounter;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CoffinCounterPluginLauncher
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CoffinCounterPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2021 Hydrox6 <ikada@protonmail.ch>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package io.hydrox.coffincounter;

import net.runelite.client.ui.overlay.infobox.InfoBox;
import java.awt.Color;
import java.awt.image.BufferedImage;

public class ShadeRemainsInfobox extends InfoBox
{
	private final Shade shade;
	private final CoffinCounterPlugin plugin;
	private final CoffinCounterConfig config;


	public ShadeRemainsInfobox(BufferedImage image, Shade shade, CoffinCounterPlugin plugin, CoffinCounterConfig config)
	{
		super(image, plugin);
		this.shade = shade;
		this.plugin = plugin;
		this.config = config;
		setTooltip(shade.getName() + " remains in your Coffin");
	}

	@Override
	public String getText()
	{
		int count = plugin.getStored().get(shade);
		return Integer.toString(count);
	}

	@Override
	public Color getTextColor()
	{
		return Color.WHITE;
	}

	@Override
	public boolean render()
	{
		final int threshold = config.infoboxZero() ? -1 : 0;
		return plugin.getStored().get(shade) > threshold;
	}
}

/*
 * Copyright (c) 2021 Hydrox6 <ikada@protonmail.ch>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package io.hydrox.coffincounter;

import java.awt.Color;
import java.awt.Graphics;

public class UIUtil
{
	static final int GAP_X = 20;
	static final int GAP_Y = 12;
	static final int OFFSET_TOP = 10;
	static final int LABELS_PER_COLUMN = 3;
	static final String UNKNOWN = "?";

	static void drawString(Graphics graphics, Shade shade, String text, int drawX, int drawY)
	{
		if (shade.getOutline() != null)
		{
			graphics.setColor(shade.getOutline());
			graphics.drawString(text, drawX + 1, drawY);
			graphics.drawString(text, drawX - 1, drawY);
			graphics.drawString(text, drawX, drawY + 1);
			graphics.drawString(text, drawX, drawY - 1);
		}
		else
		{
			graphics.setColor(Color.BLACK);
			graphics.drawString(text, drawX + 1, drawY + 1);
		}
		graphics.setColor(shade.getColour());
		graphics.drawString(text, drawX, drawY);
	}
}

/*
 * Copyright (c) 2021 Hydrox6 <ikada@protonmail.ch>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package io.hydrox.coffincounter;

import com.google.inject.Inject;
import static io.hydrox.coffincounter.UIUtil.drawString;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.WidgetItemOverlay;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.util.Map;

public class CoffinCounterOverlay extends WidgetItemOverlay
{
	private final CoffinCounterPlugin plugin;

	@Inject
	CoffinCounterOverlay(CoffinCounterPlugin plugin)
	{
		this.plugin = plugin;
		showOnInventory();
		showOnBank();
		showOnEquipment();
	}

	@Override
	public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem widgetItem)
	{
		if (!Coffin.ALL_COFFINS().contains(itemId))
		{
			return;
		}
		graphics.setFont(FontManager.getRunescapeSmallFont());
		int idx = 0;
		for (Map.Entry<Shade, Integer> entry : plugin.getStored().entrySet())
		{
			if (entry.getValue() == 0)
			{
				continue;
			}
			final Shade shade = entry.getKey();
			final Integer value = entry.getValue();
			final Rectangle bounds = widgetItem.getCanvasBounds();
			final int drawX = bounds.x + UIUtil.GAP_X * (idx / UIUtil.LABELS_PER_COLUMN);
			final int drawY = (bounds.y + UIUtil.OFFSET_TOP) + UIUtil.GAP_Y * (idx % UIUtil.LABELS_PER_COLUMN);
			if (entry.getValue() == -1)
			{
				drawString(graphics, shade, UIUtil.UNKNOWN, drawX, drawY);
			}
			else
			{
				drawString(graphics, shade, value.toString(), drawX, drawY);
			}
			idx++;
		}
	}
}

/*
 * Copyright (c) 2021 Hydrox6 <ikada@protonmail.ch>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package io.hydrox.coffincounter;

import static io.hydrox.coffincounter.UIUtil.drawString;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.infobox.InfoBox;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.util.Map;

public class CoffinContentsInfobox extends InfoBox
{
	private final CoffinCounterPlugin plugin;
	private final CoffinCounterConfig config;

	public CoffinContentsInfobox(BufferedImage baseCoffin, CoffinCounterPlugin plugin, CoffinCounterConfig config)
	{
		super(createImage(baseCoffin, plugin, config), plugin);
		this.plugin = plugin;
		this.config = config;
		setTooltip("Coffin contents");
	}

	@Override
	public String getText()
	{
		return "";
	}

	@Override
	public Color getTextColor()
	{
		return Color.WHITE;
	}

	@Override
	public boolean render()
	{
		final int threshold = config.infoboxZero() ? -1 : 0;
		return plugin.getStored().values().stream().anyMatch(v -> v > threshold);
	}

	private static BufferedImage createImage(BufferedImage baseCoffin, CoffinCounterPlugin plugin, CoffinCounterConfig config)
	{
		final BufferedImage coffin = new BufferedImage(
			baseCoffin.getColorModel(),
			baseCoffin.copyData(null),
			baseCoffin.getColorModel().isAlphaPremultiplied(),
			null
		);
		final Graphics graphics = coffin.getGraphics();
		graphics.setFont(FontManager.getRunescapeSmallFont());

		int idx = 0;
		for (Map.Entry<Shade, Integer> entry : plugin.getStored().entrySet())
		{
			final Integer value = entry.getValue();
			if (!config.infoboxZero() && value == 0)
			{
				continue;
			}
			final Shade shade = entry.getKey();
			final int drawX = UIUtil.GAP_X * (idx / UIUtil.LABELS_PER_COLUMN);
			final int drawY = UIUtil.OFFSET_TOP + UIUtil.GAP_Y * (idx % UIUtil.LABELS_PER_COLUMN);
			if (entry.getValue() == -1)
			{
				drawString(graphics, shade, UIUtil.UNKNOWN, drawX, drawY);
			}
			else
			{
				drawString(graphics, shade, value.toString(), drawX, drawY);
			}
			idx++;
		}

		return coffin;
	}
}

/*
 * Copyright (c) 2021 Hydrox6 <ikada@protonmail.ch>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package io.hydrox.coffincounter;

import com.google.common.collect.HashMultiset;
import com.google.common.collect.Multiset;
import com.google.common.collect.Multisets;
import com.google.inject.Provides;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.InventoryID;
import net.runelite.api.ItemContainer;
import net.runelite.api.ItemID;
import net.runelite.api.MenuAction;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetID;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;
import net.runelite.client.util.Text;
import javax.inject.Inject;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@PluginDescriptor(
	name = "Coffin Counter",
	description = "Track what remains your coffin contains.",
	tags = {"shades", "remains", "coffin", "count", "loar", "phrin", "riyl", "asyn", "fiyr", "urium", "morton", "mort'ton", "sacred"}
)
@Slf4j
public class CoffinCounterPlugin extends Plugin
{
	private static final String CHECK_START = "Loar ";
	private static final Pattern CHECK_PATTERN = Pattern.compile("Loar (\\d{1,2}) / Phrin (\\d{1,2}) / Riyl (\\d{1,2}) / Asyn (\\d{1,2}) / Fiyr (\\d{1,2}) / Urium (\\d{1,2})");
	private static final String PICK_UP_START = "You put ";
	private static final Pattern PICK_UP_PATTERN = Pattern.compile("You put the (\\w+) remains into your open coffin\\.");

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private CoffinCounterOverlay overlay;

	@Inject
	private ConfigManager configManager;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private InfoBoxManager infoBoxManager;

	@Inject
	private ItemManager itemManager;

	@Inject
	private CoffinCounterConfig config;

	@Getter
	private final Map<Shade, Integer> stored = Arrays.stream(Shade.values())
		.collect(LinkedHashMap::new, (map, shade) -> map.put(shade, -1), Map::putAll);

	private Multiset<Integer> inventorySnapshot;
	private boolean checkFill;
	private boolean usingRemains;
	private boolean usingCoffin;

	@Provides
	CoffinCounterConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(CoffinCounterConfig.class);
	}

	@Override
	public void startUp()
	{
		loadCoffinState();
		overlayManager.add(overlay);
	}

	@Override
	public void shutDown()
	{
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (CoffinCounterConfig.GROUP.equals(event.getGroup()) && !CoffinCounterConfig.STORED_KEY.equals(event.getKey()))
		{
			clientThread.invoke(this::updateInfoboxes);
		}
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		if (event.getGameState() == GameState.LOGGING_IN)
		{
			loadCoffinState();
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		String message = Text.removeTags(event.getMessage());
		if (message.startsWith(CHECK_START))
		{
			Matcher m = CHECK_PATTERN.matcher(message);
			if (!m.matches())
			{
				return;
			}
			for (Shade s : Shade.values())
			{
				store(s, Integer.parseInt(m.group(s.ordinal() + 1)));
			}
			updateInfoboxes();
			saveCoffinState();
		}
		else if (message.startsWith(PICK_UP_START))
		{
			Matcher m = PICK_UP_PATTERN.matcher(message);
			if (!m.matches())
			{
				return;
			}
			Shade shade = Shade.fromName(m.group(1));
			if (shade == null)
			{
				return;
			}
			store(shade, stored.get(shade) + 1);
			updateInfoboxes();
			saveCoffinState();
		}
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event)
	{
		if (event.getWidget() == null)
		{
			return;
		}
		int itemId = event.getWidget().getItemId();
		// Handle when the player uses remains on the coffin
		if (usingRemains || usingCoffin)
		{
			if (event.getMenuAction() == MenuAction.WIDGET_TARGET_ON_WIDGET &&
				((usingRemains && Coffin.getFromItem(itemId) != null)
				|| (usingCoffin && Shade.fromRemainsID(itemId) != null)))
			{
				inventorySnapshot = createInventorySnapshot();
				checkFill = true;
			}
			// There is no situation in which a menu action can be clicked but the item will stay selected, so cancel it
			usingRemains = false;
			usingCoffin = false;
		}
		// Handle when the fill option is used.
		// This probably collides with the fish sack, but that shouldn't matter much
		else if (event.getMenuOption().equals("Fill") &&
			event.getMenuAction() == MenuAction.CC_OP && event.getId() == 2 &&
			(Coffin.getFromItem(itemId) != null
				|| WidgetInfo.TO_GROUP(event.getWidget().getId()) == WidgetID.EQUIPMENT_GROUP_ID))
		{
			inventorySnapshot = createInventorySnapshot();
			checkFill = true;
		}
		// First half of checking if the player has selected either remains or a coffin
		else if (event.getMenuAction() == MenuAction.WIDGET_TARGET && itemId != -1)
		{
			if (Shade.fromRemainsID(itemId) != null)
			{
				usingRemains = true;
			}
			else if (Coffin.getFromItem(itemId) != null)
			{
				usingCoffin = true;
			}
		}
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		if (!checkFill)
		{
			return;
		}
		// Check if there was a message saying that the coffin is full.
		final Widget chatDialogueSprite = client.getWidget(WidgetInfo.DIALOG_SPRITE_SPRITE);
		if (chatDialogueSprite != null && Coffin.getFromItem(chatDialogueSprite.getItemId()) != null)
		{
			checkFill = false;
		}
	}

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event)
	{
		if (event.getContainerId() != InventoryID.INVENTORY.getId())
		{
			return;
		}
		Multiset<Integer> current = createInventorySnapshot();
		// Clear stored data if broken coffin exists, since only one coffin can be owned, making it impossible to have
		// both a real coffin and a broken one, let alone 2 real ones.
		if (current != null && current.contains(ItemID.BROKEN_COFFIN))
		{
			stored.replaceAll((s, v) -> -1);
			updateInfoboxes();
			saveCoffinState();
			return;
		}

		if (!checkFill || inventorySnapshot == null)
		{
			return;
		}
		checkFill = false;

		Multiset<Integer> delta = Multisets.difference(inventorySnapshot, current);

		delta.forEachEntry((id, change) ->
		{
			Shade shade = Shade.fromRemainsID(id);
			store(shade, stored.get(shade) + change);
		});
		updateInfoboxes();
		saveCoffinState();
	}

	private Multiset<Integer> createInventorySnapshot()
	{
		ItemContainer itemContainer = client.getItemContainer(InventoryID.INVENTORY);
		if (itemContainer != null)
		{
			Multiset<Integer> snapshot = HashMultiset.create();
			Arrays.stream(itemContainer.getItems())
				.filter(item -> Shade.REMAINS().contains(item.getId()))
				.forEach(item -> snapshot.add(item.getId(), item.getQuantity()));
			return snapshot;
		}
		return null;
	}

	private void saveCoffinState()
	{
		configManager.setRSProfileConfiguration(
			CoffinCounterConfig.GROUP,
			CoffinCounterConfig.STORED_KEY,
			Text.toCSV(stored.values().stream().map(Object::toString).collect(Collectors.toList()))
		);
	}

	private void loadCoffinState()
	{
		String state = configManager.getRSProfileConfiguration(CoffinCounterConfig.GROUP, CoffinCounterConfig.STORED_KEY);
		if (state == null)
		{
			return;
		}
		List<String> states = Text.fromCSV(state);
		for (int i = 0; i < Shade.values().length; i++)
		{
			store(Shade.values()[i], Integer.parseInt(states.get(i)));
		}
		updateInfoboxes();
	}

	private void store(Shade shade, int value)
	{
		stored.put(shade, value);
	}

	private void updateInfoboxes()
	{
		infoBoxManager.removeIf(i -> i instanceof ShadeRemainsInfobox || i instanceof CoffinContentsInfobox);
		if (config.infoboxStyle() == CoffinCounterConfig.InfoboxStyle.SPLIT)
		{
			for (Shade s : Shade.values())
			{
				infoBoxManager.addInfoBox(new ShadeRemainsInfobox(itemManager.getImage(s.getRemainsID()), s, this, config));
			}
		}
		else if (config.infoboxStyle() == CoffinCounterConfig.InfoboxStyle.COMBINED)
		{
			infoBoxManager.addInfoBox(new CoffinContentsInfobox(itemManager.getImage(ItemID.GOLD_COFFIN), this, config));
		}
	}
}

/*
 * Copyright (c) 2021 Hydrox6 <ikada@protonmail.ch>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package io.hydrox.coffincounter;

import lombok.Getter;
import net.runelite.api.ItemID;
import org.apache.commons.text.WordUtils;
import java.awt.Color;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

@Getter
public enum Shade
{
	/* Original Colours:
	(2, 62, 2)
	(25, 16, 7)
	(38, 3, 1)
	(9, 11, 94)
	(51, 45, 45)
	(248,176,8)
	 */

	LOAR(ItemID.LOAR_REMAINS, new Color(3, 214, 3)),
	PHRIN(ItemID.PHRIN_REMAINS, new Color(0, 0, 0), Color.WHITE),
	RIYL(ItemID.RIYL_REMAINS, new Color(189, 3, 1)),
	ASYN(ItemID.ASYN_REMAINS, new Color(0, 114, 255)),
	FIYR(ItemID.FIYR_REMAINS, new Color(144, 132, 132)),
	URIUM(ItemID.URIUM_REMAINS, new Color(248,176,8));

	private final String name;
	private final int remainsID;
	private final Color colour;
	private final Color outline;

	private static final Map<String, Shade> NAME_MAP = new HashMap<>();
	private static final Map<Integer, Shade> REMAINS_MAP = new HashMap<>();

	Shade(int remainsID, Color colour)
	{
		this(remainsID, colour, Color.BLACK);
	}

	Shade(int remainsID, Color colour, Color shadow)
	{
		this.name = WordUtils.capitalize(name().toLowerCase());
		this.remainsID = remainsID;
		this.colour = colour;
		this.outline = shadow;
	}

	static
	{
		for (Shade s : values())
		{
			NAME_MAP.put(s.getName(), s);
			REMAINS_MAP.put(s.getRemainsID(), s);
		}
	}

	static Shade fromName(String name)
	{
		return NAME_MAP.get(name);
	}

	static Shade fromRemainsID(int id)
	{
		return REMAINS_MAP.get(id);
	}

	static Set<Integer> REMAINS()
	{
		return REMAINS_MAP.keySet();
	}
}

/*
 * Copyright (c) 2021 Hydrox6 <ikada@protonmail.ch>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package io.hydrox.coffincounter;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(CoffinCounterConfig.GROUP)
public interface CoffinCounterConfig extends Config
{
	String GROUP = "coffincounter";

	String STORED_KEY = "stored";

	enum InfoboxStyle
	{
		NONE,
		SPLIT,
		COMBINED
	}

	@ConfigItem(
		keyName = "infoboxStyle",
		name = "Infobox Style",
		description = "What style of infobox to use"
	)
	default InfoboxStyle infoboxStyle()
	{
		return InfoboxStyle.NONE;
	}

	@ConfigItem(
		keyName = "infoboxZero",
		name = "Show 0s in Infoboxes",
		description = "Whether to show a shade if it has a value of 0 i nthe infoboxes"
	)
	default boolean infoboxZero()
	{
		return false;
	}
}

/*
 * Copyright (c) 2021 Hydrox6 <ikada@protonmail.ch>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package io.hydrox.coffincounter;

import lombok.Getter;
import net.runelite.api.ItemID;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

@Getter
public enum Coffin
{
	BRONZE(3, ItemID.BRONZE_COFFIN, ItemID.OPEN_BRONZE_COFFIN),
	STEEL(8, ItemID.STEEL_COFFIN, ItemID.OPEN_STEEL_COFFIN),
	BLACK(14, ItemID.BLACK_COFFIN, ItemID.OPEN_BLACK_COFFIN),
	SILVER(20, ItemID.SILVER_COFFIN, ItemID.OPEN_SILVER_COFFIN),
	GOLD(28, ItemID.GOLD_COFFIN, ItemID.OPEN_GOLD_COFFIN);

	private final int maxRemains;
	private final int[] itemIDs;

	private static final Map<Integer, Coffin> MAP = new HashMap<>();

	Coffin(int maxRemains, int... itemIDs)
	{
		this.maxRemains = maxRemains;
		this.itemIDs = itemIDs;
	}

	static
	{
		for (Coffin c : values())
		{
			for (int id : c.itemIDs)
			{
				MAP.put(id, c);
			}
		}
	}

	static Set<Integer> ALL_COFFINS()
	{
		return MAP.keySet();
	}

	static Coffin getFromItem(int itemID)
	{
		return MAP.get(itemID);
	}
}

