package com.dandylyon.inventorynotifier;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class InventoryNotifierPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(InventoryNotifierPlugin.class);
		RuneLite.main(args);
	}
}
package com.dandylyon.inventorynotifier;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.config.FontType;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.OverlayUtil;

import javax.inject.Inject;
import java.awt.*;

@Slf4j
public class InventoryNotifierOverlay extends Overlay {

    private final Client client;
    private final ConfigManager configManager;

    private String _text;

    @Inject
    public InventoryNotifierOverlay(Client client, InventoryNotifierPlugin plugin, ConfigManager configManager) {
        super(plugin);
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
        setPriority(OverlayPriority.HIGH);
        this.client = client;
        this.configManager = configManager;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        Widget toDrawOn;
        if (client.isResized()) {
            toDrawOn = client.getWidget(WidgetInfo.RESIZABLE_VIEWPORT_INVENTORY_TAB);
            if (toDrawOn == null || toDrawOn.isHidden())
                toDrawOn = client.getWidget(WidgetInfo.RESIZABLE_VIEWPORT_BOTTOM_LINE_INVENTORY_TAB);
        } else {
            toDrawOn = client.getWidget(WidgetInfo.FIXED_VIEWPORT_INVENTORY_TAB);
        }
        if (toDrawOn == null || toDrawOn.isHidden()) return null;

        String textToDraw = _text;
        FontType infoboxFontType = configManager.getConfiguration("runelite", "infoboxFontType", FontType.class);
        graphics.setFont(infoboxFontType.getFont()); // make sure we do this before calculating drawLocation

        Rectangle bounds = toDrawOn.getBounds();
        Point drawLocation = new Point((int) bounds.getCenterX() - (graphics.getFontMetrics().stringWidth(textToDraw) / 2), (int) bounds.getMaxY());
        OverlayUtil.renderTextLocation(graphics, drawLocation, textToDraw, Color.WHITE);

        return null;
    }

    public void setText(String text)
    {
        _text = text;
    }
}
package com.dandylyon.inventorynotifier;

import javax.inject.Inject;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.client.Notifier;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;
import net.runelite.client.util.ImageUtil;
import java.awt.image.BufferedImage;
import java.util.Arrays;

@Slf4j
@PluginDescriptor(
		name = "Inventory Notifier"
)
public class InventoryNotifierPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private InfoBoxManager infoBoxManager;

	@Inject
	private InventoryNotifierOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private Notifier notifier;

	private static final BufferedImage INVENTORY_IMAGE;
	private static final BufferedImage INVENTORY_FULL_IMAGE;
	private BufferedImage CURRENT_IMAGE = INVENTORY_IMAGE;

	private static final int INVENTORY_SIZE = 28;

	@Getter
	private InventoryNotifierInfoBox inventoryNotifierInfoBox;

	static
	{
		INVENTORY_IMAGE = ImageUtil.loadImageResource(InventoryNotifierPlugin.class, "inventory_icon.png");
		INVENTORY_FULL_IMAGE = ImageUtil.loadImageResource(InventoryNotifierPlugin.class, "inventory_full_icon.png");
	}

	@Override
	protected void startUp() throws Exception
	{
			addInfoBox();
	}

	@Override
	protected void shutDown() throws Exception
	{
			removeInfoBox();
	}

	private void addInfoBox()
	{
		inventoryNotifierInfoBox = new InventoryNotifierInfoBox(CURRENT_IMAGE, this);
		updateOverlays();
		infoBoxManager.addInfoBox(inventoryNotifierInfoBox);
	}

	private void removeInfoBox()
	{
		infoBoxManager.removeInfoBox(inventoryNotifierInfoBox);
		inventoryNotifierInfoBox = null;
	}

	private void updateOverlays() {
		String text = String.valueOf(openInventorySpaces());
		if (openInventorySpaces() == 0) {
			CURRENT_IMAGE = INVENTORY_FULL_IMAGE;
			inventoryNotifierInfoBox.setText("");
			notifier.notify("Your inventory is full.");
		} else {
			CURRENT_IMAGE = INVENTORY_IMAGE;
			inventoryNotifierInfoBox.setText(text);
		}
	}

	private int openInventorySpaces()
	{
		ItemContainer container = client.getItemContainer(InventoryID.INVENTORY);
		Item[] items = container == null ? new Item[0] : container.getItems();
		int usedSpaces = (int) Arrays.stream(items).filter(p -> p.getId() != -1).count();
		return INVENTORY_SIZE - usedSpaces;
	}

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event)
	{
		if (event.getContainerId() == InventoryID.INVENTORY.getId())
		{
			updateOverlays();
			removeInfoBox();
			addInfoBox();
		}
	}
}

package com.dandylyon.inventorynotifier;

import net.runelite.client.plugins.Plugin;
import net.runelite.client.ui.overlay.infobox.InfoBox;

import java.awt.*;
import java.awt.image.BufferedImage;

public class InventoryNotifierInfoBox extends InfoBox
{
    private String _text;

    InventoryNotifierInfoBox(BufferedImage image, Plugin plugin)
    {
        super(image, plugin);
        setTooltip("Number of open inventory spaces");
    }

    @Override
    public String getText() {
        return _text;
    }

    @Override
    public Color getTextColor() {
        return Color.WHITE;
    }

    public void setText(String text)
    {
        _text = text;
    }
}

