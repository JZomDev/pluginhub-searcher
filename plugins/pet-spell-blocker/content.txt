package com.wildyqol.ikodparchmentrisk;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import javax.inject.Inject;
import javax.inject.Singleton;
import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.util.QuantityFormatter;
import com.wildyqol.WildyQoLConfig;

@Singleton
public class IkodParchmentRiskOverlay extends Overlay
{
    private static final int BASELINE_MARGIN = 4;
    private static final int LINE_SPACING = 4;

    private final Client client;
    private final WildyQoLConfig config;

    private boolean ikodOpen;
    private long surcharge;
    private long baseRisk;
    private Color labelColor = Color.WHITE;

    @Inject
    private IkodParchmentRiskOverlay(Client client, WildyQoLConfig config)
    {
        this.client = client;
        this.config = config;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
    }

    public void update(boolean ikodOpen, int lockedCount, long perItemCost, long surcharge, long baseRisk, Color labelColor)
    {
        this.ikodOpen = ikodOpen;
        this.surcharge = surcharge;
        this.baseRisk = baseRisk;
        this.labelColor = labelColor != null ? labelColor : Color.WHITE;
    }

    public void reset()
    {
        update(false, 0, 0L, 0L, 0L, Color.WHITE);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (!config.showIkodTrouverOverlay() || !ikodOpen)
        {
            return null;
        }

        Widget riskWidget = client.getWidget(InterfaceID.Deathkeep.VALUE);
        if (riskWidget == null || riskWidget.isHidden())
        {
            return null;
        }

        Rectangle bounds = riskWidget.getBounds();
        if (bounds == null)
        {
            return null;
        }

        Font font = FontManager.getRunescapeSmallFont();
        graphics.setFont(font);

        String surchargeText = QuantityFormatter.formatNumber(surcharge);
        long totalRisk = baseRisk + surcharge;
        String totalRiskText = QuantityFormatter.formatNumber(totalRisk);

        String[] lines = {
            "Trouver cost:",
            surchargeText,
            "Total risk:",
            totalRiskText
        };

        Color[] colors = {
            labelColor,
            Color.WHITE,
            labelColor,
            Color.WHITE
        };

        int centerX = bounds.x + bounds.width / 2;
        int y = bounds.y - BASELINE_MARGIN;
        int lineHeight = graphics.getFontMetrics().getHeight();
        int step = lineHeight + LINE_SPACING;

        for (int i = lines.length - 1; i >= 0; i--)
        {
            String line = lines[i];
            int textWidth = graphics.getFontMetrics().stringWidth(line);
            int textX = centerX - textWidth / 2;
            Point location = new Point(textX, y);
            OverlayUtil.renderTextLocation(graphics, location, lines[i], colors[i]);
            y -= step;
        }

        return null;
    }
}

package com.wildyqol;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("wildyqol")
public interface WildyQoLConfig extends Config
{
	@ConfigSection(
		name = "Misclick prevention",
		description = "Settings to help avoid dangerous misclicks",
		position = 0,
		closedByDefault = false
	)
	String MISCLICK_PREVENTION_SECTION = "misclickPreventionSection";

	@ConfigSection(
		name = "Items Kept on Death",
		description = "Settings for the Items Kept on Death widget",
		position = 1,
		closedByDefault = false
	)
	String ITEMS_KEPT_ON_DEATH_SECTION = "itemsKeptOnDeathSection";

	@ConfigItem(
		keyName = "petSpellBlocker",
		name = "Pet Spell Blocker",
		description = "Removes 'Cast' menu entries on pets",
		position = 1,
		section = MISCLICK_PREVENTION_SECTION
	)
	default boolean petSpellBlocker()
	{
		return true;
	}

	@ConfigItem(
		keyName = "emptyVialBlocker",
		name = "Empty Vial Blocker",
		description = "Prevents left-clicking 'Use' on empty vials in dangerous areas",
		position = 2,
		section = MISCLICK_PREVENTION_SECTION
	)
	default boolean emptyVialBlocker()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showIkodTrouverOverlay",
		name = "Trouver Cost Overlay",
		description = "Show Trouver parchment cost + 500k gp in the Items Kept on Death interface",
		position = 0,
		section = ITEMS_KEPT_ON_DEATH_SECTION
	)
	default boolean showIkodTrouverOverlay()
	{
		return true;
	}

	@ConfigItem(
		keyName = "updateMessageShown111",
		name = "Update Message Shown v1.1.1",
		description = "Internal flag to track if the v1.1.1 update message has been shown",
		hidden = true,
        position = 3
	)
	default boolean updateMessageShown111()
	{
		return false;
	}
} 

package com.wildyqol;

import com.google.inject.Provides;
import com.wildyqol.ikodparchmentrisk.IkodParchmentRiskOverlay;
import java.awt.Color;
import java.util.ArrayDeque;
import java.util.Collections;
import java.util.Deque;
import java.util.IdentityHashMap;
import java.util.Set;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.ItemComposition;
import net.runelite.api.gameval.ItemID;
import net.runelite.api.NPC;
import net.runelite.api.NPCComposition;
import net.runelite.api.WorldType;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.events.VarbitChanged;
import net.runelite.api.events.WidgetClosed;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;

@Slf4j
@PluginDescriptor(
        name = "Wildy QoL",
        description = "Quality of life improvements for wilderness activities"
)
public class WildyQoLPlugin extends Plugin
{
    @Inject
    private Client client;

    @Inject
    private ConfigManager configManager;

    @Inject
    private WildyQoLConfig config;

    @Inject
    private ChatMessageManager chatMessageManager;

    private boolean shouldShowUpdateMessage = false;

    @Inject
    private ItemManager itemManager;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private IkodParchmentRiskOverlay ikodParchmentRiskOverlay;

    private static final long TROUVER_REPARCH_COST = 500_000L;

    @Override
    protected void startUp()
    {
        log.debug("Pet Spell Blocker enabled: {}", config.petSpellBlocker());
        log.debug("Empty Vial Blocker enabled: {}", config.emptyVialBlocker());

        overlayManager.add(ikodParchmentRiskOverlay);
        updateTrouverSurcharge();

        // Check if we should show update message (but don't show it yet)
        if (!config.updateMessageShown111())
        {
            shouldShowUpdateMessage = true;
        }
    }

    @Override
    protected void shutDown()
    {
        log.debug("Wildy QoL stopped");
        overlayManager.remove(ikodParchmentRiskOverlay);
        ikodParchmentRiskOverlay.reset();
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged gameStateChanged)
    {
        if (gameStateChanged.getGameState() != GameState.LOGGED_IN)
        {
            return;
        }

        // Show update message if needed
        if (shouldShowUpdateMessage)
        {
            showUpdateMessage();
            configManager.setConfiguration("wildyqol", "updateMessageShown111", true);
            shouldShowUpdateMessage = false;
        }
    }

    @Subscribe
    public void onMenuEntryAdded(MenuEntryAdded event)
    {

        if (config.petSpellBlocker())
        {
            handlePetSpellBlock(event);
        }
    }

    @Subscribe
    public void onMenuOptionClicked(MenuOptionClicked event)
    {
        // Intercept left-click "Use" on vial and cancel it (do nothing)
        if (!config.emptyVialBlocker())
        {
            return;
        }

        // Only on dangerous areas
        if (!inDangerousArea())
        {
            return;
        }

        // Check if the clicked option is "Use" on a vial item
        if ("Use".equals(event.getMenuEntry().getOption()))
        {
            boolean targetContainsVial = event.getMenuEntry().getTarget() != null && event.getMenuEntry().getTarget().contains("Vial");
            if (targetContainsVial)
            {
                event.consume(); // Cancels the action, effectively doing nothing
            }
        }
    }

    @Subscribe
    public void onWidgetLoaded(WidgetLoaded event)
    {
        if (event.getGroupId() == InterfaceID.DEATHKEEP)
        {
            updateTrouverSurcharge();
        }
    }

    @Subscribe
    public void onWidgetClosed(WidgetClosed event)
    {
        if (event.getGroupId() == InterfaceID.DEATHKEEP)
        {
            ikodParchmentRiskOverlay.reset();
        }
    }

    @Subscribe
    public void onItemContainerChanged(ItemContainerChanged event)
    {
        if (isIkodOpen())
        {
            updateTrouverSurcharge();
        }
    }

    @Subscribe
    public void onVarbitChanged(VarbitChanged event)
    {
        if (isIkodOpen())
        {
            updateTrouverSurcharge();
        }
    }

    private void handlePetSpellBlock(MenuEntryAdded event)
    {
        
        // Check if this is a spell cast action
        if (!"Cast".equals(event.getOption()))
        {
            return;
        }

        // Get the target NPC
        int npcIndex = event.getIdentifier();
        if (npcIndex < 0)
        {
            return;
        }

        // Get NPC from the scene using the new API
        NPC npc = client.getTopLevelWorldView().npcs().byIndex(npcIndex);
        
        if (npc == null)
        {
            return;
        }

        // Check if the NPC is a follower (pet)
        NPCComposition comp = npc.getComposition();
        if (comp != null && comp.isFollower())
        {
            // Remove the menu entry using the new API
            // Use the new Menu API to remove the entry
            client.getMenu().removeMenuEntry(event.getMenuEntry());
            log.debug("Removed spell cast menu entry for pet: {}", npc.getName());
        }
    }

    private boolean inDangerousArea()
    {
        // Check if in wilderness
        int wildernessVarbit = client.getVarbitValue(5963); // IN_WILDERNESS varbit ID
        boolean inWilderness = wildernessVarbit == 1;
        
        if (inWilderness)
        {
            return true;
        }

        // Check world types
        for (WorldType worldType : client.getWorldType())
        {
            if (worldType == WorldType.PVP || 
                worldType == WorldType.DEADMAN ||
                worldType == WorldType.HIGH_RISK)
            {
                return true;
            }
        }

        return false;
    }

    private void showUpdateMessage()
    {
        chatMessageManager.queue(QueuedMessage.builder()
            .type(ChatMessageType.GAMEMESSAGE)
            .runeLiteFormattedMessage("<col=00ff00>Wildy QoL:</col> new feature: Trouver parchment cost on Items Kept on Death.")
            .build());
    }

    private void updateTrouverSurcharge()
    {
        if (!config.showIkodTrouverOverlay())
        {
            ikodParchmentRiskOverlay.reset();
            return;
        }

        boolean ikodOpen = isIkodOpen();
        if (!ikodOpen)
        {
            ikodParchmentRiskOverlay.reset();
            return;
        }

        Widget riskWidget = client.getWidget(InterfaceID.Deathkeep.VALUE);
        if (riskWidget == null || riskWidget.isHidden())
        {
            ikodParchmentRiskOverlay.reset();
            return;
        }

        int lockedCount = countLockedItems();
        long perItemCost = getPerItemCost();
        long surcharge = lockedCount * perItemCost;
        long baseRisk = getGuideRiskValue(riskWidget);
        Color labelColor = deriveLabelColor(riskWidget);

        ikodParchmentRiskOverlay.update(true, lockedCount, perItemCost, surcharge, baseRisk, labelColor);
    }

    private boolean isIkodOpen()
    {
        Widget root = client.getWidget(InterfaceID.Deathkeep.CONTENTS);
        return root != null && !root.isHidden();
    }

    private int countLockedItems()
    {
        Set<Widget> visited = Collections.newSetFromMap(new IdentityHashMap<>());
        Deque<Widget> stack = new ArrayDeque<>();
        pushRoot(stack, client.getWidget(InterfaceID.Deathkeep.KEPT));
        pushRoot(stack, client.getWidget(InterfaceID.Deathkeep.GRAVE));

        if (stack.isEmpty())
        {
            pushRoot(stack, client.getWidget(InterfaceID.Deathkeep.ITEMS));
        }

        int lockedCount = 0;

        while (!stack.isEmpty())
        {
            Widget widget = stack.pop();

            if (widget == null || !visited.add(widget) || widget.isHidden())
            {
                continue;
            }

            lockedCount += countLockedItemsForWidget(widget);

            pushChildren(stack, widget.getDynamicChildren());
            pushChildren(stack, widget.getStaticChildren());
            pushChildren(stack, widget.getNestedChildren());
            pushChildren(stack, widget.getChildren());
        }

        return lockedCount;
    }

    private void pushRoot(Deque<Widget> stack, Widget widget)
    {
        if (widget != null && !widget.isHidden())
        {
            stack.push(widget);
        }
    }

    private int countLockedItemsForWidget(Widget widget)
    {
        int itemId = widget.getItemId();
        if (itemId <= 0)
        {
            return 0;
        }

        if (widget.getBorderType() != 2)
        {
            return 0;
        }

        int canonicalId = itemManager.canonicalize(itemId);
        ItemComposition composition = itemManager.getItemComposition(canonicalId);

        if (composition == null || !composition.getName().endsWith(" (l)"))
        {
            return 0;
        }

        int quantity = Math.max(1, widget.getItemQuantity());
        return quantity;
    }

    private void pushChildren(Deque<Widget> stack, Widget[] children)
    {
        if (children == null)
        {
            return;
        }

        for (Widget child : children)
        {
            if (child != null)
            {
                stack.push(child);
            }
        }
    }

    private long getPerItemCost()
    {
        long parchmentPrice = itemManager.getItemPrice(ItemID.TROUVER_PARCHMENT);
        return parchmentPrice + TROUVER_REPARCH_COST;
    }

    private long getGuideRiskValue(Widget riskWidget)
    {
        String rawText = riskWidget.getText();
        if (rawText == null)
        {
            return 0L;
        }

        String sanitized = Text.removeTags(rawText).replaceAll("[^0-9]", "");
        if (sanitized.isEmpty())
        {
            return 0L;
        }

        try
        {
            return Long.parseLong(sanitized);
        }
        catch (NumberFormatException ex)
        {
            return 0L;
        }
    }

    private Color deriveLabelColor(Widget riskWidget)
    {
        int color = riskWidget.getTextColor();
        if (color == 0)
        {
            return Color.WHITE;
        }

        return new Color(color | 0xFF000000, true);
    }

    @Provides
    WildyQoLConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(WildyQoLConfig.class);
    }
} 

package com.wildyqol;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class WildyQoLPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(WildyQoLPlugin.class);
		RuneLite.main(args);
	}
} 
