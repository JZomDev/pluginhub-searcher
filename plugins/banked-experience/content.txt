package thestonedturtle.bankedexperience;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("bankedexperience")
public interface BankedExperienceConfig extends Config
{
	String POTION_STORAGE_KEY = "grabFromPotionStorage";

	@ConfigItem(
		keyName = "cascadeBankedXp",
		name = "Include output items",
		description = "Includes output items in the item quantity calculations",
		position = 1
	)
	default boolean cascadeBankedXp()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showSecondaries",
		name = "Show required secondaries",
		description = "Toggles whether the Secondaries will be displayed for the selected item",
		position = 2
	)
	default boolean showSecondaries()
	{
		return false;
	}

	@ConfigItem(
		keyName = "limitToCurrentLevel",
		name = "Respect level requirements",
		description = "Toggles whether the exp calculation will limit to your current skill level",
		position = 3
	)
	default boolean limitToCurrentLevel()
	{
		return true;
	}

	@ConfigItem(
		keyName = "grabFromSeedVault",
		name = "Include seed vault",
		description = "Toggles whether the items stored inside the Seed Vault at the Farming Guild will be included in the calculations",
		position = 4
	)
	default boolean grabFromSeedVault()
	{
		return true;
	}

	@ConfigItem(
		keyName = "grabFromInventory",
		name = "Include player inventory",
		description = "Toggles whether the items inside your inventory will be included in the calculations",
		position = 5
	)
	default boolean grabFromInventory()
	{
		return false;
	}

	@ConfigItem(
		keyName = "grabFromLootingBag",
		name = "Include looting bag",
		description = "Toggles whether the items stored inside your Looting Bag will be included in the calculations",
		position = 6
	)
	default boolean grabFromLootingBag()
	{
		return false;
	}

	@ConfigItem(
		keyName = "grabFromFossilChest",
		name = "Include Fossil Chest",
		description = "Toggles whether the fossils stored inside your Fossil Island chest will be included in the calculations",
		position = 7
	)
	default boolean grabFromFossilChest()
	{
		return true;
	}

	@ConfigItem(
		keyName = POTION_STORAGE_KEY,
		name = "Include Potion Storage",
		description = "Toggles whether items in your potion storage should be included in the calculations",
		position = 7
	)
	default boolean grabFromPotionStorage()
	{
		return true;
	}

	@ConfigItem(
		keyName = "ignoredItems",
		name = "",
		description = "",
		hidden = true
	)
	default String ignoredItems()
	{
		return "";
	}

	@ConfigItem(
		keyName = "ignoredItems",
		name = "",
		description = ""
	)
	void ignoredItems(String val);
}

/*
 * Copyright (c) 2019, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience;

import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ItemEvent;
import java.awt.image.BufferedImage;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.border.EmptyBorder;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.SkillIconManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import thestonedturtle.bankedexperience.components.combobox.ComboBoxIconEntry;
import thestonedturtle.bankedexperience.components.combobox.ComboBoxIconListRenderer;
import thestonedturtle.bankedexperience.components.textinput.UICalculatorInputArea;
import thestonedturtle.bankedexperience.data.Activity;

@Slf4j
public class BankedCalculatorPanel extends PluginPanel
{
	private final BankedCalculator calculator;

	public BankedCalculatorPanel(Client client, BankedExperienceConfig config, SkillIconManager skillIconManager,
								ItemManager itemManager, ConfigManager configManager)
	{
		super();

		setBorder(new EmptyBorder(10, 10, 10, 10));
		setLayout(new GridBagLayout());

		final UICalculatorInputArea inputs = new UICalculatorInputArea();
		inputs.setBorder(new EmptyBorder(15, 0, 15, 0));
		inputs.setBackground(ColorScheme.DARK_GRAY_COLOR);

		inputs.getUiFieldTargetXP().setEditable(false);
		inputs.getUiFieldTargetLevel().setEditable(false);

		calculator = new BankedCalculator(inputs, client, config, itemManager, configManager);

		// Create the Skill dropdown with icons
		final JComboBox<ComboBoxIconEntry> dropdown = new JComboBox<>();
		dropdown.setFocusable(false); // To prevent an annoying "focus paint" effect
		dropdown.setForeground(Color.WHITE);
		dropdown.setMaximumRowCount(Activity.BANKABLE_SKILLS.size());
		final ComboBoxIconListRenderer renderer = new ComboBoxIconListRenderer();
		renderer.setDefaultText("Select a Skill...");
		dropdown.setRenderer(renderer);

		for (final Skill skill : Activity.BANKABLE_SKILLS)
		{
			final BufferedImage img = skillIconManager.getSkillImage(skill, true);
			final ComboBoxIconEntry entry = new ComboBoxIconEntry(new ImageIcon(img), skill.getName(), skill);
			dropdown.addItem(entry);
		}

		dropdown.addItemListener(e ->
		{
			if (e.getStateChange() == ItemEvent.SELECTED)
			{
				final ComboBoxIconEntry source = (ComboBoxIconEntry) e.getItem();
				if (source.getData() instanceof Skill)
				{
					final Skill skill = (Skill) source.getData();
					this.calculator.open(skill);
				}
			}
		});

		dropdown.setSelectedIndex(-1);

		final GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.HORIZONTAL;
		c.weightx = 1;
		c.gridx = 0;
		c.gridy = 0;

		add(dropdown, c);
		c.gridy++;
		add(inputs, c);
		c.gridy++;
		add(calculator, c);
	}

	void setInventoryMap(final int inventoryId, final Map<Integer, Integer> map)
	{
		calculator.setInventoryMap(inventoryId, map);
	}

	void resetInventoryMaps()
	{
		calculator.resetInventoryMaps();
	}
}

/*
 * Copyright (c) 2019, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.data;

import lombok.Getter;
import lombok.NoArgsConstructor;
import net.runelite.api.ItemID;

@Getter
public enum Secondaries
{
	/**
	 * Herblore
	 */
	UNFINISHED_POTION(new ItemStack(ItemID.VIAL_OF_WATER, 1)),
	COCONUT_MILK(new ItemStack(ItemID.COCONUT_MILK, 1)),
	SWAMP_TAR(new ItemStack(ItemID.SWAMP_TAR, 15)),
	VIAL_OF_BLOOD(new ItemStack(ItemID.VIAL_OF_BLOOD, 1)),
	WEAPON_POISON_PLUS(new ItemStack(ItemID.RED_SPIDERS_EGGS, 1)),
	WEAPON_POISON_PLUS_PLUS(new ItemStack(ItemID.POISON_IVY_BERRIES, 1)),
	// Guam
	ATTACK_POTION(new ItemStack(ItemID.EYE_OF_NEWT, 1)),
	// Marrentil
	ANTIPOISON(new Crushable(ItemID.UNICORN_HORN, ItemID.UNICORN_HORN_DUST)),
	// Tarromin
	STRENGTH_POTION(new ItemStack(ItemID.LIMPWURT_ROOT, 1)),
	SERUM_207(new ItemStack(ItemID.ASHES, 1)),
	// Harralander
	COMPOST_POTION(new ItemStack(ItemID.VOLCANIC_ASH, 1)),
	RESTORE_POTION(new ItemStack(ItemID.RED_SPIDERS_EGGS, 1)),
	ENERGY_POTION(new Crushable(ItemID.CHOCOLATE_BAR, ItemID.CHOCOLATE_DUST)),
	COMBAT_POTION(new Crushable(ItemID.DESERT_GOAT_HORN, ItemID.GOAT_HORN_DUST)),
	GOADING_POTION(new ItemStack(ItemID.ALDARIUM, 1)),
	// Ranarr Weed
	DEFENCE_POTION(new ItemStack(ItemID.WHITE_BERRIES, 1)),
	PRAYER_POTION(new ItemStack(ItemID.SNAPE_GRASS, 1)),
	// Toadflax
	AGILITY_POTION(new ItemStack(ItemID.TOADS_LEGS, 1)),
	SARADOMIN_BREW(new Crushable(ItemID.BIRD_NEST_5075, ItemID.CRUSHED_NEST)),
	ANTIDOTE_PLUS(new ItemStack(ItemID.YEW_ROOTS, 1)),
	// Irit
	SUPER_ATTACK(new ItemStack(ItemID.EYE_OF_NEWT, 1)),
	SUPERANTIPOISON(new Crushable(ItemID.UNICORN_HORN, ItemID.UNICORN_HORN_DUST)),
	ANTIDOTE_PLUS_PLUS(new ItemStack(ItemID.MAGIC_ROOTS, 1)),
	// Avantoe
	FISHING_POTION(new ItemStack(ItemID.SNAPE_GRASS, 1)),
	SUPER_ENERGY_POTION(new ItemStack(ItemID.MORT_MYRE_FUNGUS, 1)),
	HUNTER_POTION(new Crushable(ItemID.KEBBIT_TEETH, ItemID.KEBBIT_TEETH_DUST)),
	// Kwuarm
	SUPER_STRENGTH(new ItemStack(ItemID.LIMPWURT_ROOT, 1)),
	WEAPON_POISON(new ItemStack(ItemID.DRAGON_SCALE_DUST, 1)),
	// Snapdragon
	SUPER_RESTORE(new ItemStack(ItemID.RED_SPIDERS_EGGS, 1)),
	SANFEW_SERUM(new ItemStack(ItemID.SNAKE_WEED, 1), new ItemStack(ItemID.UNICORN_HORN_DUST, 1), new ItemStack(ItemID.SUPER_RESTORE4, 1), new ItemStack(ItemID.NAIL_BEAST_NAILS, 1)),
	// Cadantine
	SUPER_DEFENCE_POTION(new ItemStack(ItemID.WHITE_BERRIES, 1)),
	// Lantadyme
	ANTIFIRE_POTION(new Crushable(ItemID.BLUE_DRAGON_SCALE, ItemID.DRAGON_SCALE_DUST)),
	MAGIC_POTION(new ItemStack(ItemID.POTATO_CACTUS, 1)),
	// Dwarf Weed
	RANGING_POTION(new ItemStack(ItemID.WINE_OF_ZAMORAK, 1)),
	ANCIENT_BREW(new Crushable(ItemID.NIHIL_SHARD, ItemID.NIHIL_DUST)),
	MENAPHITE_REMEDY(new ItemStack(ItemID.LILY_OF_THE_SANDS, 1)),
	// Torstol
	ZAMORAK_BREW(new ItemStack(ItemID.JANGERBERRIES, 1)),
	SUPER_COMBAT_POTION(new ItemStack(ItemID.SUPER_ATTACK4, 1), new ItemStack(ItemID.SUPER_STRENGTH4, 1), new ItemStack(ItemID.SUPER_DEFENCE4, 1)),
	ANTIVENOM_PLUS(new ItemStack(ItemID.ANTIVENOM4, 1)),
	// Huasca
	PRAYER_REGENERATION_POTION(new ItemStack(ItemID.ALDARIUM, 1)),
	// Other
	STAMINA_POTION(new ByDose(ItemID.SUPER_ENERGY1, ItemID.SUPER_ENERGY2, ItemID.SUPER_ENERGY3, ItemID.SUPER_ENERGY4)),
	FORGOTTEN_BREW(new ItemStack(ItemID.ANCIENT_ESSENCE, 20)),
	EXTENDED_ANTIFIRE(new ByDose(ItemID.ANTIFIRE_POTION1, ItemID.ANTIFIRE_POTION2, ItemID.ANTIFIRE_POTION3, ItemID.ANTIFIRE_POTION4)),
	EXTENDED_SUPER_ANTIFIRE(new ByDose(ItemID.SUPER_ANTIFIRE_POTION1, ItemID.SUPER_ANTIFIRE_POTION2, ItemID.SUPER_ANTIFIRE_POTION3, ItemID.SUPER_ANTIFIRE_POTION4)),
	CRUSHED_SUPERIOR_DRAGON_BONES(new Crushable(ItemID.SUPERIOR_DRAGON_BONES, ItemID.CRUSHED_SUPERIOR_DRAGON_BONES)),
	EXTENDED_ANTIVENOM_PLUS(new ByDose(ItemID.ANTIVENOM1_12919, ItemID.ANTIVENOM2_12917, ItemID.ANTIVENOM3_12915, ItemID.ANTIVENOM4_12913)),
	ANTIVENOM(new ItemStack(ItemID.ZULRAHS_SCALES, 5)),
	// Degrime
	DEGRIME(new Degrime()),
	/**
	 * Smithing
	 */
	COAL_ORE(new ItemStack(ItemID.COAL, 1)),
	COAL_ORE_2(new ItemStack(ItemID.COAL, 2)),
	COAL_ORE_3(new ItemStack(ItemID.COAL, 3)),
	COAL_ORE_4(new ItemStack(ItemID.COAL, 4)),
	COAL_ORE_6(new ItemStack(ItemID.COAL, 6)),
	COAL_ORE_8(new ItemStack(ItemID.COAL, 8)),
	/**
	 * Crafting
	 */
	GOLD_BAR(new ItemStack(ItemID.GOLD_BAR, 1)),
	SILVER_BAR(new ItemStack(ItemID.SILVER_BAR, 1)),
	WATER_ORB(new ItemStack(ItemID.WATER_ORB, 1)),
	EARTH_ORB(new ItemStack(ItemID.EARTH_ORB, 1)),
	FIRE_ORB(new ItemStack(ItemID.FIRE_ORB, 1)),
	AIR_ORB(new ItemStack(ItemID.AIR_ORB, 1)),
	BUCKET_OF_SAND(new ItemStack(ItemID.BUCKET_OF_SAND, 1)),
	BUCKET_OF_SAND_6(new ItemStack(ItemID.BUCKET_OF_SAND, 6)),
	HARD_LEATHER_SHIELD(new ItemStack(ItemID.OAK_SHIELD, 1), new ItemStack(ItemID.BRONZE_NAILS, 15)),
	COIN(new ItemStack(ItemID.COINS_995, 1)),
	COIN_3(new ItemStack(ItemID.COINS_995, 3)),
	LEATHER_BODY(new ItemStack(ItemID.LEATHER_BODY, 1)),
	LEATHER_CHAPS(new ItemStack(ItemID.LEATHER_CHAPS, 1)),
	BALL_OF_WOOL(new ItemStack(ItemID.BALL_OF_WOOL, 1)),
	/**
	 * Construction
	 */
	COINS_100(new ItemStack(ItemID.COINS_995, 100)),
	COINS_250(new ItemStack(ItemID.COINS_995, 250)),
	COINS_500(new ItemStack(ItemID.COINS_995, 500)),
	COINS_1500(new ItemStack(ItemID.COINS_995, 1500)),
	// Plank make spell assumes earth staff is used because why wouldn't you
	PLANK_MAKE_REGULAR(new ItemStack(ItemID.ASTRAL_RUNE, 2), new ItemStack(ItemID.NATURE_RUNE, 1), new ItemStack(ItemID.COINS_995, 70)),
	PLANK_MAKE_OAK(new ItemStack(ItemID.ASTRAL_RUNE, 2), new ItemStack(ItemID.NATURE_RUNE, 1), new ItemStack(ItemID.COINS_995, 175)),
	PLANK_MAKE_TEAK(new ItemStack(ItemID.ASTRAL_RUNE, 2), new ItemStack(ItemID.NATURE_RUNE, 1), new ItemStack(ItemID.COINS_995, 350)),
	PLANK_MAKE_MAHOGANY(new ItemStack(ItemID.ASTRAL_RUNE, 2), new ItemStack(ItemID.NATURE_RUNE, 1), new ItemStack(ItemID.COINS_995, 1050)),
	// Mahogany Homes secondary rates are calculated utilizing the averages as generated by the wiki
	// https://oldschool.runescape.wiki/w/Mahogany_Homes
	STEEL_BAR_PLANK(new ItemStack(ItemID.STEEL_BAR, 0.040)),
	STEEL_BAR_OAK(new ItemStack(ItemID.STEEL_BAR, 0.040)),
	STEEL_BAR_TEAK(new ItemStack(ItemID.STEEL_BAR, 0.042)),
	STEEL_BAR_MAHOGANY(new ItemStack(ItemID.STEEL_BAR, 0.040)),
	/**
	 * Prayer
	 */
	BLESSED_BONE_SHARDS_JUG_OF_BLESSED_WINE(new ItemStack(ItemID.JUG_OF_BLESSED_WINE, 0.0025)),
	BLESSED_BONE_SHARDS_JUG_OF_BLESSED_SUNFIRE_WINE(new ItemStack(ItemID.JUG_OF_BLESSED_SUNFIRE_WINE, 0.0025)),
	/**
	 * Cooking
	 */
	JUG_OF_WATER(new ItemStack(ItemID.JUG_OF_WATER, 1)),
	/**
	 * Fletching
	 */
	BOW_STRING(new ItemStack(ItemID.BOW_STRING, 1)),
	FEATHER(new ItemStack(ItemID.FEATHER, 1)),
	HEADLESS_ARROW(new ItemStack(ItemID.HEADLESS_ARROW, 1)),
	CROSSBOW_STRING(new ItemStack(ItemID.CROSSBOW_STRING, 1)),
	BRONZE_LIMBS(new ItemStack(ItemID.BRONZE_LIMBS, 1)),
	BLURITE_LIMBS(new ItemStack(ItemID.BLURITE_LIMBS, 1)),
	IRON_LIMBS(new ItemStack(ItemID.IRON_LIMBS, 1)),
	STEEL_LIMBS(new ItemStack(ItemID.STEEL_LIMBS, 1)),
	MITHRIL_LIMBS(new ItemStack(ItemID.MITHRIL_LIMBS, 1)),
	ADAMANTITE_LIMBS(new ItemStack(ItemID.ADAMANTITE_LIMBS, 1)),
	RUNITE_LIMBS(new ItemStack(ItemID.RUNITE_LIMBS, 1)),
	DRAGON_LIMBS(new ItemStack(ItemID.DRAGON_LIMBS, 1)),
	JAVELIN_SHAFT(new ItemStack(ItemID.JAVELIN_SHAFT, 1)),
	/**
	 * Prayer
	 */
	BUCKET_OF_SLIME(new ItemStack(ItemID.BUCKET_OF_SLIME, 1)),
	BASIC_REANIMATION(new ItemStack(ItemID.NATURE_RUNE, 2), new ItemStack(ItemID.BODY_RUNE, 4)),
	ADEPT_REANIMATION(new ItemStack(ItemID.NATURE_RUNE, 3), new ItemStack(ItemID.BODY_RUNE, 4), new ItemStack(ItemID.SOUL_RUNE, 1)),
	EXPERT_REANIMATION(new ItemStack(ItemID.NATURE_RUNE, 3), new ItemStack(ItemID.BLOOD_RUNE, 1), new ItemStack(ItemID.SOUL_RUNE, 2)),
	MASTER_REANIMATION(new ItemStack(ItemID.NATURE_RUNE, 4), new ItemStack(ItemID.BLOOD_RUNE, 2), new ItemStack(ItemID.SOUL_RUNE, 4)),
	/**
	 * Thieving
	 */
	BEER_GLASS_5TH(new ItemStack(ItemID.BEER_GLASS, 0.2)),
	BEER_GLASS_4TH(new ItemStack(ItemID.BEER_GLASS, 0.25)),
	BEER_GLASS_3RD(new ItemStack(ItemID.BEER_GLASS, 1.0 / 3)),
	BEER_GLASS_HALF(new ItemStack(ItemID.BEER_GLASS, 0.5)),
	;
	private final ItemStack[] items;
	private final SecondaryHandler customHandler;

	public interface SecondaryHandler
	{
		ItemStack[] getInfoItems();
	}

	public static class ByDose implements SecondaryHandler
	{
		@Getter
		// index + 1 = amount of doses the item id is worth
		private final int[] items;
		@Getter
		private final ItemStack[] infoItems;

		public ByDose(final int... items)
		{
			this.items = items;
			this.infoItems = new ItemStack[]{new ItemStack(items[0], 0)};
		}
	}

	@NoArgsConstructor
	public static class Degrime implements SecondaryHandler
	{
		@Getter
		private final ItemStack[] infoItems = new ItemStack[]{new ItemStack(ItemID.NATURE_RUNE, 0)};

		public int getTotalNaturesRequired(int itemCount)
		{
			// Assume each spell cast is being maximally efficient by using a earth staff, 1 slot of natures, and 27 for herbs
			final int requiredCasts = (int) Math.ceil(itemCount / 27.0d);

			// 1 spell cast requires at least 2 nature runes.
			return requiredCasts * 2;
		}
	}

	public static class Crushable implements SecondaryHandler
	{
		@Getter
		private final int[] items;
		@Getter
		private final ItemStack[] infoItems;

		// Final ID should be the crushed variant, assume that only 1 of the resource is needed per activity
		private Crushable(final int... items)
		{
			this.items = items;
			this.infoItems = new ItemStack[]{new ItemStack(items[items.length - 1], 0)};
		}
	}

	Secondaries(ItemStack... items)
	{
		this.items = items;
		this.customHandler = null;
	}

	Secondaries(SecondaryHandler customHandler)
	{
		this.items = new ItemStack[0];
		this.customHandler = customHandler;
	}
}

/*
 * Copyright (c) 2019, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.data;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.ItemComposition;
import net.runelite.api.ItemID;
import net.runelite.api.Skill;
import net.runelite.client.game.ItemManager;

/**
 *
 */
@Getter
public enum ExperienceItem
{
	/**
	 * Construction
	 */
	// Logs
	LOGS(ItemID.LOGS, Skill.CONSTRUCTION, "Logs"),
	OAK_LOGS(ItemID.OAK_LOGS, Skill.CONSTRUCTION, "Logs"),
	TEAK_LOGS(ItemID.TEAK_LOGS, Skill.CONSTRUCTION, "Logs"),
	MAHOGANY_LOGS(ItemID.MAHOGANY_LOGS, Skill.CONSTRUCTION, "Logs"),
	// Planks
	PLANK(ItemID.PLANK, Skill.CONSTRUCTION, "Planks"),
	OAK_PLANK(ItemID.OAK_PLANK, Skill.CONSTRUCTION, "Planks"),
	TEAK_PLANK(ItemID.TEAK_PLANK, Skill.CONSTRUCTION, "Planks"),
	MAHOGANY_PLANK(ItemID.MAHOGANY_PLANK, Skill.CONSTRUCTION, "Planks"),
	// Other
	LONG_BONE(ItemID.LONG_BONE, Skill.CONSTRUCTION, "Other"),
	CURVED_BONE(ItemID.CURVED_BONE, Skill.CONSTRUCTION, "Other"),
	/**
	 * Herblore
	 */
	// Grimy Herbs
	GRIMY_GUAM_LEAF(ItemID.GRIMY_GUAM_LEAF, Skill.HERBLORE, "Grimy Herbs"),
	GRIMY_MARRENTILL(ItemID.GRIMY_MARRENTILL, Skill.HERBLORE, "Grimy Herbs"),
	GRIMY_TARROMIN(ItemID.GRIMY_TARROMIN, Skill.HERBLORE, "Grimy Herbs"),
	GRIMY_HARRALANDER(ItemID.GRIMY_HARRALANDER, Skill.HERBLORE, "Grimy Herbs"),
	GRIMY_RANARR_WEED(ItemID.GRIMY_RANARR_WEED, Skill.HERBLORE, "Grimy Herbs"),
	GRIMY_TOADFLAX(ItemID.GRIMY_TOADFLAX, Skill.HERBLORE, "Grimy Herbs"),
	GRIMY_IRIT_LEAF(ItemID.GRIMY_IRIT_LEAF, Skill.HERBLORE, "Grimy Herbs"),
	GRIMY_AVANTOE(ItemID.GRIMY_AVANTOE, Skill.HERBLORE, "Grimy Herbs"),
	GRIMY_KWUARM(ItemID.GRIMY_KWUARM, Skill.HERBLORE, "Grimy Herbs"),
	GRIMY_SNAPDRAGON(ItemID.GRIMY_SNAPDRAGON, Skill.HERBLORE, "Grimy Herbs"),
	GRIMY_CADANTINE(ItemID.GRIMY_CADANTINE, Skill.HERBLORE, "Grimy Herbs"),
	GRIMY_LANTADYME(ItemID.GRIMY_LANTADYME, Skill.HERBLORE, "Grimy Herbs"),
	GRIMY_DWARF_WEED(ItemID.GRIMY_DWARF_WEED, Skill.HERBLORE, "Grimy Herbs"),
	GRIMY_TORSTOL(ItemID.GRIMY_TORSTOL, Skill.HERBLORE, "Grimy Herbs"),
	GRIMY_HUASCA(ItemID.GRIMY_HUASCA, Skill.HERBLORE, "Grimy Herbs"),
	// Clean Herbs
	GUAM_LEAF(ItemID.GUAM_LEAF, Skill.HERBLORE, "Cleaned Herbs"),
	MARRENTILL(ItemID.MARRENTILL, Skill.HERBLORE, "Cleaned Herbs"),
	TARROMIN(ItemID.TARROMIN, Skill.HERBLORE, "Cleaned Herbs"),
	HARRALANDER(ItemID.HARRALANDER, Skill.HERBLORE, "Cleaned Herbs"),
	RANARR_WEED(ItemID.RANARR_WEED, Skill.HERBLORE, "Cleaned Herbs"),
	TOADFLAX(ItemID.TOADFLAX, Skill.HERBLORE, "Cleaned Herbs"),
	IRIT_LEAF(ItemID.IRIT_LEAF, Skill.HERBLORE, "Cleaned Herbs"),
	AVANTOE(ItemID.AVANTOE, Skill.HERBLORE, "Cleaned Herbs"),
	KWUARM(ItemID.KWUARM, Skill.HERBLORE, "Cleaned Herbs"),
	SNAPDRAGON(ItemID.SNAPDRAGON, Skill.HERBLORE, "Cleaned Herbs"),
	CADANTINE(ItemID.CADANTINE, Skill.HERBLORE, "Cleaned Herbs"),
	LANTADYME(ItemID.LANTADYME, Skill.HERBLORE, "Cleaned Herbs"),
	DWARF_WEED(ItemID.DWARF_WEED, Skill.HERBLORE, "Cleaned Herbs"),
	TORSTOL(ItemID.TORSTOL, Skill.HERBLORE, "Cleaned Herbs"),
	HUASCA(ItemID.HUASCA, Skill.HERBLORE, "Cleaned Herbs"),
	// Unfinished Potions
	GUAM_LEAF_POTION_UNF(ItemID.GUAM_POTION_UNF, Skill.HERBLORE, "Unfinished Potions"),
	MARRENTILL_POTION_UNF(ItemID.MARRENTILL_POTION_UNF, Skill.HERBLORE, "Unfinished Potions"),
	TARROMIN_POTION_UNF(ItemID.TARROMIN_POTION_UNF, Skill.HERBLORE, "Unfinished Potions"),
	HARRALANDER_POTION_UNF(ItemID.HARRALANDER_POTION_UNF, Skill.HERBLORE, "Unfinished Potions"),
	RANARR_POTION_UNF(ItemID.RANARR_POTION_UNF, Skill.HERBLORE, "Unfinished Potions"),
	TOADFLAX_POTION_UNF(ItemID.TOADFLAX_POTION_UNF, Skill.HERBLORE, "Unfinished Potions"),
	IRIT_POTION_UNF(ItemID.IRIT_POTION_UNF, Skill.HERBLORE, "Unfinished Potions"),
	AVANTOE_POTION_UNF(ItemID.AVANTOE_POTION_UNF, Skill.HERBLORE, "Unfinished Potions"),
	KWUARM_POTION_UNF(ItemID.KWUARM_POTION_UNF, Skill.HERBLORE, "Unfinished Potions"),
	SNAPDRAGON_POTION_UNF(ItemID.SNAPDRAGON_POTION_UNF, Skill.HERBLORE, "Unfinished Potions"),
	CADANTINE_POTION_UNF(ItemID.CADANTINE_POTION_UNF, Skill.HERBLORE, "Unfinished Potions"),
	CADANTINE_BLOOD_POTION_UNF(ItemID.CADANTINE_BLOOD_POTION_UNF, Skill.HERBLORE, "Unfinished Potions"),
	LANTADYME_POTION_UNF(ItemID.LANTADYME_POTION_UNF, Skill.HERBLORE, "Unfinished Potions"),
	DWARF_WEED_POTION_UNF(ItemID.DWARF_WEED_POTION_UNF, Skill.HERBLORE, "Unfinished Potions"),
	TORSTOL_POTION_UNF(ItemID.TORSTOL_POTION_UNF, Skill.HERBLORE, "Unfinished Potions"),
	HUASCA_POTION_UNF(ItemID.HUASCA_POTION_UNF, Skill.HERBLORE, "Unfinished Potions"),
	// Other
	MARK_OF_GRACE(ItemID.MARK_OF_GRACE, Skill.HERBLORE, "Other"),
	AMYLASE_CRYSTAL(ItemID.AMYLASE_CRYSTAL, Skill.HERBLORE, "Other"),
	LAVA_SCALE_SHARD(ItemID.LAVA_SCALE_SHARD, Skill.HERBLORE, "Other"),
	EXTENDED_ANTIFIRE4(ItemID.EXTENDED_ANTIFIRE4, Skill.HERBLORE),
	ANCIENT_BREW(Skill.HERBLORE, true, ItemID.ANCIENT_BREW1, ItemID.ANCIENT_BREW2, ItemID.ANCIENT_BREW3, ItemID.ANCIENT_BREW4),
	ARAXYTE_VENOM_SACK(ItemID.ARAXYTE_VENOM_SACK, Skill.HERBLORE, "Other"),
	ANTIVENOM(Skill.HERBLORE, true, ItemID.ANTIDOTE1_5958, ItemID.ANTIDOTE2_5956, ItemID.ANTIDOTE3_5954, ItemID.ANTIDOTE4_5952),
	// Coconut Potions
	ANTIDOTE_PLUS_POTION_UNF(ItemID.ANTIDOTE_UNF, Skill.HERBLORE, "Unfinished Potions"),
	ANTIDOTE_PLUS_PLUS_POTION_UNF(ItemID.ANTIDOTE_UNF_5951, Skill.HERBLORE, "Unfinished Potions"),
	CACTUS_SPINE(ItemID.CACTUS_SPINE, Skill.HERBLORE, "Other"),
	WEAPON_POISON_PLUS_UNF(ItemID.WEAPON_POISON_UNF, Skill.HERBLORE, "Unfinished Potions"),
	CAVE_NIGHTSHADE(ItemID.CAVE_NIGHTSHADE, Skill.HERBLORE, "Other"),
	NIGHTSHADE(ItemID.NIGHTSHADE, Skill.HERBLORE, "Other"),
	WEAPON_POISON_PLUS_PLUS_UNF(ItemID.WEAPON_POISON_UNF_5939, Skill.HERBLORE, "Unfinished Potions"),
	/**
	 * Prayer
	 */
	// Bones
	BONES(ItemID.BONES, Skill.PRAYER, "Bones"),
	WOLF_BONES(ItemID.WOLF_BONES, Skill.PRAYER, "Bones"),
	BURNT_BONES(ItemID.BURNT_BONES, Skill.PRAYER, "Bones"),
	MONKEY_BONES(ItemID.MONKEY_BONES, Skill.PRAYER, "Bones"),
	BAT_BONES(ItemID.BAT_BONES, Skill.PRAYER, "Bones"),
	JOGRE_BONES(ItemID.JOGRE_BONES, Skill.PRAYER, "Bones"),
	BIG_BONES(ItemID.BIG_BONES, Skill.PRAYER, "Bones"),
	ZOGRE_BONES(ItemID.ZOGRE_BONES, Skill.PRAYER, "Bones"),
	SHAIKAHAN_BONES(ItemID.SHAIKAHAN_BONES, Skill.PRAYER, "Bones"),
	BABYDRAGON_BONES(ItemID.BABYDRAGON_BONES, Skill.PRAYER, "Bones"),
	WYVERN_BONES(ItemID.WYVERN_BONES, Skill.PRAYER, "Bones"),
	DRAGON_BONES(ItemID.DRAGON_BONES, Skill.PRAYER, "Bones"),
	FAYRG_BONES(ItemID.FAYRG_BONES, Skill.PRAYER, "Bones"),
	LAVA_DRAGON_BONES(ItemID.LAVA_DRAGON_BONES, Skill.PRAYER, "Bones"),
	RAURG_BONES(ItemID.RAURG_BONES, Skill.PRAYER, "Bones"),
	DAGANNOTH_BONES(ItemID.DAGANNOTH_BONES, Skill.PRAYER, "Bones"),
	OURG_BONES(ItemID.OURG_BONES, Skill.PRAYER, "Bones"),
	SUPERIOR_DRAGON_BONES(ItemID.SUPERIOR_DRAGON_BONES, Skill.PRAYER, "Bones"),
	WYRM_BONES(ItemID.WYRM_BONES, Skill.PRAYER, "Bones"),
	DRAKE_BONES(ItemID.DRAKE_BONES, Skill.PRAYER, "Bones"),
	HYDRA_BONES(ItemID.HYDRA_BONES, Skill.PRAYER, "Bones"),
	WYRMLING_BONES(ItemID.WYRMLING_BONES, Skill.PRAYER, "Other"),
	// Blessed bones
	SUNKISSED_BONES(ItemID.SUNKISSED_BONES, Skill.PRAYER, "Bones"),
	BLESSED_BONE_SHARDS(ItemID.BLESSED_BONE_SHARDS, Skill.PRAYER, "Bones"),
	BLESSED_BONES(ItemID.BLESSED_BONES, Skill.PRAYER, "Bones"),
	BLESSED_BAT_BONES(ItemID.BLESSED_BAT_BONES, Skill.PRAYER, "Bones"),
	BLESSED_BIG_BONES(ItemID.BLESSED_BIG_BONES, Skill.PRAYER, "Bones"),
	BLESSED_ZOGRE_BONES(ItemID.BLESSED_ZOGRE_BONES, Skill.PRAYER, "Bones"),
	BLESSED_BABYDRAGON_BONES(ItemID.BLESSED_BABYDRAGON_BONES, Skill.PRAYER, "Bones"),
	BLESSED_DRAGON_BONES(ItemID.BLESSED_DRAGON_BONES, Skill.PRAYER, "Bones"),
	BLESSED_LAVA_DRAGON_BONES(ItemID.BLESSED_LAVA_DRAGON_BONES, Skill.PRAYER, "Bones"),
	BLESSED_WYVERN_BONES(ItemID.BLESSED_WYVERN_BONES, Skill.PRAYER, "Bones"),
	BLESSED_SUPERIOR_DRAGON_BONES(ItemID.BLESSED_SUPERIOR_DRAGON_BONES, Skill.PRAYER, "Bones"),
	BLESSED_WYRM_BONES(ItemID.BLESSED_WYRM_BONES, Skill.PRAYER, "Bones"),
	BLESSED_DRAKE_BONES(ItemID.BLESSED_DRAKE_BONES, Skill.PRAYER, "Bones"),
	BLESSED_HYDRA_BONES(ItemID.BLESSED_HYDRA_BONES, Skill.PRAYER, "Bones"),
	BLESSED_FAYRG_BONES(ItemID.BLESSED_FAYRG_BONES, Skill.PRAYER, "Bones"),
	BLESSED_RAURG_BONES(ItemID.BLESSED_RAURG_BONES, Skill.PRAYER, "Bones"),
	BLESSED_OURG_BONES(ItemID.BLESSED_OURG_BONES, Skill.PRAYER, "Bones"),
	DAGANNOTH_BONES_29376(ItemID.DAGANNOTH_BONES_29376, Skill.PRAYER, "Bones"),
	BLESSED_BONE_STATUETTE(ItemID.BLESSED_BONE_STATUETTE, Skill.PRAYER, "Bones"),
	BLESSED_BONE_STATUETTE_29340(ItemID.BLESSED_BONE_STATUETTE_29340, Skill.PRAYER, "Bones"),
	BLESSED_BONE_STATUETTE_29342(ItemID.BLESSED_BONE_STATUETTE_29342, Skill.PRAYER, "Bones"),
	BLESSED_BABYWYRM_BONES(ItemID.BLESSED_BABYWYRM_BONES, Skill.PRAYER, "Other"),
	// Bonemeal
	BONEMEAL(ItemID.BONEMEAL, Skill.PRAYER, "Bonemeal"),
	WOLF_BONEMEAL(ItemID.WOLF_BONEMEAL, Skill.PRAYER, "Bonemeal"),
	BURNT_BONEMEAL(ItemID.BURNT_BONEMEAL, Skill.PRAYER, "Bonemeal"),
	MONKEY_BONEMEAL(ItemID.MONKEY_BONEMEAL, Skill.PRAYER, "Bonemeal"),
	BAT_BONEMEAL(ItemID.BAT_BONEMEAL, Skill.PRAYER, "Bonemeal"),
	JOGRE_BONEMEAL(ItemID.JOGRE_BONEMEAL, Skill.PRAYER, "Bonemeal"),
	BIG_BONEMEAL(ItemID.BIG_BONEMEAL, Skill.PRAYER, "Bonemeal"),
	ZOGRE_BONEMEAL(ItemID.ZOGRE_BONEMEAL, Skill.PRAYER, "Bonemeal"),
	SHAIKAHAN_BONEMEAL(ItemID.SHAIKAHAN_BONEMEAL, Skill.PRAYER, "Bonemeal"),
	BABYDRAGON_BONEMEAL(ItemID.BABY_DRAGON_BONEMEAL, Skill.PRAYER, "Bonemeal"),
	WYVERN_BONEMEAL(ItemID.WYVERN_BONEMEAL, Skill.PRAYER, "Bonemeal"),
	DRAGON_BONEMEAL(ItemID.DRAGON_BONEMEAL, Skill.PRAYER, "Bonemeal"),
	FAYRG_BONEMEAL(ItemID.FAYRG_BONEMEAL, Skill.PRAYER, "Bonemeal"),
	LAVA_DRAGON_BONEMEAL(ItemID.LAVA_DRAGON_BONEMEAL, Skill.PRAYER, "Bonemeal"),
	RAURG_BONEMEAL(ItemID.RAURG_BONEMEAL, Skill.PRAYER, "Bonemeal"),
	DAGANNOTH_BONEMEAL(ItemID.DAGANNOTHKING_BONEMEAL, Skill.PRAYER, "Bonemeal"),
	OURG_BONEMEAL(ItemID.OURG_BONEMEAL, Skill.PRAYER, "Bonemeal"),
	SUPERIOR_DRAGON_BONEMEAL(ItemID.SUPERIOR_DRAGON_BONEMEAL, Skill.PRAYER, "Bonemeal"),
	WYRM_BONEMEAL(ItemID.WYRM_BONEMEAL, Skill.PRAYER, "Bonemeal"),
	DRAKE_BONEMEAL(ItemID.DRAKE_BONEMEAL, Skill.PRAYER, "Bonemeal"),
	HYDRA_BONEMEAL(ItemID.HYDRA_BONEMEAL, Skill.PRAYER, "Bonemeal"),
	// Shade Remains (Pyre Logs)
	LOAR_REMAINS(ItemID.LOAR_REMAINS, Skill.PRAYER, "Shades"),
	PHRIN_REMAINS(ItemID.PHRIN_REMAINS, Skill.PRAYER, "Shades"),
	RIYL_REMAINS(ItemID.RIYL_REMAINS, Skill.PRAYER, "Shades"),
	ASYN_REMAINS(ItemID.ASYN_REMAINS, Skill.PRAYER, "Shades"),
	FIYR_REMAINS(ItemID.FIYR_REMAINS, Skill.PRAYER, "Shades"),
	// Ensouled Heads
	ENSOULED_GOBLIN_HEAD(ItemID.ENSOULED_GOBLIN_HEAD_13448, Skill.PRAYER, "Ensouled Heads"),
	ENSOULED_MONKEY_HEAD(ItemID.ENSOULED_MONKEY_HEAD_13451, Skill.PRAYER, "Ensouled Heads"),
	ENSOULED_IMP_HEAD(ItemID.ENSOULED_IMP_HEAD_13454, Skill.PRAYER, "Ensouled Heads"),
	ENSOULED_MINOTAUR_HEAD(ItemID.ENSOULED_MINOTAUR_HEAD_13457, Skill.PRAYER, "Ensouled Heads"),
	ENSOULED_SCORPION_HEAD(ItemID.ENSOULED_SCORPION_HEAD_13460, Skill.PRAYER, "Ensouled Heads"),
	ENSOULED_BEAR_HEAD(ItemID.ENSOULED_BEAR_HEAD_13463, Skill.PRAYER, "Ensouled Heads"),
	ENSOULED_UNICORN_HEAD(ItemID.ENSOULED_UNICORN_HEAD_13466, Skill.PRAYER, "Ensouled Heads"),
	ENSOULED_DOG_HEAD(ItemID.ENSOULED_DOG_HEAD_13469, Skill.PRAYER, "Ensouled Heads"),
	ENSOULED_CHAOS_DRUID_HEAD(ItemID.ENSOULED_CHAOS_DRUID_HEAD_13472, Skill.PRAYER, "Ensouled Heads"),
	ENSOULED_GIANT_HEAD(ItemID.ENSOULED_GIANT_HEAD_13475, Skill.PRAYER, "Ensouled Heads"),
	ENSOULED_OGRE_HEAD(ItemID.ENSOULED_OGRE_HEAD_13478, Skill.PRAYER, "Ensouled Heads"),
	ENSOULED_ELF_HEAD(ItemID.ENSOULED_ELF_HEAD_13481, Skill.PRAYER, "Ensouled Heads"),
	ENSOULED_TROLL_HEAD(ItemID.ENSOULED_TROLL_HEAD_13484, Skill.PRAYER, "Ensouled Heads"),
	ENSOULED_HORROR_HEAD(ItemID.ENSOULED_HORROR_HEAD_13487, Skill.PRAYER, "Ensouled Heads"),
	ENSOULED_KALPHITE_HEAD(ItemID.ENSOULED_KALPHITE_HEAD_13490, Skill.PRAYER, "Ensouled Heads"),
	ENSOULED_DAGANNOTH_HEAD(ItemID.ENSOULED_DAGANNOTH_HEAD_13493, Skill.PRAYER, "Ensouled Heads"),
	ENSOULED_BLOODVELD_HEAD(ItemID.ENSOULED_BLOODVELD_HEAD_13496, Skill.PRAYER, "Ensouled Heads"),
	ENSOULED_TZHAAR_HEAD(ItemID.ENSOULED_TZHAAR_HEAD_13499, Skill.PRAYER, "Ensouled Heads"),
	ENSOULED_DEMON_HEAD(ItemID.ENSOULED_DEMON_HEAD_13502, Skill.PRAYER, "Ensouled Heads"),
	ENSOULED_HELLHOUND_HEAD(ItemID.ENSOULED_HELLHOUND_HEAD_26997, Skill.PRAYER, "Ensouled Heads"),
	ENSOULED_AVIANSIE_HEAD(ItemID.ENSOULED_AVIANSIE_HEAD_13505, Skill.PRAYER, "Ensouled Heads"),
	ENSOULED_ABYSSAL_HEAD(ItemID.ENSOULED_ABYSSAL_HEAD_13508, Skill.PRAYER, "Ensouled Heads"),
	ENSOULED_DRAGON_HEAD(ItemID.ENSOULED_DRAGON_HEAD_13511, Skill.PRAYER, "Ensouled Heads"),
	// Fossils
	SMALL_LIMBS(ItemID.SMALL_FOSSILISED_LIMBS, Skill.PRAYER, "Fossils"),
	SMALL_SPINE(ItemID.SMALL_FOSSILISED_SPINE, Skill.PRAYER, "Fossils"),
	SMALL_RIBS(ItemID.SMALL_FOSSILISED_RIBS, Skill.PRAYER, "Fossils"),
	SMALL_PELVIS(ItemID.SMALL_FOSSILISED_PELVIS, Skill.PRAYER, "Fossils"),
	SMALL_SKULL(ItemID.SMALL_FOSSILISED_SKULL, Skill.PRAYER, "Fossils"),
	SMALL_FOSSIL(ItemID.UNIDENTIFIED_SMALL_FOSSIL, Skill.PRAYER, "Fossils"),
	MEDIUM_LIMBS(ItemID.MEDIUM_FOSSILISED_LIMBS, Skill.PRAYER, "Fossils"),
	MEDIUM_SPINE(ItemID.MEDIUM_FOSSILISED_SPINE, Skill.PRAYER, "Fossils"),
	MEDIUM_RIBS(ItemID.MEDIUM_FOSSILISED_RIBS, Skill.PRAYER, "Fossils"),
	MEDIUM_PELVIS(ItemID.MEDIUM_FOSSILISED_PELVIS, Skill.PRAYER, "Fossils"),
	MEDIUM_SKULL(ItemID.MEDIUM_FOSSILISED_SKULL, Skill.PRAYER, "Fossils"),
	MEDIUM_FOSSIL(ItemID.UNIDENTIFIED_MEDIUM_FOSSIL, Skill.PRAYER, "Fossils"),
	LARGE_LIMBS(ItemID.LARGE_FOSSILISED_LIMBS, Skill.PRAYER, "Fossils"),
	LARGE_SPINE(ItemID.LARGE_FOSSILISED_SPINE, Skill.PRAYER, "Fossils"),
	LARGE_RIBS(ItemID.LARGE_FOSSILISED_RIBS, Skill.PRAYER, "Fossils"),
	LARGE_PELVIS(ItemID.LARGE_FOSSILISED_PELVIS, Skill.PRAYER, "Fossils"),
	LARGE_SKULL(ItemID.LARGE_FOSSILISED_SKULL, Skill.PRAYER, "Fossils"),
	LARGE_FOSSIL(ItemID.UNIDENTIFIED_LARGE_FOSSIL, Skill.PRAYER, "Fossils"),
	RARE_LIMBS(ItemID.RARE_FOSSILISED_LIMBS, Skill.PRAYER, "Fossils"),
	RARE_SPINE(ItemID.RARE_FOSSILISED_SPINE, Skill.PRAYER, "Fossils"),
	RARE_RIBS(ItemID.RARE_FOSSILISED_RIBS, Skill.PRAYER, "Fossils"),
	RARE_PELVIS(ItemID.RARE_FOSSILISED_PELVIS, Skill.PRAYER, "Fossils"),
	RARE_SKULL(ItemID.RARE_FOSSILISED_SKULL, Skill.PRAYER, "Fossils"),
	RARE_TUSK(ItemID.RARE_FOSSILISED_TUSK, Skill.PRAYER, "Fossils"),
	RARE_FOSSIL(ItemID.UNIDENTIFIED_RARE_FOSSIL, Skill.PRAYER, "Fossils"),
	// Ashes
	FIENDISH_ASHES(ItemID.FIENDISH_ASHES, Skill.PRAYER, "Ashes"),
	VILE_ASHES(ItemID.VILE_ASHES, Skill.PRAYER, "Ashes"),
	MALICIOUS_ASHES(ItemID.MALICIOUS_ASHES, Skill.PRAYER, "Ashes"),
	ABYSSAL_ASHES(ItemID.ABYSSAL_ASHES, Skill.PRAYER, "Ashes"),
	INFERNAL_ASHES(ItemID.INFERNAL_ASHES, Skill.PRAYER, "Ashes"),
	// Bird Eggs
	BIRD_EGG_NEST_RED(ItemID.BIRD_NEST, Skill.PRAYER),
	BIRD_EGG_NEST_BLUE(ItemID.BIRD_NEST_5072, Skill.PRAYER),
	BIRD_EGG_NEST_GREEN(ItemID.BIRD_NEST_5071, Skill.PRAYER),
	BIRD_EGG_RED(ItemID.BIRDS_EGG, Skill.PRAYER),
	BIRD_EGG_BLUE(ItemID.BIRDS_EGG_5077, Skill.PRAYER),
	BIRD_EGG_GREEN(ItemID.BIRDS_EGG_5078, Skill.PRAYER),
	// Slayer Trophies
	CRAWLING_HAND(ItemID.CRAWLING_HAND_7975, Skill.PRAYER),
	COCKATRICE_HEAD(ItemID.COCKATRICE_HEAD, Skill.PRAYER),
	BASILISK_HEAD(ItemID.BASILISK_HEAD, Skill.PRAYER),
	KURASK_HEAD(ItemID.KURASK_HEAD, Skill.PRAYER),
	ABYSSAL_HEAD(ItemID.ABYSSAL_HEAD, Skill.PRAYER),
	KBD_HEADS(ItemID.KBD_HEADS, Skill.PRAYER),
	KQ_HEAD(ItemID.KQ_HEAD, Skill.PRAYER),
	VORKATHS_HEAD(ItemID.VORKATHS_HEAD, Skill.PRAYER),
	ALCHEMICAL_HYDRA_HEADS(ItemID.ALCHEMICAL_HYDRA_HEADS, Skill.PRAYER),
	/**
	 * Cooking
	 */
	RAW_BEEF(ItemID.RAW_BEEF, Skill.COOKING, "Meat"),
	RAW_RAT_MEAT(ItemID.RAW_RAT_MEAT, Skill.COOKING, "Meat"),
	RAW_BEAR_MEAT(ItemID.RAW_BEAR_MEAT, Skill.COOKING, "Meat"),
	RAW_YAK_MEAT(ItemID.RAW_YAK_MEAT, Skill.COOKING, "Meat"),
	RAW_UGTHANKI_MEAT(ItemID.RAW_UGTHANKI_MEAT, Skill.COOKING, "Meat"),
	RAW_CHICKEN(ItemID.RAW_CHICKEN, Skill.COOKING, "Meat"),
	RAW_RABBIT(ItemID.RAW_RABBIT, Skill.COOKING, "Meat"),
	RAW_SHRIMPS(ItemID.RAW_SHRIMPS, Skill.COOKING, "Fish"),
	RAW_SARDINE(ItemID.RAW_SARDINE, Skill.COOKING, "Fish"),
	RAW_ANCHOVIES(ItemID.RAW_ANCHOVIES, Skill.COOKING, "Fish"),
	RAW_HERRING(ItemID.RAW_HERRING, Skill.COOKING, "Fish"),
	RAW_MACKEREL(ItemID.RAW_MACKEREL, Skill.COOKING, "Fish"),
	RAW_BIRD_MEAT(ItemID.RAW_BIRD_MEAT, Skill.COOKING, "Meat"),
	THIN_SNAIL(ItemID.THIN_SNAIL, Skill.COOKING, "Meat"),
	RAW_TROUT(ItemID.RAW_TROUT, Skill.COOKING, "Fish"),
	LEAN_SNAIL(ItemID.LEAN_SNAIL, Skill.COOKING, "Meat"),
	RAW_COD(ItemID.RAW_COD, Skill.COOKING, "Fish"),
	RAW_PIKE(ItemID.RAW_PIKE, Skill.COOKING, "Fish"),
	FAT_SNAIL(ItemID.FAT_SNAIL, Skill.COOKING, "Meat"),
	RAW_BEAST_MEAT(ItemID.RAW_BEAST_MEAT, Skill.COOKING, "Meat"),
	RAW_SALMON(ItemID.RAW_SALMON, Skill.COOKING, "Fish"),
	RAW_TUNA(ItemID.RAW_TUNA, Skill.COOKING, "Fish"),
	RAW_RAINBOW_FISH(ItemID.RAW_RAINBOW_FISH, Skill.COOKING, "Fish"),
	RAW_KARAMBWAN(ItemID.RAW_KARAMBWAN, Skill.COOKING, "Fish"),
	RAW_LOBSTER(ItemID.RAW_LOBSTER, Skill.COOKING, "Fish"),
	RAW_BASS(ItemID.RAW_BASS, Skill.COOKING, "Fish"),
	RAW_SWORDFISH(ItemID.RAW_SWORDFISH, Skill.COOKING, "Fish"),
	RAW_MONKFISH(ItemID.RAW_MONKFISH, Skill.COOKING, "Fish"),
	RAW_SHARK(ItemID.RAW_SHARK, Skill.COOKING, "Fish"),
	RAW_SEA_TURTLE(ItemID.RAW_SEA_TURTLE, Skill.COOKING, "Fish"),
	RAW_ANGLERFISH(ItemID.RAW_ANGLERFISH, Skill.COOKING, "Fish"),
	RAW_DARK_CRAB(ItemID.RAW_DARK_CRAB, Skill.COOKING, "Fish"),
	RAW_MANTA_RAY(ItemID.RAW_MANTA_RAY, Skill.COOKING, "Fish"),
	GRAPES(ItemID.GRAPES, Skill.COOKING, "Other"),
	SWEETCORN(ItemID.SWEETCORN, Skill.COOKING, "Other"),
	UNCOOKED_STEW(ItemID.UNCOOKED_STEW, Skill.COOKING, "Other"),
	UNCOOKED_CURRY(ItemID.UNCOOKED_CURRY, Skill.COOKING, "Other"),
	RAW_WILD_KEBBIT(ItemID.RAW_WILD_KEBBIT, Skill.COOKING, "Meat"),
	RAW_LARUPIA(ItemID.RAW_LARUPIA, Skill.COOKING, "Meat"),
	RAW_BARBTAILED_KEBBIT(ItemID.RAW_BARBTAILED_KEBBIT, Skill.COOKING, "Meat"),
	RAW_GRAAHK(ItemID.RAW_GRAAHK, Skill.COOKING, "Meat"),
	RAW_KYATT(ItemID.RAW_KYATT, Skill.COOKING, "Meat"),
	RAW_PYRE_FOX(ItemID.RAW_PYRE_FOX, Skill.COOKING, "Meat"),
	RAW_SUNLIGHT_ANTELOPE(ItemID.RAW_SUNLIGHT_ANTELOPE, Skill.COOKING, "Meat"),
	RAW_DASHING_KEBBIT(ItemID.RAW_DASHING_KEBBIT, Skill.COOKING, "Meat"),
	RAW_MOONLIGHT_ANTELOPE(ItemID.RAW_MOONLIGHT_ANTELOPE, Skill.COOKING, "Meat"),
	/**
	 * Crafting
	 */
	WOOL(ItemID.WOOL, Skill.CRAFTING, "Misc"),
	FLAX(ItemID.FLAX, Skill.CRAFTING, "Misc"),
	MOLTEN_GLASS(ItemID.MOLTEN_GLASS, Skill.CRAFTING, "Misc"),
	BATTLESTAFF(ItemID.BATTLESTAFF, Skill.CRAFTING, "Misc"),
	GOLD_BAR(ItemID.GOLD_BAR, Skill.CRAFTING, "Misc"),
	// Leather
	COW_HIDE(ItemID.COWHIDE, Skill.CRAFTING, "Leather"),
	LEATHER(ItemID.LEATHER, Skill.CRAFTING, "Leather"),
	HARD_LEATHER(ItemID.HARD_LEATHER, Skill.CRAFTING, "Leather"),
	STEEL_STUDS(ItemID.STEEL_STUDS, Skill.CRAFTING, "Leather"),

	// D'hide/Dragon Leather
	GREEN_DRAGONHIDE(ItemID.GREEN_DRAGONHIDE, Skill.CRAFTING, "D'hide"),
	GREEN_DRAGON_LEATHER(ItemID.GREEN_DRAGON_LEATHER, Skill.CRAFTING, "D'hide"),
	BLUE_DRAGONHIDE(ItemID.BLUE_DRAGONHIDE, Skill.CRAFTING, "D'hide"),
	BLUE_DRAGON_LEATHER(ItemID.BLUE_DRAGON_LEATHER, Skill.CRAFTING, "D'hide"),
	RED_DRAGONHIDE(ItemID.RED_DRAGONHIDE, Skill.CRAFTING, "D'hide"),
	RED_DRAGON_LEATHER(ItemID.RED_DRAGON_LEATHER, Skill.CRAFTING, "D'hide"),
	BLACK_DRAGONHIDE(ItemID.BLACK_DRAGONHIDE, Skill.CRAFTING, "D'hide"),
	BLACK_DRAGON_LEATHER(ItemID.BLACK_DRAGON_LEATHER, Skill.CRAFTING, "D'hide"),
	// Uncut Gems
	UNCUT_OPAL(ItemID.UNCUT_OPAL, Skill.CRAFTING, "Gems"),
	UNCUT_JADE(ItemID.UNCUT_JADE, Skill.CRAFTING, "Gems"),
	UNCUT_RED_TOPAZ(ItemID.UNCUT_RED_TOPAZ, Skill.CRAFTING, "Gems"),
	UNCUT_SAPPHIRE(ItemID.UNCUT_SAPPHIRE, Skill.CRAFTING, "Gems"),
	UNCUT_EMERALD(ItemID.UNCUT_EMERALD, Skill.CRAFTING, "Gems"),
	UNCUT_RUBY(ItemID.UNCUT_RUBY, Skill.CRAFTING, "Gems"),
	UNCUT_DIAMOND(ItemID.UNCUT_DIAMOND, Skill.CRAFTING, "Gems"),
	UNCUT_DRAGONSTONE(ItemID.UNCUT_DRAGONSTONE, Skill.CRAFTING, "Gems"),
	UNCUT_ONYX(ItemID.UNCUT_ONYX, Skill.CRAFTING, "Gems"),
	UNCUT_ZENYTE(ItemID.UNCUT_ZENYTE, Skill.CRAFTING, "Gems"),
	// Cut Gems
	OPAL(ItemID.OPAL, Skill.CRAFTING, "Gems"),
	JADE(ItemID.JADE, Skill.CRAFTING, "Gems"),
	RED_TOPAZ(ItemID.RED_TOPAZ, Skill.CRAFTING, "Gems"),
	SAPPHIRE(ItemID.SAPPHIRE, Skill.CRAFTING, "Gems"),
	EMERALD(ItemID.EMERALD, Skill.CRAFTING, "Gems"),
	RUBY(ItemID.RUBY, Skill.CRAFTING, "Gems"),
	DIAMOND(ItemID.DIAMOND, Skill.CRAFTING, "Gems"),
	DRAGONSTONE(ItemID.DRAGONSTONE, Skill.CRAFTING, "Gems"),
	ONYX(ItemID.ONYX, Skill.CRAFTING, "Gems"),
	ZENYTE(ItemID.ZENYTE, Skill.CRAFTING, "Gems"),
	// RNG
	SEAWEED(ItemID.SEAWEED, Skill.CRAFTING, "Misc"),
	SODA_ASH(ItemID.SODA_ASH, Skill.CRAFTING, "Misc"),
	GIANT_SEAWEED(ItemID.GIANT_SEAWEED, Skill.CRAFTING, "Misc"),
	// Other
	SILVER_BAR(ItemID.SILVER_BAR, Skill.CRAFTING, "Other"),
	AMETHYST(ItemID.AMETHYST, Skill.CRAFTING, "Other"),
	SINEW(ItemID.SINEW, Skill.CRAFTING),
	PERFECT_SHELL(ItemID.PERFECT_SHELL, Skill.CRAFTING, "Other"),

	// Stringing
	UNSTRUNG_SYMBOL(ItemID.UNSTRUNG_SYMBOL, Skill.CRAFTING),
	UNSTRUNG_EMBLEM(ItemID.UNSTRUNG_EMBLEM, Skill.CRAFTING),
	GOLD_AMULET_U(ItemID.GOLD_AMULET_U, Skill.CRAFTING),
	OPAL_AMULET_U(ItemID.OPAL_AMULET_U, Skill.CRAFTING),
	JADE_AMULET_U(ItemID.JADE_AMULET_U, Skill.CRAFTING),
	TOPAZ_AMULET_U(ItemID.TOPAZ_AMULET_U, Skill.CRAFTING),
	SAPPHIRE_AMULET_U(ItemID.SAPPHIRE_AMULET_U, Skill.CRAFTING),
	EMERALD_AMULET_U(ItemID.EMERALD_AMULET_U, Skill.CRAFTING),
	RUBY_AMULET_U(ItemID.RUBY_AMULET_U, Skill.CRAFTING),
	DIAMOND_AMULET_U(ItemID.DIAMOND_AMULET_U, Skill.CRAFTING),
	DRAGONSTONE_AMULET_U(ItemID.DRAGONSTONE_AMULET_U, Skill.CRAFTING),
	ONYX_AMULET_U(ItemID.ONYX_AMULET_U, Skill.CRAFTING),
	ZENYTE_AMULET_U(ItemID.ZENYTE_AMULET_U, Skill.CRAFTING),
	/**
	 * Smithing
	 */
	// Ores
	IRON_ORE(ItemID.IRON_ORE, Skill.SMITHING, "Ore"),
	SILVER_ORE(ItemID.SILVER_ORE, Skill.SMITHING, "Ore"),
	GOLD_ORE(ItemID.GOLD_ORE, Skill.SMITHING, "Ore"),
	MITHRIL_ORE(ItemID.MITHRIL_ORE, Skill.SMITHING, "Ore"),
	ADAMANTITE_ORE(ItemID.ADAMANTITE_ORE, Skill.SMITHING, "Ore"),
	RUNITE_ORE(ItemID.RUNITE_ORE, Skill.SMITHING, "Ore"),
	// Bars
	BRONZE_BAR(ItemID.BRONZE_BAR, Skill.SMITHING, "Bars"),
	IRON_BAR(ItemID.IRON_BAR, Skill.SMITHING, "Bars"),
	STEEL_BAR(ItemID.STEEL_BAR, Skill.SMITHING, "Bars"),
	MITHRIL_BAR(ItemID.MITHRIL_BAR, Skill.SMITHING, "Bars"),
	ADAMANTITE_BAR(ItemID.ADAMANTITE_BAR, Skill.SMITHING, "Bars"),
	RUNITE_BAR(ItemID.RUNITE_BAR, Skill.SMITHING, "Bars"),
	/**
	 * Farming
	 */
	// Seeds
	ACORN(ItemID.ACORN, Skill.FARMING, "Seeds"),
	WILLOW_SEED(ItemID.WILLOW_SEED, Skill.FARMING, "Seeds"),
	MAPLE_SEED(ItemID.MAPLE_SEED, Skill.FARMING, "Seeds"),
	YEW_SEED(ItemID.YEW_SEED, Skill.FARMING, "Seeds"),
	MAGIC_SEED(ItemID.MAGIC_SEED, Skill.FARMING, "Seeds"),
	APPLE_TREE_SEED(ItemID.APPLE_TREE_SEED, Skill.FARMING, "Seeds"),
	BANANA_TREE_SEED(ItemID.BANANA_TREE_SEED, Skill.FARMING, "Seeds"),
	ORANGE_TREE_SEED(ItemID.ORANGE_TREE_SEED, Skill.FARMING, "Seeds"),
	CURRY_TREE_SEED(ItemID.CURRY_TREE_SEED, Skill.FARMING, "Seeds"),
	PINEAPPLE_SEED(ItemID.PINEAPPLE_SEED, Skill.FARMING, "Seeds"),
	PAPAYA_TREE_SEED(ItemID.PAPAYA_TREE_SEED, Skill.FARMING, "Seeds"),
	PALM_TREE_SEED(ItemID.PALM_TREE_SEED, Skill.FARMING, "Seeds"),
	CALQUAT_TREE_SEED(ItemID.CALQUAT_TREE_SEED, Skill.FARMING, "Seeds"),
	TEAK_SEED(ItemID.TEAK_SEED, Skill.FARMING, "Seeds"),
	MAHOGANY_SEED(ItemID.MAHOGANY_SEED, Skill.FARMING, "Seeds"),
	SPIRIT_SEED(ItemID.SPIRIT_SEED, Skill.FARMING, "Seeds"),
	DRAGONFRUIT_TREE_SEED(ItemID.DRAGONFRUIT_TREE_SEED, Skill.FARMING, "Seeds"),
	CELASTRUS_SEED(ItemID.CELASTRUS_SEED, Skill.FARMING, "Seeds"),
	REDWOOD_TREE_SEED(ItemID.REDWOOD_TREE_SEED, Skill.FARMING, "Seeds"),
	CRYSTAL_ACORN(ItemID.CRYSTAL_ACORN, Skill.FARMING, "Seeds"),
	HESPORI_SEED(ItemID.HESPORI_SEED, Skill.FARMING, "Seeds"),

	// Saplings
	OAK_SAPLING(ItemID.OAK_SAPLING, Skill.FARMING, "Saplings"),
	WILLOW_SAPLING(ItemID.WILLOW_SAPLING, Skill.FARMING, "Saplings"),
	MAPLE_SAPLING(ItemID.MAPLE_SAPLING, Skill.FARMING, "Saplings"),
	YEW_SAPLING(ItemID.YEW_SAPLING, Skill.FARMING, "Saplings"),
	MAGIC_SAPLING(ItemID.MAGIC_SAPLING, Skill.FARMING, "Saplings"),
	APPLE_TREE_SAPLING(ItemID.APPLE_SAPLING, Skill.FARMING, "Saplings"),
	BANANA_TREE_SAPLING(ItemID.BANANA_SAPLING, Skill.FARMING, "Saplings"),
	ORANGE_TREE_SAPLING(ItemID.ORANGE_SAPLING, Skill.FARMING, "Saplings"),
	CURRY_TREE_SAPLING(ItemID.CURRY_SAPLING, Skill.FARMING, "Saplings"),
	PINEAPPLE_SAPLING(ItemID.PINEAPPLE_SAPLING, Skill.FARMING, "Saplings"),
	PAPAYA_TREE_SAPLING(ItemID.PAPAYA_SAPLING, Skill.FARMING, "Saplings"),
	PALM_TREE_SAPLING(ItemID.PALM_SAPLING, Skill.FARMING, "Saplings"),
	CALQUAT_TREE_SAPLING(ItemID.CALQUAT_SAPLING, Skill.FARMING, "Saplings"),
	TEAK_SAPLING(ItemID.TEAK_SAPLING, Skill.FARMING, "Saplings"),
	MAHOGANY_SAPLING(ItemID.MAHOGANY_SAPLING, Skill.FARMING, "Saplings"),
	SPIRIT_SAPLING(ItemID.SPIRIT_SAPLING, Skill.FARMING, "Saplings"),
	DRAGONFRUIT_SAPLING(ItemID.DRAGONFRUIT_SAPLING, Skill.FARMING, "Saplings"),
	CELASTRUS_SAPLING(ItemID.CELASTRUS_SAPLING, Skill.FARMING, "Saplings"),
	REDWOOD_SAPLING(ItemID.REDWOOD_SAPLING, Skill.FARMING, "Saplings"),
	CRYSTAL_SAPLING(ItemID.CRYSTAL_SAPLING, Skill.FARMING, "Saplings"),
	/**
	 * Fletching
	 */
	// General
	F_ARROW_SHAFT(ItemID.ARROW_SHAFT, Skill.FLETCHING, "Headless arrow"),
	// Logs
	F_LOGS(ItemID.LOGS, Skill.FLETCHING, "Logs"),
	F_OAK_LOGS(ItemID.OAK_LOGS, Skill.FLETCHING, "Logs"),
	F_WILLOW_LOGS(ItemID.WILLOW_LOGS, Skill.FLETCHING, "Logs"),
	F_TEAK_LOGS(ItemID.TEAK_LOGS, Skill.FLETCHING, "Logs"),
	F_MAPLE_LOGS(ItemID.MAPLE_LOGS, Skill.FLETCHING, "Logs"),
	F_MAHOGANY_LOGS(ItemID.MAHOGANY_LOGS, Skill.FLETCHING, "Logs"),
	F_YEW_LOGS(ItemID.YEW_LOGS, Skill.FLETCHING, "Logs"),
	F_MAGIC_LOGS(ItemID.MAGIC_LOGS, Skill.FLETCHING, "Logs"),
	F_REDWOOD_LOGS(ItemID.REDWOOD_LOGS, Skill.FLETCHING, "Logs"),
	// Unstrung
	F_SHORTBOW_U(ItemID.SHORTBOW_U, Skill.FLETCHING, "Unstrung"),
	F_LONGBOW_U(ItemID.LONGBOW_U, Skill.FLETCHING, "Unstrung"),
	F_OAK_SHORTBOW_U(ItemID.OAK_SHORTBOW_U, Skill.FLETCHING, "Unstrung"),
	F_OAK_LONGBOW_U(ItemID.OAK_LONGBOW_U, Skill.FLETCHING, "Unstrung"),
	F_WILLOW_SHORTBOW_U(ItemID.WILLOW_SHORTBOW_U, Skill.FLETCHING, "Unstrung"),
	F_WILLOW_LONGBOW_U(ItemID.WILLOW_LONGBOW_U, Skill.FLETCHING, "Unstrung"),
	F_MAPLE_SHORTBOW_U(ItemID.MAPLE_SHORTBOW_U, Skill.FLETCHING, "Unstrung"),
	F_MAPLE_LONGBOW_U(ItemID.MAPLE_LONGBOW_U, Skill.FLETCHING, "Unstrung"),
	F_YEW_SHORTBOW_U(ItemID.YEW_SHORTBOW_U, Skill.FLETCHING, "Unstrung"),
	F_YEW_LONGBOW_U(ItemID.YEW_LONGBOW_U, Skill.FLETCHING, "Unstrung"),
	F_MAGIC_SHORTBOW_U(ItemID.MAGIC_SHORTBOW_U, Skill.FLETCHING, "Unstrung"),
	F_MAGIC_LONGBOW_U(ItemID.MAGIC_LONGBOW_U, Skill.FLETCHING, "Unstrung"),
	// Darts
	F_BRONZE_DART_TIP(ItemID.BRONZE_DART_TIP, Skill.FLETCHING, "Dart tip"),
	F_IRON_DART_TIP(ItemID.IRON_DART_TIP, Skill.FLETCHING, "Dart tip"),
	F_STEEL_DART_TIP(ItemID.STEEL_DART_TIP, Skill.FLETCHING, "Dart tip"),
	F_MITHRIL_DART_TIP(ItemID.MITHRIL_DART_TIP, Skill.FLETCHING, "Dart tip"),
	F_ADAMANT_DART_TIP(ItemID.ADAMANT_DART_TIP, Skill.FLETCHING, "Dart tip"),
	F_RUNE_DART_TIP(ItemID.RUNE_DART_TIP, Skill.FLETCHING, "Dart tip"),
	F_AMETHYST_DART_TIP(ItemID.AMETHYST_DART_TIP, Skill.FLETCHING, "Dart tip"),
	F_DRAGON_DART_TIP(ItemID.DRAGON_DART_TIP, Skill.FLETCHING, "Dart tip"),
	// Arrows
	F_BRONZE_ARROWTIPS(ItemID.BRONZE_ARROWTIPS, Skill.FLETCHING, "Arrow"),
	F_IRON_ARROWTIPS(ItemID.IRON_ARROWTIPS, Skill.FLETCHING, "Arrow"),
	F_STEEL_ARROWTIPS(ItemID.STEEL_ARROWTIPS, Skill.FLETCHING, "Arrow"),
	F_MITHRIL_ARROWTIPS(ItemID.MITHRIL_ARROWTIPS, Skill.FLETCHING, "Arrow"),
	F_BROAD_ARROWHEADS(ItemID.BROAD_ARROWHEADS, Skill.FLETCHING, "Arrow"),
	F_ADAMANT_ARROWTIPS(ItemID.ADAMANT_ARROWTIPS, Skill.FLETCHING, "Arrow"),
	F_RUNE_ARROWTIPS(ItemID.RUNE_ARROWTIPS, Skill.FLETCHING, "Arrow"),
	F_AMETHYST_ARROWTIPS(ItemID.AMETHYST_ARROWTIPS, Skill.FLETCHING, "Arrow"),
	F_DRAGON_ARROWTIPS(ItemID.DRAGON_ARROWTIPS, Skill.FLETCHING, "Arrow"),
	// Bolts
	BRONZE_BOLTS(ItemID.BRONZE_BOLTS_UNF, Skill.FLETCHING, "Bolts"),
	BLURITE_BOLTS(ItemID.BLURITE_BOLTS_UNF, Skill.FLETCHING, "Bolts"),
	KEBBIT_BOLTS(ItemID.KEBBIT_SPIKE, Skill.FLETCHING, "Bolts"),
	IRON_BOLTS(ItemID.IRON_BOLTS_UNF, Skill.FLETCHING, "Bolts"),
	SILVER_BOLTS(ItemID.SILVER_BOLTS_UNF, Skill.FLETCHING, "Bolts"),
	STEEL_BOLTS(ItemID.STEEL_BOLTS_UNF, Skill.FLETCHING, "Bolts"),
	MITHRIL_BOLTS(ItemID.MITHRIL_BOLTS_UNF, Skill.FLETCHING, "Bolts"),
	BROAD_BOLTS(ItemID.UNFINISHED_BROAD_BOLTS, Skill.FLETCHING, "Bolts"),
	ADAMANT_BOLTS(ItemID.ADAMANT_BOLTSUNF, Skill.FLETCHING, "Bolts"),
	SUNLIGHT_ANTLER_BOLTS(ItemID.SUNLIGHT_ANTELOPE_ANTLER, Skill.FLETCHING, "Bolts"),
	RUNE_BOLTS(ItemID.RUNITE_BOLTS_UNF, Skill.FLETCHING, "Bolts"),
	MOONLIGHT_ANTLER_BOLTS(ItemID.MOONLIGHT_ANTELOPE_ANTLER, Skill.FLETCHING, "Bolts"),
	DRAGON_BOLTS(ItemID.DRAGON_BOLTS_UNF, Skill.FLETCHING, "Bolts"),
	// Stocks
	F_WOODEN_STOCK(ItemID.WOODEN_STOCK, Skill.FLETCHING, "Stock"),
	F_OAK_STOCK(ItemID.OAK_STOCK, Skill.FLETCHING, "Stock"),
	F_WILLOW_STOCK(ItemID.WILLOW_STOCK, Skill.FLETCHING, "Stock"),
	F_TEAK_STOCK(ItemID.TEAK_STOCK, Skill.FLETCHING, "Stock"),
	F_MAPLE_STOCK(ItemID.MAPLE_STOCK, Skill.FLETCHING, "Stock"),
	F_MAHOGANY_STOCK(ItemID.MAHOGANY_STOCK, Skill.FLETCHING, "Stock"),
	F_YEW_STOCK(ItemID.YEW_STOCK, Skill.FLETCHING, "Stock"),
	F_MAGIC_STOCK(ItemID.MAGIC_STOCK, Skill.FLETCHING, "Stock"),
	// Unstrung Crossbows
	F_BRONZE_CROSSBOW_U(ItemID.BRONZE_CROSSBOW_U, Skill.FLETCHING, "Unstrung Crossbow"),
	F_BLURITE_CROSSBOW_U(ItemID.BLURITE_CROSSBOW_U, Skill.FLETCHING, "Unstrung Crossbow"),
	F_IRON_CROSSBOW_U(ItemID.IRON_CROSSBOW_U, Skill.FLETCHING, "Unstrung Crossbow"),
	F_STEEL_CROSSBOW_U(ItemID.STEEL_CROSSBOW_U, Skill.FLETCHING, "Unstrung Crossbow"),
	F_MITHRIL_CROSSBOW_U(ItemID.MITHRIL_CROSSBOW_U, Skill.FLETCHING, "Unstrung Crossbow"),
	F_ADAMANTITE_CROSSBOW_U(ItemID.ADAMANT_CROSSBOW_U, Skill.FLETCHING, "Unstrung Crossbow"),
	F_RUNITE_CROSSBOW_U(ItemID.RUNITE_CROSSBOW_U, Skill.FLETCHING, "Unstrung Crossbow"),
	F_DRAGON_CROSSBOW_U(ItemID.DRAGON_CROSSBOW_U, Skill.FLETCHING, "Unstrung Crossbow"),
	// Battlestaves
	F_CELASTRUS_BARK(ItemID.CELASTRUS_BARK, Skill.FLETCHING, "Other"),
	// Javelin Heads
	BRONZE_JAVELIN_HEADS(ItemID.BRONZE_JAVELIN_HEADS, Skill.FLETCHING, "Javelin Heads"),
	IRON_JAVELIN_HEADS(ItemID.IRON_JAVELIN_HEADS, Skill.FLETCHING, "Javelin Heads"),
	STEEL_JAVELIN_HEADS(ItemID.STEEL_JAVELIN_HEADS, Skill.FLETCHING, "Javelin Heads"),
	MITHRIL_JAVELIN_HEADS(ItemID.MITHRIL_JAVELIN_HEADS, Skill.FLETCHING, "Javelin Heads"),
	ADAMANT_JAVELIN_HEADS(ItemID.ADAMANT_JAVELIN_HEADS, Skill.FLETCHING, "Javelin Heads"),
	RUNE_JAVELIN_HEADS(ItemID.RUNE_JAVELIN_HEADS, Skill.FLETCHING, "Javelin Heads"),
	AMETHYST_JAVELIN_HEADS(ItemID.AMETHYST_JAVELIN_HEADS, Skill.FLETCHING, "Javelin Heads"),
	DRAGON_JAVELIN_HEADS(ItemID.DRAGON_JAVELIN_HEADS, Skill.FLETCHING, "Javelin Heads"),
	/**
	 * Hunter
	 */
	H_LOGS(ItemID.LOGS, Skill.HUNTER, "Bird houses"),
	BIRD_HOUSE(ItemID.BIRD_HOUSE, Skill.HUNTER, "Bird houses"),
	H_OAK_LOGS(ItemID.OAK_LOGS, Skill.HUNTER, "Bird houses"),
	OAK_BIRD_HOUSE(ItemID.OAK_BIRD_HOUSE, Skill.HUNTER, "Bird houses"),
	H_WILLOW_LOGS(ItemID.WILLOW_LOGS, Skill.HUNTER, "Bird houses"),
	WILLOW_BIRD_HOUSE(ItemID.WILLOW_BIRD_HOUSE, Skill.HUNTER, "Bird houses"),
	H_TEAK_LOGS(ItemID.TEAK_LOGS, Skill.HUNTER, "Bird houses"),
	TEAK_BIRD_HOUSE(ItemID.TEAK_BIRD_HOUSE, Skill.HUNTER, "Bird houses"),
	H_MAPLE_LOGS(ItemID.MAPLE_LOGS, Skill.HUNTER, "Bird houses"),
	MAPLE_BIRD_HOUSE(ItemID.MAPLE_BIRD_HOUSE, Skill.HUNTER, "Bird houses"),
	H_MAHOGANY_LOGS(ItemID.MAHOGANY_LOGS, Skill.HUNTER, "Bird houses"),
	MAHOGANY_BIRD_HOUSE(ItemID.MAHOGANY_BIRD_HOUSE, Skill.HUNTER, "Bird houses"),
	H_YEW_LOGS(ItemID.YEW_LOGS, Skill.HUNTER, "Bird houses"),
	YEW_BIRD_HOUSE(ItemID.YEW_BIRD_HOUSE, Skill.HUNTER, "Bird houses"),
	H_MAGIC_LOGS(ItemID.MAGIC_LOGS, Skill.HUNTER, "Bird houses"),
	MAGIC_BIRD_HOUSE(ItemID.MAGIC_BIRD_HOUSE, Skill.HUNTER, "Bird houses"),
	H_REDWOOD_LOGS(ItemID.REDWOOD_LOGS, Skill.HUNTER, "Bird houses"),
	REDWOOD_BIRD_HOUSE(ItemID.REDWOOD_BIRD_HOUSE, Skill.HUNTER, "Bird houses"),
	/**
	 * Firemaking
	 */
	FM_LOGS(ItemID.LOGS, Skill.FIREMAKING, "logs"),
	FM_ACHEY_TREE_LOGS(ItemID.ACHEY_TREE_LOGS, Skill.FIREMAKING, "logs"),
	FM_OAK_LOGS(ItemID.OAK_LOGS, Skill.FIREMAKING, "logs"),
	FM_WILLOW_LOGS(ItemID.WILLOW_LOGS, Skill.FIREMAKING, "logs"),
	FM_TEAK_LOGS(ItemID.TEAK_LOGS, Skill.FIREMAKING, "logs"),
	FM_ARCTIC_PINE_LOGS(ItemID.ARCTIC_PINE_LOGS, Skill.FIREMAKING, "logs"),
	FM_MAPLE_LOGS(ItemID.MAPLE_LOGS, Skill.FIREMAKING, "logs"),
	FM_MAHOGANY_LOGS(ItemID.MAHOGANY_LOGS, Skill.FIREMAKING, "logs"),
	FM_YEW_LOGS(ItemID.YEW_LOGS, Skill.FIREMAKING, "logs"),
	FM_BLISTERWOOD_LOGS(ItemID.BLISTERWOOD_LOGS, Skill.FIREMAKING, "logs"),
	FM_MAGIC_LOGS(ItemID.MAGIC_LOGS, Skill.FIREMAKING, "logs"),
	FM_REDWOOD_LOGS(ItemID.REDWOOD_LOGS, Skill.FIREMAKING, "logs"),
	/**
	 * Thieving
	 */
	WINTER_SQIRK(ItemID.WINTER_SQIRK, Skill.THIEVING, "Sqirks"),
	WINTER_SQIRKJUICE(ItemID.WINTER_SQIRKJUICE, Skill.THIEVING, "Sqirks"),
	SPRING_SQIRK(ItemID.SPRING_SQIRK, Skill.THIEVING, "Sqirks"),
	SPRING_SQIRKJUICE(ItemID.SPRING_SQIRKJUICE, Skill.THIEVING, "Sqirks"),
	AUTUMN_SQIRK(ItemID.AUTUMN_SQIRK, Skill.THIEVING, "Sqirks"),
	AUTUMN_SQIRKJUICE(ItemID.AUTUMN_SQIRKJUICE, Skill.THIEVING, "Sqirks"),
	SUMMER_SQIRK(ItemID.SUMMER_SQIRK, Skill.THIEVING, "Sqirks"),
	SUMMER_SQIRKJUICE(ItemID.SUMMER_SQIRKJUICE, Skill.THIEVING, "Sqirks"),
	;

	private final int itemID;
	private final Skill skill;
	private final String category;
	private final int[] itemIds;
	private final boolean byDose;

	@Setter
	// Stores the item composition info we use since we don't operate on the game thread
	private ItemInfo itemInfo = null;

	@Setter
	private Activity selectedActivity;

	private static final Multimap<Skill, ExperienceItem> SKILL_MAP = ArrayListMultimap.create();
	private static final Map<Integer, ExperienceItem> ITEM_ID_MAP = new HashMap<>();

	static
	{
		for (ExperienceItem i : values())
		{
			Skill s = i.getSkill();
			SKILL_MAP.put(s, i);
			for (final int id : i.itemIds)
			{
				ITEM_ID_MAP.put(id, i);
			}
		}
	}

	ExperienceItem(int itemID, Skill skill)
	{
		this(itemID, skill, "NA");
	}

	ExperienceItem(int itemID, Skill skill, String category)
	{
		this.itemID = itemID;
		this.category = category;
		this.skill = skill;
		this.itemIds = new int[]{itemID};
		this.byDose = false;
	}

	ExperienceItem(Skill skill, boolean byDose, int... itemIds)
	{
		this.category = "NA";
		this.skill = skill;
		this.itemIds = itemIds;
		this.itemID = itemIds[0];
		this.byDose = byDose;
	}

	public static Collection<ExperienceItem> getBySkill(Skill skill)
	{
		Collection<ExperienceItem> items = SKILL_MAP.get(skill);
		if (items == null)
		{
			items = new ArrayList<>();
		}

		return items;
	}

	public static ExperienceItem getByItemId(int id)
	{
		return ITEM_ID_MAP.get(id);
	}

	/**
	 * Attaches the Item Composition to each ExperienceItem on client initial load
	 * May be a better way to do this
	 *
	 * @param m ItemManager
	 */
	public static void prepareItemCompositions(ItemManager m)
	{
		for (ExperienceItem i : values())
		{
			if (i.itemInfo != null)
			{
				return;
			}

			final ItemComposition c = m.getItemComposition(i.getItemID());
			i.itemInfo = new ItemInfo(c.getName(), c.isStackable());
		}
	}

	public boolean isStackable()
	{
		return itemInfo != null && itemInfo.isStackable();
	}
}

/*
 * Copyright (c) 2020, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.data;

import javax.annotation.Nullable;
import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
@Getter
public enum WidgetInventoryInfo
{
	FOSSIL_CHEST(605, 11),
	;

	private final int groupId;
	private final int childId;

	/**
	 * Gets the ID of the group-child pairing.
	 *
	 * @return the ID
	 */
	public int getId()
	{
		final int id = groupId << 16 | childId;;
		return id < 0 ? id : id * -1;
	}

	@Nullable
	public static WidgetInventoryInfo getByGroupId(final int id)
	{
		for (final WidgetInventoryInfo o : values())
		{
			if (o.getGroupId() == id)
			{
				return o;
			}
		}

		return null;
	}
}

/*
 * Copyright (c) 2019, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.data;

import com.google.common.collect.ImmutableMultimap;
import com.google.common.collect.ImmutableSortedSet;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
import javax.annotation.Nullable;
import lombok.Getter;
import net.runelite.api.ItemComposition;
import net.runelite.api.ItemID;
import net.runelite.api.Skill;
import net.runelite.client.game.ItemManager;
import thestonedturtle.bankedexperience.data.modifiers.ConsumptionModifier;
import thestonedturtle.bankedexperience.data.modifiers.Modifier;

/**
 * A specific in-game action that consumes bank-able item(s) and rewards {@link Skill} experience.
 * An `Activity` is linked to an {@link ExperienceItem} and the {@link Skill} it requires.
 */
@Getter
public enum Activity
{
	/**
	 * Herblore
	 */
	// Guam
	GUAM_POTION_UNF(ItemID.GUAM_POTION_UNF, "Unfinished Potion", 1, 0,
		ExperienceItem.GUAM_LEAF, Secondaries.UNFINISHED_POTION, new ItemStack(ItemID.GUAM_POTION_UNF, 1)),
	GUAM_TAR(ItemID.GUAM_TAR, "Guam tar", 19, 30,
		ExperienceItem.GUAM_LEAF, Secondaries.SWAMP_TAR, new ItemStack(ItemID.GUAM_TAR, 15)),
	ATTACK_POTION(ItemID.ATTACK_POTION3, "Attack potion", 3, 25,
		ExperienceItem.GUAM_LEAF_POTION_UNF, Secondaries.ATTACK_POTION, new ItemStack(ItemID.ATTACK_POTION3, 1)),
	// Marrentil
	MARRENTILL_POTION_UNF(ItemID.MARRENTILL_POTION_UNF, "Unfinished potion", 1, 0,
		ExperienceItem.MARRENTILL, Secondaries.UNFINISHED_POTION, new ItemStack(ItemID.MARRENTILL_POTION_UNF, 1)),
	MARRENTILL_TAR(ItemID.MARRENTILL_TAR, "Marrentill tar", 31, 42.5,
		ExperienceItem.MARRENTILL, Secondaries.SWAMP_TAR, new ItemStack(ItemID.MARRENTILL_TAR, 15)),
	ANTIPOISON(ItemID.ANTIPOISON3, "Antipoison", 5, 37.5,
		ExperienceItem.MARRENTILL_POTION_UNF, Secondaries.ANTIPOISON, new ItemStack(ItemID.ANTIPOISON3, 1)),
	// Tarromin
	TARROMIN_POTION_UNF(ItemID.TARROMIN_POTION_UNF, "Unfinished potion", 1, 0,
		ExperienceItem.TARROMIN, Secondaries.UNFINISHED_POTION, new ItemStack(ItemID.TARROMIN_POTION_UNF, 1)),
	TARROMIN_TAR(ItemID.TARROMIN_TAR, "Tarromin tar", 39, 55,
		ExperienceItem.TARROMIN, Secondaries.SWAMP_TAR, new ItemStack(ItemID.TARROMIN_TAR, 15)),
	STRENGTH_POTION(ItemID.STRENGTH_POTION3, "Strength potion", 12, 50,
		ExperienceItem.TARROMIN_POTION_UNF, Secondaries.STRENGTH_POTION, new ItemStack(ItemID.STRENGTH_POTION3, 1)),
	SERUM_207(ItemID.SERUM_207_3, "Serum 207", 15, 50,
		ExperienceItem.TARROMIN_POTION_UNF, Secondaries.SERUM_207, new ItemStack(ItemID.SERUM_207_3, 1)),
	// Harralander
	HARRALANDER_POTION_UNF(ItemID.HARRALANDER_POTION_UNF, "Unfinished potion", 1, 0,
		ExperienceItem.HARRALANDER, Secondaries.UNFINISHED_POTION, new ItemStack(ItemID.HARRALANDER_POTION_UNF, 1)),
	HARRALANDER_TAR(ItemID.HARRALANDER_TAR, "Harralander tar", 44, 72.5,
		ExperienceItem.HARRALANDER, Secondaries.SWAMP_TAR, new ItemStack(ItemID.HARRALANDER_TAR, 15)),
	COMPOST_POTION(ItemID.COMPOST_POTION3, "Compost potion", 21, 60,
		ExperienceItem.HARRALANDER_POTION_UNF, Secondaries.COMPOST_POTION, new ItemStack(ItemID.COMPOST_POTION3, 1)),
	RESTORE_POTION(ItemID.RESTORE_POTION3, "Restore potion", 22, 62.5,
		ExperienceItem.HARRALANDER_POTION_UNF, Secondaries.RESTORE_POTION, new ItemStack(ItemID.RESTORE_POTION3, 1)),
	ENERGY_POTION(ItemID.ENERGY_POTION3, "Energy potion", 26, 67.5,
		ExperienceItem.HARRALANDER_POTION_UNF, Secondaries.ENERGY_POTION, new ItemStack(ItemID.ENERGY_POTION3, 1)),
	COMBAT_POTION(ItemID.COMBAT_POTION3, "Combat potion", 36, 84,
		ExperienceItem.HARRALANDER_POTION_UNF, Secondaries.COMBAT_POTION, new ItemStack(ItemID.COMBAT_POTION3, 1)),
	GOADING_POTION(ItemID.GOADING_POTION3, "Goading potion", 54, 132,
		ExperienceItem.HARRALANDER_POTION_UNF, Secondaries.GOADING_POTION, new ItemStack(ItemID.GOADING_POTION3, 1)),
	// Ranarr Weed
	RANARR_POTION_UNF(ItemID.RANARR_POTION_UNF, "Unfinished potion", 30, 0,
		ExperienceItem.RANARR_WEED, Secondaries.UNFINISHED_POTION, new ItemStack(ItemID.RANARR_POTION_UNF, 1)),
	DEFENCE_POTION(ItemID.DEFENCE_POTION3, "Defence potion", 30, 75,
		ExperienceItem.RANARR_POTION_UNF, Secondaries.DEFENCE_POTION, new ItemStack(ItemID.DEFENCE_POTION3, 1)),
	PRAYER_POTION(ItemID.PRAYER_POTION3, "Prayer potion", 38, 87.5,
		ExperienceItem.RANARR_POTION_UNF, Secondaries.PRAYER_POTION, new ItemStack(ItemID.PRAYER_POTION3, 1)),
	// Toadflax
	TOADFLAX_POTION_UNF(ItemID.TOADFLAX_POTION_UNF, "Unfinished potion", 34, 0,
		ExperienceItem.TOADFLAX, Secondaries.UNFINISHED_POTION, new ItemStack(ItemID.TOADFLAX_POTION_UNF, 1)),
	AGILITY_POTION(ItemID.AGILITY_POTION3, "Agility potion", 34, 80,
		ExperienceItem.TOADFLAX_POTION_UNF, Secondaries.AGILITY_POTION, new ItemStack(ItemID.AGILITY_POTION3, 1)),
	ANTIDOTE_PLUS_UNF(ItemID.ANTIDOTE_UNF, "Antidote+ (unf)", 68, 0,
		ExperienceItem.TOADFLAX, Secondaries.COCONUT_MILK, new ItemStack(ItemID.ANTIDOTE_UNF, 1)),
	ANTIDOTE_PLUS(ItemID.ANTIDOTE4, "Antidote+", 68, 155,
		ExperienceItem.ANTIDOTE_PLUS_POTION_UNF, Secondaries.ANTIDOTE_PLUS, new ItemStack(ItemID.ANTIDOTE4, 1)),
	SARADOMIN_BREW(ItemID.SARADOMIN_BREW3, "Saradomin brew", 81, 180,
		ExperienceItem.TOADFLAX_POTION_UNF, Secondaries.SARADOMIN_BREW, new ItemStack(ItemID.SARADOMIN_BREW3, 1)),
	// Irit
	IRIT_POTION_UNF(ItemID.IRIT_POTION_UNF, "Unfinished potion", 45, 0,
		ExperienceItem.IRIT_LEAF, Secondaries.UNFINISHED_POTION, new ItemStack(ItemID.IRIT_POTION_UNF, 1)),
	SUPER_ATTACK(ItemID.SUPER_ATTACK3, "Super attack", 45, 100,
		ExperienceItem.IRIT_POTION_UNF, Secondaries.SUPER_ATTACK, new ItemStack(ItemID.SUPER_ATTACK3, 1)),
	SUPERANTIPOISON(ItemID.SUPERANTIPOISON3, "Superantipoison", 48, 106.3,
		ExperienceItem.IRIT_POTION_UNF, Secondaries.SUPERANTIPOISON, new ItemStack(ItemID.SUPERANTIPOISON3, 1)),
	ANTIDOTE_PLUS_PlUS_UNF(ItemID.ANTIDOTE_UNF_5951, "Antidote++ (unf)", 79, 0,
		ExperienceItem.IRIT_LEAF, Secondaries.COCONUT_MILK, new ItemStack(ItemID.ANTIDOTE_UNF_5951, 1)),
	ANTIDOTE_PLUS_PLUS(ItemID.ANTIDOTE4_5952, "Antidote++", 79, 177.5,
		ExperienceItem.ANTIDOTE_PLUS_PLUS_POTION_UNF, Secondaries.ANTIDOTE_PLUS_PLUS, new ItemStack(ItemID.ANTIDOTE4_5952, 1)),
	// Avantoe
	AVANTOE_POTION_UNF(ItemID.AVANTOE_POTION_UNF, "Unfinished potion", 50, 0,
		ExperienceItem.AVANTOE, Secondaries.UNFINISHED_POTION, new ItemStack(ItemID.AVANTOE_POTION_UNF, 1)),
	FISHING_POTION(ItemID.FISHING_POTION3, "Fishing potion", 50, 112.5,
		ExperienceItem.AVANTOE_POTION_UNF, Secondaries.FISHING_POTION, new ItemStack(ItemID.FISHING_POTION3, 1)),
	SUPER_ENERGY_POTION(ItemID.SUPER_ENERGY3_20549, "Super energy potion", 52, 117.5,
		ExperienceItem.AVANTOE_POTION_UNF, Secondaries.SUPER_ENERGY_POTION, new ItemStack(ItemID.SUPER_ENERGY3_20549, 1)),
	HUNTER_POTION(ItemID.HUNTER_POTION3, "Hunter potion", 53, 120,
		ExperienceItem.AVANTOE_POTION_UNF, Secondaries.HUNTER_POTION, new ItemStack(ItemID.HUNTER_POTION3, 1)),
	// Kwuarm
	KWUARM_POTION_UNF(ItemID.KWUARM_POTION_UNF, "Unfinished potion", 55, 0,
		ExperienceItem.KWUARM, Secondaries.UNFINISHED_POTION, new ItemStack(ItemID.KWUARM_POTION_UNF, 1)),
	SUPER_STRENGTH(ItemID.SUPER_STRENGTH3, "Super strength", 55, 125,
		ExperienceItem.KWUARM_POTION_UNF, Secondaries.SUPER_STRENGTH, new ItemStack(ItemID.SUPER_STRENGTH3, 1)),
	WEAPON_POISON(ItemID.WEAPON_POISON, "Weapon Poison", 60, 137.5,
		ExperienceItem.KWUARM_POTION_UNF, Secondaries.WEAPON_POISON, new ItemStack(ItemID.WEAPON_POISON, 1)),
	SNAPDRAGON_POTION_UNF(ItemID.SNAPDRAGON_POTION_UNF, "Unfinished potion", 63, 0,
		ExperienceItem.SNAPDRAGON, Secondaries.UNFINISHED_POTION, new ItemStack(ItemID.SNAPDRAGON_POTION_UNF, 1)),
	SUPER_RESTORE(ItemID.SUPER_RESTORE3, "Super restore", 63, 142.5,
		ExperienceItem.SNAPDRAGON_POTION_UNF, Secondaries.SUPER_RESTORE, new ItemStack(ItemID.SUPER_RESTORE3, 1)),
	SANFEW_SERUM(ItemID.SANFEW_SERUM3, "Sanfew serum", 65, 160,
		ExperienceItem.SNAPDRAGON_POTION_UNF, Secondaries.SANFEW_SERUM, new ItemStack(ItemID.SANFEW_SERUM3, 1)),
	// Cadantine
	CADANTINE_POTION_UNF(ItemID.CADANTINE_POTION_UNF, "Unfinished potion", 66, 0,
		ExperienceItem.CADANTINE, Secondaries.UNFINISHED_POTION, new ItemStack(ItemID.CADANTINE_POTION_UNF, 1)),
	CADANTINE_BLOOD_POTION_UNF(ItemID.CADANTINE_BLOOD_POTION_UNF, "Unfinished blood potion", 80, 0,
		ExperienceItem.CADANTINE, Secondaries.VIAL_OF_BLOOD, new ItemStack(ItemID.CADANTINE_BLOOD_POTION_UNF, 1)),
	SUPER_DEFENCE_POTION(ItemID.SUPER_DEFENCE3, "Super defence", 66, 150,
		ExperienceItem.CADANTINE_POTION_UNF, Secondaries.SUPER_DEFENCE_POTION, new ItemStack(ItemID.SUPER_DEFENCE3, 1)),
	BASTION_POTION(ItemID.BASTION_POTION3, "Bastion potion", 80, 155,
		ExperienceItem.CADANTINE_BLOOD_POTION_UNF, Secondaries.RANGING_POTION, new ItemStack(ItemID.BASTION_POTION3, 1)),
	BATTLEMAGE_POTION(ItemID.BATTLEMAGE_POTION3, "Battlemage potion", 80, 155,
		ExperienceItem.CADANTINE_BLOOD_POTION_UNF, Secondaries.MAGIC_POTION, new ItemStack(ItemID.BATTLEMAGE_POTION3, 1)),
	// Lantadyme
	LANTADYME_POTION_UNF(ItemID.LANTADYME_POTION_UNF, "Unfinished potion", 69, 0,
		ExperienceItem.LANTADYME, Secondaries.UNFINISHED_POTION, new ItemStack(ItemID.LANTADYME_POTION_UNF, 1)),
	ANTIFIRE_POTION(ItemID.ANTIFIRE_POTION3, "Anti-fire potion", 69, 157.5,
		ExperienceItem.LANTADYME_POTION_UNF, Secondaries.ANTIFIRE_POTION, new ItemStack(ItemID.ANTIFIRE_POTION3, 1)),
	MAGIC_POTION(ItemID.MAGIC_POTION3, "Magic potion", 76, 172.5,
		ExperienceItem.LANTADYME_POTION_UNF, Secondaries.MAGIC_POTION, new ItemStack(ItemID.MAGIC_POTION3, 1)),
	// Dwarf Weed
	DWARF_WEED_POTION_UNF(ItemID.DWARF_WEED_POTION_UNF, "Unfinished potion", 72, 0,
		ExperienceItem.DWARF_WEED, Secondaries.UNFINISHED_POTION, new ItemStack(ItemID.DWARF_WEED_POTION_UNF, 1)),
	RANGING_POTION(ItemID.RANGING_POTION3, "Ranging potion", 72, 162.5,
		ExperienceItem.DWARF_WEED_POTION_UNF, Secondaries.RANGING_POTION, new ItemStack(ItemID.RANGING_POTION3, 1)),
	ANCIENT_BREW(ItemID.ANCIENT_BREW3, "Ancient Brew", 85, 190,
		ExperienceItem.DWARF_WEED_POTION_UNF, Secondaries.ANCIENT_BREW, new ItemStack(ItemID.ANCIENT_BREW3, 1)),
	MENAPHITE_REMEDY(ItemID.MENAPHITE_REMEDY3, "Menaphite remedy", 88, 200,
		ExperienceItem.DWARF_WEED_POTION_UNF, Secondaries.MENAPHITE_REMEDY, new ItemStack(ItemID.MENAPHITE_REMEDY3, 1)),
	// Torstol
	TORSTOL_POTION_UNF(ItemID.TORSTOL_POTION_UNF, "Unfinished potion", 78, 0,
		ExperienceItem.TORSTOL, Secondaries.UNFINISHED_POTION, new ItemStack(ItemID.TORSTOL_POTION_UNF, 1)),
	SUPER_COMBAT_POTION(ItemID.SUPER_COMBAT_POTION4, "Super combat", 90, 150,
		ExperienceItem.TORSTOL, Secondaries.SUPER_COMBAT_POTION, new ItemStack(ItemID.SUPER_COMBAT_POTION4, 1)),
	ANTIVENOM_PLUS(ItemID.ANTIVENOM3_12915, "Anti-venom+", 94, 125,
		ExperienceItem.TORSTOL, Secondaries.ANTIVENOM_PLUS, new ItemStack(ItemID.ANTIVENOM3_12915, 1)),
	ZAMORAK_BREW(ItemID.ZAMORAK_BREW3, "Zamorak brew", 78, 175,
		ExperienceItem.TORSTOL_POTION_UNF, Secondaries.ZAMORAK_BREW, new ItemStack(ItemID.ZAMORAK_BREW3, 1)),
	SUPER_COMBAT_POTION_2(ItemID.SUPER_COMBAT_POTION4, "Super combat", 90, 150,
		ExperienceItem.TORSTOL_POTION_UNF, Secondaries.SUPER_COMBAT_POTION, new ItemStack(ItemID.SUPER_COMBAT_POTION4, 1)),
	EXTENDED_ANTIVENOM_PLUS(ItemID.EXTENDED_ANTIVENOM1, "Extended Anti-venom+", 94, 20,
		ExperienceItem.ARAXYTE_VENOM_SACK, Secondaries.EXTENDED_ANTIVENOM_PLUS, new ItemStack(ItemID.EXTENDED_ANTIVENOM1, 1)),
	// Huasca
	HUASCA_POTION_UNF(ItemID.HUASCA_POTION_UNF, "Unfinished potion", 58, 0,
		ExperienceItem.HUASCA, Secondaries.UNFINISHED_POTION, new ItemStack(ItemID.HUASCA_POTION_UNF, 1)),
	PRAYER_REGENERATION(ItemID.PRAYER_REGENERATION_POTION3, "Prayer regeneration", 58, 132,
		ExperienceItem.HUASCA_POTION_UNF, Secondaries.PRAYER_REGENERATION_POTION, new ItemStack(ItemID.PRAYER_REGENERATION_POTION3, 1)),
	// Cleaning Grimy Herbs
	CLEAN_GUAM(ItemID.GUAM_LEAF, "Clean guam", 3, 2.5,
		ExperienceItem.GRIMY_GUAM_LEAF, null, new ItemStack(ItemID.GUAM_LEAF, 1)),
	CLEAN_MARRENTILL(ItemID.MARRENTILL, "Clean marrentill", 5, 3.8,
		ExperienceItem.GRIMY_MARRENTILL, null, new ItemStack(ItemID.MARRENTILL, 1)),
	CLEAN_TARROMIN(ItemID.TARROMIN, "Clean tarromin", 11, 5,
		ExperienceItem.GRIMY_TARROMIN, null, new ItemStack(ItemID.TARROMIN, 1)),
	CLEAN_HARRALANDER(ItemID.HARRALANDER, "Clean harralander", 20, 6.3,
		ExperienceItem.GRIMY_HARRALANDER, null, new ItemStack(ItemID.HARRALANDER, 1)),
	CLEAN_RANARR_WEED(ItemID.RANARR_WEED, "Clean ranarr weed", 25, 7.5,
		ExperienceItem.GRIMY_RANARR_WEED, null, new ItemStack(ItemID.RANARR_WEED, 1)),
	CLEAN_TOADFLAX(ItemID.TOADFLAX, "Clean toadflax", 30, 8,
		ExperienceItem.GRIMY_TOADFLAX, null, new ItemStack(ItemID.TOADFLAX, 1)),
	CLEAN_IRIT_LEAF(ItemID.IRIT_LEAF, "Clean irit leaf", 40, 8.8,
		ExperienceItem.GRIMY_IRIT_LEAF, null, new ItemStack(ItemID.IRIT_LEAF, 1)),
	CLEAN_AVANTOE(ItemID.AVANTOE, "Clean avantoe", 48, 10,
		ExperienceItem.GRIMY_AVANTOE, null, new ItemStack(ItemID.AVANTOE, 1)),
	CLEAN_KWUARM(ItemID.KWUARM, "Clean kwuarm", 54, 11.3,
		ExperienceItem.GRIMY_KWUARM, null, new ItemStack(ItemID.KWUARM, 1)),
	CLEAN_SNAPDRAGON(ItemID.SNAPDRAGON, "Clean snapdragon", 59, 11.8,
		ExperienceItem.GRIMY_SNAPDRAGON, null, new ItemStack(ItemID.SNAPDRAGON, 1)),
	CLEAN_CADANTINE(ItemID.CADANTINE, "Clean cadantine", 65, 12.5,
		ExperienceItem.GRIMY_CADANTINE, null, new ItemStack(ItemID.CADANTINE, 1)),
	CLEAN_LANTADYME(ItemID.LANTADYME, "Clean lantadyme", 67, 13.1,
		ExperienceItem.GRIMY_LANTADYME, null, new ItemStack(ItemID.LANTADYME, 1)),
	CLEAN_DWARF_WEED(ItemID.DWARF_WEED, "Clean dwarf weed", 70, 13.8,
		ExperienceItem.GRIMY_DWARF_WEED, null, new ItemStack(ItemID.DWARF_WEED, 1)),
	CLEAN_TORSTOL(ItemID.TORSTOL, "Clean torstol", 75, 15,
		ExperienceItem.GRIMY_TORSTOL, null, new ItemStack(ItemID.TORSTOL, 1)),
	CLEAN_HUASCA(ItemID.HUASCA, "Clean huasca", 58, 11.8,
		ExperienceItem.GRIMY_HUASCA, null, new ItemStack(ItemID.HUASCA, 1)),
	// Cleaning Grimy Herbs but no XP (Nardah)
	NARDAH_CLEAN_GUAM(ItemID.GUAM_LEAF, "Nardah clean guam", 3, 0,
		ExperienceItem.GRIMY_GUAM_LEAF, null, new ItemStack(ItemID.GUAM_LEAF, 1)),
	NARDAH_CLEAN_MARRENTILL(ItemID.MARRENTILL, "Nardah clean marrentill", 5, 0,
		ExperienceItem.GRIMY_MARRENTILL, null, new ItemStack(ItemID.MARRENTILL, 1)),
	NARDAH_CLEAN_TARROMIN(ItemID.TARROMIN, "Nardah clean tarromin", 11, 0,
		ExperienceItem.GRIMY_TARROMIN, null, new ItemStack(ItemID.TARROMIN, 1)),
	NARDAH_CLEAN_HARRALANDER(ItemID.HARRALANDER, "Nardah clean harralander", 20, 0,
		ExperienceItem.GRIMY_HARRALANDER, null, new ItemStack(ItemID.HARRALANDER, 1)),
	NARDAH_CLEAN_RANARR_WEED(ItemID.RANARR_WEED, "Nardah clean ranarr weed", 25, 0,
		ExperienceItem.GRIMY_RANARR_WEED, null, new ItemStack(ItemID.RANARR_WEED, 1)),
	NARDAH_CLEAN_TOADFLAX(ItemID.TOADFLAX, "Nardah clean toadflax", 30, 0,
		ExperienceItem.GRIMY_TOADFLAX, null, new ItemStack(ItemID.TOADFLAX, 1)),
	NARDAH_CLEAN_IRIT_LEAF(ItemID.IRIT_LEAF, "Nardah clean irit leaf", 40, 0,
		ExperienceItem.GRIMY_IRIT_LEAF, null, new ItemStack(ItemID.IRIT_LEAF, 1)),
	NARDAH_CLEAN_AVANTOE(ItemID.AVANTOE, "Nardah clean avantoe", 48, 0,
		ExperienceItem.GRIMY_AVANTOE, null, new ItemStack(ItemID.AVANTOE, 1)),
	NARDAH_CLEAN_KWUARM(ItemID.KWUARM, "Nardah clean kwuarm", 54, 0,
		ExperienceItem.GRIMY_KWUARM, null, new ItemStack(ItemID.KWUARM, 1)),
	NARDAH_CLEAN_SNAPDRAGON(ItemID.SNAPDRAGON, "Nardah clean snapdragon", 59, 0,
		ExperienceItem.GRIMY_SNAPDRAGON, null, new ItemStack(ItemID.SNAPDRAGON, 1)),
	NARDAH_CLEAN_CADANTINE(ItemID.CADANTINE, "Nardah clean cadantine", 65, 0,
		ExperienceItem.GRIMY_CADANTINE, null, new ItemStack(ItemID.CADANTINE, 1)),
	NARDAH_CLEAN_LANTADYME(ItemID.LANTADYME, "Nardah clean lantadyme", 67, 0,
		ExperienceItem.GRIMY_LANTADYME, null, new ItemStack(ItemID.LANTADYME, 1)),
	NARDAH_CLEAN_DWARF_WEED(ItemID.DWARF_WEED, "Nardah clean dwarf weed", 70, 0,
		ExperienceItem.GRIMY_DWARF_WEED, null, new ItemStack(ItemID.DWARF_WEED, 1)),
	NARDAH_CLEAN_TORSTOL(ItemID.TORSTOL, "Nardah clean torstol", 75, 0,
		ExperienceItem.GRIMY_TORSTOL, null, new ItemStack(ItemID.TORSTOL, 1)),
	NARDAH_CLEAN_HUASCA(ItemID.HUASCA, "Nardah clean huasca", 58, 0,
		ExperienceItem.GRIMY_HUASCA, null, new ItemStack(ItemID.HUASCA, 1)),
	// Degrime SPell
	DEGRIME_GUAM(ItemID.GUAM_LEAF, "Degrime guam", 3, 1.2,
		ExperienceItem.GRIMY_GUAM_LEAF, Secondaries.DEGRIME, new ItemStack(ItemID.GUAM_LEAF, 1)),
	DEGRIME_MARRENTILL(ItemID.MARRENTILL, "Degrime marrentill", 5, 1.9,
		ExperienceItem.GRIMY_MARRENTILL, Secondaries.DEGRIME, new ItemStack(ItemID.MARRENTILL, 1)),
	DEGRIME_TARROMIN(ItemID.TARROMIN, "Degrime tarromin", 11, 2.5,
		ExperienceItem.GRIMY_TARROMIN, Secondaries.DEGRIME, new ItemStack(ItemID.TARROMIN, 1)),
	DEGRIME_HARRALANDER(ItemID.HARRALANDER, "Degrime harralander", 20, 3.1,
		ExperienceItem.GRIMY_HARRALANDER, Secondaries.DEGRIME, new ItemStack(ItemID.HARRALANDER, 1)),
	DEGRIME_RANARR_WEED(ItemID.RANARR_WEED, "Degrime ranarr weed", 25, 3.7,
		ExperienceItem.GRIMY_RANARR_WEED, Secondaries.DEGRIME, new ItemStack(ItemID.RANARR_WEED, 1)),
	DEGRIME_TOADFLAX(ItemID.TOADFLAX, "Degrime toadflax", 30, 4.0,
		ExperienceItem.GRIMY_TOADFLAX, Secondaries.DEGRIME, new ItemStack(ItemID.TOADFLAX, 1)),
	DEGRIME_IRIT_LEAF(ItemID.IRIT_LEAF, "Degrime irit leaf", 40, 4.4,
		ExperienceItem.GRIMY_IRIT_LEAF, Secondaries.DEGRIME, new ItemStack(ItemID.IRIT_LEAF, 1)),
	DEGRIME_AVANTOE(ItemID.AVANTOE, "Degrime avantoe", 48, 5.0,
		ExperienceItem.GRIMY_AVANTOE, Secondaries.DEGRIME, new ItemStack(ItemID.AVANTOE, 1)),
	DEGRIME_KWUARM(ItemID.KWUARM, "Degrime kwuarm", 54, 5.6,
		ExperienceItem.GRIMY_KWUARM, Secondaries.DEGRIME, new ItemStack(ItemID.KWUARM, 1)),
	DEGRIME_SNAPDRAGON(ItemID.SNAPDRAGON, "Degrime snapdragon", 59, 5.9,
		ExperienceItem.GRIMY_SNAPDRAGON, Secondaries.DEGRIME, new ItemStack(ItemID.SNAPDRAGON, 1)),
	DEGRIME_CADANTINE(ItemID.CADANTINE, "Degrime cadantine", 65, 6.2,
		ExperienceItem.GRIMY_CADANTINE, Secondaries.DEGRIME, new ItemStack(ItemID.CADANTINE, 1)),
	DEGRIME_LANTADYME(ItemID.LANTADYME, "Degrime lantadyme", 67, 6.5,
		ExperienceItem.GRIMY_LANTADYME, Secondaries.DEGRIME, new ItemStack(ItemID.LANTADYME, 1)),
	DEGRIME_DWARF_WEED(ItemID.DWARF_WEED, "Degrime dwarf weed", 70, 6.9,
		ExperienceItem.GRIMY_DWARF_WEED, Secondaries.DEGRIME, new ItemStack(ItemID.DWARF_WEED, 1)),
	DEGRIME_TORSTOL(ItemID.TORSTOL, "Degrime torstol", 75, 7.5,
		ExperienceItem.GRIMY_TORSTOL, Secondaries.DEGRIME, new ItemStack(ItemID.TORSTOL, 1)),
	DEGRIME_HUASCA(ItemID.HUASCA, "Degrime huasca", 58, 5.9,
		ExperienceItem.GRIMY_HUASCA, Secondaries.DEGRIME, new ItemStack(ItemID.HUASCA, 1)),
	// Weapon Poison
	WEAPON_POISON_PLUS_UNF(ItemID.WEAPON_POISON_UNF, "Weapon poison+ (unf)", 73, 0,
		ExperienceItem.CACTUS_SPINE, Secondaries.COCONUT_MILK, new ItemStack(ItemID.WEAPON_POISON_UNF, 1)),
	WEAPON_POISON_PLUS(ItemID.WEAPON_POISON_5937, "Weapon poison(+)", 73, 190,
		ExperienceItem.WEAPON_POISON_PLUS_UNF, Secondaries.WEAPON_POISON_PLUS, new ItemStack(ItemID.WEAPON_POISON_5937, 1)),
	WEAPON_POISON_PLUS_PLUS_UNF(ItemID.WEAPON_POISON_UNF_5939, "Weapon poison++ (unf)", 82, 0,
		ExperienceItem.CAVE_NIGHTSHADE, Secondaries.COCONUT_MILK, new ItemStack(ItemID.WEAPON_POISON_UNF_5939, 1)),
	WEAPON_POISON_PLUS_PLUS_UNF2(ItemID.WEAPON_POISON_UNF_5939, "Weapon poison++ (unf)", 82, 0,
		ExperienceItem.NIGHTSHADE, Secondaries.COCONUT_MILK, new ItemStack(ItemID.WEAPON_POISON_UNF_5939, 1)),
	WEAPON_POISON_PLUS_PLUS(ItemID.WEAPON_POISON_5940, "Weapon poison(++)", 82, 190,
		ExperienceItem.WEAPON_POISON_PLUS_PLUS_UNF, Secondaries.WEAPON_POISON_PLUS_PLUS, new ItemStack(ItemID.WEAPON_POISON_5940, 1)),
	// Other
	AMYLASE_CRYSTAL(ItemID.AMYLASE_CRYSTAL, "Convert to crystals", 0, 0,
		ExperienceItem.MARK_OF_GRACE, null, new ItemStack(ItemID.AMYLASE_CRYSTAL, 10)),
	FORGOTTEN_BREW(ItemID.FORGOTTEN_BREW1, "Forgotten Brew", 91, 36,
		ExperienceItem.ANCIENT_BREW, Secondaries.FORGOTTEN_BREW, new ItemStack(ItemID.FORGOTTEN_BREW1, 1)),
	STAMINA_POTION(ItemID.STAMINA_POTION1, "Stamina potion", 77, 25.5,
		ExperienceItem.AMYLASE_CRYSTAL, Secondaries.STAMINA_POTION, new ItemStack(ItemID.STAMINA_POTION1, 1)),
	EXTENDED_ANTIFIRE(ItemID.EXTENDED_ANTIFIRE1, "Extended antifire", 84, 27.5,
		ExperienceItem.LAVA_SCALE_SHARD, Secondaries.EXTENDED_ANTIFIRE, new ItemStack(ItemID.EXTENDED_ANTIFIRE1, 1)),
	EXTENDED_SUPER_ANTIFIRE(ItemID.EXTENDED_SUPER_ANTIFIRE1, "Extended super antifire", 98, 40,
		ExperienceItem.LAVA_SCALE_SHARD, Secondaries.EXTENDED_SUPER_ANTIFIRE, new ItemStack(ItemID.EXTENDED_SUPER_ANTIFIRE1, 1)),
	EXTENDED_SUPER_ANTIFIRE_4_DOSE(ItemID.EXTENDED_ANTIFIRE4, "Extended super antifire", 98, 180,
		ExperienceItem.EXTENDED_ANTIFIRE4, Secondaries.CRUSHED_SUPERIOR_DRAGON_BONES, new ItemStack(ItemID.EXTENDED_SUPER_ANTIFIRE4, 1)),
	ANTIVENOM(ItemID.ANTIVENOM1, "Antivenom", 87, 30,
		ExperienceItem.ANTIVENOM, Secondaries.ANTIVENOM, new ItemStack(ItemID.ANTIVENOM1, 1)),
	/**
	 * Construction
	 */
	PLANK(ItemID.PLANK, "Regular Plank", 1, 0,
		ExperienceItem.LOGS, Secondaries.COINS_100, new ItemStack(ItemID.PLANK, 1)),
	PLANKS(ItemID.PLANK, "Regular plank products", 1, 29,
		ExperienceItem.PLANK, null, null),
	OAK_PLANK(ItemID.OAK_PLANK, "Oak Plank", 15, 0,
		ExperienceItem.OAK_LOGS, Secondaries.COINS_250, new ItemStack(ItemID.OAK_PLANK, 1)),
	OAK_PLANKS(ItemID.OAK_PLANK, "Oak products", 15, 60,
		ExperienceItem.OAK_PLANK, null, null),
	TEAK_PLANK(ItemID.TEAK_PLANK, "Teak Plank", 35, 0,
		ExperienceItem.TEAK_LOGS, Secondaries.COINS_500, new ItemStack(ItemID.TEAK_PLANK, 1)),
	TEAK_PLANKS(ItemID.TEAK_PLANK, "Teak products", 35, 90,
		ExperienceItem.TEAK_PLANK, null, null),
	MYTHICAL_CAPE(ItemID.MYTHICAL_CAPE, "Mythical cape racks", 47, 123.33,
		ExperienceItem.TEAK_PLANK, null, null),
	MAHOGANY_PLANK(ItemID.MAHOGANY_PLANK, "Mahogany Plank", 50, 0,
		ExperienceItem.MAHOGANY_LOGS, Secondaries.COINS_1500, new ItemStack(ItemID.MAHOGANY_PLANK, 1)),
	MAHOGANY_PLANKS(ItemID.MAHOGANY_PLANK, "Mahogany products", 50, 140,
		ExperienceItem.MAHOGANY_PLANK, null, null),
	PLANK_MAKE(ItemID.ASTRAL_RUNE, "Regular Plank Make", 1, 0,
		ExperienceItem.LOGS, Secondaries.PLANK_MAKE_REGULAR, new ItemStack(ItemID.PLANK, 1)),
	OAK_PLANK_MAKE(ItemID.ASTRAL_RUNE, "Oak Plank Make", 15, 0,
		ExperienceItem.OAK_LOGS, Secondaries.PLANK_MAKE_OAK, new ItemStack(ItemID.OAK_PLANK, 1)),
	TEAK_PLANK_MAKE(ItemID.ASTRAL_RUNE, "Teak Plank Make", 35, 0,
		ExperienceItem.TEAK_LOGS, Secondaries.PLANK_MAKE_TEAK, new ItemStack(ItemID.TEAK_PLANK, 1)),
	MAHOGANY_PLANK_MAKE(ItemID.ASTRAL_RUNE, "Mahogany Plank Make", 50, 0,
		ExperienceItem.MAHOGANY_LOGS, Secondaries.PLANK_MAKE_MAHOGANY, new ItemStack(ItemID.MAHOGANY_PLANK, 1)),
	LONG_BONE(ItemID.LONG_BONE, "Long Bone", 30, 4500, ExperienceItem.LONG_BONE, null, null),
	CURVED_BONE(ItemID.CURVED_BONE, "Curved Bone", 30, 6750, ExperienceItem.CURVED_BONE, null, null),
	// Mahogany Homes XP rates are calculated utilizing the averages as generated by the wiki
	// https://oldschool.runescape.wiki/w/Mahogany_Homes
	MAHOGANY_HOMES_PLANK(ItemID.HOSIDIUS_BLUEPRINTS, "Mahogany Homes", 1, 93.650, true,
		ExperienceItem.PLANK, Secondaries.STEEL_BAR_PLANK, null),
	MAHOGANY_HOMES_OAK(ItemID.HOSIDIUS_BLUEPRINTS, "Mahogany Homes", 20, 200.003, true,
		ExperienceItem.OAK_PLANK, Secondaries.STEEL_BAR_OAK, null),
	MAHOGANY_HOMES_TEAK(ItemID.HOSIDIUS_BLUEPRINTS, "Mahogany Homes", 50, 287.852, true,
		ExperienceItem.TEAK_PLANK, Secondaries.STEEL_BAR_TEAK, null),
	MAHOGANY_HOMES_MAHOGANY(ItemID.HOSIDIUS_BLUEPRINTS, "Mahogany Homes", 70, 346.120, true,
		ExperienceItem.MAHOGANY_PLANK, Secondaries.STEEL_BAR_MAHOGANY, null),
	/**
	 * Prayer
	 */
	BONES(ItemID.BONES, "Bones", 1, 4.5,
		ExperienceItem.BONES, null, null),
	WOLF_BONES(ItemID.WOLF_BONES, "Wolf bones", 1, 4.5,
		ExperienceItem.WOLF_BONES, null, null),
	BURNT_BONES(ItemID.BURNT_BONES, "Burnt bones", 1, 4.5,
		ExperienceItem.BURNT_BONES, null, null),
	MONKEY_BONES(ItemID.MONKEY_BONES, "Monkey bones", 1, 5.0,
		ExperienceItem.MONKEY_BONES, null, null),
	BAT_BONES(ItemID.BAT_BONES, "Bat bones", 1, 5.3,
		ExperienceItem.BAT_BONES, null, null),
	JOGRE_BONES(ItemID.JOGRE_BONES, "Jogre bones", 1, 15.0,
		ExperienceItem.JOGRE_BONES, null, null),
	BIG_BONES(ItemID.BIG_BONES, "Big bones", 1, 15.0,
		ExperienceItem.BIG_BONES, null, null),
	ZOGRE_BONES(ItemID.ZOGRE_BONES, "Zogre bones", 1, 22.5,
		ExperienceItem.ZOGRE_BONES, null, null),
	SHAIKAHAN_BONES(ItemID.SHAIKAHAN_BONES, "Shaikahan bones", 1, 25.0,
		ExperienceItem.SHAIKAHAN_BONES, null, null),
	BABYDRAGON_BONES(ItemID.BABYDRAGON_BONES, "Babydragon bones", 1, 30.0,
		ExperienceItem.BABYDRAGON_BONES, null, null),
	WYVERN_BONES(ItemID.WYVERN_BONES, "Wyvern bones", 1, 72.0,
		ExperienceItem.WYVERN_BONES, null, null),
	DRAGON_BONES(ItemID.DRAGON_BONES, "Dragon bones", 1, 72.0,
		ExperienceItem.DRAGON_BONES, null, null),
	FAYRG_BONES(ItemID.FAYRG_BONES, "Fayrg bones", 1, 84.0,
		ExperienceItem.FAYRG_BONES, null, null),
	LAVA_DRAGON_BONES(ItemID.LAVA_DRAGON_BONES, "Lava dragon bones", 1, 85.0,
		ExperienceItem.LAVA_DRAGON_BONES, null, null),
	RAURG_BONES(ItemID.RAURG_BONES, "Raurg bones", 1, 96.0,
		ExperienceItem.RAURG_BONES, null, null),
	DAGANNOTH_BONES(ItemID.DAGANNOTH_BONES, "Dagannoth bones", 1, 125.0,
		ExperienceItem.DAGANNOTH_BONES, null, null),
	OURG_BONES(ItemID.OURG_BONES, "Ourg bones", 1, 140.0,
		ExperienceItem.OURG_BONES, null, null),
	SUPERIOR_DRAGON_BONES(ItemID.SUPERIOR_DRAGON_BONES, "Superior dragon bones", 70, 150.0,
		ExperienceItem.SUPERIOR_DRAGON_BONES, null, null),
	WYRM_BONES(ItemID.WYRM_BONES, "Wyrm bones", 1, 50.0,
		ExperienceItem.WYRM_BONES, null, null),
	DRAKE_BONES(ItemID.DRAKE_BONES, "Drake bones", 1, 80.0,
		ExperienceItem.DRAKE_BONES, null, null),
	HYDRA_BONES(ItemID.HYDRA_BONES, "Hydra bones", 1, 110.0,
		ExperienceItem.HYDRA_BONES, null, null),
	// Wyrmling bones behave slightly differently than other bones, so modifiers cannot apply correctly
	WYRMLING_BONES_BURY(ItemID.WYRMLING_BONES, "Bury", 1, 21.0,
		ExperienceItem.WYRMLING_BONES, null, null),
	WYRMLING_BONES_SINISTER(ItemID.WYRMLING_BONES, "Sinister offering", 1, 63.0,
		ExperienceItem.WYRMLING_BONES, null, null),
	WYRMLING_BONES_GILDED(ItemID.WYRMLING_BONES, "Lit Gilded altar", 1, 73.5,
		ExperienceItem.WYRMLING_BONES, null, null),
	WYRMLING_BONES_ECTOFUNTUS(ItemID.WYRMLING_BONES, "Ectofuntus", 1, 120.0,
		ExperienceItem.WYRMLING_BONES, null, null),
	WYRMLING_BONES_WILDERNESS(ItemID.WYRMLING_BONES, "Wildy altar", 1, 147.0,
		ExperienceItem.WYRMLING_BONES, null, null),
	// Libation bowl (blessed bone shards + bless/sunfire wine)
	WYRMLING_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.WYRMLING_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 21)),
	BLESSED_WYRMLING_BONES_TO_SHARDS(ItemID.BLESSED_BABYWYRM_BONES, "Blessed bone shards", 1, 0.0,
		ExperienceItem.BLESSED_BABYWYRM_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 21)),
	BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 4)),
	BLESSED_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.BLESSED_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 4)),
	BAT_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.BAT_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 5)),
	BLESSED_BAT_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.BLESSED_BAT_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 5)),
	BIG_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.BIG_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 12)),
	BLESSED_BIG_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.BLESSED_BIG_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 12)),
	ZOGRE_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.ZOGRE_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 18)),
	BLESSED_ZOGRE_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.BLESSED_ZOGRE_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 18)),
	BABYDRAGON_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.BABYDRAGON_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 24)),
	BLESSED_BABYDRAGON_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.BLESSED_BABYDRAGON_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 24)),
	WYRM_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.WYRM_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 42)),
	BLESSED_WYRM_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.BLESSED_WYRM_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 42)),
	WYVERN_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.WYVERN_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 58)),
	BLESSED_WYVERN_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.BLESSED_WYVERN_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 58)),
	DRAGON_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.DRAGON_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 58)),
	BLESSED_DRAGON_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.BLESSED_DRAGON_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 58)),
	DRAKE_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.DRAKE_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 64)),
	BLESSED_DRAKE_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.BLESSED_DRAKE_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 64)),
	FAYRG_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.FAYRG_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 67)),
	BLESSED_FAYRG_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.BLESSED_FAYRG_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 67)),
	LAVA_DRAGON_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.LAVA_DRAGON_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 68)),
	BLESSED_LAVA_DRAGON_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.BLESSED_LAVA_DRAGON_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 68)),
	RAURG_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.RAURG_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 77)),
	BLESSED_RAURG_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.BLESSED_RAURG_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 77)),
	HYDRA_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.HYDRA_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 93)),
	BLESSED_HYDRA_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.BLESSED_HYDRA_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 93)),
	DAGANNOTH_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.DAGANNOTH_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 100)),
	BLESSED_DAGANNOTH_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.DAGANNOTH_BONES_29376, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 100)),
	OURG_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.OURG_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 115)),
	BLESSED_OURG_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.BLESSED_OURG_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 115)),
	SUPERIOR_DRAGON_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.SUPERIOR_DRAGON_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 121)),
	BLESSED_SUPERIOR_DRAGON_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.BLESSED_SUPERIOR_DRAGON_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 121)),
	SUNKISSED_BONES_TO_SHARDS(ItemID.BLESSED_BONE_SHARDS, "Blessed bone shards", 0, 0.0,
		ExperienceItem.SUNKISSED_BONES, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 45)),
	BLESSED_BONE_STATUETTE(ItemID.BLESSED_BONE_STATUETTE, "Bone statuette", 0, 0.0,
		ExperienceItem.BLESSED_BONE_STATUETTE, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 125)),
	BLESSED_BONE_STATUETTE_29340(ItemID.BLESSED_BONE_STATUETTE_29340, "Bone statuette", 0, 0.0,
		ExperienceItem.BLESSED_BONE_STATUETTE_29340, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 125)),
	BLESSED_BONE_STATUETTE_29342(ItemID.BLESSED_BONE_STATUETTE_29342, "Bone statuette", 0, 0.0,
		ExperienceItem.BLESSED_BONE_STATUETTE_29342, null, new ItemStack(ItemID.BLESSED_BONE_SHARDS, 125)),
	BLESSED_BONE_SHARDS_WINE(ItemID.JUG_OF_BLESSED_WINE, "Blessed wine", 30, 5.0,
		ExperienceItem.BLESSED_BONE_SHARDS, Secondaries.BLESSED_BONE_SHARDS_JUG_OF_BLESSED_WINE, null),
	BLESSED_BONE_SHARDS_SUNFIRE_WINE(ItemID.JUG_OF_BLESSED_SUNFIRE_WINE, "Sunfire wine", 30, 6.0,
		ExperienceItem.BLESSED_BONE_SHARDS, Secondaries.BLESSED_BONE_SHARDS_JUG_OF_BLESSED_SUNFIRE_WINE, null),
	// Bonemeal
	BONEMEAL(ItemID.BONEMEAL, "Bonemeal", 1, 18,
		ExperienceItem.BONEMEAL, Secondaries.BUCKET_OF_SLIME, null),
	WOLF_BONEMEAL(ItemID.WOLF_BONEMEAL, "Wolf bonemeal", 1, 18,
		ExperienceItem.WOLF_BONEMEAL, Secondaries.BUCKET_OF_SLIME, null),
	BURNT_BONEMEAL(ItemID.BURNT_BONEMEAL, "Burnt bonemeal", 1, 18,
		ExperienceItem.BURNT_BONEMEAL, Secondaries.BUCKET_OF_SLIME, null),
	MONKEY_BONEMEAL(ItemID.MONKEY_BONEMEAL, "Monkey bonemeal", 1, 20,
		ExperienceItem.MONKEY_BONEMEAL, Secondaries.BUCKET_OF_SLIME, null),
	BAT_BONEMEAL(ItemID.BAT_BONEMEAL, "Bat bonemeal", 1, 21.2,
		ExperienceItem.BAT_BONEMEAL, Secondaries.BUCKET_OF_SLIME, null),
	JOGRE_BONEMEAL(ItemID.JOGRE_BONEMEAL, "Jogre bonemeal", 1, 60,
		ExperienceItem.JOGRE_BONEMEAL, Secondaries.BUCKET_OF_SLIME, null),
	BIG_BONEMEAL(ItemID.BIG_BONEMEAL, "Big bonemeal", 1, 60,
		ExperienceItem.BIG_BONEMEAL, Secondaries.BUCKET_OF_SLIME, null),
	ZOGRE_BONEMEAL(ItemID.ZOGRE_BONEMEAL, "Zogre bonemeal", 1, 90,
		ExperienceItem.ZOGRE_BONEMEAL, Secondaries.BUCKET_OF_SLIME, null),
	SHAIKAHAN_BONEMEAL(ItemID.SHAIKAHAN_BONEMEAL, "Shaikahan bonemeal", 1, 100,
		ExperienceItem.SHAIKAHAN_BONEMEAL, Secondaries.BUCKET_OF_SLIME, null),
	BABYDRAGON_BONEMEAL(ItemID.BABY_DRAGON_BONEMEAL, "Babydragon bonemeal", 1, 120,
		ExperienceItem.BABYDRAGON_BONEMEAL, Secondaries.BUCKET_OF_SLIME, null),
	WYVERN_BONEMEAL(ItemID.WYVERN_BONEMEAL, "Wyvern bonemeal", 1, 288,
		ExperienceItem.WYVERN_BONEMEAL, Secondaries.BUCKET_OF_SLIME, null),
	DRAGON_BONEMEAL(ItemID.DRAGON_BONEMEAL, "Dragon bonemeal", 1, 288,
		ExperienceItem.DRAGON_BONEMEAL, Secondaries.BUCKET_OF_SLIME, null),
	FAYRG_BONEMEAL(ItemID.FAYRG_BONEMEAL, "Fayrg bonemeal", 1, 336,
		ExperienceItem.FAYRG_BONEMEAL, Secondaries.BUCKET_OF_SLIME, null),
	LAVA_DRAGON_BONEMEAL(ItemID.LAVA_DRAGON_BONEMEAL, "Lava dragon bonemeal", 1, 340,
		ExperienceItem.LAVA_DRAGON_BONEMEAL, Secondaries.BUCKET_OF_SLIME, null),
	RAURG_BONEMEAL(ItemID.RAURG_BONEMEAL, "Raurg bonemeal", 1, 384,
		ExperienceItem.RAURG_BONEMEAL, Secondaries.BUCKET_OF_SLIME, null),
	DAGANNOTH_BONEMEAL(ItemID.DAGANNOTHKING_BONEMEAL, "Dagannoth bonemeal", 1, 500,
		ExperienceItem.DAGANNOTH_BONEMEAL, Secondaries.BUCKET_OF_SLIME, null),
	OURG_BONEMEAL(ItemID.OURG_BONEMEAL, "Ourg bonemeal", 1, 560,
		ExperienceItem.OURG_BONEMEAL, Secondaries.BUCKET_OF_SLIME, null),
	SUPERIOR_DRAGON_BONEMEAL(ItemID.SUPERIOR_DRAGON_BONEMEAL, "Superior dragon bonemeal", 70, 600,
		ExperienceItem.SUPERIOR_DRAGON_BONEMEAL, Secondaries.BUCKET_OF_SLIME, null),
	WYRM_BONEMEAL(ItemID.WYRM_BONEMEAL, "Wyrm bonemeal", 1, 200,
		ExperienceItem.WYRM_BONEMEAL, Secondaries.BUCKET_OF_SLIME, null),
	DRAKE_BONEMEAL(ItemID.DRAKE_BONEMEAL, "Drake bonemeal", 1, 320,
		ExperienceItem.DRAKE_BONEMEAL, Secondaries.BUCKET_OF_SLIME, null),
	HYDRA_BONEMEAL(ItemID.HYDRA_BONEMEAL, "Hydra bonemeal", 1, 440,
		ExperienceItem.HYDRA_BONEMEAL, Secondaries.BUCKET_OF_SLIME, null),
	// Shade Remains (Pyre Logs)
	// TODO: Fix this for the different log types and the mory hard diary
//	LOAR_REMAINS(ItemID.LOAR_REMAINS, "Loar remains", 1, 33.0,
//		ExperienceItem.LOAR_REMAINS, null, null),
//	PHRIN_REMAINS(ItemID.PHRIN_REMAINS, "Phrin remains", 1, 46.5,
//		ExperienceItem.PHRIN_REMAINS, null, null),
//	RIYL_REMAINS(ItemID.RIYL_REMAINS, "Riyl remains", 1, 59.5,
//		ExperienceItem.RIYL_REMAINS, null, null),
//	ASYN_REMAINS(ItemID.ASYN_REMAINS, "Asyn remains", 1, 82.5,
//		ExperienceItem.ASYN_REMAINS, null, null),
//	FIYR_REMAINS(ItemID.FIYR_REMAINS, "Fiyre remains", 1, 84.0,
//		ExperienceItem.FIYR_REMAINS, null, null),
	// Ensouled Heads
	ENSOULED_GOBLIN_HEAD(ItemID.ENSOULED_GOBLIN_HEAD_13448, "Ensouled goblin head", 1, 130.0,
		ExperienceItem.ENSOULED_GOBLIN_HEAD, Secondaries.BASIC_REANIMATION, null),
	ENSOULED_MONKEY_HEAD(ItemID.ENSOULED_MONKEY_HEAD_13451, "Ensouled monkey head", 1, 182.0,
		ExperienceItem.ENSOULED_MONKEY_HEAD, Secondaries.BASIC_REANIMATION, null),
	ENSOULED_IMP_HEAD(ItemID.ENSOULED_IMP_HEAD_13454, "Ensouled imp head", 1, 286.0,
		ExperienceItem.ENSOULED_IMP_HEAD, Secondaries.BASIC_REANIMATION, null),
	ENSOULED_MINOTAUR_HEAD(ItemID.ENSOULED_MINOTAUR_HEAD_13457, "Ensouled minotaur head", 1, 364.0,
		ExperienceItem.ENSOULED_MINOTAUR_HEAD, Secondaries.BASIC_REANIMATION, null),
	ENSOULED_SCORPION_HEAD(ItemID.ENSOULED_SCORPION_HEAD_13460, "Ensouled scorpion head", 1, 454.0,
		ExperienceItem.ENSOULED_SCORPION_HEAD, Secondaries.BASIC_REANIMATION, null),
	ENSOULED_BEAR_HEAD(ItemID.ENSOULED_BEAR_HEAD_13463, "Ensouled bear head", 1, 480.0,
		ExperienceItem.ENSOULED_BEAR_HEAD, Secondaries.BASIC_REANIMATION, null),
	ENSOULED_UNICORN_HEAD(ItemID.ENSOULED_UNICORN_HEAD_13466, "Ensouled unicorn head", 1, 494.0,
		ExperienceItem.ENSOULED_UNICORN_HEAD, Secondaries.BASIC_REANIMATION, null),
	ENSOULED_DOG_HEAD(ItemID.ENSOULED_DOG_HEAD_13469, "Ensouled dog head", 1, 520.0,
		ExperienceItem.ENSOULED_DOG_HEAD, Secondaries.ADEPT_REANIMATION, null),
	ENSOULED_CHAOS_DRUID_HEAD(ItemID.ENSOULED_CHAOS_DRUID_HEAD_13472, "Ensouled druid head", 1, 584.0,
		ExperienceItem.ENSOULED_CHAOS_DRUID_HEAD, Secondaries.ADEPT_REANIMATION, null),
	ENSOULED_GIANT_HEAD(ItemID.ENSOULED_GIANT_HEAD_13475, "Ensouled giant head", 1, 650.0,
		ExperienceItem.ENSOULED_GIANT_HEAD, Secondaries.ADEPT_REANIMATION, null),
	ENSOULED_OGRE_HEAD(ItemID.ENSOULED_OGRE_HEAD_13478, "Ensouled ogre head", 1, 716.0,
		ExperienceItem.ENSOULED_OGRE_HEAD, Secondaries.ADEPT_REANIMATION, null),
	ENSOULED_ELF_HEAD(ItemID.ENSOULED_ELF_HEAD_13481, "Ensouled elf head", 1, 754.0,
		ExperienceItem.ENSOULED_ELF_HEAD, Secondaries.ADEPT_REANIMATION, null),
	ENSOULED_TROLL_HEAD(ItemID.ENSOULED_TROLL_HEAD_13484, "Ensouled troll head", 1, 780.0,
		ExperienceItem.ENSOULED_TROLL_HEAD, Secondaries.ADEPT_REANIMATION, null),
	ENSOULED_HORROR_HEAD(ItemID.ENSOULED_HORROR_HEAD_13487, "Ensouled horror head", 1, 832.0,
		ExperienceItem.ENSOULED_HORROR_HEAD, Secondaries.ADEPT_REANIMATION, null),
	ENSOULED_KALPHITE_HEAD(ItemID.ENSOULED_KALPHITE_HEAD_13490, "Ensouled kalphite head", 1, 884.0,
		ExperienceItem.ENSOULED_KALPHITE_HEAD, Secondaries.EXPERT_REANIMATION, null),
	ENSOULED_DAGANNOTH_HEAD(ItemID.ENSOULED_DAGANNOTH_HEAD_13493, "Ensouled dagannoth head", 1, 936.0,
		ExperienceItem.ENSOULED_DAGANNOTH_HEAD, Secondaries.EXPERT_REANIMATION, null),
	ENSOULED_BLOODVELD_HEAD(ItemID.ENSOULED_BLOODVELD_HEAD_13496, "Ensouled bloodveld head", 1, 1040.0,
		ExperienceItem.ENSOULED_BLOODVELD_HEAD, Secondaries.EXPERT_REANIMATION, null),
	ENSOULED_TZHAAR_HEAD(ItemID.ENSOULED_TZHAAR_HEAD_13499, "Ensouled tzhaar head", 1, 1104.0,
		ExperienceItem.ENSOULED_TZHAAR_HEAD, Secondaries.EXPERT_REANIMATION, null),
	ENSOULED_DEMON_HEAD(ItemID.ENSOULED_DEMON_HEAD_13502, "Ensouled demon head", 1, 1170.0,
		ExperienceItem.ENSOULED_DEMON_HEAD, Secondaries.EXPERT_REANIMATION, null),
	ENSOULED_HELLHOUND_HEAD(ItemID.ENSOULED_HELLHOUND_HEAD_26997, "Ensouled hellhound head", 1, 1200,
		ExperienceItem.ENSOULED_HELLHOUND_HEAD, Secondaries.EXPERT_REANIMATION, null),
	ENSOULED_AVIANSIE_HEAD(ItemID.ENSOULED_AVIANSIE_HEAD_13505, "Ensouled aviansie head", 1, 1234.0,
		ExperienceItem.ENSOULED_AVIANSIE_HEAD, Secondaries.MASTER_REANIMATION, null),
	ENSOULED_ABYSSAL_HEAD(ItemID.ENSOULED_ABYSSAL_HEAD_13508, "Ensouled abyssal head", 1, 1300.0,
		ExperienceItem.ENSOULED_ABYSSAL_HEAD, Secondaries.MASTER_REANIMATION, null),
	ENSOULED_DRAGON_HEAD(ItemID.ENSOULED_DRAGON_HEAD_13511, "Ensouled dragon head", 1, 1560.0,
		ExperienceItem.ENSOULED_DRAGON_HEAD, Secondaries.MASTER_REANIMATION, null),
	// Fossils
	SMALL_LIMBS(ItemID.SMALL_FOSSILISED_LIMBS, "Small limbs", 1, 0,
		ExperienceItem.SMALL_LIMBS, null, new ItemStack(ItemID.UNIDENTIFIED_SMALL_FOSSIL, 1)),
	SMALL_SPINE(ItemID.SMALL_FOSSILISED_SPINE, "Small spine", 1, 0,
		ExperienceItem.SMALL_SPINE, null, new ItemStack(ItemID.UNIDENTIFIED_SMALL_FOSSIL, 1)),
	SMALL_RIBS(ItemID.SMALL_FOSSILISED_RIBS, "Small ribs", 1, 0,
		ExperienceItem.SMALL_RIBS, null, new ItemStack(ItemID.UNIDENTIFIED_SMALL_FOSSIL, 1)),
	SMALL_PELVIS(ItemID.SMALL_FOSSILISED_PELVIS, "Small pelvis", 1, 0,
		ExperienceItem.SMALL_PELVIS, null, new ItemStack(ItemID.UNIDENTIFIED_SMALL_FOSSIL, 1)),
	SMALL_SKULL(ItemID.SMALL_FOSSILISED_SKULL, "Small skull", 1, 0,
		ExperienceItem.SMALL_SKULL, null, new ItemStack(ItemID.UNIDENTIFIED_SMALL_FOSSIL, 1)),
	SMALL_FOSSIL(ItemID.UNIDENTIFIED_SMALL_FOSSIL, "Small fossil", 1, 500,
		ExperienceItem.SMALL_FOSSIL, null, null),
	MEDIUM_LIMBS(ItemID.MEDIUM_FOSSILISED_LIMBS, "Medium limbs", 1, 0,
		ExperienceItem.MEDIUM_LIMBS, null, new ItemStack(ItemID.UNIDENTIFIED_MEDIUM_FOSSIL, 1)),
	MEDIUM_SPINE(ItemID.MEDIUM_FOSSILISED_SPINE, "Medium spine", 1, 0,
		ExperienceItem.MEDIUM_SPINE, null, new ItemStack(ItemID.UNIDENTIFIED_MEDIUM_FOSSIL, 1)),
	MEDIUM_RIBS(ItemID.MEDIUM_FOSSILISED_RIBS, "Medium ribs", 1, 0,
		ExperienceItem.MEDIUM_RIBS, null, new ItemStack(ItemID.UNIDENTIFIED_MEDIUM_FOSSIL, 1)),
	MEDIUM_PELVIS(ItemID.MEDIUM_FOSSILISED_PELVIS, "Medium pelvis", 1, 0,
		ExperienceItem.MEDIUM_PELVIS, null, new ItemStack(ItemID.UNIDENTIFIED_MEDIUM_FOSSIL, 1)),
	MEDIUM_SKULL(ItemID.MEDIUM_FOSSILISED_SKULL, "Medium skull", 1, 0,
		ExperienceItem.MEDIUM_SKULL, null, new ItemStack(ItemID.UNIDENTIFIED_MEDIUM_FOSSIL, 1)),
	MEDIUM_FOSSIL(ItemID.UNIDENTIFIED_MEDIUM_FOSSIL, "Medium fossil", 1, 1000,
		ExperienceItem.MEDIUM_FOSSIL, null, null),
	LARGE_LIMBS(ItemID.LARGE_FOSSILISED_LIMBS, "Large limbs", 1, 0,
		ExperienceItem.LARGE_LIMBS, null, new ItemStack(ItemID.UNIDENTIFIED_LARGE_FOSSIL, 1)),
	LARGE_SPINE(ItemID.LARGE_FOSSILISED_SPINE, "Large spine", 1, 0,
		ExperienceItem.LARGE_SPINE, null, new ItemStack(ItemID.UNIDENTIFIED_LARGE_FOSSIL, 1)),
	LARGE_RIBS(ItemID.LARGE_FOSSILISED_RIBS, "Large ribs", 1, 0,
		ExperienceItem.LARGE_RIBS, null, new ItemStack(ItemID.UNIDENTIFIED_LARGE_FOSSIL, 1)),
	LARGE_PELVIS(ItemID.LARGE_FOSSILISED_PELVIS, "Large pelvis", 1, 0,
		ExperienceItem.LARGE_PELVIS, null, new ItemStack(ItemID.UNIDENTIFIED_LARGE_FOSSIL, 1)),
	LARGE_SKULL(ItemID.LARGE_FOSSILISED_SKULL, "Large skull", 1, 0,
		ExperienceItem.LARGE_SKULL, null, new ItemStack(ItemID.UNIDENTIFIED_LARGE_FOSSIL, 1)),
	LARGE_FOSSIL(ItemID.UNIDENTIFIED_LARGE_FOSSIL, "Large fossil", 1, 1500,
		ExperienceItem.LARGE_FOSSIL, null, null),
	RARE_LIMBS(ItemID.RARE_FOSSILISED_LIMBS, "Rare limbs", 1, 0,
		ExperienceItem.RARE_LIMBS, null, new ItemStack(ItemID.UNIDENTIFIED_RARE_FOSSIL, 1)),
	RARE_SPINE(ItemID.RARE_FOSSILISED_SPINE, "Rare spine", 1, 0,
		ExperienceItem.RARE_SPINE, null, new ItemStack(ItemID.UNIDENTIFIED_RARE_FOSSIL, 1)),
	RARE_RIBS(ItemID.RARE_FOSSILISED_RIBS, "Rare ribs", 1, 0,
		ExperienceItem.RARE_RIBS, null, new ItemStack(ItemID.UNIDENTIFIED_RARE_FOSSIL, 1)),
	RARE_PELVIS(ItemID.RARE_FOSSILISED_PELVIS, "Rare pelvis", 1, 0,
		ExperienceItem.RARE_PELVIS, null, new ItemStack(ItemID.UNIDENTIFIED_RARE_FOSSIL, 1)),
	RARE_SKULL(ItemID.RARE_FOSSILISED_SKULL, "Rare skull", 1, 0,
		ExperienceItem.RARE_SKULL, null, new ItemStack(ItemID.UNIDENTIFIED_RARE_FOSSIL, 1)),
	RARE_TUSK(ItemID.RARE_FOSSILISED_TUSK, "Rare tusk", 1, 0,
		ExperienceItem.RARE_TUSK, null, new ItemStack(ItemID.UNIDENTIFIED_RARE_FOSSIL, 1)),
	RARE_FOSSIL(ItemID.UNIDENTIFIED_RARE_FOSSIL, "Rare fossil", 1, 2500,
		ExperienceItem.RARE_FOSSIL, null, null),
	// Ashes
	FIENDISH_ASHES(ItemID.FIENDISH_ASHES, "Fiendish ashes", 1, 10,
		ExperienceItem.FIENDISH_ASHES, null, null),
	VILE_ASHES(ItemID.VILE_ASHES, "Vile ashes", 1, 25,
		ExperienceItem.VILE_ASHES, null, null),
	MALICIOUS_ASHES(ItemID.MALICIOUS_ASHES, "Malicious ashes", 1, 65,
		ExperienceItem.MALICIOUS_ASHES, null, null),
	ABYSSAL_ASHES(ItemID.ABYSSAL_ASHES, "Abyssal ashes", 1, 85,
		ExperienceItem.ABYSSAL_ASHES, null, null),
	INFERNAL_ASHES(ItemID.INFERNAL_ASHES, "Infernal ashes", 1, 110,
		ExperienceItem.INFERNAL_ASHES, null, null),
	// Bird Eggs
	BIRD_EGG_NEST_RED(ItemID.BIRD_NEST, "Bird's egg (Red)", 1, 0,
		ExperienceItem.BIRD_EGG_NEST_RED, null, new ItemStack(ItemID.BIRDS_EGG, 1)),
	BIRD_EGG_NEST_BLUE(ItemID.BIRD_NEST_5072, "Bird's egg (Blue)", 1, 0,
		ExperienceItem.BIRD_EGG_NEST_BLUE, null, new ItemStack(ItemID.BIRDS_EGG_5077, 1)),
	BIRD_EGG_NEST_GREEN(ItemID.BIRD_NEST_5071, "Bird's egg (Green)", 1, 0,
		ExperienceItem.BIRD_EGG_NEST_GREEN, null, new ItemStack(ItemID.BIRDS_EGG_5078, 1)),
	BIRD_EGG_RED(ItemID.BIRDS_EGG, "Offer bird's egg", 1, 100,
		ExperienceItem.BIRD_EGG_RED, null, null),
	BIRD_EGG_BLUE(ItemID.BIRDS_EGG_5077, "Offer bird's egg", 1, 100,
		ExperienceItem.BIRD_EGG_BLUE, null, null),
	BIRD_EGG_GREEN(ItemID.BIRDS_EGG_5078, "Offer bird's egg", 1, 100,
		ExperienceItem.BIRD_EGG_GREEN, null, null),
	// Slayer Trophies
	CRAWLING_HAND(ItemID.CRAWLING_HAND, "Crawling hand", 1, 2500,
		ExperienceItem.CRAWLING_HAND, null, null),
	COCKATRICE_HEAD(ItemID.COCKATRICE_HEAD, "Cockatrice head", 1, 2500,
		ExperienceItem.COCKATRICE_HEAD, null, null),
	BASILISK_HEAD(ItemID.BASILISK_HEAD, "Basilisk head", 1, 2500,
		ExperienceItem.BASILISK_HEAD, null, null),
	KURASK_HEAD(ItemID.KURASK_HEAD, "Kurask head", 1, 2500,
		ExperienceItem.KURASK_HEAD, null, null),
	ABYSSAL_HEAD(ItemID.ABYSSAL_HEAD, "Abyssal head", 1, 2500,
		ExperienceItem.ABYSSAL_HEAD, null, null),
	KBD_HEADS(ItemID.KBD_HEADS, "Kbd heads", 1, 2500,
		ExperienceItem.KBD_HEADS, null, null),
	KQ_HEAD(ItemID.KQ_HEAD, "Kq head", 1, 2500,
		ExperienceItem.KQ_HEAD, null, null),
	VORKATHS_HEAD(ItemID.VORKATHS_HEAD, "Vorkaths head", 1, 1000,
		ExperienceItem.VORKATHS_HEAD, null, null),
	ALCHEMICAL_HYDRA_HEADS(ItemID.ALCHEMICAL_HYDRA_HEADS, "Alchemical hydra heads", 1, 2500,
		ExperienceItem.ALCHEMICAL_HYDRA_HEADS, null, null),
	/**
	 * Cooking
	 */
	COOK_BEEF(ItemID.COOKED_MEAT, "Cooked meat", 1, 30.0,
		ExperienceItem.RAW_BEEF, null, new ItemStack(ItemID.COOKED_MEAT, 1)),
	COOK_RAT_MEAT(ItemID.COOKED_MEAT, "Cooked meat", 1, 30.0,
		ExperienceItem.RAW_RAT_MEAT, null, new ItemStack(ItemID.COOKED_MEAT, 1)),
	COOK_BEAR_MEAT(ItemID.COOKED_MEAT, "Cooked meat", 1, 30.0,
		ExperienceItem.RAW_BEAR_MEAT, null, new ItemStack(ItemID.COOKED_MEAT, 1)),
	COOK_YAK_MEAT(ItemID.COOKED_MEAT, "Cooked meat", 1, 40.0,
		ExperienceItem.RAW_YAK_MEAT, null, new ItemStack(ItemID.COOKED_MEAT, 1)),
	COOK_UGTHANKI_MEAT(ItemID.UGTHANKI_MEAT, "Ugthanki meat", 1, 40.0,
		ExperienceItem.RAW_UGTHANKI_MEAT, null, new ItemStack(ItemID.UGTHANKI_MEAT, 1)),
	COOK_CHICKEN(ItemID.COOKED_CHICKEN, "Cooked chicken", 1, 30.0,
		ExperienceItem.RAW_CHICKEN, null, new ItemStack(ItemID.COOKED_CHICKEN, 1)),
	COOK_RABBIT(ItemID.COOKED_RABBIT, "Cooked rabbit", 1, 30.0,
		ExperienceItem.RAW_RABBIT, null, new ItemStack(ItemID.COOKED_RABBIT, 1)),
	COOK_SHRIMPS(ItemID.SHRIMPS, "Shrimps", 1, 30.0,
		ExperienceItem.RAW_SHRIMPS, null, new ItemStack(ItemID.SHRIMPS, 1)),
	COOK_SARDINE(ItemID.SARDINE, "Sardine", 1, 40.0,
		ExperienceItem.RAW_SARDINE, null, new ItemStack(ItemID.SARDINE, 1)),
	COOK_ANCHOVIES(ItemID.ANCHOVIES, "Anchovies", 1, 30.0,
		ExperienceItem.RAW_ANCHOVIES, null, new ItemStack(ItemID.ANCHOVIES, 1)),
	COOK_HERRING(ItemID.HERRING, "Herring", 5, 50.0,
		ExperienceItem.RAW_HERRING, null, new ItemStack(ItemID.HERRING, 1)),
	COOK_MACKEREL(ItemID.MACKEREL, "Mackerel", 10, 60.0,
		ExperienceItem.RAW_MACKEREL, null, new ItemStack(ItemID.MACKEREL, 1)),
	COOK_BIRD_MEAT(ItemID.ROAST_BIRD_MEAT, "Roast bird meat", 11, 62.5,
		ExperienceItem.RAW_BIRD_MEAT, null, new ItemStack(ItemID.ROAST_BIRD_MEAT, 1)),
	COOK_THIN_SNAIL(ItemID.THIN_SNAIL_MEAT, "Thin snail meat", 12, 70.0,
		ExperienceItem.THIN_SNAIL, null, new ItemStack(ItemID.THIN_SNAIL_MEAT, 1)),
	COOK_TROUT(ItemID.TROUT, "Trout", 15, 70.0,
		ExperienceItem.RAW_TROUT, null, new ItemStack(ItemID.TROUT, 1)),
	COOK_LEAN_SNAIL(ItemID.LEAN_SNAIL_MEAT, "Lean snail meat", 17, 80.0,
		ExperienceItem.LEAN_SNAIL, null, new ItemStack(ItemID.LEAN_SNAIL_MEAT, 1)),
	COOK_COD(ItemID.COD, "Cod", 18, 75.0,
		ExperienceItem.RAW_COD, null, new ItemStack(ItemID.COD, 1)),
	COOK_PIKE(ItemID.PIKE, "Pike", 20, 80.0,
		ExperienceItem.RAW_PIKE, null, new ItemStack(ItemID.PIKE, 1)),
	COOK_FAT_SNAIL(ItemID.FAT_SNAIL_MEAT, "Fat snail meat", 22, 95.0,
		ExperienceItem.FAT_SNAIL, null, new ItemStack(ItemID.FAT_SNAIL_MEAT, 1)),
	COOK_BEAST_MEAT(ItemID.ROAST_BEAST_MEAT, "Roast beast meat", 21, 82.5,
		ExperienceItem.RAW_BEAST_MEAT, null, new ItemStack(ItemID.ROAST_BEAST_MEAT, 1)),
	COOK_SALMON(ItemID.SALMON, "Salmon", 25, 90.0,
		ExperienceItem.RAW_SALMON, null, new ItemStack(ItemID.SALMON, 1)),
	COOK_TUNA(ItemID.TUNA, "Tuna", 30, 100.0,
		ExperienceItem.RAW_TUNA, null, new ItemStack(ItemID.TUNA, 1)),
	COOK_RAINBOW_FISH(ItemID.RAINBOW_FISH, "Rainbow fish", 35, 110.0,
		ExperienceItem.RAW_RAINBOW_FISH, null, new ItemStack(ItemID.RAINBOW_FISH, 1)),
	COOK_KARAMBWAN(ItemID.COOKED_KARAMBWAN, "Cooked Karambwan", 30, 190.0,
		ExperienceItem.RAW_KARAMBWAN, null, new ItemStack(ItemID.COOKED_KARAMBWAN, 1)),
	COOK_LOBSTER(ItemID.LOBSTER, "Lobster", 40, 120.0,
		ExperienceItem.RAW_LOBSTER, null, new ItemStack(ItemID.LOBSTER, 1)),
	COOK_BASS(ItemID.BASS, "Bass", 43, 130.0,
		ExperienceItem.RAW_BASS, null, new ItemStack(ItemID.BASS, 1)),
	COOK_SWORDFISH(ItemID.SWORDFISH, "Swordfish", 45, 140.0,
		ExperienceItem.RAW_SWORDFISH, null, new ItemStack(ItemID.SWORDFISH, 1)),
	COOK_MONKFISH(ItemID.MONKFISH, "Monkfish", 62, 150.0,
		ExperienceItem.RAW_MONKFISH, null, new ItemStack(ItemID.MONKFISH, 1)),
	COOK_SHARK(ItemID.SHARK, "Shark", 80, 210.0,
		ExperienceItem.RAW_SHARK, null, new ItemStack(ItemID.SHARK, 1)),
	COOK_SEA_TURTLE(ItemID.SEA_TURTLE, "Sea turtle", 82, 211.3,
		ExperienceItem.RAW_SEA_TURTLE, null, new ItemStack(ItemID.SEA_TURTLE, 1)),
	COOK_ANGLERFISH(ItemID.ANGLERFISH, "Anglerfish", 84, 230.0,
		ExperienceItem.RAW_ANGLERFISH, null, new ItemStack(ItemID.ANGLERFISH, 1)),
	COOK_DARK_CRAB(ItemID.DARK_CRAB, "Dark crab", 90, 215.0,
		ExperienceItem.RAW_DARK_CRAB, null, new ItemStack(ItemID.DARK_CRAB, 1)),
	COOK_MANTA_RAY(ItemID.MANTA_RAY, "Manta ray", 91, 216.2,
		ExperienceItem.RAW_MANTA_RAY, null, new ItemStack(ItemID.MANTA_RAY, 1)),
	WINE(ItemID.JUG_OF_WINE, "Jug of wine", 35, 200,
		ExperienceItem.GRAPES, Secondaries.JUG_OF_WATER, new ItemStack(ItemID.JUG_OF_WINE, 1)),
	SWEETCORN(ItemID.COOKED_SWEETCORN, "Cooked sweetcorn", 28, 104,
		ExperienceItem.SWEETCORN, null, new ItemStack(ItemID.COOKED_SWEETCORN, 1)),
	STEW(ItemID.STEW, "Stew", 25, 117,
		ExperienceItem.UNCOOKED_STEW, null, new ItemStack(ItemID.STEW, 1)),
	CURRY(ItemID.CURRY, "Curry", 60, 280,
		ExperienceItem.UNCOOKED_CURRY, null, new ItemStack(ItemID.CURRY, 1)),
	COOK_WILD_KEBBIT(ItemID.COOKED_WILD_KEBBIT, "Cooked wild kebbit", 23, 73.0,
		ExperienceItem.RAW_WILD_KEBBIT, null, new ItemStack(ItemID.COOKED_WILD_KEBBIT, 1)),
	COOK_LARUPIA(ItemID.COOKED_LARUPIA, "Cooked larupia", 31, 92.0,
		ExperienceItem.RAW_LARUPIA, null, new ItemStack(ItemID.COOKED_LARUPIA, 1)),
	COOK_BARBTAILED_KEBBIT(ItemID.COOKED_BARBTAILED_KEBBIT, "Cooked barb-tailed kebbit", 32, 106.0,
		ExperienceItem.RAW_BARBTAILED_KEBBIT, null, new ItemStack(ItemID.COOKED_BARBTAILED_KEBBIT, 1)),
	COOK_GRAAHK(ItemID.COOKED_GRAAHK, "Cooked graahk", 41, 124,
		ExperienceItem.RAW_GRAAHK, null, new ItemStack(ItemID.COOKED_GRAAHK, 1)),
	COOK_KYATT(ItemID.COOKED_KYATT, "Cooked kyatt", 51, 143.0,
		ExperienceItem.RAW_KYATT, null, new ItemStack(ItemID.COOKED_KYATT, 1)),
	COOK_PYRE_FOX(ItemID.COOKED_PYRE_FOX, "Cooked pyre fox", 59, 154.0,
		ExperienceItem.RAW_PYRE_FOX, null, new ItemStack(ItemID.COOKED_PYRE_FOX, 1)),
	COOK_SUNLIGHT_ANTELOPE(ItemID.COOKED_SUNLIGHT_ANTELOPE, "Cooked sunlight antelope", 68, 175.0,
		ExperienceItem.RAW_SUNLIGHT_ANTELOPE, null, new ItemStack(ItemID.COOKED_SUNLIGHT_ANTELOPE, 1)),
	COOK_DASHING_KEBBIT(ItemID.COOKED_DASHING_KEBBIT, "Cooked dashing kebbit", 82, 215.0,
		ExperienceItem.RAW_DASHING_KEBBIT, null, new ItemStack(ItemID.COOKED_DASHING_KEBBIT, 1)),
	COOK_MOONLIGHT_ANTELOPE(ItemID.COOKED_MOONLIGHT_ANTELOPE, "Cooked moonlight antelope", 92, 220.0,
		ExperienceItem.RAW_MOONLIGHT_ANTELOPE, null, new ItemStack(ItemID.COOKED_MOONLIGHT_ANTELOPE, 1)),
	/**
	 * Crafting
	 */
	// Spinning
	BALL_OF_WOOL(ItemID.BALL_OF_WOOL, "Ball of wool", 1, 2.5,
		ExperienceItem.WOOL, null, new ItemStack(ItemID.BALL_OF_WOOL, 1)),
	BOW_STRING(ItemID.BOW_STRING, "Bow string", 1, 15,
		ExperienceItem.FLAX, null, new ItemStack(ItemID.BOW_STRING, 1)),
	// Glass Blowing
	BEER_GLASS(ItemID.BEER_GLASS, "Beer glass", 1, 17.5,
		ExperienceItem.MOLTEN_GLASS, null, new ItemStack(ItemID.BEER_GLASS, 1)),
	CANDLE_LANTERN(ItemID.CANDLE_LANTERN, "Candle lantern", 4, 19,
		ExperienceItem.MOLTEN_GLASS, null, new ItemStack(ItemID.CANDLE_LANTERN, 1)),
	OIL_LAMP(ItemID.OIL_LAMP, "Oil lamp", 12, 25,
		ExperienceItem.MOLTEN_GLASS, null, new ItemStack(ItemID.OIL_LAMP, 1)),
	VIAL(ItemID.VIAL, "Vial", 33, 35,
		ExperienceItem.MOLTEN_GLASS, null, new ItemStack(ItemID.VIAL, 1)),
	EMPTY_FISHBOWL(ItemID.EMPTY_FISHBOWL, "Empty fishbowl", 42, 42.5,
		ExperienceItem.MOLTEN_GLASS, null, new ItemStack(ItemID.EMPTY_FISHBOWL, 1)),
	UNPOWERED_ORB(ItemID.UNPOWERED_ORB, "Unpowered orb", 46, 52.5,
		ExperienceItem.MOLTEN_GLASS, null, new ItemStack(ItemID.UNPOWERED_ORB, 1)),
	LANTERN_LENS(ItemID.LANTERN_LENS, "Lantern lens", 49, 55,
		ExperienceItem.MOLTEN_GLASS, null, new ItemStack(ItemID.LANTERN_LENS, 1)),
	LIGHT_ORB(ItemID.LIGHT_ORB, "Light orb", 87, 70,
		ExperienceItem.MOLTEN_GLASS, null, new ItemStack(ItemID.LIGHT_ORB, 1)),
	// Regular Leather
	LEATHER(ItemID.LEATHER, "Tan Leather", 1, 0,
		ExperienceItem.COW_HIDE, Secondaries.COIN, new ItemStack(ItemID.LEATHER, 1)),
	LEATHER_GLOVES(ItemID.LEATHER_GLOVES, "Leather gloves", 1, 13.8,
		ExperienceItem.LEATHER, null, new ItemStack(ItemID.LEATHER_GLOVES, 1)),
	LEATHER_BOOTS(ItemID.LEATHER_BOOTS, "Leather boots", 7, 16.2,
		ExperienceItem.LEATHER, null, new ItemStack(ItemID.LEATHER_BOOTS, 1)),
	LEATHER_COWL(ItemID.LEATHER_COWL, "Leather cowl", 9, 18.5,
		ExperienceItem.LEATHER, null, new ItemStack(ItemID.LEATHER_COWL, 1)),
	LEATHER_VAMBRACES(ItemID.LEATHER_VAMBRACES, "Leather vambraces", 11, 22,
		ExperienceItem.LEATHER, null, new ItemStack(ItemID.LEATHER_VAMBRACES, 1)),
	LEATHER_BODY(ItemID.LEATHER_BODY, "Leather body", 14, 25,
		ExperienceItem.LEATHER, null, new ItemStack(ItemID.LEATHER_BODY, 1)),
	LEATHER_CHAPS(ItemID.LEATHER_CHAPS, "Leather chaps", 18, 27,
		ExperienceItem.LEATHER, null, new ItemStack(ItemID.LEATHER_CHAPS, 1)),
	COIF(ItemID.COIF, "Coif", 38, 37,
		ExperienceItem.LEATHER, null, new ItemStack(ItemID.COIF, 1)),
	// Hard Leather
	HARD_LEATHER(ItemID.HARD_LEATHER, "Tan Hard Leather", 1, 0,
		ExperienceItem.COW_HIDE, Secondaries.COIN_3, new ItemStack(ItemID.HARD_LEATHER, 1)),
	HARDLEATHER_BODY(ItemID.HARDLEATHER_BODY, "Hardleather body", 28, 35,
		ExperienceItem.HARD_LEATHER, null, new ItemStack(ItemID.HARDLEATHER_BODY, 1)),
	HARD_LEATHER_SHIELD(ItemID.HARD_LEATHER_SHIELD, "Hard leather shield", 41, 70,
		ExperienceItem.HARD_LEATHER, Secondaries.HARD_LEATHER_SHIELD, new ItemStack(ItemID.HARD_LEATHER_SHIELD, 1)),
	// Studded
	STUDDED_BODY(ItemID.STUDDED_BODY, "Studded chaps", 41, 40,
		ExperienceItem.STEEL_STUDS, Secondaries.LEATHER_BODY, new ItemStack(ItemID.STUDDED_BODY, 1)),
	STUDDED_CHAPS(ItemID.STUDDED_CHAPS, "Studded chaps", 44, 42,
		ExperienceItem.STEEL_STUDS, Secondaries.LEATHER_CHAPS, new ItemStack(ItemID.STUDDED_CHAPS, 1)),
	// D'hide/Dragon Leather
	GREEN_DRAGONHIDE(ItemID.GREEN_DRAGON_LEATHER, "Tan Green D'hide", 57, 0,
		ExperienceItem.GREEN_DRAGONHIDE, null, new ItemStack(ItemID.GREEN_DRAGON_LEATHER, 1)),
	BLUE_DRAGONHIDE(ItemID.BLUE_DRAGON_LEATHER, "Tan Blue D'hide", 66, 0,
		ExperienceItem.BLUE_DRAGONHIDE, null, new ItemStack(ItemID.BLUE_DRAGON_LEATHER, 1)),
	RED_DRAGONHIDE(ItemID.RED_DRAGON_LEATHER, "Tan Red D'hide", 73, 0,
		ExperienceItem.RED_DRAGONHIDE, null, new ItemStack(ItemID.RED_DRAGON_LEATHER, 1)),
	BLACK_DRAGONHIDE(ItemID.BLACK_DRAGON_LEATHER, "Tan Black D'hide", 79, 0,
		ExperienceItem.BLACK_DRAGONHIDE, null, new ItemStack(ItemID.BLACK_DRAGON_LEATHER, 1)),
	GREEN_DRAGON_LEATHER(ItemID.GREEN_DHIDE_VAMBRACES, "Green D'hide product", 57, 62.0,
		ExperienceItem.GREEN_DRAGON_LEATHER, null, null),
	BLUE_DRAGON_LEATHER(ItemID.BLUE_DHIDE_VAMBRACES, "Blue D'hide product", 66, 70.0,
		ExperienceItem.BLUE_DRAGON_LEATHER, null, null),
	RED_DRAGON_LEATHER(ItemID.RED_DHIDE_VAMBRACES, "Red D'hide product", 73, 78.0,
		ExperienceItem.RED_DRAGON_LEATHER, null, null),
	BLACK_DRAGON_LEATHER(ItemID.BLACK_DHIDE_VAMBRACES, "Black D'hide product", 79, 86.0,
		ExperienceItem.BLACK_DRAGON_LEATHER, null, null),
	// Uncut Gems
	UNCUT_OPAL(ItemID.OPAL, "Cut opal", 1, 15.0,
		ExperienceItem.UNCUT_OPAL, null, new ItemStack(ItemID.OPAL, 1)),
	UNCUT_JADE(ItemID.JADE, "Cut jade", 13, 20.0,
		ExperienceItem.UNCUT_JADE, null, new ItemStack(ItemID.JADE, 1)),
	UNCUT_RED_TOPAZ(ItemID.RED_TOPAZ, "Cut red topaz", 16, 25.0,
		ExperienceItem.UNCUT_RED_TOPAZ, null, new ItemStack(ItemID.RED_TOPAZ, 1)),
	UNCUT_SAPPHIRE(ItemID.SAPPHIRE, "Cut sapphire", 20, 50.0,
		ExperienceItem.UNCUT_SAPPHIRE, null, new ItemStack(ItemID.SAPPHIRE, 1)),
	UNCUT_EMERALD(ItemID.EMERALD, "Cut emerald", 27, 67.5,
		ExperienceItem.UNCUT_EMERALD, null, new ItemStack(ItemID.EMERALD, 1)),
	UNCUT_RUBY(ItemID.RUBY, "Cut ruby", 34, 85,
		ExperienceItem.UNCUT_RUBY, null, new ItemStack(ItemID.RUBY, 1)),
	UNCUT_DIAMOND(ItemID.DIAMOND, "Cut diamond", 43, 107.5,
		ExperienceItem.UNCUT_DIAMOND, null, new ItemStack(ItemID.DIAMOND, 1)),
	UNCUT_DRAGONSTONE(ItemID.DRAGONSTONE, "Cut dragonstone", 55, 137.5,
		ExperienceItem.UNCUT_DRAGONSTONE, null, new ItemStack(ItemID.DRAGONSTONE, 1)),
	UNCUT_ONYX(ItemID.ONYX, "Cut onyx", 67, 167.5,
		ExperienceItem.UNCUT_ONYX, null, new ItemStack(ItemID.ONYX, 1)),
	UNCUT_ZENYTE(ItemID.ZENYTE, "Cut zenyte", 89, 200.0,
		ExperienceItem.UNCUT_ZENYTE, null, new ItemStack(ItemID.ZENYTE, 1)),
	// Silver Jewelery
	OPAL_RING(ItemID.OPAL_RING, "Opal ring", 1, 10,
		ExperienceItem.OPAL, Secondaries.SILVER_BAR, new ItemStack(ItemID.OPAL_RING, 1)),
	OPAL_NECKLACE(ItemID.OPAL_NECKLACE, "Opal necklace", 16, 35,
		ExperienceItem.OPAL, Secondaries.SILVER_BAR, new ItemStack(ItemID.OPAL_NECKLACE, 1)),
	UNSTRUNG_SYMBOL(ItemID.UNSTRUNG_SYMBOL, "Unstrung Symbol", 16, 50,
		ExperienceItem.SILVER_BAR, null, new ItemStack(ItemID.UNSTRUNG_SYMBOL, 1)),
	UNSTRUNG_EMBLEM(ItemID.UNSTRUNG_EMBLEM, "Unstrung Emblem", 17, 50,
		ExperienceItem.SILVER_BAR, null, new ItemStack(ItemID.UNSTRUNG_EMBLEM, 1)),
	SILVER_SICKLE(ItemID.SILVER_SICKLE, "Silver Sickel", 18, 50,
		ExperienceItem.SILVER_BAR, null, new ItemStack(ItemID.SILVER_SICKLE, 1)),
	OPAL_BRACELET(ItemID.OPAL_BRACELET, "Opal bracelet", 22, 45,
		ExperienceItem.OPAL, Secondaries.SILVER_BAR, new ItemStack(ItemID.OPAL_BRACELET, 1)),
	TIARA(ItemID.TIARA, "Tiara", 23, 52.5,
		ExperienceItem.SILVER_BAR, null, new ItemStack(ItemID.TIARA, 1)),
	OPAL_AMULET_U(ItemID.OPAL_AMULET, "Opal amulet (u)", 27, 55,
		ExperienceItem.OPAL, Secondaries.SILVER_BAR, new ItemStack(ItemID.OPAL_AMULET_U, 1)),
	JADE_RING(ItemID.JADE_RING, "Jade ring", 13, 32,
		ExperienceItem.JADE, Secondaries.SILVER_BAR, new ItemStack(ItemID.JADE_RING, 1)),
	JADE_NECKLACE(ItemID.JADE_NECKLACE, "Jade necklace", 25, 54,
		ExperienceItem.JADE, Secondaries.SILVER_BAR, new ItemStack(ItemID.JADE_NECKLACE, 1)),
	JADE_BRACELET(ItemID.JADE_BRACELET, "Jade bracelet", 29, 60,
		ExperienceItem.JADE, Secondaries.SILVER_BAR, new ItemStack(ItemID.JADE_BRACELET, 1)),
	JADE_AMULET_U(ItemID.JADE_AMULET, "Jade amulet (u)", 34, 70,
		ExperienceItem.JADE, Secondaries.SILVER_BAR, new ItemStack(ItemID.JADE_AMULET_U, 1)),
	TOPAZ_RING(ItemID.TOPAZ_RING, "Topaz ring", 16, 35,
		ExperienceItem.RED_TOPAZ, Secondaries.SILVER_BAR, new ItemStack(ItemID.TOPAZ_RING, 1)),
	TOPAZ_NECKLACE(ItemID.TOPAZ_NECKLACE, "Topaz necklace", 32, 70,
		ExperienceItem.RED_TOPAZ, Secondaries.SILVER_BAR, new ItemStack(ItemID.TOPAZ_NECKLACE, 1)),
	TOPAZ_BRACELET(ItemID.TOPAZ_BRACELET, "Topaz bracelet", 38, 75,
		ExperienceItem.RED_TOPAZ, Secondaries.SILVER_BAR, new ItemStack(ItemID.TOPAZ_BRACELET, 1)),
	TOPAZ_AMULET_U(ItemID.TOPAZ_AMULET, "Topaz amulet (u)", 45, 80,
		ExperienceItem.RED_TOPAZ, Secondaries.SILVER_BAR, new ItemStack(ItemID.TOPAZ_AMULET_U, 1)),
	// Gold Jewelery
	SAPPHIRE_RING(ItemID.SAPPHIRE_RING, "Sapphire ring", 20, 40,
		ExperienceItem.SAPPHIRE, Secondaries.GOLD_BAR, new ItemStack(ItemID.SAPPHIRE_RING, 1)),
	SAPPHIRE_NECKLACE(ItemID.SAPPHIRE_NECKLACE, "Sapphire necklace", 22, 55,
		ExperienceItem.SAPPHIRE, Secondaries.GOLD_BAR, new ItemStack(ItemID.SAPPHIRE_NECKLACE, 1)),
	SAPPHIRE_BRACELET(ItemID.SAPPHIRE_BRACELET, "Sapphire bracelet", 23, 60,
		ExperienceItem.SAPPHIRE, Secondaries.GOLD_BAR, new ItemStack(ItemID.SAPPHIRE_BRACELET, 1)),
	SAPPHIRE_AMULET_U(ItemID.SAPPHIRE_AMULET, "Sapphire amulet (u)", 24, 65,
		ExperienceItem.SAPPHIRE, Secondaries.GOLD_BAR, new ItemStack(ItemID.SAPPHIRE_AMULET_U, 1)),
	EMERALD_RING(ItemID.EMERALD_RING, "Emerald ring", 27, 55,
		ExperienceItem.EMERALD, Secondaries.GOLD_BAR, new ItemStack(ItemID.EMERALD_RING, 1)),
	EMERALD_NECKLACE(ItemID.EMERALD_NECKLACE, "Emerald necklace", 29, 60,
		ExperienceItem.EMERALD, Secondaries.GOLD_BAR, new ItemStack(ItemID.EMERALD_NECKLACE, 1)),
	EMERALD_BRACELET(ItemID.EMERALD_BRACELET, "Emerald bracelet", 30, 65,
		ExperienceItem.EMERALD, Secondaries.GOLD_BAR, new ItemStack(ItemID.EMERALD_BRACELET, 1)),
	EMERALD_AMULET_U(ItemID.EMERALD_AMULET, "Emerald amulet (u)", 31, 70,
		ExperienceItem.EMERALD, Secondaries.GOLD_BAR, new ItemStack(ItemID.EMERALD_AMULET_U, 1)),
	RUBY_RING(ItemID.RUBY_RING, "Ruby ring", 34, 70,
		ExperienceItem.RUBY, Secondaries.GOLD_BAR, new ItemStack(ItemID.RUBY_RING, 1)),
	RUBY_NECKLACE(ItemID.RUBY_NECKLACE, "Ruby necklace", 40, 75,
		ExperienceItem.RUBY, Secondaries.GOLD_BAR, new ItemStack(ItemID.RUBY_NECKLACE, 1)),
	RUBY_BRACELET(ItemID.RUBY_BRACELET, "Ruby bracelet", 42, 80,
		ExperienceItem.RUBY, Secondaries.GOLD_BAR, new ItemStack(ItemID.RUBY_BRACELET, 1)),
	RUBY_AMULET_U(ItemID.RUBY_AMULET, "Ruby amulet (u)", 50, 85,
		ExperienceItem.RUBY, Secondaries.GOLD_BAR, new ItemStack(ItemID.RUBY_AMULET_U, 1)),
	DIAMOND_RING(ItemID.DIAMOND_RING, "Diamond ring", 43, 85,
		ExperienceItem.DIAMOND, Secondaries.GOLD_BAR, new ItemStack(ItemID.DIAMOND_RING, 1)),
	DIAMOND_NECKLACE(ItemID.DIAMOND_NECKLACE, "Diamond necklace", 56, 90,
		ExperienceItem.DIAMOND, Secondaries.GOLD_BAR, new ItemStack(ItemID.DIAMOND_NECKLACE, 1)),
	DIAMOND_BRACELET(ItemID.DIAMOND_BRACELET, "Diamond bracelet", 58, 95,
		ExperienceItem.DIAMOND, Secondaries.GOLD_BAR, new ItemStack(ItemID.DIAMOND_BRACELET, 1)),
	DIAMOND_AMULET_U(ItemID.DIAMOND_AMULET, "Diamond amulet (u)", 70, 100,
		ExperienceItem.DIAMOND, Secondaries.GOLD_BAR, new ItemStack(ItemID.DIAMOND_AMULET_U, 1)),
	DRAGONSTONE_RING(ItemID.DRAGONSTONE_RING, "Dragonstone ring", 55, 100,
		ExperienceItem.DRAGONSTONE, Secondaries.GOLD_BAR, new ItemStack(ItemID.DRAGONSTONE_RING, 1)),
	DRAGON_NECKLACE(ItemID.DRAGON_NECKLACE, "Dragon necklace", 72, 105,
		ExperienceItem.DRAGONSTONE, Secondaries.GOLD_BAR, new ItemStack(ItemID.DRAGON_NECKLACE, 1)),
	DRAGONSTONE_BRACELET(ItemID.DRAGONSTONE_BRACELET, "Dragonstone bracelet", 74, 110,
		ExperienceItem.DRAGONSTONE, Secondaries.GOLD_BAR, new ItemStack(ItemID.DRAGONSTONE_BRACELET, 1)),
	DRAGONSTONE_AMULET_U(ItemID.DRAGONSTONE_AMULET, "Dragonstone amulet (u)", 80, 150,
		ExperienceItem.DRAGONSTONE, Secondaries.GOLD_BAR, new ItemStack(ItemID.DRAGONSTONE_AMULET_U, 1)),
	ONYX_RING(ItemID.ONYX_RING, "Onyx ring", 67, 115,
		ExperienceItem.ONYX, Secondaries.GOLD_BAR, new ItemStack(ItemID.ONYX_RING, 1)),
	ONYX_NECKLACE(ItemID.ONYX_NECKLACE, "Onyx necklace", 82, 120,
		ExperienceItem.ONYX, Secondaries.GOLD_BAR, new ItemStack(ItemID.ONYX_NECKLACE, 1)),
	REGEN_BRACELET(ItemID.REGEN_BRACELET, "Regen bracelet", 84, 125,
		ExperienceItem.ONYX, Secondaries.GOLD_BAR, new ItemStack(ItemID.REGEN_BRACELET, 1)),
	ONYX_AMULET_U(ItemID.ONYX_AMULET, "Onyx amulet (u)", 90, 165,
		ExperienceItem.ONYX, Secondaries.GOLD_BAR, new ItemStack(ItemID.ONYX_AMULET_U, 1)),
	ZENYTE_RING(ItemID.ZENYTE_RING, "Zenyte ring", 89, 150,
		ExperienceItem.ZENYTE, Secondaries.GOLD_BAR, new ItemStack(ItemID.ZENYTE_RING, 1)),
	ZENYTE_NECKLACE(ItemID.ZENYTE_NECKLACE, "Zenyte necklace", 92, 165,
		ExperienceItem.ZENYTE, Secondaries.GOLD_BAR, new ItemStack(ItemID.ZENYTE_NECKLACE, 1)),
	ZENYTE_BRACELET(ItemID.ZENYTE_BRACELET, "Zenyte bracelet", 95, 180,
		ExperienceItem.ZENYTE, Secondaries.GOLD_BAR, new ItemStack(ItemID.ZENYTE_BRACELET, 1)),
	ZENYTE_AMULET_U(ItemID.ZENYTE_AMULET, "Zenyte amulet (u)", 98, 200,
		ExperienceItem.ZENYTE, Secondaries.GOLD_BAR, new ItemStack(ItemID.ZENYTE_AMULET_U, 1)),
	// Battle Staves
	WATER_BATTLESTAFF(ItemID.WATER_BATTLESTAFF, "Water battlestaff", 54, 100,
		ExperienceItem.BATTLESTAFF, Secondaries.WATER_ORB, new ItemStack(ItemID.WATER_BATTLESTAFF, 1)),
	EARTH_BATTLESTAFF(ItemID.EARTH_BATTLESTAFF, "Earth battlestaff", 58, 112.5,
		ExperienceItem.BATTLESTAFF, Secondaries.EARTH_ORB, new ItemStack(ItemID.EARTH_BATTLESTAFF, 1)),
	FIRE_BATTLESTAFF(ItemID.FIRE_BATTLESTAFF, "Fire battlestaff", 62, 125,
		ExperienceItem.BATTLESTAFF, Secondaries.FIRE_ORB, new ItemStack(ItemID.FIRE_BATTLESTAFF, 1)),
	AIR_BATTLESTAFF(ItemID.AIR_BATTLESTAFF, "Air battlestaff", 66, 137.5,
		ExperienceItem.BATTLESTAFF, Secondaries.AIR_ORB, new ItemStack(ItemID.AIR_BATTLESTAFF, 1)),
	// Gold Jewelery
	GOLD_RING(ItemID.GOLD_RING, "Gold ring", 5, 15,
		ExperienceItem.GOLD_BAR, null, new ItemStack(ItemID.GOLD_RING, 1)),
	GOLD_NECKLACE(ItemID.GOLD_NECKLACE, "Gold necklace", 6, 20,
		ExperienceItem.GOLD_BAR, null, new ItemStack(ItemID.GOLD_NECKLACE, 1)),
	GOLD_BRACELET(ItemID.GOLD_BRACELET, "Gold bracelet", 7, 25,
		ExperienceItem.GOLD_BAR, null, new ItemStack(ItemID.GOLD_BRACELET, 1)),
	GOLD_AMULET_U(ItemID.GOLD_AMULET_U, "Gold amulet (u)", 8, 30,
		ExperienceItem.GOLD_BAR, null, new ItemStack(ItemID.GOLD_AMULET_U, 1)),
	GOLD_TIARA(ItemID.GOLD_TIARA, "Gold tiara", 42, 35,
		ExperienceItem.GOLD_BAR, null, new ItemStack(ItemID.GOLD_TIARA, 1)),
	//Amethyst
	AMETHYST_BOLT_TIPS(ItemID.AMETHYST_BOLT_TIPS, "Amethyst bolt tips", 83, 60,
		ExperienceItem.AMETHYST, null, new ItemStack(ItemID.AMETHYST_BOLT_TIPS, 15)),
	AMETHYST_ARROWTIPS(ItemID.AMETHYST_ARROWTIPS, "Amethyst arrowtips", 85, 60,
		ExperienceItem.AMETHYST, null, new ItemStack(ItemID.AMETHYST_ARROWTIPS, 15)),
	AMETHYST_JAVELIN_HEADS(ItemID.AMETHYST_JAVELIN_HEADS, "Amethyst javelin heads", 87, 60,
		ExperienceItem.AMETHYST, null, new ItemStack(ItemID.AMETHYST_BOLT_TIPS, 5)),
	AMETHYST_DART_TIP(ItemID.AMETHYST_DART_TIP, "Amethyst dart tips", 89, 60,
		ExperienceItem.AMETHYST, null, new ItemStack(ItemID.AMETHYST_BOLT_TIPS, 8)),
	// RNG section
	// Soda Ash
	MOLTEN_GLASS(ItemID.MOLTEN_GLASS, "Furnace", 1, 20,
		ExperienceItem.SODA_ASH, Secondaries.BUCKET_OF_SAND, new ItemStack(ItemID.MOLTEN_GLASS, 1)),
	MOLTEN_GLASS_SPELL(ItemID.MOLTEN_GLASS, "SGM [1.3x]", 1, 10, true,
		ExperienceItem.SODA_ASH, Secondaries.BUCKET_OF_SAND, new ItemStack(ItemID.MOLTEN_GLASS, 1.3)),
	// Seaweed
	SODA_ASH(ItemID.SODA_ASH, "Soda Ash", 1, 0,
		ExperienceItem.SEAWEED, null, new ItemStack(ItemID.SODA_ASH, 1)),
	S_MOLTEN_GLASS_SPELL(ItemID.MOLTEN_GLASS, "SGM [1.3x]", 1, 10, true,
		ExperienceItem.SEAWEED, Secondaries.BUCKET_OF_SAND, new ItemStack(ItemID.MOLTEN_GLASS, 1.3)),
	// Giant Seaweed
	G_SODA_ASH(ItemID.SODA_ASH, "Soda Ash", 1, 0,
		ExperienceItem.GIANT_SEAWEED, null, new ItemStack(ItemID.SODA_ASH, 6)),
	MOLTEN_GLASS_SPELL_18_PICKUP(ItemID.MOLTEN_GLASS, "SGM 18:3 Pickup [1.6x]", 1, 60, true, // XP per seaweed
		ExperienceItem.GIANT_SEAWEED, Secondaries.BUCKET_OF_SAND_6, new ItemStack(ItemID.MOLTEN_GLASS, 9.6)),
	MOLTEN_GLASS_SPELL_18(ItemID.MOLTEN_GLASS, "SGM 18:3 [1.45x]", 1, 60, true, // XP per seaweed
		ExperienceItem.GIANT_SEAWEED, Secondaries.BUCKET_OF_SAND_6, new ItemStack(ItemID.MOLTEN_GLASS, 8.7)),
	MOLTEN_GLASS_SPELL_12(ItemID.MOLTEN_GLASS, "SGM 12:2 [1.45x]", 1, 60, true, // XP per seaweed
		ExperienceItem.GIANT_SEAWEED, Secondaries.BUCKET_OF_SAND_6, new ItemStack(ItemID.MOLTEN_GLASS, 8.7)),
	// String Jewlery
	UNBLESSED_SYMBOL(ItemID.UNBLESSED_SYMBOL, "String blessed symbol", 1, 4,
		ExperienceItem.UNSTRUNG_SYMBOL, Secondaries.BALL_OF_WOOL, new ItemStack(ItemID.UNBLESSED_SYMBOL, 1)),
	UNPOWERED_SYMBOL(ItemID.UNPOWERED_SYMBOL, "String emblem", 17, 4,
		ExperienceItem.UNSTRUNG_EMBLEM, Secondaries.BALL_OF_WOOL, new ItemStack(ItemID.UNPOWERED_SYMBOL, 1)),
	GOLD_AMULET(ItemID.GOLD_AMULET, "String gold amulet", 1, 4,
		ExperienceItem.GOLD_AMULET_U, Secondaries.BALL_OF_WOOL, new ItemStack(ItemID.GOLD_AMULET, 1)),
	OPAL_AMULET(ItemID.OPAL_AMULET, "String opal amulet", 1, 4,
		ExperienceItem.OPAL_AMULET_U, Secondaries.BALL_OF_WOOL, new ItemStack(ItemID.OPAL_AMULET, 1)),
	JADE_AMULET(ItemID.JADE_AMULET, "String jade amulet", 1, 4,
		ExperienceItem.JADE_AMULET_U, Secondaries.BALL_OF_WOOL, new ItemStack(ItemID.JADE_AMULET, 1)),
	TOPAZ_AMULET(ItemID.TOPAZ_AMULET, "String topaz amulet", 1, 4,
		ExperienceItem.TOPAZ_AMULET_U, Secondaries.BALL_OF_WOOL, new ItemStack(ItemID.TOPAZ_AMULET, 1)),
	SAPPHIRE_AMULET(ItemID.SAPPHIRE_AMULET, "String sapphire amulet", 1, 4,
		ExperienceItem.SAPPHIRE_AMULET_U, Secondaries.BALL_OF_WOOL, new ItemStack(ItemID.SAPPHIRE_AMULET, 1)),
	EMERALD_AMULET(ItemID.EMERALD_AMULET, "String emerald amulet", 1, 4,
		ExperienceItem.EMERALD_AMULET_U, Secondaries.BALL_OF_WOOL, new ItemStack(ItemID.EMERALD_AMULET, 1)),
	RUBY_AMULET(ItemID.RUBY_AMULET, "String ruby amulet", 1, 4,
		ExperienceItem.RUBY_AMULET_U, Secondaries.BALL_OF_WOOL, new ItemStack(ItemID.RUBY_AMULET, 1)),
	DIAMOND_AMULET(ItemID.DIAMOND_AMULET, "String diamond amulet", 1, 4,
		ExperienceItem.DIAMOND_AMULET_U, Secondaries.BALL_OF_WOOL, new ItemStack(ItemID.DIAMOND_AMULET, 1)),
	DRAGONSTONE_AMULET(ItemID.DRAGONSTONE_AMULET, "String dragonstone amulet", 1, 4,
		ExperienceItem.DRAGONSTONE_AMULET_U, Secondaries.BALL_OF_WOOL, new ItemStack(ItemID.DRAGONSTONE_AMULET, 1)),
	ONYX_AMULET(ItemID.ONYX_AMULET, "String onyx amulet", 90, 165,
		ExperienceItem.ONYX_AMULET_U, Secondaries.BALL_OF_WOOL, new ItemStack(ItemID.ONYX_AMULET, 1)),
	ZENYTE_AMULET(ItemID.ZENYTE_AMULET, "String zenyte amulet", 98, 200,
		ExperienceItem.ZENYTE_AMULET_U, Secondaries.BALL_OF_WOOL, new ItemStack(ItemID.ZENYTE_AMULET, 1)),
	// Other
	CROSSBOW_STRING(ItemID.CROSSBOW_STRING, "Crossbow string", 10, 15,
		ExperienceItem.SINEW, null, new ItemStack(ItemID.CROSSBOW_STRING, 1)),
	PERFECT_SHELL(ItemID.PERFECT_SHELL, "Perfect Shell", 1, 500,
		ExperienceItem.PERFECT_SHELL, null, null),
	/**
	 * Smithing
	 */
	// Smelting ores (Furnace)
	IRON_ORE(ItemID.IRON_BAR, "Iron bar", 15, 12.5,
		ExperienceItem.IRON_ORE, null, new ItemStack(ItemID.IRON_BAR, 1)),
	STEEL_ORE(ItemID.STEEL_BAR, "Steel bar", 30, 17.5,
		ExperienceItem.IRON_ORE, Secondaries.COAL_ORE_2, new ItemStack(ItemID.STEEL_BAR, 1)),
	SILVER_ORE(ItemID.SILVER_BAR, "Silver Bar", 20, 13.67,
		ExperienceItem.SILVER_ORE, null, new ItemStack(ItemID.SILVER_BAR, 1)),
	GOLD_ORE(ItemID.GOLD_BAR, "Gold bar", 40, 22.5,
		ExperienceItem.GOLD_ORE, null, new ItemStack(ItemID.GOLD_BAR, 1)),
	GOLD_ORE_GAUNTLETS(ItemID.GOLDSMITH_GAUNTLETS, "Goldsmith gauntlets", 40, 56.2,
		ExperienceItem.GOLD_ORE, null, new ItemStack(ItemID.GOLD_BAR, 1)),
	MITHRIL_ORE(ItemID.MITHRIL_BAR, "Mithril bar", 50, 30,
		ExperienceItem.MITHRIL_ORE, Secondaries.COAL_ORE_4, new ItemStack(ItemID.MITHRIL_BAR, 1)),
	ADAMANTITE_ORE(ItemID.ADAMANTITE_BAR, "Adamantite bar", 70, 37.5,
		ExperienceItem.ADAMANTITE_ORE, Secondaries.COAL_ORE_6, new ItemStack(ItemID.ADAMANTITE_BAR, 1)),
	RUNITE_ORE(ItemID.RUNITE_BAR, "Runite bar", 85, 50,
		ExperienceItem.RUNITE_ORE, Secondaries.COAL_ORE_8, new ItemStack(ItemID.RUNITE_BAR, 1)),
	// Blast Furnace
	BF_STEEL_ORE(ItemID.STEEL_BAR, "BF Steel Bar", 30, 17.5,
		ExperienceItem.IRON_ORE, Secondaries.COAL_ORE, new ItemStack(ItemID.STEEL_BAR, 1)),
	BF_MITHRIL_ORE(ItemID.MITHRIL_BAR, "BF Mithril Bar", 50, 30,
		ExperienceItem.MITHRIL_ORE, Secondaries.COAL_ORE_2, new ItemStack(ItemID.MITHRIL_BAR, 1)),
	BF_ADAMANTITE_ORE(ItemID.ADAMANTITE_BAR, "BF Adamantite bar", 70, 37.5,
		ExperienceItem.ADAMANTITE_ORE, Secondaries.COAL_ORE_3, new ItemStack(ItemID.ADAMANTITE_BAR, 1)),
	BF_RUNITE_ORE(ItemID.RUNITE_BAR, "BF Runite bar", 85, 50,
		ExperienceItem.RUNITE_ORE, Secondaries.COAL_ORE_4, new ItemStack(ItemID.RUNITE_BAR, 1)),
	// Smelting bars (Anvil)
	BRONZE_BAR(ItemID.BRONZE_BAR, "Bronze products", 1, 12.5,
		ExperienceItem.BRONZE_BAR, null, null),
	IRON_BAR(ItemID.IRON_BAR, "Iron products", 15, 25.0,
		ExperienceItem.IRON_BAR, null, null),
	STEEL_BAR(ItemID.STEEL_BAR, "Steel products", 30, 37.5,
		ExperienceItem.STEEL_BAR, null, null),
	CANNONBALLS(ItemID.CANNONBALL, "Cannonballs", 35, 25.5,
		ExperienceItem.STEEL_BAR, null, new ItemStack(ItemID.CANNONBALL, 4)),
	MITHRIL_BAR(ItemID.MITHRIL_BAR, "Mithril products", 50, 50.0,
		ExperienceItem.MITHRIL_BAR, null, null),
	ADAMANTITE_BAR(ItemID.ADAMANTITE_BAR, "Adamantite products", 70, 62.5,
		ExperienceItem.ADAMANTITE_BAR, null, null),
	RUNITE_BAR(ItemID.RUNITE_BAR, "Runite products", 85, 75.0,
		ExperienceItem.RUNITE_BAR, null, null),
	/**
	 * Farming
	 */
	ACORN(ItemID.OAK_SAPLING, "Oak sapling", 15, 0,
		ExperienceItem.ACORN, null, new ItemStack(ItemID.OAK_SAPLING, 1)),
	WILLOW_SEED(ItemID.WILLOW_SAPLING, "Willow sapling", 30, 0,
		ExperienceItem.WILLOW_SEED, null, new ItemStack(ItemID.WILLOW_SAPLING, 1)),
	MAPLE_SEED(ItemID.MAPLE_SAPLING, "Maple sapling", 45, 0,
		ExperienceItem.MAPLE_SEED, null, new ItemStack(ItemID.MAPLE_SAPLING, 1)),
	YEW_SEED(ItemID.YEW_SAPLING, "Yew sapling", 60, 0,
		ExperienceItem.YEW_SEED, null, new ItemStack(ItemID.YEW_SAPLING, 1)),
	MAGIC_SEED(ItemID.MAGIC_SAPLING, "Magic sapling", 75, 0,
		ExperienceItem.MAGIC_SEED, null, new ItemStack(ItemID.MAGIC_SAPLING, 1)),
	APPLE_TREE_SEED(ItemID.APPLE_SAPLING, "Apple sapling", 27, 0,
		ExperienceItem.APPLE_TREE_SEED, null, new ItemStack(ItemID.APPLE_SAPLING, 1)),
	BANANA_TREE_SEED(ItemID.BANANA_SAPLING, "Banana sapling", 33, 0,
		ExperienceItem.BANANA_TREE_SEED, null, new ItemStack(ItemID.BANANA_SAPLING, 1)),
	ORANGE_TREE_SEED(ItemID.ORANGE_SAPLING, "Orange sapling", 39, 0,
		ExperienceItem.ORANGE_TREE_SEED, null, new ItemStack(ItemID.ORANGE_SAPLING, 1)),
	CURRY_TREE_SEED(ItemID.CURRY_SAPLING, "Curry sapling", 42, 0,
		ExperienceItem.CURRY_TREE_SEED, null, new ItemStack(ItemID.CURRY_SAPLING, 1)),
	PINEAPPLE_SEED(ItemID.PINEAPPLE_SAPLING, "Pineapple sapling", 51, 0,
		ExperienceItem.PINEAPPLE_SEED, null, new ItemStack(ItemID.PINEAPPLE_SAPLING, 1)),
	PAPAYA_TREE_SEED(ItemID.PAPAYA_SAPLING, "Papaya sapling", 57, 0,
		ExperienceItem.PAPAYA_TREE_SEED, null, new ItemStack(ItemID.PAPAYA_SAPLING, 1)),
	PALM_TREE_SEED(ItemID.PALM_SAPLING, "Palm sapling", 68, 0,
		ExperienceItem.PALM_TREE_SEED, null, new ItemStack(ItemID.PALM_SAPLING, 1)),
	CALQUAT_TREE_SEED(ItemID.CALQUAT_SAPLING, "Calquat sapling", 72, 0,
		ExperienceItem.CALQUAT_TREE_SEED, null, new ItemStack(ItemID.CALQUAT_SAPLING, 1)),
	TEAK_SEED(ItemID.TEAK_SAPLING, "Teak sapling", 35, 0,
		ExperienceItem.TEAK_SEED, null, new ItemStack(ItemID.TEAK_SAPLING, 1)),
	MAHOGANY_SEED(ItemID.MAHOGANY_SAPLING, "Mahogany sapling", 55, 0,
		ExperienceItem.MAHOGANY_SEED, null, new ItemStack(ItemID.MAHOGANY_SAPLING, 1)),
	SPIRIT_SEED(ItemID.SPIRIT_SAPLING, "Spirit sapling", 83, 0,
		ExperienceItem.SPIRIT_SEED, null, new ItemStack(ItemID.SPIRIT_SAPLING, 1)),
	DRAGONFRUIT_TREE_SEED(ItemID.DRAGONFRUIT_TREE_SEED, "Dragonfruit sapling", 81, 0,
		ExperienceItem.DRAGONFRUIT_TREE_SEED, null, new ItemStack(ItemID.DRAGONFRUIT_SAPLING, 1)),
	CELASTRUS_SEED(ItemID.CELASTRUS_SEED, "Celastrus sapling", 85, 0,
		ExperienceItem.CELASTRUS_SEED, null, new ItemStack(ItemID.CELASTRUS_SAPLING, 1)),
	REDWOOD_TREE_SEED(ItemID.REDWOOD_TREE_SEED, "Redwood sapling", 90, 0,
		ExperienceItem.REDWOOD_TREE_SEED, null, new ItemStack(ItemID.REDWOOD_SAPLING, 1)),
	CRYSTAL_ACORN(ItemID.CRYSTAL_ACORN, "Crystal sapling", 74, 0,
		ExperienceItem.CRYSTAL_ACORN, null, new ItemStack(ItemID.CRYSTAL_SAPLING, 1)),
	HESPORI_SEED(ItemID.HESPORI_SEED, "Hespori", 65, 12662,
		ExperienceItem.HESPORI_SEED, null, null),

	OAK_SAPPLING(ItemID.OAK_SAPLING, "Oak tree", 15, 481.3,
		ExperienceItem.OAK_SAPLING, null, null),
	WILLOW_SAPLING(ItemID.WILLOW_SAPLING, "Willow tree", 30, 1481.5,
		ExperienceItem.WILLOW_SAPLING, null, null),
	MAPLE_SAPLING(ItemID.MAPLE_SAPLING, "Maple tree", 45, 3448.4,
		ExperienceItem.MAPLE_SAPLING, null, null),
	YEW_SAPLING(ItemID.YEW_SAPLING, "Yew tree", 60, 7150.9,
		ExperienceItem.YEW_SAPLING, null, null),
	MAGIC_SAPLING(ItemID.MAGIC_SAPLING, "Magic tree", 75, 13913.8,
		ExperienceItem.MAGIC_SAPLING, null, null),
	APPLE_TREE_SAPLING(ItemID.APPLE_SAPLING, "Apple tree", 27, 1272.5,
		ExperienceItem.APPLE_TREE_SAPLING, null, null),
	BANANA_TREE_SAPLING(ItemID.BANANA_SAPLING, "Banana tree", 33, 1841.5,
		ExperienceItem.BANANA_TREE_SAPLING, null, null),
	ORANGE_TREE_SAPLING(ItemID.ORANGE_SAPLING, "Orange tree", 39, 2586.7,
		ExperienceItem.ORANGE_TREE_SAPLING, null, null),
	CURRY_TREE_SAPLING(ItemID.CURRY_SAPLING, "Curry tree", 42, 3036.9,
		ExperienceItem.CURRY_TREE_SAPLING, null, null),
	PINEAPPLE_SAPLING(ItemID.PINEAPPLE_SAPLING, "Pineapple tree", 51, 4791.7,
		ExperienceItem.PINEAPPLE_SAPLING, null, null),
	PAPAYA_TREE_SAPLING(ItemID.PAPAYA_SAPLING, "Papaya tree", 57, 6380.4,
		ExperienceItem.PAPAYA_TREE_SAPLING, null, null),
	PALM_TREE_SAPLING(ItemID.PALM_SAPLING, "Palm tree", 68, 10509.6,
		ExperienceItem.PALM_TREE_SAPLING, null, null),
	CALQUAT_TREE_SAPLING(ItemID.CALQUAT_SAPLING, "Calquat tree", 72, 12516.5,
		ExperienceItem.CALQUAT_TREE_SAPLING, null, null),
	TEAK_SAPLING(ItemID.TEAK_SAPLING, "Teak tree", 35, 7325,
		ExperienceItem.TEAK_SAPLING, null, null),
	MAHOGANY_SAPLING(ItemID.MAHOGANY_SAPLING, "Mahogany tree", 55, 15783,
		ExperienceItem.MAHOGANY_SAPLING, null, null),
	SPIRIT_SAPLING(ItemID.SPIRIT_SAPLING, "Spirit tree", 83, 19500,
		ExperienceItem.SPIRIT_SAPLING, null, null),
	DRAGONFRUIT_SAPLING(ItemID.DRAGONFRUIT_SAPLING, "Dragonfruit tree", 81, 17825,
		ExperienceItem.DRAGONFRUIT_SAPLING, null, null),
	CELASTRUS_SAPLING(ItemID.CELASTRUS_SAPLING, "Celastrus tree", 85, 14404.5,
		ExperienceItem.CELASTRUS_SAPLING, null, null),
	REDWOOD_SAPLING(ItemID.REDWOOD_SAPLING, "Redwood tree", 90, 22680,
		ExperienceItem.REDWOOD_SAPLING, null, null),
	CRYSTAL_SAPLING(ItemID.CRYSTAL_SAPLING, "Crystal tree", 74, 13366,
		ExperienceItem.CRYSTAL_SAPLING, null, null),

	/**
	 * Fletching
	 */
	// General
	F_HEADLESS_ARROWS(ItemID.HEADLESS_ARROW, "Headless arrow", 1, 1,
		ExperienceItem.F_ARROW_SHAFT, Secondaries.FEATHER, new ItemStack(ItemID.HEADLESS_ARROW, 1)),
	// Logs
	F_ARROW_SHAFT(ItemID.ARROW_SHAFT, "Arrow shaft", 1, 5,
		ExperienceItem.F_LOGS, null, new ItemStack(ItemID.ARROW_SHAFT, 15)),
	F_SHORTBOW_U(ItemID.SHORTBOW_U, "Shortbow (u)", 5, 5,
		ExperienceItem.F_LOGS, null, new ItemStack(ItemID.SHORTBOW_U, 1)),
	F_WOODEN_STOCK(ItemID.WOODEN_STOCK, "Wooden stock", 9, 6,
		ExperienceItem.F_LOGS, null, new ItemStack(ItemID.WOODEN_STOCK, 1)),
	F_LONGBOW_U(ItemID.LONGBOW_U, "Longbow (u)", 10, 10,
		ExperienceItem.F_LOGS, null, new ItemStack(ItemID.LONGBOW_U, 1)),
	// Oak Logs
	F_OAK_ARROW_SHAFT(ItemID.ARROW_SHAFT, "Arrow shaft", 15, 10,
		ExperienceItem.F_OAK_LOGS, null, new ItemStack(ItemID.ARROW_SHAFT, 30)),
	F_OAK_SHORTBOW_U(ItemID.OAK_SHORTBOW_U, "Oak shortbow (u)", 20, 16.5,
		ExperienceItem.F_OAK_LOGS, null, new ItemStack(ItemID.OAK_SHORTBOW_U, 1)),
	F_OAK_STOCK(ItemID.OAK_STOCK, "Oak stock", 24, 16,
		ExperienceItem.F_OAK_LOGS, null, new ItemStack(ItemID.OAK_STOCK, 1)),
	F_OAK_LONGBOW_U(ItemID.OAK_LONGBOW_U, "Oak longbow (u)", 25, 25,
		ExperienceItem.F_OAK_LOGS, null, new ItemStack(ItemID.OAK_LONGBOW_U, 1)),
	F_OAK_SHIELD(ItemID.OAK_SHIELD, "Oak shield", 27, 50 * 0.5,
		ExperienceItem.F_OAK_LOGS, null, new ItemStack(ItemID.OAK_SHIELD, 0.5)),
	// Willow Logs
	F_WILLOW_ARROW_SHAFT(ItemID.ARROW_SHAFT, "Arrow shaft", 30, 15,
		ExperienceItem.F_WILLOW_LOGS, null, new ItemStack(ItemID.ARROW_SHAFT, 45)),
	F_WILLOW_SHORTBOW_U(ItemID.WILLOW_SHORTBOW_U, "Willow shortbow (u)", 35, 33.3,
		ExperienceItem.F_WILLOW_LOGS, null, new ItemStack(ItemID.WILLOW_SHORTBOW_U, 1)),
	F_WILLOW_STOCK(ItemID.WILLOW_STOCK, "Willow stock", 39, 22,
		ExperienceItem.F_WILLOW_LOGS, null, new ItemStack(ItemID.WILLOW_STOCK, 1)),
	F_WILLOW_LONGBOW_U(ItemID.WILLOW_LONGBOW_U, "Willow longbow (u)", 40, 41.5,
		ExperienceItem.F_WILLOW_LOGS, null, new ItemStack(ItemID.WILLOW_LONGBOW_U, 1)),
	F_WILLOW_SHIELD(ItemID.OAK_SHIELD, "Willow shield", 42, 83 * 0.5,
		ExperienceItem.F_WILLOW_LOGS, null, new ItemStack(ItemID.WILLOW_SHIELD, 0.5)),
	// Teak Logs
	F_TEAK_STOCK(ItemID.TEAK_STOCK, "Teak stock", 46, 27,
		ExperienceItem.F_TEAK_LOGS, null, new ItemStack(ItemID.TEAK_STOCK, 1)),
	// Maple Logs
	F_MAPLE_ARROW_SHAFT(ItemID.ARROW_SHAFT, "Arrow shaft", 45, 20,
		ExperienceItem.F_MAPLE_LOGS, null, new ItemStack(ItemID.ARROW_SHAFT, 60)),
	F_MAPLE_SHORTBOW_U(ItemID.MAPLE_SHORTBOW_U, "Maple shortbow (u)", 50, 50,
		ExperienceItem.F_MAPLE_LOGS, null, new ItemStack(ItemID.MAPLE_SHORTBOW_U, 1)),
	F_MAPLE_STOCK(ItemID.MAPLE_STOCK, "Maple stock", 54, 32,
		ExperienceItem.F_MAPLE_LOGS, null, new ItemStack(ItemID.MAPLE_STOCK, 1)),
	F_MAPLE_LONGBOW_U(ItemID.MAPLE_LONGBOW_U, "Maple longbow (u)", 55, 58.3,
		ExperienceItem.F_MAPLE_LOGS, null, new ItemStack(ItemID.MAPLE_LONGBOW_U, 1)),
	F_MAPLE_SHIELD(ItemID.MAPLE_SHIELD, "Maple shield", 57, 116.5 * 0.5,
		ExperienceItem.F_MAPLE_LOGS, null, new ItemStack(ItemID.MAPLE_SHIELD, 0.5)),
	// Mahogany Logs
	F_MAHOGANY_STOCK(ItemID.MAHOGANY_STOCK, "Mahogany stock", 61, 41,
		ExperienceItem.F_MAHOGANY_LOGS, null, new ItemStack(ItemID.MAHOGANY_STOCK, 1)),
	// Yew Logs
	F_YEW_ARROW_SHAFT(ItemID.ARROW_SHAFT, "Arrow shaft", 60, 25,
		ExperienceItem.F_YEW_LOGS, null, new ItemStack(ItemID.ARROW_SHAFT, 75)),
	F_YEW_SHORTBOW_U(ItemID.YEW_SHORTBOW_U, "Yew shortbow (u)", 65, 67.5,
		ExperienceItem.F_YEW_LOGS, null, new ItemStack(ItemID.YEW_SHORTBOW_U, 1)),
	F_YEW_STOCK(ItemID.YEW_STOCK, "Yew stock", 69, 50,
		ExperienceItem.F_YEW_LOGS, null, new ItemStack(ItemID.YEW_STOCK, 1)),
	F_YEW_LONGBOW_U(ItemID.YEW_LONGBOW_U, "Yew longbow (u)", 70, 75,
		ExperienceItem.F_YEW_LOGS, null, new ItemStack(ItemID.YEW_LONGBOW_U, 1)),
	F_YEW_SHIELD(ItemID.YEW_SHIELD, "Yew shield", 72, 150 * 0.5,
		ExperienceItem.F_YEW_LOGS, null, new ItemStack(ItemID.YEW_SHIELD, 0.5)),
	// Magic Logs
	F_MAGIC_ARROW_SHAFT(ItemID.ARROW_SHAFT, "Arrow shaft", 75, 30,
		ExperienceItem.F_MAGIC_LOGS, null, new ItemStack(ItemID.ARROW_SHAFT, 90)),
	F_MAGIC_STOCK(ItemID.MAGIC_STOCK, "Magic stock", 78, 70,
		ExperienceItem.F_MAGIC_LOGS, null, new ItemStack(ItemID.MAGIC_STOCK, 1)),
	F_MAGIC_SHORTBOW_U(ItemID.MAGIC_SHORTBOW_U, "Magic shortbow (u)", 80, 83.3,
		ExperienceItem.F_MAGIC_LOGS, null, new ItemStack(ItemID.MAGIC_SHORTBOW_U, 1)),
	F_MAGIC_LONGBOW_U(ItemID.MAGIC_LONGBOW_U, "Magic longbow (u)", 85, 91.5,
		ExperienceItem.F_MAGIC_LOGS, null, new ItemStack(ItemID.MAGIC_LONGBOW_U, 1)),
	F_MAGIC_SHIELD(ItemID.MAGIC_SHIELD, "Magic shield", 87, 183 * 0.5,
		ExperienceItem.F_MAGIC_LOGS, null, new ItemStack(ItemID.MAGIC_SHIELD, 0.5)),
	// Redwood Logs
	F_REDWOOD_ARROW_SHAFT(ItemID.ARROW_SHAFT, "Arrow shaft", 90, 35,
		ExperienceItem.F_REDWOOD_LOGS, null, new ItemStack(ItemID.ARROW_SHAFT, 105)),
	F_REDWOOD_SHIELD(ItemID.REDWOOD_SHIELD, "Redwood shield", 92, 216 * 0.5,
		ExperienceItem.F_REDWOOD_LOGS, null, new ItemStack(ItemID.REDWOOD_SHIELD, 0.5)),
	// Strung Bows
	F_SHORTBOW(ItemID.SHORTBOW, "Shortbow", 5, 5,
		ExperienceItem.F_SHORTBOW_U, Secondaries.BOW_STRING, new ItemStack(ItemID.SHORTBOW, 1)),
	F_LONGBOW(ItemID.LONGBOW, "Longbow", 10, 10,
		ExperienceItem.F_LONGBOW_U, Secondaries.BOW_STRING, new ItemStack(ItemID.LONGBOW, 1)),
	F_OAK_SHORTBOW(ItemID.OAK_SHORTBOW, "Oak shortbow", 20, 16.5,
		ExperienceItem.F_OAK_SHORTBOW_U, Secondaries.BOW_STRING, new ItemStack(ItemID.OAK_SHORTBOW, 1)),
	F_OAK_LONGBOW(ItemID.OAK_LONGBOW, "Oak longbow", 25, 25,
		ExperienceItem.F_OAK_LONGBOW_U, Secondaries.BOW_STRING, new ItemStack(ItemID.OAK_LONGBOW, 1)),
	F_WILLOW_SHORTBOW(ItemID.WILLOW_SHORTBOW, "Willow shortbow", 35, 33.2,
		ExperienceItem.F_WILLOW_SHORTBOW_U, Secondaries.BOW_STRING, new ItemStack(ItemID.WILLOW_SHORTBOW, 1)),
	F_WILLOW_LONGBOW(ItemID.WILLOW_LONGBOW, "Willow longbow", 40, 41.5,
		ExperienceItem.F_WILLOW_LONGBOW_U, Secondaries.BOW_STRING, new ItemStack(ItemID.WILLOW_LONGBOW, 1)),
	F_MAPLE_SHORTBOW(ItemID.MAPLE_SHORTBOW, "Maple shortbow", 50, 50,
		ExperienceItem.F_MAPLE_SHORTBOW_U, Secondaries.BOW_STRING, new ItemStack(ItemID.MAPLE_SHORTBOW, 1)),
	F_MAPLE_LONGBOW(ItemID.MAPLE_LONGBOW, "Maple longbow", 55, 58.2,
		ExperienceItem.F_MAPLE_LONGBOW_U, Secondaries.BOW_STRING, new ItemStack(ItemID.MAPLE_LONGBOW, 1)),
	F_YEW_SHORTBOW(ItemID.YEW_SHORTBOW, "Yew shortbow", 65, 67.5,
		ExperienceItem.F_YEW_SHORTBOW_U, Secondaries.BOW_STRING, new ItemStack(ItemID.YEW_SHORTBOW, 1)),
	F_YEW_LONGBOW(ItemID.YEW_LONGBOW, "Yew longbow", 70, 75,
		ExperienceItem.F_YEW_LONGBOW_U, Secondaries.BOW_STRING, new ItemStack(ItemID.YEW_LONGBOW, 1)),
	F_MAGIC_SHORTBOW(ItemID.MAGIC_SHORTBOW, "Magic shortbow", 80, 83.2,
		ExperienceItem.F_MAGIC_SHORTBOW_U, Secondaries.BOW_STRING, new ItemStack(ItemID.MAGIC_SHORTBOW, 1)),
	F_MAGIC_LONGBOW(ItemID.MAGIC_LONGBOW, "Magic longbow", 85, 91.5,
		ExperienceItem.F_MAGIC_LONGBOW_U, Secondaries.BOW_STRING, new ItemStack(ItemID.MAGIC_LONGBOW, 1)),
	// Darts
	F_BRONZE_DARTS(ItemID.BRONZE_DART, "Bronze dart", 10, 1.8,
		ExperienceItem.F_BRONZE_DART_TIP, Secondaries.FEATHER, new ItemStack(ItemID.BRONZE_DART, 1)),
	F_IRON_DARTS(ItemID.IRON_DART, "Iron dart", 22, 3.8,
		ExperienceItem.F_IRON_DART_TIP, Secondaries.FEATHER, new ItemStack(ItemID.IRON_DART, 1)),
	F_STEEL_DARTS(ItemID.STEEL_DART, "Steel dart", 37, 7.5,
		ExperienceItem.F_STEEL_DART_TIP, Secondaries.FEATHER, new ItemStack(ItemID.STEEL_DART, 1)),
	F_MITHRIL_DARTS(ItemID.MITHRIL_DART, "Mithril dart", 52, 11.2,
		ExperienceItem.F_MITHRIL_DART_TIP, Secondaries.FEATHER, new ItemStack(ItemID.MITHRIL_DART, 1)),
	F_ADAMANT_DARTS(ItemID.ADAMANT_DART, "Adamant dart", 67, 15,
		ExperienceItem.F_ADAMANT_DART_TIP, Secondaries.FEATHER, new ItemStack(ItemID.ADAMANT_DART, 1)),
	F_RUNE_DARTS(ItemID.RUNE_DART, "Rune dart", 81, 18.8,
		ExperienceItem.F_RUNE_DART_TIP, Secondaries.FEATHER, new ItemStack(ItemID.RUNE_DART, 1)),
	F_AMETHYST_DARTS(ItemID.AMETHYST_DART, "Amethyst dart", 90, 21,
		ExperienceItem.F_AMETHYST_DART_TIP, Secondaries.FEATHER, new ItemStack(ItemID.AMETHYST_DART, 1)),
	F_DRAGON_DARTS(ItemID.DRAGON_DART, "Dragon dart", 95, 25,
		ExperienceItem.F_DRAGON_DART_TIP, Secondaries.FEATHER, new ItemStack(ItemID.DRAGON_DART, 1)),
	// Arrows
	F_BRONZE_ARROW(ItemID.BRONZE_ARROW, "Bronze arrow", 1, 1,
		ExperienceItem.F_BRONZE_ARROWTIPS, Secondaries.HEADLESS_ARROW, new ItemStack(ItemID.BRONZE_ARROW, 1)),
	F_IRON_ARROW(ItemID.IRON_ARROW, "Iron arrow", 1, 2.5,
		ExperienceItem.F_IRON_ARROWTIPS, Secondaries.HEADLESS_ARROW, new ItemStack(ItemID.IRON_ARROW, 1)),
	F_STEEL_ARROW(ItemID.STEEL_ARROW, "Steel arrow", 30, 5,
		ExperienceItem.F_STEEL_ARROWTIPS, Secondaries.HEADLESS_ARROW, new ItemStack(ItemID.STEEL_ARROW, 1)),
	F_MITHRIL_ARROW(ItemID.MITHRIL_ARROW, "Mithril arrow", 45, 7.5,
		ExperienceItem.F_MITHRIL_ARROWTIPS, Secondaries.HEADLESS_ARROW, new ItemStack(ItemID.MITHRIL_ARROW, 1)),
	F_BROAD_ARROW(ItemID.BROAD_ARROWS, "Broad arrow", 52, 10,
		ExperienceItem.F_BROAD_ARROWHEADS, Secondaries.HEADLESS_ARROW, new ItemStack(ItemID.BROAD_ARROWS, 1)),
	F_ADAMANT_ARROW(ItemID.ADAMANT_ARROW, "Adamant arrow", 60, 10,
		ExperienceItem.F_ADAMANT_ARROWTIPS, Secondaries.HEADLESS_ARROW, new ItemStack(ItemID.ADAMANT_ARROW, 1)),
	F_RUNE_ARROW(ItemID.RUNE_ARROW, "Rune arrow", 75, 12.5,
		ExperienceItem.F_RUNE_ARROWTIPS, Secondaries.HEADLESS_ARROW, new ItemStack(ItemID.RUNE_ARROW, 1)),
	F_AMETHYST_ARROW(ItemID.AMETHYST_ARROW, "Amethyst arrow", 82, 13.5,
		ExperienceItem.F_AMETHYST_ARROWTIPS, Secondaries.HEADLESS_ARROW, new ItemStack(ItemID.AMETHYST_ARROW, 1)),
	F_DRAGON_ARROW(ItemID.DRAGON_ARROW, "Dragon arrow", 90, 15,
		ExperienceItem.F_DRAGON_ARROWTIPS, Secondaries.HEADLESS_ARROW, new ItemStack(ItemID.DRAGON_ARROW, 1)),
	// Bolts
	BRONZE_BOLTS(ItemID.BRONZE_BOLTS, "Bronze bolts", 9, 0.5,
		ExperienceItem.BRONZE_BOLTS, Secondaries.FEATHER, new ItemStack(ItemID.BRONZE_BOLTS, 1)),
	BLURITE_BOLTS(ItemID.BLURITE_BOLTS, "Blurite bolts", 24, 1,
		ExperienceItem.BLURITE_BOLTS, Secondaries.FEATHER, new ItemStack(ItemID.IRON_BOLTS, 1)),
	KEBBIT_BOLTS(ItemID.KEBBIT_BOLTS, "Kebbit bolts", 32, 5.8,
		ExperienceItem.KEBBIT_BOLTS, null, new ItemStack(ItemID.KEBBIT_BOLTS, 12)),
	IRON_BOLTS(ItemID.IRON_BOLTS, "Iron bolts", 39, 1.5,
		ExperienceItem.IRON_BOLTS, Secondaries.FEATHER, new ItemStack(ItemID.IRON_BOLTS, 1)),
	SILVER_BOLTS(ItemID.SILVER_BOLTS, "Silver bolts", 43, 2.5,
		ExperienceItem.SILVER_BOLTS, Secondaries.FEATHER, new ItemStack(ItemID.SILVER_BOLTS, 1)),
	STEEL_BOLTS(ItemID.STEEL_BOLTS, "Steel bolts", 46, 3.5,
		ExperienceItem.STEEL_BOLTS, Secondaries.FEATHER, new ItemStack(ItemID.STEEL_BOLTS, 1)),
	MITHRIL_BOLTS(ItemID.MITHRIL_BOLTS, "Mithril bolts", 54, 5,
		ExperienceItem.MITHRIL_BOLTS, Secondaries.FEATHER, new ItemStack(ItemID.MITHRIL_BOLTS, 1)),
	BROAD_BOLTS(ItemID.BROAD_BOLTS, "Broad bolts", 55, 3,
		ExperienceItem.BROAD_BOLTS, Secondaries.FEATHER, new ItemStack(ItemID.BROAD_BOLTS, 1)),
	ADAMANT_BOLTS(ItemID.ADAMANT_BOLTS, "Adamant bolts", 61, 7,
		ExperienceItem.ADAMANT_BOLTS, Secondaries.FEATHER, new ItemStack(ItemID.ADAMANT_BOLTS, 1)),
	SUNLIGHT_ANTLER_BOLTS(ItemID.SUNLIGHT_ANTLER_BOLTS, "Sunlight antler bolts", 62, 10,
		ExperienceItem.SUNLIGHT_ANTLER_BOLTS, null, new ItemStack(ItemID.SUNLIGHT_ANTLER_BOLTS, 12)),
	RUNE_BOLTS(ItemID.RUNITE_BOLTS, "Runite bolts", 69, 10,
		ExperienceItem.RUNE_BOLTS, Secondaries.FEATHER, new ItemStack(ItemID.RUNITE_BOLTS, 1)),
	MOONLIGHT_ANTLER_BOLTS(ItemID.MOONLIGHT_ANTLER_BOLTS, "Moonlight antler bolts", 72, 12,
		ExperienceItem.MOONLIGHT_ANTLER_BOLTS, null, new ItemStack(ItemID.MOONLIGHT_ANTLER_BOLTS, 12)),
	DRAGON_BOLTS(ItemID.DRAGON_BOLTS, "Dragon bolts", 84, 12,
		ExperienceItem.DRAGON_BOLTS, Secondaries.FEATHER, new ItemStack(ItemID.DRAGON_BOLTS, 1)),
	// Unstrung Crossbows
	F_BRONZE_CROSSBOW_U(ItemID.WOODEN_STOCK, "Bronze crossbow (u)", 9, 12,
		ExperienceItem.F_WOODEN_STOCK, Secondaries.BRONZE_LIMBS, new ItemStack(ItemID.BRONZE_CROSSBOW_U, 1)),
	F_BLURITE_CROSSBOW_U(ItemID.OAK_STOCK, "Blurite crossbow (u)", 24, 32,
		ExperienceItem.F_OAK_STOCK, Secondaries.BLURITE_LIMBS, new ItemStack(ItemID.BLURITE_CROSSBOW_U, 1)),
	F_IRON_CROSSBOW_U(ItemID.WILLOW_STOCK, "Iron crossbow (u)", 39, 44,
		ExperienceItem.F_WILLOW_STOCK, Secondaries.IRON_LIMBS, new ItemStack(ItemID.IRON_CROSSBOW_U, 1)),
	F_STEEL_CROSSBOW_U(ItemID.TEAK_STOCK, "Steel crossbow (u)", 46, 54,
		ExperienceItem.F_TEAK_STOCK, Secondaries.STEEL_LIMBS, new ItemStack(ItemID.STEEL_CROSSBOW_U, 1)),
	F_MITHRIL_CROSSBOW_U(ItemID.MAPLE_STOCK, "Mithril crossbow (u)", 54, 64,
		ExperienceItem.F_MAPLE_STOCK, Secondaries.MITHRIL_LIMBS, new ItemStack(ItemID.MITHRIL_CROSSBOW_U, 1)),
	F_ADAMANTITE_CROSSBOW_U(ItemID.MAHOGANY_STOCK, "Adamantite crossbow (u)", 61, 82,
		ExperienceItem.F_MAHOGANY_STOCK, Secondaries.ADAMANTITE_LIMBS, new ItemStack(ItemID.ADAMANT_CROSSBOW_U, 1)),
	F_RUNITE_CROSSBOW_U(ItemID.YEW_STOCK, "Runite crossbow (u)", 69, 100,
		ExperienceItem.F_YEW_STOCK, Secondaries.RUNITE_LIMBS, new ItemStack(ItemID.RUNITE_CROSSBOW_U, 1)),
	F_DRAGON_CROSSBOW_U(ItemID.MAGIC_STOCK, "Dragon crossbow (u)", 78, 135,
		ExperienceItem.F_MAGIC_STOCK, Secondaries.DRAGON_LIMBS, new ItemStack(ItemID.DRAGON_CROSSBOW_U, 1)),
	// Crossbows
	F_BRONZE_CROSSBOW(ItemID.BRONZE_CROSSBOW_U, "Bronze crossbow", 9, 6,
		ExperienceItem.F_BRONZE_CROSSBOW_U, Secondaries.CROSSBOW_STRING, new ItemStack(ItemID.BRONZE_CROSSBOW, 1)),
	F_BLURITE_CROSSBOW(ItemID.BLURITE_CROSSBOW_U, "Blurite crossbow", 24, 16,
		ExperienceItem.F_BLURITE_CROSSBOW_U, Secondaries.CROSSBOW_STRING, new ItemStack(ItemID.BLURITE_CROSSBOW, 1)),
	F_IRON_CROSSBOW(ItemID.IRON_CROSSBOW_U, "Iron crossbow", 39, 22,
		ExperienceItem.F_IRON_CROSSBOW_U, Secondaries.CROSSBOW_STRING, new ItemStack(ItemID.IRON_CROSSBOW, 1)),
	F_STEEL_CROSSBOW(ItemID.STEEL_CROSSBOW_U, "Steel crossbow", 46, 27,
		ExperienceItem.F_STEEL_CROSSBOW_U, Secondaries.CROSSBOW_STRING, new ItemStack(ItemID.STEEL_CROSSBOW, 1)),
	F_MITHRIL_CROSSBOW(ItemID.MITHRIL_CROSSBOW_U, "Mithril crossbow", 54, 32,
		ExperienceItem.F_MITHRIL_CROSSBOW_U, Secondaries.CROSSBOW_STRING, new ItemStack(ItemID.MITHRIL_CROSSBOW, 1)),
	F_ADAMANTITE_CROSSBOW(ItemID.ADAMANT_CROSSBOW_U, "Adamant crossbow", 61, 41,
		ExperienceItem.F_ADAMANTITE_CROSSBOW_U, Secondaries.CROSSBOW_STRING, new ItemStack(ItemID.ADAMANT_CROSSBOW, 1)),
	F_RUNITE_CROSSBOW(ItemID.RUNITE_CROSSBOW_U, "Rune crossbow", 69, 50,
		ExperienceItem.F_RUNITE_CROSSBOW_U, Secondaries.CROSSBOW_STRING, new ItemStack(ItemID.RUNE_CROSSBOW, 1)),
	F_DRAGON_CROSSBOW(ItemID.DRAGON_CROSSBOW_U, "Dragon crossbow", 78, 70,
		ExperienceItem.F_DRAGON_CROSSBOW_U, Secondaries.CROSSBOW_STRING, new ItemStack(ItemID.DRAGON_CROSSBOW, 1)),
	// Other
	F_BATTLESTAFF(ItemID.BATTLESTAFF, "Battlestaff", 40, 80,
		ExperienceItem.F_CELASTRUS_BARK, null, new ItemStack(ItemID.BATTLESTAFF, 1)),
	// Javelin Heads
	BRONZE_JAVELINS(ItemID.BRONZE_JAVELIN, "Bronze javelins", 3, 1,
		ExperienceItem.BRONZE_JAVELIN_HEADS, Secondaries.JAVELIN_SHAFT, new ItemStack(ItemID.BRONZE_JAVELIN, 1)),
	IRON_JAVELINS(ItemID.IRON_JAVELIN, "Iron javelins", 17, 2,
		ExperienceItem.IRON_JAVELIN_HEADS, Secondaries.JAVELIN_SHAFT, new ItemStack(ItemID.IRON_JAVELIN, 1)),
	STEEL_JAVELINS(ItemID.STEEL_JAVELIN, "Steel javelins", 32, 5,
		ExperienceItem.STEEL_JAVELIN_HEADS, Secondaries.JAVELIN_SHAFT, new ItemStack(ItemID.STEEL_JAVELIN, 1)),
	MITHRIL_JAVELINS(ItemID.MITHRIL_JAVELIN, "Mithril javelins", 47, 8,
		ExperienceItem.MITHRIL_JAVELIN_HEADS, Secondaries.JAVELIN_SHAFT, new ItemStack(ItemID.MITHRIL_JAVELIN, 1)),
	ADAMANT_JAVELINS(ItemID.ADAMANT_JAVELIN, "Adamant javelins", 62, 10,
		ExperienceItem.ADAMANT_JAVELIN_HEADS, Secondaries.JAVELIN_SHAFT, new ItemStack(ItemID.ADAMANT_JAVELIN, 1)),
	RUNE_JAVELINS(ItemID.RUNE_JAVELIN, "Rune javelins", 77, 12.4,
		ExperienceItem.RUNE_JAVELIN_HEADS, Secondaries.JAVELIN_SHAFT, new ItemStack(ItemID.RUNE_JAVELIN, 1)),
	AMETHYST_JAVELINS(ItemID.AMETHYST_JAVELIN, "Amethyst javelins", 84, 13.5,
		ExperienceItem.AMETHYST_JAVELIN_HEADS, Secondaries.JAVELIN_SHAFT, new ItemStack(ItemID.AMETHYST_JAVELIN, 1)),
	DRAGON_JAVELINS(ItemID.DRAGON_JAVELIN, "Dragon javelins", 92, 15,
		ExperienceItem.DRAGON_JAVELIN_HEADS, Secondaries.JAVELIN_SHAFT, new ItemStack(ItemID.DRAGON_JAVELIN, 1)),
	/**
	 * Hunter
	 */
	BIRD_HOUSE(ItemID.BIRD_HOUSE, "Bird house", 5, 280, ExperienceItem.H_LOGS, null, null),
	PREBUILT_BIRD_HOUSE(ItemID.BIRD_HOUSE, "Bird house", 5, 280, ExperienceItem.BIRD_HOUSE, null, null),
	OAK_BIRD_HOUSE(ItemID.OAK_BIRD_HOUSE, "Oak bird house", 14, 420, ExperienceItem.H_OAK_LOGS, null, null),
	PREBUILT_OAK_BIRD_HOUSE(ItemID.OAK_BIRD_HOUSE, "Oak bird house", 14, 420, ExperienceItem.OAK_BIRD_HOUSE, null, null),
	WILLOW_BIRD_HOUSE(ItemID.WILLOW_BIRD_HOUSE, "Willow bird house", 24, 560, ExperienceItem.H_WILLOW_LOGS, null, null),
	PREBUILT_WILLOW_BIRD_HOUSE(ItemID.WILLOW_BIRD_HOUSE, "Willow bird house", 24, 560, ExperienceItem.WILLOW_BIRD_HOUSE, null, null),
	TEAK_BIRD_HOUSE(ItemID.TEAK_BIRD_HOUSE, "Teak bird house", 34, 700, ExperienceItem.H_TEAK_LOGS, null, null),
	PREBUILT_TEAK_BIRD_HOUSE(ItemID.TEAK_BIRD_HOUSE, "Teak bird house", 34, 700, ExperienceItem.TEAK_BIRD_HOUSE, null, null),
	MAPLE_BIRD_HOUSE(ItemID.MAPLE_BIRD_HOUSE, "Maple bird house", 44, 820, ExperienceItem.H_MAPLE_LOGS, null, null),
	PREBUILT_MAPLE_BIRD_HOUSE(ItemID.MAPLE_BIRD_HOUSE, "Maple bird house", 44, 820, ExperienceItem.MAPLE_BIRD_HOUSE, null, null),
	MAHOGANY_BIRD_HOUSE(ItemID.MAHOGANY_BIRD_HOUSE, "Mahogany bird house", 49, 960, ExperienceItem.H_MAHOGANY_LOGS, null, null),
	PREBUILT_MAHOGANY_BIRD_HOUSE(ItemID.MAHOGANY_BIRD_HOUSE, "Mahogany bird house", 49, 960, ExperienceItem.MAHOGANY_BIRD_HOUSE, null, null),
	YEW_BIRD_HOUSE(ItemID.YEW_BIRD_HOUSE, "Yew bird house", 59, 1020, ExperienceItem.H_YEW_LOGS, null, null),
	PREBUILT_YEW_BIRD_HOUSE(ItemID.YEW_BIRD_HOUSE, "Yew bird house", 59, 1020, ExperienceItem.YEW_BIRD_HOUSE, null, null),
	MAGIC_BIRD_HOUSE(ItemID.MAGIC_BIRD_HOUSE, "Magic bird house", 74, 1140, ExperienceItem.H_MAGIC_LOGS, null, null),
	PREBUILT_MAGIC_BIRD_HOUSE(ItemID.MAGIC_BIRD_HOUSE, "Magic bird house", 74, 1140, ExperienceItem.MAGIC_BIRD_HOUSE, null, null),
	REDWOOD_BIRD_HOUSE(ItemID.REDWOOD_BIRD_HOUSE, "Redwood bird house", 89, 1200, ExperienceItem.H_REDWOOD_LOGS, null, null),
	PREBUILT_REDWOOD_BIRD_HOUSE(ItemID.REDWOOD_BIRD_HOUSE, "Redwood bird house", 89, 1200, ExperienceItem.REDWOOD_BIRD_HOUSE, null, null),
	/**
	 * Firemaking
	 */
	BURN_LOGS(ItemID.LOGS, "Burn logs", 1, 40, ExperienceItem.FM_LOGS, null, null),
	BURN_ACHEY_TREE(ItemID.ACHEY_TREE_LOGS, "Burn Achey Tree logs", 1, 40, ExperienceItem.FM_ACHEY_TREE_LOGS, null, null),
	BURN_OAK(ItemID.OAK_LOGS, "Burn Oak logs", 15, 60, ExperienceItem.FM_OAK_LOGS, null, null),
	BURN_WILLOW(ItemID.WILLOW_LOGS, "Burn Willow Logs", 30, 90, ExperienceItem.FM_WILLOW_LOGS, null, null),
	BURN_TEAK(ItemID.TEAK_LOGS, "Burn Teak logs", 35, 105, ExperienceItem.FM_TEAK_LOGS, null, null),
	BURN_ARCTIC_PINE(ItemID.ARCTIC_PINE_LOGS, "Burn Arctic Pine logs", 42, 125, ExperienceItem.FM_ARCTIC_PINE_LOGS, null, null),
	BURN_MAPLE(ItemID.MAPLE_LOGS, "Burn Maple logs", 45, 135, ExperienceItem.FM_MAPLE_LOGS, null, null),
	BURN_MAHOGANY(ItemID.MAHOGANY_LOGS, "Burn Mahogany logs", 50, 157.5, ExperienceItem.FM_MAHOGANY_LOGS, null, null),
	BURN_YEW(ItemID.YEW_LOGS, "Burn Yew logs", 60, 202.5, ExperienceItem.FM_YEW_LOGS, null, null),
	BURN_BLISTERWOOD(ItemID.BLISTERWOOD_LOGS, "Burn Blisterwood logs", 62, 96, ExperienceItem.FM_BLISTERWOOD_LOGS, null, null),
	BURN_MAGIC(ItemID.MAGIC_LOGS, "Burn Magic logs", 75, 303.8, ExperienceItem.FM_MAGIC_LOGS, null, null),
	BURN_REDWOOD(ItemID.REDWOOD_LOGS, "Burn Redwood logs", 90, 350, ExperienceItem.FM_REDWOOD_LOGS, null, null),
	/**
	 * Thieving
	 */
	WINTER_SQUIRK(ItemID.WINTER_SQIRKJUICE, "Make sq'irkjuice", 1, 0,
		ExperienceItem.WINTER_SQIRK, Secondaries.BEER_GLASS_5TH, new ItemStack(ItemID.WINTER_SQIRKJUICE, 0.2)),
	WINTER_SQUIRKJUICE(ItemID.WINTER_SQIRKJUICE, "Redeem sq'irkjuice", 1, 350,
		ExperienceItem.WINTER_SQIRKJUICE, null, null),
	SPRING_SQUIRK(ItemID.SPRING_SQIRKJUICE, "Make sq'irkjuice", 25, 0,
		ExperienceItem.SPRING_SQIRK, Secondaries.BEER_GLASS_4TH, new ItemStack(ItemID.SPRING_SQIRKJUICE, 0.25)),
	SPRING_SQUIRKJUICE(ItemID.SPRING_SQIRKJUICE, "Redeem sq'irkjuice", 25, 1350,
		ExperienceItem.SPRING_SQIRKJUICE, null, null),
	AUTUMN_SQUIRK(ItemID.AUTUMN_SQIRKJUICE, "Make sq'irkjuice", 45, 0,
		ExperienceItem.AUTUMN_SQIRK, Secondaries.BEER_GLASS_3RD, new ItemStack(ItemID.AUTUMN_SQIRKJUICE, 1.0 / 3)),
	AUTUMN_SQUIRKJUICE(ItemID.AUTUMN_SQIRKJUICE, "Redeem sq'irkjuice", 45, 2350,
		ExperienceItem.AUTUMN_SQIRKJUICE, null, null),
	SUMMER_SQUIRK(ItemID.SUMMER_SQIRKJUICE, "Make sq'irkjuice", 65, 0,
		ExperienceItem.SUMMER_SQIRK, Secondaries.BEER_GLASS_HALF, new ItemStack(ItemID.SUMMER_SQIRKJUICE, 0.5)),
	SUMMER_SQUIRKJUICE(ItemID.SUMMER_SQIRKJUICE, "Redeem sq'irkjuice", 65, 3000,
		ExperienceItem.SUMMER_SQIRKJUICE, null, null),
	;

	private final int icon;
	private final String name;
	private final int level;
	private final double xp;
	private final boolean rngActivity;
	private final ExperienceItem experienceItem;
	private final Skill skill;
	@Nullable
	private final Secondaries secondaries;
	@Nullable
	private final ItemStack output;
	private ItemInfo outputItemInfo = null;
	@Nullable
	private final ExperienceItem linkedItem;

	private static final ImmutableMultimap<ExperienceItem, Activity> ITEM_MAP;
	public static final ImmutableSortedSet<Skill> BANKABLE_SKILLS;

	static
	{
		final ImmutableMultimap.Builder<ExperienceItem, Activity> map = ImmutableMultimap.builder();
		final ImmutableSortedSet.Builder<Skill> set = ImmutableSortedSet.orderedBy(Comparator.comparing(Skill::getName));
		for (final Activity item : values())
		{
			map.put(item.getExperienceItem(), item);
			set.add(item.getSkill());
		}
		ITEM_MAP = map.build();
		BANKABLE_SKILLS = set.build();
	}

	Activity(
		final int icon,
		final String name,
		final int level,
		final double xp,
		final ExperienceItem experienceItem,
		@Nullable final Secondaries secondaries,
		@Nullable final ItemStack output)
	{
		this(icon, name, level, xp, false, experienceItem, secondaries, output);
	}

	Activity(
		final int icon,
		final String name,
		final int level,
		final double xp,
		final boolean rngActivity,
		final ExperienceItem experienceItem,
		@Nullable final Secondaries secondaries,
		@Nullable final ItemStack output)
	{
		this.icon = icon;
		this.name = name;
		this.skill = experienceItem.getSkill();
		this.level = level;
		this.xp = xp;
		this.rngActivity = rngActivity;
		this.experienceItem = experienceItem;
		this.secondaries = secondaries;
		this.output = output;
		this.linkedItem = output == null ? null : ExperienceItem.getByItemId(output.getId());
	}

	/**
	 * Get all Activities for this ExperienceItem
	 *
	 * @param item ExperienceItem to check for
	 * @return an empty Collection if no activities
	 */
	public static List<Activity> getByExperienceItem(ExperienceItem item)
	{
		final Collection<Activity> activities = ITEM_MAP.get(item);
		if (activities == null)
		{
			return new ArrayList<>();
		}

		return new ArrayList<>(activities);
	}

	/**
	 * Get all Activities for this ExperienceItem limited to level
	 *
	 * @param item       ExperienceItem to check for
	 * @param limitLevel Level to check Activitiy requirements against. -1/0 value disables limits
	 * @return an empty Collection if no activities
	 */
	public static List<Activity> getByExperienceItem(final ExperienceItem item, final int limitLevel)
	{
		// Return as list to allow getting by index
		final List<Activity> l = getByExperienceItem(item);
		if (limitLevel <= 0)
		{
			return l;
		}

		return l.stream().filter(a -> a.getLevel() <= limitLevel).collect(Collectors.toList());
	}

	/**
	 * Attaches the Item Composition to each ExperienceItem on client initial load
	 *
	 * @param m ItemManager
	 */
	public static void prepareItemCompositions(ItemManager m)
	{
		for (Activity a : values())
		{
			// Attach names to all ItemStacks (secondaries)
			if (a.getSecondaries() != null)
			{
				for (final ItemStack stack : a.getSecondaries().getItems())
				{
					stack.updateItemInfo(m);
				}

				// If it has a custom handler those items need to be prepared as well
				final Secondaries.SecondaryHandler handler = a.getSecondaries().getCustomHandler();
				if (handler != null)
				{
					for (final ItemStack stack : handler.getInfoItems())
					{
						stack.updateItemInfo(m);
					}
				}
			}

			final ItemStack output = a.getOutput();
			if (output == null)
			{
				continue;
			}

			if (a.getOutputItemInfo() != null)
			{
				return;
			}

			final ItemComposition c = m.getItemComposition(output.getId());
			a.outputItemInfo = new ItemInfo(c.getName(), c.isStackable());
		}
	}

	// Never used, should it be removed?
	public double getXpRate(final Modifier modifier)
	{
		return modifier.appliesTo(this) ? modifier.appliedXpRate(this) : xp;
	}

	public double getXpRate(final Collection<Modifier> modifiers)
	{
		// Apply all modifiers
		double tempXp = xp;
		float savePercentage = 0;
		float savePercentageMultiplicative = 1f;
		for (final Modifier modifier : modifiers)
		{
			if (!modifier.appliesTo(this))
			{
				continue;
			}

			if (modifier instanceof ConsumptionModifier)
			{
				ConsumptionModifier consumptionModifier = (ConsumptionModifier) modifier;
				if (consumptionModifier.isAdditive())
				{
					savePercentage += consumptionModifier.getSavePercentage();
				}
				else
				{
					// Multiplicative stacking is calculated using the chance to consume not the chance to save
					// For example a 50% chance to save is .5 and a 5% chance to save is .95
					savePercentageMultiplicative *= (1 - consumptionModifier.getSavePercentage());
				}
			}

			tempXp += (modifier.appliedXpRate(this) - xp);
		}

		// Dividing the XP by the chance of consuming the item will give you the average xp per item
		if (savePercentage != 0f || savePercentageMultiplicative != 1f)
		{
			float consumptionChance = (1 - savePercentage) * savePercentageMultiplicative;
			tempXp = tempXp / consumptionChance;
		}

		// Round to two decimal places
		return BigDecimal.valueOf(tempXp).setScale(2, RoundingMode.HALF_UP).doubleValue();
	}

	private static boolean isOneNull(final Object a, final Object b)
	{
		return (a == null && b != null) || (a != null && b == null);
	}

	public boolean shouldUpdateLinked(final Activity old)
	{
		if (old.getLinkedItem() != linkedItem)
		{
			return true;
		}

		final ItemStack oldOutput = old.getOutput();
		// If both are null and the item hasn't change it shouldn't be updated
		if (oldOutput == null && output == null)
		{
			return false;
		}

		// If one was null an update should happen
		if (isOneNull(oldOutput, output))
		{
			return true;
		}

		return oldOutput.getQty() != output.getQty() || oldOutput.getId() != output.getId();
	}
}

/*
 * Copyright (c) 2019, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.data;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class ItemInfo
{
	private String name;
	private boolean stackable;
}

/*
 * Copyright (c) 2019, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.data;

import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
@Getter
public class BankedItem
{
	private final ExperienceItem item;
	private final int qty;

	@Override
	public String toString()
	{
		return item.name() + " x " + qty;
	}

	@Override
	public boolean equals(final Object o)
	{
		if (!(o instanceof BankedItem))
		{
			return false;
		}

		final BankedItem obj = (BankedItem) o;
		return obj.getItem().equals(item) && obj.getQty() == qty;
	}
}

/*
 * Copyright (c) 2021, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.data.modifiers;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Multimap;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.swing.SwingUtilities;
import net.runelite.api.ItemComposition;
import net.runelite.api.ItemID;
import net.runelite.api.Skill;
import net.runelite.client.game.ItemManager;
import thestonedturtle.bankedexperience.data.Activity;

/**
 * A utility class that contains all XP modifiers
 */
public final class Modifiers
{
	private static final String ASHES_TOOLTIP_TEXT = "Only applies to ashes";
	private static final String BONES_TOOLTIP_TEXT = "Only applies to bones";
	private static final Multimap<Skill, Modifier> modifiers = ArrayListMultimap.create();

	static final Set<Activity> BONES = ImmutableSet.of(
		Activity.BONES, Activity.WOLF_BONES, Activity.BURNT_BONES, Activity.MONKEY_BONES, Activity.BAT_BONES,
		Activity.JOGRE_BONES, Activity.BIG_BONES, Activity.ZOGRE_BONES, Activity.SHAIKAHAN_BONES,
		Activity.BABYDRAGON_BONES, Activity.WYVERN_BONES, Activity.DRAGON_BONES, Activity.FAYRG_BONES,
		Activity.LAVA_DRAGON_BONES, Activity.RAURG_BONES, Activity.DAGANNOTH_BONES, Activity.OURG_BONES,
		Activity.SUPERIOR_DRAGON_BONES, Activity.WYRM_BONES, Activity.DRAKE_BONES, Activity.HYDRA_BONES
	);

	static final Set<Activity> ASHES = ImmutableSet.of(
		Activity.FIENDISH_ASHES, Activity.VILE_ASHES, Activity.MALICIOUS_ASHES, Activity.ABYSSAL_ASHES,
		Activity.INFERNAL_ASHES
	);

	private static final Collection<Activity> CONSTRUCTION_BONES = ImmutableSet.of(
		Activity.LONG_BONE, Activity.CURVED_BONE
	);

	public static void prepare(ItemManager manager)
	{
		assert modifiers.isEmpty();

		final Map<Integer, ItemComposition[]> compositions = new HashMap<>();

		final ItemComposition[] zealots = asCompositions(manager, ItemID.ZEALOTS_HELM, ItemID.ZEALOTS_ROBE_TOP, ItemID.ZEALOTS_ROBE_BOTTOM, ItemID.ZEALOTS_BOOTS);
		compositions.put(zealots[0].getId(), zealots);

		final ItemComposition[] farmers = asCompositions(manager, ItemID.FARMERS_STRAWHAT, ItemID.FARMERS_JACKET, ItemID.FARMERS_BORO_TROUSERS, ItemID.FARMERS_BOOTS);
		compositions.put(farmers[0].getId(), farmers);

		final ItemComposition[] carpenters = asCompositions(manager, ItemID.CARPENTERS_HELMET, ItemID.CARPENTERS_SHIRT, ItemID.CARPENTERS_TROUSERS, ItemID.CARPENTERS_BOOTS);
		compositions.put(carpenters[0].getId(), carpenters);

		final ItemComposition[] pyromancer = asCompositions(manager, ItemID.PYROMANCER_HOOD, ItemID.PYROMANCER_GARB, ItemID.PYROMANCER_ROBE, ItemID.PYROMANCER_BOOTS);
		compositions.put(pyromancer[0].getId(), pyromancer);

		// Create modifiers on EDT thread as the UI components are created now
		SwingUtilities.invokeLater(() -> createModifiers(manager, compositions));
	}

	private static ItemComposition[] asCompositions(ItemManager manager, int... itemIds)
	{
		final ItemComposition[] results = new ItemComposition[itemIds.length];

		for (int i = 0; i < itemIds.length; i++)
		{
			results[i] = manager.getItemComposition(itemIds[i]);
		}

		return results;
	}

	private static void createModifiers(final ItemManager manager, final Map<Integer, ItemComposition[]> compositions)
	{
		// Prayer Modifiers
		addModifier(new ZealotsRobes(manager, compositions.get(ItemID.ZEALOTS_HELM)));
		addModifier(new StaticModifier(Skill.PRAYER, "Demonic Offering (300% xp)", 3, ASHES, null, ASHES_TOOLTIP_TEXT));
		addModifier(new StaticModifier(Skill.PRAYER, "Sinister Offering (300% xp)", 3, BONES, null, BONES_TOOLTIP_TEXT));
		addModifier(new StaticModifier(Skill.PRAYER, "Lit Gilded Altar (350% xp)", 3.5f, BONES, null, BONES_TOOLTIP_TEXT));
		addModifier(new StaticModifier(Skill.PRAYER, "Ectofuntus (400% xp)", 4, BONES, null, BONES_TOOLTIP_TEXT));
		addModifier(new ConsumptionModifier(Skill.PRAYER, "Wildy Altar (350% xp & 50% Save)", 0.5f, BONES, null, BONES_TOOLTIP_TEXT)
		{
			@Override
			public double appliedXpRate(final Activity activity)
			{
				return activity.getXp() * 3.5f;
			}

			@Override
			public boolean compatibleWith(final Modifier modifier)
			{
				if (modifier instanceof StaticModifier)
				{
					return !this.touchesSameActivity(modifier);
				}

				return super.compatibleWith(modifier);
			}
		});

		// Farming
		addModifier(new SkillingOutfit(Skill.FARMING, "Farmer's Outfit", null, null,
			manager, compositions.get(ItemID.FARMERS_STRAWHAT)));

		// Construction
		addModifier(new SkillingOutfit(Skill.CONSTRUCTION, "Carpenter's Outfit", null, CONSTRUCTION_BONES, manager, compositions.get(ItemID.CARPENTERS_HELMET)));

		// Firemaking
		addModifier(new SkillingOutfit(Skill.FIREMAKING, "Pyromancer Outfit",
			null, null, manager, compositions.get(ItemID.PYROMANCER_HOOD)));
	}

	private static void addModifier(final Modifier modifier)
	{
		// Add on EDT thread since component creation takes place when the modifiers are created
		modifiers.put(modifier.getSkill(), modifier);
	}

	public static Collection<Modifier> getBySkill(final Skill skill)
	{
		return modifiers.get(skill);
	}
}

/*
 * Copyright (c) 2021, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.data.modifiers;

import java.util.Collection;
import lombok.Getter;
import net.runelite.api.Skill;
import thestonedturtle.bankedexperience.data.Activity;

/**
 * Modifies the rate at which items are consumed. The same item can be saved multiple times so these modifiers must be
 * combined with other each other to properly calculate the average xp
 */
public class ConsumptionModifier extends Modifier
{
	// Percentage based scale where positive values reduce consumption and negative values increase consumption
	@Getter
	private final float savePercentage;
	// If this stacks with other consumptions modifiers additively or multiplicatively.
	@Getter
	boolean additive = true;

	ConsumptionModifier(Skill skill, String name, float savePercentage)
	{
		super(skill, name);
		this.savePercentage = savePercentage;
	}

	ConsumptionModifier(Skill skill, String name, float savePercentage, Collection<Activity> included, Collection<Activity> ignored)
	{
		super(skill, name, included, ignored);
		this.savePercentage = savePercentage;
	}

	ConsumptionModifier(Skill skill, String name, float savePercentage, Collection<Activity> included, Collection<Activity> ignored, String tooltip)
	{
		super(skill, name, included, ignored, tooltip);
		this.savePercentage = savePercentage;
	}
}

/*
 * Copyright (c) 2020, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.data.modifiers;

import com.google.common.collect.ImmutableSet;
import java.util.Collection;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Skill;
import thestonedturtle.bankedexperience.data.Activity;
import thestonedturtle.bankedexperience.data.modifiers.ui.ModifierPanel;

/**
 * A modifier to the experience an {@link Activity} should reward
 */
@Getter
@Slf4j
public abstract class Modifier
{
	/**
	 * The {@link Skill} this modifier applies to
	 */
	private final Skill skill;
	/**
	 * The name of this modifier
	 */
	private final String name;
	/**
	 * A set of activities this modifier will apply to.
	 */
	private final ImmutableSet<Activity> includedActivities;
	/**
	 * A set of activities this modifier should not apply to. Overrides {@link #includedActivities}
	 */
	private final ImmutableSet<Activity> ignoredActivities;

	private final String tooltip;

	Modifier(Skill skill, String name)
	{
		this(skill, name, null, null, null);
	}

	Modifier(Skill skill, String name, String tooltip)
	{
		this(skill, name, null, null, tooltip);
	}
	Modifier(Skill skill, String name, Collection<Activity> included, Collection<Activity> ignored)
	{
		this(skill, name, included, ignored, null);
	}

	Modifier(Skill skill, String name, Collection<Activity> included, Collection<Activity> ignored, String tooltip)
	{
		this.skill = skill;
		this.name = name;
		this.includedActivities = included == null ? ImmutableSet.of() : ImmutableSet.copyOf(included);
		this.ignoredActivities = ignored == null ? ImmutableSet.of() : ImmutableSet.copyOf(ignored);
		this.tooltip = tooltip;
	}

	/**
	 * Checks if the modifier applies to the passed activity
	 * @param activity the {@link Activity} to check
	 * @return if the modifier applies to the activity
	 */
	public boolean appliesTo(final Activity activity)
	{
		return skill.equals(activity.getSkill())
			&& !ignoredActivities.contains(activity)
			&& (includedActivities.size() == 0 || includedActivities.contains(activity));
	}

	/**
	 * Applies the modifier to the default xp rate of the passed activity if applicable.
	 * @param activity the {@link Activity} to apply this modifier to.
	 * @return The adjusted xp rate for the activity. Returns 0 if the activity and modifier are not compatible
	 */
	public double appliedXpRate(final Activity activity)
	{
		if (!appliesTo(activity))
		{
			log.debug("Tried to modify an incompatible activity. Activity: {} | Modifier: {}", activity, this);
			return 0;
		}

		return activity.getXp();
	}

	/**
	 * Generates the UI component for use in the side panel for modifiers with complex settings.
	 * Returning null will generate a default UI components (generally a checkbox)
	 * @return A ModifierComponent to be added to the UI to control this modifier.
	 */
	public ModifierComponent generateModifierComponent()
	{
		return new ModifierPanel(this);
	}

	/**
	 * Determines if the current modifier is compatible with the passed one
	 * @param modifier Other modifier to check compatibility against
	 * @return Whether the modifiers are compatible
	 */
	public boolean compatibleWith(final Modifier modifier)
	{
		return true;
	}

	/**
	 * Determines if the current modifier and the passed modifier touch any of the same activities
	 * @param modifier Other modifier to check included activities against
	 * @return Whether the modifiers touch any of the same activities
	 */
	public boolean touchesSameActivity(final Modifier modifier)
	{
		if (!modifier.getSkill().equals(this.getSkill()))
		{
			return false;
		}

		// If either modifier includes all activities for this skill they are not compatible with any other modifier for the same skill
		if (modifier.getIncludedActivities().size() == 0 || this.getIncludedActivities().size() == 0)
		{
			return true;
		}

		// If they touch the same activity they are not compatible
		for (Activity a : modifier.getIncludedActivities())
		{
			if (this.getIncludedActivities().contains(a))
			{
				return true;
			}
		}

		return false;
	}
}

/*
 * Copyright (c) 2021, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.data.modifiers;

import java.util.Collection;
import net.runelite.api.Skill;
import thestonedturtle.bankedexperience.data.Activity;

/**
 * Modifies an {@link Activity} by a static {@link #xpModifier}. StaticModifiers are not compatible with other StaticModifiers
 */
public class StaticModifier extends Modifier
{
	/**
	 * A multiplier that controls how much the activities xp is modified. 0=none, 0.5=half, 1=default, 2=double, etc
	 */
	final float xpModifier;

	StaticModifier(Skill skill, String name, final float xpModifier)
	{
		super(skill, name, null, null);
		this.xpModifier = xpModifier;
	}

	StaticModifier(Skill skill, String name, final float xpModifier, Collection<Activity> included, Collection<Activity> ignored)
	{
		super(skill, name, included, ignored);
		this.xpModifier = xpModifier;
	}

	StaticModifier(Skill skill, String name, final float xpModifier, Collection<Activity> included, Collection<Activity> ignored, String tooltip)
	{
		super(skill, name, included, ignored, tooltip);
		this.xpModifier = xpModifier;
	}

	/**
	 * Applies the {@link #xpModifier} to the default xp rate of the passed activity, if applicable.
	 * @param activity the {@link Activity} to apply this modifier to.
	 * @return The adjusted xp rate for the activity, or 0 if the activity and modifier are not compatible
	 */
	public double appliedXpRate(final Activity activity)
	{
		return super.appliedXpRate(activity) * xpModifier;
	}

	@Override
	public boolean compatibleWith(final Modifier modifier)
	{
		// Compatible with itself
		if (this.equals(modifier))
		{
			return true;
		}

		// Static Modifiers can be compatible with each other if they do not affect the same activity
		if (modifier instanceof StaticModifier)
		{
			return !this.touchesSameActivity(modifier);
		}

		return true;
	}
}

/*
 * Copyright (c) 2021, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.data.modifiers;

import java.util.function.BiConsumer;
import javax.swing.JComponent;

public interface ModifierComponent
{
	Modifier getModifier();
	Boolean isModifierEnabled();
	void setModifierEnabled(final boolean enabled);
	void setModifierConsumer(final BiConsumer<Modifier, Boolean> modifierConsumer);

	JComponent getComponent();
}

/*
 * Copyright (c) 2021, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.data.modifiers.ui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.BorderFactory;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import lombok.Getter;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;

public class LabeledCheckbox extends JPanel
{
	@Getter
	final JCheckBox button = new JCheckBox();

	public LabeledCheckbox(final String label)
	{
		this.setLayout(new BorderLayout());
		this.setBorder(BorderFactory.createEmptyBorder(3, 3, 3, 3));
		this.setBackground(ColorScheme.DARKER_GRAY_COLOR);

		final JLabel uiLabel = new JLabel(label);
		uiLabel.setForeground(Color.WHITE);
		uiLabel.setFont(FontManager.getRunescapeSmallFont());
		uiLabel.setHorizontalAlignment(SwingConstants.CENTER);
		uiLabel.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(MouseEvent e)
			{
				if (!SwingUtilities.isLeftMouseButton(e))
				{
					return;
				}

				button.setSelected(!button.isSelected());
			}
		});

		this.add(uiLabel, BorderLayout.WEST);
		this.add(button, BorderLayout.EAST);
	}
}

/*
 * Copyright (c) 2021, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.data.modifiers.ui;

import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import lombok.Getter;
import lombok.Setter;
import net.runelite.client.ui.ColorScheme;

public class SelectableLabel extends JLabel
{
	private static final Color SELECTED_BACKGROUND = new Color(0, 70, 0);
	private static final Color SELECTED_HOVER_BACKGROUND =  new Color(0, 100, 0);

	private static final Color BACKGROUND = ColorScheme.DARK_GRAY_COLOR;
	private static final Color BACKGROUND_HOVER = ColorScheme.DARK_GRAY_HOVER_COLOR;

	@Getter
	private boolean selected = false;

	@Setter
	private Runnable callback = null;

	public SelectableLabel()
	{
		this.setOpaque(true);
		this.setVerticalAlignment(SwingConstants.CENTER);
		this.setHorizontalAlignment(SwingConstants.CENTER);
		this.setBackground(BACKGROUND);

		this.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(MouseEvent e)
			{
				if (e.getButton() != MouseEvent.BUTTON1)
				{
					return;
				}

				setSelected(!selected);
			}

			@Override
			public void mouseEntered(MouseEvent e)
			{
				final SelectableLabel label = (SelectableLabel) e.getSource();
				if (selected)
				{
					label.setBackground(SELECTED_HOVER_BACKGROUND);
				}
				else
				{
					label.setBackground(BACKGROUND_HOVER);
				}
			}

			@Override
			public void mouseExited(MouseEvent e)
			{
				final SelectableLabel label = (SelectableLabel) e.getSource();
				if (selected)
				{
					label.setBackground(SELECTED_BACKGROUND);
				}
				else
				{
					label.setBackground(BACKGROUND);
				}
			}
		});
	}

	public void setSelected(boolean selected)
	{
		setSelected(selected, true);
	}

	public void setSelected(boolean selected, boolean runCallback)
	{
		if (this.selected == selected)
		{
			return;
		}

		this.selected = selected;
		this.setBackground(selected ? SELECTED_BACKGROUND : BACKGROUND);

		if (runCallback && callback != null)
		{
			callback.run();
		}
	}
}

/*
 * Copyright (c) 2021, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.data.modifiers.ui;

import java.util.function.BiConsumer;
import javax.swing.JComponent;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import thestonedturtle.bankedexperience.data.modifiers.Modifier;
import thestonedturtle.bankedexperience.data.modifiers.ModifierComponent;

/**
 * The default UI component for enable/disabling a {@link Modifier}
 */
@Slf4j
public class ModifierPanel extends LabeledCheckbox implements ModifierComponent
{
	@Getter
	private final Modifier modifier;

	@Setter
	private BiConsumer<Modifier, Boolean> modifierConsumer;

	public ModifierPanel(final Modifier modifier)
	{
		super(modifier.getName());
		this.modifier = modifier;

		getButton().addItemListener((l) ->
		{
			if (modifierConsumer == null)
			{
				log.warn("Toggling a modifier wth no consumer: {}", modifier);
				return;
			}

			modifierConsumer.accept(modifier, getButton().isSelected());
		});

		if (modifier.getTooltip() != null)
		{
			this.setToolTipText(modifier.getTooltip());
		}
	}

	@Override
	public Boolean isModifierEnabled()
	{
		return getButton().isSelected();
	}

	@Override
	public void setModifierEnabled(boolean enabled)
	{
		getButton().setSelected(enabled);
	}

	@Override
	public JComponent getComponent()
	{
		return this;
	}
}

/*
 * Copyright (c) 2021, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.data.modifiers;

import com.google.common.collect.ImmutableSet;
import java.util.Set;
import net.runelite.api.ItemComposition;
import net.runelite.api.Skill;
import net.runelite.client.game.ItemManager;
import thestonedturtle.bankedexperience.data.Activity;

public class ZealotsRobes extends SkillingOutfit
{
	private static final float CONSUME_AMT = 0.0125f;
	private static final String TOOLTIP = "1.25% chance to prevent bones and ensouled heads from being consumed";
	private static final Set<Activity> EXCLUDED = ImmutableSet.of(
//		Activity.LOAR_REMAINS, Activity.PHRIN_REMAINS, Activity.RIYL_REMAINS, Activity.ASYN_REMAINS, Activity.FIYR_REMAINS,
		Activity.SMALL_LIMBS, Activity.SMALL_SPINE, Activity.SMALL_RIBS, Activity.SMALL_PELVIS, Activity.SMALL_SKULL, Activity.SMALL_FOSSIL,
		Activity.MEDIUM_LIMBS, Activity.MEDIUM_SPINE, Activity.MEDIUM_RIBS, Activity.MEDIUM_PELVIS, Activity.MEDIUM_SKULL, Activity.MEDIUM_FOSSIL,
		Activity.LARGE_LIMBS, Activity.LARGE_SPINE, Activity.LARGE_RIBS, Activity.LARGE_PELVIS, Activity.LARGE_SKULL, Activity.LARGE_FOSSIL,
		Activity.RARE_LIMBS, Activity.RARE_SPINE, Activity.RARE_RIBS, Activity.RARE_PELVIS, Activity.RARE_SKULL, Activity.RARE_TUSK, Activity.RARE_FOSSIL
	);

	ZealotsRobes(ItemManager itemManager, ItemComposition... items)
	{
		super(Skill.PRAYER, "Zealot's robes", null, EXCLUDED, itemManager, items);
		additive = false;

		helm.setToolTipText("<html>" + items[0].getName() + "<br/>" + TOOLTIP + "</html>");
		top.setToolTipText("<html>" + items[1].getName() + "<br/>" + TOOLTIP + "</html>");
		bottom.setToolTipText("<html>" + items[2].getName() + "<br/>" + TOOLTIP + "</html>");
		boots.setToolTipText("<html>" + items[3].getName() + "<br/>" + TOOLTIP + "</html>");

		panel.setToolTipText(TOOLTIP);
	}

	@Override
	public float getSavePercentage()
	{
		return CONSUME_AMT * getEnabledButtonCount();
	}

	// Zealots Robes don't provide bonus xp so the SkillingOutfit xp multiplier is incorrect
	@Override
	protected double calculateBonusXPMultiplier()
	{
		return 1d;
	}
}

/*
 * Copyright (c) 2021, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.data.modifiers;

import com.google.common.primitives.Booleans;
import java.util.Collection;
import java.util.function.BiConsumer;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ItemComposition;
import net.runelite.api.Skill;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.DynamicGridLayout;
import thestonedturtle.bankedexperience.data.Activity;
import thestonedturtle.bankedexperience.data.modifiers.ui.SelectableLabel;

@Slf4j
public class SkillingOutfit extends ConsumptionModifier implements ModifierComponent
{
	private final float HELM_BONUS = 0.004f;
	private final float TOP_BONUS = 0.008f;
	private final float BOTTOM_BONUS = 0.006f;
	private final float BOOTS_BONUS = 0.002f;
	private final float SET_BONUS = 0.025f; // Wearing the entire set will reward this much bonus XP in total

	@Setter
	private BiConsumer<Modifier, Boolean> modifierConsumer;
	private final Runnable callback = () ->
	{
		if (modifierConsumer == null)
		{
			log.warn("Toggling SkillingOutfit modifier wth no consumer: {}", this);
			return;
		}

		modifierConsumer.accept(this, isModifierEnabled());
	};

	final JPanel panel = new JPanel();
	final SelectableLabel helm;
	final SelectableLabel top;
	final SelectableLabel bottom;
	final SelectableLabel boots;

	SkillingOutfit(Skill skill, String name, Collection<Activity> included, Collection<Activity> ignored, ItemManager itemManager, ItemComposition... items)
	{
		super(skill, name, 0f, included, ignored);
		assert items.length == 4;

		final ItemComposition helmComp = items[0];
		helm = new SelectableLabel();
		helm.setToolTipText("<html>" + helmComp.getName() + "<br/>Increases xp gained by 0.4%</html>");
		helm.setCallback(callback);

		final ItemComposition topComp = items[1];
		top = new SelectableLabel();
		top.setToolTipText("<html>" + topComp.getName() + "<br/>Increases xp gained by 0.8%</html>");
		top.setCallback(callback);

		final ItemComposition bottomComp = items[2];
		bottom = new SelectableLabel();
		bottom.setToolTipText("<html>" + bottomComp.getName() + "<br/>Increases xp gained by 0.6%</html>");
		bottom.setCallback(callback);

		final ItemComposition bootComp = items[3];
		boots = new SelectableLabel();
		boots.setToolTipText("<html>" + bootComp.getName() + "<br/>Increases xp gained by 0.2%</html>");
		boots.setCallback(callback);

		final JPanel container = new JPanel();
		container.setLayout(new DynamicGridLayout(1, 0, 2, 0));
		container.add(helm);
		container.add(top);
		container.add(bottom);
		container.add(boots);

		panel.setLayout(new DynamicGridLayout(0, 1, 0, 2));
		panel.setToolTipText("<html>Increases xp gained while worn.<br/>The full set increases the bonus by 0.5% for 2.5% instead of 2% bonus xp</html>");
		panel.add(new JLabel(name));
		panel.add(container);

		itemManager.getImage(items[0].getId()).addTo(helm);
		itemManager.getImage(items[1].getId()).addTo(top);
		itemManager.getImage(items[2].getId()).addTo(bottom);
		itemManager.getImage(items[3].getId()).addTo(boots);
	}

	int getEnabledButtonCount()
	{
		return Booleans.countTrue(
			helm.isSelected(), top.isSelected(), bottom.isSelected(), boots.isSelected()
		);
	}

	@Override
	public Modifier getModifier()
	{
		return this;
	}

	@Override
	public Boolean isModifierEnabled()
	{
		return getEnabledButtonCount() > 0;
	}

	@Override
	public void setModifierEnabled(boolean enabled)
	{
		helm.setSelected(enabled, false);
		top.setSelected(enabled, false);
		bottom.setSelected(enabled, false);
		boots.setSelected(enabled, false);

		callback.run();
	}

	@Override
	public JComponent getComponent()
	{
		return panel;
	}

	protected double calculateBonusXPMultiplier()
	{
		float bonusXP = 1f; // Default XP rate
		if (getEnabledButtonCount() == 4)
		{
			bonusXP += SET_BONUS;
		}
		else
		{
			bonusXP += helm.isSelected() ? HELM_BONUS : 0f;
			bonusXP += top.isSelected() ? TOP_BONUS : 0f;
			bonusXP += bottom.isSelected() ? BOTTOM_BONUS : 0f;
			bonusXP += boots.isSelected() ? BOOTS_BONUS : 0f;
		}
		return bonusXP;
	}

	@Override
	public double appliedXpRate(final Activity activity)
	{
		double bonusXP = calculateBonusXPMultiplier();

		return super.appliedXpRate(activity) * bonusXP;
	}

	@Override
	public ModifierComponent generateModifierComponent()
	{
		return this;
	}

	// Used to add additional text to the tooltip text
	public void setTooltip(String tooltip)
	{
		panel.setToolTipText("<html>Increases xp gained while worn."
			+ "<br/>The full set increases the bonus by 0.5% for 2.5% instead of 2% bonus xp"
			+ "<br/>" + tooltip
			+ "</html>");
	}
}

/*
 * Copyright (c) 2019, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.data;

import javax.annotation.Nullable;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import net.runelite.api.ItemComposition;
import net.runelite.client.game.ItemManager;

@Data
@RequiredArgsConstructor
public class ItemStack
{
	private final int id;
	private final double qty;
	@Nullable
	private ItemInfo info;

	public void updateItemInfo(final ItemManager itemManager)
	{
		final ItemComposition composition = itemManager.getItemComposition(id);
		this.info = new ItemInfo(composition.getName(), composition.isStackable());
	}
}

package thestonedturtle.bankedexperience;

import com.google.inject.Provides;
import java.awt.image.BufferedImage;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.inject.Inject;
import javax.swing.SwingUtilities;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.EnumComposition;
import net.runelite.api.EnumID;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemComposition;
import net.runelite.api.ItemContainer;
import net.runelite.api.ScriptID;
import net.runelite.api.events.AccountHashChanged;
import net.runelite.api.events.ClientTick;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.events.ScriptPostFired;
import net.runelite.api.events.VarbitChanged;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.SkillIconManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import static thestonedturtle.bankedexperience.BankedExperienceConfig.POTION_STORAGE_KEY;
import thestonedturtle.bankedexperience.data.Activity;
import thestonedturtle.bankedexperience.data.ExperienceItem;
import thestonedturtle.bankedexperience.data.WidgetInventoryInfo;
import thestonedturtle.bankedexperience.data.modifiers.Modifiers;

@Slf4j
@PluginDescriptor(
	name = "Banked Experience"
)
public class BankedExperiencePlugin extends Plugin
{
	private static final BufferedImage ICON = ImageUtil.loadImageResource(BankedExperiencePlugin.class, "banked.png");
	private static final Map<Integer, Integer> EMPTY_MAP = new HashMap<>();
	public static final String CONFIG_GROUP = "bankedexperience";
	private static final String VAULT_CONFIG_KEY = "grabFromSeedVault";
	private static final String INVENTORY_CONFIG_KEY = "grabFromInventory";
	private static final String LOOTING_BAG_CONFIG_KEY = "grabFromLootingBag";
	private static final String FOSSIL_CHEST_CONFIG_KEY = "grabFromFossilChest";
	public static final String ACTIVITY_CONFIG_KEY = "ITEM_";
	private static final int LOOTING_BAG_ID = 516;

	private static final int POTION_STORAGE_FAKE_INVENTORY_ID = -420;

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	private ConfigManager configManager;

	@Inject
	private ItemManager itemManager;

	@Inject
	private SkillIconManager skillIconManager;

	@Inject
	private BankedExperienceConfig config;

	@Provides
	BankedExperienceConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(BankedExperienceConfig.class);
	}

	private final Map<Integer, Integer> inventoryHashMap = new HashMap<>();
	private NavigationButton navButton;
	private BankedCalculatorPanel panel;
	private boolean prepared = false;
	private long accountHash = -1;

	private boolean rebuildPotions = false;
	private Set<Integer> potionStoreVars;

	@Override
	protected void startUp() throws Exception
	{
		panel = new BankedCalculatorPanel(client, config, skillIconManager, itemManager, configManager);
		navButton = NavigationButton.builder()
			.tooltip("Banked XP")
			.icon(ICON)
			.priority(6)
			.panel(panel)
			.build();

		clientToolbar.addNavigation(navButton);

		accountHash = client.getAccountHash();

		clientThread.invoke(() ->
		{
			switch (client.getGameState())
			{
				case LOGGED_IN:
					if (config.grabFromPotionStorage() && client.getItemContainer(InventoryID.BANK) != null)
					{
						rebuildPotions = true;
					}
					// intentional fall through
				case LOGIN_SCREEN:
				case LOGIN_SCREEN_AUTHENTICATOR:
				case LOGGING_IN:
				case LOADING:
				case CONNECTION_LOST:
				case HOPPING:
					if (!prepared)
					{
						ExperienceItem.prepareItemCompositions(itemManager);
						Activity.prepareItemCompositions(itemManager);
						Modifiers.prepare(itemManager);
						loadSavedActivities();
						prepared = true;
					}
					return true;
				default:
					return false;
			}
		});
	}

	@Override
	protected void shutDown() throws Exception
	{
		clientToolbar.removeNavigation(navButton);
		panel = null;
		navButton = null;
		inventoryHashMap.clear();
		accountHash = -1;
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (!event.getGroup().equals(CONFIG_GROUP))
		{
			return;
		}

		final int inventoryId;
		switch (event.getKey())
		{
			case VAULT_CONFIG_KEY:
				inventoryId = InventoryID.SEED_VAULT.getId();
				break;
			case INVENTORY_CONFIG_KEY:
				inventoryId = InventoryID.INVENTORY.getId();
				break;
			case LOOTING_BAG_CONFIG_KEY:
				inventoryId = LOOTING_BAG_ID;
				break;
			case FOSSIL_CHEST_CONFIG_KEY:
				inventoryId = WidgetInventoryInfo.FOSSIL_CHEST.getId();
				break;
			case POTION_STORAGE_KEY:
				inventoryId = POTION_STORAGE_FAKE_INVENTORY_ID;
				if (config.grabFromPotionStorage())
				{
					clientThread.invoke(() ->
					{
						if (client.getItemContainer(InventoryID.BANK) != null)
						{
							rebuildPotions = true;
						}
					});
				}
				break;
			default:
				return;
		}

		SwingUtilities.invokeLater(() -> panel.setInventoryMap(inventoryId, EMPTY_MAP));
	}

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged ev)
	{
		if (ev.getContainerId() == InventoryID.BANK.getId()
			|| (ev.getContainerId() == InventoryID.SEED_VAULT.getId() && config.grabFromSeedVault())
			|| (ev.getContainerId() == InventoryID.INVENTORY.getId() && config.grabFromInventory())
			|| (ev.getContainerId() == LOOTING_BAG_ID && config.grabFromLootingBag()))
		{
			updateItemsFromItemContainer(ev.getContainerId(), ev.getItemContainer());
		}
	}

	@Subscribe
	public void onWidgetLoaded(WidgetLoaded e)
	{
		if (!config.grabFromFossilChest())
		{
			return;
		}

		final WidgetInventoryInfo widgetInfo = WidgetInventoryInfo.getByGroupId(e.getGroupId());
		if (widgetInfo == null)
		{
			return;
		}

		final Widget w = client.getWidget(widgetInfo.getGroupId(), widgetInfo.getChildId());
		if (w == null || w.getChildren() == null)
		{
			return;
		}

		final Map<Integer, Integer> m = new HashMap<>();
		for (int i = 0; i < w.getChildren().length; i++)
		{
			final Widget childWidget = w.getChild(i);
			if (childWidget.getItemId() <= 0 || childWidget.getItemQuantity() <= 0)
			{
				continue;
			}

			m.merge(childWidget.getItemId(), childWidget.getItemQuantity(), Integer::sum);
		}

		updateInventoryMap(widgetInfo.getId(), m);
	}

	@Subscribe
	public void onAccountHashChanged(AccountHashChanged e)
	{
		if (accountHash == client.getAccountHash())
		{
			return;
		}
		accountHash = client.getAccountHash();
		inventoryHashMap.clear();

		SwingUtilities.invokeLater(panel::resetInventoryMaps);
	}

	private void updateItemsFromItemContainer(final int inventoryId, final ItemContainer c)
	{
		// Check if the contents have changed.
		if (c == null)
		{
			return;
		}

		final Map<Integer, Integer> m = new HashMap<>();
		for (Item item : c.getItems())
		{
			if (item.getId() == -1)
			{
				continue;
			}

			// Account for noted items, ignore placeholders.
			int itemID = item.getId();
			final ItemComposition itemComposition = itemManager.getItemComposition(itemID);
			if (itemComposition.getPlaceholderTemplateId() != -1)
			{
				continue;
			}

			if (itemComposition.getNote() != -1)
			{
				itemID = itemComposition.getLinkedNoteId();
			}

			final int qty = m.getOrDefault(itemID, 0) + item.getQuantity();
			m.put(itemID, qty);
		}

		updateInventoryMap(inventoryId, m);
	}

	private void updateInventoryMap(final int inventoryId, final Map<Integer, Integer> m)
	{
		final int curHash = m.hashCode();
		if (curHash != inventoryHashMap.getOrDefault(inventoryId, -1))
		{
			inventoryHashMap.put(inventoryId, curHash);
			SwingUtilities.invokeLater(() -> panel.setInventoryMap(inventoryId, m));
		}
	}

	private void loadSavedActivities()
	{
		for (final ExperienceItem item : ExperienceItem.values())
		{
			final String activityName = configManager.getConfiguration(CONFIG_GROUP, ACTIVITY_CONFIG_KEY + item.name());
			if (activityName == null || activityName.equals(""))
			{
				continue;
			}

			for (final Activity activity : Activity.values())
			{
				if (activityName.equals(activity.name()))
				{
					item.setSelectedActivity(activity);
					break;
				}
			}
		}
	}

	@Subscribe
	public void onScriptPostFired(ScriptPostFired event)
	{
		if (event.getScriptId() == ScriptID.BANKMAIN_FINISHBUILDING && config.grabFromPotionStorage())
		{
			rebuildPotions = true;
		}
	}

	@Subscribe
	public void onClientTick(ClientTick event)
	{
		if (rebuildPotions)
		{
			updatePotionStorageMap();
			rebuildPotions = false;

			Widget w = client.getWidget(ComponentID.BANK_POTIONSTORE_CONTENT);
			if (w != null && potionStoreVars == null)
			{
				// cache varps that the potion store rebuilds on
				int[] trigger = w.getVarTransmitTrigger();
				potionStoreVars = new HashSet<>();
				Arrays.stream(trigger).forEach(potionStoreVars::add);
			}
		}
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged varbitChanged)
	{
		if (potionStoreVars != null && potionStoreVars.contains(varbitChanged.getVarpId()))
		{
			rebuildPotions = true;
		}
	}

	// Copied mostly from BankPlugin:getPotionStoragePrice
	private void updatePotionStorageMap()
	{
		final Map<Integer, Integer> potionQtyMap = new HashMap<>();

		EnumComposition potionStorePotions = client.getEnum(EnumID.POTIONSTORE_POTIONS);
		EnumComposition potionStoreUnfinishedPotions = client.getEnum(EnumID.POTIONSTORE_UNFINISHED_POTIONS);
		for (EnumComposition e : new EnumComposition[]{potionStorePotions, potionStoreUnfinishedPotions})
		{
			for (int potionEnumId : e.getIntVals())
			{
				EnumComposition potionEnum = client.getEnum(potionEnumId);
				client.runScript(ScriptID.POTIONSTORE_DOSES, potionEnumId);
				int doses = client.getIntStack()[0];
				client.runScript(ScriptID.POTIONSTORE_WITHDRAW_DOSES, potionEnumId);
				int withdrawDoses = client.getIntStack()[0];

				if (doses > 0 && withdrawDoses > 0)
				{
					final int itemId = potionEnum.getIntValue(withdrawDoses);
					potionQtyMap.put(itemId, doses);
				}
			}
		}

		updateInventoryMap(POTION_STORAGE_FAKE_INVENTORY_ID, potionQtyMap);
	}
}

/*
 * Copyright (c) 2019, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Experience;
import net.runelite.api.Skill;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.DynamicGridLayout;
import net.runelite.client.util.AsyncBufferedImage;
import net.runelite.client.util.Text;
import thestonedturtle.bankedexperience.components.ExpandableSection;
import thestonedturtle.bankedexperience.components.GridItem;
import thestonedturtle.bankedexperience.components.ModifyPanel;
import thestonedturtle.bankedexperience.components.SecondaryGrid;
import thestonedturtle.bankedexperience.components.SelectionGrid;
import thestonedturtle.bankedexperience.components.SelectionListener;
import thestonedturtle.bankedexperience.components.textinput.SpinnerInput;
import thestonedturtle.bankedexperience.components.textinput.UICalculatorInputArea;
import thestonedturtle.bankedexperience.data.Activity;
import thestonedturtle.bankedexperience.data.BankedItem;
import thestonedturtle.bankedexperience.data.ExperienceItem;
import thestonedturtle.bankedexperience.data.ItemStack;
import thestonedturtle.bankedexperience.data.modifiers.Modifier;
import thestonedturtle.bankedexperience.data.modifiers.ModifierComponent;
import thestonedturtle.bankedexperience.data.modifiers.Modifiers;

@Slf4j
public class BankedCalculator extends JPanel
{
	public static final DecimalFormat XP_FORMAT_COMMA = new DecimalFormat("#,###.#");

	private final Client client;
	@Getter
	private final BankedExperienceConfig config;
	private final UICalculatorInputArea uiInput;
	@Getter
	private final ItemManager itemManager;
	private final ConfigManager configManager;

	// Some activities output a ExperienceItem and may need to be included in the calculable qty
	// Using multimap for cases where there are multiple items linked directly to one item, use recursion for otherwise
	private final Multimap<ExperienceItem, BankedItem> linkedMap = ArrayListMultimap.create();

	private final Map<ExperienceItem, BankedItem> bankedItemMap = new LinkedHashMap<>();
	private final JLabel totalXpLabel = new JLabel();
	private final JLabel xpToNextLevelLabel = new JLabel();
	private final ModifyPanel modifyPanel;
	private final SelectionGrid itemGrid = new SelectionGrid();
	private SecondaryGrid secondaryGrid;
	private ExpandableSection modifierSection;
	private ExpandableSection secondarySection;
	private final JButton refreshBtn;

	// Store items from all sources in the same map
	private final Map<Integer, Integer> currentMap = new HashMap<>();
	// keep sources separate for recreating currentMap when one updates
	private final Map<Integer, Map<Integer, Integer>> inventoryMap = new HashMap<>();

	// Keep a reference to enabled modifiers so recreating tooltips is faster.
	@Getter
	private final Set<Modifier> enabledModifiers = new HashSet<>();
	private final List<ModifierComponent> modifierComponents = new ArrayList<>();

	@Getter
	private final Set<String> ignoredItems;

	@Getter
	private Skill currentSkill;

	@Getter
	private int skillLevel, skillExp, endLevel, endExp;

	@Getter
	private final SpinnerInput boostInput = new SpinnerInput(
		"Temporary Boost:",
		"Enables activities that are this many levels above your current level",
		this::updateBoost
	);

	@Getter
	private final SpinnerInput xpRateModifierInput = new SpinnerInput(
		"XP Rate Multiplier:",
		"Used for alternative game modes such as DMM and leagues. 1 = default OSRS experience rates.",
		1,
		1,
		this::updateXpRateModifier
	);

	BankedCalculator(UICalculatorInputArea uiInput, Client client, BankedExperienceConfig config,
					 ItemManager itemManager, ConfigManager configManager)
	{
		this.uiInput = uiInput;
		this.client = client;
		this.config = config;
		this.itemManager = itemManager;
		this.configManager = configManager;

		this.ignoredItems = new HashSet<>(Text.fromCSV(config.ignoredItems()));

		setLayout(new DynamicGridLayout(0, 1, 0, 5));

		// Panel used to modify banked item values
		this.modifyPanel = new ModifyPanel(this, itemManager);

		this.refreshBtn = new JButton("Refresh Calculator");
		refreshBtn.setFocusable(false);
		refreshBtn.addMouseListener((new MouseAdapter()
		{
			@Override
			public void mousePressed(MouseEvent e)
			{
				if (e.getButton() == MouseEvent.BUTTON1)
				{
					open(currentSkill, true);
				}
			}
		}));

		itemGrid.setSelectionListener(new SelectionListener()
		{
			@Override
			public boolean selected(BankedItem item)
			{
				modifyPanel.setBankedItem(item);
				return true;
			}

			@Override
			public boolean ignored(BankedItem item)
			{
				toggleIgnoreBankedItem(item);

				// Update Config
				config.ignoredItems(Text.toCSV(ignoredItems));

				// Update UI
				calculateBankedXpTotal();

				return true;
			}
		});
	}

	/**
	 * opens the Banked Calculator for this skill
	 */
	void open(final Skill newSkill)
	{
		open(newSkill, false);
	}

	/**
	 * opens the Banked Calculator for this skill
	 */
	void open(final Skill newSkill, final boolean refresh)
	{
		if (!refresh && newSkill.equals(currentSkill))
		{
			return;
		}

		if (!newSkill.equals(currentSkill))
		{
			boostInput.setInputValue(0);
			itemGrid.setSelectedItem(null);
			// intentionally not resetting the xp rate modifier
		}

		this.currentSkill = newSkill;
		removeAll();
		if (!refresh)
		{
			modifierComponents.clear();
			enabledModifiers.clear();
		}
		refreshBtn.setVisible(false);
		secondaryGrid = null; // prevents the Secondaries section from being added early by recreateItemGrid

		if (currentMap.isEmpty())
		{
			add(new JLabel("Please visit a bank!", JLabel.CENTER));
			add(refreshBtn);
			revalidate();
			repaint();
			return;
		}

		skillLevel = client.getRealSkillLevel(currentSkill);
		skillExp = client.getSkillExperience(currentSkill);
		endLevel = skillLevel;
		endExp = skillExp;

		uiInput.setCurrentLevelInput(skillLevel);
		uiInput.setCurrentXPInput(skillExp);
		uiInput.setTargetLevelInput(endLevel);
		uiInput.setTargetXPInput(endExp);

		recreateBankedItemMap();

		// to preserve modifiers between refreshes only attempt to populate if no modifiers are currently displayed
		if (!refresh || modifierComponents.isEmpty())
		{
			// Add XP modifiers
			populateModifierComponents();
		}

		if (!modifierComponents.isEmpty())
		{
			boolean wasClosed = modifierSection != null && !modifierSection.isOpen();
			modifierSection = new ExpandableSection(
				"Modifiers",
				"Toggles the different ways activity/experience gains can be modified",
				modifierComponents.stream()
					.map(ModifierComponent::getComponent)
					.collect(Collectors.toList())
			);
			modifierSection.setOpen(!wasClosed);
			add(modifierSection);
		}

		recreateItemGrid();

		// This should only be null if there are no items in their bank for this skill
		if (itemGrid.getSelectedItem() == null)
		{
			add(new JLabel("Couldn't find any items for this skill.", JLabel.CENTER));
		}
		else
		{
			if (config.limitToCurrentLevel())
			{
				add(boostInput);
			}
			add(xpRateModifierInput);
			add(totalXpLabel);
			add(xpToNextLevelLabel);
			add(modifyPanel);
			add(itemGrid);

			if (config.showSecondaries())
			{
				secondaryGrid = new SecondaryGrid(this, itemGrid.getPanelMap().values());
				boolean wasClosed = secondarySection != null && !secondarySection.isOpen();
				secondarySection = new ExpandableSection(
					"Secondaries",
					"Shows a breakdown of how many secondaries are required for all enabled activities",
					secondaryGrid
				);

				secondarySection.setOpen(!wasClosed);

				if (!secondaryGrid.getSecMap().isEmpty())
				{
					add(secondarySection);
				}
			}
		}

		add(refreshBtn);

		revalidate();
		repaint();
	}

	private void populateModifierComponents()
	{
		for (final Modifier modifier : Modifiers.getBySkill(this.currentSkill))
		{
			final ModifierComponent c = modifier.generateModifierComponent();
			c.setModifierConsumer((mod, newState) ->
			{
				// Only need to check other modifiers if this one is enabled
				if (newState)
				{
					// Disable any non-compatible modifications
					modifierComponents.forEach(component ->
					{
						// Modifier not enabled or modifiers are compatible with each other
						if (!component.isModifierEnabled() || (component.getModifier().compatibleWith(mod) && mod.compatibleWith(component.getModifier())))
						{
							return;
						}

						component.setModifierEnabled(false);
					});
				}

				modifierUpdated();
			});
			modifierComponents.add(c);
		}
	}

	private void recreateBankedItemMap()
	{
		bankedItemMap.clear();
		linkedMap.clear();

		final Collection<ExperienceItem> items = ExperienceItem.getBySkill(currentSkill);
		log.debug("Experience items for the {} Skill: {}", currentSkill.getName(), items);

		for (final ExperienceItem item : items)
		{
			int qty = 0;
			for (int i = 0; i < item.getItemIds().length; i++)
			{
				final int multiplier = item.isByDose() ? i + 1 : 1;
				qty += getItemQtyFromBank(item.getItemIds()[i]) * multiplier;
			}

			// Convert to bankedItems
			final BankedItem banked = new BankedItem(item, qty);
			bankedItemMap.put(item, banked);

			Activity a = item.getSelectedActivity();
			if (a == null || (config.limitToCurrentLevel() && (skillLevel + boostInput.getInputValue()) < a.getLevel()))
			{
				final List<Activity> activities = Activity.getByExperienceItem(item, config.limitToCurrentLevel() ? (skillLevel + boostInput.getInputValue()) : -1);
				if (activities.isEmpty())
				{
					item.setSelectedActivity(null);
					continue;
				}

				item.setSelectedActivity(activities.get(0));
				a = activities.get(0);
			}

			// If this activity outputs another experienceItem they should be linked
			if (a.getLinkedItem() != null)
			{
				linkedMap.put(a.getLinkedItem(), banked);
			}
		}
		log.debug("Banked Item Map: {}", bankedItemMap);
		log.debug("Linked Map: {}", linkedMap);
	}

	/**
	 * Populates the detailContainer with the necessary BankedItemPanels
	 */
	private void recreateItemGrid()
	{
		// Selection grid will only display values with > 0 items
		itemGrid.recreateGrid(this, bankedItemMap.values(), itemManager);

		// Select the first item in the list
		modifyPanel.setBankedItem(itemGrid.getSelectedItem());

		calculateBankedXpTotal();
	}

	public double getItemXpRate(final BankedItem bankedItem)
	{
		final Activity selected = bankedItem.getItem().getSelectedActivity();
		if (selected == null)
		{
			return 0;
		}

		return selected.getXpRate(enabledModifiers) * getXpRateModifier();
	}

	/**
	 * Calculates total item quantity accounting for backwards linked items
	 *
	 * @param item starting item
	 * @return item qty including linked items
	 */
	public int getItemQty(final BankedItem item)
	{
		int qty = item.getQty();

		if (!config.cascadeBankedXp())
		{
			return qty;
		}

		final Map<ExperienceItem, Integer> linked = createLinksMap(item);
		final int linkedQty = linked.entrySet().stream().mapToInt((entry) ->
		{
			// Account for activities that output multiple of a specific item per action
			final ItemStack output = entry.getKey().getSelectedActivity().getOutput();
			return (int) (entry.getValue() * (output != null ? output.getQty() : 1));
		}).sum();

		return qty + linkedQty;
	}

	private void calculateBankedXpTotal()
	{
		double total = 0.0;
		for (final GridItem i : itemGrid.getPanelMap().values())
		{
			if (i.isIgnored())
			{
				continue;
			}

			final BankedItem bi = i.getBankedItem();
			total += getItemQty(bi) * getItemXpRate(bi);
		}

		endExp = Math.min(Experience.MAX_SKILL_XP, (int) (skillExp + total));
		endLevel = Experience.getLevelForXp(endExp);

		totalXpLabel.setText("Total Banked: " + XP_FORMAT_COMMA.format(total) + "xp");
		uiInput.setTargetLevelInput(endLevel);
		uiInput.setTargetXPInput(endExp);

		final int nextLevel = Math.min(endLevel + 1, 126);
		final int nextLevelXp = Experience.getXpForLevel(nextLevel) - endExp;
		xpToNextLevelLabel.setText("Level " + nextLevel + " requires: " + XP_FORMAT_COMMA.format(nextLevelXp) + "xp");

		// Refresh secondaries whenever the exp is updated
		refreshSecondaries();

		revalidate();
		repaint();
	}

	/**
	 * Used to select an Activity for an item
	 *
	 * @param i BankedItem item the activity is tied to
	 * @param a Activity the selected activity
	 */
	public void activitySelected(final BankedItem i, final Activity a)
	{
		final ExperienceItem item = i.getItem();
		final Activity old = item.getSelectedActivity();
		if (a.equals(old))
		{
			return;
		}

		item.setSelectedActivity(a);
		saveActivity(i.getItem());

		// Cascade activity changes if necessary.
		if (config.cascadeBankedXp() && a.shouldUpdateLinked(old))
		{
			// Update Linked Map
			linkedMap.remove(old.getLinkedItem(), i);
			linkedMap.put(a.getLinkedItem(), i);
			// Update all items the old activity effects
			updateLinkedItems(old);
			// Update all the items the new activity effects
			updateLinkedItems(a);
		}

		modifyPanel.setBankedItem(i);
		itemGrid.getPanelMap().get(i).updateToolTip(enabledModifiers);

		// recalculate total xp
		calculateBankedXpTotal();
	}

	/**
	 * Updates the item quantities of all forward linked items
	 *
	 * @param activity the starting {@link Activity} to start the cascade from
	 */
	private void updateLinkedItems(final Activity activity)
	{
		if (activity == null)
		{
			return;
		}

		boolean foundSelected = false;        // Found an item currently being displayed in the ModifyPanel
		boolean gridCountChanged = false;

		ExperienceItem i = activity.getLinkedItem();
		while (i != null)
		{
			final BankedItem bi = bankedItemMap.get(i);
			if (bi == null)
			{
				break;
			}

			final int qty = getItemQty(bi);
			final boolean stackable = qty > 1 || bi.getItem().getItemInfo().isStackable();
			final AsyncBufferedImage img = itemManager.getImage(bi.getItem().getItemID(), qty, stackable);

			final GridItem gridItem = itemGrid.getPanelMap().get(bi);
			final int oldQty = gridItem.getAmount();
			gridCountChanged |= ((oldQty == 0 && qty > 0) || (oldQty > 0 && qty == 0));
			gridItem.updateIcon(img, qty);
			gridItem.updateToolTip(enabledModifiers);

			foundSelected |= itemGrid.getSelectedItem().equals(bi);

			final Activity a = bi.getItem().getSelectedActivity();
			if (a == null)
			{
				break;
			}

			i = a.getLinkedItem();
		}

		if (gridCountChanged)
		{
			itemGrid.refreshGridDisplay();
		}

		if (foundSelected)
		{
			// Refresh current modify panel if the cascade effects it
			modifyPanel.setBankedItem(itemGrid.getSelectedItem());
		}
	}

	/**
	 * Creates a Map of ExperienceItem to bank qty for all items that are being linked to this one
	 *
	 * @param item starting item
	 * @return Map of ExperienceItem to bank qty
	 */
	public Map<ExperienceItem, Integer> createLinksMap(final BankedItem item)
	{
		final Map<ExperienceItem, Integer> qtyMap = new HashMap<>();

		final Activity a = item.getItem().getSelectedActivity();
		if (a == null)
		{
			return qtyMap;
		}

		final Collection<BankedItem> linkedBank = linkedMap.get(item.getItem());
		if (linkedBank == null || linkedBank.isEmpty())
		{
			return qtyMap;
		}

		for (final BankedItem linked : linkedBank)
		{
			// Check if the item is ignored in the grid
			if (ignoredItems.contains(linked.getItem().name()))
			{
				continue;
			}

			final int qty = linked.getQty();
			if (qty > 0)
			{
				qtyMap.put(linked.getItem(), qty);
			}
			qtyMap.putAll(createLinksMap(linked));
		}

		return qtyMap;
	}

	private void modifierUpdated()
	{
		enabledModifiers.clear();
		enabledModifiers.addAll(modifierComponents.stream()
			.filter(ModifierComponent::isModifierEnabled)
			.map(ModifierComponent::getModifier)
			.collect(Collectors.toSet())
		);

		itemGrid.getPanelMap().values().forEach(item -> item.updateToolTip(enabledModifiers));
		modifyPanel.setBankedItem(modifyPanel.getBankedItem());
		calculateBankedXpTotal();
	}

	public int getItemQtyFromBank(final int id)
	{
		return currentMap.getOrDefault(id, 0);
	}

	public void resetInventoryMaps()
	{
		inventoryMap.clear();
		updateCurrentMap();
		if (currentSkill == null)
		{
			return;
		}
		open(currentSkill, true);

		// Reset experience level stuff
		uiInput.setCurrentLevelInput(1);
		uiInput.setCurrentXPInput(0);
		uiInput.setTargetLevelInput(1);
		uiInput.setTargetXPInput(0);
	}

	void setInventoryMap(final int inventoryId, final Map<Integer, Integer> map)
	{
		inventoryMap.put(inventoryId, map);
		updateCurrentMap();
		refreshBtn.setVisible(true);
	}

	private void updateCurrentMap()
	{
		currentMap.clear();
		for (final Map<Integer, Integer> map : inventoryMap.values())
		{
			for (final int id : map.keySet())
			{
				final int qty = map.get(id) + currentMap.getOrDefault(id, 0);
				currentMap.put(id, qty);
			}
		}
	}

	private void refreshSecondaries()
	{
		if (secondarySection == null || secondaryGrid == null)
		{
			return;
		}

		final boolean wasVisible = !secondaryGrid.getSecMap().isEmpty();
		secondaryGrid.updateSecMap(itemGrid.getPanelMap().values());
		final boolean shouldBeVisible = !secondaryGrid.getSecMap().isEmpty();

		if (shouldBeVisible != wasVisible)
		{
			if (shouldBeVisible)
			{
				add(secondarySection, getComponentCount() - 1);
			}
			else
			{
				remove(secondarySection);
			}
		}
	}

	private void saveActivity(final ExperienceItem item)
	{
		configManager.setConfiguration(BankedExperiencePlugin.CONFIG_GROUP, BankedExperiencePlugin.ACTIVITY_CONFIG_KEY + item.name(), item.getSelectedActivity().name());
	}

	private void updateBoost(Integer value)
	{
		// If the item grid wasn't added then the boost input is not visible
		recreateBankedItemMap();
		recreateItemGrid();
	}

	private void ignoreBankedItem(BankedItem item, boolean ignored)
	{
		final String name = item.getItem().name();
		if (ignored)
		{
			ignoredItems.add(name);
		}
		else
		{
			ignoredItems.remove(name);
		}

		updateLinkedItems(item.getItem().getSelectedActivity());
	}

	private void toggleIgnoreBankedItem(BankedItem item)
	{
		boolean ignore = !ignoredItems.contains(item.getItem().name());
		ignoreBankedItem(item, ignore);
	}

	public void setIgnoreAllItems(boolean ignored)
	{
		itemGrid.getPanelMap().values().forEach((i) ->
		{
			ignoreBankedItem(i.getBankedItem(), ignored);
			i.setIgnore(ignored);
		});

		// Update Config
		config.ignoredItems(Text.toCSV(ignoredItems));

		// Update UI
		calculateBankedXpTotal();
	}

	public int getXpRateModifier()
	{
		return xpRateModifierInput.getInputValue();
	}

	private void updateXpRateModifier(Integer value)
	{
		recreateItemGrid();
	}
}

/*
 * Copyright (c) 2021, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.components;

import com.google.common.collect.ImmutableList;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.util.Collection;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.MatteBorder;
import lombok.Getter;
import net.runelite.client.plugins.config.ConfigPlugin;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.DynamicGridLayout;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.SwingUtil;

/**
 * Copy of RuneLite's ConfigPanel Sections
 */
public class ExpandableSection extends JPanel
{
	private static final ImageIcon SECTION_EXPAND_ICON;
	private static final ImageIcon SECTION_EXPAND_ICON_HOVER;
	private static final ImageIcon SECTION_RETRACT_ICON;
	private static final ImageIcon SECTION_RETRACT_ICON_HOVER;
	static
	{
		BufferedImage sectionRetractIcon = ImageUtil.loadImageResource(ConfigPlugin.class, "/util/arrow_right.png");
		sectionRetractIcon = ImageUtil.luminanceOffset(sectionRetractIcon, -121);
		SECTION_EXPAND_ICON = new ImageIcon(sectionRetractIcon);
		SECTION_EXPAND_ICON_HOVER = new ImageIcon(ImageUtil.alphaOffset(sectionRetractIcon, -100));
		final BufferedImage sectionExpandIcon = ImageUtil.rotateImage(sectionRetractIcon, Math.PI / 2);
		SECTION_RETRACT_ICON = new ImageIcon(sectionExpandIcon);
		SECTION_RETRACT_ICON_HOVER = new ImageIcon(ImageUtil.alphaOffset(sectionExpandIcon, -100));
	}
	private final JButton sectionToggle;
	private final JPanel sectionContents;

	@Getter
	private boolean isOpen = true;

	public ExpandableSection(final String header, final String description, JComponent... components)
	{
		this(header, description, ImmutableList.copyOf(components));
	}

	public ExpandableSection(final String header, final String description, Collection<JComponent> components)
	{
		this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
		this.setMinimumSize(new Dimension(PluginPanel.PANEL_WIDTH, 0));

		final JPanel sectionHeader = new JPanel();
		sectionHeader.setLayout(new BorderLayout());
		sectionHeader.setMinimumSize(new Dimension(PluginPanel.PANEL_WIDTH, 0));
		// For whatever reason, the header extends out by a single pixel when closed. Adding a single pixel of
		// border on the right only affects the width when closed, fixing the issue.
		sectionHeader.setBorder(new CompoundBorder(
			new MatteBorder(0, 0, 1, 0, ColorScheme.MEDIUM_GRAY_COLOR),
			new EmptyBorder(0, 0, 3, 1)));
		this.add(sectionHeader, BorderLayout.NORTH);

		sectionToggle = new JButton();
		sectionToggle.setIcon(isOpen ? SECTION_RETRACT_ICON : SECTION_EXPAND_ICON);
		sectionToggle.setRolloverIcon(isOpen ? SECTION_RETRACT_ICON_HOVER : SECTION_EXPAND_ICON_HOVER);
		sectionToggle.setPreferredSize(new Dimension(18, 0));
		sectionToggle.setBorder(new EmptyBorder(0, 0, 0, 5));
		sectionToggle.setToolTipText(isOpen ? "Retract" : "Expand");
		SwingUtil.removeButtonDecorations(sectionToggle);
		sectionHeader.add(sectionToggle, BorderLayout.WEST);

		final JLabel sectionName = new JLabel(header);
		sectionName.setForeground(ColorScheme.BRAND_ORANGE);
		sectionName.setFont(FontManager.getRunescapeBoldFont());
		if (description != null)
		{
			sectionName.setToolTipText("<html>" + header + ":<br>" + description + "</html>");
		}
		sectionHeader.add(sectionName, BorderLayout.CENTER);

		sectionContents = new JPanel();
		sectionContents.setLayout(new DynamicGridLayout(0, 1, 0, 5));
		sectionContents.setMinimumSize(new Dimension(PluginPanel.PANEL_WIDTH, 0));
		sectionContents.setBorder(new CompoundBorder(
			new MatteBorder(0, 0, 1, 0, ColorScheme.MEDIUM_GRAY_COLOR),
			new EmptyBorder(PluginPanel.BORDER_OFFSET, 0, PluginPanel.BORDER_OFFSET, 0)));
		sectionContents.setVisible(isOpen);
		for (final JComponent c : components)
		{
			sectionContents.add(c);
		}
		this.add(sectionContents, BorderLayout.SOUTH);

		// Add listeners to each part of the header so that it's easier to toggle them
		final MouseAdapter adapter = new MouseAdapter()
		{
			@Override
			public void mouseClicked(MouseEvent e)
			{
				toggle();
			}
		};
		sectionToggle.addActionListener(actionEvent -> toggle());
		sectionName.addMouseListener(adapter);
		sectionHeader.addMouseListener(adapter);
	}

	private void toggle()
	{
		isOpen = !isOpen;
		sectionToggle.setIcon(isOpen ? SECTION_RETRACT_ICON : SECTION_EXPAND_ICON);
		sectionToggle.setRolloverIcon(isOpen ? SECTION_RETRACT_ICON_HOVER : SECTION_EXPAND_ICON_HOVER);
		sectionToggle.setToolTipText(isOpen ? "Retract" : "Expand");
		sectionContents.setVisible(isOpen);
	}

	public void setOpen(final boolean open)
	{
		if (isOpen == open)
		{
			return;
		}

		toggle();
	}
}

/*
 * Copyright (c) 2019, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.components;

import lombok.NoArgsConstructor;
import thestonedturtle.bankedexperience.BankedCalculator;
import thestonedturtle.bankedexperience.data.BankedItem;
import java.awt.GridLayout;
import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.swing.JPanel;
import lombok.Getter;
import lombok.Setter;
import net.runelite.client.game.ItemManager;
import net.runelite.client.util.AsyncBufferedImage;

/**
 * A grid that supports mouse events
 */
@NoArgsConstructor
public class SelectionGrid extends JPanel
{
	private static final int ITEMS_PER_ROW = 5;

	@Getter
	private final Map<BankedItem, GridItem> panelMap = new LinkedHashMap<>();

	@Getter
	@Setter
	private BankedItem selectedItem;

	@Setter
	private SelectionListener selectionListener;

	public void recreateGrid(final BankedCalculator calc, final Collection<BankedItem> items, final ItemManager itemManager)
	{
		panelMap.clear();
		// Create a panel for every item
		for (final BankedItem item : items)
		{
			final int qty = calc.getItemQty(item);
			final boolean stackable = item.getItem().isStackable() || qty > 1;
			final AsyncBufferedImage img = itemManager.getImage(item.getItem().getItemID(), qty, stackable);

			final GridItem gridItem = new GridItem(
				item,
				img,
				qty,
				calc.getEnabledModifiers(),
				calc.getIgnoredItems().contains(item.getItem().name()),
				calc::setIgnoreAllItems,
				calc.getXpRateModifier()
			);

			gridItem.setSelectionListener(new SelectionListener()
			{
				@Override
				public boolean selected(BankedItem item)
				{
					if (selectionListener != null && !selectionListener.selected(item))
					{
						return false;
					}

					final GridItem gridItem = panelMap.get(selectedItem);
					if (gridItem != null)
					{
						gridItem.unselect();
					}

					selectedItem = item;
					return true;
				}

				@Override
				public boolean ignored(BankedItem item)
				{
					return selectionListener != null && selectionListener.ignored(item);
				}
			});
			panelMap.put(item, gridItem);
		}

		refreshGridDisplay();
	}

	public void refreshGridDisplay()
	{
		this.removeAll();

		final List<GridItem> items = panelMap.values().stream().filter(gi -> gi.getAmount() > 0).collect(Collectors.toList());

		// Calculates how many rows need to be display to fit all items
		final int rowSize = ((items.size() % ITEMS_PER_ROW == 0) ? 0 : 1) + items.size() / ITEMS_PER_ROW;
		setLayout(new GridLayout(rowSize, ITEMS_PER_ROW, 1, 1));

		for (final GridItem gridItem : items)
		{
			// Select the first option
			if (selectedItem == null)
			{
				gridItem.select();
				selectedItem = gridItem.getBankedItem();
			}
			else if (gridItem.getBankedItem().equals(selectedItem))
			{
				gridItem.select();
			}

			this.add(gridItem);
		}
	}
}

/*
 * Copyright (c) 2021, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.components;

import com.google.common.collect.LinkedListMultimap;
import com.google.common.collect.Multimap;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import lombok.Getter;
import lombok.Value;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ItemID;
import net.runelite.client.ui.ColorScheme;
import thestonedturtle.bankedexperience.BankedCalculator;
import thestonedturtle.bankedexperience.data.Activity;
import thestonedturtle.bankedexperience.data.BankedItem;
import thestonedturtle.bankedexperience.data.ItemInfo;
import thestonedturtle.bankedexperience.data.ItemStack;
import thestonedturtle.bankedexperience.data.Secondaries;

@Slf4j
public class SecondaryGrid extends JPanel
{
	@Value
	private static class SecondaryInfo
	{
		BankedItem bankedItem;
		double qty;
	}

	@Getter
	private final Multimap<Integer, SecondaryInfo> secMap = LinkedListMultimap.create();
	private final Map<Integer, ItemInfo> infoMap = new HashMap<>();
	private final Map<Integer, Integer> availableMap = new HashMap<>();
	private final BankedCalculator calc;

	public SecondaryGrid(final BankedCalculator calc, final Collection<GridItem> items)
	{
		this.calc = calc;
		setLayout(new GridLayout(0, 5, 1, 1));

		updateSecMap(items);
	}

	private void refreshUI()
	{
		removeAll();
		for (final int itemID : secMap.keySet())
		{
			final JLabel label = new JLabel();
			label.setOpaque(true);
			label.setMinimumSize(new Dimension(16, 16));
			label.setBackground(ColorScheme.DARKER_GRAY_COLOR);
			label.setBorder(BorderFactory.createEmptyBorder(5, 0, 2, 0));

			label.setVerticalAlignment(SwingConstants.CENTER);
			label.setHorizontalAlignment(SwingConstants.CENTER);

			double qty = 0;
			final StringBuilder resources = new StringBuilder();
			for (final SecondaryInfo info : secMap.get(itemID))
			{
				if (info.getQty() == 0)
				{
					continue;
				}

				qty += info.getQty();
				resources.append("<br/>");
				resources.append(BankedCalculator.XP_FORMAT_COMMA.format(info.getQty()))
					.append(" x ")
					.append(info.getBankedItem().getItem().getItemInfo().getName());
			}
			calc.getItemManager().getImage(itemID, (int) Math.round(qty), qty > 0).addTo(label);

			final ItemInfo info = infoMap.get(itemID);
			final String itemName = info == null ? "" : info.getName();
			final int available = availableMap.getOrDefault(itemID, 0);
			final double result = available - qty;

			final String tooltip = "<html>" + itemName
				+ "<br/>Banked: " + BankedCalculator.XP_FORMAT_COMMA.format(available)
				+ "<br/>Result: " + (result > 0 ? "+" : "") + BankedCalculator.XP_FORMAT_COMMA.format(result)
				+ "<br/>" + resources.toString() + "</html>";
			label.setToolTipText(tooltip);

			label.setBackground(result >= 0 ? GridItem.SELECTED_BACKGROUND : GridItem.IGNORED_BACKGROUND);
			add(label);
		}
	}

	// calculates the total required secondaries and links each secondary item by id to the banked items they come from
	public void updateSecMap(final Collection<GridItem> items)
	{
		secMap.clear();
		infoMap.clear();
		availableMap.clear();
		for (final GridItem item : items)
		{
			if (item.isIgnored())
			{
				continue;
			}

			// Check if the selected activity for the current item in the grid has any secondaries
			final BankedItem banked =  item.getBankedItem();
			final Activity a = banked.getItem().getSelectedActivity();
			if (a == null || a.getSecondaries() == null)
			{
				continue;
			}

			final int bankedQty = calc.getItemQty(item.getBankedItem());
			if (bankedQty == 0)
			{
				continue;
			}

			// Ensure all items are stacked properly
			final Secondaries secondaries = a.getSecondaries();
			final Map<Integer, Double> qtyMap = new HashMap<>();

			if (secondaries.getCustomHandler() instanceof Secondaries.ByDose)
			{
				final Secondaries.ByDose byDose = ((Secondaries.ByDose) secondaries.getCustomHandler());
				final int firstId = byDose.getItems()[0];
				int available = 0;
				for (int i = 0; i < byDose.getItems().length; i++)
				{
					final int id = byDose.getItems()[i];
					available += (this.calc.getItemQtyFromBank(id) * (i + 1));
				}
				availableMap.put(firstId, available);
				qtyMap.merge(firstId, (double) bankedQty, Double::sum);
				infoMap.put(firstId, byDose.getInfoItems()[0].getInfo());
			}
			else if (secondaries.getCustomHandler() instanceof Secondaries.Degrime)
			{
				Secondaries.Degrime handler = (Secondaries.Degrime) secondaries.getCustomHandler();
				qtyMap.merge(ItemID.NATURE_RUNE, (double) handler.getTotalNaturesRequired(bankedQty), Double::sum);
				infoMap.put(ItemID.NATURE_RUNE, new ItemInfo("Nature rune", true));
			}
			else if (secondaries.getCustomHandler() instanceof Secondaries.Crushable)
			{
				final Secondaries.Crushable crushable = (Secondaries.Crushable) secondaries.getCustomHandler();
				final int crushedItemId = crushable.getInfoItems()[0].getId();
				int available = 0;
				for (final int itemId : crushable.getItems())
				{
					available += this.calc.getItemQtyFromBank(itemId);
				}
				availableMap.put(crushedItemId, available);
				qtyMap.merge(crushedItemId, (double) bankedQty, Double::sum);
				infoMap.put(crushedItemId, crushable.getInfoItems()[0].getInfo());
			}
			else if (secondaries.getCustomHandler() != null)
			{
				log.warn("Unhandled secondaries custom handler: {}", secondaries.getCustomHandler().getClass());
			}
			else
			{
				for (final ItemStack stack : secondaries.getItems())
				{
					qtyMap.merge(stack.getId(), stack.getQty() * bankedQty, Double::sum);
					infoMap.put(stack.getId(), stack.getInfo());
				}
			}

			// Map this quantity to this activity through the banked item
			for (final Map.Entry<Integer, Double> entry : qtyMap.entrySet())
			{
				if (!availableMap.containsKey(entry.getKey()))
				{
					availableMap.put(entry.getKey(), calc.getItemQtyFromBank(entry.getKey()));
				}

				secMap.put(entry.getKey(), new SecondaryInfo(banked, entry.getValue()));
			}
		}

		refreshUI();
	}
}

/*
 * Copyright (c) 2019, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.components.combobox;

import java.awt.Color;
import java.awt.Component;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.border.EmptyBorder;
import lombok.Setter;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.Text;

/**
 * Based off the old RL ComboBoxListRenderer but supports icons and default text values
 */
public final class ComboBoxIconListRenderer extends JLabel implements ListCellRenderer
{
	@Setter
	private String defaultText = "Select an option...";

	@Override
	public Component getListCellRendererComponent(JList list, Object o, int index, boolean isSelected, boolean cellHasFocus)
	{
		if (isSelected)
		{
			setBackground(ColorScheme.DARK_GRAY_COLOR);
			setForeground(Color.WHITE);
		}
		else
		{
			setBackground(list.getBackground());
			setForeground(ColorScheme.LIGHT_GRAY_COLOR);
		}

		setBorder(new EmptyBorder(5, 5, 5, 0));

		String text;
		setIcon(null);
		// If using setSelectedItem(null) or setSelectedIndex(-1) show default text until a selection is made
		if (index == -1 && o == null)
		{
			text = defaultText;
		}
		else if (o instanceof Enum)
		{
			text = Text.titleCase((Enum) o);
		}
		else if (o instanceof ComboBoxIconEntry)
		{
			final ComboBoxIconEntry e = (ComboBoxIconEntry) o;
			text = e.getText();
			setIcon(e.getIcon());
		}
		else
		{
			text = o.toString();
		}

		setText(text);

		return this;
	}
}

/*
 * Copyright (c) 2019, TheStonedTurtle <http://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.components.combobox;

import javax.annotation.Nullable;
import javax.swing.Icon;
import lombok.AllArgsConstructor;
import lombok.Getter;

/**
 * Used with ComboBoxListRenderer to render an icon next to the text of the list entry.
 * Also supports adding a data object to be used for more complex selection logic
 */
@AllArgsConstructor
@Getter
public class ComboBoxIconEntry
{
	private Icon icon;
	private String text;
	@Nullable
	private Object data;
}

/*
 * Copyright (c) 2019, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.components;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ItemEvent;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import lombok.Getter;
import net.runelite.api.Constants;
import net.runelite.api.ItemID;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.shadowlabel.JShadowedLabel;
import net.runelite.client.util.AsyncBufferedImage;
import thestonedturtle.bankedexperience.BankedCalculator;
import thestonedturtle.bankedexperience.components.combobox.ComboBoxIconEntry;
import thestonedturtle.bankedexperience.components.combobox.ComboBoxIconListRenderer;
import thestonedturtle.bankedexperience.data.Activity;
import thestonedturtle.bankedexperience.data.BankedItem;
import thestonedturtle.bankedexperience.data.ExperienceItem;
import thestonedturtle.bankedexperience.data.ItemStack;
import thestonedturtle.bankedexperience.data.Secondaries;

public class ModifyPanel extends JPanel
{
	private static final Dimension ICON_SIZE = new Dimension(Constants.ITEM_SPRITE_WIDTH + 4, Constants.ITEM_SPRITE_HEIGHT);
	private static final DecimalFormat FORMAT_COMMA = new DecimalFormat("#,###.##");

	private static final Border PANEL_BORDER = new EmptyBorder(3, 0, 3, 0);
	private static final Color BACKGROUND_COLOR = ColorScheme.DARKER_GRAY_COLOR;

	private final BankedCalculator calc;
	private final ItemManager itemManager;

	@Getter
	private BankedItem bankedItem;
	private Map<ExperienceItem, Integer> linkedMap;
	@Getter
	private int amount = 0;
	@Getter
	private double total = 0;

	// Banked item information display
	private final JPanel labelContainer;
	private final JLabel image;
	private final JShadowedLabel labelName;
	private final JShadowedLabel labelValue;

	// Elements used to adjust banked item
	private final JPanel adjustContainer;

	public ModifyPanel(final BankedCalculator calc, final ItemManager itemManager)
	{
		this.calc = calc;
		this.itemManager = itemManager;

		this.setLayout(new GridBagLayout());
		this.setBorder(PANEL_BORDER);
		this.setBackground(ColorScheme.DARK_GRAY_COLOR);

		// Banked item information display
		labelContainer = new JPanel();
		labelContainer.setLayout(new BorderLayout());
		labelContainer.setBackground(BACKGROUND_COLOR);
		labelContainer.setBorder(new EmptyBorder(5, 0, 5, 0));

		// Icon
		image = new JLabel();
		image.setMinimumSize(ICON_SIZE);
		image.setMaximumSize(ICON_SIZE);
		image.setPreferredSize(ICON_SIZE);
		image.setHorizontalAlignment(SwingConstants.CENTER);
		image.setBorder(new EmptyBorder(0, 8, 0, 0));

		// Wrapper panel for the shadowed labels
		final JPanel uiInfo = new JPanel(new GridLayout(2, 1));
		uiInfo.setBorder(new EmptyBorder(0, 5, 0, 0));
		uiInfo.setBackground(BACKGROUND_COLOR);

		labelName = new JShadowedLabel();
		labelName.setForeground(Color.WHITE);
		labelName.setVerticalAlignment(SwingUtilities.BOTTOM);
		labelName.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH - 55, 20));

		labelValue = new JShadowedLabel();
		labelValue.setFont(FontManager.getRunescapeSmallFont());
		labelValue.setVerticalAlignment(SwingUtilities.TOP);

		uiInfo.add(labelName);
		uiInfo.add(labelValue);

		// Append elements to item info panel
		labelContainer.add(image, BorderLayout.LINE_START);
		labelContainer.add(uiInfo, BorderLayout.CENTER);

		// Container for tools to adjust banked calculation for this item
		adjustContainer = new JPanel();
		adjustContainer.setLayout(new GridBagLayout());
		adjustContainer.setBackground(BACKGROUND_COLOR);

		GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.BOTH;
		c.weightx = 1;
		c.gridx = 0;
		c.gridy = 0;
		c.ipady = 0;

		this.add(labelContainer, c);
		c.gridy++;
		this.add(adjustContainer, c);
	}

	// Updates the UI for the selected item
	public void setBankedItem(final BankedItem bankedItem)
	{
		if (bankedItem == null)
		{
			return;
		}

		this.bankedItem = bankedItem;
		this.amount = this.calc.getItemQty(bankedItem);
		this.linkedMap = this.calc.getConfig().cascadeBankedXp() ? this.calc.createLinksMap(bankedItem) : new HashMap<>();

		updateImageTooltip();
		updateLabelContainer();
		updateAdjustContainer();
	}

	private void updateImageTooltip()
	{
		final StringBuilder b = new StringBuilder("<html>");
		b.append(bankedItem.getQty()).append(" x ").append(bankedItem.getItem().getItemInfo().getName());

		for (final Map.Entry<ExperienceItem, Integer> e : this.linkedMap.entrySet())
		{
			b.append("<br/>").append(e.getValue()).append(" x ").append(e.getKey().getItemInfo().getName());
			final ItemStack output = e.getKey().getSelectedActivity().getOutput();
			if (output != null && output.getQty() > 1)
			{
				b.append(" x ").append(output.getQty());
			}
		}

		b.append("</html>");
		this.image.setToolTipText(b.toString());
	}

	private void updateLabelContainer()
	{
		final ExperienceItem item = bankedItem.getItem();

		// Update image icon
		final boolean stackable = item.getItemInfo().isStackable() || amount > 1;
		final AsyncBufferedImage icon = itemManager.getImage(item.getItemID(), amount, stackable);
		final Runnable resize = () -> image.setIcon(new ImageIcon(icon.getScaledInstance(Constants.ITEM_SPRITE_WIDTH, ICON_SIZE.height, Image.SCALE_SMOOTH)));
		icon.onLoaded(resize);
		resize.run();

		final String itemName = item.getItemInfo().getName();
		labelName.setText(itemName);

		final double xp = calc.getItemXpRate(bankedItem);
		// Round to two decimal places
		total = BigDecimal.valueOf(amount * xp).setScale(2, RoundingMode.HALF_UP).doubleValue();

		final String value = FORMAT_COMMA.format(total) + "xp";
		labelValue.setText(value);

		labelContainer.setToolTipText("<html>" + itemName
			+ "<br/>xp: " + xp
			+ "<br/>Total: " + total + "</html>");

		labelContainer.revalidate();
		labelContainer.repaint();
	}

	private void updateAdjustContainer()
	{
		adjustContainer.removeAll();

		final JLabel label = new JLabel("Activity:");
		label.setVerticalAlignment(JLabel.CENTER);
		label.setHorizontalAlignment(JLabel.CENTER);

		GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.HORIZONTAL;
		c.weightx = 1;
		c.gridx = 0;
		c.gridy = 0;
		c.ipady = 4;

		adjustContainer.add(label, c);
		c.gridy++;

		final int level = calc.getConfig().limitToCurrentLevel() ? (calc.getSkillLevel() + calc.getBoostInput().getInputValue()) : -1;
		final List<Activity> activities = Activity.getByExperienceItem(bankedItem.getItem(), level);
		if (activities == null || activities.size() == 0)
		{
			final JLabel unusable = new JLabel("Unusable at current level");
			unusable.setVerticalAlignment(JLabel.CENTER);
			unusable.setHorizontalAlignment(JLabel.CENTER);

			adjustContainer.removeAll();
			adjustContainer.add(unusable, c);
			return;
		}
		else if (activities.size() == 1)
		{
			final Activity a = activities.get(0);

			final int qty = a.getOutput() == null ? 1 : (int) a.getOutput().getQty();
			final boolean stackable = a.getOutputItemInfo() == null ? qty > 1 : a.getOutputItemInfo().isStackable();
			final AsyncBufferedImage img = itemManager.getImage(a.getIcon(), qty, stackable);
			final ImageIcon icon = new ImageIcon(img);
			final double xp = a.getXpRate(calc.getEnabledModifiers()) * calc.getXpRateModifier();
			final JPanel container = createShadowedLabel(icon, a.getName(), FORMAT_COMMA.format(xp) + "xp");

			img.onLoaded(() ->
			{
				icon.setImage(img);
				container.repaint();
			});

			adjustContainer.add(container, c);
			c.gridy++;
		}
		else
		{
			final JComboBox<ComboBoxIconEntry> dropdown = new JComboBox<>();
			dropdown.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH - 25, 40));
			dropdown.setFocusable(false); // To prevent an annoying "focus paint" effect
			dropdown.setForeground(Color.WHITE);
			dropdown.setBorder(new EmptyBorder(2, 0, 0, 0));

			final ComboBoxIconListRenderer renderer = new ComboBoxIconListRenderer();
			dropdown.setRenderer(renderer);

			for (final Activity option : activities)
			{
				final double xp = option.getXpRate(calc.getEnabledModifiers()) * calc.getXpRateModifier();
				String name = option.getName();
				if (xp > 0)
				{
					name += " (" + FORMAT_COMMA.format(xp) + "xp)";
				}

				// Use the output quantity if its stackable
				final int iconQty = option.getOutput() != null && option.getOutput().getId() == option.getIcon() ? (int) option.getOutput().getQty() : 1;
				final boolean iconStackable = option.getOutputItemInfo() == null ? iconQty > 1 : option.getOutputItemInfo().isStackable();
				final AsyncBufferedImage img = itemManager.getImage(option.getIcon(), iconQty, iconStackable);
				final ImageIcon icon = new ImageIcon(img);
				final ComboBoxIconEntry entry = new ComboBoxIconEntry(icon, name, option);
				dropdown.addItem(entry);

				img.onLoaded(() ->
				{
					icon.setImage(img);
					dropdown.revalidate();
					dropdown.repaint();
				});

				final Activity selected = bankedItem.getItem().getSelectedActivity();
				if (option.equals(selected))
				{
					dropdown.setSelectedItem(entry);
				}
			}

			// Add click event handler now to prevent above code from triggering it.
			dropdown.addItemListener(e ->
			{
				if (e.getStateChange() == ItemEvent.SELECTED && e.getItem() instanceof ComboBoxIconEntry)
				{
					final ComboBoxIconEntry source = (ComboBoxIconEntry) e.getItem();
					if (source.getData() instanceof Activity)
					{
						final Activity selectedActivity = ((Activity) source.getData());
						calc.activitySelected(bankedItem, selectedActivity);
						updateLabelContainer();
					}
				}
			});

			adjustContainer.add(dropdown, c);
			c.gridy++;
		}

		final Activity a = bankedItem.getItem().getSelectedActivity();
		if (a == null)
		{
			return;
		}

		if (a.getOutput() != null && a.getOutput().getQty() != 1)
		{
			final JLabel secondaryLabel = new JLabel("Outputs:");
			secondaryLabel.setVerticalAlignment(JLabel.CENTER);
			secondaryLabel.setHorizontalAlignment(JLabel.CENTER);

			adjustContainer.add(secondaryLabel, c);
			c.gridy++;

			// Create Icon
			final double qty = amount * a.getOutput().getQty();
			final boolean stackable = qty > 1 || (a.getOutputItemInfo() != null && a.getOutputItemInfo().isStackable());
			final AsyncBufferedImage img = itemManager.getImage(a.getIcon(), (int) qty, stackable);
			final ImageIcon icon = new ImageIcon(img);
			final JLabel iconLabel = createImageLabel(icon);
			iconLabel.setToolTipText(FORMAT_COMMA.format((int) qty) + " x " + a.getOutputItemInfo().getName());

			final JPanel container = createShadowedLabel(iconLabel, a.getOutputItemInfo().getName(), null);

			img.onLoaded(() ->
			{
				icon.setImage(img);
				container.repaint();
			});

			adjustContainer.add(container, c);
			c.gridy++;
		}

		final Secondaries secondaries = a.getSecondaries();
		if (secondaries != null && this.calc.getConfig().showSecondaries())
		{
			final JLabel secondaryLabel = new JLabel("Secondaries:");
			secondaryLabel.setVerticalAlignment(JLabel.CENTER);
			secondaryLabel.setHorizontalAlignment(JLabel.CENTER);

			adjustContainer.add(secondaryLabel, c);
			c.gridy++;

			final JPanel container = new JPanel();
			container.setLayout(new GridLayout(1, 6, 1, 1));
			container.setBackground(BACKGROUND_COLOR);

			for (final ItemStack s : secondaries.getItems())
			{
				final int required = (int) (s.getQty() * amount);
				final int available = this.calc.getItemQtyFromBank(s.getId());
				container.add(createSecondaryItemLabel(s, available, required));
			}

			if (secondaries.getCustomHandler() instanceof Secondaries.ByDose)
			{
				final Secondaries.ByDose byDose = ((Secondaries.ByDose) secondaries.getCustomHandler());
				final int required = amount;
				int available = 0;
				for (int i = 0; i < byDose.getItems().length; i++)
				{
					final int id = byDose.getItems()[i];
					available += (this.calc.getItemQtyFromBank(id) * (i + 1));
				}

				assert byDose.getInfoItems().length > 0;
				container.add(createSecondaryItemLabel(byDose.getInfoItems()[0], available, required));
			}

			if (secondaries.getCustomHandler() instanceof Secondaries.Degrime)
			{
				Secondaries.Degrime handler = (Secondaries.Degrime) secondaries.getCustomHandler();
				final int available = this.calc.getItemQtyFromBank(ItemID.NATURE_RUNE);
				final int required = handler.getTotalNaturesRequired(amount);
				container.add(createSecondaryItemLabel(new ItemStack(ItemID.NATURE_RUNE, 0), available, required));
			}

			if (secondaries.getCustomHandler() instanceof Secondaries.Crushable)
			{
				Secondaries.Crushable crushable = (Secondaries.Crushable) secondaries.getCustomHandler();
				int available = 0;
				for (final int itemId : crushable.getItems())
				{
					available += this.calc.getItemQtyFromBank(itemId);
				}
				container.add(createSecondaryItemLabel(crushable.getInfoItems()[0], available, amount));
			}

			adjustContainer.add(container, c);
			c.gridy++;
		}
	}

	private JLabel createSecondaryItemLabel(ItemStack stack, int available, int required)
	{
		final JLabel l = new JLabel();
		final AsyncBufferedImage img = itemManager.getImage(stack.getId(), required, required > 1);
		final ImageIcon icon = new ImageIcon(img);
		img.onLoaded(() ->
		{
			icon.setImage(img);
			l.repaint();
		});

		l.setIcon(icon);
		l.setHorizontalAlignment(JLabel.CENTER);

		final int result = (available - required);
		final String itemName = stack.getInfo() == null ? "" : stack.getInfo().getName();
		final String tooltip = "<html>" + itemName +
			"<br/>Banked: " + FORMAT_COMMA.format(available) +
			"<br/>Needed: " + FORMAT_COMMA.format(required) +
			"<br/>Result: " + (result > 0 ? "+" : "") + FORMAT_COMMA.format(result) +
			"</html>";
		l.setToolTipText(tooltip);

		return l;
	}

	private JLabel createImageLabel(final ImageIcon icon)
	{
		final JLabel image = new JLabel();
		image.setMinimumSize(ICON_SIZE);
		image.setMaximumSize(ICON_SIZE);
		image.setPreferredSize(ICON_SIZE);
		image.setHorizontalAlignment(SwingConstants.CENTER);
		image.setBorder(new EmptyBorder(0, 8, 0, 0));

		image.setIcon(icon);

		return image;
	}

	private JPanel createShadowedLabel(final ImageIcon icon, final String name, final String value)
	{
		final JLabel imageLabel = createImageLabel(icon);
		return createShadowedLabel(imageLabel, name, value);
	}

	private JPanel createShadowedLabel(final JLabel icon, final String name, final String value)
	{
		// Wrapper panel for the shadowed labels
		final JPanel wrapper = new JPanel(new GridLayout(value == null ? 1 : 2, 1));
		wrapper.setBorder(new EmptyBorder(0, 5, 0, 0));
		wrapper.setBackground(BACKGROUND_COLOR);

		final JShadowedLabel nameLabel = new JShadowedLabel(name);
		nameLabel.setForeground(Color.WHITE);
		wrapper.add(nameLabel);

		if (value != null)
		{
			nameLabel.setVerticalAlignment(SwingUtilities.BOTTOM);

			final JShadowedLabel valueLabel = new JShadowedLabel(value);
			valueLabel.setFont(FontManager.getRunescapeSmallFont());
			valueLabel.setVerticalAlignment(SwingUtilities.TOP);
			wrapper.add(valueLabel);
		}

		final JPanel container = new JPanel();
		container.setLayout(new BorderLayout());
		container.setBackground(BACKGROUND_COLOR);
		container.setBorder(new EmptyBorder(5, 0, 5, 0));

		container.add(icon, BorderLayout.LINE_START);
		container.add(wrapper, BorderLayout.CENTER);

		return container;
	}
}

/*
 * Copyright (c) 2019, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.components;

import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Collection;
import java.util.function.Consumer;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import lombok.Getter;
import lombok.Setter;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.AsyncBufferedImage;
import thestonedturtle.bankedexperience.BankedCalculator;
import thestonedturtle.bankedexperience.data.Activity;
import thestonedturtle.bankedexperience.data.BankedItem;
import thestonedturtle.bankedexperience.data.modifiers.Modifier;

@Getter
public class GridItem extends JLabel
{
	private final static String IGNORE = "Ignore Item";
	private final static String IGNORE_ALL = "Ignore All Items";
	private final static String INCLUDE = "Include Item";
	private final static String INCLUDE_ALL = "Include All Items";

	private static final Color UNSELECTED_BACKGROUND = ColorScheme.DARKER_GRAY_COLOR;
	private static final Color UNSELECTED_HOVER_BACKGROUND = ColorScheme.DARKER_GRAY_HOVER_COLOR;

	public static final Color SELECTED_BACKGROUND = new Color(0, 70, 0);
	private static final Color SELECTED_HOVER_BACKGROUND =  new Color(0, 100, 0);

	public static final Color IGNORED_BACKGROUND = new Color(90, 0, 0);
	private static final Color IGNORED_HOVER_BACKGROUND = new Color(120, 0, 0);

	private static final Color RNG_BACKGROUND = new Color(140, 90, 0);
	private static final Color RNG_HOVER_BACKGROUND = new Color(186, 120, 0);

	@Setter
	private SelectionListener selectionListener;

	private final BankedItem bankedItem;
	private int amount;

	private boolean selected = false;
	private boolean ignored;
	private boolean rng;

	private final JMenuItem IGNORE_OPTION = new JMenuItem(IGNORE);
	private final JMenuItem IGNORE_ALL_OPTION = new JMenuItem(IGNORE_ALL);
	private final JMenuItem INCLUDE_ALL_OPTION = new JMenuItem(INCLUDE_ALL);

	private final int xpRateModifier;

	GridItem(final BankedItem item, final AsyncBufferedImage icon, final int amount,
			final Collection<Modifier> modifiers, final boolean ignore, Consumer<Boolean> bulkIgnoreCallback, final int xpRateModifier)
	{
		super("");

		this.setIgnore(ignore);
		this.bankedItem = item;

		this.setOpaque(true);
		this.setBorder(BorderFactory.createEmptyBorder(5, 0, 2, 0));

		this.setVerticalAlignment(SwingConstants.CENTER);
		this.setHorizontalAlignment(SwingConstants.CENTER);

		this.xpRateModifier = xpRateModifier;

		updateIcon(icon, amount);
		updateToolTip(modifiers);

		this.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(MouseEvent mouseEvent)
			{
				if (mouseEvent.getButton() == MouseEvent.BUTTON1)
				{

					if (selectionListener != null && !selectionListener.selected(item))
					{
						return;
					}

					select();
				}
			}

			@Override
			public void mouseEntered(MouseEvent e)
			{
				final GridItem item = (GridItem) e.getSource();
				item.setBackground(getHoverBackgroundColor());
			}

			@Override
			public void mouseExited(MouseEvent e)
			{
				final GridItem item = (GridItem) e.getSource();
				item.setBackground(getBackgroundColor());
			}
		});

		IGNORE_OPTION.addActionListener(e ->
		{
			ignored = !ignored;
			if (selectionListener != null && !selectionListener.ignored(item))
			{
				ignored = !ignored;
				return;
			}

			setIgnore(ignored);
		});

		IGNORE_ALL_OPTION.addActionListener(e ->
		{
			bulkIgnoreCallback.accept(true);
		});

		INCLUDE_ALL_OPTION.addActionListener(e ->
		{
			bulkIgnoreCallback.accept(false);
		});

		final JPopupMenu popupMenu = new JPopupMenu();
		popupMenu.setBorder(new EmptyBorder(5, 5, 5, 5));
		popupMenu.add(IGNORE_OPTION);
		popupMenu.add(INCLUDE_ALL_OPTION);
		popupMenu.add(IGNORE_ALL_OPTION);

		this.setComponentPopupMenu(popupMenu);
	}

	private Color getBackgroundColor()
	{
		return ignored ? IGNORED_BACKGROUND : (rng ? RNG_BACKGROUND : (selected ? SELECTED_BACKGROUND : UNSELECTED_BACKGROUND));
	}

	private Color getHoverBackgroundColor()
	{
		return ignored ? IGNORED_HOVER_BACKGROUND : (rng ? RNG_HOVER_BACKGROUND : (selected ? SELECTED_HOVER_BACKGROUND : UNSELECTED_HOVER_BACKGROUND));
	}

	void select()
	{
		selected = true;
		setBackground(getBackgroundColor());
	}

	void unselect()
	{
		selected = false;
		setBackground(getBackgroundColor());
	}

	public void updateIcon(final AsyncBufferedImage icon, final int amount)
	{
		icon.addTo(this);
		this.amount = amount;
	}

	public void updateToolTip(final Collection<Modifier> modifiers)
	{
		this.setToolTipText(buildToolTip(modifiers));
		final Activity selectedActivity = bankedItem.getItem().getSelectedActivity();
		if (selectedActivity != null)
		{
			this.rng = selectedActivity.isRngActivity();
			this.setBackground(getBackgroundColor());
		}
	}

	private String buildToolTip(final Collection<Modifier> modifiers)
	{
		String tip = "<html>" + bankedItem.getItem().getItemInfo().getName();

		final Activity a = bankedItem.getItem().getSelectedActivity();
		if (a != null)
		{
			final double xp = a.getXpRate(modifiers) * xpRateModifier;
			tip += "<br/>Activity: " +  a.getName();
			tip += "<br/>Xp/Action: " + BankedCalculator.XP_FORMAT_COMMA.format(xp);
			tip += "<br/>Total Xp: " + BankedCalculator.XP_FORMAT_COMMA.format(xp * amount);
		}
		else
		{
			tip += "<br/>Unusable at current level";
		}

		return tip + "</html>";
	}

	public void setIgnore(Boolean ignored)
	{
		this.ignored = ignored;
		IGNORE_OPTION.setText(ignored ? INCLUDE : IGNORE);
		this.setBackground(this.getBackgroundColor());
	}
}

/*
 * Copyright (c) 2018, Kruithne <kruithne@gmail.com>
 * Copyright (c) 2018, Psikoi <https://github.com/psikoi>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.components.textinput;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;
import lombok.Getter;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.components.FlatTextField;

/**
 * Copy of {@link net.runelite.client.plugins.skillcalculator.UICalculatorInputArea} with public access
 */
@Getter
public class UICalculatorInputArea extends JPanel
{
	private final JTextField uiFieldCurrentLevel;
	private final JTextField uiFieldCurrentXP;
	private final JTextField uiFieldTargetLevel;
	private final JTextField uiFieldTargetXP;

	public UICalculatorInputArea()
	{
		setLayout(new GridLayout(2, 2, 7, 7));
		uiFieldCurrentLevel = addComponent("Current Level");
		uiFieldCurrentXP = addComponent("Current Experience");
		uiFieldTargetLevel = addComponent("Level Banked");
		uiFieldTargetXP = addComponent("Ending Experience");
	}

	int getCurrentLevelInput()
	{
		return getInput(uiFieldCurrentLevel);
	}

	public void setCurrentLevelInput(int value)
	{
		setInput(uiFieldCurrentLevel, value);
	}

	int getCurrentXPInput()
	{
		return getInput(uiFieldCurrentXP);
	}

	public void setCurrentXPInput(Object value)
	{
		setInput(uiFieldCurrentXP, value);
	}

	int getTargetLevelInput()
	{
		return getInput(uiFieldTargetLevel);
	}

	public void setTargetLevelInput(Object value)
	{
		setInput(uiFieldTargetLevel, value);
	}

	int getTargetXPInput()
	{
		return getInput(uiFieldTargetXP);
	}

	public void setTargetXPInput(Object value)
	{
		setInput(uiFieldTargetXP, value);
	}

	private int getInput(JTextField field)
	{
		try
		{
			return Integer.parseInt(field.getText());
		}
		catch (NumberFormatException e)
		{
			return 0;
		}
	}

	private void setInput(JTextField field, Object value)
	{
		field.setText(String.valueOf(value));
	}

	private JTextField addComponent(String label)
	{
		final JPanel container = new JPanel();
		container.setLayout(new BorderLayout());

		final JLabel uiLabel = new JLabel(label);
		final FlatTextField uiInput = new FlatTextField();

		uiInput.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		uiInput.setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
		uiInput.setBorder(new EmptyBorder(5, 7, 5, 7));

		uiLabel.setFont(FontManager.getRunescapeSmallFont());
		uiLabel.setBorder(new EmptyBorder(0, 0, 4, 0));
		uiLabel.setForeground(Color.WHITE);

		container.add(uiLabel, BorderLayout.NORTH);
		container.add(uiInput, BorderLayout.CENTER);

		add(container);

		return uiInput.getTextField();
	}
}

/*
 * Copyright (c) 2024, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.components.textinput;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.GridLayout;
import java.text.ParseException;
import java.util.function.Consumer;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.border.EmptyBorder;

public class SpinnerInput extends JPanel
{
	private final JSpinner spinner;

	public SpinnerInput(final String label, final String tooltip, Consumer<Integer> callback)
	{
		this(label, tooltip, 0, 0, 99, 1, callback);
	}

	public SpinnerInput(final String label, final String tooltip, final int start, final int min, Consumer<Integer> callback)
	{
		this(label, tooltip, start, min, 99, 1, callback);
	}

	public SpinnerInput(final String label, final String tooltip, final int start, final int min, final int max, final int stepSize, Consumer<Integer> callback)
	{
		setLayout(new GridLayout(0, 1, 7, 7));
		setBorder(new EmptyBorder(0, 0, 5, 0));

		final JPanel container = new JPanel();
		container.setLayout(new BorderLayout());

		final JLabel uiLabel = new JLabel(label);
		uiLabel.setForeground(Color.WHITE);
		uiLabel.setToolTipText(tooltip);

		container.add(uiLabel, BorderLayout.CENTER);

		final SpinnerModel model = new SpinnerNumberModel(start, min, max, stepSize);
		spinner = new JSpinner(model);
		final Component editor = spinner.getEditor();
		final JFormattedTextField spinnerTextField = ((JSpinner.DefaultEditor) editor).getTextField();
		spinnerTextField.setColumns(6);
		spinner.addChangeListener(ce -> callback.accept(getInputValue()));

		container.add(spinner, BorderLayout.EAST);

		add(container);
	}

	public int getInputValue()
	{
		try
		{
			spinner.commitEdit();
			return (Integer) spinner.getValue();
		}
		catch (NumberFormatException | ParseException e)
		{
			return 0;
		}
	}

	public void setInputValue(int value)
	{
		spinner.getModel().setValue(value);
		spinner.setValue(value);
	}
}

/*
 * Copyright (c) 2019, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.bankedexperience.components;

import thestonedturtle.bankedexperience.data.BankedItem;
import java.util.EventListener;

public interface SelectionListener extends EventListener
{
	boolean selected(final BankedItem item);
	boolean ignored(final BankedItem item);
}

package thestonedturtle.bankedexperience;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class BankedExperiencePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(BankedExperiencePlugin.class);
		RuneLite.main(args);
	}
}
