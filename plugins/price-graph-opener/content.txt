package com.pricegraphopener;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PriceGraphOpenerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PriceGraphOpenerPlugin.class);
		RuneLite.main(args);
	}
}
package com.pricegraphopener;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.collect.HashMultimap;
import com.google.common.collect.Multimap;
import lombok.Getter;
import net.runelite.client.game.ItemVariationMapping;

import javax.annotation.Nullable;
import java.util.Collection;

import static net.runelite.api.ItemID.*;

@Getter
public enum IrreversibleItemMapping {

    // Raids items
    ITEM_KODAI_INSIGNIA(KODAI_INSIGNIA, KODAI_WAND),
    ITEM_MASORI_BODY(MASORI_BODY, MASORI_BODY_F),
    ITEM_MASORI_CHAPS(MASORI_CHAPS, MASORI_CHAPS_F),
    ITEM_MASORI_MASK(MASORI_MASK, MASORI_MASK_F),
    ITEM_AVERNIC_DEFENDER(AVERNIC_DEFENDER_HILT, AVERNIC_DEFENDER),

    // God Wars Dungeon items
    ITEM_ARMADYL_HILT(ARMADYL_HILT, ARMADYL_GODSWORD, ARMADYL_GODSWORD_OR),
    ITEM_BANDOS_HILT(BANDOS_HILT, BANDOS_GODSWORD, BANDOS_GODSWORD_OR),
    ITEM_SARADOMIN_HILT(SARADOMIN_HILT, SARADOMIN_GODSWORD, SARADOMIN_GODSWORD_OR),
    ITEM_ZAMORAK_HILT(ZAMORAK_HILT, ZAMORAK_GODSWORD, ZAMORAK_GODSWORD_OR),
    ITEM_ANCIENT_HILT(ANCIENT_HILT, ANCIENT_GODSWORD),
    ITEM_NIHIL_HORN(NIHIL_HORN, ZARYTE_CROSSBOW),
    ITEM_ARMADYL_CROSSBOW(ARMADYL_CROSSBOW, ZARYTE_CROSSBOW),
    ITEM_STAFF_OF_THE_DEAD(STAFF_OF_THE_DEAD, STAFF_OF_LIGHT),
    ITEM_SARADOMINS_LIGHT(SARADOMINS_LIGHT, STAFF_OF_LIGHT),
    ITEM_TORVA_PLATEBODY(TORVA_PLATEBODY_DAMAGED, TORVA_PLATEBODY, SANGUINE_TORVA_PLATEBODY),
    ITEM_TORVA_PLATELEGS(TORVA_PLATELEGS_DAMAGED, TORVA_PLATELEGS, SANGUINE_TORVA_PLATELEGS),
    ITEM_TORVA_FULL_HELM(TORVA_FULL_HELM_DAMAGED, TORVA_FULL_HELM, SANGUINE_TORVA_FULL_HELM),

    // Slayer boss drops
    ITEM_BLACK_TOURMALINE_CORE(BLACK_TOURMALINE_CORE, GUARDIAN_BOOTS),
    ITEM_SMOULDERING_STONE(SMOULDERING_STONE, INFERNAL_AXE, INFERNAL_AXE_OR, INFERNAL_AXE_UNCHARGED, INFERNAL_HARPOON, INFERNAL_HARPOON_OR, INFERNAL_HARPOON_UNCHARGED, INFERNAL_PICKAXE, INFERNAL_PICKAXE_OR, INFERNAL_PICKAXE_UNCHARGED),
    ITEM_DRAGON_AXE(DRAGON_AXE, INFERNAL_AXE, INFERNAL_AXE_OR, INFERNAL_AXE_UNCHARGED),
    ITEM_DRAGON_HARPOON(DRAGON_HARPOON, INFERNAL_HARPOON, INFERNAL_HARPOON_OR, INFERNAL_HARPOON_UNCHARGED),
    ITEM_DRAGON_PICKAXE(DRAGON_PICKAXE, INFERNAL_PICKAXE, INFERNAL_PICKAXE_OR, INFERNAL_PICKAXE_UNCHARGED),
    ITEM_RANGER_BOOTS(RANGER_BOOTS, PEGASIAN_BOOTS),
    ITEM_PEGASIAN_CRYSTAL(PEGASIAN_CRYSTAL, PEGASIAN_BOOTS),
    ITEM_ETERNAL_CRYSTAL(ETERNAL_CRYSTAL, ETERNAL_BOOTS),
    ITEM_INFINITY_BOOTS(INFINITY_BOOTS, ETERNAL_BOOTS),
    ITEM_DRAGON_BOOTS(DRAGON_BOOTS, PRIMORDIAL_BOOTS),
    ITEM_PRIMODIAL_CRYSTAL(PRIMORDIAL_CRYSTAL, PRIMORDIAL_BOOTS),
    ITEM_HYDRA_CLAW(HYDRAS_CLAW, DRAGON_HUNTER_LANCE),
    ITEM_ETERNAL_SLAYER_GEM(ETERNAL_GEM, SLAYER_RING_ETERNAL),
    ITEM_IMBUED_HEART(IMBUED_HEART, SATURATED_HEART),

    // Other boss drops
    ITEM_VENATOR_SHARD(VENATOR_SHARD, VENATOR_BOW, VENATOR_BOW_UNCHARGED),

    // Wilderness items
    ITEM_VOIDWAKER_HILT(VOIDWAKER_HILT, VOIDWAKER),
    ITEM_VOIDWAKER_GEM(VOIDWAKER_GEM, VOIDWAKER),
    ITEM_VOIDWAKER_BLADE(VOIDWAKER_BLADE, VOIDWAKER),
    ITEM_TANZANITE_FANG(TANZANITE_FANG, TOXIC_BLOWPIPE, BLAZING_BLOWPIPE,TOXIC_BLOWPIPE_EMPTY, BLAZING_BLOWPIPE_EMPTY),
    ITEM_CRAWS_BOW(CRAWS_BOW_U, WEBWEAVER_BOW, WEBWEAVER_BOW_U),
    ITEM_FANGS_OF_VENENATIS(FANGS_OF_VENENATIS, WEBWEAVER_BOW, WEBWEAVER_BOW_U),
    ITEM_THAMMARONS_SCEPTRE(THAMMARONS_SCEPTRE_U, ACCURSED_SCEPTRE_A, ACCURSED_SCEPTRE_U, ACCURSED_SCEPTRE_AU, ACCURSED_SCEPTRE),
    ITEM_SKULL_OF_VETION(SKULL_OF_VETION, ACCURSED_SCEPTRE_A, ACCURSED_SCEPTRE_U, ACCURSED_SCEPTRE_AU, ACCURSED_SCEPTRE),
    ITEM_VIGGORAS_CHAINMACE(VIGGORAS_CHAINMACE_U, URSINE_CHAINMACE, URSINE_CHAINMACE_U),
    ITEM_CLAWS_OF_CALLISTO(CLAWS_OF_CALLISTO, URSINE_CHAINMACE, URSINE_CHAINMACE_U),
    ITEM_ODIUM_SHARD_1(ODIUM_SHARD_1, ODIUM_WARD, ODIUM_WARD_12807),
    ITEM_ODIUM_SHARD_2(ODIUM_SHARD_2, ODIUM_WARD, ODIUM_WARD_12807),
    ITEM_ODIUM_SHARD_3(ODIUM_SHARD_3, ODIUM_WARD, ODIUM_WARD_12807),
    ITEM_MALEDICTION_SHARD_1(MALEDICTION_SHARD_1, MALEDICTION_WARD, MALEDICTION_WARD_12806),
    ITEM_MALEDICTION_SHARD_2(MALEDICTION_SHARD_2, MALEDICTION_WARD, MALEDICTION_WARD_12806),
    ITEM_MALEDICTION_SHARD_3(MALEDICTION_SHARD_3, MALEDICTION_WARD, MALEDICTION_WARD_12806),

    // Miscellaneous
    ITEM_BLOOD_SHARD(BLOOD_SHARD, AMULET_OF_BLOOD_FURY),
    ITEM_SERPENTINE_VISAGE(SERPENTINE_VISAGE, SERPENTINE_HELM, SERPENTINE_HELM_UNCHARGED, TANZANITE_HELM, TANZANITE_HELM_UNCHARGED, MAGMA_HELM, MAGMA_HELM_UNCHARGED),
    ITEM_ABYSSAL_WHIP(ABYSSAL_WHIP, ABYSSAL_TENTACLE),
    ITEM_DRAKES_CLAW(DRAKES_CLAW, BOOTS_OF_BRIMSTONE),
    ITEM_WYVERN_VISAGE(WYVERN_VISAGE, ANCIENT_WYVERN_SHIELD, ANCIENT_WYVERN_SHIELD_21634),
    ITEM_DRAGONIC_VISAGE(DRACONIC_VISAGE, DRAGONFIRE_SHIELD, DRAGONFIRE_SHIELD_11284),
    ITEM_BURNING_CLAW(BURNING_CLAW, BURNING_CLAWS),
    ITEM_TORMENTED_SYNAPSE(TORMENTED_SYNAPSE, EMBERLIGHT, PURGING_STAFF, SCORCHING_BOW),
    ITEM_ONYX(ONYX_AMULET, AMULET_OF_FURY, AMULET_OF_FURY_OR),
    ITEM_INGOT(CHROMIUM_INGOT, VENATOR_RING, MAGUS_RING, BELLATOR_RING, ULTOR_RING),



    ;




    @VisibleForTesting
    static final Multimap<Integer, IrreversibleItemMapping> MAPPINGS = HashMultimap.create();
    private final int tradeableItem;
    private final int[] untradeableItems;
    private final long quantity;
    private final boolean includeVariations;
    static
    {
        for (final IrreversibleItemMapping item : values())
        {
            for (int itemId : item.untradeableItems)
            {
                if (item.includeVariations)
                {
                    for (final Integer variation : ItemVariationMapping.getVariations(ItemVariationMapping.map(itemId)))
                    {
                        if (variation != item.tradeableItem)
                        {
                            MAPPINGS.put(variation, item);
                        }
                    }
                }
                else
                {
                    MAPPINGS.put(itemId, item);
                }
            }
        }
    }

    IrreversibleItemMapping(int tradeableItem, boolean includeVariations, long quantity, int... untradeableItems)
    {
        this.tradeableItem = tradeableItem;
        this.untradeableItems = untradeableItems;
        this.quantity = quantity;
        this.includeVariations = includeVariations;
    }

    IrreversibleItemMapping(int tradeableItem, long quantity, int... untradeableItems)
    {
        this(tradeableItem, false, quantity, untradeableItems);
    }

    IrreversibleItemMapping(int tradeableItem, int... untradeableItems)
    {
        this(tradeableItem, 1L, untradeableItems);
    }

    @Nullable
    public static Collection<IrreversibleItemMapping> map(int itemId)
    {
        final Collection<IrreversibleItemMapping> mapping = MAPPINGS.get(itemId);

        if (mapping.isEmpty())
        {
            return null;
        }

        return mapping;
    }
}

package com.pricegraphopener;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("price-graph-opener")
public interface PriceGraphOpenerConfig extends Config
{
    @ConfigItem(
        keyName = "ge-tracker",
        name = "GE Tracker",
        description = "Display option to open ge-tracker.net"
    )
    default boolean geTracker() { return true; }

    @ConfigItem(
        keyName = "rs-wiki",
        name = "OSRS Wiki",
        description = "Display option to open prices.runescape.wiki"
    )
    default boolean osrsWiki() { return true; }

    @ConfigItem(
        keyName = "rs-grandexchange",
        name = "OSRS Grand Exchange",
        description = "Display option to open the runescape.com GE page"
    )
    default boolean osrsGrandExchange() { return true; }

    @ConfigItem(
        keyName = "folding",
        name = "Combine menu options",
        description = "Collect menu options into a submenu when clicking on an item."
    )
    default boolean folding() { return true; }

    @ConfigItem(
        keyName = "shift-click",
        name = "Shift Click for Inventory",
        description = "Only show the price check on right click if shift is held when outside of a bank or other menu."
    )
    default boolean shiftInventory() { return true; }

    @ConfigItem(
        keyName = "show-irreversible",
        name = "Show irreversible components",
        description = "Add extra menu entries for certain items that can't be reverted into tradeable parts. "
            + "Note: Best with Combine menu options checked"
    )
    default boolean showIrreversible() { return true; }
}

package com.pricegraphopener;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.KeyCode;
import net.runelite.api.Menu;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.NPC;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.ItemMapping;
import net.runelite.client.game.chatbox.ChatboxItemSearch;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.JagexColors;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.LinkBrowser;
import okhttp3.HttpUrl;

import java.util.Collection;

@Slf4j
@PluginDescriptor(
    name = "Price Graph Opener"
)
public class PriceGraphOpenerPlugin extends Plugin {
    static final HttpUrl GE_TRACKER_BASE = HttpUrl.get("https://www.ge-tracker.com/item");
    static final HttpUrl RS_WIKI_BASE = HttpUrl.get("https://prices.runescape.wiki/osrs/item");
    static final HttpUrl RS_GE_BASE = HttpUrl.get("https://secure.runescape.com/m=itemdb_oldschool/viewitem");

    private static final String GE_TRACKER_TITLE = "GE Tracker";
    private static final String RS_WIKI_TITLE = "OSRS Wiki";
    private static final String RS_GE_TITLE = "OSRS GE";
    @Inject
    private Client client;
    @Inject
    private ItemManager itemManager;
    @Inject
    private PriceGraphOpenerConfig config;

    @Inject
    @Getter
    private ChatboxItemSearch itemSearch;

    @Subscribe
    public void onMenuEntryAdded(MenuEntryAdded event) {
        addMenuEntriesToItems(event);
        addMenuEntriesToGeClerk(event);
    }

    void addMenuEntriesToItems(MenuEntryAdded event) {
        if (showMenuEntries(event)) {
            Widget container = client.getWidget(event.getActionParam1());
            Widget item = container.getChild(event.getActionParam0());
            String text = "Price History";

            boolean itemIsTradeable = itemManager.getItemComposition(item.getItemId()).isTradeable();
            final Collection<ItemMapping> mappedItems = ItemMapping.map(item.getItemId());
            final Collection<IrreversibleItemMapping> irreversibleMappedItems = IrreversibleItemMapping.map(item.getItemId());
            boolean itemHasComponents = (mappedItems != null && !mappedItems.isEmpty())
                || (config.showIrreversible() && irreversibleMappedItems != null && !irreversibleMappedItems.isEmpty());

            // could add a check for the length of the mappedItems + irreversibleMappedItems (if showing) and then
            // not creating a submenu if there's only one... also check if tradeable.

            Menu parentMenu = client.getMenu();
            if (config.folding() && (itemIsTradeable || (!itemIsTradeable && itemHasComponents))) {
                parentMenu = client.getMenu().createMenuEntry(-1)
                    .setOption(text)
                    .setTarget(ColorUtil.prependColorTag(item.getName(), JagexColors.MENU_TARGET))
                    .createSubMenu();
            }
            if (irreversibleMappedItems != null && config.showIrreversible()) {
                for (IrreversibleItemMapping mappedItem : irreversibleMappedItems) {
                    createMenuEntriesForTradeableItems(parentMenu, mappedItem.getTradeableItem());
                }
            }
            if (mappedItems != null) {
                for (ItemMapping mappedItem : mappedItems) {
                    createMenuEntriesForTradeableItems(parentMenu, mappedItem.getTradeableItem());
                }
            }
            if (itemIsTradeable) {
                createMenuEntriesForTradeableItems(parentMenu, item.getItemId());
            }
        }
    }

    boolean showMenuEntries(MenuEntryAdded event) {
        return ((event.getActionParam1() == ComponentID.BANK_ITEM_CONTAINER
            || event.getActionParam1() == ComponentID.BANK_INVENTORY_ITEM_CONTAINER
            || event.getActionParam1() == ComponentID.GRAND_EXCHANGE_INVENTORY_INVENTORY_ITEM_CONTAINER
            || event.getActionParam1() == ComponentID.GROUP_STORAGE_ITEM_CONTAINER
            || event.getActionParam1() == ComponentID.SHOP_INVENTORY_ITEM_CONTAINER
            || event.getActionParam1() == 19726336 // store inventory
            || event.getActionParam1() == 19660816 // store
        )
            || (event.getActionParam1() == ComponentID.INVENTORY_CONTAINER
                && (config.shiftInventory() ? client.isKeyPressed(KeyCode.KC_SHIFT) : true)))
                && event.getOption().equals("Examine");
    }

    void createMenuEntriesForTradeableItems(Menu parentMenu, int itemId) {
        if (config.geTracker()) {
            createMenuEntry(GE_TRACKER_TITLE, itemId, parentMenu, MenuAction.RUNELITE)
                .onClick(e -> LinkBrowser.browse(
                    GE_TRACKER_BASE.newBuilder().addPathSegment(String.valueOf(e.getParam0())).build().toString()));
        }
        if (config.osrsWiki()) {
            createMenuEntry(RS_WIKI_TITLE, itemId, parentMenu, MenuAction.RUNELITE)
                .onClick(e -> LinkBrowser.browse(
                    RS_WIKI_BASE.newBuilder().addPathSegment(String.valueOf(e.getParam0())).build().toString()));
        }
        if (config.osrsGrandExchange()) {
            createMenuEntry(RS_GE_TITLE, itemId, parentMenu, MenuAction.RUNELITE)
                .onClick(e -> LinkBrowser.browse(
                    RS_GE_BASE.newBuilder().addQueryParameter("obj", String.valueOf(e.getParam0())).build().toString()));
        }
    }

    MenuEntry createMenuEntry(String title, int item, Menu parentMenu, MenuAction type) {
        return parentMenu.createMenuEntry(-1)
            .setOption(title)
            .setTarget(ColorUtil.prependColorTag(
                itemManager.getItemComposition(item).getMembersName(), JagexColors.MENU_TARGET))
            .setParam0(item)
            .setType(type);
    }

    public void addMenuEntriesToGeClerk(MenuEntryAdded event) {
        if (isNpcMatch(event) || isObjectMatch(event)) {
            addSearchMenuEntries(event);
        }
    }

    boolean isNpcMatch(MenuEntryAdded event) {
        MenuEntry menuEntry = event.getMenuEntry();
        final MenuAction menuAction = menuEntry.getType();
        final NPC npc = menuEntry.getNpc();
        if (npc == null) {
            return false;
        }
        if (menuAction == MenuAction.EXAMINE_NPC) {
            final String npcName = npc.getName();
            final boolean nameMatch = "Grand Exchange Clerk".equals(npcName);
            return npcName != null && nameMatch;
        }
        return false;
    }

    boolean isObjectMatch(MenuEntryAdded event) {
        return event.getMenuEntry().getType() == MenuAction.EXAMINE_OBJECT
            && event.getTarget() != null
            && event.getTarget().contains("Grand Exchange booth");
    }

    void addSearchMenuEntries(MenuEntryAdded event) {
        int idx = -1;
        if (config.geTracker()) {
            client.getMenu().createMenuEntry(idx--)
                .setOption("Search " + GE_TRACKER_TITLE)
                .setTarget(ColorUtil.prependColorTag(event.getTarget(), JagexColors.MENU_TARGET))
                .setIdentifier(event.getIdentifier())
                .setType(MenuAction.RUNELITE)
                .onClick(e -> {
                    itemSearch
                        .tooltipText("Open GE Tracker to")
                        .onItemSelected(itemId -> LinkBrowser.browse(
                            GE_TRACKER_BASE.newBuilder().addPathSegment(String.valueOf(itemId)).build().toString()))
                        .build();
                });
        }
        if (config.osrsWiki()) {
            client.getMenu().createMenuEntry(idx--)
                .setOption("Search " + RS_WIKI_TITLE)
                .setTarget(ColorUtil.prependColorTag(event.getTarget(), JagexColors.MENU_TARGET))
                .setIdentifier(event.getIdentifier())
                .setType(MenuAction.RUNELITE)
                .onClick(e -> {
                    itemSearch
                        .tooltipText("Open OSRS Wiki to")
                        .onItemSelected(itemId -> LinkBrowser.browse(
                            GE_TRACKER_BASE.newBuilder().addPathSegment(String.valueOf(itemId)).build().toString()))
                        .build();
                });
        }
        if (config.osrsGrandExchange()) {
            client.getMenu().createMenuEntry(idx--)
                .setOption("Search " + RS_GE_TITLE)
                .setTarget(ColorUtil.prependColorTag(event.getTarget(), JagexColors.MENU_TARGET))
                .setIdentifier(event.getIdentifier())
                .setType(MenuAction.RUNELITE)
                .onClick(e -> {
                    itemSearch
                        .tooltipText("Open OSRS Grand Exchange to")
                        .onItemSelected(itemId -> LinkBrowser.browse(
                            GE_TRACKER_BASE.newBuilder().addPathSegment(String.valueOf(itemId)).build().toString()))
                        .build();
                });
        }
    }

    @Provides
    PriceGraphOpenerConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(PriceGraphOpenerConfig.class);
    }
}

