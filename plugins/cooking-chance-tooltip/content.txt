package com.ashleythew.cookingtooltip;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.BeforeRender;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetUtil;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;
import net.runelite.client.util.ColorUtil;
import java.awt.Color;

@Slf4j
@PluginDescriptor(name = "Cooking Chance Tooltip", description = "Show cooking success chances and XP estimates in tooltips", tags = {
        "cooking", "tooltip", "chance", "xp" })
public class CookingTooltipPlugin extends Plugin {
    @Inject
    private Client client;

    @Inject
    private CookingTooltipConfig config;

    @Inject
    private TooltipManager tooltipManager;

    @Override
    protected void startUp() throws Exception {
        log.info("Cooking Chance Tooltip started!");
    }

    @Override
    protected void shutDown() throws Exception {
        log.info("Cooking Chance Tooltip stopped!");
    }

    @Subscribe
    public void onBeforeRender(BeforeRender event) {
        if (!config.showCookingTooltips()) {
            return;
        }

        final MenuEntry[] menuEntries = client.getMenu().getMenuEntries();
        final int last = menuEntries.length - 1;
        if (last < 0) {
            return;
        }

        final MenuEntry menuEntry = menuEntries[last];
        final MenuAction action = menuEntry.getType();
        final int widgetId = menuEntry.getParam1();
        final int groupId = WidgetUtil.componentToInterface(widgetId);

        switch (action) {
            case WIDGET_TARGET_ON_WIDGET:
                // Check target widget is the inventory
                if (menuEntry.getWidget().getId() != ComponentID.INVENTORY_CONTAINER) {
                    break;
                }
                // FALLTHROUGH
            case CC_OP:
            case ITEM_USE:
            case ITEM_FIRST_OPTION:
            case ITEM_SECOND_OPTION:
            case ITEM_THIRD_OPTION:
            case ITEM_FOURTH_OPTION:
            case ITEM_FIFTH_OPTION:
                if (groupId == InterfaceID.INVENTORY || groupId == InterfaceID.BANK
                        || groupId == InterfaceID.BANK_INVENTORY) {
                    addCookingTooltip(menuEntry);
                }
                break;
            case WIDGET_TARGET:
                // Check that this is the inventory
                if (menuEntry.getWidget().getId() == ComponentID.INVENTORY_CONTAINER) {
                    addCookingTooltip(menuEntry);
                }
                break;
            default:
                // Do nothing for other menu actions
                break;
        }
    }

    private Color getChanceColor(double chance) {
        if (chance >= 95)
            return new Color(0, 255, 0); // Bright green
        if (chance >= 80)
            return new Color(150, 255, 0); // Light green
        if (chance >= 60)
            return new Color(255, 255, 0); // Yellow
        if (chance >= 40)
            return new Color(255, 150, 0); // Orange
        return new Color(255, 0, 0); // Red
    }

    private void addCookingTooltip(MenuEntry menuEntry) {
        Widget widget = menuEntry.getWidget();
        if (widget == null) {
            return;
        }

        int itemId = widget.getItemId();
        Cookables cookable = Cookables.fromItemId(itemId);
        if (cookable == null) {
            return;
        }

        int level = client.getBoostedSkillLevel(Skill.COOKING);
        StringBuilder sb = new StringBuilder();

        int requiredLevel = cookable.getLevel();
        if (level < requiredLevel) {
            sb.append(ColorUtil.wrapWithColorTag("Required cooking level: " + requiredLevel, new Color(255, 0, 0)));
            tooltipManager.add(new Tooltip(sb.toString()));
            return;
        }

        sb.append(ColorUtil.wrapWithColorTag(
                "Cooking chances:",
                new Color(255, 255, 0)));
        double fireChance = cookable.calculateFireChance(level);
        if (fireChance > 0) {
            sb.append("<br>Fire: ").append(ColorUtil.wrapWithColorTag(
                    String.format("%.2f", fireChance) + "%",
                    getChanceColor(fireChance)));
            if (widget.getId() == ComponentID.BANK_ITEM_CONTAINER) {
                int quantity = widget.getItemQuantity();
                double xp = cookable.getXp();
                int totalXp = (int) (quantity * xp * fireChance / 100);
                sb.append("<br>Est. XP: ").append(ColorUtil.wrapWithColorTag(
                        String.format("%,d", totalXp),
                        new Color(0, 255, 0)));
            }
        }
        double rangeChance = cookable.calculateRangeChance(level);
        if (rangeChance > 0) {
            sb.append("<br>Range: ").append(ColorUtil.wrapWithColorTag(
                    String.format("%.2f", rangeChance) + "%",
                    getChanceColor(rangeChance)));
            if (widget.getId() == ComponentID.BANK_ITEM_CONTAINER) {
                int quantity = widget.getItemQuantity();
                double xp = cookable.getXp();
                int totalXp = (int) (quantity * xp * rangeChance / 100);
                sb.append("<br>Est. XP: ").append(ColorUtil.wrapWithColorTag(
                        String.format("%,d", totalXp),
                        new Color(0, 255, 0)));
            }
        }

        tooltipManager.add(new Tooltip(ColorUtil.wrapWithColorTag(sb.toString(), new Color(238, 238, 238))));
    }

    @Provides
    CookingTooltipConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(CookingTooltipConfig.class);
    }
}

package com.ashleythew.cookingtooltip;

import lombok.Getter;
import net.runelite.api.gameval.ItemID;

@Getter
public enum Cookables {

    ADMIRAL_PIE(ItemID.UNCOOKED_ADMIRAL_PIE, 70, 210, -1, -1, 15, 270),
    ANCHOVIES(ItemID.RAW_ANCHOVIES, 1, 30, 128, 512, 128, 512),
    ANGLERFISH(ItemID.RAW_ANGLERFISH, 84, 230, 1, 200, 1, 220),
    APPLE_PIE(ItemID.UNCOOKED_APPLE_PIE, 30, 130, -1, -1, 58, 372),
    BAKED_POTATO(ItemID.POTATO, 7, 15, -1, -1, 108, 472),
    BASS(ItemID.RAW_BASS, 43, 130, 33, 312, 33, 312),
    BOTANICAL_PIE(ItemID.UNCOOKED_BOTANICAL_PIE, 52, 180, -1, -1, 20, 300),
    BREAD(ItemID.BREAD_DOUGH, 1, 40, -1, -1, 118, 492),
    CAKE(ItemID.UNCOOKED_CAKE, 40, 180, -1, -1, 38, 332),
    CAVE_EEL(ItemID.RAW_CAVE_EEL, 38, 115, 38, 332, 38, 332),
    CHEESETOM_BATTA(ItemID.UNFINISHED_CHEESE_TOM_BATTA, 29, 88, -1, -1, 118, 492),
    CHOCCHIP_CRUNCHIES(ItemID.ALUFT_BAKED_CHOC_CHIP_CRUNCHY, 16, 46, -1, -1, 118, 492),
    // Unsure which item is the correct unfinished chocolate bomb
    // CHOCOLATE_BOMB(ItemID.UNFINISHED_CHOCOLATE_BOMB1, 42, 110, -1, -1, 118, 492),
    COD(ItemID.RAW_COD, 18, 75, 83, 422, 88, 432),
    COOKED_BARBTAILED_KEBBIT(ItemID.HUNTINGBEAST_BARBED_MEAT, 32, 106, 56, 370, 56, 370),
    COOKED_CHICKEN(ItemID.RAW_CHICKEN, 1, 30, 128, 512, 128, 512),
    COOKED_CHICKEN_UNDEAD(ItemID.RAW_CHICKEN_UNDEAD, 1, 30, 128, 512, 128, 512),
    COOKED_CHOMPY(ItemID.SPIT_SKEWERED_CHOMPY, 30, 100, 200, 255, -1, -1),
    COOKED_CRAB_MEAT(ItemID.HUNDRED_PIRATE_GIANT_CRAB_MEAT, 21, 100, 57, 377, 57, 377),
    COOKED_DASHING_KEBBIT(ItemID.HUNTINGBEAST_SPEEDY2_MEAT, 82, 215, 1, 194, 1, 224),
    COOKED_FISHCAKE(ItemID.HUNDRED_PIRATE_RAW_FISHCAKE, 31, 100, 57, 377, 57, 377),
    COOKED_GRAAHK(ItemID.HUNTING_GRAAHK_MEAT, 41, 124, 32, 328, 32, 328),
    COOKED_KARAMBWAN(ItemID.TBWT_RAW_KARAMBWAN, 30, 190, 70, 255, 70, 255),
    COOKED_KYATT(ItemID.HUNTING_KYATT_MEAT, 51, 143, 18, 292, -1, -1),
    COOKED_LARUPIA(ItemID.HUNTING_LARUPIA_MEAT, 31, 92, 65, 390, 65, 390),
    COOKED_MEAT(ItemID.RAW_BEEF, 1, 30, 128, 512, 128, 512),
    COOKED_MEAT_UNDEAD(ItemID.RAW_BEEF_UNDEAD, 1, 30, 128, 512, 128, 512),
    COOKED_MOONLIGHT_ANTELOPE(ItemID.HUNTING_ANTELOPEMOON_MEAT, 92, 220, 1, 185, 1, 200),
    COOKED_MYSTERY_MEAT(ItemID.RAW_MYSTERY_MEAT, 1, 30, 128, 512, 128, 512),
    COOKED_OOMLIE_WRAP(ItemID.WRAPPED_OOMLIE, 50, 30, 106, 450, 112, 476),
    COOKED_PYRE_FOX(ItemID.HUNTING_FENNECFOX_MEAT, 59, 154, 10, 273, 11, 276),
    COOKED_RABBIT(ItemID.RAW_RABBIT, 1, 30, 128, 512, 128, 512),
    COOKED_SLIMY_EEL(ItemID.MORT_SLIMEY_EEL, 28, 95, 63, 382, 63, 382),
    COOKED_SUNLIGHT_ANTELOPE(ItemID.HUNTING_ANTELOPESUN_MEAT, 68, 175, 8, 254, 8, 265),
    COOKED_SWEETCORN(ItemID.SWEETCORN, 28, 104, 78, 412, 78, 412),
    COOKED_WILD_KEBBIT(ItemID.HUNTINGBEAST_WILD_MEAT, 23, 73, 84, 428, 84, 428),
    CURRY(ItemID.UNCOOKED_CURRY, 60, 280, 38, 332, 38, 332),
    DARK_CRAB(ItemID.RAW_DARK_CRAB, 90, 215, 10, 222, 10, 222),
    DRAGONFRUIT_PIE(ItemID.UNCOOKED_DRAGONFRUIT_PIE, 73, 220, -1, -1, 8, 250),
    // Unsure which is the correct unfinished drunk dragon
    // DRUNK_DRAGON(ItemID.UNFINISHED_DRUNK_DRAGON1, 32, 130, -1, -1, 118, 492),
    FAT_SNAIL_MEAT(ItemID.SNAIL_CORPSE3, 22, 95, 73, 402, 73, 402),
    FISH_PIE(ItemID.UNCOOKED_FISH_PIE, 47, 164, -1, -1, 38, 332),
    FRESH_MONKFISH(ItemID.SWAN_MONKFISH, 62, 10, 100, 240, 100, 240),
    FRIED_MUSHROOMS(ItemID.BOWL_MUSHROOM_RAW, 46, 60, 16, 282, 16, 282),
    FRIED_ONIONS(ItemID.BOWL_ONION, 42, 60, 36, 322, 36, 322),
    FRUIT_BATTA(ItemID.UNFINISHED_FRUIT_BATTA, 1, 80, -1, -1, 118, 492),
    GARDEN_PIE(ItemID.UNCOOKED_GARDEN_PIE, 34, 138, -1, -1, 48, 352),
    GIANT_CARP(ItemID.RAW_GIANT_CARP, 1, 0, 98, 452, 98, 452),
    HALF_BAKED_BATTA(ItemID.RAW_BATTA, 1, 30, -1, -1, 118, 492),
    HALF_BAKED_BOWL(ItemID.RAW_GNOMEBOWL, 1, 30, -1, -1, 118, 492),
    HALF_BAKED_CRUNCHY(ItemID.RAW_CRUNCHIES, 1, 30, -1, -1, 118, 492),
    HERRING(ItemID.RAW_HERRING, 5, 50, 108, 472, 108, 472),
    KARAMBWANJI(ItemID.TBWT_RAW_KARAMBWANJI, 1, 10, 200, 400, 200, 400),
    KYREN_FISH_6(ItemID.RAIDS_FISH6_RAW, 90, 28, 163, 255, -1, -1),
    LEAN_SNAIL_MEAT(ItemID.SNAIL_CORPSE2, 17, 80, 93, 444, 85, 428),
    LOBSTER(ItemID.RAW_LOBSTER, 40, 120, 38, 332, 38, 332),
    MACKEREL(ItemID.RAW_MACKEREL, 10, 60, 98, 452, 98, 452),
    MANTA_RAY(ItemID.RAW_MANTARAY, 91, 216, 1, 202, 1, 222),
    MEAT_PIE(ItemID.UNCOOKED_MEAT_PIE, 20, 110, -1, -1, 78, 412),
    MONKFISH(ItemID.RAW_MONKFISH, 62, 150, 11, 275, 13, 280),
    MUD_PIE(ItemID.UNCOOKED_MUD_PIE, 29, 128, -1, -1, 58, 372),
    MUSHROOM_PIE(ItemID.UNCOOKED_MUSHROOM_PIE, 60, 200, -1, -1, 17, 285),
    NETTLE_TEA(ItemID.BOWL_NETTLEWATER, 20, 52, 78, 412, 78, 412),
    PADDLEFISH(ItemID.GAUNTLET_RAW_FOOD, 30, 15, -1, -1, 155, 368),
    PIKE(ItemID.RAW_PIKE, 20, 80, 78, 412, 78, 412),
    PITTA_BREAD(ItemID.UNCOOKED_PITTA_BREAD, 58, 40, -1, -1, 118, 492),
    PLAIN_PIZZA(ItemID.UNCOOKED_PIZZA, 35, 143, -1, -1, 48, 352),
    POISON_KARAMBWAN(ItemID.TBWT_RAW_KARAMBWAN, 1, 80, 70, 255, 70, 255),
    RAINBOW_FISH(ItemID.HUNTING_RAW_FISH_SPECIAL, 35, 110, 56, 370, 56, 370),
    REDBERRY_PIE(ItemID.UNCOOKED_REDBERRY_PIE, 10, 78, -1, -1, 98, 452),
    ROAST_BEAST_MEAT(ItemID.SPIT_SKEWERED_BEAST_MEAT, 21, 82, 180, 255, -1, -1),
    ROAST_BIRD_MEAT(ItemID.SPIT_SKEWERED_BIRD_MEAT, 11, 62, 155, 255, -1, -1),
    ROAST_RABBIT(ItemID.SPIT_SKEWERED_RABBIT_MEAT, 16, 72, 160, 255, -1, -1),
    SALMON(ItemID.RAW_SALMON, 25, 90, 68, 392, 68, 392),
    SARDINE(ItemID.RAW_SARDINE, 1, 40, 118, 492, 118, 492),
    SCRAMBLED_EGG(ItemID.BOWL_EGG_RAW, 13, 50, -1, -1, 90, 438),
    SEA_TURTLE(ItemID.RAW_SEATURTLE, 82, 211, 1, 202, 1, 222),
    SHARK(ItemID.RAW_SHARK, 80, 210, 1, 202, 1, 232),
    SHRIMPS(ItemID.RAW_SHRIMP, 1, 30, 128, 512, 128, 512),
    SINEW(ItemID.RAW_BEEF, 1, 3, -1, -1, 128, 512),
    SODA_ASH(ItemID.SEAWEED, 1, 0, 0, 500, 0, 500),
    SPICY_CRUNCHIES(ItemID.SPICY_CRUNCHIES, 12, 42, -1, -1, 118, 492),
    SPIDER_ON_SHAFT(ItemID.TBW_SPIDER_ON_SHAFT_RAW, 16, 80, 91, 438, 91, 438),
    SPIDER_ON_STICK(ItemID.TBW_SPIDER_ON_STICK_RAW, 16, 80, 91, 438, 91, 438),
    STEW(ItemID.UNCOOKED_STEW, 25, 117, 68, 392, 68, 392),
    SUMMER_PIE(ItemID.UNCOOKED_SUMMER_PIE, 95, 260, -1, -1, 1, 212),
    SWORDFISH(ItemID.RAW_SWORDFISH, 45, 140, 18, 292, -1, -1),
    TANGLED_TOADS_LEGS(ItemID.ALUFT_HALF_BAKED_TANGLED_TOADS_LEGS, 40, 105, -1, -1, 118, 492),
    THIN_SNAIL_MEAT(ItemID.SNAIL_CORPSE1, 12, 70, 93, 444, 93, 444),
    TOAD_BATTA(ItemID.TOAD_BATTA, 26, 82, -1, -1, 118, 492),
    TOAD_CRUNCHIES(ItemID.TOAD_CRUNCHIES, 10, 40, -1, -1, 118, 492),
    TROUT(ItemID.RAW_TROUT, 15, 70, 88, 432, 88, 432),
    TUNA(ItemID.RAW_TUNA, 30, 100, 58, 372, 58, 372),
    UGTHANKI_MEAT(ItemID.RAW_UGTHANKI_MEAT, 1, 40, 40, 252, 30, 253),
    VEG_BALL(ItemID.UNFINISHED_VEG_BALL, 35, 95, -1, -1, 118, 492),
    VEGETABLE_BATTA(ItemID.UNFINISHED_VEGETABLE_BATTA, 28, 86, -1, -1, 118, 492),
    WILD_PIE(ItemID.UNCOOKED_WILD_PIE, 85, 240, -1, -1, 1, 222),
    WORM_BATTA(ItemID.UNFINISHED_WORM_BATTA, 27, 84, -1, -1, 118, 492),
    WORM_CRUNCHIES(ItemID.UNFINISHED_WORM_CRUNCHIES, 14, 44, -1, -1, 118, 492),
    WORM_HOLE(ItemID.ALUFT_BAKED_WORM_HOLE, 30, 90, -1, -1, 118, 492);

    private final int rawItemId;
    private final int level;
    private final float xp;
    private final int fireLow;
    private final int fireHigh;
    private final int rangeLow;
    private final int rangeHigh;

    Cookables(int rawItemId, int level, float xp, int fireLow, int fireHigh, int rangeLow, int rangeHigh) {
        this.rawItemId = rawItemId;
        this.level = level;
        this.xp = xp;
        this.fireLow = fireLow;
        this.fireHigh = fireHigh;
        this.rangeLow = rangeLow;
        this.rangeHigh = rangeHigh;
    }

    public double calculateFireChance(int level) {
        if (fireLow == -1 || fireHigh == -1) {
            return 0;
        }
        double value = Math.floor(fireLow * (99 - level) / 98.0) + Math.floor(fireHigh * (level - 1) / 98.0) + 1;
        value = Math.min(Math.max(value / 256.0, 0), 1);
        return value * 100;
    }

    public double calculateRangeChance(int level) {
        if (rangeLow == -1 || rangeHigh == -1) {
            return 0;
        }
        double value = Math.floor(rangeLow * (99 - level) / 98.0) + Math.floor(rangeHigh * (level - 1) / 98.0) + 1;
        value = Math.min(Math.max(value / 256.0, 0), 1);
        return value * 100;
    }

    public static Cookables fromItemId(int itemId) {
        for (Cookables cookable : values()) {
            if (cookable.getRawItemId() == itemId) {
                return cookable;
            }
        }
        return null;
    }

}

package com.ashleythew.cookingtooltip;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("cookingtooltip")
public interface CookingTooltipConfig extends Config {
    @ConfigItem(keyName = "showCookingTooltips", name = "Show Cooking Tooltips", description = "Show cooking success chances in tooltips", position = 1)
    default boolean showCookingTooltips() {
        return true;
    }
}

package com.ashleythew.cookingtooltip;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CookingTooltipPluginTest {
    public static void main(String[] args) throws Exception {
        ExternalPluginManager.loadBuiltin(CookingTooltipPlugin.class);
        RuneLite.main(args);
    }
}

