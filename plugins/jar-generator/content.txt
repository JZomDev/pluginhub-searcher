package com.janboerman.jargenerator;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class JarGeneratorPluginTest  {

	public static void main(String[] args) throws Exception {
		ExternalPluginManager.loadBuiltin(JarGeneratorPlugin.class);
		RuneLite.main(args);
	}

}
package com.janboerman.jargenerator;

import static org.junit.Assert.*;
import org.junit.Test;

public class JarGeneratorLingoTest {

    @Test
    public void testZero() {
        final Charges expected = Charges.empty();
        final Charges actual = JarGeneratorLingo.interpret("You have 0 charges left in your jar generator.");

        assertEquals(expected, actual);
    }

    @Test
    public void testOne() {
        final Charges expected = Charges.known(1);
        final Charges actual = JarGeneratorLingo.interpret("You have 1 charge left in your jar generator.");

        assertEquals(expected, actual);
    }

    @Test
    public void testFortyTwo() {
        final Charges expected = Charges.known(42);
        final Charges actual = JarGeneratorLingo.interpret("You have 42 charges left in your jar generator.");

        assertEquals(expected, actual);
    }

    @Test
    public void testNew() {
        final Charges expected = Charges.full();
        final Charges actual = JarGeneratorLingo.interpret("You have purchased: Jar generator x1");

        assertEquals(expected, actual);
    }

    @Test
    public void testRecharge() {
        final Charges expected = Charges.full();
        final Charges actual = JarGeneratorLingo.interpret("Elnock recharges your magical jar generator. You now have one hundred charges.");

        assertEquals(expected, actual);
    }

    @Test
    public void testDeplete() {
        final Charges expected = Charges.empty();
        final Charges actual = JarGeneratorLingo.interpret("Your jar generator runs out of charges and disappears.");

        assertEquals(expected, actual);
    }

}

package com.janboerman.jargenerator;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class JarGeneratorLingo {

    private static final String FRESH_MESSAGE = "You have purchased: Jar generator x1";
    private static final String RUN_OUT_MESSAGE = "Your jar generator runs out of charges and disappears.";
    private static final String RECHARGE_MESSAGE = "Elnock recharges your magical jar generator. You now have one hundred charges.";
    private static final String CHARGES_MESSAGE_REGEX = "You have (?<amount>\\d+) charges? left in your jar generator.";
    private static final Pattern CHARGES_MESSAGE_PATTERN = Pattern.compile(CHARGES_MESSAGE_REGEX);

    private JarGeneratorLingo() {
    }

    public static Charges interpret(String text) {
        if (RUN_OUT_MESSAGE.equals(text)) {
            return Charges.empty();
        } else if (FRESH_MESSAGE.equals(text) || RECHARGE_MESSAGE.equals(text)) {
            return Charges.full();
        } else {
            Matcher matcher = CHARGES_MESSAGE_PATTERN.matcher(text);
            if (matcher.matches()) {
                String amount = matcher.group("amount");
                try {
                    return Charges.known(Integer.parseInt(amount));
                } catch (NumberFormatException e) {
                    return Charges.unknown();
                }
            } else {
                return Charges.unknown();
            }
        }
    }
}

package com.janboerman.jargenerator;

import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.ui.overlay.WidgetItemOverlay;
import static com.janboerman.jargenerator.JarGeneratorPlugin.JAR_GENERATOR_ITEM_ID;
import net.runelite.client.ui.overlay.components.TextComponent;

import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Point;
import java.awt.Color;

public class JarGeneratorOverlay extends WidgetItemOverlay {

    private final JarGeneratorPlugin plugin;
    private final JarGeneratorConfig config;

    public JarGeneratorOverlay(JarGeneratorPlugin plugin, JarGeneratorConfig config) {
        this.plugin = plugin;
        this.config = config;

        showOnInventory();
    }

    @Override
    public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem itemWidget) {
        if (itemId == JAR_GENERATOR_ITEM_ID) {
            final Rectangle bounds = itemWidget.getCanvasBounds();
            final TextComponent textComponent = new TextComponent();
            textComponent.setPosition(new Point(bounds.x - 1, bounds.y + 8));

            final Charges charges = plugin.getCharges();

            final Color colour;
            final String text;

            if (charges instanceof Unknown) {
                colour = config.unknownChargesColour();
                text = "?"; // Don't call charges.getAmount(), because that will throw.
            } else {
                colour = charges.isKnown() ? config.knownChargesColour() : config.unknownChargesColour();
                text = String.valueOf(charges.getAmount());
            }

            textComponent.setColor(colour);
            textComponent.setText(text);
            textComponent.render(graphics);
        }
    }

}

package com.janboerman.jargenerator;

import javax.inject.Inject;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.ScriptCallbackEvent;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Jar Generator",
	description = "Overlays impling jar generator charges",
	tags = {"impling", "butterfly", "jar", "generator", "charge"}
)
public class JarGeneratorPlugin extends Plugin
{
	static final int JAR_GENERATOR_ITEM_ID = ItemID.JAR_GENERATOR; // 11258

	private Charges currentCharges = Charges.unknown();
	private JarGeneratorOverlay jarGeneratorOverlay;

	@Inject private Client client;
	@Inject private OverlayManager overlayManager;
	@Inject private JarGeneratorConfig config;

	@Provides
	JarGeneratorConfig getConfig(ConfigManager configManager) {
		return configManager.getConfig(JarGeneratorConfig.class);
	}

	@Override
	protected void startUp() {
		log.info("Jar Generator started!");

		setCharges(Charges.probably(config.charges()));
		jarGeneratorOverlay = new JarGeneratorOverlay(this, config);
		overlayManager.add(jarGeneratorOverlay);
	}

	@Override
	protected void shutDown() {
		log.info("Jar Generator stopped!");

		overlayManager.remove(jarGeneratorOverlay);
		jarGeneratorOverlay = null;
		setCharges(Charges.probably(getCharges().getAmount()));
		Charges.clearCache();
	}

	public Charges getCharges() {
		return currentCharges;
	}

	public void setCharges(Charges charges) {
		log.debug("Set charges to " + charges);
		this.currentCharges = charges;

		if (!(charges instanceof Unknown)) {
			this.config.charges(charges.getAmount());
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage event) {
		if (event.getType() != ChatMessageType.GAMEMESSAGE) return;

		String text = event.getMessage();
		Charges charges = JarGeneratorLingo.interpret(text);
		if (charges.isKnown()) {
			setCharges(charges);
		}
	}

	private int lastCheckTick = -1;

	@Subscribe
	public void onScriptCallbackEvent(ScriptCallbackEvent event) {
		if ("destroyOnOpKey".equals(event.getEventName())) {

			int yesOption = client.getIntStack()[client.getIntStackSize() - 1];
			if (yesOption == 1) {

				final int currentTick = client.getTickCount();
				if (lastCheckTick != currentTick) {
					lastCheckTick = currentTick;

					final Widget widgetDestroyItemName = client.getWidget(WidgetInfo.DESTROY_ITEM_NAME);
					if (widgetDestroyItemName != null && widgetDestroyItemName.getText().equals("Jar generator")) {
						setCharges(Charges.empty());
					}
				}
			}
		}
	}

}

package com.janboerman.jargenerator;

import net.runelite.client.config.*;

import java.awt.Color;

@ConfigGroup("JarGenerator")
public interface JarGeneratorConfig extends Config {

    @ConfigItem(keyName = "charges", name = "", description = "", hidden = true)
    public default int charges() {
        return 0;
    }

    @ConfigItem(keyName = "charges", name = "", description = "")
    public void charges(int charges);

    @ConfigItem(keyName = "knownChargesColour", name = "Known colour", description = "Configures the text colour when the amount of charges is known exactly", position = 1)
    default Color knownChargesColour() {
        return Color.CYAN;
    }

    @ConfigItem(keyName = "unkownChargesColour", name = "Unknown colour", description = "Configures the text colour when the amount of charges is not exactly known", position = 2)
    default Color unknownChargesColour() {
        return new Color(0xFF, 0x40, 0x00);
    }

}

package com.janboerman.jargenerator;

import java.util.Arrays;

public abstract class Charges {

    private static final int MAX_CHARGES = 100;

    private static final Charges[] STATES = new Charges[MAX_CHARGES + 1];   // +1 because both 0 and MAX_CHARGES are included.

    public Charges() {
    }

    static void clearCache() {
        Arrays.fill(STATES, null);
    }

    public static Charges unknown() {
        return Unknown.INSTANCE;
    }

    public static Charges empty() {
        return known(0);
    }

    public static Charges full() {
        return known(MAX_CHARGES);
    }

    public static Charges probably(int charges) {
        return new BestGuess(charges);
    }

    public static Charges known(int charges) {
        if (0 <= charges && charges <= MAX_CHARGES) {
            Charges chargeState = STATES[charges];
            if (chargeState == null) {
                STATES[charges] = chargeState = new ExactlyKnown(charges);
            }
            return chargeState;
        } else {
            // Unreachable, but just to be future-proof.
            return new ExactlyKnown(charges);
        }
    }

    public abstract boolean isKnown();
    public abstract int getAmount();
}

final class Unknown extends Charges {

    static final Unknown INSTANCE = new Unknown();

    private Unknown() {}

    @Override public boolean isKnown() { return false; }
    @Override public int getAmount() { throw new IllegalStateException("Unknown number of charges"); }

    @Override public String toString() { return "Unknown"; }
}

final class BestGuess extends Charges {

    private final int charges;

    BestGuess(int charges) {
        this.charges = charges;
    }

    @Override public boolean isKnown() { return false; }
    @Override public int getAmount() { return charges; }

    @Override public String toString() { return "BestGuess(" + charges + ")"; }
    @Override public int hashCode() { return charges; }
    @Override public boolean equals(Object o) {
        if (o == this) return true;
        if (!(o instanceof BestGuess)) return false;

        BestGuess that = (BestGuess) o;
        return this.charges == that.charges;
    }
}

final class ExactlyKnown extends Charges {

    private final int charges;

    ExactlyKnown(int charge) {
        this.charges = charge;
    }

    @Override public boolean isKnown() { return true; }
    @Override public int getAmount() { return charges; }

    @Override public String toString() { return "ExactlyKnown(" + charges + ")"; }
    @Override public int hashCode() { return charges; }
    @Override public boolean equals(Object o) {
        if (o == this) return true;
        if (!(o instanceof ExactlyKnown)) return false;

        ExactlyKnown that = (ExactlyKnown) o;
        return this.charges == that.charges;
    }
}


