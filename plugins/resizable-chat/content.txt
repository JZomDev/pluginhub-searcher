package dev.thource.runelite.resizablechat;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ResizableChatPluginTest {

  @SuppressWarnings("unchecked")
  public static void main(String[] args) throws Exception {
    ExternalPluginManager.loadBuiltin(ResizableChatPlugin.class);
    RuneLite.main(args);
  }
}

package dev.thource.runelite.resizablechat;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Keybind;
import net.runelite.client.config.Range;

/**
 * ResizableChatConfig manages the config for the plugin.
 */
@SuppressWarnings("SameReturnValue")
@ConfigGroup("resizableChat")
public interface ResizableChatConfig extends Config {

    String CONFIG_GROUP = "resizableChat";

    @Range(min = 28)
    @ConfigItem(
            keyName = "chatHeight",
            name = "Chat height",
            description = "How many pixels tall the chat should be."
    )
    default int chatHeight() {
        return 142;
    }

    @Range(min = 300)
    @ConfigItem(
            keyName = "chatWidth",
            name = "Chat width",
            description = "How many pixels wide the chat should be."
    )
    default int chatWidth() {
        return 519;
    }

    @ConfigItem(
        keyName = "stretchChatButtons",
        name = "Stretch chat buttons",
        description = "Should the chat buttons stretch when the chat width is changed?"
    )
    default boolean stretchChatButtons() {
        return true;
    }

    @ConfigItem(
            keyName = "expandChatKeybind",
            name = "Expand chat keybind",
            description = "Double the chat height when this keybind is held."
    )
    default Keybind expandChatKeybind() {
        return Keybind.NOT_SET;
    }

    @ConfigItem(
            keyName = "alwaysShowResizingHandles",
            name = "Always show resizing handles",
            description = "Sets whether the handles should always be shown, or just when the keybind is held.",
            position = 100
    )
    default boolean alwaysShowResizingHandles() {
        return true;
    }

    @ConfigItem(
            keyName = "resizingHandleKeybind",
            name = "Resizing handle keybind",
            description = "Show the resizing handles when this keybind is held.",
            position = 101
    )
    default Keybind resizingHandleKeybind() {
        return Keybind.CTRL;
    }
}

package dev.thource.runelite.resizablechat;

import java.awt.event.KeyEvent;
import javax.inject.Inject;
import net.runelite.client.input.KeyListener;

public class ResizableChatKeyListener implements KeyListener {

  private final ResizableChatConfig config;
  private final ResizableChatPlugin plugin;

  @Inject
  private ResizableChatKeyListener(ResizableChatPlugin plugin) {
    this.plugin = plugin;
    this.config = plugin.getConfig();
  }

  @Override
  public void keyTyped(KeyEvent keyEvent) {
    // not needed
  }

  @Override
  public void keyPressed(KeyEvent keyEvent) {
    if (config.resizingHandleKeybind().matches(keyEvent)) {
      plugin.setResizingKeybindPressed(true);
    }

    if (config.expandChatKeybind().matches(keyEvent)) {
      plugin.setExpandChatKeybindPressed(true);
    }
  }

  @Override
  public void keyReleased(KeyEvent keyEvent) {
    if (config.resizingHandleKeybind().matches(keyEvent)) {
      plugin.setResizingKeybindPressed(false);
    }

    if (config.expandChatKeybind().matches(keyEvent)) {
      plugin.setExpandChatKeybindPressed(false);
    }
  }
}

package dev.thource.runelite.resizablechat;


import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public enum ResizeType {
    VERTICAL("Vertical"),
    HORIZONTAL("Horizontal");

    private final String formatName;
}

package dev.thource.runelite.resizablechat;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.client.game.SpriteOverride;

@Getter
@RequiredArgsConstructor
public enum CustomSprites implements SpriteOverride {
    RESIZE_H(-2365, "resizeH.png"),
    RESIZE_V(-2366, "resizeV.png"),
    RESIZE_V_BROWN(-2367, "resizeVBrown.png"),
    RESIZE_H_BROWN(-2368, "resizeHBrown.png"),
    BACKGROUND(-2369, "bg.png"),
    RESIZE_H_H(-2370, "resizeHH.png"),
    RESIZE_V_H(-2371, "resizeVH.png"),
    RESIZE_V_BROWN_H(-2372, "resizeVBrownH.png"),
    RESIZE_H_BROWN_H(-2373, "resizeHBrownH.png");

    private final int spriteId;
    private final String fileName;
}
package dev.thource.runelite.resizablechat;

import com.google.inject.Provides;
import dev.thource.runelite.resizablechat.ui.UiManager;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Point;
import net.runelite.api.Varbits;
import net.runelite.api.events.ClientTick;
import net.runelite.api.events.FocusChanged;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.ResizeableChanged;
import net.runelite.api.events.VarbitChanged;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetSizeMode;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import javax.inject.Inject;

/**
 * ResizableChatPlugin is a RuneLite plugin designed to allow the player to resize the chat when
 * playing in resizable mode.
 */
@Slf4j
@PluginDescriptor(name = "Resizable Chat", description = "Allows the chat to be resized when playing in resizable mode.", tags = {"resize chat"})
public class ResizableChatPlugin extends Plugin {

    @Getter
    @Inject
    private Client client;
    @Getter
    @Inject
    private ClientThread clientThread;
    @Getter
    @Inject
    private ResizableChatConfig config;
    @Inject
    public SpriteManager spriteManager;
    @Inject
    public ResizableChatKeyListener resizableChatKeyListener;
    @Inject
    public KeyManager keyManager;
    @Inject
    public UiManager uiManager;
    @Inject
    public ConfigManager configManager;
    protected boolean isDraggingV;
    protected boolean isDraggingH;
    protected Point dragStartPos = null;
    protected int dragStartValue;
    @Getter
    private boolean inOverlayDragMode;
    private boolean dialogsNeedFixing;
    @Setter
    private boolean isExpandChatKeybindPressed;

    private static final int BUTTON_WIDTH = 56;
    private static final int REPORT_BUTTON_WIDTH = 79;
    private static final int BUTTON_SPACING = 3;
    private static final int TOTAL_BUTTON_SPACING = 48;

    @Override
    protected void startUp() {
        spriteManager.addSpriteOverrides(CustomSprites.values());
        keyManager.registerKeyListener(resizableChatKeyListener);
    }

    @Override
    protected void shutDown() {
        spriteManager.removeSpriteOverrides(CustomSprites.values());
        keyManager.unregisterKeyListener(resizableChatKeyListener);
        clientThread.invoke(() -> {
            uiManager.shutDown();
            resetChatbox();
            client.runScript(924);
        });
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged e) {
        if (e.getGameState() == GameState.LOGIN_SCREEN || e.getGameState() == GameState.HOPPING) {
            uiManager.setUiCreated(false);
        }
    }

    @Subscribe
    public void onFocusChanged(FocusChanged focusChanged) {
        if (!focusChanged.isFocused()) {
            inOverlayDragMode = false;
        }
    }

    @Subscribe
    public void onClientTick(ClientTick tick) {
        if (dialogsNeedFixing) {
            client.runScript(924);
            dialogsNeedFixing = false;
        }

        uiManager.hideResizingHandles(isChatHidden() || (!config.alwaysShowResizingHandles() && !uiManager.isHandleKeybindPressed()));
        uiManager.updateHiddenState();
        checkResizing();
        uiManager.create();
        resizeChatbox();
    }

    Widget getViewportChatboxParent() {
        Widget resizableModernChatboxParent = client.getWidget(ComponentID.RESIZABLE_VIEWPORT_BOTTOM_LINE_CHATBOX_PARENT);
        Widget resizableClassicChatboxParent = client.getWidget(ComponentID.RESIZABLE_VIEWPORT_CHATBOX_PARENT);

        if (resizableModernChatboxParent != null && !resizableModernChatboxParent.isHidden()) {
            return resizableModernChatboxParent;
        }

        if (resizableClassicChatboxParent != null && !resizableClassicChatboxParent.isHidden()) {
            return resizableClassicChatboxParent;
        }

        return null;
    }

    public void resetChatbox() {
        Widget chatboxParent = client.getWidget(ComponentID.CHATBOX_PARENT);
        Widget chatboxBackground = client.getWidget(ComponentID.CHATBOX_TRANSPARENT_BACKGROUND);
        Widget chatboxBackgroundLines = client.getWidget(ComponentID.CHATBOX_TRANSPARENT_BACKGROUND_LINES);
        if (chatboxParent == null || chatboxParent.getOriginalHeight() == 0) {
            return;
        }

        Widget viewportChatboxParent = getViewportChatboxParent();

        if (viewportChatboxParent != null && !viewportChatboxParent.isHidden()) {
            viewportChatboxParent.setOriginalHeight(165);
            viewportChatboxParent.setOriginalWidth(519);
        }

        chatboxParent.setOriginalHeight(0);
        chatboxParent.setOriginalWidth(0);
        chatboxParent.setHeightMode(WidgetSizeMode.MINUS);
        chatboxParent.setWidthMode(WidgetSizeMode.MINUS);

        if (chatboxBackground != null) {
            chatboxBackground.setOriginalY(0);
            chatboxBackground.setOriginalWidth(0);
            chatboxBackground.setOriginalHeight(0);
        }

        if (chatboxBackgroundLines != null) {
            chatboxBackgroundLines.setOriginalWidth(0);
            chatboxBackgroundLines.setOriginalHeight(0);
            chatboxBackgroundLines.setOriginalY(0);
        }

        if (viewportChatboxParent != null && !viewportChatboxParent.isHidden()) {
            recursiveRevalidate(viewportChatboxParent);
        } else {
            recursiveRevalidate(chatboxParent);
        }

        // Resize the buttons

        Widget chatboxButtons = client.getWidget(ComponentID.CHATBOX_BUTTONS);
        if (chatboxButtons != null) {
            chatboxButtons.setOriginalWidth(519);
        }

        Widget chatboxButtonsContainer = client.getWidget(162, 3);
        if (chatboxButtonsContainer != null) {
            chatboxButtonsContainer.setOriginalWidth(519);
        }

        Widget reportButtonWidget = client.getWidget(162, 31);
        if (reportButtonWidget != null) {
            reportButtonWidget.setOriginalWidth(REPORT_BUTTON_WIDTH);
        }

        int[] buttonWidgets = new int[]{27, 23, 19, 15, 11, 7, 4};
        for (int i = 0; i < buttonWidgets.length; i++) {
            int widgetId = buttonWidgets[i];
            Widget widget = client.getWidget(162, widgetId);
            if (widget == null) {
                continue;
            }

            widget.setOriginalWidth(BUTTON_WIDTH);
            widget.setOriginalX(BUTTON_SPACING + (i * (BUTTON_WIDTH + BUTTON_SPACING * 2)) + REPORT_BUTTON_WIDTH + BUTTON_SPACING * 2);

            // Resize the button background
            Widget backgroundWidget = client.getWidget(162, widgetId + 1);
            if (backgroundWidget != null) {
                backgroundWidget.setOriginalWidth(BUTTON_WIDTH);
            }
        }


        client.refreshChat();

        uiManager.setHidden(true);

        // This solves a bug that occurs after chat is hidden
        dialogsNeedFixing = true;
    }

    @Subscribe
    public void onVarbitChanged(VarbitChanged e) {
        uiManager.onVarbitChanged();
    }

    public boolean isChatHidden() {
        Widget viewportChatboxParent = getViewportChatboxParent();
        Widget chatboxBackgroundLines = client.getWidget(ComponentID.CHATBOX_TRANSPARENT_BACKGROUND_LINES);
        Widget chatboxFrame = client.getWidget(ComponentID.CHATBOX_FRAME);

        return viewportChatboxParent == null || (chatboxBackgroundLines == null || chatboxBackgroundLines.isHidden()) || chatboxFrame == null;
    }

    public void startDragging(boolean isVertical) {
        if (isVertical) {
            if (isDraggingV) {
                return;
            }

            isDraggingV = true;
        } else {
            if (isDraggingH) {
                return;
            }

            isDraggingH = true;
        }

        dragStartPos = client.getMouseCanvasPosition();
        dragStartValue = isVertical ? getTargetHeight() : config.chatWidth();
    }

    @Subscribe
    public void onResizeableChanged(ResizeableChanged e) {
        uiManager.onResizeableChanged();
    }

    public void stopDragging() {
        isDraggingV = false;
        isDraggingH = false;
    }

    protected boolean shouldRender() {
        if (anyOverlappingOverlayOpen() || isChatHidden() || (!config.alwaysShowResizingHandles() && !uiManager.isHandleKeybindPressed())) {
            return false;
        }

        Widget viewportChatboxParent = getViewportChatboxParent();
        return viewportChatboxParent != null;
    }

    private boolean anyOverlappingOverlayOpen() {
        int[] overlayWidgets = new int[]{16, 18};
        for (int widgetId : overlayWidgets) {
            Widget widget = client.getWidget(164, widgetId);
            if (widget != null) {
                if (widget.getNestedChildren().length > 0) {
                    return true;
                }
            }
        }

        return false;
    }

    private int getTargetHeight() {
        if (isExpandChatKeybindPressed) {
            return Math.min(client.getCanvasHeight() - 24, config.chatHeight() * 2);
        }

        return config.chatHeight();
    }

    public void checkResizing() {
        if (!shouldRender() || (!isDraggingV && !isDraggingH)) {
            return;
        }

        if (!config.alwaysShowResizingHandles() && !uiManager.isHandleKeybindPressed()) {
            stopDragging();
            return;
        }

        Point mousePos = client.getMouseCanvasPosition();
        int newDimension;

        if (isDraggingV) {
            newDimension = Math.min(client.getCanvasHeight() - 24, Math.max(28, dragStartValue + (dragStartPos.getY() - mousePos.getY())));
            if (newDimension != getTargetHeight()) {
              configManager.setConfiguration(ResizableChatConfig.CONFIG_GROUP, "chatHeight", newDimension);
            }
        } else if (isDraggingH) {
            newDimension = Math.min(client.getCanvasWidth() - 24, Math.max(300, dragStartValue + (mousePos.getX() - dragStartPos.getX())));
            if (newDimension != config.chatWidth()) {
              configManager.setConfiguration(ResizableChatConfig.CONFIG_GROUP, "chatWidth", newDimension);
            }
        }
    }

    private boolean isChatboxTransparent() {
        return client.getVarbitValue(Varbits.TRANSPARENT_CHATBOX) == 1;
    }

    private void resizeChatbox() {
        if (anyOverlappingOverlayOpen() || isChatHidden()) {
            resetChatbox();
            return;
        }

        Widget viewportChatboxParent = getViewportChatboxParent();
        Widget chatboxFrame = client.getWidget(ComponentID.CHATBOX_FRAME);

        boolean isChatboxTransparent = isChatboxTransparent();
        int oldHeight = viewportChatboxParent.getOriginalHeight();
        int newHeight = getTargetHeight();
        int heightPadding = isChatboxTransparent ? 27 : 32;
        int oldWidth = viewportChatboxParent.getOriginalWidth();
        int newWidth = config.chatWidth();
        int widthPadding = isChatboxTransparent ? 8 : 4;
        if (chatboxFrame == null || (oldHeight == newHeight + heightPadding && oldWidth == newWidth + widthPadding && chatboxFrame.getOriginalWidth() == newWidth + widthPadding)) {
            return;
        }

        Widget chatboxParent = client.getWidget(ComponentID.CHATBOX_PARENT);
        Widget chatboxBackground = client.getWidget(ComponentID.CHATBOX_TRANSPARENT_BACKGROUND);
        Widget chatboxBackgroundLines = client.getWidget(ComponentID.CHATBOX_TRANSPARENT_BACKGROUND_LINES);
        Widget chatboxButtons = client.getWidget(ComponentID.CHATBOX_BUTTONS);

        if (chatboxParent == null || chatboxBackground == null || chatboxBackgroundLines == null || chatboxButtons == null) {
            return;
        }

        uiManager.setHidden(false);

        viewportChatboxParent.setOriginalHeight(newHeight + heightPadding);
        viewportChatboxParent.setOriginalWidth(newWidth + widthPadding);
        chatboxBackgroundLines.setOriginalHeight(16);
        chatboxBackgroundLines.setOriginalY(3);
        if (isChatboxTransparent) {
            chatboxBackground.setOriginalY(4);
            chatboxBackground.setOriginalWidth(8);
            chatboxBackground.setOriginalHeight(4);

            // Fixes issue with scrollbar being under side border
            chatboxBackgroundLines.setOriginalWidth(28);
        } else {
            chatboxBackground.setOriginalY(5);
            chatboxBackground.setOriginalWidth(0);
            chatboxBackground.setOriginalHeight(5);

            // Fixes issue with scrollbar being under side border
            chatboxBackgroundLines.setOriginalWidth(22);
        }

        chatboxParent.setOriginalHeight(viewportChatboxParent.getOriginalHeight());
        chatboxParent.setOriginalWidth(viewportChatboxParent.getOriginalWidth());
        chatboxParent.setHeightMode(WidgetSizeMode.ABSOLUTE);
        chatboxParent.setWidthMode(WidgetSizeMode.ABSOLUTE);

        chatboxFrame.setOriginalWidth(viewportChatboxParent.getOriginalWidth());

        Widget[] bgLines = chatboxBackground.getChildren();
        if (bgLines != null) {
            for (int i = 0; i < bgLines.length; i++) {
                Widget bg = chatboxBackground.getChildren()[i];
                int lineHeight = newHeight / 20;

                if (i == bgLines.length - 1) {
                    bg.setOriginalHeight(newHeight - (lineHeight * 19)); // fill the rest of the space
                } else {
                    bg.setOriginalHeight(lineHeight);
                }
                bg.setOriginalY(i * lineHeight);
            }
        }

        // Resize the buttons

        chatboxButtons.setOriginalWidth(newWidth);
        Widget chatboxButtonsContainer = client.getWidget(162, 3);
        if (chatboxButtonsContainer != null) {
            chatboxButtonsContainer.setOriginalWidth(newWidth);
        }

        float chatboxButtonScale = (newWidth - TOTAL_BUTTON_SPACING) / (519f - TOTAL_BUTTON_SPACING);
        int reportButtonWidth = (int) Math.floor(REPORT_BUTTON_WIDTH * chatboxButtonScale);
        int buttonWidth = (int) Math.floor(BUTTON_WIDTH * chatboxButtonScale);

        Widget reportButtonWidget = client.getWidget(162, 31);
        if (reportButtonWidget != null) {
            reportButtonWidget.setOriginalWidth(reportButtonWidth);
        }

        int[] buttonWidgets = new int[]{27, 23, 19, 15, 11, 7, 4};
        for (int i = 0; i < buttonWidgets.length; i++) {
            int widgetId = buttonWidgets[i];
            Widget widget = client.getWidget(162, widgetId);
            if (widget == null) {
                continue;
            }

            widget.setOriginalWidth(buttonWidth);
            widget.setOriginalX(BUTTON_SPACING + (i * (buttonWidth + BUTTON_SPACING * 2)) + reportButtonWidth + BUTTON_SPACING * 2);

            // Resize the button background
            Widget backgroundWidget = client.getWidget(162, widgetId + 1);
            if (backgroundWidget == null) {
                continue;
            }

            if (config.stretchChatButtons() || buttonWidth < BUTTON_WIDTH) {
                backgroundWidget.setOriginalWidth(buttonWidth);
            } else {
                backgroundWidget.setOriginalWidth(BUTTON_WIDTH);
            }
        }

        // Adjust scroll when shrinking chat, so that the bottom chat line stays at the bottom of the box
        if (oldHeight != 165 && oldWidth != 519) {
            int heightDifference = newHeight - (oldHeight - heightPadding);
            client.setVarcIntValue(7, client.getVarcIntValue(7) - heightDifference);
        }

        recursiveRevalidate(viewportChatboxParent);
        client.refreshChat();

        uiManager.onChatBoxResized();
    }


    public void recursiveRevalidate(Widget widget) {
        if (widget == null) {
            return;
        }

        widget.revalidate();

        Widget[] staticChildren = widget.getStaticChildren();
        if (staticChildren != null) {
            for (Widget child : staticChildren) {
                recursiveRevalidate(child);
            }
        }

        Widget[] dynamicChildren = widget.getDynamicChildren();
        if (dynamicChildren != null) {
            for (Widget child : dynamicChildren) {
                recursiveRevalidate(child);
            }
        }

        Widget[] nestedChildren = widget.getNestedChildren();
        if (nestedChildren != null) {
            for (Widget child : nestedChildren) {
                recursiveRevalidate(child);
            }
        }
    }

    void setResizingKeybindPressed(boolean pressed) {
        uiManager.setHandleKeybindPressed(pressed);
    }

    @Provides
    ResizableChatConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(ResizableChatConfig.class);
    }
}

package dev.thource.runelite.resizablechat.ui;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import dev.thource.runelite.resizablechat.ResizableChatPlugin;
import dev.thource.runelite.resizablechat.ResizeType;
import dev.thource.runelite.resizablechat.ui.impl.ChatBoxBackground;
import dev.thource.runelite.resizablechat.ui.impl.ResizingHandles;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Varbits;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.Widget;

import java.util.ArrayList;

@Singleton
@Slf4j
public class UiManager {

    private final Client client;
    private final ResizableChatPlugin plugin;
    private final ArrayList<ResizingHandles> resizingHandles = new ArrayList<>();
    private final ChatBoxBackground chatBoxBackground;
    @Getter
    @Setter
    private boolean uiCreated;
    @Getter
    @Setter
    private boolean isHandleKeybindPressed;

    @Inject
    UiManager(Client client, ResizableChatPlugin plugin) {
        this.client = client;
        this.plugin = plugin;
        resizingHandles.add(new ResizingHandles(ResizeType.VERTICAL, client, plugin));
        resizingHandles.add(new ResizingHandles(ResizeType.HORIZONTAL, client, plugin));
        chatBoxBackground = new ChatBoxBackground(client, plugin);
    }

    Widget getContainer() {
        return client.getWidget(InterfaceID.CHATBOX, 0).getParent();
    }

    public void shutDown() {
        reset();
    }

    public void reset() {
        uiCreated = false;
        plugin.resetChatbox();

        resizingHandles.forEach(b -> b.destroy(getContainer()));
        chatBoxBackground.destroy(getContainer());
    }

    public void onResizeableChanged() {
        reset();
    }


    public void create() {
        if (uiCreated || !client.isResized()) return;

        try {
            chatBoxBackground.create(getContainer());
            resizingHandles.forEach(handle -> handle.create(getContainer()));
            uiCreated = true;
        } catch (Exception e) {
            uiCreated = false;
        }
    }

    public void onChatBoxResized() {
        resizingHandles.forEach(ResizingHandles::onResize);
        chatBoxBackground.onResize();
    }

    public void onVarbitChanged() {
        resizingHandles.forEach(ResizingHandles::onVarbitChanged);

        boolean isTransparent = client.getVarbitValue(Varbits.TRANSPARENT_CHATBOX) == 1;
        chatBoxBackground.hideBorders(isTransparent);
    }

    public void hideResizingHandles(boolean state) {
        if (!uiCreated) return;

        resizingHandles.forEach(handle -> handle.setHidden(state));
    }

    public void updateHiddenState() {
        if (!uiCreated) return;

        resizingHandles.forEach(handle -> handle.getSlider().setHidden(handle.isHidden()));
    }

    public void setHidden(boolean hidden) {
        if (!uiCreated) return;

        hideResizingHandles(hidden);
        if (client.getVarbitValue(Varbits.TRANSPARENT_CHATBOX) == 0) {
            chatBoxBackground.hideBorders(hidden);
        }
    }
}

package dev.thource.runelite.resizablechat.ui.impl;

import com.google.inject.Singleton;
import dev.thource.runelite.resizablechat.CustomSprites;
import dev.thource.runelite.resizablechat.ResizableChatConfig;
import dev.thource.runelite.resizablechat.ResizableChatPlugin;
import dev.thource.runelite.resizablechat.ResizeType;
import dev.thource.runelite.resizablechat.ui.UI;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.api.ScriptEvent;
import net.runelite.api.Varbits;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.JavaScriptCallback;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetType;

/**
 * UI class for resize buttons.
 */
@Singleton
public class ResizingHandles extends UI {

    private final ResizeType type;
    private final Client client;
    private final ResizableChatConfig config;

    private final ResizableChatPlugin plugin;

    @Getter
    private Widget slider;
    private Widget tmp;
    private int buttonN = -1;
    private int buttonH = -1;
    @Getter @Setter private boolean isHidden;

    /**
     * Constructor for ResizeButtons.
     *
     * @param type   The type of resize (vertical or horizontal).
     * @param client The RuneLite client.
     * @param plugin The ResizableChatPlugin instance.
     */
    public ResizingHandles(ResizeType type, Client client, ResizableChatPlugin plugin) {
        this.type = type;
        this.client = client;
        this.config = plugin.getConfig();
        this.plugin = plugin;
    }

    /**
     * Create resize buttons.
     *
     * @param parent The parent widget.
     */
    @Override
    public void create(Widget parent) {
        Widget chatbox = client.getWidget(ComponentID.CHATBOX_FRAME);
        tmp = chatbox.createChild(-1, WidgetType.GRAPHIC);

        tmp.setOnDragListener((JavaScriptCallback) this::onDrag);
        tmp.setOnDragCompleteListener((JavaScriptCallback) this::onDraggingFinished);
        tmp.setOnDialogAbortListener((JavaScriptCallback) this::onDraggingFinished);
        tmp.setDragParent(chatbox);
        Point location = getButtonLocation();
        tmp.setPos(location.getX(), location.getY());
        tmp.setHasListener(true);

        slider = chatbox.createChild(-1, WidgetType.GRAPHIC);
        setSpriteIds();
        slider.setAction(0, "Resize " + type.getFormatName());
        slider.setAction(1, "Reset " + type.getFormatName());
        slider.setOnOpListener((JavaScriptCallback) this::onButtonClicked);
        slider.setPos(location.getX(), location.getY());
        slider.setOnMouseRepeatListener((JavaScriptCallback) e -> onHover());
        slider.setOnMouseLeaveListener((JavaScriptCallback) e -> onLeave());
        slider.setHasListener(true);
    }

    @Override
    public void destroy(Widget parent) {
        Widget chatbox = client.getWidget(ComponentID.CHATBOX_FRAME);
        Widget[] children = chatbox.getChildren();

        children[tmp.getIndex()] = null;
        children[slider.getIndex()] = null;
    }

    /**
     * Handles button click events.
     *
     * @param scriptEvent The script event.
     */
    public void onButtonClicked(ScriptEvent scriptEvent) {
        if (scriptEvent.getOp() != 2) {
            return;
        }

        String configKey = type == ResizeType.HORIZONTAL ? "chatWidth" : "chatHeight";
        int defaultValue = type == ResizeType.HORIZONTAL ? 519 : 142;
        plugin.configManager.setConfiguration(ResizableChatConfig.CONFIG_GROUP, configKey, defaultValue);
        onResize();
    }

    /**
     * Handles button click events.
     *
     * @param scriptEvent The script event.
     */
    public void onDraggingFinished(ScriptEvent scriptEvent) {
        if (slider.isHidden()) return;

        plugin.stopDragging();
        onResize();
    }

    /**
     * Handles button click events.
     *
     * @param scriptEvent The script event.
     */
    public void onDrag(ScriptEvent scriptEvent) {
        if (slider.isHidden()) return;

        plugin.startDragging(type == ResizeType.VERTICAL);
    }

    /**
     * Responds to varbit changes.
     */
    @Override
    public void onVarbitChanged() {
        setSpriteIds();
    }

    /**
     * Adjusts the position of the slider after a resize.
     */
    public void onResize() {
        Point location = getButtonLocation();
        slider.setPos(location.getX(), location.getY());
        tmp.setPos(location.getX(), location.getY());
    }

    public Point getButtonLocation() {
        boolean isOpaque = client.getVarbitValue(Varbits.TRANSPARENT_CHATBOX) == 0;

        Point location;
        if (type == ResizeType.VERTICAL) {
            if (isOpaque) {
                location = new Point(config.chatWidth() / 2 - 4, 0);
            } else {
                location = new Point(config.chatWidth() / 2 - 4, 3);
            }
        } else {
            if (isOpaque) {
                location = new Point(config.chatWidth() - 12, config.chatHeight() / 2 - 4);
            } else {
                location = new Point(config.chatWidth() - 8, config.chatHeight() / 2 - 4);
            }
        }
        return location;
    }

    private void onLeave() {
        slider.setSpriteId(buttonN);
    }

    private void onHover() {
        slider.setSpriteId(buttonH);
    }

    /**
     * Sets sprite IDs based on resize type and transparency.
     */
    private void setSpriteIds() {
        if (slider == null || tmp == null) {
            return;
        }

        boolean isOpaque = client.getVarbitValue(Varbits.TRANSPARENT_CHATBOX) == 0;
        if (type == ResizeType.VERTICAL) {
            buttonN = isOpaque ? CustomSprites.RESIZE_V_BROWN.getSpriteId() : CustomSprites.RESIZE_V.getSpriteId();
            buttonH = isOpaque ? CustomSprites.RESIZE_V_BROWN_H.getSpriteId() : CustomSprites.RESIZE_V_H.getSpriteId();
            slider.setOriginalWidth(9);
            slider.setOriginalHeight(16);
            tmp.setOriginalWidth(9);
            tmp.setOriginalHeight(16);
        } else {
            buttonN = isOpaque ? CustomSprites.RESIZE_H_BROWN.getSpriteId() : CustomSprites.RESIZE_H.getSpriteId();
            buttonH = isOpaque ? CustomSprites.RESIZE_H_BROWN_H.getSpriteId() : CustomSprites.RESIZE_H_H.getSpriteId();
            slider.setOriginalWidth(16);
            slider.setOriginalHeight(9);
            tmp.setOriginalWidth(16);
            tmp.setOriginalHeight(9);
        }
        slider.setSpriteId(buttonN);
    }
}

package dev.thource.runelite.resizablechat.ui.impl;

import com.google.inject.Singleton;
import dev.thource.runelite.resizablechat.CustomSprites;
import dev.thource.runelite.resizablechat.ResizableChatConfig;
import dev.thource.runelite.resizablechat.ResizableChatPlugin;
import dev.thource.runelite.resizablechat.ui.UI;
import net.runelite.api.Client;
import net.runelite.api.ScriptEvent;
import net.runelite.api.Varbits;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetType;

/**
 * UI class for ChatBoxBackground.
 */
@Singleton
public class ChatBoxBackground extends UI {

    static final int BORDER_SIZE = 32;

    private final Client client;
    private final ResizableChatConfig config;

    private Widget topLeftBrace;
    private Widget topRightBrace;
    private Widget bottomLeftBrace;
    private Widget bottomRightBrace;

    private Widget leftSide;
    private Widget topSide;
    private Widget rightSide;
    private Widget bottomSide;


    /**
     * Constructor for ChatBoxBackground.
     *
     * @param client The RuneLite client.
     * @param plugin The ResizableChatPlugin instance.
     */
    public ChatBoxBackground(Client client, ResizableChatPlugin plugin) {
        this.client = client;
        this.config = plugin.getConfig();
    }

    /**
     * Create resize buttons.
     *
     * @param parent The parent widget.
     */
    @Override
    public void create(Widget parent) {
        setupBackground();

        topLeftBrace = createSpriteWidget(BORDER_SIZE, BORDER_SIZE);
        topRightBrace = createSpriteWidget(BORDER_SIZE, BORDER_SIZE);
        bottomLeftBrace = createSpriteWidget(BORDER_SIZE, BORDER_SIZE);
        bottomRightBrace = createSpriteWidget(BORDER_SIZE, BORDER_SIZE);

        leftSide = createSpriteWidget(BORDER_SIZE, config.chatHeight() - BORDER_SIZE * 2);
        topSide = createSpriteWidget(config.chatWidth() - BORDER_SIZE * 2, BORDER_SIZE);
        rightSide = createSpriteWidget(BORDER_SIZE, config.chatHeight() - BORDER_SIZE * 2);
        bottomSide = createSpriteWidget(config.chatWidth() - BORDER_SIZE * 2, BORDER_SIZE);

        topLeftBrace.setSpriteId(958);
        topRightBrace.setSpriteId(959);
        bottomLeftBrace.setSpriteId(960);
        bottomRightBrace.setSpriteId(961);
        leftSide.setSpriteId(955);
        topSide.setSpriteId(954);
        rightSide.setSpriteId(957);
        bottomSide.setSpriteId(956);

        updateBox(config.chatWidth(), config.chatHeight() + 5);

        boolean isTransparent = client.getVarbitValue(Varbits.TRANSPARENT_CHATBOX) == 1;
        if (isTransparent) {
            hideBorders(true);
        }
    }

    @Override
    public void destroy(Widget parent) {
        Widget chatbox = client.getWidget(ComponentID.CHATBOX_FRAME);
        Widget[] children = chatbox.getChildren();

        children[topLeftBrace.getIndex()] = null;
        children[topRightBrace.getIndex()] = null;
        children[bottomLeftBrace.getIndex()] = null;
        children[bottomRightBrace.getIndex()] = null;
        children[leftSide.getIndex()] = null;
        children[topSide.getIndex()] = null;
        children[rightSide.getIndex()] = null;
        children[bottomSide.getIndex()] = null;
    }

    private void updateBox(int width, int height) {
        int x = 0;
        int y = 4;

        setupBackground();

        setSize(topLeftBrace, BORDER_SIZE, BORDER_SIZE);
        setSize(topRightBrace, BORDER_SIZE, BORDER_SIZE);
        setSize(bottomLeftBrace, BORDER_SIZE, BORDER_SIZE);
        setSize(bottomRightBrace, BORDER_SIZE, BORDER_SIZE);

        setSize(leftSide, BORDER_SIZE, Math.max(0, height - BORDER_SIZE * 2));
        setSize(topSide, width - BORDER_SIZE * 2, BORDER_SIZE);
        setSize(rightSide, BORDER_SIZE, Math.max(0, height - BORDER_SIZE * 2));
        setSize(bottomSide, width - BORDER_SIZE * 2, BORDER_SIZE);

        layoutWidget(topLeftBrace, x, y);
        layoutWidget(topRightBrace, x + width - BORDER_SIZE, y);
        layoutWidget(bottomLeftBrace, x, y + height - BORDER_SIZE);
        layoutWidget(bottomRightBrace, x + width - BORDER_SIZE, y + height - BORDER_SIZE);

        layoutWidget(leftSide, x, y + BORDER_SIZE);
        layoutWidget(topSide, x + BORDER_SIZE, y);
        layoutWidget(rightSide, x + width - BORDER_SIZE, y + BORDER_SIZE);
        layoutWidget(bottomSide, x + BORDER_SIZE, y + height - BORDER_SIZE);

        if (leftSide.getOriginalHeight() == 0) {
            leftSide.setHidden(true);
            rightSide.setHidden(true);
        } else {
            boolean isTransparent = client.getVarbitValue(Varbits.TRANSPARENT_CHATBOX) == 1;
            leftSide.setHidden(isTransparent);
            rightSide.setHidden(isTransparent);
        }
    }

    public void setupBackground() {
        Widget w = client.getWidget(ComponentID.CHATBOX_TRANSPARENT_BACKGROUND);

        Widget child = w.getChild(0);
        // These are deprecated but using originalY and originalWidth/Height doesn't work for this one?
        child.setRelativeY(4);
        child.setSpriteId(CustomSprites.BACKGROUND.getSpriteId());
        child.setWidth(config.chatWidth());
        child.setHeight(config.chatHeight());
        child.setSpriteTiling(true);
    }

    public void hideBorders(boolean state) {
        if (topLeftBrace == null) {
            return;
        }

        topLeftBrace.setHidden(state);
        topRightBrace.setHidden(state);
        bottomLeftBrace.setHidden(state);
        bottomRightBrace.setHidden(state);
        leftSide.setHidden(leftSide.getOriginalHeight() == 0 || state);
        topSide.setHidden(state);
        rightSide.setHidden(leftSide.getOriginalHeight() == 0 || state);
        bottomSide.setHidden(state);
    }


    protected void layoutWidget(Widget w, int x, int y) {
        w.setOriginalX(x);
        w.setOriginalY(y);
        w.revalidate();
    }

    protected void setSize(Widget w, int width, int height) {
        w.setOriginalWidth(width);
        w.setOriginalHeight(height);
    }

    protected Widget createSpriteWidget(int width, int height) {
        Widget chatbox = client.getWidget(ComponentID.CHATBOX_FRAME);

        final Widget w = chatbox.createChild(-1, WidgetType.GRAPHIC);
        w.setOriginalWidth(width);
        w.setOriginalHeight(height);
        w.setSpriteTiling(true);
        return w;
    }

    @Override
    protected void onButtonClicked(ScriptEvent scriptEvent) {
        // do nothing
    }

    @Override
    protected void onVarbitChanged() {
        // do nothing
    }

    public void onResize() {
        updateBox(config.chatWidth(), config.chatHeight() + 5);
    }
}

package dev.thource.runelite.resizablechat.ui;

import net.runelite.api.ScriptEvent;
import net.runelite.api.widgets.Widget;

public abstract class UI {
    protected abstract void create(Widget parent);

    protected abstract void destroy(Widget parent);

    protected abstract void onButtonClicked(ScriptEvent scriptEvent);

    protected abstract void onVarbitChanged();

}

