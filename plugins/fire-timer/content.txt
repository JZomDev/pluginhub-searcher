package com.firetimer;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class FireTimerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(FireTimerPlugin.class);
		RuneLite.main(args);
	}
}
package com.firetimer;

import com.google.inject.Provides;
import javax.inject.Inject;
import java.util.HashMap;
import java.util.Map;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameObjectDespawned;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Fire Timer"
)
public class FireTimerPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private FireTimerOverlay fireTimerOverlay;

	@Getter(AccessLevel.PACKAGE)
	private long lastTrueTickUpdate;

	@Getter(AccessLevel.PACKAGE)
	private Map<Long, FireTimeLocation> fireIds;

	@Override
	protected void startUp() throws Exception
	{
		this.fireIds = new HashMap<>();
		this.overlayManager.add(this.fireTimerOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		this.fireIds.clear();
		this.overlayManager.remove(this.fireTimerOverlay);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		if (event.getGameState() == GameState.LOGIN_SCREEN ||
				event.getGameState() == GameState.HOPPING)
		{
			this.fireIds.clear();
		}
	}

	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned objectSpawned) {
		if (objectSpawned.getGameObject().getId() == ObjectID.FIRE_26185) {
			this.fireIds.putIfAbsent(objectSpawned.getGameObject().getHash(),
					new FireTimeLocation(
							objectSpawned.getGameObject(),
							objectSpawned.getGameObject().getWorldLocation(),
							0,
							this.lastTrueTickUpdate
					)
			);
		}
	}

	@Subscribe
	public void onGameObjectDespawned(GameObjectDespawned objectDespawned) {
		if (objectDespawned.getGameObject().getId() == ObjectID.FIRE_26185) {
			this.fireIds.remove(objectDespawned.getGameObject().getHash());
		}
	}

	@Subscribe
	public void onGameTick(GameTick change) {
		this.lastTrueTickUpdate = this.client.getTickCount();

		this.fireIds.forEach((fireIdHash, fireTimeLocation) ->
						fireTimeLocation.setTicksSinceFireLit(
								this.lastTrueTickUpdate - fireTimeLocation.getTickFireStarted()));
	}

	@Provides
	FireTimerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(FireTimerConfig.class);
	}
}

package com.firetimer;

import net.runelite.api.Point;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

import java.awt.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import javax.inject.Inject;


public class FireTimerOverlay extends Overlay {
    private final FireTimerPlugin plugin;
    private final FireTimerConfig config;

    NumberFormat format = new DecimalFormat("#");

    final int FIRE_MAX_TICKS = 200;
    final int FIRE_MIN_TICKS = 100;

    @Inject
    FireTimerOverlay(FireTimerPlugin plugin, FireTimerConfig config)
    {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        this.plugin = plugin;
        this.config = config;
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        this.plugin.getFireIds().forEach((fireIdHash, fireTimeLocation) -> renderTimer(fireTimeLocation, graphics));
        return null;
    }

    private void renderTimer(final FireTimeLocation fireTimeLocation, final Graphics2D graphics)
    {
        double timeLeft = this.FIRE_MAX_TICKS - fireTimeLocation.getTicksSinceFireLit();

        Color timerColor = this.config.normalTimerColor();

        if (timeLeft < 0)
        {
            timeLeft = 0;
        }

        if (timeLeft <= this.FIRE_MIN_TICKS)
        {
            timerColor = this.config.lowTimerColor();
        }

        String timeLeftString = String.valueOf(format.format(timeLeft));

        final Point canvasPoint = fireTimeLocation.getFire().getCanvasTextLocation(graphics, timeLeftString, 40);

        if (canvasPoint != null && (timeLeft >= 0))
        {
            OverlayUtil.renderTextLocation(graphics, canvasPoint, timeLeftString, timerColor);
        }
    }
}

package com.firetimer;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.GameObject;
import net.runelite.api.coords.WorldPoint;

@AllArgsConstructor
@Getter
@Setter
public class FireTimeLocation {
    private GameObject fire;
    private final WorldPoint worldPoint;
    private long ticksSinceFireLit;
    private long tickFireStarted;
}

package com.firetimer;

import java.awt.Color;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("firetimer")
public interface FireTimerConfig extends Config
{
	@Alpha
	@ConfigItem(
			position = 2,
			keyName = "normalTimerColor",
			name = "Normal timer color",
			description = "Configures the color of the timer"
	)
	default Color normalTimerColor()
	{
		return Color.WHITE;
	}

	@Alpha
	@ConfigItem(
			position = 3,
			keyName = "lowTimerColor",
			name = "Low timer color",
			description = "Configures the color of the timer when remaining time is low"
	)
	default Color lowTimerColor()
	{
		return Color.RED;
	}

}

