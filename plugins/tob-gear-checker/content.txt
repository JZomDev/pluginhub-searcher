package com.tobgearchecker;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ToBGearCheckerTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ToBGearCheckerPlugin.class);
		RuneLite.main(args);
	}
}
package com.tobgearchecker;

import com.tobgearchecker.gear.HaveCharges;
import com.tobgearchecker.gear.HaveRunes;
import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;

import java.util.*;

@Slf4j
@PluginDescriptor(
	name = "ToB Gear Checker",
	description = "A plugin that checks your spellbook, runes, and charges.",
	tags = {"tob","gear","rune","spellbook","spells","charges"}
)
public class ToBGearCheckerPlugin extends Plugin
{
	private ToBGearCheckerOverlayPanel gearCheckerOverlayPanel = null;
	public boolean leftVersinhaza = true;

	public HaveCharges charges = new HaveCharges();
	public HaveRunes runes = new HaveRunes();

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private Client client;

	@Inject
	private ToBGearCheckerConfig config;

	@Getter(AccessLevel.PACKAGE)
	private NavigationButton navButton;

	@Override
	protected void startUp()
	{

		gearCheckerOverlayPanel = new ToBGearCheckerOverlayPanel(this, true, ""
		);

	}

	@Subscribe
	public void onChatMessage(ChatMessage event) {
		if(!isInVersinhaza()) {
			return;
		}
		if(event.getType() != ChatMessageType.GAMEMESSAGE && event.getType() != ChatMessageType.SPAM) {
			return;
		}

		String message = Text.removeTags(event.getMessage());

		String[] words = message.split(" ");

		// For blowpipe, there will be three numbers: # of Darts, # of Scales, and % of Scales
		// ^ Exception if player is out of scales or darts.
		// For serp, there will be two numbers: # of Scales, and % of Scales
		// For scythe/trident, there will be one number: # of Charges
		ArrayList<Integer> numbers = new ArrayList<>();

		for(String numericWord : words) {
			numericWord = numericWord.replaceAll("[^\\d]","");
			if(numericWord.length() > 0) {
				numbers.add(Integer.parseInt(numericWord));
			}
 		}

		if(config.blowpipe() && message.toLowerCase().contains("darts") && message.toLowerCase().contains("scales")) {
			boolean hasDarts = true;
			if(words[1].equalsIgnoreCase("none")) {
				hasDarts = false;
				charges.blowpipeDarts = 0;
			} else {
				charges.blowpipeDarts = numbers.get(0);
			}
			charges.blowpipeScales = numbers.get(hasDarts ? 1 : 0);
			charges.blowpipeDartType = words[1];
		} else if(config.scythe() && message.toLowerCase().contains("scythe of vitur")) {
			if(numbers.size() == 0) {
				//NO charges, I assume (not sure what message it gives)
				charges.scytheCharges = 0;
			} else {
				charges.scytheCharges = numbers.get(0);
			}
		} else if(config.serpentine() && message.toLowerCase().contains("scales:") && !message.toLowerCase().contains("darts")) {
			charges.serpentineScales = numbers.get(0);
		} else if (config.trident() && (message.toLowerCase().contains("your weapon has") || message.toLowerCase().contains("sanguinesti staff")) && message.contains("charges")) {
			charges.tridentCharges = numbers.get(0);
		}
	}

	@Override
	protected void shutDown()
	{
		if(gearCheckerOverlayPanel.isVisible()) {
			overlayManager.remove(gearCheckerOverlayPanel);
			gearCheckerOverlayPanel.setVisible(false);
		}
	}

	@Subscribe
	public void onGameTick(GameTick event) {
		if(!isInVersinhaza()) {
			//if we're just leaving
			if(!leftVersinhaza) {
				//Reset charges upon leaving
				charges = new HaveCharges();
			}
			leftVersinhaza = true;
		}
		if(isInVersinhaza()) {
			runes = getPlayerRunes();
			leftVersinhaza = false;
		}
		updateInfoBox();
	}

	private HaveRunes getPlayerRunes() {
		HaveRunes output = new HaveRunes();
		int[] runePouch = new int[22];
		ItemContainer container = client.getItemContainer(InventoryID.INVENTORY);

		output.spellbook = Spellbook.getSpellbookByID(client.getVarbitValue(4070));

		runePouch[client.getVar(Varbits.RUNE_POUCH_RUNE1)] = client.getVar(Varbits.RUNE_POUCH_AMOUNT1);
		runePouch[client.getVar(Varbits.RUNE_POUCH_RUNE2)] = client.getVar(Varbits.RUNE_POUCH_AMOUNT2);
		runePouch[client.getVar(Varbits.RUNE_POUCH_RUNE3)] = client.getVar(Varbits.RUNE_POUCH_AMOUNT3);
		output.runeAmounts = runePouch;
		output.runePouch = false;

		if(container == null) {
			return output;
		}
		Item[] items = container.getItems();
		for (Item item : items) {
			if (item == null) {
				continue;
			}
			if (item.getId() == ItemID.RUNE_POUCH) {
				output.runePouch = true;
				continue;
			}
			for (Runes rune : Runes.values()) {
				if (item.getId() == rune.itemID) {
					output.runeAmounts[rune.runePouchID] += item.getQuantity();
				}
			}
		}
		return output;
	}


	@Provides
	ToBGearCheckerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ToBGearCheckerConfig.class);
	}

	public boolean isInVersinhaza() {
		Player localPlayer = client.getLocalPlayer();
		if(localPlayer == null) {
			return false;
		}
		return localPlayer.getWorldLocation().getRegionID() == 14642;
	}

	private void updateInfoBox() {
		if(!isInVersinhaza() && gearCheckerOverlayPanel.isVisible()) {
			overlayManager.remove(gearCheckerOverlayPanel);
			gearCheckerOverlayPanel.setVisible(false);
		} else if(isInVersinhaza() && !gearCheckerOverlayPanel.isVisible()) {
			overlayManager.add(gearCheckerOverlayPanel);
			gearCheckerOverlayPanel.setVisible(true);
		}
		if(!isInVersinhaza()) {
			return;
		}
		String output;
		String runeIssues = runes.getReadableIssues(config);
		String chargeIssues = charges.getReadableIssues(config);

		if(runeIssues.equals("")) {
			output = chargeIssues;
		} else if(chargeIssues.equals("")) {
			output = runeIssues;
		} else {
			output = runeIssues + "\n\n" + chargeIssues;
		}
		if(runeIssues.length() + chargeIssues.length() == 0) {
			gearCheckerOverlayPanel.SetProblems(true,"");
		} else {
			gearCheckerOverlayPanel.SetProblems(false,output);
		}
	}
}

package com.tobgearchecker;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Getter;


@AllArgsConstructor
public enum Spellbook {
    NONE("None",-1),
    STANDARD("Standard",0),
    ANCIENT("Ancient",1),
    LUNAR("Lunar",2),
    ARCEUUS("Arceuus",3);

    private final String name;
    @Getter(AccessLevel.PUBLIC)
    private final int id;

    public static Spellbook getSpellbookByID(int id) {
        for(int i = 0; i < Spellbook.values().length; i++) {
            if(Spellbook.values()[i].id == id) {
                return Spellbook.values()[i];
            }
        }
        return Spellbook.NONE;
    }

    public String toString() {
        return this.name;
    }

}

package com.tobgearchecker;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("tobgearchecker")
public interface ToBGearCheckerConfig extends Config
{
	@ConfigSection(
			name = "Spell Checks",
			description = "Checks for the player's spellbook and runes",
			position = 0
	)
	String spellSection = "spell";

	@ConfigSection(
			name = "Blowpipe Checks",
			description = "Checks for the blowpipe's scales and darts",
			position = 1
	)
	String blowpipeSection = "blowpipe";

	@ConfigSection(
			name = "Charges",
			description = "Weapon charge checks",
			position = 2
	)
	String chargeSection = "charges";

	@ConfigItem(
			keyName = "targetRuneSet",
			name = "Target Rune Set",
			description = "The types of runes to aim for",
			section = spellSection
	)
	default RuneSets targetRuneSet() {
		return RuneSets.NONE;
	}

	@ConfigItem(
			keyName = "runeAmounts",
			name = "Amount of Runes (Each)",
			description = "The number of each rune to aim for",
			section=spellSection
	)
	default int runeAmounts() {
		return 2000;
	}

	@ConfigItem(
			keyName = "blowpipe",
			name = "Check Blowpipe Scales/Darts",
			description = "Whether or not to check the blowpipe",
			section=blowpipeSection
	)
	default boolean blowpipe() {
		return false;
	}

	@ConfigItem(
			keyName = "targetScales",
			name = "Target Scales",
			description = "How many scales to aim for",
			section = blowpipeSection
	)
	default int blowpipeScaleAmounts() {
		return 5000;
	}


	@ConfigItem(
			keyName = "targetDarts",
			name = "Target Darts",
			description = "How many darts to aim for",
			section = blowpipeSection
	)
	default int blowpipeDartAmounts() {
		return 5000;
	}

	@ConfigItem(
			keyName = "dartType",
			name = "Dart Type",
			description = "Type of dart to aim for",
			section = blowpipeSection
	)
	default DartType blowpipeDartType() {
		return DartType.DRAGON;
	}

	@ConfigItem(
			keyName = "serp",
			name = "Check Serp",
			description = "Whether or not to check the serpentine helmet",
			section=chargeSection
	)
	default boolean serpentine() {
		return false;
	}

	@ConfigItem(
			keyName = "serpScales",
			name = "Serp Scales",
			description = "The amount of scales to aim for in the serpentine helmet",
			section=chargeSection
	)
	default int serpentineAmount() {
		return 2000;
	}

	@ConfigItem(
			keyName = "trident",
			name = "Check Trident/Sang",
			description = "Whether or not to check the trident or sang staffs",
			section=chargeSection
	)
	default boolean trident() {
		return false;
	}

	@ConfigItem(
			keyName = "tridentCharges",
			name = "Trident/Sang Charges",
			description = "The amount of charges to aim for in the trident or sang staffs",
			section=chargeSection
	)
	default int tridentAmount() {
		return 1000;
	}

	@ConfigItem(
			keyName = "scythe",
			name = "Check Scythe",
			description = "Whether or not to check the scythe",
			section=chargeSection
	)
	default boolean scythe() {
		return false;
	}

	@ConfigItem(
			keyName = "scytheCharges",
			name = "Scythe Charges",
			description = "The amount of charges to aim for in the scythe",
			section=chargeSection
	)
	default int scytheAmount() {
		return 600;
	}
}

package com.tobgearchecker;

public enum DartType {
    MITHRIL("Mithril"),
    ADAMANT("Adamant"),
    RUNE("Rune"),
    AMETHYST("Amethyst"),
    DRAGON("Dragon");

    private final String name;

    public String toString() {
        return name;
    }
    DartType(String name) {
        this.name = name;
    }
}

package com.tobgearchecker.gear;

import com.tobgearchecker.ToBGearCheckerConfig;
import com.tobgearchecker.RuneSets;

public class HaveCharges {
    public String blowpipeDartType = "";
    public int blowpipeDarts = -1;
    public int blowpipeScales = -1;
    public int serpentineScales = -1;
    public int scytheCharges = -1;
    public int tridentCharges = -1;

    public RuneSets set;

    public HaveCharges() {

    }

    public HaveCharges(String blowpipeDartType, int blowpipeDarts, int blowpipeScales, int serpentineScales, int scytheCharges, int tridentCharges) {
        this.blowpipeDartType = blowpipeDartType;
        this.blowpipeDarts = blowpipeDarts;
        this.blowpipeScales = blowpipeScales;
        this.serpentineScales = serpentineScales;
        this.scytheCharges = scytheCharges;
        this.tridentCharges = tridentCharges;
    }

    public String getReadableIssues(ToBGearCheckerConfig config) {
        StringBuilder output = new StringBuilder();
        if(config.blowpipe()) {
            if(blowpipeDartType.equals("") || blowpipeDarts == -1 || blowpipeScales == -1) {
                output.append("Please check charges on your blowpipe\n");
            } else {
                if (!blowpipeDartType.equals(config.blowpipeDartType().toString()) && blowpipeDarts > 0) {
                    output.append(blowpipeDartType).append(" instead of ").append(config.blowpipeDartType()).append(" blowpipe darts\n");
                }
                if (blowpipeDarts < config.blowpipeDartAmounts()) {
                    output.append(blowpipeDarts).append("/").append(config.blowpipeDartAmounts()).append(" blowpipe darts\n");
                }
                if (blowpipeScales < config.blowpipeScaleAmounts()) {
                    output.append(blowpipeScales).append("/").append(config.blowpipeScaleAmounts()).append(" blowpipe scales\n");
                }
            }
        }
        if(config.serpentine()) {
            if(serpentineScales == -1) {
                output.append("Please check charges on your serpentine\n");
            } else if (serpentineScales < config.serpentineAmount()) {
                output.append(serpentineScales).append("/").append(config.serpentineAmount()).append(" serpentine scales\n");
            }
        }
        if(config.trident()) {
            if(tridentCharges == -1) {
                output.append("Please check charges on your trident\n");
            } else if(tridentCharges < config.tridentAmount()) {
                output.append(tridentCharges).append("/").append(config.tridentAmount()).append(" trident charges\n");
            }
        }
        if(config.scythe()) {
            if(scytheCharges == -1) {
                output.append("Please check charges on your scythe\n");
            } else if(scytheCharges < config.scytheAmount()) {
                output.append(scytheCharges).append("/").append(config.scytheAmount()).append(" scythe charges\n");
            }
        }
        return output.toString();
    }
}

package com.tobgearchecker.gear;

import com.tobgearchecker.ToBGearCheckerConfig;
import com.tobgearchecker.RuneSets;
import com.tobgearchecker.Runes;
import com.tobgearchecker.Spellbook;

public class HaveRunes {
    public boolean runePouch = false;
    public int[] runeAmounts = new int[22];
    public Spellbook spellbook = Spellbook.NONE;

    public HaveRunes() {

    }

    public String getReadableIssues(ToBGearCheckerConfig config) {
        StringBuilder output = new StringBuilder();
        if(config.targetRuneSet() != RuneSets.NONE) {
            if (spellbook.getId() != config.targetRuneSet().getSpellbook().getId()) {
                output.append("Wrong spellbook (Need ").append(config.targetRuneSet().getSpellbook().toString()).append(")\n");
            }
            if(!runePouch) {
                output.append("No rune pouch\n");
            }
            boolean foundAny = false;
            for (int i = 0; i < config.targetRuneSet().getRunes().length; i++) {
                Runes rune = config.targetRuneSet().getRunes()[i];
                if (runeAmounts[rune.getRunePouchID()] <= config.runeAmounts()) {
                    output.append(foundAny ? "\n" : "").append(runeAmounts[rune.getRunePouchID()]).append("/").append(config.runeAmounts()).append(" ").append(rune.name().substring(0, 1).toUpperCase()).append(rune.name().substring(1).toLowerCase()).append(" runes");
                    foundAny = true;
                }
            }
        }
        return output.toString();
    }
}

package com.tobgearchecker;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
public enum RuneSets {
    NONE("None",new Runes[]{},Spellbook.NONE),
    FREEZESWATER("No-Kodai Freezes",new Runes[]{Runes.WATER,Runes.SOUL,Runes.BLOOD,Runes.DEATH},Spellbook.ANCIENT),
    FREEZES("Freezes",new Runes[]{Runes.SOUL,Runes.BLOOD,Runes.DEATH},Spellbook.ANCIENT),
    POTSHARE("Pot Share/Venge",new Runes[]{Runes.MUD,Runes.DEATH,Runes.ASTRAL},Spellbook.LUNAR),
    THRALLS("Thralls",new Runes[]{Runes.FIRE,Runes.BLOOD,Runes.COSMIC},Spellbook.ARCEUUS);


    private final String name;
    @Getter(AccessLevel.PUBLIC)
    private final Runes[] runes;
    @Getter(AccessLevel.PUBLIC)
    private final Spellbook spellbook;

    public String toString() {
        return name;
    }
}

package com.tobgearchecker;

import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import javax.inject.Inject;
import java.awt.*;

public class ToBGearCheckerOverlayPanel extends OverlayPanel {
    private boolean visible = false;

    private boolean everythingGood;
    private String problems;

    @Inject
    public ToBGearCheckerOverlayPanel(ToBGearCheckerPlugin plugin, boolean everythingGood, String problems) {
        super(plugin);

        this.everythingGood = everythingGood;
        this.problems = problems;
        setPriority(OverlayPriority.MED);
        setPosition(OverlayPosition.TOP_CENTER);
    }

    @Override
    public Dimension render(Graphics2D graphics) {

        panelComponent.getChildren().add(TitleComponent.builder()
                .text(everythingGood ? "You are ready for ToB!" : "ToB Setup Issues!")
                .color(everythingGood ? Color.GREEN : Color.RED)
                .build());

        if(!everythingGood) {
            String[] spaced = problems.split("\n");
            for (int i = 0; i < spaced.length; i++) {
                panelComponent.getChildren().add(
                        LineComponent
                                .builder()
                                .left(spaced[i])
                                .leftColor(spaced[i].contains("Please") ? (i % 2 == 0 ? Color.WHITE : Color.GRAY) : (i % 2 == 0 ? Color.ORANGE : Color.YELLOW))
                                .build());
            }
        }

        return super.render(graphics);
    }

    public void SetProblems(boolean everythingGood, String problems) {
        this.everythingGood = everythingGood;
        this.problems = problems;
    }

    public void setVisible(boolean isVisible)
    {
        this.visible = isVisible;
    }

    public boolean isVisible()
    {
        return this.visible;
    }

}

package com.tobgearchecker;

import static net.runelite.api.ItemID.AIR_RUNE;
import static net.runelite.api.ItemID.ASTRAL_RUNE;
import static net.runelite.api.ItemID.BLOOD_RUNE;
import static net.runelite.api.ItemID.BODY_RUNE;
import static net.runelite.api.ItemID.CHAOS_RUNE;
import static net.runelite.api.ItemID.COSMIC_RUNE;
import static net.runelite.api.ItemID.DEATH_RUNE;
import static net.runelite.api.ItemID.DUST_RUNE;
import static net.runelite.api.ItemID.EARTH_RUNE;
import static net.runelite.api.ItemID.FIRE_RUNE;
import static net.runelite.api.ItemID.LAVA_RUNE;
import static net.runelite.api.ItemID.LAW_RUNE;
import static net.runelite.api.ItemID.MIND_RUNE;
import static net.runelite.api.ItemID.MIST_RUNE;
import static net.runelite.api.ItemID.MUD_RUNE;
import static net.runelite.api.ItemID.NATURE_RUNE;
import static net.runelite.api.ItemID.SMOKE_RUNE;
import static net.runelite.api.ItemID.SOUL_RUNE;
import static net.runelite.api.ItemID.STEAM_RUNE;
import static net.runelite.api.ItemID.WATER_RUNE;
import static net.runelite.api.ItemID.WRATH_RUNE;

public enum Runes {
    NONE(0, 0),
    AIR(1, AIR_RUNE),
    WATER(2, WATER_RUNE),
    EARTH(3, EARTH_RUNE),
    FIRE(4, FIRE_RUNE),
    MIND(5, MIND_RUNE),
    CHAOS(6, CHAOS_RUNE),
    DEATH(7, DEATH_RUNE),
    BLOOD(8, BLOOD_RUNE),
    COSMIC(9, COSMIC_RUNE),
    NATURE(10, NATURE_RUNE),
    LAW(11, LAW_RUNE),
    BODY(12, BODY_RUNE),
    SOUL(13, SOUL_RUNE),
    ASTRAL(14, ASTRAL_RUNE),
    MIST(15, MIST_RUNE),
    MUD(16, MUD_RUNE),
    DUST(17, DUST_RUNE),
    LAVA(18, LAVA_RUNE),
    STEAM(19, STEAM_RUNE),
    SMOKE(20, SMOKE_RUNE),
    WRATH(21, WRATH_RUNE);

    int runePouchID;
    int itemID;

    public int getRunePouchID() {
        return runePouchID;
    }

    Runes(int runePouchID, int itemID) {
        this.runePouchID = runePouchID;
        this.itemID = itemID;
    }
}

