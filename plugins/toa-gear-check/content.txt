package com.toagearcheck;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ToAGearCheckPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ToAGearCheckPlugin.class);
		RuneLite.main(args);
	}
}
package com.toagearcheck;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ItemComposition;
import net.runelite.api.Player;
import net.runelite.api.PlayerComposition;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.WidgetClosed;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.kit.KitType;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

import javax.imageio.ImageIO;
import javax.inject.Inject;
import javax.swing.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Stream;

@Slf4j
@PluginDescriptor(
		name = "ToA Party Gear Checker",
		description = "Checks gear of party applicants",
		tags = {"toa", "raids3", "tombs of amascut"}
)
public class ToAGearCheckPlugin extends Plugin
{
	@Inject
	private Client client;
	
	@Inject
	private ClientToolbar pluginToolbar;
	
	@Inject
	private ClientThread clientThread;
	
	@Inject
	private ItemManager itemManager;
	
	private static final int PartyApplicantWidgetGroup = 774;
	private static final int PartyApplicantWidgetChild = 48;
	
	private NavigationButton navButton;
	
	private boolean navButtonAdded = false;
	private boolean checkingApplicants = false;
	private ToaGearCheckPanel toaGearCheckPanel;
	
	@Override
	protected void startUp() throws Exception
	{
		toaGearCheckPanel = injector.getInstance(ToaGearCheckPanel.class);
		
		BufferedImage icon = ImageUtil.loadImageResource(ToAGearCheckPlugin.class, "panelimage.png");
		
		navButton = NavigationButton.builder()
				.tooltip("ToA Party Gear Checker")
				.icon(icon)
				.priority(10)
				.panel(toaGearCheckPanel)
				.build();
	}
	
	@Override
	protected void shutDown() throws Exception
	{
		pluginToolbar.removeNavigation(navButton);
	}
	
	@Subscribe
	private void onWidgetLoaded(WidgetLoaded event)
	{
		if (event.getGroupId() == PartyApplicantWidgetGroup)
		{
			checkingApplicants = true;
			refreshPanel();
			if (navButtonAdded)
			{
				SwingUtilities.invokeLater(() -> pluginToolbar.openPanel(navButton));
			}
		}
	}
	
	@Subscribe
	private void onWidgetClosed(WidgetClosed event)
	{
		if (event.getGroupId() == PartyApplicantWidgetGroup)
		{
			checkingApplicants = false;
		}
	}
	
	@Subscribe
	private void onGameTick(GameTick event)
	{
		Player lp = client.getLocalPlayer();
		boolean inRegion = lp != null && lp.getWorldLocation().getRegionID() == 13454;
		
		if (inRegion && !navButtonAdded)
		{
			pluginToolbar.addNavigation(navButton);
		}
		else if (!inRegion)
		{
			pluginToolbar.removeNavigation(navButton);
		}
		
		navButtonAdded = inRegion;
		
		refreshPanel();
	}
	
	public void refreshPanel()
	{
		if (!checkingApplicants)
		{
			return;
		}
		
		Widget[] partyApplicantWidget = client.getWidget(ToAGearCheckPlugin.PartyApplicantWidgetGroup, ToAGearCheckPlugin.PartyApplicantWidgetChild).getChildren();
		
		if (partyApplicantWidget == null) //Shouldn't ever be null
		{
			return;
		}
		
		Stream<Widget> partyApplicantWidgetChildren = Arrays.stream(partyApplicantWidget).filter(x -> x.getOriginalWidth() == 114 && x.getOriginalHeight() == 22); //Easiest way to filter out the widget containing the player name
		List<String> playerListStr = new ArrayList<>();
		HashMap<Player, List<ItemComposition>> playerList = new HashMap<>();
		
		partyApplicantWidgetChildren.forEach(widget ->
		{
			playerListStr.add(widget.getText());
		});
		
		for (Player player : client.getPlayers())
		{
			if (!playerListStr.contains(player.getName()))
			{
				continue;
			}
			List<ItemComposition> listOfEquipment = new ArrayList<>();
			PlayerComposition playerComposition = player.getPlayerComposition();
			for (KitType kitType : KitType.values())
			{
				if (playerComposition.getEquipmentId(kitType) == -1)
				{
					continue;
				}
				clientThread.invoke(() ->
				{
					listOfEquipment.add(itemManager.getItemComposition(playerComposition.getEquipmentId(kitType)));
				});
			}
			playerList.put(player, listOfEquipment);
		}
		toaGearCheckPanel.updatePanel(playerList);
	}
}

package com.toagearcheck;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ItemComposition;
import net.runelite.api.Player;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.util.AsyncBufferedImage;

import javax.inject.Inject;
import javax.inject.Singleton;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Slf4j
@Singleton
public class ToaGearCheckPanel extends PluginPanel
{
	@Inject
	private Client client;
	@Inject
	private ItemManager itemManager;
	
	private final JTabbedPane partyTabs;
	
	public ToaGearCheckPanel()
	{
		GroupLayout layout = new GroupLayout(this);
		setLayout(layout);
		setBorder(new EmptyBorder(0, 0, 0, 0));
		setBackground(ColorScheme.DARK_GRAY_COLOR);
		
		JPanel partyApplicants = new JPanel(new GridBagLayout());
		partyTabs = new JTabbedPane();
		
		GridBagConstraints tabConstraints = new GridBagConstraints();
		tabConstraints.fill = GridBagConstraints.BOTH;
		tabConstraints.weightx = 1;
		tabConstraints.weighty = 1;
		
		partyApplicants.add(partyTabs, tabConstraints);
		
		layout.setHorizontalGroup(layout.createParallelGroup()
				.addComponent(partyApplicants)
		);
		layout.setVerticalGroup(layout.createSequentialGroup()
				.addComponent(partyApplicants)
		);
	}
	
	
	public void updatePanel(HashMap<Player, List<ItemComposition>> playerList)
	{
		SwingUtilities.invokeLater(() ->
		{
			String lastUserSelected = "";
			
			if (partyTabs.getSelectedIndex() != -1)
			{
				lastUserSelected = partyTabs.getTitleAt(partyTabs.getSelectedIndex());
			}
			
			partyTabs.removeAll();
			
			if (playerList.size() == 0)
			{
				return;
			}
			
			for (Map.Entry<Player, List<ItemComposition>> player : playerList.entrySet())
			{
				JPanel equipmentPanels = new JPanel(new GridBagLayout());
				GridBagConstraints c = new GridBagConstraints();
				c.fill = GridBagConstraints.HORIZONTAL;
				c.weightx = 1;
				c.gridx = 0;
				c.gridy = 0;
				
				for (ItemComposition itemComposition : player.getValue())
				{
					AsyncBufferedImage itemImage = itemManager.getImage(itemComposition.getId());
					equipmentPanels.add(new ItemPanel(itemComposition, itemImage), c);
					c.gridy++;
				}
				partyTabs.addTab(player.getKey().getName(), equipmentPanels);
				
				if (player.getKey().getName().equals(lastUserSelected))
				{
					partyTabs.setSelectedComponent(equipmentPanels);
				}
			}
			
			repaint();
			revalidate();
		});
	}
}

//Borrowed from https://github.com/botanicvelious/Equipment-Inspector/blob/master/src/main/java/equipmentinspector/ItemPanel.java
package com.toagearcheck;

import net.runelite.api.ItemComposition;
import net.runelite.api.kit.KitType;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.util.AsyncBufferedImage;
import org.apache.commons.lang3.StringUtils;

import javax.swing.GroupLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

public class ItemPanel extends JPanel
{
	ItemPanel(ItemComposition item, AsyncBufferedImage icon)
	{
		setBorder(new EmptyBorder(3, 3, 3, 3));
		setBackground(ColorScheme.DARK_GRAY_COLOR);
		
		GroupLayout layout = new GroupLayout(this);
		this.setLayout(layout);
		
		JLabel name = new JLabel(item.getName());
		
		JLabel imageLabel = new JLabel();
		icon.addTo(imageLabel);
		
		layout.setVerticalGroup(layout.createParallelGroup()
				.addComponent(imageLabel)
				.addGroup(layout.createSequentialGroup()
						.addComponent(name)
				)
		
		);
		
		layout.setHorizontalGroup(layout.createSequentialGroup()
				.addComponent(imageLabel)
				.addGap(8)
				.addGroup(layout.createParallelGroup()
						.addComponent(name)
				)
		
		);
		
		
		// AWT's Z order is weird. This put image at the back of the stack
		setComponentZOrder(imageLabel, getComponentCount() - 1);
	}
}

