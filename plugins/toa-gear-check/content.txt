package com.toagearcheck;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.WidgetClosed;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.kit.KitType;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import javax.swing.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

@Slf4j
@PluginDescriptor(
		name = "Raid Party Gear Checker",
		description = "Checks gear of party applicants",
		tags = {"toa", "raids3", "tombs of amascut", "tob", "theatre of blood"}
)
public class ToAGearCheckPlugin extends Plugin
{
	@Inject
	private Client client;
	
	@Inject
	private ClientToolbar pluginToolbar;
	
	@Inject
	private ClientThread clientThread;
	
	@Inject
	private ItemManager itemManager;
	
	private BufferedImage toaButton;
	private BufferedImage tobButton;
	
	private NavigationButton navButton;
	
	private boolean navButtonAdded = false;
	private boolean checkingApplicants = false;
	private ToaGearCheckPanel raidGearCheckPanel;
	private int regionId = -1;
	
	@Override
	protected void startUp() throws Exception
	{
		raidGearCheckPanel = injector.getInstance(ToaGearCheckPanel.class);
		toaButton = ImageUtil.loadImageResource(ToaGearCheckPanel.class, "toa.png");
		tobButton = ImageUtil.loadImageResource(ToaGearCheckPanel.class, "tob.png");
		navButton = buildNavIcon(RaidInfo.ToA);
	}
	
	@Override
	protected void shutDown() throws Exception
	{
		pluginToolbar.removeNavigation(navButton);
	}
	
	@Subscribe
	private void onWidgetLoaded(WidgetLoaded event)
	{
		if (RaidInfo.widgetAccess(event.getGroupId()))
		{
			checkingApplicants = true;
			refreshPanel();
			if (navButtonAdded)
			{
				SwingUtilities.invokeLater(() -> pluginToolbar.openPanel(navButton));
			}
		}
	}
	
	@Subscribe
	private void onWidgetClosed(WidgetClosed event)
	{
		if (RaidInfo.widgetAccess(event.getGroupId()))
		{
			checkingApplicants = false;
		}
	}
	
	@Subscribe
	private void onGameTick(GameTick event)
	{
		int newRegionId = client.getLocalPlayer().getWorldLocation().getRegionID();
		RaidInfo raidInfo = RaidInfo.inRegion(newRegionId);
		boolean isInRaidLobby = raidInfo != null;
		
		if (isInRaidLobby)
		{
			if (!navButtonAdded)
			{
				navButton = buildNavIcon(raidInfo);
				pluginToolbar.addNavigation(navButton);
				navButtonAdded = true;
			}
			else if (newRegionId != regionId)
			{ //If teleporting from ToA lobby straight to ToB
				pluginToolbar.removeNavigation(navButton);
				navButton = buildNavIcon(raidInfo);
				pluginToolbar.addNavigation(navButton);
			}
		}
		else if (navButtonAdded)
		{
			pluginToolbar.removeNavigation(navButton);
			navButtonAdded = false;
		}
		
		regionId = newRegionId;
		
		refreshPanel();
	}
	
	public NavigationButton buildNavIcon(RaidInfo raidInfo)
	{
		String tooltip = " Party Gear Checker";
		BufferedImage icon = null;
		if (raidInfo == RaidInfo.ToA)
		{
			icon = toaButton;
			tooltip = "ToA" + tooltip;
		}
		else if (raidInfo == RaidInfo.ToB)
		{
			icon = tobButton;
			tooltip = "ToB" + tooltip;
		}
		
		return NavigationButton.builder()
				.tooltip(tooltip)
				.icon(icon)
				.priority(10)
				.panel(raidGearCheckPanel)
				.build();
	}
	
	public void refreshPanel()
	{
		if (!checkingApplicants)
		{
			return;
		}
		
		RaidInfo raidInfo = RaidInfo.inRegion(regionId);
		
		if (raidInfo == null)
		{
			return;
		}
		
		List<String> playerListStr = raidInfo.getPlayers(client);
		HashMap<Player, List<ItemComposition>> playerList = new HashMap<>();
		
		for (Player player : client.getPlayers())
		{
			if (!playerListStr.contains(player.getName()))
			{
				continue;
			}
			List<ItemComposition> listOfEquipment = new ArrayList<>();
			PlayerComposition playerComposition = player.getPlayerComposition();
			for (KitType kitType : KitType.values())
			{
				if (playerComposition.getEquipmentId(kitType) == -1)
				{
					continue;
				}
				clientThread.invoke(() ->
				{
					listOfEquipment.add(itemManager.getItemComposition(playerComposition.getEquipmentId(kitType)));
				});
			}
			playerList.put(player, listOfEquipment);
		}
		raidGearCheckPanel.updatePanel(playerList);
	}
}

package com.toagearcheck;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ItemComposition;
import net.runelite.api.Player;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.util.AsyncBufferedImage;

import javax.inject.Inject;
import javax.inject.Singleton;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Slf4j
@Singleton
public class ToaGearCheckPanel extends PluginPanel
{
	@Inject
	private Client client;
	@Inject
	private ItemManager itemManager;
	
	private final JTabbedPane partyTabs;
	
	public ToaGearCheckPanel()
	{
		GroupLayout layout = new GroupLayout(this);
		setLayout(layout);
		setBorder(new EmptyBorder(0, 0, 0, 0));
		setBackground(ColorScheme.DARK_GRAY_COLOR);
		
		JPanel partyApplicants = new JPanel(new GridBagLayout());
		partyTabs = new JTabbedPane();
		
		GridBagConstraints tabConstraints = new GridBagConstraints();
		tabConstraints.fill = GridBagConstraints.BOTH;
		tabConstraints.weightx = 1;
		tabConstraints.weighty = 1;
		
		partyApplicants.add(partyTabs, tabConstraints);
		
		layout.setHorizontalGroup(layout.createParallelGroup()
				.addComponent(partyApplicants)
		);
		layout.setVerticalGroup(layout.createSequentialGroup()
				.addComponent(partyApplicants)
		);
	}
	
	
	public void updatePanel(HashMap<Player, List<ItemComposition>> playerList)
	{
		SwingUtilities.invokeLater(() ->
		{
			String lastUserSelected = "";
			
			if (partyTabs.getSelectedIndex() != -1)
			{
				lastUserSelected = partyTabs.getTitleAt(partyTabs.getSelectedIndex());
			}
			
			partyTabs.removeAll();
			
			if (playerList.size() == 0)
			{
				return;
			}
			
			for (Map.Entry<Player, List<ItemComposition>> player : playerList.entrySet())
			{
				JPanel equipmentPanels = new JPanel(new GridBagLayout());
				GridBagConstraints c = new GridBagConstraints();
				c.fill = GridBagConstraints.HORIZONTAL;
				c.weightx = 1;
				c.gridx = 0;
				c.gridy = 0;
				
				for (ItemComposition itemComposition : player.getValue())
				{
					AsyncBufferedImage itemImage = itemManager.getImage(itemComposition.getId());
					equipmentPanels.add(new ItemPanel(itemComposition, itemImage), c);
					c.gridy++;
				}
				partyTabs.addTab(player.getKey().getName(), equipmentPanels);
				
				if (player.getKey().getName().equals(lastUserSelected))
				{
					partyTabs.setSelectedComponent(equipmentPanels);
				}
			}
			
			repaint();
			revalidate();
		});
	}
}

//Borrowed from https://github.com/botanicvelious/Equipment-Inspector/blob/master/src/main/java/equipmentinspector/ItemPanel.java
package com.toagearcheck;

import net.runelite.api.ItemComposition;
import net.runelite.api.kit.KitType;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.util.AsyncBufferedImage;
import org.apache.commons.lang3.StringUtils;

import javax.swing.GroupLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

public class ItemPanel extends JPanel
{
	ItemPanel(ItemComposition item, AsyncBufferedImage icon)
	{
		setBorder(new EmptyBorder(3, 3, 3, 3));
		setBackground(ColorScheme.DARK_GRAY_COLOR);
		
		GroupLayout layout = new GroupLayout(this);
		this.setLayout(layout);
		
		JLabel name = new JLabel(item.getName());
		
		JLabel imageLabel = new JLabel();
		icon.addTo(imageLabel);
		
		layout.setVerticalGroup(layout.createParallelGroup()
				.addComponent(imageLabel)
				.addGroup(layout.createSequentialGroup()
						.addComponent(name)
				)
		
		);
		
		layout.setHorizontalGroup(layout.createSequentialGroup()
				.addComponent(imageLabel)
				.addGap(8)
				.addGroup(layout.createParallelGroup()
						.addComponent(name)
				)
		
		);
		
		
		// AWT's Z order is weird. This put image at the back of the stack
		setComponentZOrder(imageLabel, getComponentCount() - 1);
	}
}

package com.toagearcheck;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.widgets.Widget;
import lombok.AllArgsConstructor;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

@AllArgsConstructor
@Slf4j
public enum RaidInfo
{
	ToA(13454, 774, 48, 114, 22),
	ToB(14642, 50, 42, 160, 13);
	
	private static final Map<Integer, RaidInfo> REGION_LOOKUP =
			Arrays.stream(values()).collect(Collectors.toMap(r -> r.regionId, r -> r, (a, b) -> a, ConcurrentHashMap::new));
	
	private final int regionId;
	private final int widgetGroup;
	private final int widgetChild;
	private final int widgetWidth;
	private final int widgetHeight;
	
	public List<String> getPlayers(Client client)
	{
		Widget baseWidget = client.getWidget(widgetGroup, widgetChild);
		if (baseWidget == null || baseWidget.getChildren() == null)
		{
			return Collections.emptyList();
		}
		
		return Arrays.stream(baseWidget.getChildren())
				.filter(widget -> widget.getOriginalWidth() == widgetWidth
						&& widget.getOriginalHeight() == widgetHeight)
				.map(Widget::getText)
				.collect(Collectors.toList());
	}
	
	public static RaidInfo inRegion(int regionId)
	{
		return REGION_LOOKUP.get(regionId);
	}
	
	public static boolean widgetAccess(int widgetGroup)
	{
		return Arrays.stream(values()).anyMatch(r -> r.widgetGroup == widgetGroup);
	}
}

package com.toagearcheck;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ToAGearCheckPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ToAGearCheckPlugin.class);
		RuneLite.main(args);
	}
}
