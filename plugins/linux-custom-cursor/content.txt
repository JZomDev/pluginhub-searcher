package linuxcustomcursor;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class LinuxCustomCursorPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(LinuxCustomCursorPlugin.class);
		RuneLite.main(args);
	}
}
package linuxcustomcursor;

import net.runelite.client.config.*;


@ConfigGroup("linuxcustomcursor")
public interface LinuxCustomCursorConfig extends Config
{

	@ConfigSection(
			position = 1,
			name = "General Settings",
			description = "General Cursor Settings"
	)
	String generalSettingsSection = "General Settings";

	@ConfigItem(
		position = 2,
		name = "Cursor",
		keyName = "cursorStyle",
		description = "Select which cursor you wish to use",
		section = generalSettingsSection
	)
	default LinuxCustomCursor selectedCursor()
	{
		return LinuxCustomCursor.NONE;
	}

	@ConfigItem(
		position = 3,
		name = "System Cursor Width",
		keyName = "systemCursorWidth",
		description = "Width of the 'image' used by your OS. " +
				"Default system cursor shapes are generally square like 24x24 or 32x32",
		section = generalSettingsSection
	)
	@Units("px")
	default int getSystemCursorWidth()
	{
		return 24;
	}

	@ConfigItem(
			position = 4,
			name = "System Cursor Height",
			keyName = "systemCursorHeight",
			description = "Height of the 'image' used by your OS. " +
					"Default system cursor shapes are generally square like 24x24 or 32x32",
			section = generalSettingsSection
	)
	@Units("px")
	default int getSystemCursorHeight()
	{
		return 24;
	}

	@ConfigItem(
			position = 5,
			name = "System Cursor Hotspot X Offset",
			keyName = "systemCursorHotSpotXOffset",
			description = "How far to the right is the 'click point' of your cursor. " +
					"Generally around 10 pixels on a 24x24 cursor.",
			section = generalSettingsSection
	)
	@Units("px")
	default int getSystemCursorHotSpotXOffset()
	{
		return 10;
	}

	@ConfigItem(
			position = 6,
			name = "System Cursor Hotspot Y Offset",
			keyName = "systemCursorHotSpotYOffset",
			description = "How far down from the top is the 'click point' of your cursor. " +
					"Generally around 5 pixels on a 24x24 cursor.",
			section = generalSettingsSection
	)
	@Units("px")
	default int getSystemCursorHotSpotYOffset()
	{
		return 5;
	}

	@ConfigSection(
			position = 7,
			name = "Debug Options",
			description = "Debug options, not meant to be used in most cases",
			closedByDefault = true
	)
	String debugSection = "Debug Section";

	@ConfigItem(
			position = 8,
			name = "Also draw system cursor",
			keyName = "drawSystemCursor",
			description = "Used to check alignment of clickboxes. " +
					"Draws both cursors instead of making the system cursor invisible",
			section = debugSection
	)
	default boolean debugEnableDrawSystemCursor()
	{
		return false;
	}
}

package linuxcustomcursor;

import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.inject.Inject;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.Point;
import net.runelite.client.RuneLite;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ClientUI;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

@Slf4j
class LinuxCustomCursorOverlay extends Overlay
{
    private final Client client;
    private final LinuxCustomCursorConfig config;
    private final LinuxCustomCursorPlugin plugin;
    private final ClientUI clientUI;
    private final ItemManager itemManager;

    @Setter
    private boolean disableOverlay;

    @Inject
    private LinuxCustomCursorOverlay(Client client, LinuxCustomCursorConfig config,
                                     LinuxCustomCursorPlugin plugin, ClientUI clientUI, ItemManager itemManager)
    {
        super(plugin);
        setPriority(Overlay.PRIORITY_HIGHEST);
        setLayer(OverlayLayer.ALWAYS_ON_TOP);
        setMovable(false);
        setResettable(false);
        setResizable(false);
        setSnappable(false);
        setPreferredPosition(OverlayPosition.DYNAMIC);
        this.client = client;
        this.config = config;
        this.plugin = plugin;
        this.clientUI = clientUI;
        this.itemManager = itemManager;
        disableOverlay = false;
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        BufferedImage cursorImg = updateCursorImg();
        Point mouseLoc = client.getMouseCanvasPosition();
        if (disableOverlay || mouseLoc == null || !mouseInsideBounds(mouseLoc) || cursorImg == null)
        {
            clientUI.resetCursor();
            return null;
        }

        OverlayUtil.renderImageLocation(graphics, getAdjustedMousePoint(mouseLoc), cursorImg);

        if (!config.debugEnableDrawSystemCursor())
        {
            clientUI.setCursor(InvisibleCursor.invisibleCursorImg, "Invisible Cursor");
        }
        else
        {
            clientUI.resetCursor();
        }
        return null;
    }

    private BufferedImage updateCursorImg()
    {
        LinuxCustomCursor selectedCursor = config.selectedCursor();
        if (selectedCursor.getCursorImage() != null)
        {
            return selectedCursor.getCursorImage();
        }
        else if (selectedCursor == LinuxCustomCursor.CUSTOM_IMAGE)
        {
            try
            {
                File customCursorFile = new File(RuneLite.RUNELITE_DIR, "cursor.png");
                if (customCursorFile.exists())
                {
                    BufferedImage img;
                    synchronized (ImageIO.class)
                    {
                        img = ImageIO.read(customCursorFile);
                    }
                    return img;
                }
            }
            catch (Exception e)
            {
                log.error("Loading custom image file failed", e);
                return null;
            }
        }
        else if (selectedCursor == LinuxCustomCursor.EQUIPPED_WEAPON)
        {
            ItemContainer playerEquipment = client.getItemContainer(InventoryID.EQUIPMENT);
            if (playerEquipment == null) {
                return null;
            }

            Item equippedWeapon = playerEquipment.getItem(EquipmentInventorySlot.WEAPON.getSlotIdx());
            // should short circuit if null
            if (equippedWeapon == null && equippedWeapon.getQuantity() <= 0)
            {
                return null;
            }

            return itemManager.getImage(equippedWeapon.getId());
        }
        // if NONE then all above will be false, and we return null anyway
        return null;
    }

    private boolean mouseInsideBounds(Point mouseLoc)
    {
        return mouseLoc.getX() > 0 && mouseLoc.getX() <= client.getCanvasWidth() &&
                mouseLoc.getY() > 0 && mouseLoc.getY() <= client.getCanvasHeight();
    }

    private Point getAdjustedMousePoint(Point mouseLoc)
    {
        // align the top left of the image to the hotspot of the cursor
        // the draw point seems to have the left edge of the image aligned with the center of the cursor box
        // the y value seems to be at the very bottom of the cursor
        int newX = mouseLoc.getX() - config.getSystemCursorWidth()/2 + config.getSystemCursorHotSpotXOffset();
        if (newX < 0) newX = 0;
        if (newX > client.getCanvasWidth()) newX = client.getCanvasWidth();

        int newY = mouseLoc.getY() - config.getSystemCursorHeight() + config.getSystemCursorHotSpotYOffset();
        if (newY < 0) newY = 0;
        if (newY > client.getCanvasHeight()) newY = client.getCanvasHeight();

        return new Point(newX, newY);
    }
}

package linuxcustomcursor;

import lombok.Getter;
import javax.annotation.Nullable;
import java.awt.image.BufferedImage;
import net.runelite.client.plugins.customcursor.CustomCursorPlugin;
import net.runelite.client.util.ImageUtil;


@Getter
public enum LinuxCustomCursor
{
    NONE("None"),
    RS3_GOLD("RS3 Gold", "cursor-rs3-gold.png", false),
    RS3_SILVER("RS3 Silver", "cursor-rs3-silver.png", false),
    DRAGON_DAGGER("Dragon Dagger", "cursor-dragon-dagger.png", false),
    DRAGON_DAGGER_POISON("Dragon Dagger (p)", "cursor-dragon-dagger-p.png", false),
    TROUT("Trout", "cursor-trout.png", false),
    DRAGON_SCIMITAR("Dragon Scimitar", "cursor-dragon-scimitar.png", false),
    SALMON("Salmon", "cursor-salmon.png", true),
    TECU_SALAMANDER("Tecu Salamander", "cursor-tecu-salamander.png", true),
    DRAGON_DEFENDER("Dragon Defender", "cursor-dragon-defender.png", true),
    ARMADYL_GODSWORD("Armadyl Godsword", "cursor-ags.png", true),
    TWENTY_FOUR_CARAT_SWORD("24-Carat Sword", "cursor-24-carat-sword.png", true),
    CURSED_BANANA("Cursed Banana", "cursor-cursed-banana.png", true),
    DRAGON_HALBERD("Dragon Halberd", "cursor-dragon-halberd.png", true),
    HUNTING_KNIFE("Hunting Knife", "cursor-hunting-knife.png", true),
    LOBSTER("Lobster", "cursor-lobster.png", true),
    RED_CHINCHOMPA("Red Chinchompa", "cursor-red-chinchompa.png", true),
    RUBBER_CHICKEN("Rubber Chicken", "cursor-rubber-chicken.png", true),
    STALE_BAGUETTE("Stale Baguette", "cursor-stale-baguette.png", true),
    EQUIPPED_WEAPON("Equipped Weapon"),
    CUSTOM_IMAGE("Custom Image");

    private final String name;
    @Nullable
    private final BufferedImage cursorImage;
    private final boolean notInOriginal;

    LinuxCustomCursor(String name)
    {
        this.name = name;
        this.cursorImage = null;
        this.notInOriginal = false;
    }


    LinuxCustomCursor(String name, String icon, boolean notInOriginal)
    {
        this.name = name;
        this.notInOriginal = notInOriginal;
        // '/' is needed in the image path or it won't be able to find the resources.
        if (notInOriginal) this.cursorImage = ImageUtil.loadImageResource(LinuxCustomCursorPlugin.class, "/" + icon);
        else this.cursorImage = ImageUtil.loadImageResource(CustomCursorPlugin.class, icon);
    }

    @Override
    public String toString()
    {
        return name;
    }
}

package linuxcustomcursor;

import java.awt.image.BufferedImage;
import net.runelite.client.util.ImageUtil;


public class InvisibleCursor
{
    public static final BufferedImage invisibleCursorImg = ImageUtil.loadImageResource(
            LinuxCustomCursorPlugin.class, "/invisible-cursor.png");
}

package linuxcustomcursor;

import javax.inject.Inject;
import com.google.inject.Provides;
import net.runelite.api.Client;
import net.runelite.api.events.FocusChanged;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.customcursor.CustomCursorPlugin;
import net.runelite.client.ui.ClientUI;
import net.runelite.client.ui.overlay.OverlayManager;

@PluginDescriptor(
	name = "Linux Custom Cursor",
	description = "Workaround for custom cursor plugin not working on Linux OS's",
	tags = {"cursor", "overlay", "linux", "custom-cursor"}
)
@PluginDependency(CustomCursorPlugin.class)
public class LinuxCustomCursorPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private LinuxCustomCursorConfig config;

	@Inject
	private LinuxCustomCursorOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ClientUI clientUI;


	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
	}

	@Provides
	LinuxCustomCursorConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(LinuxCustomCursorConfig.class);
	}

	@Subscribe
	public void onFocusChanged(FocusChanged f)
	{
		overlay.setDisableOverlay(!f.isFocused());
		if (!f.isFocused()) clientUI.resetCursor();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged e)
	{
		overlay.setDisableOverlay(e.getGameState() != GameState.LOGGED_IN);
		if (e.getGameState() != GameState.LOGGED_IN) clientUI.resetCursor();
	}
}

