package linuxcustomcursor;

import net.runelite.client.config.*;


@ConfigGroup("linuxcustomcursor")
public interface LinuxCustomCursorConfig extends Config
{

	@ConfigSection(
			position = 1,
			name = "General Settings",
			description = "General Cursor Settings"
	)
	String generalSettingsSection = "General Settings";

	@ConfigItem(
		position = 2,
		name = "Cursor",
		keyName = "cursorStyle",
		description = "Select which cursor you wish to use",
		section = generalSettingsSection
	)
	default LinuxCustomCursor selectedCursor()
	{
		return LinuxCustomCursor.NONE;
	}

	@ConfigItem(
		position = 3,
		name = "Mirror Cursor Horizontally",
		keyName = "mirrorCursorX",
		description = "Flip cursor image across the Y axis. Useful for some equipped weapons or custom images.",
		section = generalSettingsSection
	)
	default boolean getMirrorCursorHorz() { return false; }

	@ConfigItem(
		position = 4,
		name = "Mirror Cursor Vertically",
		keyName = "mirrorCursorY",
		description = "Flip cursor image across the X axis. Useful for some equipped weapons or custom images.",
		section = generalSettingsSection
	)
	default boolean getMirrorCursorVert() { return false; }

	@ConfigSection(
			position = 5,
			name = "Configuration",
			description = "Options to tune the plugin"
	)
	String configSettingsSection = "Configuration";

	@Range(
			min = 0
	)
	@ConfigItem(
		position = 6,
		name = "Cursor Size Scaling",
		keyName = "systemCursorScale",
		description = "Factor to scale the size of the cursor. Numbers less than one will shrink the cursor. " +
				"If the cursor becomes too small, it will be reset to 1x.",
		section = configSettingsSection
	)
	@Units("x")
	default double getScaleFactor() { return 1f; }

	@ConfigItem(
		position = 7,
		name = "System Cursor Width",
		keyName = "systemCursorWidth",
		description = "Width of the 'image' used by your OS. " +
				"Default system cursor shapes are generally square like 24x24 or 32x32",
		section = configSettingsSection
	)
	@Units("px")
	default int getSystemCursorWidth()
	{
		return 24;
	}

	@ConfigItem(
		position = 8,
		name = "System Cursor Height",
		keyName = "systemCursorHeight",
		description = "Height of the 'image' used by your OS. " +
				"Default system cursor shapes are generally square like 24x24 or 32x32",
		section = configSettingsSection
	)
	@Units("px")
	default int getSystemCursorHeight()
	{
		return 24;
	}

	@ConfigItem(
		position = 9,
		name = "System Cursor Hotspot X Offset",
		keyName = "systemCursorHotSpotXOffset",
		description = "How far to the right is the 'click point' of your cursor. " +
				"Generally around 10 pixels on a 24x24 cursor.",
		section = configSettingsSection
	)
	@Units("px")
	default int getSystemCursorHotSpotXOffset()
	{
		return 10;
	}

	@ConfigItem(
		position = 10,
		name = "System Cursor Hotspot Y Offset",
		keyName = "systemCursorHotSpotYOffset",
		description = "How far down from the top is the 'click point' of your cursor. " +
				"Generally around 5 pixels on a 24x24 cursor.",
		section = configSettingsSection
	)
	@Units("px")
	default int getSystemCursorHotSpotYOffset()
	{
		return 5;
	}

	@ConfigSection(
		position = 11,
		name = "Debug Options",
		description = "Debug options, not meant to be used in most cases",
		closedByDefault = true
	)
	String debugSection = "Debug Section";

	@ConfigItem(
		position = 12,
		name = "Also draw system cursor",
		keyName = "drawSystemCursor",
		description = "Used to check alignment of clickboxes. " +
				"Draws both cursors instead of making the system cursor invisible",
		section = debugSection
	)
	default boolean debugEnableDrawSystemCursor()
	{
		return false;
	}
}

package linuxcustomcursor;

import javax.inject.Inject;
import com.google.inject.Provides;
import net.runelite.api.Client;
import net.runelite.api.events.FocusChanged;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.customcursor.CustomCursorPlugin;
import net.runelite.client.ui.ClientUI;
import net.runelite.client.ui.overlay.OverlayManager;

@PluginDescriptor(
	name = "Linux Custom Cursor",
	description = "Workaround for custom cursor plugin not working on Linux OS's",
	tags = {"cursor", "overlay", "linux", "custom-cursor"}
)
@PluginDependency(CustomCursorPlugin.class)
public class LinuxCustomCursorPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private LinuxCustomCursorConfig config;

	@Inject
	private LinuxCustomCursorOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ClientUI clientUI;


	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
	}

	@Provides
	LinuxCustomCursorConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(LinuxCustomCursorConfig.class);
	}

	@Subscribe
	public void onFocusChanged(FocusChanged f)
	{
		overlay.setDisableOverlay(!f.isFocused());
		if (!f.isFocused()) clientUI.resetCursor();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged e)
	{
		overlay.setDisableOverlay(e.getGameState() != GameState.LOGGED_IN);
		if (e.getGameState() != GameState.LOGGED_IN) clientUI.resetCursor();
	}
}

package linuxcustomcursor;

import java.awt.image.BufferedImage;
import net.runelite.client.util.ImageUtil;


public class InvisibleCursor
{
    public static final BufferedImage invisibleCursorImg = ImageUtil.loadImageResource(
            LinuxCustomCursorPlugin.class, "/invisible-cursor.png");
}

package linuxcustomcursor;

import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.image.AffineTransformOp;
import java.awt.geom.AffineTransform;
import java.io.File;
import javax.imageio.ImageIO;
import javax.inject.Inject;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.Point;
import net.runelite.api.gameval.InventoryID;
import net.runelite.client.RuneLite;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ClientUI;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

@Slf4j
class LinuxCustomCursorOverlay extends Overlay
{
    private final Client client;
    private final LinuxCustomCursorConfig config;
    private final LinuxCustomCursorPlugin plugin;
    private final ClientUI clientUI;
    private final ItemManager itemManager;
    private BufferedImage cachedCustomImage;
    private long customImageLastModified = 0;
    private BufferedImage cachedWeaponImage;
    private int cachedWeaponId = -1;
    private double lastScaleFactor;
    private BufferedImage cachedMirrorX;
    private BufferedImage cachedMirrorY;
    private BufferedImage cachedMirrorXY;
    private BufferedImage cachedScaledSelectedCursor;
    private LinuxCustomCursor lastSelectedCursor;

    @Setter
    private boolean disableOverlay;

    @Inject
    private LinuxCustomCursorOverlay(Client client, LinuxCustomCursorConfig config,
                                     LinuxCustomCursorPlugin plugin, ClientUI clientUI, ItemManager itemManager)
    {
        super(plugin);
        setPriority(Overlay.PRIORITY_HIGHEST);
        setLayer(OverlayLayer.ALWAYS_ON_TOP);
        setMovable(false);
        setResettable(false);
        setResizable(false);
        setSnappable(false);
        setPreferredPosition(OverlayPosition.DYNAMIC);
        this.client = client;
        this.config = config;
        this.plugin = plugin;
        this.clientUI = clientUI;
        this.itemManager = itemManager;
        disableOverlay = false;
        lastScaleFactor = config.getScaleFactor();
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (lastScaleFactor != config.getScaleFactor())
        {
            // If scaling is changed, force an update of cached images
            lastSelectedCursor = null;
            customImageLastModified = 0;
            cachedWeaponId = -1;
            lastScaleFactor= config.getScaleFactor();
        }

        BufferedImage cursorImg = updateCursorImg();
        Point mouseLoc = client.getMouseCanvasPosition();
        if (disableOverlay || mouseLoc == null || !mouseInsideBounds(mouseLoc) || cursorImg == null)
        {
            clientUI.resetCursor();
            return null;
        }

        BufferedImage finalImg;
        if (config.getMirrorCursorVert() && !config.getMirrorCursorHorz())
        {
            finalImg = cachedMirrorY;
        }
        else if (config.getMirrorCursorHorz() && !config.getMirrorCursorVert())
        {
            finalImg = cachedMirrorX;
        }
        else if (config.getMirrorCursorHorz() && config.getMirrorCursorVert())
        {
            finalImg = cachedMirrorXY;
        }
        else
        {
            finalImg = cursorImg;
        }

        OverlayUtil.renderImageLocation(graphics, getAdjustedMousePoint(mouseLoc), finalImg);

        if (!config.debugEnableDrawSystemCursor())
        {
            clientUI.setCursor(InvisibleCursor.invisibleCursorImg, "Invisible Cursor");
        }
        else
        {
            clientUI.resetCursor();
        }
        return null;
    }

    private BufferedImage scaleImg(BufferedImage img)
    {
        double factor = config.getScaleFactor();
        int newWidth = (int) (factor * img.getWidth());
        int newHeight = (int) (factor * img.getHeight());

        // If the scaling factor makes the image 0 width/height just return a 1x version
        if (newWidth <= 0)
        {
            newWidth = 1;
        }
        if (newHeight <= 0)
        {
            newHeight = 1;
        }
        BufferedImage res = new BufferedImage(newWidth, newHeight, img.getType());
        AffineTransform scale = new AffineTransform();
        scale.concatenate(AffineTransform.getScaleInstance(factor, factor));
        AffineTransformOp scaleOp = new AffineTransformOp(scale, AffineTransformOp.TYPE_NEAREST_NEIGHBOR);
        scaleOp.filter(img, res);
        img.flush();
        return res;
    }

    private BufferedImage updateCursorImg()
    {
        LinuxCustomCursor selectedCursor = config.selectedCursor();
        
        if (lastSelectedCursor != selectedCursor)
        {
            if (selectedCursor.getCursorImage() != null)
            {
                cachedScaledSelectedCursor = scaleImg(selectedCursor.getCursorImage());
            }
            clearMirroredCursorCache();
            clearCacheForCursorChange(lastSelectedCursor, selectedCursor);
            lastSelectedCursor = selectedCursor;
        }

        // If not null, it must be a pre-provided image. Only custom/equipped have null images.
        if (selectedCursor.getCursorImage() != null)
        {
            updateMirroredCursorCache(cachedScaledSelectedCursor);
            return cachedScaledSelectedCursor;
        }
        else if (selectedCursor == LinuxCustomCursor.CUSTOM_IMAGE)
        {
            return getCachedCustomImage();
        }
        else if (selectedCursor == LinuxCustomCursor.EQUIPPED_WEAPON)
        {
            return getCachedWeaponImage();
        }
        // if NONE then all above will be false, and we return null anyway
        return null;
    }

    private void clearMirroredCursorCache()
    {
        // Clear out old images to avoid memory leaks
        if (cachedMirrorX != null)
        {
            cachedMirrorX.flush();
            cachedMirrorX = null;
        }

        if (cachedMirrorY != null)
        {
            cachedMirrorY.flush();
            cachedMirrorY = null;
        }

        if (cachedMirrorXY != null)
        {
            cachedMirrorXY.flush();
            cachedMirrorXY = null;
        }
    }

    private void updateMirroredCursorCache(BufferedImage cursorImg)
    {
        if (cursorImg == null) {
            log.debug("cursor null, not updating mirrored images.");
            return;
        }


        if (cachedMirrorX == null)
        {
            cachedMirrorX = new BufferedImage(
                    cursorImg.getWidth(), cursorImg.getHeight(), cursorImg.getType());
            AffineTransform mirrorHorz = new AffineTransform();
            mirrorHorz.concatenate(AffineTransform.getScaleInstance(-1, 1));
            mirrorHorz.concatenate(AffineTransform.getTranslateInstance(-cursorImg.getWidth(), 0));
            AffineTransformOp mirrorHorzOp = new AffineTransformOp(mirrorHorz, AffineTransformOp.TYPE_NEAREST_NEIGHBOR);
            mirrorHorzOp.filter(cursorImg, cachedMirrorX);
        }
        if (cachedMirrorY == null)
        {
            cachedMirrorY = new BufferedImage(
                    cursorImg.getWidth(), cursorImg.getHeight(), cursorImg.getType());
            AffineTransform mirrorVert = new AffineTransform();
            mirrorVert.concatenate(AffineTransform.getScaleInstance(1, -1));
            mirrorVert.concatenate(AffineTransform.getTranslateInstance(0, -cursorImg.getHeight()));
            AffineTransformOp mirrorVertOp = new AffineTransformOp(mirrorVert, AffineTransformOp.TYPE_NEAREST_NEIGHBOR);
            mirrorVertOp.filter(cursorImg, cachedMirrorY);
        }
        if (cachedMirrorXY == null)
        {
            cachedMirrorXY = new BufferedImage(
                    cursorImg.getWidth(), cursorImg.getHeight(), cursorImg.getType());
            AffineTransform mirrorBoth = new AffineTransform();
            mirrorBoth.concatenate(AffineTransform.getScaleInstance(-1, -1));
            mirrorBoth.concatenate(AffineTransform.getTranslateInstance(-cursorImg.getWidth(), -cursorImg.getHeight()));
            AffineTransformOp mirrorBothOp = new AffineTransformOp(mirrorBoth, AffineTransformOp.TYPE_NEAREST_NEIGHBOR);
            mirrorBothOp.filter(cursorImg, cachedMirrorXY);
        }

    }
    
    private BufferedImage getCachedCustomImage()
    {
        try
        {
            File customCursorFile = new File(RuneLite.RUNELITE_DIR, "cursor.png");
            
            // file doesn't exist, clear cache if needed
            if (!customCursorFile.exists())
            {
                if (cachedCustomImage != null)
                {
                    cachedCustomImage.flush();
                    cachedCustomImage = null;
                    customImageLastModified = 0;
                    // If file is deleted mid-gameplay?
                    clearMirroredCursorCache();
                }
                
                return null;
            }
            
            // check cursor last modified time to automatically reload on change
            long fileLastModified = customCursorFile.lastModified();
            
            // check if the image needs to be reloaded
            if (cachedCustomImage == null || fileLastModified != customImageLastModified)
            {
                // dispose of old image
                if (cachedCustomImage != null)
                {
                    cachedCustomImage.flush();
                    clearMirroredCursorCache();
                }
                
                // load new image
                synchronized (ImageIO.class)
                {
                    cachedCustomImage = scaleImg(ImageIO.read(customCursorFile));
                    updateMirroredCursorCache(cachedCustomImage);
                }
                
                customImageLastModified = fileLastModified;
                log.debug("Loaded custom cursor image from file");
            }
            
            return cachedCustomImage;
        }
        catch (Exception e)
        {
            log.error("Loading custom image file failed", e);
            
            // clear cache on error
            if (cachedCustomImage != null)
            {
                cachedCustomImage.flush();
                cachedCustomImage = null;
                customImageLastModified = 0;
                clearMirroredCursorCache();
            }
            
            return null;
        }
    }
    
    private BufferedImage getCachedWeaponImage()
    {
        ItemContainer playerEquipment = client.getItemContainer(InventoryID.WORN);
        if (playerEquipment == null)
        {
            clearWeaponCache();
            clearMirroredCursorCache();
            return null;
        }

        Item equippedWeapon = playerEquipment.getItem(EquipmentInventorySlot.WEAPON.getSlotIdx());
        
        if (equippedWeapon == null || equippedWeapon.getQuantity() <= 0)
        {
            clearWeaponCache();
            clearMirroredCursorCache();
            return null;
        }
        
        int weaponId = equippedWeapon.getId();
        
        // check if the image needs to be reloaded
        if (cachedWeaponImage == null || cachedWeaponId != weaponId)
        {
            // dispose of old image
            if (cachedWeaponImage != null)
            {
                cachedWeaponImage.flush();
                clearMirroredCursorCache();
            }
            
            cachedWeaponImage = scaleImg(itemManager.getImage(weaponId));
            updateMirroredCursorCache(cachedWeaponImage);
            cachedWeaponId = weaponId;
            log.debug("Cached weapon image for item ID: {}", weaponId);
        }
        
        return cachedWeaponImage;
    }
    
    private void clearWeaponCache()
    {
        if (cachedWeaponImage != null)
        {
            cachedWeaponImage.flush();
            cachedWeaponImage = null;
            cachedWeaponId = -1;
        }
    }
    
    private void clearCacheForCursorChange(LinuxCustomCursor oldCursor, LinuxCustomCursor newCursor)
    {
        // clear custom image cache if switching images
        if (oldCursor == LinuxCustomCursor.CUSTOM_IMAGE && newCursor != LinuxCustomCursor.CUSTOM_IMAGE)
        {
            if (cachedCustomImage != null)
            {
                cachedCustomImage.flush();
                cachedCustomImage = null;
                customImageLastModified = 0;
                log.debug("Cleared custom image cache on cursor change");
            }
        }
        
        // clear weapon image cache if switching weapon
        if (oldCursor == LinuxCustomCursor.EQUIPPED_WEAPON && newCursor != LinuxCustomCursor.EQUIPPED_WEAPON)
        {
            clearWeaponCache();
            log.debug("Cleared weapon image cache on cursor change");
        }
    }

    private boolean mouseInsideBounds(Point mouseLoc)
    {
        return mouseLoc.getX() > 0 && mouseLoc.getX() <= client.getCanvasWidth() &&
                mouseLoc.getY() > 0 && mouseLoc.getY() <= client.getCanvasHeight();
    }

    private Point getAdjustedMousePoint(Point mouseLoc)
    {
        // align the top left of the image to the hotspot of the cursor
        // the draw point seems to have the left edge of the image aligned with the center of the cursor box
        // the y value seems to be at the very bottom of the cursor
        int newX = mouseLoc.getX() - config.getSystemCursorWidth()/2 + config.getSystemCursorHotSpotXOffset();
        if (newX < 0) newX = 0;
        if (newX > client.getCanvasWidth()) newX = client.getCanvasWidth();

        int newY = mouseLoc.getY() - config.getSystemCursorHeight() + config.getSystemCursorHotSpotYOffset();
        if (newY < 0) newY = 0;
        if (newY > client.getCanvasHeight()) newY = client.getCanvasHeight();

        return new Point(newX, newY);
    }
}

package linuxcustomcursor;

import lombok.Getter;
import javax.annotation.Nullable;
import java.awt.image.BufferedImage;
import net.runelite.client.plugins.customcursor.CustomCursorPlugin;
import net.runelite.client.util.ImageUtil;


@Getter
public enum LinuxCustomCursor
{
    NONE("None"),
    RS3_GOLD("RS3 Gold", "cursor-rs3-gold.png", false),
    RS3_SILVER("RS3 Silver", "cursor-rs3-silver.png", false),
    DRAGON_DAGGER("Dragon Dagger", "cursor-dragon-dagger.png", false),
    DRAGON_DAGGER_POISON("Dragon Dagger (p)", "cursor-dragon-dagger-p.png", false),
    TROUT("Trout", "cursor-trout.png", false),
    // D scim icon loading in incorrectly, provided new one from the wiki.
    DRAGON_SCIMITAR("Dragon Scimitar", "cursor-dragon-scimitar.png", true),
    ABYSSAL_DAGGER("Abyssal Dagger (p)", "cursor-abyssal-dagger-p.png", true),
    BLADE_OF_SAELDOR("Blade of Saeldor (c)", "cursor-blade-of-saeldor.png", true),
    BRUMA_TORCH("Bruma Torch", "cursor-bruma-torch.png", true),
    COLOSSAL_BLADE("Colossal Blade", "cursor-colossal-blade.png", true),
    DRAGON_HUNTER_LANCE("Dragon Hunter Lance", "cursor-dragon-hunter-lance.png", true),
    EMBERLIGHT("Emberlight", "cursor-emberlight.png", true),
    GILDED_SCIMITAR("Gilded Scimitar", "cursor-gilded-scimitar.png", true),
    GILDED_SPADE("Gilded Spade", "cursor-gilded-spade.png", true),
    HAM_JOINT("Ham Joint", "cursor-ham-joint.png", true),
    KERIS_PARTISAN("Keris Partisan", "cursor-keris-partisan.png", true),
    OSMUMTENS_FANG("Osmumten's Fang", "cursor-osmumtens-fang.png", true),
    THUNDER_KHOPESH("Thunder Khopesh", "cursor-thunder-khopesh.png", true),
    TOKTZ_XIL_EK("Toktz-Xil-Ek", "cursor-toktz-xil-ek.png", true),
    VOIDWAKER("Voidwaker", "cursor-voidwaker.png", true),
    SALMON("Salmon", "cursor-salmon.png", true),
    TECU_SALAMANDER("Tecu Salamander", "cursor-tecu-salamander.png", true),
    DRAGON_DEFENDER("Dragon Defender", "cursor-dragon-defender.png", true),
    ARMADYL_GODSWORD("Armadyl Godsword", "cursor-ags.png", true),
    TWENTY_FOUR_CARAT_SWORD("24-Carat Sword", "cursor-24-carat-sword.png", true),
    CURSED_BANANA("Cursed Banana", "cursor-cursed-banana.png", true),
    DRAGON_HALBERD("Dragon Halberd", "cursor-dragon-halberd.png", true),
    HUNTING_KNIFE("Hunting Knife", "cursor-hunting-knife.png", true),
    LOBSTER("Lobster", "cursor-lobster.png", true),
    RED_CHINCHOMPA("Red Chinchompa", "cursor-red-chinchompa.png", true),
    RUBBER_CHICKEN("Rubber Chicken", "cursor-rubber-chicken.png", true),
    STALE_BAGUETTE("Stale Baguette", "cursor-stale-baguette.png", true),
    EQUIPPED_WEAPON("Equipped Weapon"),
    CUSTOM_IMAGE("Custom Image");

    private final String name;
    @Nullable
    private final BufferedImage cursorImage;
    private final boolean notInOriginal;

    LinuxCustomCursor(String name)
    {
        this.name = name;
        this.cursorImage = null;
        this.notInOriginal = false;
    }


    LinuxCustomCursor(String name, String icon, boolean notInOriginal)
    {
        this.name = name;
        this.notInOriginal = notInOriginal;
        // '/' is needed in the image path or it won't be able to find the resources.
        if (notInOriginal) this.cursorImage = ImageUtil.loadImageResource(LinuxCustomCursorPlugin.class, "/" + icon);
        else this.cursorImage = ImageUtil.loadImageResource(CustomCursorPlugin.class, icon);
    }

    @Override
    public String toString()
    {
        return name;
    }
}

package linuxcustomcursor;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class LinuxCustomCursorPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(LinuxCustomCursorPlugin.class);
		RuneLite.main(args);
	}
}
