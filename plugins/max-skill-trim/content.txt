package com.maxskilltrim;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class MaxSkillTrimPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(MaxSkillTrimPlugin.class);
		RuneLite.main(args);
	}
}
package com.maxskilltrim;

public enum TrimType
{
    MAX_LEVEL,
    MAX_EXPERIENCE
}

/*
 * Copyright (c) 2021, Hydrox6 <ikada@protonmail.ch>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.maxskilltrim;

import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.api.Skill;
import net.runelite.api.VarPlayer;

@Getter
@AllArgsConstructor
enum SkillData {
    ATTACK(Skill.ATTACK, VarPlayer.ATTACK_GOAL_START, VarPlayer.ATTACK_GOAL_END),
    STRENGTH(Skill.STRENGTH, VarPlayer.STRENGTH_GOAL_START, VarPlayer.STRENGTH_GOAL_END),
    DEFENCE(Skill.DEFENCE, VarPlayer.DEFENCE_GOAL_START, VarPlayer.DEFENCE_GOAL_END),
    RANGED(Skill.RANGED, VarPlayer.RANGED_GOAL_START, VarPlayer.RANGED_GOAL_END),
    PRAYER(Skill.PRAYER, VarPlayer.PRAYER_GOAL_START, VarPlayer.PRAYER_GOAL_END),
    MAGIC(Skill.MAGIC, VarPlayer.MAGIC_GOAL_START, VarPlayer.MAGIC_GOAL_END),
    RUNECRAFT(Skill.RUNECRAFT, VarPlayer.RUNECRAFT_GOAL_START, VarPlayer.RUNECRAFT_GOAL_END),
    CONSTRUCTION(Skill.CONSTRUCTION, VarPlayer.CONSTRUCTION_GOAL_START, VarPlayer.CONSTRUCTION_GOAL_END),
    HITPOINTS(Skill.HITPOINTS, VarPlayer.HITPOINTS_GOAL_START, VarPlayer.HITPOINTS_GOAL_END),
    AGILITY(Skill.AGILITY, VarPlayer.AGILITY_GOAL_START, VarPlayer.AGILITY_GOAL_END),
    HERBLORE(Skill.HERBLORE, VarPlayer.HERBLORE_GOAL_START, VarPlayer.HERBLORE_GOAL_END),
    THIEVING(Skill.THIEVING, VarPlayer.THIEVING_GOAL_START, VarPlayer.THIEVING_GOAL_END),
    CRAFTING(Skill.CRAFTING, VarPlayer.CRAFTING_GOAL_START, VarPlayer.CRAFTING_GOAL_END),
    FLETCHING(Skill.FLETCHING, VarPlayer.FLETCHING_GOAL_START, VarPlayer.FLETCHING_GOAL_END),
    SLAYER(Skill.SLAYER, VarPlayer.SLAYER_GOAL_START, VarPlayer.SLAYER_GOAL_END),
    HUNTER(Skill.HUNTER, VarPlayer.HUNTER_GOAL_START, VarPlayer.HUNTER_GOAL_END),
    MINING(Skill.MINING, VarPlayer.MINING_GOAL_START, VarPlayer.MINING_GOAL_END),
    SMITHING(Skill.SMITHING, VarPlayer.SMITHING_GOAL_START, VarPlayer.SMITHING_GOAL_END),
    FISHING(Skill.FISHING, VarPlayer.FISHING_GOAL_START, VarPlayer.FISHING_GOAL_END),
    COOKING(Skill.COOKING, VarPlayer.COOKING_GOAL_START, VarPlayer.COOKING_GOAL_END),
    FIREMAKING(Skill.FIREMAKING, VarPlayer.FIREMAKING_GOAL_START, VarPlayer.FIREMAKING_GOAL_END),
    WOODCUTTING(Skill.WOODCUTTING, VarPlayer.WOODCUTTING_GOAL_START, VarPlayer.WOODCUTTING_GOAL_END),
    FARMING(Skill.FARMING, VarPlayer.FARMING_GOAL_START, VarPlayer.FARMING_GOAL_END);

    private final Skill skill;
    private final int goalStartVarp;
    private final int goalEndVarp;

    static SkillData get(int idx) {
        if (idx < 0 || idx >= values().length) {
            return null;
        }

        return values()[idx];
    }
}
package com.maxskilltrim;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(MaxSkillTrimConfig.GROUP_NAME)
public interface MaxSkillTrimConfig extends Config
{
    String GROUP_NAME = "maxskilltrim";
    String SHOW_MAX_LEVEL_TRIM = "showMaxLevelTrim";
    String SELECTED_MAX_LEVEL_TRIM = "selectedMaxLevelTrim";
    String SHOW_MAX_EXPERIENCE_TRIM = "showMaxExperienceTrim";
    String SELECTED_MAX_EXPERIENCE_TRIM = "selectedMaxExperienceTrim";
    String SHOW_NAV_BUTTON = "showNavButton";

    @ConfigItem(
            keyName = SHOW_MAX_LEVEL_TRIM,
            name = "Show trims on level 99 skills?",
            description = "Toggles whether or not show skill trims on level 99 skills"
    )
    default boolean showMaxLevelTrim() { return true; }

    @ConfigItem(
            keyName = SELECTED_MAX_LEVEL_TRIM,
            name = "Selected max skill trim",
            description = "Name of the selected max skill trim",
            hidden = true
    )
    default String getSelectedMaxLevelTrimFilename()
    {
        return "full-trim.png";
    }

    @ConfigItem(
            keyName = SHOW_MAX_EXPERIENCE_TRIM,
            name = "Show trims on 200m skills?",
            description = "Toggles whether or not show skill trims on 200m skills"
    )
    default boolean getShowMaxExperienceTrim() { return true; }

    @ConfigItem(
            keyName = SELECTED_MAX_EXPERIENCE_TRIM,
            name = "Selected max skill trim",
            description = "Name of the selected max skill trim",
            hidden = true
    )
    default String getSelectedMaxExperienceTrimFilename()
    {
        return "full-trim.png";
    }

    @ConfigItem(
            keyName = SHOW_NAV_BUTTON,
            name = "Show navigation button in sidebar?",
            description = "Toggles whether or not show the navigation button (icon) in the Runelite sidebar"
    )
    default boolean getShowNavButton() { return true; }
}

package com.maxskilltrim;

public class Trim
{
    public int spriteID;
    public TrimType trimType;

    public Trim(int spriteId, TrimType trimType) {
        this.spriteID = spriteId;
        this.trimType = trimType;
    }
}


package com.maxskilltrim;

import lombok.extern.slf4j.Slf4j;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.util.LinkBrowser;

import javax.inject.Inject;
import javax.inject.Singleton;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.io.File;
import java.util.Objects;

@Slf4j
@Singleton
public class MaxSkillTrimPanel extends PluginPanel
{
    @Inject
    ConfigManager configManager;

    @Inject
    public MaxSkillTrimPanel(MaxSkillTrimConfig config)
    {
        JPanel container = new JPanel();
        container.setBackground(ColorScheme.DARK_GRAY_COLOR);
        GridBagLayout layout = new GridBagLayout();
        GridBagConstraints constraints = new GridBagConstraints();
        constraints.anchor = GridBagConstraints.LINE_START;
        constraints.insets = new Insets(3, 3, 3, 3);
        container.setLayout(layout);

        JComboBox<String> maxLevelComboBox = buildComboBoxPanel(MaxSkillTrimConfig.SELECTED_MAX_LEVEL_TRIM, config.getSelectedMaxLevelTrimFilename());
        JComboBox<String> maxExperienceComboBox = buildComboBoxPanel(MaxSkillTrimConfig.SELECTED_MAX_EXPERIENCE_TRIM, config.getSelectedMaxExperienceTrimFilename());

        JButton openFolderButton = new JButton("Open Folder");
        openFolderButton.addActionListener(e ->
        {
            try
            {
                Desktop.getDesktop().open(MaxSkillTrimPlugin.MAXSKILLTRIMS_DIR);
            }
            catch (Exception ex)
            {
                log.warn(null, ex);
            }
        });
        constraints.gridx = 0;
        constraints.gridy = 0;
        container.add(openFolderButton, constraints);

        JButton refreshButton = new JButton("Refresh");
        refreshButton.addActionListener((ev) -> {
            refreshComboBoxOptions(maxLevelComboBox);
            refreshComboBoxOptions(maxExperienceComboBox);
        });
        constraints.gridx = 1;
        constraints.gridy = 0;
        container.add(refreshButton, constraints);

        JButton getMoreTrimsButton = new JButton("Get more trims!");
        getMoreTrimsButton.addActionListener((e) -> LinkBrowser.browse("https://github.com/NathanQuayle/max-skill-trim/tree/custom-trims"));
        constraints.gridx = 0;
        constraints.gridy = 1;
        constraints.gridwidth = GridBagConstraints.REMAINDER;
        constraints.fill = GridBagConstraints.HORIZONTAL;
        container.add(getMoreTrimsButton, constraints);

        JLabel maxLevelTrimLabel = new JLabel("Max level trim");
        constraints.gridx = 0;
        constraints.gridy = 2;
        constraints.gridwidth = GridBagConstraints.REMAINDER;
        constraints.fill = GridBagConstraints.HORIZONTAL;
        container.add(maxLevelTrimLabel, constraints);

        constraints.gridx = 0;
        constraints.gridy = 3;
        constraints.gridwidth = GridBagConstraints.REMAINDER;
        constraints.fill = GridBagConstraints.HORIZONTAL;
        container.add(maxLevelComboBox, constraints);

        JLabel maxExperienceTrimLabel = new JLabel("Max experience trim");
        constraints.gridx = 0;
        constraints.gridy = 4;
        constraints.gridwidth = GridBagConstraints.REMAINDER;
        constraints.fill = GridBagConstraints.HORIZONTAL;
        container.add(maxExperienceTrimLabel, constraints);

        constraints.gridx = 0;
        constraints.gridy = 5;
        constraints.gridwidth = GridBagConstraints.REMAINDER;
        constraints.fill = GridBagConstraints.HORIZONTAL;
        container.add(maxExperienceComboBox, constraints);

        add(container);
    }

    private JComboBox<String> buildComboBoxPanel(String selectedTrimConfigKey, String selectedFilename) {
        JComboBox<String> comboBox = new JComboBox<>();

        // Forces long item names to not cause the JPanel to overflow.
        comboBox.setPrototypeDisplayValue("");

        refreshComboBoxOptions(comboBox);

        comboBox.addItemListener((e) -> {
            if (e.getStateChange() == ItemEvent.SELECTED && configManager != null)
            {
                configManager.setConfiguration(MaxSkillTrimConfig.GROUP_NAME, selectedTrimConfigKey, e.getItem());
            }
        });

        comboBox.setSelectedItem(selectedFilename);

        return comboBox;
    }

    private void refreshComboBoxOptions(JComboBox<String> comboBox)
    {
        Object selectedItem = comboBox.getSelectedItem();
        comboBox.removeAllItems();

        for (File f : Objects.requireNonNull(MaxSkillTrimPlugin.MAXSKILLTRIMS_DIR.listFiles()))
        {
            comboBox.addItem(f.getName());
        }

        comboBox.setSelectedItem(selectedItem);
    }
}

package com.maxskilltrim;

import javax.imageio.ImageIO;
import javax.inject.Inject;
import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.api.widgets.*;
import net.runelite.client.RuneLite;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Objects;

@Slf4j
@PluginDescriptor(
        name = "Max Skill Trim"
)
public class MaxSkillTrimPlugin extends Plugin
{
    private static final Trim maxLevelTrim = new Trim(-666, TrimType.MAX_LEVEL);
    private static final Trim maxExperienceTrim = new Trim(-667, TrimType.MAX_EXPERIENCE);
    private MaxSkillTrimPanel maxSkillTrimPanel;
    @Inject
    private MaxSkillTrimConfig maxSkillTrimConfig;
    private NavigationButton navButton;
    @Inject
    private ClientToolbar pluginToolbar;
    public static final File MAXSKILLTRIMS_DIR = new File(RuneLite.RUNELITE_DIR.getPath() + File.separator + "max-skill-trims");
    private static final int SCRIPTID_STATS_INIT = 393;
    @Inject
    private Client client;
    @Inject
    private ClientThread clientThread;
    private Widget currentWidget;
    private final Widget[] maxLevelTrimWidgets = new Widget[SkillData.values().length];
    private final Widget[] maxExperienceTrimWidgets = new Widget[SkillData.values().length];

    @Provides
    MaxSkillTrimConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(MaxSkillTrimConfig.class);
    }

    @Override
    protected void startUp() throws Exception
    {
        if (!MAXSKILLTRIMS_DIR.exists())
        {
            MAXSKILLTRIMS_DIR.mkdirs();
        }

        addDefaultTrims();

        maxSkillTrimPanel = injector.getInstance(MaxSkillTrimPanel.class);

        BufferedImage icon;
        synchronized (ImageIO.class)
        {
            icon = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream("/icon.png")));
        }

        navButton = NavigationButton.builder()
                .tooltip("Max Skill Trim")
                .priority(5)
                .icon(icon)
                .panel(maxSkillTrimPanel)
                .build();

        if(maxSkillTrimConfig.getShowNavButton()) {
            pluginToolbar.addNavigation(navButton);
        }

        overrideSprites(maxLevelTrim, maxSkillTrimConfig.getSelectedMaxLevelTrimFilename());
        overrideSprites(maxExperienceTrim, maxSkillTrimConfig.getSelectedMaxExperienceTrimFilename());

        if (client.getGameState() == GameState.LOGGED_IN) {
            clientThread.invoke(this::buildTrimWidgetContainers);
        }
    }

    @Override
    protected void shutDown() throws Exception
    {
        pluginToolbar.removeNavigation(navButton);
        clientThread.invoke(() -> {
            removeTrimWidgetContainers(maxLevelTrimWidgets);
            removeTrimWidgetContainers(maxExperienceTrimWidgets);
        });
    }

    @Subscribe
    public void onScriptPreFired(ScriptPreFired event) {
        if (event.getScriptId() != SCRIPTID_STATS_INIT)	{
            return;
        }
        currentWidget = event.getScriptEvent().getSource();
    }

    @Subscribe
    public void onScriptPostFired(ScriptPostFired event) {
        if (event.getScriptId() == SCRIPTID_STATS_INIT && currentWidget != null) {
            buildTrim(currentWidget);
        }
    }

    private void buildTrimWidgetContainers() {
        Widget skillsContainer = client.getWidget(WidgetInfo.SKILLS_CONTAINER);
        if (skillsContainer == null) {
            return;
        }

        for (Widget skillTile : skillsContainer.getStaticChildren()) {
            buildTrim(skillTile);
        }
    }

    private void removeTrimWidgetContainers(Widget[] trims) {
        for(Widget trim: trims) {
            if (trim == null) {
                continue;
            }

            Widget[] children = trim.getParent().getChildren();
            for (int i = 0; i < children.length; i++) {
                if (trim == children[i]) {
                    children[i] = null;
                }
            }
        }
    }

    private void buildTrim(Widget parent) {
        int idx = WidgetInfo.TO_CHILD(parent.getId()) - 1;
        SkillData skill = SkillData.get(idx);
        if (skill == null) {
            return;
        }

        maxLevelTrimWidgets[idx] = createWidget(parent, skill, maxLevelTrim);
        maxExperienceTrimWidgets[idx] = createWidget(parent, skill, maxExperienceTrim);
    }

    private Widget createWidget(Widget parent, SkillData skill, Trim trim) {
        Widget t = parent.createChild(-1, WidgetType.GRAPHIC)
                .setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP)
                .setOriginalHeight(parent.getOriginalHeight())
                .setOriginalWidth(parent.getOriginalWidth())
                .setWidthMode(parent.getWidthMode())
                .setHeightMode(parent.getHeightMode())
                .setOpacity(255)
                .setSpriteId(trim.spriteID)
                .setHasListener(true);

        JavaScriptCallback cb = ev -> updateTrim(skill, t, trim);
        t.setOnVarTransmitListener(cb);

        t.revalidate();

        return t;
    }

    private void updateTrim(SkillData skill, Widget widget, Trim trim) {
        final int currentXP = client.getSkillExperience(skill.getSkill());
        final boolean isMaxExperience =  currentXP >= Experience.MAX_SKILL_XP;
        final int currentLevel = Experience.getLevelForXp(currentXP);

        switch(trim.trimType) {
            case MAX_LEVEL:
                if(!maxSkillTrimConfig.showMaxLevelTrim() || (isMaxExperience && maxSkillTrimConfig.getShowMaxExperienceTrim())) {
                    widget.setOpacity(255);
                } else if(currentLevel >= Experience.MAX_REAL_LEVEL) {
                    widget.setOpacity(0);
                }
                break;
            case MAX_EXPERIENCE:
                if(!maxSkillTrimConfig.getShowMaxExperienceTrim()) {
                    widget.setOpacity(255);
                } else if(isMaxExperience) {
                    widget.setOpacity(0);
                }
                break;
        }
    }

    void updateTrims() {
        for(int i = 0; i < maxLevelTrimWidgets.length; i++) {
            updateTrim(SkillData.get(i), maxLevelTrimWidgets[i], maxLevelTrim);
        }

        for(int i = 0; i < maxExperienceTrimWidgets.length; i++) {
            updateTrim(SkillData.get(i), maxExperienceTrimWidgets[i], maxExperienceTrim);
        }

    }

    private void addDefaultTrims()
    {
        try
        {
            Files.copy(Objects.requireNonNull(getClass().getResourceAsStream("/full-trim.png")), Paths.get(MAXSKILLTRIMS_DIR.toString(), "/full-trim.png"), StandardCopyOption.REPLACE_EXISTING);
        }
        catch (IOException e)
        {
            log.warn(null, e);
        }
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event)
    {
        if (event.getGroup().equals(MaxSkillTrimConfig.GROUP_NAME))
        {
            switch(event.getKey()) {
                case MaxSkillTrimConfig.SELECTED_MAX_LEVEL_TRIM:
                    overrideSprites(maxLevelTrim, event.getNewValue());
                    break;
                case MaxSkillTrimConfig.SELECTED_MAX_EXPERIENCE_TRIM:
                    overrideSprites(maxExperienceTrim, event.getNewValue());
                    break;
                case MaxSkillTrimConfig.SHOW_MAX_EXPERIENCE_TRIM:
                case MaxSkillTrimConfig.SHOW_MAX_LEVEL_TRIM:
                    clientThread.invokeLater(this::updateTrims);
                    break;
                case MaxSkillTrimConfig.SHOW_NAV_BUTTON:
                    boolean showNavButton = Boolean.TRUE.toString().equals(event.getNewValue());

                    if(showNavButton) pluginToolbar.addNavigation(navButton);
                    if(!showNavButton) pluginToolbar.removeNavigation(navButton);
                    break;
            }
        }
    }

    public SpritePixels getSpritePixels(String filename)
    {
        File spriteFile = new File(MAXSKILLTRIMS_DIR + File.separator + filename);
        if (!spriteFile.exists())
        {
            log.debug("Sprite doesn't exist (" + spriteFile.getPath() + "): ");
            return null;
        }
        try
        {
            synchronized (ImageIO.class)
            {
                BufferedImage image = ImageIO.read(spriteFile);
                return ImageUtil.getImageSpritePixels(image, client);
            }
        }
        catch (RuntimeException | IOException ex)
        {
            log.debug("Unable to find image (" + spriteFile.getPath() + "): ");
        }
        return null;
    }

    void overrideSprites(Trim trim, String filename)
    {
        SpritePixels spritePixels = getSpritePixels(filename);

        if (spritePixels == null)
        {
            return;
        }

        client.getSpriteOverrides().remove(trim.spriteID);
        client.getWidgetSpriteCache().reset();
        client.getSpriteOverrides().put(trim.spriteID, spritePixels);
    }
}

