package com.pollscreenshot;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PollScreenshotPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PollScreenshotPlugin.class);
		RuneLite.main(args);
	}
}
package com.pollscreenshot;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;


@ConfigGroup("pollscreenshot")
public interface PollScreenshotConfig extends Config {


}

package com.pollscreenshot;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.CommandExecuted;
import net.runelite.api.events.SoundEffectPlayed;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.widgets.*;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.FontManager;
import net.runelite.client.util.*;
import org.apache.commons.lang3.StringUtils;

import javax.annotation.Nullable;
import javax.inject.Inject;
import javax.sound.sampled.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ThreadLocalRandom;

@Slf4j
@PluginDescriptor(
        name = "Poll Screenshot",
        description = "Screenshots polls"
)
public class PollScreenshotPlugin extends Plugin
{
    @Inject
    private Client client;

    @Inject
    private PollScreenshotConfig config;

    @Inject
    private KeyManager keyManager;

    @Inject
    private ClientThread clientThread;

    @Inject
    private ItemManager itemManager;

    @Inject
    private ImageCapture imageCapture;

    @Inject
    private SpriteManager spriteManager;

    @Inject
    private ScheduledExecutorService executor;


    private Widget button = null;

    private Map<Integer, Rectangle> overrideBounds = new HashMap<>();

    @Override
    protected void startUp() throws Exception
    {
        clientThread.invokeLater(this::createButton);
    }

    @Override
    protected void shutDown() throws Exception
    {
        clientThread.invoke(this::hideButton);
    }


    @Provides
    PollScreenshotConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(PollScreenshotConfig.class);
    }

    @Subscribe
    public void onWidgetLoaded(WidgetLoaded event)
    {
        if (event.getGroupId() != 345)
        {
            return;
        }

        createButton();
    }

    private void hideButton()
    {
        if (button == null)
        {
            return;
        }

        button.setHidden(true);
        button = null;
    }

    private void createButton()
    {
        Widget parent = client.getWidget(22609920);
        if (parent == null)
        {
            return;
        }

        hideButton();

        button = parent.createChild(-1, WidgetType.GRAPHIC);
        button.setOriginalHeight(20);
        button.setOriginalWidth(20);
        button.setOriginalX(384);
        button.setOriginalY(44);
        button.setSpriteId(573);
        button.setAction(0, "Screenshot");
        button.setOnOpListener((JavaScriptCallback) (e) -> clientThread.invokeLater(this::screenshot));
        button.setHasListener(true);
        button.revalidate();

        button.setOnMouseOverListener((JavaScriptCallback) (e) -> button.setSpriteId(570));
        button.setOnMouseLeaveListener((JavaScriptCallback) (e) -> button.setSpriteId(573));
    }

    private void screenshot()
    {
        if (client.getGameState() != GameState.LOGGED_IN)
        {
            return;
        }

        client.getWidgetSpriteCache().reset();

        final Widget container = client.getWidget(345, 11);
        if (container == null)
        {
            return;
        }

        final Widget[] children = container.getDynamicChildren();
        if (children.length == 0)
        {
            return;
        }

        int height = children[0].getHeight() + children[0].getRelativeY();
        int y = 0;
        for (Widget item : children)
        {
            if (item.getRelativeY() > y)
            {
                y = item.getRelativeY() + 2; // Ensure at least 2pixels of padding exist between elements
                height = y + item.getHeight();
            }
        }

        int width = 469; // Hardcoded minimum width of the interface so that it can be drawn correctly even when on another tab

        final BufferedImage screenshot = new BufferedImage(width, height + 42, BufferedImage.TYPE_INT_ARGB);
        final Graphics graphics = screenshot.getGraphics();

        final BufferedImage background = getSprite(SpriteID.DIALOG_BACKGROUND);
        int x = screenshot.getWidth() / background.getWidth() + 1;
        y = screenshot.getHeight() / background.getHeight() + 1;
        for (int i = 0; i < x; i++)
        {
            for (int z = 0; z < y; z++)
            {
                graphics.drawImage(background, i * background.getWidth(), z * background.getHeight(), null);
            }
        }

        Widget title = client.getWidget(345, 2);

        if (title == null) {
            return;
        }

        Widget titleChildren = title.getChild(1);
        graphics.translate(4,5);
        drawWidget(graphics, titleChildren, titleChildren.getRelativeX(), titleChildren.getRelativeY());
        graphics.translate(0, 30);

        for (final Widget w : children) {
            drawWidget(graphics, w, w.getRelativeX(), w.getRelativeY());
        }

        imageCapture.takeScreenshot(screenshot, "poll", "polls", true, ImageUploadStyle.NEITHER);
    }

    private void drawWidget(Graphics graphics, Widget child, int x, int y)
    {
        if (child == null || child.getType() == 0)
        {
            return;
        }

        int width = child.getWidth();
        int height = child.getHeight();

        if (child.getType() == WidgetType.TEXT)
        {
            String text = Text.removeTags(child.getText());
            Font font = FontManager.getRunescapeSmallFont();

            if (child.getId() == 22609922 || text.contains("Votes:"))
            {
                font = FontManager.getRunescapeBoldFont();
            }

            x = child.getRelativeX() + 2;
            y = child.getRelativeY();
            width = child.getWidth();
            height = child.getHeight();

            final Graphics textLayer = graphics.create(x, y, width, height);
            textLayer.setFont(font);

            int xPos = 3;
            int yPos = 0;

            int textWidth = textLayer.getFontMetrics().stringWidth(text);

            if (child.getXTextAlignment() == 1) {
                xPos = (width - textWidth) / 2 + 1;
            }

            if (child.getYTextAlignment() == 0) {
                yPos = font.getSize() - 3;
            }
            else if (child.getYTextAlignment() == 1) {
                yPos = font.getSize() - 3;
            }
            else if (child.getYTextAlignment() == 2) {
                yPos = font.getSize() - 3;
            }

            ArrayList<String> lines;

            if (child.getOriginalWidth() == 230)
            {
                lines = splitString(graphics, text, 242);
            } else {
                lines = splitString(graphics, text, 480);
            }

            for (String s : lines)
            {
                if (child.getTextShadowed())
                {
                    xPos = 3;

                    if (child.getId() == 22609922 || text.contains("Votes:"))
                    {
                        xPos = (469 / 2) - (textWidth/2) - 2;
                    }

                    textLayer.setColor(Color.BLACK);
                    textLayer.drawString(s, xPos, yPos);

                    xPos -= 1;
                    yPos -= 1;
                }

                textLayer.setColor(new Color(child.getTextColor()));
                textLayer.drawString(s, xPos, yPos);

                if (child.getOriginalWidth() == 230)
                {
                    yPos += textLayer.getFontMetrics().getHeight() - 1;
                } else {
                    yPos += textLayer.getFontMetrics().getHeight() + 2;
                }
            }

            textLayer.dispose();
        }
        else if (child.getType() == WidgetType.RECTANGLE || child.getType() == WidgetType.GRAPHIC)
        {
            if (child.isFilled() && child.getOpacity() == 225 && (child.getTextColor() == 16777215 || child.getTextColor() == 65280))
            {
                String hex;

                if (child.getTextColor() == 65280)
                {
                    hex = "3f542c";
                } else {
                    hex = "5d544a";
                }

                BufferedImage image = new BufferedImage(child.getWidth(), child.getHeight(), BufferedImage.TYPE_INT_ARGB);
                Graphics g = image.getGraphics();
                Color colour = ColorUtil.fromHex(hex);
                g.setColor(colour);
                g.fillRect(0, 0, image.getWidth(), image.getHeight());

                graphics.drawImage(image, child.getRelativeX(), child.getRelativeY(), child.getWidth(), child.getHeight(), null);
                g.dispose();
            }

            if (child.getSpriteId() == 897 || child.getSpriteId() == 297)
            {
                final BufferedImage sprite = getSprite(child.getSpriteId());
                graphics.drawImage(sprite, child.getRelativeX(), child.getRelativeY(), child.getWidth(), child.getHeight(), null);
            } else {
                Color c = new Color(child.getTextColor());
                if (child.getOpacity() > 0)
                {
                    c = new Color(c.getRed(), c.getGreen(), c.getBlue(), child.getOpacity());
                }
                graphics.setColor(c);
                final Rectangle r = child.getBounds();

                graphics.drawRect(child.getRelativeX(), child.getRelativeY(), r.width, r.height);
            }
        }
    }

    @Nullable
    private SpritePixels getPixels(int archive)
    {
        SpritePixels[] sp = client.getSprites(client.getIndexSprites(), archive, 0);
        assert sp != null;
        return sp[0];
    }

    private BufferedImage getSprite(int id)
    {
        SpritePixels sp = getPixels(id);
        assert sp != null;
        return sp.toBufferedImage();
    }

    public ArrayList<String> splitString(Graphics g, String text, int maxWidth) {
        ArrayList<String> lines = new ArrayList<>();
        String[] words = text.split(" ");
        StringBuilder currentLine = new StringBuilder(words[0]);

        for (int i = 1; i < words.length; i++) {
            String word = words[i];
            String tempLine = currentLine.toString() + " " + word;
            int lineWidth = g.getFontMetrics().stringWidth(tempLine);

            if (lineWidth > maxWidth) {
                lines.add(currentLine.toString());
                currentLine = new StringBuilder(word);
            } else {
                currentLine.append(" ").append(word);
            }
        }
        lines.add(currentLine.toString());

        return lines;
    }
}
