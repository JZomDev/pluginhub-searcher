package com.zom;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("toa-keris-cam")
public interface TOAKerisCamConfig extends Config
{
	@ConfigItem(
		keyName = "selfie",
		name = "Include selfies",
		description = "Take pictures of when you Keris",
		position = 0
	)
	default boolean selfie()
	{
		return false;
	}

	@ConfigSection(
		name = "Rooms",
		description = "Enable Keris screen shots in specific rooms",
		position = 1,
		closedByDefault = true
	)
	String roomSection = "roomSection";

	@ConfigItem(
		keyName = "crondis",
		name = "Crondis",
		description = "Take pictures in the Crondis Room",
		position = 1,
		section = roomSection
	)
	default boolean crondis()
	{
		return true;
	}

	@ConfigItem(
		keyName = "zebak",
		name = "Zebak",
		description = "Take pictures in Zebak's Room",
		position = 2,
		section = roomSection
	)
	default boolean zebak()
	{
		return true;
	}

	@ConfigItem(
		keyName = "scabaras",
		name = "Scabaras",
		description = "Take pictures in the Scabaras Room",
		position = 3,
		section = roomSection
	)
	default boolean scabaras()
	{
		return true;
	}

	@ConfigItem(
		keyName = "kephri",
		name = "Kephri",
		description = "Take pictures in Kephri's Room",
		position = 4,
		section = roomSection
	)
	default boolean kephri()
	{
		return true;
	}

	@ConfigItem(
		keyName = "ampeken",
		name = "Ampeken",
		description = "Take pictures in the Ampeken Room",
		position = 5,
		section = roomSection
	)
	default boolean ampeken()
	{
		return true;
	}

	@ConfigItem(
		keyName = "baba",
		name = "Baba",
		description = "Take pictures in Baba's Room",
		position = 6,
		section = roomSection
	)
	default boolean baba()
	{
		return true;
	}

	@ConfigItem(
		keyName = "het",
		name = "Het",
		description = "Take pictures in the Het Room",
		position = 7,
		section = roomSection
	)
	default boolean het()
	{
		return true;
	}

	@ConfigItem(
		keyName = "akkha",
		name = "Akkha",
		description = "Take pictures in Akkha's Room",
		position = 8,
		section = roomSection
	)
	default boolean akkha()
	{
		return true;
	}

	@ConfigItem(
		keyName = "wardens",
		name = "Wardens",
		description = "Take pictures at Wardens",
		position = 9,
		section = roomSection
	)
	default boolean wardens()
	{
		return true;
	}

	@ConfigItem(
		keyName = "includeFrame",
		name = "Include Client Frame",
		description = "Configures whether or not the client frame is included in screenshots",
		position = 5
	)
	default boolean includeFrame()
	{
		return true;
	}

	@ConfigItem(
		keyName = "displayDate",
		name = "Display Date",
		description = "Configures whether or not the report button shows the date the screenshot was taken",
		position = 6
	)
	default boolean displayDate()
	{
		return true;
	}

	@ConfigItem(
		keyName = "notifyWhenTaken",
		name = "Notify When Taken",
		description = "Configures whether or not you are notified when a screenshot has been taken",
		position = 7
	)
	default boolean notifyWhenTaken()
	{
		return true;
	}

	@ConfigItem(
		keyName = "copyScreenshot",
		name = "Copy",
		description = "Configures whether or not screenshots are placed into your clipboard",
		position = 8
	)
	default boolean copyToClipboard()
	{
		return false;
	}
}

package com.zom;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.function.Consumer;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.MainBufferProvider;
import net.runelite.client.ui.DrawManager;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;

public class TOAKerisCamOverlay extends Overlay
{
	private static final DateFormat DATE_FORMAT = new SimpleDateFormat("MMM. dd, yyyy");
	private static final int REPORT_BUTTON_X_OFFSET = 437;

	private final Client client;
	private final DrawManager drawManager;
	private final TOAKerisCamPlugin plugin;

	private final Queue<Consumer<Image>> consumers = new ConcurrentLinkedQueue<>();

	@Inject
	private TOAKerisCamOverlay(Client client, DrawManager drawManager, TOAKerisCamPlugin plugin)
	{
		setPosition(OverlayPosition.DYNAMIC);
		setPriority(OverlayPriority.HIGH);
		setLayer(OverlayLayer.ABOVE_WIDGETS);
		this.client = client;
		this.drawManager = drawManager;
		this.plugin = plugin;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (consumers.isEmpty())
		{
			return null;
		}

		final MainBufferProvider bufferProvider = (MainBufferProvider) client.getBufferProvider();
		final int imageHeight = ((BufferedImage) bufferProvider.getImage()).getHeight();
		final int y = imageHeight - plugin.getReportButton().getHeight() - 1;

		graphics.drawImage(plugin.getReportButton(), REPORT_BUTTON_X_OFFSET, y, null);

		graphics.setFont(FontManager.getRunescapeSmallFont());
		FontMetrics fontMetrics = graphics.getFontMetrics();

		String date = DATE_FORMAT.format(new Date());
		final int dateWidth = fontMetrics.stringWidth(date);
		final int dateHeight = fontMetrics.getHeight();

		final int textX = REPORT_BUTTON_X_OFFSET + plugin.getReportButton().getWidth() / 2 - dateWidth / 2;
		final int textY = y + plugin.getReportButton().getHeight() / 2 + dateHeight / 2;

		graphics.setColor(Color.BLACK);
		graphics.drawString(date, textX + 1, textY + 1);

		graphics.setColor(Color.WHITE);
		graphics.drawString(date, textX, textY);

		// Request the queued screenshots to be taken,
		// now that the timestamp is visible.
		Consumer<Image> consumer;
		while ((consumer = consumers.poll()) != null)
		{
			drawManager.requestNextFrameListener(consumer);
		}

		return null;
	}

	void queueForTimestamp(Consumer<Image> screenshotConsumer)
	{
		if (plugin.getReportButton() == null)
		{
			return;
		}

		consumers.add(screenshotConsumer);
	}
}

package com.zom;

import com.google.common.collect.ImmutableSet;
import com.google.inject.Provides;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Set;
import java.util.concurrent.ScheduledExecutorService;
import java.util.function.Consumer;
import javax.inject.Inject;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.SpriteID;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.ClientTick;
import net.runelite.api.events.GameTick;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientUI;
import net.runelite.client.ui.DrawManager;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ImageCapture;
import net.runelite.client.util.ImageUtil;

@Slf4j
@PluginDescriptor(
	name = "Toa Keris Cam"
)
public class TOAKerisCamPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private TOAKerisCamConfig config;

	@Inject
	private DrawManager drawManager;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private TOAKerisCamOverlay screenshotOverlay;

	@Inject
	private ScheduledExecutorService executor;

	@Inject
	private SpriteManager spriteManager;

	@Getter(AccessLevel.PACKAGE)
	private BufferedImage reportButton;

	@Inject
	private ClientUI clientUi;

	@Inject
	private ImageCapture imageCapture;

	private static final Set<Integer> REPORT_BUTTON_TLIS = ImmutableSet.of(
		InterfaceID.FIXED_VIEWPORT,
		InterfaceID.RESIZABLE_VIEWPORT,
		InterfaceID.RESIZABLE_VIEWPORT_BOTTOM_LINE);

	public static final String SD_KERIS = "Keris";

	private static final int KERIS_SPEC_ANIMID = 9546;

	private final int[] RAID_REGIONS = new int[]{15698, 15700, 14162, 14164, 15186, 15188, 14674, 14676, 15184, 15696, 14160};

	private int clientTickCounter;

	int currentRegion;
	int previousRegion;
	HashMap<String, Integer> playersKerised;
	boolean enabled;

	@Override
	protected void startUp() throws Exception
	{
		currentRegion = -1;
		previousRegion = -1;
		enabled = false;
		clientTickCounter = 0;
		overlayManager.add(screenshotOverlay);
		playersKerised = new HashMap<>();
		spriteManager.getSpriteAsync(SpriteID.CHATBOX_REPORT_BUTTON, 0, s -> reportButton = s);
	}

	@Override
	protected void shutDown() throws Exception
	{
		currentRegion = -1;
		previousRegion = -1;
		enabled = false;
		clientTickCounter = 0;
		playersKerised = null;
		overlayManager.remove(screenshotOverlay);
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged e)
	{
		if (!e.getGroup().equals("toa-keris-cam"))
		{
			return;
		}

		// set region to -1 because it will retrigger onGameTick's check to enable
		previousRegion = -1;
	}

	@Subscribe
	public void onAnimationChanged(AnimationChanged event)
	{
		if (!enabled)
		{
			return;
		}
		if (client.getGameState() != GameState.LOGGED_IN)
		{
			return;
		}

		if (client.getLocalPlayer() == null)
		{
			return;
		}

		if (event.getActor().getAnimation() != KERIS_SPEC_ANIMID)
		{
			return;
		}

		if (event.getActor() == client.getLocalPlayer() && !config.selfie())
		{
			return;
		}

		if (!playersKerised.containsKey(event.getActor().getName()))
		{
			// 30 client ticks later capture the screenshot for player
			playersKerised.put(event.getActor().getName(), clientTickCounter + 30);
		}
	}

	@Subscribe
	protected void onGameTick(GameTick t)
	{
		LocalPoint lp = client.getLocalPlayer().getLocalLocation();
		currentRegion = lp == null ? -1 : WorldPoint.fromLocalInstance(client, lp).getRegionID();

		// not in the raid
		if (Arrays.stream(RAID_REGIONS).noneMatch(region -> region == currentRegion))
		{
			enabled = false;
			previousRegion = currentRegion;
			return;
		}

		// only enable/disable screenshots between regions but checked on game tick
		if (currentRegion != previousRegion)
		{
			switch (currentRegion)
			{
				case 15698:
					enabled = config.crondis();
					break;
				case 15700:
					enabled = config.zebak();
					break;
				case 14162:
					enabled = config.scabaras();
					break;
				case 14164:
					enabled = config.kephri();
					break;
				case 15186:
					enabled = config.ampeken();
					break;
				case 15188:
					enabled = config.baba();
					break;
				case 14674:
					enabled = config.het();
					break;
				case 14676:
					enabled = config.akkha();
					break;
				case 15184:
				case 15696:
					enabled = config.wardens();
					break;
				case 14160:
					enabled = true; // nexus room, who kerises here lol
					break;
				default:
					enabled = false;
			}
		}

		previousRegion = currentRegion;
	}

	@Subscribe
	protected void onClientTick(ClientTick t)
	{
		clientTickCounter++;

		if (playersKerised.isEmpty())
		{
			return;
		}

		playersKerised.entrySet().removeIf(p -> tookPicture(p.getKey()));
	}

	private boolean tookPicture(String playerName)
	{
		if (playersKerised.get(playerName) > clientTickCounter)
		{
			return false;
		}
		takeScreenshot("Keris " + playerName, SD_KERIS);

		return true;
	}

	void takeScreenshot(String fileName, String subDir)
	{
		if (client.getGameState() == GameState.LOGIN_SCREEN)
		{
			// Prevent the screenshot from being captured
			log.info("Login screenshot prevented");
			return;
		}

		Consumer<Image> imageCallback = (img) ->
		{
			// This callback is on the game thread, move to executor thread
			executor.submit(() -> saveScreenshot(fileName, subDir, img));
		};

		if (config.displayDate() && REPORT_BUTTON_TLIS.contains(client.getTopLevelInterfaceId()))
		{
			screenshotOverlay.queueForTimestamp(imageCallback);
		}
		else
		{
			drawManager.requestNextFrameListener(imageCallback);
		}
	}

	private void saveScreenshot(String fileName, String subDir, Image image)
	{
		final BufferedImage screenshot;
		if (!config.includeFrame())
		{
			// just simply copy the image
			screenshot = ImageUtil.bufferedImageFromImage(image);
		}
		else
		{
			screenshot = imageCapture.addClientFrame(image);
		}

		imageCapture.saveScreenshot(screenshot, fileName, subDir, config.notifyWhenTaken(), config.copyToClipboard());
	}

	@Provides
	TOAKerisCamConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(TOAKerisCamConfig.class);
	}
}

package com.zom;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ExamplePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(TOAKerisCamPlugin.class);
		RuneLite.main(args);
	}
}
