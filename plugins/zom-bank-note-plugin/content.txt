package com.zom;

import com.google.gson.annotations.SerializedName;
import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class BankItemNote
{
	@SerializedName("itemid")
	private int itemid;

	@SerializedName("note")
	private String note;

}

package com.zom;

import com.google.common.base.Strings;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.ItemClient;

@Slf4j
@Singleton
public class BankItemNotesManager
{
	Client client;

	ConfigManager configManager;

	ItemClient itemClient;

	private final Gson gson;

	private static final Type typeToken = new TypeToken<List<BankItemNote>>() {}.getType();

	ArrayList<BankItemNote> itemNotesArrayList;

	@Inject
	public BankItemNotesManager(Client client, ItemClient itemClient, Gson gson, ConfigManager configManager)
	{
		this.configManager = configManager;
		this.client = client;
		this.itemClient = itemClient;
		this.gson = gson.newBuilder().create();
	}

	public void refresh()
	{
		String json = configManager.getConfiguration(BankNotesPlugin.CONFIG_GROUP, BankNotesPlugin.CONFIG_KEY);
		if (Strings.isNullOrEmpty(json))
		{
			itemNotesArrayList = new ArrayList<>();
		}
		else
		{

			itemNotesArrayList = gson.fromJson(json, typeToken);
		}
	}

	public void addItem(int itemID, String note)
	{
		// always remove items
		itemNotesArrayList.removeIf(i -> i.getItemid() == itemID);

		// only add items that have a note to be added
		if (!note.equals(""))
		{
			itemNotesArrayList.add(new BankItemNote(itemID, note));
		}

		// save to config
		configManager.setConfiguration(BankNotesPlugin.CONFIG_GROUP, BankNotesPlugin.CONFIG_KEY, gson.toJson(itemNotesArrayList, typeToken));

	}

	public String getItemNote(int itemID)
	{
		Optional<BankItemNote> priceHistoryOptional = itemNotesArrayList.stream().filter(i -> i.getItemid() == itemID).findAny();

		if (priceHistoryOptional.isPresent())
		{
			return priceHistoryOptional.get().getNote();
		}

		return "";
	}
}

package com.zom;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.MenuEntry;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.WidgetUtil;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;
import net.runelite.client.util.ColorUtil;

public class BankItemNotesOverlay extends Overlay
{
	private static final int BANK_ITEM_WIDGETID = ComponentID.BANK_ITEM_CONTAINER;
	private final BankNotesPlugin plugin;
	private final Client client;
	private final BankItemNotesManager itemPriceHistoryManager;
	private final TooltipManager tooltipManager;

	@Inject
	BankItemNotesOverlay(BankNotesPlugin plugin, Client client, BankItemNotesManager itemPriceHistoryManager, TooltipManager tooltipManager)
	{
		setPosition(OverlayPosition.DYNAMIC);
		this.plugin = plugin;
		this.client = client;
		this.itemPriceHistoryManager = itemPriceHistoryManager;
		this.tooltipManager = tooltipManager;
	}
	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (!plugin.isShowPriceHistory()) return null;

		if (client.isMenuOpen())
		{
			return null;
		}

		final MenuEntry[] menuEntries = client.getMenuEntries();
		final int last = menuEntries.length - 1;

		if (last < 0)
		{
			return null;
		}

		final MenuEntry menuEntry = menuEntries[last];
		final int widgetId = menuEntry.getParam1();
		final int groupId = WidgetUtil.componentToInterface(widgetId);

		addTooltip(menuEntry, groupId);
		return null;
	}

	private void addTooltip(MenuEntry menuEntry, int groupId)
	{
		if (groupId == InterfaceID.BANK)
		{
			final String text = makeValueTooltip(menuEntry);
			if (text != null)
			{
				// Make tooltip
				tooltipManager.add(new Tooltip(ColorUtil.prependColorTag(text, new Color(238, 238, 238))));
			}
		}
	}

	private String makeValueTooltip(MenuEntry menuEntry)
	{
		final int widgetId = menuEntry.getParam1();
		ItemContainer container = null;

		if (widgetId == BANK_ITEM_WIDGETID)
		{
			container = client.getItemContainer(InventoryID.BANK);
		}

		if (container == null)
		{
			return null;
		}

		// Find the item in the container to get stack size
		final int index = menuEntry.getParam0();
		final Item item = container.getItem(index);

		if (item == null)
		{
			return null;
		}

		// Disabling both disables all value tooltips
		if (!itemPriceHistoryManager.getItemNote(item.getId()).equals(""))
		{
			return "Item note(s): " + itemPriceHistoryManager.getItemNote(item.getId());
		}
		return null;
	}
}

package com.zom;

import com.google.gson.Gson;
import java.util.function.Consumer;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemComposition;
import net.runelite.api.ItemContainer;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.WidgetUtil;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.chatbox.ChatboxPanelManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import static net.runelite.client.plugins.banktags.tabs.TabInterface.FILTERED_CHARS;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Bank Notes",
	description = "Add Notes to items in your bank",
	tags = "bank,merching,merch,item,history,price,notes"
)
public class BankNotesPlugin extends Plugin
{

	static String CONFIG_GROUP = "itemnotesplugin";
	static String CONFIG_KEY = "itemnotesjson";
	@Inject
	private Client client;

	@Inject
	private ItemManager itemManager;

	@Inject
	private ChatboxPanelManager chatboxPanelManager;

	@Inject
	Gson gson;

	@Inject
	private ClientThread clientThread;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private BankItemNotesOverlay overlay;

	boolean addEditPriceHistory = true;
	@Getter
	boolean showPriceHistory = true;

	@Inject
	BankItemNotesManager itemPriceHistoryManager;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
		itemPriceHistoryManager.refresh();
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onMenuEntryAdded(MenuEntryAdded event)
	{
		final int groupId = WidgetUtil.componentToInterface(event.getActionParam1());

		if (addEditPriceHistory && groupId == InterfaceID.BANK
			&& event.getOption().equals("Examine"))
		{
			String text = "Edit Item Notes";

			client.createMenuEntry(-1)
				.setParam0(event.getActionParam0())
				.setParam1(event.getActionParam1())
				.setTarget(event.getTarget())
				.setOption(text)
				.setType(MenuAction.RUNELITE)
				.setIdentifier(event.getIdentifier())
				.onClick(this::editTags);
		}
	}

	private void editTags(MenuEntry entry)
	{
		int inventoryIndex = entry.getParam0();
		ItemContainer bankContainer = client.getItemContainer(InventoryID.BANK);
		if (bankContainer == null)
		{
			return;
		}
		Item[] items = bankContainer.getItems();
		if (inventoryIndex < 0 || inventoryIndex >= items.length)
		{
			return;
		}
		Item item = bankContainer.getItems()[inventoryIndex];
		if (item == null)
		{
			return;
		}

		int itemId = item.getId();
		ItemComposition itemComposition = itemManager.getItemComposition(itemId);
		String name = itemComposition.getName();

		String initialValue = itemPriceHistoryManager.getItemNote(itemId);

		chatboxPanelManager.openTextInput(name + ": ")
			.addCharValidator(FILTERED_CHARS)
			.value(initialValue)
			.onDone((Consumer<String>) (newValue) ->
				clientThread.invoke(() ->
				{
					itemPriceHistoryManager.addItem(itemId, newValue);
				}))
			.build();
	}
}

package com.zom;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ExamplePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(BankNotesPlugin.class);
		RuneLite.main(args);
	}
}
