package com.extendedhitsplats;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ExtendedHitsplatsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ExtendedHitsplatsPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2022, Ferrariic <ferrariictweet@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.extendedhitsplats;

import com.extendedhitsplats.overlays.ExtendedHitsplatsOverlay;
import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Hitsplat;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.HitsplatApplied;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

@Slf4j
@PluginDescriptor(
	name = "Extended Hitsplats",description = "This plugin will allow you to see more than four hitsplats on a character",enabledByDefault = true, tags = {"extended", "hitsplat"}
)
public class ExtendedHitsplatsPlugin extends Plugin
{
	@Inject
	private Client client;
	@Inject
	private ExtendedHitsplatsConfig config;
	@Inject
	private OverlayManager overlayManager;
	@Inject
	private ExtendedHitsplatsOverlay overlay;
	public static List<HitsplatApplied> appliedHitsplatList = new CopyOnWriteArrayList<>();

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
		log.info("Extended Hitsplats started!");
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
		log.info("Extended Hitsplats stopped!");
	}

	@Subscribe
	public void onHitsplatApplied(HitsplatApplied hitsplatApplied){
		Hitsplat hitsplat = hitsplatApplied.getHitsplat();
		appliedHitsplatList.add(hitsplatApplied);
	}

	@Subscribe
	public void onGameTick(GameTick gameTick){
		int clientGameCycle = client.getGameCycle();
		if (appliedHitsplatList == null){
			return;
		}
		if (appliedHitsplatList.size() == 0){
			return;
		}
		for (HitsplatApplied hitsplatApplied : appliedHitsplatList){
			int disappear = hitsplatApplied.getHitsplat().getDisappearsOnGameCycle();
			if (clientGameCycle > disappear){
				appliedHitsplatList.remove(hitsplatApplied);
			}
		}
	}

	@Provides
	ExtendedHitsplatsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ExtendedHitsplatsConfig.class);
	}
}

package com.extendedhitsplats.overlays;
/*
 * Copyright (c) 2018, Morgan Lewis <https://github.com/MESLewis>
 * Copyright (c) 2022, Ferrariic <ferrariictweet@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import com.extendedhitsplats.ExtendedHitsplatsConfig;
import com.extendedhitsplats.ExtendedHitsplatsPlugin;
import com.extendedhitsplats.HitsplatCategoryEnum;
import com.extendedhitsplats.points.SplatPoints;
import com.extendedhitsplats.utils.Icons;
import net.runelite.api.*;
import net.runelite.api.Point;
import net.runelite.api.events.HitsplatApplied;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.*;

import javax.inject.Inject;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.*;
import java.util.List;

public class ExtendedHitsplatsOverlay extends Overlay
{
    private final ExtendedHitsplatsPlugin plugin;
    private final ExtendedHitsplatsConfig config;
    private final Client client;

    @Inject
    private ExtendedHitsplatsOverlay(ExtendedHitsplatsPlugin plugin, ExtendedHitsplatsConfig config, Client client)
    {
        setPosition(OverlayPosition.DYNAMIC);
        setPriority(OverlayPriority.HIGHEST);
        setLayer(OverlayLayer.ALWAYS_ON_TOP);
        this.plugin = plugin;
        this.config = config;
        this.client = client;
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        List<HitsplatApplied> hitsplatAppliedList = ExtendedHitsplatsPlugin.appliedHitsplatList;
        if (hitsplatAppliedList.size() == 0){
            return null;
        }

        Map<Actor, ArrayList<Hitsplat>> actorListMap = new HashMap<>();
        // organize hitsplats to occur under their respective actors
        for (HitsplatApplied hitsplatApplied : hitsplatAppliedList){
            Hitsplat hitsplat = hitsplatApplied.getHitsplat();
            Actor actor = hitsplatApplied.getActor();
            if (actorListMap.containsKey(actor)){
                ArrayList<Hitsplat> temp = actorListMap.get(actor);
                temp.add(hitsplat);
                actorListMap.put(actor, temp);
            } else {
                actorListMap.put(actor, new ArrayList<>(Arrays.asList(hitsplat)));
            }
        }

        for (Actor actor : actorListMap.keySet()){
            ArrayList<Hitsplat> hitsplats = actorListMap.get(actor);

            HitsplatCategoryEnum hitsplatCategoryEnumConfig = config.hitsplatCategoryEnum();
            switch (hitsplatCategoryEnumConfig){
                case Every_Hitsplat:
                    drawExtendedHitsplats(graphics, actor, hitsplats);
                    break;
                case Single_Normal:
                case Single_BIG:
                    drawSingleHitsplat(graphics, actor, hitsplats, hitsplatCategoryEnumConfig);
                    break;
                }
        }
        return null;
    }

    private void drawExtendedHitsplats(Graphics2D graphics, Actor actor, List<Hitsplat> hitsplats){
        // normal hitsplat construction
        int missOffset = 0;
        for (Hitsplat hitsplat : hitsplats){
            int idx = hitsplats.indexOf(hitsplat);
            int position = idx-missOffset;
            int damage = hitsplat.getAmount();
            int hitsplatType = hitsplat.getHitsplatType();

            if (position >= config.maxHitsplats()){
                continue;
            }

            if ((damage == 0) & (config.removeZeros())){
                missOffset += 1;
                continue;
            }

            if (config.hitsplat2010()){
                damage = damage * 10;
            }

            BufferedImage hitsplatImage = drawHitsplat(hitsplatType, damage, FontManager.getRunescapeSmallFont());
            Point cPoint = actor.getCanvasImageLocation(hitsplatImage, actor.getLogicalHeight()/2);

            if (cPoint == null){
                continue;
            }

            Point p = new Point(cPoint.getX()+1, cPoint.getY()-1);
            Point k = SplatPoints.splatPoints.get(position);
            OverlayUtil.renderImageLocation(graphics, new Point(p.getX()+k.getX(), p.getY()+k.getY()), hitsplatImage);
        }
    }

    private void drawSingleHitsplat(Graphics2D graphics, Actor actor, List<Hitsplat> hitsplats, HitsplatCategoryEnum hitsplatCategoryEnum){
        // makes one big hitsplat with the cumulative amount of tick damage per actor
        int damage = 0;
        for (Hitsplat hitsplat : hitsplats){
            if (hitsplat.getHitsplatType() != HitsplatID.HEAL){
                damage += hitsplat.getAmount();
            }
        }

        if ((damage == 0) & (config.removeZeros())){
            return;
        }

        if (config.hitsplat2010()){
            damage = damage * 10;
        }

        int hitsplatType = HitsplatID.DAMAGE_MAX_ME;;
        Font font = FontManager.getRunescapeSmallFont();
        switch (hitsplatCategoryEnum){
            case Single_Normal:
                hitsplatType = HitsplatID.DAMAGE_MAX_ME;
                font = FontManager.getRunescapeSmallFont();
                break;
            case Single_BIG:
                hitsplatType = -1;
                font = FontManager.getRunescapeBoldFont();
                break;
        }

        BufferedImage hitsplatImage = drawHitsplat(hitsplatType, damage, font);
        Point cPoint = actor.getCanvasImageLocation(hitsplatImage, actor.getLogicalHeight()/2);

        if (cPoint == null){
            return;
        }

        Point p = new Point(cPoint.getX()+1, cPoint.getY()-1);
        OverlayUtil.renderImageLocation(graphics, new Point(p.getX(), p.getY()), hitsplatImage);
    }

    private BufferedImage drawHitsplat(int hitsplat_type, int damage, Font font){
        ImageIcon hitIcon;
        switch (hitsplat_type){
            case HitsplatID.POISON:
                hitIcon = Icons.OSRS_POISON_HITSPLAT;
                break;
            case HitsplatID.BLOCK_ME:
                hitIcon = Icons.OSRS_SELF_MISS_HITSPLAT;
                break;
            case HitsplatID.BLOCK_OTHER:
                hitIcon = Icons.OSRS_OTHER_MISS_HITSPLAT;
                break;
            case HitsplatID.DAMAGE_MAX_ME:
                hitIcon = Icons.OSRS_MAX_HITSPLAT;
                break;
            case HitsplatID.DAMAGE_ME:
                hitIcon = Icons.OSRS_SELF_DAMAGE_HITSPLAT;
                break;
            case HitsplatID.DAMAGE_MAX_ME_CYAN:
                hitIcon = Icons.OSRS_MAX_SHIELD_HITSPLAT;
                break;
            case HitsplatID.DAMAGE_MAX_ME_ORANGE:
                hitIcon = Icons.OSRS_MAX_ARMOUR_HITSPLAT;
                break;
            case HitsplatID.DAMAGE_MAX_ME_WHITE:
                hitIcon = Icons.OSRS_MAX_UNCHARGE_HITSPLAT;
                break;
            case HitsplatID.DAMAGE_MAX_ME_YELLOW:
                hitIcon = Icons.OSRS_MAX_CHARGE_HITSPLAT;
                break;
            case HitsplatID.DAMAGE_ME_CYAN:
                hitIcon = Icons.OSRS_SELF_SHIELD_HITSPLAT;
                break;
            case HitsplatID.DAMAGE_ME_ORANGE:
                hitIcon = Icons.OSRS_SELF_ARMOUR_HITSPLAT;
                break;
            case HitsplatID.DAMAGE_ME_WHITE:
            case HitsplatID.DAMAGE_OTHER_WHITE:
                hitIcon = Icons.OSRS_SELF_UNCHARGE_HITSPLAT;
                break;
            case HitsplatID.DAMAGE_ME_YELLOW:
                hitIcon = Icons.OSRS_SELF_CHARGE_HITSPLAT;
                break;
            case HitsplatID.DAMAGE_OTHER:
                hitIcon = Icons.OSRS_OTHER_DAMAGE_HITSPLAT;
                break;
            case HitsplatID.DISEASE:
                hitIcon = Icons.OSRS_DISEASE_HITSPLAT;
                break;
            case HitsplatID.HEAL:
                hitIcon = Icons.OSRS_HEAL_HITSPLAT;
                break;
            case HitsplatID.VENOM:
                hitIcon = Icons.OSRS_VENOM_HITSPLAT;
                break;
            case HitsplatID.DAMAGE_OTHER_CYAN:
                hitIcon = Icons.OSRS_OTHER_SHIELD_HITSPLAT;
                break;
            case HitsplatID.DAMAGE_OTHER_ORANGE:
                hitIcon = Icons.OSRS_OTHER_ARMOUR_HITSPLAT;
                break;
            case HitsplatID.DAMAGE_OTHER_YELLOW:
                hitIcon = Icons.OSRS_OTHER_CHARGE_HITSPLAT;
                break;
            case 0:
                hitIcon = Icons.OSRS_CORRUPTION_HITSPLAT;
                break;
            case -1:
                hitIcon = Icons.OSRS_BIG_HITSPLAT;
                break;
            default:
                hitIcon = Icons.OSRS_OTHER_POISE_HITSPLAT;
        }
        BufferedImage bi = iconToBuffered(hitIcon);
        Graphics g = bi.getGraphics();
        bi = drawCenteredDamageNumbers(g, String.valueOf(damage), bi, font);
        g.dispose();
        return bi;
    }

    public BufferedImage drawCenteredDamageNumbers(Graphics g, String text, BufferedImage bi, Font font) {
        FontMetrics metrics = g.getFontMetrics(font);
        int x = (bi.getWidth() - metrics.stringWidth(text)) / 2;
        int y = ((bi.getHeight() - metrics.getHeight()) / 2) + metrics.getAscent();
        g.setFont(font);
        // draw shadow
        g.setColor(Color.black);
        g.drawString(text, x+1, y+1);
        // draw normal text
        g.setColor(Color.white);
        g.drawString(text, x, y);
        return bi;
    }

    private BufferedImage iconToBuffered(ImageIcon icon){
        Image image = icon.getImage();
        int height = icon.getIconHeight();
        int width = icon.getIconWidth();
        Image tempImage = image.getScaledInstance(width, height,  java.awt.Image.SCALE_SMOOTH);
        ImageIcon sizedImageIcon = new ImageIcon(tempImage);

        BufferedImage bi = new BufferedImage(
                sizedImageIcon.getIconWidth(),
                sizedImageIcon.getIconHeight(),
                BufferedImage.TYPE_INT_ARGB);
        Graphics g = bi.createGraphics();
        sizedImageIcon.paintIcon(null, g, 0,0);
        g.dispose();
        return bi;
    }
}
package com.extendedhitsplats;

import net.runelite.client.config.*;

@ConfigGroup("extendedhitsplats")
public interface ExtendedHitsplatsConfig extends Config
{
	@ConfigItem(
			position = 1,
			keyName = "maxHitsplats",
			name = "Max Hitsplats",
			description = "Select the maximum number of hitsplats to display per actor."
	)
	@Range(min = 4, max = 255)
	default int maxHitsplats()
	{
		return 255;
	}

	@ConfigItem(
			position = 2,
			keyName = "singleHitsplat",
			name = "Hitsplat Type",
			description = "The type of hitsplat you would like to see in-game."
	)
	default HitsplatCategoryEnum hitsplatCategoryEnum(){return HitsplatCategoryEnum.Every_Hitsplat;}

	@ConfigItem(
			position = 3,
			keyName = "removeZeros",
			name = "Remove Zeros",
			description = "Hide hitsplats with zeros or misses."
	)
	default boolean removeZeros()
	{
		return false;
	}

	@ConfigItem(
			position = 4,
			keyName = "hitSplat2010",
			name = "2010 Hitsplat",
			description = "Multiply your hitsplat by 10, just like in 2010!"
	)
	default boolean hitsplat2010(){return false;}

}

package com.extendedhitsplats.utils;

import com.extendedhitsplats.ExtendedHitsplatsPlugin;
import net.runelite.client.util.ImageUtil;

import javax.swing.*;

public class Icons {
    // osrs hitsplats
    private static final Class<?> PLUGIN_CLASS = ExtendedHitsplatsPlugin.class;
    public static final ImageIcon OSRS_BIG_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/big_hitsplat.png"));
    public static final ImageIcon OSRS_ALT_CHARGE_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/alt_charge_hitsplat.png"));
    public static final ImageIcon OSRS_ALT_UNCHARGE_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/alt_uncharge_hitsplat.png"));
    public static final ImageIcon OSRS_CORRUPTION_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/corruption_hitsplat.png"));
    public static final ImageIcon OSRS_DISEASE_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/disease_hitsplat.png"));
    public static final ImageIcon OSRS_HEAL_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/heal_hitsplat.png"));
    public static final ImageIcon OSRS_MAX_ARMOUR_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/max_armour_hitsplat.png"));
    public static final ImageIcon OSRS_MAX_CHARGE_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/max_charge_hitsplat.png"));
    public static final ImageIcon OSRS_MAX_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/max_hitsplat.png"));
    public static final ImageIcon OSRS_MAX_POISE_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/max_poise_hitsplat.png"));
    public static final ImageIcon OSRS_MAX_SHIELD_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/max_shield_hitsplat.png"));
    public static final ImageIcon OSRS_MAX_UNCHARGE_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/max_uncharge_hitsplat.png"));
    public static final ImageIcon OSRS_OTHER_ARMOUR_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/other_armour_hitsplat.png"));
    public static final ImageIcon OSRS_OTHER_CHARGE_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/other_charge_hitsplat.png"));
    public static final ImageIcon OSRS_OTHER_DAMAGE_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/other_damage_hitsplat.png"));
    public static final ImageIcon OSRS_OTHER_MISS_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/other_miss_hitsplat.png"));
    public static final ImageIcon OSRS_OTHER_POISE_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/other_poise_hitsplat.png"));
    public static final ImageIcon OSRS_OTHER_SHIELD_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/other_shield_hitsplat.png"));
    public static final ImageIcon OSRS_POISON_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/poison_hitsplat.png"));
    public static final ImageIcon OSRS_SELF_ARMOUR_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/self_armour_hitsplat.png"));
    public static final ImageIcon OSRS_SELF_CHARGE_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/self_charge_hitsplat.png"));
    public static final ImageIcon OSRS_SELF_DAMAGE_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/self_damage_hitsplat.png"));
    public static final ImageIcon OSRS_SELF_MISS_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/self_miss_hitsplat.png"));
    public static final ImageIcon OSRS_SELF_POISE_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/self_poise_hitsplat.png"));
    public static final ImageIcon OSRS_SELF_SHIELD_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/self_shield_hitsplat.png"));
    public static final ImageIcon OSRS_SELF_UNCHARGE_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/self_uncharge_hitsplat.png"));
    public static final ImageIcon OSRS_VENOM_HITSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS, "/com/extendedhitsplats/hitsplats/osrs/venom_hitsplat.png"));

}

/*
 * Copyright (c) 2022, Ferrariic <ferrariictweet@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.extendedhitsplats.points;

import net.runelite.api.Point;

import java.util.*;

public class SplatPoints {
    public static Map<Integer, Point> splatPoints = new HashMap<Integer, Point>() {{
        put(0, new Point(0,0));
        put(1, new Point(0,-20));
        put(2, new Point(20,-10));
        put(3, new Point(-20,-10));
        put(4, new Point(20,-30));
        put(5, new Point(-40,-20));
        put(6, new Point(-20,-30));
        put(7, new Point(40,-20));
        put(8, new Point(-40,0));
        put(9, new Point(20,10));
        put(10, new Point(40,0));
        put(11, new Point(-20,10));
        put(12, new Point(-40,-40));
        put(13, new Point(60,-30));
        put(14, new Point(40,-40));
        put(15, new Point(60,-10));
        put(16, new Point(0,-40));
        put(17, new Point(60,10));
        put(18, new Point(-60,-30));
        put(19, new Point(-60,-10));
        put(20, new Point(-40,20));
        put(21, new Point(40,20));
        put(22, new Point(-60,10));
        put(23, new Point(0,20));
        put(24, new Point(-60,-50));
        put(25, new Point(-20,-50));
        put(26, new Point(-80,-40));
        put(27, new Point(-80,-20));
        put(28, new Point(80,-20));
        put(29, new Point(80,0));
        put(30, new Point(-80,0));
        put(31, new Point(60,30));
        put(32, new Point(60,-50));
        put(33, new Point(-80,20));
        put(34, new Point(80,20));
        put(35, new Point(-20,30));
        put(36, new Point(20,30));
        put(37, new Point(20,-50));
        put(38, new Point(80,-40));
        put(39, new Point(-60,30));
        put(40, new Point(-100,10));
        put(41, new Point(-80,40));
        put(42, new Point(-80,-60));
        put(43, new Point(-40,40));
        put(44, new Point(100,-50));
        put(45, new Point(-100,-50));
        put(46, new Point(0,40));
        put(47, new Point(100,-10));
        put(48, new Point(-40,-60));
        put(49, new Point(-100,-10));
        put(50, new Point(0,-60));
        put(51, new Point(100,30));
        put(52, new Point(40,40));
        put(53, new Point(-100,30));
        put(54, new Point(80,40));
        put(55, new Point(40,-60));
        put(56, new Point(100,-30));
        put(57, new Point(-100,-30));
        put(58, new Point(100,10));
        put(59, new Point(80,-60));
        put(60, new Point(100,50));
        put(61, new Point(120,-60));
        put(62, new Point(-100,50));
        put(63, new Point(-120,-60));
        put(64, new Point(120,-20));
        put(65, new Point(-20,-70));
        put(66, new Point(-120,-20));
        put(67, new Point(120,20));
        put(68, new Point(-60,50));
        put(69, new Point(-120,20));
        put(70, new Point(20,-70));
        put(71, new Point(-20,50));
        put(72, new Point(120,-40));
        put(73, new Point(60,-70));
        put(74, new Point(120,0));
        put(75, new Point(-120,-40));
        put(76, new Point(100,-70));
        put(77, new Point(20,50));
        put(78, new Point(-100,-70));
        put(79, new Point(120,40));
        put(80, new Point(-120,0));
        put(81, new Point(60,50));
        put(82, new Point(-120,40));
        put(83, new Point(-60,-70));
        put(84, new Point(-140,50));
        put(85, new Point(140,-30));
        put(86, new Point(40,-80));
        put(87, new Point(140,10));
        put(88, new Point(-140,-50));
        put(89, new Point(140,50));
        put(90, new Point(80,60));
        put(91, new Point(-140,-10));
        put(92, new Point(80,-80));
        put(93, new Point(120,60));
        put(94, new Point(120,-80));
        put(95, new Point(-140,30));
        put(96, new Point(140,-50));
        put(97, new Point(-120,60));
        put(98, new Point(-80,60));
        put(99, new Point(140,-10));
        put(100, new Point(-120,-80));
        put(101, new Point(-80,-80));
        put(102, new Point(-140,-70));
        put(103, new Point(140,30));
        put(104, new Point(-40,60));
        put(105, new Point(40,60));
        put(106, new Point(-140,-30));
        put(107, new Point(0,60));
        put(108, new Point(-40,-80));
        put(109, new Point(-140,10));
        put(110, new Point(140,-70));
        put(111, new Point(0,-80));
        put(112, new Point(160,40));
        put(113, new Point(-160,-20));
        put(114, new Point(-20,70));
        put(115, new Point(60,-90));
        put(116, new Point(-140,-90));
        put(117, new Point(100,-90));
        put(118, new Point(-160,20));
        put(119, new Point(-100,-90));
        put(120, new Point(160,-60));
        put(121, new Point(-160,60));
        put(122, new Point(20,70));
        put(123, new Point(140,-90));
        put(124, new Point(160,-20));
        put(125, new Point(-160,-80));
        put(126, new Point(-60,-90));
        put(127, new Point(160,20));
        put(128, new Point(-160,-40));
        put(129, new Point(60,70));
        put(130, new Point(-160,0));
        put(131, new Point(-140,70));
        put(132, new Point(160,60));
        put(133, new Point(100,70));
        put(134, new Point(-100,70));
        put(135, new Point(-20,-90));
        put(136, new Point(-160,40));
        put(137, new Point(160,-80));
        put(138, new Point(140,70));
        put(139, new Point(160,-40));
        put(140, new Point(-60,70));
        put(141, new Point(20,-90));
        put(142, new Point(160,0));
        put(143, new Point(-160,-60));
        put(144, new Point(180,-70));
        put(145, new Point(-180,-50));
        put(146, new Point(-80,80));
        put(147, new Point(-80,-100));
        put(148, new Point(180,-30));
        put(149, new Point(160,-100));
        put(150, new Point(160,80));
        put(151, new Point(-180,-10));
        put(152, new Point(-120,80));
        put(153, new Point(180,10));
        put(154, new Point(-180,30));
        put(155, new Point(-40,-100));
        put(156, new Point(-40,80));
        put(157, new Point(180,50));
        put(158, new Point(-180,70));
        put(159, new Point(0,-100));
        put(160, new Point(180,-90));
        put(161, new Point(0,80));
        put(162, new Point(-180,-70));
        put(163, new Point(180,-50));
        put(164, new Point(-180,-30));
        put(165, new Point(40,80));
        put(166, new Point(40,-100));
        put(167, new Point(180,-10));
        put(168, new Point(-180,10));
        put(169, new Point(180,30));
        put(170, new Point(-180,50));
        put(171, new Point(-160,-100));
        put(172, new Point(-120,-100));
        put(173, new Point(-160,80));
        put(174, new Point(80,80));
        put(175, new Point(80,-100));
        put(176, new Point(180,70));
        put(177, new Point(-180,-90));
        put(178, new Point(120,-100));
        put(179, new Point(120,80));
        put(180, new Point(200,-40));
        put(181, new Point(60,90));
        put(182, new Point(-20,-110));
        put(183, new Point(-140,90));
        put(184, new Point(-200,-40));
        put(185, new Point(100,90));
        put(186, new Point(200,0));
        put(187, new Point(-100,90));
        put(188, new Point(-200,0));
        put(189, new Point(200,40));
        put(190, new Point(20,-110));
        put(191, new Point(200,80));
        put(192, new Point(200,-100));
        put(193, new Point(-200,40));
        put(194, new Point(140,90));
        put(195, new Point(-180,-110));
        put(196, new Point(180,90));
        put(197, new Point(200,-60));
        put(198, new Point(-60,90));
        put(199, new Point(-200,-100));
        put(200, new Point(-200,80));
        put(201, new Point(60,-110));
        put(202, new Point(200,-20));
        put(203, new Point(-140,-110));
        put(204, new Point(-200,-60));
        put(205, new Point(100,-110));
        put(206, new Point(-100,-110));
        put(207, new Point(-20,90));
        put(208, new Point(200,20));
        put(209, new Point(-200,-20));
        put(210, new Point(-200,20));
        put(211, new Point(200,60));
        put(212, new Point(140,-110));
        put(213, new Point(20,90));
        put(214, new Point(-60,-110));
        put(215, new Point(-200,60));
        put(216, new Point(180,-110));
        put(217, new Point(-180,90));
        put(218, new Point(200,-80));
        put(219, new Point(-200,-80));
        put(220, new Point(40,-120));
        put(221, new Point(-220,-10));
        put(222, new Point(220,70));
        put(223, new Point(220,-110));
        put(224, new Point(40,100));
        put(225, new Point(-220,30));
        put(226, new Point(220,-70));
        put(227, new Point(-160,-120));
        put(228, new Point(-220,70));
        put(229, new Point(-220,-110));
        put(230, new Point(80,-120));
        put(231, new Point(220,-30));
        put(232, new Point(80,100));
        put(233, new Point(120,-120));
        put(234, new Point(-160,100));
        put(235, new Point(-220,-70));
        put(236, new Point(120,100));
        put(237, new Point(220,10));
        put(238, new Point(-120,-120));
        put(239, new Point(-220,-30));
        put(240, new Point(-80,-120));
        put(241, new Point(220,50));
        put(242, new Point(160,-120));
        put(243, new Point(-220,10));
        put(244, new Point(-120,100));
        put(245, new Point(-80,100));
        put(246, new Point(220,-90));
        put(247, new Point(220,90));
        put(248, new Point(-220,50));
        put(249, new Point(160,100));
        put(250, new Point(-40,-120));
        put(251, new Point(200,-120));
        put(252, new Point(220,-50));
        put(253, new Point(-220,90));
        put(254, new Point(-220,-90));
        put(255, new Point(0,-120));
        put(256, new Point(220,-10));
        put(257, new Point(-200,-120));
        put(258, new Point(-40,100));
        put(259, new Point(200,100));
        put(260, new Point(-220,-50));
        put(261, new Point(0,100));
        put(262, new Point(220,30));
        put(263, new Point(-200,100));
    }};
}

package com.extendedhitsplats;
import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum HitsplatCategoryEnum {
    Every_Hitsplat,
    Single_Normal,
    Single_BIG,
}

