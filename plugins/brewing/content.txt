package com.brewing;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class BrewingPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(BrewingPlugin.class);
		RuneLite.main(args);
	}
}
package com.brewing;

import com.google.inject.Provides;
import java.awt.image.BufferedImage;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.Notifier;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;
import net.runelite.client.util.ImageUtil;

@Slf4j
@PluginDescriptor(
		name = "Brewing",
		description = "Brewing Overlay",
		tags = {"cooking", "skilling", "overlay"}
)
public class BrewingPlugin extends Plugin {
	@Inject
	private Client client;

	@Inject
	private InfoBoxManager infoBoxManager;

	@Inject
	private Notifier notifier;

	@Inject
	private ChatMessageManager chatMessageManager;

	@Inject
	private BrewingConfig config;

	public static final String KELDAGRIM_NAME = "Keldagrim";
	private static final int KELDAGRIM_VAT_VARBIT = 736;
	private static final int KELDAGRIM_STUFF_VARBIT = 2294;
	private static final int KELDAGRIM_BARREL_VARBIT = 738;

	public static final String PORT_PHASMATYS_NAME = "Port Phasmatys";
	private static final int PORT_PHASMATYS_VAT_VARBIT = 737;
	private static final int PORT_PHASMATYS_STUFF_VARBIT = 2295;
	private static final int PORT_PHASMATYS_BARREL_VARBIT = 739;

	private boolean infoboxInit;

	private static final BufferedImage VAT_IMAGE = ImageUtil.loadImageResource(BrewingPlugin.class, "/com/brewing/vat.png");
	private static final BufferedImage BARREL_IMAGE = ImageUtil.loadImageResource(BrewingPlugin.class, "/com/brewing/barrel.png");
	private static final BufferedImage THE_STUFF_VAT_IMAGE = ImageUtil.loadImageResource(BrewingPlugin.class, "/com/brewing/vat_stuff.png");

	@Provides
	BrewingConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(BrewingConfig.class);
	}

	@Override
	protected void startUp()
	{
		infoboxInit = false;
	}

	@Override
	protected void shutDown()
	{
		removeInfoBoxes();
		infoboxInit = false;
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged e) {
		if (!e.getGroup().equals(BrewingConfig.GROUP)) {
			return;
		}
		infoboxInit = false;
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged varbitChanged) {
		int var = varbitChanged.getVarbitId();

		if ((var == KELDAGRIM_VAT_VARBIT || var == PORT_PHASMATYS_VAT_VARBIT) &&
				(BrewingVatState.isCompletedNormal(varbitChanged.getValue()) ||
				 BrewingVatState.isCompletedMature(varbitChanged.getValue())))
		{
			if (config.notifyOnCompletion())
			{
				notifier.notify(
					"You have "
						+ BrewingVatState.toString(varbitChanged.getValue())
						+ " waiting to be collected in the "
						+ (var == KELDAGRIM_VAT_VARBIT ? "Keldagrim" : "Port Phasmatys")
						+ " vat."
				);
			}

			if (config.chatMessageOnCompletion())
			{
				sendChatMessage(
					"You have "
						+ BrewingVatState.toString(varbitChanged.getValue())
						+ " waiting to be collected in the "
						+ (var == KELDAGRIM_VAT_VARBIT ? "Keldagrim" : "Port Phasmatys")
						+ " vat."
				);
			}
		}

		if (var == KELDAGRIM_VAT_VARBIT || var == PORT_PHASMATYS_VAT_VARBIT ||
				var == KELDAGRIM_STUFF_VARBIT || var == PORT_PHASMATYS_STUFF_VARBIT ||
				var == KELDAGRIM_BARREL_VARBIT || var == PORT_PHASMATYS_BARREL_VARBIT) {
			removeInfoBoxes();
			addInfoBoxes();
		}
	}

	private void addInfoBoxes()
	{
		BufferedImage KELDAGRIM_VAT_IMAGE = client.getVarbitValue(KELDAGRIM_STUFF_VARBIT) == 1 ? THE_STUFF_VAT_IMAGE : VAT_IMAGE;
		BufferedImage PORT_PHASMATYS_VAT_IMAGE = client.getVarbitValue(PORT_PHASMATYS_STUFF_VARBIT) == 1 ? THE_STUFF_VAT_IMAGE : VAT_IMAGE;

		infoBoxManager.addInfoBox(new BrewingVat(KELDAGRIM_NAME, client.getVarbitValue(KELDAGRIM_VAT_VARBIT), KELDAGRIM_VAT_IMAGE, this, config));
		infoBoxManager.addInfoBox(new BrewingVat(PORT_PHASMATYS_NAME, client.getVarbitValue(PORT_PHASMATYS_VAT_VARBIT), PORT_PHASMATYS_VAT_IMAGE, this, config));
		infoBoxManager.addInfoBox(new BrewingBarrel(KELDAGRIM_NAME, client.getVarbitValue(KELDAGRIM_BARREL_VARBIT), BARREL_IMAGE, this, config));
		infoBoxManager.addInfoBox(new BrewingBarrel(PORT_PHASMATYS_NAME, client.getVarbitValue(PORT_PHASMATYS_BARREL_VARBIT), BARREL_IMAGE, this, config));
	}

	private void removeInfoBoxes()
	{
		infoBoxManager.removeIf(t -> t instanceof BrewingVat || t instanceof BrewingBarrel);
	}

	private void sendChatMessage(String chatMessage)
	{
		final String message = new ChatMessageBuilder()
			.append(ChatColorType.HIGHLIGHT)
			.append(chatMessage)
			.build();

		chatMessageManager.queue(
			QueuedMessage.builder()
				.type(ChatMessageType.CONSOLE)
				.runeLiteFormattedMessage(message)
				.build());
	}
}
package com.brewing;

import com.google.common.collect.Sets;
import java.util.Arrays;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
@Getter
public enum BrewingVatState {
	EMPTY(0),
	WATER(1),
	BARLEY(2),

	/* Dwarven Stout */
	HAMMERSTONE_HOPS(4),
	FERMENTING_DWARVEN_STOUT_STATE_1(5),
	FERMENTING_DWARVEN_STOUT_STATE_2(6),
	DWARVEN_STOUT(7),
	MATURE_DWARVEN_STOUT(8),

	/* Asgarnian Ale */
	ASGARNIAN_HOPS(10),
	FERMENTING_ASGARNIAN_ALE_STATE_1(11),
	FERMENTING_ASGARNIAN_ALE_STATE_2(12),
	ASGARNIAN_ALE(13),
	MATURE_ASGARNIAN_ALE(14),

	/* Greenman's Ale */
	HARRALANDER(16),
	FERMENTING_GREENMANS_ALE_STATE_1(17),
	FERMENTING_GREENMANS_ALE_STATE_2(18),
	GREENMANS_ALE(19),
	MATURE_GREENMANS_ALE(20),

	/* Wizard's Mind Bomb */
	YANILLIAN_HOPS(22),
	FERMENTING_WIZARDS_MIND_BOMB_STATE_1(23),
	FERMENTING_WIZARDS_MIND_BOMB_STATE_2(24),
	WIZARDS_MIND_BOMB(25),
	MATURE_WIZARDS_MIND_BOMB(26),

	/* Dragon Bitter */
	KRANDORIAN_HOPS(28),
	FERMENTING_DRAGON_BITTER_STATE_1(29),
	FERMENTING_DRAGON_BITTER_STATE_2(30),
	DRAGON_BITTER(31),
	MATURE_DRAGON_BITTER(32),

	/* Moonlight Mead */
	MUSHROOMS(34),
	FERMENTING_MOONLIGHT_MEAD_STATE_1(35),
	FERMENTING_MOONLIGHT_MEAD_STATE_2(36),
	MOONLIGHT_MEAD(37),
	MATURE_MOONLIGHT_MEAD(38),

	/* Axeman's Folly */
	OAK_ROOTS(40),
	FERMENTING_AXEMANS_FOLLY_STATE_1(41),
	FERMENTING_AXEMANS_FOLLY_STATE_2(42),
	AXEMANS_FOLLY(43),
	MATURE_AXEMANS_FOLLY(44),

	/* Chef's Delight */
	CHOCOLATE_DUST(46),
	FERMENTING_CHEFS_DELIGHT_STATE_1(47),
	FERMENTING_CHEFS_DELIGHT_STATE_2(48),
	CHEFS_DELIGHT(49),
	MATURE_CHEFS_DELIGHT(50),

	/* Slayer's Respite */
	WILDBLOOD_HOPS(52),
	FERMENTING_SLAYERS_RESPITE_STATE_1(53),
	FERMENTING_SLAYERS_RESPITE_STATE_2(54),
	SLAYERS_RESPITE(55),
	MATURE_SLAYERS_RESPITE(56),

	/* Cider */
	APPLE_MUSH(58),
	FERMENTING_CIDER_STATE_1(59),
	FERMENTING_CIDER_STATE_2(60),
	CIDER(61),
	MATURE_CIDER(62),

	/* Kelda Stout */
	KELDA_HOPS(68),
	FERMENTING_KELDA_STOUT_STATE_1(69),
	FERMENTING_KELDA_STOUT_STATE_2(70),
	KELDA_STOUT(71),

	BAD_ALE(64),
	BAD_CIDER(65),

	UNKNOWN(-1),
	UNINITIALIZED(-2);

	private static final Map<Integer, BrewingVatState> map;
	static {
		map = Arrays.stream(values())
				.collect(Collectors.toMap(e -> e.value, e -> e));
	}

	public static BrewingVatState fromInt(int value) {
		return Optional.ofNullable(map.get(value)).orElse(UNKNOWN);
	}

	public static final Set<BrewingVatState> PARTIAL_STATES = Sets.immutableEnumSet(
			WATER,
			BARLEY,
			HAMMERSTONE_HOPS,
			ASGARNIAN_HOPS,
			HARRALANDER,
			YANILLIAN_HOPS,
			KRANDORIAN_HOPS,
			MUSHROOMS,
			OAK_ROOTS,
			CHOCOLATE_DUST,
			WILDBLOOD_HOPS,
			APPLE_MUSH,
			KELDA_HOPS
	);

	public static final Set<BrewingVatState> FAILURE_STATES = Sets.immutableEnumSet(
			BAD_ALE,
			BAD_CIDER
	);

	public static final Set<BrewingVatState> COMPLETE_NORMAL_STATES = Sets.immutableEnumSet(
			DWARVEN_STOUT,
			ASGARNIAN_ALE,
			GREENMANS_ALE,
			WIZARDS_MIND_BOMB,
			DRAGON_BITTER,
			MOONLIGHT_MEAD,
			AXEMANS_FOLLY,
			CHEFS_DELIGHT,
			SLAYERS_RESPITE,
			CIDER,
			KELDA_STOUT
	);

	public static final Set<BrewingVatState> COMPLETE_MATURE_STATES = Sets.immutableEnumSet(
			MATURE_DWARVEN_STOUT,
			MATURE_ASGARNIAN_ALE,
			MATURE_GREENMANS_ALE,
			MATURE_WIZARDS_MIND_BOMB,
			MATURE_DRAGON_BITTER,
			MATURE_MOONLIGHT_MEAD,
			MATURE_AXEMANS_FOLLY,
			MATURE_CHEFS_DELIGHT,
			MATURE_SLAYERS_RESPITE,
			MATURE_CIDER
	);

	private final int value;

	public static boolean isBad(int value)
	{
		return Stream.of(BrewingVatState.fromInt(value)).anyMatch(BrewingVatState.FAILURE_STATES::contains);
	}

	public static boolean isPartial(int value)
	{
		return Stream.of(BrewingVatState.fromInt(value)).anyMatch(BrewingVatState.PARTIAL_STATES::contains);
	}

	public static boolean isCompletedNormal(int value)
	{
		return Stream.of(BrewingVatState.fromInt(value)).anyMatch(BrewingVatState.COMPLETE_NORMAL_STATES::contains);
	}

	public static boolean isCompletedMature(int value)
	{
		return Stream.of(BrewingVatState.fromInt(value)).anyMatch(BrewingVatState.COMPLETE_MATURE_STATES::contains);
	}

	public static String toString(int value)
	{
		switch (BrewingVatState.fromInt(value))
		{
			case EMPTY:
				return "Empty";
			case WATER:
				return "Water";
			case BARLEY:
				return "Barley";

			/* Dwarven Stout */
			case HAMMERSTONE_HOPS:
				return "Hammerstone Hops";
			case FERMENTING_DWARVEN_STOUT_STATE_1:
			case FERMENTING_DWARVEN_STOUT_STATE_2:
				return "Fermenting Dwarven Stout";
			case DWARVEN_STOUT:
				return "Dwarven Stout";
			case MATURE_DWARVEN_STOUT:
				return "Mature Dwarven Stout";

			/* Asgarnian Ale */
			case ASGARNIAN_HOPS:
				return "Asgarnian Hops";
			case FERMENTING_ASGARNIAN_ALE_STATE_1:
			case FERMENTING_ASGARNIAN_ALE_STATE_2:
				return "Fermenting Asgnarian Ale";
			case ASGARNIAN_ALE:
				return "Asgarnian Ale";
			case MATURE_ASGARNIAN_ALE:
				return "Mature Asgarnian Ale";

			/* Greenman's Ale */
			case HARRALANDER:
				return "Harralander";
			case FERMENTING_GREENMANS_ALE_STATE_1:
			case FERMENTING_GREENMANS_ALE_STATE_2:
				return "Fermenting Greenman's Ale";
			case GREENMANS_ALE:
				return "Greenman's Ale";
			case MATURE_GREENMANS_ALE:
				return "Mature Greenman's Ale";

			/* Wizard's Mind Bomb */
			case YANILLIAN_HOPS:
				return "Yanillian Hops";
			case FERMENTING_WIZARDS_MIND_BOMB_STATE_1:
			case FERMENTING_WIZARDS_MIND_BOMB_STATE_2:
				return "Fermenting Wizard's Mind Bomb";
			case WIZARDS_MIND_BOMB:
				return "Wizard's Mind Bomb";
			case MATURE_WIZARDS_MIND_BOMB:
				return "Mature Wizard's Mind Bomb";

			/* Dragon Bitter */
			case KRANDORIAN_HOPS:
				return "Krandorian Hops";
			case FERMENTING_DRAGON_BITTER_STATE_1:
			case FERMENTING_DRAGON_BITTER_STATE_2:
				return "Fermenting Dragon Bitter";
			case DRAGON_BITTER:
				return "Dragon Bitter";
			case MATURE_DRAGON_BITTER:
				return "Mature Dragon Bitter";

			/* Moonlight Mead */
			case MUSHROOMS:
				return "Mushrooms";
			case FERMENTING_MOONLIGHT_MEAD_STATE_1:
			case FERMENTING_MOONLIGHT_MEAD_STATE_2:
				return "Fermenting Moonlight Mead";
			case MOONLIGHT_MEAD:
				return "Moonlight Mead";
			case MATURE_MOONLIGHT_MEAD:
				return "Mature Moonlight Mead";

			/* Axeman's Folly */
			case OAK_ROOTS:
				return "Oak Roots";
			case FERMENTING_AXEMANS_FOLLY_STATE_1:
			case FERMENTING_AXEMANS_FOLLY_STATE_2:
				return "Fermenting Axeman's Folly";
			case AXEMANS_FOLLY:
				return "Axeman's Folly";
			case MATURE_AXEMANS_FOLLY:
				return "Mature Axeman's Folly";

			/* Chef's Delight */
			case CHOCOLATE_DUST:
				return "Chocolate Dust";
			case FERMENTING_CHEFS_DELIGHT_STATE_1:
			case FERMENTING_CHEFS_DELIGHT_STATE_2:
				return "Fermenting Chef's Delight";
			case CHEFS_DELIGHT:
				return "Chef's Delight";
			case MATURE_CHEFS_DELIGHT:
				return "Chef's Delight";

			/* Slayer's Respite */
			case WILDBLOOD_HOPS:
				return "Wildblood Hops";
			case FERMENTING_SLAYERS_RESPITE_STATE_1:
			case FERMENTING_SLAYERS_RESPITE_STATE_2:
				return "Fermenting Slayer's Respite";
			case SLAYERS_RESPITE:
				return "Slayer's Respite";
			case MATURE_SLAYERS_RESPITE:
				return "Mature Slayer's Respite";

			/* Cider */
			case APPLE_MUSH:
				return "Apple Mush";
			case FERMENTING_CIDER_STATE_1:
			case FERMENTING_CIDER_STATE_2:
				return "Fermenting Cider";
			case CIDER:
				return "Cider";
			case MATURE_CIDER:
				return "Mature Cider";

			/* Kelda Stout */
			case KELDA_HOPS:
				return "Kelda Hops";
			case FERMENTING_KELDA_STOUT_STATE_1:
			case FERMENTING_KELDA_STOUT_STATE_2:
				return "Fermenting Kelda Stout";
			case KELDA_STOUT:
				return "Kelda Stout";

			case BAD_ALE:
				return "Bad Ale";
			case BAD_CIDER:
				return "Bad Cider";

			case UNKNOWN:
				return "Unknown";
			case UNINITIALIZED:
				return "Uninitialized";
			default:
				return "?";
		}
	}
}

package com.brewing;

import java.awt.Color;
import java.awt.image.BufferedImage;
import net.runelite.client.ui.overlay.infobox.InfoBox;
import net.runelite.client.ui.overlay.infobox.InfoBoxPriority;

public class BrewingBarrel extends InfoBox
{
	private final String location;
	private final int barrel;
	private final BrewingPlugin plugin;
	private final BrewingConfig config;

	BrewingBarrel(String location, int barrel_varbit, BufferedImage image, BrewingPlugin plugin, BrewingConfig config)
	{
		super(image, plugin);
		this.barrel = barrel_varbit;
		this.location = location;
		this.plugin = plugin;
		this.config = config;
		setPriority(InfoBoxPriority.LOW);
	}

	@Override
	public String getText()
	{
		return this.location.substring(0, 1);
	}

	@Override
	public String getTooltip()
	{
		return this.location + " - " + BrewingBarrelState.toString(barrel);
	}

	@Override
	public Color getTextColor()
	{
		if(BrewingBarrelState.isDrainable(barrel))
		{
			return Color.RED;
		}
		else if(BrewingBarrelState.hasMatureContents(barrel))
		{
			return Color.BLUE;
		}
		else if(BrewingBarrelState.hasNormalContents(barrel))
		{
			return Color.GREEN;
		}
		return Color.WHITE;
	}

	@Override
	public boolean render()
	{
		return canDisplayBarrel() && canDisplayBarrelCond();
	}

	private boolean canDisplayBarrel() {
		if (config.displayBarrels() == BrewingConfig.DisplayMode.BOTH)
		{
			return true;
		}
		else if (location == plugin.KELDAGRIM_NAME && config.displayBarrels() == BrewingConfig.DisplayMode.KELDAGRIM)
		{
			return true;
		}
		else if (location == plugin.PORT_PHASMATYS_NAME && config.displayBarrels() == BrewingConfig.DisplayMode.PORT_PHASMATYS)
		{
			return true;
		}
		return false;
	}

	private boolean canDisplayBarrelCond()
	{
		if(config.barrelDisplayCond() == BrewingConfig.BarrelState.ALWAYS)
		{
			return true;
		}
		else if(barrel != BrewingBarrelState.EMPTY.getValue() && config.barrelDisplayCond() == BrewingConfig.BarrelState.NOT_EMPTY)
		{
			return true;
		}
		else if(BrewingBarrelState.isFull(barrel) && config.barrelDisplayCond() == BrewingConfig.BarrelState.FULL)
		{
			return true;
		}
		return false;
	}
}

package com.brewing;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(BrewingConfig.GROUP)
public interface BrewingConfig extends Config {
	String GROUP = "BrewingConfig";

	enum DisplayMode {
		KELDAGRIM,
		PORT_PHASMATYS,
		BOTH
	}

	enum VatState {
		ALWAYS,
		COMPLETION,
		ANY_CONTENTS
	}

	enum BarrelState {
		ALWAYS,
		FULL,
		NOT_EMPTY
	}

	@ConfigItem(
		keyName = "vatDisplay",
		name = "Display Vats",
		description = "Configures which vats to display",
		position = 1
	)
	default DisplayMode displayVats() {
		return DisplayMode.BOTH;
	}

	@ConfigItem(
		keyName = "vatDisplaySetting",
		name = "Vat Display Condition",
		description = "Configures when vats be displayed",
		position = 2
	)
	default VatState vatDisplayCond() {
		return VatState.COMPLETION;
	}

	@ConfigItem(
		keyName = "barrelDisplay",
		name = "Display Barrels",
		description = "Configures which barrels to display",
		position = 3
	)
	default DisplayMode displayBarrels() {
		return DisplayMode.BOTH;
	}

	@ConfigItem(
		keyName = "barrelDisplaySetting",
		name = "Barrel Display Condition",
		description = "Configures when barrels be displayed",
		position = 4
	)
	default BarrelState barrelDisplayCond() {
		return BarrelState.NOT_EMPTY;
	}

	@ConfigItem(
		keyName = "notifySetting",
		name = "Notify On Completion",
		description = "Configures if to notify when a vat is done",
		position = 5
	)
	default boolean notifyOnCompletion() {
		return false;
	}

	@ConfigItem(
		keyName = "chatMessage",
		name = "Chat Message On Completion",
		description = "Show a message when you can collect your brews.",
		position = 6
	)
	default boolean chatMessageOnCompletion() {
		return false;
	}
}
package com.brewing;

import java.awt.Color;
import java.awt.image.BufferedImage;
import net.runelite.client.ui.overlay.infobox.InfoBox;
import net.runelite.client.ui.overlay.infobox.InfoBoxPriority;

public class BrewingVat extends InfoBox
{
	private final String location;
	private final int vat;
	private final BrewingPlugin plugin;
	private final BrewingConfig config;

	BrewingVat(String location, int vat_val, BufferedImage image, BrewingPlugin plugin, BrewingConfig config)
	{
		super(image, plugin);
		this.vat = vat_val;
		this.location = location;
		this.plugin = plugin;
		this.config = config;
		setPriority(InfoBoxPriority.LOW);
	}

	@Override
	public String getText()
	{
		return this.location.substring(0, 1);
	}

	@Override
	public String getTooltip()
	{
		return this.location + " - " + BrewingVatState.toString(vat);
	}

	@Override
	public Color getTextColor()
	{
		if(BrewingVatState.isBad(vat))
		{
			return Color.RED;
		}
		else if(BrewingVatState.isCompletedMature(vat))
		{
			return Color.BLUE;
		}
		else if(BrewingVatState.isCompletedNormal(vat))
		{
			return Color.GREEN;
		}
		else if(BrewingVatState.isPartial(vat))
		{
			return Color.YELLOW;
		}
		return Color.WHITE;
	}

	@Override
	public boolean render()
	{
		return canDisplayVat() && canDisplayVatCond();
	}

	private boolean canDisplayVat()
	{
		if(config.displayVats() == BrewingConfig.DisplayMode.BOTH)
		{
			return true;
		}
		else if(location == plugin.KELDAGRIM_NAME && config.displayVats() == BrewingConfig.DisplayMode.KELDAGRIM)
		{
			return true;
		}
		else if(location == plugin.PORT_PHASMATYS_NAME && config.displayVats() == BrewingConfig.DisplayMode.PORT_PHASMATYS)
		{
			return true;
		}
		return false;
	}

	private boolean canDisplayVatCond()
	{
		if(config.vatDisplayCond() == BrewingConfig.VatState.ALWAYS)
		{
			return true;
		}
		else if(vat != BrewingVatState.EMPTY.getValue() && config.vatDisplayCond() == BrewingConfig.VatState.ANY_CONTENTS)
		{
			return true;
		}
		else if((BrewingVatState.isBad(vat) || BrewingVatState.isCompletedNormal(vat) || BrewingVatState.isCompletedMature(vat)) && config.vatDisplayCond() == BrewingConfig.VatState.COMPLETION)
		{
			return true;
		}
		return false;
	}
}

package com.brewing;

import com.google.common.collect.Sets;

import java.util.Arrays;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
@Getter
public enum BrewingBarrelState {
	EMPTY(0),
	BAD_ALE(1),
	BAD_CIDER(2),
	UNFERMENTED(4),

	/* Kelda Stout */
	KELDA_STOUT_1_PINT(3),

	/* Dwarven Stout */
	DWARVEN_STOUT_8_PINTS(8),
	DWARVEN_STOUT_7_PINTS(9),
	DWARVEN_STOUT_6_PINTS(10),
	DWARVEN_STOUT_5_PINTS(11),
	DWARVEN_STOUT_4_PINTS(12),
	DWARVEN_STOUT_3_PINTS(13),
	DWARVEN_STOUT_2_PINTS(14),
	DWARVEN_STOUT_1_PINT(15),

	/* Asgarnian Ale */
	ASGARNIAN_ALE_8_PINTS(16),
	ASGARNIAN_ALE_7_PINTS(17),
	ASGARNIAN_ALE_6_PINTS(18),
	ASGARNIAN_ALE_5_PINTS(19),
	ASGARNIAN_ALE_4_PINTS(20),
	ASGARNIAN_ALE_3_PINTS(21),
	ASGARNIAN_ALE_2_PINTS(22),
	ASGARNIAN_ALE_1_PINT(23),

	/* Greenman's Ale */
	GREENMANS_ALE_8_PINTS(24),
	GREENMANS_ALE_7_PINTS(25),
	GREENMANS_ALE_6_PINTS(26),
	GREENMANS_ALE_5_PINTS(27),
	GREENMANS_ALE_4_PINTS(28),
	GREENMANS_ALE_3_PINTS(29),
	GREENMANS_ALE_2_PINTS(30),
	GREENMANS_ALE_1_PINT(31),

	/* Wizard's Mind Bomb */
	WIZARDS_MIND_BOMB_8_PINTS(32),
	WIZARDS_MIND_BOMB_7_PINTS(33),
	WIZARDS_MIND_BOMB_6_PINTS(34),
	WIZARDS_MIND_BOMB_5_PINTS(35),
	WIZARDS_MIND_BOMB_4_PINTS(36),
	WIZARDS_MIND_BOMB_3_PINTS(37),
	WIZARDS_MIND_BOMB_2_PINTS(38),
	WIZARDS_MIND_BOMB_1_PINT(39),

	/* Dragon Bitter */
	DRAGON_BITTER_8_PINTS(40),
	DRAGON_BITTER_7_PINTS(41),
	DRAGON_BITTER_6_PINTS(42),
	DRAGON_BITTER_5_PINTS(43),
	DRAGON_BITTER_4_PINTS(44),
	DRAGON_BITTER_3_PINTS(45),
	DRAGON_BITTER_2_PINTS(46),
	DRAGON_BITTER_1_PINT(47),

	/* Moonlight Mead */
	MOONLIGHT_MEAD_8_PINTS(48),
	MOONLIGHT_MEAD_7_PINTS(49),
	MOONLIGHT_MEAD_6_PINTS(50),
	MOONLIGHT_MEAD_5_PINTS(51),
	MOONLIGHT_MEAD_4_PINTS(52),
	MOONLIGHT_MEAD_3_PINTS(53),
	MOONLIGHT_MEAD_2_PINTS(54),
	MOONLIGHT_MEAD_1_PINT(55),

	/* Axeman's Folly */
	AXEMANS_FOLLY_8_PINTS(56),
	AXEMANS_FOLLY_7_PINTS(57),
	AXEMANS_FOLLY_6_PINTS(58),
	AXEMANS_FOLLY_5_PINTS(59),
	AXEMANS_FOLLY_4_PINTS(60),
	AXEMANS_FOLLY_3_PINTS(61),
	AXEMANS_FOLLY_2_PINTS(62),
	AXEMANS_FOLLY_1_PINT(63),

	/* Chef's Delight */
	CHEFS_DELIGHT_8_PINTS(64),
	CHEFS_DELIGHT_7_PINTS(65),
	CHEFS_DELIGHT_6_PINTS(66),
	CHEFS_DELIGHT_5_PINTS(67),
	CHEFS_DELIGHT_4_PINTS(68),
	CHEFS_DELIGHT_3_PINTS(69),
	CHEFS_DELIGHT_2_PINTS(70),
	CHEFS_DELIGHT_1_PINT(71),

	/* Slayer's Respite */
	SLAYERS_RESPITE_8_PINTS(72),
	SLAYERS_RESPITE_7_PINTS(73),
	SLAYERS_RESPITE_6_PINTS(74),
	SLAYERS_RESPITE_5_PINTS(75),
	SLAYERS_RESPITE_4_PINTS(76),
	SLAYERS_RESPITE_3_PINTS(77),
	SLAYERS_RESPITE_2_PINTS(78),
	SLAYERS_RESPITE_1_PINT(79),

	/* Cider */
	CIDER_8_PINTS(80),
	CIDER_7_PINTS(81),
	CIDER_6_PINTS(82),
	CIDER_5_PINTS(83),
	CIDER_4_PINTS(84),
	CIDER_3_PINTS(85),
	CIDER_2_PINTS(86),
	CIDER_1_PINT(87),

	/* Mature Dwarven Stout */
	MATURE_DWARVEN_STOUT_8_PINTS(136),
	MATURE_DWARVEN_STOUT_7_PINTS(137),
	MATURE_DWARVEN_STOUT_6_PINTS(138),
	MATURE_DWARVEN_STOUT_5_PINTS(139),
	MATURE_DWARVEN_STOUT_4_PINTS(140),
	MATURE_DWARVEN_STOUT_3_PINTS(141),
	MATURE_DWARVEN_STOUT_2_PINTS(142),
	MATURE_DWARVEN_STOUT_1_PINT(143),

	/* Mature Asgarnian Ale */
	MATURE_ASGARNIAN_ALE_8_PINTS(144),
	MATURE_ASGARNIAN_ALE_7_PINTS(145),
	MATURE_ASGARNIAN_ALE_6_PINTS(146),
	MATURE_ASGARNIAN_ALE_5_PINTS(147),
	MATURE_ASGARNIAN_ALE_4_PINTS(148),
	MATURE_ASGARNIAN_ALE_3_PINTS(149),
	MATURE_ASGARNIAN_ALE_2_PINTS(150),
	MATURE_ASGARNIAN_ALE_1_PINT(151),

	/* Mature Greenman's Ale */
	MATURE_GREENMANS_ALE_8_PINTS(152),
	MATURE_GREENMANS_ALE_7_PINTS(153),
	MATURE_GREENMANS_ALE_6_PINTS(154),
	MATURE_GREENMANS_ALE_5_PINTS(155),
	MATURE_GREENMANS_ALE_4_PINTS(156),
	MATURE_GREENMANS_ALE_3_PINTS(157),
	MATURE_GREENMANS_ALE_2_PINTS(158),
	MATURE_GREENMANS_ALE_1_PINT(159),

	/* Mature Wizard's Mind Bomb */
	MATURE_WIZARDS_MIND_BOMB_8_PINTS(160),
	MATURE_WIZARDS_MIND_BOMB_7_PINTS(161),
	MATURE_WIZARDS_MIND_BOMB_6_PINTS(162),
	MATURE_WIZARDS_MIND_BOMB_5_PINTS(163),
	MATURE_WIZARDS_MIND_BOMB_4_PINTS(164),
	MATURE_WIZARDS_MIND_BOMB_3_PINTS(165),
	MATURE_WIZARDS_MIND_BOMB_2_PINTS(166),
	MATURE_WIZARDS_MIND_BOMB_1_PINT(167),

	/* Mature Dragon Bitter */
	MATURE_DRAGON_BITTER_8_PINTS(168),
	MATURE_DRAGON_BITTER_7_PINTS(169),
	MATURE_DRAGON_BITTER_6_PINTS(170),
	MATURE_DRAGON_BITTER_5_PINTS(171),
	MATURE_DRAGON_BITTER_4_PINTS(172),
	MATURE_DRAGON_BITTER_3_PINTS(173),
	MATURE_DRAGON_BITTER_2_PINTS(174),
	MATURE_DRAGON_BITTER_1_PINT(175),

	/* Mature Moonlight Mead */
	MATURE_MOONLIGHT_MEAD_8_PINTS(176),
	MATURE_MOONLIGHT_MEAD_7_PINTS(177),
	MATURE_MOONLIGHT_MEAD_6_PINTS(178),
	MATURE_MOONLIGHT_MEAD_5_PINTS(179),
	MATURE_MOONLIGHT_MEAD_4_PINTS(180),
	MATURE_MOONLIGHT_MEAD_3_PINTS(181),
	MATURE_MOONLIGHT_MEAD_2_PINTS(182),
	MATURE_MOONLIGHT_MEAD_1_PINT(183),

	/* Mature Axeman's Folly */
	MATURE_AXEMANS_FOLLY_8_PINTS(184),
	MATURE_AXEMANS_FOLLY_7_PINTS(185),
	MATURE_AXEMANS_FOLLY_6_PINTS(186),
	MATURE_AXEMANS_FOLLY_5_PINTS(187),
	MATURE_AXEMANS_FOLLY_4_PINTS(188),
	MATURE_AXEMANS_FOLLY_3_PINTS(189),
	MATURE_AXEMANS_FOLLY_2_PINTS(190),
	MATURE_AXEMANS_FOLLY_1_PINT(191),

	/* Mature Chef's Delight */
	MATURE_CHEFS_DELIGHT_8_PINTS(192),
	MATURE_CHEFS_DELIGHT_7_PINTS(193),
	MATURE_CHEFS_DELIGHT_6_PINTS(194),
	MATURE_CHEFS_DELIGHT_5_PINTS(195),
	MATURE_CHEFS_DELIGHT_4_PINTS(196),
	MATURE_CHEFS_DELIGHT_3_PINTS(197),
	MATURE_CHEFS_DELIGHT_2_PINTS(198),
	MATURE_CHEFS_DELIGHT_1_PINT(199),

	/* Mature Slayer's Respite */
	MATURE_SLAYERS_RESPITE_8_PINTS(200),
	MATURE_SLAYERS_RESPITE_7_PINTS(201),
	MATURE_SLAYERS_RESPITE_6_PINTS(202),
	MATURE_SLAYERS_RESPITE_5_PINTS(203),
	MATURE_SLAYERS_RESPITE_4_PINTS(204),
	MATURE_SLAYERS_RESPITE_3_PINTS(205),
	MATURE_SLAYERS_RESPITE_2_PINTS(206),
	MATURE_SLAYERS_RESPITE_1_PINT(207),

	/* Mature Cider */
	MATURE_CIDER_8_PINTS(208),
	MATURE_CIDER_7_PINTS(209),
	MATURE_CIDER_6_PINTS(210),
	MATURE_CIDER_5_PINTS(211),
	MATURE_CIDER_4_PINTS(212),
	MATURE_CIDER_3_PINTS(213),
	MATURE_CIDER_2_PINTS(214),
	MATURE_CIDER_1_PINT(215),

	UNKNOWN(-1),
	UNINITIALIZED(-2);

	private static final Set<BrewingBarrelState> DRAIN_STATES = Sets.immutableEnumSet(
			BAD_ALE,
			BAD_CIDER,
			UNFERMENTED
	);

	private static final Set<BrewingBarrelState> NORMAL_CONTENTS = Sets.immutableEnumSet(
			KELDA_STOUT_1_PINT,
			DWARVEN_STOUT_8_PINTS,
			DWARVEN_STOUT_7_PINTS,
			DWARVEN_STOUT_6_PINTS,
			DWARVEN_STOUT_5_PINTS,
			DWARVEN_STOUT_4_PINTS,
			DWARVEN_STOUT_3_PINTS,
			DWARVEN_STOUT_2_PINTS,
			DWARVEN_STOUT_1_PINT,
			ASGARNIAN_ALE_8_PINTS,
			ASGARNIAN_ALE_7_PINTS,
			ASGARNIAN_ALE_6_PINTS,
			ASGARNIAN_ALE_5_PINTS,
			ASGARNIAN_ALE_4_PINTS,
			ASGARNIAN_ALE_3_PINTS,
			ASGARNIAN_ALE_2_PINTS,
			ASGARNIAN_ALE_1_PINT,
			GREENMANS_ALE_8_PINTS,
			GREENMANS_ALE_7_PINTS,
			GREENMANS_ALE_6_PINTS,
			GREENMANS_ALE_5_PINTS,
			GREENMANS_ALE_4_PINTS,
			GREENMANS_ALE_3_PINTS,
			GREENMANS_ALE_2_PINTS,
			GREENMANS_ALE_1_PINT,
			WIZARDS_MIND_BOMB_8_PINTS,
			WIZARDS_MIND_BOMB_7_PINTS,
			WIZARDS_MIND_BOMB_6_PINTS,
			WIZARDS_MIND_BOMB_5_PINTS,
			WIZARDS_MIND_BOMB_4_PINTS,
			WIZARDS_MIND_BOMB_3_PINTS,
			WIZARDS_MIND_BOMB_2_PINTS,
			WIZARDS_MIND_BOMB_1_PINT,
			DRAGON_BITTER_8_PINTS,
			DRAGON_BITTER_7_PINTS,
			DRAGON_BITTER_6_PINTS,
			DRAGON_BITTER_5_PINTS,
			DRAGON_BITTER_4_PINTS,
			DRAGON_BITTER_3_PINTS,
			DRAGON_BITTER_2_PINTS,
			DRAGON_BITTER_1_PINT,
			MOONLIGHT_MEAD_8_PINTS,
			MOONLIGHT_MEAD_7_PINTS,
			MOONLIGHT_MEAD_6_PINTS,
			MOONLIGHT_MEAD_5_PINTS,
			MOONLIGHT_MEAD_4_PINTS,
			MOONLIGHT_MEAD_3_PINTS,
			MOONLIGHT_MEAD_2_PINTS,
			MOONLIGHT_MEAD_1_PINT,
			AXEMANS_FOLLY_8_PINTS,
			AXEMANS_FOLLY_7_PINTS,
			AXEMANS_FOLLY_6_PINTS,
			AXEMANS_FOLLY_5_PINTS,
			AXEMANS_FOLLY_4_PINTS,
			AXEMANS_FOLLY_3_PINTS,
			AXEMANS_FOLLY_2_PINTS,
			AXEMANS_FOLLY_1_PINT,
			CHEFS_DELIGHT_8_PINTS,
			CHEFS_DELIGHT_7_PINTS,
			CHEFS_DELIGHT_6_PINTS,
			CHEFS_DELIGHT_5_PINTS,
			CHEFS_DELIGHT_4_PINTS,
			CHEFS_DELIGHT_3_PINTS,
			CHEFS_DELIGHT_2_PINTS,
			CHEFS_DELIGHT_1_PINT,
			SLAYERS_RESPITE_8_PINTS,
			SLAYERS_RESPITE_7_PINTS,
			SLAYERS_RESPITE_6_PINTS,
			SLAYERS_RESPITE_5_PINTS,
			SLAYERS_RESPITE_4_PINTS,
			SLAYERS_RESPITE_3_PINTS,
			SLAYERS_RESPITE_2_PINTS,
			SLAYERS_RESPITE_1_PINT,
			CIDER_8_PINTS,
			CIDER_7_PINTS,
			CIDER_6_PINTS,
			CIDER_5_PINTS,
			CIDER_4_PINTS,
			CIDER_3_PINTS,
			CIDER_2_PINTS,
			CIDER_1_PINT
	);

	private static final Set<BrewingBarrelState> MATURE_CONTENTS = Sets.immutableEnumSet(
			MATURE_DWARVEN_STOUT_8_PINTS,
			MATURE_DWARVEN_STOUT_7_PINTS,
			MATURE_DWARVEN_STOUT_6_PINTS,
			MATURE_DWARVEN_STOUT_5_PINTS,
			MATURE_DWARVEN_STOUT_4_PINTS,
			MATURE_DWARVEN_STOUT_3_PINTS,
			MATURE_DWARVEN_STOUT_2_PINTS,
			MATURE_DWARVEN_STOUT_1_PINT,
			MATURE_ASGARNIAN_ALE_8_PINTS,
			MATURE_ASGARNIAN_ALE_7_PINTS,
			MATURE_ASGARNIAN_ALE_6_PINTS,
			MATURE_ASGARNIAN_ALE_5_PINTS,
			MATURE_ASGARNIAN_ALE_4_PINTS,
			MATURE_ASGARNIAN_ALE_3_PINTS,
			MATURE_ASGARNIAN_ALE_2_PINTS,
			MATURE_ASGARNIAN_ALE_1_PINT,
			MATURE_GREENMANS_ALE_8_PINTS,
			MATURE_GREENMANS_ALE_7_PINTS,
			MATURE_GREENMANS_ALE_6_PINTS,
			MATURE_GREENMANS_ALE_5_PINTS,
			MATURE_GREENMANS_ALE_4_PINTS,
			MATURE_GREENMANS_ALE_3_PINTS,
			MATURE_GREENMANS_ALE_2_PINTS,
			MATURE_GREENMANS_ALE_1_PINT,
			MATURE_WIZARDS_MIND_BOMB_8_PINTS,
			MATURE_WIZARDS_MIND_BOMB_7_PINTS,
			MATURE_WIZARDS_MIND_BOMB_6_PINTS,
			MATURE_WIZARDS_MIND_BOMB_5_PINTS,
			MATURE_WIZARDS_MIND_BOMB_4_PINTS,
			MATURE_WIZARDS_MIND_BOMB_3_PINTS,
			MATURE_WIZARDS_MIND_BOMB_2_PINTS,
			MATURE_WIZARDS_MIND_BOMB_1_PINT,
			MATURE_DRAGON_BITTER_8_PINTS,
			MATURE_DRAGON_BITTER_7_PINTS,
			MATURE_DRAGON_BITTER_6_PINTS,
			MATURE_DRAGON_BITTER_5_PINTS,
			MATURE_DRAGON_BITTER_4_PINTS,
			MATURE_DRAGON_BITTER_3_PINTS,
			MATURE_DRAGON_BITTER_2_PINTS,
			MATURE_DRAGON_BITTER_1_PINT,
			MATURE_MOONLIGHT_MEAD_8_PINTS,
			MATURE_MOONLIGHT_MEAD_7_PINTS,
			MATURE_MOONLIGHT_MEAD_6_PINTS,
			MATURE_MOONLIGHT_MEAD_5_PINTS,
			MATURE_MOONLIGHT_MEAD_4_PINTS,
			MATURE_MOONLIGHT_MEAD_3_PINTS,
			MATURE_MOONLIGHT_MEAD_2_PINTS,
			MATURE_MOONLIGHT_MEAD_1_PINT,
			MATURE_AXEMANS_FOLLY_8_PINTS,
			MATURE_AXEMANS_FOLLY_7_PINTS,
			MATURE_AXEMANS_FOLLY_6_PINTS,
			MATURE_AXEMANS_FOLLY_5_PINTS,
			MATURE_AXEMANS_FOLLY_4_PINTS,
			MATURE_AXEMANS_FOLLY_3_PINTS,
			MATURE_AXEMANS_FOLLY_2_PINTS,
			MATURE_AXEMANS_FOLLY_1_PINT,
			MATURE_CHEFS_DELIGHT_8_PINTS,
			MATURE_CHEFS_DELIGHT_7_PINTS,
			MATURE_CHEFS_DELIGHT_6_PINTS,
			MATURE_CHEFS_DELIGHT_5_PINTS,
			MATURE_CHEFS_DELIGHT_4_PINTS,
			MATURE_CHEFS_DELIGHT_3_PINTS,
			MATURE_CHEFS_DELIGHT_2_PINTS,
			MATURE_CHEFS_DELIGHT_1_PINT,
			MATURE_SLAYERS_RESPITE_8_PINTS,
			MATURE_SLAYERS_RESPITE_7_PINTS,
			MATURE_SLAYERS_RESPITE_6_PINTS,
			MATURE_SLAYERS_RESPITE_5_PINTS,
			MATURE_SLAYERS_RESPITE_4_PINTS,
			MATURE_SLAYERS_RESPITE_3_PINTS,
			MATURE_SLAYERS_RESPITE_2_PINTS,
			MATURE_SLAYERS_RESPITE_1_PINT,
			MATURE_CIDER_8_PINTS,
			MATURE_CIDER_7_PINTS,
			MATURE_CIDER_6_PINTS,
			MATURE_CIDER_5_PINTS,
			MATURE_CIDER_4_PINTS,
			MATURE_CIDER_3_PINTS,
			MATURE_CIDER_2_PINTS,
			MATURE_CIDER_1_PINT
	);

	private static final Set<BrewingBarrelState> FULL = Sets.immutableEnumSet(
			KELDA_STOUT_1_PINT,
			DWARVEN_STOUT_8_PINTS,
			ASGARNIAN_ALE_8_PINTS,
			GREENMANS_ALE_8_PINTS,
			WIZARDS_MIND_BOMB_8_PINTS,
			DRAGON_BITTER_8_PINTS,
			MOONLIGHT_MEAD_8_PINTS,
			AXEMANS_FOLLY_8_PINTS,
			CHEFS_DELIGHT_8_PINTS,
			SLAYERS_RESPITE_8_PINTS,
			CIDER_8_PINTS,
			MATURE_DWARVEN_STOUT_8_PINTS,
			MATURE_ASGARNIAN_ALE_8_PINTS,
			MATURE_GREENMANS_ALE_8_PINTS,
			MATURE_WIZARDS_MIND_BOMB_8_PINTS,
			MATURE_DRAGON_BITTER_8_PINTS,
			MATURE_MOONLIGHT_MEAD_8_PINTS,
			MATURE_AXEMANS_FOLLY_8_PINTS,
			MATURE_CHEFS_DELIGHT_8_PINTS,
			MATURE_SLAYERS_RESPITE_8_PINTS,
			MATURE_CIDER_8_PINTS
	);


	private final int value;

	private static final Map<Integer, BrewingBarrelState> map;
	static {
		map = Arrays.stream(values())
				.collect(Collectors.toMap(e -> e.value, e -> e));
	}

	public static BrewingBarrelState fromInt(int value) {
		return Optional.ofNullable(map.get(value)).orElse(UNKNOWN);
	}

	public static boolean isDrainable(int value)
	{
		return Stream.of(BrewingBarrelState.fromInt(value)).anyMatch(BrewingBarrelState.DRAIN_STATES::contains);
	}

	public static boolean hasMatureContents(int value)
	{
		return Stream.of(BrewingBarrelState.fromInt(value)).anyMatch(BrewingBarrelState.MATURE_CONTENTS::contains);
	}

	public static boolean hasNormalContents(int value)
	{
		return Stream.of(BrewingBarrelState.fromInt(value)).anyMatch(BrewingBarrelState.NORMAL_CONTENTS::contains);
	}

	public static boolean isFull(int value)
	{
		return Stream.of(BrewingBarrelState.fromInt(value)).anyMatch(BrewingBarrelState.FULL::contains);
	}

	public static String toString(int value)
	{
		switch (BrewingBarrelState.fromInt(value))
		{
			case EMPTY:
				return "Empty";
			case BAD_ALE:
				return "Bad ale";
			case BAD_CIDER:
				return "Bad cider";
			case UNFERMENTED:
				return "Unfermented";
			case KELDA_STOUT_1_PINT:
				return "1 Pint: Kelda Stout";
			case DWARVEN_STOUT_8_PINTS:
				return "8 Pints: Dwarven Stout";
			case DWARVEN_STOUT_7_PINTS:
				return "7 Pints: Dwarven Stout";
			case DWARVEN_STOUT_6_PINTS:
				return "6 Pints: Dwarven Stout";
			case DWARVEN_STOUT_5_PINTS:
				return "5 Pints: Dwarven Stout";
			case DWARVEN_STOUT_4_PINTS:
				return "4 Pints: Dwarven Stout";
			case DWARVEN_STOUT_3_PINTS:
				return "3 Pints: Dwarven Stout";
			case DWARVEN_STOUT_2_PINTS:
				return "2 Pints: Dwarven Stout";
			case DWARVEN_STOUT_1_PINT:
				return "1 Pint: Dwarven Stout";
			case ASGARNIAN_ALE_8_PINTS:
				return "8 Pints: Asgarnian Ale";
			case ASGARNIAN_ALE_7_PINTS:
				return "7 Pints: Asgarnian Ale";
			case ASGARNIAN_ALE_6_PINTS:
				return "6 Pints: Asgarnian Ale";
			case ASGARNIAN_ALE_5_PINTS:
				return "5 Pints: Asgarnian Ale";
			case ASGARNIAN_ALE_4_PINTS:
				return "4 Pints: Asgarnian Ale";
			case ASGARNIAN_ALE_3_PINTS:
				return "3 Pints: Asgarnian Ale";
			case ASGARNIAN_ALE_2_PINTS:
				return "2 Pints: Asgarnian Ale";
			case ASGARNIAN_ALE_1_PINT:
				return "1 Pint: Asgarnian Ale";
			case GREENMANS_ALE_8_PINTS:
				return "8 Pints: Greenman's Ale";
			case GREENMANS_ALE_7_PINTS:
				return "7 Pints: Greenman's Ale";
			case GREENMANS_ALE_6_PINTS:
				return "6 Pints: Greenman's Ale";
			case GREENMANS_ALE_5_PINTS:
				return "5 Pints: Greenman's Ale";
			case GREENMANS_ALE_4_PINTS:
				return "4 Pints: Greenman's Ale";
			case GREENMANS_ALE_3_PINTS:
				return "3 Pints: Greenman's Ale";
			case GREENMANS_ALE_2_PINTS:
				return "2 Pints: Greenman's Ale";
			case GREENMANS_ALE_1_PINT:
				return "1 Pint: Greenman's Ale";
			case WIZARDS_MIND_BOMB_8_PINTS:
				return "8 Pints: Wizard's Mind Bomb";
			case WIZARDS_MIND_BOMB_7_PINTS:
				return "7 Pints: Wizard's Mind Bomb";
			case WIZARDS_MIND_BOMB_6_PINTS:
				return "6 Pints: Wizard's Mind Bomb";
			case WIZARDS_MIND_BOMB_5_PINTS:
				return "5 Pints: Wizard's Mind Bomb";
			case WIZARDS_MIND_BOMB_4_PINTS:
				return "4 Pints: Wizard's Mind Bomb";
			case WIZARDS_MIND_BOMB_3_PINTS:
				return "3 Pints: Wizard's Mind Bomb";
			case WIZARDS_MIND_BOMB_2_PINTS:
				return "2 Pints: Wizard's Mind Bomb";
			case WIZARDS_MIND_BOMB_1_PINT:
				return "1 Pint: Wizard's Mind Bomb";
			case DRAGON_BITTER_8_PINTS:
				return "8 Pints: Dragon Bitter";
			case DRAGON_BITTER_7_PINTS:
				return "7 Pints: Dragon Bitter";
			case DRAGON_BITTER_6_PINTS:
				return "6 Pints: Dragon Bitter";
			case DRAGON_BITTER_5_PINTS:
				return "5 Pints: Dragon Bitter";
			case DRAGON_BITTER_4_PINTS:
				return "4 Pints: Dragon Bitter";
			case DRAGON_BITTER_3_PINTS:
				return "3 Pints: Dragon Bitter";
			case DRAGON_BITTER_2_PINTS:
				return "2 Pints: Dragon Bitter";
			case DRAGON_BITTER_1_PINT:
				return "1 Pint: Dragon Bitter";
			case MOONLIGHT_MEAD_8_PINTS:
				return "8 Pints: Moonlight Mead";
			case MOONLIGHT_MEAD_7_PINTS:
				return "7 Pints: Moonlight Mead";
			case MOONLIGHT_MEAD_6_PINTS:
				return "6 Pints: Moonlight Mead";
			case MOONLIGHT_MEAD_5_PINTS:
				return "5 Pints: Moonlight Mead";
			case MOONLIGHT_MEAD_4_PINTS:
				return "4 Pints: Moonlight Mead";
			case MOONLIGHT_MEAD_3_PINTS:
				return "3 Pints: Moonlight Mead";
			case MOONLIGHT_MEAD_2_PINTS:
				return "2 Pints: Moonlight Mead";
			case MOONLIGHT_MEAD_1_PINT:
				return "1 Pint: Moonlight Mead";
			case AXEMANS_FOLLY_8_PINTS:
				return "8 Pints: Axeman's Folly";
			case AXEMANS_FOLLY_7_PINTS:
				return "7 Pints: Axeman's Folly";
			case AXEMANS_FOLLY_6_PINTS:
				return "6 Pints: Axeman's Folly";
			case AXEMANS_FOLLY_5_PINTS:
				return "5 Pints: Axeman's Folly";
			case AXEMANS_FOLLY_4_PINTS:
				return "4 Pints: Axeman's Folly";
			case AXEMANS_FOLLY_3_PINTS:
				return "3 Pints: Axeman's Folly";
			case AXEMANS_FOLLY_2_PINTS:
				return "2 Pints: Axeman's Folly";
			case AXEMANS_FOLLY_1_PINT:
				return "1 Pint: Axeman's Folly";
			case CHEFS_DELIGHT_8_PINTS:
				return "8 Pints: Chef's Delight";
			case CHEFS_DELIGHT_7_PINTS:
				return "7 Pints: Chef's Delight";
			case CHEFS_DELIGHT_6_PINTS:
				return "6 Pints: Chef's Delight";
			case CHEFS_DELIGHT_5_PINTS:
				return "5 Pints: Chef's Delight";
			case CHEFS_DELIGHT_4_PINTS:
				return "4 Pints: Chef's Delight";
			case CHEFS_DELIGHT_3_PINTS:
				return "3 Pints: Chef's Delight";
			case CHEFS_DELIGHT_2_PINTS:
				return "2 Pints: Chef's Delight";
			case CHEFS_DELIGHT_1_PINT:
				return "1 Pint: Chef's Delight";
			case SLAYERS_RESPITE_8_PINTS:
				return "8 Pints: Slayer's Respite";
			case SLAYERS_RESPITE_7_PINTS:
				return "7 Pints: Slayer's Respite";
			case SLAYERS_RESPITE_6_PINTS:
				return "6 Pints: Slayer's Respite";
			case SLAYERS_RESPITE_5_PINTS:
				return "5 Pints: Slayer's Respite";
			case SLAYERS_RESPITE_4_PINTS:
				return "4 Pints: Slayer's Respite";
			case SLAYERS_RESPITE_3_PINTS:
				return "3 Pints: Slayer's Respite";
			case SLAYERS_RESPITE_2_PINTS:
				return "2 Pints: Slayer's Respite";
			case SLAYERS_RESPITE_1_PINT:
				return "1 Pint: Slayer's Respite";
			case CIDER_8_PINTS:
				return "8 Pints: Cider";
			case CIDER_7_PINTS:
				return "7 Pints: Cider";
			case CIDER_6_PINTS:
				return "6 Pints: Cider";
			case CIDER_5_PINTS:
				return "5 Pints: Cider";
			case CIDER_4_PINTS:
				return "4 Pints: Cider";
			case CIDER_3_PINTS:
				return "3 Pints: Cider";
			case CIDER_2_PINTS:
				return "2 Pints: Cider";
			case CIDER_1_PINT:
				return "1 Pint: Cider";
			case MATURE_DWARVEN_STOUT_8_PINTS:
				return "8 Pints: Mature Dwarven Stout";
			case MATURE_DWARVEN_STOUT_7_PINTS:
				return "7 Pints: Mature Dwarven Stout";
			case MATURE_DWARVEN_STOUT_6_PINTS:
				return "6 Pints: Mature Dwarven Stout";
			case MATURE_DWARVEN_STOUT_5_PINTS:
				return "5 Pints: Mature Dwarven Stout";
			case MATURE_DWARVEN_STOUT_4_PINTS:
				return "4 Pints: Mature Dwarven Stout";
			case MATURE_DWARVEN_STOUT_3_PINTS:
				return "3 Pints: Mature Dwarven Stout";
			case MATURE_DWARVEN_STOUT_2_PINTS:
				return "2 Pints: Mature Dwarven Stout";
			case MATURE_DWARVEN_STOUT_1_PINT:
				return "1 Pint: Mature Dwarven Stout";
			case MATURE_ASGARNIAN_ALE_8_PINTS:
				return "8 Pints: Mature Asgarnian Ale";
			case MATURE_ASGARNIAN_ALE_7_PINTS:
				return "7 Pints: Mature Asgarnian Ale";
			case MATURE_ASGARNIAN_ALE_6_PINTS:
				return "6 Pints: Mature Asgarnian Ale";
			case MATURE_ASGARNIAN_ALE_5_PINTS:
				return "5 Pints: Mature Asgarnian Ale";
			case MATURE_ASGARNIAN_ALE_4_PINTS:
				return "4 Pints: Mature Asgarnian Ale";
			case MATURE_ASGARNIAN_ALE_3_PINTS:
				return "3 Pints: Mature Asgarnian Ale";
			case MATURE_ASGARNIAN_ALE_2_PINTS:
				return "2 Pints: Mature Asgarnian Ale";
			case MATURE_ASGARNIAN_ALE_1_PINT:
				return "1 Pint: Mature Asgarnian Ale";
			case MATURE_GREENMANS_ALE_8_PINTS:
				return "8 Pints: Mature Greenman's Ale";
			case MATURE_GREENMANS_ALE_7_PINTS:
				return "7 Pints: Mature Greenman's Ale";
			case MATURE_GREENMANS_ALE_6_PINTS:
				return "6 Pints: Mature Greenman's Ale";
			case MATURE_GREENMANS_ALE_5_PINTS:
				return "5 Pints: Mature Greenman's Ale";
			case MATURE_GREENMANS_ALE_4_PINTS:
				return "4 Pints: Mature Greenman's Ale";
			case MATURE_GREENMANS_ALE_3_PINTS:
				return "3 Pints: Mature Greenman's Ale";
			case MATURE_GREENMANS_ALE_2_PINTS:
				return "2 Pints: Mature Greenman's Ale";
			case MATURE_GREENMANS_ALE_1_PINT:
				return "1 Pint: Mature Greenman's Ale";
			case MATURE_WIZARDS_MIND_BOMB_8_PINTS:
				return "8 Pints: Mature Wizard's Mind Bomb";
			case MATURE_WIZARDS_MIND_BOMB_7_PINTS:
				return "7 Pints: Mature Wizard's Mind Bomb";
			case MATURE_WIZARDS_MIND_BOMB_6_PINTS:
				return "6 Pints: Mature Wizard's Mind Bomb";
			case MATURE_WIZARDS_MIND_BOMB_5_PINTS:
				return "5 Pints: Mature Wizard's Mind Bomb";
			case MATURE_WIZARDS_MIND_BOMB_4_PINTS:
				return "4 Pints: Mature Wizard's Mind Bomb";
			case MATURE_WIZARDS_MIND_BOMB_3_PINTS:
				return "3 Pints: Mature Wizard's Mind Bomb";
			case MATURE_WIZARDS_MIND_BOMB_2_PINTS:
				return "2 Pints: Mature Wizard's Mind Bomb";
			case MATURE_WIZARDS_MIND_BOMB_1_PINT:
				return "1 Pint: Mature Wizard's Mind Bomb";
			case MATURE_DRAGON_BITTER_8_PINTS:
				return "8 Pints: Mature Dragon Bitter";
			case MATURE_DRAGON_BITTER_7_PINTS:
				return "7 Pints: Mature Dragon Bitter";
			case MATURE_DRAGON_BITTER_6_PINTS:
				return "6 Pints: Mature Dragon Bitter";
			case MATURE_DRAGON_BITTER_5_PINTS:
				return "5 Pints: Mature Dragon Bitter";
			case MATURE_DRAGON_BITTER_4_PINTS:
				return "4 Pints: Mature Dragon Bitter";
			case MATURE_DRAGON_BITTER_3_PINTS:
				return "3 Pints: Mature Dragon Bitter";
			case MATURE_DRAGON_BITTER_2_PINTS:
				return "2 Pints: Mature Dragon Bitter";
			case MATURE_DRAGON_BITTER_1_PINT:
				return "1 Pint: Mature Dragon Bitter";
			case MATURE_MOONLIGHT_MEAD_8_PINTS:
				return "8 Pints: Mature Moonlight Mead";
			case MATURE_MOONLIGHT_MEAD_7_PINTS:
				return "7 Pints: Mature Moonlight Mead";
			case MATURE_MOONLIGHT_MEAD_6_PINTS:
				return "6 Pints: Mature Moonlight Mead";
			case MATURE_MOONLIGHT_MEAD_5_PINTS:
				return "5 Pints: Mature Moonlight Mead";
			case MATURE_MOONLIGHT_MEAD_4_PINTS:
				return "4 Pints: Mature Moonlight Mead";
			case MATURE_MOONLIGHT_MEAD_3_PINTS:
				return "3 Pints: Mature Moonlight Mead";
			case MATURE_MOONLIGHT_MEAD_2_PINTS:
				return "2 Pints: Mature Moonlight Mead";
			case MATURE_MOONLIGHT_MEAD_1_PINT:
				return "1 Pint: Mature Moonlight Mead";
			case MATURE_AXEMANS_FOLLY_8_PINTS:
				return "8 Pints: Mature Axeman's Folly";
			case MATURE_AXEMANS_FOLLY_7_PINTS:
				return "7 Pints: Mature Axeman's Folly";
			case MATURE_AXEMANS_FOLLY_6_PINTS:
				return "6 Pints: Mature Axeman's Folly";
			case MATURE_AXEMANS_FOLLY_5_PINTS:
				return "5 Pints: Mature Axeman's Folly";
			case MATURE_AXEMANS_FOLLY_4_PINTS:
				return "4 Pints: Mature Axeman's Folly";
			case MATURE_AXEMANS_FOLLY_3_PINTS:
				return "3 Pints: Mature Axeman's Folly";
			case MATURE_AXEMANS_FOLLY_2_PINTS:
				return "2 Pints: Mature Axeman's Folly";
			case MATURE_AXEMANS_FOLLY_1_PINT:
				return "1 Pint: Mature Axeman's Folly";
			case MATURE_CHEFS_DELIGHT_8_PINTS:
				return "8 Pints: Mature Chef's Delight";
			case MATURE_CHEFS_DELIGHT_7_PINTS:
				return "7 Pints: Mature Chef's Delight";
			case MATURE_CHEFS_DELIGHT_6_PINTS:
				return "6 Pints: Mature Chef's Delight";
			case MATURE_CHEFS_DELIGHT_5_PINTS:
				return "5 Pints: Mature Chef's Delight";
			case MATURE_CHEFS_DELIGHT_4_PINTS:
				return "4 Pints: Mature Chef's Delight";
			case MATURE_CHEFS_DELIGHT_3_PINTS:
				return "3 Pints: Mature Chef's Delight";
			case MATURE_CHEFS_DELIGHT_2_PINTS:
				return "2 Pints: Mature Chef's Delight";
			case MATURE_CHEFS_DELIGHT_1_PINT:
				return "1 Pint: Mature Chef's Delight";
			case MATURE_SLAYERS_RESPITE_8_PINTS:
				return "8 Pints: Mature Slayer's Respite";
			case MATURE_SLAYERS_RESPITE_7_PINTS:
				return "7 Pints: Mature Slayer's Respite";
			case MATURE_SLAYERS_RESPITE_6_PINTS:
				return "6 Pints: Mature Slayer's Respite";
			case MATURE_SLAYERS_RESPITE_5_PINTS:
				return "5 Pints: Mature Slayer's Respite";
			case MATURE_SLAYERS_RESPITE_4_PINTS:
				return "4 Pints: Mature Slayer's Respite";
			case MATURE_SLAYERS_RESPITE_3_PINTS:
				return "3 Pints: Mature Slayer's Respite";
			case MATURE_SLAYERS_RESPITE_2_PINTS:
				return "2 Pints: Mature Slayer's Respite";
			case MATURE_SLAYERS_RESPITE_1_PINT:
				return "1 Pint: Mature Slayer's Respite";
			case MATURE_CIDER_8_PINTS:
				return "8 Pints: Mature Mature Cider";
			case MATURE_CIDER_7_PINTS:
				return "7 Pints: Mature Mature Cider";
			case MATURE_CIDER_6_PINTS:
				return "6 Pints: Mature Mature Cider";
			case MATURE_CIDER_5_PINTS:
				return "5 Pints: Mature Mature Cider";
			case MATURE_CIDER_4_PINTS:
				return "4 Pints: Mature Mature Cider";
			case MATURE_CIDER_3_PINTS:
				return "3 Pints: Mature Mature Cider";
			case MATURE_CIDER_2_PINTS:
				return "2 Pints: Mature Mature Cider";
			case MATURE_CIDER_1_PINT:
				return "1 Pint: Mature Mature Cider";

			case UNKNOWN:
				return "Unknown";
			case UNINITIALIZED:
				return "Uninitialized";
			default:
				return "?";
		}
	}
}

