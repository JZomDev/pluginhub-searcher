package com.remainingamethyst;

import java.awt.Color;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("remainingamethyst")
public interface RemainingAmethystConfig extends Config {

    @ConfigSection(
            name = "Colors",
            description = "Colors of interacted amethyst highlighting.",
            position = 0
    )
    String colors = "colors";

    @Alpha
    @ConfigItem(
            keyName = "mainOutlineColor",
            name = "Main Outline",
            description = "Main outline color.",
            position = 1,
            section = colors
    )

    default Color mainOutlineColor() {
        return new Color(0, 255, 0, 175);
    }

    @ConfigItem(
            keyName = "useColorBlending",
            name = "Blend Colors",
            description = "Naturally blend to secondary color based on the remaining number of amethyst ores.",
            position = 2,
            section = colors
    )
    default boolean useColorBlending() {
        return true;
    }

    @Alpha
    @ConfigItem(
            keyName = "blendOutlineColor",
            name = "Blend Outline",
            description = "Color blended to based on the remaining number of amethyst ores.",
            position = 3,
            section = colors
    )

    default Color blendOutlineColor() {
        return new Color(255, 0, 0, 175);
    }

    @ConfigItem(
            keyName = "highlightTicks",
            name = "Highlight Ticks",
            description = "Number of afk game ticks until the last interacted amethyst will unhighlight itself.",
            position = 4,
            section = colors
    )

    default double highlightTicks() {
        return 50;
    }

    @ConfigItem(
            keyName = "stayHighlighted",
            name = "Stay Highlighted",
            description = "Keep the amethyst highlighted until it is mined or RuneLite is closed.",
            position = 5,
            section = colors
    )
    default boolean stayHighlighted() {
        return false;
    }
}

package com.remainingamethyst;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import net.runelite.api.AnimationID;
import net.runelite.api.GameObject;
import net.runelite.api.ObjectID;
import net.runelite.api.Player;
import net.runelite.api.Tile;

public class Mining {

    private static final Set<Integer> miningAnimations = new HashSet<>(Arrays.asList(
            AnimationID.MINING_MOTHERLODE_3A,
            AnimationID.MINING_MOTHERLODE_ADAMANT,
            AnimationID.MINING_MOTHERLODE_BLACK,
            AnimationID.MINING_MOTHERLODE_BRONZE,
            AnimationID.MINING_MOTHERLODE_CRYSTAL,
            AnimationID.MINING_MOTHERLODE_DRAGON,
            AnimationID.MINING_MOTHERLODE_DRAGON_OR,
            AnimationID.MINING_MOTHERLODE_DRAGON_OR_TRAILBLAZER,
            AnimationID.MINING_MOTHERLODE_DRAGON_UPGRADED,
            AnimationID.MINING_MOTHERLODE_GILDED,
            AnimationID.MINING_MOTHERLODE_INFERNAL,
            AnimationID.MINING_MOTHERLODE_IRON,
            AnimationID.MINING_MOTHERLODE_MITHRIL,
            AnimationID.MINING_MOTHERLODE_RUNE,
            AnimationID.MINING_MOTHERLODE_STEEL,
            AnimationID.MINING_MOTHERLODE_CRYSTAL
    ));

    private static final Set<Integer> miningOres = new HashSet<>(Arrays.asList(
            ObjectID.AMETHYST_CRYSTALS,
            ObjectID.AMETHYST_CRYSTALS_11389));

    public static boolean isMining(Player player) {
        return miningAnimations.contains(player.getAnimation());

    }

    public static int oreBeingMined(Tile tile) {
        for (GameObject gameObject : tile.getGameObjects()) {
            if (miningOres.contains(gameObject.getId())) {
                return gameObject.getId();
            }
        }
        return -1;
    }
}

package com.remainingamethyst;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;

import javax.inject.Inject;

import net.runelite.api.Point;
import net.runelite.api.WallObject;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

class RemainingAmethystOverlay extends Overlay {

    private final RemainingAmethystConfig config;
    private final RemainingAmethystPlugin plugin;

    @Inject
    private RemainingAmethystOverlay(RemainingAmethystConfig config, RemainingAmethystPlugin plugin) {
        this.config = config;
        this.plugin = plugin;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (plugin.getLastInteractedAmethyst() == null) {
            return null;
        }

        WallObject amethyst = plugin.getLastInteractedAmethyst();

        if (amethyst == null) {
            return null;
        }

        String displayedOreRemaining;
        int offset = 0;
        if (plugin.getMaxOreRemaining() <= 0) {
            displayedOreRemaining = "?";
        } else if (plugin.getMaxOreRemaining() - 1 == 0) {
            displayedOreRemaining = plugin.getMaxOreRemaining().toString();
        } else {
            displayedOreRemaining = (Integer.valueOf(plugin.getMaxOreRemaining() - 1)).toString() + " - " + plugin.getMaxOreRemaining().toString();
            offset = 10;
        }

        Color displayColor = config.mainOutlineColor();
        Integer maxPossibleOres;
        if (plugin.isWearingMiningGloves()) {
            maxPossibleOres = plugin.MAX_ORES_EXPERT_MINING_GLOVES;
        } else {
            maxPossibleOres = plugin.MAX_ORES_NORMAL;
        }
        if (plugin.getMaxOreRemaining() >= 1 && config.useColorBlending()) {
            float percentage = (plugin.getMaxOreRemaining()).floatValue() / maxPossibleOres.floatValue();
            int r = (int) (config.mainOutlineColor().getRed() * percentage + config.blendOutlineColor().getRed() * (1.0 - percentage));
            int g = (int) (config.mainOutlineColor().getGreen() * percentage + config.blendOutlineColor().getGreen() * (1.0 - percentage));
            int b = (int) (config.mainOutlineColor().getBlue() * percentage + config.blendOutlineColor().getBlue() * (1.0 - percentage));
            displayColor = new Color(r, g, b);
        }

        Point centerPoint = new Point(amethyst.getCanvasLocation(100).getX() - offset, amethyst.getCanvasLocation(100).getY());
        OverlayUtil.renderTextLocation(graphics, centerPoint, displayedOreRemaining, displayColor);
        OverlayUtil.renderPolygon(graphics, amethyst.getConvexHull(), displayColor);
        return null;

    }
}

package com.remainingamethyst;

import javax.inject.Inject;

import com.google.inject.Provides;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.Player;
import net.runelite.api.Tile;
import net.runelite.api.WallObject;
import net.runelite.api.coords.Angle;
import net.runelite.api.coords.Direction;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.WallObjectDespawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
        name = "Remaining Amethyst"
)
public class RemainingAmethystPlugin extends Plugin {

    @Inject
    private Client client;

    @Inject
    private RemainingAmethystConfig config;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private RemainingAmethystOverlay overlay;

    @Getter
    private WallObject lastInteractedAmethyst = null;

    @Getter
    private Integer maxOreRemaining = -1;

    @Getter
    private boolean wearingMiningGloves = false;

    private int ticksWithoutInteracting = 0;

    public final Integer MAX_ORES_EXPERT_MINING_GLOVES = 4;
    public final Integer MAX_ORES_NORMAL = 3;

    private final Integer EXPERT_MINING_GLOVES_ID = 21392;

    @Override
    protected void startUp() {
        overlayManager.add(overlay);
    }

    @Override
    protected void shutDown() {
        overlayManager.remove(overlay);
        lastInteractedAmethyst = null;
        maxOreRemaining = -1;
        ticksWithoutInteracting = 0;
    }

    @Subscribe
    public void onGameTick(GameTick gameTick) {

        Player player = client.getLocalPlayer();
        Tile facingTile = getTilePlayerIsFacing(player);

        if (ticksWithoutInteracting >= config.highlightTicks() && !config.stayHighlighted()) {
            lastInteractedAmethyst = null;
            ticksWithoutInteracting = 0;
        }

        if (facingTile.getWallObject() == null) {
            ticksWithoutInteracting += 1;
            return;
        }

        if ((facingTile.getWallObject().getId() == 11388 || facingTile.getWallObject().getId() == 11389) && Mining.isMining(player)) {
            lastInteractedAmethyst = facingTile.getWallObject();
            ticksWithoutInteracting = 0;
            return;
        }

        ticksWithoutInteracting += 1;
    }

    @Subscribe
    public void onChatMessage(ChatMessage event) {
        String chatMessage = event.getMessage();
        if (event.getType() == ChatMessageType.SPAM || event.getType() == ChatMessageType.GAMEMESSAGE) {
            switch (chatMessage) {
                case "You manage to mine some amethyst.":
                    this.maxOreRemaining -= 1;
                    break;
            }
        }
    }

    @Subscribe
    public void onWallObjectDespawned(WallObjectDespawned objectDespawned) {
        if (objectDespawned.getWallObject().equals(this.lastInteractedAmethyst)) {

            ItemContainer equipment = client.getItemContainer(InventoryID.EQUIPMENT);
            Item gloves = equipment.getItem(EquipmentInventorySlot.GLOVES.getSlotIdx());
            if (gloves != null && gloves.getId() == EXPERT_MINING_GLOVES_ID) {
                this.maxOreRemaining = this.MAX_ORES_EXPERT_MINING_GLOVES;
                this.wearingMiningGloves = true;
            } else {
                this.maxOreRemaining = this.MAX_ORES_NORMAL;
                this.wearingMiningGloves = false;
            }
            this.lastInteractedAmethyst = null;
        }
    }

    @Provides
    RemainingAmethystConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(RemainingAmethystConfig.class);
    }

    Tile getTilePlayerIsFacing(Player player) {
        WorldPoint playerLocation = player.getWorldLocation();
        Direction playerOrientation = new Angle(player.getOrientation()).getNearestDirection();
        WorldPoint facingPoint = neighborPoint(playerLocation, playerOrientation);
        LocalPoint local = LocalPoint.fromWorld(client, facingPoint);
        Tile tiles[][][] = player.getWorldView().getScene().getTiles();
        return tiles[facingPoint.getPlane()][local.getSceneX()][local.getSceneY()];
    }

    WorldPoint neighborPoint(WorldPoint point, Direction direction) {
        switch (direction) {
            case NORTH:
                return point.dy(1);
            case SOUTH:
                return point.dy(-1);
            case EAST:
                return point.dx(1);
            case WEST:
                return point.dx(-1);
            default:
                throw new IllegalStateException();
        }
    }
}

package com.remainingamethyst;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class RemainingAmethystPluginTest {

    public static void main(String[] args) throws Exception {
        ExternalPluginManager.loadBuiltin(RemainingAmethystPlugin.class);
        RuneLite.main(args);
    }
}

