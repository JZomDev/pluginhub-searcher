package com.rang.forestrycc;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ForestryccPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ForestryccPlugin.class);
		RuneLite.main(args);
	}
}
package com.rang.forestrycc;

import java.time.Duration;
import java.util.HashMap;
import com.google.inject.Provides;
import javax.inject.Inject;
import java.time.Instant;
import java.util.*;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.client.game.ItemManager;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;
import net.runelite.api.events.*;
import net.runelite.client.util.AsyncBufferedImage;
import net.runelite.client.Notifier;


@Slf4j
@PluginDescriptor(
	name = "Forestry CC"
)
public class ForestryccPlugin extends Plugin
{
	@Inject
	private InfoBoxManager infoBoxManager;

	@Inject
	private ItemManager itemManager;

	@Inject
	private Client client;

	@Inject
	private Notifier notifier;

	@Inject
	private ForestryccConfig config;

	private long event_duration_default = 120;
	private long event_duration_bees = 180;
	private List<String> events_alive = new ArrayList<String>();
	private HashMap<String, Instant> events_starttime = new HashMap<String, Instant>();
	private HashMap<String, Instant> events_timeofdeath = new HashMap<String, Instant>();
	private HashMap<String, Integer> events_confirmed = new HashMap<String, Integer>();
	private HashMap<String, String> events_type = new HashMap<String, String>();
	private List<String> bee_filters = List.of("bees","bee","b");
	private List<String> root_filters = List.of("roots","root","r");
	private List<String> sap_filters = List.of("sapling","saps","sap");
	private List<String> banned_words = List.of("?","\"","=","where","wher","wehre","were","what","waht","wat","wht");
	private List<String> unsupported_chars = List.of(",","'","/","-","_","(",")");
	private List<String> excessive_spaces = List.of("          ","         ","        ","       ","      ","     ","    ","   ","  ");
	private long death_timeout = 6;
	private long revive_timeout = 10;

	String chat_msg_orignal;
	String chat_msg;


	@Override
	protected void startUp() throws Exception
	{
		log.info("Forestry CC started!");
		for (Location r : Location.values()) {
			events_starttime.put(r.getName(), Instant.now());
			events_timeofdeath.put(r.getName(), Instant.now());
			events_type.put(r.getName(), null);
		}
	}

	@Override
	protected void shutDown() throws Exception
	{
		log.info("Forestry CC stopped!");
		infoBoxManager.removeIf(t -> t instanceof ForestryccTimer);
	}

	// -------------------------------------------------------------------------- PROCESS CHAT CHANNEL MESSAGE

	private boolean validChatMsg(ChatMessage chatMessage) {
		String msg_text = chatMessage.getMessage().toLowerCase();
		// sender null is a system message, exit
		if (chatMessage.getSender() == null) {
			return false;
		}
		// we only read messages from group chat
		if (!chatMessage.getMessageNode().getType().equals(ChatMessageType.FRIENDSCHAT)) {
			return false;
		}
		// ignore anything over 25 characters long
		if (msg_text.length() > 25) {
			return false;
		}
		// ignore questions, and attempt to pre-filter sentences
		for (String banned : banned_words) {
			if (msg_text.contains(banned)) { return false; }
		}
		return true;
	}

	private String classifyEvent() {
		String[] msg_split = chat_msg.split(" ");
		for (String split_value : msg_split) {
			for (String value : bee_filters) {
				if (split_value.equals(value)) { return "BEES"; }
			}
		}
		for (String split_value : msg_split) {
			for (String value : root_filters) {
				if (split_value.equals(value)) { return "ROOTS"; }
			}
		}
		for (String split_value : msg_split) {
			for (String value : sap_filters) {
				if (split_value.equals(value)) { return "SAP"; }
			}
		}
		return null;
	}

	private void clean_chat_msg() {
		// remove unsupported characters
		for (String c : unsupported_chars) {
			chat_msg = chat_msg.replace(c,"");
		}
		// remove excessive spaces
		for (String excessive_space : excessive_spaces) {
			chat_msg = chat_msg.replace(excessive_space, " ");
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage)
	{
		// continue if valid
		if (validChatMsg(chatMessage)) {

			chat_msg_orignal = chatMessage.getMessage().toLowerCase();
			chat_msg = chat_msg_orignal;

			// clean chat msg
			clean_chat_msg();

			// classify event
			String event_type = classifyEvent();
			if (event_type != null) {
				// check if enabled
				if (event_type.equals("BEES") && !config.beesEnabled()) { return; } // exit
				if (event_type.equals("SAP") && !config.sapsEnabled()) { return; } // exit
				if (event_type.equals("ROOTS") && !config.rootsEnabled()) { return; } // exit
				// filter from messages
				if (event_type.equals("BEES")) {
					chat_msg = chat_msg.replace("bee", "");
					chat_msg = chat_msg.replace("bees", "");
				} else if (event_type.equals("SAP")) {
					chat_msg = chat_msg.replace("sapling", "");
					chat_msg = chat_msg.replace("saps", "");
					chat_msg = chat_msg.replace("sap", "");
					chat_msg = chat_msg.replace("mulch", "");
				} else if (event_type.equals("ROOTS")) {
					chat_msg = chat_msg.replace("roots", "");
					chat_msg = chat_msg.replace("root", "");
				}
			}

			// shorten the message to prevent false triggers from long sentences.
			String chat_msg_substring = chat_msg;
			if (chat_msg_substring.length() > 17) {
				chat_msg_substring = chat_msg_substring.substring(0, 17);
			}

			// find matching location
			Location event = Location.find(chat_msg_substring);

			// display timer if location is found
			if (event != null) {
				displayTimer(event, event_type, chat_msg);
			}

			//log.info(events_alive.toString());
			//log.info("");

		}
	}

	// -------------------------------------------------------------------------- ON GAME TICKS

	@Subscribe
	public void onGameTick(GameTick tickEvent) {
		if (client.getTickCount() % 5 == 0) {  // every 3 seconds roughly
			activeRootsRemoveExpired();
			activeRootsExpirationWarning();
		}
	}

	private boolean activeRootsExpiringSoon(String locationName) {
		// event duration
		long duration = eventDuration(events_type.get(locationName));
		// check if event is expiring
		long event_alive_for = Duration.between(events_starttime.get(locationName), Instant.now()).toSeconds();
		return duration - event_alive_for < Long.valueOf(config.expirationWarnTime());
	}

	private void activeRootsExpirationWarning() {
		if (!config.expirationWarning()) { return; }
		for (String locationName : events_alive) {
			// if too late, show tomato
			if (activeRootsExpiringSoon(locationName)) {
				Location event = Location.findFromName(locationName);
				if (event != null) {
					updateTimerImage(event, itemManager.getImage(ItemID.TOMATO));
				}
			}
		}
	}

	private void activeRootsRemoveExpired() {
		// remove if expired
		for (int e=0; e<events_alive.size(); e++) {
			// event duration
			long duration = eventDuration(events_type.get(events_alive.get(e)));
			// remove event
			if (Duration.between(events_starttime.get(events_alive.get(e)), Instant.now()).toSeconds() > duration) {
				Location event = Location.findFromName(events_alive.get(e));
				removeEvent(event);
			}
		}
	}

	// -------------------------------------------------------------------------- UPDATE TIMER

	private void createTimer(Location event, long duration, String tooltip) {
		newTimerUI(event.getName(), duration, itemManager.getImage(event.getItemSpriteId()), tooltip);
	}

	private void deleteTimer(Location event) {
		deleteTimerUI(event);
	}

	private void updateTimerImage(Location event, AsyncBufferedImage image) {
		if (events_alive.contains(event.getName())) {
			// delete existing ui
			deleteTimerUI(event);
			// event duration
			long duration = eventDuration(events_type.get(event.getName()));
			// calc new duration
			long new_duration = duration - Duration.between(events_starttime.get(event.getName()), Instant.now()).toSeconds();
			if (new_duration <= 0) { return; }
			// create new timer
			String tooltip = generateTooltip(event);
			newTimerUI(event.getName(), new_duration, image, tooltip);
		}
	}

	private void updateTimerTooltip(Location event, String tooltip) {
		if (events_alive.contains(event.getName())) {
			// delete existing ui
			deleteTimerUI(event);
			// event duration
			long duration = eventDuration(events_type.get(event.getName()));
			// calc new duration
			long new_duration = duration - Duration.between(events_starttime.get(event.getName()), Instant.now()).toSeconds();
			if (new_duration <= 0) { return; }
			// determine correct image
			AsyncBufferedImage image = null;
			if (config.expirationWarning() && activeRootsExpiringSoon(event.getName())) {
				image = itemManager.getImage(ItemID.TOMATO);
			} else {
				image =itemManager.getImage(event.getItemSpriteId());
			}
			// create new timer
			newTimerUI(event.getName(), new_duration, image, tooltip);
		}
	}

	// -------------------------------------------------------------------------- TIMER UI

	private void deleteTimerUI(Location event) {
		infoBoxManager.removeIf(t -> t instanceof ForestryccTimer && ((ForestryccTimer) t).getEvent().equals(event.getName()));
	}

	private void newTimerUI(String name, long duration, AsyncBufferedImage image, String tooltip) {
		ForestryccTimer timer = new ForestryccTimer(name, duration, image, this);
		timer.setTooltip(tooltip);
		infoBoxManager.addInfoBox(timer);
	}

	// -------------------------------------------------------------------------- VALIDATION

	private boolean validEvent(Location event) {
		if (event.getName().equals(Location.NMAGE.getName()) && config.enableNmage()) { return true; }
		if (event.getName().equals(Location.SMAGE.getName()) && config.enableSmage()) { return true; }
		if (event.getName().equals(Location.DRAY.getName()) && config.enableDray()) { return true; }
		if (event.getName().equals(Location.CHURCH.getName()) && config.enableChurch()) { return true; }
		if (event.getName().equals(Location.N_SEERS.getName()) && config.enableNSeers()) { return true; }
		if (event.getName().equals(Location.SEERS.getName()) && config.enableSeers()) { return true; }
		if (event.getName().equals(Location.GLADE.getName()) && config.enableGlade()) { return true; }
		if (event.getName().equals(Location.HIVE.getName()) && config.enableBees()) { return true; }
		if (event.getName().equals(Location.ZALC.getName()) && config.enableZalc()) { return true; }
		if (event.getName().equals(Location.MYTH.getName()) && config.enableMyth()) { return true; }
		if (event.getName().equals(Location.ARC.getName()) && config.enableArc()) { return true; }
		if (event.getName().equals(Location.PRIF.getName()) && config.enablePrif()) { return true; }
		if (event.getName().equals(Location.YAK.getName()) && config.enableYak()) { return true; }
		if (event.getName().equals(Location.GEYEWS.getName()) && config.enableGE()) { return true; }
		if (event.getName().equals(Location.RIMM.getName()) && config.enableRimm()) { return true; }
		if (event.getName().equals(Location.LOOK.getName()) && config.enableLookout()) { return true; }
		if (event.getName().equals(Location.WOOD.getName()) && config.enableWoodland()) { return true; }
		if (event.getName().equals(Location.OUTPOST.getName()) && config.enableOutpost()) { return true; }
		return false;
	}

	// -------------------------------------------------------------------------- FORMATTING

	private String generateTooltip(Location event)
	{
		return formatTooltip(event, events_type.get(event.getName()), events_confirmed.get(event.getName()));
	}

	private String formatTooltip(Location event, String event_type, Integer confirmations)
	{
		String tooltip = event.getName();
		// event
		if (event_type != null) {
			tooltip = tooltip + " " + event_type;
		}
		// confirmations
		if (confirmations != null && confirmations > 0) {
			tooltip = tooltip + " +" + confirmations;
		}
		return tooltip;
	}

	// -------------------------------------------------------------------------- EVENTS

	private long eventDuration(String event_type)
	{
		long duration = event_duration_default;
		if (event_type != null) {
			if (event_type.equals("BEES")) {
				duration = event_duration_bees;
			}
		}
		return duration;
	}

	private void newEvent(Location event, String event_type) {
		// update lists
		events_alive.add(event.getName());
		events_confirmed.put(event.getName(), 0);
		events_starttime.put(event.getName(),Instant.now());
		events_type.putIfAbsent(event.getName(),event_type);
		// remove any active event timer
		deleteTimer(event);
		// create timer
		String tooltip = generateTooltip(event);
		// determine duration
		long duration = eventDuration(event_type);
		createTimer(event, duration, tooltip);
	}

	private void reviveEvent(Location event) {
		// make alive again
		events_alive.add(event.getName());
		// create tooltip
		String tooltip = generateTooltip(event);
		tooltip = tooltip + " *revived";
		// create timer
		updateTimerTooltip(event, tooltip);  // update timer will create a newUI and automatically calc duration
	}

	private void confirmEvent(Location event, String event_type) {
		// update lists
		events_type.putIfAbsent(event.getName(),event_type);
		// update total confirmations
		Integer confirmations = events_confirmed.get(event.getName());
		events_confirmed.put(event.getName(), confirmations+1);
		// set tooltip
		String tooltip = generateTooltip(event);
		// update timer
		updateTimerTooltip(event, tooltip);
	}

	private void removeEvent(Location event) {
		// remove active event timers
		deleteTimer(event);
		// update Lists
		events_alive.remove(event.getName());
		events_confirmed.remove(event.getName());
		events_timeofdeath.put(event.getName(), Instant.now());
		events_type.put(event.getName(),null);
	}

	// -------------------------------------------------------------------------- INSTRUCTIONS

	private void Dead(Location event) {
		removeEvent(event);
//		if (events_alive.contains(event.getName())) {
//			long duration = Duration.between(events_starttime.get(event.getName()), Instant.now()).toSeconds();
//			log.info(event.getName() + " dead after " + duration + "sec: " + chat_msg_orignal);
//		} else {
//			log.info(event.getName() + " dead: " + chat_msg_orignal );
//		}
	}

	private void Revive(Location event) {
		// check if event is active
		if (events_alive.contains(event.getName())) { 
			return;  // cancel revive
		} 
		// check if event is within revive window
		if (Duration.between(events_timeofdeath.get(event.getName()), Instant.now()).toSeconds() < revive_timeout) {
			reviveEvent(event);
			//log.info(event.getName() + " attempt revive: " + chat_msg_orignal);
		}
	}

	private void Fake(Location event) {
		//log.info(event.getName() + " fake: " + chat_msg_orignal);
		removeEvent(event);
	}

	private void New(Location event, String event_type) {
		// check if recently died
		if (Duration.between(events_timeofdeath.get(event.getName()), Instant.now()).toSeconds() < death_timeout) {
			//log.info(event.getName() + " recently died, ignoring call: " + chat_msg_orignal);
			return;
		}
		// create new event if valid
		if (validEvent(event)) {
			//log.info(event.getName() + " new: " + chat_msg_orignal);
			newEvent(event, event_type);
		}
	}

	private void Confirm(Location event, String event_type) {
		// confirm event if valid
		if (validEvent(event)) {
			//log.info(event.getName() + " confirmed: " + chat_msg_orignal);
			confirmEvent(event, event_type);
		}
	}

	// -------------------------------------------------------------------------- CREATE TIMER

	private void NotifyNew(Location event, String event_type) {
		// exit if disabled
		if (!config.idleNotificationEnabled()) {
			return;
		}
		// notify
		if (validEvent(event)) {
			if (event_type == null) {
				notifier.notify("New forestry cc event!");
			} else {
				notifier.notify("New forestry cc " + event_type.toLowerCase() + " event!");
			}
		}
	}

	// -------------------------------------------------------------------------- CREATE TIMER

	private void displayTimer(Location event, String event_type, String msg) {

		if (event.isRevive(msg)) {
			// revive
			if (config.allowRevives()) {
				Revive(event);
			}
			
		} else if (event.isFake(msg)) {
			// fake
			Fake(event);

		} else if (event.isConfirmed(msg)) {
			// confirm
			if (events_alive.contains(event.getName()) && events_confirmed.containsKey(event.getName())) {
				Confirm(event, event_type);
			} else {
				New(event, event_type);
				NotifyNew(event, event_type);
			}

		} else if (event.isDead(msg)) {
			// dead
			Dead(event);

		} else {
			// new / confirm
			if (events_alive.contains(event.getName()) && events_confirmed.containsKey(event.getName())) {
				Confirm(event, event_type);
			} else {
				New(event, event_type);
				NotifyNew(event, event_type);
			}

		}

	}

	@Provides
	ForestryccConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ForestryccConfig.class);
	}

}

/*
 * Copyright (c) 2023, Rang <rangdevelopment@gmail.com>
 * based on
 * Copyright (c) 2017, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.rang.forestrycc;

import java.awt.image.BufferedImage;
import java.time.temporal.ChronoUnit;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.ui.overlay.infobox.Timer;

class ForestryccTimer extends Timer
{
	private final String event;

	public ForestryccTimer(String event, long dur, BufferedImage bossImage, Plugin plugin)
	{
		super(dur, ChronoUnit.SECONDS, bossImage, plugin);
		this.event = event;
	}

	public String getEvent()
	{
		return event;
	}
}

package com.rang.forestrycc;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;

@ConfigGroup(ForestryccConfig.GROUP)
public interface ForestryccConfig extends Config
{
	String GROUP = "forestrycc";

	// ----------------------------------------------------- GENERAL

	@ConfigSection(
			name = "General",
			description = "General settings",
			position = 0
	)
	String generalSettings = "generalSettings";

	@ConfigItem(
			position = 1,
			keyName = "allowRevives",
			name = "Allow Revive",
			description = "Someone may call an event fake/dead when it's still alive. Type \"Dray not dead\", \"Dray still up\", or \"Dray alive\" within 10 seconds to revive the timer.",
			section = generalSettings
	)
	default boolean allowRevives()
	{
		return true;
	}

	@ConfigItem(
		position = 2,
		keyName = "expirationWarning",
		name = "Expiration Warning",
		description = "Display a tomato when an event is close to expiring.",
		section = generalSettings
	)
	default boolean expirationWarning()
	{
		return true;
	}

	@Range(
			min = 0,
			max = 119
	)
	@ConfigItem(
			position = 3,
			keyName = "expirationWarnTime",
			name = "Warning (sec)",
			description = "Display a tomato X seconds before an event ends.",
			section = generalSettings
	)
	default int expirationWarnTime()
	{
		return 30;
	}

	@ConfigItem(
			position = 4,
			keyName = "rootsEnabled",
			name = "Enable Roots (root/r)",
			description = "Disable to hide root events when possible.",
			section = generalSettings
	)
	default boolean rootsEnabled()
	{
		return true;
	}

	@ConfigItem(
			position = 5,
			keyName = "sapsEnabled",
			name = "Enable Saplings (sap)",
			description = "Disable to hide sapling events when possible.",
			section = generalSettings
	)
	default boolean sapsEnabled()
	{
		return true;
	}

	@ConfigItem(
			position = 6,
			keyName = "BeesEnabled",
			name = "Enable Bees (bees/b)",
			description = "Disable to hide bee events when possible.",
			section = generalSettings
	)
	default boolean beesEnabled()
	{
		return true;
	}

	@ConfigItem(
			position = 7,
			keyName = "idleNotificationEnabled",
			name = "Enable idle notifications",
			description = "Turn on for notifications of new CC events when idle. Filter notifications using the event toggles above.",
			section = generalSettings
	)
	default boolean idleNotificationEnabled()
	{
		return false;
	}

	// ----------------------------------------------------- LOCATIONS

	@ConfigSection(
			name = "Locations",
			description = "Locations",
			position = 1
	)
	String locations = "locations";

	@ConfigItem(
			position = 1,
			keyName = "enableNmage",
			name = "North Sorcerer's Tower (Nmage)",
			description = "Use Kandarin headgear 4 or Combat bracelet teleport to ranging guild.",
			section = locations
	)
	default boolean enableNmage()
	{
		return true;
	}

	@ConfigItem(
			position = 2,
			keyName = "enableSmage",
			name = "South Sorcerer's Tower (Smage)",
			description = "Use Kandarin headgear 4 or Combat bracelet teleport to ranging guild.",
			section = locations
	)
	default boolean enableSmage()
	{
		return true;
	}

	@ConfigItem(
			position = 3,
			keyName = "enableDray",
			name = "Draynor (Dray)",
			description = "Teleport with Glory.",
			section = locations
	)
	default boolean enableDray()
	{
		return true;
	}

	@ConfigItem(
			position = 4,
			keyName = "enableChurch",
			name = "Seers Church (Church)",
			description = "Use Kandarin headgear 4 or Camelot teleport.",
			section = locations
	)
	default boolean enableChurch()
	{
		return true;
	}

	@ConfigItem(
			position = 5,
			keyName = "enableNSeers",
			name = "North Seers (N Seers)",
			description = "Seers Maples / Seers Willows. Use Camelot teleport.",
			section = locations
	)
	default boolean enableNSeers()
	{
		return true;
	}

	@ConfigItem(
			position = 6,
			keyName = "enableSeers",
			name = "Seers (South/Bank)",
			description = "Seers Bank / Seers Oaks / S Seers. Use Camelot teleport.",
			section = locations
	)
	default boolean enableSeers()
	{
		return true;
	}

	@ConfigItem(
			position = 7,
			keyName = "enableGlade",
			name = "Xeric's Glade (Glade)",
			description = "Teleport with Xeric's talisman option 2.",
			section = locations
	)
	default boolean enableGlade()
	{
		return true;
	}

	@ConfigItem(
			position = 8,
			keyName = "enableBees",
			name = "Seers Hive (Hive)",
			description = "Use Kandarin headgear 4 or Camelot teleport.",
			section = locations
	)
	default boolean enableBees()
	{
		return true;
	}

	@ConfigItem(
			position = 9,
			keyName = "enableZalc",
			name = "Zalcano (Zalc)",
			description = "Located in Prifddinas, use Teleport crystal or Spirit tree.",
			section = locations
	)
	default boolean enableZalc()
	{
		return true;
	}

	@ConfigItem(
			position = 10,
			keyName = "enableMyth",
			name = "Myth's Guild (Myth)",
			description = "Teleport with mythical cape",
			section = locations
	)
	default boolean enableMyth()
	{
		return true;
	}

	@ConfigItem(
			position = 11,
			keyName = "enableArc",
			name = "Arceuus Magics (Arc)",
			description = "Teleport with book of the dead, option 5. Also Kharedst's memoirs option 5.",
			section = locations
	)
	default boolean enableArc()
	{
		return true;
	}

	@ConfigItem(
			position = 12,
			keyName = "enablePrif",
			name = "Prifddinas (Prif Teak/Prif Mahog)",
			description = "Use Teleport crystal",
			section = locations
	)
	default boolean enablePrif()
	{
		return true;
	}

	@ConfigItem(
			position = 13,
			keyName = "enableYak",
			name = "Neitiznot (Yak)",
			description = "Teleport with enchanted lyre. ",
			section = locations
	)
	default boolean enableYak()
	{
		return true;
	}

	@ConfigItem(
			position = 14,
			keyName = "enableGE",
			name = "GE Yews",
			description = "Teleport to Varrock or GE.",
			section = locations
	)
	default boolean enableGE()
	{
		return true;
	}

	@ConfigItem(
			position = 15,
			keyName = "enableRimm",
			name = "Rimmington (Rimm)",
			description = "Teleport to House or Skills necklace.",
			section = locations
	)
	default boolean enableRimm()
	{
		return true;
	}

	@ConfigItem(
			position = 16,
			keyName = "enableLookout",
			name = "Xeric's Lookout (Lookout)",
			description = "Teleport with Xeric's Talisman.",
			section = locations
	)
	default boolean enableLookout()
	{
		return true;
	}

	@ConfigItem(
			position = 17,
			keyName = "enableWoodland",
			name = "Kourend Woodland (Woodland)",
			description = "Teleport with Rada's blessing.",
			section = locations
	)
	default boolean enableWoodland()
	{
		return true;
	}

	@ConfigItem(
			position = 18,
			keyName = "enableOutpost",
			name = "Barbarian Outpost (Barb)",
			description = "Teleport with games necklace.",
			section = locations
	)
	default boolean enableOutpost()
	{
		return true;
	}

}

/*
 * Copyright (c) 2023, Rang <rangdevelopment@gmail.com>
 * based on
 * Copyright (c) 2016-2017, Cameron Moberg <Moberg@tuta.io>
 * Copyright (c) 2017, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.rang.forestrycc;

import com.google.common.collect.ImmutableMap;
import java.util.*;

import net.runelite.api.ItemID;


enum Location {
	NMAGE("North Sorcerer's Tower (Nmage)", List.of("nmage","n mage","north mage"), null, false, false, ItemID.COMBAT_BRACELET),
	SMAGE("South Sorcerer's Tower (Smage)", List.of("smage","s mage","south mage"), null, false, false, ItemID.CAPE_OF_LEGENDS),
	DRAY("Draynor (Dray)", List.of("draynor","dray"),null, false, false, ItemID.WILLOW_LOGS),
	CHURCH("Seers Church (Church)", List.of("church","churc","curch","churh","chrch","chuch"),null, false, false, ItemID.HOLY_SYMBOL),
	N_SEERS("North Seers (NSeers)", List.of("north seers", "north seer", "n seers","nseers","n seer","nseer","n sears","nsears"), List.of("bank","south","s"), false, true, ItemID.MAPLE_LOGS),
	SEERS("Seers (S Seers/Seers Bank)", List.of("seer oaks","seers oaks", "seer oak", "seers oak","seers bank", "seer bank", "s seers","sseers","s seer","sseer", "seers", "seer","s sears","ssears","sears","sear"),List.of("n","north","nseers"), false, true, ItemID.CAMELOT_TELEPORT),
	GLADE("Xeric's Glade (Glade)", List.of("glade"),null, false, false, ItemID.XERICS_TALISMAN),
	HIVE("Seers Beehives (Hive)", List.of("hives","hive"),null, false, false, ItemID.BEE_ON_A_STICK),
	ZALC("Zalcano (Zalc)", List.of("zalc"),null, false, false, ItemID.ZALCANO_SHARD),
	MYTH("Myth's Guild (Myth)", List.of("myths","myth"),null, false, false, ItemID.MYTHICAL_CAPE_22114),
	ARC("Arceuus Magics (Arc)", List.of("arc"),null, false, false, ItemID.BOOK_OF_THE_DEAD),
	PRIF("Prifddinas (Prif Teaks/Prif Mahog)", List.of("prif teaks","prif teak","prif t","prif mahogs","prif mahog","prif m","prift","prifm","prif"),null, false, false, ItemID.CRYSTAL_TELEPORT_SEED),
	YAK("Neitiznot (Yak)", List.of("yakki boo","yakki","yak","arctic pines","arctic pine","arctic"),null, false, false, ItemID.HELM_OF_NEITIZNOT),
	GEYEWS("GE Yews", List.of("ge"),null, true, false, ItemID.COINS),
	RIMM("Rimmington (Rimm)", List.of("Rimmington","rimm","rim"),null, false, false, ItemID.SAW),
	LOOK("Xeric's Lookout (Lookout)", List.of("lookout"),null, false, false, ItemID.BLACK_KITESHIELD),
	WOOD("Kourend Woodland (Woodland)", List.of("woodland"),null, false, false, ItemID.RADAS_BLESSING_4),
	OUTPOST("Barbarian Outpost (Barb)", List.of("barbarian outpost","barbarian","outpost","barb"),null, false, false, ItemID.GAMES_NECKLACE8),
	;

	private static final Map<String, Location> locations;

	private final String name;
	public final List<String> match_filters;
	public final List<String> exclude_filters;
	private final boolean match_strict;
	private final boolean exclude_strict;
	private final int itemSpriteId;

	static {
		ImmutableMap.Builder<String, Location> builder = new ImmutableMap.Builder<>();

		for (Location roots : values()) {
			builder.put(roots.getName(), roots);
		}

		locations = builder.build();
	}

	Location(String name, List<String> match_filters, List<String> exclude_filters, boolean match_strict, boolean exclude_strict, int itemSpriteId) {
		this.name = name;
		this.match_filters = match_filters;
		this.exclude_filters = exclude_filters;
		this.match_strict = match_strict;
		this.exclude_strict = exclude_strict;
		this.itemSpriteId = itemSpriteId;
	}

	public String getName() {
		return name;
	}

	public Integer getSize() {
		return locations.size();
	}

	public boolean isMatch(String msg) {

		// split msg
		String[] msg_split = msg.split(" ");

		// rebuild string from first 3 words
		String first_three_words = null;
		Integer num_spaces = msg_split.length;
		if (num_spaces > 3) { num_spaces = 3; }
		first_three_words = String.join(" ", Arrays.copyOfRange(msg_split,0,num_spaces));

		// check exclude first
		if (exclude_filters != null) {
			if (exclude_strict) {
				// strict match
				for (String split_value : msg_split) {
					for (String value : exclude_filters) {
						if (split_value.equals(value)) { return false; }
					}
				}
			} else {
				// match anything
				for (String value : exclude_filters) {
					if (first_three_words.contains(value)) { return false; }
				}
			}
		}

		// look for match
		if (match_filters != null) {
			if (match_strict) {
				// strict match
				for (String split_value : msg_split) {
					for (String value : match_filters) {
						if (split_value.equals(value)) { return true; }
					}
				}
			} else {
				// match anything
				for (String value : match_filters) {
					if (first_three_words.contains(value)) { return true; }
				}
			}
		}

		return false;
	}

	public boolean isRevive(String msg) {
		String[] confirmed_strings = {"not dead","alive","still here","not d","still up","still going","real","still","stil"};
		for (String value : confirmed_strings) {
			if (msg.contains(value)) { return true; }
		}
		return false;
	}

	public boolean isConfirmed(String msg) {
		String[] confirmed_strings = {"confirmed","confirm","conf","con*","real","alive","c"};
		String[] msg_split = msg.split(" ");
		for (String split_value : msg_split) {
			for (String value : confirmed_strings) {
				if (split_value.matches(value)) { return true; }
			}
		}
		return false;
	}

	public boolean isDead(String msg) {
		String[] confirmed_strings = {"murder","bust","rip","clear","cleared","busted","dead","done","ded","dea","d"};
		String[] msg_split = msg.split(" ");
		for (String split_value : msg_split) {
			for (String value : confirmed_strings) {
				if (split_value.matches(value)) { return true; }
			}
		}
		return false;
	}

	public boolean isFake(String msg) {
		String[] confirmed_strings = {"fake"};
		String[] msg_split = msg.split(" ");
		for (String split_value : msg_split) {
			for (String value : confirmed_strings) {
				if (split_value.matches(value)) { return true; }
			}
		}
		return false;
	}

	public int getItemSpriteId() {
		return itemSpriteId;
	}

	public static Location find(String msg) {
		for (String key : locations.keySet()) {
			if (locations.get(key).isMatch(msg)) {
				return locations.get(key);
			}
		}
		return null;
	}

	public static Location findFromName(String rootName) {
		for (String key : locations.keySet()) {
			if (locations.get(key).getName().equals(rootName)) {
				return locations.get(key);
			}
		}
		return null;
	}

}

