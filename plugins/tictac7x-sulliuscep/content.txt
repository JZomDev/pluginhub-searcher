package tictac7x.sulliuscep;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SulliuscepPluginTest {
	public static void main(String[] args) throws Exception {
		ExternalPluginManager.loadBuiltin(SulliuscepPlugin.class);
		RuneLite.main(args);
	}
}
package tictac7x.sulliuscep;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;

import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

public class TarSwampWidget extends OverlayPanel {
    private final SulliuscepConfig config;
    private final TarSwamp tar_swamp;

    public TarSwampWidget(final SulliuscepConfig config, final TarSwamp tar_swamp) {
        this.config = config;
        this.tar_swamp = tar_swamp;

        setPosition(OverlayPosition.TOP_LEFT);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (config.showMudPitWidget() && tar_swamp.inRegion() && !tar_swamp.isPitFilled()) {
            panelComponent.getChildren().clear();
            panelComponent.setBackgroundColor(config.getMudPitColor());

            panelComponent.getChildren().add(
                TitleComponent.builder()
                .text("MUD PIT EMPTY!")
                .build()
            );

            return super.render(graphics);
        }

        return null;
    }
}

package tictac7x.sulliuscep;

import com.google.common.collect.ImmutableSet;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.VarbitChanged;

import java.util.Arrays;
import java.util.List;
import java.util.Set;

public class TarSwamp {
    public static final int SULLIUSCEP_0 = 31420;
    public static final int SULLIUSCEP_1 = 31421;
    public static final int SULLIUSCEP_2 = 31422;
    public static final int SULLIUSCEP_3 = 31423;
    public static final int SULLIUSCEP_4 = 31424;
    public static final int SULLIUSCEP_5 = 31425;
    public static final int PIT = 31426;
    public static final int VINES = 30644;
    public static final int THICK_VINE = 30646;
    public static final int THICK_VINES = 30648;
    public static final int VARBIT_SULLIUSCEP = 5808;
    public static final int VARBIT_PIT_FILLED = 5809;

    private final Set<Integer> regions = ImmutableSet.of(14649, 14650, 14651, 14652);

    private final List<WorldLocationObstacle> obstacles = Arrays.asList(
        new WorldLocationObstacle(THICK_VINE, 3678, 3743, 1),
        new WorldLocationObstacle(THICK_VINES, 3669, 3746, 2),
        new WorldLocationObstacle(THICK_VINES, 3671, 3760, 2),
        new WorldLocationObstacle(THICK_VINES, 3672, 3764, 2),
        new WorldLocationObstacle(VINES, 3674, 3771, 3),
        new WorldLocationObstacle(THICK_VINES, 3666, 3788, 4),
        new WorldLocationObstacle(THICK_VINES, 3670, 3792, 4),
        new WorldLocationObstacle(THICK_VINE, 3672, 3801, 4)
    );

    private final List<WorldLocationObject> sulliusceps = Arrays.asList(
        new WorldLocationObject(SULLIUSCEP_0, 3683, 3758),
        new WorldLocationObject(SULLIUSCEP_1, 3678, 3733),
        new WorldLocationObject(SULLIUSCEP_2, 3683, 3775),
        new WorldLocationObject(SULLIUSCEP_3, 3663, 3781),
        new WorldLocationObject(SULLIUSCEP_4, 3663, 3802),
        new WorldLocationObject(SULLIUSCEP_5, 3678, 3806)
    );

    private final Client client;

    private boolean in_region = false;
    private boolean pit_filled = false;
    private int sulliuscep_active = 0;

    public TarSwamp(final Client client) {
        this.client = client;
    }

    public void onVarbitChanged() {
        pit_filled = (client.getVarbitValue(VARBIT_PIT_FILLED) == 1);
        sulliuscep_active = (client.getVarbitValue(VARBIT_SULLIUSCEP));
    }

    public void onGameStateChanged(final GameStateChanged event) {
        if (client.getMapRegions() == null) return;

        for (final int region : client.getMapRegions()) {
            if (regions.contains(region)) {
                in_region = true;
                return;
            }
        }

        in_region = false;
    }

    public List<WorldLocationObstacle> getObstacles() {
        return obstacles;
    }

    public List<WorldLocationObject> getSulliusceps() {
        return sulliusceps;
    }

    public int getSulliuscepActive() {
        return sulliuscep_active;
    }

    public boolean isSulliuscep(final int id) {
        return (
            id == SULLIUSCEP_0 ||
            id == SULLIUSCEP_1 ||
            id == SULLIUSCEP_2 ||
            id == SULLIUSCEP_3 ||
            id == SULLIUSCEP_4 ||
            id == SULLIUSCEP_5
        );
    }

    public boolean isPit(final int id) {
        return id == PIT;
    }

    public boolean isPitFilled() {
        return pit_filled;
    }

    public boolean inRegion() {
        return in_region;
    }
}

package tictac7x.sulliuscep;

import net.runelite.api.TileObject;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Shape;
import java.util.Optional;
import java.util.Set;
import java.util.HashSet;

import java.awt.Dimension;
import java.awt.Graphics2D;

import net.runelite.api.GameState;
import net.runelite.api.GameObject;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;


public class TarSwampOverlay extends Overlay {
    private final SulliuscepConfig config;
    private final TarSwamp tar_swamp;

    private final Set<GameObject> obstacles = new HashSet<>();
    private final Set<GameObject> sulliusceps = new HashSet<>();
    private Optional<GameObject> pit = Optional.empty();

    public TarSwampOverlay(final SulliuscepConfig config, final TarSwamp tar_swamp) {
        this.config = config;
        this.tar_swamp = tar_swamp;

        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    public void onGameObjectSpawned(final GameObject game_object) {
        if (!tar_swamp.inRegion()) return;
        final int id = game_object.getId();

        // Sulliuscep.
        if (tar_swamp.isSulliuscep(id)) {
            sulliusceps.add(game_object);

        // Pit.
        } else if (tar_swamp.isPit(id)) {
            pit = Optional.of(game_object);

        // Obstacle.
        } else {
            tar_swamp.getObstacles().stream().filter(obstacle ->
                game_object.getId() == obstacle.id &&
                game_object.getWorldLocation().getX() == obstacle.x &&
                game_object.getWorldLocation().getY() == obstacle.y
            ).findFirst().ifPresent((obstacle -> {
                obstacles.add(game_object);
            }));
        }
    }

    public void onGameObjectDespawned(final GameObject game_object) {
        if (!tar_swamp.inRegion()) return;
        final int id = game_object.getId();

        // Sulliuscep.
        if (tar_swamp.isSulliuscep(id)) {
            sulliusceps.remove(game_object);

        // Pit.
        } else if (tar_swamp.isPit(id)) {
            pit = Optional.empty();

        // Obstacle.
        } else {
            obstacles.remove(game_object);
        }
    }

    public void onGameStateChanged(final GameStateChanged event) {
        if (tar_swamp.inRegion() && event.getGameState() == GameState.LOADING) {
            obstacles.clear();
            sulliusceps.clear();
            pit = Optional.empty();
        }
    }

    private Optional<GameObject> getSulliuscep() {
        final WorldLocationObject world_location_sulliuscep = tar_swamp.getSulliusceps().get(tar_swamp.getSulliuscepActive());

        return sulliusceps.stream().filter(sulliuscep_game_object ->
            sulliuscep_game_object.getWorldLocation().getX() == world_location_sulliuscep.x &&
            sulliuscep_game_object.getWorldLocation().getY() == world_location_sulliuscep.y
        ).findFirst();
    }

    private Set<GameObject> getObstacles() {
        switch (config.highlightObstacles()) {
            case NONE:
                return new HashSet<>();

            default:
            case ALL:
                return obstacles;

            case NEXT:
                final Set<GameObject> obstacles_next = new HashSet<>();

                for (final GameObject obstacle : obstacles) {
                    tar_swamp.getObstacles().stream().filter(world_location_obstacle ->
                         obstacle.getWorldLocation().getX() == world_location_obstacle.x &&
                         obstacle.getWorldLocation().getY() == world_location_obstacle.y &&
                         tar_swamp.getSulliuscepActive()    == world_location_obstacle.sulliuscep
                    ).findFirst().ifPresent(obs -> obstacles_next.add(obstacle));
                }

                return obstacles_next;
        }
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (!tar_swamp.inRegion()) return null;

        // Sulliuscep.
        final Optional<GameObject> sulliuscep = getSulliuscep();
        if (sulliuscep.isPresent()) {
            renderClickbox(graphics, sulliuscep.get(), config.getSulliuscepColor());
        }

        // Mud pit.
        if (pit.isPresent() && !tar_swamp.isPitFilled()) {
            renderClickbox(graphics, pit.get(), config.getMudPitColor());
        }

        // Obstacles.
        for (final GameObject obstacle : getObstacles()) {
            renderClickbox(graphics, obstacle, config.getObstaclesColor());
        }

        return null;
    }

    private void renderClickbox(final Graphics2D graphics, final TileObject object, final Color color) {
        try {
            final Shape clickbox = object.getClickbox();

            // Area border.
            graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), color.getAlpha() + 30));
            graphics.setStroke(new BasicStroke(1));
            graphics.draw(clickbox);

            // Area fill.
            graphics.setColor(color);
            graphics.fill(clickbox);
        } catch (final Exception ignored) {}
    }
}

package tictac7x.sulliuscep;

import java.awt.Color;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("tictac7x-sulliuscep")
public interface SulliuscepConfig extends Config {
	@ConfigSection(
		name = "Sulliusceps",
		description = "Sulliusceps",
		position = 1
	) String sulliusceps = "sulliusceps";

		@Alpha
		@ConfigItem(
			keyName = "sulliuscep",
			name = "Sulliuscep color",
			description = "Choose the color of the sulliuscep.",
			position = 1,
			section = sulliusceps
		) default Color getSulliuscepColor() { return new Color(0, 255, 0, 40); }

	@ConfigSection(
		name = "Obstacles",
		description = "Obstacles",
		position = 2
	) String obstacles = "obstacles";

		@ConfigItem(
			keyName = "obstacles",
			name = "Highlighted obstacles",
			description = "Select which obstacles to highlight.",
			position = 1,
			section = obstacles
		) default Obstacles highlightObstacles() { return Obstacles.ALL; }

		@Alpha
		@ConfigItem(
			keyName = "obstacles_color",
			name = "Obstacles",
			description = "Choose the color of the obstacles.",
			position = 2,
			section = obstacles
		) default Color getObstaclesColor() { return new Color(255, 150, 0, 40); }

	@ConfigSection(
		name = "Mud pit",
		description = "Mudpit",
		position = 3
	) String mudpit = "mudpit";

		@ConfigItem(
			keyName = "mudpit_widget",
			name = "Show empty warning",
			description = "Show warning if the mud pit is empty and needs to be filled with mushrooms.",
			position = 1,
			section = mudpit
		) default boolean showMudPitWidget() { return true; }

		@Alpha
		@ConfigItem(
			keyName = "mudpit_color",
			name = "Mud pit color",
			description = "Choose the color of the mud pit.",
			position = 2,
			section = mudpit
		) default Color getMudPitColor() { return new Color(255, 0, 0, 40); }
}

package tictac7x.sulliuscep;

public class WorldLocationObject {
    public final int id;
    public final int x;
    public final int y;

    public WorldLocationObject(final int id, final int x, final int y) {
        this.id = id;
        this.x = x;
        this.y = y;
    }
}

package tictac7x.sulliuscep;

public class WorldLocationObstacle extends WorldLocationObject {
    public final int sulliuscep;

    public WorldLocationObstacle(final int id, final int x, final int y, final int sulliuscep) {
        super(id, x, y);
        this.sulliuscep = sulliuscep;
    }
}

package tictac7x.sulliuscep;

import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import com.google.inject.Provides;

import net.runelite.api.Client;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.plugins.Plugin;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameObjectDespawned;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Sulliuscep run",
	description = "Helpful clickboxes for sulliuscep run",
	tags = { "fossil", "sullius", "sulliuscep", "numulite", "tar", "swamp" }
)
public class SulliuscepPlugin extends Plugin {
	@Inject
	private Client client;

	@Inject
	private ClientThread client_thread;

	@Inject
	private SulliuscepConfig config;

	@Inject
	private OverlayManager overlays;

	private TarSwamp tar_swamp;
	private TarSwampOverlay tar_swamp_overlay;
	private TarSwampWidget tar_swamp_widget;

	@Provides
	SulliuscepConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(SulliuscepConfig.class);
	}

	@Override
	protected void startUp() {
		tar_swamp = new TarSwamp(client);
		tar_swamp_overlay = new TarSwampOverlay(config, tar_swamp);
		tar_swamp_widget = new TarSwampWidget(config, tar_swamp);

		overlays.add(tar_swamp_overlay);
		overlays.add(tar_swamp_widget);
	}

	@Override
	protected void shutDown() {
		overlays.remove(tar_swamp_overlay);
		overlays.remove(tar_swamp_widget);
	}

	@Subscribe
	public void onGameObjectSpawned(final GameObjectSpawned event) {
		tar_swamp_overlay.onGameObjectSpawned(event.getGameObject());
	}

	@Subscribe
	public void onGameObjectDespawned(final GameObjectDespawned event) {
		tar_swamp_overlay.onGameObjectDespawned(event.getGameObject());
	}

	@Subscribe
	public void onVarbitChanged(final VarbitChanged event) {
		tar_swamp.onVarbitChanged();
	}

	@Subscribe
	public void onGameStateChanged(final GameStateChanged event) {
		tar_swamp.onGameStateChanged(event);
		tar_swamp_overlay.onGameStateChanged(event);
	}
}

package tictac7x.sulliuscep;

public enum Obstacles {
    ALL,
    NEXT,
    NONE
}
