package com.antimated;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class MilestoneLevelTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(MilestoneLevelsPlugin.class);
		RuneLite.main(args);
	}
}
package com.antimated.util;

import java.awt.Color;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Experience;
import net.runelite.api.Skill;
import net.runelite.client.config.RuneScapeProfileType;
import net.runelite.client.util.Text;

@Slf4j
public class Util
{
	/**
	 * Checks if a level is a valid real level (>= 1 and <= 99)
	 *
	 * @param level int
	 * @return boolean
	 */
	public static boolean isValidRealLevel(int level)
	{
		return level >= 1 && level <= Experience.MAX_REAL_LEVEL;
	}

	/**
	 * Checks if a level is a valid virtual level (> 99 and <= 126)
	 *
	 * @param level int
	 * @return boolean
	 */
	public static boolean isValidVirtualLevel(int level)
	{
		return level > Experience.MAX_REAL_LEVEL && level <= Experience.MAX_VIRT_LEVEL;
	}

	/**
	 * @param string String
	 * @return boolean
	 */
	public static boolean isInteger(String string)
	{
		try
		{
			Integer.parseInt(string);
			return true;
		}
		catch (NumberFormatException e)
		{
			return false;
		}
	}

	/**
	 * Gets the int value for a color.
	 *
	 * @param color color
	 * @return int
	 */
	public static int getIntValue(Color color)
	{
		int red = color.getRed();
		int green = color.getGreen();
		int blue = color.getBlue();

		// Combine RGB values into a single integer
		return (red << 16) | (green << 8) | blue;
	}


	/**
	 * Replaces the words $skill and $level from the text to the passed skill and level respectively
	 *
	 * @param text  String
	 * @param skill Skill
	 * @param level int
	 * @return String
	 */
	public static String replaceSkillAndLevel(String text, Skill skill, int level)
	{
		return Text.removeTags(text
			.replaceAll("\\$skill", skill.getName())
			.replaceAll("\\$level", Integer.toString(level)));
	}

	public static boolean isStandardWorld(Client client)
	{
		return RuneScapeProfileType.getCurrent(client) != RuneScapeProfileType.STANDARD;
	}

	/**
	 * Is player currently within the provided map regions
	 */
	public static boolean isPlayerWithinMapRegion(Client client, Set<Integer> definedMapRegions)
	{
		final int[] mapRegions = client.getMapRegions();

		for (int region : mapRegions)
		{
			if (definedMapRegions.contains(region))
			{
				return true;
			}
		}

		return false;
	}

}

package com.antimated;

import java.awt.Color;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.ui.JagexColors;

@ConfigGroup("milestoneLevels")
public interface MilestoneLevelsConfig extends Config
{
	@ConfigSection(
		name = "Notification",
		description = "Contents to be shown on the level-up notification.",
		position = 0
	)
	String notificationConfig = "notificationConfig";

	@ConfigItem(
		keyName = "notificationTitle",
		name = "Title",
		description = "Can include $level and $skill variables.",
		section = notificationConfig,
		position = 0
	)
	default String notificationTitle()
	{
		return "Level milestone";
	}

	@ConfigItem(
		keyName = "notificationText",
		name = "Text",
		description = "Can include $level and $skill variables.",
		section = notificationConfig,
		position = 1
	)
	default String notificationText()
	{
		return "Gained level $level in $skill!";
	}

	@ConfigItem(
		keyName = "notificationColor",
		name = "Color",
		description = "Changes the color of the notification title and text.",
		section = notificationConfig,
		position = 2
	)
	default Color notificationColor()
	{
		return JagexColors.DARK_ORANGE_INTERFACE_TEXT;
	}

	@ConfigSection(
		name = "Levels",
		description = "Settings for what levels we want to display notifications on",
		position = 1
	)
	String levelsConfig = "levelsConfig";

	@ConfigItem(
		keyName = "showOnLevels",
		name = "Levels",
		description = "Configures levels to display notifications on. Format: (Level), (Level). When empty it displays notifications for all levels.",
		section = levelsConfig,
		position = 0
	)
	default String showOnLevels()
	{
		return "10, 20, 30, 40, 50, 60, 70, 80, 90, 99";
	}

	@ConfigItem(
		keyName = "showVirtualLevels",
		name = "Notify for virtual levels",
		description = "Notify when leveling a virtual level. Ignores the list of levels and skills.",
		section = levelsConfig,
		position = 1
	)
	default boolean showVirtualLevels()
	{
		return true;
	}

	@ConfigSection(
		name = "Skills",
		description = "Settings for what skills we want to display notifications on",
		position = 2
	)
	String skillsConfig = "skillsConfig";

	@ConfigItem(
		keyName = "showAttackNotifications",
		name = "Attack",
		description = "Should we show Attack notifications?",
		section = skillsConfig
	)
	default boolean showAttackNotifications()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showDefenceNotifications",
		name = "Defence",
		description = "Should we show Defence notifications?",
		section = skillsConfig
	)
	default boolean showDefenceNotifications()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showStrengthNotifications",
		name = "Strength",
		description = "Should we show Strength notifications?",
		section = skillsConfig
	)
	default boolean showStrengthNotifications()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showHitpointsNotifications",
		name = "Hitpoints",
		description = "Should we show Hitpoints notifications?",
		section = skillsConfig
	)
	default boolean showHitpointsNotifications()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showRangedNotifications",
		name = "Ranged",
		description = "Should we show Ranged notifications?",
		section = skillsConfig
	)
	default boolean showRangedNotifications()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showPrayerNotifications",
		name = "Prayer",
		description = "Should we show Prayer notifications?",
		section = skillsConfig
	)
	default boolean showPrayerNotifications()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showMagicNotifications",
		name = "Magic",
		description = "Should we show Magic notifications?",
		section = skillsConfig
	)
	default boolean showMagicNotifications()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showCookingNotifications",
		name = "Cooking",
		description = "Should we show Cooking notifications?",
		section = skillsConfig
	)
	default boolean showCookingNotifications()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showWoodcuttingNotifications",
		name = "Woodcutting",
		description = "Should we show Woodcutting notifications?",
		section = skillsConfig
	)
	default boolean showWoodcuttingNotifications()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showFletchingNotifications",
		name = "Fletching",
		description = "Should we show Fletching notifications?",
		section = skillsConfig
	)
	default boolean showFletchingNotifications()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showFishingNotifications",
		name = "Fishing",
		description = "Should we show Fishing notifications?",
		section = skillsConfig
	)
	default boolean showFishingNotifications()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showFiremakingNotifications",
		name = "Firemaking",
		description = "Should we show Firemaking notifications?",
		section = skillsConfig
	)
	default boolean showFiremakingNotifications()
	{
		return true;
	}


	@ConfigItem(
		keyName = "showCraftingNotifications",
		name = "Crafting",
		description = "Should we show Crafting notifications?",
		section = skillsConfig
	)
	default boolean showCraftingNotifications()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showSmithingNotifications",
		name = "Smithing",
		description = "Should we show Smithing notifications?",
		section = skillsConfig
	)
	default boolean showSmithingNotifications()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showMiningNotifications",
		name = "Mining",
		description = "Should we show Mining notifications?",
		section = skillsConfig
	)
	default boolean showMiningNotifications()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showHerbloreNotifications",
		name = "Herblore",
		description = "Should we show Herblore notifications?",
		section = skillsConfig
	)
	default boolean showHerbloreNotifications()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showAgilityNotifications",
		name = "Agility",
		description = "Should we show Agility notifications?",
		section = skillsConfig
	)
	default boolean showAgilityNotifications()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showThievingNotifications",
		name = "Thieving",
		description = "Should we show Thieving notifications?",
		section = skillsConfig
	)
	default boolean showThievingNotifications()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showSlayerNotifications",
		name = "Slayer",
		description = "Should we show Slayer notifications?",
		section = skillsConfig
	)
	default boolean showSlayerNotifications()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showFarmingNotifications",
		name = "Farming",
		description = "Should we show Farming notifications?",
		section = skillsConfig
	)
	default boolean showFarmingNotifications()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showRunecraftNotifications",
		name = "Runecraft",
		description = "Should we show Runecraft notifications?",
		section = skillsConfig
	)
	default boolean showRunecraftNotifications()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showHunterNotifications",
		name = "Hunter",
		description = "Should we show Hunter notifications?",
		section = skillsConfig
	)
	default boolean showHunterNotifications()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showConstructionNotifications",
		name = "Construction",
		description = "Should we show Construction notifications?",
		section = skillsConfig
	)
	default boolean showConstructionNotifications()
	{
		return true;
	}
}

package com.antimated.notifications;

public class Notification
{
	private final String title;
	private final String text;
	private final int color;

	// Constructor with color
	public Notification(String title, String text, int color)
	{
		this.title = title;
		this.text = text;
		this.color = color;
	}

	// Constructor without color
	public Notification(String title, String text)
	{
		this.title = title;
		this.text = text;
		this.color = -1; // Default or sentinel value for no color
	}

	public String getTitle()
	{
		return title;
	}

	public String getText()
	{
		return text;
	}

	public int getColor()
	{
		return color;
	}
}

package com.antimated.notifications;

import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.WidgetNode;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetModalMode;
import net.runelite.api.widgets.WidgetUtil;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;

@Slf4j
@Singleton
public class NotificationManager
{
	private static final int SCRIPT_ID = 3343; // NOTIFICATION_DISPLAY_INIT

	private static final int COMPONENT_ID = WidgetUtil.packComponentId(303, 2); // (interfaceId << 16) | childId

	private static final int INTERFACE_ID = 660;

	private final Queue<Notification> notifications = new ConcurrentLinkedQueue<>();

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private EventBus eventBus;

	@Subscribe
	public void onGameTick(GameTick event)
	{
		processNotification();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		// Clear notifications when not logged in
		switch (gameStateChanged.getGameState())
		{
			case HOPPING:
			case LOGGING_IN:
			case LOGIN_SCREEN:
			case LOGIN_SCREEN_AUTHENTICATOR:
			case CONNECTION_LOST:
				clearNotifications();
				break;
		}
	}

	public void startUp()
	{
		log.debug("NotificationManager startUp()");
		eventBus.register(this);
	}

	public void shutDown()
	{
		log.debug("NotificationManager shutDown()");
		clearNotifications();
		eventBus.unregister(this);
	}

	public void addNotification(String title, String text)
	{
		addNotification(title, text, -1);
	}

	public void addNotification(String title, String text, int color)
	{
		Notification notification = new Notification(title, text, color);
		notifications.offer(notification);
	}

	/**
	 * Processes a notification
	 */
	private void processNotification()
	{
		// Don't process when any type of notification is visible (collection log, league task, one of our own, ...)
		if (client.getWidget(INTERFACE_ID, 1) != null)
		{
			return;
		}
		// Only process notifications if the queue is not empty AND the queue is not processing any notifications.
		if (!notifications.isEmpty())
		{
			// Get and remove the first element in the notifications queue.
			Notification notification = notifications.poll();

			// Display notification
			displayNotification(notification);
		}
	}


	/**
	 * Clears the current list of notifications and makes sure the processing notifications state is set to false
	 */
	public void clearNotifications()
	{
		notifications.clear();
	}

	/**
	 * Display a notification and close it afterward.
	 *
	 * @param notification Notification
	 */
	private void displayNotification(Notification notification) throws IllegalStateException, IllegalArgumentException
	{
		WidgetNode notificationNode = client.openInterface(COMPONENT_ID, INTERFACE_ID, WidgetModalMode.MODAL_CLICKTHROUGH);
		Widget notificationWidget = client.getWidget(INTERFACE_ID, 1);

		// Runs a client script to set the initial title, text and color values of the notifications
		client.runScript(SCRIPT_ID, notification.getTitle(), notification.getText(), notification.getColor());

		// Only remove notification when widget is fully closed.
		clientThread.invokeLater(() -> {
			assert notificationWidget != null;

			if (notificationWidget.getWidth() > 0)
			{
				return false;
			}

			// Close the interface
			client.closeInterface(notificationNode, true);

			// Invoke done
			return true;
		});
	}
}

package com.antimated;

import com.antimated.notifications.NotificationManager;
import com.antimated.util.Util;
import com.google.common.collect.ImmutableSet;
import com.google.inject.Provides;
import java.util.EnumMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import javax.inject.Inject;
import javax.inject.Named;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Experience;
import net.runelite.api.GameState;
import net.runelite.api.Skill;
import net.runelite.api.events.CommandExecuted;
import net.runelite.api.events.StatChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.Text;

@Slf4j
@PluginDescriptor(
	name = "Milestone Levels",
	description = "Display milestone levels on a fancy league-like notification",
	tags = {"level", "skill", "notification", "notifier", "milestone"}
)
public class MilestoneLevelsPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private MilestoneLevelsConfig config;

	@Inject
	private EventBus eventBus;

	@Inject
	private NotificationManager notifications;

	@Inject
	@Named("developerMode")
	boolean developerMode;

	private final Map<Skill, Integer> previousXpMap = new EnumMap<>(Skill.class);

	private static final Set<Integer> LAST_MAN_STANDING_REGIONS = ImmutableSet.of(13658, 13659, 13660, 13914, 13915, 13916, 13918, 13919, 13920, 14174, 14175, 14176, 14430, 14431, 14432);

	@Provides
	MilestoneLevelsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(MilestoneLevelsConfig.class);
	}

	@Override
	protected void startUp()
	{
		clientThread.invoke(this::initializePreviousXpMap);
		notifications.startUp();
	}

	@Override
	protected void shutDown()
	{
		previousXpMap.clear();
		notifications.shutDown();
	}

	@Subscribe
	public void onStatChanged(StatChanged statChanged)
	{
		final Skill skill = statChanged.getSkill();

		final int currentXp = statChanged.getXp();
		final int currentLevel = Experience.getLevelForXp(currentXp);

		final int previousXp = previousXpMap.getOrDefault(skill, -1);
		final int previousLevel = previousXp == -1 ? -1 : Experience.getLevelForXp(previousXp);

		previousXpMap.put(skill, currentXp);

		// Previous level has to be set, and if we have leveled up
		if (previousLevel == -1 || previousLevel >= currentLevel)
		{
			return;
		}

		// Only standard worlds are allowed, and player shouldn't be in LMS
		if (Util.isStandardWorld(client) || Util.isPlayerWithinMapRegion(client, LAST_MAN_STANDING_REGIONS))
		{
			log.debug("Not on a standard world or in a LMS game.");
			return;
		}

		// Check for multi-leveling
		for (int level = previousLevel + 1; level <= currentLevel; level++)
		{
			if (shouldNotifyForRealLevel(level) && shouldNotifyForSkill(skill))
			{
				notify(skill, level);
				continue;
			}

			// Valid virtual levels with the showVirtualLevels setting should always display
			// regardless of the level list or enabled skills.
			if (shouldNotifyForVirtualLevel(level))
			{
				notify(skill, level);
			}
		}
	}

	/**
	 * Gets list of valid real levels from config
	 *
	 * @return List<Integer>
	 */
	private List<Integer> getLevelList()
	{
		return Text.fromCSV(config.showOnLevels()).stream()
			.distinct()
			.filter(Util::isInteger)
			.map(Integer::parseInt)
			.filter(Util::isValidRealLevel)
			.collect(Collectors.toList());
	}

	/**
	 * Populate initial xp per skill.
	 */
	private void initializePreviousXpMap()
	{
		if (client.getGameState() != GameState.LOGGED_IN)
		{
			previousXpMap.clear();
		}
		else
		{
			for (final Skill skill : Skill.values())
			{
				previousXpMap.put(skill, client.getSkillExperience(skill));
			}
		}
	}

	/**
	 * Adds a level-up notification to the queue if certain requirements are met.
	 *
	 * @param skill Skill
	 * @param level int
	 */
	private void notify(Skill skill, int level)
	{
		String title = Util.replaceSkillAndLevel(config.notificationTitle(), skill, level);
		String text = Util.replaceSkillAndLevel(config.notificationText(), skill, level);
		int color = Util.getIntValue(config.notificationColor());

		log.debug("Notify level up for {} to level {}", skill.getName(), level);
		notifications.addNotification(title, text, color);
	}

	/**
	 * Check if we should notify for the given potential real level
	 * @param level int
	 * @return boolean
	 */
	private boolean shouldNotifyForRealLevel(int level)
	{
		return Util.isValidRealLevel(level) && (getLevelList().contains(level) || getLevelList().isEmpty());
	}

	/**
	 * Check if we should notify for the given potential virtual level
	 * @param level int
	 * @return boolean
	 */
	private boolean shouldNotifyForVirtualLevel(int level)
	{
		return Util.isValidVirtualLevel(level) && config.showVirtualLevels();
	}

	/**
	 * Check if we should notify for the given skill based off of our config settings.
	 * @param skill Skill
	 * @return boolean
	 */
	private boolean shouldNotifyForSkill(Skill skill)
	{
		switch (skill)
		{
			case ATTACK:
				return config.showAttackNotifications();
			case DEFENCE:
				return config.showDefenceNotifications();
			case STRENGTH:
				return config.showStrengthNotifications();
			case HITPOINTS:
				return config.showHitpointsNotifications();
			case RANGED:
				return config.showRangedNotifications();
			case PRAYER:
				return config.showPrayerNotifications();
			case MAGIC:
				return config.showMagicNotifications();
			case COOKING:
				return config.showCookingNotifications();
			case WOODCUTTING:
				return config.showWoodcuttingNotifications();
			case FLETCHING:
				return config.showFletchingNotifications();
			case FISHING:
				return config.showFishingNotifications();
			case FIREMAKING:
				return config.showFiremakingNotifications();
			case CRAFTING:
				return config.showCraftingNotifications();
			case SMITHING:
				return config.showSmithingNotifications();
			case MINING:
				return config.showMiningNotifications();
			case HERBLORE:
				return config.showHerbloreNotifications();
			case AGILITY:
				return config.showAgilityNotifications();
			case THIEVING:
				return config.showThievingNotifications();
			case SLAYER:
				return config.showSlayerNotifications();
			case FARMING:
				return config.showFarmingNotifications();
			case RUNECRAFT:
				return config.showRunecraftNotifications();
			case HUNTER:
				return config.showHunterNotifications();
			case CONSTRUCTION:
				return config.showConstructionNotifications();
		}

		return true;
	}

	@Subscribe
	public void onCommandExecuted(CommandExecuted commandExecuted)
	{
		if (developerMode)
		{
			String[] args = commandExecuted.getArguments();
			switch (commandExecuted.getCommand())
			{
				case "clear":
					notifications.clearNotifications();
					break;
			}
		}
	}
}

