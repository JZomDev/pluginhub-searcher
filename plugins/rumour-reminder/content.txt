package com.drjam.rumourreminder;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class RumourReminderPluginTest {
	public static void main(String[] args) throws Exception {
		ExternalPluginManager.loadBuiltin(RumourReminderPlugin.class);
		RuneLite.main(args);
	}
}
package com.drjam.rumourreminder;

import com.google.inject.Provides;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.InventoryID;
import net.runelite.api.NPC;
import net.runelite.api.Skill;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.events.StatChanged;
import net.runelite.api.events.WorldChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.RuneScapeProfileChanged;
import net.runelite.client.game.npcoverlay.HighlightedNpc;
import net.runelite.client.game.npcoverlay.NpcOverlayService;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.api.coords.WorldPoint;

import java.util.List;
import java.util.regex.Pattern;

import javax.inject.Inject;

@Slf4j
@PluginDescriptor(name = "Rumour Reminder", description = "Reminds you of the rumours you've heard in the Hunter's Guild", tags = {
		"hunter", "rumour", "hunter's", "guild", "reminder", "contract", "varlamore", "task" })
public class RumourReminderPlugin extends Plugin {
	@Inject
	private Client client;

	@Inject
	private RumoursManager rumoursManager;

	@Inject
	private NpcOverlayService npcOverlayService;

	@Inject
	private RumourReminderOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private RumourReminderConfig config;

	private static final int HUNTER_GUILD_GROUND_FLOOR_REGION_ID = 6191;
	private static final int HUNTER_GUILD_BASEMENT_REGION_ID = 6291;

	private WorldPoint currentLocation = null;
	private boolean xpInitialised = false;

	private String whistleChargesPrefix = "Your quetzal whistle has";
	private Pattern whistleChargesPattern = Pattern.compile("Your quetzal whistle has (\\d+) charges remaining.");
	private Pattern whistleRechargePattern = Pattern
			.compile("(?:There you go\\. Some whistle charges|Looks like the birds are all full for now\\.)");

	public boolean hasEnoughWhistleCharges = true;

	@Provides
	RumourReminderConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(RumourReminderConfig.class);
	}

	@Override
	protected void startUp() throws Exception {
		npcOverlayService.registerHighlighter(this::highlighter);
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception {
		rumoursManager.removeInfoBox();
		npcOverlayService.unregisterHighlighter(this::highlighter);
		overlayManager.remove(overlay);
		xpInitialised = false;
	}

	@Subscribe
	public void onRuneScapeProfileChanged(RuneScapeProfileChanged e) {
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged) {
		if (!configChanged.getGroup().equals(RumourReminderConfig.CONFIG_GROUP)) {
			return;
		}
		npcOverlayService.rebuild();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event) {
		if (event.getGameState() == GameState.LOGGED_IN) {
		} else if (event.getGameState() == GameState.LOGIN_SCREEN) {
			rumoursManager.removeInfoBox();
			currentLocation = null;
			xpInitialised = false;
		}
	}

	@Subscribe
	public void onWorldChanged(WorldChanged event) {
		xpInitialised = false;
	}

	@Subscribe
	void onChatMessage(ChatMessage event) {
		handleWhistleMessage(event);
		handleHunterDialog(event);
		handleWhistleCharges(event);
		handleWhistleRecharge(event);
	}

	private void handleWhistleMessage(ChatMessage message) {
		if (message.getType() != ChatMessageType.GAMEMESSAGE) {
			return;
		}
		rumoursManager.updateFromWhistle(message);
		npcOverlayService.rebuild();
	}

	private void handleHunterDialog(ChatMessage message) {
		if (message.getType() != ChatMessageType.DIALOG) {
			return;
		}

		var location = client.getLocalPlayer().getWorldLocation();
		if (location.getRegionID() != HUNTER_GUILD_BASEMENT_REGION_ID) {
			return;
		}

		rumoursManager.updateFromDialog(message);
		npcOverlayService.rebuild();
	}

	private void handleWhistleCharges(ChatMessage message) {
		if (message.getType() != ChatMessageType.GAMEMESSAGE) {
			return;
		}

		if (!message.getMessage().startsWith(whistleChargesPrefix)) {
			return;
		}

		var chargeMatcher = whistleChargesPattern.matcher(message.getMessage());

		if (!chargeMatcher.find()) {
			return;
		}
		var charges = Integer.parseInt(chargeMatcher.group(1));
		this.hasEnoughWhistleCharges = charges > config.whistleWarningCharges();
	}

	private void handleWhistleRecharge(ChatMessage message) {
		if (message.getType() != ChatMessageType.DIALOG) {
			return;
		}
		
		var rechargeMatcher = whistleRechargePattern.matcher(message.getMessage());
		if (!rechargeMatcher.find()) {
			return;
		}

		this.hasEnoughWhistleCharges = true;
	}

	@Subscribe
	void onGameTick(GameTick event) {
		if (client.getGameState() != GameState.LOGGED_IN) {
			currentLocation = null;
			return;
		}

		var previousLocation = currentLocation;
		currentLocation = client.getLocalPlayer().getWorldLocation();
		var currentRegionId = currentLocation.getRegionID();

		var loggingInToGuild = currentLocation != null &&
				previousLocation == null &&
				(currentRegionId == HUNTER_GUILD_BASEMENT_REGION_ID
						|| currentRegionId == HUNTER_GUILD_GROUND_FLOOR_REGION_ID);
		var enteringGuild = currentLocation != null &&
				previousLocation != null &&
				currentRegionId != previousLocation.getRegionID() &&
				(currentRegionId == HUNTER_GUILD_BASEMENT_REGION_ID
						|| currentRegionId == HUNTER_GUILD_GROUND_FLOOR_REGION_ID);

		if (loggingInToGuild || enteringGuild) {
			rumoursManager.updateFromSavedInfo();
			npcOverlayService.rebuild();
		}

	}

	@Subscribe
	void onStatChanged(StatChanged event) {
		if (event.getSkill() == Skill.HUNTER) {
			if (!xpInitialised) {
				xpInitialised = true;
				return;
			}
			rumoursManager.updateFromSavedInfo();
			npcOverlayService.rebuild();
		}
	}

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event) {
		if (!rumoursManager.isInfoBoxVisible()) {
			return;
		}
		if (event.getContainerId() == InventoryID.INVENTORY.getId()) {
			rumoursManager.updateFromSavedInfo();
			npcOverlayService.rebuild();
		}
	}

	private HighlightedNpc highlighter(NPC npc) {
		Integer npcId = npc.getId();
		Integer highlightId = rumoursManager.getHighlightNpcId();

		if (highlightId == null) {
			return null;
		}

		if (config.highlightTurnInhunter() && npcId.equals(highlightId)) {
			return HighlightedNpc
					.builder()
					.npc(npc)
					.highlightColor(config.turnInColor())
					.fillColor(config.turnInFillColor())
					.hull(config.turnInHull())
					.tile(config.turnInTile())
					.outline(config.turnInOutline())
					.borderWidth((float) config.turnInBorderWidth())
					.outlineFeather(config.turnInOutlineFeather())
					.build();
		}

		return null;
	}
}

package com.drjam.rumourreminder;

import java.awt.Color;
import java.awt.image.BufferedImage;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.ui.overlay.infobox.InfoBox;
import net.runelite.client.util.ColorUtil;

class RumourInfoBox extends InfoBox {
    private String rumourGilman = null;
    private String rumourAco = null;
    private String rumourCervus = null;
    private String rumourOrnus = null;
    private String rumourTeco = null;
    private String rumourWolf = null;
    private String activeRumour = null;
    private boolean isRumourCompleted = false;

    RumourInfoBox(
            BufferedImage image,
            Plugin plugin,
            String activeRumour,
            String rumourGilman,
            String rumourAco,
            String rumourCervus,
            String rumourOrnus,
            String rumourTeco,
            String rumourWolf,
            boolean isRumourCompleted) {
        super(image, plugin);
        this.activeRumour = activeRumour != null ? activeRumour.toLowerCase() : null;
        this.rumourGilman = rumourGilman != null ? rumourGilman.toLowerCase() : null;
        this.rumourAco = rumourAco != null ? rumourAco.toLowerCase() : null;
        this.rumourCervus = rumourCervus != null ? rumourCervus.toLowerCase() : null;
        this.rumourOrnus = rumourOrnus != null ? rumourOrnus.toLowerCase() : null;
        this.rumourTeco = rumourTeco != null ? rumourTeco.toLowerCase() : null;
        this.rumourWolf = rumourWolf != null ? rumourWolf.toLowerCase() : null;
        this.isRumourCompleted = isRumourCompleted;
    }

    @Override
    public String getText() {
        if (this.isRumourCompleted) {
            return "Done";
        }
        return null;
    }

    @Override
    public Color getTextColor() {
        if (this.isRumourCompleted) {
            return Color.GREEN;
        }
        return null;
    }

    @Override
    public String getTooltip() {
        StringBuilder sb = new StringBuilder();

        HunterCreature activeCreature = null;
        if (activeRumour != null) {
            activeCreature = HunterCreature.getHunterCreatureFromCreatureName(activeRumour.toLowerCase());
        }

        sb.append(ColorUtil.wrapWithColorTag("Hunter Rumours:", Color.WHITE));
        if (activeCreature != null) {
            sb.append("</br>");
            sb.append(ColorUtil.wrapWithColorTag(activeCreature.name, Color.GREEN));

            String hunterString = "";
            if (activeRumour.equals(rumourGilman)) {
                hunterString = " - Gilman (Novice)";
            } else if (activeRumour.equals(rumourAco)) {
                hunterString = " - Aco (Expert)";
            } else if (activeRumour.equals(rumourCervus)) {
                hunterString = " - Cervus (Adept)";
            } else if (activeRumour.equals(rumourOrnus)) {
                hunterString = " - Ornus (Adept)";
            } else if (activeRumour.equals(rumourTeco)) {
                hunterString = " - Teco (Expert)";
            } else if (activeRumour.equals(rumourWolf)) {
                hunterString = " - Wolf (Master)";
            } else {
                hunterString = " - Unknown";
            }

            sb.append(ColorUtil.wrapWithColorTag(hunterString, Color.GREEN));

            sb.append("</br> Tools: " + activeCreature.hunterItems);
            sb.append("</br> Locations: " + activeCreature.locations);
            sb.append("</br>");
        }
        if (rumourWolf != null && !rumourWolf.equals(activeRumour)) {
            addOtherHunter(sb, rumourWolf, " - Wolf (Master)");
        }
        if (rumourTeco != null && !rumourTeco.equals(activeRumour)) {
            addOtherHunter(sb, rumourTeco, " - Teco (Expert)");
        }
        if (rumourAco != null && !rumourAco.equals(activeRumour)) {
            addOtherHunter(sb, rumourAco, " - Aco (Expert)");
        }
        if (rumourOrnus != null && !rumourOrnus.equals(activeRumour)) {
            addOtherHunter(sb, rumourOrnus, " - Ornus (Adept)");
        }
        if (rumourCervus != null && !rumourCervus.equals(activeRumour)) {
            addOtherHunter(sb, rumourCervus, " - Cervus (Adept)");
        }
        if (rumourGilman != null && !rumourGilman.equals(activeRumour)) {
            addOtherHunter(sb, rumourGilman, " - Gilman (Novice)");
        }
        return sb.toString();
    }

    private void addOtherHunter(StringBuilder sb, String rumour, String hunterDisplayText) {
        HunterCreature creature = HunterCreature.getHunterCreatureFromCreatureName(rumour.toLowerCase());
        if (creature == null) {
            return;
        }
        String creatureName = creature.name;
        String combinedString = "</br>" + creatureName + hunterDisplayText;
        sb.append(ColorUtil.wrapWithColorTag(combinedString, Color.ORANGE));
    }
}
package com.drjam.rumourreminder;

import net.runelite.api.ItemID;

import java.util.*;

public enum HunterCreature {

    TROPICAL_WAGTAIL("Tropical wagtail",
            "Bird snare",
            "Feldip Hunter Area (AKS)",
            0, ItemID.TAILFEATHERS),
    WILD_KEBBIT("Wild kebbit",
            "Deadfall (knife, logs/axe)",
            "Piscatoris Hunter Area (AKQ)",
            0, ItemID.KEBBITY_TUFT),
    SAPPHIRE_GLACIALIS("Sapphire glacialis",
            "Butterfly net",
            "Farming Guild (CIR), Rellekka Hunter Area (DKS)",
            0, ItemID.BLUE_BUTTERFLY_WING),
    SWAMP_LIZARD("Swamp lizard",
            "Net trap (small net, rope)",
            "Canifis Hunter Area (ALQ), Slepe",
            0, ItemID.SWAMP_LIZARD_CLAW),
    SPINED_LARUPIA("Spined larupia",
            "Spiked pit (teasing stick, knife, logs/axe)",
            "Feldip Hunter Area (AKS)",
            5, ItemID.LARUPIA_EAR),
    BARB_TAILED_KEBBIT("Barb-tailed kebbit",
            "Deadfall (knife, logs/axe)",
            "Feldip Hunter Area (AKS)",
            0, ItemID.KEBBITY_TUFT),
    SNOWY_KNIGHT("Snowy knight",
            "Butterfly net",
            "Farming Guild (CIR), Weiss, Rellekka Hunter Area (DKS)",
            0, ItemID.WHITE_BUTTERFLY_WING),
    PRICKLY_KEBBIT("Prickly kebbit",
            "Deadfall (knife, logs/axe)",
            "Piscatoris Hunter Area (AKQ)",
            0, ItemID.KEBBITY_TUFT),
    EMBERTAILED_JERBOA("Embertailed jerboa",
            "Box Trap",
            "Hunter Guild, Locus Oasis (AJP)",
            0, ItemID.LARGE_JERBOA_TAIL),
    HORNED_GRAAHK("Horned graahk",
            "Spiked pit (teasing stick, knife, logs/axe)",
            "Karamja Hunter Area (CKR)",
            7, ItemID.GRAAHK_HORN_SPUR),
    SPOTTED_KEBBIT("Spotted kebbit",
            "Falconry",
            "Piscatoris Falconry Area (AKQ)",
            0, ItemID.KEBBITY_TUFT),
    BLACK_WARLOCK("Black warlock",
            "Butterfly net",
            "Farming Guild (CIR), Feldip Hunter Area (AKS)",
            0, ItemID.BLACK_BUTTERFLY_WING),
    ORANGE_SALAMANDER("Orange salamander",
            "Net trap (small net, rope)",
            "Uzer Hunter Area, Necropolis Hunter Area (AKP)",
            0, ItemID.ORANGE_SALAMANDER_CLAW),
    RAZOR_BACKED_KEBBIT("Razor-backed kebbit",
            "Noose wand",
            "Piscatoris Hunter Area (AKQ)",
            0, ItemID.KEBBITY_TUFT),
    SABRE_TOOTHED_KEBBIT("Sabre-toothed kebbit",
            "Deadfall (knife, logs/axe)",
            "Rellekka Hunter Area (DKS)",
            0, ItemID.KEBBITY_TUFT),
    CARNIVOROUS_CHINCHOMPA("Red chinchompa",
            "Box trap",
            "Feldip Hunter Area (AKS), Gwenith Hunter Area",
            1, ItemID.RED_CHINCHOMPA_TUFT),
    CHINCHOMPA("Chinchompa",
            "Box trap",
            "Piscatoris Hunter Area (AKQ), Kourend Woodland, Isle of Souls (BJP)",
            1, ItemID.CHINCHOMPA_TUFT),
    SABRE_TOOTHED_KYATT("Sabre-toothed kyatt",
            "Spiked pit (teasing stick, knife, logs/axe)",
            "Rellekka Hunter Area (DKS)",
            7, ItemID.KYATT_TOOTH_CHIP),
    DARK_KEBBIT("Dark kebbit",
            "Falconry",
            "Piscatoris Falconry Area (AKQ)",
            0, ItemID.KEBBITY_TUFT),
    PYRE_FOX("Pyre fox",
            "Deadfall (knife, logs/axe)",
            "Avium Savannah (AJP)",
            0, ItemID.FOX_FLUFF),
    RED_SALAMANDER("Red salamander",
            "Net trap (small net, rope)",
            "Ourania Hunter Area",
            0, ItemID.RED_SALAMANDER_CLAW),
    SUNLIGHT_MOTH("Sunlight moth",
            "Butterfly net",
            "Avium Savannah (AJP), Neypotzli",
            0, ItemID.SUNLIGHT_MOTH_WING),
    DASHING_KEBBIT("Dashing kebbit",
            "Falconry",
            "Piscatoris Falconry Area (AKQ)",
            0, ItemID.KEBBITY_TUFT),
    SUNLIGHT_ANTELOPE("Sunlight antelope",
            "Spiked pit (teasing stick, knife, logs/axe)",
            "Avium Savannah (AJP)",
            5, ItemID.ANTELOPE_HOOF_SHARD),
    MOONLIGHT_MOTH("Moonlight moth",
            "Butterfly net",
            "Neypotzli, Hunter Guild",
            0, ItemID.MOONLIGHT_MOTH_WING),
    TECU_SALAMANDER("Tecu salamander",
            "Net trap (small net, rope)",
            "Cam Torum Entrance",
            0, ItemID.SALAMANDER_CLAW),
    HERBIBOAR("Herbiboar",
            "Tracking",
            "Fossil Island",
            0, ItemID.HERBY_TUFT),
    MOONLIGHT_ANTELOPE("Moonlight antelope",
            "Spiked pit (teasing stick, knife, logs/axe)",
            "Hunter Guild",
            0, ItemID.ANTELOPE_HOOF_SHARD_29241),;

    private static final Map<String, HunterCreature> creatureNameToHunterCreature = new HashMap<>();

    static {
        Arrays.stream(values()).forEach(hunterCreature -> {
            creatureNameToHunterCreature.put(hunterCreature.name.toLowerCase(), hunterCreature);
        });
    }

    public static HunterCreature getHunterCreatureFromCreatureName(String creatureName) {
        return creatureNameToHunterCreature.get(creatureName.toLowerCase());
    }

    String name;
    String hunterItems;
    String locations;
    Integer maxHit;
    Integer targetItemID;

    HunterCreature(String name, String hunterItems, String locations, Integer maxHit, Integer targetItemID) {
        this.name = name;
        this.hunterItems = hunterItems;
        this.locations = locations;
        this.maxHit = maxHit;
        this.targetItemID = targetItemID;
    }
}

package com.drjam.rumourreminder;

import lombok.Getter;
import net.runelite.api.ItemID;
import net.runelite.api.NpcID;
import net.runelite.api.events.ChatMessage;

import java.util.regex.Pattern;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import javax.annotation.Nullable;
import javax.inject.Inject;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;

@Slf4j
public class RumoursManager {
    private static final String WOLF = "Wolf";
    private static final String ACO = "Aco";
    private static final String TECO = "Teco";
    private static final String CERVUS = "Cervus";
    private static final String ORNUS = "Ornus";
    private static final String GILMAN = "Gilman";
    private static final List<String> HUNTER_NAMES = Arrays.asList(WOLF, ACO, TECO, ORNUS, CERVUS, GILMAN);

    private static final Pattern WHISTLE_ACTIVE_PATTERN = Pattern
            .compile("(?:Your current rumour target is (?:a|an)) ([a-zA-Z -]+)(?:\\. You'll)([a-zA-Z ]+)");
    private static final Pattern WHISTLE_NO_ACTIVE_PATTERN = Pattern
            .compile("You do not have an active rumour right now.");

    private static final Pattern RUMOUR_COMPLETION_PATTERN = Pattern.compile(
            "(?:Another one done|Thanks for that)");

    private static final String CONFIG_KEY_ACTIVE_RUMOUR = "activeRumour";
    private static final String CONFIG_KEY_GILMAN_RUMOUR = "rumourGilman";
    private static final String CONFIG_KEY_ACO_RUMOUR = "rumourAco";
    private static final String CONFIG_KEY_CERVUS_RUMOUR = "rumourCervus";
    private static final String CONFIG_KEY_ORNUS_RUMOUR = "rumourOrnus";
    private static final String CONFIG_KEY_TECO_RUMOUR = "rumourTeco";
    private static final String CONFIG_KEY_WOLF_RUMOUR = "rumourWolf";
    private static final String CONFIG_KEY_TEMP_BG_RUMOUR = "tempBgRumour";
    private static final String CONFIG_KEY_TEMP_HUNTER = "tempHunter";
    private static final String CONFIG_KEY_ACTIVE_IS_TEMP = "activeIsTemp";

    @Inject
    private Client client;

    @Inject
    private ItemManager itemManager;

    @Inject
    private RumourReminderPlugin plugin;

    @Inject
    RumourReminderConfig config;

    @Inject
    private InfoBoxManager infoBoxManager;

    @Inject
    ConfigManager configManager;

    private String rumourGilman = null;
    private String rumourAco = null;
    private String rumourCervus = null;
    private String rumourOrnus = null;
    private String rumourTeco = null;
    private String rumourWolf = null;
    private String activeRumour = null;
    private Boolean activeIsTemp = null;
    private String tempBgRumour = null;
    private String tempHunter = null;

    public boolean isRumourCompleted = false;

    @Getter
    @Setter
    private RumourInfoBox infoBox;

    public boolean isInfoBoxVisible() {
        return infoBox != null;
    }

    public Integer getHighlightNpcId() {
        if (!isRumourCompleted) {
            return null;
        }
        if (activeRumour == null) {
            return null;
        }
        if (!isInfoBoxVisible()) {
            return null;
        }

        if (rumourGilman != null && activeRumour.toLowerCase().equals(rumourGilman.toLowerCase())) {
            return NpcID.HUNTMASTER_GILMAN_NOVICE;
        } else if (rumourAco != null && activeRumour.toLowerCase().equals(rumourAco.toLowerCase())) {
            return NpcID.GUILD_HUNTER_ACO_EXPERT;
        } else if (rumourCervus != null && activeRumour.toLowerCase().equals(rumourCervus.toLowerCase())) {
            return NpcID.GUILD_HUNTER_CERVUS_ADEPT;
        } else if (rumourOrnus != null && activeRumour.toLowerCase().equals(rumourOrnus.toLowerCase())) {
            return NpcID.GUILD_HUNTER_ORNUS_ADEPT;
        } else if (rumourTeco != null && activeRumour.toLowerCase().equals(rumourTeco.toLowerCase())) {
            return NpcID.GUILD_HUNTER_TECO_EXPERT;
        } else if (rumourWolf != null && activeRumour.toLowerCase().equals(rumourWolf.toLowerCase())) {
            return NpcID.GUILD_HUNTER_WOLF_MASTER;
        }

        return null;
    }

    private void rumourCompleted(String hunter) {
        this.activeRumour = null;
        if (hunter.contains(GILMAN)) {
            this.rumourGilman = null;
        }
        if (hunter.contains(CERVUS)) {
            this.rumourCervus = null;
        }
        if (hunter.contains(ORNUS)) {
            this.rumourOrnus = null;
        }
        if (hunter.contains(ACO)) {
            this.rumourAco = null;
        }
        if (hunter.contains(TECO)) {
            this.rumourTeco = null;
        }
        if (hunter.contains(WOLF)) {
            this.rumourWolf = null;
        }
    }

    private void rumourAssigned(String target, String hunter) {

        this.activeRumour = target;
        rumourConfirmed(target, hunter, true);
    }

    private String getRumour(String hunter) {
        if (hunter.contains(GILMAN)) {
            return rumourGilman;
        }
        if (hunter.contains(CERVUS)) {
            return rumourCervus;
        }
        if (hunter.contains(ORNUS)) {
            return rumourOrnus;
        }
        if (hunter.contains(ACO)) {
            return rumourAco;
        }
        if (hunter.contains(TECO)) {
            return rumourTeco;
        }
        if (hunter.contains(WOLF)) {
            return rumourWolf;
        }
        return null;
    }

    private void resetRumours() {
        this.rumourGilman = null;
        this.rumourAco = null;
        this.rumourCervus = null;
        this.rumourOrnus = null;
        this.rumourTeco = null;
        this.rumourWolf = null;
        this.clearTemp();
    }

    private void rumourConfirmed(String target, String hunter, boolean isActive) {
        if (isActive) {
            this.activeRumour = target;
        }
        if (hunter.contains(GILMAN)) {
            this.rumourGilman = target;
        }
        if (hunter.contains(CERVUS)) {
            this.rumourCervus = target;
        }
        if (hunter.contains(ORNUS)) {
            this.rumourOrnus = target;
        }
        if (hunter.contains(ACO)) {
            this.rumourAco = target;
        }
        if (hunter.contains(TECO)) {
            this.rumourTeco = target;
        }
        if (hunter.contains(WOLF)) {
            this.rumourWolf = target;
        }
    }

    public void removeInfoBox() {
        if (infoBox != null) {
            infoBoxManager.removeInfoBox(infoBox);
            infoBox = null;
        }
    }

    private void updateInfoBox() {
        removeInfoBox();

        if (activeRumour == null && rumourGilman == null && rumourAco == null && rumourCervus == null
                && rumourOrnus == null && rumourTeco == null && rumourWolf == null) {
            return;
        }

        if (activeRumour != null) {
            HunterCreature rumourCreature = HunterCreature
                    .getHunterCreatureFromCreatureName(activeRumour.toLowerCase());
            if (rumourCreature == null) {
                return;
            }
            infoBox = new RumourInfoBox(itemManager.getImage(rumourCreature.targetItemID), plugin, activeRumour,
                    rumourGilman, rumourAco, rumourCervus, rumourOrnus, rumourTeco, rumourWolf, isRumourCompleted);

        } else {
            infoBox = new RumourInfoBox(itemManager.getImage(ItemID.GUILD_HUNTER_HEADWEAR), plugin, activeRumour,
                    rumourGilman,
                    rumourAco, rumourCervus, rumourOrnus, rumourTeco, rumourWolf, isRumourCompleted);

        }
        infoBoxManager.addInfoBox(infoBox);
    }

    public void updateFromSavedInfo() {
        loadAllRumours();
        updateRumourCompleted();
        updateInfoBox();
    }

    public void updateRumourCompleted() {
        var inventory = this.client.getItemContainer(InventoryID.INVENTORY);
        if (inventory == null) {
            isRumourCompleted = false;
            return;
        }
        var items = inventory.getItems();
        if (items == null || activeRumour == null) {
            isRumourCompleted = false;
            return;
        }

        var activeContractHunterCreature = HunterCreature.getHunterCreatureFromCreatureName(activeRumour);
        for (var item : items) {
            if (item.getId() == activeContractHunterCreature.targetItemID) {
                isRumourCompleted = true;
                return;
            }
        }
        isRumourCompleted = false;
    }

    public void updateFromWhistle(ChatMessage message) {
        Matcher activeMacher = WHISTLE_ACTIVE_PATTERN.matcher(message.getMessage());
        Matcher noActiveMacher = WHISTLE_NO_ACTIVE_PATTERN.matcher(message.getMessage());

        if (!activeMacher.find() && !noActiveMacher.find()) {
            return;
        }

        loadAllRumours();
        if (noActiveMacher.find()) {
            this.activeRumour = null;
        } else {
            this.activeRumour = activeMacher.group(1);
        }
        saveAllStoredRumours();
        updateRumourCompleted();
        updateInfoBox();
    }

    public void updateFromDialog(ChatMessage message) {
        String hunterTalking = null;
        String hunterReferenced = null;
        String creature = null;

        var messageParts = message.getMessage().split("\\|");
        var prefix = messageParts[0];
        var contents = messageParts[1];

        for (String hunterName : HUNTER_NAMES) {
            if (prefix.contains(hunterName)) {
                hunterTalking = hunterName;
                break;
            }
        }
        for (String hunterName : HUNTER_NAMES) {
            if (contents.contains(hunterName)) {
                hunterReferenced = hunterName;
                break;
            }
        }
        for (HunterCreature creatureType : HunterCreature.values()) {
            if (contents.toLowerCase().contains(creatureType.name.toLowerCase())) {
                creature = creatureType.name;
                break;
            }
        }

        if (hunterTalking == null) {
            return;
        }

        loadAllRumours();

        var isRumourCompletion = hunterTalking != null && RUMOUR_COMPLETION_PATTERN.matcher(contents).find();
        var isAssignmantOrGilman = hunterTalking != null && hunterReferenced == null && creature != null;
        var isGilmanRemembering = hunterTalking == GILMAN && contents.startsWith("I seem to remember");
        var isGilmanResetAssignment = hunterTalking == GILMAN && creature != null && !creature.equals(rumourGilman)
                && rumourGilman != null;
        var isRumourConfirmation = hunterTalking != null && hunterReferenced != null && creature != null;
        var isTempAssignment = activeRumour == null && getRumour(hunterTalking) != null;

        if (isRumourCompletion) {
            rumourCompleted(hunterTalking);
        } else if (isAssignmantOrGilman) {
            if (isGilmanRemembering) {
                rumourConfirmed(creature, hunterTalking, false);
            } else {// is Assignment
                if (this.activeRumour != null && this.activeIsTemp) {
                    // if moving off a temp, put it back & clear
                    this.reapplyBgRumour();
                }
                if (isTempAssignment) {
                    tempBeingAssigned(hunterTalking);
                } else if (isGilmanResetAssignment) {
                    resetRumours();
                }
                rumourAssigned(creature, hunterTalking);
            }
        } else if (isRumourConfirmation) {
            rumourConfirmed(creature, hunterReferenced, true);
        }

        saveAllStoredRumours();
        updateRumourCompleted();
        updateInfoBox();
    }

    private void reapplyBgRumour() {
        if (this.tempHunter.contains(GILMAN)) {
            this.rumourGilman = this.tempBgRumour;
        }
        if (this.tempHunter.contains(CERVUS)) {
            this.rumourCervus = this.tempBgRumour;
        }
        if (this.tempHunter.contains(ORNUS)) {
            this.rumourOrnus = this.tempBgRumour;
        }
        if (this.tempHunter.contains(ACO)) {
            this.rumourAco = this.tempBgRumour;
        }
        if (this.tempHunter.contains(TECO)) {
            this.rumourTeco = this.tempBgRumour;
        }
        if (this.tempHunter.contains(WOLF)) {
            this.rumourWolf = this.tempBgRumour;
        }
        this.clearTemp();
    }

    private void clearTemp() {
        this.tempBgRumour = null;
        this.tempHunter = null;
        this.activeIsTemp = false;
    }

    private void tempBeingAssigned(String hunterTalking) {
        this.tempBgRumour = getRumour(hunterTalking);
        this.tempHunter = hunterTalking;
        this.activeIsTemp = true;
    }

    private void setStoredRumour(@Nullable String rumour, String configKey) {
        if (rumour != null) {
            configManager.setRSProfileConfiguration(RumourReminderConfig.CONFIG_GROUP, configKey, rumour);
        } else {
            configManager.unsetRSProfileConfiguration(RumourReminderConfig.CONFIG_GROUP, configKey);
        }
    }

    public void saveAllStoredRumours() {
        setStoredRumour(activeRumour, CONFIG_KEY_ACTIVE_RUMOUR);
        setStoredRumour(rumourGilman, CONFIG_KEY_GILMAN_RUMOUR);
        setStoredRumour(rumourAco, CONFIG_KEY_ACO_RUMOUR);
        setStoredRumour(rumourTeco, CONFIG_KEY_TECO_RUMOUR);
        setStoredRumour(rumourCervus, CONFIG_KEY_CERVUS_RUMOUR);
        setStoredRumour(rumourOrnus, CONFIG_KEY_ORNUS_RUMOUR);
        setStoredRumour(rumourWolf, CONFIG_KEY_WOLF_RUMOUR);
        setStoredRumour(tempBgRumour, CONFIG_KEY_TEMP_BG_RUMOUR);
        setStoredRumour(tempHunter, CONFIG_KEY_TEMP_HUNTER);
        setStoredRumour(activeIsTemp.toString(), CONFIG_KEY_ACTIVE_IS_TEMP);
    }

    @Nullable
    public String getStoredRumour(String configKey) {
        try {
            String result = configManager.getRSProfileConfiguration(RumourReminderConfig.CONFIG_GROUP, configKey);
            return result;
        } catch (NumberFormatException ignored) {
            return null;
        }
    }

    public void loadAllRumours() {
        activeRumour = getStoredRumour(CONFIG_KEY_ACTIVE_RUMOUR);
        rumourGilman = getStoredRumour(CONFIG_KEY_GILMAN_RUMOUR);
        rumourAco = getStoredRumour(CONFIG_KEY_ACO_RUMOUR);
        rumourCervus = getStoredRumour(CONFIG_KEY_CERVUS_RUMOUR);
        rumourOrnus = getStoredRumour(CONFIG_KEY_ORNUS_RUMOUR);
        rumourTeco = getStoredRumour(CONFIG_KEY_TECO_RUMOUR);
        rumourWolf = getStoredRumour(CONFIG_KEY_WOLF_RUMOUR);
        tempBgRumour = getStoredRumour(CONFIG_KEY_TEMP_BG_RUMOUR);
        tempHunter = getStoredRumour(CONFIG_KEY_TEMP_HUNTER);
        activeIsTemp = Boolean.parseBoolean(getStoredRumour(CONFIG_KEY_ACTIVE_IS_TEMP));
        updateInfoBox();
    }

}

package com.drjam.rumourreminder;

import java.awt.Color;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;

@ConfigGroup("RumourReminder")
public interface RumourReminderConfig extends Config {
	String CONFIG_GROUP = "RumourReminder";

	@ConfigItem(
			keyName = "highlightTurnIn",
			name = "Highlight Turn In",
			description = "Highlight the hunter you were given the rumour by",
			position = 0
	)
	default boolean highlightTurnInhunter() {
		return true;
	}

	@ConfigSection(
			name = "Turn In Style",
			description = "Style for the turn in hunter",
			position = 2,
			closedByDefault = true
	)
	String turnInSection = "turnInSection";

	@ConfigItem(
			position = 0,
			keyName = "turnInHull",
			name = "Highlight hull",
			description = "Configures whether or not hunter should be highlighted by hull",
			section = turnInSection
	)
	default boolean turnInHull()
	{
		return false;
	}

	@ConfigItem(
			position = 1,
			keyName = "turnInTile",
			name = "Highlight tile",
			description = "Configures whether or not hunter should be highlighted by tile",
			section = turnInSection
	)
	default boolean turnInTile()
	{
		return false;
	}

	@ConfigItem(
			position = 2,
			keyName = "turnInOutline",
			name = "Highlight outline",
			description = "Configures whether or not the model of the hunter should be highlighted by outline",
			section = turnInSection
	)
	default boolean turnInOutline()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
			position = 3,
			keyName = "turnInColor",
			name = "Highlight Color",
			description = "Color of the hunter highlight border, menu, and text",
			section = turnInSection
	)
	default Color turnInColor()
	{
		return Color.GREEN;
	}

	@Alpha
	@ConfigItem(
			position = 4,
			keyName = "turnInFillColor",
			name = "Fill Color",
			description = "Color of the hunter highlight fill",
			section = turnInSection
	)
	default Color turnInFillColor()
	{
		return new Color(0, 255, 0, 20);
	}

	@ConfigItem(
			position = 5,
			keyName = "turnInBorderWidth",
			name = "Border Width",
			description = "Width of the highlighted hunter border",
			section = turnInSection
	)
	default double turnInBorderWidth()
	{
		return 2;
	}

	@ConfigItem(
			position = 6,
			keyName = "turnInOutlineFeather",
			name = "Outline feather",
			description = "Specify between 0-4 how much of the model outline should be faded",
			section = turnInSection
	)
	@Range(
			min = 0,
			max = 4
	)
	default int turnInOutlineFeather()
	{
		return 0;
	}

	@ConfigSection(
			name = "Whistle Warning",
			description = "Warning for when you have no charges left on your Quetzal Whistle",
			position = 3,
			closedByDefault = false
	)
	String whistleWarningSection = "whistleWarningSection";
	
	@ConfigItem(
		keyName = "whistleWarning",
		name = "Enable Whistle Warning",
		description = "Warns you when you have no charges left on your Quetzal Whistle",
		position = 0,
		section = whistleWarningSection
	)
	default boolean whistleWarning() {
		return true;
	}

	@ConfigItem(
		keyName = "whistleWarningCharges",
		name = "Whistle Charges",
		description = "The number of charges left on your Quetzal Whistle when the warning will be displayed",
		position = 1,
		section = whistleWarningSection
	)
	default int whistleWarningCharges() {
		return 0;
	}

	@Alpha
    @ConfigItem(
            keyName = "whistleWarningTextColor",
            name = "Text color",
            description = "Configures the color of the whistle warning text",
            position = 2,
			section = whistleWarningSection
    )
    default Color whistleWarningTextColor() {
        return Color.RED;
    }

    @Range(
            max = 100
    )
    @ConfigItem(
            keyName = "whistleWarningTextSize",
            name = "Text size",
            description = "Configures the size of the whistle warning text",
            position = 3,
			section = whistleWarningSection
    )
    default int whistleWarningTextSize() {
        return 16;
    }

}

package com.drjam.rumourreminder;

import java.awt.*;
import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;

import net.runelite.api.*;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

class RumourReminderOverlay extends OverlayPanel {

    private final Client client;
    private final RumourReminderConfig config;
    private final RumourReminderPlugin plugin;

    @Inject
    private RumourReminderOverlay(Client client, RumourReminderConfig config, RumourReminderPlugin plugin) {
        super(plugin);
        this.plugin = plugin;
        this.client = client;
        this.config = config;

        setPosition(OverlayPosition.TOP_CENTER);
        setPriority(0.5f);
    }

    @Override
    public Dimension render(Graphics2D graphics) {

        if (!this.config.whistleWarning() || this.plugin.hasEnoughWhistleCharges) {
            return super.render(graphics);
        }

        if (!this.plugin.hasEnoughWhistleCharges) {

            final String text = "Recharge Quetzal Whistle!";
            final Color color = config.whistleWarningTextColor();
            final float size = (float) config.whistleWarningTextSize();
            final Font font = graphics.getFont().deriveFont(size);

            panelComponent.getChildren().add(LineComponent.builder()
                    .left(text)
                    .leftFont(font)
                    .leftColor(color)
                    .build());
        }
        return super.render(graphics);
    }
}
