package com.interactable;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class InteractablePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(InteractablePlugin.class);
		RuneLite.main(args);
	}
}
package com.interactable;

import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.TileObject;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.outline.ModelOutlineRenderer;

class InteractableOverlay extends Overlay
{
	private final Client client;
	private final InteractablePlugin plugin;
	private final InteractableConfig config;
	private final ModelOutlineRenderer modelOutlineRenderer;

	@Inject
	private InteractableOverlay(Client client, InteractablePlugin plugin, InteractableConfig config, ModelOutlineRenderer modelOutlineRenderer)
	{
		this.client = client;
		this.plugin = plugin;
		this.config = config;
		this.modelOutlineRenderer = modelOutlineRenderer;
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_SCENE);
		setPriority(OverlayPriority.HIGH);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (plugin.isShown())
		{
			renderObjects();
		}

		return null;

	}

	private void renderObjects()
	{
		plugin.generateObjectLists();

		if (config.showObject())
		{
			for (TileObject object : plugin.getObjects())
			{
				if (object != null)
				{
					modelOutlineRenderer.drawOutline(object, config.borderWidth(), plugin.getCurrentObjectColor(), config.outlineFeather());
				}
			}
		}

		if (config.showAttackNpc())
		{
			for (NPC npc : plugin.getAttackNpcs())
			{
				if (npc != null)
				{
					modelOutlineRenderer.drawOutline(npc, config.borderWidth(), plugin.getCurrentNpcAttackColor(), config.outlineFeather());
				}
			}
		}

		if (config.showInteractableNpc())
		{
			for (NPC npc : plugin.getInteractNpcs())
			{
				if (npc != null)
				{
					modelOutlineRenderer.drawOutline(npc, config.borderWidth(), plugin.getCurrentNpcInteractColor(), config.outlineFeather());
				}
			}
		}


	}
}
package com.interactable;

import com.google.common.base.Strings;
import com.google.inject.Provides;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.inject.Inject;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Constants;
import net.runelite.api.GameObject;
import net.runelite.api.GroundObject;
import net.runelite.api.NPC;
import net.runelite.api.NPCComposition;
import net.runelite.api.ObjectComposition;
import net.runelite.api.Player;
import net.runelite.api.Scene;
import net.runelite.api.Tile;
import net.runelite.api.TileObject;
import net.runelite.api.WallObject;
import net.runelite.api.events.ClientTick;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.HotkeyListener;

@Slf4j
@PluginDescriptor(
	name = "Interactable Hints"
)
public class InteractablePlugin extends Plugin
{
	private int MAX_DISTANCE = 2350;
	private int remainingClientTicks = -1;

	@Getter(AccessLevel.PACKAGE)
	private boolean shown = false;
	@Getter(AccessLevel.PACKAGE)
	private Color currentObjectColor;
	@Getter(AccessLevel.PACKAGE)
	private Color currentNpcAttackColor;
	@Getter(AccessLevel.PACKAGE)
	private Color currentNpcInteractColor;
	@Getter(AccessLevel.PACKAGE)
	private List<TileObject> objects = new ArrayList<TileObject>();
	@Getter(AccessLevel.PACKAGE)
	private List<NPC> attackNpcs = new ArrayList<NPC>();
	@Getter(AccessLevel.PACKAGE)
	private List<NPC> interactNpcs = new ArrayList<NPC>();

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private InteractableOverlay interactableOverlay;

	@Inject
	private InteractableConfig config;

	@Inject
	private KeyManager keyManager;

	@Override
	protected void startUp() throws Exception
	{
		shown = false;
		keyManager.registerKeyListener(hotkeyListener);
		overlayManager.add(interactableOverlay);
		objects = new ArrayList<TileObject>();
		attackNpcs = new ArrayList<NPC>();
		interactNpcs = new ArrayList<NPC>();
	}

	@Override
	protected void shutDown() throws Exception
	{
		shown = false;
		keyManager.unregisterKeyListener(hotkeyListener);
		overlayManager.remove(interactableOverlay);
		objects = null;
		attackNpcs = null;
		interactNpcs = null;
	}

	@Subscribe
	public void onClientTick(ClientTick clientTick)
	{
		if (config.autoHideTimeout() > 0 && shown)
		{
			if (remainingClientTicks > 50)
			{
				remainingClientTicks--;
			}
			else if (remainingClientTicks > 0)
			{
				fadeOut();
				remainingClientTicks--;
			}
			else
			{
				shown = false;
				log.debug("Interactable Hints auto-hide triggered");
				currentObjectColor = config.objectHighlightColor();
				currentNpcAttackColor = config.attackNpcColor();
				currentNpcInteractColor = config.interactableNpcColor();
			}
		}
	}

	private void fadeOut()
	{
		int newObjectAlpha = config.objectHighlightColor().getAlpha() * remainingClientTicks / 50;
		currentObjectColor = new Color(config.objectHighlightColor().getRed(), config.objectHighlightColor().getGreen(), config.objectHighlightColor().getBlue(), newObjectAlpha);

		int newAttackAlpha = config.attackNpcColor().getAlpha() * remainingClientTicks / 50;
		currentNpcAttackColor = new Color(config.attackNpcColor().getRed(), config.attackNpcColor().getGreen(), config.attackNpcColor().getBlue(), newAttackAlpha);

		int newInteractAlpha = config.interactableNpcColor().getAlpha() * remainingClientTicks / 50;
		currentNpcInteractColor = new Color(config.interactableNpcColor().getRed(), config.interactableNpcColor().getGreen(), config.interactableNpcColor().getBlue(), newInteractAlpha);
	}

	@Provides
	InteractableConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(InteractableConfig.class);
	}

	private final HotkeyListener hotkeyListener = new HotkeyListener(() -> config.toggleKeybind())
	{
		@Override
		public void hotkeyPressed()
		{
			currentObjectColor = config.objectHighlightColor();
			currentNpcAttackColor = config.attackNpcColor();
			currentNpcInteractColor = config.interactableNpcColor();

			shown = !shown;
			log.debug("Interactable Hints overlay toggled to " + shown);
			if (shown)
			{
				remainingClientTicks = config.autoHideTimeout() * 50;
			}
		}
	};

	void generateObjectLists()
	{
		objects = new ArrayList<TileObject>();
		attackNpcs = new ArrayList<NPC>();
		interactNpcs = new ArrayList<NPC>();

		for (NPC npc : client.getNpcs())
		{
			NPCComposition npcComp = replaceNpcImposters(npc.getComposition());

			if (npcCompCheck(npcComp) && npcCheck(npc))
			{
				if (npcAttackable(npcComp))
				{
					attackNpcs.add(npc);
				}
				else if (npcInteractable(npcComp))
				{
					interactNpcs.add(npc);
				}
			}
		}

		Scene scene = client.getScene();
		Tile[][] tiles = scene.getTiles()[client.getPlane()];

		for (int x = 0; x < Constants.SCENE_SIZE; ++x)
		{
			for (int y = 0; y < Constants.SCENE_SIZE; ++y)
			{
				Tile tile = tiles[x][y];
				if (tile == null)
				{
					continue;
				}

				for (GameObject gameObject : tile.getGameObjects())
				{
					if (gameObjectCheck(gameObject) && !(gameObject.getRenderable() instanceof Player) && !(gameObject.getRenderable() instanceof NPC))
					{
						int objectId = gameObject.getId();
						ObjectComposition comp = replaceObjectImposters(client.getObjectDefinition(objectId));

						if (objectCompCheck(comp))
						{
							if (!objects.contains(gameObject))
							{
								objects.add(gameObject);
							}
							break;
						}
					}
				}

				WallObject wallObject = tile.getWallObject();

				if (gameObjectCheck(wallObject))
				{
					int objectId = wallObject.getId();
					ObjectComposition comp = replaceObjectImposters(client.getObjectDefinition(objectId));

					if (objectCompCheck(comp))
					{
						if (!objects.contains(wallObject))
						{
							objects.add(wallObject);
						}
					}
				}

				GroundObject groundObject = tile.getGroundObject();

				if (gameObjectCheck(groundObject))
				{
					int objectId = groundObject.getId();
					ObjectComposition comp = replaceObjectImposters(client.getObjectDefinition(objectId));

					if (objectCompCheck(comp))
					{
						if (!objects.contains(groundObject))
						{
							objects.add(groundObject);
						}
					}
				}
			}
		}
	}

	private boolean objectCompCheck(ObjectComposition comp)
	{
		return (comp != null && !Strings.isNullOrEmpty(comp.getName()) && !comp.getName().equals("null") && objectActionCheck(comp));
	}

	private boolean npcCompCheck(NPCComposition comp)
	{
		return (comp != null && !Strings.isNullOrEmpty(comp.getName()) && !comp.getName().equals("null"));
	}

	private boolean gameObjectCheck(TileObject object)
	{
		return object != null && object.getLocalLocation().distanceTo(client.getLocalPlayer().getLocalLocation()) <= MAX_DISTANCE;
	}

	private boolean npcCheck(NPC npc)
	{
		return npc != null && npc.getLocalLocation().distanceTo(client.getLocalPlayer().getLocalLocation()) <= MAX_DISTANCE;
	}

	private ObjectComposition replaceObjectImposters(ObjectComposition comp)
	{
		return comp.getImpostorIds() != null ? comp.getImpostor() : comp;
	}

	private NPCComposition replaceNpcImposters(NPCComposition comp)
	{
		return comp.getConfigs() != null && comp.transform() != null ? comp.transform() : comp;
	}

	private boolean objectActionCheck(ObjectComposition comp)
	{
		for (String action : comp.getActions())
		{
			if (!Strings.isNullOrEmpty(action) && !action.equals("null"))
			{
				return true;
			}
		}
		return false;
	}

	private boolean npcAttackable(NPCComposition comp)
	{
		for (String action : comp.getActions())
		{
			if (!Strings.isNullOrEmpty(action) && action.equals("Attack") && client.getVarpValue(1306) !=3)
			{
				return true;
			}
		}
		return false;
	}

	private boolean npcInteractable(NPCComposition comp)
	{
		for (String action : comp.getActions())
		{
			if (!Strings.isNullOrEmpty(action) && !action.equals("null") && !action.equals("Attack"))
			{
				return true;
			}
		}
		return false;
	}
}

package com.interactable;

import java.awt.Color;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Keybind;
import net.runelite.client.config.Range;

@ConfigGroup(InteractableConfig.GROUP)
public interface InteractableConfig extends Config
{
	String GROUP = "interactableHints";

	@ConfigItem(
		keyName = "toggleKeybind",
		name = "Toggle Overlay",
		description = "Binds a key (combination) to toggle the overlay.",
		position = 0
	)
	default Keybind toggleKeybind()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
		keyName = "autoHideTimeout",
		name = "Auto Hide Timeout",
		description = "Timeout (in seconds) where the overlay is hidden (0 = do not auto hide)",
		position = 1
	)
	default int autoHideTimeout()
	{
		return 0;
	}

	@ConfigItem(
		keyName = "showObject",
		name = "Show Objects",
		description = "Outline interactable Objects",
		position = 2
	)
	default boolean showObject()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
		keyName = "objectHighlightColor",
		name = "Object Color",
		description = "The color of the outline for Objects",
		position = 3
	)
	default Color objectHighlightColor()
	{
		return new Color(0, 255, 255, 160);
	}

	@ConfigItem(
		keyName = "showAttackNpc",
		name = "Show Attackable NPCs",
		description = "Outline attackable NPCs",
		position = 4
	)
	default boolean showAttackNpc()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
		keyName = "attackNpcColor",
		name = "Attackable NPC Color",
		description = "The color of the outline for attackable NPCs",
		position = 5
	)
	default Color attackNpcColor()
	{
		return new Color(255, 10, 10, 160);
	}

	@ConfigItem(
		keyName = "showInteractableNpc",
		name = "Show Interactable NPCs",
		description = "Outline interactable NPCs",
		position = 6
	)
	default boolean showInteractableNpc()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
		keyName = "interactableNpcColor",
		name = "Interactable NPC Color",
		description = "The color of the outline for interactable NPCs",
		position = 7
	)
	default Color interactableNpcColor()
	{
		return new Color(255, 255, 10, 160);
	}

	@ConfigItem(
		keyName = "borderWidth",
		name = "Border Width",
		description = "Width of the outlined border",
		position = 8
	)
	default int borderWidth()
	{
		return 4;
	}

	@ConfigItem(
		keyName = "outlineFeather",
		name = "Outline feather",
		description = "Specify between 0-4 how much of the model outline should be faded",
		position = 9
	)
	@Range(
		max = 4
	)
	default int outlineFeather()
	{
		return 4;
	}

}

