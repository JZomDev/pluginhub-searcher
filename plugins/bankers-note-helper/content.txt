package com.bankersnotehelper;

import java.awt.*;
import java.awt.image.BufferedImage;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.ItemID;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

@Slf4j
public class BankersNoteHelperOverlay extends Overlay {

    private final Client client;
    private final ItemManager itemManager;
    private BankersNoteHelperConfig config;
    private int targetItemId = -1; // Default: No target item

    @Inject
    public BankersNoteHelperOverlay(Client client, ItemManager itemManager, BankersNoteHelperConfig config) {
        this.client = client;
        this.itemManager = itemManager;
        this.config = config;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
    }

    public void setConfig(BankersNoteHelperConfig config) {
        this.config = config;
    }

    public void setTargetItemId(int itemId) {
        log.debug("Overlay target item ID set to: {}", itemId);
        this.targetItemId = itemId;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (targetItemId <= 0) {
            log.debug("No target item set. Skipping overlay rendering.");
            return null; // Skip if no target item
        }

        // Get the inventory widget
        Widget inventoryWidget = client.getWidget(InterfaceID.INVENTORY, 0);
        if (inventoryWidget == null || inventoryWidget.isHidden()) {
            log.debug("Inventory widget is not visible. Skipping overlay rendering.");
            return null; // Skip if inventory is not visible
        }

        // Locate Banker's Note in the inventory
        for (Widget item : inventoryWidget.getDynamicChildren()) {
            if (item.getItemId() == ItemID.BANKERS_NOTE) { // Banker's Note ID
                Rectangle bounds = item.getBounds();

                // Fetch the target item image
                BufferedImage targetImage = itemManager.getImage(targetItemId);
                if (targetImage != null) {
                    int overlaySize = 20; // Desired icon size
                    Image scaledImage = targetImage.getScaledInstance(overlaySize, overlaySize, Image.SCALE_SMOOTH);

                    // Calculate position to place the icon in the bottom-right corner
                    int x = bounds.x + bounds.width - overlaySize - 2; // Slight padding (2px) from the edge
                    int y = bounds.y + bounds.height - overlaySize - 2; // Slight padding (2px) from the edge

                    // Draw the scaled icon
                    graphics.drawImage(scaledImage, x, y, null);

                    // Check if the outline is enabled
                    if (config.enableOutline()) {
                        // Draw an outline around the image using the config color
                        drawImageOutline(graphics, targetImage, x, y, overlaySize, overlaySize, config.outlineColor());
                    }
                } else {
                    log.warn("No image found for target item ID: {}", targetItemId);
                }
                break;
            }
        }

        return null;
    }

    /**
     * Draws an outline around the non-transparent parts of an image.
     */
    private void drawImageOutline(Graphics2D graphics, BufferedImage image, int x, int y, int targetWidth, int targetHeight, Color outlineColor) {
        BufferedImage scaledImage = new BufferedImage(targetWidth, targetHeight, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = scaledImage.createGraphics();
        g2d.drawImage(image, 0, 0, targetWidth, targetHeight, null);
        g2d.dispose();

        graphics.setColor(outlineColor); // Use config-defined outline color
        for (int i = 0; i < scaledImage.getWidth(); i++) {
            for (int j = 0; j < scaledImage.getHeight(); j++) {
                int pixel = scaledImage.getRGB(i, j);
                if ((pixel >> 24) != 0x00 && isEdgePixel(scaledImage, i, j)) { // Check for edge
                    graphics.fillRect(x + i, y + j, 1, 1); // Draw 1x1 pixel outline
                }
            }
        }
    }

    /**
     * Determines if a pixel is on the edge by checking neighboring pixels for transparency.
     */
    private boolean isEdgePixel(BufferedImage image, int x, int y) {
        int width = image.getWidth();
        int height = image.getHeight();
        int[] dx = {-1, 0, 1, -1, 1, -1, 0, 1};
        int[] dy = {-1, -1, -1, 0, 0, 1, 1, 1};

        for (int d = 0; d < dx.length; d++) {
            int nx = x + dx[d];
            int ny = y + dy[d];
            if (nx < 0 || ny < 0 || nx >= width || ny >= height) {
                return true; // Out-of-bounds is considered transparent
            }
            int neighborPixel = image.getRGB(nx, ny);
            if ((neighborPixel >> 24) == 0x00) {
                return true; // Transparent neighbor means edge
            }
        }
        return false;
    }
}

package com.bankersnotehelper;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.Color;

@ConfigGroup("BetterBankersNote")
public interface BankersNoteHelperConfig extends Config {

    @ConfigItem(
            keyName = "outlineColor",
            name = "Outline Color",
            description = "Choose the color for the overlay outline"
    )
    default Color outlineColor() {
        return Color.YELLOW; // Default color
    }
    @ConfigItem(
            keyName = "enableOutline",
            name = "Enable Outline",
            description = "Enable or disable the outline around the overlay icon"
    )
    default boolean enableOutline() {
        return true; // Default is enabled
    }

}
package com.bankersnotehelper;

import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import com.google.inject.Provides;
import net.runelite.client.config.ConfigManager;

@Slf4j
@PluginDescriptor(
        name = "Better Banker's Note",
        description = "Displays an icon for the item targeted by the Banker's Note.",
        tags = {"inventory", "note", "overlay"}
)
public class BankersNoteHelperPlugin extends Plugin {

    @Inject
    private Client client;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private BankersNoteHelperConfig config;

    @Inject
    private BankersNoteHelperOverlay overlay;

    @Inject
    private ItemManager itemManager;

    @Inject
    private ClientThread clientThread;

    @Provides
    BankersNoteHelperConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(BankersNoteHelperConfig.class);
    }

    private int targetItemId = -1;

    @Override
    protected void startUp() {
        log.info("Starting Better Banker's Note Plugin");
        overlayManager.add(overlay);
        initializeOverlayOnLogin();
    }

    @Override
    protected void shutDown() {
        log.info("Better Banker's Note plugin stopped.");
        overlayManager.remove(overlay);
        overlay.setTargetItemId(-1); // Clear the overlay
    }

    private void initializeOverlayOnLogin() {
        clientThread.invokeLater(() -> {
            if (client.getGameState() == GameState.LOGGED_IN) {
                retryOverlayInitialization(5);
            }
        });
    }

    private void retryOverlayInitialization(int retries) {
        if (retries <= 0) {
            overlay.setTargetItemId(-1);
            return;
        }

        clientThread.invokeLater(() -> {
            if (updateOverlayWithCurrentBankersNoteState()) {
                log.info("Overlay successfully initialized.");
            } else {
                retryOverlayInitialization(retries - 1);
            }
        });
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged event) {
        if (event.getGameState() == GameState.LOGGED_IN) {
            retryOverlayInitialization(5);
        }
    }

    @Subscribe
    public void onItemContainerChanged(ItemContainerChanged event) {
        if (event.getContainerId() == InventoryID.INVENTORY.getId()) {
            handleDelayedOverlayUpdate();
        }
    }

    @Subscribe
    public void onMenuOptionClicked(MenuOptionClicked event) {
        if (event.getMenuAction() == MenuAction.WIDGET_TARGET_ON_WIDGET && event.getItemId() == ItemID.BANKERS_NOTE) {
            String menuTarget = event.getMenuTarget();
            int extractedItemId = extractItemIdFromTarget(menuTarget);

            if (extractedItemId > 0) {
                overlay.setTargetItemId(extractedItemId);
            } else {
                handleDelayedOverlayUpdate();
            }
        }
    }

    private void handleDelayedOverlayUpdate() {
        clientThread.invokeLater(() -> {
            if (!updateOverlayWithCurrentBankersNoteState()) {
                clientThread.invokeLater(this::updateOverlayWithCurrentBankersNoteState);
            }
        });
    }

    private boolean updateOverlayWithCurrentBankersNoteState() {
        Widget inventoryWidget = client.getWidget(InterfaceID.INVENTORY,0);
        if (inventoryWidget == null || inventoryWidget.getDynamicChildren() == null) {
            log.debug("Inventory widget not found.");
            overlay.setTargetItemId(-1);
            return false;
        }

        for (Widget item : inventoryWidget.getDynamicChildren()) {
            if (item.getItemId() == ItemID.BANKERS_NOTE) {
                String widgetTooltip = getTooltipFromWidget(item);
                if (widgetTooltip != null) {
                    int itemIdFromTooltip = extractItemIdFromTarget(widgetTooltip);
                    if (itemIdFromTooltip > 0) {
                        overlay.setTargetItemId(itemIdFromTooltip);
                        targetItemId = itemIdFromTooltip;
                        return true;
                    }
                }
            }
        }

        overlay.setTargetItemId(-1); // Reset if no Banker's Note is found
        return false;
    }

    private String getTooltipFromWidget(Widget widget) {
        if (widget != null) {
            return widget.getName();
        }
        return null;
    }

    private int extractItemIdFromTarget(String targetText) {
        if (targetText == null || targetText.isEmpty()) {
            return -1;
        }

        String cleanedTarget = targetText.replaceAll("<[^>]*>", "").trim();
        return itemManager.search(cleanedTarget)
                .stream()
                .filter(item -> item.getName().equalsIgnoreCase(cleanedTarget))
                .findFirst()
                .map(item -> item.getId())
                .orElse(-1);
    }
}

package com.bankersnotehelper;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class BankersNoteHelperPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(BankersNoteHelperPlugin.class);
		RuneLite.main(args);
	}
}
