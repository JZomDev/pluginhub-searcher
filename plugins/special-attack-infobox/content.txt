package com.specinfo;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;

import javax.imageio.ImageIO;
import java.util.Objects;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;

@Slf4j
@PluginDescriptor(
		name = "Special Attack Infobox"
)
public class SpecInfoPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private InfoBoxManager infoBoxManager;

	@Inject
	private SpecInfoConfig config;

	@Override
	protected void startUp() throws Exception
	{
		infoBoxManager.addInfoBox(new SpecInfoBox(ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream("/special_attack_sprite.png"))), this, client, config));
	}

	@Override
	protected void shutDown() throws Exception
	{
		infoBoxManager.removeIf(t -> t instanceof SpecInfoBox);
	}

	@Provides
	SpecInfoConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(SpecInfoConfig.class);
	}
}
package com.specinfo;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("specinfo")
public interface SpecInfoConfig extends Config
{
	@ConfigItem(
			keyName = "displayInfobox",
			name = "Display Infobox",
			description = "Show an infobox for special attack."
	)
	default boolean displayInfobox()
	{
		return true;
	}

	@ConfigItem(
			keyName = "lowSpecThreshold",
			name = "Low Spec Threshold",
			description = "Threshold for low special attack."
	)
	default int lowSpecThreshold()
	{
		return 0;
	}
}

package com.specinfo;

import net.runelite.api.Client;
import net.runelite.api.VarPlayer;
import net.runelite.client.ui.overlay.infobox.InfoBox;
import net.runelite.client.ui.overlay.infobox.InfoBoxPriority;

import java.awt.*;
import java.awt.image.BufferedImage;

class SpecInfoBox extends InfoBox
{
    private static final Color ABOVE_THRESHOLD = new Color(255, 255, 255, 220);
    private static final Color BELOW_THRESHOLD = new Color(255, 0, 0, 220);

    private final SpecInfoPlugin plugin;
    private final SpecInfoConfig config;
    private final Client client;


    SpecInfoBox(BufferedImage image, SpecInfoPlugin plugin, Client client, SpecInfoConfig config)
    {
        super(image, plugin);
        this.plugin = plugin;
        this.config = config;
        this.client = client;
        setTooltip("Special Attack");
        setPriority(InfoBoxPriority.HIGH);
    }

    public Integer getSpecialAttack()
    {
        return (int) (client.getVarpValue(VarPlayer.SPECIAL_ATTACK_PERCENT)/10f);
    }

    @Override
    public String getText()
    {
        return String.valueOf(getSpecialAttack());
    }

    @Override
    public Color getTextColor()
    {
        if (config.lowSpecThreshold() > 0 & getSpecialAttack() < config.lowSpecThreshold())
        {
            return BELOW_THRESHOLD;
        }
        else
        {
            return ABOVE_THRESHOLD;
        }
    }

    @Override
    public boolean render()
    {
        return config.displayInfobox();
    }

}
package com.specinfo;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SpecInfoPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(SpecInfoPlugin.class);
		RuneLite.main(args);
	}
}
