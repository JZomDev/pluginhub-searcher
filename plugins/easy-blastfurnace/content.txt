package com.toofifty.easyblastfurnace.utils;

import com.toofifty.easyblastfurnace.methods.*;
import com.toofifty.easyblastfurnace.state.BlastFurnaceState;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.gameval.InventoryID;
import net.runelite.api.ItemContainer;
import net.runelite.api.gameval.ItemID;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.time.Duration;
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@Singleton
@Slf4j
public class SessionStatistics
{
    @Inject
    private Client client;

    @Inject
    private MethodHandler methodHandler;

    @Inject
    private BlastFurnaceState state;

    @Getter
    private int staminaDoses = 0;

    private Instant timeStarted;

    @Getter
    private int barsPerHour = 0;

    private ItemContainer cachedBank;

    private final Map<Integer, Integer> outputs = new HashMap<>();

    public void clear()
    {
        outputs.clear();
        staminaDoses = 0;
        timeStarted = null;
    }

    public void drinkStamina()
    {
        if (state.getEquipment().equipped(ItemID.RING_OF_ENDURANCE)) {
            staminaDoses += 2;
        } else {
            staminaDoses++;
        }
    }

    public int getTotalActionsDone()
    {
        int actions = 0;
        for (int itemId : outputs.keySet()) {
            actions += outputs.getOrDefault(itemId, 0);
        }
        calculateBarsPerHour(actions);
        return actions;
    }

    public double getTotalXpGained()
    {
        double xp = 0;
        for (int itemId : outputs.keySet()) {
            int quantity = outputs.getOrDefault(itemId, 0);
			if (!Equipment.hasGoldsmithEquipment(state)) {
				xp += Objects.requireNonNull(XpRecord.get(itemId)).getXp() * quantity;
			} else {
				xp += Objects.requireNonNull(XpRecord.get(itemId)).getGauntletXp() * quantity;
			}
        }
        return xp;
    }

    private int getActionsBanked(int itemId)
    {
        return getActionsBanked(XpRecord.get(itemId));
    }

    private ItemContainer getBank()
    {
        ItemContainer bank = client.getItemContainer(InventoryID.BANK);

        if (bank != null) {
            return cachedBank = bank;
        }

        return cachedBank;
    }

    private int getActionsBanked(XpRecord xpRecord)
    {
        ItemContainer bank = getBank();
        if (bank == null) return 0;

        int ores = bank.count(xpRecord.getOreId());

        if (xpRecord.getCoalPer() == 0) {
            return ores;
        }

        int coal = bank.count(ItemID.COAL);

        return Math.min(ores, coal / xpRecord.getCoalPer());
    }

    private double getXpBanked(int itemId)
    {
        return getXpBanked(XpRecord.get(itemId));
    }

    private double getXpBanked(XpRecord xpRecord)
    {
		if (!Equipment.hasGoldsmithEquipment(state)) {
			return getActionsBanked(xpRecord) * xpRecord.getXp();
		} else {
			return getActionsBanked(xpRecord) * xpRecord.getGauntletXp();
		}
    }

    public int getTotalActionsBanked()
    {
        Method method = methodHandler.getMethod();

        if (method instanceof GoldHybridMethod) {
            return getActionsBanked(ItemID.GOLD_ORE) +
                getActionsBanked(((GoldHybridMethod) method).oreItem());
        }

		if (method instanceof SilverHybridMethod) {
			return getActionsBanked(ItemID.SILVER_ORE) +
				getActionsBanked(((SilverHybridMethod) method).oreItem());
		}


		if (method instanceof MetalBarMethod) {
            return getActionsBanked(((MetalBarMethod) method).oreItem());
        }

        if (method instanceof GoldBarMethod) {
            return getActionsBanked(ItemID.GOLD_ORE);
        }

		if (method instanceof SilverBarMethod) {
			return getActionsBanked(ItemID.SILVER_ORE);
		}

        return 0;
    }

    public double getTotalXpBanked()
    {
        Method method = methodHandler.getMethod();

        if (method instanceof GoldHybridMethod) {
            return getXpBanked(ItemID.GOLD_ORE) +
                getXpBanked(((GoldHybridMethod) method).oreItem());
        }

		if (method instanceof SilverHybridMethod) {
			return getXpBanked(ItemID.SILVER_ORE) +
					getXpBanked(((SilverHybridMethod) method).oreItem());
		}

        if (method instanceof MetalBarMethod) {
            return getXpBanked(((MetalBarMethod) method).oreItem());
        }

        if (method instanceof GoldBarMethod) {
            return getXpBanked(ItemID.GOLD_ORE);
        }

		if (method instanceof SilverBarMethod) {
			return getXpBanked(ItemID.SILVER_ORE);
		}

        return 0;
    }

    public void onFurnaceUpdate()
    {
        int[] bars = new int[]{
            ItemID.GOLD_BAR, ItemID.SILVER_BAR, ItemID.STEEL_BAR, ItemID.MITHRIL_BAR, ItemID.ADAMANTITE_BAR, ItemID.RUNITE_BAR
        };

        int[] ores = new int[]{
            ItemID.GOLD_ORE, ItemID.SILVER_ORE, ItemID.IRON_ORE, ItemID.MITHRIL_ORE, ItemID.ADAMANTITE_ORE, ItemID.RUNITE_ORE
        };

        for (int oreId : ores) {
            int diff = state.getFurnace().getChange(oreId);
            if (diff > 0) {
                state.getFurnace().setOresOnConveyorBelt(Math.max(state.getFurnace().getOresOnConveyorBelt() - diff, 0));
                if (state.getFurnace().getOresOnConveyorBelt() == 0) {
                    state.getPlayer().hasOreOnConveyor(false);
                }
            }
        }

        for (int barId : bars) {
            int diff = state.getFurnace().getChange(barId);
            if (diff > 0) {
                int totalBars = outputs.getOrDefault(barId, 0) + diff;
                outputs.put(barId, totalBars);
            }
        }
    }

    private void calculateBarsPerHour(int totalBars)
    {
        Instant now = Instant.now();

        if (timeStarted == null) timeStarted = now;

        Duration timeSinceStart = Duration.between(timeStarted, now);
        double hours = (double) (timeSinceStart.toMillis() / 1000L) / 3600;

        if (!timeSinceStart.isNegative() && hours != 0)
        {
            barsPerHour = (int) Math.floor(totalBars / hours);
        }
    }
}

package com.toofifty.easyblastfurnace.utils;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.toofifty.easyblastfurnace.EasyBlastFurnaceConfig;
import com.toofifty.easyblastfurnace.methods.*;
import com.toofifty.easyblastfurnace.overlays.ItemStepOverlay;
import com.toofifty.easyblastfurnace.state.BlastFurnaceState;
import com.toofifty.easyblastfurnace.steps.MethodStep;
import lombok.Getter;
import net.runelite.api.gameval.ItemID;

@Singleton
public class MethodHandler
{

    @Inject
    private EasyBlastFurnaceConfig easyBlastFurnaceConfig;

    @Inject
    private BlastFurnaceState state;

    private final DrinkPotionMethod drinkPotionMethod = new DrinkPotionMethod();

    @Getter
    private Method method;

    @Getter
    private MethodStep[] steps;

    public void next()
    {
        if (method == null) return;
        if (!state.getPlayer().isOnBlastFurnaceWorld()) return;
        ItemStepOverlay.currentWidgetItem = null;

        steps = drinkPotionMethod.next(state);
        if (steps == null) steps = method.next(state);
    }

    public void clear()
    {
        method = null;
        steps = null;
    }

    private boolean inInventory(int itemId)
    {
        return state.getInventory().has(itemId);
    }

    private Method getMethodFromInventory()
    {
        // ensure method doesn't reset after gold/metal has been removed from inventory
        if (method instanceof GoldHybridMethod) return null;
		if (method instanceof SilverHybridMethod) return null;

        if (inInventory(ItemID.GOLD_ORE) ||
			(method instanceof GoldBarMethod && !inInventory(ItemID.SILVER_ORE))) {

            if (inInventory(ItemID.MITHRIL_ORE) ||
                method instanceof MithrilBarMethod)
                return new MithrilGoldHybridMethod();

            if (inInventory(ItemID.ADAMANTITE_ORE) ||
                method instanceof AdamantiteBarMethod)
                return new AdamantiteGoldHybridMethod();

            if (inInventory(ItemID.RUNITE_ORE) ||
                method instanceof RuniteBarMethod)
                return new RuniteGoldHybridMethod();

            return new GoldBarMethod();
        }

		if (inInventory(ItemID.SILVER_ORE) ||
				method instanceof SilverBarMethod) {

			if (inInventory(ItemID.MITHRIL_ORE) ||
					method instanceof MithrilBarMethod)
				return new MithrilSilverHybridMethod();

			if (inInventory(ItemID.ADAMANTITE_ORE) ||
					method instanceof AdamantiteBarMethod)
				return new AdamantiteSilverHybridMethod();

			if (inInventory(ItemID.RUNITE_ORE) ||
					method instanceof RuniteBarMethod)
				return new RuniteSilverHybridMethod();

			return new SilverBarMethod();
		}

        if (inInventory(ItemID.IRON_ORE)) return new SteelBarMethod();
        if (inInventory(ItemID.MITHRIL_ORE)) return new MithrilBarMethod();
        if (inInventory(ItemID.ADAMANTITE_ORE)) return new AdamantiteBarMethod();
        if (inInventory(ItemID.RUNITE_ORE)) return new RuniteBarMethod();

        return null;
    }

    public void setMethodFromInventory()
    {
        Method method = getMethodFromInventory();
        if (method == null ||
            (this.method != null && this.method.getClass().isInstance(method)))
            return;

        clear();
        this.method = method;
    }
}

package com.toofifty.easyblastfurnace.utils;

import com.google.inject.Singleton;
import net.runelite.api.GameObject;

import java.util.HashMap;
import java.util.Map;

@Singleton
public class ObjectManager
{
    private final Map<Integer, GameObject> gameObjects = new HashMap<>();

    public void add(GameObject object)
    {
        gameObjects.put(object.getId(), object);
    }

    public GameObject get(int id)
    {
        return gameObjects.get(id);
    }
}

package com.toofifty.easyblastfurnace.utils;
import net.runelite.api.EnumComposition;

public class Potion
{
	public EnumComposition potionEnum;
	public int itemId;
	public int doses;
	public int withdrawDoses;
}

package com.toofifty.easyblastfurnace.utils;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NonNull;
import net.runelite.api.gameval.ItemID;

import java.util.ArrayList;
import java.util.List;

@Getter
@AllArgsConstructor
class XpRecord
{
    private int oreId;
    private int barId;
    private int coalPer;
    private double xp;
	private double gauntletXp;

    private static final List<XpRecord> xpRecords = new ArrayList<>();

    static {
		xpRecords.add(new XpRecord(ItemID.GOLD_ORE, ItemID.GOLD_BAR, 0, 22.5, 56.2));
		xpRecords.add(new XpRecord(ItemID.SILVER_ORE, ItemID.SILVER_BAR, 1, 13.7, 13.7));
		xpRecords.add(new XpRecord(ItemID.IRON_ORE, ItemID.STEEL_BAR, 1, 17.5, 17.5));
		xpRecords.add(new XpRecord(ItemID.MITHRIL_ORE, ItemID.MITHRIL_BAR, 2, 30, 30));
		xpRecords.add(new XpRecord(ItemID.ADAMANTITE_ORE, ItemID.ADAMANTITE_BAR, 3, 37.5, 37.5));
		xpRecords.add(new XpRecord(ItemID.RUNITE_ORE, ItemID.RUNITE_BAR, 4, 50, 50));
    }

    public static XpRecord get(int id)
    {
        for (XpRecord record : xpRecords) {
            if (record.getOreId() == id || record.getBarId() == id) {
                return record;
            }
        }
        return null;
    }
}
package com.toofifty.easyblastfurnace.utils;

public class RSNumberFormat
{
    public static String format(int number)
    {
        if (number < 100000) {
            return String.format("%,d", number);
        }

        if (number < 10000000) {
            return String.format("%,dK", number / 1000);
        }

        return String.format("%,dM", number / 1000000);
    }

    public static String format(double number)
    {
        return format((int) number);
    }
}

package com.toofifty.easyblastfurnace.utils;

import lombok.Getter;

public enum CoalPer
{
	SILVER(0),
    IRON(1),
    MITHRIL(2),
    ADAMANTITE(3),
    RUNITE(4);

    @Getter
    private final int value;

    CoalPer(int value)
    {
        this.value = value;
    }

    public static int getValueFromString(String str)
    {
        String uppercaseStr = str.toUpperCase();
        if (uppercaseStr.contains("SILVER")) return SILVER.getValue();
		if (uppercaseStr.contains("STEEL")) return IRON.getValue();
        if (uppercaseStr.contains("MITHRIL")) return MITHRIL.getValue();
        if (uppercaseStr.contains("ADAMANTITE")) return ADAMANTITE.getValue();
        if (uppercaseStr.contains("RUNITE")) return RUNITE.getValue();
        return 0;
    }
}

package com.toofifty.easyblastfurnace.utils;

import net.runelite.api.gameval.ItemID;

public enum Graceful {
	HEAD(new int[] {
			ItemID.GRACEFUL_HOOD_WORN, ItemID.ZEAH_GRACEFUL_HOOD_ARCEUUS, ItemID.ZEAH_GRACEFUL_HOOD_ARCEUUS_WORN, ItemID.ZEAH_GRACEFUL_HOOD_PISCARILIUS,
			ItemID.ZEAH_GRACEFUL_HOOD_PISCARILIUS_WORN, ItemID.ZEAH_GRACEFUL_HOOD_LOVAKENGJ, ItemID.ZEAH_GRACEFUL_HOOD_LOVAKENGJ_WORN, ItemID.ZEAH_GRACEFUL_HOOD_SHAYZIEN,
			ItemID.ZEAH_GRACEFUL_HOOD_SHAYZIEN_WORN, ItemID.ZEAH_GRACEFUL_HOOD_HOSIDIUS, ItemID.ZEAH_GRACEFUL_HOOD_HOSIDIUS_WORN, ItemID.ZEAH_GRACEFUL_HOOD_KOUREND,
			ItemID.ZEAH_GRACEFUL_HOOD_KOUREND_WORN, ItemID.GRACEFUL_HOOD_SKILLCAPECOLOUR, ItemID.GRACEFUL_HOOD_SKILLCAPECOLOUR_WORN, ItemID.GRACEFUL_HOOD_HALLOWED,
			ItemID.GRACEFUL_HOOD_HALLOWED_WORN, ItemID.GRACEFUL_HOOD_TRAILBLAZER, ItemID.GRACEFUL_HOOD_TRAILBLAZER_WORN, ItemID.GRACEFUL_HOOD_WYRM, ItemID.GRACEFUL_HOOD_WYRM_WORN
	}, 3),

	BODY(new int[] {
			ItemID.GRACEFUL_TOP, ItemID.ZEAH_GRACEFUL_TOP_ARCEUUS, ItemID.ZEAH_GRACEFUL_TOP_ARCEUUS_WORN, ItemID.ZEAH_GRACEFUL_TOP_PISCARILIUS, ItemID.ZEAH_GRACEFUL_TOP_PISCARILIUS_WORN,
			ItemID.ZEAH_GRACEFUL_TOP_LOVAKENGJ, ItemID.ZEAH_GRACEFUL_TOP_LOVAKENGJ_WORN, ItemID.ZEAH_GRACEFUL_TOP_SHAYZIEN, ItemID.ZEAH_GRACEFUL_TOP_SHAYZIEN_WORN, ItemID.ZEAH_GRACEFUL_TOP_HOSIDIUS,
			ItemID.ZEAH_GRACEFUL_TOP_HOSIDIUS_WORN, ItemID.ZEAH_GRACEFUL_TOP_KOUREND, ItemID.ZEAH_GRACEFUL_TOP_KOUREND_WORN, ItemID.GRACEFUL_TOP_SKILLCAPECOLOUR, ItemID.GRACEFUL_TOP_SKILLCAPECOLOUR_WORN,
			ItemID.GRACEFUL_TOP_HALLOWED, ItemID.GRACEFUL_TOP_HALLOWED_WORN, ItemID.GRACEFUL_TOP_TRAILBLAZER, ItemID.GRACEFUL_TOP_TRAILBLAZER_WORN, ItemID.GRACEFUL_TOP_WYRM, ItemID.GRACEFUL_TOP_WYRM_WORN
	}, 4),

	LEGS(new int[] {
			ItemID.GRACEFUL_LEGS, ItemID.ZEAH_GRACEFUL_LEGS_ARCEUUS, ItemID.ZEAH_GRACEFUL_LEGS_ARCEUUS_WORN, ItemID.ZEAH_GRACEFUL_LEGS_PISCARILIUS, ItemID.ZEAH_GRACEFUL_LEGS_PISCARILIUS_WORN,
			ItemID.ZEAH_GRACEFUL_LEGS_LOVAKENGJ, ItemID.ZEAH_GRACEFUL_LEGS_LOVAKENGJ_WORN, ItemID.ZEAH_GRACEFUL_LEGS_SHAYZIEN, ItemID.ZEAH_GRACEFUL_LEGS_SHAYZIEN_WORN, ItemID.ZEAH_GRACEFUL_LEGS_HOSIDIUS,
			ItemID.ZEAH_GRACEFUL_LEGS_HOSIDIUS_WORN, ItemID.ZEAH_GRACEFUL_LEGS_KOUREND, ItemID.ZEAH_GRACEFUL_LEGS_KOUREND_WORN, ItemID.GRACEFUL_LEGS_SKILLCAPECOLOUR, ItemID.GRACEFUL_LEGS_SKILLCAPECOLOUR_WORN,
			ItemID.GRACEFUL_LEGS_HALLOWED, ItemID.GRACEFUL_LEGS_HALLOWED_WORN, ItemID.GRACEFUL_LEGS_TRAILBLAZER, ItemID.GRACEFUL_LEGS_TRAILBLAZER_WORN, ItemID.GRACEFUL_LEGS_WYRM, ItemID.GRACEFUL_LEGS_WYRM_WORN
	}, 4),

	GLOVES(new int[] {
			ItemID.GRACEFUL_GLOVES, ItemID.ZEAH_GRACEFUL_GLOVES_ARCEUUS, ItemID.ZEAH_GRACEFUL_GLOVES_ARCEUUS_WORN, ItemID.ZEAH_GRACEFUL_GLOVES_PISCARILIUS, ItemID.ZEAH_GRACEFUL_GLOVES_PISCARILIUS_WORN,
			ItemID.ZEAH_GRACEFUL_GLOVES_LOVAKENGJ, ItemID.ZEAH_GRACEFUL_GLOVES_LOVAKENGJ_WORN, ItemID.ZEAH_GRACEFUL_GLOVES_SHAYZIEN, ItemID.ZEAH_GRACEFUL_GLOVES_SHAYZIEN_WORN, ItemID.ZEAH_GRACEFUL_GLOVES_HOSIDIUS,
			ItemID.ZEAH_GRACEFUL_GLOVES_HOSIDIUS_WORN, ItemID.ZEAH_GRACEFUL_GLOVES_KOUREND, ItemID.ZEAH_GRACEFUL_GLOVES_KOUREND_WORN, ItemID.GRACEFUL_GLOVES_SKILLCAPECOLOUR, ItemID.GRACEFUL_GLOVES_SKILLCAPECOLOUR_WORN,
			ItemID.GRACEFUL_GLOVES_HALLOWED, ItemID.GRACEFUL_GLOVES_HALLOWED_WORN, ItemID.GRACEFUL_GLOVES_TRAILBLAZER, ItemID.GRACEFUL_GLOVES_TRAILBLAZER_WORN, ItemID.GRACEFUL_GLOVES_WYRM, ItemID.GRACEFUL_GLOVES_WYRM_WORN
	}, 3),

	BOOTS(new int[] {
			ItemID.GRACEFUL_BOOTS, ItemID.ZEAH_GRACEFUL_BOOTS_ARCEUUS, ItemID.ZEAH_GRACEFUL_BOOTS_ARCEUUS_WORN, ItemID.ZEAH_GRACEFUL_BOOTS_PISCARILIUS, ItemID.ZEAH_GRACEFUL_BOOTS_PISCARILIUS_WORN, ItemID.ZEAH_GRACEFUL_BOOTS_LOVAKENGJ,
			ItemID.ZEAH_GRACEFUL_BOOTS_LOVAKENGJ_WORN, ItemID.ZEAH_GRACEFUL_BOOTS_SHAYZIEN, ItemID.ZEAH_GRACEFUL_BOOTS_SHAYZIEN_WORN, ItemID.ZEAH_GRACEFUL_BOOTS_HOSIDIUS, ItemID.ZEAH_GRACEFUL_BOOTS_HOSIDIUS_WORN,
			ItemID.ZEAH_GRACEFUL_BOOTS_KOUREND, ItemID.ZEAH_GRACEFUL_BOOTS_KOUREND_WORN, ItemID.GRACEFUL_BOOTS_SKILLCAPECOLOUR, ItemID.GRACEFUL_BOOTS_SKILLCAPECOLOUR_WORN, ItemID.GRACEFUL_BOOTS_HALLOWED,
			ItemID.GRACEFUL_BOOTS_HALLOWED_WORN, ItemID.GRACEFUL_BOOTS_TRAILBLAZER, ItemID.GRACEFUL_BOOTS_TRAILBLAZER_WORN, ItemID.GRACEFUL_BOOTS_WYRM, ItemID.GRACEFUL_BOOTS_WYRM_WORN
	}, 3),

	CAPE(new int[] {
			ItemID.GRACEFUL_CAPE, ItemID.ZEAH_GRACEFUL_CAPE_ARCEUUS, ItemID.ZEAH_GRACEFUL_CAPE_ARCEUUS_WORN, ItemID.ZEAH_GRACEFUL_CAPE_PISCARILIUS, ItemID.ZEAH_GRACEFUL_CAPE_PISCARILIUS_WORN, ItemID.ZEAH_GRACEFUL_CAPE_LOVAKENGJ,
			ItemID.ZEAH_GRACEFUL_CAPE_LOVAKENGJ_WORN, ItemID.ZEAH_GRACEFUL_CAPE_SHAYZIEN, ItemID.ZEAH_GRACEFUL_CAPE_SHAYZIEN_WORN, ItemID.ZEAH_GRACEFUL_CAPE_HOSIDIUS, ItemID.ZEAH_GRACEFUL_CAPE_HOSIDIUS_WORN,
			ItemID.ZEAH_GRACEFUL_CAPE_KOUREND, ItemID.ZEAH_GRACEFUL_CAPE_KOUREND_WORN, ItemID.GRACEFUL_CAPE_SKILLCAPECOLOUR, ItemID.GRACEFUL_CAPE_SKILLCAPECOLOUR_WORN, ItemID.GRACEFUL_CAPE_HALLOWED,
			ItemID.GRACEFUL_CAPE_HALLOWED_WORN, ItemID.GRACEFUL_CAPE_TRAILBLAZER, ItemID.GRACEFUL_CAPE_TRAILBLAZER_WORN, ItemID.GRACEFUL_CAPE_WYRM, ItemID.GRACEFUL_CAPE_WYRM_WORN,
			ItemID.SKILLCAPE_AGILITY,ItemID.SKILLCAPE_AGILITY_WORN, ItemID.SKILLCAPE_AGILITY_TRIMMED, ItemID.SKILLCAPE_AGILITY_TRIMMED_WORN, ItemID.SKILLCAPE_MAX, ItemID.SKILLCAPE_MAX_WORN
	}, 3);

	public final int[] items;

	public final int boost;

	Graceful(int[] items, int boost)
	{
		this.items = items;
		this.boost = boost;
	}
}

package com.toofifty.easyblastfurnace.utils;

import com.toofifty.easyblastfurnace.methods.Method;
import com.toofifty.easyblastfurnace.state.BlastFurnaceState;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.api.gameval.ItemID;
import net.runelite.api.gameval.VarbitID;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.util.RSTimeUnit;

import javax.inject.Inject;
import java.time.Duration;
import java.time.Instant;

@Slf4j
public class StaminaHelper {

    @Inject
    private BlastFurnaceState state;

    @Inject
    private Client client;

    @Inject
    private MethodHandler methodHandler;

    @Inject
    private ConfigManager configManager;

    private Instant staminaEndTime;

    private double lossRateMultiplier;

    public double getEnergyNeededForNextRun()
    {
        // 18 ticks or 10800 milliseconds minimum in one run.
        // On a metal ore/gold/hybrid trip: 9 ticks with ore, 5 ticks without, 4 ticks with bars.
        Method method = methodHandler.getMethod();
        int coalPer = CoalPer.getValueFromString(method.getName());
        boolean isCoalRunNext = state.getFurnace().isCoalRunNext(coalPer);
        int weight = client.getWeight() - getInventoryOresAndBarsWeight();
        int nextOreWeight = (int) Math.round(getWeightOfNextOresOrBarsInInventory(false, coalPer)) + weight;
        int nextBarWeight = (int) Math.round(getWeightOfNextOresOrBarsInInventory(true, coalPer)) + weight;
        int ticksSpentIdle = getTicksSpentIdle(isCoalRunNext, method.getName());
        double energyRecovered = getMinimumEnergyRecovered(ticksSpentIdle);

        calculateStaminaDuration(ticksSpentIdle);

        if (isCoalRunNext) {
            return Math.round(getLossRate(weight) * 9 + getLossRate(nextOreWeight) * 9 - energyRecovered);
        } else {
            return Math.round(getLossRate(nextOreWeight) * 9 + getLossRate(weight) * 5 + getLossRate(nextBarWeight) * 4 - energyRecovered);
        }
    }

    private double getLossRate(int weight)
    {
		final int effectiveWeight = Math.min(Math.max(weight, 0), 64);

		int energyUnitsLost = (int) ((60 + (67 * effectiveWeight / 64.0)) * (1 - client.getBoostedSkillLevel(Skill.AGILITY) / 300.0));

		return energyUnitsLost / 100.0 * lossRateMultiplier;
    }

    private double getMinimumEnergyRecovered(int ticksSpentIdle)
    {
		double energyRecoveryPerSecond = (25 + client.getBoostedSkillLevel(Skill.AGILITY) / 6.0) / 100;
        int boost = 0;

        for (Graceful graceful : Graceful.values()) {
            if (state.getEquipment().equipped(graceful.items)) boost += graceful.boost;
        }

        if (boost == 20) boost += 10; // full graceful bonus
        energyRecoveryPerSecond *= 1.0 + boost / 100.0;

        return energyRecoveryPerSecond * 0.6 * ticksSpentIdle;
    }

    private int getTicksSpentIdle(boolean coalRun, String methodName)
    {
        int ticksSpentIdle = 4; // 4 ticks for banking
        boolean goldBars = methodName.equals("Gold bars");
		boolean silverBars =  methodName.equals("Silver bars");

        if (!goldBars && !silverBars) ticksSpentIdle += 2; // 2 ticks to unload coal bag
        if (!goldBars && !silverBars && state.getCoalBag().getMaxCoal() > 27) ticksSpentIdle += 2; // 2 more ticks to unload coal bag
        if (!coalRun || methodName.contains("Gold") || methodName.contains("Silver")) ticksSpentIdle++; // 1 tick spent collecting bars

        return ticksSpentIdle;
    }

    private double getWeightOfNextOresOrBarsInInventory(boolean getBars, int coalPer)
    {
        Method method = methodHandler.getMethod();
        String ore = method.getName().toUpperCase().replace("GOLD + ", "").replace("SILVER + ", "").replace("STEEL", "IRON").replace(" BARS", "_ORE");
        String bars = ore.replace("IRON", "STEEL").replace("_ORE", "_BAR");
        double coalRunWeight = getBars ? BarsOres.GOLD_BAR.getWeight() : BarsOres.COAL.getWeight();
        int freeSlots = state.getInventory().getFreeSlotsIncludingOresAndBars();

        if (state.getFurnace().isCoalRunNext(coalPer)) {
            freeSlots = Math.min(freeSlots, state.getBank().getQuantity(method.getName().contains("Gold") ? ItemID.GOLD_ORE : method.getName().contains("Silver") ? ItemID.SILVER_ORE : ItemID.COAL));
            return coalRunWeight * freeSlots;
        } else {
            freeSlots = Math.min(freeSlots, state.getBank().getQuantity(BarsOres.valueOf(ore).getItemID()));
            return BarsOres.valueOf(getBars ? bars : ore).getWeight() * freeSlots;
        }
    }

    private int getInventoryOresAndBarsWeight() {
        double weight = 0;
        weight += state.getInventory().getQuantity(ItemID.IRON_BAR, ItemID.SILVER_BAR, ItemID.STEEL_BAR, ItemID.RUNITE_BAR, ItemID.GOLD_BAR) * BarsOres.GOLD_BAR.getWeight();
        weight += state.getInventory().getQuantity(ItemID.IRON_ORE, ItemID.SILVER_ORE, ItemID.COAL, ItemID.RUNITE_ORE, ItemID.GOLD_ORE) * BarsOres.COAL.getWeight();
        weight += state.getInventory().getQuantity(ItemID.ADAMANTITE_BAR) * BarsOres.ADAMANTITE_BAR.getWeight();
        weight += state.getInventory().getQuantity(ItemID.ADAMANTITE_ORE) * BarsOres.ADAMANTITE_ORE.getWeight();
        weight += state.getInventory().getQuantity(ItemID.MITHRIL_BAR) * BarsOres.MITHRIL_BAR.getWeight();
        weight += state.getInventory().getQuantity(ItemID.MITHRIL_ORE) * BarsOres.MITHRIL_ORE.getWeight();
        return (int) Math.round(weight);
    }

    private void calculateStaminaDuration(int ticksSpentIdle)
    {
        Duration staminaDuration = Duration.of(10L * client.getVarbitValue(VarbitID.STAMINA_DURATION), RSTimeUnit.GAME_TICKS);
        double baseDrain = isWearingSufficientlyChargedRingOfEndurance() ? 0.85 : 1; // ROE reduces energy depletion to 85% when no stamina potion is active
        lossRateMultiplier = staminaDuration.isZero() ? baseDrain : 0.3; // Stamina effect reduces energy depletion to 30%
        int timeForNextRun = 10800 + ticksSpentIdle * 600;

        // This is so we can get an accurate stamina timer value for the last seconds of potion (staminaDuration changes in steps of 6000ms)
        if (staminaEndTime == null && !staminaDuration.isZero() && staminaDuration.toMillis() <= 18000) {
            staminaEndTime = Instant.now().plus(staminaDuration);
        } else if (staminaDuration.isZero() || staminaDuration.toMillis() > 18000) {
            staminaEndTime = null;
        }

        // The closer our stamina potion is to finishing, the less overall lossRate reduction it provides for the run.
        long lastMillis = staminaEndTime != null ? Duration.between(Instant.now(), staminaEndTime).toMillis() : 0;
        if (staminaEndTime != null && lastMillis >= 0 && lastMillis <= timeForNextRun) {
            lossRateMultiplier = baseDrain - ((baseDrain - 0.3) * lastMillis / timeForNextRun); // max baseDrain, min 0.3
        }
    }

    private boolean isWearingSufficientlyChargedRingOfEndurance()
    {
        Integer charges = configManager.getRSProfileConfiguration("runenergy", "ringOfEnduranceCharges", Integer.class);
        return (charges != null && charges >= 500 && state.getEquipment().equipped(ItemID.RING_OF_ENDURANCE));
    }
}

package com.toofifty.easyblastfurnace.utils;

public class Strings {
    // MethodSteps
    public static String FILL_COAL_BAG = "Fill coal bag";
    public static String REFILL_COAL_BAG = "Refill coal bag";
    public static String EMPTY_COAL_BAG = "Empty coal bag";
    public static String WITHDRAW_COAL_BAG = "Withdraw coal bag";
    public static String WITHDRAW_COAL = "Withdraw coal";
    public static String WITHDRAW_GOLD_ORE = "Withdraw gold ore";
    public static String WITHDRAW_SILVER_ORE = "Withdraw silver ore";
    public static String WITHDRAW_IRON_ORE = "Withdraw iron ore";
    public static String WITHDRAW_MITHRIL_ORE = "Withdraw mithril ore";
    public static String WITHDRAW_ADAMANTITE_ORE = "Withdraw adamantite ore";
    public static String WITHDRAW_RUNITE_ORE = "Withdraw runite ore";
    public static String DEPOSIT_BARS_AND_ORES = "Deposit bars/ore";
    public static String DEPOSIT_STAMINA_POTIONS = "Deposit stamina potions";
    public static String DEPOSIT_SUPER_ENERGY_POTIONS = "Deposit Super Energy potions";
    public static String DEPOSIT_ENERGY_POTIONS = "Deposit Energy potions";
	public static String DEPOSIT_STRANGE_FRUIT = "Deposit Strange Fruit";
    public static String WITHDRAW_ICE_OR_SMITHS_GLOVES = "Withdraw ice gloves or smiths gloves (i)";
    public static String EQUIP_ICE_OR_SMITHS_GLOVES = "Equip ice gloves or smiths gloves (i)";
    public static String EQUIP_GOLDSMITH_GAUNTLETS_AFTER_COLLECT_BARS = "Equip after collecting bars";
    public static String GO_TO_DISPENSER_AND_EQUIP_ICE_OR_SMITHS_GLOVES = "Go to bar dispenser and equip ice gloves or smiths gloves (i)";
    public static String WITHDRAW_GOLDSMITH_GAUNTLETS = "Withdraw goldsmith gauntlets";
    public static String EQUIP_GOLDSMITH_GAUNTLETS = "Equip goldsmith gauntlets";
    public static String WITHDRAW_SMITHING_CAPE = "Withdraw Smithing cape";
    public static String WITHDRAW_MAX_CAPE = "Withdraw Max cape";
    public static String EQUIP_SMITHING_CAPE = "Equip Smithing cape";
    public static String EQUIP_MAX_CAPE = "Equip Max cape";
    public static String DEPOSIT_INVENTORY = "Deposit inventory";
    public static String PUT_ORE_ONTO_CONVEYOR_BELT = "Put ore onto conveyor belt";
    public static String OPEN_BANK  = "Open bank chest";
    public static String COLLECT_BARS = "Collect bars";
    public static String WAIT_FOR_BARS = "Wait for bars to smelt";
    public static String GO_TO_DISPENSER = "Go to bar dispenser";
    public static String DRINK_STAMINA = null;
	public static String ADD_ITEM_EXPLANATION = "Keep one inventory slot filled with any non-ore, non-bar item (e.g. hammer, spade). Tick perfect methods fail if you add 28 ores at once.";
	public static String ADD_DUMMY_ITEM = "Add dummy item";

    // Bars
    public static String ADAMANTITE_GOLD_HYBRID = "Gold + adamantite bars";
    public static String ADAMANTITE_SILVER_HYBRID = "Silver + adamantite bars";
    public static String ADAMANTITE = "Adamantite bars";
    public static String GOLD = "Gold bars";
    public static String SILVER = "Silver bars";
    public static String STEEL = "Steel bars";
    public static String MITHRIL = "Mithril bars";
    public static String MITHRIL_GOLD_HYBRID = "Gold + mithril bars";
    public static String MITHRIL_SILVER_HYBRID = "Silver + mithril bars";
    public static String RUNITE = "Runite bars";
    public static String RUNITE_GOLD_HYBRID = "Gold + runite bars";
    public static String RUNITE_SILVER_HYBRID = "Silver + runite bars";

    // Patterns
    public static String COAL_FULL = "^The coal bag contains (\\d+) pieces of coal.$";
    public static String COAL_EMPTY = "^The coal bag is now empty.$";

    // Actions
    public static String EMPTY = "Empty";
    public static String DRINK = "Drink";

    // Stamina
    public static String WITHDRAW_STAMINA_POTION = "Withdraw stamina potion";
	public static String WITHDRAW_FROM_POTION_STORAGE = " from potion storage";
    public static String DRINK_STAMINA_POTION = "Drink stamina potion";
    public static String GET_MORE_STAMINA_POTIONS = "Get more stamina potions! Check settings to disable this";

    public static String WITHDRAW_SUPER_ENERGY_POTION = "Withdraw Super Energy potion";
    public static String DRINK_SUPER_ENERGY_POTION = "Drink Super Energy potion";
    public static String GET_MORE_SUPER_ENERGY_POTIONS = "Get more Super Energy potions! Check settings to disable this";

    public static String WITHDRAW_ENERGY_POTION = "Withdraw Energy potion";
    public static String DRINK_ENERGY_POTION = "Drink Energy potion";
    public static String GET_MORE_ENERGY_POTIONS = "Get more Energy potions! Check settings to disable this";

	public static String WITHDRAW_STRANGE_FRUIT = "Withdraw Strange Fruit";
	public static String EAT_STRANGE_FRUIT = "Eat Strange Fruit";
	public static String GET_MORE_STRANGE_FRUIT = "Get more Strange Fruit! Check settings to disable this";
}

package com.toofifty.easyblastfurnace.utils;

import com.toofifty.easyblastfurnace.state.BlastFurnaceState;
import net.runelite.api.gameval.ItemID;

import java.util.Arrays;

public enum Equipment {
    GOLDSMITH(new int[] {
        ItemID.GAUNTLETS_OF_GOLDSMITHING
    }),
    SMITHING_CAPE(new int[] {
        ItemID.SKILLCAPE_SMITHING, ItemID.SKILLCAPE_SMITHING_TRIMMED
    }),
    ICE_GLOVES(new int[] {
        ItemID.ICE_GLOVES, ItemID.SMITHING_UNIFORM_GLOVES_ICE
    }),
    MAX_CAPE(new int[] {
        ItemID.SKILLCAPE_MAX, ItemID.SKILLCAPE_MAX_WORN,
    }),
    COAL_BAG(new int[] {
        ItemID.COAL_BAG, ItemID.COAL_BAG_OPEN
    });

    public final int[] items;

    Equipment(int[] items)
    {
        this.items = items;
    }

    public static int[] merge(int[]... arrays)
    {
        return Arrays.stream(arrays).flatMapToInt(Arrays::stream).toArray();
    }

    public static boolean hasGoldsmithEquipment(BlastFurnaceState state)
    {
        int[] goldsmithEquipment = merge(GOLDSMITH.items, MAX_CAPE.items, SMITHING_CAPE.items);
        return state.getInventory().has(goldsmithEquipment) || state.getBank().has(goldsmithEquipment) || state.getEquipment().equipped(goldsmithEquipment);
    }

    public static boolean hasCoalBag(BlastFurnaceState state)
    {
        return state.getInventory().has(COAL_BAG.items) || state.getBank().has(COAL_BAG.items);
    }
}

package com.toofifty.easyblastfurnace.utils;

import lombok.Getter;
import net.runelite.api.gameval.ItemID;
import net.runelite.api.gameval.VarbitID;

public enum BarsOres
{
	COAL(VarbitID.BLAST_FURNACE_COAL, ItemID.COAL, 2.267),
	COPPER_ORE(VarbitID.BLAST_FURNACE_COPPER_ORE, ItemID.COPPER_ORE, 2.267),
	TIN_ORE(VarbitID.BLAST_FURNACE_TIN_ORE, ItemID.TIN_ORE, 2.267),
	IRON_ORE(VarbitID.BLAST_FURNACE_IRON_ORE, ItemID.IRON_ORE, 2.267),
	MITHRIL_ORE(VarbitID.BLAST_FURNACE_MITHRIL_ORE, ItemID.MITHRIL_ORE, 1.814),
	ADAMANTITE_ORE(VarbitID.BLAST_FURNACE_ADAMANTITE_ORE, ItemID.ADAMANTITE_ORE, 2.721),
	RUNITE_ORE(VarbitID.BLAST_FURNACE_RUNITE_ORE, ItemID.RUNITE_ORE, 2.267),
	SILVER_ORE(VarbitID.BLAST_FURNACE_SILVER_ORE, ItemID.SILVER_ORE, 2.267),
	GOLD_ORE(VarbitID.BLAST_FURNACE_GOLD_ORE, ItemID.GOLD_ORE, 2.267),
	BRONZE_BAR(VarbitID.BLAST_FURNACE_BRONZE_BARS, ItemID.BRONZE_BAR, 1.814),
	IRON_BAR(VarbitID.BLAST_FURNACE_IRON_BARS, ItemID.IRON_BAR, 1.814),
	STEEL_BAR(VarbitID.BLAST_FURNACE_STEEL_BARS, ItemID.STEEL_BAR, 1.814),
	MITHRIL_BAR(VarbitID.BLAST_FURNACE_MITHRIL_BARS, ItemID.MITHRIL_BAR, 1.587),
	ADAMANTITE_BAR(VarbitID.BLAST_FURNACE_ADAMANTITE_BARS, ItemID.ADAMANTITE_BAR, 2.041),
	RUNITE_BAR(VarbitID.BLAST_FURNACE_RUNITE_BARS, ItemID.RUNITE_BAR, 1.814),
	SILVER_BAR(VarbitID.BLAST_FURNACE_SILVER_BARS, ItemID.SILVER_BAR, 1.814),
	GOLD_BAR(VarbitID.BLAST_FURNACE_GOLD_BARS, ItemID.GOLD_BAR, 1.814);

    @Getter
    private final int varbit;
    @Getter
    private final int itemID;
    @Getter
    private final double weight;

    BarsOres(int varbit, int itemID, double weight)
    {
        this.varbit = varbit;
        this.itemID = itemID;
        this.weight = weight;
    }

    public static int[] getAllIds()
    {
        int[] allItemIds = new int[BarsOres.values().length];
        for (int i = 0; i < BarsOres.values().length; i++) {
            allItemIds[i] = BarsOres.values()[i].itemID;
        }
        return allItemIds;
    }
}

package com.toofifty.easyblastfurnace;

import com.toofifty.easyblastfurnace.config.HighlightOverlayTextSetting;
import com.toofifty.easyblastfurnace.config.ItemOverlaySetting;
import com.toofifty.easyblastfurnace.config.PotionOverlaySetting;
import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("easy-blastfurnace")
public interface EasyBlastFurnaceConfig extends Config
{
    @ConfigSection(
        name = "Guidance overlays",
        description = "Configure instruction, item and object overlays",
        position = 0
    )
    String guidanceOverlays = "guidanceOverlays";

    @ConfigItem(
        position = 0,
        keyName = "showStepOverlay",
        name = "Show step overlay",
        description = "Show an instructional overlay of the next step",
        section = guidanceOverlays
    )
    default boolean showStepOverlay()
    {
        return true;
    }

    @ConfigItem(
        position = 1,
        keyName = "itemOverlayMode",
        name = "Item overlay mode",
        description = "Select how highlighted items appear",
        section = guidanceOverlays
    )
    default ItemOverlaySetting itemOverlayMode()
    {
        return ItemOverlaySetting.BOX;
    }

    @ConfigItem(
        position = 2,
        keyName = "itemOverlayTextMode",
        name = "Item overlay tooltip",
        description = "Select where to display tooltip text for items",
        section = guidanceOverlays
    )
    default HighlightOverlayTextSetting itemOverlayTextMode()
    {
        return HighlightOverlayTextSetting.BELOW;
    }

    @ConfigItem(
        position = 3,
        keyName = "itemOverlayColor",
        name = "Item overlay color",
        description = "Change the color of the item overlay",
        section = guidanceOverlays
    )
    default Color itemOverlayColor()
    {
        return Color.CYAN;
    }

    @ConfigItem(
        position = 4,
        keyName = "showObjectOverlays",
        name = "Show object overlays",
        description = "Enables clickbox overlays for the next object to click",
        section = guidanceOverlays
    )
    default boolean showObjectOverlays()
    {
        return true;
    }

    @ConfigItem(
        position = 5,
        keyName = "useDepositInventory",
        name = "Use deposit inventory button",
        description = "When enabled, the deposit inventory button will be highlighted instead of individual items in your inventory during bank deposits.",
        section = guidanceOverlays
    )
    default boolean useDepositInventory()
    {
        return false;
    }

    @ConfigItem(
        position = 6,
        keyName = "objectOverlayTextMode",
        name = "Object overlay tooltip",
        description = "Select where to display tooltip text for game objects",
        section = guidanceOverlays
    )
    default HighlightOverlayTextSetting objectOverlayTextMode()
    {
        return HighlightOverlayTextSetting.ABOVE;
    }

    @ConfigItem(
        position = 7,
        keyName = "objectOverlayColor",
        name = "Object overlay color",
        description = "Change the color of the object overlay",
        section = guidanceOverlays
    )
    default Color objectOverlayColor()
    {
        return Color.CYAN;
    }

	@ConfigItem(
		position = 8,
		keyName = "leaveBarInDispenser",
		name = "Toggle tick perfect methods",
		description = "Enable tick perfect methods. Does nothing for making steel bars.",
		section = guidanceOverlays
	)
	default boolean tickPerfectMethod() { return false; }

    @ConfigSection(
        name = "Coal bag overlay",
        description = "Configure coal bag overlay",
        position = 1
    )
    String coalBagOverlay = "coalBagOverlay";

    @ConfigItem(
        position = 0,
        keyName = "showCoalBagOverlay",
        name = "Show coal bag overlay",
        description = "Display the amount of coal inside your coal bag",
        section = coalBagOverlay
    )
    default boolean showCoalBagOverlay()
    {
        return true;
    }

    @ConfigItem(
        position = 1,
        keyName = "coalBagOverlayColor",
        name = "Coal bag overlay color",
        description = "Change the color of the coal bag count",
        section = coalBagOverlay
    )
    default Color coalBagOverlayColor()
    {
        return Color.CYAN;
    }

    @ConfigSection(
        name = "Stamina potions",
        description = "Configure stamina potions",
        position = 2
    )
    String staminaPotions = "staminaPotions";

    @ConfigItem(
        position = 0,
        keyName = "staminaPotionEnable",
        name = "Stamina potion management",
        description = "Allow the plugin to handle stamina potions.",
        section = staminaPotions
    )
    default boolean staminaPotionEnable()
    {
        return true;
    }

    @ConfigItem(
            position = 1,
            keyName = "potionMode",
            name = "Potion Highlight",
            description = "Select the potion to highlight",
            section = staminaPotions
    )
    default PotionOverlaySetting potionOverlayMode()
    {
        return PotionOverlaySetting.STAMINA;
    }

    @ConfigItem(
        position = 2,
        keyName = "requireStaminaThreshold",
        name = "Low energy threshold",
        description = "Run energy will be kept above this value. 0 - 50% recommended.",
        section = staminaPotions
    )
    @Units(Units.PERCENT)
    default int requireStaminaThreshold()
    {
        return 30;
    }

    @ConfigSection(
        name = "Statistics overlay",
        description = "Configure statistics overlay",
        position = 3
    )
    String statisticsOverlay = "statisticsOverlay";

    @ConfigItem(
        position = 0,
        keyName = "showStatisticsOverlay",
        name = "Show statistics",
        description = "Show an overlay with statistics such as bars todo/done, XP banked & stamina doses used.",
        section = statisticsOverlay
    )
    default boolean showStatisticsOverlay()
    {
        return true;
    }

    @ConfigItem(
        position = 1,
        keyName = "showBarsTodo",
        name = "Show bars todo",
        description = "Show amount of bars that can be made from ores in the bank.",
        section = statisticsOverlay
    )
    default boolean showBarsTodo()
    {
        return true;
    }

    @ConfigItem(
        position = 2,
        keyName = "showBarsMade",
        name = "Show bars made",
        description = "Show amount of bars made in the session.",
        section = statisticsOverlay
    )
    default boolean showBarsMade()
    {
        return true;
    }

    @ConfigItem(
        position = 3,
        keyName = "showBarsPerHour",
        name = "Show bars/hr",
        description = "Show amount of bars made per hour.",
        section = statisticsOverlay
    )
    default boolean showBarsPerHour()
    {
        return true;
    }

    @ConfigItem(
        position = 4,
        keyName = "showXpBanked",
        name = "Show XP banked",
        description = "Show amount of Smithing XP that can be gained from ores in the bank.",
        section = statisticsOverlay
    )
    default boolean showXpBanked()
    {
        return true;
    }

    @ConfigItem(
        position = 5,
        keyName = "showXpGained",
        name = "Show XP gained",
        description = "Show amount of Smithing XP gained in the session.",
        section = statisticsOverlay
    )
    default boolean showXpGained()
    {
        return true;
    }

    @ConfigItem(
        position = 6,
        keyName = "showStaminaDoses",
        name = "Show stamina doses",
        description = "Show amount of stamina potion doses consumed in the session.",
        section = statisticsOverlay
    )
    default boolean showStaminaDoses()
    {
        return true;
    }

    @ConfigSection(
        name = "Cleanup",
        description = "Configure auto-clearing plugin state",
        position = 4,
        closedByDefault = true
    )
    String cleanup = "cleanup";

    @ConfigItem(
        position = 0,
        keyName = "clearMethodOnLogout",
        name = "Clear method on logout",
        description = "Clear the current method on logout. If disabled, the method can still be cleared by (shift) right clicking the overlay.",
        section = cleanup
    )
    default boolean clearMethodOnLogout()
    {
        return true;
    }

    @ConfigItem(
        position = 1,
        keyName = "clearMethodOnExit",
        name = "Clear method on BF exit",
        description = "Clear the current method when exiting the Blast Furnace. If disabled, the method can still be cleared by (shift) right clicking the overlay.",
        section = cleanup
    )
    default boolean clearMethodOnExit()
    {
        return true;
    }

    @ConfigItem(
        position = 2,
        keyName = "clearStatisticsOnLogout",
        name = "Clear stats on logout",
        description = "Clear the statistics on logout. If disabled, the statistics can still be cleared by (shift) right clicking the overlay.",
        section = cleanup
    )
    default boolean clearStatisticsOnLogout()
    {
        return true;
    }

    @ConfigItem(
        position = 3,
        keyName = "clearStatisticsOnExit",
        name = "Clear stats on BF exit",
        description = "Clear the statistics when exiting the Blast Furnace. If disabled, the statistics can still be cleared by (shift) right clicking the overlay.",
        section = cleanup
    )
    default boolean clearStatisticsOnExit()
    {
        return true;
    }

    @ConfigItem(
        position = 5,
        keyName = "addCoalBuffer",
        name = "Add coal buffer",
        description = "Ensure there is always more coal than needed in the furnace. This avoids stalls while bars are created."
    )
    default boolean addCoalBuffer() { return false; }
}

package com.toofifty.easyblastfurnace.overlays;

import com.toofifty.easyblastfurnace.EasyBlastFurnaceConfig;
import com.toofifty.easyblastfurnace.config.HighlightOverlayTextSetting;
import com.toofifty.easyblastfurnace.config.ItemOverlaySetting;
import com.toofifty.easyblastfurnace.steps.MethodStep;
import com.toofifty.easyblastfurnace.steps.WidgetStep;
import com.toofifty.easyblastfurnace.utils.MethodHandler;
import net.runelite.api.Client;
import net.runelite.api.widgets.Widget;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.TextComponent;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.awt.*;

@Singleton
public class WidgetStepOverlay extends Overlay
{
    @Inject
    private Client client;

    @Inject
    private EasyBlastFurnaceConfig config;

    @Inject
    private MethodHandler methodHandler;

    WidgetStepOverlay()
    {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ALWAYS_ON_TOP);
        setPriority(100F);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (config.itemOverlayMode() == ItemOverlaySetting.NONE) return null;

        MethodStep[] steps = methodHandler.getSteps();

        if (steps == null) return null;

        for (MethodStep step : steps) {
            if (!(step instanceof WidgetStep)) continue;

            Widget widget = client.getWidget(((WidgetStep) step).getPackedWidgetId());
            if (widget == null) continue;


            Color color = config.itemOverlayColor();
            Rectangle bounds = widget.getBounds();

            graphics.setColor(color);
            graphics.draw(bounds);
            graphics.setColor(new Color(color.getRed(), color.getBlue(), color.getGreen(), 20));
            graphics.fill(bounds);

            if (config.itemOverlayTextMode() == HighlightOverlayTextSetting.NONE) continue;

            TextComponent textComponent = new TextComponent();
            textComponent.setColor(config.itemOverlayColor());
            textComponent.setText(step.getTooltip());

            FontMetrics fontMetrics = graphics.getFontMetrics();
            int textWidth = fontMetrics.stringWidth(step.getTooltip());
            int textHeight = fontMetrics.getHeight();

            if (config.itemOverlayTextMode() == HighlightOverlayTextSetting.BELOW) {
                textComponent.setPosition(new Point(
                        bounds.x + bounds.width / 2 - textWidth / 2,
                        bounds.y + bounds.height + textHeight
                ));
            } else {
                textComponent.setPosition(new Point(
                        bounds.x + bounds.width / 2 - textWidth / 2,
                        bounds.y - textHeight / 2
                ));
            }

            textComponent.render(graphics);
        }

        return null;
    }
}

package com.toofifty.easyblastfurnace.overlays;

import com.toofifty.easyblastfurnace.EasyBlastFurnaceConfig;
import com.toofifty.easyblastfurnace.EasyBlastFurnacePlugin;
import com.toofifty.easyblastfurnace.utils.RSNumberFormat;
import com.toofifty.easyblastfurnace.utils.SessionStatistics;
import net.runelite.api.MenuAction;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.awt.*;

@Singleton
public class StatisticsOverlay extends OverlayPanel
{
    public static final String CLEAR_ACTION = "Clear";

    @Inject
    private SessionStatistics statistics;

    @Inject
    private EasyBlastFurnaceConfig config;

    private final EasyBlastFurnacePlugin plugin;

    @Inject
    StatisticsOverlay(EasyBlastFurnacePlugin plugin)
    {
        super(plugin);
        this.plugin = plugin;

        getMenuEntries().add(new OverlayMenuEntry(MenuAction.RUNELITE_OVERLAY, CLEAR_ACTION, "Easy blast furnace statistics"));
        getMenuEntries().add(new OverlayMenuEntry(MenuAction.RUNELITE_OVERLAY_CONFIG, OverlayManager.OPTION_CONFIGURE, "Easy blast furnace statistics"));
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (!plugin.isEnabled()) return null;
        if (!config.showStatisticsOverlay()) return null;

        if (config.showBarsTodo()) {
            panelComponent.getChildren().add(LineComponent.builder()
                .left("Bars todo:")
                .right(RSNumberFormat.format(statistics.getTotalActionsBanked()))
                .build());
        }

        if (config.showBarsMade()) {
            panelComponent.getChildren().add(LineComponent.builder()
                .left("Bars made:")
                .right(RSNumberFormat.format(statistics.getTotalActionsDone()))
                .build());
        }

        if (config.showBarsPerHour()) {
            panelComponent.getChildren().add(LineComponent.builder()
                .left("Bars/hr:")
                .right(RSNumberFormat.format(statistics.getBarsPerHour()))
                .build());
        }

        if (config.showXpBanked()) {
            panelComponent.getChildren().add(LineComponent.builder()
                .left("XP banked:")
                .right(RSNumberFormat.format(statistics.getTotalXpBanked()))
                .build());
        }

        if (config.showXpGained()) {
            panelComponent.getChildren().add(LineComponent.builder()
                .left("XP gained:")
                .right(RSNumberFormat.format(statistics.getTotalXpGained()))
                .build());
        }

        if (config.showStaminaDoses()) {
            panelComponent.getChildren().add(LineComponent.builder()
                .left("Stamina doses:")
                .right(RSNumberFormat.format(statistics.getStaminaDoses()))
                .build());
        }

        return super.render(graphics);
    }
}

package com.toofifty.easyblastfurnace.overlays;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.toofifty.easyblastfurnace.EasyBlastFurnaceConfig;
import com.toofifty.easyblastfurnace.EasyBlastFurnacePlugin;
import com.toofifty.easyblastfurnace.state.BlastFurnaceState;
import net.runelite.api.gameval.ItemID;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.ui.overlay.WidgetItemOverlay;
import net.runelite.client.ui.overlay.components.TextComponent;

import java.awt.*;

@Singleton
public class CoalBagOverlay extends WidgetItemOverlay
{
    @Inject
    private EasyBlastFurnacePlugin plugin;

    @Inject
    private EasyBlastFurnaceConfig config;

    @Inject
    private BlastFurnaceState state;

    CoalBagOverlay()
    {
        showOnInventory();
    }

    @Override
    public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem widgetItem)
    {
        if (!plugin.isEnabled()) return;
        if (!(itemId == ItemID.COAL_BAG ||
			itemId == ItemID.COAL_BAG_DUMMY ||
			itemId == ItemID.COAL_BAG_OPEN))
            return;
        if (!config.showCoalBagOverlay()) return;

        Color color = config.coalBagOverlayColor();

        Rectangle bounds = widgetItem.getCanvasBounds();
        TextComponent textComponent = new TextComponent();

        textComponent.setPosition(new Point(bounds.x - 1, bounds.y + 8));
        if (state.getCoalBag().isFull()) {
            textComponent.setColor(Color.red);
        } else {
            textComponent.setColor(color);
        }
        textComponent.setText(Integer.toString(state.getCoalBag().getCoal()));

        textComponent.render(graphics);
    }
}

package com.toofifty.easyblastfurnace.overlays;

import com.google.inject.Inject;
import com.toofifty.easyblastfurnace.EasyBlastFurnaceConfig;
import com.toofifty.easyblastfurnace.config.HighlightOverlayTextSetting;
import com.toofifty.easyblastfurnace.steps.MethodStep;
import com.toofifty.easyblastfurnace.steps.TileStep;
import com.toofifty.easyblastfurnace.utils.MethodHandler;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.TextComponent;

import java.awt.*;

public class TileStepOverlay extends Overlay
{
    @Inject
    private Client client;

    @Inject
    private EasyBlastFurnaceConfig config;

    @Inject
    private MethodHandler methodHandler;

    TileStepOverlay()
    {
        setPosition(OverlayPosition.DYNAMIC);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (!config.showObjectOverlays()) return null;

        MethodStep[] steps = methodHandler.getSteps();

        if (steps == null) return null;

        for (MethodStep step : steps) {
            if (!(step instanceof TileStep)) continue;

            Color color = config.objectOverlayColor();

            LocalPoint localPoint = LocalPoint.fromWorld(client, ((TileStep) step).getWorldPoint());
            if (localPoint == null) continue;

            Polygon polygon = Perspective.getCanvasTilePoly(client, localPoint);

            graphics.setColor(color);
            graphics.draw(polygon);
            graphics.setColor(new Color(color.getRed(), color.getBlue(), color.getGreen(), 20));
            graphics.fill(polygon);

            if (config.objectOverlayTextMode() == HighlightOverlayTextSetting.NONE) continue;

            TextComponent textComponent = new TextComponent();
            Rectangle bounds = polygon.getBounds();

            FontMetrics fontMetrics = graphics.getFontMetrics();
            int textWidth = fontMetrics.stringWidth(step.getTooltip());
            int textHeight = fontMetrics.getHeight();

            if (config.objectOverlayTextMode() == HighlightOverlayTextSetting.ABOVE) {
                textComponent.setPosition(new Point(
                        bounds.x + bounds.width / 2 - textWidth / 2,
                        bounds.y - textHeight
                ));
            } else {
                textComponent.setPosition(new Point(
                        bounds.x + bounds.width / 2 - textWidth / 2,
                        bounds.y + bounds.height
                ));
            }

            textComponent.setColor(color);
            textComponent.setText(step.getTooltip());

            textComponent.render(graphics);
        }

        return null;
    }
}

package com.toofifty.easyblastfurnace.overlays;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.toofifty.easyblastfurnace.EasyBlastFurnaceConfig;
import com.toofifty.easyblastfurnace.config.HighlightOverlayTextSetting;
import com.toofifty.easyblastfurnace.config.ItemOverlaySetting;
import com.toofifty.easyblastfurnace.steps.BankItemStep;
import com.toofifty.easyblastfurnace.steps.MethodStep;
import com.toofifty.easyblastfurnace.utils.MethodHandler;
import net.runelite.api.Client;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.WidgetItemOverlay;
import net.runelite.client.ui.overlay.components.ImageComponent;
import net.runelite.client.ui.overlay.components.TextComponent;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.Arrays;

@Singleton
public class BankItemStepOverlay extends WidgetItemOverlay
{
    @Inject
    Client client;

    @Inject
    private ItemManager itemManager;

    @Inject
    private EasyBlastFurnaceConfig config;

    @Inject
    private MethodHandler methodHandler;

    BankItemStepOverlay()
    {
        showOnBank();
    }

    @Override
    public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem widgetItem)
    {
        if (config.itemOverlayMode() == ItemOverlaySetting.NONE) return;

        MethodStep[] steps = methodHandler.getSteps();
        if (steps == null) return;

        for (MethodStep step : steps) {
            if (!(step instanceof BankItemStep)) continue;
            if (Arrays.stream(((BankItemStep) step).getItemIds()).noneMatch(id -> id == itemId)) continue;

            Color color = config.itemOverlayColor();

            Rectangle bounds = widgetItem.getCanvasBounds();

            if (config.itemOverlayMode() == ItemOverlaySetting.OUTLINE) {
                BufferedImage outline = itemManager.getItemOutline(itemId, widgetItem.getQuantity(), color);
                ImageComponent imageComponent = new ImageComponent(outline);
                imageComponent.setPreferredLocation(new Point(bounds.x, bounds.y));
                imageComponent.render(graphics);
            } else {
                graphics.setColor(color);
                graphics.draw(bounds);
            }

            if (config.itemOverlayTextMode() == HighlightOverlayTextSetting.NONE) continue;

            TextComponent textComponent = new TextComponent();
            textComponent.setColor(color);
            textComponent.setText(step.getTooltip());

            FontMetrics fontMetrics = graphics.getFontMetrics();
            int textWidth = fontMetrics.stringWidth(step.getTooltip());
            int textHeight = fontMetrics.getHeight();

            if (config.itemOverlayTextMode() == HighlightOverlayTextSetting.BELOW) {
                textComponent.setPosition(new Point(
                        bounds.x + bounds.width / 2 - textWidth / 2,
                        bounds.y + bounds.height + textHeight
                ));
            } else {
                textComponent.setPosition(new Point(
                        bounds.x + bounds.width / 2 - textWidth / 2,
                        bounds.y - textHeight / 2
                ));
            }

            textComponent.render(graphics);
        }
    }
}

package com.toofifty.easyblastfurnace.overlays;


import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.toofifty.easyblastfurnace.EasyBlastFurnaceConfig;
import com.toofifty.easyblastfurnace.config.HighlightOverlayTextSetting;
import com.toofifty.easyblastfurnace.steps.MethodStep;
import com.toofifty.easyblastfurnace.steps.ObjectStep;
import com.toofifty.easyblastfurnace.utils.MethodHandler;
import com.toofifty.easyblastfurnace.utils.ObjectManager;
import net.runelite.api.GameObject;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.TextComponent;

import java.awt.*;

@Singleton
public class ObjectStepOverlay extends Overlay
{
    @Inject
    private ObjectManager objectManager;

    @Inject
    private EasyBlastFurnaceConfig config;

    @Inject
    private MethodHandler methodHandler;

    ObjectStepOverlay()
    {
        setPosition(OverlayPosition.DYNAMIC);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (!config.showObjectOverlays()) return null;

        MethodStep[] steps = methodHandler.getSteps();

        if (steps == null) return null;

        for (MethodStep step : steps) {
            if (!(step instanceof ObjectStep)) continue;

            Color color = config.objectOverlayColor();

            GameObject object = objectManager.get(((ObjectStep) step).getObjectId());
            Shape clickBox = object.getClickbox();

            if (clickBox == null) continue;

            graphics.setColor(color);
            graphics.draw(clickBox);
            graphics.setColor(new Color(color.getRed(), color.getBlue(), color.getGreen(), 20));
            graphics.fill(clickBox);

            if (config.objectOverlayTextMode() == HighlightOverlayTextSetting.NONE) continue;

            TextComponent textComponent = new TextComponent();
            Rectangle bounds = object.getClickbox().getBounds();

            FontMetrics fontMetrics = graphics.getFontMetrics();
            int textWidth = fontMetrics.stringWidth(step.getTooltip());
            int textHeight = fontMetrics.getHeight();

            if (config.objectOverlayTextMode() == HighlightOverlayTextSetting.ABOVE) {
                textComponent.setPosition(new Point(
                        bounds.x + bounds.width / 2 - textWidth / 2,
                        bounds.y - textHeight
                ));
            } else {
                textComponent.setPosition(new Point(
                        bounds.x + bounds.width / 2 - textWidth / 2,
                        bounds.y + bounds.height
                ));
            }

            textComponent.setColor(color);
            textComponent.setText(step.getTooltip());

            textComponent.render(graphics);
        }

        return null;
    }
}

package com.toofifty.easyblastfurnace.overlays;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.toofifty.easyblastfurnace.EasyBlastFurnaceConfig;
import com.toofifty.easyblastfurnace.EasyBlastFurnacePlugin;
import com.toofifty.easyblastfurnace.methods.Method;
import com.toofifty.easyblastfurnace.state.BlastFurnaceState;
import com.toofifty.easyblastfurnace.steps.MethodStep;
import com.toofifty.easyblastfurnace.utils.MethodHandler;
import net.runelite.api.MenuAction;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import java.awt.*;

@Singleton
public class InstructionOverlay extends OverlayPanel
{
    public static final String RESET_ACTION = "Reset";

    private static final Color TOOLTIP_COLOR = new Color(190, 190, 190);

    private final EasyBlastFurnacePlugin plugin;

    @Inject
    private EasyBlastFurnaceConfig config;

    @Inject
    private BlastFurnaceState state;

    @Inject
    private MethodHandler methodHandler;

    @Inject
    InstructionOverlay(EasyBlastFurnacePlugin plugin)
    {
        super(plugin);
        this.plugin = plugin;

        getMenuEntries().add(new OverlayMenuEntry(MenuAction.RUNELITE_OVERLAY, RESET_ACTION, "Easy blast furnace overlay"));
        getMenuEntries().add(new OverlayMenuEntry(MenuAction.RUNELITE_OVERLAY_CONFIG, OverlayManager.OPTION_CONFIGURE, "Easy blast furnace overlay"));
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (!plugin.isEnabled()) return null;
        if (!config.showStepOverlay()) return null;

        Method method = methodHandler.getMethod();
        MethodStep[] steps = methodHandler.getSteps();
        int index = 0;

        if (steps == null) return null;

        for (MethodStep step : steps) {
            String methodName = method != null ? method.getName() : "No method selected";
            String tooltip = state.getPlayer().isOnBlastFurnaceWorld()
                    ? (step != null
                    ? step.getTooltip()
                    : "Withdraw an ore from the bank to start. You can start a hybrid method by also withdrawing gold ore.")
                    : "You need to be on a Blast Furnace themed world to use this plugin.";

            if (index == 0) {
                panelComponent.getChildren().add(TitleComponent.builder().text("Easy Blast Furnace").build());
                panelComponent.getChildren().add(LineComponent.builder().left(methodName).leftColor(config.itemOverlayColor()).build());
            }

            index++;
            panelComponent.getChildren().add(LineComponent.builder().left(tooltip).leftColor(TOOLTIP_COLOR).build());
        }

        return super.render(graphics);
    }
}

package com.toofifty.easyblastfurnace.overlays;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.toofifty.easyblastfurnace.EasyBlastFurnaceConfig;
import com.toofifty.easyblastfurnace.config.HighlightOverlayTextSetting;
import com.toofifty.easyblastfurnace.config.ItemOverlaySetting;
import com.toofifty.easyblastfurnace.steps.ItemStep;
import com.toofifty.easyblastfurnace.steps.MethodStep;
import com.toofifty.easyblastfurnace.utils.MethodHandler;
import net.runelite.api.Client;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.WidgetItemOverlay;
import net.runelite.client.ui.overlay.components.ImageComponent;
import net.runelite.client.ui.overlay.components.TextComponent;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.Arrays;

@Singleton
public class ItemStepOverlay extends WidgetItemOverlay
{
    @Inject
    Client client;

    @Inject
    private ItemManager itemManager;

    @Inject
    private EasyBlastFurnaceConfig config;

    @Inject
    private MethodHandler methodHandler;

    public static WidgetItem currentWidgetItem;

    ItemStepOverlay()
    {
        showOnInventory();
    }

    @Override
    public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem widgetItem)
    {
        if (config.itemOverlayMode() == ItemOverlaySetting.NONE) return;

        MethodStep[] steps = methodHandler.getSteps();
        int finalItemId = itemId;

        if (steps == null) return;

        for (MethodStep step : steps) {
            if (!(step instanceof ItemStep)) continue;

            // This ensures we only highlight one item, i.e. the first ore in an inventory full of ores.
            if (currentWidgetItem != null) {
                widgetItem = currentWidgetItem;
                itemId = widgetItem.getWidget().getItemId();
            } else if (Arrays.stream(((ItemStep) step).getItemIds()).noneMatch(id -> id == finalItemId)) {
                continue;
            }

            currentWidgetItem = widgetItem;

            Color color = config.itemOverlayColor();

            Rectangle bounds = widgetItem.getCanvasBounds();

            if (config.itemOverlayMode() == ItemOverlaySetting.OUTLINE) {
                BufferedImage outline = itemManager.getItemOutline(itemId, widgetItem.getQuantity(), color);
                ImageComponent imageComponent = new ImageComponent(outline);
                imageComponent.setPreferredLocation(new Point(bounds.x, bounds.y));
                imageComponent.render(graphics);
            } else {
                graphics.setColor(color);
                graphics.draw(bounds);
            }

            if (config.itemOverlayTextMode() == HighlightOverlayTextSetting.NONE) continue;

            TextComponent textComponent = new TextComponent();
            textComponent.setColor(color);
            textComponent.setText(step.getTooltip());

            FontMetrics fontMetrics = graphics.getFontMetrics();
            int textWidth = fontMetrics.stringWidth(step.getTooltip());
            int textHeight = fontMetrics.getHeight();

            if (config.itemOverlayTextMode() == HighlightOverlayTextSetting.BELOW) {
                textComponent.setPosition(new Point(
                        bounds.x + bounds.width / 2 - textWidth / 2,
                        bounds.y + bounds.height + textHeight
                ));
            } else {
                textComponent.setPosition(new Point(
                        bounds.x + bounds.width / 2 - textWidth / 2,
                        bounds.y - textHeight / 2
                ));
            }

            textComponent.render(graphics);
        }
    }
}

package com.toofifty.easyblastfurnace.state;

import com.toofifty.easyblastfurnace.utils.Potion;
import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.api.ItemContainer;
import net.runelite.api.EnumComposition;
import net.runelite.api.EnumID;
import net.runelite.api.ScriptID;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.gameval.InventoryID;
import net.runelite.api.widgets.Widget;

import javax.inject.Inject;
import java.util.Arrays;
import java.util.Objects;

public class BankState
{
    @Inject
    private Client client;

	@Getter
	private Potion[] potions;

    private ItemContainer bank;

    private void load()
    {
        ItemContainer bank = client.getItemContainer(InventoryID.BANK);
        if (bank != null) {
            this.bank = bank;
        }
    }

    public boolean isOpen()
    {
        Widget bankContainer = client.getWidget(InterfaceID.Bankmain.UNIVERSE);
        return bankContainer != null && !bankContainer.isHidden();
    }

    public int getQuantity(int ...itemIds)
    {
        load();
        int total = 0;

        if (bank == null) return 0;

        for (int itemId : itemIds) {
            total += bank.count(itemId);
        }

        return total;
    }

    public boolean has(int ...itemIds) {
        load();
        if (bank == null) return false;
        for (int itemId : itemIds) {
            if (bank.count(itemId) > 0) return true;
        }
        return false;
    }

	public void updatePotionStorage() {
		EnumComposition potionStorePotions = client.getEnum(EnumID.POTIONSTORE_POTIONS);
		potions = new Potion[potionStorePotions.size()];
		int potionsIdx = 0;
		for (EnumComposition e : new EnumComposition[]{potionStorePotions})
		{
			for (int potionEnumId : e.getIntVals())
			{
				EnumComposition potionEnum = client.getEnum(potionEnumId);
				client.runScript(ScriptID.POTIONSTORE_DOSES, potionEnumId);
				int doses = client.getIntStack()[0];
				client.runScript(ScriptID.POTIONSTORE_WITHDRAW_DOSES, potionEnumId);
				int withdrawDoses = client.getIntStack()[0];

				if (doses > 0 && withdrawDoses > 0)
				{
					Potion p = new Potion();
					p.potionEnum = potionEnum;
					p.itemId = potionEnum.getIntValue(withdrawDoses);
					p.doses = doses;
					p.withdrawDoses = withdrawDoses;
					potions[potionsIdx] = p;
				}
				++potionsIdx;
			}
		}
	}

	public Potion potionStorageSearch(int itemId) {
		Potion potion = null;
		for (Potion potionStoragePotion : potions) {
			if (potionStoragePotion != null && itemId == potionStoragePotion.itemId) {
				potion = potionStoragePotion;
			}
		}

		return potion;
	}

	public Potion getPotionStoragePotion(int ...itemIds) {
		if (potions == null) return null;
		return Arrays.stream(itemIds)
				.mapToObj(this::potionStorageSearch) // call single‑id method
				.filter(Objects::nonNull)
				.findFirst()
				.orElse(null);
	}
}

package com.toofifty.easyblastfurnace.state;

import com.toofifty.easyblastfurnace.EasyBlastFurnaceConfig;
import com.toofifty.easyblastfurnace.utils.Equipment;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.gameval.ItemID;

import javax.inject.Inject;
import javax.inject.Singleton;

@Getter
@Singleton
@Slf4j
public class BlastFurnaceState
{
    @Inject
    private CoalBagState coalBag;

    @Inject
    private InventoryState inventory;

    @Inject
    private EquipmentState equipment;

    @Inject
    private PlayerState player;

    @Inject
    private FurnaceState furnace;

    @Inject
    private BankState bank;

    @Inject
    private EasyBlastFurnaceConfig config;

    private int lastPositiveChange = 0;
    public void update()
    {
        int invChange = inventory.getChange(ItemID.GOLD_ORE, ItemID.SILVER_ORE, ItemID.IRON_ORE, ItemID.MITHRIL_ORE, ItemID.ADAMANTITE_ORE, ItemID.RUNITE_ORE);

        if (invChange > 0) {
            lastPositiveChange = invChange;
        }

        if (player.isAtConveyorBelt() && invChange <= -1) { // invChange is always <= -1 when adding ores to the conveyor belt.
            furnace.setOresOnConveyorBelt(lastPositiveChange);
            lastPositiveChange = 0;
            player.hasOreOnConveyor(true);
        }

        if (equipment.equipped(Equipment.merge(Equipment.SMITHING_CAPE.items, Equipment.MAX_CAPE.items))) {
            coalBag.setMaxCoal(36);
        } else {
            coalBag.setMaxCoal(27);
        }

        inventory.update();
        furnace.update();
    }
}

package com.toofifty.easyblastfurnace.state;

import net.runelite.api.Client;
import net.runelite.api.gameval.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.gameval.ItemID;

import javax.inject.Inject;
import java.util.stream.IntStream;

public class InventoryState
{
    @Inject
    private Client client;

    private ItemContainer inventory;

    private Item[] previousInventory = new Item[]{};

    private void load()
    {
        ItemContainer inventory = client.getItemContainer(InventoryID.INV);
        if (inventory != null) {
            this.inventory = inventory;
        }
    }

	private int getPreviousQuantity(int itemId)
	{
		int total = 0;
		for (Item i : previousInventory)
			if (i != null && i.getId() == itemId) total += i.getQuantity();
		return total;
	}

    public void update()
    {
        load();

        if (inventory != null) {
            previousInventory = inventory.getItems().clone();
        }
    }

    public int getChange(int ...itemIds)
    {
        if (inventory == null) return 0;

        int totalChange = 0;

        for (int itemId : itemIds) {
            totalChange += getQuantity(itemId) - getPreviousQuantity(itemId);
        }

        return totalChange;
    }

    public int getQuantity(int ...itemIds)
    {
        load();
        int total = 0;

        for (int itemId : itemIds) {
            total += inventory.count(itemId);
        }

        return total;
    }

    public boolean has(int ...itemIds) {
        load();
        if (inventory == null) return false;
        for (int itemId : itemIds) {
            if (inventory.count(itemId) > 0) return true;
        }
        return false;
    }

    public int getFreeSlots()
    {
        load();

        int freeSlots = 28;
        for (Item item : inventory.getItems()) {
            if (item.getQuantity() > 0) {
                freeSlots--;
            }
        }
        return freeSlots;
    }


    public int getFreeSlotsIncludingOresAndBars()
    {
        load();

        int freeSlots = 28;
        int[] barsAndOres = new int[]{
            ItemID.IRON_BAR, ItemID.SILVER_BAR, ItemID.MITHRIL_BAR, ItemID.ADAMANTITE_BAR, ItemID.RUNITE_BAR, ItemID.GOLD_BAR, ItemID.STEEL_BAR,
            ItemID.IRON_ORE, ItemID.SILVER_ORE, ItemID.MITHRIL_ORE, ItemID.ADAMANTITE_ORE, ItemID.RUNITE_ORE, ItemID.GOLD_ORE, ItemID.COAL
        };

        for (Item item : inventory.getItems()) {
            if (IntStream.of(barsAndOres).noneMatch(id -> id == item.getId()) && item.getQuantity() > 0) {
                freeSlots--;
            }
        }
        return freeSlots;
    }

    public boolean hasFreeSlots()
    {
        return getFreeSlots() > 0;
    }
}

package com.toofifty.easyblastfurnace.state;

import lombok.Getter;
import lombok.Setter;
import net.runelite.api.gameval.ItemID;

import javax.inject.Inject;

public class CoalBagState
{
    private static final int MIN_COAL = 0;

    @Inject
    private InventoryState inventory;

    @Inject
    private BankState bank;

    @Getter
    private int coal;

    @Setter
	@Getter
    private int maxCoal = 27;

    public boolean recentlyEmptiedCoalBag = false;

	public void setCoal(int quantity)
    {
        coal = Math.min(Math.max(quantity, MIN_COAL), maxCoal);
    }

    public boolean isEmpty()
    {
        return coal == MIN_COAL;
    }

    public boolean isFull()
    {
        return coal == maxCoal;
    }

    public void empty()
    {
        if (bank.isOpen()) {
            setCoal(MIN_COAL);
            return;
        }
        recentlyEmptiedCoalBag = true;
        setCoal(coal - inventory.getFreeSlots());
    }

    public void fill()
    {
        if (bank.isOpen()) {
            setCoal(maxCoal);
            return;
        }
        setCoal(coal + inventory.getQuantity(ItemID.COAL));
    }
}

package com.toofifty.easyblastfurnace.state;

import com.toofifty.easyblastfurnace.EasyBlastFurnaceConfig;
import com.toofifty.easyblastfurnace.utils.Equipment;
import net.runelite.api.Client;
import net.runelite.api.gameval.InventoryID;
import net.runelite.api.ItemContainer;

import javax.inject.Inject;

public class EquipmentState
{
    @Inject
    private Client client;

	@Inject
	private EasyBlastFurnaceConfig config;

    private ItemContainer equipment;

    private void load()
    {
        ItemContainer equipment = client.getItemContainer(InventoryID.WORN);
        if (equipment != null) {
            this.equipment = equipment;
        }
    }

    public boolean equipped(int ...itemIds)
    {
        load();
        if (equipment == null) return false;

        for (int itemId : itemIds) {
            if (equipment.count(itemId) > 0) return true;
        }

        return false;
    }

    public boolean hasGoldsmithEffect()
    {
        return equipped(Equipment.merge(Equipment.GOLDSMITH.items, Equipment.MAX_CAPE.items, Equipment.SMITHING_CAPE.items));
    }

    public boolean hasIceGlovesEffect()
    {
        return equipped(Equipment.ICE_GLOVES.items);
    }
}

package com.toofifty.easyblastfurnace.state;

import com.toofifty.easyblastfurnace.EasyBlastFurnaceConfig;
import com.toofifty.easyblastfurnace.config.PotionOverlaySetting;
import com.toofifty.easyblastfurnace.utils.StaminaHelper;
import lombok.Getter;
import lombok.Setter;
import lombok.experimental.Accessors;
import net.runelite.api.Client;
import net.runelite.api.Player;
import net.runelite.api.coords.WorldPoint;

import javax.inject.Inject;
import java.util.Arrays;

public class PlayerState
{
    private static final WorldPoint LOAD_POSITION = new WorldPoint(1942, 4967, 0);
    private static final WorldPoint COLLECT_POSITION = new WorldPoint(1940, 4962, 0);
    private static final int[] BLAST_FURNACE_WORLDS = new int[]{
        352, 355, 356, 357, 358, 386, 387, 395, 424, 466, 494, 495, 496, 515, 516
    };

    @Accessors(fluent = true)
    @Getter
    @Setter
    private boolean hasOreOnConveyor = false;

    @Accessors(fluent = true)
    @Getter
    @Setter
    private boolean needsToIngest = false;

    @Inject
    private Client client;

    @Inject
    private EasyBlastFurnaceConfig config;

    @Inject
    private StaminaHelper staminaHelper;

    public boolean isAtConveyorBelt()
    {
        Player player = client.getLocalPlayer();
        assert player != null;

        WorldPoint location = player.getWorldLocation();
        return location.distanceTo(LOAD_POSITION) < 2;
    }

    public boolean isAtBarDispenser()
    {
        Player player = client.getLocalPlayer();
        assert player != null;

        WorldPoint location = player.getWorldLocation();
        return location.distanceTo(COLLECT_POSITION) < 2;
    }

    public boolean hasEnoughEnergy()
    {
        if (!config.staminaPotionEnable()) {
            return true;
        }
        // Handles Stamina
        if (config.potionOverlayMode() == PotionOverlaySetting.STAMINA) {
            return (client.getEnergy() / 100.0 - staminaHelper.getEnergyNeededForNextRun()) > config.requireStaminaThreshold();
        }

		// Handles requiring more than one consume step
        if ((client.getEnergy() / 100.0) <= config.requireStaminaThreshold() && !needsToIngest) {
            needsToIngest = true;
            return false;
        }

        // Checks If the player needs to drink more super energy potions
        if(config.potionOverlayMode() == PotionOverlaySetting.SUPER_ENERGY && needsToIngest) {
            if ((client.getEnergy() / 100.0) >= 80) {
                needsToIngest = false;
            } else {
                return false;
            }
        }

        // Checks If the player needs to drink more energy potions
        if(config.potionOverlayMode() == PotionOverlaySetting.ENERGY && needsToIngest) {
            if ((client.getEnergy() / 100.0) >= 90) {
                needsToIngest = false;
            } else {
                return false;
            }
        }

		// Checks If the player needs to eat a strange fruit
		if(config.potionOverlayMode() == PotionOverlaySetting.STRANGE_FRUIT && needsToIngest) {
			if ((client.getEnergy() / 100.0) >= 70) {
				needsToIngest = false;
			} else {
				return false;
			}
		}

        return true;
    }

    public boolean isOnBlastFurnaceWorld()
    {
        return Arrays.stream(BLAST_FURNACE_WORLDS).anyMatch(world -> world == client.getWorld());
    }
}

package com.toofifty.easyblastfurnace.state;

import com.toofifty.easyblastfurnace.EasyBlastFurnaceConfig;
import com.toofifty.easyblastfurnace.utils.BarsOres;

import lombok.Getter;
import lombok.Setter;
import net.runelite.api.Client;
import net.runelite.api.gameval.ItemID;

import javax.inject.Inject;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

public class FurnaceState
{
    @Inject
    private Client client;

    @Inject
    private EasyBlastFurnaceConfig config;

    private final Map<Integer, Integer> previousQuantity = new HashMap<>();

    @Getter
    @Setter
    public int oresOnConveyorBelt = 0;

    public void update()
    {
        for (BarsOres varbit : BarsOres.values()) {
            previousQuantity.put(varbit.getItemID(), getQuantity(varbit.getItemID()));
        }
    }

    public int getChange(int itemId)
    {
        return getQuantity(itemId) - previousQuantity.getOrDefault(itemId, 0);
    }


    public int getCoalOffset()
    {
        if (config.addCoalBuffer()) {
            return 0;
        }
        return 1;
    }

    public int getQuantity(int ...itemIds)
    {
        int total = 0;

        for (int itemId : itemIds) {
            Optional<BarsOres> varbit = Arrays.stream(BarsOres.values()).filter(e -> e.getItemID() == itemId).findFirst();
            assert varbit.isPresent();
            total += client.getVarbitValue(varbit.get().getVarbit());
        }

        return total;
    }

    public boolean has(int ...itemIds)
    {
        return getQuantity(itemIds) > 0;
    }

    public boolean isCoalRunNext(int coalPer)
    {
        int coalInFurnace = getQuantity(ItemID.COAL);
        return coalInFurnace < 27 * (coalPer - getCoalOffset());
    }
}

package com.toofifty.easyblastfurnace.config;

public enum ItemOverlaySetting
{
    NONE, OUTLINE, BOX
}

package com.toofifty.easyblastfurnace.config;

public enum HighlightOverlayTextSetting
{
    NONE, ABOVE, BELOW
}

package com.toofifty.easyblastfurnace.config;

public enum PotionOverlaySetting
{
    STAMINA, SUPER_ENERGY, ENERGY, STRANGE_FRUIT
}

package com.toofifty.easyblastfurnace;

import com.google.inject.Inject;
import com.google.inject.Provides;
import com.toofifty.easyblastfurnace.overlays.*;
import com.toofifty.easyblastfurnace.state.BlastFurnaceState;
import com.toofifty.easyblastfurnace.utils.MethodHandler;
import com.toofifty.easyblastfurnace.utils.ObjectManager;
import com.toofifty.easyblastfurnace.utils.SessionStatistics;
import com.toofifty.easyblastfurnace.utils.Strings;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.GameState;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.gameval.ItemID;
import net.runelite.api.gameval.InventoryID;
import net.runelite.api.gameval.ObjectID;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.OverlayMenuClicked;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
@PluginDescriptor(
    name = "Easy Blast Furnace",
    description = "Helps you train at the blast furnace more efficiently"
)
public class EasyBlastFurnacePlugin extends Plugin
{
	public static final int CONVEYOR_BELT = ObjectID.BLAST_FURNACE_CONVEYER_BELT_CLICKABLE;
	public static final int BAR_DISPENSER = ObjectID.BLAST_FURNACE_DISPENSER;
	public static final int BANK_CHEST = ObjectID.BLAST_BANK_CHEST;


    public static final WorldPoint PICKUP_POSITION = new WorldPoint(1940, 4962, 0);

    private static final Pattern COAL_FULL_MESSAGE = Pattern.compile(Strings.COAL_FULL);
    private static final Pattern COAL_EMPTY_MESSAGE = Pattern.compile(Strings.COAL_EMPTY);

    @Inject
    private Client client;

    @Inject
    private ClientThread clientThread;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private EasyBlastFurnaceConfig config;

    @Inject
    private BlastFurnaceState state;

    @Inject
    private ObjectManager objectManager;

    @Inject
    private InstructionOverlay instructionOverlay;

    @Inject
    private StatisticsOverlay statisticsOverlay;

    @Inject
    private ItemStepOverlay itemStepOverlay;

    @Inject
    private BankItemStepOverlay bankItemStepOverlay;

    @Inject
    private WidgetStepOverlay widgetStepOverlay;

    @Inject
    private ObjectStepOverlay objectStepOverlay;

    @Inject
    private TileStepOverlay tileStepOverlay;

    @Inject
    private CoalBagOverlay coalBagOverlay;

    @Inject
    private MethodHandler methodHandler;

    @Inject
    private SessionStatistics statistics;

    @Getter
    private boolean isEnabled = false;

    @Getter
    private int lastCheckTick = 0;
    private int oreOntoConveyorCount = 0;
	private boolean cachePotions = true;
	private Set<Integer> potionStoreVars;

    @Override
    protected void startUp()
    {
        overlayManager.add(instructionOverlay);
        overlayManager.add(statisticsOverlay);
        overlayManager.add(coalBagOverlay);
        overlayManager.add(itemStepOverlay);
        overlayManager.add(bankItemStepOverlay);
        overlayManager.add(widgetStepOverlay);
        overlayManager.add(objectStepOverlay);
        overlayManager.add(tileStepOverlay);
    }

    @Override
    protected void shutDown()
    {
        statistics.clear();
        methodHandler.clear();

        overlayManager.remove(instructionOverlay);
        overlayManager.remove(statisticsOverlay);
        overlayManager.remove(coalBagOverlay);
        overlayManager.remove(itemStepOverlay);
        overlayManager.remove(bankItemStepOverlay);
        overlayManager.remove(widgetStepOverlay);
        overlayManager.remove(objectStepOverlay);
        overlayManager.remove(tileStepOverlay);
    }

    @Subscribe
    public void onGameObjectSpawned(GameObjectSpawned event)
    {
        GameObject gameObject = event.getGameObject();

        switch (gameObject.getId()) {
            case BANK_CHEST:
                objectManager.add(gameObject);
                break;
            case CONVEYOR_BELT:
            case BAR_DISPENSER:
                objectManager.add(gameObject);
                isEnabled = true;
        }
    }

    @Subscribe
    public void onGameObjectDespawned(GameObjectDespawned event)
    {
        GameObject gameObject = event.getGameObject();

        switch (gameObject.getId()) {
            case CONVEYOR_BELT:
            case BAR_DISPENSER:
                if (config.clearMethodOnExit()) methodHandler.clear();
                if (config.clearStatisticsOnExit()) statistics.clear();
                isEnabled = false;
        }
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged event)
    {
        if (event.getGameState() != GameState.LOGGED_IN) {
            if (config.clearMethodOnLogout()) methodHandler.clear();
            if (config.clearStatisticsOnLogout()) statistics.clear();
            isEnabled = false;
        }
    }

    @Subscribe
    public void onItemContainerChanged(ItemContainerChanged event)
    {
        if (!isEnabled) return;

        if (event.getContainerId() == InventoryID.INV) {
            methodHandler.setMethodFromInventory();
            state.update();
        }

        // handle any inventory or bank changes
        methodHandler.next();
    }

    @Subscribe
    public void onVarbitChanged(VarbitChanged varbitChanged)
    {
        if (!isEnabled) return;

		if (potionStoreVars != null && potionStoreVars.contains(varbitChanged.getVarpId()))
		{
			cachePotions = true;
		}

        statistics.onFurnaceUpdate();
        state.update();

        // handle furnace ore/bar quantity changes
        methodHandler.next();
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event) {
        if (Objects.equals(event.getGroup(), "easy-blastfurnace") && Objects.equals(event.getKey(), "potionMode")) {
            clientThread.invokeLater(() -> methodHandler.next());
        }
    }

    @Subscribe
    public void onChatMessage(ChatMessage event)
    {
        if (!isEnabled) return;
        if (event.getType() != ChatMessageType.GAMEMESSAGE && event.getType() != ChatMessageType.SPAM) return;

        String message = event.getMessage();
        int maxConveyorCount = state.getCoalBag().getMaxCoal() == 27 ? 2 : 3;
        Matcher emptyMatcher = COAL_EMPTY_MESSAGE.matcher(message);
        Matcher filledMatcher = COAL_FULL_MESSAGE.matcher(message);

        if (emptyMatcher.matches()) {
            state.getCoalBag().empty();
        }

        if (filledMatcher.matches()) {
            int addedCoal = Integer.parseInt(filledMatcher.group(1));
            state.getCoalBag().setCoal(state.getCoalBag().getCoal() + addedCoal);
        }

        if (message.equals("All your ore goes onto the conveyor belt.")) {
            if (state.getInventory().has(ItemID.COAL)) {
                oreOntoConveyorCount++;
            } else {
                oreOntoConveyorCount = 1;
            }
        }

        // After emptying coal bag onto conveyor, ensure coal amount is 0.
        if (maxConveyorCount == oreOntoConveyorCount) {
            oreOntoConveyorCount = 0;
            if (state.getCoalBag().getCoal() > 1) state.getCoalBag().setCoal(0);
        }

        // handle coal bag changes
        methodHandler.next();
    }

    @Subscribe
    public void onMenuOptionClicked(MenuOptionClicked event)
    {
        if (!isEnabled) return;

        if (event.getMenuOption().equals(Strings.DRINK)) statistics.drinkStamina();

        // Because menu option events can happen multiple times per tick, this is needed to prevent duplicate coal bag empty events.
        final int currentTick = client.getTickCount();
        if (lastCheckTick == currentTick)
        {
            return;
        }
        lastCheckTick = currentTick;

        if (event.getMenuOption().equals(Strings.EMPTY)) state.getCoalBag().empty();

        // handle coal bag changes
        methodHandler.next();
    }

    @Subscribe
    public void onOverlayMenuClicked(OverlayMenuClicked event)
    {
        if (event.getOverlay() == instructionOverlay &&
            event.getEntry().getOption().equals(InstructionOverlay.RESET_ACTION)) {
            methodHandler.clear();
        }
        if (event.getOverlay() == statisticsOverlay &&
            event.getEntry().getOption().equals(StatisticsOverlay.CLEAR_ACTION)) {
            statistics.clear();
        }
    }

	@Subscribe
	public void onClientTick(ClientTick event)
	{
		if (state.getBank().isOpen() && cachePotions)
		{
			cachePotions = false;
			state.getBank().updatePotionStorage();

			Widget potionStoreItems = client.getWidget(InterfaceID.Bankmain.POTIONSTORE_ITEMS);
			if (potionStoreItems != null && potionStoreVars == null)
			{
				// cache varps to update potions when one is updated
				int[] trigger = potionStoreItems.getVarTransmitTrigger();
				potionStoreVars = new HashSet<>();
				Arrays.stream(trigger).forEach(potionStoreVars::add);
			}
		}
	}

    @Provides
    EasyBlastFurnaceConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(EasyBlastFurnaceConfig.class);
    }
}

package com.toofifty.easyblastfurnace.steps;

import lombok.Getter;

@Getter
public class BankItemStep extends MethodStep
{
    private final int[] itemIds;

    public BankItemStep(String tooltip, int ...itemIds)
    {
        super(tooltip);
        this.itemIds = itemIds;
    }
}

package com.toofifty.easyblastfurnace.steps;

import lombok.Getter;

@Getter
public class ItemStep extends MethodStep
{
    private final int[] itemIds;

    public ItemStep(String tooltip, int ...itemIds)
    {
        super(tooltip);
        this.itemIds = itemIds;
    }
}

package com.toofifty.easyblastfurnace.steps;

import lombok.Getter;
import net.runelite.api.coords.WorldPoint;

public class TileStep extends MethodStep
{
    @Getter
    private final WorldPoint worldPoint;

    public TileStep(String tooltip, WorldPoint worldPoint)
    {
        super(tooltip);
        this.worldPoint = worldPoint;
    }
}

package com.toofifty.easyblastfurnace.steps;

import lombok.Getter;

@Getter
public class ObjectStep extends MethodStep
{
    private final int objectId;

    public ObjectStep(String tooltip, int objectId)
    {
        super(tooltip);
        this.objectId = objectId;
    }
}

package com.toofifty.easyblastfurnace.steps;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public class MethodStep
{
    protected final String tooltip;
}

package com.toofifty.easyblastfurnace.steps;

import lombok.Getter;
import net.runelite.api.widgets.WidgetUtil;

public class WidgetStep extends MethodStep
{
	@Getter
	private final int packedWidgetId;

	public WidgetStep(String tooltip, int interfaceId, int childId)
	{
		super(tooltip);
		this.packedWidgetId = WidgetUtil.packComponentId(interfaceId, childId);
	}
}

package com.toofifty.easyblastfurnace.methods;

import com.toofifty.easyblastfurnace.steps.MethodStep;
import com.toofifty.easyblastfurnace.utils.CoalPer;
import com.toofifty.easyblastfurnace.utils.Strings;
import net.runelite.api.gameval.ItemID;

public class RuniteSilverHybridMethod extends SilverHybridMethod
{
    @Override
    protected MethodStep[] withdrawOre()
    {
        return withdrawRuniteOre;
    }

    @Override
    public int oreItem()
    {
        return ItemID.RUNITE_ORE;
    }

    @Override
    protected int barItem()
    {
        return ItemID.RUNITE_BAR;
    }

    @Override
    protected int coalPer()
    {
        return CoalPer.RUNITE.getValue();
    }

    @Override
    public String getName()
    {
        return Strings.RUNITE_SILVER_HYBRID;
    }
}

package com.toofifty.easyblastfurnace.methods;

import com.toofifty.easyblastfurnace.state.BlastFurnaceState;
import com.toofifty.easyblastfurnace.steps.BankItemStep;
import com.toofifty.easyblastfurnace.steps.ItemStep;
import com.toofifty.easyblastfurnace.steps.MethodStep;
import com.toofifty.easyblastfurnace.utils.Potion;
import com.toofifty.easyblastfurnace.utils.Strings;
import net.runelite.api.gameval.ItemID;

import java.util.Arrays;

public class DrinkPotionMethod extends Method
{

	// Stamina
	private final MethodStep[] drinkStaminaPotion = new MethodStep[] { new ItemStep(Strings.DRINK_STAMINA_POTION, ItemID._1DOSESTAMINA, ItemID._2DOSESTAMINA, ItemID._3DOSESTAMINA, ItemID._4DOSESTAMINA) };
	private final MethodStep[] getMoreStaminaPotions = new MethodStep[] { new ItemStep(Strings.GET_MORE_STAMINA_POTIONS, ItemID.COAL_BAG) };

	// Super Energy
	private final MethodStep[] drinkSuperEnergyPotion = new MethodStep[] { new ItemStep(Strings.DRINK_SUPER_ENERGY_POTION, ItemID._1DOSE2ENERGY, ItemID._2DOSE2ENERGY, ItemID._3DOSE2ENERGY, ItemID._4DOSE2ENERGY) };
	private final MethodStep[] getMoreSuperEnergyPotions = new MethodStep[] { new ItemStep(Strings.GET_MORE_SUPER_ENERGY_POTIONS, ItemID.COAL_BAG) };

	// Energy
	private final MethodStep[] drinkEnergyPotion = new MethodStep[] { new ItemStep(Strings.DRINK_ENERGY_POTION, ItemID._1DOSE1ENERGY, ItemID._2DOSE1ENERGY, ItemID._3DOSE1ENERGY, ItemID._4DOSE1ENERGY) };
	private final MethodStep[] getMoreEnergyPotions = new MethodStep[] { new ItemStep(Strings.GET_MORE_ENERGY_POTIONS, ItemID.COAL_BAG) };

	// Strange fruit
	private final MethodStep[] eatStrangeFruit = new MethodStep[] { new ItemStep(Strings.EAT_STRANGE_FRUIT, ItemID.MACRO_TRIFFIDFRUIT) };
	private final MethodStep[] getMoreStrangeFruit = new MethodStep[] { new ItemStep(Strings.GET_MORE_STRANGE_FRUIT, ItemID.COAL_BAG) };

    @Override
    public MethodStep[] next(BlastFurnaceState state)
    {
		switch(state.getConfig().potionOverlayMode()) {
			case SUPER_ENERGY: return getSuperEnergyStep(state);
			case ENERGY: return getEnergyStep(state);
			case STRANGE_FRUIT: return getStrangeFruitStep(state);
			default: return getStaminaStep(state);
		}
    }

	private MethodStep[] getStaminaStep(BlastFurnaceState state) {
		int[] itemIds = new int[]{ItemID._1DOSESTAMINA, ItemID._2DOSESTAMINA, ItemID._3DOSESTAMINA, ItemID._4DOSESTAMINA};
		return getMethodStep(state, itemIds, drinkStaminaPotion, Strings.WITHDRAW_STAMINA_POTION, depositStaminaPotions, getMoreStaminaPotions);
	}

	private MethodStep[] getEnergyStep(BlastFurnaceState state) {
		int[] itemIds = new int[]{ItemID._1DOSE1ENERGY, ItemID._2DOSE1ENERGY, ItemID._3DOSE1ENERGY, ItemID._4DOSE1ENERGY};
		return getMethodStep(state, itemIds, drinkEnergyPotion, Strings.WITHDRAW_ENERGY_POTION, depositEnergyPotions, getMoreEnergyPotions);
	}

	private MethodStep[] getSuperEnergyStep(BlastFurnaceState state) {
		int[] itemIds = new int[]{ItemID._1DOSE2ENERGY, ItemID._2DOSE2ENERGY, ItemID._3DOSE2ENERGY, ItemID._4DOSE2ENERGY};
		return getMethodStep(state, itemIds, drinkSuperEnergyPotion, Strings.WITHDRAW_SUPER_ENERGY_POTION, depositSuperEnergyPotions, getMoreSuperEnergyPotions);
	}

	private MethodStep[] getStrangeFruitStep(BlastFurnaceState state) {
		int[] itemIds = new int[]{ItemID.MACRO_TRIFFIDFRUIT};
		return getMethodStep(state, itemIds, eatStrangeFruit, Strings.WITHDRAW_STRANGE_FRUIT, depositStrangeFruit, getMoreStrangeFruit);
	}

	private MethodStep[] getMethodStep(BlastFurnaceState state, int[] itemIds, MethodStep[] consumeStep, String withdrawStep, MethodStep depositStep[], MethodStep[] getMoreStep)
	{
		boolean hasDosesInInventory = Arrays.stream(itemIds).anyMatch(id -> state.getInventory().has(id));

		if (state.getPlayer().hasEnoughEnergy() && (state.getInventory().has(ItemID.VIAL_EMPTY) || hasDosesInInventory)) {
			return state.getConfig().useDepositInventory() ? depositInventory : depositStep;
		}

		if (!state.getBank().isOpen() || state.getPlayer().hasEnoughEnergy()) return null;

		if (!hasDosesInInventory && !state.getInventory().hasFreeSlots()) {
			return state.getConfig().useDepositInventory() ? depositInventory : depositBarsAndOres;
		}

		Integer bankItemId = Arrays.stream(itemIds).filter(state.getBank()::has)
				.boxed()
				.findFirst()
				.orElse(null);
		Potion potionStoragePotion = state.getBank().getPotionStoragePotion(itemIds);

		if (hasDosesInInventory) {
			return consumeStep;
		}

		if (bankItemId != null) {
			return withdrawFromBank(withdrawStep, bankItemId);
		}

		if (potionStoragePotion != null) {
			return withdrawFromBank(withdrawStep + Strings.WITHDRAW_FROM_POTION_STORAGE, potionStoragePotion.itemId);
		}

		return getMoreStep;
	}

	private MethodStep[] withdrawFromBank(String stepText, int itemId)
	{
		return new MethodStep[] { new BankItemStep(stepText, itemId) };
	}

    @Override
    public String getName()
    {
        return Strings.DRINK_STAMINA;
    }
}

package com.toofifty.easyblastfurnace.methods;

import com.toofifty.easyblastfurnace.steps.MethodStep;
import com.toofifty.easyblastfurnace.utils.CoalPer;
import com.toofifty.easyblastfurnace.utils.Strings;
import net.runelite.api.gameval.ItemID;

public class MithrilSilverHybridMethod extends SilverHybridMethod
{
    @Override
    protected MethodStep[] withdrawOre()
    {
        return withdrawMithrilOre;
    }

    @Override
    public int oreItem()
    {
        return ItemID.MITHRIL_ORE;
    }

    @Override
    protected int barItem()
    {
        return ItemID.MITHRIL_BAR;
    }

    @Override
    protected int coalPer()
    {
        return CoalPer.MITHRIL.getValue();
    }

    @Override
    public String getName()
    {
        return Strings.MITHRIL_SILVER_HYBRID;
    }
}

package com.toofifty.easyblastfurnace.methods;

import com.toofifty.easyblastfurnace.steps.MethodStep;
import com.toofifty.easyblastfurnace.utils.CoalPer;
import com.toofifty.easyblastfurnace.utils.Strings;
import net.runelite.api.gameval.ItemID;

public class AdamantiteBarMethod extends MetalBarMethod
{
    @Override
    protected MethodStep[] withdrawOre()
    {
        return withdrawAdamantiteOre;
    }

    @Override
    public int oreItem()
    {
        return ItemID.ADAMANTITE_ORE;
    }

    @Override
    protected int barItem()
    {
        return ItemID.ADAMANTITE_BAR;
    }

    @Override
    protected int coalPer()
    {
        return CoalPer.ADAMANTITE.getValue();
    }

    @Override
    public String getName()
    {
        return Strings.ADAMANTITE;
    }
}

package com.toofifty.easyblastfurnace.methods;

import com.toofifty.easyblastfurnace.steps.MethodStep;
import com.toofifty.easyblastfurnace.utils.CoalPer;
import com.toofifty.easyblastfurnace.utils.Strings;
import net.runelite.api.gameval.ItemID;

public class AdamantiteSilverHybridMethod extends SilverHybridMethod
{
    @Override
    protected MethodStep[] withdrawOre()
    {
        return withdrawAdamantiteOre;
    }

    @Override
    public int oreItem()
    {
        return ItemID.ADAMANTITE_ORE;
    }

    @Override
    protected int barItem()
    {
        return ItemID.ADAMANTITE_BAR;
    }

    @Override
    protected int coalPer()
    {
        return CoalPer.ADAMANTITE.getValue();
    }

    @Override
    public String getName()
    {
        return Strings.ADAMANTITE_SILVER_HYBRID;
    }
}

package com.toofifty.easyblastfurnace.methods;

import com.toofifty.easyblastfurnace.steps.MethodStep;
import com.toofifty.easyblastfurnace.utils.CoalPer;
import com.toofifty.easyblastfurnace.utils.Strings;
import net.runelite.api.gameval.ItemID;

public class AdamantiteGoldHybridMethod extends GoldHybridMethod
{
    @Override
    protected MethodStep[] withdrawOre()
    {
        return withdrawAdamantiteOre;
    }

    @Override
    public int oreItem()
    {
        return ItemID.ADAMANTITE_ORE;
    }

    @Override
    protected int barItem()
    {
        return ItemID.ADAMANTITE_BAR;
    }

    @Override
    protected int coalPer()
    {
        return CoalPer.ADAMANTITE.getValue();
    }

    @Override
    public String getName()
    {
        return Strings.ADAMANTITE_GOLD_HYBRID;
    }
}

package com.toofifty.easyblastfurnace.methods;

import com.toofifty.easyblastfurnace.steps.MethodStep;
import com.toofifty.easyblastfurnace.utils.CoalPer;
import com.toofifty.easyblastfurnace.utils.Strings;
import net.runelite.api.gameval.ItemID;

public class RuniteGoldHybridMethod extends GoldHybridMethod
{
    @Override
    protected MethodStep[] withdrawOre()
    {
        return withdrawRuniteOre;
    }

    @Override
    public int oreItem()
    {
        return ItemID.RUNITE_ORE;
    }

    @Override
    protected int barItem()
    {
        return ItemID.RUNITE_BAR;
    }

    @Override
    protected int coalPer()
    {
        return CoalPer.RUNITE.getValue();
    }

    @Override
    public String getName()
    {
        return Strings.RUNITE_GOLD_HYBRID;
    }
}

package com.toofifty.easyblastfurnace.methods;

import com.toofifty.easyblastfurnace.state.BlastFurnaceState;
import com.toofifty.easyblastfurnace.steps.MethodStep;
import com.toofifty.easyblastfurnace.utils.Equipment;
import com.toofifty.easyblastfurnace.utils.Strings;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.gameval.ItemID;

@Slf4j
public class SilverBarMethod extends Method {

	private MethodStep[] checkPrerequisite(BlastFurnaceState state)
	{
		if (!state.getEquipment().equipped(Equipment.ICE_GLOVES.items) && state.getInventory().has(ItemID.SILVER_ORE)) {
			return state.getConfig().useDepositInventory() ? depositInventory : depositBarsAndOres;
		}
		if (!state.getInventory().has(Equipment.ICE_GLOVES.items) && !state.getEquipment().equipped(Equipment.ICE_GLOVES.items)) {
			return state.getBank().isOpen() ? withdrawIceOrSmithsGloves : openBank;
		}
		if (state.getInventory().has(Equipment.ICE_GLOVES.items) && !state.getEquipment().equipped(Equipment.ICE_GLOVES.items)) {
			return equipIceOrSmithsGloves;
		}
		return null;
	}

	private MethodStep[] clearInventoryAndBarDispenser(BlastFurnaceState state, boolean barDispenserFull, boolean furnaceHasOre, boolean tickPerfectMethod, boolean furnaceHasBar, boolean andOres)
	{
		boolean useDepositInventory = state.getConfig().useDepositInventory();
		if (barDispenserFull || (furnaceHasOre && furnaceHasBar) || (!tickPerfectMethod && furnaceHasBar)) {
			if (state.getInventory().has(ItemID.SILVER_ORE, ItemID.SILVER_BAR)) {
				return useDepositInventory ? depositInventory : depositBarsAndOres;
			}
			return collectBars;
		}
		int[] itemsToDeposit = andOres ? new int[]{ ItemID.SILVER_BAR, ItemID.SILVER_ORE } : new int[]{ ItemID.SILVER_BAR };
		if (state.getInventory().has(itemsToDeposit)) {
			return useDepositInventory ? depositInventory : depositBarsAndOres;
		}

		return null;
	}

	@Override
	public MethodStep[] next(BlastFurnaceState state)
	{
		MethodStep[] prerequisite = checkPrerequisite(state);
		if (prerequisite != null) return prerequisite;
		boolean oreOnConveyor = state.getPlayer().hasOreOnConveyor();
		boolean furnaceHasBar = state.getFurnace().has(ItemID.SILVER_BAR);
		boolean furnaceHasOre = state.getFurnace().has(ItemID.SILVER_ORE);
		boolean atConveyorBelt = state.getPlayer().isAtConveyorBelt();
		boolean tickPerfectMethod = state.getConfig().tickPerfectMethod();
		boolean barDispenserFull = state.getFurnace().getQuantity(ItemID.SILVER_BAR) >= 28;

		if (tickPerfectMethod && state.getInventory().getFreeSlotsIncludingOresAndBars() == 28) {
			MethodStep[] clearBarsAndOres = clearInventoryAndBarDispenser(state, barDispenserFull, furnaceHasOre, tickPerfectMethod, furnaceHasBar, true);
			if (clearBarsAndOres != null) return clearBarsAndOres;
			return state.getBank().isOpen() ? addDummyItemToInventory : openBank;
		}

		if (state.getBank().isOpen()) {
			MethodStep[] clearBarsAndOres = clearInventoryAndBarDispenser(state, barDispenserFull, furnaceHasOre, tickPerfectMethod, furnaceHasBar, false);
			if (clearBarsAndOres != null) return clearBarsAndOres;

			if (!state.getInventory().has(ItemID.SILVER_ORE)) {
				return withdrawSilverOre;
			}
		}

		if (state.getInventory().has(ItemID.SILVER_ORE)) {
			return putOntoConveyorBelt;
		}

		if (tickPerfectMethod && (oreOnConveyor || furnaceHasOre || barDispenserFull) && furnaceHasBar) {
			if (atConveyorBelt) {
				return goToDispenser;
			}
			return collectBars;
		}

		if (!tickPerfectMethod && (oreOnConveyor || furnaceHasOre || barDispenserFull)) {
			return waitForBars;
		}

		if (!tickPerfectMethod && furnaceHasBar) {
			if (!state.getEquipment().hasIceGlovesEffect()) {
				return equipIceOrSmithsGloves;
			}
			return collectBars;
		}

		return openBank;
	}

	@Override
	public String getName()
	{
		return Strings.SILVER;
	}
}

package com.toofifty.easyblastfurnace.methods;

import com.toofifty.easyblastfurnace.EasyBlastFurnacePlugin;
import com.toofifty.easyblastfurnace.state.BlastFurnaceState;
import com.toofifty.easyblastfurnace.steps.*;
import com.toofifty.easyblastfurnace.utils.BarsOres;
import com.toofifty.easyblastfurnace.utils.Equipment;
import com.toofifty.easyblastfurnace.utils.Strings;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.gameval.ItemID;

public abstract class Method
{
    // items
    protected final MethodStep[] fillCoalBag = new MethodStep[] { new ItemStep(Strings.FILL_COAL_BAG, ItemID.COAL_BAG, ItemID.COAL_BAG_OPEN) };
    protected final MethodStep[] refillCoalBag = new MethodStep[] { new ItemStep(Strings.REFILL_COAL_BAG, ItemID.COAL_BAG, ItemID.COAL_BAG_OPEN) };
    protected final MethodStep[] emptyCoalBag = new MethodStep[] { new ItemStep(Strings.EMPTY_COAL_BAG, ItemID.COAL_BAG, ItemID.COAL_BAG_OPEN) };
    protected final MethodStep[] withdrawCoalBag = new MethodStep[] { new BankItemStep(Strings.WITHDRAW_COAL_BAG, ItemID.COAL_BAG, ItemID.COAL_BAG_OPEN) };

    protected final MethodStep[] withdrawCoal = new MethodStep[] { new BankItemStep(Strings.WITHDRAW_COAL, ItemID.COAL) };
    protected final MethodStep[] withdrawGoldOre = new MethodStep[] { new BankItemStep(Strings.WITHDRAW_GOLD_ORE, ItemID.GOLD_ORE) };
    protected final MethodStep[] withdrawSilverOre = new MethodStep[] { new BankItemStep(Strings.WITHDRAW_SILVER_ORE, ItemID.SILVER_ORE) };
    protected final MethodStep[] withdrawIronOre = new MethodStep[] { new BankItemStep(Strings.WITHDRAW_IRON_ORE, ItemID.IRON_ORE) };
    protected final MethodStep[] withdrawMithrilOre = new MethodStep[] { new BankItemStep(Strings.WITHDRAW_MITHRIL_ORE, ItemID.MITHRIL_ORE) };
    protected final MethodStep[] withdrawAdamantiteOre = new MethodStep[] { new BankItemStep(Strings.WITHDRAW_ADAMANTITE_ORE, ItemID.ADAMANTITE_ORE) };
    protected final MethodStep[] withdrawRuniteOre = new MethodStep[] { new BankItemStep(Strings.WITHDRAW_RUNITE_ORE, ItemID.RUNITE_ORE) };

    protected final MethodStep[] withdrawIceOrSmithsGloves = new MethodStep[] { new BankItemStep(Strings.WITHDRAW_ICE_OR_SMITHS_GLOVES, Equipment.ICE_GLOVES.items) };
    protected final MethodStep[] equipIceOrSmithsGloves = new MethodStep[] { new ItemStep(Strings.EQUIP_ICE_OR_SMITHS_GLOVES, Equipment.ICE_GLOVES.items) };
    protected final MethodStep[] withdrawGoldsmithGauntlets = new MethodStep[] { new BankItemStep(Strings.WITHDRAW_GOLDSMITH_GAUNTLETS, Equipment.GOLDSMITH.items) };
    protected final MethodStep[] equipGoldsmithGauntlets = new MethodStep[] { new ItemStep(Strings.EQUIP_GOLDSMITH_GAUNTLETS, Equipment.GOLDSMITH.items) };
    protected final MethodStep[] withdrawSmithingCape = new MethodStep[] { new BankItemStep(Strings.WITHDRAW_SMITHING_CAPE, Equipment.SMITHING_CAPE.items) };
    protected final MethodStep[] withdrawMaxCape = new MethodStep[] { new BankItemStep(Strings.WITHDRAW_MAX_CAPE, Equipment.MAX_CAPE.items) };
    protected final MethodStep[] equipSmithingCape = new MethodStep[] { new ItemStep(Strings.EQUIP_SMITHING_CAPE, Equipment.SMITHING_CAPE.items) };
    protected final MethodStep[] equipMaxCape = new MethodStep[] { new ItemStep(Strings.EQUIP_MAX_CAPE, Equipment.MAX_CAPE.items) };
    protected final MethodStep[] addDummyItemToInventory = new MethodStep[] { new BankItemStep(Strings.ADD_DUMMY_ITEM, ItemID.HAMMER, ItemID.CHISEL, ItemID.SPADE, ItemID.RAKE, ItemID.BUCKET_EMPTY, ItemID.BUCKET_WATER), new ItemStep(Strings.ADD_ITEM_EXPLANATION) };
    protected final MethodStep[] depositBarsAndOres = new MethodStep[] { new ItemStep(Strings.DEPOSIT_BARS_AND_ORES, BarsOres.getAllIds()), new ObjectStep(Strings.OPEN_BANK, EasyBlastFurnacePlugin.BANK_CHEST) };
    protected final MethodStep[] depositStaminaPotions = new MethodStep[] { new ItemStep(Strings.DEPOSIT_STAMINA_POTIONS, ItemID.VIAL_EMPTY, ItemID._1DOSESTAMINA, ItemID._2DOSESTAMINA, ItemID._3DOSESTAMINA, ItemID._4DOSESTAMINA) };
    protected final MethodStep[] depositSuperEnergyPotions = new MethodStep[] { new ItemStep(Strings.DEPOSIT_SUPER_ENERGY_POTIONS, ItemID.VIAL_EMPTY, ItemID._1DOSE2ENERGY, ItemID._2DOSE2ENERGY, ItemID._3DOSE2ENERGY, ItemID._4DOSE2ENERGY) };
    protected final MethodStep[] depositEnergyPotions = new MethodStep[] { new ItemStep(Strings.DEPOSIT_ENERGY_POTIONS, ItemID.VIAL_EMPTY, ItemID._1DOSE1ENERGY, ItemID._2DOSE1ENERGY, ItemID._3DOSE1ENERGY, ItemID._4DOSE1ENERGY) };
	protected final MethodStep[] depositStrangeFruit = new MethodStep[] { new ItemStep(Strings.DEPOSIT_STRANGE_FRUIT, ItemID.MACRO_TRIFFIDFRUIT) };

    // objects
    protected final MethodStep[] depositInventory = new MethodStep[] { new WidgetStep(Strings.DEPOSIT_INVENTORY, InterfaceID.BANKMAIN, InterfaceID.Bankmain.DEPOSITINV), new ObjectStep(Strings.OPEN_BANK, EasyBlastFurnacePlugin.BANK_CHEST) };
    protected final MethodStep[] putOntoConveyorBelt = new MethodStep[] { new ObjectStep(Strings.PUT_ORE_ONTO_CONVEYOR_BELT, EasyBlastFurnacePlugin.CONVEYOR_BELT) };
    protected final MethodStep[] putOntoConveyorBeltAndEquipGoldsmithGauntlets = new MethodStep[] { new ItemStep(Strings.EQUIP_GOLDSMITH_GAUNTLETS, Equipment.GOLDSMITH.items), new ObjectStep(Strings.PUT_ORE_ONTO_CONVEYOR_BELT, EasyBlastFurnacePlugin.CONVEYOR_BELT) };
    protected final MethodStep[] openBank = new MethodStep[] { new ObjectStep(Strings.OPEN_BANK, EasyBlastFurnacePlugin.BANK_CHEST) };
    protected final MethodStep[] collectBars = new MethodStep[] { new ObjectStep(Strings.COLLECT_BARS, EasyBlastFurnacePlugin.BAR_DISPENSER), new ItemStep(Strings.EQUIP_ICE_OR_SMITHS_GLOVES, Equipment.ICE_GLOVES.items), new TileStep("", EasyBlastFurnacePlugin.PICKUP_POSITION) };
    protected final MethodStep[] waitForBars = new MethodStep[] { new TileStep(Strings.WAIT_FOR_BARS, EasyBlastFurnacePlugin.PICKUP_POSITION) };
    protected final MethodStep[] waitForGoldBars = new MethodStep[] { new TileStep(Strings.WAIT_FOR_BARS, EasyBlastFurnacePlugin.PICKUP_POSITION), new ItemStep(Strings.EQUIP_GOLDSMITH_GAUNTLETS, Equipment.GOLDSMITH.items) };
    protected final MethodStep[] goToDispenser = new MethodStep[] { new TileStep(Strings.GO_TO_DISPENSER, EasyBlastFurnacePlugin.PICKUP_POSITION) };
    protected final MethodStep[] goToDispenserAndEquipIceOrSmithsGloves = new MethodStep[] { new ItemStep(Strings.EQUIP_ICE_OR_SMITHS_GLOVES, Equipment.ICE_GLOVES.items), new TileStep(Strings.GO_TO_DISPENSER, EasyBlastFurnacePlugin.PICKUP_POSITION) };
    protected final MethodStep[] collectBarsAndEquipGoldsmithGauntlets = new MethodStep[] { new ItemStep(Strings.EQUIP_GOLDSMITH_GAUNTLETS_AFTER_COLLECT_BARS, Equipment.GOLDSMITH.items), new ObjectStep(Strings.COLLECT_BARS, EasyBlastFurnacePlugin.BAR_DISPENSER) };

    public abstract MethodStep[] next(BlastFurnaceState state);

    public abstract String getName();
}

package com.toofifty.easyblastfurnace.methods;

import com.toofifty.easyblastfurnace.state.BlastFurnaceState;
import com.toofifty.easyblastfurnace.steps.MethodStep;
import com.toofifty.easyblastfurnace.utils.Equipment;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.gameval.ItemID;

@Slf4j
abstract public class GoldHybridMethod extends MetalBarMethod
{
	protected boolean lastInvWasGold = false;
    private MethodStep[] checkPrerequisite(BlastFurnaceState state, boolean hasCoalBag, boolean hasGoldsmithEquipment)
    {
        if (hasCoalBag && !state.getInventory().has(ItemID.COAL_BAG, ItemID.COAL_BAG_OPEN)) {
			if (state.getInventory().has(oreItem(), ItemID.GOLD_ORE)) {
				return state.getConfig().useDepositInventory() ? depositInventory : depositBarsAndOres;
			}
            return state.getBank().isOpen() ? withdrawCoalBag : openBank;
        }

        if (!state.getInventory().has(Equipment.ICE_GLOVES.items) && !state.getEquipment().hasIceGlovesEffect()) {
            return state.getBank().isOpen() ? withdrawIceOrSmithsGloves : openBank;
        }

        if (state.getBank().has(Equipment.MAX_CAPE.items) &&
            !state.getInventory().has(Equipment.MAX_CAPE.items) &&
            !state.getEquipment().equipped(Equipment.MAX_CAPE.items)) {
            return state.getBank().isOpen() ? withdrawMaxCape : openBank;
        }

        if (state.getInventory().has(Equipment.MAX_CAPE.items) &&
            !state.getEquipment().equipped(Equipment.MAX_CAPE.items)) {
            return equipMaxCape;
        }

        if (state.getBank().has(Equipment.SMITHING_CAPE.items) &&
            !state.getInventory().has(Equipment.SMITHING_CAPE.items) &&
            !state.getEquipment().equipped(Equipment.merge(Equipment.SMITHING_CAPE.items, Equipment.MAX_CAPE.items))) {
            return state.getBank().isOpen() ? withdrawSmithingCape : openBank;
        }

        if (state.getInventory().has(Equipment.SMITHING_CAPE.items) &&
            !state.getEquipment().equipped(Equipment.merge(Equipment.SMITHING_CAPE.items, Equipment.MAX_CAPE.items))) {
            return equipSmithingCape;
        }

        if (hasGoldsmithEquipment && !state.getInventory().has(Equipment.GOLDSMITH.items) && !state.getEquipment().hasGoldsmithEffect()) {
            return state.getBank().isOpen() ? withdrawGoldsmithGauntlets : openBank;
        }

        if (hasGoldsmithEquipment && !state.getEquipment().hasIceGlovesEffect() && !state.getEquipment().hasGoldsmithEffect()) {
            return equipGoldsmithGauntlets;
        }

        return null;
    }

	private MethodStep[] clearInventoryAndBarDispenser(BlastFurnaceState state, boolean needToCollectBars, boolean useDepositInventory, boolean andOres)
	{
		if (needToCollectBars) {
			if (state.getInventory().has(oreItem(), ItemID.GOLD_ORE, barItem(), ItemID.GOLD_BAR)) {
				return useDepositInventory ? depositInventory : depositBarsAndOres;
			}
			lastInvWasGold = true;
			return collectBars;
		}

		int[] itemsToDeposit = andOres ? new int[]{ ItemID.GOLD_BAR, ItemID.GOLD_ORE, barItem(), oreItem() } : new int[]{ ItemID.GOLD_BAR, barItem() };
		if (state.getInventory().has(itemsToDeposit)) {
			return useDepositInventory ? depositInventory : depositBarsAndOres;
		}
		return null;
	}

    @Override
    public MethodStep[] next(BlastFurnaceState state)
    {
        boolean hasCoalBag = Equipment.hasCoalBag(state);
        boolean hasGoldsmithEquipment = Equipment.hasGoldsmithEquipment(state);
        MethodStep[] prerequisite = checkPrerequisite(state, hasCoalBag, hasGoldsmithEquipment);
        if (prerequisite != null) return prerequisite;
        boolean maxCoalIsThirtySix = state.getEquipment().equipped(Equipment.merge(Equipment.MAX_CAPE.items, Equipment.SMITHING_CAPE.items));
        int maxCoalInventory = state.getInventory().getFreeSlotsIncludingOresAndBars();
        boolean coalRun = state.getFurnace().getQuantity(ItemID.COAL) < maxCoalInventory * (coalPer() - state.getFurnace().getCoalOffset());
		boolean oreOnConveyor = state.getPlayer().hasOreOnConveyor();
		boolean furnaceHasGoldBar = state.getFurnace().has(ItemID.GOLD_BAR);
		boolean furnaceHasGoldOre = state.getFurnace().has(ItemID.GOLD_ORE);
		boolean furnaceHasMetalBar = state.getFurnace().has(barItem());
		boolean furnaceHasMetalOre = state.getFurnace().has(oreItem());
		boolean furnaceHasBar = state.getFurnace().has(barItem(), ItemID.GOLD_BAR);
        boolean coalBagFull = state.getCoalBag().isFull();
        boolean coalBagEmpty = state.getCoalBag().isEmpty();
		boolean atBarDispenser = state.getPlayer().isAtBarDispenser();
		boolean atConveyorBelt = state.getPlayer().isAtConveyorBelt();
        boolean tickPerfectMethod = state.getConfig().tickPerfectMethod();
		boolean useDepositInventory = state.getConfig().useDepositInventory();
		boolean fullOfMetalBarsAndOres = (state.getFurnace().getQuantity(oreItem(), barItem()) >= 28);
		boolean barDispenserFull = (furnaceHasMetalBar && furnaceHasGoldBar) || (furnaceHasGoldOre && furnaceHasGoldBar) || fullOfMetalBarsAndOres;
		boolean needToCollectBars = (barDispenserFull || (!tickPerfectMethod && furnaceHasBar));

		if (tickPerfectMethod && state.getInventory().getFreeSlotsIncludingOresAndBars() == 28) {
			MethodStep[] clearBarsAndOres = clearInventoryAndBarDispenser(state, needToCollectBars, useDepositInventory, true);
			if (clearBarsAndOres != null) return clearBarsAndOres;
			return state.getBank().isOpen() ? addDummyItemToInventory : openBank;
		}

		if (state.getBank().isOpen()) {
			MethodStep[] clearBarsAndOres = clearInventoryAndBarDispenser(state, needToCollectBars, useDepositInventory, false);
			if (clearBarsAndOres != null) return clearBarsAndOres;

			if ((hasCoalBag && state.getCoalBag().isFull()) && state.getInventory().has(oreItem(), ItemID.GOLD_ORE)) {
				return putOntoConveyorBelt;
			}

			if (state.getInventory().has(ItemID.GOLD_BAR, barItem())) {
				return useDepositInventory ? depositInventory : depositBarsAndOres;
			}

			if (hasCoalBag && !useDepositInventory && !coalBagFull) {
				return coalBagEmpty ? fillCoalBag : refillCoalBag;
			}

			if (hasGoldsmithEquipment && !useDepositInventory && coalRun && !state.getEquipment().hasGoldsmithEffect()) {
				return equipGoldsmithGauntlets;
			}

			if (coalRun && !state.getInventory().has(oreItem(), ItemID.GOLD_ORE)) {
				lastInvWasGold = true;
				return withdrawGoldOre;
			}

			if (!state.getInventory().has(oreItem(), ItemID.GOLD_ORE)) {
				lastInvWasGold = false;
				return withdrawOre();
			}

			if (hasCoalBag && useDepositInventory && !coalBagFull) {
				return coalBagEmpty ? fillCoalBag : refillCoalBag;
			}
		}

        if (hasGoldsmithEquipment && state.getInventory().has(ItemID.GOLD_ORE) && !state.getEquipment().hasGoldsmithEffect()) {
            return equipGoldsmithGauntlets;
        }

        if (!barDispenserFull && (state.getCoalBag().recentlyEmptiedCoalBag || state.getInventory().has(ItemID.COAL, ItemID.GOLD_ORE, oreItem()))) {
			state.getCoalBag().recentlyEmptiedCoalBag = false;
            return putOntoConveyorBelt;
        }

        if (hasCoalBag && !barDispenserFull && atConveyorBelt && (coalBagFull || (!coalBagEmpty && maxCoalIsThirtySix)) ) {
            return emptyCoalBag;
        }

		if (hasCoalBag && barDispenserFull && state.getInventory().has(ItemID.COAL) && !state.getCoalBag().isFull()) {
			return fillCoalBag;
		}

		if (needToCollectBars && state.getInventory().has(ItemID.COAL, oreItem(), barItem(), ItemID.GOLD_ORE)) {
			return useDepositInventory ? depositInventory : depositBarsAndOres;
		}

		// 1. Add gold and go to bank
		// 2. Add gold and pick up prev run's bars until enough coal
		// 3. Add metal ore and pick up gold

		// 4. Add gold and pick up gold until enough coal
		// 5. Add metal ore and pick up metal bars
		// 6. Repeat steps 4 & 5

		if (tickPerfectMethod && (
			(furnaceHasGoldBar && (oreOnConveyor || furnaceHasGoldOre || furnaceHasMetalOre)) ||
			(furnaceHasMetalBar && (oreOnConveyor || furnaceHasGoldOre || fullOfMetalBarsAndOres || furnaceHasGoldBar))
		)) {
			if (atConveyorBelt) {
				return goToDispenser;
			}

			if (furnaceHasGoldBar && (oreOnConveyor || furnaceHasGoldOre) && lastInvWasGold && state.getEquipment().hasIceGlovesEffect()) {
				return collectBarsAndEquipGoldsmithGauntlets;
			}

			if (oreOnConveyor && lastInvWasGold && furnaceHasMetalBar) {
				return waitForGoldBars;
			}

			if (!atBarDispenser) {
				return goToDispenserAndEquipIceOrSmithsGloves;
			}

			return collectBars;
		}

        if (!tickPerfectMethod && (oreOnConveyor || furnaceHasGoldOre || furnaceHasMetalOre)) {
            return waitForBars;
        }

		if (!tickPerfectMethod && furnaceHasBar) {
			if (!state.getEquipment().hasIceGlovesEffect()) {
				return equipIceOrSmithsGloves;
			}
			return collectBars;
		}

        return openBank;
    }
}

package com.toofifty.easyblastfurnace.methods;

import com.toofifty.easyblastfurnace.state.BlastFurnaceState;
import com.toofifty.easyblastfurnace.steps.MethodStep;
import com.toofifty.easyblastfurnace.utils.Equipment;
import com.toofifty.easyblastfurnace.utils.Strings;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.gameval.ItemID;

@Slf4j
public class GoldBarMethod extends Method
{
    private MethodStep[] checkPrerequisite(BlastFurnaceState state, boolean hasGoldsmithEquipment)
    {
        if (!state.getInventory().has(Equipment.ICE_GLOVES.items) && !state.getEquipment().hasIceGlovesEffect()) {
            return state.getBank().isOpen() ? withdrawIceOrSmithsGloves : openBank;
        }

        if (state.getBank().has(Equipment.MAX_CAPE.items) &&
            !state.getInventory().has(Equipment.MAX_CAPE.items) &&
            !state.getEquipment().equipped(Equipment.MAX_CAPE.items)) {
            return state.getBank().isOpen() ? withdrawMaxCape : openBank;
        }

        if (state.getInventory().has(Equipment.MAX_CAPE.items) &&
            !state.getEquipment().equipped(Equipment.MAX_CAPE.items)) {
            return equipMaxCape;
        }

        if (state.getBank().has(Equipment.SMITHING_CAPE.items) &&
            !state.getInventory().has(Equipment.SMITHING_CAPE.items) &&
            !state.getEquipment().equipped(Equipment.merge(Equipment.SMITHING_CAPE.items, Equipment.MAX_CAPE.items))) {
            return state.getBank().isOpen() ? withdrawSmithingCape : openBank;
        }

        if (state.getInventory().has(Equipment.SMITHING_CAPE.items) &&
            !state.getEquipment().equipped(Equipment.merge(Equipment.SMITHING_CAPE.items, Equipment.MAX_CAPE.items))) {
            return equipSmithingCape;
        }

        if (hasGoldsmithEquipment && !state.getInventory().has(Equipment.GOLDSMITH.items) && !state.getEquipment().hasGoldsmithEffect()) {
            return state.getBank().isOpen() ? withdrawGoldsmithGauntlets : openBank;
        }
        return null;
    }

	private MethodStep[] clearInventoryAndBarDispenser(BlastFurnaceState state, boolean barDispenserFull, boolean furnaceHasOre, boolean tickPerfectMethod, boolean furnaceHasBar, boolean andOres)
	{
		boolean useDepositInventory = state.getConfig().useDepositInventory();
		if (furnaceHasOre && furnaceHasBar || barDispenserFull || (!tickPerfectMethod && furnaceHasBar)) {
			if (state.getInventory().has(ItemID.GOLD_BAR, ItemID.GOLD_ORE)) {
				return useDepositInventory ? depositInventory : depositBarsAndOres;
			}
			return collectBars;
		}


		int[] itemsToDeposit = andOres ? new int[]{ ItemID.GOLD_BAR, ItemID.GOLD_ORE } : new int[]{ ItemID.GOLD_BAR };
		if (state.getInventory().has(itemsToDeposit)) {
			return state.getConfig().useDepositInventory() ? depositInventory : depositBarsAndOres;
		}
		return null;
	}

    @Override
    public MethodStep[] next(BlastFurnaceState state)
    {
        boolean hasGoldsmithEquipment = Equipment.hasGoldsmithEquipment(state);
        MethodStep[] prerequisite = checkPrerequisite(state, hasGoldsmithEquipment);
        if (prerequisite != null) return prerequisite;
        boolean oreOnConveyor = state.getPlayer().hasOreOnConveyor();
        boolean furnaceHasBar = state.getFurnace().has(ItemID.GOLD_BAR);
        boolean furnaceHasOre = state.getFurnace().has(ItemID.GOLD_ORE);
        boolean atBarDispenser = state.getPlayer().isAtBarDispenser();
        boolean atConveyorBelt = state.getPlayer().isAtConveyorBelt();
        boolean tickPerfectMethod = state.getConfig().tickPerfectMethod();
		boolean barDispenserFull = state.getFurnace().getQuantity(ItemID.GOLD_BAR) >= 28;

		if (tickPerfectMethod && state.getInventory().getFreeSlotsIncludingOresAndBars() == 28) {
			MethodStep[] clearBarsAndOres = clearInventoryAndBarDispenser(state, barDispenserFull, furnaceHasOre, tickPerfectMethod, furnaceHasBar, true);
			if (clearBarsAndOres != null) return clearBarsAndOres;
			return state.getBank().isOpen() ? addDummyItemToInventory : openBank;
		}

        if (state.getBank().isOpen()) {
			MethodStep[] clearBarsAndOres = clearInventoryAndBarDispenser(state, barDispenserFull, furnaceHasOre, tickPerfectMethod, furnaceHasBar, false);
			if (clearBarsAndOres != null) return clearBarsAndOres;

			if (hasGoldsmithEquipment && !state.getEquipment().hasGoldsmithEffect() && (!tickPerfectMethod || !state.getEquipment().hasIceGlovesEffect())) {
				return equipGoldsmithGauntlets;
			}

            if (!state.getInventory().has(ItemID.GOLD_ORE)) {
                return withdrawGoldOre;
            }
        }

        if (tickPerfectMethod && !barDispenserFull && state.getInventory().has(ItemID.GOLD_ORE)) {
            if (furnaceHasBar) {
                return putOntoConveyorBelt;
            } else {
                return hasGoldsmithEquipment ? putOntoConveyorBeltAndEquipGoldsmithGauntlets : putOntoConveyorBelt;
            }
        }

        if (tickPerfectMethod && (oreOnConveyor || furnaceHasOre) && furnaceHasBar) {
            if (atConveyorBelt) {
                return goToDispenser;
            }

            if (!atBarDispenser) {
                return goToDispenserAndEquipIceOrSmithsGloves;
            }

            return hasGoldsmithEquipment ? collectBarsAndEquipGoldsmithGauntlets : collectBars;
        }

        if (!tickPerfectMethod && !barDispenserFull && state.getInventory().has(ItemID.GOLD_ORE)) {
            if (hasGoldsmithEquipment && !state.getEquipment().hasGoldsmithEffect()) {
                return equipGoldsmithGauntlets;
            }
            return putOntoConveyorBelt;
        }

		if (!tickPerfectMethod && (oreOnConveyor || furnaceHasOre) && !state.getInventory().has(ItemID.GOLD_ORE)) {
			return waitForGoldBars;
		}

        if (!tickPerfectMethod && furnaceHasBar && !state.getInventory().has(ItemID.GOLD_ORE)) {
            if (!state.getEquipment().hasIceGlovesEffect()) {
                return equipIceOrSmithsGloves;
            }
            return collectBars;
        }

        return openBank;
    }

    @Override
    public String getName()
    {
        return Strings.GOLD;
    }
}

package com.toofifty.easyblastfurnace.methods;

import com.toofifty.easyblastfurnace.steps.MethodStep;
import com.toofifty.easyblastfurnace.utils.CoalPer;
import com.toofifty.easyblastfurnace.utils.Strings;
import net.runelite.api.gameval.ItemID;

public class MithrilGoldHybridMethod extends GoldHybridMethod
{
    @Override
    protected MethodStep[] withdrawOre()
    {
        return withdrawMithrilOre;
    }

    @Override
    public int oreItem()
    {
        return ItemID.MITHRIL_ORE;
    }

    @Override
    protected int barItem()
    {
        return ItemID.MITHRIL_BAR;
    }

    @Override
    protected int coalPer()
    {
        return CoalPer.MITHRIL.getValue();
    }

    @Override
    public String getName()
    {
        return Strings.MITHRIL_GOLD_HYBRID;
    }
}

package com.toofifty.easyblastfurnace.methods;

import com.toofifty.easyblastfurnace.steps.MethodStep;
import com.toofifty.easyblastfurnace.utils.CoalPer;
import com.toofifty.easyblastfurnace.utils.Strings;
import net.runelite.api.gameval.ItemID;

public class SteelBarMethod extends MetalBarMethod
{
    @Override
    protected MethodStep[] withdrawOre()
    {
        return withdrawIronOre;
    }

    @Override
    public int oreItem()
    {
        return ItemID.IRON_ORE;
    }

    @Override
    protected int barItem()
    {
        return ItemID.STEEL_BAR;
    }

    @Override
    protected int coalPer()
    {
        return CoalPer.IRON.getValue();
    }

    @Override
    public String getName()
    {
        return Strings.STEEL;
    }
}

package com.toofifty.easyblastfurnace.methods;

import com.toofifty.easyblastfurnace.steps.MethodStep;
import com.toofifty.easyblastfurnace.utils.CoalPer;
import com.toofifty.easyblastfurnace.utils.Strings;
import net.runelite.api.gameval.ItemID;

public class RuniteBarMethod extends MetalBarMethod
{
    @Override
    protected MethodStep[] withdrawOre()
    {
        return withdrawRuniteOre;
    }

    @Override
    public int oreItem()
    {
        return ItemID.RUNITE_ORE;
    }

    @Override
    protected int barItem()
    {
        return ItemID.RUNITE_BAR;
    }

    @Override
    protected int coalPer()
    {
        return CoalPer.RUNITE.getValue();
    }

    @Override
    public String getName()
    {
        return Strings.RUNITE;
    }
}

package com.toofifty.easyblastfurnace.methods;

import com.toofifty.easyblastfurnace.state.BlastFurnaceState;
import com.toofifty.easyblastfurnace.steps.MethodStep;
import com.toofifty.easyblastfurnace.utils.Equipment;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.gameval.ItemID;

@Slf4j
abstract public class SilverHybridMethod extends MetalBarMethod
{
	protected boolean lastInvWasSilver = false;
	private MethodStep[] checkPrerequisite(BlastFurnaceState state, boolean hasCoalBag)
	{
		if (hasCoalBag && !state.getInventory().has(ItemID.COAL_BAG, ItemID.COAL_BAG_OPEN)) {
			if (state.getInventory().has(oreItem(), ItemID.SILVER_ORE)) {
				return state.getConfig().useDepositInventory() ? depositInventory : depositBarsAndOres;
			}
			return state.getBank().isOpen() ? withdrawCoalBag : openBank;
		}

		if (!state.getInventory().has(Equipment.ICE_GLOVES.items) && !state.getEquipment().hasIceGlovesEffect()) {
			return state.getBank().isOpen() ? withdrawIceOrSmithsGloves : openBank;
		}

		if (!state.getEquipment().hasIceGlovesEffect()) {
			return equipIceOrSmithsGloves;
		}

		if (state.getBank().has(Equipment.MAX_CAPE.items) &&
				!state.getInventory().has(Equipment.MAX_CAPE.items) &&
				!state.getEquipment().equipped(Equipment.MAX_CAPE.items)) {
			return state.getBank().isOpen() ? withdrawMaxCape : openBank;
		}

		if (state.getInventory().has(Equipment.MAX_CAPE.items) &&
				!state.getEquipment().equipped(Equipment.MAX_CAPE.items)) {
			return equipMaxCape;
		}

		if (state.getBank().has(Equipment.SMITHING_CAPE.items) &&
				!state.getInventory().has(Equipment.SMITHING_CAPE.items) &&
				!state.getEquipment().equipped(Equipment.merge(Equipment.SMITHING_CAPE.items, Equipment.MAX_CAPE.items))) {
			return state.getBank().isOpen() ? withdrawSmithingCape : openBank;
		}

		if (state.getInventory().has(Equipment.SMITHING_CAPE.items) &&
				!state.getEquipment().equipped(Equipment.merge(Equipment.SMITHING_CAPE.items, Equipment.MAX_CAPE.items))) {
			return equipSmithingCape;
		}

		return null;
	}

	private MethodStep[] clearInventoryAndBarDispenser(BlastFurnaceState state, boolean needToCollectBars, boolean useDepositInventory, boolean andOres)
	{
		if (needToCollectBars) {
			if (state.getInventory().has(oreItem(), ItemID.SILVER_ORE, barItem(), ItemID.SILVER_BAR)) {
				return useDepositInventory ? depositInventory : depositBarsAndOres;
			}
			lastInvWasSilver = true;
			return collectBars;
		}
		int[] itemsToDeposit = andOres ? new int[]{ ItemID.SILVER_BAR, ItemID.SILVER_ORE, barItem(), oreItem() } : new int[]{ ItemID.SILVER_BAR, barItem() };
		if (state.getInventory().has(itemsToDeposit)) {
			return useDepositInventory ? depositInventory : depositBarsAndOres;
		}
		return null;
	}

	@Override
	public MethodStep[] next(BlastFurnaceState state)
	{
		boolean hasCoalBag = Equipment.hasCoalBag(state);
		MethodStep[] prerequisite = checkPrerequisite(state, hasCoalBag);
		if (prerequisite != null) return prerequisite;
		boolean maxCoalIsThirtySix = state.getEquipment().equipped(Equipment.merge(Equipment.MAX_CAPE.items, Equipment.SMITHING_CAPE.items));
		int maxCoalInventory = state.getInventory().getFreeSlotsIncludingOresAndBars();
		boolean coalRun = state.getFurnace().getQuantity(ItemID.COAL) < maxCoalInventory * (coalPer() - state.getFurnace().getCoalOffset());
		boolean oreOnConveyor = state.getPlayer().hasOreOnConveyor();
		boolean furnaceHasSilverBar = state.getFurnace().has(ItemID.SILVER_BAR);
		boolean furnaceHasSilverOre = state.getFurnace().has(ItemID.SILVER_ORE);
		boolean furnaceHasMetalBar = state.getFurnace().has(barItem());
		boolean furnaceHasMetalOre = state.getFurnace().has(oreItem());
		boolean furnaceHasBar = state.getFurnace().has(barItem(), ItemID.SILVER_BAR);
		boolean coalBagFull = state.getCoalBag().isFull();
		boolean coalBagEmpty = state.getCoalBag().isEmpty();
		boolean atBarDispenser = state.getPlayer().isAtBarDispenser();
		boolean atConveyorBelt = state.getPlayer().isAtConveyorBelt();
		boolean tickPerfectMethod = state.getConfig().tickPerfectMethod();
		boolean useDepositInventory = state.getConfig().useDepositInventory();
		boolean fullOfMetalBarsAndOres = (state.getFurnace().getQuantity(oreItem(), barItem()) >= 28);
		boolean barDispenserFull = (furnaceHasMetalBar && furnaceHasSilverBar) || (furnaceHasSilverOre && furnaceHasSilverBar) || fullOfMetalBarsAndOres;
		boolean needToCollectBars = (barDispenserFull || (!tickPerfectMethod && furnaceHasBar));

		if (tickPerfectMethod && state.getInventory().getFreeSlotsIncludingOresAndBars() == 28) {
			MethodStep[] clearBarsAndOres = clearInventoryAndBarDispenser(state, needToCollectBars, useDepositInventory, true);
			if (clearBarsAndOres != null) return clearBarsAndOres;
			return state.getBank().isOpen() ? addDummyItemToInventory : openBank;
		}

		if (state.getBank().isOpen()) {

			MethodStep[] clearBarsAndOres = clearInventoryAndBarDispenser(state, needToCollectBars, useDepositInventory, false);
			if (clearBarsAndOres != null) return clearBarsAndOres;

			if ((hasCoalBag && state.getCoalBag().isFull()) && state.getInventory().has(oreItem(), ItemID.SILVER_ORE)) {
				return putOntoConveyorBelt;
			}

			if (state.getInventory().has(ItemID.SILVER_BAR, barItem())) {
				return useDepositInventory ? depositInventory : depositBarsAndOres;
			}

			if (hasCoalBag && !useDepositInventory && !coalBagFull) {
				return coalBagEmpty ? fillCoalBag : refillCoalBag;
			}

			if (coalRun && !state.getInventory().has(oreItem(), ItemID.SILVER_ORE)) {
				lastInvWasSilver = true;
				return withdrawSilverOre;
			}

			if (!state.getInventory().has(oreItem(), ItemID.SILVER_ORE)) {
				lastInvWasSilver = false;
				return withdrawOre();
			}

			if (hasCoalBag && useDepositInventory && !coalBagFull) {
				return coalBagEmpty ? fillCoalBag : refillCoalBag;
			}
		}

		if (!barDispenserFull && (state.getCoalBag().recentlyEmptiedCoalBag || state.getInventory().has(ItemID.COAL, ItemID.SILVER_ORE, oreItem()))) {
			state.getCoalBag().recentlyEmptiedCoalBag = false;
			return putOntoConveyorBelt;
		}

		if (hasCoalBag && !barDispenserFull && atConveyorBelt && (coalBagFull || (!coalBagEmpty && maxCoalIsThirtySix)) ) {
			return emptyCoalBag;
		}

		if (hasCoalBag && barDispenserFull && state.getInventory().has(ItemID.COAL) && !state.getCoalBag().isFull()) {
			return fillCoalBag;
		}

		if (needToCollectBars && state.getInventory().has(ItemID.COAL, oreItem(), barItem(), ItemID.SILVER_ORE)) {
			return useDepositInventory ? depositInventory : depositBarsAndOres;
		}

		// 1. Add silver and go to bank
		// 2. Add silver and pick up prev run's bars until enough coal
		// 3. Add metal ore and pick up silver

		// 4. Add silver and pick up silver until enough coal
		// 5. Add metal ore and pick up metal bars
		// 6. Repeat steps 4 & 5

		if (tickPerfectMethod && (
			(furnaceHasSilverBar && (oreOnConveyor || furnaceHasSilverOre || furnaceHasMetalOre)) ||
			(furnaceHasMetalBar && (oreOnConveyor || furnaceHasSilverOre || fullOfMetalBarsAndOres || furnaceHasSilverBar))
		)) {
			if (atConveyorBelt) {
				return goToDispenser;
			}

			if (furnaceHasSilverBar && (oreOnConveyor || furnaceHasSilverOre) && lastInvWasSilver && state.getEquipment().hasIceGlovesEffect()) {
				return collectBars;
			}

			if (oreOnConveyor && lastInvWasSilver && furnaceHasMetalBar) {
				return waitForBars;
			}

			if (!atBarDispenser) {
				return goToDispenserAndEquipIceOrSmithsGloves;
			}

			return collectBars;
		}

		if (!tickPerfectMethod && (oreOnConveyor || furnaceHasSilverOre || furnaceHasMetalOre)) {
			return waitForBars;
		}

		if (!tickPerfectMethod && furnaceHasBar) {
			if (!state.getEquipment().hasIceGlovesEffect()) {
				return equipIceOrSmithsGloves;
			}
			return collectBars;
		}

		return openBank;
	}
}

package com.toofifty.easyblastfurnace.methods;

import com.toofifty.easyblastfurnace.state.BlastFurnaceState;
import com.toofifty.easyblastfurnace.steps.MethodStep;
import com.toofifty.easyblastfurnace.utils.Equipment;
import com.toofifty.easyblastfurnace.utils.Strings;
import net.runelite.api.gameval.ItemID;

import java.util.Objects;

/**
 * Represents a basic method for all regular bars (using coal)
 * - Fill coal until threshold
 * - Do trips with ores
 * - Repeat
 */
abstract public class MetalBarMethod extends Method
{
    public abstract int oreItem();

    protected abstract MethodStep[] withdrawOre();

    protected abstract int barItem();

    protected abstract int coalPer();

    private MethodStep[] checkPrerequisite(BlastFurnaceState state, boolean hasCoalBag)
    {
        if (hasCoalBag && !state.getInventory().has(ItemID.COAL_BAG, ItemID.COAL_BAG_OPEN)) {
            if (state.getInventory().has(oreItem())) {
                return state.getConfig().useDepositInventory() ? depositInventory : depositBarsAndOres;
            }
            return state.getBank().isOpen() ? withdrawCoalBag : openBank;
        }

        if (!state.getInventory().has(Equipment.ICE_GLOVES.items) && !state.getEquipment().equipped(Equipment.ICE_GLOVES.items)) {
            return state.getBank().isOpen() ? withdrawIceOrSmithsGloves : openBank;
        }

        if (state.getInventory().has(Equipment.ICE_GLOVES.items) && !state.getEquipment().equipped(Equipment.ICE_GLOVES.items)) {
            return equipIceOrSmithsGloves;
        }

		if (state.getBank().has(Equipment.MAX_CAPE.items) &&
				!state.getInventory().has(Equipment.MAX_CAPE.items) &&
				!state.getEquipment().equipped(Equipment.MAX_CAPE.items)) {
			return state.getBank().isOpen() ? withdrawMaxCape : openBank;
		}

		if (state.getInventory().has(Equipment.MAX_CAPE.items) &&
				!state.getEquipment().equipped(Equipment.MAX_CAPE.items)) {
			return equipMaxCape;
		}

		if (state.getBank().has(Equipment.SMITHING_CAPE.items) &&
				!state.getInventory().has(Equipment.SMITHING_CAPE.items) &&
				!state.getEquipment().equipped(Equipment.merge(Equipment.SMITHING_CAPE.items, Equipment.MAX_CAPE.items))) {
			return state.getBank().isOpen() ? withdrawSmithingCape : openBank;
		}

		if (state.getInventory().has(Equipment.SMITHING_CAPE.items) &&
				!state.getEquipment().equipped(Equipment.merge(Equipment.SMITHING_CAPE.items, Equipment.MAX_CAPE.items))) {
			return equipSmithingCape;
		}
        return null;
    }

	private MethodStep[] clearInventoryAndBarDispenser(BlastFurnaceState state, boolean barDispenserFull, boolean coalRun, boolean andOres)
	{
		if (state.getInventory().has(barItem()) || barDispenserFull || ((andOres || coalRun) && state.getInventory().has(oreItem()))) {
			return state.getConfig().useDepositInventory() ? depositInventory : depositBarsAndOres;
		}

		if (state.getFurnace().has(oreItem()) && state.getFurnace().has(barItem())) {
			if (state.getInventory().has(barItem(), oreItem())) {
				return state.getConfig().useDepositInventory() ? depositInventory : depositBarsAndOres;
			}
			return collectBars;
		}
		return null;
	}

    @Override
    public MethodStep[] next(BlastFurnaceState state)
    {
        boolean hasCoalBag = Equipment.hasCoalBag(state);
        MethodStep[] prerequisite = checkPrerequisite(state, hasCoalBag);
        if (prerequisite != null) return prerequisite;
        boolean coalRun = state.getFurnace().getQuantity(ItemID.COAL) < 27 * (coalPer() - state.getFurnace().getCoalOffset());
		boolean maxCoalIsThirtySix = state.getEquipment().equipped(Equipment.merge(Equipment.MAX_CAPE.items, Equipment.SMITHING_CAPE.items));
		boolean coalBagFull = state.getCoalBag().isFull();
		boolean coalBagEmpty = state.getCoalBag().isEmpty();
        boolean oreOnConveyor = state.getPlayer().hasOreOnConveyor();
        boolean furnaceHasBar = state.getFurnace().has(barItem());
        boolean furnaceHasOre = state.getFurnace().has(oreItem());
        boolean tickPerfectMethod = !Objects.equals(getName(), Strings.STEEL) && state.getConfig().tickPerfectMethod();
        boolean barDispenserFull = state.getFurnace().getQuantity(barItem(), oreItem()) >= 28;
        boolean barDispenserAboutToMakeBars = !coalRun && furnaceHasOre;

		if (tickPerfectMethod && state.getInventory().getFreeSlotsIncludingOresAndBars() == 28) {
			MethodStep[] clearBarsAndOres = clearInventoryAndBarDispenser(state, barDispenserFull, coalRun, true);
			if (clearBarsAndOres != null) return clearBarsAndOres;
			return state.getBank().isOpen() ? addDummyItemToInventory : openBank;
		}

        if (state.getBank().isOpen()) {
			MethodStep[] clearBarsAndOres = clearInventoryAndBarDispenser(state, barDispenserFull, coalRun, false);
			if (clearBarsAndOres != null) return clearBarsAndOres;

            if (!state.getConfig().useDepositInventory() && hasCoalBag && coalBagEmpty) {
                return fillCoalBag;
            }

            if (coalRun && !state.getInventory().has(ItemID.COAL)) {
                return withdrawCoal;
            }

            if (!coalRun && !state.getInventory().has(oreItem())) {
                return withdrawOre();
            }

			if (state.getConfig().useDepositInventory() && hasCoalBag && coalBagEmpty) {
				return fillCoalBag;
			}
        }

        if (!barDispenserFull && (state.getCoalBag().recentlyEmptiedCoalBag || state.getInventory().has(ItemID.COAL, oreItem()))) {
            state.getCoalBag().recentlyEmptiedCoalBag = false;
            return putOntoConveyorBelt;
        }

		if (hasCoalBag && !barDispenserFull && state.getPlayer().isAtConveyorBelt() && (coalBagFull || (!coalBagEmpty && maxCoalIsThirtySix)) ) {
			return emptyCoalBag;
		}

        if (hasCoalBag && barDispenserFull && state.getInventory().has(ItemID.COAL) && !coalBagFull) {
            return fillCoalBag;
        }

        if (barDispenserFull && state.getInventory().has(ItemID.COAL, oreItem(), barItem())) {
            return state.getConfig().useDepositInventory() ? depositInventory : depositBarsAndOres;
        }

        if (!tickPerfectMethod && (barDispenserAboutToMakeBars || oreOnConveyor)) {
            return waitForBars;
        }

		if (!state.getInventory().has(barItem()) && ((furnaceHasOre && furnaceHasBar) || (furnaceHasBar && (!tickPerfectMethod || oreOnConveyor)))) {
			return collectBars;
		}

        return openBank;
    }
}

package com.toofifty.easyblastfurnace.methods;

import com.toofifty.easyblastfurnace.steps.MethodStep;
import com.toofifty.easyblastfurnace.utils.CoalPer;
import com.toofifty.easyblastfurnace.utils.Strings;
import net.runelite.api.gameval.ItemID;

public class MithrilBarMethod extends MetalBarMethod
{
    @Override
    protected MethodStep[] withdrawOre()
    {
        return withdrawMithrilOre;
    }

    @Override
    public int oreItem()
    {
        return ItemID.MITHRIL_ORE;
    }

    @Override
    protected int barItem()
    {
        return ItemID.MITHRIL_BAR;
    }

    @Override
    protected int coalPer()
    {
        return CoalPer.MITHRIL.getValue();
    }

    @Override
    public String getName()
    {
        return Strings.MITHRIL;
    }
}

package com.toofifty.easyblastfurnace;

import com.google.inject.Guice;
import com.google.inject.testing.fieldbinder.BoundFieldModule;
import com.toofifty.easyblastfurnace.config.PotionOverlaySetting;
import com.toofifty.easyblastfurnace.overlays.InstructionOverlay;
import com.toofifty.easyblastfurnace.state.BlastFurnaceState;
import com.toofifty.easyblastfurnace.steps.MethodStep;
import com.toofifty.easyblastfurnace.utils.*;
import net.runelite.api.*;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.events.VarbitChanged;
import net.runelite.api.gameval.*;
import net.runelite.api.gameval.InventoryID;
import net.runelite.api.gameval.ItemID;
import net.runelite.api.gameval.ObjectID;
import net.runelite.api.events.*;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.config.RuneLiteConfig;
import net.runelite.client.events.OverlayMenuClicked;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import com.google.inject.testing.fieldbinder.Bind;

import javax.inject.Inject;

import static net.runelite.api.ChatMessageType.GAMEMESSAGE;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class EasyBlastFurnacePluginTest {

	@Inject
    private BlastFurnaceState state;

    @Inject
    EasyBlastFurnacePlugin easyBlastFurnacePlugin;

    @Inject
    private InstructionOverlay instructionOverlay;

    @Inject
    private MethodHandler methodHandler;

    @Inject
    private StaminaHelper staminaHelper;

    @Mock
    @Bind
    private Client client;

    @Mock
    @Bind
    private GameObject patchObject;

    @Mock
    @Bind
    private RuneLiteConfig runeLiteConfig;

    @Mock
    @Bind
    private ConfigManager configManager;

    @Mock
    @Bind
    private ItemManager itemManager;

    @Mock
    @Bind
    private EasyBlastFurnaceConfig easyBlastFurnaceConfig;

    private final ItemContainer bankContainer = mock(ItemContainer.class);
    private final ItemContainer inventoryContainer = mock(ItemContainer.class);
    private final ItemContainer equipmentContainer = mock(ItemContainer.class);
    private final Player localPlayer = mock(Player.class);
    private final Widget bankWidget = mock(Widget.class);
    private final VarbitChanged blastFurnaceChange = new VarbitChanged();
	private final ItemContainerChanged event = new ItemContainerChanged(InventoryID.INV, inventoryContainer);

    private final WorldPoint atConveyorBelt = new WorldPoint(1942, 4967, 0);
    private final WorldPoint notAtConveyorBelt = new WorldPoint(1949, 4967, 0);
    private final WorldPoint atBarDispenser = new WorldPoint(1940, 4963, 0);
    private final String coalBagEmptyMessage = "The coal bag is now empty.";
    private final String coalBagFillMessage = "The coal bag contains 27 pieces of coal.";

    private int tickCount = 0;

    @Before
    public void before()
    {
        Guice.createInjector(BoundFieldModule.of(this)).injectMembers(this);

        GameObjectSpawned gameObjectSpawned = new GameObjectSpawned();
        gameObjectSpawned.setGameObject(patchObject);
        when(client.getWorld()).thenReturn(358);
        when(patchObject.getId()).thenReturn(ObjectID.BLAST_BANK_CHEST);
        easyBlastFurnacePlugin.onGameObjectSpawned(gameObjectSpawned);
        gameObjectSpawned.setGameObject(patchObject);
        when(patchObject.getId()).thenReturn(ObjectID.BLAST_FURNACE_CONVEYER_BELT_CLICKABLE);
        easyBlastFurnacePlugin.onGameObjectSpawned(gameObjectSpawned);
        gameObjectSpawned.setGameObject(patchObject);
        when(patchObject.getId()).thenReturn(ObjectID.BLAST_FURNACE_ORE_DISPENSER_EMPTY);
        easyBlastFurnacePlugin.onGameObjectSpawned(gameObjectSpawned);

        when(client.getItemContainer(InventoryID.BANK)).thenReturn(bankContainer);
        when(client.getItemContainer(InventoryID.INV)).thenReturn(inventoryContainer);
        when(client.getItemContainer(InventoryID.WORN)).thenReturn(equipmentContainer);

        when(client.getWidget(InterfaceID.Bankmain.UNIVERSE)).thenReturn(bankWidget);

        when(client.getLocalPlayer()).thenReturn(localPlayer);
        when(localPlayer.getWorldLocation()).thenReturn(new WorldPoint(1949, 4967, 0));
        when(easyBlastFurnaceConfig.addCoalBuffer()).thenReturn(true);
        when(easyBlastFurnaceConfig.potionOverlayMode()).thenReturn(PotionOverlaySetting.STAMINA);
        assertTrue(easyBlastFurnacePlugin.isEnabled());
    }

	@Test
	public void silverBarMethod()
	{
		silverMethod();
	}

	@Test
	public void silverBarTickPerfectMethod()
	{
		when(easyBlastFurnaceConfig.tickPerfectMethod()).thenReturn(true);
		silverMethodTickPerfect();
	}

    @Test
    public void steelBarMethod()
    {
        metalMethod(
            ItemID.IRON_ORE, BarsOres.IRON_ORE.getVarbit(),
            ItemID.STEEL_BAR, BarsOres.STEEL_BAR.getVarbit(),
            Strings.WITHDRAW_IRON_ORE, Strings.STEEL,
            CoalPer.IRON.getValue()
        );
    }

    @Test
    public void mithrilBarMethod()
    {
        metalMethod(
            ItemID.MITHRIL_ORE, BarsOres.MITHRIL_ORE.getVarbit(),
            ItemID.MITHRIL_BAR, BarsOres.MITHRIL_BAR.getVarbit(),
            Strings.WITHDRAW_MITHRIL_ORE, Strings.MITHRIL,
            CoalPer.MITHRIL.getValue()
        );
    }

    @Test
    public void adamantiteBarMethod()
    {
        metalMethod(
            ItemID.ADAMANTITE_ORE, BarsOres.ADAMANTITE_ORE.getVarbit(),
            ItemID.ADAMANTITE_BAR, BarsOres.ADAMANTITE_BAR.getVarbit(),
            Strings.WITHDRAW_ADAMANTITE_ORE, Strings.ADAMANTITE,
            CoalPer.ADAMANTITE.getValue()
        );
    }

    @Test
    public void runiteBarMethod()
    {
        metalMethod(
            ItemID.RUNITE_ORE, BarsOres.RUNITE_ORE.getVarbit(),
            ItemID.RUNITE_BAR, BarsOres.RUNITE_BAR.getVarbit(),
            Strings.WITHDRAW_RUNITE_ORE, Strings.RUNITE,
            CoalPer.RUNITE.getValue()
        );
    }

	@Test
	public void mithrilGoldHybridMethod() {
		goldHybridMethod(
				ItemID.MITHRIL_ORE, BarsOres.MITHRIL_ORE.getVarbit(),
				ItemID.MITHRIL_BAR, BarsOres.MITHRIL_BAR.getVarbit(),
				Strings.WITHDRAW_MITHRIL_ORE, Strings.MITHRIL_GOLD_HYBRID,
				CoalPer.MITHRIL.getValue(), false
		);
	}

	@Test
	public void adamantiteGoldHybridMethod() {
		goldHybridMethod(
				ItemID.ADAMANTITE_ORE, BarsOres.ADAMANTITE_ORE.getVarbit(),
				ItemID.ADAMANTITE_BAR, BarsOres.ADAMANTITE_BAR.getVarbit(),
				Strings.WITHDRAW_ADAMANTITE_ORE, Strings.ADAMANTITE_GOLD_HYBRID,
				CoalPer.ADAMANTITE.getValue(), false
		);
	}

	@Test
	public void runiteGoldHybridMethod() {
		goldHybridMethod(
				ItemID.RUNITE_ORE, BarsOres.RUNITE_ORE.getVarbit(),
				ItemID.RUNITE_BAR, BarsOres.RUNITE_BAR.getVarbit(),
				Strings.WITHDRAW_RUNITE_ORE, Strings.RUNITE_GOLD_HYBRID,
				CoalPer.RUNITE.getValue(), false
		);
	}

	@Test
	public void runiteGoldHybridTickPerfectMethod() {
		when(easyBlastFurnaceConfig.tickPerfectMethod()).thenReturn(true);
		goldHybridMethod(
				ItemID.RUNITE_ORE, BarsOres.RUNITE_ORE.getVarbit(),
				ItemID.RUNITE_BAR, BarsOres.RUNITE_BAR.getVarbit(),
				Strings.WITHDRAW_RUNITE_ORE, Strings.RUNITE_GOLD_HYBRID,
				CoalPer.RUNITE.getValue(), true
		);
	}

	@Test
	public void mithrilSilverHybridMethod()
	{
		silverHybridMethod(
				ItemID.MITHRIL_ORE, BarsOres.MITHRIL_ORE.getVarbit(),
				ItemID.MITHRIL_BAR, BarsOres.MITHRIL_BAR.getVarbit(),
				Strings.WITHDRAW_MITHRIL_ORE, Strings.MITHRIL_SILVER_HYBRID,
				CoalPer.MITHRIL.getValue(), false
		);
	}

	@Test
	public void adamantiteSilverHybridMethod()
	{
		silverHybridMethod(
				ItemID.ADAMANTITE_ORE, BarsOres.ADAMANTITE_ORE.getVarbit(),
				ItemID.ADAMANTITE_BAR, BarsOres.ADAMANTITE_BAR.getVarbit(),
				Strings.WITHDRAW_ADAMANTITE_ORE, Strings.ADAMANTITE_SILVER_HYBRID,
				CoalPer.ADAMANTITE.getValue(), false
		);
	}

	@Test
	public void runiteSilverHybridMethod()
	{
		silverHybridMethod(
				ItemID.RUNITE_ORE, BarsOres.RUNITE_ORE.getVarbit(),
				ItemID.RUNITE_BAR, BarsOres.RUNITE_BAR.getVarbit(),
				Strings.WITHDRAW_RUNITE_ORE, Strings.RUNITE_SILVER_HYBRID,
				CoalPer.RUNITE.getValue(), false
		);
	}

	@Test
	public void runiteSilverHybridTickPerfectMethod()
	{
		when(easyBlastFurnaceConfig.tickPerfectMethod()).thenReturn(true);
		silverHybridMethod(
				ItemID.RUNITE_ORE, BarsOres.RUNITE_ORE.getVarbit(),
				ItemID.RUNITE_BAR, BarsOres.RUNITE_BAR.getVarbit(),
				Strings.WITHDRAW_RUNITE_ORE, Strings.RUNITE_SILVER_HYBRID,
				CoalPer.RUNITE.getValue(), true
		);
	}

    @Test
    public void goldBarMethod()
    {
        goldMethod();
    }

    @Test
    public void goldBarTickPerfectMethod()
    {
        when(easyBlastFurnaceConfig.tickPerfectMethod()).thenReturn(true);
        goldMethodTickPerfect();
    }

    @Test
    public void drinkStaminaMethod()
    {
        when(easyBlastFurnaceConfig.staminaPotionEnable()).thenReturn(false);
        assertTrue(state.getPlayer().hasEnoughEnergy());

        // setup
        when(easyBlastFurnaceConfig.staminaPotionEnable()).thenReturn(true);
        when(client.getWeight()).thenReturn(54);
        when(client.getBoostedSkillLevel(Skill.AGILITY)).thenReturn(35);
        setInventoryItems(new Item[0]);
        setEquipmentCount(Equipment.SMITHING_CAPE.items[0], 1);

        checkStaminaHelper(); // Check energy calculation

        // deposit inventory
        when(easyBlastFurnaceConfig.requireStaminaThreshold()).thenReturn(50);
        when(client.getEnergy()).thenReturn(6400);
        setInventoryCount(ItemID.VIAL_EMPTY, 1);
        assertStepTooltip(Strings.DEPOSIT_STAMINA_POTIONS);

        // Second deposit Inventory
        when(client.getEnergy()).thenReturn(4900);
        Item[] gold = new Item[28];
        for (int i = 0; i < 28; i++) {
            gold[i] = new Item(ItemID.GOLD_ORE, 1);
        }
        setInventoryItems(gold);
        assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

        // drink/withdraw stamina potions
        setInventoryItems(new Item[0]);
        checkStaminaPotion(ItemID._4DOSESTAMINA, ItemID._1DOSESTAMINA, Strings.DRINK_STAMINA_POTION);
        checkStaminaPotion(ItemID._1DOSESTAMINA, ItemID._2DOSESTAMINA, Strings.DRINK_STAMINA_POTION);
        checkStaminaPotion(ItemID._2DOSESTAMINA, ItemID._3DOSESTAMINA, Strings.DRINK_STAMINA_POTION);
        checkStaminaPotion(ItemID._3DOSESTAMINA, ItemID._4DOSESTAMINA, Strings.DRINK_STAMINA_POTION);
        checkStaminaPotion(ItemID._4DOSESTAMINA, ItemID._1DOSESTAMINA, Strings.WITHDRAW_STAMINA_POTION);
        checkStaminaPotion(ItemID._1DOSESTAMINA, ItemID._2DOSESTAMINA, Strings.WITHDRAW_STAMINA_POTION);
        checkStaminaPotion(ItemID._2DOSESTAMINA, ItemID._3DOSESTAMINA, Strings.WITHDRAW_STAMINA_POTION);
        checkStaminaPotion(ItemID._3DOSESTAMINA, ItemID._4DOSESTAMINA, Strings.WITHDRAW_STAMINA_POTION);

        // getMoreStaminaPotions
        setBankCount(ItemID._4DOSESTAMINA, 0);
        assertStepTooltip(Strings.GET_MORE_STAMINA_POTIONS);
    }

    @Test
    public void drinkSuperEnergyMethod()
    {
        when(easyBlastFurnaceConfig.staminaPotionEnable()).thenReturn(false);
        assertTrue(state.getPlayer().hasEnoughEnergy());

        // setup
        when(easyBlastFurnaceConfig.staminaPotionEnable()).thenReturn(true);
        when(client.getWeight()).thenReturn(54);
        when(client.getBoostedSkillLevel(Skill.AGILITY)).thenReturn(35);
        when(easyBlastFurnaceConfig.potionOverlayMode()).thenReturn(PotionOverlaySetting.SUPER_ENERGY);
        setInventoryItems(new Item[0]);
        setEquipmentCount(Equipment.SMITHING_CAPE.items[0], 1);

        checkStaminaHelper();

        when(easyBlastFurnaceConfig.requireStaminaThreshold()).thenReturn(20);
        when(client.getEnergy()).thenReturn(8400);
        setInventoryCount(ItemID.VIAL_EMPTY, 1);
        assertStepTooltip(Strings.DEPOSIT_SUPER_ENERGY_POTIONS);

        setInventoryItems(new Item[0]);
        // Second deposit Inventory
        when(client.getEnergy()).thenReturn(1200);
        Item[] gold = new Item[28];
        for (int i = 0; i < 28; i++) {
            gold[i] = new Item(ItemID.GOLD_ORE, 1);
        }
        setInventoryItems(gold);
        assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

        // drink/withdraw stamina potions
        setInventoryItems(new Item[0]);
        checkStaminaPotion(ItemID._4DOSE2ENERGY, ItemID._1DOSE2ENERGY, Strings.DRINK_SUPER_ENERGY_POTION);
        checkStaminaPotion(ItemID._1DOSE2ENERGY, ItemID._2DOSE2ENERGY, Strings.DRINK_SUPER_ENERGY_POTION);
        checkStaminaPotion(ItemID._2DOSE2ENERGY, ItemID._3DOSE2ENERGY, Strings.DRINK_SUPER_ENERGY_POTION);
        checkStaminaPotion(ItemID._3DOSE2ENERGY, ItemID._4DOSE2ENERGY, Strings.DRINK_SUPER_ENERGY_POTION);
        checkStaminaPotion(ItemID._4DOSE2ENERGY, ItemID._1DOSE2ENERGY, Strings.WITHDRAW_SUPER_ENERGY_POTION);
        checkStaminaPotion(ItemID._1DOSE2ENERGY, ItemID._2DOSE2ENERGY, Strings.WITHDRAW_SUPER_ENERGY_POTION);
        checkStaminaPotion(ItemID._2DOSE2ENERGY, ItemID._3DOSE2ENERGY, Strings.WITHDRAW_SUPER_ENERGY_POTION);
        checkStaminaPotion(ItemID._3DOSE2ENERGY, ItemID._4DOSE2ENERGY, Strings.WITHDRAW_SUPER_ENERGY_POTION);

        when(easyBlastFurnaceConfig.potionOverlayMode()).thenReturn(PotionOverlaySetting.SUPER_ENERGY);

        setBankCount(ItemID._1DOSE2ENERGY, 0);
        setBankCount(ItemID._2DOSE2ENERGY, 0);
        setBankCount(ItemID._3DOSE2ENERGY, 1);
        setBankCount(ItemID._4DOSE2ENERGY, 0);
        assertStepTooltip(Strings.WITHDRAW_SUPER_ENERGY_POTION);
        setBankCount(ItemID._1DOSE2ENERGY, 0);
        setBankCount(ItemID._2DOSE2ENERGY, 1);
        setBankCount(ItemID._3DOSE2ENERGY, 0);
        setBankCount(ItemID._4DOSE2ENERGY, 0);
        assertStepTooltip(Strings.WITHDRAW_SUPER_ENERGY_POTION);
        setBankCount(ItemID._1DOSE2ENERGY, 1);
        setBankCount(ItemID._2DOSE2ENERGY, 0);
        setBankCount(ItemID._3DOSE2ENERGY, 0);
        setBankCount(ItemID._4DOSE2ENERGY, 0);
        assertStepTooltip(Strings.WITHDRAW_SUPER_ENERGY_POTION);
        setBankCount(ItemID._1DOSE2ENERGY, 1);
        setBankCount(ItemID._2DOSE2ENERGY, 1);
        setBankCount(ItemID._3DOSE2ENERGY, 1);
        setBankCount(ItemID._4DOSE2ENERGY, 1);
        assertStepTooltip(Strings.WITHDRAW_SUPER_ENERGY_POTION);
        // getMoreStaminaPotions
        setBankCount(ItemID._1DOSE2ENERGY, 0);
        setBankCount(ItemID._2DOSE2ENERGY, 0);
        setBankCount(ItemID._3DOSE2ENERGY, 0);
        setBankCount(ItemID._4DOSE2ENERGY, 0);
        assertStepTooltip(Strings.GET_MORE_SUPER_ENERGY_POTIONS);
    }

    @Test
    public void drinkEnergyMethod()
    {
        when(easyBlastFurnaceConfig.staminaPotionEnable()).thenReturn(false);
        assertTrue(state.getPlayer().hasEnoughEnergy());

        // setup
        when(easyBlastFurnaceConfig.staminaPotionEnable()).thenReturn(true);
        when(client.getWeight()).thenReturn(54);
        when(client.getBoostedSkillLevel(Skill.AGILITY)).thenReturn(35);
        when(easyBlastFurnaceConfig.potionOverlayMode()).thenReturn(PotionOverlaySetting.ENERGY);
        setInventoryItems(new Item[0]);
        setEquipmentCount(Equipment.SMITHING_CAPE.items[0], 1);

        checkStaminaHelper();

        when(easyBlastFurnaceConfig.requireStaminaThreshold()).thenReturn(20);
        when(client.getEnergy()).thenReturn(9400);
        setInventoryCount(ItemID.VIAL_EMPTY, 1);
        assertStepTooltip(Strings.DEPOSIT_ENERGY_POTIONS);

        setInventoryItems(new Item[0]);
        // Second deposit Inventory
        when(client.getEnergy()).thenReturn(1200);
        Item[] gold = new Item[28];
        for (int i = 0; i < 28; i++) {
            gold[i] = new Item(ItemID.GOLD_ORE, 1);
        }
        setInventoryItems(gold);
        assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

        // drink/withdraw stamina potions
        setInventoryItems(new Item[0]);
        checkStaminaPotion(ItemID._1DOSE1ENERGY, ItemID._1DOSE1ENERGY, Strings.DRINK_ENERGY_POTION);
        checkStaminaPotion(ItemID._1DOSE1ENERGY, ItemID._2DOSE1ENERGY, Strings.DRINK_ENERGY_POTION);
        checkStaminaPotion(ItemID._2DOSE1ENERGY, ItemID._3DOSE1ENERGY, Strings.DRINK_ENERGY_POTION);
        checkStaminaPotion(ItemID._3DOSE1ENERGY, ItemID._4DOSE1ENERGY, Strings.DRINK_ENERGY_POTION);
        checkStaminaPotion(ItemID._4DOSE1ENERGY, ItemID._1DOSE1ENERGY, Strings.WITHDRAW_ENERGY_POTION);
        checkStaminaPotion(ItemID._1DOSE1ENERGY, ItemID._2DOSE1ENERGY, Strings.WITHDRAW_ENERGY_POTION);
        checkStaminaPotion(ItemID._2DOSE1ENERGY, ItemID._3DOSE1ENERGY, Strings.WITHDRAW_ENERGY_POTION);
        checkStaminaPotion(ItemID._3DOSE1ENERGY, ItemID._4DOSE1ENERGY, Strings.WITHDRAW_ENERGY_POTION);

        when(easyBlastFurnaceConfig.potionOverlayMode()).thenReturn(PotionOverlaySetting.ENERGY);

        setBankCount(ItemID._1DOSE1ENERGY, 0);
        setBankCount(ItemID._2DOSE1ENERGY, 0);
        setBankCount(ItemID._3DOSE1ENERGY, 1);
        setBankCount(ItemID._4DOSE1ENERGY, 0);
        assertStepTooltip(Strings.WITHDRAW_ENERGY_POTION);
        setBankCount(ItemID._1DOSE1ENERGY, 0);
        setBankCount(ItemID._2DOSE1ENERGY, 1);
        setBankCount(ItemID._3DOSE1ENERGY, 0);
        setBankCount(ItemID._4DOSE1ENERGY, 0);
        assertStepTooltip(Strings.WITHDRAW_ENERGY_POTION);
        setBankCount(ItemID._1DOSE1ENERGY, 1);
        setBankCount(ItemID._2DOSE1ENERGY, 0);
        setBankCount(ItemID._3DOSE1ENERGY, 0);
        setBankCount(ItemID._4DOSE1ENERGY, 0);
        assertStepTooltip(Strings.WITHDRAW_ENERGY_POTION);
        setBankCount(ItemID._1DOSE1ENERGY, 1);
        setBankCount(ItemID._2DOSE1ENERGY, 1);
        setBankCount(ItemID._3DOSE1ENERGY, 1);
        setBankCount(ItemID._4DOSE1ENERGY, 1);
        assertStepTooltip(Strings.WITHDRAW_ENERGY_POTION);
        // getMoreStaminaPotions
        setBankCount(ItemID._1DOSE1ENERGY, 0);
        setBankCount(ItemID._2DOSE1ENERGY, 0);
        setBankCount(ItemID._3DOSE1ENERGY, 0);
        setBankCount(ItemID._4DOSE1ENERGY, 0);
        assertStepTooltip(Strings.GET_MORE_ENERGY_POTIONS);
    }

    private void goldMethodTickPerfect()
    {
		setInventoryItems(new Item[]{new Item(ItemID.GOLD_ORE, 1)});
		setInventoryCount(ItemID.GOLD_ORE, 1);
		assertEquals(Strings.GOLD, methodHandler.getMethod().getName());

		setFurnaceCount(BarsOres.GOLD_BAR.getVarbit(), 0);
		setFurnaceCount(BarsOres.GOLD_ORE.getVarbit(), 0);
		assertStepTooltip(Strings.WITHDRAW_ICE_OR_SMITHS_GLOVES);

		setInventoryCount(Equipment.ICE_GLOVES.items[0], 1);
		setBankCount(Equipment.SMITHING_CAPE.items[0], 1);
		assertStepTooltip(Strings.WITHDRAW_SMITHING_CAPE);

		setInventoryCount(Equipment.SMITHING_CAPE.items[0], 1);
		setBankCount(Equipment.SMITHING_CAPE.items[0], 0);
		assertStepTooltip(Strings.EQUIP_SMITHING_CAPE);

		setInventoryCount(Equipment.SMITHING_CAPE.items[0], 0);
		setBankCount(Equipment.MAX_CAPE.items[0], 1);
		assertStepTooltip(Strings.WITHDRAW_MAX_CAPE);

		setInventoryCount(Equipment.MAX_CAPE.items[0], 1);
		setBankCount(Equipment.MAX_CAPE.items[0], 0);
		assertStepTooltip(Strings.EQUIP_MAX_CAPE);

		setInventoryCount(Equipment.MAX_CAPE.items[0], 0);
		setBankCount(Equipment.GOLDSMITH.items[0], 1);
		assertStepTooltip(Strings.WITHDRAW_GOLDSMITH_GAUNTLETS);

		setInventoryCount(Equipment.GOLDSMITH.items[0], 1);
		setBankCount(Equipment.GOLDSMITH.items[0], 0);
		assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

		setInventoryCount(ItemID.GOLD_ORE, 0);
		assertStepTooltip(Strings.ADD_DUMMY_ITEM);

		setInventoryCount(ItemID.SPADE, 1);
		setInventoryItems(new Item[]{new Item(ItemID.GOLD_ORE, 1), new Item(ItemID.SPADE, 1)});
		assertStepTooltip(Strings.EQUIP_GOLDSMITH_GAUNTLETS);

		setFurnaceCount(BarsOres.GOLD_BAR.getVarbit(), 28);
		setFurnaceCount(BarsOres.GOLD_ORE.getVarbit(), 26);
		setInventoryCount(ItemID.GOLD_ORE, 1);
		assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

		setInventoryCount(ItemID.GOLD_ORE, 0);
		assertStepTooltip(Strings.COLLECT_BARS);

		setFurnaceCount(BarsOres.GOLD_BAR.getVarbit(), 0);
		setFurnaceCount(BarsOres.GOLD_ORE.getVarbit(), 0);
		setInventoryCount(Equipment.GOLDSMITH.items[0], 0);
		setEquipmentCount(Equipment.GOLDSMITH.items[0], 1);
		assertStepTooltip(Strings.WITHDRAW_GOLD_ORE);

		setInventoryCount(ItemID.GOLD_ORE, 27);
        setWorldPoint(atConveyorBelt);
        setInventoryCount(ItemID.GOLD_ORE, 0);
        setFurnaceCount(BarsOres.GOLD_BAR.getVarbit(), 27);
        assertStepTooltip(Strings.WITHDRAW_GOLD_ORE);

        setWorldPoint(notAtConveyorBelt);
        setInventoryCount(ItemID.GOLD_ORE, 27);
        setWorldPoint(atConveyorBelt);
        goToAndLoadConveyorBelt(ItemID.GOLD_ORE);
        assertStepTooltip(Strings.GO_TO_DISPENSER);

        setWorldPoint(notAtConveyorBelt);
        assertStepTooltip(Strings.EQUIP_ICE_OR_SMITHS_GLOVES);


        setWorldPoint(atBarDispenser);
        setFurnaceCount(BarsOres.GOLD_BAR.getVarbit(), 28);
        setFurnaceCount(BarsOres.GOLD_ORE.getVarbit(), 26);
        assertStepTooltip(Strings.EQUIP_GOLDSMITH_GAUNTLETS_AFTER_COLLECT_BARS);
    }

    private void goldMethod()
    {
		setInventoryItems(new Item[]{new Item(ItemID.GOLD_ORE, 1)});
		setInventoryCount(ItemID.GOLD_ORE, 1);
		assertEquals(Strings.GOLD, methodHandler.getMethod().getName());

		setFurnaceCount(BarsOres.GOLD_BAR.getVarbit(), 0);
		setFurnaceCount(BarsOres.GOLD_ORE.getVarbit(), 0);
		assertStepTooltip(Strings.WITHDRAW_ICE_OR_SMITHS_GLOVES);

		setInventoryCount(Equipment.ICE_GLOVES.items[0], 1);
		setBankCount(Equipment.SMITHING_CAPE.items[0], 1);
		assertStepTooltip(Strings.WITHDRAW_SMITHING_CAPE);

		setInventoryCount(Equipment.SMITHING_CAPE.items[0], 1);
		setBankCount(Equipment.SMITHING_CAPE.items[0], 0);
		assertStepTooltip(Strings.EQUIP_SMITHING_CAPE);

		setInventoryCount(Equipment.SMITHING_CAPE.items[0], 0);
		setBankCount(Equipment.MAX_CAPE.items[0], 1);
		assertStepTooltip(Strings.WITHDRAW_MAX_CAPE);

		setInventoryCount(Equipment.MAX_CAPE.items[0], 1);
		setBankCount(Equipment.MAX_CAPE.items[0], 0);
		assertStepTooltip(Strings.EQUIP_MAX_CAPE);

		setInventoryCount(Equipment.MAX_CAPE.items[0], 0);
		setBankCount(Equipment.GOLDSMITH.items[0], 1);
		assertStepTooltip(Strings.WITHDRAW_GOLDSMITH_GAUNTLETS);

		setInventoryCount(Equipment.GOLDSMITH.items[0], 1);
		setBankCount(Equipment.GOLDSMITH.items[0], 0);
		assertStepTooltip(Strings.EQUIP_GOLDSMITH_GAUNTLETS);

		setFurnaceCount(BarsOres.GOLD_BAR.getVarbit(), 28);
		setFurnaceCount(BarsOres.GOLD_ORE.getVarbit(), 26);
		assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

		setInventoryCount(ItemID.GOLD_ORE, 0);
		assertStepTooltip(Strings.COLLECT_BARS);

		setFurnaceCount(BarsOres.GOLD_BAR.getVarbit(), 0);
		setFurnaceCount(BarsOres.GOLD_ORE.getVarbit(), 0);
		setInventoryCount(Equipment.GOLDSMITH.items[0], 0);
		setEquipmentCount(Equipment.GOLDSMITH.items[0], 1);
		assertStepTooltip(Strings.WITHDRAW_GOLD_ORE);

		setInventoryCount(ItemID.GOLD_ORE, 27);
        assertStepTooltip(Strings.PUT_ORE_ONTO_CONVEYOR_BELT);

        setAtBank(false);
        equipGloves(true);
        assertStepTooltip(Strings.EQUIP_GOLDSMITH_GAUNTLETS);


        equipGloves(false);
        goToAndLoadConveyorBelt(ItemID.GOLD_ORE);
        assertStepTooltip(Strings.WAIT_FOR_BARS);

        setWorldPoint(atBarDispenser);
        setFurnaceCount(BarsOres.GOLD_ORE.getVarbit(), 27);
        setFurnaceCount(BarsOres.GOLD_ORE.getVarbit(), 0);
        setFurnaceCount(BarsOres.GOLD_BAR.getVarbit(), 27);
        assertStepTooltip(Strings.EQUIP_ICE_OR_SMITHS_GLOVES);

        equipGloves(true);
        assertStepTooltip(Strings.COLLECT_BARS);

        setInventoryCount(ItemID.GOLD_BAR, 27);
        setFurnaceCount(BarsOres.GOLD_BAR.getVarbit(), 0);

        assertStepTooltip(Strings.OPEN_BANK);

        setAtBank(true);
        assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

        setInventoryCount(ItemID.GOLD_BAR, 0);
        assertStepTooltip(Strings.EQUIP_GOLDSMITH_GAUNTLETS);

        equipGloves(false);
        assertStepTooltip(Strings.WITHDRAW_GOLD_ORE);
    }

    private void checkStaminaPotion(int staminaPotionA, int staminaPotionB, String methodStep)
    {
        setInventoryCount(staminaPotionA, 0);
        setBankCount(staminaPotionA, 0);
        if (methodStep.toLowerCase().contains("withdraw")) setBankCount(staminaPotionB, 1);
        else setInventoryCount(staminaPotionB, 1);
        assertStepTooltip(methodStep);
    }

    private void checkStaminaHelper()
    {
        // Check StaminaHelper works for all methods: coal and ore runs. This catches issues with strings changing too.
        when(client.getVarbitValue(BarsOres.COAL.getVarbit())).thenReturn(254);
        when(configManager.getRSProfileConfiguration("runenergy", "ringOfEnduranceCharges", Integer.class)).thenReturn(500);
        setEquipmentCount(ItemID.RING_OF_ENDURANCE, 1);
        runThroughBarMethods(ItemID.IRON_ORE,ItemID.MITHRIL_ORE,ItemID.ADAMANTITE_ORE,ItemID.RUNITE_ORE);
        assertFalse(state.getFurnace().isCoalRunNext(CoalPer.getValueFromString(methodHandler.getMethod().toString())));
        assertEquals(14, (int) staminaHelper.getEnergyNeededForNextRun());

        when(client.getVarbitValue(VarbitID.STAMINA_DURATION)).thenReturn(1);
        when(client.getVarbitValue(BarsOres.COAL.getVarbit())).thenReturn(0);
        runThroughBarMethods(ItemID.IRON_ORE,ItemID.MITHRIL_ORE,ItemID.ADAMANTITE_ORE,ItemID.RUNITE_ORE);
        assertTrue(state.getFurnace().isCoalRunNext(CoalPer.getValueFromString(methodHandler.getMethod().toString())));
        assertEquals(10, (int) staminaHelper.getEnergyNeededForNextRun());
    }

    private void runThroughBarMethods(int ...ores)
    {
        for (int i = 0; i < ores.length; i++) {
            resetMethod();
            setInventoryCount(ores[i], 1);
            setInventoryCount(ItemID.GOLD_ORE, 1);
            if (i != 0) setInventoryCount(ores[i - 1], 0);
            resetMethod();
            setInventoryCount(ItemID.GOLD_ORE, 0);
        }
    }

    private void resetMethod()
    {
        OverlayMenuEntry entry = new OverlayMenuEntry(MenuAction.RUNELITE_OVERLAY, InstructionOverlay.RESET_ACTION, null);
        OverlayMenuClicked overlayMenuClickedEvent = new OverlayMenuClicked(entry, instructionOverlay);
        easyBlastFurnacePlugin.onOverlayMenuClicked(overlayMenuClickedEvent);
    }

	private void silverMethodTickPerfect()
	{
		setInventoryItems(new Item[]{new Item(ItemID.SILVER_ORE, 1)});
		setInventoryCount(ItemID.SILVER_ORE, 1);
		assertEquals(Strings.SILVER, methodHandler.getMethod().getName());
		assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

		setInventoryCount(ItemID.SILVER_ORE, 0);

		assertStepTooltip(Strings.WITHDRAW_ICE_OR_SMITHS_GLOVES);

		setInventoryCount(Equipment.ICE_GLOVES.items[0], 1);
		assertStepTooltip(Strings.EQUIP_ICE_OR_SMITHS_GLOVES);

		setInventoryCount(Equipment.ICE_GLOVES.items[0], 0);
		setEquipmentCount(Equipment.ICE_GLOVES.items[0], 1);
		assertStepTooltip(Strings.ADD_DUMMY_ITEM);

		setInventoryItems(new Item[]{new Item(ItemID.SILVER_ORE, 1), new Item(ItemID.SPADE,1)});
		setInventoryCount(ItemID.SPADE, 1);
		setInventoryCount(ItemID.SILVER_BAR, 1);
		assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

		setFurnaceCount(BarsOres.SILVER_ORE.getVarbit(), 1);
		setFurnaceCount(BarsOres.SILVER_BAR.getVarbit(), 1);
		setInventoryCount(ItemID.SILVER_BAR, 0);
		setInventoryCount(ItemID.SILVER_ORE, 1);
		assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

		setInventoryCount(ItemID.SILVER_ORE, 0);
		assertStepTooltip(Strings.COLLECT_BARS);

		setFurnaceCount(BarsOres.SILVER_ORE.getVarbit(), 0);
		setFurnaceCount(BarsOres.SILVER_BAR.getVarbit(), 0);
		assertStepTooltip(Strings.WITHDRAW_SILVER_ORE);

		setInventoryCount(ItemID.SILVER_ORE, 27);
		assertStepTooltip(Strings.PUT_ORE_ONTO_CONVEYOR_BELT);

		goToAndLoadConveyorBelt(ItemID.SILVER_ORE);


		setFurnaceCount(BarsOres.SILVER_ORE.getVarbit(), 27);
		setFurnaceCount(BarsOres.SILVER_BAR.getVarbit(), 27);
		assertStepTooltip(Strings.GO_TO_DISPENSER);

		setWorldPoint(atBarDispenser);
		assertStepTooltip(Strings.COLLECT_BARS);
		setWorldPoint(notAtConveyorBelt);
		setFurnaceCount(BarsOres.SILVER_ORE.getVarbit(), 27);
		setFurnaceCount(BarsOres.SILVER_ORE.getVarbit(), 0);
		setFurnaceCount(BarsOres.SILVER_BAR.getVarbit(), 27);
		assertStepTooltip(Strings.COLLECT_BARS);

		collectBars(ItemID.SILVER_BAR, BarsOres.SILVER_BAR.getVarbit());
		assertStepTooltip(Strings.OPEN_BANK);

		setInventoryCount(ItemID.SILVER_BAR, 0);
		setInventoryCount(ItemID.SILVER_ORE, 27);
		goToAndLoadConveyorBelt(ItemID.SILVER_ORE);
		setFurnaceCount(BarsOres.SILVER_ORE.getVarbit(), 27);
		setFurnaceCount(BarsOres.SILVER_BAR.getVarbit(), 0);
		assertStepTooltip(Strings.OPEN_BANK);

		setAtBank(true);
		assertStepTooltip(Strings.WITHDRAW_SILVER_ORE);
		setInventoryCount(ItemID.SILVER_ORE, 27);

		goToAndLoadConveyorBelt(ItemID.SILVER_ORE);
		setFurnaceCount(BarsOres.SILVER_BAR.getVarbit(), 27);
		assertStepTooltip(Strings.GO_TO_DISPENSER);

		setWorldPoint(atBarDispenser);
		setFurnaceCount(BarsOres.SILVER_BAR.getVarbit(), 27);
		setFurnaceCount(BarsOres.SILVER_ORE.getVarbit(), 27);
		assertStepTooltip(Strings.COLLECT_BARS);
	}

	private void silverMethod()
	{
		setInventoryItems(new Item[]{new Item(ItemID.SILVER_ORE, 1)});
		setInventoryCount(ItemID.SILVER_ORE, 1);
		assertEquals(Strings.SILVER, methodHandler.getMethod().getName());
		assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

		setInventoryCount(ItemID.SILVER_ORE, 0);

		assertStepTooltip(Strings.WITHDRAW_ICE_OR_SMITHS_GLOVES);

		setInventoryCount(Equipment.ICE_GLOVES.items[0], 1);
		assertStepTooltip(Strings.EQUIP_ICE_OR_SMITHS_GLOVES);

		setInventoryCount(Equipment.ICE_GLOVES.items[0], 0);
		setEquipmentCount(Equipment.ICE_GLOVES.items[0], 1);
		setInventoryCount(ItemID.SILVER_BAR, 1);
		assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

		setFurnaceCount(BarsOres.SILVER_ORE.getVarbit(), 1);
		setFurnaceCount(BarsOres.SILVER_BAR.getVarbit(), 1);
		setInventoryCount(ItemID.SILVER_BAR, 0);
		setInventoryCount(ItemID.SILVER_ORE, 1);
		assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

		setInventoryCount(ItemID.SILVER_ORE, 0);
		assertStepTooltip(Strings.COLLECT_BARS);

		setFurnaceCount(BarsOres.SILVER_ORE.getVarbit(), 0);
		setFurnaceCount(BarsOres.SILVER_BAR.getVarbit(), 0);
		assertStepTooltip(Strings.WITHDRAW_SILVER_ORE);

		setInventoryCount(ItemID.SILVER_ORE, 27);
		assertStepTooltip(Strings.PUT_ORE_ONTO_CONVEYOR_BELT);

		goToAndLoadConveyorBelt(ItemID.SILVER_ORE);
		assertStepTooltip(Strings.WAIT_FOR_BARS);

		setWorldPoint(notAtConveyorBelt);
		setFurnaceCount(BarsOres.SILVER_ORE.getVarbit(), 27);
		setFurnaceCount(BarsOres.SILVER_ORE.getVarbit(), 0);
		setFurnaceCount(BarsOres.SILVER_BAR.getVarbit(), 27);
		assertStepTooltip(Strings.COLLECT_BARS);

		collectBars(ItemID.SILVER_BAR, BarsOres.SILVER_BAR.getVarbit());
		assertStepTooltip(Strings.OPEN_BANK);

		setAtBank(false);
		equipGloves(true);
		goToAndLoadConveyorBelt(ItemID.SILVER_ORE);
		assertStepTooltip(Strings.WAIT_FOR_BARS);

		setWorldPoint(atBarDispenser);
		setFurnaceCount(BarsOres.SILVER_ORE.getVarbit(), 27);
		setFurnaceCount(BarsOres.SILVER_ORE.getVarbit(), 0);
		setFurnaceCount(BarsOres.SILVER_BAR.getVarbit(), 27);
		equipGloves(false);
		assertStepTooltip(Strings.EQUIP_ICE_OR_SMITHS_GLOVES);

		equipGloves(true);
		assertStepTooltip(Strings.COLLECT_BARS);

		setInventoryCount(ItemID.SILVER_BAR, 27);
		setFurnaceCount(BarsOres.SILVER_BAR.getVarbit(), 0);

		assertStepTooltip(Strings.OPEN_BANK);

		setAtBank(true);
		assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

		setInventoryCount(ItemID.SILVER_BAR, 0);
		assertStepTooltip(Strings.WITHDRAW_SILVER_ORE);
	}

    private void metalMethod(
        int oreID, int oreVarbit, int barID, int barVarbit, String withdrawOreText, String methodName, int coalPer
    ) {
        setInventoryItems(new Item[]{new Item(oreID, 1)});
        setInventoryCount(oreID, 1);
        setBankCount(Equipment.COAL_BAG.items[0], 1);
        assertEquals(methodName, methodHandler.getMethod().getName());
        assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

        setInventoryCount(oreID, 0);
        assertStepTooltip(Strings.WITHDRAW_COAL_BAG);

        setInventoryCount(Equipment.COAL_BAG.items[0], 1);
        assertStepTooltip(Strings.WITHDRAW_ICE_OR_SMITHS_GLOVES);

        setInventoryCount(Equipment.ICE_GLOVES.items[0], 1);
        assertStepTooltip(Strings.EQUIP_ICE_OR_SMITHS_GLOVES);

        setInventoryCount(Equipment.ICE_GLOVES.items[0], 0);
        setEquipmentCount(Equipment.ICE_GLOVES.items[0], 1);

        setInventoryCount(barID, 1);
        assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

        setFurnaceCount(oreVarbit, 1);
        setFurnaceCount(barVarbit, 1);
        setFurnaceCount(BarsOres.COAL.getVarbit(), 27 * (coalPer - state.getFurnace().getCoalOffset()));
        setInventoryCount(barID, 0);
        setInventoryCount(oreID, 1);
        assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

        setInventoryCount(oreID, 0);
        assertStepTooltip(Strings.COLLECT_BARS);

        setFurnaceCount(oreVarbit, 0);
        setFurnaceCount(barVarbit, 0);
        setFurnaceCount(BarsOres.COAL.getVarbit(), 0);
        assertStepTooltip(Strings.FILL_COAL_BAG);
        setCoalBag(coalBagFillMessage);

		assertStepTooltip(Strings.WITHDRAW_COAL);
		setFurnaceCount(BarsOres.COAL.getVarbit(), 27 * (coalPer - state.getFurnace().getCoalOffset()));
		assertStepTooltip(withdrawOreText);

		setInventoryCount(oreID, 27);

		assertEquals(state.getCoalBag().getMaxCoal(), state.getCoalBag().getCoal());

        assertStepTooltip(Strings.PUT_ORE_ONTO_CONVEYOR_BELT);

        goToAndLoadConveyorBelt(oreID);
        assertStepTooltip(Strings.EMPTY_COAL_BAG);

        setCoalBag(coalBagEmptyMessage);
        assertEquals(0, state.getCoalBag().getCoal());

        setFurnaceCount(oreVarbit, 26);
        setFurnaceCount(barVarbit, 28);
        setInventoryCount(ItemID.COAL, 27);
        assertStepTooltip(Strings.FILL_COAL_BAG);

        setCoalBag(coalBagFillMessage);
        assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

        setCoalBag(coalBagEmptyMessage);
        setFurnaceCount(oreVarbit, 0);
        setFurnaceCount(barVarbit, 0);
        setInventoryCount(ItemID.COAL, 0);
        setFurnaceCount(BarsOres.COAL.getVarbit(), state.getCoalBag().getCoal());
        assertStepTooltip(Strings.WAIT_FOR_BARS);

        setWorldPoint(notAtConveyorBelt);
        setFurnaceCount(oreVarbit, 27);
        setFurnaceCount(oreVarbit, 0);
        setFurnaceCount(barVarbit, 27);
        assertStepTooltip(Strings.COLLECT_BARS);

        collectBars(barID, barVarbit);
        assertStepTooltip(Strings.OPEN_BANK);
    }

    private void goldHybridMethod(
        int oreID, int oreVarbit, int barID, int barVarbit, String withdrawOreText, String methodName, int coalPer,
        boolean tickPerfect
    ) {
        setInventoryItems(new Item[]{ new Item(Equipment.COAL_BAG.items[0], 1), new Item(oreID, 1) });
        setInventoryCount(oreID, 1);
        setInventoryCount(ItemID.GOLD_ORE, 1);
        setBankCount(Equipment.COAL_BAG.items[0], 1);
        assertEquals(methodName, methodHandler.getMethod().getName());
        assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

        setAtBank(true);
        setInventoryCount(oreID, 0);
        setInventoryCount(ItemID.GOLD_ORE, 0);
        assertStepTooltip(Strings.WITHDRAW_COAL_BAG);

        setInventoryCount(Equipment.COAL_BAG.items[0], 1);
        assertStepTooltip(Strings.WITHDRAW_ICE_OR_SMITHS_GLOVES);

        setInventoryCount(Equipment.ICE_GLOVES.items[0], 1);
        setBankCount(Equipment.SMITHING_CAPE.items[0], 1);
        assertStepTooltip(Strings.WITHDRAW_SMITHING_CAPE);

        setInventoryCount(Equipment.SMITHING_CAPE.items[0], 1);
        setBankCount(Equipment.SMITHING_CAPE.items[0], 0);
        assertStepTooltip(Strings.EQUIP_SMITHING_CAPE);

        setInventoryCount(Equipment.SMITHING_CAPE.items[0], 0);
        setBankCount(Equipment.MAX_CAPE.items[0], 1);
        assertStepTooltip(Strings.WITHDRAW_MAX_CAPE);

        setInventoryCount(Equipment.MAX_CAPE.items[0], 1);
        setBankCount(Equipment.MAX_CAPE.items[0], 0);
        assertStepTooltip(Strings.EQUIP_MAX_CAPE);

        setInventoryCount(Equipment.MAX_CAPE.items[0], 0);
        setBankCount(Equipment.GOLDSMITH.items[0], 1);
        assertStepTooltip(Strings.WITHDRAW_GOLDSMITH_GAUNTLETS);

        setInventoryCount(Equipment.GOLDSMITH.items[0], 1);
        assertStepTooltip(Strings.EQUIP_GOLDSMITH_GAUNTLETS);
		setInventoryCount(Equipment.GOLDSMITH.items[0], 0);
		setEquipmentCount(Equipment.GOLDSMITH.items[0], 1);

        setFurnaceCount(BarsOres.GOLD_BAR.getVarbit(), 28);
        setFurnaceCount(BarsOres.GOLD_ORE.getVarbit(), 26);
        setInventoryCount(ItemID.GOLD_ORE, 1);
        assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

        setInventoryCount(ItemID.GOLD_ORE, 0);
        assertStepTooltip(Strings.COLLECT_BARS);

        setFurnaceCount(BarsOres.GOLD_BAR.getVarbit(), 0);
        setFurnaceCount(BarsOres.GOLD_ORE.getVarbit(), 0);

		assertStepTooltip(Strings.FILL_COAL_BAG);
		setCoalBag(coalBagFillMessage);
		assertEquals(state.getCoalBag().getMaxCoal(), state.getCoalBag().getCoal());

        setFurnaceCount(BarsOres.COAL.getVarbit(), 27 * (coalPer - state.getFurnace().getCoalOffset()));
		assertStepTooltip(withdrawOreText);

        setInventoryCount(oreID, 26);
        when(easyBlastFurnaceConfig.useDepositInventory()).thenReturn(true);
        setCoalBag(coalBagEmptyMessage);
        assertStepTooltip(Strings.FILL_COAL_BAG);

        when(easyBlastFurnaceConfig.useDepositInventory()).thenReturn(false);
        setCoalBag(coalBagFillMessage);
        setInventoryCount(oreID, 0);
        setInventoryCount(ItemID.GOLD_ORE, 1);
        equipGloves(true);
        setAtBank(false);
        assertStepTooltip(Strings.EQUIP_GOLDSMITH_GAUNTLETS);

        equipGloves(false);
        setInventoryCount(ItemID.GOLD_ORE, 0);
        setInventoryCount(oreID, 26);
        assertStepTooltip(Strings.PUT_ORE_ONTO_CONVEYOR_BELT);

        goToAndLoadConveyorBelt(oreID);
        assertStepTooltip(Strings.EMPTY_COAL_BAG);
        setCoalBag(coalBagEmptyMessage);

        setFurnaceCount(barVarbit, 1);
        setFurnaceCount(BarsOres.GOLD_BAR.getVarbit(), 1);
        setInventoryCount(ItemID.COAL, 1);
        assertStepTooltip(Strings.FILL_COAL_BAG);

        setFurnaceCount(barVarbit, 0);
        setFurnaceCount(BarsOres.GOLD_BAR.getVarbit(), 0);
        setInventoryCount(ItemID.COAL, 0);
        assertEquals(1, state.getCoalBag().getCoal());
        setFurnaceCount(BarsOres.COAL.getVarbit(), state.getCoalBag().getCoal());

        if (tickPerfect) {
            goldHybridTickPerfect(oreID, barVarbit, coalPer);
        } else {
            goldHybridNonTickPerfect(oreVarbit, barID, barVarbit);
        }
    }

    private void goldHybridNonTickPerfect(int oreVarbit, int barID, int barVarbit)
    {
        setWorldPoint(atBarDispenser);
        setFurnaceCount(oreVarbit, 26);
        assertStepTooltip(Strings.WAIT_FOR_BARS);

        setFurnaceCount(oreVarbit, 0);
        setFurnaceCount(barVarbit, 26);
        assertStepTooltip(Strings.EQUIP_ICE_OR_SMITHS_GLOVES);

        equipGloves(true);
        assertStepTooltip(Strings.COLLECT_BARS);

        collectBars(barID, barVarbit);
        assertStepTooltip(Strings.OPEN_BANK);

        setAtBank(true);
        assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

        setInventoryCount(barID, 0);
        assertStepTooltip(Strings.REFILL_COAL_BAG);

        setCoalBag(coalBagFillMessage);
        assertStepTooltip(Strings.EQUIP_GOLDSMITH_GAUNTLETS);

        equipGloves(false);
        assertStepTooltip(Strings.WITHDRAW_GOLD_ORE);

        setInventoryCount(ItemID.GOLD_ORE, 1);
        assertStepTooltip(Strings.PUT_ORE_ONTO_CONVEYOR_BELT);

        setAtBank(false);
    }

    private void goldHybridTickPerfect(int oreID, int barVarbit, int coalPer)
    {
        setFurnaceCount(BarsOres.COAL.getVarbit(), 27 * (coalPer - state.getFurnace().getCoalOffset()));
        setInventoryCount(oreID, 1);
        setWorldPoint(atConveyorBelt);
        setInventoryCount(oreID, 0);
        setFurnaceCount(barVarbit, 1);
        assertStepTooltip(Strings.GO_TO_DISPENSER);

        setWorldPoint(notAtConveyorBelt);
        assertStepTooltip(Strings.EQUIP_ICE_OR_SMITHS_GLOVES);

        setWorldPoint(atBarDispenser);
        setFurnaceCount(barVarbit, 1);
        assertStepTooltip(Strings.COLLECT_BARS);

        setFurnaceCount(barVarbit, 0);
        setFurnaceCount(BarsOres.COAL.getVarbit(), 0);
        setAtBank(true);
        setCoalBag(coalBagFillMessage);
        setInventoryCount(ItemID.GOLD_ORE, 26);
        setAtBank(false);
        setWorldPoint(atConveyorBelt);
        setCoalBag(coalBagEmptyMessage);
        setInventoryCount(ItemID.GOLD_ORE, 0);
        setFurnaceCount(BarsOres.GOLD_BAR.getVarbit(), 28);
        setFurnaceCount(BarsOres.GOLD_ORE.getVarbit(), 26);
        setWorldPoint(atBarDispenser);
        equipGloves(true);
        assertStepTooltip(Strings.EQUIP_GOLDSMITH_GAUNTLETS_AFTER_COLLECT_BARS);

        setFurnaceCount(BarsOres.GOLD_BAR.getVarbit(), 0);
        setFurnaceCount(barVarbit, 27);
        assertStepTooltip(Strings.WAIT_FOR_BARS);
    }

	private void silverHybridMethod(
			int oreID, int oreVarbit, int barID, int barVarbit, String withdrawOreText, String methodName, int coalPer,
			boolean tickPerfect
	)
	{
		setInventoryItems(new Item[]{ new Item(Equipment.COAL_BAG.items[0], 1), new Item(oreID, 1) });
		setInventoryCount(oreID, 1);
		setInventoryCount(ItemID.SILVER_ORE, 1);
		setBankCount(Equipment.COAL_BAG.items[0], 1);
		assertEquals(methodName, methodHandler.getMethod().getName());
		assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

		setAtBank(true);
		setInventoryCount(oreID, 0);
		setInventoryCount(ItemID.SILVER_ORE, 0);
		assertStepTooltip(Strings.WITHDRAW_COAL_BAG);

		setInventoryCount(Equipment.COAL_BAG.items[0], 1);
		assertStepTooltip(Strings.WITHDRAW_ICE_OR_SMITHS_GLOVES);

		setInventoryCount(Equipment.ICE_GLOVES.items[0], 1);
		setBankCount(Equipment.SMITHING_CAPE.items[0], 1);
		assertStepTooltip(Strings.EQUIP_ICE_OR_SMITHS_GLOVES);
		setInventoryCount(Equipment.ICE_GLOVES.items[0], 0);

		equipGloves(true);
		assertStepTooltip(Strings.WITHDRAW_SMITHING_CAPE);

		setInventoryCount(Equipment.SMITHING_CAPE.items[0], 1);
		setBankCount(Equipment.SMITHING_CAPE.items[0], 0);
		assertStepTooltip(Strings.EQUIP_SMITHING_CAPE);

		setInventoryCount(Equipment.SMITHING_CAPE.items[0], 0);
		setBankCount(Equipment.MAX_CAPE.items[0], 1);
		assertStepTooltip(Strings.WITHDRAW_MAX_CAPE);

		setInventoryCount(Equipment.MAX_CAPE.items[0], 1);
		setBankCount(Equipment.MAX_CAPE.items[0], 0);
		assertStepTooltip(Strings.EQUIP_MAX_CAPE);

		setInventoryCount(Equipment.MAX_CAPE.items[0], 0);

		setFurnaceCount(BarsOres.SILVER_BAR.getVarbit(), 28);
		setFurnaceCount(BarsOres.SILVER_ORE.getVarbit(), 26);
		setInventoryCount(ItemID.SILVER_ORE, 1);
		assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

		setInventoryCount(ItemID.SILVER_ORE, 0);
		assertStepTooltip(Strings.COLLECT_BARS);

		setFurnaceCount(BarsOres.SILVER_BAR.getVarbit(), 0);
		setFurnaceCount(BarsOres.SILVER_ORE.getVarbit(), 0);

		assertStepTooltip(Strings.FILL_COAL_BAG);
		setCoalBag(coalBagFillMessage);
		assertEquals(state.getCoalBag().getMaxCoal(), state.getCoalBag().getCoal());

		setFurnaceCount(BarsOres.COAL.getVarbit(), 27 * (coalPer - state.getFurnace().getCoalOffset()));
		assertStepTooltip(withdrawOreText);

		setInventoryCount(oreID, 26);
		when(easyBlastFurnaceConfig.useDepositInventory()).thenReturn(true);
		setCoalBag(coalBagEmptyMessage);
		assertStepTooltip(Strings.FILL_COAL_BAG);

		when(easyBlastFurnaceConfig.useDepositInventory()).thenReturn(false);
		setCoalBag(coalBagFillMessage);
		setInventoryCount(oreID, 0);
		setInventoryCount(ItemID.SILVER_ORE, 1);
		equipGloves(true);
		setAtBank(false);

		setInventoryCount(ItemID.SILVER_ORE, 0);
		setInventoryCount(oreID, 26);
		assertStepTooltip(Strings.PUT_ORE_ONTO_CONVEYOR_BELT);

		goToAndLoadConveyorBelt(oreID);
		assertStepTooltip(Strings.EMPTY_COAL_BAG);
		setCoalBag(coalBagEmptyMessage);

		setFurnaceCount(barVarbit, 1);
		setFurnaceCount(BarsOres.SILVER_BAR.getVarbit(), 1);
		setInventoryCount(ItemID.COAL, 1);
		assertStepTooltip(Strings.FILL_COAL_BAG);

		setFurnaceCount(barVarbit, 0);
		setFurnaceCount(BarsOres.SILVER_BAR.getVarbit(), 0);
		setInventoryCount(ItemID.COAL, 0);
		assertEquals(1, state.getCoalBag().getCoal());
		setFurnaceCount(BarsOres.COAL.getVarbit(), state.getCoalBag().getCoal());

		if (tickPerfect) {
			silverHybridTickPerfect(oreID, barVarbit, coalPer);
		} else {
			silverHybridNonTickPerfect(oreVarbit, barID, barVarbit);
		}
	}

	private void silverHybridNonTickPerfect(int oreVarbit, int barID, int barVarbit)
	{
		setWorldPoint(atBarDispenser);
		setFurnaceCount(oreVarbit, 26);
		assertStepTooltip(Strings.WAIT_FOR_BARS);

		setFurnaceCount(oreVarbit, 0);
		setFurnaceCount(barVarbit, 26);
		equipGloves(false);
		assertStepTooltip(Strings.EQUIP_ICE_OR_SMITHS_GLOVES);

		equipGloves(true);
		assertStepTooltip(Strings.COLLECT_BARS);

		collectBars(barID, barVarbit);
		assertStepTooltip(Strings.OPEN_BANK);

		setAtBank(true);
		assertStepTooltip(Strings.DEPOSIT_BARS_AND_ORES);

		setInventoryCount(barID, 0);
		assertStepTooltip(Strings.REFILL_COAL_BAG);

		setCoalBag(coalBagFillMessage);
		assertStepTooltip(Strings.WITHDRAW_SILVER_ORE);

		setInventoryCount(ItemID.SILVER_ORE, 1);
		assertStepTooltip(Strings.PUT_ORE_ONTO_CONVEYOR_BELT);

		setAtBank(false);
	}

	private void silverHybridTickPerfect(int oreID, int barVarbit, int coalPer)
	{
		setFurnaceCount(BarsOres.COAL.getVarbit(), 27 * (coalPer - state.getFurnace().getCoalOffset()));
		setInventoryCount(oreID, 1);
		setWorldPoint(atConveyorBelt);
		setInventoryCount(oreID, 0);
		setFurnaceCount(barVarbit, 1);
		assertStepTooltip(Strings.GO_TO_DISPENSER);

		setWorldPoint(notAtConveyorBelt);
		assertStepTooltip(Strings.EQUIP_ICE_OR_SMITHS_GLOVES);

		setWorldPoint(atBarDispenser);
		setFurnaceCount(barVarbit, 1);
		assertStepTooltip(Strings.COLLECT_BARS);

		setFurnaceCount(barVarbit, 0);
		setFurnaceCount(BarsOres.COAL.getVarbit(), 0);
		setAtBank(true);
		setCoalBag(coalBagFillMessage);
		setInventoryCount(ItemID.SILVER_ORE, 26);
		setAtBank(false);
		setWorldPoint(atConveyorBelt);
		setCoalBag(coalBagEmptyMessage);
		setInventoryCount(ItemID.SILVER_ORE, 0);
		setFurnaceCount(BarsOres.SILVER_BAR.getVarbit(), 28);
		setFurnaceCount(BarsOres.SILVER_ORE.getVarbit(), 26);
		setWorldPoint(atBarDispenser);
		equipGloves(true);

		setFurnaceCount(BarsOres.SILVER_BAR.getVarbit(), 0);
		setFurnaceCount(barVarbit, 27);
		assertStepTooltip(Strings.WAIT_FOR_BARS);
	}

    private void collectBars(int barID, int barVarbit)
    {
        setWorldPoint(notAtConveyorBelt);
        setInventoryCount(barID, 1);
        setFurnaceCount(barVarbit, 0);
    }

    private void goToAndLoadConveyorBelt(int oreID)
    {
        setAtBank(false);
        setWorldPoint(atConveyorBelt);
        setInventoryCount(oreID, 0);
    }

    private void setInventoryCount(int itemID, int count)
    {
        when(inventoryContainer.count(itemID)).thenReturn(count);
        easyBlastFurnacePlugin.onItemContainerChanged(event);
    }

    private void setEquipmentCount(int itemID, int count)
    {
        when(equipmentContainer.count(itemID)).thenReturn(count);
        easyBlastFurnacePlugin.onItemContainerChanged(event);
    }

    private void setBankCount(int itemID, int count)
    {
        when(bankContainer.count(itemID)).thenReturn(count);
        easyBlastFurnacePlugin.onItemContainerChanged(event);
    }

    private void setFurnaceCount(int varbit, int count)
    {
        when(client.getVarbitValue(varbit)).thenReturn(count);
        easyBlastFurnacePlugin.onVarbitChanged(blastFurnaceChange);
    }

    private void setWorldPoint(WorldPoint worldPoint)
    {
        when(localPlayer.getWorldLocation()).thenReturn(worldPoint);
        easyBlastFurnacePlugin.onItemContainerChanged(event);
    }

    private void setAtBank(boolean atBank) {
        when(bankWidget.isHidden()).thenReturn(!atBank);
        easyBlastFurnacePlugin.onItemContainerChanged(event);
    }

    private void assertStepTooltip(String expectedStrings)
    {
        MethodStep[] steps = methodHandler.getSteps();
        assertEquals(expectedStrings, steps[0].getTooltip());

    }

    private void setCoalBag(String emptyOrFillText)
    {
        // Empty coal bag to get Wait for bars step
        tickCount = tickCount + 1;
        when(client.getTickCount()).thenReturn(tickCount);
        ChatMessage chatMessageEvent = new ChatMessage(null, GAMEMESSAGE, "Bob", emptyOrFillText, null, 0);
        easyBlastFurnacePlugin.onChatMessage(chatMessageEvent);
    }

    private void setInventoryItems(Item[] items)
    {
        when(inventoryContainer.getItems()).thenReturn(items);
        easyBlastFurnacePlugin.onItemContainerChanged(event);
    }

    private void equipGloves(boolean iceGloves)
    {
        setInventoryCount(Equipment.ICE_GLOVES.items[0], iceGloves ? 0 : 1);
        setEquipmentCount(Equipment.ICE_GLOVES.items[0], iceGloves ? 1 : 0);
        setInventoryCount(Equipment.GOLDSMITH.items[0], iceGloves ? 1 : 0);
        setEquipmentCount(Equipment.GOLDSMITH.items[0], iceGloves ? 0 : 1);
    }
}

package com.toofifty.easyblastfurnace;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class EasyBlastFurnacePluginRunner
{
    public static void main(String[] args) throws Exception
    {
        ExternalPluginManager.loadBuiltin(EasyBlastFurnacePlugin.class);
        RuneLite.main(args);
    }
}
