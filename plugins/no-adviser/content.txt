package com.noadviser;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class NoAdviserPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(NoAdviserPlugin.class);
		RuneLite.main(args);
	}
}
package com.noadviser;


import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.MenuEntry;
import net.runelite.api.MenuAction;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.HitsplatApplied;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.api.events.MenuEntryAdded;
import javax.inject.Inject;
import java.time.Instant;


@Slf4j
@PluginDescriptor(
	name = "No Adviser"
)
public class NoAdviserPlugin extends Plugin
{
	private static final int COMBAT_TIMER_SECONDS = 10;

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private NoAdviserConfig config;

	private Instant lastCombatTime;

	@Provides
	NoAdviserConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(NoAdviserConfig.class);
	}

	@Subscribe
	public void onAnimationChanged(AnimationChanged event)
	{
		if (event.getActor() == client.getLocalPlayer() && isPlayerAttackAnimation(event.getActor().getAnimation()))
		{
			lastCombatTime = Instant.now();
		}
	}

	@Subscribe
	public void onHitsplatApplied(HitsplatApplied event)
	{
		if (event.getActor() == client.getLocalPlayer())
		{
			lastCombatTime = Instant.now();
		}
	}

	@Subscribe
	public void onMenuEntryAdded(MenuEntryAdded event)
	{
		if (event.getType() == MenuAction.CC_OP.getId() && event.getOption().equalsIgnoreCase("Open Activity Adviser"))
		{
			if (isInCombat() || config.alwaysDisabled())
			{
				// Remove the menu entry to disable both left and right-click options
				final MenuEntry[] menuEntries = client.getMenuEntries();
				final int lastIndex = menuEntries.length - 1;

				MenuEntry[] newMenuEntries = new MenuEntry[lastIndex];
				System.arraycopy(menuEntries, 0, newMenuEntries, 0, lastIndex);
				client.setMenuEntries(newMenuEntries);
			}
		}
	}

	private boolean isInCombat()
	{
		if (lastCombatTime == null)
		{
			return false;
		}

		return lastCombatTime.plusSeconds(COMBAT_TIMER_SECONDS).isAfter(Instant.now());
	}

	private boolean isPlayerAttackAnimation(int animationId)
	{
		// Add attack animation IDs for your specific use case, for example:
		// 806: Magic spell casting animation
		// 422: Generic player attack animation
		return animationId == 806 || animationId == 422;
	}
}
package com.noadviser;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("noadviser")
public interface NoAdviserConfig extends Config
{
	@ConfigItem(
		keyName = "alwaysdisabled",
		name = "Always Disabled",
		description = "By default the plugin only disables the button in combat."
	)
	default boolean alwaysDisabled() { return false; }
}

