package com.fightcavehelper;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class FightCaveHelperPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(FightCaveHelperPlugin.class);
		RuneLite.main(args);
	}
}
package com.fightcavehelper;

import com.fightcavehelper.ui.FightCaveHelperPanel;
import java.io.IOException;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

@Slf4j
@PluginDescriptor(
        name = "Fight Cave Helper",
        description = "Panel to predict and show Fight Cave waves",
        tags = {"fight", "cave", "jad", "pvm"}
)
public class FightCaveHelperPlugin extends Plugin {

    @Inject
    private ClientToolbar clientToolbar;
	private NavigationButton navButton;

	@Override
    protected void startUp() throws IOException
	{
		log.debug("fight cave helper started.");
		FightCaveHelperPanel panel = new FightCaveHelperPanel();

        navButton = NavigationButton.builder()
                .tooltip("Fight Cave Helper")
                .icon(ImageUtil.loadImageResource(getClass(), "/firecape.png"))
                .priority(50)
                .panel(panel)
                .build();

        clientToolbar.addNavigation(navButton);
    }

    @Override
    protected void shutDown(){
        clientToolbar.removeNavigation(navButton);
        log.info("fight cave helper stopped!");
    }

}

package com.fightcavehelper;

import com.fightcavehelper.ui.ButtonPanel;
import com.fightcavehelper.ui.WaveSpawnPanel;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import net.runelite.client.util.ImageUtil;

public class Wave extends JPanel
{
	public static int rotation;
	public static int number;
	private static String waveImgPath;
	private static String url;
	private static BufferedImage image;
	private static ImageIcon img;
	public static final String IMG_PATH = "/waves/%s-%s.jpg";
	//public static final String URL_PATH = "https://www.dropbox.com/home/fight-cave-waves?preview=%s-%s.jpg";
	public static String spawn1 = "-";
	public static String spawn2 = "-";
	public static String spawn4 = "-";
	public static String spawn2_sorted = "-";


	public Wave() //throws IOException
	{
		rotation = 0;
		number = 1;
		waveImgPath = String.format(IMG_PATH, rotation, number);
		image = ImageUtil.loadImageResource(getClass(), waveImgPath);
		img = new ImageIcon(image);
//		try
//		{
//		url = String.format(URL_PATH, rotation, number);
//		image = ImageIO.read(new URL(url));
//		img = new ImageIcon(image);
//		}
//		catch (IOException e){
//			e.printStackTrace();
//		}
	}

	public static void setImage() //throws IOException
	{
		waveImgPath = String.format(IMG_PATH, rotation, number);
		image = ImageUtil.loadImageResource(Wave.class, waveImgPath);
		img = new ImageIcon(image);
//		try
//		{
//		url = String.format(URL_PATH, rotation, number);
//		image = ImageIO.read(new URL(url));
//		img = new ImageIcon(image);
//		}
//		catch (IOException e){
//			e.printStackTrace();
//		}
	}

	public static ImageIcon getImage() { return img; }

	public static int getRotation()
	{
		return rotation;
	}
	public static int getNumber()
	{
		return number;
	}

	public static void setRotation(int rotation)
	{
		Wave.rotation = rotation;
	}

	public static void setNumber(int number)
	{
		Wave.number = number;
	}

	public static void reset() throws IOException
	{
		setRotation(0);
		setNumber(1);
		spawn1 = "-";
		spawn2 = "-";
		spawn4 = "-";
		setImage();
		WaveSpawnPanel.updateWave();
	}

	public static void addWaveSpawn() throws IOException
	{
		if (number == 1)
		{
			spawn1 = ButtonPanel.spawn1;
			increment();
		}

		else if (number == 2)
		{
			spawn2 = ButtonPanel.spawn2A + ButtonPanel.spawn2B;

			spawn2_sorted = spawn1 + "-" + sortString(spawn2);

			switch (spawn2_sorted)
			{
				case "C-NSWW":
					rotation = 1;
					updatePanel();
					break;
				case "C-ESS":
					rotation = 2;
					updatePanel();
					break;
				case "C-ESSW":
					rotation = 3;
					updatePanel();
					break;
				case "NW-CS":
					rotation = 4;
					updatePanel();
					break;
				case "NW-CES":
					rotation = 5;
					updatePanel();
					break;
				case "NW-ESSW":
					rotation = 6;
					updatePanel();
					break;
				case "S-CNW":
					//ButtonPanel.enableWave4();
					rotation = 0;
					updatePanel();
					//increment();
					break;
				case "S-ESSW":
					rotation = 9;
					updatePanel();
					break;
				case "SE-NSW":
					rotation = 10;
					updatePanel();
					break;
				case "SE-CSW":
					rotation = 11;
					updatePanel();
					break;
				case "SE-SSW":
					rotation = 12;
					updatePanel();
					break;
				case "SW-CNW":
					rotation = 13;
					updatePanel();
					break;
				case "SW-NSW":
					rotation = 14;
					updatePanel();
					break;
				case "SW-ESS":
					rotation = 15;
					updatePanel();
					break;
				default:
					ButtonPanel.resetBtns();
					Wave.reset();
					System.out.println("Invalid selection, try again");
					//updatePanel();
			}
		}
		else //if (number == 3)
		{
			spawn4 = ButtonPanel.spawn4A + ButtonPanel.spawn4B;
			String s = sortString(spawn4);
			WaveSpawnPanel.enableButtons(false);

			switch (s)
			{
				case "ESS":
					rotation = 7;
					WaveSpawnPanel.enableButtons(true);
					updatePanel();
					break;
				case "ESSW":
					rotation = 8;
					WaveSpawnPanel.enableButtons(true);
					updatePanel();
					break;
				default:
					ButtonPanel.resetBtns();
					Wave.reset();
					System.out.println("Invalid selection, try again");
					//updatePanel();
			}
		}
	}

	public static String getSpawn1()
	{
		return spawn1;
	}

	public static String getSpawn2()
	{
		return sortString(spawn2);
	}

	public static void increment() throws IOException
	{
		number++;
		setImage();
	}
	public static void decrement() throws IOException
	{
		number--;
		setImage();
	}

	public static String sortString(String input)
	{
		char[] tempArr = input.toCharArray();
		Arrays.sort(tempArr);
		return new String(tempArr);
	}
	public static void updatePanel() throws IOException
	{
		ButtonPanel.hidePanel();
		increment();
		WaveSpawnPanel.enableButtons(true);
	}

}

package com.fightcavehelper.ui;

import com.fightcavehelper.Wave;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import javax.swing.JButton;

public class SpawnButton extends JButton
{
	private static final Dimension PREFERRED_SIZE = new Dimension(33, 33);
	//String text;

	public SpawnButton(String text)
	{
		super(text);
		//this.text = text;

		setPreferredSize(PREFERRED_SIZE);
		setBackground(null);
		setForeground(Color.white);
		setBorder(null);
		setFont(new Font("Arial", Font.PLAIN, 12));

//		addActionListener(e -> click());
	}
//	public void click()
//	{
//		setBackground(Color.gray);
//		setForeground(Color.green);
//	}
}


package com.fightcavehelper.ui;

import com.fightcavehelper.Wave;
import java.awt.Color;
import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Objects;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;

public class ButtonPanel extends JPanel
{
	private static final Insets INSETS_LEFT_BORDER = new Insets(1, 0, 1, 1);
	private static final Insets INSETS_RIGHT_BORDER = new Insets(1, 1, 1, 0);
	private static final Insets INSETS = new Insets(1, 1, 1, 1);
	public static String spawn1;
	public static String spawn2A;
	public static String spawn2B;
	public static String spawn4A;
	public static String spawn4B;
	private static int choices = 0;
	private static int choices4 = 0;
	static ArrayList<JButton> btns1 = new ArrayList<>();
	static ArrayList<JButton> btns2 = new ArrayList<>();
	static ArrayList<JButton> btns4 = new ArrayList<>();

	//private final FightCaveHelperPanel panel;
	private final GridBagConstraints c;
	public static JLabel wave1 = new JLabel("Wave 1:");
	public static JLabel wave2 = new JLabel("Wave 2:");
	public static JLabel wave4 = new JLabel("Wave 4:");


	public ButtonPanel()
	{
		super();

		//this.panel = panel;

		setLayout(new GridBagLayout());

		c = new GridBagConstraints();
		c.fill = GridBagConstraints.HORIZONTAL;
		c.gridx = 0;
		c.gridy	= 0;

		//setBackground(null);

//		JLabel title = new JLabel("Wave 1: ");
//		title.setFont(new Font("Verdana", Font.PLAIN, 12));
//		title.setForeground(Color.white);
//		add(title);

		add(wave1);
		createBtns1();

		add(wave2);
		createBtns2();

		add(wave4);
		wave4.setVisible(false);
		createBtns4();
	}

	public void createBtns1()
	{


		btns1.add(new SpawnButton("C"));
		btns1.add(new SpawnButton("NW"));
		btns1.add(new SpawnButton("S"));
		btns1.add(new SpawnButton("SE"));
		btns1.add(new SpawnButton("SW"));

		addComp(wave1);

		for (JButton btn : btns1)
		{
			btn.addActionListener(e -> {
				disableBtns1();
				setSpawn1(btn);
				enableBtns2();
				try
				{
					Wave.addWaveSpawn();
				}
				catch (IOException ex)
				{
					throw new RuntimeException(ex);
				}
				WaveSpawnPanel.updateWave();

			});
			add(btn);
			addComp(btn);
		}
	}

	public void disableBtns1()
	{
		for (JButton btn : btns1)
		{
			btn.setEnabled(false);
		}
	}

	public void setSpawn1(JButton btn)
	{
		spawn1 = btn.getText();
		btn.setBackground(Color.green);
		//Debug();
	}

	public void createBtns2()
	{

		btns2.add(new SpawnButton("C"));
		btns2.add(new SpawnButton("NW"));
		btns2.add(new SpawnButton("S"));
		btns2.add(new SpawnButton("SE"));
		btns2.add(new SpawnButton("SW"));

		addComp(wave2);

		for (JButton btn : btns2)
		{
			btn.setEnabled(false);
			btn.addActionListener(e -> {
				btn.setEnabled(false);
				//choices++;
				disableBtns2(btn.getText());
				try
				{
					setSpawn2(btn);
				}
				catch (IOException ex)
				{
					throw new RuntimeException(ex);
				}
			});
			add(btn);
			addComp(btn);
		}
	}

	public void enableBtns2()
	{
		for (JButton btn : btns2)
		{
			if (!Objects.equals(btn.getText(), spawn1))
			{
				btn.setEnabled(true);
			}
		}
	}

	public void disableBtns2(String text)
	{
//		if (choices < 2)
//		{
//
//		}
		if (choices >= 2)
		{
			for (JButton btn : btns2)
			{
				if (!btn.getText().equals(text))
				{
					btn.setEnabled(false);
				}
			}
		}
	}

	public void setSpawn2(JButton btn) throws IOException
	{
		if (choices == 0)
		{
			choices++;
			spawn2A = btn.getText();
			btn.setBackground(Color.green);
		}
		else
		{
			choices++;
			spawn2B = btn.getText();
			btn.setBackground(Color.green);
			//Wave.increment();
			Wave.addWaveSpawn();
			WaveSpawnPanel.updateWave();
		}
		//Debug();

	}

	public void createBtns4()
	{

//		btns4.add(new SpawnButton("C"));
//		btns4.add(new SpawnButton("NW"));
		btns4.add(new SpawnButton("S"));
		btns4.add(new SpawnButton("SE"));
		btns4.add(new SpawnButton("SW"));

		addComp(wave4);

		for (JButton btn : btns4)
		{
			btn.setEnabled(false);
			btn.setVisible(false);
			btn.addActionListener(e -> {
				btn.setEnabled(false);
				//choices++;
				//disableBtns4();
				try
				{
					setSpawn4(btn);
				}
				catch (IOException ex)
				{
					throw new RuntimeException(ex);
				}
			});
			add(btn);
			addComp(btn);
		}
	}

	public void disableBtns4()
	{
		for (JButton btn : btns4)
		{
			btn.setEnabled(false);
		}
	}

	public void setSpawn4(JButton btn) throws IOException
	{
		if (choices4 == 0)
		{
			choices4++;
			spawn4A = btn.getText();
			btn.setBackground(Color.green);
		}
		else
		{
			spawn4B = btn.getText();
			btn.setBackground(Color.green);
			Wave.addWaveSpawn();
			WaveSpawnPanel.updateWave();
		}

	}

	public static void enableWave4()
	{
		for (JButton btn : btns2)
		{
			btn.setEnabled(false);
		}

		wave4.setVisible(true);

		for (JButton btn : btns4)
		{
			btn.setEnabled(true);
			btn.setVisible(true);
		}
	}


	public static void resetBtns()
	{
		choices = 0;
		choices4 = 0;
		spawn1 = "-";
		spawn2A = "-";
		spawn2B = "-";
		spawn4A = "-";
		spawn4B = "-";
		wave1.setVisible(true);
		wave2.setVisible(true);
		wave4.setVisible(false);
		WaveSpawnPanel.enableButtons(false);
		for (JButton btn : btns1)
		{
			btn.setForeground(Color.white);
			btn.setBackground(null);
			btn.setEnabled(true);
			btn.setVisible(true);
		}
		for (JButton btn : btns2)
		{
			btn.setForeground(Color.white);
			btn.setBackground(null);
			btn.setEnabled(false);
			btn.setVisible(true);
		}
		for (JButton btn : btns4)
		{
			btn.setForeground(Color.white);
			btn.setBackground(null);
			btn.setEnabled(false);
			btn.setVisible(false);
		}
		//Debug();
	}

	private void addComp(Component component)
	{
		switch (c.gridx)
		{
			case 0:
				c.insets = INSETS_LEFT_BORDER;
				break;
			case 6:
				c.insets = INSETS_RIGHT_BORDER;
				break;
			default:
				c.insets = INSETS;
		}
		if (c.gridwidth == 6)
		{
			c.insets = INSETS_RIGHT_BORDER;
		}
		add(component, c);
		c.gridx = ++c.gridx % 6;
		if (c.gridx == 0)
		{
			++c.gridy;
		}
	}

	public static void hidePanel()
	{
		wave1.setVisible(false);
		wave2.setVisible(false);
		wave4.setVisible(false);
		for (JButton btn : btns1)
		{
			btn.setVisible(false);
		}
		for (JButton btn : btns2)
		{
			btn.setVisible(false);
		}
		for (JButton btn : btns4)
		{
			btn.setVisible(false);
		}
	}

	public static void Debug()
	{
		System.out.println("-------------------");
		System.out.println("Spawn1 = " + spawn1);
		System.out.println("Spawn2A = " + spawn2A);
		System.out.println("Spawn2B = " + spawn2B);
		System.out.println("Choices = " + choices);
		System.out.println("Rotation = " + Wave.rotation);
		System.out.println("Wave Number = " + Wave.number);
	}

}

package com.fightcavehelper.ui;

import com.fightcavehelper.Wave;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionListener;
import java.io.IOException;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;

public class TopPanel extends JPanel
{

	public TopPanel()
	{
		setLayout(new BorderLayout());
		setBackground(null);

		JLabel title = new JLabel("Fight Cave Helper");
		title.setForeground(Color.white);
		title.setFont(new Font("Verdana", Font.BOLD, 12));

		JButton resetBtn = new JButton("Reset");
		resetBtn.setFont(new Font("Verdana", Font.PLAIN, 11));
		resetBtn.setBackground(Color.darkGray);
		resetBtn.setForeground(Color.white);
		resetBtn.addActionListener(e -> {
			ButtonPanel.resetBtns();
			try
			{
				Wave.reset();
			}
			catch (IOException ex)
			{
				throw new RuntimeException(ex);
			}
		});


		add(title, BorderLayout.WEST);
		add(resetBtn, BorderLayout.EAST);
	}

}

package com.fightcavehelper.ui;

import java.awt.BorderLayout;
import java.io.IOException;
import javax.inject.Singleton;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.PluginPanel;

@Slf4j
@Singleton
public class FightCaveHelperPanel extends PluginPanel
{
	public FightCaveHelperPanel() throws IOException
	{
		super();

		TopPanel topPanel = new TopPanel();
		ButtonPanel buttonPanel = new ButtonPanel();
		WaveSpawnPanel waveSpawnPanel = new WaveSpawnPanel();


		setLayout(new BorderLayout(5, 5));


		add(topPanel, BorderLayout.NORTH);
		add(buttonPanel, BorderLayout.CENTER);
		add(waveSpawnPanel, BorderLayout.SOUTH);
	}

}


package com.fightcavehelper.ui;

import com.fightcavehelper.Wave;
import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;

public class WaveSpawnPanel extends JPanel
{
	public static JLabel wave_number = new JLabel("Wave: " + Wave.getNumber());
	public static JLabel wave_rotation = new JLabel("Rotation: " + Wave.getRotation());
	public static JLabel spawn1 = new JLabel("S1: " + Wave.getSpawn1());
	public static JLabel spawn2 = new JLabel("S2: " + Wave.getSpawn2());
	public static ImageIcon spawnImg = new ImageIcon(String.valueOf(Wave.getImage()));
	public static JLabel img = new JLabel();
	public static JButton next = new JButton("Next");
	public static JButton back = new JButton("Back");


	public WaveSpawnPanel() throws IOException
	{
		setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		setBackground(null);


		img.setIcon(spawnImg);
		c.gridx = 0;
		c.gridy = 3;
		c.gridwidth = 2;
		c.weighty = 1;
		c.insets = new Insets(5, 3, 5, 0);
		add(img, c);

		wave_number.setForeground(Color.white);
		c.gridx = 1;
		c.gridy = 1;
		c.gridwidth = 1;
		c.weightx = 0.5;
		c.weighty = 1;
		add(wave_number, c);

		wave_rotation.setForeground(Color.white);
		c.gridx = 0;
		c.gridy = 1;
		c.gridwidth = 1;
		c.weightx = 0.5;
		c.weighty = 1;
		add(wave_rotation, c);

		spawn1.setForeground(Color.white);
		c.gridx = 0;
		c.gridy = 2;
		c.gridwidth = 1;
		c.weightx = 0.5;
		c.weighty = 1;
		//add(spawn1, c);

		spawn2.setForeground(Color.white);
		c.gridx = 1;
		c.gridy = 2;
		c.gridwidth = 1;
		c.weightx = 0.5;
		c.weighty = 1;
		//add(spawn2, c);

		//JButton next = new JButton("Next");
		c.gridx = 0;
		c.gridy = 0;
		c.gridwidth = 1;
		c.weightx = 0.5;
		c.weighty = 0.2;
		next.setBackground(Color.green);
		next.setEnabled(false);
		next.addActionListener(e -> {
			if(Wave.number > 2 && Wave.number < 63)
			{
				try
				{
					Wave.increment();
				}
				catch (IOException ex)
				{
					throw new RuntimeException(ex);
				}
				updateWave();
			}
			if (Wave.spawn2_sorted.equals("S-CNW") && Wave.number == 4 && Wave.rotation == 0)
			{
				ButtonPanel.enableWave4();
				enableButtons(false);
			}

		});
		add(next, c);

		//JButton back = new JButton("Back");
		c.gridx = 1;
		c.gridy = 0;
		c.gridwidth = 1;
		c.weightx = 0.5;
		c.weighty = 0.2;
		back.setBackground(Color.red);
		back.setEnabled(false);
		back.addActionListener(e -> {
			if(Wave.number > 3)
			{
				try
				{
					Wave.decrement();
				}
				catch (IOException ex)
				{
					throw new RuntimeException(ex);
				}
				updateWave();
			}

		});
		add(back, c);

		Wave.reset();
		updateWave();
	}

	public static void updateWave()
	{
		spawnImg = Wave.getImage();
		img.setIcon(spawnImg);
		wave_number.setText("Wave: " + Wave.getNumber());
		wave_rotation.setText("Rotation: " + Wave.getRotation());
		spawn1.setText("S1: " + Wave.getSpawn1());
		spawn2.setText("S2: " + Wave.getSpawn2());
	}
	public static void enableButtons(boolean state)
	{
		next.setEnabled(state);
		back.setEnabled(state);
	}

}


