package com.equipalert;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class EquipAlertTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(EquipAlertPlugin.class);
		RuneLite.main(args);
	}
}
package com.equipalert;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("equipAlert")
public interface EquipAlertConfig extends Config {
    @ConfigItem(keyName = "phoenix", name = "Enable Phoenix Necklace", description = "Highlights Phoenix Necklaces", position = 1)
    default boolean phoenix() 
    {
        return true;
    }

    @ConfigItem(keyName = "binding", name = "Enable Binding Necklace", description = "Highlights Binding Necklaces", position = 2)
    default boolean binding() 
    {
        return true;
    }

    @ConfigItem(keyName = "slaughter", name = "Enable Bracelet of Slaughter", description = "Highlights Bracelets of Slaughter", position = 3)
    default boolean slaughter() 
    {
        return true;
    }

    @ConfigItem(keyName = "expeditious", name = "Enable Expeditious Bracelet", description = "Highlights Expeditious Bracelets", position = 4)
    default boolean expeditious() 
    {
        return true;
    }

    @ConfigItem(keyName = "dodgy", name = "Enable Dodgy Necklace", description = "Highlights Dodgy Necklaces", position = 5)
    default boolean dodgy() 
    {
        return true;
    }

    @ConfigItem(keyName = "recoil", name = "Enable Ring of Recoil", description = "Highlights Rings of Recoil", position = 6)
    default boolean recoil() 
    {
        return true;
    }

    @ConfigItem(keyName = "flamtaer", name = "Enable Flamtaer Bracelets", description = "Highlights Flamtaer Bracelets", position = 7)
    default boolean flamtaer() 
    {
        return false;
    }

    @ConfigItem(keyName = "chemistry", name = "Enable Amulet Of Chemistry", description = "Highlights Amulets Of Chemistry", position = 8)
    default boolean chemistry() 
    {
        return false;
    }

    @ConfigItem(keyName = "bounty", name = "Enable Amulet of Bounty", description = "Highlights Amulets of Bounty", position = 9)
    default boolean bounty() 
    {
        return false;
    }

    @ConfigItem(keyName = "faith", name = "Enable Necklace of Faith", description = "Highlights necklace of faiths", position = 10)
    default boolean faith() 
    {
        return false;
    }

    @ConfigItem(keyName = "clay", name = "Enable Bracelet of Clay", description = "Highlights Bracelets of Clay", position = 11)
    default boolean clay() 
    {
        return false;
    }

    @ConfigItem(keyName = "efaritay", name = "Enable Efaritay's Aid", description = "Highlights Efaritay's Aid Rings", position = 12)
    default boolean efaritay() 
    {
        return false;
    }

    @ConfigItem(keyName = "forging", name = "Enable Ring of Forging", description = "Highlights Rings of Forging", position = 13)
    default boolean forging() 
    {
        return false;
    }

    @ConfigItem(keyName = "inoculation", name = "Enable Inoculation Bracelet", description = "Highlights Inoculation Bracelets", position = 14)
    default boolean inoculation() 
    {
        return false;
    }

    @ConfigItem(keyName = "pursuit", name = "Enable Ring of Pursuit", description = "Highlights Rings of Pursuit", position = 15)
    default boolean pursuit() 
    {
        return false;
    }

    @ConfigItem(keyName = "heavyOutline", name = "Strong Visibility", description = "Makes the highlighting more obvious", position = 16)
    default boolean heavyOutline()
    {
        return true;
    }

}
package com.equipalert;

import net.runelite.api.Client;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.*;
import net.runelite.api.ItemID;

import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.Map;

public class EquipAlertHighlightOverlay extends WidgetItemOverlay
{
    private final Client client;
    private final EquipAlertPlugin plugin;
    private final ItemManager itemManager;
    private EquipAlertConfig config;

    @Inject
    private EquipAlertHighlightOverlay(Client client, EquipAlertPlugin plugin, ItemManager itemManager, EquipAlertConfig config)
    {
        this.client = client;
        this.plugin = plugin;
        this.itemManager = itemManager;
        this.config = config;
        showOnInventory();
    }

    @Override
    public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem widgetItem)
    {
        Color color = EquipAlertPlugin.itemsToHighlight.get(itemId);
        if (color != null)
        {
            Rectangle bounds = widgetItem.getCanvasBounds();

            if(config.heavyOutline()){
                graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), 50));
                graphics.fillRect((int) bounds.getX(), (int) bounds.getY(), (int) bounds.getWidth(), (int) bounds.getHeight());

                // Draw the outline
                final BufferedImage outline = itemManager.getItemOutline(itemId, widgetItem.getQuantity(), color);
                graphics.drawImage(outline, (int) bounds.getX(), (int) bounds.getY(), null);
            } else {
                final BufferedImage outline = itemManager.getItemOutline(itemId, widgetItem.getQuantity(), color);
                graphics.drawImage(outline, (int) bounds.getX(), (int) bounds.getY(), null);
            }

        }
    }


}

package com.equipalert;

import javax.inject.Inject;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.ItemID;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ProfileChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.awt.*;
import java.util.HashMap;
import java.util.Map;

@Slf4j
@PluginDescriptor(name = "EquipAlert")
public class EquipAlertPlugin extends Plugin 
{
	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private EquipAlertHighlightOverlay equipAlertHighlightOverlay;

	@Inject
	private EquipAlertConfig config;

	@Inject
	private ConfigManager configManager;

	private boolean hasAmuletEquipped = false;
	private boolean hasBraceletEquipped = false;
	private boolean hasRingEquipped = false;

	public static Map<Integer, Color> itemsToHighlight = new HashMap<>();

	@Provides
	EquipAlertConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(EquipAlertConfig.class);
	}

	@Override
	protected void startUp() throws Exception 
	{
		migrateConfig();
		overlayManager.add(equipAlertHighlightOverlay);
	}

	@Override
	protected void shutDown() throws Exception 
	{
		overlayManager.remove(equipAlertHighlightOverlay);
	}

	@Subscribe
	public void onProfileChanged(ProfileChanged profileChanged) 
	{
		migrateConfig();
	}

	@Subscribe
	public void onGameTick(GameTick gameTick) 
	{
		ItemContainer playerEquipment = client.getItemContainer(InventoryID.EQUIPMENT);
		boolean amuletEquipped = checkSlot(playerEquipment, EquipmentInventorySlot.AMULET.getSlotIdx());
		boolean braceletEquipped = checkSlot(playerEquipment, EquipmentInventorySlot.GLOVES.getSlotIdx());
		boolean ringEquipped = checkSlot(playerEquipment, EquipmentInventorySlot.RING.getSlotIdx());

		updateMap();

		if (amuletEquipped) 
		{
			itemsToHighlight.remove(ItemID.PHOENIX_NECKLACE);
			itemsToHighlight.remove(ItemID.BINDING_NECKLACE);
			itemsToHighlight.remove(ItemID.DODGY_NECKLACE);
			itemsToHighlight.remove(ItemID.AMULET_OF_CHEMISTRY);
			itemsToHighlight.remove(ItemID.AMULET_OF_BOUNTY);
			itemsToHighlight.remove(ItemID.NECKLACE_OF_FAITH);
		}

		if (braceletEquipped) 
		{
			itemsToHighlight.remove(ItemID.BRACELET_OF_SLAUGHTER);
			itemsToHighlight.remove(ItemID.EXPEDITIOUS_BRACELET);
			itemsToHighlight.remove(ItemID.FLAMTAER_BRACELET);
			itemsToHighlight.remove(ItemID.BRACELET_OF_CLAY);
			itemsToHighlight.remove(ItemID.INOCULATION_BRACELET);
		}

		if (ringEquipped) 
		{
			itemsToHighlight.remove(ItemID.RING_OF_RECOIL);
			itemsToHighlight.remove(ItemID.EFARITAYS_AID);
			itemsToHighlight.remove(ItemID.RING_OF_FORGING);
			itemsToHighlight.remove(ItemID.RING_OF_PURSUIT);
		}

		hasAmuletEquipped = amuletEquipped;
		hasBraceletEquipped = braceletEquipped;
		hasRingEquipped = ringEquipped;

	}

	private void updateMap() 
	{
		// grabs the inventory item container
		ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);

		if (inventory != null && (!hasAmuletEquipped || !hasBraceletEquipped || !hasRingEquipped)) 
		{
			// resets HashMap
			itemsToHighlight.clear();

			Item[] playerInventory = inventory.getItems();

			for (Item item : playerInventory) 
			{
				switch (item.getId()) 
				{
					case ItemID.PHOENIX_NECKLACE:
						if (config.phoenix()) 
						{
							itemsToHighlight.put(ItemID.PHOENIX_NECKLACE, Color.RED);
						}
						break;
					case ItemID.BINDING_NECKLACE:
						if (config.binding()) 
						{
							itemsToHighlight.put(ItemID.BINDING_NECKLACE, Color.GREEN);
						}
						break;
					case ItemID.BRACELET_OF_SLAUGHTER:
						if (config.slaughter()) 
						{
							itemsToHighlight.put(ItemID.BRACELET_OF_SLAUGHTER, Color.RED);
						}
						break;
					case ItemID.EXPEDITIOUS_BRACELET:
						if (config.expeditious()) 
						{
							itemsToHighlight.put(ItemID.EXPEDITIOUS_BRACELET, Color.YELLOW);
						}
						break;
					case ItemID.DODGY_NECKLACE:
						if (config.dodgy()) 
						{
							itemsToHighlight.put(ItemID.DODGY_NECKLACE, Color.RED);
						}
						break;
					case ItemID.RING_OF_RECOIL:
						if (config.recoil()) 
						{
							itemsToHighlight.put(ItemID.RING_OF_RECOIL, Color.RED);
						}
						break;
					case ItemID.FLAMTAER_BRACELET:
						if (config.flamtaer()) 
						{
							itemsToHighlight.put(ItemID.FLAMTAER_BRACELET, Color.GREEN);
						}
						break;
					case ItemID.AMULET_OF_CHEMISTRY:
						if (config.chemistry()) 
						{
							itemsToHighlight.put(ItemID.AMULET_OF_CHEMISTRY, Color.GREEN);
						}
						break;
					case ItemID.AMULET_OF_BOUNTY:
						if (config.bounty()) 
						{
							itemsToHighlight.put(ItemID.AMULET_OF_BOUNTY, Color.YELLOW);
						}
						break;
					case ItemID.NECKLACE_OF_FAITH:
						if (config.faith()) 
						{
							itemsToHighlight.put(ItemID.NECKLACE_OF_FAITH, Color.PINK);
						}
						break;
					case ItemID.BRACELET_OF_CLAY:
						if (config.clay()) 
						{
							itemsToHighlight.put(ItemID.BRACELET_OF_CLAY, Color.BLUE);
						}
						break;
					case ItemID.EFARITAYS_AID:
						if (config.efaritay()) 
						{
							itemsToHighlight.put(ItemID.EFARITAYS_AID, Color.YELLOW);
						}
						break;
					case ItemID.RING_OF_FORGING:
						if (config.forging()) 
						{
							itemsToHighlight.put(ItemID.RING_OF_FORGING, Color.RED);
						}
						break;
					case ItemID.INOCULATION_BRACELET:
						if (config.inoculation()) 
						{
							itemsToHighlight.put(ItemID.INOCULATION_BRACELET, Color.YELLOW);
						}
						break;
					case ItemID.RING_OF_PURSUIT:
						if (config.pursuit()) 
						{
							itemsToHighlight.put(ItemID.RING_OF_PURSUIT, Color.GREEN);
						}
						break;
					default:
						break;
				}
			}
		}
	}

	private boolean checkSlot(ItemContainer playerEquipment, int slotType) 
	{
		if (playerEquipment != null) 
		{
			Item item = playerEquipment.getItem(slotType);
			return item != null;
		}
		return false;
	}

	private void migrateConfig()
	{
		//Migrates profiles using the previous version of the plugin
		String oldConfigGroup = "pneckReminder";
		String oldKeyName = "neckOfFaith";
		String newConfigGroup = "equipAlert";
		String newKeyName = "faith";

		Boolean oldConfigValue = configManager.getConfiguration(oldConfigGroup, oldKeyName, Boolean.class);
		if (oldConfigValue != null)
		{
			configManager.setConfiguration(newConfigGroup, newKeyName, oldConfigValue);
			configManager.unsetConfiguration(oldConfigGroup, oldKeyName);
		}
	}

	
}

