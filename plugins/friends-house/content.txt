package com.ewyboy;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;
import org.junit.Test;

import static org.junit.Assert.assertNotNull;

public class FriendsHousePluginTest {
    public static void main(String[] args) throws Exception {
        ExternalPluginManager.loadBuiltin(FriendsHousePlugin.class);
        RuneLite.main(args);
    }

    @Test
    public void testPluginInitialization() {
        FriendsHousePlugin plugin = new FriendsHousePlugin();
        assertNotNull("Plugin should not be null", plugin);
    }

    @Test
    public void testPluginName() {
        FriendsHousePlugin plugin = new FriendsHousePlugin();
        assertNotNull("Plugin name should not be null", plugin.getName());
    }

}
package com.ewyboy;

import net.runelite.api.Client;
import net.runelite.api.FontID;
import net.runelite.api.VarClientStr;
import net.runelite.api.widgets.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Objects;

public class FriendsHouse {

    private static final Logger log = LoggerFactory.getLogger(FriendsHouse.class);
    private final Client client;
    private Widget fill;

    public FriendsHouse(Widget parent, Client client, boolean hasLastInput) {
        this.client = client;

        if (parent == null) {
            return;
        }

        fill = parent.createChild(WidgetType.TEXT);
        prep(fill, (parent.getWidth() / 2), hasLastInput);
    }

    private void prep(Widget widget, int parentWidth, boolean hasLastInput) {
        widget.setTextColor(0x800000);
        widget.setFontId(FontID.VERDANA_11);

        // Set the original dimensions of the widget
        widget.setOriginalHeight(20);
        widget.setOriginalWidth(100);  // Ensure this matches your desired width

        // Calculate the x position to center the widget
        int x = hasLastInput
                ? 10
                : parentWidth - (widget.getOriginalWidth() / 2);

        var y = hasLastInput
                ? 110
                : 5;

        // Set the widget position
        widget.setOriginalX(x);
        widget.setOriginalY(y);

        // Set the width and height modes
        widget.setWidthMode(WidgetSizeMode.ABSOLUTE);
        widget.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);

        // Center the text
        widget.setXTextAlignment(WidgetTextAlignment.CENTER);

        widget.setHasListener(true);
        widget.setOnMouseRepeatListener((JavaScriptCallback) ev -> widget.setTextColor(0xFFFFFF));
        widget.setOnMouseLeaveListener((JavaScriptCallback) ev -> widget.setTextColor(0x800000));

        widget.revalidate();
    }

    public void setInputText(String name) {
        fill.setText("<col=000000>Name:</col> " + name);
        fill.setAction(0, name);
        fill.setOnOpListener((JavaScriptCallback) ev -> {
            Objects.requireNonNull(client.getWidget(ComponentID.CHATBOX_FULL_INPUT)).setText(name);
            client.setVarcStrValue(VarClientStr.INPUT_TEXT, name);
        });
        fill.revalidate();
    }

}

package com.ewyboy;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("Friends House")
public interface FriendsHouseConfig extends Config {
    @ConfigItem(
            keyName = "name",
            name = "Name",
            description = "Name of the players house to enter"
    )

    default String name() {
        return null;
    }

}
package com.ewyboy;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.VarClientInt;
import net.runelite.api.events.VarClientIntChanged;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import javax.inject.Inject;
import java.util.Arrays;
import java.util.Objects;

@Slf4j
@PluginDescriptor(
        name = "Friend's House",
        description = "Quickly enter your friend's house with a single click",
        tags = {"friend", "friends", "house", "poh", "portal", "name"}
)
public class FriendsHousePlugin extends Plugin {
    @Inject
    private Client client;

    @Inject
    private ClientThread clientThread;

    @Inject
    private FriendsHouseConfig config;

    @Override
    protected void startUp() throws Exception {
    }

    @Override
    protected void shutDown() throws Exception {
    }

    @Subscribe
    public void onVarClientIntChanged(VarClientIntChanged event) {
        if (config.name() == null || config.name().isEmpty()) {
            return;
        }

        if (event.getIndex() != VarClientInt.INPUT_TYPE || client.getVarcIntValue(VarClientInt.INPUT_TYPE) != 8){
            return;
        }

        clientThread.invokeLater(() -> {
            var chatboxContainer = client.getWidget(ComponentID.CHATBOX_CONTAINER);
            if (chatboxContainer == null) {
                return;
            }

            var chatboxTitleWidget = client.getWidget(ComponentID.CHATBOX_TITLE);
            if (chatboxTitleWidget == null) {
                return;
            }

            String title = chatboxTitleWidget.getText();
            if (title == null || !title.toLowerCase().contains("enter name:")) {
                return;
            }

            var children = chatboxContainer.getChildren();

            boolean lastNameFound = false;

            if (children != null) {
                lastNameFound = Arrays.stream(children)
                        .filter(Objects::nonNull)
                        .map(Widget::getText)
                        .filter(Objects::nonNull)
                        .map(String::toLowerCase)
                        .anyMatch(text -> text.contains("last name:"));
            }

            var friendsHouse = new FriendsHouse(chatboxContainer, client, lastNameFound);
            friendsHouse.setInputText(config.name());
            chatboxContainer.revalidate();
        });
    }

    @Provides
    FriendsHouseConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(FriendsHouseConfig.class);
    }
}

