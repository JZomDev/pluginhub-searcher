package com.clairemira;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Experience;
import net.runelite.api.Skill;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Untrimmed Slayer Cape Helper",
	description = "Provides helpful information to obtain an untrimmed 99 Slayer cape.",
	tags = {"untrimmed","slayer","cape","helper","cannon"}
)
public class UntrimmedSlayerCapeHelperPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private UntrimmedSlayerCapeHelperConfig config;

	@Inject
	private UntrimmedSlayerCapeHelperOverlayPanel overlayPanel;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlayPanel);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlayPanel);
	}

	@Provides
	UntrimmedSlayerCapeHelperConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(UntrimmedSlayerCapeHelperConfig.class);
	}

	public int getSlayerExpRemaining()
	{
		int exp99 = Experience.getXpForLevel(99);
		int slayerExp = client.getSkillExperience(Skill.SLAYER);

		return exp99 - slayerExp;
	}

	public int getProjectedHitpointsExp()
	{
		int hpExp = client.getSkillExperience(Skill.HITPOINTS);
		double projectedHitpointsExp = getSlayerExpRemaining() * 1.33 + hpExp;

		return (int) Math.round(projectedHitpointsExp);
	}

	public int getSlayerOnlyExpRemaining()
    {
        int exp99 = Experience.getXpForLevel(99);
        double slayerOnlyExpRemaining = (getProjectedHitpointsExp() - exp99) / 1.33;

        return (int) Math.round(slayerOnlyExpRemaining);
    }
}

package com.clairemira;

import java.awt.*;
import java.text.NumberFormat;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.Experience;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.TitleComponent;

public class UntrimmedSlayerCapeHelperOverlayPanel extends OverlayPanel {
    private final UntrimmedSlayerCapeHelperPlugin plugin;
    private final UntrimmedSlayerCapeHelperConfig config;

    @Inject
    public UntrimmedSlayerCapeHelperOverlayPanel(Client client, UntrimmedSlayerCapeHelperPlugin plugin, UntrimmedSlayerCapeHelperConfig config)
    {
        super(plugin);
        this.plugin = plugin;
        this.config = config;

        panelComponent.setPreferredSize(new Dimension(110,100));
        setPosition(OverlayPosition.TOP_LEFT);
    }

    public void renderSlayerExpRemaining()
    {
        int slayerExpRemaining = plugin.getSlayerExpRemaining();
        int exp99 = Experience.getXpForLevel(99);
        String expStr = NumberFormat.getInstance().format(slayerExpRemaining);
        Color expTextColor = slayerExpRemaining < exp99 ? Color.ORANGE : Color.GREEN;

        panelComponent.getChildren().add(TitleComponent.builder()
                .text("Slayer XP to 99")
                .color(Color.WHITE)
                .build());

        panelComponent.getChildren().add(TitleComponent.builder()
                .text(expStr)
                .color(expTextColor)
                .build());
    }

    public void renderProjectedHitpointsExp()
    {
        int projectedHitpointsExp = plugin.getProjectedHitpointsExp();
        int exp99 = Experience.getXpForLevel(99);
        String expStr = NumberFormat.getInstance().format(projectedHitpointsExp);
        Color expTextColor = projectedHitpointsExp < exp99 ? Color.GREEN : Color.RED;

        panelComponent.getChildren().add(TitleComponent.builder()
                .text("Projected HP XP")
                .color(Color.WHITE)
                .build());

        panelComponent.getChildren().add(TitleComponent.builder()
                .text(expStr)
                .color(expTextColor)
                .build());
    }

    public void renderCannonExpRemaining()
    {
        int slayerOnlyExpRemaining = plugin.getSlayerOnlyExpRemaining();
        String expStr = NumberFormat.getInstance().format(slayerOnlyExpRemaining);
        Color expTextColor = slayerOnlyExpRemaining <= 0 ? Color.GREEN : Color.RED;

        panelComponent.getChildren().add(TitleComponent.builder()
                .text("Slayer Only XP")
                .color(Color.WHITE)
                .build());

        panelComponent.getChildren().add(TitleComponent.builder()
                .text(expStr)
                .color(expTextColor)
                .build());
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (config.showSlayerExpRemaining()) {
            renderSlayerExpRemaining();
        }

        if (config.showProjectedHitpointsExp()) {
            renderProjectedHitpointsExp();
        }

        if (config.showSlayerOnlyExp()) {
            renderCannonExpRemaining();
        }

        return super.render(graphics);
    }
}

package com.clairemira;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("untrimmedSlayerCapeHelper")
public interface UntrimmedSlayerCapeHelperConfig extends Config
{
	@ConfigItem(
			keyName = "showSlayerExpRemaining",
			name = "Show Slayer XP remaining to 99",
			description = "Show the amount of slayer experience remaining to obtain 99."
	)
	default boolean showSlayerExpRemaining()
	{
		return true;
	}

	@ConfigItem(
			keyName = "showProjectedHitpointsExp",
			name = "Show Projected Hitpoints XP",
			description = "Show your expected Hitpoints XP after reaching 99 Slayer from standard combat."
	)
	default boolean showProjectedHitpointsExp()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showSlayerOnlyExp",
		name = "Show Slayer Only XP Remaining",
		description = "Show the amount of slayer experience required (without gaining HP XP) to reach 99 Slayer at the "
					+ "same time as 99 Hitpoints. The goal is to be in the negative (green). To achieve this; cannon "
					+ "tasks, prioritise boss tasks, and utilize thralls on tasks."
	)
	default boolean showSlayerOnlyExp()
	{
		return true;
	}
}

package com.clairemira;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class UntrimmedSlayerCapeHelperPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(UntrimmedSlayerCapeHelperPlugin.class);
		RuneLite.main(args);
	}
}
