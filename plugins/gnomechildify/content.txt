package com.gnomechildify;

import net.runelite.client.config.*;

@ConfigGroup("gnomechildify")
public interface GnomeChildifyConfig extends Config
{
	@ConfigItem(
			keyName = "rsn",
			name = "RSN",
			description = "RSN of account to gnome child-ify on spawn",
			position = 10
	)
	default String rsn()
	{
		return "shents";
	}

	@ConfigItem(
			name = "Show Menu Entries",
			description = "Show shift right click menu options to Shents-ify a player",
			position = 20,
			keyName = "menuEntries"
	)
	default boolean menuEntries() { return true; }
}

package com.gnomechildify;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.ColorUtil;

import javax.inject.Inject;
import java.awt.*;

@PluginDescriptor(
		name = "Gnome Childify",
		description = "Turn your friends into a gnome child for hilarious moments!"
)
@Slf4j
public class GnomeChildifyPlugin extends Plugin
{
	@Inject
	private Client client;
	@Inject
	private com.gnomechildify.GnomeChildifyConfig config;

	@Provides
	com.gnomechildify.GnomeChildifyConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(GnomeChildifyConfig.class);
	}

	@Subscribe
	public void onMenuEntryAdded(MenuEntryAdded event)
	{
		if (config.menuEntries()
				&& client.isKeyPressed(KeyCode.KC_SHIFT)
				&& event.getType() == MenuAction.PLAYER_THIRD_OPTION.getId())
		{
			client.createMenuEntry(-1)
					.setOption(ColorUtil.prependColorTag("Gnome Childify", Color.ORANGE))
					.setTarget(event.getTarget())
					.setIdentifier(event.getIdentifier())
					.setType(MenuAction.RUNELITE_PLAYER);
		}
	}

	@Subscribe
	private void onMenuOptionClicked(MenuOptionClicked event)
	{
		if (event.getMenuAction() == MenuAction.RUNELITE_PLAYER
				&& event.getMenuOption().contains("Gnome Childify"))
		{
			final int id = event.getId();
			final Player player = client.getTopLevelWorldView().players().byIndex(id);

			if (player == null || player.getName() == null)
			{
				return;
			}

			PlayerComposition pc = player.getPlayerComposition();

			pc.setTransformedNpcId(NpcID.GNOME_CHILD);
		}
	}

	@Subscribe
	private void onPlayerSpawned(PlayerSpawned event)
	{
		final Player player = event.getPlayer();

		if (player.getName() != null
				&& player.getName().equalsIgnoreCase(config.rsn()))
		{
			PlayerComposition pc = player.getPlayerComposition();

			pc.setTransformedNpcId(NpcID.GNOME_CHILD);
		}
	}
}

package com.gnomechildify;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class GnomeChildifyPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(GnomeChildifyPlugin.class);
		RuneLite.main(args);
	}
}
