package com.areaSoundsWhitelist;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("whitelist")
public interface AreaSoundsWhitelistConfig extends Config
{
	// CoX section =====================================================================================================
	@ConfigSection(
		position = 0,
		name = "Chambers of Xeric",
		description = "CoX area sounds to whitelist"
	)
	String coxSection = "Chambers of Xeric";

	@ConfigItem(
		position = 0,
		keyName = "olmAuto",
		name = "Olm Basic Attacks",
		description = "Whitelists the area sounds for Olm's basic attacks",
		section = coxSection
	)
	default boolean whitelistOlmAutos()
	{
		return false;
	}

	@ConfigItem(
		position = 1,
		keyName = "olmSpecial",
		name = "Olm Special Attacks",
		description = "Whitelists the area sounds for Olm's special attacks",
		section = coxSection
	)
	default boolean whitelistOlmSpecials()
	{
		return false;
	}

	// ToB section =====================================================================================================
	@ConfigSection(
		position = 1,
		name = "Theatre of Blood",
		description = "ToB area sounds to whitelist"
	)
	String tobSection = "Theatre of Blood";

	@ConfigItem(
		position = 0,
		keyName = "maidenBlood",
		name = "Maiden Blood Attack",
		description = "Whitelists the area sounds for Maiden's targeted blood attack",
		section = tobSection
	)
	default boolean whitelistMaidenBlood()
	{
		return false;
	}

	@ConfigItem(
		position = 1,
		keyName = "bloatLimbs",
		name = "Bloat Falling Limbs",
		description = "Whitelists the area sounds for falling limbs at Bloat",
		section = tobSection
	)
	default boolean whitelistBloatLimbs()
	{
		return false;
	}

	@ConfigItem(
		position = 2,
		keyName = "sotetsegAuto",
		name = "Sotetseg Basic Attacks",
		description = "Whitelists the area sounds for Sotetseg's basic attacks",
		section = tobSection
	)
	default boolean whitelistSotetsegAutos()
	{
		return false;
	}

	@ConfigItem(
		position = 3,
		keyName = "sotetsegDeathBall",
		name = "Sotetseg Death Ball",
		description = "Whitelists the area sounds for Sotetseg's death ball",
		section = tobSection
	)
	default boolean whitelistSotetsegDeathBall()
	{
		return false;
	}

	@ConfigItem(
		position = 4,
		keyName = "xarpusSpit",
		name = "Xarpus Spit",
		description = "Whitelists the area sounds for Xarpus' spit",
		section = tobSection
	)
	default boolean whitelistXarpusSpit()
	{
		return false;
	}

	@ConfigItem(
		position = 5,
		keyName = "verzikP2Auto",
		name = "Verzik P2 Basic Attacks",
		description = "Whitelists the area sounds for Verzik's basic attacks during P2",
		section = tobSection
	)
	default boolean whitelistVerzikP2Autos()
	{
		return false;
	}

	@ConfigItem(
		position = 6,
		keyName = "verzikP3Auto",
		name = "Verzik P3 Basic Attacks",
		description = "Whitelists the area sounds for Verzik's basic attacks during P3",
		section = tobSection
	)
	default boolean whitelistVerzikP3Autos()
	{
		return false;
	}

	@ConfigItem(
		position = 7,
		keyName = "verzikYellows",
		name = "Verzik Yellows",
		description = "Whitelists the area sounds for Verzik's yellow pools",
		section = tobSection
	)
	default boolean whitelistVerzikYellows()
	{
		return false;
	}

	@ConfigSection(
		position = 2,
		name = "Other NPCs",
		description = "Other NPC-related area sounds to whitelist"
	)
	String otherNpcSection = "Other NPCs";

	@ConfigItem(
		position = 0,
		keyName = "royalTitansSlam",
		name = "Royal Titans Slam",
		description = "Whitelists the area sounds for the Royal Titans' ground slam attack",
		section = otherNpcSection
	)
	default boolean whitelistRoyalTitansSlam()
	{
		return false;
	}

	@ConfigItem(
		position = 1,
		keyName = "solHeredit",
		name = "Sol Heredit",
		description = "Whitelists the area sounds for Sol Heredit's attacks",
		section = otherNpcSection
	)
	default boolean whitelistSolHereditAttacks()
	{
		return false;
	}

	@ConfigItem(
		position = 2,
		keyName = "yama",
		name = "Yama",
		description = "Whitelists the area sounds for Yama's basic attacks",
		section = otherNpcSection
	)
	default boolean whitelistYama()
	{
		return false;
	}

	// Items section ===================================================================================================
	@ConfigSection(
		position = 3,
		name = "Items",
		description = "Item area sounds to whitelist"
	)
	String itemSection = "Items";

	@ConfigItem(
		position = 0,
		keyName = "burningClaws",
		name = "Burning Claws",
		description = "Whitelists the area sounds for the Burning claws special attack",
		section = itemSection
	)
	default boolean whitelistBurningClaws()
	{
		return false;
	}

	@ConfigItem(
		position = 1,
		keyName = "dragonClaws",
		name = "Dragon Claws",
		description = "Whitelists the area sounds for the Dragon claws special attack",
		section = itemSection
	)
	default boolean whitelistDragonClaws()
	{
		return false;
	}

	// No section ======================================================================================================
	@ConfigItem(
		position = 16,
		keyName = "whitelist",
		name = "Area Sound Whitelist",
		description = "Comma-separated list of any additional sound IDs to be unmuted"
	)
	default String whitelist()
	{
		return "";
	}

	@ConfigItem(
		position = 17,
		keyName = "muteAmbient",
		name = "Mute Ambient Sounds",
		description = "Mutes all ambient sounds upon loading into a map. These cannot be whitelisted. " +
			"Requires re-entering the area to take effect."
	)
	default boolean muteAmbient()
	{
		return true;
	}
}

package com.areaSoundsWhitelist;

import com.google.inject.Provides;
import java.util.Arrays;
import java.util.Collections;
import java.util.Deque;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.AreaSoundEffectPlayed;
import net.runelite.client.callback.ClientThread;


import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.Text;

@Slf4j
@PluginDescriptor(
	name = "Area Sounds Whitelist"
)
public class AreaSoundsWhitelistPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private AreaSoundsWhitelistConfig config;

	private Set<Integer> soundsToWhitelist;

	@Override
	protected void startUp() throws Exception
	{
		setupWhitelist();
	}

	@Override
	public void shutDown()
	{
		soundsToWhitelist.clear();
	}

	@Subscribe(priority = -2) // priority -2 to run after music plugin
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		GameState gameState = gameStateChanged.getGameState();

		// on map load mute ambient sounds
		if (gameState == GameState.LOGGED_IN)
		{
			if (config.muteAmbient()) {
				client.getAmbientSoundEffects().clear();
			}
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged) {
		setupWhitelist();
	}

	@Subscribe
	public void onAreaSoundEffectPlayed(AreaSoundEffectPlayed areaSoundEffectPlayed) {
		int soundId = areaSoundEffectPlayed.getSoundId();
		if (!soundsToWhitelist.contains(soundId)) {
			areaSoundEffectPlayed.consume();
		}
	}

	@Provides
	AreaSoundsWhitelistConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(AreaSoundsWhitelistConfig.class);
	}

	private void setupWhitelist() {
		List<String> ids = Text.fromCSV(config.whitelist());
		soundsToWhitelist = ids.stream()
			.map(Integer::parseInt)
			.collect(Collectors.toCollection(HashSet::new));

		// Add NPC area sounds =========================================================================================
		// CoX ---------------------------------------------------------------------------------------------------------
		if (config.whitelistOlmAutos())
		{
			for (int sid : AreaSoundEffectID.COX_OLM_AUTOS)
			{
				soundsToWhitelist.add(sid);
			}
		}

		if (config.whitelistOlmSpecials())
		{
			for (int sid : AreaSoundEffectID.COX_OLM_SPECIALS)
			{
				soundsToWhitelist.add(sid);
			}
		}

		// ToB ---------------------------------------------------------------------------------------------------------
		if (config.whitelistMaidenBlood())
		{
			for (int sid : AreaSoundEffectID.TOB_MAIDEN_BLOOD_TARGET)
			{
				soundsToWhitelist.add(sid);
			}
		}

		if (config.whitelistBloatLimbs())
		{
			soundsToWhitelist.add(AreaSoundEffectID.TOB_BLOAT_LIMBS);
		}

		if (config.whitelistSotetsegAutos())
		{
			for (int sid : AreaSoundEffectID.TOB_SOTETSEG_AUTOS)
			{
				soundsToWhitelist.add(sid);
			}
		}

		if (config.whitelistSotetsegDeathBall())
		{
			soundsToWhitelist.add(AreaSoundEffectID.TOB_SOTETSEG_DEATH_BALL);
		}

		if (config.whitelistXarpusSpit())
		{
			soundsToWhitelist.add(AreaSoundEffectID.TOB_XARPUS_SPIT);
		}

		if (config.whitelistVerzikP2Autos())
		{
			soundsToWhitelist.add(AreaSoundEffectID.TOB_VERZIK_P2_AUTOS);
		}

		if (config.whitelistVerzikP3Autos())
		{
			for (int sid : AreaSoundEffectID.TOB_VERZIK_P3_AUTOS)
			{
				soundsToWhitelist.add(sid);
			}
		}

		if (config.whitelistVerzikYellows())
		{
			soundsToWhitelist.add(AreaSoundEffectID.TOB_VERZIK_YELLOW_POOLS);
		}

		// Misc --------------------------------------------------------------------------------------------------------
		if (config.whitelistRoyalTitansSlam())
		{
			for (int sid : AreaSoundEffectID.ROYAL_TITANS_SLAM)
			{
				soundsToWhitelist.add(sid);
			}
		}

		if (config.whitelistSolHereditAttacks())
		{
			for (int sid : AreaSoundEffectID.SOL_HEREDIT_ATTACKS)
			{
				soundsToWhitelist.add(sid);
			}
		}

		if (config.whitelistYama())
		{
			for (int sid : AreaSoundEffectID.YAMA)
			{
				soundsToWhitelist.add(sid);
			}
		}

		// Add item area sounds ========================================================================================
		if (config.whitelistBurningClaws())
		{
			soundsToWhitelist.add(AreaSoundEffectID.BURNING_CLAWS_SPEC);
		}

		if (config.whitelistDragonClaws())
		{
			for (int sid : AreaSoundEffectID.DRAGON_CLAWS_SPEC)
			{
				soundsToWhitelist.add(sid);
			}
		}
	}
}

package com.areaSoundsWhitelist;

public final class AreaSoundEffectID
{
	// NPC sounds
	final static int[] COX_OLM_AUTOS = new int[] { 1784,3749 };
	final static int[] COX_OLM_SPECIALS = new int[] { 154,3424,3821,3887 };

	final static int[] TOB_MAIDEN_BLOOD_TARGET = new int[] { 3547,4002 };
	final static int TOB_BLOAT_LIMBS = 3308;
	final static int[] TOB_SOTETSEG_AUTOS = new int[] { 3539,3996,4015 };
	final static int TOB_SOTETSEG_DEATH_BALL = 3994;
	final static int TOB_XARPUS_SPIT = 3290;
	final static int TOB_VERZIK_P2_AUTOS = 3987;
	final static int[] TOB_VERZIK_P3_AUTOS = new int[] { 3543,3990 };
	final static int TOB_VERZIK_YELLOW_POOLS = 4000;

	final static int[] ROYAL_TITANS_SLAM = new int[] { 10135,10136,10153,10154 };
	final static int[] SOL_HEREDIT_ATTACKS = new int[] { 8047,8048,8051,8054,8055,8056,8057,8058,8062,8063,8068,8069,8073,8075,8078,8079,8085,8086,8087,8088,8090,8092,8096,8097,8098,8099,8102,8103,8105,8107,8109,8115,8117,8118,8119,8120,8121,8122,8123,8126,8127,8130,8131,8132,8133,8135,8137,8138,8139,8143,8145,8147,8148,8150,8153,8154,8155,8157,8160,8162,8163,8165,8168,8169,8170,8174,8175,8177,8180,8184,8189,8195,8204,8206,8207,8208,8212,8214,8215,8216,8220,8221,8222,8224,8232,8233,8234,8238,8240,8243,8244,8248,8255,8260,8263,8264,8267,8271,8272,8280,8282,8283,8284,8285,8286,8288,8290,8291,8294,8300,8302,8303,8304,8308,8310,8315,8316,8318,8319,8320,8322,8323,8324,8325,8326,8327,8328,8331,8332,8333,8335,8336,8337 };
	final static int[] YAMA = new int[] { 10263,10268,10272 };

	// Item sounds
	final static int BURNING_CLAWS_SPEC = 9316;
	final static int[] DRAGON_CLAWS_SPEC = new int[] { 4138,4140,4141 };
}
package com.areaSoundsWhitelist;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AreaSoundsWhitelistPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AreaSoundsWhitelistPlugin.class);
		RuneLite.main(args);
	}
}
