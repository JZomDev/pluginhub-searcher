package com.discordgroupbanknotifications;

import junitparams.JUnitParamsRunner;
import junitparams.Parameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.Collections;

import static org.junit.Assert.assertEquals;

@RunWith(JUnitParamsRunner.class)
public class TransferMessageCreatorTest {
    private Object[] parametersForSingleItemTransfer() {
        return new Object[]{
            new Object[]{
                "Wise Old Man",
                new ItemTransfer(1, "Abyssal whip", 1),
                "**Wise Old Man** deposited **1 Abyssal whip** to the Group Bank."
            },
            new Object[]{
                "Wise Old Man",
                new ItemTransfer(1, "Abyssal whip", 99999),
                "**Wise Old Man** deposited **99999 Abyssal whips** to the Group Bank."
            },
            new Object[]{
                "Wise Old Man",
                new ItemTransfer(1, "Abyssal whip", 100000),
                "**Wise Old Man** deposited **100K Abyssal whips** to the Group Bank."
            },
            new Object[]{
                "Wise Old Man",
                new ItemTransfer(1, "Abyssal whip", -1),
                "**Wise Old Man** withdrew **1 Abyssal whip** from the Group Bank."
            },
            new Object[]{
                "Wise Old Man",
                new ItemTransfer(1, "Coins", -1),
                "**Wise Old Man** withdrew **1 Coin** from the Group Bank."
            },
            new Object[]{
                "Wise Old Man",
                new ItemTransfer(1, "Abyssal whip", -9999999),
                "**Wise Old Man** withdrew **9999K Abyssal whips** from the Group Bank."
            },
            new Object[]{
                "Wise Old Man",
                new ItemTransfer(1, "Abyssal whip", -10000000),
                "**Wise Old Man** withdrew **10M Abyssal whips** from the Group Bank."
            },
            new Object[]{
                "Wise Old Man",
                new ItemTransfer(1, "Abyssal whip", -5),
                "**Wise Old Man** withdrew **5 Abyssal whips** from the Group Bank."
            }
        };
    }

    @Test
    @Parameters
    @SuppressWarnings("JUnitMalformedDeclaration")
    public void singleItemTransfer(String playerName, ItemTransfer itemTransfer, String description) {
        TransferMessageCreator transferMessageCreator = new TransferMessageCreator();

        DiscordWebhook actual = transferMessageCreator.createTransferMessages(Collections.singletonList(
                itemTransfer
        ), playerName);

        assertEquals(description, actual.getContent());
    }
}
package com.discordgroupbanknotifications;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DiscordGroupBankNotificationsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(DiscordGroupBankNotificationsPlugin.class);
		RuneLite.main(args);
	}
}
package com.discordgroupbanknotifications;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;
import org.junit.Test;

import java.util.*;

import static org.junit.Assert.assertEquals;

public class ItemMapTest {

    @Test
    public void createItemMap() {
        Item[] items = Arrays.asList(
                new Item(1, "Iron Bar", 5),
                new Item(1, "Iron Bar", 20),
                new Item(2, "Bread", 50),
                new Item(2, "Bread", 100),
                new Item(0, "The One Ring", 1),
                new Item(-1, "Excalibur", 1),
                new Item(3, "Palantir", 0),
                null
        ).toArray(new Item[0]);
        Map<Integer, Item> expected = Maps.newHashMap(ImmutableMap.of(
                1, new Item(1, "Iron Bar", 25),
                2, new Item(2, "Bread", 150),
                0, new Item(0, "The One Ring", 1),
                3, new Item(3, "Palantir", 0)
        ));

        Map<Integer, Item> actual = new ItemMap(items).getItemMap();

        assertEquals(expected, actual);
    }

    @Test
    public void getItemTransferWithdrawAll() {
        ItemMap initial = new ItemMap(List.of(
                new Item(1, "Iron Bar", 5),
                new Item(2, "Iron Ore", 5)
        ).toArray(new Item[0]));
        ItemMap modified = new ItemMap(List.of(
                new Item(1, "Iron Bar", 0)
        ).toArray(new Item[0]));
        List<ItemTransfer> expected = new ArrayList<>(List.of(
                new ItemTransfer(1, "Iron Bar", -5),
                new ItemTransfer(2, "Iron Ore", -5)
        ));

        List<ItemTransfer> actual = initial.getItemTransfers(modified);

        assertEquals(expected, actual);
    }

    @Test
    public void getItemTransferWithdrawSome() {
        ItemMap initial = new ItemMap(List.of(
                new Item(1, "Iron Bar", 10)
        ).toArray(new Item[0]));
        ItemMap modified = new ItemMap(List.of(
                new Item(1, "Iron Bar", 5)
        ).toArray(new Item[0]));
        List<ItemTransfer> expected = new ArrayList<>(List.of(
                new ItemTransfer(1, "Iron Bar", -5))
        );

        List<ItemTransfer> actual = initial.getItemTransfers(modified);

        assertEquals(expected, actual);
    }

    @Test
    public void getItemTransferWithdrawNone() {
        ItemMap initial = new ItemMap(List.of(
                new Item(1, "Iron Bar", 10)
        ).toArray(new Item[0]));
        ItemMap modified = new ItemMap(List.of(
                new Item(1, "Iron Bar", 10)
        ).toArray(new Item[0]));
        List<ItemTransfer> expected = new ArrayList<>();

        List<ItemTransfer> actual = initial.getItemTransfers(modified);

        assertEquals(expected, actual);
    }

    @Test
    public void getItemTransferDepositAll() {
        ItemMap initial = new ItemMap(new Item[0]);
        ItemMap modified = new ItemMap(List.of(
                new Item(1, "Iron Bar", 10)
        ).toArray(new Item[0]));
        List<ItemTransfer> expected = new ArrayList<>(List.of(
                new ItemTransfer(1, "Iron Bar", 10))
        );

        List<ItemTransfer> actual = initial.getItemTransfers(modified);

        assertEquals(expected, actual);
    }

    @Test
    public void getItemTransferDepositSome() {
        ItemMap initial = new ItemMap(new Item[0]);
        ItemMap modified = new ItemMap(List.of(
                new Item(1, "Iron Bar", 5)
        ).toArray(new Item[0]));
        List<ItemTransfer> expected = new ArrayList<>(List.of(
                new ItemTransfer(1, "Iron Bar", 5))
        );

        List<ItemTransfer> actual = initial.getItemTransfers(modified);

        assertEquals(expected, actual);
    }

    @Test
    public void getItemTransferDepositNone() {
        ItemMap initial = new ItemMap(new Item[0]);
        ItemMap modified = new ItemMap(new Item[0]);
        List<ItemTransfer> expected = new ArrayList<>();

        List<ItemTransfer> actual = initial.getItemTransfers(modified);

        assertEquals(expected, actual);
    }

    @Test
    public void getItemTransfers() {
        ItemMap initial = new ItemMap(List.of(
                new Item(1, "Iron Bar", 5),
                new Item(2, "Bread", 50),
                new Item(3, "Logs", 12),
                new Item(4, "Coins", 1000)
        ).toArray(new Item[0]));
        ItemMap modified = new ItemMap(List.of(
                new Item(1, "Iron Bar", 0),
                new Item(2, "Bread", 60),
                new Item(3, "Logs", 15),
                new Item(4, "Coins", 500),
                new Item(5, "Iron Ore", 20)
        ).toArray(new Item[0]));
        List<ItemTransfer> expected = new ArrayList<>(Arrays.asList(
                new ItemTransfer(1, "Iron Bar", -5),
                new ItemTransfer(2, "Bread", 10),
                new ItemTransfer(3, "Logs", 3),
                new ItemTransfer(4, "Coins", -500),
                new ItemTransfer(5, "Iron Ore", 20)
        ));

        List<ItemTransfer> actual = initial.getItemTransfers(modified);

        assertEquals(expected, actual);
    }
}
package com.discordgroupbanknotifications;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
public class DiscordWebhook {
    @Getter
    @Setter
    private String content;
}

package com.discordgroupbanknotifications;

import lombok.Getter;
import lombok.Setter;

import java.util.Objects;

public final class ItemTransfer {
    @Getter
    private final int itemId;
    @Getter
    private final String itemName;
    @Getter @Setter
    private int quantityChange;

    public ItemTransfer(int itemId, String itemName, int quantityChange) {
        this.itemId = itemId;
        this.itemName = itemName;
        this.quantityChange = quantityChange;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ItemTransfer that = (ItemTransfer) o;
        return itemId == that.itemId && quantityChange == that.quantityChange && Objects.equals(itemName, that.itemName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(itemId, itemName, quantityChange);
    }
}

package com.discordgroupbanknotifications;

import java.util.ArrayList;
import java.util.List;

public class TransferMessageCreator {
    public DiscordWebhook createTransferMessages(List<ItemTransfer> itemTransfers, String playerName) {
        if (itemTransfers.size() < 1)
            return null;

        List<String> content = new ArrayList<>();
        itemTransfers.forEach(i -> {
            content.add(
                createDescription(i.getItemName(), i.getQuantityChange(), playerName)
            );
        });

        DiscordWebhook discordWebhookData = new DiscordWebhook();
        discordWebhookData.setContent(String.join("\n", content));
        return discordWebhookData;
    }

    private String createDescription(String itemName, int quantityChange, String playerName)
    {
        String msg;
        String quantity = quantityFormat(Math.abs(quantityChange));
        String itemNameSingle = itemName.endsWith("s") ? itemName.substring(0, itemName.length() - 1) : itemName;
        String itemNameMultiple = !itemName.endsWith("s") ? itemName + "s" : itemName;
        String itemNameSingleOrMultiple = quantity.equals("1") ? itemNameSingle : itemNameMultiple;
        if (quantityChange > 0) {
            msg = String.format("**%s** deposited **%s %s** to the Group Bank.", playerName, quantity, itemNameSingleOrMultiple);
        } else {
            msg = String.format("**%s** withdrew **%s %s** from the Group Bank.", playerName, quantity, itemNameSingleOrMultiple);
        }
        return msg;
    }

    private String quantityFormat(int quantity) {
        if (quantity > 9999999) {
            return String.format("%.0fM", Math.floor(quantity / 1000000.0));
        }
        if (quantity > 99999) {
            return String.format("%.0fK", Math.floor(quantity / 1000.0));
        }
        return quantity + "";
    }
}

package com.discordgroupbanknotifications;

import com.google.common.base.Strings;
import com.google.inject.Provides;

import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import okhttp3.OkHttpClient;

import java.util.*;
import java.util.stream.Collectors;

import static net.runelite.http.api.RuneLiteAPI.GSON;

@Slf4j
@PluginDescriptor(
	name = "Discord Group Bank Notifications"
)
public class DiscordGroupBankNotificationsPlugin extends Plugin
{
	@Inject
	private Client client;
	@Inject
	private DiscordGroupBankNotificationsConfig config;
	@Inject
	private ItemManager itemManager;
	@Inject
	private TransferMessageCreator transferMessageCreator;
	@Inject
	private ApiTool apiTool;

	private static final int OPEN_SHARED_STORAGE = 786440;
	private static final int SAVE_SHARED_STORAGE = 47448098;
	private static final int BACK_TO_BANK_SHARED_STORAGE = 47448073;
	private static final int CLOSE_SHARED_STORAGE = 47448067;

	private boolean fetchInitialSharedBankItems = false;
	private ItemMap initialSharedBankItems = null;
	private ItemMap modifiedSharedBankItems = null;

	@Override
	protected void startUp() throws Exception
	{
		log.info("Discord Group Bank Notifications started!");
		super.startUp();
	}

	@Override
	protected void shutDown() throws Exception
	{
		log.info("Discord Group Bank Notifications stopped!");
		super.shutDown();
	}

	@Subscribe
	public void onGameTick(GameTick gameTick) {
		if (!isEnabled())
			return;

		if (fetchInitialSharedBankItems) {
			ItemContainer container = client.getItemContainer(InventoryID.GROUP_STORAGE);
			if (container != null) {
				initialSharedBankItems = new ItemMap(mapItems(container.getItems()));
				fetchInitialSharedBankItems = false;
			}
		}
	}

	@Subscribe
	private void onItemContainerChanged(ItemContainerChanged event) {
		final int id = event.getContainerId();
		ItemContainer container = event.getItemContainer();

		if (id == InventoryID.GROUP_STORAGE.getId()) {
			modifiedSharedBankItems = new ItemMap(mapItems(container.getItems()));
		}
	}

	private Item[] mapItems(net.runelite.api.Item[] items) {
		return Arrays.stream(items).map(i ->
				new Item(itemManager.canonicalize(i.getId()), itemManager.getItemComposition(i.getId()).getMembersName(), i.getQuantity())
		).toArray(Item[]::new);
	}

	@Subscribe
	private void onMenuOptionClicked(MenuOptionClicked event) {
		if (!isEnabled())
			return;

		final int param1 = event.getParam1();
		final MenuAction menuAction = event.getMenuAction();
		if (menuAction != MenuAction.CC_OP)
			return;

		if (param1 == OPEN_SHARED_STORAGE)
		{
			fetchInitialSharedBankItems = true;
		}
		else if (param1 == SAVE_SHARED_STORAGE || param1 == BACK_TO_BANK_SHARED_STORAGE || param1 == CLOSE_SHARED_STORAGE)
		{
			if (modifiedSharedBankItems == null)
				return;

			List<ItemTransfer> itemTransfers = initialSharedBankItems.getItemTransfers(modifiedSharedBankItems);
			sendWebhook(transferMessageCreator.createTransferMessages(itemTransfers, client.getLocalPlayer().getName()));

			modifiedSharedBankItems = null;
			initialSharedBankItems = null;
		}
	}

	private void sendWebhook(DiscordWebhook discordWebhook) {
		String configUrl = config.webhook();
		if (Strings.isNullOrEmpty(configUrl)) { return; }

		List<String> webhookUrls = Arrays.stream(configUrl.split("\n"))
				.filter(u -> u.length() > 0)
				.map(String::trim)
				.collect(Collectors.toList());

		String jsonStr = GSON.toJson(discordWebhook);
		webhookUrls.forEach(url -> apiTool.postRaw(url, jsonStr, "application/json")
			.handle((_v, e) ->
			{
				if (e != null)
					log.error(e.getMessage());
				return null;
			}));
	}

	private boolean isEnabled() {
		return isLoggedIn() && isCorrectWorldType();
	}

	private boolean isLoggedIn() {
		return client.getGameState() == GameState.LOGGED_IN && client.getLocalPlayer() != null;
	}

	private boolean isCorrectWorldType() {
		EnumSet<WorldType> worldTypes = client.getWorldType();
		for (WorldType worldType : worldTypes) {
			if (worldType == WorldType.SEASONAL ||
					worldType == WorldType.DEADMAN ||
					worldType == WorldType.TOURNAMENT_WORLD ||
					worldType == WorldType.PVP_ARENA) {
				return false;
			}
		}

		return true;
	}

	@Provides
	DiscordGroupBankNotificationsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(DiscordGroupBankNotificationsConfig.class);
	}
}

package com.discordgroupbanknotifications;

import okhttp3.*;

import javax.inject.Inject;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;

public class ApiTool
{
    @Inject
    private OkHttpClient httpClient;

    public CompletableFuture<ResponseBody> postRaw(String url, String data, String type)
    {
        Request request = new Request.Builder().url(url).post(RequestBody.create(MediaType.parse(type), data)).build();

        return callRequest(request);
    }

    private CompletableFuture<ResponseBody> callRequest(Request request)
    {
        CompletableFuture<ResponseBody> future = new CompletableFuture<>();

        httpClient.newCall(request).enqueue(new Callback()
        {
            @Override
            public void onFailure(Call call, IOException e)
            {
                future.completeExceptionally(e);
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException
            {
                try (ResponseBody responseBody = response.body())
                {
                    if (!response.isSuccessful())
                    {
                        future.completeExceptionally(new IOException("Unexpected code " + response));
                    }
                    else
                    {
                        future.complete(responseBody);
                    }
                }
                response.close();
            }
        });

        return future;
    }
}

package com.discordgroupbanknotifications;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("discordgroupbanknotifications")
public interface DiscordGroupBankNotificationsConfig extends Config
{
	// Webhook config section
	@ConfigSection(
			name = "Webhook Settings",
			description = "The config for webhook content notifications",
			position = 0,
			closedByDefault = false
	)
	String webhookConfig = "webhookConfig";

	@ConfigItem(
			keyName = "webhook",
			name = "Webhook URL(s)",
			description = "The Discord Webhook URL(s) to send messages to, separated by a newline.",
			section = webhookConfig,
			position = 0
	)
	default String webhook() { return ""; }
	// End webhook config section
}

package com.discordgroupbanknotifications;

import lombok.Getter;

import java.util.*;

public class ItemMap {

    @Getter
    private final Map<Integer, Item> itemMap;

    public ItemMap(Item[] items) {
        this.itemMap = createItemMap(items);
    }

    public Map<Integer, Item> createItemMap(Item[] items) {
        Map<Integer, Item> itemMap = new HashMap<>();
        for (Item item : items) {
            if (item == null || item.getId() < 0 || item.getQuantity() < 0)
                continue;

            final int id = item.getId();
            if (itemMap.containsKey(id)) {
                itemMap.put(id, new Item(id, item.getName(), item.getQuantity() + itemMap.get(id).getQuantity()));
            } else {
                itemMap.put(id, new Item(id, item.getName(), item.getQuantity()));
            }
        }
        return itemMap;
    }

    public List<ItemTransfer> getItemTransfers(ItemMap other){
        Map<Integer, Item> thisItems = getItemMap();
        Map<Integer, Item> otherItems = other.getItemMap();

        List<ItemTransfer> result = new ArrayList<>();

        for (Integer itemId : otherItems.keySet()) {
            Item otherItem = otherItems.get(itemId);
            if (thisItems.containsKey(itemId)) {
                Item thisItem = thisItems.get(itemId);
                int quantityDifference = otherItem.getQuantity() - thisItem.getQuantity();
                if (quantityDifference != 0) {
                    result.add(new ItemTransfer(itemId, thisItem.getName(), quantityDifference));
                }
            } else {
                result.add(new ItemTransfer(itemId, otherItem.getName(), otherItem.getQuantity()));
            }
        }

        for (Integer itemId : thisItems.keySet()) {
            Item thisItem = thisItems.get(itemId);
            if (!otherItems.containsKey(itemId)) {
                result.add(new ItemTransfer(itemId, thisItem.getName(), -thisItem.getQuantity()));
            }
        }

        return result;
    }
}

package com.discordgroupbanknotifications;

import lombok.Value;

import java.util.Objects;

@Value
public class Item
{
    int id;
    String name;
    int quantity;

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Item item = (Item) o;
        return id == item.id && quantity == item.quantity && Objects.equals(name, item.name);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name, quantity);
    }
}

