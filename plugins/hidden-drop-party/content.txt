/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.krazune.hiddendropparty;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class HiddenDropPartyPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(HiddenDropPartyPlugin.class);
		RuneLite.main(args);
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.krazune.hiddendropparty;

public enum TileModelIdsGroup
{
	DEFAULT("21367,21369,21370"),
	SARADOMIN("40183,40187,40205"),
	CUSTOM("");

	private final String idsString;

	TileModelIdsGroup(String idsString)
	{
		this.idsString = idsString;
	}

	public String getValue()
	{
		return idsString;
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.krazune.hiddendropparty;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;
import net.runelite.client.config.Units;

import static net.runelite.client.config.Units.PERCENT;
import static net.runelite.client.config.Units.SECONDS;

@ConfigGroup("hiddendropparty")
public interface HiddenDropPartyPluginConfig extends Config
{
	@ConfigItem(
		position = 0,
		keyName = "tileModelIdsGroup",
		name = "Tile models group",
		description = "Group of model IDs for the obstructing tiles."
	)
	default TileModelIdsGroup getTileModelIdsGroup()
	{
		return TileModelIdsGroup.DEFAULT;
	}

	@ConfigItem(
		position = 1,
		keyName = "customTileModelIds",
		name = "Custom tile model IDs",
		description = "List of model IDs for the obstructing tiles, separated by commas, and multiple ids grouped by plus sign (the GitHub page has some useful IDs)."
	)
	default String getCustomTileModelIds()
	{
		return "";
	}

	@ConfigItem(
		position = 2,
		keyName = "chestModelIdsGroup",
		name = "Chest models group",
		description = "Group of model IDs for the main object."
	)
	default ChestModelIdsGroup getChestModelIdsGroup()
	{
		return ChestModelIdsGroup.DEFAULT;
	}

	@ConfigItem(
		position = 3,
		keyName = "customChestModelIds",
		name = "Custom chest model IDs",
		description = "List of model IDs for the main objects, separated by commas, and multiple ids grouped by plus sign (the GitHub page has some useful IDs)."
	)
	default String getCustomChestModelIds()
	{
		return "";
	}

	@ConfigItem(
		position = 4,
		keyName = "fakeDropPercentage",
		name = "Fake drop percentage",
		description = "The chance of spawning a fake drop per tick."
	)
	@Range(
		min = 0,
		max = 100
	)
	@Units(PERCENT)
	default int getFakeDropPercentage()
	{
		return 25;
	}

	@ConfigItem(
		position = 5,
		keyName = "objectDuration",
		name = "Object duration",
		description = "Object duration in seconds"
	)
	@Units(SECONDS)
	default int getObjectDuration()
	{
		return 60;
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.krazune.hiddendropparty;

import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import net.runelite.api.Client;
import net.runelite.api.Model;
import net.runelite.api.RuneLiteObject;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;

// I swear I'm not narcissistic, I just didn't know what to name this class. Might change in the future.
public class KObject
{
	private final Duration MODEL_LOAD_TIMEOUT_DURATION = Duration.ofSeconds(1);

	private final Client client;
	private final ClientThread clientThread;
	private final EventBus eventBus;

	private boolean isActive = false;

	private final WorldPoint location;
	private final List<Integer> modelIds;
	private List<RuneLiteObject> objects;

	private int lastTickPlaneId;

	public KObject(Client client, ClientThread clientThread, EventBus eventBus, WorldPoint location, int... modelIds)
	{
		this.client = client;
		this.clientThread = clientThread;
		this.eventBus = eventBus;

		this.location = location;
		this.modelIds = new ArrayList<>();

		for (int i = 0; i < modelIds.length; ++i)
		{
			this.modelIds.add(modelIds[i]);
		}

		objects = new ArrayList<>();
		lastTickPlaneId = client.getPlane();
	}

	public KObject(Client client, ClientThread clientThread, EventBus eventBus, WorldPoint location, List<Integer> modelIds)
	{
		this.client = client;
		this.clientThread = clientThread;
		this.eventBus = eventBus;

		this.location = location;
		this.modelIds = modelIds;
		objects = new ArrayList<>();
		lastTickPlaneId = client.getPlane();
	}

	public WorldPoint getLocation()
	{
		return location;
	}

	public List<Integer> getModelIds()
	{
		return modelIds;
	}

	public boolean isActive()
	{
		return isActive;
	}

	public void setActive(boolean isActive)
	{
		if (this.isActive == isActive)
		{
			return;
		}

		if (isActive)
		{
			activate();

			return;
		}

		deactivate();
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		if (isActive && lastTickPlaneId != client.getPlane())
		{
			spawn();
		}

		lastTickPlaneId = client.getPlane();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		switch (gameStateChanged.getGameState())
		{
			case LOADING:
				despawn();
				break;

			case LOGGED_IN:
				spawn();
				break;
		}
	}

	private void activate()
	{
		isActive = true;

		spawn();
		eventBus.register(this);
	}

	private void deactivate()
	{
		isActive = false;

		despawn();
		eventBus.unregister(this);
	}

	private void spawn()
	{
		despawn();

		for (int i = 0; i < modelIds.size(); ++i)
		{
			LocalPoint localLocation = LocalPoint.fromWorld(client, location);

			if (localLocation == null)
			{
				continue;
			}

			RuneLiteObject newObject = client.createRuneLiteObject();
			int modelId = modelIds.get(i);
			Model newModel = client.loadModel(modelId);

			if (newModel == null)
			{
				repeatingModelLoading(newObject, modelId);
			}
			else
			{
				newObject.setModel(newModel);
			}

			newObject.setLocation(localLocation, location.getPlane());

			if (client.isClientThread())
			{
				newObject.setActive(true);
			}
			else
			{
				clientThread.invokeLater(() ->
				{
					newObject.setActive(true);
				});
			}

			objects.add(newObject);
		}
	}

	private void despawn()
	{
		boolean isClientThread = client.isClientThread();

		for (int i = 0; i < objects.size(); ++i)
		{
			final RuneLiteObject currentObject = objects.get(i);

			if (isClientThread)
			{
				currentObject.setActive(false);

				continue;
			}

			clientThread.invokeLater(() ->
			{
				currentObject.setActive(false);
			});
		}

		objects.clear();
	}

	private void repeatingModelLoading(RuneLiteObject object, int modelId)
	{
		final Instant loadTimeoutInstant = Instant.now().plus(MODEL_LOAD_TIMEOUT_DURATION);

		clientThread.invokeLater(() ->
		{
			if (Instant.now().isAfter(loadTimeoutInstant))
			{
				return true;
			}

			Model newModel = client.loadModel(modelId);

			if (newModel == null)
			{
				return false;
			}

			object.setModel(newModel);

			return true;
		});
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.krazune.hiddendropparty;

public class KObjectCounter
{
	private KObject kObject;
	private int count;

	public KObjectCounter(KObject kObject)
	{
		this(kObject, 0);
	}

	public KObjectCounter(KObject kObject, int count)
	{
		this.kObject = kObject;
		this.count = count;
	}

	public KObject getKObject()
	{
		return kObject;
	}

	public int getCount()
	{
		return count;
	}

	public void setkObject(KObject kObject)
	{
		this.kObject = kObject;
	}

	public void setCount(int count)
	{
		this.count = count;
	}

	public void increment()
	{
		++count;
	}

	public void decrement()
	{
		--count;
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.krazune.hiddendropparty;

import com.google.inject.Inject;
import com.google.inject.Provides;
import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import net.runelite.api.Client;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemDespawned;
import net.runelite.api.events.ItemSpawned;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

@PluginDescriptor(
	name = "Hidden Drop Party",
	description = "Hides drops. Useful for streamers that want to make drop parties on stream but don't want to show where the good drops were placed.",
	tags = {
		"drop",
		"party",
		"stream",
		"hide",
		"hidden",
		"gifts",
		"presents"
	}
)
public class HiddenDropPartyPlugin extends Plugin
{
	private final int EMPTY_MODEL_ID = -1; // This is hacky, but currently it's the easiest way to implement empty objects.

	@Inject
	private Client client;

	@Inject
	private HiddenDropPartyPluginConfig config;

	@Inject
	private ClientThread clientThread;

	@Inject
	private EventBus eventBus;

	private KObjectLocationRegistry registry;
	private Map<WorldPoint, Instant> fakeDropLocationSpawnInstants;

	private List<List<Integer>> tileModelIdGroups;
	private List<List<Integer>> chestModelIdGroups;

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		removeOldFakeDrops();

		Random rand = new Random();

		if (rand.nextInt(100) < config.getFakeDropPercentage())
		{
			createFakeDrop(client.getLocalPlayer().getWorldLocation());
		}
	}

	@Subscribe
	public void onItemSpawned(ItemSpawned itemSpawned)
	{
		registry.add(itemSpawned.getTile().getWorldLocation());
	}

	@Subscribe
	public void onItemDespawned(ItemDespawned itemDespawned)
	{
		registry.remove(itemDespawned.getTile().getWorldLocation());
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		switch (gameStateChanged.getGameState())
		{
			case LOADING:
				removeRealDrops(); // Item despawn events don't get triggered when reloading the scene, so they must be removed manually.
				break;
			case LOGIN_SCREEN:
			case HOPPING:
				resetRegistry();
				fakeDropLocationSpawnInstants.clear();
				break;
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged)
	{
		String keyName = configChanged.getKey();

		if (keyName.equals("tileModelIdsGroup"))
		{
			loadTilesModelIdsConfig();
		}
		else if (keyName.equals("chestModelIdsGroup"))
		{
			loadChestModelIdsConfig();
		}
		else if (keyName.equals("customTileModelIds") && config.getTileModelIdsGroup() == TileModelIdsGroup.CUSTOM)
		{
			tileModelIdGroups = parseIds(config.getCustomTileModelIds());
		}
		else if (keyName.equals("customChestModelIds") && config.getChestModelIdsGroup() == ChestModelIdsGroup.CUSTOM)
		{
			chestModelIdGroups = parseIds(config.getCustomChestModelIds());
		}
		else
		{
			return;
		}

		updateModelIds();
	}

	@Override
	protected void startUp()
	{
		loadModelIdsConfig();

		registry = new KObjectLocationRegistry(client, clientThread, eventBus, tileModelIdGroups, chestModelIdGroups);
		fakeDropLocationSpawnInstants = new HashMap<>();
	}

	@Override
	protected void shutDown()
	{
		deleteRegistry();

		fakeDropLocationSpawnInstants = null;
		tileModelIdGroups = null;
		chestModelIdGroups = null;
	}

	@Provides
	HiddenDropPartyPluginConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(HiddenDropPartyPluginConfig.class);
	}

	private void loadModelIdsConfig()
	{
		loadTilesModelIdsConfig();
		loadChestModelIdsConfig();
	}

	private void loadTilesModelIdsConfig()
	{
		if (config.getTileModelIdsGroup() == TileModelIdsGroup.CUSTOM)
		{
			tileModelIdGroups = parseIds(config.getCustomTileModelIds());
		}
		else
		{
			tileModelIdGroups = parseIds(config.getTileModelIdsGroup().getValue());
		}
	}

	private void loadChestModelIdsConfig()
	{
		if (config.getChestModelIdsGroup() == ChestModelIdsGroup.CUSTOM)
		{
			chestModelIdGroups = parseIds(config.getCustomChestModelIds());
		}
		else
		{
			chestModelIdGroups = parseIds(config.getChestModelIdsGroup().getValue());
		}
	}

	private void updateModelIds()
	{
		registry.setModelIds(tileModelIdGroups, chestModelIdGroups);
	}

	private void createFakeDrop(WorldPoint location)
	{
		if (fakeDropLocationSpawnInstants.putIfAbsent(location, Instant.now()) != null)
		{
			return;
		}

		registry.add(location);
	}

	private List<List<Integer>> parseIds(String modelIdsString)
	{
		List<List<Integer>> modelIdGroups = new ArrayList<>();
		String[] stringSplit = modelIdsString.split(",");

		for (int i = 0; i < stringSplit.length; ++i)
		{
			List<Integer> modelIdGroup = new ArrayList<>();
			String[] groupSplit = stringSplit[i].split("\\+");

			for (int j = 0; j < groupSplit.length; ++j)
			{
				int modelId;

				try
				{
					modelId = Integer.parseInt(groupSplit[j].trim());
				}
				catch (NumberFormatException e)
				{
					continue;
				}

				if (modelId < 0)
				{
					continue;
				}

				modelIdGroup.add(modelId);
			}

			if (modelIdGroup.isEmpty())
			{
				modelIdGroup.add(EMPTY_MODEL_ID);
			}

			modelIdGroups.add(modelIdGroup);
		}

		if (modelIdGroups.isEmpty())
		{
			List<Integer> defaultIdGroup = new ArrayList<>();

			defaultIdGroup.add(EMPTY_MODEL_ID);
			modelIdGroups.add(defaultIdGroup);
		}

		return modelIdGroups;
	}

	private void removeRealDrops()
	{
		registry.reset();

		for (WorldPoint location : fakeDropLocationSpawnInstants.keySet())
		{
			registry.add(location);
		}
	}

	private void removeOldFakeDrops()
	{
		Iterator<Map.Entry<WorldPoint, Instant>> i = fakeDropLocationSpawnInstants.entrySet().iterator();
		Duration objectDuration = Duration.ofSeconds(config.getObjectDuration());

		while (i.hasNext())
		{
			Map.Entry<WorldPoint, Instant> entry = i.next();

			if (Duration.between(entry.getValue(), Instant.now()).compareTo(objectDuration) < 0)
			{
				continue;
			}

			registry.remove(entry.getKey());
			i.remove();
		}
	}

	private void resetRegistry()
	{
		registry.deactivateAll();
		registry = new KObjectLocationRegistry(client, clientThread, eventBus, tileModelIdGroups, chestModelIdGroups);
	}

	private void deleteRegistry()
	{
		registry.deactivateAll();
		registry = null;
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.krazune.hiddendropparty;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import net.runelite.api.Client;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.eventbus.EventBus;

public class KObjectLocationRegistry
{
	private final int RANDOM_COMMON_SEED = new Random().nextInt();

	private final Client client;
	private final ClientThread clientThread;
	private final EventBus eventBus;

	private Map<WorldPoint, KObjectCounter> registry;

	private List<List<Integer>> tileModelIdGroups;
	private List<List<Integer>> chestModelIdGroups;

	public KObjectLocationRegistry(Client client, ClientThread clientThread, EventBus eventBus, List<List<Integer>> tileModelIdGroups, List<List<Integer>> chestModelIdGroups)
	{
		this.client = client;
		this.clientThread = clientThread;
		this.eventBus = eventBus;

		registry = new HashMap<>();

		this.tileModelIdGroups = tileModelIdGroups;
		this.chestModelIdGroups = chestModelIdGroups;
	}

	public void add(WorldPoint location)
	{
		KObjectCounter kObjectCounter = registry.get(location);

		if (kObjectCounter != null)
		{
			kObjectCounter.increment();

			return;
		}

		KObject newObject = createRandomKObject(location);

		registry.put(location, new KObjectCounter(newObject, 1));
		newObject.setActive(true);
	}

	public void remove(WorldPoint location)
	{
		KObjectCounter kObjectCounter = registry.get(location);

		if (kObjectCounter == null)
		{
			return;
		}

		if (kObjectCounter.getCount() > 1)
		{
			kObjectCounter.decrement();

			return;
		}

		kObjectCounter.getKObject().setActive(false);
		registry.remove(location);
	}

	public boolean isEmpty()
	{
		return registry.isEmpty();
	}

	public int size()
	{
		return registry.size();
	}

	public void reset()
	{
		deactivateAll();

		registry = new HashMap<>();
	}

	public KObject createRandomKObject(WorldPoint location)
	{
		List<Integer> models = new ArrayList<>(getRandomTileModelIdGroup(location));

		models.addAll(getRandomChestModelIdGroup(location));

		return new KObject(client, clientThread, eventBus, location, models);
	}

	public void setTileModelIdGroups(List<List<Integer>> tileModelIdGroups)
	{
		this.tileModelIdGroups = tileModelIdGroups;

		recreateAll();
	}

	public void setChestModelIdGroups(List<List<Integer>> chestModelIdGroups)
	{
		this.chestModelIdGroups = chestModelIdGroups;

		recreateAll();
	}

	public void setModelIds(List<List<Integer>> tileModelIdGroups, List<List<Integer>> chestModelIdGroups)
	{
		this.tileModelIdGroups = tileModelIdGroups;
		this.chestModelIdGroups = chestModelIdGroups;

		recreateAll();
	}

	public void activateAll()
	{
		for (KObjectCounter kObjectCounter : registry.values())
		{
			kObjectCounter.getKObject().setActive(true);
		}
	}

	public void deactivateAll()
	{
		for (KObjectCounter kObjectCounter : registry.values())
		{
			kObjectCounter.getKObject().setActive(false);
		}
	}

	public void recreateAll()
	{
		for (KObjectCounter kObjectCounter : registry.values())
		{
			WorldPoint location = kObjectCounter.getKObject().getLocation();

			kObjectCounter.getKObject().setActive(false);
			kObjectCounter.setkObject(createRandomKObject(location));
			kObjectCounter.getKObject().setActive(true);
		}
	}

	private List<Integer> getRandomTileModelIdGroup(WorldPoint location)
	{
		Random random = new Random();

		random.setSeed(generateSeed(location));

		return tileModelIdGroups.get(random.nextInt(tileModelIdGroups.size()));
	}

	private List<Integer> getRandomChestModelIdGroup(WorldPoint location)
	{
		Random random = new Random();

		random.setSeed(generateSeed(location));

		return chestModelIdGroups.get(random.nextInt(chestModelIdGroups.size()));
	}

	private int generateSeed(WorldPoint location)
	{
		String stringSeed = "x" + location.getX() + "y" + location.getY() + "p" + location.getPlane();

		return RANDOM_COMMON_SEED ^ stringSeed.hashCode();
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.krazune.hiddendropparty;

public enum ChestModelIdsGroup
{
	DEFAULT("11123,15567,15885"),
	CRATES("12152,15509,29973,33922,31450"),
	CHESTS("11123,11204,12146,12150,12530"),
	CUSTOM("");

	private final String idsString;

	ChestModelIdsGroup(String idsString)
	{
		this.idsString = idsString;
	}

	public String getValue()
	{
		return idsString;
	}
}

