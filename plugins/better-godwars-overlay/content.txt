package com.BetterGodwarsOverlay;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class BetterGodwarsOverlay
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(BetterGodwarsOverlayPlugin.class);
		RuneLite.main(args);
	}
}
package com.BetterGodwarsOverlay;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

import java.awt.*;

@ConfigGroup(BetterGodwarsOverlayPlugin.CONFIG_GROUP)
public interface BetterGodwarsOverlayConfig extends Config {

	@ConfigSection(
			name = "General",
			description = "General plugin features can be modified here",
			position = 0
	)
	String generalSection = "general";

	@ConfigSection(
			name = "Customization",
			description = "Overlay customizations",
			position = 1
	)
	String customizationSection = "customization";

	@ConfigSection(
			name = "Hide Gods",
			description = "Toggle options to prevent specific god killcounts appearing on the overlay",
			position = 2
	)
	String hideSection = "hide";

	@ConfigItem(
			keyName = "showOverlay",
			name = "Show Overlay",
			description = "Show kill count overlay",
			section = generalSection
	)
	default boolean showOverlay() {
		return true;
	}

	@ConfigItem(
			keyName = "showInfoBoxes",
			name = "Show Info Boxes",
			description = "Show KC in info boxes",
			section = generalSection
	)
	default boolean showInfoBox() {
		return false;
	}

	@ConfigItem(
			keyName = "ShortGodNames",
			name = "Shorten God Names",
			description = "Shorten god names on the killcount overlay",
			section = customizationSection
	)
	default boolean shortGodNames() {
		return false;
	}

	@ConfigItem(
			keyName = "godNameColour",
			name = "God Name Colour",
			description = "Change the colour of the god names displayed on the overlay",
			section = customizationSection
	)
	default Color godNameColor() {
		return Color.ORANGE;
	}

	@ConfigItem(keyName = "highlightOnKCColour",
			name = "Kill Count Highlight Colour",
			description = "Change the colour of the kill count highlight displayed on the overlay",
			section = customizationSection)
	default Color highlightOnKCColor() {
		return Color.GREEN;
	}

	@ConfigItem(
			keyName = "showZeroKc",
			name = "Show Zero Kill Count",
			description = "Show info boxes with zero kc",
			section = generalSection
	)
	default boolean showZeroKc() {
		return false;
	}

	@ConfigItem(
			keyName = "hideArmadyl",
			name = "Hide Armadyl",
			description = "Hide Armadyl killcount from the overlay",
			section = hideSection,
			position = 1
	)
	default boolean hideArmadyl() {
		return false;
	}

	@ConfigItem(
			keyName = "hideBandos",
			name = "Hide Bandos",
			description = "Hide Bandos killcount from the overlay",
			section = hideSection,
			position = 2
	)

	default boolean hideBandos() {
		return false;
	}

	@ConfigItem(
			keyName = "hideSaradomin",
			name = "Hide Saradomin",
			description = "Hide Saradomin killcount from the overlay",
			section = hideSection,
			position = 3
	)

	default boolean hideSaradomin() {
		return false;
	}

	@ConfigItem(
			keyName = "hideZamorak",
			name = "Hide Zamorak",
			description = "Hide Zamorak killcount from the overlay",
			section = hideSection,
			position = 4
	)

	default boolean hideZamorak() {
		return false;
	}

	@ConfigItem(
			keyName = "hideAncient",
			name = "Hide Ancient",
			description = "Hide Ancient killcount from the overlay",
			section = hideSection,
			position = 5
	)
	default boolean hideAncient() {
		return false;
	}
}

package com.BetterGodwarsOverlay;

import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
@Getter
public enum BetterGodwarsOverlayVarbits
{

	GWD_ARMADYL_KC(3973),
	GWD_BANDOS_KC(3975),
	GWD_SARADOMIN_KC(3972),
	GWD_ZAMORAK_KC(3976),
	GWD_ZAROS_KC(13080);

	private final int id;

}

package com.BetterGodwarsOverlay;

import net.runelite.api.MenuAction;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.infobox.InfoBox;
import net.runelite.client.ui.overlay.infobox.InfoBoxPriority;

import javax.annotation.Nonnull;
import java.awt.*;
import java.awt.image.BufferedImage;

public class BetterGodwarsInfoBox extends InfoBox {
	private final BetterGodwarsGodInfo godInfo;

	public BetterGodwarsInfoBox(BufferedImage image, @Nonnull Plugin plugin, BetterGodwarsGodInfo godInfo) {
		super(image, plugin);
		this.godInfo = godInfo;

		setPriority(InfoBoxPriority.LOW);
		setTooltip(godInfo.getGod().getName());

		getMenuEntries().add(new OverlayMenuEntry(MenuAction.RUNELITE_INFOBOX, "Hide", godInfo.getGod().getName()));
	}

	@Override
	public String getText() {
		return Integer.toString(godInfo.getCurrentKc());
	}

	@Override
	public Color getTextColor() {
		return godInfo.getTextColor();
	}
}

package com.BetterGodwarsOverlay;

import lombok.Getter;
import lombok.Setter;
import net.runelite.client.util.ImageUtil;

import java.awt.*;
import java.awt.image.BufferedImage;

public class BetterGodwarsGodInfo {

	private final BetterGodwarsOverlayPlugin plugin;

	@Getter
	private final BetterGodwarsOverlayGods god;

	private final BufferedImage infoBoxIcon;

	@Getter
	@Setter
	boolean hidden;

	@Getter
	private int currentKc = 0;

	private BetterGodwarsInfoBox infoBox = null;

	public BetterGodwarsGodInfo(BetterGodwarsOverlayPlugin plugin, BetterGodwarsOverlayGods god, boolean hidden) {
		this.plugin = plugin;
		this.god = god;
		this.hidden = hidden;
		this.infoBoxIcon = ImageUtil.loadImageResource(getClass(), god.getImage());
	}

	public void update() {
		updateHidden();
		updateKc();
		updateInfoBox();
	}

	public void remove() {
		if (infoBox != null) {
			plugin.infoBoxManager.removeInfoBox(infoBox);
			infoBox = null;
		}
	}

	private void updateHidden() {
		boolean showInfoBox = plugin.config.showInfoBox(); // config show all infoBoxes
		showInfoBox &= !getConfigIsHidden(); // config show this gwd infoBox
		showInfoBox &= plugin.playerInGwd(); // player in gwd
		showInfoBox &= plugin.config.showZeroKc() || getCurrentKc() > 0;  // config show infoBox with zero kc

		setHidden(!showInfoBox);
	}

	public void updateKc() {
		currentKc = plugin.client.getVarbitValue(god.getKillCountVarbit().getId());
	}

	public Color getTextColor() {
		return currentKc >= plugin.getRequiredKc() ? plugin.config.highlightOnKCColor() : Color.WHITE;
	}

	public void updateInfoBox() {
		if (infoBox != null && isHidden()) {
			plugin.infoBoxManager.removeInfoBox(infoBox);
			infoBox = null;
		} else if (infoBox == null && !isHidden()) {
			infoBox = new BetterGodwarsInfoBox(infoBoxIcon, plugin, this);
			plugin.infoBoxManager.addInfoBox(infoBox);
		}
	}

	boolean getConfigIsHidden() {
		switch (god.getName()) {
			case "Armadyl":
				return plugin.config.hideArmadyl();
			case "Bandos":
				return plugin.config.hideBandos();
			case "Saradomin":
				return plugin.config.hideSaradomin();
			case "Zamorak":
				return plugin.config.hideZamorak();
			case "Ancient":
				return plugin.config.hideAncient();
			default:
				return false;
		}
	}
}

package com.BetterGodwarsOverlay;

import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.api.Varbits;

@Getter
@AllArgsConstructor
public enum BetterGodwarsKcRequired {

	GRANDMASTER(Varbits.COMBAT_ACHIEVEMENT_TIER_GRANDMASTER, 15),
	MASTER(Varbits.COMBAT_ACHIEVEMENT_TIER_MASTER, 25),
	ELITE(Varbits.COMBAT_ACHIEVEMENT_TIER_ELITE, 30),
	HARD(Varbits.COMBAT_ACHIEVEMENT_TIER_HARD, 35),
	DEFAULT(-1, 40); //  kc requirement for medium CA and under is not changed

	private final int combatAchievementVarbitId;
	private final int kcRequired;
}

package com.BetterGodwarsOverlay;

import lombok.Getter;
import lombok.RequiredArgsConstructor;


@Getter
@RequiredArgsConstructor
public enum BetterGodwarsOverlayGods {

	ARMADYL("Armadyl", BetterGodwarsOverlayVarbits.GWD_ARMADYL_KC, "armadyl.png"),
	BANDOS("Bandos", BetterGodwarsOverlayVarbits.GWD_BANDOS_KC, "bandos.png"),
	SARADOMIN("Saradomin", BetterGodwarsOverlayVarbits.GWD_SARADOMIN_KC, "saradomin.png"),
	ZAMORAK("Zamorak", BetterGodwarsOverlayVarbits.GWD_ZAMORAK_KC, "zamorak.png"),
	ZAROS("Ancient", BetterGodwarsOverlayVarbits.GWD_ZAROS_KC, "zaros.png");

	private final String name;

	private final BetterGodwarsOverlayVarbits killCountVarbit;

	private final String image;
}

package com.BetterGodwarsOverlay;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.events.ClientTick;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.ComponentID;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.InfoBoxMenuClicked;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;

import javax.inject.Inject;
import java.util.Arrays;
import java.util.Objects;

@Slf4j
@PluginDescriptor(
	name = "Better Godwars Overlay",
	description = "Goodbye to Jagex's ugly GWD overlay",
	tags = {"gwd", "pvm", "bossing"}
)
public class BetterGodwarsOverlayPlugin extends Plugin
{
	public static final String CONFIG_GROUP = "BetterGodwarsOverlayPlugin";

	@Inject
	private OverlayManager overlayManager;

	@Inject
	Client client;

	@Inject
	private BetterGodwarsOverlayOverlay gwdOverlay;

	@Inject
	InfoBoxManager infoBoxManager;

	@Inject
	BetterGodwarsOverlayConfig config;

	@Inject
	private ConfigManager configManager;

	BetterGodwarsGodInfo[] godsInfo = new BetterGodwarsGodInfo[5];

	// Completed combat achievement varbit value
	public static final int COMBAT_ACHIEVEMENT_COMPLETE = 2;

	@Provides
	BetterGodwarsOverlayConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(BetterGodwarsOverlayConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		godsInfo = new BetterGodwarsGodInfo[]{
				new BetterGodwarsGodInfo(this, BetterGodwarsOverlayGods.ARMADYL, config.hideArmadyl()),
				new BetterGodwarsGodInfo(this, BetterGodwarsOverlayGods.BANDOS, config.hideBandos()),
				new BetterGodwarsGodInfo(this, BetterGodwarsOverlayGods.SARADOMIN, config.hideSaradomin()),
				new BetterGodwarsGodInfo(this, BetterGodwarsOverlayGods.ZAMORAK, config.hideZamorak()),
				new BetterGodwarsGodInfo(this, BetterGodwarsOverlayGods.ZAROS, config.hideAncient())
		};
		hideGwdWidget();
		overlayManager.add(gwdOverlay);
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(gwdOverlay);
		Arrays.stream(godsInfo).filter(Objects::nonNull).forEach(BetterGodwarsGodInfo::remove);

		//restore widgets
		restoreGwdWidget();
	}

	@Subscribe
	public void onClientTick(ClientTick event) {
		if (playerInGwd()) {
			hideGwdWidget();
			Arrays.stream(godsInfo).filter(Objects::nonNull).forEach(BetterGodwarsGodInfo::update);
		} else {
			Arrays.stream(godsInfo).filter(Objects::nonNull).forEach(BetterGodwarsGodInfo::remove);
		}
	}

	@Subscribe
	public void onInfoBoxMenuClicked(InfoBoxMenuClicked event) {
		if (!(event.getInfoBox() instanceof BetterGodwarsInfoBox) || !event.getEntry().getOption().equals("Hide")) {
			return;
		}
		Arrays.stream(godsInfo).filter(Objects::nonNull).forEach(godInfo -> {
			if (godInfo.getGod().getName().equals(event.getEntry().getTarget())) {
				godInfo.setHidden(true);
				String configKey = "hide" + godInfo.getGod().getName();
				configManager.setConfiguration(CONFIG_GROUP, configKey, true);
				log.debug("Setting config key {}.{} to true", CONFIG_GROUP, configKey);
			}
		});
	}

	private Widget getGwdWidget() {
		return client.getWidget(ComponentID.GWD_KC_LAYER);
	}

	public boolean playerInGwd() {
		return getGwdWidget() != null;
	}

	public void hideGwdWidget() {
		Widget gwdWidget = getGwdWidget();
		if (gwdWidget != null) {
			gwdWidget.setHidden(true);
		}
	}

	public void restoreGwdWidget() {
		Widget gwdWidget = getGwdWidget();
		if (gwdWidget != null) {
			gwdWidget.setHidden(false);
		}
	}

	public int getRequiredKc() {
		for (BetterGodwarsKcRequired required : BetterGodwarsKcRequired.values()) {
			if (required == BetterGodwarsKcRequired.DEFAULT) break;

			boolean completedCa = client.getVarbitValue(required.getCombatAchievementVarbitId()) == COMBAT_ACHIEVEMENT_COMPLETE;
			if (completedCa) {
				return required.getKcRequired();
			}
		}
		return BetterGodwarsKcRequired.DEFAULT.getKcRequired();
	}
}

package com.BetterGodwarsOverlay;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.awt.*;
import java.util.Arrays;
import java.util.Objects;

import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class BetterGodwarsOverlayOverlay extends OverlayPanel
{

	private final BetterGodwarsOverlayConfig config;
	private final BetterGodwarsOverlayPlugin plugin;

	@Inject
	private BetterGodwarsOverlayOverlay(BetterGodwarsOverlayPlugin plugin, BetterGodwarsOverlayConfig config)
	{
		super(plugin);
		setPosition(OverlayPosition.TOP_LEFT);
		setPriority(PRIORITY_LOW);

		this.plugin = plugin;
		this.config = config;

		getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Godwars Overlay"));
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		final boolean inGwd = plugin.playerInGwd();
		final boolean shouldShowOverlay = inGwd && config.showOverlay();

		if (shouldShowOverlay) {
			Arrays.stream(plugin.godsInfo).filter(Objects::nonNull).forEach(godInfo -> {
				if (godInfo.getConfigIsHidden()) {
					return;
				}

				final int killCount = godInfo.getCurrentKc();
				final String name = godInfo.getGod().getName();

				panelComponent.getChildren().add(LineComponent.builder()
								.left(config.shortGodNames() ? name.substring(0, 2) : name)
								.leftColor(config.godNameColor())
								.right(Integer.toString(killCount))
								.rightColor(godInfo.getTextColor())
								.build());
			});
		}
		return super.render(graphics);
	}
}

