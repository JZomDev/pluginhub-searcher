package com.panelscroller;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PanelScrollerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PanelScrollerPlugin.class);
		RuneLite.main(args);
	}
}
package com.panelscroller;

import com.google.inject.Provides;
import java.util.Objects;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.VarClientInt;
import net.runelite.api.Varbits;
import net.runelite.api.events.VarClientIntChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.config.Keybind;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.input.KeyManager;
import net.runelite.client.input.MouseManager;
import net.runelite.client.input.MouseWheelListener;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.HotkeyListener;
import org.apache.commons.lang3.ArrayUtils;

@Slf4j
@PluginDescriptor(
	name = "Panel Scroller"
)
public class PanelScrollerPlugin extends Plugin
{
	private boolean modifierHeld = false;
	private int currentTab;

	private final int SWITCH_TAB = 915;

	private final int[] classicTabOrder = {0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13};

	private final int[] modernTabOrder = {0, 1, 2, 3, 4, 5, 6, 9, 8, 7, 11, 12, 13, 10};

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private KeyManager keyManager;

	@Inject
	private MouseManager mouseManager;

	@Inject
	private PanelScrollerConfig config;

	@Override
	protected void startUp() throws Exception
	{
		keyManager.registerKeyListener(modifierKeyListener);
		keyManager.registerKeyListener(prevKeyListener);
		keyManager.registerKeyListener(nextKeyListener);
		mouseManager.registerMouseWheelListener(mouseWheelListener);
	}

	@Override
	protected void shutDown() throws Exception
	{
		keyManager.unregisterKeyListener(modifierKeyListener);
		keyManager.unregisterKeyListener(prevKeyListener);
		keyManager.unregisterKeyListener(nextKeyListener);
		mouseManager.unregisterMouseWheelListener(mouseWheelListener);

	}

	@Subscribe
	public void onVarClientIntChanged(VarClientIntChanged event)
	{
		if (event.getIndex() == VarClientInt.INVENTORY_TAB)
		{
			int tabVar = client.getVarcIntValue(VarClientInt.INVENTORY_TAB);
			if (tabVar != -1)
			{
				currentTab = tabVar;
			}
		}
	}

	private final HotkeyListener modifierKeyListener = new HotkeyListener(() -> config.modifierKey())
	{
		@Override
		public void hotkeyPressed()
		{
			modifierHeld = true;
		}

		@Override
		public void hotkeyReleased()
		{
			if (modifierHeld)
			{
				modifierHeld = false;
			}
		}
	};

	private final HotkeyListener prevKeyListener = new HotkeyListener(() -> config.prevPanelKey())
	{
		@Override
		public void hotkeyPressed()
		{
			if (modifierHeld || Objects.equals(config.modifierKey(), Keybind.NOT_SET))
			{
				clientThread.invoke(() -> {
					if (client.getGameState() != GameState.LOGGED_IN)
					{
						return;
					}

					int newTab;
					if (!client.isResized() || client.getVarbitValue(Varbits.SIDE_PANELS) == 0)
					{
						int currTabIdx = ArrayUtils.indexOf(classicTabOrder, currentTab);
						int newTabIdx = currTabIdx - 1;
						if (newTabIdx < 0)
						{
							newTabIdx = classicTabOrder.length - 1;
						}

						newTab = classicTabOrder[newTabIdx];
					}
					else
					{
						int currTabIdx = ArrayUtils.indexOf(modernTabOrder, currentTab);
						int newTabIdx = currTabIdx - 1;
						if (newTabIdx < 0)
						{
							newTabIdx = classicTabOrder.length - 1;
						}

						newTab = modernTabOrder[newTabIdx];
					}

					client.runScript(SWITCH_TAB, newTab);
				});
			}
		}
	};

	private final HotkeyListener nextKeyListener = new HotkeyListener(() -> config.nextPanelKey())
	{
		@Override
		public void hotkeyPressed()
		{
			if (modifierHeld || Objects.equals(config.modifierKey(), Keybind.NOT_SET))
			{
				clientThread.invoke(() -> {
					if (client.getGameState() != GameState.LOGGED_IN)
					{
						return;
					}

					int newTab;
					if (!client.isResized() || client.getVarbitValue(Varbits.SIDE_PANELS) == 0)
					{
						int currTabIdx = ArrayUtils.indexOf(classicTabOrder, currentTab);
						int newTabIdx = currTabIdx + 1;
						if (newTabIdx >= classicTabOrder.length)
						{
							newTabIdx = 0;
						}

						newTab = classicTabOrder[newTabIdx];
					}
					else
					{
						int currTabIdx = ArrayUtils.indexOf(modernTabOrder, currentTab);
						int newTabIdx = currTabIdx + 1;
						if (newTabIdx >= modernTabOrder.length)
						{
							newTabIdx = 0;
						}

						newTab = modernTabOrder[newTabIdx];
					}

					client.runScript(SWITCH_TAB, newTab);
				});
			}
		}
	};

	private final MouseWheelListener mouseWheelListener = event -> {
		if (modifierHeld)
		{
			boolean shouldCycle = false;

			// scroll down
			if (event.getWheelRotation() > 0)
			{
				shouldCycle = Objects.equals(config.prevPanelKey(), Keybind.NOT_SET);
			}
			// scroll up
			else if (event.getWheelRotation() < 0)
			{
				shouldCycle = Objects.equals(config.nextPanelKey(), Keybind.NOT_SET);
			}

			if (shouldCycle)
			{
				event.consume();

				clientThread.invoke(() -> {


					if (client.getGameState() != GameState.LOGGED_IN)
					{
						return;
					}

					int newTab;
					if (!client.isResized() || client.getVarbitValue(Varbits.SIDE_PANELS) == 0)
					{
						int currTabIdx = ArrayUtils.indexOf(classicTabOrder, currentTab);
						int newTabIdx = currTabIdx - event.getWheelRotation();
						if (newTabIdx >= classicTabOrder.length)
						{
							newTabIdx = 0;
						}
						else if (newTabIdx < 0)
						{
							newTabIdx = classicTabOrder.length - 1;
						}

						newTab = classicTabOrder[newTabIdx];
					}
					else
					{
						int currTabIdx = ArrayUtils.indexOf(modernTabOrder, currentTab);
						int newTabIdx = currTabIdx - event.getWheelRotation();
						if (newTabIdx >= modernTabOrder.length)
						{
							newTabIdx = 0;
						}
						else if (newTabIdx < 0)
						{
							newTabIdx = modernTabOrder.length - 1;
						}

						newTab = modernTabOrder[newTabIdx];
					}
					client.runScript(SWITCH_TAB, newTab);
				});
			}
		}

		return event;
	};

	@Provides
	PanelScrollerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(PanelScrollerConfig.class);
	}

}

package com.panelscroller;

import java.awt.event.KeyEvent;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Keybind;
import net.runelite.client.config.ModifierlessKeybind;

@ConfigGroup(PanelScrollerConfig.GROUP)
public interface PanelScrollerConfig extends Config
{
	String GROUP = "panelscroller";

	@ConfigItem(
		keyName = "modifierKey",
		name = "Modifier Key",
		description = "A key that must be held for the Previous and Next Panel keybinds to work. Must be set to use scroll wheel",
		position = 0
	)
	default Keybind modifierKey()
	{
		return Keybind.CTRL;
	}

	@ConfigItem(
		keyName = "prevPanelKey",
		name = "Previous Panel",
		description = "The keybind to cycle to the previous panel. If unbound defaults to scroll-down",
		position = 1
	)
	default ModifierlessKeybind prevPanelKey()
	{
		return new ModifierlessKeybind(KeyEvent.VK_UNDEFINED, 0);
	}

	@ConfigItem(
		keyName = "nextPanelKey",
		name = "Next Panel",
		description = "The keybind to cycle to the next panel. If unbound defaults to scroll-up",
		position = 2
	)
	default ModifierlessKeybind nextPanelKey()
	{
		return new ModifierlessKeybind(KeyEvent.VK_UNDEFINED, 0);
	}


}

