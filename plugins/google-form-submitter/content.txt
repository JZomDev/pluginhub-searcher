package com.example;

import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import net.runelite.api.ItemID;
import net.runelite.client.game.ItemStack;

public class Logic
{
	private static final HashSet<Integer> gauntletUniques = new HashSet<>(
		List.of(ItemID.GAUNTLET_CAPE, ItemID.CRYSTAL_SHARD, ItemID.CRYSTAL_WEAPON_SEED, ItemID.CRYSTAL_ARMOUR_SEED,
				ItemID.ENHANCED_CRYSTAL_WEAPON_SEED, ItemID.YOUNGLLEF, ItemID.CLUE_SCROLL_ELITE,
				ItemID.CLUE_SCROLL_ELITE_12074, ItemID.CLUE_SCROLL_ELITE_12075, ItemID.CLUE_SCROLL_ELITE_12076,
				ItemID.CLUE_SCROLL_ELITE_12077, ItemID.CLUE_SCROLL_ELITE_12078, ItemID.CLUE_SCROLL_ELITE_12079,
				ItemID.CLUE_SCROLL_ELITE_12080, ItemID.CLUE_SCROLL_ELITE_12081, ItemID.CLUE_SCROLL_ELITE_12082,
				ItemID.CLUE_SCROLL_ELITE_12083, ItemID.CLUE_SCROLL_ELITE_12085, ItemID.CLUE_SCROLL_ELITE_12086,
				ItemID.CLUE_SCROLL_ELITE_12087, ItemID.CLUE_SCROLL_ELITE_12088, ItemID.CLUE_SCROLL_ELITE_12089,
				ItemID.CLUE_SCROLL_ELITE_12090, ItemID.CLUE_SCROLL_ELITE_12091, ItemID.CLUE_SCROLL_ELITE_12092,
				ItemID.CLUE_SCROLL_ELITE_12093, ItemID.CLUE_SCROLL_ELITE_12094, ItemID.CLUE_SCROLL_ELITE_12095,
				ItemID.CLUE_SCROLL_ELITE_12096, ItemID.CLUE_SCROLL_ELITE_12097, ItemID.CLUE_SCROLL_ELITE_12098,
				ItemID.CLUE_SCROLL_ELITE_12099, ItemID.CLUE_SCROLL_ELITE_12100, ItemID.CLUE_SCROLL_ELITE_12101,
				ItemID.CLUE_SCROLL_ELITE_12102, ItemID.CLUE_SCROLL_ELITE_12103, ItemID.CLUE_SCROLL_ELITE_12104,
				ItemID.CLUE_SCROLL_ELITE_12105, ItemID.CLUE_SCROLL_ELITE_12106, ItemID.CLUE_SCROLL_ELITE_12107,
				ItemID.CLUE_SCROLL_ELITE_12108, ItemID.CLUE_SCROLL_ELITE_12109, ItemID.CLUE_SCROLL_ELITE_12110,
				ItemID.CLUE_SCROLL_ELITE_12111, ItemID.CLUE_SCROLL_ELITE_12113, ItemID.CLUE_SCROLL_ELITE_12114,
				ItemID.CLUE_SCROLL_ELITE_12115, ItemID.CLUE_SCROLL_ELITE_12116, ItemID.CLUE_SCROLL_ELITE_12117,
				ItemID.CLUE_SCROLL_ELITE_12118, ItemID.CLUE_SCROLL_ELITE_12119, ItemID.CLUE_SCROLL_ELITE_12120,
				ItemID.CLUE_SCROLL_ELITE_12121, ItemID.CLUE_SCROLL_ELITE_12122, ItemID.CLUE_SCROLL_ELITE_12123,
				ItemID.CLUE_SCROLL_ELITE_12124, ItemID.CLUE_SCROLL_ELITE_12125, ItemID.CLUE_SCROLL_ELITE_12126,
				ItemID.CLUE_SCROLL_ELITE_12127, ItemID.CLUE_SCROLL_ELITE_12130, ItemID.CLUE_SCROLL_ELITE_12132,
				ItemID.CLUE_SCROLL_ELITE_12133, ItemID.CLUE_SCROLL_ELITE_12134, ItemID.CLUE_SCROLL_ELITE_12135,
				ItemID.CLUE_SCROLL_ELITE_12136, ItemID.CLUE_SCROLL_ELITE_12137, ItemID.CLUE_SCROLL_ELITE_12138,
				ItemID.CLUE_SCROLL_ELITE_12140, ItemID.CLUE_SCROLL_ELITE_12141, ItemID.CLUE_SCROLL_ELITE_12142,
				ItemID.CLUE_SCROLL_ELITE_12143, ItemID.CLUE_SCROLL_ELITE_12144, ItemID.CLUE_SCROLL_ELITE_12145,
				ItemID.CLUE_SCROLL_ELITE_12146, ItemID.CLUE_SCROLL_ELITE_12147, ItemID.CLUE_SCROLL_ELITE_12148,
				ItemID.CLUE_SCROLL_ELITE_12149, ItemID.CLUE_SCROLL_ELITE_12150, ItemID.CLUE_SCROLL_ELITE_12151,
				ItemID.CLUE_SCROLL_ELITE_12152, ItemID.CLUE_SCROLL_ELITE_12153, ItemID.CLUE_SCROLL_ELITE_12154,
				ItemID.CLUE_SCROLL_ELITE_12155, ItemID.CLUE_SCROLL_ELITE_12156, ItemID.CLUE_SCROLL_ELITE_12157,
				ItemID.CLUE_SCROLL_ELITE_12158, ItemID.CLUE_SCROLL_ELITE_12159, ItemID.CLUE_SCROLL_ELITE_19782,
				ItemID.CLUE_SCROLL_ELITE_19783, ItemID.CLUE_SCROLL_ELITE_19784, ItemID.CLUE_SCROLL_ELITE_19785,
				ItemID.CLUE_SCROLL_ELITE_19786, ItemID.CLUE_SCROLL_ELITE_19787, ItemID.CLUE_SCROLL_ELITE_19788,
				ItemID.CLUE_SCROLL_ELITE_19789, ItemID.CLUE_SCROLL_ELITE_19790, ItemID.CLUE_SCROLL_ELITE_19791,
				ItemID.CLUE_SCROLL_ELITE_19792, ItemID.CLUE_SCROLL_ELITE_19793, ItemID.CLUE_SCROLL_ELITE_19794,
				ItemID.CLUE_SCROLL_ELITE_19795, ItemID.CLUE_SCROLL_ELITE_19796, ItemID.CLUE_SCROLL_ELITE_19797,
				ItemID.CLUE_SCROLL_ELITE_19798, ItemID.CLUE_SCROLL_ELITE_19799, ItemID.CLUE_SCROLL_ELITE_19800,
				ItemID.CLUE_SCROLL_ELITE_19801, ItemID.CLUE_SCROLL_ELITE_19802, ItemID.CLUE_SCROLL_ELITE_19803,
				ItemID.CLUE_SCROLL_ELITE_19804, ItemID.CLUE_SCROLL_ELITE_19805, ItemID.CLUE_SCROLL_ELITE_19806,
				ItemID.CLUE_SCROLL_ELITE_19807, ItemID.CLUE_SCROLL_ELITE_19808, ItemID.CLUE_SCROLL_ELITE_19809,
				ItemID.CLUE_SCROLL_ELITE_19810, ItemID.CLUE_SCROLL_ELITE_19811, ItemID.CLUE_SCROLL_ELITE_19813,
				ItemID.CLUE_SCROLL_ELITE_21524, ItemID.CLUE_SCROLL_ELITE_21525, ItemID.CLUE_SCROLL_ELITE_22000,
				ItemID.CLUE_SCROLL_ELITE_23144, ItemID.CLUE_SCROLL_ELITE_23145, ItemID.CLUE_SCROLL_ELITE_23146,
				ItemID.CLUE_SCROLL_ELITE_23147, ItemID.CLUE_SCROLL_ELITE_23148, ItemID.CLUE_SCROLL_ELITE_23770,
				ItemID.CLUE_SCROLL_ELITE_24253, ItemID.CLUE_SCROLL_ELITE_24773, ItemID.CLUE_SCROLL_ELITE_25498,
				ItemID.CLUE_SCROLL_ELITE_25499, ItemID.CLUE_SCROLL_ELITE_25786, ItemID.CLUE_SCROLL_ELITE_25787,
				ItemID.CLUE_SCROLL_ELITE_26943, ItemID.CLUE_SCROLL_ELITE_26944));

	static String getGauntletType(Collection<ItemStack> itemStackCollection)
	{
		var nonUniqueDrops = Logic.handleGauntletDrops(itemStackCollection);
		if (nonUniqueDrops == 2)
		{
			return NpcType.GAUNTLET_REGULAR;
		}
		if (nonUniqueDrops == 3)
		{
			return NpcType.GAUNTLET_CORRUPTED;
		}
		return NpcType.GAUNTLET_DIED;
	}

	private static long handleGauntletDrops(Collection<ItemStack> itemStackCollection)
	{
		return itemStackCollection.stream().filter(e -> !gauntletUniques.contains(e.getId())).count();
	}

	private static final HashSet<String> raidsNameSet = new HashSet<>(
		List.of("Chambers of Xeric", "Theatre of Blood", "Tombs of Amascut"));

	static boolean isRaid(String npcName)
	{
		return raidsNameSet.contains(npcName);
	}

	static String getRaidsType(String npcName, String killType)
	{
		switch (npcName)
		{
			case "Chambers of Xeric":
				return handleChambers(killType);
			case "Theatre of Blood":
				return handleTob(killType);
			case "Tombs of Amascut":
				return handleToa(killType);
			default:
				return npcName;
		}
	}

	private static String handleChambers(String killType)
	{
		if (killType.equals(NpcType.COX_CM))
		{
			return NpcType.COX_CM;
		}
		return NpcType.COX_REGULAR;
	}

	private static String handleTob(String killType)
	{
		if (killType.equals(NpcType.TOB_SM))
		{
			return NpcType.TOB_SM;
		}
		if (killType.equals(NpcType.TOB_HM))
		{
			return NpcType.TOB_HM;
		}
		return NpcType.TOB_REGULAR;
	}

	private static String handleToa(String killType)
	{
		if (killType.equals(NpcType.TOA_EM))
		{
			return NpcType.TOA_EM;
		}
		if (killType.equals(NpcType.TOA_XM))
		{
			return NpcType.TOA_XM;
		}
		return NpcType.TOA_REGULAR;
	}
}

package com.example;

public class NpcType
{
	public static final String GAUNTLET_REGULAR = "Gauntlet (Normal)";
	public static final String GAUNTLET_CORRUPTED = "Gauntlet (Corrupted)";
	public static final String GAUNTLET_DIED = "Gauntlet (Died)";
	public static final String COX_REGULAR = "Chambers of Xeric";
	public static final String COX_CM = "Chambers of Xeric (CM)";
	public static final String TOB_REGULAR = "Theatre of Blood";
	public static final String TOB_SM = "Theatre of Blood (SM)";
	public static final String TOB_HM = "Theatre of Blood (HM)";
	public static final String TOA_REGULAR = "Tombs of Amascut";
	public static final String TOA_EM = "Tombs of Amascut (EM)";
	public static final String TOA_XM = "Tombs of Amascut (XM)";
}

package com.example;

import lombok.Getter;

@Getter
public class NpcDropTuple
{
	private final String npcName;
	private final String itemName;

	public NpcDropTuple(String npcName, String itemName)
	{
		this.npcName = npcName;
		this.itemName = itemName;
	}
}

package com.example;

import com.google.inject.Provides;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.WorldType;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.NpcLootReceived;
import net.runelite.client.game.ItemStack;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.loottracker.LootReceived;
import net.runelite.client.ui.DrawManager;
import net.runelite.http.api.loottracker.LootRecordType;

@Slf4j
@PluginDescriptor(name = "Google Form Submitter")
public class GoogleFormSubmitterPlugin extends Plugin
{
	@Inject
	private Client client;
	@Inject
	private ClientThread clientThread;
	@Inject
	private GoogleFormSubmitterConfig config;
	@Inject
	private ChatMessageManager chatMessageManager;
	@Inject
	private DrawManager drawManager;
	@Inject
	private ScheduledExecutorService executor;
	@Inject
	private ImageCapture imageCapture;

	private HashMap<String, HashMap<Integer, NpcDropTuple>> nameItemMapping;
	private String killType;
	private boolean delayedMagicBoolean;
	private String delayedNpcName;
	private List<NpcDropTuple> delayedDropsToSubmit;
	private final HashSet<String> lootReceivedNpcs = new HashSet<>(List.of("The Whisperer", "Araxxor", "Branda the Fire Queen", "Eldric the Ice King"));
	private final HashSet<String> delayedNpcs = new HashSet<>(
		List.of("Nex", "Nightmare of Ashihama", "Phosani's Nightmare", "The Hueycoatl"));
	private final HashSet<WorldType> unsuitableWorldTypes = new HashSet<>(
		List.of(WorldType.BETA_WORLD, WorldType.FRESH_START_WORLD, WorldType.QUEST_SPEEDRUNNING, WorldType.SEASONAL,
				WorldType.TOURNAMENT_WORLD));

	//<editor-fold desc="Event Bus/Config Methods">
	@Provides
	GoogleFormSubmitterConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(GoogleFormSubmitterConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		this.updateNameItemMapping();
		this.imageCapture.updateApiKey(config.ibbApiKey());
		this.killType = null;
		this.resetDelayedLoot();
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged)
	{
		if (!configChanged.getGroup().equals("googleformsubmitter"))
		{
			return;
		}
		if (configChanged.getKey().equals("itemDropMapping") || configChanged.getKey().equals("dropMappingUrl"))
		{
			this.updateNameItemMapping();
		}
		else if (configChanged.getKey().equals("ibbApiKey"))
		{
			this.imageCapture.updateApiKey(configChanged.getNewValue());
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		if (event.getType() != ChatMessageType.GAMEMESSAGE && event.getType() != ChatMessageType.SPAM)
		{
			return;
		}

		String chatMessage = event.getMessage();

		if (chatMessage.startsWith("Your completed Chambers of Xeric count is:"))
		{
			killType = NpcType.COX_REGULAR;
		}
		if (chatMessage.startsWith("Your completed Chambers of Xeric Challenge Mode count is:"))
		{
			killType = NpcType.COX_CM;
		}
		if (chatMessage.startsWith("Your completed Theatre of Blood"))
		{
			killType = chatMessage.contains("Hard Mode") ? NpcType.TOB_HM : chatMessage.contains(
				"Story Mode") ? NpcType.TOB_SM : NpcType.TOB_REGULAR;
		}
		if (chatMessage.startsWith("Your completed Tombs of Amascut"))
		{
			killType = chatMessage.contains("Expert Mode") ? NpcType.TOA_XM : chatMessage.contains(
				"Entry Mode") ? NpcType.TOA_EM : NpcType.TOA_REGULAR;
		}
	}

	@Subscribe
	public void onGameTick(GameTick e)
	{
		if (client.getGameState() != GameState.LOGGED_IN)
		{
			return;
		}
		if (this.delayedNpcName != null && this.delayedDropsToSubmit != null)
		{
			if (this.delayedMagicBoolean = !this.delayedMagicBoolean)
			{
				return;
			}
			this.submitListOfNpcDropTuples(this.delayedNpcName, this.delayedDropsToSubmit);
		}
		this.resetDelayedLoot();
	}

	@Subscribe
	public void onLootReceived(LootReceived lootReceived)
	{
		if (lootReceivedNpcs.contains(lootReceived.getName()))
		{
			this.handleLootReceived(lootReceived.getName(), lootReceived.getItems());
			return;
		}
		if (lootReceived.getType() == LootRecordType.NPC)
		{
			return;
		}
		this.processOnLootReceived(lootReceived);
	}

	@Subscribe
	public void onNpcLootReceived(NpcLootReceived npcLootReceived)
	{
		var npc = npcLootReceived.getNpc();
		var lootReceived = npcLootReceived.getItems();
		var npcName = npc.getName();
		if (npcName == null)
		{
			return;
		}
		this.handleLootReceived(npcName, lootReceived);
	}
	//</editor-fold>

	private void updateNameItemMapping()
	{
		try
		{
			String rawConfig;
			if ((rawConfig = getMappingResource(config.dropMappingUrl())) == null)
			{
				rawConfig = config.itemDropMapping();
			}
			rawConfig = rawConfig.replaceAll("\\s*,\\s*", ",");
			String[] rows = rawConfig.split("\n");
			HashMap<String, HashMap<Integer, NpcDropTuple>> nameItemMapping = new HashMap<>();
			for (String row : rows)
			{
				String[] elements = row.split(",");
				if (elements.length != 4)
				{
					continue;
				}
				String npcName = elements[0];
				int itemId = Integer.parseInt(elements[1]);
				String npcSubmissionName = elements[2];
				String itemSubmissionName = elements[3];

				NpcDropTuple mappedTuple = new NpcDropTuple(npcSubmissionName, itemSubmissionName);
				HashMap<Integer, NpcDropTuple> value = nameItemMapping.getOrDefault(npcName, new HashMap<>());
				value.put(itemId, mappedTuple);
				nameItemMapping.put(npcName, value);
				this.nameItemMapping = nameItemMapping;
			}
		}
		catch (Exception e)
		{
			var message = new ChatMessageBuilder().append("Drop mapping has failed to be parsed.");
			chatMessageManager.queue(QueuedMessage.builder()
												  .type(ChatMessageType.ITEM_EXAMINE)
												  .runeLiteFormattedMessage(message.build())
												  .build());
		}
	}

	private List<NpcDropTuple> handleItemStackCollection(String npcName, Collection<ItemStack> itemStackCollection)
	{
		if (!nameItemMapping.containsKey(npcName))
		{
			return null;
		}
		HashMap<Integer, NpcDropTuple> acceptableDrops = nameItemMapping.get(npcName);
		return itemStackCollection.stream()
								  .map(ItemStack::getId)
								  .map(id -> acceptableDrops.getOrDefault(id, null))
								  .filter(Objects::nonNull)
								  .collect(Collectors.toList());
	}

	// Process onLootReceived event bus to identify the drop source
	private void processOnLootReceived(LootReceived lootReceived)
	{
		String npcName = lootReceived.getName();

		if (Logic.isRaid(npcName))
		{
			npcName = Logic.getRaidsType(npcName, killType);
			killType = null;
		}
		else if (npcName.equals("The Gauntlet"))
		{
			npcName = Logic.getGauntletType(lootReceived.getItems());
		}
		this.handleLootReceived(npcName, lootReceived.getItems());
	}

	private void handleLootReceived(String npcName, Collection<ItemStack> itemStackCollection)
	{
		if (config.ibbApiKey().isBlank())
		{
			return;
		}
		if (!isWhitelistedCharacter())
		{
			return;
		}
		if (this.isUnsuitableWorld())
		{
			return;
		}

		List<NpcDropTuple> dropsToSubmit = this.handleItemStackCollection(npcName, itemStackCollection);
		if (dropsToSubmit == null || dropsToSubmit.isEmpty())
		{
			return;
		}

		if (this.delayedNpcs.contains(npcName))
		{
			this.delayedNpcName = npcName;
			this.delayedDropsToSubmit = dropsToSubmit;
			return;
		}

		this.submitListOfNpcDropTuples(npcName, dropsToSubmit);
	}

	private void submitListOfNpcDropTuples(String npcName, List<NpcDropTuple> dropsToSubmit)
	{
		CompletableFuture<String> screenshotUrl = this.takeScreenshot(npcName);
		screenshotUrl.thenAccept(url -> {
			if (url.isEmpty())
			{
				return;
			}
			dropsToSubmit.forEach(npcDropTuple -> submitScreenshot(this.constructSubmissionUrl(url, npcDropTuple),
																   npcDropTuple.getItemName()));
		});
	}

	private void openAllChatbox()
	{
		if (getChatboxId() == 0)
		{
			return;
		}
		clientThread.invokeLater(() -> client.runScript(175, 1, 0));
	}

	private CompletableFuture<String> takeScreenshot(String npcName)
	{
		CompletableFuture<String> screenshotUrl = new CompletableFuture<>();

		this.openAllChatbox();
		Consumer<Image> imageCallback = (img) -> executor.submit(() -> screenshotUrl.complete(
			imageCapture.processScreenshot(img, client.getLocalPlayer().getName(), npcName)));

		executor.submit(() -> {
			while (getChatboxId() != 0)
			{
			}
			drawManager.requestNextFrameListener(imageCallback);
		});

		return screenshotUrl;
	}

	private String constructSubmissionUrl(String screenshotUrl, NpcDropTuple npcDropTuple)
	{
		StringBuilder sb = new StringBuilder("https://docs.google.com/forms/d/e/");

		String formId = config.formId().strip();
		if (!formId.matches("^[a-zA-Z0-9_-]{40,}$"))
		{
			var message = new ChatMessageBuilder().append("Google Form ID is malformed");
			chatMessageManager.queue(QueuedMessage.builder()
												  .type(ChatMessageType.ITEM_EXAMINE)
												  .runeLiteFormattedMessage(message.build())
												  .build());
			return null;
		}
		sb.append(formId);

		sb.append("/formResponse?");

		String entrySettings = config.entrySettings();
		entrySettings = entrySettings.replaceAll("\\s*,\\s*", ",");
		var entryArray = entrySettings.split("\n");
		for (var keyValueString : entryArray)
		{
			var keyValueArray = keyValueString.split(",");
			if (keyValueArray.length != 2)
			{
				var message = new ChatMessageBuilder().append("Key/Value pairs are malformed");
				chatMessageManager.queue(QueuedMessage.builder()
													  .type(ChatMessageType.ITEM_EXAMINE)
													  .runeLiteFormattedMessage(message.build())
													  .build());
				log.info(keyValueString);
				continue;
			}
			var key = keyValueArray[0];
			var value = keyValueArray[1];
			sb.append("&entry.").append(key).append("=").append(value);
		}

		String npcNameEntry = config.npcNameEntry().strip();
		sb.append("&entry.").append(npcNameEntry).append("=").append(npcDropTuple.getNpcName());

		String itemNameEntry = config.itemNameEntry().strip();
		sb.append("&entry.").append(itemNameEntry).append("=").append(npcDropTuple.getItemName());

		String imageUrlEntry = config.imageEntry();
		if (imageUrlEntry.matches("\\d*"))
		{
			sb.append("&entry.").append(imageUrlEntry).append("=").append(screenshotUrl);
		}

		String soloChambersEntry = config.soloChambersEntry();
		if (!soloChambersEntry.isEmpty() && this.getCoXPartySize() == 1)
		{
			sb.append("&entry.")
			  .append(soloChambersEntry)
			  .append("=")
			  .append("Yes,+I+completed+Nightmare+or+a+raid+all+by+myself+and+received+the+drop+above.");
		}

		return sb.toString().replaceAll("\\s", "%20");
	}

	private void submitScreenshot(String googleFormUrl, String itemName)
	{
		submitScreenshot(googleFormUrl, itemName, true);
	}

	private void submitScreenshot(String googleFormUrl, String itemName, boolean displayInChat)
	{
		var messageBuilder = new ChatMessageBuilder();
		try
		{
			var url = new URL(googleFormUrl);
			var connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			connection.setInstanceFollowRedirects(false);
			var responseCode = connection.getResponseCode();
			if (responseCode == 200)
			{
				messageBuilder.append(String.format("Submission of %s successful.", itemName));
			}
			else
			{
				switch (responseCode)
				{
					case 302:
						messageBuilder.append("Google Form has closed. Please update the form ID.");
						break;
					case 400:
						messageBuilder.append("Google Form was filled in improperly.");
						break;
					default:
						messageBuilder.append("Google Form has been submitted unsuccessfully.");
						break;
				}
				log.info(String.format("[%d] - %s", responseCode, googleFormUrl));
			}
		}
		catch (MalformedURLException e)
		{
			messageBuilder.append("The URL constructed was invalid.");
			log.info(googleFormUrl);
			log.info(e.toString());
		}
		catch (IOException e)
		{
			messageBuilder.append("There was an issue with the connection to the Google Form.");
			log.info(googleFormUrl);
			log.info(e.toString());
		}
		if (displayInChat)
		{
			chatMessageManager.queue(QueuedMessage.builder()
												  .type(ChatMessageType.ITEM_EXAMINE)
												  .runeLiteFormattedMessage(messageBuilder.build())
												  .build());
		}
	}

	private String getMappingResource(String mappingUrl)
	{
		if (mappingUrl.isEmpty())
		{
			return null;
		}
		try
		{
			var url = new URL(mappingUrl);
			var connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			if (connection.getResponseCode() != 200)
			{
				var message = new ChatMessageBuilder().append("Mapping retrieval unsuccessful.");
				chatMessageManager.queue(QueuedMessage.builder()
													  .type(ChatMessageType.ITEM_EXAMINE)
													  .runeLiteFormattedMessage(message.build())
													  .build());
				log.info(connection.getResponseMessage());
				log.info(mappingUrl);
				return null;
			}
			return new BufferedReader(new InputStreamReader(connection.getInputStream())).lines()
																						 .collect(
																							 Collectors.joining("\n"));
		}
		catch (Exception e)
		{
			log.info(String.valueOf(e));
			return null;
		}
	}

	private int getCoXPartySize()
	{
		CompletableFuture<Integer> raidPartySize = new CompletableFuture<>();
		clientThread.invoke(() -> raidPartySize.complete(client.getVarbitValue(9540)));
		try
		{
			return Math.max(0, raidPartySize.get(1, TimeUnit.SECONDS));
		}
		catch (Exception e)
		{
			return 0;
		}

	}

	private int getChatboxId()
	{
		return client.getVarcIntValue(41);
	}

	private boolean isWhitelistedCharacter()
	{
		if (client.getLocalPlayer().getName() == null)
		{
			return false;
		}
		if (config.accountName() == null)
		{
			return false;
		}
		return client.getLocalPlayer().getName().equalsIgnoreCase(config.accountName());
	}

	private boolean isUnsuitableWorld()
	{
		return !Collections.disjoint(client.getWorldType(), unsuitableWorldTypes);
	}

	private void resetDelayedLoot()
	{
		this.delayedMagicBoolean = false;
		this.delayedNpcName = null;
		this.delayedDropsToSubmit = null;
	}
}

package com.example;

import com.google.gson.Gson;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.inject.Inject;

import com.google.gson.JsonIOException;
import com.google.gson.JsonSyntaxException;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import static net.runelite.client.RuneLite.SCREENSHOT_DIR;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.util.ImageUtil;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

@Slf4j
public class ImageCapture
{
	private static final DateFormat TIME_FORMAT = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
	private static final String IBB_IMAGE_UPLOAD_URL = "https://api.imgbb.com/1/upload?key=";

	@Inject
	private OkHttpClient okHttpClient;
	@Inject
	private Gson gson;
	@Inject
	private ChatMessageManager chatMessageManager;
	private HttpUrl ibbImageUploadUrl;

	@Inject
	ImageCapture(final String ibbApiKey)
	{
		this.ibbImageUploadUrl = HttpUrl.get(IBB_IMAGE_UPLOAD_URL + ibbApiKey);

	}

	String processScreenshot(Image img, String playerName, String suffix)
	{
		BufferedImage screenshot = ImageUtil.bufferedImageFromImage(img);
		File playerFolder = new File(SCREENSHOT_DIR, playerName + File.separator + "Google Form Submitter");
		File screenshotFile = new File(playerFolder, String.format("%s-%s.png", format(new Date()), suffix));
		playerFolder.mkdirs();
		try
		{
			ImageIO.write(screenshot, "png", screenshotFile);
			return this.uploadScreenshot(screenshotFile);
		}
		catch (IOException ex)
		{
			var message = new ChatMessageBuilder().append("Screenshot uploading failed.");
			chatMessageManager.queue(QueuedMessage.builder()
												  .type(ChatMessageType.ITEM_EXAMINE)
												  .runeLiteFormattedMessage(message.build())
												  .build());
			log.info(ex.toString());
			return "";
		}
	}

	private String uploadScreenshot(File screenshotFile) throws IOException, NullPointerException
	{
		RequestBody imageRequestBody = RequestBody.create(MediaType.parse("image/*"), screenshotFile);
		RequestBody requestBody = new MultipartBody.Builder().setType(MultipartBody.FORM)
															 .addFormDataPart("image", screenshotFile.getName(),
																			  imageRequestBody)
															 .build();
		Request request = new Request.Builder().url(this.ibbImageUploadUrl).post(requestBody).build();

		try (Response response = okHttpClient.newCall(request).execute())
		{
			if (response.body() == null)
			{
				return "";
			}
			String responseBody = response.body().string();
			try
			{
				var imageUploadResponse = gson.fromJson(responseBody, ImageUploadResponse.class);
				if (imageUploadResponse.isSuccess())
				{
					return imageUploadResponse.getData().getUrl();
				}
				else {
					log.error(imageUploadResponse.toString());
					log.error(responseBody);
				}
			}
			catch (JsonSyntaxException | JsonIOException e)
			{
				log.error(responseBody);
				log.error(String.valueOf(response.code()));
				var message = new ChatMessageBuilder().append("Error with image hosting response.");
				chatMessageManager.queue(QueuedMessage.builder()
													  .type(ChatMessageType.ITEM_EXAMINE)
													  .runeLiteFormattedMessage(message.build())
													  .build());
			}
		}
		return "";
	}

	void updateApiKey(String ibbApiKey)
	{
		this.ibbImageUploadUrl = HttpUrl.get(IBB_IMAGE_UPLOAD_URL + ibbApiKey);
	}

	private String format(Date date)
	{
		synchronized (TIME_FORMAT)
		{
			return TIME_FORMAT.format(date);
		}
	}

	@Data
	private static class ImageUploadResponse
	{
		private Data data;
		private boolean success;

		@lombok.Data
		private static class Data
		{
			private String url;
		}
	}
}

package com.example;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("googleformsubmitter")
public interface GoogleFormSubmitterConfig extends Config
{
	@ConfigItem(position = 0, keyName = "accountName", name = "Whitelisted RSN",
		description = "The account to submit drops from. This is not used for the actual submission.")
	default String accountName()
	{
		return "";
	}

	@ConfigItem(position = 1, keyName = "formId", name = "Google Form ID",
		description = "Google Form ID")
	default String formId()
	{
		return "";
	}

	@ConfigItem(position = 2, keyName = "ibbApiKey", name = "IBB Api Key",
		description = "Obtain one at api.imgbb.com. Plugin will not function without this field filled in.")
	default String ibbApiKey()
	{
		return "";
	}

	@ConfigItem(position = 3, keyName = "entrySettings", name = "Misc Key/Value Pairs",
		description = "Miscellaneous Entry Key/Value Pairs")
	default String entrySettings()
	{
		return "";
	}

	@ConfigItem(position = 4, keyName = "npcNameEntry", name = "NPC Name Entry Key",
		description = "NPC Entry Key")
	default String npcNameEntry()
	{
		return "";
	}

	@ConfigItem(position = 5, keyName = "itemNameEntry", name = "Item Name Entry Key",
		description = "Item Entry Key")
	default String itemNameEntry()
	{
		return "";
	}

	@ConfigItem(position = 6, keyName = "imageEntry", name = "Image Entry Key",
		description = "Entry to use for drop image")
	default String imageEntry()
	{
		return "";
	}

	@ConfigItem(position = 7, keyName = "soloChambersEntry", name = "Solo Raids Entry Key",
		description = "Entry to use for Solo Raids")
	default String soloChambersEntry()
	{
		return "";
	}

	@ConfigItem(position = 8, keyName = "dropMappingUrl", name = "Drop Mapping URL",
		description = "URL of a drop mapping")
	default String dropMappingUrl()
	{
		return "";
	}

	@ConfigItem(position = 9, keyName = "itemDropMapping", name = "Drop Mapping",
		description = "NPC Name,Item ID,Submission NPC Name,Submission Item Name")
	default String itemDropMapping()
	{
		return "";
	}
}

package com.example;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class GoogleFormSubmitterTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(GoogleFormSubmitterPlugin.class);
		RuneLite.main(args);
	}
}
