package eu.cursedmika;

import eu.cursedmika.ui.ScaleUpPanel;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ItemContainer;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import javax.swing.*;
import java.awt.image.BufferedImage;

import static net.runelite.api.gameval.InventoryID.BANK;

@Slf4j
@PluginDescriptor(
	name = "ScaleUp", description = "ScaleUp any activity",
	tags = {"panel", "skilling"}
)
public class ScaleUpPlugin extends Plugin
{
	@Inject
	private ClientToolbar clientToolbar;
	@Inject
	private TrackingService trackingService;
	@Inject
	private ClientThread clientThread;
	@Inject
	private ItemCollector itemCollector;

    private NavigationButton navButton;
	private int refreshCounter = 0;
	private ScaleUpPanel scaleUpPanel = null;

	@Override
	protected void shutDown()
	{
		clientToolbar.removeNavigation(navButton);
	}

	@Override
	protected void startUp()
	{
		scaleUpPanel = new ScaleUpPanel(trackingService, clientThread);
		BufferedImage icon = ImageUtil.loadImageResource(getClass(), "/scaleup.png");
		this.navButton = NavigationButton.builder()
				.tooltip("ScaleUp")
				.icon(icon)
				.priority(36)
				.panel(scaleUpPanel)
				.build();

		clientToolbar.addNavigation(navButton);
	}

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event) {
		if (event.getContainerId() == BANK)
		{
			ItemContainer bankContainer = event.getItemContainer();
			if (bankContainer != null)
			{
				itemCollector.snapshotBankItems(bankContainer);
				trackingService.handleBankData();
			}
		}
	}

	@Subscribe
	public void onGameTick(GameTick gameTick) {
		if(!trackingService.isTracking())
		{
			return;
		}

		incrementRefresh();

		if(shouldRefresh())
		{
			trackingService.snapshot();
			SwingUtilities.invokeLater(() -> scaleUpPanel.updateUI(trackingService.getComputedSnapshot()));
		}
	}

	private boolean shouldRefresh()
	{
		return refreshCounter == 5;
	}

	private void incrementRefresh()
	{
		if(refreshCounter >= 5)
		{
			refreshCounter = 0;
			return;
		}
		refreshCounter++;
	}
}

package eu.cursedmika;

import net.runelite.api.*;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.util.*;

@Singleton
public class ItemCollector
{
    private final Client client;
    private HashMap<Integer, Integer> bankItems = null;

    public void snapshotBankItems(ItemContainer itemContainer)
    {
        if(bankItems == null)
        {
            bankItems = new HashMap<>();
        }
        bankItems.clear();

        Item[] items = itemContainer.getItems();

        for (Item item : items)
        {
            if (item == null || item.getId() == -1)
            {
                continue;
            }

            int itemID = item.getId();
            ItemComposition itemComposition = client.getItemDefinition(itemID);
            boolean isPlaceholder = itemComposition.getPlaceholderTemplateId() != -1;
            if(isPlaceholder)
            {
                continue;
            }
            bankItems.put(itemID, item.getQuantity());
        }
    }

    public HashMap<Integer, Integer> getBankItems()
    {
        return bankItems;
    }

    @Inject
    public ItemCollector(Client client)
    {
        this.client = client;
    }

    public HashMap<Integer, Integer> snapshot()
    {
        HashMap<Integer, Integer> currentInventory = new HashMap<>();

        var containers = List.of(InventoryID.INVENTORY, InventoryID.EQUIPMENT);
        for(var container : containers)
        {
            var itemContainer = client.getItemContainer(container);

            if (itemContainer == null) {
                continue;
            }

            Item[] items = itemContainer.getItems();

            for (Item item : items)
            {
                if (item == null || item.getId() == -1)
                {
                    continue;
                }

                int itemID = item.getId();
                createOrAdd(currentInventory, itemID, item.getQuantity());
            }
        }


        return currentInventory;
    }

    private void createOrAdd(HashMap<Integer, Integer> map, int id, int quantity)
    {
        map.put(id, map.getOrDefault(id, 0) + quantity);
    }
}

package eu.cursedmika;

import net.runelite.api.Client;
import net.runelite.api.Skill;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.util.HashMap;

@Singleton
public class SkillCollector
{
    private final Client client;

    @Inject
    public SkillCollector(Client client)
    {
        this.client = client;
    }

    public HashMap<Skill, Integer> snapshot()
    {
        HashMap<Skill, Integer> currentXP = new HashMap<>();
        for(Skill skill : Skill.values())
        {
            currentXP.put(skill, client.getSkillExperience(skill));
        }

        return currentXP;
    }
}

package eu.cursedmika.ui;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ChangeListener;
import java.awt.*;

public class SliderPanel extends JPanel
{
    private final JSpinner spinner;
    private final SpinnerNumberModel model;

    public SliderPanel()
    {
        setLayout(new FlowLayout(FlowLayout.LEFT));
        setBorder(new EmptyBorder(10, 10, 10, 10));

        model = new SpinnerNumberModel(1d, 0.1d, null, 0.1d);
        spinner = new JSpinner(model);
        JSpinner.NumberEditor editor = new JSpinner.NumberEditor(spinner, "#,##0.0");
        JFormattedTextField textField = editor.getTextField();
        textField.setColumns(12);
        spinner.setEditor(editor);

        add(new JLabel("Scale: "));
        add(spinner);

    }

    public void addChangeListener(ChangeListener listener)
    {
        spinner.addChangeListener(listener);
    }

    public double getSliderValue()
    {
        return model.getNumber().doubleValue();
    }

    public void setSliderValue(double value)
    {
        model.setValue(value);
    }
}
package eu.cursedmika.ui;

import javax.swing.*;
import javax.swing.border.EmptyBorder;

import eu.cursedmika.TrackingService;

import java.awt.*;

public class SkillPanel extends JPanel
{
    private final Font xpFont = new Font(Font.SANS_SERIF, Font.BOLD, 16);

    public SkillPanel()
    {
        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
        setBorder(new EmptyBorder(5, 5, 5, 5));
    }

    public void updateSkills(java.util.List<TrackingService.ComputedSnapshot.ComputedSkill> computedSkills)
    {
        removeAll();

        for (var skill : computedSkills)
        {
            JPanel skillRow = new JPanel(new FlowLayout(FlowLayout.LEFT, 5, 0));
            skillRow.setAlignmentX(Component.LEFT_ALIGNMENT);

            JLabel imageLabel = new JLabel(new ImageIcon(skill.getImage()));

            JLabel nameLabel = new JLabel(skill.getName());

            JLabel xpLabel = new JLabel(String.format("%,d XP", skill.getDiff()));
            xpLabel.setFont(xpFont);

            skillRow.add(imageLabel);
            skillRow.add(Box.createHorizontalStrut(5));
            skillRow.add(nameLabel);
            skillRow.add(Box.createHorizontalGlue());
            skillRow.add(xpLabel);

            add(skillRow);
        }

        revalidate();
        repaint();
    }
}
package eu.cursedmika.ui;

import eu.cursedmika.TrackingService;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.ui.PluginPanel;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionListener;
import java.util.Arrays;

public class ScaleUpPanel extends PluginPanel
{
    private final TrackingService trackingService;

    private final JPanel computedPanel = new JPanel();
    private final JButton snapshotButton = new JButton("SNAPSHOT");
    private final ClientThread clientThread;

    public ScaleUpPanel(TrackingService trackingService, ClientThread clientThread)
    {
        this.trackingService = trackingService;
        this.clientThread = clientThread;

        setBorder(new EmptyBorder(10, 10, 10, 10));
        setLayout(new GridBagLayout());

        GridBagConstraints c = new GridBagConstraints();
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 1;
        c.gridx = 0;
        c.gridy = 0;
        c.insets = new Insets(0, 0, 5, 0);

        add(setupPanel(), c);

        c.gridy = 1;
        c.fill = GridBagConstraints.BOTH;
        c.weighty = 1;
        c.insets = new Insets(0, 0, 0, 0);
        add(computedPanel, c);
    }

    private ActionListener startSnapshot()
    {
        return (e) -> {
            snapshotButton.setText("STOP");
            Arrays.stream(snapshotButton.getActionListeners()).forEach(snapshotButton::removeActionListener);
            snapshotButton.addActionListener(stopSnapshot());
            clientThread.invokeAtTickEnd(trackingService::startTracking);
        };
    }

    private ActionListener stopSnapshot()
    {
        return (e) -> {
            snapshotButton.setText("SNAPSHOT");
            Arrays.stream(snapshotButton.getActionListeners()).forEach(snapshotButton::removeActionListener);
            snapshotButton.addActionListener(startSnapshot());
            clientThread.invokeAtTickEnd(trackingService::stopTracking);
        };
    }

    private JPanel setupPanel()
    {
        JPanel wrapper = new JPanel();
        wrapper.setLayout(new GridLayout(1, 1, 0, 0));
        computedPanel.setLayout(new BoxLayout(computedPanel, BoxLayout.Y_AXIS));
        snapshotButton.addActionListener(startSnapshot());

        JButton clear = new JButton("CLEAR");
        clear.addActionListener(e ->
        {
            clientThread.invokeAtTickEnd(() ->
            {
                trackingService.stopTracking();
                trackingService.clear();
            });

            stopSnapshot().actionPerformed(null);
            computedPanel.removeAll();
            computedPanel.repaint();
            computedPanel.revalidate();
            computedPanel.getParent().repaint();
        });

        wrapper.add(snapshotButton);
        wrapper.add(clear);

        return wrapper;
    }

    public void updateUI(TrackingService.ComputedSnapshot computedSnapshot)
    {
        if(computedSnapshot == null)
        {
            return;
        }
        computedPanel.removeAll();
        SkillPanel skillPanel = new SkillPanel();
        ItemPanel itemPanel = new ItemPanel();

        JLabel snapshotDuration = new JLabel("DURATION: "+computedSnapshot.getDurationInMinutes()+" minutes");
        SliderPanel sliderPanel = new SliderPanel();
        JButton scale = new JButton("SCALE TO 1 HOUR");

        itemPanel.updateItems(computedSnapshot.getComputedItems());
        skillPanel.updateSkills(computedSnapshot.getComputedSkills());

        sliderPanel.addChangeListener(e ->
        {
            double scaleFactor = sliderPanel.getSliderValue();

            TrackingService.ComputedSnapshot newSnapshot = new TrackingService.ComputedSnapshot((int)(computedSnapshot.getDurationInSeconds() * scaleFactor));
            computedSnapshot.getComputedItems().forEach((v) -> newSnapshot.getComputedItems().add(new TrackingService.ComputedSnapshot.ComputedItem(v, scaleFactor)));
            computedSnapshot.getComputedSkills().forEach((v) -> newSnapshot.getComputedSkills().add(new TrackingService.ComputedSnapshot.ComputedSkill(v, scaleFactor)));
            itemPanel.updateItems(newSnapshot.getComputedItems());
            skillPanel.updateSkills(newSnapshot.getComputedSkills());
            snapshotDuration.setText("DURATION: "+newSnapshot.getDurationInMinutes()+" minutes");
            computedPanel.repaint();
            computedPanel.revalidate();
            computedPanel.getParent().repaint();
        });

        scale.addActionListener(e -> sliderPanel.setSliderValue(3600D/computedSnapshot.getDurationInSeconds()));
        itemPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
        skillPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
        snapshotDuration.setAlignmentX(Component.LEFT_ALIGNMENT);
        sliderPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
        scale.setAlignmentX(Component.LEFT_ALIGNMENT);
        computedPanel.add(Box.createVerticalStrut(5));
        computedPanel.add(itemPanel);
        computedPanel.add(Box.createVerticalStrut(5));
        computedPanel.add(skillPanel);
        computedPanel.add(Box.createVerticalStrut(5));
        computedPanel.add(snapshotDuration);
        computedPanel.add(Box.createVerticalStrut(5));
        computedPanel.add(sliderPanel);
        computedPanel.add(Box.createVerticalStrut(5));
        computedPanel.add(scale);
        computedPanel.repaint();
        computedPanel.revalidate();
        computedPanel.getParent().repaint();

    }
}

package eu.cursedmika.ui;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.image.BufferedImage;

import eu.cursedmika.TrackingService;
import net.runelite.client.util.ImageUtil;

public class ItemPanel extends JPanel
{
        private final Font quantityFont = new Font(Font.SANS_SERIF, Font.BOLD, 16);

        public ItemPanel()
        {
            setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
            setBorder(new EmptyBorder(5, 5, 5, 5));
        }

        public void updateItems(java.util.List<TrackingService.ComputedSnapshot.ComputedItem> itemChanges)
        {
            removeAll();

            for (var item : itemChanges)
            {
                JPanel itemRow = new JPanel(new FlowLayout(FlowLayout.LEFT, 5, 0));
                itemRow.setAlignmentX(Component.LEFT_ALIGNMENT);

                JLabel imageLabel = new JLabel(new ImageIcon(item.getImage()));

                JLabel nameLabel = new JLabel(item.getName());

                JLabel quantityLabel = new JLabel(Integer.toString(Math.abs(item.getDiff())));
                quantityLabel.setFont(quantityFont);

                JLabel arrowLabel = new JLabel();
                BufferedImage arrowIcon;
                if (item.getDiff() > 0)
                {
                    arrowIcon = ImageUtil.loadImageResource(getClass(), "/arrow_up.png");
                    arrowLabel.setForeground(new Color(0, 150, 0));
                }
                else if (item.getDiff() < 0)
                {
                    arrowIcon = ImageUtil.loadImageResource(getClass(), "/arrow_down.png");
                    arrowLabel.setForeground(new Color(150, 0, 0));
                }
                else
                {
                    arrowIcon = null;
                }

                if (arrowIcon != null)
                {
                    arrowLabel.setIcon(new ImageIcon(arrowIcon));
                }

                itemRow.add(imageLabel);
                itemRow.add(Box.createHorizontalStrut(5));
                itemRow.add(nameLabel);
                itemRow.add(Box.createHorizontalGlue());
                itemRow.add(quantityLabel);
                if (arrowIcon != null)
                {
                    itemRow.add(arrowLabel);
                }

                add(itemRow);
            }

            revalidate();
            repaint();
        }
}


package eu.cursedmika;

import net.runelite.api.ItemComposition;
import net.runelite.api.Skill;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.SkillIconManager;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.awt.image.BufferedImage;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.atomic.AtomicBoolean;

@Singleton
public class TrackingService
{
    private final SkillCollector skillCollector;
    private final ItemCollector itemCollector;
    private ComputedSnapshot computedSnapshot = null;
    private final AtomicBoolean isTracking = new AtomicBoolean(false);
    private final SkillIconManager skillIconManager;
    private final ItemManager itemManager;

    @Inject
    public TrackingService(SkillCollector skillCollector, ItemCollector itemCollector, SkillIconManager skillIconManager, ItemManager itemManager)
    {
        this.skillCollector = skillCollector;
        this.itemCollector = itemCollector;
        this.skillIconManager = skillIconManager;
        this.itemManager = itemManager;
    }

    private final List<TrackedSnapshot> trackedSnapshots = new ArrayList<>();

    public boolean isTracking()
    {
        return isTracking.get();
    }

    public void startTracking()
    {
        snapshot();
        isTracking.set(true);
    }

    public void stopTracking()
    {
        snapshot();
        isTracking.set(false);
    }

    public void handleBankData()
    {
        trackedSnapshots.forEach(snapshot -> snapshot.addBankData(itemCollector.getBankItems()));
    }

    public void snapshot()
    {
        if(trackedSnapshots.size() == 2)
        {
            trackedSnapshots.remove(1);
        }

        TrackedSnapshot e = new TrackedSnapshot(skillCollector.snapshot(), itemCollector.snapshot(), LocalDateTime.now());

        if(itemCollector.getBankItems() != null)
        {
            e.addBankData(itemCollector.getBankItems());
        }

        trackedSnapshots.add(e);
        recalculate();
    }

    private void recalculate()
    {
        if(trackedSnapshots.size() != 2)
        {
            return;
        }

        var previous = trackedSnapshots.get(0);
        var next = trackedSnapshots.get(1);

        var duration = Math.abs(Duration.between(previous.time, next.time).toSeconds());

        ComputedSnapshot computedSnapshot = new ComputedSnapshot(duration);

        for(var skill : Skill.values())
        {
            var diff = Math.abs(next.trackedSkills.get(skill) - previous.trackedSkills.get(skill));
            if(diff != 0)
            {
                BufferedImage skillImage = skillIconManager.getSkillImage(skill);
                computedSnapshot.computedSkills.add(new ComputedSnapshot.ComputedSkill(skill, diff, skillImage, skill.getName()));
            }
        }

        var allItems = new HashSet<Integer>();
        allItems.addAll(previous.trackedItems.keySet());
        allItems.addAll(next.trackedItems.keySet());

        for(var item : allItems)
        {
            var diff = (next.trackedItems.get(item) == null ? 0 : next.trackedItems.get(item)) - (previous.trackedItems.get(item) == null ? 0 : previous.trackedItems.get(item));
            if(diff != 0)
            {
                ItemComposition itemComposition = itemManager.getItemComposition(item);
                BufferedImage itemImage = itemManager.getImage(item);

                computedSnapshot.computedItems.add(new ComputedSnapshot.ComputedItem(item, diff, itemImage, itemComposition.getName()));
            }
        }

        this.computedSnapshot = computedSnapshot;
    }

    public void clear()
    {
        trackedSnapshots.clear();
        computedSnapshot = null;
    }

    public ComputedSnapshot getComputedSnapshot()
    {
        return computedSnapshot;
    }

    static class TrackedSnapshot
    {
        private final HashMap<Skill, Integer> trackedSkills;
        private final HashMap<Integer, Integer> trackedItems;
        private boolean requestForBankData = true;
        private final LocalDateTime time;

        TrackedSnapshot(HashMap<Skill, Integer> trackedSkills, HashMap<Integer, Integer> trackedItems, LocalDateTime time) {
            this.trackedSkills = trackedSkills;
            this.trackedItems = trackedItems;
            this.time = time;
        }

        public void addBankData(HashMap<Integer, Integer> bankItems)
        {
            if(!requestForBankData)
            {
                return;
            }

            this.requestForBankData = false;
            bankItems.forEach((k,v) -> createOrAdd(this.trackedItems, k, v));
        }

        private void createOrAdd(HashMap<Integer, Integer> map, int id, int quantity)
        {
            map.put(id, map.getOrDefault(id, 0) + quantity);
        }
    }

    public static class ComputedSnapshot
    {
        private final List<ComputedSkill> computedSkills;
        private final List<ComputedItem> computedItems;
        private final long durationInSeconds;

        public ComputedSnapshot(long durationInSeconds)
        {
            this.durationInSeconds = durationInSeconds;
            this.computedSkills = new ArrayList<>();
            this.computedItems = new ArrayList<>();
        }

        public List<ComputedSkill> getComputedSkills()
        {
            return computedSkills;
        }

        public List<ComputedItem> getComputedItems()
        {
            return computedItems;
        }

        public long getDurationInMinutes()
        {
            return durationInSeconds/60;
        }

        public long getDurationInSeconds()
        {
            return durationInSeconds;
        }

        public static class ComputedSkill
        {
            private final Skill skill;
            private final int diff;
            private final BufferedImage image;
            private final String name;

            public ComputedSkill(Skill skill, int diff, BufferedImage image, String name)
            {
                this.skill = skill;
                this.diff = diff;
                this.image = image;
                this.name = name;
            }

            public ComputedSkill(ComputedSkill computedSkill, double scale)
            {
                this(computedSkill.skill, (int) (computedSkill.diff * scale), computedSkill.image, computedSkill.name);
            }

            public String getName() {
                return name;
            }

            public Skill getSkill() {
                return skill;
            }

            public int getDiff() {
                return diff;
            }

            public BufferedImage getImage() {
                return image;
            }
        }

        public static class ComputedItem
        {
            private final int id;
            private final int diff;
            private final String name;
            private final BufferedImage image;

            public ComputedItem(int id, int diff, BufferedImage image, String name)
            {
                this.id = id;
                this.diff = diff;
                this.image = image;
                this.name = name;
            }

            public ComputedItem(ComputedItem computedItem, double scale)
            {
                this(computedItem.id, (int) (computedItem.diff * scale), computedItem.image, computedItem.name);
            }

            public String getName() {
                return name;
            }

            public int getId() {
                return id;
            }

            public int getDiff() {
                return diff;
            }

            public BufferedImage getImage() {
                return image;
            }
        }
    }
}

package eu.cursedmika;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ScaleUpPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ScaleUpPlugin.class);
		RuneLite.main(args);
	}
}
