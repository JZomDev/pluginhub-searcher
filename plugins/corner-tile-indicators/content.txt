package com.cornertileindicators;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.lang.reflect.Field;
import java.util.Properties;
import net.runelite.client.RuneLite;
import net.runelite.client.RuneLiteProperties;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ExamplePluginTest
{
	public static void main(String[] args) throws Exception
	{
		setWindowTitle("corner-tile-indicators (" + getCurrentGitBranch() + ") RL-" + RuneLiteProperties.getVersion());

//		System.setProperty("runelite.pluginhub.version", "1.8.24.1");
		ExternalPluginManager.loadBuiltin(CornerTileIndicatorsPlugin.class);
		RuneLite.main(args);
	}

	private static void setWindowTitle(String title) throws NoSuchFieldException, IllegalAccessException
	{
		Field propertiesField = RuneLiteProperties.class.getDeclaredField("properties");
		propertiesField.setAccessible(true);
		Properties properties = (Properties) propertiesField.get(null);
		properties.setProperty("runelite.title", title);
	}

	public static String getCurrentGitBranch() {
		try
		{
			Process process = Runtime.getRuntime().exec("git rev-parse --abbrev-ref HEAD");
			process.waitFor();

			BufferedReader reader = new BufferedReader(
				new InputStreamReader(process.getInputStream()));

			return reader.readLine();
		}catch (Exception e) {
			return "threw exception";
		}
	}
}
/*
 * Copyright (c) 2018, Tomas Slusny <slusnucky@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cornertileindicators;

import com.google.inject.Provides;
import javax.inject.Inject;
import javax.swing.SwingUtilities;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.ProfileChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Corner Tile Indicators",
	description = "Tile Indicators Plugin, but only rendering the tile's corners.",
	conflicts = {"Tile Indicators"},
	tags = {"highlight", "overlay"}
)
public class CornerTileIndicatorsPlugin extends Plugin
{
	@Inject private CornerTileIndicatorsConfig config;
	@Inject private OverlayManager overlayManager;
	@Inject private CornerTileIndicatorsOverlay overlay;
	@Inject private ConfigManager configManager;

	@Override
	protected void startUp()
	{
		overlayManager.add(overlay);

		copyBasePluginConfig();
	}

	private void copyBasePluginConfig()
	{
		if (config.mirrorSettings()) {
			for (String key : configManager.getConfigurationKeys("tileindicators."))
			{
				key = key.substring("tileindicators.".length());
				String value = configManager.getConfiguration("tileindicators", key);
//				System.out.println("copying " + key + " " + value);
				if (value != null) configManager.setConfiguration("cornertileindicators", key, value);
			}
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged e) {
		// I don't want this to apply to profile change config changes because the config is in an invalid state
		// during a profile change, so I check the thread since the EDT is where normal config changes happen.
		if (!e.getGroup().equals("cornertileindicators") || !SwingUtilities.isEventDispatchThread()) return;
		if (e.getKey().equals("mirrorSettings") || e.getKey().contains("TileCornersOnly")) return;

//		System.out.println("changing " + e.getKey() + " to " + e.getNewValue());
		configManager.setConfiguration("tileindicators", e.getKey(), e.getNewValue());
	}

	@Subscribe
	public void onProfileChanged(ProfileChanged e) {
		copyBasePluginConfig();
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
	}

	@Provides
	CornerTileIndicatorsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(CornerTileIndicatorsConfig.class);
	}
}

/*
 * Copyright (c) 2018, Tomas Slusny <slusnucky@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cornertileindicators;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Stroke;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.Constants;
import net.runelite.api.Perspective;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.util.ColorUtil;

public class CornerTileIndicatorsOverlay extends Overlay
{
	private final Client client;
	private final CornerTileIndicatorsConfig config;

	private WorldPoint lastPlayerPosition = new WorldPoint(0, 0, 0);
	private int lastTickPlayerMoved = 0;
	private long lastTimePlayerStoppedMoving = 0;

	@Inject
	private CornerTileIndicatorsOverlay(Client client, CornerTileIndicatorsConfig config)
	{
		this.client = client;
		this.config = config;
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_SCENE);
		setPriority(OverlayPriority.MED);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (config.highlightHoveredTile())
		{
			// If we have tile "selected" render it
			if (client.getSelectedSceneTile() != null)
			{
				renderTile(graphics, client.getSelectedSceneTile().getLocalLocation(), config.highlightHoveredColor(), config.hoveredTileBorderWidth(), config.hoveredTileFillColor(), config.hoveredTileCornersOnly(), config.hoveredTileCornerSize());
			}
		}

		if (config.highlightDestinationTile())
		{
			renderTile(graphics, client.getLocalDestinationLocation(), config.highlightDestinationColor(), config.destinationTileBorderWidth(), config.destinationTileFillColor(), config.destinationTileCornersOnly(), config.destinationTileCornerSize());
		}

		if (config.highlightCurrentTile())
		{
			WorldPoint playerPos = client.getLocalPlayer().getWorldLocation();

			if (!playerPos.equals(lastPlayerPosition))
			{
				lastTickPlayerMoved = client.getTickCount();
			}
			else if (lastTickPlayerMoved + 1 == client.getTickCount())
			{
				lastTimePlayerStoppedMoving = System.currentTimeMillis();
			}

			lastPlayerPosition = playerPos;

			final LocalPoint playerPosLocal = LocalPoint.fromWorld(client, lastPlayerPosition);
			if (playerPosLocal != null)
			{
				Color color = config.highlightCurrentColor();
				Color fillColor = config.currentTileFillColor();
				// When not fading out the current tile, or when it has been 1 game tick or less since the player last
				// moved, draw the tile at full opacity. When using fadeout, drawing the indicator at full opacity for 1
				// game tick prevents it from fading out when moving on consecutive ticks.
				if (!config.trueTileFadeout() || client.getTickCount() - lastTickPlayerMoved <= 1)
				{
					renderTile(graphics, playerPosLocal, color, config.currentTileBorderWidth(), fillColor, config.currentTileCornersOnly(), config.currentTileCornerSize());
				}
				else
				{
					// It is 1 game tick after the player has stopped moving, so fade out the tile.
					long timeSinceLastMove = System.currentTimeMillis() - lastTimePlayerStoppedMoving;
					// The fadeout does not begin for 1 game tick, so subtract that.
					int fadeoutTime = config.trueTileFadeoutTime() - Constants.GAME_TICK_LENGTH;
					if (fadeoutTime != 0 && timeSinceLastMove < fadeoutTime)
					{
						double opacity = 1.0d - Math.pow(timeSinceLastMove / (double) fadeoutTime, 2);
						renderTile(graphics, playerPosLocal, ColorUtil.colorWithAlpha(color, (int) (opacity * color.getAlpha())), config.currentTileBorderWidth(), ColorUtil.colorWithAlpha(fillColor, (int) (opacity * fillColor.getAlpha())), config.currentTileCornersOnly(), config.currentTileCornerSize());
					}
				}
			}
		}

		return null;
	}

	private void renderTile(final Graphics2D graphics, final LocalPoint dest, final Color color, final double borderWidth, final Color fillColor, boolean cornersOnly, int divisor)
	{
		if (dest == null)
		{
			return;
		}

		final Polygon poly = Perspective.getCanvasTilePoly(client, dest);

		if (poly == null)
		{
			return;
		}

		if (cornersOnly)
		{
			renderPolygonCorners(graphics, poly, color, fillColor, new BasicStroke((float) borderWidth), divisor);
		}
		else
		{
			OverlayUtil.renderPolygon(graphics, poly, color, fillColor, new BasicStroke((float) borderWidth));
		}
	}

	public static void renderPolygonCorners(Graphics2D graphics, Polygon poly, Color color, Color fillColor, Stroke borderStroke, int divisor)
	{
		graphics.setColor(color);
		final Stroke originalStroke = graphics.getStroke();
		graphics.setStroke(borderStroke);

		for (int i = 0; i < poly.npoints; i++)
		{
			int ptx = poly.xpoints[i];
			int pty = poly.ypoints[i];
			int prev = (i - 1) < 0 ? (poly.npoints - 1) : (i - 1);
			int next = (i + 1) > (poly.npoints - 1) ? 0 : (i + 1);
			int ptxN = ((poly.xpoints[next]) - ptx) / divisor + ptx;
			int ptyN = ((poly.ypoints[next]) - pty) / divisor + pty;
			int ptxP = ((poly.xpoints[prev]) - ptx) / divisor + ptx;
			int ptyP = ((poly.ypoints[prev]) - pty) / divisor + pty;
			graphics.drawLine(ptx, pty, ptxN, ptyN);
			graphics.drawLine(ptx, pty, ptxP, ptyP);
		}

		graphics.setColor(fillColor);
		graphics.fill(poly);

		graphics.setStroke(originalStroke);
	}
}

/*
 * Copyright (c) 2018, Tomas Slusny <slusnucky@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.cornertileindicators;

import java.awt.Color;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;
import net.runelite.client.config.Units;

@ConfigGroup("cornertileindicators")
public interface CornerTileIndicatorsConfig extends Config
{
	@ConfigSection(
		name = "Destination Tile",
		description = "Destination tile configuration",
		position = 0
	)
	String destinationTile = "destinationTile";

	@ConfigSection(
		name = "Hovered Tile",
		description = "Hovered tile configuration",
		position = 1
	)
	String hoveredTile = "hoveredTile";

	@ConfigSection(
		name = "Current Tile",
		description = "Current tile configuration",
		position = 2
	)
	String currentTile = "currentTile";

	@ConfigItem(
		keyName = "highlightDestinationTile",
		name = "Highlight destination tile",
		description = "Highlights tile player is walking to",
		position = 1,
		section = destinationTile
	)
	default boolean highlightDestinationTile()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
		keyName = "highlightDestinationColor",
		name = "Highlight color",
		description = "Configures the highlight color of current destination",
		position = 2,
		section = destinationTile
	)
	default Color highlightDestinationColor()
	{
		return Color.GRAY;
	}

	@Alpha
	@ConfigItem(
		keyName = "destinationTileFillColor",
		name = "Fill color",
		description = "Configures the fill color of destination tile",
		position = 3,
		section = destinationTile
	)
	default Color destinationTileFillColor()
	{
		return new Color(0, 0, 0, 50);
	}

	@ConfigItem(
		keyName = "destinationTileBorderWidth",
		name = "Border width",
		description = "Width of the destination tile marker border",
		position = 4,
		section = destinationTile
	)
	default double destinationTileBorderWidth()
	{
		return 2;
	}

	@ConfigItem(
		keyName = "destinationTileCornersOnly",
		name = "Corners only",
		description = "Draw only the corners of the destination tile.",
		position = 5,
		section = destinationTile
	)
	default boolean destinationTileCornersOnly()
	{
		return false;
	}

	@ConfigItem(
		keyName = "highlightHoveredTile",
		name = "Highlight hovered tile",
		description = "Highlights tile player is hovering with mouse",
		position = 1,
		section = hoveredTile
	)
	default boolean highlightHoveredTile()
	{
		return false;
	}

	@Alpha
	@ConfigItem(
		keyName = "highlightHoveredColor",
		name = "Highlight color",
		description = "Configures the highlight color of hovered tile",
		position = 2,
		section = hoveredTile
	)
	default Color highlightHoveredColor()
	{
		return new Color(0, 0, 0, 0);
	}

	@Alpha
	@ConfigItem(
		keyName = "hoveredTileFillColor",
		name = "Fill color",
		description = "Configures the fill color of hovered tile",
		position = 3,
		section = hoveredTile
	)
	default Color hoveredTileFillColor()
	{
		return new Color(0, 0, 0, 50);
	}

	@ConfigItem(
		keyName = "hoveredTileBorderWidth",
		name = "Border width",
		description = "Width of the hovered tile marker border",
		position = 4,
		section = hoveredTile
	)
	default double hoveredTileBorderWidth()
	{
		return 2;
	}

	@ConfigItem(
		keyName = "hoveredTileCornersOnly",
		name = "Corners only",
		description = "Draw only the corners of the hovered tile.",
		position = 5,
		section = hoveredTile
	)
	default boolean hoveredTileCornersOnly()
	{
		return false;
	}

	@ConfigItem(
		keyName = "highlightCurrentTile",
		name = "Highlight true tile",
		description = "Highlights true tile player is on as seen by server",
		position = 1,
		section = currentTile
	)
	default boolean highlightCurrentTile()
	{
		return false;
	}

	@Alpha
	@ConfigItem(
		keyName = "highlightCurrentColor",
		name = "Highlight color",
		description = "Configures the highlight color of current true tile",
		position = 2,
		section = currentTile
	)
	default Color highlightCurrentColor()
	{
		return Color.CYAN;
	}

	@Alpha
	@ConfigItem(
		keyName = "currentTileFillColor",
		name = "Fill color",
		description = "Configures the fill color of current true tile",
		position = 3,
		section = currentTile
	)
	default Color currentTileFillColor()
	{
		return new Color(0, 0, 0, 50);
	}

	@ConfigItem(
		keyName = "currentTileBorderWidth",
		name = "Border width",
		description = "Width of the true tile marker border",
		position = 4,
		section = currentTile
	)
	default double currentTileBorderWidth()
	{
		return 2;
	}

	@ConfigItem(
		keyName = "currentTileCornersOnly",
		name = "Corners only",
		description = "Draw only the corners of the current tile.",
		position = 5,
		section = currentTile
	)
	default boolean currentTileCornersOnly()
	{
		return false;
	}
	@ConfigItem(
		keyName = "trueTileFadeout",
		name = "Fadeout",
		description = "Fade out the true tile once the player stops moving.",
		position = 5,
		section = currentTile
	)
	default boolean trueTileFadeout()
	{
		return false;
	}

	@ConfigItem(
		keyName = "trueTileFadeoutTime",
		name = "Fadeout time",
		description = "Milliseconds that the true tile is drawn for after moving. Minimum is 600 (1 game tick).",
		position = 6,
		section = currentTile
	)
	@Range(min = 600)
	@Units(Units.MILLISECONDS)
	default int trueTileFadeoutTime()
	{
		return 800;
	}

	@ConfigItem(
		keyName = "mirrorSettings",
		name = "Mirror settings",
		description = "Copy settings between this plugin and the normal Tile Indicators plugin.",
		position = 100
	)
	default boolean mirrorSettings() {return true;}

	@ConfigSection(
		name = "Extra configuration",
		description = "",
		closedByDefault = true,
		position = 10
	)
	String extra = "extra";

	@ConfigItem(
		keyName = "hoveredTileCornerSize",
		name = "Hovered Corner Size",
		description = "Larger values make it smaller.",
		section = extra,
		position = 10
	)
	default int hoveredTileCornerSize() {return 5;}

	@ConfigItem(
		keyName = "destinationTileCornerSize",
		name = "Destination Corner Size",
		description = "Larger values make it smaller.",
		section = extra,
		position = 10
	)
	default int destinationTileCornerSize() {return 5;}

	@ConfigItem(
		keyName = "currentTileCornerSize",
		name = "Current Corner Size",
		description = "Larger values make it smaller.",
		section = extra,
		position = 10
	)
	default int currentTileCornerSize() {return 5;}

}

