package com.brastasauce.purchaseprogress;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PurchaseProgressTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PurchaseProgressPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2022, BrastaSauce
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.purchaseprogress.data;

import com.brastasauce.purchaseprogress.PurchaseProgressPlugin;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.ItemManager;
import net.runelite.client.util.AsyncBufferedImage;

import javax.inject.Inject;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;

import static com.brastasauce.purchaseprogress.PurchaseProgressPlugin.CONFIG_GROUP;

@Slf4j
public class PurchaseProgressDataManager
{
    private static final String CONFIG_KEY_VALUE = "value";
    private static final String CONFIG_KEY_ITEMIDS = "itemIds";
    private static final String CONFIG_KEY_GROUPS = "groups";

    private final PurchaseProgressPlugin plugin;
    private final Client client;
    private final ConfigManager configManager;
    private final ItemManager itemManager;
    private final Gson gson;

    private List<Integer> itemIds = new ArrayList<>();
    private final Type itemsType = new TypeToken<ArrayList<Integer>>(){}.getType();

    private List<PurchaseProgressGroupData> groups = new ArrayList<>();
    private final Type groupsType = new TypeToken<ArrayList<PurchaseProgressGroupData>>(){}.getType();

    @Inject
    public PurchaseProgressDataManager(PurchaseProgressPlugin plugin, Client client, ConfigManager configManager, ItemManager itemManager, Gson gson)
    {
        this.plugin = plugin;
        this.client = client;
        this.configManager = configManager;
        this.itemManager = itemManager;
        this.gson = gson;
    }

    public boolean loadData()
    {
        // Load later if not at login screen to prevent data loss
        if (client.getGameState().getState() < GameState.LOGIN_SCREEN.getState())
        {
            return false;
        }

        // Value
        String value = configManager.getConfiguration(CONFIG_GROUP, CONFIG_KEY_VALUE);
        plugin.setValue(Long.parseLong(value));

        // Individual Items
        itemIds.clear();

        String itemsJson = configManager.getConfiguration(CONFIG_GROUP, CONFIG_KEY_ITEMIDS);
        if (itemsJson == null || itemsJson.equals("[]"))
        {
            plugin.setItems(new ArrayList<>());
        }
        else
        {
            try
            {
                itemIds = gson.fromJson(itemsJson, itemsType);
                convertItems();
            }
            catch (Exception e)
            {
                log.error("Exception occurred while loading purchase progress items", e);
                plugin.setItems(new ArrayList<>());
            }
        }

        // Groups and their items
        groups.clear();

        String groupsJson = configManager.getConfiguration(CONFIG_GROUP, CONFIG_KEY_GROUPS);
        if (groupsJson == null || groupsJson.equals("[]"))
        {
            plugin.setGroups(new ArrayList<>());
        }
        else
        {
            try
            {
                groups = gson.fromJson(groupsJson, groupsType);
                convertGroups();
            }
            catch (Exception e)
            {
                log.error("Exception occurred while loading purchase progress groups", e);
                plugin.setGroups(new ArrayList<>());
            }
        }

        plugin.updateItemPrices();
        return true;
    }

    public void saveData()
    {
        // Value
        configManager.setConfiguration(CONFIG_GROUP, CONFIG_KEY_VALUE, String.valueOf(plugin.getValue()));

        // Individual Items
        itemIds.clear();

        for (PurchaseProgressItem item : plugin.getItems())
        {
            itemIds.add(item.getItemId());
        }

        final String itemsJson = gson.toJson(itemIds);
        configManager.setConfiguration(CONFIG_GROUP, CONFIG_KEY_ITEMIDS, itemsJson);

        // Groups and their items
        groups.clear();

        for (PurchaseProgressGroup group : plugin.getGroups())
        {
            List<Integer> groupItems = new ArrayList<>();
            for (PurchaseProgressItem item : group.getItems())
            {
                groupItems.add(item.getItemId());
            }

            groups.add(new PurchaseProgressGroupData(group.getName(), group.isCollapsed(), groupItems));
        }

        final String groupsJson = gson.toJson(groups);
        configManager.setConfiguration(CONFIG_GROUP, CONFIG_KEY_GROUPS, groupsJson);
    }

    private void convertItems()
    {
        List<PurchaseProgressItem> progressItems = new ArrayList<>();

        for (Integer itemId : itemIds)
        {
            progressItems.add(convertIdToItem(itemId));
        }

        plugin.setItems(progressItems);
    }

    private void convertGroups()
    {
        List<PurchaseProgressGroup> progressGroups = new ArrayList<>();

        for (PurchaseProgressGroupData group : groups)
        {
            List<PurchaseProgressItem> groupItems = new ArrayList<>();
            for (Integer itemId : group.getItems())
            {
                groupItems.add(convertIdToItem(itemId));
            }

            progressGroups.add(new PurchaseProgressGroup(group.getName(), group.isCollapsed(), groupItems));
        }

        plugin.setGroups(progressGroups);
    }

    private PurchaseProgressItem convertIdToItem(int itemId)
    {
        AsyncBufferedImage itemImage = itemManager.getImage(itemId);
        String itemName = itemManager.getItemComposition(itemId).getName();
        return new PurchaseProgressItem(itemImage, itemName, itemId, 0); // Item prices updated after load
    }
}

/*
 * Copyright (c) 2022, BrastaSauce
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.purchaseprogress.data;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;
import net.runelite.client.util.AsyncBufferedImage;

@AllArgsConstructor
public class PurchaseProgressItem implements Comparable<PurchaseProgressItem>
{
    @Getter
    private AsyncBufferedImage image;

    @Getter
    private String name;

    @Getter
    private int itemId;

    @Getter
    @Setter
    private int gePrice;

    @Override
    public boolean equals(Object obj)
    {
        if (!(obj instanceof PurchaseProgressItem))
        {
            return false;
        }

        final PurchaseProgressItem item = (PurchaseProgressItem) obj;
        return item.getItemId() == this.itemId;
    }

    @Override
    public int compareTo(PurchaseProgressItem other)
    {
        return Integer.compare(gePrice, other.getGePrice());
    }
}

package com.brastasauce.purchaseprogress.data;

import lombok.AllArgsConstructor;
import lombok.Getter;

import java.util.List;

@AllArgsConstructor
@Getter
public class PurchaseProgressGroupData
{
    private String name;
    private boolean collapsed;
    private List<Integer> items;
}

/*
 * Copyright (c) 2022, BrastaSauce
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.purchaseprogress.data;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

import java.util.List;

@AllArgsConstructor
public class PurchaseProgressGroup {
    @Getter
    @Setter
    private String name;

    @Getter
    @Setter
    private boolean collapsed;

    @Getter
    private final List<PurchaseProgressItem> items;

    public PurchaseProgressGroup(String name, List<PurchaseProgressItem> items)
    {
        this.name = name;
        collapsed = false;
        this.items = items;
    }

    @Override
    public boolean equals(Object obj)
    {
        if (!(obj instanceof PurchaseProgressGroup))
        {
            return false;
        }

        final PurchaseProgressGroup group = (PurchaseProgressGroup) obj;
        return group.getName().equals(this.name);
    }
}

/*
 * Copyright (c) 2022, BrastaSauce
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.purchaseprogress;

import com.brastasauce.purchaseprogress.data.PurchaseProgressDataManager;
import com.brastasauce.purchaseprogress.data.PurchaseProgressGroup;
import com.brastasauce.purchaseprogress.data.PurchaseProgressItem;
import com.brastasauce.purchaseprogress.ui.PurchaseProgressPluginPanel;
import com.google.gson.Gson;
import com.google.inject.Provides;

import javax.inject.Inject;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ScriptID;
import net.runelite.api.events.ScriptPostFired;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.config.RuneLiteConfig;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.task.Schedule;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

import java.awt.image.BufferedImage;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

@Slf4j
@PluginDescriptor(
	name = "Purchase Progress"
)
public class PurchaseProgressPlugin extends Plugin
{
	public static final String CONFIG_GROUP = "purchaseprogress";
	private static final String PLUGIN_NAME = "Purchase Progress";
	private static final String ICON_IMAGE = "/panel_icon.png";
	private static final int MAX_GROUP_NAME_LENGTH = 50;

	@Getter
	@Setter
	private List<PurchaseProgressItem> items = new ArrayList<>();

	@Getter
	@Setter
	private List<PurchaseProgressGroup> groups = new ArrayList<>();

	@Getter
	@Setter
	private long value = 0;

	@Inject
	private ClientThread clientThread;

	@Inject
	private ItemManager itemManager;

	@Inject
	private ConfigManager configManager;

	@Inject
	private BankCalculation bankCalculation;

	@Inject
	private Gson gson;

	@Inject
	private PurchaseProgressDataManager dataManager;

	@Inject
	private RuneLiteConfig runeLiteConfig;

	@Inject
	private Client client;

	@Inject
	private PurchaseProgressConfig config;

	@Inject
	private ClientToolbar clientToolbar;

	private PurchaseProgressPluginPanel panel;
	private NavigationButton navButton;

	public void addItem(PurchaseProgressItem item)
	{
		clientThread.invokeLater(() ->
		{
			if (!containsItem(item))
			{
				items.add(item);
				dataManager.saveData();
				SwingUtilities.invokeLater(() ->
				{
					panel.switchToProgress();
					panel.updateProgressPanels();
				});
			}
			else
			{
				SwingUtilities.invokeLater(() -> panel.containsItemWarning());
			}
		});
	}

	public void removeItem(PurchaseProgressItem item)
	{
		clientThread.invokeLater(() -> {
			items.remove(item);
			dataManager.saveData();
			SwingUtilities.invokeLater(() -> panel.updateProgressPanels());
		});
	}

	public void addGroup()
	{
		final String msg = "Enter the name of this group (max " + MAX_GROUP_NAME_LENGTH + " chars).";
		String name = JOptionPane.showInputDialog(panel, msg, "Add New Group", JOptionPane.PLAIN_MESSAGE);

		if (name == null || name.isEmpty())
		{
			return;
		}

		if (name.length() > MAX_GROUP_NAME_LENGTH)
		{
			name = name.substring(0, MAX_GROUP_NAME_LENGTH);
		}

		String groupName = name;
		clientThread.invokeLater(() -> {
			PurchaseProgressGroup group = new PurchaseProgressGroup(groupName, new ArrayList<>());

			if (!groups.contains(group))
			{
				groups.add(group);
				dataManager.saveData();
				SwingUtilities.invokeLater(() -> panel.updateProgressPanels());
			}
		});
	}

	public void editGroup(PurchaseProgressGroup group)
	{
		final String msg = "Enter the name of this group (max " + MAX_GROUP_NAME_LENGTH + " chars).";
		String name = JOptionPane.showInputDialog(panel, msg, "Edit Group", JOptionPane.PLAIN_MESSAGE);

		if (name == null || name.isEmpty())
		{
			return;
		}

		if (name.length() > MAX_GROUP_NAME_LENGTH)
		{
			name = name.substring(0, MAX_GROUP_NAME_LENGTH);
		}

		String groupName = name;
		clientThread.invokeLater(() -> {
			PurchaseProgressGroup nameCheck = groups.stream().filter(o -> o.getName().equals(groupName)).findFirst().orElse(null);

			if (nameCheck == null)
			{
				group.setName(groupName);
				dataManager.saveData();
				SwingUtilities.invokeLater(() -> panel.updateProgressPanels());
			}
		});
	}

	public void removeGroup(PurchaseProgressGroup group, boolean removeItems)
	{
		clientThread.invokeLater(() -> {
			if (!removeItems)
			{
				items.addAll(group.getItems());
			}
			groups.remove(group);
			dataManager.saveData();
			SwingUtilities.invokeLater(() -> panel.updateProgressPanels());
		});
	}

	public void addItemsToGroup(PurchaseProgressGroup group, List<String> itemNames)
	{
		clientThread.invokeLater(() -> {
			for (String itemName : itemNames)
			{
				PurchaseProgressItem item = items.stream().filter(o -> o.getName().equals(itemName)).findFirst().orElse(null);
				group.getItems().add(item);
				items.remove(item);
			}
			dataManager.saveData();
			SwingUtilities.invokeLater(() -> panel.updateProgressPanels());
		});
	}

	public void removeItemFromGroup(PurchaseProgressGroup group, PurchaseProgressItem item)
	{
		clientThread.invokeLater(() -> {
			group.getItems().remove(item);
			items.add(item);
			dataManager.saveData();
			SwingUtilities.invokeLater(() -> panel.updateProgressPanels());
		});
	}

	public void switchGroupCollapse(PurchaseProgressGroup group)
	{
		clientThread.invokeLater(() -> {
			group.setCollapsed(!group.isCollapsed());
			dataManager.saveData();
			SwingUtilities.invokeLater(() -> panel.updateProgressPanels());
		});
	}

	@Schedule(
			period = 5,
			unit = ChronoUnit.MINUTES
	)
	public void updateItemPrices()
	{
		// Group item prices
		for (PurchaseProgressGroup group : groups)
		{
			for (PurchaseProgressItem item : group.getItems())
			{
				item.setGePrice(itemManager.getItemPrice(item.getItemId()));
			}
		}

		// Individual prices
		for (PurchaseProgressItem item : items)
		{
			item.setGePrice(itemManager.getItemPrice(item.getItemId()));
		}

		SwingUtilities.invokeLater(() -> panel.updateProgressPanels());
	}

	public void sort(boolean sortAscending)
	{
		clientThread.invokeLater(() -> {
			if (!items.isEmpty())
			{
				if (sortAscending)
				{
					items.sort(Comparator.naturalOrder());
				}
				else
				{
					items.sort(Comparator.reverseOrder());
				}

				dataManager.saveData();
				SwingUtilities.invokeLater(() -> panel.updateProgressPanels());
			}
		});
	}

	public void shiftGroup(int groupIndex, boolean shiftUp)
	{
		clientThread.invokeLater(() -> {
			PurchaseProgressGroup shiftedGroup = groups.get(groupIndex);

			if (shiftUp)
			{
				groups.set(groupIndex, groups.get(groupIndex - 1));
				groups.set(groupIndex - 1, shiftedGroup);
			}
			else
			{
				groups.set(groupIndex, groups.get(groupIndex + 1));
				groups.set(groupIndex + 1, shiftedGroup);
			}

			dataManager.saveData();
			SwingUtilities.invokeLater(() -> panel.updateProgressPanels());
		});
	}

	public void shiftItem(int itemIndex, boolean shiftUp)
	{
		clientThread.invokeLater(() -> {
			PurchaseProgressItem shiftedItem = items.get(itemIndex);

			// Out of bounds is checked before call in item panel
			if (shiftUp)
			{
				items.set(itemIndex, items.get(itemIndex - 1));
				items.set(itemIndex - 1, shiftedItem);
			}
			else
			{
				items.set(itemIndex, items.get(itemIndex + 1));
				items.set(itemIndex + 1, shiftedItem);
			}

			dataManager.saveData();
			SwingUtilities.invokeLater(() -> panel.updateProgressPanels());
		});
	}

	public void shiftItemInGroup(PurchaseProgressGroup group, int itemIndex, boolean shiftUp)
	{
		clientThread.invokeLater(() -> {
			List<PurchaseProgressItem> groupItems = group.getItems();
			PurchaseProgressItem shiftedItem = group.getItems().get(itemIndex);

			// Out of bounds is checked before call in group item panel
			if (shiftUp)
			{
				groupItems.set(itemIndex, groupItems.get(itemIndex - 1));
				groupItems.set(itemIndex -1, shiftedItem);
			}
			else
			{
				groupItems.set(itemIndex, groupItems.get(itemIndex + 1));
				groupItems.set(itemIndex +1, shiftedItem);
			}

			dataManager.saveData();
			SwingUtilities.invokeLater(() -> panel.updateProgressPanels());
		});
	}

	private boolean containsItem(PurchaseProgressItem newItem)
	{
		for (PurchaseProgressGroup group : groups)
		{
			if (group.getItems().contains(newItem))
			{
				return true;
			}
		}
		return items.contains(newItem);
	}

	@Override
	protected void startUp() throws Exception
	{
		panel = injector.getInstance(PurchaseProgressPluginPanel.class);

		final BufferedImage icon = ImageUtil.loadImageResource(PurchaseProgressPlugin.class, ICON_IMAGE);

		navButton = NavigationButton.builder()
				.tooltip(PLUGIN_NAME)
				.icon(icon)
				.priority(9)
				.panel(panel)
				.build();

		clientToolbar.addNavigation(navButton);

		this.dataManager = new PurchaseProgressDataManager(this, client, configManager, itemManager, gson);

		clientThread.invokeLater(() -> dataManager.loadData());
	}

	@Override
	protected void shutDown() throws Exception
	{
		clientToolbar.removeNavigation(navButton);
	}

	@Provides
	PurchaseProgressConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(PurchaseProgressConfig.class);
	}

	@Subscribe
	public void onScriptPostFired(ScriptPostFired event)
	{
		if (event.getScriptId() == ScriptID.BANKMAIN_BUILD)
		{
			value = bankCalculation.calculateValue();
			dataManager.saveData();
			SwingUtilities.invokeLater(() -> panel.updateProgressPanels());
		}
	}
}

/*
 * Copyright (c) 2022, BrastaSauce
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.purchaseprogress;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;

@ConfigGroup(PurchaseProgressPlugin.CONFIG_GROUP)
public interface PurchaseProgressConfig extends Config
{
	@ConfigItem(
		keyName = "includeBankTab",
		name = "Include Bank Tab",
		description = "Include a bank tab's value in addition to gold.",
		position = 0
	)
	default boolean includeBankTab()
	{
		return false;
	}

	@ConfigItem(
		keyName = "bankTab",
		name = "Bank Tab",
		description = "The bank tab to include. Input 0 to use entire bank value.",
		position = 1
	)
	@Range(max = 9)
	default int bankTab()
	{
		return 0;
	}

	@ConfigItem(
			keyName = "onlyTrackFirstItem",
			name = "Only Track First Item",
			description = "Only displays progress for the first listed item.",
			position = 2
	)
	default boolean onlyTrackFirstItem()
	{
		return false;
	}
}

/*
 * Copyright (c) 2022, BrastaSauce
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.purchaseprogress;

import com.google.common.collect.ImmutableList;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.ItemID;
import net.runelite.api.Varbits;
import net.runelite.client.game.ItemManager;

import javax.inject.Inject;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BankCalculation
{
    private int hash;
    private Long bankValue;

    private static final List<Integer> TAB_VARBITS = ImmutableList.of(
            Varbits.BANK_TAB_ONE_COUNT,
            Varbits.BANK_TAB_TWO_COUNT,
            Varbits.BANK_TAB_THREE_COUNT,
            Varbits.BANK_TAB_FOUR_COUNT,
            Varbits.BANK_TAB_FIVE_COUNT,
            Varbits.BANK_TAB_SIX_COUNT,
            Varbits.BANK_TAB_SEVEN_COUNT,
            Varbits.BANK_TAB_EIGHT_COUNT,
            Varbits.BANK_TAB_NINE_COUNT
    );

    @Inject
    private ItemManager itemManager;

    @Inject
    private Client client;

    @Inject
    private PurchaseProgressConfig config;

    long calculateValue()
    {
        long value = 0;

        final ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
        final ItemContainer bank = client.getItemContainer(InventoryID.BANK);

        // Add inventory GP/tokens
        if (inventory != null)
        {
            value += inventory.count(ItemID.COINS_995);
            value += inventory.count(ItemID.PLATINUM_TOKEN) * 1000L;
        }

        if (bank == null)
        {
            return value;
        }

        // Add bank GP/tokens
        value += bank.count(ItemID.COINS_995);
        value += bank.count(ItemID.PLATINUM_TOKEN) * 1000L;

        // Add loot tab value if selected
        if (!config.includeBankTab())
        {
            return value;
        }

        final Item[] items = bank.getItems();
        int lootTab = config.bankTab();

        if (lootTab != 0)
        {
            int startIndex = 0;

            for (int i = lootTab - 1; i > 0; i--)
            {
                startIndex += client.getVarbitValue(TAB_VARBITS.get(i - 1));
            }

            int itemCount = client.getVarbitValue(TAB_VARBITS.get(lootTab - 1));
            value += calculateItemValues(Arrays.copyOfRange(items, startIndex, startIndex + itemCount));
        }
        else
        {
            value += calculateItemValues(items);
        }

        return value;
    }

    private long calculateItemValues(Item[] items)
    {
        // Return last calculation if bank tab hasn't changed
        final int newHash = hashItems(items);
        if (bankValue != null && hash == newHash)
        {
            return bankValue;
        }

        hash = newHash;
        long value = 0;

        for (final Item item : items)
        {
            final int qty = item.getQuantity();
            final int id = item.getId();

            if (id <= 0 || qty == 0)
            {
                continue;
            }

            switch (id)
            {
                case ItemID.COINS_995:
                    break; // Inventory and Bank coins already calculated
                case ItemID.PLATINUM_TOKEN:
                    break; // Inventory and Bank tokens already calculated
                default:
                    value += (long) itemManager.getItemPrice(id) * qty;
                    break;
            }
        }

        bankValue = value;
        return value;
    }

    private int hashItems(final Item[] items)
    {
        final Map<Integer, Integer> mapCheck = new HashMap<>(items.length);
        for (Item item : items)
        {
            mapCheck.put(item.getId(), item.getQuantity());
        }

        return mapCheck.hashCode();
    }
}

/*
 * Copyright (c) 2022, BrastaSauce
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.purchaseprogress.ui;

import com.brastasauce.purchaseprogress.PurchaseProgressConfig;
import com.brastasauce.purchaseprogress.PurchaseProgressPlugin;
import com.brastasauce.purchaseprogress.data.PurchaseProgressGroup;
import com.brastasauce.purchaseprogress.data.PurchaseProgressItem;
import lombok.Getter;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.ImageUtil;

import javax.swing.AbstractAction;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.util.Arrays;
import java.util.List;

public class PurchaseProgressGroupPanel extends JPanel
{
    private static final String DELETE_TITLE = "Warning";
    private static final String DELETE_MESSAGE = "Are you sure you want to delete this progress group?";
    private static final String DELETE_ITEMS_MESSAGE = "Would you like to delete the items too?";
    private static final ImageIcon ADD_ICON;
    private static final ImageIcon ADD_HOVER_ICON;
    private static final ImageIcon COLLAPSED_ICON;
    private static final ImageIcon COLLAPSED_HOVER_ICON;
    private static final ImageIcon UNCOLLAPSED_ICON;
    private static final ImageIcon UNCOLLAPSED_HOVER_ICON;

    private float percent;
    private final boolean collapsed;

    @Getter
    private long totalCost;

    static
    {
        final BufferedImage addImage = ImageUtil.loadImageResource(PurchaseProgressPluginPanel.class, "/add_icon_white.png");
        ADD_ICON = new ImageIcon(ImageUtil.alphaOffset(addImage, 0.53f));
        ADD_HOVER_ICON = new ImageIcon(addImage);

        final BufferedImage collapsedImage = ImageUtil.loadImageResource(PurchaseProgressPluginPanel.class, "/collapsed_icon.png");
        COLLAPSED_ICON = new ImageIcon(collapsedImage);
        COLLAPSED_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(collapsedImage, 0.53f));

        final BufferedImage uncollapsedImage = ImageUtil.loadImageResource(PurchaseProgressPluginPanel.class, "/shift_down_icon.png");
        UNCOLLAPSED_ICON = new ImageIcon(uncollapsedImage);
        UNCOLLAPSED_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(uncollapsedImage, 0.53f));
    }

    PurchaseProgressGroupPanel(PurchaseProgressPlugin plugin, PurchaseProgressPluginPanel panel, PurchaseProgressGroup group, PurchaseProgressConfig config)
    {
        setLayout(new BorderLayout(5, 0));
        setBorder(new EmptyBorder(5, 5, 5, 0));
        setBackground(ColorScheme.DARKER_GRAY_COLOR);

        int groupIndex = plugin.getGroups().indexOf(group);
        int groupsSize = plugin.getGroups().size();

        for (PurchaseProgressItem item : group.getItems())
        {
            totalCost += item.getGePrice();
        }

        this.collapsed = group.isCollapsed();

        // Top Panel
        JPanel topPanel = new JPanel(new BorderLayout());
        topPanel.setOpaque(false);

        // Right click for deleting group
        JPopupMenu popup = new JPopupMenu();

        JMenuItem moveUp = new JMenuItem(new AbstractAction("Move Up")
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                if (groupIndex != 0)
                {
                    plugin.shiftGroup(groupIndex, true);
                }
            }
        });
        popup.add(moveUp);

        JMenuItem moveDown = new JMenuItem(new AbstractAction("Move Down")
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                if (groupIndex != groupsSize - 1)
                {
                    plugin.shiftGroup(groupIndex, false);
                }
            }
        });
        popup.add(moveDown);

        JMenuItem delete = new JMenuItem(new AbstractAction("Delete Group")
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                if (deleteConfirm())
                {
                    plugin.removeGroup(group, deleteItemsConfirm());
                }
            }
        });
        popup.add(delete);

        topPanel.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mouseReleased(MouseEvent e)
            {
                if (SwingUtilities.isRightMouseButton(e))
                {
                    popup.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });

        // Collapse and Names
        JPanel leftActions = new JPanel(new BorderLayout());
        leftActions.setOpaque(false);

        // Group Name
        JLabel groupName = new JLabel();
        groupName.setForeground(Color.WHITE);
        groupName.setBorder(new EmptyBorder(0, 5, 0, 0));
        groupName.setPreferredSize(new Dimension(140, 0));
        groupName.setText(group.getName());

        // Collapse
        JLabel collapseButton = new JLabel();
        collapseButton.setOpaque(false);

        if (collapsed)
        {
            groupName.setPreferredSize(new Dimension(160, 0));

            collapseButton.setIcon(COLLAPSED_ICON);
            collapseButton.addMouseListener(new MouseAdapter()
            {
                @Override
                public void mouseReleased(MouseEvent e)
                {
                    plugin.switchGroupCollapse(group);
                }

                @Override
                public void mouseEntered(MouseEvent e)
                {
                    collapseButton.setIcon(COLLAPSED_HOVER_ICON);
                }

                @Override
                public void mouseExited(MouseEvent e)
                {
                    collapseButton.setIcon(COLLAPSED_ICON);
                }
            });

            leftActions.add(groupName, BorderLayout.EAST);
            leftActions.add(collapseButton, BorderLayout.WEST);

            // Percent
            JLabel percentLabel = new JLabel();
            percentLabel.setBorder(new EmptyBorder(0, 0, 0, 5));
            percent = ((float) plugin.getValue() / totalCost) * 100;
            if (totalCost == 0)
            {
                percent = 0;
            }
            else if (percent >= 100)
            {
                percent = 100;
            }
            percentLabel.setText(String.format("%.0f", percent) + "%");

            topPanel.add(leftActions, BorderLayout.WEST);
            topPanel.add(percentLabel, BorderLayout.EAST);

            add(topPanel, BorderLayout.CENTER);
        }
        else
        {
            collapseButton.setIcon(UNCOLLAPSED_ICON);
            collapseButton.addMouseListener(new MouseAdapter()
            {
                @Override
                public void mouseReleased(MouseEvent e)
                {
                    plugin.switchGroupCollapse(group);
                }

                @Override
                public void mouseEntered(MouseEvent e)
                {
                    collapseButton.setIcon(UNCOLLAPSED_HOVER_ICON);
                }

                @Override
                public void mouseExited(MouseEvent e)
                {
                    collapseButton.setIcon(UNCOLLAPSED_ICON);
                }
            });

            leftActions.add(groupName, BorderLayout.EAST);
            leftActions.add(collapseButton, BorderLayout.WEST);

            topPanel.add(leftActions, BorderLayout.WEST);

            // Actions Panel
            JPanel rightActions = new JPanel(new BorderLayout());
            rightActions.setBorder(new EmptyBorder(0, 0, 0, 5));
            rightActions.setOpaque(false);

            // Edit Button
            JLabel edit = new JLabel("Edit");
            edit.setVerticalAlignment(SwingConstants.CENTER);
            edit.setBorder(new EmptyBorder(0, 0, 0, 0));
            edit.setForeground(Color.LIGHT_GRAY);
            edit.addMouseListener(new MouseAdapter()
            {
                @Override
                public void mouseReleased(MouseEvent e)
                {
                    plugin.editGroup(group);
                }

                @Override
                public void mouseEntered(MouseEvent e)
                {
                    edit.setForeground(Color.WHITE);
                }

                @Override
                public void mouseExited(MouseEvent e)
                {
                    edit.setForeground(Color.LIGHT_GRAY);
                }
            });
            rightActions.add(edit, BorderLayout.WEST);

            // Empty panel to separate without causing extra hover
            JPanel empty = new JPanel();
            empty.setOpaque(false);
            rightActions.add(empty, BorderLayout.CENTER);

            JLabel addItem = new JLabel(ADD_ICON);
            addItem.setOpaque(false);
            addItem.addMouseListener(new MouseAdapter()
            {
                @Override
                public void mouseReleased(MouseEvent e)
                {
                    final String[] itemNames = plugin.getItems().stream().map(PurchaseProgressItem::getName).toArray(String[]::new);
                    Arrays.sort(itemNames, String.CASE_INSENSITIVE_ORDER);

                    PurchaseProgressSelectionPanel selection = new PurchaseProgressSelectionPanel(panel, itemNames);
                    selection.setOnOk(e1 -> {
                        List<String> selectedItems = selection.getSelectedItems();
                        if (!selectedItems.isEmpty())
                        {
                            plugin.addItemsToGroup(group, selectedItems);
                        }
                    });
                    selection.show();
                }

                @Override
                public void mouseEntered(MouseEvent e)
                {
                    addItem.setIcon(ADD_HOVER_ICON);
                }

                @Override
                public void mouseExited(MouseEvent e)
                {
                    addItem.setIcon(ADD_ICON);
                }
            });
            rightActions.add(addItem, BorderLayout.EAST);

            topPanel.add(rightActions, BorderLayout.EAST);

            // Group Items
            GridBagConstraints constraints = new GridBagConstraints();
            constraints.fill = GridBagConstraints.HORIZONTAL;
            constraints.gridwidth = 1;
            constraints.weightx = 1;
            constraints.gridx = 0;
            constraints.gridy = 1;

            JPanel itemsPanel = new JPanel();
            itemsPanel.setLayout(new GridBagLayout());
            itemsPanel.setBorder(new EmptyBorder(5, 5, 0, 5));
            itemsPanel.setOpaque(false);

            int index = 0;
            for (PurchaseProgressItem item : group.getItems())
            {
                PurchaseProgressGroupItemPanel itemPanel = new PurchaseProgressGroupItemPanel(plugin, group, item, config);

                if (index++ > 0)
                {
                    itemsPanel.add(createMarginWrapper(itemPanel), constraints);
                }
                else
                {
                    itemsPanel.add(itemPanel, constraints);
                }

                constraints.gridy++;
            }

            // Bottom Panel
            if (totalCost != 0)
            {
                PurchaseProgressTotalPanel totalPanel = new PurchaseProgressTotalPanel(plugin.getValue(), totalCost, ColorScheme.DARK_GRAY_COLOR);
                itemsPanel.add(createMarginWrapper(totalPanel), constraints);
            }

            add(topPanel, BorderLayout.NORTH);
            add(itemsPanel, BorderLayout.CENTER);
        }
    }

    private boolean deleteConfirm()
    {
        int confirm = JOptionPane.showConfirmDialog(this,
                DELETE_MESSAGE, DELETE_TITLE, JOptionPane.YES_NO_OPTION);

        return confirm == JOptionPane.YES_NO_OPTION;
    }

    private boolean deleteItemsConfirm()
    {
        int confirm = JOptionPane.showConfirmDialog(this,
                DELETE_ITEMS_MESSAGE, DELETE_TITLE, JOptionPane.YES_NO_OPTION);

        return confirm == JOptionPane.YES_NO_OPTION;
    }

    private JPanel createMarginWrapper(JPanel panel)
    {
        JPanel marginWrapper = new JPanel(new BorderLayout());
        marginWrapper.setOpaque(false);
        marginWrapper.setBorder(new EmptyBorder(5, 0, 0, 0));
        marginWrapper.add(panel, BorderLayout.NORTH);
        return marginWrapper;
    }

    @Override
    protected void paintComponent(Graphics g)
    {
        if (collapsed)
        {
            g.setColor(new Color(12, 85, 35));
            int greenWidth = (int) (this.getWidth() * percent / 100);
            g.fillRect(0, 0, greenWidth, this.getHeight());

            if (greenWidth != this.getWidth())
            {
                g.setColor(ColorScheme.DARKER_GRAY_COLOR);
                g.fillRect(greenWidth, 0, this.getWidth() - greenWidth, this.getHeight());
            }
        }
        else
        {
            g.setColor(ColorScheme.DARKER_GRAY_COLOR);
            g.fillRect(0, 0, this.getWidth(), this.getHeight());
        }
    }
}

/*
 * Copyright (c) 2022, BrastaSauce
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.purchaseprogress.ui;

import net.runelite.client.ui.ColorScheme;

import javax.swing.DefaultListCellRenderer;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

public class PurchaseProgressSelectionPanel
{
    private final JList<String> list;
    private ActionListener okEvent;
    private final JDialog dialog;

    private static final String TITLE = "Select Items";
    private static final String MESSAGE = "Select items to add to this group";
    private static final String SUBMESSAGE = "Ctrl+Click to select multiple items";

    public PurchaseProgressSelectionPanel(JPanel parent, String[] options)
    {
        this.list = new JList<>(options);
        this.list.setBackground(ColorScheme.DARKER_GRAY_COLOR);

        // Top Panel
        JPanel topPanel = new JPanel(new BorderLayout());

        JLabel message = new JLabel(MESSAGE);
        message.setHorizontalAlignment(SwingConstants.CENTER);
        JLabel subMessage = new JLabel(SUBMESSAGE);
        subMessage.setHorizontalAlignment(SwingConstants.CENTER);

        topPanel.add(message, BorderLayout.NORTH);
        topPanel.add(subMessage, BorderLayout.CENTER);

        // Center Panel with Items
        JPanel centerPanel = new JPanel(new BorderLayout(5, 5));
        centerPanel.setPreferredSize(new Dimension(250, 300));

        DefaultListCellRenderer renderer = (DefaultListCellRenderer) list.getCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.CENTER);

        JScrollPane scrollPane = new JScrollPane();
        scrollPane.setViewportView(list);

        centerPanel.add(topPanel, BorderLayout.NORTH);
        centerPanel.add(scrollPane, BorderLayout.CENTER);

        // Options
        JOptionPane optionPane = new JOptionPane(centerPanel);

        JButton okButton = new JButton("Ok");
        okButton.addActionListener(this::onOkButtonClick);

        JButton cancelButton = new JButton("Cancel");
        cancelButton.addActionListener(this::onCancelButtonClick);

        optionPane.setOptions(new Object[]{okButton, cancelButton});

        dialog = optionPane.createDialog(parent, "Select items");
        dialog.setTitle(TITLE);
    }

    public List<String> getSelectedItems()
    {
        return list.getSelectedValuesList();
    }

    public void setOnOk(ActionListener event)
    {
        okEvent = event;
    }

    private void onOkButtonClick(ActionEvent e)
    {
        if (okEvent != null)
        {
            okEvent.actionPerformed(e);
        }
        dialog.setVisible(false);
    }

    private void onCancelButtonClick(ActionEvent e)
    {
        dialog.setVisible(false);
    }

    public void show()
    {
        dialog.setVisible(true);
    }
}

/*
 * Copyright (c) 2022, BrastaSauce
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.purchaseprogress.ui;

import com.brastasauce.purchaseprogress.PurchaseProgressConfig;
import com.brastasauce.purchaseprogress.data.PurchaseProgressGroup;
import com.brastasauce.purchaseprogress.data.PurchaseProgressItem;
import com.brastasauce.purchaseprogress.PurchaseProgressPlugin;
import com.google.inject.Inject;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.RuneLiteConfig;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.IconTextField;
import net.runelite.client.ui.components.PluginErrorPanel;
import net.runelite.client.util.AsyncBufferedImage;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.QuantityFormatter;
import net.runelite.http.api.item.ItemPrice;

import javax.swing.AbstractAction;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;


public class PurchaseProgressPluginPanel extends PluginPanel
{
    private static final String PROGRESS_PANEL = "PROGRESS_PANEL";
    private static final String SEARCH_PANEL = "SEARCH_PANEL";
    private static final String RESULTS_PANEL = "RESULTS_PANEL";
    private static final String ERROR_PANEL = "ERROR_PANEL";
    private static final String CONTAINS_ITEM_TITLE = "Info";
    private static final String CONTAINS_ITEM_MESSAGE = "This item is already being tracked.";
    private static final ImageIcon ADD_ICON;
    private static final ImageIcon ADD_HOVER_ICON;
    private static final ImageIcon ADD_GROUP_ICON;
    private static final ImageIcon ADD_GROUP_HOVER_ICON;
    private static final ImageIcon CANCEL_ICON;
    private static final ImageIcon CANCEL_HOVER_ICON;
    private static final ImageIcon SORT_ICON;
    private static final ImageIcon SORT_HOVER_ICON;
    private static final int MAX_SEARCH_ITEMS = 100;

    private final PurchaseProgressPlugin plugin;
    private final ClientThread clientThread;
    private final ItemManager itemManager;
    private final RuneLiteConfig runeLiteConfig;
    private final PurchaseProgressConfig config;

    private final CardLayout centerCard = new CardLayout();
    private final CardLayout searchCard = new CardLayout();
    private final JPanel titlePanel = new JPanel(new BorderLayout());
    private final JLabel title = new JLabel();
    private final JPanel progressActions = new JPanel(new BorderLayout());
    private final JLabel addItem = new JLabel(ADD_ICON);
    private final JLabel addGroup = new JLabel(ADD_GROUP_ICON);
    private final JLabel cancelItem = new JLabel(CANCEL_ICON);
    private final JPanel centerPanel = new JPanel(centerCard);
    private final JPanel progressPanel = new JPanel(new BorderLayout());
    private final JPanel valuePanel = new JPanel(new BorderLayout());
    private final JLabel value = new JLabel();
    private final JLabel sortButton = new JLabel();
    private final JPanel progressItemsPanel = new JPanel();
    private final JPanel searchPanel = new JPanel(new BorderLayout());
    private final JPanel searchCenterPanel = new JPanel(searchCard);
    private final JPanel searchResultsPanel = new JPanel();
    private final IconTextField searchBar = new IconTextField();
    private final PluginErrorPanel searchErrorPanel = new PluginErrorPanel();
    private final GridBagConstraints constraints = new GridBagConstraints();

    private final List<PurchaseProgressItem> searchItems = new ArrayList<>();

    static
    {
        final BufferedImage addImage = ImageUtil.loadImageResource(PurchaseProgressPluginPanel.class, "/add_icon.png");
        ADD_ICON = new ImageIcon(addImage);
        ADD_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(addImage, 0.53f));

        final BufferedImage addGroupImage = ImageUtil.loadImageResource(PurchaseProgressGroupPanel.class, "/add_group_icon.png");
        ADD_GROUP_ICON = new ImageIcon(addGroupImage);
        ADD_GROUP_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(addGroupImage, 0.53f));

        final BufferedImage cancelImage = ImageUtil.loadImageResource(PurchaseProgressPluginPanel.class, "/cancel_icon.png");
        CANCEL_ICON = new ImageIcon(cancelImage);
        CANCEL_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(cancelImage, 0.53f));

        final BufferedImage sortImage = ImageUtil.loadImageResource(PurchaseProgressPlugin.class, "/sort_icon.png");
        SORT_ICON = new ImageIcon(sortImage);
        SORT_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(sortImage, 0.53f));
    }

    @Inject
    PurchaseProgressPluginPanel(PurchaseProgressPlugin plugin, ClientThread clientThread, ItemManager itemManager, RuneLiteConfig runeLiteConfig, PurchaseProgressConfig config)
    {
        super(false);
        this.plugin = plugin;
        this.clientThread = clientThread;
        this.itemManager = itemManager;
        this.runeLiteConfig = runeLiteConfig;
        this.config = config;

        setLayout(new BorderLayout());

        /* Container Panel (contains title panel and center panel) */
        JPanel container = new JPanel(new BorderLayout());
        container.setBorder(new EmptyBorder(10, 10, 10, 10));

        /* Title Panel */
        title.setText("Purchase Progress");
        title.setForeground(Color.WHITE);
        title.setBorder(new EmptyBorder(0, 0, 10, 40));

        JPanel actions = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 3));

        /* Add Group Button */
        addGroup.setToolTipText("Add a group");
        addGroup.setBorder(new EmptyBorder(0, 0, 0, 10));
        addGroup.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mousePressed(MouseEvent e)
            {
                plugin.addGroup();
            }

            @Override
            public void mouseEntered(MouseEvent e)
            {
                addGroup.setIcon(ADD_GROUP_HOVER_ICON);
            }

            @Override
            public void mouseExited(MouseEvent e)
            {
                addGroup.setIcon(ADD_GROUP_ICON);
            }
        });
        progressActions.add(addGroup, BorderLayout.WEST);

        /* Add Item Button */
        addItem.setToolTipText("Add an item from the Grand Exchange");
        addItem.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mousePressed(MouseEvent e)
            {
                switchToSearch();
            }

            @Override
            public void mouseEntered(MouseEvent e)
            {
                addItem.setIcon(ADD_HOVER_ICON);
            }

            @Override
            public void mouseExited(MouseEvent e)
            {
                addItem.setIcon(ADD_ICON);
            }
        });
        progressActions.add(addItem, BorderLayout.EAST);

        actions.add(progressActions);

        /* Cancel Button */
        cancelItem.setToolTipText("Cancel");
        cancelItem.setVisible(false);
        cancelItem.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mousePressed(MouseEvent e)
            {
                switchToProgress();
            }

            @Override
            public void mouseEntered(MouseEvent e)
            {
                cancelItem.setIcon(CANCEL_HOVER_ICON);
            }

            @Override
            public void mouseExited(MouseEvent e)
            {
                cancelItem.setIcon(CANCEL_ICON);
            }
        });
        actions.add(cancelItem);

        titlePanel.add(title, BorderLayout.WEST);
        titlePanel.add(actions, BorderLayout.EAST);

        /* Value */
        value.setForeground(new Color(255, 202, 36));
        value.setBorder(new EmptyBorder(0, 0, 5, 0));

        /* Sort Button */
        JPopupMenu sortPopup = new JPopupMenu();

        JMenuItem sortAscending = new JMenuItem(new AbstractAction("Sort by Price (Low -> High)")
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                plugin.sort(true);
            }
        });
        sortPopup.add(sortAscending);

        JMenuItem sortDescending = new JMenuItem(new AbstractAction("Sort by Price (High -> Low)")
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                plugin.sort(false);
            }
        });
        sortPopup.add(sortDescending);

        sortButton.setIcon(SORT_ICON);
        sortButton.setBorder(new EmptyBorder(0, 0, 0, 2));
        sortButton.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mouseReleased(MouseEvent e)
            {
                sortPopup.show(e.getComponent(), e.getX(), e.getY());
            }

            @Override
            public void mouseEntered(MouseEvent e)
            {
                sortButton.setIcon(SORT_HOVER_ICON);
            }

            @Override
            public void mouseExited(MouseEvent e)
            {
                sortButton.setIcon(SORT_ICON);
            }
        });

        /* Value Panel (contains value text and sort button) */
        valuePanel.add(value, BorderLayout.WEST);
        valuePanel.add(sortButton, BorderLayout.EAST);

        /* Progress Items Panel */
        progressItemsPanel.setLayout(new GridBagLayout());

        JPanel pWrapper = new JPanel(new BorderLayout());
        pWrapper.add(progressItemsPanel, BorderLayout.NORTH);

        JScrollPane progressWrapper = new JScrollPane(pWrapper);
        progressWrapper.setBackground(ColorScheme.DARK_GRAY_COLOR);
        progressWrapper.setBorder(new EmptyBorder(5, 0, 0, 0));
        progressWrapper.getVerticalScrollBar().setPreferredSize(new Dimension(12, 0));
        progressWrapper.getVerticalScrollBar().setBorder(new EmptyBorder(5, 5, 0, 0));

        /* Progress Panel (contains value panel and progress items panel) */
        progressPanel.add(valuePanel, BorderLayout.NORTH);
        progressPanel.add(progressWrapper, BorderLayout.CENTER);

        /* Search Results Panel */
        searchResultsPanel.setLayout(new GridBagLayout());

        JPanel sWrapper = new JPanel(new BorderLayout());
        sWrapper.add(searchResultsPanel, BorderLayout.NORTH);

        JScrollPane resultsWrapper = new JScrollPane(sWrapper);
        resultsWrapper.setBackground(ColorScheme.DARK_GRAY_COLOR);
        resultsWrapper.setBorder(new EmptyBorder(5, 0, 0, 0));
        resultsWrapper.getVerticalScrollBar().setPreferredSize(new Dimension(12, 0));
        resultsWrapper.getVerticalScrollBar().setBorder(new EmptyBorder(5, 5, 0, 0));

        constraints.fill = GridBagConstraints.HORIZONTAL;
        constraints.gridwidth = 1;
        constraints.weightx = 1;
        constraints.gridx = 0;
        constraints.gridy = 0;

        /* Search Error Panel */
        searchErrorPanel.setContent("Grand Exchange Search",
                "Search for an item to select");

        JPanel errorWrapper = new JPanel(new BorderLayout());
        errorWrapper.add(searchErrorPanel, BorderLayout.NORTH);

        /* Search Center Panel (contains results and error panels) */
        searchCenterPanel.add(resultsWrapper, RESULTS_PANEL);
        searchCenterPanel.add(errorWrapper, ERROR_PANEL);
        searchCard.show(searchCenterPanel, ERROR_PANEL);

        /* Search Panel (contains search bar and search center panel) */
        searchBar.setIcon(IconTextField.Icon.SEARCH);
        searchBar.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH - 15, 30));
        searchBar.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        searchBar.setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
        searchBar.addClearListener(this::searchForItems);
        searchBar.addKeyListener(new KeyListener()
        {
            @Override
            public void keyTyped(KeyEvent e)
            {
            }

            @Override
            public void keyPressed(KeyEvent e)
            {
                if (e.getKeyCode() == KeyEvent.VK_ENTER)
                {
                    searchForItems();
                }
            }

            @Override
            public void keyReleased(KeyEvent e)
            {
            }
        });
        searchPanel.add(searchBar, BorderLayout.NORTH);
        searchPanel.add(searchCenterPanel, BorderLayout.CENTER);

        /* Center Panel (contains progress items/search items panel) */
        centerPanel.add(progressPanel, PROGRESS_PANEL);
        centerPanel.add(searchPanel, SEARCH_PANEL);
        centerCard.show(centerPanel, PROGRESS_PANEL);

        container.add(titlePanel, BorderLayout.NORTH);
        container.add(centerPanel, BorderLayout.CENTER);
        add(container, BorderLayout.CENTER);
    }

    private void searchForItems()
    {
        searchResultsPanel.removeAll();
        if (searchBar.getText().isEmpty())
        {
            searchResultsPanel.removeAll();
            SwingUtilities.invokeLater(() -> searchResultsPanel.updateUI());
            return;
        }

        List<ItemPrice> results = itemManager.search(searchBar.getText());
        if (results.isEmpty())
        {
            searchErrorPanel.setContent("No results found", "No items were found with that name, please try again");
            searchCard.show(searchCenterPanel, ERROR_PANEL);
            return;
        }

        clientThread.invokeLater(() -> processResults(results));
    }

    private void processResults(List<ItemPrice> results)
    {
        searchItems.clear();
        searchCard.show(searchCenterPanel, RESULTS_PANEL);

        int count = 0;
        boolean useActivelyTradedPrice = runeLiteConfig.useWikiItemPrices();

        // Add each result to items list
        for (ItemPrice item : results)
        {
            if (count++ > MAX_SEARCH_ITEMS)
            {
                break;
            }

            int itemId = item.getId();
            AsyncBufferedImage itemImage = itemManager.getImage(itemId);
            int itemPrice = useActivelyTradedPrice ? itemManager.getWikiPrice(item) : item.getPrice();
            searchItems.add(new PurchaseProgressItem(itemImage, item.getName(), itemId, itemPrice));
        }

        // Add each item in list to panel
        SwingUtilities.invokeLater(() ->
        {
            int index = 0;
            for (PurchaseProgressItem item : searchItems)
            {
                PurchaseProgressResultPanel panel = new PurchaseProgressResultPanel(plugin, item);

                if (index++ > 0)
                {
                    searchResultsPanel.add(createMarginWrapper(panel), constraints);
                }
                else
                {
                    searchResultsPanel.add(panel, constraints);
                }

                constraints.gridy++;
            }

            validate();
        });
    }

    public void updateProgressPanels()
    {
        progressItemsPanel.removeAll();

        updateValue();

        constraints.gridy++;

        int index = 0;
        long totalCost = 0;

        // Groups
        for (PurchaseProgressGroup group : plugin.getGroups())
        {
            PurchaseProgressGroupPanel panel = new PurchaseProgressGroupPanel(plugin, this, group, config);

            if (index++ > 0)
            {
                progressItemsPanel.add(createMarginWrapper(panel), constraints);
            }
            else
            {
                progressItemsPanel.add(panel, constraints);
            }

            totalCost += panel.getTotalCost();
            constraints.gridy++;
        }

        // Individual items
        for (PurchaseProgressItem item : plugin.getItems())
        {
            PurchaseProgressItemPanel panel = new PurchaseProgressItemPanel(plugin, item, config);

            if (index++ > 0)
            {
                progressItemsPanel.add(createMarginWrapper(panel), constraints);
            }
            else
            {
                progressItemsPanel.add(panel, constraints);
            }

            totalCost += item.getGePrice();
            constraints.gridy++;
        }

        if (totalCost != 0)
        {
            PurchaseProgressTotalPanel totalCostPanel = new PurchaseProgressTotalPanel(plugin.getValue(), totalCost, ColorScheme.DARKER_GRAY_COLOR);
            progressItemsPanel.add(createMarginWrapper(totalCostPanel), constraints);
        }

        validate();
    }

    private void updateValue()
    {
        long progressValue = plugin.getValue();
        if (progressValue == 0)
        {
            value.setText("Visit a bank to calculate value");
        }
        else
        {
            value.setText("Value: " + QuantityFormatter.formatNumber(plugin.getValue()) + " gp");
        }

        // Hide sort button if no items
        sortButton.setVisible(!plugin.getItems().isEmpty());
    }

    public void containsItemWarning()
    {
        JOptionPane.showConfirmDialog(this,
                CONTAINS_ITEM_MESSAGE, CONTAINS_ITEM_TITLE, JOptionPane.DEFAULT_OPTION);
    }

    public void switchToProgress()
    {
        cancelItem.setVisible(false);
        progressActions.setVisible(true);
        centerCard.show(centerPanel, PROGRESS_PANEL);
    }

    private void switchToSearch()
    {
        progressActions.setVisible(false);
        cancelItem.setVisible(true);
        centerCard.show(centerPanel, SEARCH_PANEL);
    }

    private JPanel createMarginWrapper(JPanel panel)
    {
        JPanel marginWrapper = new JPanel(new BorderLayout());
        marginWrapper.setBorder(new EmptyBorder(5, 0, 0, 0));
        marginWrapper.add(panel, BorderLayout.NORTH);
        return marginWrapper;
    }
}

/*
 * Copyright (c) 2022, BrastaSauce
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.purchaseprogress.ui;

import net.runelite.client.util.QuantityFormatter;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;

public class PurchaseProgressTotalPanel extends JPanel
{
    private float percent;
    private final Color background;

    PurchaseProgressTotalPanel(long value, long totalCost, Color background)
    {
        setLayout(new BorderLayout());
        setBorder(new EmptyBorder(5, 5, 5, 0));

        this.background = background;

        JPanel totalPanel = new JPanel(new BorderLayout());
        totalPanel.setBackground(new Color(0, 0, 0, 0));
        totalPanel.setOpaque(false);

        JLabel totalLabel = new JLabel();
        totalLabel.setForeground(new Color(255, 202, 36));
        totalLabel.setText("Total: " + QuantityFormatter.formatNumber(totalCost) + " gp");
        totalPanel.add(totalLabel, BorderLayout.WEST);

        JLabel percentLabel = new JLabel();
        percentLabel.setBorder(new EmptyBorder(0, 0, 0, 5));
        percent = ((float) value / totalCost) * 100;
        if (percent >= 100)
        {
            percent = 100;
        }
        percentLabel.setText(String.format("%.0f", percent) + "%");
        totalPanel.add(percentLabel, BorderLayout.EAST);

        add(totalPanel, BorderLayout.CENTER);
    }

    @Override
    protected void paintComponent(Graphics g)
    {
        g.setColor(new Color(12, 85, 35));
        int greenWidth = (int) (this.getWidth() * percent / 100);
        g.fillRect(0, 0, greenWidth, this.getHeight());

        if (greenWidth != this.getWidth())
        {
            g.setColor(background);
            g.fillRect(greenWidth, 0, this.getWidth() - greenWidth, this.getHeight());
        }
    }
}

/*
 * Copyright (c) 2022, BrastaSauce
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.purchaseprogress.ui;

import com.brastasauce.purchaseprogress.data.PurchaseProgressItem;
import com.brastasauce.purchaseprogress.PurchaseProgressPlugin;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.QuantityFormatter;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;

public class PurchaseProgressResultPanel extends JPanel
{
    private static final Dimension IMAGE_SIZE = new Dimension(32, 32);

    PurchaseProgressResultPanel(PurchaseProgressPlugin plugin, PurchaseProgressItem item)
    {
        setLayout(new BorderLayout(5, 0));
        setToolTipText(item.getName());
        setBackground(ColorScheme.DARKER_GRAY_COLOR);

        Color background = getBackground();
        List<JPanel> panels = new ArrayList<>();
        panels.add(this);

        MouseAdapter itemPanelMouseListener = new MouseAdapter()
        {
            @Override
            public void mouseReleased(MouseEvent e)
            {
                plugin.addItem(item);
            }

            @Override
            public void mouseEntered(MouseEvent e)
            {
                for (JPanel panel : panels)
                {
                    panel.setBackground(ColorScheme.DARK_GRAY_HOVER_COLOR);
                }
                setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e)
            {
                for (JPanel panel : panels)
                {
                    panel.setBackground(background);
                }
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        };

        addMouseListener(itemPanelMouseListener);
        setBorder(new EmptyBorder(5, 5, 5, 0));

        // Image
        JLabel itemImage = new JLabel();
        itemImage.setPreferredSize(IMAGE_SIZE);
        if (item.getImage() != null)
        {
            item.getImage().addTo(itemImage);
        }
        add(itemImage, BorderLayout.LINE_START);

        // Item Details Panel
        JPanel rightPanel = new JPanel(new GridLayout(2, 1));
        panels.add(rightPanel);
        rightPanel.setBackground(background);

        // Item Name
        JLabel itemName = new JLabel();
        itemName.setForeground(Color.WHITE);
        itemName.setMaximumSize(new Dimension(0, 0));
        itemName.setPreferredSize(new Dimension(0, 0));
        itemName.setText(item.getName());
        rightPanel.add(itemName);

        // GE Price
        JLabel gePriceLabel = new JLabel();
        if (item.getGePrice() > 0)
        {
            gePriceLabel.setText(QuantityFormatter.formatNumber(item.getGePrice()) + " gp");
        }
        else
        {
            gePriceLabel.setText("N/A");
        }
        gePriceLabel.setForeground(ColorScheme.GRAND_EXCHANGE_PRICE);
        rightPanel.add(gePriceLabel);

        add(rightPanel, BorderLayout.CENTER);
    }
}

/*
 * Copyright (c) 2022, BrastaSauce
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.purchaseprogress.ui;

import com.brastasauce.purchaseprogress.PurchaseProgressConfig;
import com.brastasauce.purchaseprogress.data.PurchaseProgressItem;
import com.brastasauce.purchaseprogress.PurchaseProgressPlugin;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.QuantityFormatter;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;

public class PurchaseProgressItemPanel extends JPanel
{
    private static final String DELETE_TITLE = "Warning";
    private static final String DELETE_MESSAGE = "Are you sure you want to delete this progress item?";
    private static final ImageIcon DELETE_ICON;
    private static final ImageIcon DELETE_HOVER_ICON;
    private static final ImageIcon SHIFT_UP_ICON;
    private static final ImageIcon SHIFT_UP_HOVER_ICON;
    private static final ImageIcon SHIFT_DOWN_ICON;
    private static final ImageIcon SHIFT_DOWN_HOVER_ICON;
    private static final Dimension IMAGE_SIZE = new Dimension(32, 32);

    private PurchaseProgressConfig config;

    private float percent;
    private int itemIndex;

    static
    {
        final BufferedImage deleteImage = ImageUtil.loadImageResource(PurchaseProgressPluginPanel.class, "/delete_icon.png");
        DELETE_ICON = new ImageIcon(deleteImage);
        DELETE_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(deleteImage, 0.53f));

        final BufferedImage shiftUpImage = ImageUtil.loadImageResource(PurchaseProgressPlugin.class, "/shift_up_icon.png");
        SHIFT_UP_ICON = new ImageIcon(shiftUpImage);
        SHIFT_UP_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(shiftUpImage, 0.53f));

        final BufferedImage shiftDownImage = ImageUtil.loadImageResource(PurchaseProgressPlugin.class, "/shift_down_icon.png");
        SHIFT_DOWN_ICON = new ImageIcon(shiftDownImage);
        SHIFT_DOWN_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(shiftDownImage, 0.53f));
    }

    PurchaseProgressItemPanel(PurchaseProgressPlugin plugin, PurchaseProgressItem item, PurchaseProgressConfig config)
    {
        this.config = config;
        setLayout(new BorderLayout(5, 0));
        setBorder(new EmptyBorder(5, 5, 5, 0));

        itemIndex = plugin.getItems().indexOf(item);
        int itemsSize = plugin.getItems().size();

        // Image
        JLabel itemImage = new JLabel();
        itemImage.setPreferredSize(IMAGE_SIZE);
        if (item.getImage() != null)
        {
            item.getImage().addTo(itemImage);
        }
        add(itemImage, BorderLayout.LINE_START);

        // Item Details Panel
        JPanel rightPanel = new JPanel(new GridLayout(3, 1));
        rightPanel.setBackground(new Color(0, 0, 0, 0));

        // Item Name
        JLabel itemName = new JLabel();
        itemName.setForeground(Color.WHITE);
        itemName.setMaximumSize(new Dimension(0, 0));
        itemName.setPreferredSize(new Dimension(0, 0));
        itemName.setText(item.getName());
        rightPanel.add(itemName);

        // GE Price
        JLabel gePriceLabel = new JLabel();
        if (item.getGePrice() > 0)
        {
            gePriceLabel.setText(QuantityFormatter.formatNumber(item.getGePrice()) + " gp");
        }
        else
        {
            gePriceLabel.setText("N/A");
        }
        gePriceLabel.setForeground(ColorScheme.GRAND_EXCHANGE_PRICE);
        rightPanel.add(gePriceLabel);

        // Purchase Progress
        JLabel progressLabel = new JLabel();
        percent = ((float) plugin.getValue() / item.getGePrice()) * 100;
        if (percent >= 100)
        {
            percent = 100;
        }
        if (!config.onlyTrackFirstItem() || itemIndex == 0)
        {
            progressLabel.setText(String.format("%.0f", percent) + "%");
            rightPanel.add(progressLabel);
        }

        // Action Panel (Delete, Shift item)
        JPanel actionPanel = new JPanel(new BorderLayout());
        actionPanel.setBackground(new Color(0, 0, 0, 0));
        actionPanel.setOpaque(false);

        // Delete Item
        JLabel deleteItem = new JLabel(DELETE_ICON);
        deleteItem.setBorder(new EmptyBorder(0, 15, 0, 0));
        deleteItem.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mouseReleased(MouseEvent e)
            {
                if (deleteConfirm())
                {
                    plugin.removeItem(item);
                }
            }

            @Override
            public void mouseEntered(MouseEvent e)
            {
                deleteItem.setIcon(DELETE_HOVER_ICON);
            }

            @Override
            public void mouseExited(MouseEvent e)
            {
                deleteItem.setIcon(DELETE_ICON);
            }
        });
        actionPanel.add(deleteItem, BorderLayout.NORTH);

        // Shift Item Panel
        JPanel shiftItemPanel = new JPanel(new BorderLayout());
        shiftItemPanel.setOpaque(false);

        // Shift item up
        JLabel shiftUp = new JLabel(SHIFT_UP_ICON);
        shiftUp.setBorder(new EmptyBorder(0, 0, 0, 5));

        if (itemIndex == 0)
        {
            shiftUp.setIcon(SHIFT_UP_HOVER_ICON);
        }

        shiftUp.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mouseReleased(MouseEvent e)
            {
                if (itemIndex != 0)
                {
                    plugin.shiftItem(itemIndex, true);
                }
            }

            @Override
            public void mouseEntered(MouseEvent e)
            {
                shiftUp.setIcon(SHIFT_UP_HOVER_ICON);
            }

            @Override
            public void mouseExited(MouseEvent e)
            {
                if (itemIndex != 0)
                {
                    shiftUp.setIcon(SHIFT_UP_ICON);
                }
            }
        });
        shiftItemPanel.add(shiftUp, BorderLayout.WEST);

        // Shift item down
        JLabel shiftDown = new JLabel(SHIFT_DOWN_ICON);
        shiftDown.setBorder(new EmptyBorder(0, 0, 0, 5));

        if (itemIndex == itemsSize - 1)
        {
            shiftDown.setIcon(SHIFT_DOWN_HOVER_ICON);
        }

        shiftDown.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mouseReleased(MouseEvent e)
            {
                if (itemIndex != itemsSize - 1)
                {
                    plugin.shiftItem(itemIndex, false);
                }
            }

            @Override
            public void mouseEntered(MouseEvent e)
            {
                shiftDown.setIcon(SHIFT_DOWN_HOVER_ICON);
            }

            @Override
            public void mouseExited(MouseEvent e)
            {
                if (itemIndex != itemsSize - 1)
                {
                    shiftDown.setIcon(SHIFT_DOWN_ICON);
                }
            }
        });
        shiftItemPanel.add(shiftDown, BorderLayout.EAST);

        actionPanel.add(shiftItemPanel, BorderLayout.SOUTH);

        add(rightPanel, BorderLayout.CENTER);
        add(actionPanel, BorderLayout.EAST);
    }

    private boolean deleteConfirm()
    {
        int confirm = JOptionPane.showConfirmDialog(this,
                DELETE_MESSAGE, DELETE_TITLE, JOptionPane.YES_NO_OPTION);

        return confirm == JOptionPane.YES_NO_OPTION;
    }

    @Override
    protected void paintComponent(Graphics g)
    {
        int greenWidth = 0;
        g.setColor(new Color(12, 85, 35));
        if(!config.onlyTrackFirstItem() || itemIndex == 0)
        {
            greenWidth = (int) (this.getWidth() * percent / 100);
        }
        g.fillRect(0, 0, greenWidth, this.getHeight());

        if (greenWidth != this.getWidth())
        {
            g.setColor(ColorScheme.DARKER_GRAY_COLOR);
            g.fillRect(greenWidth, 0, this.getWidth() - greenWidth, this.getHeight());

        }
    }
}

/*
 * Copyright (c) 2022, BrastaSauce
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.brastasauce.purchaseprogress.ui;

import com.brastasauce.purchaseprogress.PurchaseProgressConfig;
import com.brastasauce.purchaseprogress.PurchaseProgressPlugin;
import com.brastasauce.purchaseprogress.data.PurchaseProgressGroup;
import com.brastasauce.purchaseprogress.data.PurchaseProgressItem;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.QuantityFormatter;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;

public class PurchaseProgressGroupItemPanel extends JPanel
{
    private static final String REMOVE_TITLE = "Warning";
    private static final String REMOVE_MESSAGE = "Are you sure you want to remove this progress item from the group?";
    private static final ImageIcon REMOVE_ICON;
    private static final ImageIcon REMOVE_HOVER_ICON;
    private static final ImageIcon SHIFT_UP_ICON;
    private static final ImageIcon SHIFT_UP_HOVER_ICON;
    private static final ImageIcon SHIFT_DOWN_ICON;
    private static final ImageIcon SHIFT_DOWN_HOVER_ICON;
    private static final Dimension IMAGE_SIZE = new Dimension(32, 32);

    private PurchaseProgressConfig config;

    private float percent;
    private int itemIndex;

    static
    {
        final BufferedImage removeImage = ImageUtil.loadImageResource(PurchaseProgressPluginPanel.class, "/delete_icon.png");
        REMOVE_ICON = new ImageIcon(removeImage);
        REMOVE_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(removeImage, 0.53f));

        final BufferedImage shiftUpImage = ImageUtil.loadImageResource(PurchaseProgressPlugin.class, "/shift_up_icon.png");
        SHIFT_UP_ICON = new ImageIcon(shiftUpImage);
        SHIFT_UP_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(shiftUpImage, 0.53f));

        final BufferedImage shiftDownImage = ImageUtil.loadImageResource(PurchaseProgressPlugin.class, "/shift_down_icon.png");
        SHIFT_DOWN_ICON = new ImageIcon(shiftDownImage);
        SHIFT_DOWN_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(shiftDownImage, 0.53f));
    }

    PurchaseProgressGroupItemPanel(PurchaseProgressPlugin plugin, PurchaseProgressGroup group, PurchaseProgressItem item, PurchaseProgressConfig config)
    {
        this.config = config;
        setLayout(new BorderLayout(5, 0));
        setBorder(new EmptyBorder(5, 5, 5, 0));

        itemIndex = group.getItems().indexOf(item);
        int itemsSize = group.getItems().size();

        // Image
        JLabel itemImage = new JLabel();
        itemImage.setPreferredSize(IMAGE_SIZE);
        if (item.getImage() != null)
        {
            item.getImage().addTo(itemImage);
        }
        add(itemImage, BorderLayout.LINE_START);

        // Item Details Panel
        JPanel rightPanel = new JPanel(new GridLayout(3, 1));
        rightPanel.setBackground(new Color(0, 0, 0, 0));

        // Item Name
        JLabel itemName = new JLabel();
        itemName.setForeground(Color.WHITE);
        itemName.setMaximumSize(new Dimension(0, 0));
        itemName.setPreferredSize(new Dimension(0, 0));
        itemName.setText(item.getName());
        rightPanel.add(itemName);

        // GE Price
        JLabel gePriceLabel = new JLabel();
        if (item.getGePrice() > 0)
        {
            gePriceLabel.setText(QuantityFormatter.formatNumber(item.getGePrice()) + " gp");
        }
        else
        {
            gePriceLabel.setText("N/A");
        }
        gePriceLabel.setForeground(ColorScheme.GRAND_EXCHANGE_PRICE);
        rightPanel.add(gePriceLabel);

        // Purchase Progress
        JLabel progressLabel = new JLabel();
        percent = ((float) plugin.getValue() / item.getGePrice()) * 100;
        if (percent >= 100)
        {
            percent = 100;
        }
        if (!config.onlyTrackFirstItem() || itemIndex == 0)
        {
            progressLabel.setText(String.format("%.0f", percent) + "%");
            rightPanel.add(progressLabel);
        }

        // Action Panel (Delete, Shift item)
        JPanel actionPanel = new JPanel(new BorderLayout());
        actionPanel.setBackground(new Color(0, 0, 0, 0));
        actionPanel.setOpaque(false);

        // Delete Item
        JLabel removeItem = new JLabel(REMOVE_ICON);
        removeItem.setBorder(new EmptyBorder(0, 15, 0, 0));
        removeItem.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mouseReleased(MouseEvent e)
            {
                if (removeConfirm())
                {
                    plugin.removeItemFromGroup(group, item);
                }
            }

            @Override
            public void mouseEntered(MouseEvent e)
            {
                removeItem.setIcon(REMOVE_HOVER_ICON);
            }

            @Override
            public void mouseExited(MouseEvent e)
            {
                removeItem.setIcon(REMOVE_ICON);
            }
        });
        actionPanel.add(removeItem, BorderLayout.NORTH);

        // Shift Item Panel
        JPanel shiftItemPanel = new JPanel(new BorderLayout());
        shiftItemPanel.setOpaque(false);

        // Shift item up
        JLabel shiftUp = new JLabel(SHIFT_UP_ICON);
        shiftUp.setBorder(new EmptyBorder(0, 0, 0, 5));

        if (itemIndex == 0)
        {
            shiftUp.setIcon(SHIFT_UP_HOVER_ICON);
        }

        shiftUp.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mouseReleased(MouseEvent e)
            {
                if (itemIndex != 0)
                {
                    plugin.shiftItemInGroup(group, itemIndex, true);
                }
            }

            @Override
            public void mouseEntered(MouseEvent e)
            {
                shiftUp.setIcon(SHIFT_UP_HOVER_ICON);
            }

            @Override
            public void mouseExited(MouseEvent e)
            {
                if (itemIndex != 0)
                {
                    shiftUp.setIcon(SHIFT_UP_ICON);
                }
            }
        });
        shiftItemPanel.add(shiftUp, BorderLayout.WEST);

        // Shift item down
        JLabel shiftDown = new JLabel(SHIFT_DOWN_ICON);
        shiftDown.setBorder(new EmptyBorder(0, 0, 0, 5));

        if (itemIndex == itemsSize - 1)
        {
            shiftDown.setIcon(SHIFT_DOWN_HOVER_ICON);
        }

        shiftDown.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mouseReleased(MouseEvent e)
            {
                if (itemIndex != itemsSize - 1)
                {
                    plugin.shiftItemInGroup(group, itemIndex, false);
                }
            }

            @Override
            public void mouseEntered(MouseEvent e)
            {
                shiftDown.setIcon(SHIFT_DOWN_HOVER_ICON);
            }

            @Override
            public void mouseExited(MouseEvent e)
            {
                if (itemIndex != itemsSize - 1)
                {
                    shiftDown.setIcon(SHIFT_DOWN_ICON);
                }
            }
        });
        shiftItemPanel.add(shiftDown, BorderLayout.EAST);

        actionPanel.add(shiftItemPanel, BorderLayout.SOUTH);

        add(rightPanel, BorderLayout.CENTER);
        add(actionPanel, BorderLayout.EAST);
    }

    private boolean removeConfirm()
    {
        int confirm = JOptionPane.showConfirmDialog(this,
                REMOVE_MESSAGE, REMOVE_TITLE, JOptionPane.YES_NO_OPTION);

        return confirm == JOptionPane.YES_NO_OPTION;
    }

    @Override
    protected void paintComponent(Graphics g)
    {
        int greenWidth = 0;
        g.setColor(new Color(12, 85, 35));
        if(!config.onlyTrackFirstItem() || itemIndex == 0)
        {
            greenWidth = (int) (this.getWidth() * percent / 100);
        }
        g.fillRect(0, 0, greenWidth, this.getHeight());

        if (greenWidth != this.getWidth())
        {
            g.setColor(ColorScheme.DARK_GRAY_COLOR);
            g.fillRect(greenWidth, 0, this.getWidth() - greenWidth, this.getHeight());
        }
    }
}

