package com.herblorerecipes;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Keybind;

@ConfigGroup("herblorerecipes")
public interface HerbloreRecipesConfig extends Config
{
	String MODIFIER_KEYBIND = "modifierKeybind";
	String USE_KEYBIND = "useKeybind";
	String SHOW_TOOLTIP_SEED_VAULT = "showTooltipSeedVault";
	String SHOW_TOOLTIP_GROUP_STORAGE = "showTooltipGroupStorage";
	String SHOW_TOOLTIP_INVENTORY = "showTooltipInInventory";
	String SHOW_TOOLTIP_ON_PLACEHOLDER = "showTooltipOnPlaceholder";
	String SHOW_TOOLTIP_IN_BANK = "showTooltipInBank";
	String SHOW_POTION_RECIPES = "showPotionRecipes";
	String SHOW_TOOLTIP_ON_PRIMARIES = "showTooltipOnPrimaries";
	String SHOW_TOOLTIP_ON_GRIMY = "showTooltipOnGrimy";
	String SHOW_TOOLTIP_ON_SECONDARIES = "showTooltipOnSecondaries";
	String SHOW_TOOLTIP_ON_UNFINISHED = "showTooltipOnUnfinished";
	String SHOW_TOOLTIP_ON_PRIMARY_SEEDS = "showTooltipOnPrimarySeeds";
	String SHOW_TOOLTIP_ON_COMPLEX = "showTooltipOnComplex";
	String SHOW_PRIMARY_INGS = "showPrimaryIngredientsInTooltip";
	String SHOW_SECONDARY_INGS = "showSecondaryIngredientsInTooltip";
	String SHOW_HERB_LVL_REQ = "showHerbloreLvlInTooltip";
	String SHOW_IMP_REPELLENT_INGS = "showImpRepellentIngs";

	@ConfigSection(
		name = "Tooltip Visibility",
		description = "Settings for tooltip Tooltip visibility",
		position = 0
	)
	String tooltipSection = "tooltip";

	@ConfigSection(
		name = "Interfaces",
		description = "Configure whether tooltip appears in these interfaces.",
		position = 1
	)
	String interfaceSection = "interface";

	@ConfigSection(
		name = "Tooltip Content",
		description = "Configure tooltip content",
		position = 2
	)
	String tooltipContentSection = "tooltipContent";

	@ConfigSection(
		name = "Keybind",
		description = "Define a custom hotkey to control the display of the Tooltip. Keybind changes are applied when focus is returned to the game.",
		position = 3
	)
	String keybindSection = "keybind";

	@ConfigItem(
		position = 0,
		keyName = SHOW_POTION_RECIPES,
		name = "Show Tooltip on Potions (Recipes)",
		section = tooltipSection,
		description = "Configure whether tooltips appear on potions - NOTE: Tooltips will still appear on potions that are bases for other potions e.g. Super attack potion for Divine super attack etc..."
	)
	default boolean showTooltipOnPotions()
	{
		return true;
	}

	@ConfigItem(
		position = 1,
		keyName = SHOW_TOOLTIP_ON_PRIMARIES,
		name = "Show Tooltip on Primaries",
		section = tooltipSection,
		description = "Toggle recipe tooltip on primary ingredients."
	)
	default boolean showTooltipOnPrimaries()
	{
		return true;
	}

	@ConfigItem(
		position = 2,
		keyName = SHOW_TOOLTIP_ON_COMPLEX,
		name = "Show Tooltip on Complex Bases",
		section = tooltipSection,
		description = "Toggle recipe tooltip on Complex potion bases e.g. Hovering over a Super combat potion will show a tooltip as it's a base for Divine super combat potion."
	)
	default boolean showTooltipOnComplex()
	{
		return true;
	}

	@ConfigItem(
		position = 3,
		keyName = SHOW_TOOLTIP_ON_GRIMY,
		name = "Show Tooltip on Grimy herbs",
		section = tooltipSection,
		description = "Whether or not tooltip should be displayed on Grimy herbs."
	)
	default boolean showTooltipOnGrimy()
	{
		return true;
	}

	@ConfigItem(
		position = 4,
		keyName = SHOW_TOOLTIP_ON_SECONDARIES,
		name = "Show Tooltip on Secondaries",
		section = tooltipSection,
		description = "Toggle recipe tooltip on secondary ingredients."
	)
	default boolean showTooltipOnSecondaries()
	{
		return true;
	}

	@ConfigItem(
		position = 5,
		keyName = SHOW_TOOLTIP_ON_UNFINISHED,
		name = "Show Tooltip on Unfinished Potions",
		section = tooltipSection,
		description = "Toggle recipe tooltip on unfinished potions."
	)
	default boolean showTooltipOnUnfinished()
	{
		return true;
	}

	@ConfigItem(
		position = 6,
		keyName = SHOW_TOOLTIP_ON_PRIMARY_SEEDS,
		name = "Show Tooltip on Primary (Herb) Seeds",
		section = tooltipSection,
		description = "Toggle recipe tooltip on primary/herb seeds."
	)
	default boolean showTooltipOnPrimarySeeds()
	{
		return true;
	}

	@ConfigItem(
		position = 1,
		keyName = SHOW_TOOLTIP_IN_BANK,
		name = "Show Tooltip in Bank",
		section = interfaceSection,
		description = "Configure whether the tooltip appears on herblore items in the bank"
	)
	default boolean showTooltipInBank()
	{
		return true;
	}

	@ConfigItem(
		position = 2,
		keyName = SHOW_TOOLTIP_ON_PLACEHOLDER,
		name = "Show Tooltip on Placeholders",
		section = interfaceSection,
		description = "Configure whether the tooltips appears on herblore items placeholders"
	)
	default boolean showTooltipOnPlaceholder()
	{
		return true;
	}

	@ConfigItem(
		position = 3,
		keyName = SHOW_TOOLTIP_INVENTORY,
		name = "Show Tooltip in Inventory",
		section = interfaceSection,
		description = "Configure whether the tooltip appears on herblore items in the inventory"
	)
	default boolean showTooltipInInv()
	{
		return true;
	}

	@ConfigItem(
		position = 4,
		keyName = SHOW_TOOLTIP_SEED_VAULT,
		name = "Show Tooltip in Seed Vault",
		section = interfaceSection,
		description = "Configure whether the tooltip appears on herblore items in the seed vault"
	)
	default boolean showTooltipInSeedVault()
	{
		return true;
	}

	@ConfigItem(
		position = 5,
		keyName = SHOW_TOOLTIP_GROUP_STORAGE,
		name = "Show Tooltip in Group Storage",
		section = interfaceSection,
		description = "Configure whether the tooltip appears on herblore items in group storage"
	)
	default boolean showTooltipInGroupStorage()
	{
		return true;
	}

	@ConfigItem(
		position = 1,
		keyName = SHOW_PRIMARY_INGS,
		name = "Show Primary ingredients",
		section = tooltipContentSection,
		description = "Configure whether tooltip shows primary ingredients"
	)
	default boolean showPrimariesInTooltip()
	{
		return true;
	}

	@ConfigItem(
		position = 2,
		keyName = SHOW_SECONDARY_INGS,
		name = "Show Secondary ingredients",
		section = tooltipContentSection,
		description = "Configure whether tooltip shows secondary ingredients"
	)
	default boolean showSecondariesInTooltip()
	{
		return true;
	}

	@ConfigItem(
		position = 3,
		keyName = SHOW_HERB_LVL_REQ,
		name = "Show Herblore lvl requirement",
		section = tooltipContentSection,
		description = "Configure whether tooltip shows herblore level requirement"
	)
	default boolean showHerbloreLvlInTooltip()
	{
		return true;
	}
	
	@ConfigItem(
		position = 4,
		keyName = SHOW_IMP_REPELLENT_INGS,
		name = "Show Imp Repellent ingredients",
		section = tooltipContentSection,
		description = "Configure whether Imp Repellent tooltip shows ALL ingredients"
	)
	default boolean showImpRepellentIngs()
	{
		return false;
	}


	@ConfigItem(
		position = 1,
		keyName = USE_KEYBIND,
		name = "Use Tooltip Keybind",
		section = keybindSection,
		description = "Configure whether to press a key to show Herblore tooltips."
	)
	default boolean useKeybind()
	{
		return false;
	}

	@ConfigItem(
		position = 2,
		keyName = MODIFIER_KEYBIND,
		name = "Show Tooltip Keybind",
		section = keybindSection,
		description = "Only show Tooltips when this Hotkey is pressed."
	)
	default Keybind modifierKey()
	{
		return Keybind.NOT_SET;
	}
}

package com.herblorerecipes;

import com.google.inject.Provides;
import static com.herblorerecipes.HerbloreRecipesConfig.SHOW_HERB_LVL_REQ;
import static com.herblorerecipes.HerbloreRecipesConfig.SHOW_IMP_REPELLENT_INGS;
import static com.herblorerecipes.HerbloreRecipesConfig.SHOW_POTION_RECIPES;
import static com.herblorerecipes.HerbloreRecipesConfig.SHOW_PRIMARY_INGS;
import static com.herblorerecipes.HerbloreRecipesConfig.SHOW_SECONDARY_INGS;
import static com.herblorerecipes.HerbloreRecipesConfig.SHOW_TOOLTIP_ON_COMPLEX;
import static com.herblorerecipes.HerbloreRecipesConfig.SHOW_TOOLTIP_ON_PRIMARIES;
import static com.herblorerecipes.HerbloreRecipesConfig.SHOW_TOOLTIP_ON_SECONDARIES;
import java.util.Objects;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@PluginDescriptor(
	name = "Herblore Recipes",
	description = "Hover over a herblore ingredient or potion in your inventory or bank to see which potions can be made with it or that potion's recipe",
	tags = {"recipes", "herblore", "herb"}
)
public class HerbloreRecipesPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private HerbloreRecipesConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private KeyManager keyManager;

	@Inject
	private HerbloreRecipesOverlay overlay;

	@Override
	protected void startUp() throws Exception
	{
		keyManager.registerKeyListener(overlay);
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		keyManager.unregisterKeyListener(overlay);
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (Objects.requireNonNull(gameStateChanged.getGameState()) == GameState.LOGGED_IN)
		{
			overlay.tooltipCache.preloadOnClientThread();
		}
	}

	@Provides
	HerbloreRecipesConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(HerbloreRecipesConfig.class);
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if ("herblorerecipes".equals(event.getGroup()) &&
			(event.getKey().equals(SHOW_PRIMARY_INGS) ||
				event.getKey().equals(SHOW_SECONDARY_INGS) ||
				event.getKey().equals(SHOW_HERB_LVL_REQ) ||
				event.getKey().equals(SHOW_POTION_RECIPES) ||
				event.getKey().equals(SHOW_TOOLTIP_ON_PRIMARIES) ||
				event.getKey().equals(SHOW_TOOLTIP_ON_SECONDARIES) ||
				event.getKey().equals(SHOW_TOOLTIP_ON_COMPLEX) ||
				event.getKey().equals(SHOW_IMP_REPELLENT_INGS)))
		{
			overlay.tooltipCache.reset();
		}
	}
}

package com.herblorerecipes.cache;

import com.google.common.base.Stopwatch;
import com.google.common.collect.ImmutableList;
import com.herblorerecipes.HerbloreRecipesConfig;
import com.herblorerecipes.model.Potion;
import com.herblorerecipes.model.Potions;
import com.herblorerecipes.model.TooltipBox;
import com.herblorerecipes.model.TooltipCategory;
import com.herblorerecipes.model.TooltipCategoryContent;
import com.herblorerecipes.model.TooltipStringBuilder;
import java.awt.Color;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ItemID;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.util.ColorUtil;

@Slf4j
public class TooltipCache
{

	private static final Color GREY = new Color(238, 238, 238);
	private static final Color LIME = new Color(0, 255, 0);
	private static final Color AQUA = new Color(0, 255, 255);
	private static final Color GOLD = new Color(255, 215, 0);
	private static final Color PINK = new Color(236, 128, 255);
	private static final Color PURPLE = new Color(181, 153, 255);
	private static final Color ORANGE = new Color(255, 140, 103);
	private static final Color TURQUOISE = new Color(112, 248, 208);
	private static final String TOOLTIP_PRIMARY_TEXT = colorWrap("Primary", LIME) + colorWrap(" for:", GREY);
	private static final String TOOLTIP_SECONDARY_TEXT = colorWrap("Secondary", AQUA) + colorWrap(" for:", GREY);
	private static final String TOOLTIP_UNF_TEXT = colorWrap("Unfinished", GOLD) + colorWrap(" for:", GREY);
	private static final String TOOLTIP_POTION_TEXT = colorWrap("Requirements", PINK) + colorWrap(" for %s:", GREY);
	private static final String TOOLTIP_BASE_TEXT = colorWrap("Base", PURPLE) + colorWrap(" for:", GREY);
	private static final String TOOLTIP_SEED_TEXT = colorWrap("Seed", ORANGE) + colorWrap(" for:", GREY);
	private static final String TOOLTIP_GRIMY_TEXT = colorWrap("Clean", TURQUOISE) + colorWrap(" for:", GREY);
	private final ItemManager itemManager;
	private final ClientThread clientThread;
	private final HerbloreRecipesConfig config;
	private final Map<Integer, Tooltip> tooltipCache = new HashMap<>();

	@Inject
	public TooltipCache(ItemManager itemManager, ClientThread clientThread, HerbloreRecipesConfig config)
	{
		this.itemManager = itemManager;
		this.clientThread = clientThread;
		this.config = config;
	}

	public void preloadOnClientThread()
	{
		clientThread.invoke(this::preLoadCache);
	}

	private void preLoadCache()
	{
		Set<Integer> allIds = Potions.allIds();

		Stopwatch timer = Stopwatch.createStarted();
		allIds.forEach(id -> {
			TooltipBox tooltip = new TooltipBox();

			// generate tooltip for potions
			// check if it's potion ID
			if (Potions.isPotion(id) && config.showTooltipOnPotions())
			{
				// get Potion instance
				Potion p = Potions.getPotion(id);
				// add Potion category
				tooltip.getCategories().add(tooltipCategory(ImmutableList.of(p), String.format(TOOLTIP_POTION_TEXT, colorWrap(p.getName(), AQUA))));
			}

			// generate tooltip content for primaries
			if (Potions.isPrimary(id) && config.showTooltipOnPrimaries())
			{
				// get Potions for this primary
				List<Potion> ps = Potions.getByPrimary(id);
				tooltip.getCategories().add(tooltipCategory(ps, TOOLTIP_PRIMARY_TEXT));
			}

			// generate tooltip content for secondaries
			if (Potions.isSecondary(id) && config.showTooltipOnSecondaries())
			{
				List<Potion> ps = Potions.getBySecondary(id);
				tooltip.getCategories().add(tooltipCategory(ps, TOOLTIP_SECONDARY_TEXT));
			}

			// generate tooltip content for complex bases
			if (Potions.isComplexBase(id) && config.showTooltipOnComplex())
			{
				List<Potion> ps = Potions.getByComplex(id);
				tooltip.getCategories().add(tooltipCategory(ps, TOOLTIP_BASE_TEXT));
			}

			// tooltip visibility on Seeds, Unfinisheds, and Grimy herbs can be determined at the render layer
			// generate tooltip content for seeds (basically same tooltip as primaries)
			if (Potions.isSeed(id))
			{
				List<Potion> ps = Potions.getBySeed(id);
				tooltip.getCategories().add(tooltipCategory(ps, TOOLTIP_SEED_TEXT));
			}

			// generate tooltip content for unfinished
			if (Potions.isUnfinished(id))
			{
				List<Potion> ps = Potions.getByUnfinished(id);
				tooltip.getCategories().add(tooltipCategory(ps, TOOLTIP_UNF_TEXT));
			}

			if (Potions.isGrimy(id))
			{
				// get Potions for this grimy
				List<Potion> ps = Potions.getByGrimy(id);
				tooltip.getCategories().add(tooltipCategory(ps, TOOLTIP_GRIMY_TEXT));
			}

			if (!tooltip.isEmpty())
			{
				// put actual item in map
				this.tooltipCache.put(id, buildTooltip(tooltip));
			}
		});
		long nanos = timer.stop().elapsed().toNanos();
		log.debug("Tooltip cache was loaded in {}ms.", nanos / 1000000.0);
	}

	public boolean contains(int id)
	{
		return this.tooltipCache.containsKey(id);
	}

	public Tooltip get(int id)
	{
		return this.tooltipCache.get(id);
	}

	private static String colorWrap(String text, Color color)
	{
		return ColorUtil.wrapWithColorTag(text, color);
	}

	private String itemName(int itemId)
	{
		return itemManager.getItemComposition(itemId).getName();
	}

	private String itemNames(Collection<Integer> items)
	{
		return items.stream()
			.map(this::itemName)
			.collect(Collectors.joining(", "));
	}

	private TooltipCategory tooltipCategory(List<Potion> potions, String title)
	{
		TooltipCategory category = new TooltipCategory();
		category.setTitle(title);

		potions.forEach(p -> {
			TooltipCategoryContent content = new TooltipCategoryContent();
			// prepare potion
			content.setPotion(p.getName());
			// prepare level line
			content.setLevel(String.valueOf(p.getLevel()));
			// prepare primary ingredient line
			if (p.getPrimary() > 0)
			{
				content.setPrimary(itemName(p.getPrimary()));
			}
			// prepare potion base line
			if (p.hasComplexBase())
			{
				// potion has complex base
				content.setBase(p.complexBaseNames());
			}
			else
			{
				// potion necessarily has basic base
				content.setBase(itemName(p.getBasicBase()));
			}
			// prepare secondary ingredient(s) line
			if (p.getSecondaries() != null)
			{
				// there are secondaries to consider
				content.setSecondary(itemNames(p.getSecondaries()));
				// consider imp repellent bc there are so many secondaries
				if (p.getIds().contains(ItemID.IMP_REPELLENT))
				{
					if (!config.showImpRepellentIngs())
					{
						// only show this simple string for now...
						content.setSecondary("Various flowers...");
					}
				}
			}

			category.getContent().add(content);
		});

		return category;
	}

	private Tooltip buildTooltip(TooltipBox tooltip)
	{
		TooltipStringBuilder builder = new TooltipStringBuilder();
		tooltip.getCategories().forEach(category -> {
			builder.appendln(category.getTitle());
			category.getContent()
				.forEach(content ->
				{
					// check if level config is enabled
					if (config.showHerbloreLvlInTooltip())
					{
						builder.append(String.format("lvl %s: ", content.getLevel()));
					}

					// always append potion name
					builder.append(content.getPotion());

					// check if 1st ingredients OR 2nd config ingredients are enabled
					if (config.showPrimariesInTooltip() || config.showSecondariesInTooltip())
					{
						// if 1st ingredients are enabled, build primary String
						String primary = "";
						if (config.showPrimariesInTooltip())
						{
							primary = content.getPrimary();
						}
						// if 2nd ingredients are enabled, build secondary string
						String secondary = "";
						if (config.showSecondariesInTooltip())
						{
							secondary = content.getSecondary();

						}
						String combined = "";
						// if primary is empty, then combined is only secondary
						if (primary.isEmpty() && !secondary.isEmpty())
						{
							combined = "2nd: " + secondary;
						}
						// if secondary is empty, then combined is only primary
						if (secondary.isEmpty() && !primary.isEmpty())
						{
							combined = "1st: " + primary;
						}
						// if primary and secondary aren't empty, concat them with a comma
						if (!primary.isEmpty() && !secondary.isEmpty())
						{
							combined = "1st: " + primary + " - 2nd: " + secondary;
						}
						String ingredients = "%s";
						// if primary or secondary are not empty, build parenthesis
						if (!primary.isEmpty() || !secondary.isEmpty())
						{
							ingredients = " (%s)";
						}
						builder.append(String.format(ingredients, combined));
					}
					// append </br> line break
					builder.appendln("");
				});
		});
		return new Tooltip(builder.toString());
	}

	private void invalidate()
	{
		this.tooltipCache.clear();
	}

	public void reset()
	{
		invalidate();
		preloadOnClientThread();
	}
}

package com.herblorerecipes;

import com.herblorerecipes.cache.TooltipCache;
import com.herblorerecipes.model.Potions;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.WidgetUtil;
import net.runelite.client.config.Keybind;
import net.runelite.client.game.ItemManager;
import net.runelite.client.input.KeyListener;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;
import org.apache.commons.lang3.StringUtils;

public class HerbloreRecipesOverlay extends Overlay implements KeyListener
{

	private static final int INVENTORY_ITEM_WIDGETID = ComponentID.INVENTORY_CONTAINER;
	private static final int BANK_ITEM_WIDGETID = ComponentID.BANK_ITEM_CONTAINER;
	private static final int BANKED_INVENTORY_ITEM_WIDGETID = ComponentID.BANK_INVENTORY_ITEM_CONTAINER;
	private static final int SEED_VAULT_INVENTORY_WIDGETID = ComponentID.SEED_VAULT_INVENTORY_ITEM_CONTAINER;
	private static final int SEED_VAULT_WIDGETID = ComponentID.SEED_VAULT_ITEM_CONTAINER;
	private static final int GROUP_STORAGE_ITEM_WIDGETID = ComponentID.GROUP_STORAGE_ITEM_CONTAINER;
	public final TooltipCache tooltipCache;
	private final Client client;
	private final TooltipManager tooltipManager;
	private final HerbloreRecipesConfig config;
	private final ItemManager itemManager;

	private boolean boundKeyPressed;

	@Inject
	HerbloreRecipesOverlay(Client client, TooltipManager tooltipManager, HerbloreRecipesConfig config, TooltipCache tooltipCache, ItemManager itemManager)
	{
		setPosition(OverlayPosition.DYNAMIC);
		this.client = client;
		this.tooltipManager = tooltipManager;
		this.config = config;
		this.tooltipCache = tooltipCache;
		this.itemManager = itemManager;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (client.isMenuOpen())
		{
			return null;
		}

		if (!config.showTooltipOnPrimaries() && !config.showTooltipOnSecondaries() &&
			!config.showTooltipOnPotions() && !config.showTooltipOnUnfinished() &&
			!config.showTooltipOnPrimarySeeds() && !config.showTooltipOnGrimy() &&
			!config.showTooltipOnComplex())
		{
			// plugin is effectively disabled
			return null;
		}

		// check if user wants to use keybind
		if (config.useKeybind())
		{
			// user does want to use keybind
			// check if modifier key is set
			if (config.modifierKey().getKeyCode() == Keybind.NOT_SET.getKeyCode())
			{
				// check modifiers because of ALT/SHIFT/CTRL
				// if modifiers are 0, then return null because Keybind is truly not set.
				// refer to this code in runelite's Keybind.java:
				// 	public static final Keybind CTRL = new Keybind(KeyEvent.VK_UNDEFINED, InputEvent.CTRL_DOWN_MASK);
				//	public static final Keybind ALT = new Keybind(KeyEvent.VK_UNDEFINED, InputEvent.ALT_DOWN_MASK);
				//	public static final Keybind SHIFT = new Keybind(KeyEvent.VK_UNDEFINED, InputEvent.SHIFT_DOWN_MASK);
				if (config.modifierKey().getModifiers() == 0)
				{
					// if keybind isn't set, don't render tooltip
					return null;
				}
			}

			// if here, keybind is set, ensure it's pressed
			// if it isn't pressed, return null
			if (!boundKeyPressed)
			{
				return null;
			}
		}

		final MenuEntry[] menuEntries = client.getMenuEntries();
		final int last = menuEntries.length - 1;

		if (last < 0)
		{
			return null;
		}
		final MenuEntry menuEntry = menuEntries[last];

		if (StringUtils.isEmpty(menuEntry.getTarget()) ||
			menuEntry.getOption().contains("View") ||
			menuEntry.getParam0() < 0)
		{
			// These are interface buttons, don't render the overlay.
			return null;
		}

		final MenuAction action = menuEntry.getType();
		final int widgetId = menuEntry.getParam1();
		final int groupId = WidgetUtil.componentToInterface(widgetId);

		switch (action)
		{
			case WIDGET_TARGET_ON_WIDGET:
			case WIDGET_TARGET:
			case CC_OP:
			case ITEM_USE:
			case ITEM_FIRST_OPTION:
			case ITEM_SECOND_OPTION:
			case ITEM_THIRD_OPTION:
			case ITEM_FOURTH_OPTION:
			case CC_OP_LOW_PRIORITY:
			case ITEM_FIFTH_OPTION:
				switch (groupId)
				{
					case InterfaceID.GROUP_STORAGE_INVENTORY:
					case InterfaceID.GROUP_IRON:
					case InterfaceID.GROUP_STORAGE:
						if (!config.showTooltipInGroupStorage())
						{
							return null;
						}
						showTooltip(widgetId, menuEntry);
						break;

					case InterfaceID.SEED_VAULT_INVENTORY:
					case InterfaceID.SEED_VAULT:
						if (!config.showTooltipInSeedVault())
						{
							return null;
						}
						showTooltip(widgetId, menuEntry);
						break;

					case InterfaceID.BANK_INVENTORY:
					case InterfaceID.INVENTORY:
						if (!config.showTooltipInInv())
						{
							return null;
						}
						showTooltip(widgetId, menuEntry);
						break;

					case InterfaceID.BANK:
						if (!config.showTooltipOnPlaceholder() && action == MenuAction.CC_OP_LOW_PRIORITY)
						{
							// item is bank placeholder - return null
							return null;
						}
						if (!config.showTooltipInBank())
						{
							return null;
						}

						showTooltip(widgetId, menuEntry);
						break;
				}
		}
		return null;
	}

	private void showTooltip(int widgetId, MenuEntry menuEntry)
	{
		int itemId = getItemIdFromWidgetId(widgetId, menuEntry);

		if (Potions.isSeed(itemId) && !config.showTooltipOnPrimarySeeds())
		{
			return;
		}

		if (Potions.isUnfinished(itemId) && !config.showTooltipOnUnfinished())
		{
			return;
		}

		if (Potions.isGrimy(itemId) && !config.showTooltipOnGrimy())
		{
			return;
		}

		showTooltip(itemId);
	}

	private int getItemIdFromWidgetId(int widgetId, MenuEntry menuEntry)
	{
		ItemContainer container = getContainer(widgetId);
		if (container == null)
		{
			return -1;
		}


		Item item = container.getItem(menuEntry.getParam0());
		if (item == null)
		{
			return -1;
		}

		return itemManager.canonicalize(item.getId());
	}

	private void showTooltip(int itemId)
	{
		if (tooltipCache.contains(itemId))
		{
			tooltipManager.add(tooltipCache.get(itemId));
		}
	}

	private ItemContainer getContainer(int widgetId)
	{
		if (widgetId == INVENTORY_ITEM_WIDGETID || widgetId == BANKED_INVENTORY_ITEM_WIDGETID || widgetId == SEED_VAULT_INVENTORY_WIDGETID)
		{
			return client.getItemContainer(InventoryID.INVENTORY);
		}
		else if (widgetId == BANK_ITEM_WIDGETID)
		{
			return client.getItemContainer(InventoryID.BANK);
		}
		else if (widgetId == SEED_VAULT_WIDGETID)
		{
			return client.getItemContainer(InventoryID.SEED_VAULT);
		}
		else if (widgetId == GROUP_STORAGE_ITEM_WIDGETID)
		{
			return client.getItemContainer(InventoryID.GROUP_STORAGE);
		}
		return null;
	}

	@Override
	public void keyTyped(KeyEvent e)
	{
	}

	@Override
	public void keyPressed(KeyEvent e)
	{
		if (config.useKeybind() && config.modifierKey().matches(e))
		{
			boundKeyPressed = true;
		}
	}

	@Override
	public void keyReleased(KeyEvent e)
	{
		if (config.useKeybind() && config.modifierKey().matches(e))
		{
			boundKeyPressed = false;
		}
	}
}

package com.herblorerecipes.model;

import java.util.ArrayList;
import java.util.List;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class TooltipBox
{

	private List<TooltipCategory> categories;

	public TooltipBox()
	{
		categories = new ArrayList<>();
	}

	public boolean isEmpty()
	{
		return categories.isEmpty();
	}
}

package com.herblorerecipes.model;

public class TooltipStringBuilder
{

	private final StringBuilder builder;

	public TooltipStringBuilder()
	{
		this.builder = new StringBuilder();
	}

	public void appendln(String s)
	{
		this.builder.append(s).append("</br>");
	}

	public void append(String s)
	{
		this.builder.append(s);
	}

	@Override
	public String toString()
	{
		return this.builder.toString();
	}
}

package com.herblorerecipes.model;

import java.util.ArrayList;
import java.util.List;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class TooltipCategory
{

	private String title;
	private List<TooltipCategoryContent> content;

	public TooltipCategory()
	{
		this.content = new ArrayList<>();
	}
}

package com.herblorerecipes.model;

import java.util.Set;
import java.util.stream.Collectors;
import lombok.Builder;
import lombok.Getter;
import lombok.ToString;

@Builder
@Getter
@ToString
public class Potion
{

	private int level;
	private String name;
	private int basicBase;
	private Set<Potion> complexBase;
	private int unfinishedPotion;
	private int primary;
	private int primaryAlt;
	private int primarySeed;
	private int grimyHerb;
	private Set<Integer> secondaries;
	private Set<Integer> secondariesAlt;
	private Set<Integer> ids;

	public boolean hasComplexBase()
	{
		return complexBase != null;
	}

	public String complexBaseNames()
	{
		return complexBase.stream().map(Potion::getName).collect(Collectors.joining(", "));
	}
}

package com.herblorerecipes.model;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class TooltipCategoryContent
{

	private String potion;
	private String level;
	private String primary;
	private String secondary;
	private String base;

	public TooltipCategoryContent()
	{
		potion = "";
		level = "";
		primary = "";
		secondary = "";
		base = "";
	}
}

package com.herblorerecipes.model;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import net.runelite.api.ItemID;

public enum Potions
{

	// BASIC POTIONS
	// Special case - only potion with many primary ingredients - using secondaryIngredients to support this.
	IMP_REPELLENT(Potion.builder()
		.level(3)
		.name("Imp repellent")
		.basicBase(ItemID.ANCHOVY_OIL)
		.secondaries(ImmutableSet.of(ItemID.MARIGOLDS, ItemID.ROSEMARY, ItemID.NASTURTIUMS, ItemID.ASSORTED_FLOWERS,
			ItemID.RED_FLOWERS, ItemID.BLUE_FLOWERS, ItemID.YELLOW_FLOWERS, ItemID.PURPLE_FLOWERS,
			ItemID.ORANGE_FLOWERS, ItemID.MIXED_FLOWERS, ItemID.BLACK_FLOWERS, ItemID.WHITE_FLOWERS))
		.ids(ImmutableSet.of(ItemID.IMP_REPELLENT))
		.build()),

	ATTACK_POTION(Potion.builder()
		.level(3)
		.name("Attack potion")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.GUAM_LEAF)
		.grimyHerb(ItemID.GRIMY_GUAM_LEAF)
		.primarySeed(ItemID.GUAM_SEED)
		.secondaries(ImmutableSet.of(ItemID.EYE_OF_NEWT))
		.unfinishedPotion(ItemID.GUAM_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.ATTACK_POTION1, ItemID.ATTACK_POTION2, ItemID.ATTACK_POTION3, ItemID.ATTACK_POTION4))
		.build()),

	ANTIPOISON(Potion.builder()
		.level(5)
		.name("Antipoison")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.MARRENTILL)
		.grimyHerb(ItemID.GRIMY_MARRENTILL)
		.primarySeed(ItemID.MARRENTILL_SEED)
		.secondaries(ImmutableSet.of(ItemID.UNICORN_HORN_DUST))
		.secondariesAlt(ImmutableSet.of(ItemID.UNICORN_HORN))
		.unfinishedPotion(ItemID.MARRENTILL_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.ANTIPOISON1, ItemID.ANTIPOISON2, ItemID.ANTIPOISON3, ItemID.ANTIPOISON4))
		.build()),

	RELICYMS_BALM(Potion.builder()
		.level(8)
		.name("Relicym's balm")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.ROGUES_PURSE)
		.grimyHerb(ItemID.GRIMY_ROGUES_PURSE)
		.secondaries(ImmutableSet.of(ItemID.SNAKE_WEED))
		.secondariesAlt(ImmutableSet.of(ItemID.GRIMY_SNAKE_WEED))
		.unfinishedPotion(ItemID.UNFINISHED_POTION_4840)
		.ids(ImmutableSet.of(ItemID.RELICYMS_BALM1, ItemID.RELICYMS_BALM2, ItemID.RELICYMS_BALM3, ItemID.RELICYMS_BALM4))
		.build()),

	STRENGTH_POTION(Potion.builder()
		.level(12)
		.name("Strength potion")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.TARROMIN)
		.grimyHerb(ItemID.GRIMY_TARROMIN)
		.primarySeed(ItemID.TARROMIN_SEED)
		.secondaries(ImmutableSet.of(ItemID.LIMPWURT_ROOT))
		.secondariesAlt(ImmutableSet.of(ItemID.LIMPWURT_SEED))
		.unfinishedPotion(ItemID.TARROMIN_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.STRENGTH_POTION1, ItemID.STRENGTH_POTION2, ItemID.STRENGTH_POTION3, ItemID.STRENGTH_POTION4))
		.build()),

	SERUM_207(Potion.builder()
		.level(15)
		.name("Serum 207")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.TARROMIN)
		.grimyHerb(ItemID.GRIMY_TARROMIN)
		.primarySeed(ItemID.TARROMIN_SEED)
		.secondaries(ImmutableSet.of(ItemID.ASHES))
		.unfinishedPotion(ItemID.TARROMIN_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.SERUM_207_1, ItemID.SERUM_207_2, ItemID.SERUM_207_3, ItemID.SERUM_207_4))
		.build()),

	GUTHIX_REST_TEA(Potion.builder()
		.level(18)
		.name("Guthix rest tea")
		.basicBase(ItemID.CUP_OF_HOT_WATER)
		.primary(ItemID.HARRALANDER)
		.grimyHerb(ItemID.GRIMY_HARRALANDER)
		.primarySeed(ItemID.HARRALANDER_SEED)
		.secondaries(ImmutableSet.of(ItemID.GUAM_LEAF, ItemID.MARRENTILL))
		.secondariesAlt(ImmutableSet.of(ItemID.GRIMY_GUAM_LEAF, ItemID.GRIMY_MARRENTILL))
		.unfinishedPotion(ItemID.HARRALANDER_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.GUTHIX_REST1, ItemID.GUTHIX_REST2, ItemID.GUTHIX_REST3, ItemID.GUTHIX_REST4))
		.build()),

	COMPOST_POTION(Potion.builder()
		.level(22)
		.name("Compost potion")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.HARRALANDER)
		.grimyHerb(ItemID.GRIMY_HARRALANDER)
		.primarySeed(ItemID.HARRALANDER_SEED)
		.secondaries(ImmutableSet.of(ItemID.VOLCANIC_ASH))
		.unfinishedPotion(ItemID.HARRALANDER_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.COMPOST_POTION1, ItemID.COMPOST_POTION2, ItemID.COMPOST_POTION3, ItemID.COMPOST_POTION4))
		.build()),

	RESTORE_POTION(Potion.builder()
		.level(22)
		.name("Restore potion")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.HARRALANDER)
		.grimyHerb(ItemID.GRIMY_HARRALANDER)
		.primarySeed(ItemID.HARRALANDER_SEED)
		.secondaries(ImmutableSet.of(ItemID.RED_SPIDERS_EGGS))
		.unfinishedPotion(ItemID.HARRALANDER_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.RESTORE_POTION1, ItemID.RESTORE_POTION2, ItemID.RESTORE_POTION3, ItemID.RESTORE_POTION4))
		.build()),

	BLAMISH_OIL(Potion.builder()
		.level(25)
		.name("Blamish oil")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.HARRALANDER)
		.grimyHerb(ItemID.GRIMY_HARRALANDER)
		.primarySeed(ItemID.HARRALANDER_SEED)
		.secondaries(ImmutableSet.of(ItemID.BLAMISH_SNAIL_SLIME))
		.unfinishedPotion(ItemID.HARRALANDER_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.BLAMISH_OIL))
		.build()),

	ENERGY_POTION(Potion.builder()
		.level(26)
		.name("Energy potion")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.HARRALANDER)
		.grimyHerb(ItemID.GRIMY_HARRALANDER)
		.primarySeed(ItemID.HARRALANDER_SEED)
		.secondaries(ImmutableSet.of(ItemID.CHOCOLATE_DUST))
		.secondariesAlt(ImmutableSet.of(ItemID.CHOCOLATE_BAR))
		.unfinishedPotion(ItemID.HARRALANDER_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.ENERGY_POTION1, ItemID.ENERGY_POTION2, ItemID.ENERGY_POTION3, ItemID.ENERGY_POTION4))
		.build()),

	DEFENCE_POTION(Potion.builder()
		.level(30)
		.name("Defence potion")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.RANARR_WEED)
		.grimyHerb(ItemID.GRIMY_RANARR_WEED)
		.primarySeed(ItemID.RANARR_SEED)
		.secondaries(ImmutableSet.of(ItemID.WHITE_BERRIES))
		.unfinishedPotion(ItemID.RANARR_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.DEFENCE_POTION1, ItemID.DEFENCE_POTION2, ItemID.DEFENCE_POTION3, ItemID.DEFENCE_POTION4))
		.build()),

	AGILITY_POTION(Potion.builder()
		.level(34)
		.name("Agility potion")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.TOADFLAX)
		.grimyHerb(ItemID.GRIMY_TOADFLAX)
		.primarySeed(ItemID.TOADFLAX_SEED)
		.secondaries(ImmutableSet.of(ItemID.TOADS_LEGS))
		.unfinishedPotion(ItemID.TOADFLAX_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.AGILITY_POTION1, ItemID.AGILITY_POTION2, ItemID.AGILITY_POTION3, ItemID.AGILITY_POTION4))
		.build()),

	COMBAT_POTION(Potion.builder()
		.level(36)
		.name("Combat potion")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.HARRALANDER)
		.grimyHerb(ItemID.GRIMY_HARRALANDER)
		.primarySeed(ItemID.HARRALANDER_SEED)
		.secondaries(ImmutableSet.of(ItemID.GOAT_HORN_DUST))
		.secondariesAlt(ImmutableSet.of(ItemID.DESERT_GOAT_HORN))
		.unfinishedPotion(ItemID.HARRALANDER_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.COMBAT_POTION1, ItemID.COMBAT_POTION2, ItemID.COMBAT_POTION3, ItemID.COMBAT_POTION4))
		.build()),

	PRAYER_POTION(Potion.builder()
		.level(38)
		.name("Prayer potion")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.RANARR_WEED)
		.grimyHerb(ItemID.GRIMY_RANARR_WEED)
		.primarySeed(ItemID.RANARR_SEED)
		.secondaries(ImmutableSet.of(ItemID.SNAPE_GRASS))
		.secondariesAlt(ImmutableSet.of(ItemID.SNAPE_GRASS_SEED))
		.unfinishedPotion(ItemID.RANARR_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.PRAYER_POTION1, ItemID.PRAYER_POTION2, ItemID.PRAYER_POTION3, ItemID.PRAYER_POTION4))
		.build()),

	SUPER_ATTACK(Potion.builder()
		.level(45)
		.name("Super attack")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.IRIT_LEAF)
		.grimyHerb(ItemID.GRIMY_IRIT_LEAF)
		.primarySeed(ItemID.IRIT_SEED)
		.secondaries(ImmutableSet.of(ItemID.EYE_OF_NEWT))
		.unfinishedPotion(ItemID.IRIT_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.SUPER_ATTACK1, ItemID.SUPER_ATTACK2, ItemID.SUPER_ATTACK3, ItemID.SUPER_ATTACK4))
		.build()),

	GOBLIN_POTION(Potion.builder()
		.level(47)
		.name("Goblin potion")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.TOADFLAX)
		.grimyHerb(ItemID.GRIMY_TOADFLAX)
		.primarySeed(ItemID.TOADFLAX_SEED)
		.secondaries(ImmutableSet.of(ItemID.PHARMAKOS_BERRIES))
		.unfinishedPotion(ItemID.TOADFLAX_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.GOBLIN_POTION1, ItemID.GOBLIN_POTION2, ItemID.GOBLIN_POTION3, ItemID.GOBLIN_POTION4))
		.build()),

	SUPERANTIPOISON(Potion.builder()
		.level(48)
		.name("Superantipoison")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.IRIT_LEAF)
		.grimyHerb(ItemID.GRIMY_IRIT_LEAF)
		.primarySeed(ItemID.IRIT_SEED)
		.secondaries(ImmutableSet.of(ItemID.UNICORN_HORN_DUST))
		.secondariesAlt(ImmutableSet.of(ItemID.UNICORN_HORN))
		.unfinishedPotion(ItemID.IRIT_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.SUPERANTIPOISON1, ItemID.SUPERANTIPOISON2, ItemID.SUPERANTIPOISON3, ItemID.SUPERANTIPOISON4))
		.build()),

	FISHING_POTION(Potion.builder()
		.level(50)
		.name("Fishing potion")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.AVANTOE)
		.grimyHerb(ItemID.GRIMY_AVANTOE)
		.primarySeed(ItemID.AVANTOE_SEED)
		.secondaries(ImmutableSet.of(ItemID.SNAPE_GRASS))
		.secondariesAlt(ImmutableSet.of(ItemID.SNAPE_GRASS_SEED))
		.unfinishedPotion(ItemID.AVANTOE_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.FISHING_POTION1, ItemID.FISHING_POTION2, ItemID.FISHING_POTION3, ItemID.FISHING_POTION4))
		.build()),

	SUPER_ENERGY(Potion.builder()
		.level(52)
		.name("Super energy")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.AVANTOE)
		.grimyHerb(ItemID.GRIMY_AVANTOE)
		.primarySeed(ItemID.AVANTOE_SEED)
		.secondaries(ImmutableSet.of(ItemID.MORT_MYRE_FUNGUS))
		.unfinishedPotion(ItemID.AVANTOE_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.SUPER_ENERGY1, ItemID.SUPER_ENERGY2, ItemID.SUPER_ENERGY3, ItemID.SUPER_ENERGY4))
		.build()),

	SHRINK_ME_QUICK(Potion.builder()
		.level(52)
		.name("Shrink-me-quick")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.TARROMIN)
		.grimyHerb(ItemID.GRIMY_TARROMIN)
		.primarySeed(ItemID.TARROMIN_SEED)
		.secondaries(ImmutableSet.of(ItemID.SHRUNK_OGLEROOT))
		.unfinishedPotion(ItemID.TARROMIN_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.SHRINKMEQUICK))
		.build()),

	HUNTER_POTION(Potion.builder()
		.level(53)
		.name("Hunter potion")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.AVANTOE)
		.grimyHerb(ItemID.GRIMY_AVANTOE)
		.primarySeed(ItemID.AVANTOE_SEED)
		.secondaries(ImmutableSet.of(ItemID.KEBBIT_TEETH_DUST))
		.secondariesAlt(ImmutableSet.of(ItemID.KEBBIT_TEETH))
		.unfinishedPotion(ItemID.AVANTOE_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.HUNTER_POTION1, ItemID.HUNTER_POTION2, ItemID.HUNTER_POTION3, ItemID.HUNTER_POTION4))
		.build()),

	GOADING_POTION(Potion.builder()
		.level(54)
		.name("Goading potion")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.HARRALANDER)
		.grimyHerb(ItemID.GRIMY_HARRALANDER)
		.primarySeed(ItemID.HARRALANDER_SEED)
		.secondaries(ImmutableSet.of(ItemID.ALDARIUM))
		.unfinishedPotion(ItemID.HARRALANDER_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.GOADING_POTION1, ItemID.GOADING_POTION2, ItemID.GOADING_POTION3, ItemID.GOADING_POTION4))
		.build()),

	SUPER_STRENGTH(Potion.builder()
		.level(55)
		.name("Super strength")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.KWUARM)
		.grimyHerb(ItemID.GRIMY_KWUARM)
		.primarySeed(ItemID.KWUARM_SEED)
		.secondaries(ImmutableSet.of(ItemID.LIMPWURT_ROOT))
		.secondariesAlt(ImmutableSet.of(ItemID.LIMPWURT_SEED))
		.unfinishedPotion(ItemID.KWUARM_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.SUPER_STRENGTH1, ItemID.SUPER_STRENGTH2, ItemID.SUPER_STRENGTH3, ItemID.SUPER_STRENGTH4))
		.build()),

	MAGIC_ESSENCE(Potion.builder()
		.level(57)
		.name("Magic essence")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.STAR_FLOWER)
		.secondaries(ImmutableSet.of(ItemID.GORAK_CLAW_POWDER))
		.secondariesAlt(ImmutableSet.of(ItemID.GORAK_CLAWS))
		.unfinishedPotion(ItemID.MAGIC_ESSENCE_UNF)
		.ids(ImmutableSet.of(ItemID.MAGIC_ESSENCE1, ItemID.MAGIC_ESSENCE2, ItemID.MAGIC_ESSENCE3, ItemID.MAGIC_ESSENCE4))
		.build()),

	PRAYER_REGENERATION_POTION(Potion.builder()
		.level(58)
		.name("Prayer regeneration potion")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.HUASCA)
		.grimyHerb(ItemID.GRIMY_HUASCA)
		.primarySeed(ItemID.HUASCA_SEED)
		.secondaries(ImmutableSet.of(ItemID.ALDARIUM))
		.unfinishedPotion(ItemID.HUASCA_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.PRAYER_REGENERATION_POTION1, ItemID.PRAYER_REGENERATION_POTION2, ItemID.PRAYER_REGENERATION_POTION3, ItemID.PRAYER_REGENERATION_POTION4))
		.build()),

	WEAPON_POISON(Potion.builder()
		.level(60)
		.name("Weapon poison")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.KWUARM)
		.grimyHerb(ItemID.GRIMY_KWUARM)
		.primarySeed(ItemID.KWUARM_SEED)
		.secondaries(ImmutableSet.of(ItemID.DRAGON_SCALE_DUST))
		.secondariesAlt(ImmutableSet.of(ItemID.BLUE_DRAGON_SCALE))
		.unfinishedPotion(ItemID.KWUARM_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.WEAPON_POISON))
		.build()),

	SUPER_RESTORE(Potion.builder()
		.level(63)
		.name("Super restore")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.SNAPDRAGON)
		.grimyHerb(ItemID.GRIMY_SNAPDRAGON)
		.primarySeed(ItemID.SNAPDRAGON_SEED)
		.secondaries(ImmutableSet.of(ItemID.RED_SPIDERS_EGGS))
		.unfinishedPotion(ItemID.SNAPDRAGON_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.SUPER_RESTORE1, ItemID.SUPER_RESTORE2, ItemID.SUPER_RESTORE3, ItemID.SUPER_RESTORE4))
		.build()),

	SUPER_DEFENCE(Potion.builder()
		.level(66)
		.name("Super defence")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.CADANTINE)
		.grimyHerb(ItemID.GRIMY_CADANTINE)
		.primarySeed(ItemID.CADANTINE_SEED)
		.secondaries(ImmutableSet.of(ItemID.WHITE_BERRIES))
		.unfinishedPotion(ItemID.CADANTINE_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.SUPER_DEFENCE1, ItemID.SUPER_DEFENCE2, ItemID.SUPER_DEFENCE3, ItemID.SUPER_DEFENCE4))
		.build()),

	ANTIDOTE_PLUS(Potion.builder()
		.level(68)
		.name("Antidote+")
		.basicBase(ItemID.COCONUT_MILK)
		.primary(ItemID.TOADFLAX)
		.grimyHerb(ItemID.GRIMY_TOADFLAX)
		.primarySeed(ItemID.TOADFLAX_SEED)
		.secondaries(ImmutableSet.of(ItemID.YEW_ROOTS))
		.unfinishedPotion(ItemID.TOADFLAX_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.ANTIDOTE1, ItemID.ANTIDOTE2, ItemID.ANTIDOTE3, ItemID.ANTIDOTE4))
		.build()),

	ANTIFIRE_POTION(Potion.builder()
		.level(69)
		.name("Antifire potion")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.LANTADYME)
		.grimyHerb(ItemID.GRIMY_LANTADYME)
		.primarySeed(ItemID.LANTADYME_SEED)
		.secondaries(ImmutableSet.of(ItemID.DRAGON_SCALE_DUST))
		.secondariesAlt(ImmutableSet.of(ItemID.BLUE_DRAGON_SCALE))
		.unfinishedPotion(ItemID.LANTADYME_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.ANTIFIRE_POTION1, ItemID.ANTIFIRE_POTION2, ItemID.ANTIFIRE_POTION3, ItemID.ANTIFIRE_POTION4))
		.build()),

	RANGING_POTION(Potion.builder()
		.level(72)
		.name("Ranging potion")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.DWARF_WEED)
		.grimyHerb(ItemID.GRIMY_DWARF_WEED)
		.primarySeed(ItemID.DWARF_WEED_SEED)
		.secondaries(ImmutableSet.of(ItemID.WINE_OF_ZAMORAK))
		.unfinishedPotion(ItemID.DWARF_WEED_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.RANGING_POTION1, ItemID.RANGING_POTION2, ItemID.RANGING_POTION3, ItemID.RANGING_POTION4))
		.build()),

	WEAPON_POISON_PLUS(Potion.builder()
		.level(73)
		.name("Weapon poison+")
		.basicBase(ItemID.COCONUT_MILK)
		.primary(ItemID.CACTUS_SPINE)
		.secondaries(ImmutableSet.of(ItemID.RED_SPIDERS_EGGS))
		.unfinishedPotion(ItemID.WEAPON_POISON_UNF)
		.ids(ImmutableSet.of(ItemID.WEAPON_POISON_5937))
		.build()),

	MAGIC_POTION(Potion.builder()
		.level(76)
		.name("Magic potion")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.LANTADYME)
		.grimyHerb(ItemID.GRIMY_LANTADYME)
		.primarySeed(ItemID.LANTADYME_SEED)
		.secondaries(ImmutableSet.of(ItemID.POTATO_CACTUS))
		.secondariesAlt(ImmutableSet.of(ItemID.POTATO_CACTUS_SEED))
		.unfinishedPotion(ItemID.LANTADYME_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.MAGIC_POTION1, ItemID.MAGIC_POTION2, ItemID.MAGIC_POTION3, ItemID.MAGIC_POTION4))
		.build()),

	ZAMORAK_BREW(Potion.builder()
		.level(78)
		.name("Zamorak brew")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.TORSTOL)
		.grimyHerb(ItemID.GRIMY_TORSTOL)
		.primarySeed(ItemID.TORSTOL_SEED)
		.secondaries(ImmutableSet.of(ItemID.JANGERBERRIES))
		.secondariesAlt(ImmutableSet.of(ItemID.JANGERBERRY_SEED))
		.unfinishedPotion(ItemID.TORSTOL_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.ZAMORAK_BREW1, ItemID.ZAMORAK_BREW2, ItemID.ZAMORAK_BREW3, ItemID.ZAMORAK_BREW4))
		.build()),

	ANTIDOTE_PLUS2(Potion.builder()
		.level(79)
		.name("Antidote++")
		.basicBase(ItemID.COCONUT_MILK)
		.primary(ItemID.IRIT_LEAF)
		.grimyHerb(ItemID.GRIMY_IRIT_LEAF)
		.primarySeed(ItemID.IRIT_SEED)
		.secondaries(ImmutableSet.of(ItemID.MAGIC_ROOTS))
		.unfinishedPotion(ItemID.IRIT_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.ANTIDOTE1_5958, ItemID.ANTIDOTE2_5956, ItemID.ANTIDOTE3_5954, ItemID.ANTIDOTE4_5952))
		.build()),

	BASTION_POTION(Potion.builder()
		.level(80)
		.name("Bastion potion")
		.basicBase(ItemID.VIAL_OF_BLOOD)
		.primary(ItemID.CADANTINE)
		.grimyHerb(ItemID.GRIMY_CADANTINE)
		.primarySeed(ItemID.CADANTINE_SEED)
		.secondaries(ImmutableSet.of(ItemID.WINE_OF_ZAMORAK))
		.unfinishedPotion(ItemID.CADANTINE_BLOOD_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.BASTION_POTION1, ItemID.BASTION_POTION2, ItemID.BASTION_POTION3, ItemID.BASTION_POTION4))
		.build()),

	BATTLEMAGE_POTION(Potion.builder()
		.level(80)
		.name("Battlemage potion")
		.basicBase(ItemID.VIAL_OF_BLOOD)
		.primary(ItemID.CADANTINE)
		.grimyHerb(ItemID.GRIMY_CADANTINE)
		.primarySeed(ItemID.CADANTINE_SEED)
		.secondaries(ImmutableSet.of(ItemID.POTATO_CACTUS))
		.secondariesAlt(ImmutableSet.of(ItemID.POTATO_CACTUS_SEED))
		.unfinishedPotion(ItemID.CADANTINE_BLOOD_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.BATTLEMAGE_POTION1, ItemID.BATTLEMAGE_POTION2, ItemID.BATTLEMAGE_POTION3, ItemID.BATTLEMAGE_POTION4))
		.build()),

	SARADOMIN_BREW(Potion.builder()
		.level(81)
		.name("Saradomin brew")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.TOADFLAX)
		.grimyHerb(ItemID.GRIMY_TOADFLAX)
		.primarySeed(ItemID.TOADFLAX_SEED)
		.secondaries(ImmutableSet.of(ItemID.CRUSHED_NEST))
		.unfinishedPotion(ItemID.TOADFLAX_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.SARADOMIN_BREW1, ItemID.SARADOMIN_BREW2, ItemID.SARADOMIN_BREW3, ItemID.SARADOMIN_BREW4))
		.build()),

	WEAPON_POISON_PLUS2(Potion.builder()
		.level(82)
		.name("Weapon poison++")
		.basicBase(ItemID.COCONUT_MILK)
		.primary(ItemID.CAVE_NIGHTSHADE)
		.primaryAlt(ItemID.NIGHTSHADE)
		.secondaries(ImmutableSet.of(ItemID.POISON_IVY_BERRIES))
		.secondariesAlt(ImmutableSet.of(ItemID.POISON_IVY_SEED))
		.unfinishedPotion(ItemID.WEAPON_POISON_UNF_5939)
		.ids(ImmutableSet.of(ItemID.WEAPON_POISON_5940))
		.build()),

	ANCIENT_BREW(Potion.builder()
		.level(85)
		.name("Ancient brew")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.DWARF_WEED)
		.grimyHerb(ItemID.GRIMY_DWARF_WEED)
		.primarySeed(ItemID.DWARF_WEED_SEED)
		.secondaries(ImmutableSet.of(ItemID.NIHIL_DUST))
		.secondariesAlt(ImmutableSet.of(ItemID.NIHIL_SHARD))
		.unfinishedPotion(ItemID.DWARF_WEED_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.ANCIENT_BREW1, ItemID.ANCIENT_BREW2, ItemID.ANCIENT_BREW3, ItemID.ANCIENT_BREW4))
		.build()),

	MENAPHITE_REMEDY(Potion.builder()
		.level(88)
		.name("Menaphite Remedy")
		.basicBase(ItemID.VIAL_OF_WATER)
		.primary(ItemID.DWARF_WEED)
		.grimyHerb(ItemID.GRIMY_DWARF_WEED)
		.primarySeed(ItemID.DWARF_WEED_SEED)
		.secondaries(ImmutableSet.of(ItemID.LILY_OF_THE_SANDS))
		.unfinishedPotion(ItemID.DWARF_WEED_POTION_UNF)
		.ids(ImmutableSet.of(ItemID.MENAPHITE_REMEDY1, ItemID.MENAPHITE_REMEDY2, ItemID.MENAPHITE_REMEDY3, ItemID.MENAPHITE_REMEDY4))
		.build()),

	// COMPLEX POTIONS
	GUTHIX_BALANCE(Potion.builder()
		.level(22)
		.name("Guthix balance")
		.complexBase(ImmutableSet.of(RESTORE_POTION.potion))
		.primary(ItemID.GARLIC)
		.secondaries(ImmutableSet.of(ItemID.SILVER_DUST))
		.ids(ImmutableSet.of(ItemID.GUTHIX_BALANCE1, ItemID.GUTHIX_BALANCE2, ItemID.GUTHIX_BALANCE3, ItemID.GUTHIX_BALANCE4))
		.build()),

	SANFEW_SERUM(Potion.builder()
		.level(65)
		.name("Sanfew serum")
		.complexBase(ImmutableSet.of(SUPER_RESTORE.potion))
		.primary(ItemID.UNICORN_HORN_DUST)
		.primaryAlt(ItemID.UNICORN_HORN)
		.secondaries(ImmutableSet.of(ItemID.SNAKE_WEED, ItemID.NAIL_BEAST_NAILS))
		.ids(ImmutableSet.of(ItemID.SANFEW_SERUM1, ItemID.SANFEW_SERUM2, ItemID.SANFEW_SERUM3, ItemID.SANFEW_SERUM4))
		.build()),

	DIVINE_SUPER_ATTACK(Potion.builder()
		.level(70)
		.name("Divine super attack potion")
		.complexBase(ImmutableSet.of(SUPER_ATTACK.potion))
		.primary(ItemID.CRYSTAL_DUST)
		.primaryAlt(ItemID.CRYSTAL_SHARD)
		.ids(ImmutableSet.of(ItemID.DIVINE_SUPER_ATTACK_POTION1, ItemID.DIVINE_SUPER_ATTACK_POTION2, ItemID.DIVINE_SUPER_ATTACK_POTION3, ItemID.DIVINE_SUPER_ATTACK_POTION4))
		.build()),

	DIVINE_SUPER_DEFENCE(Potion.builder()
		.level(70)
		.name("Divine super defence potion")
		.complexBase(ImmutableSet.of(SUPER_DEFENCE.potion))
		.primary(ItemID.CRYSTAL_DUST)
		.primaryAlt(ItemID.CRYSTAL_SHARD)
		.ids(ImmutableSet.of(ItemID.DIVINE_SUPER_DEFENCE_POTION1, ItemID.DIVINE_SUPER_DEFENCE_POTION2, ItemID.DIVINE_SUPER_DEFENCE_POTION3, ItemID.DIVINE_SUPER_DEFENCE_POTION4))
		.build()),

	DIVINE_SUPER_STRENGTH(Potion.builder()
		.level(70)
		.name("Divine super strength potion")
		.complexBase(ImmutableSet.of(SUPER_STRENGTH.potion))
		.primary(ItemID.CRYSTAL_DUST)
		.primaryAlt(ItemID.CRYSTAL_SHARD)
		.ids(ImmutableSet.of(ItemID.DIVINE_SUPER_STRENGTH_POTION1, ItemID.DIVINE_SUPER_STRENGTH_POTION2, ItemID.DIVINE_SUPER_STRENGTH_POTION3, ItemID.DIVINE_SUPER_STRENGTH_POTION4))
		.build()),

	DIVINE_RANGING(Potion.builder()
		.level(74)
		.name("Divine ranging potion")
		.complexBase(ImmutableSet.of(RANGING_POTION.potion))
		.primary(ItemID.CRYSTAL_DUST)
		.primaryAlt(ItemID.CRYSTAL_SHARD)
		.ids(ImmutableSet.of(ItemID.DIVINE_RANGING_POTION1, ItemID.DIVINE_RANGING_POTION2, ItemID.DIVINE_RANGING_POTION3, ItemID.DIVINE_RANGING_POTION4))
		.build()),

	STAMINA_POTION(Potion.builder()
		.level(77)
		.name("Stamina potion")
		.complexBase(ImmutableSet.of(SUPER_ENERGY.potion))
		.primary(ItemID.AMYLASE_CRYSTAL)
		.primaryAlt(ItemID.AMYLASE_PACK)
		.ids(ImmutableSet.of(ItemID.STAMINA_POTION1, ItemID.STAMINA_POTION2, ItemID.STAMINA_POTION3, ItemID.STAMINA_POTION4))
		.build()),

	DIVINE_MAGIC(Potion.builder()
		.level(78)
		.name("Divine magic potion")
		.complexBase(ImmutableSet.of(MAGIC_POTION.potion))
		.primary(ItemID.CRYSTAL_DUST)
		.primaryAlt(ItemID.CRYSTAL_SHARD)
		.ids(ImmutableSet.of(ItemID.DIVINE_MAGIC_POTION1, ItemID.DIVINE_MAGIC_POTION2, ItemID.DIVINE_MAGIC_POTION3, ItemID.DIVINE_MAGIC_POTION4))
		.build()),

	EXTENDED_ANTIFIRE(Potion.builder()
		.level(84)
		.name("Extended antifire")
		.complexBase(ImmutableSet.of(ANTIFIRE_POTION.potion))
		.primary(ItemID.LAVA_SCALE_SHARD)
		.primaryAlt(ItemID.LAVA_SCALE)
		.ids(ImmutableSet.of(ItemID.EXTENDED_ANTIFIRE1, ItemID.EXTENDED_ANTIFIRE2, ItemID.EXTENDED_ANTIFIRE3, ItemID.EXTENDED_ANTIFIRE4))
		.build()),

	DIVINE_BASTION(Potion.builder()
		.level(86)
		.name("Divine bastion potion")
		.complexBase(ImmutableSet.of(BASTION_POTION.potion))
		.primary(ItemID.CRYSTAL_DUST)
		.primaryAlt(ItemID.CRYSTAL_SHARD)
		.ids(ImmutableSet.of(ItemID.DIVINE_BASTION_POTION1, ItemID.DIVINE_BASTION_POTION2, ItemID.DIVINE_BASTION_POTION3, ItemID.DIVINE_BASTION_POTION4))
		.build()),

	DIVINE_BATTLEMAGE(Potion.builder()
		.level(86)
		.name("Divine battlemage potion")
		.complexBase(ImmutableSet.of(BATTLEMAGE_POTION.potion))
		.primary(ItemID.CRYSTAL_DUST)
		.primaryAlt(ItemID.CRYSTAL_SHARD)
		.ids(ImmutableSet.of(ItemID.DIVINE_BATTLEMAGE_POTION1, ItemID.DIVINE_BATTLEMAGE_POTION2, ItemID.DIVINE_BATTLEMAGE_POTION3, ItemID.DIVINE_BATTLEMAGE_POTION4))
		.build()),

	ANTIVENOM(Potion.builder()
		.level(87)
		.name("Anti-venom")
		.complexBase(ImmutableSet.of(ANTIDOTE_PLUS2.potion))
		.primary(ItemID.ZULRAHS_SCALES)
		.ids(ImmutableSet.of(ItemID.ANTIVENOM1, ItemID.ANTIVENOM2, ItemID.ANTIVENOM3, ItemID.ANTIVENOM4))
		.build()),

	SUPER_COMBAT_POTION(Potion.builder()
		.level(90)
		.name("Super combat potion")
		.complexBase(ImmutableSet.of(SUPER_ATTACK.potion, SUPER_STRENGTH.potion, SUPER_DEFENCE.potion))
		.primary(ItemID.TORSTOL)
		.primaryAlt(ItemID.GRIMY_TORSTOL)
		.ids(ImmutableSet.of(ItemID.SUPER_COMBAT_POTION1, ItemID.SUPER_COMBAT_POTION2, ItemID.SUPER_COMBAT_POTION3, ItemID.SUPER_COMBAT_POTION4))
		.build()),

	FORGOTTEN_BREW(Potion.builder()
		.level(91)
		.name("Forgotten brew")
		.complexBase(ImmutableSet.of(ANCIENT_BREW.potion))
		.primary(ItemID.ANCIENT_ESSENCE)
		.ids(ImmutableSet.of(ItemID.FORGOTTEN_BREW1, ItemID.FORGOTTEN_BREW2, ItemID.FORGOTTEN_BREW3, ItemID.FORGOTTEN_BREW4))
		.build()),

	SUPER_ANTIFIRE_POTION(Potion.builder()
		.level(92)
		.name("Super antifire potion")
		.complexBase(ImmutableSet.of(ANTIFIRE_POTION.potion))
		.primary(ItemID.CRUSHED_SUPERIOR_DRAGON_BONES)
		.ids(ImmutableSet.of(ItemID.SUPER_ANTIFIRE_POTION1, ItemID.SUPER_ANTIFIRE_POTION2, ItemID.SUPER_ANTIFIRE_POTION3, ItemID.SUPER_ANTIFIRE_POTION4))
		.build()),

	ANTIVENOM_PLUS(Potion.builder()
		.level(94)
		.name("Anti-venom+")
		.complexBase(ImmutableSet.of(ANTIVENOM.potion))
		.primary(ItemID.TORSTOL)
		.grimyHerb(ItemID.GRIMY_TORSTOL)
		.primarySeed(ItemID.TORSTOL_SEED)
		.ids(ImmutableSet.of(ItemID.ANTIVENOM1_12919, ItemID.ANTIVENOM2_12917, ItemID.ANTIVENOM3_12915, ItemID.ANTIVENOM4_12913))
		.build()),

	EXTENDED_ANTIVENOM_PLUS(Potion.builder()
		.level(94)
		.name("Extended anti-venom+")
		.complexBase(ImmutableSet.of(ANTIVENOM_PLUS.potion))
		.primary(ItemID.ARAXYTE_VENOM_SACK)
		.ids(ImmutableSet.of(ItemID.EXTENDED_ANTIVENOM1, ItemID.EXTENDED_ANTIVENOM2, ItemID.EXTENDED_ANTIVENOM3, ItemID.EXTENDED_ANTIVENOM4))
		.build()),

	DIVINE_SUPER_COMBAT(Potion.builder()
		.level(97)
		.name("Divine super combat potion")
		.complexBase(ImmutableSet.of(SUPER_COMBAT_POTION.potion))
		.primary(ItemID.CRYSTAL_DUST)
		.primaryAlt(ItemID.CRYSTAL_SHARD)
		.ids(ImmutableSet.of(ItemID.DIVINE_SUPER_COMBAT_POTION1, ItemID.DIVINE_SUPER_COMBAT_POTION2, ItemID.DIVINE_SUPER_COMBAT_POTION3, ItemID.DIVINE_SUPER_COMBAT_POTION4))
		.build()),

	EXTENDED_SUPER_ANTIFIRE(Potion.builder()
		.level(98)
		.name("Extended super antifire")
		.complexBase(ImmutableSet.of(ANTIFIRE_POTION.potion))
		.primary(ItemID.CRUSHED_SUPERIOR_DRAGON_BONES)
		.ids(ImmutableSet.of(ItemID.EXTENDED_SUPER_ANTIFIRE1, ItemID.EXTENDED_SUPER_ANTIFIRE2, ItemID.EXTENDED_SUPER_ANTIFIRE3, ItemID.EXTENDED_SUPER_ANTIFIRE4))
		.build()),

	// TARS
	GUAM_TAR(Potion.builder()
		.level(19)
		.name("Guam tar")
		.primary(ItemID.GUAM_LEAF)
		.grimyHerb(ItemID.GRIMY_GUAM_LEAF)
		.secondaries(ImmutableSet.of(ItemID.SWAMP_TAR))
		.ids(ImmutableSet.of(ItemID.GUAM_TAR))
		.build()),

	MARRENTILL_TAR(Potion.builder()
		.level(31)
		.name("Marrentill tar")
		.primary(ItemID.MARRENTILL)
		.grimyHerb(ItemID.GRIMY_MARRENTILL)
		.secondaries(ImmutableSet.of(ItemID.SWAMP_TAR))
		.ids(ImmutableSet.of(ItemID.MARRENTILL_TAR))
	.build()),

	TARROMIN_TAR(Potion.builder()
		.level(39)
		.name("Tarromin tar")
		.primary(ItemID.TARROMIN)
		.grimyHerb(ItemID.GRIMY_TARROMIN)
		.secondaries(ImmutableSet.of(ItemID.SWAMP_TAR))
		.ids(ImmutableSet.of(ItemID.TARROMIN_TAR))
		.build()),

	HARRALANDER_TAR(Potion.builder()
		.level(44)
		.name("Harralander tar")
		.primary(ItemID.HARRALANDER)
		.grimyHerb(ItemID.GRIMY_HARRALANDER)
		.secondaries(ImmutableSet.of(ItemID.SWAMP_TAR))
		.ids(ImmutableSet.of(ItemID.HARRALANDER_TAR))
		.build());

	private static final Map<Integer, List<Potion>> primaryToPotion = new HashMap<>();
	private static final Map<Integer, List<Potion>> secondariesToPotion = new HashMap<>();
	private static final Map<Integer, List<Potion>> complexBaseToPotion = new HashMap<>();
	private static final Map<Integer, List<Potion>> unfinishedToPotion = new HashMap<>();
	private static final Map<Integer, List<Potion>> seedsToPotion = new HashMap<>();
	private static final Map<Integer, List<Potion>> grimyToPotion = new HashMap<>();

	private static final Map<Integer, List<Potion>> allIdsToPotion = new HashMap<>();

	private static final Set<Integer> allPotionIds = new HashSet<>();

	static
	{
		buildPrimariesAndGrimyMaps();
		buildSecondariesMap();
		buildComplexBaseMap();
		buildUnfinishedMap();
		buildSeedsMap();
		allIdsToPotion.putAll(primaryToPotion);
		allIdsToPotion.putAll(grimyToPotion);
		allIdsToPotion.putAll(secondariesToPotion);
		allIdsToPotion.putAll(complexBaseToPotion);
		allIdsToPotion.putAll(unfinishedToPotion);
		allIdsToPotion.putAll(seedsToPotion);
		allPotionIds.addAll(Arrays.stream(values()).map(p -> p.potion.getIds()).flatMap(Set::stream).collect(Collectors.toSet()));
	}

	public final Potion potion;

	Potions(Potion potion)
	{
		this.potion = potion;
	}

	public static Potion getPotion(int potionId)
	{
		return Arrays.stream(values())
			.map(p -> p.potion)
			.filter(potion -> potion.getIds().contains(potionId))
			.findFirst()
			.orElse(null);
	}

	private static void buildPrimariesAndGrimyMaps()
	{
		Arrays.stream(values()).map(p -> p.potion).forEach(p -> {
			// handle Imp Repellent
			if (IMP_REPELLENT.potion.equals(p))
			{
				// use this potion's secondaries as primary ingredients
				p.getSecondaries().forEach(secondary -> primaryToPotion.put(secondary, ImmutableList.of(p)));
				return;
			}

			// get primary ingredient id
			int primaryId = p.getPrimary();
			primaryToPotion.computeIfAbsent(primaryId, id -> new ArrayList<>()).add(p);
			// get alternate primary id in case it exists
			int altPrimaryId = p.getPrimaryAlt();
			if (altPrimaryId > 0)
			{
				primaryToPotion.computeIfAbsent(altPrimaryId, id -> new ArrayList<>()).add(p);
			}
			// also build grimy map
			int grimyHerbId = p.getGrimyHerb();
			if (grimyHerbId > 0)
			{
				grimyToPotion.computeIfAbsent(grimyHerbId, id -> new ArrayList<>()).add(p);
			}
		});
	}

	private static void buildSeedsMap()
	{
		Arrays.stream(values()).map(p -> p.potion).forEach(p -> {
			// also use herb seeds as primaries
			int seedId = p.getPrimarySeed();
			if (seedId > 0)
			{
				seedsToPotion.computeIfAbsent(seedId, id -> new ArrayList<>()).add(p);
			}
		});
	}

	private static void buildSecondariesMap()
	{
		Arrays.stream(values()).map(p -> p.potion)
			.filter(p -> p.getSecondaries() != null && !IMP_REPELLENT.potion.equals(p))
			.forEach(p -> p.getSecondaries()
				.forEach(id -> secondariesToPotion.computeIfAbsent(id, i -> new ArrayList<>()).add(p)));
		Arrays.stream(values()).map(p -> p.potion)
			.filter(p -> p.getSecondariesAlt() != null)
			.forEach(p -> p.getSecondariesAlt()
				.forEach(id -> secondariesToPotion.computeIfAbsent(id, i -> new ArrayList<>()).add(p)));
	}

	private static void buildComplexBaseMap()
	{
		Arrays.stream(values()).map(p -> p.potion)
			.filter(p -> p.getComplexBase() != null)
			.forEach(p -> p.getComplexBase()
				.forEach(base -> base.getIds()
					.forEach(baseId -> complexBaseToPotion.computeIfAbsent(baseId, i -> new ArrayList<>()).add(p))));
	}

	private static void buildUnfinishedMap()
	{
		Arrays.stream(values()).map(p -> p.potion)
			.filter(p -> p.getUnfinishedPotion() > 0)
			.forEach(p -> unfinishedToPotion.computeIfAbsent(p.getUnfinishedPotion(), id -> new ArrayList<>()).add(p));
	}

	public static boolean isPrimary(int id)
	{
		return primaryToPotion.containsKey(id);
	}

	public static boolean isSecondary(int id)
	{
		return secondariesToPotion.containsKey(id);
	}

	public static boolean isComplexBase(int id)
	{
		return complexBaseToPotion.containsKey(id);
	}

	public static boolean isSeed(int id)
	{
		return seedsToPotion.containsKey(id);
	}

	public static boolean isUnfinished(int id)
	{
		return unfinishedToPotion.containsKey(id);
	}

	public static boolean isPotion(int id)
	{
		return allPotionIds.contains(id);
	}

	public static boolean isGrimy(int id)
	{
		return grimyToPotion.containsKey(id);
	}

	public static Set<Integer> allIds()
	{
		Set<Integer> allIds = new HashSet<>();
		allIds.addAll(allIdsToPotion.keySet());
		allIds.addAll(allPotionIds);
		return allIds;
	}

	public static List<Potion> getByPrimary(int id)
	{
		return primaryToPotion.get(id);
	}

	public static List<Potion> getBySeed(int id)
	{
		return seedsToPotion.get(id);
	}

	public static List<Potion> getBySecondary(int id)
	{
		return secondariesToPotion.get(id);
	}

	public static List<Potion> getByComplex(int id)
	{
		return complexBaseToPotion.get(id);
	}

	public static List<Potion> getByUnfinished(int id)
	{
		return unfinishedToPotion.get(id);
	}

	public static List<Potion> getByGrimy(int id)
	{
		return grimyToPotion.get(id);
	}
}

package com.herblorerecipes;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class HerbloreRecipesPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(HerbloreRecipesPlugin.class);
		RuneLite.main(args);
	}
}
