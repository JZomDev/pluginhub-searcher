package com.ClanChatWarnings;

import net.runelite.client.config.*;

@ConfigGroup("ClanChatPlus")
public interface ClanChatWarningsConfig extends Config
{

	@ConfigSection(name = "Player Lists", description = "List of players to give warnings for, regex lists, and exempt players", position = -1)
	final String sectionLists = "sectionLists";

	@ConfigItem(
			keyName = "notifiedPlayer",
			name = "Players Warnings",
			description = "List of players you want to be warned of on joining. Supports notes by adding '~' after name. Separate with commas.",
			position = 0,
			section = sectionLists
	)
	default String warnPlayers() {
		return "";
	}
	@ConfigItem(
			keyName = "notifiedPlayer",
			name = "Players Warnings",
			description = "List of players you want to be warned of on joining. Supports notes by adding '~' after name. Separate with commas.",
			position = 0,
			section = sectionLists
	)
	void warnPlayers(String str);
	@ConfigItem(
			keyName = "notifiedMass",
			name = "Regex Warnings",
			description = "Regex warnings for players joining Friends Chat. Supports notes by adding '~' after name. Separate with new lines.",
			position = 1,
			section = sectionLists
	)
	default String warnings() {
		return "";
	}
	@ConfigItem(
			keyName = "exemptPlayers",
			name = "Exempt Players",
			description = "Players to be ignored when joining Friends Chat.",
			position = 2,
			section = sectionLists
	)
	default String exemptPlayers() { return "";}
	@ConfigItem(
			keyName = "cooldown",
			name = "Cooldown",
			description = "Cooldown, in seconds, before you will be notified of a player joining again.",
			position = 3,
			section = sectionLists
	)
	default int cooldown() { return 30;}
	@ConfigItem(
			keyName = "warnedAndAlerted",
			name = "Warning Notification",
			description = "Ping if player procs a warning.",
			position = 4
	)
	default Notification warningNotification() { return Notification.ON;}
	@ConfigItem(
			keyName = "Check on self join",
			name = "Check on Joining",
			description = "Runs the check when you join Friends Chat.",
			position = 5
	)
	default boolean selfCheck() { return false;}
	@ConfigItem(
			keyName = "Ping on self join",
			name = "Ping on Joining",
			description = "If \"Check on Joining\" is enabled, will ping if players on the list are in cc when you join Friends Chat.",
			position = 6
	)
	default boolean selfPing() { return false;}
	@ConfigItem(
			keyName = "Kicks",
			name = "Kick from Warning",
			description = "Changes message to support kicking players from warning.",
			position = 7
	)
	default boolean kickable() { return false;}
	@ConfigItem(
			keyName = "Menu Add",
			name = "Right click add to Player Warnings",
			description = "Adds a right click option to player messages to add them to the list (Warning will not visually update if config is open).",
			position = 8
	)
	default boolean menu() { return false;}
	@ConfigItem(
			keyName = "ShiftMenu",
			name = "Shift required",
			description = "Requires shift to be held to see the add to warnings option.",
			position = 9
	)
	default boolean shiftClick() { return false;}

    @ConfigItem(
            keyName = "MenuSwap",
            name = "Menu Entry Swap",
            description = "Swap menu entries to allow left click kicks. (Warning: removes all other right click options on players in the list)",
            position = 10
    )
    default boolean menuSwap() { return false;}

    @ConfigSection(name = "Remote Settings", description = "Use a website as an external list", position = 100)
    final String sectionRemote = "sectionRemote";

    @ConfigItem(
            keyName = "remoteEnabled",
            name = "Enabled",
            description = "Enable pulling from an external website on login. (Refresh list by right clicking a chat-channel icon)",
			warning = "Warning: This plugin can fetch text from 3rd party websites not controlled or verified by the RuneLite Developers",
            position = 101,
            section = sectionRemote
    )
    default boolean remoteEnabled() {
        return false;
    }

	@ConfigItem(
			keyName = "remoteURL",
			name = "Remote URL",
			description = "The url of the website you want to pull, must be plain text, use commas as a delimiter.",
			position = 102,
			section = sectionRemote
	)
	default String remoteURL() {
		return "";
	}

	@ConfigItem(
			keyName = "remoteAuthorization",
			name = "Remote Authorization",
			description = "Set the authorization header (if server requires it)",
			position = 103,
			section = sectionRemote
	)
	default String remoteAuthorization() {
		return "";
	}


	@ConfigItem(
			keyName = "postNewNames",
			name = "Post New Names",
			description = "Add a menu entry to submit to a remote url",
			warning = "Warning: This setting will submit your new names added by the right click menu, your username, the current chat owner, and an authorization header(if set) to a 3rd party websites not controlled or verified by the RuneLite Developers",
			position = 104,
			section = sectionRemote
	)
	default boolean postNewNames() { return false; }

	@ConfigItem(
			keyName = "submissionURL",
			name = "Submission URL",
			description = "Submit new names added to your list to a remote url",
			position = 105,
			section = sectionRemote
	)
	default String submissionURL() { return ""; }

	@ConfigItem(
			keyName = "submissionAuthorization",
			name = "Authorization",
			description = "Set the authorization header (if server requires it)",
			position = 106,
			section = sectionRemote
	)
	default String submissionAuthorization() { return ""; }

}

package com.ClanChatWarnings;

import com.google.common.base.Splitter;
import com.google.common.collect.ImmutableList;
import com.google.gson.JsonObject;
import com.google.inject.Provides;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.WidgetUtil;
import net.runelite.client.Notifier;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.input.KeyManager;
import net.runelite.client.menus.MenuManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.Text;
import okhttp3.*;

import javax.annotation.Nullable;
import javax.inject.Inject;
import java.io.IOException;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@Slf4j
@PluginDescriptor(
        name = "Clan Chat Warnings"
)
public class ClanChatWarningsPlugin extends Plugin {
    private static final Splitter NEWLINE_SPLITTER = Splitter.on("\n").omitEmptyStrings().trimResults();
    private static final String MESSAGE_DELIMITER = "~";
    private static final ImmutableList<String> AFTER_OPTIONS = ImmutableList.of("Message", "Add ignore", "Remove friend", "Kick");
    private final Map<Pattern, String> warnings = new HashMap<>();
    private final Map<String, String> warnPlayers = new HashMap<>();
    private final Set<String> exemptPlayers = new HashSet<>();
    private final Map<String, Instant> cooldownMap = new HashMap<>();
    private final List<String> friendChatName = new ArrayList<>();
    private final List<String> remoteNames = new ArrayList<>();
    private boolean hopping;
    private int clanJoinedTick;
    @Getter(AccessLevel.PACKAGE)
    @Setter(AccessLevel.PACKAGE)
    private boolean hotKeyPressed;
    @Inject
    private Client client;
    @Inject
    private ClientThread clientThread;
    @Inject
    private Notifier ping;
    @Inject
    private MenuManager menuManager;
    @Inject
    private ClanChatWarningsConfig config;
    @Inject
    CCWInputListener hotKeyListener;
    @Inject
    KeyManager keyManager;
    @Inject
    OkHttpClient httpClient;


    @Override
    protected void startUp() {
        this.updateSets();
        keyManager.registerKeyListener(hotKeyListener);
        fetchRemoteNames(false);
    }

    @Override
    protected void shutDown() {
        this.warnings.clear();
        this.exemptPlayers.clear();
        this.warnPlayers.clear();
        this.cooldownMap.clear();
        this.friendChatName.clear();
        keyManager.unregisterKeyListener(hotKeyListener);
    }

    @Subscribe
    public void onFocusChanged(FocusChanged focusChanged) {
        if (!focusChanged.isFocused()) {
            hotKeyPressed = false;
        }
    }

    @Subscribe
    public void onMenuEntryAdded(MenuEntryAdded event) {
        //If you or someone you love is able to figure out how to only have this enabled for clan chat, hit a Turtle up.
        if(config.menu()&&(hotKeyPressed||!config.shiftClick())){
            int groupId = WidgetUtil.componentToInterface(event.getActionParam1());
            String option = event.getOption();
            if (groupId == InterfaceID.FRIENDS_CHAT && (option.equals("Add ignore") || option.equals("Remove friend"))||
                groupId == InterfaceID.PRIVATE_CHAT && (option.equals("Add ignore") || option.equals("Message"))||
                groupId == InterfaceID.CHATBOX && (option.equals("Add ignore") || option.equals("Message"))) {
                client.createMenuEntry(1)
                    .setOption("Add to CC Warnings")
                    .setTarget(event.getTarget())
                    .setType(MenuAction.RUNELITE)
                    .setParam0(event.getActionParam0())
                    .setParam1(event.getActionParam1())
                    .setIdentifier(event.getIdentifier()).onClick(menuEntry -> {

                        String name = Text.standardize(menuEntry.getTarget());

                            config.warnPlayers(config.warnPlayers()+", "+name);
                            this.client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", name + " has been added to Clan Chat Warnings.", "");

                            if(config.postNewNames()) {
                                try {
                                    submitRemoteName(name);
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                        });
                if (config.postNewNames())
                    client.createMenuEntry(1)
                            .setOption("Add to Remote Warnings")
                            .setTarget(event.getTarget())
                            .setType(MenuAction.RUNELITE)
                            .setParam0(event.getActionParam0())
                            .setParam1(event.getActionParam1())
                            .setIdentifier(event.getIdentifier()).onClick(menuEntry -> {
                                String name = Text.standardize(menuEntry.getTarget());
                                try {
                                    submitRemoteName(name);
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            });
            }
        }
    }

    void updateSets() {
        this.warnings.clear();
        this.exemptPlayers.clear();
        this.warnPlayers.clear();
        warnings.putAll(NEWLINE_SPLITTER.splitToList(this.config.warnings()).stream()
                .map((s) -> s.split(MESSAGE_DELIMITER))
                .collect(Collectors.toMap(p -> Pattern.compile(p[0].trim(), Pattern.CASE_INSENSITIVE), p -> p.length > 1 ? p[1].trim() : ""))
        );
        exemptPlayers.addAll(Text.fromCSV(this.config.exemptPlayers()).stream()
                .map((s) -> s.toLowerCase().trim())
                .collect(Collectors.toSet())
        );

        warnPlayers.putAll(Text.fromCSV(this.config.warnPlayers()).stream()
                .map((s) -> s.split(MESSAGE_DELIMITER))
                .collect(Collectors.toMap(p -> p[0].toLowerCase().trim(), p -> p.length > 1 ? p[1].trim() : "",(p1,p2)->p1))
        );
    }


    private void sendNotification(String player, String Comment, int type) {
        StringBuilder stringBuilder = new StringBuilder();
        if (type == 1) {
            stringBuilder.append("has joined Friends Chat. ").append(Comment);
            String notification = stringBuilder.toString();
            if (this.config.kickable()) {
                this.client.addChatMessage(ChatMessageType.FRIENDSCHAT, player, notification, "Warning");
            } else {
                this.client.addChatMessage(ChatMessageType.FRIENDSCHATNOTIFICATION, "", player + " " + notification, "");
            }
            if (this.config.warningNotification().isEnabled()) {
                if (this.clanJoinedTick != this.client.getTickCount() || this.config.selfPing()) {
                    this.ping.notify(this.config.warningNotification(), player + " " + notification);
                }
            }
        }
    }

    @Subscribe
    public void onFriendsChatMemberJoined(FriendsChatMemberJoined event) {
        if (this.clanJoinedTick != this.client.getTickCount()) {
            hopping = false;
        }

        if (clanJoinedTick != client.getTickCount() || (this.config.selfCheck() && !hopping)) {
            final FriendsChatMember member = event.getMember();
            final String memberName = Text.standardize(member.getName());
            final String localName = client.getLocalPlayer() == null ? null : client.getLocalPlayer().getName();

            if (memberName == null || (memberName.equalsIgnoreCase(localName) && !config.selfCheck())) {
                return;
            }

            final String warningMessage = getWarningMessageByUsername(memberName);
            if (warningMessage != null) {
                if (config.cooldown() > 0) {
                    cooldownMap.put(memberName.toLowerCase(), Instant.now());
                }
                sendNotification(memberName, warningMessage, 1);
            }
        }
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event) {
        if (event.getGroup().equals("ClanChatPlus")) {
            this.updateSets();
        }
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged gameStateChanged) {
        if (gameStateChanged.getGameState() == GameState.HOPPING) {
            hopping = true;
        }
        if (gameStateChanged.getGameState() == GameState.LOGGING_IN || gameStateChanged.getGameState() == GameState.HOPPING) {
            fetchRemoteNames(false);
        }
    }

    @Subscribe
    public void onFriendsChatChanged(FriendsChatChanged event) {
        if (event.isJoined()) {
            this.clanJoinedTick = this.client.getTickCount();
        }
    }

    @Provides
    ClanChatWarningsConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(ClanChatWarningsConfig.class);
    }


    /**
     * Grabs the relevant warning message for the specified username accounting for all config options
     *
     * @param username players in-game name (shown in join message)
     * @return warning message or null if username should be ignored
     */
    @Nullable
    private String getWarningMessageByUsername(String username) {
        username = Text.standardize(username);
        // This player is exempt from any warning.
        if (exemptPlayers.contains(username)) {
            return null;
        }

        if (cooldownMap.containsKey(username)) {
            final Instant cutoff = Instant.now().minus(config.cooldown(), ChronoUnit.SECONDS);
            // If the cutoff period is after (greater) than the stored time they should come off cooldown
            if (cutoff.compareTo(cooldownMap.get(username)) > 0) {
                cooldownMap.remove(username);
            } else {
                return null;
            }
        }

        // This player name is listed inside the config
        if (warnPlayers.containsKey(username)) {
            return warnPlayers.get(username);
        }

        for (final Map.Entry<Pattern, String> entry : warnings.entrySet()) {
            final Matcher m = entry.getKey().matcher(username);
            if (m.find()) {
                return entry.getValue();
            }
        }

        if (config.remoteEnabled()) {
            if (remoteNames.contains(username))
                return "";
        }

        return null;
    }

    @Subscribe(priority = -2) // Run after RuneLite's Menu Entry Swapper and geheur's Custom Menu Swaps
    public void onPostMenuSort(PostMenuSort e) {
        MenuEntry[] menuEntries = client.getMenuEntries();
        if (menuEntries.length == 0) return;
        for (MenuEntry entry : menuEntries) {
            if(config.menuSwap()) {
                if (entry.getType().equals(MenuAction.CC_OP_LOW_PRIORITY)) {
                    if ((entry.getOption().equalsIgnoreCase("kick") || entry.getOption().equalsIgnoreCase("kick user"))) {
                        String target = Text.standardize(entry.getTarget());
                        if (warnPlayers.containsKey(target) || remoteNames.contains(target)) {
                            entry.setType(MenuAction.CC_OP);
                            client.setMenuEntries(new MenuEntry[]{entry});
                        }
                    }
                }
            }

            if (entry.getOption().equalsIgnoreCase("chat-channel")) {
                if (config.remoteEnabled()) {
                    client.createMenuEntry(1).setOption("Refresh Remote Warnings").setType(MenuAction.RUNELITE).setTarget("(" + remoteNames.size() + ")")
                            .onClick(clickEvent ->
                            {
                                fetchRemoteNames(true);
                            });
                }
            }
        }
    }

    public void fetchRemoteNames(boolean verbose) {
        if (!config.remoteEnabled() || config.remoteURL().isEmpty())
            return;
        remoteNames.clear();

        HttpUrl url = null;
        try {
            url = HttpUrl.get(config.remoteURL());
        } catch (Exception e) {
            if (verbose) {
                clientThread.invoke(() -> {
                    client.addChatMessage(ChatMessageType.GAMEMESSAGE, "Error", e.getMessage(), "Error2");
                });
            }
            return;
        }

        Request.Builder builder = new Request.Builder().url(url);
        if(!config.remoteAuthorization().isEmpty())
            builder.header("Authorization", config.remoteAuthorization());

        httpClient.newCall(builder.build()).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                if (verbose) {
                    clientThread.invoke(() -> {
                        client.addChatMessage(ChatMessageType.GAMEMESSAGE, "Error", e.getMessage(), "Error");
                    });
                }
                log.error("Error fetching remote warning list", e);
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                if (response.isSuccessful()) {
                    String raw = response.body().string();
                    for (String name : raw.split(",")) {
                        String standardized = Text.standardize(name);
                        if (!standardized.isEmpty())
                            remoteNames.add(standardized);
                    }

                    if (verbose)
                        clientThread.invoke(() -> {
                            client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Fetched " + remoteNames.size() + " names.", "");
                        });
                } else {
                    if (verbose) {
                        clientThread.invoke(() -> {
                            client.addChatMessage(ChatMessageType.GAMEMESSAGE, "Error", "Got response code: " + response.code(), "Error2");
                        });
                    }
                    log.error("Error fetching remote warning list");
                }
            }
        });
    }

    private static final MediaType JSON = MediaType.parse("application/json");
    public void submitRemoteName(String name) throws Exception {
        if (!config.postNewNames())
            return;

        HttpUrl url = null;
        try {
            url = HttpUrl.get(config.submissionURL());
        } catch (Exception e) {
            if (client.getGameState() == GameState.LOGGED_IN) {
                clientThread.invoke(() -> {
                    client.addChatMessage(ChatMessageType.GAMEMESSAGE, "Error", e.getMessage(), "Error2");
                });
            }
            return;
        }

        JsonObject body = new JsonObject();
        body.addProperty("submitter", client.getLocalPlayer().getName());
        body.addProperty("channel_owner", client.getFriendsChatManager() != null ? client.getFriendsChatManager().getOwner() : "");
        body.addProperty("rsn", name);
        RequestBody requestBody = RequestBody.create(JSON, body.toString());

        Request.Builder builder = new Request.Builder().url(url).post(requestBody);
        if (!config.submissionAuthorization().isEmpty())
            builder.header("Authorization", config.submissionAuthorization());

        httpClient.newCall(builder.build()).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                if (client.getGameState() == GameState.LOGGED_IN) {
                    clientThread.invoke(() -> {
                        client.addChatMessage(ChatMessageType.GAMEMESSAGE, "Error", e.getMessage(), "Error");
                    });
                }
                log.error("Error submitting username", e);
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                if (response.isSuccessful()) {
                    clientThread.invoke(() -> {
                        client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Added " + name + " to remote warnings list.", "");
                    });
                }
                response.close();
            }
        });
    }

}
package com.ClanChatWarnings;

import net.runelite.client.input.KeyListener;

import javax.inject.Inject;
import java.awt.event.KeyEvent;

public class CCWInputListener implements KeyListener {
    private static final int HOTKEY = KeyEvent.VK_SHIFT;

    private final ClanChatWarningsPlugin plugin;

    @Inject
    private CCWInputListener(ClanChatWarningsPlugin plugin) {
        this.plugin = plugin;
    }

    @Override
    public void keyTyped(KeyEvent e) {

    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == HOTKEY) {
            plugin.setHotKeyPressed(true);
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        if (e.getKeyCode() == HOTKEY) {
            plugin.setHotKeyPressed(false);
        }
    }
}

package com.ClanChatWarnings;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ClanChatWarningsTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ClanChatWarningsPlugin.class);
		RuneLite.main(args);
	}
}
