package org.pepijnv;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;

import net.runelite.api.*;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameObjectDespawned;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.util.Set;

@Slf4j
@PluginDescriptor(
        name = "Gem Stall Helper",
        description = "Highlights the gem stall when itâ€™s safe to thieve"
)
public class GemstallPlugin extends Plugin
{
    @Inject private Client client;
    @Inject private GemstallConfig config;
    @Inject private OverlayManager overlayManager;
    @Inject private GemstallOverlay overlay;

    // Guard IDs
    private static final Set<Integer> GUARD_IDS = Set.of(
            11937,
            11938,
            11939,
            6579,
            5418,
            11936,
            3297,
            11902,
            8854
    );

    // Current gem stall
    private GameObject gemStall;
    private boolean safeToThieve;

    public GameObject getGemStall()
    {
        return gemStall;
    }

    public boolean isSafeToThieve()
    {
        return safeToThieve;
    }

    @Override
    protected void startUp() throws Exception
    {
        log.info("Gem Stall Helper started");
        overlayManager.add(overlay);
    }

    @Override
    protected void shutDown() throws Exception
    {
        overlayManager.remove(overlay);
        gemStall = null;
        safeToThieve = false;
        log.info("Gem Stall Helper stopped");
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged event)
    {
        if (event.getGameState() == GameState.LOGGED_IN)
        {
            log.debug("Player logged in, plugin active");
        }
    }

    @Subscribe
    public void onGameTick(GameTick tick)
    {
        if (client.getGameState() != GameState.LOGGED_IN || client.getLocalPlayer() == null)
        {
            safeToThieve = false;
            return;
        }

        // Check if area is safe
        safeToThieve = config.enableGuardCheck()
                ? isAreaSafeFromGuards(config.guardRadius())
                : true;
    }

    @Subscribe
    public void onGameObjectSpawned(GameObjectSpawned event)
    {
        GameObject obj = event.getGameObject();

        // Replace with the actual Gem Stall Object ID(s)
        if (obj.getId() == ObjectID.GEM_STALL || obj.getId() == 11731)
        {
            gemStall = obj;
        }
    }

    @Subscribe
    public void onGameObjectDespawned(GameObjectDespawned event)
    {
        GameObject obj = event.getGameObject();
        if (obj == gemStall)
        {
            gemStall = null;
        }
    }

    /**
     * Returns true if no guards are both in line-of-sight and within the radius
     */
    private boolean isAreaSafeFromGuards(int radius)
    {
        Player me = client.getLocalPlayer();
        if (me == null)
            return true;

        WorldPoint myLoc = me.getWorldLocation();
        int plane = myLoc.getPlane();
        WorldArea playerArea = me.getWorldArea();

        for (NPC npc : client.getNpcs())
        {
            if (npc == null || !GUARD_IDS.contains(npc.getId()))
                continue;

            WorldPoint npcLoc = npc.getWorldLocation();
            if (npcLoc.getPlane() != plane)
                continue;

            // 1) Same-tile check -> unsafe
            if (npcLoc.equals(myLoc))
                return false;

            // 2) Distance check
            if (npcLoc.distanceTo(myLoc) > radius)
                continue;

            // 3) LOS check
            if (playerArea.hasLineOfSightTo(client.getTopLevelWorldView(), npcLoc))
                return false; // guard sees player and is close
        }

        return true; // safe
    }





    /**
     * Simple LOS raycast using tile flags
     */


    @Provides
    GemstallConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(GemstallConfig.class);
    }
}

package org.pepijnv;

import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.Perspective;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

import javax.inject.Inject;
import java.awt.*;

public class GemstallOverlay extends Overlay
{
    private final Client client;
    private final GemstallPlugin plugin;

    @Inject
    public GemstallOverlay(Client client, GemstallPlugin plugin)
    {
        this.client = client;
        this.plugin = plugin;

        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        GameObject stall = plugin.getGemStall();
        if (stall != null)
        {
            // Try to get the exact clickbox
            Shape polygon = stall.getClickbox();

            // Fallback: tile area if clickbox is null
            if (polygon == null)
            {
                LocalPoint lp = stall.getLocalLocation();
                if (lp != null)
                {
                    polygon = Perspective.getCanvasTileAreaPoly(client, lp, 1); // size 1 assumed
                }
            }

            if (polygon != null)
            {
                // Fill color based on safe/unsafe
                Color fillColor = plugin.isSafeToThieve()
                        ? new Color(0, 255, 0, 50)
                        : new Color(255, 0, 0, 50);

                // Border color
                Color borderColor = plugin.isSafeToThieve() ? Color.GREEN : Color.RED;

                // Draw border
                graphics.setColor(borderColor);
                graphics.setStroke(new BasicStroke(3));
                graphics.draw(polygon);

                // Draw fill
                graphics.setColor(fillColor);
                graphics.fill(polygon);
            }
        }
        return null;
    }
}

package org.pepijnv;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;

@ConfigGroup("gemstall")
public interface GemstallConfig extends Config
{

    @ConfigItem(
            keyName = "enableGuardCheck",
            name = "Enable guard check",
            description = "Only highlight when no guards are nearby"
    )
    default boolean enableGuardCheck()
    {
        return true;
    }

    @Range(min = 1, max = 15)
    @ConfigItem(
            keyName = "guardRadius",
            name = "Guard radius (tiles)",
            description = "Do not highlight if a guard is within this many tiles"
    )
    default int guardRadius()
    {
        return 6;
    }

}

package org.pepijnv;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PluginLauncher
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(GemstallPlugin.class);
		RuneLite.main(args);
	}
}
