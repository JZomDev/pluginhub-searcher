package com.protectItemNotify.ProtectItemNotify;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ProtectItemNotifyPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ProtectItemNotifyPlugin.class);
		RuneLite.main(args);
	}
}
package com.protectItemNotify.ProtectItemNotify;

import com.protectItemNotify.ProtectItemNotify.ProtectItemNotifyOverlay;
import com.protectItemNotify.ProtectItemNotify.ProtectItemNotifyPlugin;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.plugins.PluginInstantiationException;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.ImageComponent;
import net.runelite.client.util.ImageUtil;

public class ProtectItemNotifyOverlay extends Overlay {
    private static final ScaledImage previouslyScaledImage = new ScaledImage();
    private static BufferedImage protectItemImage;
    private final ProtectItemNotifyPlugin plugin;
    private final ProtectItemNotifyConfig protectItemConfig;

    @Inject
    ProtectItemNotifyOverlay(ProtectItemNotifyPlugin plugin, ProtectItemNotifyConfig config) throws PluginInstantiationException {
        super(plugin);
        setPriority(OverlayPriority.MED);
        setPosition(OverlayPosition.BOTTOM_LEFT);
        setLayer(OverlayLayer.ALWAYS_ON_TOP);
        this.plugin = plugin;
        this.protectItemConfig = config;
        loadProtectItemImage();
        previouslyScaledImage.scale = 1;
        previouslyScaledImage.scaledBufferedImage = protectItemImage;
    }

    private static void loadProtectItemImage() {
        protectItemImage = ImageUtil.getResourceStreamFromClass(ProtectItemNotifyPlugin.class, "/protect-item.png");
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (!plugin.isInPVP() && protectItemConfig.pvponly() == true) {
            return null;
        }

        if (!plugin.isProtectItemOn()) {
            return null;
        }

        BufferedImage scaledProtectItemImage = scaleImage(protectItemImage);
        ImageComponent imagePanelComponent = new ImageComponent(scaledProtectItemImage);
        return imagePanelComponent.render(graphics);
    }

    private BufferedImage scaleImage(BufferedImage protectItemImage) {
        if (previouslyScaledImage.scale == protectItemConfig.scale() || protectItemConfig.scale() <= 0) {
            return previouslyScaledImage.scaledBufferedImage;
        }
        int w = protectItemImage.getWidth();
        int h = protectItemImage.getHeight();
        BufferedImage scaledProtectItemImage =
                new BufferedImage(
                        protectItemConfig.scale() * w, protectItemConfig.scale() * h, BufferedImage.TYPE_INT_ARGB);
        AffineTransform at = new AffineTransform();
        at.scale(protectItemConfig.scale(), protectItemConfig.scale());
        AffineTransformOp scaleOp = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
        scaledProtectItemImage = scaleOp.filter(protectItemImage, scaledProtectItemImage);
        previouslyScaledImage.scaledBufferedImage = scaledProtectItemImage;
        previouslyScaledImage.scale = protectItemConfig.scale();
        return scaledProtectItemImage;
    }

    private static class ScaledImage {
        private int scale;
        private BufferedImage scaledBufferedImage;
    }

}
package com.protectItemNotify.ProtectItemNotify;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("protectitemnotify")
public interface ProtectItemNotifyConfig extends Config
{
	@ConfigItem(
			keyName = "scale",
			name = "Scale",
			description = "The scale of the ring of protect item image.")
	default int scale() {
		return 1;
	}

	@ConfigItem(
			keyName = "pvponly",
			name = "PVP Only",
			description = "Should the plugin only display when in a PVP area.")
	default boolean pvponly() {
		return false;
	}

}
package com.protectItemNotify.ProtectItemNotify;

import com.google.inject.Provides;
import com.protectItemNotify.ProtectItemNotify.ProtectItemNotifyOverlay;
import java.util.Optional;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.ItemContainer;
import net.runelite.api.Prayer;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.api.Varbits;

@Slf4j
@PluginDescriptor(
	name = "Protect Item Notify"
)
public class ProtectItemNotifyPlugin extends Plugin
{
	@Inject private Client client;

	@Inject private ProtectItemNotifyConfig config;

	@Inject private ProtectItemNotifyOverlay protectItemNotifyOverlay;

	@Inject private OverlayManager overlayManager;

	private boolean protectItemOn = true;

	@Override
	protected void startUp() {
		overlayManager.add(protectItemNotifyOverlay);
	}

	@Override
	protected void shutDown() {
		overlayManager.remove(protectItemNotifyOverlay);
	}

	@Subscribe
	public void onGameTick(GameTick event) {
		this.protectItemOn = !client.isPrayerActive(Prayer.PROTECT_ITEM);
	}

	@Provides
	ProtectItemNotifyConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(ProtectItemNotifyConfig.class);
	}

	public boolean isInPVP() {
		return client.getVar(Varbits.PVP_SPEC_ORB) == 1;
	}

	public boolean isProtectItemOn() {
		return protectItemOn;
	}
}

