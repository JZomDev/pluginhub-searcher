package com.clantracker;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ClanTrackerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ClanTrackerPlugin.class);
		RuneLite.main(args);
	}
}
package com.clantracker;

import com.clantracker.api.APIClient;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.clan.ClanChannel;
import net.runelite.api.clan.ClanID;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.ClanChannelChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.task.Schedule;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Response;


import java.io.IOException;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;

@Slf4j
@PluginDescriptor(
		name = "Clan Tracker",
		description = "Tracks clan information and drops"
)

public class ClanTrackerPlugin extends Plugin
{
	@Inject
	private Client client;

	// ClientThread for async methods
	@Inject
	private ClientThread clientThread;

	// Injects our config
	@Inject
	private ClanTrackerConfig config;

	@Inject
	private APIClient apiClient;

	// Sequence number
	public int sequenceNumber = 0;

	// Valid clan
	public boolean validClan = false;

	// Provides our config
	@Provides
	ClanTrackerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ClanTrackerConfig.class);
	}

	private Boolean loggedIn()
	{
		return client.getGameState().equals(GameState.LOGGED_IN);
	}

	public void setSequenceNumber(int newSequenceNumber) {
		this.sequenceNumber = newSequenceNumber;
	}

	public int getSequenceNumber(){
		return this.sequenceNumber;
	}

	@Override
	protected void startUp()
	{
		// runs on plugin startup
		setSequenceNumber(-1);
	}

	@Override
	protected void shutDown()
	{
		// runs on plugin shutdown
	}

	public enum SystemMessageType {
		NORMAL(1),
		DROP(2),
		RAID_DROP(3),
		PET_DROP(4),
		PERSONAL_BEST(5),
		COLLECTION_LOG(6),
		QUEST(7),
		PVP(8),
		LOGIN(-1);

		public final int code;

		private SystemMessageType(int code) {
			this.code = code;
		}
	}

	private SystemMessageType getSystemMessageType(String message)
	{
		if (message.contains("received a drop:")) {
			return SystemMessageType.DROP;
		} else if (message.contains("received special loot from a raid:")) {
			return SystemMessageType.RAID_DROP;
		} else if (message.contains("has completed a quest:")) {
			return SystemMessageType.QUEST;
		} else if (message.contains("received a new collection log item:")) {
			return SystemMessageType.COLLECTION_LOG;
		} else if (message.contains("personal best:")) {
			return SystemMessageType.PERSONAL_BEST;
		} else if (message.contains("To talk in your clan's channel, start each line of chat with")) {
			return SystemMessageType.LOGIN;
		} else if (message.contains("has defeated") || message.contains("has been defeated by")) {
			return SystemMessageType.PVP;
		} else if (message.contains("has a funny feeling like")) {
			return SystemMessageType.PET_DROP;
		} else {
			return SystemMessageType.NORMAL;
		}
	}

	private Callback getMessageCallback(){
		Callback callback = new Callback() {
			@Override
			public void onFailure(Call call, IOException e)
			{
				setSequenceNumber(-1);
			}

			@Override
			public void onResponse(Call call, Response response) throws IOException
			{
				if(response.body()==null) {
					log.debug("API Call - Response was null.");
					response.close();
					setSequenceNumber(-1);
				} else {
					String responseString = response.body().string();

					JsonObject jsonResponse = new JsonParser().parse(responseString).getAsJsonObject();
					int responseSequenceNumber = jsonResponse.get("sequence_number").getAsInt();
					response.close();

					if (response.code() == 403) {
						setSequenceNumber(responseSequenceNumber);
					}
				}
			}
		};
		return callback;
	}

	@Subscribe
	private void onClanChannelChanged(ClanChannelChanged event)
	{
		if (event.getClanId() == ClanID.CLAN)
		{
			ClanChannel clan = client.getClanChannel();
			if (clan == null) return;

			String clanName = client.getClanChannel().getName();
			if (clanName == null) return;

			clanName = clanName.replace((char)160, ' ');

			try {
				Callback callback = new Callback() {
					public void onResponse(Call call, Response response)
							throws IOException {
						if (response.body() == null)
						{
							log.debug("API Call - Response was null.");
							response.close();
						}
						else
						{
							if (response.code() == 200)
							{
								validClan = true;
								String responseString = response.body().string();

								JsonObject jsonResponse = new JsonParser().parse(responseString).getAsJsonObject();
								response.close();

								setSequenceNumber(jsonResponse.get("sequence_number").getAsInt());
							} else {
								validClan = false;
							}
						}
					}

					public void onFailure(Call call, IOException e) {
						setSequenceNumber(-1);
					}
				};
				apiClient.getSequence(clanName, callback);

			} catch (IOException e) {
				setSequenceNumber(-1);
			}
		}
	}
	@Subscribe
	private void onChatMessage(ChatMessage chatMessage)
	{
		if (!validClan) return;

		String author;
		String content;
		String clanName = "";

		switch (chatMessage.getType()) {
			case CLAN_CHAT:
				author = chatMessage.getName().replace((char)160, ' ').replaceAll("<img=\\d+>", "");
				content = sanitizeMessage(chatMessage.getMessage());
				clanName = client.getClanChannel().getName().replace((char)160, ' ');

				if (!content.contains("</col>")) {
					try {
						apiClient.message(clanName, config.pluginPassword(), sequenceNumber, 0, author, content, 0, 3, getMessageCallback());
						setSequenceNumber(sequenceNumber + 1);
					} catch (IOException e) {
						throw new RuntimeException(e);
					}
				}
				break;
			case CLAN_MESSAGE:
				author = chatMessage.getName().replace((char)160, ' ').replaceAll("<img=\\d+>", "");
				content = sanitizeMessage(chatMessage.getMessage());
				clanName = client.getClanChannel().getName().replace((char)160, ' ');

				SystemMessageType messageType = getSystemMessageType(content);
				if (!content.contains("</col>")){
					try {
						apiClient.message(clanName, config.pluginPassword(), sequenceNumber, messageType.code, author, content, 0, 3, getMessageCallback());
						setSequenceNumber(sequenceNumber + 1);
					} catch (IOException e) {
						throw new RuntimeException(e);
					}
				}
				break;
			default:
				break;
		}
	}

	private List<String> getOnlineClanMembers() {
		List<net.runelite.api.clan.ClanChannelMember> onlineMembers = client.getClanChannel().getMembers();
		List<String> onlineClanMembers = new ArrayList<String>();

		for (int i = 0; i < onlineMembers.size(); i++) {
			if (client.getClanSettings().titleForRank(onlineMembers.get(i).getRank()).getName().equals("Guest")) {
			} else {
				onlineClanMembers.add(onlineMembers.get(i).getName());
			}
		}
		return onlineClanMembers;
	}
	@Schedule(
			period = 5,
			unit = ChronoUnit.MINUTES,
			asynchronous = true
	)
	public void onlineCountScheduleWrapper()
	{
		clientThread.invoke(this::sendClanOnlineCount);
	}

	public Callback getOnlineCountCallback()
	{
		Callback callback = new Callback() {
			public void onResponse(Call call, Response response)
					throws IOException {
			}

			public void onFailure(Call call, IOException e) {
				log.debug("Error " + e);
			}
		};
		return callback;
	}
	public void sendClanOnlineCount()
	{
		if (!loggedIn()) return;


		ClanChannel clan = client.getClanChannel();
		if (clan == null) return;

		String clanName = client.getClanChannel().getName();
		if (clanName == null) return;

		List<String> onlineMembers = getOnlineClanMembers();
		try {
			apiClient.sendOnlineCount(onlineMembers, clanName.replace((char)160, ' '), config.pluginPassword(), getOnlineCountCallback());
		} catch (IOException e) {
			log.debug("Exception!\n" + e);
		}
	}

	private String sanitizeMessage(String message)
	{
		String newMessage = message;
		newMessage = newMessage.replace((char)160, ' ');
		newMessage = newMessage.replace("<lt>", "<");
		newMessage = newMessage.replace("<gt>", ">");
		return additionalCustomizations(newMessage);
	}

	private String additionalCustomizations(String message)
	{
		String newMessage = message;
		newMessage = newMessage.replaceAll("\\<img=\\d+\\>", "");
		return newMessage;
	}
}
package com.clantracker;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("Clan2Discord")

public interface ClanTrackerConfig extends Config
{
	@ConfigItem(
			keyName = "pluginPassword",
			name = "Plugin Password",
			description = "Password is required for validation",
			position = 0
	)
	default String pluginPassword()
	{
		return "";
	}

	@ConfigItem(
			keyName = "apiUrl",
			name = "API Url",
			description = "URL of clan tracker API",
			position = 1
	)
	default String apiUrl()
	{
		return "";
	}

}
package com.clantracker.api;

import com.clantracker.ClanTrackerConfig;
import com.clantracker.ClanTrackerPlugin;
import com.google.gson.Gson;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;
import net.runelite.http.api.RuneLiteAPI;
import okhttp3.*;

import javax.inject.Inject;

@Slf4j
public class APIClient {

    // Injects our config
    @Inject
    private ClanTrackerConfig config;
    // Provides our config
    @Provides
    ClanTrackerConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(ClanTrackerConfig.class);
    }

    @Inject
    private Gson gson;

    private static final MediaType JSON = MediaType.parse("application/json");
    private static final String ANALYZE = "analyze";
    private static final String ONLINE_COUNT = "onlinecount";
    private static final String GET_SEQUENCE = "getsequence";


    private static OkHttpClient okHttpClient;


    @Inject
    public APIClient(OkHttpClient rlClient)
    {
        okHttpClient = rlClient.newBuilder()
                .pingInterval(0, TimeUnit.SECONDS)
                .connectTimeout(30, TimeUnit.SECONDS)
                .readTimeout(30, TimeUnit.SECONDS)
                .addNetworkInterceptor(chain ->
                {
                    Request headerRequest = chain.request()
                            .newBuilder()
                            .header("User-Agent", "ClanTracker-Plugin-1.0.0")
                            .build();
                    return chain.proceed(headerRequest);
                })
                .build();
    }

    public void getSequence(String clanName, Callback callback) throws IOException {
        if(config.apiUrl() == null) return;
        JsonObject apiRequestBody = new JsonObject();
        apiRequestBody.addProperty("clan", clanName);
        RequestBody body = RequestBody.create(JSON, (gson.toJson(apiRequestBody)));
        Request request = new Request.Builder()
                .post(body)
                .url(config.apiUrl() + GET_SEQUENCE)
                .build();

        OkHttpClient client = okHttpClient;
        Call call = client.newCall(request);
        call.enqueue(callback);
    }

    public void sendOnlineCount(List<String> onlinePlayersList, String clanName, String pluginPassword, Callback callback) throws IOException
    {
        if(config.apiUrl() == null) return;
        int onlineCount = onlinePlayersList.size();
        JsonObject apiRequestBody = new JsonObject();
        apiRequestBody.addProperty("clan", clanName);
        apiRequestBody.addProperty("cpw", pluginPassword);
        apiRequestBody.addProperty("onlineCount", onlineCount);
        RequestBody body = RequestBody.create(JSON, (gson.toJson(apiRequestBody)));
        Request request = new Request.Builder()
                .post(body)
                .url(config.apiUrl() + ONLINE_COUNT)
                .build();
        OkHttpClient client = okHttpClient;
        Call call = client.newCall(request);
        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                callback.onFailure(call, e);
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                callback.onResponse(call, response);
                response.close();
            }
        });
    }

    public void message(String clanName, String pluginPassword, int sequenceNumber, int requestType, String author, String content, int retryAttempt, int maxAttempts, Callback callback) throws IOException
    {
        if(config.apiUrl() == null) return;
        JsonObject apiRequestBody = new JsonObject();
        apiRequestBody.addProperty("clan", clanName);
        apiRequestBody.addProperty("cpw", pluginPassword);
        apiRequestBody.addProperty("sequence_number", sequenceNumber);
        apiRequestBody.addProperty("req_type", requestType);
        apiRequestBody.addProperty("author", author);
        apiRequestBody.addProperty("content", content);

        RequestBody body = RequestBody.create(JSON, (gson.toJson(apiRequestBody)));
        Request request = new Request.Builder()
                .post(body)
                .url(config.apiUrl() + ANALYZE)
                .build();
        OkHttpClient client = okHttpClient;
        Call call = client.newCall(request);
        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                if (retryAttempt < maxAttempts) {
                    try {
                        message(clanName, pluginPassword, sequenceNumber, requestType, author, content, retryAttempt + 1, maxAttempts, callback);
                    } catch (IOException ex) {
                        throw new RuntimeException(ex);
                    }
                } else {
                    callback.onFailure(call, e);
                }
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                callback.onResponse(call, response);
            }
        });
    }
}

