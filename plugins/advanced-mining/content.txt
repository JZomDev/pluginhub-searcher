package com.advancedmining;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AdvancedMiningPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AdvancedMiningPlugin.class);
		RuneLite.main(args);
	}
}
package com.advancedmining;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;

import com.google.common.collect.ImmutableSet;
import net.runelite.api.*;
import net.runelite.client.plugins.xptracker.XpTrackerService;

import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ComponentOrientation;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

class AdvancedMiningOverlay extends OverlayPanel {
    private static final String MINING_RESET = "Reset";

    private final Client client;
    private final AdvancedMiningPlugin plugin;
    private final AdvancedMiningConfig config;
    private final XpTrackerService xpTrackerService;


    private static final ImmutableSet<Integer> MLM_REGION = ImmutableSet.of(14679, 14680, 14681, 14935, 14936, 14937, 15191, 15192, 15193);

    private boolean isInMLMRegion() {
        GameState gameState = client.getGameState();
        if (gameState != GameState.LOGGED_IN
                && gameState != GameState.LOADING)
        {
            return false;
        }

        int[] currentMapRegions = client.getMapRegions();

        // Verify that all regions exist in MLM_REGION
        for (int region : currentMapRegions)
        {
            if (!MLM_REGION.contains(region))
            {
                return false;
            }
        }

        return true;
    }

    @Inject
    private AdvancedMiningOverlay(final Client client, final AdvancedMiningPlugin plugin, final AdvancedMiningConfig config, XpTrackerService xpTrackerService) {
        super(plugin);
        setPosition(OverlayPosition.TOP_LEFT);
        this.client = client;
        this.plugin = plugin;
        this.config = config;
        this.xpTrackerService = xpTrackerService;
        addMenuEntry(MenuAction.RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Advanced Mining overlay");
        addMenuEntry(MenuAction.RUNELITE_OVERLAY, MINING_RESET, "Advanced Mining overlay", e -> plugin.setSession(null));
    }

    @Override
    public Dimension render(Graphics2D graphics) {

        if (!isInMLMRegion()) {
            MiningSession session = plugin.getSession();
            if (session == null || session.getLastMined() == null || !config.showMiningStats())
            {
                return null;
            }

            panelComponent.setOrientation(ComponentOrientation.VERTICAL);
            if (config.showMiningState()) {
                Pickaxe pickaxe = plugin.getPickaxe();
                if (pickaxe != null && (pickaxe.matchesMiningAnimation(client.getLocalPlayer())||
                        client.getLocalPlayer().getAnimation() == AnimationID.DENSE_ESSENCE_CHIPPING)) {
                    panelComponent.getChildren().add(TitleComponent.builder()
                            .text("Mining")
                            .color(Color.GREEN)
                            .build());
                } else {
                    panelComponent.getChildren().add(TitleComponent.builder()
                            .text("NOT mining")
                            .color(Color.RED)
                            .build());
                }
            }

            int actions = xpTrackerService.getActions(Skill.MINING);
            if (actions > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Total mined:")
                        .right(Integer.toString(actions))
                        .build());

                if (actions > 2) {
                    panelComponent.getChildren().add(LineComponent.builder()
                            .left("Mined/hr:")
                            .right(Integer.toString(xpTrackerService.getActionsHr(Skill.MINING)))
                            .build());
                }
            }
        }
        return super.render(graphics);
    }
}
package com.advancedmining;

import com.google.common.collect.ImmutableMap;
import java.util.Map;
import lombok.Getter;
import static net.runelite.api.AnimationID.MINING_3A_PICKAXE;
import static net.runelite.api.AnimationID.MINING_ADAMANT_PICKAXE;
import static net.runelite.api.AnimationID.MINING_BLACK_PICKAXE;
import static net.runelite.api.AnimationID.MINING_BRONZE_PICKAXE;
import static net.runelite.api.AnimationID.MINING_CRASHEDSTAR_3A;
import static net.runelite.api.AnimationID.MINING_CRASHEDSTAR_ADAMANT;
import static net.runelite.api.AnimationID.MINING_CRASHEDSTAR_BLACK;
import static net.runelite.api.AnimationID.MINING_CRASHEDSTAR_BRONZE;
import static net.runelite.api.AnimationID.MINING_CRASHEDSTAR_CRYSTAL;
import static net.runelite.api.AnimationID.MINING_CRASHEDSTAR_DRAGON;
import static net.runelite.api.AnimationID.MINING_CRASHEDSTAR_DRAGON_OR;
import static net.runelite.api.AnimationID.MINING_CRASHEDSTAR_DRAGON_OR_TRAILBLAZER;
import static net.runelite.api.AnimationID.MINING_CRASHEDSTAR_DRAGON_UPGRADED;
import static net.runelite.api.AnimationID.MINING_CRASHEDSTAR_GILDED;
import static net.runelite.api.AnimationID.MINING_CRASHEDSTAR_INFERNAL;
import static net.runelite.api.AnimationID.MINING_CRASHEDSTAR_IRON;
import static net.runelite.api.AnimationID.MINING_CRASHEDSTAR_MITHRIL;
import static net.runelite.api.AnimationID.MINING_CRASHEDSTAR_RUNE;
import static net.runelite.api.AnimationID.MINING_CRASHEDSTAR_STEEL;
import static net.runelite.api.AnimationID.MINING_CRYSTAL_PICKAXE;
import static net.runelite.api.AnimationID.MINING_DRAGON_PICKAXE;
import static net.runelite.api.AnimationID.MINING_DRAGON_PICKAXE_OR;
import static net.runelite.api.AnimationID.MINING_DRAGON_PICKAXE_OR_TRAILBLAZER;
import static net.runelite.api.AnimationID.MINING_DRAGON_PICKAXE_UPGRADED;
import static net.runelite.api.AnimationID.MINING_GILDED_PICKAXE;
import static net.runelite.api.AnimationID.MINING_INFERNAL_PICKAXE;
import static net.runelite.api.AnimationID.MINING_IRON_PICKAXE;
import static net.runelite.api.AnimationID.MINING_MITHRIL_PICKAXE;
import static net.runelite.api.AnimationID.MINING_MOTHERLODE_3A;
import static net.runelite.api.AnimationID.MINING_MOTHERLODE_ADAMANT;
import static net.runelite.api.AnimationID.MINING_MOTHERLODE_BLACK;
import static net.runelite.api.AnimationID.MINING_MOTHERLODE_BRONZE;
import static net.runelite.api.AnimationID.MINING_MOTHERLODE_CRYSTAL;
import static net.runelite.api.AnimationID.MINING_MOTHERLODE_DRAGON;
import static net.runelite.api.AnimationID.MINING_MOTHERLODE_DRAGON_OR;
import static net.runelite.api.AnimationID.MINING_MOTHERLODE_DRAGON_OR_TRAILBLAZER;
import static net.runelite.api.AnimationID.MINING_MOTHERLODE_DRAGON_UPGRADED;
import static net.runelite.api.AnimationID.MINING_MOTHERLODE_GILDED;
import static net.runelite.api.AnimationID.MINING_MOTHERLODE_INFERNAL;
import static net.runelite.api.AnimationID.MINING_MOTHERLODE_IRON;
import static net.runelite.api.AnimationID.MINING_MOTHERLODE_MITHRIL;
import static net.runelite.api.AnimationID.MINING_MOTHERLODE_RUNE;
import static net.runelite.api.AnimationID.MINING_MOTHERLODE_STEEL;
import static net.runelite.api.AnimationID.MINING_MOTHERLODE_TRAILBLAZER;
import static net.runelite.api.AnimationID.MINING_RUNE_PICKAXE;
import static net.runelite.api.AnimationID.MINING_STEEL_PICKAXE;
import static net.runelite.api.AnimationID.MINING_TRAILBLAZER_PICKAXE;
import static net.runelite.api.AnimationID.MINING_TRAILBLAZER_PICKAXE_2;
import static net.runelite.api.AnimationID.MINING_TRAILBLAZER_PICKAXE_3;
import static net.runelite.api.ItemID.ADAMANT_PICKAXE;
import static net.runelite.api.ItemID.BLACK_PICKAXE;
import static net.runelite.api.ItemID.BRONZE_PICKAXE;
import static net.runelite.api.ItemID.CRYSTAL_PICKAXE;
import static net.runelite.api.ItemID.DRAGON_PICKAXE;
import static net.runelite.api.ItemID.DRAGON_PICKAXE_OR;
import static net.runelite.api.ItemID.DRAGON_PICKAXE_OR_25376;
import static net.runelite.api.ItemID.DRAGON_PICKAXE_12797;
import static net.runelite.api.ItemID.GILDED_PICKAXE;
import static net.runelite.api.ItemID.INFERNAL_PICKAXE;
import static net.runelite.api.ItemID.IRON_PICKAXE;
import static net.runelite.api.ItemID.MITHRIL_PICKAXE;
import static net.runelite.api.ItemID.RUNE_PICKAXE;
import static net.runelite.api.ItemID.STEEL_PICKAXE;
import static net.runelite.api.ItemID._3RD_AGE_PICKAXE;
import static net.runelite.api.ItemID.INFERNAL_PICKAXE_OR;
import net.runelite.api.Player;

@Getter
enum Pickaxe {
    BRONZE(BRONZE_PICKAXE, MINING_BRONZE_PICKAXE, MINING_MOTHERLODE_BRONZE, MINING_CRASHEDSTAR_BRONZE),
    IRON(IRON_PICKAXE, MINING_IRON_PICKAXE, MINING_MOTHERLODE_IRON, MINING_CRASHEDSTAR_IRON),
    STEEL(STEEL_PICKAXE, MINING_STEEL_PICKAXE, MINING_MOTHERLODE_STEEL, MINING_CRASHEDSTAR_STEEL),
    BLACK(BLACK_PICKAXE, MINING_BLACK_PICKAXE, MINING_MOTHERLODE_BLACK, MINING_CRASHEDSTAR_BLACK),
    MITHRIL(MITHRIL_PICKAXE, MINING_MITHRIL_PICKAXE, MINING_MOTHERLODE_MITHRIL, MINING_CRASHEDSTAR_MITHRIL),
    ADAMANT(ADAMANT_PICKAXE, MINING_ADAMANT_PICKAXE, MINING_MOTHERLODE_ADAMANT, MINING_CRASHEDSTAR_ADAMANT),
    RUNE(RUNE_PICKAXE, MINING_RUNE_PICKAXE, MINING_MOTHERLODE_RUNE, MINING_CRASHEDSTAR_RUNE),
    GILDED(GILDED_PICKAXE, MINING_GILDED_PICKAXE, MINING_MOTHERLODE_GILDED, MINING_CRASHEDSTAR_GILDED),
    DRAGON(DRAGON_PICKAXE, MINING_DRAGON_PICKAXE, MINING_MOTHERLODE_DRAGON, MINING_CRASHEDSTAR_DRAGON),
    DRAGON_OR(DRAGON_PICKAXE_OR, MINING_DRAGON_PICKAXE_OR, MINING_MOTHERLODE_DRAGON_OR, MINING_CRASHEDSTAR_DRAGON_OR),
    DRAGON_OR_TRAILBLAZER(DRAGON_PICKAXE_OR_25376, MINING_DRAGON_PICKAXE_OR_TRAILBLAZER, MINING_MOTHERLODE_DRAGON_OR_TRAILBLAZER, MINING_CRASHEDSTAR_DRAGON_OR_TRAILBLAZER),
    DRAGON_UPGRADED(DRAGON_PICKAXE_12797, MINING_DRAGON_PICKAXE_UPGRADED, MINING_MOTHERLODE_DRAGON_UPGRADED, MINING_CRASHEDSTAR_DRAGON_UPGRADED),
    INFERNAL(INFERNAL_PICKAXE, MINING_INFERNAL_PICKAXE, MINING_MOTHERLODE_INFERNAL, MINING_CRASHEDSTAR_INFERNAL),
    THIRDAGE(_3RD_AGE_PICKAXE, MINING_3A_PICKAXE, MINING_MOTHERLODE_3A, MINING_CRASHEDSTAR_3A),
    CRYSTAL(CRYSTAL_PICKAXE, MINING_CRYSTAL_PICKAXE, MINING_MOTHERLODE_CRYSTAL, MINING_CRASHEDSTAR_CRYSTAL),
    TRAILBLAZER(INFERNAL_PICKAXE_OR, MINING_TRAILBLAZER_PICKAXE, MINING_TRAILBLAZER_PICKAXE_2,
            MINING_TRAILBLAZER_PICKAXE_3, MINING_MOTHERLODE_TRAILBLAZER);

    private final int itemId;
    private final int[] animIds;

    private static final Map<Integer, Pickaxe> PICKAXE_ANIM_IDS;

    static {
        ImmutableMap.Builder<Integer, Pickaxe> builder = new ImmutableMap.Builder<>();

        for (Pickaxe pickaxe : values()) {
            for (int animId : pickaxe.animIds) {
                builder.put(animId, pickaxe);
            }
        }
        PICKAXE_ANIM_IDS = builder.build();
    }

    Pickaxe(int itemId, int ... animIds) {
        this.itemId = itemId;
        this.animIds = animIds;
    }

    boolean matchesMiningAnimation(final Player player) {
        return player != null && fromAnimation(player.getAnimation()) == this;
    }

    static Pickaxe fromAnimation(int animId) {
        return PICKAXE_ANIM_IDS.get(animId);
    }
}
package com.advancedmining;

import com.google.common.collect.ImmutableSet;
import com.google.inject.Provides;
import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;
import javax.annotation.Nullable;
import javax.inject.Inject;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.*;

import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.xptracker.XpTrackerPlugin;
import net.runelite.client.ui.overlay.OverlayManager;

import static net.runelite.api.ObjectID.*;

@PluginDescriptor(
		name = "Advanced Mining",
		description = "A more advanced mining plugin to display statistics and ore respawn timers",
		tags = {"mining", "advanced", "gems", "ore", "minerals", "essence", "overlay", "skilling", "timers", "rock", "clue", "geode", "calcified", "deposit", "bone", "shard", "star", "stardust"},
		conflicts = "Mining"
)
@PluginDependency(XpTrackerPlugin.class)
public class AdvancedMiningPlugin extends Plugin {
	private static final int ARCEUUS_REGION = 6972;
	private static final ImmutableSet<Integer> MLM_REGION = ImmutableSet.of(14679, 14680, 14681, 14935, 14936, 14937, 15191, 15192, 15193);
	public static final Pattern KOUREND_PATTERN = Pattern.compile(
			"You mined an extra block of essence thanks to your completion of the Kourend & Kebos Medium Diary."
	);
	public static final Pattern MINING_PATTERN = Pattern.compile(
			"(?:Your?|The) " +
					"(?:manage to|just|find|mined|Varrock platebody|cape|swing)" +
					" (?:mined?|quarry|some|found|an?|chip off|mine|enabled you|allows you|your) " +
					"(?:some|an?|minerals|extra|clue|to mine|pick)[\\w ]+(?:\\.|!)");
					/*"(?:some|an?|minerals|extra|clue|to mine|pick) " +
					"(?:while you mine|copper|tin|clay|iron|silver|coal|gold|bone shards|calcified deposit|mithril|adamantite|runite|amethyst|sandstone|granite|barronite shards|barronite deposit|Opal|piece of Jade|Red Topaz|Emerald|Sapphire|Ruby|Diamond|block of essence thanks to your completion of the Kourend & Kebos Medium Diary|geode|an additional ore|at the star)" +
					"(?:\\.|!)");*/

	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private AdvancedMiningOverlay overlay;

	@Inject
	private AdvancedMiningOthersOverlay advancedMiningOthersOverlay;

	@Inject
	private AdvancedMiningOresOverlay advancedMiningOresOverlay;

	@Inject
	private AdvancedMiningAdditionalOverlay advancedMiningAdditionalOverlay;

	@Inject
	private AdvancedMiningGemsOverlay advancedMiningGemsOverlay;

	@Inject
	private AdvancedMiningEssenceOverlay advancedMiningEssenceOverlay;

	@Inject
	private AdvancedMiningPrayerOverlay advancedMiningPrayerOverlay;

	@Inject
	private MiningRocksOverlay rocksOverlay;

	@Inject
	private AdvancedMiningConfig config;

	private int previousAmount;
	private int newInventoryAmount;
    private int newAmount;

	@Getter
	@Nullable
	@Setter(AccessLevel.PACKAGE)
	private MiningSession session;

	@Getter(AccessLevel.PACKAGE)
	private final List<RockRespawn> respawns = new ArrayList<>();
	private boolean recentlyLoggedIn;

	@Getter
	@Nullable
	private Pickaxe pickaxe;

	@Provides
	AdvancedMiningConfig getConfig(ConfigManager configManager) {
		return configManager.getConfig(AdvancedMiningConfig.class);
	}

	@Override
	protected void startUp() {
		overlayManager.add(overlay);
		overlayManager.add(advancedMiningOthersOverlay);
		overlayManager.add(advancedMiningOresOverlay);
		overlayManager.add(advancedMiningAdditionalOverlay);
		overlayManager.add(advancedMiningGemsOverlay);
		overlayManager.add(advancedMiningEssenceOverlay);
		overlayManager.add(advancedMiningPrayerOverlay);
		overlayManager.add(rocksOverlay);
	}

	@Override
	protected void shutDown() throws Exception {
		session = null;
		pickaxe = null;
		overlayManager.remove(overlay);
		overlayManager.remove(advancedMiningOthersOverlay);
		overlayManager.remove(advancedMiningOresOverlay);
		overlayManager.remove(advancedMiningAdditionalOverlay);
		overlayManager.remove(advancedMiningGemsOverlay);
		overlayManager.remove(advancedMiningEssenceOverlay);
		overlayManager.remove(advancedMiningPrayerOverlay);
		overlayManager.remove(rocksOverlay);
		respawns.forEach(respawn -> clearHintArrowAt(respawn.getWorldPoint()));
		respawns.clear();
	}

	private boolean isInArceuusRegion() {
		if (client.getLocalPlayer() != null) {
			return client.getLocalPlayer().getWorldLocation().getRegionID() == ARCEUUS_REGION;
		}
		return false;
	}

	private boolean isInMLMRegion() {
		GameState gameState = client.getGameState();
		if (gameState != GameState.LOGGED_IN
				&& gameState != GameState.LOADING)
		{
			return false;
		}

		int[] currentMapRegions = client.getMapRegions();

		// Verify that all regions exist in MLM_REGION
		for (int region : currentMapRegions)
		{
			if (!MLM_REGION.contains(region))
			{
				return false;
			}
		}

		return true;
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event) {
		switch (event.getGameState()) {
			case HOPPING:
				respawns.clear();
				break;
			case LOGGED_IN:
				// After login rocks that are depleted will be changed,
				// so wait for the next game tick before watching for
				// rocks to deplete
				recentlyLoggedIn = true;
				break;
		}
	}

	@Subscribe
	public void onAnimationChanged(final AnimationChanged event) {
		Player local = client.getLocalPlayer();

		if (event.getActor() != local) {
			return;
		}

		int animId = local.getAnimation();
		if (animId == AnimationID.DENSE_ESSENCE_CHIPPING) {
			// Can't use chat messages to start mining session on Dense Essence as they don't have a chat message when mined,
			// so we track the session here instead.
			if (session == null) {
				session = new MiningSession();
			}
			session.setLastMined();
		} else {
			Pickaxe pickaxe = Pickaxe.fromAnimation(animId);
			if (pickaxe != null) {
				this.pickaxe = pickaxe;
				//Big thanks to Gamma1991 & Antimated for giving me the suggestions on how to get this to work better.
				if (isInArceuusRegion()) {
					session.updateOreFound(ItemID.DENSE_ESSENCE_BLOCK, +1);
				}
			}
		}
	}

	@Subscribe
	public void onGameTick(GameTick gameTick) {
		if (recentlyLoggedIn) {
				final ItemContainer itemContainer = client.getItemContainer(InventoryID.INVENTORY);
				final Item[] items = itemContainer.getItems();
					for (Item i : items) {
						if (i.getId() == ItemID.BLESSED_BONE_SHARDS) {
							previousAmount = i.getQuantity();
							recentlyLoggedIn = false;
						}
						if (i.getId() == ItemID.STARDUST) {
							previousAmount = i.getQuantity();
							recentlyLoggedIn = false;
						}
						if (i.getId() == ItemID.BARRONITE_SHARDS) {
							previousAmount = i.getQuantity();
							recentlyLoggedIn = false;
						}
					}
		}
		clearExpiredRespawns();
		recentlyLoggedIn = false;

		if (session == null || session.getLastMined() == null) {
			return;
		}

		if (pickaxe != null && pickaxe.matchesMiningAnimation(client.getLocalPlayer())) {
			session.setLastMined();
			return;
		}

		Duration statTimeout = Duration.ofMinutes(config.statTimeout());
		Duration sinceMined = Duration.between(session.getLastMined(), Instant.now());

		if (sinceMined.compareTo(statTimeout) >= 0) {
			resetSession();
		}
	}

	/**
	 * Clears expired respawns and removes the hint arrow from expired Daeyalt essence rocks.
	 */
	private void clearExpiredRespawns() {
		respawns.removeIf(rockRespawn -> {
			final boolean expired = rockRespawn.isExpired();

			if (expired && rockRespawn.getRock() == Rock.DAEYALT_ESSENCE) {
				clearHintArrowAt(rockRespawn.getWorldPoint());
			}
			return expired;
		});
	}

	public void resetSession() {
		session = null;
		pickaxe = null;
	}

	@Subscribe
	public void onGameObjectDespawned(GameObjectDespawned event) {
		if (client.getGameState() != GameState.LOGGED_IN || recentlyLoggedIn) {
			return;
		}

		final GameObject object = event.getGameObject();
		final int region = client.getLocalPlayer().getWorldLocation().getRegionID();

		Rock rock = Rock.getRock(object.getId());
		if (rock != null) {
			final WorldPoint point = object.getWorldLocation();

			if (rock == Rock.DAEYALT_ESSENCE) {
				respawns.removeIf(rockRespawn -> rockRespawn.getWorldPoint().equals(point));
				clearHintArrowAt(point);
			} else {
				RockRespawn rockRespawn = new RockRespawn(rock, point, Instant.now(), (int) rock.getRespawnTime(region).toMillis(), rock.getZOffset());
				respawns.add(rockRespawn);
			}
		}
	}

	private void clearHintArrowAt(WorldPoint worldPoint) {
		if (client.getHintArrowType() == HintArrowType.COORDINATE && client.getHintArrowPoint().equals(worldPoint)) {
			client.clearHintArrow();
		}
	}

	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned event) {
		if (client.getGameState() != GameState.LOGGED_IN || recentlyLoggedIn) {
			return;
		}

		GameObject object = event.getGameObject();
		Rock rock = Rock.getRock(object.getId());

		// Inverse timer to track daeyalt essence active duration
		if (rock == Rock.DAEYALT_ESSENCE) {
			final int region = client.getLocalPlayer().getWorldLocation().getRegionID();
			RockRespawn rockRespawn = new RockRespawn(rock, object.getWorldLocation(), Instant.now(), (int) rock.getRespawnTime(region).toMillis(), rock.getZOffset());
			respawns.add(rockRespawn);
			client.setHintArrow(object.getWorldLocation());
		}
		// If the Lovakite ore or Calcified Rock respawns before the timer is up, remove it
		else if (rock == Rock.LOVAKITE || rock == Rock.CALCIFIED_ROCK) {
			final WorldPoint point = object.getWorldLocation();
			respawns.removeIf(rockRespawn -> rockRespawn.getWorldPoint().equals(point));
		}
	}

	@Subscribe
	public void onWallObjectSpawned(WallObjectSpawned event) {
		if (client.getGameState() != GameState.LOGGED_IN) {
			return;
		}

		final WallObject object = event.getWallObject();
		final int region = client.getLocalPlayer().getWorldLocation().getRegionID();

		switch (object.getId()) {
			case EMPTY_WALL: {
				Rock rock = Rock.AMETHYST;
				RockRespawn rockRespawn = new RockRespawn(rock, object.getWorldLocation(), Instant.now(), (int) rock.getRespawnTime(region).toMillis(), rock.getZOffset());
				respawns.add(rockRespawn);
				break;
			}
			case ROCKS_41549: // Depleted barronite vein
			case ROCKS_41550: { // Depleted barronite vein
				Rock rock = Rock.BARRONITE;
				RockRespawn rockRespawn = new RockRespawn(rock, object.getWorldLocation(), Instant.now(), (int) rock.getRespawnTime(region).toMillis(), rock.getZOffset());
				respawns.add(rockRespawn);
				break;
			}
			case DEPLETED_VEIN: { // Depleted gold vein
				Rock rock = Rock.MINERAL_VEIN;
				RockRespawn rockRespawn = new RockRespawn(rock, object.getWorldLocation(), Instant.now(), (int) rock.getRespawnTime(region).toMillis(), rock.getZOffset());
				respawns.add(rockRespawn);
				break;
			}
			case ORE_VEIN: // Motherlode vein
			case ORE_VEIN_26662: // Motherlode vein
			case ORE_VEIN_26663: // Motherlode vein
			case ORE_VEIN_26664: // Motherlode vein
			case BARRONITE_ROCKS: // Barronite vein
			case BARRONITE_ROCKS_41548: // Barronite vein
			case GOLD_VEIN: // Arzinian gold vein
			case GOLD_VEIN_5990: // Gold vein
			case GOLD_VEIN_5991: { // Gold vein
				// If the vein respawns before the timer is up, remove it
				final WorldPoint point = object.getWorldLocation();
				respawns.removeIf(rockRespawn -> rockRespawn.getWorldPoint().equals(point));
				break;
			}
		}
	}

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event) {
		if (event.getItemContainer() == client.getItemContainer(InventoryID.INVENTORY)) {
			Item[] items = event.getItemContainer().getItems();
			for (Item i : items) {
                if (i.getId() == ItemID.BLESSED_BONE_SHARDS) {
                    newInventoryAmount = i.getQuantity();
                }
				if (i.getId() == ItemID.STARDUST) {
					newInventoryAmount = i.getQuantity();
					checkAmount();
					session.updateOthersMined(ItemID.STARDUST, newAmount);
				}
				if (i.getId() == ItemID.BARRONITE_SHARDS) {
					newInventoryAmount = i.getQuantity();
				}
			}
		}
	}

	private void checkAmount() {
		newAmount = newInventoryAmount - previousAmount;
		previousAmount = newInventoryAmount;
	}

	@Subscribe
	public void onChatMessage(ChatMessage event) {
		String chatMessage = event.getMessage();

        if (event.getType() == ChatMessageType.PUBLICCHAT) {
            if (chatMessage.equals("Smashing!")) {
				session.updateOthersMined(ItemID.DRAGON_PICKAXE_12797, +1);
            }
        }

		if (event.getType() == ChatMessageType.SPAM || event.getType() == ChatMessageType.GAMEMESSAGE) {
			if (KOUREND_PATTERN.matcher(event.getMessage()).matches()) {
				session.updateOreFound(SpriteID.QUESTS_PAGE_ICON_GREEN_ACHIEVEMENT_DIARIES, +1);
			}
			if (MINING_PATTERN.matcher(event.getMessage()).matches()) {
				if (session == null) {
					session = new MiningSession();
				}
				session.setLastMined();
				//int miningSKILL
				if (!isInMLMRegion()) {
					switch (chatMessage) {
						case "You find some minerals while you mine.":
							session.updateOthersMined(ItemID.UNIDENTIFIED_MINERALS, +1);
							break;
						case "You swing your pick at the star.":
							checkAmount();
							break;
						case "You manage to mine some volcanic ash.":
							//if ()

						case "You manage to mine some barronite shards.":
							checkAmount();
							session.updateOthersMined(ItemID.BARRONITE_SHARDS, newAmount);
							break;
						case "You manage to mine a barronite deposit.":
							session.updateOthersMined(ItemID.BARRONITE_DEPOSIT, +1);
							break;
						case "You manage to chip off some bone shards.":
							checkAmount();
							session.updateOthersMined(ItemID.BLESSED_BONE_SHARDS, newAmount);
							break;
						case "You manage to mine a calcified deposit.":
							session.updateOthersMined(ItemID.CALCIFIED_DEPOSIT, +1);
							break;
						case "You find a clue geode!":
							session.updateOthersMined(ItemID.CLUE_GEODE_BEGINNER, +1);
							break;

						case "You manage to mine some clay.":
							session.updateOreFound(ItemID.CLAY, +1);
							break;
						case "You manage to mine some copper.":
							session.updateOreFound(ItemID.COPPER_ORE, +1);
							break;
						case "You manage to mine some tin.":
							session.updateOreFound(ItemID.TIN_ORE, +1);
							break;
						case "You manage to mine some iron.":
							session.updateOreFound(ItemID.IRON_ORE, +1);
							break;
						case "You manage to mine some silver.":
							session.updateOreFound(ItemID.SILVER_ORE, +1);
							break;
						case "You manage to mine some coal.":
							session.updateOreFound(ItemID.COAL, +1);
							break;
						case "You manage to mine some gold.":
							session.updateOreFound(ItemID.GOLD_ORE, +1);
							break;
						case "You manage to mine some mithril.":
							session.updateOreFound(ItemID.MITHRIL_ORE, +1);
							break;
						case "You manage to mine some adamantite.":
							session.updateOreFound(ItemID.ADAMANTITE_ORE, +1);
							break;
						case "You manage to mine some runite.":
							session.updateOreFound(ItemID.RUNITE_ORE, +1);
							break;
						case "You manage to mine some amethyst.":
							session.updateOreFound(ItemID.AMETHYST, +1);
							break;

						case "The Varrock platebody enabled you to mine an additional ore.":
							session.updateAdditionalMined(ItemID.VARROCK_ARMOUR);
							break;
						case "Your cape allows you to mine an additional ore.":
							session.updateAdditionalMined(ItemID.MINING_CAPET);
							break;

						case "You just mined an Opal!":
							session.incrementGemFound(ItemID.UNCUT_OPAL);
							break;
						case "You just mined a piece of Jade!":
							session.incrementGemFound(ItemID.UNCUT_JADE);
							break;
						case "You just mined a Red Topaz!":
							session.incrementGemFound(ItemID.UNCUT_RED_TOPAZ);
							break;
						case "You just found a Sapphire!":
						case "You just mined a Sapphire!":
							session.incrementGemFound(ItemID.UNCUT_SAPPHIRE);
							break;
						case "You just found an Emerald!":
						case "You just mined an Emerald!":
							session.incrementGemFound(ItemID.UNCUT_EMERALD);
							break;
						case "You just found a Ruby!":
						case "You just mined a Ruby!":
							session.incrementGemFound(ItemID.UNCUT_RUBY);
							break;
						case "You just found a Diamond!":
						case "You just mined a Diamond!":
							session.incrementGemFound(ItemID.UNCUT_DIAMOND);
							break;
					}
				}
			}
		}
	}

	@Subscribe
	public void onScriptPreFired(ScriptPreFired scriptPreFired) {
		if (scriptPreFired.getScriptId() == ScriptID.ADD_OVERLAYTIMER_LOC) {
			var args = scriptPreFired.getScriptEvent().getArguments();
			int locCoord = (int) args[1];
			int locId = (int) args[2];
			int ticks = (int) args[5];

			switch (locId) {
				case DEPLETED_VEIN_26665: // Depleted motherlode vein
				case DEPLETED_VEIN_26666: // Depleted motherlode vein
				case DEPLETED_VEIN_26667: // Depleted motherlode vein
				case DEPLETED_VEIN_26668: { // Depleted motherlode vein
					WorldPoint worldPoint = new WorldPoint((locCoord >>> 14) & 0x3FFF, locCoord & 0x3FFF, (locCoord >>> 28) & 0x3);
					Rock rock = Rock.ORE_VEIN;
					RockRespawn rockRespawn = new RockRespawn(rock, worldPoint, Instant.now(), ticks * Constants.GAME_TICK_LENGTH, rock.getZOffset());
					respawns.add(rockRespawn);
					break;
				}
			}
		}
	}
}
package com.advancedmining;

import com.google.common.collect.ImmutableMap;
import java.time.Duration;
import java.util.Map;
import lombok.AccessLevel;
import lombok.Getter;
import static net.runelite.api.ObjectID.*;
import static net.runelite.client.util.RSTimeUnit.*;

enum Rock {
    TIN(Duration.of(4, GAME_TICKS), 0, TIN_ROCKS_11360, TIN_ROCKS_11361),
    COPPER(Duration.of(4, GAME_TICKS), 0, COPPER_ROCKS_10943, COPPER_ROCKS_11161),
    IRON(Duration.of(9, GAME_TICKS), 0, IRON_ROCKS, IRON_ROCKS_11365, IRON_ROCKS_36203) {
        @Override
        Duration getRespawnTime(int region) {
            return region == MINING_GUILD ? Duration.of(4, GAME_TICKS) : super.respawnTime;
        }
    },
    COAL(Duration.of(49, GAME_TICKS), 0, COAL_ROCKS_11366, COAL_ROCKS_11367, COAL_ROCKS_36204) {
        @Override
        Duration getRespawnTime(int region) {
            switch (region) {
                case MINING_GUILD:
                    return Duration.of(24, GAME_TICKS);
                case MISCELLANIA:
                    return Duration.of(11, GAME_TICKS);
                default:
                    return super.respawnTime;
            }
        }
    },
    SILVER(Duration.of(100, GAME_TICKS), 0, SILVER_ROCKS, SILVER_ROCKS_11369, SILVER_ROCKS_36205),
    SANDSTONE(Duration.of(9, GAME_TICKS), 0, SANDSTONE_ROCKS),
    GOLD(Duration.of(100, GAME_TICKS), 0, GOLD_ROCKS, GOLD_ROCKS_11371, GOLD_ROCKS_36206),
    GRANITE(Duration.of(9, GAME_TICKS), 0, GRANITE_ROCKS),
    MITHRIL(Duration.of(200, GAME_TICKS), 0, MITHRIL_ROCKS, MITHRIL_ROCKS_11373, MITHRIL_ROCKS_36207) {
        @Override
        Duration getRespawnTime(int region) {
            return region == MINING_GUILD ? Duration.of(100, GAME_TICKS) : super.respawnTime;
        }
    },
    LOVAKITE(Duration.of(MiningRocksOverlay.LOVAKITE_ORE_MAX_RESPAWN_TIME, GAME_TICKS), 0, LOVAKITE_ROCKS, LOVAKITE_ROCKS_28597),
    ADAMANTITE(Duration.of(400, GAME_TICKS), 0, ADAMANTITE_ROCKS, ADAMANTITE_ROCKS_11375, ADAMANTITE_ROCKS_36208) {
        @Override
        Duration getRespawnTime(int region) {
            return region == MINING_GUILD || region == WILDERNESS_RESOURCE_AREA ? Duration.of(200, GAME_TICKS) : super.respawnTime;
        }
    },
    RUNITE(Duration.of(1200, GAME_TICKS), 0, RUNITE_ROCKS, RUNITE_ROCKS_11377, RUNITE_ROCKS_36209) {
        @Override
        Duration getRespawnTime(int region) {
            return region == MINING_GUILD ? Duration.of(600, GAME_TICKS) : super.respawnTime;
        }
    },
    ORE_VEIN(Duration.ZERO /* unknown */, 150),
    AMETHYST(Duration.of(125, GAME_TICKS), 120),
    ASH_VEIN(Duration.of(50, GAME_TICKS), 0, ASH_PILE),
    GEM_ROCK(Duration.of(99, GAME_TICKS), 0, GEM_ROCKS, GEM_ROCKS_11381),
    URT_SALT(Duration.of(9, GAME_TICKS), 0, URT_SALT_ROCKS),
    EFH_SALT(Duration.of(9, GAME_TICKS), 0, EFH_SALT_ROCKS),
    TE_SALT(Duration.of(9, GAME_TICKS), 0, TE_SALT_ROCKS),
    BASALT(Duration.of(9, GAME_TICKS), 0, BASALT_ROCKS),
    DAEYALT_ESSENCE(Duration.of(MiningRocksOverlay.DAEYALT_MAX_RESPAWN_TIME, GAME_TICKS), 0, DAEYALT_ESSENCE_39095),
    BARRONITE(Duration.of(89, GAME_TICKS), 140),
    MINERAL_VEIN(Duration.of(100, GAME_TICKS), 150),
    CALCIFIED_ROCK(Duration.of(60, GAME_TICKS), 150, CALCIFIED_ROCKS, CALCIFIED_ROCKS_51487, CALCIFIED_ROCKS_51489, CALCIFIED_ROCKS_51491);

    private static final int WILDERNESS_RESOURCE_AREA = 12605;
    private static final int MISCELLANIA = 10044;
    private static final int MINING_GUILD = 12183;
    private static final Map<Integer, Rock> ROCKS;

    static {
        ImmutableMap.Builder<Integer, Rock> builder = new ImmutableMap.Builder<>();
        for (Rock rock : values()) {
            for (int id : rock.ids) {
                builder.put(id, rock);
            }
        }
        ROCKS = builder.build();
    }

    private final Duration respawnTime;
    @Getter(AccessLevel.PACKAGE)
    private final int zOffset;
    private final int[] ids;

    Rock(Duration respawnTime, int zOffset, int... ids) {
        this.respawnTime = respawnTime;
        this.zOffset = zOffset;
        this.ids = ids;
    }

    Duration getRespawnTime(int region) {
        return respawnTime;
    }

    static Rock getRock(int id) {
        return ROCKS.get(id);
    }
}
package com.advancedmining;

import java.time.Instant;
import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.api.coords.WorldPoint;

@AllArgsConstructor
@Getter
class RockRespawn {
    private final Rock rock;
    private final WorldPoint worldPoint;
    private final Instant startTime;
    private final int respawnTime;
    private final int zOffset;

    boolean isExpired() {
        return Instant.now().isAfter(startTime.plusMillis(respawnTime));
    }
}
package com.advancedmining;

import net.runelite.api.ItemID;
import net.runelite.api.MenuAction;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ComponentOrientation;
import net.runelite.client.ui.overlay.components.ImageComponent;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import javax.inject.Inject;

import java.awt.*;
import java.time.Duration;
import java.time.Instant;

import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class AdvancedMiningGemsOverlay extends OverlayPanel {
    private final AdvancedMiningPlugin plugin;
    private final AdvancedMiningConfig config;
    private final ItemManager itemManager;

    @Inject
    private AdvancedMiningGemsOverlay(final AdvancedMiningPlugin plugin, final AdvancedMiningConfig config, ItemManager itemManager) {
        super(plugin);
        setPosition(OverlayPosition.TOP_LEFT);
        this.plugin = plugin;
        this.config = config;
        this.itemManager = itemManager;
        addMenuEntry(MenuAction.RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Gems Overlay");
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        MiningSession session = plugin.getSession();

        if ((session != null ? session.getLastGemFound() : null) == null || !config.showGemsFound()) {
            return null;
        }

        Duration statTimeout = Duration.ofMinutes(config.statTimeout());
        Duration sinceLastGem = Duration.between(session.getLastGemFound(), Instant.now());

        if (sinceLastGem.compareTo(statTimeout) >= 0)
        {
            return null;
        }

        int opalsFound = session.getOpalsFound();
        int jadesFound = session.getJadesFound();
        int topazsFound = session.getTopazsFound();
        int sapphiresFound = session.getSapphiresFound();
        int emeraldsFound = session.getEmeraldsFound();
        int rubiesFound = session.getRubiesFound();
        int diamondsFound = session.getDiamondsFound();

        if (opalsFound == 0 && jadesFound == 0 && topazsFound == 0 &&
                sapphiresFound == 0 && emeraldsFound == 0 && rubiesFound == 0 && diamondsFound == 0) {
            return null;
        }

        if(config.showLootIcons()) {
            panelComponent.setOrientation(ComponentOrientation.HORIZONTAL);
            if (opalsFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.UNCUT_OPAL, opalsFound, true)));
            }
            if (jadesFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.UNCUT_JADE, jadesFound, true)));
            }
            if (topazsFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.UNCUT_RED_TOPAZ, topazsFound, true)));
            }
            if (sapphiresFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.UNCUT_SAPPHIRE, sapphiresFound, true)));
            }
            if (emeraldsFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.UNCUT_EMERALD, emeraldsFound, true)));
            }
            if (rubiesFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.UNCUT_RUBY, rubiesFound, true)));
            }
            if (diamondsFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.UNCUT_DIAMOND, diamondsFound, true)));
            }
        } else {
            panelComponent.setOrientation(ComponentOrientation.VERTICAL);
            panelComponent.getChildren().add(TitleComponent.builder()
                    .text("Gems found")
                    .color(Color.YELLOW)
                    .build());
            if (opalsFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Opals:")
                        .right(Integer.toString(opalsFound))
                        .build());
            }
            if (jadesFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Jades:")
                        .right(Integer.toString(jadesFound))
                        .build());
            }
            if (topazsFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Red Topaz:")
                        .right(Integer.toString(topazsFound))
                        .build());
            }
            if (sapphiresFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Sapphires:")
                        .right(Integer.toString(sapphiresFound))
                        .build());
            }
            if (emeraldsFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Emeralds:")
                        .right(Integer.toString(emeraldsFound))
                        .build());
            }
            if (rubiesFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Rubies:")
                        .right(Integer.toString(rubiesFound))
                        .build());
            }
            if (diamondsFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Diamonds:")
                        .right(Integer.toString(diamondsFound))
                        .build());
            }
        }
        return super.render(graphics);
    }
}
package com.advancedmining;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.time.Instant;
import java.util.List;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ProgressPieComponent;

class MiningRocksOverlay extends Overlay {
    static final int DAEYALT_MAX_RESPAWN_TIME = 110; // Game ticks
    private static final int DAEYALT_MIN_RESPAWN_TIME = 91; // Game ticks
    private static final float DAEYALT_RANDOM_PERCENT_THRESHOLD = (float) DAEYALT_MIN_RESPAWN_TIME / DAEYALT_MAX_RESPAWN_TIME;

    static final int LOVAKITE_ORE_MAX_RESPAWN_TIME = 65; // Game ticks
    private static final int LOVAKITE_ORE_MIN_RESPAWN_TIME = 50; // Game ticks
    private static final float LOVAKITE_ORE_RANDOM_PERCENT_THRESHOLD = (float) LOVAKITE_ORE_MIN_RESPAWN_TIME / LOVAKITE_ORE_MAX_RESPAWN_TIME;

    private static final Color DARK_GREEN = new Color(0, 100, 0);
    private static final int MOTHERLODE_UPPER_FLOOR_HEIGHT = -500;

    private final Client client;
    private final AdvancedMiningPlugin plugin;

    @Inject
    private MiningRocksOverlay(Client client, AdvancedMiningPlugin plugin) {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        this.plugin = plugin;
        this.client = client;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        List<RockRespawn> respawns = plugin.getRespawns();
        if (respawns.isEmpty()) {
            return null;
        }

        Instant now = Instant.now();
        for (RockRespawn rockRespawn : respawns) {
            LocalPoint loc = LocalPoint.fromWorld(client, rockRespawn.getWorldPoint());
            if (loc == null) {
                continue;
            }

            float percent = (now.toEpochMilli() - rockRespawn.getStartTime().toEpochMilli()) / (float) rockRespawn.getRespawnTime();
            Point point = Perspective.localToCanvas(client, loc, client.getPlane(), rockRespawn.getZOffset());
            if (point == null || percent > 1.0f) {
                continue;
            }

            Rock rock = rockRespawn.getRock();

            // Only draw timer for veins on the same level in motherlode mine
            LocalPoint localLocation = client.getLocalPlayer().getLocalLocation();
            if (rock == Rock.ORE_VEIN && isUpstairsMotherlode(localLocation) != isUpstairsMotherlode(loc)) {
                continue;
            }

            Color pieFillColor = Color.YELLOW;
            Color pieBorderColor = Color.ORANGE;

            // Recolour pie during the portion of the timer where they may respawn
            if ((rock == Rock.DAEYALT_ESSENCE && percent > DAEYALT_RANDOM_PERCENT_THRESHOLD)
                    || (rock == Rock.LOVAKITE && percent > LOVAKITE_ORE_RANDOM_PERCENT_THRESHOLD)) {
                pieFillColor = Color.GREEN;
                pieBorderColor = DARK_GREEN;
            }

            ProgressPieComponent ppc = new ProgressPieComponent();
            ppc.setBorderColor(pieBorderColor);
            ppc.setFill(pieFillColor);
            ppc.setPosition(point);
            ppc.setProgress(percent);
            ppc.render(graphics);
        }
        return null;
    }

    /**
     * Checks if the given point is "upstairs" in the mlm.
     * The upper floor is actually on z=0.
     *
     * This method assumes that the given point is already in the mlm
     * and is not meaningful when outside the mlm.
     *
     * @param localPoint the LocalPoint to be tested
     * @return true if localPoint is at same height as mlm upper floor
     */
    private boolean isUpstairsMotherlode(LocalPoint localPoint) {
        return Perspective.getTileHeight(client, localPoint, 0) < MOTHERLODE_UPPER_FLOOR_HEIGHT;
    }
}
package com.advancedmining;

import net.runelite.api.ItemID;
import net.runelite.api.MenuAction;
import net.runelite.api.SpriteID;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ComponentOrientation;
import net.runelite.client.ui.overlay.components.ImageComponent;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import javax.inject.Inject;
import java.awt.*;

import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class AdvancedMiningEssenceOverlay extends OverlayPanel {
    private final AdvancedMiningPlugin plugin;
    private final AdvancedMiningConfig config;
    private final ItemManager itemManager;

    @Inject
    private AdvancedMiningEssenceOverlay(final AdvancedMiningPlugin plugin, final AdvancedMiningConfig config, ItemManager itemManager) {
        super(plugin);
        setPosition(OverlayPosition.TOP_LEFT);
        this.plugin = plugin;
        this.config = config;
        this.itemManager = itemManager;
        addMenuEntry(MenuAction.RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Essence Overlay");
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        MiningSession session = plugin.getSession();

        if (!config.showEssenceMined()) {
            return null;
        }

        int runeessFound = session != null ? session.getRuneessFound() : 0;
        int pureessFound = session != null ? session.getPureessFound() : 0;
        int denseessFound = session != null ? session.getDenseessFound() : 0;

        if (runeessFound == 0 && pureessFound == 0 && denseessFound == 0) {
            return null;
        }

        if(config.showLootIcons()) {
            panelComponent.setOrientation(ComponentOrientation.HORIZONTAL);
            if (runeessFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.RUNE_ESSENCE, runeessFound, true)));
            }
            if (pureessFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.PURE_ESSENCE, pureessFound, true)));
            }
            if (denseessFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.DENSE_ESSENCE_BLOCK, denseessFound, true)));
            }
        } else {
            panelComponent.setOrientation(ComponentOrientation.VERTICAL);
            panelComponent.getChildren().add(TitleComponent.builder()
                    .text("Essence")
                    .color(Color.YELLOW)
                    .build());

            if (runeessFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Rune:")
                        .right(Integer.toString(runeessFound))
                        .build());
            }
            if (pureessFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Pure:")
                        .right(Integer.toString(pureessFound))
                        .build());
            }
            if (denseessFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Dense:")
                        .right(Integer.toString(denseessFound))
                        .build());
            }
        }
        return super.render(graphics);
    }
}
package com.advancedmining;

import net.runelite.api.MenuAction;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ComponentOrientation;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import javax.inject.Inject;
import java.awt.*;
import java.text.DecimalFormat;
import java.time.Duration;
import java.time.Instant;

import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class AdvancedMiningPrayerOverlay extends OverlayPanel {
    private final AdvancedMiningPlugin plugin;
    private final AdvancedMiningConfig config;

    @Inject
    private AdvancedMiningPrayerOverlay(final AdvancedMiningPlugin plugin, final AdvancedMiningConfig config) {
        super(plugin);
        setPosition(OverlayPosition.TOP_LEFT);
        this.plugin = plugin;
        this.config = config;
        addMenuEntry(MenuAction.RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Ores Overlay");
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        MiningSession session = plugin.getSession();

        if ((session != null ? session.getLastOthersMined() : null) == null || !config.showPrayerXp()) {
            return null;
        }

        panelComponent.setOrientation(ComponentOrientation.VERTICAL);

        Duration statTimeout = Duration.ofMinutes(config.statTimeout());
        Duration sinceLastOthers = Duration.between(session.getLastOthersMined(), Instant.now());

        if (sinceLastOthers.compareTo(statTimeout) >= 0) {
            return null;
        }

        int boneshardsFound = session.getBoneshardsFound();

        if (boneshardsFound == 0) {
            return null;
        }

        double blessedWineXP = Double.parseDouble(String.valueOf(boneshardsFound * 5));
        double blessedSunfireWineXP = Double.parseDouble(String.valueOf(boneshardsFound * 6));
        DecimalFormat formatter = new DecimalFormat("#,###");

        if (config.showPrayerXp()) {
            if (boneshardsFound > 0) {
                panelComponent.getChildren().add(TitleComponent.builder()
                        .text("Potential Prayer XP")
                        .color(Color.CYAN)
                        .build());

                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Blessed Wine:")
                        .right("")
                        .build());
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("")
                        .right(String.format(String.valueOf(formatter.format(blessedWineXP))))
                        .build());

                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Blessed Sunfire Wine:")
                        .right("")
                        .build());
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("")
                        .right(String.format(String.valueOf(formatter.format(blessedSunfireWineXP))))
                        .build());
            }
        }
        return super.render(graphics);
    }
    }
package com.advancedmining;

import net.runelite.api.ItemID;
import net.runelite.api.MenuAction;
import net.runelite.api.SpriteID;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ComponentOrientation;
import net.runelite.client.ui.overlay.components.ImageComponent;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import javax.inject.Inject;
import java.awt.*;
import java.time.Duration;
import java.time.Instant;

import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class AdvancedMiningAdditionalOverlay extends OverlayPanel {
    private final AdvancedMiningPlugin plugin;
    private final AdvancedMiningConfig config;
    private final ItemManager itemManager;

    @Inject
    private AdvancedMiningAdditionalOverlay(final AdvancedMiningPlugin plugin, final AdvancedMiningConfig config, ItemManager itemManager) {
        super(plugin);
        setPosition(OverlayPosition.TOP_LEFT);
        this.plugin = plugin;
        this.config = config;
        this.itemManager = itemManager;
        addMenuEntry(MenuAction.RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Additional Overlay");
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        MiningSession session = plugin.getSession();

        if ((session != null ? session.getLastAdditionalMined() : null) == null || !config.showAdditionalMined()) {
            return null;
        }

        Duration statTimeout = Duration.ofMinutes(config.statTimeout());
        Duration sinceLastAdditional = Duration.between(session.getLastAdditionalMined(), Instant.now());

        if (sinceLastAdditional.compareTo(statTimeout) >= 0)
        {
            return null;
        }

        int platebodyFound = session.getPlatebodyFound();
        int capeFound = session.getCapeFound();
        int achievmentFound = session.getAchievmentFound();

        if (platebodyFound == 0 && capeFound == 0 && achievmentFound == 0) {
            return null;
        }

        if(config.showLootIcons()) {
            panelComponent.setOrientation(ComponentOrientation.HORIZONTAL);
            if (platebodyFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.VARROCK_ARMOUR, platebodyFound, true)));
            }
            if (capeFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.MINING_CAPE, capeFound, true)));
            }
            if (achievmentFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(SpriteID.QUESTS_PAGE_ICON_GREEN_ACHIEVEMENT_DIARIES, achievmentFound, true)));
            }
        } else {
            panelComponent.setOrientation(ComponentOrientation.VERTICAL);
            panelComponent.getChildren().add(TitleComponent.builder()
                    .text("Additional Ore")
                    .color(Color.YELLOW)
                    .build());

            if (platebodyFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Platebody:")
                        .right(Integer.toString(platebodyFound))
                        .build());
            }
            if (capeFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Cape:")
                        .right(Integer.toString(capeFound))
                        .build());
            }
            if (achievmentFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Diaries:")
                        .right(Integer.toString(achievmentFound))
                        .build());
            }
        }
        return super.render(graphics);
    }
}
package com.advancedmining;

import net.runelite.api.ItemID;
import net.runelite.api.MenuAction;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ComponentOrientation;
import net.runelite.client.ui.overlay.components.ImageComponent;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import javax.inject.Inject;
import java.awt.*;
import java.time.Duration;
import java.time.Instant;

import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class AdvancedMiningOthersOverlay extends OverlayPanel {
    private final AdvancedMiningPlugin plugin;
    private final AdvancedMiningConfig config;
    private final ItemManager itemManager;

    @Inject
    private AdvancedMiningOthersOverlay(final AdvancedMiningPlugin plugin, final AdvancedMiningConfig config, ItemManager itemManager) {
        super(plugin);
        setPosition(OverlayPosition.TOP_LEFT);
        this.plugin = plugin;
        this.config = config;
        this.itemManager = itemManager;
        addMenuEntry(MenuAction.RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Others Overlay");
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        MiningSession session = plugin.getSession();

        if ((session != null ? session.getLastOthersMined() : null) == null || !config.showOthersMined()) {
            return null;
        }

        Duration statTimeout = Duration.ofMinutes(config.statTimeout());
        Duration sinceLastOthers = Duration.between(session.getLastOthersMined(), Instant.now());

        if (sinceLastOthers.compareTo(statTimeout) >= 0)
        {
            return null;
        }

        int mineralsFound = session.getMineralsFound();
        int stardustFound = session.getStardustFound();
        int barroniteshardsFound = session.getBarroniteshardsFound();
        int barronitedepositFound = session.getBarronitedepositFound();
        int boneshardsFound = session.getBoneshardsFound();
        int calcifieddepositFound = session.getCalcifieddepositFound();
        int geodeFound = session.getGeodeFound();

        int smashingFound = session.getSmashing();

        if (mineralsFound == 0 && stardustFound == 0 && barroniteshardsFound == 0 && barronitedepositFound == 0 &&
                boneshardsFound == 0 && calcifieddepositFound == 0 && geodeFound == 0 && smashingFound == 0) {
            return null;
        }

        if(config.showLootIcons()) {
            panelComponent.setOrientation(ComponentOrientation.HORIZONTAL);
            if (mineralsFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.UNIDENTIFIED_MINERALS, mineralsFound, true)));
            }
            if (stardustFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.STARDUST, stardustFound, true)));
            }
            if (barroniteshardsFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.BARRONITE_SHARDS, barroniteshardsFound, true)));
            }
            if (barronitedepositFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.BARRONITE_DEPOSIT, barronitedepositFound, true)));
            }
            if (boneshardsFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.BLESSED_BONE_SHARDS, boneshardsFound, true)));
            }
            if (calcifieddepositFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.CALCIFIED_DEPOSIT, calcifieddepositFound, true)));
            }
            if (geodeFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.CLUE_GEODE_BEGINNER, geodeFound, true)));
            }
            /*if (smashingFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.DRAGON_PICKAXE_12797, smashingFound, true)));
            }*/
        } else {
            panelComponent.setOrientation(ComponentOrientation.VERTICAL);
            if (mineralsFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Minerals:")
                        .right(Integer.toString(mineralsFound))
                        .build());
            }
            if (stardustFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Stardust:")
                        .right(Integer.toString(stardustFound))
                        .build());
            }
            if (barroniteshardsFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Barronite Shards:")
                        .right(Integer.toString(barroniteshardsFound))
                        .build());
            }
            if (barronitedepositFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Barronite Deposit:")
                        .right(Integer.toString(barronitedepositFound))
                        .build());
            }
            if (boneshardsFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Bone Shards:")
                        .right(Integer.toString(boneshardsFound))
                        .build());
            }
            if (calcifieddepositFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Calcified Deposit:")
                        .right(Integer.toString(calcifieddepositFound))
                        .build());
            }
            if (geodeFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Clue Geodes:")
                        .right(Integer.toString(geodeFound))
                        .build());
            }
            /*if (smashingFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Smashing:")
                        .right(Integer.toString(smashingFound))
                        .build());
            }*/
        }
        return super.render(graphics);
    }
}
package com.advancedmining;

import net.runelite.api.ItemID;
import net.runelite.api.MenuAction;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ComponentOrientation;
import net.runelite.client.ui.overlay.components.ImageComponent;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import javax.inject.Inject;
import java.awt.*;

import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class AdvancedMiningOresOverlay extends OverlayPanel {
    private final AdvancedMiningPlugin plugin;
    private final AdvancedMiningConfig config;
    private final ItemManager itemManager;

    @Inject
    private AdvancedMiningOresOverlay(final AdvancedMiningPlugin plugin, final AdvancedMiningConfig config, ItemManager itemManager) {
        super(plugin);
        setPosition(OverlayPosition.TOP_LEFT);
        this.plugin = plugin;
        this.config = config;
        this.itemManager = itemManager;
        addMenuEntry(MenuAction.RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Ores Overlay");
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        MiningSession session = plugin.getSession();

        if (!config.showOresMined()) {
            return null;
        }

        int clayFound = session != null ? session.getClayFound() : 0;
        int copperFound = session != null ? session.getCopperFound() : 0;
        int tinFound = session != null ? session.getTinFound() : 0;
        int ironFound = session != null ? session.getIronFound() : 0;
        int silverFound = session != null ? session.getSilverFound() : 0;
        int coalFound = session != null ? session.getCoalFound() : 0;
        int goldFound = session != null ? session.getGoldFound() : 0;
        int mithrilFound = session != null ? session.getMithrilFound() : 0;
        int adamantiteFound = session != null ? session.getAdamantiteFound() : 0;
        int runiteFound = session != null ? session.getRuniteFound() : 0;
        int amethystFound = session != null ? session.getAmethystFound() : 0;

        if (clayFound == 0 && copperFound == 0 && tinFound == 0 && ironFound == 0 && silverFound == 0 &&
                coalFound == 0 && goldFound == 0 && mithrilFound == 0 && adamantiteFound == 0 && runiteFound == 0 &&
                amethystFound == 0) {
            return null;
        }

        if(config.showLootIcons()) {
            panelComponent.setOrientation(ComponentOrientation.HORIZONTAL);
            if (clayFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.CLAY, clayFound, true)));
            }
            if (copperFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.COPPER_ORE, copperFound, true)));
            }
            if (tinFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.TIN_ORE, tinFound, true)));
            }
            if (ironFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.IRON_ORE, ironFound, true)));
            }
            if (silverFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.SILVER_ORE, silverFound, true)));
            }
            if (coalFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.COAL, coalFound, true)));
            }
            if (goldFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.GOLD_ORE, goldFound, true)));
            }
            if (mithrilFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.MITHRIL_ORE, mithrilFound, true)));
            }
            if (adamantiteFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.ADAMANTITE_ORE, adamantiteFound, true)));
            }
            if (runiteFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.RUNITE_ORE, runiteFound, true)));
            }
            if (amethystFound > 0) {
                panelComponent.getChildren().add(new ImageComponent(itemManager.getImage(ItemID.AMETHYST, amethystFound, true)));
            }
        } else {
            panelComponent.setOrientation(ComponentOrientation.VERTICAL);
            panelComponent.getChildren().add(TitleComponent.builder()
                    .text("Ores mined")
                    .color(Color.YELLOW)
                    .build());
            if (clayFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Clay:")
                        .right(Integer.toString(clayFound))
                        .build());
            }
            if (copperFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Copper:")
                        .right(Integer.toString(copperFound))
                        .build());
            }
            if (tinFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Tin:")
                        .right(Integer.toString(tinFound))
                        .build());
            }
            if (ironFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Iron:")
                        .right(Integer.toString(ironFound))
                        .build());
            }
            if (silverFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Silver:")
                        .right(Integer.toString(silverFound))
                        .build());
            }
            if (coalFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Coal:")
                        .right(Integer.toString(coalFound))
                        .build());
            }
            if (goldFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Gold:")
                        .right(Integer.toString(goldFound))
                        .build());
            }
            if (mithrilFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Mithril:")
                        .right(Integer.toString(mithrilFound))
                        .build());
            }
            if (adamantiteFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Adamantite:")
                        .right(Integer.toString(adamantiteFound))
                        .build());
            }
            if (runiteFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Runite:")
                        .right(Integer.toString(runiteFound))
                        .build());
            }
            if (amethystFound > 0) {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Amethyst:")
                        .right(Integer.toString(amethystFound))
                        .build());
            }
        }
        return super.render(graphics);
    }
}
package com.advancedmining;

import java.time.Instant;

import ch.qos.logback.classic.Logger;
import lombok.AccessLevel;
import lombok.Getter;
import net.runelite.api.ItemID;
import net.runelite.api.SpriteID;

class MiningSession {
    @Getter
    private Instant lastMined;

    @Getter(AccessLevel.PACKAGE)
    private Instant lastOthersMined;
    @Getter(AccessLevel.PACKAGE)
    private Instant lastGemFound;
    @Getter(AccessLevel.PACKAGE)
    private Instant lastAdditionalMined;

    @Getter(AccessLevel.PACKAGE)
    private int mineralsFound;
    @Getter(AccessLevel.PACKAGE)
    private int stardustFound;
    @Getter(AccessLevel.PACKAGE)
    private int volcanicashFound;
    @Getter(AccessLevel.PACKAGE)
    private int boneshardsFound;
    @Getter(AccessLevel.PACKAGE)
    private int calcifieddepositFound;
    @Getter(AccessLevel.PACKAGE)
    private int barroniteshardsFound;
    @Getter(AccessLevel.PACKAGE)
    private int barronitedepositFound;
    @Getter(AccessLevel.PACKAGE)
    private int geodeFound;

    @Getter(AccessLevel.PACKAGE)
    private int clayFound;
    @Getter(AccessLevel.PACKAGE)
    private int copperFound;
    @Getter(AccessLevel.PACKAGE)
    private int tinFound;
    @Getter(AccessLevel.PACKAGE)
    private int limestoneFound;
    @Getter(AccessLevel.PACKAGE)
    private int bluriteFound;
    @Getter(AccessLevel.PACKAGE)
    private int ironFound;
    @Getter(AccessLevel.PACKAGE)
    private int silverFound;
    @Getter(AccessLevel.PACKAGE)
    private int coalFound;
    @Getter(AccessLevel.PACKAGE)
    private int sandstoneFound;
    @Getter(AccessLevel.PACKAGE)
    private int goldFound;
    @Getter(AccessLevel.PACKAGE)
    private int mithrilFound;
    @Getter(AccessLevel.PACKAGE)
    private int adamantiteFound;
    @Getter(AccessLevel.PACKAGE)
    private int runiteFound;
    @Getter(AccessLevel.PACKAGE)
    private int amethystFound;

    @Getter(AccessLevel.PACKAGE)
    private int platebodyFound;
    @Getter(AccessLevel.PACKAGE)
    private int capeFound;
    @Getter(AccessLevel.PACKAGE)
    private int achievmentFound;

    @Getter(AccessLevel.PACKAGE)
    private int opalsFound;
    @Getter(AccessLevel.PACKAGE)
    private int jadesFound;
    @Getter(AccessLevel.PACKAGE)
    private int topazsFound;
    @Getter(AccessLevel.PACKAGE)
    private int sapphiresFound;
    @Getter(AccessLevel.PACKAGE)
    private int emeraldsFound;
    @Getter(AccessLevel.PACKAGE)
    private int rubiesFound;
    @Getter(AccessLevel.PACKAGE)
    private int diamondsFound;

    @Getter(AccessLevel.PACKAGE)
    private int runeessFound;
    @Getter(AccessLevel.PACKAGE)
    private int pureessFound;
    @Getter(AccessLevel.PACKAGE)
    private int denseessFound;

    @Getter(AccessLevel.PACKAGE)
    private int smashing;

    private Logger log;

    void updateOthersMined (int itemID, int count) {
        lastOthersMined = Instant.now();
        switch (itemID) {
            case ItemID.UNIDENTIFIED_MINERALS:
                mineralsFound += count;
                break;
            case ItemID.STARDUST:
                stardustFound += count;
                break;
            case ItemID.VOLCANIC_ASH:
                volcanicashFound += count;
                break;
            case ItemID.BARRONITE_SHARDS:
                barroniteshardsFound += count;
                break;
            case ItemID.BARRONITE_DEPOSIT:
                barronitedepositFound += count;
                break;
            case ItemID.BLESSED_BONE_SHARDS:
                boneshardsFound += count;
                break;
            case ItemID.CALCIFIED_DEPOSIT:
                calcifieddepositFound += count;
                break;
            case ItemID.CLUE_GEODE_BEGINNER:
                geodeFound += count;
                break;
            case ItemID.DRAGON_PICKAXE_12797:
                smashing += count;
                break;
            default:
                log.debug("Invalid others specified. The others count will not be updated.");
        }
    }

    void updateOreFound(int item, int count) {
        switch (item) {
            case ItemID.CLAY:
                clayFound += count;
                break;
            case ItemID.COPPER_ORE:
                copperFound += count;
                break;
            case ItemID.TIN_ORE:
                tinFound += count;
                break;
            case ItemID.LIMESTONE:
                limestoneFound += count;
                break;
            case ItemID.BLURITE_ORE:
                bluriteFound += count;
                break;
            case ItemID.IRON_ORE:
                ironFound += count;
                break;
            case ItemID.SILVER_ORE:
                silverFound += count;
                break;
            case ItemID.COAL:
                coalFound += count;
                break;
            case ItemID.SANDSTONE_1KG:
            case ItemID.SANDSTONE_2KG:
            case ItemID.SANDSTONE_5KG:
            case ItemID.SANDSTONE_10KG:
                sandstoneFound += count;
                break;
            case ItemID.GOLD_ORE:
                goldFound += count;
                break;
            case ItemID.MITHRIL_ORE:
                mithrilFound += count;
                break;
            case ItemID.ADAMANTITE_ORE:
                adamantiteFound += count;
                break;
            case ItemID.RUNITE_ORE:
                runiteFound += count;
                break;
            case ItemID.AMETHYST:
                amethystFound += count;
                break;

            case ItemID.RUNE_ESSENCE:
                runeessFound += count;
                break;
            case ItemID.PURE_ESSENCE:
                pureessFound += count;
                break;
            case ItemID.DENSE_ESSENCE_BLOCK:
                denseessFound += count;
                break;
            default:
                log.debug("Invalid ore specified. The ore count will not be updated.");
        }
    }

    void updateAdditionalMined (int itemID) {
        lastAdditionalMined = Instant.now();
        switch (itemID) {
            case ItemID.VARROCK_ARMOUR:
                platebodyFound++;
                break;
            case ItemID.MINING_CAPE:
                capeFound++;
                break;
            case SpriteID.QUESTS_PAGE_ICON_GREEN_ACHIEVEMENT_DIARIES:
                achievmentFound++;
                break;
            default:
                log.debug("Invalid item specified. The ore count will not be updated.");
        }
    }

    void incrementGemFound(int gemID) {
        lastGemFound = Instant.now();
        switch (gemID) {
            case ItemID.UNCUT_OPAL:
                opalsFound++;
                break;
            case ItemID.UNCUT_JADE:
                jadesFound++;
                break;
            case ItemID.UNCUT_RED_TOPAZ:
                topazsFound++;
                break;
            case ItemID.UNCUT_SAPPHIRE:
                sapphiresFound++;
                break;
            case ItemID.UNCUT_EMERALD:
                emeraldsFound++;
                break;
            case ItemID.UNCUT_RUBY:
                rubiesFound++;
                break;
            case ItemID.UNCUT_DIAMOND:
                diamondsFound++;
                break;
            default:
                log.debug("Invalid gem type specified. The gem count will not be incremented.");
        }
    }

    void incrementpublicChat(int itemID) {
        switch(itemID) {
            case ItemID.DRAGON_PICKAXE_12797:
                smashing++;
                break;
            case ItemID._3RD_AGE_AXE:
                diamondsFound++;
                break;
            default:
                log.debug("Invalid item type Specified. The count will not be incremented.");
        }
    }

    void setLastMined() {
        lastMined = Instant.now();
    }
}
package com.advancedmining;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Units;

@ConfigGroup("advancedmining")
public interface AdvancedMiningConfig extends Config {
	@ConfigItem(
			keyName = "statTimeout",
			name = "Reset Stats",
			description = "Duration the mining indicator and session stats are displayed before being reset",
			position = 1
	)
	@Units(Units.MINUTES)
	default int statTimeout()
	{
		return 5;
	}

	@ConfigItem(
			keyName = "showMiningStats",
			name = "Show Session Stats",
			description = "Configures whether to display mining session stats",
			position = 2
	)
	default boolean showMiningStats()
	{
		return true;
	}

	@ConfigItem(
			keyName = "showMiningState",
			name = "Show Current Mining State",
			description = "Shows current mining state. 'You are currently mining' / 'You are currently NOT mining'",
			position = 3
	)
	default boolean showMiningState()
	{
		return true;
	}

	@ConfigItem(
			keyName = "showOthersMined",
			name = "Show Other Things That Are Mined",
			description = "Shows other things mined during current mining session",
			position = 4
	)
	default boolean showOthersMined()
	{
		return true;
	}

	@ConfigItem(
			keyName = "showOresMined",
			name = "Show Ores Mined",
			description = "Shows ores mined during current mining session",
			position = 5
	)
	default boolean showOresMined()
	{
		return true;
	}

	@ConfigItem(
			keyName = "showAdditionalMined",
			name = "Show Additional Ores Mined",
			description = "Shows additional ores mined during current mining session",
			position = 6
	)
	default boolean showAdditionalMined()
	{
		return true;
	}

	@ConfigItem(
			keyName = "showGemsFound",
			name = "Show Gems Mined/Found",
			description = "Shows gems mined/found during current mining session",
			position = 7
	)
	default boolean showGemsFound()
	{
		return true;
	}

	@ConfigItem(
			keyName = "showEssenceMined",
			name = "Show Essence Mined",
			description = "Shows essence mined during current mining session",
			position = 8
	)
	default boolean showEssenceMined()
	{
		return true;
	}

	@ConfigItem(
			keyName = "showPrayerXp",
			name = "Show Prayer Experience",
			description = "Shows potential prayer xp from mining Calcified Rocks",
			position = 8
	)
	default boolean showPrayerXp()
	{
		return true;
	}

	@ConfigItem(
			keyName = "showLootIcons",
			name = "Show Icons",
			description = "Display collected ores/gems/others as item images",
			position = 99
	)
	default boolean showLootIcons()
	{
		return false;
	}
}
