package com.westerhoud.osrs.taskman;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TaskmanPluginTest {
  public static void main(final String[] args) throws Exception {
    ExternalPluginManager.loadBuiltin(TaskmanPlugin.class);
    RuneLite.main(args);
  }
}

package com.westerhoud.osrs.taskman.domain;

import java.awt.Image;
import java.awt.image.BufferedImage;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.util.ImageUtil;

@Data
@NoArgsConstructor
@Slf4j
public class Task {

  private static final BufferedImage ERROR_IMAGE =
      ImageUtil.loadImageResource(Task.class, "error.png");

  private String name;
  private String imageUrl;
  private transient BufferedImage image;

  public String getImageUrl() {
    return imageUrl.startsWith("http://") ? imageUrl.replace("http://", "https://") : imageUrl;
  }

  public Image getResizedImage(final int width, final int height) {
    if (image != null) {
      return image.getScaledInstance(width, height, Image.SCALE_FAST);
    } else {
      return ERROR_IMAGE.getScaledInstance(width, height, Image.SCALE_FAST);
    }
  }
}

package com.westerhoud.osrs.taskman.domain;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class TierProgress {
  private int maxValue;
  private int value;
}

package com.westerhoud.osrs.taskman.domain;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class AccountCredentials {

  final String identifier;
  final String password;
  final TaskSource source;

  public boolean isValid() {
    return identifier != null
        && !identifier.isEmpty()
        && password != null
        && !password.isEmpty()
        && source != null;
  }
}

package com.westerhoud.osrs.taskman.domain;

import java.util.Map;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class AccountProgress {
  private Map<String, TierProgress> progressByTier;
  private String currentTier;
}

package com.westerhoud.osrs.taskman.domain;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class TaskmanCommandData {
  private Task task;
  private String tier;
  private int progressPercentage;
}

package com.westerhoud.osrs.taskman.domain;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ErrorResponse {
  private String message;
}

package com.westerhoud.osrs.taskman.domain;

public enum TaskSource {
  SPREADSHEET,
  WEBSITE
}

package com.westerhoud.osrs.taskman.service;

import com.google.gson.Gson;
import com.westerhoud.osrs.taskman.domain.AccountCredentials;
import com.westerhoud.osrs.taskman.domain.AccountProgress;
import com.westerhoud.osrs.taskman.domain.ErrorResponse;
import com.westerhoud.osrs.taskman.domain.Task;
import com.westerhoud.osrs.taskman.domain.TaskmanCommandData;
import java.io.IOException;
import javax.imageio.ImageIO;
import lombok.extern.slf4j.Slf4j;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Request.Builder;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

@Slf4j
public class TaskService implements com.westerhoud.osrs.taskman.api.TaskService {

  public static final String TASKMAN_IDENTIFIER_HEADER = "x-taskman-identifier";
  public static final String TASKMAN_PASSWORD_HEADER = "x-taskman-password";
  public static final String TASKMAN_SOURCE_HEADER = "x-taskman-source";
  public static final String TASKMAN_RSN_HEADER = "x-taskman-rsn";
  private static final String BASE_URL = "https://taskman.up.railway.app/task";
  private final OkHttpClient client;
  private final Gson gson;
  private final String currentUrl;
  private final String generateUrl;
  private final String completeUrl;
  private final String progressUrl;
  private final String commandUrl;

  public TaskService(final OkHttpClient okHttpClient, final Gson gson) {
    client = okHttpClient;
    this.gson = gson;
    currentUrl = BASE_URL + "/current";
    generateUrl = BASE_URL + "/generate";
    completeUrl = BASE_URL + "/complete";
    progressUrl = BASE_URL + "/progress";
    commandUrl = BASE_URL + "/command/%s";
  }

  @Override
  public Task getCurrentTask(final AccountCredentials credentials, final String rsn)
      throws IOException {
    if (!credentials.isValid()) {
      throw new IllegalArgumentException(
          "Please configure your credentials in the plugin configurations");
    }

    final Request request =
        new Request.Builder()
            .url(currentUrl)
            .addHeader(TASKMAN_IDENTIFIER_HEADER, credentials.getIdentifier())
            .addHeader(TASKMAN_PASSWORD_HEADER, credentials.getPassword())
            .addHeader(TASKMAN_SOURCE_HEADER, credentials.getSource().name())
            .addHeader(TASKMAN_RSN_HEADER, rsn)
            .get()
            .build();

    return executeRequest(request);
  }

  @Override
  public Task generateTask(final AccountCredentials credentials, final String rsn)
      throws IOException {
    final Request request =
        new Request.Builder()
            .url(generateUrl)
            .header("Content-Type", "application/json")
            .addHeader(TASKMAN_SOURCE_HEADER, credentials.getSource().name())
            .addHeader(TASKMAN_RSN_HEADER, rsn)
            .post(getRequestBody(credentials))
            .build();
    return executeRequest(request);
  }

  @Override
  public Task completeTask(final AccountCredentials credentials, final String rsn)
      throws IOException {
    final Request request =
        new Request.Builder()
            .url(completeUrl)
            .header("Content-Type", "application/json")
            .addHeader(TASKMAN_SOURCE_HEADER, credentials.getSource().name())
            .addHeader(TASKMAN_RSN_HEADER, rsn)
            .post(getRequestBody(credentials))
            .build();
    return executeRequest(request);
  }

  @Override
  public AccountProgress getAccountProgress(final AccountCredentials credentials, final String rsn)
      throws IOException {
    if (!credentials.isValid()) {
      throw new IllegalArgumentException(
          "Please set your username / spreadsheet key in the plugin configurations");
    }

    final Request request =
        new Request.Builder()
            .url(progressUrl)
            .addHeader(TASKMAN_IDENTIFIER_HEADER, credentials.getIdentifier())
            .addHeader(TASKMAN_PASSWORD_HEADER, credentials.getPassword())
            .addHeader(TASKMAN_SOURCE_HEADER, credentials.getSource().name())
            .addHeader(TASKMAN_RSN_HEADER, rsn)
            .get()
            .build();

    final Response response = client.newCall(request).execute();

    if (response.code() == 200) {
      return gson.fromJson(response.body().string(), AccountProgress.class);
    }

    final ErrorResponse error = mapResponseToErrorResponse(response);
    throw new IllegalArgumentException(error.getMessage());
  }

  @Override
  public TaskmanCommandData getChatCommandData(final String rsn) throws IOException {
    final Request request = new Builder().url(String.format(commandUrl, rsn)).get().build();

    final Response response = client.newCall(request).execute();

    if (response.code() == 200) {
      return gson.fromJson(response.body().string(), TaskmanCommandData.class);
    } else {
      throw new IllegalArgumentException("Could not get task command data for rsn: " + rsn);
    }
  }

  private RequestBody getRequestBody(final AccountCredentials credentials) {
    return RequestBody.create(MediaType.parse("application/json"), gson.toJson(credentials));
  }

  private Task executeRequest(final Request request) throws IOException {
    final Response response = client.newCall(request).execute();

    if (response.code() == 200) {
      final Task task = mapResponseToTask(response);
      setImage(task);
      return task;
    }

    final ErrorResponse error = mapResponseToErrorResponse(response);
    throw new IllegalArgumentException(error.getMessage());
  }

  private Task mapResponseToTask(final Response response) throws IOException {
    return gson.fromJson(response.body().string(), Task.class);
  }

  private ErrorResponse mapResponseToErrorResponse(final Response response) throws IOException {
    final String responseString = response.body().string();
    log.error(responseString);
    return gson.fromJson(responseString, ErrorResponse.class);
  }

  private void setImage(final Task task) {
    final Request request = new Builder().url(task.getImageUrl()).get().build();

    try (final Response response = client.newCall(request).execute()) {
      final ResponseBody responseBody = response.body();

      if (responseBody == null) {
        log.info(task.getImageUrl());
        return;
      }
      task.setImage(ImageIO.read(responseBody.byteStream()));
    } catch (final IOException e) {
      log.error(e.getMessage(), e);
    }
  }
}

package com.westerhoud.osrs.taskman;

import com.westerhoud.osrs.taskman.domain.TaskSource;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("taskman")
public interface TaskmanConfig extends Config {

  @ConfigSection(
      name = "Spreadsheet",
      description = "Spreadsheet configuration",
      position = 1,
      closedByDefault = true)
  String spreadsheet = "spreadsheet";

  @ConfigSection(
      name = "Website",
      description = "Website configuration",
      position = 2,
      closedByDefault = true)
  String website = "website";

  @ConfigItem(
      position = 0,
      keyName = "taskSource",
      name = "Task source",
      description = "Spreadsheet or website")
  default TaskSource taskSource() {
    return TaskSource.SPREADSHEET;
  }

  @ConfigItem(
      position = 3,
      keyName = "key",
      name = "Spreadsheet key",
      description = "The key of your spreadsheet",
      section = spreadsheet)
  default String spreadsheetKey() {
    return "";
  }

  @ConfigItem(
      position = 4,
      keyName = "passphrase",
      name = "Passphrase",
      secret = true,
      description = "The passphrase you have added in your sheet",
      section = spreadsheet)
  default String passphrase() {
    return "";
  }

  @ConfigItem(
      position = 5,
      keyName = "websiteUsername",
      name = "Username",
      description = "Website username",
      section = website)
  default String websiteUsername() {
    return "username";
  }

  @ConfigItem(
      position = 6,
      keyName = "websitePassword",
      name = "Password",
      secret = true,
      description = "Website password",
      section = website)
  default String websitePassword() {
    return "password";
  }

  @ConfigItem(
      position = 7,
      keyName = "showOverlay",
      name = "Show current task overlay",
      description = "Adds an overlay displaying the current task to the game client")
  default boolean showOverlay() {
    return false;
  }

  @ConfigItem(
      position = 8,
      keyName = "taskmanCommand",
      name = "Enable !taskman chat command",
      description = "Send your current progress and task into the chat")
  default boolean taskmanCommand() {
    return true;
  }
}

package com.westerhoud.osrs.taskman;

import com.google.gson.Gson;
import com.google.inject.Provides;
import com.westerhoud.osrs.taskman.domain.AccountCredentials;
import com.westerhoud.osrs.taskman.domain.AccountProgress;
import com.westerhoud.osrs.taskman.domain.Task;
import com.westerhoud.osrs.taskman.domain.TaskmanCommandData;
import com.westerhoud.osrs.taskman.service.TaskService;
import com.westerhoud.osrs.taskman.ui.CurrentTaskOverlay;
import com.westerhoud.osrs.taskman.ui.TaskmanPluginPanel;
import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.inject.Inject;
import javax.swing.SwingUtilities;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.MessageNode;
import net.runelite.api.Player;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatCommandManager;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.Text;
import okhttp3.OkHttpClient;

@Slf4j
@PluginDescriptor(name = "Taskman")
public class TaskmanPlugin extends Plugin {

  private static final String TASKMAN_CONFIG_GROUP = "taskman";
  private static final String TASKMAN_CHAT_COMMAND = "!taskman";
  @Inject private Client client;
  @Inject private ClientThread clientThread;
  @Inject private ClientToolbar clientToolbar;
  @Inject private TaskmanConfig config;
  @Inject private OkHttpClient okHttpClient;
  @Inject private Gson gson;
  @Inject private OverlayManager overlayManager;
  @Inject private CurrentTaskOverlay currentTaskOverlay;
  @Inject private ChatCommandManager chatCommandManager;

  private TaskmanPluginPanel sidePanel;
  private TaskService taskService;
  private NavigationButton navigationButton;
  private boolean loggedIn = false;
  private boolean sidePanelInitialized = false;

  @Override
  protected void startUp() throws Exception {
    // Sidebar
    final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "icon.png");
    taskService = new TaskService(okHttpClient, gson);
    chatCommandManager.registerCommandAsync(TASKMAN_CHAT_COMMAND, this::getTaskmanCommandData);

    sidePanel = new TaskmanPluginPanel(this);
    navigationButton =
        NavigationButton.builder()
            .tooltip("Taskman")
            .priority(8)
            .icon(icon)
            .panel(sidePanel)
            .build();
    clientToolbar.addNavigation(navigationButton);
    overlayManager.add(currentTaskOverlay);
  }

  @Override
  protected void shutDown() throws Exception {
    // Sidebar
    clientToolbar.removeNavigation(navigationButton);
    overlayManager.remove(currentTaskOverlay);
    chatCommandManager.unregisterCommand(TASKMAN_CHAT_COMMAND);
  }

  public Task getCurrentTask() throws Exception {
    final Task task = taskService.getCurrentTask(getCredentials(), getRsn());
    currentTaskOverlay.setTask(task);
    return task;
  }

  public Task generateTask() throws Exception {
    final Task task = taskService.generateTask(getCredentials(), getRsn());
    currentTaskOverlay.setTask(task);
    return task;
  }

  public Task completeTask() throws Exception {
    final Task task = taskService.completeTask(getCredentials(), getRsn());
    currentTaskOverlay.setTask(task);
    return task;
  }

  public AccountProgress progress() throws Exception {
    return taskService.getAccountProgress(getCredentials(), getRsn());
  }

  private void getTaskmanCommandData(final ChatMessage chatMessage, final String message) {
    if (!config.taskmanCommand()) {
      return;
    }

    final ChatMessageType type = chatMessage.getType();
    final String rsn;
    if (type == ChatMessageType.PRIVATECHATOUT) {
      rsn = getRsn();
    } else {
      rsn = Text.removeTags(chatMessage.getName()).replace('\u00A0', ' ');
    }

    final TaskmanCommandData data;
    try {
      data = taskService.getChatCommandData(rsn);
    } catch (final IOException ex) {
      log.debug("Unable to get chat command data", ex);
      return;
    }

    final String response =
        new ChatMessageBuilder()
            .append(ChatColorType.NORMAL)
            .append("Progress: ")
            .append(ChatColorType.HIGHLIGHT)
            .append(data.getProgressPercentage() + "% " + data.getTier())
            .append(ChatColorType.NORMAL)
            .append(" Current task: ")
            .append(ChatColorType.HIGHLIGHT)
            .append(data.getTask().getName())
            .build();

    final MessageNode messageNode = chatMessage.getMessageNode();
    messageNode.setRuneLiteFormatMessage(response);
    client.refreshChat();
  }

  private AccountCredentials getCredentials() {
    switch (config.taskSource()) {
      case SPREADSHEET:
        return new AccountCredentials(
            config.spreadsheetKey(), config.passphrase(), config.taskSource());
      case WEBSITE:
        return new AccountCredentials(
            config.websiteUsername(), config.websitePassword(), config.taskSource());
      default:
        throw new IllegalArgumentException("No task source selected in config.");
    }
  }

  private String getRsn() {
    final Player player = client.getLocalPlayer();
    if (player == null) {
      throw new IllegalArgumentException("Please login first!");
    }
    return player.getName();
  }

  @Subscribe
  public void onGameStateChanged(final GameStateChanged gameStateChanged) {
    if (gameStateChanged.getGameState() == GameState.LOGGED_IN) {
      loggedIn = true;
    } else if (gameStateChanged.getGameState() == GameState.LOGIN_SCREEN) {
      loggedIn = false;
      sidePanelInitialized = false;
      sidePanel.onLogout();
    }
  }

  @Subscribe
  public void onGameTick(final GameTick gameTick) {
    if (!sidePanelInitialized && loggedIn) {
      log.info("Initializing sidepanel");
      sidePanel.init();
      sidePanelInitialized = true;
    }
  }

  @Subscribe
  public void onConfigChanged(final ConfigChanged configChanged) {
    if (configChanged.getGroup().equals(TASKMAN_CONFIG_GROUP)) {
      log.info("Configuration changed");
      SwingUtilities.invokeLater(() -> sidePanel.reset());
    }
  }

  @Provides
  TaskmanConfig provideConfig(final ConfigManager configManager) {
    return configManager.getConfig(TaskmanConfig.class);
  }
}

package com.westerhoud.osrs.taskman.ui;

import com.westerhoud.osrs.taskman.TaskmanConfig;
import com.westerhoud.osrs.taskman.domain.Task;
import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import net.runelite.client.ui.overlay.OverlayPanel;

public class CurrentTaskOverlay extends OverlayPanel {

  private Task task;
  private final TaskmanConfig config;
  private final CurrentTaskComponent currentTaskComponent = new CurrentTaskComponent();

  @Inject
  public CurrentTaskOverlay(final TaskmanConfig config) {
    this.config = config;
  }

  public void setTask(final Task task) {
    this.task = task;
    currentTaskComponent.setTask(task);
  }

  @Override
  public Dimension render(final Graphics2D graphics) {
    if (!config.showOverlay() || task == null) {
      return null;
    }

    panelComponent.getChildren().add(currentTaskComponent);
    return super.render(graphics);
  }
}

package com.westerhoud.osrs.taskman.ui;

import com.westerhoud.osrs.taskman.TaskmanPlugin;
import com.westerhoud.osrs.taskman.domain.AccountProgress;
import com.westerhoud.osrs.taskman.domain.Task;
import com.westerhoud.osrs.taskman.domain.TierProgress;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.util.Map;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.ColorJButton;
import net.runelite.client.ui.components.PluginErrorPanel;
import net.runelite.client.ui.components.ProgressBar;
import net.runelite.client.ui.components.shadowlabel.JShadowedLabel;
import net.runelite.client.util.ImageUtil;

@Slf4j
public class TaskmanPluginPanel extends PluginPanel {

  private final TaskmanPlugin taskmanPlugin;
  private final JPanel taskPanel;
  private final JPanel taskDataPanel;
  private final JPanel progressPanel;
  private final PluginErrorPanel errorPanel;
  private final JShadowedLabel currentTaskLabel = new JShadowedLabel("Current task:");
  private final JShadowedLabel progressLabel = new JShadowedLabel("Progress:");
  private final JShadowedLabel imageLabel = new JShadowedLabel();
  private final JShadowedLabel nameLabel = new JShadowedLabel();
  private final JButton refreshButton = new JButton();
  private final ColorJButton generateButton =
      new ColorJButton("Generate task", ColorScheme.DARK_GRAY_COLOR);
  private final ColorJButton completeButton =
      new ColorJButton("Complete task", ColorScheme.DARK_GRAY_COLOR);
  private final JPanel tryAgainPanel;

  public TaskmanPluginPanel(final TaskmanPlugin taskmanPlugin) {
    super();
    this.taskmanPlugin = taskmanPlugin;

    setOpaque(false);
    setBorder(new EmptyBorder(50, 0, 0, 0));
    setLayout(new BorderLayout());

    taskPanel = new JPanel(new BorderLayout(10, 10));
    taskPanel.setBorder(new EmptyBorder(0, 10, 0, 10));
    taskPanel.setVisible(false);

    taskDataPanel = new JPanel(new BorderLayout(10, 5));
    final JPanel taskDataTitlePanel = new JPanel(new BorderLayout());
    currentTaskLabel.setFont(FontManager.getRunescapeFont());
    currentTaskLabel.setForeground(Color.WHITE);
    refreshButton.setIcon(getRefreshButton());
    refreshButton.setPreferredSize(new Dimension(25, 25));
    refreshButton.setMaximumSize(new Dimension(25, 25));
    refreshButton.setFocusPainted(false);
    refreshButton.addActionListener(e -> reset());
    taskDataTitlePanel.add(currentTaskLabel, BorderLayout.WEST);
    taskDataTitlePanel.add(refreshButton, BorderLayout.EAST);
    nameLabel.setFont(FontManager.getRunescapeSmallFont());
    nameLabel.setHorizontalAlignment(SwingConstants.LEFT);
    taskDataPanel.add(taskDataTitlePanel, BorderLayout.NORTH);
    taskDataPanel.add(imageLabel, BorderLayout.WEST);
    taskDataPanel.add(nameLabel, BorderLayout.CENTER);

    final JPanel buttonPanel = new JPanel(new BorderLayout(10, 10));
    generateButton.setFont(FontManager.getRunescapeSmallFont());
    generateButton.setFocusPainted(false);
    generateButton.addActionListener(e -> generateTaskAndUpdateContent());
    completeButton.setFont(FontManager.getRunescapeSmallFont());
    completeButton.setFocusPainted(false);
    completeButton.addActionListener(e -> completeTaskAndUpdateContent());
    buttonPanel.add(generateButton, BorderLayout.WEST);
    buttonPanel.add(completeButton, BorderLayout.CENTER);

    progressPanel = new JPanel(new GridLayout(5, 1, 10, 10));
    progressPanel.setBorder(new EmptyBorder(30, 10, 0, 10));
    progressPanel.setVisible(false);

    progressLabel.setFont(FontManager.getRunescapeFont());
    progressLabel.setForeground(Color.WHITE);

    taskPanel.add(taskDataPanel, BorderLayout.NORTH);
    taskPanel.add(buttonPanel, BorderLayout.CENTER);
    taskPanel.add(progressPanel, BorderLayout.SOUTH);

    errorPanel = new PluginErrorPanel();
    errorPanel.setBorder(new EmptyBorder(50, 0, 0, 0));
    tryAgainPanel = new JPanel();
    final JButton tryAgainButton = new JButton("Try again");
    tryAgainButton.setFocusPainted(false);
    tryAgainButton.addActionListener(e -> reset());
    tryAgainButton.setPreferredSize(new Dimension(100, 25));
    tryAgainButton.setMaximumSize(new Dimension(150, 25));
    tryAgainPanel.add(tryAgainButton);
    tryAgainPanel.setVisible(false);
    errorPanel.add(tryAgainPanel, BorderLayout.SOUTH);
    errorPanel.setContent("Please login first!", "");
    add(taskPanel, BorderLayout.NORTH);
    add(progressPanel, BorderLayout.CENTER);
    add(errorPanel, BorderLayout.SOUTH);
  }

  public void init() {
    reset();
  }

  private void updateTaskPanelContent(final Task task) {
    imageLabel.setIcon(new ImageIcon(task.getResizedImage(25, 25)));
    nameLabel.setText(task.getName());
    taskPanel.setVisible(true);
  }

  private void showErrorMessage(final Exception e) {
    tryAgainPanel.setVisible(true);
    errorPanel.setContent("Oops... Something went wrong", e.getMessage());
    errorPanel.setVisible(true);
    errorPanel.revalidate();
    errorPanel.repaint();
  }

  private void getCurrentTaskAndUpdateContent() {
    try {
      final Task currentTask = taskmanPlugin.getCurrentTask();
      updateTaskPanelContent(currentTask);
      errorPanel.setVisible(false);
    } catch (final Exception e) {
      log.error(e.getMessage(), e);
      showErrorMessage(e);
    }
  }

  private void generateTaskAndUpdateContent() {
    try {
      final Task newTask = taskmanPlugin.generateTask();
      updateTaskPanelContent(newTask);
      errorPanel.setVisible(false);
    } catch (final Exception e) {
      log.error(e.getMessage(), e);
      showErrorMessage(e);
    }
  }

  private void completeTaskAndUpdateContent() {
    try {
      final Task newTask = taskmanPlugin.completeTask();
      updateTaskPanelContent(newTask);
      getProgressAndUpdateContent();
      errorPanel.setVisible(false);
    } catch (final Exception e) {
      log.error(e.getMessage(), e);
      showErrorMessage(e);
    }
  }

  private void getProgressAndUpdateContent() {
    try {
      final AccountProgress accountProgress = taskmanPlugin.progress();
      progressPanel.removeAll();
      progressPanel.add(progressLabel);
      for (final Map.Entry<String, TierProgress> entry :
          accountProgress.getProgressByTier().entrySet()) {
        final String key = entry.getKey();
        final TierProgress value = entry.getValue();
        final ProgressBar progressBar = new ProgressBar();
        progressBar.setMaximumValue(value.getMaxValue());
        progressBar.setValue(value.getValue());
        progressBar.setRightLabel(String.valueOf(value.getMaxValue()));
        progressBar.setLeftLabel(String.valueOf(value.getValue()));
        final int percentage = progressBar.getPercentage();
        progressBar.setCenterLabel(String.format("%s %d%%", key, percentage));
        progressBar.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        if (percentage == 0) {
          progressBar.setForeground(Color.RED);
        } else if (percentage < 25) {
          progressBar.setForeground(Color.decode("#ea6600"));
        } else if (percentage < 50) {
          progressBar.setForeground(Color.decode("#ffb600"));
        } else if (percentage < 75) {
          progressBar.setForeground(Color.decode("#ffe500"));
        } else if (percentage < 100) {
          progressBar.setForeground(Color.decode("#aeff00"));
        } else {
          progressBar.setForeground(Color.GREEN);
        }
        progressPanel.add(progressBar);
      }
      if (!accountProgress.getProgressByTier().isEmpty()) {
        progressPanel.setVisible(true);
      }
    } catch (final Exception e) {
      log.error(e.getMessage(), e);
      showErrorMessage(e);
    }
  }

  private Icon getRefreshButton() {
    final BufferedImage image = ImageUtil.loadImageResource(getClass(), "refresh.png");
    final Image resizedImage = image.getScaledInstance(25, 25, Image.SCALE_FAST);
    return new ImageIcon(resizedImage);
  }

  public void reset() {
    taskPanel.setVisible(false);
    progressPanel.setVisible(false);
    getCurrentTaskAndUpdateContent();
    getProgressAndUpdateContent();
  }

  public void onLogout() {
    taskPanel.setVisible(false);
    progressPanel.setVisible(false);
    tryAgainPanel.setVisible(false);
    errorPanel.setContent("Please login first!", "");
    errorPanel.setVisible(true);
    errorPanel.revalidate();
    errorPanel.repaint();
  }
}

package com.westerhoud.osrs.taskman.ui;

import com.westerhoud.osrs.taskman.domain.Task;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import net.runelite.client.ui.overlay.components.LayoutableRenderableEntity;
import net.runelite.client.util.ImageUtil;

@RequiredArgsConstructor
public class CurrentTaskComponent implements LayoutableRenderableEntity {

  public static final int BORDER_SIZE = 15;
  private Task task;
  private final boolean taskChanged = false;
  private final BufferedImage background =
      ImageUtil.loadImageResource(getClass(), "empty_dark.png");

  @Getter private final Rectangle bounds = new Rectangle();
  @Setter private Point preferredLocation = new Point();

  private Image resizedTaskIcon;
  private int taskIconX;

  public void setTask(final Task task) {
    this.task = task;

    final int taskIconSize = background.getHeight() - (BORDER_SIZE * 2);
    taskIconX = background.getWidth() - BORDER_SIZE - taskIconSize;
    resizedTaskIcon = task.getResizedImage(taskIconSize, taskIconSize);
  }

  @Override
  public void setPreferredSize(final Dimension dimension) {}

  @Override
  public Dimension render(final Graphics2D graphics) {
    graphics.drawImage(background, preferredLocation.x, preferredLocation.y, null);
    graphics.drawImage(resizedTaskIcon, taskIconX, BORDER_SIZE, null);

    final Dimension dimension = new Dimension(background.getWidth(), background.getHeight());
    bounds.setLocation(preferredLocation);
    bounds.setSize(dimension);
    return dimension;
  }
}

package com.westerhoud.osrs.taskman.api;

import com.westerhoud.osrs.taskman.domain.AccountCredentials;
import com.westerhoud.osrs.taskman.domain.AccountProgress;
import com.westerhoud.osrs.taskman.domain.Task;
import com.westerhoud.osrs.taskman.domain.TaskmanCommandData;
import java.io.IOException;

public interface TaskService {

  Task getCurrentTask(final AccountCredentials credentials, final String name) throws IOException;

  Task generateTask(final AccountCredentials credentials, final String name) throws IOException;

  Task completeTask(final AccountCredentials credentials, final String name) throws IOException;

  AccountProgress getAccountProgress(final AccountCredentials credentials, final String name)
      throws IOException;

  TaskmanCommandData getChatCommandData(String rsn) throws IOException;
}

