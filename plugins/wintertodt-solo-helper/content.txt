package com.WintertodtSoloHelper;

import com.google.common.collect.Lists;
import com.google.inject.Provides;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
//Burnables
import static net.runelite.api.AnimationID.*;
import static net.runelite.api.ItemID.*;
import static net.runelite.api.ObjectID.SPROUTING_ROOTS;
//Potions
//Hammer

import javax.inject.Inject;
import java.time.Duration;
import java.time.Instant;
import java.util.List;

@PluginDescriptor(
		name = "Wintertodt Solo Helper",
		description = "Helpful Highlighting and data for Wintertodt Soloers",
		tags = {"minigame", "firemaking", "boss"}
)
@Slf4j
public class WintertodtSoloHelperPlugin extends Plugin {
	@Inject
	private Client client;
	@Inject
	private WintertodtSoloHelperOverlay overlay;
	@Inject
	private OverlayManager overlayManager;

	@Inject
	private WintertodtSoloHelperConfig config;

	@Provides
	WintertodtSoloHelperConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(WintertodtSoloHelperConfig.class);
	}

	// Statics
	private static final int WINTERTODT_REGION_ID = 6462;
	public static final int WINTERTODT_WIDGET_GROUP_ID = 396;
	private static final int WINTERTODT_HEALTH_WIDGET_ID = 21;
	private static final int WINTERTODT_POINTS_WIDGET_ID = 7;
	private static final int HAMMER_CRATE = 29316;
	private static final int KNIFE_CRATE = 29317;
	private static final int POTION_CRATE = 29320;
	private static final int TINDERBOX_CRATE = 29319;
	private static final int UNLIT_BRAZIER = 29312;
	private static final int BROKEN_BRAZIER = 29313;
	private static final int LIT_BRAZIER = 29314;
	private static final int BRUMA_ROOTS = 29311;
	private static final int PYROMANCER = 7372;
	private static final int DEAD_PYROMANCER = 7371;

	// World locations
	private WintertodtBrazier SouthEast = new WintertodtBrazier(BrazierLocation.SouthEast);
	private WintertodtBrazier SouthWest = new WintertodtBrazier(BrazierLocation.SouthWest);
	private WintertodtBrazier NorthEast = new WintertodtBrazier(BrazierLocation.NorthEast);
	private WintertodtBrazier NorthWest = new WintertodtBrazier(BrazierLocation.NorthWest);
	@Getter(AccessLevel.PACKAGE)
	private List<WintertodtBrazier> braziers = Lists.newArrayList(SouthEast, SouthWest, NorthEast, NorthWest);

	private Widget healthWidget;
	private Widget pointsWidget;
	private Item[] inventoryItems;
	private Item[] equipmentItems;
	private Instant lastActionTime;
	@Getter(AccessLevel.PACKAGE)
	private int brumaLogCount;

	@Getter(AccessLevel.PACKAGE)
	private int brumaKindlingCount;

	@Getter(AccessLevel.PACKAGE)
	private int emptyInventoryCount;

	@Getter(AccessLevel.PACKAGE)
	private int wintertodtHealth;

	@Getter(AccessLevel.PACKAGE)
	private int wintertodtPoints;

	@Getter(AccessLevel.PACKAGE)
	private boolean isInWintertodt;

	@Getter(AccessLevel.PACKAGE)
	private boolean hasHammer;

	@Getter(AccessLevel.PACKAGE)
	private boolean hasKnife;

	@Getter(AccessLevel.PACKAGE)
	private boolean hasTinderbox;

	@Getter(AccessLevel.PACKAGE)
	private String warningText;

	@Getter(AccessLevel.PACKAGE)
	private TileObject hammerCrate;

	@Getter(AccessLevel.PACKAGE)
	private TileObject knifeCrate;

	private PermanentGameObject potionCrateWest = new PermanentGameObject(POTION_CRATE, new WorldPoint(1626, 3982, 0));
	private PermanentGameObject potionCrateEast = new PermanentGameObject(POTION_CRATE, new WorldPoint(1634, 3982, 0));
	@Getter(AccessLevel.PACKAGE)
	private List<PermanentGameObject> potionCrates = Lists.newArrayList(potionCrateWest, potionCrateEast);

	private PermanentGameObject sproutingRootsWest = new PermanentGameObject(SPROUTING_ROOTS, new WorldPoint(1611, 4007, 0));
	private PermanentGameObject sproutingRootsEast = new PermanentGameObject(SPROUTING_ROOTS, new WorldPoint(1649, 4007, 0));
	@Getter(AccessLevel.PACKAGE)
	private List<PermanentGameObject> sproutingRoots = Lists.newArrayList(sproutingRootsWest, sproutingRootsEast);

	private List<PermanentGameObject> allPermanentObjects = Lists.newArrayList(potionCrateEast, potionCrateWest, sproutingRootsEast, sproutingRootsWest);

	@Getter(AccessLevel.PACKAGE)
	private TileObject tinderboxCrate;

	@Getter(AccessLevel.PACKAGE)
	private int potionDoseCount;

	@Getter(AccessLevel.PACKAGE)
	private int unfinishedCount;

	@Getter(AccessLevel.PACKAGE)
	private int herbCount;

	@Getter(AccessLevel.PACKAGE)
	private int litBrazierCount;

	@Getter(AccessLevel.PACKAGE)
	private WintertodtActivity currentActivity = WintertodtActivity.IDLE;

	@Override
	protected void startUp() throws Exception {
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception {
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onGameTick(GameTick gameTick) {
		if (!isInWintertodtRegion())
		{
			if (isInWintertodt)
			{
				log.debug("Left Wintertodt!");
				reset();
				isInWintertodt = false;
			}
			return;
		}

		if(isInWintertodt)
		{
			healthWidget = client.getWidget(WINTERTODT_WIDGET_GROUP_ID, WINTERTODT_HEALTH_WIDGET_ID);
			pointsWidget = client.getWidget(WINTERTODT_WIDGET_GROUP_ID, WINTERTODT_POINTS_WIDGET_ID);

			if (healthWidget != null) {
				// widget.getText() returns "Wintertodt's Energy: 100%" so we need to get an int
				String text = healthWidget.getText();
				if(text != null && text != "" && text.replaceAll("[^0-9]", "") != "")
				{
					wintertodtHealth = Integer.parseInt(text.replaceAll("[^0-9]", ""));
				}
			}

			if (pointsWidget != null) {
				// widget.getText() returns "Points 122" so we need to get an int
				String text = pointsWidget.getText();
				if(text != null && text != "" && text.replaceAll("[^0-9]", "") != "")
				{
					wintertodtPoints = Integer.parseInt(text.replaceAll("[^0-9]", ""));
				}
			}

			// process widgets
			litBrazierCount = 0;
			for (WintertodtBrazier brazier : braziers)
			{
				brazier.ProcessWidgets(client);
				if(brazier.getStatus() == BrazierStatus.LIT)
				{
					litBrazierCount++;
				}
			}

		}
		else
		{
			reset();
			log.debug("Entered Wintertodt!");
			isInWintertodt = true;
		}

		checkActionTimeout();
	}

	@Subscribe
	public void onItemContainerChanged(final ItemContainerChanged event) {
		final ItemContainer itemContainer = event.getItemContainer();

		if(event.getContainerId() == InventoryID.INVENTORY.getId()) {
			inventoryItems = itemContainer.getItems();

			//reset counts
			herbCount = 0;
			unfinishedCount = 0;
			brumaLogCount = 0;
			brumaKindlingCount = 0;
			potionDoseCount = 0;
			emptyInventoryCount = 0;

			if(inventoryItems != null)
			{
				//get bruma count
				for (Item item : inventoryItems) {
					if (item.getId() == BRUMA_ROOT) {
						brumaLogCount++;
					}
					if (item.getId() == BRUMA_KINDLING) {
						brumaKindlingCount++;
					}

					if (item.getId() == REJUVENATION_POTION_1) {
						potionDoseCount++;
					}
					if (item.getId() == REJUVENATION_POTION_2) {
						potionDoseCount = potionDoseCount + 2;
					}
					if (item.getId() == REJUVENATION_POTION_3) {
						potionDoseCount = potionDoseCount + 3;
					}
					if (item.getId() == REJUVENATION_POTION_4) {
						potionDoseCount = potionDoseCount + 4;
					}
					if (item.getId() == REJUVENATION_POTION_UNF) {
						unfinishedCount++;
					}
					if (item.getId() == BRUMA_HERB) {
						herbCount++;
					}
					if(item.getId() == -1) {
						emptyInventoryCount++;
					}
				}
			}
		}

		if(event.getContainerId() == InventoryID.EQUIPMENT.getId()) {
			equipmentItems = itemContainer.getItems();
		}

		if(inventoryItems != null && equipmentItems != null) {
			hasHammer = false;
			hasKnife = false;
			hasTinderbox = false;
			for (Item item : equipmentItems) {
				if (item.getId() == IMCANDO_HAMMER) {
					hasHammer = true;
				}
				if (item.getId() == BRUMA_TORCH) {
					hasTinderbox = true;
				}
			}
			if(!hasHammer) {
				//is inventory hammer
				for (Item item : inventoryItems) {
					if (item.getId() == HAMMER) {
						hasHammer = true;
					}
					if (item.getId() == KNIFE) {
						hasKnife = true;
					}
					if (item.getId() == TINDERBOX) {
						hasTinderbox = true;
					}
				}
			}
		}
	}

	private boolean isInWintertodtRegion()
	{
		if (client.getLocalPlayer() != null)
		{
			return client.getLocalPlayer().getWorldLocation().getRegionID() == WINTERTODT_REGION_ID;
		}

		return false;
	}

	private void reset()
	{
		healthWidget = null;
		pointsWidget = null;
		wintertodtHealth = 0;
		currentActivity = WintertodtActivity.IDLE;
	}

	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned event)
	{
		processGameObject(event.getGameObject());
	}

	private void processGameObject(GameObject gameObject) {
		if(gameObject.getId() == HAMMER_CRATE) {
			hammerCrate = gameObject;
		}
		if(gameObject.getId() == KNIFE_CRATE) {
			knifeCrate = gameObject;
		}

		for (PermanentGameObject permanentGameObject : allPermanentObjects)
		{
			permanentGameObject.setGameObject(gameObject);
		}

		if(gameObject.getId() == TINDERBOX_CRATE) {
			tinderboxCrate = gameObject;
		}

		if(gameObject.getId() == UNLIT_BRAZIER || gameObject.getId() == LIT_BRAZIER || gameObject.getId() == BROKEN_BRAZIER) {
			for (WintertodtBrazier brazier : braziers)
			{
				brazier.updateGameObject(gameObject);
			}
		}

		if(gameObject.getId() == BRUMA_ROOTS) {
			for (WintertodtBrazier brazier : braziers)
			{
				brazier.updateRoots(gameObject);
			}
		}
	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned event)
	{
		NPC npc = event.getNpc();

		if (npc.getId() == PYROMANCER || npc.getId() == DEAD_PYROMANCER) {
			for (WintertodtBrazier brazier : braziers) {
				brazier.updatePyromancer(npc);
			}
		}
	}


	@Subscribe
	public void onAnimationChanged(final AnimationChanged event)
	{
		if (!isInWintertodt)
		{
			return;
		}

		final Player local = client.getLocalPlayer();

		if (event.getActor() != local)
		{
			return;
		}

		final int animId = local.getAnimation();
		switch (animId)
		{
			case WOODCUTTING_BRONZE:
			case WOODCUTTING_IRON:
			case WOODCUTTING_STEEL:
			case WOODCUTTING_BLACK:
			case WOODCUTTING_MITHRIL:
			case WOODCUTTING_ADAMANT:
			case WOODCUTTING_RUNE:
			case WOODCUTTING_GILDED:
			case WOODCUTTING_DRAGON:
			case WOODCUTTING_DRAGON_OR:
			case WOODCUTTING_INFERNAL:
			case WOODCUTTING_3A_AXE:
			case WOODCUTTING_CRYSTAL:
			case WOODCUTTING_TRAILBLAZER:
				setActivity(WintertodtActivity.WOODCUTTING);
				break;

			case FLETCHING_BOW_CUTTING:
				setActivity(WintertodtActivity.FLETCHING);
				break;

			case LOOKING_INTO:
				setActivity(WintertodtActivity.FEEDING_BRAZIER);
				break;

			case FIREMAKING:
				setActivity(WintertodtActivity.LIGHTING_BRAZIER);
				break;

			case CONSTRUCTION:
			case CONSTRUCTION_IMCANDO:
				setActivity(WintertodtActivity.FIXING_BRAZIER);
				break;
		}
	}

	public WorldPoint getPlayerLocation() {
		return client.getLocalPlayer().getWorldLocation();
	}

	public Player getPlayer() {
		return client.getLocalPlayer();
	}

	private void setActivity(WintertodtActivity action)
	{
		currentActivity = action;
		lastActionTime = Instant.now();
	}

	private void checkActionTimeout()
	{
		if (currentActivity == WintertodtActivity.IDLE)
		{
			return;
		}

		int currentAnimation = client.getLocalPlayer() != null ? client.getLocalPlayer().getAnimation() : -1;
		if (currentAnimation != IDLE || lastActionTime == null)
		{
			return;
		}

		Duration actionTimeout = Duration.ofSeconds(3);
		Duration sinceAction = Duration.between(lastActionTime, Instant.now());

		if (sinceAction.compareTo(actionTimeout) >= 0)
		{
			log.debug("Activity timeout!");
			currentActivity = WintertodtActivity.IDLE;
		}
	}
}

/*
 * Copyright (c) 2018, terminatusx <jbfleischman@gmail.com>
 * Copyright (c) 2018, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.WintertodtSoloHelper;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.TileObject;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;
import net.runelite.client.ui.overlay.outline.ModelOutlineRenderer;

import javax.inject.Inject;
import java.awt.*;

import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

@Slf4j
class WintertodtSoloHelperOverlay extends OverlayPanel
{
	private final WintertodtSoloHelperPlugin plugin;
	private final WintertodtSoloHelperConfig wintertodtAFKConfig;
	private final ModelOutlineRenderer modelOutlineRenderer;

	@Inject
	private WintertodtSoloHelperOverlay(WintertodtSoloHelperPlugin plugin, WintertodtSoloHelperConfig wintertodtAFKConfig, ModelOutlineRenderer modelOutlineRenderer)
	{
		super(plugin);
		this.plugin = plugin;
		this.wintertodtAFKConfig = wintertodtAFKConfig;
		this.modelOutlineRenderer = modelOutlineRenderer;
		setPosition(OverlayPosition.BOTTOM_LEFT);
		addMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Wintertodt Afk overlay");
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (!plugin.isInWintertodt())
		{
			return null;
		}

		if(wintertodtAFKConfig.showOverlay()) {
			panelComponent.getChildren().add(LineComponent.builder()
					.left("Wintertodt Health: ")
					.leftColor(Color.WHITE)
					.right(String.valueOf(plugin.getWintertodtHealth()))
					.rightColor(Color.WHITE)
					.build());

			panelComponent.getChildren().add(LineComponent.builder()
					.left("Lit Braziers: ")
					.leftColor(Color.WHITE)
					.right(String.valueOf(plugin.getLitBrazierCount()))
					.rightColor(Color.WHITE)
					.build());

			panelComponent.getChildren().add(LineComponent.builder()
					.left("Potion Doses: ")
					.leftColor(wintertodtAFKConfig.minPotionDose() <= plugin.getPotionDoseCount() ? Color.WHITE : wintertodtAFKConfig.getHighlightColor())
					.right(String.valueOf(plugin.getPotionDoseCount()))
					.rightColor(wintertodtAFKConfig.minPotionDose() <= plugin.getPotionDoseCount() ? Color.WHITE : wintertodtAFKConfig.getHighlightColor())
					.build());

			if(wintertodtAFKConfig.warnForHammer() && !plugin.isHasHammer()) {
				panelComponent.getChildren().add(TitleComponent.builder()
						.text("Missing Hammer")
						.color(wintertodtAFKConfig.getHighlightColor())
						.build());
			}

			if(wintertodtAFKConfig.warnForKnife() && !plugin.isHasKnife()) {
				panelComponent.getChildren().add(TitleComponent.builder()
						.text("Missing Knife")
						.color(wintertodtAFKConfig.getHighlightColor())
						.build());
			}

			if(wintertodtAFKConfig.warnForTinderbox() && !plugin.isHasTinderbox()) {
				panelComponent.getChildren().add(TitleComponent.builder()
						.text("Missing Tinderbox")
						.color(wintertodtAFKConfig.getHighlightColor())
						.build());
			}
		}

		if(wintertodtAFKConfig.highlightObjects())
		{
			if(wintertodtAFKConfig.warnForHammer() && !plugin.isHasHammer()) {
				modelOutlineRenderer.drawOutline(plugin.getHammerCrate(), 6, wintertodtAFKConfig.getHighlightColor(), 6);
			}

			if(wintertodtAFKConfig.warnForKnife() && !plugin.isHasKnife()) {
				modelOutlineRenderer.drawOutline(plugin.getKnifeCrate(), 6, wintertodtAFKConfig.getHighlightColor(), 6);
			}

			if(wintertodtAFKConfig.warnForTinderbox() && !plugin.isHasTinderbox()) {
				modelOutlineRenderer.drawOutline(plugin.getTinderboxCrate(), 6, wintertodtAFKConfig.getHighlightColor(), 6);
			}

			if(plugin.getPotionDoseCount() < wintertodtAFKConfig.minPotionDose()) {
				if(plugin.getUnfinishedCount() == 0) {
					for (PermanentGameObject crate : plugin.getPotionCrates()) {
						modelOutlineRenderer.drawOutline(crate.getGameObject(), 6, wintertodtAFKConfig.getHighlightColor(), 6);
					}
				}
				if(plugin.getHerbCount() == 0) {
					for (PermanentGameObject root : plugin.getSproutingRoots()) {
						modelOutlineRenderer.drawOutline(root.getGameObject(), 6, wintertodtAFKConfig.getHighlightColor(), 6);
					}
				}
			}

			if (wintertodtAFKConfig.highlightPlayer() && plugin.getBrumaLogCount() > 0 && plugin.getCurrentActivity() != WintertodtActivity.WOODCUTTING && plugin.getCurrentActivity() != WintertodtActivity.FLETCHING) {
				log.debug(plugin.getPlayer() + " " + plugin.getPlayer().getWorldLocation());
				modelOutlineRenderer.drawOutline(plugin.getPlayer(), 6, wintertodtAFKConfig.getHighlightColor(), 6);
			}

			for (WintertodtBrazier brazier : plugin.getBraziers()) {
				brazier.render(modelOutlineRenderer, wintertodtAFKConfig, plugin);
			}
		}

		return super.render(graphics);
	}
}

package com.WintertodtSoloHelper;

import lombok.AccessLevel;
import lombok.Getter;
import net.runelite.api.GameObject;
import net.runelite.api.coords.WorldPoint;

public class PermanentGameObject {
    @Getter(AccessLevel.PACKAGE)
    private GameObject gameObject;

    private final int objectId;

    private WorldPoint worldPoint;

    public PermanentGameObject(int objectId, WorldPoint worldLocation) {
        this.objectId = objectId;
        this.worldPoint = worldLocation;
    }

    public void setGameObject(GameObject gameObject) {
        if(gameObject.getWorldLocation().getX() == worldPoint.getX() && gameObject.getWorldLocation().getY() == worldPoint.getY()) {
            this.gameObject = gameObject;
        }
    }
}

package com.WintertodtSoloHelper;

public enum BrazierStatus {
    LIT,
    UNLIT,
    BROKEN
}

/*
 * Copyright (c) 2018, terminatusx <jbfleischman@gmail.com>
 * Copyright (c) 2018, Adam <Adam@sigterm.info>
 * Copyright (c) 2020, loldudester <HannahRyanster@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.WintertodtSoloHelper;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("wintertodt-afk")
public interface WintertodtSoloHelperConfig extends Config
{
    @ConfigItem(
            position = 0,
            keyName = "showOverlay",
            name = "Show Overlay",
            description = "Toggles the status overlay"
    )
    default boolean showOverlay()
    {
        return true;
    }

    //highlight game objects
    @ConfigItem(
            position = 1,
            keyName = "highlightObjects",
            name = "Highlight Objects",
            description = "Highlights objects"
    )
    default boolean highlightObjects()
    {
        return true;
    }

    //highlight player when inventory actions needed
    @ConfigItem(
            position = 2,
            keyName = "highlightPlayer",
            name = "Highlight Player",
            description = "Highlights player when inventory actions needed"
    )
    default boolean highlightPlayer()
    {
        return true;
    }

    // What point goal before ending
    @ConfigItem(
            position = 2,
            keyName = "pointGoal",
            name = "Point Goal",
            description = "What point goal before ending"
    )
    @Range(
            min = 0,
            max = 13500
    )
    default int pointGoal()
    {
        return 13500;
    }

    // which brazier you prefer to use
    @ConfigItem(
            position = 3,
            keyName = "brazier",
            name = "Brazier",
            description = "Which brazier you prefer to use"
    )
    default BrazierLocation brazier()
    {
        return BrazierLocation.SouthEast;
    }

    @Alpha
    @ConfigItem(
            keyName = "overlayColor",
            name = "Highlight Color",
            description = "Color of highlights",
            position = 5
    )
    default Color getHighlightColor()
    {
        return Color.RED;
    }

    @ConfigSection(
            name = "Percentages",
            description = "All the options for how you solo Wintertodt",
            position = 6,
            closedByDefault = false
    )
    String percentages = "percentages";

    // Minimum Relight Health
    @ConfigItem(
            position = 0,
            keyName = "minRelightHealth",
            name = "Minimum Relight Health",
            description = "Minimum health to relight the main brazier",
            section = percentages
    )
    @Range(
            min = 1,
            max = 100
    )
    @Units(Units.PERCENT)
    default int minRelightHealth()
    {
        return 6;
    }

    // Always Relight Health
    @ConfigItem(
            position = 1,
            keyName = "alwaysRelightHealth",
            name = "Always Relight Health",
            description = "Always relight the fire above this health",
            section = percentages
    )
    @Range(
            min = 2,
            max = 100
    )
    @Units(Units.PERCENT)
    default int alwaysRelightHealth()
    {
        return 11;
    }

    // what percentage to relight multiple fires
    @ConfigItem(
            position = 2,
            keyName = "multiFireRelightPercentage",
            name = "Multi Fire Relight Percentage",
            description = "What percentage to relight multiple fires",
            section = percentages
    )
    @Range(
            min = 2,
            max = 100
    )
    @Units(Units.PERCENT)
    default int multiFireRelightPercentage()
    {
        return 25;
    }

    @ConfigSection(
            name = "Items",
            description = "Should the plugin highlight crates for hammers, knifes, etc",
            position = 7,
            closedByDefault = true
    )
    String items = "items";

    // Should warn for hammer
    @ConfigItem(
            position = 0,
            keyName = "warnForHammer",
            name = "Warn for Hammer",
            description = "Warns you if you don't have a hammer",
            section = items
    )
    default boolean warnForHammer()
    {
        return true;
    }

    // should warn for knife
    @ConfigItem(
            position = 1,
            keyName = "warnForKnife",
            name = "Warn for Knife",
            description = "Warns and highlights you if you don't have a knife",
            section = items
    )
    default boolean warnForKnife()
    {
        return true;
    }

    //should warn for tinderbox
    @ConfigItem(
            position = 2,
            keyName = "warnForTinderbox",
            name = "Warn for Tinderbox",
            description = "Warns and highlights you if you don't have a tinderbox",
            section = items
    )
    default boolean warnForTinderbox()
    {
        return true;
    }

    //min potion dose
    @ConfigItem(
            position = 3,
            keyName = "minPotionDose",
            name = "Minimum Potion Dose",
            description = "Warns and highlights when you have less than this many doses of bruma potion",
            section = items
    )
    @Range(
            min = 0,
            max = 40
    )
    default int minPotionDose()
    {
        return 4;
    }

    @ConfigSection(
            name = "Misc",
            description = "Miscellaneous options",
            position = 6,
            closedByDefault = true
    )
    String misc = "misc";

    //always repair broken
    @ConfigItem(
            position = 0,
            keyName = "alwaysRepairBroken",
            name = "Always Repair Broken",
            description = "Always repair broken brazier",
            section = misc
    )
    default boolean alwaysRepairBroken()
    {
        return true;
    }


}
package com.WintertodtSoloHelper;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.NPC;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.widgets.Widget;
import net.runelite.client.ui.overlay.outline.ModelOutlineRenderer;

@Slf4j
public class WintertodtBrazier {
    public GameObject brazierObject;
    private GameObject brumaRootObject;
    private NPC pyromancer;

    @Getter(AccessLevel.PACKAGE)
    private BrazierStatus status;

    private static final int UNLIT_SPRITE_ID = 1398;
    private static final int LIT_SPRITE_ID = 1399;
    private static final int BROKEN_SPRITE_ID = 1397;

    private static final int DEAD_PYROMANCER_SPRITE_ID = 1400;

    private WorldPoint worldLocation;

    private int brazierStatusWidgetId;

    private Widget brazierStatusWidget;

    private int wizardStatusWidgetId;

    private Widget wizardStatusWidget;

    public BrazierLocation brazierLocation;

    @Getter(AccessLevel.PACKAGE)
    private boolean pyromancerAlive;

    public WintertodtBrazier(BrazierLocation brazierLocation) {
        this.brazierLocation = brazierLocation;

        switch (brazierLocation) {
            case SouthWest:
                worldLocation = new WorldPoint(1621, 3998, 0);
                brazierStatusWidgetId = 12;
                wizardStatusWidgetId = 8;
                break;
            case NorthWest:
                worldLocation = new WorldPoint(1621, 4016, 0);
                brazierStatusWidgetId = 13;
                wizardStatusWidgetId = 9;
                break;
            case NorthEast:
                worldLocation = new WorldPoint(1639, 4016, 0);
                brazierStatusWidgetId = 14;
                wizardStatusWidgetId = 10;
                break;
            case SouthEast:
                worldLocation = new WorldPoint(1639, 3998, 0);
                brazierStatusWidgetId = 15;
                wizardStatusWidgetId = 11;
                break;
        }
    }

    public void ProcessWidgets(Client client) {
        wizardStatusWidget = client.getWidget(WintertodtSoloHelperPlugin.WINTERTODT_WIDGET_GROUP_ID, wizardStatusWidgetId);
        brazierStatusWidget = client.getWidget(WintertodtSoloHelperPlugin.WINTERTODT_WIDGET_GROUP_ID, brazierStatusWidgetId);

        if(brazierStatusWidget != null) {
            if(brazierStatusWidget.getSpriteId() == UNLIT_SPRITE_ID) {
                status = BrazierStatus.UNLIT;
            }
            if(brazierStatusWidget.getSpriteId() == LIT_SPRITE_ID) {
                status = BrazierStatus.LIT;
            }
            if(brazierStatusWidget.getSpriteId() == BROKEN_SPRITE_ID)
            {
                status = BrazierStatus.BROKEN;
            }
        }

        if(wizardStatusWidget != null) {
            if(wizardStatusWidget.getSpriteId() == DEAD_PYROMANCER_SPRITE_ID) {
                pyromancerAlive = false;
            }
            else {
                pyromancerAlive = true;
            }
        }
    }

    public void updateGameObject(GameObject gameObject) {
        if(gameObject.getWorldLocation().getX() == worldLocation.getX() && gameObject.getWorldLocation().getY() == worldLocation.getY()) {
            brazierObject = gameObject;
        }
    }

    public void render(ModelOutlineRenderer modelOutlineRenderer, WintertodtSoloHelperConfig config, WintertodtSoloHelperPlugin plugin) {
        boolean thisIsMainLocation = config.brazier() == brazierLocation;

        int distanceFromPlayer = worldLocation.distanceTo(plugin.getPlayerLocation());

        boolean isWithinDistance = distanceFromPlayer <= 15;

        boolean shouldCurrentActivityStopRender = plugin.getCurrentActivity() == WintertodtActivity.LIGHTING_BRAZIER
                                        || plugin.getCurrentActivity() == WintertodtActivity.FEEDING_BRAZIER;

        boolean shouldDraw = !isWithinDistance || !shouldCurrentActivityStopRender;

        boolean shouldDrawRoot = !isWithinDistance || plugin.getCurrentActivity() != WintertodtActivity.WOODCUTTING;

        if(!pyromancerAlive) {
            if(pyromancer != null) {
                modelOutlineRenderer.drawOutline(pyromancer, 6, config.getHighlightColor(), 6);
            }
        }

        int brumaKindlingCount = plugin.getBrumaKindlingCount();
        int brumaRootCount = plugin.getBrumaLogCount();

        // Broken Brazier
        if(config.alwaysRepairBroken()) {
            if(status == BrazierStatus.BROKEN) {
                drawOutline(modelOutlineRenderer, brazierObject, config, true);
            }
        }

        // Ending Game
        if(config.pointGoal() < plugin.getWintertodtPoints()) {
            if(status != BrazierStatus.LIT) {
                drawOutline(modelOutlineRenderer, brazierObject, config, shouldDraw);
            }
        }

        // Main gameplay loop
        if (thisIsMainLocation) {
            if(status == BrazierStatus.UNLIT) {
                if(plugin.getWintertodtHealth() > config.alwaysRelightHealth())
                {
                    drawOutline(modelOutlineRenderer, brazierObject, config, shouldDraw);
                }
                else if (plugin.getWintertodtHealth() > config.minRelightHealth())
                {
                    if(brumaKindlingCount > 0)
                    {
                        if(brumaRootCount == 0) {
                            drawOutline(modelOutlineRenderer, brazierObject, config, shouldDraw);
                        }
                    }
                    else if(plugin.getEmptyInventoryCount() != 0) {
                        drawOutline(modelOutlineRenderer, brumaRootObject, config, shouldDrawRoot);
                    }
                }
            }
            else if(status == BrazierStatus.LIT) {
                if(brumaKindlingCount > 0)
                {
                    if(brumaRootCount == 0) {
                        drawOutline(modelOutlineRenderer, brazierObject, config, shouldDraw);
                    }
                }
                else if(plugin.getEmptyInventoryCount() != 0) {
                    drawOutline(modelOutlineRenderer, brumaRootObject, config, shouldDrawRoot);
                }
            }
            else if(status == BrazierStatus.BROKEN) {
                drawOutline(modelOutlineRenderer, brazierObject, config, shouldDraw);
                if (plugin.getEmptyInventoryCount() != 0 && brumaKindlingCount == 0) {
                    drawOutline(modelOutlineRenderer, brumaRootObject, config, shouldDrawRoot);
                }
            }
        }
        else if(config.multiFireRelightPercentage() < plugin.getWintertodtHealth()) {
            if(status == BrazierStatus.UNLIT) {
                drawOutline(modelOutlineRenderer, brazierObject, config, shouldDraw);
            }
        }
    }

    private void drawOutline(ModelOutlineRenderer modelOutlineRenderer, GameObject gameObject, WintertodtSoloHelperConfig config, boolean shouldDraw) {
        if(shouldDraw) {
            modelOutlineRenderer.drawOutline(gameObject, 6, config.getHighlightColor(), 6);
        }
    }

    public void updateRoots(GameObject gameObject) {
        int distance = gameObject.getWorldLocation().distanceTo(worldLocation);

        if(distance < 15)
        {
            brumaRootObject = gameObject;
        }
    }

    public void updatePyromancer(NPC npc) {
        int distance = npc.getWorldLocation().distanceTo(worldLocation);

        if(distance < 15)
        {
            pyromancer = npc;
        }
    }
}
package com.WintertodtSoloHelper;

import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
@Getter
enum WintertodtActivity
{
    IDLE("IDLE"),
    WOODCUTTING("Woodcutting"),
    FLETCHING("Fletching"),
    FEEDING_BRAZIER("Feeding"),
    FIXING_BRAZIER("Fixing"),
    LIGHTING_BRAZIER("Lighting"),
    PICKING_HERBS("Picking herbs"),
    MAKING_POTIONS("Making Potions");

    private final String actionString;
}

package com.WintertodtSoloHelper;

public enum BrazierLocation {
    SouthEast,
    SouthWest,
    NorthEast,
    NorthWest
}
