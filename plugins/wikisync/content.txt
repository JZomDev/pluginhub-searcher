package com.andmcadams.wikisync;

import ch.qos.logback.classic.Level;
import javax.inject.Singleton;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import ch.qos.logback.classic.Logger;
import org.slf4j.LoggerFactory;

@Singleton
@PluginDescriptor(
	name = "[Debug] WikiSync Logging"
)
public class WikiSyncLogPlugin extends Plugin
{

	@Override
	protected void startUp()
	{
		((Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME)).setLevel(Level.WARN);
		((Logger) LoggerFactory.getLogger("com.andmcadams.wikisync")).setLevel(Level.DEBUG);
	}

	@Override
	protected void shutDown()
	{
		((Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME)).setLevel(Level.DEBUG);
	}
}

package com.andmcadams.wikisync;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class WikiSyncPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(WikiSyncPlugin.class, WikiSyncLogPlugin.class);
		RuneLite.main(args);
	}
}

package com.andmcadams.wikisync;

import lombok.Value;
import net.runelite.client.config.RuneScapeProfileType;

@Value
public class PlayerProfile
{
    String username;
    RuneScapeProfileType profileType;
}
package com.andmcadams.wikisync;

import lombok.Data;

@Data
public class Manifest
{
    final int version = -1;
    final int[] varbits = new int[0];
    final int[] varps = new int[0];
}
package com.andmcadams.wikisync;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.HashMap;
import java.util.Map;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class PlayerData
{
    Map<Integer, Integer> varb = new HashMap<>();
    Map<Integer, Integer> varp = new HashMap<>();
    Map<String, Integer> level = new HashMap<>();

    public boolean isEmpty()
    {
        return varb.isEmpty() && varp.isEmpty() && level.isEmpty();
    }
}
package com.andmcadams.wikisync;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class PlayerDataSubmission
{
    private String username;
    private String profile;
    private PlayerData data;
}
package com.andmcadams.wikisync.dps.messages.response;

import com.andmcadams.wikisync.dps.messages.RequestType;
import com.google.gson.JsonObject;
import lombok.Value;

@Value
public class GetPlayer
{
	RequestType _wsType = RequestType.GetPlayer;
	int sequenceId;
	JsonObject payload;
}

package com.andmcadams.wikisync.dps.messages.response;

import com.andmcadams.wikisync.dps.messages.RequestType;
import lombok.Value;

@Value
public class UsernameChanged
{

	RequestType _wsType = RequestType.UsernameChanged;
	String username;

}

package com.andmcadams.wikisync.dps.messages;

import lombok.Value;

@Value
public class Request
{
	RequestType _wsType;
	int sequenceId;
}

package com.andmcadams.wikisync.dps.messages;

public enum RequestType
{
	UsernameChanged,
	GetPlayer
}

package com.andmcadams.wikisync.dps;

import com.andmcadams.wikisync.dps.messages.response.UsernameChanged;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.util.Objects;
import javax.annotation.Nullable;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.GameState;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.ItemID;
import net.runelite.api.Player;
import net.runelite.api.Skill;
import net.runelite.api.VarPlayer;
import net.runelite.api.Varbits;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;

@Slf4j
@Singleton
@RequiredArgsConstructor(onConstructor_ = @Inject)
public class DpsDataFetcher
{

	private final Client client;
	private final EventBus eventBus;

	@Getter
	private String username;

	@Subscribe
	public void onGameTick(GameTick e)
	{
		checkUsername();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged e)
	{
		checkUsername();
	}

	private void checkUsername()
	{
		String currentName = null;
		if (client.getGameState() == GameState.LOGGED_IN)
		{
			Player p = client.getLocalPlayer();
			if (p != null)
			{
				currentName = p.getName();
			}
		}

		if (!Objects.equals(this.username, currentName))
		{
			log.debug("WS player name changed prev=[{}] next=[{}]", this.username, currentName);
			this.username = currentName;
			eventBus.post(new UsernameChanged(this.username));
		}
	}

	// TODO: Delete this once the Wiki plugin service exists. See https://github.com/runelite/runelite/pull/17524
	// This is directly copied from https://github.com/runelite/runelite/pull/17524/files#diff-141a15aba5d017de9818b5d39722f85f95b330ef96f8eb06103a947c1094b905
	@Nullable
	private JsonObject createEquipmentObject(ItemContainer itemContainer, EquipmentInventorySlot slot)
	{
		if (itemContainer == null)
		{
			return null;
		}

		if (slot == EquipmentInventorySlot.BOOTS && itemContainer.count() == 1 && itemContainer.contains(ItemID.CHEFS_HAT))
		{
			JsonObject o = new JsonObject();
			o.addProperty("id", ItemID.SNAIL_SHELL);
			return o;
		}

		Item item = itemContainer.getItem(slot.getSlotIdx());
		if (item != null)
		{
			JsonObject o = new JsonObject();
			o.addProperty("id", item.getId());
			return o;
		}
		return null;
	}

	// TODO: Delete this once the Wiki plugin service exists. See https://github.com/runelite/runelite/pull/17524
	// This is directly copied from https://github.com/runelite/runelite/pull/17524/files#diff-141a15aba5d017de9818b5d39722f85f95b330ef96f8eb06103a947c1094b905
	public JsonObject buildShortlinkData()
	{
		JsonObject j = new JsonObject();

		// Build the player's loadout data
		JsonArray loadouts = new JsonArray();
		ItemContainer eqContainer = client.getItemContainer(InventoryID.EQUIPMENT);

		JsonObject l = new JsonObject();
		JsonObject eq = new JsonObject();

		eq.add("ammo", createEquipmentObject(eqContainer, EquipmentInventorySlot.AMMO));
		eq.add("body", createEquipmentObject(eqContainer, EquipmentInventorySlot.BODY));
		eq.add("cape", createEquipmentObject(eqContainer, EquipmentInventorySlot.CAPE));
		eq.add("feet", createEquipmentObject(eqContainer, EquipmentInventorySlot.BOOTS));
		eq.add("hands", createEquipmentObject(eqContainer, EquipmentInventorySlot.GLOVES));
		eq.add("head", createEquipmentObject(eqContainer, EquipmentInventorySlot.HEAD));
		eq.add("legs", createEquipmentObject(eqContainer, EquipmentInventorySlot.LEGS));
		eq.add("neck", createEquipmentObject(eqContainer, EquipmentInventorySlot.AMULET));
		eq.add("ring", createEquipmentObject(eqContainer, EquipmentInventorySlot.RING));
		eq.add("shield", createEquipmentObject(eqContainer, EquipmentInventorySlot.SHIELD));
		eq.add("weapon", createEquipmentObject(eqContainer, EquipmentInventorySlot.WEAPON));
		l.add("equipment", eq);

		JsonObject skills = new JsonObject();
		skills.addProperty("atk", client.getRealSkillLevel(Skill.ATTACK));
		skills.addProperty("def", client.getRealSkillLevel(Skill.DEFENCE));
		skills.addProperty("hp", client.getRealSkillLevel(Skill.HITPOINTS));
		skills.addProperty("magic", client.getRealSkillLevel(Skill.MAGIC));
		skills.addProperty("mining", client.getRealSkillLevel(Skill.MINING));
		skills.addProperty("prayer", client.getRealSkillLevel(Skill.PRAYER));
		skills.addProperty("ranged", client.getRealSkillLevel(Skill.RANGED));
		skills.addProperty("str", client.getRealSkillLevel(Skill.STRENGTH));
		l.add("skills", skills);

		JsonObject buffs = new JsonObject();
		buffs.addProperty("inWilderness", client.getVarbitValue(Varbits.IN_WILDERNESS) == 1);
		buffs.addProperty("kandarinDiary", client.getVarbitValue(Varbits.DIARY_KANDARIN_HARD) == 1);
		buffs.addProperty("onSlayerTask", client.getVarpValue(VarPlayer.SLAYER_TASK_SIZE) > 0);
		buffs.addProperty("chargeSpell", client.getVarpValue(VarPlayer.CHARGE_GOD_SPELL) > 0);
		l.add("buffs", buffs);

		l.addProperty("name", client.getLocalPlayer().getName());

		loadouts.add(l);
		j.add("loadouts", loadouts);

		return j;
	}

}

package com.andmcadams.wikisync.dps.ws;

import org.java_websocket.WebSocket;
import org.java_websocket.handshake.ClientHandshake;

public interface WSHandler
{

	default void onOpen(WebSocket conn, ClientHandshake handshake) {}
	default void onClose(WebSocket conn, int code, String reason, boolean remote) {}
	default void onMessage(WebSocket conn, String message) {}
	default void onError(WebSocket conn, Exception ex) {}
	default void onStart() {}

}

package com.andmcadams.wikisync.dps.ws;

import java.net.InetSocketAddress;
import org.java_websocket.WebSocket;
import org.java_websocket.handshake.ClientHandshake;
import org.java_websocket.server.WebSocketServer;

public class WSWebsocketServer extends WebSocketServer
{

	private final WSHandler handler;

	public WSWebsocketServer(int port, WSHandler handler)
	{
		super(new InetSocketAddress("127.0.0.1", port), 1);
		this.setDaemon(true);
		this.handler = handler;
	}

	@Override
	public void onOpen(WebSocket conn, ClientHandshake handshake)
	{
		this.handler.onOpen(conn, handshake);
	}

	@Override
	public void onClose(WebSocket conn, int code, String reason, boolean remote)
	{
		this.handler.onClose(conn, code, reason, remote);
	}

	@Override
	public void onMessage(WebSocket conn, String message)
	{
		this.handler.onMessage(conn, message);
	}

	@Override
	public void onError(WebSocket conn, Exception ex)
	{
		this.handler.onError(conn, ex);
	}

	@Override
	public void onStart()
	{
		this.handler.onStart();
	}
}

package com.andmcadams.wikisync.dps;

import com.andmcadams.wikisync.dps.messages.response.GetPlayer;
import com.andmcadams.wikisync.dps.messages.Request;
import com.andmcadams.wikisync.dps.messages.response.UsernameChanged;
import com.andmcadams.wikisync.dps.ws.WSHandler;
import com.andmcadams.wikisync.dps.ws.WSWebsocketServer;
import com.google.common.collect.ImmutableSet;
import com.google.common.util.concurrent.ThreadFactoryBuilder;
import com.google.gson.Gson;
import com.google.gson.JsonObject;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.eventbus.Subscribe;
import org.java_websocket.WebSocket;
import org.java_websocket.handshake.ClientHandshake;

@Slf4j
@Singleton
@RequiredArgsConstructor(onConstructor_ = @Inject)
public class WebSocketManager implements WSHandler
{

	private final static int PORT_MIN = 37767;
	private final static int PORT_MAX = 37776;

	private final static Set<String> ALLOWED_ORIGIN_HOSTS = ImmutableSet.of("localhost", "dps.osrs.wiki", "tools.runescape.wiki");

	private final AtomicBoolean serverActive = new AtomicBoolean(false);

	private final Gson gson;
	private final DpsDataFetcher dpsDataFetcher;

	private int nextPort;

	private WSWebsocketServer server;

	@Inject
	private ClientThread clientThread;

	private static final ExecutorService executorService = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat("wikisync-dps-manager-%d").build());

	public void startUp()
	{
		this.nextPort = PORT_MIN;
		// Just in case we are in a bad state, let's try to stop any active server.
		stopServer();
		ensureActive();
	}

	public void shutDown()
	{
		log.debug("Shutting down WikiSync Websocket Manager. Server active = {}", serverActive.getPlain());
		stopServer();
	}

	/**
	 * If a server is not currently running or starting, then try to start a new server. If a server is currently
	 * running or starting, then do nothing. Then method is meant to be called regularly, so it will happily do nothing
	 * on any specific run.
	 */
	public void ensureActive()
	{
		if (!serverActive.compareAndExchange(false, true))
		{
			this.server = new WSWebsocketServer(this.nextPort++, this);
			this.server.start();
			log.debug("WSWSS attempting to start at: {}", this.server.getAddress());
			if (this.nextPort > PORT_MAX) {
				this.nextPort = PORT_MIN;
			}
		}
	}

	@Subscribe
	public void onUsernameChanged(UsernameChanged e)
	{
		if (serverActive.get())
		{
			executorService.submit(()->{
				this.server.broadcast(gson.toJson(e));
			});
		}
	}

	@Override
	public void onOpen(WebSocket conn, ClientHandshake handshake)
	{
		// Validate that only trusted sources are allowed to connect. This is not foolproof, but it should catch
		// unauthorized access from any major browser.
		String requestPath = conn.getResourceDescriptor();
		String origin = handshake.getFieldValue("origin");
		log.debug("Received new WebSocket request. requestPath: {}, origin: {}", requestPath, origin);
		if (!Objects.equals(requestPath, "/")) {
			log.error("Unknown requestPath: {}", requestPath);
			conn.close();
			return;
		}
		try
		{
			URI originUri = new URI(origin);
			String host = originUri.getHost();
			if (!ALLOWED_ORIGIN_HOSTS.contains(host)) {
				log.error("Unauthorized origin: {}", host);
				conn.close();
				return;
			}
		}
		catch (URISyntaxException e)
		{
			log.error("Could not parse origin: {}", (Object) e);
			conn.close();
			return;
		}

		// This connection appears to be valid!
		conn.send(gson.toJson(new UsernameChanged(dpsDataFetcher.getUsername())));
	}

	@Override
	public void onMessage(WebSocket conn, String message)
	{
		Request request = gson.fromJson(message, Request.class);
		switch (request.get_wsType()) {
			case GetPlayer:
				clientThread.invokeLater(() -> {
					JsonObject payload = dpsDataFetcher.buildShortlinkData();
					executorService.submit(()->{
						conn.send(gson.toJson(new GetPlayer(request.getSequenceId(), payload)));
					});
				});
				break;
			default:
				log.debug("Got request with no handler.");
				break;
		}
	}


	@Override
	public void onError(WebSocket conn, Exception ex)
	{
		log.debug("ws error conn=[{}]", conn == null ? null : conn.getLocalSocketAddress(), ex);
		// `conn == null` signals the error is related to the whole server, not just a specific connection.
		if (conn == null)
		{
			log.debug("failed to bind to port, trying next");
			stopServer();
			// Immediately trying a new port is okay to do once for each port, but we do not want to continuously try to
			// spawn servers in a tight loop if something goes wrong. If the attempted ports have wrapped around back to
			// `PORT_MIN`, then we can stop attempting to start servers and wait for the next scheduled call to
			// `ensureActive`.
			if (this.nextPort != PORT_MIN)
			{
				ensureActive();
			}
		}
	}

	@Override
	public void onStart()
	{
		log.debug("Started! Port: {}", server.getPort());
	}

	private void stopServer()
	{
		try
		{
			if (this.server != null)
			{
				try
				{
					this.server.stop();
				}
				catch (InterruptedException e)
				{
					// ignored
				}
				finally
				{
					this.server = null;
				}
			}
		} finally
		{
			this.serverActive.set(false);
		}
	}
}

/*
 * Copyright (c) 2021, andmcadams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.wikisync;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(WikiSyncPlugin.CONFIG_GROUP_KEY)
public interface WikiSyncConfig extends Config
{
	String WIKISYNC_VERSION_KEYNAME = "version";
	String ENABLE_LOCAL_WEB_SOCKET_SERVER_KEYNAME = "enableLocalWebSocketServer";

	@ConfigItem(keyName = WIKISYNC_VERSION_KEYNAME, name = "Version", description = "The last version of WikiSync used by the player", hidden = true)
	default int wikiSyncVersion()
	{
		return WikiSyncPlugin.VERSION;
	}


	@ConfigItem(keyName = ENABLE_LOCAL_WEB_SOCKET_SERVER_KEYNAME,
		name = "Enable local WebSocket server",
		description = "If enabled, a WebSocket server will be served on localhost to be used by the OSRS DPS calculator (and other tools in the future!).")
	default boolean enableLocalWebSocketServer()
	{
		return true;
	}
}

/*
 * Copyright (c) 2021, andmcadams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.andmcadams.wikisync;

import com.andmcadams.wikisync.dps.DpsDataFetcher;
import com.andmcadams.wikisync.dps.WebSocketManager;
import com.google.gson.Gson;
import com.google.gson.JsonParseException;
import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Skill;
import net.runelite.api.VarbitComposition;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.config.RuneScapeProfileType;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.task.Schedule;
import okhttp3.*;

import javax.inject.Inject;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.time.temporal.ChronoUnit;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

@Slf4j
@PluginDescriptor(
	name = "WikiSync"
)
public class WikiSyncPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private EventBus eventBus;

	@Inject
	private ConfigManager configManager;

	@Inject
	private WebSocketManager webSocketManager;

	@Inject
	private DpsDataFetcher dpsDataFetcher;

	@Inject
	private WikiSyncConfig config;

	@Inject
	private Gson gson;

	@Inject
	private OkHttpClient okHttpClient;

	private static final int SECONDS_BETWEEN_UPLOADS = 10;
	private static final int SECONDS_BETWEEN_MANIFEST_CHECKS = 1200;

	private static final String MANIFEST_URL = "https://sync.runescape.wiki/runelite/manifest";
	private static final String SUBMIT_URL = "https://sync.runescape.wiki/runelite/submit";
	private static final MediaType JSON = MediaType.parse("application/json; charset=utf-8");

	private static final int VARBITS_ARCHIVE_ID = 14;
	private Map<Integer, VarbitComposition> varbitCompositions = new HashMap<>();

	public static final String CONFIG_GROUP_KEY = "WikiSync";
	// THIS VERSION SHOULD BE INCREMENTED EVERY RELEASE WHERE WE ADD A NEW TOGGLE
	public static final int VERSION = 1;

	private Manifest manifest;
	private Map<PlayerProfile, PlayerData> playerDataMap = new HashMap<>();
	private boolean webSocketStarted;
	private int cyclesSinceSuccessfulCall = 0;

	@Provides
	WikiSyncConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(WikiSyncConfig.class);
	}

	@Override
	public void startUp()
	{
		clientThread.invoke(() -> {
			if (client.getIndexConfig() == null || client.getGameState().ordinal() < GameState.LOGIN_SCREEN.ordinal())
			{
				log.debug("Failed to get varbitComposition, state = {}", client.getGameState());
				return false;
			}
			final int[] varbitIds = client.getIndexConfig().getFileIds(VARBITS_ARCHIVE_ID);
			for (int id : varbitIds)
			{
				varbitCompositions.put(id, client.getVarbit(id));
			}
			return true;
		});

		checkManifest();
		if (config.enableLocalWebSocketServer()) {
			startUpWebSocketManager();
		}
	}

	private void startUpWebSocketManager()
	{
		webSocketManager.startUp();
		eventBus.register(webSocketManager);
		eventBus.register(dpsDataFetcher);
		webSocketStarted = true;
	}

	@Override
	protected void shutDown()
	{
		log.debug("WikiSync stopped!");
		shutDownWebSocketManager();
	}

	private void shutDownWebSocketManager()
	{
		webSocketManager.shutDown();
		eventBus.unregister(webSocketManager);
		eventBus.unregister(dpsDataFetcher);
		webSocketStarted = false;
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged e) {
		if (e.getGroup().equals(CONFIG_GROUP_KEY)){
			if (config.enableLocalWebSocketServer() != webSocketStarted) {
				if (config.enableLocalWebSocketServer()) {
					startUpWebSocketManager();
				} else {
					shutDownWebSocketManager();
				}
			}
		}
	}

	@Schedule(
		period = SECONDS_BETWEEN_UPLOADS,
		unit = ChronoUnit.SECONDS,
		asynchronous = true
	)
	public void submitTask()
	{
		// TODO: do we want other GameStates?
		if (client.getGameState() != GameState.LOGGED_IN || varbitCompositions.isEmpty())
		{
			return;
		}

		if (manifest == null || client.getLocalPlayer() == null)
		{
			log.debug("Skipped due to bad manifest: {}", manifest);
			return;
		}

		String username = client.getLocalPlayer().getName();
		RuneScapeProfileType profileType = RuneScapeProfileType.getCurrent(client);
		PlayerProfile profileKey = new PlayerProfile(username, profileType);

		PlayerData newPlayerData = getPlayerData();
		PlayerData oldPlayerData = playerDataMap.computeIfAbsent(profileKey, k -> new PlayerData());

		// Subtraction is done in place so newPlayerData becomes a map of only changed fields
		subtract(newPlayerData, oldPlayerData);
		if (newPlayerData.isEmpty())
		{
			return;
		}
		submitPlayerData(profileKey, newPlayerData, oldPlayerData);
	}

	@Schedule(
			period = SECONDS_BETWEEN_MANIFEST_CHECKS,
			unit = ChronoUnit.SECONDS,
			asynchronous = true
	)
	public void manifestTask()
	{
		if (client.getGameState() == GameState.LOGGED_IN)
		{
			checkManifest();
		}
	}


	private int getVarbitValue(int varbitId)
	{
		VarbitComposition v = varbitCompositions.get(varbitId);
		if (v == null)
		{
			return -1;
		}

		int value = client.getVarpValue(v.getIndex());
		int lsb = v.getLeastSignificantBit();
		int msb = v.getMostSignificantBit();
		int mask = (1 << ((msb - lsb) + 1)) - 1;
		return (value >> lsb) & mask;
	}

	private PlayerData getPlayerData()
	{
		PlayerData out = new PlayerData();
		for (int varbitId : manifest.varbits)
		{
			out.varb.put(varbitId, getVarbitValue(varbitId));
		}
		for (int varpId : manifest.varps)
		{
			out.varp.put(varpId, client.getVarpValue(varpId));
		}
		for(Skill s : Skill.values())
		{
			out.level.put(s.getName(), client.getRealSkillLevel(s));
		}
		return out;
	}

	private void subtract(PlayerData newPlayerData, PlayerData oldPlayerData)
	{
		oldPlayerData.varb.forEach(newPlayerData.varb::remove);
		oldPlayerData.varp.forEach(newPlayerData.varp::remove);
		oldPlayerData.level.forEach(newPlayerData.level::remove);
	}

	private void merge(PlayerData oldPlayerData, PlayerData delta)
	{
		oldPlayerData.varb.putAll(delta.varb);
		oldPlayerData.varp.putAll(delta.varp);
		oldPlayerData.level.putAll(delta.level);
	}

	private void submitPlayerData(PlayerProfile profileKey, PlayerData delta, PlayerData old)
	{
		// If cyclesSinceSuccessfulCall is not a perfect square, we should not try to submit.
		// This gives us quadratic backoff.
		cyclesSinceSuccessfulCall += 1;
		if (Math.pow((int) Math.sqrt(cyclesSinceSuccessfulCall), 2) != cyclesSinceSuccessfulCall)
		{
			return;
		}

		PlayerDataSubmission submission = new PlayerDataSubmission(
				profileKey.getUsername(),
				profileKey.getProfileType().name(),
				delta
		);

		Request request = new Request.Builder()
				.url(SUBMIT_URL)
				.post(RequestBody.create(JSON, gson.toJson(submission)))
				.build();

		Call call = okHttpClient.newCall(request);
		call.timeout().timeout(3, TimeUnit.SECONDS);
		call.enqueue(new Callback()
		{
			@Override
			public void onFailure(Call call, IOException e)
			{
				log.debug("Failed to submit: ", e);
			}

			@Override
			public void onResponse(Call call, Response response)
			{
				try
				{
					if (!response.isSuccessful()) {
						log.debug("Failed to submit: {}", response.code());
						return;
					}
					merge(old, delta);
					cyclesSinceSuccessfulCall = 0;
				}
				finally
				{
					response.close();
				}
			}
		});
	}

	private void checkManifest()
	{
		Request request = new Request.Builder()
				.url(MANIFEST_URL)
				.build();
		okHttpClient.newCall(request).enqueue(new Callback()
		{
			@Override
			public void onFailure(Call call, IOException e)
			{
				log.debug("Failed to get manifest: ", e);
			}

			@Override
			public void onResponse(Call call, Response response)
			{
				try
				{
					if (!response.isSuccessful())
					{
						log.debug("Failed to get manifest: {}", response.code());
						return;
					}
					InputStream in = response.body().byteStream();
					manifest = gson.fromJson(new InputStreamReader(in, StandardCharsets.UTF_8), Manifest.class);
				}
				catch (JsonParseException e)
				{
					log.debug("Failed to parse manifest: ", e);
				}
				finally
				{
					response.close();
				}
			}
		});
	}

	@Schedule(
		period = 30,
		unit = ChronoUnit.SECONDS,
		asynchronous = true
	)
	public void scheduledEnsureDpsWsActive()
	{
		log.debug("ensuring active!!");
		if (webSocketStarted)
		{
			webSocketManager.ensureActive();
		}
	}
}

