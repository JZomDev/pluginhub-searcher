package de0;

import de0.loadinglines.LoadingLinesPlugin;
import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class LoadingLinesPluginTest {

  @SuppressWarnings("unchecked")
  public static void main(String[] args) throws Exception {
    ExternalPluginManager.loadBuiltin(LoadingLinesPlugin.class);
    RuneLite.main(args);
  }

}

package de0.loadinglines;

import java.awt.BasicStroke;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;

import javax.inject.Inject;

import net.runelite.api.Client;
import net.runelite.api.CollisionData;
import static net.runelite.api.CollisionDataFlag.*;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

public class LoadingLinesOverlay extends Overlay {

  private Client client;
  private LoadingLinesConfig config;

  @Inject
  LoadingLinesOverlay(Client client, LoadingLinesConfig config) {
    this.client = client;
    this.config = config;
    setPosition(OverlayPosition.DYNAMIC);
    setLayer(OverlayLayer.ABOVE_SCENE);
  }

  private static final int MASK_W = BLOCK_MOVEMENT_FULL | BLOCK_MOVEMENT_WEST;
  private static final int MASK_E = BLOCK_MOVEMENT_FULL | BLOCK_MOVEMENT_EAST;
  private static final int MASK_S = BLOCK_MOVEMENT_FULL | BLOCK_MOVEMENT_SOUTH;
  private static final int MASK_N = BLOCK_MOVEMENT_FULL | BLOCK_MOVEMENT_NORTH;

  @Override
  public Dimension render(Graphics2D g) {
    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
    g.setStroke(new BasicStroke(1));
    g.setColor(config.lineColor());

    CollisionData cmap = client.getCollisionMaps()[client.getPlane()];

    WorldPoint wp = client.getLocalPlayer().getWorldLocation();
    int curr_x = wp.getX() - client.getBaseX();
    int curr_y = wp.getY() - client.getBaseY();
    int[][] t = null;
    if (client.isInInstancedRegion()) t = client.getInstanceTemplateChunks()[client.getPlane()];

    final int draw_dist = config.drawDistance();

    int min_x = Math.max(curr_x - draw_dist, 16);
    int max_x = Math.min(curr_x + draw_dist, 88);
    int min_y = Math.max(curr_y - draw_dist, 16);
    int max_y = Math.min(curr_y + draw_dist, 88);

    for (int y = min_y; y < max_y; y++) {
      int x = 16;
      if (x >= min_x) {
        if (t != null && (t[x / 8][y / 8] == -1 || t[(x - 1) / 8][y / 8] == -1)) continue;
        int fl1 = cmap.getFlags()[x][y];
        int fl2 = cmap.getFlags()[x - 1][y];
        if ((fl1 & MASK_W) == 0 && (fl2 & MASK_E) == 0) line(g, 16, y, 16, y + 1);
      }

      x = 88;
      if (x <= max_x) {
        if (t != null && (t[(x - 1) / 8][y / 8] == -1 || t[x / 8][y / 8] == -1)) continue;
        int fl1 = cmap.getFlags()[x - 1][y];
        int fl2 = cmap.getFlags()[x][y];
        if ((fl1 & MASK_E) == 0 && (fl2 & MASK_W) == 0) line(g, 88, y, 88, y + 1);
      }
    }
    for (int x = min_x; x < max_x; x++) {
      int y = 16;
      if (y >= min_y) {
        if (t != null && (t[x / 8][y / 8] == -1 || t[x / 8][(y - 1) / 8] == -1)) continue;
        int fl1 = cmap.getFlags()[x][y];
        int fl2 = cmap.getFlags()[x][y - 1];
        if ((fl1 & MASK_S) == 0 && (fl2 & MASK_N) == 0) line(g, x, y, x + 1, y);
      }

      y = 88;
      if (y <= max_y) {
        if (t != null && (t[x / 8][(y - 1) / 8] == -1 || t[x / 8][y / 8] == -1)) continue;
        int fl1 = cmap.getFlags()[x][y - 1];
        int fl2 = cmap.getFlags()[x][y];
        if ((fl1 & MASK_N) == 0 && (fl2 & MASK_S) == 0) line(g, x, 88, x + 1, 88);
      }
    }

    return null;
  }

  private void line(Graphics g, int x0, int y0, int x1, int y1) {
    int p = client.getPlane();
    int[][][] h = client.getTileHeights();

    Point p0 = Perspective.localToCanvas(client, x0 << 7, y0 << 7, h[p][x0][y0]);
    Point p1 = Perspective.localToCanvas(client, x1 << 7, y1 << 7, h[p][x1][y1]);

    if (p0 != null && p1 != null) g.drawLine(p0.getX(), p0.getY(), p1.getX(), p1.getY());
  }

}

package de0.loadinglines;

import java.awt.Color;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("loadinglines")
public interface LoadingLinesConfig extends Config {

  @Alpha
  @ConfigItem(name = "Line color", description = "", keyName = "lineColor")
  default Color lineColor() {
    return new Color(0, 255, 87, 111);
  }

  @ConfigItem(name = "Draw distance", description = "", keyName = "drawDistance")
  default int drawDistance() {
    return 24;
  }

  @ConfigItem(name = "Show on minimap", description = "", keyName = "minimap")
  default boolean minimap() {
    return false;
  }

  @ConfigItem(name = "Show on world map", description = "", keyName = "worldmap")
  default boolean worldmap() {
    return false;
  }

}

package de0.loadinglines;

import com.google.inject.Inject;
import java.awt.BasicStroke;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Area;
import java.awt.geom.Ellipse2D;
import net.runelite.api.Client;
import net.runelite.api.Constants;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.Varbits;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

public class LoadingLinesMinimapOverlay extends Overlay {

  private static final int CHUNK_SIZE = Constants.CHUNK_SIZE;
  private static final int SCENE_SIZE = Constants.SCENE_SIZE;
  private static final int TILE_SIZE = 4;

  private Client client;
  private LoadingLinesConfig config;

  @Inject
  LoadingLinesMinimapOverlay(Client client, LoadingLinesConfig config) {
    this.client = client;
    this.config = config;
    setPosition(OverlayPosition.DYNAMIC);
    setLayer(OverlayLayer.ABOVE_WIDGETS);
  }

  @Override
  public Dimension render(Graphics2D g) {
    if (!config.minimap()) return null;

    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
    g.setStroke(new BasicStroke(1));
    g.setColor(config.lineColor());

    Area minimapClipArea = getMinimapClipArea();
    if (minimapClipArea == null) return null;

    g.setClip(minimapClipArea);

    final int z = client.getPlane();
    final int baseX = client.getBaseX();
    final int baseY = client.getBaseY();

    WorldPoint southWest = new WorldPoint(baseX + CHUNK_SIZE * 2, baseY + CHUNK_SIZE * 2, z);
    WorldPoint northWest = new WorldPoint(baseX + CHUNK_SIZE * 2,
        baseY + SCENE_SIZE - CHUNK_SIZE * 2, z);
    WorldPoint northEast = new WorldPoint(baseX + SCENE_SIZE - CHUNK_SIZE * 2,
        baseY + SCENE_SIZE - CHUNK_SIZE * 2, z);
    WorldPoint southEast = new WorldPoint(baseX + SCENE_SIZE - CHUNK_SIZE * 2,
        baseY + CHUNK_SIZE * 2, z);

    Point sw = worldToMinimap(southWest);
    Point nw = worldToMinimap(northWest);
    Point ne = worldToMinimap(northEast);
    Point se = worldToMinimap(southEast);

    if (sw != null && nw != null) {
      g.drawLine(sw.getX(), sw.getY(), nw.getX(), nw.getY());
    }

    if (nw != null && ne != null) {
      g.drawLine(nw.getX(), nw.getY(), ne.getX(), ne.getY());
    }

    if (ne != null && se != null) {
      g.drawLine(ne.getX(), ne.getY(), se.getX(), se.getY());
    }

    if (se != null && sw != null) {
      g.drawLine(se.getX(), se.getY(), sw.getX(), sw.getY());
    }

    return null;
  }

  private Point worldToMinimap(final WorldPoint worldPoint) {
    if (client.getLocalPlayer() == null) return null;

    final WorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();
    final LocalPoint localLocation = client.getLocalPlayer().getLocalLocation();
    final LocalPoint playerLocalPoint = LocalPoint.fromWorld(client, playerLocation);

    if (playerLocalPoint == null) return null;

    final int offsetX = playerLocalPoint.getX() - localLocation.getX();
    final int offsetY = playerLocalPoint.getY() - localLocation.getY();

    final int x = (worldPoint.getX() - playerLocation.getX()) * TILE_SIZE + offsetX / 32
        - TILE_SIZE / 2;
    final int y = (worldPoint.getY() - playerLocation.getY()) * TILE_SIZE + offsetY / 32
        - TILE_SIZE / 2 + 1;

    final int angle = client.getMapAngle() & 0x7FF;

    final int sin = (int) (65536.0D * Math.sin((double) angle * Perspective.UNIT));
    final int cos = (int) (65536.0D * Math.cos((double) angle * Perspective.UNIT));

    final Widget minimapDrawWidget = getMinimapDrawWidget();
    if (minimapDrawWidget == null || minimapDrawWidget.isHidden()) return null;

    final int xx = y * sin + cos * x >> 16;
    final int yy = sin * x - y * cos >> 16;

    final Point loc = minimapDrawWidget.getCanvasLocation();
    final int minimapX = loc.getX() + xx + minimapDrawWidget.getWidth() / 2;
    final int minimapY = loc.getY() + yy + minimapDrawWidget.getHeight() / 2;

    return new Point(minimapX, minimapY);
  }

  private Widget getMinimapDrawWidget() {
    Widget minimapDrawArea;
    if (client.isResized()) {
      if (client.getVar(Varbits.SIDE_PANELS) == 1)
        minimapDrawArea = client.getWidget(WidgetInfo.RESIZABLE_MINIMAP_DRAW_AREA);
      else minimapDrawArea = client.getWidget(WidgetInfo.RESIZABLE_MINIMAP_STONES_DRAW_AREA);
    } else minimapDrawArea = client.getWidget(WidgetInfo.FIXED_VIEWPORT_MINIMAP_DRAW_AREA);
    return minimapDrawArea;
  }

  private Area getMinimapClipArea() {
    Widget minimapDrawArea = getMinimapDrawWidget();

    if (minimapDrawArea == null || minimapDrawArea.isHidden()) return null;

    Rectangle bounds = minimapDrawArea.getBounds();
    Ellipse2D ellipse = new Ellipse2D.Double(bounds.getX(), bounds.getY(), bounds.getWidth(),
        bounds.getHeight());

    return new Area(ellipse);
  }
}

package de0.loadinglines;

import com.google.inject.Inject;
import java.awt.BasicStroke;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Area;
import net.runelite.api.Client;
import net.runelite.api.Constants;
import net.runelite.api.Point;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.worldmap.WorldMapOverlay;

public class LoadingLinesWorldmapOverlay extends Overlay {
  private static final int CHUNK_SIZE = Constants.CHUNK_SIZE;
  private static final int SCENE_SIZE = Constants.SCENE_SIZE;

  private Client client;
  private LoadingLinesConfig config;

  @Inject
  private WorldMapOverlay worldMapOverlay;

  @Inject
  private LoadingLinesWorldmapOverlay(Client client, LoadingLinesConfig config) {
    this.client = client;
    this.config = config;
    setPosition(OverlayPosition.DYNAMIC);
    setPriority(OverlayPriority.LOW);
    setLayer(OverlayLayer.MANUAL);
    drawAfterLayer(WidgetInfo.WORLD_MAP_VIEW);
  }

  @Override
  public Dimension render(Graphics2D g) {
    if (!config.worldmap()) return null;

    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
    g.setStroke(new BasicStroke(1));
    g.setColor(config.lineColor());

    final Area mapClipArea = getWorldMapClipArea();
    if (mapClipArea == null) return null;

    g.setClip(mapClipArea);

    final int z = client.getPlane();
    final int baseX = client.getBaseX();
    final int baseY = client.getBaseY();

    WorldPoint southWest = new WorldPoint(baseX + CHUNK_SIZE * 2, baseY + CHUNK_SIZE * 2, z);
    WorldPoint northWest = new WorldPoint(baseX + CHUNK_SIZE * 2,
        baseY + SCENE_SIZE - CHUNK_SIZE * 2, z);
    WorldPoint northEast = new WorldPoint(baseX + SCENE_SIZE - CHUNK_SIZE * 2,
        baseY + SCENE_SIZE - CHUNK_SIZE * 2, z);
    WorldPoint southEast = new WorldPoint(baseX + SCENE_SIZE - CHUNK_SIZE * 2,
        baseY + CHUNK_SIZE * 2, z);

    Point sw = worldMapOverlay.mapWorldPointToGraphicsPoint(southWest);
    Point nw = worldMapOverlay.mapWorldPointToGraphicsPoint(northWest);
    Point ne = worldMapOverlay.mapWorldPointToGraphicsPoint(northEast);
    Point se = worldMapOverlay.mapWorldPointToGraphicsPoint(southEast);

    if (sw != null && nw != null) g.drawLine(sw.getX(), sw.getY(), nw.getX(), nw.getY());

    if (nw != null && ne != null) g.drawLine(nw.getX(), nw.getY(), ne.getX(), ne.getY());

    if (ne != null && se != null) g.drawLine(ne.getX(), ne.getY(), se.getX(), se.getY());

    if (se != null && sw != null) g.drawLine(se.getX(), se.getY(), sw.getX(), sw.getY());

    return null;
  }

  private Area getWorldMapClipArea() {
    final Widget overview = client.getWidget(WidgetInfo.WORLD_MAP_OVERVIEW_MAP);
    final Widget surfaceSelector = client.getWidget(WidgetInfo.WORLD_MAP_SURFACE_SELECTOR);

    final Widget worldMapView = client.getWidget(WidgetInfo.WORLD_MAP_VIEW);
    if (worldMapView == null) return null;

    final Rectangle bounds = worldMapView.getBounds();
    if (bounds == null) return null;

    Area clipArea = new Area(bounds);

    if (overview != null && !overview.isHidden()) clipArea.subtract(new Area(overview.getBounds()));
    if (surfaceSelector != null && !surfaceSelector.isHidden())
      clipArea.subtract(new Area(surfaceSelector.getBounds()));

    return clipArea;
  }
}

package de0.loadinglines;

import javax.inject.Inject;

import com.google.inject.Provides;

import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@PluginDescriptor(name = "Loading Lines", description = "Draw loading lines on screen", enabledByDefault = false)
public class LoadingLinesPlugin extends Plugin {

  @Inject
  private OverlayManager overlayManager;

  @Inject
  private LoadingLinesOverlay overlay;

  @Inject
  private LoadingLinesMinimapOverlay minimapOverlay;

  @Inject
  private LoadingLinesWorldmapOverlay worldmapOverlay;

  @Provides
  LoadingLinesConfig provideConfig(ConfigManager configManager) {
    return configManager.getConfig(LoadingLinesConfig.class);
  }

  @Override
  protected void startUp() throws Exception {
    overlayManager.add(overlay);
    overlayManager.add(minimapOverlay);
    overlayManager.add(worldmapOverlay);
  }

  @Override
  protected void shutDown() throws Exception {
    overlayManager.remove(overlay);
    overlayManager.remove(minimapOverlay);
    overlayManager.remove(worldmapOverlay);
  }

}

