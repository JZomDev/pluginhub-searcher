package com.dryness;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DryCalculatorPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(DryCalculatorPlugin.class);
		RuneLite.main(args);
	}
}
package com.dryness;

import java.awt.Image;

public class DrynessResult
{
	private final String text;
	private final Image image;

	public DrynessResult(String text, Image image)
	{
		this.text = text;
		this.image = image;
	}

	public String getText()
	{
		return text;
	}

	public Image getImage()
	{
		return image;
	}
}

package com.dryness;

import java.awt.Image;
import java.math.BigDecimal;
import java.math.RoundingMode;
import net.runelite.client.util.ImageUtil;

public class DryCalculatorService
{

	private static final BigDecimal ONE_HUNDRED = BigDecimal.valueOf(100);
	private static final Image SKELETON;
	private static final Image DOG;
	private static final Image FUCK;
	private static final Image CRY;
	private static final Image NOTHING;
	private static final Image OPRAH;

	static
	{
		SKELETON = ImageUtil.loadImageResource(DryCalculatorPanel.class, "skeleton.png");
		DOG = ImageUtil.loadImageResource(DryCalculatorPanel.class, "dog.png");
		FUCK = ImageUtil.loadImageResource(DryCalculatorPanel.class, "fuck.png");
		CRY = ImageUtil.loadImageResource(DryCalculatorPanel.class, "cry.png");
		NOTHING = ImageUtil.loadImageResource(DryCalculatorPanel.class, "nothing.png");
		OPRAH = ImageUtil.loadImageResource(DryCalculatorPanel.class, "oprah.png");
	}

	public static DrynessResult calculateDryness(final DrynessInput input)
	{
		if (input.getAmountOfDrops() == 0)
		{
			final BigDecimal dryness = toPercentage(BigDecimal.ONE.subtract(input.getChance()).pow(input.getKc()));
			return new DrynessResult(String.format("With %s kc you had a\n%s%% chance of no drops\n%s%% chance of at least 1\nU rn", input.getKc(), dryness, ONE_HUNDRED.subtract(dryness)), getDrynessImage(dryness.doubleValue(), input.getAmountOfDrops()));
		}
		else
		{
			final int choose = choose(input.getKc(), input.getAmountOfDrops());
			BigDecimal dryness = BigDecimal.valueOf(choose).multiply(input.getChance().pow(input.getAmountOfDrops()).multiply(BigDecimal.ONE.subtract(input.getChance()).pow(input.getKc() - input.getAmountOfDrops())));
			BigDecimal dryness2 = BigDecimal.ZERO;
			for (int i = 0; i <= input.getAmountOfDrops(); i++)
			{
				dryness2 = dryness2.add(BigDecimal.valueOf(choose(input.getKc(), i)).multiply(input.getChance().pow(i)).multiply(BigDecimal.ONE.subtract(input.getChance()).pow(input.getKc() - i)));
			}
			BigDecimal dryness3 = toPercentage(BigDecimal.ONE.subtract(dryness2).add(dryness));
			dryness2 = toPercentage(dryness2);
			dryness = toPercentage(dryness);
			final Image drynessImage;
			if (input.getAmountOfDrops() >= 1)
			{
				drynessImage = getDrynessImage(dryness2.doubleValue(), input.getAmountOfDrops());
			}
			else
			{
				drynessImage = getDrynessImage(dryness.doubleValue(), input.getAmountOfDrops());
			}
			return new DrynessResult(String.format("With %s kc you had a\n%s%% chance for exactly %s\n%s%% chance for %s or fewer\n%s%% chance for %s or more\nU rn", input.getKc(), dryness, input.getAmountOfDrops(), dryness2, input.getAmountOfDrops(), dryness3, input.getAmountOfDrops()), drynessImage);
		}
	}

	private static Image getDrynessImage(double dryness, int drops)
	{
		if (drops == 0)
		{
			if (dryness > 50)
			{
				return NOTHING;
			}
		}
		if (dryness <= 5)
		{
			return SKELETON;
		}
		if (dryness <= 10)
		{
			return DOG;
		}
		if (dryness <= 25)
		{
			return FUCK;
		}
		if (dryness <= 50)
		{
			return CRY;
		}
		if (dryness <= 75)
		{
			return NOTHING;
		}
		else
		{
			return OPRAH;
		}
	}

	private static BigDecimal toPercentage(final BigDecimal input)
	{
		return input.multiply(ONE_HUNDRED).setScale(4, RoundingMode.HALF_UP);
	}

	private static int choose(int n, int k)
	{
		if (k < 0 || k > n)
		{
			return 0;
		}
		if (k == 0 || k == n)
		{
			return 1;
		}
		k = Math.min(k, n - k);
		int c = 1;
		for (int i = 0; i <= k - 1; i++)
		{
			c = c * (n - i) / (i + 1);
		}
		return c;
	}
}

package com.dryness;

import java.awt.image.BufferedImage;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

@Slf4j
@PluginDescriptor(
	name = "Dry calculator"
)
public class DryCalculatorPlugin extends Plugin
{
	@Inject
	private ClientToolbar clientToolbar;

	private NavigationButton navButton;

	@Override
	protected void startUp()
	{
		final DryCalculatorPanel panel = new DryCalculatorPanel();
		final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "icon.png");

		navButton = NavigationButton.builder()
			.tooltip("Dry calculator")
			.icon(icon)
			.priority(20)
			.panel(panel)
			.build();

		clientToolbar.addNavigation(navButton);
	}

	@Override
	protected void shutDown()
	{
		clientToolbar.removeNavigation(navButton);
	}
}

/*
 * Copyright (c) 2018 Abex
 * Copyright (c) 2018, Psikoi <https://github.com/psikoi>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.dryness;

import static com.dryness.DryCalculatorService.calculateDryness;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.PluginPanel;

public class DryCalculatorPanel extends PluginPanel
{
	private final JTextField droprate = new JTextField();
	private final JTextField drops = new JTextField();
	private final JTextField kc = new JTextField();
	private final JTextArea result = new JTextArea();
	private final ImageIcon resultIcon = new ImageIcon();

	DryCalculatorPanel()
	{
		result.setLineWrap(true);
		result.setEditable(false);
		JButton calculate = new JButton();
		calculate.setText("Calculate");
		calculate.addActionListener(this::handleClick);

		setLayout(new BorderLayout());
		setBackground(ColorScheme.DARK_GRAY_COLOR);
		setBorder(new EmptyBorder(10, 10, 10, 10));


		JPanel dryPanel = new JPanel();
		dryPanel.setLayout(new GridLayout(0, 1));
		JLabel title = new JLabel();
		title.setFont(FontManager.getDefaultBoldFont());
		title.setText("Dryness calculator");

		JLabel dropRateLabel = new JLabel();
		dropRateLabel.setText("Droprate");

		JLabel kcLabel = new JLabel();
		kcLabel.setText("Kc");

		JLabel dropsLabel = new JLabel();
		dropsLabel.setText("Amount of drops");

		dryPanel.add(title);

		dryPanel.add(dropRateLabel);
		dryPanel.add(droprate);

		dryPanel.add(kcLabel);
		dryPanel.add(kc);

		dryPanel.add(dropsLabel);
		dryPanel.add(drops);

		dryPanel.add(calculate);

		add(dryPanel, BorderLayout.NORTH);
		add(result, BorderLayout.CENTER);
		JLabel resultImage = new JLabel(resultIcon);
		add(resultImage, BorderLayout.SOUTH);
	}

	private void handleClick(final ActionEvent actionEvent)
	{
		DrynessInput input = null;
		try
		{
			input = new DrynessInput(droprate.getText(), kc.getText(), drops.getText());
		}
		catch (Exception exception)
		{
			result.setText("Invalid input: " + exception.getMessage());
			resultIcon.setImage(null);
		}
		if (input != null)
		{
			DrynessResult drynessResult = calculateDryness(input);
			result.setText(drynessResult.getText());
			resultIcon.setImage(drynessResult.getImage());
		}
	}
}

package com.dryness;

import java.math.BigDecimal;
import java.math.MathContext;

public class DrynessInput
{
	private final BigDecimal chance;
	private final int kc;
	private final int amountOfDrops;


	public DrynessInput(final String dropRateString, final String kcString, final String amountOfDropsString)
	{
		if (dropRateString.split("/").length != 2)
		{
			throw new RuntimeException("Invalid drop rate format, correct example: 1/100");
		}
		BigDecimal first = BigDecimal.valueOf(Long.parseLong(dropRateString.split("/")[0]));
		BigDecimal second = BigDecimal.valueOf(Long.parseLong(dropRateString.split("/")[1]));
		try
		{
			this.chance = first.divide(second, MathContext.DECIMAL128);
		}
		catch (ArithmeticException e)
		{
			throw new RuntimeException("Invalid drop rate numbers");
		}
		try
		{
			this.kc = Integer.parseInt(kcString);
		}
		catch (NumberFormatException e)
		{
			throw new RuntimeException("Invalid kc number: " + kcString);
		}
		try
		{
			this.amountOfDrops = Integer.parseInt(amountOfDropsString);
		}
		catch (NumberFormatException e)
		{
			throw new RuntimeException("Invalid drops number: " + kcString);
		}

		if (amountOfDrops > kc)
		{
			throw new RuntimeException("More drops than kc?!");
		}
		if (kc == 0)
		{
			throw new RuntimeException("Go get some kills!");
		}
		if (kc > 100000)
		{
			throw new RuntimeException("KC should be lower than 100.000");
		}
		if (chance.intValue() >= 1)
		{
			throw new RuntimeException("Chance bigger than 1?!");
		}
	}

	public BigDecimal getChance()
	{
		return chance;
	}

	public int getKc()
	{
		return kc;
	}

	public int getAmountOfDrops()
	{
		return amountOfDrops;
	}
}

