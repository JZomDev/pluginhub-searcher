package com.rohanbansal;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PluginLauncher
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ScapeGptPlugin.class);
		RuneLite.main(args);
	}
}
package com.rohanbansal;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.BorderFactory;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.border.EmptyBorder;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.DocumentFilter;

import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;

@Slf4j
class ScapeGptPanel extends PluginPanel {
    private final JLabel promptInputFieldLabel = new JLabel("<html>Ask ScapeGPT anything! Enter text and press <b>Shift+Enter</b> to submit.<br/><br/>Please keep in mind there is a limit of 20 questions per day, and 3 per minute.<br/><br/></html>");
    private final JTextArea promptInputField = new JTextArea();
    private final JTextArea responseArea = new JTextArea();

    private String prompt = "";
    private ScapeGptClient scapeGptClient;

    void init(ScapeGptClient client) {
        scapeGptClient = client;

        setBackground(ColorScheme.DARK_GRAY_COLOR);

        // Custom settings for the prompt input text area
        promptInputField.setTabSize(2);
        promptInputField.setLineWrap(true);
        promptInputField.setWrapStyleWord(true);
        promptInputField.setMargin(new Insets(10, 10, 10, 10));
        final JScrollPane promptInputScrollPane = new JScrollPane(promptInputField);
        promptInputScrollPane.setPreferredSize(new Dimension(promptInputField.getPreferredSize().width, 100));
        promptInputScrollPane.setBorder(BorderFactory.createLineBorder(ColorScheme.BRAND_ORANGE));

        // Custom settings for the response text area
        responseArea.setEditable(false);
        responseArea.setLineWrap(true);
        responseArea.setWrapStyleWord(true);
        responseArea.setMargin(new Insets(10, 10, 10, 10));
        final JScrollPane responseScrollPane = new JScrollPane(responseArea);
        responseScrollPane.setPreferredSize(new Dimension(responseArea.getPreferredSize().width, 400));

        JPanel promptContainer = new JPanel();
        promptContainer.setLayout(new BorderLayout());
        promptContainer.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        promptContainer.setOpaque(false);

        JPanel responseContainer = new JPanel();
        responseContainer.setLayout(new BoxLayout(responseContainer, BoxLayout.Y_AXIS));
        responseContainer.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        responseContainer.add(Box.createVerticalStrut(10)); // add some vertical space
        responseContainer.setOpaque(false);

        // Add all event listeners
        addPromptInputFieldEventListeners();

        promptContainer.add(promptInputFieldLabel, BorderLayout.NORTH);
        promptContainer.add(promptInputScrollPane, BorderLayout.CENTER);
        promptContainer.setBorder(new EmptyBorder(10, 10, 10, 10));

        responseContainer.add(responseScrollPane, BorderLayout.NORTH);
        responseContainer.setBorder(new EmptyBorder(10, 10, 10, 10));

        add(promptContainer, BorderLayout.NORTH);
        add(responseContainer, BorderLayout.SOUTH);
    }

    private String getTextFromDocument(Document document) {
        try {
            return document.getText(0, document.getLength());
        } catch (BadLocationException ex) {
            // handle the exception
            return null;
        }
    }

    private void addPromptInputFieldEventListeners() {
        addPromptInputFieldKeyEventListener();
        addPromptInputFieldDocumentListener();
        addPromptInputFieldDocumentFilterListener();
    }

    private void addPromptInputFieldKeyEventListener() {
        promptInputField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER && e.isShiftDown()) {
                    responseArea.setText(scapeGptClient.getResponse(prompt));
                }
            }
        });
    }

    private void addPromptInputFieldDocumentListener() {
        promptInputField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                prompt = getTextFromDocument(e.getDocument());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                prompt = getTextFromDocument(e.getDocument());
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }  // Unused
        });
    }

    private void addPromptInputFieldDocumentFilterListener() {
        ((AbstractDocument) promptInputField.getDocument()).setDocumentFilter(new DocumentFilter() {
            private final int maxLength = 200;

            @Override
            public void insertString(FilterBypass fb, int offset, String text, AttributeSet attrs) throws BadLocationException {
                if ((fb.getDocument().getLength() + text.length()) <= maxLength) {
                    super.insertString(fb, offset, text, attrs);
                }
            }

            @Override
            public void remove(FilterBypass fb, int offset, int length) throws BadLocationException {
                super.remove(fb, offset, length);
            }

            @Override
            public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
                if ((fb.getDocument().getLength() - length + text.length()) <= maxLength) {
                    super.replace(fb, offset, length, text, attrs);
                }
            }
        });
    }
}
package com.rohanbansal;

import com.google.gson.Gson;
import com.google.gson.JsonObject;

import java.io.IOException;

import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

import static net.runelite.http.api.RuneLiteAPI.JSON;

public class ScapeGptClient {
    private final OkHttpClient client;
    private final HttpUrl apiUrl;
    private final Gson gson;

    public ScapeGptClient(OkHttpClient client, HttpUrl apiUrl, Gson gson) {
        this.client = client;
        this.apiUrl = apiUrl;
        this.gson = gson;
    }

    public String getResponse(String prompt) {
        Request.Builder builder = new Request.Builder();

        JsonObject jsonObject = new JsonObject();
        jsonObject.addProperty("prompt", prompt);

        Request request = builder
                .post(RequestBody.create(JSON, gson.toJson(jsonObject)))
                .url(apiUrl)
                .build();

        try {
            Response response = client.newCall(request).execute();
            if (!response.isSuccessful()) throw new Exception("Unexpected code " + response);

            String jsonData = response.body().string();
            JsonObject json = gson.newBuilder().create().fromJson(jsonData, JsonObject.class);
            return json.get("res").getAsString().trim();
        } catch (IOException e) {
            String errorMessage = e.getMessage();
            System.err.println("Error making request: " + errorMessage);
            return "An unknown error occurred. Please try again in 1 minute.";
        } catch (Exception e) {
            String errorMessage = e.getMessage();
            System.err.println("Unexpected error: " + errorMessage);
            if (errorMessage.contains("code=429")) {
                return "Too many requests! There is a limit of 3 queries per minute, and 20 queries per day.";
            } else {
                return "An unknown error occurred. Please try again in 1 minute.";
            }
        }
    }
}

package com.rohanbansal;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;

@ConfigGroup("scapegpt")
public interface ScapeGptConfig extends Config {
}

package com.rohanbansal;

import com.google.gson.Gson;
import com.google.inject.Provides;

import java.awt.image.BufferedImage;
import java.util.concurrent.TimeUnit;
import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;

@Slf4j
@PluginDescriptor(name = "ScapeGPT", loadWhenOutdated = true)
public class ScapeGptPlugin extends Plugin {
    private static final String HOST = "44.211.86.102";  // Server IP address that handles requests
    private static final String ENDPOINT = "api/v1/query";
    private static final String LOGO = "scapegpt-icon.png";
    private static final int HTTP_TIMEOUT_SECONDS = 45;  // Both connection and waiting for response
    @Inject
    private ClientToolbar clientToolbar;
    @Inject
    private ScapeGptConfig config;
    @Inject
    private Gson gson;
    @Inject
    private OkHttpClient httpClient;
    private ScapeGptClient scapeGptClient;
    private ScapeGptPanel panel;
    private NavigationButton navButton;
    private HttpUrl apiUrl;

    @Override
    protected void startUp() {
        apiUrl = new HttpUrl.Builder().scheme("http").host(HOST).addPathSegments(ENDPOINT).build();
        scapeGptClient = new ScapeGptClient(httpClient.newBuilder().connectTimeout(HTTP_TIMEOUT_SECONDS, TimeUnit.SECONDS).readTimeout(HTTP_TIMEOUT_SECONDS, TimeUnit.SECONDS).build(), apiUrl, gson);

        panel = injector.getInstance(ScapeGptPanel.class);
        panel.init(scapeGptClient);

        final BufferedImage icon = ImageUtil.loadImageResource(getClass(), LOGO);

        navButton = NavigationButton.builder().tooltip("ScapeGPT").icon(icon).priority(13).panel(panel).build();

        clientToolbar.addNavigation(navButton);
    }

    @Override
    protected void shutDown() {
        clientToolbar.removeNavigation(navButton);
    }

    @Provides
    ScapeGptConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(ScapeGptConfig.class);
    }
}

