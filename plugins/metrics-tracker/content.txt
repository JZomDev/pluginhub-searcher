package com.metricstracker;

import net.runelite.client.config.*;

@ConfigGroup( "metricstracker" )
public interface MetricsTrackerConfig extends Config
{
    @ConfigItem(
            keyName = "refreshRate",
            name = "Passive Refresh Rate",
            description = "Number of ticks per passive refresh, 0 to disable",
            position = 1
    )
    default int refreshRate() { return 5; }

    @ConfigItem(
            keyName = "blacklistedNPCs",
            name = "NPC Blacklist",
            description = "Comma Separated list of blacklisted npcs",
            position = 2
    )
    default String blacklistedNPCs() { return ""; }
}

package com.metricstracker;

import lombok.Getter;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.DynamicGridLayout;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.components.MouseDragEventForwarder;
import net.runelite.client.util.ColorUtil;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;

public class MetricsInfoBox extends JPanel
{
	public enum infoBoxType
	{
		NONE,
		MONSTERS
	}

	private enum textLocation
	{
		NAME,
		TOP_LEFT,
		TOP_RIGHT,
		BOTTOM_LEFT,
		BOTTOM_RIGHT,
		NUM_TEXT_LOCATIONS
	}

	private static final String HTML_LABEL_TEMPLATE =
		"<html><body style='color:%s'>%s<span style='color:white'>%s</span></body></html>";

	@Getter
	private final String name;
	private final JPanel container = new JPanel();
	private final JPanel headerPanel = new JPanel();
	private final JPanel statsPanel = new JPanel();
	private final JPanel namePanel = new JPanel();
	private final JLabel emptyLabel = new JLabel();
	private final JLabel nameStat = new JLabel();
	private final JLabel topLeftStat = new JLabel();
	private final JLabel bottomLeftStat = new JLabel();
	private final JLabel topRightStat = new JLabel();
	private final JLabel bottomRightStat = new JLabel();
	private final String[] displayText;
	private final String errorDisplayText[] = { "", "Quantity:", "Per Hour:", "Alt Quantity:", "Per Hour:" };
	private final String monsterDisplayText[] = { "", "Killed:", "KPH:", "Damage:", "DPS:" };

	MetricsInfoBox( MetricsTrackerPlugin plugin, JComponent panel, String name, infoBoxType type )
	{
		this.name = name;

		switch ( type )
		{
			case MONSTERS:
				this.displayText = monsterDisplayText;
				break;
			default:
				this.displayText = errorDisplayText;
				break;
		}

		setLayout( new BorderLayout() );
		setBorder( new EmptyBorder( 5, 0, 0, 0 ) );

		container.setLayout( new BorderLayout() );
		container.setBackground( ColorScheme.DARKER_GRAY_COLOR );

		// Create reset menu
		final JMenuItem reset = new JMenuItem( "Reset" );
		reset.addActionListener( e -> plugin.resetSingleMetric( type, name ) );

		final JMenuItem resetOthers = new JMenuItem( "Reset Others" );
		resetOthers.addActionListener( e -> plugin.resetOthers( type, name ) );

		final JMenuItem blacklistEntry = new JMenuItem( "Blacklist NPC" );
		blacklistEntry.addActionListener( e -> plugin.blacklistNPC( type, name ) );
		final JPopupMenu popupMenu = new JPopupMenu();
		popupMenu.setBorder( new EmptyBorder( 5, 5, 5, 5 ) );

		popupMenu.add( reset );
		popupMenu.add( resetOthers );
		popupMenu.add( blacklistEntry );

		headerPanel.setBackground( ColorScheme.DARKER_GRAY_COLOR );
		headerPanel.setLayout( new DynamicGridLayout( 2, 1,0, -7 ) );

		statsPanel.setLayout( new DynamicGridLayout( 2, 2 ) );
		statsPanel.setBackground( ColorScheme.DARKER_GRAY_COLOR );
		statsPanel.setBorder( new EmptyBorder( 9, 2, 9, 2 ) );

		topLeftStat.setFont( FontManager.getRunescapeSmallFont() );
		bottomLeftStat.setFont( FontManager.getRunescapeSmallFont() );
		topRightStat.setFont( FontManager.getRunescapeSmallFont() );
		bottomRightStat.setFont( FontManager.getRunescapeSmallFont() );

		statsPanel.add( topLeftStat );
		statsPanel.add( topRightStat );
		statsPanel.add( bottomLeftStat );
		statsPanel.add( bottomRightStat );

		namePanel.setLayout( new BorderLayout() );
		namePanel.setBackground( ColorScheme.DARKER_GRAY_COLOR );
		namePanel.setBorder( new EmptyBorder( 1, 2, 1, 2 ) );

		nameStat.setFont( FontManager.getRunescapeSmallFont() );

		namePanel.add( nameStat );

		headerPanel.add( namePanel );
		headerPanel.add( statsPanel, BorderLayout.CENTER );
		container.add( headerPanel, BorderLayout.NORTH );

		container.setComponentPopupMenu( popupMenu );

		// forward mouse drag events to parent panel for drag and drop reordering
		MouseDragEventForwarder mouseDragEventForwarder = new MouseDragEventForwarder( panel );
		container.addMouseListener( mouseDragEventForwarder );
		container.addMouseMotionListener( mouseDragEventForwarder );

		add( container, BorderLayout.NORTH );
	}

	public void reset( JComponent panel )
	{
		panel.remove( this );
		panel.revalidate();
	}

	void update( JComponent panel, String name, long quantity, float qph )
	{
		SwingUtilities.invokeLater( () -> rebuildAsync( panel, name, quantity, qph ) );
	}

	void update( JComponent panel, String name, long quantity, float qph, long altQuantity, float altRate )
	{
		SwingUtilities.invokeLater( () -> rebuildAsync( panel, name, quantity, qph, altQuantity, altRate ) );
	}

	private void rebuildAsync( JComponent panel, String name, long quantity, float qph, long altQuantity, float altRate )
	{
		if ( getParent() != panel )
		{
			panel.add( this );
			panel.revalidate();
		}

		nameStat.setText( htmlLabel( displayText[ textLocation.NAME.ordinal() ], name ) );
		topLeftStat.setText( htmlLabel( displayText[ textLocation.TOP_LEFT.ordinal() ], quantity ) );
		topRightStat.setText( htmlLabel( displayText[ textLocation.TOP_RIGHT.ordinal() ], qph ) );
		bottomLeftStat.setText( htmlLabel( displayText[ textLocation.BOTTOM_LEFT.ordinal() ], altQuantity ) );
		bottomRightStat.setText( htmlLabel( displayText[ textLocation.BOTTOM_RIGHT.ordinal() ], altRate ) );
	}

	private void rebuildAsync( JComponent panel, String name, long quantity, float qph )
	{
		if ( getParent() != panel )
		{
			panel.add( this );
			panel.revalidate();
		}

		nameStat.setText( htmlLabel( displayText[ textLocation.NAME.ordinal() ], name ) );
		topLeftStat.setText( htmlLabel( displayText[ textLocation.TOP_LEFT.ordinal() ], quantity ) );
		topRightStat.setText( htmlLabel( displayText[ textLocation.TOP_RIGHT.ordinal() ], qph ) );
	}

	static String htmlLabel( String key, float value )
	{
		String valueStr = Float.toString( value );
		return htmlLabel( key, valueStr );
	}

	static String htmlLabel( String key, long value )
	{
		String valueStr = Integer.toString( ( int ) value );
		return htmlLabel( key, valueStr );
	}

	static String htmlLabel( String key, String valueStr )
	{
		return String.format( HTML_LABEL_TEMPLATE, ColorUtil.toHexColor( ColorScheme.LIGHT_GRAY_COLOR ), key, valueStr );
	}
}

package com.metricstracker;

import javax.annotation.Nullable;
import java.math.BigDecimal;
import java.time.Instant;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class MetricsManager
{
    private final static String overallKey = "OVERALL_KEY";
    private final static String overallAltKey = "OVERALL_ALT_KEY";
    private final static int NUM_DECIMAL_PLACES = 2;
    private final static float MSEC_PER_SEC = 1000;
    private final static float SEC_PER_MIN = 60;
    private final static float MIN_PER_HOUR = 60;
  
    public HashMap< String, MetricEvent > lastEvent;
    private HashMap< String, Long > startTimes;
    private HashMap< String, Long > quantities;
    private HashMap< String, String > remappedMetrics;

    public MetricsManager()
    {
        this.lastEvent = new HashMap<>();
        this.startTimes = new HashMap<>();
        this.quantities = new HashMap<>();
        this.remappedMetrics = new HashMap<>();

        this.lastEvent.put( overallKey, new MetricEvent( MetricEvent.eventType.MASTER ) );
        this.quantities.put( overallKey, ( long ) 0 );
        this.lastEvent.put( overallAltKey, new MetricEvent( MetricEvent.eventType.MASTER ) );
        this.quantities.put( overallAltKey, ( long ) 0 );
    }

    public void addDataPoint(MetricEvent metricEvent, boolean isSecondaryMetric, @Nullable String originalMetricName )
    {
        String key = metricEvent.getName();

        if ( isSecondaryMetric
        &&   originalMetricName != null )
        {
            remappedMetrics.put( metricEvent.getName(), originalMetricName );

            if ( !this.startTimes.containsKey( originalMetricName ) )
            {
                this.startTimes.put( originalMetricName, Instant.now().toEpochMilli() );
            }

            if ( !this.startTimes.containsKey( overallAltKey ) )
            {
                this.startTimes.put( overallAltKey, Instant.now().toEpochMilli() );
            }
        }

        if ( !this.startTimes.containsKey( key ) )
        {
            this.startTimes.put( key, Instant.now().toEpochMilli() );
        }

        if ( !this.startTimes.containsKey( overallKey ) )
        {
            this.startTimes.put( overallKey, Instant.now().toEpochMilli() );
        }

        this.lastEvent.put( key, metricEvent);
        this.lastEvent.put( overallKey, metricEvent);

        long quantity = 0;
        if ( this.quantities.containsKey( key ) )
        {
            quantity = this.quantities.get( key );
        }

        quantity += metricEvent.getQuantity();
        this.quantities.put( key, quantity );

        if ( !isSecondaryMetric )
        {
            quantity = this.quantities.get( overallKey ) + metricEvent.getQuantity();
            this.quantities.put( overallKey, quantity );
        }
        else
        {
            quantity = this.quantities.get( overallAltKey ) + metricEvent.getQuantity();
            this.quantities.put( overallAltKey, quantity );
        }
    }

    public float getQuantityPerSecond( String key )
    {
        float qps = 0;
        float runTime = 0;

        if ( this.startTimes.containsKey( key ) )
        {
            runTime = Instant.now().toEpochMilli() - this.startTimes.get( key );
            runTime /= MSEC_PER_SEC;
        }

        if ( this.quantities.containsKey( key ) )
        {
            qps = this.quantities.get( key );

            if ( runTime == 0 )
            {
                return ( this.quantities.get( key ) );
            }

            qps /= runTime;
        }

        return round( qps );
    }

    public float getQuantityPerHour( String key )
    {
        float qph = 0;
        float runTime = 0;

        if ( this.startTimes.containsKey( key ) )
        {
            runTime = Instant.now().toEpochMilli() - this.startTimes.get( key );
            runTime /= MSEC_PER_SEC;
            runTime /= SEC_PER_MIN;
            runTime /= MIN_PER_HOUR;
        }

        if ( this.quantities.containsKey( key ) )
        {
            qph = this.quantities.get( key );

            if ( runTime == 0 )
            {
                return ( this.quantities.get( key ) );
            }

            qph /= runTime;
        }

        return round( qph );
    }

    public float getOverallPerSecond( boolean isSecondaryOverall )
    {
        String key = ( isSecondaryOverall ) ? overallAltKey : overallKey;
        return getQuantityPerSecond( key );
    }

    public float getOverallPerHour( boolean isSecondaryOverall )
    {
        String key = ( isSecondaryOverall ) ? overallAltKey : overallKey;
        return getQuantityPerHour( key );
    }

    public long getCumulativeQuantity( String key )
    {
        if ( !this.quantities.containsKey( key ) )
        {
            return 0;
        }
        return this.quantities.get( key );
    }

    public long getOverallCumulativeQuantity( boolean isSecondaryOverall )
    {
        String key = ( isSecondaryOverall ) ? overallAltKey : overallKey;
        return getCumulativeQuantity( key );
    }

    public void reset( String key )
    {
        if ( this.quantities.containsKey( key ) )
        {
            this.quantities.remove( key );
        }

        if ( this.startTimes.containsKey( key ) )
        {
            this.startTimes.remove( key );
        }

        if ( this.lastEvent.containsKey( key ) )
        {
            this.lastEvent.remove( key );
        }

        for ( String s : remappedMetrics.keySet() )
        {
            if ( remappedMetrics.get( s ).equals( key ) )
            {
                this.quantities.remove( s );
                this.startTimes.remove( s );
                this.lastEvent.remove( s );
            }
        }
    }

    public void resetOthers( String key )
    {
        int sz = this.quantities.keySet().size() - 1;
        if ( sz >= 0 )
        {
            String keys[] = this.quantities.keySet().toArray( new String[ 0 ] );
            for ( int i = sz; i >=0; --i )
            {
                if ( remappedMetrics.containsKey( keys[ i ] ) )
                {
                    if ( remappedMetrics.get( keys[ i ] ).equals( key ) )
                    {
                        continue;
                    }
                }

                if ( !( key.equals( keys[ i ] ) )
                &&   !( keys[ i ].equals( overallKey ) )
                &&   !( keys[ i ].equals( overallAltKey ) ) )
                {
                    reset( keys[ i ] );
                }
            }
        }
    }

    public void resetAll()
    {
        this.quantities.clear();
        this.startTimes.clear();
        this.lastEvent.clear();

        this.lastEvent = new HashMap<>();
        this.startTimes = new HashMap<>();
        this.quantities = new HashMap<>();

        this.lastEvent.put( overallKey, new MetricEvent( MetricEvent.eventType.MASTER ) );
        this.quantities.put( overallKey, ( long ) 0 );
        this.lastEvent.put( overallAltKey, new MetricEvent( MetricEvent.eventType.MASTER ) );
        this.quantities.put( overallAltKey, ( long ) 0 );
    }

    public String getMetricKey( String key )
    {
        if ( remappedMetrics.containsKey( key ) )
        {
            return remappedMetrics.get( key );
        }

        return key;
    }

    public List< String > getKeys()
    {
        List< String > list = new ArrayList<>();
        list.addAll( quantities.keySet() );
        list.remove( overallKey );
        list.remove( overallAltKey );
        return list;
    }

    private static float round( float d )
    {
        return BigDecimal.valueOf( d ).setScale( NUM_DECIMAL_PLACES, BigDecimal.ROUND_HALF_UP ).floatValue();
    }
}

package com.metricstracker;

import net.runelite.api.Actor;
import net.runelite.api.Hitsplat;
import net.runelite.api.NPC;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.events.HitsplatApplied;
import net.runelite.api.gameval.AnimationID;
import net.runelite.api.gameval.NpcID;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.game.NpcUtil;

import java.util.HashMap;

public class DamageHandler
{
    private int tickCounter = 0;
    private final int ticksToSelfDestruct = 100;
    private HashMap< Actor, MetricEvent > eventsToValidate = new HashMap<>();

    public void hitsplatApplied( HitsplatApplied hitsplatApplied, NpcUtil npcUtil, EventBus eventBus )
    {
        Actor actor = hitsplatApplied.getActor();
        Hitsplat hitsplat = hitsplatApplied.getHitsplat();

        if ( hitsplat.isMine()
        && ( actor instanceof NPC) )
        {
            emitDamageDoneEvent( actor, hitsplat, eventBus );
        }

        if ( isMonsterKilledEvent( hitsplat, actor, npcUtil ) )
        {
            emitMonsterKilledEvent( actor );
        }
    }

    public void emitAnimationChange( Actor actor, EventBus eventBus )
    {
        if ( !( actor instanceof NPC ) )
        {
            return;
        }

        if ( eventsToValidate.containsKey( actor ) )
        {
            NPC npc = ( NPC ) actor;
            if ( npc.getId() == NpcID.YAMA_VOIDFLARE )
            {
                int animation = npc.getAnimation();

                switch ( animation )
                {
                    case AnimationID.NPC_VOIDFLARE_EXPLODE:
                        eventsToValidate.remove( actor );
                        break;
                    case AnimationID.NPC_VOIDFLARE_DEATH:
                        eventBus.post( actor );
                        eventsToValidate.remove( actor );
                        break;
                    default:
                        break;
                }
            }
        }
    }

    private boolean isMonsterKilledEvent( Hitsplat hitsplat, Actor actor, NpcUtil npcUtil )
    {
        if ( !( actor instanceof NPC ) )
        {
            return false;
        }
      
        NPC npc = ( NPC ) actor;

        if ( hitsplat.isMine()
        &&   hitsplat.getAmount() > 0 )
        {
            // Start tracking the mob after the player deals damage below 50% hp
            if ( actor.getHealthRatio() <= 0 || ( actor.getHealthRatio() <= actor.getHealthScale() / 2 )  )
            {
                return true;
            }

            if ( npcUtil.isDying( ( NPC ) actor) )
            {
                return true;
            }

            // Special cases that need to be added manually due to healthratio not updating
            switch ( npc.getId() )
            {
                case NpcID.YAMA_VOIDFLARE:
                    return true;
                default:
                    return false;
            }
        }

        return false;
    }

    private void emitMonsterKilledEvent( Actor actor )
    {
        MetricEvent metricEvent = new MetricEvent( MetricEvent.eventType.MONSTERS_KILLED, getSquishedKey( actor.getName() ), 1 );

        tickCounter = 0;
        eventsToValidate.put( actor, metricEvent);
    }

    private void emitDamageDoneEvent( Actor actor, Hitsplat hitsplat, EventBus eventBus )
    {
        MetricEvent metricEvent = new MetricEvent( MetricEvent.eventType.DAMAGE_DEALT, getSquishedKey( actor.getName() ), hitsplat.getAmount() );
        eventBus.post( metricEvent );
    }

    public void tick( NpcUtil npcUtil, EventBus eventBus, LocalPoint playerLocation )
    {
        boolean bPosted = false;
        int sz = eventsToValidate.keySet().size() - 1;
        if ( sz >= 0 )
        {
            Actor actors[] = eventsToValidate.keySet().toArray( new Actor[ 0 ] );
            for ( int i = sz; i >= 0; --i )
            {
                Actor actor = actors[ i ];

                if ( isActorDead( actor, npcUtil, playerLocation ) )
                {
                    // Moons bosses have multiple forms, and will count as individual kills unless crunched into 1 kill
                    String name = eventsToValidate.get( actor ).name;
                    if ( name.equals( "Eclipse Moon" )
                    ||   name.equals( "Blue Moon" )
                    ||   name.equals( "Blood Moon" ) )
                    {
                        if ( !bPosted )
                        {
                            eventBus.post( eventsToValidate.get( actor ) );
                            bPosted = true;
                        }
                    }
                    else
                    {
                        eventBus.post( eventsToValidate.get( actor ) );
                    }

                    eventsToValidate.remove( actor );
                }
            }

            // Delete lists after a minute of inactivity to avoid any memory leaks
            tickCounter++;
            if ( tickCounter == ticksToSelfDestruct )
            {
                eventsToValidate.clear();
                tickCounter = 0;
            }
        }
    }

    private boolean isActorDead( Actor actor, NpcUtil npcUtil, LocalPoint playerLocation )
    {
        if ( actor == null
        ||   npcUtil.isDying( ( NPC ) actor )
        ||   damageHandlerCheckSpecialCases( ( NPC ) actor, playerLocation ) )
        {
            return true;
        }

        return false;
    }

    private boolean damageHandlerCheckSpecialCases( NPC npc, LocalPoint playerLocation )
    {
        int id = npc.getId();

        switch ( id )
        {
            case NpcID.YAMA:
            case NpcID.YAMA_JUDGE_OF_YAMA:
                return npc.getHealthRatio() == 0;
            case NpcID.NIGHTMARE_TOTEM_1_CHARGED:
            case NpcID.NIGHTMARE_TOTEM_2_CHARGED:
            case NpcID.NIGHTMARE_TOTEM_3_CHARGED:
            case NpcID.NIGHTMARE_TOTEM_4_CHARGED:
                return true;
            // Special case to check for moon of peril dying
            case -1:
                return ( ( playerLocation.getX() == 6208 && playerLocation.getY() == 6976 )
                      || ( playerLocation.getX() == 7104 && playerLocation.getY() == 6976 )
                      || ( playerLocation.getX() == 6208 && playerLocation.getY() == 6720 ) );
            default:
                return false;
        }
    }

    String getSquishedKey( String key )
    {
        switch ( key )
        {
            case "<col=00ffff>Cracked ice</col>":
            case "<col=00ffff>Frozen weapons</col>":
                return "Frozen weapons";
            case "Blue Moon":
            case "Enraged Blue Moon":
                return "Blue Moon";
            case "Eclipse Moon":
            case "Enraged Eclipse Moon":
                return "Eclipse Moon";
            case "Blood Moon":
            case "Enraged Blood Moon":
                return "Blood Moon";
        }

        return key;
    }
}

package com.metricstracker;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;

import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.HitsplatApplied;

import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.NpcUtil;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.Text;

import javax.inject.Inject;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;

@Slf4j
@PluginDescriptor(
        name = "Metrics Tracker",
        description = "Trackers miscellaneous player metrics"
)
public class MetricsTrackerPlugin extends Plugin
{
    @Inject
    private Client client;
    @Inject
    private ClientThread clientThread;
    @Inject
    private ConfigManager configManager;
    @Inject
    private EventBus eventBus;
    @Inject
    private NpcUtil npcUtil;
    @Inject
    private MetricsTrackerConfig config;
    @Inject
    private ClientToolbar clientToolbar;

    private static final String ICON_FILE = "/metrics_tracker_icon.png";
    private static final String PLUGIN_NAME = "Metrics Tracker";
    private final DamageHandler damageHandler = new DamageHandler();
    private MetricsTrackerPanel loggerPanel;
    private NavigationButton navigationButton;
    private int tickCounter = 0;
    private List< String > blacklist = new ArrayList<>();
    private static boolean bUpdateConfig = false;

    @Override
    protected void startUp() throws Exception
    {
         loggerPanel = new MetricsTrackerPanel( this, client );
         final BufferedImage icon = ImageUtil.loadImageResource( getClass(), ICON_FILE );
         navigationButton = NavigationButton.builder()
											.tooltip( PLUGIN_NAME )
											.icon( icon )
											.priority( 6 )
											.panel( loggerPanel )
											.build();
        clientToolbar.addNavigation( navigationButton );

        blacklist = Text.fromCSV( config.blacklistedNPCs().toLowerCase() );
    }

    @Override
    protected void shutDown() throws Exception
    {
        resetState();
        clientToolbar.removeNavigation( navigationButton );
    }

    @Provides
    MetricsTrackerConfig provideConfig( ConfigManager configManager )
    {
        return configManager.getConfig( MetricsTrackerConfig.class );
    }

    @Subscribe
    public void onConfigChanged( ConfigChanged configChanged )
    {
        if ( configChanged.getKey().equals( "blacklistedNPCs" ) )
        {
            blacklist = Text.fromCSV( config.blacklistedNPCs() );
        }
    }

    @Subscribe
    public void onMetricEvent( MetricEvent metricEvent )
    {
        if ( !( blacklist.contains( metricEvent.getName().toLowerCase() ) ) )
        {
            loggerPanel.addEvent( metricEvent );
        }
    }

    @Subscribe
    public void onGameTick( GameTick gameTick )
    {
        if ( bUpdateConfig )
        {
            blacklist = Text.fromCSV( config.blacklistedNPCs().toLowerCase() );
            bUpdateConfig = false;
        }
        
        if ( config.refreshRate() > 0 )
        {
            tickCounter = ( tickCounter + 1 ) % config.refreshRate();
            if ( tickCounter == 0 )
            {
                loggerPanel.refreshActive();
            }
        }

        damageHandler.tick( npcUtil, eventBus, client.getLocalPlayer().getLocalLocation() );
    }

    @Subscribe
    public void onAnimationChanged( AnimationChanged animationChanged )
    {
        if ( animationChanged.getActor() instanceof NPC )
        {
            damageHandler.emitAnimationChange( animationChanged.getActor(), eventBus );
        }
    }

    @Subscribe
    public void onHitsplatApplied( HitsplatApplied event )
    {
        damageHandler.hitsplatApplied( event, npcUtil, eventBus );
    }

    public void resetState()
    {
        loggerPanel.resetAllInfoBoxes();
    }

    public void resetSingleMetric( MetricsInfoBox.infoBoxType type, String name )
    {
        loggerPanel.removeInfoBox( type, name );
    }

    void resetOthers( MetricsInfoBox.infoBoxType type, String name )
    {
        loggerPanel.removeOthers( type, name );
    }

    void blacklistNPC( MetricsInfoBox.infoBoxType type, String npcName )
    {
        List< String > vals = new ArrayList<>();
        vals.addAll( Text.fromCSV( configManager.getConfiguration( "metricstracker", "blacklistedNPCs" ) ) );

        if ( !vals.contains( npcName ) )
        {
            vals.add( npcName );
            configManager.setConfiguration( "metricstracker", "blacklistedNPCs", Text.toCSV( vals ) );
            bUpdateConfig = true;
        }

        resetSingleMetric( type, npcName );
    }
}


package com.metricstracker;

import net.runelite.api.Client;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.DragAndDropReorderPane;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;

import java.util.HashMap;
import java.util.Map;

public class MetricsTrackerPanel extends PluginPanel
{
    @Inject
    private Client client;
    private final MetricsTrackerPlugin plugin;
    private final JPanel overallPanel = new JPanel();
    private final JLabel totalQuantity = new JLabel( "Killed:" );
    private final JLabel totalRate = new JLabel( "KPH:" );
    private final JLabel altQuantity = new JLabel( "Damage:" );
    private final JLabel altRate = new JLabel( "DPS:" );
    private final Map< MetricsInfoBox.infoBoxType, Map< String, MetricsInfoBox > > infoBoxes = new HashMap<>();
    private final Map< MetricsInfoBox.infoBoxType, MetricsManager > metrics = new HashMap<>();
    private MetricsInfoBox.infoBoxType currentDisplayType = MetricsInfoBox.infoBoxType.MONSTERS;
    
    JComponent infoBoxPanel;

    public MetricsTrackerPanel( MetricsTrackerPlugin metricsTrackerPlugin, Client client )
    {
        super();
        this.plugin = metricsTrackerPlugin;
        this.client = client;

        setBorder( new EmptyBorder( 6, 6, 6, 6 ) );
        setBackground( ColorScheme.DARK_GRAY_COLOR );
        setLayout( new BorderLayout() );

        final JPanel layoutPanel = new JPanel();
        BoxLayout boxLayout = new BoxLayout( layoutPanel, BoxLayout.Y_AXIS );
        layoutPanel.setLayout( boxLayout );
        add( layoutPanel, BorderLayout.NORTH );

        overallPanel.setBorder( new EmptyBorder( 10, 10, 10, 10 ) );
        overallPanel.setBackground( ColorScheme.DARKER_GRAY_COLOR );
        overallPanel.setLayout( new BorderLayout() );
        overallPanel.setVisible( true ); // this will only become visible when the player gets exp

        // Create reset all menu
        final JMenuItem reset = new JMenuItem( "Reset All" );
        reset.addActionListener( e -> plugin.resetState() );

        // Create popup menu
        final JPopupMenu popupMenu = new JPopupMenu();
        popupMenu.setBorder( new EmptyBorder( 5, 5, 5, 5 ) );
        popupMenu.add( reset );

        overallPanel.setComponentPopupMenu( popupMenu );

        final JLabel overallIcon = new JLabel( new ImageIcon( ImageUtil.loadImageResource(metricsTrackerPlugin.getClass(), "/metrics_tracker_icon.png" ) ) );
        final JPanel overallInfo = new JPanel();

        overallInfo.setBackground( ColorScheme.DARKER_GRAY_COLOR );
        overallInfo.setLayout( new GridLayout( 2, 2 ) );
        overallInfo.setBorder( new EmptyBorder( 0, 10, 0, 0) );

        totalQuantity.setFont( FontManager.getRunescapeSmallFont() );
        totalRate.setFont( FontManager.getRunescapeSmallFont() );
        altQuantity.setFont( FontManager.getRunescapeSmallFont() );
        altRate.setFont( FontManager.getRunescapeSmallFont() );

        overallInfo.add( totalQuantity );
        overallInfo.add( totalRate );
        overallInfo.add( altQuantity );
        overallInfo.add( altRate );

        overallPanel.add( overallIcon, BorderLayout.WEST );
        overallPanel.add( overallInfo, BorderLayout.CENTER );

        infoBoxPanel = new DragAndDropReorderPane();

        layoutPanel.add( overallPanel );
        layoutPanel.add( infoBoxPanel );
    }

    public void addEvent( MetricEvent metricEvent )
    {
        MetricsInfoBox.infoBoxType type = getInfoBoxType( metricEvent.getType() );
        String eventOriginalName = metricEvent.getName();
        boolean isSecondaryMetric = false;

        if ( metricEvent.getType() == MetricEvent.eventType.DAMAGE_DEALT )
        {
            isSecondaryMetric = true;
            metricEvent.name = ( "DPS_" + eventOriginalName );
        }

        if ( metrics.containsKey( type ) )
        {
            metrics.get( type ).addDataPoint(metricEvent, isSecondaryMetric, eventOriginalName );
        }
        else
        {
            metrics.put( type, new MetricsManager() );
            metrics.get( type ).addDataPoint(metricEvent, isSecondaryMetric, eventOriginalName );
        }

        if ( type == currentDisplayType )
        {
            updateInfoBox( type, metricEvent, eventOriginalName );
        }

        updateOverallTrackerText();
    }

    private void updateInfoBox( MetricsInfoBox.infoBoxType type, MetricEvent metricEvent, String eventOriginalName )
    {
        Map< String, MetricsInfoBox > map;
        MetricsManager metric;

        if ( infoBoxes.containsKey( type ) )
        {
            map = infoBoxes.get( type );
        }
        else
        {
            map = new HashMap<>();
        }

        if ( !map.containsKey( eventOriginalName ) )
        {
            map.put( eventOriginalName, new MetricsInfoBox( plugin, infoBoxPanel, eventOriginalName, type ) );
            infoBoxes.put( type, map );
        }

        metric = metrics.get( type );
        MetricsInfoBox infoBox = infoBoxes.get( type ).get( eventOriginalName );

        if ( type == MetricsInfoBox.infoBoxType.MONSTERS
        &&   metricEvent.getType() == MetricEvent.eventType.DAMAGE_DEALT )
        {
            infoBox.update( infoBoxPanel,
                            eventOriginalName,
                            metric.getCumulativeQuantity( eventOriginalName ),
                            metric.getQuantityPerHour( eventOriginalName ),
                            metric.getCumulativeQuantity( metricEvent.getName() ),
                            metric.getQuantityPerSecond( metricEvent.getName() ) );
        }
        else
        {
            infoBox.update( infoBoxPanel,
                            eventOriginalName,
                            metric.getCumulativeQuantity( eventOriginalName ),
                            metric.getQuantityPerHour( eventOriginalName ) );
        }
    }

    private MetricsInfoBox.infoBoxType getInfoBoxType( MetricEvent.eventType eventType )
    {
        MetricsInfoBox.infoBoxType type = MetricsInfoBox.infoBoxType.NONE;
        switch ( eventType )
        {
            case MONSTERS_KILLED:
            case DAMAGE_DEALT:
                type = MetricsInfoBox.infoBoxType.MONSTERS;
                break;
            default:
                break;
        }

        return type;
    }

    public void resetAllInfoBoxes()
    {
        for ( MetricsManager metricsManager : metrics.values() )
        {
            metricsManager.resetAll();
        }

        for ( Map< String, MetricsInfoBox > map : infoBoxes.values() )
        {
            for ( MetricsInfoBox box : map.values() )
            {
                box.reset( infoBoxPanel );
            }
        }

        infoBoxes.clear();
        updateOverallTrackerText();
    }

    public void removeInfoBox( MetricsInfoBox.infoBoxType type, String name )
    {
        if ( infoBoxes.containsKey( type ) )
        {
            if ( infoBoxes.get( type ).containsKey( name ) )
            {
                infoBoxes.get( type ).get( name ).reset( infoBoxPanel );
                infoBoxes.get( type ).remove( name );
            }
        }

        if ( metrics.containsKey( type ) )
        {
            metrics.get( type ).reset( name );
            metrics.remove( type, name );
        }
    }

    public void removeOthers( MetricsInfoBox.infoBoxType type, String name )
    {
        Map< String, MetricsInfoBox > infoBoxesLocal;
        if ( !infoBoxes.containsKey( type ) )
        {
            return;
        }

        infoBoxesLocal = infoBoxes.get( type );
        int sz = infoBoxesLocal.keySet().size() - 1;
        if ( sz >= 0 )
        {
            String keys[] = infoBoxesLocal.keySet().toArray( new String[ 0 ] );
            for ( int i = sz; i >= 0; --i )
            {
                if ( !( keys[ i ].equals( name ) ) )
                {
                    removeInfoBox( type, keys[ i ] );
                }
            }
        }

        if ( metrics.containsKey( type ) )
        {
            metrics.get( type ).resetOthers( name );
        }
    }

    private void updateOverallTrackerText()
    {
        String quantity;
        String rate;
        String altQ;
        String altR;

        switch ( currentDisplayType )
        {
            case MONSTERS:
            default:
                quantity = "Killed:";
                rate = "KPH:";
                altQ = "Damage:";
                altR = "DPS:";
                break;
        }

        if ( metrics.containsKey( currentDisplayType ) )
        {
            switch ( currentDisplayType )
            {
                case MONSTERS:
                default:
                    quantity += metrics.get( currentDisplayType ).getOverallCumulativeQuantity( false );
                    rate += metrics.get( currentDisplayType ).getOverallPerHour( false );
                    altQ += metrics.get( currentDisplayType ).getOverallCumulativeQuantity( true );
                    altR += metrics.get( currentDisplayType ).getOverallPerSecond( true );
                    break;
            }
        }

        totalQuantity.setText( quantity );
        totalRate.setText( rate );
        altQuantity.setText( altQ );
        altRate.setText( altR );
    }

    public void refreshActive()
    {
        MetricEvent metricEvent;
        String infoBoxKey;
        for ( MetricsInfoBox.infoBoxType type : metrics.keySet() )
        {
            if ( type == currentDisplayType )
            {
                for ( String key : metrics.get( type ).getKeys() )
                {
                    infoBoxKey = metrics.get( type ).getMetricKey( key );
                    metricEvent = metrics.get( type ).lastEvent.get( key );
                    metricEvent.quantity = 0;

                    updateInfoBox( type, metricEvent, infoBoxKey );
                }
            }
        }

        updateOverallTrackerText();
    }

    public void loadInfoBoxes( MetricsInfoBox.infoBoxType type )
    {
        currentDisplayType = type;

        for ( MetricsInfoBox.infoBoxType t : infoBoxes.keySet() )
        {
            for ( String name : infoBoxes.get( t ).keySet() )
            {
                infoBoxes.get( t ).get( name ).reset( infoBoxPanel );
            }
        }

        refreshActive();
    }
}

package com.metricstracker;

import lombok.Getter;

public class MetricEvent
{
    enum eventType
    {
        MASTER,
        NONE,
        MONSTERS_KILLED,
        DAMAGE_DEALT
    }

    // Type of the data point being created
    @Getter
    public eventType type;
    @Getter
    public String name;
    @Getter
    public int quantity;

    public MetricEvent(eventType type, String name, int quantity )
    {
        this.type = type;
        this.name = name;
        this.quantity = quantity;
    }

    public MetricEvent(eventType type )
    {
        this.type = type;
        this.name = null;
        this.quantity = 0;
    }
}

package com.example;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ExamplePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ExamplePlugin.class);
		RuneLite.main(args);
	}
}
