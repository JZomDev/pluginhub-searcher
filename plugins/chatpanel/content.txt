package com.chatpanel;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ChatPanelPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ChatPanelPlugin.class);
		RuneLite.main(args);
	}
}
package com.chatpanel;

import net.runelite.api.Client;
import net.runelite.client.RuneLite;
import net.runelite.client.ui.PluginPanel;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.*;

import net.runelite.client.util.ImageUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.awt.IllegalComponentStateException;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.FileInputStream;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;



public class ChatPanelSidebar extends PluginPanel {
    private final JTextPane publicChatArea;
    private final JTextPane privateChatArea;
    private final JTextPane clanChatArea;
    private final JTextPane friendsChatArea;
    private final JTextPane allChatArea;
    private final JTextPane customChatArea;
    private final JTextPane customChatArea2;
    private final JTextPane customChatArea3;
    private final JTextPane gameChatArea;
    private final JTextPane combatArea;
    private final JTabbedPane tabbedPane;
    private final ChatPanelConfig config;
    private static final Logger logger = LoggerFactory.getLogger(ChatPanelSidebar.class);
    private boolean isPopout = false;
    private JFrame popoutFrame;
    private JFrame popoutTab;
    private JButton popoutButton;
    private JButton popinButton;
    private JButton popinButton2;
    private boolean overrideUndecorated;
    private static final int AUTO_POP_DELAY_MS = 180; //This prevents the pop out window from messing up RL's icon.
    private Timer autoPopTimer;
    private final List<JFrame> popoutTabs = new ArrayList<>();
    private final Client client;

    public ChatPanelSidebar(ChatPanelConfig config, Client client) {
        this.config = config;
        this.client = client;
        setLayout(new BorderLayout());
        if (!config.hidepopoutButtons()) {
            popoutButton = new JButton("Pop out");
            popoutButton.setVisible(true);
            popoutButton.addActionListener(e -> togglePopout());
            add(popoutButton, BorderLayout.SOUTH);
        }

        if (!CHAT_PANEL_DIR.exists()) {
               createDirectory();
        }

        publicChatArea = createTextPane();
        privateChatArea = createTextPane();
        clanChatArea = createTextPane();
        friendsChatArea = createTextPane();
        gameChatArea = createTextPane();
        allChatArea = createTextPane();
        customChatArea = createTextPane();
        customChatArea2 = createTextPane();
        customChatArea3 = createTextPane();
        combatArea = createTextPane();

        tabbedPane = new JTabbedPane();
        createTabs();

        add(tabbedPane, BorderLayout.CENTER);
        updateChatStyles();
        updateFonts();
        tabbedPane.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                SwingUtilities.isMiddleMouseButton(e);
                if (SwingUtilities.isRightMouseButton(e)) {
                    int tabIndex = tabbedPane.indexAtLocation(e.getX(), e.getY());
                    if (tabIndex != -1) {
                        tabbedPane.setSelectedIndex(tabIndex);
                        showPopupMenu(e.getComponent(), e.getX(), e.getY(), tabIndex);
                    }
                }
                if (SwingUtilities.isMiddleMouseButton(e)) {
                    int tabIndex = tabbedPane.indexAtLocation(e.getX(), e.getY());
                    if (tabIndex != -1) {
                        popOutTab(tabIndex);
                    }
                }
            }
        });
        if (config.AutoPop() && !isPopout()) {
            autoPopTimer = new Timer(AUTO_POP_DELAY_MS, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    togglePopout();
                    autoPopTimer.stop();
                }
            });
            autoPopTimer.start();
        }
    }

    private void showPopupMenu(Component component, int x, int y, int tabIndex) {
        JPopupMenu popupMenu = new JPopupMenu();

        JMenuItem popoutItem = new JMenuItem("Pop Out");
        popoutItem.addActionListener(e -> popOutTab(tabIndex));
        popupMenu.add(popoutItem);

        JMenuItem resetHistoryItem = new JMenuItem("Reset History");
        resetHistoryItem.addActionListener(e -> resetTabHistory(tabIndex));
        popupMenu.add(resetHistoryItem);

        JMenuItem exportItem = new JMenuItem("Export Log");
        exportItem.addActionListener(e -> exportChatLog(tabIndex));
        popupMenu.add(exportItem);

        JMenuItem searchItem = new JMenuItem("Search");
        popupMenu.add(searchItem);
        searchItem.addActionListener(e -> {
            ChatPanelSearch.SearchWindow searchWindow = new ChatPanelSearch.SearchWindow(popoutFrame, tabbedPane, tabIndex, getParent());
            searchWindow.setVisible(true);
        });

        popupMenu.show(component, x, y);
    }

    private void createTabs() {
        tabbedPane.removeAll();

        if (config.showPublicChat()) {
            tabbedPane.addTab("Public", createScrollPane(publicChatArea));
            tabbedPane.setToolTipTextAt(tabbedPane.indexOfTab("Public"), "Right click for options. MMB to pop out tab");
        }

        if (config.showPrivateChat()) {
            tabbedPane.addTab("Private", createScrollPane(privateChatArea));
            tabbedPane.setToolTipTextAt(tabbedPane.indexOfTab("Private"), "Right click for options. MMB to pop out tab");
        }

        if (config.showClanChat()) {
            tabbedPane.addTab("Clan", createScrollPane(clanChatArea));
            tabbedPane.setToolTipTextAt(tabbedPane.indexOfTab("Clan"), "Right click for options. MMB to pop out tab");
        }

        if (config.showGameChat()) {
            tabbedPane.addTab("Game", createScrollPane(gameChatArea));
            tabbedPane.setToolTipTextAt(tabbedPane.indexOfTab("Game"), "Right click for options. MMB to pop out tab");
        }

        if (config.showAllChat()) {
            tabbedPane.addTab("All", createScrollPane(allChatArea));
            tabbedPane.setToolTipTextAt(tabbedPane.indexOfTab("All"), "Right click for options. MMB to pop out tab");
        }

        if (config.showFriendsChat()) {
            tabbedPane.addTab("Friends", createScrollPane(friendsChatArea));
            tabbedPane.setToolTipTextAt(tabbedPane.indexOfTab("Friends"), "Right click for options. MMB to pop out tab");
        }

        if (config.showCustomChat()) {
            String tabTitle = config.custom1Tabname();
            tabbedPane.addTab(tabTitle, createScrollPane(customChatArea));
            tabbedPane.setToolTipTextAt(tabbedPane.indexOfTab(tabTitle), "Right click for options. MMB to pop out tab");
        }

        if (config.showCustom2Chat()) {
            String tabTitle = config.custom2Tabname();
            tabbedPane.addTab(tabTitle, createScrollPane(customChatArea2));
            tabbedPane.setToolTipTextAt(tabbedPane.indexOfTab(tabTitle), "Right click for options. MMB to pop out tab");
        }

        if (config.showCustom3Chat()) {
            String tabTitle = config.custom3Tabname();
            tabbedPane.addTab(tabTitle, createScrollPane(customChatArea3));
            tabbedPane.setToolTipTextAt(tabbedPane.indexOfTab(tabTitle), "Right click for options. MMB to pop out tab");
        }

        if (config.showCombatTab()) {
            String tabTitle = "Combat";
            tabbedPane.addTab(tabTitle, createScrollPane(combatArea));
            tabbedPane.setToolTipTextAt(tabbedPane.indexOfTab(tabTitle), "Right click for options. MMB to pop out tab");
        }
    }

    public void reloadPlugin() {
        for (JFrame popoutTab : popoutTabs) {
            popoutTab.dispose();
        }
        popoutTabs.clear();
        createTabs();
    }


    private void exportChatLog(int tabIndex) {
        Component tabComponent = tabbedPane.getComponentAt(tabIndex);
        if (tabComponent instanceof JScrollPane) {
            JTextPane chatArea = (JTextPane) ((JScrollPane) tabComponent).getViewport().getView();
            String chatLog = chatArea.getText();
            JFileChooser fileChooser = new JFileChooser();

            if (config.getLastDIR() != null) {
                fileChooser.setCurrentDirectory(new File(config.getLastDIR()));
            }

            String tabName = tabbedPane.getTitleAt(tabIndex);
            tabName = tabName.replaceAll("[^a-zA-Z0-9]", "_");
            SimpleDateFormat dateFormat;
            switch (config.exportLogDate()) {
                case MM_dd_yy:
                    dateFormat = new SimpleDateFormat("MM_dd_yy");
                    break;
                case dd_MM:
                    dateFormat = new SimpleDateFormat("dd_MM");
                    break;
                case MM_dd:
                    dateFormat = new SimpleDateFormat("MM_dd");
                    break;
                case dd_MM_yy:
                default:
                    dateFormat = new SimpleDateFormat("dd_MM_yy");
                    break;
            }
            String currentTime = dateFormat.format(new Date());
            String defaultFileName = tabName + "_" + currentTime + ".txt";
            fileChooser.setSelectedFile(new File(defaultFileName));
            fileChooser.setFileFilter(new FileNameExtensionFilter("Text files (*.txt)", "txt"));

            while (true) {
                int result = fileChooser.showSaveDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = fileChooser.getSelectedFile();
                    if (selectedFile.exists()) {
                        int overwriteResult = JOptionPane.showConfirmDialog(this,
                                "File already exists. Do you want to overwrite it?",
                                "Confirm Overwrite",
                                JOptionPane.YES_NO_OPTION);
                        if (overwriteResult == JOptionPane.NO_OPTION) {
                            continue;
                        }
                    }
                    try (PrintWriter writer = new PrintWriter(selectedFile)) {
                        writer.println(chatLog);
                        JOptionPane.showMessageDialog(this, "Chat log exported successfully!", "", JOptionPane.INFORMATION_MESSAGE);
                        config.setLastDIR(selectedFile.getParent());
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this, "Error exporting chat log: " + ex.getMessage(), "Unknown Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;
                } else {
                    break;
                }
            }
        }
    }

    private void resetTabHistory(int tabIndex) {
        Component tabComponent = tabbedPane.getComponentAt(tabIndex);
        if (tabComponent instanceof JScrollPane) {
            JTextPane chatArea = (JTextPane) ((JScrollPane) tabComponent).getViewport().getView();
            chatArea.setText("");
        }
    }

    private void togglePopout() {
        if (isPopout) {
            // Restore to side panel
            isPopout = false;
                if (popoutTab != null) {
                popoutTab.dispose();
                }
            popoutFrame.dispose();
            addComponentsForSidePanel();
            add(tabbedPane, BorderLayout.CENTER);
            updateChatStyles();
            reloadPlugin();
        } else {
            isPopout = true;
            popoutFrame = new JFrame("Chat Panel") {
                @Override
                public boolean isUndecorated() {
                    return overrideUndecorated || super.isUndecorated();
                }
            };
            if (popoutFrame.isUndecorated()){
                popoutFrame.setIconImage(null);
            } else {
                if (!config.hidePopoutIcon()){
                    popoutFrame.setIconImage(ImageUtil.loadImageResource(getClass(), "/ChatPanelimg.png"));
                } else {
                popoutFrame.setIconImage(new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB));
                }
            }

            boolean appliedSize = false;
            if (config.rememberPopoutPosition()) {
                appliedSize = restorePopoutBounds();
                if (config.isPopoutMaximized()) {
                    popoutFrame.setExtendedState(JFrame.MAXIMIZED_BOTH);
                }
            }

            if (!appliedSize) {
                popoutFrame.setSize(config.popoutSize());
                popoutFrame.setLocationRelativeTo(getParent());
            }

            addComponentsForPopout();
            popoutFrame.add(tabbedPane);
            popoutFrame.setMinimumSize(new Dimension(40, 10));
            popoutFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            if (config.popoutAlwaysOnTop()) {
                popoutFrame.setAlwaysOnTop(true);
            }
            setCactus(config.popoutOpacity() / 100.0f);

            popoutFrame.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(WindowEvent e) {
                    if (config.hideSidebarIcon() && popoutFrame != null && !config.hidePopoutWarning()) {
                        //JCheckBox checkBox = new JCheckBox("Do not show this message again. I have read and understand how to retrieve the pop out window"); Can't get working :C
                        Object[] options = {"OK", "Cancel",};
                        int choice = JOptionPane.showOptionDialog(
                                popoutFrame,
                                "<html><body style='width: 500px;'>The sidebar icon is currently set to hidden (Pop out button hidden too). <br> To relaunch the pop out window, toggle the plugin off/on with Auto-Pop option on. <br> This warning can be turned off in config.</body></html>",
                                "Closing Pop Out with Sidebar Icon Hidden",
                                JOptionPane.OK_CANCEL_OPTION,
                                JOptionPane.INFORMATION_MESSAGE,
                                null,
                                options,
                                options[0]
                        );
                        if (choice == JOptionPane.CANCEL_OPTION) {
                            e.getWindow().setVisible(true);
                        } else if (choice == JOptionPane.OK_OPTION) {
                            // if (checkBox.isSelected()) Can't get working yet.
                           // {
                           //     config.hidePopoutWarning();
                           // }
                            isPopout = false;
                            popoutFrame.dispose();
                            addComponentsForSidePanel();
                            add(tabbedPane, BorderLayout.CENTER);
                            updateChatStyles();
                        }
                    } else {
                        isPopout = false;
                        if (popoutFrame != null) {
                            popoutFrame.dispose();
                        }
                        addComponentsForSidePanel();
                        add(tabbedPane, BorderLayout.CENTER);
                        updateChatStyles();
                    }
                }
            });
            //On moved instead of on closed because if RL closes first it doesn't always save position.
            popoutFrame.addComponentListener(new ComponentAdapter() {
                @Override
                public void componentMoved(ComponentEvent e) {
                    if (config.rememberPopoutPosition()) {
                        savePopoutBounds();
                    }
                }
                @Override
                public void componentResized(ComponentEvent e) {
                    if (config.rememberPopoutPosition()) {
                        savePopoutBounds();
                    }
                }
            });
            popoutFrame.setVisible(true);
        }
    }

    private void popOutTab(int tabIndex) {
        Component tabComponent = tabbedPane.getComponentAt(tabIndex);
        String tabTitle = tabbedPane.getTitleAt(tabIndex);
        if (tabComponent instanceof JScrollPane) {
            JTextPane chatArea = (JTextPane) ((JScrollPane) tabComponent).getViewport().getView();
            tabbedPane.remove(tabIndex);

            popoutTab = new JFrame(tabTitle) {
                @Override
                public boolean isUndecorated() {
                    return overrideUndecorated || super.isUndecorated();
                }
            };
            if (popoutTab.isUndecorated()){
                popoutTab.setIconImage(null);
            } else {
                if (!config.hidePopoutIcon()){
                    popoutTab.setIconImage(ImageUtil.loadImageResource(getClass(), "/ChatPanelimg.png"));
                } else {
                    popoutTab.setIconImage(new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB));
                }
            }
            popoutTab.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            popoutTab.setAlwaysOnTop(config.popoutAlwaysOnTop());
            popoutTab.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(WindowEvent e) {
                    restorePoppedOutTab(tabIndex, chatArea, tabTitle);
                }
            });
            popoutTabs.add(popoutTab);
            JScrollPane scrollPane = new JScrollPane(chatArea);
            scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
            popoutTab.add(scrollPane);
            setCactus(config.popoutOpacity() / 100.0f);
            if (isPopout){
                popoutTab.setLocationRelativeTo(popoutFrame);
            } else {
                popoutTab.setLocation(this.getLocationOnScreen());
            }

            popoutTab.setSize(config.popoutSize());
            popoutTab.setVisible(true);
            popoutTab.setMinimumSize(new Dimension(40, 10));
        }
    }

    private void restorePoppedOutTab(int tabIndex, JTextPane chatArea, String tabTitle) {
        JScrollPane scrollPane = new JScrollPane(chatArea);
        scrollPane.setPreferredSize(new Dimension(Integer.MAX_VALUE, config.chatAreaHeight()));
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        tabbedPane.insertTab(tabTitle, null, scrollPane, null, tabbedPane.getTabCount());
        tabbedPane.setSelectedIndex(tabbedPane.getTabCount() - 1);
    }

    private boolean restorePopoutBounds() {
        Rectangle bounds = config.getPopoutBounds();
        if (bounds != null) {
            popoutFrame.setBounds(bounds);
            return true;
        }
        return false;
    }

    private void savePopoutBounds() {
        if (popoutFrame.getExtendedState() == JFrame.MAXIMIZED_BOTH) {
            config.setPopoutMaximized(true);
        } else {
            config.setPopoutMaximized(false);
            config.setPopoutBounds(popoutFrame.getBounds());
        }
    }

    void setCactus(float opacity) {
        overrideUndecorated = true;
        try {
            if (popoutTab != null) {
                popoutTab.setOpacity(config.popoutOpacity() / 100.0f);
            }
            if (popoutFrame != null) {
                popoutFrame.setOpacity(config.popoutOpacity() / 100.0f);
            }
        } catch (IllegalComponentStateException | UnsupportedOperationException | IllegalArgumentException ignored) {
            //I don't want to spam the log, this seems to only happen on systems where opacity also can't be applied to RL. Maybe a GPU driver thing?
        } finally {
            overrideUndecorated = false;
        }
    }

    private void addComponentsForSidePanel() {
        if (popoutButton != null) {
            popoutButton.setVisible(true);
        }
        if (popinButton != null) {
            popinButton.setVisible(false);
            if (!config.hidepopoutButtons()) {
                add(popoutButton, BorderLayout.SOUTH);
            }
            remove(popinButton);
        }
        if (popinButton2 != null) {
            popinButton2.setVisible(false);
        }
    }

    private void addComponentsForPopout() {
        if (!config.hidepopoutButtons()) {
            popinButton = new JButton("Pop In");
            popinButton.addActionListener(e -> {
                if (config.hideSidebarIcon() && popoutFrame != null && !config.hidePopoutWarning()) {
                    //JCheckBox checkBox = new JCheckBox("Do not show this message again. I have read and understand how to retrieve the pop out window"); Can't get working yet
                    Object[] options = {"OK", "Cancel"};
                    int choice = JOptionPane.showOptionDialog(
                            popoutFrame,
                            "<html><body style='width: 500px;'>The sidebar icon is currently set to hidden (Pop out button hidden too). <br> To relaunch the pop out window, toggle the plugin off/on with Auto-Pop option on. <br> This warning can be turned off in config.</body></html>",
                            "Closing Pop Out with Sidebar Icon Hidden",
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.INFORMATION_MESSAGE,
                            null,
                            options,
                            options[0]
                    );
                    if (choice == JOptionPane.CANCEL_OPTION) {
                        setVisible(true);
                    } else if (choice == JOptionPane.OK_OPTION) {
                        // if (checkBox.isSelected()) Can't get working yet.
                        //{
                       //     config.hidePopoutWarning();
                        //}
                        togglePopout();
                    }
                } else {
                    togglePopout();
                }
            });
            popoutFrame.add(popinButton, BorderLayout.SOUTH);
        }
        popinButton2 = new JButton("Pop in");
        popinButton2.addActionListener(e -> togglePopout());
        add(popinButton2, BorderLayout.SOUTH);
        if (popoutButton != null){
            remove(popoutButton);
        }
        if (popinButton2 != null) {
            popinButton2.setVisible(true);
            add(popinButton2, BorderLayout.SOUTH);
        }
    }

    public boolean isPopout() {
        return isPopout;
    }

    public void closePopout() {
        for (JFrame popoutTab : popoutTabs) {
            popoutTab.dispose();
        }
        popoutTabs.clear();
        if (popoutFrame != null) {
            popoutFrame.dispose();
        }
        isPopout = false;
    }

    //Wrap editor is to mimic wrapping that was in JTextArea, before switching to JTextPane. smh, must be a better way.
    public static class WrapEditorKit extends StyledEditorKit {
        @Override
        public ViewFactory getViewFactory() {
            return new WrapColumnFactory();
        }

        static class WrapColumnFactory implements ViewFactory {
            @Override
            public View create(Element elem) {
                String kind = elem.getName();
                if (kind != null) {
                    switch (kind) {
                        case AbstractDocument.ContentElementName:
                            return new WrapLabelView(elem);
                        case AbstractDocument.ParagraphElementName:
                            return new ParagraphView(elem);
                        case AbstractDocument.SectionElementName:
                            return new BoxView(elem, View.Y_AXIS);
                        case StyleConstants.ComponentElementName:
                            return new ComponentView(elem);
                        case StyleConstants.IconElementName:
                            return new IconView(elem);
                    }
                }
                return new LabelView(elem);
            }
        }

        static class WrapLabelView extends LabelView {
            public WrapLabelView(Element elem) {
                super(elem);
            }

            @Override
            public float getMinimumSpan(int axis) {
                switch (axis) {
                    case View.X_AXIS:
                        return 0;
                    case View.Y_AXIS:
                        return super.getMinimumSpan(axis);
                    default:
                        throw new IllegalArgumentException("Invalid axis: " + axis);
                }
            }
        }
    }

    private JTextPane createTextPane() {
        JTextPane textPane = new JTextPane();
        textPane.setEditable(false);
        textPane.setBorder(new EmptyBorder(5, 2, 5, 2));
        SimpleAttributeSet attributes = new SimpleAttributeSet();
        textPane.getStyledDocument().setParagraphAttributes(0, textPane.getDocument().getLength(), attributes, false);
        textPane.setEditorKit(new WrapEditorKit());
        return textPane;
    }

    private JScrollPane createScrollPane(JTextPane chatArea) {
        JScrollPane scrollPane = new JScrollPane(chatArea);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        setScrollPaneSize(scrollPane);
        return scrollPane;
    }

    private void setScrollPaneSize(JScrollPane scrollPane) {
       scrollPane.setMaximumSize(new Dimension(Integer.MAX_VALUE, config.chatAreaHeight()));
       scrollPane.setPreferredSize(new Dimension(Integer.MAX_VALUE, config.chatAreaHeight()));
    }

    public void updateChatStyles() {
        setColors();
        setScrollPaneSizes();
    }

    public void updateFonts(){
        setFontSize();
    }

    private void setFontSize() {
        publicChatArea.setFont(getFontFromConfig(config.publicChatFontSize()));
        privateChatArea.setFont(getFontFromConfig(config.privateChatFontSize()));
        clanChatArea.setFont(getFontFromConfig(config.clanChatFontSize()));
        friendsChatArea.setFont(getFontFromConfig(config.friendsChatFontSize()));
        gameChatArea.setFont(getFontFromConfig(config.gameChatFontSize()));
        allChatArea.setFont(getFontFromConfig(config.allChatFontSize()));
        customChatArea.setFont(getFontFromConfig(config.customChatFontSize()));
        customChatArea2.setFont(getFontFromConfig(config.custom2ChatFontSize()));
        customChatArea3.setFont(getFontFromConfig(config.custom3ChatFontSize()));
        combatArea.setFont(getFontFromConfig(config.combatFontSize()));
    }

    public static final File CHAT_PANEL_DIR = new File(RuneLite.RUNELITE_DIR.getPath() + File.separator + "chat-panel");
    private static final File CUSTOM_FONT_FILE = new File(CHAT_PANEL_DIR, "customfont.ttf");
    boolean fontLoadErrorShown = true;
    private Font getFontFromConfig(int fontSize) {
        Font baseFont;
        switch (config.fontStyle()) {
            case BOLD:
                baseFont = new Font("Bold", Font.BOLD, fontSize);
                break;
            case ITALIC:
                baseFont = new Font("Italic", Font.ITALIC, fontSize);
                break;
            case ITALIC_BOLD:
                baseFont = new Font("Italic Bold", Font.ITALIC + Font.BOLD, fontSize);
                break;
            default:
                baseFont = new Font("Plain", Font.PLAIN, fontSize);
                break;
        }
        Font selectedFont;

        switch (config.fontFamily()) {
            case CUSTOM_FONT:
                selectedFont = customFontLoader(fontSize, baseFont.getStyle());
                break;
            case SUPERFUNKY:
                selectedFont = fontLoader("/SuperFunky.ttf", fontSize, baseFont.getStyle());
                break;
            case FONT2:
                selectedFont = fontLoader("/MisterPixel.otf", fontSize, baseFont.getStyle());
                break;
            case FONT3:
                selectedFont = fontLoader("/Qaz.ttf", fontSize, baseFont.getStyle());
                break;
            case FONT4:
                selectedFont = fontLoader("/Fonarto.ttf", fontSize, baseFont.getStyle());
                break;
            case FONT5:
                selectedFont = fontLoader("/HomeVideo.ttf", fontSize, baseFont.getStyle());
                break;
            case FONT6:
                selectedFont = fontLoader("/DecemberShow.ttf", fontSize, baseFont.getStyle());
                break;
            case FONT7:
                selectedFont = fontLoader("/Avara.ttf", fontSize, baseFont.getStyle());
                break;
            case FONT8:
                selectedFont = fontLoader("/Funtype.ttf", fontSize, baseFont.getStyle());
                break;
            case NORMAL:
            default:
                selectedFont = baseFont;
                break;
        }
        return selectedFont;
    }

    private Font fontLoader(String fontFileName, int fontSize, int fontStyle) {
        try (InputStream fontStream = getClass().getResourceAsStream(fontFileName)) {
            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            Font customFont = Font.createFont(Font.TRUETYPE_FONT, fontStream);
            ge.registerFont(customFont);
            return customFont.deriveFont(fontStyle, (float) fontSize);
        } catch (FontFormatException | IOException ignored) {
            return new Font("Default", fontStyle, fontSize);
        }
    }

    private Font customFontLoader(int fontSize, int fontStyle) {
        if (!CUSTOM_FONT_FILE.exists()) {
            if (!fontLoadErrorShown) {
                String message = "The Custom Font file is empty. \nTo use a Custom Font place a .ttf or .otf file named customfont.ttf into:\n /.runelite/chat-panel/\nFor more info, right click 'Chat Panel', then click 'Support'.";
                String[] options = {"Open Location", "OK"};
                fontLoadErrorShown = true;
                int choice = JOptionPane.showOptionDialog(null, message, "Empty Font File", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
                if (choice == 0) {
                    openDIR();
                }
            }
            return new Font("Default", fontStyle, fontSize);
        } else {
            try (InputStream fontStream = new FileInputStream(CUSTOM_FONT_FILE)) {
                GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
                Font customFont = Font.createFont(Font.TRUETYPE_FONT, fontStream);
                ge.registerFont(customFont);
                return customFont.deriveFont(fontStyle, (float) fontSize);
            } catch (FontFormatException | IOException e) {
                if (!fontLoadErrorShown) {
                    String message = "Error loading custom font, some fonts don't work.  :( \nHere is the error message that was created:\n" + e.getMessage();
                    String[] options = {"Open Location", "OK"};
                    int choice = JOptionPane.showOptionDialog(null, message, "Font Loading Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);
                    fontLoadErrorShown = true;
                    if (choice == 0) {
                        openDIR();
                    }
                }
                return new Font("Default", fontStyle, fontSize);
            }
        }
    }

    private void createDirectory() {
        if (!CHAT_PANEL_DIR.exists()) {
            try {
                boolean dirCreated = CHAT_PANEL_DIR.mkdirs();
                if (!dirCreated) {
                    logger.warn("Failed to create directories. Maybe permission issue?");
                }
            } catch (Exception e) {
                logger.error("Error creating directory: {}", e.getMessage());
            }
        }
    }

    private void openDIR() {
        if (CHAT_PANEL_DIR.exists()) {
            try {
                Desktop desktop = Desktop.getDesktop();
                desktop.open(CUSTOM_FONT_FILE.getParentFile());
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error opening file browser \nHere is the error message that was created:\n" + e.getMessage(), "Unknown Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "The Chat Panel directory can't be found in /.runelite/\nThis might be caused by a permission issue.\nYou can try creating the /.runelite/chat-panel/ directory manually.", "Directory Not Found", JOptionPane.ERROR_MESSAGE);
            fontLoadErrorShown = true;
        }
    }

    private void setColors() {
		if (config.chatColorOffset()!= 0) {

			int offset = config.chatColorOffset();}
		else {
			int offset = 0;
		}
		int offset = 0;

        publicChatArea.setBackground(config.publicChatBackground());
        publicChatArea.setForeground(adjustColor(config.publicChatColor(), offset));
        privateChatArea.setBackground(config.privateChatBackground());
        privateChatArea.setForeground(adjustColor(config.privateChatColor(), offset));
        clanChatArea.setBackground(config.clanChatBackgroundColor());
        clanChatArea.setForeground(adjustColor(config.clanChatColor(), offset));
        friendsChatArea.setBackground(config.friendsChatBackground());
        friendsChatArea.setForeground(adjustColor(config.friendsChatColor(), offset));
        gameChatArea.setBackground(config.gameChatBackgroundColor());
        gameChatArea.setForeground(adjustColor(config.gameChatColor(), offset));
        allChatArea.setBackground(config.allChatBackground());
        allChatArea.setForeground(adjustColor(config.allChatColor(), offset));
        customChatArea.setBackground(config.customChatBackgroundColor());
        customChatArea.setForeground(adjustColor(config.customChatColor(), offset));
        customChatArea2.setBackground(config.custom2ChatBackgroundColor());
        customChatArea2.setForeground(adjustColor(config.custom2ChatColor(), offset));
        customChatArea3.setBackground(config.custom3ChatBackgroundColor());
        customChatArea3.setForeground(adjustColor(config.custom3ChatColor(), offset));
        combatArea.setBackground(config.combatBackgroundColor());
        combatArea.setForeground(adjustColor(config.combatTextColor(), offset));
    }

    private static final String[] Identifiers = {"Public - ", "Clan - ", "Friends Chat - ", "ClanGuest - ", "ClanGIM - ", "ModChat - ", "ModPrivate - "};
    private Color NameColor(JTextPane chatArea, String cleanedName) {
        if (config.enableMyNameColor()) {
            String baseName = cleanedName;
            for (String identifier : Identifiers) {
                if (cleanedName.startsWith(identifier)) {
                    baseName = cleanedName.substring(identifier.length()).trim();
                    break;
                }
            }
            if (client.getLocalPlayer()!=null) {
                if (Objects.equals(client.getLocalPlayer().getName(), baseName)) {
                    return config.myNameColor();
                }
            }
        }

        if (chatArea == publicChatArea) {
            return config.publicChatNameColor();
        } else if (chatArea == privateChatArea) {
            return config.privateChatNameColor();
        } else if (chatArea == clanChatArea) {
            return config.clanChatNameColor();
        } else if (chatArea == friendsChatArea) {
            return config.friendsChatNameColor();
        } else if (chatArea == gameChatArea) {
            return config.gameChatNameColor();
        } else if (chatArea == allChatArea) {
            return config.allChatNameColor();
        } else if (chatArea == customChatArea) {
            return config.customChatNameColor();
        } else if (chatArea == customChatArea2) {
            return config.custom2ChatNameColor();
        } else if (chatArea == customChatArea3) {
            return config.custom3ChatNameColor();
        } else if (chatArea == combatArea) {
            return config.combatLabelColor();
        }
        return (Color.YELLOW);
    }

    private Color TimestampColor(JTextPane chatArea) {
        if (chatArea == publicChatArea) {
            return config.publicChatTimestampColor();
        } else if (chatArea == privateChatArea) {
            return config.privateChatTimestampColor();
        } else if (chatArea == clanChatArea) {
            return config.clanChatTimestampColor();
        } else if (chatArea == friendsChatArea) {
            return config.friendsChatTimestampColor();
        } else if (chatArea == gameChatArea) {
            return config.gameChatTimestampColor();
        } else if (chatArea == allChatArea) {
            return config.allChatTimestampColor();
        } else if (chatArea == customChatArea) {
            return config.customChatTimestampColor();
        } else if (chatArea == customChatArea2) {
            return config.custom2ChatTimestampColor();
        } else if (chatArea == customChatArea3) {
            return config.custom3ChatTimestampColor();
        } else if (chatArea == combatArea) {
            return config.combatTimestampColor();
        }
        return Color.YELLOW;
    }


    private Color adjustColor(Color color, int offset) {
        int red = Math.max(0, Math.min(255, color.getRed() + (offset * 255 / 100)));
        int green = Math.max(0, Math.min(255, color.getGreen() + (offset * 255 / 100)));
        int blue = Math.max(0, Math.min(255, color.getBlue() + (offset * 255 / 100)));
        return new Color(red, green, blue);
    }

    private void highlightWords(String message, String[] highlightWords, Color highlightColor, boolean partialMatching, StyledDocument doc) {
        List<String> highlightWordsList = new ArrayList<>();
        for (String word : highlightWords) {
            if (!word.trim().isEmpty()) {
                String escapedWord = Pattern.quote(word);
                highlightWordsList.add(escapedWord);
            }
        }
        Pattern pattern = Pattern.compile((partialMatching? "" : "\\b") + "(" + String.join("|", highlightWordsList) + ")" + (partialMatching? "" : "\\b"), Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(message);
        int start = 0;
        while (matcher.find()) {
            String matchedWord = matcher.group();
            int startIndex = doc.getLength() - message.length() + matcher.start();
            int endIndex = startIndex + matchedWord.length();
            SimpleAttributeSet highlightAttrs = new SimpleAttributeSet();
            StyleConstants.setForeground(highlightAttrs, highlightColor);
            doc.setCharacterAttributes(startIndex, matchedWord.length(), highlightAttrs, false);
        }
    }

    private void setScrollPaneSizes() {
        if (tabbedPane.getTabCount() > 0) {
            setScrollPaneSize((JScrollPane) tabbedPane.getComponentAt(0));
        }
        if (tabbedPane.getTabCount() > 1) {
            setScrollPaneSize((JScrollPane) tabbedPane.getComponentAt(1));
        }
        if (tabbedPane.getTabCount() > 2) {
            setScrollPaneSize((JScrollPane) tabbedPane.getComponentAt(2));
        }
        if (tabbedPane.getTabCount() > 3) {
            setScrollPaneSize((JScrollPane) tabbedPane.getComponentAt(3));
        }
        if (tabbedPane.getTabCount() > 4) {
            setScrollPaneSize((JScrollPane) tabbedPane.getComponentAt(4));
        }
        if (tabbedPane.getTabCount() > 5) {
            setScrollPaneSize((JScrollPane) tabbedPane.getComponentAt(5));
        }
        if (tabbedPane.getTabCount() > 6) {
            setScrollPaneSize((JScrollPane) tabbedPane.getComponentAt(6));
        }
        if (tabbedPane.getTabCount() > 7) {
            setScrollPaneSize((JScrollPane) tabbedPane.getComponentAt(7));
        }
        if (tabbedPane.getTabCount() > 8) {
            setScrollPaneSize((JScrollPane) tabbedPane.getComponentAt(8));
        }
        if (tabbedPane.getTabCount() > 9) {
            setScrollPaneSize((JScrollPane) tabbedPane.getComponentAt(9));
        }
    }
    public void addPublicChatMessage(String timestamp, String cleanedName, String message) {
        addMessageToChatArea(publicChatArea, timestamp, cleanedName, message);
    }

    public void addPrivateChatMessage(String timestamp, String name, String message) {
        addMessageToChatArea(privateChatArea, timestamp, name, message);
    }

    public void addClanChatMessage(String timestamp, String name, String message) {
        addMessageToChatArea(clanChatArea, timestamp, name, message);
    }

    public void addFriendsChatMessage(String timestamp, String name, String message) {
        addMessageToChatArea(friendsChatArea, timestamp, name, message);
    }

    public void addAllChatMessage(String timestamp, String cleanedName, String cleanedMessage) {
        cleanedMessage = filterAllChatMessage(cleanedMessage);
        addMessageToChatArea(allChatArea, timestamp, cleanedName, cleanedMessage);
    }

    public void addCustomChatMessage(String timestamp, String cleanedName, String cleanedMessage) {
        cleanedMessage = filterAllChatMessage(cleanedMessage);
        addMessageToChatArea(customChatArea, timestamp, cleanedName, cleanedMessage);
    }

    public void addCustom2ChatMessage(String timestamp, String cleanedName, String cleanedMessage) {
        cleanedMessage = filterAllChatMessage(cleanedMessage);
        addMessageToChatArea(customChatArea2, timestamp, cleanedName, cleanedMessage);
    }

    public void addCustom3ChatMessage(String timestamp, String cleanedName, String cleanedMessage) {
        cleanedMessage = filterAllChatMessage(cleanedMessage);
        addMessageToChatArea(customChatArea3, timestamp, cleanedName, cleanedMessage);
    }

    public void addGameChatMessage(String timestamp, String cleanedName, String cleanedMessage) {
        cleanedMessage = filterAllChatMessage(cleanedMessage);
        addMessageToChatArea(gameChatArea, timestamp, cleanedName, cleanedMessage);
    }
    public void addCombatMessage(String timestamp, String cleanedName, String combatMessage) {
        addMessageToChatArea(combatArea, timestamp, cleanedName, combatMessage);
    }

    private String filterAllChatMessage(String message) {
        return message.replaceAll("<col=[0-9a-fA-F]+>|</col>", "").replace("<br>", " ").replace("<colHIGHLIGHT>", "").replace("<colNORMAL>", "");
    }

    private void addMessageToChatArea(JTextPane chatArea, String timestamp, String cleanedName, String message) {
        SwingUtilities.invokeLater(() -> {
            StyledDocument doc = chatArea.getStyledDocument();
            JScrollPane scrollPane = (JScrollPane) chatArea.getParent().getParent();
            JScrollBar verticalScrollBar = scrollPane.getVerticalScrollBar();

            boolean shouldAutoScroll = (verticalScrollBar.getValue() + verticalScrollBar.getVisibleAmount() == verticalScrollBar.getMaximum());

            int extraLines = config.lineSpacing();
            int offset = extraLines;

            Color baseColor = chatArea.getForeground();
            int lineCount = doc.getDefaultRootElement().getElementCount();
            int effectiveLineCount = (lineCount + extraLines - 1) / (extraLines + 1);
            boolean isOddLine = (effectiveLineCount - 1) % 2!= 0;

            SimpleAttributeSet timestampAttrs = new SimpleAttributeSet();
            Color timestampColor;
            timestampColor = isOddLine ? adjustColor(TimestampColor(chatArea), config.chatColorOffset()) : TimestampColor(chatArea);
            StyleConstants.setForeground(timestampAttrs, timestampColor);

            SimpleAttributeSet nameAttrs = new SimpleAttributeSet();
            Color nameColor = isOddLine? adjustColor(NameColor(chatArea, cleanedName), config.chatColorOffset()) : NameColor(chatArea, cleanedName);
            StyleConstants.setForeground(nameAttrs, nameColor);

            SimpleAttributeSet messageAttrs = new SimpleAttributeSet();
            Color messageColor = isOddLine? adjustColor(baseColor, config.chatColorOffset()) : baseColor;
            StyleConstants.setForeground(messageAttrs, messageColor);

            try {
				if (!config.TimestampFormat().isEmpty()) {
					doc.insertString(doc.getLength(), "[" + timestamp + "] ", timestampAttrs);
				}
				if (!cleanedName.isEmpty()) {
                    doc.insertString(doc.getLength(), "[" + cleanedName + "]: ", nameAttrs);
                }

                doc.insertString(doc.getLength(), message, messageAttrs);

                if (!config.highlightWords3().trim().isEmpty()) {
                    String[] highlightWords3Array = config.highlightWords3().split("\\s*,\\s*");
                    highlightWords(message, highlightWords3Array, config.highlightColor3(), config.PartialMatching(), doc);
                }
                if (!config.highlightWords2().trim().isEmpty()) {
                    String[] highlightWords2Array = config.highlightWords2().split("\\s*,\\s*");
                    highlightWords(message, highlightWords2Array, config.highlightColor2(), config.PartialMatching(), doc);
                }
                if (!config.highlightWords().trim().isEmpty()) {
                    String[] highlightWordsArray = config.highlightWords().split("\\s*,\\s*");
                    highlightWords(message, highlightWordsArray, config.highlightColor(), config.PartialMatching(), doc);
                }

                doc.insertString(doc.getLength(), "\n", null);

                for (int i = 0; i < extraLines; i++) {
                    doc.insertString(doc.getLength(), "\n", null);
                }

                int excess = doc.getDefaultRootElement().getElementCount() - config.maxLines();
                if (excess > 1) {
                    try {
                        Element root = doc.getDefaultRootElement();
                        int linesToRemove = (excess + extraLines);
                        int endOffset = 0;
                        for (int i = 0; i < linesToRemove; i++) {
                            Element line = root.getElement(i);
                            endOffset = line.getEndOffset();
                        }
                        doc.remove(0, endOffset);
                    } catch (BadLocationException e) {
                        logger.error("Error removing excess lines from chat", e);
                    }
                }
            } catch (BadLocationException e) {
                logger.error("Error managing chat lines", e);
            }

            if (shouldAutoScroll) {
                chatArea.setCaretPosition(doc.getLength());
            }
        });
    }
}
package com.chatpanel;

import net.runelite.client.util.ImageUtil;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JTabbedPane;
import javax.swing.JPanel;
import javax.swing.JButton;
import javax.swing.JTextPane;
import javax.swing.JTextField;
import javax.swing.JScrollPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Component;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowFocusListener;

public class ChatPanelSearch {
    public static class SearchWindow extends JDialog {
        private final JTabbedPane tabbedPane;
        private int currentIndex = -1;
        private final String originalTitle;

        public SearchWindow(JFrame popoutFrame, JTabbedPane tabbedPane, int tabIndex, Container panelLocation) {

            this.tabbedPane = tabbedPane;
            String tabName = tabbedPane.getTitleAt(tabIndex);
            originalTitle = "Search " + tabName;
            setTitle(originalTitle);
            setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            setSize(250, 100);
            setAlwaysOnTop(true);
            if (popoutFrame.isVisible()) {
                Point popoutFrameLocation = popoutFrame.getLocation();
                int X = popoutFrameLocation.x + 10;
                int Y = popoutFrameLocation.y;
                setLocation(X, Y);
            } else {
                Point parentLocation = panelLocation.getLocationOnScreen();
                int x = parentLocation.x;
                int y = parentLocation.y - 20;
                setLocation(x, y);
            }
            if (!isUndecorated()){
                setIconImage(ImageUtil.loadImageResource(getClass(), "/ChatPanelimg.png"));
            }

            JPanel searchPanel = new JPanel();
            searchPanel.setLayout(new BorderLayout());
            getContentPane().add(searchPanel, BorderLayout.CENTER);

            JPanel searchBox = new JPanel();
            searchBox.setLayout(new FlowLayout());
            JTextField findField = new JTextField(15);
            searchBox.add(findField);
            searchPanel.add(searchBox, BorderLayout.NORTH);

            JPanel buttonPanel = new JPanel();
            buttonPanel.setLayout(new FlowLayout());
            JButton findLastButton = new JButton("Find Last");
            buttonPanel.add(findLastButton);
            JButton findNextButton = new JButton("Find Next");
            buttonPanel.add(findNextButton);
            searchPanel.add(buttonPanel, BorderLayout.SOUTH);

            findField.addActionListener(e -> {
                try {
                    find(findField.getText(), tabIndex, true);
                } catch (BadLocationException ignored) {}
            });
            findNextButton.addActionListener(e -> {
                try {
                    find(findField.getText(), tabIndex, true);
                } catch (BadLocationException ignored) {}
            });
            findLastButton.addActionListener(e -> {
                try {
                    find(findField.getText(), tabIndex, false);
                } catch (BadLocationException ignored) {}
            });
            addWindowFocusListener(new WindowFocusListener() {
                @Override
                public void windowGainedFocus(WindowEvent ignored) {}
                @Override
                public void windowLostFocus(WindowEvent e) {
                    Component tabComponent = tabbedPane.getComponentAt(tabIndex);
                        if (tabComponent instanceof JScrollPane) {
                            JTextPane chatArea = (JTextPane) ((JScrollPane) tabComponent).getViewport().getView();
                            DefaultHighlighter highlighter = (DefaultHighlighter) chatArea.getHighlighter();
                            highlighter.removeAllHighlights();
                        }
                        dispose();
                    }
                });
            addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(WindowEvent e) {
                    Component tabComponent = tabbedPane.getComponentAt(tabIndex);
                    if (tabComponent instanceof JScrollPane) {
                        JTextPane chatArea = (JTextPane) ((JScrollPane) tabComponent).getViewport().getView();
                        DefaultHighlighter highlighter = (DefaultHighlighter) chatArea.getHighlighter();
                        highlighter.removeAllHighlights();
                    }
                }
            });
        }

        private void find(String searchText, int tabIndex, boolean direction) throws BadLocationException {
            Component tabComponent = tabbedPane.getComponentAt(tabIndex);
            if (tabComponent instanceof JScrollPane) {
                JTextPane chatArea = (JTextPane) ((JScrollPane) tabComponent).getViewport().getView();
                DefaultHighlighter highlighter = (DefaultHighlighter) chatArea.getHighlighter();
                highlighter.removeAllHighlights();
                String text = chatArea.getDocument().getText(0, chatArea.getDocument().getLength());
                int newIndex = getNewIndex(searchText, direction, text);
                if (newIndex != -1) {
                    highlight(chatArea, newIndex, searchText.length());
                    chatArea.setCaretPosition(newIndex);
                    Rectangle rect = (Rectangle) chatArea.modelToView2D(newIndex);
                    chatArea.scrollRectToVisible(rect);
                    setTitle(originalTitle);
                } else {
                    setTitle("No Match");
                }
                currentIndex = newIndex;
            }
        }

        private int getNewIndex(String searchText, boolean direction, String text) {
            int startIndex = direction ? currentIndex + 1 : currentIndex - searchText.length();
            if (startIndex < 0) {
                startIndex = direction ? 0 : text.length() - searchText.length();
            }
            int newIndex = direction ? text.toLowerCase().indexOf(searchText.toLowerCase(), startIndex) : text.toLowerCase().lastIndexOf(searchText.toLowerCase(), startIndex);
            if (newIndex == -1) { // Loop back to the start/end of the document
                newIndex = direction ? text.toLowerCase().indexOf(searchText.toLowerCase()) : text.toLowerCase().lastIndexOf(searchText.toLowerCase());
            }
            return newIndex;
        }

        private void highlight(JTextPane chatArea, int startIndex, int length) throws BadLocationException {
            Color textColor = chatArea.getForeground();
            Color oppositeColor = getOppositeColor(textColor);
            DefaultHighlighter highlighter = (DefaultHighlighter) chatArea.getHighlighter();
            highlighter.addHighlight(startIndex, startIndex + length, new DefaultHighlighter.DefaultHighlightPainter(oppositeColor));
        }

        private Color getOppositeColor(Color color) {
            int red = 255 - color.getRed();
            int green = 255 - color.getGreen();
            int blue = 255 - color.getBlue();
            return new Color(red, green, blue);
        }
    }
}

package com.chatpanel;

import com.google.inject.Provides;
import net.runelite.api.*;
import net.runelite.api.events.ActorDeath;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.HitsplatApplied;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.events.ConfigChanged;
import javax.inject.Inject;
import javax.swing.*;
import java.awt.image.BufferedImage;
import java.text.SimpleDateFormat;
import java.util.Date;

@PluginDescriptor(
        name = "Chat Panel",
        description = "Displays chat messages in a pop out window or the side panel",
        tags = {"chat", "panel", "window", "messages", "font", "private", "accessibility", "copy", "pop out", "custom"}
)
public class ChatPanelPlugin extends Plugin
{
    @Inject
    private ClientToolbar clientToolbar;

    @Inject
    private ChatPanelConfig config;

    @Inject
    private Client client;

    private ChatPanelSidebar chatPanelSidebar;
    private NavigationButton navButton;

    @Provides
    ChatPanelConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(ChatPanelConfig.class);
    }

    @Override
    protected void startUp() throws Exception
    {
        chatPanelSidebar = new ChatPanelSidebar(config, client);
        if (!config.hideSidebarIcon()) {
            final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "/ChatPanelimg.png");

            navButton = NavigationButton.builder()
                    .tooltip("Chat Panel")
                    .icon(icon)
                    .priority(config.iconPosition())
                    .panel(chatPanelSidebar)
                    .build();

            clientToolbar.addNavigation(navButton);
            displayUpdateMessage();
        }
    }

    @Override
    protected void shutDown() throws Exception
    {
        if (navButton != null){
        clientToolbar.removeNavigation(navButton);}
        chatPanelSidebar.closePopout();
    }

    private static final double CURRENT_VERSION = 2.0;
    private void displayUpdateMessage()
    {
        double lastVersionShown = config.getVersion();
        String name = "Update";
        String updateMessage = "Welcome to Chat Panel v2.0!\nNew features include: Fonts, extra highlights, update messages, and more!  :)";
        String timestamp = getCurrentTimestamp();

        //The == 0 part will be changed to enable a first time welcome message after initial config settings placed with v2.0.
        if (lastVersionShown == 0){
            config.setVersion(CURRENT_VERSION);
            if (config.showPublicChat()) {
                chatPanelSidebar.addPublicChatMessage("", "", "Welcome to Chat Panel!   :)\nThere are many config options waiting for you in Configuration > Chat Panel.");
            }
        } else {
            if (lastVersionShown < CURRENT_VERSION)
            {
                config.setVersion(CURRENT_VERSION);
                if (config.showAllChat()) {
                    chatPanelSidebar.addAllChatMessage(timestamp, name, updateMessage);
                }
                if (config.showGameChat()) {
                    chatPanelSidebar.addGameChatMessage(timestamp, name, updateMessage);
                }
                if (config.showPublicChat()) {
                    chatPanelSidebar.addPublicChatMessage(timestamp, name, updateMessage);
                }
                if (config.showCustomChat()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, name, updateMessage);
                }
                if (config.showCustom2Chat()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, name, updateMessage);
                }
                if (config.showCustom3Chat()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, name, updateMessage);
                }
            }
            //I think I only need this for testing and mistakes.
            if (lastVersionShown > CURRENT_VERSION)
            {
                config.setVersion(CURRENT_VERSION);
            }
        }
    }

    @Subscribe
    public void onChatMessage(ChatMessage event) {
        String cleanedName = event.getType() == ChatMessageType.PRIVATECHATOUT ? "To " + cleanString(event.getName()) : event.getType() == ChatMessageType.PRIVATECHAT || event.getType() == ChatMessageType.MODPRIVATECHAT? "From " + cleanString(event.getName()) : cleanString(event.getName());
        String cleanedMessage = event.getType() == ChatMessageType.DIALOG ? cleanDialogMessage(event.getMessage()) : cleanString(event.getMessage());
        String timestamp = getCurrentTimestamp();


        switch (event.getType()) {
            case PUBLICCHAT:
            case MODCHAT:
                if (config.showPublicChat()) {
                    chatPanelSidebar.addPublicChatMessage(timestamp, cleanedName, cleanedMessage);}
                break;
            case PRIVATECHAT:
            case MODPRIVATECHAT:
                if (config.showPrivateChat()) {
                    chatPanelSidebar.addPrivateChatMessage(timestamp, cleanedName, cleanedMessage);}
                break;
            case CLAN_CHAT:
            case CLAN_MESSAGE:
            case CLAN_GUEST_MESSAGE:
            case CLAN_GIM_CHAT:
            case CLAN_GIM_MESSAGE:
            case CLAN_GUEST_CHAT:
            case CHALREQ_CLANCHAT:
                if (config.showClanChat()) {
                    chatPanelSidebar.addClanChatMessage(timestamp, cleanedName, cleanedMessage);}
                break;
            case PRIVATECHATOUT:
                if (config.showPrivateChat()) {
                    chatPanelSidebar.addPrivateChatMessage(timestamp, cleanedName, cleanedMessage);}
                break;
            case FRIENDSCHAT:
            case CHALREQ_FRIENDSCHAT:
            case FRIENDSCHATNOTIFICATION:
                if (config.showFriendsChat()) {
                    chatPanelSidebar.addFriendsChatMessage(timestamp, cleanedName, cleanedMessage);}
                break;
            case BROADCAST:
            case GAMEMESSAGE:
            case MESBOX:
            case ENGINE:
            case NPC_EXAMINE:
            case SPAM:
            case DIALOG:
            case NPC_SAY:
            case ITEM_EXAMINE:
            case OBJECT_EXAMINE:
            case WELCOME:
            case TRADE:
            case TRADE_SENT:
            case TRADEREQ:
            case CONSOLE:
            case MODAUTOTYPER:
            case CHALREQ_TRADE:
            case IGNORENOTIFICATION:
            case FRIENDNOTIFICATION:
                if (config.showGameChat()) {
                    chatPanelSidebar.addGameChatMessage(timestamp, cleanedName, cleanedMessage);}
                break;
            case UNKNOWN:
        }
        if (config.showAllChat()) {
            chatPanelSidebar.addAllChatMessage(timestamp, cleanedName, cleanedMessage);
        }
        if (config.showCustomChat() || config.showCustom2Chat() || config.showCustom3Chat()) {
            onCustomChatMessage(event, cleanedName, cleanedMessage, timestamp);
        }
    }

    private void onCustomChatMessage(ChatMessage event, String cleanedName, String cleanedMessage, String timestamp) {
        String identifier = getIdentifier(cleanedName, event);
        switch (event.getType()) {
            case PUBLICCHAT:
                if (config.showCustomChat() && config.CustomPublicChatEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2PublicChatEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3PublicChatEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case MODCHAT:
                if (config.showCustomChat() && config.CustomModChatEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2ModChatEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3ModChatEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case PRIVATECHAT:
                if (config.showCustomChat() && config.CustomPrivateChatEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2PrivateChatEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3PrivateChatEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case MODPRIVATECHAT:
                if (config.showCustomChat() && config.CustomModPrivateChatEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2ModPrivateChatEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3ModPrivateChatEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case CLAN_CHAT:
                if (config.showCustomChat() && config.CustomClanChatEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2ClanChatEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3ClanChatEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case CLAN_MESSAGE:
                if (config.showCustomChat() && config.CustomClanMessageEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2ClanMessageEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3ClanMessageEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case CLAN_GUEST_MESSAGE:
                if (config.showCustomChat() && config.CustomClanGuestMessageEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2ClanGuestMessageEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3ClanGuestMessageEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case CLAN_GIM_CHAT:
                if (config.showCustomChat() && config.CustomClanGimChatEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2ClanGimChatEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3ClanGimChatEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case CLAN_GIM_MESSAGE:
                if (config.showCustomChat() && config.CustomClanGimMessageEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2ClanGimMessageEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3ClanGimMessageEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case CLAN_GUEST_CHAT:
                if (config.showCustomChat() && config.CustomClanGuestChatEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2ClanGuestChatEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3ClanGuestChatEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case CHALREQ_CLANCHAT:
                if (config.showCustomChat() && config.CustomChalreqClanChatEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2ChalreqClanChatEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3ChalreqClanChatEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case PRIVATECHATOUT:
                if (config.showCustomChat() && config.CustomPrivateChatoutEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2PrivateChatoutEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3PrivateChatoutEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case FRIENDSCHAT:
                if (config.showCustomChat() && config.CustomFriendsChatEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2FriendsChatEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3FriendsChatEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case CHALREQ_FRIENDSCHAT:
                if (config.showCustomChat() && config.CustomChalreqFriendsChatEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2ChalreqFriendsChatEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3ChalreqFriendsChatEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case FRIENDSCHATNOTIFICATION:
                if (config.showCustomChat() && config.CustomFriendsChatNotificationEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2FriendsChatNotificationEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3FriendsChatNotificationEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case BROADCAST:
                if (config.showCustomChat() && config.CustomBroadcastEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2BroadcastEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3BroadcastEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case GAMEMESSAGE:
                if (config.showCustomChat() && config.CustomGameMessageEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2GameMessageEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3GameMessageEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case ENGINE:
                if (config.showCustomChat() && config.CustomEngineEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2EngineEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3EngineEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case MESBOX:
                if (config.showCustomChat() && config.CustomMesboxEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2MesboxEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3MesboxEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case NPC_EXAMINE:
                if (config.showCustomChat() && config.CustomNpcExamineEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2NpcExamineEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3NpcExamineEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case NPC_SAY:
                if (config.showCustomChat() && config.CustomNpcSayEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2NpcSayEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3NpcSayEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case SPAM:
                if (config.showCustomChat() && config.CustomSpamEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2SpamEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3SpamEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case DIALOG:
                if (config.showCustomChat() && config.CustomDialogEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2DialogEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3DialogEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case ITEM_EXAMINE:
                if (config.showCustomChat() && config.CustomItemExamineEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2ItemExamineEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3ItemExamineEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case OBJECT_EXAMINE:
                if (config.showCustomChat() && config.CustomObjectExamineEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2ObjectExamineEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3ObjectExamineEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case WELCOME:
                if (config.showCustomChat() && config.CustomWelcomeEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2WelcomeEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3WelcomeEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case TRADE:
                if (config.showCustomChat() && config.CustomTradeEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2TradeEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3TradeEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case TRADE_SENT:
                if (config.showCustomChat() && config.CustomTradeSentEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2TradeSentEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3TradeSentEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case TRADEREQ:
                if (config.showCustomChat() && config.CustomTradeReqEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2TradeReqEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3TradeReqEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case CONSOLE:
                if (config.showCustomChat() && config.CustomConsoleEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2ConsoleEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3ConsoleEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case MODAUTOTYPER:
                if (config.showCustomChat() && config.CustomModAutoTyperEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2ModAutoTyperEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3ModAutoTyperEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case CHALREQ_TRADE:
                if (config.showCustomChat() && config.CustomChalreqTradeEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2ChalreqTradeEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3ChalreqTradeEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case IGNORENOTIFICATION:
                if (config.showCustomChat() && config.CustomIgnoreNotificationEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2IgnoreNotificationEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3IgnoreNotificationEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case FRIENDNOTIFICATION:
                if (config.showCustomChat() && config.CustomFriendNotificationEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2FriendNotificationEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3FriendNotificationEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
            case UNKNOWN:
                if (config.showCustomChat() && config.CustomUnknownEnabled()) {
                    chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom2Chat() && config.Custom2UnknownEnabled()) {
                    chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : cleanedName, cleanedMessage);
                }
                if (config.showCustom3Chat() && config.Custom3UnknownEnabled()) {
                    chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : cleanedName, cleanedMessage);
                }
                break;
        }
    }

    @Subscribe
    public void onHitsplatApplied(HitsplatApplied hitsplatApplied) {
        if (config.showCombatTab() || config.CustomCombatEnabled() || config.Custom2CombatEnabled() || config.Custom3CombatEnabled())
        {
            if (hitsplatApplied.getHitsplat().isMine() || !config.onlyshowMyHitsplats())
            {
            Actor attacker = hitsplatApplied.getActor();
            Actor defender = attacker.getInteracting();
            String defenderName = attacker.getName();
            String attackerName = (defender != null) ? defender.getName() : attacker.getName();
            Hitsplat hitsplat = hitsplatApplied.getHitsplat();
            if (hitsplat.getAmount() == 0 && config.hidezerodamageHitsplats()) {
                return;
            }
            int damageAmount = hitsplat.getAmount();
            String identifier = "Combat";
            String timestamp = getCurrentTimestamp();
            String combatMessage = (defender == null) ? defenderName + " was hit for: " + damageAmount
                    : attackerName + " hit " + defenderName + " for: " + damageAmount;
            if (config.showCombatTab()) {
            chatPanelSidebar.addCombatMessage(timestamp, (config.identifierC()) ? "Combat" : "", combatMessage);
            }
            if (config.showCustomChat() && config.CustomCombatEnabled()) {
                chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : "", combatMessage);
            }
            if (config.showCustom2Chat() && config.Custom2CombatEnabled()) {
                chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : "", combatMessage);
            }
            if (config.showCustom3Chat() && config.Custom3CombatEnabled()) {
                chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : "", combatMessage);
            }
        }}
    }
    @Subscribe
    public void onActorDeath(ActorDeath actorDeath) {
        Actor actor = actorDeath.getActor();
        String actorName = actor.getName();

        String identifier = "Death";
        String timestamp = getCurrentTimestamp();
        String deathMessage = actorName + " died.";

        if (config.showCombatTab() && config.displayDeaths()) {
            chatPanelSidebar.addCombatMessage(timestamp, (config.identifierC()) ? "Death" : "", deathMessage);
        }
        if (config.showCustomChat() && config.CustomCombatEnabled() && config.displayDeaths()) {
            chatPanelSidebar.addCustomChatMessage(timestamp, config.identifier1() ? identifier : "", deathMessage);
        }
        if (config.showCustom2Chat() && config.Custom2CombatEnabled() && config.displayDeaths()) {
            chatPanelSidebar.addCustom2ChatMessage(timestamp, config.identifier2() ? identifier : "", deathMessage);
        }
        if (config.showCustom3Chat() && config.Custom3CombatEnabled() && config.displayDeaths()) {
            chatPanelSidebar.addCustom3ChatMessage(timestamp, config.identifier3() ? identifier : "", deathMessage);
        }
    }

    private String getIdentifier(String cleanedName, ChatMessage event) {
        switch (event.getType()) {
            case PUBLICCHAT:
                return "Public - " + cleanedName;
            case MODCHAT:
                return "ModChat - " + cleanedName;
            case PRIVATECHAT:
                return "Private - " + cleanedName;
            case MODPRIVATECHAT:
                return "ModPrivate - " + cleanedName;
            case CLAN_CHAT:
                return "Clan - " + cleanedName;
            case CLAN_MESSAGE:
                return "Clan Msg" + cleanedName;
            case CLAN_GUEST_MESSAGE:
                return "ClanGuest Msg" + cleanedName;
            case CLAN_GIM_CHAT:
                return "ClanGIM - " + cleanedName;
            case CLAN_GIM_MESSAGE:
                return "ClanGIM Msg" + cleanedName;
            case CLAN_GUEST_CHAT:
                return "ClanGuest - " + cleanedName;
            case CHALREQ_CLANCHAT:
                return "Chalreq Clan" + cleanedName;
            case PRIVATECHATOUT:
                return "Private Out - " + cleanedName;
            case FRIENDSCHAT:
                return "Friends Chat - " + cleanedName;
            case CHALREQ_FRIENDSCHAT:
                return "Chalreq Friends" + cleanedName;
            case FRIENDSCHATNOTIFICATION:
                return "FriendsChatNotify" + cleanedName;
            case BROADCAST:
                return "Broadcast" + cleanedName;
            case GAMEMESSAGE:
                return "Game Message" + cleanedName;
            case ENGINE:
                return "Engine" + cleanedName;
            case NPC_EXAMINE:
                return "NPC Examine" + cleanedName;
            case NPC_SAY:
                return "NPC Say" + cleanedName;
            case MESBOX:
                return "Mesbox" + cleanedName;
            case SPAM:
                return "Spam" + cleanedName;
            case DIALOG:
                return "Dialog" + cleanedName;
            case ITEM_EXAMINE:
                return "Item Examine" + cleanedName;
            case OBJECT_EXAMINE:
                return "Object Examine" + cleanedName;
            case WELCOME:
                return "Welcome" + cleanedName;
            case TRADE:
                return "Trade" + cleanedName;
            case TRADE_SENT:
                return "Trade Sent" + cleanedName;
            case TRADEREQ:
                return "Trade Req" + cleanedName;
            case CONSOLE:
                return "Console" + cleanedName;
            case MODAUTOTYPER:
                return "ModAutoTyper - " + cleanedName;
            case CHALREQ_TRADE:
                return "Chalreq Trade" + cleanedName;
            case IGNORENOTIFICATION:
                return "Ignore Notification" + cleanedName;
            case FRIENDNOTIFICATION:
                return "Friend Notification" + cleanedName;
            case UNKNOWN:
                return "Unknown" + cleanedName;
            default:
                return cleanedName;
        }
    }

    private String getCurrentTimestamp() {
        String customFormat = config.TimestampFormat();
        if (!customFormat.isEmpty()) {
              SimpleDateFormat dateFormat;
           try
           {
               dateFormat = new SimpleDateFormat(customFormat);
           }
           catch (IllegalArgumentException e) {
               dateFormat = new SimpleDateFormat("HH:mm");
            }
         return dateFormat.format(new Date());}
         return customFormat;
    }

    private String cleanString(String message)
    {
        return message.replaceAll("<img=[0-9]+>", "").replace("<lt>", "<").replace("<gt>", ">");
    }

    private String cleanDialogMessage(String message)
    {
        return message.replace("|", ": ");
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event) {
        if ("chatpanel".equals(event.getGroup())) {
            if (event.getKey().startsWith("show")) {
                chatPanelSidebar.reloadPlugin();
            }
            if (event.getKey().startsWith("font") || event.getKey().endsWith("FontSize")) {
                chatPanelSidebar.updateFonts();
            }
            if (event.getKey().equals("fontFamily") && (config.fontFamily().equals(ChatPanelConfig.FontFamily.CUSTOM_FONT))) {
                chatPanelSidebar.fontLoadErrorShown = false;
                chatPanelSidebar.updateFonts();
                chatPanelSidebar.fontLoadErrorShown = true;
            } else {
                chatPanelSidebar.updateChatStyles();
                if (chatPanelSidebar.isPopout()) {
                    chatPanelSidebar.setCactus(config.popoutOpacity());
                }
            }
            if (event.getKey().startsWith("hideSidebar")) {
                if (config.hideSidebarIcon()) {
                    String message = "<html>Hide Sidebar Icon enabled.<br> Turn plugin off/on with Auto-pop out window enabled to spawn a Chat Panel.</html>";
                    JOptionPane.showMessageDialog(null, message, "Notice", JOptionPane.WARNING_MESSAGE);
                }
            }
            }
            if (config.hideSidebarIcon() && !config.AutoPop()) {
                String message = "<html>Warning: Hide Sidebar Icon is enabled but Auto-pop out window is not.<br>Enable Auto-pop out or disable Hide Sidebar Icon to access to Chat Panel.</html>";
                JOptionPane.showMessageDialog(null, message, "Configuration Issue", JOptionPane.WARNING_MESSAGE);
            }
        }
    }

package com.chatpanel;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("chatpanel")
public interface ChatPanelConfig extends Config {

    enum FontFamily {
        NORMAL("-Default-"),
        FONT7("Avara"),
        FONT6("December Show"),
        FONT4("Fonarto"),
        FONT8("Funtype"),
        FONT5("Home Video"),
        FONT2("Mr. Pixel"),
        FONT3("Qaz"),
        SUPERFUNKY("Super Funky"),
        CUSTOM_FONT("-Custom Font-");
        private final String name;
        FontFamily(String name) {
            this.name = name;
        }

        @Override
        public String toString() {
            return name;
        }

    }
    enum FontStyle {
        PLAIN("Plain"),
        BOLD("Bold"),
        ITALIC("Italic"),
        ITALIC_BOLD("Italic Bold");
        private final String name;
        FontStyle(String name) {
            this.name = name;
        }

        @Override
        public String toString() {
            return name;
        }

    }

    enum ExportLogDate {
        dd_MM_yy(" dd_MM_yy"),
        MM_dd_yy(" MM_dd_yy"),
        dd_MM(" dd_MM"),
        MM_dd(" MM_dd");
        private final String name;
        ExportLogDate(String name) {
            this.name = name;
        }

        @Override
        public String toString() {
            return name;
        }

    }

    @ConfigSection(
            name = "General",
            description = "General settings that affect all tabs",
            closedByDefault = true,
            position = 0
    )
    String generalSection = "general";

    @ConfigSection(
            name = "Public Chat",
            description = "Settings for the Public Chat tab",
            closedByDefault = true,
            position = 11
    )
    String publicChatSection = "publicChat";

    @ConfigSection(
            name = "Private Chat",
            description = "Settings for the Private Chat tab",
            closedByDefault = true,
            position = 10
    )
    String privateChatSection = "privateChat";

    @ConfigSection(
            name = "Clan Chat",
            description = "Settings for the Clan Chat tab",
            closedByDefault = true,
            position = 6
    )
    String clanChatSection = "clanChat";

    @ConfigSection(
            name = "Friends Chat",
            description = "Settings for the Friends Chat tab",
            closedByDefault = true,
            position = 8
    )
    String friendsChatSection = "friendsChat";

    @ConfigSection(
            name = "Game Chat",
            description = "Settings for the Game Chat tab",
            closedByDefault = true,
            position = 9
    )
    String gameChatSection = "gameChat";

    @ConfigSection(
            name = "All Chat",
            description = "Settings for the All Chat tab, not all of the chat.",
            closedByDefault = true,
            position = 5
    )
    String allChatSection = "allChat";

    @ConfigSection(
            name = "Custom Chat",
            description = "Settings for the Custom Chat tab, select all desired chat channels to be displayed. Long list.",
            closedByDefault = true,
            position = 12
    )
    String customChatSection = "customChat";

    @ConfigSection(
            name = "Custom Chat 2",
            description = "Settings for the second Custom Chat tab, select all desired chat channels to be displayed. Long list.",
            closedByDefault = true,
            position = 13
    )
    String custom2ChatSection = "custom2Chat";

    @ConfigSection(
            name = "Custom Chat 3",
            description = "Settings for the third Custom Chat tab, select all desired chat channels to be displayed. Long list.",
            closedByDefault = true,
            position = 14
    )
    String custom3ChatSection = "custom3Chat";

    @ConfigSection(
            name = "Combat",
            description = "Settings for the Combat tab. (Goblin hits Player for: 2), If target unknown: (Player was hit for: 1). Relies on what you are targeting.",
            closedByDefault = true,
            position = 7
    )
    String combatSection = "combat";

    @ConfigSection(
            name = "Pop Out Window",
            description = "Settings for the pop out window",
            closedByDefault = true,
            position = 1
    )
    String popoutSection = "popoutwindow";

    @ConfigSection(
            name = "Highlighting",
            description = "Word highlighting settings",
            closedByDefault = true,
            position = 3
    )
    String highlightingSection = "highlightingSection";

    @ConfigSection(
            name = "Tabs",
            description = "Tab selection. (Recommended 4)",
            closedByDefault = true,
            position = 4
    )
    String tabSection = "tabselection";

    @ConfigSection(
            name = "Extras",
            description = "Additional settings and tweaks",
            closedByDefault = true,
            position = 16
    )
    String extrasSection = "extras";

    @Range(min = -100, max = 100)
    @ConfigItem(
            keyName = "chatColorOffset",
            name = "Odd Row Shading",
            description = "Tints the colors of odd rows. Negative numbers darken, positive brighten. (Min -100, max 100).",
            section = generalSection,
            position = 1
    )
    default int chatColorOffset() {
        return 0;
    }

    @ConfigItem(
            keyName = "fontFamily",
            name = "Font",
            description = "Choose the font for the Chat Panel. <br>You can place a font file named customfont.ttf into /.runelite/chat-panel/ to use your own font. <br>See README for more info.",
            section = generalSection,
            position = 4
    )
    default FontFamily fontFamily()
    {
        return FontFamily.NORMAL;
    }

    @ConfigItem(
            keyName = "fontStyle",
            name = "Font Style",
            description = "Choose the font style for the chat panel",
            section = generalSection,
            position = 5
    )
    default FontStyle fontStyle()
    {
        return FontStyle.PLAIN;
    }

    @ConfigItem(
            keyName = "TimestampFormat",
            name = "Timestamp Format",
            description = "Enter a custom format (e.g. HH:mm. Sets to this on incorrect entry). Many more options for SimpleDateFormat if searched online",
            section = generalSection,
            position = 7
    )
    default String TimestampFormat()
    {
        return "";
    }

    @Range(min = 50, max = 5000)
    @ConfigItem(
            keyName = "chatAreaHeight",
            name = "Chat Area Height",
            description = "Configures the height of the chat area of the side panel. Recommended below window height",
            section = extrasSection,
            position = 3
    )
    default int chatAreaHeight()
    {
        return 435;
    }

    @Range(max = 50)
    @ConfigItem(
            keyName = "iconPosition",
            name = "Icon Position",
            description = "Set the priority for the sidebar icon's position. (Requires plugin restart)",
            position = 2,
            section = extrasSection
    )
    default int iconPosition()
    {
        return 5;
    }

    @ConfigItem(
            keyName = "hideSidebarIcon",
            name = "Hide Sidebar Icon",
            description = "ONLY use with Auto-Pop out and if you REALLY don't want a sidebar icon. Toggle plugin on/off to restore pop out window if closed. (Requires plugin restart)",
            section = extrasSection,
            position = 3
    )
    default boolean hideSidebarIcon()
    {
        return false;
    }

    @ConfigItem(
            keyName = "publicChatColor",
            name = "Public Chat Color",
            description = "Configures the font color of the public chat messages.",
            section = publicChatSection,
            position = 1
    )
    default Color publicChatColor()
    {
        return new Color(0xF1FF00);
    }

    @ConfigItem(
            keyName = "publicChatBackground",
            name = "Public Chat Background",
            description = "Configures the background color of the public chat.",
            section = publicChatSection,
            position = 0

    )
    default Color publicChatBackground()
    {
        return new Color(0x282828);
    }

    @ConfigItem(
            keyName = "publicChatNameColor",
            name = "Public Chat Name Color",
            description = "Configures the player name color for public chat.",
            section = publicChatSection,
            position = 2
    )
    default Color publicChatNameColor()
    {
        return publicChatColor();
    }

    @ConfigItem(
            keyName = "publicChatTimestampColor",
            name = "Public Chat Timestamp Color",
            description = "Configures the timestamp color for public chat.",
            section = publicChatSection,
            position = 2
    )
    default Color publicChatTimestampColor()
    {
        return publicChatColor();
    }

    @Range(min = 5, max = 200)
    @ConfigItem(
            keyName = "publicChatFontSize",
            name = "Public Chat Font Size",
            description = "Configures the font size of the public chat messages.",
            section = publicChatSection,
            position = 3
    )
    default int publicChatFontSize()
    {
        return 10;
    }

    @ConfigItem(
            keyName = "privateChatColor",
            name = "Private Chat Color",
            description = "Configures the font color of the private chat messages.",
            section = privateChatSection,
            position = 1
    )
    default Color privateChatColor()
    {
        return new Color(0x0AFF00);
    }

    @ConfigItem(
            keyName = "privateChatBackground",
            name = "Private Chat Background",
            description = "Configures the background color of the private chat.",
            section = privateChatSection,
            position = 0
    )
    default Color privateChatBackground()
    {
        return new Color(0x282828);
    }

    @ConfigItem(
            keyName = "privateChatNameColor",
            name = "Private Chat Name Color",
            description = "Configures the player name color for private chat.",
            section = privateChatSection,
            position = 2
    )
    default Color privateChatNameColor()
    {
        return privateChatColor();
    }

    @ConfigItem(
            keyName = "privateChatTimestampColor",
            name = "Private Chat Timestamp Color",
            description = "Configures the timestamp color for private chat.",
            section = privateChatSection,
            position = 2
    )
    default Color privateChatTimestampColor()
    {
        return privateChatColor();
    }

    @Range(min = 5, max = 200)
    @ConfigItem(
            keyName = "privateChatFontSize",
            name = "Private Chat Font Size",
            description = "Configures the font size of the private chat messages.",
            section = privateChatSection,
            position = 3
    )
    default int privateChatFontSize()
    {
        return 14;
    }

    @ConfigItem(
            keyName = "clanChatColor",
            name = "Clan Chat Color",
            description = "Configures the font color of the clan chat messages.",
            section = clanChatSection,
            position = 1
    )
    default Color clanChatColor()
    {
        return new Color(0x007DFF);
    }

    @ConfigItem(
            keyName = "clanChatBackgroundColor",
            name = "Clan Chat Background",
            description = "Configures the background color of the clan chat.",
            section = clanChatSection,
            position = 0
    )
    default Color clanChatBackgroundColor()
    {
        return new Color(0x282828);
    }

    @ConfigItem(
            keyName = "clanChatNameColor",
            name = "Clan Chat Name Color",
            description = "Configures the player name color for clan chat.",
            section = clanChatSection,
            position = 2
    )
    default Color clanChatNameColor()
    {
        return clanChatColor();
    }

    @ConfigItem(
            keyName = "clanChatTimestampColor",
            name = "Clan Chat Timestamp Color",
            description = "Configures the timestamp color for clan chat.",
            section = clanChatSection,
            position = 2
    )
    default Color clanChatTimestampColor()
    {
        return clanChatColor();
    }

    @Range(min = 5, max = 200)
    @ConfigItem(
            keyName = "clanChatFontSize",
            name = "Clan Chat Font Size",
            description = "Configures the font size of the clan chat messages.",
            section = clanChatSection,
            position = 3
    )
    default int clanChatFontSize()
    {
        return 12;
    }

    @ConfigItem(
            keyName = "friendsChatColor",
            name = "Friends Chat Color",
            description = "Configures the font color of the Friends Chat messages.",
            section = friendsChatSection,
            position = 1
    )
    default Color friendsChatColor()
    {
        return new Color(0x28FF71);
    }

    @ConfigItem(
            keyName = "friendsChatBackground",
            name = "Friends Chat Background",
            description = "Configures the background color of the Friends Chat.",
            section = friendsChatSection,
            position = 0
    )
    default Color friendsChatBackground()
    {
        return new Color(0x282828);
    }

    @ConfigItem(
            keyName = "friendsChatNameColor",
            name = "Friends Chat Name Color",
            description = "Configures the player name color for friends chat.",
            section = friendsChatSection,
            position = 2
    )
    default Color friendsChatNameColor()
    {
        return friendsChatColor();
    }

    @ConfigItem(
            keyName = "friendsChatTimestampColor",
            name = "Friends Chat Timestamp Color",
            description = "Configures the timestamp color for friends chat.",
            section = friendsChatSection,
            position = 2
    )
    default Color friendsChatTimestampColor()
    {
        return friendsChatColor();
    }

    @Range(min = 5, max = 200)
    @ConfigItem(
            keyName = "friendsChatFontSize",
            name = "Friends Chat Font Size",
            description = "Configures the font size of the Friends Chat messages.",
            section = friendsChatSection,
            position = 3
    )
    default int friendsChatFontSize()
    {
        return 10;
    }

    @ConfigItem(
            keyName = "gameChatColor",
            name = "Game Chat Color",
            description = "Configures the font color of the game chat messages.",
            section = gameChatSection,
            position = 1
    )
    default Color gameChatColor()
    {
        return new Color(0xFFFFFF);
    }

    @ConfigItem(
            keyName = "gameChatBackgroundColor",
            name = "Game Chat Background",
            description = "Configures the background color of the game chat.",
            section = gameChatSection,
            position = 0
    )
    default Color gameChatBackgroundColor()
    {
        return new Color(0x282828);
    }

    @ConfigItem(
            keyName = "gameChatNameColor",
            name = "Game Chat Name Color",
            description = "Configures the name color for game chat.",
            section = gameChatSection,
            position = 2
    )
    default Color gameChatNameColor()
    {
        return gameChatColor();
    }

    @ConfigItem(
            keyName = "gameChatTimestampColor",
            name = "Game Chat Timestamp Color",
            description = "Configures the timestamp color for game chat.",
            section = gameChatSection,
            position = 2
    )
    default Color gameChatTimestampColor()
    {
        return gameChatColor();
    }

    @Range(min = 5, max = 200)
    @ConfigItem(
            keyName = "gameChatFontSize",
            name = "Game Chat Font Size",
            description = "Configures the font size of the game chat messages.",
            section = gameChatSection,
            position = 3
    )
    default int gameChatFontSize()
    {
        return 12;
    }

    @ConfigItem(
            keyName = "allChatColor",
            name = "All Chat Color",
            description = "Configures the font color of the All Chat messages.",
            section = allChatSection,
            position = 1
    )
    default Color allChatColor()
    {
        return new Color(0xFFFFFF);
    }

    @ConfigItem(
            keyName = "allChatBackground",
            name = "All Chat Background",
            description = "Configures the background color of the All Chat.",
            section = allChatSection,
            position = 0
    )
    default Color allChatBackground()
    {
        return new Color(0x282828);
    }

    @ConfigItem(
            keyName = "allChatNameColor",
            name = "All Chat Name Color",
            description = "Configures the name color for all chat.",
            section = allChatSection,
            position = 2
    )
    default Color allChatNameColor()
    {
        return allChatColor();
    }

    @ConfigItem(
            keyName = "allChatTimestampColor",
            name = "All Chat Timestamp Color",
            description = "Configures the timestamp color for all chat.",
            section = allChatSection,
            position = 2
    )
    default Color allChatTimestampColor()
    {
        return allChatColor();
    }

    @Range(min = 5, max = 200)
    @ConfigItem(
            keyName = "allChatFontSize",
            name = "All Chat Font Size",
            description = "Configures the font size of the All Chat messages.",
            section = allChatSection,
            position = 3
    )
    default int allChatFontSize()
    {
        return 10;
    }

    @ConfigItem(
            keyName = "Customtab1",
            name = "Name of Tab",
            description = "Configures the display name of the tab. (Requires plugin restart, or hide & show tab)",
            section = customChatSection,
            position = 0
    )
    default String custom1Tabname()
    {
        return "Custom";
    }

    @ConfigItem(
            keyName = "customChatColor",
            name = "Text Color",
            description = "Configures the font color.",
            section = customChatSection,
            position = 2
    )
    default Color customChatColor()
    {
        return new Color(0xFFFFFF);
    }

    @ConfigItem(
            keyName = "customChatBackgroundColor",
            name = "Background Color",
            description = "Configures the background color.",
            section = customChatSection,
            position = 1
    )
    default Color customChatBackgroundColor()
    {
        return new Color(0x282828);
    }

    @ConfigItem(
            keyName = "customChatNameColor",
            name = "Name Color",
            description = "Configures the name color.",
            section = customChatSection,
            position = 3
    )
    default Color customChatNameColor()
    {
        return customChatColor();
    }

    @ConfigItem(
            keyName = "customChatTimestampColor",
            name = "Timestamp Color",
            description = "Configures the timestamp color.",
            section = customChatSection,
            position = 3
    )
    default Color customChatTimestampColor()
    {
        return customChatColor();
    }

    @Range(min = 5, max = 200)
    @ConfigItem(
            keyName = "customChatFontSize",
            name = "Font Size",
            description = "Configures the font size.",
            section = customChatSection,
            position = 4
    )
    default int customChatFontSize()
    {
        return 12;
    }

    @ConfigItem(
            keyName = "identifier1",
            name = "Identify Sources of Messages",
            description = "Show sources of messages (e.g. [Clan - Player]: Hello!)",
            section = customChatSection,
            position = 5
    )
    default boolean identifier1()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Custom2tab",
            name = "Name of Tab",
            description = "Configures the display name of the tab. (Requires plugin restart, or hide & show tab)",
            section = custom2ChatSection,
            position = 0
    )
    default String custom2Tabname()
    {
        return "Custom 2";
    }

    @ConfigItem(
            keyName = "custom2ChatColor",
            name = "Text Color",
            description = "Configures the font color.",
            section = custom2ChatSection,
            position = 2
    )
    default Color custom2ChatColor()
    {
        return new Color(0xFFFFFF);
    }

    @ConfigItem(
            keyName = "custom2ChatBackgroundColor",
            name = "Background Color",
            description = "Configures the background color.",
            section = custom2ChatSection,
            position = 1
    )
    default Color custom2ChatBackgroundColor()
    {
        return new Color(0x282828);
    }

    @ConfigItem(
            keyName = "custom2ChatNameColor",
            name = "Name Color",
            description = "Configures the name color.",
            section = custom2ChatSection,
            position = 3
    )
    default Color custom2ChatNameColor()
    {
        return custom2ChatColor();
    }

    @ConfigItem(
            keyName = "custom2ChatTimestampColor",
            name = "Timestamp Color",
            description = "Configures the timestamp color.",
            section = custom2ChatSection,
            position = 3
    )
    default Color custom2ChatTimestampColor()
    {
        return custom2ChatColor();
    }

    @Range(min = 5, max = 200)
    @ConfigItem(
            keyName = "custom2ChatFontSize",
            name = "Font Size",
            description = "Configures the font size.",
            section = custom2ChatSection,
            position = 4
    )
    default int custom2ChatFontSize()
    {
        return 12;
    }

    @ConfigItem(
            keyName = "identifier2",
            name = "Identify Sources of Messages",
            description = "Show sources of messages (e.g. [Clan - Player]: Hello!)",
            section = custom2ChatSection,
            position = 5
    )
    default boolean identifier2()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Custom3tab",
            name = "Name of Tab",
            description = "Configures the display name of the tab. (Requires plugin restart, or hide & show tab)",
            section = custom3ChatSection,
            position = 0
    )
    default String custom3Tabname()
    {
        return "Custom 3";
    }

    @ConfigItem(
            keyName = "custom3ChatColor",
            name = "Text Color",
            description = "Configures the font color.",
            section = custom3ChatSection,
            position = 2
    )
    default Color custom3ChatColor()
    {
        return new Color(0xFFFFFF);
    }

    @ConfigItem(
            keyName = "custom3ChatBackgroundColor",
            name = "Background Color",
            description = "Configures the background color.",
            section = custom3ChatSection,
            position = 1
    )
    default Color custom3ChatBackgroundColor()
    {
        return new Color(0x282828);
    }

    @ConfigItem(
            keyName = "custom3ChatNameColor",
            name = "Name Color",
            description = "Configures the name color.",
            section = custom3ChatSection,
            position = 3
    )
    default Color custom3ChatNameColor()
    {
        return custom3ChatColor();
    }

    @ConfigItem(
            keyName = "custom3ChatTimestampColor",
            name = "Timestamp Color",
            description = "Configures the timestamp color.",
            section = custom3ChatSection,
            position = 3
    )
    default Color custom3ChatTimestampColor()
    {
        return custom3ChatColor();
    }

    @Range(min = 5, max = 200)
    @ConfigItem(
            keyName = "custom3ChatFontSize",
            name = "Font Size",
            description = "Configures the font size.",
            section = custom3ChatSection,
            position = 4
    )
    default int custom3ChatFontSize()
    {
        return 12;
    }

    @ConfigItem(
            keyName = "identifier3",
            name = "Identify Sources of Messages",
            description = "Show sources of messages (e.g. [Clan - Player]: Hello!)",
            section = custom3ChatSection,
            position = 5
    )
    default boolean identifier3()
    {
        return false;
    }

    @ConfigItem(
            keyName = "combatTextColor",
            name = "Text Color",
            description = "Configures the font color.",
            section = combatSection,
            position = 2
    )
    default Color combatTextColor()
    {
        return new Color(0xFFFFFF);
    }

    @ConfigItem(
            keyName = "combatBackgroundColor",
            name = "Background Color",
            description = "Configures the background color.",
            section = combatSection,
            position = 1
    )
    default Color combatBackgroundColor()
    {
        return new Color(0x282828);
    }

    @ConfigItem(
            keyName = "combatLabelColor",
            name = "Label Color",
            description = "Configures the color of the labels in this tab (e.g. Combat, Death).",
            section = combatSection,
            position = 3
    )
    default Color combatLabelColor()
    {
        return combatTextColor();
    }

    @ConfigItem(
            keyName = "combatTimestampColor",
            name = "Timestamp Color",
            description = "Configures the timestamp color.",
            section = combatSection,
            position = 3
    )
    default Color combatTimestampColor()
    {
        return combatTextColor();
    }

    @ConfigItem(
            keyName = "onlyshowMyHitsplats",
            name = "Only Show My Combat Events",
            description = "Show only damage events related to you, or shows all nearby player's events.",
            section = combatSection,
            position = 5
    )
    default boolean onlyshowMyHitsplats()
    {
        return true;
    }

    @ConfigItem(
            keyName = "hidezerodamageHitsplats",
            name = "Hide Zero Damage Events",
            description = "Hide when things hit 0's",
            section = combatSection,
            position = 7
    )
    default boolean hidezerodamageHitsplats()
    {
        return false;
    }

    @Range(min = 5, max = 200)
    @ConfigItem(
            keyName = "combatFontSize",
            name = "Font Size",
            description = "Configures the font size.",
            section = combatSection,
            position = 4
    )
    default int combatFontSize()
    {
        return 12;
    }

    @ConfigItem(
            keyName = "displayDeaths",
            name = "Show Deaths",
            description = "Displays a message when things die",
            section = combatSection,
            position = 6
    )
    default boolean displayDeaths()
    {
        return true;
    }

    @ConfigItem(
            keyName = "identifierC",
            name = "Add Combat Labels",
            description = "Add labels (Combat, Death) before messages",
            section = combatSection,
            position = 12
    )
    default boolean identifierC()
    {
        return false;
    }

    @Range(max = 10)
    @ConfigItem(
            keyName = "lineSpacing",
            name = "Line Spacing",
            description = "Adjust the spacing between chat messages",
            section = generalSection,
            position = 2

    )
    default int lineSpacing()
    {
        return 0;
    }

    @ConfigItem(
            keyName = "popoutAlwaysOnTop",
            name = "Always on Top",
            description = "Keep the pop out window always on top of other windows",
            section = popoutSection,
            position = 2
    )
    default boolean popoutAlwaysOnTop()
    {
        return false;
    }

    @ConfigItem(
            keyName = "popoutSize",
            name = "Size",
            description = "Set the initial size of the pop out window",
            section = popoutSection,
            position = 0
    )
    default Dimension popoutSize()
    {
        return new Dimension(300, 400);
    }

    @Range(min = 10, max = 100)
    @ConfigItem(
            keyName = "PopoutOpacity",
            name = "Window Opacity",
            description = "Set the pop out window's opacity",
            position = 1,
            section = popoutSection
    )
    default int popoutOpacity()
    {
        return 100;
    }

    @ConfigItem(
            keyName = "PopoutWarning",
            name = "Hide Pop Out Closure Warning",
            description = "Show the warning on closing the pop out window with Hide Sidebar Icon on",
            section = extrasSection,
            position = 6
    )
    default boolean hidePopoutWarning()
    {
        return false;
    }

    @ConfigItem(
            keyName = "AutoPop",
            name = "Auto-Pop Out Window",
            description = "Pop out window opens automatically when plugin turned on, including on launch",
            position = 5,
            section = popoutSection
    )
    default boolean AutoPop()
    {
        return false;
    }

    @ConfigItem(
            keyName = "rememberPopoutPosition",
            name = "Remember Pop Out Position",
            description = "Remember the position and size of the pop out window between launches.<br>If you lose track of your pop out window, turn this setting off and pop in and out.",
            section = popoutSection,
            position = 7
    )
    default boolean rememberPopoutPosition() {
        return false;
    }

    @ConfigItem(
            keyName = "DisablePopOut",
            name = "Hide Pop Out/Pop In Buttons",
            description = "Hides pop out button and pop in button, except in empty side panel. (Requires plugin restart)",
            position = 5,
            section = extrasSection
    )
    default boolean hidepopoutButtons()
    {
        return false;
    }

    @ConfigItem(
            keyName = "showPublicChat",
            name = "Show Public Chat",
            description = "Show/hide the Public Chat tab",
            section = tabSection,
            position = 6
    )
    default boolean showPublicChat()
    {
        return true;
    }

    @ConfigItem(
            keyName = "showPrivateChat",
            name = "Show Private Chat",
            description = "Show/hide the Private Chat tab",
            section = tabSection,
            position = 5
    )
    default boolean showPrivateChat()
    {
        return true;
    }

    @ConfigItem(
            keyName = "showClanChat",
            name = "Show Clan Chat",
            description = "Show/hide the Clan Chat tab",
            section = tabSection,
            position = 1
    )
    default boolean showClanChat()
    {
        return true;
    }

    @ConfigItem(
            keyName = "showGameChat",
            name = "Show Game Chat",
            description = "Show/hide the Game tab",
            section = tabSection,
            position = 4
    )
    default boolean showGameChat()
    {
        return true;
    }

    @ConfigItem(
            keyName = "showAllChat",
            name = "Show All Chat",
            description = "Show/hide the All Chat tab",
            section = tabSection,
            position = 0
    )
    default boolean showAllChat()
    {
        return false;
    }

    @ConfigItem(
            keyName = "showFriendsChat",
            name = "Show Friends Chat Channel",
            description = "Show/hide the Friends Chat tab",
            section = tabSection,
            position = 3
    )
    default boolean showFriendsChat()
    {
        return false;
    }

    @ConfigItem(
            keyName = "showCustomChat",
            name = "Show Custom Chat",
            description = "Show/hide the Custom Chat tab, have fun!",
            section = tabSection,
            position = 9
    )
    default boolean showCustomChat()
    {
        return false;
    }

    @ConfigItem(
            keyName = "showCustom2Chat",
            name = "Show Custom Chat 2",
            description = "Show/hide the second Custom Chat tab, have more fun!",
            section = tabSection,
            position = 10
    )
    default boolean showCustom2Chat()
    {
        return false;
    }

    @ConfigItem(
            keyName = "showCustom3Chat",
            name = "Show Custom Chat 3",
            description = "Show/hide the third Custom Chat tab, have all the fun!",
            section = tabSection,
            position = 11
    )
    default boolean showCustom3Chat()
    {
        return false;
    }

    @ConfigItem(
            keyName = "showCombatTab",
            name = "Show Combat Tab",
            description = "Show/hide Combat tab. (Goblin hits Player for: 2), If target unknown: (Player was hit for: 1) <br> Provides very basic combat logging, there are other plugins for more advanced logging",
            section = tabSection,
            position = 2
    )
    default boolean showCombatTab()
    {
        return false;
    }

    @Range(min = 20, max = 200000)
    @ConfigItem(
            keyName = "maxchatlines",
            name = "Max Lines",
            description = "Max lines to display in each tab, starts getting laggy above 15,000 but feel free. (Min 20, Max 200,000)",
            section = extrasSection,
            position = 0
    )
    default int maxLines()
    {
        return 10000;
    }

	@ConfigItem(
		keyName = "enableMyName",
		name = "Enable My Name Color",
		description = "Enables recoloring your username, overriding chat colors. Select color below.",
		section = extrasSection,
		position = 8
	)
	default boolean enableMyNameColor()
	{
		return false;
	}

	@ConfigItem(
		keyName = "myNameColor",
		name = "My Name Color",
		description = "Configures the color of your username, overriding name color for chat tabs. Requires Enable My Name Color to be checked.",
		section = extrasSection,
		position = 9
	)
	default Color myNameColor()
	{
		return new Color(0xFFFFFF);
	}

    @ConfigItem(
            keyName = "hidePopoutIcon",
            name = "Hide Title Bar Icon",
            description = "Removes the icon from the title bar of the pop out windows, if they have one. Pop in and out to apply.",
            section = extrasSection,
            position = 4
    )
    default boolean hidePopoutIcon()
    {
        return false;
    }

    @ConfigItem(
            keyName = "exportLogDate",
            name = "Export Log Date",
            description = "Choose the date format for Export Log.",
            section = extrasSection,
            position = 7
    )
    default ExportLogDate exportLogDate()
    {
        return ExportLogDate.dd_MM_yy;
    }

	@ConfigItem(
		keyName = "highlightWords",
		name = "Highlight Words",
		description = "List of words to highlight, separated by commas.",
		section = highlightingSection,
		position = 1
	)
	default String highlightWords()
	{
		return "";
	}

    @ConfigItem(
            keyName = "highlightColor",
            name = "Highlight Color",
            description = "Configures the color of highlighted words.",
            section = highlightingSection,
            position = 4
    )
    default Color highlightColor()
    {
        return new Color(0x00FF0A);
    }

    @ConfigItem(
            keyName = "highlightWords2",
            name = "Highlight Words 2",
            description = "Second list of words to highlight, separated by commas.",
            section = highlightingSection,
            position = 6
    )
    default String highlightWords2()
    {
        return "";
    }

    @ConfigItem(
            keyName = "highlightColor2",
            name = "Highlight Color 2",
            description = "Configures the color of Highlight Words 2.",
            section = highlightingSection,
            position = 7
    )
    default Color highlightColor2()
    {
        return new Color(0xFFA07A);
    }


    @ConfigItem(
            keyName = "highlightWords3",
            name = "Highlight Words 3",
            description = "Third list of words to highlight, separated by commas.",
            section = highlightingSection,
            position = 9
    )
    default String highlightWords3()
    {
        return "";
    }

    @ConfigItem(
            keyName = "highlightColor3",
            name = "Highlight Color 3",
            description = "Configures the color of Highlight Words 3.",
            section = highlightingSection,
            position = 10
    )
    default Color highlightColor3()
    {
        return new Color(0xA0FF7A);
    }

    @ConfigItem(
            keyName = "partialMatching",
            name = "Partial Word Highlighting",
            description = "Allows partial matches of highlight words. Sell would highlight like: <span style='color:yellow'>Sell</span>ing",
            section = highlightingSection,
            position = 12
    )
    default boolean PartialMatching()
    {
        return true;
    }



    // Start of hidden entries



    @ConfigItem(
            keyName = "versionNumber",
            name = "Get Version",
            description = "",
            hidden = true
    )
    default double getVersion()
    {
        return 1.9;
    }

    @ConfigItem(
            keyName = "versionNumber",
            name = "Set Version",
            description = "The version when the update message was last shown.",
            hidden = true
    )
    void setVersion(double version);

    @ConfigItem(
            keyName = "lastDir",
            name = "Get Last Directory",
            description = "",
            hidden = true
    )
    default String getLastDIR()
    {
        return"";
    }

    @ConfigItem(
            keyName = "lastDir",
            name = "Set Last Directory",
            description = "Sets the last directory used to export log.",
            hidden = true
    )
    void setLastDIR(String String);

    @ConfigItem(
            keyName = "popoutMaximized",
            name = "Get Maximized",
            description = "Get if the pop out window was maximized",
            hidden = true
    )
    default boolean isPopoutMaximized() {
        return false;
    }

    @ConfigItem(
            keyName = "popoutMaximized",
            name = "Set Maximized",
            description = "Set if the pop out window was maximized",
            hidden = true
    )
    void setPopoutMaximized(boolean maximized);

    @ConfigItem(
            keyName = "popoutBounds",
            name = "Get Bounds",
            description = "Get bounds of pop out window",
            hidden = true
    )
    default Rectangle getPopoutBounds() {
        return null;
    }

    @ConfigItem(
            keyName = "popoutBounds",
            name = "Set Bounds",
            description = "Set bounds of pop out window",
            hidden = true
    )
    void setPopoutBounds(Rectangle bounds);



    // Start of Custom Chat channels...



    @ConfigItem(
            keyName = "Broadcast",
            name = "Broadcast",
            description = "Display broadcast messages",
            section = customChatSection,
            position = 7
    )
    default boolean CustomBroadcastEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ChalreqClanChat",
            name = "Chalreq Clan Chat",
            description = "Display chalreq clan chat messages",
            section = customChatSection,
            position = 8
    )
    default boolean CustomChalreqClanChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ChalreqFriendsChat",
            name = "Chalreq Friends Chat",
            description = "Display chalreq friends chat messages",
            section = customChatSection,
            position = 9
    )
    default boolean CustomChalreqFriendsChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ChalreqTrade",
            name = "Chalreq Trade",
            description = "Display chalreq trade messages",
            section = customChatSection,
            position = 10
    )
    default boolean CustomChalreqTradeEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ClanChat",
            name = "Clan Chat",
            description = "Display clan chat messages",
            section = customChatSection,
            position = 11
    )
    default boolean CustomClanChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ClanGimChat",
            name = "Clan GIM Chat",
            description = "Display clan GIM chat messages",
            section = customChatSection,
            position = 12
    )
    default boolean CustomClanGimChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ClanGimMessage",
            name = "Clan GIM Message",
            description = "Display clan GIM messages",
            section = customChatSection,
            position = 13
    )
    default boolean CustomClanGimMessageEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ClanGuestChat",
            name = "Clan Guest Chat",
            description = "Display clan guest chat messages",
            section = customChatSection,
            position = 14
    )
    default boolean CustomClanGuestChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ClanGuestMessage",
            name = "Clan Guest Message",
            description = "Display clan guest messages",
            section = customChatSection,
            position = 15
    )
    default boolean CustomClanGuestMessageEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ClanMessage",
            name = "Clan Message",
            description = "Display clan messages",
            section = customChatSection,
            position = 16
    )
    default boolean CustomClanMessageEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Combat",
            name = "Combat",
            description = "Display combat messages",
            section = customChatSection,
            position = 17
    )
    default boolean CustomCombatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Console",
            name = "Console",
            description = "Display console messages",
            section = customChatSection,
            position = 18
    )
    default boolean CustomConsoleEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Dialog",
            name = "Dialog",
            description = "Display dialog messages",
            section = customChatSection,
            position = 19
    )
    default boolean CustomDialogEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Engine",
            name = "Engine",
            description = "Display engine messages",
            section = customChatSection,
            position = 20
    )
    default boolean CustomEngineEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "FriendNotification",
            name = "Friend Notification",
            description = "Display friend notifications",
            section = customChatSection,
            position = 21
    )
    default boolean CustomFriendNotificationEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "FriendsChat",
            name = "Friends Chat",
            description = "Display friends chat messages",
            section = customChatSection,
            position = 22
    )
    default boolean CustomFriendsChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "FriendsChatNotification",
            name = "Friends Chat Notification",
            description = "Display friends chat notifications",
            section = customChatSection,
            position = 23
    )
    default boolean CustomFriendsChatNotificationEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "GameMessage",
            name = "Game Message",
            description = "Display game messages",
            section = customChatSection,
            position = 24
    )
    default boolean CustomGameMessageEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "IgnoreNotification",
            name = "Ignore Notification",
            description = "Display ignore notifications",
            section = customChatSection,
            position = 25
    )
    default boolean CustomIgnoreNotificationEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ItemExamine",
            name = "Item Examine",
            description = "Display item examine messages",
            section = customChatSection,
            position = 26
    )
    default boolean CustomItemExamineEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Mesbox",
            name = "Mesbox",
            description = "Display Mesbox messages",
            section = customChatSection,
            position = 27
    )
    default boolean CustomMesboxEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ModAutoTyper",
            name = "Mod Auto Typer",
            description = "Display mod auto-typer messages",
            section = customChatSection,
            position = 27
    )
    default boolean CustomModAutoTyperEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ModChat",
            name = "Mod Chat",
            description = "Display mod chat messages",
            section = customChatSection,
            position = 28
    )
    default boolean CustomModChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ModPrivateChat",
            name = "Mod Private Chat",
            description = "Display mod private chat messages",
            section = customChatSection,
            position = 29
    )
    default boolean CustomModPrivateChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "NpcExamine",
            name = "NPC Examine",
            description = "Display NPC examine messages",
            section = customChatSection,
            position = 30
    )
    default boolean CustomNpcExamineEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "NpcSay",
            name = "NPC Say",
            description = "Display NPC Say messages",
            section = customChatSection,
            position = 30
    )
    default boolean CustomNpcSayEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ObjectExamine",
            name = "Object Examine",
            description = "Display object examine messages",
            section = customChatSection,
            position = 31
    )
    default boolean CustomObjectExamineEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "PrivateChat",
            name = "Private Chat",
            description = "Display private chat messages",
            section = customChatSection,
            position = 32
    )
    default boolean CustomPrivateChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "PrivateChatout",
            name = "Private Chat Out",
            description = "Display private chat out messages",
            section = customChatSection,
            position = 33
    )
    default boolean CustomPrivateChatoutEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "PublicChat",
            name = "Public Chat",
            description = "Display public chat messages",
            section = customChatSection,
            position = 34
    )
    default boolean CustomPublicChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Spam",
            name = "Spam",
            description = "Display spam messages",
            section = customChatSection,
            position = 35
    )
    default boolean CustomSpamEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Trade",
            name = "Trade",
            description = "Display trade messages",
            section = customChatSection,
            position = 36
    )
    default boolean CustomTradeEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "TradeReq",
            name = "Trade Req",
            description = "Display trade request messages",
            section = customChatSection,
            position = 37
    )
    default boolean CustomTradeReqEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "TradeSent",
            name = "Trade Sent",
            description = "Display trade sent messages",
            section = customChatSection,
            position = 38
    )
    default boolean CustomTradeSentEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Unknown",
            name = "Unknown",
            description = "Display 'unknown' chat channel",
            section = customChatSection,
            position = 39
    )
    default boolean CustomUnknownEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Welcome",
            name = "Welcome",
            description = "Display welcome messages",
            section = customChatSection,
            position = 40
    )
    default boolean CustomWelcomeEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Broadcast2",
            name = "Broadcast",
            description = "Display broadcast messages",
            section = custom2ChatSection,
            position = 7
    )
    default boolean Custom2BroadcastEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ChalreqClanChat2",
            name = "Chalreq Clan Chat",
            description = "Display chalreq clan chat messages",
            section = custom2ChatSection,
            position = 8
    )
    default boolean Custom2ChalreqClanChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ChalreqFriendsChat2",
            name = "Chalreq Friends Chat",
            description = "Display chalreq friends chat messages",
            section = custom2ChatSection,
            position = 9
    )
    default boolean Custom2ChalreqFriendsChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ChalreqTrade2",
            name = "Chalreq Trade",
            description = "Display chalreq trade messages",
            section = custom2ChatSection,
            position = 10
    )
    default boolean Custom2ChalreqTradeEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ClanChat2",
            name = "Clan Chat",
            description = "Display clan chat messages",
            section = custom2ChatSection,
            position = 11
    )
    default boolean Custom2ClanChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ClanGimChat2",
            name = "Clan GIM Chat",
            description = "Display clan GIM chat messages",
            section = custom2ChatSection,
            position = 12
    )
    default boolean Custom2ClanGimChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ClanGimMessage2",
            name = "Clan GIM Message",
            description = "Display clan GIM messages",
            section = custom2ChatSection,
            position = 13
    )
    default boolean Custom2ClanGimMessageEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ClanGuestChat2",
            name = "Clan Guest Chat",
            description = "Display clan guest chat messages",
            section = custom2ChatSection,
            position = 14
    )
    default boolean Custom2ClanGuestChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ClanGuestMessage2",
            name = "Clan Guest Message",
            description = "Display clan guest messages",
            section = custom2ChatSection,
            position = 15
    )
    default boolean Custom2ClanGuestMessageEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ClanMessage2",
            name = "Clan Message",
            description = "Display clan messages",
            section = custom2ChatSection,
            position = 16
    )
    default boolean Custom2ClanMessageEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Combat2",
            name = "Combat",
            description = "Display combat messages",
            section = custom2ChatSection,
            position = 17
    )
    default boolean Custom2CombatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Console2",
            name = "Console",
            description = "Display console messages",
            section = custom2ChatSection,
            position = 18
    )
    default boolean Custom2ConsoleEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Dialog2",
            name = "Dialog",
            description = "Display dialog messages",
            section = custom2ChatSection,
            position = 19
    )
    default boolean Custom2DialogEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Engine2",
            name = "Engine",
            description = "Display engine messages",
            section = custom2ChatSection,
            position = 20
    )
    default boolean Custom2EngineEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "FriendNotification2",
            name = "Friend Notification",
            description = "Display friend notifications",
            section = custom2ChatSection,
            position = 21
    )
    default boolean Custom2FriendNotificationEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "FriendsChat2",
            name = "Friends Chat",
            description = "Display friends chat messages",
            section = custom2ChatSection,
            position = 22
    )
    default boolean Custom2FriendsChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "FriendsChatNotification2",
            name = "Friends Chat Notification",
            description = "Display friends chat notifications",
            section = custom2ChatSection,
            position = 23
    )
    default boolean Custom2FriendsChatNotificationEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "GameMessage2",
            name = "Game Message",
            description = "Display game messages",
            section = custom2ChatSection,
            position = 24
    )
    default boolean Custom2GameMessageEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "IgnoreNotification2",
            name = "Ignore Notification",
            description = "Display ignore notifications",
            section = custom2ChatSection,
            position = 25
    )
    default boolean Custom2IgnoreNotificationEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ItemExamine2",
            name = "Item Examine",
            description = "Display item examine messages",
            section = custom2ChatSection,
            position = 26
    )
    default boolean Custom2ItemExamineEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Mesbox2",
            name = "Mesbox",
            description = "Display Mesbox messages",
            section = custom2ChatSection,
            position = 27
    )
    default boolean Custom2MesboxEnabled()
    {
        return false;
    }
    
    @ConfigItem(
            keyName = "ModAutoTyper2",
            name = "Mod Auto Typer",
            description = "Display mod auto-typer messages",
            section = custom2ChatSection,
            position = 27
    )
    default boolean Custom2ModAutoTyperEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ModChat2",
            name = "Mod Chat",
            description = "Display mod chat messages",
            section = custom2ChatSection,
            position = 28
    )
    default boolean Custom2ModChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ModPrivateChat2",
            name = "Mod Private Chat",
            description = "Display mod private chat messages",
            section = custom2ChatSection,
            position = 29
    )
    default boolean Custom2ModPrivateChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "NpcExamine2",
            name = "NPC Examine",
            description = "Display NPC examine messages",
            section = custom2ChatSection,
            position = 30
    )
    default boolean Custom2NpcExamineEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "NpcSay2",
            name = "NPC Say",
            description = "Display NPC Say messages",
            section = custom2ChatSection,
            position = 30
    )
    default boolean Custom2NpcSayEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ObjectExamine2",
            name = "Object Examine",
            description = "Display object examine messages",
            section = custom2ChatSection,
            position = 31
    )
    default boolean Custom2ObjectExamineEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "PrivateChat2",
            name = "Private Chat",
            description = "Display private chat messages",
            section = custom2ChatSection,
            position = 32
    )
    default boolean Custom2PrivateChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "PrivateChatout2",
            name = "Private Chat Out",
            description = "Display private chat out messages",
            section = custom2ChatSection,
            position = 33
    )
    default boolean Custom2PrivateChatoutEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "PublicChat2",
            name = "Public Chat",
            description = "Display public chat messages",
            section = custom2ChatSection,
            position = 34
    )
    default boolean Custom2PublicChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Spam2",
            name = "Spam",
            description = "Display spam messages",
            section = custom2ChatSection,
            position = 35
    )
    default boolean Custom2SpamEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Trade2",
            name = "Trade",
            description = "Display trade messages",
            section = custom2ChatSection,
            position = 36
    )
    default boolean Custom2TradeEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "TradeReq2",
            name = "Trade Req",
            description = "Display trade request messages",
            section = custom2ChatSection,
            position = 37
    )
    default boolean Custom2TradeReqEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "TradeSent2",
            name = "Trade Sent",
            description = "Display trade sent messages",
            section = custom2ChatSection,
            position = 38
    )
    default boolean Custom2TradeSentEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Unknown2",
            name = "Unknown",
            description = "Display 'unknown' chat channel",
            section = custom2ChatSection,
            position = 39
    )
    default boolean Custom2UnknownEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Welcome2",
            name = "Welcome",
            description = "Display welcome messages",
            section = custom2ChatSection,
            position = 40
    )
    default boolean Custom2WelcomeEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Broadcast3",
            name = "Broadcast",
            description = "Display broadcast messages",
            section = custom3ChatSection,
            position = 7
    )
    default boolean Custom3BroadcastEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ChalreqClanChat3",
            name = "Chalreq Clan Chat",
            description = "Display chalreq clan chat messages",
            section = custom3ChatSection,
            position = 8
    )
    default boolean Custom3ChalreqClanChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ChalreqFriendsChat3",
            name = "Chalreq Friends Chat",
            description = "Display chalreq friends chat messages",
            section = custom3ChatSection,
            position = 9
    )
    default boolean Custom3ChalreqFriendsChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ChalreqTrade3",
            name = "Chalreq Trade",
            description = "Display chalreq trade messages",
            section = custom3ChatSection,
            position = 10
    )
    default boolean Custom3ChalreqTradeEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ClanChat3",
            name = "Clan Chat",
            description = "Display clan chat messages",
            section = custom3ChatSection,
            position = 11
    )
    default boolean Custom3ClanChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ClanGimChat3",
            name = "Clan GIM Chat",
            description = "Display clan GIM chat messages",
            section = custom3ChatSection,
            position = 12
    )
    default boolean Custom3ClanGimChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ClanGimMessage3",
            name = "Clan GIM Message",
            description = "Display clan GIM messages",
            section = custom3ChatSection,
            position = 13
    )
    default boolean Custom3ClanGimMessageEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ClanGuestChat3",
            name = "Clan Guest Chat",
            description = "Display clan guest chat messages",
            section = custom3ChatSection,
            position = 14
    )
    default boolean Custom3ClanGuestChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ClanGuestMessage3",
            name = "Clan Guest Message",
            description = "Display clan guest messages",
            section = custom3ChatSection,
            position = 15
    )
    default boolean Custom3ClanGuestMessageEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ClanMessage3",
            name = "Clan Message",
            description = "Display clan messages",
            section = custom3ChatSection,
            position = 16
    )
    default boolean Custom3ClanMessageEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Combat3",
            name = "Combat",
            description = "Display combat messages",
            section = custom3ChatSection,
            position = 17
    )
    default boolean Custom3CombatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Console3",
            name = "Console",
            description = "Display console messages",
            section = custom3ChatSection,
            position = 18
    )
    default boolean Custom3ConsoleEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Dialog3",
            name = "Dialog",
            description = "Display dialog messages",
            section = custom3ChatSection,
            position = 19
    )
    default boolean Custom3DialogEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Engine3",
            name = "Engine",
            description = "Display engine messages",
            section = custom3ChatSection,
            position = 20
    )
    default boolean Custom3EngineEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "FriendNotification3",
            name = "Friend Notification",
            description = "Display friend notifications",
            section = custom3ChatSection,
            position = 21
    )
    default boolean Custom3FriendNotificationEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "FriendsChat3",
            name = "Friends Chat",
            description = "Display friends chat messages",
            section = custom3ChatSection,
            position = 22
    )
    default boolean Custom3FriendsChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "FriendsChatNotification3",
            name = "Friends Chat Notification",
            description = "Display friends chat notifications",
            section = custom3ChatSection,
            position = 23
    )
    default boolean Custom3FriendsChatNotificationEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "GameMessage3",
            name = "Game Message",
            description = "Display game messages",
            section = custom3ChatSection,
            position = 24
    )
    default boolean Custom3GameMessageEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "IgnoreNotification3",
            name = "Ignore Notification",
            description = "Display ignore notifications",
            section = custom3ChatSection,
            position = 25
    )
    default boolean Custom3IgnoreNotificationEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ItemExamine3",
            name = "Item Examine",
            description = "Display item examine messages",
            section = custom3ChatSection,
            position = 26
    )
    default boolean Custom3ItemExamineEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Mesbox3",
            name = "Mesbox",
            description = "Display Mesbox messages",
            section = custom3ChatSection,
            position = 27
    )
    default boolean Custom3MesboxEnabled()
    {
        return false;
    }
    
    @ConfigItem(
            keyName = "ModAutoTyper3",
            name = "Mod Auto Typer",
            description = "Display mod auto-typer messages",
            section = custom3ChatSection,
            position = 27
    )
    default boolean Custom3ModAutoTyperEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ModChat3",
            name = "Mod Chat",
            description = "Display mod chat messages",
            section = custom3ChatSection,
            position = 28
    )
    default boolean Custom3ModChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ModPrivateChat3",
            name = "Mod Private Chat",
            description = "Display mod private chat messages",
            section = custom3ChatSection,
            position = 29
    )
    default boolean Custom3ModPrivateChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "NpcExamine3",
            name = "NPC Examine",
            description = "Display NPC examine messages",
            section = custom3ChatSection,
            position = 30
    )
    default boolean Custom3NpcExamineEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "NpcSay3",
            name = "NPC Say",
            description = "Display NPC Say messages",
            section = custom3ChatSection,
            position = 30
    )
    default boolean Custom3NpcSayEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "ObjectExamine3",
            name = "Object Examine",
            description = "Display object examine messages",
            section = custom3ChatSection,
            position = 31
    )
    default boolean Custom3ObjectExamineEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "PrivateChat3",
            name = "Private Chat",
            description = "Display private chat messages",
            section = custom3ChatSection,
            position = 32
    )
    default boolean Custom3PrivateChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "PrivateChatout3",
            name = "Private Chat Out",
            description = "Display private chat out messages",
            section = custom3ChatSection,
            position = 33
    )
    default boolean Custom3PrivateChatoutEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "PublicChat3",
            name = "Public Chat",
            description = "Display public chat messages",
            section = custom3ChatSection,
            position = 34
    )
    default boolean Custom3PublicChatEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Spam3",
            name = "Spam",
            description = "Display spam messages",
            section = custom3ChatSection,
            position = 35
    )
    default boolean Custom3SpamEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Trade3",
            name = "Trade",
            description = "Display trade messages",
            section = custom3ChatSection,
            position = 36
    )
    default boolean Custom3TradeEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "TradeReq3",
            name = "Trade Req",
            description = "Display trade request messages",
            section = custom3ChatSection,
            position = 37
    )
    default boolean Custom3TradeReqEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "TradeSent3",
            name = "Trade Sent",
            description = "Display trade sent messages",
            section = custom3ChatSection,
            position = 38
    )
    default boolean Custom3TradeSentEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Unknown3",
            name = "Unknown",
            description = "Display 'unknown' chat channel",
            section = custom3ChatSection,
            position = 39
    )
    default boolean Custom3UnknownEnabled()
    {
        return false;
    }

    @ConfigItem(
            keyName = "Welcome3",
            name = "Welcome",
            description = "Display welcome messages",
            section = custom3ChatSection,
            position = 40
    )
    default boolean Custom3WelcomeEnabled()
    {
        return false;
    }
}
