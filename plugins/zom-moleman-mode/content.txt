package com.zom.molemanmode;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;

@ConfigGroup(MolemanModeConfig.MOLEMAN_MODE_CONFIGGROUP)
public interface MolemanModeConfig extends Config
{
	String MOLEMAN_MODE_CONFIGGROUP = "molemanmode";
	
	String spentTicks = "spentTicks";

	@ConfigItem(
		keyName = "showOverlay",
		name = "Show Overlay",
		description = "Enable Overlay",
		position = 1
	)
	default boolean showOverlay()
	{
		return true;
	}

	@ConfigItem(
		keyName = "manualToggle",
		name = "Manual Toggle",
		description = "Forces the time tick into the opposite state that it’s currently in",
		position = 2
	)
	default boolean manualToggle()
	{
		return false;
	}

	@ConfigItem(
		keyName = "xpThreshold",
		name = "XP Threshold",
		description = "XP to gain before more time is added",
		position = 3
	)
	default int xpThreshold()
	{
		return 1000;
	}

	@ConfigItem(
		keyName = "timeEarnedPerThreshold",
		name = "XP Earned per Threshold",
		description = "This is the amount of time (in ticks) that the player earns to spend Above Ground",
		position = 4
	)
	default int timeEarnedPerThreshold()
	{
		return 100;
	}

	@ConfigItem(
		keyName = "timeWarning",
		name = "Time Warning Threshold",
		description = "When the player’s available time is below this threshold (in ticks), the available time value text’s colour is changed to red.",
		position = 5
	)
	default int timeWarningThreshold()
	{
		return 180;
	}

	@ConfigItem(
		keyName = "bonusTime",
		name = "Bonus time given",
		description = "This is the amount of time (in ticks) that the player can manually give themselves when starting the plugin for the first time.",
		position = 6
	)
	@Range(min = Integer.MIN_VALUE, max = Integer.MAX_VALUE)
	default int bonusTime()
	{
		return 0;
	}

	@ConfigSection(
		name = "Overwrites",
		description = "Overwrites Above/Below ground rules",
		position = 20
	)
	String overwriteSection = "overwrites";

	@ConfigItem(
		keyName = "whiteList",
		name = "Below ground regions",
		description = "Region IDs to not count down in",
		section = overwriteSection,
		position = 1
	)
	default String manualSafeAreas()
	{
		return "";
	}

	@ConfigItem(
		keyName = "blackList",
		name = "Above ground regions",
		description = "Region IDs to count down in",
		section = overwriteSection,
		position = 2

	)
	default String manualCountDownAreas()
	{
		return "";
	}

	@ConfigSection(
		name = "Overlays",
		description = "",
		position = 40
	)
	String overlaySection = "overlays";

	@ConfigItem(
		keyName = "formatTime",
		name = "Format Time",
		description = "Display HH:MM:SS",
		section = overlaySection,
		position = 1
	)
	default boolean formatTimer()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showRegion",
		name = "Show Region in overlay",
		description = "Region IDs display",
		section = overlaySection,
		position = 2

	)
	default boolean showRegion()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showAboveGround",
		name = "Show above ground status",
		description = "Show above ground status yes/no",
		section = overlaySection,
		position = 3

	)
	default boolean showAboveGround()
	{
		return true;
	}
}

package com.zom.molemanmode;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.time.Duration;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.LineComponent;

class MolemanModeOverlay extends OverlayPanel
{
	private final Client client;
	private final MolemanModePlugin plugin;

	@Inject
	private MolemanModeConfig config;

	@Inject
	private MolemanModeOverlay(Client client, MolemanModePlugin plugin, MolemanModeConfig config)
	{
		this.client = client;
		this.plugin = plugin;
		this.config = config;
		setPosition(OverlayPosition.TOP_LEFT);
		setPriority(OverlayPriority.MED);
	}

	@Override
	public Dimension render(Graphics2D graphics) {

		if (!plugin.isShowOverlay()) return null;

		boolean aboveGround = plugin.isAboveGround();
		long timeSpentAbove = plugin.getTicksSpentAboveGround();
		long timeAvailable = plugin.getTimeAvailable();
		long xpUntilMoreTime = plugin.getXpUntilNextThreshold();

		String formattedTimeAbove = plugin.isFormatTicksAsTime() ?
			formatTicksAsTime(timeSpentAbove) :
			addCommasToNumber(timeSpentAbove);

		String formattedTimeAvailable = plugin.isFormatTicksAsTime() ?
			formatTicksAsTime(timeAvailable) :
			addCommasToNumber(timeAvailable);

		String xpUntilMoreTimeStr = String.valueOf(xpUntilMoreTime);


		panelComponent.getChildren().add(LineComponent.builder()
			.left("XP Needed for more time: ")
			.right(xpUntilMoreTimeStr)
			.build());

		panelComponent.getChildren().add(LineComponent.builder()
			.left((plugin.isFormatTicksAsTime() ? "Time"  : "Ticks") + " spent above ground: ")
			.right(formattedTimeAbove)
			.build());

		panelComponent.getChildren().add(LineComponent.builder()
			.left((plugin.isFormatTicksAsTime() ? "Time"  : "Ticks") +" available above ground: ")
			.right(formattedTimeAvailable)
			.rightColor(plugin.getWarningCount() > timeAvailable ? Color.RED : Color.WHITE)
			.build());

		if (plugin.isShowAboveGroundState())
		{
			panelComponent.getChildren().add(LineComponent.builder()
				.left("Above ground: ")
				.right(aboveGround ? "Yes" : "No")
				.build());
		}


		if (plugin.isShowRegion())
		{
			panelComponent.getChildren().add(LineComponent.builder()
				.left("Region: ")
				.right(String.valueOf(client.getLocalPlayer().getWorldLocation().getRegionID()))
				.build());
		}

		return super.render(graphics);
	}

	private String addCommasToNumber(long number) {
		String input = Long.toString(number);
		StringBuilder output = new StringBuilder();
		for(int x = input.length() - 1; x >= 0; x--) {
			int lastPosition = input.length() - x - 1;
			if(lastPosition != 0 && lastPosition % 3 == 0) {
				output.append(",");
			}
			output.append(input.charAt(x));
		}
		return output.reverse().toString();
	}

	private String formatTicksAsTime(long number) {
		long ticksToTime = (long) (number * 0.6);
		Duration duration = Duration.ofSeconds(ticksToTime);

		long seconds = duration.getSeconds();
		long absSeconds = Math.abs(seconds);
		String positive = String.format(
			"%d:%02d:%02d",
			absSeconds / 3600,
			(absSeconds % 3600) / 60,
			absSeconds % 60);
		return seconds < 0 ? "-" + positive : positive;

	}
}

package com.zom.molemanmode;

import com.google.inject.Provides;
import java.util.HashSet;
import java.util.List;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;

@Slf4j
@PluginDescriptor(
	name = "Moleman Mode"
)
public class MolemanModePlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private MolemanModeConfig config;

	@Inject
	private ConfigManager configManager;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private MolemanModeOverlay overlay;

	private final HashSet<Integer> tutorialIslandRegionIds = new HashSet<Integer>();
	private final HashSet<Integer> whiteListRegionIds = new HashSet<Integer>();
	private final HashSet<Integer> blackListRegionIds = new HashSet<Integer>();

	@Getter
	private long timeAvailable;
	private String ticksSpentAboveGroundStr;
	@Getter
	private long ticksSpentAboveGround;
	@Getter
	private int warningCount;
	@Getter
	private boolean aboveGround;
	@Getter
	private boolean formatTicksAsTime;
	@Getter
	private boolean showRegion;
	@Getter
	private boolean showAboveGroundState;
	@Getter
	private long xpUntilNextThreshold;
	@Getter
	private boolean showOverlay;

	private boolean prevState;
	private boolean enabled;
	private WorldPoint lastPlayerLocation;


	@Override
	protected void startUp() throws Exception
	{
		// tutorial island
		whiteListRegionIds.add(12079);
		whiteListRegionIds.add(12080);
		whiteListRegionIds.add(12335);
		whiteListRegionIds.add(12336);
		whiteListRegionIds.add(12592);

		enabled = config.manualToggle();
		showOverlay = config.showOverlay();
		warningCount = config.timeWarningThreshold();
		formatTicksAsTime = config.formatTimer();
		showRegion = config.showRegion();
		showAboveGroundState = config.showAboveGround();

		aboveGround = false;
		prevState = false;

		updateWhitelist();
		updateBlackList();

		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		enabled = false;
		showOverlay = false;
		aboveGround = false;
		prevState = false;
		warningCount = -1;
		formatTicksAsTime = false;
		showRegion = false;
		showAboveGroundState = false;
		whiteListRegionIds.clear();
		blackListRegionIds.clear();
		overlayManager.remove(overlay);
		lastPlayerLocation = null;
	}

	@Provides
	MolemanModeConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(MolemanModeConfig.class);
	}

	@Subscribe
	public void onGameTick(GameTick gameTick) {
		if (client.getGameState() != GameState.LOGGED_IN) return;
		if (client.getLocalPlayer() == null) return;

		evaluateIfMoleMan();

		if (aboveGround) {
			ticksSpentAboveGround++;
		}

		updateTime();
	}

	boolean loggingIn;

	@Subscribe
	public void onGameStateChanged(GameStateChanged event) {
		switch (event.getGameState())
		{
			case LOGIN_SCREEN:
				aboveGround = false;
				if (lastPlayerLocation != null)
				{
					saveConfig();
				}
				ticksSpentAboveGround = 0;
				lastPlayerLocation = null;
				break;
			case LOGGING_IN:
				loggingIn = true;
				break;
			case LOGGED_IN:
				if (loggingIn)
				{
					loggingIn = false;
					onLogin();
				}
				break;
		}
	}

	private void onLogin()
	{
		loadConfig();
		WorldPoint newLocation = client.getLocalPlayer().getWorldLocation();
		assert newLocation != null;

		if (lastPlayerLocation == null) {
			lastPlayerLocation = newLocation;
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event) {

		if (MolemanModeConfig.MOLEMAN_MODE_CONFIGGROUP.equals(event.getGroup()))
		{
			String key = event.getKey();
			switch (key)
			{
				case "showOverlay":
					showOverlay = config.showOverlay();
					break;
				case "manualToggle":
					enabled = config.manualToggle();
					break;
				case "whiteList":
					updateWhitelist();
					break;
				case "blackList":
					updateBlackList();
					break;
				case "showRegion":
					showRegion = config.showRegion();
					break;
				case "formatTime":
					formatTicksAsTime = config.formatTimer();
					break;
				case "showAboveGround":
					showAboveGroundState = config.showAboveGround();
					break;
				case "timeWarning":
					warningCount = config.timeWarningThreshold();
					break;
			}
		}
	}

	private void saveConfig()
	{
		ticksSpentAboveGroundStr = String.valueOf(ticksSpentAboveGround);
		configManager.setConfiguration(MolemanModeConfig.MOLEMAN_MODE_CONFIGGROUP, MolemanModeConfig.spentTicks, ticksSpentAboveGroundStr);
	}

	private void loadConfig()
	{
		ticksSpentAboveGroundStr = configManager.getConfiguration(MolemanModeConfig.MOLEMAN_MODE_CONFIGGROUP, MolemanModeConfig.spentTicks);
		if (ticksSpentAboveGroundStr == null) {
			ticksSpentAboveGround = 0;
			log.info("Failed to load ticks above. Setting it to 0.");

		} else {
			ticksSpentAboveGround = Long.parseLong(ticksSpentAboveGroundStr);
			log.info("Loaded ticks spent above. Setting it to {}", ticksSpentAboveGroundStr);

		}
	}

	public void updateTime() {
		// start with this offset, we always get this
		int earnedSeconds = config.bonusTime();
		earnedSeconds += config.timeEarnedPerThreshold() * (client.getOverallExperience() / config.xpThreshold());
		timeAvailable = earnedSeconds - ticksSpentAboveGround;
		xpUntilNextThreshold = config.xpThreshold() - (client.getOverallExperience() % config.xpThreshold());
	}

	public void evaluateIfMoleMan() {
		final WorldPoint playerPos = client.getLocalPlayer().getWorldLocation();
		if (playerPos == null) return;
		final LocalPoint playerPosLocal = LocalPoint.fromWorld(client, playerPos);
		if (playerPosLocal == null) return;

		if (enabled)
		{
			aboveGround = false;
			return;
		}

		if (blackListRegionIds.contains(client.getLocalPlayer().getWorldLocation().getRegionID()))
		{
			aboveGround = true;
			log.debug("We are manually" + (aboveGround ? " above ground." : " below ground.") );
			return;
		}

		if (whiteListRegionIds.contains(client.getLocalPlayer().getWorldLocation().getRegionID()))
		{
			aboveGround = false;
			log.debug("We are manually" + (aboveGround ? " above ground." : " below ground.") );
			return;
		}

		if (tutorialIslandRegionIds.contains(client.getLocalPlayer().getWorldLocation().getRegionID()))
		{
			aboveGround = false;
			log.debug("We are manually" + (aboveGround ? " above ground." : " below ground.") );
			return;
		}

		int cutOff = 4000;
		int currentY = playerPos.getY();

		boolean aboveCutoff = cutOff > currentY;

		aboveGround = aboveCutoff;

		boolean isEqual = aboveGround == prevState;

		if (!isEqual)  {
			log.debug("We are" + (aboveGround ? " above ground." : " below ground.") );
		}

		prevState = aboveGround;
	}


	private void updateWhitelist()
	{
		whiteListRegionIds.clear();
		List<String> text = Text.fromCSV(config.manualSafeAreas());
		for (String id: text)
		{
			whiteListRegionIds.add(Integer.valueOf(id));
		}
	}

	private void updateBlackList()
	{
		blackListRegionIds.clear();
		List<String> text = Text.fromCSV(config.manualCountDownAreas());
		for (String id: text)
		{
			blackListRegionIds.add(Integer.valueOf(id));
		}
	}

	private boolean tryParseInt(String intToTry) {
		try
		{
			Integer.parseInt(intToTry);
		}
		catch (Exception e)
		{
			return false;
		}
		return true;
	}
}

package com.zom.molemanmode;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ExamplePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(MolemanModePlugin.class);
		RuneLite.main(args);
	}
}
