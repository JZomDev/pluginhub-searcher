package com.example;

import hsj.external.nexsoundreplacer.nexSoundReplacerPlugin;
import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ExamplePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(nexSoundReplacerPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2022, HSJ
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package hsj.external.nexsoundreplacer;

import com.google.inject.Provides;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Paths;
import javax.inject.Inject;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.FloatControl;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.events.AreaSoundEffectPlayed;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

@Slf4j
@PluginDescriptor(name = "Nex Sound Replacer")
public class nexSoundReplacerPlugin extends Plugin
{
	private static Clip teleportSound;

	@Inject
	private Client client;

	@Inject
	private nexSoundReplacerConfig config;

	@Override
	protected void startUp() throws Exception
	{
		teleportSound = generateSoundClip(config.soundFile(), config.soundVolume());
	}

	@Override
	protected void shutDown() throws Exception
	{
		teleportSound = null;
	}

	@Subscribe
	public void onAreaSoundEffectPlayed(AreaSoundEffectPlayed areaSoundEffectPlayed)
	{
		int soundId = areaSoundEffectPlayed.getSoundId();
		if (soundId == 5291 && teleportSound != null)
		{
			areaSoundEffectPlayed.consume();
			teleportSound.setFramePosition(0);
			teleportSound.start();
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (event.getGroup().equals("nexSoundReplacer"))
		{
			if (event.getKey().equals("teleportSoundFile"))
			{
				teleportSound = generateSoundClip(config.soundFile(), config.soundVolume());
			}

			if (event.getKey().equals("teleportSoundVolume"))
			{
				if (teleportSound != null)
				{
					FloatControl control = (FloatControl) teleportSound.getControl(FloatControl.Type.MASTER_GAIN);

					if (control != null)
					{
						control.setValue((float) (config.soundVolume() / 2 - 45));
					}

					teleportSound.setFramePosition(0);
					teleportSound.start();
				}
			}
		}
	}

	public Clip generateSoundClip(String soundFile, int volume)
	{
		Clip soundClip = null;
		AudioInputStream inputStream = null;
		try
		{
			URL url = Paths.get(soundFile).toUri().toURL();
			inputStream = AudioSystem.getAudioInputStream(url);
		}
		catch (UnsupportedAudioFileException | IOException e)
		{
			log.warn("Unable to create audio input stream: ", e);
		}

		if (inputStream == null)
		{
			return null;
		}

		try
		{
			soundClip = AudioSystem.getClip();
			soundClip.open(inputStream);
		}
		catch (LineUnavailableException | IOException e)
		{
			log.warn("Could not load sound file: ", e);
		}

		if (soundClip == null)
		{
			return null;
		}

		FloatControl control = (FloatControl) soundClip.getControl(FloatControl.Type.MASTER_GAIN);
		control.setValue((float) (volume / 2 - 45));

		return soundClip;
	}

	@Provides
	nexSoundReplacerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(nexSoundReplacerConfig.class);
	}
}

/*
 * Copyright (c) 2022, HSJ
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package hsj.external.nexsoundreplacer;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;

@ConfigGroup("nexSoundReplacer")
public interface nexSoundReplacerConfig extends Config
{
	@ConfigSection(
		name = "Teleport",
		description = "Teleport sound settings",
		position = 1,
		closedByDefault = false
	)
	String teleport = "teleportSection";

	@ConfigItem(
		keyName = "teleportSoundFile",
		name = "Sound file",
		description = "Specify a path to a .wav sound file you would like for the teleport sound effect.",
		position = 0,
		section = teleport
	)
	default String soundFile()
	{
		return "";
	}

	@Range(max = 100)
	@ConfigItem(
		name = "Volume",
		keyName = "teleportSoundVolume",
		description = "Sets the volume of the sound clip",
		position = 1,
		section = teleport
	)
	default int soundVolume()
	{
		return 50;
	}
}

