package com.invalidmovement;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class InvalidMovementPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(InvalidMovementPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2020, Pratted <https://github.com/Pratted>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.invalidmovement;

import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.api.CollisionDataFlag;

import java.util.Arrays;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * An enum that binds a name to each movement flag.
 *
 * @see CollisionDataFlag
 */
@AllArgsConstructor
enum MovementFlag
{
	BLOCK_MOVEMENT_NORTH_WEST(CollisionDataFlag.BLOCK_MOVEMENT_NORTH_WEST),
	BLOCK_MOVEMENT_NORTH(CollisionDataFlag.BLOCK_MOVEMENT_NORTH),
	BLOCK_MOVEMENT_NORTH_EAST(CollisionDataFlag.BLOCK_MOVEMENT_NORTH_EAST),
	BLOCK_MOVEMENT_EAST(CollisionDataFlag.BLOCK_MOVEMENT_EAST),
	BLOCK_MOVEMENT_SOUTH_EAST(CollisionDataFlag.BLOCK_MOVEMENT_SOUTH_EAST),
	BLOCK_MOVEMENT_SOUTH(CollisionDataFlag.BLOCK_MOVEMENT_SOUTH),
	BLOCK_MOVEMENT_SOUTH_WEST(CollisionDataFlag.BLOCK_MOVEMENT_SOUTH_WEST),
	BLOCK_MOVEMENT_WEST(CollisionDataFlag.BLOCK_MOVEMENT_WEST),

	BLOCK_MOVEMENT_OBJECT(CollisionDataFlag.BLOCK_MOVEMENT_OBJECT),
	BLOCK_MOVEMENT_FLOOR_DECORATION(CollisionDataFlag.BLOCK_MOVEMENT_FLOOR_DECORATION),
	BLOCK_MOVEMENT_FLOOR(CollisionDataFlag.BLOCK_MOVEMENT_FLOOR),
	BLOCK_MOVEMENT_FULL(CollisionDataFlag.BLOCK_MOVEMENT_FULL);

	@Getter
	private int flag;

	/**
	 * @param collisionData The tile collision flags.
	 * @return The set of {@link MovementFlag}s that have been set.
	 */
	public static Set<MovementFlag> getSetFlags(int collisionData)
	{
		return Arrays.stream(values())
			.filter(movementFlag -> (movementFlag.flag & collisionData) != 0)
			.collect(Collectors.toSet());
	}
}

package com.invalidmovement;

import com.google.inject.Inject;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.Area;
import java.util.Set;
import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.api.Tile;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.worldmap.WorldMapOverlay;

class InvalidMovementMapOverlay extends Overlay
{
	private final Client client;
	private final InvalidMovementConfig config;

	@Inject
	private WorldMapOverlay worldMapOverlay;

	@Inject
	InvalidMovementMapOverlay(Client client, InvalidMovementConfig config)
	{
		this.client = client;
		this.config = config;

		setPosition(OverlayPosition.DYNAMIC);
		setPriority(Overlay.PRIORITY_LOW);
		setLayer(OverlayLayer.MANUAL);
		drawAfterLayer(ComponentID.WORLD_MAP_MAPVIEW);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (config.showWorldMap() && client.getWidget(ComponentID.WORLD_MAP_MAPVIEW) != null)
		{
			renderWorldMap(graphics);
		}

		return null;
	}

	private void renderWorldMap(Graphics2D graphics)
	{
		final Rectangle bounds = client.getWidget(ComponentID.WORLD_MAP_MAPVIEW).getBounds();
		if (bounds == null)
		{
			return;
		}
		final Area mapClipArea = getWorldMapClipArea(bounds);

		if (client.getLocalPlayer() == null)
		{
			return;
		}

		final LocalPoint playerLocation = client.getLocalPlayer().getLocalLocation();
		final int playerX = playerLocation.getSceneX();
		final int playerY = playerLocation.getSceneY();
		final int radius = config.radiusWorldMap() < 0 ? Integer.MAX_VALUE / 2 : config.radiusWorldMap();

		if (client.getCollisionMaps() == null)
		{
			return;
		}

		final int z = client.getPlane();

		final int[][] flags = client.getCollisionMaps()[z].getFlags();

		final Tile[][] tiles = client.getScene().getTiles()[z];

		final int startX = Math.max(playerX - radius, 0);
		final int endX = Math.min(playerX + radius, tiles[0].length);
		final int startY = Math.max(playerY - radius, 0);
		final int endY = Math.min(playerY + radius, tiles.length);

		for (int y = startY; y < endY; y++)
		{
			for (int x = startX; x < endX; x++)
			{
				Tile tile = tiles[x][y];
				if (tile == null)
				{
					continue;
				}

				final WorldPoint worldPoint = tile.getWorldLocation();

				final int data = flags[tile.getSceneLocation().getX()][tile.getSceneLocation().getY()];

				final Set<MovementFlag> movementFlags = MovementFlag.getSetFlags(data);

				if (movementFlags.contains(MovementFlag.BLOCK_MOVEMENT_FLOOR))
				{
					drawSquare(graphics, worldPoint, config.colourFloor(), mapClipArea);
				}

				if (movementFlags.contains(MovementFlag.BLOCK_MOVEMENT_OBJECT))
				{
					drawSquare(graphics, worldPoint, config.colourObject(), mapClipArea);
				}

				if (tile.getWallObject() != null)
				{
					if (movementFlags.contains(MovementFlag.BLOCK_MOVEMENT_SOUTH))
					{
						drawWall(graphics, worldPoint, config.colourWall(), mapClipArea, 0, 1, 1, 0);
					}
					if (movementFlags.contains(MovementFlag.BLOCK_MOVEMENT_WEST))
					{
						drawWall(graphics, worldPoint, config.colourWall(), mapClipArea, 0, 0, 0, 1);
					}
					if (movementFlags.contains(MovementFlag.BLOCK_MOVEMENT_NORTH))
					{
						drawWall(graphics, worldPoint, config.colourWall(), mapClipArea, 0, 0, 1, 0);
					}
					if (movementFlags.contains(MovementFlag.BLOCK_MOVEMENT_EAST))
					{
						drawWall(graphics, worldPoint, config.colourWall(), mapClipArea, 1, 0, 0, 1);
					}
				}
			}
		}
	}

	private void drawSquare(Graphics2D graphics, WorldPoint point, Color color, Area mapClipArea)
	{
		final Point start = worldMapOverlay.mapWorldPointToGraphicsPoint(point);
		final Point end = worldMapOverlay.mapWorldPointToGraphicsPoint(point.dx(1).dy(-1));

		if (start == null || end == null)
		{
			return;
		}

		int x = start.getX();
		int y = start.getY();
		final int width = end.getX() - x;
		final int height = end.getY() - y;
		x -= width / 2;
		if (!mapClipArea.contains(x, y))
		{
			return;
		}
		y -= height / 2;

		graphics.setColor(color);
		graphics.fillRect(x, y, width, height);
	}

	private void drawWall(Graphics2D graphics, WorldPoint point, Color color, Area mapClipArea,
		int dx1, int dy1, int dx2, int dy2)
	{
		final Point start = worldMapOverlay.mapWorldPointToGraphicsPoint(point);
		final Point end = worldMapOverlay.mapWorldPointToGraphicsPoint(point.dx(1).dy(-1));

		if (start == null || end == null)
		{
			return;
		}

		int x = start.getX();
		int y = start.getY();
		int width = end.getX() - x - 1;
		int height = end.getY() - y - 1;
		x -= width / 2;
		if (!mapClipArea.contains(x, y))
		{
			return;
		}
		y -= height / 2;

		int a = (width % 2 == 0) ? 1 : 0;
		int b = (height % 2 == 0) ? 1 : 0;

		x += dx1 * width - 1 + a;
		y += dy1 * height - 1 + b;

		width *= dx2;
		height *= dy2;

		graphics.setColor(color);
		graphics.drawLine(x, y, x + width, y + height);
	}

	private Area getWorldMapClipArea(Rectangle baseRectangle)
	{
		final Widget overview = client.getWidget(ComponentID.WORLD_MAP_OVERVIEW_MAP);
		final Widget surfaceSelector = client.getWidget(ComponentID.WORLD_MAP_SURFACE_SELECTOR);

		Area clipArea = new Area(baseRectangle);

		if (overview != null && !overview.isHidden())
		{
			clipArea.subtract(new Area(overview.getBounds()));
		}

		if (surfaceSelector != null && !surfaceSelector.isHidden())
		{
			clipArea.subtract(new Area(surfaceSelector.getBounds()));
		}

		return clipArea;
	}
}

package com.invalidmovement;

import com.google.inject.Inject;
import java.awt.BasicStroke;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.geom.GeneralPath;
import java.util.Set;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.Tile;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

class InvalidMovementSceneOverlay extends Overlay
{
	private static final int LOCAL_TILE_SIZE = Perspective.LOCAL_TILE_SIZE;
	private static final int MAX_DRAW_DISTANCE = 32;

	private final Client client;
	private final InvalidMovementConfig config;

	@Inject
	public InvalidMovementSceneOverlay(Client client, InvalidMovementConfig config)
	{
		this.client = client;
		this.config = config;

		setPosition(OverlayPosition.DYNAMIC);
		setPriority(Overlay.PRIORITY_LOW);
		setLayer(OverlayLayer.ABOVE_SCENE);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (config.showScene())
		{
			renderScene(graphics);
		}
		return null;
	}

	private void renderScene(Graphics2D graphics)
	{
		if (client.getLocalPlayer() == null)
		{
			return;
		}

		final LocalPoint playerLocation = client.getLocalPlayer().getLocalLocation();
		final int playerX = playerLocation.getSceneX();
		final int playerY = playerLocation.getSceneY();
		final int radius = config.radiusScene() < 0 ? Integer.MAX_VALUE / 2 : config.radiusScene();

		if (client.getCollisionMaps() == null)
		{
			return;
		}

		final BasicStroke borderStroke = new BasicStroke((float) config.wallWidth());

		final int z = client.getPlane();

		final int[][] flags = client.getCollisionMaps()[z].getFlags();

		final Tile[][] tiles = client.getScene().getTiles()[z];

		final int startX = Math.max(playerX - radius, 0);
		final int endX = Math.min(playerX + radius, tiles[0].length);
		final int startY = Math.max(playerY - radius, 0);
		final int endY = Math.min(playerY + radius, tiles.length);

		for (int y = startY; y < endY; y++)
		{
			for (int x = startX; x < endX; x++)
			{
				Tile tile = tiles[x][y];
				if (tile == null)
				{
					continue;
				}

				final LocalPoint localPoint = tile.getLocalLocation();
				if (localPoint == null)
				{
					continue;
				}

				final Polygon poly = Perspective.getCanvasTilePoly(client, localPoint);
				if (poly == null)
				{
					continue;
				}

				final int data = flags[tile.getSceneLocation().getX()][tile.getSceneLocation().getY()];

				final Set<MovementFlag> movementFlags = MovementFlag.getSetFlags(data);

				graphics.setStroke(borderStroke);

				if (movementFlags.contains(MovementFlag.BLOCK_MOVEMENT_FLOOR))
				{
					graphics.setColor(config.colourFloor());
					graphics.fill(poly);
				}

				if (movementFlags.contains(MovementFlag.BLOCK_MOVEMENT_OBJECT))
				{
					graphics.setColor(config.colourObject());
					graphics.fill(poly);
				}

				if (tile.getWallObject() != null)
				{
					final GeneralPath path = new GeneralPath();

					graphics.setColor(config.colourWall());

					if (movementFlags.contains(MovementFlag.BLOCK_MOVEMENT_SOUTH))
					{
						drawWall(path, localPoint.getX(), localPoint.getY(), z, LOCAL_TILE_SIZE, 0);
					}
					if (movementFlags.contains(MovementFlag.BLOCK_MOVEMENT_WEST))
					{
						drawWall(path, localPoint.getX(), localPoint.getY(), z, 0, LOCAL_TILE_SIZE);
					}
					if (movementFlags.contains(MovementFlag.BLOCK_MOVEMENT_NORTH))
					{
						drawWall(path, localPoint.getX(), localPoint.getY() + LOCAL_TILE_SIZE, z, LOCAL_TILE_SIZE, 0);
					}
					if (movementFlags.contains(MovementFlag.BLOCK_MOVEMENT_EAST))
					{
						drawWall(path, localPoint.getX() + LOCAL_TILE_SIZE, localPoint.getY(), z, 0, LOCAL_TILE_SIZE);
					}

					graphics.draw(path);
				}
			}
		}
	}

	private void drawWall(final GeneralPath path, int x, int y, int z, int dx, int dy)
	{
		final boolean hasFirst = moveTo(path, x, y, z);

		x += dx;
		y += dy;

		if (hasFirst)
		{
			lineTo(path, x, y, z);
		}
	}

	private boolean moveTo(final GeneralPath path, final int x, final int y, final int z)
	{
		Point point = XYToPoint(x, y, z);
		if (point != null)
		{
			path.moveTo(point.getX(), point.getY());
			return true;
		}
		return false;
	}

	private void lineTo(final GeneralPath path, final int x, final int y, final int z)
	{
		Point point = XYToPoint(x, y, z);
		if (point != null)
		{
			path.lineTo(point.getX(), point.getY());
		}
	}

	private Point XYToPoint(final int x, final int y, final int z)
	{
		return Perspective.localToCanvas(
			client,
			new LocalPoint(x - LOCAL_TILE_SIZE / 2, y - LOCAL_TILE_SIZE / 2),
			z);
	}
}

package com.invalidmovement;

import com.google.inject.Inject;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import static net.runelite.api.Perspective.UNIT;
import net.runelite.api.Point;
import net.runelite.api.SpriteID;
import net.runelite.api.Tile;
import net.runelite.api.Varbits;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

class InvalidMovementMinimapOverlay extends Overlay
{
	private final Client client;
	private final InvalidMovementConfig config;

	@Inject
	private SpriteManager spriteManager;

	private BufferedImage minimapSpriteFixed;
	private BufferedImage minimapSpriteResizeable;
	private Shape minimapClipFixed;
	private Shape minimapClipResizeable;
	private Rectangle minimapRectangle = new Rectangle();

	@Inject
	InvalidMovementMinimapOverlay(Client client, InvalidMovementConfig config)
	{
		this.client = client;
		this.config = config;

		setPosition(OverlayPosition.DYNAMIC);
		setPriority(Overlay.PRIORITY_LOW);
		setLayer(OverlayLayer.ABOVE_WIDGETS);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (config.showMinimap())
		{
			renderMinimap(graphics);
		}
		return null;
	}

	private void renderMinimap(Graphics2D graphics)
	{
		if (client.getLocalPlayer() == null)
		{
			return;
		}

		final LocalPoint playerLocation = client.getLocalPlayer().getLocalLocation();
		final int playerX = playerLocation.getSceneX();
		final int playerY = playerLocation.getSceneY();
		final int radius = config.radiusMinimap() < 0 ? Integer.MAX_VALUE / 2 : config.radiusMinimap();

		if (client.getCollisionMaps() == null)
		{
			return;
		}

		Shape minimapClipArea = getMinimapClipArea();
		if (minimapClipArea == null)
		{
			return;
		}
		graphics.setClip(minimapClipArea);

		final int z = client.getPlane();

		final int[][] flags = client.getCollisionMaps()[z].getFlags();

		final Tile[][] tiles = client.getScene().getTiles()[z];

		final int startX = Math.max(playerX - radius, 0);
		final int endX = Math.min(playerX + radius, tiles[0].length);
		final int startY = Math.max(playerY - radius, 0);
		final int endY = Math.min(playerY + radius, tiles.length);

		for (int y = startY; y < endY; y++)
		{
			for (int x = startX; x < endX; x++)
			{
				Tile tile = tiles[x][y];
				if (tile == null)
				{
					continue;
				}

				final LocalPoint localPoint = tile.getLocalLocation();
				if (localPoint == null)
				{
					continue;
				}

				final Point posOnMinimap = Perspective.localToMinimap(client, localPoint);
				if (posOnMinimap == null)
				{
					continue;
				}

				final int data = flags[tile.getSceneLocation().getX()][tile.getSceneLocation().getY()];

				final Set<MovementFlag> movementFlags = MovementFlag.getSetFlags(data);

				if (movementFlags.contains(MovementFlag.BLOCK_MOVEMENT_FLOOR))
				{
					drawSquare(graphics, posOnMinimap, config.colourFloor());
				}

				if (movementFlags.contains(MovementFlag.BLOCK_MOVEMENT_OBJECT))
				{
					drawSquare(graphics, posOnMinimap, config.colourObject());
				}

				if (tile.getWallObject() != null)
				{
					final double angle = (client.getCameraYawTarget() & 0x7FF) * UNIT;
					final GeneralPath path = new GeneralPath();

					graphics.setColor(config.colourWall());
					graphics.rotate(angle, posOnMinimap.getX(), posOnMinimap.getY());

					if (movementFlags.contains(MovementFlag.BLOCK_MOVEMENT_SOUTH))
					{
						drawWall(path, posOnMinimap, 0, 1, 1, 0);
					}
					if (movementFlags.contains(MovementFlag.BLOCK_MOVEMENT_WEST))
					{
						drawWall(path, posOnMinimap, 0, 0, 0, 1);
					}
					if (movementFlags.contains(MovementFlag.BLOCK_MOVEMENT_NORTH))
					{
						drawWall(path, posOnMinimap, 0, 0, 1, 0);
					}
					if (movementFlags.contains(MovementFlag.BLOCK_MOVEMENT_EAST))
					{
						drawWall(path, posOnMinimap, 1, 0, 0, 1);
					}

					graphics.draw(path);
					graphics.rotate(-angle, posOnMinimap.getX(), posOnMinimap.getY());
				}
			}
		}
	}

	private void drawSquare(Graphics2D graphics, Point center, Color color)
	{
		final int x = center.getX();
		final int y = center.getY();
		final double angle = (client.getCameraYawTarget() & 0x7FF) * UNIT;

		final int width = (int) client.getMinimapZoom();
		final int height = (int) client.getMinimapZoom();

		final int a = (width % 2 == 0) ? 1 : 0;
		final int b = (height % 2 == 0)? 1 : 2;

		graphics.setColor(color);
		graphics.rotate(angle, x, y);
		graphics.fillRect(x - width / 2 + a, y - height / 2 - b, width, height);
		graphics.rotate(-angle , x, y);
	}

	private void drawWall(GeneralPath path, Point center, int dx1, int dy1, int dx2, int dy2)
	{
		final int centerX = center.getX();
		final int centerY = center.getY();

		final int width = (int) client.getMinimapZoom() - 1;
		final int height = (int) client.getMinimapZoom() - 1;

		int x = centerX - width / 2;
		int y = centerY - height;

		x += dx1 * width;
		y += dy1 * height;

		path.moveTo(x, y);

		x += dx2 * width;
		y += dy2 * height;

		path.lineTo(x, y);
	}

	private Shape getMinimapClipArea()
	{
		Widget minimapWidget = getMinimapDrawWidget();

		if (minimapWidget == null || minimapWidget.isHidden() || !minimapRectangle.equals(minimapRectangle = minimapWidget.getBounds()))
		{
			minimapClipFixed = null;
			minimapClipResizeable = null;
			minimapSpriteFixed = null;
			minimapSpriteResizeable = null;
		}

		if (client.isResized())
		{
			if (minimapClipResizeable != null)
			{
				return minimapClipResizeable;
			}
			if (minimapSpriteResizeable == null)
			{
				minimapSpriteResizeable = spriteManager.getSprite(SpriteID.RESIZEABLE_MODE_MINIMAP_ALPHA_MASK, 0);
			}
			if (minimapSpriteResizeable != null)
			{
				return minimapClipResizeable = bufferedImageToPolygon(minimapSpriteResizeable);
			}
			return getMinimapClipAreaSimple();
		}
		if (minimapClipFixed != null)
		{
			return minimapClipFixed;
		}
		if (minimapSpriteFixed == null)
		{
			minimapSpriteFixed = spriteManager.getSprite(SpriteID.FIXED_MODE_MINIMAP_ALPHA_MASK, 0);
		}
		if (minimapSpriteFixed != null)
		{
			return minimapClipFixed = bufferedImageToPolygon(minimapSpriteFixed);
		}
		return getMinimapClipAreaSimple();
	}

	private Widget getMinimapDrawWidget()
	{
		if (client.isResized())
		{
			if (client.getVarbitValue(Varbits.SIDE_PANELS) == 1)
			{
				return client.getWidget(ComponentID.RESIZABLE_VIEWPORT_BOTTOM_LINE_MINIMAP_DRAW_AREA);
			}
			return client.getWidget(ComponentID.RESIZABLE_VIEWPORT_MINIMAP_DRAW_AREA);
		}
		return client.getWidget(ComponentID.FIXED_VIEWPORT_MINIMAP_DRAW_AREA);
	}

	private Shape getMinimapClipAreaSimple()
	{
		Widget minimapDrawArea = getMinimapDrawWidget();

		if (minimapDrawArea == null || minimapDrawArea.isHidden())
		{
			return null;
		}

		Rectangle bounds = minimapDrawArea.getBounds();

		return new Ellipse2D.Double(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight());
	}

	private Polygon bufferedImageToPolygon(BufferedImage image)
	{
		int outsideColour = -1;
		int previousColour;
		final int width = image.getWidth();
		final int height = image.getHeight();
		List<java.awt.Point> points = new ArrayList<>();
		for (int y = 0; y < height; y++)
		{
			previousColour = outsideColour;
			for (int x = 0; x < width; x++)
			{
				int colour = image.getRGB(x, y);
				if (x == 0 && y == 0)
				{
					outsideColour = colour;
					previousColour = colour;
				}
				if (colour != outsideColour && previousColour == outsideColour)
				{
					points.add(new java.awt.Point(x, y));
				}
				if ((colour == outsideColour || x == (width - 1)) && previousColour != outsideColour)
				{
					points.add(0, new java.awt.Point(x, y));
				}
				previousColour = colour;
			}
		}
		int offsetX = 0;
		int offsetY = 0;
		Widget minimapDrawWidget = getMinimapDrawWidget();
		if (minimapDrawWidget != null)
		{
			offsetX = minimapDrawWidget.getBounds().x;
			offsetY = minimapDrawWidget.getBounds().y;
		}
		Polygon polygon = new Polygon();
		for (java.awt.Point point : points)
		{
			polygon.addPoint(point.x + offsetX, point.y + offsetY);
		}
		return polygon;
	}
}

package com.invalidmovement;

import com.google.inject.Inject;
import com.google.inject.Provides;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@PluginDescriptor(
	name = "Invalid Movement",
	description = "Display invalid movement blocked tiles",
	tags = {"invalid", "blocked", "movement", "tile", "flags"}
)
public class InvalidMovementPlugin extends Plugin
{
	@Inject
	private InvalidMovementMapOverlay mapOverlay;

	@Inject
	private InvalidMovementSceneOverlay sceneOverlay;

	@Inject
	private InvalidMovementMinimapOverlay minimapOverlay;

	@Inject
	private OverlayManager overlayManager;

	@Provides
	InvalidMovementConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(InvalidMovementConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(mapOverlay);
		overlayManager.add(sceneOverlay);
		overlayManager.add(minimapOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(mapOverlay);
		overlayManager.remove(sceneOverlay);
		overlayManager.remove(minimapOverlay);
	}
}

package com.invalidmovement;

import java.awt.Color;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;

@ConfigGroup("invalidmovement")
public interface InvalidMovementConfig extends Config
{
	@ConfigSection(
		name = "Display options",
		description = "Options for displaying invalid movement",
		position = 0
	)
	String sectionDisplay = "sectionDisplay";

	@ConfigItem(
		keyName = "showScene",
		name = "Show in scene",
		description = "Show the invalid movement blocking tiles in the game scene",
		position = 1,
		section = sectionDisplay
	)
	default boolean showScene()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showMinimap",
		name = "Show on minimap",
		description = "Show the invalid movement blocking tiles on the minimap",
		position = 2,
		section = sectionDisplay
	)
	default boolean showMinimap()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showWorldMap",
		name = "Show on world map",
		description = "Show the invalid movement blocking tiles on the world map",
		position = 3,
		section = sectionDisplay
	)
	default boolean showWorldMap()
	{
		return true;
	}

	@ConfigSection(
		name = "Radius options",
		description = "Options for radius of displaying invalid movement",
		position = 4
	)
	String sectionRadius = "sectionRadius";

	@Range(
		min = -1
	)
	@ConfigItem(
		keyName = "radiusScene",
		name = "Scene radius",
		description = "The radius in number of tiles around the player in which the<br>"
			+ "invalid movement blocking tiles are shown in the game scene.<br>"
			+ "Use -1 to show everything and not restrict to a radius.",
		position = 5,
		section = sectionRadius
	)
	default int radiusScene()
	{
		return 25;
	}

	@Range(
		min = -1
	)
	@ConfigItem(
		keyName = "radiusMinimap",
		name = "Minimap radius",
		description = "The radius in number of tiles around the player in which the<br>"
			+ "invalid movement blocking tiles are shown on the minimap.<br>"
			+ "Use -1 to show everything and not restrict to a radius.",
		position = 6,
		section = sectionRadius
	)
	default int radiusMinimap()
	{
		return -1;
	}

	@Range(
		min = -1
	)
	@ConfigItem(
		keyName = "radiusWorldMap",
		name = "World map radius",
		description = "The radius in number of tiles around the player in which the<br>"
			+ "invalid movement blocking tiles are shown on the world map.<br>"
			+ "Use -1 to show everything and not restrict to a radius.",
		position = 7,
		section = sectionRadius
	)
	default int radiusWorldMap()
	{
		return -1;
	}

	@ConfigSection(
		name = "Colour options",
		description = "Options for colouring the different invalid movement tiles",
		position = 8
	)
	String sectionColours = "sectionColours";

	@Alpha
	@ConfigItem(
		keyName = "colourFloor",
		name = "Floor colour",
		description = "Colour for invalid movement floor tiles",
		position = 9,
		section = sectionColours
	)
	default Color colourFloor()
	{
		return new Color(255, 0, 255, 127);
	}

	@Alpha
	@ConfigItem(
		keyName = "colourObject",
		name = "Object colour",
		description = "Colour for invalid movement object tiles",
		position = 10,
		section = sectionColours
	)
	default Color colourObject()
	{
		return new Color(255, 0, 0, 127);
	}

	@Alpha
	@ConfigItem(
		keyName = "colourWall",
		name = "Wall colour",
		description = "Colour for invalid movement wall tiles",
		position = 11,
		section = sectionColours
	)
	default Color colourWall()
	{
		return new Color(255, 255, 0, 127);
	}

	@ConfigItem(
		keyName = "wallWidth",
		name = "Wall width",
		description = "Invalid movement blocking wall width",
		position = 12
	)
	default int wallWidth()
	{
		return 2;
	}
}

