package com.dialouge_extractor;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DialogueExtractorPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(DialogueExtractorPlugin.class);
		RuneLite.main(args);
	}
}
package com.dialouge_extractor;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.events.GameTick;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;

import javax.inject.Inject;
import javax.inject.Singleton;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

@Slf4j
@Singleton
public class DialogueExtractorPanel extends PluginPanel {

    private final List<CustomWidgetInfo> messageInfos;
    private final List<CustomWidgetInfo> optionsInfos;
    private final List<CustomWidgetInfo> allInfos;
    private final JLabel uiLabel = new JLabel("Open a dialogue box.");
    private final JLabel serverLabel = new JLabel("Open the dialogue editor.");
    private final Client client;
    private final DialogueExtractorPlugin plugin;
    private JButton[] buttons = new JButton[0];
    private Widget lastWidget;
    private String lastText = "";
    private boolean shiftPressed;
    private boolean ctrlPressed;


    @Inject
    public DialogueExtractorPanel(Client client, DialogueExtractorPlugin plugin) {
        super();
        this.messageInfos = Arrays.asList(CustomWidgetInfo.DIALOG_NPC_TEXT, CustomWidgetInfo.DIALOG_PLAYER_TEXT, CustomWidgetInfo.DIALOG_SPRITE_TEXT, CustomWidgetInfo.DIALOG_SPRITE_DOUBLE_TEXT, CustomWidgetInfo.DIALOG_CHATBOX_MESSAGE);
        this.optionsInfos = Arrays.asList(CustomWidgetInfo.DIALOG_OPTION_OPTIONS);
        List<CustomWidgetInfo> allList = new ArrayList<>();
        allList.addAll(messageInfos);
        allList.addAll(optionsInfos);
        this.allInfos = allList;
        this.client = client;
        this.plugin = plugin;

        setBorder(new EmptyBorder(6, 6, 6, 6));
        setBackground(ColorScheme.DARK_GRAY_COLOR);

        setLayout(new GridLayout(10, 1));

        serverLabel.setForeground(Color.WHITE);
        uiLabel.setForeground(Color.WHITE);
        setVisible(true);


        add(serverLabel);
        add(uiLabel);
    }

    private String replace(String dialogue) {
        String username = client.getLocalPlayer().getName();
        dialogue = dialogue.replaceAll(username, plugin.getConfig().usernameToken());
        if (plugin.getConfig().newline()) {
            dialogue = dialogue.replace("<br>", "\n");
        }
        return dialogue;
    }

    private void removeButtons() {
        if (buttons.length > 0) {
            for (JButton button : buttons) {
                remove(button);
            }
            buttons = new JButton[0];
        }
    }

    private void setupCopyNormal(Widget widget, CustomWidgetInfo widgetInfo) {
        removeButtons();
        remove(uiLabel);
        try {
            SwingUtilities.invokeAndWait(() -> {
                String title = "";
                switch (widgetInfo){
                    case DIALOG_PLAYER_TEXT:
                        title = "<player>";
                        break;
                    case DIALOG_NPC_TEXT:
                        title = client.getWidget(WidgetInfo.DIALOG_NPC_NAME).getText();
                        break;
                }

                JButton copy = new JButton("Copy Dialogue");
                String dialogue = replace(widget.getText());
                copy.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mousePressed(MouseEvent mouseEvent) {
                        StringSelection stringSelection = new StringSelection(dialogue);
                        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                        clipboard.setContents(stringSelection, null);
                    }
                });
                add(copy);
                buttons = new JButton[]{copy};
                refresh();
                if(!shiftPressed) {
                    JsonObject jsonObject = new JsonObject();
                    jsonObject.addProperty("type", "dialogue");
                    jsonObject.addProperty("title", title);
                    jsonObject.addProperty("dialogue", dialogue);
                    jsonObject.addProperty("link", ctrlPressed);
                    plugin.getWebsocket().send(jsonObject);
                }
            });
        } catch (InterruptedException | InvocationTargetException e) {
            throw new RuntimeException(e);
        }
    }

    private void refresh() {
        revalidate();
        repaint();
    }

    private void setupCopyOption(Widget option) {
        removeButtons();
        remove(uiLabel);
        try {
            SwingUtilities.invokeAndWait(() -> {
                Widget[] dialogueOptions = option.getChildren();
                String[] optionsText = new String[dialogueOptions.length];
                buttons = new JButton[dialogueOptions.length];
                JsonArray jsonArray = new JsonArray();
                for (int i = 0; i < dialogueOptions.length; i++) {
                    String option1 = replace(dialogueOptions[i].getText());
                    String info = i == 0 ? "Title" : "Option " + i;
                    JButton copy = new JButton("Copy " + info);
                    copy.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mousePressed(MouseEvent mouseEvent) {
                            StringSelection stringSelection = new StringSelection(option1);
                            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                            clipboard.setContents(stringSelection, null);
                        }
                    });
                    if (option1.length() > 0) {
                        add(copy);
                        if(i != 0){
                            jsonArray.add(option1);
                        }
                    }
                    buttons[i] = copy;
                }
                refresh();
                JsonObject jsonObject = new JsonObject();
                if(!shiftPressed) {
                    jsonObject.addProperty("type", "option");
                    jsonObject.add("options", jsonArray);
                    jsonObject.addProperty("link", ctrlPressed);
                    plugin.getWebsocket().send(jsonObject);
                }
            });
        } catch (InterruptedException | InvocationTargetException e) {
            throw new RuntimeException(e);
        }
    }

    @Subscribe
    public void onGameTick(GameTick tick) {
        if(plugin.getWebsocket().getConnections().size() > 0){
            serverLabel.setText("Dialogue editors connected: " + plugin.getWebsocket().getConnections().size());
        }else{
            serverLabel.setText("Open the dialogue editor.");
        }

        Widget currentWidget = null;
        CustomWidgetInfo currentWidgetInfo = null;
        String currentText = null;

        for (CustomWidgetInfo widgetInfo : allInfos) {
            currentWidget = client.getWidget(widgetInfo.groupId, widgetInfo.childId);
            if (currentWidget != null) {
                currentWidgetInfo = widgetInfo;
                if(messageInfos.contains(currentWidgetInfo)){
                    currentText = currentWidget.getText();
                }else if(optionsInfos.contains(currentWidgetInfo)){
                    currentText = Arrays.stream(currentWidget.getChildren()).map(Widget::getText).collect(Collectors.joining("\n"));
                }
                break;
            }
        }
        if (currentWidget != null) {
            if (currentWidget != lastWidget || !lastText.equals(currentText)) {
                lastWidget = currentWidget;
                lastText = currentText;
                if(messageInfos.contains(currentWidgetInfo)){
                    setupCopyNormal(currentWidget, currentWidgetInfo);
                }else if(optionsInfos.contains(currentWidgetInfo)){
                    setupCopyOption(currentWidget);
                }
            }
        } else if (lastWidget != null) {
            removeButtons();
            add(uiLabel);
            refresh();
        }
    }

    public void setCtrlPressed(boolean ctrlPressed) {
        this.ctrlPressed = ctrlPressed;
    }

    public void setShiftPressed(boolean shiftPressed) {
        this.shiftPressed = shiftPressed;
    }
}

package com.dialouge_extractor;

import com.google.gson.Gson;
import com.google.inject.Provides;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.input.KeyListener;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import org.slf4j.Logger;

import javax.inject.Inject;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;

@Slf4j
@PluginDescriptor(
        name = "Dialogue Extractor"
)
public class DialogueExtractorPlugin extends Plugin {
    @Inject
    private Client client;
    @Inject
    private ClientToolbar clientToolbar;
    @Inject
    private EventBus eventBus;

    @Inject
    private DialogueExtractorConfig config;

    @Inject
    private DialogueExtractorPanel dialogueExtractorPanel;

    @Inject
    private KeyManager keyManager;

    @Inject
    private Gson gson;


    @Getter
    private DialogueExtractorServer websocket;

    private NavigationButton navButton;

    @Override
    protected void startUp() throws Exception {
        final BufferedImage icon = ImageUtil.getResourceStreamFromClass(getClass(), "normal.png");

        navButton = NavigationButton.builder()
                .tooltip("Dialogue Extractor")
                .icon(icon)
                .panel(dialogueExtractorPanel)
                .build();

        clientToolbar.addNavigation(navButton);
        eventBus.register(dialogueExtractorPanel);
        websocket = new DialogueExtractorServer(gson, config);
        websocket.start();
        keyManager.registerKeyListener(shiftListener);
        log.debug("Dialogue Extractor started!");
    }

    @Override
    protected void shutDown() throws Exception {
        clientToolbar.removeNavigation(navButton);
        eventBus.unregister(dialogueExtractorPanel);
        keyManager.unregisterKeyListener(shiftListener);
        websocket.stop();
        log.debug("Dialogue Extractor stopped!");
    }

    public Logger getLogger() {
        return log;
    }

    public DialogueExtractorConfig getConfig() {
        return config;
    }

    @Provides
    DialogueExtractorConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(DialogueExtractorConfig.class);
    }

    private final KeyListener shiftListener = new KeyListener() {
        @Override
        public void keyTyped(KeyEvent e) {
        }

        @Override
        public void keyPressed(KeyEvent e) {
            if (e.getExtendedKeyCode() == KeyEvent.VK_SHIFT) {
                dialogueExtractorPanel.setShiftPressed(true);
            }
            if (e.getExtendedKeyCode() == KeyEvent.VK_CONTROL) {
                dialogueExtractorPanel.setCtrlPressed(true);
            }
        }

        @Override
        public void keyReleased(KeyEvent e) {
            if (e.getExtendedKeyCode() == KeyEvent.VK_SHIFT) {
                dialogueExtractorPanel.setShiftPressed(false);
            }
            if (e.getExtendedKeyCode() == KeyEvent.VK_CONTROL) {
                dialogueExtractorPanel.setCtrlPressed(false);
            }
        }
    };

}

package com.dialouge_extractor;

import net.runelite.api.widgets.WidgetID;

public enum CustomWidgetInfo {
    DIALOG_NPC_TEXT(WidgetID.DIALOG_NPC_GROUP_ID, 6),
    DIALOG_PLAYER_TEXT(WidgetID.DIALOG_PLAYER_GROUP_ID, 6),
    DIALOG_OPTION_OPTIONS(WidgetID.DIALOG_OPTION_GROUP_ID, 1),
    DIALOG_SPRITE_TEXT(WidgetID.DIALOG_SPRITE_GROUP_ID, 2),
    DIALOG_SPRITE_DOUBLE_TEXT(11, 2),
    DIALOG_CHATBOX_MESSAGE(229, 1),
    ;

    final int groupId, childId;


    CustomWidgetInfo(int groupId, int childId) {
        this.groupId = groupId;
        this.childId = childId;
    }
}

package com.dialouge_extractor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import lombok.extern.slf4j.Slf4j;
import org.java_websocket.WebSocket;
import org.java_websocket.handshake.ClientHandshake;
import org.java_websocket.server.WebSocketServer;


import javax.inject.Inject;
import javax.inject.Singleton;
import java.net.InetSocketAddress;

@Slf4j
public class DialogueExtractorServer extends WebSocketServer {

    private Gson gson;


    public DialogueExtractorServer(Gson gson, DialogueExtractorConfig config) {
        super(new InetSocketAddress("localhost", config.websocketPort()));
        this.gson = gson;
    }

    @Override
    public void onOpen(WebSocket conn, ClientHandshake handshake) {
        log.debug(conn.getRemoteSocketAddress().getAddress().getHostAddress() + " connected to websocket.");
        JsonObject jsonObject = new JsonObject();
        jsonObject.addProperty("type", "join");
        jsonObject.addProperty("message", "Welcome.");
        conn.send(gson.toJson(jsonObject));
    }

    @Override
    public void onClose(WebSocket conn, int code, String reason, boolean remote) {
        log.debug(conn.getRemoteSocketAddress().getAddress().getHostAddress() + " closed websocket.");
    }

    @Override
    public void onMessage(WebSocket conn, String message) {

    }

    @Override
    public void onError(WebSocket conn, Exception ex) {
        ex.printStackTrace();
    }

    @Override
    public void onStart() {

    }

    public void send(Object o){
        String text = gson.toJson(o);
        broadcast(text);
    }

}

package com.dialouge_extractor;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("dialogueextractor")
public interface DialogueExtractorConfig extends Config {
    @ConfigItem(
            keyName = "newline",
            name = "Include Newlines",
            description = "Include new lines in the copied text."
    )
    default boolean newline() {
        return true;
    }



    @ConfigItem(
            keyName = "usernameToken",
            name = "Username Token",
            description = "Replace players name in text with this."
    )
    default String usernameToken() {
        return "<player>";
    }

    @ConfigItem(
            keyName = "websocketPort",
            name = "Websocket Port",
            description = "Websocket port to open."
    )
    default int websocketPort() {
        return 21902;
    }
}

