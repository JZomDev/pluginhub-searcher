package com.osrsprofile;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PluginLauncher
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(OsrsProfilePlugin.class);
		RuneLite.main(args);
	}
}
package com.osrsprofile.exporter;

import com.osrsprofile.api.Api;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.kit.KitType;
import net.runelite.client.RuneLite;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import org.apache.commons.lang3.ArrayUtils;

import javax.inject.Inject;
import javax.inject.Named;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;

@Slf4j
public class PlayerExporter {
    @Inject
    private Api api;

    @Inject
    private Client client;

    @Inject
    private PlayerModelExporter playerModelExporter;

    @Inject
    @Named("developerMode")
    boolean developerMode;

    /*
     6570 - Fire Cape
     21285 - Infernal Max Cape
     21295 - Infernal Cape
     */
    private final int[] capeBlacklist = {6570, 21285, 21295};

    /*
    12788 - Magic shortbow (i)
     */
    private final int[] weaponBlacklist = {12788};

    public void export() {
        try {
            if (this.hasBlacklistedEquipment(KitType.CAPE, this.capeBlacklist)) {
                client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "<col=ff0000>Animated capes are not allowed. Please unequip or switch for another cape", null);
                return;
            }

            if (this.hasBlacklistedEquipment(KitType.WEAPON, this.weaponBlacklist)) {
                client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "<col=ff0000>Animated weapons are not allowed. Please unequip or switch for another weapon", null);
                return;
            }

            ByteArrayOutputStream stream = this.playerModelExporter.export();
            String fileName = client.getAccountHash()+".ply";

            if (developerMode) {
                File file = new File(RuneLite.RUNELITE_DIR, fileName);
                if (file.isFile()) {
                    boolean deleted = file.delete();
                    if (!deleted) {
                        log.debug("Could not delete model file in runelite dir");
                    }
                }

                FileOutputStream fos = new FileOutputStream(file);
                stream.writeTo(fos);
            }

            RequestBody formBody = new MultipartBody.Builder()
                    .setType(MultipartBody.FORM)
                    .addFormDataPart("model", fileName,
                            RequestBody.create(MediaType.parse("application/ply"), stream.toByteArray()))
                    .build();

            this.api.post(client.getAccountHash() + "/model", formBody);
        } catch (Exception e) {
            client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "<col=ff0000>Could not export your player model, please try again. It might have been an animation or item equipped.", null);
            log.error("Could not export player model", e);
        }
    }

    private boolean hasBlacklistedEquipment(KitType equipmentType, int[] blacklist) {
        int currentCape = this.client.getLocalPlayer().getPlayerComposition().getEquipmentId(equipmentType);
        return ArrayUtils.contains(blacklist, currentCape);
    }
}

/*
 * Copyright (c) 2020 Abex
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Sourced from https://github.com/Bram91/Model-Dumper
 */
package com.osrsprofile.exporter;

import net.runelite.api.Client;
import net.runelite.api.Model;

import javax.inject.Inject;

import java.awt.Color;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class PlayerModelExporter {
    @Inject
    private Client client;

    @Inject
    private TextureColor textureColor;

    public ByteArrayOutputStream export() throws IOException
    {
        List<Vertex> vertices = new ArrayList<>();
        Model model = client.getLocalPlayer().getModel();

        for (int fi=0; fi < model.getFaceCount(); fi++)
        {
            // determine vertex colors (textured or colored?)
            Color vc1;
            Color vc2;
            Color vc3;
            int textureId = -1;

            if (model.getFaceTextures() != null) {
                textureId = model.getFaceTextures()[fi];
            }

            if (textureId != -1) {
                // get average color of texture
                vc1 = this.textureColor.getColor(textureId);
                vc2 = vc1;
                vc3 = vc1;
            } else {
                // get average color of vertices
                vc1 = new Color(JagexColor.HSLtoRGB((short) model.getFaceColors1()[fi], JagexColor.BRIGHTNESS_MIN));
                vc2 = new Color(JagexColor.HSLtoRGB((short) model.getFaceColors2()[fi], JagexColor.BRIGHTNESS_MIN));
                vc3 = new Color(JagexColor.HSLtoRGB((short) model.getFaceColors3()[fi], JagexColor.BRIGHTNESS_MIN));
            }

            int vi1 = model.getFaceIndices1()[fi];
            int vi2 = model.getFaceIndices2()[fi];
            int vi3 = model.getFaceIndices3()[fi];

            int vx1 = (int) model.getVerticesX()[vi1];
            int vx2 = (int) model.getVerticesX()[vi2];
            int vx3 = (int) model.getVerticesX()[vi3];
            int vy1 = (int) -model.getVerticesY()[vi1];
            int vy2 = (int) -model.getVerticesY()[vi2];
            int vy3 = (int) -model.getVerticesY()[vi3];
            int vz1 = (int) model.getVerticesZ()[vi1];
            int vz2 = (int) model.getVerticesZ()[vi2];
            int vz3 = (int) model.getVerticesZ()[vi3];

            vertices.add(new Vertex(vx1, vy1, vz1, vc1.getRed(), vc1.getGreen(), vc1.getBlue()));
            vertices.add(new Vertex(vx2, vy2, vz2, vc2.getRed(), vc2.getGreen(), vc2.getBlue()));
            vertices.add(new Vertex(vx3, vy3, vz3, vc3.getRed(), vc3.getGreen(), vc3.getBlue()));
        }

        ByteArrayOutputStream ply = new ByteArrayOutputStream();

        PrintWriter plyHeader = new PrintWriter(ply);
        plyHeader.println("ply");
        plyHeader.println("format binary_little_endian 1.0");
        plyHeader.println("element vertex " + vertices.size());
        plyHeader.println("property int16 x");
        plyHeader.println("property int16 y");
        plyHeader.println("property int16 z");
        plyHeader.println("property uint8 red");
        plyHeader.println("property uint8 green");
        plyHeader.println("property uint8 blue");
        plyHeader.println("element face " + model.getFaceCount());
        plyHeader.println("property list uint8 int16 vertex_indices");
        plyHeader.println("end_header");
        plyHeader.flush();

        for (Vertex v: vertices) {
            // Y and Z axes are flipped
            ply.write(le(v.x));
            ply.write(le(v.z));
            ply.write(le(v.y));
            ply.write((byte) v.r);
            ply.write((byte) v.g);
            ply.write((byte) v.b);
        }

        for (int i=0; i < model.getFaceCount(); ++i) {
            int vi = i*3;
            ply.write((byte) 3);
            ply.write(le(vi));
            ply.write(le(vi+1));
            ply.write(le(vi+2));
        }

        ply.flush();

        return ply;
    }

    // int to little endian byte array
    private static byte[] le(int n)
    {
        byte[] b = new byte[2];
        b[0] = (byte) n;
        b[1] = (byte) (n >> 8);
        return b;
    }

    private static class Vertex
    {
        public int x, y, z;
        public int r, g, b;

        public Vertex(int x, int y, int z, int r, int g, int b)
        {
            this.x = x;
            this.y = y;
            this.z = z;
            this.r = r;
            this.g = g;
            this.b = b;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Vertex vertex = (Vertex) o;
            return x == vertex.x && y == vertex.y && z == vertex.z && r == vertex.r && g == vertex.g && b == vertex.b;
        }

        @Override
        public int hashCode() {
            return Objects.hash(x, y, z, r, g, b);
        }
    }
}

/*
 * Copyright (c) 2020 Abex
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Sourced from https://github.com/Bram91/Model-Dumper
 */
package com.osrsprofile.exporter;

import java.awt.*;

// Originally from RuneLite cache
// Additions made for calculating average of 3 colors
public class JagexColor {

    public static final double BRIGHTNESS_MAX = .6;
    public static final double BRIGHTNESS_HIGH = .7;
    public static final double BRIGHTNESS_LOW = .8;
    public static final double BRIGHTNESS_MIN = .9;

    private static final double HUE_OFFSET = (.5 / 64.D);
    private static final double SATURATION_OFFSET = (.5 / 8.D);


    // take 3 Jagex HSL colors and make a single RGB color to represent them
    public static Color HSLtoRGBAvg(int hsl1, int hsl2, int hsl3)
    {
        Color c1 = new Color(HSLtoRGB((short) hsl1, BRIGHTNESS_MIN));
        Color c2 = new Color(HSLtoRGB((short) hsl2, BRIGHTNESS_MIN));
        Color c3 = new Color(HSLtoRGB((short) hsl3, BRIGHTNESS_MIN));

        // compute color average using squares
        // uses squared approach from https://sighack.com/post/averaging-rgb-colors-the-right-way
        int r = c1.getRed()*c1.getRed() + c2.getRed()*c2.getRed() + c3.getRed()*c3.getRed();
        int g = c1.getGreen()*c1.getGreen() + c2.getGreen()*c2.getGreen() + c3.getGreen()*c3.getGreen();
        int b = c1.getBlue()*c1.getBlue() + c2.getBlue()*c2.getBlue() + c3.getBlue()*c3.getBlue();

        r = (int) Math.round(Math.sqrt((double) r / 3.0d));
        g = (int) Math.round(Math.sqrt((double) g / 3.0d));
        b = (int) Math.round(Math.sqrt((double) b / 3.0d));

        return new Color(r, g, b);
    }

    public static short packHSL(int hue, int saturation, int luminance)
    {
        return (short) ((short) (hue & 63) << 10
                | (short) (saturation & 7) << 7
                | (short) (luminance & 127));
    }

    public static int unpackHue(short hsl)
    {
        return hsl >> 10 & 63;
    }

    public static int unpackSaturation(short hsl)
    {
        return hsl >> 7 & 7;
    }

    public static int unpackLuminance(short hsl)
    {
        return hsl & 127;
    }

    public static String formatHSL(short hsl)
    {
        return String.format("%02Xh%Xs%02Xl", unpackHue(hsl), unpackSaturation(hsl), unpackLuminance(hsl));
    }

    public static int HSLtoRGB(short hsl, double brightness)
    {
        double hue = (double) unpackHue(hsl) / 64.D + HUE_OFFSET;
        double saturation = (double) unpackSaturation(hsl) / 8.D + SATURATION_OFFSET;
        double luminance = (double) unpackLuminance(hsl) / 128.D;

        // This is just a standard hsl to rgb transform
        // the only difference is the offsets above and the brightness transform below
        double chroma = (1.D - Math.abs((2.D * luminance) - 1.D)) * saturation;
        double x = chroma * (1 - Math.abs(((hue * 6.D) % 2.D) - 1.D));
        double lightness = luminance - (chroma / 2);

        double r = lightness, g = lightness, b = lightness;
        switch ((int) (hue * 6.D))
        {
            case 0:
                r += chroma;
                g += x;
                break;
            case 1:
                g += chroma;
                r += x;
                break;
            case 2:
                g += chroma;
                b += x;
                break;
            case 3:
                b += chroma;
                g += x;
                break;
            case 4:
                b += chroma;
                r += x;
                break;
            default:
                r += chroma;
                b += x;
                break;
        }

        int rgb = ((int) (r * 256.0D) << 16)
                | ((int) (g * 256.0D) << 8)
                | (int) (b * 256.0D);

        rgb = adjustForBrightness(rgb, brightness);

        if (rgb == 0)
        {
            rgb = 1;
        }
        return rgb;
    }

    public static int adjustForBrightness(int rgb, double brightness)
    {
        double r = (double) (rgb >> 16) / 256.0D;
        double g = (double) (rgb >> 8 & 255) / 256.0D;
        double b = (double) (rgb & 255) / 256.0D;

        r = Math.pow(r, brightness);
        g = Math.pow(g, brightness);
        b = Math.pow(b, brightness);

        return ((int) (r * 256.0D) << 16)
                | ((int) (g * 256.0D) << 8)
                | (int) (b * 256.0D);
    }
}

/*
 * Copyright (c) 2020 Abex
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Sourced from https://github.com/Bram91/Model-Dumper
 */
package com.osrsprofile.exporter;

import net.runelite.api.Client;

import javax.inject.Inject;
import java.awt.Color;
import java.util.HashMap;
import java.util.Map;

public class TextureColor {
    @Inject
    private Client client;

    private static final Map<Integer, Color> colorCache = new HashMap<>();

    // get single average color from Jagex texture id
    public Color getColor(int textureId)
    {
        if (colorCache.containsKey(textureId)) {
            return colorCache.get(textureId);
        }

        if (client == null) {
            return new Color(255, 255, 255);
        }

        int[] pixels = client.getTextureProvider().load(textureId);

        int r = 0;
        int g = 0;
        int b = 0;
        int n = 0;
        for (int pixel : pixels) {
            // skip transparent (black)
            if (pixel == 0) {
                continue;
            }

            Color c = new Color(pixel);
            r += c.getRed();
            g += c.getGreen();
            b += c.getBlue();
            n++;
        }

        Color c = new Color(r/n, g/n, b/n);
        colorCache.put(textureId, c);

        return c;
    }
}

package com.osrsprofile;

import net.runelite.api.Client;
import net.runelite.client.RuneLite;

import javax.inject.Inject;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.util.function.Consumer;
import java.util.function.Function;

public class VarExporter {
    @Inject
    private Client client;

    public void export() {
        File file = new File(RuneLite.RUNELITE_DIR, "vars.txt");
        PrintStream ps = null;

        try {
            ps = new PrintStream(file);

            this.exportVars(ps, "varp");
            this.exportVars(ps, "varb");

        } catch (IOException e) {
            e.printStackTrace();

        } finally {
            ps.close();
        }
    }

    // This is a debug command used to extract all vars of a player to check for values
    private void exportVars(PrintStream ps, String type) {
        ps.println(type);

        Function<Integer, Integer> method = null;
        if (type == "varp") {
            method = client::getVarpValue;
        } else {
            method = client::getVarbitValue;
        }

        for (int i = 0; i < 30000; i++) {
            try {
                ps.println(String.format("%d: %d", i, method.apply(i)));
            } catch (IndexOutOfBoundsException e) {
                // Do nothing
            }
        }
    }
}

package com.osrsprofile;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("osrsprofile")
public interface OsrsProfileConfig extends Config
{
	@ConfigItem(
		keyName = "trackSkills",
		name = "Track skills",
		description = "Whether to track skills or not"
	)
	default boolean trackSkills()
	{
		return true;
	}

	@ConfigItem(
			keyName = "trackQuests",
			name = "Track quests",
			description = "Whether to track quests or not"
	)
	default boolean trackQuests()
	{
		return true;
	}

	@ConfigItem(
			keyName = "trackDiaries",
			name = "Track achievement diaries",
			description = "Whether to track achievement diaries or not"
	)
	default boolean trackDiaries()
	{
		return true;
	}

	@ConfigItem(
			keyName = "trackCombat",
			name = "Track combat achievements",
			description = "Whether to track combat achievements or not"
	)
	default boolean trackCombat()
	{
		return true;
	}

	@ConfigItem(
			keyName = "trackMinigames",
			name = "Track minigames",
			description = "Whether to track minigames or not"
	)
	default boolean trackMinigames()
	{
		return true;
	}

	@ConfigItem(
			keyName = "trackBossKills",
			name = "Track boss kills",
			description = "Whether to track boss kills or not"
	)
	default boolean trackBossKills()
	{
		return true;
	}

	@ConfigItem(
			keyName = "trackSlayerMonstersKills",
			name = "Track slayer monsters kills",
			description = "Whether to track slayer monsters kills or not"
	)
	default boolean trackSlayerMonstersKills()
	{
		return true;
	}

	@ConfigItem(
			keyName = "trackCollectionLog",
			name = "Track collection log",
			description = "Whether to track the collection log or not"
	)
	default boolean trackCollectionLog()
	{
		return true;
	}
}

package com.osrsprofile;

import javax.inject.Inject;
import javax.inject.Provider;

import com.google.inject.Provides;
import com.osrsprofile.exporter.PlayerExporter;
import com.osrsprofile.tracker.PlayerTracker;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.widgets.ComponentID;
import net.runelite.client.chat.ChatCommandManager;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.menus.MenuManager;
import net.runelite.client.menus.WidgetMenuOption;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.task.Schedule;

import java.awt.*;
import java.net.URI;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.temporal.ChronoUnit;

@Slf4j
@PluginDescriptor(
		name = "OSRS Profile"
)
public class OsrsProfilePlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private OsrsProfileConfig config;

	@Inject
	private PlayerTracker playerTracker;

	@Inject
	private PlayerExporter playerExporter;

	@Inject
	private VarExporter varExporter;

	@Inject
	private Provider<MenuManager> menuManager;

	@Inject
	private ChatCommandManager chatCommandManager;

	private final int SECONDS_BETWEEN_UPLOADS = 60;

	private final int SECONDS_BETWEEN_FETCHES = 300;

	private static final String MENU_OPTION = "Profile";

	private static final String MENU_TARGET = "Player";

	private static final String EXPORT_MODEL = "Export Model to OSRS Profile";

	private static final String EXPORT_MODEL_COMMAND = "!exportmodel";

	private static final String EXPORT_VARS_COMMAND = "!exportvars";

	private static final WidgetMenuOption FIXED_EQUIPMENT_TAB_EXPORT = new WidgetMenuOption(EXPORT_MODEL,
			MENU_TARGET, ComponentID.FIXED_VIEWPORT_EQUIPMENT_TAB);
	private static final WidgetMenuOption RESIZABLE_EQUIPMENT_TAB_EXPORT = new WidgetMenuOption(EXPORT_MODEL,
			MENU_TARGET, ComponentID.RESIZABLE_VIEWPORT_EQUIPMENT_TAB);
	private static final WidgetMenuOption RESIZABLE_VIEWPORT_BOTTOM_LINE_INVENTORY_TAB_EXPORT = new WidgetMenuOption(EXPORT_MODEL,
			MENU_TARGET, ComponentID.RESIZABLE_VIEWPORT_BOTTOM_LINE_INVENTORY_TAB);

	@Override
	protected void startUp() {
		log.info("Player tracker started");
		menuManager.get().addPlayerMenuItem(MENU_OPTION);

		menuManager.get().addManagedCustomMenu(FIXED_EQUIPMENT_TAB_EXPORT,this::exportLocalPlayerModel);
		menuManager.get().addManagedCustomMenu(RESIZABLE_EQUIPMENT_TAB_EXPORT,this::exportLocalPlayerModel);
		menuManager.get().addManagedCustomMenu(RESIZABLE_VIEWPORT_BOTTOM_LINE_INVENTORY_TAB_EXPORT,this::exportLocalPlayerModel);

		chatCommandManager.registerCommandAsync(EXPORT_MODEL_COMMAND, this::exportLocalPlayerModel);
		chatCommandManager.registerCommand(EXPORT_VARS_COMMAND, this::exportVarsCommand);

		this.playerTracker.fetchVars(this.config);
	}

	@Override
	protected void shutDown() {
		log.info("Player tracker stopped");
		menuManager.get().removePlayerMenuItem(MENU_OPTION);

		menuManager.get().removeManagedCustomMenu(FIXED_EQUIPMENT_TAB_EXPORT);
		menuManager.get().removeManagedCustomMenu(RESIZABLE_EQUIPMENT_TAB_EXPORT);
		menuManager.get().removeManagedCustomMenu(RESIZABLE_VIEWPORT_BOTTOM_LINE_INVENTORY_TAB_EXPORT);

		chatCommandManager.unregisterCommand(EXPORT_MODEL_COMMAND);
		chatCommandManager.unregisterCommand(EXPORT_VARS_COMMAND);
	}

	@Provides
	OsrsProfileConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(OsrsProfileConfig.class);
	}

	@Schedule(
			period = SECONDS_BETWEEN_UPLOADS,
			unit = ChronoUnit.SECONDS
	)
	public void submitToAPI()
	{
		if (client != null) {
			this.playerTracker.submitToApi();
		}
	}

	@Schedule(
			period = SECONDS_BETWEEN_FETCHES,
			unit = ChronoUnit.SECONDS
	)
	public void getVarsFromApi()
	{
		if (client != null) {
			this.playerTracker.fetchVars(this.config);
		}
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event) {
		if (event.getMenuAction() == MenuAction.RUNELITE_PLAYER && event.getMenuOption().equals(MENU_OPTION)) {
			Player player = event.getMenuEntry().getPlayer();
			if (player == null) {
				return;
			}

			String target = player.getName();

			try {
				if (Desktop.isDesktopSupported()) {
					Desktop desktop = Desktop.getDesktop();
					if (desktop.isSupported(Desktop.Action.BROWSE)) {
						String playerName = URLEncoder.encode(target, StandardCharsets.UTF_8.toString()).replaceAll("\\+", "%20");
						desktop.browse(URI.create("https://osrsprofile.com/player/" + playerName));
					} else {
						throw new Exception("Desktop not supported");
					}
				}
			} catch (Exception e) {
				log.error(e.toString());
				client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Unable to open the profile of the interacted player.", null);
			}
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event) {
		if (event.getGroup().equals("osrsprofile")) {
			playerTracker.fetchVars(this.config);
		}
	}

	// From menu
	public void exportLocalPlayerModel(MenuEntry entry)
	{
		this.playerExporter.export();
	}

	// From chat command
	private void exportLocalPlayerModel(ChatMessage chatMessage, String s) {
		this.playerExporter.export();
	}

	private void exportVarsCommand(ChatMessage chatMessage, String s) {
		this.varExporter.export();
	}
}

package com.osrsprofile.api;

import lombok.extern.slf4j.Slf4j;
import okhttp3.*;

import javax.inject.Inject;
import javax.inject.Named;
import java.io.IOException;

@Slf4j
public class Api {
    private final String API_URL = "https://api.osrsprofile.com/runelite/player";
    private final String DEV_URL = "http://osrsprofilebackend.test/runelite/player";

    @Inject
    private OkHttpClient httpClient;

    @Inject
    @Named("developerMode")
    boolean developerMode;

    public Response get(String route) throws IOException {
        Request request = this.getDefaultRequestBuilder(route).build();
        Response response = httpClient.newCall(request).execute();

        log.debug("RECEIVED " + request.url() + ": " + response.peekBody(Long.MAX_VALUE).string());

        return response;
    }

    public Response post(String route, String json) throws IOException {
        Request request = this.getDefaultRequestBuilder(route)
                .post(RequestBody.create(MediaType.parse("application/json"), json))
                .addHeader("Content-Type", "application/json")
                .build();

        log.debug("SENT " + request.url() + ": " + json);

        Response response = httpClient.newCall(request).execute();

        log.debug("RECEIVED " + request.url() + ": " + response.peekBody(Long.MAX_VALUE).string());

        return response;
    }

    public Response post(String route, RequestBody formBody) throws IOException {
        Request request = this.getDefaultRequestBuilder(route)
                .post(formBody)
                .addHeader("Content-Type", "multipart/form-data")
                .build();

        log.debug("SENT " + request.url() + ": " + formBody);

        Response response = httpClient.newCall(request).execute();

        log.debug("RECEIVED " + request.url() + ": " + response.peekBody(Long.MAX_VALUE).string());

        return response;
    }

    private Request.Builder getDefaultRequestBuilder(String route) {
        return new Request.Builder()
                .url((developerMode ? DEV_URL : API_URL) +'/'+route)
                .addHeader("User-Agent", "RuneLite");
    }
}

package com.osrsprofile.tracker;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.osrsprofile.OsrsProfileConfig;
import com.osrsprofile.api.Api;
import com.osrsprofile.tracker.dto.TrackingObject;
import com.osrsprofile.tracker.dto.TrackingRequest;
import lombok.extern.slf4j.Slf4j;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Map;

import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Skill;
import net.runelite.api.Varbits;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.config.RuneScapeProfileType;
import okhttp3.Response;

import javax.inject.Inject;

@Slf4j
public class PlayerTracker {

    private Map<String, TrackingObject> playerData = new HashMap<>();

    @Inject
    private Client client;

    @Inject
    private Gson gson;

    @Inject
    private ConfigManager configManager;

    @Inject
    private Api api;

    public void fetchVars(OsrsProfileConfig config)
    {
        try {
            Response response = this.api.get("vars?quests="+config.trackQuests()
                    +"&skills="+config.trackSkills()
                    +"&minigames="+config.trackMinigames()
                    +"&diaries="+config.trackDiaries()
                    +"&combat="+config.trackCombat()
                    +"&bosskills="+config.trackBossKills()
                    +"&slayermonsters="+config.trackSlayerMonstersKills()
                    +"&collectionlog="+config.trackCollectionLog()
                );

            if (response.code() == 200) {
                Type type = new TypeToken<Map<String, TrackingObject>>() {}.getType();
                String responseString = response.body().string();

                this.playerData = gson.fromJson(responseString, type);
            } else {
                log.error("Could not fetch vars from api, api returned: ("+response.code()+") - "+response.body().string());
            }
        } catch (Exception e) {
            log.error("Could not fetch vars from api", e);
        }
    }

    public void submitToApi()
    {
        if (this.shouldNotMakeRequests()) {
            return;
        }

        this.updatePlayerModel();

        try {
            TrackingRequest requestObj = new TrackingRequest();
            requestObj.data = this.playerData;
            requestObj.username = client.getLocalPlayer().getName();
            requestObj.accountType = this.getAccountType();

            Gson gson = this.gson.newBuilder().serializeNulls().create();
            String json = gson.toJson(requestObj);

            this.api.post(String.valueOf(client.getAccountHash()), json);

        } catch (Exception e) {
            log.error("Could not submit player data to api", e);
        }
    }

    private void updatePlayerModel()
    {
        this.playerData.forEach((key, item) -> item.value = this.getValue(item.index, item.type));
    }

    private Integer getValue(String index, String type) {
        Integer value = null;

        switch(type) {
            case "skill":
                value = client.getSkillExperience(Skill.valueOf(index));
                break;
            case "varb":
                value = client.getVarbitValue(Integer.parseInt(index));
                break;
            case "varp":
                value = client.getVarpValue(Integer.parseInt(index));
                break;
            case "killcount":
                value = configManager.getRSProfileConfiguration("killcount", index, int.class);
                break;
            case "personalbest":
                Double pb = configManager.getRSProfileConfiguration("personalbest", index, double.class);
                value = pb != null ? Math.toIntExact(Math.round(pb)) : null;
                break;
            default:
                value = null;
                break;
        }

        return value;
    }

    private String getAccountType() {
        return AccountType.getType(client.getVarbitValue(Varbits.ACCOUNT_TYPE)).toString();
    }

    private boolean shouldNotMakeRequests() {
        return RuneScapeProfileType.getCurrent(client) != RuneScapeProfileType.STANDARD
            || client.getGameState() == GameState.LOGIN_SCREEN
            || client.getGameState() == GameState.LOGIN_SCREEN_AUTHENTICATOR;
    }
}

package com.osrsprofile.tracker;

public enum AccountType {
    /**
     * Normal account type.
     */
    NORMAL,
    /**
     * Ironman account type.
     */
    IRONMAN,
    /**
     * Ultimate ironman account type.
     */
    ULTIMATE_IRONMAN,
    /**
     * Hardcore ironman account type.
     */
    HARDCORE_IRONMAN,
    /**
     * Group ironman account type
     */
    GROUP_IRONMAN,
    /**
     * Hardcore group ironman account type
     */
    HARDCORE_GROUP_IRONMAN,
    /**
     * Unranked group ironman account type
     */
    UNRANKED_GROUP_IRONMAN;

    public static AccountType getType(int value) {
        switch(value) {
            case 1: return IRONMAN;
            case 2: return ULTIMATE_IRONMAN;
            case 3: return HARDCORE_IRONMAN;
            case 4: return GROUP_IRONMAN;
            case 5: return HARDCORE_GROUP_IRONMAN;
            case 6: return UNRANKED_GROUP_IRONMAN;
            default: return NORMAL;
        }
    }
}
package com.osrsprofile.tracker.dto;

import java.util.Map;

public class TrackingRequest {
    public Map<String, TrackingObject> data;
    public String username;
    public String accountType;
}

package com.osrsprofile.tracker.dto;

public class TrackingObject {
    public Integer value;
    public String type;
    public String index;
}

