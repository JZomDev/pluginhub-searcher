package com.lootsplit;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class LootSplitPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(LootSplitPlugin.class);
		RuneLite.main(args);
	}
}
package com.lootsplit;

import lombok.Getter;

public class LootEntry
{
	@Getter
	public final int value;

	@Getter
	public long timems;

	public boolean inSplit = true;

	@Getter
	public final PlayerInfo playerInfo;

	public LootEntry(int value, PlayerInfo playerInfo, long timems) {
		this.value = value;
		this.playerInfo = playerInfo;
		this.timems = timems;
	}

	public String getName() {
		return playerInfo.name;
	}
}

package com.lootsplit;

import com.google.inject.Provides;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

@Slf4j
@PluginDescriptor(
	name = "PK Loot Splitter"
)
public class LootSplitPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	private LootConfig config;

	private LootPanel panel;

	private NavigationButton navButton;

	public final List<LootEntry> loot = new ArrayList<>();
	final List<PlayerInfo> playerInfos = new ArrayList<>();
	public static final String USERNAME = "([\\w\\s-Â ]{1,12})";
	public static final String COMMA_NUMBER = "([\\d,]+)";
	public static final Pattern lootKeyPattern = Pattern.compile("^" + USERNAME + " has opened a loot key worth " + COMMA_NUMBER + " coins!$");

	@Override
	protected void startUp() throws Exception
	{
		panel = new LootPanel(this, client, clientThread);
		navButton = NavigationButton.builder()
			.tooltip("PK Loot Split")
			.icon(ImageUtil.loadImageResource(getClass(), "/lootsplit_icon.png"))
			.panel(panel)
			.build();
		clientToolbar.addNavigation(navButton);
		panel.clear();
//
//		PlayerInfo playerInfo = new PlayerInfo("TestName");
//		playerInfos.add(playerInfo);
//		panel.playerPanel.add(playerInfo);
//
//		LootEntry lootEntry = new LootEntry(321, playerInfo, System.currentTimeMillis());
//		loot.add(lootEntry);
//		panel.add(lootEntry);
//
//		LootEntry lootEntry2 = new LootEntry(123, playerInfo, System.currentTimeMillis());
//		loot.add(lootEntry2);
//		panel.add(lootEntry2);
	}

	@Override
	protected void shutDown() throws Exception
	{
		clientToolbar.removeNavigation(navButton);
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		if (client.getClanChannel() == null) {
			return;
		}

		if (!event.getType().equals(ChatMessageType.CLAN_MESSAGE)) {
			return;
		}

		if (event.getSender() != null && !event.getSender().equals(client.getClanChannel().getName()))
		{
			return;
		}

		Matcher m = lootKeyPattern.matcher(event.getMessage());
		if (!m.matches()) {
			return;
		}

		String username = Util.formatName(m.group(1));
		String valueS = m.group(2);

		valueS = valueS.replaceAll(",", "");
		int coins;
		try {
			coins = Integer.parseInt(valueS);
		} catch (NumberFormatException e) {
			return;
		}

		PlayerInfo playerInfo = null;
		for (PlayerInfo pi : playerInfos) {
			if (pi.name.equalsIgnoreCase(username)) {
				playerInfo = pi;
				break;
			}
		}
		if (playerInfo == null) {
			return;
		}

		LootEntry lootEntry = new LootEntry(coins / 1_000, playerInfo, System.currentTimeMillis());
		lootEntry.inSplit = lootEntry.value >= config.minimumLoot();
		loot.add(lootEntry);
		panel.add(lootEntry);
	}

	@Provides
	LootConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(LootConfig.class);
	}

	public void clear()
	{

	}
}

package com.lootsplit;

import com.lootsplit.interfaces.LootList;
import com.lootsplit.interfaces.PlayerPanel;
import java.awt.Component;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.FriendsChatMember;
import net.runelite.api.GameState;
import net.runelite.api.clan.ClanChannelMember;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.ui.PluginPanel;

public class LootPanel extends PluginPanel
{
	public final LootSplitPlugin plugin;
	private final LootList lootList;
	private final JButton splitButton;
	private final Client client;
	private final ClientThread clientThread;
	public final PlayerPanel playerPanel;

	public LootPanel(LootSplitPlugin plugin, Client client, ClientThread clientThread)
	{
		this.client = client;
		this.plugin = plugin;
		this.clientThread = clientThread;
		setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
		setBorder(new EmptyBorder(2, 2, 2, 2));

		splitButton = new JButton("Split");
		splitButton.setAlignmentX(Component.CENTER_ALIGNMENT);
		add(splitButton);
		splitButton.addActionListener(e -> split());

		JButton clearButton = new JButton("Reset");
		clearButton.setAlignmentX(Component.CENTER_ALIGNMENT);
		add(clearButton);
		clearButton.addActionListener(e -> {
			int option = JOptionPane.showConfirmDialog(null, "Are you sure you want to reset?");
			if (option == JOptionPane.YES_OPTION) {
				clear();
			}
		});

		JLabel label = new JLabel("Enter new player: ");
		label.setAlignmentX(Component.CENTER_ALIGNMENT);
		add(label);

		JTextField addPlayerTF = new JTextField(12);
		Action action = new AbstractAction()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				String text = addPlayerTF.getText();
				inputPlayer(text);
			}
		};
		addPlayerTF.addActionListener(action);
		add(addPlayerTF);

		playerPanel = new PlayerPanel(this);
		add(playerPanel);

		lootList = new LootList();
		add(lootList);
	}

	private void inputPlayer(String text)
	{
		if (client.getGameState() != GameState.LOGGED_IN) {
			return;
		}

		String name = findName(text);
		if (name == null)
		{
			clientThread.invokeLater(() -> client.addChatMessage(ChatMessageType.GAMEMESSAGE, "",
				text + " not found in clan/friends chat or already present.", ""));
			return;
		}

		PlayerInfo playerInfo = new PlayerInfo(name);
		plugin.playerInfos.add(playerInfo);
		playerPanel.add(playerInfo);
	}

	private String findName(String name)
	{
		if (plugin.playerInfos.stream().anyMatch(playerInfo -> playerInfo.name.equalsIgnoreCase(name)))
		{
			return null;
		}
		if (client.getClanChannel() != null)
		{
			for (ClanChannelMember member : client.getClanChannel().getMembers())
			{
				if (Util.formatName(member.getName()).equalsIgnoreCase(name))
				{
					return Util.formatName(member.getName());
				}
			}
		}
		if (client.getFriendsChatManager() != null)
		{
			for (FriendsChatMember member : client.getFriendsChatManager().getMembers())
			{
				if (Util.formatName(member.getName()).equalsIgnoreCase(name))
				{
					return Util.formatName(member.getName());
				}
			}
		}
		return null;
	}

	private void split()
	{
		Map<PlayerInfo, Double> playerToSplit = new HashMap<>();
		Map<PlayerInfo, Integer> playerToTotal = new HashMap<>();
		long total = 0;
		for (LootEntry lootEntry : plugin.loot) {
			if (!lootEntry.inSplit) {
				continue;
			}

			total += lootEntry.getValue();
			List<PlayerInfo> presentPlayers = new ArrayList<>();
			for (PlayerInfo playerInfo : plugin.playerInfos) {
				for (TimePeriod timePeriod : playerInfo.timePeriods) {
					if (lootEntry.timems < timePeriod.getStartms())
						continue;
					if (timePeriod.getEndms() >= 0 && lootEntry.timems > timePeriod.getEndms())
						continue;
					presentPlayers.add(playerInfo);
					break;
				}
			}

			double split = (double) lootEntry.getValue() / presentPlayers.size();
			playerToTotal.merge(lootEntry.getPlayerInfo(), lootEntry.getValue(), Integer::sum);
			for (PlayerInfo p : presentPlayers) {
				playerToSplit.merge(p, split, Double::sum);
			}
		}

		StringBuilder sb = new StringBuilder();
		sb.append("Totals: ").append(total).append("\n");
		playerToTotal.forEach((p, val) -> sb.append(p.name).append(": ").append(val).append("\n"));
		sb.append("\nSplit\n");
		playerToSplit.forEach((p, val) -> sb.append(p.name).append(": ").append(val).append("\n"));

		Transferable transferableText = new StringSelection(sb.toString());
		Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
		clipboard.setContents(transferableText, null);

		clientThread.invokeLater(() -> client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Split information added to clipboard.", ""));
	}

	public void clear()
	{
		for (Iterator<Component> it = Arrays.stream(lootList.getComponents()).iterator(); it.hasNext(); )
		{
			Component c = it.next();
			lootList.remove(c);
		}
		plugin.loot.clear();
		plugin.playerInfos.clear();
		playerPanel.removeAll();
		lootList.revalidate();
		lootList.repaint();
	}

	public void add(LootEntry lootEntry)
	{
		SwingUtilities.invokeLater(() -> {
			lootList.add(lootEntry);
			lootList.revalidate();
			lootList.repaint();
		});
	}
}

package com.lootsplit;

public class Util
{
	public static String formatName(String name) {
		return name.replace("\u00a0"," ").replace("Â ", " ");
	}
}

package com.lootsplit;

import com.lootsplit.interfaces.TimePeriodList;
import javax.swing.JButton;
import lombok.Getter;

public class TimePeriod
{
	@Getter
	private long startms;

	@Getter
	private long endms;
	public JButton startButton;
	public JButton endButton;

	public TimePeriod(long startms) {
		this(startms, -1L);
	}

	public TimePeriod(long startms, long endms) {
		setStartms(startms);
		setEndms(endms);
	}

	public void setStartms(long startms) {
		this.startms = startms;
		if (startButton != null) {
			startButton.setText(TimePeriodList.getButtonText(this, true));
		}
	}

	public void setEndms(long endms) {
		this.endms = endms;
		if (endButton != null) {
			endButton.setText(TimePeriodList.getButtonText(this, false));
			endButton.setVisible(endms >= 0);
		}
	}
}

package com.lootsplit.interfaces;

import com.lootsplit.LootEntry;
import java.awt.Color;
import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;

public class LootIntEntry extends JPanel
{
	protected final LootEntry lootEntry;
	private static final DateTimeFormatter format = DateTimeFormatter.ofPattern("HH:mm");

	public LootIntEntry(final LootEntry lootEntry) {
		super();
		this.lootEntry = lootEntry;
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.fill = GridBagConstraints.HORIZONTAL;
		setLayout(new GridBagLayout());

		JTextArea textArea = new JTextArea(lootEntry.getName() + " " + lootEntry.getValue());
		textArea.setEditable(false);
		textArea.setRows(2);
		textArea.setForeground(lootEntry.inSplit ? Color.ORANGE : Color.GRAY);
		gbc.gridx = 0; // Column 0
		gbc.gridy = 0; // Row 0
		add(textArea, gbc);

		JButton inSplitButton = new JButton("Toggle split");
		gbc.gridx = 1; // Column 1
		gbc.gridy = 0; // Row 0
		add(inSplitButton, gbc);
		inSplitButton.addActionListener(e -> {
			lootEntry.inSplit = !lootEntry.inSplit;
			textArea.setForeground(lootEntry.inSplit ? Color.ORANGE : Color.GRAY);
		});

		JButton timeButton = new JButton();
		timeButton.setAlignmentX(Component.CENTER_ALIGNMENT);
		timeButton.setText(Instant.ofEpochMilli(lootEntry.getTimems()).atZone(ZoneId.systemDefault()).format(format));

		timeButton.addActionListener(e -> {
			String prompt = "Enter new time";
			String curTime = Instant.ofEpochMilli(lootEntry.getTimems()).atZone(ZoneId.systemDefault()).format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);
			String input = JOptionPane.showInputDialog(prompt, curTime);
			if (input == null) {
				return;
			}
			try {
				lootEntry.timems = DateTimeFormatter.ISO_LOCAL_DATE_TIME.parse(input, LocalDateTime::from).atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();
				timeButton.setText(Instant.ofEpochMilli(lootEntry.getTimems()).atZone(ZoneId.systemDefault()).format(format));
			} catch (DateTimeException exception) {
				JOptionPane.showMessageDialog(null, "Could not parse date");
			}
		});
		gbc.gridx = 1; // Column 1
		gbc.gridy = 1; // Row 1
		add(timeButton, gbc);
	}
}

package com.lootsplit.interfaces;

import com.lootsplit.LootPanel;
import com.lootsplit.PlayerInfo;
import java.awt.Color;
import javax.swing.BoxLayout;
import javax.swing.JPanel;
import javax.swing.border.LineBorder;

public class PlayerPanel extends JPanel
{
	LootPanel lootPanel;

	public PlayerPanel(LootPanel lootPanel) {
		super();
		this.lootPanel = lootPanel;
		setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
		setBorder(new LineBorder(Color.BLACK, 2));
	}

	public void add(PlayerInfo playerInfo)
	{
		PlayerEntry playerEntry = new PlayerEntry(this, playerInfo);
		add(playerEntry);
		revalidate();
		repaint();
	}
}

package com.lootsplit.interfaces;

import com.lootsplit.PlayerInfo;
import com.lootsplit.TimePeriod;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class TimePeriodList extends JPanel
{
	private PlayerEntry playerEntry;
	private final PlayerInfo playerInfo;
	private final ArrayList<JButton> buttons;
	private static final DateTimeFormatter format = DateTimeFormatter.ofPattern("HH:mm");
	private static final DateTimeFormatter fullFormat = DateTimeFormatter.ISO_LOCAL_DATE_TIME;
	GridBagConstraints startButtonC = new GridBagConstraints();
	GridBagConstraints endButtonC = new GridBagConstraints();

	public TimePeriodList(PlayerEntry playerEntry, PlayerInfo playerInfo)
	{
		super();
		this.playerEntry = playerEntry;
		this.playerInfo = playerInfo;
		buttons = new ArrayList<>();
		setLayout(new GridBagLayout());
		setAlignmentX(Component.CENTER_ALIGNMENT);


		startButtonC.gridx = 0;
		startButtonC.gridy = GridBagConstraints.RELATIVE;
		startButtonC.weightx = 0.5;
		startButtonC.fill = GridBagConstraints.BOTH;

		endButtonC.gridx = 1;
		endButtonC.gridy = GridBagConstraints.RELATIVE;
		endButtonC.weightx = 0.5;
		endButtonC.fill = GridBagConstraints.BOTH;

		for (TimePeriod timePeriod : playerInfo.timePeriods) {
			addButton(timePeriod, true);
			addButton(timePeriod, false);
		}
	}

	public JButton addButton(TimePeriod timePeriod, boolean startElseEnd) {
		JButton button = new JButton();
		button.setAlignmentX(Component.CENTER_ALIGNMENT);
		button.setPreferredSize(new Dimension(200, 20));
		if (startElseEnd) {
			timePeriod.startButton = button;
		} else {
			timePeriod.endButton = button;
			button.setVisible(timePeriod.getEndms() >= 0);
		}
		button.setText(getButtonText(timePeriod, startElseEnd));

		button.addActionListener(e -> {
			TimePeriod last = playerInfo.timePeriods.get(playerInfo.timePeriods.size() - 1);
			boolean isLastTimeButton = last == timePeriod && (timePeriod.getEndms() < 0L && startElseEnd || !startElseEnd && timePeriod.getEndms() >= 0);
			String prompt = "Enter new " + (startElseEnd ? "start" : "end") + " time";
			if (isLastTimeButton) {
				prompt += " or enter d to delete";
			}
			String curTime = Instant.ofEpochMilli(startElseEnd ? timePeriod.getStartms() : timePeriod.getEndms()).atZone(ZoneId.systemDefault()).format(fullFormat);
			String input = JOptionPane.showInputDialog(prompt, curTime);
			if (input == null) {
				return;
			}
			if (isLastTimeButton && input.equalsIgnoreCase("d")) {
				if (startElseEnd) {
					remove(timePeriod.startButton);
					remove(timePeriod.endButton);
					revalidate();
					repaint();
					playerEntry.leaveOrJoinButton.setText("Rejoin");
					playerEntry.username.setForeground(Color.GRAY);
					this.playerInfo.timePeriods.remove(this.playerInfo.timePeriods.size() - 1);
				} else {
					playerEntry.leaveOrJoinButton.setText("Left");
					playerEntry.username.setForeground(Color.ORANGE);
					timePeriod.setEndms(-1L);
				}
				return;
			}
			try {
				long newTime = fullFormat.parse(input, LocalDateTime::from).atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();
				if (startElseEnd) {
					timePeriod.setStartms(newTime);
				} else {
					timePeriod.setEndms(newTime);
				}
			} catch (DateTimeException exception) {
				JOptionPane.showMessageDialog(null, "Could not parse date");
			}
		});

		buttons.add(button);
		if (startElseEnd) {
			add(button, startButtonC);
		} else {
			add(button, endButtonC);
		}
		button.revalidate();
		button.repaint();
		return button;
	}

	public static String getButtonText(TimePeriod timePeriod, boolean startElseEnd) {
		if (startElseEnd) {
			return "S:" + Instant.ofEpochMilli(timePeriod.getStartms()).atZone(ZoneId.systemDefault()).format(format);
		} else {
			if (timePeriod.getEndms() < 0) {
				return "";
			}
			return "E:" + Instant.ofEpochMilli(timePeriod.getEndms()).atZone(ZoneId.systemDefault()).format(format);
		}
	}
}

package com.lootsplit.interfaces;

import com.lootsplit.LootEntry;
import com.lootsplit.PlayerInfo;
import com.lootsplit.TimePeriod;
import java.awt.Color;
import java.awt.FlowLayout;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class PlayerEntry extends JPanel
{
	public JLabel username;
	public JButton leaveOrJoinButton;
	private final PlayerInfo playerInfo;
	private final TimePeriodList timePeriodList;
	private PlayerPanel playerPanel;

	public PlayerEntry(PlayerPanel playerPanel, final PlayerInfo playerInfo) {
		super();
		this.playerPanel = playerPanel;
		setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
		this.playerInfo = playerInfo;

		username = new JLabel(playerInfo.name);
		username.setForeground(Color.ORANGE);
		add(username);

		leaveOrJoinButton = new JButton("Left");
		timePeriodList = new TimePeriodList(this, playerInfo);

		JButton addLootButton = new JButton("Add Loot");
		addLootButton.addActionListener(e -> {
			String input = JOptionPane.showInputDialog("Enter Loot value (k)");
			if (input == null) {
				return;
			}

			int value;
			try {
				value = Integer.parseInt(input);
			} catch (NumberFormatException ignored) {
				JOptionPane.showMessageDialog(null, "Could not parse number");
				return;
			}

			String curTime = Instant.ofEpochMilli(System.currentTimeMillis()).atZone(ZoneId.systemDefault()).format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);
			String input2 = JOptionPane.showInputDialog("Enter time of loot", curTime);
			if (input2 == null) {
				return;
			}

			try {
				long time = DateTimeFormatter.ISO_LOCAL_DATE_TIME.parse(input2, LocalDateTime::from).atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();
				LootEntry entry = new LootEntry(value, playerInfo, time);
				playerPanel.lootPanel.plugin.loot.add(entry);
				playerPanel.lootPanel.add(entry);
			} catch (DateTimeException exception) {
				JOptionPane.showMessageDialog(null, "Could not parse date");
			}
		});
		add(addLootButton);

		leaveOrJoinButton.addActionListener(e -> {
			if (playerInfo.timePeriods.isEmpty() || this.playerInfo.timePeriods.get(playerInfo.timePeriods.size() - 1).getEndms() >= 0)
			{
				//rejoin
				leaveOrJoinButton.setText("Left");
				username.setForeground(Color.ORANGE);
				TimePeriod timePeriod = new TimePeriod(System.currentTimeMillis());
				playerInfo.timePeriods.add(timePeriod);
				timePeriodList.addButton(timePeriod, true);
				timePeriodList.addButton(timePeriod, false);
				timePeriodList.revalidate();
				timePeriodList.repaint();
				revalidate();
				repaint();
			}
			else
			{
				//left
				leaveOrJoinButton.setText("Rejoin");
				username.setForeground(Color.GRAY);
				TimePeriod timePeriod = playerInfo.timePeriods.get(playerInfo.timePeriods.size() - 1);
				timePeriod.setEndms(System.currentTimeMillis());
			}
		});
		add(leaveOrJoinButton);
		add(timePeriodList);
	}
}

package com.lootsplit.interfaces;

import com.lootsplit.LootEntry;
import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.border.LineBorder;

public class LootList extends JPanel
{
	protected List<LootIntEntry> entries = new ArrayList<>();
	final GridBagConstraints c = new GridBagConstraints();

	public LootList() {
		super();
		setLayout(new GridBagLayout());
		setBorder(new LineBorder(Color.BLACK, 2));
		c.gridy = GridBagConstraints.RELATIVE;
		c.gridx = 0;
		c.fill = GridBagConstraints.HORIZONTAL;
	}

	public void add(LootEntry lootEntry) {
		LootIntEntry lootIntEntry = new LootIntEntry(lootEntry);
		entries.add(lootIntEntry);
		add(lootIntEntry, c);
	}
}

package com.lootsplit;

import java.util.ArrayList;
import java.util.List;

public class PlayerInfo
{
	public final String name;
	public final List<TimePeriod> timePeriods = new ArrayList<>();

	public PlayerInfo(String name)
	{
		this.name = name;
		TimePeriod timePeriod = new TimePeriod(System.currentTimeMillis());
		timePeriods.add(timePeriod);
	}
}

package com.lootsplit;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("pk-loot-splitter")
public interface LootConfig extends Config
{
	@ConfigItem(
		keyName = "minLoot",
		name = "Minimum value (k) to split",
		description = "The value (k) of a loot key that should be split. Not applied to manual loot entry."
	)
	default int minimumLoot()
	{
		return 100;
	}
}

