package com.marty.walkup;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class MartyWalkupPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(MartyWalkupPlugin.class);
		RuneLite.main(args);
	}
}
package com.marty.walkup;

import javax.sound.sampled.*;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.concurrent.TimeUnit;

import lombok.extern.slf4j.Slf4j;
import net.runelite.client.RuneLite;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

@Slf4j
public class AudioPlayer {
    private static Clip clip = null;

    private static File fileLocation = null;

    public static File getSoundsDir() {
        if (AudioPlayer.fileLocation == null || !AudioPlayer.fileLocation.exists()) {
            File runeliteDir = new File(RuneLite.RUNELITE_DIR.toString());
            if (!runeliteDir.exists()) {
                log.info("$HOME/.runelite doesn't exist");
                return null;
            }
            if (!runeliteDir.isDirectory()) {
                log.info("$HOME/.runelite isn't a directory");
                return null;
            }
            File soundsDir = new File(runeliteDir.getPath() + "/sounds/marty/entrance");
            log.info(soundsDir.getAbsolutePath());
            if (!soundsDir.exists()) {
                log.info("$HOME/.runelite/sounds doesn't exist");
                if (!soundsDir.mkdirs()) {
                    log.info("Failed to make soundsDir");
                }
                HttpUrl git = HttpUrl.parse("https://raw.githubusercontent.com/Martyrshot/runelite-marty-entrance/master/sounds/com/marty/entrance/");
                if (git == null) return null;
                HttpUrl martyUrl = git.newBuilder().addPathSegment("marty.wav").build();

                try {
                    OkHttpClient httpClient = new OkHttpClient();
                    try(Response res = httpClient.newCall(new Request.Builder().url(martyUrl).build()).execute()) {
                        if (res.body() != null) {
                            Files.copy(new BufferedInputStream(res.body().byteStream()), Paths.get(soundsDir + "/marty.wav"));
                        }
                    }
                } catch (Exception e) {
                    log.info("Couldn't download very important file");
                }
            }
            AudioPlayer.fileLocation = soundsDir;
        }
        return AudioPlayer.fileLocation;
    }
    public static void play(String fileName, MartyWalkupConfig config) throws UnsupportedAudioFileException,
                                                                                    IOException,
                                                                                    IllegalArgumentException,
                                                                                    SecurityException,
                                                                                    LineUnavailableException
    {
        if (config.mute())
        {
            log.info("Is muted");
            return;
        }
        File audioFile = new File(fileName);
        log.info(audioFile.getPath());
        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(audioFile);
        Clip clip = AudioSystem.getClip();
        clip.open(audioInputStream);

        AudioPlayer.setVolume(clip, (float) config.volume());
        if (AudioPlayer.clip == null || !AudioPlayer.clip.isRunning())
        {
            AudioPlayer.clip = clip;
            AudioPlayer.clip.start();
        } else
        {
            long timeRemainingMS = AudioPlayer.clip.getMicrosecondLength() - AudioPlayer.clip.getMicrosecondPosition();
            try {
                if (config.interrupt()) {
                    if (AudioPlayer.clip != null && AudioPlayer.clip.isRunning()) {
                        AudioPlayer.clip.stop();
                    }
                    AudioPlayer.clip = clip;
                    AudioPlayer.clip.start();
                } else {
                    while (AudioPlayer.clip.isRunning()) {
                        TimeUnit.MICROSECONDS.sleep(timeRemainingMS);
                        if (!AudioPlayer.clip.isRunning()) {
                            AudioPlayer.clip = clip;
                            AudioPlayer.clip.start();
                            break;
                        }
                    }
                }
            } catch (Exception e) {
                log.info("Failed to sleep: " + e);
            }
        }
    }

    private static void setVolume(Clip c, float volume)
    {
        FloatControl gainControl = (FloatControl) c.getControl(FloatControl.Type.MASTER_GAIN);
        float range = gainControl.getMaximum() - gainControl.getMinimum();
        System.out.println("Max: " + gainControl.getMaximum() + " Min: " + gainControl.getMinimum());
        System.out.println("Range: " + range);
        if (volume < 0f || volume > 100f)
        {
            throw new IllegalArgumentException("Volume Not Valid: " + volume);
        }
        volume = volume / 100;
        float gain = (range * volume) + gainControl.getMinimum();
        System.out.println("Range * volume: " + range * volume);
        System.out.println("Gain: " + gain);
        gainControl.setValue(gain);
    }

}

package com.marty.walkup;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import java.io.File;

@Slf4j
@PluginDescriptor(
	name = "Marty's Walk Up Plugin"
)
public class MartyWalkupPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private MartyWalkupConfig config;

	private String displayName = null;
	private boolean playOnFirstTick = false;
	@Subscribe
	@SuppressWarnings("unused")
	public void onGameTick(GameTick event)
	{
		if (this.displayName == null && client.getGameState() == GameState.LOGGED_IN && this.playOnFirstTick)
		{
			if (client.getLocalPlayer() == null || client.getLocalPlayer().getName() == null)
			{
				log.info("No displayname yet...");
				return;
			}
			this.displayName = client.getLocalPlayer().getName();
			char[] displayNameArr = this.displayName.toCharArray();
			for (int i = 0; i < displayNameArr.length; i++)
			{
				if ((int)displayNameArr[i] == 160)
				{
					displayNameArr[i] = ' ';
				}
			}
			this.displayName = new String(displayNameArr);
			log.info("User " + displayName + " logged in.");
			String[] pairs = config.friendsAndSounds().split("\n");
			for (String p: pairs)
			{
				String[] pair = p.split("=");
				if (pair.length != 2) continue;
				String user = pair[0];
				String sound = pair[1];
				if (user.equals(this.displayName))
				{
					try {
						File audioFile = new File(AudioPlayer.getSoundsDir() + "/" + sound);
						AudioPlayer.play(audioFile.toString(), config);
					} catch (Exception e) {
						client.addChatMessage(ChatMessageType.CONSOLE, "", e.toString(),
								"[Marty's Entrance Error]");
					}
					return;
				}
			}
		}
	}
	@Subscribe
	@SuppressWarnings("unused")
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (client.getGameState() == GameState.LOGGED_IN) {
			this.playOnFirstTick = config.playOwnSound() && !config.mute();
		}
		if (this.displayName != null && client.getGameState() == GameState.LOGIN_SCREEN
				|| client.getGameState() == GameState.HOPPING) {
			this.displayName = null;
			this.playOnFirstTick = config.playOwnSound() && !config.mute();
		}
	}
	@Subscribe
	@SuppressWarnings("unused")
	public void onChatMessage(ChatMessage message)
	{
		if (message.getType() == ChatMessageType.LOGINLOGOUTNOTIFICATION)
		{
			String msgContent = message.getMessage();
			if (msgContent.contains("has logged in."))
			{
				String username = msgContent.split(" has")[0];
				log.info("Got sign in message for user: " + username + ".");
				String[] pairs = config.friendsAndSounds().split("\n");
				char [] usernameArr = username.toCharArray();
				for (int i = 0; i < usernameArr.length; i++)
				{
					if ((int)usernameArr[i] == 160)
					{
						usernameArr[i] = ' ';
					}
				}
				username = new String(usernameArr);
				for (String p: pairs)
				{
					String[] pair = p.split("=");
					String user = pair[0];
					String sound = pair[1];
					log.info("User: " + user + ", Username: " + username + ".");
					if (user.equals(username))
					{
						log.info("User matched");
						File audioFile = new File(AudioPlayer.getSoundsDir() + "/" + sound);
						try {
							AudioPlayer.play(audioFile.toString(), config);
						} catch (Exception e) {
							client.addChatMessage(ChatMessageType.CONSOLE, "", e.toString(),
												"[Marty's Entrance Error]");
						}
						return;
					} else {
						if (user.length() != username.length())
						{
							log.info("User: " + user + " length: " + user.length());
							log.info(" Username " + username + " length: " + username.length());
						}
						int len = username.length();
						if (user.length() <= username.length())
						{
							len = user.length();
						}
						for (int j = 0; j < len; j++)
						{
							if (user.charAt(j) != username.charAt(j))
							{
								log.info("Mismatch! User: " + (int)user.charAt(j) + " Username: "
																					+ (int)username.charAt(j));
							}
						}
					}
				}
			}
		}
	}

	@Provides
	MartyWalkupConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(MartyWalkupConfig.class);
	}
}

package com.marty.walkup;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;
@ConfigGroup("Marty's Walk Up Plugin")
public interface MartyWalkupConfig extends Config
{
	@ConfigItem(
		keyName = "friendsAndSounds",
		name = "Friends to announce",
		description = "Usernames and their entrance sound."
	)
	default String friendsAndSounds()
	{
		//noinspection SpellCheckingInspection
		return "Martyrshot=marty.wav\n";
	}

	@ConfigItem(
			keyName = "volume",
			name = "Volume",
			description = "Set the volume of the sounds to be played."
	)
	@Range(
			max = 100
	)
	default int volume() {
		return 75;
	}

	@ConfigItem(
			keyName = "mute",
			name = "Mute",
			description = "Mute entrance sounds."
	)
	default boolean mute() {
		return false;
	}

	@ConfigItem(
			keyName = "interrupt",
			name = "Interrupt Sound",
			description = "Immediately start playing the latest sound."
	)
	default boolean interrupt() {
		return false;
	}

	@ConfigItem(
			keyName = "playOwnSound",
			name = "Play your sound on login",
			description = "Play your sound on login."
	)
	default boolean playOwnSound() {
		return true;
	}
}

