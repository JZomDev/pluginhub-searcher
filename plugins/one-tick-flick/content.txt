package com.onetickflick;

import javax.inject.Inject;
import java.awt.*;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

import lombok.Setter;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;

public class OneTickFlickOverlay extends Overlay
{
	private static final int MIN_BAR_HEIGHT = 12;
	private static final int TEXT_SPACE = 20;
	private static final int X_SIZE = 4;
	private static final int TICK_LENGTH = 600;
	private static final Dimension MIN_SIZE = new Dimension(50, MIN_BAR_HEIGHT + TEXT_SPACE);
	private static final Dimension DEFAULT_SIZE = new Dimension(150, MIN_BAR_HEIGHT + TEXT_SPACE);

	private final OneTickFlickPlugin plugin;
	private final List<Integer> clickOffsets = new CopyOnWriteArrayList<>();
	private volatile boolean visible = true;

	@Setter
	private int greenStart;
	@Setter
	private int greenEnd;
	@Setter
	private boolean showCombo;
	@Setter
	private Color targetZoneColor;
	@Setter
	private Color backgroundColor;
	@Setter
	private Color clickColor;
	@Setter
	private Color swipeLineColor;
	@Setter
	private Color borderColor;
	@Setter
	private Color comboTextColor;


	@Inject
	OneTickFlickOverlay(OneTickFlickPlugin plugin, OneTickFlickConfig config)
	{
		this.plugin = plugin;
		greenStart = config.greenStart();
		greenEnd = config.greenEnd();
		showCombo = config.showCombo();
		targetZoneColor = config.targetZoneColor();
		backgroundColor = config.backgroundColor();
		clickColor = config.clickColor();
		swipeLineColor = config.swipeLineColor();
		borderColor = config.borderColor();
		comboTextColor = config.comboTextColor();

		setPosition(OverlayPosition.BOTTOM_LEFT);
		setPreferredSize(DEFAULT_SIZE);
		setResizable(true);
	}

	void recordClick(int offset)
	{
		clickOffsets.add(offset);
	}

	void newTick()
	{
		clickOffsets.clear();
	}

	void setVisible(boolean v)
	{
		visible = v;
	}

	boolean isVisible()
	{
		return visible;
	}

	@Override
	public Dimension render(Graphics2D g)
	{
		if (!visible)
		{
			return null;
		}

		Rectangle bounds = getBounds();
		Dimension size = getPreferredSize() == null ? DEFAULT_SIZE : getPreferredSize();

		int width = size.width;
		int height = size.height;
		if (bounds != null && bounds.width > 0 && bounds.height > 0)
		{
			width = Math.max(bounds.width, MIN_SIZE.width);
			height = Math.max(bounds.height, MIN_SIZE.height);
		}

		int barHeight = Math.max(MIN_BAR_HEIGHT, height - TEXT_SPACE);

		int greenX1 = width * greenStart / TICK_LENGTH;
		int greenX2 = width * greenEnd / TICK_LENGTH;

		g.setColor(backgroundColor);
		g.fillRect(0, 0, greenX1, barHeight);
		g.fillRect(greenX2, 0, width - greenX2, barHeight);

		g.setColor(targetZoneColor);
		g.fillRect(greenX1, 0, greenX2 - greenX1, barHeight);

		long ms = plugin.millisSinceTick();
		int barX = (int) (width * ms / (double) TICK_LENGTH);

		g.setColor(swipeLineColor);
		g.drawLine(barX, 0, barX, barHeight);

		g.setColor(borderColor);
		g.drawRect(0, 0, width, barHeight);

		g.setColor(clickColor);
		int y1 = barHeight / 2 - X_SIZE;
		int y2 = barHeight / 2 + X_SIZE;
		for (int offset : clickOffsets)
		{
			int x = width * offset / TICK_LENGTH;
			g.drawLine(x - X_SIZE, y1, x + X_SIZE, y2);
			g.drawLine(x - X_SIZE, y2, x + X_SIZE, y1);
		}

		if (showCombo)
		{
			g.setColor(comboTextColor);
			String text = "Combo: " + plugin.getCombo();
			int tx = (width - g.getFontMetrics().stringWidth(text)) / 2;
			int ty = barHeight + g.getFontMetrics().getAscent() + 2;
			g.drawString(text, tx, ty);
		}

		return new Dimension(width, height);
	}
}

package com.onetickflick;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("onetickflick")
public interface OneTickFlickConfig extends Config
{
	@ConfigItem(
			keyName = "detectPrayerBookClicks",
			name = "Detect prayer book clicks",
			position = 0,
			description = "Whether the overlay should also detect clicks on the prayer book.")
	default boolean detectPrayerBookClicks()
	{
		return true;
	}

	@Units(Units.MILLISECONDS)
	@ConfigItem(
			keyName = "greenStart",
			name = "Target zone start",
			description = "How long into the tick the target zone starts. Used as a visual aid and to determine the combo counter.",
			position = 1
	)
	@Range(min = 0, max = 600)
	default int greenStart()
	{
		return 0;
	}

	@Units(Units.MILLISECONDS)
	@ConfigItem(
			keyName = "greenEnd",
			name = "Target zone end",
			description = "How long into the tick the target zone ends. Used as a visual aid and to determine the combo counter.",
			position = 2
	)
	@Range(min = 0, max = 600)
	default int greenEnd()
	{
		return 500;
	}

	@ConfigItem(
			keyName = "showCombo",
			name = "Show combo counter",
			position = 3,
			description = "Whether to show the combo counter in the overlay. Combo counter is the number of consecutive double clicks within the target zone.")
	default boolean showCombo()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableTimeout",
			name = "Enable overlay timeout",
			position = 4,
			description = "Whether the overlay should automatically hide after a period without clicking the quick prayer orb.")
	default boolean enableTimeout()
	{
		return false;
	}

	@Units(Units.SECONDS)
	@ConfigItem(
			keyName = "overlayTimeoutSeconds",
			name = "Overlay timeout",
			position = 5,
			description = "How long after last clicking the quick prayer orb the overlay should remain visible")
	@Range(min = 1, max = 600)
	default int overlayTimeoutSeconds()
	{
		return 30;
	}

	@Units(Units.MILLISECONDS)
	@ConfigItem(
			keyName = "clickDelayMilliseconds",
			name = "Click delay - latency",
			position = 6,
			description = "Add a delay to your clicks to account for latency (ping).")
	@Range(min = 0, max = 500)
	default int clickDelayMilliseconds()
	{
		return 0;
	}

	@ConfigSection(
			position = 7,
			name = "Colors",
			description = "Recolor the various elements of the overlay"
	)
	String colorSection = "colorSection";

	@Alpha
	@ConfigItem(
			keyName = "targetZoneColor",
			name = "Target zone color",
			description = "Color of the target zone in the overlay",
			section = colorSection,
			position = 0
	)
	default Color targetZoneColor()
	{
		return new Color(0, 255, 0, 255);
	}

	@Alpha
	@ConfigItem(
			keyName = "backgroundColor",
			name = "Background color",
			description = "Color of the background bar in the overlay",
			section = colorSection,
			position = 1
	)
	default Color backgroundColor()
	{
		return new Color(255, 0, 0, 255);
	}

	@Alpha
	@ConfigItem(
			keyName = "clickColor",
			name = "X click color",
			description = "Color of the Xs in the overlay that indicate when you clicked",
			section = colorSection,
			position = 2
	)
	default Color clickColor()
	{
		return new Color(0, 0, 0, 255);
	}

	@Alpha
	@ConfigItem(
			keyName = "swipeLineColor",
			name = "Swipe line color",
			description = "Color of the vertical line that swipes left to right each tick",
			section = colorSection,
			position = 3
	)
	default Color swipeLineColor()
	{
		return new Color(0, 0, 0, 255);
	}

	@Alpha
	@ConfigItem(
			keyName = "borderColor",
			name = "Border color",
			description = "Color of the border around the overlay",
			section = colorSection,
			position = 4
	)
	default Color borderColor()
	{
		return new Color(0, 0, 0, 255);
	}

	@Alpha
	@ConfigItem(
			keyName = "comboTextColor",
			name = "Combo text color",
			description = "Color of the combo counter text in the overlay",
			section = colorSection,
			position = 5
	)
	default Color comboTextColor()
	{
		return new Color(255, 255, 255, 255);
	}
}

package com.onetickflick;

import com.google.inject.Provides;

import javax.inject.Inject;

import lombok.AccessLevel;
import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.api.MenuAction;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.gameval.VarbitID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

@PluginDescriptor(
		name = "1 Tick Flick",
		description = "Visual tick bar and combo counter for 1-tick prayer flicking with the quick prayer orb",
		tags = {"1", "one", "tick", "flick", "prayer", "metronome", "visual", "quick", "orb"}
)
public class OneTickFlickPlugin extends Plugin
{
	private static final int TICK_LENGTH = 600;

	@Inject
	private OverlayManager overlayManager;
	@Inject
	private OneTickFlickOverlay overlay;
	@Inject
	private OneTickFlickConfig config;
	@Inject
	private Client client;

	private long lastTickTime;
	private long lastInteraction;
	private final List<Integer> currentTickClicks = new CopyOnWriteArrayList<>(); // A list of times the quick prayer orb was clicked, in milliseconds since the last onGameTick.
	private final List<Integer> nextTickClicks = new CopyOnWriteArrayList<>(); // Only used if the click delay config option causes the click to fall into the next tick.

	@Getter(AccessLevel.PACKAGE)
	private int combo;

	@Override
	protected void startUp()
	{
		lastTickTime = System.currentTimeMillis();
		lastInteraction = lastTickTime;
		combo = 0;

		overlay.setVisible(true);
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
		currentTickClicks.clear();
		nextTickClicks.clear();
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (!event.getGroup().equals("onetickflick"))
		{
			return;
		}

		switch (event.getKey())
		{
			case "greenStart":
				overlay.setGreenStart(config.greenStart());
				break;
			case "greenEnd":
				overlay.setGreenEnd(config.greenEnd());
				break;
			case "showCombo":
				overlay.setShowCombo(config.showCombo());
				break;
			case "targetZoneColor":
				overlay.setTargetZoneColor(config.targetZoneColor());
				break;
			case "backgroundColor":
				overlay.setBackgroundColor(config.backgroundColor());
				break;
			case "clickColor":
				overlay.setClickColor(config.clickColor());
				break;
			case "swipeLineColor":
				overlay.setSwipeLineColor(config.swipeLineColor());
				break;
			case "borderColor":
				overlay.setBorderColor(config.borderColor());
				break;
			case "comboTextColor":
				overlay.setComboTextColor(config.comboTextColor());
				break;
		}
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		if (currentTickClicks.size() == 2 && currentTickClicks.stream().allMatch(this::inGreenZone))
		{
			combo++;
		}
		else
		{
			combo = 0;
		}

		currentTickClicks.clear();
		overlay.newTick();
		lastTickTime = System.currentTimeMillis();

		if (!nextTickClicks.isEmpty())
		{
			for (Integer offset : nextTickClicks)
			{
				currentTickClicks.add(offset);
				overlay.recordClick(offset);
			}
			nextTickClicks.clear();
		}

		if (config.enableTimeout() && overlay.isVisible())
		{
			long elapsed = System.currentTimeMillis() - lastInteraction;
			boolean timedOut = elapsed > config.overlayTimeoutSeconds() * 1000L;
			boolean prayerActive = client.getServerVarbitValue(VarbitID.PRAYER_ALLACTIVE) != 0;

			if (timedOut && !prayerActive) {
				overlay.setVisible(false);
			}
		}
		else if (!config.enableTimeout() && !overlay.isVisible())
		{
			overlay.setVisible(true);
		}
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked e)
	{
		Widget widget = e.getWidget();

		if (widget == null
				|| (widget.getId() != InterfaceID.Orbs.PRAYERBUTTON
				&& !(config.detectPrayerBookClicks() && isPrayerBookWidget(widget.getId()))))
		{
			return;
		}

		if (e.getMenuAction() != MenuAction.CC_OP && e.getMenuAction() != MenuAction.CC_OP_LOW_PRIORITY)
		{
			return;
		}

		int offset = (int) (System.currentTimeMillis() - lastTickTime);
		offset += config.clickDelayMilliseconds();

		if (offset >= TICK_LENGTH)
		{
			// If the click is past the current tick, we add it for the next tick instead. It will be added to the overlay on the next onGameTick.
			nextTickClicks.add(offset - TICK_LENGTH);
		}
		else
		{
			currentTickClicks.add(offset);
			overlay.recordClick(offset);
		}

		lastInteraction = System.currentTimeMillis();
		if (!overlay.isVisible())
		{
			// No matter what the overlay timeout options are, we want to show the overlay when the player clicks the quick prayer orb
			overlay.setVisible(true);
		}
	}

	/**
	 * Returns the number of milliseconds since the last tick.
	 */
	long millisSinceTick()
	{
		return System.currentTimeMillis() - lastTickTime;
	}

	/**
	 * Checks if the given milliseconds are within the green zone defined by the config.
	 *
	 * @param ms
	 * @return
	 */
	private boolean inGreenZone(int ms)
	{
		return ms >= config.greenStart() && ms <= config.greenEnd();
	}

	@Provides
	OneTickFlickConfig provideConfig(ConfigManager cm)
	{
		return cm.getConfig(OneTickFlickConfig.class);
	}

	/**
	 * Checks if the given widget ID is a prayer book widget.
	 *
	 * @param widgetId
	 * @return
	 */
	private static boolean isPrayerBookWidget(int widgetId)
	{
		return widgetId >= InterfaceID.Prayerbook.PRAYER1 && widgetId <= InterfaceID.Prayerbook.PRAYER30;
	}
}

package com.onetickflick;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class OneTickFlickPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(OneTickFlickPlugin.class);
		RuneLite.main(args);
	}
}
