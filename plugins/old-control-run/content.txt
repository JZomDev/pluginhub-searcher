package com.ControlRun;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ControlRunTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ControlRunPlugin.class);
		RuneLite.main(args);
	}
}
package com.ControlRun;

import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;


@Slf4j
@PluginDescriptor(
	name = "Old Control Run"
)
public class ControlRunPlugin extends Plugin
{

	@Inject
	private Client client;

	@Inject
	private KeyManager keyManager;

	@Inject
	private ControlButtonListener controlButtonListener;

	@Override
	protected void startUp() throws Exception
	{
		keyManager.registerKeyListener(controlButtonListener);
	}

	@Override
	protected void shutDown() throws Exception
	{
		keyManager.unregisterKeyListener(controlButtonListener);
	}

}

package com.ControlRun;

import javax.inject.Inject;
import java.awt.event.KeyEvent;
import net.runelite.api.*;
import net.runelite.client.input.KeyListener;


public class ControlButtonListener implements KeyListener
{
    @Inject
    private Client client;

    int runState;

    @Override
    public void keyTyped(KeyEvent e) {

    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == 17)
        {
            runState = client.getVarpValue(173);
            if (runState == 1)
                e.consume();
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {

    }
}

