package xyz.cecchetti.clearunsentmessages;

import com.google.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.util.HotkeyListener;

import javax.inject.Singleton;

@Slf4j
@Singleton
public class ClearUnsentHotkeyListener extends HotkeyListener {

    private final ClearUnsentConfig config;
    private final ChatMessageManager chatMessageManager;

    @Inject
    private ClearUnsentHotkeyListener(
            ClearUnsentConfig config,
            ChatMessageManager chatMessageManager
    ) {
        super(config::clearHotkey);
        this.config = config;
        this.chatMessageManager = chatMessageManager;
    }

    @Override
    public void hotkeyPressed() {
        if (!config.enableClearHotkey()) {
            return;
        }
        log.debug("Hot key pressed, clearing any unsent message");
        chatMessageManager.clearMessage();
    }
}

package xyz.cecchetti.clearunsentmessages;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Keybind;
import net.runelite.client.util.OSType;

import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;

@ConfigGroup("clear-unsent-messages")
public interface ClearUnsentConfig extends Config {

    @ConfigSection(
            name = "Time-based",
            description = "Settings for clearing unsent messages after a period typing inactivity",
            position = 0
    )
    String timeBasedSection = "timeBased";

    @ConfigSection(
            name = "Hotkey",
            description = "Settings for clearing unsent messages with a hotkey",
            position = 1
    )
    String hotkeySection = "hotkey";

    @ConfigItem(
            keyName = "enableTimeBased",
            name = "Enable time-based",
            description = "Clear unsent messages after a period of typing inactivity",
            section = timeBasedSection,
            position = 0
    )
    default boolean enableTimeBased() {
        return true;
    }

    @ConfigItem(
            keyName = "delay",
            name = "Delay (milliseconds)",
            description = "Period of inactivity after which unsent messages are cleared",
            section = timeBasedSection,
            position = 1
    )
    default int delay() {
        return 2000;
    }

    @ConfigItem(
            keyName = "onlySpacesNumbers",
            name = "Spaces & numbers only",
            description = "Clear only when message is made up of spaces and numbers",
            section = timeBasedSection,
            position = 2
    )
    default boolean onlySpacesNumbers() {
        return false;
    }

    @ConfigItem(
            keyName = "enableClearHotkey",
            name = "Enable hotkey",
            description = "Whether to listen for the hotkey",
            section = hotkeySection,
            position = 0
    )
    default boolean enableClearHotkey() {
        return false;
    }

    @ConfigItem(
            keyName = "clearHotkey",
            name = "Instant clear hotkey",
            description = "Any unsent messages will be immediately cleared when pressed",
            section = hotkeySection,
            position = 1
    )
    default Keybind clearHotkey() {
        return OSType.getOSType() == OSType.MacOS
                ? new Keybind(KeyEvent.VK_D, InputEvent.META_DOWN_MASK)
                : new Keybind(KeyEvent.VK_D, InputEvent.CTRL_DOWN_MASK);
    }
}

package xyz.cecchetti.clearunsentmessages;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ScriptID;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.gameval.VarClientID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.input.KeyManager;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.awt.event.KeyEvent;

@Slf4j
@RequiredArgsConstructor(onConstructor_ = @__(@Inject))
@Singleton
public class ChatMessageManager {
    private final Client client;
    private final ClientThread clientThread;
    private final KeyManager keyManager;

    public void clearMessage() {
        clientThread.invokeLater(() -> {
            // Changes what value the client is going to send when you press enter
            client.setVarcStrValue(VarClientID.CHATINPUT, "");

            // Changes what value you see down in the chatbox
            client.runScript(ScriptID.CHAT_PROMPT_INIT);

            // For compatibility with the Key Remapping plugin, to cause the chat to lock. We only want to send this when
            // the chatbox is focused, as otherwise, it could actually backspace a character -- see issue #6.
            if (isChatboxFocused()) {
                sendBackspace();
            }
        });
    }

    private boolean isChatboxFocused() {
        // See https://github.com/runelite/runelite/blob/master/runelite-client/src/main/java/net/runelite/client/plugins/keyremapping/KeyRemappingPlugin.java
        final Widget chatboxParent = client.getWidget(InterfaceID.Chatbox.UNIVERSE);
        if (chatboxParent == null || chatboxParent.getOnKeyListener() == null) {
            return false;
        }
        final Widget worldMapSearch = client.getWidget(InterfaceID.Worldmap.MAPLIST_DISPLAY);
        if (worldMapSearch != null && client.getVarcIntValue(VarClientID.WORLDMAP_SEARCHING) == 1) {
            return false;
        }
        final Widget report = client.getWidget(InterfaceID.Reportabuse.UNIVERSE);
        return report == null;
    }

    private void sendBackspace() {
        // Fixes compatibility with the Key Remapping plugin, causing it to lock the chat after we clear it
        final KeyEvent fakeKeyEvent = new KeyEventFakeBackspace();
        keyManager.processKeyPressed(fakeKeyEvent);
        keyManager.processKeyReleased(fakeKeyEvent);
        keyManager.processKeyTyped(fakeKeyEvent);
    }

}

package xyz.cecchetti.clearunsentmessages;

import java.awt.*;
import java.awt.event.KeyEvent;

public class KeyEventFakeBackspace extends KeyEvent {

    private static final Component STUB_COMPONENT = new Component() {};

    public KeyEventFakeBackspace() {
        super(STUB_COMPONENT, 1, System.currentTimeMillis(), 0, KeyEvent.VK_BACK_SPACE,
                (char) KeyEvent.VK_BACK_SPACE);
    }
}

package xyz.cecchetti.clearunsentmessages;

import com.google.inject.Inject;
import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

@Slf4j
@PluginDescriptor(name = "Clear Unsent Messages")
public class ClearUnsentPlugin extends Plugin {

	@Inject
	private ChatMessageManager chatMessageManager;

	@Inject
	private ClearUnsentTimeBasedKeyListener timeBasedKeyListener;

	@Inject
	private ClearUnsentHotkeyListener hotkeyListener;

	@Inject
	private KeyManager keyManager;

	@Provides
	ClearUnsentConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(ClearUnsentConfig.class);
	}

	@Override
	protected void startUp() throws Exception {
		keyManager.registerKeyListener(timeBasedKeyListener);
		keyManager.registerKeyListener(hotkeyListener);
	}

	@Override
	protected void shutDown() throws Exception {
		keyManager.unregisterKeyListener(timeBasedKeyListener);
		keyManager.unregisterKeyListener(hotkeyListener);
	}

}

package xyz.cecchetti.clearunsentmessages;

import com.google.common.collect.Sets;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.gameval.VarClientID;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.input.KeyListener;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.awt.event.KeyEvent;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;

@Slf4j
@RequiredArgsConstructor(onConstructor_ = @__(@Inject))
@Singleton
public class ClearUnsentTimeBasedKeyListener implements KeyListener {

    private static final Pattern PATTERN_ONLY_SPACES_AND_NUMBERS = Pattern.compile("^[ |\\d]*$");

    // Key codes that shouldn't reset the timer when pressed
    private static final Set<Integer> KEY_CODE_IGNORED = Sets.newHashSet(
            KeyEvent.VK_UP, KeyEvent.VK_DOWN, KeyEvent.VK_LEFT, KeyEvent.VK_RIGHT,
            KeyEvent.VK_CONTROL, KeyEvent.VK_ALT, KeyEvent.VK_META, KeyEvent.VK_SHIFT,
            KeyEvent.VK_ESCAPE
    );

    static {
        for (int kc = KeyEvent.VK_F1; kc <= KeyEvent.VK_F12; kc++) {
            KEY_CODE_IGNORED.add(kc);
        }
    }

    private final Client client;
    private final ClientThread clientThread;
    private final ChatMessageManager chatMessageManager;
    private final ClearUnsentConfig config;
    private final ScheduledExecutorService executorService;

    private ScheduledFuture<?> future;

    @Override
    public void keyPressed(KeyEvent e) {
        if (!config.enableTimeBased() || KEY_CODE_IGNORED.contains(e.getKeyCode()) || e instanceof KeyEventFakeBackspace) {
            return;
        }
        log.debug("Key pressed - checking back in {}ms to see if message should be cleared", config.delay());
        Optional.ofNullable(future).ifPresent(f -> f.cancel(true));
        future = executorService.schedule(this::maybeClearMessage, config.delay(), TimeUnit.MILLISECONDS);
    }

    private void maybeClearMessage() {
        clientThread.invokeLater(() -> {
            final String typedText = client.getVarcStrValue(VarClientID.CHATINPUT);
            if (!shouldClearMessage(typedText)) {
                log.debug("No update needed: [{}]", typedText);
                return;
            }
            log.debug("Clearing: [{}]", typedText);
            chatMessageManager.clearMessage();
        });
    }

    private boolean shouldClearMessage(String msg) {
        return !config.onlySpacesNumbers() || PATTERN_ONLY_SPACES_AND_NUMBERS.matcher(msg).matches();
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
    }
}

package xyz.cecchetti.clearunsentmessages;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class Bootstrap {

    /**
     * Starts RuneLite with the plugin loaded to aid in development
     * @param args
     */
    public static void main(String[] args) {
        ExternalPluginManager.loadBuiltin(ClearUnsentPlugin.class);
        try {
            RuneLite.main(args);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}

