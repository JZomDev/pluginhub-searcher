package com.stackvalue;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ExamplePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(StackValuePlugin.class);
		RuneLite.main(args);
	}
}
package com.stackvalue;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.*;

@ConfigGroup("stackvalue")
public interface StackValueConfig extends Config
{


	@Alpha
	@ConfigItem(keyName = "a-commonItemColor", name = "Common Item Color",
			description = "Color of a Common Item", position = 1)
	default Color getCommonItemColor()
	{
		return new Color(0,0,0,0.0f);
	}
	@ConfigItem(keyName = "a-commonItemValue", name = "Common GE Value",
			description = "Max Value of a Common Item", position = 2)
	default int getCommonItemValue()
	{
		return 1000;
	}

	@Alpha
	@ConfigItem(keyName = "b-uncommonItemColor", name = "Uncommon Item Color",
			description = "Color of a Uncommon Item", position = 3)
	default Color getUncommonItemColor()
	{
		return new Color(0, 240 / 255f, 0, 110 / 255f);
	}
	@ConfigItem(keyName = "b-uncommonItemValue", name = "Uncommon GE Value",
			description = "Max Value of a Uncommon Item", position = 4)
	default int getUncommonItemValue()
	{
		return 12500;
	}

	@Alpha
	@ConfigItem(keyName = "c-rareItemColor", name = "Rare Item Color",
			description = "Color of a Rare Item", position = 5)
	default Color getRareItemColor()
	{
		return new Color(0, 100 / 255f, 240 / 255f, 195 / 255f);
	}

	@ConfigItem(keyName = "c-rareItemValue", name = "Rare GE Value",
			description = "Max Value of a Rare Item", position = 6)
	default int getRareItemValue()
	{
		return 125000;
	}

	@Alpha
	@ConfigItem(keyName = "d-epicItemColor", name = "Epic Item Color",
			description = "Color of a Epic Item", position = 7)
	default Color getEpicItemColor()
	{
		return new Color(160 / 255f, 50 / 255f, 240 / 255f, 195 / 255f);
	}

	@ConfigItem(keyName = "d-epicItemValue", name = "Epic GE Value",
			description = "Max Value of a Epic Item", position = 8)
	default int getEpicItemValue()
	{
		return 1800000;
	}


	@Alpha
	@ConfigItem(keyName = "e-legendaryItemColor", name = "Legendary Item Color",
			description = "Color of a Legendary Item", position = 9)
	default Color getLegendaryItemColor()
	{
		return new Color(255 / 255f, 120 / 255f, 0 / 255f, 195 / 255f);
	}
}

package com.stackvalue;

// External
import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;

// RuneLite Plugins
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

// RuneLite
import net.runelite.client.config.ConfigManager;

// UI
import net.runelite.client.ui.overlay.OverlayManager;

import java.awt.*;

@Slf4j
@PluginDescriptor(
		name = "Stack Value"
)
public class StackValuePlugin extends Plugin
{
	@Inject
	private StackValueConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private StackValueOverlay overlay;

	@Override
	protected void startUp() throws Exception
	{
		log.info("ItemRarity started!");
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		log.info("ItemRarity stopped!");
		overlayManager.remove(overlay);
	}

	@Provides
	StackValueConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(StackValueConfig.class);
	}

	Color getRarityColor(final int itemPrice)
	{
		if (itemPrice < config.getCommonItemValue())
		{
			return config.getCommonItemColor();
		}
		else if (itemPrice < config.getUncommonItemValue())
		{
			return config.getUncommonItemColor();
		}
		else if (itemPrice < config.getRareItemValue())
		{
			return config.getRareItemColor();
		}
		else if (itemPrice < config.getEpicItemValue())
		{
			return config.getEpicItemColor();
		}

		return config.getLegendaryItemColor();
	}
}

package com.stackvalue;

// External
import com.google.inject.Inject;
import lombok.extern.slf4j.Slf4j;

// Inventory/Items
import net.runelite.api.ItemComposition;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.ui.overlay.WidgetItemOverlay;

// UI
import net.runelite.client.game.ItemManager;



import java.awt.*;
import java.awt.image.BufferedImage;


@Slf4j
public class StackValueOverlay extends WidgetItemOverlay
{
    private static final int INVENTORY_SIZE = 28;

    private final StackValuePlugin plugin;
    private final ItemManager itemManager;

    @Inject
    private StackValueOverlay(StackValuePlugin plugin, ItemManager itemManager)
    {
        this.plugin = plugin;
        this.itemManager = itemManager;

        showOnEquipment();
        showOnInventory();
        showOnBank();
    }

    private int itemPrice(int itemId)
    {
        // Used to get High Alch Price
        ItemComposition itemDef = itemManager.getItemComposition(itemId);

        // Get GE price and High Alch Price
        int gePrice = itemManager.getItemPrice(itemId);

        // Store Price
        int storePrice = itemDef.getPrice();

        // High Alch Price
        int haPrice = itemDef.getHaPrice();

        int maxPrice = Integer.max(gePrice, haPrice);

        //return Integer.max(maxPrice, storePrice);

        return(gePrice);
    }

    @Override
    public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem itemWidget)
    {
        int price = itemPrice(itemId);



        price = price * itemWidget.getQuantity();

        // Get Rarity Color
        final Color color = plugin.getRarityColor(price);

        // Null check and alpha optimization
        if (color == null || color.getAlpha() == 0)
        {
            return;
        }


        Rectangle bounds = itemWidget.getCanvasBounds();

        final BufferedImage outline = itemManager.getItemOutline(itemId, itemWidget.getQuantity(), color);
        graphics.drawImage(outline, (int)bounds.getX(), (int)bounds.getY(), null);
    }
}

