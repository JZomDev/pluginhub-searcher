package com.soundalertsexpanded.triggers;

import com.soundalertsexpanded.SoundAlertsExpandedConfig;
import com.soundalertsexpanded.player.LoggedInState;
import com.soundalertsexpanded.sound.Sound;
import com.soundalertsexpanded.sound.SoundEngine;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.eventbus.Subscribe;

import javax.inject.Inject;
import java.util.concurrent.ScheduledExecutorService;

@Slf4j
public class ChambersOfXericCompletion {

    // Define the chat message indicating the completion of a Chambers of Xeric raid
    private static final String RAID_COMPLETION_MESSAGE = "Congratulations - your raid is complete!";

    @Inject
    private Client client;

    @Inject
    private SoundAlertsExpandedConfig config;

    @Inject
    private ScheduledExecutorService executor;

    @Inject
    private SoundEngine soundEngine;

    @Inject
    private LoggedInState loggedInState;

    @Subscribe
    public void onChatMessage(ChatMessage chatMessage) {
        if (chatMessage.getType() == ChatMessageType.GAMEMESSAGE &&
                chatMessage.getMessage().contains(RAID_COMPLETION_MESSAGE)) {
            notifyRaidCompletion();
        }
    }

    private void notifyRaidCompletion() {
        if (!config.announceChambersRaidCompletion() || loggedInState.isLoggedOut()) {
            return;
        }

        soundEngine.playClip(Sound.CHAMBERS_OF_XERIC_COMPLETION, executor);
    }
}
/*
 * HerbPatches.java
 * Inspired by m0bilebtw/c-engineer-completed
 */

package com.soundalertsexpanded.triggers;

import com.soundalertsexpanded.SoundAlertsExpandedConfig;
import com.soundalertsexpanded.player.LoggedInState;
import com.soundalertsexpanded.sound.Sound;
import com.soundalertsexpanded.sound.SoundEngine;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.ItemContainer;
import net.runelite.api.ItemID;
import net.runelite.api.Player;
import net.runelite.api.Skill;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.api.events.GameTick;

import javax.inject.Inject;
import java.util.Set;
import java.util.concurrent.ScheduledExecutorService;

@Slf4j
public class MissingCapeAtHerbPatches {

    private static final int MISSING_FARMING_CAPE_COOLDOWN = 20;

    // Define all herb patches in the game excluding the farming guild.
    private static final Set<Integer> FARMING_HERB_PATCH_CHUNKS = Set.of(
            782749, 782750, 922041, 403843, 403842, 682406, 682405,
            444859, 444860, 719281, 719280, 727531, 729579, 723405, 969058
    );

    // Define herb patches chunks surrounding the farming guild herb patch.
    private static final Set<Integer> FARMING_GUILD_HERB_PATCH_CHUNKS = Set.of(
            315858, 317905, 315857
    );

    @Inject
    private Client client;

    @Inject
    private SoundAlertsExpandedConfig config;

    @Inject
    private ScheduledExecutorService executor;

    @Inject
    private SoundEngine soundEngine;

    @Inject
    private LoggedInState loggedInState;

    private int lastCapeWarningTick = -1;

    @Subscribe
    public void onGameTick(GameTick gameTick) {
        Player player = client.getLocalPlayer();
        WorldPoint wp = player.getWorldLocation();

        int tileX = wp.getX();
        int tileY = wp.getY();
        int chunkX = tileX >> 3;
        int chunkY = tileY >> 3;
        int chunkID = (chunkX << 11) | chunkY;

        if (shouldNotifyCape(chunkID)) {
            notifyAboutMissingCape();
        }
    }

    private boolean shouldNotifyCape(int chunkID) {
        return isInFarmingHerbPatch(chunkID) ||
                (isInFarmingGuildHerbPatch(chunkID) && config.announceMissingFarmCapeAtFarmingGuildHerbPatch());
    }

    private boolean isInFarmingHerbPatch(int chunkID) {
        return FARMING_HERB_PATCH_CHUNKS.contains(chunkID);
    }

    private boolean isInFarmingGuildHerbPatch(int chunkID) {
        return FARMING_GUILD_HERB_PATCH_CHUNKS.contains(chunkID);
    }

    private void notifyAboutMissingCape() {
        if (!config.announceMissingFarmCape() || loggedInState.isLoggedOut()) {
            return;
        }

        if (isCooldownActive() || client.getRealSkillLevel(Skill.FARMING) < 99) {
            return;
        }

        if (isCapeMissing()) {
            lastCapeWarningTick = client.getTickCount();
            soundEngine.playClip(Sound.FARMING_CAPE_NOT_EQUIPPED, executor);
        }
    }

    private boolean isCooldownActive() {
        return lastCapeWarningTick != -1 &&
                client.getTickCount() - lastCapeWarningTick < MISSING_FARMING_CAPE_COOLDOWN;
    }

    private boolean isCapeMissing() {
        ItemContainer equipment = client.getItemContainer(InventoryID.EQUIPMENT);

        return equipment != null &&
                !equipment.contains(ItemID.FARMING_CAPE) &&
                !equipment.contains(ItemID.FARMING_CAPET) &&
                !equipment.contains(ItemID.MAX_CAPE_13342); // The specific red max cape when it's equipped
    }
}

package com.soundalertsexpanded;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;

@ConfigGroup(SoundAlertsExpandedConfig.GROUP)
public interface SoundAlertsExpandedConfig extends Config {
	String GROUP = "soundalertsexpanded";

	@ConfigSection(
			name = "Sound Triggers",
			description = "Settings for various sound triggers.",
			position = 0
	)
	String SECTION_SOUND_TRIGGERS = "soundTriggers";

	@ConfigItem(
			keyName = "announceMissingFarmCape",
			name = "Notify Missing Farming/Max Cape",
			description = "Get an alert when at a herb patch without a Farming or Max Cape equipped.",
			section = SECTION_SOUND_TRIGGERS,
			position = 1
	)
	default boolean announceMissingFarmCape() {
		return true;
	}

	@ConfigItem(
			keyName = "announceMissingFarmCapeAtFarmingGuildHerbPatch",
			name = "Notify Missing Cape at Farming Guild",
			description = "Get an alert when at the Farming Guild herb patch without a Farming or Max Cape equipped.",
			section = SECTION_SOUND_TRIGGERS,
			position = 2
	)
	default boolean announceMissingFarmCapeAtFarmingGuildHerbPatch() {
		return true;
	}

	@ConfigItem(
			keyName = "announceChambersRaidCompletion",
			name = "Notify Chambers of Xeric Completion",
			description = "Get an alert when a Chambers of Xeric raid is completed.",
			section = SECTION_SOUND_TRIGGERS,
			position = 3
	)
	default boolean announceChambersRaidCompletion() {
		return true;
	}

	@Range(
			min = 0,
			max = 100
	)
	@ConfigItem(
			keyName = "soundVolume",
			name = "Sound Volume",
			description = "Adjust the volume of the sound alerts.",
			section = SECTION_SOUND_TRIGGERS,
			position = 4
	)
	default int soundVolume() {
		return 100;
	}
}
package com.soundalertsexpanded.sound;

import com.soundalertsexpanded.SoundAlertsExpandedConfig;

import lombok.extern.slf4j.Slf4j;
import net.runelite.client.audio.AudioPlayer;

import javax.inject.Inject;
import javax.inject.Singleton;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import java.io.IOException;
import java.time.Duration;
import java.util.concurrent.Executor;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

@Singleton
@Slf4j
public class SoundEngine {

    @Inject
    private SoundAlertsExpandedConfig config;

    @Inject
    private AudioPlayer audioPlayer;

    public void playClip(Sound sound, Executor executor) {
        executor.execute(() -> playClip(sound));
    }

    public void playClip(Sound sound, ScheduledExecutorService executor, Duration initialDelay) {
        executor.schedule(() -> playClip(sound), initialDelay.toMillis(), TimeUnit.MILLISECONDS);
    }

    private void playClip(Sound sound) {
        float gain = 20f * (float) Math.log10(config.soundVolume() / 100f);

        try {
            audioPlayer.play(SoundFileManager.getSoundFile(sound), gain);
        } catch (IOException | UnsupportedAudioFileException | LineUnavailableException e) {
            log.warn("Failed to load Sound Alerts Expanded sound {}", sound, e);
        }
    }
}
package com.soundalertsexpanded.sound;

import lombok.extern.slf4j.Slf4j;
import net.runelite.client.RuneLite;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.Arrays;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static java.util.function.Predicate.not;

@Slf4j
public class SoundFileManager {
    private SoundFileManager() {}

    private static final Path DOWNLOAD_DIR = Path.of(RuneLite.RUNELITE_DIR.getPath(), "sound-alerts-expanded");
    private static final String DELETE_WARNING_FILENAME = "_EXTRA_FILES_WILL_BE_DELETED_BUT_FOLDERS_WILL_REMAIN";
    private static final Path DELETE_WARNING_FILE = DOWNLOAD_DIR.resolve(DELETE_WARNING_FILENAME);

    private static final HttpUrl RAW_GITHUB = HttpUrl.parse("https://raw.githubusercontent.com/lewislarsen/sound-alerts-expanded/sounds");

    public static File getSoundFile(Sound sound) {
        return DOWNLOAD_DIR.resolve(sound.getResourceName()).toFile();
    }

    public static void prepareSoundFiles(OkHttpClient okHttpClient, boolean downloadStreamerTrolls) {
        ensureDownloadDirectoryExists();
        deleteUndesiredFilesIgnoringFolders(downloadStreamerTrolls);
        downloadNotYetPresentSounds(okHttpClient, downloadStreamerTrolls);
    }

    private static void ensureDownloadDirectoryExists() {
        try {
            if (!Files.exists(DOWNLOAD_DIR))
                Files.createDirectories(DOWNLOAD_DIR);
            Files.createFile(DELETE_WARNING_FILE);
        } catch (FileAlreadyExistsException ignored) {
            /* ignored */
        } catch (IOException e) {
            log.error("Could not create download directory or warning file", e);
        }
    }

    private static void deleteUndesiredFilesIgnoringFolders(boolean keepStreamerTrolls) {
        Set<String> desiredSoundFileNames = getDesiredSounds(keepStreamerTrolls)
                .map(Sound::getResourceName)
                .collect(Collectors.toSet());

        Set<Path> toDelete = getFilesPresent().stream()
                .filter(not(desiredSoundFileNames::contains))
                .map(DOWNLOAD_DIR::resolve)
                .collect(Collectors.toSet());
        try {
            for (Path pathToDelete : toDelete) {
                Files.delete(pathToDelete);
            }
        } catch (IOException e) {
            log.error("Failed to delete disused sound files", e);
        }
    }

    private static void downloadNotYetPresentSounds(OkHttpClient okHttpClient, boolean downloadStreamerTrolls) {
        getFilesToDownload(downloadStreamerTrolls)
                .forEach(filename -> downloadFilename(okHttpClient, filename));
    }

    private static void downloadFilename(OkHttpClient okHttpClient, String filename) {
        if (RAW_GITHUB == null) {
            log.error("Could not download sounds due to an unexpected null RAW_GITHUB value");
            return;
        }
        HttpUrl soundUrl = RAW_GITHUB.newBuilder().addPathSegment(filename).build();
        Request request = new Request.Builder().url(soundUrl).build();
        try (Response res = okHttpClient.newCall(request).execute()) {
            if (res.body() != null)
                Files.copy(new BufferedInputStream(res.body().byteStream()), DOWNLOAD_DIR.resolve(filename), StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException e) {
            log.error("Could not download sounds", e);
        }
    }

    private static Stream<String> getFilesToDownload(boolean downloadStreamerTrolls) {
        Set<String> filesAlreadyPresent = getFilesPresent();

        return getDesiredSounds(downloadStreamerTrolls)
                .map(Sound::getResourceName)
                .filter(not(filesAlreadyPresent::contains));
    }

    private static Set<String> getFilesPresent() {
        try (Stream<Path> paths = Files.list(DOWNLOAD_DIR)) {
            return paths
                    .filter(path -> !Files.isDirectory(path))
                    .map(Path::toFile)
                    .map(File::getName)
                    .filter(filename -> !DELETE_WARNING_FILENAME.equals(filename))
                    .collect(Collectors.toSet());
        } catch (IOException e) {
            log.warn("Could not list files in {}, assuming it to be empty", DOWNLOAD_DIR);
            return Set.of();
        }
    }

    private static Stream<Sound> getDesiredSounds(boolean includeStreamerTrolls) {
        return Arrays.stream(Sound.values());
    }
}
package com.soundalertsexpanded.sound;

import java.util.Random;

public enum Sound {
    FARMING_CAPE_NOT_EQUIPPED("FarmingCapeNotEquipped.wav"),
    CHAMBERS_OF_XERIC_COMPLETION("ChambersOfXericCompleted.wav"),
    ;

    private final String resourceName;

    Sound(String resNam) {
        this(resNam, false);
    }

    Sound(String resNam, boolean streamTroll) {
        resourceName = resNam;
    }

    public String getResourceName() {
        return resourceName;
    }

    private static final Random random = new Random();
}
package com.soundalertsexpanded.player;

import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.eventbus.Subscribe;

import javax.inject.Inject;
import javax.inject.Singleton;

@Singleton
public class LoggedInState {
    private static final int LOGGED_OUT = -1;

    @Inject
    private Client client;

    private int lastLoggedInTick = LOGGED_OUT;

    @Subscribe
    public void onGameStateChanged(GameStateChanged event) {
        setForCurrentGameState(event.getGameState());
    }

    public void setForCurrentGameState(GameState gameState) {
        if (gameState == GameState.LOGGED_IN) {
            setLastLoginTick(client.getTickCount());
        } else {
            setLoggedOut();
        }
    }

    public boolean isLoggedOut() {
        return this.lastLoggedInTick == LOGGED_OUT;
    }

    public boolean onlyJustLoggedIn(int tickWindow) {
        return client.getTickCount() - this.lastLoggedInTick < tickWindow;
    }

    public void setLoggedOut() {
        this.lastLoggedInTick = LOGGED_OUT;
    }

    public void setLastLoginTick(int lastLoggedInTick) {
        this.lastLoggedInTick = lastLoggedInTick;
    }
}
package com.soundalertsexpanded;

import com.google.inject.Provides;
import javax.inject.Inject;

import com.soundalertsexpanded.player.LoggedInState;
import com.soundalertsexpanded.sound.SoundFileManager;
import com.soundalertsexpanded.triggers.ChambersOfXericCompletion;
import com.soundalertsexpanded.triggers.MissingCapeAtHerbPatches;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import lombok.AccessLevel;
import lombok.Getter;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.eventbus.EventBus;
import okhttp3.OkHttpClient;
import java.util.concurrent.ScheduledExecutorService;

@Slf4j
@PluginDescriptor(
	name = "Sound Alerts Expanded",
	description = "A RuneLite plugin that adds additional sound alert triggers throughout Gielinor.",
	tags = {"alerts", "sound", "announce"}
)
public class SoundAlertsExpandedPlugin extends Plugin
{
	@Inject
	private Client client;

	@Getter(AccessLevel.PACKAGE)
	@Inject
	private ClientThread clientThread;

	@Inject
	private SoundAlertsExpandedConfig config;

	@Inject
	private ScheduledExecutorService executor;

	@Inject
	private OkHttpClient okHttpClient;

	@Inject
	private EventBus eventBus;

	@Inject
	private MissingCapeAtHerbPatches missingCapeAtHerbPatches;

	@Inject
	private ChambersOfXericCompletion chambersOfXericCompleted;

	@Inject
	private LoggedInState loggedInState;

	@Override
	protected void startUp() throws Exception {

		// register list of sound triggers
		eventBus.register(missingCapeAtHerbPatches);
		eventBus.register(chambersOfXericCompleted);
		// end list of triggers

		eventBus.register(loggedInState);
		loggedInState.setForCurrentGameState(client.getGameState());

		executor.submit(() -> SoundFileManager.prepareSoundFiles(okHttpClient, false));
	}

	@Override
	protected void shutDown() throws Exception {

		// unregister list of sound triggers
		eventBus.unregister(missingCapeAtHerbPatches);
		eventBus.unregister(chambersOfXericCompleted);
		// end list of triggers

		eventBus.unregister(loggedInState);
	}

	@Provides
	SoundAlertsExpandedConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(SoundAlertsExpandedConfig.class);
	}
}

package com.soundalertsexpanded;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SoundAlertsExpandedPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(SoundAlertsExpandedPlugin.class);
		RuneLite.main(args);
	}
}
