package com.hzy.cmbcalc;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CombatLevelCalculatorPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CombatLevelCalculatorPlugin.class);
		RuneLite.main(args);
	}
}
package com.hzy.cmbcalc;

import net.runelite.api.Skill;
import net.runelite.client.game.SkillIconManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.FlatTextField;
import net.runelite.client.util.ImageUtil;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;

public class CombatLevelCalculatorPanel extends PluginPanel {
    private final SkillIconManager iconManager;
    private final GridBagConstraints c;
    private JLabel cmbLevel;
    private final Skill[] skills;
    private final ArrayList<FlatTextField> skillFields;
    private final EmptyBorder emptyBorder;
    private final Dimension inputDimension;
    private final double xratio = 0.325;
    private int[] levels = {1,1,1,10,1,1,1};

    CombatLevelCalculatorPanel(SkillIconManager iconManager) {
        this.iconManager = iconManager;
        skillFields = new ArrayList<>();
        inputDimension = new Dimension(56, 44);
        c = new GridBagConstraints();
        c.fill = GridBagConstraints.NONE;

        setBorder(new EmptyBorder(20, 10, 10, 10));
        emptyBorder = new EmptyBorder(8, 2, 8, 2);

        skills = new Skill[]{Skill.ATTACK, Skill.STRENGTH, Skill.DEFENCE, Skill.HITPOINTS, Skill.RANGED, Skill.MAGIC, Skill.PRAYER};
        drawPanel();
    }

    void drawPanel() {
        setLayout(new GridBagLayout());
        c.gridx = 1;
        c.gridy = 0;
        addSkillInputs();
        cmbLevel = new JLabel();
        cmbLevel.setText("3.4");
        cmbLevel.setFont(FontManager.getRunescapeBoldFont());
        cmbLevel.setForeground(Color.WHITE);
        cmbLevel.setBorder(emptyBorder);
        c.gridx = 1;
        c.gridy = 9;
        add(cmbLevel, c);

        JButton button = new JButton("Calculate");
        button.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        button.setFont(FontManager.getRunescapeFont());
        button.setForeground(Color.WHITE);
        button.setBorder(emptyBorder);
        button.setFocusPainted(false);

        c.gridx = 1;
        c.gridy = 11;

        ActionListener listener = e -> {
            calc();
            button.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        };

        button.addActionListener(listener);
        add(button, c);
        ImageIcon icon = new ImageIcon(ImageUtil.loadImageResource(CombatLevelCalculatorPlugin.class, "/cmb.png"));
        c.gridx = 0;
        c.gridy = 9;
        JLabel cmbLabel = new JLabel(icon);
        cmbLabel.setBorder(emptyBorder);
        add(cmbLabel, c);

    }

    //Add skill icons & input fields to the panel
    void addSkillInputs() {
        KeyListener listener = new KeyAdapter() { //Numbers only
            @Override
            public void keyTyped(KeyEvent e ) {
                char ch = e.getKeyChar();
                if ( ((ch < '0') || (ch > '9')) && (ch != KeyEvent.VK_BACK_SPACE)) {
                    e.consume();
                }
            }
        };

        for (int i = 0; i < 7; i++) {    //Loop to generate the icons & fields
            c.gridx = 1;
            c.ipady = 4;
            c.ipadx = 4;
            c.gridy++;
            FlatTextField field = new FlatTextField();
            field.setText(skills[i] != Skill.HITPOINTS ? "1" : "10");
            field.setPreferredSize(inputDimension);

            field.setBackground(ColorScheme.DARKER_GRAY_COLOR);
            field.setHoverBackgroundColor(ColorScheme.DARKER_GRAY_HOVER_COLOR);
            field.setForeground(Color.WHITE);
            field.setFont(FontManager.getRunescapeSmallFont());


            field.addKeyListener(listener);

            add(field, c);
            skillFields.add(field);
            c.ipady = 0;
            c.ipadx = 0;
            ImageIcon skillIcon = new ImageIcon(iconManager.getSkillImage(skills[i]));
            c.gridx = 0;
            JLabel skillLabel = new JLabel(skillIcon);
            skillLabel.setBorder(emptyBorder);
            add(skillLabel, c);
        }

    }
    void calc() {
        for(int j = 0; j < 7; j++) {
            levels[j] = Integer.parseInt(skillFields.get(j).getText());
        }
        double lvl = (0.25 * (levels[2] + levels[3] + (levels[6] / 2))) + Math.max(Math.max(xratio * (levels[0] + levels[1]), xratio * ((levels[4] / 2) + levels[4])), xratio * ((levels[5] / 2) + levels[5]));

        cmbLevel.setText("" + (lvl < 3 ? 3 : (Math.min(lvl, 126.00))));
    }
}
package com.hzy.cmbcalc;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.game.SkillIconManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import java.awt.image.BufferedImage;

@Slf4j
@PluginDescriptor(
		name = "Combat Level Calculator",
		description="Enable the Combat Level Calculator panel",
		tags="combat, level, calc, panel"
)
public class CombatLevelCalculatorPlugin extends Plugin
{
	@Inject
	private SkillIconManager iconManager;

	@Inject
	private Client client;

	@Inject
	private ClientToolbar clientToolbar;

	private NavigationButton uiNavigationButton;


	@Override
	protected void startUp() throws Exception
	{
		iconManager = new SkillIconManager();
		final CombatLevelCalculatorPanel combatLevelCalculatorPanel = new CombatLevelCalculatorPanel(iconManager);
		final BufferedImage icon = ImageUtil.loadImageResource(CombatLevelCalculatorPlugin.class, "/cmb.png");
		uiNavigationButton = NavigationButton.builder()
				.tooltip("Combat Lvl Calculator")
				.icon(icon)
				.priority(12)
				.panel(combatLevelCalculatorPanel)
				.build();
		clientToolbar.addNavigation(uiNavigationButton);
	}

	@Override
	protected void shutDown() throws Exception
	{
		clientToolbar.removeNavigation(uiNavigationButton);
	}

}

