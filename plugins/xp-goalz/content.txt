package com.ericversteeg.pattern;

import com.ericversteeg.scope.*;

import java.util.*;

public class Pattern {

    private Scope[] roots;
    private Scope [] scopes;
    private long offsetBy = 0L;

    public Pattern(Scope [] roots, Scope [] scopes, long offsetBy)
    {
        this.roots = roots;
        this.scopes = scopes;
        this.offsetBy = offsetBy;
    }

    public boolean matches()
    {
        for (Scope root: roots)
        {
            if (stepMatch(root))
            {
                return true;
            }
        }
        return false;
    }

    private boolean stepMatch(Scope scope)
    {
        if (scope.getChildren().size() == 0)
        {
            return scope.matches(false);
        }

        for (Scope child: scope.getChildren())
        {
            if (stepMatch(child))
            {
                return scope.matches(false);
            }
        }
        return false;
    }

    public static Pattern parse(String pattern, Date estDate, long offsetBy)
    {
        String removedRepeatsPattern = removeRepeatScopes(pattern);
        if (!removedRepeatsPattern.equals(pattern.trim()))
        {
            return parse(removedRepeatsPattern, estDate, offsetBy);
        }

        List<Scope> roots = new LinkedList<>();
        List<Scope> allScopes = new LinkedList<>();

        String [] scopeStrings = pattern.trim().split("->");

        List<Scope> parentScopes = new LinkedList<>();

        StringBuilder rebuiltPrefix = new StringBuilder();
        for (int i = 0; i < scopeStrings.length; i++)
        {
            String scopeString = scopeStrings[i];

            List<Scope> scopes = new LinkedList<>();

            if (scopeString.contains("^"))
            {
                if (i == 0)
                {
                    String fixedFormat = specificFixedFormat(scopeString);
                    if (!fixedFormat.isEmpty())
                    {
                        return parse(fixedFormat + rebuiltSuffix(scopeStrings, i + 1), estDate, offsetBy);
                    }
                }

                String [] fixedParts = scopeString.trim()
                        .replace("[", "")
                        .replace("]", "")
                        .split("\\^");

                String type = fixedParts[0]
                        .replace("(", "")
                        .replace(")", "")
                        .trim();

                if (fixedParts.length > 1)
                {
                    String fixedValueString = fixedParts[1]
                            .trim()
                            .replace("(", "")
                            .replace(")", "");

                    String [] fixedValueParts;
                    if (fixedValueString.contains("-"))
                    {
                        String [] rangeParts = fixedValueString.split("-");
                        String low = rangeParts[0].trim();
                        String high = rangeParts[1].trim();
                        fixedValueParts = numberRangeValues(low, high);
                    }
                    else
                    {
                        fixedValueParts = fixedValueString.split(",");
                    }

                    for (String fixedValuePart: fixedValueParts)
                    {
                        int fixedValue = Integer.parseInt(fixedValuePart.trim());
                        if (parentScopes.isEmpty())
                        {
                            scopes.add(fixedScope(null, type, fixedValue, offsetBy));
                            roots.add(scopes.get(scopes.size() - 1));
                        }
                        else
                        {
                            for (Scope parent: parentScopes)
                            {
                                scopes.add(fixedScope(parent, type, fixedValue, offsetBy));
                            }
                        }
                    }
                }
            }
            else
            {
                String [] scopeParts = scopeString.trim()
                        .replace("[", "")
                        .replace("]", "")
                        .split("\\|");

                int [] extras = getRepeatExtras(scopeParts);

                int offset = extras[0];
                int interval = extras[1];

                String type = scopeParts[0].trim()
                        .replace("(", "")
                        .replace(")", "");

                if (type.matches(".*[0-9]{4}"))
                {
                    String [] typeValues;
                    if (type.contains("-"))
                    {
                        String [] rangeParts = type.split("-");
                        String low = rangeParts[0].trim();
                        String high = rangeParts[1].trim();
                        typeValues = numberRangeValues(low, high);
                    }
                    else
                    {
                        typeValues = type.split(",");
                    }
                    return parse(specificYearsFormat(typeValues)
                            + rebuiltSuffix(scopeStrings, i + 1), estDate, offsetBy);
                }
                if (monthNumber(type) > 0)
                {
                    String [] typeValues;
                    if (type.contains("-"))
                    {
                        String [] rangeParts = type.split("-");
                        String low = rangeParts[0].trim();
                        String high = rangeParts[1].trim();
                        typeValues = monthRangeValues(low, high);
                    }
                    else
                    {
                        typeValues = type.split(",");
                    }
                    return parse(rebuiltPrefix + specificMonthsFormat(
                            typeValues, i, offset, interval)
                                    + rebuiltSuffix(scopeStrings, i + 1), estDate, offsetBy);
                }
                else if (dayOfWeekNumber(type) > 0)
                {
                    String[] typeValues;
                    if (type.contains("-")) {
                        String[] rangeParts = type.split("-");
                        String low = rangeParts[0].trim();
                        String high = rangeParts[1].trim();
                        typeValues = dayOfWeekRangeValues(low, high);
                    } else {
                        typeValues = type.split(",");
                    }
                    return parse(rebuiltPrefix + specificDaysOfWeekFormat(
                            typeValues, offset, interval)
                                    + rebuiltSuffix(scopeStrings, i + 1), estDate, offsetBy);
                }
                else if (hourOfDayNumber(type) > 0)
                {
                    String[] typeValues;
                    if (type.contains("-")) {
                        String[] rangeParts = type.split("-");
                        String low = rangeParts[0].trim();
                        String high = rangeParts[1].trim();
                        typeValues = hourOfDayRangeValues(low, high);
                    } else {
                        typeValues = type.split(",");
                    }
                    return parse(rebuiltPrefix + specificHoursFormat(
                            typeValues, offset, interval)
                            + rebuiltSuffix(scopeStrings, i + 1), estDate, offsetBy);
                }

                if (parentScopes.isEmpty())
                {
                    scopes.add(repeatScope(null, estDate, type, offset, interval, offsetBy));
                    roots.add(scopes.get(scopes.size() - 1));
                }
                else
                {
                    for (Scope parent: parentScopes)
                    {
                        scopes.add(repeatScope(parent, estDate, type, offset, interval, offsetBy));
                    }
                }
            }

            allScopes.addAll(scopes);

            parentScopes.clear();
            parentScopes.addAll(scopes);

            rebuiltPrefix.append(scopeString).append("->");
        }

        return new Pattern(roots.toArray(new Scope[0]), allScopes.toArray(new Scope[0]), offsetBy);
    }

    private static String removeRepeatScopes(String pattern)
    {
        String [] scopeStrings = pattern.trim().split("->");

        StringBuilder rebuiltPattern = new StringBuilder();
        Set<String> scopeTypes = new HashSet<>();
        for (int i = 0; i < scopeStrings.length; i++) {
            String scopeString = scopeStrings[i]
                    .replace("[", "")
                    .replace("]", "")
                    .replace("(", "")
                    .replace(")", "");

            if (scopeString.contains("^"))
            {
                String type = scopeString.split("\\^")[0].trim().toLowerCase();
                if (!scopeTypes.contains(type))
                {
                    scopeTypes.add(type);
                    rebuiltPattern.append(scopeStrings[i]);
                    rebuiltPattern.append("->");
                }
            }
            else
            {
                String type = scopeString.split("\\|")[0].trim().toLowerCase();
                if (!scopeTypes.contains(type))
                {
                    scopeTypes.add(type);
                    rebuiltPattern.append(scopeStrings[i]);
                    rebuiltPattern.append("->");
                }
            }
        }
        return rebuiltPattern.substring(0, rebuiltPattern.length() - 2);
    }

    private static String rebuiltSuffix(String [] scopeStrings, int fromIndex)
    {
        StringBuilder sb = new StringBuilder();
        for (int i = fromIndex; i < scopeStrings.length; i++)
        {
            sb.append("->");
            sb.append(scopeStrings[i]);
        }
        return sb.toString();
    }

    private static Scope fixedScope(Scope parent, String type, int value, long offsetBy)
    {
        switch (type.toLowerCase())
        {
            case "y":
                return new YearScope(parent, value, offsetBy);
            case "m":
                return new MonthScope(parent, value, offsetBy);
            case "w":
                return new WeekScope(parent, value, offsetBy);
            case "d":
                return new DayScope(parent, value, offsetBy);
            case "h":
                return new HourScope(parent, value, offsetBy);
        }
        return null;
    }

    private static Scope repeatScope(Scope parent, Date estDate, String type, int offset, int interval, long offsetBy)
    {
        switch (type.toLowerCase())
        {
            case "y":
                return new YearScope(estDate, offset, interval, offsetBy);
            case "m":
                if (parent != null)
                {
                    return new MonthScope(parent, offset, interval, offsetBy);
                }
                else
                {
                    return new MonthScope(estDate, offset, interval, offsetBy);
                }
            case "w":
                if (parent != null)
                {
                    return new WeekScope(parent, offset, interval, offsetBy);
                }
                else
                {
                    return new WeekScope(estDate, offset, interval, offsetBy);
                }
            case "d":
                if (parent != null)
                {
                    return new DayScope(parent, offset, interval, offsetBy);
                }
                else
                {
                    return new DayScope(estDate, offset, interval, offsetBy);
                }
            case "h":
                if (parent != null)
                {
                    return new HourScope(parent, offset, interval, offsetBy);
                }
                else
                {
                    return new HourScope(estDate, offset, interval, offsetBy);
                }
        }
        return null;
    }

    private static int [] getRepeatExtras(String [] scopeParts)
    {
        int offset = 0;
        int interval = 1;

        String [] extraParts = new String[0];
        if (scopeParts.length > 1)
        {
            extraParts = new String [] { scopeParts[1].trim() };
        }

        if (scopeParts.length > 2)
        {
            extraParts = new String [] { scopeParts[1].trim(), scopeParts[2].trim() };
        }

        for (String part: extraParts)
        {
            if (part.startsWith("~")) { offset = Integer.parseInt(part.substring(1)); }
            else { interval = Integer.parseInt(part); }
        }

        return new int [] {offset, interval};
    }

    private static String specificFixedFormat(String scopeString)
    {
        if (scopeString.toLowerCase().contains("m"))
        {
            return "[Y]->" + scopeString;
        }
        else if (scopeString.toLowerCase().contains("w") ||
                 scopeString.toLowerCase().contains("d"))
        {
            return "[M]->" + scopeString;
        }
        return "";
    }

    private static String specificYearsFormat(String [] years)
    {
        StringBuilder yearsCsv = new StringBuilder();
        for (String year: years)
        {
            yearsCsv.append(year).append(",");
        }
        return "[Y^" + yearsCsv.substring(0, yearsCsv.length() - 1) + "]";
    }

    private static String specificMonthsFormat(String [] months, int scopeIndex, int offset, int interval)
    {
        StringBuilder monthCsv = new StringBuilder();
        for (String month: months)
        {
            monthCsv.append(monthNumber(month)).append(",");
        }
        String format = "";
        if (scopeIndex == 0)
        {
            format += "[Y|" + "~" + offset + "|" + interval + "]->";
        }
        format += "[M^" + monthCsv.substring(0, monthCsv.length() - 1) + "]";
        return format;
    }

    private static int monthNumber(String month)
    {
        String lcMonth = month.toLowerCase().trim();
        if (lcMonth.startsWith("jan")) { return 1; }
        else if (lcMonth.startsWith("feb")) { return 2; }
        else if (lcMonth.startsWith("mar")) { return 3; }
        else if (lcMonth.startsWith("apr")) { return 4; }
        else if (lcMonth.startsWith("may")) { return 5; }
        else if (lcMonth.startsWith("jun")) { return 6; }
        else if (lcMonth.startsWith("jul")) { return 7; }
        else if (lcMonth.startsWith("aug")) { return 8; }
        else if (lcMonth.startsWith("sep")) { return 9; }
        else if (lcMonth.startsWith("oct")) { return 10; }
        else if (lcMonth.startsWith("nov")) { return 11; }
        else if (lcMonth.startsWith("dec")) { return 12; }
        return -1;
    }

    private static String month(int number)
    {
        if (number == 1) { return "jan"; }
        else if (number == 2) { return "feb"; }
        else if (number == 3) { return "mar"; }
        else if (number == 4) { return "apr"; }
        else if (number == 5) { return "may"; }
        else if (number == 6) { return "jun"; }
        else if (number == 7) { return "jul"; }
        else if (number == 8) { return "aug"; }
        else if (number == 9) { return "sep"; }
        else if (number == 10) { return "oct"; }
        else if (number == 11) { return "nov"; }
        else if (number == 12) { return "dec"; }
        return "";
    }

    private static String specificDaysOfWeekFormat(String [] daysOfWeek, int offset, int interval)
    {
        StringBuilder daysOfWeekCsv = new StringBuilder();
        for (String day: daysOfWeek)
        {
            daysOfWeekCsv.append(dayOfWeekNumber(day)).append(",");
        }
        return "[W|" + "~" + offset + "|" + interval + "]->[D^" + daysOfWeekCsv.substring(0, daysOfWeekCsv.length() - 1) + "]";
    }

    private static int dayOfWeekNumber(String dayOfWeek)
    {
        String lcDayOfWeek = dayOfWeek.toLowerCase().trim();
        if (lcDayOfWeek.startsWith("mo")) { return 1; }
        else if (lcDayOfWeek.startsWith("tu")) { return 2; }
        else if (lcDayOfWeek.startsWith("we")) { return 3; }
        else if (lcDayOfWeek.startsWith("th")) { return 4; }
        else if (lcDayOfWeek.startsWith("fr")) { return 5; }
        else if (lcDayOfWeek.startsWith("sa")) { return 6; }
        else if (lcDayOfWeek.startsWith("su")) { return 7; }
        return -1;
    }

    private static String dayOfWeek(int number)
    {
        if (number == 1) { return "mo"; }
        else if (number == 2) { return "tu"; }
        else if (number == 3) { return "we"; }
        else if (number == 4) { return "th"; }
        else if (number == 5) { return "fr"; }
        else if (number == 6) { return "sa"; }
        else if (number == 7) { return "su"; }
        return "";
    }

    private static String specificHoursFormat(String [] hoursOfDay, int offset, int interval)
    {
        StringBuilder hoursOfDayCsv = new StringBuilder();
        for (String hour: hoursOfDay)
        {
            hoursOfDayCsv.append(hourOfDayNumber(hour)).append(",");
        }
        return "[W|" + "~" + offset + "|" + interval + "]->[H^" + hoursOfDayCsv.substring(0, hoursOfDayCsv.length() - 1) + "]";
    }

    private static int hourOfDayNumber(String dayOfWeek)
    {
        String lcHour = dayOfWeek.toLowerCase().trim().replace(" ", "");
        if (lcHour.startsWith("12am")) { return 0; }
        else if (lcHour.startsWith("1am")) { return 1; }
        else if (lcHour.startsWith("2am")) { return 2; }
        else if (lcHour.startsWith("3am")) { return 3; }
        else if (lcHour.startsWith("4am")) { return 4; }
        else if (lcHour.startsWith("5am")) { return 5; }
        else if (lcHour.startsWith("6am")) { return 6; }
        else if (lcHour.startsWith("7am")) { return 7; }
        else if (lcHour.startsWith("8am")) { return 8; }
        else if (lcHour.startsWith("9am")) { return 9; }
        else if (lcHour.startsWith("10am")) { return 10; }
        else if (lcHour.startsWith("11am")) { return 11; }
        else if (lcHour.startsWith("12pm")) { return 12; }
        else if (lcHour.startsWith("1pm")) { return 13; }
        else if (lcHour.startsWith("2pm")) { return 14; }
        else if (lcHour.startsWith("3pm")) { return 15; }
        else if (lcHour.startsWith("4pm")) { return 16; }
        else if (lcHour.startsWith("5pm")) { return 17; }
        else if (lcHour.startsWith("6pm")) { return 18; }
        else if (lcHour.startsWith("7pm")) { return 19; }
        else if (lcHour.startsWith("8pm")) { return 20; }
        else if (lcHour.startsWith("9pm")) { return 21; }
        else if (lcHour.startsWith("10pm")) { return 22; }
        else if (lcHour.startsWith("11pm")) { return 23; }
        return -1;
    }

    private static String hourOfDay(int number)
    {
        if (number == 0) { return "12am"; }
        else if (number == 1) { return "1am"; }
        else if (number == 2) { return "2am"; }
        else if (number == 3) { return "3am"; }
        else if (number == 4) { return "4am"; }
        else if (number == 5) { return "5am"; }
        else if (number == 6) { return "6am"; }
        else if (number == 7) { return "7am"; }
        else if (number == 8) { return "8am"; }
        else if (number == 9) { return "9am"; }
        else if (number == 10) { return "10am"; }
        else if (number == 11) { return "11am"; }
        else if (number == 12) { return "12pm"; }
        else if (number == 13) { return "1pm"; }
        else if (number == 14) { return "2pm"; }
        else if (number == 15) { return "3pm"; }
        else if (number == 16) { return "4pm"; }
        else if (number == 17) { return "5pm"; }
        else if (number == 18) { return "6pm"; }
        else if (number == 19) { return "7pm"; }
        else if (number == 20) { return "8pm"; }
        else if (number == 21) { return "9pm"; }
        else if (number == 22) { return "10pm"; }
        else if (number == 23) { return "11pm"; }
        return "";
    }

    private static String [] numberRangeValues(String low, String high)
    {
        int lowNum = Integer.parseInt(low);
        int highNum = Integer.parseInt(high);

        if (highNum < lowNum)
        {
            int temp = highNum;
            highNum = lowNum;
            lowNum = temp;
        }

        String [] values = new String [highNum - lowNum + 1];
        for (int i = lowNum; i <= highNum; i++)
        {
            values[i - lowNum] = String.valueOf(i);
        }
        return values;
    }

    private static String [] monthRangeValues(String low, String high)
    {
        int lowNum = monthNumber(low);
        int highNum = monthNumber(high);

        if (highNum < lowNum)
        {
            int temp = highNum;
            highNum = lowNum;
            lowNum = temp;
        }

        String [] values = new String [highNum - lowNum + 1];
        for (int i = lowNum; i <= highNum; i++)
        {
            values[i - lowNum] = month(i);
        }
        return values;
    }

    private static String [] dayOfWeekRangeValues(String low, String high)
    {
        int lowNum = dayOfWeekNumber(low);
        int highNum = dayOfWeekNumber(high);

        if (highNum < lowNum)
        {
            int temp = highNum;
            highNum = lowNum;
            lowNum = temp;
        }

        String [] values = new String [highNum - lowNum + 1];
        for (int i = lowNum; i <= highNum; i++)
        {
            values[i - lowNum] = dayOfWeek(i);
        }
        return values;
    }

    private static String [] hourOfDayRangeValues(String low, String high)
    {
        int lowNum = hourOfDayNumber(low);
        int highNum = hourOfDayNumber(high);

        if (highNum == 0)
        {
            highNum = 24;
        }

        if (highNum < lowNum)
        {
            int temp = highNum;
            highNum = lowNum;
            lowNum = temp;
        }
        else if (highNum == lowNum)
        {
            return new String [] { hourOfDay(highNum) };
        }

        highNum -= 1;

        String [] values = new String [highNum - lowNum + 1];
        for (int i = lowNum; i <= highNum; i++)
        {
            values[i - lowNum] = hourOfDay(i);
        }
        return values;
    }
}

package com.ericversteeg.bar;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum BarTextPosition
{
    INSIDE,
    OUTSIDE
}

package com.ericversteeg.bar;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum DoneTextType
{
    NONE(""),
    DONE("Done"),
    COMPLETE("Complete"),
    COMPLETED("Completed"),
    FINISHED("Finished");

    private final String text;
}

package com.ericversteeg.bar;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum BarTextAlignment
{
    LEADING,
    CENTER,
    TRAILING
}

package com.ericversteeg.bar;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum BarTextSize
{
    SMALL,
    LARGE
}

package com.ericversteeg.bar;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum BarTextType
{
    NONE,
    PERCENTAGE,
    PRECISE_PERCENTAGE,
    FRACTION,
    GAINED,
    REMAINING
}

package com.ericversteeg.goal;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum ResetType
{
    HOURLY("Hourly"),
    DAILY("Daily"),
    WEEKLY("Weekly"),
    MONTHLY("Monthly"),
    YEARLY("Yearly"),
    NONE("None");

    private final String name;
}

package com.ericversteeg.goal;

import com.google.gson.annotations.SerializedName;

import java.util.LinkedList;
import java.util.List;

public class GoalData {
    @SerializedName("last_check")
    public long lastCheck = 0L;

    @SerializedName("goals")
    public List<Goal> goals = new LinkedList<>();
}

package com.ericversteeg.goal;

import com.google.gson.annotations.SerializedName;

import java.util.LinkedList;
import java.util.List;

public class Goal {
    public static final int resetHourly = 0;
    public static final int resetDaily = 1;
    public static final int resetWeekly = 2;
    public static final int resetMonthly = 3;
    public static final int resetYearly = 4;
    public static final int resetNone = 5;

    public Goal(int skillId)
    {
        this.skillId = skillId;
    }

    @SerializedName("skill_id")
    public int skillId = 0;

    @SerializedName("reset_type")
    public int resetType = resetDaily;

    @SerializedName("progress_xp")
    public int progressXp = -1;

    @SerializedName("past_progress")
    public List<Float> pastProgress = new LinkedList<>();

    public int goalXp = 0;

    public boolean enabled = false;
    public boolean track = false;

    public void reset()
    {
        if (progressXp < 0) return;

        if (pastProgress == null)
        {
            pastProgress = new LinkedList<>();
        }

        pastProgress.add(0,
            (progressXp) /
            ((float) goalXp)
        );

        List<Float> recentPastProgress = new LinkedList<>();
        for (int i = 0; i < Math.min(pastProgress.size(), 25); i++)
        {
            recentPastProgress.add(pastProgress.get(i));
        }

        pastProgress = recentPastProgress;

        progressXp = -1;
    }
}

package com.ericversteeg.config;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum Hour
{
    NONE(""),
    MIDNIGHT("12AM"),
    ONE_AM("1AM"),
    TWO_AM("2AM"),
    THREE_AM("3AM"),
    FOUR_AM("4AM"),
    FIVE_AM("5AM"),
    SIX_AM("6AM"),
    SEVEN_AM("7AM"),
    EIGHT_AM("8AM"),
    NINE_AM("9AM"),
    TEN_AM("10AM"),
    ELEVEN_AM("11AM"),
    NOON("12AM"),
    ONE_PM("1PM"),
    TWO_PM("2PM"),
    THREE_PM("3PM"),
    FOUR_PM("4PM"),
    FIVE_PM("5PM"),
    SIX_PM("6PM"),
    SEVEN_PM("7PM"),
    EIGHT_PM("8PM"),
    NINE_PM("9PM"),
    TEN_PM("10PM"),
    ELEVEN_PM("11PM");

    private final String name;
}

package com.ericversteeg.config;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum DayCadence
{
    NONE(""),
    ONE("1"),
    TWO("2"),
    THREE("3"),
    FOUR("4"),
    FIVE("5"),
    SIX("6"),
    SEVEN("7"),
    EIGHT("8"),
    NINE("9"),
    TEN("10"),
    ELEVEN("11"),
    TWELVE("12"),
    THIRTEEN("13"),
    FOURTEEN("14"),
    FIFTEEN("15"),
    SIXTEEN("16"),
    SEVENTEEN("17"),
    EIGHTEEN("18"),
    NINETEEN("19"),
    TWENTY("20"),
    TWENTY_ONE("21"),
    TWENTY_TWO("22"),
    TWENTY_THREE("23");

    private final String name;
}

package com.ericversteeg.config;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum StackOrientation
{
    VERTICAL,
    HORIZONTAL
}

package com.ericversteeg.config;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum ResetOffsetTimeUnit
{
    MINUTE("Minute"),
    HOUR("Hour"),
    DAY("Day");

    private final String name;
}

package com.ericversteeg.config;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum AnchorType
{
    TOP_LEFT,
    TOP_RIGHT,
    BOTTOM_LEFT,
    BOTTOM_RIGHT
}

package com.ericversteeg.config;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum SortType
{
    PERCENTAGE,
    PERCENTAGE_FLIP,
    XP_GAINED,
    XP_GAINED_FLIP,
    XP_REMAINING,
    XP_REMAINING_FLIP
}

package com.ericversteeg.config;

import java.awt.*;

public class ColorDecoder {

    public static Color decodeARGB(String hexCode)
    {
        if (hexCode.startsWith("#"))
        {
            hexCode = hexCode.substring(1);
        }

        long argb = Long.parseLong(hexCode, 16);

        int a = (int) ((argb >> 24) & 0xFF);
        int r = (int) ((argb >> 16) & 0xFF);
        int g = (int) ((argb >> 8) & 0xFF);
        int b = (int) (argb & 0xFF);

        return new Color(r, g, b, a);
    }
}

package com.ericversteeg;

import com.ericversteeg.bar.*;
import com.ericversteeg.config.AnchorType;
import com.ericversteeg.config.StackOrientation;
import com.ericversteeg.goal.Goal;
import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.game.SkillIconManager;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.SkillColor;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ComponentConstants;
import net.runelite.client.ui.overlay.components.TextComponent;
import net.runelite.client.util.ImageUtil;

import javax.imageio.ImageIO;
import javax.inject.Inject;
import java.awt.*;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.text.NumberFormat;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.stream.Collectors;

import static com.ericversteeg.XpGoalsPlugin.TOTAL_XP_SKILL_ID;

class XpGoalsOverlay extends Overlay {

	private int ICON_SIZE = 16;

	private final Client client;
	private final XpGoalsPlugin plugin;
	private final XpGoalsConfig config;
	private final SkillIconManager iconManager;

	Widget viewportWidget;

	private Font font;

	private Color outerBorderColor = new Color(57, 41, 13, 124);
	private Color innerBorderColor = new Color(147, 141, 130, 37);
	private Color pastProgressBgColor = new Color(30, 30, 30, 125);
	private Color barBackgroundColor = Color.decode("#1b1b1b");
	private Color barBorderColor = Color.decode("#0b0b0b");

	int panelTopPadding = 4;
	int panelBottomPadding = 4;
	int panelHPadding = 4;

	int iconRightPadding = 3;

	private int panelX;
	private int panelY;
	private int panelWidth;
	private int panelHeight;

	private int topSectionHeight;

	boolean textOutsideOverride = false;
	boolean hideTextOverride = false;

	private int anchorX;
	private int anchorY;

	private int tooltipWidth = 120;
	int tooltipHeight = 120;

	private BufferedImage totalXpIcon;

	@Inject
	private XpGoalsOverlay(
			Client client,
			XpGoalsPlugin plugin,
			XpGoalsConfig config,
			SkillIconManager iconManager
	) {
		this.client = client;
		this.plugin = plugin;
		this.config = config;
		this.iconManager = iconManager;

		totalXpIcon = ImageUtil.loadImageResource(getClass(), "totalxp.png");

		try {
			GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
			InputStream inRunescapeSmall = FontManager.class.getResourceAsStream("runescape_small.ttf");
			Font smallFont = Font.createFont(Font.TRUETYPE_FONT, inRunescapeSmall)
					.deriveFont(Font.PLAIN,  12);
			ge.registerFont(smallFont);
			font = smallFont;
		}
		catch (Exception e)
		{
			font = FontManager.getRunescapeSmallFont();
		}

		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.UNDER_WIDGETS);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		viewportWidget = getViewportWidget();

		List<Goal> goals = getTrackedGoals();

		net.runelite.api.Point mouse = client.getMouseCanvasPosition();
		int mouseX = mouse.getX();
		int mouseY = mouse.getY();

		boolean hideIcons = config.hideSkillIcons();
		if (hideIcons)
		{
			ICON_SIZE = 0;
		}
		else
		{
			ICON_SIZE = 16;
		}

		AnchorType anchorType = config.anchorType();

		BarTextType textType = config.barTextType();
		BarTextPosition textPosition = config.barTextPosition();
		BarTextSize textSize = config.barTextSize();

		int barWidth = Math.max(Math.min(config.barWidth(), 1000), 45);
		int barHeight = Math.max(config.barHeight(), 2);

		int span = config.stackSize();

		int minBarSpacing = 0;
		if ((textPosition == BarTextPosition.OUTSIDE || textOutsideOverride) && textType != BarTextType.NONE)
		{
			if (textSize == BarTextSize.SMALL)
			{
				minBarSpacing = 13;
			}
			else
			{
				minBarSpacing = 16;
			}
		}
		else if (barHeight < ICON_SIZE + 4)
		{
			minBarSpacing = (ICON_SIZE - barHeight) / 2 + 2;
		}

		if (config.pastProgressSpan() > 4)
		{
			tooltipWidth = 140;
			tooltipHeight = 140;
		}

		int barSpacing = config.barSpacing() + minBarSpacing;

		boolean hideLabel = config.hideLabel();

		if (!goals.isEmpty())
		{
			if (hideLabel)
			{
				if (textPosition == BarTextPosition.OUTSIDE)
				{
					if (textSize == BarTextSize.SMALL)
					{
						topSectionHeight = 9;
					}
					else
					{
						topSectionHeight = 12;
					}
				}
				else
				{
					topSectionHeight = 0;
				}
			}
			else
			{
				topSectionHeight = 18;
				if ((textPosition == BarTextPosition.OUTSIDE || textOutsideOverride)
						&& textType != BarTextType.NONE && !hideTextOverride)
				{
					if (textSize == BarTextSize.SMALL)
					{
						topSectionHeight += 13;
					}
					else
					{
						topSectionHeight += 16;
					}
				}
			}

			int extraBottomPadding = 0;
			if (barHeight < ICON_SIZE)
			{
				extraBottomPadding = (ICON_SIZE - barHeight) / 2;
			}

			if (config.stackOrientation() == StackOrientation.VERTICAL)
			{
				panelWidth = (barWidth + ICON_SIZE + iconRightPadding + barSpacing) *
						((goals.size() - 1) / span + 1) + panelHPadding * 2 - barSpacing + 5;
			}
			else
			{
				panelWidth = (barWidth + ICON_SIZE + iconRightPadding) * Math.min(goals.size(), span) + barSpacing *
						Math.min(Math.max(span - 1, 1), goals.size()) + panelHPadding * 2;
			}

			if (config.stackOrientation() == StackOrientation.VERTICAL)
			{
				panelHeight =  panelTopPadding + topSectionHeight + barHeight * Math.min(goals.size(), span) + barSpacing *
						Math.min(Math.max(span - 1, 1), goals.size()) + panelBottomPadding + extraBottomPadding;
			}
			else
			{
				panelHeight = panelTopPadding + topSectionHeight + (barHeight + barSpacing) *
						((goals.size() - 1) / span + 1) + panelBottomPadding - barSpacing;
			}

			anchorX = config.anchorX();
			if (anchorType == AnchorType.TOP_RIGHT || anchorType == AnchorType.BOTTOM_RIGHT)
			{
				anchorX = viewportWidget.getCanvasLocation().getX() + viewportWidget.getWidth() + 28 - anchorX - panelWidth;
			}

			anchorY = config.anchorY();
			if (anchorType == AnchorType.BOTTOM_LEFT || anchorType == AnchorType.BOTTOM_RIGHT)
			{
				anchorY = viewportWidget.getCanvasLocation().getY() + viewportWidget.getHeight() + 41 - anchorY - panelHeight;
			}

			panelX = anchorX - panelHPadding;
			panelY = anchorY - panelTopPadding;

			if (config.showPanel())
			{
				if (config.isPanelCorrectionXNegative())
				{
					panelX += config.panelCorrectionX() * -1;
				}
				else
				{
					panelX += config.panelCorrectionX();
				}

				if (config.isPanelCorrectionYNegative())
				{
					panelY += config.panelCorrectionY() * -1;
				}
				else
				{
					panelY += config.panelCorrectionY();
				}

				if (config.isPanelWidthExtensionNegative())
				{
					panelWidth += config.panelWidthExtension() * -1;
				}
				else
				{
					panelWidth += config.panelWidthExtension();
				}

				if (config.isPanelHeightExtensionNegative())
				{
					panelHeight += config.panelHeightExtension() * -1;
				}
				else
				{
					panelHeight += config.panelHeightExtension();
				}

				renderPanel(graphics, panelX, panelY, panelWidth, panelHeight);
			}

			if (!hideLabel)
			{
				renderLabel(graphics);
			}
		}

		Goal tooltipGoal = null;

		int offsetX = panelHPadding;
		int offsetY = topSectionHeight;
		for (int i = 0; i < goals.size(); i++)
		{
			Goal goal = goals.get(i);
			if (goal.enabled)
			{
				Rectangle2D rectangle;
				if (barHeight < ICON_SIZE)
				{
					rectangle = new Rectangle2D.Float(
							panelX + offsetX,
							anchorY + offsetY - (ICON_SIZE - barHeight) / 2f,
							barWidth + ICON_SIZE + iconRightPadding + barSpacing,
							ICON_SIZE
					);
				}
				else
				{
					rectangle = new Rectangle2D.Float(
							panelX + offsetX,
							anchorY + offsetY,
							barWidth + ICON_SIZE + iconRightPadding + barSpacing,
							barHeight
					);
				}

				if (rectangle.contains(mouseX, mouseY))
				{
					tooltipGoal = goal;
				}

				float progress = getXpProgress(
						goal.progressXp, goal.goalXp);

				renderSkillIcon(graphics, offsetX, offsetY, goal);

				renderXpBar(
						graphics,
						barWidth,
						offsetX,
						offsetY,
						progress,
						goal
				);

				renderBarText(graphics, offsetX, offsetY, goal, progress, tooltipGoal == goal);

				// vertical stack
				if (config.stackOrientation() == StackOrientation.VERTICAL)
				{
					if ((i + 1) % span == 0)
					{
						offsetX += barWidth + ICON_SIZE + iconRightPadding + barSpacing;
						offsetY = topSectionHeight;
					}
					else
					{
						offsetY += barHeight + barSpacing;
					}
				}
				else
				{
					if ((i + 1) % span == 0)
					{
						offsetX = panelHPadding;
						offsetY += barHeight + barSpacing;
					}
					else
					{
						offsetX += barWidth + ICON_SIZE + iconRightPadding + barSpacing;
					}
				}
			}
		}

		if (tooltipGoal != null && config.showTooltip())
		{
			int x = mouseX + 15;
			int y = mouseY + 15;

			if (anchorType == AnchorType.TOP_RIGHT || anchorType == AnchorType.BOTTOM_RIGHT)
			{
				x -= tooltipWidth + 30;
			}

			if (anchorType == AnchorType.BOTTOM_LEFT || anchorType == AnchorType.BOTTOM_RIGHT)
			{
				y -= tooltipHeight + 30;
			}

			renderTooltip(graphics, x, y, tooltipGoal);
		}

		return null;
	}

	private void renderPanel(Graphics2D graphics, int x, int y, int width, int height)
	{
		graphics.setColor(ComponentConstants.STANDARD_BACKGROUND_COLOR);
		graphics.fillRect(x, y, width, height);

		graphics.setColor(outerBorderColor);
		graphics.drawRect(x, y, width, height);

		graphics.setColor(outerBorderColor);
		graphics.drawRect(x - 1, y - 1, width + 2, height + 2);

		graphics.setColor(innerBorderColor);
		graphics.drawRect(x + 1, y + 1, width - 2, height - 2);
	}

	private void renderLabel(Graphics2D graphics)
	{
		String label = config.labelText();
		FontMetrics fontMetrics = graphics.getFontMetrics();

		TextComponent textComponent = new TextComponent();
		textComponent.setFont(FontManager.getRunescapeFont());
		textComponent.setText(label);
		textComponent.setColor(Color.GREEN);
		textComponent.setPosition(new Point(
				panelWidth / 2 - fontMetrics.stringWidth(label) / 2 + panelX,
				anchorY + panelTopPadding + fontMetrics.getHeight() - 2)
		);
		textComponent.render(graphics);
	}

	private void renderSkillIcon(Graphics2D graphics2D, int offsetX, int offsetY, Goal goal)
	{
		if (ICON_SIZE == 0) return;

		Skill skill = getSkillForId(goal.skillId);

		BufferedImage icon;
		if (goal.skillId != TOTAL_XP_SKILL_ID)
		{
			icon = iconManager.getSkillImage(skill);
		}
		else
		{
			icon = totalXpIcon;
		}
		icon = ImageUtil.resizeImage(icon, ICON_SIZE, ICON_SIZE, true);

		int x = anchorX + offsetX;

		int barHeight = Math.max(config.barHeight(), 2);
		int y = anchorY + offsetY - (ICON_SIZE - barHeight) / 2;

		graphics2D.drawImage(icon, x, y, null);
	}

	private void renderXpBar(Graphics2D graphics, int barWidth, int offsetX,
							 int offsetY, float progress, Goal goal)
	{
		Color progressColor;

		Skill skill = plugin.skillForSkillId(goal.skillId);
		if (skill != null)
		{
			progressColor = SkillColor.find(skill).getColor();
		}
		else
		{
			progressColor = Color.GRAY;
		}

		Color backColor = barBackgroundColor;
		Color frontColor = progressColor;
		Color overfillColor = config.overfillColor();

		float relPercent = progress;

		if (progress > 1 && config.enableOverfill())
		{
			backColor = progressColor;
			frontColor = overfillColor;
			relPercent = progress - 1;

			if (relPercent > 1)
			{
				relPercent = 1;
			}
		}
		else if (progress > 1)
		{
			relPercent = 1;
		}

		int h = Math.max(config.barHeight(), 2);

		int x = anchorX + offsetX + ICON_SIZE + iconRightPadding;
		if (config.hideSkillIcons())
		{
			x -= iconRightPadding;
		}

		int y = anchorY + offsetY;

		graphics.setColor(backColor);
		graphics.fillRect(x, y, barWidth, h);

		graphics.setColor(frontColor);
		graphics.fillRect(x, y, (int) (relPercent * barWidth), h);

		graphics.setColor(barBorderColor);
		graphics.drawRect(x, y, barWidth, h);
	}

	private void renderBarText(Graphics2D graphics, int offsetX, int offsetY, Goal goal,
							   float progress, boolean isMouseover)
	{
		FontMetrics fontMetrics;
		TextComponent textComponent = new TextComponent();

		BarTextSize textSize = config.barTextSize();
		BarTextPosition position = config.barTextPosition();
		BarTextAlignment textAlignment = config.barTextAlignment();

		if (textSize == BarTextSize.SMALL)
		{
			graphics.setFont(font);
		}
		else
		{
			graphics.setFont(FontManager.getRunescapeSmallFont());
		}

		fontMetrics = graphics.getFontMetrics();

		int barH = Math.max(config.barHeight(), 2);

		textOutsideOverride = false;

		if (position == BarTextPosition.INSIDE)
		{
			if (barH < fontMetrics.getHeight())
			{
				graphics.setFont(font);
				fontMetrics = graphics.getFontMetrics();

				if (barH < fontMetrics.getHeight())
				{
					textOutsideOverride = true;
					if (textSize == BarTextSize.LARGE)
					{
						graphics.setFont(FontManager.getRunescapeSmallFont());
						fontMetrics = graphics.getFontMetrics();
					}
				}
			}
		}

		int h = fontMetrics.getHeight();

		String preciseFormatStr = "%.3f%%";

		Color textColor = Color.WHITE;
		String text = "";

		BarTextType textType = config.barTextType();
		if (isMouseover)
		{
			textType = config.mouseoverBarTextType();
		}

		switch (textType)
		{
			case FRACTION:
				text = NumberFormat.getInstance(Locale.ENGLISH).format(Math.max(goal.progressXp, 0)) +
						" / " + NumberFormat.getInstance(Locale.ENGLISH).format(goal.goalXp);
				break;
			case PERCENTAGE:
				text = (int) (progress * 100) + "%";
				break;
			case PRECISE_PERCENTAGE:
				text = String.format(preciseFormatStr, progress * 100);
				break;
			case GAINED:
				text = NumberFormat.getInstance(Locale.ENGLISH).format(Math.max(goal.progressXp, 0));
				break;
			case REMAINING:
				text = NumberFormat.getInstance(Locale.ENGLISH).format(goal.goalXp - Math.max(goal.progressXp, 0));
				break;
		}

		DoneTextType doneTextType = config.doneTextType();
		if (progress >= 1 && textType != BarTextType.NONE && doneTextType != DoneTextType.NONE)
		{
			text = doneTextType.getText();
		}

		if (config.includeResetType())
		{
			String label;
			switch (goal.resetType)
			{
				case Goal.resetHourly:
					label = "H";
					break;
				case Goal.resetDaily:
					label = "D";
					break;
				case Goal.resetWeekly:
					label = "W";
					break;
				case Goal.resetMonthly:
					label = "M";
					break;
				case Goal.resetYearly:
					label = "Y";
					break;
				case Goal.resetNone:
					label = "N";
					break;
				default:
					label = "";
			}
			text += " (" + label + ")";
		}

		if (position == BarTextPosition.INSIDE)
		{
			if (textAlignment == BarTextAlignment.LEADING)
			{
				text = "  " + text;
			}
			else if (textAlignment == BarTextAlignment.TRAILING)
			{
				text = text + "  ";
			}
		}

		int barW = Math.max(Math.min(config.barWidth(), 1000), 45);
		int w = fontMetrics.stringWidth(text);

		hideTextOverride = false;
		if (w > barW)
		{
			graphics.setFont(font);
			fontMetrics = graphics.getFontMetrics();

			w = fontMetrics.stringWidth(text);

			if (w > barW)
			{
				hideTextOverride = true;
				text = "";
			}
		}

		int x = 0;
		int y;

		int iconPadding = iconRightPadding;
		if (config.hideSkillIcons())
		{
			iconPadding = 0;
		}

		switch (textAlignment)
		{
			case LEADING:
				x = anchorX + offsetX + ICON_SIZE + iconPadding + 1;
				break;
			case CENTER:
				x = anchorX + offsetX + ICON_SIZE + iconPadding + (barW - w) / 2;
				break;
			case TRAILING:
				x = anchorX + offsetX + ICON_SIZE + iconPadding + barW - w;
		}

		if (position == BarTextPosition.OUTSIDE || textOutsideOverride)
		{
			y = anchorY + offsetY - 1;
		}
		else
		{
			y = anchorY + offsetY + (barH - h) / 2 + h;
		}

		textComponent.setText(text);
		textComponent.setPosition(new Point(x, y));
		textComponent.setColor(textColor);
		textComponent.render(graphics);
	}

	private void renderTooltip(Graphics2D graphics, int x, int y, Goal goal)
	{
		int w = tooltipWidth;
		int h = tooltipHeight;

		int border = 2;

		int span = Math.min(config.pastProgressSpan(), 5);
		span = Math.max(span, 1);

		if (span > 4)
		{
			w += 20;
			h += 20;
		}

		w -= (w - border * 2) % span;
		h -= (h - border * 2) % span;

		renderPanel(graphics, x, y, w, h);

		int xx = x + border;
		int yy = y + border;
		int ww = w - border * 2;
		int hh = h - border * 2;

		int cW = ww / span;
		int rH = hh / span;

		List<Float> pastProgress = goal.pastProgress;
		if (pastProgress == null || pastProgress.isEmpty())
		{
			String text = "No resets yet";

			TextComponent textComponent = new TextComponent();
			textComponent.setFont(FontManager.getRunescapeSmallFont());
			textComponent.setText(text);
			textComponent.setColor(Color.WHITE);

			graphics.setFont(FontManager.getRunescapeSmallFont());
			FontMetrics fontMetrics = graphics.getFontMetrics();

			textComponent.setPosition(new Point(
					x + (w - fontMetrics.stringWidth(text)) / 2,
					y + (h - fontMetrics.getHeight()) / 2 + fontMetrics.getHeight()
			));

			textComponent.render(graphics);

			return;
		}

		for (int r = 0; r < span; r++)
		{
			for (int c = 0; c < span; c++)
			{
				if (r * span + c < pastProgress.size())
				{
					float progress = pastProgress.get(r * span + c);

					renderPastProgressItem(
							graphics,
							xx + cW * c,
							yy + rH * r,
							cW,
							rH,
							goal,
							progress
					);
				}
			}
		}
	}

	private void renderPastProgressItem(Graphics2D graphics, int x, int y, int w, int h, Goal goal, float progress)
	{
		Skill skill = plugin.skillForSkillId(goal.skillId);

		Color color;
		if (skill != null)
		{
			color = SkillColor.find(skill).getColor();
		}
		else
		{
			color = Color.GRAY;
		}
		graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), 125));

		float percentToFill = Math.min(progress, 1);

		graphics.fillRect(x, y + (h - (int) (h * percentToFill)), w, (int) (h * percentToFill));

		graphics.setFont(FontManager.getRunescapeSmallFont());
		FontMetrics fontMetrics = graphics.getFontMetrics();

		String text = (int) (Math.min(progress, 9.99f) * 100) + "%";

		TextComponent textComponent = new TextComponent();
		textComponent.setFont(FontManager.getRunescapeSmallFont());
		textComponent.setText(text);
		textComponent.setPosition(new Point(x + (w - fontMetrics.stringWidth(text)) / 2, y + (h - fontMetrics.getHeight()) / 2 + 13));
		if (progress >= 1)
		{
			textComponent.setColor(Color.GREEN);
		}
		else
		{
			textComponent.setColor(Color.WHITE);
		}
		textComponent.render(graphics);
	}

	private Widget getViewportWidget()
	{
		Widget widget;

		widget = client.getWidget(ComponentID.RESIZABLE_VIEWPORT_INTERFACE_CONTAINER);
		if (widget != null) return widget;

		widget = client.getWidget(ComponentID.RESIZABLE_VIEWPORT_BOTTOM_LINE_INTERFACE_CONTAINER);
		if (widget != null) return widget;

		widget = client.getWidget(ComponentID.FIXED_VIEWPORT_INTERFACE_CONTAINER);
		if (widget != null) return widget;

		return client.getWidget(ComponentID.BANK_INVENTORY_ITEM_CONTAINER);
	}

	float getXpProgress(int progressXp, int goalXp)
	{
		if (goalXp == 0)
		{
			if (progressXp - goalXp <= 0)
			{
				return 1f;
			}
			else
			{
				return 2f;
			}
		}

		return Math.max(progressXp, 0) / (float) goalXp;
	}

	List<Goal> getTrackedGoals()
	{
		List<Goal> tracked = new LinkedList<>();

		for (Goal goal: plugin.goalData.goals)
		{
			if (goal.track)
			{
				tracked.add(goal);
			}
		}
		switch (config.sortType())
		{
			case PERCENTAGE:
				tracked = sortByPercent(tracked);
				break;
			case PERCENTAGE_FLIP:
				List<Goal> sortedPercent = sortByPercent(tracked);
				Collections.reverse(sortedPercent);
				tracked = sortedPercent;
				break;
			case XP_GAINED:
				tracked = sortByXpGained(tracked);
				break;
			case XP_GAINED_FLIP:
				List<Goal> sortedXpGained = sortByXpGained(tracked);
				Collections.reverse(sortedXpGained);
				tracked = sortedXpGained;
				break;
			case XP_REMAINING:
				tracked = sortByXpLeft(tracked);
				break;
			case XP_REMAINING_FLIP:
				List<Goal> sortedXpLeft = sortByXpLeft(tracked);
				Collections.reverse(sortedXpLeft);
				tracked = sortedXpLeft;
				break;
		}

		int maxGoals = config.maxGoals();
		if (maxGoals == 0)
		{
			return tracked;
		}
		else
		{
			int eIndex = Math.min(maxGoals, tracked.size());
			return tracked.subList(0, eIndex);
		}
	}

	private List<Goal> sortByPercent(List<Goal> goals)
	{
		return goals.stream().sorted((obj, other) -> {
			int progress = (int) (getXpProgress(
					obj.progressXp,
					obj.goalXp
			) * 100);

			if (progress >= 100 && progress < 200) progress = -2;
			else if (progress >= 200) progress = -1;

			int otherProgress = (int) (getXpProgress(
					other.progressXp,
					other.goalXp
			) * 100);

			if (otherProgress >= 100 && otherProgress < 200) otherProgress = -2;
			else if (otherProgress >= 200) otherProgress = -1;

			return otherProgress - progress;
		}).collect(Collectors.toList());
	}

	private List<Goal> sortByXpGained(List<Goal> goals)
	{
		return goals.stream().sorted((obj, other) -> {
			int xpGained = obj.progressXp;
			int otherXpGained = other.progressXp;

			return otherXpGained - xpGained;
		}).collect(Collectors.toList());
	}

	private List<Goal> sortByXpLeft(List<Goal> goals)
	{
		return goals.stream().sorted((obj, other) -> {
			int xpLeft = obj.goalXp - obj.progressXp;
			int otherXpLeft = other.goalXp - other.progressXp;

			return otherXpLeft - xpLeft;
		}).collect(Collectors.toList());
	}

	Skill getSkillForId(int skillId)
	{
		if (skillId == Skill.ATTACK.ordinal()) return Skill.ATTACK;
		else if (skillId == Skill.STRENGTH.ordinal()) return Skill.STRENGTH;
		else if (skillId == Skill.DEFENCE.ordinal()) return Skill.DEFENCE;
		else if (skillId == Skill.RANGED.ordinal()) return Skill.RANGED;
		else if (skillId == Skill.PRAYER.ordinal() )return Skill.PRAYER;
		else if (skillId == Skill.MAGIC.ordinal()) return Skill.MAGIC;
		else if (skillId == Skill.RUNECRAFT.ordinal()) return Skill.RUNECRAFT;
		else if (skillId == Skill.CONSTRUCTION.ordinal()) return Skill.CONSTRUCTION;
		else if (skillId == Skill.HITPOINTS.ordinal()) return Skill.HITPOINTS;
		else if (skillId == Skill.AGILITY.ordinal()) return Skill.AGILITY;
		else if (skillId == Skill.HERBLORE.ordinal()) return Skill.HERBLORE;
		else if (skillId == Skill.THIEVING.ordinal()) return Skill.THIEVING;
		else if (skillId == Skill.CRAFTING.ordinal()) return Skill.CRAFTING;
		else if (skillId == Skill.FLETCHING.ordinal()) return Skill.FLETCHING;
		else if (skillId == Skill.SLAYER.ordinal()) return Skill.SLAYER;
		else if (skillId == Skill.HUNTER.ordinal()) return Skill.HUNTER;
		else if (skillId == Skill.MINING.ordinal()) return Skill.MINING;
		else if (skillId == Skill.SMITHING.ordinal()) return Skill.SMITHING;
		else if (skillId == Skill.FISHING.ordinal()) return Skill.FISHING;
		else if (skillId == Skill.COOKING.ordinal()) return Skill.COOKING;
		else if (skillId == Skill.FIREMAKING.ordinal()) return Skill.FIREMAKING;
		else if (skillId == Skill.WOODCUTTING.ordinal()) return Skill.WOODCUTTING;
		else if (skillId == Skill.FARMING.ordinal()) return Skill.FARMING;
		else return null;
	}
}

package com.ericversteeg.scope;

import java.time.*;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalAdjusters;
import java.time.temporal.TemporalField;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

public abstract class Scope
{
    protected LocalDate estLocalDate;
    protected LocalDateTime refLocalDate;
    protected LocalDateTime nowLocalDate = LocalDateTime.now();

    public enum Type
    {
        FIXED,
        REPEAT
    }

    protected Scope parent = null;

    private List<Scope> children = new LinkedList<>();

    private Type type;

    private Date estDate;

    // fixed
    protected TemporalField temporalField;
    protected int value;

    // repeat
    private int offset;
    private int interval;

    public Scope(Scope parent, int value, long offsetBy)
    {
        this.parent = parent;
        if (parent != null)
        {
            parent.addChild(this);
        }

        this.type = Type.FIXED;

        this.value = value;

        nowLocalDate = LocalDateTime.now().minusSeconds(offsetBy(offsetBy));
    }

    public Scope(Scope parent, TemporalField temporalField, int value, long offsetBy)
    {
        this.parent = parent;
        if (parent != null)
        {
            parent.addChild(this);
        }

        this.type = Type.FIXED;

        this.temporalField = temporalField;
        this.value = value;

        setReferenceDate();

        nowLocalDate = LocalDateTime.now().minusSeconds(offsetBy(offsetBy));
    }

    public Scope(Scope parent, int offset, int interval, long offsetBy)
    {
        this.parent = parent;
        if (parent != null)
        {
            parent.addChild(this);
        }

        this.type = Type.REPEAT;

        this.offset = offset;
        this.interval = interval;

        setReferenceDate();

        nowLocalDate = LocalDateTime.now().minusSeconds(offsetBy(offsetBy));
    }

    public Scope(Date estDate, int offset, int interval, long offsetBy)
    {
        this.type = Type.REPEAT;

        estLocalDate = estDate.toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();

        this.offset = offset;
        this.interval = interval;

        setReferenceDate();

        nowLocalDate = LocalDateTime.now().minusSeconds(offsetBy(offsetBy));
    }

    void setReferenceDate()
    {
        if (parent == null)
        {
            if (type == Type.REPEAT)
            {
                refLocalDate = estLocalDate.withYear(2023).withDayOfYear(1).atStartOfDay();
            }
            else if (this instanceof  HourScope)
            {
                refLocalDate = estLocalDate.atTime(estLocalDate.get(ChronoField.HOUR_OF_DAY), 0);
            }
            else if (this instanceof DayScope)
            {
                refLocalDate = estLocalDate.atStartOfDay();
            }
            else if (this instanceof WeekScope)
            {
                refLocalDate = estLocalDate.with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY)).atStartOfDay();
            }
            else if (this instanceof MonthScope)
            {
                refLocalDate = estLocalDate.withDayOfMonth(1).atStartOfDay();
            }
            else if (this instanceof YearScope)
            {
                refLocalDate = estLocalDate.withDayOfYear(1).atStartOfDay();
            }
        }
        else if (parent instanceof YearScope)
        {
            refLocalDate = nowLocalDate.toLocalDate().withDayOfYear(1).atStartOfDay();
        }
        else if (parent instanceof MonthScope)
        {
            refLocalDate = nowLocalDate.toLocalDate().withDayOfMonth(1).atStartOfDay();
        }
        else if (parent instanceof WeekScope)
        {
            refLocalDate = nowLocalDate.toLocalDate().with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY)).atStartOfDay();
        }
        else if (parent instanceof DayScope)
        {
            refLocalDate = nowLocalDate.toLocalDate().atStartOfDay();
        }
    }

    public boolean matches(boolean alsoParents)
    {
        if (type == null)
        {
            if (parent != null && alsoParents)
            {
                return parent.matches(true);
            }
            else
            {
                return true;
            }
        }

        if (type == Type.FIXED)
        {
            if (parent != null && alsoParents)
            {
                return parent.matches(true) && matchesFixed();
            }
            else
            {
                return matchesFixed();
            }
        }

        if (parent != null && alsoParents)
        {
            return parent.matches(true) && matchesInterval(refLocalDate, nowLocalDate.toLocalDate(), offset, interval);
        }
        else
        {
            return matchesInterval(refLocalDate, nowLocalDate.toLocalDate(), offset, interval);
        }
    }

    protected boolean matchesFixed()
    {
        return nowLocalDate.get(temporalField) == value;
    }

    abstract boolean matchesInterval(LocalDateTime estLocalDate, LocalDate nowLocalDate, int offset, int interval);

    public void addChild(Scope scope)
    {
        children.add(scope);
    }

    public List<Scope> getChildren()
    {
        return children;
    }

    public long offsetBy(long offset)
    {
        if (offset % 86400 == 0)
        {
            if (!(this instanceof DayScope) && !(this instanceof HourScope))
            {
                return offset;
            }
        }
        else if (offset % 3600 == 0)
        {
            if (!(this instanceof HourScope))
            {
                return offset;
            }
        }
        else
        {
            return offset;
        }
        return 0;
    }

    @Override
    public String toString() {
        return "Scope{" +
                "estLocalDate=" + estLocalDate +
                ", refLocalDate=" + refLocalDate +
                ", nowLocalDate=" + nowLocalDate +
                ", parent=" + parent +
                ", type=" + type +
                ", estDate=" + estDate +
                ", temporalField=" + temporalField +
                ", value=" + value +
                ", offset=" + offset +
                ", interval=" + interval +
                '}';
    }
}

package com.ericversteeg.scope;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.util.Date;

public class HourScope extends Scope
{
    public HourScope(Scope parent, int value, long offsetBy)
    {
        super(parent, value, offsetBy);

        temporalField = ChronoField.HOUR_OF_DAY;
    }

    public HourScope(Scope parent, int offset, int interval, long offsetBy)
    {
        super(parent, offset, interval, offsetBy);
    }

    public HourScope(Date estDate, int offset, int interval, long offsetBy)
    {
        super(estDate, offset, interval, offsetBy);
    }

    @Override
    boolean matchesInterval(LocalDateTime refLocalDate, LocalDate nowLocalDate, int offset, int interval)
    {
        LocalDateTime nowSoH = nowLocalDate.atTime(nowLocalDate.get(ChronoField.HOUR_OF_DAY), 0);

        long hoursSince = ChronoUnit.HOURS.between(refLocalDate, nowSoH);

        return (hoursSince - offset) >= 0 && (hoursSince - offset) % interval == 0;
    }
}

package com.ericversteeg.scope;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.util.Date;

public class DayScope extends Scope
{
    public DayScope(Scope parent, int value, long offsetBy)
    {
        super(parent, value, offsetBy);

        if (parent instanceof YearScope)
        {
            temporalField = ChronoField.DAY_OF_YEAR;
        }
        else if (parent instanceof MonthScope)
        {
            temporalField = ChronoField.DAY_OF_MONTH;
        }
        else if (parent instanceof WeekScope)
        {
            temporalField = ChronoField.DAY_OF_WEEK;
        }
    }

    public DayScope(Scope parent, int offset, int interval, long offsetBy)
    {
        super(parent, offset, interval, offsetBy);
    }

    public DayScope(Date estDate, int offset, int interval, long offsetBy)
    {
        super(estDate, offset, interval, offsetBy);
    }

    @Override
    boolean matchesInterval(LocalDateTime refLocalDate, LocalDate nowLocalDate, int offset, int interval)
    {
        LocalDateTime nowSoD = nowLocalDate.atStartOfDay();

        long daysSince = ChronoUnit.DAYS.between(refLocalDate, nowSoD);

        return (daysSince - offset) >= 0 && (daysSince - offset) % interval == 0;
    }
}

package com.ericversteeg.scope;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.IsoFields;
import java.time.temporal.TemporalAdjusters;
import java.util.Date;

public class WeekScope extends Scope
{
    public WeekScope(Scope parent, int value, long offsetBy)
    {
        super(parent, value, offsetBy);

        if (parent instanceof YearScope)
        {
            temporalField = IsoFields.WEEK_OF_WEEK_BASED_YEAR;
        }
    }

    public WeekScope(Scope parent, int offset, int interval, long offsetBy)
    {
        super(parent, offset, interval, offsetBy);
    }

    public WeekScope(Date estDate, int offset, int interval, long offsetBy)
    {
        super(estDate, offset, interval, offsetBy);
    }

    @Override
    protected boolean matchesFixed()
    {
        if (parent instanceof MonthScope)
        {
            return (nowLocalDate.get(ChronoField.DAY_OF_MONTH) - 1) / 7 + 1 == value;
        }
        else
        {
            return super.matchesFixed();
        }
    }

    @Override
    boolean matchesInterval(LocalDateTime refLocalDate, LocalDate nowLocalDate, int offset, int interval)
    {
        LocalDateTime nowSoW = nowLocalDate.with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY)).atStartOfDay();

        long weeksSince = ChronoUnit.WEEKS.between(refLocalDate, nowSoW);

        return (weeksSince - offset) >= 0 && (weeksSince - offset) % interval == 0;
    }
}

package com.ericversteeg.scope;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.util.Date;

public class MonthScope extends Scope
{
    public MonthScope(Scope parent, int value, long offsetBy)
    {
        super(parent, value, offsetBy);

        if (parent instanceof YearScope)
        {
            temporalField = ChronoField.MONTH_OF_YEAR;
        }
    }

    public MonthScope(Scope parent, int offset, int interval, long offsetBy)
    {
        super(parent, offset, interval, offsetBy);
    }

    public MonthScope(Date estDate, int offset, int interval, long offsetBy)
    {
        super(estDate, offset, interval, offsetBy);
    }

    @Override
    boolean matchesInterval(LocalDateTime refLocalDate, LocalDate nowLocalDate, int offset, int interval)
    {
        LocalDateTime nowSoM = nowLocalDate.withDayOfMonth(1).atStartOfDay();

        long monthsSince = ChronoUnit.MONTHS.between(refLocalDate, nowSoM);

        return (monthsSince - offset) >= 0 && (monthsSince - offset) % interval == 0;
    }
}

package com.ericversteeg.scope;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.util.Date;

public class YearScope extends Scope {

    public YearScope(int value, long offsetBy)
    {
        super(null, value, offsetBy);

        temporalField = ChronoField.YEAR;
    }

    public YearScope(Scope parent, int value, long offsetBy)
    {
        super(parent, value, offsetBy);

        temporalField = ChronoField.YEAR;
    }

    public YearScope(Date estDate, int offset, int interval, long offsetBy)
    {
        super(estDate, offset, interval, offsetBy);
    }

    @Override
    boolean matchesInterval(LocalDateTime refLocalDate, LocalDate nowLocalDate, int offset, int interval)
    {
        LocalDateTime nowSoD = nowLocalDate.withDayOfYear(1).atStartOfDay();

        long daysSince = ChronoUnit.DAYS.between(refLocalDate, nowSoD);

        return (daysSince - offset) >= 0 && (daysSince - offset) % interval == 0;
    }
}

package com.ericversteeg;

import com.ericversteeg.config.DayCadence;
import com.ericversteeg.config.Hour;
import com.ericversteeg.config.ResetOffsetTimeUnit;
import com.ericversteeg.goal.Goal;
import com.ericversteeg.goal.GoalData;
import com.ericversteeg.goal.ResetType;
import com.ericversteeg.pattern.Pattern;
import com.google.gson.Gson;
import com.google.inject.Provides;
import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.StatChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.RuneScapeProfileChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.temporal.ChronoField;
import java.time.temporal.IsoFields;
import java.util.*;

@PluginDescriptor(
	name = "Xp Goalz",
	description = "Track xp goals."
)

public class XpGoalsPlugin extends Plugin
{
	@Inject private XpGoalsOverlay overlay;
	@Inject private OverlayManager overlayManager;
	@Inject private Client client;
	@Inject private XpGoalsConfig config;
	@Inject private ConfigManager configManager;
	@Inject private Gson gson;

	private static String DATA_KEY = "xp_goals_data_3";

	public static int TOTAL_XP_SKILL_ID = -5;

	GoalData goalData;

	ZoneOffset zoneOffset = ZoneId.systemDefault()
		.getRules()
		.getOffset(
			LocalDate.now()
				.atStartOfDay()
		);

	LocalDateTime lastDateTime = null;

	boolean progressUpdated = false;

	// so the first hit after a reset is tracked
	private Map<Integer, Integer> skillsXp = new HashMap<>();

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onRuneScapeProfileChanged(RuneScapeProfileChanged e)
	{
		String profile = configManager.getRSProfileKey();
		if (profile != null)
		{
			goalData = getSavedData();
			checkResets();
		}
		else
		{
			goalData = new GoalData();
			configSyncGoals();
		}

		skillsXp.put(TOTAL_XP_SKILL_ID, (int) client.getOverallExperience());
	}

	@Provides
	XpGoalsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(XpGoalsConfig.class);
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged config)
	{
		configSyncGoals();
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		checkResets();

		if (progressUpdated)
		{
			writeSavedData();
		}

		progressUpdated = false;
	}

	@Subscribe
	public void onStatChanged(StatChanged statChanged)
	{
		Skill skill = statChanged.getSkill();
		int xp = statChanged.getXp();

		Goal goal = goalForSkillId(skill.ordinal());

		if (goal != null)
		{
			int lastXp = xp;
			if (skillsXp.containsKey(skill.ordinal()))
			{
				lastXp = skillsXp.get(skill.ordinal());
			}

			if (goal.progressXp < 0) goal.progressXp = 0;

			int earnedXp = xp - lastXp;

			if (goal.track)
			{
				goal.progressXp += earnedXp;
				progressUpdated = true;
			}

			Goal totalXpGoal = goalForSkillId(TOTAL_XP_SKILL_ID);

			if (totalXpGoal != null && totalXpGoal.track)
			{
				totalXpGoal.progressXp += earnedXp;
				progressUpdated = true;
			}

			skillsXp.put(TOTAL_XP_SKILL_ID, skillsXp.get(TOTAL_XP_SKILL_ID) + earnedXp);
		}

		skillsXp.put(skill.ordinal(), xp);
	}

	private void checkResets()
	{
		if (goalData == null)
		{
			goalData = new GoalData();
		}

		if (lastDateTime == null)
		{
			lastDateTime = LocalDateTime.ofEpochSecond(
					goalData.lastCheck,
					0,
					zoneOffset
			);
		}

		LocalDateTime dateTime = LocalDateTime.now();

		LocalDateTime adjustedDateTime = adjustToConfiguredResetOffset(dateTime);
		LocalDateTime adjustedLastDateTime = adjustToConfiguredResetOffset(lastDateTime);

		if (adjustedDateTime.get(ChronoField.HOUR_OF_DAY) != adjustedLastDateTime.get(ChronoField.HOUR_OF_DAY)
				|| (adjustedDateTime.get(ChronoField.DAY_OF_MONTH) != adjustedLastDateTime.get(ChronoField.DAY_OF_MONTH))
				|| (adjustedDateTime.get(ChronoField.MONTH_OF_YEAR) != adjustedLastDateTime.get(ChronoField.MONTH_OF_YEAR))
				|| (adjustedDateTime.get(ChronoField.YEAR) != adjustedLastDateTime.get(ChronoField.YEAR)))
		{
			resetGoals(Goal.resetHourly);
		}
		if (adjustedDateTime.get(ChronoField.DAY_OF_MONTH) != adjustedLastDateTime.get(ChronoField.DAY_OF_MONTH)
				|| (adjustedDateTime.get(ChronoField.MONTH_OF_YEAR) != adjustedLastDateTime.get(ChronoField.MONTH_OF_YEAR))
				|| (adjustedDateTime.get(ChronoField.YEAR) != adjustedLastDateTime.get(ChronoField.YEAR)))
		{
			resetGoals(Goal.resetDaily);
		}
		if (adjustedDateTime.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR) != adjustedLastDateTime.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR)
				|| (adjustedDateTime.get(ChronoField.YEAR) != adjustedLastDateTime.get(ChronoField.YEAR)))
		{
			resetGoals(Goal.resetWeekly);
		}
		if (adjustedDateTime.get(ChronoField.MONTH_OF_YEAR) != adjustedLastDateTime.get(ChronoField.MONTH_OF_YEAR)
				|| (adjustedDateTime.get(ChronoField.YEAR) != adjustedLastDateTime.get(ChronoField.YEAR)))
		{
			resetGoals(Goal.resetMonthly);
		}
		if (adjustedDateTime.get(ChronoField.YEAR) != adjustedLastDateTime.get(ChronoField.YEAR))
		{
			resetGoals(Goal.resetYearly);
		}

		// update tracking patterns
		LocalDateTime adjustedPatternDateTime = adjustToConfiguredPatternOffset(dateTime);
		LocalDateTime adjustedPatternLastDateTime = adjustToConfiguredPatternOffset(lastDateTime);

		if (adjustedPatternDateTime.get(ChronoField.HOUR_OF_DAY) != adjustedPatternLastDateTime.get(ChronoField.HOUR_OF_DAY)
				|| (adjustedPatternDateTime.get(ChronoField.DAY_OF_MONTH) != adjustedPatternLastDateTime.get(ChronoField.DAY_OF_MONTH))
				|| (adjustedPatternDateTime.get(ChronoField.MONTH_OF_YEAR) != adjustedPatternLastDateTime.get(ChronoField.MONTH_OF_YEAR))
				|| (adjustedPatternDateTime.get(ChronoField.YEAR) != adjustedPatternLastDateTime.get(ChronoField.YEAR)))
		{
			configSyncGoals();
		}

		goalData.lastCheck = dateTime.toEpochSecond(zoneOffset);
		lastDateTime = dateTime;
	}

	private void resetGoals(int resetType)
	{
		for (Goal goal: goalData.goals)
		{
			if (goal.resetType == resetType)
			{
				goal.reset();
			}
		}
		writeSavedData();
	}

	private LocalDateTime adjustToConfiguredResetOffset(LocalDateTime dateTime)
	{
		if (config.isOffsetResets())
		{
			return dateTime.minusSeconds(getTimeOffsetInSeconds());
		}
		else
		{
			return dateTime;
		}
	}

	private LocalDateTime adjustToConfiguredPatternOffset(LocalDateTime dateTime)
	{
		if (config.isOffsetPatterns())
		{
			return dateTime.minusSeconds(getTimeOffsetInSeconds());
		}
		else
		{
			return dateTime;
		}
	}

	private long getTimeOffsetInSeconds()
	{
		int value = config.resetOffset();
		ResetOffsetTimeUnit unit = config.resetOffsetUnit();
		boolean isNegative = config.isResetOffsetNegative();

		int seconds = 0;
		switch (unit)
		{
			case MINUTE:
				seconds = value * 60;
				break;
			case HOUR:
				seconds = value * 60 * 60;
				break;
			case DAY:
				seconds = value * 24 * 60 * 60;
				break;
		}

		if (isNegative)
		{
			seconds = -seconds;
		}
		return seconds;
	}

	GoalData getSavedData()
	{
		String profile = configManager.getRSProfileKey();
		String json = configManager.getConfiguration(XpGoalsConfig.GROUP, profile, DATA_KEY);

		if (json == null)
		{
			return new GoalData();
		}

		GoalData savedData = gson.fromJson(json, GoalData.class);

		if (savedData == null)
		{
			return new GoalData();
		}

		return savedData;
	}

	void writeSavedData()
	{
		String profile = configManager.getRSProfileKey();

		if (profile != null)
		{
			for (Goal goal: goalData.goals)
			{
				for (Float progress: goal.pastProgress)
				{
                    if (Double.isNaN(progress)) {
                        goal.pastProgress = new LinkedList<>();
                        break;
                    }
				}

			}
			String json = gson.toJson(goalData);
			configManager.setConfiguration(XpGoalsConfig.GROUP, profile, DATA_KEY, json);
		}
	}

	void configSyncGoals()
	{
		if (goalData == null)
		{
			goalData = new GoalData();
		}

		if (goalData.goals.isEmpty())
		{
			goalData.goals = Arrays.asList(
					new Goal(Skill.ATTACK.ordinal()),
					new Goal(Skill.STRENGTH.ordinal()),
					new Goal(Skill.DEFENCE.ordinal()),
					new Goal(Skill.RANGED.ordinal()),
					new Goal(Skill.PRAYER.ordinal()),
					new Goal(Skill.MAGIC.ordinal()),
					new Goal(Skill.RUNECRAFT.ordinal()),
					new Goal(Skill.CONSTRUCTION.ordinal()),
					new Goal(Skill.HITPOINTS.ordinal()),
					new Goal(Skill.AGILITY.ordinal()),
					new Goal(Skill.HERBLORE.ordinal()),
					new Goal(Skill.THIEVING.ordinal()),
					new Goal(Skill.CRAFTING.ordinal()),
					new Goal(Skill.FLETCHING.ordinal()),
					new Goal(Skill.SLAYER.ordinal()),
					new Goal(Skill.HUNTER.ordinal()),
					new Goal(Skill.MINING.ordinal()),
					new Goal(Skill.SMITHING.ordinal()),
					new Goal(Skill.FISHING.ordinal()),
					new Goal(Skill.COOKING.ordinal()),
					new Goal(Skill.FIREMAKING.ordinal()),
					new Goal(Skill.WOODCUTTING.ordinal()),
					new Goal(Skill.FARMING.ordinal()),
					new Goal(TOTAL_XP_SKILL_ID)
			);
		}
		else
		{
			boolean foundTotalXp = false;
			for (Goal goal: goalData.goals)
			{
				if (goal.skillId == TOTAL_XP_SKILL_ID)
				{
					foundTotalXp = true;
					break;
				}
			}
			if (!foundTotalXp)
			{
				goalData.goals.add(new Goal(TOTAL_XP_SKILL_ID));
			}
		}

		for (Goal goal: goalData.goals)
		{
			int skillId = goal.skillId;

			boolean enabled = isGoalEnabled(skillId);
			boolean track = enabled;
			boolean hideOnMet = config.hideOnMet();
			int goalXp = goalXp(skillId);
			ResetType resetType = goalResetType(skillId);

			long patternOffset = 0;
			if (config.isOffsetPatterns())
			{
				patternOffset = getTimeOffsetInSeconds();
			}

			float xpProgress = overlay.getXpProgress(
					goal.progressXp,
					goal.goalXp
			);

			boolean oneValidPattern = false;
			boolean patternError = false;

			if (enabled) {
				track = false;

				try {
					String [] patterns;
					List<String> patternsList = new LinkedList<>();

					String dayOfWeekPatternPart = dayOfWeekPatternPart(skillId);
					String dayCadencePatternPart = dayCadencePatternPart(skillId);
					String hourPatternPart = hourPatternPart(skillId);

					String customPatterns = customPatterns(skillId);

					if (!customPatterns.trim().isEmpty())
					{
						patternsList.addAll(Arrays.asList(customPatterns.split("\n")));
					}
					if (dayOfWeekPatternPart != null)
					{
						if (hourPatternPart != null)
						{
							patternsList.add(dayOfWeekPatternPart + "->" + hourPatternPart);
						}
						else
						{
							patternsList.add(dayOfWeekPatternPart);
						}
					}
					if (dayCadencePatternPart != null)
					{
						if (hourPatternPart != null)
						{
							patternsList.add(dayCadencePatternPart + "->" + hourPatternPart);
						}
						else
						{
							patternsList.add(dayCadencePatternPart);
						}
					}
					if (dayOfWeekPatternPart == null && dayCadencePatternPart == null)
					{
						if (hourPatternPart != null)
						{
							patternsList.add(hourPatternPart);
						}
					}

					patterns = patternsList.toArray(new String[0]);

					for (String patternStr: patterns)
					{
						if (patternStr.trim().isEmpty()) continue;

						oneValidPattern = true;

						String pattern = "";
						int xp = goalXp;

						if (patternStr.contains("="))
						{
							String [] patternParts = patternStr.split("=");
							pattern = patternParts[0].trim();

							if (patternParts.length > 1)
							{
								xp = Integer.parseInt(patternParts[1].replace(",", "").replace(" ", "").trim());
							}
						}
						else
						{
							pattern = patternStr;
						}

						if (Pattern.parse(pattern, new Date(), patternOffset).matches())
						{
							goalXp = xp;
							track = true;
							break;
						}
					}
				}
				catch (Exception exception) {
					patternError = true;
				}
			}
			else {
				if (goal.resetType == Goal.resetNone)
				{
					goal.reset();
					writeSavedData();
				}
			}

			if (!oneValidPattern || patternError) {
				track = enabled;
			}

			goal.resetType = resetType.ordinal();
			goal.enabled = enabled;
			goal.track = track && !(hideOnMet && xpProgress >= 1f);
			goal.goalXp = goalXp;
		}
	}

	Skill skillForSkillId(int skillId)
	{
		if (skillId == Skill.MINING.ordinal()) return Skill.MINING;
		else if (skillId == Skill.RUNECRAFT.ordinal()) return Skill.RUNECRAFT;
		else if (skillId == Skill.AGILITY.ordinal()) return Skill.AGILITY;
		else if (skillId == Skill.FISHING.ordinal()) return Skill.FISHING;
		else if (skillId == Skill.WOODCUTTING.ordinal()) return Skill.WOODCUTTING;
		else if (skillId == Skill.FARMING.ordinal()) return Skill.FARMING;
		else if (skillId == Skill.RANGED.ordinal()) return Skill.RANGED;
		else if (skillId == Skill.SLAYER.ordinal()) return Skill.SLAYER;
		else if (skillId == Skill.ATTACK.ordinal()) return Skill.ATTACK;
		else if (skillId == Skill.DEFENCE.ordinal()) return Skill.DEFENCE;
		else if (skillId == Skill.STRENGTH.ordinal()) return Skill.STRENGTH;
		else if (skillId == Skill.MAGIC.ordinal()) return Skill.MAGIC;
		else if (skillId == Skill.PRAYER.ordinal()) return Skill.PRAYER;
		else if (skillId == Skill.CONSTRUCTION.ordinal()) return Skill.CONSTRUCTION;
		else if (skillId == Skill.HITPOINTS.ordinal()) return Skill.HITPOINTS;
		else if (skillId == Skill.HERBLORE.ordinal()) return Skill.HERBLORE;
		else if (skillId == Skill.THIEVING.ordinal()) return Skill.THIEVING;
		else if (skillId == Skill.CRAFTING.ordinal()) return Skill.CRAFTING;
		else if (skillId == Skill.FLETCHING.ordinal()) return Skill.FLETCHING;
		else if (skillId == Skill.HUNTER.ordinal()) return Skill.HUNTER;
		else if (skillId == Skill.SMITHING.ordinal()) return Skill.SMITHING;
		else if (skillId == Skill.COOKING.ordinal()) return Skill.COOKING;
		else if (skillId == Skill.FIREMAKING.ordinal()) return Skill.FIREMAKING;
		else return null;
	}

	Goal goalForSkillId(int skillId)
	{
		for (Goal goal: goalData.goals)
		{
			if (goal.skillId == skillId)
			{
				return goal;
			}
		}
		return null;
	}

	boolean isGoalEnabled(int skillId)
	{
		if (skillId == Skill.MINING.ordinal()) return config.enableMiningSkill();
		else if (skillId == Skill.RUNECRAFT.ordinal()) return config.enableRunecraftingSkill();
		else if (skillId == Skill.AGILITY.ordinal()) return config.enableAgilitySkill();
		else if (skillId == Skill.FISHING.ordinal()) return config.enableFishingSkill();
		else if (skillId == Skill.WOODCUTTING.ordinal()) return config.enableWoodcuttingSkill();
		else if (skillId == Skill.FARMING.ordinal()) return config.enableFarmingSkill();
		else if (skillId == Skill.RANGED.ordinal()) return config.enableRangedSkill();
		else if (skillId == Skill.SLAYER.ordinal()) return config.enableSlayerSkill();
		else if (skillId == Skill.ATTACK.ordinal()) return config.enableAttackSkill();
		else if (skillId == Skill.DEFENCE.ordinal()) return config.enableDefenseSkill();
		else if (skillId == Skill.STRENGTH.ordinal()) return config.enableStrengthSkill();
		else if (skillId == Skill.MAGIC.ordinal()) return config.enableMagicSkill();
		else if (skillId == Skill.PRAYER.ordinal()) return config.enablePrayerSkill();
		else if (skillId == Skill.CONSTRUCTION.ordinal()) return config.enableConstructionSkill();
		else if (skillId == Skill.HITPOINTS.ordinal()) return config.enableHitpointsSkill();
		else if (skillId == Skill.HERBLORE.ordinal()) return config.enableHerbloreSkill();
		else if (skillId == Skill.THIEVING.ordinal()) return config.enableThievingSkill();
		else if (skillId == Skill.CRAFTING.ordinal()) return config.enableCraftingSkill();
		else if (skillId == Skill.FLETCHING.ordinal()) return config.enableFletchingSkill();
		else if (skillId == Skill.HUNTER.ordinal()) return config.enableHunterSkill();
		else if (skillId == Skill.SMITHING.ordinal()) return config.enableSmithingSkill();
		else if (skillId == Skill.COOKING.ordinal()) return config.enableCookingSkill();
		else if (skillId == Skill.FIREMAKING.ordinal()) return config.enableFiremakingSkill();
		else if (skillId == TOTAL_XP_SKILL_ID) return config.enableTotalxpSkill();
		else return false;
	}

	ResetType goalResetType(int skillId)
	{
		if (skillId == Skill.MINING.ordinal()) return config.miningResetType();
		else if (skillId == Skill.RUNECRAFT.ordinal()) return config.runecraftingResetType();
		else if (skillId == Skill.AGILITY.ordinal()) return config.agilityResetType();
		else if (skillId == Skill.FISHING.ordinal()) return config.fishingResetType();
		else if (skillId == Skill.WOODCUTTING.ordinal()) return config.woodcuttingResetType();
		else if (skillId == Skill.FARMING.ordinal()) return config.farmingResetType();
		else if (skillId == Skill.RANGED.ordinal()) return config.rangedResetType();
		else if (skillId == Skill.SLAYER.ordinal()) return config.slayerResetType();
		else if (skillId == Skill.ATTACK.ordinal()) return config.attackResetType();
		else if (skillId == Skill.DEFENCE.ordinal()) return config.defenseResetType();
		else if (skillId == Skill.STRENGTH.ordinal()) return config.strengthResetType();
		else if (skillId == Skill.MAGIC.ordinal()) return config.magicResetType();
		else if (skillId == Skill.PRAYER.ordinal()) return config.prayerResetType();
		else if (skillId == Skill.CONSTRUCTION.ordinal()) return config.constructionResetType();
		else if (skillId == Skill.HITPOINTS.ordinal()) return config.hitpointsResetType();
		else if (skillId == Skill.HERBLORE.ordinal()) return config.herbloreResetType();
		else if (skillId == Skill.THIEVING.ordinal()) return config.thievingResetType();
		else if (skillId == Skill.CRAFTING.ordinal()) return config.craftingResetType();
		else if (skillId == Skill.FLETCHING.ordinal()) return config.fletchingResetType();
		else if (skillId == Skill.HUNTER.ordinal()) return config.hunterResetType();
		else if (skillId == Skill.SMITHING.ordinal()) return config.smithingResetType();
		else if (skillId == Skill.COOKING.ordinal()) return config.cookingResetType();
		else if (skillId == Skill.FIREMAKING.ordinal()) return config.firemakingResetType();
		else if (skillId == TOTAL_XP_SKILL_ID) return config.totalxpResetType();
		else return ResetType.NONE;
	}

	int goalXp(int skillId)
	{
		if (skillId == Skill.MINING.ordinal()) return config.miningXpGoal();
		else if (skillId == Skill.RUNECRAFT.ordinal()) return config.runecraftingXpGoal();
		else if (skillId == Skill.AGILITY.ordinal()) return config.agilityXpGoal();
		else if (skillId == Skill.FISHING.ordinal()) return config.fishingXpGoal();
		else if (skillId == Skill.WOODCUTTING.ordinal()) return config.woodcuttingXpGoal();
		else if (skillId == Skill.FARMING.ordinal()) return config.farmingXpGoal();
		else if (skillId == Skill.RANGED.ordinal()) return config.rangedXpGoal();
		else if (skillId == Skill.SLAYER.ordinal()) return config.slayerXpGoal();
		else if (skillId == Skill.ATTACK.ordinal()) return config.attackXpGoal();
		else if (skillId == Skill.DEFENCE.ordinal()) return config.defenseXpGoal();
		else if (skillId == Skill.STRENGTH.ordinal()) return config.strengthXpGoal();
		else if (skillId == Skill.MAGIC.ordinal()) return config.magicXpGoal();
		else if (skillId == Skill.PRAYER.ordinal()) return config.prayerXpGoal();
		else if (skillId == Skill.CONSTRUCTION.ordinal()) return config.constructionXpGoal();
		else if (skillId == Skill.HITPOINTS.ordinal()) return config.hitpointsXpGoal();
		else if (skillId == Skill.HERBLORE.ordinal()) return config.herbloreXpGoal();
		else if (skillId == Skill.THIEVING.ordinal()) return config.thievingXpGoal();
		else if (skillId == Skill.CRAFTING.ordinal()) return config.craftingXpGoal();
		else if (skillId == Skill.FLETCHING.ordinal()) return config.fletchingXpGoal();
		else if (skillId == Skill.HUNTER.ordinal()) return config.hunterXpGoal();
		else if (skillId == Skill.SMITHING.ordinal()) return config.smithingXpGoal();
		else if (skillId == Skill.COOKING.ordinal()) return config.cookingXpGoal();
		else if (skillId == Skill.FIREMAKING.ordinal()) return config.firemakingXpGoal();
		else if (skillId == TOTAL_XP_SKILL_ID) return config.totalxpXpGoal();
		else return 0;
	}

	String customPatterns(int skillId)
	{
		if (skillId == Skill.MINING.ordinal()) return config.miningPattens();
		else if (skillId == Skill.RUNECRAFT.ordinal()) return config.runecraftingPattens();
		else if (skillId == Skill.AGILITY.ordinal()) return config.agilityPattens();
		else if (skillId == Skill.FISHING.ordinal()) return config.fishingPattens();
		else if (skillId == Skill.WOODCUTTING.ordinal()) return config.woodcuttingPattens();
		else if (skillId == Skill.FARMING.ordinal()) return config.farmingPattens();
		else if (skillId == Skill.RANGED.ordinal()) return config.rangedPattens();
		else if (skillId == Skill.SLAYER.ordinal()) return config.slayerPattens();
		else if (skillId == Skill.ATTACK.ordinal()) return config.attackPattens();
		else if (skillId == Skill.DEFENCE.ordinal()) return config.defensePattens();
		else if (skillId == Skill.STRENGTH.ordinal()) return config.strengthPattens();
		else if (skillId == Skill.MAGIC.ordinal()) return config.magicPattens();
		else if (skillId == Skill.PRAYER.ordinal()) return config.prayerPattens();
		else if (skillId == Skill.CONSTRUCTION.ordinal()) return config.constructionPattens();
		else if (skillId == Skill.HITPOINTS.ordinal()) return config.hitpointsPattens();
		else if (skillId == Skill.HERBLORE.ordinal()) return config.herblorePattens();
		else if (skillId == Skill.THIEVING.ordinal()) return config.thievingPattens();
		else if (skillId == Skill.CRAFTING.ordinal()) return config.craftingPattens();
		else if (skillId == Skill.FLETCHING.ordinal()) return config.fletchingPattens();
		else if (skillId == Skill.HUNTER.ordinal()) return config.hunterPattens();
		else if (skillId == Skill.SMITHING.ordinal()) return config.smithingPattens();
		else if (skillId == Skill.COOKING.ordinal()) return config.cookingPattens();
		else if (skillId == Skill.FIREMAKING.ordinal()) return config.firemakingPattens();
		else if (skillId == TOTAL_XP_SKILL_ID) return config.totalxpPattens();
		else return "";
	}

	boolean isMonday(int skillId)
	{
		if (skillId == Skill.ATTACK.ordinal()) return config.attackMonday();
		else if (skillId == Skill.STRENGTH.ordinal()) return config.strengthMonday();
		else if (skillId == Skill.DEFENCE.ordinal()) return config.defenseMonday();
		else if (skillId == Skill.RANGED.ordinal()) return config.rangedMonday();
		else if (skillId == Skill.PRAYER.ordinal()) return config.prayerMonday();
		else if (skillId == Skill.MAGIC.ordinal()) return config.magicMonday();
		else if (skillId == Skill.RUNECRAFT.ordinal()) return config.runecraftingMonday();
		else if (skillId == Skill.CONSTRUCTION.ordinal()) return config.constructionMonday();
		else if (skillId == Skill.HITPOINTS.ordinal()) return config.hitpointsMonday();
		else if (skillId == Skill.AGILITY.ordinal()) return config.agilityMonday();
		else if (skillId == Skill.HERBLORE.ordinal()) return config.herbloreMonday();
		else if (skillId == Skill.THIEVING.ordinal()) return config.thievingMonday();
		else if (skillId == Skill.CRAFTING.ordinal()) return config.craftingMonday();
		else if (skillId == Skill.FLETCHING.ordinal()) return config.fletchingMonday();
		else if (skillId == Skill.SLAYER.ordinal()) return config.slayerMonday();
		else if (skillId == Skill.HUNTER.ordinal()) return config.hunterMonday();
		else if (skillId == Skill.MINING.ordinal()) return config.miningMonday();
		else if (skillId == Skill.SMITHING.ordinal()) return config.smithingMonday();
		else if (skillId == Skill.FISHING.ordinal()) return config.fishingMonday();
		else if (skillId == Skill.COOKING.ordinal()) return config.cookingMonday();
		else if (skillId == Skill.FIREMAKING.ordinal()) return config.firemakingMonday();
		else if (skillId == Skill.WOODCUTTING.ordinal()) return config.woodcuttingMonday();
		else if (skillId == Skill.FARMING.ordinal()) return config.farmingMonday();
		else if (skillId == TOTAL_XP_SKILL_ID) return config.totalxpMonday();
		else return false;
	}

	boolean isTuesday(int skillId)
	{
		if (skillId == Skill.ATTACK.ordinal()) return config.attackTuesday();
		else if (skillId == Skill.STRENGTH.ordinal()) return config.strengthTuesday();
		else if (skillId == Skill.DEFENCE.ordinal()) return config.defenseTuesday();
		else if (skillId == Skill.RANGED.ordinal()) return config.rangedTuesday();
		else if (skillId == Skill.PRAYER.ordinal()) return config.prayerTuesday();
		else if (skillId == Skill.MAGIC.ordinal()) return config.magicTuesday();
		else if (skillId == Skill.RUNECRAFT.ordinal()) return config.runecraftingTuesday();
		else if (skillId == Skill.CONSTRUCTION.ordinal()) return config.constructionTuesday();
		else if (skillId == Skill.HITPOINTS.ordinal()) return config.hitpointsTuesday();
		else if (skillId == Skill.AGILITY.ordinal()) return config.agilityTuesday();
		else if (skillId == Skill.HERBLORE.ordinal()) return config.herbloreTuesday();
		else if (skillId == Skill.THIEVING.ordinal()) return config.thievingTuesday();
		else if (skillId == Skill.CRAFTING.ordinal()) return config.craftingTuesday();
		else if (skillId == Skill.FLETCHING.ordinal()) return config.fletchingTuesday();
		else if (skillId == Skill.SLAYER.ordinal()) return config.slayerTuesday();
		else if (skillId == Skill.HUNTER.ordinal()) return config.hunterTuesday();
		else if (skillId == Skill.MINING.ordinal()) return config.miningTuesday();
		else if (skillId == Skill.SMITHING.ordinal()) return config.smithingTuesday();
		else if (skillId == Skill.FISHING.ordinal()) return config.fishingTuesday();
		else if (skillId == Skill.COOKING.ordinal()) return config.cookingTuesday();
		else if (skillId == Skill.FIREMAKING.ordinal()) return config.firemakingTuesday();
		else if (skillId == Skill.WOODCUTTING.ordinal()) return config.woodcuttingTuesday();
		else if (skillId == Skill.FARMING.ordinal()) return config.farmingTuesday();
		else if (skillId == TOTAL_XP_SKILL_ID) return config.totalxpTuesday();
		else return false;
	}

	boolean isWednesday(int skillId)
	{
		if (skillId == Skill.ATTACK.ordinal()) return config.attackWednesday();
		else if (skillId == Skill.STRENGTH.ordinal()) return config.strengthWednesday();
		else if (skillId == Skill.DEFENCE.ordinal()) return config.defenseWednesday();
		else if (skillId == Skill.RANGED.ordinal()) return config.rangedWednesday();
		else if (skillId == Skill.PRAYER.ordinal()) return config.prayerWednesday();
		else if (skillId == Skill.MAGIC.ordinal()) return config.magicWednesday();
		else if (skillId == Skill.RUNECRAFT.ordinal()) return config.runecraftingWednesday();
		else if (skillId == Skill.CONSTRUCTION.ordinal()) return config.constructionWednesday();
		else if (skillId == Skill.HITPOINTS.ordinal()) return config.hitpointsWednesday();
		else if (skillId == Skill.AGILITY.ordinal()) return config.agilityWednesday();
		else if (skillId == Skill.HERBLORE.ordinal()) return config.herbloreWednesday();
		else if (skillId == Skill.THIEVING.ordinal()) return config.thievingWednesday();
		else if (skillId == Skill.CRAFTING.ordinal()) return config.craftingWednesday();
		else if (skillId == Skill.FLETCHING.ordinal()) return config.fletchingWednesday();
		else if (skillId == Skill.SLAYER.ordinal()) return config.slayerWednesday();
		else if (skillId == Skill.HUNTER.ordinal()) return config.hunterWednesday();
		else if (skillId == Skill.MINING.ordinal()) return config.miningWednesday();
		else if (skillId == Skill.SMITHING.ordinal()) return config.smithingWednesday();
		else if (skillId == Skill.FISHING.ordinal()) return config.fishingWednesday();
		else if (skillId == Skill.COOKING.ordinal()) return config.cookingWednesday();
		else if (skillId == Skill.FIREMAKING.ordinal()) return config.firemakingWednesday();
		else if (skillId == Skill.WOODCUTTING.ordinal()) return config.woodcuttingWednesday();
		else if (skillId == Skill.FARMING.ordinal()) return config.farmingWednesday();
		else if (skillId == TOTAL_XP_SKILL_ID) return config.totalxpWednesday();
		else return false;
	}

	boolean isThursday(int skillId)
	{
		if (skillId == Skill.ATTACK.ordinal()) return config.attackThursday();
		else if (skillId == Skill.STRENGTH.ordinal()) return config.strengthThursday();
		else if (skillId == Skill.DEFENCE.ordinal()) return config.defenseThursday();
		else if (skillId == Skill.RANGED.ordinal()) return config.rangedThursday();
		else if (skillId == Skill.PRAYER.ordinal()) return config.prayerThursday();
		else if (skillId == Skill.MAGIC.ordinal()) return config.magicThursday();
		else if (skillId == Skill.RUNECRAFT.ordinal()) return config.runecraftingThursday();
		else if (skillId == Skill.CONSTRUCTION.ordinal()) return config.constructionThursday();
		else if (skillId == Skill.HITPOINTS.ordinal()) return config.hitpointsThursday();
		else if (skillId == Skill.AGILITY.ordinal()) return config.agilityThursday();
		else if (skillId == Skill.HERBLORE.ordinal()) return config.herbloreThursday();
		else if (skillId == Skill.THIEVING.ordinal()) return config.thievingThursday();
		else if (skillId == Skill.CRAFTING.ordinal()) return config.craftingThursday();
		else if (skillId == Skill.FLETCHING.ordinal()) return config.fletchingThursday();
		else if (skillId == Skill.SLAYER.ordinal()) return config.slayerThursday();
		else if (skillId == Skill.HUNTER.ordinal()) return config.hunterThursday();
		else if (skillId == Skill.MINING.ordinal()) return config.miningThursday();
		else if (skillId == Skill.SMITHING.ordinal()) return config.smithingThursday();
		else if (skillId == Skill.FISHING.ordinal()) return config.fishingThursday();
		else if (skillId == Skill.COOKING.ordinal()) return config.cookingThursday();
		else if (skillId == Skill.FIREMAKING.ordinal()) return config.firemakingThursday();
		else if (skillId == Skill.WOODCUTTING.ordinal()) return config.woodcuttingThursday();
		else if (skillId == Skill.FARMING.ordinal()) return config.farmingThursday();
		else if (skillId == TOTAL_XP_SKILL_ID) return config.totalxpThursday();
		else return false;
	}

	boolean isFriday(int skillId)
	{
		if (skillId == Skill.ATTACK.ordinal()) return config.attackFriday();
		else if (skillId == Skill.STRENGTH.ordinal()) return config.strengthFriday();
		else if (skillId == Skill.DEFENCE.ordinal()) return config.defenseFriday();
		else if (skillId == Skill.RANGED.ordinal()) return config.rangedFriday();
		else if (skillId == Skill.PRAYER.ordinal()) return config.prayerFriday();
		else if (skillId == Skill.MAGIC.ordinal()) return config.magicFriday();
		else if (skillId == Skill.RUNECRAFT.ordinal()) return config.runecraftingFriday();
		else if (skillId == Skill.CONSTRUCTION.ordinal()) return config.constructionFriday();
		else if (skillId == Skill.HITPOINTS.ordinal()) return config.hitpointsFriday();
		else if (skillId == Skill.AGILITY.ordinal()) return config.agilityFriday();
		else if (skillId == Skill.HERBLORE.ordinal()) return config.herbloreFriday();
		else if (skillId == Skill.THIEVING.ordinal()) return config.thievingFriday();
		else if (skillId == Skill.CRAFTING.ordinal()) return config.craftingFriday();
		else if (skillId == Skill.FLETCHING.ordinal()) return config.fletchingFriday();
		else if (skillId == Skill.SLAYER.ordinal()) return config.slayerFriday();
		else if (skillId == Skill.HUNTER.ordinal()) return config.hunterFriday();
		else if (skillId == Skill.MINING.ordinal()) return config.miningFriday();
		else if (skillId == Skill.SMITHING.ordinal()) return config.smithingFriday();
		else if (skillId == Skill.FISHING.ordinal()) return config.fishingFriday();
		else if (skillId == Skill.COOKING.ordinal()) return config.cookingFriday();
		else if (skillId == Skill.FIREMAKING.ordinal()) return config.firemakingFriday();
		else if (skillId == Skill.WOODCUTTING.ordinal()) return config.woodcuttingFriday();
		else if (skillId == Skill.FARMING.ordinal()) return config.farmingFriday();
		else if (skillId == TOTAL_XP_SKILL_ID) return config.totalxpFriday();
		else return false;
	}

	boolean isSaturday(int skillId)
	{
		if (skillId == Skill.ATTACK.ordinal()) return config.attackSaturday();
		else if (skillId == Skill.STRENGTH.ordinal()) return config.strengthSaturday();
		else if (skillId == Skill.DEFENCE.ordinal()) return config.defenseSaturday();
		else if (skillId == Skill.RANGED.ordinal()) return config.rangedSaturday();
		else if (skillId == Skill.PRAYER.ordinal()) return config.prayerSaturday();
		else if (skillId == Skill.MAGIC.ordinal()) return config.magicSaturday();
		else if (skillId == Skill.RUNECRAFT.ordinal()) return config.runecraftingSaturday();
		else if (skillId == Skill.CONSTRUCTION.ordinal()) return config.constructionSaturday();
		else if (skillId == Skill.HITPOINTS.ordinal()) return config.hitpointsSaturday();
		else if (skillId == Skill.AGILITY.ordinal()) return config.agilitySaturday();
		else if (skillId == Skill.HERBLORE.ordinal()) return config.herbloreSaturday();
		else if (skillId == Skill.THIEVING.ordinal()) return config.thievingSaturday();
		else if (skillId == Skill.CRAFTING.ordinal()) return config.craftingSaturday();
		else if (skillId == Skill.FLETCHING.ordinal()) return config.fletchingSaturday();
		else if (skillId == Skill.SLAYER.ordinal()) return config.slayerSaturday();
		else if (skillId == Skill.HUNTER.ordinal()) return config.hunterSaturday();
		else if (skillId == Skill.MINING.ordinal()) return config.miningSaturday();
		else if (skillId == Skill.SMITHING.ordinal()) return config.smithingSaturday();
		else if (skillId == Skill.FISHING.ordinal()) return config.fishingSaturday();
		else if (skillId == Skill.COOKING.ordinal()) return config.cookingSaturday();
		else if (skillId == Skill.FIREMAKING.ordinal()) return config.firemakingSaturday();
		else if (skillId == Skill.WOODCUTTING.ordinal()) return config.woodcuttingSaturday();
		else if (skillId == Skill.FARMING.ordinal()) return config.farmingSaturday();
		else if (skillId == TOTAL_XP_SKILL_ID) return config.totalxpSaturday();
		else return false;
	}

	boolean isSunday(int skillId)
	{
		if (skillId == Skill.ATTACK.ordinal()) return config.attackSunday();
		else if (skillId == Skill.STRENGTH.ordinal()) return config.strengthSunday();
		else if (skillId == Skill.DEFENCE.ordinal()) return config.defenseSunday();
		else if (skillId == Skill.RANGED.ordinal()) return config.rangedSunday();
		else if (skillId == Skill.PRAYER.ordinal()) return config.prayerSunday();
		else if (skillId == Skill.MAGIC.ordinal()) return config.magicSunday();
		else if (skillId == Skill.RUNECRAFT.ordinal()) return config.runecraftingSunday();
		else if (skillId == Skill.CONSTRUCTION.ordinal()) return config.constructionSunday();
		else if (skillId == Skill.HITPOINTS.ordinal()) return config.hitpointsSunday();
		else if (skillId == Skill.AGILITY.ordinal()) return config.agilitySunday();
		else if (skillId == Skill.HERBLORE.ordinal()) return config.herbloreSunday();
		else if (skillId == Skill.THIEVING.ordinal()) return config.thievingSunday();
		else if (skillId == Skill.CRAFTING.ordinal()) return config.craftingSunday();
		else if (skillId == Skill.FLETCHING.ordinal()) return config.fletchingSunday();
		else if (skillId == Skill.SLAYER.ordinal()) return config.slayerSunday();
		else if (skillId == Skill.HUNTER.ordinal()) return config.hunterSunday();
		else if (skillId == Skill.MINING.ordinal()) return config.miningSunday();
		else if (skillId == Skill.SMITHING.ordinal()) return config.smithingSunday();
		else if (skillId == Skill.FISHING.ordinal()) return config.fishingSunday();
		else if (skillId == Skill.COOKING.ordinal()) return config.cookingSunday();
		else if (skillId == Skill.FIREMAKING.ordinal()) return config.firemakingSunday();
		else if (skillId == Skill.WOODCUTTING.ordinal()) return config.woodcuttingSunday();
		else if (skillId == Skill.FARMING.ordinal()) return config.farmingSunday();
		else if (skillId == TOTAL_XP_SKILL_ID) return config.totalxpSunday();
		else return false;
	}

	Hour startTime(int skillId)
	{
		if (skillId == Skill.ATTACK.ordinal()) return config.attackStartTime();
		else if (skillId == Skill.STRENGTH.ordinal()) return config.strengthStartTime();
		else if (skillId == Skill.DEFENCE.ordinal()) return config.defenseStartTime();
		else if (skillId == Skill.RANGED.ordinal()) return config.rangedStartTime();
		else if (skillId == Skill.PRAYER.ordinal()) return config.prayerStartTime();
		else if (skillId == Skill.MAGIC.ordinal()) return config.magicStartTime();
		else if (skillId == Skill.RUNECRAFT.ordinal()) return config.runecraftingStartTime();
		else if (skillId == Skill.CONSTRUCTION.ordinal()) return config.constructionStartTime();
		else if (skillId == Skill.HITPOINTS.ordinal()) return config.hitpointsStartTime();
		else if (skillId == Skill.AGILITY.ordinal()) return config.agilityStartTime();
		else if (skillId == Skill.HERBLORE.ordinal()) return config.herbloreStartTime();
		else if (skillId == Skill.THIEVING.ordinal()) return config.thievingStartTime();
		else if (skillId == Skill.CRAFTING.ordinal()) return config.craftingStartTime();
		else if (skillId == Skill.FLETCHING.ordinal()) return config.fletchingStartTime();
		else if (skillId == Skill.SLAYER.ordinal()) return config.slayerStartTime();
		else if (skillId == Skill.HUNTER.ordinal()) return config.hunterStartTime();
		else if (skillId == Skill.MINING.ordinal()) return config.miningStartTime();
		else if (skillId == Skill.SMITHING.ordinal()) return config.smithingStartTime();
		else if (skillId == Skill.FISHING.ordinal()) return config.fishingStartTime();
		else if (skillId == Skill.COOKING.ordinal()) return config.cookingStartTime();
		else if (skillId == Skill.FIREMAKING.ordinal()) return config.firemakingStartTime();
		else if (skillId == Skill.WOODCUTTING.ordinal()) return config.woodcuttingStartTime();
		else if (skillId == Skill.FARMING.ordinal()) return config.farmingStartTime();
		else if (skillId == TOTAL_XP_SKILL_ID) return config.totalxpStartTime();
		else return Hour.NONE;
	}

	Hour endTime(int skillId)
	{
		if (skillId == Skill.ATTACK.ordinal()) return config.attackEndTime();
		else if (skillId == Skill.STRENGTH.ordinal()) return config.strengthEndTime();
		else if (skillId == Skill.DEFENCE.ordinal()) return config.defenseEndTime();
		else if (skillId == Skill.RANGED.ordinal()) return config.rangedEndTime();
		else if (skillId == Skill.PRAYER.ordinal()) return config.prayerEndTime();
		else if (skillId == Skill.MAGIC.ordinal()) return config.magicEndTime();
		else if (skillId == Skill.RUNECRAFT.ordinal()) return config.runecraftingEndTime();
		else if (skillId == Skill.CONSTRUCTION.ordinal()) return config.constructionEndTime();
		else if (skillId == Skill.HITPOINTS.ordinal()) return config.hitpointsEndTime();
		else if (skillId == Skill.AGILITY.ordinal()) return config.agilityEndTime();
		else if (skillId == Skill.HERBLORE.ordinal()) return config.herbloreEndTime();
		else if (skillId == Skill.THIEVING.ordinal()) return config.thievingEndTime();
		else if (skillId == Skill.CRAFTING.ordinal()) return config.craftingEndTime();
		else if (skillId == Skill.FLETCHING.ordinal()) return config.fletchingEndTime();
		else if (skillId == Skill.SLAYER.ordinal()) return config.slayerEndTime();
		else if (skillId == Skill.HUNTER.ordinal()) return config.hunterEndTime();
		else if (skillId == Skill.MINING.ordinal()) return config.miningEndTime();
		else if (skillId == Skill.SMITHING.ordinal()) return config.smithingEndTime();
		else if (skillId == Skill.FISHING.ordinal()) return config.fishingEndTime();
		else if (skillId == Skill.COOKING.ordinal()) return config.cookingEndTime();
		else if (skillId == Skill.FIREMAKING.ordinal()) return config.firemakingEndTime();
		else if (skillId == Skill.WOODCUTTING.ordinal()) return config.woodcuttingEndTime();
		else if (skillId == Skill.FARMING.ordinal()) return config.farmingEndTime();
		else if (skillId == TOTAL_XP_SKILL_ID) return config.totalxpEndTime();
		else return Hour.NONE;
	}

	DayCadence dayCadence(int skillId)
	{
		if (skillId == Skill.ATTACK.ordinal()) return config.attackDayCadence();
		else if (skillId == Skill.STRENGTH.ordinal()) return config.strengthDayCadence();
		else if (skillId == Skill.DEFENCE.ordinal()) return config.defenseDayCadence();
		else if (skillId == Skill.RANGED.ordinal()) return config.rangedDayCadence();
		else if (skillId == Skill.PRAYER.ordinal()) return config.prayerDayCadence();
		else if (skillId == Skill.MAGIC.ordinal()) return config.magicDayCadence();
		else if (skillId == Skill.RUNECRAFT.ordinal()) return config.runecraftingDayCadence();
		else if (skillId == Skill.CONSTRUCTION.ordinal()) return config.constructionDayCadence();
		else if (skillId == Skill.HITPOINTS.ordinal()) return config.hitpointsDayCadence();
		else if (skillId == Skill.AGILITY.ordinal()) return config.agilityDayCadence();
		else if (skillId == Skill.HERBLORE.ordinal()) return config.herbloreDayCadence();
		else if (skillId == Skill.THIEVING.ordinal()) return config.thievingDayCadence();
		else if (skillId == Skill.CRAFTING.ordinal()) return config.craftingDayCadence();
		else if (skillId == Skill.FLETCHING.ordinal()) return config.fletchingDayCadence();
		else if (skillId == Skill.SLAYER.ordinal()) return config.slayerDayCadence();
		else if (skillId == Skill.HUNTER.ordinal()) return config.hunterDayCadence();
		else if (skillId == Skill.MINING.ordinal()) return config.miningDayCadence();
		else if (skillId == Skill.SMITHING.ordinal()) return config.smithingDayCadence();
		else if (skillId == Skill.FISHING.ordinal()) return config.fishingDayCadence();
		else if (skillId == Skill.COOKING.ordinal()) return config.cookingDayCadence();
		else if (skillId == Skill.FIREMAKING.ordinal()) return config.firemakingDayCadence();
		else if (skillId == Skill.WOODCUTTING.ordinal()) return config.woodcuttingDayCadence();
		else if (skillId == Skill.FARMING.ordinal()) return config.farmingDayCadence();
		else if (skillId == TOTAL_XP_SKILL_ID) return config.totalxpDayCadence();
		else return DayCadence.NONE;
	}

	DayCadence dayCadenceDay(int skillId)
	{
		if (skillId == Skill.ATTACK.ordinal()) return config.attackDayCadenceDay();
		else if (skillId == Skill.STRENGTH.ordinal()) return config.strengthDayCadenceDay();
		else if (skillId == Skill.DEFENCE.ordinal()) return config.defenseDayCadenceDay();
		else if (skillId == Skill.RANGED.ordinal()) return config.rangedDayCadenceDay();
		else if (skillId == Skill.PRAYER.ordinal()) return config.prayerDayCadenceDay();
		else if (skillId == Skill.MAGIC.ordinal()) return config.magicDayCadenceDay();
		else if (skillId == Skill.RUNECRAFT.ordinal()) return config.runecraftingDayCadenceDay();
		else if (skillId == Skill.CONSTRUCTION.ordinal()) return config.constructionDayCadenceDay();
		else if (skillId == Skill.HITPOINTS.ordinal()) return config.hitpointsDayCadenceDay();
		else if (skillId == Skill.AGILITY.ordinal()) return config.agilityDayCadenceDay();
		else if (skillId == Skill.HERBLORE.ordinal()) return config.herbloreDayCadenceDay();
		else if (skillId == Skill.THIEVING.ordinal()) return config.thievingDayCadenceDay();
		else if (skillId == Skill.CRAFTING.ordinal()) return config.craftingDayCadenceDay();
		else if (skillId == Skill.FLETCHING.ordinal()) return config.fletchingDayCadenceDay();
		else if (skillId == Skill.SLAYER.ordinal()) return config.slayerDayCadenceDay();
		else if (skillId == Skill.HUNTER.ordinal()) return config.hunterDayCadenceDay();
		else if (skillId == Skill.MINING.ordinal()) return config.miningDayCadenceDay();
		else if (skillId == Skill.SMITHING.ordinal()) return config.smithingDayCadenceDay();
		else if (skillId == Skill.FISHING.ordinal()) return config.fishingDayCadenceDay();
		else if (skillId == Skill.COOKING.ordinal()) return config.cookingDayCadenceDay();
		else if (skillId == Skill.FIREMAKING.ordinal()) return config.firemakingDayCadenceDay();
		else if (skillId == Skill.WOODCUTTING.ordinal()) return config.woodcuttingDayCadenceDay();
		else if (skillId == Skill.FARMING.ordinal()) return config.farmingDayCadenceDay();
		else if (skillId == TOTAL_XP_SKILL_ID) return config.totalxpDayCadenceDay();
		else return DayCadence.NONE;
	}

	String dayOfWeekPatternPart(int skillId)
	{
		StringBuilder daysOfWeekSb = new StringBuilder();
		if (isMonday(skillId))
		{
			daysOfWeekSb.append("Mo,");
		}
		if (isTuesday(skillId))
		{
			daysOfWeekSb.append("Tu,");
		}
		if (isWednesday(skillId))
		{
			daysOfWeekSb.append("We,");
		}
		if (isThursday(skillId))
		{
			daysOfWeekSb.append("Th,");
		}
		if (isFriday(skillId))
		{
			daysOfWeekSb.append("Fr,");
		}
		if (isSaturday(skillId))
		{
			daysOfWeekSb.append("Sa,");
		}
		if (isSunday(skillId))
		{
			daysOfWeekSb.append("Su,");
		}

		String dayPart = null;
		if (daysOfWeekSb.length() > 0)
		{
			String daysOfWeekCsv = daysOfWeekSb.substring(0, daysOfWeekSb.length() - 1);
			dayPart = "[W]->["+ daysOfWeekCsv +"]";
		}
		return dayPart;
	}

	String dayCadencePatternPart(int skillId)
	{
		DayCadence dayCadence = dayCadence(skillId);
		DayCadence cadenceDay = dayCadenceDay(skillId);

		String dayPart = null;
		if (dayCadence != DayCadence.NONE && cadenceDay != DayCadence.NONE
				&& cadenceDay.ordinal() <= dayCadence.ordinal())
		{
			int cadence = dayCadence.ordinal();
			int offset = cadenceDay.ordinal() - 1;
			dayPart = "[D|~"+ offset +"|" + cadence + "]";
		}
		return dayPart;
	}

	String hourPatternPart(int skillId)
	{
		Hour sHour = startTime(skillId);
		Hour eHour = endTime(skillId);

		String hourPart = null;
		if (sHour != Hour.NONE && eHour != Hour.NONE)
		{
			hourPart = "[" + sHour.getName() + "-" + eHour.getName() + "]";
		}
		return hourPart;
	}
}

package com.ericversteeg;

import com.ericversteeg.bar.*;
import com.ericversteeg.config.*;
import com.ericversteeg.goal.ResetType;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.ui.overlay.components.ComponentConstants;

import java.awt.*;

@ConfigGroup(XpGoalsConfig.GROUP)
public interface XpGoalsConfig extends Config {
	String GROUP = "xpgoals_3";

	@ConfigItem(
			position = 1,
			keyName = "labelText",
			name = "Label",
			description = "Configures label."
	)
	default String labelText() {
		return "Goals";
	}

	@ConfigItem(
			position = 3,
			keyName = "anchorType",
			name = "Anchor",
			description = "Configures anchor for the panel."
	)
	default AnchorType anchorType() {
		return AnchorType.TOP_LEFT;
	}

	@ConfigItem(
			position = 3,
			keyName = "anchorX",
			name = "X Position",
			description = "Configures x position relative to the anchor."
	)
	default int anchorX() {
		return 10;
	}

	@ConfigItem(
			position = 3,
			keyName = "anchorY",
			name = "Y Position",
			description = "Configures y position relative to the anchor."
	)
	default int anchorY() {
		return 120;
	}

	@ConfigItem(
			position = 4,
			keyName = "showPanel",
			name = "Show Panel",
			description = "Configures whether or not to show panel."
	)
	default boolean showPanel() {
		return true;
	}

	@ConfigSection(
			name = "Panel Adjustments",
			description = "Various adjustments to the panel.",
			closedByDefault = true,
			position = 40
	)
	String panelAdjustments = "Panel Adjustments";

	@ConfigItem(
			position = 4,
			keyName = "panelExtensionWidth",
			name = "Panel Width Extension",
			description = "Configures the panel width extension value.",
			section = panelAdjustments
	)
	default int panelWidthExtension() {
		return 0;
	}

	@ConfigItem(
			position = 4,
			keyName = "panelExtensionWidthNegative",
			name = "Panel Width Extension Negative",
			description = "Configures whether or not the panel width extension value is negative.",
			section = panelAdjustments
	)
	default boolean isPanelWidthExtensionNegative() {
		return false;
	}

	@ConfigItem(
			position = 4,
			keyName = "panelExtensionHeight",
			name = "Panel Height Extension",
			description = "Configures the panel height extension value.",
			section = panelAdjustments
	)
	default int panelHeightExtension() {
		return 0;
	}

	@ConfigItem(
			position = 4,
			keyName = "panelExtensionHeightNegative",
			name = "Panel Height Extension Negative",
			description = "Configures whether or not the panel height extension value is negative.",
			section = panelAdjustments
	)
	default boolean isPanelHeightExtensionNegative() {
		return false;
	}

	@ConfigItem(
			position = 4,
			keyName = "panelOffsetX",
			name = "Panel Correction X",
			description = "Configures the panel correction x value.",
			section = panelAdjustments
	)
	default int panelCorrectionX() {
		return 0;
	}

	@ConfigItem(
			position = 4,
			keyName = "panelOffsetXNegative",
			name = "Panel Correction X Negative",
			description = "Configures whether or not the panel correction x value is negative.",
			section = panelAdjustments
	)
	default boolean isPanelCorrectionXNegative() {
		return false;
	}

	@ConfigItem(
			position = 4,
			keyName = "panelOffsetY",
			name = "Panel Correction Y",
			description = "Configures the panel correction y value.",
			section = panelAdjustments
	)
	default int panelCorrectionY() {
		return 0;
	}

	@ConfigItem(
			position = 4,
			keyName = "panelOffsetYNegative",
			name = "Panel Correction Y Negative",
			description = "Configures whether or not the panel correction y value is negative.",
			section = panelAdjustments
	)
	default boolean isPanelCorrectionYNegative() {
		return false;
	}

	@ConfigItem(
			position = 5,
			keyName = "barWidth",
			name = "Bar Width",
			description = "Configures width of bars."
	)
	default int barWidth() {
		return 115;
	}

	@ConfigItem(
			position = 6,
			keyName = "barHeight",
			name = "Bar Height",
			description = "Configures height of bars."
	)
	default int barHeight() {
		return 20;
	}

	@ConfigItem(
			position = 7,
			keyName = "barSpacing",
			name = "Bar Spacing",
			description = "Configures space between bars."
	)
	default int barSpacing() {
		return 5;
	}

	@ConfigItem(
			position = 7,
			keyName = "stackSize",
			name = "Stack Size",
			description = "Configures how many bars to stack."
	)
	default int stackSize() {
		return 1;
	}

	@ConfigItem(
			position = 7,
			keyName = "stackOrientation",
			name = "Stack Orientation",
			description = "Configures whether bars stack horizontal or vertical."
	)
	default StackOrientation stackOrientation() {
		return StackOrientation.HORIZONTAL;
	}

	@ConfigItem(
			position = 8,
			keyName = "barTextType",
			name = "Value Text Type",
			description = "Configures what type of value is displayed."
	)
	default BarTextType barTextType() {
		return BarTextType.FRACTION;
	}

	@ConfigItem(
			position = 8,
			keyName = "mouseoverBarTextType",
			name = "Mouseover Value Text Type",
			description = "Configures what type of value is displayed when you mouseover."
	)
	default BarTextType mouseoverBarTextType() {
		return BarTextType.PERCENTAGE;
	}

	@ConfigItem(
			position = 9,
			keyName = "barTextPosition",
			name = "Value Text Position",
			description = "Configures bar text position."
	)
	default BarTextPosition barTextPosition() {
		return BarTextPosition.INSIDE;
	}

	@ConfigItem(
			position = 9,
			keyName = "barTextSize",
			name = "Value Text Size",
			description = "Configures bar text size."
	)
	default BarTextSize barTextSize() {
		return BarTextSize.LARGE;
	}

	@ConfigItem(
			position = 9,
			keyName = "barTextAlignment",
			name = "Value Text Alignment",
			description = "Configures bar text alignment."
	)
	default BarTextAlignment barTextAlignment() {
		return BarTextAlignment.CENTER;
	}

	@ConfigItem(
			position = 10,
			keyName = "pastProgressSpan",
			name = "Tooltip Grid Size",
			description = "Configures grid size in the tooltip."
	)
	default int pastProgressSpan() {
		return 3;
	}

	@ConfigItem(
			position = 10,
			keyName = "showTooltip",
			name = "Show Tooltip",
			description = "Configures whether or not to show the tooltip."
	)
	default boolean showTooltip() {
		return true;
	}

	@ConfigItem(
			position = 10,
			keyName = "doneTextType",
			name = "Completion Text",
			description = "Configures completion text for each gaol."
	)
	default DoneTextType doneTextType() {
		return DoneTextType.COMPLETE;
	}

	@ConfigItem(
			position = 10,
			keyName = "hideOnMet",
			name = "Hide Bars When Goal Is Met",
			description = "Configures whether or not the bars hide after the goal is met and appear after reset."
	)
	default boolean hideOnMet() {
		return false;
	}

	@ConfigItem(
			position = 11,
			keyName = "sortType",
			name = "Order Type",
			description = "Configures the order by which goal bars are displayed."
	)
	default SortType sortType() {
		return SortType.PERCENTAGE;
	}

	@ConfigItem(
			position = 11,
			keyName = "maxBars",
			name = "Maximum Goals",
			description = "Configures the maximum number of goals that are displayed at the same time (0 = no limit)."
	)
	default int maxGoals() {
		return 0;
	}

	@ConfigItem(
			position = 12,
			keyName = "hideLabel",
			name = "Hide Label",
			description = "Configures whether or not the label is hidden."
	)
	default boolean hideLabel() {
		return false;
	}

	@ConfigItem(
			position = 12,
			keyName = "hideIcons",
			name = "Hide Icons",
			description = "Configures whether or not to hide skill icons."
	)
	default boolean hideSkillIcons() {
		return false;
	}

	@ConfigItem(
			position = 13,
			keyName = "includeResetType",
			name = "Reset Text",
			description = "Configures whether or not to include reset label in bar text."
	)
	default boolean includeResetType() {
		return false;
	}

	@ConfigItem(
			position = 14,
			keyName = "enableOverfill",
			name = "Enable Bar Overfill",
			description = "Configures whether or not bar overfills to 200%."
	)
	default boolean enableOverfill() {
		return true;
	}

	@ConfigItem(
			position = 15,
			keyName = "overfillColor",
			name = "Overfill Color",
			description = "Configures bar overfill color."
	)
	default Color overfillColor() {
		return Color.decode("#A020F0");
	}

	@ConfigItem(
			position = 16,
			keyName = "resetOffset",
			name = "Time Offset",
			description = "Optionally offsets all skill reset times and / or skill pattern tracking times by the specified interval e.g. 4 hours will cause all daily " +
					"resets and / or skill track patterns to happen at 4am and -4 hours will cause them to happen at 8pm."
	)
	default int resetOffset() {
		return 0;
	}

	@ConfigItem(
			position = 17,
			keyName = "resetOffsetUnit",
			name = "Time Offset Unit",
			description = "Configures the unit of the time offset value."
	)
	default ResetOffsetTimeUnit resetOffsetUnit() {
		return ResetOffsetTimeUnit.HOUR;
	}

	@ConfigItem(
			position = 18,
			keyName = "resetOffsetNegative",
			name = "Time Offset Negative",
			description = "Configures whether or not the time offset value is negative."
	)
	default boolean isResetOffsetNegative() {
		return false;
	}

	@ConfigItem(
			position = 19,
			keyName = "offsetResets",
			name = "Offset Skill Reset",
			description = "Configures whether or not to offset resets."
	)
	default boolean isOffsetResets() {
		return true;
	}

	@ConfigItem(
			position = 20,
			keyName = "offsetPatterns",
			name = "Offset Track Pattern",
			description = "Configures whether or not to offset skill track patterns. " +
					"For example with a configured 4 hour reset offset and this option enabled, " +
					"12am-4am is considered on the previous calendar day."
	)
	default boolean isOffsetPatterns() {
		return true;
	}

	@ConfigSection(
			name = "Attack",
			description = "Attack Skill",
			position = 0,
			closedByDefault = true
	)
	String attackSkill = "attackSkill";

	@ConfigItem(
			keyName = "enableAttack",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not attack skill is enabled.",
			section = attackSkill
	)
	default boolean enableAttackSkill() { return false; }

	@ConfigItem(
			keyName = "attackXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = attackSkill
	)
	default int attackXpGoal() { return 1; }

	@ConfigItem(
			keyName = "attackResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = attackSkill
	)
	default ResetType attackResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "attackMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = attackSkill
	)
	default boolean attackMonday() { return false; }

	@ConfigItem(
			keyName = "attackTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = attackSkill
	)
	default boolean attackTuesday() { return false; }

	@ConfigItem(
			keyName = "attackWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = attackSkill
	)
	default boolean attackWednesday() { return false; }

	@ConfigItem(
			keyName = "attackThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = attackSkill
	)
	default boolean attackThursday() { return false; }

	@ConfigItem(
			keyName = "attackFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = attackSkill
	)
	default boolean attackFriday() { return false; }

	@ConfigItem(
			keyName = "attackSaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = attackSkill
	)
	default boolean attackSaturday() { return false; }

	@ConfigItem(
			keyName = "attackSunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = attackSkill
	)
	default boolean attackSunday() { return false; }

	@ConfigItem(
			keyName = "attackStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = attackSkill
	)
	default Hour attackStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "attackEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = attackSkill
	)
	default Hour attackEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "attackDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = attackSkill
	)
	default DayCadence attackDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "attackCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = attackSkill
	)
	default DayCadence attackDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "AttackVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = attackSkill
	)
	default String attackPattens() { return ""; }

	@ConfigSection(
			name = "Strength",
			description = "Strength Skill",
			position = 0,
			closedByDefault = true
	)
	String strengthSkill = "strengthSkill";

	@ConfigItem(
			keyName = "enableStrength",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not strength skill is enabled.",
			section = strengthSkill
	)
	default boolean enableStrengthSkill() { return false; }

	@ConfigItem(
			keyName = "strengthXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = strengthSkill
	)
	default int strengthXpGoal() { return 1; }

	@ConfigItem(
			keyName = "strengthResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = strengthSkill
	)
	default ResetType strengthResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "strengthMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = strengthSkill
	)
	default boolean strengthMonday() { return false; }

	@ConfigItem(
			keyName = "strengthTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = strengthSkill
	)
	default boolean strengthTuesday() { return false; }

	@ConfigItem(
			keyName = "strengthWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = strengthSkill
	)
	default boolean strengthWednesday() { return false; }

	@ConfigItem(
			keyName = "strengthThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = strengthSkill
	)
	default boolean strengthThursday() { return false; }

	@ConfigItem(
			keyName = "strengthFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = strengthSkill
	)
	default boolean strengthFriday() { return false; }

	@ConfigItem(
			keyName = "strengthSaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = strengthSkill
	)
	default boolean strengthSaturday() { return false; }

	@ConfigItem(
			keyName = "strengthSunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = strengthSkill
	)
	default boolean strengthSunday() { return false; }

	@ConfigItem(
			keyName = "strengthStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = strengthSkill
	)
	default Hour strengthStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "strengthEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = strengthSkill
	)
	default Hour strengthEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "strengthDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = strengthSkill
	)
	default DayCadence strengthDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "strengthCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = strengthSkill
	)
	default DayCadence strengthDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "StrengthVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = strengthSkill
	)
	default String strengthPattens() { return ""; }

	@ConfigSection(
			name = "Defense",
			description = "Defense Skill",
			position = 0,
			closedByDefault = true
	)
	String defenseSkill = "defenseSkill";

	@ConfigItem(
			keyName = "enableDefense",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not defense skill is enabled.",
			section = defenseSkill
	)
	default boolean enableDefenseSkill() { return false; }

	@ConfigItem(
			keyName = "defenseXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = defenseSkill
	)
	default int defenseXpGoal() { return 1; }

	@ConfigItem(
			keyName = "defenseResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = defenseSkill
	)
	default ResetType defenseResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "defenseMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = defenseSkill
	)
	default boolean defenseMonday() { return false; }

	@ConfigItem(
			keyName = "defenseTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = defenseSkill
	)
	default boolean defenseTuesday() { return false; }

	@ConfigItem(
			keyName = "defenseWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = defenseSkill
	)
	default boolean defenseWednesday() { return false; }

	@ConfigItem(
			keyName = "defenseThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = defenseSkill
	)
	default boolean defenseThursday() { return false; }

	@ConfigItem(
			keyName = "defenseFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = defenseSkill
	)
	default boolean defenseFriday() { return false; }

	@ConfigItem(
			keyName = "defenseSaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = defenseSkill
	)
	default boolean defenseSaturday() { return false; }

	@ConfigItem(
			keyName = "defenseSunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = defenseSkill
	)
	default boolean defenseSunday() { return false; }

	@ConfigItem(
			keyName = "defenseStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = defenseSkill
	)
	default Hour defenseStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "defenseEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = defenseSkill
	)
	default Hour defenseEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "defenseDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = defenseSkill
	)
	default DayCadence defenseDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "defenseCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = defenseSkill
	)
	default DayCadence defenseDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "DefenseVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = defenseSkill
	)
	default String defensePattens() { return ""; }

	@ConfigSection(
			name = "Ranged",
			description = "Ranged Skill",
			position = 0,
			closedByDefault = true
	)
	String rangedSkill = "rangedSkill";

	@ConfigItem(
			keyName = "enableRanged",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not ranged skill is enabled.",
			section = rangedSkill
	)
	default boolean enableRangedSkill() { return false; }

	@ConfigItem(
			keyName = "rangedXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = rangedSkill
	)
	default int rangedXpGoal() { return 1; }

	@ConfigItem(
			keyName = "rangedResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = rangedSkill
	)
	default ResetType rangedResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "rangedMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = rangedSkill
	)
	default boolean rangedMonday() { return false; }

	@ConfigItem(
			keyName = "rangedTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = rangedSkill
	)
	default boolean rangedTuesday() { return false; }

	@ConfigItem(
			keyName = "rangedWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = rangedSkill
	)
	default boolean rangedWednesday() { return false; }

	@ConfigItem(
			keyName = "rangedThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = rangedSkill
	)
	default boolean rangedThursday() { return false; }

	@ConfigItem(
			keyName = "rangedFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = rangedSkill
	)
	default boolean rangedFriday() { return false; }

	@ConfigItem(
			keyName = "rangedSaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = rangedSkill
	)
	default boolean rangedSaturday() { return false; }

	@ConfigItem(
			keyName = "rangedSunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = rangedSkill
	)
	default boolean rangedSunday() { return false; }

	@ConfigItem(
			keyName = "rangedStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = rangedSkill
	)
	default Hour rangedStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "rangedEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = rangedSkill
	)
	default Hour rangedEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "rangedDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = rangedSkill
	)
	default DayCadence rangedDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "rangedCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = rangedSkill
	)
	default DayCadence rangedDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "RangedVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = rangedSkill
	)
	default String rangedPattens() { return ""; }

	@ConfigSection(
			name = "Prayer",
			description = "Prayer Skill",
			position = 0,
			closedByDefault = true
	)
	String prayerSkill = "prayerSkill";

	@ConfigItem(
			keyName = "enablePrayer",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not prayer skill is enabled.",
			section = prayerSkill
	)
	default boolean enablePrayerSkill() { return false; }

	@ConfigItem(
			keyName = "prayerXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = prayerSkill
	)
	default int prayerXpGoal() { return 1; }

	@ConfigItem(
			keyName = "prayerResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = prayerSkill
	)
	default ResetType prayerResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "prayerMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = prayerSkill
	)
	default boolean prayerMonday() { return false; }

	@ConfigItem(
			keyName = "prayerTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = prayerSkill
	)
	default boolean prayerTuesday() { return false; }

	@ConfigItem(
			keyName = "prayerWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = prayerSkill
	)
	default boolean prayerWednesday() { return false; }

	@ConfigItem(
			keyName = "prayerThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = prayerSkill
	)
	default boolean prayerThursday() { return false; }

	@ConfigItem(
			keyName = "prayerFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = prayerSkill
	)
	default boolean prayerFriday() { return false; }

	@ConfigItem(
			keyName = "prayerSaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = prayerSkill
	)
	default boolean prayerSaturday() { return false; }

	@ConfigItem(
			keyName = "prayerSunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = prayerSkill
	)
	default boolean prayerSunday() { return false; }

	@ConfigItem(
			keyName = "prayerStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = prayerSkill
	)
	default Hour prayerStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "prayerEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = prayerSkill
	)
	default Hour prayerEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "prayerDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = prayerSkill
	)
	default DayCadence prayerDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "prayerCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = prayerSkill
	)
	default DayCadence prayerDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "PrayerVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = prayerSkill
	)
	default String prayerPattens() { return ""; }

	@ConfigSection(
			name = "Magic",
			description = "Magic Skill",
			position = 0,
			closedByDefault = true
	)
	String magicSkill = "magicSkill";

	@ConfigItem(
			keyName = "enableMagic",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not magic skill is enabled.",
			section = magicSkill
	)
	default boolean enableMagicSkill() { return false; }

	@ConfigItem(
			keyName = "magicXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = magicSkill
	)
	default int magicXpGoal() { return 1; }

	@ConfigItem(
			keyName = "magicResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = magicSkill
	)
	default ResetType magicResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "magicMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = magicSkill
	)
	default boolean magicMonday() { return false; }

	@ConfigItem(
			keyName = "magicTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = magicSkill
	)
	default boolean magicTuesday() { return false; }

	@ConfigItem(
			keyName = "magicWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = magicSkill
	)
	default boolean magicWednesday() { return false; }

	@ConfigItem(
			keyName = "magicThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = magicSkill
	)
	default boolean magicThursday() { return false; }

	@ConfigItem(
			keyName = "magicFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = magicSkill
	)
	default boolean magicFriday() { return false; }

	@ConfigItem(
			keyName = "magicSaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = magicSkill
	)
	default boolean magicSaturday() { return false; }

	@ConfigItem(
			keyName = "magicSunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = magicSkill
	)
	default boolean magicSunday() { return false; }

	@ConfigItem(
			keyName = "magicStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = magicSkill
	)
	default Hour magicStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "magicEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = magicSkill
	)
	default Hour magicEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "magicDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = magicSkill
	)
	default DayCadence magicDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "magicCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = magicSkill
	)
	default DayCadence magicDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "MagicVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = magicSkill
	)
	default String magicPattens() { return ""; }

	@ConfigSection(
			name = "Runecrafting",
			description = "Runecrafting Skill",
			position = 0,
			closedByDefault = true
	)
	String runecraftingSkill = "runecraftingSkill";

	@ConfigItem(
			keyName = "enableRunecrafting",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not runecrafting skill is enabled.",
			section = runecraftingSkill
	)
	default boolean enableRunecraftingSkill() { return false; }

	@ConfigItem(
			keyName = "runecraftingXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = runecraftingSkill
	)
	default int runecraftingXpGoal() { return 1; }

	@ConfigItem(
			keyName = "runecraftingResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = runecraftingSkill
	)
	default ResetType runecraftingResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "runecraftingMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = runecraftingSkill
	)
	default boolean runecraftingMonday() { return false; }

	@ConfigItem(
			keyName = "runecraftingTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = runecraftingSkill
	)
	default boolean runecraftingTuesday() { return false; }

	@ConfigItem(
			keyName = "runecraftingWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = runecraftingSkill
	)
	default boolean runecraftingWednesday() { return false; }

	@ConfigItem(
			keyName = "runecraftingThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = runecraftingSkill
	)
	default boolean runecraftingThursday() { return false; }

	@ConfigItem(
			keyName = "runecraftingFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = runecraftingSkill
	)
	default boolean runecraftingFriday() { return false; }

	@ConfigItem(
			keyName = "runecraftingSaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = runecraftingSkill
	)
	default boolean runecraftingSaturday() { return false; }

	@ConfigItem(
			keyName = "runecraftingSunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = runecraftingSkill
	)
	default boolean runecraftingSunday() { return false; }

	@ConfigItem(
			keyName = "runecraftingStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = runecraftingSkill
	)
	default Hour runecraftingStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "runecraftingEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = runecraftingSkill
	)
	default Hour runecraftingEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "runecraftingDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = runecraftingSkill
	)
	default DayCadence runecraftingDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "runecraftingCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = runecraftingSkill
	)
	default DayCadence runecraftingDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "RunecraftingVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = runecraftingSkill
	)
	default String runecraftingPattens() { return ""; }

	@ConfigSection(
			name = "Construction",
			description = "Construction Skill",
			position = 0,
			closedByDefault = true
	)
	String constructionSkill = "constructionSkill";

	@ConfigItem(
			keyName = "enableConstruction",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not construction skill is enabled.",
			section = constructionSkill
	)
	default boolean enableConstructionSkill() { return false; }

	@ConfigItem(
			keyName = "constructionXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = constructionSkill
	)
	default int constructionXpGoal() { return 1; }

	@ConfigItem(
			keyName = "constructionResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = constructionSkill
	)
	default ResetType constructionResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "constructionMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = constructionSkill
	)
	default boolean constructionMonday() { return false; }

	@ConfigItem(
			keyName = "constructionTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = constructionSkill
	)
	default boolean constructionTuesday() { return false; }

	@ConfigItem(
			keyName = "constructionWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = constructionSkill
	)
	default boolean constructionWednesday() { return false; }

	@ConfigItem(
			keyName = "constructionThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = constructionSkill
	)
	default boolean constructionThursday() { return false; }

	@ConfigItem(
			keyName = "constructionFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = constructionSkill
	)
	default boolean constructionFriday() { return false; }

	@ConfigItem(
			keyName = "constructionSaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = constructionSkill
	)
	default boolean constructionSaturday() { return false; }

	@ConfigItem(
			keyName = "constructionSunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = constructionSkill
	)
	default boolean constructionSunday() { return false; }

	@ConfigItem(
			keyName = "constructionStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = constructionSkill
	)
	default Hour constructionStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "constructionEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = constructionSkill
	)
	default Hour constructionEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "constructionDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = constructionSkill
	)
	default DayCadence constructionDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "constructionCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = constructionSkill
	)
	default DayCadence constructionDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "ConstructionVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = constructionSkill
	)
	default String constructionPattens() { return ""; }

	@ConfigSection(
			name = "Hitpoints",
			description = "Hitpoints Skill",
			position = 0,
			closedByDefault = true
	)
	String hitpointsSkill = "hitpointsSkill";

	@ConfigItem(
			keyName = "enableHitpoints",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not hitpoints skill is enabled.",
			section = hitpointsSkill
	)
	default boolean enableHitpointsSkill() { return false; }

	@ConfigItem(
			keyName = "hitpointsXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = hitpointsSkill
	)
	default int hitpointsXpGoal() { return 1; }

	@ConfigItem(
			keyName = "hitpointsResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = hitpointsSkill
	)
	default ResetType hitpointsResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "hitpointsMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = hitpointsSkill
	)
	default boolean hitpointsMonday() { return false; }

	@ConfigItem(
			keyName = "hitpointsTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = hitpointsSkill
	)
	default boolean hitpointsTuesday() { return false; }

	@ConfigItem(
			keyName = "hitpointsWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = hitpointsSkill
	)
	default boolean hitpointsWednesday() { return false; }

	@ConfigItem(
			keyName = "hitpointsThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = hitpointsSkill
	)
	default boolean hitpointsThursday() { return false; }

	@ConfigItem(
			keyName = "hitpointsFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = hitpointsSkill
	)
	default boolean hitpointsFriday() { return false; }

	@ConfigItem(
			keyName = "hitpointsSaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = hitpointsSkill
	)
	default boolean hitpointsSaturday() { return false; }

	@ConfigItem(
			keyName = "hitpointsSunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = hitpointsSkill
	)
	default boolean hitpointsSunday() { return false; }

	@ConfigItem(
			keyName = "hitpointsStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = hitpointsSkill
	)
	default Hour hitpointsStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "hitpointsEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = hitpointsSkill
	)
	default Hour hitpointsEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "hitpointsDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = hitpointsSkill
	)
	default DayCadence hitpointsDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "hitpointsCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = hitpointsSkill
	)
	default DayCadence hitpointsDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "HitpointsVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = hitpointsSkill
	)
	default String hitpointsPattens() { return ""; }

	@ConfigSection(
			name = "Agility",
			description = "Agility Skill",
			position = 0,
			closedByDefault = true
	)
	String agilitySkill = "agilitySkill";

	@ConfigItem(
			keyName = "enableAgility",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not agility skill is enabled.",
			section = agilitySkill
	)
	default boolean enableAgilitySkill() { return false; }

	@ConfigItem(
			keyName = "agilityXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = agilitySkill
	)
	default int agilityXpGoal() { return 1; }

	@ConfigItem(
			keyName = "agilityResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = agilitySkill
	)
	default ResetType agilityResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "agilityMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = agilitySkill
	)
	default boolean agilityMonday() { return false; }

	@ConfigItem(
			keyName = "agilityTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = agilitySkill
	)
	default boolean agilityTuesday() { return false; }

	@ConfigItem(
			keyName = "agilityWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = agilitySkill
	)
	default boolean agilityWednesday() { return false; }

	@ConfigItem(
			keyName = "agilityThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = agilitySkill
	)
	default boolean agilityThursday() { return false; }

	@ConfigItem(
			keyName = "agilityFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = agilitySkill
	)
	default boolean agilityFriday() { return false; }

	@ConfigItem(
			keyName = "agilitySaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = agilitySkill
	)
	default boolean agilitySaturday() { return false; }

	@ConfigItem(
			keyName = "agilitySunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = agilitySkill
	)
	default boolean agilitySunday() { return false; }

	@ConfigItem(
			keyName = "agilityStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = agilitySkill
	)
	default Hour agilityStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "agilityEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = agilitySkill
	)
	default Hour agilityEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "agilityDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = agilitySkill
	)
	default DayCadence agilityDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "agilityCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = agilitySkill
	)
	default DayCadence agilityDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "AgilityVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = agilitySkill
	)
	default String agilityPattens() { return ""; }

	@ConfigSection(
			name = "Herblore",
			description = "Herblore Skill",
			position = 0,
			closedByDefault = true
	)
	String herbloreSkill = "herbloreSkill";

	@ConfigItem(
			keyName = "enableHerblore",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not herblore skill is enabled.",
			section = herbloreSkill
	)
	default boolean enableHerbloreSkill() { return false; }

	@ConfigItem(
			keyName = "herbloreXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = herbloreSkill
	)
	default int herbloreXpGoal() { return 1; }

	@ConfigItem(
			keyName = "herbloreResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = herbloreSkill
	)
	default ResetType herbloreResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "herbloreMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = herbloreSkill
	)
	default boolean herbloreMonday() { return false; }

	@ConfigItem(
			keyName = "herbloreTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = herbloreSkill
	)
	default boolean herbloreTuesday() { return false; }

	@ConfigItem(
			keyName = "herbloreWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = herbloreSkill
	)
	default boolean herbloreWednesday() { return false; }

	@ConfigItem(
			keyName = "herbloreThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = herbloreSkill
	)
	default boolean herbloreThursday() { return false; }

	@ConfigItem(
			keyName = "herbloreFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = herbloreSkill
	)
	default boolean herbloreFriday() { return false; }

	@ConfigItem(
			keyName = "herbloreSaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = herbloreSkill
	)
	default boolean herbloreSaturday() { return false; }

	@ConfigItem(
			keyName = "herbloreSunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = herbloreSkill
	)
	default boolean herbloreSunday() { return false; }

	@ConfigItem(
			keyName = "herbloreStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = herbloreSkill
	)
	default Hour herbloreStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "herbloreEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = herbloreSkill
	)
	default Hour herbloreEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "herbloreDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = herbloreSkill
	)
	default DayCadence herbloreDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "herbloreCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = herbloreSkill
	)
	default DayCadence herbloreDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "HerbloreVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = herbloreSkill
	)
	default String herblorePattens() { return ""; }

	@ConfigSection(
			name = "Thieving",
			description = "Thieving Skill",
			position = 0,
			closedByDefault = true
	)
	String thievingSkill = "thievingSkill";

	@ConfigItem(
			keyName = "enableThieving",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not thieving skill is enabled.",
			section = thievingSkill
	)
	default boolean enableThievingSkill() { return false; }

	@ConfigItem(
			keyName = "thievingXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = thievingSkill
	)
	default int thievingXpGoal() { return 1; }

	@ConfigItem(
			keyName = "thievingResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = thievingSkill
	)
	default ResetType thievingResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "thievingMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = thievingSkill
	)
	default boolean thievingMonday() { return false; }

	@ConfigItem(
			keyName = "thievingTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = thievingSkill
	)
	default boolean thievingTuesday() { return false; }

	@ConfigItem(
			keyName = "thievingWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = thievingSkill
	)
	default boolean thievingWednesday() { return false; }

	@ConfigItem(
			keyName = "thievingThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = thievingSkill
	)
	default boolean thievingThursday() { return false; }

	@ConfigItem(
			keyName = "thievingFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = thievingSkill
	)
	default boolean thievingFriday() { return false; }

	@ConfigItem(
			keyName = "thievingSaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = thievingSkill
	)
	default boolean thievingSaturday() { return false; }

	@ConfigItem(
			keyName = "thievingSunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = thievingSkill
	)
	default boolean thievingSunday() { return false; }

	@ConfigItem(
			keyName = "thievingStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = thievingSkill
	)
	default Hour thievingStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "thievingEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = thievingSkill
	)
	default Hour thievingEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "thievingDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = thievingSkill
	)
	default DayCadence thievingDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "thievingCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = thievingSkill
	)
	default DayCadence thievingDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "ThievingVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = thievingSkill
	)
	default String thievingPattens() { return ""; }

	@ConfigSection(
			name = "Crafting",
			description = "Crafting Skill",
			position = 0,
			closedByDefault = true
	)
	String craftingSkill = "craftingSkill";

	@ConfigItem(
			keyName = "enableCrafting",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not crafting skill is enabled.",
			section = craftingSkill
	)
	default boolean enableCraftingSkill() { return false; }

	@ConfigItem(
			keyName = "craftingXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = craftingSkill
	)
	default int craftingXpGoal() { return 1; }

	@ConfigItem(
			keyName = "craftingResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = craftingSkill
	)
	default ResetType craftingResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "craftingMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = craftingSkill
	)
	default boolean craftingMonday() { return false; }

	@ConfigItem(
			keyName = "craftingTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = craftingSkill
	)
	default boolean craftingTuesday() { return false; }

	@ConfigItem(
			keyName = "craftingWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = craftingSkill
	)
	default boolean craftingWednesday() { return false; }

	@ConfigItem(
			keyName = "craftingThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = craftingSkill
	)
	default boolean craftingThursday() { return false; }

	@ConfigItem(
			keyName = "craftingFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = craftingSkill
	)
	default boolean craftingFriday() { return false; }

	@ConfigItem(
			keyName = "craftingSaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = craftingSkill
	)
	default boolean craftingSaturday() { return false; }

	@ConfigItem(
			keyName = "craftingSunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = craftingSkill
	)
	default boolean craftingSunday() { return false; }

	@ConfigItem(
			keyName = "craftingStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = craftingSkill
	)
	default Hour craftingStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "craftingEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = craftingSkill
	)
	default Hour craftingEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "craftingDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = craftingSkill
	)
	default DayCadence craftingDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "craftingCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = craftingSkill
	)
	default DayCadence craftingDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "CraftingVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = craftingSkill
	)
	default String craftingPattens() { return ""; }

	@ConfigSection(
			name = "Fletching",
			description = "Fletching Skill",
			position = 0,
			closedByDefault = true
	)
	String fletchingSkill = "fletchingSkill";

	@ConfigItem(
			keyName = "enableFletching",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not fletching skill is enabled.",
			section = fletchingSkill
	)
	default boolean enableFletchingSkill() { return false; }

	@ConfigItem(
			keyName = "fletchingXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = fletchingSkill
	)
	default int fletchingXpGoal() { return 1; }

	@ConfigItem(
			keyName = "fletchingResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = fletchingSkill
	)
	default ResetType fletchingResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "fletchingMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = fletchingSkill
	)
	default boolean fletchingMonday() { return false; }

	@ConfigItem(
			keyName = "fletchingTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = fletchingSkill
	)
	default boolean fletchingTuesday() { return false; }

	@ConfigItem(
			keyName = "fletchingWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = fletchingSkill
	)
	default boolean fletchingWednesday() { return false; }

	@ConfigItem(
			keyName = "fletchingThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = fletchingSkill
	)
	default boolean fletchingThursday() { return false; }

	@ConfigItem(
			keyName = "fletchingFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = fletchingSkill
	)
	default boolean fletchingFriday() { return false; }

	@ConfigItem(
			keyName = "fletchingSaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = fletchingSkill
	)
	default boolean fletchingSaturday() { return false; }

	@ConfigItem(
			keyName = "fletchingSunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = fletchingSkill
	)
	default boolean fletchingSunday() { return false; }

	@ConfigItem(
			keyName = "fletchingStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = fletchingSkill
	)
	default Hour fletchingStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "fletchingEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = fletchingSkill
	)
	default Hour fletchingEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "fletchingDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = fletchingSkill
	)
	default DayCadence fletchingDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "fletchingCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = fletchingSkill
	)
	default DayCadence fletchingDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "FletchingVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = fletchingSkill
	)
	default String fletchingPattens() { return ""; }

	@ConfigSection(
			name = "Slayer",
			description = "Slayer Skill",
			position = 0,
			closedByDefault = true
	)
	String slayerSkill = "slayerSkill";

	@ConfigItem(
			keyName = "enableSlayer",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not slayer skill is enabled.",
			section = slayerSkill
	)
	default boolean enableSlayerSkill() { return false; }

	@ConfigItem(
			keyName = "slayerXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = slayerSkill
	)
	default int slayerXpGoal() { return 1; }

	@ConfigItem(
			keyName = "slayerResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = slayerSkill
	)
	default ResetType slayerResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "slayerMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = slayerSkill
	)
	default boolean slayerMonday() { return false; }

	@ConfigItem(
			keyName = "slayerTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = slayerSkill
	)
	default boolean slayerTuesday() { return false; }

	@ConfigItem(
			keyName = "slayerWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = slayerSkill
	)
	default boolean slayerWednesday() { return false; }

	@ConfigItem(
			keyName = "slayerThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = slayerSkill
	)
	default boolean slayerThursday() { return false; }

	@ConfigItem(
			keyName = "slayerFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = slayerSkill
	)
	default boolean slayerFriday() { return false; }

	@ConfigItem(
			keyName = "slayerSaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = slayerSkill
	)
	default boolean slayerSaturday() { return false; }

	@ConfigItem(
			keyName = "slayerSunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = slayerSkill
	)
	default boolean slayerSunday() { return false; }

	@ConfigItem(
			keyName = "slayerStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = slayerSkill
	)
	default Hour slayerStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "slayerEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = slayerSkill
	)
	default Hour slayerEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "slayerDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = slayerSkill
	)
	default DayCadence slayerDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "slayerCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = slayerSkill
	)
	default DayCadence slayerDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "SlayerVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = slayerSkill
	)
	default String slayerPattens() { return ""; }

	@ConfigSection(
			name = "Hunter",
			description = "Hunter Skill",
			position = 0,
			closedByDefault = true
	)
	String hunterSkill = "hunterSkill";

	@ConfigItem(
			keyName = "enableHunter",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not hunter skill is enabled.",
			section = hunterSkill
	)
	default boolean enableHunterSkill() { return false; }

	@ConfigItem(
			keyName = "hunterXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = hunterSkill
	)
	default int hunterXpGoal() { return 1; }

	@ConfigItem(
			keyName = "hunterResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = hunterSkill
	)
	default ResetType hunterResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "hunterMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = hunterSkill
	)
	default boolean hunterMonday() { return false; }

	@ConfigItem(
			keyName = "hunterTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = hunterSkill
	)
	default boolean hunterTuesday() { return false; }

	@ConfigItem(
			keyName = "hunterWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = hunterSkill
	)
	default boolean hunterWednesday() { return false; }

	@ConfigItem(
			keyName = "hunterThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = hunterSkill
	)
	default boolean hunterThursday() { return false; }

	@ConfigItem(
			keyName = "hunterFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = hunterSkill
	)
	default boolean hunterFriday() { return false; }

	@ConfigItem(
			keyName = "hunterSaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = hunterSkill
	)
	default boolean hunterSaturday() { return false; }

	@ConfigItem(
			keyName = "hunterSunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = hunterSkill
	)
	default boolean hunterSunday() { return false; }

	@ConfigItem(
			keyName = "hunterStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = hunterSkill
	)
	default Hour hunterStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "hunterEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = hunterSkill
	)
	default Hour hunterEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "hunterDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = hunterSkill
	)
	default DayCadence hunterDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "hunterCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = hunterSkill
	)
	default DayCadence hunterDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "HunterVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = hunterSkill
	)
	default String hunterPattens() { return ""; }

	@ConfigSection(
			name = "Mining",
			description = "Mining Skill",
			position = 0,
			closedByDefault = true
	)
	String miningSkill = "miningSkill";

	@ConfigItem(
			keyName = "enableMining",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not mining skill is enabled.",
			section = miningSkill
	)
	default boolean enableMiningSkill() { return false; }

	@ConfigItem(
			keyName = "miningXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = miningSkill
	)
	default int miningXpGoal() { return 1; }

	@ConfigItem(
			keyName = "miningResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = miningSkill
	)
	default ResetType miningResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "miningMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = miningSkill
	)
	default boolean miningMonday() { return false; }

	@ConfigItem(
			keyName = "miningTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = miningSkill
	)
	default boolean miningTuesday() { return false; }

	@ConfigItem(
			keyName = "miningWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = miningSkill
	)
	default boolean miningWednesday() { return false; }

	@ConfigItem(
			keyName = "miningThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = miningSkill
	)
	default boolean miningThursday() { return false; }

	@ConfigItem(
			keyName = "miningFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = miningSkill
	)
	default boolean miningFriday() { return false; }

	@ConfigItem(
			keyName = "miningSaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = miningSkill
	)
	default boolean miningSaturday() { return false; }

	@ConfigItem(
			keyName = "miningSunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = miningSkill
	)
	default boolean miningSunday() { return false; }

	@ConfigItem(
			keyName = "miningStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = miningSkill
	)
	default Hour miningStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "miningEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = miningSkill
	)
	default Hour miningEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "miningDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = miningSkill
	)
	default DayCadence miningDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "miningCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = miningSkill
	)
	default DayCadence miningDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "MiningVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = miningSkill
	)
	default String miningPattens() { return ""; }

	@ConfigSection(
			name = "Smithing",
			description = "Smithing Skill",
			position = 0,
			closedByDefault = true
	)
	String smithingSkill = "smithingSkill";

	@ConfigItem(
			keyName = "enableSmithing",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not smithing skill is enabled.",
			section = smithingSkill
	)
	default boolean enableSmithingSkill() { return false; }

	@ConfigItem(
			keyName = "smithingXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = smithingSkill
	)
	default int smithingXpGoal() { return 1; }

	@ConfigItem(
			keyName = "smithingResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = smithingSkill
	)
	default ResetType smithingResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "smithingMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = smithingSkill
	)
	default boolean smithingMonday() { return false; }

	@ConfigItem(
			keyName = "smithingTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = smithingSkill
	)
	default boolean smithingTuesday() { return false; }

	@ConfigItem(
			keyName = "smithingWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = smithingSkill
	)
	default boolean smithingWednesday() { return false; }

	@ConfigItem(
			keyName = "smithingThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = smithingSkill
	)
	default boolean smithingThursday() { return false; }

	@ConfigItem(
			keyName = "smithingFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = smithingSkill
	)
	default boolean smithingFriday() { return false; }

	@ConfigItem(
			keyName = "smithingSaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = smithingSkill
	)
	default boolean smithingSaturday() { return false; }

	@ConfigItem(
			keyName = "smithingSunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = smithingSkill
	)
	default boolean smithingSunday() { return false; }

	@ConfigItem(
			keyName = "smithingStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = smithingSkill
	)
	default Hour smithingStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "smithingEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = smithingSkill
	)
	default Hour smithingEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "smithingDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = smithingSkill
	)
	default DayCadence smithingDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "smithingCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = smithingSkill
	)
	default DayCadence smithingDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "SmithingVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = smithingSkill
	)
	default String smithingPattens() { return ""; }

	@ConfigSection(
			name = "Fishing",
			description = "Fishing Skill",
			position = 0,
			closedByDefault = true
	)
	String fishingSkill = "fishingSkill";

	@ConfigItem(
			keyName = "enableFishing",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not fishing skill is enabled.",
			section = fishingSkill
	)
	default boolean enableFishingSkill() { return false; }

	@ConfigItem(
			keyName = "fishingXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = fishingSkill
	)
	default int fishingXpGoal() { return 1; }

	@ConfigItem(
			keyName = "fishingResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = fishingSkill
	)
	default ResetType fishingResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "fishingMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = fishingSkill
	)
	default boolean fishingMonday() { return false; }

	@ConfigItem(
			keyName = "fishingTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = fishingSkill
	)
	default boolean fishingTuesday() { return false; }

	@ConfigItem(
			keyName = "fishingWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = fishingSkill
	)
	default boolean fishingWednesday() { return false; }

	@ConfigItem(
			keyName = "fishingThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = fishingSkill
	)
	default boolean fishingThursday() { return false; }

	@ConfigItem(
			keyName = "fishingFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = fishingSkill
	)
	default boolean fishingFriday() { return false; }

	@ConfigItem(
			keyName = "fishingSaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = fishingSkill
	)
	default boolean fishingSaturday() { return false; }

	@ConfigItem(
			keyName = "fishingSunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = fishingSkill
	)
	default boolean fishingSunday() { return false; }

	@ConfigItem(
			keyName = "fishingStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = fishingSkill
	)
	default Hour fishingStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "fishingEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = fishingSkill
	)
	default Hour fishingEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "fishingDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = fishingSkill
	)
	default DayCadence fishingDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "fishingCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = fishingSkill
	)
	default DayCadence fishingDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "FishingVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = fishingSkill
	)
	default String fishingPattens() { return ""; }

	@ConfigSection(
			name = "Cooking",
			description = "Cooking Skill",
			position = 0,
			closedByDefault = true
	)
	String cookingSkill = "cookingSkill";

	@ConfigItem(
			keyName = "enableCooking",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not cooking skill is enabled.",
			section = cookingSkill
	)
	default boolean enableCookingSkill() { return false; }

	@ConfigItem(
			keyName = "cookingXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = cookingSkill
	)
	default int cookingXpGoal() { return 1; }

	@ConfigItem(
			keyName = "cookingResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = cookingSkill
	)
	default ResetType cookingResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "cookingMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = cookingSkill
	)
	default boolean cookingMonday() { return false; }

	@ConfigItem(
			keyName = "cookingTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = cookingSkill
	)
	default boolean cookingTuesday() { return false; }

	@ConfigItem(
			keyName = "cookingWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = cookingSkill
	)
	default boolean cookingWednesday() { return false; }

	@ConfigItem(
			keyName = "cookingThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = cookingSkill
	)
	default boolean cookingThursday() { return false; }

	@ConfigItem(
			keyName = "cookingFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = cookingSkill
	)
	default boolean cookingFriday() { return false; }

	@ConfigItem(
			keyName = "cookingSaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = cookingSkill
	)
	default boolean cookingSaturday() { return false; }

	@ConfigItem(
			keyName = "cookingSunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = cookingSkill
	)
	default boolean cookingSunday() { return false; }

	@ConfigItem(
			keyName = "cookingStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = cookingSkill
	)
	default Hour cookingStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "cookingEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = cookingSkill
	)
	default Hour cookingEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "cookingDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = cookingSkill
	)
	default DayCadence cookingDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "cookingCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = cookingSkill
	)
	default DayCadence cookingDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "CookingVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = cookingSkill
	)
	default String cookingPattens() { return ""; }

	@ConfigSection(
			name = "Firemaking",
			description = "Firemaking Skill",
			position = 0,
			closedByDefault = true
	)
	String firemakingSkill = "firemakingSkill";

	@ConfigItem(
			keyName = "enableFiremaking",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not firemaking skill is enabled.",
			section = firemakingSkill
	)
	default boolean enableFiremakingSkill() { return false; }

	@ConfigItem(
			keyName = "firemakingXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = firemakingSkill
	)
	default int firemakingXpGoal() { return 1; }

	@ConfigItem(
			keyName = "firemakingResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = firemakingSkill
	)
	default ResetType firemakingResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "firemakingMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = firemakingSkill
	)
	default boolean firemakingMonday() { return false; }

	@ConfigItem(
			keyName = "firemakingTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = firemakingSkill
	)
	default boolean firemakingTuesday() { return false; }

	@ConfigItem(
			keyName = "firemakingWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = firemakingSkill
	)
	default boolean firemakingWednesday() { return false; }

	@ConfigItem(
			keyName = "firemakingThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = firemakingSkill
	)
	default boolean firemakingThursday() { return false; }

	@ConfigItem(
			keyName = "firemakingFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = firemakingSkill
	)
	default boolean firemakingFriday() { return false; }

	@ConfigItem(
			keyName = "firemakingSaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = firemakingSkill
	)
	default boolean firemakingSaturday() { return false; }

	@ConfigItem(
			keyName = "firemakingSunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = firemakingSkill
	)
	default boolean firemakingSunday() { return false; }

	@ConfigItem(
			keyName = "firemakingStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = firemakingSkill
	)
	default Hour firemakingStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "firemakingEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = firemakingSkill
	)
	default Hour firemakingEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "firemakingDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = firemakingSkill
	)
	default DayCadence firemakingDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "firemakingCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = firemakingSkill
	)
	default DayCadence firemakingDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "FiremakingVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = firemakingSkill
	)
	default String firemakingPattens() { return ""; }

	@ConfigSection(
			name = "Woodcutting",
			description = "Woodcutting Skill",
			position = 0,
			closedByDefault = true
	)
	String woodcuttingSkill = "woodcuttingSkill";

	@ConfigItem(
			keyName = "enableWoodcutting",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not woodcutting skill is enabled.",
			section = woodcuttingSkill
	)
	default boolean enableWoodcuttingSkill() { return false; }

	@ConfigItem(
			keyName = "woodcuttingXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = woodcuttingSkill
	)
	default int woodcuttingXpGoal() { return 1; }

	@ConfigItem(
			keyName = "woodcuttingResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = woodcuttingSkill
	)
	default ResetType woodcuttingResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "woodcuttingMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = woodcuttingSkill
	)
	default boolean woodcuttingMonday() { return false; }

	@ConfigItem(
			keyName = "woodcuttingTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = woodcuttingSkill
	)
	default boolean woodcuttingTuesday() { return false; }

	@ConfigItem(
			keyName = "woodcuttingWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = woodcuttingSkill
	)
	default boolean woodcuttingWednesday() { return false; }

	@ConfigItem(
			keyName = "woodcuttingThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = woodcuttingSkill
	)
	default boolean woodcuttingThursday() { return false; }

	@ConfigItem(
			keyName = "woodcuttingFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = woodcuttingSkill
	)
	default boolean woodcuttingFriday() { return false; }

	@ConfigItem(
			keyName = "woodcuttingSaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = woodcuttingSkill
	)
	default boolean woodcuttingSaturday() { return false; }

	@ConfigItem(
			keyName = "woodcuttingSunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = woodcuttingSkill
	)
	default boolean woodcuttingSunday() { return false; }

	@ConfigItem(
			keyName = "woodcuttingStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = woodcuttingSkill
	)
	default Hour woodcuttingStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "woodcuttingEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = woodcuttingSkill
	)
	default Hour woodcuttingEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "woodcuttingDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = woodcuttingSkill
	)
	default DayCadence woodcuttingDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "woodcuttingCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = woodcuttingSkill
	)
	default DayCadence woodcuttingDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "WoodcuttingVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = woodcuttingSkill
	)
	default String woodcuttingPattens() { return ""; }

	@ConfigSection(
			name = "Farming",
			description = "Farming Skill",
			position = 0,
			closedByDefault = true
	)
	String farmingSkill = "farmingSkill";

	@ConfigItem(
			keyName = "enableFarming",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not farming skill is enabled.",
			section = farmingSkill
	)
	default boolean enableFarmingSkill() { return false; }

	@ConfigItem(
			keyName = "farmingXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = farmingSkill
	)
	default int farmingXpGoal() { return 1; }

	@ConfigItem(
			keyName = "farmingResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = farmingSkill
	)
	default ResetType farmingResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "farmingMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = farmingSkill
	)
	default boolean farmingMonday() { return false; }

	@ConfigItem(
			keyName = "farmingTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = farmingSkill
	)
	default boolean farmingTuesday() { return false; }

	@ConfigItem(
			keyName = "farmingWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = farmingSkill
	)
	default boolean farmingWednesday() { return false; }

	@ConfigItem(
			keyName = "farmingThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = farmingSkill
	)
	default boolean farmingThursday() { return false; }

	@ConfigItem(
			keyName = "farmingFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = farmingSkill
	)
	default boolean farmingFriday() { return false; }

	@ConfigItem(
			keyName = "farmingSaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = farmingSkill
	)
	default boolean farmingSaturday() { return false; }

	@ConfigItem(
			keyName = "farmingSunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = farmingSkill
	)
	default boolean farmingSunday() { return false; }

	@ConfigItem(
			keyName = "farmingStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = farmingSkill
	)
	default Hour farmingStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "farmingEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = farmingSkill
	)
	default Hour farmingEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "farmingDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = farmingSkill
	)
	default DayCadence farmingDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "farmingCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = farmingSkill
	)
	default DayCadence farmingDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "FarmingVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = farmingSkill
	)
	default String farmingPattens() { return ""; }

	@ConfigSection(
			name = "Total Xp",
			description = "Total Xp",
			position = -1,
			closedByDefault = true
	)
	String totalxpSkill = "totalxpSkill";

	@ConfigItem(
			keyName = "enableTotalxp",
			position = 0,
			name = "Enabled",
			description = "Configures whether or not Total XP is enabled.",
			section = totalxpSkill
	)
	default boolean enableTotalxpSkill() { return false; }

	@ConfigItem(
			keyName = "totalxpXpGoal",
			position = 2,
			name = "Target Xp",
			description = "Configures the xp goal.",
			section = totalxpSkill
	)
	default int totalxpXpGoal() { return 1; }

	@ConfigItem(
			keyName = "totalxpResetType",
			position = 3,
			name = "Reset Interval",
			description = "Configured how often skill progress resets.",
			section = totalxpSkill
	)
	default ResetType totalxpResetType() { return ResetType.NONE; }

	@ConfigItem(
			keyName = "totalxpMonday",
			position = 4,
			name = "Monday",
			description = "Configures whether or not progress is recorded on Mondays.",
			section = totalxpSkill
	)
	default boolean totalxpMonday() { return false; }

	@ConfigItem(
			keyName = "totalxpTuesday",
			position = 5,
			name = "Tuesday",
			description = "Configures whether or not progress is recorded on Tuesdays.",
			section = totalxpSkill
	)
	default boolean totalxpTuesday() { return false; }

	@ConfigItem(
			keyName = "totalxpWednesday",
			position = 6,
			name = "Wednesday",
			description = "Configures whether or not progress is recorded on Wednesdays.",
			section = totalxpSkill
	)
	default boolean totalxpWednesday() { return false; }

	@ConfigItem(
			keyName = "totalxpThursday",
			position = 7,
			name = "Thursday",
			description = "Configures whether or not progress is recorded on Thursdays.",
			section = totalxpSkill
	)
	default boolean totalxpThursday() { return false; }

	@ConfigItem(
			keyName = "totalxpFriday",
			position = 8,
			name = "Friday",
			description = "Configures whether or not progress is recorded on Fridays.",
			section = totalxpSkill
	)
	default boolean totalxpFriday() { return false; }

	@ConfigItem(
			keyName = "totalxpSaturday",
			position = 9,
			name = "Saturday",
			description = "Configures whether or not progress is recorded on Saturdays.",
			section = totalxpSkill
	)
	default boolean totalxpSaturday() { return false; }

	@ConfigItem(
			keyName = "totalxpSunday",
			position = 10,
			name = "Sunday",
			description = "Configures whether or not progress is recorded on Sundays.",
			section = totalxpSkill
	)
	default boolean totalxpSunday() { return false; }

	@ConfigItem(
			keyName = "totalxpStartTime",
			position = 11,
			name = "Start Time",
			description = "Configures the start time for when progress is recorded each day.",
			section = totalxpSkill
	)
	default Hour totalxpStartTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "totalxpEndTime",
			position = 12,
			name = "End Time",
			description = "Configures the end time for when progress is recorded each day.",
			section = totalxpSkill
	)
	default Hour totalxpEndTime() { return Hour.NONE; }

	@ConfigItem(
			keyName = "totalxpDayCadence",
			position = 13,
			name = "Day Cadence Length",
			description = "Configures the day cadence length for when progress is recorded. For example a 5 day cadence goes (1, 2, 3, 4, 5), then repeats.",
			section = totalxpSkill
	)
	default DayCadence totalxpDayCadence() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "totalxpCadenceDay",
			position = 14,
			name = "Cadence Day",
			description = "Configures on which day in the cadence progress is recorded.",
			section = totalxpSkill
	)
	default DayCadence totalxpDayCadenceDay() { return DayCadence.NONE; }

	@ConfigItem(
			keyName = "TotalxpVisibilityPatterns",
			position = 15,
			name = "Custom Patterns",
			description = "Configures custom record patterns. See plugin page about making custom patterns.",
			section = totalxpSkill
	)
	default String totalxpPattens() { return ""; }
}
package com.ericversteeg;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class XpGoalsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(XpGoalsPlugin.class);
		RuneLite.main(args);
	}
}
