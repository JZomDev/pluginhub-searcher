package com.hitsounds;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class HitSoundsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(HitSoundsPlugin.class);
		RuneLite.main(args);
	}
}
package com.hitsounds;

import com.hitsounds.enums.SoundEffectSelectionEnum;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("hitsounds")
public interface HitSoundsConfig extends Config
{

	@ConfigSection(
			position = 1,
			name = "Hitsplat Toggles",
			description = "Toggle hitsplat sounds on and off"
	)
	String hitsplatToggleSection = "hitsplatToggleSection";

	@ConfigSection(
			position = 2,
			name = "Default Hitsplat Sounds",
			description = "Select default in-game hitsplat sounds"
	)
	String defaultHitsplatSection = "defaultHitsplatSection";

	@ConfigSection(
			position = 3,
			name = "Custom Hitsplat Sounds",
			description = "Select the path to your custom hitsplat sound [.wav], overrides default sounds!"
	)
	String customHitsplatSection = "customHitsplatSection";

	@ConfigItem(
			keyName = "muteOthers",
			name = "Mute Others",
			description = "Prevent other players' sounds.",
			section = "hitsplatToggleSection",
			position = 1
	)
	default boolean muteOthers() {return false;}

	@ConfigItem(
			keyName = "normalHitBoolean",
			name = "Normal",
			description = "Enable/Disable Normal Hit Sounds",
			section = "hitsplatToggleSection",
			position = 2
	)
	default boolean normalHitBoolean() {return true;}


	@ConfigItem(
			keyName = "maxHitBoolean",
			name = "Max",
			description = "Enable/Disable Max Hit Sounds",
			section = "hitsplatToggleSection",
			position = 3
	)
	default boolean maxHitBoolean() {return true;}


	@ConfigItem(
			keyName = "poisonHitBoolean",
			name = "Poison",
			description = "Enable/Disable Poison Hit Sounds",
			section = "hitsplatToggleSection",
			position = 4
	)
	default boolean poisonHitBoolean() {return true;}


	@ConfigItem(
			keyName = "venomHitBoolean",
			name = "Venom",
			description = "Enable/Disable Venom Hit Sounds",
			section = "hitsplatToggleSection",
			position = 5
	)
	default boolean venomHitBoolean() {return true;}


	@ConfigItem(
			keyName = "diseaseHitBoolean",
			name = "Disease",
			description = "Enable/Disable Disease Hit Sounds",
			section = "hitsplatToggleSection",
			position = 6
	)
	default boolean diseaseHitBoolean() {return true;}


	@ConfigItem(
			keyName = "missHitBoolean",
			name = "Miss",
			description = "Enable/Disable Miss Hit Sounds",
			section = "hitsplatToggleSection",
			position = 7
	)
	default boolean missHitBoolean() {return true;}


	@ConfigItem(
			keyName = "healingHitBoolean",
			name = "Healing",
			description = "Enable/Disable Healing Hit Sounds",
			section = "hitsplatToggleSection",
			position = 8
	)
	default boolean healingHitBoolean() {return true;}

	@ConfigItem(
			keyName = "shieldHitBoolean",
			name = "Shield",
			description = "Enable/Disable Shield Hit Sounds",
			section = "hitsplatToggleSection",
			position = 9
	)
	default boolean shieldHitBoolean() {return true;}

	@ConfigItem(
			keyName = "armourHitBoolean",
			name = "Armour",
			description = "Enable/Disable Armour Hit Sounds",
			section = "hitsplatToggleSection",
			position = 10
	)
	default boolean armourHitBoolean() {return true;}

	@ConfigItem(
			keyName = "chargeHitBoolean",
			name = "Charge",
			description = "Enable/Disable Charge Hit Sounds",
			section = "hitsplatToggleSection",
			position = 11
	)
	default boolean chargeHitBoolean() {return true;}

	@ConfigItem(
			keyName = "unchargeHitBoolean",
			name = "Uncharge",
			description = "Enable/Disable Uncharge Hit Sounds",
			section = "hitsplatToggleSection",
			position = 12
	)
	default boolean unchargeHitBoolean() {return true;}

	@ConfigItem(
			keyName = "otherHitBoolean",
			name = "Other",
			description = "Enable/Disable Other Hit Sounds",
			section = "hitsplatToggleSection",
			position = 9
	)
	default boolean otherHitBoolean() {return true;}

	@ConfigItem(
			keyName = "normalDefaultHitSound",
			name = "Normal",
			description = "Set Default Normal Hit Sound",
			section = "defaultHitsplatSection",
			position = 1
	)
	default SoundEffectSelectionEnum normalHitSound() {return SoundEffectSelectionEnum.TINDER_STRIKE;}

	@ConfigItem(
			keyName = "maxDefaultHitSound",
			name = "Max",
			description = "Set Default Max Hit Sound",
			section = "defaultHitsplatSection",
			position = 2
	)
	default SoundEffectSelectionEnum maxHitSound() {return SoundEffectSelectionEnum.ROCK_SKIN;}

	@ConfigItem(
			keyName = "poisonDefaultHitSound",
			name = "Poison",
			description = "Set Default Poison Hit Sound",
			section = "defaultHitsplatSection",
			position = 3
	)
	default SoundEffectSelectionEnum poisonHitSound() {return SoundEffectSelectionEnum.GE_DECREMENT;}

	@ConfigItem(
			keyName = "venomDefaultHitSound",
			name = "Venom",
			description = "Set Default Venom Hit Sound",
			section = "defaultHitsplatSection",
			position = 4
	)
	default SoundEffectSelectionEnum venomHitSound() {return SoundEffectSelectionEnum.ANVIL_TONK;}

	@ConfigItem(
			keyName = "diseaseDefaultHitSound",
			name = "Disease",
			description = "Set Default Disease Hit Sound",
			section = "defaultHitsplatSection",
			position = 5
	)
	default SoundEffectSelectionEnum diseaseHitSound() {return SoundEffectSelectionEnum.BELL_DING;}

	@ConfigItem(
			keyName = "missDefaultHitSound",
			name = "Miss",
			description = "Set Default Miss Hit Sound",
			section = "defaultHitsplatSection",
			position = 6
	)
	default SoundEffectSelectionEnum missHitSound() {return SoundEffectSelectionEnum.PICK_PLANT;}

	@ConfigItem(
			keyName = "healingDefaultHitSound",
			name = "Healing",
			description = "Set Default Healing Hit Sound",
			section = "defaultHitsplatSection",
			position = 7
	)
	default SoundEffectSelectionEnum healingHitSound() {return SoundEffectSelectionEnum.IMPROVED_REFLEXES;}

	@ConfigItem(
			keyName = "shieldDefaultHitSound",
			name = "Shield",
			description = "Set Default Shield Hit Sound",
			section = "defaultHitsplatSection",
			position = 8
	)
	default SoundEffectSelectionEnum shieldHitSound() {return SoundEffectSelectionEnum.IMPROVED_REFLEXES;}

	@ConfigItem(
			keyName = "armourDefaultHitSound",
			name = "Armour",
			description = "Set Default Armour Hit Sound",
			section = "defaultHitsplatSection",
			position = 9
	)
	default SoundEffectSelectionEnum armourHitSound() {return SoundEffectSelectionEnum.IMPROVED_REFLEXES;}

	@ConfigItem(
			keyName = "chargeDefaultHitSound",
			name = "Charge",
			description = "Set Default Charge Hit Sound",
			section = "defaultHitsplatSection",
			position = 10
	)
	default SoundEffectSelectionEnum chargeHitSound() {return SoundEffectSelectionEnum.IMPROVED_REFLEXES;}

	@ConfigItem(
			keyName = "unchargeDefaultHitSound",
			name = "Uncharge",
			description = "Set Default Uncharge Hit Sound",
			section = "defaultHitsplatSection",
			position = 11
	)
	default SoundEffectSelectionEnum unchargeHitSound() {return SoundEffectSelectionEnum.IMPROVED_REFLEXES;}


	@ConfigItem(
			keyName = "otherDefaultHitSound",
			name = "Other",
			description = "Set Default Other Hit Sound",
			section = "defaultHitsplatSection",
			position = 12
	)
	default SoundEffectSelectionEnum otherHitSound() {return SoundEffectSelectionEnum.MINING_TINK;}

	@ConfigItem(
			keyName = "customHitSound",
			name = "Set Custom Sound",
			description = "Instructions to set a custom sound",
			section = "customHitsplatSection",
			position = 1,
			warning = "Reset this field if you accidentally remove it."
	)
	default String customHitSound() {return "Adding a custom sound\n" +
			"1a. Navigate to your .runelite folder\n" +
			"1b. You can right-click the screenshot button in the top right of the runelite client.\n" +
			"1c. Then open screenshot folder, and navigate to the .runelite directory.\n" +
			"2. Create a folder called 'hitsounds'.\n" +
			"3. Add your sound as a {category}.wav file in /.runelite/hitsounds/ .\n" +
			"\n" +
			"Acceptable File Names:\n" +
			"normal.wav\n" +
			"max.wav\n" +
			"poison.wav\n" +
			"venom.wav\n" +
			"disease.wav\n" +
			"miss.wav\n" +
			"healing.wav\n" +
			"shield.wav\n" +
			"armour.wav\n" +
			"charge.wav\n" +
			"uncharge.wav\n" +
			"other.wav";}
}

/*
 * Copyright (c) 2016-2017, Adam <Adam@sigterm.info>
 * Copyright (c) 2022, Ferrariic <ferrariictweet@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.hitsounds;

import com.google.inject.Provides;
import com.hitsounds.enums.HitSoundEnum;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.HitsplatID;
import net.runelite.api.events.HitsplatApplied;
import net.runelite.client.RuneLite;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import javax.inject.Inject;
import javax.sound.sampled.*;
import java.io.*;

@Slf4j
@PluginDescriptor(
	name = "Hit Sounds",
	description = "This plugin will send a custom sound on hitsplat",
	tags = {"sound", "hitsplat", "max", "poison", "disease", "venom","damage", "health"},
	enabledByDefault = true
)
public class HitSoundsPlugin extends Plugin
{
	@Inject
	private Client client;
	@Inject
	private HitSoundsConfig config;
	@Inject
	private ClientThread clientThread;
	private Clip clip = null;

	private static final String BASE_DIRECTORY = System.getProperty("user.home") + "/.runelite/hitsounds/";
	public static final File NORMAL_FILE = new File(BASE_DIRECTORY, "normal.wav");
	public static final File MAX_FILE = new File(BASE_DIRECTORY, "max.wav");
	public static final File POISON_FILE = new File(BASE_DIRECTORY, "poison.wav");
	public static final File VENOM_FILE = new File(BASE_DIRECTORY, "venom.wav");
	public static final File DISEASE_FILE = new File(BASE_DIRECTORY, "disease.wav");
	public static final File MISS_FILE = new File(BASE_DIRECTORY, "miss.wav");
	public static final File HEALING_FILE = new File(BASE_DIRECTORY, "healing.wav");
	public static final File SHIELD_FILE = new File(BASE_DIRECTORY, "shield.wav");
	public static final File ARMOUR_FILE = new File(BASE_DIRECTORY, "armour.wav");
	public static final File CHARGE_FILE = new File(BASE_DIRECTORY, "charge.wav");
	public static final File UNCHARGE_FILE = new File(BASE_DIRECTORY, "uncharge.wav");
	public static final File OTHER_FILE = new File(BASE_DIRECTORY, "other.wav");

	private long lastClipMTime = CLIP_MTIME_UNLOADED;
	private static final long CLIP_MTIME_UNLOADED = -2;
	private static final long CLIP_MTIME_BUILTIN = -1;

	@Override
	protected void startUp() throws Exception
	{
		log.info("Hit Sounds started!");
	}

	@Override
	protected void shutDown() throws Exception
	{
		log.info("Hit Sounds stopped!");
	}

	@Subscribe
	public void onHitsplatApplied(HitsplatApplied hitsplatApplied){
		switch(hitsplatApplied.getHitsplat().getHitsplatType()){

			case HitsplatID.DAMAGE_OTHER:
				if (config.muteOthers()){
					break;
				}
			case HitsplatID.DAMAGE_ME:
				if (!config.normalHitBoolean()){
					break;
				}
				if (!playCustomSound(HitSoundEnum.NORMAL)){
					clientThread.invoke(() -> client.playSoundEffect(config.normalHitSound().getID()));
				};
				break;

			case HitsplatID.BLOCK_OTHER:
				if (config.muteOthers()){
					break;
				}
			case HitsplatID.BLOCK_ME:
				if (!config.missHitBoolean()){
					break;
				}
				if (!playCustomSound(HitSoundEnum.MISS)){
					clientThread.invoke(() -> client.playSoundEffect(config.missHitSound().getID()));
				}
				break;

			case HitsplatID.DAMAGE_MAX_ME:
				if (!config.maxHitBoolean()){
					break;
				}
				if (!playCustomSound(HitSoundEnum.MAX)){
					clientThread.invoke(() -> client.playSoundEffect(config.maxHitSound().getID()));
				}
				break;
			case HitsplatID.DISEASE:
				if (!config.diseaseHitBoolean()){
					break;
				}
				if (!playCustomSound(HitSoundEnum.DISEASE)){
					clientThread.invoke(() -> client.playSoundEffect(config.diseaseHitSound().getID()));
				}
				break;
			case HitsplatID.VENOM:
				if (!config.venomHitBoolean()){
					break;
				}
				if (!playCustomSound(HitSoundEnum.VENOM)){
					clientThread.invoke(() -> client.playSoundEffect(config.venomHitSound().getID()));
				}
				break;

			case HitsplatID.HEAL:
				if (!config.healingHitBoolean()){
					break;
				}
				if (!playCustomSound(HitSoundEnum.HEALING)){
					clientThread.invoke(() -> client.playSoundEffect(config.healingHitSound().getID()));
				}
				break;
			case HitsplatID.POISON:
				if (!config.poisonHitBoolean()){
					break;
				}
				if (!playCustomSound(HitSoundEnum.POISON)){
					clientThread.invoke(() -> client.playSoundEffect(config.poisonHitSound().getID()));
				}
				break;

			case HitsplatID.DAMAGE_OTHER_CYAN:
				if (config.muteOthers()){
					break;
				}
			case HitsplatID.DAMAGE_ME_CYAN:
				if (!config.shieldHitBoolean()){
					break;
				}
				if (!playCustomSound(HitSoundEnum.SHIELD)){
					clientThread.invoke(() -> client.playSoundEffect(config.shieldHitSound().getID()));
				}
				break;
			case HitsplatID.DAMAGE_MAX_ME_CYAN:
				if (config.shieldHitBoolean() && config.maxHitBoolean()){
					if (!playCustomSound(HitSoundEnum.SHIELD)){
						clientThread.invoke(() -> client.playSoundEffect(config.shieldHitSound().getID()));
					}
					break;
				}
				break;

			case HitsplatID.DAMAGE_OTHER_WHITE:
				if (config.muteOthers()){
					break;
				}
			case HitsplatID.DAMAGE_ME_WHITE:
				if (!config.unchargeHitBoolean()){
					break;
				}
				if (!playCustomSound(HitSoundEnum.UNCHARGE)){
					clientThread.invoke(() -> client.playSoundEffect(config.unchargeHitSound().getID()));
				}
				break;
			case HitsplatID.DAMAGE_MAX_ME_WHITE:
				if (config.unchargeHitBoolean() && config.maxHitBoolean()){
					if (!playCustomSound(HitSoundEnum.UNCHARGE)){
						clientThread.invoke(() -> client.playSoundEffect(config.unchargeHitSound().getID()));
					}
					break;
				}
				break;

			case HitsplatID.DAMAGE_OTHER_YELLOW:
				if (config.muteOthers()){
					break;
				}
			case HitsplatID.DAMAGE_ME_YELLOW:
				if (!config.chargeHitBoolean()){
					break;
				}
				if (!playCustomSound(HitSoundEnum.CHARGE)){
					clientThread.invoke(() -> client.playSoundEffect(config.chargeHitSound().getID()));
				}
				break;
			case HitsplatID.DAMAGE_MAX_ME_YELLOW:
				if (config.chargeHitBoolean() && config.maxHitBoolean()){
					if (!playCustomSound(HitSoundEnum.CHARGE)){
						clientThread.invoke(() -> client.playSoundEffect(config.chargeHitSound().getID()));
					}
					break;
				}
				break;

			case HitsplatID.DAMAGE_OTHER_ORANGE:
				if (config.muteOthers()){
					break;
				}
			case HitsplatID.DAMAGE_ME_ORANGE:
				if (!config.armourHitBoolean()){
					break;
				}
				if (!playCustomSound(HitSoundEnum.ARMOUR)){
					clientThread.invoke(() -> client.playSoundEffect(config.armourHitSound().getID()));
				}
				break;
			case HitsplatID.DAMAGE_MAX_ME_ORANGE:
				if (config.armourHitBoolean() && config.maxHitBoolean()){
					if (!playCustomSound(HitSoundEnum.ARMOUR)){
						clientThread.invoke(() -> client.playSoundEffect(config.armourHitSound().getID()));
					}
					break;
				}
				break;

			default:
				if (!config.otherHitBoolean()){
					break;
				}
				if (!playCustomSound(HitSoundEnum.OTHER)){
					clientThread.invoke(() -> client.playSoundEffect(config.otherHitSound().getID()));
				}
				break;
		}
	}


	// modified from the notifier default plugin:
	// https://github.com/runelite/runelite/blob/63dd8af9b51757eb8140674d361a0473cf7e0441/runelite-client/src/main/java/net/runelite/client/Notifier.java#L446-L512
	private synchronized boolean playCustomSound(HitSoundEnum hitSoundEnum)
	{
		long currentMTime = hitSoundEnum.getFile().exists() ? hitSoundEnum.getFile().lastModified() : CLIP_MTIME_BUILTIN;
		if (clip == null || currentMTime != lastClipMTime || !clip.isOpen())
		{
			try
			{
				clip = AudioSystem.getClip();
			}
			catch (LineUnavailableException e)
			{
				lastClipMTime = CLIP_MTIME_UNLOADED;
				log.warn("Unable to play sound", e);
				return false;
			}
			lastClipMTime = currentMTime;
			if (!tryLoadCustomSound(hitSoundEnum))
			{
				return false;
			}
		}
		clip.loop(1);
		return true;
	}

	private boolean tryLoadCustomSound(HitSoundEnum hitSoundEnum)
	{
		if (hitSoundEnum.getFile().exists())
		{
			try (InputStream fileStream = new BufferedInputStream(new FileInputStream(hitSoundEnum.getFile()));
				 AudioInputStream sound = AudioSystem.getAudioInputStream(fileStream))
			{
				clip.open(sound);
				return true;
			}
			catch (UnsupportedAudioFileException | IOException | LineUnavailableException e)
			{
				log.warn("Unable to load sound", e);
			}
		}
		return false;
	}

	@Provides
	HitSoundsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(HitSoundsConfig.class);
	}
}

package com.hitsounds.enums;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum SoundEffectSelectionEnum {
    UI_BOOP(2266),
    GE_INCREMENT(3929),
    GE_DECREMENT(3930),
    GE_ADD_OFFER(3925),
    GE_COLLECT(3928),
    GE_COIN(3924),
    CLOSE_DOOR(60),
    OPEN_DOOR(62),
    ITEM_DROP(2739),
    ITEM_PICKUP(2582),
    PICK_PLANT(2581),
    BURY_BONES(2738),
    TINDER_STRIKE(2597),
    FIRE_WOOSH(2596),
    TREE_FALLING(2734),
    TREE_CHOP(2735),
    MINING_TINK(3220),
    COOK_WOOSH(2577),
    MAGIC_SPLASH(227),
    ANVIL_TINK(3790),
    ANVIL_TONK(3791),
    TELEPORT_WOOSH(1930),
    TELEPORT_VWOOP(200),
    ZERO_DAMAGE(511),
    TAKE_DAMAGE(510),
    ATTACK_HIT(2498),
    THICK_SKIN(2690),
    BURST_OF_STRENGTH(2688),
    CLARITY_OF_THOUGHT(2664),
    SHARP_EYE_RIGOUR(2685),
    MYSTIC_WILL_AUGURY(2670),
    ROCK_SKIN(2684),
    SUPER_STRENGTH(2689),
    IMPROVED_REFLEXES(2662),
    RAPID_RESTORE(2679),
    RAPID_HEAL(2678),
    PROTECT_ITEM(1982),
    HAWK_EYE(2666),
    MYSTIC_LORE(2668),
    STEEL_SKIN(2687),
    ULT_STRENGTH(2691),
    INCR_REFLEXES(2667),
    PRAY_MAGIC(2675),
    PRAY_MISSILES(2677),
    PRAY_MELEE(2676),
    EAGLE_EYE(2665),
    MYSTIC_MIGHT(2669),
    RETRIBUTION(2682),
    REDEMPTION(2680),
    SMITE(2686),
    CHIVALRY(3826),
    PIETY(3825),
    PRAYER_DEACTIVE(2663),
    PRAYER_DEPLETE(2672),
    BELL_DING(3813),
    BELL_DONG(3817),
    CRIER_SHOUT(3816),
    ;
    private final Integer ID;
}
package com.hitsounds.enums;

import com.hitsounds.HitSoundsPlugin;
import lombok.Getter;
import lombok.RequiredArgsConstructor;

import java.io.File;

@Getter
@RequiredArgsConstructor
public enum HitSoundEnum {

    NORMAL("Normal", HitSoundsPlugin.NORMAL_FILE),
    MAX("Max", HitSoundsPlugin.MAX_FILE),
    POISON("Poison", HitSoundsPlugin.POISON_FILE),
    VENOM("Venom", HitSoundsPlugin.VENOM_FILE),
    DISEASE("Disease", HitSoundsPlugin.DISEASE_FILE),
    MISS("Miss", HitSoundsPlugin.MISS_FILE),
    HEALING("Healing", HitSoundsPlugin.HEALING_FILE),
    SHIELD("Shield", HitSoundsPlugin.SHIELD_FILE),
    ARMOUR("Armour", HitSoundsPlugin.ARMOUR_FILE),
    CHARGE("Charge", HitSoundsPlugin.CHARGE_FILE),
    UNCHARGE("Uncharge", HitSoundsPlugin.UNCHARGE_FILE),
    OTHER("Other", HitSoundsPlugin.OTHER_FILE);

    private final String hittype;
    private final File file;
}

