package ejedev.raidshamer;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class RaidShamerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(RaidShamerPlugin.class);
		RuneLite.main(args);
	}
}
package ejedev.raidshamer;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;


//plugin was renamed from raidshamer - keeping legacy config group name to avoid duplicate plugin entries
@ConfigGroup("raidshamer")
public interface RaidShamerConfig extends Config
{

    @ConfigItem(
        keyName = "captureOwnDeaths",
        name = "Own Deaths Captured",
        description = "Allows you to toggle on/off own death shaming",
        position = 1
    )
    default boolean captureOwnDeaths()
    {
        return true;
    }

    @ConfigItem(
        keyName = "captureFriendDeathsOnly",
        name = "Friends' deaths only",
        description = "Allows you to toggle whether death shaming is limited to just your friends list",
        position = 2
    )
    default boolean captureFriendDeathsOnly()
    {
        return false;
    }

    @ConfigItem(
        keyName = "activeInCoX",
        name = "Active in Chambers of Xeric (CoX)",
        description = "Allows for shaming in CoX",
        position = 3
    )
    default boolean activeInCoX()
    {
        return true;
    }

    @ConfigItem(
        keyName = "activeInToB",
        name = "Active in Theater of Blood (ToB)",
        description = "Allows for shaming in ToB",
        position = 4
    )
    default boolean activeInToB()
    {
        return true;
    }

    @ConfigItem(
        keyName = "activeInToA",
        name = "Active in Tombs of Amascut (ToA)",
        description = "Allows for shaming in ToA",
        position = 5
    )
    default boolean activeInToA()
    {
        return true;
    }

    @ConfigItem(
        keyName = "activeOutsideOfRaids",
        name = "Active outside of raids",
        description = "Allows for shaming outside of raids",
        position = 6
    )
    default boolean activeOutsideOfRaids()
    {
        return false;
    }

    @ConfigItem(
        keyName = "webhookEnabled",
        name = "Discord Webhook",
        description = "Allows you to send death photos automatically to a discord webhook. Read the github page for info.",
        position = 7
    )
    default boolean webhookEnabled()
    {
        return false;
    }

    @ConfigItem(
        keyName = "webhookLink",
        name = "Webhook URL",
        description = "Put your webhook link here, the full thing copied from discord.",
        position = 8
    )
    default String webhookLink()
    {
        return "";
    }
}


package ejedev.raidshamer;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.UUID;

public class DiscordWebhook {

    private static final DateFormat TIME_FORMAT = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");

    private void sendFile(OutputStream out, String name, InputStream in, String fileName) throws IOException {
        String o = "Content-Disposition: form-data; name=\"" + URLEncoder.encode(name,"UTF-8")
                + "\"; filename=\"" + URLEncoder.encode(fileName,"UTF-8") + "\"\r\n\r\n";
        out.write(o.getBytes(StandardCharsets.UTF_8));
        byte[] buffer = new byte[2048];
        for (int n = 0; n >= 0; n = in.read(buffer))
            out.write(buffer, 0, n);
        out.write("\r\n".getBytes(StandardCharsets.UTF_8));
    }

    private static String format(Date date)
    {
        synchronized (TIME_FORMAT)
        {
            return TIME_FORMAT.format(date);
        }
    }

    private void sendField(OutputStream out, String name, String field) throws IOException {
        String o = "Content-Disposition: form-data; name=\""
                + URLEncoder.encode(name,"UTF-8") + "\"\r\n\r\n";
        out.write(o.getBytes(StandardCharsets.UTF_8));
        out.write(URLEncoder.encode(field,"UTF-8").getBytes(StandardCharsets.UTF_8));
        out.write("\r\n".getBytes(StandardCharsets.UTF_8));
    }

    public void SendWebhook(ByteArrayOutputStream screenshotOutput, String fileName, String discordUrl) throws IOException {
        fileName += (fileName.isEmpty() ? "" : " ") + format(new Date());
        fileName = fileName.replace('+', ' ');
        URL url = new URL(discordUrl);
        URLConnection con = url.openConnection();
        HttpURLConnection http = (HttpURLConnection)con;
        http.setRequestMethod("POST");
        http.setDoOutput(true);

        String boundary = UUID.randomUUID().toString();
        byte[] boundaryBytes =
                ("--" + boundary + "\r\n").getBytes(StandardCharsets.UTF_8);
        byte[] finishBoundaryBytes =
                ("--" + boundary + "--").getBytes(StandardCharsets.UTF_8);
        http.setRequestProperty("Content-Type",
                "multipart/form-data; charset=UTF-8; boundary=" + boundary);

        http.setChunkedStreamingMode(0);

        try(OutputStream out = http.getOutputStream()) {
            out.write(boundaryBytes);
            sendField(out, "content", fileName);
            out.write(boundaryBytes);
            try(InputStream file = new ByteArrayInputStream(screenshotOutput.toByteArray());) {
                sendFile(out, "file", file, "temp.png");
            }

            out.write(finishBoundaryBytes);
        }

    }
}

package ejedev.raidshamer;
import com.google.inject.Provides;
import lombok.Getter;
import net.runelite.api.*;
import net.runelite.api.events.ActorDeath;
import net.runelite.api.events.VarbitChanged;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.ComponentID;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import javax.imageio.ImageIO;
import javax.inject.Inject;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.ui.DrawManager;
import net.runelite.client.util.ImageCapture;
import net.runelite.client.util.ImageUploadStyle;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashSet;
import java.util.concurrent.ScheduledExecutorService;
import java.util.function.Consumer;

@PluginDescriptor(
        name = "Death Shamer",
        configName = "RaidShamerPlugin", // Plugin was renamed from raidshamer
        description = "Takes a screenshot of deaths during bosses and raids. Supports discord webhook integration.",
        tags = {"death", "raid", "raids", "shame", "tob", "theater", "cox", "chambers", "toa", "tombs", "discord", "webhook"}
)
public class RaidShamerPlugin extends Plugin {

    @Inject
    private Client client;

    @Inject
    private ImageCapture imageCapture;

    @Inject
    private DrawManager drawManager;

    @Inject
    private ScheduledExecutorService executor;

    @Inject
    private RaidShamerConfig config;

    @Getter
    private boolean inTob;

    @Provides
    RaidShamerConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(RaidShamerConfig.class);
    }

    @Subscribe
    public void onActorDeath(ActorDeath actorDeath)
    {
        Actor actor = actorDeath.getActor();
        if (actor instanceof Player)
        {
            Player player = (Player) actor;
            if (shouldTakeScreenshot(player))
            {
                takeScreenshot("Death of " + player.getName(), "Wall of Shame");
            }
            else {
                System.out.println("[DEBUG] Not in shameable zone sorry.");
            }
        }
    }

    private boolean shouldTakeScreenshot(Player player) {
        boolean isPlayerValidTarget = (config.captureOwnDeaths() && player == client.getLocalPlayer()) ||
                (player.isFriend()) ||
                (!config.captureFriendDeathsOnly() && !player.isFriend()) && player != client.getLocalPlayer();

        boolean inRaid = client.getVarbitValue(Varbits.IN_RAID) > 0;
        Widget toaWidget = client.getWidget(ComponentID.TOA_RAID_LAYER);
        boolean inToa = toaWidget != null;

        boolean isValidLocation = (config.activeInToB() && inTob) ||
                (config.activeInCoX() && inRaid) ||
                (config.activeInToA() && inToa) ||
                (config.activeOutsideOfRaids() && !inTob && !inRaid && !inToa);

        return isValidLocation && isPlayerValidTarget;
    }

    @Subscribe
    public void onVarbitChanged(VarbitChanged event)
    {
        inTob = client.getVarbitValue(Varbits.THEATRE_OF_BLOOD) > 1;
    }

    private void takeScreenshot(String fileName, String subDir)
    {
        Consumer<Image> imageCallback = (img) ->
        {
            executor.submit(() -> {
                try {
                    takeScreenshot(fileName, subDir, img);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            });
        };
        drawManager.requestNextFrameListener(imageCallback);
    }

    private void takeScreenshot(String fileName, String subDir, Image image) throws IOException
    {
        BufferedImage screenshot = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_ARGB);
        Graphics graphics = screenshot.getGraphics();
        int gameOffsetX = 0;
        int gameOffsetY = 0;
        graphics.drawImage(image, gameOffsetX, gameOffsetY, null);
        imageCapture.saveScreenshot(screenshot, fileName, subDir, false, false);
        ByteArrayOutputStream screenshotOutput = new ByteArrayOutputStream();
        ImageIO.write(screenshot, "png", screenshotOutput);

        if (config.webhookEnabled() && !config.webhookLink().equals(""))
        {
            DiscordWebhook FileSender = new DiscordWebhook();
            FileSender.SendWebhook(screenshotOutput, fileName, config.webhookLink());
        }
    }
}

