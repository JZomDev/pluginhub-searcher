package com.animatedicons;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AnimatedIconsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AnimatedIconsPlugin.class);
		RuneLite.main(args);
	}
}
package com.animatedicons;

import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

@Slf4j
@PluginDescriptor(
		name = "Animated Icons",
		description = "Display animated gif icons for items that have them",
		tags = {"animation", "animated", "bank", "inventory", "icon"}
)
public class AnimatedIconsPlugin extends Plugin
{
	@Inject
	private AnimatedIconsOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private AnimatedIconsPlugin config;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
	}
}

package com.animatedicons;

import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.util.HashMap;
import java.util.Map;
import javax.inject.Inject;
import javax.swing.ImageIcon;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.ui.overlay.WidgetItemOverlay;

@Slf4j
public class AnimatedIconsOverlay extends WidgetItemOverlay
{
    Map<Integer, Image> images = new HashMap<>();
    @Inject
    private AnimatedIconsOverlay()
    {
        showOnEquipment();
        showOnInventory();
        showOnBank();
    }

    @Override
    public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem itemWidget)
    {
        final Icon icon = Icon.getAnimatedIcon(itemId);
        if (icon != null)
        {
            Rectangle bounds = itemWidget.getCanvasBounds();
            Integer defaultItemID = new Integer(icon.getDefaultID());
            Image animatedIcon;
            if (images.containsKey(defaultItemID))
            {
                animatedIcon = images.get(defaultItemID);
            }
            else
            {
                animatedIcon = new ImageIcon(AnimatedIconsPlugin.class.getClassLoader().getResource(defaultItemID.toString() + ".gif")).getImage();
                images.put(defaultItemID, animatedIcon);
            }
            graphics.drawImage(animatedIcon, (int) bounds.getX(), (int) bounds.getY(), null);
        }
    }
}

package com.animatedicons;

import com.google.common.collect.Sets;
import java.util.Set;
import lombok.Getter;
import lombok.ToString;
import net.runelite.api.ItemID;

@Getter
@ToString
public enum Icon
{
    DRAMEN_BRANCH(ItemID.DRAMEN_BRANCH),
    FIRE_CAPE(ItemID.FIRE_CAPE, ItemID.FIRE_CAPE_L, ItemID.FIRE_CAPE_10566),
    INFERNAL_CAPE(ItemID.INFERNAL_CAPE, ItemID.INFERNAL_CAPE_L, ItemID.INFERNAL_CAPE_21297, ItemID.INFERNAL_CAPE_23622),
    INFERNAL_MAX_CAPE(ItemID.INFERNAL_MAX_CAPE, ItemID.INFERNAL_MAX_CAPE_L, ItemID.INFERNAL_MAX_CAPE_21285),
    MAGIC_LOGS(ItemID.MAGIC_LOGS),
    MAGIC_PYRE_LOGS(ItemID.MAGIC_PYRE_LOGS),
    VOLCANIC_WHIP(ItemID.VOLCANIC_ABYSSAL_WHIP),
    VOLCANIC_WHIP_MIX(ItemID.VOLCANIC_WHIP_MIX);

    private final Set<Integer> itemIDs;
    private final int defaultID;

    Icon(Integer... ids)
    {
        this.defaultID = ids[0];
        this.itemIDs = Sets.newHashSet(ids);
    }

    Icon(int defaultID)
    {
        this.defaultID = defaultID;
        this.itemIDs = Sets.newHashSet(defaultID);
    }

    static Icon getAnimatedIcon(int id)
    {
        for (Icon icon : values())
        {
            if (icon.itemIDs.contains(id))
            {
                return icon;
            }
        }

        return null;
    }
}

