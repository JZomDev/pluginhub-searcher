package com.notloc.targettruetile;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TargetTrueTilePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(TargetTrueTilePlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2017, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.notloc.targettruetile;

import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.Scene;
import net.runelite.api.coords.LocalPoint;

import javax.annotation.Nonnull;
import java.awt.*;

public class PerspectiveUtil {

    public static Polygon getCanvasTileMarkPoly(@Nonnull Client client, @Nonnull LocalPoint localLocation, int size, int length_128) {
        return getCanvasTileMarkPoly(client, localLocation, size, size, length_128, client.getTopLevelWorldView().getPlane(), 0);
    }

    // Adapted from runelite-api Perspective.java
    // Creates a triangle on the ground instead of a square
    public static Polygon getCanvasTileMarkPoly(@Nonnull Client client, @Nonnull LocalPoint localLocation, int sizeX, int sizeY, int length_128, int plane, int zOffset) {
        int msx = localLocation.getSceneX() + 40;
        int msy = localLocation.getSceneY() + 40;
        if (msx >= 0 && msy >= 0 && msx < 184 && msy < 184) {
            Scene scene = client.getTopLevelWorldView().getScene();
            byte[][][] tileSettings = scene.getExtendedTileSettings();
            int tilePlane = plane;
            if (plane < 3 && (tileSettings[1][msx][msy] & 2) == 2) {
                tilePlane = plane + 1;
            }

            int swX = localLocation.getX() - sizeX * 128 / 2;
            int swY = localLocation.getY() - sizeY * 128 / 2;
            int neX = localLocation.getX() + sizeX * 128 / 2;
            int neY = localLocation.getY() + sizeY * 128 / 2;
            int swHeight = getHeight(scene, swX, swY, tilePlane) - zOffset;
            int nwHeight = getHeight(scene, neX, swY, tilePlane) - zOffset;
            int seHeight = getHeight(scene, swX, neY, tilePlane) - zOffset;

            int eX = swX + length_128;
            int nY = swY + length_128;

            int exHeight = lerpInt128(swHeight, seHeight, length_128/sizeX);
            int nYHeight = lerpInt128(swHeight, nwHeight, length_128/sizeY);

            net.runelite.api.Point p1 = Perspective.localToCanvas(client, swX, swY, swHeight);
            net.runelite.api.Point p2 = Perspective.localToCanvas(client, eX, swY, nYHeight);
            Point p3 = Perspective.localToCanvas(client, swX, nY, exHeight);
            if (p1 != null && p2 != null && p3 != null) {
                Polygon poly = new Polygon();
                poly.addPoint(p1.getX(), p1.getY());
                poly.addPoint(p2.getX(), p2.getY());
                poly.addPoint(p3.getX(), p3.getY());
                return poly;
            } else {
                return null;
            }
        } else {
            return null;
        }
    }

    // Copied from runelite-api Perspective.java
    private static int getHeight(@Nonnull Scene scene, int localX, int localY, int plane) {
        int sceneX = (localX >> 7) + 40;
        int sceneY = (localY >> 7) + 40;
        if (sceneX >= 0 && sceneY >= 0 && sceneX < 184 && sceneY < 184) {
            int[][][] tileHeights = scene.getTileHeights();
            int x = localX & 127;
            int y = localY & 127;
            int var8 = x * tileHeights[plane][sceneX + 1][sceneY] + (128 - x) * tileHeights[plane][sceneX][sceneY] >> 7;
            int var9 = tileHeights[plane][sceneX][sceneY + 1] * (128 - x) + x * tileHeights[plane][sceneX + 1][sceneY + 1] >> 7;
            return (128 - y) * var8 + y * var9 >> 7;
        } else {
            return 0;
        }
    }

    private static int lerpInt128(int a, int b, int t_128) {
        float t = t_128 / 128f;
        return a + (int)((b-a)*t);
    }
}

package com.notloc.targettruetile;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("targettruetile")
public interface TargetTrueTileConfig extends Config
{
	String CONFIG_GROUP = "targettruetile";

	@ConfigSection(
			name = "Options",
			description = "Targeting options",
			position = 1
	)
	String options = "options";

	@ConfigSection(
			name = "Tile Style",
			description = "Visual options",
			position = 2
	)
	String style = "style";

	@ConfigSection(
			name = "Southwest Corner",
			description = "Southwest corner marking options",
			position = 3
	)
	String corner = "corner";


	@ConfigItem(
			keyName = "targettimeout",
			name = "Target Forget Time",
			description = "How many seconds to wait before forgetting a target.",
			position = 0,
			section = options
	)
	default int targetTimeout() { return 15; }

	@ConfigItem(
			keyName = "multipletargets",
			name = "Allow Multiple Targets",
			description = "Allow multiple targets to be tracked at once.",
			position = 1,
			section = options
	)
	default boolean allowMultipleTargets() { return false; }

	@ConfigItem(
			keyName = "hoverhighlight",
			name = "Show on Mouse Over",
			description = "Show the true tile when the mouse is over a target.",
			position = 2,
			section = options
	)
	default boolean highlightOnHover() { return false; }

	@ConfigItem(
			keyName = "targethighlight",
			name = "Show for Friendly Targets",
			description = "Show the true tile for friendly NPCs.",
			position = 3,
			section = options
	)
	default boolean highlightFriendlies() { return false; }

	@ConfigItem(
			keyName = "inherittagged",
			name = "Show for Tagged NPCs",
			description = "Show the true tile for tagged NPCs.",
			position = 4,
			section = options
	)
	default boolean inheritTaggedNpcs() { return true; }

	@ConfigItem(
			keyName = "improvedtiles",
			name = "Use Improved Tile Rendering",
			description = "Tiles will draw beneath the NPCs and player. Requires GPU.",
			position = 5,
			section = options
	)
	default boolean improvedTileRendering() { return true; }

	@Alpha
	@ConfigItem(
			keyName = "tilecolor",
			name = "Border Color",
			description = "The color of the target's tile.",
			position = 0,
			section = style
	)
	default Color tileColor() {
		return new Color(255, 192, 0, 96);
	}

	@Alpha
	@ConfigItem(
			keyName = "tilefillcolor",
			name = "Fill Color",
			description = "The inner color of the target's tile.",
			position = 1,
			section = style
	)
	default Color tileFillColor() {
		return new Color(0, 0, 0, 50);
	}

	@ConfigItem(
			keyName = "bordersize",
			name = "Border Size",
			description = "Thickness of the tile's border.",
			position = 2,
			section = style
	)
	default int borderSize() { return 2; }

	@ConfigItem(
			keyName = "borderstyle",
			name = "Border Style",
			description = "Style of the tile's border.",
			position = 3,
			section = style
	)
	default BorderStyle borderStyle() { return BorderStyle.OUTLINE; }

	@ConfigItem(
			keyName = "borderlength",
			name = "Border Length",
			description = "Percentage length of the corner border style. (1 - 100)",
			position = 4,
			section = style
	)
	default int borderLength() { return 25; }

	@ConfigItem(
			keyName = "showcorner",
			name = "Mark Southwest Corner",
			description = "Mark the southwest corner of a target's tile.",
			position = 1,
			section = corner
	)
	default boolean showCorner() {
		return true;
	}

	@ConfigItem(
			keyName = "largeonly",
			name = "Large Targets Only",
			description = "Only mark the southwest corner of targets larger than 1x1.",
			position = 2,
			section = corner
	)
	default boolean showCornerOnlyLarge() {
		return true;
	}

	@Alpha
	@ConfigItem(
			keyName = "cornercolor",
			name = "Corner Color",
			description = "The color of the southwest marking.",
			position = 4,
			section = corner
	)
	default Color tileCornerColor() {
		return new Color(233, 177, 0, 68);
	}

	@ConfigItem(
			keyName = "cornersize",
			name = "Corner Size",
			description = "Size of the southwest mark in units. (1 - 128)",
			position = 5,
			section = corner
	)
	default int tileCornerLength() { return 32; }
}

package com.notloc.targettruetile;

import lombok.Getter;
import net.runelite.api.NPC;

import java.util.*;

public class TargetMemory {

    @Getter
    private final Set<NPC> npcs = new HashSet<>();
    private final Map<NPC, Target> targets = new HashMap<>();

    public void acknowledgeTarget(NPC npc) {
        Target target = targets.get(npc);
        if (target == null) {
            target = add(npc);
        }
        target.setLastTargetedAt(now());
    }

    public void forgetTarget(NPC npc) {
        remove(npc);
    }

    public void forgetOldTargets(int threshold_s) {
        long now = now();
        List<NPC> npcsToForget = new ArrayList<>();

        for (Target target : targets.values()) {
            long delta = now - target.getLastTargetedAt();
            if (delta >= threshold_s || !target.isVisible()) {
                npcsToForget.add(target.getNpc());
            }
        }

        for (NPC npc : npcsToForget) {
            remove(npc);
        }
    }

    public void forgetAll() {
        npcs.clear();
        targets.clear();
    }

    private Target add(NPC npc) {
        Target target = new Target(npc, now());
        targets.put(npc, target);
        npcs.add(npc);
        return target;
    }

    private void remove(NPC npc) {
        targets.remove(npc);
        npcs.remove(npc);
    }

    private static long now() {
        return java.time.Instant.now().getEpochSecond();
    }
}

package com.notloc.targettruetile;

import lombok.Getter;
import lombok.Setter;
import net.runelite.api.NPC;

public class Target {
    @Getter
    private final NPC npc;

    @Getter @Setter
    private long lastTargetedAt;

    public Target(NPC npc, long lastTargetedAt) {
        this.npc = npc;
        this.lastTargetedAt = lastTargetedAt;
    }

    public boolean isVisible() {
        return npc.getComposition() != null && !npc.isDead();
    }
}

package com.notloc.targettruetile;

public enum BorderStyle {
    OUTLINE,
    CORNERS
}

package com.notloc.targettruetile;

import java.awt.*;
import javax.inject.Inject;

import net.runelite.api.*;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

import net.runelite.api.Client;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.*;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Set;
import java.util.List;

class TargetTrueTileOverlay extends Overlay {
    private final Client client;
    private final TargetTrueTilePlugin plugin;
    private final TargetTrueTileConfig config;

    private final List<NPC> renderList = new ArrayList<>();
    private final List<Polygon> renderPolyList = new ArrayList<>();

    @Inject
    private TargetTrueTileOverlay(Client client, TargetTrueTilePlugin plugin, TargetTrueTileConfig config) {
        this.client = client;
        this.plugin = plugin;
        this.config = config;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        setPriority(0.6f);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        Set<NPC> npcs = plugin.getTargetMemory().getNpcs();
        renderPolyList.addAll(renderTrueTiles(graphics, npcs));
        renderList.addAll(npcs);

        if (config.highlightOnHover()) {
            NPC mousedNpc = plugin.findNpcUnderMouse();
            if (mousedNpc != null && !npcs.contains(mousedNpc)) {
                Polygon p = renderTrueTile(graphics, mousedNpc);
                if (p != null) {
                    renderList.add(mousedNpc);
                    renderPolyList.add(p);
                }
            }
        }

        for (NPC npc : plugin.getTaggedNpcs()) {
            if (!npcs.contains(npc)) {
                Polygon p = renderTrueTile(graphics, npc);
                if (p != null) {
                    renderList.add(npc);
                    renderPolyList.add(p);
                }
            }
        }

        if (client.isGpu() && config.improvedTileRendering()) {
            for (NPC npc : renderList) {
                ImprovedTileIndicatorsUtil.removeActorFast(client, graphics, npc, renderPolyList);
            }
            ImprovedTileIndicatorsUtil.removeActorFast(client, graphics, client.getLocalPlayer(), renderPolyList);
        }

        renderList.clear();
        renderPolyList.clear();
        return null;
    }

    private Polygon renderTrueTile(Graphics2D graphics, NPC npc) {
        return renderTrueTileForNpc(graphics, npc, config.tileColor(), config.tileFillColor(), config.tileCornerColor(), config.tileCornerLength(), config.borderSize());
    }

    private List<Polygon> renderTrueTiles(Graphics2D graphics, Collection<NPC> npcs) {
        List<Polygon> polygons = new ArrayList<>();
        for (NPC npc : npcs) {
            Polygon polygon = renderTrueTileForNpc(graphics, npc, config.tileColor(), config.tileFillColor(), config.tileCornerColor(), config.tileCornerLength(), config.borderSize());
            if (polygon != null) {
                polygons.add(polygon);
            }
        }
        return polygons;
    }

    private Polygon renderTrueTileForNpc(Graphics2D graphics, NPC npc, Color borderColor, Color innerColor, Color swColor, int cornerLength, int borderSize) {
        if (npc.getComposition() == null) {
            return null;
        }

        WorldView worldView = client.getTopLevelWorldView();
        if (worldView == null) {
            return null;
        }

        WorldPoint target = npc.getWorldLocation();
        LocalPoint point = LocalPoint.fromWorld(worldView, target);
        if (point == null) {
            return null;
        }

        int size = npc.getComposition().getSize();

        // 128 units per square, offset position to align larger enemies
        LocalPoint renderPoint = new LocalPoint(point.getX() + 128*size/2 - 64, point.getY() + 128*size/2 - 64, worldView);
        Polygon poly;

        if (config.showCorner() && (!config.showCornerOnlyLarge() || size > 1)) {
            // Marks the SW corner mark of the tile
            poly = PerspectiveUtil.getCanvasTileMarkPoly(client, renderPoint, size, cornerLength * size);
            if (poly != null) {
                OverlayUtil.renderPolygon(graphics, poly, swColor, swColor, new BasicStroke(borderSize));
            }
        }

        poly = Perspective.getCanvasTileAreaPoly(client, renderPoint, size);
        if (poly != null) {
            switch (config.borderStyle()) {
                case OUTLINE:
                    OverlayUtil.renderPolygon(graphics, poly, borderColor, innerColor, new BasicStroke(borderSize));
                    break;
                case CORNERS:
                    Color noBorder = new Color(0, 0, 0, 0);
                    OverlayUtil.renderPolygon(graphics, poly, noBorder, innerColor, new BasicStroke(borderSize));
                    renderCornersForTile(graphics, poly, borderColor, borderSize);
                    break;
            }
        }

        return poly;
    }

    private void renderCornersForTile(Graphics2D graphics, Polygon tilePoly, Color color, int borderSize) {
        graphics.setColor(color);
        graphics.setStroke(new BasicStroke(borderSize));

        float length = config.borderLength() / 100.0f;

        for (int i = 0; i < tilePoly.npoints; i++) {
            int x = tilePoly.xpoints[i];
            int y = tilePoly.ypoints[i];

            int prevX = i - 1 < 0 ? tilePoly.xpoints[tilePoly.npoints - 1] : tilePoly.xpoints[i - 1];
            int prevY = i - 1 < 0 ? tilePoly.ypoints[tilePoly.npoints - 1] : tilePoly.ypoints[i - 1];
            int nextX = i + 1 >= tilePoly.npoints ? tilePoly.xpoints[0] : tilePoly.xpoints[i + 1];
            int nextY = i + 1 >= tilePoly.npoints ? tilePoly.ypoints[0] : tilePoly.ypoints[i + 1];

            renderPartialLine(graphics, x, y, prevX, prevY, length);
            renderPartialLine(graphics, x, y, nextX, nextY, length);
        }
    }

    private static void renderPartialLine(Graphics2D graphics, int x1, int y1, int x2, int y2, float length) {
        int deltaX = Math.round((x2 - x1) * length);
        int deltaY = Math.round((y2 - y1) * length);
        graphics.drawLine(x1, y1, x1 + deltaX, y1 + deltaY);
    }
}

package com.notloc.targettruetile;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.npchighlight.NpcIndicatorsConfig;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;
import net.runelite.client.util.WildcardMatcher;

import java.util.*;

@Slf4j
@PluginDescriptor(
	name = "Target True Tile",
	description = "Dynamically highlights the true tile of enemies during combat. Compatible with NPC Indicator's tags."
)
public class TargetTrueTilePlugin extends Plugin
{
	@Provides
	TargetTrueTileConfig provideConfig(ConfigManager configManager) { return configManager.getConfig(TargetTrueTileConfig.class); }

	@Inject private Client client;
	@Inject private TargetTrueTileConfig config;
	@Inject private TargetTrueTileOverlay overlay;

	@Inject private OverlayManager overlayManager;
	@Inject private ConfigManager configManager;
	@Inject private ClientThread clientThread;

	@Getter
	private NPC target;
	@Getter
	private final TargetMemory targetMemory = new TargetMemory();
	@Getter
	private final Set<NPC> taggedNpcs = new HashSet<>();

	// NPCs tagged by name via the NPC Indicators plugin
	private Set<String> taggedNames = new HashSet<>();

	// Specific NPCs tagged during this session.
	private final Set<Integer> taggedIndexes = new HashSet<>();

	@Override
	protected void startUp() {
		overlayManager.add(overlay);
		clientThread.invokeLater(this::rebuildTaggedTargets);
	}

	@Override
	protected void shutDown() {
		overlayManager.remove(overlay);
		targetMemory.forgetAll();
		target = null;
		taggedNpcs.clear();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged) {
		if (gameStateChanged.getGameState() == GameState.LOGIN_SCREEN || gameStateChanged.getGameState() == GameState.HOPPING) {
			target = null;
			targetMemory.forgetAll();
			taggedNpcs.clear();
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event) {
		String group = event.getGroup();
		if (!group.equals(TargetTrueTileConfig.CONFIG_GROUP) && !group.equals(NpcIndicatorsConfig.GROUP)) {
			return;
		}
		clientThread.invokeLater(this::rebuildTaggedTargets);
	}

	@Subscribe
	public void onGameTick(GameTick e) {
		processCurrentTarget();
		targetMemory.forgetOldTargets(config.targetTimeout());
	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned npcSpawned)
	{
		final NPC npc = npcSpawned.getNpc();
		if (isTaggedNpc(npc)) {
			taggedNpcs.add(npc);
		}
	}

	@Subscribe
	public void onNpcDespawned(NpcDespawned npcDespawned)
	{
		final NPC npc = npcDespawned.getNpc();
		taggedNpcs.remove(npc);
		targetMemory.forgetTarget(npc);
	}

	@Subscribe
	public void onInteractingChanged(InteractingChanged interactingChanged) {
		Actor source = interactingChanged.getSource();
		Actor newTarget = interactingChanged.getTarget();

		if (source != client.getLocalPlayer()) {
			return;
		}

		this.target = null;
		if (newTarget instanceof NPC) {
			this.target = (NPC)newTarget;
		}
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event) {
		boolean doTag = "Tag".equals(event.getMenuOption());
		if (doTag || "Un-tag".equals(event.getMenuOption())) {
			int index = event.getId();
			clientThread.invokeLater(() -> {
				WorldView worldView = client.getTopLevelWorldView();
				if (worldView == null) {
					return;
				}

				NPC npc = worldView.npcs().byIndex(index);
				if (npc != null) {
					toggleIndexTag(npc, doTag);
				}
			});
		}
	}

	private void toggleIndexTag(NPC npc, boolean state) {
		if (state) {
			taggedIndexes.add(npc.getIndex());
		} else {
			taggedIndexes.remove(npc.getIndex());
		}
		rebuildTaggedTargets();
	}

	private void rebuildTaggedTargets() {
		taggedNpcs.clear();
		taggedNames.clear();

		NpcIndicatorsConfig npcIndicatorsConfig = configManager.getConfig(NpcIndicatorsConfig.class);
		taggedNames = new HashSet<>(Text.fromCSV(npcIndicatorsConfig.getNpcToHighlight()));

		if (client.getGameState() == GameState.LOGGED_IN || client.getGameState() == GameState.LOADING) {
			WorldView worldView = client.getTopLevelWorldView();
			if (worldView == null) {
				return;
			}

			worldView.npcs().forEach(npc -> {
				if (isTaggedNpc(npc)) {
					taggedNpcs.add(npc);
				}
			});
		}
	}

	private void processCurrentTarget() {
		if (target == null) {
			return;
		}

		if (isValidTarget(target)) {
			if (!config.allowMultipleTargets()) {
				targetMemory.forgetAll();
			}
			targetMemory.acknowledgeTarget(target);
		} else {
			targetMemory.forgetTarget(target);
			target = null;
		}
	}

	public NPC findNpcUnderMouse() {
		MenuEntry[] menuEntries = client.getMenu().getMenuEntries();
		if (menuEntries.length == 0) {
			return null;
		}

		MenuEntry entry = menuEntries[menuEntries.length - 1];
		NPC npc = entry.getNpc();
		return isValidTarget(npc) ? npc : null;
	}

	private boolean isTaggedNpc(NPC npc) {
		if (!config.inheritTaggedNpcs()) {
			return false;
		}

		if (taggedIndexes.contains(npc.getIndex())) {
			return true;
		}

		String name = npc.getName();
		if (name != null) {
			for (String manual : taggedNames) {
				if (WildcardMatcher.matches(manual, name)) {
					return true;
				}
			}
		}
		return false;
	}

	private boolean isValidTarget(NPC npc) {
		if (npc == null) {
			return false;
		}
		return (config.highlightFriendlies() || isNpcAttackable(npc));
	}

	private boolean isNpcAttackable(NPC npc) {
		if (npc == null || npc.getComposition() == null || npc.getComposition().getActions() == null) {
			return false;
		}
		// Actions is a sparse array, the second element represents the attack option.
		String[] actions = npc.getComposition().getActions();
		return actions != null && actions.length > 1 && actions[1] != null;
	}
}

/*
 * Copyright (c) 2021, LeikvollE
 * Copyright (c) 2018, Tomas Slusny <slusnucky@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.notloc.targettruetile;

import java.awt.*;
import java.util.*;
import java.util.List;

import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;

// Adapted from Improved Tile Indicators
// https://github.com/LeikvollE/tileindicators

// Allows us to display tile indicators beneath actors
public class ImprovedTileIndicatorsUtil {

    public static void removeActorFast(final Client client, final Graphics2D graphics, final Actor actor, final List<Polygon> filter) {
        WorldView worldView = client.getTopLevelWorldView();
        if (worldView == null) {
            return;
        }

        final int clipX1 = client.getViewportXOffset();
        final int clipY1 = client.getViewportYOffset();
        final int clipX2 = client.getViewportWidth() + clipX1;
        final int clipY2 = client.getViewportHeight() + clipY1;
        Object origAA = graphics.getRenderingHint(RenderingHints.KEY_ANTIALIASING);
        graphics.setRenderingHint(
                RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_OFF);
        Model model = actor.getModel();
        if (model == null) {
            return;
        }

        int vCount = model.getVerticesCount();
        float[] x3d = model.getVerticesX();
        float[] y3d = model.getVerticesY();
        float[] z3d = model.getVerticesZ();

        int[] x2d = new int[vCount];
        int[] y2d = new int[vCount];

        int size = 1;
        if (actor instanceof NPC)
        {
            NPCComposition composition = ((NPC) actor).getTransformedComposition();
            if (composition != null)
            {
                size = composition.getSize();
            }
        }

        final LocalPoint lp = actor.getLocalLocation();

        final int localX = lp.getX();
        final int localY = lp.getY();
        final int northEastX = lp.getX() + Perspective.LOCAL_TILE_SIZE * (size - 1) / 2;
        final int northEastY = lp.getY() + Perspective.LOCAL_TILE_SIZE * (size - 1) / 2;
        final LocalPoint northEastLp = new LocalPoint(northEastX, northEastY, worldView);
        int localZ = Perspective.getTileHeight(client, northEastLp, worldView.getPlane());
        int rotation = actor.getCurrentOrientation();

        Perspective.modelToCanvas(client, vCount, localX, localY, localZ, rotation, x3d, z3d, y3d, x2d, y2d);

        boolean anyVisible = false;

        for (int i = 0; i < vCount; i++) {
            int x = x2d[i];
            int y = y2d[i];

            boolean visibleX = x >= clipX1 && x < clipX2;
            boolean visibleY = y >= clipY1 && y < clipY2;
            anyVisible |= visibleX && visibleY;
        }

        if (!anyVisible) return;

        int tCount = model.getFaceCount();
        int[] tx = model.getFaceIndices1();
        int[] ty = model.getFaceIndices2();
        int[] tz = model.getFaceIndices3();

        final byte[] triangleTransparencies = model.getFaceTransparencies();

        Composite orig = graphics.getComposite();
        graphics.setComposite(AlphaComposite.Clear);
        graphics.setColor(Color.WHITE);

        // We do our best to batch the triangles into as few polygons as possible to reduce the number of draw calls
        PolygonBuilder polyBuilder = new PolygonBuilder();

        for (int i = 0; i < tCount; i++) {
            // Cull tris facing away from the camera
            if (getTriDirection(x2d[tx[i]], y2d[tx[i]], x2d[ty[i]], y2d[ty[i]], x2d[tz[i]], y2d[tz[i]]) >= 0)
            {
                continue;
            }

            // Cull tris that are not in the filter
            if (!isTriInsideFilter(x2d[tx[i]], y2d[tx[i]], x2d[ty[i]], y2d[ty[i]], x2d[tz[i]], y2d[tz[i]], filter))
            {
                continue;
            }

            if (triangleTransparencies == null || (triangleTransparencies[i] & 255) < 254) {
                polyBuilder.addTriangle(
                        x2d[tx[i]], y2d[tx[i]],
                        x2d[ty[i]], y2d[ty[i]],
                        x2d[tz[i]], y2d[tz[i]]
                );
            }
        }

        for (Polygon polygon : polyBuilder.getPolygons()) {
            graphics.fill(polygon);
        }

        graphics.setComposite(orig);
        graphics.setRenderingHint(
                RenderingHints.KEY_ANTIALIASING,
                origAA);
    }

    private static int getTriDirection(int x1, int y1, int x2, int y2, int x3, int y3) {
        int x4 = x2 - x1;
        int y4 = y2 - y1;
        int x5 = x3 - x1;
        int y5 = y3 - y1;
        return x4 * y5 - y4 * x5;
    }

    private static boolean isTriInsideFilter(int x1, int y1, int x2, int y2, int x3, int y3, List<Polygon> filter) {
        // Inaccurate but fast check if any of the points are inside the filter
        int left = Math.min(Math.min(x1, x2), x3);
        int right = Math.max(Math.max(x1, x2), x3);
        int top = Math.min(Math.min(y1, y2), y3);
        int bottom = Math.max(Math.max(y1, y2), y3);

        for (Polygon p : filter) {
            if (p.contains(x1, y1) || p.contains(x2, y2) || p.contains(x3, y3)) {
                return true;
            }
            if (p.intersects(left, top, right - left, bottom - top)) {
                return true;
            }
        }
        return false;
    }

    // Merges triangles into larger polygons to reduce draw calls
    // Quick and dirty implementation, definitely not optimal, but performance gains are still significant
    private static class PolygonBuilder {
        private final List<PolygonPrototype> polygons = new ArrayList<>();
        private final Map<Edge, PolygonPrototype> polygonsByEdge = new HashMap<>();

        public void addTriangle(int x1, int y1, int x2, int y2, int x3, int y3) {
            Edge e1 = new Edge(x1, y1, x2, y2);
            Edge e2 = new Edge(x2, y2, x3, y3);
            Edge e3 = new Edge(x3, y3, x1, y1);

            if (polygonsByEdge.containsKey(e1)) {
                PolygonPrototype p = polygonsByEdge.get(e1);
                p.insertEdgesAt(e1, e2, e3);
                polygonsByEdge.remove(e1);
                polygonsByEdge.put(e2, p);
                polygonsByEdge.put(e3, p);
            } else if (polygonsByEdge.containsKey(e2)) {
                PolygonPrototype p = polygonsByEdge.get(e2);
                p.insertEdgesAt(e2, e3, e1);
                polygonsByEdge.remove(e2);
                polygonsByEdge.put(e1, p);
                polygonsByEdge.put(e3, p);
            } else if (polygonsByEdge.containsKey(e3)) {
                PolygonPrototype p = polygonsByEdge.get(e3);
                p.insertEdgesAt(e3, e1, e2);
                polygonsByEdge.remove(e3);
                polygonsByEdge.put(e1, p);
                polygonsByEdge.put(e2, p);
            } else {
                PolygonPrototype p = new PolygonPrototype(e1, e2, e3);
                polygonsByEdge.put(e1, p);
                polygonsByEdge.put(e2, p);
                polygonsByEdge.put(e3, p);
                polygons.add(p);
            }
        }

        public List<Polygon> getPolygons() {
            List<Polygon> result = new ArrayList<>();
            for (PolygonPrototype p : polygons) {
                result.add(p.toPolygon());
            }
            return result;
        }
    }

    private static class PolygonPrototype {
        LinkedList<Edge> edges = new LinkedList<>();

        public PolygonPrototype(Edge... edges) {
            this.edges.addAll(Arrays.asList(edges));
        }

        public void insertEdgesAt(Edge edgeToReplace, Edge... newEdges) {
            int index = edges.indexOf(edgeToReplace);
            if (index == -1) {
                return;
            }

            edges.set(index, newEdges[0]);
            for (int i = 1; i < newEdges.length; i++) {
                edges.add(index + i, newEdges[i]);
            }
        }

        public Polygon toPolygon() {
            int[] x = new int[edges.size()];
            int[] y = new int[edges.size()];

            for (int i = 0; i < edges.size(); i++) {
                x[i] = edges.get(i).x1;
                y[i] = edges.get(i).y1;
            }

            return new Polygon(x, y, edges.size());
        }
    }

    private static class Edge {
        public final int x1;
        public final int y1;

        public final int x2;
        public final int y2;

        public Edge(int x1, int y1, int x2, int y2) {
            this.x1 = x1;
            this.y1 = y1;
            this.x2 = x2;
            this.y2 = y2;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof Edge)) {
                return false;
            }
            Edge e = (Edge) obj;
            return (e.x1 == x1 && e.y1 == y1 && e.x2 == x2 && e.y2 == y2) ||
                    (e.x1 == x2 && e.y1 == y2 && e.x2 == x1 && e.y2 == y1);
        }

        @Override
        public int hashCode() {
            return x1 + y1 + x2 + y2;
        }
    }
}

