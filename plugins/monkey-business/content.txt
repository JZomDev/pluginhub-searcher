/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.krazune.monkeybusiness;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class MonkeyBusinessPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(MonkeyBusinessPlugin.class);
		RuneLite.main(args);
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.krazune.monkeybusiness;

import com.google.inject.Provides;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Player;
import net.runelite.api.PlayerComposition;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.kit.KitType;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

@PluginDescriptor(
	name = "Monkey Business",
	description = "This plugin lets you do your monkey business, when wielding a cursed banana.",
	tags = {
		"monkey",
		"business",
		"cursed",
		"banana",
		"poop"
		// Smithing
	}
)
public class MonkeyBusinessPlugin extends Plugin
{
	private final int CURSED_BANANA_ID = 25500;

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private BusinessManager businessManager;

	private Queue<WorldPoint> worldPointsQueue;
	private int worldPointsToBeProcessedNext = 0;

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		List<Player> players = client.getPlayers();

		processWorldPointsQueue();

		for (int i = 0; i < players.size(); ++i)
		{
			Player currentPlayer = players.get(i);

			if (!playerHasCursedBanana(currentPlayer))
			{
				continue;
			}

			worldPointsQueue.add(currentPlayer.getWorldLocation());
		}
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		GameState newState = gameStateChanged.getGameState();

		if (newState != GameState.LOGIN_SCREEN && newState != GameState.HOPPING)
		{
			return;
		}

		businessManager.clearAll();
		worldPointsQueue.clear();
	}

	@Override
	protected void startUp()
	{
		worldPointsQueue = new LinkedList<>();
	}

	@Override
	protected void shutDown()
	{
		worldPointsQueue = null;

		businessManager.clearAll();
	}

	@Provides
	MonkeyBusinessPluginConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(MonkeyBusinessPluginConfig.class);
	}

	private boolean playerHasCursedBanana(Player player)
	{
		if (player == null)
		{
			return false;
		}

		PlayerComposition playerComposition = player.getPlayerComposition();

		if (playerComposition == null)
		{
			return false;
		}

		return playerComposition.getEquipmentId(KitType.WEAPON) == CURSED_BANANA_ID;
	}

	private void processWorldPointsQueue()
	{
		if (worldPointsQueue.isEmpty())
		{
			return;
		}

		for (int i = 0; i < worldPointsToBeProcessedNext; ++i)
		{
			businessManager.doBusiness(worldPointsQueue.remove());
		}

		worldPointsToBeProcessedNext = worldPointsQueue.size();
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.krazune.monkeybusiness;

public enum BusinessType
{
	GIGANTIC_PILE(1465),
	SMALL_PILE(1757),
	MEDIUM_PEBBLES(5690),
	SMALL_PEBBLES(11451),
	FLOOR_MARKS(1124);

	private final int value;

	BusinessType(int value)
	{
		this.value = value;
	}

	public int getValue()
	{
		return value;
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.krazune.monkeybusiness;

import java.time.Duration;
import java.time.Instant;
import net.runelite.api.Client;
import net.runelite.api.Model;
import net.runelite.api.RuneLiteObject;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;

public class Business
{
	private final Duration MODEL_LOAD_TIMEOUT_DURATION = Duration.ofSeconds(1);

	private final WorldPoint location;
	private final BusinessType type;

	private final Client client;
	private final ClientThread clientThread;
	private final EventBus eventBus;

	private boolean isActive;

	private RuneLiteObject object;

	private int lastTickPlaneId;

	public Business(Client client, ClientThread clientThread, EventBus eventBus, WorldPoint location, BusinessType type)
	{
		this.client = client;
		this.clientThread = clientThread;
		this.eventBus = eventBus;
		this.location = location;
		this.type = type;
		this.lastTickPlaneId = client.getPlane();
	}

	public WorldPoint getLocation()
	{
		return location;
	}

	public BusinessType getType()
	{
		return type;
	}

	public boolean isActive()
	{
		return isActive;
	}

	public void setActive(boolean isActive)
	{
		if (this.isActive == isActive)
		{
			return;
		}

		if (isActive)
		{
			activate();

			return;
		}

		deactivate();
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		if (isActive && lastTickPlaneId != client.getPlane())
		{
			spawn();
		}

		lastTickPlaneId = client.getPlane();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		switch (gameStateChanged.getGameState())
		{
			case LOADING:
				despawn();
				break;

			case LOGGED_IN:
				spawn();
				break;
		}
	}

	private void activate()
	{
		isActive = true;

		spawn();
		eventBus.register(this);
	}

	private void deactivate()
	{
		isActive = false;

		despawn();
		eventBus.unregister(this);
	}

	private void spawn()
	{
		despawn();

		LocalPoint localLocation = LocalPoint.fromWorld(client, location);

		if (localLocation == null)
		{
			return;
		}

		RuneLiteObject newObject = client.createRuneLiteObject();
		Model newModel = client.loadModel(type.getValue());

		if (newModel == null)
		{
			repeatingModelLoading(newObject, type.getValue());
		}
		else
		{
			newObject.setModel(newModel);
		}

		newObject.setLocation(localLocation, location.getPlane());

		if (client.isClientThread())
		{
			newObject.setActive(true);
		}
		else
		{
			clientThread.invokeLater(() ->
			{
				newObject.setActive(true);
			});
		}

		this.object = newObject;
	}

	private void despawn()
	{
		if (object == null)
		{
			return;
		}

		if (client.isClientThread())
		{
			object.setActive(false);
		}
		else
		{
			final RuneLiteObject objectToBeDisabled = object;

			clientThread.invokeLater(() ->
			{
				objectToBeDisabled.setActive(false);
			});
		}

		object = null;
	}

	private void repeatingModelLoading(RuneLiteObject object, int modelId)
	{
		final Instant loadTimeoutInstant = Instant.now().plus(MODEL_LOAD_TIMEOUT_DURATION);

		clientThread.invokeLater(() ->
		{
			if (Instant.now().isAfter(loadTimeoutInstant))
			{
				return true;
			}

			Model newModel = client.loadModel(modelId);

			if (newModel == null)
			{
				return false;
			}

			object.setModel(newModel);

			return true;
		});
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.krazune.monkeybusiness;

import java.time.Duration;
import java.time.Instant;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Random;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameTick;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;

public class BusinessManager
{
	private final Client client;

	private final ClientThread clientThread;

	private final EventBus eventBus;

	private final MonkeyBusinessPluginConfig config;

	private final Duration BUSINESS_DURATION = Duration.ofMinutes(1);

	private Map<WorldPoint, Business> businessLocations;
	private Map<Business, Instant> businessSpawnInstants;

	@Inject
	public BusinessManager(Client client, ClientThread clientThread, EventBus eventBus, MonkeyBusinessPluginConfig config)
	{
		this.client = client;
		this.clientThread = clientThread;
		this.eventBus = eventBus;
		this.config = config;

		this.eventBus.register(this);

		businessLocations = new HashMap<>();
		businessSpawnInstants = new HashMap<>();
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		removeOldBusiness();
	}

	public void doBusiness(WorldPoint worldPoint)
	{
		Business existentBusiness = businessLocations.get(worldPoint);

		if (existentBusiness != null)
		{
			addBusinessInstant(existentBusiness);

			return;
		}

		Business newBusiness = createRandomBusiness(worldPoint);

		if (newBusiness == null)
		{
			return;
		}

		newBusiness.setActive(true);

		businessLocations.put(newBusiness.getLocation(), newBusiness);
		addBusinessInstant(newBusiness);
	}

	public void activateAll()
	{
		for (Business business : businessLocations.values())
		{
			business.setActive(true);
		}
	}

	public void deactivateAll()
	{
		for (Business business : businessLocations.values())
		{
			business.setActive(false);
		}
	}

	public void clearAll()
	{
		deactivateAll();

		businessLocations = new HashMap<>();
		businessSpawnInstants = new HashMap<>();
	}

	// This function is not very well thought out, but it will do for now.
	private Business createRandomBusiness(WorldPoint worldPoint)
	{
		BusinessType newBusinessType = getRandomBusinessTypeOrNull(worldPoint);

		if (newBusinessType == null)
		{
			if (!config.continuousBusiness())
			{
				return null;
			}

			newBusinessType = BusinessType.FLOOR_MARKS;
		}

		return new Business(client, clientThread, eventBus, worldPoint, newBusinessType);
	}

	private BusinessType getRandomBusinessTypeOrNull(WorldPoint worldPoint)
	{
		Random random = new Random(getRandomSeed(worldPoint));
		int continueRandom = random.nextInt(3);

		// One turd chance of returning no business:
		// 	0 -> no model
		// 	1 -> random model
		// 	2 -> random model
		if (continueRandom != 0)
		{
			return null;
		}

		int businessTypeRandom = random.nextInt(100);

		// 1% chance of getting chosen.
		if (businessTypeRandom == 0)
		{
			return BusinessType.GIGANTIC_PILE;
		}

		// 15% chance of getting chosen.
		if (businessTypeRandom <= 15)
		{
			return BusinessType.SMALL_PILE;
		}

		// 15% chance of getting chosen.
		if (businessTypeRandom <= 30)
		{
			return BusinessType.MEDIUM_PEBBLES;
		}

		// 30% chance of getting chosen.
		if (businessTypeRandom <= 60)
		{
			return BusinessType.SMALL_PEBBLES;
		}

		// 39% chance of getting chosen.
		return BusinessType.FLOOR_MARKS;
	}

	private int getRandomSeed(WorldPoint worldPoint)
	{
		String worldPointString = "w" + client.getWorld() + "x" + worldPoint.getX() + "y" + worldPoint.getY() + "p" + worldPoint.getPlane();

		return worldPointString.hashCode(); // This might cause predictable patterns.
	}

	private void addBusinessInstant(Business business)
	{
		businessSpawnInstants.put(business, Instant.now());
	}

	private void removeOldBusiness()
	{
		Iterator<Business> i = businessSpawnInstants.keySet().iterator();

		while (i.hasNext())
		{
			Business currentBusiness = i.next();

			if (isOldBusiness(businessSpawnInstants.get(currentBusiness)))
			{
				i.remove(); // This should be moved to the business removal function.

				removeBusiness(currentBusiness);
			}
		}
	}

	private void removeBusiness(Business business)
	{
		WorldPoint businessLocation = business.getLocation();
		Business cachedBusiness = businessLocations.get(businessLocation);

		if (cachedBusiness == null)
		{
			return;
		}

		if (business != cachedBusiness)
		{
			return;
		}

		business.setActive(false);

		businessLocations.remove(businessLocation);
	}

	private boolean isOldBusiness(Instant spawnInstant)
	{
		return Duration.between(spawnInstant, Instant.now()).compareTo(BUSINESS_DURATION) >= 0;
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.krazune.monkeybusiness;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("monkeybusiness")
public interface MonkeyBusinessPluginConfig extends Config
{
	@ConfigItem(
		position = 0,
		keyName = "continuousBusiness",
		name = "Continuous",
		description = "Business frequency."
	)
	default boolean continuousBusiness()
	{
		return true;
	}
}

