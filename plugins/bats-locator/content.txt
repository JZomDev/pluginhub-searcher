/*
 * Copyright (c) 2020, chestnut1693 <chestnut1693@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package chestnut1693.batslocator;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class BatsLocatorPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(BatsLocatorPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2020, chestnut1693 <chestnut1693@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package chestnut1693.batslocator;

import java.awt.Color;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;

@ConfigGroup("chestnut1693.batslocator")
public interface BatsLocatorConfig extends Config
{
	enum DisplayMode
	{
		DOTS,
		NUMBERS
	}

	@ConfigItem(
		keyName = "unvisitedColor",
		name = "Unvisited chest color",
		description = "Configures the color of the unvisited chest dot and number",
		position = 0
	)
	default Color unvisitedColor()
	{
		return Color.magenta;
	}

	@ConfigItem(
		keyName = "batsColor",
		name = "Bats chest color",
		description = "Configures the color of the bats chest dot and number",
		position = 1
	)
	default Color batsColor()
	{
		return Color.white;
	}

	@ConfigItem(
		keyName = "poisonColor",
		name = "Poison chest color",
		description = "Configures the color of the poison chest dot and number",
		position = 2
	)
	default Color poisonColor()
	{
		return Color.green;
	}

	@Range(
		max = 27
	)
	@ConfigItem(
		keyName = "dotSize",
		name = "Dot size",
		description = "Configures the size of the transparent dots, solid dots are one third larger",
		position = 3
	)
	default int dotSize()
	{
		return 9;
	}

	@Range(
		max = 255
	)
	@ConfigItem(
		keyName = "transparency",
		name = "Transparency",
		description = "Configures the transparency of the chest dots and numbers that are not likely to contain poison or bats",
		position = 4
	)
	default int transparency()
	{
		return 75;
	}

	@ConfigItem(
		keyName = "displayMode",
		name = "Display mode",
		description = "Configures displaying chest states as dots or numbers",
		position = 5
	)
	default DisplayMode displayMode()
	{
		return DisplayMode.DOTS;
	}
}

/*
 * Copyright (c) 2020, chestnut1693 <chestnut1693@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package chestnut1693.batslocator;

import lombok.Getter;
import lombok.Setter;
import net.runelite.api.coords.WorldPoint;

public class Chest
{
	public enum State
	{
		UNVISITED,
		GRUBS,
		POISON,
		BATS;
	}

	@Getter
	@Setter
	private State state = State.UNVISITED;

	@Getter
	@Setter
	private long tickPoison = -1;

	@Getter
	@Setter
	private int number = -1;

	@Getter
	@Setter
	private int solutionSetCount = -1;

	@Getter
	private WorldPoint location;

	public Chest(WorldPoint location)
	{
		this.location = location;
	}
}

/*
 * Copyright (c) 2020, chestnut1693 <chestnut1693@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package chestnut1693.batslocator;

import lombok.Getter;

public enum RoomType
{
	LEFT(64, new int[][] {
		{ 0, 15, 16, 54},
		{ 0, 16, 37, 53},
		{ 1,  6, 20, 36},
		{ 2,  4, 18, 29},
		{ 2, 10, 14, 39},
		{ 3,  8, 18, 44},	//Could be instead of (4, 8, 18, 44).
		{ 3, 21, 26, 45},
		{ 4,  8, 18, 44},
		{ 5, 23, 25, 40},
		{ 5, 25, 31, 51},
		{ 6, 12, 43, 58},
		{ 7,  8, 39, 45},
		{ 7,  9, 27, 32},
		{ 7, 13, 40, 42},
		{ 7, 30, 46, 49},
		{ 9, 29, 31, 58},
		{ 9, 34, 53, 62},
		{11, 12, 41, 53},
		{11, 39, 52, 55},
		{12, 21, 26, 45},
		{13, 17, 22, 50},
		{13, 34, 53, 62},	//Could be instead of (9, 34, 53, 62).
		{14, 15, 41, 44},
		{14, 42, 43, 57},
		{19, 24, 31, 33},
		{19, 27, 50, 61},
		{19, 28, 44, 50},
		{20, 38, 40, 57},
		{21, 24, 53, 63},
		{22, 30, 46, 54},
		{22, 32, 36, 59},
		{23, 33, 47, 54},
		{25, 26, 49, 62},
		{28, 38, 40, 60},
		{32, 45, 51, 56},
		{33, 44, 48, 59},
		{35, 39, 41, 61},
		{36, 37, 50, 63},
		{47, 52, 54, 55},
	}),
	RIGHT(74, new int[][] {
		{ 0,  6, 23, 54},
		{ 0,  9, 20, 34},
		{ 1, 14, 16, 43},
		{ 2,  8, 21, 51},
		{ 2, 10, 20, 33},
		{ 3, 13, 18, 36},
		{ 3, 16, 17, 40},
		{ 4,  7, 29, 60},
		{ 4, 12, 22, 35},
		{ 5, 11, 53, 55},
		{ 5, 12, 26    },	//Incomplete.
		{ 6, 23, 41, 72},
		{ 7,  8, 25, 27},
		{ 9, 28, 32    },	//Incomplete.
		{10, 43, 46, 56},
		{11, 39, 57, 69},
		{13, 18, 45, 52},
		{14, 19, 32, 73},
		{15, 21, 39, 48},
		{17, 19, 44, 47},
		{24, 53, 61, 63},
		{26, 53, 69, 71},
		{26, 53, 69    },	//Incomplete.
		{27, 29, 57, 67},
		{27, 36, 70    },	//Incomplete.
		{28, 31, 43, 71},
		{30, 43, 64, 72},
		{30, 54        },	//Incomplete.
		{32, 34, 61, 66},
		{33, 42, 55, 65},
		{33, 46, 68, 73},
		{35, 37, 56, 63},
		{35, 38, 48, 58},
		{39, 51, 59, 65},
		{40, 47, 60, 62},
		{41, 50, 54, 70},
		{42, 45, 52, 58},
		{44, 50, 54, 66},
	}),
	STRAIGHT(66, new int[][] {
		{ 0, 39, 43, 51},
		{ 1, 15, 20, 53},
		{ 2, 10, 42, 44},
		{ 3, 21, 54    },	//Incomplete.
		{ 4, 14, 38, 52},
		{ 5,  6, 35, 41},
		{ 7, 16, 34, 49},
		{ 9, 12, 26, 27},
		{13, 25, 30, 31},
		{17, 24, 34, 58},
		{18, 23, 35, 57},
		{19, 26, 47, 65},
		{21, 33, 36, 61},
		{22, 25, 46, 55},
		{28, 40, 52, 63},
		{29, 41, 42, 64},
		{30, 32, 37, 62},
		{43, 45, 50, 60},
		{51, 53, 56, 59},
	});

	@Getter
	private int chestCount;

	@Getter
	private int[][] solutionSets;

	RoomType(int chestCount, int[][] solutionSets)
	{
		this.chestCount = chestCount;
		this.solutionSets = solutionSets;
	}
}

/*
 * Copyright (c) 2020, chestnut1693 <chestnut1693@gmail.com>
 * Copyright (c) 2018, Kamiel
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package chestnut1693.batslocator;

import static chestnut1693.batslocator.BatsLocator.CLOSED;
import static chestnut1693.batslocator.BatsLocator.OPENED_POISON_OR_BATS;
import static chestnut1693.batslocator.BatsLocator.OPENED_WITHOUT_GRUBS;
import static chestnut1693.batslocator.BatsLocator.OPENED_WITH_GRUBS;
import static chestnut1693.batslocator.BatsLocator.POISON_SPLAT;
import static chestnut1693.batslocator.BatsLocator.TROUGH;
import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.GameState;
import net.runelite.api.GraphicsObject;
import net.runelite.api.Varbits;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.GraphicsObjectCreated;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Bats Locator",
	description = "Helps locate the chest with bats at the thieving room inside Chambers of Xeric",
	tags = {"finder", "thieving"},
	enabledByDefault = true
)
public class BatsLocatorPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private BatsLocatorConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private BatsOverlay overlay;

	@Getter
	private BatsLocator batsLocator;

	@Getter
	private boolean inRaidChambers;

	@Provides
	BatsLocatorConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(BatsLocatorConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
		clientThread.invokeLater(() -> checkRaidPresence(true));
		batsLocator = new BatsLocator(client);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
		inRaidChambers = false;
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (!event.getGroup().equals("raids"))
		{
			return;
		}

		clientThread.invokeLater(() -> checkRaidPresence(true));
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		checkRaidPresence(false);
	}

	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned event)
	{
		GameObject gameObject = event.getGameObject();
		switch (gameObject.getId())
		{
			case TROUGH:
				batsLocator.troughSpawnEvent(gameObject);
				break;
			case CLOSED:
			case OPENED_POISON_OR_BATS:
			case OPENED_WITHOUT_GRUBS:
			case OPENED_WITH_GRUBS:
				batsLocator.chestSpawnEvent(gameObject);
				break;
		}
	}

	@Subscribe
	public void onGraphicsObjectCreated(GraphicsObjectCreated event)
	{
		if (inRaidChambers)
		{
			GraphicsObject graphicsObject = event.getGraphicsObject();
			if (graphicsObject.getId() == POISON_SPLAT)
			{
				batsLocator.poisonSplatEvent(WorldPoint.fromLocal(client, graphicsObject.getLocation()));
			}
		}
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		if (inRaidChambers)
		{
			batsLocator.gameTickEvent();
		}
	}

	private void checkRaidPresence(boolean force)
	{
		if (client.getGameState() != GameState.LOGGED_IN)
		{
			return;
		}

		boolean setting = client.getVar(Varbits.IN_RAID) == 1;

		if (force || inRaidChambers != setting)
		{
			//A new instance is created when leaving the raid chambers instead of entering the raid chambers.
			//Entering the raid chambers will change the IN_RAID varbit but game objects spawn before the varbit change.
			if (!setting)
			{
				batsLocator = new BatsLocator(client);
			}

			inRaidChambers = setting;
		}
	}
}

/*
 * Copyright (c) 2020, chestnut1693 <chestnut1693@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package chestnut1693.batslocator;

import com.google.inject.Inject;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Player;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.ui.overlay.components.ProgressPieComponent;

public class BatsOverlay extends Overlay
{
	private BatsLocatorPlugin plugin;
	private BatsLocatorConfig config;
	private Client client;
	private ProgressPieComponent pie = new ProgressPieComponent();

	@Inject
	public BatsOverlay(BatsLocatorConfig config, BatsLocatorPlugin plugin, Client client)
	{
		this.config = config;
		this.plugin = plugin;
		this.client = client;
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_SCENE);
		pie.setProgress(100);
		pie.setBorderColor(Color.black);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		Player player = client.getLocalPlayer();
		WorldPoint playerLocation = player == null ? null : player.getWorldLocation();

		if (playerLocation == null)
		{
			return null;
		}

		BatsLocator batsLocator = plugin.getBatsLocator();

		if (plugin.isInRaidChambers() && batsLocator.isDrawChestStates())
		{
			for (Chest chest : batsLocator.getChests().values())
			{
				if (chest.getState() == Chest.State.GRUBS)
				{
					continue;
				}

				if (playerLocation.distanceTo(chest.getLocation()) <= 25)
				{
					LocalPoint chestLocal = LocalPoint.fromWorld(client, chest.getLocation());

					if (chestLocal != null)
					{
						Point chestCanvas = Perspective.localToCanvas(client, chestLocal, client.getPlane());

						if (chestCanvas != null)
						{
							Color color;

							switch (chest.getState())
							{
								case UNVISITED:
									color = config.unvisitedColor();
									break;
								case BATS:
									color = config.batsColor();
									break;
								case POISON:
									color = config.poisonColor();
									break;
								default:
									//This will not happen since only grubs chests reach this but they are skipped earlier on.
									color = Color.white;
									break;
							}

							String chestNumber = String.valueOf(chest.getNumber());
							graphics.setFont(FontManager.getRunescapeSmallFont());
							int stringWidth = graphics.getFontMetrics().stringWidth(chestNumber);
							int stringHeight = graphics.getFontMetrics().getHeight();

							if (batsLocator.getSolutionSets().size() == 0 && (chest.getState() == Chest.State.POISON || chest.getState() == Chest.State.BATS))
							{
								chestCanvas = new Point(chestCanvas.getX() - stringWidth / 2, chestCanvas.getY() - stringHeight / 2);
								OverlayUtil.renderTextLocation(graphics, chestCanvas, chestNumber, color);
							}
							else
							{
								if (chest.getSolutionSetCount() != 0 && chest.getSolutionSetCount() == batsLocator.getHighestSolutionSetCount())
								{
									pie.setDiameter((int)Math.round(config.dotSize() + config.dotSize() / 3.0));
									graphics.setFont(FontManager.getRunescapeFont());
									stringWidth = graphics.getFontMetrics().stringWidth(chestNumber);
									stringHeight = graphics.getFontMetrics().getHeight();
								}
								else
								{
									pie.setDiameter(config.dotSize());
									color = new Color(color.getRed(), color.getGreen(), color.getBlue(), config.transparency());
								}

								pie.setFill(color);
								pie.setPosition(new Point(chestCanvas.getX(), chestCanvas.getY()));

								switch (config.displayMode())
								{
									case DOTS:
										pie.render(graphics);
										break;
									case NUMBERS:
										chestCanvas = new Point(chestCanvas.getX() - stringWidth / 2, chestCanvas.getY() + stringHeight / 2);
										OverlayUtil.renderTextLocation(graphics, chestCanvas, chestNumber, color);
										break;
								}
							}
						}
					}
				}
			}
		}

		return null;
	}
}

/*
 * Copyright (c) 2020, chestnut1693 <chestnut1693@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package chestnut1693.batslocator;

import java.util.ArrayList;
import java.util.Comparator;
import static java.util.Comparator.comparing;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import lombok.Getter;
import net.runelite.api.Client;
import static net.runelite.api.Constants.CHUNK_SIZE;
import net.runelite.api.GameObject;
import net.runelite.api.ObjectID;
import net.runelite.api.coords.WorldPoint;

public class BatsLocator
{
	static final int TROUGH = ObjectID.TROUGH_29746;
	static final int CLOSED = ObjectID.CHEST_29742;
	static final int OPENED_POISON_OR_BATS = ObjectID.CHEST_29743;
	static final int OPENED_WITHOUT_GRUBS = ObjectID.CHEST_29744;
	static final int OPENED_WITH_GRUBS = ObjectID.CHEST_29745;
	static final int POISON_SPLAT = 184;

	@Getter
	private RoomType roomType;

	@Getter
	private HashMap<WorldPoint, Chest> chests = new HashMap<>();

	@Getter
	private HashSet<Chest> poisonBatsChests = new HashSet<>();

	@Getter
	private HashSet<Chest> grubsChests = new HashSet<>();

	@Getter
	private ArrayList<ArrayList<Chest>> solutionSets = new ArrayList<>();

	@Getter
	private int highestSolutionSetCount = 0;

	@Getter
	private boolean drawChestStates = false;

	private Client client;
	private int rotation = -1;

	public BatsLocator(Client client)
	{
		this.client = client;
	}

	public void troughSpawnEvent(GameObject trough)
	{
		if (roomType == null && rotation == -1)
		{
			int plane = trough.getPlane();
			int chunkX = trough.getLocalLocation().getSceneX() / CHUNK_SIZE;
			int chunkY = trough.getLocalLocation().getSceneY() / CHUNK_SIZE;
			int chunkData = client.getInstanceTemplateChunks()[plane][chunkX][chunkY];
			int instanceX = (chunkData >> 14 & 0x3FF) * CHUNK_SIZE;
			rotation = chunkData >> 1 & 0x3;
			switch (instanceX)
			{
				case 3264:
				case 3272:
					roomType = RoomType.LEFT;
					break;
				case 3344:
					roomType = RoomType.RIGHT;
					break;
				case 3312:
					roomType = RoomType.STRAIGHT;
					break;
			}
			//This code is repeated from the chest spawn event since the room type may not have been set when the last chest spawns, same goes for the rotation.
			assignChestNumbersAndGenerateSolutionSets();
		}
	}

	public void chestSpawnEvent(GameObject chestObject)
	{
		WorldPoint chestLocation = chestObject.getWorldLocation();
		Chest chest = chests.get(chestLocation);
		if (chest == null)
		{
			chest = new Chest(chestLocation);
			chests.put(chestLocation, chest);
			switch (chestObject.getId())
			{
				case OPENED_POISON_OR_BATS:
					poisonBatsChests.add(chest);
					break;
				case OPENED_WITHOUT_GRUBS:
				case OPENED_WITH_GRUBS:
					grubsChests.add(chest);
					break;
			}
			//This code is repeated at the trough spawn event since the room type may not have been set when the last chest spawns, same goes for the rotation.
			assignChestNumbersAndGenerateSolutionSets();
		}
		else
		{
			switch (chestObject.getId())
			{
				case OPENED_POISON_OR_BATS:
					poisonBatsChests.add(chest);
					openChest(chest, Chest.State.POISON);
					break;
				case OPENED_WITHOUT_GRUBS:
				case OPENED_WITH_GRUBS:
					grubsChests.add(chest);
					openChest(chest, Chest.State.GRUBS);
					break;
			}
		}
	}

	private ArrayList<ArrayList<Chest>> solutionSetsContaining(Chest chest)
	{
		ArrayList<ArrayList<Chest>> solutionSets = new ArrayList<>();
		for (ArrayList<Chest> solutionSet : this.solutionSets)
		{
			if (solutionSet.contains(chest))
			{
				solutionSets.add(solutionSet);
			}
		}
		return solutionSets;
	}

	private boolean solutionSetContains(ArrayList<Chest> solutionSet, Chest.State state)
	{
		for (Chest chest : solutionSet)
		{
			if (chest.getState() == state)
			{
				return true;
			}
		}
		return false;
	}

	private void openChest(Chest openedChest, Chest.State state)
	{
		openedChest.setState(state);

		if (solutionSets.size() == 0)
		{
			if (poisonBatsChests.size() == 4)
			{
				for (Chest chest : chests.values())
				{
					if (!poisonBatsChests.contains(chest))
					{
						chest.setState(Chest.State.GRUBS);
					}
				}
			}
			return;
		}

		if (state == Chest.State.POISON || state == Chest.State.BATS)
		{
			HashSet<Chest> possiblePoisonBatsChests = new HashSet<>();
			for (ArrayList<Chest> solutionSet : solutionSetsContaining(openedChest))
			{
				for (Chest chest : solutionSet)
				{
					if (chest.getState() != Chest.State.GRUBS)
					{
						possiblePoisonBatsChests.add(chest);
					}
				}
			}
			if (possiblePoisonBatsChests.size() == 0)
			{
				solutionSets.clear();
			}
			for (ArrayList<Chest> solutionSet : solutionSets)
			{
				for (Chest chest : solutionSet)
				{
					if (!possiblePoisonBatsChests.contains(chest) && chest.getState() == Chest.State.UNVISITED)
					{
						chest.setState(Chest.State.GRUBS);
					}
				}
			}
		}

		Iterator<ArrayList<Chest>> solutionSets = this.solutionSets.iterator();
		while (solutionSets.hasNext())
		{
			ArrayList<Chest> solutionSet = solutionSets.next();
			for (Chest chest : solutionSet)
			{
				if (chest.getState() == Chest.State.UNVISITED)
				{
					boolean setState = true;
					for (ArrayList<Chest> otherSolutionSet : solutionSetsContaining(chest))
					{
						if (!solutionSetContains(otherSolutionSet, Chest.State.GRUBS))
						{
							setState = false;
							break;
						}
					}
					if (setState)
					{
						chest.setState(Chest.State.GRUBS);
					}
				}
			}
			if (solutionSetContains(solutionSet, Chest.State.GRUBS))
			{
				solutionSets.remove();
			}
		}

		if (this.solutionSets.size() == 1 && solutionSetContains(this.solutionSets.get(0), Chest.State.BATS))
		{
			for (Chest chest : this.solutionSets.get(0))
			{
				if (chest.getState() == Chest.State.UNVISITED)
				{
					chest.setState(Chest.State.POISON);
				}
			}
		}

		if (this.solutionSets.size() == 0)
		{
			if (poisonBatsChests.size() == 4)
			{
				for (Chest chest : chests.values())
				{
					if (!poisonBatsChests.contains(chest))
					{
						chest.setState(Chest.State.GRUBS);
					}
				}
			}
			else
			{
				for (Chest chest : chests.values())
				{
					if (!poisonBatsChests.contains(chest) && !grubsChests.contains(chest))
					{
						chest.setState(Chest.State.UNVISITED);
					}
				}
			}
		}

		findSolutionSetCounts();
	}

	private void findSolutionSetCounts()
	{
		highestSolutionSetCount = 0;
		for (Chest chest : chests.values())
		{
			chest.setSolutionSetCount(0);
			if (chest.getState() != Chest.State.UNVISITED)
			{
				continue;
			}
			for (ArrayList<Chest> solutionSet : solutionSetsContaining(chest))
			{
				if (!solutionSetContains(solutionSet, Chest.State.GRUBS))
				{
					chest.setSolutionSetCount(chest.getSolutionSetCount() + 1);
				}
			}
			if (chest.getSolutionSetCount() > highestSolutionSetCount)
			{
				highestSolutionSetCount = chest.getSolutionSetCount();
			}
		}
	}

	private void assignChestNumbersAndGenerateSolutionSets()
	{
		if (rotation != -1 && roomType != null && chests.size() == roomType.getChestCount())
		{
			Comparator<Chest> comparator;
			switch (rotation)
			{
				case 0:
					comparator = comparing(Chest::getLocation, comparing(WorldPoint::getY).thenComparing(WorldPoint::getX));
					break;
				case 1:
					comparator = comparing(Chest::getLocation, comparing(WorldPoint::getX).reversed().thenComparing(WorldPoint::getY).reversed());
					break;
				case 2:
					comparator = comparing(Chest::getLocation, comparing(WorldPoint::getY).thenComparing(WorldPoint::getX).reversed());
					break;
				case 3:
					comparator = comparing(Chest::getLocation, comparing(WorldPoint::getX).reversed().thenComparing(WorldPoint::getY));
					break;
				default:
					//This should never be reached.
					comparator = comparing(Chest::getNumber);
					break;
			}

			ArrayList<Chest> chests = new ArrayList<>(this.chests.values());
			chests.sort(comparator);

			for (int i = 0; i < chests.size(); i++)
			{
				chests.get(i).setNumber(i);
			}

			for (int[] indices : roomType.getSolutionSets())
			{
				ArrayList<Chest> solutionSet = new ArrayList<>();
				for (int index : indices)
				{
					solutionSet.add(chests.get(index));
				}
				solutionSets.add(solutionSet);
			}

			for (Chest chest : this.chests.values())
			{
				if (solutionSetsContaining(chest).size() == 0)
				{
					chest.setState(Chest.State.GRUBS);
				}
			}
			for (Chest chest : poisonBatsChests)
			{
				openChest(chest, Chest.State.POISON);
			}
			for (Chest chest : grubsChests)
			{
				openChest(chest, Chest.State.GRUBS);
			}

			findSolutionSetCounts();
			drawChestStates = true;
		}
	}

	public void poisonSplatEvent(WorldPoint worldPoint)
	{
		Chest chest = chests.get(worldPoint);
		if (chest != null)
		{
			chest.setTickPoison(client.getTickCount());
		}
	}

	public void gameTickEvent()
	{
		for (Chest chest : poisonBatsChests)
		{
			if (chest.getState() == Chest.State.POISON && chest.getTickPoison() == -1)
			{
				openChest(chest, Chest.State.BATS);
			}
		}
	}
}

