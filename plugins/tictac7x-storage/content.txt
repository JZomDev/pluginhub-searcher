package tictac7x.storage;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class StoragePluginTest {
	public static void main(String[] args) throws Exception {
		ExternalPluginManager.loadBuiltin(TicTac7xStoragePlugin.class);
		RuneLite.main(args);
	}
}
package tictac7x.storage;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.InventoryID;
import net.runelite.api.ItemID;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.ui.overlay.OverlayManager;
import tictac7x.storage.panel.StoragePanel;

import javax.annotation.Nullable;
import javax.inject.Inject;

@Slf4j
@PluginDescriptor(
	name = "Storage",
	description = "Show overlays of inventory and bank",
	tags = { "storage", "bank", "inventory", "item" }
)
public class TicTac7xStoragePlugin extends Plugin {
	private String plugin_version = "v0.5.1";
	private String plugin_message = "" +
		"<colHIGHLIGHT>Storage " + plugin_version + ":<br>" +
		"<colHIGHLIGHT>* Overlays without any items no longer rendering";

	@Inject
	private Client client;

	@Inject
	private ClientToolbar client_toolbar;

	@Inject
	private StorageConfig config;

	@Inject
	private ClientThread client_thread;

	@Inject
	private ConfigManager configs;

	@Inject
	private ItemManager items;

	@Inject
	private OverlayManager overlays;

	@Inject
	private ChatMessageManager chat_messages;

	@Provides
	StorageConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(StorageConfig.class);
	}

	private Storage[] storages;

	private StoragePanel storage_panel;

	@Nullable
	private NavigationButton navigation_button;

	@Override
	protected void startUp() {
		storages = new Storage[]{
			new StorageInventory(StorageConfig.inventory, InventoryID.INVENTORY, WidgetInfo.INVENTORY, client, client_thread, configs, config, items),
			new Storage(StorageConfig.bank, InventoryID.BANK, WidgetInfo.BANK_CONTAINER, client, client_thread, configs, config, items)
		};

		for (final Storage storage : storages) {
			overlays.add(storage);
		}

		// Panel
		storage_panel = new StoragePanel(client_thread, items, config);
		updateNavigationButton();
	}

	@Override
	protected void shutDown() {
		for (final Storage storage : storages) {
			overlays.remove(storage);
		}

		if (config.showPanel()) {
			client_toolbar.removeNavigation(navigation_button);
		}
	}

	@Subscribe
	public void onItemContainerChanged(final ItemContainerChanged event) {
		for (final Storage storage : storages) {
			storage.onItemContainerChanged(event);
		}
	}

	@Subscribe
	public void onConfigChanged(final ConfigChanged event) {
		if (!event.getGroup().equals(StorageConfig.group)) return;

		// Toggle panel.
		if (event.getKey().equals(StorageConfig.panel) || event.getKey().equals(StorageConfig.panel_priority)) {
			updateNavigationButton();
			return;
		}

		// Update list of items in the panel.
		storage_panel.onConfigChanged(event);

		for (final Storage storage : storages) {
			storage.onConfigChanged(event);
		}
	}

	@Subscribe
	public void onGameStateChanged(final GameStateChanged event) {
		// Plugin update message.
		if (event.getGameState() == GameState.LOGGED_IN && !config.getVersion().equals(plugin_version)) {
			configs.setConfiguration(StorageConfig.group, StorageConfig.version, plugin_version);
			chat_messages.queue(QueuedMessage.builder()
				.type(ChatMessageType.CONSOLE)
				.runeLiteFormattedMessage(plugin_message)
				.build()
			);
		}
	}

	private void updateNavigationButton() {
		if (navigation_button != null) {
			client_toolbar.removeNavigation(navigation_button);
		}

		if (config.showPanel()) {
			// Invoke on client thread otherwise icon is not showing on the sidebar.
			client_thread.invokeLater(() -> {
				navigation_button = NavigationButton.builder()
						.tooltip("Storage")
						.icon(items.getImage(ItemID.CHEST))
						.priority(config.getPanelPriority())
						.panel(storage_panel)
						.build();
				client_toolbar.addNavigation(navigation_button);
			});
		}
	}
}

package tictac7x.storage;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigSection;

@ConfigGroup(StorageConfig.group)
public interface StorageConfig extends Config {
	String group = "tictac7x-storage";
	String visible = "visible";
	String hidden = "hidden";
	String show = "show";
	String auto_hide = "auto_hide";
	String version = "version";
	String panel_priority = "panel_priority";

	enum InventoryEmpty { TOP, FIRST, LAST, BOTTOM, HIDDEN }

	@ConfigItem(
		keyName = version,
		name = "Version",
		description = "Plugin version",
		hidden = true
	) default String getVersion() {
		return "0";
	}

	@ConfigSection(
		name = "Inventory",
		description = "Inventory overlay settings",
		position = 1
	) String inventory = "inventory";

		@ConfigItem(
			keyName = inventory,
			name = inventory,
			description = inventory,
			section = inventory,
			hidden = true
		) default String getInventory() { return "{}"; }

		@ConfigItem(
			keyName = inventory + "_" + show,
			name = "Show inventory overlay",
			description = "Show inventory overlay",
			section = inventory,
			position = 1
		) default boolean showInventory() { return true; }

		@ConfigItem(
			keyName = inventory + "_" + auto_hide,
			name = "Auto-hide when inventory is open",
			description = "Hide inventory overlay if inventory tab is open",
			section = inventory,
			position = 2
		) default boolean hideInventory() { return true; }

		@ConfigItem(
			keyName = inventory + "_" + visible,
			name = "Visible items",
			description = "Names of the items to show in the inventory overlay (all if empty)",
			section = inventory,
			position = 3
		) default String getInventoryVisible() { return ""; }

		@ConfigItem(
			keyName = inventory + "_" + hidden,
			name = "Hidden items",
			description = "Names of the items to hide in the inventory overlay",
			section = inventory,
			position = 4
		) default String getInventoryHidden() { return ""; }

		@ConfigItem(
			keyName = inventory + "_empty",
			name = "Empty slots",
			description = "Show the amount of free space in the inventory",
			section = inventory,
			position = 5
		) default InventoryEmpty getInventoryEmpty() { return InventoryEmpty.FIRST; }

	@ConfigSection(
		name = "Bank",
		description = "Bank overlay settings",
		position = 2
	) String bank = "bank";

		@ConfigItem(
			keyName = bank,
			name = bank,
			description = bank,
			section = bank,
			hidden = true
		) default String getBank() { return "{}"; }

		@ConfigItem(
			keyName = bank + "_" + show,
			name = "Show bank overlay",
			description = "Show bank overlay",
			section = bank,
			position = 1
		) default boolean showBank() { return true; }

		@ConfigItem(
			keyName = bank + "_" + auto_hide,
			name = "Auto-hide when bank is open",
			description = "Hide bank overlay if bank is open",
			section = bank,
			position = 2
		) default boolean hideBank() { return true; }

		@ConfigItem(
			keyName = bank + "_" + visible,
			name = "Visible items",
			description = "Names of the items to show in the bank overlay (all if empty)",
			section = bank,
			position = 3
		) default String getBankVisible() { return "Coins"; }

		@ConfigItem(
			keyName = bank + "_" + hidden,
			name = "Hidden items",
			description = "Names of the items to hide in the bank overlay",
			section = bank,
			position = 4
		) default String getBankHidden() { return ""; }

	@ConfigSection(
		name = "Panel",
		description = "Panel settings",
		position = 3
	) String panel = "panel";

		@ConfigItem(
			keyName = panel,
			name = "Show bank panel",
			description = "Show bank panel on the sidebar where you can check your bank items",
			section = panel,
			position = 1
		) default boolean showPanel() { return true; }

		@ConfigItem(
			keyName = panel_priority,
			name = "Bank panel priority",
			description = "Lower the number, higher the priority and storage icon on the sidebar",
			section = panel,
			position = 2
		) default int getPanelPriority() { return 5; }
}

package tictac7x.storage;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemComposition;
import net.runelite.api.ItemContainer;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ComponentOrientation;
import net.runelite.client.ui.overlay.components.ImageComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;

import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class Storage extends OverlayPanel {
    private final String storage_id;
    protected final int item_container_id;
    private final WidgetInfo widget_info;
    private final Client client;
    private final ClientThread client_thread;
    private final ConfigManager configs;
    protected final StorageConfig config;
    private final ItemManager items;

    private final int PLACEHOLDER_TEMPLATE_ID = 14401;
    protected final PanelComponent itemsPanelComponent = new PanelComponent();
    private final List<ImageComponent> images = new ArrayList<>();
    private final JsonParser parser = new JsonParser();

    public Storage(final String storage_id, final InventoryID item_container_id, final WidgetInfo widget_info, final Client client, final ClientThread client_thread, final ConfigManager configs, final StorageConfig config, final ItemManager items) {
        this.storage_id = storage_id;
        this.item_container_id = item_container_id.getId();
        this.widget_info = widget_info;
        this.client = client;
        this.client_thread = client_thread;
        this.configs = configs;
        this.config = config;
        this.items = items;

        // Overlay configuration.
        setPreferredPosition(OverlayPosition.BOTTOM_RIGHT);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
        panelComponent.setGap(new Point(0, 10));
        panelComponent.setOrientation(ComponentOrientation.VERTICAL);
        panelComponent.setBorder(new Rectangle(10, 10, 6, 10));
        itemsPanelComponent.setWrap(true);
        itemsPanelComponent.setBackgroundColor(null);
        itemsPanelComponent.setGap(new Point(6, 4));
        itemsPanelComponent.setOrientation(ComponentOrientation.HORIZONTAL);
        itemsPanelComponent.setBorder(new Rectangle(0,0,0,0));

        // Generate images based on config.
        this.client_thread.invokeLater(() -> this.updateImages(configs.getConfiguration(StorageConfig.group, storage_id)));

    }

    public void onItemContainerChanged(final ItemContainerChanged event) {
        if (event.getContainerId() != this.item_container_id) return;

        final ItemContainer item_container = event.getItemContainer();
        final JsonObject json = new JsonObject();

        for (final Item item : item_container.getItems()) {
            // Empty item.
            if (item.getId() == -1 || item.getQuantity() == 0) continue;

            // Placeholder.
            if (items.getItemComposition(item.getId()).getPlaceholderTemplateId() == PLACEHOLDER_TEMPLATE_ID) continue;

            // Save item.
            final String id = String.valueOf(item.getId());
            if (!json.has(id)) {
                json.addProperty(id, item_container.count(item.getId()));
            }
        }

        configs.setConfiguration(StorageConfig.group, this.storage_id, json.toString());
    }

    public void onConfigChanged(final ConfigChanged event) {
        if (
            !event.getGroup().equals(StorageConfig.group) |
                !event.getKey().equals(this.storage_id) &&
                !event.getKey().equals(this.storage_id + "_" + StorageConfig.visible) &&
                !event.getKey().equals(this.storage_id + "_" + StorageConfig.hidden)
        ) return;

        this.client_thread.invokeLater(() -> this.updateImages(configs.getConfiguration(StorageConfig.group, this.storage_id)));
    }

    private void updateImages(final String items) {
        // List of images to render.
        List<ImageComponent> images = new ArrayList<>();

        final JsonObject json = parser.parse(items).getAsJsonObject();
        for (final Map.Entry<String, JsonElement> entry : json.entrySet()) {
            final int item_id = Integer.parseInt(entry.getKey());
            final int item_quantity = entry.getValue().getAsInt();

            // Item not shown.
            if (!isVisible(item_id) || isHidden(item_id)) continue;

            images.add(new ImageComponent(this.items.getImage(item_id, item_quantity, true)));
        }

        // Replace old images with new ones.
        this.images.clear();
        this.images.addAll(images);
    }

    private String[] getVisibleItems() {
        String[] visible = new String[]{};
        try { visible = configs.getConfiguration(StorageConfig.group, this.storage_id + "_" + StorageConfig.visible).split(",");
        } catch (final Exception ignored) {}

        return visible;
    }

    private String[] getHiddenItems() {
        String[] hidden = new String[]{};
        try { hidden = configs.getConfiguration(StorageConfig.group, this.storage_id + "_" + StorageConfig.hidden).split(",");
        } catch (final Exception ignored) {}

        return hidden;
    }

    private boolean isVisible(final int item_id) {
        final String[] visible = this.getVisibleItems();
        final ItemComposition item = this.items.getItemComposition(item_id);

        // Visible list not used.
        if (visible.length == 0 || visible.length == 1 && visible[0].equals("")) return true;

        // Check if visible.
        for (final String name : visible) {
            if (item.getName().contains(name)) {
                return true;
            }
        }

        // Not visible.
        return false;
    }

    private boolean isHidden(final int item_id) {
        final String[] hidden = this.getHiddenItems();
        final ItemComposition item = this.items.getItemComposition(item_id);

        // Hidden list not used.
        if (hidden.length == 0 || hidden.length == 1 && hidden[0].equals("")) return false;

        // Check if hidden.
        for (final String name : hidden) {
            if (item.getName().contains(name)) {
                return true;
            }
        }

        // Not Hidden.
        return false;
    }

    private boolean show() {
        return Boolean.parseBoolean(configs.getConfiguration(StorageConfig.group, this.storage_id + "_" + StorageConfig.show));
    }

    private boolean autoHide() {
        return Boolean.parseBoolean(configs.getConfiguration(StorageConfig.group, this.storage_id + "_" + StorageConfig.auto_hide));
    }

    private boolean isWidgetVisible() {
        final Widget widget = client.getWidget(this.widget_info);
        return (widget != null && !widget.isHidden());
    }

    @Override
    public Dimension render(final Graphics2D graphics) {
        if (!show()) return null;
        if (autoHide() && isWidgetVisible()) return null;

        panelComponent.getChildren().clear();
        itemsPanelComponent.getChildren().clear();

        renderBefore();

        this.images.forEach(image -> itemsPanelComponent.getChildren().add(image));
        panelComponent.getChildren().add(itemsPanelComponent);

        renderAfter();

        if (itemsPanelComponent.getChildren().size() == 0) return null;
        return super.render(graphics);
    }

    protected void renderBefore() {}
    protected void renderAfter() {}
}

package tictac7x.storage;

import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.components.ImageComponent;
import net.runelite.client.util.ImageUtil;

import javax.annotation.Nullable;
import java.awt.Color;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.image.BufferedImage;

public class StorageInventory extends Storage {
    private int INVENTORY_SIZE = 28;
    private int NULL_ITEM = -1;

    private int panel_width = 0;
    private int empty = 0;
    private final BufferedImage inventory_png;
    private ImageComponent inventory_image;

    @Nullable
    private ImageComponent inventory_free;

    public StorageInventory(final String storage_id, final InventoryID item_container_id, final WidgetInfo widget_info, final Client client, final ClientThread client_thread, final ConfigManager configs, final StorageConfig config, final ItemManager items) {
        super(storage_id, item_container_id, widget_info, client, client_thread, configs, config, items);
        this.inventory_png = ImageUtil.loadImageResource(getClass(), "inventory.png");
        client_thread.invokeLater(() -> updateInventoryItem(INVENTORY_SIZE));
        client_thread.invokeLater(() -> updateInventoryFree(INVENTORY_SIZE));
    }

    @Override
    public void onItemContainerChanged(final ItemContainerChanged event) {
        super.onItemContainerChanged(event);
        this.updateEmpty(event);
    }

    @Override
    protected void renderBefore() {
        switch (config.getInventoryEmpty()) {
            case TOP:
                this.renderFree();
                return;
            case FIRST:
                itemsPanelComponent.getChildren().add(this.inventory_image);
                return;
        }
    }

    @Override
    protected void renderAfter() {
        switch (config.getInventoryEmpty()) {
            case LAST:
                itemsPanelComponent.getChildren().add(this.inventory_image);
                return;
            case BOTTOM:
                this.renderFree();
                return;
        }
    }

    private void renderFree() {
        // Extra checks to re-render the free text.
        if (
            this.inventory_free == null ||
            this.inventory_free.getBounds().width == 0 ||
            itemsPanelComponent.getBounds().width != panel_width
        ) {
            this.updateInventoryFree(this.empty);
            this.panel_width = itemsPanelComponent.getBounds().width;
        }

        if (this.inventory_free != null) panelComponent.getChildren().add(this.inventory_free);
    }

    private void updateEmpty(final ItemContainerChanged event) {
        if (event.getContainerId() != this.item_container_id) return;

        int empty = INVENTORY_SIZE;
        for (final Item item : event.getItemContainer().getItems()) {
            if (item.getId() != NULL_ITEM) empty--;
        }

        this.empty = empty;
        this.updateInventoryItem(empty);
        this.updateInventoryFree(empty);
    }

    private void updateInventoryItem(final int empty) {
        final String free = String.valueOf(empty);

        // Make copy of inventory icon.
        final BufferedImage inventory_image = new BufferedImage(this.inventory_png.getWidth(), this.inventory_png.getHeight(), this.inventory_png.getType());
        final Graphics graphics = inventory_image.getGraphics();
        graphics.drawImage(this.inventory_png, 0, 0, null);

        // Free slots count.
        final FontMetrics fm = graphics.getFontMetrics();
        graphics.setFont(FontManager.getRunescapeSmallFont());

        // Shadow.
        graphics.setColor(Color.BLACK);
        graphics.drawString(free, 1, fm.getAscent());

        // Yellow label.
        graphics.setColor(Color.YELLOW);
        graphics.drawString(free, 0, fm.getAscent() - 1);

        graphics.dispose();
        this.inventory_image = new ImageComponent(inventory_image);
    }

    private void updateInventoryFree(final int empty) {
        try {
            final String free = empty + " free";

            final BufferedImage free_image = new BufferedImage(itemsPanelComponent.getBounds().width - 8, 16, BufferedImage.TYPE_4BYTE_ABGR);
            final Graphics graphics = free_image.getGraphics();
            final FontMetrics font_metrics = graphics.getFontMetrics();
            graphics.setFont(FontManager.getRunescapeFont());

            // Shadow.
            graphics.setColor(Color.BLACK);
            graphics.drawString(free, ((free_image.getWidth() - font_metrics.stringWidth(free)) / 2) + 1, font_metrics.getAscent() + 2);

            // Label.
            graphics.setColor(Color.LIGHT_GRAY);
            graphics.drawString(free, (free_image.getWidth() - font_metrics.stringWidth(free)) / 2, font_metrics.getAscent() + 1);

            graphics.dispose();
            this.inventory_free = new ImageComponent(free_image);
        } catch (final Exception ignored) {}
    }
}

package tictac7x.storage.panel;

public class DataItem {
    public final int id;
    public final int quantity;

    public DataItem(final int id, final int quantity) {
        this.id = id;
        this.quantity = quantity;
    }
}

package tictac7x.storage.panel;

import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.IconTextField;

import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.Dimension;
import java.util.function.Consumer;

public class Search {
    private final IconTextField search;
    private final Consumer<String> onChange;

    public Search(Consumer<String> onChange) {
        this.onChange = onChange;

        search = new IconTextField();
        search.setIcon(IconTextField.Icon.SEARCH);
        search.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH, 30));
        search.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        search.setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
        search.getDocument().addDocumentListener(new SearchListener(search, Search.this.onChange));
    }

    public IconTextField get() {
        return search;
    }
}

class SearchListener implements DocumentListener {
    private final IconTextField field;
    private final Consumer<String> onChange;

    public SearchListener(final IconTextField field, final Consumer<String> onChange) {
        this.field = field;
        this.onChange = onChange;
    }

    @Override
    public void insertUpdate(final DocumentEvent event) {
        onChange.accept(field.getText());
    }

    @Override
    public void removeUpdate(final DocumentEvent event) {
        onChange.accept(field.getText());
    }

    @Override
    public void changedUpdate(final DocumentEvent event) {
        onChange.accept(field.getText());
    }
}
package tictac7x.storage.panel;

import net.runelite.client.callback.ClientThread;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.PluginPanel;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import java.awt.Component;
import java.awt.Dimension;

public class PanelItem {
    private final JLabel item;

    public PanelItem(final int item_id, final int quantity, final ClientThread client_thread, final ItemManager items) {
        item = new JLabel();
        item.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH - 20, 32));

        client_thread.invoke(() -> {
            item.setIcon(new ImageIcon(items.getImage(item_id, quantity, true)));
            item.setText(items.getItemComposition(item_id).getName());

            SwingUtilities.invokeLater(() -> {
                item.revalidate();
                item.repaint();
            });
        });
    }

    public Component get() {
        return item;
    }
}

package tictac7x.storage.panel;

import net.runelite.client.callback.ClientThread;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;

import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import java.awt.Component;
import java.util.List;

public class PanelItems {
    private final ClientThread client_thread;
    private final ItemManager items;
    private JPanel panel;

    public PanelItems(final ClientThread client_thread, final ItemManager items, final List<DataItem> list_items) {
        this.client_thread = client_thread;
        this.items = items;

        panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        panel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

        addItemsToPanel(list_items);
    }

    public Component get() {
        return panel;
    }

    public void update(final List<DataItem> list_items) {
        panel.removeAll();

        SwingUtilities.invokeLater(() -> {
            addItemsToPanel(list_items);
        });

        panel.revalidate();
        panel.repaint();
    }

    private void addItemsToPanel(final List<DataItem> list_items) {
        for (final DataItem item : list_items) {
            final PanelItem panel_item = new PanelItem(item.id, item.quantity, client_thread, items);
            panel.add(panel_item.get());
        }
    }
}

package tictac7x.storage.panel;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import tictac7x.storage.StorageConfig;

import javax.swing.BorderFactory;
import javax.swing.JScrollPane;
import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class StoragePanel extends PluginPanel {
    private final ClientThread client_thread;
    private final ItemManager items;
    private final StorageConfig config;
    private final JsonParser parser = new JsonParser();

    private List<DataItem> list_items;
    private String search = "";

    private Search input_search;
    private JScrollPane panel_scoller;
    private PanelItems panel_items;

    public StoragePanel(final ClientThread client_thread, final ItemManager items, final StorageConfig config) {
        super(false);
        this.client_thread = client_thread;
        this.items = items;
        this.config = config;
        loadItemsFromConfig();

        // Panel theme.
        setLayout(new BorderLayout(10, 10));
        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        setBackground(ColorScheme.DARK_GRAY_COLOR);

        // Panel components.
        input_search = new Search((this::searchItems));
        add(input_search.get(), BorderLayout.NORTH);

        // Panel items.
        panel_items = new PanelItems(client_thread, items, list_items);

        // Panel scroller.
        panel_scoller = new JScrollPane(panel_items.get());
        add(panel_scoller, BorderLayout.CENTER);
    }

    private void loadItemsFromConfig() {
        list_items = new ArrayList<>();

        final JsonObject bank = (JsonObject) parser.parse(config.getBank());

        for (final Map.Entry<String, JsonElement> item : bank.entrySet()) {
            list_items.add(new DataItem(Integer.parseInt(item.getKey()), item.getValue().getAsInt()));
        }
    }

    public void searchItems(final String search) {
        this.search = search;

        // Show all items.
        if (search.length() == 0) {
            panel_items.update(list_items);
            return;
        }

        final String searchLowercase = search.toLowerCase();

        // Client thread is required to get item names from compositions.
        client_thread.invoke(() -> {
            final List<DataItem> list_items_starts_with = new ArrayList<>();
            final List<DataItem> list_items_contains = new ArrayList<>();

            // Filter items.
            for (final DataItem item : list_items) {
                final String name = items.getItemComposition(item.id).getName().toLowerCase();

                // Find items that start with the search first.
                if (name.startsWith(searchLowercase)) {
                    list_items_starts_with.add(item);

                // Find items that match somewhere else too.
                } else if (name.contains(searchLowercase)) {
                    list_items_contains.add(item);
                }
            }

            list_items_starts_with.addAll(list_items_contains);
            panel_items.update(list_items_starts_with);
        });
    }

    public void onConfigChanged(final ConfigChanged event) {
        if (!event.getGroup().equals(StorageConfig.group) || !event.getKey().equals(StorageConfig.bank)) return;

        loadItemsFromConfig();
        searchItems(search);
    }
}
