package net.runelite.client.plugins.bettertimers;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ExamplePluginTest
{
	public static void main(String[] args) throws Exception
	{
//		ExternalPluginManager.loadBuiltin(BetterOverloadPlugin.class);
		RuneLite.main(args);
	}
}
package net.runelite.client.plugins.bettertimers;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.infobox.InfoBox;

import javax.inject.Inject;
import java.awt.Color;
import net.runelite.client.ui.overlay.infobox.InfoBoxPriority;

public class BetterOverloadInfoBox extends InfoBox
{

	private final BetterOverloadPlugin plugin;
	private final BetterOverloadConfig config;

	@Inject
	public BetterOverloadInfoBox(Client client, BetterOverloadPlugin plugin, BetterOverloadConfig config)
	{
		super(null, plugin);
		this.plugin = plugin;
		this.config = config;
		setPriority(InfoBoxPriority.MED);
	}

	@Override
	public String getText()
	{
		String str;
		if (config.overloadMode() == BetterOverloadMode.TICKS)
		{
			str = String.valueOf(plugin.overloadInTicks);
		}
		else if (config.overloadMode() == BetterOverloadMode.DECIMALS)
		{
			str = BetterOverloadPlugin.to_mmss_precise_short(plugin.overloadInTicks);
		}
		else
		{
			str = BetterOverloadPlugin.to_mmss(plugin.overloadInTicks);
		}
		return str;
	}

	@Override
	public Color getTextColor()
	{
		if (plugin.overloadInTicks % 25 == 0 && config.brewTick())
		{
			return new Color(26, 204, 6);
		}
		else if (plugin.overloadInTicks < 25)
		{
			return Color.RED;
		}
		else if (plugin.overloadInTicks % 25 < config.brewWarningTicks()) {
			return Color.YELLOW;
		}
		return Color.WHITE;
	}

	@Override
	public String getTooltip()
	{
		return "Overload";
	}
}

package net.runelite.client.plugins.bettertimers;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("beanLoad")
public interface BetterOverloadConfig extends Config
{

	@ConfigItem(
		keyName = "brewTick",
		name = "Show brew tick",
		description = "Shows the timer in green on overload restore tick"
	)
	default boolean brewTick()
	{
		return true;
	}

	@ConfigItem(
		keyName = "overloadMode",
		name = "Display mode",
		description = "Configures how the overload timer is displayed.",
		position = 2
	)
	default BetterOverloadMode overloadMode()
	{
		return BetterOverloadMode.SECONDS;
	}

	@ConfigItem(
			keyName = "brewWarningTicks",
			name = "Brew Warning Ticks",
			description = "Shows the timer in yellow this many ticks ahead of the overload restore tick. Set to 0 to disable.",
			position = 3
	)
	default int brewWarningTicks()
	{
		return 0;
	}

	@ConfigItem(
		keyName = "enableSalt",
		name = "Enable salt timer",
		description = "Enables the smelly salt timer, with the overload settings",
		position = 4
	)
	default boolean enableSalt()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableMenaphiteRemedy",
			name = "Enable menaphite remedy timer",
			description = "Enables the menaphite remedy timer, with the overload settings",
			position = 5
	)
	default boolean enableMenaphiteRemedy()
	{
		return true;
	}
}
package net.runelite.client.plugins.bettertimers;

public enum BetterOverloadMode
{
	TICKS,
	SECONDS,
	DECIMALS
}

package net.runelite.client.plugins.bettertimers;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.infobox.InfoBox;

import javax.inject.Inject;
import java.awt.Color;
import net.runelite.client.ui.overlay.infobox.InfoBoxPriority;

public class BetterOverloadMenaphiteRemedyInfoBox extends InfoBox
{
    private final BetterOverloadPlugin plugin;
    private final BetterOverloadConfig config;

    @Inject
    public BetterOverloadMenaphiteRemedyInfoBox(Client client, BetterOverloadPlugin plugin, BetterOverloadConfig config)
    {
        super(null, plugin);
        this.plugin = plugin;
        this.config = config;
        setPriority(InfoBoxPriority.MED);
    }

    @Override
    public String getText()
    {
        String str;
        if (config.overloadMode() == BetterOverloadMode.TICKS)
        {
            str = String.valueOf(plugin.menaphiteRemedyInTicks);
        }
        else if (config.overloadMode() == BetterOverloadMode.DECIMALS)
        {
            str = BetterOverloadPlugin.to_mmss_precise_short(plugin.menaphiteRemedyInTicks);
        }
        else
        {
            str = BetterOverloadPlugin.to_mmss(plugin.menaphiteRemedyInTicks);
        }
        return str;
    }

    @Override
    public Color getTextColor()
    {
        if (plugin.menaphiteRemedyInTicks % 25 == 0 && config.brewTick())
        {
            return new Color(26, 204, 6);
        }
        else if (plugin.menaphiteRemedyInTicks < 25)
        {
            return Color.RED;
        }
        else if (plugin.menaphiteRemedyInTicks % 25 < config.brewWarningTicks()) {
            return Color.YELLOW;
        }
        return Color.WHITE;
    }

    @Override
    public String getTooltip()
    {
        return "Menaphite Remedy";
    }
}

package net.runelite.client.plugins.bettertimers;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.infobox.InfoBox;

import javax.inject.Inject;
import java.awt.Color;
import net.runelite.client.ui.overlay.infobox.InfoBoxPriority;

public class BetterOverloadSaltInfoBox extends InfoBox
{
	private final BetterOverloadPlugin plugin;
	private final BetterOverloadConfig config;

	@Inject
	public BetterOverloadSaltInfoBox(Client client, BetterOverloadPlugin plugin, BetterOverloadConfig config)
	{
		super(null, plugin);
		this.plugin = plugin;
		this.config = config;
		setPriority(InfoBoxPriority.MED);
	}

	@Override
	public String getText()
	{
		String str;
		if (config.overloadMode() == BetterOverloadMode.TICKS)
		{
			str = String.valueOf(plugin.saltInTicks);
		}
		else if (config.overloadMode() == BetterOverloadMode.DECIMALS)
		{
			str = BetterOverloadPlugin.to_mmss_precise_short(plugin.saltInTicks);
		}
		else
		{
			str = BetterOverloadPlugin.to_mmss(plugin.saltInTicks);
		}
		return str;
	}

	@Override
	public Color getTextColor()
	{
		if (plugin.saltInTicks % 25 == 0 && config.brewTick())
		{
			return new Color(26, 204, 6);
		}
		else if (plugin.saltInTicks < 25)
		{
			return Color.RED;
		}
		else if (plugin.saltInTicks % 25 < config.brewWarningTicks()) {
			return Color.YELLOW;
		}
		return Color.WHITE;
	}

	@Override
	public String getTooltip()
	{
		return "Smelling salt";
	}
}

package net.runelite.client.plugins.bettertimers;

import com.google.inject.Provides;

import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;

@SuppressWarnings("checkstyle:RegexpSinglelineJava")
@Slf4j
@PluginDescriptor(
	name = "Better Overload",
	description = "Improved overload timer, to account for world lag.",
	tags = {"better", "overload", "ovl", "betterovl", "better overload"}
)
public class BetterOverloadPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private BetterOverloadConfig config;

	@Inject
	private InfoBoxManager infoBoxManager;

	@Inject
	private ItemManager itemManager;

	boolean overloaded;
	private BetterOverloadInfoBox infoBox;
	int overloadInTicks = -1;
	int prevOvlCycles = 0;

	boolean salted;
	private BetterOverloadSaltInfoBox saltInfoBox;
	int saltInTicks = -1;
	int prevSaltCycles = 0;

	boolean menaphiteRemedied;
	private BetterOverloadMenaphiteRemedyInfoBox menaphiteRemedyInfoBox;
	int menaphiteRemedyInTicks = -1;
	int prevMenaphiteRemedyCycles = 0;
	
	private final int varbOvl = 5418;
	private final int varbSalt = 14344;
	private final int varbMenaphiteRemedy = 14448;

	@Override
	protected void startUp() throws Exception
	{
	}

	@Override
	protected void shutDown() throws Exception
	{
		overloaded = false;
		overloadInTicks = -1;
		prevOvlCycles = 0;
		if (infoBox != null)
		{
			infoBoxManager.removeInfoBox(infoBox);
			infoBox = null;
		}

		salted = false;
		saltInTicks = -1;
		prevSaltCycles = 0;
		if (saltInfoBox != null)
		{
			infoBoxManager.removeInfoBox(saltInfoBox);
			saltInfoBox = null;
		}

		menaphiteRemedied = false;
		menaphiteRemedyInTicks = -1;
		prevMenaphiteRemedyCycles = 0;
		if (menaphiteRemedyInfoBox != null)
		{
			infoBoxManager.removeInfoBox(menaphiteRemedyInfoBox);
			menaphiteRemedyInfoBox = null;
		}
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		if (!overloaded && !salted && !menaphiteRemedied)
		{
			return;
		}
		if (client.getVarbitValue(varbOvl) > 0)
		{
			ovlAdd();
		}
		if (client.getVarbitValue(varbOvl) == 0)
		{
			ovlReset();
		}
		if (client.getVarbitValue(varbSalt) > 0)
		{
			saltAdd();
		}
		if (client.getVarbitValue(varbSalt) == 0)
		{
			saltReset();
		}
		if (client.getVarbitValue(varbMenaphiteRemedy) > 0)
		{
			menaphiteRemedyAdd();
		}
		if (client.getVarbitValue(varbMenaphiteRemedy) == 0)
		{
			menaphiteRemedyReset();
		}
		overloadInTicks--;
		saltInTicks--;
		menaphiteRemedyInTicks--;
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		if (client.getVarbitValue(varbOvl) > 0 && prevOvlCycles == 0)
		{
			prevOvlCycles = client.getVarbitValue(varbOvl);
			overloadInTicks = client.getVarbitValue(varbOvl) * 25;
			ovlAdd();
		}
		if (client.getVarbitValue(varbOvl) < prevOvlCycles || client.getVarbitValue(varbOvl) > prevOvlCycles)
		{
			overloadInTicks = client.getVarbitValue(varbOvl) * 25;
			prevOvlCycles = client.getVarbitValue(varbOvl);
			ovlAdd(); //Makes infobox persist after log out
		}

		if (client.getVarbitValue(varbSalt) > 0 && prevSaltCycles == 0)
		{
			prevSaltCycles = client.getVarbitValue(varbSalt);
			saltInTicks = client.getVarbitValue(varbSalt) * 25;
			saltAdd();
		}

		if (client.getVarbitValue(varbSalt) < prevSaltCycles || client.getVarbitValue(varbSalt) > prevSaltCycles)
		{
			saltInTicks = client.getVarbitValue(varbSalt) * 25;
			prevSaltCycles = client.getVarbitValue(varbSalt);
			saltAdd(); //Makes infobox persist after log out
		}

		if (client.getVarbitValue(varbMenaphiteRemedy) > 0 && prevMenaphiteRemedyCycles == 0)
		{
			prevMenaphiteRemedyCycles = client.getVarbitValue(varbMenaphiteRemedy);
			menaphiteRemedyInTicks = client.getVarbitValue(varbMenaphiteRemedy) * 25;
			menaphiteRemedyAdd();
		}

		if (client.getVarbitValue(varbMenaphiteRemedy) < prevMenaphiteRemedyCycles || client.getVarbitValue(varbMenaphiteRemedy) > prevMenaphiteRemedyCycles)
		{
			menaphiteRemedyInTicks = client.getVarbitValue(varbMenaphiteRemedy) * 25;
			prevMenaphiteRemedyCycles = client.getVarbitValue(varbMenaphiteRemedy);
			menaphiteRemedyAdd(); //Makes infobox persist after log out
		}
	}

	@Provides
	BetterOverloadConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(BetterOverloadConfig.class);
	}

	public void ovlAdd()
	{
		overloaded = true;
		if (infoBox == null)
		{
			infoBox = new BetterOverloadInfoBox(client, this, config);
			int ovlId = ItemID.OVERLOAD_4_20996;
			infoBox.setImage(itemManager.getImage(ovlId));
			infoBoxManager.addInfoBox(infoBox);
		}
	}

	public void ovlReset()
	{
		prevOvlCycles = 0;
		overloaded = false;
		infoBoxManager.removeInfoBox(infoBox);
		infoBox = null;
	}

	public void saltAdd()
	{
		salted = true;
		if(!config.enableSalt()){
			return;
		}
		if (saltInfoBox == null)
		{
			saltInfoBox = new BetterOverloadSaltInfoBox(client, this, config);
			int saltId = 27343;
			saltInfoBox.setImage(itemManager.getImage(saltId));
			infoBoxManager.addInfoBox(saltInfoBox);
		}
	}

	public void saltReset()
	{
		prevSaltCycles = 0;
		salted = false;
		infoBoxManager.removeInfoBox(saltInfoBox);
		saltInfoBox = null;
	}

	public void menaphiteRemedyAdd()
	{
		menaphiteRemedied = true;
		if(!config.enableMenaphiteRemedy()){
			return;
		}
		if (menaphiteRemedyInfoBox == null)
		{
			menaphiteRemedyInfoBox = new BetterOverloadMenaphiteRemedyInfoBox(client, this, config);
			int menaphiteRemedyId = 27202;
			menaphiteRemedyInfoBox.setImage(itemManager.getImage(menaphiteRemedyId));
			infoBoxManager.addInfoBox(menaphiteRemedyInfoBox);
		}
	}

	public void menaphiteRemedyReset()
	{
		prevMenaphiteRemedyCycles = 0;
		menaphiteRemedied = false;
		infoBoxManager.removeInfoBox(menaphiteRemedyInfoBox);
		menaphiteRemedyInfoBox = null;
	}

	public static String to_mmss(int ticks)
	{
		int m = ticks / 100;
		int s = (ticks - m * 100) * 6 / 10;
		return m + (s < 10 ? ":0" : ":") + s;
	}

	public static String to_mmss_precise_short(int ticks)
	{
		int min = ticks / 100;
		int tmp = (ticks - min * 100) * 6;
		int sec = tmp / 10;
		int sec_tenth = tmp - sec * 10;
		return min + (sec < 10 ? ":0" : ":") + sec + "." +
			sec_tenth;
	}
}
