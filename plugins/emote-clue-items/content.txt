package com.larsvansoest.runelite.clueitems.map;

import com.larsvansoest.runelite.clueitems.EmoteClueItemsImages;
import com.larsvansoest.runelite.clueitems.data.StashUnit;

import java.awt.image.BufferedImage;

public class StashUnitWorldMapMarker extends WorldMapMarker
{
	private static BufferedImage getIcon(final StashUnit stash, boolean built) {
		return EmoteClueItemsImages.Icons.RuneScape.StashUnit.get(stash.getType(), built, true);
	}

	private static String getName(final StashUnit stash) {
		return String.format("STASH (%s)", stash.getName());
	}

	public StashUnitWorldMapMarker(final StashUnit stash, final boolean built)
	{
		super(stash.getStashUnit().getWorldPoints()[0], getIcon(stash, built), getName(stash));
	}

	public void setStashUnit(final StashUnit stash, final boolean built) {
		super.setWorldPoint(stash.getStashUnit().getWorldPoints()[0]);
		super.setIcon(getIcon(stash, built));
		super.setName(getName(stash));
	}
}

package com.larsvansoest.runelite.clueitems.map;

import com.larsvansoest.runelite.clueitems.EmoteClueItemsImages;
import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.worldmap.WorldMapPoint;

import java.awt.image.BufferedImage;

public class WorldMapMarker extends WorldMapPoint
{
	private final BufferedImage marker = EmoteClueItemsImages.Utils.createBufferFromImage(EmoteClueItemsImages.RuneLite.CLUE_ARROW);
	private final Point markerPoint = new Point(marker.getWidth() / 2, marker.getHeight());
	private final WorldMapOrb orb;

	public WorldMapMarker(final WorldPoint worldPoint, final BufferedImage icon, final String name)
	{
		super(worldPoint, icon);
		super.setSnapToEdge(true);
		super.setJumpOnClick(true);
		super.setName(name);

		this.orb = new WorldMapOrb(worldPoint, icon);
		this.setIcon(icon);

	}

	public void rotateOrb(final Client client)
	{
		this.orb.updateOrientation(client);
		if (super.isCurrentlyEdgeSnapped())
		{
			super.setImage(this.orb.getImage());
		}
	}

	public void setIcon(final BufferedImage icon)
	{
		this.orb.setIcon(icon);
		EmoteClueItemsImages.Utils.drawIconWithBackground(this.marker, EmoteClueItemsImages.RuneLite.CLUE_ARROW, icon, 2, 2.5);
	}

	@Override
	public void onEdgeSnap()
	{
		this.orb.resetOrientation();
		super.setImagePoint(null);
	}

	@Override
	public void onEdgeUnsnap()
	{
		super.setImage(this.marker);
		super.setImagePoint(this.markerPoint);
	}

	public void setWorldPoint(WorldPoint worldPoint) {
		super.setWorldPoint(worldPoint);
		this.orb.setWorldPoint(worldPoint);
	}

}
package com.larsvansoest.runelite.clueitems.map;

import java.awt.Rectangle;
import java.awt.image.BufferedImage;

import com.larsvansoest.runelite.clueitems.EmoteClueItemsImages;

import lombok.Getter;
import lombok.Setter;
import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.widgets.*;
import net.runelite.api.worldmap.WorldMap;

public class WorldMapOrb
{
	@Setter
	private WorldPoint worldPoint;

	private final BufferedImage orb = EmoteClueItemsImages.Utils.createBufferFromImage(EmoteClueItemsImages.MapOrb.ORB);
	private final BufferedImage orb0 = EmoteClueItemsImages.Utils.createBufferFromImage(EmoteClueItemsImages.MapOrb.ORB_0);
	private final BufferedImage orb90 = EmoteClueItemsImages.Utils.createBufferFromImage(EmoteClueItemsImages.MapOrb.ORB_90);
	private final BufferedImage orb180 = EmoteClueItemsImages.Utils.createBufferFromImage(EmoteClueItemsImages.MapOrb.ORB_180);
	private final BufferedImage orb270 = EmoteClueItemsImages.Utils.createBufferFromImage(EmoteClueItemsImages.MapOrb.ORB_270);
	private final BufferedImage orb45 = EmoteClueItemsImages.Utils.createBufferFromImage(EmoteClueItemsImages.MapOrb.ORB_45);
	private final BufferedImage orb135 = EmoteClueItemsImages.Utils.createBufferFromImage(EmoteClueItemsImages.MapOrb.ORB_135);
	private final BufferedImage orb225 = EmoteClueItemsImages.Utils.createBufferFromImage(EmoteClueItemsImages.MapOrb.ORB_225);
	private final BufferedImage orb315 = EmoteClueItemsImages.Utils.createBufferFromImage(EmoteClueItemsImages.MapOrb.ORB_315);

	public void setIcon(BufferedImage icon) {
		EmoteClueItemsImages.Utils.drawIconWithBackground(orb, EmoteClueItemsImages.MapOrb.ORB, icon, 2, 2);

		//horizontal edges
		EmoteClueItemsImages.Utils.drawIconWithBackground(orb0, EmoteClueItemsImages.MapOrb.ORB_0, icon, 2, 1.35);
		EmoteClueItemsImages.Utils.drawIconWithBackground(orb180, EmoteClueItemsImages.MapOrb.ORB_180, icon, 2, 3);

		//vertical edges
		EmoteClueItemsImages.Utils.drawIconWithBackground(orb90, EmoteClueItemsImages.MapOrb.ORB_90, icon, 5, 2);
		EmoteClueItemsImages.Utils.drawIconWithBackground(orb270, EmoteClueItemsImages.MapOrb.ORB_270, icon, 1.25, 2);

		//corners
		EmoteClueItemsImages.Utils.drawIconWithBackground(orb225, EmoteClueItemsImages.MapOrb.ORB_225, icon, 2, 2);
		EmoteClueItemsImages.Utils.drawIconWithBackground(orb45, EmoteClueItemsImages.MapOrb.ORB_45, icon, 2, 2);
		EmoteClueItemsImages.Utils.drawIconWithBackground(orb315, EmoteClueItemsImages.MapOrb.ORB_315, icon, 2, 2);
		EmoteClueItemsImages.Utils.drawIconWithBackground(orb135, EmoteClueItemsImages.MapOrb.ORB_135, icon, 2, 2);
	}

	@Getter
	private BufferedImage image = new BufferedImage(40, 40, BufferedImage.TYPE_INT_ARGB);

	public WorldMapOrb(final WorldPoint worldPoint, final BufferedImage icon)
	{
		this.worldPoint = worldPoint;
		this.resetOrientation();
		this.setIcon(icon);
	}

	private static Point mapWorldPointToGraphicsPoint(final Client client, final WorldPoint worldPoint)
	{
		final WorldMap ro = client.getWorldMap();

		if (!ro.getWorldMapData().surfaceContainsPosition(worldPoint.getX(), worldPoint.getY()))
		{
			return null;
		}

		final float pixelsPerTile = ro.getWorldMapZoom();

		final Widget map = client.getWidget(InterfaceID.Worldmap.MAP_CONTAINER);
		if (map != null)
		{
			final Rectangle worldMapRect = map.getBounds();

			final int widthInTiles = (int) Math.ceil(worldMapRect.getWidth() / pixelsPerTile);
			final int heightInTiles = (int) Math.ceil(worldMapRect.getHeight() / pixelsPerTile);

			final Point worldMapPosition = ro.getWorldMapPosition();

			//Offset in tiles from anchor sides
			final int yTileMax = worldMapPosition.getY() - heightInTiles / 2;
			final int yTileOffset = (yTileMax - worldPoint.getY() - 1) * -1;
			final int xTileOffset = worldPoint.getX() + widthInTiles / 2 - worldMapPosition.getX();

			int xGraphDiff = ((int) (xTileOffset * pixelsPerTile));
			int yGraphDiff = (int) (yTileOffset * pixelsPerTile);

			//Center on tile.
			yGraphDiff -= pixelsPerTile - Math.ceil(pixelsPerTile / 2);
			xGraphDiff += pixelsPerTile - Math.ceil(pixelsPerTile / 2);

			yGraphDiff = worldMapRect.height - yGraphDiff;
			yGraphDiff += (int) worldMapRect.getY();
			xGraphDiff += (int) worldMapRect.getX();

			return new Point(xGraphDiff, yGraphDiff);
		}
		return null;
	}

	private static Rectangle getWorldMapClipArea(final Client client)
	{
		final Widget widget = client.getWidget(InterfaceID.Worldmap.MAP_CONTAINER);
		return widget == null ? null : widget.getBounds();
	}

	public void resetOrientation()
	{
		this.setImage(-1);
	}

	public void updateOrientation(final Client client)
	{
		final Rectangle mapViewArea = getWorldMapClipArea(client);
		final Point drawPoint = mapWorldPointToGraphicsPoint(client, this.worldPoint);
		if (mapViewArea != null && drawPoint != null && !mapViewArea.contains(drawPoint.getX(), drawPoint.getY()))
		{
			final int rotation = this.getRotation(drawPoint.getX(),
					drawPoint.getY(),
					(int) mapViewArea.getMinX(),
					(int) mapViewArea.getMaxX(),
					(int) mapViewArea.getMinY(),
					(int) mapViewArea.getMaxY()
			);
			this.setImage(rotation);
		}
	}

	private BufferedImage getBuffer(final int rotation) {
		switch (rotation)
		{
			case 0:
				return orb0;
			case 45:
				return orb45;
			case 90:
				return orb90;
			case 135:
				return orb135;
			case 180:
				return orb180;
			case 225:
				return orb225;
			case 270:
				return orb270;
			case 315:
				return orb315;
			default:
				return orb;
		}
	}

	private void setImage(final int rotation)
	{
		this.image = getBuffer(rotation);
	}

	private int getRotation(final int x, final int y, final int minX, final int maxX, final int minY, final int maxY)
	{
		if (x <= minX)
		{
			return this.getLeftRotation(y, minY, maxY);
		}
		if (x <= maxX)
		{
			return this.getCenterRotation(y, minY, maxY);
		}
		return this.getRightRotation(y, minY, maxY);
	}

	private int getLeftRotation(final double y, final double minY, final double maxY)
	{
		if (y <= minY)
		{
			return 315;
		}
		if (y <= maxY)
		{
			return 270;
		}
		return 225;
	}

	private int getCenterRotation(final double y, final double minY, final double maxY)
	{
		if (y <= minY)
		{
			return 0;
		}
		return 180;
	}

	private int getRightRotation(final int y, final int minY, final int maxY)
	{
		if (y <= minY)
		{
			return 45;
		}
		if (y <= maxY)
		{
			return 90;
		}
		return 135;
	}
}

/*
 * Copyright (c) 2018, Lotto <https://github.com/devLotto>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.larsvansoest.runelite.clueitems.data;

import com.google.common.collect.ImmutableSet;
import com.larsvansoest.runelite.clueitems.EmoteClueItemsPlugin;
import lombok.Getter;
import net.runelite.api.annotations.Varbit;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.gameval.VarbitID;
import net.runelite.client.plugins.cluescrolls.ClueScrollPlugin;
import net.runelite.client.plugins.cluescrolls.clues.Enemy;
import net.runelite.client.plugins.cluescrolls.clues.LocationClueScroll;
import net.runelite.client.plugins.cluescrolls.clues.emote.Emote;
import net.runelite.client.plugins.cluescrolls.clues.item.ItemRequirement;

import java.util.Set;

import static com.larsvansoest.runelite.clueitems.data.EmoteClueDifficulty.*;
import static com.larsvansoest.runelite.clueitems.data.StashUnit.*;
import static net.runelite.api.EquipmentInventorySlot.*;
import static net.runelite.client.plugins.cluescrolls.clues.Enemy.*;
import static net.runelite.client.plugins.cluescrolls.clues.emote.Emote.*;
import static net.runelite.client.plugins.cluescrolls.clues.item.ItemRequirements.emptySlot;

/**
 * Data set vendored from RuneLite source. Replaces original {@link ItemRequirement} objects with {@link EmoteClueItem} entries to use in the {@link EmoteClueItemsPlugin}.
 * <p>
 * Source: https://github.com/runelite/runelite/tree/master/runelite-client/src/main/java/net/runelite/client/plugins/cluescrolls/clues
 * </p>
 * <p>
 * Maintained up to 2253b25.
 * To check for any updates, see https://github.com/runelite/runelite/commits/master/runelite-client/src/main/java/net/runelite/client/plugins/cluescrolls/clues/EmoteClue.java
 * </p>
 *
 * @since 2.0.0
 */
@SuppressWarnings("SameParameterValue")
@Getter
public final class EmoteClue implements LocationClueScroll
{
	public static final Set<EmoteClue> CLUES = ImmutableSet.of(
			new EmoteClue(
					Hard,
					"Beckon on the east coast of the Kharazi Jungle. Beware of double agents! Equip any vestment stole and a heraldic rune shield.",
					"Kharazi Jungle",
					NORTHEAST_CORNER_OF_THE_KHARAZI_JUNGLE,
					new WorldPoint(2954, 2933, 0),
					DOUBLE_AGENT_108,
					BECKON,
					EmoteClueItem.ANY_STOLE,
					EmoteClueItem.ANY_HERALDIC_RUNE_SHIELD
			),
			new EmoteClue(Medium,
					"Cheer in the Barbarian Agility Arena. Headbang before you talk to me. Equip a steel platebody, maple shortbow and a Wilderness cape.",
					"Barbarian Outpost",
					BARBARIAN_OUTPOST_OBSTACLE_COURSE,
					new WorldPoint(2552, 3556, 0),
					CHEER,
					HEADBANG,
					EmoteClueItem.STEEL_PLATEBODY,
					EmoteClueItem.MAPLE_SHORTBOW,
					EmoteClueItem.ANY_TEAM_CAPE
			),
			new EmoteClue(Elite,
					"Bow upstairs in the Edgeville Monastery. Equip a completed prayer book.",
					"Edgeville Monastery",
					SOUTHEAST_CORNER_OF_THE_MONASTERY,
					new WorldPoint(3056, 3484, 1),
					BOW,
					EmoteClueItem.ANY_GOD_BOOK
			),
			new EmoteClue(Elite,
					"Cheer in the Shadow dungeon. Equip a rune crossbow, climbing boots and any mitre.",
					"Shadow dungeon",
					ENTRANCE_OF_THE_CAVE_OF_DAMIS,
					new WorldPoint(2629, 5071, 0),
					CHEER,
					EmoteClueItem.ANY_MITRE,
					EmoteClueItem.ANY_RUNE_CROSSBOW,
					EmoteClueItem.ANY_CLIMBING_BOOTS,
					EmoteClueItem.ANY_RING_OF_VISIBILITY_OR_SHADOWS
			),
			new EmoteClue(Hard,
					"Cheer at the top of the agility pyramid. Beware of double agents! Equip a blue mystic robe top, and any rune heraldic shield.",
					"Agility Pyramid",
					AGILITY_PYRAMID,
					new WorldPoint(3043, 4697, 3),
					DOUBLE_AGENT_108,
					CHEER,
					EmoteClueItem.MYSTIC_ROBE_TOP,
					EmoteClueItem.ANY_HERALDIC_RUNE_SHIELD
			),
			new EmoteClue(Master,
					"Dance in Iban's temple. Beware of double agents! Equip Iban's staff, a black mystic top and a black mystic bottom.",
					"Iban's temple",
					WELL_OF_VOYAGE,
					new WorldPoint(2011, 4712, 0),
					DOUBLE_AGENT_141,
					DANCE,
					EmoteClueItem.ANY_IBANS_STAFF,
					EmoteClueItem.MYSTIC_ROBE_TOP_DARK,
					EmoteClueItem.MYSTIC_ROBE_BOTTOM_DARK
			),
			new EmoteClue(Elite,
					"Dance on the Fishing Platform. Equip barrows gloves, an amulet of glory and a dragon med helm.",
					"Fishing Platform",
					SOUTHEAST_CORNER_OF_THE_FISHING_PLATFORM,
					new WorldPoint(2782, 3273, 0),
					DANCE,
					EmoteClueItem.ANY_AMULET_OF_GLORY,
					EmoteClueItem.BARROWS_GLOVES,
					EmoteClueItem.DRAGON_MED_HELM
			),
			new EmoteClue(Master,
					"Flap at the death altar. Beware of double agents! Equip a death tiara, a legend's cape and any ring of wealth.",
					"Death altar",
					DEATH_ALTAR,
					new WorldPoint(2205, 4838, 0),
					DOUBLE_AGENT_141,
					FLAP,
					EmoteClueItem.ANY_RING_OF_WEALTH,
					EmoteClueItem.DEATH_TIARA,
					EmoteClueItem.CAPE_OF_LEGENDS
			),
			new EmoteClue(Elite,
					"Headbang in the Fight Arena pub. Equip a pirate bandana, a dragonstone necklace and and a magic longbow.",
					"Fight Arena pub",
					OUTSIDE_THE_BAR_BY_THE_FIGHT_ARENA,
					new WorldPoint(2568, 3149, 0),
					HEADBANG,
					EmoteClueItem.ANY_PIRATE_BANDANA,
					EmoteClueItem.DRAGON_NECKLACE,
					EmoteClueItem.MAGIC_LONGBOW
			),
			new EmoteClue(Master,
					"Do a jig at the barrows chest. Beware of double agents! Equip any full barrows set.",
					"Barrows chest",
					BARROWS_CHEST,
					new WorldPoint(3551, 9694, 0),
					DOUBLE_AGENT_141,
					JIG,
					EmoteClueItem.ANY_BARROWS_SET
			),
			new EmoteClue(Hard,
					"Jig at Jiggig. Beware of double agents! Equip a Rune spear, rune platelegs and any rune heraldic helm.",
					"Jiggig",
					IN_THE_MIDDLE_OF_JIGGIG,
					new WorldPoint(2477, 3047, 0),
					DOUBLE_AGENT_108,
					JIG,
					EmoteClueItem.ANY_HERALDIC_RUNE_HELM,
					EmoteClueItem.RUNE_SPEAR,
					EmoteClueItem.RUNE_PLATELEGS
			),
			new EmoteClue(Easy,
					"Cheer at the games room. Have nothing equipped at all when you do.",
					"Burthorpe Games Room",
					null,
					new WorldPoint(2207, 4952, 0),
					CHEER,
					emptySlot("Nothing at all", HEAD, CAPE, AMULET, WEAPON, BODY, SHIELD, LEGS, GLOVES, BOOTS, RING, AMMO)
			),
			new EmoteClue(Easy,
					"Panic on the pier where you catch the Fishing trawler. Have nothing equipped at all when you do.",
					"Fishing trawler",
					null,
					new WorldPoint(2676, 3169, 0),
					PANIC,
					emptySlot("Nothing at all", HEAD, CAPE, AMULET, WEAPON, BODY, SHIELD, LEGS, GLOVES, BOOTS, RING, AMMO)
			),
			new EmoteClue(Hard,
					"Panic in the heart of the Haunted Woods. Beware of double agents! Have no items equipped when you do.",
					"Haunted Woods (ALQ)",
					null,
					new WorldPoint(3611, 3492, 0),
					DOUBLE_AGENT_108,
					PANIC,
					emptySlot("Nothing at all", HEAD, CAPE, AMULET, WEAPON, BODY, SHIELD, LEGS, GLOVES, BOOTS, RING, AMMO)
			),
			new EmoteClue(Master,
					"Show your anger towards the Statue of Saradomin in Ellamaria's garden. Beware of double agents! Equip a zamorak godsword.",
					"Varrock Castle",
					BY_THE_BEAR_CAGE_IN_VARROCK_PALACE_GARDENS,
					new WorldPoint(3230, 3478, 0),
					DOUBLE_AGENT_141,
					ANGRY,
					EmoteClueItem.ANY_ZAMORAK_GODSWORD
			),
			new EmoteClue(Master,
					"Show your anger at the Wise old man. Beware of double agents! Equip an abyssal whip, a legend's cape and some spined chaps.",
					"Draynor Village",
					BEHIND_MISS_SCHISM_IN_DRAYNOR_VILLAGE,
					new WorldPoint(3088, 3254, 0),
					DOUBLE_AGENT_141,
					ANGRY,
					EmoteClueItem.ANY_ABYSSAL_WHIP,
					EmoteClueItem.CAPE_OF_LEGENDS,
					EmoteClueItem.SPINED_CHAPS
			),
			new EmoteClue(Master,
					"Beckon by a collection of crystalline maple trees. Beware of double agents! Equip Bryophyta's staff and a nature tiara.",
					"North of Prifddinas",
					CRYSTALLINE_MAPLE_TREES,
					new WorldPoint(2211, 3427, 0),
					DOUBLE_AGENT_141,
					BECKON,
					EmoteClueItem.ANY_BRYOPHYTAS_STAFF,
					EmoteClueItem.NATURE_TIARA
			),
			new EmoteClue(Medium,
					"Beckon in the Digsite, near the eastern winch. Bow before you talk to me. Equip a green gnome hat, snakeskin boots and an iron pickaxe.",
					"Digsite",
					DIGSITE,
					new WorldPoint(3370, 3425, 0),
					BECKON,
					BOW,
					EmoteClueItem.GREEN_HAT,
					EmoteClueItem.SNAKESKIN_BOOTS,
					EmoteClueItem.IRON_PICKAXE
			),
			new EmoteClue(Medium,
					"Beckon in Tai Bwo Wannai. Clap before you talk to me. Equip green dragonhide chaps, a ring of dueling and a mithril medium helmet.",
					"Tai Bwo Wannai",
					SOUTH_OF_THE_SHRINE_IN_TAI_BWO_WANNAI_VILLAGE,
					new WorldPoint(2803, 3073, 0),
					BECKON,
					CLAP,
					EmoteClueItem.GREEN_DHIDE_CHAPS,
					EmoteClueItem.ANY_RING_OF_DUELING,
					EmoteClueItem.MITHRIL_MED_HELM
			),
			new EmoteClue(Medium,
					"Beckon in the Shayzien Combat Ring. Show your anger before you talk to me. Equip an adamant platebody, adamant full helm and adamant platelegs.",
					"Shayzien Combat Ring",
					WEST_OF_THE_SHAYZIEN_COMBAT_RING,
					new WorldPoint(1543, 3623, 0),
					BECKON,
					ANGRY,
					EmoteClueItem.ADAMANT_PLATELEGS,
					EmoteClueItem.ADAMANT_PLATEBODY,
					EmoteClueItem.ADAMANT_FULL_HELM
			),
			new EmoteClue(Master,
					"Bow near Lord Iorwerth. Beware of double agents! Equip a charged crystal bow.",
					"Lord Iorwerth's camp",
					TENT_IN_LORD_IORWERTHS_ENCAMPMENT,
					new WorldPoint(2205, 3252, 0),
					DOUBLE_AGENT_141,
					BOW,
					EmoteClueItem.ANY_CRYSTAL_BOW_OR_ACTIVE_BOW_OF_FAERDHINEN
			),
			new EmoteClue(Master,
					"Bow in the Iorwerth Camp. Beware of double agents! Equip a charged crystal bow.",
					"Lord Iorwerth's camp",
					TENT_IN_LORD_IORWERTHS_ENCAMPMENT,
					new WorldPoint(2205, 3252, 0),
					DOUBLE_AGENT_141,
					BOW,
					EmoteClueItem.ANY_CRYSTAL_BOW_OR_ACTIVE_BOW_OF_FAERDHINEN
			),
			new EmoteClue(Easy,
					"Bow outside the entrance to the Legends' Guild. Equip iron platelegs, an emerald amulet and an oak longbow.",
					"Legend's Guild",
					OUTSIDE_THE_LEGENDS_GUILD_GATES,
					new WorldPoint(2729, 3349, 0),
					BOW,
					EmoteClueItem.IRON_PLATELEGS,
					EmoteClueItem.OAK_LONGBOW,
					EmoteClueItem.EMERALD_AMULET
			),
			new EmoteClue(Elite,
					"Bow on the ground floor of the Legend's guild. Equip Legend's cape, a dragon battleaxe and an amulet of glory.",
					"Legend's Guild",
					OUTSIDE_THE_LEGENDS_GUILD_DOOR,
					new WorldPoint(2728, 3377, 0),
					BOW,
					EmoteClueItem.CAPE_OF_LEGENDS,
					EmoteClueItem.DRAGON_BATTLEAXE,
					EmoteClueItem.ANY_AMULET_OF_GLORY
			),
			new EmoteClue(Easy,
					"Bow in the ticket office of the Emir's Arena. Equip an iron chain body, leather chaps and coif.",
					"Emir's Arena",
					EMIRS_ARENA_TICKET_OFFICE,
					new WorldPoint(3314, 3241, 0),
					BOW,
					EmoteClueItem.IRON_CHAINBODY,
					EmoteClueItem.LEATHER_CHAPS,
					EmoteClueItem.COIF
			),
			new EmoteClue(Elite,
					"Bow within the temple in Civitas illa Fortis. Equip any piece of Sunfire Fanatic armour.",
					"Civitas illa Fortis",
					TEMPLE_SOUTHEAST_OF_THE_BAZAAR,
					new WorldPoint(1699, 3087, 0),
					BOW,
					EmoteClueItem.ANY_SUNFIRE_FANATIC_PIECE
			),
			new EmoteClue(Hard,
					"Bow at the top of the lighthouse. Beware of double agents! Equip a blue dragonhide body, blue dragonhide vambraces and no jewelry.",
					"Lighthouse",
					TOP_FLOOR_OF_THE_LIGHTHOUSE,
					new WorldPoint(2511, 3641, 2),
					DOUBLE_AGENT_108,
					BOW,
					EmoteClueItem.BLUE_DHIDE_BODY,
					EmoteClueItem.BLUE_DHIDE_VAMBRACES,
					emptySlot("No jewellery", AMULET, RING)
			),
			new EmoteClue(Hard,
					"Blow a kiss between the tables in Shilo Village bank. Beware of double agents! Equip a blue mystic hat, bone spear and rune platebody.",
					"Shilo Village",
					SHILO_VILLAGE_BANK,
					new WorldPoint(2851, 2954, 0),
					DOUBLE_AGENT_108,
					BLOW_KISS,
					EmoteClueItem.MYSTIC_HAT,
					EmoteClueItem.BONE_SPEAR,
					EmoteClueItem.RUNE_PLATEBODY
			),
			new EmoteClue(Elite,
					"Blow a kiss in the heart of the lava maze. Equip black dragonhide chaps, a spotted cape and a rolling pin.",
					"Lava maze",
					NEAR_A_LADDER_IN_THE_WILDERNESS_LAVA_MAZE,
					new WorldPoint(3069, 3861, 0),
					BLOW_KISS,
					EmoteClueItem.BLACK_DHIDE_CHAPS,
					EmoteClueItem.ANY_SPOTTED_CAPE,
					EmoteClueItem.ROLLING_PIN
			),
			new EmoteClue(Master,
					"Blow a kiss outside K'ril Tsutsaroth's chamber. Beware of double agents! Equip a zamorak full helm and the shadow sword.",
					"K'ril's chamber",
					OUTSIDE_KRIL_TSUTSAROTHS_ROOM,
					new WorldPoint(2925, 5333, 2),
					DOUBLE_AGENT_141,
					BLOW_KISS,
					EmoteClueItem.ZAMORAK_FULL_HELM,
					EmoteClueItem.SHADOW_SWORD
			),
			new EmoteClue(Easy,
					"Cheer at the Druids' Circle. Equip a blue wizard hat, a bronze two-handed sword and HAM boots.",
					"Taverley stone circle",
					TAVERLEY_STONE_CIRCLE,
					new WorldPoint(2924, 3478, 0),
					CHEER,
					EmoteClueItem.BLUE_WIZARD_HAT,
					EmoteClueItem.BRONZE_2H_SWORD,
					EmoteClueItem.HAM_BOOTS
			),
			new EmoteClue(Medium,
					"Cheer in the Edgeville general store. Dance before you talk to me. Equip a brown apron, leather boots and leather gloves.",
					"Edgeville",
					NORTH_OF_EVIL_DAVES_HOUSE_IN_EDGEVILLE,
					new WorldPoint(3080, 3509, 0),
					CHEER,
					DANCE,
					EmoteClueItem.BROWN_APRON,
					EmoteClueItem.LEATHER_BOOTS,
					EmoteClueItem.LEATHER_GLOVES
			),
			new EmoteClue(Medium,
					"Cheer in the Ogre Pen in the Training Camp. Show you are angry before you talk to me. Equip a green dragonhide body and chaps and a steel square shield.",
					"King Lathas' camp",
					OGRE_CAGE_IN_KING_LATHAS_TRAINING_CAMP,
					new WorldPoint(2527, 3375, 0),
					CHEER,
					ANGRY,
					EmoteClueItem.GREEN_DHIDE_BODY,
					EmoteClueItem.GREEN_DHIDE_CHAPS,
					EmoteClueItem.STEEL_SQ_SHIELD
			),
			new EmoteClue(Master,
					"Cheer in the Entrana church. Beware of double agents! Equip a full set of black dragonhide armour.",
					"Entrana church",
					ENTRANA_CHAPEL,
					new WorldPoint(2852, 3349, 0),
					DOUBLE_AGENT_141,
					CHEER,
					EmoteClueItem.BLACK_DHIDE_VAMBRACES,
					EmoteClueItem.BLACK_DHIDE_CHAPS,
					EmoteClueItem.BLACK_DHIDE_BODY
			),
			new EmoteClue(Easy,
					"Cheer for the monks at Port Sarim. Equip a coif, steel plateskirt and a sapphire necklace.",
					"Port Sarim",
					NEAR_THE_ENTRANA_FERRY_IN_PORT_SARIM,
					new WorldPoint(3047, 3237, 0),
					CHEER,
					EmoteClueItem.COIF,
					EmoteClueItem.STEEL_PLATESKIRT,
					EmoteClueItem.SAPPHIRE_NECKLACE
			),
			new EmoteClue(Easy,
					"Clap in the main exam room in the Exam Centre. Equip a white apron, green gnome boots and leather gloves.",
					"Exam Centre",
					OUTSIDE_THE_DIGSITE_EXAM_CENTRE,
					new WorldPoint(3361, 3339, 0),
					CLAP,
					EmoteClueItem.WHITE_APRON,
					EmoteClueItem.GREEN_BOOTS,
					EmoteClueItem.LEATHER_GLOVES
			),
			new EmoteClue(Easy,
					"Clap on the causeway to the Wizards' Tower. Equip an iron medium helmet, emerald ring and a white apron.",
					"Wizards' Tower (DIS)",
					ON_THE_BRIDGE_TO_THE_MISTHALIN_WIZARDS_TOWER,
					new WorldPoint(3113, 3196, 0),
					CLAP,
					EmoteClueItem.IRON_MED_HELM,
					EmoteClueItem.EMERALD_RING,
					EmoteClueItem.WHITE_APRON
			),
			new EmoteClue(Easy,
					"Clap on the top level of the mill, north of East Ardougne. Equip a blue gnome robe top, HAM robe bottom and an unenchanted tiara.",
					"East Ardougne",
					UPSTAIRS_IN_THE_ARDOUGNE_WINDMILL,
					new WorldPoint(2635, 3385, 3),
					CLAP,
					EmoteClueItem.BLUE_ROBE_TOP,
					EmoteClueItem.HAM_ROBE,
					EmoteClueItem.TIARA
			),
			new EmoteClue(Medium,
					"Clap in Seers court house. Spin before you talk to me. Equip an adamant halberd, blue mystic robe bottom and a diamond ring.",
					"Seers Village",
					OUTSIDE_THE_SEERS_VILLAGE_COURTHOUSE,
					new WorldPoint(2735, 3469, 0),
					CLAP,
					SPIN,
					EmoteClueItem.ADAMANT_HALBERD,
					EmoteClueItem.MYSTIC_ROBE_BOTTOM,
					EmoteClueItem.MYSTIC_ROBE_BOTTOM,
					EmoteClueItem.DIAMOND_RING
			),
			new EmoteClue(Master,
					"Clap in the magic axe hut. Beware of double agents! Equip only some flared trousers.",
					"Magic axe hut",
					OUTSIDE_THE_WILDERNESS_AXE_HUT,
					new WorldPoint(3191, 3960, 0),
					DOUBLE_AGENT_141,
					CLAP,
					EmoteClueItem.FLARED_TROUSERS,
					EmoteClueItem.LOCKPICK,
					emptySlot("Nothing else", HEAD, CAPE, AMULET, WEAPON, BODY, SHIELD, GLOVES, BOOTS, RING, AMMO)
			),
			new EmoteClue(Medium,
					"Clap your hands north of Mount Karuulm Spin before you talk to me. Equip an adamant warhammer, a ring of life and a pair of mithril boots.",
					"Mount Karuulm",
					NORTH_OF_MOUNT_KARUULM,
					new WorldPoint(1306, 3839, 0),
					CLAP,
					SPIN,
					EmoteClueItem.ADAMANT_WARHAMMER,
					EmoteClueItem.RING_OF_LIFE,
					EmoteClueItem.MITHRIL_BOOTS
			),
			new EmoteClue(Medium,
				"Jump for Joy in the mine near the Twilight Temple. Bow before you talk to me. Equip a maple longbow, a ruby amulet and some steel platelegs.",
				"Twilight Temple Mine",
				NORTH_OF_THE_TWILIGHT_TEMPLE,
				new WorldPoint(1672, 3284, 0),
				JUMP_FOR_JOY,
				BOW,
				EmoteClueItem.MAPLE_LONGBOW,
				EmoteClueItem.RUBY_AMULET,
				EmoteClueItem.STEEL_PLATELEGS
			),
			new EmoteClue(Medium,
				"Nod your head where the River Ortus meets the Proudspire. Indicate 'no' before you talk to me. Equip a blue wizard hat, a blue wizard robe and wear nothing on your legs.",
				"River Ortus",
				WHERE_THE_RIVER_ORTUS_MEETS_THE_PROUDSPIRE,
				new WorldPoint(1626, 3241, 0),
				YES,
				NO,
				EmoteClueItem.BLUE_WIZARD_HAT,
				EmoteClueItem.BLUE_WIZARD_ROBE
			),
			new EmoteClue(Medium,
					"Cry in the Catherby Ranging shop. Bow before you talk to me. Equip blue gnome boots, a hard leather body and an unblessed silver sickle.",
					"Catherby",
					HICKTONS_ARCHERY_EMPORIUM,
					new WorldPoint(2823, 3443, 0),
					CRY,
					BOW,
					EmoteClueItem.BLUE_BOOTS,
					EmoteClueItem.HARDLEATHER_BODY,
					EmoteClueItem.SILVER_SICKLE
			),
			new EmoteClue(Medium,
					"Cry on the shore of Catherby beach. Laugh before you talk to me, equip an adamant sq shield, a bone dagger and mithril platebody.",
					"Catherby",
					OUTSIDE_HARRYS_FISHING_SHOP_IN_CATHERBY,
					new WorldPoint(2852, 3429, 0),
					CRY,
					LAUGH,
					EmoteClueItem.ADAMANT_SQ_SHIELD,
					EmoteClueItem.BONE_DAGGER,
					EmoteClueItem.MITHRIL_PLATEBODY
			),
			new EmoteClue(Medium,
					"Cry on top of the western tree in the Gnome Agility Arena. Indicate 'no' before you talk to me. Equip a steel kiteshield, ring of forging and green dragonhide chaps.",
					"Gnome Stronghold",
					GNOME_STRONGHOLD_BALANCING_ROPE,
					new WorldPoint(2473, 3420, 2),
					CRY,
					NO,
					EmoteClueItem.STEEL_KITESHIELD,
					EmoteClueItem.RING_OF_FORGING,
					EmoteClueItem.GREEN_DHIDE_CHAPS
			),
			new EmoteClue(Master,
					"Cry in the TzHaar gem store. Beware of double agents! Equip a fire cape and TokTz-Xil-Ul.",
					"Tzhaar gem store",
					TZHAAR_GEM_STORE,
					new WorldPoint(2463, 5149, 0),
					DOUBLE_AGENT_141,
					CRY,
					EmoteClueItem.ANY_FIRE_CAPE,
					EmoteClueItem.TOKTZXILUL
			),
			new EmoteClue(Medium,
					"Cry in the Draynor Village jail. Jump for joy before you talk to me. Equip an adamant sword, a sapphire amulet and an adamant plateskirt.",
					"Draynor Village jail",
					OUTSIDE_DRAYNOR_VILLAGE_JAIL,
					new WorldPoint(3128, 3245, 0),
					CRY,
					JUMP_FOR_JOY,
					EmoteClueItem.ADAMANT_SWORD,
					EmoteClueItem.SAPPHIRE_AMULET,
					EmoteClueItem.ADAMANT_PLATESKIRT
			),
			new EmoteClue(Easy,
					"Dance at the crossroads north of Draynor. Equip an iron chain body, a sapphire ring and a longbow.",
					"Draynor Village",
					CROSSROADS_NORTH_OF_DRAYNOR_VILLAGE,
					new WorldPoint(3109, 3294, 0),
					DANCE,
					EmoteClueItem.IRON_CHAINBODY,
					EmoteClueItem.SAPPHIRE_RING,
					EmoteClueItem.LONGBOW
			),
			new EmoteClue(Easy,
					"Dance in the Party Room. Equip a steel full helmet, steel platebody and an iron plateskirt.",
					"Falador Party Room",
					OUTSIDE_THE_FALADOR_PARTY_ROOM,
					new WorldPoint(3045, 3376, 0),
					DANCE,
					EmoteClueItem.STEEL_FULL_HELM,
					EmoteClueItem.STEEL_PLATEBODY,
					EmoteClueItem.IRON_PLATESKIRT
			),
			new EmoteClue(Easy,
					"Dance in the shack in Lumbridge Swamp. Equip a bronze dagger, iron full helmet and a gold ring.",
					"Lumbridge swamp",
					NEAR_A_SHED_IN_LUMBRIDGE_SWAMP,
					new WorldPoint(3203, 3169, 0),
					DANCE,
					EmoteClueItem.BRONZE_DAGGER,
					EmoteClueItem.IRON_FULL_HELM,
					EmoteClueItem.GOLD_RING
			),
			new EmoteClue(Medium,
					"Dance in the dark caves beneath Lumbridge Swamp. Blow a kiss before you talk to me. Equip an air staff, Bronze full helm and an amulet of power.",
					"Lumbridge swamp caves",
					LUMBRIDGE_SWAMP_CAVES,
					new WorldPoint(3168, 9571, 0),
					DANCE,
					BLOW_KISS,
					VarbitID.MY2ARM_FIRE_LUMB,
					EmoteClueItem.STAFF_OF_AIR,
					EmoteClueItem.BRONZE_FULL_HELM,
					EmoteClueItem.AMULET_OF_POWER
			),
			new EmoteClue(Hard,
					"Dance at the cat-doored pyramid in Sophanem. Beware of double agents! Equip a ring of life, an uncharged amulet of glory and an adamant two-handed sword.",
					"Pyramid Of Sophanem",
					OUTSIDE_THE_GREAT_PYRAMID_OF_SOPHANEM,
					new WorldPoint(3294, 2781, 0),
					DOUBLE_AGENT_108,
					DANCE,
					EmoteClueItem.RING_OF_LIFE,
					EmoteClueItem.AMULET_OF_GLORY,
					EmoteClueItem.ADAMANT_2H_SWORD
			),
			new EmoteClue(Medium,
					"Dance in the centre of Canifis. Bow before you talk to me. Equip a green gnome robe top, mithril plate legs and an iron two-handed sword.",
					"Canifis",
					CENTRE_OF_CANIFIS,
					new WorldPoint(3492, 3488, 0),
					DANCE,
					BOW,
					EmoteClueItem.GREEN_ROBE_TOP,
					EmoteClueItem.MITHRIL_PLATELEGS,
					EmoteClueItem.IRON_2H_SWORD
			),
			new EmoteClue(Master,
					"Dance in the King Black Dragon's lair. Beware of double agents! Equip a black dragonhide body, black dragonhide vambraces and a black dragon mask.",
					"King black dragon's lair",
					KING_BLACK_DRAGONS_LAIR,
					new WorldPoint(2271, 4680, 0),
					DOUBLE_AGENT_141,
					DANCE,
					EmoteClueItem.BLACK_DHIDE_BODY,
					EmoteClueItem.BLACK_DHIDE_VAMBRACES,
					EmoteClueItem.BLACK_DRAGON_MASK
			),
			new EmoteClue(Easy,
					"Dance at the entrance to the Grand Exchange. Equip a pink skirt, pink robe top and a body tiara.",
					"Grand Exchange",
					SOUTH_OF_THE_GRAND_EXCHANGE,
					new WorldPoint(3165, 3467, 0),
					DANCE,
					EmoteClueItem.PINK_SKIRT,
					EmoteClueItem.PINK_ROBE_TOP,
					EmoteClueItem.BODY_TIARA
			),
			new EmoteClue(Master,
					"Fortis Salute outside the gates of Cam Torum. Beware of double agents! Equip a full set of Frostmoon equipment.",
					"Cam Torum",
					CAM_TORUM_ENTRANCE,
					new WorldPoint(1436, 3115, 0),
					DOUBLE_AGENT_141,
					FORTIS_SALUTE,
					EmoteClueItem.ANY_BLUE_MOON_HELM,
					EmoteClueItem.ANY_BLUE_MOON_CHESTPLATE,
					EmoteClueItem.ANY_BLUE_MOON_TASSETS,
					EmoteClueItem.ANY_BLUE_MOON_SPEAR
			),
			new EmoteClue(Master,
					"Goblin Salute in the Goblin Village. Beware of double agents! Equip a bandos godsword, a bandos cloak and a bandos platebody.",
					"Goblin Village",
					OUTSIDE_MUDKNUCKLES_HUT,
					new WorldPoint(2956, 3505, 0),
					DOUBLE_AGENT_141,
					GOBLIN_SALUTE,
					EmoteClueItem.BANDOS_PLATEBODY,
					EmoteClueItem.BANDOS_CLOAK,
					EmoteClueItem.ANY_BANDOS_GODSWORD
			),
			new EmoteClue(Easy,
					"Headbang in the mine north of Al Kharid. Equip a desert shirt, leather gloves and leather boots.",
					"Al Kharid mine",
					AL_KHARID_SCORPION_MINE,
					new WorldPoint(3299, 3289, 0),
					HEADBANG,
					EmoteClueItem.DESERT_SHIRT,
					EmoteClueItem.LEATHER_GLOVES,
					EmoteClueItem.LEATHER_BOOTS
			),
			new EmoteClue(Hard,
					"Headbang at the exam centre. Beware of double agents! Equip a mystic fire staff, a diamond bracelet and rune boots.",
					"Exam Centre",
					INSIDE_THE_DIGSITE_EXAM_CENTRE,
					new WorldPoint(3362, 3340, 0),
					DOUBLE_AGENT_108,
					HEADBANG,
					EmoteClueItem.MYSTIC_FIRE_STAFF,
					EmoteClueItem.DIAMOND_BRACELET,
					EmoteClueItem.RUNE_BOOTS
			),
			new EmoteClue(Elite,
					"Headbang at the top of Slayer Tower. Equip a seercull, a combat bracelet and helm of Neitiznot.",
					"Slayer Tower",
					OUTSIDE_THE_SLAYER_TOWER_GARGOYLE_ROOM,
					new WorldPoint(3421, 3537, 2),
					HEADBANG,
					EmoteClueItem.SEERCULL,
					EmoteClueItem.ANY_COMBAT_BRACELET,
					EmoteClueItem.HELM_OF_NEITIZNOT
			),
			new EmoteClue(Easy,
					"Dance a jig by the entrance to the Fishing Guild. Equip an emerald ring, a sapphire amulet, and a bronze chain body.",
					"Fishing Guild",
					OUTSIDE_THE_FISHING_GUILD,
					new WorldPoint(2610, 3391, 0),
					JIG,
					EmoteClueItem.EMERALD_RING,
					EmoteClueItem.SAPPHIRE_AMULET,
					EmoteClueItem.BRONZE_CHAINBODY
			),
			new EmoteClue(Medium,
					"Dance a jig under Shantay's Awning. Bow before you talk to me. Equip a pointed blue snail helmet, an air staff and a bronze square shield.",
					"Shantay Pass",
					SHANTAY_PASS,
					new WorldPoint(3304, 3124, 0),
					JIG,
					BOW,
					EmoteClueItem.BRUISE_BLUE_SNELM_POINTED,
					EmoteClueItem.STAFF_OF_AIR,
					EmoteClueItem.BRONZE_SQ_SHIELD
			),
			new EmoteClue(Easy,
					"Do a jig in Varrock's rune store. Equip an air tiara and a staff of water.",
					"Varrock rune store",
					AUBURYS_SHOP_IN_VARROCK,
					new WorldPoint(3253, 3401, 0),
					JIG,
					EmoteClueItem.AIR_TIARA,
					EmoteClueItem.STAFF_OF_WATER
			),
			new EmoteClue(Easy,
					"Jump for joy at the beehives. Equip a desert shirt, green gnome robe bottoms and a steel axe.",
					"Catherby",
					CATHERBY_BEEHIVE_FIELD,
					new WorldPoint(2759, 3445, 0),
					JUMP_FOR_JOY,
					EmoteClueItem.DESERT_SHIRT,
					EmoteClueItem.GREEN_ROBE_BOTTOMS,
					EmoteClueItem.STEEL_AXE
			),
			new EmoteClue(Medium,
					"Jump for joy in Yanille bank. Dance a jig before you talk to me. Equip a brown apron, adamantite medium helmet and snakeskin chaps.",
					"Yanille",
					OUTSIDE_YANILLE_BANK,
					new WorldPoint(2610, 3092, 0),
					JUMP_FOR_JOY,
					JIG,
					EmoteClueItem.BROWN_APRON,
					EmoteClueItem.ADAMANT_MED_HELM,
					EmoteClueItem.SNAKESKIN_CHAPS
			),
			new EmoteClue(Medium,
					"Jump for joy in the TzHaar sword shop. Shrug before you talk to me. Equip a Steel longsword, Blue D'hide body and blue mystic gloves.",
					"Tzhaar weapon store",
					TZHAAR_WEAPONS_STORE,
					new WorldPoint(2477, 5146, 0),
					JUMP_FOR_JOY,
					SHRUG,
					EmoteClueItem.STEEL_LONGSWORD,
					EmoteClueItem.BLUE_DHIDE_BODY,
					EmoteClueItem.MYSTIC_GLOVES
			),
			new EmoteClue(Elite,
					"Jump for joy in the Ancient Cavern. Equip a granite shield, splitbark body and any rune heraldic helm.",
					"Ancient cavern",
					ENTRANCE_OF_THE_CAVERN_UNDER_THE_WHIRLPOOL,
					new WorldPoint(1768, 5366, 1),
					JUMP_FOR_JOY,
					EmoteClueItem.GRANITE_SHIELD,
					EmoteClueItem.SPLITBARK_BODY,
					EmoteClueItem.ANY_HERALDIC_RUNE_HELM
			),
			new EmoteClue(Elite,
					"Jump for joy at the Neitiznot rune rock. Equip Rune boots, a proselyte hauberk and a dragonstone ring.",
					"Fremennik Isles",
					NEAR_A_RUNITE_ROCK_IN_THE_FREMENNIK_ISLES,
					new WorldPoint(2375, 3850, 0),
					JUMP_FOR_JOY,
					EmoteClueItem.RUNE_BOOTS,
					EmoteClueItem.PROSELYTE_HAUBERK,
					EmoteClueItem.DRAGONSTONE_RING
			),
			new EmoteClue(Master,
					"Jump for joy in the centre of Zul-Andra. Beware of double agents! Equip a dragon 2h sword, bandos boots and an obsidian cape.",
					"Zul-Andra",
					NEAR_THE_PIER_IN_ZULANDRA,
					new WorldPoint(2199, 3056, 0),
					DOUBLE_AGENT_141,
					JUMP_FOR_JOY,
					EmoteClueItem.DRAGON_2H_SWORD,
					EmoteClueItem.ANY_BANDOS_BOOTS,
					EmoteClueItem.OBSIDIAN_CAPE
			),
			new EmoteClue(Elite,
					"Laugh by the fountain of heroes. Equip splitbark legs, dragon boots and a Rune longsword.",
					"Fountain of heroes",
					FOUNTAIN_OF_HEROES,
					new WorldPoint(2920, 9893, 0),
					LAUGH,
					EmoteClueItem.SPLITBARK_LEGS,
					EmoteClueItem.ANY_DRAGON_BOOTS,
					EmoteClueItem.RUNE_LONGSWORD
			),
			new EmoteClue(Hard,
					"Laugh in Jokul's tent in the Mountain Camp. Beware of double agents! Equip a rune full helmet, blue dragonhide chaps and a fire battlestaff.",
					"Mountain Camp",
					MOUNTAIN_CAMP_GOAT_ENCLOSURE,
					new WorldPoint(2812, 3681, 0),
					DOUBLE_AGENT_108,
					LAUGH,
					EmoteClueItem.RUNE_FULL_HELM,
					EmoteClueItem.BLUE_DHIDE_CHAPS,
					EmoteClueItem.FIRE_BATTLESTAFF
			),
			new EmoteClue(Easy,
					"Laugh at the crossroads south of the Sinclair Mansion. Equip a cowl, a blue wizard robe top and an iron scimitar.",
					"Sinclair Mansion",
					ROAD_JUNCTION_SOUTH_OF_SINCLAIR_MANSION,
					new WorldPoint(2741, 3536, 0),
					LAUGH,
					EmoteClueItem.LEATHER_COWL,
					EmoteClueItem.BLUE_WIZARD_ROBE,
					EmoteClueItem.IRON_SCIMITAR
			),
			new EmoteClue(Elite,
					"Laugh in front of the gem store in Ardougne market. Equip a Castlewars bracelet, a dragonstone amulet and a ring of forging.",
					"Ardougne",
					NEAR_THE_GEM_STALL_IN_ARDOUGNE_MARKET,
					new WorldPoint(2666, 3304, 0),
					LAUGH,
					EmoteClueItem.ANY_CASTLE_WARS_BRACELET,
					EmoteClueItem.DRAGONSTONE_AMULET,
					EmoteClueItem.RING_OF_FORGING
			),
			new EmoteClue(Easy,
					"Panic in the Limestone Mine. Equip bronze platelegs, a steel pickaxe and a steel medium helmet.",
					"Limestone Mine",
					LIMESTONE_MINE,
					new WorldPoint(3372, 3498, 0),
					PANIC,
					EmoteClueItem.BRONZE_PLATELEGS,
					EmoteClueItem.STEEL_PICKAXE,
					EmoteClueItem.STEEL_MED_HELM
			),
			new EmoteClue(Medium,
					"Panic by the mausoleum in Morytania. Wave before you speak to me. Equip a mithril plate skirt, a maple longbow and no boots.",
					"Morytania mausoleum",
					MAUSOLEUM_OFF_THE_MORYTANIA_COAST,
					new WorldPoint(3504, 3576, 0),
					PANIC,
					WAVE,
					EmoteClueItem.MITHRIL_PLATESKIRT,
					EmoteClueItem.MAPLE_LONGBOW,
					emptySlot("No boots", BOOTS)
			),
			new EmoteClue(Hard,
					"Panic on the Wilderness volcano bridge. Beware of double agents! Equip any headband and crozier.",
					"Wilderness volcano",
					VOLCANO_IN_THE_NORTHEASTERN_WILDERNESS,
					new WorldPoint(3368, 3935, 0),
					DOUBLE_AGENT_65,
					PANIC,
					EmoteClueItem.ANY_HEADBAND,
					EmoteClueItem.ANY_CROZIER
			),
			new EmoteClue(Hard,
					"Panic by the pilot on White Wolf Mountain. Beware of double agents! Equip mithril platelegs, a ring of life and a rune axe.",
					"White Wolf Mountain",
					GNOME_GLIDER_ON_WHITE_WOLF_MOUNTAIN,
					new WorldPoint(2847, 3499, 0),
					DOUBLE_AGENT_108,
					PANIC,
					EmoteClueItem.MITHRIL_PLATELEGS,
					EmoteClueItem.RING_OF_LIFE,
					EmoteClueItem.RUNE_AXE
			),
			new EmoteClue(
					Master,
					"Panic by the big egg where no one dare goes and the ground is burnt. Beware of double agents! Equip a dragon med helm, a TokTz-Ket-Xil, a brine sabre, rune platebody and an uncharged amulet of glory.",
					"Lava dragon isle",
					SOUTHEAST_CORNER_OF_LAVA_DRAGON_ISLE,
					new WorldPoint(3227, 3831, 0),
					DOUBLE_AGENT_141,
					PANIC,
					EmoteClueItem.DRAGON_MED_HELM,
					EmoteClueItem.TOKTZKETXIL,
					EmoteClueItem.BRINE_SABRE,
					EmoteClueItem.RUNE_PLATEBODY,
					EmoteClueItem.AMULET_OF_GLORY
			),
			new EmoteClue(Elite,
					"Panic at the area flowers meet snow. Equip Blue D'hide vambraces, a dragon spear and a rune plateskirt.",
					"Trollweiss mountain",
					HALFWAY_DOWN_TROLLWEISS_MOUNTAIN,
					new WorldPoint(2776, 3781, 0),
					PANIC,
					EmoteClueItem.BLUE_DHIDE_VAMBRACES,
					EmoteClueItem.DRAGON_SPEAR,
					EmoteClueItem.RUNE_PLATESKIRT,
					EmoteClueItem.SLED_4084
			),
			new EmoteClue(Master,
					"Do a push up at the bank of the Warrior's guild. Beware of double agents! Equip a dragon battleaxe, a dragon defender and a slayer helm of any kind.",
					"Warriors' guild",
					WARRIORS_GUILD_BANK_29047,
					new WorldPoint(2843, 3543, 0),
					DOUBLE_AGENT_141,
					PUSH_UP,
					EmoteClueItem.DRAGON_BATTLEAXE,
					EmoteClueItem.ANY_DRAGON_DEFENDER,
					EmoteClueItem.ANY_SLAYER_HELMET
			),
			new EmoteClue(
					Master,
					"Blow a raspberry in the bank of the Warriors' Guild. Beware of double agents! Equip a dragon battleaxe, a slayer helm of any kind and a dragon defender or avernic defender.",
					"Warriors' guild",
					WARRIORS_GUILD_BANK_29047,
					new WorldPoint(2843, 3543, 0),
					DOUBLE_AGENT_141,
					RASPBERRY,
					EmoteClueItem.DRAGON_BATTLEAXE,
					EmoteClueItem.ANY_DRAGON_OR_AVERNIC_DEFENDER,
					EmoteClueItem.ANY_SLAYER_HELMET
			),
			new EmoteClue(Easy,
					"Blow a raspberry at the monkey cage in Ardougne Zoo. Equip a studded leather body, bronze platelegs and a normal staff with no orb.",
					"Ardougne Zoo",
					NEAR_THE_PARROTS_IN_ARDOUGNE_ZOO,
					new WorldPoint(2607, 3282, 0),
					RASPBERRY,
					EmoteClueItem.STUDDED_BODY,
					EmoteClueItem.BRONZE_PLATELEGS,
					EmoteClueItem.STAFF
			),
			new EmoteClue(Easy,
					"Blow raspberries outside the entrance to Keep Le Faye. Equip a coif, an iron platebody and leather gloves.",
					"Keep Le Faye",
					OUTSIDE_KEEP_LE_FAYE,
					new WorldPoint(2757, 3401, 0),
					RASPBERRY,
					EmoteClueItem.COIF,
					EmoteClueItem.IRON_PLATEBODY,
					EmoteClueItem.LEATHER_GLOVES
			),
			new EmoteClue(Hard,
					"Blow a raspberry in the Fishing Guild bank. Beware of double agents! Equip an elemental shield, blue dragonhide chaps and a rune warhammer.",
					"Fishing Guild",
					FISHING_GUILD_BANK,
					new WorldPoint(2588, 3419, 0),
					DOUBLE_AGENT_108,
					RASPBERRY,
					EmoteClueItem.ELEMENTAL_SHIELD,
					EmoteClueItem.BLUE_DHIDE_CHAPS,
					EmoteClueItem.RUNE_WARHAMMER
			),
			new EmoteClue(Hard,
					"Salute in the banana plantation. Beware of double agents! Equip a diamond ring, amulet of power, and nothing on your chest and legs.",
					"Karamja",
					WEST_SIDE_OF_THE_KARAMJA_BANANA_PLANTATION,
					new WorldPoint(2914, 3168, 0),
					DOUBLE_AGENT_108,
					SALUTE,
					EmoteClueItem.DIAMOND_RING,
					EmoteClueItem.AMULET_OF_POWER,
					emptySlot("Nothing on chest & legs", BODY, LEGS)
			),
			new EmoteClue(Elite,
					"Salute in the Warriors' guild bank. Equip only a black salamander.",
					"Warriors' guild",
					WARRIORS_GUILD_BANK,
					new WorldPoint(2844, 3542, 0),
					SALUTE,
					EmoteClueItem.BLACK_SALAMANDER,
					emptySlot("Nothing else", HEAD, CAPE, AMULET, BODY, SHIELD, LEGS, GLOVES, BOOTS, RING, AMMO)
			),
			new EmoteClue(Hard,
					"Salute in the centre of the mess hall. Beware of double agents! Equip a rune halberd rune platebody, and an amulet of strength.",
					"Hosidius mess hall",
					HOSIDIUS_MESS,
					new WorldPoint(1646, 3631, 0),
					DOUBLE_AGENT_108,
					SALUTE,
					EmoteClueItem.RUNE_HALBERD,
					EmoteClueItem.RUNE_PLATEBODY,
					EmoteClueItem.AMULET_OF_STRENGTH
			),
			new EmoteClue(Easy,
					"Shrug in the mine near Rimmington. Equip a gold necklace, a gold ring and a bronze spear.",
					"Rimmington mine",
					RIMMINGTON_MINE,
					new WorldPoint(2976, 3238, 0),
					SHRUG,
					EmoteClueItem.GOLD_NECKLACE,
					EmoteClueItem.GOLD_RING,
					EmoteClueItem.BRONZE_SPEAR
			),
			new EmoteClue(Medium,
					"Shrug in Catherby bank. Yawn before you talk to me. Equip a maple longbow, green d'hide chaps and an iron med helm.",
					"Catherby",
					OUTSIDE_CATHERBY_BANK,
					new WorldPoint(2808, 3440, 0),
					SHRUG,
					YAWN,
					EmoteClueItem.MAPLE_LONGBOW,
					EmoteClueItem.GREEN_DHIDE_CHAPS,
					EmoteClueItem.IRON_MED_HELM
			),
			new EmoteClue(Hard,
					"Shrug in the Zamorak temple found in the Eastern Wilderness. Beware of double agents! Equip rune platelegs, an iron platebody and blue dragonhide vambraces.",
					"Chaos temple (east of Ferox Enclave)",
					EAST_OF_THE_LEVEL_19_WILDERNESS_OBELISK,
					new WorldPoint(3239, 3611, 0),
					DOUBLE_AGENT_65,
					SHRUG,
					EmoteClueItem.RUNE_PLATELEGS,
					EmoteClueItem.IRON_PLATEBODY,
					EmoteClueItem.BLUE_DHIDE_VAMBRACES
			),
			new EmoteClue(Elite,
					"Shrug in the Shayzien war tent. Equip a blue mystic robe bottom, a rune kiteshield and any bob shirt.",
					"Shayzien war tent",
					SHAYZIEN_WAR_TENT,
					new WorldPoint(1487, 3635, 0),
					SHRUG,
					EmoteClueItem.MYSTIC_ROBE_BOTTOM,
					EmoteClueItem.RUNE_KITESHIELD,
					EmoteClueItem.ANY_BOBS_SHIRT
			),
			new EmoteClue(Master,
					"Slap your head in the centre of the Kourend catacombs. Beware of double agents! Equip the arclight and the amulet of the damned.",
					"Kourend catacombs",
					CENTRE_OF_THE_CATACOMBS_OF_KOUREND,
					new WorldPoint(1663, 10045, 0),
					DOUBLE_AGENT_141,
					SLAP_HEAD,
					EmoteClueItem.ARCLIGHT,
					EmoteClueItem.ANY_AMULET_OF_THE_DAMNED
			),
			new EmoteClue(Easy,
					"Spin at the crossroads north of Rimmington. Equip a green gnome hat, cream gnome top and leather chaps.",
					"Rimmington",
					ROAD_JUNCTION_NORTH_OF_RIMMINGTON,
					new WorldPoint(2981, 3276, 0),
					SPIN,
					EmoteClueItem.GREEN_HAT,
					EmoteClueItem.CREAM_ROBE_TOP,
					EmoteClueItem.LEATHER_CHAPS
			),
			new EmoteClue(Easy,
					"Spin in Draynor Manor by the fountain. Equip an iron platebody, studded leather chaps and a bronze full helmet.",
					"Draynor Manor",
					DRAYNOR_MANOR_BY_THE_FOUNTAIN,
					new WorldPoint(3088, 3336, 0),
					SPIN,
					EmoteClueItem.IRON_PLATEBODY,
					EmoteClueItem.STUDDED_CHAPS,
					EmoteClueItem.BRONZE_FULL_HELM
			),
			new EmoteClue(Master,
					"Spin in front of the Soul altar. Beware of double agents! Equip a dragon pickaxe, helm of neitiznot and a pair of rune boots.",
					"Soul altar",
					SOUL_ALTAR,
					new WorldPoint(1815, 3856, 0),
					DOUBLE_AGENT_141,
					SPIN,
					EmoteClueItem.ANY_DRAGON_OR_CRYSTAL_PICKAXE,
					EmoteClueItem.HELM_OF_NEITIZNOT,
					EmoteClueItem.RUNE_BOOTS
			),
			new EmoteClue(Easy,
					"Spin in the Varrock Castle courtyard. Equip a black axe, a coif and a ruby ring.",
					"Varrock Castle",
					OUTSIDE_VARROCK_PALACE_COURTYARD,
					new WorldPoint(3213, 3463, 0),
					SPIN,
					EmoteClueItem.BLACK_AXE,
					EmoteClueItem.COIF,
					EmoteClueItem.RUBY_RING
			),
			new EmoteClue(Elite,
					"Spin in West Ardougne Church. Equip a dragon spear and red dragonhide chaps.",
					"West Ardougne Church",
					CHAPEL_IN_WEST_ARDOUGNE,
					new WorldPoint(2530, 3290, 0),
					SPIN,
					EmoteClueItem.DRAGON_SPEAR,
					EmoteClueItem.RED_DHIDE_CHAPS
			),
			new EmoteClue(Medium,
					"Spin on the bridge by the Barbarian Village. Salute before you talk to me. Equip purple gloves, a steel kiteshield and a mithril full helmet.",
					"Barbarian Village",
					EAST_OF_THE_BARBARIAN_VILLAGE_BRIDGE,
					new WorldPoint(3105, 3420, 0),
					SPIN,
					SALUTE,
					EmoteClueItem.PURPLE_GLOVES,
					EmoteClueItem.STEEL_KITESHIELD,
					EmoteClueItem.MITHRIL_FULL_HELM
			),
			new EmoteClue(Master,
					"Stamp in the Enchanted valley west of the waterfall. Beware of double agents! Equip a dragon axe.",
					"Enchanted Valley (BKQ)",
					NORTHWESTERN_CORNER_OF_THE_ENCHANTED_VALLEY,
					new WorldPoint(3030, 4522, 0),
					DOUBLE_AGENT_141,
					STAMP,
					EmoteClueItem.ANY_DRAGON_OR_CRYSTAL_AXE
			),
			new EmoteClue(Easy,
					"Think in middle of the wheat field by the Lumbridge mill. Equip a blue gnome robetop, a turquoise gnome robe bottom and an oak shortbow.",
					"Lumbridge mill",
					WHEAT_FIELD_NEAR_THE_LUMBRIDGE_WINDMILL,
					new WorldPoint(3159, 3298, 0),
					THINK,
					EmoteClueItem.BLUE_ROBE_TOP,
					EmoteClueItem.TURQUOISE_ROBE_BOTTOMS,
					EmoteClueItem.OAK_SHORTBOW
			),
			new EmoteClue(Medium,
					"Think in the centre of the Observatory. Spin before you talk to me. Equip a mithril chain body, green dragonhide chaps and a ruby amulet.",
					"Observatory",
					OBSERVATORY,
					new WorldPoint(2439, 3161, 0),
					THINK,
					SPIN,
					EmoteClueItem.MITHRIL_CHAINBODY,
					EmoteClueItem.GREEN_DHIDE_CHAPS,
					EmoteClueItem.RUBY_AMULET
			),
			new EmoteClue(Easy,
					"Wave along the south fence of the Lumber Yard. Equip a hard leather body, leather chaps and a bronze axe.",
					"Lumber Yard",
					NEAR_THE_SAWMILL_OPERATORS_BOOTH,
					new WorldPoint(3307, 3491, 0),
					WAVE,
					EmoteClueItem.HARDLEATHER_BODY,
					EmoteClueItem.LEATHER_CHAPS,
					EmoteClueItem.BRONZE_AXE
			),
			new EmoteClue(Easy,
					"Wave in the Falador gem store. Equip a Mithril pickaxe, Black platebody and an Iron Kiteshield.",
					"Falador",
					NEAR_HERQUINS_SHOP_IN_FALADOR,
					new WorldPoint(2945, 3335, 0),
					WAVE,
					EmoteClueItem.MITHRIL_PICKAXE,
					EmoteClueItem.BLACK_PLATEBODY,
					EmoteClueItem.IRON_KITESHIELD
			),
			new EmoteClue(Easy,
					"Wave on Mudskipper Point. Equip a black cape, leather chaps and a steel mace.",
					"Mudskipper Point (AIQ)",
					MUDSKIPPER_POINT,
					new WorldPoint(2989, 3110, 0),
					WAVE,
					EmoteClueItem.BLACK_CAPE,
					EmoteClueItem.LEATHER_CHAPS,
					EmoteClueItem.STEEL_MACE
			),
			new EmoteClue(Master,
					"Wave on the northern wall of Castle Drakan. Beware of double agents! Wear a dragon sq shield, splitbark body and any boater.",
					"Castle Drakan",
					NORTHERN_WALL_OF_CASTLE_DRAKAN,
					new WorldPoint(3562, 3379, 0),
					DOUBLE_AGENT_141,
					WAVE,
					EmoteClueItem.ANY_DRAGON_SQ_SHIELD,
					EmoteClueItem.SPLITBARK_BODY,
					EmoteClueItem.ANY_BOATER
			),
			new EmoteClue(Master,
					"Yawn in the 7th room of Pyramid Plunder. Beware of double agents! Equip a pharaoh sceptre and a full set of menaphite robes.",
					"Pyramid Plunder",
					_7TH_CHAMBER_OF_JALSAVRAH,
					new WorldPoint(1944, 4427, 0),
					DOUBLE_AGENT_141,
					YAWN,
					EmoteClueItem.ANY_PHARAOHS_SCEPTRE,
					EmoteClueItem.ANY_MENAPHITE_SET
			),
			new EmoteClue(Easy,
					"Yawn in the Varrock library. Equip a green gnome robe top, HAM robe bottom and an iron warhammer.",
					"Varrock Castle",
					VARROCK_PALACE_LIBRARY,
					new WorldPoint(3209, 3492, 0),
					YAWN,
					EmoteClueItem.GREEN_ROBE_TOP,
					EmoteClueItem.HAM_ROBE,
					EmoteClueItem.IRON_WARHAMMER
			),
			new EmoteClue(Easy,
					"Yawn in Draynor Marketplace. Equip studded leather chaps, an iron kiteshield and a steel longsword.",
					"Draynor",
					DRAYNOR_VILLAGE_MARKET,
					new WorldPoint(3083, 3253, 0),
					YAWN,
					EmoteClueItem.STUDDED_CHAPS,
					EmoteClueItem.IRON_KITESHIELD,
					EmoteClueItem.STEEL_LONGSWORD
			),
			new EmoteClue(Medium,
					"Yawn in the Castle Wars lobby. Shrug before you talk to me. Equip a ruby amulet, a mithril scimitar and a Wilderness cape.",
					"Castle Wars",
					CASTLE_WARS_BANK,
					new WorldPoint(2440, 3092, 0),
					YAWN,
					SHRUG,
					EmoteClueItem.RUBY_AMULET,
					EmoteClueItem.MITHRIL_SCIMITAR,
					EmoteClueItem.ANY_TEAM_CAPE
			),
			new EmoteClue(Hard,
					"Yawn in the rogues' general store. Beware of double agents! Equip an adamant square shield, blue dragon vambraces and a rune pickaxe.",
					"Rogues general store",
					NOTERAZZOS_SHOP_IN_THE_WILDERNESS,
					new WorldPoint(3026, 3701, 0),
					DOUBLE_AGENT_65,
					YAWN,
					EmoteClueItem.ADAMANT_SQ_SHIELD,
					EmoteClueItem.BLUE_DHIDE_VAMBRACES,
					EmoteClueItem.RUNE_PICKAXE
			),
			new EmoteClue(Elite,
					"Yawn at the top of Trollheim. Equip a lava battlestaff, black dragonhide vambraces and a mind shield.",
					"Trollheim Mountain",
					ON_TOP_OF_TROLLHEIM_MOUNTAIN,
					new WorldPoint(2887, 3676, 0),
					YAWN,
					EmoteClueItem.ANY_LAVA_BATTLESTAFF,
					EmoteClueItem.BLACK_DHIDE_VAMBRACES,
					EmoteClueItem.MIND_SHIELD
			),
			new EmoteClue(Medium,
					"Yawn in the centre of the Arceuus Library. Nod your head before you talk to me. Equip blue dragonhide vambraces, adamant boots and an adamant dagger.",
					"Arceuus library",
					ENTRANCE_OF_THE_ARCEUUS_LIBRARY,
					new WorldPoint(1632, 3807, 0),
					YAWN,
					YES,
					EmoteClueItem.BLUE_DHIDE_VAMBRACES,
					EmoteClueItem.ADAMANT_BOOTS,
					EmoteClueItem.ADAMANT_DAGGER
			),
			new EmoteClue(Easy,
					"Yawn in the Fortis Grand Museum. Equip an emerald necklace, blue skirt, and turqoise gnome robe top.",
					"Fortis Grand Museum",
					FORTIS_GRAND_MUSEUM,
					new WorldPoint(1712, 3163, 0),
					YAWN,
					EmoteClueItem.EMERALD_NECKLACE,
					EmoteClueItem.BLUE_SKIRT,
					EmoteClueItem.TURQUOISE_ROBE_TOP
			),
			new EmoteClue(Master,
					"Swing a bullroarer at the top of the Watchtower. Beware of double agents! Equip a dragon plateskirt, climbing boots and a dragon chainbody.",
					"Yanille Watchtower",
					TOP_FLOOR_OF_THE_YANILLE_WATCHTOWER,
					new WorldPoint(2930, 4717, 2),
					DOUBLE_AGENT_141,
					BULL_ROARER,
					EmoteClueItem.ANY_DRAGON_PLATESKIRT,
					EmoteClueItem.CLIMBING_BOOTS,
					EmoteClueItem.ANY_DRAGON_CHAINBODY,
					EmoteClueItem.BULL_ROARER
			),
			new EmoteClue(Beginner,
					"Blow a raspberry at Gypsy Aris in her tent. Equip a gold ring and a gold necklace.",
					"Varrock",
					GYPSY_TENT_ENTRANCE,
					new WorldPoint(3203, 3424, 0),
					RASPBERRY,
					EmoteClueItem.GOLD_RING,
					EmoteClueItem.GOLD_NECKLACE
			),
			new EmoteClue(Beginner,
					"Bow to Brugsen Bursen at the Grand Exchange.",
					"Grand Exchange",
					null,
					new WorldPoint(3164, 3477, 0), BOW),
			new EmoteClue(Beginner,
					"Cheer at Iffie Nitter. Equip a chef hat and a red cape.",
					"Varrock",
					FINE_CLOTHES_ENTRANCE,
					new WorldPoint(3205, 3416, 0),
					CHEER,
					EmoteClueItem.CHEFS_HAT,
					EmoteClueItem.RED_CAPE
			),
			new EmoteClue(Beginner,
					"Clap at Bob's Brilliant Axes. Equip a bronze axe and leather boots.",
					"Lumbridge",
					BOB_AXES_ENTRANCE,
					new WorldPoint(3231, 3203, 0),
					CLAP,
					EmoteClueItem.BRONZE_AXE,
					EmoteClueItem.LEATHER_BOOTS
			),
			new EmoteClue(Beginner,
					"Panic at Al Kharid mine.",
					"Al Kharid mine",
					null,
					new WorldPoint(3303, 3271, 0),
					PANIC),
			new EmoteClue(Beginner,
					"Spin at Flynn's Mace Shop.",
					"Falador",
					null,
					new WorldPoint(2950, 3387, 0),
					SPIN),
			new EmoteClue(Hard,
				"Panic outside the Twilight Temple. Beware of double agents! Equip a rune longsword, rune platebody and a rune plateskirt.",
				"Twilight Temple",
				TWILIGHT_TEMPLE,
				new WorldPoint(1694, 3247, 0),
				DOUBLE_AGENT_108,
				PANIC,
				EmoteClueItem.RUNE_LONGSWORD,
				EmoteClueItem.RUNE_PLATEBODY,
				EmoteClueItem.RUNE_PLATESKIRT
			),
			new EmoteClue(Master,
				"Think on the western coast of Salvager Overlook. Beware of double agents! Equip a Hueycoatl hide coif and some Hueycoatl hide vambraces.",
				"Salvager Overlook",
				SALVAGER_OVERLOOK,
				new WorldPoint(1610, 3302, 0),
				DOUBLE_AGENT_141,
				THINK,
				EmoteClueItem.HUEYCOATL_HIDE_COIF,
				EmoteClueItem.HUEYCOATL_HIDE_VAMBRACES
			),
			new EmoteClue(
					Elite,
					"Salute by the Charcoal Burners. Equip a Farmer's strawhat, Shayzien platebody (5) and Pyromancer robes.",
					"Charcoal Burners",
					CHARCOAL_BURNERS,
					new WorldPoint(1714, 3467, 0),
					SALUTE,
					EmoteClueItem.ANY_FARMERS_STRAWHAT,
					EmoteClueItem.SHAYZIEN_BODY_5,
					EmoteClueItem.PYROMANCER_ROBE
			)
	);

	private static final String UNICODE_CHECK_MARK = "\u2713";
	private static final String UNICODE_BALLOT_X = "\u2717";

	private final EmoteClueDifficulty emoteClueDifficulty;

	private final String text;
	private final String locationName;
	private final StashUnit stashUnit;
	private final WorldPoint location;
	private final Emote firstEmote;
	private final Emote secondEmote;
	private final ItemRequirement[] itemRequirements;

	private final Enemy enemy;
	@Varbit
	private final int hasFirePit;

	private EmoteClue(
			final EmoteClueDifficulty emoteClueDifficulty, final String text, final String locationName, final StashUnit stashUnit, final WorldPoint location, final Emote firstEmote,
			final ItemRequirement... itemRequirements)
	{
		this(emoteClueDifficulty, text, locationName, stashUnit, location, firstEmote, null, null, -1, itemRequirements);
	}

	private EmoteClue(
			final EmoteClueDifficulty emoteClueDifficulty, final String text, final String locationName, final StashUnit stashUnit, final WorldPoint location, final Emote firstEmote,
			final Emote secondEmote, final ItemRequirement... itemRequirements)
	{
		this(emoteClueDifficulty, text, locationName, stashUnit, location, firstEmote, secondEmote, null, -1, itemRequirements);
	}

	private EmoteClue(
			final EmoteClueDifficulty emoteClueDifficulty, final String text, final String locationName, final StashUnit stashUnit, final WorldPoint location, final Enemy enemy,
			final Emote firstEmote, final ItemRequirement... itemRequirements)
	{
		this(emoteClueDifficulty, text, locationName, stashUnit, location, firstEmote, null, enemy, -1, itemRequirements);
	}

	private EmoteClue(
			final EmoteClueDifficulty emoteClueDifficulty, final String text, final String locationName, final StashUnit stashUnit, final WorldPoint location, final Emote firstEmote,
			final Emote secondEmote,
			@Varbit
			final int firePit, final ItemRequirement... itemRequirements)
	{
		this(emoteClueDifficulty, text, locationName, stashUnit, location, firstEmote, secondEmote, null, firePit, itemRequirements);
	}

	private EmoteClue(
			final EmoteClueDifficulty emoteClueDifficulty, final String text, final String locationName, final StashUnit stashUnit, final WorldPoint location, final Emote firstEmote,
			final Emote secondEmote, final Enemy enemy,
			@Varbit
			final int hasFirePit, final ItemRequirement... itemRequirements)
	{
		this.emoteClueDifficulty = emoteClueDifficulty;
		this.text = text;
		this.locationName = locationName;
		this.stashUnit = stashUnit;
		this.location = location;
		this.firstEmote = firstEmote;
		this.secondEmote = secondEmote;
		this.itemRequirements = itemRequirements;
		this.enemy = enemy;
		this.hasFirePit = hasFirePit;
	}

	@Override
	public WorldPoint getLocation(ClueScrollPlugin plugin) {
		return location;
	}
}

package com.larsvansoest.runelite.clueitems.data;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.client.plugins.cluescrolls.clues.emote.STASHUnit;

/**
 * Contains and wraps all {@link net.runelite.client.plugins.cluescrolls.clues.emote.STASHUnit} used by {@link net.runelite.client.plugins.cluescrolls.clues.EmoteClue}, integrated in vendored {@link com.larsvansoest.runelite.clueitems.data.EmoteClue} class.
 * <p>
 * Source https://github.com/runelite/runelite/blob/master/runelite-client/src/main/java/net/runelite/client/plugins/cluescrolls/clues/emote/STASHUnit.java
 * </p>
 * <p>
 * Maintained up to 2253b25.
 * </p>
 *
 * @author Lars van Soest
 * @since 3.0.0
 */
@Getter
public enum StashUnit
{
	NEAR_A_SHED_IN_LUMBRIDGE_SWAMP("Lumbridge Swamp Shed", STASHUnit.NEAR_A_SHED_IN_LUMBRIDGE_SWAMP, Type.Hole),
	ON_THE_BRIDGE_TO_THE_MISTHALIN_WIZARDS_TOWER("Misthalin Wizards Tower", STASHUnit.ON_THE_BRIDGE_TO_THE_MISTHALIN_WIZARDS_TOWER, Type.Crate),
	DRAYNOR_VILLAGE_MARKET("Draynor Village Market", STASHUnit.DRAYNOR_VILLAGE_MARKET, Type.Hole),
	LIMESTONE_MINE("Limestone Mine", STASHUnit.LIMESTONE_MINE, Type.Rock),
	OUTSIDE_THE_LEGENDS_GUILD_GATES("Legends Guild", STASHUnit.OUTSIDE_THE_LEGENDS_GUILD_GATES, Type.Bush),
	MUDSKIPPER_POINT("Mudskipper Point", STASHUnit.MUDSKIPPER_POINT, Type.Hole),
	NEAR_THE_ENTRANA_FERRY_IN_PORT_SARIM("Port Sarim Entrana Ferry", STASHUnit.NEAR_THE_ENTRANA_FERRY_IN_PORT_SARIM, Type.Crate),
	AL_KHARID_SCORPION_MINE("Al Kharid Scorpion Mine", STASHUnit.AL_KHARID_SCORPION_MINE, Type.Rock),
	DRAYNOR_MANOR_BY_THE_FOUNTAIN("Draynor Manor Fountain", STASHUnit.DRAYNOR_MANOR_BY_THE_FOUNTAIN, Type.Rock),
	WHEAT_FIELD_NEAR_THE_LUMBRIDGE_WINDMILL("Lumbridge Windmill Wheat Field", STASHUnit.WHEAT_FIELD_NEAR_THE_LUMBRIDGE_WINDMILL, Type.Hole),
	CROSSROADS_NORTH_OF_DRAYNOR_VILLAGE("Draynor Village Crossroads", STASHUnit.CROSSROADS_NORTH_OF_DRAYNOR_VILLAGE, Type.Bush),
	RIMMINGTON_MINE("Rimmington Mine", STASHUnit.RIMMINGTON_MINE, Type.Rock),
	VARROCK_PALACE_LIBRARY("Varrock Palace Library", STASHUnit.VARROCK_PALACE_LIBRARY, Type.Crate),
	UPSTAIRS_IN_THE_ARDOUGNE_WINDMILL("Ardougne Windmill", STASHUnit.UPSTAIRS_IN_THE_ARDOUGNE_WINDMILL, Type.Crate),
	OUTSIDE_THE_FALADOR_PARTY_ROOM("Falador Party Room", STASHUnit.OUTSIDE_THE_FALADOR_PARTY_ROOM, Type.Bush),
	TAVERLEY_STONE_CIRCLE("Taverley Stone Circle", STASHUnit.TAVERLEY_STONE_CIRCLE, Type.Rock),
	CATHERBY_BEEHIVE_FIELD("Catherby Beehive Field", STASHUnit.CATHERBY_BEEHIVE_FIELD, Type.Bush),
	NEAR_THE_PARROTS_IN_ARDOUGNE_ZOO("Ardougne Zoo Parrots", STASHUnit.NEAR_THE_PARROTS_IN_ARDOUGNE_ZOO, Type.Bush),
	ROAD_JUNCTION_NORTH_OF_RIMMINGTON("Rimmington Road Junction", STASHUnit.ROAD_JUNCTION_NORTH_OF_RIMMINGTON, Type.Rock),
	OUTSIDE_THE_FISHING_GUILD("Fishing Guild (Outside)", STASHUnit.OUTSIDE_THE_FISHING_GUILD, Type.Hole),
	OUTSIDE_KEEP_LE_FAYE("Keep Le Faye", STASHUnit.OUTSIDE_KEEP_LE_FAYE, Type.Rock),
	ROAD_JUNCTION_SOUTH_OF_SINCLAIR_MANSION("Sinclaire Mansion Junction", STASHUnit.ROAD_JUNCTION_SOUTH_OF_SINCLAIR_MANSION, Type.Rock),
	OUTSIDE_THE_DIGSITE_EXAM_CENTRE("Digsite Exam Centre", STASHUnit.OUTSIDE_THE_DIGSITE_EXAM_CENTRE, Type.Bush),
	NEAR_THE_SAWMILL_OPERATORS_BOOTH("Sawmill Operators Booth", STASHUnit.NEAR_THE_SAWMILL_OPERATORS_BOOTH, Type.Bush),
	EMIRS_ARENA_TICKET_OFFICE("Emir's Arena Ticket Office", "Mubariz's room at Emir's Arena", STASHUnit.EMIRS_ARENA_TICKET_OFFICE, Type.Crate),
	OUTSIDE_VARROCK_PALACE_COURTYARD("Varrock Palace Courtyard", STASHUnit.OUTSIDE_VARROCK_PALACE_COURTYARD, Type.Bush),
	NEAR_HERQUINS_SHOP_IN_FALADOR("Falador Herquins Shop", STASHUnit.NEAR_HERQUINS_SHOP_IN_FALADOR, Type.Bush),
	SOUTH_OF_THE_GRAND_EXCHANGE("Varrock Grand Exchange", STASHUnit.SOUTH_OF_THE_GRAND_EXCHANGE, Type.Bush),
	AUBURYS_SHOP_IN_VARROCK("Varrock Aubury's Shop", STASHUnit.AUBURYS_SHOP_IN_VARROCK, Type.Crate),
	CENTRE_OF_CANIFIS("Canifis", STASHUnit.CENTRE_OF_CANIFIS, Type.Rock),
	MAUSOLEUM_OFF_THE_MORYTANIA_COAST("Morytania Coast Mausoleum", STASHUnit.MAUSOLEUM_OFF_THE_MORYTANIA_COAST, Type.Hole),
	EAST_OF_THE_BARBARIAN_VILLAGE_BRIDGE("Barbarian Village Bridge", STASHUnit.EAST_OF_THE_BARBARIAN_VILLAGE_BRIDGE, Type.Bush),
	SOUTH_OF_THE_SHRINE_IN_TAI_BWO_WANNAI_VILLAGE("Tai Bwo Wannai Shrine", STASHUnit.SOUTH_OF_THE_SHRINE_IN_TAI_BWO_WANNAI_VILLAGE, Type.Crate),
	CASTLE_WARS_BANK("Castle Wars Bank", STASHUnit.CASTLE_WARS_BANK, Type.Crate),
	BARBARIAN_OUTPOST_OBSTACLE_COURSE("Barbarian Outpost Course", "Barbarian Outpost obstacle course", STASHUnit.BARBARIAN_OUTPOST_OBSTACLE_COURSE, Type.Bush),
	GNOME_STRONGHOLD_BALANCING_ROPE("Gnome Stronghold Rope", STASHUnit.GNOME_STRONGHOLD_BALANCING_ROPE, Type.Crate),
	OUTSIDE_YANILLE_BANK("Yanille Bank", STASHUnit.OUTSIDE_YANILLE_BANK, Type.Rock),
	OBSERVATORY("Observatory", STASHUnit.OBSERVATORY, Type.Crate),
	OGRE_CAGE_IN_KING_LATHAS_TRAINING_CAMP("Lathas Camp Ogre Cage", "Ogre cage in the Ardougne Training Camp", STASHUnit.OGRE_CAGE_IN_KING_LATHAS_TRAINING_CAMP, Type.Hole),
	DIGSITE("Digsite", STASHUnit.DIGSITE, Type.Rock),
	HICKTONS_ARCHERY_EMPORIUM("Hickton's Archery Emporium", STASHUnit.HICKTONS_ARCHERY_EMPORIUM, Type.Crate),
	SHANTAY_PASS("Shantay Pass", STASHUnit.SHANTAY_PASS, Type.Crate),
	LUMBRIDGE_SWAMP_CAVES("Lumbridge Swamp Caves", STASHUnit.LUMBRIDGE_SWAMP_CAVES, Type.Rock),
	OUTSIDE_CATHERBY_BANK("Catherby Bank", STASHUnit.OUTSIDE_CATHERBY_BANK, Type.Bush),
	OUTSIDE_THE_SEERS_VILLAGE_COURTHOUSE("Seers Village Courthouse", STASHUnit.OUTSIDE_THE_SEERS_VILLAGE_COURTHOUSE, Type.Bush),
	OUTSIDE_HARRYS_FISHING_SHOP_IN_CATHERBY("Catherby Harry's Fishing Shop", STASHUnit.OUTSIDE_HARRYS_FISHING_SHOP_IN_CATHERBY, Type.Bush),
	TZHAAR_WEAPONS_STORE("TzHaar Weapons Store", STASHUnit.TZHAAR_WEAPONS_STORE, Type.Hole),
	NORTH_OF_EVIL_DAVES_HOUSE_IN_EDGEVILLE("Edgeville Evil Dave's House", STASHUnit.NORTH_OF_EVIL_DAVES_HOUSE_IN_EDGEVILLE, Type.Bush),
	WEST_OF_THE_SHAYZIEN_COMBAT_RING("Shayzien Combat Ring", "North of the Shayzien combat ring", STASHUnit.WEST_OF_THE_SHAYZIEN_COMBAT_RING, Type.Crate),
	ENTRANCE_OF_THE_ARCEUUS_LIBRARY("Arceuus Library", STASHUnit.ENTRANCE_OF_THE_ARCEUUS_LIBRARY, Type.Crate),
	OUTSIDE_DRAYNOR_VILLAGE_JAIL("Draynor Village Jail", STASHUnit.OUTSIDE_DRAYNOR_VILLAGE_JAIL, Type.Bush),
	FISHING_GUILD_BANK("Fishing Guild Bank", STASHUnit.FISHING_GUILD_BANK, Type.Crate),
	TOP_FLOOR_OF_THE_LIGHTHOUSE("Lighthouse Top Floor", STASHUnit.TOP_FLOOR_OF_THE_LIGHTHOUSE, Type.Crate),
	OUTSIDE_THE_GREAT_PYRAMID_OF_SOPHANEM("Great Pyramid of Sophanem", STASHUnit.OUTSIDE_THE_GREAT_PYRAMID_OF_SOPHANEM, Type.Hole),
	NOTERAZZOS_SHOP_IN_THE_WILDERNESS("Wilderness Noterazzo's Shop", STASHUnit.NOTERAZZOS_SHOP_IN_THE_WILDERNESS, Type.Hole),
	WEST_SIDE_OF_THE_KARAMJA_BANANA_PLANTATION("Karamja Banana Plantation", STASHUnit.WEST_SIDE_OF_THE_KARAMJA_BANANA_PLANTATION, Type.Crate),
	MOUNTAIN_CAMP_GOAT_ENCLOSURE("Mountain Camp Goat Enclosure", STASHUnit.MOUNTAIN_CAMP_GOAT_ENCLOSURE, Type.Rock),
	GNOME_GLIDER_ON_WHITE_WOLF_MOUNTAIN("White Wolf Mountain Glider", STASHUnit.GNOME_GLIDER_ON_WHITE_WOLF_MOUNTAIN, Type.Hole),
	SHILO_VILLAGE_BANK("Shilo Village Bank", STASHUnit.SHILO_VILLAGE_BANK, Type.Crate),
	INSIDE_THE_DIGSITE_EXAM_CENTRE("Digsite Exam Centre", STASHUnit.INSIDE_THE_DIGSITE_EXAM_CENTRE, Type.Crate),
	NORTHEAST_CORNER_OF_THE_KHARAZI_JUNGLE("Kharazi Jungle", STASHUnit.NORTHEAST_CORNER_OF_THE_KHARAZI_JUNGLE, Type.Hole),
	VOLCANO_IN_THE_NORTHEASTERN_WILDERNESS("Wilderness Volcano", STASHUnit.VOLCANO_IN_THE_NORTHEASTERN_WILDERNESS, Type.Rock),
	IN_THE_MIDDLE_OF_JIGGIG("Jiggig", STASHUnit.IN_THE_MIDDLE_OF_JIGGIG, Type.Rock),
	AGILITY_PYRAMID("Agility Pyramid", "Agility Pyramid", STASHUnit.AGILITY_PYRAMID, Type.Hole),
	HOSIDIUS_MESS("Hosidius Mess", STASHUnit.HOSIDIUS_MESS, Type.Crate),
	CHAPEL_IN_WEST_ARDOUGNE("West Ardougne Chapel", STASHUnit.CHAPEL_IN_WEST_ARDOUGNE, Type.Crate),
	NEAR_A_RUNITE_ROCK_IN_THE_FREMENNIK_ISLES("Fremennik Isles Runite Rock", STASHUnit.NEAR_A_RUNITE_ROCK_IN_THE_FREMENNIK_ISLES, Type.Rock),
	NEAR_A_LADDER_IN_THE_WILDERNESS_LAVA_MAZE("Wilderness Lava Maze", STASHUnit.NEAR_A_LADDER_IN_THE_WILDERNESS_LAVA_MAZE, Type.Rock),
	ENTRANCE_OF_THE_CAVE_OF_DAMIS("Cave of Damis", STASHUnit.ENTRANCE_OF_THE_CAVE_OF_DAMIS, Type.Hole),
	WARRIORS_GUILD_BANK("Warriors Guild Bank", STASHUnit.WARRIORS_GUILD_BANK, Type.Hole),
	SOUTHEAST_CORNER_OF_THE_MONASTERY("Monastery", STASHUnit.SOUTHEAST_CORNER_OF_THE_MONASTERY, Type.Crate),
	SOUTHEAST_CORNER_OF_THE_FISHING_PLATFORM("Fishing Platform", STASHUnit.SOUTHEAST_CORNER_OF_THE_FISHING_PLATFORM, Type.Crate),
	OUTSIDE_THE_SLAYER_TOWER_GARGOYLE_ROOM("Slayer Tower Gargoyle Room", STASHUnit.OUTSIDE_THE_SLAYER_TOWER_GARGOYLE_ROOM, Type.Crate),
	ON_TOP_OF_TROLLHEIM_MOUNTAIN("Trollheim Mountain (top)", STASHUnit.ON_TOP_OF_TROLLHEIM_MOUNTAIN, Type.Rock),
	FOUNTAIN_OF_HEROES("Fountain of Heroes", STASHUnit.FOUNTAIN_OF_HEROES, Type.Hole),
	ENTRANCE_OF_THE_CAVERN_UNDER_THE_WHIRLPOOL("Whirlpool Cavern", STASHUnit.ENTRANCE_OF_THE_CAVERN_UNDER_THE_WHIRLPOOL, Type.Rock),
	HALFWAY_DOWN_TROLLWEISS_MOUNTAIN("Trollheim Mountain (half-way)", STASHUnit.HALFWAY_DOWN_TROLLWEISS_MOUNTAIN, Type.Rock),
	SHAYZIEN_WAR_TENT("Shayzien War Tent", STASHUnit.SHAYZIEN_WAR_TENT, Type.Crate),
	OUTSIDE_THE_LEGENDS_GUILD_DOOR("Legends Guild Door", STASHUnit.OUTSIDE_THE_LEGENDS_GUILD_DOOR, Type.Bush),
	NEAR_THE_GEM_STALL_IN_ARDOUGNE_MARKET("Ardougne Market Gem Stall", STASHUnit.NEAR_THE_GEM_STALL_IN_ARDOUGNE_MARKET, Type.Hole),
	OUTSIDE_THE_BAR_BY_THE_FIGHT_ARENA("Fight Arena Bar", STASHUnit.OUTSIDE_THE_BAR_BY_THE_FIGHT_ARENA, Type.Crate),
	SOUTHEAST_CORNER_OF_LAVA_DRAGON_ISLE("Lava Dragon Isle", STASHUnit.SOUTHEAST_CORNER_OF_LAVA_DRAGON_ISLE, Type.Hole),
	NEAR_THE_PIER_IN_ZULANDRA("Zulandra Pier", STASHUnit.NEAR_THE_PIER_IN_ZULANDRA, Type.Hole),
	BARROWS_CHEST("Barrow's Chest", STASHUnit.BARROWS_CHEST, Type.Hole),
	WELL_OF_VOYAGE("Well of Voyage", STASHUnit.WELL_OF_VOYAGE, Type.Hole),
	NORTHERN_WALL_OF_CASTLE_DRAKAN("Castle Drakan North Wall", STASHUnit.NORTHERN_WALL_OF_CASTLE_DRAKAN, Type.Rock),
	_7TH_CHAMBER_OF_JALSAVRAH("7th Chamber of Jalsavrah", STASHUnit._7TH_CHAMBER_OF_JALSAVRAH, Type.Hole),
	SOUL_ALTAR("Soul Altar", STASHUnit.SOUL_ALTAR, Type.Hole),
	WARRIORS_GUILD_BANK_29047("Warriors Guild Bank", STASHUnit.WARRIORS_GUILD_BANK_29047, Type.Crate),
	ENTRANA_CHAPEL("Entrana Chapel", STASHUnit.ENTRANA_CHAPEL, Type.Crate),
	TZHAAR_GEM_STORE("TzHaar Gem Store", STASHUnit.TZHAAR_GEM_STORE, Type.Hole),
	TENT_IN_LORD_IORWERTHS_ENCAMPMENT("Lord Iorwerth's Encampment", STASHUnit.TENT_IN_LORD_IORWERTHS_ENCAMPMENT, Type.Crate),
	OUTSIDE_MUDKNUCKLES_HUT("Mudknuckle's Hut", STASHUnit.OUTSIDE_MUDKNUCKLES_HUT, Type.Rock),
	CENTRE_OF_THE_CATACOMBS_OF_KOUREND("Catacombs of Kourend", STASHUnit.CENTRE_OF_THE_CATACOMBS_OF_KOUREND, Type.Hole),
	KING_BLACK_DRAGONS_LAIR("King Black Dragon's Lair", STASHUnit.KING_BLACK_DRAGONS_LAIR, Type.Rock),
	OUTSIDE_KRIL_TSUTSAROTHS_ROOM("K'ril Tsutsaroth's room", STASHUnit.OUTSIDE_KRIL_TSUTSAROTHS_ROOM, Type.Hole),
	BY_THE_BEAR_CAGE_IN_VARROCK_PALACE_GARDENS("Varrock Palace Gardens", STASHUnit.BY_THE_BEAR_CAGE_IN_VARROCK_PALACE_GARDENS, Type.Bush),
	OUTSIDE_THE_WILDERNESS_AXE_HUT("Wilderness Axe Hut", STASHUnit.OUTSIDE_THE_WILDERNESS_AXE_HUT, Type.Hole),
	TOP_FLOOR_OF_THE_YANILLE_WATCHTOWER("Yanille Watchtower", STASHUnit.TOP_FLOOR_OF_THE_YANILLE_WATCHTOWER, Type.Crate),
	DEATH_ALTAR("Death Altar", STASHUnit.DEATH_ALTAR, Type.Hole),
	BEHIND_MISS_SCHISM_IN_DRAYNOR_VILLAGE("Draynor Village Miss Chism", STASHUnit.BEHIND_MISS_SCHISM_IN_DRAYNOR_VILLAGE, Type.Bush),
	NORTHWESTERN_CORNER_OF_THE_ENCHANTED_VALLEY("Enchanted Valley", STASHUnit.NORTHWESTERN_CORNER_OF_THE_ENCHANTED_VALLEY, Type.Bush),
	NORTH_OF_MOUNT_KARUULM("Mount Karuulm", STASHUnit.NORTH_OF_MOUNT_KARUULM, Type.Hole),
	NORTH_OF_THE_TWILIGHT_TEMPLE("Twilight Temple Mine", STASHUnit.TWILIGHT_TEMPLE_MINE, Type.Hole),
	TWILIGHT_TEMPLE("Twilight Temple", STASHUnit.OUTSIDE_TWILIGHT_TEMPLE, Type.Crate),
	SALVAGER_OVERLOOK("Salveager Overlook", STASHUnit.WESTERN_SALVAGER_OVERLOOK, Type.Hole),
	WHERE_THE_RIVER_ORTUS_MEETS_THE_PROUDSPIRE("River Ortis", STASHUnit.ORTUS_MEETS_PROUDSPIRE, Type.Rock),
	TEMPLE_SOUTHEAST_OF_THE_BAZAAR("Temple in Civitas illa Fortis", "Outside the temple in Civitas illa Fortis", STASHUnit.TEMPLE_SOUTHEAST_OF_THE_BAZAAR, Type.Bush),
	CAM_TORUM_ENTRANCE("Cam torum entrance", "South of the gates to Cam Torum", STASHUnit.CAM_TORUM_ENTRANCE, Type.Hole),
	FORTIS_GRAND_MUSEUM("Fortis grand museum", "Near the entrance of the Civitas illa Fortis Grand Museum", STASHUnit.FORTIS_GRAND_MUSEUM, Type.Hole),
	GYPSY_TENT_ENTRANCE("Varrock Gypsy Tent", "Aris's tent", STASHUnit.GYPSY_TENT_ENTRANCE, Type.Bush),
	FINE_CLOTHES_ENTRANCE("Varrock Fine Clothes", "Iffie Nitter in Varrock", STASHUnit.FINE_CLOTHES_ENTRANCE, Type.Bush),
	BOB_AXES_ENTRANCE("Lumbridge Bob's Axes", "Bob's Brilliant Axes in Lumbridge", STASHUnit.BOB_AXES_ENTRANCE, Type.Bush),
	CRYSTALLINE_MAPLE_TREES("Crystalline Maple Trees", "North of Prifddinas by several maple trees", STASHUnit.CRYSTALLINE_MAPLE_TREES, Type.Hole),
	CHARCOAL_BURNERS("Charcoal Burners", "Near the Charcoal Burners", STASHUnit.CHARCOAL_BURNERS, Type.Crate),
	EAST_OF_THE_LEVEL_19_WILDERNESS_OBELISK("Wilderness Chaos Temple", "Chaos Temple in the south-eastern Wilderness", STASHUnit.EAST_OF_THE_LEVEL_19_WILDERNESS_OBELISK, Type.Rock);

	StashUnit(String name, STASHUnit stashUnit, Type type) {
		this.name = name;
		this.watsonLocation = formatWatsonLocation(this.name());
		this.stashUnit = stashUnit;
		this.type = type;
	}

	StashUnit(String name, String watsonLocation, STASHUnit stashUnit, Type type) {
		this.name = name;
		this.watsonLocation = formatWatsonLocation(watsonLocation);
		this.stashUnit = stashUnit;
		this.type = type;
	}

	/**
	 * Returns the StashUnit corresponding to the text on the Watson notice board.
	 * @param watsonLocation - The text from the watson notice board.
	 * @return the StashUnit, null if no match was found.
	 */
	public static StashUnit fromWatsonLocation(String watsonLocation, EmoteClueDifficulty difficulty) {
		// warrior guild STASHes have the same board name
		if (watsonLocation.equals("Warriors' Guild bank")) {
			return difficulty.equals(EmoteClueDifficulty.Elite) ? WARRIORS_GUILD_BANK : WARRIORS_GUILD_BANK_29047;
		}
		for(StashUnit stashUnit : StashUnit.values()) {
			if (stashUnit.getWatsonLocation().equals(formatWatsonLocation(watsonLocation))) {
				return stashUnit;
			}
		}
		return null;
	}

	private static String formatWatsonLocation(String watsonLocation) {
		return watsonLocation.replace("'", "").replace("-", "").replace("_", " ").trim().toLowerCase();
	}

	private final String name;
	private final String watsonLocation;
	private final STASHUnit stashUnit;
	private final Type type;

	/**
	 * Contains {@link com.larsvansoest.runelite.clueitems.data.StashUnit} build requirement data for each {@link com.larsvansoest.runelite.clueitems.data.StashUnit.Type}.
	 */
	@Getter
	@RequiredArgsConstructor
	public enum DifficultyRequirements
	{
		Beginner(12, "2 planks, 10 nails"),
		Easy(27, "2 planks, 10 nails"),
		Medium(42, "2 oak planks, 10 nails"),
		Hard(55, "2 teak planks, 10 nails"),
		Elite(77, "2 mahogany planks, 10 nails"),
		Master(88, "2 mahogany planks, 1 gold leaf, 10 nails");

		private final int constructionLvl;
		private final String constructionItems;
	}

	/**
	 * Represents the object type of the {@link com.larsvansoest.runelite.clueitems.data.StashUnit}.
	 */
	public enum Type
	{
		Bush(),
		Crate(),
		Hole(),
		Rock()
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems.data;

import org.apache.commons.lang3.ArrayUtils;

import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Provides static predicate mappings over {@link EmoteClueItem} data set.
 * <p>
 * Use-case examples are requirement progression inference by {@link com.larsvansoest.runelite.clueitems.progress.ProgressManager} class, nested requirement visualisation by {@link com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPanel}.
 *
 * @author Lars van Soest
 * @since 2.0.0
 */
public abstract class EmoteClueAssociations
{
	/**
	 * Maps {@link net.runelite.api.ItemID} to corresponding {@link com.larsvansoest.runelite.clueitems.data.EmoteClueItem}.
	 * <p>
	 * Only contains items used for emote clues.
	 */
	public static final Map<Integer, EmoteClueItem> ItemIdToEmoteClueItem = Arrays
			.stream(EmoteClueItem.values())
			.filter(emoteClueItem -> emoteClueItem.getItemId() != null)
			.collect(Collectors.toMap(EmoteClueItem::getItemId, Function.identity()));

	/**
	 * Maps {@link com.larsvansoest.runelite.clueitems.data.EmoteClueDifficulty} to all {@link com.larsvansoest.runelite.clueitems.data.EmoteClue} of that difficulty.
	 */
	public static final Map<EmoteClueDifficulty, EmoteClue[]> DifficultyToEmoteClues = EmoteClue.CLUES
			.stream()
			.map(emoteClue -> new AbstractMap.SimpleImmutableEntry<>(emoteClue, emoteClue.getEmoteClueDifficulty()))
			.collect(Collectors.toMap(AbstractMap.SimpleImmutableEntry::getValue, entry -> new EmoteClue[]{entry.getKey()}, ArrayUtils::addAll));

	/**
	 * Maps {@link com.larsvansoest.runelite.clueitems.data.EmoteClueItem} parents to all {@link com.larsvansoest.runelite.clueitems.data.EmoteClue} that use it.
	 * <p>
	 * Map does not contain {@link com.larsvansoest.runelite.clueitems.data.EmoteClueItem}'s children which are indirectly related to the {@link com.larsvansoest.runelite.clueitems.data.EmoteClueItem}.
	 */
	public static final Map<EmoteClueItem, EmoteClue[]> EmoteClueItemParentToEmoteClues = EmoteClue.CLUES
			.stream()
			.flatMap(emoteClue -> Arrays
					.stream(emoteClue.getItemRequirements())
					.filter(itemRequirement -> (itemRequirement instanceof EmoteClueItem))
					.map(EmoteClueItem.class::cast)
					.map(emoteClueItem -> new AbstractMap.SimpleImmutableEntry<>(emoteClue, emoteClueItem)))
			.collect(Collectors.toMap(AbstractMap.SimpleImmutableEntry::getValue, entry -> new EmoteClue[]{entry.getKey()}, ArrayUtils::addAll));

	/**
	 * Maps {@link com.larsvansoest.runelite.clueitems.data.EmoteClueItem} to all {@link com.larsvansoest.runelite.clueitems.data.EmoteClue} that use it.
	 * <p>
	 * Map does not contain {@link com.larsvansoest.runelite.clueitems.data.EmoteClueItem}'s children which are indirectly related to the {@link com.larsvansoest.runelite.clueitems.data.EmoteClueItem}.
	 */
	public static final Map<EmoteClueItem, EmoteClue[]> EmoteClueItemToEmoteClues = EmoteClueItemParentToEmoteClues
			.entrySet()
			.stream()
			.flatMap(EmoteClueAssociations::flatMapEmoteClueItemParentToEmoteClues)
			.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, ArrayUtils::addAll));
	/**
	 * Maps {@link com.larsvansoest.runelite.clueitems.data.EmoteClue} to all {@link com.larsvansoest.runelite.clueitems.data.EmoteClueItem} that it uses.
	 */
	public static final Map<EmoteClue, EmoteClueItem[]> EmoteClueToEmoteClueItems = EmoteClueItemToEmoteClues
			.entrySet()
			.stream()
			.flatMap(entry -> Arrays.stream(entry.getValue()).map(emoteClue -> new AbstractMap.SimpleImmutableEntry<EmoteClue, EmoteClueItem[]>(emoteClue, new EmoteClueItem[]{entry.getKey()})))
			.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, ArrayUtils::addAll));

	/**
	 * Maps {@link com.larsvansoest.runelite.clueitems.data.StashUnit} to all {@link com.larsvansoest.runelite.clueitems.data.EmoteClue} that use it.
	 */
	public static final Map<StashUnit, EmoteClue[]> STASHUnitToEmoteClues = EmoteClue.CLUES
			.stream()
			.collect(Collectors.toMap(EmoteClue::getStashUnit, emoteClue -> new EmoteClue[]{emoteClue}, ArrayUtils::addAll));

	private static Stream<Map.Entry<EmoteClueItem, EmoteClue[]>> flatMapEmoteClueItemParentToEmoteClues(final Map.Entry<EmoteClueItem, EmoteClue[]> entry)
	{
		return Stream.concat(Stream.of(entry),
				entry.getKey().getChildren().stream().flatMap(child -> flatMapEmoteClueItemParentToEmoteClues(new AbstractMap.SimpleImmutableEntry<>(child, entry.getValue())))
		);
	}
}
/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems.data;

import net.runelite.api.Client;
import net.runelite.api.Item;
import net.runelite.api.gameval.ItemID;
import net.runelite.client.plugins.cluescrolls.clues.EmoteClue;
import net.runelite.client.plugins.cluescrolls.clues.item.ItemRequirement;
import net.runelite.client.plugins.cluescrolls.clues.item.ItemRequirements;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Contains and wraps all {@link ItemRequirement} used by {@link EmoteClue}, integrated in vendored {@link com.larsvansoest.runelite.clueitems.data.EmoteClue} class.
 *
 * @author Lars van Soest
 * @since 2.0.0
 */
public enum EmoteClueItem implements ItemRequirement
{
	ABYSSAL_WHIP_OR("Abyssal whip or", ItemID.LEAGUE_3_WHIP),
	ABYSSAL_WHIP("Abyssal whip", ItemID.ABYSSAL_WHIP),
	ABYSSAL_TENTACLE("Abyssal tentacle", ItemID.ABYSSAL_TENTACLE),
	ABYSSAL_TENTACLE_OR("Abyssal tentacle or", ItemID.LEAGUE_3_WHIP_TENTACLE),
	ADAMANT_2H_SWORD("Adamant 2h sword", ItemID.ADAMANT_2H_SWORD),
	ADAMANT_BOOTS("Adamant boots", ItemID.ADAMANT_ARMOURED_BOOTS),
	ADAMANT_DAGGER("Adamant dagger", ItemID.ADAMANT_DAGGER),
	ADAMANT_FULL_HELM("Adamant full helm", ItemID.ADAMANT_FULL_HELM),
	ADAMANT_HALBERD("Adamant halberd", ItemID.ADAMANT_HALBERD),
	ADAMANT_MED_HELM("Adamant med helm", ItemID.ADAMANT_MED_HELM),
	ADAMANT_PLATEBODY("Adamant platebody", ItemID.ADAMANT_PLATEBODY),
	ADAMANT_PLATELEGS("Adamant platelegs", ItemID.ADAMANT_PLATELEGS),
	ADAMANT_PLATESKIRT("Adamant plateskirt", ItemID.ADAMANT_PLATESKIRT),
	ADAMANT_SQ_SHIELD("Adamant sq shield", ItemID.ADAMANT_SQ_SHIELD),
	ADAMANT_SWORD("Adamant sword", ItemID.ADAMANT_SWORD),
	ADAMANT_WARHAMMER("Adamant warhammer", ItemID.ADAMNT_WARHAMMER),
	AHRIMS_HOOD_0("Ahrims hood 0", ItemID.BARROWS_AHRIM_HEAD_BROKEN),
	AHRIMS_HOOD_100("Ahrims hood 100", ItemID.BARROWS_AHRIM_HEAD_100),
	AHRIMS_HOOD_25("Ahrims hood 25", ItemID.BARROWS_AHRIM_HEAD_25),
	AHRIMS_HOOD_50("Ahrims hood 50", ItemID.BARROWS_AHRIM_HEAD_50),
	AHRIMS_HOOD_75("Ahrims hood 75", ItemID.BARROWS_AHRIM_HEAD_75),
	AHRIMS_HOOD("Ahrims hood", ItemID.BARROWS_AHRIM_HEAD),
	AHRIMS_ROBESKIRT_0("Ahrims robeskirt 0", ItemID.BARROWS_AHRIM_LEGS_BROKEN),
	AHRIMS_ROBESKIRT_100("Ahrims robeskirt 100", ItemID.BARROWS_AHRIM_LEGS_100),
	AHRIMS_ROBESKIRT_25("Ahrims robeskirt 25", ItemID.BARROWS_AHRIM_LEGS_25),
	AHRIMS_ROBESKIRT_50("Ahrims robeskirt 50", ItemID.BARROWS_AHRIM_LEGS_50),
	AHRIMS_ROBESKIRT_75("Ahrims robeskirt 75", ItemID.BARROWS_AHRIM_LEGS_75),
	AHRIMS_ROBESKIRT("Ahrims robeskirt", ItemID.BARROWS_AHRIM_LEGS),
	AHRIMS_ROBETOP_0("Ahrims robetop 0", ItemID.BARROWS_AHRIM_BODY_BROKEN),
	AHRIMS_ROBETOP_100("Ahrims robetop 100", ItemID.BARROWS_AHRIM_BODY_100),
	AHRIMS_ROBETOP_25("Ahrims robetop 25", ItemID.BARROWS_AHRIM_BODY_25),
	AHRIMS_ROBETOP_50("Ahrims robetop 50", ItemID.BARROWS_AHRIM_BODY_50),
	AHRIMS_ROBETOP_75("Ahrims robetop 75", ItemID.BARROWS_AHRIM_BODY_75),
	AHRIMS_ROBETOP("Ahrims robetop", ItemID.BARROWS_AHRIM_BODY),
	AHRIMS_STAFF_0("Ahrims staff 0", ItemID.BARROWS_AHRIM_WEAPON_BROKEN),
	AHRIMS_STAFF_100("Ahrims staff 100", ItemID.BARROWS_AHRIM_WEAPON_100),
	AHRIMS_STAFF_25("Ahrims staff 25", ItemID.BARROWS_AHRIM_WEAPON_25),
	AHRIMS_STAFF_50("Ahrims staff 50", ItemID.BARROWS_AHRIM_WEAPON_50),
	AHRIMS_STAFF_75("Ahrims staff 75", ItemID.BARROWS_AHRIM_WEAPON_75),
	AHRIMS_STAFF("Ahrims staff", ItemID.BARROWS_AHRIM_WEAPON),
	AIR_TIARA("Air tiara", ItemID.TIARA_AIR),
	AMULET_OF_GLORY("Amulet of glory", ItemID.AMULET_OF_GLORY),
	AMULET_OF_GLORY1("Amulet of glory1", ItemID.AMULET_OF_GLORY_1),
	AMULET_OF_GLORY2("Amulet of glory2", ItemID.AMULET_OF_GLORY_2),
	AMULET_OF_GLORY3("Amulet of glory3", ItemID.AMULET_OF_GLORY_3),
	AMULET_OF_GLORY4("Amulet of glory4", ItemID.AMULET_OF_GLORY_4),
	AMULET_OF_GLORY5("Amulet of glory5", ItemID.AMULET_OF_GLORY_5),
	AMULET_OF_GLORY6("Amulet of glory6", ItemID.AMULET_OF_GLORY_6),
	AMULET_OF_POWER("Amulet of power", ItemID.AMULET_OF_POWER),
	AMULET_OF_STRENGTH("Amulet of strength", ItemID.AMULET_OF_STRENGTH),
	AMULET_OF_THE_DAMNED_FULL("Amulet of the damned full", ItemID.DAMNED_AMULET),
	AMULET_OF_THE_DAMNED("Amulet of the damned", ItemID.DAMNED_AMULET_DEGRADED),
	ANCIENT_CROZIER("Ancient crozier", ItemID.TRAIL_ANCIENT_STAFF),
	ANCIENT_MITRE("Ancient mitre", ItemID.TRAIL_ANCIENT_MITRE),
	ANCIENT_STOLE("Ancient stole", ItemID.TRAIL_ANCIENT_SCARF),
	ARCLIGHT("Arclight", ItemID.ARCLIGHT),
	ARMADYL_CROZIER("Armadyl crozier", ItemID.TRAIL_ARMADYL_STAFF),
	ARMADYL_MITRE("Armadyl mitre", ItemID.TRAIL_ARMADYL_MITRE),
	ARMADYL_STOLE("Armadyl stole", ItemID.TRAIL_ARMADYL_SCARF),
	AVERNIC_DEFENDER_L("Avernic defender l", ItemID.INFERNAL_DEFENDER_TROUVER),
	AVERNIC_DEFENDER("Avernic defender", ItemID.INFERNAL_DEFENDER),
	BANDOS_BOOTS("Bandos boots", ItemID.BANDOS_BOOTS),
	BANDOS_CLOAK("Bandos cloak", ItemID.TRAIL_BANDOS_CLOAK),
	BANDOS_CROZIER("Bandos crozier", ItemID.TRAIL_BANDOS_STAFF),
	BANDOS_GODSWORD_OR("Bandos godsword or", ItemID.BGSG),
	BANDOS_GODSWORD("Bandos godsword", ItemID.BGS),
	BANDOS_MITRE("Bandos mitre", ItemID.TRAIL_BANDOS_MITRE),
	BANDOS_PLATEBODY("Bandos platebody", ItemID.RUNE_PLATEBODY_BANDOS),
	BANDOS_STOLE("Bandos stole", ItemID.TRAIL_BANDOS_SCARF),
	BARROWS_GLOVES("Barrows gloves", ItemID.HUNDRED_GAUNTLETS_LEVEL_10),
	BLACK_AXE("Black axe", ItemID.BLACK_AXE),
	BLACK_BOATER("Black boater", ItemID.STRAWBOATER_BLACK),
	BLACK_CAPE("Black cape", ItemID.BLACK_CAPE),
	BLACK_DHIDE_BODY("Black dhide body", ItemID.BLACK_DRAGONHIDE_BODY),
	BLACK_DHIDE_CHAPS("Black dhide chaps", ItemID.BLACK_DRAGONHIDE_CHAPS),
	BLACK_DHIDE_VAMBRACES("Black dhide vambraces", ItemID.BLACK_DRAGON_VAMBRACES),
	BLACK_DRAGON_MASK("Black dragon mask", ItemID.DRAGONMASK_BLACK),
	BLACK_HEADBAND("Black headband", ItemID.HEADBAND_BLACK),
	BLACK_PLATEBODY("Black platebody", ItemID.BLACK_PLATEBODY),
	BLACK_SALAMANDER("Black salamander", ItemID.BLACK_SALAMANDER),
	BLACK_SLAYER_HELMET_I_25179("Black slayer helmet i 25179", ItemID.SW_SLAYER_HELM_I_BLACK),
	BLACK_SLAYER_HELMET_I("Black slayer helmet i", ItemID.SLAYER_HELM_I_BLACK),
	BLACK_SLAYER_HELMET("Black slayer helmet", ItemID.SLAYER_HELM_BLACK),
	BLUE_BOATER("Blue boater", ItemID.STRAWBOATER_BLUE),
	BLUE_BOOTS("Blue boots", ItemID.GNOME_BOOTS_BLUE),
	BLUE_DHIDE_BODY("Blue dhide body", ItemID.BLUE_DRAGONHIDE_BODY),
	BLUE_DHIDE_CHAPS("Blue dhide chaps", ItemID.BLUE_DRAGONHIDE_CHAPS),
	BLUE_DHIDE_VAMBRACES("Blue dhide vambraces", ItemID.BLUE_DRAGON_VAMBRACES),
	BLUE_HEADBAND("Blue headband", ItemID.HEADBAND_BLUE),
	BLUE_ROBE_TOP("Blue robe top", ItemID.GNOME_ROBETOP_BLUE),
	BLUE_WIZARD_HAT("Blue wizard hat", ItemID.BLUEWIZHAT),
	BLUE_WIZARD_ROBE("Blue wizard robe", ItemID.WIZARDS_ROBE),
	BOBS_BLACK_SHIRT("Bobs black shirt", ItemID.TRAIL_BOB_SHIRT_BLACK),
	BOBS_BLUE_SHIRT("Bobs blue shirt", ItemID.TRAIL_BOB_SHIRT_BLUE),
	BOBS_GREEN_SHIRT("Bobs green shirt", ItemID.TRAIL_BOB_SHIRT_GREEN),
	BLUE_MOON_CHESTPLATE("Blue moon chestplate", ItemID.FROST_MOON_CHESTPLATE),
	BLUE_MOON_CHESTPLATE_29037("Blue moon chestplate 29037", ItemID.FROST_MOON_CHESTPLATE_DEGRADED),
	BLUE_MOON_CHESTPLATE_29843("Blue moon chestplate 29843", ItemID.BR_FROST_MOON_CHESTPLATE),
	BLUE_MOON_CHESTPLATE_BROKEN("Blue moon chestplate broken", ItemID.FROST_MOON_CHESTPLATE_BROKEN),
	BLUE_MOON_HELM("Blue moon helm", ItemID.FROST_MOON_HELM),
	BLUE_MOON_HELM_29041("Blue moon helm 29041", ItemID.FROST_MOON_HELM_DEGRADED),
	BLUE_MOON_HELM_29845("Blue moon helm 29845", ItemID.BR_FROST_MOON_HELM),
	BLUE_MOON_HELM_BROKEN("Blue moon helm broken", ItemID.FROST_MOON_HELM_BROKEN),
	BLUE_MOON_SPEAR("Blue moon spear", ItemID.FROSTMOON_SPEAR),
	BLUE_MOON_SPEAR_29849("Blue moon spear 29849", ItemID.BR_FROSTMOON_SPEAR),
	BLUE_MOON_TASSETS("Blue moon tassets", ItemID.FROST_MOON_TASSETS),
	BLUE_MOON_TASSETS_29039("Blue moon tassets 29039", ItemID.FROST_MOON_TASSETS_DEGRADED),
	BLUE_MOON_TASSETS_29844("Blue moon tassets 29844", ItemID.BR_FROST_MOON_TASSETS),
	BLUE_MOON_TASSETS_BROKEN("Blue moon tassets broken", ItemID.FROST_MOON_TASSETS_BROKEN),
	BLUE_SKIRT("Blue skirt", ItemID.BLUE_SKIRT),
	BOBS_PURPLE_SHIRT("Bobs purple shirt", ItemID.TRAIL_BOB_SHIRT_PURPLE),
	BOBS_RED_SHIRT("Bobs red shirt", ItemID.TRAIL_BOB_SHIRT_RED),
	BODY_TIARA("Body tiara", ItemID.TIARA_BODY),
	BONE_DAGGER("Bone dagger", ItemID.DTTD_BONE_DAGGER),
	BONE_SPEAR("Bone spear", ItemID.CAVE_GOBLIN_BONE_SPEAR),
	BOOK_OF_BALANCE_OR("Book of balance or", ItemID.LEAGUE_3_BOOK_GUTHIX),
	BOOK_OF_BALANCE("Book of balance", ItemID.GUTHIXBOOK_COMPLETE),
	BOOK_OF_DARKNESS_OR("Book of darkness or", ItemID.LEAGUE_3_BOOK_ZAROS),
	BOOK_OF_DARKNESS("Book of darkness", ItemID.ZAROSBOOK_COMPLETE),
	BOOK_OF_LAW_OR("Book of law or", ItemID.LEAGUE_3_BOOK_ARMADYL),
	BOOK_OF_LAW("Book of law", ItemID.ARMADYLBOOK_COMPLETE),
	BOOK_OF_WAR_OR("Book of war or", ItemID.LEAGUE_3_BOOK_BANDOS),
	BOOK_OF_WAR("Book of war", ItemID.BANDOSBOOK_COMPLETE),
	BOW_OF_FAERDHINEN("Bow of Faerdhinen", ItemID.BOW_OF_FAERDHINEN),
	BOW_OF_FAERDHINEN_27187("Bow of Faerdhinen 27187", ItemID.BR_BOW_OF_FAERDHINEN),
	BOW_OF_FAERDHINEN_C("Bow of Faerdhinen c", ItemID.BOW_OF_FAERDHINEN_INFINITE),
	BOW_OF_FAERDHINEN_C_25869("Bow of Faerdhinen c 25869", ItemID.BOW_OF_FAERDHINEN_INFINITE_DUMMY),
	BOW_OF_FAERDHINEN_C_25884("Bow of Faerdhinen c 25884", ItemID.BOW_OF_FAERDHINEN_INFINITE_ITHELL),
	BOW_OF_FAERDHINEN_C_25886("Bow of Faerdhinen c 25886", ItemID.BOW_OF_FAERDHINEN_INFINITE_IORWERTH),
	BOW_OF_FAERDHINEN_C_25888("Bow of Faerdhinen c 25888", ItemID.BOW_OF_FAERDHINEN_INFINITE_TRAHAEARN),
	BOW_OF_FAERDHINEN_C_25890("Bow of Faerdhinen c 25890", ItemID.BOW_OF_FAERDHINEN_INFINITE_CADARN),
	BOW_OF_FAERDHINEN_C_25892("Bow of Faerdhinen c 25892", ItemID.BOW_OF_FAERDHINEN_INFINITE_CRWYS),
	BOW_OF_FAERDHINEN_C_25894("Bow of Faerdhinen c 25894", ItemID.BOW_OF_FAERDHINEN_INFINITE_MEILYR),
	BOW_OF_FAERDHINEN_C_25896("Bow of Faerdhinen c 25896", ItemID.BOW_OF_FAERDHINEN_INFINITE_AMLODD),
	BRINE_SABRE("Brine sabre", ItemID.OLAF2_BRINE_SABRE),
	BRONZE_2H_SWORD("Bronze 2h sword", ItemID.BRONZE_2H_SWORD),
	BRONZE_AXE("Bronze axe", ItemID.BRONZE_AXE),
	BRONZE_CHAINBODY("Bronze chainbody", ItemID.BRONZE_CHAINBODY),
	BRONZE_DAGGER("Bronze dagger", ItemID.BRONZE_DAGGER),
	BRONZE_FULL_HELM("Bronze full helm", ItemID.BRONZE_FULL_HELM),
	BRONZE_PLATELEGS("Bronze platelegs", ItemID.BRONZE_PLATELEGS),
	BRONZE_SPEAR("Bronze spear", ItemID.BRONZE_SPEAR),
	BRONZE_SQ_SHIELD("Bronze sq shield", ItemID.BRONZE_SQ_SHIELD),
	BROWN_APRON("Brown apron", ItemID.BROWN_APRON),
	BROWN_HEADBAND("Brown headband", ItemID.HEADBAND_BROWN),
	BRUISE_BLUE_SNELM_POINTED("Bruise blue snelm (pointed)", ItemID.SNELM_POINT_BLUE),
	BRYOPHYTAS_STAFF_UNCHARGED("Bryophytas' staff (uncharged)", ItemID.NATURE_STAFF_UNCHARGED),
	BRYOPHYTAS_STAFF("Bryophytas' staff", ItemID.NATURE_STAFF_CHARGED),
	BULL_ROARER("Bull roarer", ItemID.BULLROARER),
	CAPE_OF_LEGENDS("Cape of legends", ItemID.CAPE_OF_LEGENDS),
	CASTLE_WARS_BRACELET1("Castle wars bracelet1", ItemID.JEWL_CASTLEWARS_BRACELET),
	CASTLE_WARS_BRACELET2("Castle wars bracelet2", ItemID.JEWL_CASTLEWARS_BRACELET2),
	CASTLE_WARS_BRACELET3("Castle wars bracelet3", ItemID.JEWL_CASTLEWARS_BRACELET3),
	CHEFS_HAT("Chefs hat", ItemID.CHEFS_HAT),
	CLIMBING_BOOTS("Climbing boots", ItemID.DEATH_CLIMBINGBOOTS),
	CLIMBING_BOOTS_G("Climbing boots g", ItemID.CLIMBING_BOOTS_G),
	COIF("Coif", ItemID.COIF),
	COMBAT_BRACELET("Combat bracelet", ItemID.JEWL_BRACELET_OF_COMBAT),
	COMBAT_BRACELET1("Combat bracelet1", ItemID.JEWL_BRACELET_OF_COMBAT_1),
	COMBAT_BRACELET2("Combat bracelet2", ItemID.JEWL_BRACELET_OF_COMBAT_2),
	COMBAT_BRACELET3("Combat bracelet3", ItemID.JEWL_BRACELET_OF_COMBAT_3),
	COMBAT_BRACELET4("Combat bracelet4", ItemID.JEWL_BRACELET_OF_COMBAT_4),
	COMBAT_BRACELET5("Combat bracelet5", ItemID.JEWL_BRACELET_OF_COMBAT_5),
	COMBAT_BRACELET6("Combat bracelet6", ItemID.JEWL_BRACELET_OF_COMBAT_6),
	CREAM_ROBE_TOP("Cream robe top", ItemID.GNOME_ROBETOP_CREAM),
	CRYSTAL_AXE_INACTIVE("Crystal axe inactive", ItemID.CRYSTAL_AXE_INACTIVE),
	CRYSTAL_AXE("Crystal axe", ItemID.CRYSTAL_AXE),
	CRYSTAL_BOW_24123("Crystal bow 24123", ItemID.CRYSTAL_BOW_2500),
	CRYSTAL_BOW("Crystal bow", ItemID.CRYSTAL_BOW),
	CRYSTAL_PICKAXE_INACTIVE("Crystal pickaxe inactive", ItemID.CRYSTAL_PICKAXE_INACTIVE),
	CRYSTAL_PICKAXE("Crystal pickaxe", ItemID.CRYSTAL_PICKAXE),
	DEATH_TIARA("Death tiara", ItemID.TIARA_DEATH),
	DESERT_SHIRT("Desert shirt", ItemID.DESERT_SHIRT),
	DHAROKS_GREATAXE_0("Dharoks greataxe 0", ItemID.BARROWS_DHAROK_WEAPON_BROKEN),
	DHAROKS_GREATAXE_100("Dharoks greataxe 100", ItemID.BARROWS_DHAROK_WEAPON_100),
	DHAROKS_GREATAXE_25("Dharoks greataxe 25", ItemID.BARROWS_DHAROK_WEAPON_25),
	DHAROKS_GREATAXE_50("Dharoks greataxe 50", ItemID.BARROWS_DHAROK_WEAPON_50),
	DHAROKS_GREATAXE_75("Dharoks greataxe 75", ItemID.BARROWS_DHAROK_WEAPON_75),
	DHAROKS_GREATAXE("Dharoks greataxe", ItemID.BARROWS_DHAROK_WEAPON),
	DHAROKS_HELM_0("Dharoks helm 0", ItemID.BARROWS_DHAROK_HEAD_BROKEN),
	DHAROKS_HELM_100("Dharoks helm 100", ItemID.BARROWS_DHAROK_HEAD_100),
	DHAROKS_HELM_25("Dharoks helm 25", ItemID.BARROWS_DHAROK_HEAD_25),
	DHAROKS_HELM_50("Dharoks helm 50", ItemID.BARROWS_DHAROK_HEAD_50),
	DHAROKS_HELM_75("Dharoks helm 75", ItemID.BARROWS_DHAROK_HEAD_75),
	DHAROKS_HELM("Dharoks helm", ItemID.BARROWS_DHAROK_HEAD),
	DHAROKS_PLATEBODY_0("Dharoks platebody 0", ItemID.BARROWS_DHAROK_BODY_BROKEN),
	DHAROKS_PLATEBODY_100("Dharoks platebody 100", ItemID.BARROWS_DHAROK_BODY_100),
	DHAROKS_PLATEBODY_25("Dharoks platebody 25", ItemID.BARROWS_DHAROK_BODY_25),
	DHAROKS_PLATEBODY_50("Dharoks platebody 50", ItemID.BARROWS_DHAROK_BODY_50),
	DHAROKS_PLATEBODY_75("Dharoks platebody 75", ItemID.BARROWS_DHAROK_BODY_75),
	DHAROKS_PLATEBODY("Dharoks platebody", ItemID.BARROWS_DHAROK_BODY),
	DHAROKS_PLATELEGS_0("Dharoks platelegs 0", ItemID.BARROWS_DHAROK_LEGS_BROKEN),
	DHAROKS_PLATELEGS_100("Dharoks platelegs 100", ItemID.BARROWS_DHAROK_LEGS_100),
	DHAROKS_PLATELEGS_25("Dharoks platelegs 25", ItemID.BARROWS_DHAROK_LEGS_25),
	DHAROKS_PLATELEGS_50("Dharoks platelegs 50", ItemID.BARROWS_DHAROK_LEGS_50),
	DHAROKS_PLATELEGS_75("Dharoks platelegs 75", ItemID.BARROWS_DHAROK_LEGS_75),
	DHAROKS_PLATELEGS("Dharoks platelegs", ItemID.BARROWS_DHAROK_LEGS),
	DIAMOND_BRACELET("Diamond bracelet", ItemID.JEWL_DIAMOND_BRACELET),
	DIAMOND_RING("Diamond ring", ItemID.DIAMOND_RING),
	DRAGON_2H_SWORD("Dragon 2h sword", ItemID.DRAGON_2H_SWORD),
	DRAGON_AXE_OR("Dragon axe or", ItemID.TRAILBLAZER_AXE_NO_INFERNAL),
	DRAGON_AXE("Dragon axe", ItemID.DRAGON_AXE),
	DRAGON_BATTLEAXE("Dragon battleaxe", ItemID.DRAGON_BATTLEAXE),
	DRAGON_BOOTS_G("Dragon boots g", ItemID.DRAGON_BOOTS_GOLD),
	DRAGON_BOOTS("Dragon boots", ItemID.DRAGON_BOOTS),
	DRAGON_CHAINBODY_3140("Dragon chainbody 3140", ItemID.DRAGON_CHAINBODY),
	DRAGON_CHAINBODY_G("Dragon chainbody g", ItemID.DRAGON_CHAINBODY_GOLD),
	DRAGON_DEFENDER_L("Dragon defender l", ItemID.DRAGON_PARRYINGDAGGER_TROUVER),
	DRAGON_DEFENDER_T("Dragon defender t", ItemID.DRAGON_PARRYINGDAGGER_T),
	DRAGON_DEFENDER("Dragon defender", ItemID.DRAGON_PARRYINGDAGGER),
	DRAGON_MED_HELM("Dragon med helm", ItemID.DRAGON_MED_HELM),
	DRAGON_NECKLACE("Dragon necklace", ItemID.DRAGONSTONE_NECKLACE),
	DRAGON_PICKAXE_12797("Dragon pickaxe 12797", ItemID.DRAGON_PICKAXE_PRETTY),
	DRAGON_PICKAXE_OR_25376("Dragon pickaxe or 25376", ItemID.TRAILBLAZER_PICKAXE_NO_INFERNAL),
	DRAGON_PICKAXE_OR("Dragon pickaxe or", ItemID.ZALCANO_PICKAXE),
	DRAGON_PICKAXE("Dragon pickaxe", ItemID.DRAGON_PICKAXE),
	DRAGON_PLATESKIRT_G("Dragon plateskirt g", ItemID.DRAGON_PLATESKIRT_GOLD),
	DRAGON_PLATESKIRT("Dragon plateskirt", ItemID.DRAGON_PLATESKIRT),
	DRAGON_SPEAR("Dragon spear", ItemID.DRAGON_SPEAR),
	DRAGON_SQ_SHIELD_G("Dragon sq shield g", ItemID.DRAGON_SQ_SHIELD_GOLD),
	DRAGON_SQ_SHIELD("Dragon sq shield", ItemID.DRAGON_SQ_SHIELD),
	DRAGONSTONE_AMULET("Dragonstone amulet", ItemID.STRUNG_DRAGONSTONE_AMULET),
	DRAGONSTONE_RING("Dragonstone ring", ItemID.DRAGONSTONE_RING),
	ELEMENTAL_SHIELD("Elemental shield", ItemID.ELEMENTAL_SHIELD),
	EMERALD_AMULET("Emerald amulet", ItemID.STRUNG_EMERALD_AMULET),
	EMERALD_NECKLACE("Emerald necklace", ItemID.EMERALD_NECKLACE),
	EMERALD_RING("Emerald ring", ItemID.EMERALD_RING),
	FARMERS_STRAWHAT_13647("Farmer's strawhat 13647", ItemID.TITHE_REWARD_HAT_FEMALE),
	FARMERS_STRAWHAT("Farmer's strawhat", ItemID.TITHE_REWARD_HAT_MALE),
	FIRE_BATTLESTAFF("Fire battlestaff", ItemID.FIRE_BATTLESTAFF),
	FIRE_CAPE_L("Fire cape l", ItemID.TZHAAR_CAPE_FIRE_TROUVER),
	FIRE_CAPE("Fire cape", ItemID.TZHAAR_CAPE_FIRE),
	FIRE_MAX_CAPE_L("Fire max cape l", ItemID.SKILLCAPE_MAX_FIRECAPE_TROUVER),
	FIRE_MAX_CAPE("Fire max cape", ItemID.SKILLCAPE_MAX_FIRECAPE),
	FLARED_TROUSERS("Flared trousers", ItemID.TRAIL_FLARED_PANTS),
	FROZEN_ABYSSAL_WHIP("Frozen abyssal whip", ItemID.ABYSSAL_WHIP_ICE),
	GOLD_HEADBAND("Gold headband", ItemID.HEADBAND_GOLD),
	GOLD_NECKLACE("Gold necklace", ItemID.GOLD_NECKLACE),
	GOLD_RING("Gold ring", ItemID.GOLD_RING),
	GRANITE_SHIELD("Granite shield", ItemID.GRANITE_SHIELD),
	GREEN_BOATER("Green boater", ItemID.STRAWBOATER_GREEN),
	GREEN_BOOTS("Green boots", ItemID.GNOME_BOOTS_GREEN),
	GREEN_DHIDE_BODY("Green dhide body", ItemID.DRAGONHIDE_BODY),
	GREEN_DHIDE_CHAPS("Green dhide chaps", ItemID.DRAGONHIDE_CHAPS),
	GREEN_HAT("Green hat", ItemID.GNOME_HAT_GREEN),
	GREEN_HEADBAND("Green headband", ItemID.HEADBAND_GREEN),
	GREEN_ROBE_BOTTOMS("Green robe bottoms", ItemID.GNOME_ROBEBOTTOMS_GREEN),
	GREEN_ROBE_TOP("Green robe top", ItemID.GNOME_ROBETOP_GREEN),
	GREEN_SLAYER_HELMET_I_25181("Green slayer helmet i 25181", ItemID.SW_SLAYER_HELM_I_GREEN),
	GREEN_SLAYER_HELMET_I("Green slayer helmet i", ItemID.SLAYER_HELM_I_GREEN),
	GREEN_SLAYER_HELMET("Green slayer helmet", ItemID.SLAYER_HELM_GREEN),
	GUARDIAN_BOOTS("Guardian boots", ItemID.GUARDIAN_BOOTS),
	GUTHANS_CHAINSKIRT_0("Guthans chainskirt 0", ItemID.BARROWS_GUTHAN_LEGS_BROKEN),
	GUTHANS_CHAINSKIRT_100("Guthans chainskirt 100", ItemID.BARROWS_GUTHAN_LEGS_100),
	GUTHANS_CHAINSKIRT_25("Guthans chainskirt 25", ItemID.BARROWS_GUTHAN_LEGS_25),
	GUTHANS_CHAINSKIRT_50("Guthans chainskirt 50", ItemID.BARROWS_GUTHAN_LEGS_50),
	GUTHANS_CHAINSKIRT_75("Guthans chainskirt 75", ItemID.BARROWS_GUTHAN_LEGS_75),
	GUTHANS_CHAINSKIRT("Guthans chainskirt ", ItemID.BARROWS_GUTHAN_LEGS),
	GUTHANS_HELM_0("Guthans helm 0", ItemID.BARROWS_GUTHAN_HEAD_BROKEN),
	GUTHANS_HELM_100("Guthans helm 100", ItemID.BARROWS_GUTHAN_HEAD_100),
	GUTHANS_HELM_25("Guthans helm 25", ItemID.BARROWS_GUTHAN_HEAD_25),
	GUTHANS_HELM_50("Guthans helm 50", ItemID.BARROWS_GUTHAN_HEAD_50),
	GUTHANS_HELM_75("Guthans helm 75", ItemID.BARROWS_GUTHAN_HEAD_75),
	GUTHANS_HELM("Guthans helm", ItemID.BARROWS_GUTHAN_HEAD),
	GUTHANS_PLATEBODY_0("Guthans platebody 0", ItemID.BARROWS_GUTHAN_BODY_BROKEN),
	GUTHANS_PLATEBODY_100("Guthans platebody 100", ItemID.BARROWS_GUTHAN_BODY_100),
	GUTHANS_PLATEBODY_25("Guthans platebody 25", ItemID.BARROWS_GUTHAN_BODY_25),
	GUTHANS_PLATEBODY_50("Guthans platebody 50", ItemID.BARROWS_GUTHAN_BODY_50),
	GUTHANS_PLATEBODY_75("Guthans platebody 75", ItemID.BARROWS_GUTHAN_BODY_75),
	GUTHANS_PLATEBODY("Guthans platebody", ItemID.BARROWS_GUTHAN_BODY),
	GUTHANS_WARSPEAR_0("Guthans warspear 0", ItemID.BARROWS_GUTHAN_WEAPON_BROKEN),
	GUTHANS_WARSPEAR_100("Guthans warspear 100", ItemID.BARROWS_GUTHAN_WEAPON_100),
	GUTHANS_WARSPEAR_25("Guthans warspear 25", ItemID.BARROWS_GUTHAN_WEAPON_25),
	GUTHANS_WARSPEAR_50("Guthans warspear 50", ItemID.BARROWS_GUTHAN_WEAPON_50),
	GUTHANS_WARSPEAR_75("Guthans warspear 75", ItemID.BARROWS_GUTHAN_WEAPON_75),
	GUTHANS_WARSPEAR("Guthans warspear", ItemID.BARROWS_GUTHAN_WEAPON),
	GUTHIX_CROZIER("Guthix crozier", ItemID.TRAIL_GUTHIX_STAFF),
	GUTHIX_MITRE("Guthix mitre", ItemID.TRAIL_GUTHIX_MITRE),
	GUTHIX_STOLE("Guthix stole", ItemID.TRAIL_GUTHIX_SCARF),
	HAM_BOOTS("Ham boots", ItemID.HAM_BOOTS),
	HAM_ROBE("Ham robe", ItemID.HAM_ROBE),
	HARDLEATHER_BODY("Hardleather body", ItemID.HARDLEATHER_BODY),
	HELM_OF_NEITIZNOT("Helm of neitiznot", ItemID.FRIS_KINGLY_HELM),
	HOLY_BOOK_OR("Holy book or", ItemID.LEAGUE_3_BOOK_SARADOMIN),
	HOLY_BOOK("Holy book", ItemID.SARADOMINBOOK_COMPLETE),
	HUEYCOATL_HIDE_COIF("Hueycoatl hide coif", ItemID.HUEY_COIF),
	HUEYCOATL_HIDE_VAMBRACES("Hueycoatl hide vambraces", ItemID.HUEY_VAMBRACES),
	HYDRA_SLAYER_HELMET_I_25189("Hydra slayer helmet i 25189", ItemID.SW_SLAYER_HELM_I_HYDRA),
	HYDRA_SLAYER_HELMET_I("Hydra slayer helmet i", ItemID.SLAYER_HELM_I_HYDRA),
	HYDRA_SLAYER_HELMET("Hydra slayer helmet", ItemID.SLAYER_HELM_HYDRA),
	IBANS_STAFF_U("Ibans staff u", ItemID.IBANSTAFF_UPGRADED),
	IBANS_STAFF("Ibans staff", ItemID.IBANSTAFF),
	INFERNAL_AXE_OR("Infernal axe or", ItemID.TRAILBLAZER_AXE),
	INFERNAL_AXE_UNCHARGED_25371("Infernal axe uncharged 25371", ItemID.TRAILBLAZER_AXE_EMPTY),
	INFERNAL_AXE_UNCHARGED("Infernal axe uncharged", ItemID.INFERNAL_AXE_EMPTY),
	INFERNAL_AXE("Infernal axe", ItemID.INFERNAL_AXE),
	INFERNAL_CAPE_L("Infernal cape l", ItemID.INFERNAL_CAPE_TROUVER),
	INFERNAL_CAPE("Infernal cape", ItemID.INFERNAL_CAPE),
	INFERNAL_MAX_CAPE_21285("Infernal max cape 21285", ItemID.SKILLCAPE_MAX_INFERNALCAPE),
	INFERNAL_MAX_CAPE_L("Infernal max cape l", ItemID.SKILLCAPE_MAX_INFERNALCAPE_TROUVER),
	INFERNAL_PICKAXE_OR("Infernal pickaxe or", ItemID.TRAILBLAZER_PICKAXE),
	INFERNAL_PICKAXE_UNCHARGED_25369("Infernal pickaxe uncharged", ItemID.TRAILBLAZER_PICKAXE_EMPTY),
	INFERNAL_PICKAXE_UNCHARGED("Infernal pickaxe uncharged", ItemID.INFERNAL_PICKAXE_EMPTY),
	INFERNAL_PICKAXE("Infernal pickaxe", ItemID.INFERNAL_PICKAXE),
	IRON_2H_SWORD("Iron 2h sword", ItemID.IRON_2H_SWORD),
	IRON_CHAINBODY("Iron chainbody", ItemID.IRON_CHAINBODY),
	IRON_FULL_HELM("Iron full helm", ItemID.IRON_FULL_HELM),
	IRON_KITESHIELD("Iron kiteshield", ItemID.IRON_KITESHIELD),
	IRON_MED_HELM("Iron med helm", ItemID.IRON_MED_HELM),
	IRON_PICKAXE("Iron pickaxe", ItemID.IRON_PICKAXE),
	IRON_PLATEBODY("Iron platebody", ItemID.IRON_PLATEBODY),
	IRON_PLATELEGS("Iron platelegs", ItemID.IRON_PLATELEGS),
	IRON_PLATESKIRT("Iron plateskirt", ItemID.IRON_PLATESKIRT),
	IRON_SCIMITAR("Iron scimitar", ItemID.IRON_SCIMITAR),
	IRON_WARHAMMER("Iron warhammer", ItemID.IRON_WARHAMMER),
	KARILS_COIF_0("Karils coif 0", ItemID.BARROWS_KARIL_HEAD_BROKEN),
	KARILS_COIF_100("Karils coif 100", ItemID.BARROWS_KARIL_HEAD_100),
	KARILS_COIF_25("Karils coif 25", ItemID.BARROWS_KARIL_HEAD_25),
	KARILS_COIF_50("Karils coif 50", ItemID.BARROWS_KARIL_HEAD_50),
	KARILS_COIF_75("Karils coif 75", ItemID.BARROWS_KARIL_HEAD_75),
	KARILS_COIF("Karils coif", ItemID.BARROWS_KARIL_HEAD),
	KARILS_CROSSBOW_0("Karils crossbow 0", ItemID.BARROWS_KARIL_WEAPON_BROKEN),
	KARILS_CROSSBOW_100("Karils crossbow 100", ItemID.BARROWS_KARIL_WEAPON_100),
	KARILS_CROSSBOW_25("Karils crossbow 25", ItemID.BARROWS_KARIL_WEAPON_25),
	KARILS_CROSSBOW_50("Karils crossbow 50", ItemID.BARROWS_KARIL_WEAPON_50),
	KARILS_CROSSBOW_75("Karils crossbow 75", ItemID.BARROWS_KARIL_WEAPON_75),
	KARILS_CROSSBOW("Karils crossbow", ItemID.BARROWS_KARIL_WEAPON),
	KARILS_LEATHERSKIRT_0("Karils leatherskirt 0", ItemID.BARROWS_KARIL_LEGS_BROKEN),
	KARILS_LEATHERSKIRT_100("Karils leatherskirt 100", ItemID.BARROWS_KARIL_LEGS_100),
	KARILS_LEATHERSKIRT_25("Karils leatherskirt 25", ItemID.BARROWS_KARIL_LEGS_25),
	KARILS_LEATHERSKIRT_50("Karils leatherskirt 50", ItemID.BARROWS_KARIL_LEGS_50),
	KARILS_LEATHERSKIRT_75("Karils leatherskirt 75", ItemID.BARROWS_KARIL_LEGS_75),
	KARILS_LEATHERSKIRT("Karils leatherskirt", ItemID.BARROWS_KARIL_LEGS),
	KARILS_LEATHERTOP_0("Karils leathertop 0", ItemID.BARROWS_KARIL_BODY_BROKEN),
	KARILS_LEATHERTOP_100("Karils leathertop 100", ItemID.BARROWS_KARIL_BODY_100),
	KARILS_LEATHERTOP_25("Karils leathertop 25", ItemID.BARROWS_KARIL_BODY_25),
	KARILS_LEATHERTOP_50("Karils leathertop 50", ItemID.BARROWS_KARIL_BODY_50),
	KARILS_LEATHERTOP_75("Karils leathertop 75", ItemID.BARROWS_KARIL_BODY_75),
	KARILS_LEATHERTOP("Karils leathertop", ItemID.BARROWS_KARIL_BODY),
	LAVA_BATTLESTAFF_21198("Lava battlestaff 21198", ItemID.LAVA_BATTLESTAFF_PRETTY),
	LAVA_BATTLESTAFF("Lava battlestaff", ItemID.LAVA_BATTLESTAFF),
	LEATHER_BOOTS("Leather boots", ItemID.LEATHER_BOOTS),
	LEATHER_CHAPS("Leather chaps", ItemID.LEATHER_CHAPS),
	LEATHER_COWL("Leather cowl", ItemID.LEATHER_COWL),
	LEATHER_GLOVES("Leather gloves", ItemID.LEATHER_GLOVES),
	LOCKPICK("Lockpick", ItemID.LOCKPICK),
	LONGBOW("Longbow", ItemID.LONGBOW),
	MAGIC_LONGBOW("Magic longbow", ItemID.MAGIC_LONGBOW),
	MAPLE_LONGBOW("Maple longbow", ItemID.MAPLE_LONGBOW),
	MAPLE_SHORTBOW("Maple shortbow", ItemID.MAPLE_SHORTBOW),
	MENAPHITE_PURPLE_HAT("Menaphite purple hat", ItemID.ROGUETRADER_MENAPHITE_HAT),
	MENAPHITE_PURPLE_KILT("Menaphite purple kilt", ItemID.ROGUETRADER_MENAPHITE_LEGS2),
	MENAPHITE_PURPLE_ROBE("Menaphite purple robe", ItemID.ROGUETRADER_MENAPHITE_LEGS),
	MENAPHITE_PURPLE_TOP("Menaphite purple top", ItemID.ROGUETRADER_MENAPHITE_TOP),
	MENAPHITE_RED_HAT("Menaphite red hat", ItemID.ROGUETRADER_MENAPHITE_HAT_RED),
	MENAPHITE_RED_KILT("Menaphite red kilt", ItemID.ROGUETRADER_MENAPHITE_LEGS_RED2),
	MENAPHITE_RED_ROBE("Menaphite red robe", ItemID.ROGUETRADER_MENAPHITE_LEGS_RED),
	MENAPHITE_RED_TOP("Menaphite red top", ItemID.ROGUETRADER_MENAPHITE_TOP_RED),
	MIND_SHIELD("Mind shield", ItemID.ELEMENTAL_MIND_SHIELD),
	MITHRIL_BOOTS("Mithril boots", ItemID.MITHRIL_ARMOURED_BOOTS),
	MITHRIL_CHAINBODY("Mithril chainbody", ItemID.MITHRIL_CHAINBODY),
	MITHRIL_FULL_HELM("Mithril full helm", ItemID.MITHRIL_FULL_HELM),
	MITHRIL_MED_HELM("Mithril med helm", ItemID.MITHRIL_MED_HELM),
	MITHRIL_PICKAXE("Mithril pickaxe", ItemID.MITHRIL_PICKAXE),
	MITHRIL_PLATEBODY("Mithril platebody", ItemID.MITHRIL_PLATEBODY),
	MITHRIL_PLATELEGS("Mithril platelegs", ItemID.MITHRIL_PLATELEGS),
	MITHRIL_PLATESKIRT("Mithril plateskirt", ItemID.MITHRIL_PLATESKIRT),
	MITHRIL_SCIMITAR("Mithril scimitar", ItemID.MITHRIL_SCIMITAR),
	MYSTIC_FIRE_STAFF("Mystic fire staff", ItemID.MYSTIC_FIRE_STAFF),
	MYSTIC_GLOVES("Mystic gloves", ItemID.MYSTIC_GLOVES),
	MYSTIC_HAT("Mystic hat", ItemID.MYSTIC_HAT),
	MYSTIC_ROBE_BOTTOM_DARK("Mystic robe bottom (dark)", ItemID.MYSTIC_ROBE_BOTTOM_DARK),
	MYSTIC_ROBE_BOTTOM("Mystic robe bottom", ItemID.MYSTIC_ROBE_BOTTOM),
	MYSTIC_ROBE_TOP_DARK("Mystic robe top (dark)", ItemID.MYSTIC_ROBE_TOP_DARK),
	MYSTIC_ROBE_TOP("Mystic robe top", ItemID.MYSTIC_ROBE_TOP),
	NATURE_TIARA("Nature tiara", ItemID.TIARA_NATURE),
	OAK_LONGBOW("Oak longbow", ItemID.OAK_LONGBOW),
	OAK_SHORTBOW("Oak shortbow", ItemID.OAK_SHORTBOW),
	OBSIDIAN_CAPE("Obsidian cape", ItemID.TZHAAR_CAPE_OBSIDIAN),
	ORANGE_BOATER("Orange boater", ItemID.STRAWBOATER_ORANGE),
	PHARAOHS_SCEPTRE_13074("Pharaohs sceptre 13074", ItemID.NTK_JEWELLED_SCEPTRE_8),
	PHARAOHS_SCEPTRE_13075("Pharaohs sceptre 13075", ItemID.NTK_JEWELLED_SCEPTRE_7),
	PHARAOHS_SCEPTRE_13076("Pharaohs sceptre 13076", ItemID.NTK_JEWELLED_SCEPTRE_6),
	PHARAOHS_SCEPTRE_13077("Pharaohs sceptre 13077", ItemID.NTK_JEWELLED_SCEPTRE_5),
	PHARAOHS_SCEPTRE_13078("Pharaohs sceptre 13078", ItemID.NTK_JEWELLED_SCEPTRE_4),
	PHARAOHS_SCEPTRE_16176("Pharaohs sceptre 16176", ItemID.PLACEHOLDER_NTK_JEWELLED_SCEPTRE_8),
	PHARAOHS_SCEPTRE_21445("Pharaohs sceptre 21445", ItemID.PLACEHOLDER_NTK_JEWELLED_SCEPTRE_1),
	PHARAOHS_SCEPTRE_21446("Pharaohs sceptre 21446", ItemID.PLACEHOLDER_NTK_JEWELLED_SCEPTRE_0),
	PHARAOHS_SCEPTRE_26948("Pharaohs sceptre 26950", ItemID.PHARAOHS_SCEPTRE_CHARGED),
	PHARAOHS_SCEPTRE_26950("Pharaohs sceptre 26950", ItemID.PHARAOHS_SCEPTRE_CHARGED_INITIAL),
	PHARAOHS_SCEPTRE_9045("Pharaohs sceptre 9045", ItemID.CERT_NTK_JEWELLED_SCEPTRE_3),
	PHARAOHS_SCEPTRE_9046("Pharaohs sceptre 9046", ItemID.NTK_JEWELLED_SCEPTRE_2),
	PHARAOHS_SCEPTRE_9047("Pharaohs sceptre 9047", ItemID.CERT_NTK_JEWELLED_SCEPTRE_2),
	PHARAOHS_SCEPTRE_9048("Pharaohs sceptre 9048", ItemID.NTK_JEWELLED_SCEPTRE_1),
	PHARAOHS_SCEPTRE_9049("Pharaohs sceptre 9049", ItemID.CERT_NTK_JEWELLED_SCEPTRE_1),
	PHARAOHS_SCEPTRE_9050("Pharaohs sceptre 9050", ItemID.NTK_JEWELLED_SCEPTRE_0),
	PHARAOHS_SCEPTRE_9051("Pharaohs sceptre 9051", ItemID.CERT_NTK_JEWELLED_SCEPTRE_0),
	PHARAOHS_SCEPTRE_UNCHARGED("Pharaohs sceptre uncharged", ItemID.PHARAOHS_SCEPTRE),
	PHARAOHS_SCEPTRE("Pharaohs sceptre", ItemID.NTK_JEWELLED_SCEPTRE_3),
	PINK_BOATER("Pink boater", ItemID.STRAWBOATER_PINK),
	PINK_HEADBAND("Pink headband", ItemID.HEADBAND_PINK),
	PINK_ROBE_TOP("Pink robe top", ItemID.GNOME_ROBETOP_PINK),
	PINK_SKIRT("Pink skirt", ItemID.PINK_SKIRT),
	PIRATE_BANDANA_7124("Pirate bandana 7124", ItemID.PIRATE_BANDANA_RED),
	PIRATE_BANDANA_7130("Pirate bandana 7130", ItemID.PIRATE_BANDANA_BLUE),
	PIRATE_BANDANA_7136("Pirate bandana 7136", ItemID.PIRATE_BANDANA_BROWN),
	PIRATE_BANDANA("Pirate bandana", ItemID.PIRATE_BANDANNA),
	PRIMORDIAL_BOOTS("Primordial boots", ItemID.PRIMORDIAL_BOOTS),
	PROSELYTE_HAUBERK("Proselyte hauberk", ItemID.BASIC_TK_RANK2_BODY),
	PURPLE_BOATER("Purple boater", ItemID.STRAWBOATER_PURPLE),
	PURPLE_GLOVES("Purple gloves", ItemID.WOLFENGLOVES_PURPLE),
	PURPLE_SLAYER_HELMET_I_25185("Purple slayer helmet i 25185", ItemID.SW_SLAYER_HELM_I_PURPLE),
	PURPLE_SLAYER_HELMET_I("Purple slayer helmet i", ItemID.SLAYER_HELM_I_PURPLE),
	PURPLE_SLAYER_HELMET("Purple slayer helmet", ItemID.SLAYER_HELM_PURPLE),
	PYROMANCER_ROBE("Pyromancer robe", ItemID.PYROMANCER_BOTTOM),
	RED_BOATER("Red boater", ItemID.STRAWBOATER_RED),
	RED_CAPE("Red cape", ItemID.RED_CAPE),
	RED_DHIDE_CHAPS("Red dhide chaps", ItemID.RED_DRAGONHIDE_CHAPS),
	RED_HEADBAND("Red headband", ItemID.HEADBAND_RED),
	RED_SLAYER_HELMET_I_25183("Red slayer helmet i 25183", ItemID.SW_SLAYER_HELM_I_RED),
	RED_SLAYER_HELMET_I("Red slayer helmet i", ItemID.SLAYER_HELM_I_RED),
	RED_SLAYER_HELMET("Red slayer helmet", ItemID.SLAYER_HELM_RED),
	RING_OF_DUELING1("Ring of dueling1", ItemID.RING_OF_DUELING_1),
	RING_OF_DUELING2("Ring of dueling2", ItemID.RING_OF_DUELING_2),
	RING_OF_DUELING3("Ring of dueling3", ItemID.RING_OF_DUELING_3),
	RING_OF_DUELING4("Ring of dueling4", ItemID.RING_OF_DUELING_4),
	RING_OF_DUELING5("Ring of dueling5", ItemID.RING_OF_DUELING_5),
	RING_OF_DUELING6("Ring of dueling6", ItemID.RING_OF_DUELING_6),
	RING_OF_DUELING7("Ring of dueling7", ItemID.RING_OF_DUELING_7),
	RING_OF_DUELING8("Ring of dueling8", ItemID.RING_OF_DUELING_8),
	RING_OF_FORGING("Ring of forging", ItemID.RING_OF_FORGING),
	RING_OF_LIFE("Ring of life", ItemID.RING_OF_LIFE),
	RING_OF_SHADOWS("Ring of shadows", ItemID.RING_OF_SHADOWS),
	RING_OF_SHADOWS_UNCHARGED("Ring of shadows uncharged", ItemID.RING_OF_SHADOWS_UNCHARGED),
	RING_OF_VISIBILITY("Ring of visibility", ItemID.FD_RING_VISIBILITY),
	RING_OF_WEALTH_1("Ring of wealth 1", ItemID.RING_OF_WEALTH_1),
	RING_OF_WEALTH_2("Ring of wealth 2", ItemID.RING_OF_WEALTH_2),
	RING_OF_WEALTH_3("Ring of wealth 3", ItemID.RING_OF_WEALTH_3),
	RING_OF_WEALTH_4("Ring of wealth 4", ItemID.RING_OF_WEALTH_4),
	RING_OF_WEALTH_5("Ring of wealth 5", ItemID.RING_OF_WEALTH_5),
	RING_OF_WEALTH_I("Ring of wealth i", ItemID.RING_OF_WEALTH_I),
	RING_OF_WEALTH_I1("Ring of wealth i1", ItemID.RING_OF_WEALTH_I1),
	RING_OF_WEALTH_I2("Ring of wealth i2", ItemID.RING_OF_WEALTH_I2),
	RING_OF_WEALTH_I3("Ring of wealth i3", ItemID.RING_OF_WEALTH_I3),
	RING_OF_WEALTH_I4("Ring of wealth i4", ItemID.RING_OF_WEALTH_I4),
	RING_OF_WEALTH_I5("Ring of wealth i5", ItemID.RING_OF_WEALTH_I5),
	RING_OF_WEALTH("Ring of wealth", ItemID.RING_OF_WEALTH),
	ROLLING_PIN("Rolling pin", ItemID.HUNDRED_ROLLINGPIN),
	RUBY_AMULET("Ruby amulet", ItemID.STRUNG_RUBY_AMULET),
	RUBY_RING("Ruby ring", ItemID.RUBY_RING),
	RUNE_AXE("Rune axe", ItemID.RUNE_AXE),
	RUNE_BOOTS("Rune boots", ItemID.RUNE_ARMOURED_BOOTS),
	RUNE_CROSSBOW_OR("Rune crossbow or", ItemID.LEAGUE_3_RUNE_XBOW),
	RUNE_CROSSBOW("Rune crossbow", ItemID.XBOWS_CROSSBOW_RUNITE),
	RUNE_FULL_HELM("Rune full helm", ItemID.RUNE_FULL_HELM),
	RUNE_HALBERD("Rune halberd", ItemID.RUNE_HALBERD),
	RUNE_HELM_H1("Rune helm h1", ItemID.TRAIL_HERALDIC_HELM_1_RUNE),
	RUNE_HELM_H2("Rune helm h2", ItemID.TRAIL_HERALDIC_HELM_2_RUNE),
	RUNE_HELM_H3("Rune helm h3", ItemID.TRAIL_HERALDIC_HELM_3_RUNE),
	RUNE_HELM_H4("Rune helm h4", ItemID.TRAIL_HERALDIC_HELM_4_RUNE),
	RUNE_HELM_H5("Rune helm h5", ItemID.TRAIL_HERALDIC_HELM_5_RUNE),
	RUNE_KITESHIELD("Rune kiteshield", ItemID.RUNE_KITESHIELD),
	RUNE_LONGSWORD("Rune longsword", ItemID.RUNE_LONGSWORD),
	RUNE_PICKAXE("Rune pickaxe", ItemID.RUNE_PICKAXE),
	RUNE_PLATEBODY("Rune platebody", ItemID.RUNE_PLATEBODY),
	RUNE_PLATELEGS("Rune platelegs", ItemID.RUNE_PLATELEGS),
	RUNE_PLATESKIRT("Rune plateskirt", ItemID.RUNE_PLATESKIRT),
	RUNE_SHIELD_H1("Rune shield h1", ItemID.RUNE_HERALDIC_KITESHIELD1),
	RUNE_SHIELD_H2("Rune shield h2", ItemID.RUNE_HERALDIC_KITESHIELD2),
	RUNE_SHIELD_H3("Rune shield h3", ItemID.RUNE_HERALDIC_KITESHIELD3),
	RUNE_SHIELD_H4("Rune shield h4", ItemID.RUNE_HERALDIC_KITESHIELD4),
	RUNE_SHIELD_H5("Rune shield h5", ItemID.RUNE_HERALDIC_KITESHIELD5),
	RUNE_SPEAR("Rune spear", ItemID.RUNE_SPEAR),
	RUNE_WARHAMMER("Rune warhammer", ItemID.RUNE_WARHAMMER),
	SAPPHIRE_AMULET("Sapphire amulet", ItemID.STRUNG_SAPPHIRE_AMULET),
	SAPPHIRE_NECKLACE("Sapphire necklace", ItemID.SAPPHIRE_NECKLACE),
	SAPPHIRE_RING("Sapphire ring", ItemID.SAPPHIRE_RING),
	SARADOMIN_CROZIER("Saradomin crozier", ItemID.TRAIL_SARADOMIN_STAFF),
	SARADOMIN_MITRE("Saradomin mitre", ItemID.TRAIL_SARADOMIN_MITRE),
	SARADOMIN_STOLE("Saradomin stole", ItemID.TRAIL_SARADOMIN_SCARF),
	SEERCULL("Seercull", ItemID.DAGANOTH_CAVE_MAGIC_SHORTBOW),
	SHADOW_SWORD("Shadow sword", ItemID.SHADOW_MAJ_SHADOW_SWORD),
	SHAYZIEN_BODY_5("Shayzien body 5", ItemID.SHAYZIEN_BODY_5),
	SILVER_SICKLE("Silver sickle", ItemID.SILVER_SICKLE),
	SLAYER_HELMET_I_25177("Slayer helmet i 25177", ItemID.SW_SLAYER_HELM_I),
	SLAYER_HELMET_I("Slayer helmet i", ItemID.SLAYER_HELM_I),
	SLAYER_HELMET("Slayer helmet", ItemID.SLAYER_HELM),
	SLED_4084("Sled 4084", ItemID.TROLLROMANCE_TOBOGGON_WAXED),
	SNAKESKIN_BOOTS("Snakeskin boots", ItemID.SNAKESKIN_BOOTS),
	SNAKESKIN_CHAPS("Snakeskin chaps", ItemID.SNAKESKIN_CHAPS),
	SPINED_CHAPS("Spined chaps", ItemID.DAGGANOTH_RANGED_LEGS),
	SPLITBARK_BODY("Splitbark body", ItemID.SPLITBARK_BODY),
	SPLITBARK_LEGS("Splitbark legs", ItemID.SPLITBARK_LEGS),
	SPOTTED_CAPE_10073("Spotted cape 10073", ItemID.HUNTING_LIGHT_CAPE_WORN),
	SPOTTED_CAPE("Spotted cape", ItemID.HUNTING_LIGHT_CAPE),
	STAFF_OF_AIR("Staff of air", ItemID.STAFF_OF_AIR),
	STAFF_OF_WATER("Staff of water", ItemID.STAFF_OF_WATER),
	STAFF("Staff", ItemID.PLAINSTAFF),
	STEEL_AXE("Steel axe", ItemID.STEEL_AXE),
	STEEL_FULL_HELM("Steel full helm", ItemID.STEEL_FULL_HELM),
	STEEL_KITESHIELD("Steel kiteshield", ItemID.STEEL_KITESHIELD),
	STEEL_LONGSWORD("Steel longsword", ItemID.STEEL_LONGSWORD),
	STEEL_MACE("Steel mace", ItemID.STEEL_MACE),
	STEEL_MED_HELM("Steel med helm", ItemID.STEEL_MED_HELM),
	STEEL_PICKAXE("Steel pickaxe", ItemID.STEEL_PICKAXE),
	STEEL_PLATEBODY("Steel platebody", ItemID.STEEL_PLATEBODY),
	STEEL_PLATELEGS("Steel platelegs", ItemID.STEEL_PLATELEGS),
	STEEL_PLATESKIRT("Steel plateskirt", ItemID.STEEL_PLATESKIRT),
	STEEL_SQ_SHIELD("Steel sq shield", ItemID.STEEL_SQ_SHIELD),
	STUDDED_BODY("Studded body", ItemID.STUDDED_BODY),
	STUDDED_CHAPS("Studded chaps", ItemID.STUDDED_CHAPS),
	SUNFIRE_FANATIC_HELM("Sunfire fanatic helm", ItemID.SUNFIRE_HELM),
	SUNFIRE_FANATIC_CUIRASS("Sunfire fanatic cuirass", ItemID.SUNFIRE_BODY),
	SUNFIRE_FANATIC_CHAUSSES("Sunfire fanatic chausses", ItemID.SUNFIRE_LEGS),
	TEAM_CAPE_X("Team cape x", ItemID.WILDERNESS_CAPE_X),
	TEAM_CAPE_ZERO("Team cape zero", ItemID.WILDERNESS_CAPE_ZERO),
	TEAM1_CAPE("Team1 cape", ItemID.WILDERNESS_CAPE_1),
	TEAM10_CAPE("Team10 cape", ItemID.WILDERNESS_CAPE_10),
	TEAM11_CAPE("Team11 cape", ItemID.WILDERNESS_CAPE_11),
	TEAM12_CAPE("Team12 cape", ItemID.WILDERNESS_CAPE_12),
	TEAM13_CAPE("Team13 cape", ItemID.WILDERNESS_CAPE_13),
	TEAM14_CAPE("Team14 cape", ItemID.WILDERNESS_CAPE_14),
	TEAM15_CAPE("Team15 cape", ItemID.WILDERNESS_CAPE_15),
	TEAM16_CAPE("Team16 cape", ItemID.WILDERNESS_CAPE_16),
	TEAM17_CAPE("Team17 cape", ItemID.WILDERNESS_CAPE_17),
	TEAM18_CAPE("Team18 cape", ItemID.WILDERNESS_CAPE_18),
	TEAM19_CAPE("Team19 cape", ItemID.WILDERNESS_CAPE_19),
	TEAM2_CAPE("Team2 cape", ItemID.WILDERNESS_CAPE_2),
	TEAM20_CAPE("Team20 cape", ItemID.WILDERNESS_CAPE_20),
	TEAM21_CAPE("Team21 cape", ItemID.WILDERNESS_CAPE_21),
	TEAM22_CAPE("Team22 cape", ItemID.WILDERNESS_CAPE_22),
	TEAM23_CAPE("Team23 cape", ItemID.WILDERNESS_CAPE_23),
	TEAM24_CAPE("Team24 cape", ItemID.WILDERNESS_CAPE_24),
	TEAM25_CAPE("Team25 cape", ItemID.WILDERNESS_CAPE_25),
	TEAM26_CAPE("Team26 cape", ItemID.WILDERNESS_CAPE_26),
	TEAM27_CAPE("Team27 cape", ItemID.WILDERNESS_CAPE_27),
	TEAM28_CAPE("Team28 cape", ItemID.WILDERNESS_CAPE_28),
	TEAM29_CAPE("Team29 cape", ItemID.WILDERNESS_CAPE_29),
	TEAM3_CAPE("Team3 cape", ItemID.WILDERNESS_CAPE_3),
	TEAM30_CAPE("Team30 cape", ItemID.WILDERNESS_CAPE_30),
	TEAM31_CAPE("Team31 cape", ItemID.WILDERNESS_CAPE_31),
	TEAM32_CAPE("Team32 cape", ItemID.WILDERNESS_CAPE_32),
	TEAM33_CAPE("Team33 cape", ItemID.WILDERNESS_CAPE_33),
	TEAM34_CAPE("Team34 cape", ItemID.WILDERNESS_CAPE_34),
	TEAM35_CAPE("Team35 cape", ItemID.WILDERNESS_CAPE_35),
	TEAM36_CAPE("Team36 cape", ItemID.WILDERNESS_CAPE_36),
	TEAM37_CAPE("Team37 cape", ItemID.WILDERNESS_CAPE_37),
	TEAM38_CAPE("Team38 cape", ItemID.WILDERNESS_CAPE_38),
	TEAM39_CAPE("Team39 cape", ItemID.WILDERNESS_CAPE_39),
	TEAM4_CAPE("Team4 cape", ItemID.WILDERNESS_CAPE_4),
	TEAM40_CAPE("Team40 cape", ItemID.WILDERNESS_CAPE_40),
	TEAM41_CAPE("Team41 cape", ItemID.WILDERNESS_CAPE_41),
	TEAM42_CAPE("Team42 cape", ItemID.WILDERNESS_CAPE_42),
	TEAM43_CAPE("Team43 cape", ItemID.WILDERNESS_CAPE_43),
	TEAM44_CAPE("Team44 cape", ItemID.WILDERNESS_CAPE_44),
	TEAM45_CAPE("Team45 cape", ItemID.WILDERNESS_CAPE_45),
	TEAM46_CAPE("Team46 cape", ItemID.WILDERNESS_CAPE_46),
	TEAM47_CAPE("Team47 cape", ItemID.WILDERNESS_CAPE_47),
	TEAM48_CAPE("Team48 cape", ItemID.WILDERNESS_CAPE_48),
	TEAM49_CAPE("Team49 cape", ItemID.WILDERNESS_CAPE_49),
	TEAM5_CAPE("Team5 cape", ItemID.WILDERNESS_CAPE_5),
	TEAM50_CAPE("Team50 cape", ItemID.WILDERNESS_CAPE_50),
	TEAM6_CAPE("Team6 cape", ItemID.WILDERNESS_CAPE_6),
	TEAM7_CAPE("Team7 cape", ItemID.WILDERNESS_CAPE_7),
	TEAM8_CAPE("Team8 cape", ItemID.WILDERNESS_CAPE_8),
	TEAM9_CAPE("Team9 cape", ItemID.WILDERNESS_CAPE_9),
	TIARA("Tiara", ItemID.TIARA),
	TOKTZKETXIL("Toktzketxil", ItemID.TZHAAR_SPIKESHIELD),
	TOKTZXILUL("Toktzxilul", ItemID.TZHAAR_THROWINGRING),
	TORAGS_HAMMERS_0("Torags hammers 0", ItemID.BARROWS_TORAG_WEAPON_BROKEN),
	TORAGS_HAMMERS_100("Torags hammers 100", ItemID.BARROWS_TORAG_WEAPON_100),
	TORAGS_HAMMERS_25("Torags hammers 25", ItemID.BARROWS_TORAG_WEAPON_25),
	TORAGS_HAMMERS_50("Torags hammers 50", ItemID.BARROWS_TORAG_WEAPON_50),
	TORAGS_HAMMERS_75("Torags hammers 75", ItemID.BARROWS_TORAG_WEAPON_75),
	TORAGS_HAMMERS("Torags hammers", ItemID.BARROWS_TORAG_WEAPON),
	TORAGS_HELM_0("Torags helm 0", ItemID.BARROWS_TORAG_HEAD_BROKEN),
	TORAGS_HELM_100("Torags helm 100", ItemID.BARROWS_TORAG_HEAD_100),
	TORAGS_HELM_25("Torags helm 25", ItemID.BARROWS_TORAG_HEAD_25),
	TORAGS_HELM_50("Torags helm 50", ItemID.BARROWS_TORAG_HEAD_50),
	TORAGS_HELM_75("Torags helm 75", ItemID.BARROWS_TORAG_HEAD_75),
	TORAGS_HELM("Torags helm", ItemID.BARROWS_TORAG_HEAD),
	TORAGS_PLATEBODY_0("Torags platebody 0", ItemID.BARROWS_TORAG_BODY_BROKEN),
	TORAGS_PLATEBODY_100("Torags platebody 100", ItemID.BARROWS_TORAG_BODY_100),
	TORAGS_PLATEBODY_25("Torags platebody 25", ItemID.BARROWS_TORAG_BODY_25),
	TORAGS_PLATEBODY_50("Torags platebody 50", ItemID.BARROWS_TORAG_BODY_50),
	TORAGS_PLATEBODY_75("Torags platebody 75", ItemID.BARROWS_TORAG_BODY_75),
	TORAGS_PLATEBODY("Torags platebody", ItemID.BARROWS_TORAG_BODY),
	TORAGS_PLATELEGS_0("Torags platelegs 0", ItemID.BARROWS_TORAG_LEGS_BROKEN),
	TORAGS_PLATELEGS_100("Torags platelegs 100", ItemID.BARROWS_TORAG_LEGS_100),
	TORAGS_PLATELEGS_25("Torags platelegs 25", ItemID.BARROWS_TORAG_LEGS_25),
	TORAGS_PLATELEGS_50("Torags platelegs 50", ItemID.BARROWS_TORAG_LEGS_50),
	TORAGS_PLATELEGS_75("Torags platelegs 75", ItemID.BARROWS_TORAG_LEGS_75),
	TORAGS_PLATELEGS("Torags platelegs", ItemID.BARROWS_TORAG_LEGS),
	TURQUOISE_ROBE_BOTTOMS("Turquoise robe bottoms", ItemID.GNOME_ROBEBOTTOMS_TURQUOISE),
	TURQUOISE_ROBE_TOP("Turquoise robe top", ItemID.GNOME_ROBETOP_TURQUOISE),
	TURQUOISE_SLAYER_HELMET_I_25187("Turqouise slayer helmet i 25187", ItemID.SW_SLAYER_HELM_I_TURQUOISE),
	TURQUOISE_SLAYER_HELMET_I("Turquoise slayer helmet i", ItemID.SLAYER_HELM_I_TURQUOISE),
	TURQUOISE_SLAYER_HELMET("Turquoise slayer helmet", ItemID.SLAYER_HELM_TURQUOISE),
	TWISTED_SLAYER_HELMET_I_25191("Twisted slayer helmet i 25191", ItemID.SW_SLAYER_HELM_I_TWISTED),
	TWISTED_SLAYER_HELMET_I("Twisted slayer helmet i", ItemID.SLAYER_HELM_I_TWISTED),
	TWISTED_SLAYER_HELMET("Twisted slayer helmet", ItemID.SLAYER_HELM_TWISTED),
	TZKAL_SLAYER_HELMET_I_25914("Tzkal slayer helmet i 25914", ItemID.SW_SLAYER_HELM_I_ZUK),
	TZKAL_SLAYER_HELMET_I("Tzkal slayer helmet i", ItemID.SLAYER_HELM_I_ZUK),
	TZKAL_SLAYER_HELMET("Tzkal slayer helmet,", ItemID.SLAYER_HELM_ZUK),
	TZTOK_SLAYER_HELMET_I_25902("Tzkal slayer helmet i 25902", ItemID.SW_SLAYER_HELM_I_JAD),
	TZTOK_SLAYER_HELMET_I("Tztok slayer helmet i", ItemID.SLAYER_HELM_I_JAD),
	TZTOK_SLAYER_HELMET("Tztok slayer helmet", ItemID.SLAYER_HELM_JAD),
	UNHOLY_BOOK_OR("Unholy book or", ItemID.LEAGUE_3_BOOK_ZAMORAK),
	UNHOLY_BOOK("Unholy book", ItemID.ZAMORAKBOOK_COMPLETE),
	VAMPYRIC_SLAYER_HELMET_I_25908("Vampyric slayer helmet i 25908", ItemID.SW_SLAYER_HELM_I_VERZIK),
	VAMPYRIC_SLAYER_HELMET_I("Vampyric slayer helmet i", ItemID.SLAYER_HELM_I_VERZIK),
	VAMPYRIC_SLAYER_HELMET("Vampyric slayer helmet", ItemID.SLAYER_HELM_VERZIK),
	VERACS_BRASSARD_0("Veracs brassard 0", ItemID.BARROWS_VERAC_BODY_BROKEN),
	VERACS_BRASSARD_100("Veracs brassard 100", ItemID.BARROWS_VERAC_BODY_100),
	VERACS_BRASSARD_25("Veracs brassard 25", ItemID.BARROWS_VERAC_BODY_25),
	VERACS_BRASSARD_50("Veracs brassard 50", ItemID.BARROWS_VERAC_BODY_50),
	VERACS_BRASSARD_75("Veracs brassard 75", ItemID.BARROWS_VERAC_BODY_75),
	VERACS_BRASSARD("Veracs brassard", ItemID.BARROWS_VERAC_BODY),
	VERACS_FLAIL_0("Veracs flail 0", ItemID.BARROWS_VERAC_WEAPON_BROKEN),
	VERACS_FLAIL_100("Veracs flail 100", ItemID.BARROWS_VERAC_WEAPON_100),
	VERACS_FLAIL_25("Veracs flail 25", ItemID.BARROWS_VERAC_WEAPON_25),
	VERACS_FLAIL_50("Veracs flail 50", ItemID.BARROWS_VERAC_WEAPON_50),
	VERACS_FLAIL_75("Veracs flail 75", ItemID.BARROWS_VERAC_WEAPON_75),
	VERACS_FLAIL("Veracs flail", ItemID.BARROWS_VERAC_WEAPON),
	VERACS_HELM_0("Veracs helm 0", ItemID.BARROWS_VERAC_HEAD_BROKEN),
	VERACS_HELM_100("Veracs helm 100", ItemID.BARROWS_VERAC_HEAD_100),
	VERACS_HELM_25("Veracs helm 25", ItemID.BARROWS_VERAC_HEAD_25),
	VERACS_HELM_50("Veracs helm 50", ItemID.BARROWS_VERAC_HEAD_50),
	VERACS_HELM_75("Veracs helm 75", ItemID.BARROWS_VERAC_HEAD_75),
	VERACS_HELM("Veracs helm", ItemID.BARROWS_VERAC_HEAD),
	VERACS_PLATESKIRT_0("Veracs plateskirt 0", ItemID.BARROWS_VERAC_LEGS_BROKEN),
	VERACS_PLATESKIRT_100("Veracs plateskirt 100", ItemID.BARROWS_VERAC_LEGS_100),
	VERACS_PLATESKIRT_25("Veracs plateskirt 25", ItemID.BARROWS_VERAC_LEGS_25),
	VERACS_PLATESKIRT_50("Veracs plateskirt 50", ItemID.BARROWS_VERAC_LEGS_50),
	VERACS_PLATESKIRT_75("Veracs plateskirt 75", ItemID.BARROWS_VERAC_LEGS_75),
	VERACS_PLATESKIRT("Veracs plateskirt", ItemID.BARROWS_VERAC_LEGS),
	VOLCANIC_ABYSSAL_WHIP("Volcanic abyssal whip", ItemID.ABYSSAL_WHIP_LAVA),
	WHITE_APRON("White apron", ItemID.WHITE_APRON),
	WHITE_BOATER("White boater", ItemID.STRAWBOATER_WHITE),
	WHITE_HEADBAND("White headband", ItemID.HEADBAND_WHITE),
	ZAMORAK_CROZIER("Zamorak crozier", ItemID.TRAIL_ZAMORAK_STAFF),
	ZAMORAK_FULL_HELM("Zamorak full helm", ItemID.RUNE_FULL_HELM_ZAMORAK),
	ZAMORAK_GODSWORD_OR("Zamorak godsword or", ItemID.ZGSG),
	ZAMORAK_GODSWORD("Zamorak godsword", ItemID.ZGS),
	ZAMORAK_MITRE("Zamorak mitre", ItemID.TRAIL_ZAMORAK_MITRE),
	ZAMORAK_STOLE("Zamorak stole", ItemID.TRAIL_ZAMORAK_SCARF),
	ANY_ABYSSAL_WHIP("Abyssal whip", false, EmoteClueItem.ABYSSAL_WHIP, EmoteClueItem.VOLCANIC_ABYSSAL_WHIP, EmoteClueItem.FROZEN_ABYSSAL_WHIP, EmoteClueItem.ABYSSAL_WHIP_OR, EmoteClueItem.ABYSSAL_TENTACLE, EmoteClueItem.ABYSSAL_TENTACLE_OR),
	ANY_ACTIVE_BOW_OF_FAERDHINEN("Bow of Faerdhinen active", false, EmoteClueItem.BOW_OF_FAERDHINEN, EmoteClueItem.BOW_OF_FAERDHINEN_27187, EmoteClueItem.BOW_OF_FAERDHINEN_C, EmoteClueItem.BOW_OF_FAERDHINEN_C_25869, EmoteClueItem.BOW_OF_FAERDHINEN_C_25884, EmoteClueItem.BOW_OF_FAERDHINEN_C_25886, EmoteClueItem.BOW_OF_FAERDHINEN_C_25888, EmoteClueItem.BOW_OF_FAERDHINEN_C_25890, EmoteClueItem.BOW_OF_FAERDHINEN_C_25892, EmoteClueItem.BOW_OF_FAERDHINEN_C_25894, EmoteClueItem.BOW_OF_FAERDHINEN_C_25896),
	ANY_AHRIMS_HOOD("Ahrim's hood",
			false,
			EmoteClueItem.AHRIMS_HOOD,
			EmoteClueItem.AHRIMS_HOOD_0,
			EmoteClueItem.AHRIMS_HOOD_25,
			EmoteClueItem.AHRIMS_HOOD_50,
			EmoteClueItem.AHRIMS_HOOD_75,
			EmoteClueItem.AHRIMS_HOOD_100
	),
	ANY_AHRIMS_ROBESKIRT("Ahrims robeskirt",
			false,
			EmoteClueItem.AHRIMS_ROBESKIRT,
			EmoteClueItem.AHRIMS_ROBESKIRT_0,
			EmoteClueItem.AHRIMS_ROBESKIRT_25,
			EmoteClueItem.AHRIMS_ROBESKIRT_50,
			EmoteClueItem.AHRIMS_ROBESKIRT_75,
			EmoteClueItem.AHRIMS_ROBESKIRT_100
	),
	ANY_AHRIMS_ROBETOP("Ahrims robetop",
			false,
			EmoteClueItem.AHRIMS_ROBETOP,
			EmoteClueItem.AHRIMS_ROBETOP_0,
			EmoteClueItem.AHRIMS_ROBETOP_25,
			EmoteClueItem.AHRIMS_ROBETOP_50,
			EmoteClueItem.AHRIMS_ROBETOP_75,
			EmoteClueItem.AHRIMS_ROBETOP_100
	),
	ANY_AHRIMS_STAFF("Ahrims staff",
			false,
			EmoteClueItem.AHRIMS_STAFF,
			EmoteClueItem.AHRIMS_STAFF_0,
			EmoteClueItem.AHRIMS_STAFF_25,
			EmoteClueItem.AHRIMS_STAFF_50,
			EmoteClueItem.AHRIMS_STAFF_75,
			EmoteClueItem.AHRIMS_STAFF_100
	),
	ANY_AMULET_OF_GLORY("Any amulet of glory",
			false,
			EmoteClueItem.AMULET_OF_GLORY,
			EmoteClueItem.AMULET_OF_GLORY1,
			EmoteClueItem.AMULET_OF_GLORY2,
			EmoteClueItem.AMULET_OF_GLORY3,
			EmoteClueItem.AMULET_OF_GLORY4,
			EmoteClueItem.AMULET_OF_GLORY5,
			EmoteClueItem.AMULET_OF_GLORY6
	),
	ANY_AMULET_OF_THE_DAMNED("Amulet of the damned", false, EmoteClueItem.AMULET_OF_THE_DAMNED, EmoteClueItem.AMULET_OF_THE_DAMNED_FULL),
	ANY_AVERNIC_DEFENDER("Avernic defender", false, EmoteClueItem.AVERNIC_DEFENDER, EmoteClueItem.AVERNIC_DEFENDER_L),
	ANY_BANDOS_BOOTS("Bandos boots", false, EmoteClueItem.BANDOS_BOOTS, EmoteClueItem.GUARDIAN_BOOTS),
	ANY_BANDOS_GODSWORD("Bandos godsword", false, EmoteClueItem.BANDOS_GODSWORD, EmoteClueItem.BANDOS_GODSWORD_OR),
	ANY_BLUE_MOON_CHESTPLATE("Blue moon chestplate",
			false,
			EmoteClueItem.BLUE_MOON_CHESTPLATE,
			EmoteClueItem.BLUE_MOON_CHESTPLATE_29037,
			EmoteClueItem.BLUE_MOON_CHESTPLATE_29843,
			EmoteClueItem.BLUE_MOON_CHESTPLATE_BROKEN
	),
	ANY_BLUE_MOON_HELM("Blue moon helm",
			false,
			EmoteClueItem.BLUE_MOON_HELM,
			EmoteClueItem.BLUE_MOON_HELM_29041,
			EmoteClueItem.BLUE_MOON_HELM_29845,
			EmoteClueItem.BLUE_MOON_HELM_BROKEN
	),
	ANY_BLUE_MOON_SPEAR("Blue moon spear",
			false,
			EmoteClueItem.BLUE_MOON_SPEAR,
			EmoteClueItem.BLUE_MOON_SPEAR_29849
	),
	ANY_BLUE_MOON_TASSETS("Blue moon tassets",
			false,
			EmoteClueItem.BLUE_MOON_TASSETS,
			EmoteClueItem.BLUE_MOON_TASSETS_29039,
			EmoteClueItem.BLUE_MOON_TASSETS_29844,
			EmoteClueItem.BLUE_MOON_TASSETS_BROKEN
	),
	ANY_BOATER("Any boater",
			false,
			EmoteClueItem.RED_BOATER,
			EmoteClueItem.ORANGE_BOATER,
			EmoteClueItem.GREEN_BOATER,
			EmoteClueItem.BLUE_BOATER,
			EmoteClueItem.BLACK_BOATER,
			EmoteClueItem.PINK_BOATER,
			EmoteClueItem.PURPLE_BOATER,
			EmoteClueItem.WHITE_BOATER
	),
	ANY_BOBS_SHIRT("Any bob's shirt",
			false,
			EmoteClueItem.BOBS_BLACK_SHIRT,
			EmoteClueItem.BOBS_BLUE_SHIRT,
			EmoteClueItem.BOBS_GREEN_SHIRT,
			EmoteClueItem.BOBS_PURPLE_SHIRT,
			EmoteClueItem.BOBS_RED_SHIRT
	),
	ANY_BRYOPHYTAS_STAFF("Bryophytas' staff", false, EmoteClueItem.BRYOPHYTAS_STAFF, EmoteClueItem.BRYOPHYTAS_STAFF_UNCHARGED),
	ANY_CASTLE_WARS_BRACELET("Castle wars bracelet", false, EmoteClueItem.CASTLE_WARS_BRACELET3, EmoteClueItem.CASTLE_WARS_BRACELET2, EmoteClueItem.CASTLE_WARS_BRACELET1),
	ANY_COMBAT_BRACELET("Combat bracelet", false, COMBAT_BRACELET, COMBAT_BRACELET1, COMBAT_BRACELET2, COMBAT_BRACELET3, COMBAT_BRACELET4, COMBAT_BRACELET5, COMBAT_BRACELET6),
	ANY_CROZIER("Any crozier",
			false,
			EmoteClueItem.ANCIENT_CROZIER,
			EmoteClueItem.ARMADYL_CROZIER,
			EmoteClueItem.BANDOS_CROZIER,
			EmoteClueItem.GUTHIX_CROZIER,
			EmoteClueItem.SARADOMIN_CROZIER,
			EmoteClueItem.ZAMORAK_CROZIER
	),
	ANY_CRYSTAL_AXE("Crystal Axe", false, EmoteClueItem.CRYSTAL_AXE, EmoteClueItem.CRYSTAL_AXE_INACTIVE),
	ANY_CRYSTAL_BOW("Crystal Bow", false, EmoteClueItem.CRYSTAL_BOW, EmoteClueItem.CRYSTAL_BOW_24123),
	ANY_CRYSTAL_BOW_OR_ACTIVE_BOW_OF_FAERDHINEN("Crystal bow or active bow of Faerdhinen", false, EmoteClueItem.ANY_CRYSTAL_BOW, EmoteClueItem.ANY_ACTIVE_BOW_OF_FAERDHINEN),
	ANY_CRYSTAL_PICKAXE("Crystal Pickaxe", false, EmoteClueItem.CRYSTAL_PICKAXE, EmoteClueItem.CRYSTAL_PICKAXE_INACTIVE),
	ANY_CLIMBING_BOOTS("Climbing Boots", false, EmoteClueItem.CLIMBING_BOOTS, EmoteClueItem.CLIMBING_BOOTS_G),
	ANY_DHAROKS_GREATAXE("Dharoks greataxe",
			false,
			EmoteClueItem.DHAROKS_GREATAXE,
			EmoteClueItem.DHAROKS_GREATAXE_0,
			EmoteClueItem.DHAROKS_GREATAXE_25,
			EmoteClueItem.DHAROKS_GREATAXE_50,
			EmoteClueItem.DHAROKS_GREATAXE_75,
			EmoteClueItem.DHAROKS_GREATAXE_100
	),
	ANY_DHAROKS_HELM("Dharoks helm",
			false,
			EmoteClueItem.DHAROKS_HELM,
			EmoteClueItem.DHAROKS_HELM_0,
			EmoteClueItem.DHAROKS_HELM_25,
			EmoteClueItem.DHAROKS_HELM_50,
			EmoteClueItem.DHAROKS_HELM_75,
			EmoteClueItem.DHAROKS_HELM_100
	),
	ANY_DHAROKS_PLATEBODY("Dharoks platebody",
			false,
			EmoteClueItem.DHAROKS_PLATEBODY,
			EmoteClueItem.DHAROKS_PLATEBODY_0,
			EmoteClueItem.DHAROKS_PLATEBODY_25,
			EmoteClueItem.DHAROKS_PLATEBODY_50,
			EmoteClueItem.DHAROKS_PLATEBODY_75,
			EmoteClueItem.DHAROKS_PLATEBODY_100
	),
	ANY_DHAROKS_PLATELEGS("Dharoks platelegs",
			false,
			EmoteClueItem.DHAROKS_PLATELEGS,
			EmoteClueItem.DHAROKS_PLATELEGS_0,
			EmoteClueItem.DHAROKS_PLATELEGS_25,
			EmoteClueItem.DHAROKS_PLATELEGS_50,
			EmoteClueItem.DHAROKS_PLATELEGS_75,
			EmoteClueItem.DHAROKS_PLATELEGS_100
	),
	ANY_DRAGON_AXE("Dragon Axe",
			false,
			EmoteClueItem.DRAGON_AXE,
			EmoteClueItem.DRAGON_AXE_OR,
			EmoteClueItem.INFERNAL_AXE,
			EmoteClueItem.INFERNAL_AXE_UNCHARGED,
			EmoteClueItem.INFERNAL_AXE_OR,
			EmoteClueItem.INFERNAL_AXE_UNCHARGED_25371
	),
	ANY_DRAGON_BOOTS("Dragon boots", false, EmoteClueItem.DRAGON_BOOTS, EmoteClueItem.DRAGON_BOOTS_G, EmoteClueItem.PRIMORDIAL_BOOTS),
	ANY_DRAGON_CHAINBODY("Dragon chainbody", false, EmoteClueItem.DRAGON_CHAINBODY_3140, EmoteClueItem.DRAGON_CHAINBODY_G),
	ANY_DRAGON_DEFENDER("Dragon defender", false, EmoteClueItem.DRAGON_DEFENDER, EmoteClueItem.DRAGON_DEFENDER_T, EmoteClueItem.DRAGON_DEFENDER_L),
	ANY_DRAGON_OR_AVERNIC_DEFENDER("Dragon or Avernic defender", false, EmoteClueItem.ANY_DRAGON_DEFENDER, EmoteClueItem.ANY_AVERNIC_DEFENDER),
	ANY_DRAGON_OR_CRYSTAL_AXE("Dragon or Crystal axe", false, EmoteClueItem.ANY_DRAGON_AXE, EmoteClueItem.ANY_CRYSTAL_AXE),

	ANY_DRAGON_PICKAXE("Dragon Pickaxe",
			false,
			EmoteClueItem.DRAGON_PICKAXE,
			EmoteClueItem.DRAGON_PICKAXE_12797,
			EmoteClueItem.DRAGON_PICKAXE_OR,
			EmoteClueItem.DRAGON_PICKAXE_OR_25376,
			EmoteClueItem.INFERNAL_PICKAXE,
			EmoteClueItem.INFERNAL_PICKAXE_UNCHARGED,
			EmoteClueItem.INFERNAL_PICKAXE_OR,
			EmoteClueItem.INFERNAL_PICKAXE_UNCHARGED_25369
	),

	ANY_DRAGON_OR_CRYSTAL_PICKAXE("Dragon or Crystal Pickaxe", false, EmoteClueItem.ANY_DRAGON_PICKAXE, EmoteClueItem.ANY_CRYSTAL_PICKAXE),
	ANY_DRAGON_PLATESKIRT("Dragon plateskirt", false, EmoteClueItem.DRAGON_PLATESKIRT, EmoteClueItem.DRAGON_PLATESKIRT_G),
	ANY_DRAGON_SQ_SHIELD("Dragon sq shield", false, EmoteClueItem.DRAGON_SQ_SHIELD, EmoteClueItem.DRAGON_SQ_SHIELD_G),
	ANY_FARMERS_STRAWHAT("Farmer's strawhat", false, EmoteClueItem.FARMERS_STRAWHAT, EmoteClueItem.FARMERS_STRAWHAT_13647),
	ANY_FIRE_CAPE("Fire cape",
			false,
			EmoteClueItem.FIRE_CAPE,
			EmoteClueItem.FIRE_CAPE_L,
			EmoteClueItem.FIRE_MAX_CAPE,
			EmoteClueItem.FIRE_MAX_CAPE_L,
			EmoteClueItem.INFERNAL_CAPE,
			EmoteClueItem.INFERNAL_CAPE_L,
			EmoteClueItem.INFERNAL_MAX_CAPE_21285,
			EmoteClueItem.INFERNAL_MAX_CAPE_L
	),
	ANY_GOD_BOOK("Any god book",
			false,
			EmoteClueItem.HOLY_BOOK,
			EmoteClueItem.BOOK_OF_BALANCE,
			EmoteClueItem.UNHOLY_BOOK,
			EmoteClueItem.BOOK_OF_LAW,
			EmoteClueItem.BOOK_OF_WAR,
			EmoteClueItem.BOOK_OF_DARKNESS,
			EmoteClueItem.HOLY_BOOK_OR,
			EmoteClueItem.BOOK_OF_BALANCE_OR,
			EmoteClueItem.UNHOLY_BOOK_OR,
			EmoteClueItem.BOOK_OF_LAW_OR,
			EmoteClueItem.BOOK_OF_WAR_OR,
			EmoteClueItem.BOOK_OF_DARKNESS_OR
	),
	ANY_GUTHANS_CHAINSKIRT("Guthans chainskirt",
			false,
			EmoteClueItem.GUTHANS_CHAINSKIRT,
			EmoteClueItem.GUTHANS_CHAINSKIRT_0,
			EmoteClueItem.GUTHANS_CHAINSKIRT_25,
			EmoteClueItem.GUTHANS_CHAINSKIRT_50,
			EmoteClueItem.GUTHANS_CHAINSKIRT_75,
			EmoteClueItem.GUTHANS_CHAINSKIRT_100
	),
	ANY_GUTHANS_HELM("Guthans helm",
			false,
			EmoteClueItem.GUTHANS_HELM,
			EmoteClueItem.GUTHANS_HELM_0,
			EmoteClueItem.GUTHANS_HELM_25,
			EmoteClueItem.GUTHANS_HELM_50,
			EmoteClueItem.GUTHANS_HELM_75,
			EmoteClueItem.GUTHANS_HELM_100
	),
	ANY_GUTHANS_PLATEBODY("Guthans platebody",
			false,
			EmoteClueItem.GUTHANS_PLATEBODY,
			EmoteClueItem.GUTHANS_PLATEBODY_0,
			EmoteClueItem.GUTHANS_PLATEBODY_25,
			EmoteClueItem.GUTHANS_PLATEBODY_50,
			EmoteClueItem.GUTHANS_PLATEBODY_75,
			EmoteClueItem.GUTHANS_PLATEBODY_100
	),
	ANY_GUTHANS_WARSPEAR("Guthans warspear",
			false,
			EmoteClueItem.GUTHANS_WARSPEAR,
			EmoteClueItem.GUTHANS_WARSPEAR_0,
			EmoteClueItem.GUTHANS_WARSPEAR_25,
			EmoteClueItem.GUTHANS_WARSPEAR_50,
			EmoteClueItem.GUTHANS_WARSPEAR_75,
			EmoteClueItem.GUTHANS_WARSPEAR_100
	),
	ANY_HEADBAND("Any headband",
			false,
			EmoteClueItem.BLACK_HEADBAND,
			EmoteClueItem.BLUE_HEADBAND,
			EmoteClueItem.BROWN_HEADBAND,
			EmoteClueItem.GOLD_HEADBAND,
			EmoteClueItem.GREEN_HEADBAND,
			EmoteClueItem.PINK_HEADBAND,
			EmoteClueItem.RED_HEADBAND,
			EmoteClueItem.WHITE_HEADBAND
	),
	ANY_HERALDIC_RUNE_HELM("Any heraldic rune helm", false, EmoteClueItem.RUNE_HELM_H1, EmoteClueItem.RUNE_HELM_H2, EmoteClueItem.RUNE_HELM_H3, EmoteClueItem.RUNE_HELM_H4, EmoteClueItem.RUNE_HELM_H5),
	ANY_HERALDIC_RUNE_SHIELD("Any heraldic rune shield",
			false,
			EmoteClueItem.RUNE_SHIELD_H1,
			EmoteClueItem.RUNE_SHIELD_H2,
			EmoteClueItem.RUNE_SHIELD_H3,
			EmoteClueItem.RUNE_SHIELD_H4,
			EmoteClueItem.RUNE_SHIELD_H5
	),
	ANY_IBANS_STAFF("Any iban's staff", false, EmoteClueItem.IBANS_STAFF, EmoteClueItem.IBANS_STAFF_U),
	ANY_KARILS_COIF("Karils coif",
			false,
			EmoteClueItem.KARILS_COIF,
			EmoteClueItem.KARILS_COIF_0,
			EmoteClueItem.KARILS_COIF_25,
			EmoteClueItem.KARILS_COIF_50,
			EmoteClueItem.KARILS_COIF_75,
			EmoteClueItem.KARILS_COIF_100
	),
	ANY_KARILS_CROSSBOW("Karils crossbow",
			false,
			EmoteClueItem.KARILS_CROSSBOW,
			EmoteClueItem.KARILS_CROSSBOW_0,
			EmoteClueItem.KARILS_CROSSBOW_25,
			EmoteClueItem.KARILS_CROSSBOW_50,
			EmoteClueItem.KARILS_CROSSBOW_75,
			EmoteClueItem.KARILS_CROSSBOW_100
	),
	ANY_KARILS_LEATHERSKIRT("Karils leatherskirt",
			false,
			EmoteClueItem.KARILS_LEATHERSKIRT,
			EmoteClueItem.KARILS_LEATHERSKIRT_0,
			EmoteClueItem.KARILS_LEATHERSKIRT_25,
			EmoteClueItem.KARILS_LEATHERSKIRT_50,
			EmoteClueItem.KARILS_LEATHERSKIRT_75,
			EmoteClueItem.KARILS_LEATHERSKIRT_100
	),
	ANY_KARILS_LEATHERTOP("Karils leathertop",
			false,
			EmoteClueItem.KARILS_LEATHERTOP,
			EmoteClueItem.KARILS_LEATHERTOP_0,
			EmoteClueItem.KARILS_LEATHERTOP_25,
			EmoteClueItem.KARILS_LEATHERTOP_50,
			EmoteClueItem.KARILS_LEATHERTOP_75,
			EmoteClueItem.KARILS_LEATHERTOP_100
	),
	ANY_LAVA_BATTLESTAFF("Lava battlestaff", false, EmoteClueItem.LAVA_BATTLESTAFF, EmoteClueItem.LAVA_BATTLESTAFF_21198),

	ANY_MITRE("Any mitre",
			false,
			EmoteClueItem.GUTHIX_MITRE,
			EmoteClueItem.SARADOMIN_MITRE,
			EmoteClueItem.ZAMORAK_MITRE,
			EmoteClueItem.ANCIENT_MITRE,
			EmoteClueItem.BANDOS_MITRE,
			EmoteClueItem.ARMADYL_MITRE
	),
	ANY_PHARAOHS_SCEPTRE("Pharaoh's sceptre",
			false,
			EmoteClueItem.PHARAOHS_SCEPTRE_13074,
			EmoteClueItem.PHARAOHS_SCEPTRE_13075,
			EmoteClueItem.PHARAOHS_SCEPTRE_13076,
			EmoteClueItem.PHARAOHS_SCEPTRE_13077,
			EmoteClueItem.PHARAOHS_SCEPTRE_13078,
			EmoteClueItem.PHARAOHS_SCEPTRE_16176,
			EmoteClueItem.PHARAOHS_SCEPTRE_21445,
			EmoteClueItem.PHARAOHS_SCEPTRE_21446,
			EmoteClueItem.PHARAOHS_SCEPTRE_26948,
			EmoteClueItem.PHARAOHS_SCEPTRE_26950,
			EmoteClueItem.PHARAOHS_SCEPTRE_9045,
			EmoteClueItem.PHARAOHS_SCEPTRE_9046,
			EmoteClueItem.PHARAOHS_SCEPTRE_9047,
			EmoteClueItem.PHARAOHS_SCEPTRE_9048,
			EmoteClueItem.PHARAOHS_SCEPTRE_9049,
			EmoteClueItem.PHARAOHS_SCEPTRE_9050,
			EmoteClueItem.PHARAOHS_SCEPTRE_9051,
			EmoteClueItem.PHARAOHS_SCEPTRE_UNCHARGED,
			EmoteClueItem.PHARAOHS_SCEPTRE
	),
	ANY_PIRATE_BANDANA("Any pirate bandana", false, EmoteClueItem.PIRATE_BANDANA, EmoteClueItem.PIRATE_BANDANA_7124, EmoteClueItem.PIRATE_BANDANA_7130, EmoteClueItem.PIRATE_BANDANA_7136),
	ANY_RUNE_CROSSBOW("Any rune crossbow", false, EmoteClueItem.RUNE_CROSSBOW, EmoteClueItem.RUNE_CROSSBOW_OR),
	ANY_RING_OF_DUELING("Ring of dueling",
			false,
			EmoteClueItem.RING_OF_DUELING1,
			EmoteClueItem.RING_OF_DUELING2,
			EmoteClueItem.RING_OF_DUELING3,
			EmoteClueItem.RING_OF_DUELING4,
			EmoteClueItem.RING_OF_DUELING5,
			EmoteClueItem.RING_OF_DUELING6,
			EmoteClueItem.RING_OF_DUELING7,
			EmoteClueItem.RING_OF_DUELING8
	),
	ANY_RING_OF_SHADOWS("Any ring of shadows", false, EmoteClueItem.RING_OF_SHADOWS, EmoteClueItem.RING_OF_SHADOWS_UNCHARGED),
	ANY_RING_OF_VISIBILITY_OR_SHADOWS("Ring of visibility or shadows", false, EmoteClueItem.RING_OF_VISIBILITY, EmoteClueItem.ANY_RING_OF_SHADOWS),
	ANY_RING_OF_WEALTH("Any ring of wealth",
			false,
			EmoteClueItem.RING_OF_WEALTH,
			EmoteClueItem.RING_OF_WEALTH_1,
			EmoteClueItem.RING_OF_WEALTH_2,
			EmoteClueItem.RING_OF_WEALTH_3,
			EmoteClueItem.RING_OF_WEALTH_4,
			EmoteClueItem.RING_OF_WEALTH_5,
			EmoteClueItem.RING_OF_WEALTH_I,
			EmoteClueItem.RING_OF_WEALTH_I1,
			EmoteClueItem.RING_OF_WEALTH_I2,
			EmoteClueItem.RING_OF_WEALTH_I3,
			EmoteClueItem.RING_OF_WEALTH_I4,
			EmoteClueItem.RING_OF_WEALTH_I5
	),
	ANY_SLAYER_HELMET("Any slayer helmet",
			false,
			EmoteClueItem.BLACK_SLAYER_HELMET_I_25179,
			EmoteClueItem.BLACK_SLAYER_HELMET_I,
			EmoteClueItem.BLACK_SLAYER_HELMET,
			EmoteClueItem.GREEN_SLAYER_HELMET_I_25181,
			EmoteClueItem.GREEN_SLAYER_HELMET_I,
			EmoteClueItem.GREEN_SLAYER_HELMET,
			EmoteClueItem.HYDRA_SLAYER_HELMET_I_25189,
			EmoteClueItem.HYDRA_SLAYER_HELMET_I,
			EmoteClueItem.HYDRA_SLAYER_HELMET,
			EmoteClueItem.PURPLE_SLAYER_HELMET_I_25185,
			EmoteClueItem.PURPLE_SLAYER_HELMET_I,
			EmoteClueItem.PURPLE_SLAYER_HELMET,
			EmoteClueItem.RED_SLAYER_HELMET_I_25183,
			EmoteClueItem.RED_SLAYER_HELMET_I,
			EmoteClueItem.RED_SLAYER_HELMET,
			EmoteClueItem.SLAYER_HELMET_I_25177,
			EmoteClueItem.SLAYER_HELMET_I,
			EmoteClueItem.SLAYER_HELMET,
			EmoteClueItem.TURQUOISE_SLAYER_HELMET_I_25187,
			EmoteClueItem.TURQUOISE_SLAYER_HELMET_I,
			EmoteClueItem.TURQUOISE_SLAYER_HELMET,
			EmoteClueItem.TWISTED_SLAYER_HELMET_I_25191,
			EmoteClueItem.TWISTED_SLAYER_HELMET_I,
			EmoteClueItem.TWISTED_SLAYER_HELMET,
			EmoteClueItem.TZKAL_SLAYER_HELMET_I_25914,
			EmoteClueItem.TZKAL_SLAYER_HELMET_I,
			EmoteClueItem.TZKAL_SLAYER_HELMET,
			EmoteClueItem.TZTOK_SLAYER_HELMET_I_25902,
			EmoteClueItem.TZTOK_SLAYER_HELMET_I,
			EmoteClueItem.TZTOK_SLAYER_HELMET,
			EmoteClueItem.VAMPYRIC_SLAYER_HELMET_I_25908,
			EmoteClueItem.VAMPYRIC_SLAYER_HELMET_I,
			EmoteClueItem.VAMPYRIC_SLAYER_HELMET
	),
	ANY_SPOTTED_CAPE("Spotted Cape", false, EmoteClueItem.SPOTTED_CAPE, EmoteClueItem.SPOTTED_CAPE_10073),
	ANY_STOLE("Any stole",
			false,
			EmoteClueItem.GUTHIX_STOLE,
			EmoteClueItem.SARADOMIN_STOLE,
			EmoteClueItem.BANDOS_STOLE,
			EmoteClueItem.ANCIENT_STOLE,
			EmoteClueItem.ZAMORAK_STOLE,
			EmoteClueItem.ARMADYL_STOLE
	),
	ANY_SUNFIRE_FANATIC_PIECE("Any sunfire fanatic piece",
			false,
			EmoteClueItem.SUNFIRE_FANATIC_HELM,
			EmoteClueItem.SUNFIRE_FANATIC_CUIRASS,
			EmoteClueItem.SUNFIRE_FANATIC_CHAUSSES
	),
	ANY_TEAM_CAPE("Any team cape",
			false,
			EmoteClueItem.TEAM1_CAPE,
			EmoteClueItem.TEAM2_CAPE,
			EmoteClueItem.TEAM3_CAPE,
			EmoteClueItem.TEAM4_CAPE,
			EmoteClueItem.TEAM5_CAPE,
			EmoteClueItem.TEAM6_CAPE,
			EmoteClueItem.TEAM7_CAPE,
			EmoteClueItem.TEAM8_CAPE,
			EmoteClueItem.TEAM9_CAPE,
			EmoteClueItem.TEAM10_CAPE,
			EmoteClueItem.TEAM11_CAPE,
			EmoteClueItem.TEAM12_CAPE,
			EmoteClueItem.TEAM13_CAPE,
			EmoteClueItem.TEAM14_CAPE,
			EmoteClueItem.TEAM15_CAPE,
			EmoteClueItem.TEAM16_CAPE,
			EmoteClueItem.TEAM17_CAPE,
			EmoteClueItem.TEAM18_CAPE,
			EmoteClueItem.TEAM19_CAPE,
			EmoteClueItem.TEAM20_CAPE,
			EmoteClueItem.TEAM21_CAPE,
			EmoteClueItem.TEAM22_CAPE,
			EmoteClueItem.TEAM23_CAPE,
			EmoteClueItem.TEAM24_CAPE,
			EmoteClueItem.TEAM25_CAPE,
			EmoteClueItem.TEAM26_CAPE,
			EmoteClueItem.TEAM27_CAPE,
			EmoteClueItem.TEAM28_CAPE,
			EmoteClueItem.TEAM29_CAPE,
			EmoteClueItem.TEAM30_CAPE,
			EmoteClueItem.TEAM31_CAPE,
			EmoteClueItem.TEAM32_CAPE,
			EmoteClueItem.TEAM33_CAPE,
			EmoteClueItem.TEAM34_CAPE,
			EmoteClueItem.TEAM35_CAPE,
			EmoteClueItem.TEAM36_CAPE,
			EmoteClueItem.TEAM37_CAPE,
			EmoteClueItem.TEAM38_CAPE,
			EmoteClueItem.TEAM39_CAPE,
			EmoteClueItem.TEAM40_CAPE,
			EmoteClueItem.TEAM41_CAPE,
			EmoteClueItem.TEAM42_CAPE,
			EmoteClueItem.TEAM43_CAPE,
			EmoteClueItem.TEAM44_CAPE,
			EmoteClueItem.TEAM45_CAPE,
			EmoteClueItem.TEAM46_CAPE,
			EmoteClueItem.TEAM47_CAPE,
			EmoteClueItem.TEAM48_CAPE,
			EmoteClueItem.TEAM49_CAPE,
			EmoteClueItem.TEAM50_CAPE,
			EmoteClueItem.TEAM_CAPE_X,
			EmoteClueItem.TEAM_CAPE_ZERO
	),
	ANY_TORAGS_HAMMERS("Torags hammers",
			false,
			EmoteClueItem.TORAGS_HAMMERS,
			EmoteClueItem.TORAGS_HAMMERS_0,
			EmoteClueItem.TORAGS_HAMMERS_25,
			EmoteClueItem.TORAGS_HAMMERS_50,
			EmoteClueItem.TORAGS_HAMMERS_75,
			EmoteClueItem.TORAGS_HAMMERS_100
	),
	ANY_TORAGS_HELM("Torags helm",
			false,
			EmoteClueItem.TORAGS_HELM,
			EmoteClueItem.TORAGS_HELM_0,
			EmoteClueItem.TORAGS_HELM_25,
			EmoteClueItem.TORAGS_HELM_50,
			EmoteClueItem.TORAGS_HELM_75,
			EmoteClueItem.TORAGS_HELM_100
	),
	ANY_TORAGS_PLATEBODY("Torags platebody",
			false,
			EmoteClueItem.TORAGS_PLATEBODY,
			EmoteClueItem.TORAGS_PLATEBODY_0,
			EmoteClueItem.TORAGS_PLATEBODY_25,
			EmoteClueItem.TORAGS_PLATEBODY_50,
			EmoteClueItem.TORAGS_PLATEBODY_75,
			EmoteClueItem.TORAGS_PLATEBODY_100
	),
	ANY_TORAGS_PLATELEGS("Torags platelegs",
			false,
			EmoteClueItem.TORAGS_PLATELEGS,
			EmoteClueItem.TORAGS_PLATELEGS_0,
			EmoteClueItem.TORAGS_PLATELEGS_25,
			EmoteClueItem.TORAGS_PLATELEGS_50,
			EmoteClueItem.TORAGS_PLATELEGS_75,
			EmoteClueItem.TORAGS_PLATELEGS_100
	),
	ANY_VERACS_BRASSARD("Veracs brassard",
			false,
			EmoteClueItem.VERACS_BRASSARD,
			EmoteClueItem.VERACS_BRASSARD_0,
			EmoteClueItem.VERACS_BRASSARD_25,
			EmoteClueItem.VERACS_BRASSARD_50,
			EmoteClueItem.VERACS_BRASSARD_75,
			EmoteClueItem.VERACS_BRASSARD_100
	),
	ANY_VERACS_FLAIL("Veracs flail",
			false,
			EmoteClueItem.VERACS_FLAIL,
			EmoteClueItem.VERACS_FLAIL_0,
			EmoteClueItem.VERACS_FLAIL_25,
			EmoteClueItem.VERACS_FLAIL_50,
			EmoteClueItem.VERACS_FLAIL_75,
			EmoteClueItem.VERACS_FLAIL_100
	),
	ANY_VERACS_HELM("Veracs helm",
			false,
			EmoteClueItem.VERACS_HELM,
			EmoteClueItem.VERACS_HELM_0,
			EmoteClueItem.VERACS_HELM_25,
			EmoteClueItem.VERACS_HELM_50,
			EmoteClueItem.VERACS_HELM_75,
			EmoteClueItem.VERACS_HELM_100
	),
	ANY_VERACS_PLATESKIRT("Veracs plateskirt",
			false,
			EmoteClueItem.VERACS_PLATESKIRT,
			EmoteClueItem.VERACS_PLATESKIRT_0,
			EmoteClueItem.VERACS_PLATESKIRT_25,
			EmoteClueItem.VERACS_PLATESKIRT_50,
			EmoteClueItem.VERACS_PLATESKIRT_75,
			EmoteClueItem.VERACS_PLATESKIRT_100
	),
	ANY_ZAMORAK_GODSWORD("Zamorak godsword", false, EmoteClueItem.ZAMORAK_GODSWORD, EmoteClueItem.ZAMORAK_GODSWORD_OR),

	ALL_AHRIMS_SET("Ahrims set", true, EmoteClueItem.ANY_AHRIMS_HOOD, EmoteClueItem.ANY_AHRIMS_ROBESKIRT, EmoteClueItem.ANY_AHRIMS_ROBETOP, EmoteClueItem.ANY_AHRIMS_STAFF),
	ALL_DHAROKS_SET("Dharoks set", true, EmoteClueItem.ANY_DHAROKS_GREATAXE, EmoteClueItem.ANY_DHAROKS_HELM, EmoteClueItem.ANY_DHAROKS_PLATEBODY, EmoteClueItem.ANY_DHAROKS_PLATELEGS),
	ALL_GUTHANS_SET("Guthans set", true, EmoteClueItem.ANY_GUTHANS_CHAINSKIRT, EmoteClueItem.ANY_GUTHANS_HELM, EmoteClueItem.ANY_GUTHANS_PLATEBODY, EmoteClueItem.ANY_GUTHANS_WARSPEAR),
	ALL_KARILS_SET("Karils set", true, EmoteClueItem.ANY_KARILS_COIF, EmoteClueItem.ANY_KARILS_CROSSBOW, EmoteClueItem.ANY_KARILS_LEATHERSKIRT, EmoteClueItem.ANY_KARILS_LEATHERTOP),
	ALL_MENAPHITE_SET_PURPLE("Menaphite set (purple)",
			true,
			EmoteClueItem.MENAPHITE_PURPLE_HAT,
			EmoteClueItem.MENAPHITE_PURPLE_KILT,
			EmoteClueItem.MENAPHITE_PURPLE_ROBE,
			EmoteClueItem.MENAPHITE_PURPLE_TOP
	),
	ALL_MENAPHITE_SET_RED("Menaphite set (red)", true, EmoteClueItem.MENAPHITE_RED_HAT, EmoteClueItem.MENAPHITE_RED_KILT, EmoteClueItem.MENAPHITE_RED_ROBE, EmoteClueItem.MENAPHITE_RED_TOP),
	ALL_TORAGS_SET("Torags set", true, EmoteClueItem.ANY_TORAGS_HAMMERS, EmoteClueItem.ANY_TORAGS_HELM, EmoteClueItem.ANY_TORAGS_PLATEBODY, EmoteClueItem.ANY_TORAGS_PLATELEGS),
	ALL_VERACS_SET("Veracs set", true, ANY_VERACS_BRASSARD, ANY_VERACS_FLAIL, ANY_VERACS_HELM, ANY_VERACS_PLATESKIRT),

	ANY_BARROWS_SET("Any barrows set",
			false,
			EmoteClueItem.ALL_AHRIMS_SET,
			EmoteClueItem.ALL_DHAROKS_SET,
			EmoteClueItem.ALL_GUTHANS_SET,
			EmoteClueItem.ALL_KARILS_SET,
			EmoteClueItem.ALL_TORAGS_SET,
			EmoteClueItem.ALL_VERACS_SET
	),
	ANY_MENAPHITE_SET("Menaphite set", false, EmoteClueItem.ALL_MENAPHITE_SET_PURPLE, ALL_MENAPHITE_SET_RED);

	private final ItemRequirement itemRequirement;
	private final Integer itemId;
	private final String name;

	private final List<EmoteClueItem> children;
	private final List<EmoteClueItem> parents;

	EmoteClueItem(final String name, final int itemId)
	{
		this.itemRequirement = ItemRequirements.item(itemId);
		this.itemId = itemId;
		this.name = name;
		this.children = new ArrayList<>();
		this.parents = new ArrayList<>();
	}

	EmoteClueItem(final String name, final Boolean isStrong, final EmoteClueItem... emoteClueItems)
	{
		this.itemRequirement = isStrong ? ItemRequirements.all(emoteClueItems) : ItemRequirements.any(name, emoteClueItems);
		this.itemId = null;
		this.name = name;
		this.children = Arrays.asList(emoteClueItems);
		for (final EmoteClueItem child : emoteClueItems)
		{
			child.addParent(this);
		}
		this.parents = new ArrayList<>();
	}

	public final List<EmoteClueItem> getChildren()
	{
		return this.children;
	}

	public final List<EmoteClueItem> getParents()
	{
		return this.parents;
	}

	public final Integer getItemId()
	{
		return this.itemId;
	}

	public final void addParent(final EmoteClueItem parent)
	{
		this.parents.add(parent);
	}

	public ItemRequirement getItemRequirement()
	{
		return this.itemRequirement;
	}

	@Override
	public boolean fulfilledBy(final int itemId)
	{
		return this.itemRequirement.fulfilledBy(itemId);
	}

	@Override
	public boolean fulfilledBy(final Item[] items)
	{
		return this.itemRequirement.fulfilledBy(items);
	}

	@Override
	public String getCollectiveName(final Client $)
	{
		return this.getCollectiveName();
	}

	public String getCollectiveName()
	{
		return this.name;
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems.data;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

import java.awt.*;

/**
 * Contains values for all {@link EmoteClue} difficulties.
 *
 * @author Lars van Soest
 * @since 2.0.0
 */
@Getter
@RequiredArgsConstructor
public enum EmoteClueDifficulty
{
	Beginner(new Color(169, 158, 157)),

	Easy(new Color(9, 96, 13)),

	Medium(new Color(86, 150, 153)),

	Hard(new Color(131, 55, 152)),

	Elite(new Color(189, 165, 24)),

	Master(new Color(155, 48, 38));

	private final Color color;
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems;

import com.google.inject.Provides;
import com.larsvansoest.runelite.clueitems.data.StashUnit;
import com.larsvansoest.runelite.clueitems.map.StashUnitWorldMapMarker;
import com.larsvansoest.runelite.clueitems.overlay.EmoteClueItemsOverlay;
import com.larsvansoest.runelite.clueitems.overlay.Widget;
import com.larsvansoest.runelite.clueitems.overlay.WidgetInspector;
import com.larsvansoest.runelite.clueitems.progress.ProgressManager;
import com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPalette;
import com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPanel;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.worldmap.WorldMapPointManager;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import javax.swing.*;
import java.util.List;
import java.util.Objects;

/**
 * Main class of the plugin.
 * <p>
 * Provides the user with an overlay and item collection database to track {@link com.larsvansoest.runelite.clueitems.data.EmoteClue} requirement progression.
 *
 * @see com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPanel
 * @see com.larsvansoest.runelite.clueitems.overlay.EmoteClueItemsOverlay
 */
@Slf4j
@PluginDescriptor(name = "Emote Clue Items",
                  description = "Highlight required items for emote clue steps.",
                  tags = {"emote", "clue", "item", "items", "scroll"})
public class EmoteClueItemsPlugin extends Plugin
{
	@Inject
	private Client client;
	@Inject
	private ClientThread clientThread;
	@Inject
	private EmoteClueItemsConfig config;
	@Inject
	private ConfigManager configManager;
	@Inject
	private OverlayManager overlayManager;
	@Inject
	private ItemManager itemManager;
	@Inject
	private ClientToolbar clientToolbar;
	@Inject
	private WorldMapPointManager worldMapPointManager;

	private StashUnitWorldMapMarker stashUnitWorldMapMarker = null;

	private EmoteClueItemsOverlay overlay;
	private NavigationButton navigationButton;
	private ProgressManager progressManager;
	private EmoteClueItemsPanel emoteClueItemsPanel;

	private boolean updateStashBuiltStatusOnNextGameTick;
	private boolean showUnopenedInterfaceNotification;

	private Integer cachedPlayerConstructionLevel;
	private boolean readWatsonOnNextGameTick;

	private boolean isPlayerLoggedIn;

	@Override
	protected void startUp()
	{
		final EmoteClueItemsPalette emoteClueItemsPalette = EmoteClueItemsPalette.RUNELITE;

		this.emoteClueItemsPanel = new EmoteClueItemsPanel(emoteClueItemsPalette,
				this.itemManager,
				this::onUserSetStashUnitFillStatus,
				this::addStashUnitMarkerToMap,
				this::removeStashUnitMarkerFromMap,
				"Emote Clue Items",
				"v4.3.4",
				"https://github.com/larsvansoest/emote-clue-items",
				"https://www.paypal.com/donate/?hosted_button_id=72AFNGL28LFEN"
		);

		this.progressManager = new ProgressManager(this.client,
				this.clientThread,
				this.configManager,
				this.config,
				this.itemManager,
				this.emoteClueItemsPanel::setEmoteClueItemQuantity,
				this.emoteClueItemsPanel::setEmoteClueItemCollectionLogStatus,
				this.emoteClueItemsPanel::setEmoteClueItemStatus
		);

		this.navigationButton = NavigationButton
				.builder()
				.tooltip("Emote Clue Items")
				.icon(ImageUtil.resizeCanvas(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Ribbon.ALL, 16, 16))
				.priority(7)
				.panel(this.emoteClueItemsPanel)
				.build();

		this.toggleCollectionLog(this.config.showNavigation());

		this.overlay = new EmoteClueItemsOverlay(this.client, this.clientThread, this.itemManager, this.config, this.progressManager);
		this.overlayManager.add(this.overlay);

		this.reset();
	}

	private void onUserSetStashUnitFillStatus(StashUnit stashUnit, Boolean filled) {
		this.progressManager.setStashUnitFilled(stashUnit, filled);
	}

	private void reset()
	{
		this.progressManager.reset();
		this.emoteClueItemsPanel.reset();

		final String loginDisclaimer = "To start display of progression, please login first.";
		for (final StashUnit stashUnit : StashUnit.values())
		{
			this.emoteClueItemsPanel.turnOnSTASHFilledButton(stashUnit);
			this.emoteClueItemsPanel.turnOffSTASHFilledButton(stashUnit, new ImageIcon(EmoteClueItemsImages.Icons.CheckSquare.WAITING), loginDisclaimer);
		}
		this.emoteClueItemsPanel.setEmoteClueItemGridDisclaimer(loginDisclaimer);
		this.emoteClueItemsPanel.setSTASHUnitGridDisclaimer(loginDisclaimer);

		this.updateStashBuiltStatusOnNextGameTick = false;
		this.readWatsonOnNextGameTick = false;
		this.showUnopenedInterfaceNotification = this.config.notifyUnopenedInterfaces();
		this.cachedPlayerConstructionLevel = null;

		if (this.client.getGameState() == GameState.LOGGED_IN)
		{
			this.onPlayerLoggedIn();
		}

		this.removeStashUnitMarkerFromMap();
	}

	private void addStashUnitMarkerToMap(final StashUnit stashUnit, final boolean built) {
		removeStashUnitMarkerFromMap();
		if (Objects.isNull(this.stashUnitWorldMapMarker)) {
			this.stashUnitWorldMapMarker = new StashUnitWorldMapMarker(stashUnit, built);
		}

		this.stashUnitWorldMapMarker.setStashUnit(stashUnit, built);
		this.worldMapPointManager.add(this.stashUnitWorldMapMarker);
		this.overlay.addWorldMarker(this.stashUnitWorldMapMarker);
	}

	private void removeStashUnitMarkerFromMap() {
		this.worldMapPointManager.remove(this.stashUnitWorldMapMarker);
		this.overlay.clearWorldMarkers();
	}

	private void updateStashUnitBuildStatuses()
	{
		this.clientThread.invoke(() ->
		{
			for (final StashUnit stashUnit : StashUnit.values())
			{
				this.client.runScript(ScriptID.WATSON_STASH_UNIT_CHECK, stashUnit.getStashUnit().getObjectId(), 0, 0, 0);
				final boolean built = this.client.getIntStack()[0] == 1;
				this.emoteClueItemsPanel.turnOnSTASHFilledButton(stashUnit);
				this.emoteClueItemsPanel.setSTASHUnitStatus(stashUnit, built, this.progressManager.getStashUnitFilled(stashUnit));
			}
		});
	}

	private void onPlayerLoggedIn()
	{
		this.progressManager.validateConfig();
		this.updateStashBuiltStatusOnNextGameTick = true;
		this.emoteClueItemsPanel.removeEmoteClueItemGridDisclaimer();
		this.emoteClueItemsPanel.removeSTASHUnitGridDisclaimer();
		this.clientThread.invoke(this::setupUnopenedInterfaceNotification);
		this.clientThread.invoke(() -> {
			int playerConstructionLevel = client.getBoostedSkillLevel(Skill.CONSTRUCTION);
			this.updatePlayerConstructionLevel(playerConstructionLevel);
		});
		this.emoteClueItemsPanel.enableMapLinks();
	}

	private void updatePlayerConstructionLevel(Integer level) {
		if (!Objects.equals(this.cachedPlayerConstructionLevel, level)) {
			this.cachedPlayerConstructionLevel = level;
			this.emoteClueItemsPanel.setPlayerConstructionLevel(level);
		}
	}

	private void setupUnopenedInterfaceNotification()
	{
		this.clientThread.invoke(() ->
		{
			if (this.client.getGameState() == GameState.LOGGED_IN)
			{
				this.emoteClueItemsPanel.removeEmoteClueItemGridDisclaimer();
				if (this.showUnopenedInterfaceNotification)
				{
					final List<String> unopenedInterfaces = this.progressManager.getUnopenedInterfaces();
					if (this.config.notifyUnopenedInterfaces() && unopenedInterfaces.size() > 0)
					{
						final String notification = String.format("Not all items may be displayed. Please open your %s first.", String.join(", ", unopenedInterfaces));
						this.emoteClueItemsPanel.setEmoteClueItemGridDisclaimer(notification, () ->
						{
							this.showUnopenedInterfaceNotification = false;
						});
					}
				}
			}
		});
	}

		private void toggleCollectionLog(final boolean visible)
	{
		if (visible)
		{
			this.clientToolbar.addNavigation(this.navigationButton);
		}
		else
		{
			this.clientToolbar.removeNavigation(this.navigationButton);
		}
	}

	@Subscribe
	protected void onWidgetLoaded(final WidgetLoaded event) {
		if (event.getGroupId() == Widget.WATSON_NOTICE_BOARD.groupId && this.config.autoSyncWatsonBoard()) {
			this.readWatsonOnNextGameTick = true;
		}
	}

	@Subscribe
	protected void onWidgetClosed(final WidgetClosed event) {
		if (event.getGroupId() == Widget.WATSON_NOTICE_BOARD.groupId) {
			this.readWatsonOnNextGameTick = false;
		}
	}

	@Subscribe
	protected void onGameStateChanged(final GameStateChanged event)
	{
		if (event.getGameState() == GameState.LOGIN_SCREEN)
		{
			this.reset();
			this.isPlayerLoggedIn = false;
		}
		if (!isPlayerLoggedIn &&
			event.getGameState() == GameState.LOGGED_IN)
		{
			this.onPlayerLoggedIn();
			this.isPlayerLoggedIn = true;
		}
	}

	@Subscribe
	protected void onStatChanged(final StatChanged event) {
		if (Objects.equals(event.getSkill(), Skill.CONSTRUCTION)) {
			this.updatePlayerConstructionLevel(event.getLevel());
		}
	}

	@Subscribe
	protected void onChatMessage(final ChatMessage event)
	{
		if (event.getType() == ChatMessageType.SPAM && event.getMessage().equals("You build a STASH unit."))
		{
			this.updateStashUnitBuildStatuses();
		}
	}

	@Subscribe
	protected void onItemContainerChanged(final ItemContainerChanged event)
	{
		this.progressManager.processInventoryChanges(event.getContainerId(), event.getItemContainer().getItems());
		this.clientThread.invoke(this::setupUnopenedInterfaceNotification);
	}

	@Subscribe
	public void onGameTick(final GameTick event)
	{
		if (this.updateStashBuiltStatusOnNextGameTick)
		{
			this.updateStashBuiltStatusOnNextGameTick = false;
			this.updateStashUnitBuildStatuses();
		}
		if (this.readWatsonOnNextGameTick)
		{
			final boolean readComplete = WidgetInspector.TryReadWatsonBoard(this.client, (difficulty -> (watsonLocation, filled) -> {
				StashUnit stashUnit = StashUnit.fromWatsonLocation(watsonLocation, difficulty);
				if(Objects.nonNull(stashUnit)) {
					this.progressManager.setStashUnitFilled(stashUnit, filled);
					this.emoteClueItemsPanel.setStashUnitFilledStatus(stashUnit, filled);
				}
			}));
			this.readWatsonOnNextGameTick = !readComplete;
		}
	}

	@Subscribe
	protected void onConfigChanged(final ConfigChanged event)
	{
		final String key = event.getKey();

		// Switching to a new config profile sets values to null;
		final boolean isNull = Objects.isNull(event.getNewValue());
		final boolean isTrue = !isNull && event.getNewValue().equals("true");

		// If null, use config default
		final boolean isTrueOrDefaultTrue = isNull || isTrue;
		final boolean isTrueOrDefaultFalse = !isNull && isTrue;

		switch (key)
		{
			case "TrackBank":
				this.progressManager.toggleBankTracking(isTrueOrDefaultTrue);
				this.setupUnopenedInterfaceNotification();
				break;
			case "TrackInventory":
				this.progressManager.toggleInventoryTracking(isTrueOrDefaultTrue);
				this.setupUnopenedInterfaceNotification();
				break;
			case "TrackEquipment":
				this.progressManager.toggleEquipmentTracking(isTrueOrDefaultTrue);
				this.setupUnopenedInterfaceNotification();
				break;
			case "TrackGroupStorage":
				this.progressManager.toggleGroupStorageTracking(isTrueOrDefaultFalse);
				this.setupUnopenedInterfaceNotification();
				break;
			case "NotifyUnopenedInterfaces":
				this.showUnopenedInterfaceNotification = isTrueOrDefaultTrue;
				this.setupUnopenedInterfaceNotification();
				break;
			case "ShowNavigation":
				this.toggleCollectionLog(isTrueOrDefaultTrue);
				break;
			case "AutoSyncWatsonBoard":
				final boolean isWatsonBoardOpen = Objects.nonNull(this.client.getWidget(493, 0));
				this.readWatsonOnNextGameTick = isWatsonBoardOpen && isTrueOrDefaultFalse;
				break;
			default:
				break;
		}
	}

	@Override
	protected void shutDown()
	{
		this.overlayManager.remove(this.overlay);
		this.clientToolbar.removeNavigation(this.navigationButton);
		this.removeStashUnitMarkerFromMap();
	}

	@Provides
	EmoteClueItemsConfig provideConfig(final ConfigManager configManager)
	{
		return configManager.getConfig(EmoteClueItemsConfig.class);
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems;

import com.larsvansoest.runelite.clueitems.data.EmoteClueDifficulty;
import net.runelite.client.util.ImageUtil;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.Objects;

/**
 * Provides static objects for each image used by {@link EmoteClueItemsPlugin}.
 *
 * @author Lars van Soest
 * @since 2.0.0
 */
public abstract class EmoteClueItemsImages
{
	private static final String folder = "/images";

	private static BufferedImage getBufferedImage(final String folder, final String name)
	{
		return ImageUtil.loadImageResource(EmoteClueItemsPlugin.class, path(folder, name));
	}

	private static String path(final String current, final String next)
	{
		return String.format("%s/%s", current, next);
	}

	public static final class Utils {
		private Utils()
		{

		}

		private static final Color TRANSPARENT = new Color(0, 0, 0, 0);

		public static BufferedImage createBufferFromImage(BufferedImage image) {
			return ImageUtil.fillImage(image, TRANSPARENT);
		}

		public static void drawIconWithBackground(BufferedImage bufferedImage, BufferedImage background, BufferedImage icon, double devideX, double devideY) {
			Graphics g2d = bufferedImage.createGraphics();
			g2d.drawImage(background, 0, 0, null);
			if (Objects.nonNull(icon) && devideX != 0 && devideY != 0) {
				final int x = Math.max((int)((background.getWidth() - icon.getWidth()) / devideX), 0);
				final int y = Math.max((int)((background.getHeight() - icon.getHeight()) / devideY), 0);
				g2d.drawImage(icon, x, y, null);
			}
			g2d.dispose();
		}
	}

	public static final class RuneLite
	{
		private static final String folder = "/util";

		public static final BufferedImage CLUE_ARROW = getBufferedImage(RuneLite.folder, "clue_arrow.png");

		private RuneLite()
		{
		}
	}

	public static final class MapOrb
	{
		private static final String folder = path(EmoteClueItemsImages.folder, "map-orb");

		public static final BufferedImage ORB = getBufferedImage(MapOrb.folder, "orb.png");

		public static final BufferedImage ORB_0 = getBufferedImage(MapOrb.folder, "orb-0.png");
		public static final BufferedImage ORB_90 = getBufferedImage(MapOrb.folder, "orb-90.png");
		public static final BufferedImage ORB_180 = getBufferedImage(MapOrb.folder, "orb-180.png");
		public static final BufferedImage ORB_270 = getBufferedImage(MapOrb.folder, "orb-270.png");
		public static final BufferedImage ORB_45 = getBufferedImage(MapOrb.folder, "orb-45.png");
		public static final BufferedImage ORB_135 = getBufferedImage(MapOrb.folder, "orb-135.png");
		public static final BufferedImage ORB_225 = getBufferedImage(MapOrb.folder, "orb-225.png");
		public static final BufferedImage ORB_315 = getBufferedImage(MapOrb.folder, "orb-315.png");

		private MapOrb()
		{
		}
	}

	public static final class Icons
	{
		private static final String folder = path(EmoteClueItemsImages.folder, "icons");
		public static final BufferedImage CLOSE = getBufferedImage(Icons.folder, "close.png");
		public static final BufferedImage GITHUB = getBufferedImage(Icons.folder, "github.png");
		public static final BufferedImage PAYPAL = getBufferedImage(Icons.folder, "paypal.png");
		public static final BufferedImage QUESTION = getBufferedImage(Icons.folder, "question.png");

		private Icons()
		{
		}

		public static final class CheckSquare
		{
			private static final String folder = path(Icons.folder, "check-square");

			public static final BufferedImage UNKNOWN = getBufferedImage(CheckSquare.folder, "unknown.png");
			public static final BufferedImage COMPLETE = getBufferedImage(CheckSquare.folder, "complete.png");
			public static final BufferedImage INCOMPLETE = getBufferedImage(CheckSquare.folder, "incomplete.png");
			public static final BufferedImage INCOMPLETE_EMPTY = getBufferedImage(CheckSquare.folder, "incomplete-empty.png");
			public static final BufferedImage IN_PROGRESS = getBufferedImage(CheckSquare.folder, "in-progress.png");
			public static final BufferedImage WAITING = getBufferedImage(CheckSquare.folder, "waiting.png");
			public static final BufferedImage UNBUILT = getBufferedImage(CheckSquare.folder, "unbuilt.png");

			private CheckSquare()
			{
			}
		}

		public static final class Chevron
		{
			private static final String folder = path(Icons.folder, "chevron");

			public static final BufferedImage DOWN = getBufferedImage(Chevron.folder, "down.png");
			public static final BufferedImage LEFT = getBufferedImage(Chevron.folder, "left.png");

			private Chevron()
			{
			}
		}

		public static final class Location
		{
			private static final String folder = path(Icons.folder, "location");

			public static final BufferedImage PIN = getBufferedImage(Location.folder, "pin.png");
			public static final BufferedImage PIN_DELETE = getBufferedImage(Location.folder, "pin-delete.png");

			private Location()
			{
			}
		}

		public static final class RuneScape
		{
			private static final String folder = path(Icons.folder, "runescape");

			public static final BufferedImage INVENTORY = getBufferedImage(RuneScape.folder, "inventory.png");

			private RuneScape()
			{
			}

			public static final class EmoteClue
			{
				private static final String folder = path(RuneScape.folder, "emote-clue");

				private EmoteClue()
				{
				}

				public static final class Ribbon
				{
					private static final String folder = path(EmoteClue.folder, "ribbon");

					public static final BufferedImage ALL = getBufferedImage(Ribbon.folder, "all.png");
					public static final BufferedImage BEGINNER = getBufferedImage(Ribbon.folder, "beginner.png");
					public static final BufferedImage EASY = getBufferedImage(Ribbon.folder, "easy.png");
					public static final BufferedImage MEDIUM = getBufferedImage(Ribbon.folder, "medium.png");
					public static final BufferedImage HARD = getBufferedImage(Ribbon.folder, "hard.png");
					public static final BufferedImage ELITE = getBufferedImage(Ribbon.folder, "elite.png");
					public static final BufferedImage MASTER = getBufferedImage(Ribbon.folder, "master.png");

					private Ribbon()
					{
					}

					public static BufferedImage get(final EmoteClueDifficulty emoteClueDifficulty)
					{
						switch (emoteClueDifficulty)
						{
							case Beginner:
								return Ribbon.BEGINNER;
							case Easy:
								return Ribbon.EASY;
							case Medium:
								return Ribbon.MEDIUM;
							case Hard:
								return Ribbon.HARD;
							case Elite:
								return Ribbon.ELITE;
							case Master:
								return Ribbon.MASTER;
							default:
								throw new IllegalArgumentException();
						}
					}
				}

				public static final class Scroll
				{
					private static final String folder = path(EmoteClue.folder, "scroll");
					public static final BufferedImage BEGINNER = getBufferedImage(Scroll.folder, "beginner.png");
					public static final BufferedImage EASY = getBufferedImage(Scroll.folder, "easy.png");
					public static final BufferedImage MEDIUM = getBufferedImage(Scroll.folder, "medium.png");
					public static final BufferedImage HARD = getBufferedImage(Scroll.folder, "hard.png");
					public static final BufferedImage ELITE = getBufferedImage(Scroll.folder, "elite.png");
					public static final BufferedImage MASTER = getBufferedImage(Scroll.folder, "master.png");

					private Scroll()
					{
					}

					public static BufferedImage get(final EmoteClueDifficulty emoteClueDifficulty)
					{
						switch (emoteClueDifficulty)
						{
							case Beginner:
								return Scroll.BEGINNER;
							case Easy:
								return Scroll.EASY;
							case Medium:
								return Scroll.MEDIUM;
							case Hard:
								return Scroll.HARD;
							case Elite:
								return Scroll.ELITE;
							case Master:
								return Scroll.MASTER;
							default:
								throw new IllegalArgumentException();
						}
					}
				}
			}

			public static final class StashUnit
			{
				private static final String folder = path(RuneScape.folder, "stash-unit");

				public static final BufferedImage BUSH = getBufferedImage(StashUnit.folder, "bush.png");
				public static final BufferedImage BUSH_SMALL = getBufferedImage(StashUnit.folder, "bush-small.png");
				public static final BufferedImage BUSH_BUILT = getBufferedImage(StashUnit.folder, "bush-built.png");
				public static final BufferedImage BUSH_BUILT_SMALL = getBufferedImage(StashUnit.folder, "bush-built-small.png");
				public static final BufferedImage CRATE = getBufferedImage(StashUnit.folder, "crate.png");
				public static final BufferedImage CRATE_SMALL = getBufferedImage(StashUnit.folder, "crate-small.png");
				public static final BufferedImage CRATE_BUILT = getBufferedImage(StashUnit.folder, "crate-built.png");
				public static final BufferedImage CRATE_BUILT_SMALL = getBufferedImage(StashUnit.folder, "crate-built-small.png");
				public static final BufferedImage HOLE = getBufferedImage(StashUnit.folder, "hole.png");
				public static final BufferedImage HOLE_SMALL = getBufferedImage(StashUnit.folder, "hole-small.png");
				public static final BufferedImage HOLE_BUILT = getBufferedImage(StashUnit.folder, "hole-built.png");
				public static final BufferedImage HOLE_BUILT_SMALL = getBufferedImage(StashUnit.folder, "hole-built-small.png");
				public static final BufferedImage ROCK = getBufferedImage(StashUnit.folder, "rock.png");
				public static final BufferedImage ROCK_SMALL = getBufferedImage(StashUnit.folder, "rock-small.png");
				public static final BufferedImage ROCK_BUILT = getBufferedImage(StashUnit.folder, "rock-built.png");
				public static final BufferedImage ROCK_BUILT_SMALL = getBufferedImage(StashUnit.folder, "rock-built-small.png");

				private StashUnit()
				{
				}

				public static BufferedImage get(final com.larsvansoest.runelite.clueitems.data.StashUnit.Type type, final boolean built, final boolean small)
				{
					if (built)
					{
						if (small)
						{
							return getBuiltSmall(type);
						}
						return getBuilt(type);
					}
					if (small)
					{
						return getSmall(type);
					}
					return get(type);
				}

				private static BufferedImage get(final com.larsvansoest.runelite.clueitems.data.StashUnit.Type type)
				{
					switch (type)
					{
						case Bush:
							return StashUnit.BUSH;
						case Hole:
							return StashUnit.HOLE;
						case Rock:
							return StashUnit.ROCK;
						default:
							return StashUnit.CRATE;
					}
				}

				private static BufferedImage getBuilt(final com.larsvansoest.runelite.clueitems.data.StashUnit.Type type)
				{
					switch (type)
					{
						case Bush:
							return StashUnit.BUSH_BUILT;
						case Hole:
							return StashUnit.HOLE_BUILT;
						case Rock:
							return StashUnit.ROCK_BUILT;
						default:
							return StashUnit.CRATE_BUILT;
					}
				}

				private static BufferedImage getSmall(final com.larsvansoest.runelite.clueitems.data.StashUnit.Type type)
				{
					switch (type)
					{
						case Bush:
							return StashUnit.BUSH_SMALL;
						case Hole:
							return StashUnit.HOLE_SMALL;
						case Rock:
							return StashUnit.ROCK_SMALL;
						default:
							return StashUnit.CRATE_SMALL;
					}
				}

				private static BufferedImage getBuiltSmall(final com.larsvansoest.runelite.clueitems.data.StashUnit.Type type)
				{
					switch (type)
					{
						case Bush:
							return StashUnit.BUSH_BUILT_SMALL;
						case Hole:
							return StashUnit.HOLE_BUILT_SMALL;
						case Rock:
							return StashUnit.ROCK_BUILT_SMALL;
						default:
							return StashUnit.CRATE_BUILT_SMALL;
					}
				}
			}
		}

		public static final class SortType
		{
			private static final String folder = path(Icons.folder, "sort-type");

			public static final BufferedImage NAME_ASCENDING = getBufferedImage(SortType.folder, "name-ascending.png");
			public static final BufferedImage NAME_DESCENDING = getBufferedImage(SortType.folder, "name-descending.png");
			public static final BufferedImage QUANTITY_ASCENDING = getBufferedImage(SortType.folder, "quantity-ascending.png");
			public static final BufferedImage QUANTITY_DESCENDING = getBufferedImage(SortType.folder, "quantity-descending.png");

			private SortType()
			{
			}
		}
	}
}
package com.larsvansoest.runelite.clueitems.progress;

import com.larsvansoest.runelite.clueitems.data.StashUnit;
import lombok.RequiredArgsConstructor;
import net.runelite.client.config.ConfigManager;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.StringUtils;

import java.util.Arrays;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Provides utility to write and read stash fill status to Runelite's {@link net.runelite.client.config.ConfigManager}.
 *
 * @author Lars van Soest
 * @since 3.0.0
 */
@RequiredArgsConstructor
class StashMonitor
{
	private static final int[] STASH_IDS_ORDERED = Arrays.stream(StashUnit.values()).mapToInt(stashUnit -> stashUnit.getStashUnit().getObjectId()).sorted().toArray();
	private static final String STASH_IDS_ORDERED_FINGERPRINT = Arrays.stream(STASH_IDS_ORDERED).mapToObj(String::valueOf).collect(Collectors.joining("-"));

	// Configuration group and key previously used. Changed to a less risky string format.
	private static final String LEGACY_GROUP = "[EmoteClueItems]";
	private static final String LEGACY_FILLED_KEY = "STASHUnit fill statuses";
	private static final String LEGACY_FINGERPRINT_KEY = "_fingerprint";

	private static final String GROUP = "emote-clue-items";
	private static final String FILLED_KEY = "stashes-filled";
	private static final String FINGERPRINT_KEY = "stashes-fingerprint";

	private final ConfigManager config;

	/**
	 * Toggles STASHUnit filled status.
	 *
	 * @param stashUnit The STASHunit.
	 * @param filled    The filled status.
	 */
	public void setStashFilled(final StashUnit stashUnit, final boolean filled)
	{
		final String stashes = this.config.getRSProfileConfiguration(GROUP, FILLED_KEY);
		if (Objects.nonNull(stashes)) // validated, player is logged in.
		{
			final StringBuilder stashesBuilder = new StringBuilder(stashes);
			stashesBuilder.setCharAt(ArrayUtils.indexOf(STASH_IDS_ORDERED, stashUnit.getStashUnit().getObjectId()), filled ? 't' : 'f');
			this.config.setRSProfileConfiguration(GROUP, FILLED_KEY, stashesBuilder.toString());
		}
	}

	/**
	 * Returns whether a STASHUnit is filled.
	 *
	 * @param stashUnit The STASHUnit
	 * @return True if filled, false otherwise.
	 */
	public boolean getStashFilled(final StashUnit stashUnit)
	{
		final String stashes = this.config.getRSProfileConfiguration(GROUP, FILLED_KEY);
		if (Objects.isNull(stashes))
		{
			return false;
		}
		final char stash = stashes.charAt(ArrayUtils.indexOf(STASH_IDS_ORDERED, stashUnit.getStashUnit().getObjectId()));
		return stash == 't';
	}

	/**
	 * Synchronises STASHUnit filled status list with the cloud.
	 * <p>
	 * Verifies integrity of cloud data. Clears the data if STASHUnit id list was changed by RuneLite.
	 */
	public void validate()
	{
		this.migrateConfig();

		final String stashes = this.config.getRSProfileConfiguration(GROUP, FILLED_KEY);
		final String fingerPrint = this.config.getRSProfileConfiguration(GROUP, FINGERPRINT_KEY);
		if (Objects.isNull(stashes) || Objects.isNull(fingerPrint) || !fingerPrint.equals(STASH_IDS_ORDERED_FINGERPRINT) || stashes.length() != STASH_IDS_ORDERED.length)
		{
			this.config.setRSProfileConfiguration(GROUP, FILLED_KEY, StringUtils.repeat('f', STASH_IDS_ORDERED.length));
			this.config.setRSProfileConfiguration(GROUP, FINGERPRINT_KEY, STASH_IDS_ORDERED_FINGERPRINT);
		}
	}

	/**
	 * Moves config values from previously used keys to new keys.
	 * <p>
	 * Previously used keys were of risky format.
	 */
	@Deprecated
	private void migrateConfig()
	{
		final String legacyFilledConfig = this.config.getRSProfileConfiguration(LEGACY_GROUP, LEGACY_FILLED_KEY);
		final String filledConfig = this.config.getRSProfileConfiguration(GROUP, FILLED_KEY);

		if (Objects.nonNull(legacyFilledConfig) && Objects.isNull(filledConfig))
		{
			this.config.setRSProfileConfiguration(GROUP, FILLED_KEY, legacyFilledConfig);
		}

		final String legacyFingerprintConfig = this.config.getRSProfileConfiguration(LEGACY_GROUP, LEGACY_FINGERPRINT_KEY);
		final String fingerprintConfig = this.config.getRSProfileConfiguration(GROUP, FINGERPRINT_KEY);

		if (Objects.nonNull(legacyFingerprintConfig) && Objects.isNull(fingerprintConfig))
		{
			this.config.setRSProfileConfiguration(GROUP, FINGERPRINT_KEY, legacyFingerprintConfig.replace(',', '-'));
		}
	}
}
/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems.progress;

import lombok.NonNull;
import net.runelite.api.Item;
import net.runelite.api.ItemComposition;
import net.runelite.client.game.ItemManager;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Keeps track of items inside an item container.
 *
 * @see com.larsvansoest.runelite.clueitems.progress.InventoryMonitor
 * @since v2.0.0
 */
class ItemTracker
{
	private final ItemManager itemManager;

	private final ArrayList<Item> items;

	public ItemTracker(final ItemManager itemManager)
	{
		this.itemManager = itemManager;

		this.items = new ArrayList<>();
	}

	/**
	 * Returns a collection of all items in the container.
	 *
	 * @return The dictionary of items, the key represents the item id, and the value the amount.
	 */
	public Map<Integer, Integer> getItems()
	{
		return this.items.stream().filter(item -> item.getId() != -1).collect(Collectors.toMap(Item::getId, Item::getQuantity, Integer::sum));
	}

	/**
	 * Clears all item data.
	 */
	public void reset()
	{
		this.items.clear();
	}

	/**
	 * Writes items inside the container to the stored item data.
	 * <p>
	 * Returns a collection of item changes.
	 *
	 * @param items The items inside the container.
	 * @return The dictionary of items, the key represents the item id, and the value the amount changed.
	 */
	public Map<Integer, Integer> writeDeltas(
			@NonNull
			final Item[] items)
	{
		final HashMap<Integer, Integer> deltas = new HashMap<>();
		for (int i = 0; i < items.length; i++)
		{
			if (this.items.size() == i)
			{
				this.items.add(new Item(-1, 0));
			}

			final Item previousItem = this.items.get(i);
			final Item currentItem = this.canonicalize(items[i]);
			this.items.set(i, currentItem);

			final int currentItemId = currentItem.getId();
			final int currentQuantity = currentItem.getQuantity();
			final int previousItemId = previousItem.getId();
			final int previousQuantity = previousItem.getQuantity();

			if (previousItemId != currentItemId)
			{
				if (previousItemId == -1)
				{
					deltas.put(currentItemId, deltas.getOrDefault(currentItemId, 0) + currentQuantity);
				}
				else if (currentItemId == -1)
				{
					deltas.put(previousItemId, deltas.getOrDefault(previousItemId, 0) - previousQuantity);
				}
				else
				{
					deltas.put(currentItemId, deltas.getOrDefault(currentItemId, 0) + currentQuantity);
					deltas.put(previousItemId, deltas.getOrDefault(previousItemId, 0) - previousQuantity);
				}
			}
			else if (previousQuantity != currentQuantity)
			{
				deltas.put(currentItemId, deltas.getOrDefault(currentItemId, 0) + (currentQuantity - previousQuantity));
			}
		}
		return deltas;
	}

	private Item canonicalize(final Item item)
	{
		final ItemComposition itemComposition = this.itemManager.getItemComposition(item.getId());
		final int quantity = itemComposition.getPlaceholderTemplateId() == -1 ? item.getQuantity() : 0;
		return new Item(this.itemManager.canonicalize(item.getId()), quantity);
	}
}
/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems.progress;

import com.larsvansoest.runelite.clueitems.EmoteClueItemsConfig;
import com.larsvansoest.runelite.clueitems.data.EmoteClueAssociations;
import lombok.Getter;
import net.runelite.api.Item;
import net.runelite.client.game.ItemManager;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Keeps track of items in the bank, inventory, equipment and group storage.
 * <p>
 * Tracking for each interface can be toggled.
 * <p>
 * Contains functionality to monitor and return item changes.
 *
 * @see com.larsvansoest.runelite.clueitems.progress.ItemTracker
 * @see com.larsvansoest.runelite.clueitems.progress.ProgressManager
 * @since v2.0.0
 */
class InventoryMonitor
{
	private final HashMap<Integer, Integer> collection;

	private final ItemTracker bankTracker;
	private final ItemTracker inventoryTracker;
	private final ItemTracker equipmentTracker;
	private final ItemTracker groupStorageTracker;

	private Boolean isTrackingBank;
	private Boolean isTrackingInventory;
	private Boolean isTrackingEquipment;
	private Boolean isTrackingGroupStorage;

	@Getter
	private Boolean hasSeenBank;
	@Getter
	private Boolean hasSeenInventory;
	@Getter
	private Boolean hasSeenEquipment;
	@Getter
	private Boolean hasSeenGroupStorage;

	public InventoryMonitor(final EmoteClueItemsConfig config, final ItemManager itemManager)
	{
		this.collection = new HashMap<>(EmoteClueAssociations.ItemIdToEmoteClueItem.keySet().size());

		this.bankTracker = new ItemTracker(itemManager);
		this.inventoryTracker = new ItemTracker(itemManager);
		this.equipmentTracker = new ItemTracker(itemManager);
		this.groupStorageTracker = new ItemTracker(itemManager);

		this.isTrackingBank = config.trackBank();
		this.isTrackingInventory = config.trackInventory();
		this.isTrackingEquipment = config.trackEquipment();
		this.isTrackingGroupStorage = config.trackGroupStorage();

		this.reset();
	}

	/**
	 * Clears all item collection data.
	 */
	public void reset()
	{
		for (final Integer itemId : EmoteClueAssociations.ItemIdToEmoteClueItem.keySet())
		{
			this.collection.put(itemId, 0);
		}
		this.bankTracker.reset();
		this.inventoryTracker.reset();
		this.equipmentTracker.reset();
		this.groupStorageTracker.reset();

		this.hasSeenBank = false;
		this.hasSeenInventory = false;
		this.hasSeenEquipment = false;
		this.hasSeenGroupStorage = false;
	}

	/**
	 * Toggles including items from the bank in the collection log.
	 *
	 * @param track True if the bank should be tracked, false otherwise.
	 */
	public List<Item> toggleBankTracking(final boolean track)
	{
		this.isTrackingBank = track;
		this.hasSeenBank = false;
		return this.toggleItemTracker(this.bankTracker, track);
	}

	/**
	 * Toggles including items from the inventory in the collection log.
	 *
	 * @param track True if the inventory should be tracked, false otherwise.
	 */
	public List<Item> toggleInventoryTracking(final boolean track)
	{
		this.isTrackingInventory = track;
		this.hasSeenInventory = false;
		return this.toggleItemTracker(this.inventoryTracker, track);
	}

	/**
	 * Toggles including equipped items in the collection log.
	 *
	 * @param track True if equipment should be tracked, false otherwise.
	 */
	public List<Item> toggleEquipmentTracking(final boolean track)
	{
		this.isTrackingEquipment = track;
		this.hasSeenEquipment = false;
		return this.toggleItemTracker(this.equipmentTracker, track);
	}

	/**
	 * Toggles including items from the group storage in the collection log.
	 *
	 * @param track True if the group storage should be tracked, false otherwise.
	 */
	public List<Item> toggleGroupStorageTracking(final boolean track)
	{
		this.isTrackingGroupStorage = track;
		this.hasSeenGroupStorage = false;
		return this.toggleItemTracker(this.groupStorageTracker, track);
	}

	private List<Item> getEmoteClueItemDeltas(final Map<Integer, Integer> deltas)
	{
		final List<Item> emoteClueDeltas = new ArrayList<>();
		deltas.forEach((id, delta) ->
		{
			final Integer logQuantity = this.collection.get(id);
			if (logQuantity != null)
			{
				final int quantity = logQuantity + delta;
				this.collection.put(id, quantity);
				emoteClueDeltas.add(new Item(id, quantity));
			}
		});
		return emoteClueDeltas;
	}

	private List<Item> toggleItemTracker(final ItemTracker itemTracker, final boolean track)
	{
		if (track)
		{
			return null;
		}
		final Map<Integer, Integer> items = itemTracker.getItems();
		items.replaceAll((id, quantity) -> -quantity);
		itemTracker.reset();
		return this.getEmoteClueItemDeltas(items);
	}

	/**
	 * Returns a list of newly added or changed items. Each entry is unique.
	 * <p>
	 * For every item, the id represents the item in the collection log, and the quantity represents the change in the amount stored.
	 *
	 * @param containerId The container that contains the items.
	 * @param items       The list of items.
	 * @return The list of item changes.
	 */
	public List<Item> fetchEmoteClueItemChanges(final int containerId, final Item[] items)
	{
		switch (containerId)
		{
			case 95:
				if (this.isTrackingBank)
				{
					this.hasSeenBank = true;
					return this.getEmoteClueItemDeltas(this.bankTracker.writeDeltas(items));
				}
				return null;
			case 93:
			case 660: // Group storage inventory
				if (this.isTrackingInventory)
				{
					this.hasSeenInventory = true;
					return this.getEmoteClueItemDeltas(this.inventoryTracker.writeDeltas(items));
				}
				return null;
			case 94:
				if (this.isTrackingEquipment)
				{
					this.hasSeenEquipment = true;
					return this.getEmoteClueItemDeltas(this.equipmentTracker.writeDeltas(items));
				}
				return null;
			case 659:
				if (this.isTrackingGroupStorage)
				{
					this.hasSeenGroupStorage = true;
					return this.getEmoteClueItemDeltas(this.groupStorageTracker.writeDeltas(items));
				}
				return null;
			default:
				return null;
		}
	}
}

package com.larsvansoest.runelite.clueitems.progress;

import com.larsvansoest.runelite.clueitems.EmoteClueItemsConfig;
import com.larsvansoest.runelite.clueitems.data.EmoteClue;
import com.larsvansoest.runelite.clueitems.data.EmoteClueAssociations;
import com.larsvansoest.runelite.clueitems.data.EmoteClueItem;
import com.larsvansoest.runelite.clueitems.data.StashUnit;
import com.larsvansoest.runelite.clueitems.ui.components.StatusPanel;

import net.runelite.api.*;
import net.runelite.api.gameval.InventoryID;
import net.runelite.api.gameval.VarbitID;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.cluescrolls.clues.item.AllRequirementsCollection;
import net.runelite.client.plugins.cluescrolls.clues.item.AnyRequirementCollection;
import net.runelite.client.plugins.cluescrolls.clues.item.ItemRequirement;

import java.util.*;
import java.util.function.BiConsumer;

/**
 * Keeps track of item requirement progression. Contains inventory change and STASHUnit fill status functionality.
 *
 * @author Lars van Soest
 * @since 2.0.0
 */
public class ProgressManager
{
	private final Client client;
	private final ClientThread clientThread;
	private final EmoteClueItemsConfig config;
	private final InventoryMonitor inventoryMonitor;
	private final StashMonitor stashMonitor;
	private final HashMap<EmoteClueItem, StatusPanel.Status> inventoryStatusMap;
	private final Map<EmoteClueItem, Map<StashUnit, Boolean>> stashFilledStatusMap;
	private final BiConsumer<EmoteClueItem, Integer> onEmoteClueItemQuantityChanged;
	private final BiConsumer<EmoteClueItem, StatusPanel.Status> onEmoteClueItemInventoryStatusChanged;
	private final BiConsumer<EmoteClueItem, StatusPanel.Status> onEmoteClueItemStatusChanged;

	public ProgressManager(
			final Client client, final ClientThread clientThread, final ConfigManager configManager, final EmoteClueItemsConfig config, final ItemManager itemManager,
			final BiConsumer<EmoteClueItem, Integer> onEmoteClueItemQuantityChanged, final BiConsumer<EmoteClueItem, StatusPanel.Status> onEmoteClueItemInventoryStatusChanged,
			final BiConsumer<EmoteClueItem, StatusPanel.Status> onEmoteClueItemStatusChanged)
	{
		this.client = client;
		this.clientThread = clientThread;
		this.config = config;
		this.inventoryMonitor = new InventoryMonitor(config, itemManager);
		this.stashMonitor = new StashMonitor(configManager);
		this.inventoryStatusMap = new HashMap<>(EmoteClueItem.values().length);
		this.stashFilledStatusMap = new HashMap<>(EmoteClueAssociations.EmoteClueItemToEmoteClues.keySet().size());
		this.onEmoteClueItemQuantityChanged = onEmoteClueItemQuantityChanged;
		this.onEmoteClueItemInventoryStatusChanged = onEmoteClueItemInventoryStatusChanged;
		this.onEmoteClueItemStatusChanged = onEmoteClueItemStatusChanged;

		EmoteClueAssociations.EmoteClueItemToEmoteClues.forEach(((emoteClueItem, emoteClues) ->
		{
			final Map<StashUnit, Boolean> emoteClueStashFillStatusMap = new HashMap<>(emoteClues.length);
			for (final EmoteClue emoteClue : emoteClues)
			{
				emoteClueStashFillStatusMap.put(emoteClue.getStashUnit(), false);
			}
			this.stashFilledStatusMap.put(emoteClueItem, emoteClueStashFillStatusMap);
		}));

		this.reset();
	}

	/**
	 * Clears all cached progression data.
	 */
	public void reset()
	{
		this.inventoryMonitor.reset();
		for (final EmoteClueItem emoteClueItem : EmoteClueItem.values())
		{
			this.inventoryStatusMap.put(emoteClueItem, StatusPanel.Status.InComplete);
		}
		for (final EmoteClueItem emoteClueItem : EmoteClueAssociations.EmoteClueItemToEmoteClues.keySet())
		{
			final Map<StashUnit, Boolean> emoteClueStashFillStatusMap = this.stashFilledStatusMap.get(emoteClueItem);
			emoteClueStashFillStatusMap.keySet().forEach(key -> emoteClueStashFillStatusMap.put(key, false));
		}
	}

	/**
	 * Writes item container changes to progression data.
	 *
	 * @param containerId The modified item container
	 * @param items       The items in the container
	 */
	public void processInventoryChanges(final int containerId, final Item[] items)
	{
		this.clientThread.invoke(() -> {
			this.handleItemChanges(this.inventoryMonitor.fetchEmoteClueItemChanges(containerId, items));
		});
	}

	/**
	 * Toggles including items from the bank in the collection log.
	 * <p>
	 * Must be called on the clientThread.
	 *
	 * @param track True if the bank should be tracked, false otherwise.
	 * @see net.runelite.client.callback.ClientThread
	 */
	public void toggleBankTracking(final boolean track)
	{
		this.handleItemChanges(this.inventoryMonitor.toggleBankTracking(track));
		if (track)
		{
			this.refreshContainer(InventoryID.BANK);
		}
	}

	/**
	 * Toggles including items from the inventory in the collection log.
	 * <p>
	 * Must be called on the clientThread.
	 *
	 * @param track True if the inventory should be tracked, false otherwise.
	 * @see net.runelite.client.callback.ClientThread
	 */
	public void toggleInventoryTracking(final boolean track)
	{
		this.handleItemChanges(this.inventoryMonitor.toggleInventoryTracking(track));
		if (track)
		{
			this.refreshContainer(InventoryID.INV);
		}
	}

	/**
	 * Toggles including equipped items in the collection log.
	 * <p>
	 * Must be called on the clientThread.
	 *
	 * @param track True if equipment should be tracked, false otherwise.
	 * @see net.runelite.client.callback.ClientThread
	 */
	public void toggleEquipmentTracking(final boolean track)
	{
		this.handleItemChanges(this.inventoryMonitor.toggleEquipmentTracking(track));
		if (track)
		{
			this.refreshContainer(InventoryID.WORN);
		}
	}

	/**
	 * Toggles including items from the group storage in the collection log.
	 * <p>
	 * Must be called on the clientThread.
	 *
	 * @param track True if the group storage should be tracked, false otherwise.
	 * @see net.runelite.client.callback.ClientThread
	 */
	public void toggleGroupStorageTracking(final boolean track)
	{
		this.handleItemChanges(this.inventoryMonitor.toggleGroupStorageTracking(track));
		if (track)
		{
			this.refreshContainer(InventoryID.INV_GROUP_TEMP);
		}
	}

	private void refreshContainer(final int inventoryID)
	{
		final ItemContainer container = this.client.getItemContainer(inventoryID);
		if (container != null)
		{
			this.processInventoryChanges(container.getId(), container.getItems());
		}
	}

	/**
	 * Returns a list of unopened interfaces.
	 * <p>
	 * Only shows interfaces that are tracked and have not yet been seen once after reset.
	 *
	 * @return The list of unopened interfaces.
	 */
	public List<String> getUnopenedInterfaces()
	{
		final List<String> unopenedContainers = new ArrayList<>(4);
		if (this.config.trackBank() && !this.inventoryMonitor.getHasSeenBank())
		{
			unopenedContainers.add("bank");
		}
		if (this.config.trackInventory() && !this.inventoryMonitor.getHasSeenInventory())
		{
			unopenedContainers.add("inventory");
		}
		if (this.config.trackEquipment() && !this.inventoryMonitor.getHasSeenEquipment())
		{
			unopenedContainers.add("equipment");
		}

		int accountType = this.client.getVarbitValue(VarbitID.IRONMAN);
		/*
		 * Varbits.ACCOUNT_TYPE
		 * 4 = group ironman
		 * 5 = hardcore group ironman
		 * 6 = unranked group ironman
		 */
		if ((accountType == 4 || accountType == 5 || accountType == 6) && this.config.trackGroupStorage() && !this.inventoryMonitor.getHasSeenGroupStorage())
		{
			unopenedContainers.add("group storage");
		}
		return unopenedContainers;
	}

	/**
	 * Call this function after user login.
	 * <p>
	 * Using {@link com.larsvansoest.runelite.clueitems.progress.StashMonitor}, verifies if user-data is consistent with data stored in Runelite's {@link net.runelite.client.config.ConfigManager}.
	 * <p>
	 * Resets config data if data is corrupted, possible by game update.
	 */
	public void validateConfig()
	{
		this.stashMonitor.validate();
		for (final StashUnit stashUnit : StashUnit.values())
		{
			this.setStashUnitFilled(stashUnit, this.stashMonitor.getStashFilled(stashUnit));
		}
	}

	private void handleItemChanges(final List<Item> emoteClueItemChanges)
	{
		if (emoteClueItemChanges != null)
		{
			// Set single item (sub-)requirement status
			for (final Item item : emoteClueItemChanges)
			{
				final int quantity = item.getQuantity();
				final EmoteClueItem emoteClueItem = EmoteClueAssociations.ItemIdToEmoteClueItem.get(item.getId());

				this.onEmoteClueItemQuantityChanged.accept(emoteClueItem, quantity);

				final StatusPanel.Status status = quantity > 0 ? StatusPanel.Status.Complete : StatusPanel.Status.InComplete;
				this.inventoryStatusMap.put(emoteClueItem, status);

				this.setEmoteClueItemStatus(emoteClueItem, this.getEmoteClueItemStatus(emoteClueItem));
			}
		}
	}

	/**
	 * Returns whether given {@link com.larsvansoest.runelite.clueitems.data.StashUnit} is set as filled in progression data.
	 */
	public boolean getStashUnitFilled(final StashUnit stashUnit)
	{
		return this.stashMonitor.getStashFilled(stashUnit);
	}

	/**
	 * Specify given {@link com.larsvansoest.runelite.clueitems.data.StashUnit} as filled in progression data.
	 */
	public void setStashUnitFilled(final StashUnit stashUnit, final boolean filled)
	{
		this.stashMonitor.setStashFilled(stashUnit, filled);
		for (final EmoteClue emoteClue : EmoteClueAssociations.STASHUnitToEmoteClues.get(stashUnit))
		{
			for (final EmoteClueItem emoteClueItem : EmoteClueAssociations.EmoteClueToEmoteClueItems.get(emoteClue))
			{
				this.stashFilledStatusMap.get(emoteClueItem).put(stashUnit, filled);
				this.setEmoteClueItemStatus(emoteClueItem, this.getEmoteClueItemStatus(emoteClueItem));
			}
		}
	}

	private StatusPanel.Status getEmoteClueItemStatus(final EmoteClueItem emoteClueItem)
	{
		// Check inventory data.
		StatusPanel.Status intermediateStatus = this.inventoryStatusMap.get(emoteClueItem);
		this.onEmoteClueItemInventoryStatusChanged.accept(emoteClueItem, intermediateStatus);
		if (intermediateStatus == StatusPanel.Status.Complete)
		{
			return StatusPanel.Status.Complete;
		}

		// Check STASHUnit fill status.
		final Map<StashUnit, Boolean> emoteClueStashFilledMap = this.stashFilledStatusMap.get(emoteClueItem);
		if (Objects.nonNull(emoteClueStashFilledMap))
		{
			if (this.stashFilledStatusMap.get(emoteClueItem).values().stream().allMatch(Boolean::booleanValue))
			{
				return StatusPanel.Status.Complete;
			}
			if (this.stashFilledStatusMap.get(emoteClueItem).values().stream().anyMatch(Boolean::booleanValue))
			{
				intermediateStatus = StatusPanel.Status.InProgress;
			}
		}

		// Check item requirement relations.
		final ItemRequirement itemRequirement = emoteClueItem.getItemRequirement();
		if (itemRequirement instanceof AnyRequirementCollection)
		{
			for (final EmoteClueItem child : emoteClueItem.getChildren())
			{
				if (this.getEmoteClueItemStatus(child) == StatusPanel.Status.Complete)
				{
					return StatusPanel.Status.Complete;
				}
			}
		}
		if (itemRequirement instanceof AllRequirementsCollection)
		{
			boolean anyMatch = false;
			boolean allMatch = true;
			for (final EmoteClueItem child : emoteClueItem.getChildren())
			{
				if (this.getEmoteClueItemStatus(child) == StatusPanel.Status.Complete)
				{
					anyMatch = true;
				}
				else
				{
					allMatch = false;
				}
			}
			if (allMatch)
			{
				return StatusPanel.Status.Complete;
			}
			if (anyMatch)
			{
				intermediateStatus = StatusPanel.Status.InProgress;
			}
		}
		return intermediateStatus;
	}

	private void setEmoteClueItemStatus(final EmoteClueItem emoteClueItem, final StatusPanel.Status status)
	{
		this.onEmoteClueItemStatusChanged.accept(emoteClueItem, status);
		for (final EmoteClueItem parent : emoteClueItem.getParents())
		{
			this.setEmoteClueItemStatus(parent, this.getEmoteClueItemStatus(parent));
		}
	}
}
/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

/**
 * Config setup for the {@link com.larsvansoest.runelite.clueitems.EmoteClueItemsPlugin}.
 * <p>
 * Allows for enabling plugin user settings in Runelite.
 *
 * @author Lars van Soest
 * @since 1.0.4
 */
@SuppressWarnings("SameReturnValue")
@ConfigGroup("emote-clue-items")
public interface EmoteClueItemsConfig extends Config
{
	@ConfigSection(name = "Collection Log Panel",
			       description = "Modify the plugin panel's behaviour.",
			       position = 0)
	String Section_collectionLogPanel = "collectionLogPanel";

	@ConfigSection(name = "Interface Tracking",
			description = "Toggle including items in the collection log per interface type.",
			position = 1)
	String Section_interfaceTracking = "interfaceTracking";

	@ConfigSection(name = "Interface Highlighting",
	               description = "Toggle emote clue icons per interface type.",
	               position = 2)
	String Section_interfaceHighlighting = "interfaceHighlighting";

	@ConfigSection(name = "Difficulty Highlighting",
			description = "Toggle emote clue icons per difficulty.",
			position = 3)
	String Section_difficultyHighlighting = "difficultyHighlighting";

    // Collection Log Panel

	@ConfigItem(keyName = "ShowNavigation",
	            name = "Show collection log",
	            description = "Show the collection log panel in the RuneLite toolbar.",
			    section = Section_collectionLogPanel,
	            position = 0)
	default boolean showNavigation()
	{
		return true;
	}

	@ConfigItem(keyName = "NotifyUnopenedInterfaces",
			name = "Unopened interface notification",
			description = "Show notification for tracked interfaces that have not yet been opened.",
			section = Section_collectionLogPanel,
			position = 1)
	default boolean notifyUnopenedInterfaces()
	{
		return true;
	}

	@ConfigItem(keyName = "AutoSyncWatsonBoard",
			name = "Sync watson board",
			description = "Sync STASH unit fill statuses after opening the notice board in Watson's house.",
			section = Section_collectionLogPanel,
			position = 1)
	default boolean autoSyncWatsonBoard()
	{
		return false;
	}

	// Interface Tracking

	@ConfigItem(keyName = "TrackBank",
			name = "Bank",
			description = "Include bank items in the collection log.",
			section = Section_interfaceTracking,
			position = 0)
	default boolean trackBank()
	{
		return true;
	}

	@ConfigItem(keyName = "TrackInventory",
			name = "Inventory",
			description = "Include inventory items in the collection log.",
			section = Section_interfaceTracking,
			position = 1)
	default boolean trackInventory()
	{
		return true;
	}

	@ConfigItem(keyName = "TrackEquipment",
			name = "Equipment",
			description = "Include equipped items in the collection log.",
			section = Section_interfaceTracking,
			position = 2)
	default boolean trackEquipment()
	{
		return true;
	}

	@ConfigItem(keyName = "TrackGroupStorage",
			name = "Group Storage",
			description = "(Group iron men) include group storage items in the collection log.",
			section = Section_interfaceTracking,
			position = 3)
	default boolean trackGroupStorage()
	{
		return false;
	}

	// Interface Highlighting

	@ConfigItem(keyName = "HighlightBank",
	            name = "Bank",
	            description = "Show highlights on bank interface.",
	            section = Section_interfaceHighlighting,
	            position = 0)
	default boolean highlightBank()
	{
		return true;
	}

	@ConfigItem(keyName = "HighlightInventory",
	            name = "Inventory",
	            description = "Show highlights on inventory interface.",
	            section = Section_interfaceHighlighting,
	            position = 1)
	default boolean highlightInventory()
	{
		return true;
	}

	@ConfigItem(keyName = "HighlightDepositBox",
	            name = "Deposit Box",
	            description = "Show highlights on deposit box interface.",
	            section = Section_interfaceHighlighting,
	            position = 2)
	default boolean highlightDepositBox()
	{
		return false;
	}

	@ConfigItem(keyName = "HighlightEquipment",
	            name = "Equipment",
	            description = "Show highlights on equipment interface.",
	            section = Section_interfaceHighlighting,
	            position = 3)
	default boolean highlightEquipment()
	{
		return false;
	}

	@ConfigItem(keyName = "HighlightGuidePrices",
	            name = "Guide Prices",
	            description = "Show highlights on guide prices interface.",
	            section = Section_interfaceHighlighting,
	            position = 4)
	default boolean highlightGuidePrices()
	{
		return false;
	}

	@ConfigItem(keyName = "HighlightKeptOnDeath",
	            name = "Kept on Death",
	            description = "Show highlights on kept on death interface.",
	            section = Section_interfaceHighlighting,
	            position = 5)
	default boolean highlightKeptOnDeath()
	{
		return false;
	}

	@ConfigItem(keyName = "HighlightShop",
	            name = "Shops",
	            description = "Show highlights on shop interfaces.",
	            section = Section_interfaceHighlighting,
	            position = 6)
	default boolean highlightShop()
	{
		return false;
	}

	@ConfigItem(keyName = "HighlightGroupStorage",
	            name = "Group Storage",
	            description = "Show highlights on group iron man storage.",
	            section = Section_interfaceHighlighting,
	            position = 7)
	default boolean highlightGroupStorage()
	{
		return false;
	}

	// Difficulty Highlighting

	@ConfigItem(keyName = "HighlightBeginner",
			name = "Beginner",
			description = "Show highlights for beginner clues.",
			section = Section_difficultyHighlighting,
			position = 1)
	default boolean highlightBeginner()
	{
		return true;
	}

	@ConfigItem(keyName = "HighlightEasy",
			name = "Easy",
			description = "Show highlights for easy clues.",
			section = Section_difficultyHighlighting,
			position = 2)
	default boolean highlightEasy()
	{
		return true;
	}

	@ConfigItem(keyName = "HighlightMedium",
			name = "Medium",
			description = "Show highlights for medium clues.",
			section = Section_difficultyHighlighting,
			position = 3)
	default boolean highlightMedium()
	{
		return true;
	}

	@ConfigItem(keyName = "HighlightHard",
			name = "Hard",
			description = "Show highlights for hard clues.",
			section = Section_difficultyHighlighting,
			position = 4)
	default boolean highlightHard()
	{
		return true;
	}

	@ConfigItem(keyName = "HighlightElite",
			name = "Elite",
			description = "Show highlights for elite clues.",
			section = Section_difficultyHighlighting,
			position = 5)
	default boolean highlightElite()
	{
		return true;
	}

	@ConfigItem(keyName = "HighlightMaster",
			name = "Master",
			description = "Show highlights for master clues.",
			section = Section_difficultyHighlighting,
			position = 6)
	default boolean highlightMaster()
	{
		return true;
	}

	// Below the sections

	@ConfigItem(keyName = "FilterInStash",
	            name = "Filter items in STASH",
	            description = "Do not highlight items already in STASH units.",
	            position = 4)
	default boolean filterInStash()
	{
		return true;
	}
}
package com.larsvansoest.runelite.clueitems.ui.stashes;

import com.larsvansoest.runelite.clueitems.EmoteClueItemsImages;
import com.larsvansoest.runelite.clueitems.data.EmoteClueDifficulty;
import com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPalette;
import com.larsvansoest.runelite.clueitems.ui.components.DataGrid;
import com.larsvansoest.runelite.clueitems.ui.components.FoldablePanelGrid;

import javax.swing.*;
import java.util.Arrays;
import java.util.Comparator;

/**
 * Secondary display of the {@link com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPanel} of the {@link com.larsvansoest.runelite.clueitems.EmoteClueItemsPlugin}, which displays {@link com.larsvansoest.runelite.clueitems.data.StashUnit} requirement status progression.
 * <p>
 * Includes search bar, buttons to filter and sort by properties.
 *
 * @author Lars van Soest
 * @since 3.0.0
 */
public class StashUnitGrid extends FoldablePanelGrid<StashUnitPanel>
{
	/**
	 * Creates the grid.
	 *
	 * @param palette Colour scheme for the grid.
	 */
	public StashUnitGrid(final EmoteClueItemsPalette palette)
	{
		super(palette, 25);
		this.createFilledFilterButton();
		this.createSortFilterButton();
		this.createDifficultyFilterButton(palette);
	}

	private void createFilledFilterButton()
	{
		final String toolTipTextFormat = "Toggle show %s stashes.";
		super.addFilter("filled", new ImageIcon(EmoteClueItemsImages.Icons.CheckSquare.UNKNOWN), DataGrid.getToolTipText(toolTipTextFormat, "all"), $ -> true);
		super.addFilter("filled", new ImageIcon(EmoteClueItemsImages.Icons.CheckSquare.UNBUILT), DataGrid.getToolTipText(toolTipTextFormat, "not built"), stashUnitPanel -> !stashUnitPanel.isBuilt());
		super.addFilter("filled",
				new ImageIcon(EmoteClueItemsImages.Icons.CheckSquare.INCOMPLETE_EMPTY),
				DataGrid.getToolTipText(toolTipTextFormat, "empty"),
				stashUnitPanel -> stashUnitPanel.isBuilt() && !stashUnitPanel.isFilled()
		);
		super.addFilter("filled",
				new ImageIcon(EmoteClueItemsImages.Icons.CheckSquare.COMPLETE),
				DataGrid.getToolTipText(toolTipTextFormat, "filled"),
				stashUnitPanel -> stashUnitPanel.isBuilt() && stashUnitPanel.isFilled()
		);
	}

	private void createSortFilterButton()
	{
		super.addSort(new ImageIcon(EmoteClueItemsImages.Icons.SortType.QUANTITY_ASCENDING),
				DataGrid.getToolTipText("Toggle order by %s (descending).", "quantity"),
				Comparator.comparingInt(StashUnitPanel::getQuantity)
		);
		super.addSort(new ImageIcon(EmoteClueItemsImages.Icons.SortType.QUANTITY_DESCENDING),
				DataGrid.getToolTipText("Toggle order by %s (ascending).", "quantity"),
				Comparator.comparingInt(StashUnitPanel::getQuantity).reversed()
		);
		super.addSort(new ImageIcon(EmoteClueItemsImages.Icons.SortType.NAME_ASCENDING),
				DataGrid.getToolTipText("Toggle order by %s (ascending).", "name"),
				Comparator.comparing(StashUnitPanel::getName)
		);
		super.addSort(new ImageIcon(EmoteClueItemsImages.Icons.SortType.NAME_DESCENDING),
				DataGrid.getToolTipText("Toggle order by %s (ascending).", "name"),
				Comparator.comparing(StashUnitPanel::getName).reversed()
		);
	}

	private void createDifficultyFilterButton(final EmoteClueItemsPalette palette)
	{
		final String filterKey = "difficulty";
		final String toolTipTextFormat = "Toggle show %s difficulties.";

		super.addFilter(filterKey, new ImageIcon(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Ribbon.ALL), DataGrid.getToolTipText(toolTipTextFormat, "all"), $ -> true, palette.getBrandingColor());
		super.addFilter(filterKey,
				new ImageIcon(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Ribbon.BEGINNER),
				DataGrid.getToolTipText(toolTipTextFormat, "beginner"),
				itemPanel -> Arrays.stream(itemPanel.getDifficulties()).anyMatch(difficulty -> difficulty == EmoteClueDifficulty.Beginner),
				EmoteClueDifficulty.Beginner.getColor()
		);
		super.addFilter(filterKey,
				new ImageIcon(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Ribbon.EASY),
				DataGrid.getToolTipText(toolTipTextFormat, "easy"),
				itemPanel -> Arrays.stream(itemPanel.getDifficulties()).anyMatch(difficulty -> difficulty == EmoteClueDifficulty.Easy),
				EmoteClueDifficulty.Easy.getColor()
		);
		super.addFilter(filterKey,
				new ImageIcon(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Ribbon.MEDIUM),
				DataGrid.getToolTipText(toolTipTextFormat, "medium"),
				itemPanel -> Arrays.stream(itemPanel.getDifficulties()).anyMatch(difficulty -> difficulty == EmoteClueDifficulty.Medium),
				EmoteClueDifficulty.Medium.getColor()
		);
		super.addFilter(filterKey,
				new ImageIcon(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Ribbon.HARD),
				DataGrid.getToolTipText(toolTipTextFormat, "hard"),
				itemPanel -> Arrays.stream(itemPanel.getDifficulties()).anyMatch(difficulty -> difficulty == EmoteClueDifficulty.Hard),
				EmoteClueDifficulty.Hard.getColor()
		);
		super.addFilter(filterKey,
				new ImageIcon(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Ribbon.ELITE),
				DataGrid.getToolTipText(toolTipTextFormat, "elite"),
				itemPanel -> Arrays.stream(itemPanel.getDifficulties()).anyMatch(difficulty -> difficulty == EmoteClueDifficulty.Elite),
				EmoteClueDifficulty.Elite.getColor()
		);
		super.addFilter(filterKey,
				new ImageIcon(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Ribbon.MASTER),
				DataGrid.getToolTipText(toolTipTextFormat, "master"),
				itemPanel -> Arrays.stream(itemPanel.getDifficulties()).anyMatch(difficulty -> difficulty == EmoteClueDifficulty.Master),
				EmoteClueDifficulty.Master.getColor()
		);
	}
}
package com.larsvansoest.runelite.clueitems.ui.stashes;

import com.larsvansoest.runelite.clueitems.EmoteClueItemsImages;
import com.larsvansoest.runelite.clueitems.data.EmoteClue;
import com.larsvansoest.runelite.clueitems.data.EmoteClueAssociations;
import com.larsvansoest.runelite.clueitems.data.EmoteClueDifficulty;
import com.larsvansoest.runelite.clueitems.data.StashUnit;
import com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPalette;
import com.larsvansoest.runelite.clueitems.ui.components.*;
import lombok.Getter;

import javax.swing.*;
import java.awt.*;
import java.util.Arrays;
import java.util.Objects;
import java.util.function.BiConsumer;

/**
 * Displays data of a {@link com.larsvansoest.runelite.clueitems.data.StashUnit}. Implements {@link com.larsvansoest.runelite.clueitems.ui.components.FoldablePanel}.
 * <p>
 * Contains a button which allows the user to select which {@link com.larsvansoest.runelite.clueitems.data.StashUnit} has been filled by the player.
 *
 * @author Lars van Soest
 * @since 3.0.0
 */
public class StashUnitPanel extends RequirementPanel
{
	private CycleButton filledButton;
	private final int filledButtonComplete;
	private final int filledButtonInComplete;
	private final EmoteClueItemsPalette palette;
	@Getter
	private final EmoteClueDifficulty[] difficulties;
	@Getter
	private final int quantity;
	private final ImageIcon stashBuiltIcon;
	private final ImageIcon stashNotBuiltIcon;

	private final MapLinkButton mapLinkButton;

	private final JLabel stashUnitImage;
	@Getter
	private boolean filled;
	@Getter
	private boolean built;
	@Getter
	private ItemCollectionPanel itemCollectionPanel;

	private final int requiredConstructionLevel;
	private final PropertyPanel constructionLevelPanel;

	/**
	 * Creates the panel.
	 *
	 * @param palette                  Colour scheme for the grid.
	 * @param stash                    StashUnit of which data is displayed by this panel.
	 * @param onStashFillStatusChanged Behaviour to run when the player changes stash unit fill status.
	 */
	public StashUnitPanel(final EmoteClueItemsPalette palette, final StashUnit stash, final BiConsumer<StashUnit, Boolean> onStashFillStatusChanged, final BiConsumer<StashUnitPanel, Boolean> onAddStashUnitToMap, final Runnable onRemoveStashUnitFromMap)
	{
		super(palette, stash.getName(), 160, 20);
		this.palette = palette;

		this.stashBuiltIcon = new ImageIcon(EmoteClueItemsImages.Icons.RuneScape.StashUnit.get(stash.getType(), true, false));
		this.stashNotBuiltIcon = new ImageIcon(EmoteClueItemsImages.Icons.RuneScape.StashUnit.get(stash.getType(), false, false));
		this.stashUnitImage = new JLabel(this.stashNotBuiltIcon);

		this.filled = true;
		final String toolTipTextFormat = "Set stash unit as %s.";

		this.filledButton = new CycleButton(palette, new ImageIcon(EmoteClueItemsImages.Icons.CheckSquare.INCOMPLETE_EMPTY), () ->
		{
			if (Objects.nonNull(this.filledButton) && this.filledButton.isTurnedOn())
			{
				onStashFillStatusChanged.accept(stash, false);
				super.setStatus(Status.InComplete);
				super.setHeaderColor(null);
				this.filled = false;
			}
		}, DataGrid.getToolTipText(toolTipTextFormat, "filled"));

		this.filledButtonInComplete = 0;
		this.filledButtonComplete = this.filledButton.addOption(new ImageIcon(EmoteClueItemsImages.Icons.CheckSquare.COMPLETE), () ->
		{
			if (this.filledButton.isTurnedOn())
			{
				onStashFillStatusChanged.accept(stash, true);
				super.setStatus(Status.Complete);
				this.filled = true;
			}
		}, DataGrid.getToolTipText(toolTipTextFormat, "empty"));
		this.filledButton.setOpaque(false);

		this.mapLinkButton = new MapLinkButton(this.palette, () -> onAddStashUnitToMap.accept(this, this.built), onRemoveStashUnitFromMap);

		super.addLeft(this.filledButton, new Insets(0, 1, 0, 0), 10, 10, DisplayMode.All);

		final EmoteClue[] emoteClues = EmoteClueAssociations.STASHUnitToEmoteClues.get(stash);
		this.quantity = emoteClues.length;
		this.difficulties = Arrays.stream(emoteClues).map(EmoteClue::getEmoteClueDifficulty).distinct().toArray(EmoteClueDifficulty[]::new);
		final Insets insets = new Insets(2, 0, 2, 5);
		Arrays
				.stream(this.difficulties)
				.map(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Ribbon::get)
				.map(ImageIcon::new)
				.map(JLabel::new)
				.forEach(label -> super.addRight(label, insets, 0, 0, DisplayMode.Default));

		EmoteClueDifficulty difficulty = this.difficulties[0];

		this.requiredConstructionLevel = StashUnit.DifficultyRequirements.valueOf(difficulty.name()).getConstructionLvl();
		this.constructionLevelPanel = new PropertyPanel(this.palette, "Construction lvl", Integer.toString(this.requiredConstructionLevel));

		super.addRight(new JLabel(String.valueOf(this.quantity)), insets, 0, 0, DisplayMode.Default);
		super.addChild(this.getDetailsPanel(difficulty), DisplayMode.All);
	}

	/**
	 * Specify the {@link ItemCollectionPanel} containing all items required to fill the {@link com.larsvansoest.runelite.clueitems.data.StashUnit}.
	 *
	 * @param itemCollectionPanel Item collection panel displaying items required to fill the {@link com.larsvansoest.runelite.clueitems.data.StashUnit}.
	 * @param displayModes        Specify when the panel should be displayed.
	 */
	public void setItemCollectionPanel(final ItemCollectionPanel itemCollectionPanel, final DisplayMode... displayModes)
	{
		if (Objects.nonNull(this.itemCollectionPanel))
		{
			super.removeChild(itemCollectionPanel);
		}
		this.itemCollectionPanel = itemCollectionPanel;
		super.addChild(itemCollectionPanel, displayModes);
	}

	private JPanel getDetailsPanel(final EmoteClueDifficulty difficulty)
	{
		final JPanel detailsPanel = new JPanel(new GridBagLayout());

		final Color backgroundColor = this.palette.getFoldContentColor();
		detailsPanel.setBackground(backgroundColor);

		final GridBagConstraints c = new GridBagConstraints();
		c.gridx = 0;
		c.gridy = 0;
		c.fill = GridBagConstraints.BOTH;

		c.insets.top = 5;
		c.insets.right = 5;
		final StashUnit.DifficultyRequirements difficultyRequirements = StashUnit.DifficultyRequirements.valueOf(difficulty.name());
		c.gridy++;
		detailsPanel.add(new PropertyPanel(this.palette, "Difficulty", difficulty.name()), c);
		c.gridy++;
		detailsPanel.add(this.constructionLevelPanel, c);
		c.gridy++;
		c.insets.top = 5;
		detailsPanel.add(new DescriptionPanel(this.palette, "Build materials", difficultyRequirements.getConstructionItems()), c);

		c.gridy = 0;
		c.gridx = 1;
		c.gridheight = 4;
		detailsPanel.add(this.getDetailsImagePanel(backgroundColor), c);

		return detailsPanel;
	}

	private JPanel getDetailsImagePanel(final Color backgroundColor)
	{
		final JPanel rightPanel = new JPanel(new GridBagLayout());
		rightPanel.setBackground(backgroundColor);
		final GridBagConstraints c = new GridBagConstraints();
		c.gridx = 0;
		c.gridy = 0;
		c.weighty = 1;
		c.weightx = 1;
		c.fill = GridBagConstraints.BOTH;
		rightPanel.add(this.stashUnitImage, c);
		c.gridy++;
		c.insets.left = 4;
		rightPanel.add(this.mapLinkButton, c);
		return rightPanel;
	}

	/**
	 * Turn off the stash unit filled button.
	 * <p>
	 * Can be re-enabled by executing {@link #turnOnFilledButton()}.
	 *
	 * @param icon    the icon to display on the button.
	 * @param toolTip the tooltip to display when hovering the button.
	 */
	public void turnOffFilledButton(final Icon icon, final String toolTip)
	{
		if (this.filledButton.isTurnedOn())
		{
			this.filledButton.turnOff(icon, toolTip);
			super.setHeaderColor(this.palette.getFoldHeaderTextColor());
		}
	}

	/**
	 * Turn on the stash unit filled button.
	 * <p>
	 * Enabled by default.
	 * <p>
	 * Used to re-enable the stash unit filled button after executing {@link #turnOffFilledButton(javax.swing.Icon, String)}.
	 */
	public void turnOnFilledButton()
	{
		if (!this.filledButton.isTurnedOn())
		{
			this.filledButton.turnOn();
			super.setHeaderColor(this.filled ? null : super.getStatus().colour);
		}
	}

	/**
	 * Toggle the built status display of the {@link com.larsvansoest.runelite.clueitems.data.StashUnit} the {@link com.larsvansoest.runelite.clueitems.ui.stashes.StashUnitPanel} represents.
	 * <p>
	 * <ul>
	 *     <li>When built = false, disables the stash unit fill button and displays a construction icon.</li>
	 *     <li>When built = true, re-enables the stash unit fill button.</li>
	 * </ul>
	 *
	 * @param built display if {@link com.larsvansoest.runelite.clueitems.data.StashUnit} is built or not.
	 */
	public void setBuilt(final boolean built)
	{
		if (built)
		{
			this.turnOnFilledButton();
			this.stashUnitImage.setIcon(this.stashBuiltIcon);
		}
		else
		{
			this.turnOffFilledButton(new ImageIcon(EmoteClueItemsImages.Icons.CheckSquare.UNBUILT), "Please build the STASH unit in-game first.");
			this.stashUnitImage.setIcon(this.stashNotBuiltIcon);
		}
		this.built = built;
	}

	/**
	 * Toggle the fill status display of the {@link com.larsvansoest.runelite.clueitems.data.StashUnit} the {@link com.larsvansoest.runelite.clueitems.ui.stashes.StashUnitPanel} represents.
	 * <p>
	 * Changes the {@link com.larsvansoest.runelite.clueitems.ui.components.FoldablePanel} header color corresponding to the stash fill (completion) status.
	 *
	 * @param filled display if {@link com.larsvansoest.runelite.clueitems.data.StashUnit} is built or not.
	 */
	public void setFilled(final boolean filled)
	{
		if(this.built) {
			this.filledButton.cycleToStage(filled ? this.filledButtonComplete : this.filledButtonInComplete);
			this.filled = filled;
		}
	}

	public void setMapLinkShowDelete(boolean showDelete) {
		this.mapLinkButton.setShowDelete(showDelete);
	}

	public void setPlayerConstructionLevel(Integer level) {
		final Status status = Objects.isNull(level) ? Status.InComplete
				: level < this.requiredConstructionLevel ? Status.InProgress
				: Status.Complete;
		this.constructionLevelPanel.setStatus(status);
	}

	public void turnOffMapLinkButton() {
		this.mapLinkButton.turnOff();
	}

	public void turnOnMapLinkButton() {
		this.mapLinkButton.turnOn();
	}
}
/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems.ui;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.client.ui.ColorScheme;

import javax.swing.*;
import java.awt.*;

/**
 * Contains all {@link Color} instances used for any ui-related requirement progress display {@link JComponent} objects for the {@link com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPanel}.
 *
 * @author Lars van Soest
 * @since 2.0.0
 */
@Getter
@RequiredArgsConstructor
public enum EmoteClueItemsPalette
{
	RUNELITE(
			ColorScheme.DARKER_GRAY_COLOR,
			ColorScheme.DARKER_GRAY_HOVER_COLOR,
			ColorScheme.DARKER_GRAY_HOVER_COLOR,
			ColorScheme.DARK_GRAY_HOVER_COLOR,
			ColorScheme.LIGHT_GRAY_COLOR,
			ColorScheme.MEDIUM_GRAY_COLOR,
			ColorScheme.DARKER_GRAY_HOVER_COLOR,
			ColorScheme.BRAND_ORANGE,
			ColorScheme.LIGHT_GRAY_COLOR,
			new Color(ColorScheme.LIGHT_GRAY_COLOR.getRed(), ColorScheme.LIGHT_GRAY_COLOR.getGreen(), ColorScheme.LIGHT_GRAY_COLOR.getBlue(), 150)
	);

	private final Color defaultColor;
	private final Color hoverColor;
	private final Color selectColor;
	private final Color foldContentColor;
	private final Color foldHeaderTextColor;
	private final Color footerColor;
	private final Color disclaimerColor;
	private final Color brandingColor;
	private final Color propertyNameColor;
	private final Color propertyValueColor;
}
package com.larsvansoest.runelite.clueitems.ui.clues;

import com.larsvansoest.runelite.clueitems.data.EmoteClueItem;
import com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPalette;
import com.larsvansoest.runelite.clueitems.ui.components.ItemCollectionPanel;
import com.larsvansoest.runelite.clueitems.ui.components.StatusPanel;
import net.runelite.client.plugins.cluescrolls.clues.item.AllRequirementsCollection;
import net.runelite.client.plugins.cluescrolls.clues.item.ItemRequirement;
import net.runelite.client.plugins.cluescrolls.clues.item.SingleItemRequirement;

import java.util.HashMap;
import java.util.HashSet;

public class EmoteClueItemCollectionPanel extends ItemCollectionPanel
{
	private final HashSet<EmoteClueItem> parents;
	private final HashMap<EmoteClueItem, Status> requirementStatuses;
	private final boolean strong;

	public EmoteClueItemCollectionPanel(final EmoteClueItemsPalette palette, final String name, final int slotRowSize, final boolean strong)
	{
		super(palette, name, slotRowSize);
		this.requirementStatuses = new HashMap<>();
		this.parents = new HashSet<>();
		this.strong = strong;
	}

	/**
	 * Add an {@link com.larsvansoest.runelite.clueitems.data.EmoteClueItem} requirement to include in inventory status checking.
	 * <p>
	 * Automatically adds the children of given {@link com.larsvansoest.runelite.clueitems.data.EmoteClueItem} to the inner data structure, which serve as parameter for {@link #setStatus(com.larsvansoest.runelite.clueitems.data.EmoteClueItem, StatusPanel.Status)}.
	 *
	 * @param emoteClueItem the requirement to include.
	 */
	public void addRequirement(final EmoteClueItem emoteClueItem)
	{
		this.parents.add(emoteClueItem);
		this.addRequirementStatus(emoteClueItem);
	}

	private void addRequirementStatus(final EmoteClueItem emoteClueItem)
	{
		this.requirementStatuses.put(emoteClueItem, Status.InComplete);
		emoteClueItem.getChildren().forEach(this::addRequirementStatus);
	}

	/**
	 * Set the status of a requirement or any of its children. Automatically checks if collection log is complete.
	 *
	 * @param emoteClueItem the requirement, must have been added through {@link #addRequirement(com.larsvansoest.runelite.clueitems.data.EmoteClueItem)}.
	 * @param status        the status of the requirement.
	 */
	public void setStatus(final EmoteClueItem emoteClueItem, final Status status)
	{
		if (this.requirementStatuses.containsKey(emoteClueItem))
		{
			this.requirementStatuses.put(emoteClueItem, status);
			final boolean complete;
			if (this.strong)
			{
				complete = this.parents.stream().allMatch(this::complete);
			}
			else
			{
				complete = this.parents.stream().anyMatch(this::complete);
			}
			super.setStatus(complete ? Status.Complete : Status.InComplete);
		}
	}

	private boolean complete(final EmoteClueItem emoteClueItem)
	{
		final ItemRequirement itemRequirement = emoteClueItem.getItemRequirement();

		if (itemRequirement instanceof SingleItemRequirement)
		{
			return this.requirementStatuses.get(emoteClueItem) == Status.Complete;
		}
		else if (itemRequirement instanceof AllRequirementsCollection)
		{
			return emoteClueItem.getChildren().stream().allMatch(this::complete);
		}
		else
		{
			return emoteClueItem.getChildren().stream().anyMatch(this::complete);
		}
	}
}
/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems.ui.clues;

import com.larsvansoest.runelite.clueitems.EmoteClueItemsImages;
import com.larsvansoest.runelite.clueitems.data.EmoteClueDifficulty;
import com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPalette;
import com.larsvansoest.runelite.clueitems.ui.components.DataGrid;
import com.larsvansoest.runelite.clueitems.ui.components.FoldablePanelGrid;
import com.larsvansoest.runelite.clueitems.ui.components.RequirementPanel;

import javax.swing.*;
import java.util.Arrays;
import java.util.Comparator;

/**
 * Primary display of the {@link com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPanel} of the {@link com.larsvansoest.runelite.clueitems.EmoteClueItemsPlugin}, which displays {@link com.larsvansoest.runelite.clueitems.data.EmoteClueItem} requirement status progression.
 * <p>
 * Includes search bar, buttons to filter and sort by properties.
 *
 * @author Lars van Soest
 * @since 2.0.0
 */
public class EmoteClueItemGrid extends FoldablePanelGrid<EmoteClueItemPanel>
{
	/**
	 * Creates the grid.
	 *
	 * @param palette Colour scheme for the grid.
	 */
	public EmoteClueItemGrid(final EmoteClueItemsPalette palette)
	{
		super(palette, 25);

		this.createRequirementStatusFilterButton();
		this.createDifficultyFilterButton(palette);
		this.createSortFilterButton();
	}

	private void createRequirementStatusFilterButton()
	{
		final String filterKey = "status";
		final String toolTipTextFormat = "Toggle show %s statuses.";

		super.addFilter(filterKey, new ImageIcon(EmoteClueItemsImages.Icons.CheckSquare.UNKNOWN), DataGrid.getToolTipText(toolTipTextFormat, "all"), $ -> true);
		super.addFilter(
				filterKey,
				new ImageIcon(EmoteClueItemsImages.Icons.CheckSquare.INCOMPLETE),
				DataGrid.getToolTipText(toolTipTextFormat, "incomplete"),
				itemPanel -> itemPanel.getStatus() == RequirementPanel.Status.InComplete
		);
		super.addFilter(
				filterKey,
				new ImageIcon(EmoteClueItemsImages.Icons.CheckSquare.IN_PROGRESS),
				DataGrid.getToolTipText(toolTipTextFormat, "in progress"),
				itemPanel -> itemPanel.getStatus() == RequirementPanel.Status.InProgress
		);
		super.addFilter(
				filterKey,
				new ImageIcon(EmoteClueItemsImages.Icons.CheckSquare.COMPLETE),
				DataGrid.getToolTipText(toolTipTextFormat, "complete"),
				itemPanel -> itemPanel.getStatus() == RequirementPanel.Status.Complete
		);
	}

	private void createDifficultyFilterButton(final EmoteClueItemsPalette palette)
	{
		final String filterKey = "difficulty";
		final String toolTipTextFormat = "Toggle show %s difficulties.";

		super.addFilter(filterKey, new ImageIcon(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Ribbon.ALL), DataGrid.getToolTipText(toolTipTextFormat, "all"), $ -> true, palette.getBrandingColor());
		super.addFilter(
				filterKey,
				new ImageIcon(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Ribbon.BEGINNER),
				DataGrid.getToolTipText(toolTipTextFormat, "beginner"),
				itemPanel -> Arrays.stream(itemPanel.getDifficulties()).anyMatch(difficulty -> difficulty == EmoteClueDifficulty.Beginner),
				EmoteClueDifficulty.Beginner.getColor()
		);
		super.addFilter(
				filterKey,
				new ImageIcon(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Ribbon.EASY),
				DataGrid.getToolTipText(toolTipTextFormat, "easy"),
				itemPanel -> Arrays.stream(itemPanel.getDifficulties()).anyMatch(difficulty -> difficulty == EmoteClueDifficulty.Easy),
				EmoteClueDifficulty.Easy.getColor()
		);
		super.addFilter(
				filterKey,
				new ImageIcon(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Ribbon.MEDIUM),
				DataGrid.getToolTipText(toolTipTextFormat, "medium"),
				itemPanel -> Arrays.stream(itemPanel.getDifficulties()).anyMatch(difficulty -> difficulty == EmoteClueDifficulty.Medium),
				EmoteClueDifficulty.Medium.getColor()

		);
		super.addFilter(
				filterKey,
				new ImageIcon(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Ribbon.HARD),
				DataGrid.getToolTipText(toolTipTextFormat, "hard"),
				itemPanel -> Arrays.stream(itemPanel.getDifficulties()).anyMatch(difficulty -> difficulty == EmoteClueDifficulty.Hard),
				EmoteClueDifficulty.Hard.getColor()
		);
		super.addFilter(
				filterKey,
				new ImageIcon(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Ribbon.ELITE),
				DataGrid.getToolTipText(toolTipTextFormat, "elite"),
				itemPanel -> Arrays.stream(itemPanel.getDifficulties()).anyMatch(difficulty -> difficulty == EmoteClueDifficulty.Elite),
				EmoteClueDifficulty.Elite.getColor()
		);
		super.addFilter(
				filterKey,
				new ImageIcon(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Ribbon.MASTER),
				DataGrid.getToolTipText(toolTipTextFormat, "master"),
				itemPanel -> Arrays.stream(itemPanel.getDifficulties()).anyMatch(difficulty -> difficulty == EmoteClueDifficulty.Master),
				EmoteClueDifficulty.Master.getColor()
		);
	}

	private void createSortFilterButton()
	{
		super.addSort(
				new ImageIcon(EmoteClueItemsImages.Icons.SortType.QUANTITY_ASCENDING),
				DataGrid.getToolTipText("Toggle order by %s (descending).", "quantity"),
				Comparator.comparingInt(EmoteClueItemPanel::getQuantity)
		);
		super.addSort(
				new ImageIcon(EmoteClueItemsImages.Icons.SortType.QUANTITY_DESCENDING),
				DataGrid.getToolTipText("Toggle order by %s (ascending).", "quantity"),
				Comparator.comparingInt(EmoteClueItemPanel::getQuantity).reversed()
		);
		super.addSort(
				new ImageIcon(EmoteClueItemsImages.Icons.SortType.NAME_ASCENDING),
				DataGrid.getToolTipText("Toggle order by %s (ascending).", "name"),
				Comparator.comparing(EmoteClueItemPanel::getName)
		);
		super.addSort(
				new ImageIcon(EmoteClueItemsImages.Icons.SortType.NAME_DESCENDING),
				DataGrid.getToolTipText("Toggle order by %s (ascending).", "name"),
				Comparator.comparing(EmoteClueItemPanel::getName).reversed()
		);
	}
}
/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems.ui.clues;

import com.larsvansoest.runelite.clueitems.EmoteClueItemsImages;
import com.larsvansoest.runelite.clueitems.data.EmoteClue;
import com.larsvansoest.runelite.clueitems.data.EmoteClueDifficulty;
import com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPalette;
import com.larsvansoest.runelite.clueitems.ui.components.DescriptionPanel;
import com.larsvansoest.runelite.clueitems.ui.components.FoldablePanel;
import com.larsvansoest.runelite.clueitems.ui.components.PropertyPanel;
import lombok.Getter;
import net.runelite.client.plugins.cluescrolls.clues.Enemy;
import net.runelite.client.plugins.cluescrolls.clues.emote.Emote;

import javax.swing.*;
import java.awt.*;

/**
 * Displays data of a {@link com.larsvansoest.runelite.clueitems.data.EmoteClue}. Implements {@link com.larsvansoest.runelite.clueitems.ui.components.FoldablePanel}.
 *
 * @author Lars van Soest
 * @since 2.0.0
 */
public class EmoteCluePanel extends FoldablePanel
{
	@Getter
	private final Emote firstEmote;
	@Getter
	private final Emote secondEmote;
	@Getter
	private final Enemy enemy;
	@Getter
	private final String description;
	@Getter
	private final EmoteClueDifficulty difficulty;

	/**
	 * Creates the panel.
	 *
	 * @param palette   Colour scheme for the panel.
	 * @param emoteClue EmoteClue of which the data is displayed by this panel.
	 */
	public EmoteCluePanel(final EmoteClueItemsPalette palette, final EmoteClue emoteClue)
	{
		super(palette, emoteClue.getLocationName(), 160, 20);

		this.difficulty = emoteClue.getEmoteClueDifficulty();
		super.addLeft(new JLabel(new ImageIcon(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Scroll.get(this.difficulty))), new Insets(2, 4, 2, 0), 0, 0, DisplayMode.All);

		this.firstEmote = emoteClue.getFirstEmote();
		this.secondEmote = emoteClue.getSecondEmote();
		this.enemy = emoteClue.getEnemy();
		this.description = emoteClue.getText();

		super.addChild(new PropertyPanel(palette, "Difficulty", this.difficulty.name()), DisplayMode.All);
		super.addChild(new PropertyPanel(palette, "First emote", this.firstEmote.getName()), DisplayMode.All);
		super.addChild(new PropertyPanel(palette, "Second emote", this.secondEmote == null ? "none" : this.secondEmote.getName()), DisplayMode.All);
		super.addChild(new PropertyPanel(palette, "Enemy", this.enemy == null ? "none" : this.enemy.getText()), DisplayMode.All);
		super.addChild(new DescriptionPanel(palette, "Description", this.description), DisplayMode.All);
	}
}
/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems.ui.clues;

import com.larsvansoest.runelite.clueitems.EmoteClueItemsImages;
import com.larsvansoest.runelite.clueitems.data.EmoteClue;
import com.larsvansoest.runelite.clueitems.data.EmoteClueAssociations;
import com.larsvansoest.runelite.clueitems.data.EmoteClueDifficulty;
import com.larsvansoest.runelite.clueitems.data.EmoteClueItem;
import com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPalette;
import com.larsvansoest.runelite.clueitems.ui.components.ItemCollectionPanel;
import com.larsvansoest.runelite.clueitems.ui.components.RequirementPanel;
import com.larsvansoest.runelite.clueitems.ui.stashes.StashUnitPanel;
import lombok.Getter;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Objects;

/**
 * Displays data of a {@link com.larsvansoest.runelite.clueitems.data.EmoteClueItem}. Implements {@link com.larsvansoest.runelite.clueitems.ui.components.FoldablePanel}.
 *
 * @author Lars van Soest
 * @since 2.0.0
 */
public class EmoteClueItemPanel extends RequirementPanel
{
	@Getter
	private final EmoteClueDifficulty[] difficulties;
	@Getter
	private final int quantity;
	private final ArrayList<StashUnitPanel> stashUnitPanels;
	private ItemCollectionPanel itemCollectionPanel;

	/**
	 * Creates the panel.
	 *
	 * @param palette       Colour scheme for the panel.
	 * @param emoteClueItem EmoteClueItem of which data is displayed by this panel.
	 */
	public EmoteClueItemPanel(final EmoteClueItemsPalette palette, final EmoteClueItem emoteClueItem)
	{
		super(palette, emoteClueItem.getCollectiveName(), 160, 20);

		final EmoteClue[] emoteClues = EmoteClueAssociations.EmoteClueItemParentToEmoteClues.get(emoteClueItem);

		this.stashUnitPanels = new ArrayList<>();
		this.difficulties = Arrays.stream(emoteClues).map(EmoteClue::getEmoteClueDifficulty).distinct().toArray(EmoteClueDifficulty[]::new);
		final Insets insets = new Insets(2, 0, 2, 5);
		Arrays
				.stream(this.difficulties)
				.map(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Ribbon::get)
				.map(ImageIcon::new)
				.map(JLabel::new)
				.forEach(label -> super.addRight(label, insets, 0, 0, DisplayMode.Default));
		this.quantity = emoteClues.length;
		super.addRight(new JLabel(String.valueOf(this.quantity)), insets, 0, 0, DisplayMode.Default);
	}

	/**
	 * Specify the {@link ItemCollectionPanel} containing all items required to complete the {@link com.larsvansoest.runelite.clueitems.data.EmoteClueItem} requirement.
	 *
	 * @param itemCollectionPanel Item collection panel displaying items required to complete the {@link com.larsvansoest.runelite.clueitems.data.EmoteClueItem} requirement.
	 * @param displayModes        Specify when the panel should be displayed.
	 */
	public void setItemCollectionPanel(final ItemCollectionPanel itemCollectionPanel, final DisplayMode... displayModes)
	{
		if (Objects.nonNull(this.itemCollectionPanel))
		{
			super.removeChild(itemCollectionPanel);
		}
		final Runnable onHeaderMousePressed = itemCollectionPanel.getOnHeaderMousePressed();
		itemCollectionPanel.setOnHeaderMousePressed(() ->
		{
			this.stashUnitPanels.stream().map(StashUnitPanel::getItemCollectionPanel).filter(Objects::nonNull).forEach(ItemCollectionPanel::fold);
			onHeaderMousePressed.run();
		});
		this.itemCollectionPanel = itemCollectionPanel;
		super.addChild(itemCollectionPanel, displayModes);
	}

	/**
	 * Add a sub-display {@link com.larsvansoest.runelite.clueitems.ui.stashes.StashUnitPanel} entry to display a {@link com.larsvansoest.runelite.clueitems.data.StashUnit}.
	 *
	 * @param stashUnitPanel The sub-display which displays {@link com.larsvansoest.runelite.clueitems.data.StashUnit} data.
	 * @param displayModes   Specify when the panel should be displayed.
	 */
	public void addStashUnitPanel(final StashUnitPanel stashUnitPanel, final DisplayMode... displayModes)
	{
		final ItemCollectionPanel stashUnitItemCollectionPanel = stashUnitPanel.getItemCollectionPanel();
		final Runnable onHeaderMousePressed = stashUnitItemCollectionPanel.getOnHeaderMousePressed();
		stashUnitItemCollectionPanel.setOnHeaderMousePressed(() ->
		{
			if (Objects.nonNull(this.itemCollectionPanel))
			{
				this.itemCollectionPanel.fold();
			}
			onHeaderMousePressed.run();
		});
		this.stashUnitPanels.add(stashUnitPanel);
		super.addChild(stashUnitPanel, displayModes);
	}
}
package com.larsvansoest.runelite.clueitems.ui.components;

import com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPalette;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.components.shadowlabel.JShadowedLabel;

import javax.swing.*;
import javax.swing.border.MatteBorder;
import java.awt.*;

/**
 * Displays a title and description. The title has a shadowed markup and is supported by a separator. Underneath this separator, the description is html-formatted and displayed using html automatic line breaks.
 *
 * @author Lars van Soest
 * @since 3.0.0
 */
public class DescriptionPanel extends JPanel
{
	/**
	 * Creates the panel.
	 *
	 * @param palette     Colour scheme for the panel.
	 * @param title       Title to display above the separator.
	 * @param description Description to display underneath the separator.
	 */
	public DescriptionPanel(final EmoteClueItemsPalette palette, final String title, final String description)
	{
		super(new GridBagLayout());
		super.setBackground(palette.getFoldContentColor());

		final JLabel header = new JShadowedLabel(title);
		header.setFont(FontManager.getRunescapeSmallFont());
		header.setHorizontalAlignment(JLabel.LEFT);
		header.setForeground(palette.getPropertyNameColor());

		final JLabel content = new JLabel(String.format("<html><p style=\"width:100%%\">%s</p></html>", description));
		content.setFont(FontManager.getRunescapeSmallFont());
		content.setHorizontalAlignment(JLabel.LEFT);
		content.setForeground(palette.getPropertyValueColor());

		final GridBagConstraints c = new GridBagConstraints();
		c.gridx = 0;
		c.gridy = 0;
		c.weightx = 1;
		c.fill = GridBagConstraints.BOTH;
		header.setBorder(new MatteBorder(0, 0, 1, 0, palette.getPropertyValueColor()));
		super.add(header, c);

		c.insets.top = 3;
		c.insets.bottom = 3;
		c.gridy++;
		super.add(content, c);
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems.ui.components;

import com.larsvansoest.runelite.clueitems.EmoteClueItemsImages;
import com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPalette;
import lombok.Setter;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.components.shadowlabel.JShadowedLabel;
import net.runelite.client.util.ImageUtil;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

/**
 * Displays a notification, supported by a question mark icon and a close button with configurable onClick behaviour.
 *
 * @author Lars van Soest
 * @since 3.0.0
 */
public class DisclaimerPanel extends JPanel
{
	private final JLabel textLabel;

	@Setter
	private Runnable onClose;

	/**
	 * Creates the panel.
	 *
	 * @param emoteClueItemsPalette Colour scheme for the panel.
	 * @param onClose               Behaviour to run when the notification's close button is pressed.
	 */
	public DisclaimerPanel(final EmoteClueItemsPalette emoteClueItemsPalette, final Runnable onClose)
	{
		super(new GridBagLayout());
		super.setBackground(emoteClueItemsPalette.getDisclaimerColor());

		final JLabel questionCircleIconLabel = new JLabel(new ImageIcon(EmoteClueItemsImages.Icons.QUESTION));

		this.textLabel = new JShadowedLabel();
		this.textLabel.setHorizontalAlignment(JLabel.LEFT);
		this.textLabel.setVerticalAlignment(JLabel.CENTER);
		this.textLabel.setFont(FontManager.getRunescapeSmallFont());

		this.onClose = onClose;

		final Icon closeIllumatedIcon = new ImageIcon(ImageUtil.luminanceScale(EmoteClueItemsImages.Icons.CLOSE, 150));
		final Icon closeIcon = new ImageIcon(EmoteClueItemsImages.Icons.CLOSE);
		final JLabel closeIconLabel = new JLabel(closeIcon);
		closeIconLabel.setToolTipText("Close");
		closeIconLabel.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(final MouseEvent e)
			{
				DisclaimerPanel.this.onClose.run();
			}

			@Override
			public void mouseEntered(final MouseEvent e)
			{
				closeIconLabel.setIcon(closeIllumatedIcon);
			}

			@Override
			public void mouseExited(final MouseEvent e)
			{
				closeIconLabel.setIcon(closeIcon);
			}
		});


		final GridBagConstraints c = new GridBagConstraints();
		c.gridx = 0;
		c.gridy = 0;
		c.fill = GridBagConstraints.BOTH;
		c.anchor = GridBagConstraints.WEST;
		c.insets = new Insets(5, 10, 5, 0);
		c.weightx = 0;
		c.weighty = 0;
		super.add(questionCircleIconLabel, c);

		c.gridx++;
		c.weightx = 1;
		c.weighty = 1;
		super.add(this.textLabel, c);

		c.gridx++;
		c.weightx = 0;
		c.weighty = 0;
		c.insets.right = 10;
		super.add(closeIconLabel, c);
	}

	/**
	 * Sets the notification to given text. Applied html formatting for automatic line breaks.
	 *
	 * @param text The text of the notification.
	 */
	public void setText(final String text)
	{
		this.textLabel.setText(String.format("<html><p style=\"width:100%%\">%s</p></html>", text));
	}
}

package com.larsvansoest.runelite.clueitems.ui.components;

import com.larsvansoest.runelite.clueitems.EmoteClueItemsImages;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.components.shadowlabel.JShadowedLabel;

import javax.swing.*;
import java.awt.*;

/**
 * Displays a plugin panel header with the title and useful links.
 */
public class HeaderPanel extends JPanel {

    /**
     * Creates a plugin panel header.
     * @param title The title of the plugin panel.
     * @param version The version of the plugin.
     * @param gitHubUrl A URL to the GitHub repository page.
     * @param payPalUrl A donation url.
     */
    public HeaderPanel(final String title, final String version, final String gitHubUrl, final String payPalUrl) {
        super(new GridBagLayout());

        final GridBagConstraints c = new GridBagConstraints();
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 1;
        c.gridx = 0;
        c.gridy = 0;
        c.insets.bottom = 9;

        c.insets.top = 6;
        super.add(getTitle(title), c);
        c.weightx = 0;
        c.insets.left = 11;
        c.gridx++;

        final String patchNotesUrl = String.format("%s/releases/tag/%s", gitHubUrl, version);
        super.add(new LinkButton(version, patchNotesUrl, "View patch notes.", FontManager.getRunescapeFont()), c);
        c.gridx++;

        c.insets.top = 4;
        super.add(new LinkButton(EmoteClueItemsImages.Icons.GITHUB, gitHubUrl, "Visit GitHub webpage."), c);
        c.gridx++;

        super.add(new LinkButton(EmoteClueItemsImages.Icons.PAYPAL, payPalUrl, "Buy me a coffee!", 1.3f), c);
    }

    private JLabel getTitle(final String title) {
        final JLabel label = new JShadowedLabel(title);
        label.setHorizontalTextPosition(SwingConstants.LEFT);
        return label;
    }
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems.ui.components;

import net.runelite.client.ui.ColorScheme;

import javax.swing.*;
import java.awt.*;

/**
 * A requirement progression visualisation {@link JPanel} extension with changeable {@link Status} representation.
 *
 * @author Lars van Soest
 * @see FoldablePanel
 * @since 2.0.0
 */
public interface StatusPanel
{
	/**
	 * In similar fashion to Runescape's quest progression, requirement progression is represented by the following states:
	 * <ul>
	 *     <li>Complete</li>
	 *     <li>InProgress</li>
	 *     <li>InComplete</li>
	 * </ul>
	 * <p>
	 * For practicality, this enum also contains an entry for Unknown.
	 */
	enum Status
	{
		Complete(ColorScheme.PROGRESS_COMPLETE_COLOR),

		InProgress(ColorScheme.PROGRESS_INPROGRESS_COLOR),

		InComplete(ColorScheme.LIGHT_GRAY_COLOR);

		public final Color colour;

		Status(final Color colour)
		{
			this.colour = colour;
		}
	}

	/**
	 * Updates the displayed status.
	 * @param status The status.
	 */
	void setStatus(Status status);
}
/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems.ui.components;

import lombok.Getter;
import net.runelite.client.game.ItemManager;
import net.runelite.client.util.AsyncBufferedImage;
import net.runelite.client.util.ImageUtil;

import javax.swing.*;
import java.awt.*;

/**
 * Displays an item in a collection-log fashion.
 * <p>
 * It displays an item icon with an item quantity.
 * <p>
 * If the quantity is 0, the icon is semi-faded.
 */
public class ItemSlotPanel extends JPanel implements StatusPanel
{
	private final ItemManager itemManager;
	private final int itemId;
	private final JLabel itemIcon;
	@Getter
	private Status status;
	private ImageIcon transparentIcon;
	private int quantity;

	/**
	 * Creates the panel.
	 *
	 * @param itemManager Runelite's item manager to derive the item icons from.
	 * @param itemId      The {@link net.runelite.api.ItemID} of the item to display.
	 * @param name        The name of the item to display as tooltip when hovering over the item.
	 */
	public ItemSlotPanel(final ItemManager itemManager, final int itemId, final String name)
	{
		super.setLayout(new GridBagLayout());
		super.setToolTipText(name);

		this.itemManager = itemManager;
		this.itemId = itemId;
		this.itemIcon = new JLabel();
		this.itemIcon.setOpaque(false);
		this.transparentIcon = new ImageIcon();

		final AsyncBufferedImage itemImage = itemManager.getImage(this.itemId, 0, true);
		itemImage.onLoaded(() ->
		{
			this.transparentIcon = new ImageIcon(ImageUtil.alphaOffset(itemImage, 0.38f));
			this.itemIcon.setIcon(this.transparentIcon);
		});

		final GridBagConstraints c = new GridBagConstraints();
		c.gridx = 0;
		c.gridy = 0;
		c.weightx = 1;
		c.weighty = 1;
		c.fill = GridBagConstraints.BOTH;

		super.add(this.itemIcon, c);
	}

	/**
	 * Sets the quantity of the item display.
	 *
	 * @param quantity the new item quantity to display.
	 */
	public void setQuantity(final int quantity)
	{
		this.quantity = quantity;
		this.setStatus(quantity > 0 ? Status.Complete : Status.InComplete);
	}

	/**
	 * Sets the status of the item display.
	 * <p>
	 * If the status is complete, the item is displayed normally with its quantity. It is displayed semi-transparent otherwise.
	 *
	 * @param status the new status of the item slot.
	 */
	public void setStatus(final Status status)
	{
		this.itemIcon.setIcon(status == Status.Complete ? new ImageIcon(this.itemManager.getImage(this.itemId, this.quantity, true)) : this.transparentIcon);
		this.status = status;
	}
}

package com.larsvansoest.runelite.clueitems.ui.components;

import com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPalette;

import java.util.Collection;
import java.util.Objects;

/**
 * {@link com.larsvansoest.runelite.clueitems.ui.components.DataGrid} extension to display {@link com.larsvansoest.runelite.clueitems.ui.components.FoldablePanel} entries.
 * <p>
 * Adjusts {@link com.larsvansoest.runelite.clueitems.ui.components.FoldablePanel} fold behaviour to limit the number of simultaneously unfolded panels to one.
 *
 * @param <T> Type of {@link com.larsvansoest.runelite.clueitems.ui.components.FoldablePanel} to display.
 */
public class FoldablePanelGrid<T extends FoldablePanel> extends DataGrid<T>
{
	private FoldablePanel unfoldedPanel;

	/**
	 * Creates the grid.
	 *
	 * @param palette            Colour scheme for the grid.
	 * @param minSearchBarHeight Minimum height for the grid's searchbar.
	 */
	public FoldablePanelGrid(final EmoteClueItemsPalette palette, final int minSearchBarHeight)
	{
		super(palette, minSearchBarHeight);
	}

	/**
	 * Specify which data set the {@link com.larsvansoest.runelite.clueitems.ui.components.FoldablePanelGrid} should display. Replaces possible existing displayed data set.
	 * <p>
	 * Adjusts {@link com.larsvansoest.runelite.clueitems.ui.components.FoldablePanel} fold behaviour to limit the number of simultaneously unfolded panels to one.
	 *
	 * @param entries data set for the {@link com.larsvansoest.runelite.clueitems.ui.components.DataGrid} to display.
	 */
	@Override
	public void load(final Collection<T> entries)
	{
		this.unfoldedPanel = null;
		for (final T entry : entries)
		{
			entry.setDisplayMode(FoldablePanel.DisplayMode.Default);
			entry.setOnHeaderMousePressed(() ->
			{
				if (entry.getExpanded())
				{
					entry.fold();
					this.unfoldedPanel = null;
				}
				else
				{
					if (Objects.nonNull(this.unfoldedPanel))
					{
						this.unfoldedPanel.fold();
					}
					entry.unfold();
					this.unfoldedPanel = entry;
				}
			});
		}
		super.load(entries);
	}

	/**
	 * Toggles the grid's visibility.
	 * <p>
	 * Folds all entries when set to invisible.
	 * <p>
	 * Sets all entries to {@link com.larsvansoest.runelite.clueitems.ui.components.FoldablePanel.DisplayMode} Default when set to visible.
	 *
	 * @param visible set the grid to visible if true, invisible otherwise.
	 */
	@Override
	public void setVisible(final boolean visible)
	{
		if (!visible)
		{
			for (final T entry : super.entries)
			{
				entry.fold();
			}
		}
		else
		{
			for (final T entry : super.entries)
			{
				entry.setDisplayMode(FoldablePanel.DisplayMode.Default);
			}
		}
		super.setVisible(visible);
	}

	/**
	 * Clears all query parameters, including filter and sort buttons and displays the resulting entries.
	 * <p>
	 * Collapses any un-collapsed entry.
	 */
	@Override
	public void reset()
	{
		for (final T entry : super.entries)
		{
			entry.fold();
		}
		super.reset();
	}
}
package com.larsvansoest.runelite.clueitems.ui.components;

import com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPalette;
import lombok.Getter;

/**
 * A requirement progression visualisation {@link javax.swing.JPanel} extension with changeable {@link Status} representation.
 *
 * @author Lars van Soest
 * @see FoldablePanel
 * @since 2.0.0
 */
public class RequirementPanel extends FoldablePanel implements StatusPanel
{
	@Getter
	private Status status;

	/**
	 * Creates the panel.
	 *
	 * @param emoteClueItemsPalette Colour scheme for the panel.
	 * @param name                  Name displayed as the panel header text.
	 * @param headerNameWidth       Fixed panel width to contain the panel header text.
	 * @param headerMinHeight       Minimum panel header height.
	 */
	public RequirementPanel(final EmoteClueItemsPalette emoteClueItemsPalette, final String name, final int headerNameWidth, final int headerMinHeight)
	{
		this(emoteClueItemsPalette, name, headerNameWidth, headerMinHeight, Status.InComplete);
	}

	/**
	 * Creates the panel.
	 *
	 * @param emoteClueItemsPalette Colour scheme for the panel.
	 * @param name                  Name displayed as the panel header text.
	 * @param headerNameWidth       Fixed panel width to contain the panel header text.
	 * @param headerMinHeight       Minimum panel header height.
	 * @param status                The status to be displayed.
	 */
	public RequirementPanel(final EmoteClueItemsPalette emoteClueItemsPalette, final String name, final int headerNameWidth, final int headerMinHeight, Status status)
	{
		super(emoteClueItemsPalette, name, headerNameWidth, headerMinHeight);
		this.setStatus(status);
	}

	/**
	 * Change the status of the requirement.
	 * <p>
	 * Changes the header text color the color corresponding with given {@link StatusPanel.Status}.
	 *
	 * @param status the new status of the panel.
	 */
	public void setStatus(final Status status)
	{
		super.setHeaderColor(status.colour);
		this.status = status;
	}
}
package com.larsvansoest.runelite.clueitems.ui.components;

import net.runelite.client.ui.components.shadowlabel.JShadowedLabel;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.LinkBrowser;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.font.TextAttribute;
import java.util.Map;

/**
 * Displays a button to open a URL in the web browser.
 * <p>
 * Supports text and images.
 */
public class LinkButton extends JShadowedLabel {
    /**
     * Creates the link button with an image.
     * <p>
     * The image is illuminated on hover with a factor of 2 by default.
     * @param image The image displayed by the link button.
     * @param url The url that should be opened by the web browser
     * @param tooltip The tooltip that is displayed when hovering over the button.
     */
    public LinkButton (final Image image, final String url, final String tooltip) {
        this(image, url, tooltip, 2);
    }

    /**
     * Creates the link button with an image.
     * <p>
     * The image is illuminated on hover.
     * @param image The image displayed by the link button.
     * @param url The url that should be opened by the web browser
     * @param tooltip The tooltip that is displayed when hovering over the button.
     * @param luminancePercentage The scale of the image illumination on hover.
     */
    public LinkButton (final Image image, final String url, final String tooltip, final float luminancePercentage) {
        final ImageIcon icon = new ImageIcon(image);
        final ImageIcon illuminatedIcon = new ImageIcon(ImageUtil.luminanceScale(image, luminancePercentage));
        super.setToolTipText(tooltip);
        super.setIcon(icon);
        super.setHorizontalAlignment(SwingConstants.CENTER);
        super.setVerticalAlignment(SwingConstants.CENTER);
        super.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mousePressed(final MouseEvent e)
            {
                LinkBrowser.browse(url);
            }

            @Override
            public void mouseEntered(final MouseEvent e)
            {
                LinkButton.super.setIcon(illuminatedIcon);
            }

            @Override
            public void mouseExited(final MouseEvent e)
            {
                LinkButton.super.setIcon(icon);
            }
        });
    }

    /**
     * Creates the link button with text.
     * <p>
     * The text is underlined on hover.
     * @param text The text displayed by the link button.
     * @param url The url that should be opened by the web browser
     * @param tooltip The tooltip that is displayed when hovering over the button.
     * @param font The font of the text displayed by the button.
     */
    public LinkButton(final String text, final String url, final String tooltip, final Font font) {
        super.setText(text);
        super.setToolTipText(tooltip);

        Map attributes = LinkButton.super.getFont().getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        Font underlinedFont = font.deriveFont(attributes);

        super.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mousePressed(final MouseEvent e)
            {
                LinkBrowser.browse(url);
            }

            @Override
            public void mouseEntered(final MouseEvent e)
            {
                LinkButton.super.setFont(underlinedFont);
            }

            @Override
            public void mouseExited(final MouseEvent e)
            {
                LinkButton.super.setFont(font);
            }
        });
    }

}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems.ui.components;

import com.larsvansoest.runelite.clueitems.EmoteClueItemsImages;
import com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPalette;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.components.shadowlabel.JShadowedLabel;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Objects;
import java.util.stream.Stream;

/**
 * Panel with fold and unfold functionality to allow collapsing and un-collapsing a details panel.
 *
 * @author Lars van Soest
 * @since 2.0.0
 */
public class FoldablePanel extends JPanel
{
	private final EmoteClueItemsPalette emoteClueItemsPalette;
	private final JLabel foldIcon;
	private final JShadowedLabel statusHeaderName;
	private final JPanel foldContentDisplay;
	private final JPanel header;
	private final HashMap<DisplayMode, ArrayList<HeaderElement>> leftHeaderElements;
	private final HashMap<DisplayMode, ArrayList<HeaderElement>> rightHeaderElements;
	private final HashMap<DisplayMode, ArrayList<FoldablePanel>> foldContentPanels;
	private final HashMap<DisplayMode, ArrayList<JComponent>> foldContent;
	@Getter
	private DisplayMode displayMode;
	@Setter
	@Getter
	private int foldContentLeftInset;
	@Setter
	@Getter
	private int foldContentRightInset;
	@Setter
	@Getter
	private int foldContentBottomInset;
	@Setter
	@Getter
	private Integer fixedFoldContentTopInset;
	@Setter
	@Getter
	private Runnable onHeaderMousePressed;
	@Getter
	private Boolean expanded;

	/**
	 * Creates the panel.
	 *
	 * @param emoteClueItemsPalette Colour scheme for the panel.
	 * @param name                  Name displayed as the panel header text.
	 * @param headerNameWidth       Fixed panel width to contain the panel header text.
	 * @param headerMinHeight       Minimum panel header height.
	 */
	public FoldablePanel(final EmoteClueItemsPalette emoteClueItemsPalette, final String name, final int headerNameWidth, final int headerMinHeight)
	{
		super.setLayout(new GridBagLayout());
		super.setBackground(emoteClueItemsPalette.getDefaultColor());
		super.setName(name);

		this.expanded = false;
		this.displayMode = DisplayMode.Default;

		this.emoteClueItemsPalette = emoteClueItemsPalette;
		this.foldContentDisplay = new JPanel(new GridBagLayout());

		this.foldContentDisplay.setBackground(emoteClueItemsPalette.getFoldContentColor());

		this.leftHeaderElements = this.newDisplayModeMap();
		this.rightHeaderElements = this.newDisplayModeMap();
		this.foldContentPanels = this.newDisplayModeMap();
		this.foldContent = this.newDisplayModeMap();

		this.foldIcon = new JLabel(FOLD_ICONS.LEFT);
		this.statusHeaderName = this.getHeaderText(name, headerNameWidth, headerMinHeight);
		this.header = this.getHeader();
		this.paintHeaderLabels();

		this.onHeaderMousePressed = () ->
		{
			if (this.expanded)
			{
				this.fold();
			}
			else
			{
				this.unfold();
			}
		};
		this.foldContentLeftInset = 5;
		this.foldContentRightInset = 5;
		this.foldContentBottomInset = 5;
		this.fixedFoldContentTopInset = null;

		final GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.BOTH;
		c.gridx = 0;
		c.gridy = 0;
		c.weightx = 1;
		super.add(this.header, c);

		c.gridy++;
		super.add(this.foldContentDisplay, c);
	}

	private JPanel getHeader()
	{
		final JPanel header = new JPanel(new GridBagLayout());
		header.setBackground(this.emoteClueItemsPalette.getDefaultColor());
		header.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(final MouseEvent e)
			{
				FoldablePanel.this.onHeaderMousePressed.run();
			}

			@Override
			public void mouseEntered(final MouseEvent e)
			{
				header.setBackground(FoldablePanel.this.emoteClueItemsPalette.getHoverColor());
			}

			@Override
			public void mouseExited(final MouseEvent e)
			{
				header.setBackground(FoldablePanel.this.expanded ? FoldablePanel.this.emoteClueItemsPalette.getSelectColor() : FoldablePanel.this.emoteClueItemsPalette.getDefaultColor());
			}
		});

		return header;
	}

	/**
	 * Adds a {@link com.larsvansoest.runelite.clueitems.ui.components.FoldablePanel} sub-panel to the details.
	 *
	 * @param child        the sub-panel to display when unfolding.
	 * @param displayModes specify in which display modes the sub-panel should be displayed.
	 */
	public void addChild(final FoldablePanel child, final DisplayMode... displayModes)
	{
		this.addDisplayModeComponents(this.foldContentPanels, child, displayModes);
	}

	/**
	 * Adds a {@link javax.swing.JComponent} element to the details.
	 *
	 * @param child        the element to display when unfolding.
	 * @param displayModes specify in which display modes the element should be displayed.
	 */
	public void addChild(final JComponent child, final DisplayMode... displayModes)
	{
		this.addDisplayModeComponents(this.foldContent, child, displayModes);
	}

	/**
	 * Removes a {@link com.larsvansoest.runelite.clueitems.ui.components.FoldablePanel} sub-panel from the details.
	 *
	 * @param child        the sub-panel to remove.
	 * @param displayModes specify from which display modes the sub-panel should be removed.
	 */
	public void removeChild(final FoldablePanel child, final DisplayMode... displayModes)
	{
		this.removeDisplayModeComponents(this.foldContentPanels, child, displayModes);
	}

	/**
	 * Removes a {@link javax.swing.JComponent} element from the details.
	 *
	 * @param child        the element to remove.
	 * @param displayModes specify from which display modes the element should be removed.
	 */
	public void removeChild(final JComponent child, final DisplayMode... displayModes)
	{
		this.removeDisplayModeComponents(this.foldContent, child, displayModes);
	}

	/**
	 * Collapses the details view.
	 */
	public void fold()
	{
		this.getDisplayModeComponents(this.foldContentPanels).forEach(FoldablePanel::fold);
		this.foldContentDisplay.removeAll();
		this.foldContentDisplay.setVisible(false);
		this.foldContentDisplay.revalidate();
		this.foldContentDisplay.repaint();
		this.header.setBackground(this.emoteClueItemsPalette.getDefaultColor());
		this.expanded = false;
		this.foldIcon.setIcon(FOLD_ICONS.LEFT);
	}

	/**
	 * Uncollapses the details view.
	 */
	public void unfold()
	{
		final GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.BOTH;
		c.weightx = 1;
		c.insets = new Insets(0, this.foldContentLeftInset, this.foldContentBottomInset, this.foldContentRightInset);
		c.gridx = 0;
		c.gridy = 0;
		this.getDisplayModeComponents(this.foldContent).forEach(foldContentElement ->
		{
			c.insets.top = Objects.nonNull(this.fixedFoldContentTopInset) ? this.fixedFoldContentTopInset : c.gridy == 0 ? 5 : 0;
			this.foldContentDisplay.add(foldContentElement, c);
			c.gridy++;
		});
		this.getDisplayModeComponents(this.foldContentPanels).forEach(foldablePanel ->
		{
			c.insets.top = Objects.nonNull(this.fixedFoldContentTopInset) ? this.fixedFoldContentTopInset : c.gridy == 0 ? 5 : 0;
			foldablePanel.setDisplayMode(DisplayMode.Nested);
			this.foldContentDisplay.add(foldablePanel, c);
			c.gridy++;
		});
		this.header.setBackground(this.emoteClueItemsPalette.getSelectColor());
		this.foldContentDisplay.setVisible(true);
		this.foldIcon.setIcon(FOLD_ICONS.DOWN);
		this.expanded = true;
		this.foldContentDisplay.revalidate();
		this.foldContentDisplay.repaint();
	}

	/**
	 * Returns the color of the header text.
	 *
	 * @return the color.
	 */
	public Color getHeaderColor()
	{
		return this.statusHeaderName.getForeground();
	}

	/**
	 * Sets the color of the header text.
	 *
	 * @param colour the new color of the header text.
	 */
	public void setHeaderColor(final Color colour)
	{
		this.statusHeaderName.setForeground(colour);
	}

	/**
	 * Changes the display mode of the foldable panel, changing which elements, header icons and sub-panels should be displayed.
	 *
	 * @param displayMode the new display mode.
	 */
	public void setDisplayMode(final DisplayMode displayMode)
	{
		this.displayMode = displayMode;
		this.paintHeaderLabels();
	}

	private <T> HashMap<DisplayMode, ArrayList<T>> newDisplayModeMap()
	{
		final HashMap<DisplayMode, ArrayList<T>> displayModeMap = new HashMap<>();
		for (final DisplayMode displayMode : DisplayMode.values())
		{
			if (!displayMode.equals(DisplayMode.All))
			{
				displayModeMap.put(displayMode, new ArrayList<>());
			}
		}
		return displayModeMap;
	}

	private <T> void addDisplayModeComponents(final HashMap<DisplayMode, ArrayList<T>> map, final T component, final DisplayMode... displayModes)
	{
		if (displayModes.length == 0)
		{
			this.addDisplayModeComponent(map, component, DisplayMode.Default);
		}
		else if (Arrays.asList(displayModes).contains(DisplayMode.All))
		{
			for (final DisplayMode displayMode : DisplayMode.values())
			{
				if (!displayMode.equals(DisplayMode.All))
				{
					this.addDisplayModeComponent(map, component, displayMode);
				}
			}
		}
		else
		{
			for (final DisplayMode displayMode : displayModes)
			{
				this.addDisplayModeComponent(map, component, displayMode);
			}
		}
	}

	private <T> void removeDisplayModeComponents(final HashMap<DisplayMode, ArrayList<T>> map, final T component, final DisplayMode... displayModes)
	{
		if (displayModes.length == 0 || Arrays.asList(displayModes).contains(DisplayMode.All))
		{
			for (final DisplayMode displayMode : DisplayMode.values())
			{
				if (!displayMode.equals(DisplayMode.All))
				{
					this.removeDisplayModeComponent(map, component, displayMode);
				}
			}
		}
		else
		{
			for (final DisplayMode displayMode : displayModes)
			{
				this.removeDisplayModeComponent(map, component, displayMode);
			}
		}
	}

	private <T> void removeDisplayModeComponent(final HashMap<DisplayMode, ArrayList<T>> map, final T component, final DisplayMode displayMode)
	{
		final ArrayList<T> list = map.get(displayMode);
		list.remove(component);
		map.put(displayMode, list);
	}

	private <T> void addDisplayModeComponent(final HashMap<DisplayMode, ArrayList<T>> map, final T component, final DisplayMode displayMode)
	{
		final ArrayList<T> list = map.get(displayMode);
		list.add(component);
		map.put(displayMode, list);
	}

	private <T> Stream<T> getDisplayModeComponents(final HashMap<DisplayMode, ArrayList<T>> map)
	{
		if (this.displayMode.equals(DisplayMode.All))
		{
			return Arrays.stream(DisplayMode.values()).filter(displayMode -> !displayMode.equals(DisplayMode.All)).map(map::get).flatMap(ArrayList::stream).distinct();
		}
		return map.get(this.displayMode).stream();
	}

	/**
	 * Adds a {@link com.larsvansoest.runelite.clueitems.ui.components.CycleButton} to the right side of the header text.
	 *
	 * @param cycleButton  the button to add to the header.
	 * @param insets       the {@link java.awt.GridBagConstraints} insets to adjust placement on the header.
	 * @param ipadX        the {@link java.awt.GridBagConstraints} ipadX to adjust placement on the header.
	 * @param ipadY        the {@link java.awt.GridBagConstraints} ipadY to adjust placement on the header.
	 * @param displayModes specify in which display modes the sub-panel should be displayed.
	 */
	public final void addRight(final CycleButton cycleButton, final Insets insets, final int ipadX, final int ipadY, final DisplayMode... displayModes)
	{
		this.addDisplayModeComponents(this.rightHeaderElements, new HeaderElement(cycleButton, insets, ipadX, ipadY), displayModes);
		this.paintHeaderLabels();
	}

	/**
	 * Adds a {@link JLabel} to the right side of the header text.
	 *
	 * @param iconLabel    the button to add to the header.
	 * @param insets       the {@link java.awt.GridBagConstraints} insets to adjust placement on the header.
	 * @param ipadX        the {@link java.awt.GridBagConstraints} ipadX to adjust placement on the header.
	 * @param ipadY        the {@link java.awt.GridBagConstraints} ipadY to adjust placement on the header.
	 * @param displayModes specify in which display modes the sub-panel should be displayed.
	 */
	public final void addRight(final JLabel iconLabel, final Insets insets, final int ipadX, final int ipadY, final DisplayMode... displayModes)
	{
		this.addDisplayModeComponents(this.rightHeaderElements, new HeaderElement(iconLabel, insets, ipadX, ipadY), displayModes);
		this.paintHeaderLabels();
	}

	/**
	 * Adds a {@link com.larsvansoest.runelite.clueitems.ui.components.CycleButton} to the left side of the header text.
	 *
	 * @param cycleButton  the button to add to the header.
	 * @param insets       the {@link java.awt.GridBagConstraints} insets to adjust placement on the header.
	 * @param ipadX        the {@link java.awt.GridBagConstraints} ipadX to adjust placement on the header.
	 * @param ipadY        the {@link java.awt.GridBagConstraints} ipadY to adjust placement on the header.
	 * @param displayModes specify in which display modes the sub-panel should be displayed.
	 */
	public final void addLeft(final CycleButton cycleButton, final Insets insets, final int ipadX, final int ipadY, final DisplayMode... displayModes)
	{
		this.addDisplayModeComponents(this.leftHeaderElements, new HeaderElement(cycleButton, insets, ipadX, ipadY), displayModes);
		this.paintHeaderLabels();
	}

	/**
	 * Adds a {@link JLabel} to the left side of the header text.
	 *
	 * @param iconLabel    the button to add to the header.
	 * @param insets       the {@link java.awt.GridBagConstraints} insets to adjust placement on the header.
	 * @param ipadX        the {@link java.awt.GridBagConstraints} ipadX to adjust placement on the header.
	 * @param ipadY        the {@link java.awt.GridBagConstraints} ipadY to adjust placement on the header.
	 * @param displayModes specify in which display modes the sub-panel should be displayed.
	 */
	public final void addLeft(final JLabel iconLabel, final Insets insets, final int ipadX, final int ipadY, final DisplayMode... displayModes)
	{
		this.addDisplayModeComponents(this.leftHeaderElements, new HeaderElement(iconLabel, insets, ipadX, ipadY), displayModes);
		this.paintHeaderLabels();
	}

	private void paintHeaderLabels()
	{
		this.header.removeAll();
		final GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.BOTH;
		c.gridx = 0;
		c.gridy = 0;
		c.weightx = 0;

		// Add left icons & buttons
		this.addHeaderElements(this.getDisplayModeComponents(this.leftHeaderElements), c);

		this.header.add(this.statusHeaderName, c);
		c.weightx = 1;

		c.gridx++;
		this.header.add(new JLabel(), c);
		c.weightx = 0;

		c.gridx++;
		this.addHeaderElements(this.getDisplayModeComponents(this.rightHeaderElements), c);

		c.insets.right = 4;
		this.header.add(this.foldIcon, c);
		super.revalidate();
		super.repaint();
	}

	private void addHeaderElements(final Stream<HeaderElement> headerElements, final GridBagConstraints c)
	{
		final Insets previousInsets = c.insets;
		final int previousIpadX = c.ipadx;
		final int previousIpadY = c.ipady;
		headerElements.forEach(headerElement ->
		{
			c.insets = headerElement.getInsets();
			c.ipadx = headerElement.getIpadX();
			c.ipady = headerElement.getIpadY();
			this.header.add(headerElement.getElement(), c);
			c.gridx++;
		});
		c.insets = previousInsets;
		c.ipadx = previousIpadX;
		c.ipady = previousIpadY;
	}

	private JShadowedLabel getHeaderText(final String text, final int fixedNameWidth, final int fixedHeight)
	{
		final JShadowedLabel label = new JShadowedLabel(text);
		final Dimension size = new Dimension(fixedNameWidth, fixedHeight);
		label.setMinimumSize(size);
		label.setPreferredSize(size);
		label.setMaximumSize(size);

		label.setFont(FontManager.getRunescapeSmallFont());
		label.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
		label.setHorizontalAlignment(SwingConstants.CENTER);
		return label;
	}

	/**
	 * DisplayModes to distinguish different display environments.
	 * <p>
	 * Specifying a display mode allows for choosing which previously added elements, header icons and sub-panels should be displayed on the panel.
	 */
	public enum DisplayMode
	{
		All(),
		Default(),
		Nested()
	}

	private final static class FOLD_ICONS
	{
		static final ImageIcon DOWN = new ImageIcon(EmoteClueItemsImages.Icons.Chevron.DOWN);
		static final ImageIcon LEFT = new ImageIcon(EmoteClueItemsImages.Icons.Chevron.LEFT);
	}

	@Getter
	@RequiredArgsConstructor
	private static class HeaderElement
	{
		private final JComponent element;
		private final Insets insets;
		private final int ipadX;
		private final int ipadY;
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems.ui.components;

import com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPalette;
import lombok.Getter;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayDeque;
import java.util.Objects;
import java.util.Queue;

/**
 * Button which cycles values each time it is clicked. Allows use of unique icons to display currently selected value.
 *
 * @author Lars van Soest
 * @since 3.0.0
 */
public class CycleButton extends JPanel
{
	private final JLabel optionLabel;
	private final Queue<Stage> stageQueue;
	private final String defaultToolTip;
	private Stage currentStage;
	private Icon currentValue;
	private int minWidth;
	private int minHeight;

	@Getter
	private boolean turnedOn;
	private String toolTipBeforeDisabled;
	private Icon iconBeforeDisabled;

	private int stageCount;

	/**
	 * Creates the button with specified default value.
	 *
	 * @param primary         Icon to display when value is selected.
	 * @param onSelectPrimary Runnable to execute when value is selected.
	 * @param defaultToolTip  Tooltip to display when hovering the cycle button.
	 */
	public CycleButton(
			final EmoteClueItemsPalette emoteClueItemsPalette, final Icon primary, final Runnable onSelectPrimary, final String defaultToolTip)
	{
		this(emoteClueItemsPalette, primary, onSelectPrimary, null, null, defaultToolTip);
	}

	/**
	 * Creates the button with specified default left and right-click value.
	 *
	 * @param emoteClueItemsPalette Colour scheme for the button.
	 * @param primary               Icon to display when value is selected.
	 * @param onSelectPrimary       Runnable to execute when value is selected.
	 * @param secondary             Runnable to execute when secondary value is selected.
	 * @param onSelectSecondary     Runnable to execute when secondary value is selected.
	 * @param defaultToolTip        Tooltip to display when hovering the cycle button.
	 */
	public CycleButton(
			final EmoteClueItemsPalette emoteClueItemsPalette, final Icon primary, final Runnable onSelectPrimary, final Icon secondary, final Runnable onSelectSecondary, final String defaultToolTip)
	{
		super(new GridBagLayout());
		super.setBackground(emoteClueItemsPalette.getDefaultColor());
		super.setToolTipText(defaultToolTip);
		super.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(final MouseEvent e)
			{
				if (CycleButton.this.turnedOn)
				{
					CycleButton.this.next(e.getButton() == MouseEvent.BUTTON1);
				}
			}

			@Override
			public void mouseEntered(final MouseEvent e)
			{
				if (CycleButton.this.turnedOn)
				{
					CycleButton.super.setBackground(emoteClueItemsPalette.getHoverColor());
				}
			}

			@Override
			public void mouseExited(final MouseEvent e)
			{
				CycleButton.super.setBackground(emoteClueItemsPalette.getDefaultColor());
			}
		});

		this.stageCount = 0;

		this.optionLabel = new JLabel();
		this.optionLabel.setHorizontalAlignment(JLabel.CENTER);
		this.optionLabel.setVerticalAlignment(JLabel.CENTER);
		this.optionLabel.setIcon(primary);
		this.minWidth = primary.getIconWidth();
		this.minHeight = primary.getIconHeight();
		final Dimension size = new Dimension(this.minWidth, this.minHeight);
		super.setMinimumSize(size);
		super.setPreferredSize(size);

		this.stageQueue = new ArrayDeque<>();
		this.defaultToolTip = defaultToolTip;
		this.currentStage = new Stage(primary, onSelectPrimary, secondary, onSelectSecondary, defaultToolTip, this.stageCount++);
		this.currentValue = primary;
		onSelectPrimary.run();

		this.turnedOn = true;

		final GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.BOTH;
		super.add(this.optionLabel, c);
	}

	/**
	 * Cycles through the values to reach the default button value.
	 */
	public void reset()
	{
		this.cycleToStage(0);
	}

	/**
	 * Cycles through values until value with specified stage id is reached.
	 *
	 * @param id Value stage returned by {@link #addOption(javax.swing.Icon, Runnable, String)} and {@link #addOption(javax.swing.Icon, Runnable, javax.swing.Icon, Runnable, String)}.
	 */
	public void cycleToStage(final int id)
	{
		final int initialId = this.currentStage.id;
		while (this.currentStage.id != id)
		{
			this.next(true);
			if (this.currentStage.id == initialId)
			{
				break;
			}
		}
	}

	private void next(final Boolean isPrimaryMouseKey)
	{
		final Stage stage;
		final Runnable runnable;
		if (isPrimaryMouseKey || Objects.isNull(this.currentStage.getSecondary()))
		{
			stage = Objects.requireNonNull(this.stageQueue.poll());
			this.stageQueue.add(this.currentStage);
			if (stage == this.currentStage)
			{
				return;
			}
			this.currentStage = stage;
			this.currentValue = stage.getPrimary();
			this.optionLabel.setIcon(stage.getPrimary());
			runnable = stage.getOnSelectPrimary();
		}
		else
		{
			stage = this.currentStage;
			final boolean isPrimaryValue = stage.primary == this.currentValue;
			this.currentValue = isPrimaryValue ? this.currentStage.getSecondary() : this.currentStage.getPrimary();
			this.optionLabel.setIcon(isPrimaryValue ? this.currentStage.getSecondary() : this.currentStage.getPrimary());
			runnable = isPrimaryValue ? stage.getOnSelectSecondary() : stage.getOnSelectPrimary();
		}
		final String toolTip = stage.getToolTip();
		super.setToolTipText(toolTip == null ? this.defaultToolTip : toolTip);
		runnable.run();
	}

	/**
	 * Add a new value to the button cycle.
	 *
	 * @param icon     Icon to display when value is selected.
	 * @param onSelect Runnable to execute when value is selected.
	 * @param toolTip  Tooltip to display when hovering the {@link com.larsvansoest.runelite.clueitems.ui.components.CycleButton}.
	 * @return Returns the stage id of added value, to be used as parameter for {@link #cycleToStage(int)}.
	 */
	public int addOption(final Icon icon, final Runnable onSelect, final String toolTip)
	{
		return this.addOption(icon, onSelect, null, null, toolTip);
	}

	/**
	 * Add a new value to the button cycle.
	 * <p>
	 * When the value is selected, right-clicking the {@link com.larsvansoest.runelite.clueitems.ui.components.CycleButton} toggles the specified primary value to the secondary, and vice versa.
	 *
	 * @param primary           Icon to display when primary value is selected.
	 * @param onSelectPrimary   Runnable to execute when primary value is selected.
	 * @param secondary         Runnable to execute when secondary value is selected.
	 * @param onSelectSecondary Runnable to execute when secondary value is selected.
	 * @param toolTip           Tooltip to display when hovering the {@link com.larsvansoest.runelite.clueitems.ui.components.CycleButton}.
	 * @return Returns the stage id of added value, to be used as parameter for {@link #cycleToStage(int)}.
	 */
	public int addOption(
			final Icon primary, final Runnable onSelectPrimary, final Icon secondary, final Runnable onSelectSecondary, final String toolTip)
	{
		final int stageId = this.stageCount++;
		this.stageQueue.add(new Stage(primary, onSelectPrimary, secondary, onSelectSecondary, toolTip, stageId));
		this.minWidth = Math.max(this.minWidth, primary.getIconWidth());
		this.minHeight = Math.max(this.minHeight, primary.getIconHeight());
		final Dimension size = new Dimension(this.minWidth, this.minHeight);
		super.setMinimumSize(size);
		super.setPreferredSize(size);
		return stageId;
	}

	/**
	 * Enables cycle function when clicking the {@link com.larsvansoest.runelite.clueitems.ui.components.CycleButton}.
	 * <p>
	 * Enabled by default. Needed to re-enable cycling after executing {@link #turnOff(javax.swing.Icon, String)}.
	 */
	public void turnOn()
	{
		if (!this.turnedOn)
		{
			super.setToolTipText(this.toolTipBeforeDisabled);
			this.toolTipBeforeDisabled = null;
			this.optionLabel.setIcon(this.iconBeforeDisabled);
			this.iconBeforeDisabled = null;
			this.turnedOn = true;
		}
	}

	/**
	 * Disable cycle function when clicking {@link com.larsvansoest.runelite.clueitems.ui.components.CycleButton}.
	 * <p>
	 * When turned off, the {@link com.larsvansoest.runelite.clueitems.ui.components.CycleButton} will display given icon, and shows given tooltip when the user hovers the button.
	 * <p>
	 * To re-enable the cycle function, execute {@link #turnOn()}.
	 *
	 * @param disabledIcon    The {@link javax.swing.Icon} to display while the button is disabled.
	 * @param disabledToolTip Tooltip to display when hovering the {@link com.larsvansoest.runelite.clueitems.ui.components.CycleButton}.
	 */
	public void turnOff(
			@NonNull
			final Icon disabledIcon, final String disabledToolTip)
	{
		if (this.turnedOn)
		{
			this.toolTipBeforeDisabled = super.getToolTipText();
			this.iconBeforeDisabled = this.optionLabel.getIcon();
			this.optionLabel.setIcon(disabledIcon);
			if (Objects.nonNull(disabledToolTip))
			{
				super.setToolTipText(disabledToolTip);
			}
			this.turnedOn = false;
		}
	}

	@RequiredArgsConstructor
	@Getter
	private static final class Stage
	{
		private final Icon primary;
		private final Runnable onSelectPrimary;
		private final Icon secondary;
		private final Runnable onSelectSecondary;
		private final String toolTip;
		private final int id;
	}
}

package com.larsvansoest.runelite.clueitems.ui.components;

import com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPalette;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.components.shadowlabel.JShadowedLabel;

import javax.swing.*;
import java.awt.*;

/**
 * Displays a key-value pair in similar fashion to "<b>key:</b> value".
 *
 * @author Lars van Soest
 * @since 3.0.0
 */
public class PropertyPanel extends JPanel implements StatusPanel
{
	private final JLabel nameLabel;
	private final JLabel valueLabel;

	/**
	 * Creates the panel.
	 *
	 * @param palette Colour scheme for the panel.
	 * @param name    Name to display before the value.
	 * @param value   Value to display after the name.
	 */
	public PropertyPanel(final EmoteClueItemsPalette palette, final String name, final String value)
	{
		super(new GridBagLayout());
		super.setBackground(palette.getFoldContentColor());

		this.nameLabel = new JShadowedLabel();
		this.setName(name);
		this.nameLabel.setFont(FontManager.getRunescapeSmallFont());
		this.nameLabel.setForeground(palette.getPropertyNameColor());
		this.nameLabel.setHorizontalAlignment(JLabel.CENTER);

		this.valueLabel = new JLabel();
		this.setValue(value);
		this.valueLabel.setFont(FontManager.getRunescapeSmallFont());
		this.valueLabel.setHorizontalAlignment(JLabel.CENTER);
		this.setStatus(Status.InComplete);

		final GridBagConstraints c = new GridBagConstraints();
		c.gridx = 0;
		c.gridy = 0;
		c.insets.left = 5;
		c.weightx = 0;
		c.fill = GridBagConstraints.BOTH;
		super.add(this.nameLabel, c);

		c.gridx++;
		super.add(this.valueLabel, c);
	}

	/**
	 * Sets the name of the property panel.
	 *
	 * @param name the new name to display before the value.
	 */
	public void setName(final String name)
	{
		this.nameLabel.setText(String.format("%s:", name));
	}

	/**
	 * Sets the value of the property panel.
	 *
	 * @param value the new value to display after the name.
	 */
	public void setValue(final String value)
	{
		this.valueLabel.setText(value.toLowerCase());
	}

	@Override
	public void setStatus(Status status) {
		this.valueLabel.setForeground(status.colour);
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems.ui.components;

import com.larsvansoest.runelite.clueitems.EmoteClueItemsImages;
import com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPalette;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;

/**
 * Displays an item collection log, with item icons and quantity indicators.
 * <p>
 * Items are semi-transparent when quantity is 0.
 */
public class ItemCollectionPanel extends RequirementPanel
{
	private final int slotRowSize;
	private final ArrayList<ItemSlotPanel> itemSlots;
	private final JPanel itemsPanel;
	private final Color itemSlotBackGround;

	/**
	 * Creates the item collection panel.
	 *
	 * @param palette     Colour scheme for the grid.
	 * @param name        Name to display as {@link com.larsvansoest.runelite.clueitems.ui.components.FoldablePanel} header text.
	 * @param slotRowSize The amount of item icons per row.
	 */
	public ItemCollectionPanel(final EmoteClueItemsPalette palette, final String name, final int slotRowSize)
	{
		super(palette, name, 160, 20);
		super.setStatus(Status.InComplete);
		super.addLeft(new JLabel(new ImageIcon(EmoteClueItemsImages.Icons.RuneScape.INVENTORY)), new Insets(2, 4, 2, 0), 0, 0, DisplayMode.All);

		this.itemSlotBackGround = palette.getFoldContentColor();

		this.itemsPanel = new JPanel(new GridBagLayout());
		this.itemsPanel.setBackground(this.itemSlotBackGround);
		super.setFoldContentLeftInset(0);
		super.setFoldContentRightInset(0);
		super.setFixedFoldContentTopInset(1);
		super.addChild(this.itemsPanel, DisplayMode.All);

		this.slotRowSize = slotRowSize;
		this.itemSlots = new ArrayList<>();
	}

	/**
	 * Collapses the collection log.
	 * <p>
	 * Also removes all item panels to enable re-using them in another panel.
	 */
	@Override
	public void fold()
	{
		this.itemSlots.forEach(this.itemsPanel::remove);
		super.fold();
	}

	/**
	 * Un-collapses the collection log.
	 * <p>
	 * Also re-adds all item panels to enable re-using them in another panel. s
	 */
	@Override
	public void unfold()
	{
		final GridBagConstraints c = new GridBagConstraints();
		c.gridx = 0;
		c.gridy = 0;
		int i = 0;
		while (i < this.itemSlots.size())
		{
			this.itemsPanel.add(this.itemSlots.get(i), c);
			i++;
			final int x = i % this.slotRowSize;
			if (x == 0)
			{
				c.gridy++;
			}
			c.gridx = x;
		}
		super.unfold();
	}

	/**
	 * Adds an item to the item collection log.
	 *
	 * @param itemSlotPanel the panel which displays the item.
	 */
	public void addItem(final ItemSlotPanel itemSlotPanel)
	{
		if (!this.itemSlots.contains(itemSlotPanel))
		{
			itemSlotPanel.setBackground(this.itemSlotBackGround);
			this.itemSlots.add(itemSlotPanel);
		}
	}
}
package com.larsvansoest.runelite.clueitems.ui.components;

import com.larsvansoest.runelite.clueitems.EmoteClueItemsImages;
import com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPalette;
import net.runelite.client.ui.FontManager;
import net.runelite.client.util.ImageUtil;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.font.TextAttribute;
import java.util.Map;

/**
 * A button with a location pin icon and a "maplink" label.
 * <p>
 * Clicking the button marks the location on the ground and on the RuneScape world map.
 *
 * @author Lars van Soest
 * @since 4.1.0
 */
public class MapLinkButton extends JPanel
{
	private static final String LABEL_TEXT = "mark map";
	private static final String LABEL_TEXT_DISABLE = "un-mark";

	private static final Icon PIN_ICON = new ImageIcon(EmoteClueItemsImages.Icons.Location.PIN);

	private static final Icon PIN_ICON_DISABLED = new ImageIcon(ImageUtil.grayscaleImage(EmoteClueItemsImages.Icons.Location.PIN));

	private static final Icon PIN_DELETE_ICON = new ImageIcon(EmoteClueItemsImages.Icons.Location.PIN_DELETE);

	private static final Font LABEL_FONT = FontManager.getRunescapeSmallFont();
	private static final Font LABEL_FONT_UNDERLINED = MapLinkButton.getUnderLinedFont(MapLinkButton.LABEL_FONT);

	private final JLabel label;

	private final JLabel pinLabel;

	private boolean showDelete;

	private boolean disabled;

	/**
	 * Creates the button.
	 *
	 * @param palette Colour scheme for the button.
	 */
	public MapLinkButton(final EmoteClueItemsPalette palette, final Runnable onClick, final Runnable onClickDelete) // TODO: Add location parameter and highlight it on click.
	{
		super(new GridBagLayout());
		super.setBackground(palette.getFoldContentColor());

		final Color labelColor = palette.getPropertyValueColor();
		final Color labelHoverColor = palette.getPropertyNameColor();
		this.label = this.getMapLinkLabel(labelColor);
		this.pinLabel = new JLabel();
		this.setShowDelete(false);
		this.disabled = false;

		super.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(final MouseEvent e)
			{
				if (!MapLinkButton.this.disabled) {
					if (MapLinkButton.this.showDelete) {
						onClickDelete.run();
					}
					else {
						onClick.run();
					}
					MapLinkButton.this.setShowDelete(!MapLinkButton.this.showDelete);
				}
				super.mousePressed(e);
			}

			@Override
			public void mouseEntered(final MouseEvent e)
			{
				if (!MapLinkButton.this.disabled) {
					MapLinkButton.this.label.setForeground(labelHoverColor);
					MapLinkButton.this.label.setFont(MapLinkButton.LABEL_FONT_UNDERLINED);
				}
				super.mouseEntered(e);
			}

			@Override
			public void mouseExited(final MouseEvent e)
			{
				MapLinkButton.this.label.setForeground(labelColor);
				MapLinkButton.this.label.setFont(MapLinkButton.LABEL_FONT);
				super.mouseExited(e);
			}
		});

		final GridBagConstraints c = new GridBagConstraints();
		c.gridx = 0;
		c.gridy = 0;
		c.weightx = 0;
		c.weighty = 1;
		c.fill = GridBagConstraints.BOTH;
		super.add(this.pinLabel, c);
		c.weightx = 1;
		c.gridx++;
		super.add(this.label, c);
	}

	private static Font getUnderLinedFont(final Font font)
	{
		final Map attributes = font.getAttributes();
		attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
		return font.deriveFont(attributes);
	}

	private JLabel getMapLinkLabel(final Color textColor)
	{
		final JLabel label = new JLabel();
		label.setText(MapLinkButton.LABEL_TEXT);
		label.setHorizontalAlignment(JLabel.CENTER);
		label.setVerticalAlignment(JLabel.CENTER);
		label.setFont(LABEL_FONT);
		label.setForeground(textColor);
		return label;
	}

	public void setShowDelete(boolean show) {
		this.showDelete = show;
		this.pinLabel.setIcon(show ? PIN_DELETE_ICON : PIN_ICON);
		this.label.setText(show ? LABEL_TEXT_DISABLE : LABEL_TEXT);
	}

	public void turnOff() {
		if (!this.disabled) {
			this.disabled = true;
			this.pinLabel.setIcon(PIN_ICON_DISABLED);
		}
	}

	public void turnOn() {
		if (this.disabled) {
			this.disabled = false;
			this.setShowDelete(this.showDelete);
		}
	}
}

package com.larsvansoest.runelite.clueitems.ui.components;

import com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPalette;
import net.runelite.client.ui.components.shadowlabel.JShadowedLabel;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Objects;

/**
 * Displays a tab menu to control display of {@link javax.swing.JPanel}. Clicking a tab will set a corresponding display visible, while setting the rest of the tab displays as invisible.
 */
public class TabMenu extends JPanel
{
	private final GridBagConstraints c;
	private final EmoteClueItemsPalette palette;
	private JPanel activeButton;
	private JPanel activeContent;

	/**
	 * Creates the tab menu.
	 * <p>
	 * Initialises with one default tab button.
	 *
	 * @param palette            Colour scheme for the tab menu.
	 * @param defaultContent     Default panel to display when tab menu loaded.
	 * @param defaultText        Default tab button text to for default display.
	 * @param defaultToolTipText Tooltip to display when hovering the tab button.
	 */
	public TabMenu(final EmoteClueItemsPalette palette, final JPanel defaultContent, final String defaultText, final String defaultToolTipText)
	{
		this(palette, new JShadowedLabel(defaultText), defaultContent, defaultToolTipText);
	}

	/**
	 * Creates the tab menu.
	 * <p>
	 * Initialises with one default tab button.
	 *
	 * @param palette            Colour scheme for the tab menu.
	 * @param defaultContent     Default panel to display when tab menu loaded.
	 * @param defaultIcon        Default tab button icon for default display.
	 * @param defaultToolTipText Tooltip to display when hovering the tab button.
	 */
	public TabMenu(final EmoteClueItemsPalette palette, final JPanel defaultContent, final Icon defaultIcon, final String defaultToolTipText)
	{
		this(palette, new JLabel(defaultIcon), defaultContent, defaultToolTipText);
	}

	private TabMenu(final EmoteClueItemsPalette palette, final JLabel label, final JPanel defaultContent, final String defaultToolTipText)
	{
		super(new GridBagLayout());
		this.palette = palette;
		this.c = new GridBagConstraints();
		this.c.gridx = 0;
		this.c.gridy = 0;
		this.c.weightx = 1;
		this.c.fill = GridBagConstraints.BOTH;
		this.addTab(label, defaultContent, defaultToolTipText, true, 0);
	}

	/**
	 * Adds a new tab to the {@link com.larsvansoest.runelite.clueitems.ui.components.TabMenu}.
	 *
	 * @param content     panel to display when tab button is selected.
	 * @param text        tab button text for the new panel.
	 * @param toolTipText Tooltip to display when hovering the tab button.
	 * @param setActive   set new tab as active.
	 * @param ipadX       {@link java.awt.GridBagConstraints} ipadX to adjust tab button sizing, and to compensate for string size variations.
	 */
	public void addTab(final JPanel content, final String text, final String toolTipText, final boolean setActive, final int ipadX)
	{
		final JLabel label = new JShadowedLabel(text);
		this.addTab(label, content, toolTipText, setActive, ipadX);
	}

	/**
	 * Adds a new tab to the {@link com.larsvansoest.runelite.clueitems.ui.components.TabMenu}.
	 *
	 * @param content     panel to display when tab button is selected.
	 * @param icon        tab button icon for the new panel.
	 * @param toolTipText Tooltip to display when hovering the tab button.
	 * @param setActive   set new tab as active.
	 * @param ipadX       {@link java.awt.GridBagConstraints} ipadX to adjust tab button sizing, and to compensate for string size variations.
	 */
	public void addTab(final JPanel content, final Icon icon, final String toolTipText, final boolean setActive, final int ipadX)
	{
		final JLabel label = new JLabel(icon);
		this.addTab(label, content, toolTipText, setActive, ipadX);
	}

	private void addTab(final JLabel label, final JPanel content, final String toolTipText, final boolean setActive, final int ipadX)
	{
		label.setHorizontalAlignment(SwingConstants.CENTER);
		final JPanel tab = new JPanel(new GridBagLayout());
		final GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.BOTH;
		c.gridx = 0;
		c.gridy = 0;
		c.weightx = 1;
		tab.add(label, c);
		tab.setToolTipText(toolTipText);
		tab.setBackground(TabMenu.this.palette.getDefaultColor());
		tab.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(final MouseEvent e)
			{
				TabMenu.this.setActive(tab, content);
			}

			@Override
			public void mouseEntered(final MouseEvent e)
			{
				tab.setBackground(TabMenu.this.palette.getHoverColor());
				if (tab != TabMenu.this.activeButton)
				{
					TabMenu.this.activeButton.setBackground(TabMenu.this.palette.getDefaultColor());
				}
			}

			@Override
			public void mouseExited(final MouseEvent e)
			{
				tab.setBackground(TabMenu.this.activeButton == tab ? TabMenu.this.palette.getSelectColor() : TabMenu.this.palette.getDefaultColor());
				if (tab != TabMenu.this.activeButton)
				{
					TabMenu.this.activeButton.setBackground(TabMenu.this.palette.getSelectColor());
				}
			}
		});
		this.c.ipadx = ipadX;
		super.add(tab, this.c);
		this.c.gridx++;
		if (setActive)
		{
			this.setActive(tab, content);
		}
		else
		{
			content.setVisible(false);
		}
		super.revalidate();
		super.repaint();
	}

	private void setActive(final JPanel tabButton, final JPanel tabContent)
	{
		if (tabButton != this.activeButton)
		{
			if (Objects.nonNull(this.activeButton))
			{
				this.activeButton.setBackground(this.palette.getDefaultColor());
			}
			tabButton.setBackground(this.palette.getSelectColor());
			this.activeButton = tabButton;
		}
		if (tabContent != this.activeContent)
		{
			if (Objects.nonNull(this.activeContent))
			{
				this.activeContent.setVisible(false);
			}
			tabContent.setVisible(true);
			this.activeContent = tabContent;
		}
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems.ui.components;

import com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPalette;
import net.runelite.client.input.KeyListener;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.components.IconTextField;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.util.List;
import java.util.*;
import java.util.function.Predicate;

/**
 * Lists {@link FoldablePanel} entries, provides functionality to display filtered sub-sets.
 *
 * @author Lars van Soest
 * @since 3.0.0
 */
public class DataGrid<T extends JPanel> extends JPanel
{
	protected final List<T> entries;
	private final IconTextField searchBar;
	private final Map<String, CycleButton> filterButtons;
	private final Map<String, Predicate<T>> filters;
	private final EmoteClueItemsPalette palette;
	private final DisclaimerPanel disclaimerPanel;
	private final JSeparator separator;
	private final JPanel entryList;
	private Comparator<T> sort;
	private CycleButton sortButton;

	/**
	 * Creates the grid.
	 *
	 * @param palette            Colour scheme for the grid.
	 * @param minSearchBarHeight Minimum height for the grid's searchbar.
	 */
	public DataGrid(final EmoteClueItemsPalette palette, final int minSearchBarHeight)
	{
		super(new GridBagLayout());
		this.entries = new ArrayList<>();

		this.palette = palette;
		this.searchBar = this.getSearchBar(minSearchBarHeight);
		this.filterButtons = new HashMap<>();
		this.filters = new HashMap<>();
		this.sort = Comparator.comparing(T::hashCode);
		this.sortButton = null;
		this.filters.put("_searchBar", panel -> panel.getName().toLowerCase().contains(this.searchBar.getText().toLowerCase()));

		this.separator = new JSeparator(SwingConstants.HORIZONTAL);
		final Dimension separatorSize = new Dimension(this.separator.getWidth(), 1);
		this.separator.setMinimumSize(separatorSize);
		this.separator.setPreferredSize(separatorSize);
		this.separator.setMaximumSize(separatorSize);
		this.setSeparatorColor(palette.getBrandingColor());

		this.disclaimerPanel = new DisclaimerPanel(palette, this::removeDisclaimer);
		this.disclaimerPanel.setVisible(false);

		this.entryList = new JPanel(new GridBagLayout());

		this.reset();
	}

	/**
	 * Returns html-formatted {@link java.lang.String}, adding bold markup to the specified keyword.
	 *
	 * @param format  String format which depicts where the bold keyword should be displayed (e.g. "Toggle show %s statuses.").
	 * @param keyword Keyword to display with bold formatting inside of the specified format (e.g. "complete").
	 * @return html-formatted {@link java.lang.String}.
	 */
	public static String getToolTipText(final String format, final String keyword)
	{
		return String.format("<html>%s</html>", String.format(format, String.format("<b>%s</b>", keyword)));
	}

	/**
	 * Clears all filter and sort buttons and displays the resulting entries.
	 * <p>
	 * Searchbar input will remain the same.
	 */
	public void reset()
	{
		this.filterButtons.values().forEach(CycleButton::reset);
		if (Objects.nonNull(this.sortButton))
		{
			this.sortButton.reset();
		}
		this.paint();
	}

	private void paint()
	{
		super.removeAll();
		final GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.BOTH;
		c.gridx = 0;
		c.gridy = 0;
		c.weightx = 1;
		super.add(this.searchBar, c);
		c.weightx = 0;
		c.ipadx = 10;
		c.ipady = 10;
		if (Objects.nonNull(this.sortButton))
		{
			c.gridx++;
			super.add(this.sortButton, c);
		}
		for (final CycleButton filterButton : this.filterButtons.values())
		{
			c.gridx++;
			super.add(filterButton, c);
		}
		c.ipadx = 0;
		c.ipady = 0;
		c.gridwidth = this.filterButtons.size() + 1 + (Objects.nonNull(this.sortButton) ? 1 : 0); // searchbar consists of text input (1), filter (x) and sort (0|1) buttons.
		c.gridx = 0;
		c.weightx = 1;
		c.gridy++;
		super.add(this.separator, c);
		c.gridy++;
		super.add(this.disclaimerPanel, c);
		c.gridy++;
		super.add(this.entryList, c);
		this.query();
	}

	/**
	 * Apply all filters and sort the grid entries.
	 * <p>
	 * Result corresponds to currently active filters and sorting method selected using the {@link com.larsvansoest.runelite.clueitems.ui.components.DataGrid}'s {@link com.larsvansoest.runelite.clueitems.ui.components.CycleButton}.
	 */
	public final void query()
	{
		this.entryList.removeAll();
		final GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.BOTH;
		c.weightx = 1;
		c.gridy = 0;
		c.gridx = 0;
		this.entries.stream().sorted(this.sort).filter(e -> this.filters.values().stream().allMatch(p -> p.test(e))).forEach(entry ->
		{
			this.entryList.add(entry, c);
			c.gridy++;
		});
		super.revalidate();
		super.repaint();
	}

	/**
	 * Adds a {@link com.larsvansoest.runelite.clueitems.ui.components.CycleButton} to the search bar to allow sorting the entries by specified sort comparator.
	 * <p>
	 * If a sort {@link com.larsvansoest.runelite.clueitems.ui.components.CycleButton} already exists, adds a new cycle stage as value to the existing {@link com.larsvansoest.runelite.clueitems.ui.components.CycleButton}.
	 *
	 * @param icon    Icon to display when given sort comparator is selected.
	 * @param toolTip Tooltip to display on the sort {@link com.larsvansoest.runelite.clueitems.ui.components.CycleButton} when the comparator is selected.
	 * @param sort    Sort comparator to order the {@link com.larsvansoest.runelite.clueitems.ui.components.DataGrid}'s entries.
	 */
	public void addSort(final Icon icon, final String toolTip, final Comparator<T> sort)
	{
		final Runnable onSelect = () ->
		{
			this.sort = sort;
			this.query();
		};
		if (Objects.isNull(this.sortButton))
		{
			this.sortButton = new CycleButton(this.palette, icon, onSelect, toolTip);
		}
		else
		{
			this.sortButton.addOption(icon, onSelect, toolTip);
		}
		this.paint();
	}

	/**
	 * Adds a {@link com.larsvansoest.runelite.clueitems.ui.components.CycleButton} to the search bar to allow filtering the entries by specified predicate.
	 * <p>
	 * Adds a new {@link com.larsvansoest.runelite.clueitems.ui.components.CycleButton} for every unique key, and adds subsequent added filters with the same key.
	 * <p>
	 * When given predicate is selected, changes the {@link com.larsvansoest.runelite.clueitems.ui.components.DataGrid}'s searchbar separator color to given color.
	 *
	 * @param key            Key which represents a unique filter {@link com.larsvansoest.runelite.clueitems.ui.components.CycleButton}.
	 * @param icon           Icon to display when given predicate is selected.
	 * @param toolTip        Tooltip to display on the filter {@link com.larsvansoest.runelite.clueitems.ui.components.CycleButton} when the predicate is selected.
	 * @param predicate      Predicate to filter the {@link com.larsvansoest.runelite.clueitems.ui.components.DataGrid}'s entries.
	 * @param separatorColor The {@link com.larsvansoest.runelite.clueitems.ui.components.DataGrid}'s separator color to display when given predicate is selected.
	 */
	public void addFilter(final String key, final Icon icon, final String toolTip, final Predicate<T> predicate, final Color separatorColor)
	{
		final Runnable onSelect = () ->
		{
			this.filters.put(key, predicate);
			if (Objects.nonNull(separatorColor))
			{
				this.setSeparatorColor(separatorColor);
			}
			this.query();
		};
		if (this.filters.containsKey(key))
		{
			final CycleButton filterButton = this.filterButtons.get(key);
			filterButton.addOption(icon, onSelect, toolTip);
		}
		else
		{
			final CycleButton filterButton = new CycleButton(this.palette, icon, onSelect, toolTip);
			this.filterButtons.put(key, filterButton);
		}
		this.paint();
	}

	/**
	 * Adds a {@link com.larsvansoest.runelite.clueitems.ui.components.CycleButton} to the search bar to allow filtering the entries by specified predicate.
	 * <p>
	 * Adds a new {@link com.larsvansoest.runelite.clueitems.ui.components.CycleButton} for every unique key, and adds subsequent added filters with the same key.
	 *
	 * @param key       Key which represents a unique filter {@link com.larsvansoest.runelite.clueitems.ui.components.CycleButton}.
	 * @param icon      Icon to display when given predicate is selected.
	 * @param toolTip   Tooltip to display on the filter {@link com.larsvansoest.runelite.clueitems.ui.components.CycleButton} when the predicate is selected.
	 * @param predicate Predicate to filter the {@link com.larsvansoest.runelite.clueitems.ui.components.DataGrid}'s entries.
	 */
	public void addFilter(final String key, final Icon icon, final String toolTip, final Predicate<T> predicate)
	{
		this.addFilter(key, icon, toolTip, predicate, null);
	}

	private IconTextField getSearchBar(final int minSearchBarHeight)
	{
		final IconTextField searchBar = new IconTextField();
		searchBar.setIcon(IconTextField.Icon.SEARCH);
		searchBar.setBackground(this.palette.getDefaultColor());
		searchBar.setHoverBackgroundColor(this.palette.getHoverColor());
		searchBar.setFont(FontManager.getRunescapeSmallFont());
		final Dimension size = new Dimension(searchBar.getWidth(), minSearchBarHeight);
		searchBar.setMinimumSize(size);
		searchBar.setPreferredSize(size);
		searchBar.addKeyListener(new KeyListener()
		{
			@Override
			public void keyTyped(final KeyEvent e)
			{
			}

			@Override
			public void keyPressed(final KeyEvent e)
			{
			}

			@Override
			public void keyReleased(final KeyEvent e)
			{
				DataGrid.this.query();
			}
		});
		searchBar.addClearListener(this::query);
		return searchBar;
	}

	/**
	 * Specify which data set the {@link com.larsvansoest.runelite.clueitems.ui.components.DataGrid} should display. Replaces possible existing displayed data set.
	 *
	 * @param entries data set for the {@link com.larsvansoest.runelite.clueitems.ui.components.DataGrid} to display.
	 */
	public void load(final Collection<T> entries)
	{
		this.entries.clear();
		this.entries.addAll(entries);
		this.query();
	}

	/**
	 * Underneath the {@link com.larsvansoest.runelite.clueitems.ui.components.DataGrid}'s searchbar, add a notification with given text.
	 * <p>
	 * Overwrites existing notification.
	 * <p>
	 * Notification can be removed by {@link #removeDisclaimer()}.
	 *
	 * @param text    text to display in te notification.
	 * @param onClose runnable to execute when user clicks the notification close button.
	 */
	public void setDisclaimer(final String text, final Runnable onClose)
	{
		this.disclaimerPanel.setText(text);
		this.disclaimerPanel.setVisible(true);
		this.disclaimerPanel.setOnClose(() ->
		{
			if (Objects.nonNull(onClose)) {
				onClose.run();
			}
			this.removeDisclaimer();
		});
	}

	/**
	 * Set the {@link com.larsvansoest.runelite.clueitems.ui.components.DataGrid}'s searchbar separator color.
	 * <p>
	 * Specifying a separator color in {@link #addFilter(String, javax.swing.Icon, String, java.util.function.Predicate, java.awt.Color)} overwrites this setting once the corresponding value is selected.
	 *
	 * @param color the new separator color.
	 */
	public void setSeparatorColor(final Color color)
	{
		this.separator.setBackground(color);
	}

	/**
	 * Removes any notification added by {@link #setDisclaimer(String, Runnable)}.
	 */
	public void removeDisclaimer()
	{
		this.disclaimerPanel.setVisible(false);
	}
}
package com.larsvansoest.runelite.clueitems.ui;

import com.larsvansoest.runelite.clueitems.data.EmoteClue;
import com.larsvansoest.runelite.clueitems.data.EmoteClueAssociations;
import com.larsvansoest.runelite.clueitems.data.EmoteClueItem;
import com.larsvansoest.runelite.clueitems.data.StashUnit;
import com.larsvansoest.runelite.clueitems.ui.clues.EmoteClueItemCollectionPanel;
import com.larsvansoest.runelite.clueitems.ui.clues.EmoteClueItemGrid;
import com.larsvansoest.runelite.clueitems.ui.clues.EmoteClueItemPanel;
import com.larsvansoest.runelite.clueitems.ui.clues.EmoteCluePanel;
import com.larsvansoest.runelite.clueitems.ui.components.*;
import com.larsvansoest.runelite.clueitems.ui.stashes.StashUnitGrid;
import com.larsvansoest.runelite.clueitems.ui.stashes.StashUnitPanel;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.cluescrolls.clues.item.AllRequirementsCollection;
import net.runelite.client.plugins.cluescrolls.clues.item.ItemRequirement;
import net.runelite.client.ui.PluginPanel;

import javax.swing.*;
import java.awt.*;
import java.util.List;
import java.util.*;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
 * Main {@link net.runelite.client.ui.PluginPanel} of the {@link com.larsvansoest.runelite.clueitems.EmoteClueItemsPlugin}.
 * <p>
 * Creates a hierarchy of all {@link com.larsvansoest.runelite.clueitems.data.EmoteClueItem} and {@link com.larsvansoest.runelite.clueitems.data.StashUnit} requirements for completing {@link com.larsvansoest.runelite.clueitems.data.EmoteClue} in Runescape.
 * <p>
 * Provides functionality to change requirement statuses and toggling UI functionality.
 * <p>
 * Consists of a {@link com.larsvansoest.runelite.clueitems.ui.components.TabMenu} with tabs for a {@link com.larsvansoest.runelite.clueitems.ui.clues.EmoteClueItemGrid} and a {@link com.larsvansoest.runelite.clueitems.ui.stashes.StashUnitGrid}.
 *
 * @author Lars van Soest
 * @since 1.0.4
 */
public class EmoteClueItemsPanel extends PluginPanel
{
	private final Map<EmoteClueItem, EmoteClueItemPanel> itemPanelMap;
	private final Map<StashUnit, StashUnitPanel> stashUnitPanelMap;
	private final Map<EmoteClue, EmoteCluePanel> emoteCluePanelMap;

	private final Map<EmoteClueItem, ArrayList<EmoteClueItemCollectionPanel>> collectionPanelsMap;

	private final Map<EmoteClueItem, ItemSlotPanel> itemSlotPanelMap;

	private final EmoteClueItemGrid clueItemsGrid;
	private final StashUnitGrid stashUnitGrid;

	private StashUnitPanel stashUnitPanelShownOnMap;

	/**
	 * Creates the panel.
	 *
	 * @param palette                  Colour scheme for the grid.
	 * @param itemManager              RuneLite's itemManager to derive item icons in {@link com.larsvansoest.runelite.clueitems.ui.components.ItemCollectionPanel}.
	 * @param onStashFillStatusChanged Behaviour to run when the player changes stash unit fill status.
	 * @param pluginName               Plugin name to display in the footer.
	 * @param pluginVersion            Plugin version to display in the footer.
	 * @param gitHubUrl                Hyperlink when clicking the GitHub icon in the footer.
	 */
	public EmoteClueItemsPanel(
			final EmoteClueItemsPalette palette, final ItemManager itemManager, final BiConsumer<StashUnit, Boolean> onStashFillStatusChanged, final BiConsumer<StashUnit, Boolean> onAddStashUnitToMap, final Runnable onRemoveStashUnitFromMap, final String pluginName, final String pluginVersion,
			final String gitHubUrl, final String payPalUrl)
	{
		super();
		super.setLayout(new GridBagLayout());
		super.getScrollPane().setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);

		this.collectionPanelsMap = new HashMap<>();

		// Create item panels.
		this.itemPanelMap = EmoteClueAssociations.EmoteClueItemParentToEmoteClues
				.keySet()
				.stream()
				.collect(Collectors.toMap(Function.identity(), emoteClueItem -> new EmoteClueItemPanel(palette, emoteClueItem)));

		// Create an item slot panels for collection logs.
		this.itemSlotPanelMap = EmoteClueAssociations.ItemIdToEmoteClueItem
				.entrySet()
				.stream()
				.collect(Collectors.toMap(Map.Entry::getValue, entry -> new ItemSlotPanel(itemManager, entry.getKey(), entry.getValue().getCollectiveName())));

		// Create emote clue panels.
		this.emoteCluePanelMap = EmoteClue.CLUES.stream().collect(Collectors.toMap(Function.identity(), emoteClue -> new EmoteCluePanel(palette, emoteClue)));

		// Create STASHUnit panels.
		this.stashUnitPanelShownOnMap = null;
		this.stashUnitPanelMap = Arrays.stream(StashUnit.values()).collect(Collectors.toMap(
				Function.identity(),
				stash -> new StashUnitPanel(
						palette,
						stash,
						onStashFillStatusChanged,
						(panel, built) -> {
							this.setStashUnitShownOnMap(panel);
							onAddStashUnitToMap.accept(stash, built);
						},
						onRemoveStashUnitFromMap
				)
		));

		// Setup item panels.
		this.itemPanelMap.forEach((emoteClueItem, itemPanel) ->
		{
			final EmoteClueItemCollectionPanel collectionPanel = new EmoteClueItemCollectionPanel(palette,
					"Eligible Inventory Items",
					6,
					emoteClueItem.getItemRequirement() instanceof AllRequirementsCollection
			);
			collectionPanel.addRequirement(emoteClueItem);
			this.addEmoteClueItemToCollectionPanel(collectionPanel, emoteClueItem);
			itemPanel.setItemCollectionPanel(collectionPanel);
			Arrays.stream(EmoteClueAssociations.EmoteClueItemParentToEmoteClues.get(emoteClueItem)).map(this.emoteCluePanelMap::get).forEach(itemPanel::addChild);
		});

		// Setup STASHUnit panels.
		this.stashUnitPanelMap.forEach((stashUnit, stashUnitPanel) ->
		{
			final EmoteClueItemCollectionPanel collectionPanel = new EmoteClueItemCollectionPanel(palette, "Eligible Inventory Items", 6, true);
			stashUnitPanel.setItemCollectionPanel(collectionPanel, FoldablePanel.DisplayMode.All);
			collectionPanel.setStatus(StatusPanel.Status.InComplete);

			for (final EmoteClue emoteClue : EmoteClueAssociations.STASHUnitToEmoteClues.get(stashUnit))
			{
				for (final ItemRequirement itemRequirement : emoteClue.getItemRequirements())
				{
					if (itemRequirement instanceof EmoteClueItem)
					{
						final EmoteClueItem emoteClueItem = (EmoteClueItem) itemRequirement;
						collectionPanel.addRequirement(emoteClueItem);
						this.addEmoteClueItemToCollectionPanel(collectionPanel, emoteClueItem);
						this.itemPanelMap.get(emoteClueItem).addStashUnitPanel(stashUnitPanel);
					}
				}
				stashUnitPanel.addChild(this.emoteCluePanelMap.get(emoteClue));
			}
		});

		this.clueItemsGrid = new EmoteClueItemGrid(palette);
		this.clueItemsGrid.load(this.itemPanelMap.values());

		this.stashUnitGrid = new StashUnitGrid(palette);
		this.stashUnitGrid.load(this.stashUnitPanelMap.values());

		final TabMenu tabMenu = new TabMenu(palette, this.clueItemsGrid, "Items", "Emote Clue Items");
		tabMenu.addTab(this.stashUnitGrid, "Stashes", "Stash Units", false, 1);

		final GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.BOTH;
		c.weightx = 1;
		c.weighty = 1;
		c.gridx = 0;
		c.gridy = 0;

		super.add(new HeaderPanel(pluginName, pluginVersion, gitHubUrl, payPalUrl), c);
		c.gridy++;

		super.add(tabMenu, c);
		c.gridy++;
		super.add(this.clueItemsGrid, c);
		super.add(this.stashUnitGrid, c);
	}

	/**
	 * Sets all requirement progression for emoteClueItems and STASHUnits back to incomplete.
	 */
	public void reset()
	{
		for (final EmoteClueItem emoteClueItem : EmoteClueItem.values())
		{
			this.setEmoteClueItemQuantity(emoteClueItem, 0);
			this.setEmoteClueItemStatus(emoteClueItem, StatusPanel.Status.InComplete);
			this.setEmoteClueItemCollectionLogStatus(emoteClueItem, StatusPanel.Status.InComplete);
		}
		for (final StashUnit stashUnit : StashUnit.values())
		{
			this.setSTASHUnitStatus(stashUnit, false, false);
		}
		this.setStashUnitShownOnMap(null);
		this.setPlayerConstructionLevel(null);
		this.clueItemsGrid.reset();
		this.stashUnitGrid.reset();
		this.disableMapLinks();
	}

	private void setStashUnitShownOnMap(StashUnitPanel stashUnitPanel) {
		if(Objects.nonNull(this.stashUnitPanelShownOnMap)) {
			this.stashUnitPanelShownOnMap.setMapLinkShowDelete(false);
		}
		this.stashUnitPanelShownOnMap = stashUnitPanel;
	}

	private void addEmoteClueItemToCollectionPanel(final EmoteClueItemCollectionPanel collectionPanel, final EmoteClueItem emoteClueItem)
	{
		final ArrayList<EmoteClueItemCollectionPanel> collectionPanels = this.collectionPanelsMap.getOrDefault(emoteClueItem, new ArrayList<>());
		collectionPanels.add(collectionPanel);
		this.collectionPanelsMap.put(emoteClueItem, collectionPanels);

		final ItemSlotPanel slotPanel = this.itemSlotPanelMap.get(emoteClueItem);
		if (slotPanel != null)
		{
			collectionPanel.addItem(slotPanel);
			return;
		}
		final List<EmoteClueItem> successors = emoteClueItem.getChildren();
		if (successors != null)
		{
			for (final EmoteClueItem successor : successors)
			{
				this.addEmoteClueItemToCollectionPanel(collectionPanel, successor);
			}
		}
	}

	/**
	 * Changes an item sprite to represent given quantity, if a mapping to {@link ItemSlotPanel} exists.
	 *
	 * @param emoteClueItem the {@link net.runelite.client.plugins.cluescrolls.clues.item.SingleItemRequirement} {@link EmoteClueItem} requirement containing the item sprite.
	 * @param quantity      the item quantity the item sprite should show.
	 */
	public void setEmoteClueItemQuantity(final EmoteClueItem emoteClueItem, final int quantity)
	{
		final ItemSlotPanel slotPanel = this.itemSlotPanelMap.get(emoteClueItem);
		if (slotPanel != null)
		{
			slotPanel.setQuantity(quantity);
		}
	}

	/**
	 * Changes an {@link com.larsvansoest.runelite.clueitems.data.EmoteClueItem} requirement status for all {@link ItemCollectionPanel} that contain it and are used by the {@link com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPanel}.
	 *
	 * @param emoteClueItem the EmoteClueItem requirement to change the status of in all corresponding {@link ItemCollectionPanel}.
	 * @param status        the new status of the EmoteClueItem requirement.
	 */
	public void setEmoteClueItemCollectionLogStatus(final EmoteClueItem emoteClueItem, final StatusPanel.Status status)
	{
		for (final EmoteClueItemCollectionPanel collectionPanel : this.collectionPanelsMap.get(emoteClueItem))
		{
			collectionPanel.setStatus(emoteClueItem, status);
		}
	}

	/**
	 * Changes an {@link com.larsvansoest.runelite.clueitems.data.EmoteClueItem} {@link com.larsvansoest.runelite.clueitems.ui.clues.EmoteClueItemPanel} status panel to represent given status, if a mapping to {@link com.larsvansoest.runelite.clueitems.ui.clues.EmoteClueItemPanel} exists.
	 *
	 * @param emoteClueItem the emote to change the status of in the corresponding {@link com.larsvansoest.runelite.clueitems.ui.stashes.StashUnitPanel}.
	 * @param status        the desired {@link StatusPanel.Status} status to display.
	 */
	public void setEmoteClueItemStatus(final EmoteClueItem emoteClueItem, final StatusPanel.Status status)
	{
		final EmoteClueItemPanel itemPanel = this.itemPanelMap.get(emoteClueItem);
		if (itemPanel != null)
		{
			itemPanel.setStatus(status);
		}
	}

	/**
	 * Changes a {@link com.larsvansoest.runelite.clueitems.data.StashUnit} {@link com.larsvansoest.runelite.clueitems.ui.stashes.StashUnitPanel} status panel to represent given STASHUnit build and fill status, if a mapping to {@link com.larsvansoest.runelite.clueitems.ui.stashes.StashUnitPanel} exists.
	 * <p>
	 * Does not check fill status if built = false.
	 *
	 * @param stashUnit the STASHUnit to change the status of in the corresponding {@link com.larsvansoest.runelite.clueitems.ui.stashes.StashUnitPanel}.
	 * @param built     specify if the given STASHUnit has been built.
	 * @param filled    specify if the given STASHUnit has been filled.
	 */
	public void setSTASHUnitStatus(final StashUnit stashUnit, final boolean built, final boolean filled)
	{
		final StashUnitPanel stashUnitPanel = this.stashUnitPanelMap.get(stashUnit);
		if (stashUnitPanel != null)
		{
			if (!built)
			{
				stashUnitPanel.setBuilt(false);
			}
			else
			{
				stashUnitPanel.setBuilt(true);
				stashUnitPanel.setFilled(filled);
			}
		}
	}

	public void setStashUnitFilledStatus(final StashUnit stashUnit, final boolean filled) {
		final StashUnitPanel stashUnitPanel = this.stashUnitPanelMap.get(stashUnit);
		if(filled != stashUnitPanel.isFilled()) stashUnitPanel.setFilled(filled);
	}

	/**
	 * Turn on the stash unit filled button of the {@link com.larsvansoest.runelite.clueitems.ui.stashes.StashUnitPanel} of the {@link com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPanel} that corresponds to given STASHUnit, if a mapping to {@link com.larsvansoest.runelite.clueitems.ui.stashes.StashUnitPanel} exists.
	 * <p>
	 * Enabled by default.
	 * <p>
	 * Used to re-enable the stash unit filled button after executing {@link #turnOffSTASHFilledButton(com.larsvansoest.runelite.clueitems.data.StashUnit, javax.swing.Icon, String)}.
	 *
	 * @param stashUnit the STASHUnit of which to turn on the filled button.
	 */
	public void turnOnSTASHFilledButton(final StashUnit stashUnit)
	{
		final StashUnitPanel stashUnitPanel = this.stashUnitPanelMap.get(stashUnit);
		if (stashUnitPanel != null)
		{
			stashUnitPanel.turnOnFilledButton();
		}
	}

	/**
	 * Turn off the stash unit filled button of the {@link com.larsvansoest.runelite.clueitems.ui.stashes.StashUnitPanel} of the {@link com.larsvansoest.runelite.clueitems.ui.EmoteClueItemsPanel} that corresponds to given STASHUnit, if a mapping to {@link com.larsvansoest.runelite.clueitems.ui.stashes.StashUnitPanel} exists.
	 * <p>
	 * Can be re-enabled by executing {@link #turnOnSTASHFilledButton(com.larsvansoest.runelite.clueitems.data.StashUnit)}.
	 *
	 * @param stashUnit the STASHUnit of which to turn off the filled button.
	 * @param icon      the icon to display on the button.
	 * @param toolTip   the tooltip to display when hovering the button.
	 */
	public void turnOffSTASHFilledButton(final StashUnit stashUnit, final Icon icon, final String toolTip)
	{
		final StashUnitPanel stashUnitPanel = this.stashUnitPanelMap.get(stashUnit);
		if (stashUnitPanel != null)
		{
			stashUnitPanel.turnOffFilledButton(icon, toolTip);
		}
	}

	/**
	 * Underneath the {@link com.larsvansoest.runelite.clueitems.ui.clues.EmoteClueItemGrid}'s searchbar, add a notification with given text.
	 * <p>
	 * Overwrites existing notification.
	 * <p>
	 * Notification can be removed by {@link #removeEmoteClueItemGridDisclaimer()}.
	 *
	 * @param text text to display in the notification.
	 */
	public void setEmoteClueItemGridDisclaimer(final String text)
	{
		this.clueItemsGrid.setDisclaimer(text, null);
	}

	/**
	 * Underneath the {@link com.larsvansoest.runelite.clueitems.ui.clues.EmoteClueItemGrid}'s searchbar, add a notification with given text.
	 * <p>
	 * Overwrites existing notification.
	 * <p>
	 * Notification can be removed by {@link #removeEmoteClueItemGridDisclaimer()}.
	 *
	 * @param text    text to display in the notification.
	 * @param onClose runnable to execute when user clicks the notification close button.
	 */
	public void setEmoteClueItemGridDisclaimer(final String text, final Runnable onClose)
	{
		this.clueItemsGrid.setDisclaimer(text, onClose);
	}

	/**
	 * Underneath the {@link com.larsvansoest.runelite.clueitems.ui.stashes.StashUnitGrid}'s searchbar, add a notification with given text.
	 * <p>
	 * Overwrites existing notification.
	 * <p>
	 * Notification can be removed by {@link #removeSTASHUnitGridDisclaimer()}.
	 *
	 * @param text text to display in te notification.
	 */
	public void setSTASHUnitGridDisclaimer(final String text)
	{
		this.stashUnitGrid.setDisclaimer(text, null);
	}

	/**
	 * Removes any notification added by {@link #setEmoteClueItemGridDisclaimer(String)}.
	 */
	public void removeEmoteClueItemGridDisclaimer()
	{
		this.clueItemsGrid.removeDisclaimer();
	}

	/**
	 * Removes any notification added by {@link #setSTASHUnitGridDisclaimer(String)}.
	 */
	public void removeSTASHUnitGridDisclaimer()
	{
		this.stashUnitGrid.removeDisclaimer();
	}

	public void setPlayerConstructionLevel(Integer level) {
		this.stashUnitPanelMap.values().forEach(stashUnitPanel -> stashUnitPanel.setPlayerConstructionLevel(level));
	}

	public void enableMapLinks() {
		this.stashUnitPanelMap.values().forEach(StashUnitPanel::turnOnMapLinkButton);
	}

	public void disableMapLinks() {
		this.stashUnitPanelMap.values().forEach(StashUnitPanel::turnOffMapLinkButton);
	}
}
/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems.overlay;

import lombok.Getter;
import lombok.Setter;

/**
 * Bean-like object which contains return data by class Inspect method.
 */
@Getter
@Setter
class ItemContainerWidgetData
{
	private WidgetContainer widgetContainer;
	private WidgetContext widgetContext;
}
/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems.overlay;

enum WidgetContainer
{
	Inventory(),

	Bank(),

	DepositBox(),

	Shop(),

	GuidePrices(),

	KeptOnDeath(),

	Equipment(),

	GroupStorage()
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems.overlay;

enum WidgetContext
{
	Default(),

	InBank(),

	InDepositBox(),

	InShop(),

	InGuidePrices(),

	InEquipment(),

	InKeptOnDeath(),

	InGroupStorage()
}
/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems.overlay;

import com.larsvansoest.runelite.clueitems.data.EmoteClueDifficulty;
import net.runelite.api.Client;
import net.runelite.api.widgets.WidgetItem;

import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * Utility class with Runescape item container widget inspection functionality.
 *
 * @author Lars van Soest
 * @since 1.2.0
 */
public abstract class WidgetInspector
{
	/**
	 * Identifies the origin of given widgetItem, writes found data into given {@link ItemContainerWidgetData} object. The method iterates over the ancestors (parents of parents), and compares it to the ids of all entries of the {@link Widget} enum.
	 *
	 * @param widgetItem    the {@link WidgetItem} to analyse.
	 * @param itemContainerWidgetDataRef the {@link ItemContainerWidgetData} to write found data to.
	 * @param maxDepth      the maximum steps from initial widgetItem parameter to one of the parents specified.
	 * @since 1.2.0
	 */
	public static void InspectItemContainer(final WidgetItem widgetItem, final ItemContainerWidgetData itemContainerWidgetDataRef, final int maxDepth)
	{
		net.runelite.api.widgets.Widget widget = widgetItem.getWidget();

		itemContainerWidgetDataRef.setWidgetContainer(null);
		itemContainerWidgetDataRef.setWidgetContext(null);

		int i = 0;
		while (i < maxDepth && widget != null)
		{
			final int id = widget.getId();

			if (id == Widget.BANK.id)
			{
				itemContainerWidgetDataRef.setWidgetContext(WidgetContext.InBank);
				itemContainerWidgetDataRef.setWidgetContainer(WidgetContainer.Bank);
				return;
			}
			else if (id == Widget.BANK_EQUIPMENT.id)
			{
				itemContainerWidgetDataRef.setWidgetContext(WidgetContext.InBank);
				itemContainerWidgetDataRef.setWidgetContainer(WidgetContainer.Equipment);
				return;
			}
			else if (id == Widget.BANK_EQUIPMENT_INVENTORY.id)
			{
				itemContainerWidgetDataRef.setWidgetContext(WidgetContext.InBank);
				itemContainerWidgetDataRef.setWidgetContainer(WidgetContainer.Inventory);
				return;
			}
			else if (id == Widget.BANK_INVENTORY.id)
			{
				itemContainerWidgetDataRef.setWidgetContext(WidgetContext.InBank);
				itemContainerWidgetDataRef.setWidgetContainer(WidgetContainer.Inventory);
				return;
			}

			else if (id == Widget.EQUIPMENT.id)
			{
				itemContainerWidgetDataRef.setWidgetContext(WidgetContext.Default);
				itemContainerWidgetDataRef.setWidgetContainer(WidgetContainer.Equipment);
				return;
			}
			else if (id == Widget.EQUIPMENT_EQUIPMENT.id)
			{
				itemContainerWidgetDataRef.setWidgetContext(WidgetContext.InEquipment);
				itemContainerWidgetDataRef.setWidgetContainer(WidgetContainer.Equipment);
				return;
			}
			else if (id == Widget.EQUIPMENT_INVENTORY.id)
			{
				itemContainerWidgetDataRef.setWidgetContext(WidgetContext.InEquipment);
				itemContainerWidgetDataRef.setWidgetContainer(WidgetContainer.Inventory);
				return;
			}

			else if (id == Widget.DEPOSIT_BOX.id)
			{
				itemContainerWidgetDataRef.setWidgetContext(WidgetContext.InDepositBox);
				itemContainerWidgetDataRef.setWidgetContainer(WidgetContainer.DepositBox);
				return;
			}

			else if (id == Widget.GUIDE_PRICES.id)
			{
				itemContainerWidgetDataRef.setWidgetContext(WidgetContext.InGuidePrices);
				itemContainerWidgetDataRef.setWidgetContainer(WidgetContainer.GuidePrices);
				return;
			}
			else if (id == Widget.GUIDE_PRICES_INVENTORY.id)
			{
				itemContainerWidgetDataRef.setWidgetContext(WidgetContext.InGuidePrices);
				itemContainerWidgetDataRef.setWidgetContainer(WidgetContainer.Inventory);
				return;
			}

			else if (id == Widget.INVENTORY.id)
			{
				itemContainerWidgetDataRef.setWidgetContext(WidgetContext.Default);
				itemContainerWidgetDataRef.setWidgetContainer(WidgetContainer.Inventory);
				return;
			}

			else if (id == Widget.KEPT_ON_DEATH.id)
			{
				itemContainerWidgetDataRef.setWidgetContext(WidgetContext.InKeptOnDeath);
				itemContainerWidgetDataRef.setWidgetContainer(WidgetContainer.KeptOnDeath);
				return;
			}

			else if (id == Widget.SHOP.id)
			{
				itemContainerWidgetDataRef.setWidgetContext(WidgetContext.InShop);
				itemContainerWidgetDataRef.setWidgetContainer(WidgetContainer.Shop);
				return;
			}

			else if (id == Widget.SHOP_INVENTORY.id)
			{
				itemContainerWidgetDataRef.setWidgetContext(WidgetContext.InShop);
				itemContainerWidgetDataRef.setWidgetContainer(WidgetContainer.Inventory);
				return;
			}

			else if (id == Widget.GROUP_STORAGE.id)
			{
				itemContainerWidgetDataRef.setWidgetContext(WidgetContext.InGroupStorage);
				itemContainerWidgetDataRef.setWidgetContainer(WidgetContainer.GroupStorage);
			}

			else if (id == Widget.GROUP_STORAGE_INVENTORY.id)
			{
				itemContainerWidgetDataRef.setWidgetContext(WidgetContext.InGroupStorage);
				itemContainerWidgetDataRef.setWidgetContainer(WidgetContainer.Inventory);
			}

			widget = widget.getParent();
			i++;
		}
	}

	public static boolean TryReadWatsonBoard(final Client client, final Function<EmoteClueDifficulty, BiConsumer<String, Boolean>> stashUnitFillStatusCallback) {
		return TryReadWatsonBoard(Widget.WATSON_NOTICE_BOARD_BEGINNER, client, stashUnitFillStatusCallback.apply(EmoteClueDifficulty.Beginner))
			 | TryReadWatsonBoard(Widget.WATSON_NOTICE_BOARD_EASY, client, stashUnitFillStatusCallback.apply(EmoteClueDifficulty.Easy))
			 | TryReadWatsonBoard(Widget.WATSON_NOTICE_BOARD_MEDIUM, client, stashUnitFillStatusCallback.apply(EmoteClueDifficulty.Medium))
			 | TryReadWatsonBoard(Widget.WATSON_NOTICE_BOARD_HARD, client, stashUnitFillStatusCallback.apply(EmoteClueDifficulty.Hard))
			 | TryReadWatsonBoard(Widget.WATSON_NOTICE_BOARD_ELITE, client, stashUnitFillStatusCallback.apply(EmoteClueDifficulty.Elite))
			 | TryReadWatsonBoard(Widget.WATSON_NOTICE_BOARD_MASTER, client, stashUnitFillStatusCallback.apply(EmoteClueDifficulty.Master));
	}

	private static boolean TryReadWatsonBoard(Widget watsonNoticeBoard, final Client client, final BiConsumer<String, Boolean> stashUnitFillStatusCallback) {
		final net.runelite.api.widgets.Widget stashListWidget = client.getWidget(watsonNoticeBoard.groupId, watsonNoticeBoard.childId);
		if (Objects.isNull(stashListWidget)) return false;
		final net.runelite.api.widgets.Widget[] stashListWidgetChildren = stashListWidget.getChildren();
		if (Objects.isNull(stashListWidgetChildren)) return false;

		String location = null;
		int checkMarkCount = 0;
		for(net.runelite.api.widgets.Widget widget : stashListWidgetChildren) {
			final boolean widgetContainsLocationName = widget.getType() == 4;
			if (widgetContainsLocationName) {
				if (Objects.nonNull(location)) {
					final boolean stashUnitFilled = checkMarkCount == 2;
					stashUnitFillStatusCallback.accept(location, stashUnitFilled);
					checkMarkCount = 0;
				}
				location = widget.getText();
			}
			final boolean widgetContainsCheckMark = Objects.nonNull(location) && widget.getType() == 5;
			if(widgetContainsCheckMark) {
				checkMarkCount++;
			}
		}

		if (Objects.nonNull(location)) {
			final boolean stashUnitFilled = checkMarkCount == 2;
			stashUnitFillStatusCallback.accept(location, stashUnitFilled);
		}

		return true;
	}
}
/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems.overlay;

import com.larsvansoest.runelite.clueitems.EmoteClueItemsConfig;
import com.larsvansoest.runelite.clueitems.EmoteClueItemsImages;
import com.larsvansoest.runelite.clueitems.data.EmoteClue;
import com.larsvansoest.runelite.clueitems.data.EmoteClueAssociations;
import com.larsvansoest.runelite.clueitems.data.EmoteClueDifficulty;
import com.larsvansoest.runelite.clueitems.data.EmoteClueItem;
import com.larsvansoest.runelite.clueitems.map.WorldMapMarker;
import com.larsvansoest.runelite.clueitems.progress.ProgressManager;
import net.runelite.api.Client;
import net.runelite.api.gameval.VarbitID;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.WidgetItemOverlay;
import net.runelite.client.ui.overlay.components.ImageComponent;

import javax.inject.Inject;
import java.awt.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Objects;
import java.util.stream.Stream;

/**
 * Extends {@link WidgetItemOverlay}. Scans and marks items required for emote clue scroll steps.
 *
 * @author Lars van Soest
 * @since 1.0.4
 */
public class EmoteClueItemsOverlay extends WidgetItemOverlay
{
	private final EmoteClueItemsConfig config;
	private final ItemManager itemManager;
	private final ProgressManager progressManager;
	// Single object allocations, re-used every sequential iteration.
	private final ItemContainerWidgetData itemContainerWidgetData;
	private final Point point;
	private final ArrayList<WorldMapMarker> worldMapMarkers;
	private final Client client;
	private final ClientThread clientThread;
	private int x;
	private int y;

	@Inject
	public EmoteClueItemsOverlay(final Client client, final ClientThread clientThread, final ItemManager itemManager, final EmoteClueItemsConfig config, final ProgressManager progressManager)
	{
		this.client = client;
		this.itemManager = itemManager;
		this.progressManager = progressManager;
		this.clientThread = clientThread;

		this.config = config;
		this.itemContainerWidgetData = new ItemContainerWidgetData();
		this.point = new Point();
		this.worldMapMarkers = new ArrayList<>();

		super.showOnInterfaces(Arrays.stream(Widget.values()).mapToInt(widget -> widget.groupId).toArray());
	}

	public void addWorldMarker(final WorldMapMarker marker)
	{
		this.worldMapMarkers.add(marker);
	}

	public void clearWorldMarkers() {
		this.worldMapMarkers.clear();
	}

	@Override
	public void renderItemOverlay(final Graphics2D graphics, final int itemId, final WidgetItem itemWidget)
	{
		WidgetInspector.InspectItemContainer(itemWidget, this.itemContainerWidgetData, 3);
		final WidgetContainer widgetContainer = this.itemContainerWidgetData.getWidgetContainer();
		final WidgetContext widgetContext = this.itemContainerWidgetData.getWidgetContext();

		// Filter unsupported and turned off interfaces.
		if (Objects.isNull(widgetContext) || Objects.isNull(widgetContainer) || !this.interfaceGroupSettingEnabled(widgetContainer))
		{
			return;
		}

		// Opening potion storage changes BANK_CURRENTTAB to 15
		// Closing the bank retains the value so we check interface and current tab
		if (widgetContainer == WidgetContainer.Bank && this.client.getVarbitValue(VarbitID.BANK_CURRENTTAB) == 15)
		{
			return;
		}

		final EmoteClueItem emoteClueItem = EmoteClueAssociations.ItemIdToEmoteClueItem.get(this.itemManager.canonicalize(itemId));

		// Filter items not required for emote clues.
		if (Objects.isNull(emoteClueItem))
		{
			return;
		}

		Stream<EmoteClue> emoteClues = Arrays.stream(EmoteClueAssociations.EmoteClueItemToEmoteClues.get(emoteClueItem));
		if (this.config.filterInStash())
		{
			emoteClues = emoteClues.filter(emoteClue -> !this.progressManager.getStashUnitFilled(emoteClue.getStashUnit()));
		}

		final Rectangle bounds = itemWidget.getCanvasBounds();
		this.x = bounds.x + bounds.width + this.getXOffset(widgetContainer);
		this.y = bounds.y;

		emoteClues.map(EmoteClue::getEmoteClueDifficulty)
				.distinct()
				.filter(this::difficultySettingEnabled)
				.map(RibbonComponent::ofDifficulty)
				.forEach(ribbon ->
		{
			this.point.setLocation(this.x, this.y);
			ribbon.setPreferredLocation(this.point);
			ribbon.render(graphics);
			this.y += ribbon.getBounds().getHeight() + 1;
		});
	}

	@Override
	public Dimension render(final Graphics2D graphics)
	{
		this.clientThread.invoke(() ->
		{
			this.worldMapMarkers.forEach(worldMapMarker -> worldMapMarker.rotateOrb(this.client));
		});
		return super.render(graphics);
	}

	private boolean difficultySettingEnabled(final EmoteClueDifficulty difficulty) {
		switch (difficulty)
		{
			case Beginner:
				return this.config.highlightBeginner();
			case Easy:
				return this.config.highlightEasy();
			case Medium:
				return this.config.highlightMedium();
			case Hard:
				return this.config.highlightHard();
			case Elite:
				return this.config.highlightElite();
			case Master:
				return this.config.highlightMaster();
			default:
				return false;
		}
	}

	private boolean interfaceGroupSettingEnabled(final WidgetContainer widgetContainer)
	{
		switch (widgetContainer)
		{
			case Bank:
				return this.config.highlightBank();
			case DepositBox:
				return this.config.highlightDepositBox();
			case Inventory:
				return this.config.highlightInventory();
			case Equipment:
				return this.config.highlightEquipment();
			case Shop:
				return this.config.highlightShop();
			case KeptOnDeath:
				return this.config.highlightKeptOnDeath();
			case GuidePrices:
				return this.config.highlightGuidePrices();
			case GroupStorage:
				return this.config.highlightGroupStorage();
			default:
				return false;
		}
	}

	private int getXOffset(final WidgetContainer widgetContainer)
	{
		return widgetContainer == WidgetContainer.Equipment ? -10 : -5;
	}

	private static final class RibbonComponent
	{
		static final ImageComponent BEGINNER = new ImageComponent(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Ribbon.BEGINNER);
		static final ImageComponent EASY = new ImageComponent(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Ribbon.EASY);
		static final ImageComponent MEDIUM = new ImageComponent(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Ribbon.MEDIUM);
		static final ImageComponent HARD = new ImageComponent(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Ribbon.HARD);
		static final ImageComponent ELITE = new ImageComponent(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Ribbon.ELITE);
		static final ImageComponent MASTER = new ImageComponent(EmoteClueItemsImages.Icons.RuneScape.EmoteClue.Ribbon.MASTER);

		public static ImageComponent ofDifficulty(final EmoteClueDifficulty difficulty)
		{
			switch (difficulty)
			{
				case Beginner:
					return BEGINNER;
				case Easy:
					return EASY;
				case Medium:
					return MEDIUM;
				case Hard:
					return HARD;
				case Elite:
					return ELITE;
				default:
					return MASTER;
			}
		}
	}


}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2020, Lars van Soest
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.larsvansoest.runelite.clueitems.overlay;

/**
 * Includes Widget definitions for widgets used by the plugin.
 */
public enum Widget
{
	BANK(12, 10),

	BANK_EQUIPMENT(12, 69),

	BANK_EQUIPMENT_INVENTORY(15, 4),

	BANK_INVENTORY(15, 3),

	EQUIPMENT(387, 0),

	EQUIPMENT_EQUIPMENT(84, 1),

	EQUIPMENT_INVENTORY(85, 0),

	DEPOSIT_BOX(192, 2),

	GUIDE_PRICES(464, 2),

	GUIDE_PRICES_INVENTORY(238, 0),

	INVENTORY(149, 0),

	KEPT_ON_DEATH(4, 5),

	SHOP(300, 16),

	SHOP_INVENTORY(301, 0),

	GROUP_STORAGE(724, 10),

	GROUP_STORAGE_INVENTORY(725, 0),

	WATSON_NOTICE_BOARD(493, 0),
	WATSON_NOTICE_BOARD_BEGINNER(493, 4),
	WATSON_NOTICE_BOARD_EASY(493, 6),
	WATSON_NOTICE_BOARD_MEDIUM(493, 8),
	WATSON_NOTICE_BOARD_HARD(493, 10),
	WATSON_NOTICE_BOARD_ELITE(493, 12),
	WATSON_NOTICE_BOARD_MASTER(493, 14);

	/**
	 * id of the widget
	 */
	public final int id;

	/**
	 * group id of the widget, displayed in RuneLites widget inspector as groupId.childId;
	 */
	public final int groupId;

	/**
	 * child id of the widget, displayed in RuneLites widget inspector as groupId.childId;
	 */
	public final int childId;

	Widget(final int groupId, final int childId)
	{
		this.id = groupId << 16 | childId;
		this.groupId = groupId;
		this.childId = childId;
	}
}

package com.larsvansoest.runelite.clueitems;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

@SuppressWarnings("unchecked")
public final class EmoteClueItemsPluginTest
{
	public static void main(final String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(EmoteClueItemsPlugin.class);
		RuneLite.main(args);
	}
}
