package tictac7x.deposit_worn_items;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TicTac7xDepositWornItemsPluginTest {
	public static void main(String[] args) throws Exception {
		ExternalPluginManager.loadBuiltin(TicTac7xDepositWornItemsPlugin.class);
		RuneLite.main(args);
	}
}
package tictac7x.deposit_worn_items;

import net.runelite.api.Client;
import net.runelite.api.SpriteID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.util.ImageUtil;

import javax.annotation.Nullable;
import javax.inject.Inject;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;

public class LockIconOverlay extends Overlay {
    @Inject
    private Client client;

    @Inject
    private TicTac7xDepositWornItemsConfig config;

    @Inject
    private SpriteManager spriteManager;

    private BufferedImage lockIcon = null;

    public LockIconOverlay() {
        setLayer(OverlayLayer.ABOVE_WIDGETS);
        setPosition(OverlayPosition.DYNAMIC);
    }

    @Override
    public Dimension render(final Graphics2D graphics2D) {
        if (config.isDepositWornItemsEnabled()) return null;

        if (lockIcon == null) {
            lockIcon = spriteManager.getSprite(SpriteID.BANK_PLACEHOLDERS_LOCK, 0);
            lockIcon = ImageUtil.resizeImage(lockIcon, 12, 14);
            lockIcon = ImageUtil.alphaOffset(lockIcon, -50);
        }

        @Nullable
        final Widget widgetBankDepositWornItems = client.getWidget(12, 46);

        @Nullable
        final Widget widgetDepositBoxDepositWornItems = client.getWidget(192, 6);

        if (widgetBankDepositWornItems != null) {
            graphics2D.drawImage(
                lockIcon,
                widgetBankDepositWornItems.getCanvasLocation().getX() + 4,
                widgetBankDepositWornItems.getCanvasLocation().getY() + widgetBankDepositWornItems.getHeight() - lockIcon.getHeight() - 5,
                null
            );
        }

        if (widgetDepositBoxDepositWornItems != null) {
            graphics2D.drawImage(
                lockIcon,
                widgetDepositBoxDepositWornItems.getCanvasLocation().getX() + 3,
                widgetDepositBoxDepositWornItems.getCanvasLocation().getY() + widgetDepositBoxDepositWornItems.getHeight() - lockIcon.getHeight() - 5,
                null
            );
        }

        return null;
    }
}

package tictac7x.deposit_worn_items;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.MenuEntry;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;
import java.util.ArrayList;
import java.util.List;

@Slf4j
@PluginDescriptor(
	name = "Deposit Worn Items",
	description = "Disable/Enable the deposit worn items button",
	tags = { "deposit", "worn", "items"}
)
public class TicTac7xDepositWornItemsPlugin extends Plugin {
	@Inject
	private Client client;

	@Inject
	private TicTac7xDepositWornItemsConfig config;

	@Inject
	private ConfigManager configManager;

	@Inject
	private OverlayManager overlayManager;

	@Provides
	TicTac7xDepositWornItemsConfig provideConfig(final ConfigManager configManager) {
		return configManager.getConfig(TicTac7xDepositWornItemsConfig.class);
	}

	@Inject
	private LockIconOverlay lockIconOverlay;

	@Override
	protected void startUp() {
		overlayManager.add(lockIconOverlay);
	}

	@Override
	protected void shutDown() {
		overlayManager.remove(lockIconOverlay);
	}

	@Subscribe
	public void onMenuEntryAdded(final MenuEntryAdded event) {
		final MenuEntry[] currentMenuEntries = client.getMenuEntries();
		if (currentMenuEntries.length < 2 || !currentMenuEntries[1].getOption().equals("Deposit worn items")) return;

        final List<MenuEntry> newMenuEntries = new ArrayList<>();

		// Deposit enabled.
		if (config.isDepositWornItemsEnabled()) {
			for (final MenuEntry menuEntry : currentMenuEntries) {
				if (menuEntry.getOption().equals("Deposit worn items") && config.isDepositWornItemsToggleable()) {
					newMenuEntries.add(client.createMenuEntry(0).setOption("Disable deposit button").onClick(e -> {
						configManager.setConfiguration(
							TicTac7xDepositWornItemsConfig.group,
							TicTac7xDepositWornItemsConfig.deposit_worn_items_enabled,
							false
						);
					}));
				}
				newMenuEntries.add(menuEntry);
			}

		// Deposit disabled.
		} else {
			for (final MenuEntry menuEntry : currentMenuEntries) {
				if (menuEntry.getOption().equals("Deposit worn items")) {
					menuEntry.setDeprioritized(true);
				}
				newMenuEntries.add(menuEntry);
			}

			if (config.isDepositWornItemsToggleable()) {
				newMenuEntries.add(client.createMenuEntry(0).setOption("Enable deposit button").onClick(e -> {
					configManager.setConfiguration(
							TicTac7xDepositWornItemsConfig.group,
							TicTac7xDepositWornItemsConfig.deposit_worn_items_enabled,
							true
					);
				}));
			}

			newMenuEntries.add(client.createMenuEntry(0).setOption("Disabled"));
		}

		client.setMenuEntries(newMenuEntries.toArray(new MenuEntry[0]));
	}
}

package tictac7x.deposit_worn_items;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import static tictac7x.deposit_worn_items.TicTac7xDepositWornItemsConfig.group;

@ConfigGroup(group)
public interface TicTac7xDepositWornItemsConfig extends Config {
	String group = "tictac7x-deposit-worn-items";
	String deposit_worn_items_enabled = "deposit_worn_items_enabled";

	@ConfigItem(
		keyName = deposit_worn_items_enabled,
		name = "Enable Deposit Worn Items",
		description = "Weather deposit worn items button is enabled or not"
	) default boolean isDepositWornItemsEnabled() { return true; }

	@ConfigItem(
		keyName = "toggle_deposit_worn_items",
		name = "Show toggle option",
		description = "Weather to show the option to enable/disable button from right click menu"
	) default boolean isDepositWornItemsToggleable() { return true; }
}

