package com.fairyRingButterflies;

public enum Biome {
    PLAINS,
    DESERT,
    ISLAND,
    CAVE,
    MOUNTAINS,
    SWAMP,
    JUNGLE,
    ABYSS,
    EXTRAPLANAR,
    VOLCANIC
}

package com.fairyRingButterflies;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

import java.awt.*;

import static com.fairyRingButterflies.FairyRingButterfliesConfig.CONFIG_NAME;


@ConfigGroup(CONFIG_NAME)
public interface FairyRingButterfliesConfig extends Config
{

	String CONFIG_NAME = "fairyRingButterflies";

	@ConfigSection(
			name = "Behaviour",
			description = "Flags which determine plugin behaviour",
			position = 0
	)
	String behaviourSection = "behaviour";

	@ConfigSection(
			name = "Colours",
			description = "Colours to apply to fairy ring butterflies globally",
			position = 1
	)
	String colourSection = "colour";

	@ConfigSection(
			name = "Plains Colours",
			description = "colour overrides to apply to butterflies in plains",
			position = 2,
			closedByDefault = true
	)
	String plainsSection = "plainsColours";
	@ConfigSection(
			name = "Desert Colours",
			description = "colour overrides to apply to butterflies in deserts",
			position = 3,
			closedByDefault = true
	)
	String desertSection = "desertColours";
	@ConfigSection(
			name = "Islands Colours",
			description = "colour overrides to apply to butterflies on islands",
			position = 4,
			closedByDefault = true
	)
	String islandSection = "islandColours";
	@ConfigSection(
			name = "Cave Colours",
			description = "colour overrides to apply to butterflies in caves",
			position = 5,
			closedByDefault = true
	)
	String caveSection = "caveColours";
	@ConfigSection(
			name = "Mountain Colours",
			description = "colour overrides to apply to butterflies in mountains",
			position = 6,
			closedByDefault = true
	)
	String mountainsSection = "mountainsColours";
	@ConfigSection(
			name = "Swamp Colours",
			description = "colour overrides to apply to butterflies in swamps",
			position = 7,
			closedByDefault = true
	)
	String swampSection = "swampColours";
	@ConfigSection(
			name = "Jungle Colours",
			description = "colour overrides to apply to butterflies in jungles",
			position = 8,
			closedByDefault = true
	)
	String jungleSection = "jungleColours";
	@ConfigSection(
			name = "Abyss Colours",
			description = "colour overrides to apply to butterflies in the abyss",
			position = 9,
			closedByDefault = true
	)
	String abyssSection = "abyssColours";
	@ConfigSection(
			name = "Extraplanar Colours",
			description = "colour overrides to apply to butterflies in the outer realms",
			position = 10,
			closedByDefault = true
	)
	String extraplanarSection = "extraplanarColours";
	@ConfigSection(
			name = "Volcanic Colours",
			description = "colour overrides to apply to butterflies in volcanic areas",
			position = 11,
			closedByDefault = true
	)
	String volcanicSection = "volcanicColours";
	@ConfigSection(
			name = "Export/Import",
			description = "Export or Import your colour settings",
			position = 12,
			closedByDefault = true
	)
	String exportImport = "exportImport";


	@ConfigItem(
			keyName = "removeButterflies",
			name = "Remove Butterflies",
			description = "Remove butterflies from every fairy ring",
			position = 0,
			section = behaviourSection
	)
	default boolean removeButterflies()
	{
		return false;
	}

	@ConfigItem(
			keyName = "biomeColours",
			name = "Use Biome Overrides",
			description = "Use the biome specific colour overrides, only using the default colours for the POH ring, or newly added ones.",
			position = 1,
			section = behaviourSection
	)
	default boolean biomeColours()
	{
		return true;
	}


	@ConfigItem(
			keyName = "colourWingInner",
			name = "Spot Colour",
			description = "Colour of the spots on the inside of the butterfly wings",
			position = 0,
			section = colourSection
	)
	default Color colourWingInner()
	{
		return new Color(-675597);
	}
	@ConfigItem(
			keyName = "colourWingOuter",
			name = "Wing Colour",
			description = "Main colour of the butterfly wings",
			position = 1,
			section = colourSection
	)
	default Color colourWingOuter()
	{
		return new Color(-7784534);
	}
	@ConfigItem(
			keyName = "colourBody",
			name = "Body Colour",
			description = "Colour of the itty bitty butterfly bodies",
			position = 2,
			section = colourSection
	)
	default Color colourBody()
	{
		return new Color(-15463673);
	}


	@ConfigItem(
			keyName = "removeButterfliesPlains",
			name = "Remove Butterflies",
			description = "Remove butterflies from plains fairy rings",
			position = 0,
			section = plainsSection
	)
	default boolean removeButterfliesPlains()
	{
		return false;
	}
	@ConfigItem(
			keyName = "colourWingInnerPlains",
			name = "Spot Colour",
			description = "Colour of the spots on the inside of the butterfly wings",
			position = 1,
			section = plainsSection
	)
	default Color colourWingInnerPlains()
	{
		return new Color(-1);
	}
	@ConfigItem(
			keyName = "colourWingOuterPlains",
			name = "Wing Colour",
			description = "Main colour of the butterfly wings",
			position = 2,
			section = plainsSection
	)
	default Color colourWingOuterPlains()
	{
		return new Color(-15977106);
	}
	@ConfigItem(
			keyName = "colourBodyPlains",
			name = "Body Colour",
			description = "Colour of the itty bitty butterfly bodies",
			position = 3,
			section = plainsSection
	)
	default Color colourBodyPlains()
	{
		return new Color(-15791611);
	}

	@ConfigItem(
			keyName = "removeButterfliesDesert",
			name = "Remove Butterflies",
			description = "Remove butterflies from desert fairy rings",
			position = 0,
			section = desertSection
	)
	default boolean removeButterfliesDesert()
	{
		return false;
	}
	@ConfigItem(
			keyName = "colourWingInnerDesert",
			name = "Spot Colour",
			description = "Colour of the spots on the inside of the butterfly wings",
			position = 1,
			section = desertSection
	)
	default Color colourWingInnerDesert()
	{
		return new Color(-2372541);
	}
	@ConfigItem(
			keyName = "colourWingOuterDesert",
			name = "Wing Colour",
			description = "Main colour of the butterfly wings",
			position = 2,
			section = desertSection
	)
	default Color colourWingOuterDesert()
	{
		return new Color(-10202598);
	}
	@ConfigItem(
			keyName = "colourBodyDesert",
			name = "Body Colour",
			description = "Colour of the itty bitty butterfly bodies",
			position = 3,
			section = desertSection
	)
	default Color colourBodyDesert()
	{
		return new Color(-14215401);
	}

	@ConfigItem(
			keyName = "removeButterfliesIsland",
			name = "Remove Butterflies",
			description = "Remove butterflies from island fairy rings",
			position = 0,
			section = islandSection
	)
	default boolean removeButterfliesIsland()
	{
		return false;
	}
	@ConfigItem(
			keyName = "colourWingInnerIsland",
			name = "Spot Colour",
			description = "Colour of the spots on the inside of the butterfly wings",
			position = 1,
			section = islandSection
	)
	default Color colourWingInnerIsland()
	{
		return new Color(-9266246);
	}
	@ConfigItem(
			keyName = "colourWingOuterIsland",
			name = "Wing Colour",
			description = "Main colour of the butterfly wings",
			position = 2,
			section = islandSection
	)
	default Color colourWingOuterIsland()
	{
		return new Color(-5843480);
	}
	@ConfigItem(
			keyName = "colourBodyIsland",
			name = "Body Colour",
			description = "Colour of the itty bitty butterfly bodies",
			position = 3,
			section = islandSection
	)
	default Color colourBodyIsland()
	{
		return new Color(-11054510);
	}

	@ConfigItem(
			keyName = "removeButterfliesCave",
			name = "Remove Butterflies",
			description = "Remove butterflies from cave fairy rings",
			position = 0,
			section = caveSection
	)
	default boolean removeButterfliesCave()
	{
		return true;
	}
	@ConfigItem(
			keyName = "colourWingInnerCave",
			name = "Spot Colour",
			description = "Colour of the spots on the inside of the butterfly wings",
			position = 1,
			section = caveSection
	)
	default Color colourWingInnerCave()
	{
		return Color.WHITE;
	}
	@ConfigItem(
			keyName = "colourWingOuterCave",
			name = "Wing Colour",
			description = "Main colour of the butterfly wings",
			position = 2,
			section = caveSection
	)
	default Color colourWingOuterCave()
	{
		return Color.LIGHT_GRAY;
	}
	@ConfigItem(
			keyName = "colourBodyCave",
			name = "Body Colour",
			description = "Colour of the itty bitty butterfly bodies",
			position = 3,
			section = caveSection
	)
	default Color colourBodyCave()
	{
		return Color.DARK_GRAY;
	}

	@ConfigItem(
			keyName = "removeButterfliesMountains",
			name = "Remove Butterflies",
			description = "Remove butterflies from mountain fairy rings",
			position = 0,
			section = mountainsSection
	)
	default boolean removeButterfliesMountains()
	{
		return false;
	}
	@ConfigItem(
			keyName = "colourWingInnerMountains",
			name = "Spot Colour",
			description = "Colour of the spots on the inside of the butterfly wings",
			position = 1,
			section = mountainsSection
	)
	default Color colourWingInnerMountains()
	{
		return new Color(-13219102);
	}
	@ConfigItem(
			keyName = "colourWingOuterMountains",
			name = "Wing Colour",
			description = "Main colour of the butterfly wings",
			position = 2,
			section = mountainsSection
	)
	default Color colourWingOuterMountains()
	{
		return new Color(-15660277);
	}
	@ConfigItem(
			keyName = "colourBodyMountains",
			name = "Body Colour",
			description = "Colour of the itty bitty butterfly bodies",
			position = 3,
			section = mountainsSection
	)
	default Color colourBodyMountains()
	{
		return new Color(-16242420);
	}

	@ConfigItem(
			keyName = "removeButterfliesSwamp",
			name = "Remove Butterflies",
			description = "Remove butterflies from swamp fairy rings",
			position = 0,
			section = swampSection
	)
	default boolean removeButterfliesSwamp()
	{
		return false;
	}
	@ConfigItem(
			keyName = "colourWingInnerSwamp",
			name = "Spot Colour",
			description = "Colour of the spots on the inside of the butterfly wings",
			position = 1,
			section = swampSection
	)
	default Color colourWingInnerSwamp()
	{
		return new Color(-15884248);
	}
	@ConfigItem(
			keyName = "colourWingOuterSwamp",
			name = "Wing Colour",
			description = "Main colour of the butterfly wings",
			position = 2,
			section = swampSection
	)
	default Color colourWingOuterSwamp()
	{
		return new Color(-15979004);
	}
	@ConfigItem(
			keyName = "colourBodySwamp",
			name = "Body Colour",
			description = "Colour of the itty bitty butterfly bodies",
			position = 3,
			section = swampSection
	)
	default Color colourBodySwamp()
	{
		return new Color(-14082016);
	}

	@ConfigItem(
			keyName = "removeButterfliesJungle",
			name = "Remove Butterflies",
			description = "Remove butterflies from jungle fairy rings",
			position = 0,
			section = jungleSection
	)
	default boolean removeButterfliesJungle()
	{
		return false;
	}
	@ConfigItem(
			keyName = "colourWingInnerJungle",
			name = "Spot Colour",
			description = "Colour of the spots on the inside of the butterfly wings",
			position = 1,
			section = jungleSection
	)
	default Color colourWingInnerJungle()
	{
		return new Color(-2487260);
	}
	@ConfigItem(
			keyName = "colourWingOuterJungle",
			name = "Wing Colour",
			description = "Main colour of the butterfly wings",
			position = 2,
			section = jungleSection
	)
	default Color colourWingOuterJungle()
	{
		return new Color(-679905);
	}
	@ConfigItem(
			keyName = "colourBodyJungle",
			name = "Body Colour",
			description = "Colour of the itty bitty butterfly bodies",
			position = 3,
			section = jungleSection
	)
	default Color colourBodyJungle()
	{
		return new Color(-14277365);
	}

	@ConfigItem(
			keyName = "removeButterfliesAbyss",
			name = "Remove Butterflies",
			description = "Remove butterflies from abyssal fairy rings",
			position = 0,
			section = abyssSection
	)
	default boolean removeButterfliesAbyss()
	{
		return false;
	}
	@ConfigItem(
			keyName = "colourWingInnerAbyss",
			name = "Spot Colour",
			description = "Colour of the spots on the inside of the butterfly wings",
			position = 1,
			section = abyssSection
	)
	default Color colourWingInnerAbyss()
	{
		return new Color(-14361252);
	}
	@ConfigItem(
			keyName = "colourWingOuterAbyss",
			name = "Wing Colour",
			description = "Main colour of the butterfly wings",
			position = 2,
			section = abyssSection
	)
	default Color colourWingOuterAbyss()
	{
		return new Color(-7334121);
	}
	@ConfigItem(
			keyName = "colourBodyAbyss",
			name = "Body Colour",
			description = "Colour of the itty bitty butterfly bodies",
			position = 3,
			section = abyssSection
	)
	default Color colourBodyAbyss()
	{
		return new Color(-16647463);
	}

	@ConfigItem(
			keyName = "removeButterfliesExtraplanar",
			name = "Remove Butterflies",
			description = "Remove butterflies from far-flung fairy rings",
			position = 0,
			section = extraplanarSection
	)
	default boolean removeButterfliesExtraplanar()
	{
		return false;
	}
	@ConfigItem(
			keyName = "colourWingInnerExtraplanar",
			name = "Spot Colour",
			description = "Colour of the spots on the inside of the butterfly wings",
			position = 1,
			section = extraplanarSection
	)
	default Color colourWingInnerExtraplanar()
	{
		return new Color(-15672800);
	}
	@ConfigItem(
			keyName = "colourWingOuterExtraplanar",
			name = "Wing Colour",
			description = "Main colour of the butterfly wings",
			position = 2,
			section = extraplanarSection
	)
	default Color colourWingOuterExtraplanar()
	{
		return new Color(-16221014);
	}
	@ConfigItem(
			keyName = "colourBodyExtraplanar",
			name = "Body Colour",
			description = "Colour of the itty bitty butterfly bodies",
			position = 3,
			section = extraplanarSection
	)
	default Color colourBodyExtraplanar()
	{
		return new Color(-2989073);
	}

	@ConfigItem(
			keyName = "removeButterfliesVolcanic",
			name = "Remove Butterflies",
			description = "Remove butterflies from volcanic fairy rings",
			position = 0,
			section = volcanicSection
	)
	default boolean removeButterfliesVolcanic()
	{
		return false;
	}
	@ConfigItem(
			keyName = "colourWingInnerVolcanic",
			name = "Spot Colour",
			description = "Colour of the spots on the inside of the butterfly wings",
			position = 1,
			section = volcanicSection
	)
	default Color colourWingInnerVolcanic()
	{
		return new Color(-15137531);
	}
	@ConfigItem(
			keyName = "colourWingOuterVolcanic",
			name = "Wing Colour",
			description = "Main colour of the butterfly wings",
			position = 2,
			section = volcanicSection
	)
	default Color colourWingOuterVolcanic()
	{
		return new Color(-15132391);
	}
	@ConfigItem(
			keyName = "colourBodyVolcanic",
			name = "Body Colour",
			description = "Colour of the itty bitty butterfly bodies",
			position = 3,
			section = volcanicSection
	)
	default Color colourBodyVolcanic()
	{
		return new Color(-12566464);
	}

	@ConfigItem(
			keyName = "export",
			name = "Export data",
			description = "Exports the current colour settings. Will export biome data only if biome mode is on",
			position = 0,
			section = exportImport
	)
	default boolean exportBool()
	{
		return false;
	}
	@ConfigItem(
			keyName = "import",
			name = "Import from data text field",
			description = "Imports the settings defined in the text field below, produced by an export",
			position = 1,
			section = exportImport
	)
	default boolean importBool()
	{
		return false;
	}
	@ConfigItem(
			keyName = "data",
			name = "Data",
			description = "Data to import",
			position = 2,
			section = exportImport
	)
	default String data()
	{
		return "";
	}
}

package com.fairyRingButterflies;

import net.runelite.client.config.ConfigManager;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;

public class ConfigExportImport {

    public static void exportConfigToTextBox(ConfigManager configManager) {
        Toolkit.getDefaultToolkit()
                .getSystemClipboard()
                .setContents(new StringSelection(convertConfigToString(configManager.getConfig(FairyRingButterfliesConfig.class))), null);
        JOptionPane.showMessageDialog(null,
                "Settings data copied to clipboard",
                "Export Data",
                JOptionPane.INFORMATION_MESSAGE);
        configManager.setConfiguration(FairyRingButterfliesConfig.CONFIG_NAME, "export", false);
    }

    public static void ImportConfigFromTextBox(ConfigManager configManager) {
        String importData = configManager.getConfig(FairyRingButterfliesConfig.class).data();
        String [] settingsByBiome = importData.split("\\|");
        try {
            for (String biomeSettings : settingsByBiome) {
                applyImportedConfig(configManager, biomeSettings);
            }
            JOptionPane.showMessageDialog(null,
                    "Imported config loaded. Close and reopen the plugin config to further customise.",
                    "Export Data",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Import Error", JOptionPane.ERROR_MESSAGE);
        }
        configManager.setConfiguration(FairyRingButterfliesConfig.CONFIG_NAME, "import", false);
        configManager.setConfiguration(FairyRingButterfliesConfig.CONFIG_NAME, "data", "");
    }

    private static String convertConfigToString(FairyRingButterfliesConfig config) {
        StringBuilder sb = new StringBuilder();
        if (config.biomeColours()) {
            sb.append("Mountains:");
            sb.append(config.removeButterfliesMountains());
            sb.append(":");
            sb.append(config.colourBodyMountains().getRGB());
            sb.append(":");
            sb.append(config.colourWingOuterMountains().getRGB());
            sb.append(":");
            sb.append(config.colourWingInnerMountains().getRGB());
            sb.append("|");
            sb.append("Plains:");
            sb.append(config.removeButterfliesPlains());
            sb.append(":");
            sb.append(config.colourBodyPlains().getRGB());
            sb.append(":");
            sb.append(config.colourWingOuterPlains().getRGB());
            sb.append(":");
            sb.append(config.colourWingInnerPlains().getRGB());
            sb.append("|");
            sb.append("Desert:");
            sb.append(config.removeButterfliesDesert());
            sb.append(":");
            sb.append(config.colourBodyDesert().getRGB());
            sb.append(":");
            sb.append(config.colourWingOuterDesert().getRGB());
            sb.append(":");
            sb.append(config.colourWingInnerDesert().getRGB());
            sb.append("|");
            sb.append("Island:");
            sb.append(config.removeButterfliesIsland());
            sb.append(":");
            sb.append(config.colourBodyIsland().getRGB());
            sb.append(":");
            sb.append(config.colourWingOuterIsland().getRGB());
            sb.append(":");
            sb.append(config.colourWingInnerIsland().getRGB());
            sb.append("|");
            sb.append("Cave:");
            sb.append(config.removeButterfliesCave());
            sb.append(":");
            sb.append(config.colourBodyCave().getRGB());
            sb.append(":");
            sb.append(config.colourWingOuterCave().getRGB());
            sb.append(":");
            sb.append(config.colourWingInnerCave().getRGB());
            sb.append("|");
            sb.append("Swamp:");
            sb.append(config.removeButterfliesSwamp());
            sb.append(":");
            sb.append(config.colourBodySwamp().getRGB());
            sb.append(":");
            sb.append(config.colourWingOuterSwamp().getRGB());
            sb.append(":");
            sb.append(config.colourWingInnerSwamp().getRGB());
            sb.append("|");
            sb.append("Jungle:");
            sb.append(config.removeButterfliesJungle());
            sb.append(":");
            sb.append(config.colourBodyJungle().getRGB());
            sb.append(":");
            sb.append(config.colourWingOuterJungle().getRGB());
            sb.append(":");
            sb.append(config.colourWingInnerJungle().getRGB());
            sb.append("|");
            sb.append("Abyss:");
            sb.append(config.removeButterfliesAbyss());
            sb.append(":");
            sb.append(config.colourBodyAbyss().getRGB());
            sb.append(":");
            sb.append(config.colourWingOuterAbyss().getRGB());
            sb.append(":");
            sb.append(config.colourWingInnerAbyss().getRGB());
            sb.append("|");
            sb.append("Extraplanar:");
            sb.append(config.removeButterfliesExtraplanar());
            sb.append(":");
            sb.append(config.colourBodyExtraplanar().getRGB());
            sb.append(":");
            sb.append(config.colourWingOuterExtraplanar().getRGB());
            sb.append(":");
            sb.append(config.colourWingInnerExtraplanar().getRGB());
            sb.append("|");
            sb.append("Volcanic:");
            sb.append(config.removeButterfliesVolcanic());
            sb.append(":");
            sb.append(config.colourBodyVolcanic().getRGB());
            sb.append(":");
            sb.append(config.colourWingOuterVolcanic().getRGB());
            sb.append(":");
            sb.append(config.colourWingInnerVolcanic().getRGB());
            sb.append("|");
        }
        sb.append("Base:");
        sb.append(config.removeButterflies());
        sb.append(":");
        sb.append(config.colourBody().getRGB());
        sb.append(":");
        sb.append(config.colourWingOuter().getRGB());
        sb.append(":");
        sb.append(config.colourWingInner().getRGB());
        return sb.toString();
    }

    private static void applyImportedConfig(ConfigManager configManager, String settings) throws Exception {
        String[] configBits = settings.split(":");
        if (configBits.length != 5){
            throw new Exception("Bad import string: " + settings + " wrong number of settings included.");
        }
        String configSuffix;
        if (configBits[0].equals("Base")) {
            configSuffix = "";
        } else if (configManager.getConfiguration(FairyRingButterfliesConfig.CONFIG_NAME,"removeButterflies" + configBits[0]) != null) {
            configSuffix = configBits[0];
        } else {
            throw new Exception("unknown biome group: \"" + configBits[0] + "\". check data format is correct.");
        }

        configManager.setConfiguration(FairyRingButterfliesConfig.CONFIG_NAME, "removeButterflies" + configSuffix, Boolean.valueOf(configBits[1]));
        configManager.setConfiguration(FairyRingButterfliesConfig.CONFIG_NAME, "colourBody" + configSuffix, new Color(Integer.parseInt(configBits[2])));
        configManager.setConfiguration(FairyRingButterfliesConfig.CONFIG_NAME, "colourWingOuter" + configSuffix, new Color(Integer.parseInt(configBits[3])));
        configManager.setConfiguration(FairyRingButterfliesConfig.CONFIG_NAME, "colourWingInner" + configSuffix, new Color(Integer.parseInt(configBits[4])));

    }

}

package com.fairyRingButterflies;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.Model;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import javax.inject.Inject;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@Slf4j
@PluginDescriptor(
	name = "Fairy Ring Butterflies"
)
public class FairyRingButterfliesPlugin extends Plugin {

	private static Integer STANDARD_RING_ID = 29495;
	private static Integer ZANARIS_RING_ID = 29560;
	private static Integer POH_RING_ID = 29228;
	private static Integer SPIRITUAL_FAIRY_RING = 29229;

	private static List<Integer> fairyRingIds = Arrays.asList(STANDARD_RING_ID, ZANARIS_RING_ID, POH_RING_ID);

	private List<FairyRing> fairyRings = new ArrayList<>();
	private FairyRing pohRing = null;
	private int[] defaultColours1 = null;
	private int[] defaultColours2 = null;
	private int[] defaultColours3 = null;

	private int[] defaultHouseColours1 = null;
	private int[] defaultHouseColours2 = null;
	private int[] defaultHouseColours3 = null;

	private static int stateOfRingConfigure = 0;

	@Inject
	private Client client;

	@Inject
	private FairyRingButterfliesConfig config;

	@Inject
	private ConfigManager configManager;

	@Inject
	private ClientThread clientThread;

	@Override
	protected void startUp() throws Exception {
		clientThread.invokeLater(this::applySettings);
	}

	@Override
	protected void shutDown() throws Exception {
        clientThread.invokeLater(this::resetToOriginalColours);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged) {
		if (gameStateChanged.getGameState().equals(GameState.LOGGED_IN)) {
			Scene scene = client.getScene();
			Tile[][] tiles = scene.getTiles()[0];
			for (int x = 0; x < Constants.SCENE_SIZE; ++x) {
				for (int y = 0; y < Constants.SCENE_SIZE; ++y) {
					Tile tile = tiles[x][y];
					if (tile == null) {
						continue;
					}
					for (GameObject gameObject : tile.getGameObjects()) {
						if (gameObject == null) {
							continue;
						}
						if (fairyRingIds.contains(gameObject.getId())) {
							addToRememberedFairyRings(gameObject);
							break;
						}
					}
				}
			}
		} else if (gameStateChanged.getGameState().equals(GameState.LOADING)) {
			fairyRings.clear();
		}
	}

	@Provides
	FairyRingButterfliesConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(FairyRingButterfliesConfig.class);
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event) {
		if (event.getGroup().equals(FairyRingButterfliesConfig.CONFIG_NAME) && !event.getKey().equals("data")) {
			if (event.getKey().equals("export") && event.getNewValue().equals("true")) {
				ConfigExportImport.exportConfigToTextBox(configManager);
			} else {
				if (event.getKey().equals("import") && event.getNewValue().equals("true")) {
					ConfigExportImport.ImportConfigFromTextBox(configManager);
				}
				clientThread.invokeLater(this::applySettings);
			}
		}
	}

	private void applySettings() {
        for (FairyRing fairyRing : fairyRings) {
            applySettingsToRing(fairyRing);
        }
		if (pohRing != null) {
			applySettingsToRing(pohRing);
		}
	}

	private void applySettingsToRing(FairyRing fairyRing) {
		if (!config.biomeColours() || fairyRing.biome == null) {
			if (config.removeButterflies()) {
				fairyRing.removeButterflies();
			} else {
				fairyRing.recolourButterflies(config.colourBody(), config.colourWingInner(), config.colourWingOuter());
			}
		} else {
			switch (fairyRing.biome) {
				case PLAINS:
					if (config.removeButterfliesPlains()) {
						fairyRing.removeButterflies();
					} else {
						fairyRing.recolourButterflies(config.colourBodyPlains(), config.colourWingInnerPlains(), config.colourWingOuterPlains());
					}
					break;
				case DESERT:
					if (config.removeButterfliesDesert()) {
						fairyRing.removeButterflies();
					} else {
						fairyRing.recolourButterflies(config.colourBodyDesert(), config.colourWingInnerDesert(), config.colourWingOuterDesert());
					}
					break;
				case ISLAND:
					if (config.removeButterfliesIsland()) {
						fairyRing.removeButterflies();
					} else {
						fairyRing.recolourButterflies(config.colourBodyIsland(), config.colourWingInnerIsland(), config.colourWingOuterIsland());
					}
					break;
				case CAVE:
					if (config.removeButterfliesCave()) {
						fairyRing.removeButterflies();
					} else {
						fairyRing.recolourButterflies(config.colourBodyCave(), config.colourWingInnerCave(), config.colourWingOuterCave());
					}
					break;
				case MOUNTAINS:
					if (config.removeButterfliesMountains()) {
						fairyRing.removeButterflies();
					} else {
						fairyRing.recolourButterflies(config.colourBodyMountains(), config.colourWingInnerMountains(), config.colourWingOuterMountains());
					}
					break;
				case SWAMP:
					if (config.removeButterfliesSwamp()) {
						fairyRing.removeButterflies();
					} else {
						fairyRing.recolourButterflies(config.colourBodySwamp(), config.colourWingInnerSwamp(), config.colourWingOuterSwamp());
					}
					break;
				case JUNGLE:
					if (config.removeButterfliesJungle()) {
						fairyRing.removeButterflies();
					} else {
						fairyRing.recolourButterflies(config.colourBodyJungle(), config.colourWingInnerJungle(), config.colourWingOuterJungle());
					}
					break;
				case ABYSS:
					if (config.removeButterfliesAbyss()) {
						fairyRing.removeButterflies();
					} else {
						fairyRing.recolourButterflies(config.colourBodyAbyss(), config.colourWingInnerAbyss(), config.colourWingOuterAbyss());
					}
					break;
				case EXTRAPLANAR:
					if (config.removeButterfliesExtraplanar()) {
						fairyRing.removeButterflies();
					} else {
						fairyRing.recolourButterflies(config.colourBodyExtraplanar(), config.colourWingInnerExtraplanar(), config.colourWingOuterExtraplanar());
					}
					break;
				case VOLCANIC:
					if (config.removeButterfliesVolcanic()) {
						fairyRing.removeButterflies();
					} else {
						fairyRing.recolourButterflies(config.colourBodyVolcanic(), config.colourWingInnerVolcanic(), config.colourWingOuterVolcanic());
					}
					break;
			}
		}
	}

	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned spawnEvent) {
		GameObject spawnedObject = spawnEvent.getGameObject();
		if (fairyRingIds.contains(spawnedObject.getId())) {
			addToRememberedFairyRings(spawnedObject);
			applySettings();
		}
	}

	private void addToRememberedFairyRings(GameObject gameObject) {
		//Have to hold onto last 3 rings, as that's how many can be on screen.
		//Hold the POH one separately as it's a different model.
		if (gameObject.getId() == POH_RING_ID) {
			if (defaultHouseColours1 == null) {
				storeOriginalColours(gameObject.getRenderable().getModel(), true);
			}
			pohRing = new FairyRing(gameObject, true, null);
		} else {
			if (defaultColours1 == null) {
				storeOriginalColours(gameObject.getRenderable().getModel(), false);
			}
            //No way to cleanly remove from this list, so just remember at max 3 ring objects
            while (fairyRings.size() > 2) {
            	fairyRings.remove(0);
            }
			WorldPoint location = gameObject.getWorldLocation();
            fairyRings.add(new FairyRing(gameObject, false, LocationBiomeMap.getBiomeForCoordinates(location.getX(), location.getY())));
			pohRing = null;
		}
	}

	private void storeOriginalColours(Model model, boolean isPOH) {
		int[] colours1 = model.getFaceColors1();
		int[] colours2 = model.getFaceColors2();
		int[] colours3 = model.getFaceColors3();
		if (isPOH) {
			defaultHouseColours1 = colours1.clone();
			defaultHouseColours2 = colours2.clone();
			defaultHouseColours3 = colours3.clone();
		} else {
			defaultColours1 = colours1.clone();
			defaultColours2 = colours2.clone();
			defaultColours3 = colours3.clone();
		}
	}

	private void resetToOriginalColours() {
		if (!fairyRings.isEmpty() && defaultColours1 != null) {
			for (FairyRing fairyRing : fairyRings) {
                Model model = fairyRing.gameObject.getRenderable().getModel();
                int[] colours1 = model.getFaceColors1();
                int[] colours2 = model.getFaceColors2();
                int[] colours3 = model.getFaceColors3();
            	for (int i = 0; i < colours1.length && i < defaultColours1.length; i++) {
            		colours1[i] = defaultColours1[i];
            		colours2[i] = defaultColours2[i];
            		colours3[i] = defaultColours3[i];
				}
			}
		}
		if (pohRing != null && defaultHouseColours1 != null) {
			Model model = pohRing.gameObject.getRenderable().getModel();
			int[] colours1 = model.getFaceColors1();
			int[] colours2 = model.getFaceColors2();
			int[] colours3 = model.getFaceColors3();
			for (int i = FairyRing.POH_COLOUR_REGION_OFFSET; i < colours1.length && i < defaultHouseColours1.length; i++) {
				colours1[i] = defaultHouseColours1[i];
				colours2[i] = defaultHouseColours2[i];
				colours3[i] = defaultHouseColours3[i];
			}
		}
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event) {
		//Record that a configure action was started/completed on a ring.
		//This lets us selectively jump in and reapply the settings immediately after the model reloads from it.
		//It's possible we could enter that state incorrectly, but the load from doing so should be fairly light.
		if (event.getMenuOption().equals("Configure")) {
			stateOfRingConfigure = 1;
		} else if (event.getMenuOption().equals("Confirm") && stateOfRingConfigure == 1) {
			stateOfRingConfigure = 2;
		}
		//User's just finished logging in, so do the same as we do when a ring is configured.
		//This gives us a chance to pass over any rings that were found when logging in and recolour them now that they're rendered.
		if (event.getMenuOption().equals("Play") && event.getMenuTarget().equals("")) {
			stateOfRingConfigure = 2;
		}
	}

	@Subscribe
	public void onGameTick(GameTick event) {
		if (stateOfRingConfigure > 1) {
			applySettings();

			//Bit sloppy, but make sure the next four ticks after we think we've completed a ring configure or login, we recolour.
			//There's no event that triggers right on the configure action, but it replaces the model with default colours.
			if (stateOfRingConfigure > 5) {
				stateOfRingConfigure = 0;
			} else {
				stateOfRingConfigure++;
			}
		}
	}

}

package com.fairyRingButterflies;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.GameObject;
import net.runelite.api.Model;

import java.awt.*;
import java.util.Arrays;
import java.util.List;

@Slf4j
public class FairyRing {
    private static List<Integer> INNER_COLOUR_POSITIONS = Arrays.asList(148,149,150,151,152,153,154,155,156,157,170,171,172,173,174,199,200,201,202,203);
    private static List<Integer> OUTER_COLOUR_POSITIONS = Arrays.asList(127,128,129,130,134,135,158,175,177,178,179,180,181,182,183,184,188,189,190,191,192);
    private static List<Integer> EDGE_COLOUR_POSITIONS = Arrays.asList(159,162,163,164,165,166,167,168,169,176,196);
    private static List<Integer> REVERSE_COLOUR_POSITIONS = Arrays.asList(125,126,131,132,133,136,160,161,185,186,187,193,194,195,197,198);
    
    public static int POH_COLOUR_REGION_OFFSET = 2469;

    GameObject gameObject;
    boolean isPOH;
    Biome biome;

    public FairyRing (GameObject gameObject, boolean isPOH, Biome biome) {
        this.gameObject = gameObject;
        this.isPOH = isPOH;
        this.biome = biome;
    }

    private boolean isButterflyBody(int arrayPosition) {
        if (isPOH) {
            arrayPosition = arrayPosition - POH_COLOUR_REGION_OFFSET;
        }
        if (arrayPosition < 116) {
            return false;
        } else if (arrayPosition < 125) {
            return true;
        } else if (arrayPosition < 137) {
            return false;
        } else if (arrayPosition < 148) {
            return true;
        } else if (arrayPosition < 204) {
            return false;
        } else if (arrayPosition < 213) {
            return true;
        } else if (arrayPosition < 225) {
            return false;
        } else if (arrayPosition < 236) {
            return true;
        } else if (arrayPosition < 292) {
            return false;
        } else if (arrayPosition < 301) {
            return true;
        } else if (arrayPosition < 313) {
            return false;
        } else if (arrayPosition < 324) {
            return true;
        }
        return false;
    }

    public void recolourButterflies(Color bodyColour, Color innerColour, Color outerColour) {
        int hsbColour1 = colorToRs2hsb(bodyColour.getRed(), bodyColour.getGreen(), bodyColour.getBlue());
        int hsbColour2 = colorToRs2hsb(innerColour.getRed(), innerColour.getGreen(), innerColour.getBlue());
        int hsbColour3 = colorToRs2hsb(outerColour.getRed(), outerColour.getGreen(), outerColour.getBlue());
        applyColourCode(hsbColour1, hsbColour2, hsbColour3);
    }

    public void removeButterflies() {
        applyColourCode(-2,-2, -2);
    }

    private void applyColourCode(int bodyColour, int innerColour, int outerColour) {
        Model model;
        try {
            model = gameObject.getRenderable().getModel();
            int[] colours1 = model.getFaceColors1();
            int[] colours2 = model.getFaceColors2();
            int[] colours3 = model.getFaceColors3();
            int i = 0;
            int relativePos = 0;
            if (isPOH) {
                i = POH_COLOUR_REGION_OFFSET;
                relativePos = POH_COLOUR_REGION_OFFSET;
            }
            for (; i < colours1.length; i++) {
                if (isButterflyBody(i)) {
                    colours1[i] = bodyColour;
                    colours2[i] = bodyColour;
                    colours3[i] = bodyColour;
                } else if (i > 115) {
                    if (INNER_COLOUR_POSITIONS.contains(i - relativePos)) {
                        recolourRegion(i, colours1, colours2, colours3, innerColour);
                    } else if (OUTER_COLOUR_POSITIONS.contains(i - relativePos) || REVERSE_COLOUR_POSITIONS.contains(i - relativePos) || EDGE_COLOUR_POSITIONS.contains(i - relativePos)) {
                        recolourRegion(i, colours1, colours2, colours3, outerColour);
                    }
                }
            }
        } catch (NullPointerException e) {
            log.warn("NPException trying to recolour a ring, probably trying to colour something with no model.", e);
            log.warn("If you see this, please report it on the plugin's github.");
        }
    }

    private int colorToRs2hsb(int red, int green, int blue) {
        float[] hsbVals = Color.RGBtoHSB(red, green, blue, null);

        //"Correct" the brightness level to avoid going to white at full saturation, or having a low brightness at
        //low saturation
        hsbVals[2] -= Math.min(hsbVals[1], hsbVals[2] / 2);
        //hsbVals[2] = 0.1f;

        int encode_hue = (int)(hsbVals[0] * 63);
        int encode_saturation = (int)(hsbVals[1] * 7);
        int encode_brightness = (int)(hsbVals[2] * 127);
        return (encode_hue << 10) + (encode_saturation << 7) + (encode_brightness);
    }
    
    private void recolourRegion(int startPosition, int[] colours1, int[] colours2, int[] colours3, int colourToApply) {
        colours1[startPosition] = colourToApply;
        colours1[startPosition + 88] = colourToApply;
        colours1[startPosition + 176] = colourToApply;
        colours2[startPosition] = colourToApply;
        colours2[startPosition + 88] = colourToApply;
        colours2[startPosition + 176] = colourToApply;
        colours3[startPosition] = colourToApply;
        colours3[startPosition + 88] = colourToApply;
        colours3[startPosition + 176] = colourToApply;
    }

}

package com.fairyRingButterflies;

import java.util.HashMap;
import java.util.Map;

public class LocationBiomeMap {

    private static Map<Integer, Biome> map = null;

    public static Biome getBiomeForCoordinates(int x, int y) {
        if (map == null) {
            initialise();
        }
        if (map.containsKey(x)) {
            return map.get(x);
        } else if (map.containsKey(y)) {
            return map.get(y);
        }
        return null;
    }

    private static void initialise() {
        //Just map the rings by their X-coordinates. Only a few aren't unique, so put those in by their Y.
        map = new HashMap<>();
        map.put(2996, Biome.ISLAND); //AIQ
        map.put(2700, Biome.PLAINS); //AIR - This is an island, but making it island causes it to recolour the two nearby ones when it loads.
        map.put(1429, Biome.MOUNTAINS); //AIS
        map.put(1651, Biome.PLAINS); //AJP
        map.put(2735, Biome.CAVE); //AJQ
        map.put(2780, Biome.MOUNTAINS); //AJR
        map.put(2500, Biome.ISLAND); //AJS
        map.put(3284, Biome.DESERT); //AKP
        map.put(2319, Biome.PLAINS); //AKQ
        map.put(1826, Biome.PLAINS); //AKR
        map.put(2571, Biome.JUNGLE); //AKS
        map.put(2503, Biome.ISLAND); //ALP
        map.put(3597, Biome.SWAMP); //ALQ
        map.put(3059, Biome.ABYSS); //ALR
        map.put(2644, Biome.PLAINS); //ALS

        map.put(3410, Biome.SWAMP); //BIP
        map.put(3251, Biome.DESERT); //BIQ
        map.put(2635, Biome.PLAINS); //BIS
        map.put(2267, Biome.PLAINS); //BJP
        map.put(2650, Biome.PLAINS); //BJR
        map.put(2150, Biome.SWAMP); //BJS
        map.put(2385, Biome.JUNGLE); //BKP
        map.put(3041, Biome.PLAINS); //BKQ
        map.put(3469, Biome.SWAMP); //BKR
        map.put(2412, Biome.EXTRAPLANAR); //BKS:Zanaris
        map.put(2437, Biome.VOLCANIC); //BLP
        map.put(3351, Biome.PLAINS); //BLR - Y
        map.put(1295, Biome.MOUNTAINS); //BLS

        map.put(2513, Biome.ISLAND); //CIP
        map.put(2528, Biome.PLAINS); //CIQ
        map.put(1302, Biome.VOLCANIC); //CIR
        map.put(1639, Biome.MOUNTAINS); //CIS
        map.put(2705, Biome.PLAINS); //CJR
        map.put(2075, Biome.EXTRAPLANAR); //CKP
        map.put(2801, Biome.JUNGLE); //CKR
        map.put(3470, Biome.SWAMP); //CKS - Y
        map.put(1359, Biome.PLAINS); //CKQ
        map.put(3082, Biome.ISLAND); //CLP
        map.put(2738, Biome.JUNGLE); //CLR -Y
        map.put(2682, Biome.JUNGLE); //CLS

        map.put(3037, Biome.ABYSS); //DIP
        map.put(3038, Biome.EXTRAPLANAR); //DIR
        map.put(3108, Biome.PLAINS); //DIS
        map.put(2658, Biome.PLAINS); //DJP
        map.put(1455, Biome.JUNGLE); //DJR
        map.put(2900, Biome.JUNGLE); //DKP
        map.put(3129, Biome.PLAINS); //DKR
        map.put(2744, Biome.MOUNTAINS); //DKS
        map.put(3423, Biome.DESERT); //DLQ
        map.put(2213, Biome.SWAMP); //DLR
        map.put(9824, Biome.CAVE); //DLS - Y

        map.put(2328, Biome.EXTRAPLANAR); //Fairy Queen Hideout
    }
}

package com.fairyRingButterflies;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TestFairyRingButterfliesPlugin
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(FairyRingButterfliesPlugin.class);
		RuneLite.main(args);
	}
}
