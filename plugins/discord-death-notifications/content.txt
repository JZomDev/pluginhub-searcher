package moe.cuteanimegirls.discorddeathnotifications;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DeathNotificationsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(DeathNotificationsPlugin.class);
		RuneLite.main(args);
	}
}
package moe.cuteanimegirls.discorddeathnotifications;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("discorddeathnotifications")
public interface DeathNotificationsConfig extends Config
{
	@ConfigItem(
			keyName = "webhook",
			name = "Webhook URL",
			description = "The Discord Webhook URL to send messages to.",
			position = 0
	)
	String webhook();
	@ConfigItem(
			keyName = "deathMessage",
			name = "Death message",
			description = "The message that will be included with the screenshot",
			position = 1
	)
	default String deathMessage() {
		return "died lmfao.";
	}
	@ConfigItem(
			keyName = "includeName",
			name = "Include player name",
			description = "Include player name at the start of the death notification message",
			position = 2
	)
	default boolean includeName()
	{
		return true;
	}
}

package moe.cuteanimegirls.discorddeathnotifications;

import lombok.Data;

@Data
class DiscordWebhookBody
{
    private String content;
    private Embed embed;

    @Data
    static class Embed
    {
        final UrlEmbed image;
    }

    @Data
    static class UrlEmbed
    {
        final String url;
    }
}

package moe.cuteanimegirls.discorddeathnotifications;

import com.google.common.base.Strings;
import com.google.inject.Provides;

import javax.imageio.ImageIO;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Actor;
import net.runelite.api.Client;
import net.runelite.api.Player;
import net.runelite.api.events.ActorDeath;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.DrawManager;
import okhttp3.*;

import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import static net.runelite.http.api.RuneLiteAPI.GSON;

@Slf4j
@PluginDescriptor(
	name = "Discord Death Notifications"
)
public class DeathNotificationsPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private DeathNotificationsConfig config;

	@Inject
	private OkHttpClient okHttpClient;

	@Inject
	private DrawManager drawManager;

	@Provides
	DeathNotificationsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(DeathNotificationsConfig.class);
	}

	@Subscribe
	public void onActorDeath(ActorDeath actorDeath)
	{
		Actor actor = actorDeath.getActor();
		if (actor instanceof Player)
		{
			Player player = (Player) actor;
			if (player == client.getLocalPlayer())
			{
				sendMessage();
			}
		}
	}

	private void sendMessage()
	{
		String playerName = client.getLocalPlayer().getName();

		String deathString;

		if (config.includeName())
		{
			deathString = String.format("%s %s", playerName, config.deathMessage());
		}
		else
		{
			deathString = config.deathMessage();
		}

		DiscordWebhookBody discordWebhookBody = new DiscordWebhookBody();
		discordWebhookBody.setContent(deathString);
		sendWebhook(discordWebhookBody);
	}

	private void sendWebhook(DiscordWebhookBody discordWebhookBody)
	{
		getWebHookUrls().forEach(webhookUrl -> {
			HttpUrl url = HttpUrl.parse(webhookUrl);
			MultipartBody.Builder requestBodyBuilder = new MultipartBody.Builder()
					.setType(MultipartBody.FORM)
					.addFormDataPart("payload_json", GSON.toJson(discordWebhookBody));

			sendWebhookWithScreenshot(url, requestBodyBuilder);
		});
	}

	private void sendWebhookWithScreenshot(HttpUrl url, MultipartBody.Builder requestBodyBuilder)
	{
		drawManager.requestNextFrameListener(image ->
		{
			BufferedImage bufferedImage = (BufferedImage) image;
			byte[] imageBytes;
			try
			{
				imageBytes = convertImageToByteArray(bufferedImage);
			}
			catch (IOException e)
			{
				log.warn("Error converting image to byte array", e);
				return;
			}

			requestBodyBuilder.addFormDataPart("file", "image.png",
					RequestBody.create(MediaType.parse("image/png"), imageBytes));
			buildRequestAndSend(url, requestBodyBuilder);
		});
	}

	private void buildRequestAndSend(HttpUrl url, MultipartBody.Builder requestBodyBuilder)
	{
		RequestBody requestBody = requestBodyBuilder.build();
		Request request = new Request.Builder()
				.url(url)
				.post(requestBody)
				.build();
		sendRequest(request);
	}

	private void sendRequest(Request request)
	{
		okHttpClient.newCall(request).enqueue(new Callback()
		{
			@Override
			public void onFailure(Call call, IOException e)
			{
				log.debug("Error submitting webhook", e);
			}

			@Override
			public void onResponse(Call call, Response response) throws IOException
			{
				response.close();
			}
		});
	}

	private static byte[] convertImageToByteArray(BufferedImage bufferedImage) throws IOException
	{
		ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
		ImageIO.write(bufferedImage, "png", byteArrayOutputStream);
		return byteArrayOutputStream.toByteArray();
	}

	private List<String> getWebHookUrls()
	{
		return Arrays.stream(config.webhook().split("\n"))
				.filter(u -> u.length() > 0)
				.map(String::trim)
				.collect(Collectors.toList());
	}
}

