package io.ryoung.bitwarden;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class BitwardenPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(BitwardenPlugin.class);
		RuneLite.main(args);
	}
}
package io.ryoung.bitwarden;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("bitwarden")
public interface BitwardenConfig extends Config
{
	@ConfigItem(
		keyName = "clearKeyOnLogin",
		name = "Clear Session Key on Login",
		description = "Clear Session Key on Login"
	)
	default boolean clearKeyOnLogin()
	{
		return false;
	}

	@ConfigItem(
			keyName = "bwLocation",
			name = "bw location",
			description = "Location of bw executable"
	)
	default String bwLocation()
	{
		return "bw";
	}
}

package io.ryoung.bitwarden;

import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Optional;
import lombok.Getter;

final class Credential
{
	@Getter
	private final String username;

	@Getter
	private final char[] password;

	static final Type TYPE = new TypeToken<List<Credential>>()
	{
	}.getType();

	private Credential(JsonObject jsonObject)
	{
		this.username = jsonObject.get("username").getAsString();
		this.password = jsonObject.get("password").getAsString().toCharArray();
	}

	static final class Deserializer implements JsonDeserializer<Credential>
	{
		@Override
		public Credential deserialize(JsonElement json, Type typeOfT,
			JsonDeserializationContext context) throws JsonParseException
		{
			JsonObject jsonObject = json.getAsJsonObject();

			return Optional.ofNullable(jsonObject.get("login"))
				.map(JsonElement::getAsJsonObject)
				.map(Credential::new)
				.orElse(null);
		}
	}
}



package io.ryoung.bitwarden;

import com.google.common.base.CharMatcher;
import com.google.common.io.CharStreams;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.function.Consumer;
import net.runelite.client.util.OSType;

class CommandRunner extends Thread
{

	private static final CharMatcher CHAR_MATCHER = CharMatcher.inRange('0', '9')
		.or(CharMatcher.inRange('a', 'z'))
		.or(CharMatcher.inRange('A', 'Z'))
		.or(CharMatcher.anyOf("=+/"));

	CommandRunner(String bw, char[] sessionKey, Consumer<String> consumer)
	{
		super(() -> {
			try
			{
				ProcessBuilder pb = buildCommand(bw, new String(sessionKey));
				Process p = pb.start();

				CompletableFuture<String> sout = readOutStream(p.getInputStream());
				CompletableFuture<String> serror = readOutStream(p.getErrorStream());
				CompletableFuture<String> result = sout.thenCombine(serror, (stdout, stderr) ->
				{
					if (!stdout.startsWith("["))
					{
						return stdout + stderr;
					}

					return stdout;
				});

				p.waitFor();
				consumer.accept(result.get());
			}
			catch (IOException | InterruptedException | ExecutionException e)
			{
				// do nothing
			}
		});
	}

	static CompletableFuture<String> readOutStream(InputStream is)
	{
		return CompletableFuture.supplyAsync(() -> {
			String s = "";
			try
			{
				s = CharStreams.toString(new InputStreamReader(is));
			}
			catch (IOException e)
			{
				// do nothing
			}

			return s;
		});
	}

	private static ProcessBuilder buildCommand(String bw, String sessionKey)
	{
		String filteredKey = CHAR_MATCHER.retainFrom(sessionKey);
		List<String> params = new ArrayList<>();
		if (OSType.getOSType() == OSType.Windows)
		{
			params.add("cmd");
			params.add("/c");
		}
		else
		{
			params.add("bash");
			params.add("-c");
		}

		String redirect = OSType.getOSType() == OSType.Windows ? " < NUL" : " < /dev/null";
		params.add(bw + " list items --search runescape.com --session \"" + filteredKey + "\"" + redirect);

		return new ProcessBuilder(params);
	}
}

package io.ryoung.bitwarden;

import com.google.common.base.Strings;
import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.UsernameChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;


@Slf4j
@PluginDescriptor(
	name = "Bitwarden"
)
public class BitwardenPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private BitwardenConfig config;

	@Inject
	private CredentialsManager credentialsManager;

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		if (event.getGameState() == GameState.LOGGED_IN)
		{
			credentialsManager.clearEntries();
			if (config.clearKeyOnLogin())
			{
				credentialsManager.clearSessionKey();
			}
		}
	}

	@Subscribe
	public void onUsernameChanged(UsernameChanged event)
	{
		if (client.getGameState() != GameState.LOGIN_SCREEN)
		{
			return;
		}

		credentialsManager.injectPassword();
	}

	@Override
	protected void startUp() throws Exception
	{
		String envKey = System.getenv("BW_SESSION");
		if (!Strings.isNullOrEmpty(envKey))
		{
			credentialsManager.setSessionKey(envKey.toCharArray());
		}
		credentialsManager.injectPassword();
	}

	@Override
	protected void shutDown() throws Exception
	{
		credentialsManager.reset();
	}

	@Provides
	BitwardenConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(BitwardenConfig.class);
	}
}

package io.ryoung.bitwarden;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.inject.Inject;
import javax.inject.Named;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.SwingUtilities;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;

@Slf4j
final class CredentialsManager
{
	private final Gson GSON;

	private final Client client;
	private CommandRunner commandRunner = null;

	private char[] sessionKey = new char[0];
	private List<Credential> entries = new ArrayList<>();

	private boolean keepTrying = true;
	private BitwardenConfig config;

	private boolean developerMode;

	@Inject
	CredentialsManager(Client client, BitwardenConfig config, @Named("developerMode") boolean developerMode, Gson gson)
	{
		this.client = client;
		this.config = config;
		this.developerMode = developerMode;
		this.GSON = gson.newBuilder().registerTypeAdapter(Credential.class, new Credential.Deserializer()).create();
	}

	private void parseIssue(String result)
	{
		commandRunner = null;
		entries.clear();

		if (developerMode)
		{
			log.error(result);
		}

		if (result.contains("Session key is invalid"))
		{
			SwingUtilities.invokeLater(() -> {
				JOptionPane.showMessageDialog(null, "Your session key is invalid.",
					"", JOptionPane.INFORMATION_MESSAGE);
				askForKey();
			});
			return;
		}

		if (result.startsWith("? Master password:"))
		{
			SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(null, "Your vault is locked.",
				"", JOptionPane.INFORMATION_MESSAGE));
			return;
		}

		clearSessionKey();

		if (result.contains("You are not logged in"))
		{
			SwingUtilities.invokeLater(() -> {
				JOptionPane.showMessageDialog(null, "You are not logged into Bitwarden CLI.",
					"", JOptionPane.INFORMATION_MESSAGE);
				askForKey();
			});
		}
		else if (result.contains("mac failed"))
		{
			SwingUtilities.invokeLater(() -> {
				JOptionPane.showMessageDialog(null, "Error loading vault. Your session key might be wrong." +
						"\nTry: " +
						"\n1. Closing RuneLite" +
						"\n2. Locking your vault" +
						"\n3. Deleting your session key" +
						"\n4. Closing your terminal" +
						"\n5. Then unlock your vault and save your session key",
					"", JOptionPane.ERROR_MESSAGE);
				askForKey();
			});
		}
		else
		{
			SwingUtilities.invokeLater(() -> {
				JOptionPane.showMessageDialog(null, "Unknown error: " + result,
					"", JOptionPane.ERROR_MESSAGE);
				askForKey();
			});
		}
	}

	private void consumeResult(String result)
	{
		if (!result.startsWith("["))
		{
			parseIssue(result);
			return;
		}

		try
		{
			entries = GSON.fromJson(result, Credential.TYPE);

			setPassword();
		}
		catch (JsonParseException | NullPointerException e)
		{
			entries.clear();

			SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(null, "Error parsing credential results.",
				"", JOptionPane.ERROR_MESSAGE));
		}
		finally
		{
			commandRunner = null;
		}
	}

	private void setPassword()
	{
		String username = client.getUsername();
		for (Credential credential : entries)
		{
			if (credential != null && username.equalsIgnoreCase(credential.getUsername()))
			{
				client.setPassword(new String(credential.getPassword()));
				return;
			}
		}
	}

	void clearSessionKey()
	{
		this.sessionKey = new char[0];
	}

	void setSessionKey(char[] key)
	{
		this.sessionKey = Arrays.copyOf(key, key.length);
	}

	void clearEntries()
	{
		entries.clear();
	}

	void reset()
	{
		clearSessionKey();
		entries.clear();
		commandRunner = null;
		keepTrying = true;
	}

	void injectPassword()
	{
		if (sessionKey.length == 0)
		{
			askForKey();
		}
		else if (commandRunner == null && entries.isEmpty())
		{
			commandRunner = new CommandRunner(config.bwLocation(), sessionKey, this::consumeResult);
			commandRunner.start();
		}
		else
		{
			setPassword();
		}
	}

	private void askForKey()
	{
		if (!keepTrying)
		{
			return;
		}

		SwingUtilities.invokeLater(() -> {
			JPanel panel = new JPanel();
			JLabel label = new JLabel("Session Key:");
			JPasswordField pass = new JPasswordField(128);
			panel.add(label);
			panel.add(pass);
			int option = JOptionPane.showOptionDialog(null, panel, "Bitwarden",
				JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE,
				null, null, "");
			if (option == 0) // pressing OK button
			{
				setSessionKey(pass.getPassword());
				injectPassword();
			}
			else
			{
				keepTrying = false;
				clearSessionKey();
			}
		});
	}
}

