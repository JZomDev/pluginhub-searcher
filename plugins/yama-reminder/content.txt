package com.yamareminder;

import javax.inject.Singleton;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.SwingConstants;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.PluginPanel;

import java.awt.*;

@Singleton
public class YamaAttackPanel extends PluginPanel
{
    private JLabel phase2ReminderLabel;
    private JLabel phase3ReminderLabel;

    public YamaAttackPanel()
    {
        setBorder(BorderFactory.createEmptyBorder());
        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
        setAlignmentX(CENTER_ALIGNMENT);

        JLabel headerLabel = new JLabel("Attack Reminder");
        headerLabel.setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 0));
        headerLabel.setHorizontalAlignment(SwingConstants.CENTER);
        headerLabel.setAlignmentX(CENTER_ALIGNMENT);
        headerLabel.setFont(FontManager.getRunescapeFont().deriveFont(24f));
        add(headerLabel);
        init();
    }

    void init() {
        JPanel selectionPanel = new JPanel();
        selectionPanel.setLayout(new BoxLayout(selectionPanel, BoxLayout.Y_AXIS));
        selectionPanel.setBorder(BorderFactory.createEmptyBorder(20, 10, 20, 10));
        selectionPanel.setAlignmentX(CENTER_ALIGNMENT);

        JLabel currentAttackLabel = new JLabel("2nd Glyph Attack Style:");
        currentAttackLabel.setAlignmentX(CENTER_ALIGNMENT);
        currentAttackLabel.setFont(FontManager.getRunescapeFont().deriveFont(16f));
        selectionPanel.add(currentAttackLabel);
        selectionPanel.add(Box.createRigidArea(new Dimension(0, 10)));

        JRadioButton magicButton = new JRadioButton("Magic");
        magicButton.setAlignmentX(CENTER_ALIGNMENT);
        magicButton.setFont(FontManager.getRunescapeFont().deriveFont(14f));
        
        JRadioButton rangeButton = new JRadioButton("Range");
        rangeButton.setAlignmentX(CENTER_ALIGNMENT);
        rangeButton.setFont(FontManager.getRunescapeFont().deriveFont(14f));

        ButtonGroup buttonGroup = new ButtonGroup();
        buttonGroup.add(magicButton);
        buttonGroup.add(rangeButton);

        selectionPanel.add(magicButton);
        selectionPanel.add(Box.createRigidArea(new Dimension(0, 5)));
        selectionPanel.add(rangeButton);
        selectionPanel.add(Box.createRigidArea(new Dimension(0, 20)));

        JLabel phase2Label = new JLabel("Phase 2 Reminder:");
        phase2Label.setAlignmentX(CENTER_ALIGNMENT);
        phase2Label.setFont(FontManager.getRunescapeFont().deriveFont(16f));
        selectionPanel.add(phase2Label);
        selectionPanel.add(Box.createRigidArea(new Dimension(0, 10)));

        phase2ReminderLabel = new JLabel("Select an attack style");
        phase2ReminderLabel.setAlignmentX(CENTER_ALIGNMENT);
        phase2ReminderLabel.setFont(FontManager.getRunescapeFont().deriveFont(Font.BOLD, 18f));
        phase2ReminderLabel.setForeground(Color.YELLOW);
        selectionPanel.add(phase2ReminderLabel);
        selectionPanel.add(Box.createRigidArea(new Dimension(0, 15)));

        JLabel phase3Label = new JLabel("Phase 3 Reminder:");
        phase3Label.setAlignmentX(CENTER_ALIGNMENT);
        phase3Label.setFont(FontManager.getRunescapeFont().deriveFont(16f));
        selectionPanel.add(phase3Label);
        selectionPanel.add(Box.createRigidArea(new Dimension(0, 10)));

        phase3ReminderLabel = new JLabel("Select an attack style");
        phase3ReminderLabel.setAlignmentX(CENTER_ALIGNMENT);
        phase3ReminderLabel.setFont(FontManager.getRunescapeFont().deriveFont(Font.BOLD, 18f));
        phase3ReminderLabel.setForeground(Color.YELLOW);
        selectionPanel.add(phase3ReminderLabel);

        magicButton.addActionListener(e -> {
            phase2ReminderLabel.setText("Start MAGE");
            phase2ReminderLabel.setForeground(Color.ORANGE);
            phase3ReminderLabel.setText("Use RANGE");
            phase3ReminderLabel.setForeground(Color.GREEN);
        });

        rangeButton.addActionListener(e -> {
            phase2ReminderLabel.setText("Start RANGE");
            phase2ReminderLabel.setForeground(Color.ORANGE);
            phase3ReminderLabel.setText("Use MAGIC");
            phase3ReminderLabel.setForeground(Color.CYAN);
        });

        add(selectionPanel);
    }
}

package com.yamareminder;

import com.google.inject.Provides;
import com.google.inject.Injector;
import javax.inject.Inject;
import javax.swing.*;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import com.yamareminder.YamaAttackPanel;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import java.awt.image.BufferedImage;
import java.awt.Graphics2D;
import java.awt.Color;
import java.awt.Font;
import java.awt.RenderingHints;

@Slf4j
@PluginDescriptor(
	name = "YamaReminder"
)
public class YamaReminderPlugin extends Plugin
{
	private static final BufferedImage ICON = createIcon();
	private static final int CHASM_OF_FIRE_REGION_ID = 6045;
	
	@Inject
	private Client client;

	@Inject
	private ClientToolbar clientToolbar;
	
	@Inject
	private Injector injector;

	private YamaAttackPanel yamaAttackPanel;
	private NavigationButton navButton;
	private boolean inChasmOfFire = false;

	@Override
	protected void startUp() throws Exception
	{
		log.info("Yama Reminder started!");
		
		yamaAttackPanel = injector.getInstance(YamaAttackPanel.class);
		
		navButton = NavigationButton.builder()
				.panel(yamaAttackPanel)
				.icon(ICON)
				.priority(5)
				.tooltip("Yama Attack Reminder")
				.build();
	}

	@Override
	protected void shutDown() throws Exception
	{
		log.info("Yama Reminder stopped");
		clientToolbar.removeNavigation(navButton);
	}

	@Subscribe
	public void onGameTick(GameTick gameTick)
	{
		if (client.getGameState() != GameState.LOGGED_IN)
		{
			return;
		}

		boolean currentlyInChasm = isInChasmOfFire();
		
		if (currentlyInChasm && !inChasmOfFire)
		{
			// Entering Chasm of Fire - show panel
			inChasmOfFire = true;
			clientToolbar.addNavigation(navButton);
			SwingUtilities.invokeLater(() -> clientToolbar.openPanel(navButton));
		}
		else if (!currentlyInChasm && inChasmOfFire)
		{
			// Leaving Chasm of Fire - hide panel
			inChasmOfFire = false;
			clientToolbar.removeNavigation(navButton);
		}
	}

	private boolean isInChasmOfFire()
	{
		int[] regions = client.getMapRegions();
		if (regions == null)
		{
			return false;
		}
		
		for (int region : regions)
		{
			if (region == CHASM_OF_FIRE_REGION_ID)
			{
				return true;
			}
		}
		return false;
	}

	private static BufferedImage createIcon()
	{
		BufferedImage icon = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);
		Graphics2D g = icon.createGraphics();
		g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		
		// Draw a simple "Y" for Yama
		g.setColor(Color.WHITE);
		g.setFont(new Font("Arial", Font.BOLD, 14));
		g.drawString("Y", 3, 13);
		
		g.dispose();
		return icon;
	}
}

package com.yamareminder;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class YamaReminderPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(YamaReminderPlugin.class);
		RuneLite.main(args);
	}
}
