package com.npcmaxhit;

import com.google.inject.Provides;
import java.util.List;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Actor;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Hitsplat;
import net.runelite.api.NPC;
import net.runelite.api.ChatMessageType;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.HitsplatApplied;
import net.runelite.api.events.CommandExecuted;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;

@Slf4j
@PluginDescriptor(
	name = "NPC Max Hit",
	description = "Displays the max hits of NPCs",
	tags = {"maxhit", "monster", "boss", "npc", "opponent", "hit", "damage", "overlay", "combat", "pvm", "pve", "max hit", "infobox"}
)
public class NpcMaxHitPlugin extends Plugin
{
	private Actor player;
	private long lastDisplayTime = 0;

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private WikiService wikiService;

	@Inject
	private NpcMaxHitOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private NpcMaxHitConfig config;

	@Inject
	private InfoBoxManager infoBoxManager;

	@Inject
	private SpriteManager spriteManager;

	private NpcMaxHitInfoBox infoBox;

	@Override
	protected void startUp() throws Exception
	{
		overlay.updateNpcDataList(List.of());
		overlayManager.add(overlay);
		wikiService.preloadAll();
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
		overlay.updateNpcDataList(List.of());
		removeInfoBox();
		wikiService.clearCache();
	}

	private void removeInfoBox()
	{
		if (infoBox != null)
		{
			infoBoxManager.removeInfoBox(infoBox);
			infoBox = null;
		}
	}

	private void updateInfoBox(List<NpcMaxHitData> dataList)
	{
		removeInfoBox();
		if (!dataList.isEmpty())
		{
			infoBox = new NpcMaxHitInfoBox(dataList, config, spriteManager, this);
			infoBoxManager.addInfoBox(infoBox);
		}
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() == GameState.LOGGED_IN)
		{
			player = client.getLocalPlayer();
		}
	}

	@Subscribe
	public void onMenuEntryAdded(MenuEntryAdded event)
	{
		if (event.getTarget() == null || event.getTarget().isEmpty())
		{
			return;
		}

		if (!config.showInMenu())
		{
			return;
		}

		MenuEntry menuEntry = event.getMenuEntry();
		NPC npc = menuEntry.getNpc();
		if (shouldFilterNpc(npc))
		{
			return;
		}

		boolean isAttackOption = event.getType() == MenuAction.NPC_SECOND_OPTION.getId() && event.getOption().equals("Attack");
		boolean isExamineOption = event.getType() == MenuAction.EXAMINE_NPC.getId();

		List<NpcMaxHitData> npcMaxHitData = wikiService.getMaxHitData(npc.getId());
		if (npcMaxHitData.isEmpty())
		{
			return;
		}

		// add max hit to enabled menu options
		if (config.showInMenu() &&
			((isAttackOption && config.showOnAttackOption()) ||
				(isExamineOption && config.showOnExamineOption())))
		{
			int maxHit = npcMaxHitData.get(0).getHighestMaxHit();
			// skip if max hit is not computed i.e. -1
			if (maxHit < 0)
			{
				return;
			}
			String maxHitText = config.menuDisplayStyle() == NpcMaxHitConfig.MenuDisplayStyle.NUMBER_ONLY ?
				String.format(" (%d)", maxHit) :
				String.format(" (Max Hit: %d)", maxHit);

			String target = event.getTarget();
			String colorTag = "<col=" + Integer.toHexString(config.menuMaxHitColor().getRGB() & 0xFFFFFF) + ">";
			String newTarget = target + colorTag + maxHitText + "</col>";
			menuEntry.setTarget(newTarget);
		}
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event)
	{
		if (!config.displayMaxHitOnExamine())
		{
			return;
		}

		if (event.getMenuAction() != MenuAction.EXAMINE_NPC)
		{
			return;
		}

		NPC npc = event.getMenuEntry().getNpc();
		if (shouldFilterNpc(npc))
		{
			return;
		}

		displayMaxHitData(wikiService.getMaxHitData(npc.getId()));

	}

	private void displayMaxHitData(List<NpcMaxHitData> dataList)
	{
		if (dataList.isEmpty())
		{
			return;
		}

		lastDisplayTime = System.currentTimeMillis();

		clientThread.invoke(() -> {
			overlay.updateNpcDataList(dataList);
			updateInfoBox(dataList);
		});
	}

	private boolean shouldFilterNpc(NPC npc)
	{
		if (npc == null || npc.getCombatLevel() <= 0 || !npc.getComposition().isInteractible())
		{
			return true;
		}

		int threshold = config.combatLevelThreshold();
		if (threshold > 0 && npc.getCombatLevel() < threshold)
		{
			return true;
		}

		String filteredIds = config.filteredNpcIds().trim();
		if (!filteredIds.isEmpty())
		{
			int npcId = npc.getId();
			for (String idStr : filteredIds.split(","))
			{
				try
				{
					if (Integer.parseInt(idStr.trim()) == npcId)
					{
						return true;
					}
				}
				catch (NumberFormatException e)
				{
					log.warn("Invalid NPC ID in filter: {}", idStr, e);
				}
			}
		}

		return false;
	}

	@Subscribe
	public void onHitsplatApplied(HitsplatApplied event)
	{
		Actor actor = event.getActor();
		Hitsplat hitsplat = event.getHitsplat();

		// Only interested in NPC hitsplats caused by the player
		if (!(actor instanceof NPC) || !hitsplat.isMine())
		{
			return;
		}

		NPC npc = (NPC) actor;

		if (shouldFilterNpc(npc))
		{
			return;
		}

		// update timestamp if the same npc is being attacked and overlay includes the npc
		if (player.getInteracting() == npc && overlay.getCurrentNpcList().stream().anyMatch(data -> data.getNpcId().equals(String.valueOf(npc.getId()))))
		{
			lastDisplayTime = System.currentTimeMillis();
			return;
		}

		displayMaxHitData(wikiService.getMaxHitData(npc.getId()));
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		long currentTime = System.currentTimeMillis();
		int timeoutMs = config.timeout() * 1000;
		if (currentTime - lastDisplayTime >= timeoutMs)
		{
			if (!overlay.getCurrentNpcList().isEmpty())
			{
				clientThread.invoke(() -> {
					overlay.updateNpcDataList(List.of());
					removeInfoBox();
				});
			}
		}
	}

	@Subscribe
	public void onCommandExecuted(CommandExecuted event)
	{
		String command = event.getCommand().toLowerCase();
		// ::npcmaxhit 3029
		if (!command.equals("npcmaxhit"))
		{
			return;
		}

		String[] args = event.getArguments();
		if (args.length == 0)
		{
			return;
		}

		if (args[0].equals("clear"))
		{
			wikiService.clearCache();
			return;
		}

		if (args[0].equals("refresh"))
		{
			clientThread.invoke(() -> client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "npc-max-hit: refreshing cacheâ€¦", null));
			wikiService.clearCache();
			wikiService.preloadAll().thenRun(() -> {
				log.info("npc-max-hit: cache refreshed");
				clientThread.invoke(() -> client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "npc-max-hit: cache refreshed", null));
			});
			return;
		}

		String idArg = args[0].trim();
		List<NpcMaxHitData> maxHitData;
		try
		{
			int npcId = Integer.parseInt(idArg);
			maxHitData = wikiService.getMaxHitData(npcId);
		}
		catch (NumberFormatException e)
		{
			maxHitData = wikiService.getMaxHitData(idArg);
		}
		displayMaxHitData(maxHitData);
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (!event.getGroup().equals(NpcMaxHitConfig.GROUP))
		{
			return;
		}
	}

	@Provides
	NpcMaxHitConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(NpcMaxHitConfig.class);
	}
}

package com.npcmaxhit;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.util.ArrayList;
import java.util.List;
import javax.inject.Inject;
import lombok.Getter;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.TitleComponent;
import net.runelite.client.ui.overlay.components.LineComponent;

public class NpcMaxHitOverlay extends OverlayPanel
{
	private static final int MAX_ENTRIES = 5;
	private static final int PANEL_WIDTH_OFFSET = 10;

	private final NpcMaxHitConfig config;

	@Getter
	private List<NpcMaxHitData> currentNpcList = new ArrayList<>();

	@Inject
	public NpcMaxHitOverlay(NpcMaxHitConfig config)
	{
		this.config = config;
		setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
		setResizable(true);
	}

	public void updateNpcDataList(List<NpcMaxHitData> dataList)
	{
		this.currentNpcList = dataList;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (currentNpcList.isEmpty() || !config.showOverlay())
		{
			return null;
		}

		panelComponent.setBackgroundColor(config.overlayBackgroundColor());
		panelComponent.setPreferredSize(new Dimension(config.overlayFontSize() * PANEL_WIDTH_OFFSET, 0));

		// Create font with configured family, style and size
		graphics.setFont(new Font(
			config.fontFamily().getFamily(),
			config.fontStyle().getStyle(),
			config.overlayFontSize()
		));

		// Only show up to MAX_ENTRIES NPCs
		List<NpcMaxHitData> displayList = currentNpcList.size() > MAX_ENTRIES ?
			currentNpcList.subList(0, MAX_ENTRIES) : currentNpcList;

		for (NpcMaxHitData data : displayList)
		{
			panelComponent.getChildren().add(TitleComponent.builder()
				.text(config.compactNames() ? data.getNpcName() : data.getDisplayName())
				.color(config.overlayTitleColor())
				.build());

			if (config.compactMaxHits())
			{
				panelComponent.getChildren().add(LineComponent.builder()
					.left("Max Hit")
					.right(data.getHighestMaxHit() >= 0 ? String.valueOf(data.getHighestMaxHit()) : "?")
					.leftColor(config.overlayTextColor())
					.rightColor(config.overlayValueColor())
					.build());
			}
			else
			{
				data.getMaxHits().forEach((style, hit) ->
					panelComponent.getChildren().add(LineComponent.builder()
						.left(style)
						.right(hit)
						.leftColor(config.overlayTextColor())
						.rightColor(config.overlayValueColor())
						.build())
				);
			}
		}

		return super.render(graphics);
	}
}


package com.npcmaxhit;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import lombok.extern.slf4j.Slf4j;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.HttpUrl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.Collections;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import javax.inject.Inject;
import javax.inject.Singleton;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
@Singleton
public class WikiService
{
	private static final String WIKI_API_BASE = "https://oldschool.runescape.wiki/api.php";
	private static final String BUCKET_QUERY = "bucket('infobox_monster').select('id','name','version_anchor','default_version','max_hit').limit(5000).run()";
	private static final Pattern MAX_HIT_VALUE_PATTERN = Pattern.compile("(.+?)\\s*\\(([^)]+)\\)");
	private final Map<String, List<NpcMaxHitData>> maxHitCache = new ConcurrentHashMap<>();

	@Inject
	private OkHttpClient httpClient;

	@Inject
	private Gson gson;

	public List<NpcMaxHitData> getMaxHitData(int npcId)
	{
		return getMaxHitData(String.valueOf(npcId));
	}

	public List<NpcMaxHitData> getMaxHitData(String npcId)
	{
		return maxHitCache.getOrDefault(npcId, Collections.emptyList());
	}

	public CompletableFuture<Void> preloadAll()
	{
		return CompletableFuture.runAsync(() -> {
			try
			{
				HttpUrl url = HttpUrl.parse(WIKI_API_BASE).newBuilder()
					.addQueryParameter("action", "bucket")
					.addQueryParameter("format", "json")
					.addQueryParameter("query", BUCKET_QUERY)
					.addQueryParameter("smaxage", "86400")
					.build();

				Request request = new Request.Builder()
					.url(url)
					.header("User-Agent", "RuneLite npc-max-hit plugin")
					.header("Accept", "application/json")
					.build();

				try (Response response = httpClient.newCall(request).execute())
				{
					if (response.isSuccessful() && response.body() != null)
					{
						parseBucketResponseAndFillCache(response.body().string());
					}
					else
					{
						log.warn("Bucket API request failed: {}", response.code());
					}
				}
			}
			catch (Exception e)
			{
				log.warn("Error preloading bucket data: {}", e.getMessage());
			}
		});
	}

	private void parseBucketResponseAndFillCache(String responseBody)
	{
		JsonObject jsonResponse = gson.fromJson(responseBody, JsonObject.class);
		if (jsonResponse == null || !jsonResponse.has("bucket"))
		{
			return;
		}

		Map<String, List<NpcMaxHitData>> temp = new HashMap<>();

		for (JsonElement el : jsonResponse.getAsJsonArray("bucket"))
		{
			JsonObject obj = el.getAsJsonObject();

			List<String> idList = getAsStringList(obj, "id");
			List<String> maxHitStrings = getAsStringList(obj, "max_hit");

			String name = obj.has("name") && !obj.get("name").isJsonNull() ? obj.get("name").getAsString() : null;
			String version = obj.has("version_anchor") && !obj.get("version_anchor").isJsonNull() ? obj.get("version_anchor").getAsString() : null;
			boolean isDefault = obj.has("default_version");

			Map<String, String> maxHits = new HashMap<>();
			// each element may itself include <br/> or comma-separated values
			for (String s : maxHitStrings)
			{
				if (s != null)
				{
					parseMaxHitValues(s, maxHits);
				}
			}

			for (String idStr : idList)
			{
				if (idStr == null || idStr.trim().isEmpty())
				{
					continue;
				}
				String key = idStr.trim();
				NpcMaxHitData data = new NpcMaxHitData(name, version, key, isDefault, maxHits);
				temp.computeIfAbsent(key, k -> new ArrayList<>()).add(data);
			}
		}

		maxHitCache.clear();

		// de-dupe per-id by identical maxHits; if a default version exists in a group, keep only that
		for (Map.Entry<String, List<NpcMaxHitData>> e : temp.entrySet())
		{
			Map<String, List<NpcMaxHitData>> byHits = new HashMap<>();
			for (NpcMaxHitData d : e.getValue())
			{
				String key = canonicalizeMaxHits(d.getMaxHits());
				byHits.computeIfAbsent(key, k -> new ArrayList<>()).add(d);
			}

			List<NpcMaxHitData> filtered = new ArrayList<>();
			for (List<NpcMaxHitData> group : byHits.values())
			{
				NpcMaxHitData chosen = group.stream().filter(NpcMaxHitData::isDefaultVersion).findFirst().orElse(group.get(0));
				filtered.add(chosen);
			}

			// order: default version first, then by version name (if present)
			filtered.sort((a, b) -> {
				if (a.isDefaultVersion() != b.isDefaultVersion())
				{
					return a.isDefaultVersion() ? -1 : 1;
				}
				String va = a.getVersion();
				String vb = b.getVersion();
				if (va == null && vb == null)
				{
					return 0;
				}
				if (va == null)
				{
					return 1;
				}
				if (vb == null)
				{
					return -1;
				}
				return va.compareToIgnoreCase(vb);
			});

			maxHitCache.put(e.getKey(), filtered);
		}
	}

	private String canonicalizeMaxHits(Map<String, String> maxHits)
	{
		// sort keys case-insensitively and build a stable string
		StringBuilder sb = new StringBuilder();
		maxHits.keySet().stream().sorted(String::compareToIgnoreCase).forEach(k -> {
			sb.append(k.toLowerCase()).append('=').append(maxHits.get(k).trim()).append(';');
		});
		return sb.toString();
	}

	private List<String> getAsStringList(JsonObject obj, String key)
	{
		List<String> out = new ArrayList<>();
		if (!obj.has(key) || obj.get(key).isJsonNull())
		{
			return out;
		}
		JsonElement el = obj.get(key);
		if (el.isJsonArray())
		{
			for (JsonElement e : el.getAsJsonArray())
			{
				if (!e.isJsonNull())
				{
					out.add(e.getAsString());
				}
			}
		}
		else
		{
			out.add(el.getAsString());
		}
		return out;
	}

	private void parseMaxHitValues(String maxHitString, Map<String, String> maxHits)
	{
		// Remove HTML line break tags and split on commas
		String[] hits = maxHitString.replaceAll("<br/?>", ",").split(",");

		for (String hit : hits)
		{
			hit = hit.trim();
			Matcher matcher = MAX_HIT_VALUE_PATTERN.matcher(hit);

			if (matcher.find())
			{
				String value = matcher.group(1).trim();
				String style = matcher.group(2).trim();
				maxHits.put(style, value);
			}
			else
			{
				// If it's not empty, store as is
				if (!hit.isEmpty())
				{
					maxHits.put("Max Hit", hit);
				}
				else
				{
					log.warn("Invalid max hit value: {}", hit);
				}
			}
		}
	}

	public void clearCache()
	{
		maxHitCache.clear();
	}
}

package com.npcmaxhit;

import java.awt.Color;
import java.awt.Font;
import lombok.Getter;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup(NpcMaxHitConfig.GROUP)
public interface NpcMaxHitConfig extends Config
{
	String GROUP = "npcmaxhit";

	@ConfigSection(
		name = "General",
		description = "General plugin settings",
		position = 0
	)
	String generalSection = "general";

	@ConfigSection(
		name = "Overlay",
		description = "Overlay appearance settings",
		position = 1,
		closedByDefault = true
	)
	String overlaySection = "overlay";

	@ConfigSection(
		name = "Infobox",
		description = "Infobox appearance settings",
		position = 2,
		closedByDefault = true
	)
	String infoboxSection = "infobox";

	@ConfigSection(
		name = "Menu Options",
		description = "Menu entry appearance settings",
		position = 3,
		closedByDefault = true
	)
	String menuSection = "menu";

	@ConfigItem(
		keyName = "showOverlay",
		name = "Show Overlay",
		description = "Show the max hit overlay",
		section = generalSection,
		position = 0
	)
	default boolean showOverlay()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showInfobox",
		name = "Show Infobox",
		description = "Show max hit information in an infobox",
		section = generalSection,
		position = 1
	)
	default boolean showInfobox()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showInMenu",
		name = "Show in NPC Right-click Menus",
		description = "Show the highest max hit value next to NPC menu options (e.g. Attack, Examine) <br>Can be configured in the Menu Options section.",
		section = generalSection,
		position = 2
	)
	default boolean showInMenu()
	{
		return false;
	}

	@ConfigItem(
		keyName = "displayMaxHitOnExamine",
		name = "Lookup on Examine",
		description = "Display max hit information when examining NPCs",
		section = generalSection,
		position = 3
	)
	default boolean displayMaxHitOnExamine()
	{
		return true;
	}

	@ConfigItem(
		keyName = "timeout",
		name = "Display Timeout",
		description = "Time in seconds before the displays are hidden after the player stops attacking",
		section = generalSection,
		position = 4
	)
	default int timeout()
	{
		return 6;
	}

	@ConfigItem(
		keyName = "combatLevelThreshold",
		name = "Level Threshold",
		description = "Will not display max hits for NPCs below this combat level (0 to disable)",
		section = generalSection,
		position = 5
	)
	default int combatLevelThreshold()
	{
		return 0;
	}

	@ConfigItem(
		keyName = "filteredNpcIds",
		name = "Filtered NPC IDs",
		description = "Will not display max hits for these NPCs (comma-separated list of IDs, e.g. 3029,12191,2042)",
		section = generalSection,
		position = 6
	)
	default String filteredNpcIds()
	{
		return "";
	}

	@ConfigItem(
		keyName = "compactMaxHits",
		name = "Compact Max Hits",
		description = "Only show the highest max hit value when multiple attack styles are present",
		section = overlaySection,
		position = 0
	)
	default boolean compactMaxHits()
	{
		return false;
	}

	@ConfigItem(
		keyName = "compactNames",
		name = "Compact NPC Names",
		description = "Show simplified NPC names without version/variant information, if available (e.g. 'Vorkath' instead of 'Vorkath (Post-quest)') <br>Note: This can make it harder to identify the version if there are multiple variants of the same NPC ID (e.g. DT2 bosses, Araxxor, etc.)",
		section = overlaySection,
		position = 1
	)
	default boolean compactNames()
	{
		return false;
	}

	@ConfigItem(
		keyName = "fontFamily",
		name = "Font",
		description = "Font to use in the overlay",
		section = overlaySection,
		position = 92
	)
	default FontFamily fontFamily()
	{
		return FontFamily.REGULAR;
	}

	@Getter
	enum FontFamily
	{
		REGULAR("RuneScape"),
		PLAIN("RuneScape Plain"),
		BOLD("RuneScape Bold"),
		SMALL("RuneScape Small");

		private final String family;

		FontFamily(String family)
		{
			this.family = family;
		}

	}

	@ConfigItem(
		keyName = "fontStyle",
		name = "Font Style",
		description = "Style of the font in the overlay",
		section = overlaySection,
		position = 93
	)
	default FontStyle fontStyle()
	{
		return FontStyle.PLAIN;
	}

	@Getter
	enum FontStyle
	{
		PLAIN(Font.PLAIN),
		BOLD(Font.BOLD),
		ITALIC(Font.ITALIC),
		BOLD_ITALIC(Font.BOLD + Font.ITALIC);

		private final int style;

		FontStyle(int style)
		{
			this.style = style;
		}

	}

	@ConfigItem(
		keyName = "overlayFontSize",
		name = "Font Size",
		description = "Size of the text in the overlay",
		section = overlaySection,
		position = 94
	)
	default int overlayFontSize()
	{
		return 16;
	}

	@ConfigItem(
		keyName = "overlayTitleColor",
		name = "Title Color",
		description = "Color of the title in the overlay (NPC name)",
		section = overlaySection,
		position = 95
	)
	default Color overlayTitleColor()
	{
		return Color.YELLOW;
	}

	@ConfigItem(
		keyName = "overlayTextColor",
		name = "Text Color",
		description = "Color of the text in the overlay",
		section = overlaySection,
		position = 96
	)
	default Color overlayTextColor()
	{
		return Color.WHITE;
	}

	@ConfigItem(
		keyName = "overlayValueColor",
		name = "Max Hit Color",
		description = "Color of the max hit values in the overlay",
		section = overlaySection,
		position = 97
	)
	default Color overlayValueColor()
	{
		return Color.YELLOW;
	}

	@Alpha
	@ConfigItem(
		keyName = "overlayBackgroundColor",
		name = "Background Color",
		description = "Color of the overlay background",
		section = overlaySection,
		position = 98
	)
	default Color overlayBackgroundColor()
	{
		return new Color(70, 61, 50, 156);
	}

	@ConfigItem(
		keyName = "infoboxTextColor",
		name = "Max Hit Color",
		description = "Color of the highest max hit value in the infobox",
		section = infoboxSection,
		position = 96
	)
	default Color infoboxTextColor()
	{
		return Color.WHITE;
	}

	@ConfigItem(
		keyName = "infoboxTooltipTitleColor",
		name = "Tooltip Title Color",
		description = "Color of the title in the infobox tooltip (NPC name)",
		section = infoboxSection,
		position = 97
	)
	default Color infoboxTooltipTitleColor()
	{
		return Color.YELLOW;
	}

	@ConfigItem(
		keyName = "infoboxTooltipTextColor",
		name = "Tooltip Text Color",
		description = "Color of the text in the infobox tooltip (attack style/type)",
		section = infoboxSection,
		position = 98
	)
	default Color infoboxTooltipTextColor()
	{
		return Color.WHITE;
	}

	@ConfigItem(
		keyName = "infoboxTooltipValueColor",
		name = "Tooltip Max Hits Color",
		description = "Color of the max hit values in the infobox tooltip",
		section = infoboxSection,
		position = 99
	)
	default Color infoboxTooltipValueColor()
	{
		return Color.YELLOW;
	}

	@ConfigItem(
		keyName = "showOnAttackOption",
		name = "Show on Attack Option",
		description = "Show max hit on the Attack menu option",
		section = menuSection,
		position = 0
	)
	default boolean showOnAttackOption()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showOnExamineOption",
		name = "Show on Examine Option",
		description = "Show max hit on the Examine menu option",
		section = menuSection,
		position = 1
	)
	default boolean showOnExamineOption()
	{
		return true;
	}

	@ConfigItem(
		keyName = "menuDisplayStyle",
		name = "Display Style",
		description = "How to display the max hit in menu entries",
		section = menuSection,
		position = 2
	)
	default MenuDisplayStyle menuDisplayStyle()
	{
		return MenuDisplayStyle.WITH_LABEL;
	}

	@ConfigItem(
		keyName = "menuMaxHitColor",
		name = "Menu Max Hit Color",
		description = "Color of the max hit value shown in menu entries",
		section = menuSection,
		position = 3
	)
	default Color menuMaxHitColor()
	{
		return Color.YELLOW;
	}

	@Getter
	enum MenuDisplayStyle
	{
		NUMBER_ONLY("Number Only"),
		WITH_LABEL("With Label");

		private final String name;

		MenuDisplayStyle(String name)
		{
			this.name = name;
		}

		@Override
		public String toString()
		{
			return name;
		}
	}
}

package com.npcmaxhit;

import java.awt.Color;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.util.Map;
import java.util.List;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.infobox.InfoBox;
import net.runelite.client.ui.overlay.infobox.InfoBoxPriority;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.plugins.Plugin;

public class NpcMaxHitInfoBox extends InfoBox
{
	private final List<NpcMaxHitData> dataList;
	private static final int RED_HITSPLAT = 1359;
	private final NpcMaxHitConfig config;
	private BufferedImage baseImage;

	public NpcMaxHitInfoBox(List<NpcMaxHitData> dataList, NpcMaxHitConfig config, SpriteManager spriteManager, Plugin plugin)
	{
		super(null, plugin);
		this.dataList = dataList;
		this.config = config;
		setPriority(InfoBoxPriority.HIGH);
		spriteManager.getSpriteAsync(RED_HITSPLAT, 0, img -> {
			baseImage = img;
			setImage(createInfoboxImage());
		});
	}

	private BufferedImage createInfoboxImage()
	{
		if (baseImage == null)
		{
			return null;
		}

		BufferedImage image = new BufferedImage(baseImage.getWidth(), baseImage.getHeight(), BufferedImage.TYPE_INT_ARGB);
		Graphics2D g = image.createGraphics();

		g.setFont(FontManager.getRunescapeSmallFont());
		g.drawImage(baseImage, 0, 0, null);

		final FontMetrics metrics = g.getFontMetrics();
		int maxHit = dataList.stream()
			.mapToInt(NpcMaxHitData::getHighestMaxHit)
			.max()
			.orElse(-1);

		String text = maxHit >= 0 ? String.valueOf(maxHit) : "?";

		int x = image.getWidth() / 2 - metrics.stringWidth(text) / 2;
		int y = image.getHeight() / 2 - metrics.getHeight() / 2 + metrics.getAscent() + 2;

		g.setColor(Color.BLACK);
		g.drawString(text, x + 1, y + 1);
		g.setColor(config.infoboxTextColor());
		g.drawString(text, x, y);

		g.dispose();
		return image;
	}

	@Override
	public String getText()
	{
		return null;
	}

	@Override
	public Color getTextColor()
	{
		return null;
	}

	@Override
	public String getTooltip()
	{
		StringBuilder tooltip = new StringBuilder();

		for (NpcMaxHitData data : dataList)
		{
			if (tooltip.length() > 0)
			{
				tooltip.append("</br>").append("</br>");
			}

			tooltip.append(ColorUtil.wrapWithColorTag(data.getDisplayName(), config.infoboxTooltipTitleColor()));

			for (Map.Entry<String, String> entry : data.getMaxHits().entrySet())
			{
				tooltip.append("</br>")
					.append(ColorUtil.wrapWithColorTag(entry.getKey(), config.infoboxTooltipTextColor()))
					.append(": ")
					.append(ColorUtil.wrapWithColorTag(String.valueOf(entry.getValue()), config.infoboxTooltipValueColor()));
			}
		}

		return tooltip.toString();
	}

	@Override
	public boolean render()
	{
		return config.showInfobox();
	}
}

package com.npcmaxhit;

import java.util.Arrays;
import java.util.Map;
import java.util.TreeMap;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

import lombok.Value;

@Value
public class NpcMaxHitData
{
	String npcName;
	String version;
	String npcId;
	boolean defaultVersion;
	Map<String, String> maxHits;

	public NpcMaxHitData(String name, String version, String npcId, boolean defaultVersion, Map<String, String> maxHits)
	{
		this.npcName = (name == null ? "" : name.trim().replaceAll("_", " "));
		this.version = (version == null || version.isEmpty()) ? null : version.trim();
		this.npcId = npcId == null ? "" : npcId.trim();
		this.defaultVersion = defaultVersion;
		this.maxHits = new TreeMap<>((a, b) -> toTitleCase(a).compareTo(toTitleCase(b)));
		maxHits.forEach((style, value) -> this.maxHits.put(toTitleCase(style), value == null ? "" : value.trim()));
	}

	private String toTitleCase(String input)
	{
		if (input == null || input.isEmpty())
		{
			return input;
		}
		String[] words = input.toLowerCase().split("\\s+");
		StringBuilder titleCase = new StringBuilder();
		for (String word : words)
		{
			if (!word.isEmpty())
			{
				titleCase.append(Character.toUpperCase(word.charAt(0)))
					.append(word.substring(1))
					.append(" ");
			}
		}
		return titleCase.toString().trim();
	}

	public String getDisplayName()
	{
		if (version == null || version.isEmpty())
		{
			return npcName;
		}
		return npcName + " (" + version + ")";
	}

	public int getHighestMaxHit()
	{
		int best = -1;
		Pattern rangePattern = Pattern.compile("(\\d+)\\s*-\\s*(\\d+)");
		Pattern exprPattern = Pattern.compile("\\d+(?:\\s*[+x]\\s*\\d+)+", Pattern.CASE_INSENSITIVE);
		Pattern intPattern = Pattern.compile("\\d+");

		for (String raw : maxHits.values())
		{
			if (raw == null || raw.isEmpty())
			{
				continue;
			}

			String s = raw;

			// 1) Handle ranges like "3-10" -> take the upper bound (10)
			Matcher r = rangePattern.matcher(s);
			while (r.find())
			{
				try
				{
					int a = Integer.parseInt(r.group(1));
					int b = Integer.parseInt(r.group(2));
					best = Math.max(best, Math.max(a, b));
				}
				catch (NumberFormatException ignored)
				{
				}
			}

			// 2) Handle simple + and x expressions like "4+8+20" or "12x3"
			Matcher e = exprPattern.matcher(s);
			while (e.find())
			{
				String expr = e.group();
				try
				{
					int val;
					if (expr.contains("x") || expr.contains("X"))
					{
						// product chain
						String[] parts = expr.split("[xX]");
						val = 1;
						for (String p : parts)
						{
							val *= Integer.parseInt(p.trim());
						}
					}
					else
					{
						// sum chain
						String[] parts = expr.split("\\+");
						val = 0;
						for (String p : parts)
						{
							val += Integer.parseInt(p.trim());
						}
					}
					best = Math.max(best, val);
				}
				catch (NumberFormatException ignored)
				{
				}
			}

			// 3) Any standalone integers (e.g., "32 total 4+8+20" -> 32)
			Matcher m = intPattern.matcher(s);
			while (m.find())
			{
				try
				{
					int v = Integer.parseInt(m.group());
					best = Math.max(best, v);
				}
				catch (NumberFormatException ignored)
				{
				}
			}
		}

		return best;
	}
}

package com.npcmaxhit;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class NpcMaxHitPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(NpcMaxHitPlugin.class);
		RuneLite.main(args);
	}
}
