/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.firstperson.gpu;

import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Projection;
import net.runelite.api.Renderable;
import net.runelite.api.Scene;
import net.runelite.api.SceneTileModel;
import net.runelite.api.SceneTilePaint;
import net.runelite.api.Texture;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.hooks.DrawCallbacks;

public class FirstPersonDrawCallbacks implements DrawCallbacks
{
	Client client;

	@Getter
	DrawCallbacks pluginImplementingDrawCallback;


	public FirstPersonDrawCallbacks(Client client)
	{
		this.client = client;
	}

	@Override
	public void draw(Projection projection, Scene scene, Renderable renderable, int orientation, int x, int y, int z, long hash)
	{
		pluginImplementingDrawCallback.draw(projection, scene, renderable, orientation, x, y, z, hash);
	}

	@Override
	public void drawScenePaint(Scene scene, SceneTilePaint paint, int plane, int tileX, int tileZ)
	{
		pluginImplementingDrawCallback.drawScenePaint(scene, paint, plane, tileX, tileZ);
	}

	@Override
	public void drawSceneTileModel(Scene scene, SceneTileModel model, int tileX, int tileZ)
	{
		pluginImplementingDrawCallback.drawSceneTileModel(scene, model, tileX, tileZ);
	}
	@Override
	public void draw(int overlayColor)
	{
		pluginImplementingDrawCallback.draw(overlayColor);
	}

	@Override
	public void drawScene(double cameraX, double cameraY, double cameraZ, double cameraPitch, double cameraYaw, int plane)
	{
		int[] firstPersonCamera = firstPersonCameraPosition();
		pluginImplementingDrawCallback.drawScene(firstPersonCamera[0], firstPersonCamera[1], firstPersonCamera[2], cameraPitch, cameraYaw, plane);
	}

	@Override
	public void postDrawScene()
	{
		pluginImplementingDrawCallback.postDrawScene();
	}

	@Override
	public void animate(Texture texture, int diff)
	{
		pluginImplementingDrawCallback.animate(texture, diff);
	}

	@Override
	public void loadScene(Scene scene)
	{
		pluginImplementingDrawCallback.loadScene(scene);
	}

	@Override
	public void swapScene(Scene scene)
	{
		pluginImplementingDrawCallback.swapScene(scene);
	}

	public void setCallback(DrawCallbacks pluginWithCallbacks)
	{
		pluginImplementingDrawCallback =  pluginWithCallbacks;
	}

	public int[] firstPersonCameraPosition()
	{
		LocalPoint lp = client.getLocalPlayer().getLocalLocation();
		int cameraX = lp.getX();
		int cameraY = Perspective.getTileHeight(client, lp, client.getTopLevelWorldView().getPlane()) - 200;
		int cameraZ = lp.getY();

		return new int[] { cameraX, cameraY, cameraZ };
	}
}

/*
 * Copyright (c) 2025, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.firstperson.input;

import com.firstperson.FirstPersonConfig;
import com.firstperson.FirstPersonPlugin;
import java.awt.event.KeyEvent;
import net.runelite.client.config.Keybind;
import net.runelite.client.input.KeyListener;

public class ToggleInputHandler implements KeyListener
{
	public final FirstPersonPlugin firstPersonPlugin;
	public final FirstPersonConfig firstPersonConfig;


	public ToggleInputHandler(FirstPersonPlugin firstPersonPlugin, FirstPersonConfig firstPersonConfig)
	{
		this.firstPersonPlugin = firstPersonPlugin;
		this.firstPersonConfig = firstPersonConfig;
	}

	@Override
	public void keyTyped(KeyEvent e)
	{
	}

	@Override
	public void keyPressed(KeyEvent e)
	{
		Keybind keybind = firstPersonConfig.toggleKeybind();
		if (keybind.matches(e))
		{
			if (firstPersonPlugin.isActive())
			{
				firstPersonPlugin.deactivate();
			}
			else
			{
				firstPersonPlugin.activate();
			}
		}
	}

	@Override
	public void keyReleased(KeyEvent e)
	{
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.firstperson.input;

import com.firstperson.FirstPersonConfig;
import com.firstperson.FirstPersonPlugin;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.client.input.KeyListener;
import net.runelite.client.input.MouseListener;

public class InputHandler implements KeyListener, MouseListener
{
	Client client;
	FirstPersonPlugin firstPersonPlugin;
	FirstPersonConfig config;

	boolean rightKeyPressed;
	boolean leftKeyPressed;
	boolean upKeyPressed;
	boolean downKeyPressed;
	boolean middleMousePressed;
	int xPosOfMouseDown;
	int yPosOfMouseDown;

	int lastPitch = -1;

	long lastMillis;

	public InputHandler(Client client, FirstPersonPlugin firstPersonPlugin, FirstPersonConfig config, long lastMillis)
	{
		this.client = client;
		this.firstPersonPlugin = firstPersonPlugin;
		this.config = config;
		this.lastMillis = lastMillis;
	}

	public void updateCameraPosition()
	{
		if (client.getLocalPlayer() == null) return;

		final long before = lastMillis;
		final long now = System.currentTimeMillis();
		lastMillis = now;
		final long diff = now - before;
		// Assume free camera speed of 1
		double addedYaw = 0;
		double addedPitch = 0;
		double cameraSpeed = config.keyCameraSpeed();

		Point currentMousePos = client.getMouseCanvasPosition();

		if (middleMousePressed)
		{
			if (yPosOfMouseDown != -1 && xPosOfMouseDown != -1)
			{
				addedPitch = currentMousePos.getY() - yPosOfMouseDown;
				addedYaw = currentMousePos.getX() - xPosOfMouseDown;
			}
			xPosOfMouseDown = currentMousePos.getX();
			yPosOfMouseDown = currentMousePos.getY();
		}
		else if (diff < 10000)
		{
			if (rightKeyPressed)
			{
				addedYaw = diff * cameraSpeed;
			}
			if (leftKeyPressed)
			{
				addedYaw += -diff * cameraSpeed;
			}

			if (upKeyPressed)
			{
				addedPitch = -diff * cameraSpeed;
			}
			if (downKeyPressed)
			{
				addedPitch += diff * cameraSpeed;
			}
		}

		if (config.inverseKeys())
		{
			addedPitch *= -1;
		}
		else
		{
			addedYaw *= -1;
		}

		if (addedYaw != 0)
		{
			client.setCameraYawTarget((client.getCameraYawTarget() + (int) addedYaw) % 2048);
		}

		if (addedPitch != 0 && client.getCameraPitchTarget() + addedPitch < 512 && client.getCameraPitchTarget() + addedPitch >= 0)
		{
			int currentPitch = client.getCameraPitch();

			// If we've gone below the current pitch limit, thus the adjusting pitch got stuck, shift back to it
			if (lastPitch == currentPitch && currentPitch >= client.getCameraPitchTarget() && addedPitch < 0)
			{
				client.setCameraPitchTarget(client.getCameraPitch());
			}
			else
			{
				client.setCameraPitchTarget(client.getCameraPitchTarget() + (int) addedPitch);
			}
			lastPitch = currentPitch;
		}
	}

	/*
	 * MouseListener and KeyListener are used due to the jumping of the camera usually between the key-pressed movement before a new Focus Point can be set
	 */
	@Override
	public void keyTyped(KeyEvent e)
	{

	}

	@Override
	public void keyPressed(KeyEvent e)
	{
		switch (e.getKeyCode())
		{
			case KeyEvent.VK_RIGHT:
				e.consume();
				rightKeyPressed = true;
				break;
			case KeyEvent.VK_LEFT:
				e.consume();
				leftKeyPressed = true;
				break;
			case KeyEvent.VK_UP:
				e.consume();
				upKeyPressed = true;
				break;
			case KeyEvent.VK_DOWN:
				e.consume();
				downKeyPressed = true;
				break;
			case KeyEvent.VK_E:
			case KeyEvent.VK_R:
			case KeyEvent.VK_F1:
			case KeyEvent.VK_F:
			case KeyEvent.VK_SPACE:
			case KeyEvent.VK_PAGE_UP:
			case KeyEvent.VK_PAGE_DOWN:
			case KeyEvent.VK_ESCAPE:
			case KeyEvent.VK_SHIFT:
			case KeyEvent.VK_D:
			case KeyEvent.VK_A:
			case KeyEvent.VK_W:
			case KeyEvent.VK_S:
				if (!firstPersonPlugin.isGpuActive())
				{
					e.consume();
				}
				break;
		}
	}

	@Override
	public void keyReleased(KeyEvent e)
	{
		switch (e.getKeyCode())
		{
			case KeyEvent.VK_RIGHT:
				e.consume();
				rightKeyPressed = false;
				break;
			case KeyEvent.VK_LEFT:
				e.consume();
				leftKeyPressed = false;
				break;
			case KeyEvent.VK_UP:
				e.consume();
				upKeyPressed = false;
				break;
			case KeyEvent.VK_DOWN:
				e.consume();
				downKeyPressed = false;
				break;
		}
	}

	@Override
	public MouseEvent mouseClicked(MouseEvent mouseEvent)
	{
		return mouseEvent;
	}

	@Override
	public MouseEvent mousePressed(MouseEvent mouseEvent)
	{
		if (mouseEvent.getButton() == MouseEvent.BUTTON2)
		{
			middleMousePressed = true;
			xPosOfMouseDown = mouseEvent.getX();
			yPosOfMouseDown = mouseEvent.getY();
			mouseEvent.consume();
		}
		return mouseEvent;
	}

	@Override
	public MouseEvent mouseReleased(MouseEvent mouseEvent)
	{
		if (mouseEvent.getButton() == MouseEvent.BUTTON2)
		{
			middleMousePressed = false;
			xPosOfMouseDown = mouseEvent.getX();
			yPosOfMouseDown = mouseEvent.getY();
			mouseEvent.consume();
		}
		return mouseEvent;
	}

	@Override
	public MouseEvent mouseEntered(MouseEvent mouseEvent)
	{
		return mouseEvent;
	}

	@Override
	public MouseEvent mouseExited(MouseEvent mouseEvent)
	{
		return mouseEvent;
	}

	@Override
	public MouseEvent mouseDragged(MouseEvent mouseEvent)
	{
		return mouseEvent;
	}

	@Override
	public MouseEvent mouseMoved(MouseEvent mouseEvent)
	{
		return mouseEvent;
	}
}
/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.firstperson;

import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Keybind;

@ConfigGroup("firstperson")
public interface FirstPersonConfig extends Config
{
	@ConfigItem(
		keyName = "inverseKeys",
		name = "Inverse keys for camera movement",
		description = "Inverse the arrow keys for camera movement"
	)
	default boolean inverseKeys() { return true; }

	@ConfigItem(
		keyName = "keyCameraSpeed",
		name = "Adjust key rotation speed",
		description = "Adjust the speed the camera rotates when using keys"
	)
	default double keyCameraSpeed() { return 0.5; }

	@ConfigItem(
		keyName = "useGpu",
		name = "Use GPU rendering (READ DETAILS)",
		description = "You MUST have either the GPU plugin or 117HD running for this to work. This allows for interaction with objects, but alignment of all clickboxes will be incorrect, as well as other plugin overlays"
	)
	default boolean useGpu() { return false; }

	@ConfigItem(
		keyName = "toggleKeybind",
		name = "Toggle first person keybind",
		description = "Keyboard shortcut for toggling first person mode on and off."
	)
	default Keybind toggleKeybind()
	{
		return null;
	}
}
/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.firstperson.detachedcamera;

public class PreCalculatedTransformations
{
	public static int[] yAxisAbsoluteChange = {
		0, -2, -4, -7, -9, -11, -14, -16, -19, -21, -24, -26, -29, -31, -34, -37, -39, -42, -45, -47, -50, -53,
		-56, -58, -61, -64, -67, -70, -73, -76, -79, -82, -85, -88, -91, -94, -97, -100, -103, -106, -110, -113,
		-116, -119, -123, -126, -129, -133, -136, -139, -143, -146, -150, -153, -156, -160, -164, -167, -171,
		-174, -178, -181, -185, -189, -193, -196, -200, -204, -208, -211, -215, -219, -223, -227, -231, -235,
		-239, -242, -246, -251, -255, -258, -263, -267, -271, -275, -279, -283, -288, -292, -296, -300, -304,
		-309, -313, -317, -322, -326, -330, -335, -339, -343, -348, -353, -357, -361, -366, -371, -375, -380,
		-384, -389, -394, -398, -403, -408, -412, -417, -422, -427, -431, -436, -441, -446, -451, -455, -460,
		-465, -470, -475, -480, -485, -490, -495, -500, -505, -510, -515, -520, -525, -530, -535, -541, -546,
		-551, -556, -561, -567, -572, -577, -582, -588, -593, -598, -603, -609, -614, -619, -625, -630, -636,
		-641, -647, -652, -658, -663, -668, -674, -680, -685, -691, -696, -702, -707, -713, -719, -724, -730,
		-735, -741, -747, -752, -758, -764, -770, -775, -781, -787, -793, -798, -804, -810, -816, -822, -828,
		-834, -840, -845, -851, -857, -863, -869, -875, -881, -887, -892, -899, -905, -911, -916, -923, -929,
		-935, -941, -947, -953, -959, -965, -971, -977, -984, -989, -996, -1002, -1008, -1014, -1020, -1027,
		-1033, -1039, -1045, -1051, -1058, -1063, -1070, -1076, -1083, -1088, -1095, -1101, -1108, -1113, -1120,
		-1126, -1133, -1138, -1145, -1151, -1158, -1164, -1170, -1177, -1183, -1189, -1196, -1202, -1209, -1214,
		-1221, -1228, -1234, -1240, -1247, -1253, -1260, -1266, -1272, -1279, -1285, -1291, -1298, -1304, -1311,
		-1317, -1323, -1330, -1337, -1343, -1349, -1356, -1362, -1368, -1375, -1382, -1388, -1394, -1401, -1407,
		-1414, -1420, -1427, -1433, -1440, -1446, -1452, -1459, -1466, -1472, -1478, -1485, -1492, -1498, -1504,
		-1511, -1518, -1523, -1530, -1537, -1543, -1549, -1556, -1563, -1569, -1575, -1582, -1588, -1595, -1601,
		-1608, -1614, -1621, -1627, -1633, -1640, -1647, -1652, -1659, -1666, -1672, -1678, -1685, -1691, -1698,
		-1704, -1710, -1717, -1724, -1729, -1736, -1742, -1749, -1755, -1761, -1768, -1774, -1780, -1787, -1793,
		-1800, -1805, -1812, -1819, -1825, -1831, -1837, -1844, -1850, -1856, -1862, -1869, -1875, -1881, -1887,
		-1894, -1900, -1906, -1912, -1919, -1925, -1930, -1937, -1943, -1950, -1955, -1961, -1968, -1974, -1980,
		-1986, -1992, -1999, -2004, -2010, -2017, -2023, -2028, -2034, -2041, -2047, -2052, -2058, -2065, -2071,
		-2076, -2082, -2088, -2094, -2100, -2106, -2112, -2118, -2123, -2129, -2135, -2141, -2146, -2152, -2158,
		-2164, -2169, -2175, -2181, -2187, -2192, -2198, -2204, -2210, -2215, -2221, -2227, -2232, -2237, -2243,
		-2249, -2255, -2260, -2265, -2271, -2277, -2281, -2287, -2293, -2298, -2303, -2309, -2314, -2320, -2325,
		-2330, -2336, -2341, -2346, -2351, -2357, -2362, -2367, -2372, -2377, -2383, -2387, -2393, -2398, -2403,
		-2407, -2413, -2418, -2423, -2428, -2433, -2438, -2443, -2447, -2452, -2457, -2463, -2467, -2472, -2477,
		-2482, -2486, -2491, -2496, -2501, -2504, -2509, -2514, -2519, -2523, -2528, -2532, -2537, -2541, -2546,
		-2550, -2555, -2559, -2563, -2568, -2572, -2576, -2581, -2585, -2590, -2593, -2598, -2602, -2606, -2610,
		-2614, -2618, -2623, -2626, -2630, -2634, -2639, -2642, -2646, -2650, -2654, -2657, -2661, -2665, -2669
	};
	public static double[] xAndYAxisChangeWithPitch = new double[]{
		1.0, 1.0026666666666666, 1.008, 1.0133333333333334, 1.0186666666666666, 1.0226666666666666, 1.028, 1.0333333333333334,
		1.0386666666666666, 1.0426666666666666, 1.048, 1.0533333333333332, 1.0586666666666666, 1.0626666666666666,
		1.068, 1.0733333333333333, 1.0786666666666667, 1.0813333333333333, 1.0866666666666667, 1.092, 1.0973333333333333,
		1.1013333333333333, 1.1066666666666667, 1.1106666666666667, 1.116, 1.12, 1.1253333333333333, 1.1306666666666667,
		1.1346666666666667, 1.1386666666666667, 1.144, 1.1493333333333333, 1.1533333333333333, 1.1573333333333333,
		1.1626666666666667, 1.1666666666666667, 1.172, 1.176, 1.18, 1.1853333333333333, 1.1906666666666668,
		1.1933333333333334, 1.1986666666666665, 1.204, 1.208, 1.212, 1.216, 1.2213333333333334, 1.2253333333333334,
		1.2293333333333334, 1.2333333333333334, 1.2386666666666666, 1.2426666666666666, 1.2466666666666666,
		1.2506666666666666, 1.256, 1.26, 1.264, 1.268, 1.2733333333333334, 1.2773333333333334, 1.28, 1.2853333333333334,
		1.2893333333333334, 1.2933333333333334, 1.2973333333333334, 1.3013333333333335, 1.3053333333333335,
		1.3106666666666666, 1.3133333333333335, 1.3173333333333335, 1.3213333333333335, 1.3266666666666667,
		1.3293333333333333, 1.3333333333333333, 1.3373333333333333, 1.3413333333333333, 1.3453333333333333,
		1.3493333333333333, 1.3533333333333333, 1.3573333333333333, 1.3599999999999999, 1.3639999999999999,
		1.3679999999999999, 1.3719999999999999, 1.3746666666666667, 1.3786666666666667, 1.3826666666666667,
		1.3866666666666667, 1.3893333333333333, 1.3933333333333333, 1.3973333333333333, 1.4013333333333333,
		1.404, 1.408, 1.412, 1.416, 1.4186666666666667, 1.4213333333333333, 1.4253333333333333, 1.4293333333333333,
		1.432, 1.436, 1.4386666666666668, 1.4426666666666668, 1.4453333333333334, 1.448, 1.452, 1.456, 1.4573333333333334,
		1.4613333333333334, 1.4653333333333334, 1.468, 1.4706666666666668, 1.4733333333333334, 1.4773333333333334,
		1.48, 1.4826666666666668, 1.4853333333333334, 1.4893333333333334, 1.492, 1.4946666666666666, 1.4973333333333334,
		1.5, 1.504, 1.5053333333333332, 1.508, 1.512, 1.5146666666666668, 1.516, 1.5186666666666668, 1.5226666666666666,
		1.5253333333333332, 1.5266666666666666, 1.5293333333333332, 1.532, 1.5346666666666666, 1.5373333333333332,
		1.54, 1.5426666666666666, 1.5453333333333332, 1.5466666666666666, 1.5493333333333332, 1.552, 1.5546666666666666,
		1.556, 1.5586666666666666, 1.56, 1.5626666666666666, 1.564, 1.5666666666666667, 1.5693333333333332,
		1.572, 1.572, 1.5746666666666667, 1.5773333333333333, 1.5786666666666667, 1.58, 1.5826666666666667,
		1.5853333333333333, 1.5866666666666667, 1.588, 1.5893333333333333, 1.592, 1.5933333333333333, 1.5946666666666667,
		1.596, 1.5986666666666667, 1.6, 1.6013333333333333, 1.6026666666666667, 1.604, 1.6066666666666667, 1.6066666666666667,
		1.608, 1.6106666666666667, 1.612, 1.612, 1.6133333333333333, 1.616, 1.6173333333333333, 1.6173333333333333,
		1.6186666666666667, 1.62, 1.6213333333333333, 1.6213333333333333, 1.6226666666666667, 1.624, 1.6253333333333333,
		1.6253333333333333, 1.6266666666666667, 1.6280000000000001, 1.6293333333333333, 1.6293333333333333,
		1.6306666666666667, 1.6306666666666667, 1.6320000000000001, 1.6320000000000001, 1.6333333333333333,
		1.6333333333333333, 1.6346666666666667, 1.6346666666666667, 1.6346666666666667, 1.6360000000000001,
		1.6360000000000001, 1.6360000000000001, 1.6373333333333333, 1.6373333333333333, 1.6373333333333333,
		1.6373333333333333, 1.6373333333333333, 1.6386666666666667, 1.6386666666666667, 1.6386666666666667,
		1.6386666666666667, 1.6386666666666667, 1.6386666666666667, 1.6386666666666667, 1.6386666666666667,
		1.6386666666666667, 1.6386666666666667, 1.6373333333333333, 1.6386666666666667, 1.6386666666666667,
		1.6386666666666667, 1.6373333333333333, 1.6373333333333333, 1.6373333333333333, 1.6373333333333333,
		1.6360000000000001, 1.6360000000000001, 1.6346666666666667, 1.6346666666666667, 1.6333333333333333,
		1.6333333333333333, 1.6333333333333333, 1.6320000000000001, 1.6306666666666667, 1.6306666666666667,
		1.6293333333333333, 1.6293333333333333, 1.6280000000000001, 1.6266666666666667, 1.6266666666666667,
		1.6253333333333333, 1.624, 1.6226666666666667, 1.6226666666666667, 1.6213333333333333, 1.62, 1.6186666666666667,
		1.6173333333333333, 1.6173333333333333, 1.6146666666666667, 1.6133333333333333, 1.612, 1.612, 1.6093333333333333,
		1.608, 1.6066666666666667, 1.6053333333333333, 1.6026666666666667, 1.6013333333333333, 1.6, 1.5986666666666667,
		1.596, 1.5946666666666667, 1.5933333333333333, 1.592, 1.5893333333333333, 1.588, 1.5853333333333333,
		1.584, 1.5813333333333333, 1.58, 1.5773333333333333, 1.576, 1.5733333333333333, 1.5706666666666667,
		1.5693333333333332, 1.5666666666666667, 1.564, 1.5613333333333332, 1.56, 1.5573333333333332, 1.5546666666666666,
		1.552, 1.5493333333333332, 1.5466666666666666, 1.544, 1.5413333333333332, 1.5386666666666666, 1.536,
		1.5333333333333332, 1.5306666666666666, 1.528, 1.5253333333333332, 1.5213333333333332, 1.5186666666666668,
		1.516, 1.5133333333333332, 1.5093333333333332, 1.5066666666666668, 1.504, 1.5, 1.496, 1.4933333333333334,
		1.4906666666666666, 1.4866666666666668, 1.4826666666666668, 1.48, 1.4773333333333334, 1.4733333333333334,
		1.4693333333333334, 1.4653333333333334, 1.4626666666666668, 1.4586666666666668, 1.4546666666666668,
		1.4506666666666668, 1.448, 1.444, 1.44, 1.436, 1.432, 1.428, 1.424, 1.42, 1.416, 1.412, 1.4066666666666667,
		1.4026666666666667, 1.3986666666666667, 1.3946666666666667, 1.3893333333333333, 1.3853333333333333,
		1.3813333333333333, 1.3773333333333333, 1.3719999999999999, 1.3679999999999999, 1.3626666666666667,
		1.3586666666666667, 1.3533333333333333, 1.3493333333333333, 1.3439999999999999, 1.34, 1.3346666666666667,
		1.3306666666666667, 1.3253333333333333, 1.32, 1.3146666666666667, 1.3106666666666666, 1.3053333333333335,
		1.3, 1.2946666666666666, 1.2893333333333334, 1.2853333333333334, 1.28, 1.2733333333333334, 1.2693333333333334,
		1.264, 1.2586666666666666, 1.252, 1.2466666666666666, 1.2413333333333334, 1.236, 1.2306666666666666,
		1.2253333333333334, 1.2186666666666666, 1.2133333333333334, 1.208, 1.2013333333333334, 1.196, 1.1906666666666668,
		1.184, 1.1786666666666668, 1.172, 1.1666666666666667, 1.16, 1.1533333333333333, 1.148, 1.1413333333333333,
		1.1346666666666667, 1.1293333333333333, 1.1226666666666667, 1.1173333333333333, 1.1093333333333333,
		1.104, 1.0973333333333333, 1.0906666666666667, 1.084, 1.0773333333333333, 1.0706666666666667, 1.064,
		1.0573333333333332, 1.0506666666666666, 1.044, 1.0373333333333334, 1.0306666666666666, 1.024, 1.0173333333333334,
		1.0093333333333334, 1.0026666666666666, 0.996, 0.9893333333333333, 0.9813333333333333, 0.9746666666666667,
		0.9666666666666667, 0.96, 0.9533333333333334, 0.9453333333333334, 0.9386666666666666, 0.9306666666666666,
		0.924, 0.916, 0.908, 0.9013333333333333, 0.8933333333333333, 0.8853333333333333, 0.8773333333333333,
		0.8706666666666667, 0.8626666666666667, 0.8546666666666667, 0.8466666666666667, 0.8386666666666667,
		0.832, 0.8226666666666667, 0.8160000000000001, 0.808, 0.8, 0.7906666666666666, 0.7826666666666666, 0.7746666666666666,
		0.7666666666666666, 0.7586666666666666, 0.7506666666666667, 0.7426666666666666, 0.7346666666666667,
		0.7253333333333334, 0.7173333333333334, 0.7093333333333334, 0.7, 0.692, 0.6826666666666666, 0.6746666666666667,
		0.6666666666666667, 0.6573333333333333, 0.6493333333333333, 0.64, 0.632, 0.6226666666666667, 0.6133333333333333,
		0.6053333333333333, 0.596, 0.5866666666666667, 0.5786666666666667, 0.5693333333333334, 0.56, 0.5506666666666666,
		0.5413333333333333, 0.5333333333333333, 0.524, 0.5146666666666666, 0.5053333333333334, 0.496, 0.4866666666666667,
		0.4773333333333334, 0.46799999999999997, 0.45866666666666667, 0.44933333333333336, 0.43866666666666665,
		0.42933333333333334, 0.42000000000000004, 0.4106666666666666, 0.4013333333333333, 0.3906666666666667,
		0.3813333333333333, 0.372, 0.3613333333333333, 0.352, 0.3426666666666667, 0.33199999999999996, 0.32266666666666666,
		0.31200000000000006, 0.30266666666666664, 0.29333333333333333, 0.2826666666666666, 0.272, 0.2626666666666667,
		0.252, 0.2426666666666667, 0.23199999999999998, 0.22133333333333338, 0.21199999999999997, 0.20133333333333336,
		0.19066666666666665, 0.18000000000000005, 0.17066666666666663, 0.16000000000000003, 0.14933333333333332,
		0.13866666666666672, 0.128, 0.11733333333333329, 0.10666666666666669, 0.09599999999999997, 0.08533333333333337,
		0.07466666666666666, 0.06399999999999995, 0.053333333333333344, 0.04266666666666663, 0.03200000000000003,
		0.021333333333333315, 0.010666666666666713, 0.0
	};
}
/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.firstperson.detachedcamera;

import com.firstperson.FirstPersonConfig;
import com.firstperson.input.InputHandler;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.coords.LocalPoint;

public class DetachedCameraMovementHandler
{
	Client client;
	FirstPersonConfig config;
	InputHandler inputHandler;

	final int[] yAxisAbsoluteChange = PreCalculatedTransformations.yAxisAbsoluteChange;

	final double[] xAndYAxisChangeWithPitch = PreCalculatedTransformations.xAndYAxisChangeWithPitch;

	public DetachedCameraMovementHandler(Client client, FirstPersonConfig config, InputHandler inputHandler)
	{
		this.client = client;
		this.config = config;
		this.inputHandler = inputHandler;
	}

	public void updateDetachedCameraPosition()
	{
		if (client.getLocalPlayer() == null) return;
		int yaw = client.getCameraYawTarget();
		int pitch = client.getCameraPitchTarget();

		double yawRad = Math.toRadians((yaw * 360.0 / 2048.0) - 180.0);

		double distanceAt0Pitch = 750.0;
		int zRate = yAxisAbsoluteChange[pitch];

		double cosPitch = xAndYAxisChangeWithPitch[pitch];

		double[] playerPos = getPlayerPerspectivePosition();

		double xShift = distanceAt0Pitch * cosPitch * Math.sin(yawRad);
		double yShift = distanceAt0Pitch * cosPitch * Math.cos(yawRad);
		double focalPointX = playerPos[0] + xShift;
		double focalPointY = playerPos[1] - zRate;
		double focalPointZ = playerPos[2] - yShift;

		client.setCameraFocalPointX(focalPointX);
		client.setCameraFocalPointY(focalPointY);
		client.setCameraFocalPointZ(focalPointZ);
	}


	private double[] getPlayerPerspectivePosition()
	{
		LocalPoint lp = client.getLocalPlayer().getLocalLocation();
		double playerX = lp.getX();
		double playerY = Perspective.getTileHeight(client, lp, client.getTopLevelWorldView().getPlane()) - 200.0;
		double playerZ = lp.getY();

		return new double[] { playerX, playerY, playerZ };
	}
}

/*
 * Copyright (c) 2024, Zoinkwiz <https://github.com/Zoinkwiz>
 * Copyright (c) 2018, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.firstperson;

import com.firstperson.detachedcamera.DetachedCameraMovementHandler;
import com.firstperson.gpu.FirstPersonDrawCallbacks;
import com.firstperson.input.InputHandler;
import com.firstperson.input.ToggleInputHandler;
import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.events.GameTick;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.callback.Hooks;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.input.KeyManager;
import net.runelite.client.input.MouseManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.gpu.GpuPlugin;
import net.runelite.client.ui.DrawManager;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDependency(GpuPlugin.class)
@PluginDescriptor(
	name = "First Person",
	description = "Allows for a first-person experience without the ability to interact with anything"
)
public class FirstPersonPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private FirstPersonConfig config;

	@Inject
	private Hooks hooks;

	@Inject
	private ClientThread clientThread;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private DrawManager drawManager;

	@Inject
	KeyManager keyManager;

	@Inject
	MouseManager mouseManager;

	@Inject
	ConfigManager configManager;

	FirstPersonDrawCallbacks firstPersonDrawCallbacks;

	InputHandler inputHandler;

	ToggleInputHandler toggleInputHandler;

	DetachedCameraMovementHandler detachedCameraMovementHandler;

	@Getter
	boolean active;

	@Override
	protected void startUp() throws Exception
	{
		firstPersonDrawCallbacks = new FirstPersonDrawCallbacks(client);
		inputHandler = new InputHandler(client, this, config, System.currentTimeMillis());
		toggleInputHandler = new ToggleInputHandler(this, config);
		detachedCameraMovementHandler = new DetachedCameraMovementHandler(client, config, inputHandler);

		activate();
		keyManager.registerKeyListener(toggleInputHandler);
	}

	@Override
	protected void shutDown() throws Exception
	{
		deactivate();
		keyManager.unregisterKeyListener(toggleInputHandler);
	}

	public void activate()
	{
		active = true;
		if (client.getDrawCallbacks() != null && firstPersonDrawCallbacks != client.getDrawCallbacks())
		{
			firstPersonDrawCallbacks.setCallback(client.getDrawCallbacks());
		}

		keyManager.registerKeyListener(inputHandler);
		mouseManager.registerMouseListener(inputHandler);

		drawManager.registerEveryFrameListener(cameraMovementHandler);

		client.setCameraPitchRelaxerEnabled(true);
	}

	public void deactivate()
	{
		active = false;
		keyManager.unregisterKeyListener(inputHandler);
		mouseManager.unregisterMouseListener(inputHandler);
		client.setCameraMode(0);
		drawManager.unregisterEveryFrameListener(cameraMovementHandler);
		clientThread.invokeLater(() -> {
			if (config.useGpu())
			{
				if (firstPersonDrawCallbacks.getPluginImplementingDrawCallback() != null)
				{
					client.setDrawCallbacks(firstPersonDrawCallbacks.getPluginImplementingDrawCallback());
				}
				else
				{
					client.setDrawCallbacks(null);
				}
			}
		});

		client.setCameraPitchRelaxerEnabled(false);
	}

	public boolean isGpuActive()
	{
		return config.useGpu() && firstPersonDrawCallbacks.getPluginImplementingDrawCallback() != null;
	}

	private final Runnable cameraMovementHandler = () -> {
		inputHandler.updateCameraPosition();
		if (!isGpuActive())
		{
			if (client.getCameraMode() != 1) client.setCameraMode(1);
			detachedCameraMovementHandler.updateDetachedCameraPosition();
		}
	};

	private void activateGpuMode()
	{
		if (!active) return;
		clientThread.invokeLater(() -> {
			if (client.getDrawCallbacks() != null && client.getDrawCallbacks() != firstPersonDrawCallbacks)
			{
				firstPersonDrawCallbacks.setCallback(client.getDrawCallbacks());
				client.setDrawCallbacks(firstPersonDrawCallbacks);
				client.setCameraMode(0);
			}
			else
			{
				disableGpuMode();
			}
		});
	}

	private void disableGpuMode()
	{
		if (!active) return;
		clientThread.invokeLater(() -> {
			if (firstPersonDrawCallbacks.getPluginImplementingDrawCallback() != null)
			{
				client.setDrawCallbacks(firstPersonDrawCallbacks.getPluginImplementingDrawCallback());
			}
			else
			{
				client.setDrawCallbacks(null);
			}
			client.setCameraMode(1);
		});
	}

	@Subscribe
	public void onGameTick(GameTick gameTick)
	{
		// If changed to something
		if (client.getDrawCallbacks() == firstPersonDrawCallbacks) return;

		// Something cleared the drawcallback. We should revert from GPU mode
		if (client.getDrawCallbacks() == null && firstPersonDrawCallbacks.getPluginImplementingDrawCallback() != null)
		{
			firstPersonDrawCallbacks.setCallback(null);
			if (config.useGpu()) disableGpuMode();
		}
		else if (client.getDrawCallbacks() != null && client.getDrawCallbacks() != firstPersonDrawCallbacks)
		{
			// New drawcallback set. We should wrap it and use it
			firstPersonDrawCallbacks.setCallback(client.getDrawCallbacks());
			if (config.useGpu()) activateGpuMode();
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (event.getGroup().equals("firstperson") && event.getKey().equals("useGpu"))
		{
			if ("true".equals(event.getNewValue()))
			{
				activateGpuMode();
			}
			else
			{
				disableGpuMode();
			}
		}
	}

	@Provides
	FirstPersonConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(FirstPersonConfig.class);
	}
}

package com.firstperson;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class FirstPersonPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(FirstPersonPlugin.class);
		RuneLite.main(args);
	}
}
