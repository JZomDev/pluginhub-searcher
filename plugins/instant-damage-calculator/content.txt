package com.geeckon.instantdamagecalculator;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;

import java.time.Duration;
import java.time.Instant;
import java.util.*;

import static net.runelite.api.ScriptID.XPDROPS_SETDROPSIZE;

@Slf4j
@PluginDescriptor(
		name = "InstantDamageCalculator",
		tags = {"experience", "levels", "prayer", "xpdrop", "damage", "damagedrop", "muspah"}
)
public class InstantDamageCalculatorPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private InstantDamageCalculatorConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private InstantDamageCalculatorOverlay overlay;

	private int xp = -1;
	private NPCWithXpBoost lastOpponent;
	private int lastOpponentID = -1;
	private int lastMuspahPhase = -1;

	@Getter
	private double hit = 0;

	@Getter
	private double totalHit = 0;
	private int equippedWeaponTypeVarbit = -1;
	private int activeProtectionPrayerVarbit = -1;
	private int mode = 0;

	private static final ImmutableMap<NPCWithXpBoost, Double> XP_MODIFIERS = ImmutableMap.<NPCWithXpBoost, Double>builder().
			put(NPCWithXpBoost.CERBERUS, 1.15).
			put(NPCWithXpBoost.ABYSSAL_SIRE, 1.125).
			put(NPCWithXpBoost.ALCHEMICAL_HYDRA, 1.2).
			put(NPCWithXpBoost.CHAOS_FANATIC, 1.125).
			put(NPCWithXpBoost.CRAZY_ARCHAEOLOGIST, 1.25).
			put(NPCWithXpBoost.SCORPIA, 1.3).
			put(NPCWithXpBoost.KING_BLACK_DRAGON, 1.075).
			put(NPCWithXpBoost.CHAOS_ELEMENTAL, 1.075).
			put(NPCWithXpBoost.VETION, 1.225).
			put(NPCWithXpBoost.SKELETON_HELLHOUND, 1.05).
			put(NPCWithXpBoost.GREATER_SKELETON_HELLHOUND, 1.125).
			put(NPCWithXpBoost.VENENATIS, 1.525).
			put(NPCWithXpBoost.CALLISTO, 1.225).
			put(NPCWithXpBoost.OBOR, 1.075).
			put(NPCWithXpBoost.BRYOPHYTA, 1.025).
			put(NPCWithXpBoost.THE_MIMIC, 1.25).
			put(NPCWithXpBoost.THIRD_AGE_WARRIOR, 1.075).
			put(NPCWithXpBoost.SKOTIZO, 1.375).
			put(NPCWithXpBoost.TZKAL_ZUK, 1.575).
			put(NPCWithXpBoost.JAL_AK, 1.025).
			put(NPCWithXpBoost.JAL_IMKOT, 1.075).
			put(NPCWithXpBoost.RABBIT, 2.125).
			put(NPCWithXpBoost.AHRIM_THE_BLIGHTED, 1.025).
			put(NPCWithXpBoost.DHAROK_THE_WRETCHED, 1.15).
			put(NPCWithXpBoost.GUTHAN_THE_INFESTED, 1.15).
			put(NPCWithXpBoost.TORAG_THE_CORRUPTED, 1.125).
			put(NPCWithXpBoost.VERAC_THE_DEFILED, 1.125).
			put(NPCWithXpBoost.GIANT_MOLE, 1.075).
			put(NPCWithXpBoost.DERANGED_ARCHAEOLOGIST, 1.375).
			put(NPCWithXpBoost.DAGANNOTH_REX, 1.3).
			put(NPCWithXpBoost.DAGANNOTH_PRIME, 1.3).
			put(NPCWithXpBoost.SARACHNIS, 1.075).
			put(NPCWithXpBoost.SPAWN_OF_SARACHNIS, 1.025).
			put(NPCWithXpBoost.KALPHITE_QUEEN_CRAWLING, 1.05).
			put(NPCWithXpBoost.KALPHITE_QUEEN_AIRBORNE, 1.125).
			put(NPCWithXpBoost.KREE_ARRA, 1.4).
			put(NPCWithXpBoost.WINGMAN_SKREE, 1.025).
			put(NPCWithXpBoost.COMMANDER_ZILYANA, 1.375).
			put(NPCWithXpBoost.STARLIGHT, 1.05).
			put(NPCWithXpBoost.GENERAL_GRAARDOR, 1.325).
			put(NPCWithXpBoost.KRIL_TSUTSAROTH, 1.375).
			put(NPCWithXpBoost.SNAKELING, 1.025).
			put(NPCWithXpBoost.PHANTOM_MUSPAH, 2.075).
			put(NPCWithXpBoost.CORPOREAL_BEAST, 1.55).
			put(NPCWithXpBoost.NEX, 2.525).
			put(NPCWithXpBoost.UMBRA, 1.075).
			put(NPCWithXpBoost.CRUOR, 1.05).
			put(NPCWithXpBoost.GLACIES, 1.05).
			put(NPCWithXpBoost.DUKE_SUCELLUS, 1.55).
			put(NPCWithXpBoost.VARDORVIS, 1.55).
			put(NPCWithXpBoost.LEVIATHAN, 1.975).
			put(NPCWithXpBoost.BANDIT_130, 1.025).
			put(NPCWithXpBoost.BLACK_DRAGON, 1.05).
			put(NPCWithXpBoost.BRUTAL_BLACK_DRAGON, 1.1).
			put(NPCWithXpBoost.DARK_WARRIOR_135,1.1).
			put(NPCWithXpBoost.ENT_WILDERNESS,1.025).
			put(NPCWithXpBoost.ENT_WC_GUILD,1.05).
			put(NPCWithXpBoost.FIRE_GIANT_104_109,1.025).
			put(NPCWithXpBoost.BRUTAL_GREEN_DRAGON, 1.05).
			put(NPCWithXpBoost.LAVA_DRAGON, 1.075).
			put(NPCWithXpBoost.MOSS_GIANT_84, 1.025).
			put(NPCWithXpBoost.GREATER_NECHRYAEL, 1.025).
			put(NPCWithXpBoost.REVENANT_HOBGOBLIN, 1.025).
			put(NPCWithXpBoost.REVENANT_CYCLOPS, 1.075).
			put(NPCWithXpBoost.REVENANT_HELLHOUND, 1.075).
			put(NPCWithXpBoost.REVENANT_DEMON, 1.075).
			put(NPCWithXpBoost.REVENANT_ORK, 1.1).
			put(NPCWithXpBoost.REVENANT_DARK_BEAST, 1.125).
			put(NPCWithXpBoost.REVENANT_KNIGHT, 1.175).
			put(NPCWithXpBoost.REVENANT_DRAGON, 1.2).
			put(NPCWithXpBoost.REVENANT_MALEDICTUS, 1.65).
			put(NPCWithXpBoost.SPIRITUAL_WARRIOR_BANDOS, 1.025).
			put(NPCWithXpBoost.DEVIANT_SPECTRE, 1.025).
			put(NPCWithXpBoost.ADAMANT_DRAGON, 1.1).
			put(NPCWithXpBoost.DEMONIC_GORILLA, 1.075).
			put(NPCWithXpBoost.TORTURED_GORILLA, 1.125).
			put(NPCWithXpBoost.BLUE_DRAGON, 1.025).
			put(NPCWithXpBoost.BRUTAL_BLUE_DRAGON, 1.05).
			put(NPCWithXpBoost.DARK_BEAST, 1.025).
			put(NPCWithXpBoost.DRAKE, 1.075).
			put(NPCWithXpBoost.ELVES, 1.025).
			put(NPCWithXpBoost.SPITTING_WYVERN, 1.025).
			put(NPCWithXpBoost.TALONED_WYVERN, 1.025).
			put(NPCWithXpBoost.LONGTAILED_WYVERN, 1.025).
			put(NPCWithXpBoost.ANCIENT_WYVERN, 1.05).
			put(NPCWithXpBoost.IRON_DRAGON, 1.05).
			put(NPCWithXpBoost.LIZARDMAN_SHAMAN_OVERWORLD, 1.05).
			put(NPCWithXpBoost.MITHRIL_DRAGON, 1.075).
			put(NPCWithXpBoost.RED_DRAGON, 1.025).
			put(NPCWithXpBoost.BRUTAL_RED_DRAGON, 1.075).
			put(NPCWithXpBoost.RUNE_DRAGON, 1.1).
			put(NPCWithXpBoost.SKELETAL_WYVERN, 1.05).
			put(NPCWithXpBoost.STEEL_DRAGON, 1.05).
			put(NPCWithXpBoost.SUQAH, 1.025).
			put(NPCWithXpBoost.BRONZE_DRAGON, 1.025).
			put(NPCWithXpBoost.ICE_TROLLS, 1.05).
			put(NPCWithXpBoost.TROLL_GENERAL, 1.075).
			put(NPCWithXpBoost.WYRM, 1.025).
			put(NPCWithXpBoost.LOCUST_RIDER, 1.025).
			put(NPCWithXpBoost.SCARAB_MAGE, 1.025).
			put(NPCWithXpBoost.HYDRA, 1.075).
			put(NPCWithXpBoost.REPUGNANT_SPECTRE, 1.075).
			put(NPCWithXpBoost.BASILISK_SENTINEL, 1.075).
			put(NPCWithXpBoost.KING_KURASK, 1.025).
			put(NPCWithXpBoost.MARBLE_GARGOYLE, 1.025).
			put(NPCWithXpBoost.NECHRYACH, 1.025).
			put(NPCWithXpBoost.GREATER_ABYSSAL_DEMON, 1.05).
			put(NPCWithXpBoost.NIGHT_BEAST, 1.175).
			put(NPCWithXpBoost.CORRUPT_LIZARDMAN_NMZ, 1.025).
			put(NPCWithXpBoost.ELVARG_NMZ, 1.025).
			put(NPCWithXpBoost.MOSS_GUARDIAN_NMZ, 1.025).
			put(NPCWithXpBoost.MOSS_GUARDIAN_HARD_NMZ, 1.075).
			put(NPCWithXpBoost.SLAGILITH_NMZ, 1.03).
			put(NPCWithXpBoost.SLAGILITH_HARD_NMZ, 1.025).
			put(NPCWithXpBoost.DAGANNOTH_MOTHER_NMZ, 1.05).
			put(NPCWithXpBoost.DAGANNOTH_MOTHER_HARD_NMZ, 1.125).
			put(NPCWithXpBoost.DAD_NMZ, 1.05).
			put(NPCWithXpBoost.DAD_HARD_NMZ, 1.1).
			put(NPCWithXpBoost.ARRG_NMZ, 1.075).
			put(NPCWithXpBoost.ARRG_HARD_NMZ, 1.175).
			put(NPCWithXpBoost.BLACK_KNIGHT_TITAN_NMZ, 1.025).
			put(NPCWithXpBoost.BLACK_KNIGHT_TITAN_HARD_NMZ, 1.05).
			put(NPCWithXpBoost.ICE_TROLL_KING_NMZ, 1.075).
			put(NPCWithXpBoost.ICE_TROLL_KING_HARD_NMZ, 1.125).
			put(NPCWithXpBoost.GLOD_NMZ, 1.05).
			put(NPCWithXpBoost.GLOD_HARD_NMZ, 1.1).
			put(NPCWithXpBoost.EVIL_CHICKEN_NMZ, 0.025).
			put(NPCWithXpBoost.AGRITHNANA_NMZ, 1.125).
			put(NPCWithXpBoost.AGRITHNANA_HARD_NMZ, 1.175).
			put(NPCWithXpBoost.FLAMBEED_NMZ, 1.125).
			put(NPCWithXpBoost.FLAMBEED_HARD_NMZ, 1.175).
			put(NPCWithXpBoost.KARAMEL_NMZ, 1.05).
			put(NPCWithXpBoost.DESSOURT_NMZ, 1.1).
			put(NPCWithXpBoost.DESSOURT_HARD_NMZ, 1.2).
			put(NPCWithXpBoost.GELATINNOTH_MOTHER_NMZ, 1.075).
			put(NPCWithXpBoost.GELATINNOTH_MOTHER_HARD_NMZ, 1.125).
			put(NPCWithXpBoost.CHRONOZON_NMZ, 0.1).
			put(NPCWithXpBoost.DESSOUS_NMZ, 1.1).
			put(NPCWithXpBoost.DESSOUS_HARD_NMZ, 1.175).
			put(NPCWithXpBoost.DAMIS_FIRST_NMZ, 1.05).
			put(NPCWithXpBoost.DAMIS_SECOND_NMZ, 1.15).
			put(NPCWithXpBoost.DAMIS_FIRST_HARD_NMZ, 1.1).
			put(NPCWithXpBoost.DAMIS_SECOND_HARD_NMZ, 1.225).
			put(NPCWithXpBoost.FAREED_NMZ, 1.15).
			put(NPCWithXpBoost.FAREED_HARD_NMZ, 1.25).
			put(NPCWithXpBoost.KAMIL_NMZ, 1.125).
			put(NPCWithXpBoost.KAMIL_HARD_NMZ, 1.225).
			put(NPCWithXpBoost.BARRELCHEST_NMZ, 1.1).
			put(NPCWithXpBoost.BARRELCHEST_HARD_NMZ, 1.175).
			put(NPCWithXpBoost.GIANT_SCARAB_NMZ, 1.05).
			put(NPCWithXpBoost.GIANT_SCARAB_HARD_NMZ, 1.1).
			put(NPCWithXpBoost.JUNGLE_DEMON_NMZ, 1.075).
			put(NPCWithXpBoost.JUNGLE_DEMON_HARD_NMZ, 1.15).
			put(NPCWithXpBoost.ARIANWYN_NMZ, 1.025).
			put(NPCWithXpBoost.ESSYLLT_NMZ, 1.05).
			put(NPCWithXpBoost.ESSYLLT_HARD_NMZ, 1.1).
			put(NPCWithXpBoost.DAGANNOTH_WATERBIRTH_MELEE, 1.05).
			put(NPCWithXpBoost.GIANT_ROCK_CRAB, 1.1).
			put(NPCWithXpBoost.WALLASALKI, 1.025).
			put(NPCWithXpBoost.ROCK_LOBSTER, 1.025).
			put(NPCWithXpBoost.JUSTICIAR_ZACHARIAH, 1.55).
			put(NPCWithXpBoost.DERWEN, 1.2).
			put(NPCWithXpBoost.PORAZDIR, 1.2).
			put(NPCWithXpBoost.GALVEK, 1.425).
			put(NPCWithXpBoost.FRAGMENT_OF_SEREN, 1.55).
			put(NPCWithXpBoost.GLOUGH, 1.325).
			put(NPCWithXpBoost.MONKEY_GUARD, 1.025).
			put(NPCWithXpBoost.MONKEY_SKELETON, 1.025).
			put(NPCWithXpBoost.DOUBLE_AGENT_108, 1.025).
			put(NPCWithXpBoost.DOUBLE_AGENT_141, 1.05).
			put(NPCWithXpBoost.SARADOMIN_WIZARD, 1.025).
			put(NPCWithXpBoost.ANCIENT_WIZARD_MELEE, 1.05).
			put(NPCWithXpBoost.UNDEAD_DRUID, 1.05).
			put(NPCWithXpBoost.FEROCIOUS_BARBARIAN_SPIRIT, 1.05).
			build();

	private static final ImmutableMap<NPCWithXpBoost, Double[]> XP_MODIFIERS_WITH_MODES = ImmutableMap.<NPCWithXpBoost, Double[]>builder().
		put(NPCWithXpBoost.TEKTON, new Double[] {1.35, 1.5}).
		put(NPCWithXpBoost.TEKTON_ENRAGED, new Double[] {1.525, 1.775}).
		put(NPCWithXpBoost.ICE_DEMON, new Double[] {1.525, 1.775}).
		put(NPCWithXpBoost.LIZARDMAN_SHAMAN, new Double[] {1.175, 1.275}).
		put(NPCWithXpBoost.VANGUARD_MELEE, new Double[] {1.075, 1.125}).
		put(NPCWithXpBoost.VANGUARD_RANGED, new Double[] {1.05, 1.075}).
		put(NPCWithXpBoost.VANGUARD_MAGIC, new Double[] {1.275, 1.40}).
		put(NPCWithXpBoost.GUARDIAN, new Double[] {1.075, 1.1}).
		put(NPCWithXpBoost.VASA_NISTIRIO, new Double[] {1.075, 1.1}).
		put(NPCWithXpBoost.VASA_CRYSTALS, new Double[] {1.025, 1.025}).
		put(NPCWithXpBoost.SKELETAL_MYSTIC, new Double[] {1.2, 1.3}).
		put(NPCWithXpBoost.MUTTADILE_SMALL, new Double[] {1.125, 1.225}).
		put(NPCWithXpBoost.MUTTADILE_LARGE, new Double[] {1.2, 1.35}).
		put(NPCWithXpBoost.PESTILENT_BLOAT, new Double[] {1.85, 1.975, 1.075}).
		put(NPCWithXpBoost.NYLOCAS_VASILIAS, new Double[] {1.225, 1.225, 1.025}).
		put(NPCWithXpBoost.SOTETSEG, new Double[] {1.675, 1.675, 1.045}).
		put(NPCWithXpBoost.VERZIK_VITUR_P1, new Double[] {1.05, 1.05, 1.005}).
		put(NPCWithXpBoost.VERZIK_VITUR_P2, new Double[] {1.425, 1.425, 1.025}).
		put(NPCWithXpBoost.VERZIK_VITUR_P3, new Double[] {1.85, 1.85, 1.125}).
		build();

	// TOA XP multipliers are derived from an NPC's stats; to calculate these for a particular raid level, the base
	// stats must be known. Format is:
	// [HP, Attack, Strength, Defense, Stab Defense, Slash Defense, Crush Defense, Attack Bonus, Strength Bonus]
	private static final ImmutableMap<NPCWithXpBoost, Integer[]> TOA_NPC_BASE_STATS = ImmutableMap.<NPCWithXpBoost, Integer[]>builder().
		put(NPCWithXpBoost.KEPHRI,               new Integer[] {150,   0,   0,  80,  60, 300, 100,   0,   0}).
		put(NPCWithXpBoost.AGILE_SCARAB,         new Integer[] { 30,  60,  20,   5,   0,   0,   0,   0,  25}).
		put(NPCWithXpBoost.SOLDIER_SCARAB,       new Integer[] { 40,  75,  80,  80,  15, 250,  30, 100,  55}).
		put(NPCWithXpBoost.SPITTING_SCARAB,      new Integer[] { 40,   1,  80,  80,  15, 250,  30,   0,  55}).
		put(NPCWithXpBoost.ARCANE_SCARAB,        new Integer[] { 40,  75,  80,  80,  15, 250,  30,   0,  55}).
		put(NPCWithXpBoost.SCARAB_TOA,           new Integer[] { 12,  20,  32,  28,   0,   0,   0,   0,   0}).
		put(NPCWithXpBoost.AKKHA,                new Integer[] {400, 100, 140,  80,  60, 120, 120, 115,  30}).
		put(NPCWithXpBoost.AKKHAS_SHADOW,        new Integer[] { 70, 100, 140,  30,  60, 120, 120, 115,  30}).
		put(NPCWithXpBoost.BABA,                 new Integer[] {380, 150, 160,  80,  80, 150, 240,   0,  26}).
		put(NPCWithXpBoost.BABOON_TOA,           new Integer[] {  0,   0,   0,   0,   0,   0,   0,   0,   0}).
		put(NPCWithXpBoost.BABOON_BRAWLER_SMALL, new Integer[] {  4,  40,  40,  12, 900, 900, 900,  20,   0}).
		put(NPCWithXpBoost.BABOON_BRAWLER_LARGE, new Integer[] {  8,  60,  60,  20, 900, 900, 900,  25,   0}).
		put(NPCWithXpBoost.BABOON_THROWER_SMALL, new Integer[] {  4,  40,  40,  12, -50, -50, -50,  20,   0}).
		put(NPCWithXpBoost.BABOON_THROWER_LARGE, new Integer[] {  8,  60,  60,  20, -50, -50, -50,  25,   0}).
		put(NPCWithXpBoost.BABOON_MAGE_SMALL,    new Integer[] {  4,  40,  40,  12, 900, 900, 900,  20,   0}).
		put(NPCWithXpBoost.BABOON_MAGE_LARGE,    new Integer[] {  8,  60,  60,  20, 900, 900, 900,  25,   0}).
		put(NPCWithXpBoost.BABOON_SHAMAN,        new Integer[] { 16,  60,  60,  20, 900, 900, 900,  25,   0}).
		put(NPCWithXpBoost.CURSED_BABOON,        new Integer[] { 10,  60,  60,  20, 900, 900, 900,  25,   0}).
		put(NPCWithXpBoost.VOLATILE_BABOON,      new Integer[] {  8,  60,  60,  20, 900, 900, 900,  25,   0}).
		put(NPCWithXpBoost.BABOON_THRALL,        new Integer[] {  2,  40,  40,  12,   0,   0,   0,  20,   0}).
		put(NPCWithXpBoost.ZEBAK,                new Integer[] {580, 250, 140,  70, 160, 160, 260, 160, 100}).
		put(NPCWithXpBoost.CROCODILE_TOA,        new Integer[] { 30, 150,  60, 100, 150, 350, 350,   0, 100}).
		put(NPCWithXpBoost.OBELISK,              new Integer[] {260, 200, 150, 100,  70,  70,  70,   0,   0}).
		put(NPCWithXpBoost.CORE,                 new Integer[] {  0,   0,   0,   0,   0,   0,   0,   0,   0}).
		put(NPCWithXpBoost.ELIDINIS_WARDEN_P2,   new Integer[] {140, 300, 150, 100,  70,  70,  70,   0,  10}).
		put(NPCWithXpBoost.TUMEKENS_WARDEN_P2,   new Integer[] {140, 300, 150, 100,  70,  70,  70,   0,  25}).
		put(NPCWithXpBoost.WARDENS_P3,           new Integer[] {880, 150, 150, 150,  40,  40,  20,   0,  40}).
		build();

	private HashMap<NPCWithXpBoost, Double> TOA_XP_MODIFIERS = new HashMap<NPCWithXpBoost, Double>();

	private HashMap<Integer, Double> CUSTOM_XP_MODIFIERS = new HashMap<Integer, Double>();

	private static final List<Integer> MUSPAH_IDS = new ArrayList<>(Arrays.asList(NpcID.PHANTOM_MUSPAH,
			NpcID.PHANTOM_MUSPAH_12078, NpcID.PHANTOM_MUSPAH_12079, NpcID.PHANTOM_MUSPAH_12080, NpcID.PHANTOM_MUSPAH_12082));

	private Instant expiryTimer;

	@Getter
	private boolean overlayExpired = true;

	@Provides
	InstantDamageCalculatorConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(InstantDamageCalculatorConfig.class);
	}

	@Override
	protected void startUp() throws Exception {
		overlayManager.add(overlay);
		updateCustomXP();
		clientThread.invoke(() -> updateToaModifiers());

		log.info("InstantDamageCalculator started!");
	}

	@Override
	protected void shutDown() throws Exception {
		overlayManager.remove(overlay);
		lastMuspahPhase = -1;
		lastOpponentID = -1;
		lastOpponent = null;

		log.info("InstantDamageCalculator stopped!");
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged) {
		if (configChanged.getKey().equals("customBonusXP")) {
			updateCustomXP();
		}
		if (configChanged.getKey().equals("expiry") && config.expiry() != 0) {
			expireOverlay();
		}
		if (configChanged.getKey().equals("precision")) {
			hit = roundToPrecision(getHit());
			totalHit = roundToPrecision(getTotalHit());
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage) {
		if (chatMessage.getType() == ChatMessageType.GAMEMESSAGE) {
			switch (Text.removeTags(chatMessage.getMessage())) {
				case "You enter the Theatre of Blood (Entry Mode)...":
					mode = 2;
					break;
				case "You enter the Theatre of Blood (Normal Mode)...":
					mode = 0;
					break;
				case "You enter the Theatre of Blood (Hard Mode)...":
					mode = 1;
					break;
				case "You've broken into a crypt!":
					if (config.resetOnBarrowsCryptEntry()) {
						resetTotalHit();
					}
			}
		} else if (chatMessage.getType() == ChatMessageType.FRIENDSCHATNOTIFICATION) {
			if (Text.removeTags(chatMessage.getMessage()).equals("The raid has begun!")) {
				{
					if (client.getVarbitValue(6385) > 0) {
						// Starting challenge mode raid
						mode = 1;
					} else {
						// Starting normal mode raid
						mode = 0;
					}
				}
			}
		}
	}

	@Subscribe
	public void onFakeXpDrop(FakeXpDrop event) {
		// Need this event for players with 200M hitpoints xp
		if (event.getSkill() == Skill.HITPOINTS) {
			long diff = event.getXp();

			if (diff > 0) {
				handleHitpointsXpDrop(diff);
			}
		}
	}

	@Subscribe
	public void onStatChanged(StatChanged statChanged) {
		if (statChanged.getSkill() == Skill.HITPOINTS) {
			int newXp = client.getSkillExperience(Skill.HITPOINTS);

			if (xp == -1) {
				xp = newXp;
				return;
			}

			long diff = newXp - xp;
			xp = newXp;

			if (diff > 0) {
				handleHitpointsXpDrop(diff);
			}
		}
	}

	private boolean shouldIncludeTotalHit() {
		return !config.resetOnMuspahPhase() || lastOpponentID != NpcID.PHANTOM_MUSPAH_12082;
	}

	private void handleHitpointsXpDrop(long diff) {
		double modifier = 1.0;

		if(CUSTOM_XP_MODIFIERS.containsKey(lastOpponentID))
		{
			modifier = CUSTOM_XP_MODIFIERS.get(lastOpponentID);
		}
		else if (XP_MODIFIERS_WITH_MODES.containsKey(lastOpponent))
		{
			modifier = XP_MODIFIERS_WITH_MODES.get(lastOpponent)[mode];
		}
		else if (TOA_XP_MODIFIERS.containsKey(lastOpponent))
		{
			modifier = TOA_XP_MODIFIERS.get(lastOpponent);
		}
		else
		{
			modifier = XP_MODIFIERS.getOrDefault(lastOpponent, 1.0);
		}

		hit = roundToPrecision(diff / 1.33 / modifier);
		if (shouldIncludeTotalHit()) {
			totalHit = roundToPrecision(totalHit + hit);
		}

		enableExpiryTimer();
	}

	@Subscribe
	public void onNpcChanged(NpcChanged event) {
		int oldNpcID = event.getOld().getId();
		int newNpcId = event.getNpc().getId();
		// Only pass NPC change information on if it's related to muspah change
		if (config.resetOnMuspahPhase() && MUSPAH_IDS.contains(oldNpcID) && oldNpcID == lastMuspahPhase) {
			lastOpponentID = newNpcId;
			lastOpponent = NPCWithXpBoost.getNpc(lastOpponentID);
			handleMuspahUpdate(newNpcId);
		}
	}

	@Subscribe
	public void onInteractingChanged(InteractingChanged event) {
		// Get current opponent to apply boss xp boost modifiers
		if (event.getSource() != client.getLocalPlayer()) {
			return;
		}

		Actor opponent = event.getTarget();

		if (!(opponent instanceof NPC)) {
			lastOpponent = null;
			lastOpponentID = -1;
			return;
		}

		NPC npc = (NPC) opponent;

		lastOpponentID = npc.getId();
		lastOpponent = NPCWithXpBoost.getNpc(lastOpponentID);

		if (config.resetOnMuspahPhase() && MUSPAH_IDS.contains(npc.getId())) {
			handleMuspahUpdate(npc.getId());
		}
	}

	private void handleMuspahUpdate(int muspahID) {
		// Muspah changed between Range or Melee phase
		if (muspahID == NpcID.PHANTOM_MUSPAH || muspahID == NpcID.PHANTOM_MUSPAH_12078) {
			if (lastMuspahPhase != muspahID) {
				resetTotalHit();
				lastMuspahPhase = muspahID;
			}
		// Muspah is in Shield or Last Stand phase
		} else if (muspahID == NpcID.PHANTOM_MUSPAH_12079 || muspahID == NpcID.PHANTOM_MUSPAH_12080) {
			lastMuspahPhase = -1;
		}
	}

	@Subscribe(
			priority = 1
	)
	public void onScriptPreFired(ScriptPreFired scriptPreFired) {
		if (scriptPreFired.getScriptId() == XPDROPS_SETDROPSIZE) {
			final int[] intStack = client.getIntStack();
			final int intStackSize = client.getIntStackSize();
			// This runs prior to the proc being invoked, so the arguments are still on the stack.
			// Grab the first argument to the script.
			final int widgetId = intStack[intStackSize - 4];
			processXpDrop(widgetId);
		}
	}

	@Subscribe
	public void onWidgetLoaded(WidgetLoaded widgetLoaded)
	{
		int toaWidgetID = 481;
		if(widgetLoaded.getGroupId() == toaWidgetID)
		{
			updateToaModifiers();
		}
	}

	private void processXpDrop(int widgetId)
	{
		final Widget xpdrop = client.getWidget(widgetId);
		final Widget[] children = xpdrop.getChildren();
		// child 0 is the xpdrop text, everything else are sprite ids for skills
		final Widget text = children[0];

		final int[] spriteIDs =
				Arrays.stream(children)
						.skip(1) // skip text
						.filter(Objects::nonNull)
						.mapToInt(Widget::getSpriteId)
						.toArray();

		replaceXpDrops(text, spriteIDs);
	}

	private void replaceXpDrops(Widget text, int[] spriteIDs) {
		if (!config.replaceXpDrops()) {
			return;
		}

		boolean hasOtherCombatDrop = false;

		for (int i = 0; i < spriteIDs.length; i++) {
			int spriteId = spriteIDs[i];
			if (spriteId == SpriteID.SKILL_HITPOINTS) {
				// If xp drop contains HITPOINTS sprite, replace it with the hit
				text.setText((int) Math.round(hit) + "");
				return;
			} else if (spriteId == SpriteID.SKILL_ATTACK || spriteId == SpriteID.SKILL_STRENGTH ||
					spriteId == SpriteID.SKILL_DEFENCE || spriteId == SpriteID.SKILL_RANGED ||
					spriteId == SpriteID.SKILL_MAGIC) {
				hasOtherCombatDrop = true;
			}
		}

		// If xp drop contains any other combat sprite, remove it
		if (hasOtherCombatDrop) {
			text.setText("");
		}
	}

	private void updateCustomXP()
	{
		CUSTOM_XP_MODIFIERS.clear();

		for (String customRaw : config.customBonusXP().split("\n")) {
			if (customRaw.trim().equals("")) continue;
			String[] split = customRaw.split(":");
			if (split.length < 2) continue;

			Integer customID;
			Double customXP;
			try {
				customID = Integer.parseInt(split[0].trim());
				customXP = Double.parseDouble(split[1].trim());
				if(customID > 0 && customXP > 0) {
					CUSTOM_XP_MODIFIERS.put(customID, customXP);
				}
			} catch (NumberFormatException e) {
			}
		}

	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event) {
		if (!config.displayTotalDamageOverlay()) {
			return;
		}
		if (event.getVarbitId() == Varbits.EQUIPPED_WEAPON_TYPE) {
			if (!config.resetOnWeaponChange()) {
				return;
			}

			final int currentEquippedWeaponTypeVarbit = client.getVarbitValue(Varbits.EQUIPPED_WEAPON_TYPE);

			if (currentEquippedWeaponTypeVarbit == equippedWeaponTypeVarbit) {
				return;
			}

			equippedWeaponTypeVarbit = currentEquippedWeaponTypeVarbit;

			resetTotalHit();
		}

		if ((event.getVarbitId() == Varbits.PRAYER_PROTECT_FROM_MAGIC
				|| event.getVarbitId() == Varbits.PRAYER_PROTECT_FROM_MISSILES
				|| event.getVarbitId() == Varbits.PRAYER_PROTECT_FROM_MELEE) && event.getValue() == 1) {
			if (!config.resetOnPrayerChange()) {
				return;
			}

			if (event.getVarbitId() == activeProtectionPrayerVarbit) {
				return;
			}

			activeProtectionPrayerVarbit = event.getVarbitId();

			resetTotalHit();
		}
	}

	private void resetTotalHit() {
		totalHit = 0;
	}

	private void updateToaModifiers()
	{
		// only update if inside the central ToA room, where all four path levels can be seen
		int[] regions = client.getMapRegions();
		if (regions == null || regions.length != 1) return;
		if (regions[0] != 14160) return;

		// Need raid level, path level, group size to calculate xp modifiers
		int parentWidget = 481;
		int scabarasWidget = 49;
		int hetWidget = 51;
		int apmekenWidget = 53;
		int crondisWidget = 55;

		int toaRaidLevel = client.getVarbitValue(Varbits.TOA_RAID_LEVEL);
		int toaGroupSize = 0;
		if (client.getVarbitValue(Varbits.TOA_MEMBER_0_HEALTH) > 0) toaGroupSize++;
		if (client.getVarbitValue(Varbits.TOA_MEMBER_1_HEALTH) > 0) toaGroupSize++;
		if (client.getVarbitValue(Varbits.TOA_MEMBER_2_HEALTH) > 0) toaGroupSize++;
		if (client.getVarbitValue(Varbits.TOA_MEMBER_3_HEALTH) > 0) toaGroupSize++;
		if (client.getVarbitValue(Varbits.TOA_MEMBER_4_HEALTH) > 0) toaGroupSize++;
		if (client.getVarbitValue(Varbits.TOA_MEMBER_5_HEALTH) > 0) toaGroupSize++;
		if (client.getVarbitValue(Varbits.TOA_MEMBER_6_HEALTH) > 0) toaGroupSize++;
		if (client.getVarbitValue(Varbits.TOA_MEMBER_7_HEALTH) > 0) toaGroupSize++;

		// failsafe?
		if (toaGroupSize == 0) toaGroupSize = 1;

		int toaScabarasLevel;
		int toaHetLevel;
		int toaApmekenLevel;
		int toaCrondisLevel;

		try
		{
			toaScabarasLevel = Integer.parseInt(client.getWidget(parentWidget, scabarasWidget).getText());
			toaHetLevel      = Integer.parseInt(client.getWidget(parentWidget, hetWidget     ).getText());
			toaApmekenLevel  = Integer.parseInt(client.getWidget(parentWidget, apmekenWidget ).getText());
			toaCrondisLevel  = Integer.parseInt(client.getWidget(parentWidget, crondisWidget ).getText());
		}
		catch (NullPointerException e)
		{
			return;
		}
		catch (NumberFormatException e)
		{
			return;
		}

		// HP multiplier from raid level
		// 5 raid levels is worth +2% health
		double raidMultiplier = 1 + 0.004*toaRaidLevel;

		// HP multiplier from group size
		// Group member 1 is worth 1.0, members 2-3 are worth 0.9, members 4-8 are worth 0.6
		double groupMultiplier = 1;
		if(toaGroupSize >= 2) groupMultiplier += 0.9;
		if(toaGroupSize >= 3) groupMultiplier += 0.9;
		if(toaGroupSize >= 4) groupMultiplier += (toaGroupSize - 3)*0.6;

		// HP multiplier from path level
		// Path level 1 is worth +8%; 2-6 are worth +5% each
		double scabarasMultiplier = 1 + (toaScabarasLevel > 0 ? 0.08 : 0) + (toaScabarasLevel > 1 ? 0.05*(toaScabarasLevel - 1) : 0);
		double hetMultiplier      = 1 + (     toaHetLevel > 0 ? 0.08 : 0) + (     toaHetLevel > 1 ? 0.05*(     toaHetLevel - 1) : 0);
		double apmekenMultiplier  = 1 + ( toaApmekenLevel > 0 ? 0.08 : 0) + ( toaApmekenLevel > 1 ? 0.05*( toaApmekenLevel - 1) : 0);
		double crondisMultiplier  = 1 + ( toaCrondisLevel > 0 ? 0.08 : 0) + ( toaCrondisLevel > 1 ? 0.05*( toaCrondisLevel - 1) : 0);

		// Universal multiplier (used by NPCs in puzzles such as monkeys/crocodiles, as well as Wardens)
		double commonMultiplier = raidMultiplier*groupMultiplier;

		// Path-specific multipliers (used by path bosses + adds)
		double kephriMultiplier = commonMultiplier*scabarasMultiplier;
		double akkhaMultiplier  = commonMultiplier*hetMultiplier;
		double babaMultiplier   = commonMultiplier*apmekenMultiplier;
		double zebakMultiplier  = commonMultiplier*crondisMultiplier;

		// Path of Scabaras
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.KEPHRI,          calculateToaModifier(NPCWithXpBoost.KEPHRI,          kephriMultiplier));
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.SOLDIER_SCARAB,  calculateToaModifier(NPCWithXpBoost.SOLDIER_SCARAB,  kephriMultiplier));
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.SPITTING_SCARAB, calculateToaModifier(NPCWithXpBoost.SPITTING_SCARAB, kephriMultiplier));
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.ARCANE_SCARAB,   calculateToaModifier(NPCWithXpBoost.ARCANE_SCARAB,   kephriMultiplier));
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.AGILE_SCARAB,    calculateToaModifier(NPCWithXpBoost.AGILE_SCARAB,    kephriMultiplier));
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.SCARAB_TOA,      calculateToaModifier(NPCWithXpBoost.SCARAB_TOA,      commonMultiplier));

		// Path of Het
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.AKKHA,         calculateToaModifier(NPCWithXpBoost.AKKHA,         akkhaMultiplier));
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.AKKHAS_SHADOW, calculateToaModifier(NPCWithXpBoost.AKKHAS_SHADOW, akkhaMultiplier));

		// Path of Apmeken
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.BABA,                 calculateToaModifier(NPCWithXpBoost.BABA,                 babaMultiplier));
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.BABOON_TOA,           1.0); // Baboons in Ba-ba fight do not seem to scale
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.BABOON_BRAWLER_SMALL, calculateToaModifier(NPCWithXpBoost.BABOON_BRAWLER_SMALL, commonMultiplier));
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.BABOON_BRAWLER_LARGE, calculateToaModifier(NPCWithXpBoost.BABOON_BRAWLER_LARGE, commonMultiplier));
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.BABOON_THROWER_SMALL, calculateToaModifier(NPCWithXpBoost.BABOON_THROWER_SMALL, commonMultiplier));
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.BABOON_THROWER_LARGE, calculateToaModifier(NPCWithXpBoost.BABOON_THROWER_LARGE, commonMultiplier));
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.BABOON_MAGE_SMALL,    calculateToaModifier(NPCWithXpBoost.BABOON_MAGE_SMALL,    commonMultiplier));
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.BABOON_MAGE_LARGE,    calculateToaModifier(NPCWithXpBoost.BABOON_MAGE_LARGE,    commonMultiplier));
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.BABOON_SHAMAN,        calculateToaModifier(NPCWithXpBoost.BABOON_SHAMAN,        commonMultiplier));
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.CURSED_BABOON,        calculateToaModifier(NPCWithXpBoost.CURSED_BABOON,        commonMultiplier));
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.VOLATILE_BABOON,      calculateToaModifier(NPCWithXpBoost.VOLATILE_BABOON,      commonMultiplier));
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.BABOON_THRALL,        calculateToaModifier(NPCWithXpBoost.BABOON_THRALL,        commonMultiplier));

		// Path of Crondis
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.ZEBAK,         calculateToaModifier(NPCWithXpBoost.ZEBAK,         zebakMultiplier));
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.CROCODILE_TOA, calculateToaModifier(NPCWithXpBoost.CROCODILE_TOA, commonMultiplier));

		// Wardens
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.OBELISK,            calculateToaModifier(NPCWithXpBoost.OBELISK,            commonMultiplier));
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.CORE,               1.0); // No bonus XP on the core
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.ELIDINIS_WARDEN_P2, calculateToaModifier(NPCWithXpBoost.ELIDINIS_WARDEN_P2, commonMultiplier));
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.TUMEKENS_WARDEN_P2, calculateToaModifier(NPCWithXpBoost.TUMEKENS_WARDEN_P2, commonMultiplier));
		TOA_XP_MODIFIERS.put(NPCWithXpBoost.WARDENS_P3,         calculateToaModifier(NPCWithXpBoost.WARDENS_P3,         commonMultiplier));
	}

	private double calculateToaModifier(NPCWithXpBoost npc, double multiplier)
	{
		Integer[] baseStats = TOA_NPC_BASE_STATS.get(npc);
		int attack        = baseStats[1];
		int strength      = baseStats[2];
		int defense       = baseStats[3];
		int stabDefense   = baseStats[4];
		int slashDefense  = baseStats[5];
		int crushDefense  = baseStats[6];
		int attackBonus   = baseStats[7];
		int strengthBonus = baseStats[8];

		// HP is the only stat affected by the raid multiplier (and is then rounded to the nearest 10)
		double rawHP = ((double)baseStats[0])*multiplier;
		int hp = (int) Math.round(rawHP/10)*10;

		// ToA bonus XP multiplier works in multiples of 0.025 (call them bands)
		// First step is to figure out which band an enemy is scaled to:
		//     band = floor(M*(D+A+S)/5120), where:
		//         M is the average of HP/attack/strength/defense, floored
		//         D is the average of stab/slash/crush defense, floored
		//         A is the attack bonus
		//         S is the strength bonus
		// Then the final bonus XP bonus is:
		//     bonusXP = 1 + band*0.025
		int M = (hp + attack + strength + defense)/4;
		int D = (stabDefense + slashDefense + crushDefense)/3;
		int MDAS = M*(D + attackBonus + strengthBonus);
		// defensive bonuses can be negative; if D + A + S < 0 then it's set to 0 instead
		if(MDAS < 0) MDAS = 0;
		int band = MDAS/5120;
		return  1 + band*0.025;
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		if (expiryTimer != null && config.expiry() != 0)
		{
			Duration timeSinceUpdate = Duration.between(expiryTimer, Instant.now());
			Duration expiryTimeout = Duration.ofSeconds(config.expiry());

			if (timeSinceUpdate.compareTo(expiryTimeout) >= 0)
			{
				expireOverlay();
			}
		}
	}

	private void expireOverlay()
	{
		overlayExpired = true;
		if (config.clearTotalOnOverlayExpiry()) {
			resetTotalHit();
		}
	}

	private void enableExpiryTimer()
	{
		expiryTimer = Instant.now();
		overlayExpired = false;
	}

	private double roundToPrecision(double hit)
	{
		int scale = (int) Math.pow(10, config.precision());
		return (double) Math.round(hit * scale) / scale;
	}

}

package com.geeckon.instantdamagecalculator;

import com.google.common.collect.Sets;
import net.runelite.api.NpcID;

import java.util.Set;

public enum NPCWithXpBoost {
    //Bosses and boss minions
    CERBERUS(NpcID.CERBERUS, NpcID.CERBERUS_5863, NpcID.CERBERUS_5866),
    ABYSSAL_SIRE(NpcID.ABYSSAL_SIRE, NpcID.ABYSSAL_SIRE_5887, NpcID.ABYSSAL_SIRE_5888, NpcID.ABYSSAL_SIRE_5889, NpcID.ABYSSAL_SIRE_5890, NpcID.ABYSSAL_SIRE_5891, NpcID.ABYSSAL_SIRE_5908),
    ALCHEMICAL_HYDRA(NpcID.ALCHEMICAL_HYDRA, NpcID.ALCHEMICAL_HYDRA_8616, NpcID.ALCHEMICAL_HYDRA_8617, NpcID.ALCHEMICAL_HYDRA_8618, NpcID.ALCHEMICAL_HYDRA_8619, NpcID.ALCHEMICAL_HYDRA_8620, NpcID.ALCHEMICAL_HYDRA_8621, NpcID.ALCHEMICAL_HYDRA_8622, NpcID.ALCHEMICAL_HYDRA_8634),
    CHAOS_FANATIC(NpcID.CHAOS_FANATIC),
    CRAZY_ARCHAEOLOGIST(NpcID.CRAZY_ARCHAEOLOGIST),
    SCORPIA(NpcID.SCORPIA),
    KING_BLACK_DRAGON(NpcID.KING_BLACK_DRAGON, NpcID.KING_BLACK_DRAGON_2642, NpcID.KING_BLACK_DRAGON_6502),
    CHAOS_ELEMENTAL(NpcID.CHAOS_ELEMENTAL, NpcID.CHAOS_ELEMENTAL_6505),
    VETION(NpcID.VETION, NpcID.VETION_6612),
    SKELETON_HELLHOUND(NpcID.SKELETON_HELLHOUND, NpcID.SKELETON_HELLHOUND_6613),
    GREATER_SKELETON_HELLHOUND(NpcID.GREATER_SKELETON_HELLHOUND),
    VENENATIS(NpcID.VENENATIS, NpcID.VENENATIS_6610),
    CALLISTO(NpcID.CALLISTO, NpcID.CALLISTO_6609),
    OBOR(NpcID.OBOR),
    BRYOPHYTA(NpcID.BRYOPHYTA),
    THE_MIMIC(NpcID.THE_MIMIC, NpcID.THE_MIMIC_8633),
    THIRD_AGE_WARRIOR(NpcID.THIRD_AGE_WARRIOR),
    SKOTIZO(NpcID.SKOTIZO),
    TZKAL_ZUK(NpcID.TZKALZUK),
    JAL_AK(NpcID.JALAK),
    JAL_IMKOT(NpcID.JALIMKOT),
    RABBIT(NpcID.RABBIT_9118),
    AHRIM_THE_BLIGHTED(NpcID.AHRIM_THE_BLIGHTED),
    DHAROK_THE_WRETCHED(NpcID.DHAROK_THE_WRETCHED),
    GUTHAN_THE_INFESTED(NpcID.GUTHAN_THE_INFESTED),
    TORAG_THE_CORRUPTED(NpcID.TORAG_THE_CORRUPTED),
    VERAC_THE_DEFILED(NpcID.VERAC_THE_DEFILED),
    GIANT_MOLE(NpcID.GIANT_MOLE, NpcID.GIANT_MOLE_6499),
    DERANGED_ARCHAEOLOGIST(NpcID.DERANGED_ARCHAEOLOGIST),
    DAGANNOTH_REX(NpcID.DAGANNOTH_REX, NpcID.DAGANNOTH_REX_6498),
    DAGANNOTH_PRIME(NpcID.DAGANNOTH_PRIME, NpcID.DAGANNOTH_PRIME_6497),
    SARACHNIS(NpcID.SARACHNIS),
    SPAWN_OF_SARACHNIS(NpcID.SPAWN_OF_SARACHNIS),
    KALPHITE_QUEEN_CRAWLING(NpcID.KALPHITE_QUEEN, NpcID.KALPHITE_QUEEN_963, NpcID.KALPHITE_QUEEN_4303, NpcID.KALPHITE_QUEEN_6500),
    KALPHITE_QUEEN_AIRBORNE(NpcID.KALPHITE_QUEEN_965, NpcID.KALPHITE_QUEEN_4304, NpcID.KALPHITE_QUEEN_6501),
    KREE_ARRA(NpcID.KREEARRA, NpcID.KREEARRA_6492),
    WINGMAN_SKREE(NpcID.WINGMAN_SKREE),
    COMMANDER_ZILYANA(NpcID.COMMANDER_ZILYANA, NpcID.COMMANDER_ZILYANA_6493),
    STARLIGHT(NpcID.STARLIGHT),
    GENERAL_GRAARDOR(NpcID.GENERAL_GRAARDOR, NpcID.GENERAL_GRAARDOR_6494),
    KRIL_TSUTSAROTH(NpcID.KRIL_TSUTSAROTH, NpcID.KRIL_TSUTSAROTH_6495),
    SNAKELING(NpcID.SNAKELING),
    PHANTOM_MUSPAH(NpcID.PHANTOM_MUSPAH, NpcID.PHANTOM_MUSPAH_12078, NpcID.PHANTOM_MUSPAH_12079, NpcID.PHANTOM_MUSPAH_12080),
    CORPOREAL_BEAST(NpcID.CORPOREAL_BEAST),
    NEX(NpcID.NEX, NpcID.NEX_11279, NpcID.NEX_11280, NpcID.NEX_11281, NpcID.NEX_11282),
    UMBRA(NpcID.UMBRA),
    CRUOR(NpcID.CRUOR),
    GLACIES(NpcID.GLACIES),
    DUKE_SUCELLUS(NpcID.DUKE_SUCELLUS_12191),
    VARDORVIS(NpcID.VARDORVIS),
    LEVIATHAN(NpcID.THE_LEVIATHAN),

    //Slayer tasks (Krystilia, Duradel, Nieve, Konar) and related Npcs
    BANDIT_130(NpcID.BANDIT_6605),
    BLACK_DRAGON(NpcID.BLACK_DRAGON, NpcID.BLACK_DRAGON_253, NpcID.BLACK_DRAGON_254, NpcID.BLACK_DRAGON_255, NpcID.BLACK_DRAGON_256, NpcID.BLACK_DRAGON_257, NpcID.BLACK_DRAGON_258, NpcID.BLACK_DRAGON_259, NpcID.BLACK_DRAGON_8084, NpcID.BLACK_DRAGON_8085, NpcID.BLACK_DRAGON_7861, NpcID.BLACK_DRAGON_7862, NpcID.BLACK_DRAGON_7863),
    BRUTAL_BLACK_DRAGON(NpcID.BRUTAL_BLACK_DRAGON, NpcID.BRUTAL_BLACK_DRAGON_8092, NpcID.BRUTAL_BLACK_DRAGON_8093),
    DARK_WARRIOR_135(NpcID.DARK_WARRIOR_6606),
    ENT_WILDERNESS(NpcID.ENT),
    ENT_WC_GUILD(NpcID.ENT_7234),
    FIRE_GIANT_104_109(NpcID.FIRE_GIANT_7252, NpcID.FIRE_GIANT_7251),
    BRUTAL_GREEN_DRAGON(NpcID.BRUTAL_GREEN_DRAGON),
    LAVA_DRAGON(NpcID.LAVA_DRAGON),
    MOSS_GIANT_84(NpcID.MOSS_GIANT_8736),
    GREATER_NECHRYAEL(NpcID.GREATER_NECHRYAEL, NpcID.GREATER_NECHRYAEL_11240),
    REVENANT_HOBGOBLIN(NpcID.REVENANT_HOBGOBLIN),
    REVENANT_CYCLOPS(NpcID.REVENANT_CYCLOPS),
    REVENANT_HELLHOUND(NpcID.REVENANT_HELLHOUND),
    REVENANT_DEMON(NpcID.REVENANT_DEMON),
    REVENANT_ORK(NpcID.REVENANT_ORK),
    REVENANT_DARK_BEAST(NpcID.REVENANT_DARK_BEAST),
    REVENANT_KNIGHT(NpcID.REVENANT_KNIGHT),
    REVENANT_DRAGON(NpcID.REVENANT_DRAGON),
    REVENANT_MALEDICTUS(NpcID.REVENANT_MALEDICTUS),
    SPIRITUAL_WARRIOR_BANDOS(NpcID.SPIRITUAL_WARRIOR_2243),
    DEVIANT_SPECTRE(NpcID.DEVIANT_SPECTRE),
    ADAMANT_DRAGON(NpcID.ADAMANT_DRAGON, NpcID.ADAMANT_DRAGON_8090),
    DEMONIC_GORILLA(NpcID.DEMONIC_GORILLA, NpcID.DEMONIC_GORILLA_7145, NpcID.DEMONIC_GORILLA_7146, NpcID.DEMONIC_GORILLA_7147, NpcID.DEMONIC_GORILLA_7148, NpcID.DEMONIC_GORILLA_7149, NpcID.DEMONIC_GORILLA_7152),
    TORTURED_GORILLA(NpcID.TORTURED_GORILLA, NpcID.TORTURED_GORILLA_7096, NpcID.TORTURED_GORILLA_7097, NpcID.TORTURED_GORILLA_7150, NpcID.TORTURED_GORILLA_7151, NpcID.TORTURED_GORILLA_7153),
    BLUE_DRAGON(NpcID.BLUE_DRAGON, NpcID.BLUE_DRAGON_266, NpcID.BLUE_DRAGON_267, NpcID.BLUE_DRAGON_268, NpcID.BLUE_DRAGON_269, NpcID.BLUE_DRAGON_5878, NpcID.BLUE_DRAGON_5879, NpcID.BLUE_DRAGON_5880, NpcID.BLUE_DRAGON_5881, NpcID.BLUE_DRAGON_5882),
    BRUTAL_BLUE_DRAGON(NpcID.BRUTAL_BLUE_DRAGON),
    DARK_BEAST(NpcID.DARK_BEAST, NpcID.DARK_BEAST_7250),
    DRAKE(NpcID.DRAKE_8612, NpcID.DRAKE_8613),
    ELVES(NpcID.IORWERTH_WARRIOR, NpcID.IORWERTH_WARRIOR_8759, NpcID.IORWERTH_WARRIOR_9502, NpcID.IORWERTH_WARRIOR_9503,
            NpcID.ELF_WARRIOR, NpcID.ELF_WARRIOR_5294,
            NpcID.MOURNER_9017,
            NpcID.GUARD_9182, NpcID.GUARD_9183, NpcID.GUARD_9184, NpcID.GUARD_9185, NpcID.GUARD_9186, NpcID.GUARD_9187, NpcID.GUARD_9188, NpcID.GUARD_9189, NpcID.GUARD_9190, NpcID.GUARD_9191),
    SPITTING_WYVERN(NpcID.SPITTING_WYVERN),
    TALONED_WYVERN(NpcID.TALONED_WYVERN),
    LONGTAILED_WYVERN(NpcID.LONGTAILED_WYVERN),
    ANCIENT_WYVERN(NpcID.ANCIENT_WYVERN),
    IRON_DRAGON(NpcID.IRON_DRAGON, NpcID.IRON_DRAGON_273, NpcID.IRON_DRAGON_8080, NpcID.IRON_DRAGON_7254),
    LIZARDMAN_SHAMAN_OVERWORLD(NpcID.LIZARDMAN_SHAMAN, NpcID.LIZARDMAN_SHAMAN_6767, NpcID.LIZARDMAN_SHAMAN_7744, NpcID.LIZARDMAN_SHAMAN_7745, NpcID.LIZARDMAN_SHAMAN_8565),
    MITHRIL_DRAGON(NpcID.MITHRIL_DRAGON, NpcID.MITHRIL_DRAGON_8088, NpcID.MITHRIL_DRAGON_8089),
    RED_DRAGON(NpcID.RED_DRAGON, NpcID.RED_DRAGON_248, NpcID.RED_DRAGON_8075, NpcID.RED_DRAGON_8078, NpcID.RED_DRAGON_8079, NpcID.RED_DRAGON_249, NpcID.RED_DRAGON_250, NpcID.RED_DRAGON_251),
    BRUTAL_RED_DRAGON(NpcID.BRUTAL_RED_DRAGON, NpcID.BRUTAL_RED_DRAGON_8087),
    RUNE_DRAGON(NpcID.RUNE_DRAGON_8031, NpcID.RUNE_DRAGON_8091),
    SKELETAL_WYVERN(NpcID.SKELETAL_WYVERN, NpcID.SKELETAL_WYVERN_466, NpcID.SKELETAL_WYVERN_467, NpcID.SKELETAL_WYVERN_468),
    STEEL_DRAGON(NpcID.STEEL_DRAGON_274, NpcID.STEEL_DRAGON_275, NpcID.STEEL_DRAGON_7255),
    SUQAH(NpcID.SUQAH, NpcID.SUQAH_788, NpcID.SUQAH_789, NpcID.SUQAH_790, NpcID.SUQAH_791, NpcID.SUQAH_792, NpcID.SUQAH_793),
    BRONZE_DRAGON(NpcID.BRONZE_DRAGON,NpcID.BRONZE_DRAGON_271, NpcID.BRONZE_DRAGON_7253),
    ICE_TROLLS(NpcID.ICE_TROLL_RUNT, NpcID.FRENZIED_ICE_TROLL_RUNT, NpcID.ICE_TROLL_RUNT_5828,
            NpcID.ICE_TROLL_MALE, NpcID.FRENZIED_ICE_TROLL_MALE, NpcID.ICE_TROLL_MALE_5829,
            NpcID.ICE_TROLL_FEMALE, NpcID.FRENZIED_ICE_TROLL_FEMALE, NpcID.ICE_TROLL_FEMALE_5830,
            NpcID.ICE_TROLL_GRUNT, NpcID.ICE_TROLL_GRUNT_5831, NpcID.FRENZIED_ICE_TROLL_GRUNT),
    TROLL_GENERAL(NpcID.TROLL_GENERAL, NpcID.TROLL_GENERAL_4121, NpcID.TROLL_GENERAL_4122),
    WYRM(NpcID.WYRM, NpcID.WYRM_8611),
    LOCUST_RIDER(NpcID.LOCUST_RIDER, NpcID.LOCUST_RIDER_796),
    SCARAB_MAGE(NpcID.SCARAB_MAGE),
    HYDRA(NpcID.HYDRA),

    //Superior Slayer monsters
    REPUGNANT_SPECTRE(NpcID.REPUGNANT_SPECTRE),
    BASILISK_SENTINEL(NpcID.BASILISK_SENTINEL),
    KING_KURASK(NpcID.KING_KURASK),
    MARBLE_GARGOYLE(NpcID.MARBLE_GARGOYLE, NpcID.MARBLE_GARGOYLE_7408),
    NECHRYACH(NpcID.NECHRYARCH),
    GREATER_ABYSSAL_DEMON(NpcID.GREATER_ABYSSAL_DEMON),
    NIGHT_BEAST(NpcID.NIGHT_BEAST),

    //NMZ
    CORRUPT_LIZARDMAN_NMZ(NpcID.CORRUPT_LIZARDMAN_HARD),
    ELVARG_NMZ(NpcID.ELVARG_HARD),
    MOSS_GUARDIAN_NMZ(NpcID.MOSS_GUARDIAN_6386),
    MOSS_GUARDIAN_HARD_NMZ(NpcID.MOSS_GUARDIAN_HARD),
    SLAGILITH_NMZ(NpcID.SLAGILITH, NpcID.SLAGILITH_1364,NpcID.SLAGILITH_6385),
    SLAGILITH_HARD_NMZ(NpcID.SLAGILITH_HARD),
    DAGANNOTH_MOTHER_NMZ(NpcID.DAGANNOTH_MOTHER, NpcID.DAGANNOTH_MOTHER_981, NpcID.DAGANNOTH_MOTHER_982, NpcID.DAGANNOTH_MOTHER_983, NpcID.DAGANNOTH_MOTHER_984, NpcID.DAGANNOTH_MOTHER_985, NpcID.DAGANNOTH_MOTHER_986, NpcID.DAGANNOTH_MOTHER_987, NpcID.DAGANNOTH_MOTHER_988, NpcID.DAGANNOTH_MOTHER_6361, NpcID.DAGANNOTH_MOTHER_6362, NpcID.DAGANNOTH_MOTHER_6363, NpcID.DAGANNOTH_MOTHER_6364, NpcID.DAGANNOTH_MOTHER_6365, NpcID.DAGANNOTH_MOTHER_6366),
    DAGANNOTH_MOTHER_HARD_NMZ(NpcID.DAGANNOTH_MOTHER_HARD, NpcID.DAGANNOTH_MOTHER_HARD_6301, NpcID.DAGANNOTH_MOTHER_HARD_6302, NpcID.DAGANNOTH_MOTHER_HARD_6303, NpcID.DAGANNOTH_MOTHER_HARD_6304, NpcID.DAGANNOTH_MOTHER_HARD_6305),
    DAD_NMZ(NpcID.DAD, NpcID.DAD_6391),
    DAD_HARD_NMZ(NpcID.DAD_HARD),
    ARRG_NMZ(NpcID.ARRG_6392),
    ARRG_HARD_NMZ(NpcID.ARRG_HARD),
    BLACK_KNIGHT_TITAN_NMZ(NpcID.BLACK_KNIGHT_TITAN_6360),
    BLACK_KNIGHT_TITAN_HARD_NMZ(NpcID.BLACK_KNIGHT_TITAN_HARD),
    ICE_TROLL_KING_NMZ(NpcID.ICE_TROLL_KING, NpcID.ICE_TROLL_KING_6356),
    ICE_TROLL_KING_HARD_NMZ(NpcID.ICE_TROLL_KING_HARD),
    GLOD_NMZ(NpcID.GLOD, NpcID.GLOD_6358),
    GLOD_HARD_NMZ(NpcID.GLOD_HARD),
    EVIL_CHICKEN_NMZ(NpcID.EVIL_CHICKEN, NpcID.EVIL_CHICKEN_6367, NpcID.EVIL_CHICKEN_HARD),
    AGRITHNANA_NMZ(NpcID.AGRITHNANA_6369),
    AGRITHNANA_HARD_NMZ(NpcID.AGRITHNANA_HARD),
    FLAMBEED_NMZ(NpcID.FLAMBEED, NpcID.FLAMBEED_6370),
    FLAMBEED_HARD_NMZ(NpcID.FLAMBEED_HARD),
    KARAMEL_NMZ(NpcID.KARAMEL, NpcID.KARAMEL_6371, NpcID.KARAMEL_HARD),
    DESSOURT_NMZ(NpcID.DESSOURT, NpcID.DESSOURT_6372),
    DESSOURT_HARD_NMZ(NpcID.DESSOURT_HARD),
    GELATINNOTH_MOTHER_NMZ(NpcID.GELATINNOTH_MOTHER, NpcID.GELATINNOTH_MOTHER_4885, NpcID.GELATINNOTH_MOTHER_4886, NpcID.GELATINNOTH_MOTHER_4887, NpcID.GELATINNOTH_MOTHER_4888, NpcID.GELATINNOTH_MOTHER_4889, NpcID.GELATINNOTH_MOTHER_6373, NpcID.GELATINNOTH_MOTHER_6374, NpcID.GELATINNOTH_MOTHER_6375, NpcID.GELATINNOTH_MOTHER_6376, NpcID.GELATINNOTH_MOTHER_6377, NpcID.GELATINNOTH_MOTHER_6378),
    GELATINNOTH_MOTHER_HARD_NMZ(NpcID.GELATINNOTH_MOTHER_HARD, NpcID.GELATINNOTH_MOTHER_HARD_6313, NpcID.GELATINNOTH_MOTHER_HARD_6314, NpcID.GELATINNOTH_MOTHER_HARD_6315, NpcID.GELATINNOTH_MOTHER_HARD_6316, NpcID.GELATINNOTH_MOTHER_HARD_6317),
    CHRONOZON_NMZ(NpcID.CHRONOZON, NpcID.CHRONOZON_6354, NpcID.CHRONOZON_HARD),
    DESSOUS_NMZ(NpcID.DESSOUS, NpcID.DESSOUS_3460, NpcID.DESSOUS_6344),
    DESSOUS_HARD_NMZ(NpcID.DESSOUS_HARD),
    DAMIS_FIRST_NMZ(NpcID.DAMIS, NpcID.DAMIS_6346),
    DAMIS_SECOND_NMZ(NpcID.DAMIS_683, NpcID.DAMIS_6347),
    DAMIS_FIRST_HARD_NMZ(NpcID.DAMIS_HARD),
    DAMIS_SECOND_HARD_NMZ(NpcID.DAMIS_HARD_1135),
    FAREED_NMZ(NpcID.FAREED, NpcID.FAREED_6348),
    FAREED_HARD_NMZ(NpcID.FAREED_HARD),
    KAMIL_NMZ(NpcID.KAMIL, NpcID.KAMIL_6345),
    KAMIL_HARD_NMZ(NpcID.KAMIL_HARD),
    BARRELCHEST_NMZ(NpcID.BARRELCHEST, NpcID.BARRELCHEST_6342),
    BARRELCHEST_HARD_NMZ(NpcID.BARRELCHEST_HARD),
    GIANT_SCARAB_NMZ(NpcID.GIANT_SCARAB, NpcID.GIANT_SCARAB_798, NpcID.GIANT_SCARAB_6343),
    GIANT_SCARAB_HARD_NMZ(NpcID.GIANT_SCARAB_HARD),
    JUNGLE_DEMON_NMZ(NpcID.JUNGLE_DEMON, NpcID.JUNGLE_DEMON_6382),
    JUNGLE_DEMON_HARD_NMZ(NpcID.JUNGLE_DEMON_HARD),
    ARIANWYN_NMZ(NpcID.ARIANWYN_8865, NpcID.ARIANWYN_9248, NpcID.ARIANWYN_HARD),
    ESSYLLT_NMZ(NpcID.ESSYLLT_8847, NpcID.ESSYLLT_8871, NpcID.ESSYLLT_8872, NpcID.ESSYLLT_8950, NpcID.ESSYLLT_9016),
    ESSYLLT_HARD_NMZ(NpcID.ESSYLLT_HARD, NpcID.ESSYLLT_9249),

    //Waterbirth npcs
    DAGANNOTH_WATERBIRTH_MELEE(NpcID.DAGANNOTH_3185, NpcID.DAGANNOTH_5943),
    GIANT_ROCK_CRAB(NpcID.GIANT_ROCK_CRAB, NpcID.GIANT_ROCK_CRAB_5940),
    WALLASALKI(NpcID.WALLASALKI, NpcID.WALLASALKI_5939),
    ROCK_LOBSTER(NpcID.ROCK_LOBSTER),

    //MA2 bosses and CA bosses
    JUSTICIAR_ZACHARIAH(NpcID.JUSTICIAR_ZACHARIAH, NpcID.JUSTICIAR_ZACHARIAH_7858),
    DERWEN(NpcID.DERWEN, NpcID.DERWEN_7859),
    PORAZDIR(NpcID.PORAZDIR, NpcID.PORAZDIR_7860),
    GALVEK(NpcID.GALVEK, NpcID.GALVEK_8095, NpcID.GALVEK_8177, NpcID.GALVEK_8097, NpcID.GALVEK_8096, NpcID.GALVEK_8098, NpcID.GALVEK_8178, NpcID.GALVEK_8179),
    FRAGMENT_OF_SEREN(NpcID.FRAGMENT_OF_SEREN, NpcID.FRAGMENT_OF_SEREN_8918, NpcID.FRAGMENT_OF_SEREN_8919, NpcID.FRAGMENT_OF_SEREN_8920),
    GLOUGH(NpcID.GLOUGH_7101, NpcID.GLOUGH_7102, NpcID.GLOUGH_7103),

    //Monkeys
    MONKEY_GUARD(NpcID.MONKEY_GUARD_5275, NpcID.MONKEY_GUARD_5276),
    MONKEY_SKELETON(NpcID.SKELETON_5237),

    //Clue Npcs
    DOUBLE_AGENT_108(NpcID.DOUBLE_AGENT_1778),
    DOUBLE_AGENT_141(NpcID.DOUBLE_AGENT_7312),
    SARADOMIN_WIZARD(NpcID.SARADOMIN_WIZARD),
    ANCIENT_WIZARD_MELEE(NpcID.ANCIENT_WIZARD_7309),

    //Misc
    UNDEAD_DRUID(NpcID.UNDEAD_DRUID),
    FEROCIOUS_BARBARIAN_SPIRIT(NpcID.FEROCIOUS_BARBARIAN_SPIRIT),

    //CoX
    TEKTON(NpcID.TEKTON, NpcID.TEKTON_7541, NpcID.TEKTON_7542, NpcID.TEKTON_7545),
    TEKTON_ENRAGED(NpcID.TEKTON_ENRAGED, NpcID.TEKTON_ENRAGED_7544),
    ICE_DEMON(NpcID.ICE_DEMON, NpcID.ICE_DEMON_7585),
    LIZARDMAN_SHAMAN(NpcID.LIZARDMAN_SHAMAN, NpcID.LIZARDMAN_SHAMAN_6767, NpcID.LIZARDMAN_SHAMAN_7573, NpcID.LIZARDMAN_SHAMAN_7574, NpcID.LIZARDMAN_SHAMAN_7744, NpcID.LIZARDMAN_SHAMAN_7745, NpcID.LIZARDMAN_SHAMAN_8565),
    VANGUARD_MELEE(NpcID.VANGUARD_7527),
    VANGUARD_RANGED(NpcID.VANGUARD_7528),
    VANGUARD_MAGIC(NpcID.VANGUARD_7529),
    GUARDIAN(NpcID.GUARDIAN, NpcID.GUARDIAN_7570, NpcID.GUARDIAN_7571, NpcID.GUARDIAN_7572),
    VASA_NISTIRIO(NpcID.VASA_NISTIRIO, NpcID.VASA_NISTIRIO_7567),
    VASA_CRYSTALS(NpcID.GLOWING_CRYSTAL),
    SKELETAL_MYSTIC(NpcID.SKELETAL_MYSTIC, NpcID.SKELETAL_MYSTIC_7605, NpcID.SKELETAL_MYSTIC_7606),
    MUTTADILE_SMALL(NpcID.MUTTADILE_7562),
    MUTTADILE_LARGE(NpcID.MUTTADILE_7563),

    //ToB
    PESTILENT_BLOAT(NpcID.PESTILENT_BLOAT, NpcID.PESTILENT_BLOAT_10813, NpcID.PESTILENT_BLOAT_10812),
    NYLOCAS_VASILIAS(NpcID.NYLOCAS_VASILIAS, NpcID.NYLOCAS_VASILIAS_8355, NpcID.NYLOCAS_VASILIAS_8356, NpcID.NYLOCAS_VASILIAS_8357, NpcID.NYLOCAS_VASILIAS_10807, NpcID.NYLOCAS_VASILIAS_10808, NpcID.NYLOCAS_VASILIAS_10809, NpcID.NYLOCAS_VASILIAS_10810, NpcID.NYLOCAS_VASILIAS_10786, NpcID.NYLOCAS_VASILIAS_10787, NpcID.NYLOCAS_VASILIAS_10788, NpcID.NYLOCAS_VASILIAS_10789),
    SOTETSEG(NpcID.SOTETSEG, NpcID.SOTETSEG_8388, NpcID.SOTETSEG_10867, NpcID.SOTETSEG_10868, NpcID.SOTETSEG_10864, NpcID.SOTETSEG_10865),
    VERZIK_VITUR_P1(NpcID.VERZIK_VITUR, NpcID.VERZIK_VITUR_8370, NpcID.VERZIK_VITUR_10848, NpcID.VERZIK_VITUR_10830, NpcID.VERZIK_VITUR_10831),
    VERZIK_VITUR_P2(NpcID.VERZIK_VITUR_8371, NpcID.VERZIK_VITUR_8372, NpcID.VERZIK_VITUR_10849, NpcID.VERZIK_VITUR_10850, NpcID.VERZIK_VITUR_10832, NpcID.VERZIK_VITUR_10833),
    VERZIK_VITUR_P3(NpcID.VERZIK_VITUR_8373, NpcID.VERZIK_VITUR_8374, NpcID.VERZIK_VITUR_8375, NpcID.VERZIK_VITUR_10851, NpcID.VERZIK_VITUR_10852, NpcID.VERZIK_VITUR_10853, NpcID.VERZIK_VITUR_10834, NpcID.VERZIK_VITUR_10835, NpcID.VERZIK_VITUR_10836),

    //ToA
    KEPHRI(NpcID.KEPHRI, NpcID.KEPHRI_11720, NpcID.KEPHRI_11721, NpcID.KEPHRI_11722),
    SOLDIER_SCARAB(NpcID.SOLDIER_SCARAB),
    SPITTING_SCARAB(NpcID.SPITTING_SCARAB),
    ARCANE_SCARAB(NpcID.ARCANE_SCARAB),
    AGILE_SCARAB(NpcID.AGILE_SCARAB),
    SCARAB_TOA(NpcID.SCARAB),
    AKKHA(NpcID.AKKHA, NpcID.AKKHA_11790, NpcID.AKKHA_11791, NpcID.AKKHA_11792, NpcID.AKKHA_11793, NpcID.AKKHA_11794, NpcID.AKKHA_11795, NpcID.AKKHA_11796),
    AKKHAS_SHADOW(NpcID.AKKHAS_SHADOW, NpcID.AKKHAS_SHADOW_11798, NpcID.AKKHAS_SHADOW_11799),
    BABA(NpcID.BABA, NpcID.BABA_11779, NpcID.BABA_11780),
    BABOON_TOA(NpcID.BABOON),
    BABOON_BRAWLER_SMALL(NpcID.BABOON_BRAWLER),
    BABOON_BRAWLER_LARGE(NpcID.BABOON_BRAWLER),
    BABOON_THROWER_SMALL(NpcID.BABOON_THROWER),
    BABOON_THROWER_LARGE(NpcID.BABOON_THROWER_11713),
    BABOON_MAGE_SMALL(NpcID.BABOON_MAGE),
    BABOON_MAGE_LARGE(NpcID.BABOON_MAGE_11714),
    BABOON_SHAMAN(NpcID.BABOON_SHAMAN),
    CURSED_BABOON(NpcID.CURSED_BABOON),
    VOLATILE_BABOON(NpcID.VOLATILE_BABOON),
    BABOON_THRALL(NpcID.BABOON_THRALL),
    ZEBAK(NpcID.ZEBAK, NpcID.ZEBAK_11730, NpcID.ZEBAK_11732, NpcID.ZEBAK_11733),
    CROCODILE_TOA(NpcID.CROCODILE_11705),
    OBELISK(NpcID.OBELISK_11751),
    CORE(NpcID.CORE_11771),
    ELIDINIS_WARDEN_P2(NpcID.ELIDINIS_WARDEN_11753, NpcID.ELIDINIS_WARDEN_11754),
    TUMEKENS_WARDEN_P2(NpcID.TUMEKENS_WARDEN_11756, NpcID.TUMEKENS_WARDEN_11757),
    WARDENS_P3(NpcID.ELIDINIS_WARDEN_11761, NpcID.TUMEKENS_WARDEN_11762);




    private final Set<Integer> ids;

    NPCWithXpBoost(Integer... ids)
    {
        this.ids = Sets.newHashSet(ids);
    }

    static NPCWithXpBoost getNpc(int id)
    {
        for (NPCWithXpBoost npc : values())
        {
            if (npc.ids.contains(id))
            {
                return npc;
            }
        }

        return null;
    }
    
}

package com.geeckon.instantdamagecalculator;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.awt.*;

import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

class InstantDamageCalculatorOverlay extends OverlayPanel
{
	private final Client client;
	private final InstantDamageCalculatorConfig config;
	private final InstantDamageCalculatorPlugin plugin;

	@Inject
	private InstantDamageCalculatorOverlay(Client client, InstantDamageCalculatorConfig config, InstantDamageCalculatorPlugin plugin)
	{
		super(plugin);
		this.plugin = plugin;
		this.client = client;
		this.config = config;
		setPosition(OverlayPosition.TOP_RIGHT);
		setPriority(OverlayPriority.MED);
		getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Instant damage overlay"));
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (!config.displayDamageOverlay() || (config.expiry() != 0 && plugin.isOverlayExpired())) {
			return null;
		}

		final Color strColor = new Color(238, 51, 51);
		final String intStr = String.valueOf((int) plugin.getHit());
		final String str = String.valueOf(plugin.getHit());
		final String leftText = config.displayOverlayText() ? "Current hit:" : "";

		/**
		 * This is a mess because I couldn't figure out how to condense this, so I wrote it very explicitly. I'm tired
		 */
		if (config.displayCurrentHit()) {
			final LineComponent.LineComponentBuilder hitLine = LineComponent.builder()
				.left(leftText)
				.rightColor(strColor);

			if (config.precision() == 0) {
				hitLine.right(intStr);
			} else {
				hitLine.right(str);
			}
			panelComponent.getChildren().add(hitLine.build());
		}


		if (config.displayTotalDamageOverlay()) {
			final String intTotalStr = String.valueOf((int) plugin.getTotalHit());
			final String totalStr = String.valueOf(plugin.getTotalHit());
			final String leftTotalText = config.displayOverlayText() ? "Total hit:" : "";

			final LineComponent.LineComponentBuilder totalHitLine = LineComponent.builder()
					.left(leftTotalText)
					.rightColor(strColor);

			if (config.precision() == 0) {
				totalHitLine.right(intTotalStr);
			} else {
				totalHitLine.right(totalStr);
			}
			panelComponent.getChildren().add(totalHitLine.build());
		}

		return super.render(graphics);
	}
}

package com.geeckon.instantdamagecalculator;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Units;

@ConfigGroup("instantDamageCalculator")
public interface InstantDamageCalculatorConfig extends Config
{
    @ConfigItem(
            keyName = "replaceXpDrops",
            name = "Replace XP drops",
            description = "If enabled, combat xp drops will be replaced with the damage dealt",
            position = 0
    )
    default boolean replaceXpDrops()
    {
        return true;
    }

    @ConfigItem(
            keyName = "displayDamageOverlay",
            name = "Display damage overlay",
            description = "If enabled, an overlay is displayed which shows the latest damage hit",
            position = 1
    )
    default boolean displayDamageOverlay()
    {
        return false;
    }

    @ConfigItem(
            keyName = "displayCurrentHit",
            name = "Display current hit in overlay",
            description = "If enabled, the overlay will include the latest damage hit",
            position = 2
    )
    default boolean displayCurrentHit()
    {
        return true;
    }

    @ConfigItem(
            keyName = "displayOverlayText",
            name = "Display overlay text",
            description = "If enabled, informative text is displayed in the overlay",
            position = 3
    )
    default boolean displayOverlayText()
    {
        return true;
    }

    @ConfigItem(
            keyName = "expiry",
            name = "Overlay Expiry",
            description = "Set the time until the overlay disappears",
            position = 4
    )
    @Units(Units.SECONDS)
    default int expiry() { return 10; }

    @ConfigItem(
            keyName = "precision",
            name = "Precision",
            description = "Set the number of decimal places to display. 0 is suggested unless you understand how the plugin and xp rounding works. Only affects the overlay, not replaced xp drops",
            position = 5
    )
    default int precision() { return 0; }

    @ConfigItem(
            keyName = "customBonusXP",
            name = "Custom NPC Bonus XP",
            description = "Add bonus XP modifiers for custom NPCs. Format is id:multiplier eg. \"12345:1.05\", once per line.",
            position = 6
    )
    default String customBonusXP() { return "// Phantom Muspah\n12077 : 2.075\n12078 : 2.075\n12079 : 2.075\n12080 : 2.075\n12082 : 2.075"; }

    @ConfigItem(
            keyName = "displayTotalDamageOverlay",
            name = "Display total damage overlay",
            description = "If enabled, an overlay is displayed which shows the total damage done, including the current hit. This total can then be reset using one of the following configurations. Can be useful for the Phantom Muspah boss",
            position = 7
    )
    default boolean displayTotalDamageOverlay()
    {
        return false;
    }

    @ConfigItem(
            keyName = "clearTotalOnOverlayExpiry",
            name = "Clear total damage on overlay expiry",
            description = "If enabled, the total damage counter will be set to 0 when the overlay expires.",
            position = 8
    )
    default boolean clearTotalOnOverlayExpiry()
    {
        return false;
    }

    @ConfigItem(
            keyName = "resetOnWeaponChange",
            name = "Reset total damage on weapon change",
            description = "If enabled with the \"Display total damage overlay\" setting, total damage will be reset whenever the equipped weapon is changed",
            position = 9
    )
    default boolean resetOnWeaponChange()
    {
        return false;
    }

    @ConfigItem(
            keyName = "resetOnPrayerChange",
            name = "Reset total damage on prayer change",
            description = "If enabled with the \"Display total damage overlay\" setting, total damage will be reset whenever the player activates a protection prayer different from the one they previously activated",
            position = 10
    )
    default boolean resetOnPrayerChange()
    {
        return false;
    }

    @ConfigItem(
            keyName = "resetOnBarrowsCryptEntry",
            name = "Reset total damage on Barrows Crypt entry",
            description = "If enabled with the \"Display total damage overlay\" setting, total damage will be reset whenever the player enters a Barrows crypt",
            position = 11
    )
    default boolean resetOnBarrowsCryptEntry()
    {
        return false;
    }

    @ConfigItem(
            keyName = "resetOnMuspahPhase",
            name = "Reset total damage on Muspah phase change",
            description = "If enabled with the \"Display total damage overlay\" setting, total damage will be reset whenever Muspah phase changes and will ignore teleport phase",
            position = 12
    )
    default boolean resetOnMuspahPhase()
    {
        return false;
    }

}

package com.geeckon.instantdamagecalculator;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class InstantDamageCalculatorPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(InstantDamageCalculatorPlugin.class);
		RuneLite.main(args);
	}
}
