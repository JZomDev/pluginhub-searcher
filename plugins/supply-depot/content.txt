package net.naughtyklaus.depot;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DepotPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(DepotPlugin.class);
		RuneLite.main(args);
	}
}
package net.naughtyklaus.depot.util;

import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.DocumentFilter;

public class IntegerDocumentFilter extends DocumentFilter {
    @Override
    public void insertString(FilterBypass fb, int offset, String string,
                             AttributeSet attr) throws BadLocationException {

        Document doc = fb.getDocument();
        StringBuilder sb = new StringBuilder();
        sb.append(doc.getText(0, doc.getLength()));
        sb.insert(offset, string);

        if (test(sb.toString())) {
            super.insertString(fb, offset, string, attr);
        }
    }

    private boolean test(String text) {
        try {
            Integer.parseInt(text);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    @Override
    public void replace(FilterBypass fb, int offset, int length, String text,
                        AttributeSet attrs) throws BadLocationException {

        Document doc = fb.getDocument();
        StringBuilder sb = new StringBuilder();
        sb.append(doc.getText(0, doc.getLength()));
        sb.replace(offset, offset + length, text);

        if (test(sb.toString())) {
            super.replace(fb, offset, length, text, attrs);
        }
    }

    @Override
    public void remove(FilterBypass fb, int offset, int length)
            throws BadLocationException {
        Document doc = fb.getDocument();
        StringBuilder sb = new StringBuilder();
        sb.append(doc.getText(0, doc.getLength()));
        sb.delete(offset, offset + length);

        if (test(sb.toString())) {
            super.remove(fb, offset, length);
        }
    }
}
package net.naughtyklaus.depot;

/*
 * Copyright (c) 2024, Naughty Klaus <https://github.com/Naughty-Klaus>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.naughtyklaus.depot.ui.DepotPanel;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import java.awt.image.BufferedImage;

@Slf4j
@PluginDescriptor(
        name = "Supply Depot",
        description = "Enable the Supply Depot",
        loadWhenOutdated = true
)
public class DepotPlugin extends Plugin {

    @Inject
    private Client client;

    @Inject
    private ClientToolbar clientToolbar;

    private DepotPanel panel;
    private NavigationButton navButton;

    @Override
    protected void startUp() throws Exception {
        panel = injector.getInstance(DepotPanel.class);

        System.out.println(getClass().getPackage().getName().replace('.', '/') + "/");

        final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "info_icon.png");

        navButton = NavigationButton.builder()
                .tooltip("Supply Depot")
                .icon(icon)
                .priority(10)
                .panel(panel)
                .build();

        clientToolbar.addNavigation(navButton);
    }

    @Override
    protected void shutDown() {
        panel.deconstruct();
        clientToolbar.removeNavigation(navButton);
        panel = null;
        navButton = null;
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged gameStateChanged) {
		if (gameStateChanged.getGameState() == GameState.LOGGED_IN)
		{
			//panel.isLogggedIn = true;
		}
    }
}

package net.naughtyklaus.depot.events;

/*
 * Copyright (c) 2024, Naughty Klaus <https://github.com/Naughty-Klaus>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class OrderPanelSelected {

}

package net.naughtyklaus.depot.events;

/*
 * Copyright (c) 2024, Naughty Klaus <https://github.com/Naughty-Klaus>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class ConstructRequestsPanel {
}

package net.naughtyklaus.depot.events;

/*
 * Copyright (c) 2024, Naughty Klaus <https://github.com/Naughty-Klaus>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class ConstructOrderPanel {
}

package net.naughtyklaus.depot.events;

/*
 * Copyright (c) 2024, Naughty Klaus <https://github.com/Naughty-Klaus>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class ConstructDepotPanel {
}

package net.naughtyklaus.depot.events;

/*
 * Copyright (c) 2024, Naughty Klaus <https://github.com/Naughty-Klaus>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class PreInitDepotTabbePane {
}

package net.naughtyklaus.depot.events;

/*
 * Copyright (c) 2024, Naughty Klaus <https://github.com/Naughty-Klaus>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class PostInitDepotTabbePane {
}

/*
 * Copyright (c) 2018 Abex
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.naughtyklaus.depot;

import lombok.extern.slf4j.Slf4j;

import javax.swing.*;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.text.html.HTMLEditorKit;
import java.awt.*;
import java.io.IOException;
import java.net.URISyntaxException;

@Slf4j
public class JRichTextPane extends JEditorPane {

    public JRichTextPane() {
        super();
        setHighlighter(null);
        setEditable(false);
        setOpaque(false);
        setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
        HTMLEditorKit ek = (HTMLEditorKit) getEditorKitForContentType("text/html");
        ek.getStyleSheet().addRule("a {color: #DDDDDD; }");
    }

    public JRichTextPane(String type, String text) {
        this();
        setContentType(type);
        setText(text);
    }
}

package net.naughtyklaus.depot.model.item;

/*
 * Copyright (c) 2024, Naughty Klaus <https://github.com/Naughty-Klaus>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import lombok.Getter;

@Getter
public class Order {

    private final int itemId, quantity, offerPrice;

    public Order(int itemId, int quantity, int offerPrice) {
        this.itemId = itemId;
        this.quantity = quantity;
        this.offerPrice = offerPrice;
    }

}

package net.naughtyklaus.depot.model.item;

/*
 * Copyright (c) 2024, Naughty Klaus <https://github.com/Naughty-Klaus>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import lombok.Getter;
import net.runelite.api.ItemComposition;
import net.runelite.client.util.AsyncBufferedImage;
import net.runelite.http.api.item.ItemStats;

public class ItemResource {

    @Getter
    private final ItemComposition itemComposition;
    @Getter
    private final ItemStats itemStats;

    @Getter
    private AsyncBufferedImage itemImage;

    public ItemResource(ItemComposition itemComposition, ItemStats itemStats, AsyncBufferedImage itemImage) {
        this.itemComposition = itemComposition;
        this.itemStats = itemStats;
        this.itemImage = itemImage;
    }

}

package net.naughtyklaus.depot.model.item;

/*
 * Copyright (c) 2024, Naughty Klaus <https://github.com/Naughty-Klaus>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import lombok.Getter;

@Getter
public class OrderContainer {

    private final String displayName;
    private final Order order;



    public OrderContainer(String displayName, Order order) {
        this.displayName = displayName;
        this.order = order;
    }

}

package net.naughtyklaus.depot.ui;

/*
 * Copyright (c) 2018, Seth <https://github.com/sethtroll>
 * Copyright (c) 2018, Psikoi <https://github.com/psikoi>
 * Copyright (c) 2024, Naughty Klaus <https://github.com/Naughty-Klaus>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import lombok.Getter;
import net.naughtyklaus.depot.JRichTextPane;
import net.naughtyklaus.depot.model.item.OrderContainer;
import net.runelite.api.ItemComposition;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.AsyncBufferedImage;
import net.runelite.http.api.item.ItemStats;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;

public class DepotViewResultPanel extends JPanel {

    private static final Dimension ICON_SIZE = new Dimension(32, 32);

    @Getter
    private final DepotPanel mainPanel;

    public DepotViewResultPanel(DepotPanel mainPanel, OrderContainer orderContainer) {
        this.mainPanel = mainPanel;

        BorderLayout layout = new BorderLayout();
        layout.setHgap(5);
        setLayout(layout);
        setBackground(ColorScheme.DARKER_GRAY_COLOR);

        setPreferredSize(new Dimension((int) getSize().getWidth(), 96));

        Color background = getBackground();
        List<JPanel> panels = new ArrayList<>();
        panels.add(this);

        MouseAdapter itemPanelMouseListener = new MouseAdapter()
        {
            @Override
            public void mouseEntered(MouseEvent e)
            {
                for (JPanel panel : panels)
                {
                    matchComponentBackground(panel, ColorScheme.DARK_GRAY_HOVER_COLOR);
                }
                setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e)
            {
                for (JPanel panel : panels)
                {
                    matchComponentBackground(panel, background);
                }
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        };

        addMouseListener(itemPanelMouseListener);
        setBorder(new EmptyBorder(5, 5, 5, 0));

        ItemComposition itemComp = mainPanel.getItemManager().getItemComposition(orderContainer.getOrder().getItemId());
        ItemStats itemStats = mainPanel.getItemManager().getItemStats(orderContainer.getOrder().getItemId(), false);
        AsyncBufferedImage itemImage = mainPanel.getItemManager().getImage(orderContainer.getOrder().getItemId());

        // Icon
        JLabel itemIcon = new JLabel();
        itemIcon.setPreferredSize(ICON_SIZE);
        if (itemImage != null)
        {
            itemImage.addTo(itemIcon);
        }
        add(itemIcon, BorderLayout.LINE_START);

        // Item details panel
        JPanel rightPanel = new JPanel(new GridLayout(4, 1));
        panels.add(rightPanel);
        rightPanel.setBackground(background);

        JRichTextPane displayName = new JRichTextPane();
        displayName.setMaximumSize(new Dimension(0, 0));        // to limit the label's size for
        displayName.setPreferredSize(new Dimension(0, 0));    // items with longer names
        displayName.setText("Requested by: " + orderContainer.getDisplayName());

        // Item name
        JRichTextPane itemName = new JRichTextPane();
        itemName.setMaximumSize(new Dimension(0, 0));        // to limit the label's size for
        itemName.setPreferredSize(new Dimension(0, 0));    // items with longer names
        itemName.setText("Item: " + itemComp.getName());

        JRichTextPane quantity = new JRichTextPane();
        quantity.setMaximumSize(new Dimension(0, 0));        // to limit the label's size for
        quantity.setPreferredSize(new Dimension(0, 0));    // items with longer names
        quantity.setText("Quantity: x" + orderContainer.getOrder().getQuantity());

        JRichTextPane price = new JRichTextPane();
        price.setMaximumSize(new Dimension(0, 0));        // to limit the label's size for
        price.setPreferredSize(new Dimension(0, 0));    // items with longer names
        price.setText("Pay: " + orderContainer.getOrder().getOfferPrice());

        rightPanel.add(displayName);
        rightPanel.add(itemName);
        rightPanel.add(quantity);
        rightPanel.add(price);

        add(rightPanel, BorderLayout.CENTER);
    }

    private void matchComponentBackground(JPanel panel, Color color)
    {

        panel.setBackground(color);
        for (Component c : panel.getComponents())
        {
            c.setBackground(color);
        }
    }

}

/*
 * Copyright (c) 2018, Seth <https://github.com/sethtroll>
 * Copyright (c) 2018, Psikoi <https://github.com/psikoi>
 * Copyright (c) 2024, Naughty Klaus <https://github.com/Naughty-Klaus>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package net.naughtyklaus.depot.ui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;

import lombok.Getter;
import net.naughtyklaus.depot.model.item.ItemResource;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.AsyncBufferedImage;
import net.runelite.client.util.QuantityFormatter;

/**
 * This panel displays an individual item result in the
 * Grand Exchange search plugin.
 */
public class DepotOrderItemPanel extends JPanel
{

    @Getter
    private final ItemResource item;

    private static final Dimension ICON_SIZE = new Dimension(32, 32);
    @Getter
    private final DepotPanel mainPanel;

    DepotOrderItemPanel(DepotPanel mainPanel, ItemResource resource, MouseAdapter overrideMouseAdapter)
    {
        this.mainPanel = mainPanel;
        this.item = resource;

        BorderLayout layout = new BorderLayout();
        layout.setHgap(5);
        setLayout(layout);
        setToolTipText(resource.getItemComposition().getName());
        setBackground(ColorScheme.DARKER_GRAY_COLOR);

        Color background = getBackground();
        List<JPanel> panels = new ArrayList<>();
        panels.add(this);

        MouseAdapter itemPanelMouseListener = new MouseAdapter()
        {
            @Override
            public void mouseEntered(MouseEvent e)
            {
                for (JPanel panel : panels)
                {
                    matchComponentBackground(panel, ColorScheme.DARK_GRAY_HOVER_COLOR);
                }
                setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e)
            {
                for (JPanel panel : panels)
                {
                    matchComponentBackground(panel, background);
                }
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }

            @Override
            public void mouseClicked(MouseEvent e)
            {
                System.out.println("Selected: " + resource.getItemComposition().getId());
                DepotOrderItemPanel panel = new DepotOrderItemPanel(mainPanel, resource, new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if(mainPanel.getOrderPanel().getSelectedDepotOrderItemPanel() != null) {
                            mainPanel.getOrderPanel().getCartWrapper().remove(mainPanel.getOrderPanel().getSelectedDepotOrderItemPanel());
                            mainPanel.getOrderPanel().setSelectedDepotOrderItemPanel(null);
                        }
                    }
                });

                DepotOrderItemPanel d = mainPanel.getOrderPanel().getSelectedDepotOrderItemPanel();

                if (d != null) {
                    mainPanel.getOrderPanel().getCartWrapper().remove(d);
                }

                mainPanel.getOrderPanel().setSelectedDepotOrderItemPanel(panel);
                mainPanel.getOrderPanel().getCartWrapper().add(panel);

                // Order item
                // grandExchangePlugin.openGeLink(name, itemID);
            }
        };

        addMouseListener(overrideMouseAdapter != null ? overrideMouseAdapter : itemPanelMouseListener);

        setBorder(new EmptyBorder(5, 5, 5, 0));

        // Icon
        JLabel itemIcon = new JLabel();
        itemIcon.setPreferredSize(ICON_SIZE);
        if (resource.getItemImage() != null)
        {
            resource.getItemImage().addTo(itemIcon);
        }
        add(itemIcon, BorderLayout.LINE_START);

        // Item details panel
        JPanel rightPanel = new JPanel(new GridLayout(1, 1));
        panels.add(rightPanel);
        rightPanel.setBackground(background);

        // Item name
        JLabel itemName = new JLabel();
        itemName.setForeground(Color.WHITE);
        itemName.setMaximumSize(new Dimension(0, 0));        // to limit the label's size for
        itemName.setPreferredSize(new Dimension(0, 0));    // items with longer names
        itemName.setText(resource.getItemComposition().getName());
        rightPanel.add(itemName);

        // GE Limit
        /*JLabel geLimitLabel = new JLabel();
        String limitLabelText = geItemLimit == 0 ? "" : "Limit " + QuantityFormatter.formatNumber(geItemLimit);
        geLimitLabel.setText(limitLabelText);
        geLimitLabel.setForeground(ColorScheme.GRAND_EXCHANGE_LIMIT);
        geLimitLabel.setBorder(new CompoundBorder(geLimitLabel.getBorder(), new EmptyBorder(0, 0, 0, 7)));
        alchAndLimitPanel.add(geLimitLabel, BorderLayout.EAST);

        rightPanel.add(alchAndLimitPanel);*/

        add(rightPanel, BorderLayout.CENTER);
    }

    private void matchComponentBackground(JPanel panel, Color color)
    {

        panel.setBackground(color);
        for (Component c : panel.getComponents())
        {
            c.setBackground(color);
        }
    }
}
package net.naughtyklaus.depot.ui;

/*
 * Copyright (c) 2018, Seth <https://github.com/sethtroll>
 * Copyright (c) 2018, Psikoi <https://github.com/psikoi>
 * Copyright (c) 2024, Naughty Klaus <https://github.com/Naughty-Klaus>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import lombok.Getter;
import lombok.Setter;
import net.naughtyklaus.depot.DepotPlugin;
import net.runelite.client.ui.ColorScheme;

import javax.swing.*;
import java.awt.*;

public class DepotViewPanel extends JPanel {

    @Getter
    private final DepotPanel mainPanel;

    @Getter
    @Setter
    private JPanel panelWrapper = new JPanel(new GridBagLayout());

    @Getter
    @Setter
    private JPanel ordersWrapper = new JPanel(new BorderLayout());

    @Getter
    private final JPanel resultsPanel = new JPanel(new GridBagLayout());

    @Getter
    @Setter
    private GridBagConstraints panelConstraints = new GridBagConstraints();

    @Getter
    @Setter
    private GridBagConstraints ordersConstraints = new GridBagConstraints();


    public DepotViewPanel(DepotPanel panel) {
        super(false);
        this.mainPanel = panel;
    }

    public void build() {

        getPanelWrapper().setAutoscrolls(true);

        getPanelConstraints().fill = GridBagConstraints.HORIZONTAL;
        getPanelConstraints().weightx = 1;
        getPanelConstraints().gridx = 0;
        getPanelConstraints().gridy = 0;
        getPanelConstraints().insets = new Insets(10, 0, 0, 0);

        resultsPanel.setLayout(new GridBagLayout());
        resultsPanel.setBackground(ColorScheme.DARK_GRAY_COLOR);

        getOrdersConstraints().fill = GridBagConstraints.HORIZONTAL;
        getOrdersConstraints().weightx = 1;
        getOrdersConstraints().gridx = 0;
        getOrdersConstraints().gridy = 0;

        JButton refreshPanel = new JButton("Refresh Orders");
        refreshPanel.addActionListener(e -> getMainPanel().executor.execute(() -> getMainPanel().refreshOrders()));
        getPanelWrapper().add(refreshPanel, getPanelConstraints());
        getPanelConstraints().gridy++;

        JScrollPane jScrollPane = new JScrollPane(getResultsPanel());

        //getOrdersWrapper().add(jScrollPane);

        getPanelWrapper().add(jScrollPane, getPanelConstraints());

        add(getPanelWrapper(), BorderLayout.NORTH);
    }

}

package net.naughtyklaus.depot.ui;

/*
 * Copyright (c) 2018, Seth <https://github.com/sethtroll>
 * Copyright (c) 2018, Psikoi <https://github.com/psikoi>
 * Copyright (c) 2024, Naughty Klaus <https://github.com/Naughty-Klaus>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import lombok.Getter;
import lombok.Setter;
import net.naughtyklaus.depot.DepotPlugin;
import net.naughtyklaus.depot.model.item.Order;
import net.naughtyklaus.depot.model.item.OrderContainer;
import net.naughtyklaus.depot.util.IntegerDocumentFilter;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.components.IconTextField;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.text.PlainDocument;
import java.awt.*;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class DepotOrderPanel extends JPanel {

    @Getter
    @Setter
    private IconTextField searchField;
    @Getter
    @Setter
    private IconTextField offerField;
    @Getter
    @Setter
    private IconTextField quantityField;

    public CardLayout cardLayout = new CardLayout();
    public JPanel centerPanel = new JPanel(cardLayout);
    public final GridBagConstraints searchConstraints = new GridBagConstraints();
    public final GridBagConstraints constraints = new GridBagConstraints();

    private final JPanel wrapper = new JPanel(new BorderLayout());
    @Getter
    private final JPanel panelWrapper = new JPanel(new BorderLayout());
    @Getter
    private final JPanel cartWrapper = new JPanel(new BorderLayout());
    @Getter
    private final JPanel searchItemsPanel = new JPanel();

    @Setter
    @Getter
    private JScrollPane resultsScrollPane;
    @Getter
    private final DepotPanel mainPanel;

    public DepotOrderPanel(DepotPanel panel) {
        super(false);
        this.mainPanel = panel;
    }

    @Getter
    @Setter
    private DepotOrderItemPanel selectedDepotOrderItemPanel;

    public void build() {

        JButton deleteOldOrder = new JButton("Cancel Last Order");
        deleteOldOrder.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                getMainPanel().cancelOrder();
            }
        });

        setQuantityField(new IconTextField());

        getQuantityField().setIcon(DepotPanel.getCalcIcon());
        getQuantityField().setToolTipText("Set your requested quantity.");
        getQuantityField().setPreferredSize(new Dimension(100, 30));
        getQuantityField().setBackground(ColorScheme.DARKER_GRAY_COLOR);
        getQuantityField().setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
        getQuantityField().setText("1");

        PlainDocument doc1 = (PlainDocument) getQuantityField().getDocument();
        doc1.setDocumentFilter(new IntegerDocumentFilter());

        //

        setOfferField(new IconTextField());

        getOfferField().setIcon(DepotPanel.getMoneyIcon());
        getOfferField().setToolTipText("Set your buying price.");
        getOfferField().setPreferredSize(new Dimension(100, 30));
        getOfferField().setBackground(ColorScheme.DARKER_GRAY_COLOR);
        getOfferField().setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
        getOfferField().setText("0");

        PlainDocument doc = (PlainDocument) getOfferField().getDocument();
        doc.setDocumentFilter(new IntegerDocumentFilter());

        setSearchField(new IconTextField());
        getSearchField().setIcon(IconTextField.Icon.SEARCH);
        getSearchField().setToolTipText("Search for items by partial name.");
        getSearchField().setPreferredSize(new Dimension(100, 30));
        getSearchField().setBackground(ColorScheme.DARKER_GRAY_COLOR);
        getSearchField().setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
        getSearchField().addActionListener(e -> getMainPanel().executor.execute(() -> getMainPanel().itemLookup(false)));
        getSearchField().addClearListener(getMainPanel()::updateSearch);

        getSearchField().addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                if(getSearchField().getText().equalsIgnoreCase("Search..."))
                    getSearchField().setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                if(getSearchField().getText().equalsIgnoreCase(""))
                    getSearchField().setText("Search...");
            }
        });

        searchItemsPanel.setLayout(new GridBagLayout());
        searchItemsPanel.setBackground(ColorScheme.DARK_GRAY_COLOR);

        panelWrapper.setLayout(new GridBagLayout());
        panelWrapper.setBackground(ColorScheme.DARK_GRAY_COLOR);

        cartWrapper.setLayout(new GridBagLayout());
        cartWrapper.setBackground(ColorScheme.DARK_GRAY_COLOR);

        searchConstraints.fill = GridBagConstraints.HORIZONTAL;
        searchConstraints.weightx = 1;
        searchConstraints.gridx = 0;
        searchConstraints.gridy = 0;

        constraints.fill = GridBagConstraints.HORIZONTAL;
        constraints.weightx = 1;
        constraints.gridx = 0;
        constraints.gridy = 0;
        constraints.insets = new Insets(10, 0, 0, 0);

        wrapper.setBackground(ColorScheme.DARK_GRAY_COLOR);
        wrapper.add(searchItemsPanel, BorderLayout.NORTH);

        setResultsScrollPane(new JScrollPane(wrapper)); //new JScrollPane(new JList<>(listModel)));
        getResultsScrollPane().setBackground(ColorScheme.DARK_GRAY_COLOR);
        getResultsScrollPane().getVerticalScrollBar().setPreferredSize(new Dimension(12, 0));
        getResultsScrollPane().getVerticalScrollBar().setBorder(new EmptyBorder(0, 5, 0, 0));

        centerPanel.add(getResultsScrollPane(), "RESULTS_PANEL");

        //populateResults(null);

        panelWrapper.add(deleteOldOrder, constraints);
        constraints.gridy++;
        panelWrapper.add(getOfferField(), constraints);
        constraints.gridy++;
        panelWrapper.add(getQuantityField(), constraints);
        constraints.gridy++;
        panelWrapper.add(getCartWrapper(), constraints);
        constraints.gridy++;

        JButton makeOrder = new JButton("Send Order");
        makeOrder.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if(getMainPanel().getOrderPanel().getSelectedDepotOrderItemPanel() != null) {
                    System.out.println("Something is happening!");
                    DepotOrderItemPanel it = getMainPanel().getOrderPanel().getSelectedDepotOrderItemPanel();
                    getMainPanel().makeOrder(
                            new OrderContainer(
                                    getMainPanel().getClient().getLocalPlayer().getName(),
                                    new Order(
                                            it.getItem().getItemComposition().getId(),
                                            Integer.parseInt(getQuantityField().getText()),
                                            Integer.parseInt(getOfferField().getText())
                                    )
                            ));
                } else {
                    System.out.println("Something isn't right...");
                }
            }
        });
        panelWrapper.add(makeOrder, constraints);
        constraints.gridy++;
        panelWrapper.add(getSearchField(), constraints);

        add(panelWrapper, BorderLayout.NORTH);
        add(centerPanel, BorderLayout.CENTER);
        //add(getResultsScrollPane());
    }
}

/*
 * Copyright (c) 2018 Abex
 * Copyright (c) 2018, Psikoi <https://github.com/psikoi>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package net.naughtyklaus.depot.ui;

/*
 * Copyright (c) 2018, Seth <https://github.com/sethtroll>
 * Copyright (c) 2018, Psikoi <https://github.com/psikoi>
 * Copyright (c) 2024, Naughty Klaus <https://github.com/Naughty-Klaus>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import com.google.common.base.Strings;
import com.google.gson.Gson;
import com.google.inject.Inject;
import lombok.Getter;
import lombok.Setter;
import net.naughtyklaus.depot.DepotPlugin;
import net.naughtyklaus.depot.events.*;
import net.naughtyklaus.depot.model.item.ItemResource;
import net.naughtyklaus.depot.model.item.OrderContainer;
import net.runelite.api.Client;
import net.runelite.api.ItemComposition;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.IconTextField;
import net.runelite.client.util.AsyncBufferedImage;
import net.runelite.client.util.ImageUtil;
import net.runelite.http.api.item.ItemPrice;
import net.runelite.http.api.item.ItemStats;

import javax.annotation.Nullable;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;

import okhttp3.*;

@Getter
public class DepotPanel extends PluginPanel {

    @Inject
    public Gson gson;

    @Getter
    @Inject
    private OkHttpClient httpClient;

    public OrderContainer[] getOrderContainer() throws IOException {
        String url = "http://depot.naughtyklaus.net:43658/api/orders";
        Request request = new Request.Builder().url(url).build();

        try (Response response = getHttpClient().newCall(request).execute()) {

            // Deserialize JSON string into an array of objects
            return gson.fromJson(response.body().string(), OrderContainer[].class);
        }
    }

    public void makeOrder(OrderContainer container) {
        if(container == null)
            return;

        String url = "http://depot.naughtyklaus.net:43658/api/order/" + container.getDisplayName();

        String jsonString = gson.toJson(container);

        // Create RequestBody
        RequestBody body = RequestBody.create(MediaType.parse("application/json"), jsonString);

        // Create PATCH request
        Request request = new Request.Builder()
                .url(url)
                .patch(body)
                .build();

        // Execute the request
        try(Response response = getHttpClient().newCall(request).execute()) {
            // Check if request was successful
            if (response.isSuccessful()) {
                System.out.println("PATCH request successful");
                System.out.println("Response: " + response.body().string());
            } else {
                System.out.println("PATCH request failed with code: " + response.code());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void cancelOrder() {
        String url = "http://depot.naughtyklaus.net:43658/api/cancel/" + getClient().getLocalPlayer().getName();

        // Create RequestBody
        RequestBody body = RequestBody.create(MediaType.parse("application/json"), "{}");

        // Create PATCH request
        Request request = new Request.Builder()
                .url(url)
                .patch(body)
                .build();

        // Execute the request
        try(Response response = getHttpClient().newCall(request).execute()) {
            // Check if request was successful
            if (response.isSuccessful()) {
                System.out.println("PATCH request successful");
                System.out.println("Response: " + response.body().string());
            } else {
                System.out.println("PATCH request failed with code: " + response.code());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Getter
    @Setter
    public DepotOrderItemPanel lastSelectedOrderItem;

    @Inject
    public DepotPanel(DepotPlugin plugin, @Nullable Client client, EventBus eventBus, ScheduledExecutorService executor)
    {
        this.plugin = plugin;
        this.client = client;
        this.eventBus = eventBus;
        this.executor = executor;

        setLayout(new BorderLayout());
        setBackground(ColorScheme.DARK_GRAY_COLOR);
        setBorder(new EmptyBorder(10, 0, 10, 0));

        eventBus.register(this);

        getEventBus().post(new ConstructDepotPanel());
    }

    /**
     *  Taken from the Grand Exchange plugin, modified for my own use.
     */
    public boolean updateSearch()
    {
        String lookup = getOrderPanel().getSearchField().getText();

        if (Strings.isNullOrEmpty(lookup))
        {
            getOrderPanel().getSearchItemsPanel().removeAll();
            SwingUtilities.invokeLater(getOrderPanel().getSearchItemsPanel()::updateUI);
            return false;
        }

        // Input is not empty, add searching label
        getOrderPanel().getSearchItemsPanel().removeAll();
        getOrderPanel().getSearchField().setBackground(ColorScheme.DARKER_GRAY_COLOR);
        getOrderPanel().getSearchField().setEditable(false);
        getOrderPanel().getSearchField().setIcon(IconTextField.Icon.LOADING);
        return true;
    }

    /**
     *  Taken from the Grand Exchange plugin, modified for my own use.
     */
    public void itemLookup(boolean exactMatch)
    {
        if (!updateSearch())
        {
            return;
        }

        java.util.List<ItemPrice> result = itemManager.search(getOrderPanel().getSearchField().getText());
        if (result.isEmpty())
        {
            getOrderPanel().getSearchField().setIcon(IconTextField.Icon.ERROR);
            //errorPanel.setContent("No results found.", "No items were found with that name, please try again.");
            getOrderPanel().cardLayout.show(getOrderPanel().centerPanel, "ERROR_PANEL");
            getOrderPanel().getSearchField().setEditable(true);
            return;
        }

        // move to client thread to lookup item composition
        clientThread.invokeLater(() -> processResult(result, getOrderPanel().getSearchField().getText(), exactMatch));
    }



    private void processResult(java.util.List<ItemPrice> result, String lookup, boolean exactMatch)
    {
        final List<ItemResource> itemsList = new ArrayList<>();

        getOrderPanel().cardLayout.show(getOrderPanel().centerPanel, "RESULTS_PANEL");

        int count = 0;

        for (ItemPrice item : result)
        {
            if (count++ > MAX_SEARCH_ITEMS)
            {
                // Cap search
                break;
            }

            if(item.getName().equalsIgnoreCase("Manta ray"))
                System.out.println("Manta ray: " + item.getId());

            int itemId = item.getId();

            ItemComposition itemComp = itemManager.getItemComposition(itemId);
            ItemStats itemStats = itemManager.getItemStats(itemId, false);
            AsyncBufferedImage itemImage = itemManager.getImage(itemId);

            itemsList.add(new ItemResource(itemComp, itemStats, itemImage));

            // If using hotkey to lookup item, stop after finding match.
            if (exactMatch && item.getName().equalsIgnoreCase(lookup))
            {
                break;
            }
        }

        SwingUtilities.invokeLater(() ->
        {
            int index = 0;
            for (ItemResource item : itemsList)
            {
                DepotOrderItemPanel panel = new DepotOrderItemPanel(this, item, null);

				/*
				Add the first item directly, wrap the rest with margin. This margin hack is because
				gridbaglayout does not support inter-element margins.
				 */
                if (index++ > 0)
                {
                    JPanel marginWrapper = new JPanel(new BorderLayout());
                    marginWrapper.setBackground(ColorScheme.DARK_GRAY_COLOR);
                    marginWrapper.setBorder(new EmptyBorder(5, 0, 0, 0));
                    marginWrapper.add(panel, BorderLayout.NORTH);
                    getOrderPanel().getSearchItemsPanel().add(marginWrapper, getOrderPanel().searchConstraints);
                }
                else
                {
                    getOrderPanel().getSearchItemsPanel().add(panel, getOrderPanel().searchConstraints);
                }

                getOrderPanel().searchConstraints.gridy++;
            }

            // if exactMatch was set, then it came from the applet, so don't lose focus
            if (!exactMatch)
            {
                getOrderPanel().getSearchItemsPanel().requestFocusInWindow();
            }
            getOrderPanel().getSearchField().setEditable(true);

            // Remove searching label after search is complete
            if (!itemsList.isEmpty())
            {
                getOrderPanel().getSearchField().setIcon(IconTextField.Icon.SEARCH);
            }
        });
    }

    public void deconstruct() {
        eventBus.unregister(this);
    }

    @Subscribe
    private void onConstructOrderPanel(ConstructOrderPanel event) {
        setOrderPanel(new DepotOrderPanel(this));

        getOrderPanel().setLayout(new BorderLayout(10, 10));
        getOrderPanel().setBorder(new EmptyBorder(0, 10, 10, 10));

        getOrderPanel().build();

        getTabbedPane().addTab("Make Order", getNoteIcon(), getOrderPanel());
        getTabbedPane().setMnemonicAt(0, KeyEvent.VK_1);
    }



    @Subscribe
    private void onConstructRequestsPanel(ConstructRequestsPanel event) {
        setViewPanel(new DepotViewPanel(this));

        getViewPanel().setLayout(new BorderLayout(10, 10));
        getViewPanel().setBorder(new EmptyBorder(0, 10, 10, 10));

        getViewPanel().build();

        getTabbedPane().addTab("View Orders", getGrandExchangeIcon(), getViewPanel());
        getTabbedPane().setMnemonicAt(1, KeyEvent.VK_2);
    }

    public void refreshOrders() {
        clientThread.invokeLater(() -> {
            getViewPanel().getResultsPanel().removeAll();

            try {
                OrderContainer[] containers = getOrderContainer();

                for (OrderContainer container : containers) {
                    if (container != null) {
                        if (container.getDisplayName() != null) {
                            getViewPanel().getResultsPanel().add(new DepotViewResultPanel(this, container), getViewPanel().getOrdersConstraints());
                            getViewPanel().getOrdersConstraints().gridy++;
                        } else {
                            System.out.println("name is null");
                        }
                    } else {
                        System.out.println("container is null");
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
    }

    @Subscribe
    private void onPreInitDepotTabbePane(PreInitDepotTabbePane event) {
        setTabbedPane(new JTabbedPane());

        eventBus.post(new ConstructOrderPanel());
        eventBus.post(new ConstructRequestsPanel());
    }
    @Subscribe
    private void onPostInitDepotTabbePane(PostInitDepotTabbePane event) {
        add(getTabbedPane(), BorderLayout.CENTER);
    }

    @Subscribe
    private void onConstructDepotPanel(ConstructDepotPanel event)
    {
        eventBus.post(new PreInitDepotTabbePane());
        eventBus.post(new PostInitDepotTabbePane());
    }

    private static JPanel buildAdvertisement(ImageIcon icon) {
        JPanel container = new JPanel();
        container.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        container.setLayout(new BorderLayout());
        container.setBorder(new EmptyBorder(0, 0, 0, 0));

        JLabel iconLabel = new JLabel(icon);
        container.add(iconLabel, BorderLayout.CENTER);

        return container;
    }

    private final Client client;
    private final DepotPlugin plugin;
    private final EventBus eventBus;

    public ScheduledExecutorService executor;

    @Inject
    private ClientThread clientThread;

    @Inject
    private ItemManager itemManager;

    /* Tabbed Panels */
    @Setter
    private JTabbedPane tabbedPane;
    @Setter
    private DepotOrderPanel orderPanel;
    @Setter
    private DepotViewPanel viewPanel;

    @Getter
    @Setter
    public static ImageIcon grandExchangeIcon;
    @Getter
    @Setter
    public static ImageIcon noteIcon;
    @Getter
    @Setter
    public static ImageIcon moneyIcon;
    @Getter
    @Setter
    public static ImageIcon calcIcon;

    private static final int MAX_SEARCH_ITEMS = 100;

    static {
        setMoneyIcon(new ImageIcon(ImageUtil.loadImageResource(DepotPanel.class, "/money.png")));
        Image image = getMoneyIcon().getImage(); // transform it
        Image newimg = image.getScaledInstance(16, 15, Image.SCALE_SMOOTH); // scale it the smooth way
        setMoneyIcon(new ImageIcon(newimg));  // transform it back
        setNoteIcon(new ImageIcon(ImageUtil.loadImageResource(DepotPanel.class, "/note_icon.png")));
        setGrandExchangeIcon(new ImageIcon(ImageUtil.loadImageResource(DepotPanel.class, "/ge_icon.png")));
        setCalcIcon(new ImageIcon(ImageUtil.loadImageResource(DepotPanel.class, "/calc.png")));
    }
}

