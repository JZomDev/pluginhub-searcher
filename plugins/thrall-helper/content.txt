package com.portaguy;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ThrallHelperPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ThrallHelperPlugin.class);
		RuneLite.main(args);
	}
}
package com.portaguy;

import java.awt.Color;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Keybind;
import net.runelite.client.config.Units;

@ConfigGroup("thrallhelper")
public interface ThrallHelperConfig extends Config
{
	String GROUP = "thrallhelper";
	@ConfigItem(
		keyName = "shouldNotify",
		name = "Notify when thrall expires",
		description = "Sends a notification once the thrall needs to be summoned.",
		position = 1
	)
	default boolean shouldNotify()
	{
		return true;
	}

	@ConfigItem(
		keyName = "thrallTimeoutSeconds",
		name = "Timeout Thrall Box",
		description = "The duration in seconds before the thrall box disappears.",
		position = 2
	)
	@Units(Units.SECONDS)
	default int thrallTimeoutSeconds()
	{
		return 120;
	}

	@ConfigItem(
		keyName = "shouldFlash",
		name = "Flash the Reminder Box",
		description = "Makes the reminder box flash between the defined colors.",
		position = 3
	)
	default boolean shouldFlash() { return false; }

	@ConfigItem(
		keyName = "onlyArceuus",
		name = "Only on Arceuus Spellbook",
		description = "Only display the reminder box when on the Arceuus spellbook.",
		position = 4
	)
	default boolean onlyArceuus() { return false; }

	@ConfigItem(
			keyName = "hideReminderHotkey",
			name = "Hide Reminder Hotkey",
			description = "Use this hotkey to hide the reminder box.",
			position = 5
	)
	default Keybind hideReminderHotkey()
	{
		return Keybind.NOT_SET;
	}

	@Alpha
	@ConfigItem(
			keyName = "flashColor1",
			name = "Flash Color #1",
			description = "The first color to flash between, also controls the non-flashing color.",
			position = 6
	)
	default Color flashColor1() { return new Color(255, 0, 0, 150); }

	@Alpha
	@ConfigItem(
			keyName = "flashColor2",
			name = "Flash Color #2",
			description = "The second color to flash between.",
			position = 7
	)
	default Color flashColor2() { return new Color(70, 61, 50, 150); }

	@ConfigItem(
			keyName= "reminderRegex",
			name = "Remind on Regex",
			description = "Displays the reminder upon a chat message matching the regex",
			position = 8
	)
	default String reminderRegex() { return ""; }

	@ConfigItem(
			keyName = "hiderRegex",
			name = "Hide on Regex",
			description = "Hides the reminder (if active) upon a chat message matching the regex",
			position = 9
	)
	default String hiderRegex() { return ""; }

	@ConfigItem(
			keyName = "matchGameMessagesOnly",
			name = "Only match game messages",
			description = "Only attempt to match game messages with the regex.",
			position = 10
	)
	default boolean matchGameMessagesOnly() { return false; }

	@ConfigItem(
			keyName = "reminderStyle",
			name = "Reminder style",
			description = "Changes the style of the reminder box",
			position = 11
	)

	default ThrallHelperStyle reminderStyle() { return ThrallHelperStyle.LONG_TEXT; }

	@ConfigItem(
			keyName = "customText",
			name = "Custom Text",
			description = "Changes the text in the reminder box if the style is set to custom text",
			position = 12
	)

	default String customText() { return "You need to summon a thrall!"; }
}

package com.portaguy;

import net.runelite.client.plugins.Plugin;
import net.runelite.client.ui.overlay.infobox.InfoBox;

import java.awt.Color;

public class ThrallHelperInfobox extends InfoBox {

    public ThrallHelperInfobox(Plugin plugin) {
        super(null, plugin);
    }

    @Override
    public String getText() {
        return null;
    }

    @Override
    public Color getTextColor() {
        return null;
    }

    @Override
    public String getTooltip() {
        return "You need to summon a thrall!";
    }
}

package com.portaguy;

import com.google.inject.Provides;
import java.time.Duration;
import java.time.Instant;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.widgets.Widget;
import net.runelite.client.Notifier;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;
import net.runelite.client.util.HotkeyListener;

@Slf4j
@PluginDescriptor(
	name = "Thrall Helper"
)
public class ThrallHelperPlugin extends Plugin
{
	private static final String RESURRECT_THRALL_MESSAGE_START = ">You resurrect a ";
	private static final String RESURRECT_THRALL_MESSAGE_END = " thrall.</col>";
	private static final String RESURRECT_THRALL_DISAPPEAR_MESSAGE_START = ">Your ";
	private static final String RESURRECT_THRALL_DISAPPEAR_MESSAGE_END = " thrall returns to the grave.</col>";
	private static final int SPELL_RESURRECT_GREATER_GHOST = 2979;
	private static final String SPELL_TARGET_REGEX = "<col=00ff00>Resurrect (Greater|Superior|Lesser) (Skeleton|Ghost|Zombie)</col>";
	private static final Pattern SPELL_TARGET_PATTERN = Pattern.compile(SPELL_TARGET_REGEX);
	private static final int SPELLBOOK_VARBIT = 4070;
	private static final int SUMMON_ANIMATION = 8973;
	private static final int[] SUMMON_GRAPHICS = {1873, 1874, 1875};
 	private static final int ARCEUUS_SPELLBOOK = 3;
	private static final Set<Integer> activeSpellSpriteIds = new HashSet<>(Arrays.asList(
			// Ghost, Skeleton, Zombie
			2980, 2982, 2984, 	// Greater
			2979, 2981, 2983,	// Superior
			1270, 1271, 1300	// Lesser
	));

	private ThrallHelperInfobox infobox;
	private Instant lastThrallExpiry;
	private boolean isSpellClicked = false;
	private Pattern reminderRegex;
	private Pattern hiderRegex;

	@Inject
	private Notifier notifier;

	@Inject
	private ThrallHelperOverlay overlay;

	@Inject
	private ThrallHelperConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private InfoBoxManager infoBoxManager;

	@Inject
	private SpriteManager spriteManager;

	@Inject
	private Client client;

	@Inject
	KeyManager keyManager;

	private final HotkeyListener hideReminderHotkeyListener = new HotkeyListener(() -> config.hideReminderHotkey())
	{
		@Override
		public void hotkeyPressed()
		{
			overlayManager.remove(overlay);
			infoBoxManager.removeInfoBox(infobox);
			lastThrallExpiry = null;
		}
	};

	@Override
	protected void startUp() throws Exception
	{
        infobox = new ThrallHelperInfobox(this);
		spriteManager.getSpriteAsync(SPELL_RESURRECT_GREATER_GHOST, 0, infobox::setImage);
		keyManager.registerKeyListener(hideReminderHotkeyListener);
		if (!config.reminderRegex().isEmpty())
		{
			reminderRegex = compilePattern(config.reminderRegex());
		} else {
			reminderRegex = null;
		}

		if (!config.hiderRegex().isEmpty())
		{
			hiderRegex = compilePattern(config.hiderRegex());
		} else {
			hiderRegex = null;
		}
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
		infoBoxManager.removeInfoBox(infobox);
		keyManager.unregisterKeyListener(hideReminderHotkeyListener);
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (!ThrallHelperConfig.GROUP.equals(event.getGroup())) return;

		if (event.getKey().equals("reminderRegex"))
		{
			if (event.getNewValue() != null && !event.getNewValue().isEmpty())
			{
				reminderRegex = compilePattern(event.getNewValue());
				return;
			} else {
				reminderRegex = null;
			}
		}

		if (event.getKey().equals("hiderRegex"))
		{
			if (event.getNewValue() != null && !event.getNewValue().isEmpty())
			{
				hiderRegex = compilePattern(event.getNewValue());
			} else {
				hiderRegex = null;
			}
		}

		if (event.getKey().equals("reminderStyle"))
		{
			if(event.getNewValue().equals("INFOBOX"))
			{
				if (overlayManager.anyMatch(entry -> entry instanceof ThrallHelperOverlay))
				{
					overlayManager.remove(overlay);
					infoBoxManager.addInfoBox(infobox);
				}
			} else {
				if (infoBoxManager.getInfoBoxes().contains(infobox))
				{
					overlayManager.add(overlay);
					infoBoxManager.removeInfoBox(infobox);
				}
			}
		}
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		if (isSpellClicked && (client.getLocalPlayer().getAnimation() == SUMMON_ANIMATION) || checkGraphic())
		{
			overlayManager.remove(overlay);
			infoBoxManager.removeInfoBox(infobox);
		}

		if (lastThrallExpiry != null)
		{
			final Duration thrallOverlayTimeout = Duration.ofSeconds(config.thrallTimeoutSeconds());
			final Duration sinceThrallExpiry = Duration.between(lastThrallExpiry, Instant.now());

			if (sinceThrallExpiry.compareTo(thrallOverlayTimeout) >= 0)
			{
				overlayManager.remove(overlay);
				infoBoxManager.removeInfoBox(infobox);
				lastThrallExpiry = null;
			}
		}
		if (!(client.getVarbitValue(SPELLBOOK_VARBIT) == ARCEUUS_SPELLBOOK) && config.onlyArceuus())
		{
			overlayManager.remove(overlay);
			infoBoxManager.removeInfoBox(infobox);
			lastThrallExpiry = null;
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		final String message = event.getMessage();
		if (reminderRegex != null && (!config.matchGameMessagesOnly() || event.getType() == ChatMessageType.GAMEMESSAGE))
		{
			Matcher reminderMatcher = reminderRegex.matcher(message);
			if (reminderMatcher.matches())
			{
				if (config.reminderStyle() == ThrallHelperStyle.INFOBOX) {
					if (!infoBoxManager.getInfoBoxes().contains(infobox)) {
						infoBoxManager.addInfoBox(infobox);
					}
				} else {
					overlayManager.add(overlay);
				}
				lastThrallExpiry = Instant.now();
				if (config.shouldNotify())
				{
					notifier.notify("You need to summon a thrall!");
				}
			}
		}

		if (hiderRegex != null && (!config.matchGameMessagesOnly() || event.getType() == ChatMessageType.GAMEMESSAGE))
		{
			Matcher hiderMatcher = hiderRegex.matcher(message);
			if (hiderMatcher.matches())
			{
				overlayManager.remove(overlay);
				infoBoxManager.removeInfoBox(infobox);
				isSpellClicked = false;
			}
		}

		if (message.contains(RESURRECT_THRALL_MESSAGE_START) && message.endsWith(RESURRECT_THRALL_MESSAGE_END))
		{
			overlayManager.remove(overlay);
			infoBoxManager.removeInfoBox(infobox);
			isSpellClicked = false;
		}
		if (message.contains(RESURRECT_THRALL_DISAPPEAR_MESSAGE_START) && message.endsWith((RESURRECT_THRALL_DISAPPEAR_MESSAGE_END)))
		{
			// If the spell has been cast there is no need to notify
			if (!isSpellClicked)
			{
				if (!config.onlyArceuus() || (config.onlyArceuus() && client.getVarbitValue(SPELLBOOK_VARBIT) == ARCEUUS_SPELLBOOK)) {
					if (config.reminderStyle() == ThrallHelperStyle.INFOBOX) {
						if (!infoBoxManager.getInfoBoxes().contains(infobox)) {
							infoBoxManager.addInfoBox(infobox);
						}
					} else {
						overlayManager.add(overlay);
					}
					lastThrallExpiry = Instant.now();
					if (config.shouldNotify())
					{
						notifier.notify("You need to summon a thrall!");
					}
				}
			}
		}
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event)
	{
		// Check the menu option clicked is one of the resurrection spells
		Matcher matcher = SPELL_TARGET_PATTERN.matcher(event.getMenuTarget());
		if (!matcher.matches())
		{
			return;
		}
		// If the user doesn't have the book then they can't cast the spell
		if (!hasBookOfTheDead())
		{
			return;
		}
		Widget widget = event.getWidget();
		if (widget == null)
		{
			return;
		}
		// In the 10-second cool down where the spell can't recast the opacity changes from 0 to 150
		if (activeSpellSpriteIds.contains(widget.getSpriteId()) && widget.getOpacity() == 0)
		{
			isSpellClicked = true;
		}
	}

	private Pattern compilePattern(String pattern)
	{
		try
		{
			return Pattern.compile(pattern);
		}
		catch (PatternSyntaxException e)
		{
			return null;
		}
	}

	private boolean hasBookOfTheDead()
	{
		ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
		ItemContainer equipment = client.getItemContainer(InventoryID.EQUIPMENT);
		if (inventory == null || equipment == null)
		{
			return false;
		}
		return inventory.contains(ItemID.BOOK_OF_THE_DEAD) || equipment.contains(ItemID.BOOK_OF_THE_DEAD);
	}

	private boolean checkGraphic()
	{
		for (int i : SUMMON_GRAPHICS) {
			if (client.getLocalPlayer().hasSpotAnim(i)) {
				return true;
			}
		}
		return false;
	}

	@Provides
	ThrallHelperConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ThrallHelperConfig.class);
	}
}

package com.portaguy;
import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

public class ThrallHelperOverlay extends OverlayPanel
{

	private final ThrallHelperConfig config;
	private final Client client;

	private final String LONG_TEXT = "You need to summon a thrall!";
	private final String SHORT_TEXT = "Thrall";

	@Inject
	private ThrallHelperOverlay(ThrallHelperConfig config, Client client)
	{
		this.config = config;
		this.client = client;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		panelComponent.getChildren().clear();

		switch (config.reminderStyle()) {
			case LONG_TEXT:
				panelComponent.getChildren().add((LineComponent.builder())
						.left(LONG_TEXT)
						.build());

				panelComponent.setPreferredSize(new Dimension(graphics.getFontMetrics().stringWidth(LONG_TEXT) - 20, 0));
				break;
			case SHORT_TEXT:
				panelComponent.getChildren().add((LineComponent.builder())
						.left(SHORT_TEXT)
						.build());
				panelComponent.setPreferredSize(new Dimension(graphics.getFontMetrics().stringWidth(SHORT_TEXT) + 10, 0));
				break;
			case CUSTOM_TEXT:
				panelComponent.getChildren().add((LineComponent.builder())
						.left(config.customText())
						.build());
				break;
		}

		if (config.shouldFlash()) {
			if (client.getGameCycle() % 40 >= 20)
			{
				panelComponent.setBackgroundColor(config.flashColor1());
			} else
			{
				panelComponent.setBackgroundColor(config.flashColor2());
			}
		} else {
			panelComponent.setBackgroundColor(config.flashColor1());
		}

		setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);

		if (config.reminderStyle() == ThrallHelperStyle.CUSTOM_TEXT) {
			return super.render(graphics);
		} else {
			return panelComponent.render(graphics);
		}
	}
}

package com.portaguy;

public enum ThrallHelperStyle {
    LONG_TEXT,
    SHORT_TEXT,
    CUSTOM_TEXT,
    INFOBOX
}

