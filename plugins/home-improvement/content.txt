package com.homeimprovement;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class HomeImprovementPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(HomeImprovementPlugin.class);
		RuneLite.main(args);
	}
}
package com.homeimprovement;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Constants {
	public static final int BUILD_MODE_VARBIT = 2176;
	public static final List<String> POH_OPTIONS = List.of("Remove" , "Upgrade" , "Revert" , "Remove-room" , "Remove-decorations" , "Build-in", "Build");
	public static final int POH_PORTAL_ID = 4525;
	public static final int WINTUMBER_TREE_ID = 19038;
	// This array has all Mahogany Homes objects and the morph ID they have when they are in need of replacement
	public static final Map<Integer, Integer> MH_OBJECTS = new HashMap<>() {{
		// West of Hosidius Estate Agent
		put(40002, 40017);
		put(40003, 40025);
		put(40004, 40043);
		put(40005, 40031);
		put(40006, 40031);
		put(40288, 40037);
		// East of Hosidius Market
		put(40007, 40031);
		put(40008, 40031);
		put(40009, 40017);
		put(40291, 40050);
		put(40292, 40115);
		// South of Hosidius
		put(40012, 40017);
		put(40013, 40043);
		put(40014, 40062);
		put(40015, 40062);
		put(40294, 40056);
		// North of Falador fountain
		put(40095, 40151);
		put(40096, 40151);
		put(40097, 40102);
		put(40098, 40102);
		// South-east of Falador fountain
		put(40084, 40102);
		put(40085, 40108);
		put(40086, 40115);
		put(40087, 40121);
		put(40088, 40121);
		// South of Falador fountain
		put(40090, 40102);
		put(40091, 40128);
		put(40092, 40134);
		put(40093, 40143);
		put(40094, 39967);
		// North of Ardougne Church
		put(40165, 40187);
		put(40166, 40187);
		put(40167, 40200);
		put(40169, 40207);
		// North of Ardougne Market
		put(40156, 39948);
		put(40157, 40115);
		put(40160, 40181);
		put(40161, 40108);
		put(40162, 40108);
		// East Ardougne
		put(40171, 40187);
		put(40172, 40187);
		put(40173, 39899);
		put(40174, 39905);
		put(40175, 40193);
		put(40176, 40108);
		// North-east Varrock
		put(39981, 39892);
		put(39983, 39899);
		put(39984, 39905);
		put(39985, 39911);
		put(39986, 39911);
		put(39987, 39917);
		put(39988, 39923);
		// Middle Varrock
		put(39989, 39929);
		put(39990, 39911);
		put(39991, 39935);
		put(39992, 39942);
		put(39993, 39923);
		put(39994, 39948);
		put(39996, 39955);
		// South Varrock
		put(39997, 39961);
		put(39998, 39974);
		put(39999, 39948);
		put(40000, 39967);
		put(40001, 39935);
	}};
}

package com.homeimprovement;

import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.MenuEntry;
import net.runelite.api.Point;
import net.runelite.api.Tile;

public class ObjectHelper {
	public static GameObject getHoveredObject(final Client client) {
		final MenuEntry[] menuEntries = client.getMenuEntries();
		if (menuEntries.length == 0) {
			return null;
		}

		final MenuEntry entry = client.isMenuOpen() ? getHoveredMenuEntry(client, menuEntries) : menuEntries[menuEntries.length - 1];

		switch (entry.getType()) {
			case WIDGET_TARGET_ON_GAME_OBJECT:
			case GAME_OBJECT_FIRST_OPTION:
			case GAME_OBJECT_SECOND_OPTION:
			case GAME_OBJECT_THIRD_OPTION:
			case GAME_OBJECT_FOURTH_OPTION:
			case GAME_OBJECT_FIFTH_OPTION:
			case EXAMINE_OBJECT:
			{
				return findTileGameObject(client, entry.getParam0(), entry.getParam1(), entry.getIdentifier());
			}
		}

		return null;
	}

	private static MenuEntry getHoveredMenuEntry(final Client client, final MenuEntry[] menuEntries) {
		final int menuX = client.getMenuX();
		final int menuY = client.getMenuY();
		final int menuWidth = client.getMenuWidth();
		final Point mousePosition = client.getMouseCanvasPosition();

		final int dy = mousePosition.getY() - menuY - 19;
		if (dy < 0) {
			return menuEntries[menuEntries.length - 1];
		}

		final int idx = menuEntries.length - 1 - (dy / 15);
		if (mousePosition.getX() > menuX && mousePosition.getX() < menuX + menuWidth && idx >= 0 && idx < menuEntries.length) {
			return menuEntries[idx];
		}

		return menuEntries[menuEntries.length - 1];
	}

	private static GameObject findTileGameObject(final Client client, final int x, final int y, final int id) {
		final Tile[][][] tiles = client.getScene().getTiles();
		final Tile tile = tiles[client.getPlane()][x][y];

		if (tile != null) {
			for (final GameObject gameObject : tile.getGameObjects()) {
				if (gameObject != null && gameObject.getId() == id) {
					return gameObject;
				}
			}
		}

		return null;
	}

	// Object entries always have an item ID of -1 and non-negative param values representing its x/y position
	public static boolean isObjEntry(final MenuEntry entry) {
		return entry.getItemId() == -1 && entry.getParam0() >= 0 && entry.getParam1() >= 0;
	}
}
package com.homeimprovement;

import java.util.Arrays;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.MenuEntry;
import net.runelite.api.ObjectComposition;
import net.runelite.api.TileObject;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

@Slf4j
@PluginDescriptor(
	name = "Home Improvement",
	description = "Removes several irrelevant menu options from furniture while not in build-mode such a \"build\", \"remove\" and \"upgrade\".",
	tags = {"home", "improvement", "poh", "menu", "context", "cleanup"}
)
public class HomeImprovementPlugin extends Plugin {
	private static boolean inPoh = false;
	@Inject
	private Client client;

	@Subscribe
	public void onGameObjectSpawned(final GameObjectSpawned e) {
		if (this.client.isInInstancedRegion()) {
			final GameObject obj = e.getGameObject();

			if (obj.getId() == Constants.POH_PORTAL_ID || obj.getId() == Constants.WINTUMBER_TREE_ID) {
				HomeImprovementPlugin.inPoh = true;
			}
		} else {
			HomeImprovementPlugin.inPoh = false;
		}
	}

	@Subscribe
	public void onMenuEntryAdded(final MenuEntryAdded e) {
		if (this.client.isInInstancedRegion()) {
			// PoH
			if (client.getVarbitValue(Constants.BUILD_MODE_VARBIT) == 0 && HomeImprovementPlugin.inPoh) {
				final MenuEntry[] entries = Arrays.stream(client.getMenuEntries())
					.filter(entry -> !ObjectHelper.isObjEntry(entry) || !Constants.POH_OPTIONS.contains(entry.getOption()))
					.toArray(MenuEntry[]::new);

				client.setMenuEntries(entries);
			}
		} else if (e.getOption().equals("Remove") && ObjectHelper.isObjEntry(e.getMenuEntry())) {
			// Mahogany Homes
			final TileObject obj = ObjectHelper.getHoveredObject(this.client);

			if (obj != null && Constants.MH_OBJECTS.containsKey(obj.getId())) {
				final ObjectComposition composition = this.client.getObjectDefinition(obj.getId());

				if (composition != null && composition.getImpostorIds() != null && Constants.MH_OBJECTS.get(obj.getId()) != composition.getImpostor().getId()) {
					final MenuEntry[] entries = Arrays.stream(client.getMenuEntries())
						.filter(entry -> entry.getIdentifier() != e.getIdentifier())
						.toArray(MenuEntry[]::new);

					client.setMenuEntries(entries);
				}
			}
		}
	}
}
