package com.bankorganizer;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import java.awt.Color;

@ConfigGroup("bankorganizer")
public interface BankOrganizerConfig extends Config
{
    @ConfigItem(
            keyName = "showBoxes",
            name = "Show Boxes",
            description = "Draw boxes over matching bank items"
    )
    default boolean showBoxes()
    {
        return true;
    }

    @ConfigItem(
            position = 1,
            keyName = "cat1Active",
            name = "Melee Categorization",
            description = "Enable or disable melee categorization"
    )
    default boolean cat1Active() { return true; }

    @ConfigItem(
            position = 2,
            keyName = "colorCat1",
            name = "Color",
            description = "Box Color for 'melee' items"
    )
    default Color colorCat1() { return Color.RED; }

    @ConfigItem(
            position = 3,
            keyName = "excludeCat1",
            name = "Excluded items",
            description = "Comma-separated list of item names to exclude from category"
    )
    default String excludeCat1() { return "granite dust, granite cannonball, hunter spear tips, ornament kit, wilderness sword, oathplate shards, raw swordfish, swordfish, blue moon spear"; }

    @ConfigItem(
            position = 4,
            keyName = "cat2Active",
            name = "Magic Categorization",
            description = "Enable or disable 'magic' categorization"
    )
    default boolean cat2Active() { return true; }

    @ConfigItem(
            position = 5,
            keyName = "colorCat2",
            name = "Color",
            description = "Box Color for 'magic' items"
    )
    default Color colorCat2() { return Color.BLUE; }

    @ConfigItem(
            position = 6,
            keyName = "excludeCat2",
            name = "Excluded items",
            description = "Comma-separated list of item names to exclude from category"
    )
    default String excludeCat2() { return "noose wand, hard hat, doctor's hat, enchanted symbol, banana hat, hat of the eye, elemental staff crown, runescroll of, mystic cards, chef's hat, santa hat, party hat, bobble hat, jester hat, tri-jester hat, woolly hat, battletsaff"; }

    @ConfigItem(
            position = 7,
            keyName = "cat3Active",
            name = "Range Categorization",
            description = "Enable or disable 'range' categorization"
    )
    default boolean cat3Active() { return true; }

    @ConfigItem(
            position = 8,
            keyName = "colorCat3",
            name = "Color",
            description = "Box Color for 'range' items"
    )
        default Color colorCat3()
            {
            return new Color(19, 255, 0);
            }

    @ConfigItem(
            position = 9,
            keyName = "excludeCat3",
            name = "Excluded items",
            description = "Comma-separated list of item names to exclude from category"
    )
    default String excludeCat3() { return "bowl, (unf), mixed hide base, crossbow string, fishbowl and net, blessed gold bowl, venator shard, snakeskin, (u), mixed hide cape, bronze arrowtips, iron arrowtips, steel arrowtips, mithril arrowtips, broad arrowheads, adamant arrowtips, rune arrowtips, amethyst arrowtips, dragon arrowtips"; }

    @ConfigItem(
            position = 10,
            keyName = "cat4Active",
            name = "Skilling Categorization",
            description = "Enable or disable 'skilling' categorization"
    )
    default boolean cat4Active() { return true; }

    @ConfigItem(
            position = 11,
            keyName = "colorCat4",
            name = "Color",
            description = "Box Color for 'skilling' items"
    )
    default Color colorCat4()
    {
        return new Color(0, 255, 255);
    }

    @ConfigItem(
            position = 12,
            keyName = "excludeCat4",
            name = "Excluded items",
            description = "Comma-separated list of item names to exclude from category"
    )
    default String excludeCat4() { return "blighted super restore(1), blighted super restore(2), blighted super restore(3), blighted super restore(4), sapphire lantern, emerald lantern, diamond dragon bolts, dragonstone dragon bolts, emerald dragon bolts, jade dragon bolts, onyx dragon bolts, opal dragon bolts, pearl dragon bolts, ruby dragon bolts, sapphire dragon bolts, topaz dragon bolts, sapphite bolts, emerald bolts, ruby bolts, diamond bolts, dragonstone bolts, onyx bolts,  blighted super restore, ruby harvest, sapphire glacialis, zenyte shard, barrelchest anchor, bolts, barrows gloves, toadflax seed, super restore, (unf), toadflax, metal feather, black tourmaline core, lava battlestaff, iban's staff (u), mud battlestaff, steam battlestaff, smoke battlestaff, mist battlestaff, dust battlestaff, air battlestaff, water battlestaff, earth battlestaff, fire battlestaff, amethyst arrows, amethyst darts, amethyst javelins, runescroll of bloodbark, runescroll of swampbark, cannon barrels"; }

    @ConfigItem(
            position = 13,
            keyName = "cat5Active",
            name = "Potions Categorization",
            description = "Enable or disable 'potions' categorization"
    )
    default boolean cat5Active() { return true; }

    @ConfigItem(
            position = 14,
            keyName = "colorCat5",
            name = "Color",
            description = "Box Color for 'potion' items"
    )
    default Color colorCat5()
        {
        return new Color(147, 112, 219);
        }

    @ConfigItem(
            position = 15,
            keyName = "excludeCat5",
            name = "Excluded items",
            description = "Comma-separated list of item names to exclude from category"
    )
    default String excludeCat5() { return "snape grass seed, guam seed, marrentill seed, tarromin seed, harralander seed, ranarr seed, toadflax seed, irit seed, avantoe seed, kwuarm seed, snapdragon seed, huasca seed, cadantine seed, lantadyme seed, dwarf weed seed, torstol seed, superior dragon bones, spirit flakes, guam seed, marrentill seed, tarromin seed, harralander seed, ranarr seed, toadflax seed, irit seed, avantoe seed, kwuarm seed, huasca seed, snapdragon seed, cadantine seed, lantadyme seed, dwarf weed seed, torstol seed"; }

    @ConfigItem(
            position = 16,
            keyName = "cat6Active",
            name = "Slayer Loot Categorization",
            description = "Enable or disable 'slayer' categorization"
    )
    default boolean cat6Active() { return false; }

    @ConfigItem(
            position = 17,
            keyName = "colorCat6",
            name = "Color",
            description = "Box Color for 'slayer' items"
    )
    default Color colorCat6()
    {
        return new Color(207, 166, 11);
    }

    @ConfigItem(
            position = 18,
            keyName = "excludeCat6",
            name = "Excluded items",
            description = "Comma-separated list of item names to exclude from category"
    )
    default String excludeCat6() { return "10th squad sigil, bonecrusher, hallowed crystal shard, bones to peaches"; }

    @ConfigItem(
            position = 19,
            keyName = "cat7Active",
            name = "Tools & Misc Categorization",
            description = "Enable or disable 'tools & misc' categorization"
    )
    default boolean cat7Active() { return false; }

    @ConfigItem(
            position = 20,
            keyName = "colorCat7",
            name = "Color of Toolbox",
            description = "Box Color for 'tools' items"
    )
    default Color colorCat7()
    {
        return new Color(255, 123, 123);
    }

    @ConfigItem(
            position = 21,
            keyName = "excludeCat7",
            name = "Excluded items",
            description = "Comma-separated list of item names to exclude from category"
    )
    default String excludeCat7() { return "bronze knife, iron knife, steel knife, black knife, mithril knife, adamant knife, monkey talisman, xeric's talisman, reagent pouch, abyssal red dye, abyssal blue dye, abyssal green dye, dark dye, rune pouch, divine rune pouch, infernal cape, rune knife, nail beast nails, potato seed, battleaxe, wahammer, thrownaxe,potato cactus, potion, dragon warhammer, bucket of sand, metal feather, tuna potato, baked potato, dragon knife"; }

    @ConfigItem(
            position = 25,
            keyName = "cat8Active",
            name = "Food categorization",
            description = "Enable or disable 'food' categorization"
    )
    default boolean cat8Active() { return false; }

    @ConfigItem(
            position = 26,
            keyName = "colorCat8",
            name = "Color",
            description = "Box color for 'food' items"
    )
    default Color colorCat8() { return new Color(128, 0, 128); }

    @ConfigItem(
            position = 27,
            keyName = "excludeCat8",
            name = "Excluded items",
            description = "Comma-separated list of item names to exclude from category"
    )
    default String excludeCat8() { return "curry leaf, lobster pot, curry tree seed, strawberry seed, crawling hand, strawberries, strawberry, seed, leaf, spiked boots, shark lure, wine of zamorak, half full wine jug"; }

    @ConfigItem(
            position = 31,
            keyName = "cat9Active",
            name = "Farming Categorization",
            description = "Enable or disable 'farming' categorization"
    )
    default boolean cat9Active() { return true; }

    @ConfigItem(
            position = 32,
            keyName = "colorCat9",
            name = "Color",
            description = "Box color for 'farming' items"
    )
    default Color colorCat9() { return new Color(20, 100, 17); }

    @ConfigItem(
            position = 33,
            keyName = "excludeCat9",
            name = "Excluded items",
            description = "Comma-separated list of item names to exclude from category"
    )
    default String excludeCat9() { return "banana hat, orange egg sac, diving apparatus, mithril grapple, mithril seeds, orange dye, apple pie, orange feather, cooked sweetcorn, baked potato, tuna potato, black mushroom, bowl, mushroom potato, mushroom & onion, sliced mushroom, fried mushroom, fossilised mushroom, uncooked mushroom pie, half a mushroom pie, mushroom pie, crystal tool seed, crystal armour seed, crystal weapon seed, enhanced crystal weapon seed, crystal acorn"; }

    @ConfigItem(
            position = 34,
            keyName = "cat10Active",
            name = "Skilling Outfit Categorization",
            description = "Enable or disable Category 10 highlighting"
    )
    default boolean cat10Active() { return false; }

    @ConfigItem(
            position = 35,
            keyName = "colorCat10",
            name = "Color",
            description = "Color for 'skilling outfit' items"
    )
    default Color colorCat10() { return new Color(0, 100, 100); }

    @ConfigItem(
            position = 36,
            keyName = "excludeCat10",
            name = "Excluded items",
            description = "Comma-separated list of item names to exclude from category"
    )
    default String excludeCat10() { return "anglerfish"; }

    @ConfigSection(
            name = "Special Case Items",
            description = "Items with rules based on quests, diaries, skills, or other conditions (Recommended with high QP/Cape)",
            position = 50,
            closedByDefault = false
    )
    String specialCaseSection = "specialCaseSection";

    @ConfigItem(
            keyName = "stringConfig",
            name = "",
            description = "",
            position = 10,
            section = specialCaseSection
        )
    default String stringConfig() { return "En exhaustive bank clean-up for quest-item and diverse misc items; not niche achievement diary-specific & clue-doers inclusive - beware. "; }

    @ConfigItem(
            keyName = "specialItemsActive",
            name = "Bank Cleanup",
            description = "Enable or disable highlighting for items with special rules",
            position = 11,
            section = specialCaseSection
    )
    default boolean specialItemsActive() { return false; }

    @ConfigItem(
            keyName = "specialItemsKeepColor",
            name = "Keep (still used in quest)",
            description = "Color for items when they should be kept, still has a use in quests, etc",
            position = 12,
            section = specialCaseSection
    )
    default Color specialItemsKeepColor()
    {
        return new Color(255, 255, 255);
    }

    @ConfigItem(
            keyName = "specialItemsDiscardColor",
            name = "Discard Color",
            description = "Color for items when they are free to be discarded",
            position = 13,
            section = specialCaseSection
    )
    default Color specialItemsDiscardColor()
    {
        return new Color(0 , 0, 0);
    }
}

package com.bankorganizer;

import java.util.*;

public class    ItemCategories
{
    public static final Map<Integer, List<String>> CATEGORY_PATTERNS = new HashMap<>();

    static
    {
        CATEGORY_PATTERNS.put(1, Arrays.asList("defender", "full helm", "kiteshield", "plateskirt", "platelegs", "chainbody", "platebody", "initiate", "proselyte", "inquisitor", "rock-shell",
                "sunfire fanatic", "granite", "blood moon", "obsidian", "3rd age longsword", "bandos chestplate", "bandos tassets", "bandos boots", "justiciar", "dragonfire shield",
                "dinh's bulwark", "oathplate", "torva", "warrior helm", "berserker", "neitiznot", "dharok's", "torag's", "verac's", "guthan's", "serpentine helm", "tanzanite helm",
                "magma helm", "dwarven helmet", "fighter hat", "fighter torso", "runner hat", "granite helm", "granite body", "granite legs", "granite shield", "granite gloves", "granite boots",
                "granite maul", "granite longsword", "granite hammer", "granite ring", "dragonstone boots", "dragonstone gauntlets", "climbing boots", "rune boots", "guardian boots", "echo boots",
                "spiked manacles", "dragon boots", "primordial boots", "mace", "tzhaar-ket-em", "warhammer", "tzhaar-ket-om", "elder maul", "abyssal bludgeon", "barrelchest anchro",
                "dual macuahuitl", "glacial temotli", "keris partisan", "sarachnis cudgel", "chainmace", "blade of saeldor", "scimitar", "longsword", "battleaxe", "zombie axe", "claws",
                "halberd", "2h", "godsword", "colossal blade", "saradomin sword", "abyssal tentacle", "abyssal whip", "scythe of vitur", "soulreaper axe", "sulphur blades", "toktz-xil-ek",
                "voidwaker", "silverlight", "darklight", "arclight", "emberlight", "arkan blade", "dagger", "sword", "toktz-xil-ak", "ghrazi rapier", "osmumten's fang", "spear", "hasta",
                "lance", "swift blade", "earthbound tecpatl", "ferocious gloves", "amulet of rancour", "infernal cape"));

        CATEGORY_PATTERNS.put(2, Arrays.asList("air rune", "water rune", "earth rune", "fire rune", "sunfire rune", "mind rune", "body rune", "cosmic rune", "chaos rune",
                "astral rune", "nature rune", "law rune", "death rune", "blood rune", "soul rune", "wrath rune", "mist rune", "dust rune", "mud rune", "smoke rune",
                "steam rune", "lava rune", "aether rune", "staff", "wand", "sceptre", "toktz-mej-tal", "void knight mace","blue moon spear", "trident", "eye of ayak", "tumeken's shadow",
                "wizard hat", "wizard robe", "skeletal", "ancestral", "hat", "ghostly", "mystic", "xerician", "moonclan", "lunar", "splitbark", "swampbark", "bloodbark", "enchanted", "of darkness",
                "elder chaos", "dagon'hai", "infinity", "farseer helm", "blue moon", "ahrim's", "3rd age mage hat", "3rd age robe top", "3rd age amulet", "3rd age robe", "virtus",
                "zamorak monk top", "zamorak monk bottom", "tormented bracelet", "confliction gauntlets", "eternal boots", "wizard boots", "zamorak cape", "saradomin cape", "guthix cape",
                "amulet of magic", "occult necklace", "seers ring", "brimstone ring", "magus ring", "elidinis' ward", "book of the dead", "tome of", "book of darkness", "malediction ward",
                "mage's book", "ancient wyvern shield", "arcane spirit shield", "talisman", "rune pouch", "small pouch", "medium pouch", "large pouch", "giant pouch", "colossal pouch", "teleport",
                "quetzal histle", "calcified moth", "ectophial", "grand seed pod", "hallowed crystal shard", "icy basalt", "stony basalt", "plain of mud sphere", "goblin village sphere", "dorgesh-kaan sphere",
                "escape crystal", "chronicle", "kharedst's memoirs", "enchanted lyre", "xeric's talisman", "pendant of ates", "drakan's medallion", "burning amulet", "amulet of the eye", "giantsoul amulet", "amulet of eternal glory",
                "digsite pendant", "games necklace", "necklace of passage", "skills necklace", "slayer ring", "ring of returning", "ring of dueling"));

        CATEGORY_PATTERNS.put(3, Arrays.asList("leather cowl", "snakeskin bandana", "snakeskin body", "snakeskin boots", "snakeskin chaps", "snakeskin shield", "snakeskin vambraces",
                "coif", "shayzien", "spined", "ranger hat", "archer helm", "hueycoatl hide body", "hueycoatl hide chaps", "karil's", "vambraces", "eclipse moon", "eclipse atlatl", "robin hood hat",
                "3rd age range", "3rd age bow", "crystal helm", "crystal body", "crystal legs", "armadyl helmet", "armadyl chestplate", "armadyl chainskirt", "masori", "hardleather body",
                "studded body", "studded chap", "frog-leather", "rangers' tunic", "d'hide", "mixed hide", "penance skirt", "rangers' tights", "ranger boots", "pegasian boots", "ranging cape",
                "ava's","dizana's", "necklace of anguish", "archers ring", "venator", "hard leather shield", "book of law", "odium ward", "dragonfire ward", "twisted buckler", "chaps",
                "shortbow", "longbow", "composite bow", "rain bow", "seercull", "dark bow", "craw's bow", "webweaver bow", "crystal bow", "scorching bow", "bow of faerdhinen", "venator bow",
                "twisted bow", "bow", "crossbow", "ballista", "dart", "bronze knife", "iron knife", "steel knife", "mithril knife", "adamant knife", "rune knife", "dragon knife",
                "thrownaxe", "chinchompa", "toktz-xil-ul", "hunter's spear", "toxic blowpipe", "tonalztics of ralos", "arrow", "bolts", " brutal"));

        CATEGORY_PATTERNS.put(4, Arrays.asList("bar","ore", "coal", "uncut", "opal", "jade", "topaz", "sapphire", "emerald", "ruby", "diamond", "dragonstone", "onyx", "zenyte", "giant seaweed",
                "soda ash", "bucket of sand", "molten glass", "clay", "plank", "logs", "battlestaff", "unpowered orb", "air orb", "water orb", "earth orb", "fire orb", "flax",
                "bow string", "(u)", "amethyst", "(unf)", "arrowtips", "javelin heads", "headless arrow", "bolt tips", "dart tip", "feather", "golden nugget", "stardust", "arrow shafts"));

        CATEGORY_PATTERNS.put(5, Arrays.asList("potion", "grimy", "guam", "marrentill", "tarromin", "harralander", "ranarr", "toadflax", "irit", "avantoe", "kwuarm", "huasca", "snapdragon", "cadantine",
                "lantadyme", "dwarf weed", "torstol", "super", "eye of newt", "limpwurt root", "red spiders' eggs", "white berries", "snape grass", "mort myre fungus", "aldarium",
                "star flower", "nail beast nails", "yew roots", "lily of the sands", "wine of zamorak", "cactus spine", "potato cactus", "amylase crystal", "jangerberries", "magic roots",
                "cave nightshade", "nightshade", "poison ivy berries", "zulrah's scales", "ancient essence", "araxyte venom sack", "demonic tallow", "unicorn horn", "chocolate bar", "chocolate dust",
                "goat horn dust", "desert goat horn", "kebbit teeth", "gorak claws", "blue dragon scale", "dragon scale dust", "crystal dust", "crushed nest", "lava scale shard", "crushed superior dragon bones",
                "ashes", "volcanic ash", "nihil dust", "saradomin brew", "antidote", "anti-venom", "menaphite remedy","sanfew serum", "antifire potion", "extended antifire", "vial of water", "pestle and mortar",
                "ruby harvest", "sapphire glacialis", "black warlock", "moonlight moth", "sunlight moth", "reagent pouch", "alchemist's amulet", "prescription goggles", "bird nest", "coconut milk", "toad's legs",
                "chugging barrel", "alchemist labcoat", "alchemist pants", "alchemist gloves", "aga paste", "lye paste", "mox paste", "guam tar", "marrentill tar", "tarromin tar", "harralander tar", "irit tar",
                "swamp tar"));

        CATEGORY_PATTERNS.put(6, Arrays.asList("Head", "bone", "loop half of key", "tooth half of key", "crystal key", "bones", "bone shards", "ensouled", "zulrah's scale", "long bone",
                "rune full helm", "rune platebody", "rune platelegs", "rune plateskirt", "rune chainbody", "rune sq shield", "rune kiteshield", "rune med helm", "dragon halberd", "rune halberd",
                "rune spear", "rune warhammer", "rune battleaxe", "rune 2h sword", "rune longsword", "rune scimitar", "dragon dagger", "dragon longsword", "dragon scimitar", "dragon spear",
                "granite hammer", "granite maul", "abyssal whip", "dragon javelin heads", "amulet of the damned", "zenyte shard", "ballista spring", "frame", "ballista limbs", "unstrung heavy ballista",
                "dragon bolts (unf)", "ancient shard", "dark totem", "rune javelin heads", "dragon dart tip", "crystal shard", "crystal armour seed", "enhanced crystal weapon seed", "firelighter",
                "rune arrowtips", "dragonhide", "dragon arrowtips", "dragon plateskirt", "dragon platelegs", "dragon chainbody", "dragon med helm", "drake's tooth", "magic fang", "tanzanite fang",
                "serpentine visage", "hilt", "godsword shard", "thread of elidinis", "ancient essence", "dark bow", "hydra's", "hydra leather", "venator shard", "steam battlestaff", "hydra tail",
                "dragon sword", "dragon knife", "dragon thrownaxe", "shield left half", "awakener's orb", "granite gloves", "sunfire splinters", "jar of", "black tourmaline core", "kraken tentacle",
                "champion scroll", "coagulated venom", "egg sac", "charged ice", "rune boots", "dragonstone bolt tips", "skull of vet'ion", "prayer scroll", "eye of the duke", "leviathan's lure",
                "chromium ingot", "quartz", "zamorakian spear", "unsired", "araxyte fang", "noxious", "bryophyta", "tyrannical ring", "claws of callisto", "voicwaker hilt", "eternal crystal",
                "pegasian crystal", "primordial crystal", "smouldering stone", "dragon 2h", "odium shard", "malediction shard", "saradomin's light", "sigil", "holy elixir", "spirit shield", "mokhaiotl cloth",
                "vestige", "echo crystal", "crystal weapon seed", "hueycoatl hide", "draconic visage", "nihil horn", "volatile orb", "harmonised orb", "eldritch orb", "parasitic egg", "hill giant club",
                "element staff crown", "dark claw", "executioner's axe head", "treasonous ring", "fangs of venenatis", "voidwaker gem", "ring of the gods", "voidwaker blade", "skeletal visage",
                "dragonbone necklace", "siren's staff", "contract of", "crystal tool seed", "zolcano shard", "mutagen", "avernic defender hilt", "sanguine dust", "holy ornament kit", "sanguine ornament kit",
                "torn prayer scroll", "metamorphic dust", "twisted ancestral colour kit", "kodai insignia", "breach of the scarab", "eye of the corruptor", "jewel of the sun", "jewel of amascut",
                "eternal gem", "basilisk jaw", "tormented synapse", "oathplate shards", "onyx bolt", " impling jar", "mossy key", "giant key"));

        CATEGORY_PATTERNS.put(7, Arrays.asList("axe", "pickaxe", "butterfly net", "knife", "chisel", "hammer", "saw", "fishing rod", "fishing bait", "sandworms", "diabolic worms",
                "feather", "bucket", "pot", "fishing net", "rope", "lockpick", "tinderbox", "mould", "costume needle", "harpoon", "nails", "bowl", "karambwan vessel", "fish barrel",
                "farming rake", "seed dibber", "spade", "gricoller's can", "gardening trowel", "compost", "plant cure", "secatures", "infernal", "rogue kit", "trowel", "specimen", "talisman", "pouch", "dye",
                "candle", "rock pick", "jug of water", "box trap", "bird snare", "teasing stick", "noose wand", "butterfly jar", "ball of wool", "lantern","rabbit snare", "huntsman's kit", "goldsmith gauntlets",
                "ice gloves", "swamp tar", "swamp paste", "machete", "torch", "blackjack", "bonecrusher", "ash sanctifier", "ectoplasmator", "soul bearer", "spice"));

        CATEGORY_PATTERNS.put(8, Arrays.asList("raw", "pie", "anchovies", "anglerfish", "baked potato", "bass", "blighted anglerfish", "blighted karambwan", "blighted manta ray",
                "wine", "bread", "cake", "chilli potato", "cod", "cooked", "curry", "dark crab", "egg potato", "giant carp", "herring", "kebab", "lobster", "mackeral", "manta ray",
                "pizza", "monkfish", "mushroom potato", "peach", "pike", "potato with cheese", "premade", "purple sweets", "roast", "salmon", "sardine", "sea turtle", "shark", "shrimp", "spicy",
                "sandwich", "stew", "strange fruit", "swordfish", "trout", "tuna", "cooking gauntlets"));

        CATEGORY_PATTERNS.put(9, Arrays.asList("seeds", "seaweed spore", "seed", "plant pot", "watering can", "diving apparatus", "fishbowl helmet", "magic secatures", "empty sack", "basket", "tomatoes",
                "strawberries", "bananas", "apples", "curry leaf", "cabbage", "sweetcorn", "onion", "pineapple", "poison ivy berries", "watermelon", "strawberry", "papaya fruit",
                "coconut", "dragonfruit", "calquat fruit", "mushroom", "jangerberries", "grapes", "saltpetre", "nightshade", "cactus spine", "hops", "potato", "snape grass", "barley",
                "hammerstone", "asgarnian", "jute fibre", "yanillian", "krandorian", "wildblood", "redberries", "cadava berries", "dwellberries", "jangerberries", "white berries",
                "poison ivy berries", "roots", "apple", "banana", "orange", "zamorak's grapes", "potatoes(10)", "onions(10)", "cabbages(10)", "celastrus bark", "acorn", "seedling",
                "sapling", "farming rake", "seed dibber", "spade", "gricoller's can", "gardening trowel", "plant cure", "bottomless bucket", "compost", "mushroom spore"));

        CATEGORY_PATTERNS.put(10, Arrays.asList("graceful", "carpenter", "farmer", "pyromancer", "angler", "spirit angler", "guild hunter", "prospector", "zealot", "raiments of the eye",
                "smiths", "rogue", "lumberjack", "forestry", "ardougne cloak", "desert amulet", "falador shield", "fremennik sea boots", "kandarin headgear", "karamja gloves", "rada's blessing", "explorer's ring", "morytania legs",
                "varrock armour", "western banner", "wilderness sword"));
    }
}

//multi-target items - consider: slayer helmet, aranea boots, void, barrows gloves, anti-dragon shield
package com.bankorganizer;

import com.google.inject.Provides;
import javax.inject.Inject;
import java.awt.Color;
import java.util.*;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemID;
import net.runelite.api.Quest;
import net.runelite.api.QuestState;
import net.runelite.api.Varbits;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
        name = "Bank Organizer",
        description = "Allows for easy bank organization into categories with custom colors and exclusions"
)

public class BankOrganizerPlugin extends Plugin
{
    @Inject
    private Client client;

    @Inject
    private BankOrganizerConfig config;

    @Inject
    private BankOrganizerOverlay overlay;

    @Inject
    private OverlayManager overlayManager;

    private static class SpecialCaseRule
    {
        final int itemId;
        final Predicate<Client> keepCondition;

        SpecialCaseRule(int itemId, Predicate<Client> keepCondition)
        {
            this.itemId = itemId;
            this.keepCondition = keepCondition;
        }
    }

    private static final List<SpecialCaseRule> SPECIAL_CASES = List.of(
            new SpecialCaseRule(
                    ItemID.DRAMEN_STAFF,
                    c -> c.getVarbitValue(Varbits.DIARY_LUMBRIDGE_ELITE) != 1
            ),
            new SpecialCaseRule(
                    ItemID.LUNAR_STAFF,
                    c -> c.getVarbitValue(Varbits.DIARY_LUMBRIDGE_ELITE) != 1
            ),
            new SpecialCaseRule(
                    ItemID.SPIKED_BOOTS,
                    c -> Quest.DESERT_TREASURE_I.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.OGRE_BELLOWS,
                    c -> Quest.RECIPE_FOR_DISASTER.getState(c) !=QuestState.FINISHED
                    && Quest.MOURNINGS_END_PART_I.getState(c) !=QuestState.FINISHED
                    && c.getVarpValue(Varbits.DIARY_WESTERN_ELITE) !=1
            ),
            new SpecialCaseRule(
                    ItemID.TROWEL,
                    c -> Quest.ANOTHER_SLICE_OF_HAM.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BATTERED_BOOK,
                    c -> Quest.ELEMENTAL_WORKSHOP_I.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BATTERED_KEY,
                    c -> Quest.ELEMENTAL_WORKSHOP_I.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.FAKE_BEARD,
                    c -> Quest.WANTED.getState(c) !=QuestState.FINISHED
                    && Quest.FORGETTABLE_TALE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.RED_HOT_SAUCE,
                    c -> Quest.MY_ARMS_BIG_ADVENTURE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.RED_VINE_WORM,
                    c -> Quest.FAIRYTALE_I__GROWING_PAINS.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.DRAMEN_BRANCH,
                    c -> Quest.RECIPE_FOR_DISASTER__SIR_AMIK_VARZE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BLACK_MUSHROOM,
                    c -> Quest.SHADOW_OF_THE_STORM.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.STRANGE_IMPLEMENT,
                    c -> Quest.SHADOW_OF_THE_STORM.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BLACK_DYE,
                    c -> Quest.SHADOW_OF_THE_STORM.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.KARAMJAN_RUM,
                    c -> Quest.TAI_BWO_WANNAI_TRIO.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.GHOSTSPEAK_AMULET,
                    c -> Quest.ANIMAL_MAGNETISM.getState(c) !=QuestState.FINISHED
                    && Quest.NATURE_SPIRIT.getState(c) !=QuestState.FINISHED
                    && Quest.GHOSTS_AHOY.getState(c) !=QuestState.FINISHED
                    && Quest.MAKING_HISTORY.getState(c) !=QuestState.FINISHED
                    && Quest.CREATURE_OF_FENKENSTRAIN.getState(c) !=QuestState.FINISHED
                    && Quest.FAIRYTALE_I__GROWING_PAINS.getState(c) !=QuestState.FINISHED
                    && Quest.CABIN_FEVER.getState(c) != QuestState.FINISHED
                    && Quest.DRAGON_SLAYER_II.getState(c) != QuestState.FINISHED
                    && Quest.A_NIGHT_AT_THE_THEATRE.getState(c) != QuestState.FINISHED
                    && Quest.CURSE_OF_THE_EMPTY_LORD.getState(c) != QuestState.FINISHED
                    && Quest.THE_GENERALS_SHADOW.getState(c) != QuestState.FINISHED
                    && Quest.HOPESPEARS_WILL.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BROKEN_GLASS,
                    c -> Quest.FORGETTABLE_TALE.getState(c) != QuestState.FINISHED
                    && Quest.SEA_SLUG.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.ROGUES_PURSE,
                    c -> Quest.ZOGRE_FLESH_EATERS.getState(c) != QuestState.FINISHED
                    && Quest.JUNGLE_POTION.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.GLARIALS_PEBBLE,
                    c -> Quest.ROVING_ELVES.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.KEY_298,
                    c -> Quest.SONG_OF_THE_ELVES.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.DOOR_KEY,
                    c -> Quest.GRIM_TALES.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.HAM_BOOTS,
                    c -> Quest.DEATH_TO_THE_DORGESHUUN.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.HAM_CLOAK,
                    c -> Quest.DEATH_TO_THE_DORGESHUUN.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.HAM_GLOVES,
                    c -> Quest.DEATH_TO_THE_DORGESHUUN.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.HAM_HOOD,
                    c -> Quest.DEATH_TO_THE_DORGESHUUN.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.HAM_LOGO,
                    c -> Quest.DEATH_TO_THE_DORGESHUUN.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.HAM_ROBE,
                    c -> Quest.DEATH_TO_THE_DORGESHUUN.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.HAM_SHIRT,
                    c -> Quest.DEATH_TO_THE_DORGESHUUN.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.COMMORB,
                    c -> Quest.WANTED.getState(c) != QuestState.FINISHED
                    && Quest.THE_SLUG_MENACE.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.GOUTWEED,
                    c -> Quest.EADGARS_RUSE.getState(c) != QuestState.FINISHED
                    && Quest.DREAM_MENTOR.getState(c) != QuestState.FINISHED
                    && Quest.DRAGON_SLAYER_II.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.SEAL_OF_PASSAGE,
                    c -> Quest.DREAM_MENTOR.getState(c) != QuestState.FINISHED
                    && c.getVarbitValue(Varbits.DIARY_FREMENNIK_ELITE) !=1
            ),
            new SpecialCaseRule(
                    ItemID.ANIMATE_ROCK_SCROLL,
                    c -> Quest.KINGS_RANSOM.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.MSPEAK_AMULET,
                    c -> Quest.MONKEY_MADNESS_II.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.MSPEAK_AMULET_4022,
                    c -> Quest.MONKEY_MADNESS_II.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BARREL_OF_NAPHTHA,
                    c -> Quest.MOURNINGS_END_PART_I.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BARREL_OF_COAL_TAR,
                    c -> Quest.MOURNINGS_END_PART_I.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.KARAMJAN_MONKEY_GREEGREE,
                    c -> Quest.MONKEY_MADNESS_II.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.KRUK_MONKEY_GREEGREE,
                    c -> Quest.MONKEY_MADNESS_II.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.GORILLA_GREEGREE,
                    c -> Quest.MONKEY_MADNESS_II.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.NINJA_MONKEY_GREEGREE,
                    c -> Quest.MONKEY_MADNESS_II.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.ZOMBIE_MONKEY_GREEGREE,
                    c -> Quest.MONKEY_MADNESS_II.getState(c) != QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.OGRE_BOW,
                    c -> Quest.RECIPE_FOR_DISASTER.getState(c) !=QuestState.FINISHED
                    && Quest.MOURNINGS_END_PART_I.getState(c) !=QuestState.FINISHED
                    && c.getVarpValue(Varbits.DIARY_WESTERN_ELITE) !=1
            ),
            new SpecialCaseRule(
                    ItemID.COMP_OGRE_BOW,
                    c -> Quest.RECIPE_FOR_DISASTER.getState(c) !=QuestState.FINISHED
                    && Quest.MOURNINGS_END_PART_I.getState(c) !=QuestState.FINISHED
                    && c.getVarpValue(Varbits.DIARY_WESTERN_ELITE) !=1
            ),
            new SpecialCaseRule(
                    ItemID.CATSPEAK_AMULET,
                    c -> Quest.RATCATCHERS.getState(c) !=QuestState.FINISHED
                    && Quest.A_TAIL_OF_TWO_CATS.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.SILVER_SICKLE_B,
                    c -> Quest.FAIRYTALE_I__GROWING_PAINS.getState(c) !=QuestState.FINISHED
                    && Quest.A_TASTE_OF_HOPE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.MOURNER_BOOTS,
                    c -> Quest.MOURNINGS_END_PART_II.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.MOURNER_CLOAK,
                    c -> Quest.MOURNINGS_END_PART_II.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.MOURNER_GLOVES,
                    c -> Quest.MOURNINGS_END_PART_II.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.MOURNER_TOP,
                    c -> Quest.MOURNINGS_END_PART_II.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.MOURNER_TROUSERS,
                    c -> Quest.MOURNINGS_END_PART_II.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.EXCALIBUR,
                    c -> Quest.HOLY_GRAIL.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.DRAMEN_STAFF,
                    c -> c.getVarbitValue(Varbits.DIARY_LUMBRIDGE_ELITE) !=1
            ),
            new SpecialCaseRule(
                    ItemID.LUNAR_STAFF,
                    c -> c.getVarbitValue(Varbits.DIARY_LUMBRIDGE_ELITE) !=1
            ),
            new SpecialCaseRule(
                    ItemID.SNAKE_CHARM,
                    c -> Quest.RATCATCHERS.getState(c) !=QuestState.FINISHED
                    && Quest.THE_FEUD.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.UGTHANKI_DUNG,
                    c -> Quest.FORGETTABLE_TALE.getState(c) !=QuestState.FINISHED
                    && Quest.MY_ARMS_BIG_ADVENTURE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.GNOME_AMULET,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.KLANKS_GAUNTLETS,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.RING_OF_CHAROS,
                    c -> Quest.GARDEN_OF_TRANQUILLITY.getState(c) !=QuestState.FINISHED
                    && Quest.THE_GREAT_BRAIN_ROBBERY.getState(c) !=QuestState.FINISHED
            ),
            new  SpecialCaseRule(
                    ItemID.BLURITE_ORE,
                    c -> c.getVarbitValue(Varbits.DIARY_FALADOR_EASY) !=1
            ),
            new SpecialCaseRule(
                    ItemID.CRYSTALMINE_KEY,
                    c -> Quest.HAUNTED_MINE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BEATEN_BOOK,
                    c -> c.getVarbitValue(Varbits.DIARY_KANDARIN_MEDIUM) !=1
            ),
            new SpecialCaseRule(
                    ItemID.BROOCH,
                    c -> Quest.THE_LOST_TRIBE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.EAGLE_CAPE,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.FAKE_BEAK,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.CAMEL_MASK,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.BOMBER_CAP,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.BOMBER_JACKET,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.ORIGAMI_BALLOON,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.PERFECT_RING,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.PERFECT_NECKLACE,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.SHOES,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.KHAZARD_ARMOUR,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.PET_ROCK,
                    c -> c.getVarbitValue(Varbits.DIARY_FREMENNIK_MEDIUM) !=1
            ),
            new SpecialCaseRule(
                    ItemID.HAZEELS_MARK,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.CARNILLEAN_ARMOUR,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.BLURITE_SWORD,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.PLAGUE_JACKET,
                    c -> Quest.SHEEP_HERDER.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.PLAGUE_TROUSERS,
                    c -> Quest.SHEEP_HERDER.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.SLAVE_BOOTS,
                    c -> Quest.THE_TOURIST_TRAP.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.SLAVE_ROBE,
                    c -> Quest.THE_TOURIST_TRAP.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.SLAVE_SHIRT,
                    c -> Quest.THE_TOURIST_TRAP.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.HARD_HAT,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.BUILDERS_BOOTS,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.BUILDERS_SHIRT,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.BUILDERS_TROUSERS,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.GOLD_HELMET,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.GADDERHAMMER,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.BEADS_OF_THE_DEAD,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.DARK_DAGGER,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.GLOWING_DAGGER,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.CRYSTAL_PENDANT,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.FIXED_DEVICE,
                    c -> Quest.MOURNINGS_END_PART_I.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.RAT_POLE,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.DOCTORS_HAT,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.NURSE_HAT,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.BEDSHEET,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.CRYSTAL_TRINKET,
                    c -> Quest.MOURNINGS_END_PART_II.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.FISHING_PASS,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.BLESSED_GOLD_BOWL,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.MOUSE_TOY,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.PRAYER_BOOK,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.WROUGHT_IRON_KEY,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.BEACON_RING,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.LOCATING_CRYSTAL,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.BERVIRIUS_NOTES,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.STEEL_KEY_RING,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.ARMADYL_PENDANT,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.POLISHED_BUTTONS,
                    c -> Quest.ANIMAL_MAGNETISM.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.SHEEP_FEED,
                    c -> Quest.SHEEP_HERDER.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.MEDICAL_GOWN,
                    c -> Quest.BIOHAZARD.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.PIGEON_CAGE,
                    c -> Quest.BIOHAZARD.getState(c) !=QuestState.FINISHED
                    && Quest.ONE_SMALL_FAVOUR.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.PIGEON_CAGE_425,
                    c -> Quest.BIOHAZARD.getState(c) !=QuestState.FINISHED
                    && Quest.ONE_SMALL_FAVOUR.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.RING_OF_CHAROSA,
                    c -> Quest.GARDEN_OF_TRANQUILLITY.getState(c) !=QuestState.FINISHED
                    && Quest.THE_GREAT_BRAIN_ROBBERY.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.WOLFBANE,
                    c -> c.getVarbitValue(Varbits.DIARY_MORYTANIA_EASY) !=1
            ),
            new SpecialCaseRule(
                    ItemID.MITHRIL_SEEDS,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.JUG_OF_VINEGAR,
                    c ->Quest.RAG_AND_BONE_MAN_II.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.SILVER_NECKLACE,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.BOOK_OF_PORTRAITURE,
                    c -> Quest.ZOGRE_FLESH_EATERS.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.CATSPEAK_AMULETE,
                    c -> Quest.RATCATCHERS.getState(c) !=QuestState.FINISHED
                    && Quest.A_TAIL_OF_TWO_CATS.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.METAL_FEATHER,
                    c -> Quest.EAGLES_PEAK.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.TROLLWEISS,
                    c -> Quest.TROLL_ROMANCE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.FREMENNIK_SHIELD,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.FREMENNIK_HELM,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.FREMENNIK_BLADE,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.LYRE,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.ROD_MOULD,
                    c -> Quest.IN_AID_OF_THE_MYREQUE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.SILVTHRILL_ROD,
                    c -> Quest.IN_AID_OF_THE_MYREQUE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.KHAZARD_HELMET,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.GLOUGHS_JOURNAL,
                    c -> Quest.THE_GRAND_TREE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.GLOUGHS_KEY,
                    c -> Quest.THE_GRAND_TREE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BOOK_ON_BAXTORIAN,
                    c -> Quest.WATERFALL_QUEST.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.LEVEL_1_CERTIFICATE,
                    c -> Quest.RECIPE_FOR_DISASTER__ANOTHER_COOKS_QUEST.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.LEVEL_2_CERTIFICATE,
                    c -> Quest.RECIPE_FOR_DISASTER__ANOTHER_COOKS_QUEST.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.LEVEL_3_CERTIFICATE,
                    c -> Quest.RECIPE_FOR_DISASTER__ANOTHER_COOKS_QUEST.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.GNOME_ROYAL_SEAL,
                    c -> Quest.MONKEY_MADNESS_I.getState(c) !=QuestState.FINISHED
            ),
            new  SpecialCaseRule(
                    ItemID._10TH_SQUAD_SIGIL,
                    c -> Quest.MONKEY_MADNESS_I.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.MAMULET_MOULD,
                    c -> Quest.MONKEY_MADNESS_I.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.FOSSIL_ISLAND_NOTE_BOOK,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.FISHBOWL_AND_NET,
                    c -> Quest.RUM_DEAL.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.VARMENS_NOTES,
                    c -> Quest.THE_GOLEM.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BLACK_DYE,
                    c -> Quest.THE_GOLEM.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.PHOENIX_FEATHER,
                    c -> Quest.THE_GOLEM.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.PHOENIX_QUILL_PEN,
                    c -> Quest.THE_GOLEM.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.DEMONIC_SIGIL,
                    c -> Quest.SHADOW_OF_THE_STORM.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.DEMONIC_SIGIL_MOULD,
                    c -> Quest.SHADOW_OF_THE_STORM.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.DEMONIC_TOME,
                    c -> Quest.SHADOW_OF_THE_STORM.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BLESSED_AXE,
                    c -> Quest.ANIMAL_MAGNETISM.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.UNDEAD_TWIGS,
                    c -> Quest.ANIMAL_MAGNETISM.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.GLARIALS_URN_EMPTY,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.KHAZARD_CELL_KEYS,
                    c -> Quest.FIGHT_ARENA.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.WASHING_BOWL,
                    c -> Quest.NATURE_SPIRIT.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.MIRROR,
                    c -> Quest.NATURE_SPIRIT.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.JOURNAL,
                    c -> Quest.NATURE_SPIRIT.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.PICTURE,
                    c -> Quest.PLAGUE_CITY.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.A_SCRUFFY_NOTE,
                    c -> Quest.PLAGUE_CITY.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.INSECT_REPELLENT,
                    c -> Quest.MERLINS_CRYSTAL.getState(c) !=QuestState.FINISHED
                    && Quest.TROLL_ROMANCE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.GOBLIN_SYMBOL_BOOK,
                    c -> Quest.THE_LOST_TRIBE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.MAGIC_WHISTLE,
                    c -> Quest.HOLY_GRAIL.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.HOLY_TABLE_NAPKIN,
                    c -> Quest.HOLY_GRAIL.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.GRAIL_BELL,
                    c -> Quest.HOLY_GRAIL.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.MAGIC_GOLD_FEATHER,
                    c -> Quest.HOLY_GRAIL.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.CRUSHED_GEM,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.CONSTRUCTION_GUIDE,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.ABYSSAL_BOOK,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.CATTLEPROD,
                    c -> Quest.SHEEP_HERDER.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.SHEEP_FEED,
                    c -> Quest.SHEEP_HERDER.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.A_STONE_BOWL,
                    c -> Quest.ELEMENTAL_WORKSHOP_I.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.CRANE_SCHEMATIC,
                    c -> Quest.ELEMENTAL_WORKSHOP_II.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.LEVER_SCHEMATIC,
                    c -> Quest.ELEMENTAL_WORKSHOP_II.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.SCROLL_9721,
                    c -> Quest.ELEMENTAL_WORKSHOP_II.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.STONEPLAQUE,
                    c -> Quest.SHILO_VILLAGE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.TATTERED_SCROLL,
                    c -> Quest.SHILO_VILLAGE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.CRUMPLED_SCROLL,
                    c -> Quest.SHILO_VILLAGE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.HISTORY_OF_IBAN,
                    c -> Quest.UNDERGROUND_PASS.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.OLD_JOURNAL,
                    c -> Quest.UNDERGROUND_PASS.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.SKAVID_MAP,
                    c -> Quest.WATCHTOWER.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.PANNING_TRAY,
                    c -> Quest.THE_DIG_SITE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.NUGGETS,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.ARCENIA_ROOT,
                    c -> Quest.THE_DIG_SITE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.EXTENDED_BRUSH,
                    c -> Quest.CREATURE_OF_FENKENSTRAIN.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.EXTENDED_BRUSH_4192,
                    c -> Quest.CREATURE_OF_FENKENSTRAIN.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.EXTENDED_BRUSH_4193,
                    c -> Quest.CREATURE_OF_FENKENSTRAIN.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.CONDUCTOR_MOULD,
                    c -> Quest.CREATURE_OF_FENKENSTRAIN.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.JOURNAL_4203,
                    c -> Quest.CREATURE_OF_FENKENSTRAIN.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.NUFFS_CERTIFICATE,
                    c -> Quest.FAIRYTALE_II__CURE_A_QUEEN.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.TREASURE_MAP,
                    c -> Quest.GHOSTS_AHOY.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.A_STONE_BOWL_2889,
                    c -> Quest.ELEMENTAL_WORKSHOP_I.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.RED_VINE_WORM,
                    c -> Quest.FISHING_CONTEST.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.A_USED_SPELL,
                    c -> Quest.NATURE_SPIRIT.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.GOLDEN_WOOL,
                    c -> Quest.THE_FREMENNIK_TRIALS.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BRANCH,
                    c -> Quest.THE_FREMENNIK_TRIALS.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BOOK,
                    c -> Quest.SHIELD_OF_ARRAV.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.PHOENIX_CROSSBOW,
                    c -> Quest.SHIELD_OF_ARRAV.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.ROCK,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.PLASTER_FRAGMENT,
                    c -> Quest.IN_AID_OF_THE_MYREQUE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.DUSTY_SCROLL,
                    c -> Quest.IN_AID_OF_THE_MYREQUE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.THE_SLEEPING_SEVEN,
                    c -> Quest.IN_AID_OF_THE_MYREQUE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.HISTORIES_OF_THE_HALLOWLAND,
                    c -> Quest.IN_AID_OF_THE_MYREQUE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.MODERN_DAY_MORYTANIA,
                    c -> Quest.IN_AID_OF_THE_MYREQUE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BEARHEAD,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.CINNAMON,
                    c -> Quest.RECIPE_FOR_DISASTER__SIR_AMIK_VARZE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.RED_BANANA,
                    c -> Quest.RECIPE_FOR_DISASTER__KING_AWOWOGEI.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.SLICED_RED_BANANA,
                    c -> Quest.RECIPE_FOR_DISASTER__KING_AWOWOGEI.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.TCHIKI_MONKEY_NUTS,
                    c -> Quest.RECIPE_FOR_DISASTER__KING_AWOWOGEI.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.TCHIKI_NUT_PASTE,
                    c -> Quest.RECIPE_FOR_DISASTER__KING_AWOWOGEI.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.SNAKE_CORPSE,
                    c -> Quest.RECIPE_FOR_DISASTER__KING_AWOWOGEI.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.HOLLOW_REED,
                    c -> Quest.LEGENDS_QUEST.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.DRAGON_INN_TANKARD,
                    c -> Quest.ZOGRE_FLESH_EATERS.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.TORN_PAGE,
                    c -> Quest.ZOGRE_FLESH_EATERS.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BLACK_PRISM,
                    c -> Quest.ZOGRE_FLESH_EATERS.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.OGRE_COFFIN_KEY,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.BOOK_OF_PORTRAITURE,
                    c -> Quest.ZOGRE_FLESH_EATERS.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.NECROMANCY_BOOK,
                    c -> Quest.ZOGRE_FLESH_EATERS.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BOOK_OF_HAM,
                    c -> Quest.ZOGRE_FLESH_EATERS.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BINDING_BOOK,
                    c -> Quest.LEGENDS_QUEST.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.TINY_NET,
                    c -> c.getVarbitValue(Varbits.DIARY_KANDARIN_EASY) != 1
            ),
            new SpecialCaseRule(
                    ItemID.LUNAR_ORE,
                    c -> Quest.LUNAR_DIPLOMACY.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.MOONCLAN_MANUAL,
                    c -> Quest.LUNAR_DIPLOMACY.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.EMPTY_VIAL,
                    c -> Quest.LUNAR_DIPLOMACY.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.HAIR_CLIP,
                    c -> Quest.KINGS_RANSOM.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.SAMPLE_BOTTLE,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.A_DEAR_FRIEND,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.A_HANDWRITTEN_BOOK,
                    c -> Quest.THE_EYES_OF_GLOUPHRIE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.A_TASTE_OF_HOPE,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.ABLENKIANS_ESCAPE,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.AIVAS_DIARY,
                    c -> Quest.DRAGON_SLAYER_II.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.AKILAS_JOURNAL,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.ANCIENT_DIARY,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.APMEKENS_CAPTURE,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.ARACHNIDS_OF_VAMPYRIUM,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.ARCHAEOLOGISTS_DIARY,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.ARENA_BOOK,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.ASTRONOMY_BOOK,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.AUBURN_VALLEY_ECOLOGICAL_REPORTS,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.BALLAD_OF_THE_BASILISK,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.BIG_BOOK_OF_BANGS,
                    c -> Quest.REGICIDE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BIRD_BOOK,
                    c -> Quest.EAGLES_PEAK.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BLOODY_DIARY,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.BOOK_OF_SPYOLOGY,
                    c -> Quest.MONKEY_MADNESS_II.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BOOK_ON_CHEMICALS,
                    c -> Quest.THE_DIG_SITE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BREWIN_GUIDE,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.BURNT_DIARY,
                    c -> Quest.ROYAL_TROUBLE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.CADARN_LINEAGE,
                    c -> Quest.ROVING_ELVES.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.CLOCKWORK_BOOK,
                    c -> Quest.COLD_WAR.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.COCKTAIL_GUIDE,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.CRAZED_SCRIBBLES,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.CREATURE_KEEPERS_JOURNAL,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.CRONDIS_CAPTURE,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.CRUMBLING_TOME,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.CRYSTAL_SINGING_FOR_BEGINNERS,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.DAGONHAI_HISTORY,
                    c -> Quest.WHAT_LIES_BELOW.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.DARK_JOURNAL,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.DIARY,
                    c -> Quest.WITCHS_HOUSE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.DIARY_3395,
                    c -> Quest.SHADES_OF_MORTTON.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.DIARY_3846,
                    c -> Quest.HORROR_FROM_THE_DEEP.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.DWARVEN_LORE,
                    c -> Quest.BETWEEN_A_ROCK.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.EASTERN_DISCOVERY,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.EASTERN_SETTLEMENT,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.EBRILLS_JOURNAL,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.EDERNS_JOURNAL,
                    c -> Quest.MOURNINGS_END_PART_II.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.EMBALMING_MANUAL,
                    c -> Quest.ICTHLARINS_LITTLE_HELPER.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.ENTOMOLOGISTS_DIARY,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.EXPLORERS_NOTES,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.FARMING_MANUAL,
                    c -> Quest.MY_ARMS_BIG_ADVENTURE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.FEATHERED_JOURNAL,
                    c -> Quest.EAGLES_PEAK.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.GHRIMS_BOOK,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.GOBLIN_BOOK,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.GOLLWYNS_FINAL_STATEMENT,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.GLASSBLOWING_BOOK,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.GUIDE_BOOK,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.HARMONY,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.HERMANS_BOOK,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.HETS_CAPTURE,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.HOUNDMASTERS_DIARY,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.IMAFORES_BETRAYAL,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.IMCANDORIAS_FALL,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.INSTRUCTION_MANUAL,
                    c -> Quest.DWARF_CANNON.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.JOURNAL_3845,
                    c -> Quest.HORROR_FROM_THE_DEEP.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.JOURNAL_6755,
                    c -> Quest.MAKING_HISTORY.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.KASONDES_JOURNAL,
                    c -> Quest.THE_GARDEN_OF_DEATH.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.MANUAL,
                    c -> Quest.HORROR_FROM_THE_DEEP.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.MOVARIOS_NOTES_VOLUME_1,
                    c -> Quest.WHILE_GUTHIX_SLEEPS.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.MOVARIOS_NOTES_VOLUME_2,
                    c -> Quest.WHILE_GUTHIX_SLEEPS.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.NEILANS_JOURNAL,
                    c -> Quest.GETTING_AHEAD.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.NISTIRIOS_MANIFESTO,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.OLD_DIARY,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.OLD_JOURNAL,
                    c -> Quest.UNDERGROUND_PASS.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.SCABARAS_CAPTURE,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.SECURITY_BOOK,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.SERAFINAS_DIARY,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.SHAMANS_TOME,
                    c -> Quest.LEGENDS_QUEST.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.SINKETHS_DIARY,
                    c -> Quest.WHAT_LIES_BELOW.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.STRONGHOLD_NOTES,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.TEKTONS_JOURNAL,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.THE_BUTCHER,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.THE_SHADOW_REALM,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.THE_WARDENS,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.THE_WILD_HUNT,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.TOME_OF_THE_MOON,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.TOME_OF_THE_SUN,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.TOME_OF_THE_TEMPLE,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.TRANSDIMENSIONAL_NOTES,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.TRANSLATION,
                    c -> Quest.DESERT_TREASURE_I.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.TRANSLATION_BOOK,
                    c -> Quest.THE_GRAND_TREE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.VANGUARD_JUDGEMENT,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.VARLAMORE_ENVOY,
                    c -> Quest.THE_DEPTHS_OF_DESPAIR.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.VERZIK_VITUR__PATIENT_RECORD,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.WEISS_FIRE_NOTES,
                    c -> Quest.MAKING_FRIENDS_WITH_MY_ARM.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.LIFT_MANUAL,
                    c -> Quest.ROYAL_TROUBLE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BOOK_OF_HARICANTO,
                    c -> Quest.GHOSTS_AHOY.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BOOK_ON_COSTUMES,
                    c -> Quest.THE_GIANT_DWARF.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.HAEMALCHEMY_VOLUME_1,
                    c -> Quest.DARKNESS_OF_HALLOWVALE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.NEWSPAPER,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.A_SMALL_KEY,
                    c -> Quest.PLAGUE_CITY.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.A_NICE_KEY,
                    c -> Quest.SPIRITS_OF_THE_ELID.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BASE_KEY,
                    c -> Quest.THE_CURSE_OF_ARRAV.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BEDABIN_KEY,
                    c -> Quest.THE_TOURIST_TRAP.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BLUISH_KEY,
                    c -> Quest.A_KINGDOM_DIVIDED.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BONE_KEY_4272,
                    c -> Quest.GHOSTS_AHOY.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BONE_KEY,
                    c -> Quest.SHILO_VILLAGE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.BRONZE_KEY,
                    c -> Quest.PRINCE_ALI_RESCUE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.CAVERN_KEY,
                    c -> Quest.CREATURE_OF_FENKENSTRAIN.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.CELL_DOOR_KEY,
                    c -> Quest.THE_TOURIST_TRAP.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.CELL_KEY,
                    c -> Quest.WHILE_GUTHIX_SLEEPS.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.CELL_KEY_1,
                    c -> Quest.TROLL_STRONGHOLD.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.CELL_KEY_2,
                    c -> Quest.TROLL_STRONGHOLD.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.CHEST_KEY_709,
                    c -> Quest.THE_DIG_SITE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.CHEST_KEY_2404,
                    c -> Quest.HAZEEL_CULT.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.CHEST_KEY_4273,
                    c -> Quest.GHOSTS_AHOY.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.CHEST_KEY_28573,
                    c -> Quest.THE_PATH_OF_GLOUPHRIE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.COLD_KEY,
                    c -> Quest.A_KINGDOM_DIVIDED.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.COMBAT_DAMAGED_KEY,
                    c -> Quest.MONKEY_MADNESS_I.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.CRYPT_KEY,
                    c -> Quest.A_NIGHT_AT_THE_THEATRE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.DAMP_KEY,
                    c -> Quest.A_KINGDOM_DIVIDED.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.DISPLAY_CABINET_KEY,
                    c -> Quest.THE_GOLEM.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.GOBLIN_KITCHEN_KEY,
                    c -> Quest.OBSERVATORY_QUEST.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.ICY_KEY,
                    c -> Quest.SECRETS_OF_THE_NORTH.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.KEY_423,
                    c -> Quest.BIOHAZARD.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.KEY_9722,
                    c -> Quest.ELEMENTAL_WORKSHOP_II.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.KEY,
                    c -> Quest.ERNEST_THE_CHICKEN.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.KEY_293,
                    c -> Quest.TREE_GNOME_VILLAGE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.KEY_5010,
                    c -> Quest.THE_LOST_TRIBE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.KEYS,
                    c -> Quest.THE_FEUD.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.MAZE_KEY,
                    c -> Quest.DRAGON_SLAYER_I.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.METAL_KEY,
                    c -> Quest.THE_TOURIST_TRAP.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.NEW_KEY,
                    c -> Quest.MOURNINGS_END_PART_II.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.OGRE_GATE_KEY,
                    c -> Quest.ZOGRE_FLESH_EATERS.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.SHED_KEY,
                    c -> Quest.CREATURE_OF_FENKENSTRAIN.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.SHINY_KEY,
                    c -> Quest.TEMPLE_OF_IKOV.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.STOREROOM_KEY,
                    c -> Quest.EADGARS_RUSE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.STOREROOM_KEY_29906,
                    c -> Quest.ETHICALLY_ACQUIRED_ANTIQUITIES.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.STRONGROOM_KEY,
                    c -> Quest.THE_PATH_OF_GLOUPHRIE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.TARNISHED_KEY,
                    c -> Quest.MOURNINGS_END_PART_I.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.TEMPLE_LIBRARY_KEY,
                    c -> Quest.IN_AID_OF_THE_MYREQUE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.TOBANS_KEY,
                    c -> Quest.WATCHTOWER.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.WEAPON_STORE_KEY,
                    c -> Quest.SHIELD_OF_ARRAV.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.ZEALOTS_KEY,
                    c -> Quest.HAUNTED_MINE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.DIRTY_NOTE,
                    c -> Quest.THE_GARDEN_OF_DEATH.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.FLAYGIANS_NOTES,
                    c -> Quest.A_TASTE_OF_HOPE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.KNIGHTS_NOTES,
                    c -> false
            ),
            new SpecialCaseRule(
                    ItemID.MEETING_NOTES,
                    c -> Quest.THE_GIANT_DWARF.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.NOTE,
                    c -> Quest.THE_FEUD.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.NOTE_4598,
                    c -> Quest.THE_FEUD.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.NULODIONS_NOTES,
                    c -> Quest.DWARF_CANNON.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.OLD_NOTES_22410,
                    c -> Quest.A_TASTE_OF_HOPE.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.OLD_NOTES_22774,
                    c -> Quest.THE_FORSAKEN_TOWER.getState(c) !=QuestState.FINISHED
            ),
            new SpecialCaseRule(
                    ItemID.OLD_NOTE,
                    c -> Quest.SINS_OF_THE_FATHER.getState(c) !=QuestState.FINISHED
            )

    );

    @Override
    protected void startUp()
    {
        overlayManager.add(overlay);
    }

    @Override
    protected void shutDown()
    {
        overlayManager.remove(overlay);
        overlay.clearMarks();
    }

    @Subscribe
    public void onItemContainerChanged(ItemContainerChanged event)
    {
        if (event.getContainerId() != InventoryID.BANK.getId())
        {
            return;
        }

        overlay.clearMarks();

        for (Item item : event.getItemContainer().getItems())
        {
            if (item.getId() <= 0)
            {
                continue;
            }

            final var def = client.getItemDefinition(item.getId());
            if (def == null)
            {
                continue;
            }

            String name = def.getName().toLowerCase();
            List<Color> matchedColors = new ArrayList<>();

            for (Map.Entry<Integer, List<String>> entry : ItemCategories.CATEGORY_PATTERNS.entrySet())
            {
                int catId = entry.getKey();

                if (!isCategoryActive(catId))
                {
                    continue;
                }

                List<String> exclusions = getExclusionsForCategory(catId);
                if (exclusions.contains(name))
                {
                    continue;
                }

                for (String pattern : entry.getValue())
                {
                    boolean match;
                    if (catId == 7)
                    {
                        match = name.matches(".*\\b" + pattern + "s?\\b.*");
                    }
                    else
                    {
                        match = name.contains(pattern);
                    }

                    if (match)
                    {
                        matchedColors.add(getColorForCategory(catId));
                        break;
                    }
                }
            }
            if (config.specialItemsActive())
            {
                SPECIAL_CASES.stream()
                        .filter(rule -> rule.itemId == item.getId())
                        .findFirst()
                        .ifPresent(rule -> matchedColors.add(
                                rule.keepCondition.test(client)
                                        ? config.specialItemsKeepColor()
                                        : config.specialItemsDiscardColor()
                        ));
            }
            if (!matchedColors.isEmpty())
            {
                overlay.markItem(item.getId(), matchedColors);
            }
        }
    }

    private List<String> getExclusionsForCategory(int catId)
    {
        String raw;
        switch (catId)
        {
            case 1: raw = config.excludeCat1(); break;
            case 2: raw = config.excludeCat2(); break;
            case 3: raw = config.excludeCat3(); break;
            case 4: raw = config.excludeCat4(); break;
            case 5: raw = config.excludeCat5(); break;
            case 6: raw = config.excludeCat6(); break;
            case 7: raw = config.excludeCat7(); break;
            case 8: raw = config.excludeCat8(); break;
            case 9: raw = config.excludeCat9(); break;
            case 10: raw = config.excludeCat10(); break;
            default: return Collections.emptyList();
        }

        if (raw == null || raw.trim().isEmpty())
        {
            return Collections.emptyList();
        }

        return Arrays.stream(raw.split(","))
                .map(String::trim)
                .map(String::toLowerCase)
                .collect(Collectors.toList());
    }

    private Color getColorForCategory(int catId)
    {
        switch (catId)
        {
            case 1: return config.colorCat1();
            case 2: return config.colorCat2();
            case 3: return config.colorCat3();
            case 4: return config.colorCat4();
            case 5: return config.colorCat5();
            case 6: return config.colorCat6();
            case 7: return config.colorCat7();
            case 8: return config.colorCat8();
            case 9: return config.colorCat9();
            case 10: return config.colorCat10();
            default: return Color.WHITE;
        }
    }

    private boolean isCategoryActive(int catId)
    {
        switch (catId)
        {
            case 1: return config.cat1Active();
            case 2: return config.cat2Active();
            case 3: return config.cat3Active();
            case 4: return config.cat4Active();
            case 5: return config.cat5Active();
            case 6: return config.cat6Active();
            case 7: return config.cat7Active();
            case 8: return config.cat8Active();
            case 9: return config.cat9Active();
            case 10: return config.cat10Active();
            default: return false;
        }
    }

    @Provides
    BankOrganizerConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(BankOrganizerConfig.class);
    }
}


package com.bankorganizer;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;

public class CategoryParser
{
    public static List<CategoryRule> parse(String configString)
    {
        List<CategoryRule> rules = new ArrayList<>();
        if (configString == null || configString.isEmpty())
        {
            return rules;
        }
        String[] parts = configString.split(",");
        for (String part : parts)
        {
            String[] fields = part.split("\\|");
            if (fields.length == 3)
            {
                try
                {
                    String name = fields[0].trim();
                    String pattern = fields[1].trim();
                    Color color = Color.decode(fields[2].trim());
                    rules.add(new CategoryRule(name, pattern, color));
                }
                catch (NumberFormatException ignored)
                {
                    // skip invalid color codes
                }
            }
        }
        return rules;
    }
}

package com.bankorganizer;

import java.awt.Color;

public class CategoryRule
{
    public final String name;
    public final String pattern;
    public final Color color;

    public CategoryRule(String name, String pattern, Color color)
    {
        this.name = name;
        this.pattern = pattern.toLowerCase();
        this.color = color;
    }

    public boolean matches(String itemName)
    {
        return itemName != null && itemName.toLowerCase().contains(pattern);
    }
}

package com.bankorganizer;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Shape;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.inject.Inject;

import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.ComponentID;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

public class BankOrganizerOverlay extends Overlay
{
    private static final int DEFAULT_FILL_ALPHA = 50;

    private final Client client;
    private final BankOrganizerConfig config;
    private final Map<Integer, List<Color>> markedItems = new HashMap<>();

    @Inject
    public BankOrganizerOverlay(Client client, BankOrganizerConfig config)
    {
        this.client = client;
        this.config = config;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
    }

    public void markItem(int itemId, List<Color> colors)
    {
        if (colors == null || colors.isEmpty())
        {
            return;
        }
        markedItems.put(itemId, colors);
    }

    public void clearMarks()
    {
        markedItems.clear();
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (!config.showBoxes())
        {
            return null;
        }

        Widget bankContainer = client.getWidget(ComponentID.BANK_ITEM_CONTAINER);
        if (bankContainer == null || bankContainer.isHidden())
        {
            return null;
        }

        // Clip drawing to the bank container
        Rectangle bankClip = bankContainer.getBounds();
        Shape oldClip = graphics.getClip();
        graphics.setClip(bankClip);

        int inset = 1;

        for (Widget slot : bankContainer.getDynamicChildren())
        {
            if (slot == null || slot.isHidden())
            {
                continue;
            }

            int itemId = slot.getItemId();
            List<Color> colors = markedItems.get(itemId);
            if (itemId <= 0 || colors == null)
            {
                continue;
            }

            Point loc = slot.getCanvasLocation();
            if (loc == null)
            {
                continue;
            }

            int x = loc.getX() + inset;
            int y = loc.getY() + inset;
            int w = Math.max(0, slot.getWidth() - inset * 2);
            int h = Math.max(0, slot.getHeight() - inset * 2);

            drawMultiColorBox(graphics, x, y, w, h, colors);
        }

        graphics.setClip(oldClip);
        return null;
    }

    private void drawMultiColorBox(Graphics2D g, int x, int y, int w, int h, List<Color> colors)
    {
        int n = Math.max(1, colors.size());
        int base = (n == 0) ? w : w / n;
        int used = 0;

        for (int i = 0; i < n; i++)
        {
            // Ensure the last segment consumes any leftover pixels to avoid gaps
            int segW = (i == n - 1) ? (w - used) : base;
            int segX = x + used;
            used += segW;

            Color c = colors.get(i);
            // Outline (Change?)
            g.setColor(c);
            g.drawRect(segX, y, Math.max(0, segW - 1), Math.max(0, h - 1));
            // Fill (Change?)
            Color fill = new Color(c.getRed(), c.getGreen(), c.getBlue(), DEFAULT_FILL_ALPHA);
            g.setColor(fill);
            g.fillRect(segX, y, segW, h);
        }
    }
}

package com.bankorganizer;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class BankOrganizerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(BankOrganizerPlugin.class);
		RuneLite.main(args);
	}
}
