/*
 * Copyright (c) 2021, molo-pl <https://github.com/molo-pl>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.molopl.plugins.lastseen;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class LastSeenPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(LastSeenPlugin.class);
		RuneLite.main(args);
	}
}

/*
 * Copyright (c) 2021, molo-pl <https://github.com/molo-pl>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.molopl.plugins.lastseen;

import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalUnit;
import java.util.Arrays;
import java.util.Objects;
import javax.annotation.Nullable;
import lombok.Getter;
import lombok.RequiredArgsConstructor;

public class LastSeenFormatter
{
	@Getter
	@RequiredArgsConstructor
	private enum TimeUnit
	{
		DAYS(ChronoUnit.DAYS, "day", "days"),
		HOURS(ChronoUnit.HOURS, "hour", "hours"),
		MINUTES(ChronoUnit.MINUTES, "minute", "minutes");

		private final TemporalUnit temporalUnit;
		private final String singularForm;
		private final String pluralForm;
	}

	/**
	 * Format the given 'last seen' timestamp. Outputs relative time, e.g. "2 hours ago".
	 */
	public static String format(@Nullable Long lastSeenMillis)
	{
		if (lastSeenMillis == null)
		{
			return "never";
		}

		final long diffMillis = System.currentTimeMillis() - lastSeenMillis;

		return Arrays.stream(TimeUnit.values())
			.map(timeUnit -> formatIfInUnit(diffMillis, timeUnit))
			.filter(Objects::nonNull)
			.findFirst()
			.orElse("just now");
	}

	/**
	 * Format the given time duration in the given time unit, provided that the value is at least 1. Return null if the
	 * given time unit is not granular enough.
	 */
	@Nullable
	private static String formatIfInUnit(long diffMillis, TimeUnit timeUnit)
	{
		final long durationInUnit = diffMillis / timeUnit.getTemporalUnit().getDuration().toMillis();
		return durationInUnit > 0
			? String.format("%d %s ago", durationInUnit, durationInUnit == 1 ? timeUnit.getSingularForm() : timeUnit.getPluralForm())
			: null;
	}
}

/*
 * Copyright (c) 2021, molo-pl <https://github.com/molo-pl>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.molopl.plugins.lastseen;

import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;

public class LastSeenOverlay extends Overlay
{
	private final Client client;
	private final TooltipManager tooltipManager;

	@Getter
	@Setter
	private String tooltip;

	@Inject
	private LastSeenOverlay(Client client, TooltipManager tooltipManager)
	{
		this.client = client;
		this.tooltipManager = tooltipManager;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (!client.isMenuOpen() && tooltip != null)
		{
			tooltipManager.add(new Tooltip(tooltip));
		}

		return null;
	}
}

/*
 * Copyright (c) 2021, molo-pl <https://github.com/molo-pl>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.molopl.plugins.lastseen;

import java.util.HashMap;
import java.util.Map;
import javax.annotation.Nullable;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.config.ConfigManager;

@Slf4j
public class LastSeenDao
{
	public static final String CONFIG_GROUP = "lastSeenOnline";
	public static final String KEY_PREFIX = "lastSeen_";

	private final ConfigManager configManager;
	private final Map<String, Long> cache = new HashMap<>();

	@Inject
	public LastSeenDao(ConfigManager configManager)
	{
		this.configManager = configManager;
	}

	@Nullable
	public Long getLastSeen(String displayName)
	{
		if (cache.containsKey(displayName))
		{
			return cache.get(displayName);
		}

		log.debug("Fetching 'last seen' for player {}", displayName);
		final String entry = configManager.getConfiguration(CONFIG_GROUP, KEY_PREFIX + displayName);
		if (entry != null)
		{
			try
			{
				final long timestampMillis = Long.parseLong(entry);
				cache.put(displayName, timestampMillis);
				return timestampMillis;
			}
			catch (NumberFormatException e)
			{
				log.info("Invalid value stored as 'last seen' for player {}: {}", displayName, entry);
			}
		}

		cache.put(displayName, null);
		return null;
	}

	public void setLastSeen(String displayName, long timestampMillis)
	{
		final Long lastSeen = getLastSeen(displayName);
		if (lastSeen == null || lastSeen < timestampMillis)
		{
			cache.put(displayName, timestampMillis);
			configManager.setConfiguration(CONFIG_GROUP, KEY_PREFIX + displayName, Long.toString(timestampMillis));
		}
	}

	public void deleteLastSeen(String displayName)
	{
		cache.remove(displayName);
		configManager.unsetConfiguration(CONFIG_GROUP, KEY_PREFIX + displayName);
	}

	public void migrateLastSeen(String oldDisplayName, String newDisplayName)
	{
		log.debug("Migrating 'last seen' after player rename from {} to {}", oldDisplayName, newDisplayName);
		final Long lastSeen = getLastSeen(oldDisplayName);
		if (lastSeen != null)
		{
			setLastSeen(newDisplayName, lastSeen);
			deleteLastSeen(oldDisplayName);
		}
	}

	public void clearCache()
	{
		cache.clear();
	}
}

/*
 * Copyright (c) 2021, molo-pl <https://github.com/molo-pl>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.molopl.plugins.lastseen;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Friend;
import net.runelite.api.GameState;
import net.runelite.api.Nameable;
import net.runelite.api.NameableContainer;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.api.events.NameableNameChanged;
import net.runelite.api.events.RemovedFriend;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;
import org.apache.commons.lang3.StringUtils;

@Slf4j
@PluginDescriptor(
	name = "Last Seen Online",
	description = "Track when you've last seen your friends play",
	tags = {"last", "seen", "online", "friends", "activity", "watch"}
)
public class LastSeenPlugin extends Plugin
{
	@Inject
	private Client client;
	@Inject
	private OverlayManager overlayManager;

	@Inject
	private LastSeenOverlay overlay;
	@Inject
	private LastSeenDao dao;

	private final Set<String> currentlyOnline = new HashSet<>();
	// in-memory buffer of 'last seen online', persisted periodically
	private final Map<String, Long> lastSeenBuffer = new HashMap<>();

	@Override
	protected void startUp()
	{
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
		dao.clearCache();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		persistLastSeen();
		dao.clearCache();
	}

	@Subscribe
	public void onNameableNameChanged(NameableNameChanged event)
	{
		final Nameable nameable = event.getNameable();
		if (nameable instanceof Friend && StringUtils.isNotBlank(nameable.getPrevName()))
		{
			dao.migrateLastSeen(
				Text.toJagexName(nameable.getPrevName()),
				Text.toJagexName(nameable.getName())
			);
		}
	}

	@Subscribe
	public void onRemovedFriend(RemovedFriend event)
	{
		dao.deleteLastSeen(Text.toJagexName(event.getNameable().getName()));
	}

	@Subscribe
	public void onMenuEntryAdded(MenuEntryAdded event)
	{
		final int groupId = WidgetInfo.TO_GROUP(event.getActionParam1());

		overlay.setTooltip(null);
		if (groupId == WidgetInfo.FRIENDS_LIST.getGroupId() && event.getOption().equals("Message"))
		{
			final String displayName = Text.toJagexName(Text.removeTags(event.getTarget()));
			if (StringUtils.isNotBlank(displayName) && !currentlyOnline.contains(displayName))
			{
				final Long lastSeen = lastSeenBuffer.getOrDefault(displayName, dao.getLastSeen(displayName));
				overlay.setTooltip("Last online: " + LastSeenFormatter.format(lastSeen));
			}
		}
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		if (client.getGameState() != GameState.LOGGED_IN)
		{
			return;
		}

		// persist in-memory state every minute
		if (client.getTickCount() % 100 == 0)
		{
			persistLastSeen();
		}

		final NameableContainer<Friend> friendContainer = client.getFriendContainer();
		if (friendContainer == null)
		{
			return;
		}

		currentlyOnline.clear();
		Arrays.stream(friendContainer.getMembers())
			.filter(friend -> friend.getWorld() > 0)
			.forEach(friend -> currentlyOnline.add(Text.toJagexName(friend.getName())));

		final long currentTimeMillis = System.currentTimeMillis();
		currentlyOnline.forEach(displayName -> lastSeenBuffer.put(displayName, currentTimeMillis));
	}

	private void persistLastSeen()
	{
		lastSeenBuffer.forEach(dao::setLastSeen);
		lastSeenBuffer.clear();
	}
}

