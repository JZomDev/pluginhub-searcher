package me.github.bigdiesel2m;

import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.NPC;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

import java.awt.*;

public class PagelessThingsOverlay extends Overlay {
    private PagelessThingsPlugin pagelessThingsPlugin;
    private PagelessThingsConfig pagelessThingsConfig;
    private Client client;

    @Override
    public Dimension render(Graphics2D graphics) {
        // get list of objects to highlight
        if (pagelessThingsConfig.highlightObjects()) {
            for (GameObject gameObject : pagelessThingsPlugin.getObjectHighlightSet()) {
                Shape shape = gameObject.getConvexHull();
                if (shape != null && client.getLocalPlayer().getWorldView().getPlane() == gameObject.getPlane()) {
                    OverlayUtil.renderPolygon(graphics, shape, Color.red);
                }
            }
        }
        if (pagelessThingsConfig.highlightNPCs()) {
            for (NPC npc : pagelessThingsPlugin.getNpcHighlightSet()) {
                Shape shape = npc.getConvexHull();
                if (shape != null) {
                    OverlayUtil.renderPolygon(graphics, shape, Color.red);
                }
            }
        }
        return null;
    }

    public PagelessThingsOverlay(PagelessThingsPlugin pagelessThingsPlugin, PagelessThingsConfig pagelessThingsConfig, Client client) {
        setLayer(OverlayLayer.ABOVE_SCENE);
        setPosition(OverlayPosition.DYNAMIC);
        this.pagelessThingsPlugin = pagelessThingsPlugin;
        this.pagelessThingsConfig = pagelessThingsConfig;
        this.client = client;
    }
}

package me.github.bigdiesel2m;

import com.google.common.collect.Sets;
import com.google.inject.Provides;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.client.RuneLite;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import okhttp3.*;

import javax.inject.Inject;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.Set;

@Slf4j
@PluginDescriptor(name = "Pageless Things")
public class PagelessThingsPlugin extends Plugin {
    private static final String DB_URL = "https://github.com/bigdiesel2m/pageless-things-scraper/raw/refs/heads/db/page_ids.h2.mv.db";
    private static final Path DB_PATH = new File(RuneLite.RUNELITE_DIR, "page_ids.h2.mv.db").toPath();

    private H2Manager h2Manager;
    private PagelessThingsOverlay pagelessThingsOverlay;
    @Getter
    private Set<GameObject> objectHighlightSet = Sets.newIdentityHashSet();
    @Getter
    private Set<NPC> npcHighlightSet = Sets.newIdentityHashSet();

    @Inject
    private Client client;

    @Inject
    private PagelessThingsConfig config;

    @Inject
    private OkHttpClient httpClient;

    @Inject
    private OverlayManager overlayManager;

    @Override
    protected void startUp() throws Exception {
        log.info("Pageless Things started!");
        downloadDatabase();
        pagelessThingsOverlay = new PagelessThingsOverlay(this, config, client);
        overlayManager.add(pagelessThingsOverlay);
    }

    @Override
    protected void shutDown() throws Exception {
        log.info("Pageless Things stopped!");
        objectHighlightSet.clear();
        npcHighlightSet.clear();
        overlayManager.remove(pagelessThingsOverlay);
    }

    void downloadDatabase() {
        Request dbGet = new Request.Builder().get().url(DB_URL).build();
        httpClient.newCall(dbGet).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                //TODO
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                try (ResponseBody responseBody = response.body(); InputStream dbByteStream = responseBody.byteStream()) {
                    Files.copy(dbByteStream, DB_PATH, StandardCopyOption.REPLACE_EXISTING);
                    h2Manager = new H2Manager(DB_PATH);
                }
            }
        });
    }

    @Subscribe
    public void onGameObjectSpawned(GameObjectSpawned gameObjectSpawned) {
        if (h2Manager == null) {
            return;
        }

        GameObject gameObject = gameObjectSpawned.getGameObject();
        ObjectComposition comp = client.getObjectDefinition(gameObject.getId());
        String name = comp == null ? null : comp.getName();

        if (h2Manager.objectNeedsPage(gameObject.getId()) && name != null && !name.equals("null")) {
            objectHighlightSet.add(gameObject);
            // TODO something with multilocs?
        }
    }

    @Subscribe
    public void onGameObjectDespawned(GameObjectDespawned gameObjectDespawned) {
        GameObject gameObject = gameObjectDespawned.getGameObject();
        objectHighlightSet.remove(gameObject);
    }

    @Subscribe
    public void onNpcSpawned(NpcSpawned npcSpawned) {
        if (h2Manager == null) {
            return;
        }

        NPC npc = npcSpawned.getNpc();
        NPCComposition def = client.getNpcDefinition(npc.getId());
        String name = def == null ? null : def.getName();

        if (h2Manager.npcNeedsPage(npc.getId()) && name != null && !name.equals("null")) {
            npcHighlightSet.add(npc);
        }
    }

    @Subscribe
    public void onNpcDespawned(NpcDespawned npcDespawned) {
        NPC npc = npcDespawned.getNpc();
        npcHighlightSet.remove(npc);
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged gameStateChanged) {
        if (gameStateChanged.getGameState() == GameState.LOADING) {
            objectHighlightSet.clear();
            npcHighlightSet.clear();
        }
    }

    @Provides
    PagelessThingsConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(PagelessThingsConfig.class);
    }
}

package me.github.bigdiesel2m;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("pageless-things")
public interface PagelessThingsConfig extends Config {
    String GROUP = "pagelessthings";

    @ConfigItem(
            position = 1,
            keyName = "hideNPCs",
            name = "Highlight NPCs",
            description = "Configures whether to highlight NPCs without wiki pages."
    )
    default boolean highlightNPCs() {
        return true;
    }

    @ConfigItem(
            position = 2,
            keyName = "highlightObjects",
            name = "Highlight Objects",
            description = "Configures whether to highlight objects without wiki pages."
    )
    default boolean highlightObjects() {
        return true;
    }
}

package me.github.bigdiesel2m;

import lombok.extern.slf4j.Slf4j;

import java.nio.file.Path;
import java.sql.*;

@Slf4j
public class H2Manager {
    private Connection connection;
    private PreparedStatement checkObjectID;
    private PreparedStatement checkNPCID;

    public H2Manager(Path path) {
        try {
            // force driver to load and register into the jdbc provider map
            // since hub loading does not handle jar service loading it seems?
            Class.forName("org.h2.Driver");

            String pathString = path.toString();
            pathString = pathString.substring(0, pathString.lastIndexOf(".mv.db"));
            connection = DriverManager.getConnection("jdbc:h2:" + pathString);
            checkObjectID = connection.prepareStatement("SELECT COUNT (*) FROM OBJECTS WHERE ID = ?");
            checkNPCID = connection.prepareStatement("SELECT COUNT (*) FROM NPCS WHERE ID = ?");
        } catch (SQLException | ClassNotFoundException exception) {
            log.warn("Failed to load database: ", exception);
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException ignored2) {
                }
            }
            connection = null;
        }
    }

    public boolean objectNeedsPage(int ID) {
        if (connection == null) {
            return false;
        }
        try {
            checkObjectID.setInt(1, ID);
            ResultSet resultSet = checkObjectID.executeQuery();
            if (resultSet.next()) {
                if (resultSet.getInt(1) == 1) {
                    return false;
                }
            }

        } catch (SQLException ignored) {
            return false;
        }
        return true;
    }

    public boolean npcNeedsPage(int ID) {
        if (connection == null) {
            return false;
        }
        try {
            checkNPCID.setInt(1, ID);
            ResultSet resultSet = checkNPCID.executeQuery();
            if (resultSet.next()) {
                if (resultSet.getInt(1) == 1) {
                    return false;
                }
            }

        } catch (SQLException ignored) {
            return false;
        }
        return true;
    }
}

package me.github.bigdiesel2m;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PagelessThingsTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PagelessThingsPlugin.class);
		RuneLite.main(args);
	}
}
