package com.preeocxp;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PreEocXpPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PreEocXpPlugin.class);
		RuneLite.main(args);
	}
}
package com.preeocxp;

import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.api.Skill;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetID;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.plugins.xptracker.XpTrackerService;
import net.runelite.client.ui.overlay.*;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.text.DecimalFormat;
import java.util.LinkedList;

import static com.preeocxp.PreEocXpPlugin.*;
import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
//import static net.runelite.client.plugins.preeocxp.PreEocXpPlugin.tickCounter;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class PreEocXpOverlay extends Overlay
{
	private static final int MINIMUM_STEP = 8;
	private static final int TOOLTIP_RECT_SIZE_X = 80;
	private static final int OVERLAY_RECT_SIZE_X = 110;
	private static final int OVERLAY_RECT_SIZE_Y = 14;
	private static final Color OVERLAY_COLOR = new Color(0, 0, 0, 0); //made transparent

	private final Client client;
	private final PreEocXpPlugin plugin;
	private final PreEocXpConfig config;
	private final XpTrackerService xpTrackerService;
	private final TooltipManager tooltipManager;

	private final Tooltip xpTooltip = new Tooltip(new PanelComponent());

	private Skill skillChosen =  Skill.OVERALL;
	private static int lotsThreshold = 100000000; //100 million
	private static int shrinkValue = 0;
	private static final LinkedList<Integer> xpStored = new LinkedList<Integer> ();
	private static final LinkedList<Long> timeValStored = new LinkedList <Long> ();
	private static int xpDropWidth;

	final BufferedImage xpBarMidImage = ImageUtil.loadImageResource(getClass(), "/xpBarMid.png");
	final BufferedImage xpBarLeftImage = ImageUtil.loadImageResource(getClass(), "/xpBarLeft.png");
	final BufferedImage xpBarRightImage = ImageUtil.loadImageResource(getClass(), "/xpBarRight.png");

	Font runescapeChatFont;
	Font runescapeSmallFont;
	Font rsXpDropFont;
	private static float dropSize = 16f;

	@Inject
	private PreEocXpOverlay(
			Client client,
			PreEocXpPlugin plugin,
			PreEocXpConfig config,
			XpTrackerService xpTrackerService,
			TooltipManager tooltipManager
	)
	{
		super(plugin);
		this.client = client;
		this.plugin = plugin;
		this.config = config;
		this.xpTrackerService = xpTrackerService;
		this.tooltipManager = tooltipManager;
		this.xpTooltip.getComponent().setPreferredSize(new Dimension(TOOLTIP_RECT_SIZE_X, -30));

		//setPosition(OverlayPosition.DETACHED);
		setPosition(OverlayPosition.DYNAMIC);
		setMovable(true);

		//Above HP Bars and Hitsplats - Below Bank and Quest interfaces
		setLayer(OverlayLayer.MANUAL);
		drawAfterInterface(WidgetID.HEALTH_OVERLAY_BAR_GROUP_ID);
		setPriority(OverlayPriority.HIGH);

		getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "XP Tracker overlay"));

	}

	/**
	 * loads the font file, creates the two fonts, with the smallFont being scalable.
	 * lastly registers the fonts.
	 */
	public void registerFont()
	{
		try
		{
			InputStream runescapeChat = this.getClass().getResourceAsStream("/runescape_chat.ttf");
			InputStream runescapeSmall = this.getClass().getResourceAsStream("/runescape_small.ttf");
			InputStream rsXpDrop = this.getClass().getResourceAsStream("/rsxpdrop.ttf");
			//create the font to use. Specify the size!
			runescapeChatFont = Font.createFont(Font.TRUETYPE_FONT, runescapeChat).deriveFont(16f);
			runescapeSmallFont = Font.createFont(Font.TRUETYPE_FONT, runescapeSmall).deriveFont(dropSize);
			//for some reason the size of this font is x2, subtracting 4 makes sure regular mimics the pre eoc size.
			rsXpDropFont = Font.createFont(Font.TRUETYPE_FONT, rsXpDrop).deriveFont(dropSize - 4);

			GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
			//register the font
			ge.registerFont(runescapeChatFont);
			ge.registerFont(runescapeSmallFont);
			ge.registerFont(rsXpDropFont);
		}
		catch (IOException | FontFormatException e)
		{
			e.printStackTrace();
		}
	}

	/**
	 * set the dropsize according to config
	 */
	public void setDropSize ()
	{
		if (config.dropSize() == PreEocXpConfig.OptionEnum.REGULAR) {
			dropSize = 16f;
		} else if (config.dropSize() == PreEocXpConfig.OptionEnum.LARGE) {
			dropSize = 20f;
		} else {
			dropSize = 24f;
		}
	}

	/**
	 * Starts off by setting the font size, lotsLimit and skillChosen according to the Config -if the config was changed.
	 * on startup, the config is loaded and set to true.
	 * Unless null return, triggers renderRectangle.
	 * @param graphics
	 * @return if LoginXp is 0, no xp has been fetched, so no need to start rendering. (even lvl 3s aren't 0 xp due to hp)
	 */
	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (PreEocXpPlugin.getConfigUpdateState()) {

			setDropSize();
			registerFont();
			skillChosen = config.displaySkill();
			lotsThreshold = config.lotsLimit();
			//checkTwelve();

			PreEocXpPlugin.setConfigUpdateState(false);
		}

		graphics.setFont(runescapeChatFont);

		long xpFetched = PreEocXpPlugin.getLoginXp();

		//if loginxp is 0, we don't want to run yet. If a listed widget was active on tick - also don't render.
		if ( xpFetched == 0)
		{
			return null;
		}
		int curDrawPosition = 0;

		renderRectangle(graphics, curDrawPosition, 0, getBounds());
		curDrawPosition += MINIMUM_STEP;

		return new Dimension(OVERLAY_RECT_SIZE_X, OVERLAY_RECT_SIZE_Y);
	}

	/**
	 * "master method" - triggers and controls the rendering of the rectangle and it's asset, tooltips, and text values.
	 * Checks if new xp has been sent. If so, adds the starting time and the xp drop to lists.
	 * After 1.8 seconds, these values are removed from the lists (as these are no longer to be rendered)
	 * Initiates the drawing of xp drops, the counter value and the background rectangle.
	 * Lastly checks whether the counter is hovered to display tooltips.
	 * @param graphics
	 * @param x initial x position
	 * @param y initial y position
	 * @param bounds - the bounds of the rectangle - used to check whether to display tooltips or not.
	 */
	private void renderRectangle(Graphics2D graphics, int x, int y, Rectangle bounds)
	{
		graphics.setColor(OVERLAY_COLOR);

		Point mouse = client.getMouseCanvasPosition();
		int mouseX = mouse.getX() - bounds.x;
		int mouseY = mouse.getY() - bounds.y;


		if (sentXp)
		{
			sentXp = false;

			long startTime = System.currentTimeMillis();

			//an extra check, as scene-updates would trigger this with stored values for unknown reasons
			if (xpDrop != 0)
			{
				timeValStored.add(startTime);
				xpStored.add(xpDrop);
				xpDrop = 0;
			}

			int n = 0;

			for (int i = 0; i < xpStored.size(); i++)
			{
				//calc elapsedTime
				if ( startTime - timeValStored.get(i) > 1800)
				{
					xpStored.remove(n);
					timeValStored.remove(n);
				}
				else
				{
					n ++;
				}
			}
		}
		else
		{
			long currentTime = System.currentTimeMillis();
			int n = 0;
			for (int i = 0; i < xpStored.size(); i++)
			{
				//calc elapsedTime
				if (currentTime - timeValStored.get(i) > 1800)
				{
					xpStored.remove(n);
					timeValStored.remove(n);
				}
				n++;
			}
		}
		if (!config.onlyCounter()) {
			if (!config.enableTwelve()) {
				drawTenDrop(graphics, 0, 0);
			}
			else drawTwelveDrop(graphics);
		}


		if (!config.onlyDrops()) {
			Rectangle backgroundRectangle = drawRectangle(graphics, x, y);
			drawXpLabel(graphics, 0, 0);
			// If mouse is hovering the box
			if (backgroundRectangle.contains(mouseX, mouseY))
			{
				//prev x,y being mouse position
				if (config.enableTooltips())
				{
					drawTooltip();
				}
			}
			if (config.onlyCounter()) {
				Widget xpDisplay = client.getWidget(WidgetInfo.EXPERIENCE_TRACKER);
				xpDisplay.setHidden(false);
			}
		}
	}

	/**
	 * Draws the text to be rendered on top of the xp counter.
	 * Sets the font to the ChatFont, sets the colors of the text, and calculates its position, depending on the size.
	 * This is done stepwise currently, as it seems to have been that way in 2010 (atleast for large and small values...
	 * Finally draws the total xp, or lots, if the threshold was met.
	 * @param graphics
	 * @param x initial x position
	 * @param y initial y position
	 */
	private void drawXpLabel(Graphics2D graphics, int x, int y)
	{
		graphics.setFont( runescapeChatFont );
		DecimalFormat decimalFormat = new DecimalFormat("###,###,###");

		final FontMetrics metrics = graphics.getFontMetrics();

		// runescape chat, 12p, shadow black.

		int drawX = x ;
		int drawY = y + OVERLAY_RECT_SIZE_Y - 1 ;


		//int skillXp = (client.getSkillExperience(skillChosen));

		Color xpColor = Color.WHITE;
		Color lotsColor = Color.RED;
		String formattedXp;
		int offset = 5;

		//get the length of the skillXp to scale rectangle
		int xpLength = (int) (Math.log10(skillXp) + 1);

		if (xpLength < 7) //less than a million
		{
			shrinkValue = 25;
		}

		else if (xpLength < 8) //less than 10 million
		{
			shrinkValue = 20;
		}

		else if (xpLength < 9) //less than 100 million
		{
			shrinkValue = 10;
		}
		//1b +
		else if (xpLength > 10)
		{
			shrinkValue = - 10;
		}

		else //100m +
		{
			shrinkValue = 0;
		}

		if (skillXp > lotsThreshold)
		{
			shrinkValue = 25;
		}

		if (skillXp < lotsThreshold)
		{
			formattedXp = decimalFormat.format(skillXp);
			int xpWidth = metrics.stringWidth(formattedXp);
			OverlayUtil.renderTextLocation(graphics, new Point(drawX + (OVERLAY_RECT_SIZE_X  - (xpWidth + offset)), drawY), formattedXp, xpColor);
		}

		else
		{
			formattedXp = "Lots!";
			int lotsWidth = metrics.stringWidth(formattedXp);
			OverlayUtil.renderTextLocation(graphics, new Point(drawX + (OVERLAY_RECT_SIZE_X  - ( lotsWidth + offset)), drawY), formattedXp, lotsColor);
		}
		OverlayUtil.renderTextLocation(graphics, new Point(drawX + offset + shrinkValue, drawY), "XP:", xpColor);
	}

	/**
	 * Draws the xp drop.
	 * Sets the font and color of the xp drop.
	 * Cycle through all the currently stored xp drops and their time pairs.
	 * If 1.2 seconds have not passed - draw the position of the xp drop based on the time passed (same animation speed regardless of fps)
	 * After a drop has "existed" for 1.2 seconds or more - hold it for .6 seconds, until it disappears.
	 * @param graphics
	 * @param x initial x position of the xp Drop
	 * @param y initial y position of the xp Drop
	 */
	private void drawTenDrop(Graphics2D graphics, int x, int y)
	{
		graphics.setFont(runescapeSmallFont);
		final FontMetrics metrics = graphics.getFontMetrics();
		// runescape chat, 12p, shadow black.
		int drawXVal = x;
		int drawYVal;

		Color dropColor = new Color(250, 141, 17);

		for (int i = 0; i < xpStored.size(); i++)
		{
			long animationTimer = Math.min((System.currentTimeMillis() - timeValStored.get(i)) , 1200);

			drawYVal = ((int) ((animationTimer) / 17) + 24);

			DecimalFormat decimalFormat = new DecimalFormat("###,###,###");

			String skillXpString = decimalFormat.format(xpStored.get(i));
			xpDropWidth = metrics.stringWidth(skillXpString + "xp");

			OverlayUtil.renderTextLocation(graphics, new Point(drawXVal + (OVERLAY_RECT_SIZE_X - xpDropWidth), drawYVal), skillXpString + "xp", dropColor);
		}
	}

	/**
	 * Draws the xp drop in a 2012 style.
	 * Sets the font and color of the xp drop.
	 * Cycle through all the currently stored xp drops and their time pairs.
	 * If 0.6 seconds have not passed - draw the position of the xp drop based on the time passed (same animation speed regardless of fps)
	 * After a drop has "existed" for 0.6 seconds or more - hold it for 1.2 seconds, and fade it, until it disappears.
	 * @param graphics
	 //* @param x initial x position of the xp Drop
	 //* @param y initial y position of the xp Drop
	 */
	private void drawTwelveDrop(Graphics2D graphics)
	{

		graphics.setFont(rsXpDropFont);

		//Center the xp drop, regardless of label position and client size.
		//getBounds() retrieves the label's position, which is also the (0,0) coordinate, then offset that from the center value
		//to get the actual center (tm).
		int overlayLocationX = client.getCenterX() - (int) getBounds().getX();
		//offset y 4 pixels cause that's just how it was. (It ends up centered over the hover text in-game - probably was jagex' anchor?)
		int overlayLocationY = client.getCenterY() -(int) getBounds().getY() - 4;

		//draw via a helper class, to assign unique opacity values to each xp drop.
		PreEocXp2012Overlay helper = new PreEocXp2012Overlay( plugin);


		for (int i = 0; i < xpStored.size(); i++)
		{
			long timePassed = System.currentTimeMillis() - timeValStored.get(i);
			helper.drawTwelveDrop(graphics, overlayLocationX, overlayLocationY, xpStored.get(i),(int)timePassed);
		}
	}

	/**
	 * Draws the background rectangle, and the xp counter graphic.
	 * Gets the position of the 2 edge images, and scales the center one according to xp value, for cosmetic reasons.
	 * Gets the position and scale dynamically, in case future expansion here would be desired (such as replacing the graphic)
	 * @param graphics
	 * @param x
	 * @param y
	 * @return
	 */
	private Rectangle drawRectangle(Graphics2D graphics, int x , int y)
	{
		Rectangle rectangle = new Rectangle(OVERLAY_RECT_SIZE_X - shrinkValue, OVERLAY_RECT_SIZE_Y);
		rectangle.setLocation(x + shrinkValue, y);

		int imgHeight = xpBarMidImage.getHeight();
		int fixedWidth = xpBarLeftImage.getWidth();

		int yHeight = y - (imgHeight - OVERLAY_RECT_SIZE_Y) / 2;

		graphics.drawImage(xpBarMidImage, rectangle.x + fixedWidth , yHeight, rectangle.width - ( 2 * fixedWidth ), imgHeight, null);
		graphics.drawImage(xpBarLeftImage, rectangle.x, yHeight, null);
		graphics.drawImage(xpBarRightImage, rectangle.x + rectangle.width - fixedWidth , yHeight, null);

		return rectangle;
	}

	/**
	 * draws the tooltip displaying what skill is being...displayed.
	 */
	private void drawTooltip()
	{
		final PanelComponent xpTooltip = (PanelComponent) this.xpTooltip.getComponent();
		xpTooltip.getChildren().clear();

		xpTooltip.getChildren().add(LineComponent.builder()
				.left(" Skill: " + skillChosen.getName())
				.leftColor(Color.WHITE)
				.build());

		tooltipManager.add(this.xpTooltip);
	}
}

package com.preeocxp;
import net.runelite.client.ui.overlay.*;
import net.runelite.client.util.ColorUtil;
import javax.inject.Inject;
import java.awt.*;
import java.text.DecimalFormat;

public class PreEocXp2012Overlay extends Overlay
{

    private static int xpDropWidth;

    @Inject
    public PreEocXp2012Overlay(
            PreEocXpPlugin plugin
    ) {
        super(plugin);
    }


    /**
     * Starts off by setting the font size, lotsLimit and skillChosen according to the Config -if the config was changed.
     * on startup, the config is loaded and set to true.
     * Unless null return, triggers renderRectangle.
     * @param graphics
     * @return if LoginXp is 0, no xp has been fetched, so no need to start rendering. (even lvl 3s aren't 0 xp due to hp)
     */
    @Override
    public Dimension render(Graphics2D graphics)
    {
        return new Dimension();
    }

    /**
     * Draws the xp drop in a 2012 style.
     * Sets the font and color of the xp drop.
     * Cycle through all the currently stored xp drops and their time pairs.
     * If 0.6 seconds have not passed - draw the position of the xp drop based on the time passed (same animation speed regardless of fps)
     * After a drop has "existed" for 0.6 seconds or more - hold it for 1.2 seconds, and fade it, until it disappears.
     * @param graphics
     * @param x the x position entered - client centerpoint
     * @param y the y position entered - client centerpoint
     * @param xpDrop the xpDrop value sent
     * @param timePassed time passed since drop creation
     */
    public void drawTwelveDrop(Graphics2D graphics, int x, int y, int xpDrop, int timePassed)
    {
        final FontMetrics metrics = graphics.getFontMetrics();

        int drawXVal = x;
        int drawYVal = y + ( metrics.getHeight() / 2 );

        int opacityValue = 255;
        int shadowOpacity = 255;
        Color dropColor = new Color(239, 178, 70);
        Color shadowColor = new Color(0,0,0);

        long animationTimer = Math.min((timePassed) , 600);

        //moves 150 pixels on the Y axis
        drawYVal = ((int) ((-1)*((animationTimer) / 4) ) + drawYVal);
        //time based fade
        if (timePassed > 600) {
            opacityValue = 255 - (int)((timePassed - 600)/4.7);
            //fade the shadow faster to avoid a dark outline as the text fades
            shadowOpacity = opacityValue - ((255 - opacityValue)/3);
        }

        DecimalFormat decimalFormat = new DecimalFormat("###,###,###");

        String skillXpString = decimalFormat.format(xpDrop);
        String xpDropString = "+" + skillXpString + " xp";
        xpDropWidth = metrics.stringWidth(xpDropString);
        //draw shadow
        graphics.setColor(ColorUtil.colorWithAlpha(shadowColor,shadowOpacity));
        graphics.drawString(xpDropString, drawXVal - (xpDropWidth/2) + 1, drawYVal +1 );
        //draw text
        graphics.setColor(ColorUtil.colorWithAlpha(dropColor,opacityValue));
        graphics.drawString(xpDropString, drawXVal  - (xpDropWidth/2), drawYVal);

        }
    }

/*
 * Copyright (c) 2021, Alex Sander <alex@alexsanderarts.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.preeocxp;

import com.google.inject.Provides;
import net.runelite.api.Client;
import net.runelite.api.MenuAction;
import net.runelite.api.Skill;
import net.runelite.api.events.*;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.OverlayMenuClicked;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.xptracker.XpTrackerPlugin;
import net.runelite.client.task.Schedule;
import net.runelite.client.ui.overlay.OverlayManager;
import javax.inject.Inject;
import java.time.temporal.ChronoUnit;

@PluginDescriptor(
		name = "Pre Eoc Xp Drops",
		description = "Customize Xp drops and display the 2010 xp Counter (WIP - currently just 2010 xp drops)",
		tags = {"experience", "levels", "overlay", "xp drop"},
		enabledByDefault = false
)

@PluginDependency(XpTrackerPlugin.class)


public class PreEocXpPlugin extends Plugin
{
	private static long loginXp = 0;
	long preXp = 0;
	public static int xpDrop;
	public static int tickCounter = 0;
	public static boolean sentXp = true;
	private static boolean configWasChanged = true;
	public static int newTick;
	public static long skillXp;

	@Inject
	private PreEocXpConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private PreEocXpOverlay overlay;

	@Inject
	Client client;

	/**
	 *
	 * @param configManager get the Plugin's configuration
	 * @return
	 */
	@Provides
	PreEocXpConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(PreEocXpConfig.class);
	}

	/**
	 * starts up the overlay
	 */
	@Override
	protected void startUp() {
		overlayManager.add(overlay);
	}

	/**
	 * removes the overlay
	 */
	@Override
	protected void shutDown() {
		overlayManager.remove(overlay);
		client.getWidget(WidgetInfo.EXPERIENCE_TRACKER).setHidden(false);
	}

	/**
	 * onGameTick cause it works with xp drops disabled, and longs so people with more than 2b xp can use this.
	 * on login, grabs the overall xp, and signals to the overlay class that xp has been updated.
	 * if overallXp is to be displayed, skillXp is set.
	 * Once xp has been fetched once, check if XP has been gained on the gameTick.
	 * If so, update xpDrop by comparing to the last fetched xp loginXp. Update fetched xp loginXp.
	 * @param gameTick when a gameTick event is sent - doStuff.
	 */
	@Subscribe
	public void onGameTick(GameTick gameTick)
	{

		tickCounter ++;
		long overallXp = client.getOverallExperience();
		if (config.displaySkill() == Skill.OVERALL) {
			skillXp = overallXp;
		}
		preXp = loginXp;

		//skillXp = client.getSkillExperience(config.displaySkill());

		if (loginXp != 0 && (overallXp - preXp <= 0))
		{
			return;
		}
		if (loginXp != 0)
		{
			xpDrop = (int) (overallXp - preXp);
			sentXp = true;
			preXp = overallXp;
			loginXp = preXp;
		}
		else
		{
			loginXp = client.getOverallExperience();
			sentXp = true;
		}
	}

	/**
	 * grabs the fake xp, and signals to the overlay class that xp has been updated.
	 * Once FakeXp has been fetched once, check if more FakeXp has been gained on the same gameTick and add it.
	 * Otherwise, reset the FakeXp to the next amount.
	 * @param event when a FakeXpDrop event is sent - doStuff.
	 */
	@Subscribe
	public void onFakeXpDrop(FakeXpDrop event)
	{

		if ( newTick == tickCounter ){
			xpDrop = xpDrop + event.getXp();
		}
		else {
			   xpDrop = event.getXp(); 
		}
		newTick = tickCounter;
		sentXp = true;
	}

	@Subscribe
	public void onScriptPreFired (ScriptPreFired scriptPreFired)
	{
		Widget xpDisplay = client.getWidget(WidgetInfo.EXPERIENCE_TRACKER);
		if(xpDisplay!=null){
			xpDisplay.setHidden(true);
		}
	}

	/**
	 * @param statChanged when a statChanged event is sent - update the skill xp.
	 */
	@Subscribe
	public void onStatChanged(StatChanged statChanged)
	{
		if (config.displaySkill() != Skill.OVERALL) {
			skillXp = client.getSkillExperience(config.displaySkill());
	}
	}
	/**
	 * sets a global toggle when a config has been changed.
	 * updates the skillXp as well, since it won't trigger a statchange, and thus an update.
	 * @param configChanged
	 */
	@Subscribe
    public void onConfigChanged(ConfigChanged configChanged)
    {
	    setConfigUpdateState(true);
		if (config.displaySkill() != Skill.OVERALL) {
			skillXp = client.getSkillExperience(config.displaySkill());
		}
    }


    public static boolean getConfigUpdateState()
	{
		return configWasChanged;
	}


	public static void setConfigUpdateState (boolean configSetter)
	{
		configWasChanged = configSetter;
	}
	public static long getLoginXp()
	{
		return loginXp;
	}

	@Schedule(
			period = 1,
			unit = ChronoUnit.SECONDS
	)
	/**
	 * resets the xp when called.
	 */
	private void resetState()
	{
		loginXp = 0;
	}

	@Subscribe
	public void onOverlayMenuClicked(final OverlayMenuClicked event)
	{
		if (!(event.getEntry().getMenuAction() == MenuAction.RUNELITE_OVERLAY
				&& event.getOverlay() == overlay))
		{
			return;
		}
	}

	/**
	 * Reset the xp when logging out.
	 * @param event when the GameState changes, do things according to the state.
	 */
	@Subscribe
	public void onGameStateChanged(GameStateChanged event) {
		switch (event.getGameState())
		{
			case LOGGED_IN:
				loginXp = client.getOverallExperience();
				startUp();

			case HOPPING:
			case LOGGING_IN:
			case LOGIN_SCREEN:
				resetState();
				break;
		}
	}
}

package com.preeocxp;

import net.runelite.api.Skill;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("preeocxp")

public interface PreEocXpConfig extends Config
{

	@ConfigItem(
			keyName = "enableTooltips",
			name = "Enable Tooltips",
			description = "Configures whether or not to show tooltips",
			position = 0
	)
	default boolean enableTooltips()
	{
		return true;
	}

	@ConfigItem(
			keyName = "displaySkill",
			name = "Display Xp in this Skill",
			description = "Choose which Skill to display",
			position = 1
	)
	default Skill displaySkill()
	{
		return Skill.OVERALL;
	}

	@ConfigItem(
			keyName = "lotsLimit",
			name = "Set cutoff for Lots!",
			description = "If the xp in your chosen skill exceeds this limit, lots! will be displayed instead",
			position = 2
	)
	default int lotsLimit()
	{
		return 214748364;
	}

	enum OptionEnum
	{
		REGULAR,
		LARGE,
		MASSIVE
	}
	@ConfigItem(
			keyName = "dropSize",
			name = "Xp Drop Size",
			description = "Choose the size of your xp drops",
			position = 3
	)
	default OptionEnum dropSize()
	{ return OptionEnum.REGULAR; }

	@ConfigItem(
			keyName = "enableTwelve",
			name = "2012-Style Xp Drops",
			description = "Enable 2012-Style Xp Drops instead",
			position = 4
	)
	default boolean enableTwelve()
	{ return false; }

	@ConfigItem(
			keyName = "onlyCounter",
			name = "Counter Only",
			description = "Hides the Xp Drops and only displays the Counter",
			position = 5
	)
	default boolean onlyCounter()
	{ return false; }
	@ConfigItem(
			keyName = "onlyDrops",
			name = "Xp Drops Only",
			description = "Hides the Counter and only displays Xp Drops",
			position = 6
	)
	default boolean onlyDrops()
	{ return false; }
}

