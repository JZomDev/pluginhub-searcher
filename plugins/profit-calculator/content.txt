package com.example;

import com.duckblade.runeliteplugins.profitcalc.ProfitCalcPlugin;
import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ProfitCalcPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ProfitCalcPlugin.class);
		RuneLite.main(args);
	}
}

package com.duckblade.runeliteplugins.profitcalc;

import com.duckblade.runeliteplugins.profitcalc.ui.ItemStackPanel;
import net.runelite.api.GameState;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.chatbox.ChatboxItemSearch;
import net.runelite.client.game.chatbox.ChatboxPanelManager;
import net.runelite.client.util.AsyncBufferedImage;

import javax.inject.Inject;
import javax.inject.Singleton;
import javax.swing.*;
import java.util.function.Consumer;

@Singleton
public class ProfitCalcItemSearch {

    @Inject
    private ChatboxItemSearch itemSearch;

    @Inject
    private ChatboxPanelManager chatboxPanelManager;

    @Inject
    private ClientThread clientThread;

    @Inject
    private ItemManager itemManager;

    @Inject
    private ProfitCalcPlugin plugin;

    public void triggerSearch(boolean inputMode) {

        if (plugin.getClient().getGameState() != GameState.LOGGED_IN) {
            JOptionPane.showMessageDialog(plugin.getCalcPanel(), "You must be logged in to search.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        itemSearch.tooltipText("Add " + (inputMode ? "Input" : "Output"))
                .onItemSelected(i -> {
                    clientThread.invokeLater(() -> triggerAmountInput(callbackAddItem(itemManager.canonicalize(i), inputMode)));
                }).build();
    }

    public void triggerNewQuantity(ItemStackPanel itemStackPanel) {
        triggerAmountInput(newAmount -> {
            CalcItemStack oldStack = itemStackPanel.getItemStack();
            CalcItemStack newStack = new CalcItemStack(oldStack.getItemName(), oldStack.getItemIcon(), oldStack.getPpu(), newAmount);
            itemStackPanel.setItemStack(newStack);
        });
    }

    public void triggerNewPpu(ItemStackPanel itemStackPanel) {
        triggerAmountInput(newPpu -> {
            CalcItemStack oldStack = itemStackPanel.getItemStack();
            CalcItemStack newStack = new CalcItemStack(oldStack.getItemName(), oldStack.getItemIcon(), newPpu, oldStack.getAmount());
            itemStackPanel.setItemStack(newStack);
        });
    }

    private Consumer<Float> callbackAddItem(int itemId, boolean inputMode) {
        return amount -> clientThread.invokeLater(() -> {
            int ppu = itemManager.getItemPrice(itemId);
            String itemName = itemManager.getItemComposition(itemId).getName();
            AsyncBufferedImage itemImage = itemManager.getImage(itemId);

            CalcItemStack itemStack = new CalcItemStack(itemName, itemImage, ppu, amount);
            plugin.getCalcPanel().addItemFromSearch(inputMode, itemStack);
        });
    }

    public void triggerAmountInput(Consumer<Float> callback) {
        chatboxPanelManager.openTextInput("Enter Amount")
                .addCharValidator(c -> (c >= '0' && c <= '9') || (c == '.'))
                .onDone(amountStrP -> {
                    String amountStr = amountStrP;
                    if (amountStr.length() > 10) amountStr = amountStr.substring(0, 10);
                    float amount = Float.parseFloat(amountStr);
                    callback.accept(amount);
                }).build();
    }

}

package com.duckblade.runeliteplugins.profitcalc;

import com.duckblade.runeliteplugins.profitcalc.ui.ProfitCalcPanel;
import com.google.inject.Provides;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import java.text.DecimalFormat;

@Slf4j
@PluginDescriptor(
        name = "Profit Calculator"
)
public class ProfitCalcPlugin extends Plugin {
    @Inject
    @Getter
    private Client client;

    @Inject
    private ClientToolbar clientToolbar;

    @Inject
    @Getter
    private ProfitCalcItemSearch calcItemSearch;

    @Getter
    private ProfitCalcPanel calcPanel;

    private NavigationButton navButton;

    public static final DecimalFormat DECIMAL_FORMAT = new DecimalFormat("###,###,###,##0.#");

    @Override
    protected void startUp() throws Exception {
        calcPanel = new ProfitCalcPanel(this);
        log.info("ProfitCalc started!");

        navButton = NavigationButton.builder()
                .tooltip("Profit Calculator")
                .icon(ImageUtil.getResourceStreamFromClass(getClass(), "/profit.png"))
                .priority(3)
                .panel(calcPanel)
                .build();
        clientToolbar.addNavigation(navButton);
    }

    @Override
    protected void shutDown() throws Exception {
        clientToolbar.removeNavigation(navButton);
        log.info("ProfitCalc stopped!");
    }

}

package com.duckblade.runeliteplugins.profitcalc.ui;

import com.duckblade.runeliteplugins.profitcalc.ProfitCalcPlugin;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import javax.inject.Singleton;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;

@Singleton
public class HeaderPanel extends JPanel {

    private final ProfitCalcPanel parent;

    private final JLabel titleLabel;
    private final JButton resetButton;

    @Inject
    public HeaderPanel(ProfitCalcPanel parent) {
        this.parent = parent;

        setLayout(new BorderLayout());
        setBorder(new EmptyBorder(1, 0, 10, 0));
        setBackground(ColorScheme.DARK_GRAY_COLOR);

        titleLabel = new JLabel("Profit Calculator");
        titleLabel.setForeground(Color.white);
        add(titleLabel, BorderLayout.WEST);

        resetButton = new JButton(new ImageIcon(ImageUtil.getResourceStreamFromClass(ProfitCalcPlugin.class, "/reset.png")));
        resetButton.setBackground(ColorScheme.DARK_GRAY_COLOR);
        resetButton.setBorder(null);
        resetButton.setBorderPainted(false);
        resetButton.setToolTipText("Reset Panel");
        resetButton.addActionListener(e -> parent.reset());
        add(resetButton, BorderLayout.EAST);
    }

}

package com.duckblade.runeliteplugins.profitcalc.ui;

import com.duckblade.runeliteplugins.profitcalc.CalcItemStack;
import com.duckblade.runeliteplugins.profitcalc.ProfitCalcPlugin;
import lombok.Getter;
import net.runelite.client.ui.ColorScheme;

import javax.swing.*;
import java.awt.*;

public class ItemStackPanel extends JPanel {

    @Getter
    private CalcItemStack itemStack;

    private final ItemListPanel parent;

    private JLabel imageLabel;

    private JPanel innerPanel;
    private JLabel nameLabel;
    private JLabel amountPpuLabel;
    private JLabel priceLabel;
    private JPopupMenu rightClickMenu;

    public ItemStackPanel(ItemListPanel parent, CalcItemStack itemStack) {
        this.parent = parent;
        this.itemStack = itemStack;

        setLayout(new BorderLayout());
        setBorder(BorderFactory.createLineBorder(ColorScheme.LIGHT_GRAY_COLOR, 1, true));
        setMaximumSize(new Dimension(500, 60));

        rightClickMenu = new JPopupMenu();
        setComponentPopupMenu(rightClickMenu);

        JMenuItem setQuantityItem = new JMenuItem("Set Quantity");
        setQuantityItem.addActionListener(e -> parent.getCalcPanel().getPlugin().getCalcItemSearch().triggerNewQuantity(this));
        rightClickMenu.add(setQuantityItem);

        JMenuItem setPpuItem = new JMenuItem("Set Price Per Item");
        setPpuItem.addActionListener(e -> parent.getCalcPanel().getPlugin().getCalcItemSearch().triggerNewPpu(this));
        rightClickMenu.add(setPpuItem);

        JMenuItem removeItem = new JMenuItem("Remove");
        removeItem.addActionListener(e -> parent.removeItem(this));
        rightClickMenu.add(removeItem);

        imageLabel = new JLabel();
        itemStack.getItemIcon().addTo(imageLabel);
        add(imageLabel, BorderLayout.WEST);

        innerPanel = new JPanel();
        innerPanel.setLayout(new GridLayout(3, 1));
        add(innerPanel, BorderLayout.CENTER);

        nameLabel = new JLabel("", JLabel.CENTER);
        nameLabel.setForeground(Color.white);
        innerPanel.add(nameLabel);

        amountPpuLabel = new JLabel("", JLabel.RIGHT);
        amountPpuLabel.setForeground(Color.white);
        innerPanel.add(amountPpuLabel);

        priceLabel = new JLabel("", JLabel.RIGHT);
        priceLabel.setForeground(Color.white);
        innerPanel.add(priceLabel);

        recalculate();
    }

    public float getValue() {
        return itemStack.getValue();
    }

    public void setItemStack(CalcItemStack newItemStack) {
        this.itemStack = newItemStack;
        recalculate();
    }

    public void recalculate() {
        SwingUtilities.invokeLater(() -> {
            itemStack.getItemIcon().addTo(imageLabel);
            nameLabel.setText(itemStack.getItemName());
            amountPpuLabel.setText(ProfitCalcPlugin.DECIMAL_FORMAT.format(itemStack.getPpu()) + "gp x" + ProfitCalcPlugin.DECIMAL_FORMAT.format(itemStack.getAmount()));
            priceLabel.setText("Total: " + ProfitCalcPlugin.DECIMAL_FORMAT.format(itemStack.getValue()) + "gp");

            repaint();
            revalidate();

            parent.recalculate();
        });
    }

}

package com.duckblade.runeliteplugins.profitcalc.ui;

import com.duckblade.runeliteplugins.profitcalc.CalcItemStack;
import com.duckblade.runeliteplugins.profitcalc.ProfitCalcPlugin;
import lombok.Getter;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;

import javax.inject.Singleton;
import javax.swing.*;
import java.awt.*;

@Singleton
public class ProfitCalcPanel extends PluginPanel {

    @Getter
    private final ProfitCalcPlugin plugin;

    private HeaderPanel headerPanel;
    private ItemListPanel inputPanel;
    private ItemListPanel outputPanel;

    private JPanel itemListPanel;
    private JLabel profitLabel;

    private float profit;

    public ProfitCalcPanel(ProfitCalcPlugin parent) {
        super(false);
        this.plugin = parent;

        setLayout(new BorderLayout());
        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        setBackground(ColorScheme.DARK_GRAY_COLOR);

        headerPanel = new HeaderPanel(this);
        add(headerPanel, BorderLayout.NORTH);

        itemListPanel = new JPanel();
        itemListPanel.setLayout(new GridLayout(2, 1));
        itemListPanel.setBackground(ColorScheme.DARK_GRAY_COLOR);
        add(itemListPanel, BorderLayout.CENTER);

        this.inputPanel = new ItemListPanel(this);
        inputPanel.setInputMode(true);
        itemListPanel.add(inputPanel);

        this.outputPanel = new ItemListPanel(this);
        outputPanel.setInputMode(false);
        itemListPanel.add(outputPanel);

        this.profit = 0;
        profitLabel = new JLabel("Profit: 0gp", JLabel.RIGHT);
        profitLabel.setForeground(Color.white);
        add(profitLabel, BorderLayout.SOUTH);
    }

    public void reset() {
        inputPanel.reset();
        outputPanel.reset();
    }

    public void addItemFromSearch(boolean inputMode, CalcItemStack itemStack) {
        SwingUtilities.invokeLater(() -> {
            ItemListPanel target = inputMode ? inputPanel : outputPanel;
            target.addItemFromSearch(itemStack);
            recalculate();
        });
    }

    public void recalculate() {
        SwingUtilities.invokeLater(() -> {
            profit = outputPanel.getValue() - inputPanel.getValue();
            profitLabel.setText("Profit: " + ProfitCalcPlugin.DECIMAL_FORMAT.format(profit) + "gp");
            repaint();
            revalidate();
        });
    }
}

package com.duckblade.runeliteplugins.profitcalc.ui;

import com.duckblade.runeliteplugins.profitcalc.CalcItemStack;
import com.duckblade.runeliteplugins.profitcalc.ProfitCalcPlugin;
import lombok.Getter;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.ImageUtil;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;

public class ItemListPanel extends JPanel {

    @Getter
    private boolean inputMode = false;

    @Getter
    private final ProfitCalcPanel calcPanel;

    private final JLabel headerLabel;
    private final JLabel totalLabel;
    private final JPanel headerPanel;

    private final ArrayList<ItemStackPanel> items;
    private final JPanel itemPanel;
    private final JButton addButton;

    public ItemListPanel(ProfitCalcPanel parent) {
        this.calcPanel = parent;

        setLayout(new BorderLayout());
        setBorder(BorderFactory.createLineBorder(ColorScheme.LIGHT_GRAY_COLOR, 1, false));
        setBackground(ColorScheme.DARK_GRAY_COLOR);

        headerPanel = new JPanel();
        headerPanel.setLayout(new GridLayout(2, 1));
        headerPanel.setBackground(ColorScheme.DARK_GRAY_COLOR);
        add(headerPanel, BorderLayout.NORTH);

        headerLabel = new JLabel(inputMode ? "Inputs" : "Outputs", JLabel.CENTER);
        Font f = headerLabel.getFont();
        headerLabel.setFont(f.deriveFont(f.getSize() * 1.2f));
        headerLabel.setForeground(Color.white);
        headerPanel.add(headerLabel);

        totalLabel = new JLabel("Total: 0gp", JLabel.CENTER);
        totalLabel.setForeground(Color.white);
        headerPanel.add(totalLabel);

        items = new ArrayList<>();
        itemPanel = new JPanel();
        itemPanel.setBackground(ColorScheme.DARK_GRAY_COLOR);
        itemPanel.setLayout(new BoxLayout(itemPanel, BoxLayout.Y_AXIS));
        add(itemPanel, BorderLayout.CENTER);

        addButton = new JButton(new ImageIcon(ImageUtil.getResourceStreamFromClass(ProfitCalcPlugin.class, "/add.png")));
        addButton.setBackground(ColorScheme.DARK_GRAY_COLOR);
        addButton.setToolTipText("Add " + (inputMode ? "Input" : "Output"));
        addButton.addActionListener(e -> triggerSearch());
        add(addButton, BorderLayout.SOUTH);
    }

    public void triggerSearch() {
        calcPanel.getPlugin().getCalcItemSearch().triggerSearch(this.inputMode);
    }

    public void setInputMode(boolean inputMode) {
        this.inputMode = inputMode;
        SwingUtilities.invokeLater(() -> {
            headerLabel.setText(this.inputMode ? "Inputs" : "Outputs");
            addButton.setToolTipText("Add " + (this.inputMode ? "Input" : "Output"));
        });
    }

    public void addItemFromSearch(CalcItemStack itemStack) {
        ItemStackPanel toAdd = new ItemStackPanel(this, itemStack);
        items.add(toAdd);
        recalculate();
    }

    public void removeItem(ItemStackPanel toRemove) {
        items.remove(toRemove);
        recalculate();
    }

    public void reset() {
        items.clear();
        recalculate();
    }

    public void recalculate() {
        SwingUtilities.invokeLater(() -> {
            itemPanel.removeAll();
            items.forEach(itemPanel::add);

            float value = getValue();
            totalLabel.setText("Total: " + ProfitCalcPlugin.DECIMAL_FORMAT.format(value) + "gp");

            repaint();
            revalidate();

            calcPanel.recalculate();
        });
    }

    public float getValue() {
        return (float) items.stream()
                .mapToDouble(ItemStackPanel::getValue)
                .sum();
    }

}

package com.duckblade.runeliteplugins.profitcalc;

import lombok.Builder;
import lombok.Data;
import net.runelite.client.util.AsyncBufferedImage;

@Data
@Builder
public class CalcItemStack {

    private final String itemName;
    private final AsyncBufferedImage itemIcon;
    private final float ppu;
    private final float amount;

    public float getValue() {
        return ppu * amount;
    }

}

