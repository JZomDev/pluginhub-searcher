package com.motherlodeprofit;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class MotherlodePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(MotherlodeProfitPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2018, Seth <Sethtroll3@gmail.com>
 * Copyright (c) 2018, Lars <lars.oernlo@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.motherlodeprofit;

import net.runelite.client.config.*;

@ConfigGroup("motherlodeprofit")
public interface MotherlodeProfitConfig extends Config
{

    @ConfigSection(
            name = "Decimal Configuration",
            description = "Configuration for decimal formatting",
            position = 6
    )
    String decimalSection = "Decimal Configuration";

    @ConfigItem(
            keyName = "showQuantity",
            name = "Show Quantity",
            description = "Toggle to show the quantity of ores",
            position = 1
    )
    default boolean showQuantity()
    {
        return true;
    }

    @ConfigItem(
            keyName = "showProfit",
            name = "Show Profit",
            description = "Toggle to show the profit from ores",
            position = 2
    )
    default boolean showProfit()
    {
        return true;
    }

    @ConfigItem(
            keyName = "showNuggets",
            name = "Show Nuggets",
            description = "Configures whether to show nuggets",
            position = 4
    )
    default boolean showNuggets()
    {
        return true;
    }
    @ConfigItem(
            keyName = "showProfitPerHour",
            name = "Show Profit per Hour",
            description = "Toggle the display of profit per hour",
            position = 5
    )
    default boolean showProfitPerHour() {
        return true;
    }

    @ConfigItem(
            keyName = "useRSDecimalStack",
            name = "Use RS Decimal Stack",
            description = "Use RS Decimal Stack format for profit above 100,000 GP",
            position = 6,
            section = decimalSection
    )
    default boolean useRSDecimalStack()
    {
        return true;
    }
    @ConfigItem(
            keyName = "profitThreshold",
            name = "Profit Threshold",
            description = "The profit threshold to use RS decimal stack format",
            position = 7,
            section = decimalSection
    )
    @Range(min = 1)
    default int profitThreshold()
    {
        return 100000;
    }
}
/*
 * Copyright (c) 2018, Seth <Sethtroll3@gmail.com>
 * Copyright (c) 2018, Adam <Adam@sigterm.info>
 * Copyright (c) 2018, Lars <lars.oernlo@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.motherlodeprofit;

import com.google.common.collect.HashMultiset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Multiset;
import com.google.common.collect.Multisets;
import com.google.inject.Provides;

import java.util.Arrays;
import java.util.Set;
import javax.inject.Inject;
import lombok.AccessLevel;
import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.InventoryID;
import net.runelite.api.ItemContainer;
import net.runelite.api.ItemID;
import net.runelite.api.Varbits;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@PluginDescriptor(
        name = "Motherlode Profit Tracker",
        description = "Show profit collected at MLM",
        tags = {"pay", "dirt", "mining", "mlm", "skilling", "overlay"},
        enabledByDefault = true
)
public class MotherlodeProfitPlugin extends Plugin
{
    private static final Set<Integer> MOTHERLODE_MAP_REGIONS = ImmutableSet.of(14679, 14680, 14681, 14935, 14936, 14937, 15191, 15192, 15193);
    private static final Set<Integer> MLM_ORE_TYPES = ImmutableSet.of(ItemID.RUNITE_ORE, ItemID.ADAMANTITE_ORE,
            ItemID.MITHRIL_ORE, ItemID.GOLD_ORE, ItemID.COAL, ItemID.GOLDEN_NUGGET);

    private static final int SACK_LARGE_SIZE = 162;
    private static final int SACK_SIZE = 81;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private MotherlodeProfitOverlay motherlodeProfitOverlay;

    @Inject
    private MotherlodeProfitConfig config;

    @Inject
    private Client client;

    @Inject
    private ClientThread clientThread;

    @Getter(AccessLevel.PACKAGE)
    private boolean inMlm;

    @Getter(AccessLevel.PACKAGE)
    private int curSackSize;
    @Getter(AccessLevel.PACKAGE)
    private int maxSackSize;
    @Getter(AccessLevel.PACKAGE)
    private Integer depositsLeft;

    @Inject
    private MotherlodeProfitSession session;
    private boolean shouldUpdateOres;
    private Multiset<Integer> inventorySnapshot;


    @Provides
    MotherlodeProfitConfig getConfig(ConfigManager configManager)
    {
        return configManager.getConfig(MotherlodeProfitConfig.class);
    }

    @Override
    protected void startUp()
    {
        overlayManager.add(motherlodeProfitOverlay);

        inMlm = checkInMlm();

        if (inMlm)
        {
            clientThread.invokeLater(this::refreshSackValues);
        }
    }

    @Override
    protected void shutDown()
    {
        overlayManager.remove(motherlodeProfitOverlay);

    }
    @Subscribe
    public void onVarbitChanged(VarbitChanged event)
    {
        if (inMlm)
        {
            int lastSackValue = curSackSize;
            refreshSackValues();
            shouldUpdateOres = curSackSize < lastSackValue;
            if (shouldUpdateOres)
            {
                // Take a snapshot of the inventory before the new ore is added.
                ItemContainer itemContainer = client.getItemContainer(InventoryID.INVENTORY);
                if (itemContainer != null)
                {
                    inventorySnapshot = HashMultiset.create();
                    Arrays.stream(itemContainer.getItems())
                            .filter(item -> MLM_ORE_TYPES.contains(item.getId()))
                            .forEach(item -> inventorySnapshot.add(item.getId(), item.getQuantity()));
                }
            }
        }
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged event)
    {
        if (event.getGameState() == GameState.LOADING)
        {
            inMlm = checkInMlm();
        }
        else if (event.getGameState() == GameState.LOGIN_SCREEN)
        {
            // Prevent code from running while logged out.
            inMlm = false;
        }
    }

    @Subscribe
    public void onItemContainerChanged(ItemContainerChanged event)
    {
        final ItemContainer container = event.getItemContainer();

        if (!inMlm || !shouldUpdateOres || inventorySnapshot == null || container != client.getItemContainer(InventoryID.INVENTORY))
        {
            return;
        }

        // Build set of current inventory
        Multiset<Integer> current = HashMultiset.create();
        Arrays.stream(container.getItems())
                .filter(item -> MLM_ORE_TYPES.contains(item.getId()))
                .forEach(item -> current.add(item.getId(), item.getQuantity()));

        // Take the difference
        Multiset<Integer> delta = Multisets.difference(current, inventorySnapshot);

        // Update the session
        delta.forEachEntry(session::updateOreFound);
        inventorySnapshot = null;
        shouldUpdateOres = false;
    }


    private boolean checkInMlm()
    {
        GameState gameState = client.getGameState();
        if (gameState != GameState.LOGGED_IN
                && gameState != GameState.LOADING)
        {
            return false;
        }

        int[] currentMapRegions = client.getMapRegions();

        // Verify that all regions exist in MOTHERLODE_MAP_REGIONS
        for (int region : currentMapRegions)
        {
            if (!MOTHERLODE_MAP_REGIONS.contains(region))
            {
                return false;
            }
        }

        return true;
    }

    private void refreshSackValues()
    {
        curSackSize = client.getVarbitValue(Varbits.SACK_NUMBER);
        boolean sackUpgraded = client.getVarbitValue(Varbits.SACK_UPGRADED) == 1;
        maxSackSize = sackUpgraded ? SACK_LARGE_SIZE : SACK_SIZE;
    }
}
package com.motherlodeprofit;

import java.awt.*;
import java.text.DecimalFormat;
import javax.inject.Inject;

import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.*;
import net.runelite.client.ui.overlay.components.ComponentOrientation;
import net.runelite.client.util.QuantityFormatter;

public class MotherlodeProfitOverlay extends OverlayPanel {
    private final MotherlodeProfitPlugin plugin;
    private final MotherlodeProfitSession motherlodeProfitSession;
    private final MotherlodeProfitConfig config;
    private final ItemManager itemManager;
    private final long startTime;
    private int maxPanelWidth = ComponentConstants.STANDARD_WIDTH;

    @Inject
    MotherlodeProfitOverlay(
            MotherlodeProfitPlugin plugin,
            MotherlodeProfitSession motherlodeProfitSession,
            MotherlodeProfitConfig config,
            ItemManager itemManager
    ) {
        setPriority(OverlayPriority.HIGH);
        setPosition(OverlayPosition.TOP_LEFT);
        this.plugin = plugin;
        this.motherlodeProfitSession = motherlodeProfitSession;
        this.config = config;
        this.itemManager = itemManager;
        this.startTime = System.currentTimeMillis();
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (!plugin.isInMlm()) {
            return null;
        }

        MotherlodeProfitSession session = motherlodeProfitSession;
        int totalProfit = session.getTotalProfit();
        int nuggetCount = session.getNuggetsCount();

        if (totalProfit == 0 && nuggetCount == 0) {
            return null;
        }


        panelComponent.getChildren().add(TitleComponent.builder()
                .text("Motherlode Tracker")
                .color(Color.GREEN)
                .build());

        panelComponent.setOrientation(ComponentOrientation.VERTICAL);

        if (config.showNuggets() && config.showQuantity() && nuggetCount > 0) {
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Nuggets:")
                    .right(String.valueOf(nuggetCount))
                    .build());
        }

        maxPanelWidth = ComponentConstants.STANDARD_WIDTH;

        addOreLine("Coal", session.getCoalCount(), session.getCoalProfit(), graphics);
        addOreLine("Gold", session.getGoldCount(), session.getGoldProfit(), graphics);
        addOreLine("Mithril", session.getMithrilCount(), session.getMithrilProfit(), graphics);
        addOreLine("Adamantite", session.getAdamantiteCount(), session.getAdamantiteProfit(), graphics);
        addOreLine("Runite", session.getRuniteCount(), session.getRuniteProfit(), graphics);

        if (config.showQuantity() || config.showProfit()) {
            panelComponent.getChildren().add(LineComponent.builder().build());
        }

        if (config.showProfitPerHour()) {
            double profitPerHour = calculateProfitPerHour(totalProfit);
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("GP/H:")
                    .right(QuantityFormatter.quantityToRSDecimalStack((int) profitPerHour) + " GP")
                    .build());
        }

        if (totalProfit > 0) {
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Total:")
                    .right(formatIntegerWithCommas(totalProfit) + " GP")
                    .build());
        }

        panelComponent.setPreferredSize(new Dimension(maxPanelWidth, 0));

        return super.render(graphics);
    }

    private void addOreLine(String oreName, int oreCount, int oreProfit, Graphics2D graphics) {
        if (oreProfit > 0 && (config.showQuantity() || config.showProfit())) {
            String quantityString = config.showQuantity() ? oreCount + (config.showProfit() ? " x " : "") : "";
            String profitString = config.showProfit() ? (oreProfit > config.profitThreshold() && config.useRSDecimalStack() ? QuantityFormatter.quantityToRSDecimalStack(oreProfit) : formatIntegerWithCommas(oreProfit)) + " GP" : "";

            final FontMetrics fontMetrics = graphics.getFontMetrics();
            int panelWidth = Math.max(ComponentConstants.STANDARD_WIDTH, fontMetrics.stringWidth(oreName + ": " + quantityString + profitString) + ComponentConstants.STANDARD_BORDER + ComponentConstants.STANDARD_BORDER);

            maxPanelWidth = Math.max(maxPanelWidth, panelWidth);

            panelComponent.getChildren().add(LineComponent.builder()
                    .left(oreName + ":")
                    .right(quantityString + profitString)
                    .build());
        }
    }

    private double calculateProfitPerHour(int totalProfit) {
        long currentTime = System.currentTimeMillis();
        long elapsedTime = currentTime - startTime;
        double hoursElapsed = elapsedTime / (1000.0 * 60 * 60);
        return totalProfit / hoursElapsed;
    }

    private String formatIntegerWithCommas(long value) {
        DecimalFormat df = new DecimalFormat("###,###,###");
        return df.format(value);
    }
}

package com.motherlodeprofit;

import java.time.Duration;
import java.time.Instant;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ItemID;
import net.runelite.client.game.ItemManager;

@Slf4j
@Singleton
public class MotherlodeProfitSession
{


    @Getter(AccessLevel.PACKAGE)
    private int nuggetsCount;

    @Getter(AccessLevel.PACKAGE)
    private int coalCount;

    @Getter(AccessLevel.PACKAGE)
    private int goldCount;

    @Getter(AccessLevel.PACKAGE)
    private int mithrilCount;

    @Getter(AccessLevel.PACKAGE)
    private int adamantiteCount;

    @Getter(AccessLevel.PACKAGE)
    private int runiteCount;

    @Getter(AccessLevel.PACKAGE)
    private int coalProfit;

    @Getter(AccessLevel.PACKAGE)
    private int goldProfit;

    @Getter(AccessLevel.PACKAGE)
    private int mithrilProfit;

    @Getter(AccessLevel.PACKAGE)
    private int adamantiteProfit;

    @Getter(AccessLevel.PACKAGE)
    private int runiteProfit;

    @Inject
    private ItemManager itemManager;

    public int getTotalProfit()
    {
        return coalProfit + goldProfit + mithrilProfit + adamantiteProfit + runiteProfit;
    }

    public void updateOreFound(int item, int count)
    {
        switch (item)
        {
            case ItemID.GOLDEN_NUGGET:
                nuggetsCount += count;
                break;
            case ItemID.COAL:
                coalCount += count;
                coalProfit += count * itemManager.getItemPrice(ItemID.COAL);
                break;
            case ItemID.GOLD_ORE:
                goldCount += count;
                goldProfit += count * itemManager.getItemPrice(ItemID.GOLD_ORE);
                break;
            case ItemID.MITHRIL_ORE:
                mithrilCount += count;
                mithrilProfit += count * itemManager.getItemPrice(ItemID.MITHRIL_ORE);
                break;
            case ItemID.ADAMANTITE_ORE:
                adamantiteCount += count;
                adamantiteProfit += count * itemManager.getItemPrice(ItemID.ADAMANTITE_ORE);
                break;
            case ItemID.RUNITE_ORE:
                runiteCount += count;
                runiteProfit += count * itemManager.getItemPrice(ItemID.RUNITE_ORE);
                break;
            default:
                log.debug("Invalid ore specified. The quantity and profit will not be updated.");

        }
    }
}

