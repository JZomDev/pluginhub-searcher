package com.guiltTripper;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(GuiltTripperPlugin.class);
		RuneLite.main(args);
	}
}
package com.guiltTripper;

import java.util.HashSet;
import java.util.Set;

public class BossName {
    public static final Set<String> NPC_NAMES = new HashSet<>();

    static {
        NPC_NAMES.add("Abyssal Sire");
        NPC_NAMES.add("Alchemical Hydra");
        NPC_NAMES.add("Artio");
        NPC_NAMES.add("Callisto");
        NPC_NAMES.add("Cerberus");
        NPC_NAMES.add("Chaos Elemental");
        NPC_NAMES.add("Chaos Fanatic");
        NPC_NAMES.add("Commander Zilyana");
        NPC_NAMES.add("Corporeal Beast");
        NPC_NAMES.add("Dagannoth Kings");
        NPC_NAMES.add("Dagannoth Prime");
        NPC_NAMES.add("Dagannoth Rex");
        NPC_NAMES.add("Dagannoth Supreme");
        NPC_NAMES.add("Duke Sucellus");
        NPC_NAMES.add("General Graardor");
        NPC_NAMES.add("Giant Mole");
        NPC_NAMES.add("Dusk");
        NPC_NAMES.add("Kalphite Queen");
        NPC_NAMES.add("King Black Dragon");
        NPC_NAMES.add("Kree'arra");
        NPC_NAMES.add("Kraken");
        NPC_NAMES.add("K'ril Tsutsaroth");
        NPC_NAMES.add("Nex");
        NPC_NAMES.add("Phantom Muspah");
        NPC_NAMES.add("Phosani's Nightmare");
        NPC_NAMES.add("Sarachnis");
        NPC_NAMES.add("Scorpia");
        NPC_NAMES.add("Scurrius");
        NPC_NAMES.add("Skotizo");
        NPC_NAMES.add("Spindel");
        NPC_NAMES.add("Thermonuclear Smoke Devil");
        NPC_NAMES.add("The Leviathan");
        NPC_NAMES.add("The Nightmare");
        NPC_NAMES.add("The Whisperer");
        NPC_NAMES.add("TzKal-Zuk");
        NPC_NAMES.add("TzTok-Jad");
        NPC_NAMES.add("Vardorvis");
        NPC_NAMES.add("Venenatis");
        NPC_NAMES.add("Vet'ion");
        NPC_NAMES.add("Vorkath");
        NPC_NAMES.add("Zalcano");
        NPC_NAMES.add("Zulrah");
        NPC_NAMES.add("Calvar'ion");
    }
}

package com.guiltTripper;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;

@ConfigGroup("guiltTripper")
public interface GuiltTripperConfig extends Config {

	@ConfigItem(
			keyName = "allowSound",
			name = "Sounds",
			description = "Enable or disable sound effects"
	)
	default boolean allowSound() {
		return false;
	}

	@ConfigItem(
			keyName = "soundVolume",
			name = "Sound Volume",
			description = "Adjust the volume of the sound effects",
			position = 1
	)
	@Range(
			min = 0,
			max = 100
	)
	default int soundVolume() {
		return 60; // By default, set to 60%
	}
}

package com.guiltTripper;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.AnimationID;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.NPC;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.NpcDespawned;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import javax.sound.sampled.*;
import java.io.IOException;
import java.net.URL;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;

@Slf4j
@PluginDescriptor(
		name = "Guilt Tripper"
)
public class GuiltTripperPlugin extends Plugin {
	@Inject
	private Client client;

	private GameState lastGameState = null;
	private boolean isFirstLogin = true;

	@Inject
	private ClientThread clientThread;

	@Inject
	private GuiltTripperConfig config;

	private final String[] messages = GuiltTripperMessages.MESSAGES;
	private final Random random = new Random();
	private Timer timer;
	private Clip clip = null;
	private boolean isPlaying = false;

	@Override
	protected void startUp() throws Exception {
		startTimer();
	}

	private void startTimer() {
		if (timer != null) {
			timer.cancel();
		}
		timer = new Timer();
		timer.scheduleAtFixedRate(new TimerTask() {
			@Override
			public void run() {
				if (client.getGameState() == GameState.LOGGED_IN) {
					clientThread.invokeLater(() -> {
						printRandomMessage();
						if (config.allowSound()) {
							playSound();
						}
					});
				}
			}
		}, 30 * 60 * 1000, 30 * 60 * 1000);
	}

	@Override
	protected void shutDown() throws Exception {
		if (timer != null) {
			timer.cancel();
		}
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged) {
		System.out.println("Current game state: " + gameStateChanged.getGameState());
		System.out.println("Last game state: " + lastGameState);

		if (gameStateChanged.getGameState() == GameState.LOGGED_IN) {
			if (lastGameState == GameState.LOADING && isFirstLogin) {
				printDefaultMessages("Take the following message with a grain of salt...");
				startTimer();
				isFirstLogin = false; // set to false after first login
			} else if (lastGameState != GameState.LOADING) {
				isFirstLogin = true;
			}
		}
		lastGameState = gameStateChanged.getGameState();
	}

	@Subscribe
	public void onNpcDespawned(NpcDespawned event) {
		NPC npc = event.getNpc();
		int dropChance = BossDropRate.getDropRate(npc.getName());

		if (BossName.NPC_NAMES.contains(npc.getName()) && npc.getHealthRatio() == 0) {
			if (random.nextInt(dropChance) == 0) {
				printSpecificMessage("You have a funny feeling like you're being followed.");

				new Timer().schedule(new TimerTask() {
					@Override
					public void run() {
						clientThread.invokeLater(() -> {
							printSpecificMessage("Turns out it was just a lost kitten. -Guilt Tripper");
						});
					}
				}, 5000);
			}
		}
	}

	@Subscribe
	public void onAnimationChanged(AnimationChanged animationChanged) {
		if (client.getGameState() == GameState.LOGGED_IN
				&& client.getLocalPlayer() != null
				&& client.getLocalPlayer().getHealthRatio() == 0
				&& client.getLocalPlayer().getAnimation() == AnimationID.DEATH) {
			clientThread.invokeLater(() -> {
				if (config.allowSound()) {
					playDeathSound();
				}
			});
		}
	}

	private void printRandomMessage() {
		String randomMessage = "<col=008000>" + messages[random.nextInt(messages.length)] + "</col>";
		client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", randomMessage, null);
	}

	private void printSpecificMessage(String message) {
		client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "<col=ff0000>" + message + "</col>", null);
	}

	private void printDefaultMessages(String message) {
		client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "<col=000000>" + message + "</col>", null);
	}

	private void playSound() {
		if (!config.allowSound()) {
			return;
		}

		if (clip != null) {
			clip.close();
			clip = null;
		}

		String[] sounds = {"laughter.wav", "gz.wav", "ohmydays.wav", "sleep.wav"};
		int index = random.nextInt(sounds.length);

		try {
			URL soundUrl = getClass().getResource("/" + sounds[index]);
			if (soundUrl == null) {
				System.out.println("Sound file not found!");
				return;
			}
			try (AudioInputStream audioIn = AudioSystem.getAudioInputStream(soundUrl)) {
				clip = AudioSystem.getClip();
				clip.open(audioIn);
				setVolume(clip, config.soundVolume());
				clip.start();
			}
		} catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
			System.out.println("Error playing sound:" + e.getMessage());
		}
	}

	private void playDeathSound() {
		if (isPlaying) {
			System.out.println("Already playing");
			return;
		}

		System.out.println("Playing death sound");

		if (clip != null) {
			clip.close();
		}

		try {
			URL soundUrl = getClass().getResource("/deathsound.wav");
			if (soundUrl == null) {
				System.out.println("Death sound file not found!");
				return;
			}
			try (AudioInputStream inputStream = AudioSystem.getAudioInputStream(soundUrl)) {
				clip = AudioSystem.getClip();
				clip.open(inputStream);
				setVolume(clip, config.soundVolume());
				clip.start();
				isPlaying = true;
				clip.addLineListener(e -> {
					if (e.getType() == LineEvent.Type.STOP) {
						isPlaying = false;
						System.out.println("Done playing death sound");
					}
				});
			}
		} catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
			System.out.println("Unable to play death sound: " + e);
		}
	}

	private void setVolume(Clip clip, int volume) {
		if (volume < 0 || volume > 100) {
			throw new IllegalArgumentException("Volume must be between 0 and 100");
		}

		FloatControl gainControl = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);
		float minDb = gainControl.getMinimum();
		float maxDb = gainControl.getMaximum();
		float gain = ((maxDb - minDb) * (volume / 100.0f)) + minDb;
		gainControl.setValue(gain);
	}

	@Provides
	GuiltTripperConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(GuiltTripperConfig.class);
	}
}

package com.guiltTripper;

import java.util.HashMap;
import java.util.Map;

public class BossDropRate {
    private static final Map<String, Integer> dropRates = new HashMap<>();

    static {
        dropRates.put("Chaos Elemental", 300);
        dropRates.put("Dagannoth Supreme", 5000);
        dropRates.put("Dagannoth Prime", 5000);
        dropRates.put("Dagannoth Rex", 5000);
        dropRates.put("Kree'arra", 5000);
        dropRates.put("General Graardor", 5000);
        dropRates.put("Commander Zilyana", 5000);
        dropRates.put("K'ril Tsutsaroth", 5000);
        dropRates.put("Giant mole", 3000);
        dropRates.put("King Black Dragon", 3000);
        dropRates.put("Kalphite Queen", 3000);
        dropRates.put("Thermonuclear smoke devil", 3000);
        dropRates.put("Kraken", 3000);
        dropRates.put("Corporeal Beast", 5000);
        dropRates.put("Zulrah", 4000);
        dropRates.put("Venenatis", 1500);
        dropRates.put("Spindel", 2800);
        dropRates.put("Callisto", 1500);
        dropRates.put("Artio", 2800);
        dropRates.put("Vet'ion", 1500);
        dropRates.put("Calvar'ion", 2800);
        dropRates.put("Scorpia", 2016);
        dropRates.put("TzTok-Jad", 200);
        dropRates.put("Cerberus", 3000);
        dropRates.put("Skotizo", 65);
        dropRates.put("TzKal-Zuk", 100);
        dropRates.put("Dusk", 3000);
        dropRates.put("Vorkath", 3000);
        dropRates.put("Alchemical Hydra", 3000);
        dropRates.put("Sarachnis", 3000);
        dropRates.put("Zalcano", 2250);
        dropRates.put("The Nightmare", 1000);
        dropRates.put("Phosani's Nightmare", 1400);
        dropRates.put("Nex", 500);
        dropRates.put("Phantom Muspah", 2500);
        dropRates.put("The Whisperer", 2000);
        dropRates.put("Vardorvis", 3000);
        dropRates.put("The Leviathan", 2500);
        dropRates.put("Duke Sucellus", 2500);
        dropRates.put("Scurrius", 3000);
    }

    public static int getDropRate(String npcName) {
        return dropRates.getOrDefault(npcName, 5000);
    }
}

package com.guiltTripper;

// Sound effect messages.
public class GuiltTripperMessages {
    public static final String[] MESSAGES = {
            "Touch grass!",
            "Go level up in daylight skills!",
            "Have you tried the breathing skill outside?",
            "Your chair called. It wants a relationship break.",
            "Maybe it’s time to grind some real-life quests?",
            "Even a goblin has better social skills!",
            "I bet even a rock crab walks more than you.",
            "Time to logout and log into reality!",
            "Have you considered leveling up offline?",
            "Get some sunlight, you're not a cave slime!",
            "Even your pet's on a more balanced diet. Time for a walk?",
            "When was the last time you wrote something by hand?",
            "Is this truly an adventure, or just an escape?",
            "Your character's alignment: Chaotic Screen-staring.",
            "If AFK were a skill tree, you'd be maxed out.",
            "In it for the achievements, or just to rage-quit?",
            "Enjoying the grind or just grinding your teeth?",
            "Achievement hunter or just hunting for the exit?"
    };
}

