package com.apm;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ApmPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ApmPlugin.class);
		RuneLite.main(args);
	}
}
package com.apm;

import com.google.inject.Provides;

import javax.inject.Inject;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;

import net.runelite.api.Client;
import net.runelite.api.events.WidgetClosed;
import net.runelite.api.widgets.WidgetID;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.input.KeyManager;
import net.runelite.client.input.MouseManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.util.LinkedList;

import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;


@Slf4j
@PluginDescriptor(
	name = "APM"
)
public class ApmPlugin extends Plugin {
	@Inject
	private Client client;

	@Inject
	private ApmConfig config;

	@Inject
	OverlayManager overlayManager;

	@Inject
	ApmOverlay overlay;

	@Inject
	private KeyManager keyManager;

	private ApmKeyListener keyListener;

	@Inject
	private MouseManager mouseManager;

	private ApmMouseListener mouseListener;

	public int totalInputCount, seconds, inputCountSecond;

	@Getter
	private final LinkedList<Integer> pastMinuteInputs = new LinkedList<>();

	private final int numCells = 60;

	public int currentApm = 0;
	public int max, min = 0;

	@Inject
	private ScheduledExecutorService executorService;

	private ScheduledFuture updateChartFuture;

	@Override
	protected void startUp() throws Exception {
		pastMinuteInputs.clear();
		for (int i = 0; i < numCells; i++) pastMinuteInputs.add(0);

		overlayManager.add(overlay);

		// Tried using @Schedule but it was off by ~15 seconds for some reason?
		updateChartFuture = executorService.scheduleAtFixedRate(this::updateChart, 0, 1, TimeUnit.SECONDS);

		keyListener = new ApmKeyListener(this, config);
		keyManager.registerKeyListener(keyListener);
		mouseListener = new ApmMouseListener(this, config);
		mouseManager.registerMouseListener(mouseListener);

		inputCountSecond = 0;
		totalInputCount = 0;
		seconds = 0;


		log.info("APM started!");
	}

	@Override
	protected void shutDown() throws Exception {
		overlayManager.remove(overlay);

		updateChartFuture.cancel(true);
		updateChartFuture = null;

		keyManager.unregisterKeyListener(keyListener);
		keyListener = null;
		mouseManager.unregisterMouseListener(mouseListener);
		mouseListener = null;

		pastMinuteInputs.clear();
		log.info("APM stopped!");
	}

	// on game enter/start
	@Subscribe
	public void onWidgetClosed(WidgetClosed widgetClosed) {
		if (widgetClosed.getGroupId() == WidgetID.LOGIN_CLICK_TO_PLAY_GROUP_ID){
			inputCountSecond = 0;
			totalInputCount = 0;
			seconds = 0;

			pastMinuteInputs.clear();
			for (int i = 0; i < numCells; i++) pastMinuteInputs.add(0);

		}
	}

	public void updateChart() {
		pastMinuteInputs.add(inputCountSecond);
		pastMinuteInputs.remove();

		seconds++;
		inputCountSecond = 0;
		int hold = 0;

		for (Integer integer : pastMinuteInputs) {
			hold += integer;
		}

		currentApm = hold;
		max = getMax();
		min = getMin();
	}

	private Integer getMax() {
		Integer currentMax = 0;
			for (Integer integer : pastMinuteInputs) {
				if (integer > currentMax) {
					currentMax = integer;
				}
			}
		return currentMax;
	}

	private Integer getMin(){
		Integer currentMin = 0;
		for (Integer integer : pastMinuteInputs) {
			if (integer < currentMin) {
				currentMin = integer;
			}
		}
		return currentMin;
	}

	@Provides
	ApmConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(ApmConfig.class);
	}
}

package com.apm;

import net.runelite.client.input.MouseListener;
import java.awt.event.MouseEvent;

public class ApmMouseListener implements MouseListener {
    private final ApmConfig config;
    private final ApmPlugin plugin;

    ApmMouseListener(ApmPlugin plugin, ApmConfig config)  {
        this.plugin = plugin;
        this.config = config;
    }

    @Override
    public MouseEvent mouseClicked(MouseEvent mouseEvent) {
        return mouseEvent;
    }

    @Override
    public MouseEvent mousePressed(MouseEvent mouseEvent) {
        return mouseEvent;
    }

    @Override
    public MouseEvent mouseReleased(MouseEvent mouseEvent) {
        if (config.includeMouseClicks()) {
            plugin.totalInputCount++;
            plugin.inputCountSecond++;
        }
        return mouseEvent;
    }

    @Override
    public MouseEvent mouseEntered(MouseEvent mouseEvent) {
        return mouseEvent;
    }

    @Override
    public MouseEvent mouseExited(MouseEvent mouseEvent) {
        return mouseEvent;
    }

    @Override
    public MouseEvent mouseDragged(MouseEvent mouseEvent) {
        return mouseEvent;
    }

    @Override
    public MouseEvent mouseMoved(MouseEvent mouseEvent) {
        return mouseEvent;
    }
}
package com.apm;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.*;

@ConfigGroup("apm")
public interface ApmConfig extends Config {

	@ConfigItem(
			position = 0,
			keyName = "chartType",
			name = "Graph Type",
			description = "Chart type that displays the last minute's APM"
	)
	default chartType chartType() {
		return chartType.Bar;
	}
	enum chartType {
		Bar("Bar"),
		Line("Line");

		private final String value;
		chartType(String graph) {
			this.value = graph;
		}

		public String getValue() {
			return value;
		}
	}


	@ConfigItem(
			position = 1,
			keyName = "HideGraph",
			name = "Hide Graph",
			description = "Hide the Input Graph"
	)
	default boolean hideGraph() {
		return false;
	}


	@ConfigItem(
			position = 2,
			keyName = "HideMargin",
			name = "Hide Bottom and Side Margins",
			description = "Remove the margins that surround the graph"
	)
	default boolean hideMargin() {
		return true;
	}

	@ConfigItem(
			position = 3,
			keyName = "toggleBehind",
			name = "Hide Behind Interfaces",
			description = "Hides graph behind interfaces i.e bank and map"
	)
	default boolean toggleBehind() {
		return false;
	}


	@ConfigItem(
			position = 4,
			keyName = "includeKeysPresses",
			name = "Include Key Presses",
			description = "Include Key Presses in APM Calculation"
	)
	default boolean includeKeyPresses() {
		return true;
	}


	@ConfigItem(
			position = 5,
			keyName = "includeMouseClicks",
			name = "Include Mouse Clicks",
			description = "Include Mouse Clicks in APM Calculation"
	)
	default boolean includeMouseClicks() {
		return true;
	}


	@Alpha
	@ConfigItem(
			position = 6,
			keyName = "GraphColor",
			name = "Graph Color",
			description = "The color of the graph"
	)
	default Color graphColor() {
		return new Color(255, 240, 0);
	}


	@Alpha
	@ConfigItem(
			position = 7,
			keyName = "TextColor",
			name = "Text Color",
			description = "The color of the text"
	)
	default Color textColor() {
		return new Color(255, 240, 0);
	}


	@Alpha
	@ConfigItem(
			position = 8,
			keyName = "OverlayBackgroundColor",
			name = "Overlay Background Color",
			description = "The background color of the overlay"
	)
	default Color overlayBackgroundColor() {
		return new Color(0, 0, 0, 100);
	}



	@Alpha
	@ConfigItem(
			position = 9,
			keyName = "OverlayBorderColor",
			name = "Overlay Border Color",
			description = "The border color of the overlay"
	)
	default Color overlayBorderColor() {
		return new Color(0, 0, 0, 70);
	}



	@Alpha
	@ConfigItem(
			position = 10,
			keyName = "graphBackgroundColor",
			name = "Graph Background Color",
			description = "The background color of the graph"
	)
	default Color graphBackgroundColor() {
		return new Color(0, 0, 0, 120);
	}



	@Alpha
	@ConfigItem(
			position = 11,
			keyName = "graphBorderColor",
			name = "Graph Border Color",
			description = "The border color of the graph"
	)
	default Color graphBorderColor() {
		return new Color(0, 0, 0, 70);
	}






	@ConfigItem(
			position = 12,
			keyName = "fontSize",
			name = "Font Size",
			description = "Default: 16"
	)
	default int fontSize() {
		return 16;
	}


	@ConfigItem(
			position = 13,
			keyName = "fontStyle",
			name = "Font Style",
			description = "Default: Regular"
	)
	default FontStyle fontStyle() {
		return FontStyle.REGULAR;
	}

	enum FontStyle {
		REGULAR(0),
		BOLD(1),
		ITALICS(2);

		private final int value;

		FontStyle(int value) {
			this.value = value;
		}

		public int getValue() {
			return value;
		}
	}




}




package com.apm;

import net.runelite.client.input.KeyListener;
import java.awt.event.KeyEvent;

public class ApmKeyListener implements KeyListener {
    public final ApmPlugin plugin;
    public final ApmConfig config;

    ApmKeyListener(ApmPlugin plugin, ApmConfig config) {
        this.plugin = plugin;
        this.config = config;
    }

    @Override
    public void keyTyped(KeyEvent e) {

    }

    @Override
    public void keyPressed(KeyEvent e) {

    }

    @Override
    public void keyReleased(KeyEvent e) {
        if (config.includeKeyPresses()) {
            plugin.totalInputCount++;
            plugin.inputCountSecond++;
        }
    }
}
package com.apm;

import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.components.LayoutableRenderableEntity;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

import javax.inject.Inject;
import java.awt.*;

import java.util.LinkedList;

public class ApmOverlay extends OverlayPanel {

    private final ApmPlugin plugin;
    private final ApmConfig config;


    @Inject
    public ApmOverlay(ApmPlugin plugin, ApmConfig config) {
        this.plugin = plugin;
        this.config = config;

        setPosition(OverlayPosition.TOP_LEFT);
    }

    LayoutableRenderableEntity apmGraph = new LayoutableRenderableEntity() {

        @Override
        public Dimension render(Graphics2D graphics) {
            graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);

            if (config.toggleBehind()) {
                setLayer(OverlayLayer.ABOVE_SCENE);
            } else {
                setLayer(OverlayLayer.ABOVE_WIDGETS);
            }

            int overlayWidth, overlayHeight;                // width and height of the entire overlay
            try {
                overlayWidth = getPreferredSize().width;
                overlayHeight = getPreferredSize().height;
            } catch (NullPointerException e) {
                overlayWidth = 180;                         // Default settings for first time
                overlayHeight = 60;
                ApmOverlay.this.setPreferredSize(new Dimension(overlayWidth, overlayHeight));
            }

            int width, height, tempX;                       // width and height of the graph

            int marginGraphHeight = config.fontSize();
            int marginGraphWidth = 10;

            if (config.hideMargin()){
                width = overlayWidth;                       // set graph width to whole plugin width
                height = overlayHeight - marginGraphHeight; // remove the extra height
            } else {
                width = overlayWidth - marginGraphWidth * 2;
                height = overlayHeight - (marginGraphHeight + 15);
            }

            if (config.hideGraph()) {
                width = 0;
                height = 0;
                overlayHeight = config.fontSize();
            }

            //background rect
            graphics.setColor(config.overlayBackgroundColor());
            graphics.fillRect(0, 0, overlayWidth, overlayHeight);

            //outside border
            graphics.setColor(config.overlayBorderColor());
            graphics.drawRect(0, 0, overlayWidth, overlayHeight);

            //inside border
            graphics.setColor(config.graphBorderColor());
            int val = config.hideMargin() ? 0 : marginGraphWidth - 1;
            graphics.drawRect(val, marginGraphHeight + 1, width, height);

            //inside rect
            graphics.setColor(config.graphBackgroundColor());
            graphics.fillRect(val, marginGraphHeight + 1, width, height);

            graphics.setColor(config.textColor());
            String fontName = "Runescape Small";
            Font userFont = new Font(fontName, config.fontStyle().getValue(), config.fontSize());
            graphics.setFont(userFont);

            //Right label
            String rightLabel = "APM: " + plugin.currentApm;
            int strWidth = graphics.getFontMetrics().stringWidth(rightLabel);
            graphics.drawString(rightLabel, overlayWidth - strWidth - marginGraphWidth, marginGraphHeight - 1);


            // Left Label
            String leftLabel = "?";
            if (plugin.seconds < 60)  {
                leftLabel = ("Session APM: " + plugin.currentApm);
            }
            else {
                leftLabel = "Session APM: " + (int) (plugin.totalInputCount / (plugin.seconds / 60.0));
            }
            graphics.drawString(leftLabel, marginGraphWidth, marginGraphHeight - 1);

            LinkedList<Integer> data;
            data = plugin.getPastMinuteInputs();

            int dataStart = (data.size() > overlayWidth) ? (data.size() - overlayWidth) : 0;

            int maxValue;
            int minValue;
                maxValue = plugin.max;
                minValue = plugin.min;

            // change max inputs to 100, prevents div by 0 in-case of error
            if (maxValue <= 0) {
                maxValue = 10;
            }

            int tempMax = maxValue;
                double round = maxValue > 50 ? 50 : 10;
                maxValue = (int) (Math.ceil((double) tempMax / round) * round);

                if ((maxValue - tempMax) <= (0.2 * maxValue)) {
                    maxValue += round; // increase the max value to move the graph away from the top
                }

            if (maxValue == minValue) {
                maxValue++;
                minValue--;
            }

            if (!config.hideGraph()) {
                // Drawing bar graph
                if (config.chartType().getValue().equals("Bar")) {
                    graphics.setColor(config.graphColor());

                    for (int i = dataStart; i < data.size(); i++) {
                        int y = data.get(i);

                        int barWidth;
                        if (!config.hideMargin()) {
                            barWidth = (overlayWidth - marginGraphWidth) / 60;
                        } else {
                            barWidth = (overlayWidth / 60);
                        }
                        y = y < 0 ? maxValue - 1 : y;
                        y = height - (((height - 2) * (y - minValue)) / (maxValue - minValue) + 1);
                        tempX = ((width) * (i - dataStart) / (data.size() - dataStart));
                        y += marginGraphHeight;


                        if (!config.hideMargin()) {
                            tempX += marginGraphWidth;
                        }

                        graphics.setColor(config.graphColor());

                        if (!config.hideMargin()) {
                            graphics.drawRect(tempX, y, barWidth, overlayHeight - marginGraphHeight - y);
                            graphics.fillRect(tempX, y, barWidth, overlayHeight - marginGraphHeight - y);
                        } else {
                            graphics.drawRect(tempX, y, barWidth, overlayHeight - y);
                            graphics.fillRect(tempX, y, barWidth, overlayHeight - y);
                        }

                    }
                // Drawing line graph
                } else {
                    graphics.setColor(config.graphColor());
                    int oldX, oldY = oldX = -1;

                    for (int x = dataStart; x < data.size(); x++) {
                        int y = data.get(x);

                        y = y < 0 ? maxValue - 1 : y;
                        y = height - (((height - 2) * (y - minValue)) / (maxValue - minValue) + 1);
                        tempX = ((width) * (x - dataStart) / (data.size() - dataStart));
                        y += marginGraphHeight;

                        if (!config.hideMargin()) {
                            tempX += marginGraphWidth;
                        }
                        if (y >= 0) {
                            graphics.drawLine(tempX, y, tempX, y);
                        }
                        if (oldX != -1 && y >= 0) {
                            graphics.drawLine(oldX, oldY, tempX, y);
                        }

                        oldX = tempX;
                        oldY = y;
                    }
                }

            }

            return new Dimension(overlayWidth - 8, overlayHeight - 8);
        }

        @Override
        public Rectangle getBounds() {
            return null;
        }

        @Override
        public void setPreferredLocation(Point position) {

        }

        @Override
        public void setPreferredSize(Dimension dimension) {

        }
    };

    @Override
    public Dimension render(Graphics2D graphics) {
        panelComponent.render(graphics);
        panelComponent.getChildren().add(apmGraph);
        panelComponent.setBackgroundColor(new Color(0, 0, 0, 0));
        return super.render(graphics);
    }
}

