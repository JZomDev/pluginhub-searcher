package io.cbitler.stealingartefacts;

import lombok.Getter;
import net.runelite.api.ObjectID;
import net.runelite.api.coords.WorldPoint;

/**
 * Enum representing the current state of the minigame for the player
 */
@Getter
public enum StealingArtefactsState {
    NO_TASK(""),
    NORTHERN("Northern house", ObjectID.DRAWERS_27771, ObjectID.LADDER_27634, 0, new WorldPoint(1768, 3750, 0), new WorldPoint(0, 0, 0)),
    SOUTHEASTERN("South-Eastern house", ObjectID.DRAWERS_27772, ObjectID.LADDER_27634, 1, new WorldPoint(1775, 3733, 1), new WorldPoint(1776, 3730, 0)),
    SOUTHERN("Southern house", ObjectID.DRAWERS_27773, ObjectID.LADDER_27634, 1, new WorldPoint(1765, 3732, 1), new WorldPoint(1768, 3733, 0)),
    SOUTHWESTERN("South-Western house", ObjectID.DRAWERS_27774, ObjectID.LADDER_27634, 1, new WorldPoint(1749, 3734, 1), new WorldPoint(1749, 3730, 0)),
    WESTERN("Western house", ObjectID.DRAWERS_27775, ObjectID.LADDER_27634, 1, new WorldPoint(1750, 3749, 1), new WorldPoint(1751, 3751, 0)),
    NORTHWESTERN("North-Western house", ObjectID.DRAWERS_27776, ObjectID.LADDER_27634, 1, new WorldPoint(1750, 3761, 1), new WorldPoint(1750, 3756, 0)),
    FAILURE("Artefact Failed - Return to Captain Khaled"),
    DELIVER_ARTEFACT("Deliver the Artefact to Captain Khaled");


    private final String target;
    private final int drawerId;
    private final int ladderId;
    private final int drawerPlane;
    private final WorldPoint hintLocation;
    private final WorldPoint ladderLocation;

    /**
     * Create a state pointing at a specific house
     * @param target The string to show in the overlay as the target
     * @param drawerId The game object ID of the drawer
     * @param ladderId The game object ID of the ladder
     * @param drawerPlane The plane level (z) of the drawer
     * @param hintLocation The hint location for the house
     * @param ladderLocation The plane level (z) of the ladder
     */
    StealingArtefactsState(String target, int drawerId, int ladderId, int drawerPlane, WorldPoint hintLocation, WorldPoint ladderLocation) {
        this.target = target;
        this.drawerId = drawerId;
        this.ladderId = ladderId;
        this.drawerPlane = drawerPlane;
        this.hintLocation = hintLocation;
        this.ladderLocation = ladderLocation;
    }

    /**
     * Create a state for states that aren't a specific house
     * @param target The string to show in the overlay as the target
     */
    StealingArtefactsState(String target) {
        this.target = target;
        drawerId = -1;
        ladderId = -1;
        drawerPlane = -1;
        hintLocation = null;
        ladderLocation = null;
    }
}

package io.cbitler.stealingartefacts;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("stealingartefacts")
public interface StealingArtefactsConfig extends Config {
    String GROUP_NAME = "StealingArtefacts";
    String CURRENT_STATE_KEY = "currentState";

    String HIGHLIGHT_PATROLS = "highlightPatrols";

    String HIGHLIGHT_LADDERS = "highlightLadders";

    String HIGHLIGHT_GUARD_LURES = "highlightGuardLures";

    String SHOW_TO_NEXT_LEVEL = "showToNextLevel";

    @ConfigItem(
            keyName = CURRENT_STATE_KEY,
            name = "",
            description ="",
            hidden = true
    )
    default int currentHouse() {
        return -1;
    }

    @ConfigItem(
            keyName = HIGHLIGHT_PATROLS,
            name = "Highlight Patrols",
            description = "Whether or not to highlight patrols"
    )
    default boolean highlightPatrols() { return true; }

    @ConfigItem(
            keyName = HIGHLIGHT_LADDERS,
            name = "Highlight House Ladders",
            description = "Whether or not to highlight house ladders"
    )
    default boolean highlightLadders() { return true; }

    @ConfigItem(
            keyName = HIGHLIGHT_GUARD_LURES,
            name = "Highlight Lured Guards",
            description = "Whether or not to highlight guards when lured/positioned correctly"
    )
    default boolean highlightGuardLures() { return true; }

    @ConfigItem(
            keyName = SHOW_TO_NEXT_LEVEL,
            name = "Show artefacts to next level",
            description = "Whether or not to show artefacts to next level"
    )
    default boolean showToNextLevel() { return true; }

    @ConfigItem(
            keyName = "showOverlay",
            name = "Show overlay",
            description = "Uncheck this to hide the overlay"
    )
    default boolean showOverlay() {
        return true;
    }
}
package io.cbitler.stealingartefacts;

import net.runelite.api.Client;
import net.runelite.client.plugins.xptracker.XpTrackerService;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import javax.inject.Inject;
import java.awt.*;

/**
 * Overlay to show the user's current target in the minigame
 */
public class StealingArtefactsOverlay extends Overlay {
    private final StealingArtefactsPlugin plugin;
    private final Client client;
    private final StealingArtefactsConfig config;
    private final PanelComponent panelComponent = new PanelComponent();

    @Inject
    private StealingArtefactsOverlay(Client client, StealingArtefactsPlugin plugin, StealingArtefactsConfig config) {
        setPosition(OverlayPosition.TOP_LEFT);
        this.client = client;
        this.plugin = plugin;
        this.config = config;
    }

    /**
     * Draw the overlay in the top left corner, but only if the user is in the area of the minigame
     * @param graphics The graphics object to draw the overlay with
     * @return The rendered panel, or null if they aren't in the minigame area
     */
    @Override
    public Dimension render(Graphics2D graphics) {
        if (!config.showOverlay()) {
            return null;
        }

        if (client.getLocalPlayer() != null && plugin.isInPisc(client.getLocalPlayer().getWorldLocation())) {
            panelComponent.getChildren().clear();
            String title = "Stealing Artefacts";
            String targetLine = getTargetMessage(plugin.currentState);

            // Title
            panelComponent.getChildren().add(TitleComponent.builder().text(title).color(Color.YELLOW).build());

            // Target
            panelComponent.getChildren().add(LineComponent.builder().left("Current Target:").build());
            panelComponent.getChildren().add(LineComponent.builder().left(targetLine).build());

            // Artefacts to goal
            if (plugin.artefactsToGoal > 0 && config.showToNextLevel()) {
                panelComponent.getChildren().add(LineComponent.builder().build());
                panelComponent.getChildren().add(LineComponent.builder().left("Artefacts until goal:").build());
                panelComponent.getChildren().add(LineComponent.builder().left(String.valueOf(plugin.artefactsToGoal)).build());
            }

            if (config.highlightGuardLures()) {
                panelComponent.getChildren().add(LineComponent.builder().build());
                panelComponent.getChildren().add(LineComponent.builder().left("Guard Lures:").build());

                String eastGuardLured = plugin.eastGuardLured ? "\u2713" : "\u2717";
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Eastern Guard")
                        .right(eastGuardLured)
                        .rightFont(FontManager.getDefaultFont())
                        .rightColor(plugin.eastGuardLured ? Color.GREEN : Color.RED)
                        .build());

                String southEastGuardLured = plugin.southEastGuardLured ? "\u2713" : "\u2717";
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("South-East Guard")
                        .right(southEastGuardLured)
                        .rightFont(FontManager.getDefaultFont())
                        .rightColor(plugin.southEastGuardLured ? Color.GREEN : Color.RED)
                        .build());
            }

            panelComponent.setPreferredSize(new Dimension(200, 0));
            return panelComponent.render(graphics);
        }
        return null;
    }

    /**
     * Get the target message based on the state
     * @param state The current minigame state
     * @return The string to display as the target, either 'None' or the target message
     */
    private String getTargetMessage(StealingArtefactsState state) {
        if (state == null || state == StealingArtefactsState.NO_TASK) {
            return "None";
        } else {
            return state.getTarget();
        }
    }
}

package io.cbitler.stealingartefacts;

public class Constants {
    final static int PATROL_ID_MIN = 6973;
    final static int PATROL_ID_MAX = 6980;
    final static int STEALING_ARTEFACTS_VARBIT = 4903;
    final static int SOUTH = 0;
    final static int WEST = 512;
}

package io.cbitler.stealingartefacts;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.xptracker.XpTrackerPlugin;
import net.runelite.client.plugins.xptracker.XpTrackerService;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Objects;

@PluginDescriptor(
        name = "Stealing Artefacts",
        description = "Show the current house for stealing artefacts",
        tags = {}
)
@PluginDependency(XpTrackerPlugin.class)
@Slf4j
public class StealingArtefactsPlugin extends Plugin {
    @Inject
    private OverlayManager overlayManager;

    @Inject
    ConfigManager configManager;

    @Inject
    private StealingArtefactsOverlay overlay;

    @Inject
    private StealingArtefactsHouseOverlay houseOverlay;

    @Inject
    private StealingArtefactsPatrolOverlay patrolOverlay;

    @Inject
    private Client client;

    @Inject
    private XpTrackerService xpTrackerService;

    public HashSet<GameObject> markedObjects = new HashSet<>();

    public HashSet<NPC> markedNPCs = new HashSet<>();

    public StealingArtefactsState currentState;

    public boolean highlightPatrols = true;

    public boolean showArtefactsToNextLevel = true;

    public static final WorldPoint EAST_GUARD_POS = new WorldPoint(1777, 3746,0);
    public static final WorldPoint SOUTHEAST_GUARD_POS = new WorldPoint(1780, 3731,0);
    public boolean eastGuardLured = false;

    public boolean southEastGuardLured = false;

    public NPC captainKhaled;

    public int artefactsToGoal = -1;

    /**
     * Handle plugin startup
     */
    @Override
    protected void startUp() {
        this.overlayManager.add(overlay);
        this.overlayManager.add(houseOverlay);
        this.overlayManager.add(patrolOverlay);
        if (client.getGameState() == GameState.LOGGED_IN)
        {
            loadConfig();
        }
    }

    /**
     * Handle shutdown clean up
     */
    @Override
    protected void shutDown() {
        this.overlayManager.remove(overlay);
        this.overlayManager.remove(houseOverlay);
        this.overlayManager.remove(patrolOverlay);

        if (client.getLocalPlayer() != null && isInPisc(client.getLocalPlayer().getWorldLocation())) {
            client.clearHintArrow();
        }
    }

    /**
     * Specify our config
     * @param configManager The Runelite Config manager
     * @return The configuration for this plugin
     */
    @Provides
    StealingArtefactsConfig providesConfig(ConfigManager configManager) {
        return configManager.getConfig(StealingArtefactsConfig.class);
    }


    @Subscribe
    public void onGameStateChanged(GameStateChanged e) {
        if (e.getGameState() == GameState.LOGGING_IN || e.getGameState() == GameState.LOGIN_SCREEN || e.getGameState() == GameState.HOPPING) {
            markedNPCs.clear();
            markedObjects.clear();
        }
        if (e.getGameState() == GameState.LOGGED_IN && !(isInPisc(client.getLocalPlayer().getWorldLocation()))) {
            markedNPCs.clear();
            markedObjects.clear();
        }
    }
    @Subscribe
    public void onConfigChanged(ConfigChanged c) {
        if (!c.getGroup().equalsIgnoreCase(StealingArtefactsConfig.GROUP_NAME)) {
            return;
        }
        handleRefreshCurrentHouse();
    }

    /**
     * Configs are username-local, so load if we change username
     * @param e The UsernameChanged event
     */
    @Subscribe
    public void onUsernameChanged(UsernameChanged e)
    {
        if (client.getGameState() == GameState.LOGIN_SCREEN || client.getGameState() == GameState.LOGGED_IN) {
            loadConfig();
        }
    }

    /**
     * On game tick, update the hint arrow if necessary
     * @param event The GameTick event
     */
    @Subscribe
    public void onGameTick(GameTick event) {
        if (client.getLocalPlayer() != null && isInPisc(client.getLocalPlayer().getWorldLocation())) {
            if (currentState != null && client.getLocalPlayer() != null) {
                if (currentState == StealingArtefactsState.FAILURE || currentState == StealingArtefactsState.DELIVER_ARTEFACT) {
                    if (captainKhaled != null) {
                        client.setHintArrow(captainKhaled);
                    }
                } else if (currentState != StealingArtefactsState.NO_TASK) {
                    WorldPoint playerPos = client.getLocalPlayer().getWorldLocation();
                    if (playerPos.distanceTo(currentState.getHintLocation()) > 3) {
                        client.setHintArrow(currentState.getHintLocation());
                    }
                }
            }
        } else {
            if (client.getHintArrowPoint() != null) {
                if (isInPisc(client.getHintArrowPoint())) {
                    client.clearHintArrow();
                }
            }
        }
    }

    /**
     * Check if we should mark a game object when it spawns
     * @param event The GameObjectSpawnedEvent
     */
    @Subscribe
    public void onGameObjectSpawned(GameObjectSpawned event) {
        if (shouldMarkObject(event.getGameObject())) {
            markedObjects.add(event.getGameObject());
        }
    }

    /**
     * Remove a game object if we currently have it marked when it despawns
     * @param event The GameObjectDespawned event
     */
    @Subscribe
    public void onGameObjectDespawned(GameObjectDespawned event) {
        if (event.getGameObject() != null && !markedObjects.isEmpty()) {
            markedObjects.remove(event.getGameObject());
        }
    }

    /**
     * Capture npc spawns for Captain Khaled and Patrolmen/women
     * @param event The NPCSpawned event
     */
    @Subscribe
    public void onNpcSpawned(NpcSpawned event) {
        if (event.getNpc().getId() == NpcID.CAPTAIN_KHALED_6972) {
            captainKhaled = event.getNpc();
        }
        if (event.getNpc().getId() >= Constants.PATROL_ID_MIN && event.getNpc().getId() <= Constants.PATROL_ID_MAX) {
            markedNPCs.add(event.getNpc());
        }
    }

    /**
     * Handle NPCs despawning (Captain Khaled, Patrolmen/women)
     * @param event The NPCDespawned event
     */
    @Subscribe
    public void onNpcDespawned(NpcDespawned event) {
        if (event.getNpc() == captainKhaled) {
            captainKhaled = null;
            if (currentState == StealingArtefactsState.DELIVER_ARTEFACT || currentState == StealingArtefactsState.FAILURE) {
                client.clearHintArrow();
            }
        }

        markedNPCs.remove(event.getNpc());
    }

    /**
     * Handle the stealing artefacts varbit change
     * TODO: Change to use Varbit in Runelite API once added
     * @param event The VarbitChanged event
     */
    @Subscribe
    public void onVarbitChanged(VarbitChanged event) {
        if (client.getGameState() != GameState.LOGGED_IN) {
            return;
        }

        StealingArtefactsState state = StealingArtefactsState.values()[client.getVarbitValue(Constants.STEALING_ARTEFACTS_VARBIT)];
        if (state != null) {
            updateState(state);
        }

        if ((state == StealingArtefactsState.DELIVER_ARTEFACT || state == StealingArtefactsState.FAILURE)) {
            if (captainKhaled != null) {
                client.setHintArrow(captainKhaled);
            } else {
                if (client.getLocalPlayer() != null && isInPisc(client.getLocalPlayer().getWorldLocation())) {
                    client.clearHintArrow();
                }
            }
            markedObjects.clear();
        } else if (state == StealingArtefactsState.NO_TASK) {
            if (client.getLocalPlayer() != null && isInPisc(client.getLocalPlayer().getWorldLocation())) {
                client.clearHintArrow();
            }
            markedObjects.clear();
        } else {
            if (client.getLocalPlayer() != null && isInPisc(client.getLocalPlayer().getWorldLocation())) {
                client.setHintArrow(state.getHintLocation());
            }
        }
    }

    @Subscribe
    public void onStatChanged(StatChanged e) {
        if (client.getLocalPlayer() != null && isInPisc(client.getLocalPlayer().getWorldLocation())) {
            artefactsToGoal = StealingArtefactsUtil.artefactsToNextLevel(client, xpTrackerService);
        }
    }

    private void handleRefreshCurrentHouse() {
        final String stateGroup = StealingArtefactsConfig.GROUP_NAME + "." + client.getUsername();
        String configStateText = configManager.getConfiguration(stateGroup, StealingArtefactsConfig.CURRENT_STATE_KEY);
        if (configStateText != null) {
            int configState = Integer.parseInt(configStateText);
            if (configState != -1) {
                currentState = StealingArtefactsState.values()[configState];
            }

            if (client.getLocalPlayer() != null && isInPisc(client.getLocalPlayer().getWorldLocation())) {
                client.clearHintArrow();
                if (currentState == StealingArtefactsState.DELIVER_ARTEFACT || currentState == StealingArtefactsState.FAILURE) {
                    if (captainKhaled != null) {
                        client.setHintArrow(captainKhaled);
                    }
                    markedObjects.clear();
                } else if (currentState != StealingArtefactsState.NO_TASK) {
                    client.setHintArrow(currentState.getHintLocation());
                }
            }
        }
    }
    /**
     * Load the user config
     */
    public void loadConfig() {
        handleRefreshCurrentHouse();
    }

    /**
     * Check if we should be marking this object - for both drawers and ladders
     * @param object The game object to check
     * @return True if we should mark it, false if we shouldn't.
     */
    public boolean shouldMarkObject(GameObject object) {
        boolean shouldMark = false;
        if (currentState != null && currentState.getDrawerId() != -1) {
            shouldMark  = object.getId() == currentState.getDrawerId();
        }
        if (currentState != null && currentState.getLadderId() != -1 && (object.getWorldLocation().distanceTo(currentState.getLadderLocation()) == 0)) {
            shouldMark  = object.getId() == currentState.getLadderId();
        }
        return shouldMark;
    }

    /**
     * Update the state in the plugin and the config
     * @param state The state to set
     */
    private void updateState(StealingArtefactsState state) {
        final String stateGroup = StealingArtefactsConfig.GROUP_NAME + "." + client.getUsername();

        if (state == currentState) {
            return;
        }

        if (state == null) {
            currentState = null;
            configManager.unsetConfiguration(stateGroup, StealingArtefactsConfig.CURRENT_STATE_KEY);
        } else {
            currentState = state;
            configManager.setConfiguration(stateGroup, StealingArtefactsConfig.CURRENT_STATE_KEY, state.ordinal());
        }
    }

    /**
     * Check if the user is in Port Pisc
     * @param position The user's position in the world
     * @return True if they are in Port Pisc, otherwise false
     */
    public boolean isInPisc(WorldPoint position) {
        if (position.getX() >= 1739 && position.getX() <= 1860) {
            return position.getY() >= 3675 && position.getY() <= 3803;
        }

        return false;
    }

    /**
     * Check if the applicable guards is facing the lured direction
     * @param guard The NPC object to check
     * @return True if guard is facing correct position, otherwise false
     */
    public boolean isGuardLured(NPC guard) {
        boolean isLured = false;
        int eastGuardDistance = guard.getWorldLocation().distanceTo(EAST_GUARD_POS);
        int southEastGuardDistance = guard.getWorldLocation().distanceTo(SOUTHEAST_GUARD_POS);

        if (eastGuardDistance == 0 && guard.getCurrentOrientation() == Constants.SOUTH) {
            isLured = true;
            eastGuardLured = true;
        } else if (eastGuardDistance == 0) {
            eastGuardLured = false;
        }

        if (southEastGuardDistance == 0 && guard.getCurrentOrientation() == Constants.WEST) {
            isLured = true;
            southEastGuardLured = true;
        } else if (southEastGuardDistance == 0) {
            southEastGuardLured = false;
        }

        return isLured;
    }
}

package io.cbitler.stealingartefacts;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.client.plugins.xptracker.XpTrackerService;

/**
 * Utility methods for the plugin
 */
@Slf4j
public class StealingArtefactsUtil {
    /**
     * Get the number of artefacts to next level
     * @param client The runelite client
     * @param service XPTracker service
     * @return The number of artefacts until the next level, rounded up
     */
    static int artefactsToNextLevel(Client client, XpTrackerService service) {
        double currentXp = client.getSkillExperience(Skill.THIEVING);
        double currentLevel = client.getRealSkillLevel(Skill.THIEVING);
        double goalXp = service.getEndGoalXp(Skill.THIEVING);
        double remainingXp = goalXp - currentXp;

        return (int) Math.ceil(remainingXp / (750 + (40*currentLevel)));
    }
}

package io.cbitler.stealingartefacts;

import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

import javax.inject.Inject;
import java.awt.*;

/**
 * Overlay to highlight the patrol-people in port pisc
 */
public class StealingArtefactsPatrolOverlay extends Overlay {
    public static final Color CLICKBOX_BORDER = Color.YELLOW;
    public static final Color CLICKBOX_FILL_COLOR = new Color(255, 0, 0, 50);

    public static final Color CLICKBOX_FILL_COLOR_LURED = new Color(0, 255, 0, 50);

    private final StealingArtefactsPlugin plugin;
    private final StealingArtefactsConfig config;
    private final Client client;

    @Inject
    StealingArtefactsPatrolOverlay(Client client, StealingArtefactsPlugin plugin, StealingArtefactsConfig config) {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        this.client = client;
        this.plugin = plugin;
        this.config = config;
    }

    /**
     * Overlay the patrol-people on the same plane as the player
     * @param graphics The graphics to draw the overlay with
     * @return null, use OverlayUtil to draw overlay
     */
    @Override
    public Dimension render(Graphics2D graphics) {
        Point mousePosition = client.getMouseCanvasPosition();
        if (config.highlightPatrols()) {
            for (NPC actor : plugin.markedNPCs) {
                if ((actor.getId() == Constants.PATROL_ID_MAX) && plugin.isGuardLured(actor) && config.highlightGuardLures()) {
                    OverlayUtil.renderHoverableArea(graphics, actor.getConvexHull(),
                            mousePosition, CLICKBOX_FILL_COLOR_LURED, CLICKBOX_BORDER, CLICKBOX_BORDER);
                } else {
                    OverlayUtil.renderHoverableArea(graphics, actor.getConvexHull(),
                            mousePosition, CLICKBOX_FILL_COLOR, CLICKBOX_BORDER, CLICKBOX_BORDER);
                }
            }
        }

        return null;
    }
}

package io.cbitler.stealingartefacts;

import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.Point;
import net.runelite.api.ObjectID;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

import javax.inject.Inject;
import java.awt.*;

/**
 * Overly for drawers in the minigame
 */
public class StealingArtefactsHouseOverlay extends Overlay {
    public static final Color CLICKBOX_BORDER = Color.YELLOW;
    public static final Color CLICKBOX_HOVER_BORDER = Color.YELLOW;
    public static final Color CLICKBOX_FILL_COLOR = new Color(0, 255, 0, 50);

    private final Client client;
    private final StealingArtefactsPlugin plugin;

    private final StealingArtefactsConfig config;

    @Inject
    StealingArtefactsHouseOverlay(Client client, StealingArtefactsPlugin plugin, StealingArtefactsConfig config) {
        super(plugin);
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        this.client = client;
        this.plugin = plugin;
        this.config = config;
    }

    /**
     * Draw an overlay on the drawers and ladders for the minigame where applicable
     * @param graphics The graphics to draw the overlay with
     * @return null, use OverlayUtil to render hoverable area
     */
    @Override
    public Dimension render(Graphics2D graphics) {
        if (plugin.currentState == null) {
            return null;
        }

        Point mousePosition = client.getMouseCanvasPosition();
        for (GameObject object : plugin.markedObjects) {
            if (object.getId() == ObjectID.LADDER_27634 && !(config.highlightLadders())) {
                continue;
            }
            if (client.getPlane() == object.getWorldLocation().getPlane()) {
                OverlayUtil.renderHoverableArea(graphics, object.getClickbox(), mousePosition, CLICKBOX_FILL_COLOR,
                        CLICKBOX_BORDER, CLICKBOX_HOVER_BORDER);
            }
        }

        return null;
    }
}

package io.cbitler.stealingartefacts;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class StealingArtefactsPluginTest {
    public static void main(String[] args) throws Exception
    {
        ExternalPluginManager.loadBuiltin(StealingArtefactsPlugin.class);
        RuneLite.main(args);
    }
}

