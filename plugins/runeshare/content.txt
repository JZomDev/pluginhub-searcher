package app.runeshare.api;

import app.runeshare.RuneShareConfig;
import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.plugins.banktags.tabs.Layout;
import net.runelite.client.plugins.banktags.tabs.TagTab;
import okhttp3.*;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static java.net.HttpURLConnection.HTTP_CREATED;

@Slf4j
@Singleton
public class RuneShareApi {
    private static final String URL = "https://osrs.runeshare.app/api/bank_tabs";

    @Inject
    private OkHttpClient okHttpClient;

    @Inject
    private Gson gson;

    @Inject
    private RuneShareConfig runeShareConfig;

    public void createRuneShareBankTab(final TagTab tagTab, final List<Integer> itemIds, final Layout layout) {
        RuneShareBankTab runeShareBankTab = new RuneShareBankTab();
        runeShareBankTab.setTag(tagTab.getTag());
        runeShareBankTab.setIconRunescapeItemId(Integer.toString(tagTab.getIconItemId()));

        List<RuneShareBankTabItem> runeShareBankTabItems = new ArrayList<>();
        runeShareBankTab.setItems(runeShareBankTabItems);

        final int[] runescapeItemIds;
        if (layout != null) {
            runescapeItemIds = layout.getLayout();
        } else {
            runescapeItemIds = itemIds.stream().mapToInt(i->i).toArray();
        }

        for (int position = 0; position < runescapeItemIds.length; position++) {
            int runescapeItemId = runescapeItemIds[position];
            if (runescapeItemId >= 0) {
                RuneShareBankTabItem runeShareBankTabItem = new RuneShareBankTabItem();
                runeShareBankTabItem.setPosition(position);
                runeShareBankTabItem.setRunescapeItemId(Integer.toString(runescapeItemId));
                runeShareBankTabItems.add(runeShareBankTabItem);
            }
        }

        createRuneShareBankTab(runeShareBankTab);
    }

    private void createRuneShareBankTab(final RuneShareBankTab runeShareBankTab) {
        final Gson runeshareGson = gson.newBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();

        final Request request = new Request.Builder()
                .url(URL)
                .header("Authorization", "Token token=" + getApiToken())
                .header("Accept", "application/json")
                .post(RequestBody.create(MediaType.parse("application/json; charset=utf-8"), runeshareGson.toJson(runeShareBankTab)))
                .build();

        okHttpClient.newCall(request).enqueue(new Callback()
        {
            @Override
            public void onFailure(Call call, IOException e)
            {
                log.warn("Failed to update bank tab.", e);
            }

            @Override
            public void onResponse(Call call, Response response)
            {
                if (response.code() == HTTP_CREATED) {
                    log.info("Successfully updated bank tab in RuneShare.");
                } else {
                    log.warn("Failed to update bank tab. Response Status code is {}. Response Body is {}", response.code(), response.body());
                }
                response.close();
            }
        });
    }

    private String getApiToken() {
        return runeShareConfig.apiToken();
    }
}

package app.runeshare.api;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class RuneShareBankTabItem {
    private int position;
    private String runescapeItemId;
}

package app.runeshare.api;

import lombok.Getter;
import lombok.Setter;

import java.util.List;

@Getter
@Setter
public class RuneShareBankTab {
    private String tag;
    private String iconRunescapeItemId;
    private List<RuneShareBankTabItem> items;
}

package app.runeshare;

import app.runeshare.api.RuneShareApi;
import app.runeshare.ui.RuneSharePluginPanel;
import com.google.inject.Provides;
import javax.inject.Inject;
import javax.swing.*;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.banktags.BankTagsPlugin;
import net.runelite.client.plugins.banktags.BankTagsService;
import net.runelite.client.plugins.banktags.TagManager;
import net.runelite.client.plugins.banktags.tabs.Layout;
import net.runelite.client.plugins.banktags.tabs.TabManager;
import net.runelite.client.plugins.banktags.tabs.TagTab;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@Slf4j
@PluginDescriptor(
	name = "RuneShare",
	description = "Share bank tabs with other players",
	tags = { "gear", "inventory", "setups" }
)
@PluginDependency(BankTagsPlugin.class)
public class RuneSharePlugin extends Plugin
{
	private static final int NAVIGATION_PRIORITY = 100;
	private static final String PLUGIN_NAME = "RuneShare";

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	private RuneShareConfig runeShareConfig;

	@Inject
	private TabManager tabManager;

	@Inject
	private TagManager tagManager;

	@Inject
	private BankTagsService bankTagsService;

	@Inject
	private RuneShareApi runeShareApi;

	private RuneSharePluginPanel panel;

	private NavigationButton navigationButton;

	private String activeTag = null;

	private Layout activeLayout = null;

	private List<Integer> activeItemIds = null;

	@Override
	protected void startUp() throws Exception
	{
		this.panel = new RuneSharePluginPanel(runeShareConfig, runeShareApi);

		final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "/icon.png");

		this.navigationButton = NavigationButton.builder()
				.tooltip(PLUGIN_NAME)
				.icon(icon)
				.priority(NAVIGATION_PRIORITY)
				.panel(this.panel)
				.build();

		clientToolbar.addNavigation(navigationButton);
	}

	@Override
	protected void shutDown() throws Exception
	{
		clientToolbar.removeNavigation(navigationButton);
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (event.getGroup().equals(RuneShareConfig.CONFIG_GROUP)) {
			SwingUtilities.invokeLater(() -> {
				this.panel.redraw();
			});
		}
	}

	@Subscribe
	public void onGameTick(GameTick gameTick)
	{
		String tag = bankTagsService.getActiveTag();
		List<Integer> itemIds = tagManager.getItemsForTag(tag);
		Layout layout = bankTagsService.getActiveLayout();

		boolean hasTagChanged = tag != null && !tag.equals(this.activeTag);
		boolean hasItemIdsChanged = activeItemIds != null && !itemIds.isEmpty() && !itemIds.equals(activeItemIds);
		boolean hasLayoutChanged = (layout != null && activeLayout == null) || (layout == null && activeLayout != null) || (layout != null && activeLayout != null && !Arrays.equals(layout.getLayout(), activeLayout.getLayout()));

		if (hasTagChanged || hasItemIdsChanged || hasLayoutChanged) {
			this.activeTag = tag;

			if (itemIds != null) {
				this.activeItemIds = new ArrayList<>(itemIds);
			} else {
				this.activeItemIds = null;
			}

			if (layout != null) {
				this.activeLayout = new Layout(layout);
			} else {
				this.activeLayout = null;
			}

			log.debug("Active tag has changed to \"{}\"", this.activeTag);

			TagTab activeTagTab = tabManager.find(this.activeTag);

			SwingUtilities.invokeLater(() -> {
				final String apiToken = runeShareConfig.apiToken();
				if (apiToken != null && !apiToken.isEmpty() && runeShareConfig.autoSave()) {
					log.info("Automatically saving bank tab to RuneShare.");
					runeShareApi.createRuneShareBankTab(activeTagTab, activeItemIds, activeLayout);
				}

				this.panel.updateActiveTag(activeTagTab, activeItemIds, activeLayout);
			});
		} else if (tag == null && this.activeTag != null) {
			this.activeTag = null;
			this.activeItemIds = null;
			this.activeLayout = null;

			log.debug("There is no longer an active tag");

			SwingUtilities.invokeLater(() -> {
				this.panel.updateActiveTag(null, null, null);
			});
		}
	}

	@Provides
	RuneShareConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(RuneShareConfig.class);
	}
}

package app.runeshare.ui;

import app.runeshare.RuneShareConfig;
import app.runeshare.api.RuneShareApi;
import lombok.NonNull;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.plugins.banktags.tabs.Layout;
import net.runelite.client.plugins.banktags.tabs.TagTab;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;

import javax.annotation.Nullable;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.BorderLayout;
import java.util.List;

@Slf4j
public class RuneSharePluginPanel extends PluginPanel {
    private static final String MAIN_TITLE = "RuneShare";

    @NonNull
    private final RuneShareConfig runeShareConfig;

    @NonNull
    private final RuneShareApi runeShareApi;

    private TagTab activeTagTab = null;

    private List<Integer> activeItemIds = null;

    private Layout activeLayout = null;

    public RuneSharePluginPanel(@NonNull RuneShareConfig runeShareConfig, @NonNull RuneShareApi runeShareApi) {
        super(false);

        this.runeShareConfig = runeShareConfig;
        this.runeShareApi = runeShareApi;

        setBackground(ColorScheme.DARK_GRAY_COLOR);
        setLayout(new BorderLayout());

        drawPanel();
    }

    public void updateActiveTag(@Nullable TagTab activeTagTab, @Nullable List<Integer> activeItemIds, @Nullable Layout activeLayout) {
        this.activeTagTab = activeTagTab;
        this.activeLayout = activeLayout;
        this.activeItemIds = activeItemIds;

        if (activeTagTab != null) {
            log.debug("Redrawing panel with \"{}\" tag", activeTagTab.getTag());
        } else {
            log.debug("Redrawing panel without a tag");
        }

        drawPanel();
    }

    public void redraw() {
        log.debug("Redrawing panel");
        drawPanel();
    }

    private void drawPanel() {
        final JPanel containerPanel = new JPanel();
        containerPanel.setLayout(new BoxLayout(containerPanel, BoxLayout.Y_AXIS));
        containerPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
        containerPanel.setVisible(true);

        final JPanel titlePanel = new JPanel();
        titlePanel.setLayout(new BorderLayout());
        final JLabel title = new JLabel();
        title.setText(MAIN_TITLE);
        title.setForeground(Color.WHITE);
        titlePanel.add(title, BorderLayout.WEST);
        containerPanel.add(titlePanel);

        final String apiToken = runeShareConfig.apiToken();
        final boolean noApiTokenConfigured = apiToken == null || apiToken.isEmpty();
        if (noApiTokenConfigured) {
            final JTextArea noApiTokenConfiguredTextArea = new JTextArea(1, 20);
            noApiTokenConfiguredTextArea.setText("There is no API token configured. Please add this to the RuneShare plugin settings.");
            noApiTokenConfiguredTextArea.setWrapStyleWord(true);
            noApiTokenConfiguredTextArea.setLineWrap(true);
            noApiTokenConfiguredTextArea.setOpaque(false);
            noApiTokenConfiguredTextArea.setEditable(false);
            noApiTokenConfiguredTextArea.setFocusable(false);
            containerPanel.add(noApiTokenConfiguredTextArea);

        } else if (this.activeTagTab == null) {
            final JTextArea noActiveTagTextArea = new JTextArea(1, 20);
            noActiveTagTextArea.setText("There is no active tag. Please select an tag in your bank.");
            noActiveTagTextArea.setWrapStyleWord(true);
            noActiveTagTextArea.setLineWrap(true);
            noActiveTagTextArea.setOpaque(false);
            noActiveTagTextArea.setEditable(false);
            noActiveTagTextArea.setFocusable(false);
            containerPanel.add(noActiveTagTextArea);
        } else {
            final JTextArea activeTagTextArea = new JTextArea(1, 20);
            activeTagTextArea.setText("Active Tag: " + this.activeTagTab.getTag());
            activeTagTextArea.setWrapStyleWord(true);
            activeTagTextArea.setLineWrap(true);
            activeTagTextArea.setOpaque(false);
            activeTagTextArea.setEditable(false);
            activeTagTextArea.setFocusable(false);
            containerPanel.add(activeTagTextArea);

            if (runeShareConfig.autoSave()) {
                final JTextArea noSyncNeededTextArea = new JTextArea(1, 20);
                noSyncNeededTextArea.setText("Active tags are being saved automatically to RuneShare.");
                noSyncNeededTextArea.setWrapStyleWord(true);
                noSyncNeededTextArea.setLineWrap(true);
                noSyncNeededTextArea.setOpaque(false);
                noSyncNeededTextArea.setEditable(false);
                noSyncNeededTextArea.setFocusable(false);
                containerPanel.add(noSyncNeededTextArea);
            } else {
                final JButton syncButton = new JButton();
                syncButton.setText("Sync to RuneShare");
                syncButton.addActionListener((event) -> {
                    runeShareApi.createRuneShareBankTab(activeTagTab, activeItemIds, activeLayout);
                });
                containerPanel.add(syncButton);
            }
        }

        removeAll();
        add(containerPanel, BorderLayout.NORTH);
        revalidate();
    }
}

package app.runeshare;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import static app.runeshare.RuneShareConfig.CONFIG_GROUP;

@ConfigGroup(CONFIG_GROUP)
public interface RuneShareConfig extends Config
{
	String CONFIG_GROUP = "RuneShare";
	String API_TOKEN_CONFIG_KEY = "apiToken";

	@ConfigItem(
			keyName = API_TOKEN_CONFIG_KEY,
			name = "API Token",
			description = "Your unique API token for your RuneShare account. Go to https://osrs.runeshare.app/api_tokens to create one."
	)
	default String apiToken() { return null; }

	@ConfigItem(
			keyName = "autoSave",
			name = "Auto Save?",
			description = "If checked, changes to Bank Tag Tabs will automatically be saved in RuneShare."
	)
	default boolean autoSave() { return false; }
}

package app.runeshare;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class RuneSharePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(RuneSharePlugin.class);
		RuneLite.main(args);
	}
}

