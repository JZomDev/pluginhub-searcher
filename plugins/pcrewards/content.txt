package com.pcrewards;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PcRewardsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PcRewardsPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2023, Marvinb16
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.pcrewards;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

import com.pcrewards.PcRewardExpOptions;

@ConfigGroup("pcrewards")
public interface PcRewardsConfig extends Config
{

	@ConfigSection(
			name = "Armor Rewards",
			description = "Configure what armor rewards you want displayed",
			position = 98
	)
	String armorSection = "armor";
	@ConfigSection(
			name = "Exp Rewards",
			description = "Configure what exp rewards you want displayed",
			position = 96
	)
	String expSection = "experience";
	@ConfigSection(
			name = "Misc Rewards",
			description = "Configure what misc rewards you want displayed",
			position = 97
	)
	String miscSection = "Misc";




	@ConfigItem(
			position = 0,
			keyName = "displayExp",
			name = "Exp Calculation",
			description = "Calculate experience from current points",
			section = expSection
	)
	default PcRewardExpOptions getCalcStyle() { return PcRewardExpOptions.PRAYER; }
	// This is a different enum from the rest for the exp calculations.

	@ConfigItem(
			position = 1,
			keyName = "attack",
			name = "Attack",
			description = "Configure what Attack experience options displayed.",
			section = expSection
	)
	default PcRewardsConfigOptions getAtkOp(){
		return PcRewardsConfigOptions.ALL;
	}
	@ConfigItem(
			position = 2,
			keyName = "strength",
			name = "Strength",
			description = "Configure what Strength experience options displayed.",
			section = expSection
	)
	default PcRewardsConfigOptions getStrOp(){
		return PcRewardsConfigOptions.ALL;
	}
	@ConfigItem(
			position = 3,
			keyName = "defence",
			name = "Defence",
			description = "Configure what Defence experience options displayed.",
			section = expSection
	)
	default PcRewardsConfigOptions getDefOp(){
		return PcRewardsConfigOptions.ALL;
	}
	@ConfigItem(
			position = 4,
			keyName = "range",
			name = "Range",
			description = "Configure what Range experience options displayed.",
			section = expSection
	)
	default PcRewardsConfigOptions getRngOp(){
		return PcRewardsConfigOptions.ALL;
	}
	@ConfigItem(
			position = 5,
			keyName = "magic",
			name = "Magic",
			description = "Configure what Magic experience options displayed.",
			section = expSection
	)
	default PcRewardsConfigOptions getMagicOp(){
		return PcRewardsConfigOptions.ALL;
	}
	@ConfigItem(
			position = 6,
			keyName = "hitpoints",
			name = "Hitpoints",
			description = "Configure what Hitpoints experience options displayed.",
			section = expSection
	)
	default PcRewardsConfigOptions getHpOp(){
		return PcRewardsConfigOptions.ALL;
	}
	@ConfigItem(
			position = 7,
			keyName = "prayer",
			name = "Prayer",
			description = "Configure what Prayer experience options displayed.",
			section = expSection
	)
	default PcRewardsConfigOptions getPrayOp(){
		return PcRewardsConfigOptions.ALL;
	}

	@ConfigItem(
			position = 8,
			keyName = "expMult",
			name = "Exp. Mult",
			description = "Configure what Prayer experience options displayed.",
			section = expSection
	)
	default int getExpMult(){
		return 0;
	}

	@ConfigItem(
			position = 9,
			keyName = "herbpack",
			name = "Herb Pack",
			description = "Configure if the Herb pack is displayed.",
			section = miscSection
	)
	default boolean getHerb(){
		return false;
	}
	@ConfigItem(
			position = 10,
			keyName = "mineralpack",
			name = "Mineral Pack",
			description = "Configure if the Mineral pack is displayed.",
			section = miscSection
	)
	default boolean getMine(){
		return false;
	}

	@ConfigItem(
			position = 11,
			keyName = "seedpack",
			name = "Seed Pack",
			description = "Configure if the Seed pack is displayed.",
			section = miscSection
	)
	default boolean getSeed(){
		return false;
	}

	@ConfigItem(
			position = 11,
			keyName = "mace",
			name = "Mace",
			description = "Configure if the Mace is displayed.",
			section = armorSection
	)
	default boolean getMace(){
		return false;
	}

	@ConfigItem(
			position = 12,
			keyName = "robetop",
			name = "Robe Top",
			description = "Configure if the Robe top is displayed.",
			section = armorSection
	)
	default boolean getRTop(){
		return false;
	}

	@ConfigItem(
			position = 14,
			keyName = "robebottom",
			name = "Robe Bottoms",
			description = "Configure if the Robe Bottom is displayed.",
			section = armorSection
	)
	default boolean getRBtm(){
		return false;
	}

	@ConfigItem(
			position = 15,
			keyName = "gloves",
			name = "Gloves",
			description = "Configure if the Gloves are displayed.",
			section = armorSection
	)
	default boolean getGlove(){
		return false;
	}

	@ConfigItem(
			position = 15,
			keyName = "magehelm",
			name = "Mage Helm",
			description = "Configure if the Mage Helm is displayed.",
			section = armorSection
	)
	default boolean getMageHelm(){
		return false;
	}

	@ConfigItem(
			position = 16,
			keyName = "rangehelm",
			name = "Range Helm",
			description = "Configure if the Range Helm is displayed.",
			section = armorSection
	)
	default boolean getRhelm(){
		return false;
	}

	@ConfigItem(
			position = 17,
			keyName = "meleehelm",
			name = "Melee Helm",
			description = "Configure if the Melee Helm is displayed.",
			section = armorSection
	)
	default boolean getMelHelm(){
		return false;
	}

	@ConfigItem(
			position = 18,
			keyName = "seal",
			name = "Seal",
			description = "Configure if the Seal is displayed.",
			section = armorSection
	)
	default boolean getSeal(){
		return false;
	}





}

package com.pcrewards;

public class PcMath {


    public static int calc_Reward_EXP(int level, int points , PcRewardExpOptions exp_type, int league_mult){
        // Floor(level^2/600) * n where n = 35,32,or 18;

        if (level < 25) {return 0;}

        int n_mod = 0;

        switch (exp_type) {
            case ATTACK:
            case STRENGTH:
            case DEFENCE:
            case HITPOINTS:
                n_mod = 35;
                break;
            case MAGIC:
            case RANGE:
                n_mod = 32;
                break;
            case PRAYER:
                n_mod = 18;
                break;
        }

        double exp_per_point = Math.floor((Math.pow(level,2) / 600)) * n_mod;

        if (league_mult > 0 && league_mult <= 16) {
            exp_per_point = exp_per_point * league_mult;
        }

        int bonus_point_sets = (points / 100) * 100;
        int remaining_points = points % 100;

        int bonus_Exp = (int) (bonus_point_sets * exp_per_point * 1.1);
        int remain_Exp = (int) (remaining_points * exp_per_point);


        return bonus_Exp + remain_Exp;
    }


}

package com.pcrewards;

public enum PcRewardExpOptions {
    ATTACK("Attack"),
    STRENGTH("Strength"),
    DEFENCE("Defence"),
    RANGE("Ranged"),
    MAGIC("Magic"),
    HITPOINTS("Hitpoints"),
    PRAYER("Prayer"),
    HIDE("Hide");

    private final String abbrev;

    PcRewardExpOptions(String abbrev) {
        this.abbrev = abbrev;
    }

    @Override
    public String toString() {
        return abbrev;
    }

}

/*
 * Copyright (c) 2023, Marvinb16
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.pcrewards;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.events.*;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.api.events.MenuOptionClicked;

import com.pcrewards.PcRewardsDrawWidget;

@Slf4j
@PluginDescriptor(
		name = "PC Rewards",
		description = "Customize the PC Rewards screen to prevent unwanted spending",
		tags = {"pest control", "pc", "minigame", "hide", "points"}
)
public class PcRewardsPlugin extends Plugin
{
	public static final int PC_SHOP_WIDGET_ID = 15925251;
	public static final int PC_SHOP_GROUP_ID = 243;

	public static final int PC_POINTS_WIDGET_ID = 15925256;

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private PcRewardsConfig config;

	@Inject
	private PcRewardsDrawWidget drawPcWidget;



	@Override
	protected void startUp() throws Exception {




		Widget points_Screen = client.getWidget(PC_SHOP_WIDGET_ID);

		if (points_Screen == null) { return; }
		else {
			clientThread.invokeAtTickEnd(() ->
		{
			drawPcWidget.draw_Widget(get_Pest_Points());
			hideOptions();

		});
		}


	}

	@Override
	protected void shutDown() throws Exception {
		//Restores all interfaces to normal
		unhide_ALL();
		drawPcWidget.delete_Widget();

	}

	@Subscribe
	private void onConfigChanged(ConfigChanged event) {

		hideOptions();
		drawPcWidget.update_Calculation();

	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked menuOptionClicked) {

		Widget pc_shop_interface = menuOptionClicked.getWidget();
		if (pc_shop_interface == null) {
			return;
		}
		if (pc_shop_interface.getId() == PC_SHOP_WIDGET_ID){
			clientThread.invokeAtTickEnd(() ->
			{
				hideOptions();

			});
		}


	}

	@Subscribe
	public void onWidgetLoaded(WidgetLoaded widgetLoaded) {

		if (widgetLoaded.getGroupId() == PC_SHOP_GROUP_ID) {

			clientThread.invokeAtTickEnd(() ->
			{
				drawPcWidget.draw_Widget(get_Pest_Points());
				hideOptions();

			});


		}
	}


	private void hideOptions(){

		Widget points_Screen = client.getWidget(PC_SHOP_WIDGET_ID);

		if (points_Screen == null) { return; }

		Widget rewards[] = points_Screen.getDynamicChildren();

		int total_points = get_Pest_Points();

		switch (config.getAtkOp()) {
			case ALL:
				rewards[2].setHidden(false); // 1pt
				rewards[3].setHidden(false); // 10 pt
				rewards[4].setHidden(false); // 100 pt
				break;
			case NONE:
				rewards[2].setHidden(true); // 1pt
				rewards[3].setHidden(true); // 10 pt
				rewards[4].setHidden(true); // 100 pt
				//rewards[0].setHidden(true); // icon
				//rewards[1].setHidden(true); // text
				break;
			case ONLY_100:
				rewards[2].setHidden(true); // 1pt
				rewards[3].setHidden(true); // 10 pt
				rewards[4].setHidden(false); // 100 pt
				break;
			case GREATER_THAN_100:
				if (total_points < 100) {
					rewards[2].setHidden(false); // 1pt
					rewards[3].setHidden(false); // 10 pt
					rewards[4].setHidden(false); // 100 pt
				} else {
					rewards[2].setHidden(true); // 1pt
					rewards[3].setHidden(true); // 10 pt
					rewards[4].setHidden(false); // 100 pt
				}
				break;
		}

		switch (config.getStrOp()) {
			case ALL:
				rewards[7].setHidden(false); // 1pt
				rewards[8].setHidden(false); // 10 pt
				rewards[9].setHidden(false); // 100 pt
				break;
			case NONE:
				rewards[7].setHidden(true); // 1pt
				rewards[8].setHidden(true); // 10 pt
				rewards[9].setHidden(true); // 100 pt
				break;
			case ONLY_100:
				rewards[7].setHidden(true); // 1pt
				rewards[8].setHidden(true); // 10 pt
				rewards[9].setHidden(false); // 100 pt
				break;
			case GREATER_THAN_100:
				if (total_points < 100) {
					rewards[7].setHidden(false); // 1pt
					rewards[8].setHidden(false); // 10 pt
					rewards[9].setHidden(false); // 100 pt
				} else {
					rewards[7].setHidden(true); // 1pt
					rewards[8].setHidden(true); // 10 pt
					rewards[9].setHidden(false); // 100 pt
				}
				break;
		}

		switch (config.getDefOp()) {
			case ALL:
				rewards[12].setHidden(false); // 1pt
				rewards[13].setHidden(false); // 10 pt
				rewards[14].setHidden(false); // 100 pt
				break;
			case NONE:
				rewards[12].setHidden(true); // 1pt
				rewards[13].setHidden(true); // 10 pt
				rewards[14].setHidden(true); // 100 pt
				break;
			case ONLY_100:
				rewards[12].setHidden(true); // 1pt
				rewards[13].setHidden(true); // 10 pt
				rewards[14].setHidden(false); // 100 pt
				break;
			case GREATER_THAN_100:
				if (total_points < 100) {
					rewards[12].setHidden(false); // 1pt
					rewards[13].setHidden(false); // 10 pt
					rewards[14].setHidden(false); // 100 pt
				} else {
					rewards[12].setHidden(true); // 1pt
					rewards[13].setHidden(true); // 10 pt
					rewards[14].setHidden(false); // 100 pt
				}
				break;
		}

		switch (config.getRngOp()) {
			case ALL:
				rewards[17].setHidden(false); // 1pt
				rewards[18].setHidden(false); // 10 pt
				rewards[19].setHidden(false); // 100 pt
				break;
			case NONE:
				rewards[17].setHidden(true); // 1pt
				rewards[18].setHidden(true); // 10 pt
				rewards[19].setHidden(true); // 100 pt
				break;
			case ONLY_100:
				rewards[17].setHidden(true); // 1pt
				rewards[18].setHidden(true); // 10 pt
				rewards[19].setHidden(false); // 100 pt
				break;
			case GREATER_THAN_100:
				if (total_points < 100) {
					rewards[17].setHidden(false); // 1pt
					rewards[18].setHidden(false); // 10 pt
					rewards[19].setHidden(false); // 100 pt
				} else {
					rewards[17].setHidden(true); // 1pt
					rewards[18].setHidden(true); // 10 pt
					rewards[19].setHidden(false); // 100 pt
				}
				break;
		}

		switch (config.getMagicOp()) {
			case ALL:
				rewards[22].setHidden(false); // 1pt
				rewards[23].setHidden(false); // 10 pt
				rewards[24].setHidden(false); // 100 pt
				break;
			case NONE:
				rewards[22].setHidden(true); // 1pt
				rewards[23].setHidden(true); // 10 pt
				rewards[24].setHidden(true); // 100 pt
				break;
			case ONLY_100:
				rewards[22].setHidden(true); // 1pt
				rewards[23].setHidden(true); // 10 pt
				rewards[24].setHidden(false); // 100 pt
				break;
			case GREATER_THAN_100:
				if (total_points < 100) {
					rewards[22].setHidden(false); // 1pt
					rewards[23].setHidden(false); // 10 pt
					rewards[24].setHidden(false); // 100 pt
				} else {
					rewards[22].setHidden(true); // 1pt
					rewards[23].setHidden(true); // 10 pt
					rewards[24].setHidden(false); // 100 pt
				}
				break;
		}

		switch (config.getHpOp()) {
			case ALL:
				rewards[27].setHidden(false); // 1pt
				rewards[28].setHidden(false); // 10 pt
				rewards[29].setHidden(false); // 100 pt
				break;
			case NONE:
				rewards[27].setHidden(true); // 1pt
				rewards[28].setHidden(true); // 10 pt
				rewards[29].setHidden(true); // 100 pt
				break;
			case ONLY_100:
				rewards[27].setHidden(true); // 1pt
				rewards[28].setHidden(true); // 10 pt
				rewards[29].setHidden(false); // 100 pt
				break;
			case GREATER_THAN_100:
				if (total_points < 100) {
					rewards[27].setHidden(false); // 1pt
					rewards[28].setHidden(false); // 10 pt
					rewards[29].setHidden(false); // 100 pt
				} else {
					rewards[27].setHidden(true); // 1pt
					rewards[28].setHidden(true); // 10 pt
					rewards[29].setHidden(false); // 100 pt
				}
				break;
		}

		switch (config.getPrayOp()) {
			case ALL:
				rewards[32].setHidden(false); // 1pt
				rewards[33].setHidden(false); // 10 pt
				rewards[34].setHidden(false); // 100 pt
				break;
			case NONE:
				rewards[32].setHidden(true); // 1pt
				rewards[33].setHidden(true); // 10 pt
				rewards[34].setHidden(true); // 100 pt
				break;
			case ONLY_100:
				rewards[32].setHidden(true); // 1pt
				rewards[33].setHidden(true); // 10 pt
				rewards[34].setHidden(false); // 100 pt
				break;
			case GREATER_THAN_100:
				if (total_points < 100) {
					rewards[32].setHidden(false); // 1pt
					rewards[33].setHidden(false); // 10 pt
					rewards[34].setHidden(false); // 100 pt
				} else {
					rewards[32].setHidden(true); // 1pt
					rewards[33].setHidden(true); // 10 pt
					rewards[34].setHidden(false); // 100 pt
				}
				break;
		}

		// HERB OPTION
		rewards[37].setHidden(config.getHerb());
		rewards[40].setHidden(config.getHerb());

		// MINERAL OPTION
		rewards[41].setHidden(config.getMine());
		rewards[44].setHidden(config.getMine());

		// SEED OPTION
		rewards[45].setHidden(config.getSeed());
		rewards[48].setHidden(config.getSeed());

		// MACE
		rewards[51].setHidden(config.getMace());
		rewards[54].setHidden(config.getMace());

		// Robe Top
		rewards[55].setHidden(config.getRTop());
		rewards[58].setHidden(config.getRTop());

		// robe bottoms
		rewards[59].setHidden(config.getRBtm());
		rewards[62].setHidden(config.getRBtm());

		// gloves
		rewards[63].setHidden(config.getGlove());
		rewards[66].setHidden(config.getGlove());

		// mage helm
		rewards[67].setHidden(config.getMageHelm());
		rewards[70].setHidden(config.getMageHelm());

		// range helm
		rewards[71].setHidden(config.getRhelm());
		rewards[74].setHidden(config.getRhelm());

		// melee helm
		rewards[75].setHidden(config.getMelHelm());
		rewards[78].setHidden(config.getMelHelm());

		// seal
		rewards[79].setHidden(config.getSeal());
		rewards[82].setHidden(config.getSeal());


	}

	private void unhide_ALL() {

		Widget points_Screen = client.getWidget(PC_SHOP_WIDGET_ID);

		if (points_Screen == null) { return; }

		Widget rewards[] = points_Screen.getDynamicChildren();

		for (int i = 0; i < rewards.length; i++){
			if (rewards[i].isSelfHidden()){
				rewards[i].setHidden(false);
			}
		}

	}

	private int get_Pest_Points() {

		Widget points_loc = client.getWidget(PC_POINTS_WIDGET_ID);

		String points_text = points_loc.getText();

		String value_points = points_text.substring(points_text.indexOf(">") + 1, points_text.lastIndexOf("<"));
		// Fixed crash when points is >= 1000, the "," caused a crash.
		String fixed_points = value_points.replace(",", "");

		return Integer.parseInt(fixed_points);
	}



	@Provides
	PcRewardsConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(PcRewardsConfig.class);
	}
}

package com.pcrewards;


import net.runelite.api.Client;
import net.runelite.api.widgets.Widget;
import javax.inject.Inject;

import static com.pcrewards.PcMath.*;

import net.runelite.api.Skill;

public class PcRewardsDrawWidget {

    private static final int PC_REWARDS_BAR_WIDGET = 15925253;

    public static final int font_ID = 496;
    public static final int font_Color = 16750623; // ff981f



    @Inject
    private PcRewardsConfig config;

    @Inject
    private Client client;


    private Widget parent_Widget = null;


    private Widget drawn_Widget = null;

    private int saved_points = -1;


    public void draw_Widget(int pest_points) {

        saved_points = pest_points;


        parent_Widget = client.getWidget(PC_REWARDS_BAR_WIDGET);

        if (parent_Widget == null) {return;}

        drawn_Widget = parent_Widget.createChild(0, 4);

        //Setup the child widget parameters
        drawn_Widget.setFontId(font_ID);
        drawn_Widget.setOpacity(0);

        if (config.getCalcStyle() == PcRewardExpOptions.HIDE) {
            drawn_Widget.setHidden(true);
        } else {
            drawn_Widget.setHidden(false);
        }

        drawn_Widget.setTextColor(font_Color);
        drawn_Widget.setTextShadowed(true);

        String points_String = config.getCalcStyle().toString() + " Exp: <col=ffffff>" + String.format("%,d",calc_Reward_EXP(get_Level(config.getCalcStyle()),pest_points, config.getCalcStyle(), config.getExpMult())) + "</col";
        drawn_Widget.setText(points_String);

        drawn_Widget.setOriginalHeight(40);
        drawn_Widget.setOriginalWidth(140);

        drawn_Widget.setOriginalX(320);
        drawn_Widget.setOriginalY(-3);

        drawn_Widget.setLineHeight(15);
        drawn_Widget.setXTextAlignment(1);
        drawn_Widget.setYTextAlignment(1);

        drawn_Widget.revalidate();
    }

    public void update_Calculation(){

        if (drawn_Widget == null) {return;}

        if (config.getCalcStyle() == PcRewardExpOptions.HIDE){
            drawn_Widget.setHidden(true);
        } else {
            drawn_Widget.setHidden(false);
        }

        String points_String = config.getCalcStyle().toString() + " Exp: <col=ffffff>" + String.format("%,d",calc_Reward_EXP(get_Level(config.getCalcStyle()),saved_points, config.getCalcStyle(), config.getExpMult())) + "</col";
        drawn_Widget.setText(points_String);


    }

    public void delete_Widget(){

        if (parent_Widget == null) { return; }

        parent_Widget.deleteAllChildren();

    }

    private int get_Level(PcRewardExpOptions pcRewardExpOptions){

        int level = 0;

        switch (pcRewardExpOptions){
            case ATTACK:
                level = client.getRealSkillLevel(Skill.ATTACK);
                break;
            case STRENGTH:
                level = client.getRealSkillLevel(Skill.STRENGTH);
                break;
            case DEFENCE:
                level = client.getRealSkillLevel(Skill.DEFENCE);
                break;
            case HITPOINTS:
                level = client.getRealSkillLevel(Skill.HITPOINTS);
                break;
            case MAGIC:
                level = client.getRealSkillLevel(Skill.MAGIC);
                break;
            case RANGE:
                level = client.getRealSkillLevel(Skill.RANGED);
                break;
            case PRAYER:
                level = client.getRealSkillLevel(Skill.PRAYER);
                break;
            case HIDE:
                level = 0;
                break;
        }


        return level;
    }
}

package com.pcrewards;

public enum PcRewardsConfigOptions {


    ALL("Show"),
    NONE("Hide"),
    ONLY_100("100 Only"),
    GREATER_THAN_100("Dynamic 100");


    private final String abbrev;

    PcRewardsConfigOptions(String abbrev) {
        this.abbrev = abbrev;
    }

    @Override
    public String toString() {
        return abbrev;
    }
}

