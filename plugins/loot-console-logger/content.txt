package org.emerycp;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class LootLoggerTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(LootLogger.class);
		RuneLite.main(args);
	}
}
package org.emerycp;

import net.runelite.client.chat.ChatColorType;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

import java.awt.*;

@ConfigGroup("LootConsoleLogger")
public interface LootLoggerConfig extends Config
{
	@ConfigSection(
			name = "Loot Drop Log",
			description = "All options that log loot drop in your message box.",
			position = 0,
			closedByDefault = false
	)
	String dropSection = "drop";

	@ConfigSection(
			name = "Highlight Drop Console Log",
			description = "All options that highlight loot drop in your message box.",
			position = 1,
			closedByDefault = false
	)
	String highlightSection = "highlight";

	@ConfigItem(
			keyName = "drop-console-log",
			name = "Enabled",
			description = "Enables loot messages on a monster's death.",
			section = dropSection,
			position = 0
	)
	default boolean dropEnabled()
	{
		return true;
	}

	@ConfigItem(
			keyName = "drop-console-list",
			name = "Ignored Items",
			description = "Enter the item name separated by a comma. i.e.: Bones, Coins",
			section = dropSection,
			position = 1
	)
	default String getIgnoreList()
	{
		return "";
	}
	@ConfigItem(
			keyName = "drop-console-monster-list",
			name = "Ignored Monsters",
			description = "Enter the monster name separated by a comma. i.e.: Goblin, TzTok-Jad",
			section = dropSection,
			position = 2
	)
	default String getIgnoreMonster()
	{
		return "";
	}

	@ConfigItem(
			keyName = "drop-console-color",
			name = "Drop Color",
			description = "Set the color of the loot messages.",
			section = dropSection,
			position = 3
	)
	default Color getDropColor()
	{
		return new Color(0, 0, 0);
	}

	@ConfigItem(
			keyName = "highlight-console-log",
			name = "Enabled",
			description = "Enables highlighted loot messages on a monster's death.",
			section = highlightSection,
			position = 0
	)
	default boolean highlightEnabled()
	{
		return true;
	}

	@ConfigItem(
			keyName = "highlight-console-list",
			name = "Highlighted Items",
			description = "Enter the item name separated by a comma. i.e.: Dragon spear, Rune arrow",
			section = highlightSection,
			position = 1
	)
	default String getHighlightList()
	{
		return "";
	}

	@ConfigItem(
			keyName = "highlight-console-message",
			name = "Highlighted Message",
			description = "Set the text in front of a highlighted loot message.",
			section = highlightSection,
			position = 2
	)
	default String getHighlightMessage()
	{
		return "Drops";
	}

	@ConfigItem(
			keyName = "highlight-console-color",
			name = "Highlight Color",
			description = "Set the color of a highlighted loot message.",
			section = highlightSection,
			position = 3
	)
	default Color getHighlightColor()
	{
		return new Color(202, 19, 19);
	}

}

package org.emerycp;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemStack;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.loottracker.LootReceived;

import java.util.Collection;

@Slf4j
@PluginDescriptor(
	name = "Loot Console Logger",
	description = "Let you log loot drops in your message box."
)
public class LootLogger extends Plugin
{

	String mobKilled = "";
	String itemStack = "";
	String highlightStack = "";

	@Inject
	private Client client;

	@Inject
	private LootLoggerConfig config;

	@Inject
	private ChatMessageManager chatMessageManager;

	@Subscribe
	public void onLootReceived(LootReceived event)
	{
		itemStack = "";
		highlightStack = "";
		mobKilled = event.getName();

		// Configs
		String[] ignoreList = format(config.getIgnoreList()).split(",");
		String[] ignoreMonsterList = format(config.getIgnoreMonster()).split(",");
		String[] highlightList = format(config.getHighlightList()).split(",");

		Collection<ItemStack> iS = event.getItems();
		for (ItemStack i: iS) {
			final String currentName = client.getItemDefinition(i.getId()).getName();
			final String cleanCurrentName = format(currentName);

			//  Drop
			if(config.dropEnabled() && !find(ignoreList, cleanCurrentName))
			{
				if(!itemStack.isEmpty())
					itemStack += " / ";
				itemStack +=  (i.getQuantity()+"") + "x " + currentName;
			}

			// Highlight
			if(config.highlightEnabled() && find(highlightList, cleanCurrentName))
			{
				if(!highlightStack.isEmpty())
					highlightStack += " / ";
				highlightStack += (i.getQuantity()+"") + "x " + currentName;
			}
		}

		if(config.dropEnabled() && !find(ignoreMonsterList, format(mobKilled)) && !itemStack.isEmpty())
		{
			itemStack += ".";
			sendMessage();
		}

		if(config.highlightEnabled() && !highlightStack.isEmpty())
		{
			highlightStack += ".";
			sendHighlightMessage();
		}
	}
	public void sendMessage() {

		final String s = "Drop from " + mobKilled + ": " + itemStack;

		final String formattedMessage = new ChatMessageBuilder()
				.append(config.getDropColor(), s)
				.build();

		chatMessageManager.queue(QueuedMessage.builder()
				.type(ChatMessageType.CONSOLE)
				.runeLiteFormattedMessage(formattedMessage)
				.build());
	}

	public void sendHighlightMessage() {

		String message = config.getHighlightMessage().trim();
		message += !message.isEmpty() ? ": " : "";

		final String formattedMessage = new ChatMessageBuilder()
				.append(config.getHighlightColor(), message + highlightStack)
				.build();

		chatMessageManager.queue(QueuedMessage.builder()
				.type(ChatMessageType.CONSOLE)
				.runeLiteFormattedMessage(formattedMessage)
				.build());
	}

	public boolean find(String[] st, String s) {
		for (String t:
			 st) {
			if(!t.isEmpty() && s.contains(t))
				return true;
		}
		return false;
	}

	public String format(String toFormat)
	{
		return toFormat.toLowerCase().replaceAll("\\s", "");
	}

	@Provides
	LootLoggerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(LootLoggerConfig.class);
	}
}

