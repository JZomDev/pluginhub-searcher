package com.metronomeinfobox;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class MetronomeInfoBoxPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(MetronomeInfoBoxPlugin.class);
		RuneLite.main(args);
	}
}
package com.metronomeinfobox;

import net.runelite.client.ui.overlay.infobox.InfoBox;
import net.runelite.client.util.ImageUtil;

import java.awt.*;
import java.awt.image.BufferedImage;

public class MetronomeInfoBox extends InfoBox {
    private int ticks;
    private int tickState = 0;

    private int imageState = 0;

    private BufferedImage[] images = {
            ImageUtil.loadImageResource(getClass(), "metronome-0.png"),
            ImageUtil.loadImageResource(getClass(), "metronome-1.png"),
            ImageUtil.loadImageResource(getClass(), "metronome-2.png"),
            ImageUtil.loadImageResource(getClass(), "metronome-3.png"),
    };

    MetronomeInfoBox(BufferedImage image, MetronomeInfoBoxPlugin plugin, MetronomeInfoBoxConfig config) {
        super(image, plugin);
        this.ticks = config.ticks();
    }

    public String getText() {
        return String.valueOf(tickState + 1);
    }

    public Color getTextColor() {
        return Color.WHITE;
    }

    public void onConfigChanged(MetronomeInfoBoxConfig config) {
        ticks = config.ticks();
        tickState = 0;
    }

    public void onGameTick() {
        tickState = (tickState + 1) % ticks;
        imageState = (imageState + 1) % images.length;
        this.setImage(images[imageState]);
    }
}

package com.metronomeinfobox;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(MetronomeInfoBoxConfig.GROUP)
public interface MetronomeInfoBoxConfig extends Config
{
	String GROUP = "metronomeinfobox";

	@ConfigItem(
		keyName = "ticks",
		name = "Ticks",
		description = "Number of ticks to count up to until counting repeats"
	)
	default int ticks()
	{
		return 4;
	}
}

package com.metronomeinfobox;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;
import net.runelite.client.util.ImageUtil;

@Slf4j
@PluginDescriptor(
	name = "Metronome Infobox"
)
public class MetronomeInfoBoxPlugin extends Plugin
{
	@Inject
	private MetronomeInfoBoxConfig config;

	@Inject
	private InfoBoxManager infoBoxManager;

	private MetronomeInfoBox infoBox;

	@Override
	protected void startUp() throws Exception
	{
		infoBox = new MetronomeInfoBox(ImageUtil.loadImageResource(getClass(), "metronome-0.png"), this, config);
		infoBoxManager.addInfoBox(infoBox);
	}

	@Override
	protected void shutDown() throws Exception
	{
		if (infoBox != null) {
			infoBoxManager.removeInfoBox(infoBox);
		}
	}

	@Subscribe
	public void onGameTick(GameTick event) {
		if (infoBox != null) {
			infoBox.onGameTick();
			infoBoxManager.updateInfoBoxImage(infoBox);
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event) {
		if (infoBox != null && event.getGroup().equals(MetronomeInfoBoxConfig.GROUP)) {
			infoBox.onConfigChanged(config);
		}
	}

	@Provides
	MetronomeInfoBoxConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(MetronomeInfoBoxConfig.class);
	}
}

