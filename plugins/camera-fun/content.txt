package com.camerafun;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CameraFunPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CameraFunPlugin.class);
		RuneLite.main(args);
	}
}
package com.camerafun;

import com.google.inject.Provides;
import javax.inject.Inject;
import javax.swing.*;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.ClientTick;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.input.MouseListener;
import net.runelite.client.input.MouseManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import java.awt.event.MouseEvent;
import java.time.Duration;
import java.time.Instant;

@Slf4j
@PluginDescriptor(
        name = "Camera Fun"
)
public class CameraFunPlugin extends Plugin implements MouseListener
{
    static final int period = 180;
    static final int fps = 60;
    static final double amplitude = 60;

    static final EaseUtility easeUtilities = new EaseUtility();

    @Inject
    private Client client;

    @Inject
    private CameraFunConfig config;

    @Inject
    private MouseManager mouseManager;

    private int yawCycle; // 0 to 10000
    private Instant loginTime;
    private double delta;
    private int last_time;
    private int pivotPoint;
    private boolean mouseActive;
    private int mouseDirection;
    private double mouseDistanceNormalized;
    private double mouseTimeNormalized;
    private boolean didMouseJustRelease;

    private int mouseStartTimestamp;
    private int mouseStartX;
    @Override
    protected void startUp() throws Exception
    {
        mouseManager.registerMouseListener(this);
        yawCycle = 0;
        mouseDirection = 1;
        if(loginTime == null){
            loginTime = Instant.now();
        }
        //last_time = System.nanoTime();
        resetPivot();
    }

    @Override
    protected void shutDown() throws Exception
    {
        mouseManager.unregisterMouseListener(this);
        resetPivot();
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged gameStateChanged)
    {
        if (gameStateChanged.getGameState() == GameState.LOGGED_IN)
        {
            loginTime = Instant.now();
        }
    }

    @Subscribe
    public void onClientTick(ClientTick clientTick)
    {
        int timestamp = (int) (System.nanoTime()  / 1000000); // to milliseconds
        double timestep = 1000.0 / config.fps();
        delta += timestamp - last_time;
        last_time = timestamp;

        if(delta >= timestep) {

            if(!mouseActive) {

                double degree = (yawCycle++ / ((double) config.period())) * 360d;
                double rad = Math.toRadians(degree);
                double sin = Math.sin(rad);// output: -1.0 to 1.0
                double yawShift = sin;

                if(!config.infiniteLoop() && degree >= 90) {
                    mouseActive = true;
                    return;
                }

                switch (config.filterType())
                {
                    case easeInSine:
                        // Ease Left & right
                        yawShift = easeUtilities.easeInSine(sin);
                        break;
                    case easeYoYo:
                        // oscillate left, right twice
                        yawShift = easeUtilities.easeInOutSine(sin);
                        break;
                    case easeOutBounce:
                        yawShift = easeUtilities.easeOutBounce(sin);
                        break;
                    case easeOutBack:
                        yawShift = easeUtilities.easeOutBack(sin);
                        break;
                    case easeOutElastic:
                        yawShift = easeUtilities.easeOutElastic(sin);
                        break;
                    case NONE:
                        // None
                        break;
                }
                yawShift *= (config.amplitude() * (!config.infiniteLoop() ? 5 : 1)) * mouseDirection;

                if(config.highStaminaCondition()){
                    yawShift *= client.getEnergy() / 10;
                }
                if(config.lowStaminaCondition()){
                    yawShift *= 100 / client.getEnergy();
                }
                if(config.lowGameTimeCondition()){
                    Duration duration = Duration.between(loginTime, Instant.now());
                    yawShift *= 100 / duration.getSeconds();
                }
                if(config.highGameTimeCondition()){
                    Duration duration = Duration.between(loginTime, Instant.now());
                    yawShift += duration.getSeconds();
                }
                double newYaw = pivotPoint + yawShift * mouseDistanceNormalized * mouseTimeNormalized;
                if(didMouseJustRelease && config.infiniteLoop() && degree == 90 ){
                    mouseDistanceNormalized = 1;
                    mouseTimeNormalized = 1;
                    didMouseJustRelease = false;
                    resetPivot();
                }
                if (newYaw < 0) newYaw = 2047 + newYaw;
                if (newYaw > 2047) newYaw = newYaw % 2047;
                client.setCameraYawTarget((int) newYaw);
            }
            delta -= timestep;
        }
    }

    public void resetPivot(){
        delta = 0;
        yawCycle = 0;
        pivotPoint = client.getCameraYaw();
    }

    @Override
    public MouseEvent mousePressed(MouseEvent mouseEvent) {
        if (SwingUtilities.isMiddleMouseButton(mouseEvent) ) {
            //log.info("mousePressed");
            resetPivot();
            mouseStartX = mouseEvent.getX();
            mouseStartTimestamp = (int) (System.nanoTime()  / 1000000); // milliseconds
            mouseActive = true;
        }
        return mouseEvent;
    }

    @Override
    public MouseEvent mouseReleased(MouseEvent mouseEvent) {
        if (SwingUtilities.isMiddleMouseButton(mouseEvent) ) {

            resetPivot();
            if(mouseStartX < mouseEvent.getX())
                mouseDirection = -1;
            else
                mouseDirection = 1;
            int diff = (int) (System.nanoTime()  / 1000000) - mouseStartTimestamp;

            double buffer100ms = Math.max((double)diff, 0d);
            mouseTimeNormalized = buffer100ms / 300;

            mouseDistanceNormalized = Math.abs((double)mouseStartX - (double)mouseEvent.getX()) / (double)client.getViewportWidth();
            didMouseJustRelease = true;

            //log.info("mouseReleased amp:{} time:{}ms", mouseDistanceNormalized, diff);
            mouseActive = false;
        }
        return mouseEvent;
    }

    @Override
    public MouseEvent mouseDragged(MouseEvent mouseEvent) {
        if (SwingUtilities.isMiddleMouseButton(mouseEvent) ) {

            //log.info("mouseDragged");
            resetPivot();
        }
        return mouseEvent;
    }

    @Override
    public MouseEvent mouseClicked(MouseEvent mouseEvent) {
        //log.info("mouseClicked");
        return mouseEvent;
    }

    @Override
    public MouseEvent mouseEntered(MouseEvent mouseEvent) {
        //log.info("mouseEntered");
        return mouseEvent;
    }

    @Override
    public MouseEvent mouseExited(MouseEvent mouseEvent) {
        //log.info("mouseExited");
        return mouseEvent;
    }

    @Override
    public MouseEvent mouseMoved(MouseEvent mouseEvent) {
        //log.info("mouseMoved");
        return mouseEvent;
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event)
    {
        if (!"camerafun".equals(event.getGroup()))
        {
            return;
        }

        //log.info("config updated");
        mouseActive = false;
        resetPivot();
    }
    @Provides
    CameraFunConfig provideConfig(ConfigManager configManager)
    {
        //log.info("config updated");
        mouseActive = false;
        resetPivot();
        return configManager.getConfig(CameraFunConfig.class);
    }
}


package com.camerafun;

public class EaseUtility {

    public double easeInSine(double x) {
        return 1 - Math.cos((x * Math.PI ) / 2 + 0.5 * Math.PI) - 1;
    }
    public double easeInOutSine(double x) {
        return -(Math.cos(Math.PI * x + 0.5 * Math.PI) - 1) / 2 -0.5;
    }
    public double easeOutBounce(double x) {
        double n1 = 7.5625;
        double d1 = 2.75;
        int flip = (x < 0) ? -1 : 1;
        x = Math.abs(x);
        if (x < 1 / d1) {
            return (n1 * x * x) * flip;
        } else if (x < 2 / d1) {
            return (n1 * (x -= 1.5 / d1) * x + 0.75) * flip;
        } else if (x < 2.5 / d1) {
            return (n1 * (x -= 2.25 / d1) * x + 0.9375) * flip;
        } else {
            return (n1 * (x -= 2.625 / d1) * x + 0.984375) * flip;
        }
    }
    public double easeOutBack(double x) {
        double c1 = 1.70158;
        double c3 = c1 + 1;
        int flip = (x < 0) ? -1 : 1;
        x = Math.abs(x);

        return (1 + c3 * Math.pow(x - 1, 3) + c1 * Math.pow(x - 1, 2)) * flip;
    }
    public double easeOutElastic(double x ) {
        double c4 = (2 * Math.PI) / 3;
        int flip = (x < 0) ? -1 : 1;
        x = Math.abs(x);

        return x == 0 ? 0 * flip
                : x == 1
                ? 1 * flip
                : (Math.pow(2, -10 * x) * Math.sin((x * 10 - 0.75) * c4) + 1) * flip;
    }
}

package com.camerafun;
public enum CameraFunEaseType
{
    easeOutBack,
    easeInSine,
    easeOutBounce,
    easeOutElastic,
    easeYoYo,
    NONE
}
/*
{
    easeInSine,
    easeInOutSine,
    easeOutBounce,
    easeOutBack,
    easeOutElastic,
    NONE
}
*/

package com.camerafun;

import net.runelite.client.config.*;

import static com.camerafun.CameraFunPlugin.*;

@ConfigGroup("camerafun")
public interface CameraFunConfig extends Config
{
    @ConfigItem(
            keyName = "filterType",
            name = "Ease type",
            description = "Sets an camera ease type",
            position = 1
    )
    default CameraFunEaseType filterType()
    {
        return CameraFunEaseType.easeOutBounce;
    }

    @ConfigItem(
            position = 2,
            keyName = "infiniteLoop",
            name = "Loop?",
            description = ""
    )
    default boolean infiniteLoop()
    {
        return false;
    }

    @Range(
            min = 1
    )
    @ConfigItem(
            keyName = "period",
            name = "Duration",
            description = "How long an ease cycle is; the period",
            position = 3
    )
    default int period()
    {
        return period;
    }

    @Range(
            min = 1
    )
    @ConfigItem(
            keyName = "fps",
            name = "Animation fps",
            description = "Higher means smoother animation",
            position = 4
    )
    default int fps()
    {
        return fps;
    }

    @ConfigSection(
            name = "Intensity Type Settings",
            description = "Configuration for each type of intensity condition",
            position = 99
    )
    String intensitySection = "intensitysection";

    @Range(
            min = 1
    )
    @ConfigItem(
            keyName = "amplitude",
            name = "Intensity",
            description = "The amplitude, Higher is more",
            position = 1,
            section = intensitySection
    )
    default double amplitude()
    {
        return amplitude;
    }

    @ConfigItem(
            position = 2,
            keyName = "highStaminaCondition",
            name = "Higher Energy increases intensity?",
            description = "",
            section = intensitySection
    )
    default boolean highStaminaCondition()
    {
        return false;
    }

    @ConfigItem(
            position = 3,
            keyName = "lowStaminaCondition",
            name = "Lower Energy increases intensity?",
            description = "",
            section = intensitySection
    )
    default boolean lowStaminaCondition()
    {
        return false;
    }

    @ConfigItem(
            position = 4,
            keyName = "lowGameTimeCondition",
            name = "Lower Time in-game increases intensity?",
            description = "",
            section = intensitySection
    )
    default boolean lowGameTimeCondition()
    {
        return false;
    }

    @ConfigItem(
            position = 5,
            keyName = "highGameTimeCondition",
            name = "Higher Time in-game increases intensity?",
            description = "",
            section = intensitySection
    )
    default boolean highGameTimeCondition()
    {
        return false;
    }


}

