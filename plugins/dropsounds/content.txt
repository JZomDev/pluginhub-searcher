package com.github.MitzDK;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DropSoundsCompletedPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(DropSoundsCompletedPlugin.class);
		RuneLite.main(args);
	}
}
package com.github.MitzDK;

public enum Sound {
    VALUABLE_DROP("goodDrop.wav"),
    UNTRADEABLE_DROP("untradeableItem.wav");

    private final String resourceName;

    Sound(String resNam) {
        resourceName = resNam;
    }

    String getResourceName() {
        return resourceName;
    }
}

package com.github.MitzDK;

import com.google.inject.Provides;

import java.util.*;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;

import static net.runelite.api.Varbits.DIARY_KARAMJA_EASY;
import static net.runelite.api.Varbits.DIARY_KARAMJA_HARD;
import static net.runelite.api.Varbits.DIARY_KARAMJA_MEDIUM;

import net.runelite.api.annotations.Varbit;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.account.AccountSession;
import net.runelite.client.account.SessionManager;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.Text;
import okhttp3.OkHttpClient;
import org.apache.commons.lang3.StringUtils;

import javax.inject.Inject;
import java.util.concurrent.ScheduledExecutorService;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
@PluginDescriptor(
        name = "Drop Sounds",
        description = "Turn on Loot drop notifications / Untradeable in Runescape settings",
        tags = {"announce", "sound"}
)

public class DropSoundsCompletedPlugin extends Plugin {
    @Inject
    private Client client;

    @Getter(AccessLevel.PACKAGE)
    @Inject
    private ClientThread clientThread;

    @Inject
    private SoundEngine soundEngine;
    @Inject
    private DropSoundsConfig config;
    @Inject
    private ScheduledExecutorService executor;
    @Inject
    private OkHttpClient okHttpClient;

    // Killcount and new pb patterns from runelite/ChatCommandsPlugin
    //private static final AccountSession session = sessionManager.getAccountSession();
    //private static final String CurrentUser = session.getUsername();

    private final Map<Skill, Integer> oldExperience = new EnumMap<>(Skill.class);
    private final Map<Integer, Integer> oldAchievementDiaries = new HashMap<>();

    private int lastLoginTick = -1;
    private int lastGEOfferTick = -1;
    private int lastZulrahKillTick = -1;

    @Override
    protected void startUp() throws Exception {
        executor.submit(() -> {
            SoundFileManager.ensureDownloadDirectoryExists();
            SoundFileManager.downloadAllMissingSounds(okHttpClient);
        });
    }

    @Override
    protected void shutDown() throws Exception {
        oldExperience.clear();
        oldAchievementDiaries.clear();
    }


    @Subscribe
    public void onGameStateChanged(GameStateChanged event) {
        switch (event.getGameState()) {
            case LOGIN_SCREEN:
            case HOPPING:
            case LOGGING_IN:
            case LOGIN_SCREEN_AUTHENTICATOR:
                oldExperience.clear();
                oldAchievementDiaries.clear();
            case CONNECTION_LOST:
                // set to -1 here in-case of race condition with varbits changing before this handler is called
                // when game state becomes LOGGED_IN
                lastLoginTick = -1;
                break;
            case LOGGED_IN:
                lastLoginTick = client.getTickCount();
                break;
        }
    }

    List<String> getHighlights() {
        final String configItems = config.itemsToNotify();

        if (configItems.isEmpty()) {
            return Collections.emptyList();
        }

        return Text.fromCSV(configItems);
    }
    final static Pattern regexPattern = Pattern.compile("\\w+(?=\\s+coin)");

    private static String findCoinValue(String originalStr) {
        originalStr = originalStr.replaceAll(",", "");
        final Matcher matcher = DropSoundsCompletedPlugin.regexPattern.matcher(originalStr);
        if (matcher.find()) {
            String stringToReturn = matcher.group(0);
            return stringToReturn;
        }
        return null;
    }
    @Subscribe
    public void onChatMessage(ChatMessage chatMessage) {
        if (chatMessage.getType() != ChatMessageType.GAMEMESSAGE && chatMessage.getType() != ChatMessageType.CLAN_GIM_MESSAGE && chatMessage.getType() != ChatMessageType.SPAM) {
            return;
        }
        if (chatMessage.getType() == ChatMessageType.GAMEMESSAGE && chatMessage.getMessage().contains("Valuable drop: ")) {
            Integer coinValue = Integer.parseInt(findCoinValue(chatMessage.getMessage()));
            if(coinValue >= config.valueThreshold()){
                soundEngine.playClip(Sound.VALUABLE_DROP);
            }
        }
        if (chatMessage.getType() == ChatMessageType.GAMEMESSAGE && chatMessage.getMessage().contains("Untradeable drop: ")) {
            for (String str : getHighlights()){
                if(chatMessage.getMessage().split(": ")[1].contains(str)){
                    soundEngine.playClip(Sound.UNTRADEABLE_DROP);
                }
            }
        }
    }


    @Provides
    DropSoundsConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(DropSoundsConfig.class);
    }

// Disabled - fires continuously while spinner arrow is held - when this is avoidable, can enable
//	@Subscribe
//	public void onConfigChanged(ConfigChanged event) {
//		if (CEngineerCompletedConfig.GROUP.equals(event.getGroup())) {
//			if ("announcementVolume".equals(event.getKey())) {
//				soundEngine.playClip(Sound.LEVEL_UP);
//			}
//		}
//	}
}

package com.github.MitzDK;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;

@ConfigGroup(DropSoundsConfig.GROUP)
public interface DropSoundsConfig extends Config {

    String GROUP = "dropsoundscompleted";

    @Range(
            min = 0,
            max = 200
    )
    @ConfigItem(
            keyName = "announcementVolume",
            name = "Volume 0-200",
            description = "Adjust how loud the audio announcements are played!",
            position = 1
    )
    default int announcementVolume() {
        return 100;
    }
    @ConfigItem(
            position = 2,
            keyName = "valueThreshold",
            name = "GP Threshold",
            description = "Threshold for loot drop value"
    )
    default int valueThreshold(){return 100000;}
    @ConfigItem(
            position = 3,
            keyName = "itemsToNotify",
            name = "Items, case sensitive",
            description = "List of items to be notified"
    )
    default String itemsToNotify()
    {
        return "Clue scroll (beginner),Clue scroll (easy),Clue scroll (medium),Clue scroll (hard),Clue scroll (elite),Clue scroll (master),Dark totem top,Dark totem middle,Dark totem base,Mossy key,Giant key,Ancient shard,Brimstone key,Larran's key";
    }

}

package com.github.MitzDK;

import lombok.extern.slf4j.Slf4j;

import javax.inject.Inject;
import javax.inject.Singleton;
import javax.sound.sampled.*;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;

@Singleton
@Slf4j
public class SoundEngine {

    @Inject
    private DropSoundsConfig config;

    private static final long CLIP_MTIME_UNLOADED = -2;

    private long lastClipMTime = CLIP_MTIME_UNLOADED;
    private Clip clip = null;

    private boolean loadClip(Sound sound) {
        try (InputStream stream = new BufferedInputStream(SoundFileManager.getSoundStream(sound))) {
            try (AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(stream)) {
                clip.open(audioInputStream); // liable to error with pulseaudio, works on windows, one user informs me mac works
            }
            return true;
        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
            log.warn("Failed to load Droupsound sound " + sound, e);
        }
        return false;
    }

    public void playClip(Sound sound) {
        long currentMTime = System.currentTimeMillis();
        if (clip == null || currentMTime != lastClipMTime || !clip.isOpen()) {
            if (clip != null && clip.isOpen()) {
                clip.close();
            }

            try {
                clip = AudioSystem.getClip();
            } catch (LineUnavailableException e) {
                lastClipMTime = CLIP_MTIME_UNLOADED;
                log.warn("Failed to get clip for Droupsound sound " + sound, e);
                return;
            }

            lastClipMTime = currentMTime;
            if (!loadClip(sound)) {
                return;
            }
        }

        // User configurable volume
        FloatControl volume = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);
        float gain = 20f * (float) Math.log10(config.announcementVolume() / 100f);
        gain = Math.min(gain, volume.getMaximum());
        gain = Math.max(gain, volume.getMinimum());
        volume.setValue(gain);

        // From RuneLite base client Notifier class:
        // Using loop instead of start + setFramePosition prevents the clip
        // from not being played sometimes, presumably a race condition in the
        // underlying line driver
        clip.loop(0);
    }
}

package com.github.MitzDK;

import lombok.extern.slf4j.Slf4j;
import net.runelite.client.RuneLite;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

@Slf4j
public abstract class SoundFileManager {

    private static final File DOWNLOAD_DIR = new File(RuneLite.RUNELITE_DIR.getPath() + File.separator + "drop-sounds");
    private static final String DELETE_WARNING_FILENAME = "EXTRA_FILES_WILL_BE_DELETED_BUT_FOLDERS_WILL_REMAIN";
    private static final File DELETE_WARNING_FILE = new File(DOWNLOAD_DIR, DELETE_WARNING_FILENAME);
    private static final HttpUrl RAW_GITHUB = HttpUrl.parse("https://raw.githubusercontent.com/MitzDK/DropSounds/sounds");

    @SuppressWarnings("ResultOfMethodCallIgnored")
    public static void ensureDownloadDirectoryExists() {
        if (!DOWNLOAD_DIR.exists()) {
            DOWNLOAD_DIR.mkdirs();
        }
        try {
            DELETE_WARNING_FILE.createNewFile();
        } catch (IOException ignored) { }
    }

    public static void downloadAllMissingSounds(final OkHttpClient okHttpClient) {
        File[] downloadDirFiles = DOWNLOAD_DIR.listFiles();

        // Get set of existing files in our dir - existing sounds will be skipped, unexpected files (not dirs) will be deleted
        Set<String> filesPresent = new HashSet<>();
        if (downloadDirFiles != null && downloadDirFiles.length > 0) {
            Arrays.stream(downloadDirFiles)
                    .filter(file -> !file.isDirectory())
                    .map(File::getName)
                    .filter(filename -> !DELETE_WARNING_FILENAME.equals(filename))
                    .forEach(filesPresent::add);
        }

        // Download any sounds that are not yet present but exist in Sound enum
        Sound[] allSounds = Sound.values();
        for (Sound sound : allSounds) {
            String fileName = sound.getResourceName();
            if (filesPresent.contains(fileName)) {
                filesPresent.remove(fileName);
                continue;
            }

            if (RAW_GITHUB == null) {
                // Hush intellij, it's okay, the potential NPE can't hurt you now
                log.error("Droupsounds could not download sounds due to an unexpected null RAW_GITHUB value");
                return;
            }
            HttpUrl soundUrl = RAW_GITHUB.newBuilder().addPathSegment(fileName).build();
            Path outputPath = Paths.get(DOWNLOAD_DIR.getPath(), fileName);
            try (Response res = okHttpClient.newCall(new Request.Builder().url(soundUrl).build()).execute()) {
                if (res.body() != null)
                    Files.copy(new BufferedInputStream(res.body().byteStream()), outputPath, StandardCopyOption.REPLACE_EXISTING);
            } catch (IOException e) {
                log.error("Droupsounds could not download sounds", e);
                return;
            }
        }

        // filesPresent now contains only files in our directory that we weren't expecting
        // (eg. old versions of sounds)
        // We now delete them to avoid cluttering up disk space
        // We leave dirs behind (filesPresent filters them out early on) as we aren't creating those anyway so they won't build up over time
        for (String filename : filesPresent) {
            File toDelete = new File(DOWNLOAD_DIR, filename);
            //noinspection ResultOfMethodCallIgnored
            toDelete.delete();
        }
    }

    public static InputStream getSoundStream(Sound sound) throws FileNotFoundException {
        return new FileInputStream(new File(DOWNLOAD_DIR, sound.getResourceName()));
    }
}

