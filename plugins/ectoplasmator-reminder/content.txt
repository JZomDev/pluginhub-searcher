/*
 * Copyright (c) 2024, Elise Chevaier <https://github.com/staytheknight>
 * <https://elisechevalier.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.ectoplasmator;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class EctoplasmatorTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(EctoplasmatorPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2024, Elise Chevaier <https://github.com/staytheknight>
 * <https://elisechevalier.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.ectoplasmator;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("Ectoplasmator Reminder Configs")
public interface EctoplasmatorConfig extends Config
{
	// Display Behaviour Section
	@ConfigSection(
		name = "Display Behaviour",
		description = "Various in game behaviours to control when the Ectoplasmator overlay is displayed",
		position = 0
	)
	String displayBehaviourSection = "Display Behaviour";

	@ConfigItem(
		position = 1,
		keyName = "hideWhileInInventory",
		name = "Hide Overlay if in Inventory",
		description = "Hides the Ectoplasmator overlay if it's in player's inventory",
		section = displayBehaviourSection
	)
	default boolean hideIfInventory()
	{
		return true;
	}

	@ConfigItem(
		position = 2,
		keyName = "displayOnlyInCombat",
		name = "Hide Out of Combat",
		description = "Display the Ectoplasmator overlay only while in combat",
		section = displayBehaviourSection
	)
	default boolean onlyInCombat()
	{
		return false;
	}

	@ConfigItem(
		position = 3,
		keyName = "hideBosses",
		name = "Hide for Bosses",
		description = "Hide the Ectoplasmator overlay for bosses",
		section = displayBehaviourSection
	)
	default boolean hideForBosses()
	{
		return false;
	}

	@ConfigItem(
		position = 4,
		keyName = "hideInWilderness",
		name = "Hide Overlay in Wilderness",
		description = "Hide the Ectoplasmator overlay while in the wilderness",
		section = displayBehaviourSection
	)
	default boolean hideInWilderness()
	{
		return false;
	}

	// Location & Scale Section
	@ConfigSection(
		name = "Display Location & Scale",
		description = "Controls to change the size and vertical location of the Ectoplasmator overlay",
		position = 5
	)
	String displayControls = "Display Location & Scale";

	@ConfigItem(
		position = 6,
		keyName = "overlayVerticalOffset",
		name = "Overlay Vertical Offset",
		description = "How high above the NPCs he overlay is displayed, this is to customize location in case it's conflicting with the position of other addons.",
		section = displayControls
	)
	default int verticalOffset()
	{
		return 50;
	}

	@ConfigItem(
		position = 7,
		keyName = "overlayScale",
		name = "Overlay Scale",
		description = "Scale (size) of the Ectoplasmator overlay",
		section = displayControls
	)
	default int overlayScale()
	{
		return 1;
	}
}

/*
 * Copyright (c) 2024, Elise Chevaier <https://github.com/staytheknight>
 * <https://elisechevalier.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.ectoplasmator;

import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import static java.awt.Image.SCALE_DEFAULT;
import java.awt.image.BufferedImage;
import static java.awt.image.BufferedImage.TYPE_INT_ARGB;
import java.util.ArrayList;
import java.util.List;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.ItemID;
import static net.runelite.api.ItemID.*;
import net.runelite.api.NPC;
import net.runelite.api.NpcID;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.Varbits;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

class EctoplasmatorOverlay extends Overlay
{
	@Inject
	private EctoplasmatorConfig config;

	private final Client client;
	private final EctoplasmatorPlugin plugin;
	private final ItemManager itemManager;

	// Display variables
	private BufferedImage image;                                // Image variable the render loop uses
	private BufferedImage baseImage;                            // Default image information used for scaling
	private boolean combatStatus;                                // Combat status of player
	private List<Boolean> displayChecks = new ArrayList<>();    // Boolean array of display toggles
	private boolean displayToggle;                                // Final display toggle boolean
	private int previousDisplayScale = 1;

	// Class Constructor
	@Inject
	private EctoplasmatorOverlay(Client client, EctoplasmatorPlugin plugin, ItemManager itemManager)
	{
		this.client = client;
		this.plugin = plugin;
		this.itemManager = itemManager;
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.UNDER_WIDGETS);

		// Setting defaults for image variables
		baseImage = itemManager.getImage(ItemID.ECTOPLASMATOR);
		image = baseImage;

		// sets default render toggle to be true
		displayToggle = true;
	}

	// This is called in the EctoplasmatorPlugin.java to change the combat status
	public void setCombatStatus(boolean combatStatus)
	{
		this.combatStatus = combatStatus;
	}

	// Casts an Image to BufferedImage
	public BufferedImage imageToBufferedImage(Image image)
	{
		int width = image.getWidth(null);
		int height = image.getHeight(null);
		BufferedImage bufferedImage = new BufferedImage(width, height, TYPE_INT_ARGB);
		bufferedImage.getGraphics().drawImage(image, 0, 0, null);
		return bufferedImage;
	}

	// Scales the base image to user configuration
	public void scaleImage()
	{
		image = imageToBufferedImage(baseImage.getScaledInstance(baseImage.getWidth() * config.overlayScale(),
			baseImage.getHeight() * config.overlayScale(),
			SCALE_DEFAULT));
		previousDisplayScale = config.overlayScale();
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		// Error Catch if the image is null
		if (image == null)
		{
			return null;
		}

		// Gets list of NPCS to render the image above
		final List<NPC> targets = plugin.getNPCTargets();
		// Error catch for if the npc target list is empty
		if (targets.isEmpty())
		{
			return null;
		}

		// Clears the boolean array on each render loop
		if (!displayChecks.isEmpty())
		{
			displayChecks.clear();
		}

		// Adds different display toggles based on configuration settings to the display check boolean array
		if (config.hideIfInventory())
		{
			displayChecks.add(!client.getItemContainer(InventoryID.INVENTORY).contains(ECTOPLASMATOR));
		}
		if (config.onlyInCombat())
		{
			displayChecks.add(combatStatus);
		}
		if (config.hideInWilderness())
		{
			displayChecks.add(client.getVarbitValue(Varbits.IN_WILDERNESS) != 1);
		}

		// Iterates through the display check boolean array to see if any of the booleans are false
		// If they are false set the master toggle to false and break
		for (boolean b : displayChecks)
		{
			if (!b)
			{
				displayToggle = false;
				break;
			}
			else
			{
				displayToggle = true;
			}
		}

		// Catch if none of the config settings are checked - default behaviour is to display
		if (displayChecks.isEmpty())
		{
			displayToggle = true;
		}

		// If the master display toggle is true, display the overlay
		if (displayToggle)
		{
			renderOverlay(targets, graphics, image);
		}

		return null;
	}

	// Iterates through all the NPC targets, and if they are a spectral creature, render the overlay
	private void renderOverlay(List<NPC> targets, Graphics2D graphics, BufferedImage image)
	{
		for (NPC target : targets)
		{
			if (config.hideForBosses())
			{
				if (SpectralCreatures.SPECTRALCREATURES.contains(target.getId()))
				{
					renderTargetItem(graphics, target, image);
				}
			}
			else
			{
				// Checks if the target is a spectral creature
				if (SpectralCreatures.SPECTRALCREATURES.contains(target.getId())
					|| SpectralCreatures.SPECTRALBOSSES.contains(target.getId()))
				{
					renderTargetItem(graphics, target, image);
				}

			}
		}
	}

	// Code snippet taken from:
	// runelite/client/plugins/slayer/TargetWeaknessOverlay.java
	// Altered to have a modifiable height adjustment through config
	private void renderTargetItem(Graphics2D graphics, NPC actor, BufferedImage image)
	{
		final LocalPoint actorPosition = actor.getLocalLocation();
		final int offset = actor.getLogicalHeight() + config.verticalOffset();

		if (actorPosition == null || image == null)
		{
			return;
		}

		final Point imageLoc = Perspective.getCanvasImageLocation(client, actorPosition, image, offset);

		if (imageLoc != null)
		{
			OverlayUtil.renderImageLocation(graphics, imageLoc, image);
		}
	}
}

/*
 * Copyright (c) 2024, Elise Chevaier <https://github.com/staytheknight>
 * <https://elisechevalier.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.ectoplasmator;

import com.google.common.collect.ImmutableSet;
import lombok.Getter;
import net.runelite.api.NpcID;

public class SpectralCreatures
{
	// Ideally this would be by querying the npc type (spectral) but this can't be done with the runelite
	// API as it's considered cheating.
	// Instead, the wiki was used to make this list:
	// https://oldschool.runescape.wiki/w/Spectral_(attribute)
	@Getter
	public static final ImmutableSet<Integer> SPECTRALCREATURES = ImmutableSet.of(
		NpcID.ABERRANT_SPECTRE_3,
		NpcID.ABERRANT_SPECTRE_4,
		NpcID.ABERRANT_SPECTRE_5,
		NpcID.ABERRANT_SPECTRE_6,
		NpcID.ABERRANT_SPECTRE_7,
		NpcID.ABHORRENT_SPECTRE,
		NpcID.ANGRY_BARBARIAN_SPIRIT,
		NpcID.ANKOU,
		NpcID.ANKOU_2515,
		NpcID.ANKOU_2516,
		NpcID.ANKOU_2517,
		NpcID.ANKOU_2518,
		NpcID.ANKOU_2519,
		NpcID.ANKOU_6608,
		NpcID.ANKOU_7257,
		NpcID.ANKOU_7864,
		NpcID.ASYN_SHADE,
		NpcID.ASYN_SHADOW,
		NpcID.ASYN_SHADOW_5632,
		NpcID.BANSHEE,
		NpcID.BERSERK_BARBARIAN_SPIRIT,
		NpcID.DARK_ANKOU,
		NpcID.DEATH_WING,
		NpcID.DEVIANT_SPECTRE,
		NpcID.ENRAGED_BARBARIAN_SPIRIT,
		NpcID.EVIL_SPIRIT,
		NpcID.FEROCIOUS_BARBARIAN_SPIRIT,
		NpcID.FIYR_SHADE,
		NpcID.FIYR_SHADOW,
		NpcID.FORGOTTEN_SOUL,
		NpcID.FORGOTTEN_SOUL_10524,
		NpcID.FORGOTTEN_SOUL_10525,
		NpcID.FORGOTTEN_SOUL_10526,
		NpcID.FORGOTTEN_SOUL_10534,
		NpcID.FORGOTTEN_SOUL_10535,
		NpcID.FORGOTTEN_SOUL_10536,
		NpcID.FORGOTTEN_SOUL_10537,
		NpcID.FORGOTTEN_SOUL_10544,
		NpcID.FORGOTTEN_SOUL_10545,
		NpcID.FROST_NAGUA,
		NpcID.FROST_NAGUA_13787,
		NpcID.FROST_NAGUA_13788,
		NpcID.GHAST,
		NpcID.GHAST_946,
		NpcID.GHAST_5622,
		NpcID.GHAST_5623,
		NpcID.GHAST_5624,
		NpcID.GHAST_5625,
		NpcID.GHAST_5626,
		NpcID.GHAST_5627,
		NpcID.GHOST_5370,
		NpcID.GHOST_3975,
		NpcID.GHOST_3976,
		NpcID.GHOST_3977,
		NpcID.GHOST_3978,
		NpcID.GHOST_3979,
		NpcID.GHOST_86,
		NpcID.GHOST_87,
		NpcID.GHOST_88,
		NpcID.GHOST_89,
		NpcID.GHOST_90,
		NpcID.GHOST_91,
		NpcID.GHOST_92,
		NpcID.GHOST_93,
		NpcID.GHOST_94,
		NpcID.GHOST_95,
		NpcID.GHOST_96,
		NpcID.GHOST_97,
		NpcID.GHOST_98,
		NpcID.GHOST_99,
		NpcID.GHOST_472,
		NpcID.GHOST_473,
		NpcID.GHOST_474,
		NpcID.GHOST_506,
		NpcID.GHOST_507,
		NpcID.GHOST_7263,
		NpcID.GHOST_7264,
		NpcID.GHOST_3625,
		NpcID.GHOST_2531,
		NpcID.GHOST_2532,
		NpcID.GHOST_2533,
		NpcID.GHOST_2534,
		NpcID.GHOST_2527,
		NpcID.GHOST_2528,
		NpcID.GHOST_2529,
		NpcID.GHOST_2530,
		NpcID.IRVIG_SENAY,
		NpcID.LOAR_SHADE,
		NpcID.LOAR_SHADOW,
		NpcID.OTHERWORLDLY_BEING,
		NpcID.PHRIN_SHADE,
		NpcID.PHRIN_SHADOW,
		NpcID.RANALPH_DEVERE,
		NpcID.REPUGNANT_SPECTRE,
		NpcID.REVENANT_CYCLOPS,
		NpcID.REVENANT_DARK_BEAST,
		NpcID.REVENANT_DEMON,
		NpcID.REVENANT_DRAGON,
		NpcID.REVENANT_GOBLIN,
		NpcID.REVENANT_HELLHOUND,
		NpcID.REVENANT_HOBGOBLIN,
		NpcID.REVENANT_IMP,
		NpcID.REVENANT_KNIGHT,
		NpcID.REVENANT_ORK,
		NpcID.REVENANT_PYREFIEND,
		NpcID.RIYL_SHADE,
		NpcID.RIYL_SHADOW,
		NpcID.RIYL_SHADOW_5631,
		NpcID.SAN_TOJALON,
		NpcID.SCREAMING_BANSHEE,
		NpcID.SCREAMING_TWISTED_BANSHEE,
		NpcID.SHADE,
		NpcID.SHADE_7258,
		NpcID.SHADE_6740,
		NpcID.SPIRITUAL_MAGE,
		NpcID.SPIRITUAL_MAGE_2244,
		NpcID.SPIRITUAL_MAGE_3161,
		NpcID.SPIRITUAL_MAGE_3168,
		NpcID.SPIRITUAL_MAGE_11292,
		NpcID.SPIRITUAL_RANGER,
		NpcID.SPIRITUAL_RANGER_2242,
		NpcID.SPIRITUAL_RANGER_3160,
		NpcID.SPIRITUAL_RANGER_3167,
		NpcID.SPIRITUAL_RANGER_11291,
		NpcID.SPIRITUAL_WARRIOR,
		NpcID.SPIRITUAL_WARRIOR_2243,
		NpcID.SPIRITUAL_WARRIOR_3159,
		NpcID.SPIRITUAL_WARRIOR_3166,
		NpcID.SPIRITUAL_WARRIOR_11290,
		NpcID.SULPHUR_NAGUA,
		NpcID.SULPHUR_NAGUA_13033,
		NpcID.TORTURED_SOUL,
		NpcID.TWISTED_BANSHEE,
		NpcID.URIUM_SHADE,
		NpcID.URIUM_SHADOW
	);
	@Getter
	public static final ImmutableSet<Integer> SPECTRALBOSSES = ImmutableSet.of(
		NpcID.AMOXLIATL,
		NpcID.AMOXLIATL_13686,
		NpcID.AMOXLIATL_13687,
		NpcID.AMOXLIATL_13689,
		NpcID.AHRIM_THE_BLIGHTED,
		NpcID.AHRIM_THE_BLIGHTED_12316,
		NpcID.AHRIM_THE_BLIGHTED_12322,
		NpcID.DHAROK_THE_WRETCHED,
		NpcID.DHAROK_THE_WRETCHED_12317,
		NpcID.DHAROK_THE_WRETCHED_12323,
		NpcID.DHAROK_THE_WRETCHED_12447,
		NpcID.GUTHAN_THE_INFESTED,
		NpcID.GUTHAN_THE_INFESTED_12318,
		NpcID.GUTHAN_THE_INFESTED_12324,
		NpcID.KARIL_THE_TAINTED,
		NpcID.KARIL_THE_TAINTED_12319,
		NpcID.KARIL_THE_TAINTED_12325,
		NpcID.KASONDE_THE_CRAVEN_12332,
		NpcID.KASONDE_THE_CRAVEN,
		NpcID.KETLA_THE_UNWORTHY,
		NpcID.KETLA_THE_UNWORTHY_12330,
		NpcID.PERSTEN_THE_DECEITFUL,
		NpcID.PHANTOM_MUSPAH,
		NpcID.PHANTOM_MUSPAH_12078,
		NpcID.PHANTOM_MUSPAH_12079,
		NpcID.PHANTOM_MUSPAH_12080,
		NpcID.PHANTOM_MUSPAH_12082,
		NpcID.NAZASTAROOL_5355,
		NpcID.NAZASTAROOL_6400,
		NpcID.REVENANT_MALEDICTUS,
		NpcID.THE_FORSAKEN_ASSASSIN,
		NpcID.TORAG_THE_CORRUPTED,
		NpcID.TORAG_THE_CORRUPTED_12320,
		NpcID.TORAG_THE_CORRUPTED_12326,
		NpcID.TREE_SPIRIT,
		NpcID.TREE_SPIRIT_6380,
		NpcID.TREE_SPIRIT_HARD,
		NpcID.TREUS_DAYTH_6359,
		NpcID.TREUS_DAYTH_HARD,
		NpcID.VERAC_THE_DEFILED,
		NpcID.VERAC_THE_DEFILED_12321,
		NpcID.VERAC_THE_DEFILED_12327
	);

}



/*
 * Copyright (c) 2024, Elise Chevaier <https://github.com/staytheknight>
 * <https://elisechevalier.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.ectoplasmator;

import com.google.inject.Provides;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import javax.inject.Inject;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.events.HitsplatApplied;
import net.runelite.api.events.NpcDespawned;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Ectoplasmator Reminder"
)
public class EctoplasmatorPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private EctoplasmatorConfig config;

	@Inject
	private EctoplasmatorOverlay overlay;

	@Getter(AccessLevel.PACKAGE)
	private final List<NPC> NPCTargets = new ArrayList<>();

	// Timer
	Timer outOfCombatTimer = new Timer("Timer");
	// Combat ends after 10 seconds (player is able to log)
	long outOfCombatDelay = 10000L; // 10000L = 10 seconds
	// The timer task that sets the combat statue to false
	TimerTask outOfCombatTask = null;

	// Function that will re-initialize the outOfCombatTask, as it gets canceled
	// from time to time which clears it's run() function
	public void outOfCombatTaskSetup()
	{
		outOfCombatTask = new TimerTask()
		{
			public void run()
			{
				overlay.setCombatStatus(false);
			}
		};
	}

	// Triggers when a hitsplat is detected (on player & on NPC from the player)
	@Subscribe
	public void onHitsplatApplied(HitsplatApplied hitSplat) throws InterruptedException
	{
		// If the hit splat is applied to the player or is from the player start the combat timer
		if (hitSplat.getActor() == client.getLocalPlayer() || hitSplat.getHitsplat().isMine())
		{
			// Cancels any previous out of combat timers
			outOfCombatTask.cancel();
			outOfCombatTimer.purge();
			// Re-initializes a new combat task, as .cancel() purges the run() function
			outOfCombatTaskSetup();
			// Sets the in combat statue to true
			overlay.setCombatStatus(true);
			// Start the combat timer
			outOfCombatTimer.schedule(outOfCombatTask, outOfCombatDelay);
		}

	}

	// When an NPC spawns, add it to the NPC targets list
	@Subscribe
	public void onNpcSpawned(NpcSpawned npcSpawned)
	{
		NPC npc = npcSpawned.getNpc();
		NPCTargets.add(npc);
	}

	// When an NPC despawned, remove it from the NPC targets list
	@Subscribe
	public void onNpcDespawned(NpcDespawned npcDespawned)
	{
		NPC npc = npcDespawned.getNpc();
		NPCTargets.remove(npc);
	}

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
		overlay.revalidate();
		overlay.setCombatStatus(false);
		outOfCombatTaskSetup();
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
		NPCTargets.clear();
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged)
	{
		if (configChanged.getKey().equals("overlayScale"))
		{
			overlay.scaleImage();
		}
	}

	@Provides
	EctoplasmatorConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(EctoplasmatorConfig.class);
	}


}

