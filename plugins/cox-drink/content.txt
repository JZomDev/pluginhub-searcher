package com.coxdrink;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CoxDrinkPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CoXDrinkPlugin.class);
		RuneLite.main(args);
	}
}
package com.coxdrink;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("CoX Drink")
public interface CoXDrinkConfig extends Config
{
	@ConfigItem(
		keyName = "message",
		name = "Drinking Message",
		description = "The message to show above a player's head when they drink from an energy pool"
	)
	default String message()
	{
		return "Shluuuurp!";
	}
}

package com.coxdrink;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

@Slf4j
@PluginDescriptor(
	name = "CoX Drink"
)
public class CoXDrinkPlugin extends Plugin
{
	private static final int LOOKING_INTO_ANIMATION_ID = 832;
	private static final int ENERGY_WELL_OBJECT_ID = 30066;

	private static final int CYCLES_PER_GAME_TICK = Constants.GAME_TICK_LENGTH / Constants.CLIENT_TICK_LENGTH;
	private static final int OVERHEAD_TEXT_TICK_TIMEOUT = 5;
	private static final int CYCLES_FOR_OVERHEAD_TEXT = OVERHEAD_TEXT_TICK_TIMEOUT * CYCLES_PER_GAME_TICK;

	@Inject
	private Client client;

	@Inject
	private CoXDrinkConfig config;

	@Subscribe
	public void onAnimationChanged(AnimationChanged event) {
		if (event.getActor() == null || event.getActor().getName() == null) return;

		if (event.getActor() instanceof Player) {
			if(event.getActor().getAnimation() == LOOKING_INTO_ANIMATION_ID) {
				Player player = (Player) event.getActor();
				var playerLocation = player.getWorldLocation();

				// Check adjacent 4 tiles
				if (findTileObject(client.getPlane(), playerLocation.dx(-1), ENERGY_WELL_OBJECT_ID) != null ||
					findTileObject(client.getPlane(), playerLocation.dx(1), ENERGY_WELL_OBJECT_ID) != null ||
					findTileObject(client.getPlane(), playerLocation.dy(-1), ENERGY_WELL_OBJECT_ID) != null ||
					findTileObject(client.getPlane(), playerLocation.dy(1), ENERGY_WELL_OBJECT_ID) != null)
				{
					player.setOverheadText(config.message());
					player.setOverheadCycle(CYCLES_FOR_OVERHEAD_TEXT);
				}
			}
		}
	}

	private TileObject findTileObject(int z, WorldPoint point, int id)
	{
		if (point == null){
			return null;
		}

		var localPoint = LocalPoint.fromWorld(client, point);

		Scene scene = client.getScene();
		Tile[][][] tiles = scene.getTiles();
		final Tile tile = tiles[z][localPoint.getSceneX()][localPoint.getSceneY()];
		if (tile == null)
		{
			return null;
		}

		final GroundObject groundObject = tile.getGroundObject();
		if (objectIdEquals(groundObject, id))
		{
			return groundObject;
		}

		return null;
	}

	private boolean objectIdEquals(TileObject tileObject, int id)
	{
		if (tileObject == null)
		{
			return false;
		}

		if (tileObject.getId() == id)
		{
			return true;
		}

		// Menu action EXAMINE_OBJECT sends the transformed object id, not the base id, unlike
		// all of the GAME_OBJECT_OPTION actions, so check the id against the impostor ids
		final ObjectComposition comp = client.getObjectDefinition(tileObject.getId());

		if (comp.getImpostorIds() != null)
		{
			for (int impostorId : comp.getImpostorIds())
			{
				if (impostorId == id)
				{
					return true;
				}
			}
		}

		return false;
	}

	@Provides
	CoXDrinkConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(CoXDrinkConfig.class);
	}
}

