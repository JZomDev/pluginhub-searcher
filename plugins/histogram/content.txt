package com.histogram;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class HistogramPluginTest
{
	public static void main(String[] args) throws Exception
	{
		try {
			ExternalPluginManager.loadBuiltin(HistogramPlugin.class);
			RuneLite.main(args);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}
}
package com.histogram;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.worldhopper.ping.Ping;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.api.events.*;
import net.runelite.client.game.WorldService;

import java.awt.*;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

@Slf4j
@PluginDescriptor(
	name = "Histogram"
)
public class HistogramPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private HistogramConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private WorldService worldService;

	private HistogramOverlay histogramOverlay;
	private ScheduledExecutorService pingThreads;

	private int ping = -1;
	private int checksTilPing = 0;

	private static final int HOP_GAMESTATE = 45;

	@Override
	protected void startUp() throws Exception
	{
		histogramOverlay = new HistogramOverlay(config);
		overlayManager.add(histogramOverlay);

		pingThreads = Executors.newScheduledThreadPool(20);
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(histogramOverlay);
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		histogramOverlay.addEvent(EventType.TICK);

		if (config.useIdealTicks()) {
			histogramOverlay.addEvent(EventType.IDEAL_TICK, 0.600f);
		}

		pingThreads.schedule(this::updatePing, 0, TimeUnit.SECONDS);
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked e) {
		String menuOption = removeFormatting(e.getMenuOption());
		String menuTarget = removeFormatting(e.getMenuTarget());

		if (menuOption.equals("Wield") || menuOption.equals("Wear") || menuOption.equals("Remove") || menuOption.equals("Hold")) {
			histogramOverlay.addEvent(EventType.EQUIP, getInputDelay(EventType.EQUIP), getServerDelay(EventType.EQUIP));
			return;
		}

		if (menuOption.equals("Eat") || menuOption.equals("Drink")) {
			histogramOverlay.addEvent(EventType.EAT, getInputDelay(EventType.EAT), getServerDelay(EventType.EAT));
			return;
		}

		if (menuOption.equals("Walk here")) {
			histogramOverlay.addEvent(EventType.MOVE, getInputDelay(EventType.MOVE), getServerDelay(EventType.MOVE));
			return;
		}

		if (menuOption.equals("Use")) {
			if (menuTarget.equals("Special Attack")) {
				histogramOverlay.addEvent(EventType.SPECIAL_ATTACK, getInputDelay(EventType.SPECIAL_ATTACK), getServerDelay(EventType.SPECIAL_ATTACK));
				return;
			}
			else {
				histogramOverlay.addEvent(EventType.USE, getInputDelay(EventType.USE), getServerDelay(EventType.USE));
				return;
			}
		}

		if (removeFormatting(menuOption).equals("Use Special Attack")) {
			histogramOverlay.addEvent(EventType.SPECIAL_ATTACK, getInputDelay(EventType.SPECIAL_ATTACK), getServerDelay(EventType.SPECIAL_ATTACK));
			return;
		}

		if (menuOption.equals("Attack")) {
			histogramOverlay.addEvent(EventType.ATTACK, getInputDelay(EventType.ATTACK), getServerDelay(EventType.ATTACK));
			return;
		}

		if (menuOption.equals("Activate") || menuOption.equals("Deactivate")) {
			histogramOverlay.addEvent(EventType.PRAYER, getInputDelay(EventType.PRAYER), getServerDelay(EventType.PRAYER));
			return;
		}

		if (handleCustomConfig(menuOption, menuTarget, config.custom1Interaction(), config.custom1Target(), EventType.CUSTOM_1))
			return;
		if (handleCustomConfig(menuOption, menuTarget, config.custom2Interaction(), config.custom2Target(), EventType.CUSTOM_2))
			return;
		if (handleCustomConfig(menuOption, menuTarget, config.custom3Interaction(), config.custom3Target(), EventType.CUSTOM_3))
			return;
		if (handleCustomConfig(menuOption, menuTarget, config.custom4Interaction(), config.custom4Target(), EventType.CUSTOM_4))
			return;
		if (handleCustomConfig(menuOption, menuTarget, config.custom5Interaction(), config.custom5Target(), EventType.CUSTOM_5))
			return;
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState().getState() == HOP_GAMESTATE)
		{
			checksTilPing = 0;
		}
	}

	@Provides
	HistogramConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(HistogramConfig.class);
	}

	private float getInputDelay(EventType event)
	{
		float delay = (ping / 1000f);
		return Math.min(delay, (config.pingMax() / 1000f));
	}

	private void updatePing()
	{
		if (checksTilPing == 0)
		{
			int currentping = sendPing();

			if (currentping != -1)
			{
				ping = currentping;
				checksTilPing = config.pingCount() - 1;
			}
		}
		else
		{
			checksTilPing--;
		}
	}

	private int sendPing()
	{
		return Ping.ping(worldService.getWorlds().findWorld(client.getWorld()));
	}

	private int getPlayerCount()
	{
		return worldService.getWorlds().findWorld(client.getWorld()).getPlayers();
	}

	private String removeFormatting(String raw)
	{
		return raw.replaceAll("<[^>]*>", "");
	}

	private float getServerDelay(EventType type)
	{
		int playercount = getPlayerCount();

		switch (type)
		{
			case EQUIP:
				return config.equipConst() / 1000f + (config.equipMult() / 1000f * playercount / 1000f);
			case EAT:
				return config.eatConst() / 1000f + (config.eatMult() / 1000f * playercount / 1000f);
			case MOVE:
				return config.moveConst() / 1000f + (config.moveMult() / 1000f * playercount / 1000f);
			case USE:
				return config.useConst() / 1000f + (config.useMult() / 1000f * playercount / 1000f);
			case ATTACK:
				return config.attackConst() / 1000f + (config.attackMult() / 1000f * playercount / 1000f);
			case SPECIAL_ATTACK:
				return config.specialattackConst() / 1000f + (config.specialattackMult() / 1000f * playercount / 1000f);
			case PRAYER:
				return config.prayerConst() / 1000f + (config.prayerMult() / 1000f * playercount / 1000f);
			case CUSTOM_1:
				return config.custom1Const() / 1000f + (config.custom1Mult() / 1000f * playercount / 1000f);
			case CUSTOM_2:
				return config.custom2Const() / 1000f + (config.custom2Mult() / 1000f * playercount / 1000f);
			case CUSTOM_3:
				return config.custom3Const() / 1000f + (config.custom3Mult() / 1000f * playercount / 1000f);
			case CUSTOM_4:
				return config.custom4Const() / 1000f + (config.custom4Mult() / 1000f * playercount / 1000f);
			case CUSTOM_5:
				return config.custom5Const() / 1000f + (config.custom5Mult() / 1000f * playercount / 1000f);
			default:
				return 0;
		}
	}

	private boolean handleCustomConfig(String menuOption, String menuTarget, String option, String target, EventType type)
	{
		if (option.isEmpty() && target.isEmpty())
			return false;

		if (option.isEmpty() || option.equals(menuOption))
		{
			if (target.isEmpty() || target.equals(menuTarget))
			{
				histogramOverlay.addEvent(type, getInputDelay(type), getServerDelay(type));
				return true;
			}
		}

		return false;
	}
}

package com.histogram;

import net.runelite.client.ui.overlay.Overlay;
import java.awt.*;
import java.util.*;

class HistogramOverlay extends Overlay
{
    private class Event
    {
        public EventType type;
        public float time;
        public float inputOffset;
        public float serverOffset;

        Event(EventType type)
        {
            this.type = type;
            this.time = 0;
            this.inputOffset = 0;
            this.serverOffset = 0;
        }
    }

    private ArrayDeque<Event> events;

    private HistogramConfig config;

    private long lastnano;
    private float delta;

    HistogramOverlay(HistogramConfig config)
    {
        this.config = config;

        events = new ArrayDeque<>();
        lastnano = System.nanoTime();
    }

    public void addEvent(EventType type)
    {
        Event event = new Event(type);
        events.add(event);
    }

    public void addEvent(EventType type, float delay)
    {
        Event event = new Event(type);
        event.time -= delay;
        events.add(event);
    }

    public void addEvent(EventType type, float pingdelay, float serverdelay)
    {
        Event event = new Event(type);
        event.time -= pingdelay + serverdelay;
        event.serverOffset = serverdelay;
        event.inputOffset = pingdelay + serverdelay;
        events.add(event);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        graphics.setColor(config.bgColor());
        graphics.fillRect(0, 0, config.panelSize().width, config.panelSize().height);

        updateDelta();
        updateEvents();
        drawEvents(graphics);

        return config.panelSize();
    }

    private void drawEvents(Graphics2D graphics)
    {
        for (Event event : events)
        {
            drawBar(graphics, event.time, event.type);

            if (event.inputOffset != 0 && event.serverOffset != 0)
            {
                if (config.showInputLag())
                {
                    drawRange(graphics, event.time + event.inputOffset, event.time, event.type, config.inputLagAlpha());
                }

                if (config.showServerLag())
                {
                    drawRange(graphics, event.time + event.serverOffset, event.time, event.type, config.serverLagAlpha());
                }
            }
        }
    }

    private void drawBar(Graphics2D graphics, float time, EventType type)
    {
        Color color = typeToColor(type);
        float xpos = lerp(config.panelSize().width, 0, time / (config.durationMS() / 1000f));

        int fullbarwidth = config.linewidth() - ((config.antialiasing()) ? 1 : 0);
        int fullbaroffset = (int)xpos + ((config.antialiasing() ? 1 : 0));
        drawRect(graphics, color, fullbaroffset, fullbarwidth);

        if (config.antialiasing())
        {
            float subpixel = xpos % 1 + ((xpos < 0) ? 1 : 0);

            Color left = new Color(color.getRed(), color.getGreen(), color.getBlue(), (int) (color.getAlpha() * (1 - subpixel)));
            Color right = new Color(color.getRed(), color.getGreen(), color.getBlue(), (int) (color.getAlpha() * subpixel));

            drawRect(graphics, left, (int)xpos, 1);
            drawRect(graphics, right, (int)xpos + config.linewidth(), 1);
        }
    }

    private void drawRange(Graphics2D graphics, float start, float end, EventType type, int alpha)
    {
        Color originalColor = typeToColor(type);
        Color color = new Color(originalColor.getRed(), originalColor.getGreen(), originalColor.getBlue(), (int)(originalColor.getAlpha() * (alpha / 255f)));

        float xpos = lerp(config.panelSize().width, 0, start / (config.durationMS() / 1000f));
        float width = lerp(config.panelSize().width, 0, end / (config.durationMS() / 1000f)) - xpos;
        float subpixel = xpos % 1 + ((xpos < 0) ? 1 : 0);

        int fullbarwidth = (int)(width + subpixel + 1);
        int fullbaroffset = (int)xpos + ((config.antialiasing() ? 1 : 0));
        drawRect(graphics, color, fullbaroffset, fullbarwidth);

        if (config.antialiasing())
        {
            Color left = new Color(color.getRed(), color.getGreen(), color.getBlue(), (int) (color.getAlpha() * (1 - subpixel)));
            drawRect(graphics, left, (int)xpos, 1);
        }
    }

    private void drawRect(Graphics2D graphics, Color color, int xpos, int width)
    {
        if (width <= 0)
            return;

        if (xpos + width < 0 || xpos >= config.panelSize().width)
            return;

        if (color.getAlpha() == 0)
            return;

        int boundedx = Math.max(xpos, 0);
        int boundedw = Math.min(xpos + width, config.panelSize().width) - boundedx;

        graphics.setColor(color);
        graphics.fillRect(boundedx, 0, boundedw, config.panelSize().height);
    }

    private Color typeToColor(EventType type)
    {
        switch (type)
        {
            case TICK:
                return config.tickColor();
            case IDEAL_TICK:
                return config.idealTickColor();
            case EQUIP:
                return config.equipColor();
            case EAT:
                return config.eatColor();
            case MOVE:
                return config.moveColor();
            case USE:
                return config.useColor();
            case ATTACK:
                return config.attackColor();
            case SPECIAL_ATTACK:
                return config.specColor();
            case PRAYER:
                return config.prayerColor();
            case CUSTOM_1:
                return config.custom1Color();
            case CUSTOM_2:
                return config.custom2Color();
            case CUSTOM_3:
                return config.custom3Color();
            case CUSTOM_4:
                return config.custom4Color();
            case CUSTOM_5:
                return config.custom5Color();
            default:
                return config.tickColor();
        }
    }

    private float lerp(float a, float b, float t)
    {
        return a * (1 - t) + b * t;
    }

    private void updateDelta()
    {
        long nano = System.nanoTime();
        delta = (nano - lastnano) / 1000000000f;
        lastnano = nano;
    }

    public void updateEvents()
    {
        for (Event event : events)
        {
            event.time += delta;
        }

        // events in the deque aren't strictly ordered by time, because of ping delays
        // this "assumes" that they are to strictly ordered to remove them as soon as possible
        // as it is some events will persist longer than they need to because of these delays
        // however, all events will eventually surpass the max duration, so it's not an issue
        // the maximum duration, if kept at sane levels, shouldn't ever result in much buildup
        float extratime = 1 + (float)config.linewidth() / (float)config.panelSize().width;
        while (!events.isEmpty() && events.peek().time > (config.durationMS() / 1000f * extratime))
        {
            events.removeFirst();
        }
    }
}

package com.histogram;

import java.awt.*;

import net.runelite.client.config.*;

@ConfigGroup("histogram")
public interface HistogramConfig extends Config
{
	@ConfigSection(
			name = "Panel",
			description = "Panel Settings",
			position = 0,
			closedByDefault = false
	)
	String panelSection = "Panel";

	@ConfigSection(
			name = "Events",
			description = "Events Settings",
			position = 1,
			closedByDefault = false
	)
	String eventSection = "Events";

	@ConfigSection(
			name = "Custom",
			description = "Additional Inputs",
			position = 2,
			closedByDefault = true
	)
	String customSection = "Custom Inputs";

	@ConfigSection(
			name = "Advanced",
			description = "Advanced Settings",
			position = 3,
			closedByDefault = true
	)
	String advancedSection = "Advanced";

	@ConfigItem(
			keyName = "panelsize",
			name = "Panel size",
			description = "Dimensions of the entire histogram panel (horizontal x vertical)",
			section = panelSection
	)
	default Dimension panelSize()
	{
		return new Dimension(100, 10);
	}

	@Alpha
	@ConfigItem(
			keyName = "bgcolor",
			name = "Background Color",
			description = "Color of the background panel",
			section = panelSection
	)
	default Color bgColor()
	{
		return new Color(0, 0, 0, 175);
	}

	@ConfigItem(
			keyName = "duration",
			name = "Duration",
			description = "How long (in milliseconds) it takes for events to traverse the histogram",
			section = panelSection
	)
	default int durationMS()
	{
		return 1800;
	}

	@ConfigItem(
			keyName = "linewidth",
			name = "Line Width",
			description = "How wide (in pixels) should each tick/input marker be",
			section = panelSection
	)
	default int linewidth()
	{
		return 2;
	}

	@ConfigItem(
			keyName = "antialiasing",
			name = "Anti-aliasing",
			description = "Should event indicators be anti-aliased",
			section = panelSection
	)
	default boolean antialiasing()
	{
		return true;
	}

	@ConfigItem(
			keyName = "idealticks",
			name = "Show Ideal Tickrate",
			description = "Should we display ideal 0.6s interval ticks as well as actual ticks",
			section = panelSection
	)
	default boolean useIdealTicks()
	{
		return false;
	}

	@ConfigItem(
			keyName = "inputlag",
			name = "Show Clientside Input",
			description = "Display the range from the clientside input event to it being fully processed.",
			section = panelSection,
			position = 3
	)
	default boolean showInputLag()
	{
		return false;
	}

	@ConfigItem(
			keyName = "inputlagalpha",
			name = "Clientside Input Alpha",
			description = "Alpha value of input range.",
			section = panelSection,
			position = 4
	)
	default int inputLagAlpha()
	{
		return 50;
	}

	@ConfigItem(
			keyName = "serverlag",
			name = "Show Serverside Processing",
			description = "Display the range from when the server receives the event to it being fully processed.",
			section = panelSection,
			position = 5
	)
	default boolean showServerLag()
	{
		return false;
	}

	@ConfigItem(
			keyName = "serverlagalpha",
			name = "Serverside Processing Alpha",
			description = "Alpha value of server processing range.",
			section = panelSection,
			position = 6
	)
	default int serverLagAlpha()
	{
		return 50;
	}

	@Alpha
	@ConfigItem(
			keyName = "tick",
			name = "Tick Color",
			description = "Color of the gametick event",
			section = eventSection,
			position = 0
	)
	default Color tickColor()
	{
		return new Color(0, 255, 255, 255);
	}

	@Alpha
	@ConfigItem(
			keyName = "idealtick",
			name = "Ideal Tick Color",
			description = "Color of the simulated ideal gametick timing",
			section = eventSection,
			position = 1
	)
	default Color idealTickColor()
	{
		return new Color(127, 255, 255, 127);
	}

	@Alpha
	@ConfigItem(
			keyName = "equip",
			name = "Equip Color",
			description = "Color of the equip event",
			section = eventSection,
			position = 2
	)
	default Color equipColor()
	{
		return new Color(255, 255, 0, 255);
	}

	@Alpha
	@ConfigItem(
			keyName = "eat",
			name = "Eat Color",
			description = "Color of the eat event",
			section = eventSection,
			position = 2
	)
	default Color eatColor()
	{
		return new Color(0, 255, 0, 255);
	}

	@Alpha
	@ConfigItem(
			keyName = "move",
			name = "Move Color",
			description = "Color of the walk/run events",
			section = eventSection,
			position = 2
	)
	default Color moveColor()
	{
		return new Color(255, 0, 255, 255);
	}

	@Alpha
	@ConfigItem(
			keyName = "use",
			name = "Use Color",
			description = "Color of the use events",
			section = eventSection,
			position = 2
	)
	default Color useColor()
	{
		return new Color(255, 255, 255, 255);
	}

	@Alpha
	@ConfigItem(
			keyName = "attack",
			name = "Attack Color",
			description = "Color of the attack events",
			section = eventSection,
			position = 2
	)
	default Color attackColor()
	{
		return new Color(255, 0, 0, 255);
	}

	@Alpha
	@ConfigItem(
			keyName = "spec",
			name = "Special Attack Color",
			description = "Color of special attack events",
			section = eventSection,
			position = 2
	)
	default Color specColor()
	{
		return new Color(255, 127, 0, 255);
	}

	@Alpha
	@ConfigItem(
			keyName = "prayer",
			name = "Prayer Color",
			description = "Color of the prayer events",
			section = eventSection,
			position = 2
	)
	default Color prayerColor()
	{
		return new Color(85, 85, 255, 255);
	}

	@ConfigItem(
			keyName = "pingmax",
			name = "Ping Delay Maximum",
			description = "The maximum delay due to ping (in milliseconds). Doesn't interrupt pings, just limits the value returned.",
			section = advancedSection,
			position = 0
	)
	default int pingMax()
	{
		return 10000;
	}

	@ConfigItem(
			keyName = "pingcount",
			name = "Ping Every nth",
			description = "How many gameticks occur before re-pinging",
			section = advancedSection,
			position = 1
	)
	default int pingCount()
	{
		return 5;
	}

	@ConfigItem(
			keyName = "delaymoveconst",
			name = "Move Delay Constant",
			description = "The value to add to ping to delay move inputs (in milliseconds)",
			section = advancedSection,
			position = 2
	)
	default int moveConst()
	{
		return 60;
	}

	@ConfigItem(
			keyName = "delaymovemult",
			name = "Move Delay Mult",
			description = "The value to add to ping to delay move inputs, multiplied by playercount (x1000)",
			section = advancedSection,
			position = 2
	)
	default int moveMult()
	{
		return 60;
	}

	@ConfigItem(
			keyName = "delayprayerconst",
			name = "Prayer Delay Constant",
			description = "The value to add to ping to delay prayer inputs (in milliseconds)",
			section = advancedSection,
			position = 2
	)
	default int prayerConst()
	{
		return 0;
	}

	@ConfigItem(
			keyName = "delayprayermult",
			name = "Prayer Delay Mult",
			description = "The value to add to ping to delay prayer inputs, multiplied by playercount (x1000)",
			section = advancedSection,
			position = 2
	)
	default int prayerMult()
	{
		return 60;
	}

	@ConfigItem(
			keyName = "delayattackconst",
			name = "Attack Delay Constant",
			description = "The value to add to ping to delay attack inputs (in milliseconds)",
			section = advancedSection,
			position = 2
	)
	default int attackConst()
	{
		return 0;
	}

	@ConfigItem(
			keyName = "delayattackmult",
			name = "Attack Delay Mult",
			description = "The value to add to ping to delay attack inputs, multiplied by playercount (x1000)",
			section = advancedSection,
			position = 2
	)
	default int attackMult()
	{
		return 90;
	}

	@ConfigItem(
			keyName = "delayspecialattackconst",
			name = "Special Attack Delay Constant",
			description = "The value to add to ping to delay specialattack inputs (in milliseconds)",
			section = advancedSection,
			position = 2
	)
	default int specialattackConst()
	{
		return 0;
	}

	@ConfigItem(
			keyName = "delayspecialattackmult",
			name = "Special Attack Delay Mult",
			description = "The value to add to ping to delay specialattack inputs, multiplied by playercount (x1000)",
			section = advancedSection,
			position = 2
	)
	default int specialattackMult()
	{
		return 90;
	}

	@ConfigItem(
			keyName = "delayeatconst",
			name = "Eat Delay Constant",
			description = "The value to add to ping to delay eat inputs (in milliseconds)",
			section = advancedSection,
			position = 2
	)
	default int eatConst()
	{
		return 0;
	}

	@ConfigItem(
			keyName = "delayeatmult",
			name = "Eat Delay Mult",
			description = "The value to add to ping to delay eat inputs, multiplied by playercount (x1000)",
			section = advancedSection,
			position = 2
	)
	default int eatMult()
	{
		return 90;
	}

	@ConfigItem(
			keyName = "delayuseconst",
			name = "Use Delay Constant",
			description = "The value to add to ping to delay use inputs (in milliseconds)",
			section = advancedSection,
			position = 2
	)
	default int useConst()
	{
		return 0;
	}

	@ConfigItem(
			keyName = "delayusemult",
			name = "Use Delay Mult",
			description = "The value to add to ping to delay use inputs, multiplied by playercount (x1000)",
			section = advancedSection,
			position = 2
	)
	default int useMult()
	{
		return 90;
	}

	@ConfigItem(
			keyName = "delayequipconst",
			name = "Equip Delay Constant",
			description = "The value to add to ping to delay equip inputs (in milliseconds)",
			section = advancedSection,
			position = 2
	)
	default int equipConst()
	{
		return 30;
	}

	@ConfigItem(
			keyName = "delayequipmult",
			name = "Equip Delay Mult",
			description = "The value to add to ping to delay equip inputs, multiplied by playercount (x1000)",
			section = advancedSection,
			position = 2
	)
	default int equipMult()
	{
		return 90;
	}

	@Alpha
	@ConfigItem(
			keyName = "custom1color",
			name = "Custom 1 Color",
			description = "Color of custom events",
			section = customSection,
			position = 0
	)
	default Color custom1Color()
	{
		return new Color(255, 255, 255, 255);
	}

	@ConfigItem(
			keyName = "custom1interaction",
			name = "Custom 1 Interaction",
			description = "Event to use for custom 1",
			section = customSection,
			position = 0
	)
	default String custom1Interaction()
	{
		return "";
	}

	@ConfigItem(
			keyName = "custom1target",
			name = "Custom 1 Target",
			description = "Interaction target to use for custom 1",
			section = customSection,
			position = 0
	)
	default String custom1Target()
	{
		return "";
	}

	@ConfigItem(
			keyName = "delaycustom1const",
			name = "Custom 1 Delay Constant",
			description = "The value to add to ping to delay custom 1 inputs (in milliseconds)",
			section = advancedSection,
			position = 3
	)
	default int custom1Const()
	{
		return 0;
	}

	@ConfigItem(
			keyName = "delaycustom1mult",
			name = "Custom 1 Delay Mult",
			description = "The value to add to ping to delay custom 1 inputs, multiplied by playercount (x1000)",
			section = advancedSection,
			position = 3
	)
	default int custom1Mult()
	{
		return 60;
	}

	@Alpha
	@ConfigItem(
			keyName = "custom2color",
			name = "Custom 2 Color",
			description = "Color of custom events",
			section = customSection,
			position = 0
	)
	default Color custom2Color()
	{
		return new Color(255, 255, 255, 255);
	}

	@ConfigItem(
			keyName = "custom2interaction",
			name = "Custom 2 Interaction",
			description = "Event to use for Custom 2",
			section = customSection,
			position = 0
	)
	default String custom2Interaction()
	{
		return "";
	}

	@ConfigItem(
			keyName = "custom2target",
			name = "Custom 2 Target",
			description = "Interaction target to use for Custom 2",
			section = customSection,
			position = 0
	)
	default String custom2Target()
	{
		return "";
	}

	@ConfigItem(
			keyName = "delaycustom2const",
			name = "Custom 2 Delay Constant",
			description = "The value to add to ping to delay Custom 2 inputs (in milliseconds)",
			section = advancedSection,
			position = 3
	)
	default int custom2Const()
	{
		return 0;
	}

	@ConfigItem(
			keyName = "delaycustom2mult",
			name = "Custom 2 Delay Mult",
			description = "The value to add to ping to delay Custom 2 inputs, multiplied by playercount (x1000)",
			section = advancedSection,
			position = 3
	)
	default int custom2Mult()
	{
		return 60;
	}

	@Alpha
	@ConfigItem(
			keyName = "custom3color",
			name = "Custom 3 Color",
			description = "Color of custom events",
			section = customSection,
			position = 0
	)
	default Color custom3Color()
	{
		return new Color(255, 255, 255, 255);
	}

	@ConfigItem(
			keyName = "custom3interaction",
			name = "Custom 3 Interaction",
			description = "Event to use for Custom 3",
			section = customSection,
			position = 0
	)
	default String custom3Interaction()
	{
		return "";
	}

	@ConfigItem(
			keyName = "custom3target",
			name = "Custom 3 Target",
			description = "Interaction target to use for Custom 3",
			section = customSection,
			position = 0
	)
	default String custom3Target()
	{
		return "";
	}

	@ConfigItem(
			keyName = "delaycustom3const",
			name = "Custom 3 Delay Constant",
			description = "The value to add to ping to delay Custom 3 inputs (in milliseconds)",
			section = advancedSection,
			position = 3
	)
	default int custom3Const()
	{
		return 0;
	}

	@ConfigItem(
			keyName = "delaycustom3mult",
			name = "Custom 3 Delay Mult",
			description = "The value to add to ping to delay Custom 3 inputs, multiplied by playercount (x1000)",
			section = advancedSection,
			position = 3
	)
	default int custom3Mult()
	{
		return 60;
	}

	@Alpha
	@ConfigItem(
			keyName = "custom4color",
			name = "Custom 4 Color",
			description = "Color of custom events",
			section = customSection,
			position = 0
	)
	default Color custom4Color()
	{
		return new Color(255, 255, 255, 255);
	}

	@ConfigItem(
			keyName = "custom4interaction",
			name = "Custom 4 Interaction",
			description = "Event to use for Custom 4",
			section = customSection,
			position = 0
	)
	default String custom4Interaction()
	{
		return "";
	}

	@ConfigItem(
			keyName = "custom4target",
			name = "Custom 4 Target",
			description = "Interaction target to use for Custom 4",
			section = customSection,
			position = 0
	)
	default String custom4Target()
	{
		return "";
	}

	@ConfigItem(
			keyName = "delaycustom4const",
			name = "Custom 4 Delay Constant",
			description = "The value to add to ping to delay Custom 4 inputs (in milliseconds)",
			section = advancedSection,
			position = 3
	)
	default int custom4Const()
	{
		return 0;
	}

	@ConfigItem(
			keyName = "delaycustom4mult",
			name = "Custom 4 Delay Mult",
			description = "The value to add to ping to delay Custom 4 inputs, multiplied by playercount (x1000)",
			section = advancedSection,
			position = 3
	)
	default int custom4Mult()
	{
		return 60;
	}

	@Alpha
	@ConfigItem(
			keyName = "custom5color",
			name = "Custom 5 Color",
			description = "Color of custom events",
			section = customSection,
			position = 0
	)
	default Color custom5Color()
	{
		return new Color(255, 255, 255, 255);
	}

	@ConfigItem(
			keyName = "custom5interaction",
			name = "Custom 5 Interaction",
			description = "Event to use for Custom 5",
			section = customSection,
			position = 0
	)
	default String custom5Interaction()
	{
		return "";
	}

	@ConfigItem(
			keyName = "custom5target",
			name = "Custom 5 Target",
			description = "Interaction target to use for Custom 5",
			section = customSection,
			position = 0
	)
	default String custom5Target()
	{
		return "";
	}

	@ConfigItem(
			keyName = "delaycustom5const",
			name = "Custom 5 Delay Constant",
			description = "The value to add to ping to delay Custom 5 inputs (in milliseconds)",
			section = advancedSection,
			position = 3
	)
	default int custom5Const()
	{
		return 0;
	}

	@ConfigItem(
			keyName = "delaycustom5mult",
			name = "Custom 5 Delay Mult",
			description = "The value to add to ping to delay Custom 5 inputs, multiplied by playercount (x1000)",
			section = advancedSection,
			position = 3
	)
	default int custom5Mult()
	{
		return 60;
	}
}

package com.histogram;

public enum EventType {
    TICK,
    IDEAL_TICK,
    PRAYER,
    EQUIP,
    EAT,
    MOVE,
    ATTACK,
    SPECIAL_ATTACK,
    USE,

    CUSTOM_1,
    CUSTOM_2,
    CUSTOM_3,
    CUSTOM_4,
    CUSTOM_5,
}

