/*
 * Copyright (c) 2024, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.unbalancedtradeprevention;

import com.google.common.collect.Sets;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import static org.mockito.Mockito.doReturn;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import static thestonedturtle.unbalancedtradeprevention.UnbalancedTradePreventionPlugin.TRADE_WINDOW_OPPONENT_VALUE_TEXT_CHILD_ID;
import static thestonedturtle.unbalancedtradeprevention.UnbalancedTradePreventionPlugin.TRADE_WINDOW_SECOND_SCREEN_INTERFACE_ID;
import static thestonedturtle.unbalancedtradeprevention.UnbalancedTradePreventionPlugin.TRADE_WINDOW_SELF_VALUE_TEXT_CHILD_ID;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class UnbalancedTradeTest
{
	@Mock
	UnbalancedTradePreventionConfig config;

	@Spy
	@InjectMocks
	UnbalancedTradePreventionPlugin plugin;

	@ParameterizedTest
	@MethodSource("providerForTradeWindowDelta")
	void testGetTradeWindowDelta(String selfValue, String oppValue, int expectedDelta)
	{
		doReturn(createSelfValueTextPattern(selfValue))
			.when(plugin).getTextByWidget(TRADE_WINDOW_SECOND_SCREEN_INTERFACE_ID, TRADE_WINDOW_SELF_VALUE_TEXT_CHILD_ID);
		doReturn(createOpponentValueTextPattern(oppValue))
			.when(plugin).getTextByWidget(TRADE_WINDOW_SECOND_SCREEN_INTERFACE_ID, TRADE_WINDOW_OPPONENT_VALUE_TEXT_CHILD_ID);

		int delta = plugin.getTradeWindowDelta();
		assertEquals(expectedDelta, delta);
	}

	private static Stream<Arguments> providerForTradeWindowDelta()
	{
		return Stream.of(
			// Value should be positive if you're giving away money and negative if you're receiving money
			Arguments.of("100 coins", "0 coins", 100),
			Arguments.of("0 coins", "100 coins", -100),
			Arguments.of("100 coins", "100 coins", 0),
			// If any value is null then the trade should be as unfavorable as possible
			Arguments.of("100 coins", null, Integer.MAX_VALUE),
			Arguments.of(null, "100 coins", Integer.MAX_VALUE),
			Arguments.of(null, null, Integer.MAX_VALUE),
			// If the user's value is `Lots` the trade should be as unfavorable as possible
			Arguments.of("Lots!", "Lots!", Integer.MAX_VALUE),
			Arguments.of("Lots!", "100 coins", Integer.MAX_VALUE),
			// If either value doesn't match the pattern then trade should be as unfavorable as possible
			Arguments.of("DOES NOT MATCH", "DOES NOT MATCH", Integer.MAX_VALUE),
			Arguments.of("DOES NOT MATCH", "0 coins", Integer.MAX_VALUE),
			Arguments.of("0 coins", "DOES NOT MATCH", Integer.MAX_VALUE),
			// If the opponents value is lots their value should be set to max value
			Arguments.of("0 coins", "Lots!", Integer.MAX_VALUE * -1),
			Arguments.of("100 coins", "Lots!", (100 - Integer.MAX_VALUE)),
			// Ensure values with commas work as expected
			Arguments.of("100,000 coins", "0 coins", 100_000),
			Arguments.of("100,000,000 coins", "0 coins", 100_000_000),
			Arguments.of("1,000,000,000 coins", "0 coins", 1_000_000_000),
			Arguments.of("0 coins", "100,000 coins", -100_000),
			Arguments.of("0 coins", "100,000,000 coins", -100_000_000),
			Arguments.of("0 coins", "1,000,000,000 coins", -1_000_000_000),
			Arguments.of("100,000 coins", "200,000 coins", -100_000),
			// parseException when trying to convert string to number
			Arguments.of(", coins", "0 coins", Integer.MAX_VALUE),
			Arguments.of("0 coins", ", coins", Integer.MAX_VALUE),
			Arguments.of(", coins", ", coins", Integer.MAX_VALUE)
		);
	}

	@ParameterizedTest
	@MethodSource("providerForItemFilters")
	void testUnbalancedTradeByItemFilters(ItemFilterType itemFilterType, Set<String> filterNames, Set<String> wildcardNames, Set<String> opponentItems, boolean expectedBoolean)
	{
		doReturn(itemFilterType).when(config).filterType();

		// Since we mutate the opponentItems we need recreate the set
		doReturn(lowercaseAllSetValues(opponentItems)).when(plugin).getOpponentItemNames();
		doReturn(lowercaseAllSetValues(filterNames)).when(plugin).getFilterItemNames();
		doReturn(lowercaseAllSetValues(wildcardNames)).when(plugin).getFilterWildcardNames();

		boolean isUnbalanced = plugin.unbalancedTradeByItemFilters();
		assertEquals(expectedBoolean, isUnbalanced);
	}

	public static Stream<Arguments> providerForItemFilters()
	{
		final Set<String> EMPTY = new HashSet<>();
		// false = Balanced trade
		// true = Unbalanced trade
		// Only the opponentItems set needs to be mutable, so use Sets.newHashSet instead
		return Stream.of(
			// If the item filter is off then it should always be balanced
			Arguments.of(ItemFilterType.OFF, EMPTY, EMPTY, EMPTY, false),
			Arguments.of(ItemFilterType.OFF, Set.of("ITEM NAME"), EMPTY, EMPTY, false),
			Arguments.of(ItemFilterType.OFF, EMPTY, EMPTY, Set.of("ITEM NAME"), false),
			Arguments.of(ItemFilterType.OFF, Set.of("ITEM NAME"), EMPTY, Sets.newHashSet("ITEM NAME"), false),
			Arguments.of(ItemFilterType.OFF, Set.of("ITEM NAME"), EMPTY, Sets.newHashSet("ITEM NAME"), false),
			// WHITELIST - unbalanced if there's any item in the opponents trade that IS NOT specified in one of our lists
			Arguments.of(ItemFilterType.WHITELIST, EMPTY, EMPTY, EMPTY, false),
			Arguments.of(ItemFilterType.WHITELIST, Set.of("ITEM NAME"), EMPTY, EMPTY, false),
			Arguments.of(ItemFilterType.WHITELIST, EMPTY, EMPTY, Sets.newHashSet("ITEM NAME"), true),
			Arguments.of(ItemFilterType.WHITELIST, Set.of("ITEM NAME"), EMPTY, Sets.newHashSet("ITEM NAME"), false),
			Arguments.of(ItemFilterType.WHITELIST, Set.of("OTHER ITEM"), EMPTY, Sets.newHashSet("ITEM NAME"), true),
			Arguments.of(ItemFilterType.WHITELIST, Set.of("ITEM NAME", "OTHER ITEM"), EMPTY, Sets.newHashSet("ITEM NAME"), false),
			// BLACKLIST - unbalanced if there's any item in the opponents trade that IS specified in one of our lists
			Arguments.of(ItemFilterType.BLACKLIST, EMPTY, EMPTY, EMPTY, false),
			Arguments.of(ItemFilterType.BLACKLIST, Set.of("ITEM NAME"), EMPTY, EMPTY, false),
			Arguments.of(ItemFilterType.BLACKLIST, EMPTY, EMPTY, Sets.newHashSet("ITEM NAME"), false),
			Arguments.of(ItemFilterType.BLACKLIST, Set.of("ITEM NAME"), EMPTY, Sets.newHashSet("ITEM NAME"), true),
			Arguments.of(ItemFilterType.BLACKLIST, Set.of("OTHER ITEM"), EMPTY, Sets.newHashSet("ITEM NAME"), false),
			Arguments.of(ItemFilterType.BLACKLIST, Set.of("ITEM NAME", "OTHER ITEM"), EMPTY, Sets.newHashSet("ITEM NAME"), true),
			// Coins and Platinum Tokens should always be allowed regardless of the settings
			Arguments.of(ItemFilterType.OFF, EMPTY, EMPTY, Sets.newHashSet("Coins", "Platinum token"), false),
			Arguments.of(ItemFilterType.WHITELIST, EMPTY, EMPTY, Sets.newHashSet("Coins", "Platinum token"), false),
			Arguments.of(ItemFilterType.BLACKLIST, EMPTY, EMPTY, Sets.newHashSet("Coins", "Platinum token"), false),
			// Even if the blacklist contains them they should still be allowed
			Arguments.of(ItemFilterType.BLACKLIST, Set.of("Coins"), EMPTY, Sets.newHashSet("Coins", "Platinum token"), false),
			Arguments.of(ItemFilterType.BLACKLIST, Set.of("Platinum token"), EMPTY, Sets.newHashSet("Coins", "Platinum token"), false),

			// Wildcards
			// trailing wildcard
			Arguments.of(ItemFilterType.WHITELIST, EMPTY, Set.of("Item *"), Sets.newHashSet("Item name"), false),
			Arguments.of(ItemFilterType.WHITELIST, EMPTY, Set.of("Item *"), Sets.newHashSet("Item name", "Item with another name"), false), // Matches multiple values
			Arguments.of(ItemFilterType.WHITELIST, EMPTY, Set.of("Item *"), Sets.newHashSet("Item "), false),
			Arguments.of(ItemFilterType.WHITELIST, EMPTY, Set.of("Item *"), Sets.newHashSet("Item"), true), // missing space so shouldn't match
			Arguments.of(ItemFilterType.WHITELIST, EMPTY, Set.of("Item *"), Sets.newHashSet("Item Name", "Item"), true), // one matches one doesn't
			Arguments.of(ItemFilterType.BLACKLIST, EMPTY, Set.of("Item *"), Sets.newHashSet("Item name"), true),
			Arguments.of(ItemFilterType.BLACKLIST, EMPTY, Set.of("Item *"), Sets.newHashSet("Item "), true),
			Arguments.of(ItemFilterType.BLACKLIST, EMPTY, Set.of("Item *"), Sets.newHashSet("Item"), false), // missing space so shouldn't match
			Arguments.of(ItemFilterType.BLACKLIST, EMPTY, Set.of("Item *"), Sets.newHashSet("Item Name", "Item"), true), // one matches one doesn't
			// leading wildcard
			Arguments.of(ItemFilterType.WHITELIST, EMPTY, Set.of("* Item"), Sets.newHashSet("Named Item"), false),
			Arguments.of(ItemFilterType.WHITELIST, EMPTY, Set.of("* Item"), Sets.newHashSet("Named Item", "Other Named Item"), false), // Matches multiple values
			Arguments.of(ItemFilterType.WHITELIST, EMPTY, Set.of("* Item"), Sets.newHashSet(" Item"), false),
			Arguments.of(ItemFilterType.WHITELIST, EMPTY, Set.of("* Item"), Sets.newHashSet("Item"), true), // missing space so shouldn't match
			Arguments.of(ItemFilterType.WHITELIST, EMPTY, Set.of("* Item"), Sets.newHashSet("Named Item", "Item"), true), // one matches one doesn't
			Arguments.of(ItemFilterType.BLACKLIST, EMPTY, Set.of("* Item"), Sets.newHashSet("Named Item"), true),
			Arguments.of(ItemFilterType.BLACKLIST, EMPTY, Set.of("* Item"), Sets.newHashSet(" Item"), true),
			Arguments.of(ItemFilterType.BLACKLIST, EMPTY, Set.of("* Item"), Sets.newHashSet("Item"), false), // missing space so shouldn't match
			Arguments.of(ItemFilterType.BLACKLIST, EMPTY, Set.of("* Item"), Sets.newHashSet("Named Item", "Item"), true), // one matches one doesn't

			// Combination of Wildcards and non wildcards - WHITELIST
			// non-wildcard matches
			Arguments.of(ItemFilterType.WHITELIST, Set.of("Swordfish"), Set.of("Item *"), Sets.newHashSet("Swordfish"), false),
			Arguments.of(ItemFilterType.WHITELIST, Set.of("Swordfish"), Set.of("Item *"), Sets.newHashSet("Swordfish", "Lobster"), true),
			// wildcard matches
			Arguments.of(ItemFilterType.WHITELIST, Set.of("Swordfish"), Set.of("Item *"), Sets.newHashSet("Item name"), false),
			Arguments.of(ItemFilterType.WHITELIST, Set.of("Swordfish"), Set.of("Item *"), Sets.newHashSet("Item Name", "Lobster"), true),
			Arguments.of(ItemFilterType.WHITELIST, Set.of("Swordfish"), Set.of("* Item"), Sets.newHashSet("Named Item"), false),
			Arguments.of(ItemFilterType.WHITELIST, Set.of("Swordfish"), Set.of("* Item"), Sets.newHashSet("Named Item", "Lobster"), true),
			// both matches
			Arguments.of(ItemFilterType.WHITELIST, Set.of("Swordfish"), Set.of("Item *"), Sets.newHashSet("Item name", "Swordfish"), false),
			Arguments.of(ItemFilterType.WHITELIST, Set.of("Swordfish"), Set.of("Item *"), Sets.newHashSet("Item name", "Swordfish", "Lobster"), true),
			Arguments.of(ItemFilterType.WHITELIST, Set.of("Swordfish"), Set.of("* Item"), Sets.newHashSet("Named Item", "Swordfish"), false),
			Arguments.of(ItemFilterType.WHITELIST, Set.of("Swordfish"), Set.of("* Item"), Sets.newHashSet("Named Item", "Swordfish", "Lobster"), true),
			// neither matches
			Arguments.of(ItemFilterType.WHITELIST, Set.of("Swordfish"), Set.of("Item *"), Sets.newHashSet("Lobster"), true),
			Arguments.of(ItemFilterType.WHITELIST, Set.of("Swordfish"), Set.of("* Item"), Sets.newHashSet("Lobster"), true),
			Arguments.of(ItemFilterType.WHITELIST, Set.of("Swordfish"), Set.of("Item *"), EMPTY, false),

			// Combination of Wildcards and non wildcards - BLACKLIST
			// non-wildcard matches
			Arguments.of(ItemFilterType.BLACKLIST, Set.of("Swordfish"), Set.of("Item *"), Sets.newHashSet("Swordfish"), true),
			Arguments.of(ItemFilterType.BLACKLIST, Set.of("Swordfish"), Set.of("Item *"), Sets.newHashSet("Swordfish", "Lobster"), true),
			// wildcard matches
			Arguments.of(ItemFilterType.BLACKLIST, Set.of("Swordfish"), Set.of("Item *"), Sets.newHashSet("Item name"), true),
			Arguments.of(ItemFilterType.BLACKLIST, Set.of("Swordfish"), Set.of("Item *"), Sets.newHashSet("Item Name", "Lobster"), true),
			Arguments.of(ItemFilterType.BLACKLIST, Set.of("Swordfish"), Set.of("* Item"), Sets.newHashSet("Named Item"), true),
			Arguments.of(ItemFilterType.BLACKLIST, Set.of("Swordfish"), Set.of("* Item"), Sets.newHashSet("Named Item", "Lobster"), true),
			// both matches
			Arguments.of(ItemFilterType.BLACKLIST, Set.of("Swordfish"), Set.of("Item *"), Sets.newHashSet("Item name", "Swordfish"), true),
			Arguments.of(ItemFilterType.BLACKLIST, Set.of("Swordfish"), Set.of("Item *"), Sets.newHashSet("Item name", "Swordfish", "Lobster"), true),
			Arguments.of(ItemFilterType.BLACKLIST, Set.of("Swordfish"), Set.of("* Item"), Sets.newHashSet("Named Item", "Swordfish"), true),
			Arguments.of(ItemFilterType.BLACKLIST, Set.of("Swordfish"), Set.of("* Item"), Sets.newHashSet("Named Item", "Swordfish", "Lobster"), true),
			// neither matches
			Arguments.of(ItemFilterType.BLACKLIST, Set.of("Swordfish"), Set.of("Item *"), Sets.newHashSet("Lobster"), false),
			Arguments.of(ItemFilterType.BLACKLIST, Set.of("Swordfish"), Set.of("* Item"), Sets.newHashSet("Lobster"), false),
			Arguments.of(ItemFilterType.BLACKLIST, Set.of("Swordfish"), Set.of("Item *"), EMPTY, false),

			// If there was an error getting the opponents items return true if we're meant to filter by them
			Arguments.of(ItemFilterType.OFF, EMPTY, EMPTY, null, false),
			Arguments.of(ItemFilterType.WHITELIST, EMPTY, EMPTY, null, true),
			Arguments.of(ItemFilterType.BLACKLIST, EMPTY, EMPTY, null, true),

			// Ignore strings that are just spaces
			Arguments.of(ItemFilterType.WHITELIST, Set.of(" ", "      "), EMPTY, EMPTY, false),
			Arguments.of(ItemFilterType.WHITELIST, Set.of(" ", "      "), EMPTY, Sets.newHashSet("Some Item"), true),
			Arguments.of(ItemFilterType.WHITELIST, EMPTY, Set.of(" ", "      "), EMPTY, false),
			Arguments.of(ItemFilterType.WHITELIST, EMPTY, Set.of(" ", "      "), Sets.newHashSet("Some Item"), true),
			Arguments.of(ItemFilterType.BLACKLIST, Set.of(" ", "      "), EMPTY, EMPTY, false),
			Arguments.of(ItemFilterType.BLACKLIST, Set.of(" ", "      "), EMPTY, Sets.newHashSet("Some Item"), false),
			Arguments.of(ItemFilterType.BLACKLIST, EMPTY, Set.of(" ", "      "), EMPTY, false),
			Arguments.of(ItemFilterType.BLACKLIST, EMPTY, Set.of(" ", "      "), Sets.newHashSet("Some Item"), false)
		);
	}

	private static String createSelfValueTextPattern(String s)
	{
		return s == null ? null : String.format("You are about to give:(Value: %s)", s);
	}

	private static String createOpponentValueTextPattern(String s)
	{
		return s == null ? null : String.format("In return you will receive:(Value: %s)", s);
	}

	private static Set<String> lowercaseAllSetValues(Set<String> set)
	{
		if (set == null)
		{
			return null;
		}

		return set.stream().map(String::toLowerCase).collect(Collectors.toSet());
	}
}

package thestonedturtle.unbalancedtradeprevention;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class UnbalancedTradePreventionTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(UnbalancedTradePreventionPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2024, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.unbalancedtradeprevention;

public enum ItemFilterType
{
	OFF,
	WHITELIST,
	BLACKLIST
}

/*
 * Copyright (c) 2024, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.unbalancedtradeprevention;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(UnbalancedTradePreventionConfig.GROUP_NAME)
public interface UnbalancedTradePreventionConfig extends Config
{
	String GROUP_NAME = "UnbalancedTradePrevention";

	@ConfigItem(
		keyName = "valueThreshold",
		name = "Trade Value Threshold",
		description = "A trade will be considered unbalanced if the value of the trade favors the other play by at least this amount",
		position = 0
	)
	default int valueThreshold()
	{
		return 100_000;
	}

	@ConfigItem(
		keyName = "filterType",
		name = "Item Filter Method",
		description = "<html>Controls how the list of items should be treated<br/>" +
			"<br/>Off: No item filtering" +
			"<br/>Whitelist: If the other player's trade contains any item NOT in the list it will be considered unbalanced (excluding coins/plat tokens)" +
			"<br/>Blacklist: If any of the listed items are in the other player's trade then it will be considered it unbalanced" +
			"</html>",
		position = 1
	)
	default ItemFilterType filterType()
	{
		return ItemFilterType.WHITELIST;
	}

	@ConfigItem(
		keyName = "itemList",
		name = "Item List",
		description = "<html>The list of items that are used for the `Item Filter Method` config option<br/>" +
			"<br/>Format: (item),(item)" +
			"<br/>Supports wildcards: (item*)/(*item) only, (it*em) does not work" +
			"</html>",
		position = 2
	)
	default String itemList()
	{
		return "";
	}

	@ConfigItem(
		keyName = "friendsList",
		name = "Whitelisted Friends",
		description = "<html>The list of usernames that will be ignored for this plugin, allowing you to always trade them even if the trade would otherwise be unbalanced<br/>" +
			"<br/>A right-click option has been added to each friend in your friends list to easily add or remove them from this list" +
			"<br/>Format: (username),(username)" +
			"</html>",
		position = 3
	)
	default String friendsList()
	{
		return "";
	}

	@ConfigItem(
		keyName = "friendsList",
		name = "",
		description = ""
	)
	void setFriendsList(String key);
}

/*
 * Copyright (c) 2024, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.unbalancedtradeprevention;

import com.google.common.annotations.VisibleForTesting;
import com.google.inject.Provides;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.api.events.PostMenuSort;
import net.runelite.api.events.WidgetClosed;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetUtil;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.Text;
import net.runelite.client.util.WildcardMatcher;

@Slf4j
@PluginDescriptor(
	name = "Unbalanced Trade Prevention"
)
public class UnbalancedTradePreventionPlugin extends Plugin
{
	private static final int TRADE_WINDOW_OPPONENT_ITEMS_CHILD_ID = 29;
	@VisibleForTesting
	public static final int TRADE_WINDOW_SECOND_SCREEN_INTERFACE_ID = 334;
	@VisibleForTesting
	static final int TRADE_WINDOW_SELF_VALUE_TEXT_CHILD_ID = 23;
	@VisibleForTesting
	static final int TRADE_WINDOW_OPPONENT_VALUE_TEXT_CHILD_ID = 24;
	private static final int TRADE_WINDOW_OPPONENT_NAME_CHILD_ID = 30;

	private static final Pattern SELF_VALUE_PATTERN = Pattern.compile("You are about to give:\\(Value: ([\\d,]* coins|Lots!)\\)");
	private static final Pattern OPPONENT_VALUE_PATTERN = Pattern.compile("In return you will receive:\\(Value: ([\\d,]* coins|Lots!)\\)");
	private static final NumberFormat VALUE_FORMAT = NumberFormat.getNumberInstance(java.util.Locale.UK);

	private static final String UNBALANCED_TRADE_CHAT_MESSAGE = "<col=ff0000>Unbalanced trade detected! The accept trade option has been set to right-click only.</col>";
	private static final String WHITELISTED_TRADE_CHAT_MESSAGE = "<col=ff0000>A non-whitelisted item was found in the opponents trade window</col>";
	private static final String BLACKLISTED_TRADE_CHAT_MESSAGE = "<col=ff0000>A blacklisted item was found in the opponents trade window</col>";
	private static final String FRIEND_WHITELISTED_MESSAGE = "<col=009900>You're trading a whitelisted friend, unbalanced trade detection is disabled</col>";

	private static final String ADD_FRIEND_WHITELIST = "Whitelist";
	private static final String REMOVE_FRIEND_WHITELIST = "Revoke Whitelist";

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@VisibleForTesting
	@Inject
	UnbalancedTradePreventionConfig config;

	@Provides
	UnbalancedTradePreventionConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(UnbalancedTradePreventionConfig.class);
	}

	private boolean unbalancedTradeDetected = false;
	@Getter
	private final Set<String> filterItemNames = new HashSet<>();
	@Getter
	private final Collection<String> filterWildcardNames = new ArrayList<>();
	@Getter
	private final Set<String> friends = new HashSet<>();

	@Override
	protected void startUp()
	{
		updateFilters();

		if (!client.getGameState().equals(GameState.LOGGED_IN))
		{
			return;
		}

		checkTradeWindow();
	}

	@Override
	protected void shutDown()
	{
		unbalancedTradeDetected = false;
		filterItemNames.clear();
		filterWildcardNames.clear();
		friends.clear();
	}

	private int parseStringForValue(String text, Pattern p)
	{
		Matcher m = p.matcher(Text.removeTags(text));
		if (!m.matches())
		{
			return -1;
		}

		String matchedText = m.group(1);
		if (matchedText.equals("Lots!"))
		{
			return Integer.MAX_VALUE;
		}

		matchedText = matchedText.replace(" coins", "");

		try
		{
			return VALUE_FORMAT.parse(matchedText).intValue();
		}
		catch (ParseException e)
		{
			return -1;
		}
	}

	String getTextByWidget(int groupId, int childId)
	{
		Widget w = client.getWidget(groupId, childId);
		if (w == null)
		{
			return null;
		}

		return w.getText();
	}

	public int getTradeWindowDeltaFromChildWidget(int childId, Pattern pattern)
	{
		String selfValueText = getTextByWidget(TRADE_WINDOW_SECOND_SCREEN_INTERFACE_ID, childId);

		if (selfValueText == null)
		{
			return -1;
		}

		return parseStringForValue(selfValueText, pattern);
	}

	/**
	 * Calculates the difference between your trade value and your opponents trade value
	 *
	 * @return the difference between your trades. Returns `Integer.MAX_VALUE` if it can not find the values or if your value is `Lots!`
	 */
	@VisibleForTesting
	int getTradeWindowDelta()
	{
		int selfValue = getTradeWindowDeltaFromChildWidget(TRADE_WINDOW_SELF_VALUE_TEXT_CHILD_ID, SELF_VALUE_PATTERN);
		int opponentValue = getTradeWindowDeltaFromChildWidget(TRADE_WINDOW_OPPONENT_VALUE_TEXT_CHILD_ID, OPPONENT_VALUE_PATTERN);

		// If there was an error getting our own value, or it equals "Lots!" (or max cash), assume the trade is in their favor
		// If there was an error getting the opponents value also assume it's in their favor
		if (selfValue == -1 || selfValue == Integer.MAX_VALUE || opponentValue == -1)
		{
			return Integer.MAX_VALUE;
		}

		return selfValue - opponentValue;
	}

	@VisibleForTesting
	Set<String> getOpponentItemNames()
	{
		final Widget opponentItemContainer = client.getWidget(TRADE_WINDOW_SECOND_SCREEN_INTERFACE_ID, TRADE_WINDOW_OPPONENT_ITEMS_CHILD_ID);
		if (opponentItemContainer == null)
		{
			return null;
		}

		final Set<String> set = new HashSet<>();
		for (final Widget itemWidget : opponentItemContainer.getDynamicChildren())
		{
			// If there are multiple of the same item then there will be a white `x`
			// This seems to be the only time there will be a color tag inside these widgets
			final String name = itemWidget.getText().split("<col")[0].trim().toLowerCase();
			set.add(name);

			// TODO: Allow setting/removing items from whitelist/blacklist from trade interface?
		}

		return set;
	}

	private String getTradePartnersName()
	{
		final String text = getTextByWidget(TRADE_WINDOW_SECOND_SCREEN_INTERFACE_ID, TRADE_WINDOW_OPPONENT_NAME_CHILD_ID);
		if (text == null)
		{
			return null;
		}

		return Text.removeTags(text).replace("Trading with:", "").toLowerCase().trim();
	}

	private void checkTradeWindow()
	{
		if (client.getWidget(TRADE_WINDOW_SECOND_SCREEN_INTERFACE_ID, TRADE_WINDOW_SELF_VALUE_TEXT_CHILD_ID) == null)
		{
			unbalancedTradeDetected = false; // Ensure it's false if the widget can't be found
			return;
		}

		// A trade where you're not giving anything away should always be balanced
		final int selfValue = getTradeWindowDeltaFromChildWidget(TRADE_WINDOW_SELF_VALUE_TEXT_CHILD_ID, SELF_VALUE_PATTERN);
		if (selfValue == 0)
		{
			return;
		}

		// Friends are always allowed to trade us
		final String opponentName = getTradePartnersName();
		if (getFriends().contains(opponentName))
		{
			sendChatMessage(FRIEND_WHITELISTED_MESSAGE);
			unbalancedTradeDetected = false; // Reset to false in case they whitelisted during a trade
			return;
		}

		if (unbalancedTradeByItemFilters())
		{
			unbalancedTradeDetected = true;
			sendChatMessage(true);
			return;
		}

		int delta = getTradeWindowDelta();
		unbalancedTradeDetected = delta >= config.valueThreshold();
		if (unbalancedTradeDetected)
		{
			sendChatMessage(false);
		}
	}

	@VisibleForTesting
	boolean unbalancedTradeByItemFilters()
	{
		if (!ItemFilterType.OFF.equals(config.filterType()))
		{
			final Set<String> itemNames = getOpponentItemNames();
			// If there was some issue getting their items the trade should be unbalanced
			if (itemNames == null)
			{
				return true;
			}

			// Coins and Platinum tokens are always acceptable, so just assume they aren't in the opponents list
			itemNames.remove("coins");
			itemNames.remove("platinum token");
			itemNames.remove("absolutely nothing!");

			if (itemNames.isEmpty())
			{
				return false;
			}

			final Set<String> currentFilterItemNames = getFilterItemNames();
			final Collection<String> matchingNames = itemNames.stream()
				.filter(currentFilterItemNames::contains)
				.collect(Collectors.toList());

			final boolean isBlacklist = ItemFilterType.BLACKLIST.equals(config.filterType());
			if (isBlacklist && !matchingNames.isEmpty())
			{
				return true;
			}

			// If we're whitelisting we may have matched some directly but not all
			// The rest could be matched via wildcards
			matchingNames.forEach(itemNames::remove);

			// Check each wildcard filter
			for (final String wildcard : getFilterWildcardNames())
			{
				final Collection<String> wildcardMatchingNames = itemNames.stream()
					.filter(s -> WildcardMatcher.matches(wildcard, s))
					.collect(Collectors.toList());

				// If it matches and we're blacklisting return early
				if (isBlacklist && !wildcardMatchingNames.isEmpty())
				{
					return true;
				}

				wildcardMatchingNames.forEach(itemNames::remove);
				if (itemNames.isEmpty())
				{
					break;
				}
			}


			// If we weren't able to match all the names and we're whitelisting
			return !isBlacklist && !itemNames.isEmpty();
		}

		return false;
	}

	private void sendChatMessage(boolean byFilter)
	{
		sendChatMessage(UNBALANCED_TRADE_CHAT_MESSAGE);
		if (byFilter)
		{
			switch (config.filterType())
			{
				case WHITELIST:
					sendChatMessage(WHITELISTED_TRADE_CHAT_MESSAGE);
					return;
				case BLACKLIST:
					sendChatMessage(BLACKLISTED_TRADE_CHAT_MESSAGE);
			}
		}
	}

	private void sendChatMessage(String message)
	{
		if (!client.isClientThread())
		{
			clientThread.invoke(() -> sendChatMessage(message));
			return;
		}

		client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", message, null);
	}

	@Subscribe
	public void onWidgetLoaded(WidgetLoaded event)
	{
		if (event.getGroupId() != TRADE_WINDOW_SECOND_SCREEN_INTERFACE_ID)
		{
			return;
		}

		checkTradeWindow();
	}

	@Subscribe
	public void onWidgetClosed(WidgetClosed event)
	{
		if (event.getGroupId() == TRADE_WINDOW_SECOND_SCREEN_INTERFACE_ID)
		{
			unbalancedTradeDetected = false;
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (!event.getGroup().equals(UnbalancedTradePreventionConfig.GROUP_NAME))
		{
			return;
		}

		updateFilters();
		checkTradeWindow();
	}

	private void updateFilters()
	{
		filterItemNames.clear();
		filterWildcardNames.clear();

		final Map<Boolean, List<String>> items = Arrays.stream(config.itemList().split(","))
			.map(s -> s.trim().toLowerCase())
			.collect(Collectors.partitioningBy(s -> s.contains("*")));

		filterItemNames.addAll(items.get(false));
		filterWildcardNames.addAll(items.get(true));

		friends.clear();
		friends.addAll(Arrays.stream(config.friendsList().split(","))
			.map(s -> s.trim().toLowerCase())
			.collect(Collectors.toList()));
	}

	@Subscribe
	public void onPostMenuSort(PostMenuSort postMenuSort)
	{
		// The menu is not rebuilt when it is open so no need to swap
		if (!unbalancedTradeDetected || client.isMenuOpen())
		{
			return;
		}

		MenuEntry[] menuEntries = client.getMenu().getMenuEntries();
		for (int i = 0; i < menuEntries.length; i++)
		{
			MenuEntry entry = menuEntries[i];
			String option = Text.removeTags(entry.getOption()).toLowerCase();
			if (option.equals("accept"))
			{
				// the `cancel` option should always exist so there should always be at least 2 entries in this array
				assert menuEntries.length > 1;

				// swap to the bottom of the list to prevent it from being the left-click option
				simpleSwap(menuEntries, i, 0);
				break;
			}
		}
	}


	@Subscribe
	public void onMenuEntryAdded(MenuEntryAdded event)
	{
		final int groupId = WidgetUtil.componentToInterface(event.getActionParam1());

		if (!(groupId == InterfaceID.FRIEND_LIST && event.getOption().equals("Message")))
		{
			return;
		}

		final String friend = Text.toJagexName(Text.removeTags(event.getTarget()));

		client.getMenu().createMenuEntry(-2)
			.setOption(friends.contains(friend.toLowerCase()) ? REMOVE_FRIEND_WHITELIST : ADD_FRIEND_WHITELIST)
			.setType(MenuAction.RUNELITE)
			.setTarget(event.getTarget())
			.onClick(e ->
			{
				final String sanitizedFriend = Text.toJagexName(Text.removeTags(event.getTarget()));

				// Remove friend from list
				if (friends.contains(sanitizedFriend.toLowerCase()))
				{
					List<String> friends = Arrays.stream(config.friendsList().split(","))
						.filter(s -> !s.isEmpty() && !s.equalsIgnoreCase(sanitizedFriend))
						.collect(Collectors.toList());
					config.setFriendsList(String.join(",", friends));
					return;
				}

				// Add friend to list
				config.setFriendsList(config.friendsList().isEmpty() ? sanitizedFriend : String.format("%s,%s", config.friendsList(), sanitizedFriend));
			});
	}

	private void simpleSwap(MenuEntry[] entries, int index1, int index2)
	{
		MenuEntry entry1 = entries[index1],
			entry2 = entries[index2];

		entries[index1] = entry2;
		entries[index2] = entry1;

		client.getMenu().setMenuEntries(entries);
	}
}

