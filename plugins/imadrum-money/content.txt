package com.imadrummoney;

import com.google.inject.Provides;

import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.SoundEffectPlayed;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.NpcLootReceived;
import net.runelite.client.events.PlayerLootReceived;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.ItemStack;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.loottracker.LootReceived;
import net.runelite.http.api.loottracker.LootRecordType;

import java.util.*;

@Slf4j
@PluginDescriptor(
        name = "ImaDrum Money",
        description = "Plays a sound clip by ImaDrum whenever you receive a good drop"
)
public class ImadrumMoneyPlugin extends Plugin {
    @Inject
    private ImadrumMoneyConfig config;

    @Inject
    private ItemManager itemManager;

    @Inject
    private SoundclipManager soundclipManager;

    @Inject
    Client client;

    // Pet Drops
    private static final String FOLLOW_PET = "You have a funny feeling like you're being followed";
    private static final String INVENTORY_PET = "You feel something weird sneaking into your backpack";
    private static final String DUPE_PET = "You have a funny feeling like you would have been followed";
    private static final String SUPERIOR = "A superior foe has appeared...";
    private static final String DEATH = "Oh dear, you are dead!";

    private static final ArrayList<String> BARROWS_ITEMS = new ArrayList<>(Arrays.asList("Ahrim's", "Karil's", "Guthan's", "Dharok's", "Verac's", "Torag's"));


    @Subscribe
    public void onPlayerLootReceived(PlayerLootReceived playerLootReceived) {
        handleReceivedLoot(playerLootReceived.getItems(), playerLootReceived.getPlayer().getName());
    }

    @Subscribe
    public void onLootReceived(LootReceived lootReceived) {
        if (lootReceived.getType() != LootRecordType.EVENT && lootReceived.getType() != LootRecordType.PICKPOCKET && lootReceived.getType() != LootRecordType.NPC) {
            return;
        }
        handleReceivedLoot(lootReceived.getItems(), lootReceived.getName());
    }

    @Subscribe
    public void onChatMessage(ChatMessage chatmessage) {

        if (chatmessage.getType() != ChatMessageType.GAMEMESSAGE) {
            return;
        }

        String message = chatmessage.getMessage();

        if ((message.contains(FOLLOW_PET) || message.contains(INVENTORY_PET)) && config.receivePetNotif()) {
            new Thread(() -> {
                soundclipManager.playClip(soundclipManager.getNewPetSound());
            }).start();
        } else if (message.contains(DUPE_PET) && config.receivePetNotif()) {
            new Thread(() -> {
                soundclipManager.playClip(soundclipManager.getDupePetSound());
            }).start();
        } else if (message.contains(SUPERIOR) && config.receiveSuperiorSoundNotif()) {
            new Thread(() -> {
                soundclipManager.playClip(soundclipManager.getSuperiorSound());
            }).start();
        } else if (message.contains(DEATH) && config.receiveDeathSoundNotif()) {
            new Thread(() -> {
                soundclipManager.playClip(soundclipManager.getDeathSound());
            }).start();
        }
    }

    @Subscribe
    public void onSoundEffectPlayed(SoundEffectPlayed event) {
        if (!config.replaceRubySpecSound())
            return;


        if (event.getSoundId() == 2911) {
            if (isFightingAdamantDragon())
                return;

            event.consume();

            soundclipManager.playClip(soundclipManager.getRubySpecSound());
        }
    }

    private boolean isFightingAdamantDragon(){
        return Objects.requireNonNull(client.getLocalPlayer().getInteracting().getName()).equalsIgnoreCase("Adamant dragon");
    }

    private void handleReceivedLoot(Collection<ItemStack> items, String name) {
        if (name != null && name.equals("Barrows")
                && !containsBarrowsItem(items)
                && config.receiveBarrowsSadnessNotif()) {

            new Thread(() -> {
                soundclipManager.playClip(soundclipManager.getRandomSadSoundClip());
            }).start();
            return;
        }

        for (ItemStack stack : items) {
            int value = itemManager.getItemPrice(stack.getId()) * stack.getQuantity();

            if (value >= config.minValue() && config.receiveLootNotif()) {
                new Thread(() -> {
                    soundclipManager.playClip(soundclipManager.getRandomSoundclip());
                }).start();
                return;
            }

            if (isClueScroll(stack.getId()) && config.receiveClueNotif()) {
                new Thread(() -> {
                    soundclipManager.playClip(soundclipManager.getClueSound());
                }).start();
                return;
            }

        }
    }

    private Boolean isClueScroll(Integer ID) {
        ItemComposition itemComposition = itemManager.getItemComposition(ID);

        return itemComposition.getName().toLowerCase(Locale.ROOT).contains("clue scroll") || itemComposition.getName().toLowerCase(Locale.ROOT).contains("scroll box");
    }

    private Boolean containsBarrowsItem(Collection<ItemStack> items) {
        for (ItemStack item : items) {
            ItemComposition comp = itemManager.getItemComposition(item.getId());
            for (String barrowsName : BARROWS_ITEMS) {
                if (comp.getName().contains(barrowsName)) {
                    return true;
                }
            }
        }
        return false;
    }

    @Provides
    ImadrumMoneyConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(ImadrumMoneyConfig.class);
    }
}

package com.imadrummoney;

import lombok.extern.slf4j.Slf4j;

import javax.inject.Inject;
import javax.inject.Singleton;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import java.io.*;
import java.util.concurrent.ThreadLocalRandom;
import net.runelite.client.audio.*;

@Singleton
@Slf4j
public class SoundclipManager {

    public enum Sound {
        SOUND1("/imadrumMoney1.wav"),
        SOUND2("/imadrumMoney2.wav"),
        SOUND3("/imadrumMoney3.wav"),
        SOUND4("/imadrumMoney4.wav"),
        SOUND5("/imadrumMoney5.wav"),
        SOUND6("/imadrumMoney6.wav"),
        SOUND7("/imadrumMoney7.wav"),
        SOUND8("/imadrumMoney8.wav"),
        SOUND9("/imadrumMoney9.wav"),
        NEWPET("/newPetDrop.wav"),
        DUPEPET("/dupePetDrop.wav"),
        CLUEDROP("/clueScrollDrop.wav"),
        NOTHING("/nothing.wav"),
        SADNESS("/sadness.wav"),
        RUBYSPEC("/alotofdamage.wav"),
        RUBYSPEC2("/REEE.wav"),
        SUPERIOR("/bigboi.wav"),
        DEATH("/pleae.wav");
        private final String fileName;

        Sound(String filename) {
            fileName = filename;
        }

        String getFileName() {
            return fileName;
        }
    }

    @Inject
    private ImadrumMoneyConfig config;

    @Inject
    private AudioPlayer audioPlayer;


    public void playClip(Sound sound) {
        try {
            float gain = 20f * (float)Math.log(config.soundVolume() / 100f);
            audioPlayer.play(SoundclipManager.class, sound.getFileName(), gain);
        }catch (IOException | UnsupportedAudioFileException | LineUnavailableException e){
            log.error("Cannot play clip - " + e.getMessage());
        }
    }

    public Sound getRandomSoundclip() {
        int randomClipNr = ThreadLocalRandom.current().nextInt(10);

        switch (randomClipNr) {
            case 1:
                return Sound.SOUND2;
            case 2:
                return Sound.SOUND3;
            case 3:
                return Sound.SOUND4;
            case 4:
                return Sound.SOUND5;
            case 5:
                return Sound.SOUND6;
            case 6:
                return Sound.SOUND7;
            case 7:
                return Sound.SOUND8;
            case 8:
                return Sound.SOUND9;
            default:
                return Sound.SOUND1;
        }
    }

    public Sound getRandomSadSoundClip() {
        if (ThreadLocalRandom.current().nextInt(5) == 0) {
            return Sound.SADNESS;
        }
        return Sound.NOTHING;
    }

    public Sound getClueSound() {
        return Sound.CLUEDROP;
    }

    public Sound getNewPetSound() {
        return Sound.NEWPET;
    }

    public Sound getDupePetSound() {
        return Sound.DUPEPET;
    }

    public Sound getRubySpecSound() {
        if (ThreadLocalRandom.current().nextInt(50) == 0)
            return Sound.RUBYSPEC2;
        else
            return Sound.RUBYSPEC;
    }

    public Sound getDeathSound() {
        return Sound.DEATH;
    }

    public Sound getSuperiorSound() {
        return Sound.SUPERIOR;
    }

}

package com.imadrummoney;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("ImaDrum Money")
public interface ImadrumMoneyConfig extends Config
{
	@ConfigSection(
			name = "Situations",
			description = "In which situation would you like to play a soundclip?",
			position = 1
	)
	String situationSettings = "situations";

	@ConfigSection(
			name = "Functional",
			description = "Change functional settings of the plugin",
			position = 0
	)
	String functionalSettings = "functionalSettings";


	@ConfigItem(
			keyName = "value",
			name = "Minimum value",
			description = "Minimum value at which to play the sound",
			section = functionalSettings
	)
	default int minValue() {
		return 500000;
	}

	@ConfigItem(
			keyName = "soundVolume",
			name = "Sound volume",
			description = "Adjust the volume of the soundclip",
			position = 2,
			section = functionalSettings
	)
	default int soundVolume() {
		return 75;
	}

	@ConfigItem(
			keyName = "lootNotif",
			name = "Receive loot notifications",
			description = "Receive sound notifications for loot",
			section = situationSettings
	)
	default boolean receiveLootNotif() { return true; }

	@ConfigItem(
			keyName = "petNotif",
			name = "Receive pet notifications",
			description = "Receive sound notifications for pet drops",
			section = situationSettings
	)
	default boolean receivePetNotif() { return true; }

	@ConfigItem(
			keyName = "clueNotif",
			name = "Receive clue notifications",
			description = "Receive sound notifications for clue scrolls",
			section = situationSettings
	)
	default boolean receiveClueNotif() { return true; }

	@ConfigItem(
			keyName = "barrowsSadness",
			name = "Receive no-Barrows item notifications",
			description = "Receive sound notifications when you don't get a Barrows drop",
			section = situationSettings
	)
	default boolean receiveBarrowsSadnessNotif() {return true;}

	@ConfigItem(
			keyName = "REEEplacement",
			name = "Replace Ruby Bolts spec sound",
			description = "Replace the sound of Ruby Bolts special effect",
			section = situationSettings
	)
	default boolean replaceRubySpecSound() {return true;}

	@ConfigItem(
			keyName = "pleae",
			name = "Play death sound effect",
			description = "Receive sound notifications when you die",
			section = situationSettings
	)
	default boolean receiveDeathSoundNotif() { return true; }

	@ConfigItem(
			keyName = "Superior",
			name = "Receive Superior spawn notifications",
			description = "Receive sound notifications for Superior creature spawns",
			section = situationSettings
	)
	default boolean receiveSuperiorSoundNotif() { return true; }
}

package com.imadrummoney;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ImadrumMoneyPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ImadrumMoneyPlugin.class);
		RuneLite.main(args);
	}
}
