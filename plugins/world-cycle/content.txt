package com.example;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class WorldCyclePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(WorldCyclePlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2022, Jamal <http://github.com/1Defence>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.example;

import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.materialtabs.MaterialTabGroup;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.AbstractDocument;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class WorldCyclePanel extends PluginPanel
{
    private final MaterialTabGroup tabGroup;
    final UICycleInputArea uiInput = new UICycleInputArea();

    private Timer configUpdateTimer;
    private Timer worldSetChangeTimer;


    ConfigManager configManager;
    WorldCyclePlugin plugin;
    public boolean pendingRequest = false;

    WorldCyclePanel(Client client, ConfigManager configManager, WorldCyclePlugin plugin)
    {
        super();
        this.configManager = configManager;
        this.plugin = plugin;
        getScrollPane().setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);


        setBorder(new EmptyBorder(10, 10, 10, 10));
        setLayout(new GridBagLayout());

        GridBagConstraints c = new GridBagConstraints();
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 1;
        c.gridx = 0;
        c.gridy = 0;

        tabGroup = new MaterialTabGroup();
        tabGroup.setLayout(new GridLayout(0, 6, 7, 7));


        uiInput.setBorder(new EmptyBorder(15, 0, 15, 0));
        uiInput.setBackground(ColorScheme.DARK_GRAY_COLOR);


        SetFromConfig();

        AbstractDocument worldSetDoc = ((AbstractDocument)(uiInput.getUiFieldWorldSet().getDocument()));
        worldSetDoc.setDocumentFilter(new WorldSetDocumentFilter());
        worldSetDoc.addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
            }
            public void removeUpdate(DocumentEvent e) {
                if(pendingRequest){//gets set to false on the insert, as it removes then inserts.
                    //System.out.println("Pending request.. wont call remove");
                }else {
                    RequestChangeWorldSet();
                }
                RequestConfigUpdate();
            }
            public void insertUpdate(DocumentEvent e) {
                if(pendingRequest){
                    pendingRequest = false;
                    //System.out.println("Pending request.. wont call insert");
                }else {
                    RequestChangeWorldSet();
                }
                RequestConfigUpdate();
            }});

        add(tabGroup, c);
        c.gridy++;

        add(uiInput, c);
        c.gridy++;
    }

    private void RequestChangeWorldSet(){

        if(worldSetChangeTimer != null){
            worldSetChangeTimer.restart();
            return;
        }

        ActionListener actionListener = new ActionListener() {

            public void actionPerformed(ActionEvent actionEvent) {
                ChangeWorldSet();
            }
        };
        worldSetChangeTimer = new Timer(600, actionListener);
        worldSetChangeTimer.setRepeats(false);
        worldSetChangeTimer.start();
    }

    public void ChangeWorldSet(){
        plugin.ChangeWorldSet(uiInput.getWorldSetInput(),false);
    }

    private void RequestConfigUpdate(){

        if(configUpdateTimer != null){
            configUpdateTimer.restart();
            return;
        }

        ActionListener actionListener = new ActionListener() {

            public void actionPerformed(ActionEvent actionEvent) {
                UpdateConfig();
            }
        };
        configUpdateTimer = new Timer(2000, actionListener);
        configUpdateTimer.setRepeats(false);
        configUpdateTimer.start();

    }

    private void UpdateConfig(){

        if(uiInput.getWorldSetInput().isEmpty()){
            configManager.unsetConfiguration(WorldCycleConfig.GROUP, WorldCycleConfig.CONFIG_WORLDSET);
        }else{
            configManager.setConfiguration(WorldCycleConfig.GROUP, WorldCycleConfig.CONFIG_WORLDSET,uiInput.getWorldSetInput());
        }

        configUpdateTimer = null;
    }

    public void SetFromConfig(){

        if(configManager == null){
            return;
        }

        String worldSet = configManager.getConfiguration(WorldCycleConfig.GROUP, WorldCycleConfig.CONFIG_WORLDSET);
        if(worldSet != null){
            uiInput.setWorldSetInput(configManager.getConfiguration(WorldCycleConfig.GROUP, WorldCycleConfig.CONFIG_WORLDSET));
            SwingUtilities.invokeLater(()->plugin.CacheNearbyWorlds());
        }

    }




}

/*
 * Copyright (c) 2022, Jamal <http://github.com/1Defence>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.example;

import java.awt.Color;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Keybind;
import net.runelite.client.config.Range;

@ConfigGroup(WorldCycleConfig.GROUP)
public interface WorldCycleConfig extends Config
{
	String GROUP = "worldcycle";
	String CONFIG_WORLDSET = "worldset";

	@ConfigSection(name="Panel Overlay", description="Optional panel displaying the neighboring worlds in your cycle.", position=20, closedByDefault=true)
	String panelOverlay = "panelOverlay";

	@ConfigItem(
		keyName = "previousKey",
		name = "Quick-hop previous",
		description = "When you press this key you'll hop to the previous world",
		position = 0
	)
	default Keybind previousKey()
	{
		return new Keybind(KeyEvent.VK_LEFT, InputEvent.CTRL_DOWN_MASK | InputEvent.SHIFT_DOWN_MASK);
	}

	@ConfigItem(
		keyName = "nextKey",
		name = "Quick-hop next",
		description = "When you press this key you'll hop to the next world",
		position = 1
	)
	default Keybind nextKey()
	{
		return new Keybind(KeyEvent.VK_RIGHT, InputEvent.CTRL_DOWN_MASK | InputEvent.SHIFT_DOWN_MASK);
	}

	@ConfigItem(
		keyName = "showMessage",
		name = "Show world hop message in chat",
		description = "Shows what world is being hopped to in the chat",
		position = 2
	)
	default boolean showWorldHopMessage()
	{
		return true;
	}

	@ConfigItem(
			keyName = "acceptPartyCycle",
			name = "Accept Party Cycle",
			description = "Accept changes to the world cycle made by party members, PVP/HIGH RISK ARE OMITTED",
			position = 3
	)
	default boolean acceptPartyCycle()
	{
		return false;
	}

	@Alpha
	@ConfigItem(
			keyName = "worldPanelColor",
			name = "World Panel Color",
			description = "world panel color",
			position = 4,
			section = panelOverlay
	)
	default Color worldPanelColor()
	{
		return new Color(0,0,0,100);
	}

	@Range(max=16, min=10)
	@ConfigItem(
			position=5,
			keyName="fontSize",
			name="Font Size",
			description="font size",
			section = panelOverlay
	)
	default int fontSize() {
		return 12;
	}

	@ConfigItem(
			keyName = "boldFont",
			name = "Bold Font",
			description = "Configures whether font is bold or not",
			position = 6,
			section = panelOverlay
	)
	default boolean boldFont()
	{
		return true;
	}

	@ConfigItem(
			keyName = "displayPreviousWorld",
			name = "Display Previous World",
			description = "Display the upcoming world you'll hop to using the [Quick-hop previous] Hotkey.",
			position = 7,
			section = panelOverlay
	)
	default boolean displayPreviousWorld()
	{
		return false;
	}

	@ConfigItem(
			keyName = "previousWorldColor",
			name = "Previous World Color",
			description = "Text color of the previous world in cycle",
			position = 8,
			section = panelOverlay
	)
	default Color previousWorldColor()
	{
		return Color.WHITE;
	}

	@ConfigItem(
			keyName = "displayCurrentWorld",
			name = "Display Current World",
			description = "Display the current world you're on, regardless of it being in cycle.",
			position = 9,
			section = panelOverlay
	)
	default boolean displayCurrentWorld()
	{
		return false;
	}

	@ConfigItem(
			keyName = "currentWorldColor",
			name = "Current World Color",
			description = "Text color of your current world.",
			position = 10,
			section = panelOverlay
	)
	default Color currentWorldColor()
	{
		return Color.GREEN;
	}

	@ConfigItem(
			keyName = "displayNextWorld",
			name = "Display Next World",
			description = "Display the upcoming world you'll hop to using the [Quick-hop next] Hotkey.",
			position = 11,
			section = panelOverlay
	)
	default boolean displayNextWorld()
	{
		return false;
	}

	@ConfigItem(
			keyName = "nextWorldColor",
			name = "Next World Color",
			description = "Text color of the next world in cycle",
			position = 12,
			section = panelOverlay
	)
	default Color nextWorldColor()
	{
		return Color.WHITE;
	}

}

package com.example;

import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.components.ComponentOrientation;
import net.runelite.client.ui.overlay.components.TitleComponent;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;

import javax.inject.Inject;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Font;
import java.awt.Color;

public class WorldCycleOverlay extends OverlayPanel {
    private final WorldCyclePlugin plugin;

    @Inject
    private WorldCycleOverlay(WorldCyclePlugin plugin) {
        this.plugin = plugin;
        setPriority(OverlayPriority.HIGH);
        setPosition(OverlayPosition.TOP_RIGHT);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        BuildComponent(plugin.configDisplayPreviousWorld && plugin.previousWorldId != -1,
                plugin.previousWorldId,
                plugin.configPreviousWorldColor);

        BuildComponent(plugin.configDisplayCurrentWorld,
                plugin.currentWorldId,
                plugin.configCurrentWorldColor);

        BuildComponent(plugin.configDisplayNextWorld && plugin.nextWorldId != -1,
                plugin.nextWorldId,
                plugin.configNextWorldColor);

        panelComponent.setBackgroundColor(plugin.configWorldPanelColor);
        panelComponent.setOrientation(ComponentOrientation.VERTICAL);
        panelComponent.setBorder(new Rectangle(0,0,0,9));

        graphics.setFont(new Font(FontManager.getRunescapeFont().toString(), plugin.configBoldFont ? Font.BOLD : Font.PLAIN, plugin.configFontSize));

        return super.render(graphics);
    }

    public void BuildComponent(boolean qualifier, int worldId, Color color){
        if(!qualifier)
            return;
        panelComponent.getChildren().add(TitleComponent.builder()
                .text(String.valueOf(worldId))
                .color(color)
                .build());
    }

}
/*
 * Copyright (c) 2022, Jamal <http://github.com/1Defence>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.example;

import lombok.EqualsAndHashCode;
import lombok.Value;
import net.runelite.client.party.messages.PartyMemberMessage;

@Value
@EqualsAndHashCode(callSuper = true)
public class WorldCycleUpdate extends PartyMemberMessage
{
    public WorldCycleUpdate(String worldSet){
        this.worldSet = worldSet;
    }
    private String worldSet;
}
package com.example;

import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;

class WorldSetDocumentFilter extends DocumentFilter
{
    @Override
    public void insertString(FilterBypass fb, int offset, String string, AttributeSet attr) throws BadLocationException
    {
        if (isValid(string)) {
            super.insertString(fb, offset, string, attr);
        }
    }

    @Override
    public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException
    {
        if (isValid(text))
        {
            super.replace(fb, offset, length, text, attrs);
        }
    }

    private boolean isValid(String text)
    {
        return text.matches("[\\d,]*");
    }
}
/*
 * Copyright (c) 2022, Jamal <http://github.com/1Defence>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.example;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import lombok.Getter;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.components.FlatTextField;

@Getter
class UICycleInputArea extends JPanel
{
    private final JTextField uiFieldWorldSet;
    private final String WORLD_SET_LABEL_TEXT = "World Set";
    private final String TOOL_TIP_TEXT = "<html>List of worlds to cycle through separated by commas<br>Example usage: 302,303,304</html>";

    UICycleInputArea()
    {
        setLayout(new GridLayout(2, 2, 7, 7));
        uiFieldWorldSet = CreateComponent();
    }

    String getWorldSetInput()
    {
        return getInput(uiFieldWorldSet);
    }

    public void setWorldSetInput(String value)
    {
        setInput(uiFieldWorldSet, value);
    }

    private String getInput(JTextField field)
    {
        return field.getText();
    }

    private void setInput(JTextField field, String value)
    {
        field.setText(value);
    }

    private JTextField CreateComponent()
    {
        final JPanel container = new JPanel();
        container.setLayout(new BorderLayout());

        final JLabel uiLabel = new JLabel(WORLD_SET_LABEL_TEXT);
        final FlatTextField uiInput = new FlatTextField();

        uiInput.setToolTipText(TOOL_TIP_TEXT);
        uiInput.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        uiInput.setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
        uiInput.setBorder(new EmptyBorder(5, 7, 5, 7));

        uiLabel.setToolTipText(TOOL_TIP_TEXT);
        uiLabel.setFont(FontManager.getRunescapeBoldFont());
        uiLabel.setBorder(new EmptyBorder(0, 0, 4, 0));
        uiLabel.setForeground(Color.WHITE);

        container.add(uiLabel, BorderLayout.NORTH);
        container.add(uiInput, BorderLayout.CENTER);

        add(container);

        return uiInput.getTextField();
    }

}

/*
 * Copyright (c) 2022, Jamal <http://github.com/1Defence>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.example;

import com.google.inject.Provides;
import java.awt.image.BufferedImage;
import java.util.*;
import javax.inject.Inject;
import java.awt.Color;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.widgets.ComponentID;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.WorldService;
import net.runelite.client.input.KeyManager;
import net.runelite.client.party.PartyMember;
import net.runelite.client.party.PartyService;
import net.runelite.client.party.WSClient;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.ClientUI;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.*;
import net.runelite.http.api.worlds.World;
import net.runelite.http.api.worlds.WorldResult;
import net.runelite.http.api.worlds.WorldType;

@PluginDescriptor(
	name = "World Cycle",
	description = "Lighter, custom version of world hopper used to hop between a set of worlds circularly",
	tags = {"switcher","cycle","world hopper"}
)
@Slf4j
public class WorldCyclePlugin extends Plugin
{
	private static final int MAX_PLAYER_COUNT = 1950;

	private static final int DISPLAY_SWITCHER_MAX_ATTEMPTS = 3;


	@Inject
	private Client client;

	@Inject
	private ClientUI clientUI;

	@Inject
	private ClientThread clientThread;

	@Inject
	private ConfigManager configManager;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	private KeyManager keyManager;

	@Inject
	private ChatMessageManager chatMessageManager;

	@Inject
	private WorldCycleConfig config;

	@Inject
	private WorldService worldService;

	@Inject
	private WSClient wsClient;

	@Inject
	private PartyService partyService;

	@Inject
	private WorldCycleOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	private NavigationButton navButton_cycle;
	public WorldCyclePanel panel_cycle;

	private net.runelite.api.World quickHopTargetWorld;
	private int displaySwitcherAttempts = 0;

	private boolean lastFocusStatus = false;

	//50 worlds separated by commas, prevents potential abuse of spamming large packets in party
	//this does not limit local usage, simply prevents egregious party updates
	private final int MAXIMUM_PACKET_LENGTH = 199;

	int currentWorldId, nextWorldId, previousWorldId = -1;
	GameState oneStatePrior = GameState.LOGGING_IN;
	GameState twoStatesPrior = GameState.LOGGING_IN;

	Color configWorldPanelColor,configPreviousWorldColor,configCurrentWorldColor,configNextWorldColor;
	int configFontSize;
	boolean configBoldFont,configDisplayPreviousWorld,configDisplayCurrentWorld,configDisplayNextWorld;
	boolean shouldDisplayPanel;

	private final HotkeyListener previousKeyListener = new HotkeyListener(() -> config.previousKey())
	{
		@Override
		public void hotkeyPressed()
		{
			clientThread.invoke(() -> hop(true));
		}
	};
	private final HotkeyListener nextKeyListener = new HotkeyListener(() -> config.nextKey())
	{
		@Override
		public void hotkeyPressed()
		{
			clientThread.invoke(() -> hop(false));
		}
	};

	@Provides
	WorldCycleConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(WorldCycleConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		CacheConfigs();
		wsClient.registerMessage(WorldCycleUpdate.class);
		keyManager.registerKeyListener(previousKeyListener);
		keyManager.registerKeyListener(nextKeyListener);

		panel_cycle = new WorldCyclePanel(client, configManager,this);

		final BufferedImage icon_cycle = ImageUtil.getResourceStreamFromClass(getClass(), "icon_cycle.png");
		navButton_cycle = NavigationButton.builder()
				.tooltip("World Cycle")
				.icon(icon_cycle)
				.priority(1)
				.panel(panel_cycle)
				.build();

		clientToolbar.addNavigation(navButton_cycle);

	}

	@Override
	protected void shutDown() throws Exception
	{
		wsClient.unregisterMessage(WorldCycleUpdate.class);
		keyManager.unregisterKeyListener(previousKeyListener);
		keyManager.unregisterKeyListener(nextKeyListener);

		clientToolbar.removeNavigation(navButton_cycle);
		overlayManager.remove(overlay);
	}

	/**
	 * Detect that a world change has occured by checking the previous state, against the prior previous state
	 * Refreshes the cached worlds for overlay display.
	 */
	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		GameState state = event.getGameState();
		if(oneStatePrior != state){
			if(oneStatePrior == GameState.LOADING && twoStatesPrior == GameState.HOPPING){
				//a world hop has occured and the world has loaded.
				CacheNearbyWorlds();
			}
			twoStatesPrior = oneStatePrior;
			oneStatePrior = state;
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged)
	{
		if (!configChanged.getGroup().equals(WorldCycleConfig.GROUP))
		{
			return;
		}

		CacheConfigs();
	}

	/**
	 * Cache configs to prevent spam calls to config in the overlay.
	 * Add or remove the overlay panel if the status has changed.
	 */
	public void CacheConfigs(){
		configWorldPanelColor = config.worldPanelColor();
		configPreviousWorldColor = config.previousWorldColor();
		configCurrentWorldColor = config.currentWorldColor();
		configNextWorldColor = config.nextWorldColor();
		configFontSize = config.fontSize();
		configBoldFont = config.boldFont();
		configDisplayPreviousWorld = config.displayPreviousWorld();
		configDisplayCurrentWorld = config.displayCurrentWorld();
		configDisplayNextWorld = config.displayNextWorld();

		//if there was no panel before add it, if there was a panel and no longer need it, remove it
		boolean previousDisplayState = shouldDisplayPanel;
		shouldDisplayPanel = configDisplayPreviousWorld || configDisplayCurrentWorld || configDisplayNextWorld;
		if(previousDisplayState != shouldDisplayPanel){
			if(shouldDisplayPanel){
				overlayManager.add(overlay);
			}else{
				overlayManager.remove(overlay);
			}
		}
	}

	/**
	 * Get the next or previous world in relation to the current world in the set.
	 * In the case that the current world is not in the set it defaults to : first world is next, last world is previous
	 * In the case that no world cycle is present it returns the standard next/previous world in relation to the players current world.
	 */
	private World GetWorld(boolean previous)
	{
		WorldResult worldResult = worldService.getWorlds();
		if (worldResult == null)
		{
			return null;
		}

		World currentWorld = worldResult.findWorld(client.getWorld());

		if (currentWorld == null)
		{
			return null;
		}

		EnumSet<WorldType> currentWorldTypes = currentWorld.getTypes().clone();
		// Make it so you always hop out of PVP and high risk worlds
		currentWorldTypes.remove(WorldType.PVP);
		currentWorldTypes.remove(WorldType.HIGH_RISK);

		// Don't regard these worlds as a type that must be hopped between
		currentWorldTypes.remove(WorldType.BOUNTY);
		currentWorldTypes.remove(WorldType.SKILL_TOTAL);
		currentWorldTypes.remove(WorldType.LAST_MAN_STANDING);

		List<World> customWorldCycle = getCustomWorldCycle();
		boolean cyclePresent = !customWorldCycle.isEmpty();
		List<World> worlds = cyclePresent ? customWorldCycle : worldResult.getWorlds();
		int attemptedWorlds = 0;

		//don't limit the subscription type if the user is purposely attempting to hop between members and f2p
		if(cyclePresent){
			currentWorldTypes.remove(WorldType.MEMBERS);
		}

		int worldIdx = worlds.indexOf(currentWorld);
		int totalLevel = client.getTotalLevel();

		World world;
		do
		{
			/*
				Get the previous or next world in the list,
				starting over at the other end of the list
				if there are no more elements in the
				current direction of iteration.
			 */
			if (previous)
			{
				worldIdx--;

				if (worldIdx < 0)
				{
					worldIdx = worlds.size() - 1;
				}
			}
			else
			{
				worldIdx++;

				if (worldIdx >= worlds.size())
				{
					worldIdx = 0;
				}
			}

			world = worlds.get(worldIdx);

			EnumSet<WorldType> types = world.getTypes().clone();

			types.remove(WorldType.BOUNTY);
			// Treat LMS world like casual world
			types.remove(WorldType.LAST_MAN_STANDING);

			//don't limit the subscription type if the user is purposely attempting to hop between members and f2p
			if(cyclePresent){
				types.remove(WorldType.MEMBERS);
			}

			if (types.contains(WorldType.SKILL_TOTAL))
			{
				try
				{
					int totalRequirement = Integer.parseInt(world.getActivity().substring(0, world.getActivity().indexOf(" ")));

					if (totalLevel >= totalRequirement)
					{
						types.remove(WorldType.SKILL_TOTAL);
					}
				}
				catch (NumberFormatException ex)
				{
					log.warn("Failed to parse total level requirement for target world", ex);
				}
			}

			// Avoid switching to near-max population worlds, as it will refuse to allow the hop if the world is full
			if (world.getPlayers() >= MAX_PLAYER_COUNT)
			{
				//We've searched every world and not found a suitable world, break from loop
				if(++attemptedWorlds == worlds.size()){
					world = currentWorld;
					break;
				}
				continue;
			}

			// Break out if we've found a good world to hop to
			if (currentWorldTypes.equals(types))
			{
				break;
			}else{
				//We've searched every world and not found a suitable world, break from loop
				if(++attemptedWorlds == worlds.size()){
					world = currentWorld;
					break;
				}
			}
		}
		while (world != currentWorld);
		return world;
	}

	private void hop(boolean previous)
	{
		WorldResult worldResult = worldService.getWorlds();
		if (worldResult == null || client.getGameState() != GameState.LOGGED_IN)
		{
			return;
		}

		World currentWorld = worldResult.findWorld(client.getWorld());

		if (currentWorld == null)
		{
			return;
		}

		World world = GetWorld(previous);
		if (world == currentWorld || world == null)
		{
			String chatMessage = new ChatMessageBuilder()
				.append(ChatColorType.NORMAL)
				.append("Couldn't find a world to quick-hop to.")
				.build();

			SendGameMessage(chatMessage);
		}
		else
		{
			hop(world.getId());
		}
	}

	private void hop(int worldId)
	{
		assert client.isClientThread();

		WorldResult worldResult = worldService.getWorlds();
		// Don't try to hop if the world doesn't exist
		World world = worldResult.findWorld(worldId);
		if (world == null)
		{
			return;
		}

		final net.runelite.api.World rsWorld = client.createWorld();
		rsWorld.setActivity(world.getActivity());
		rsWorld.setAddress(world.getAddress());
		rsWorld.setId(world.getId());
		rsWorld.setPlayerCount(world.getPlayers());
		rsWorld.setLocation(world.getLocation());
		rsWorld.setTypes(WorldUtil.toWorldTypes(world.getTypes()));

		if (client.getGameState() == GameState.LOGIN_SCREEN)
		{
			// on the login screen we can just change the world by ourselves
			client.changeWorld(rsWorld);
			return;
		}

		if (config.showWorldHopMessage())
		{
			String chatMessage = new ChatMessageBuilder()
				.append(ChatColorType.NORMAL)
				.append("Quick-hopping to World ")
				.append(ChatColorType.HIGHLIGHT)
				.append(Integer.toString(world.getId()))
				.append(ChatColorType.NORMAL)
				.append("..")
				.build();

			SendGameMessage(chatMessage);
		}

		quickHopTargetWorld = rsWorld;
		displaySwitcherAttempts = 0;
	}


	@Subscribe
	public void onGameTick(GameTick event)
	{
		if (quickHopTargetWorld == null)
		{
			return;
		}

		if (client.getWidget(ComponentID.WORLD_SWITCHER_WORLD_LIST) == null)
		{
			client.openWorldHopper();

			if (++displaySwitcherAttempts >= DISPLAY_SWITCHER_MAX_ATTEMPTS)
			{
				String chatMessage = new ChatMessageBuilder()
					.append(ChatColorType.NORMAL)
					.append("Failed to quick-hop after ")
					.append(ChatColorType.HIGHLIGHT)
					.append(Integer.toString(displaySwitcherAttempts))
					.append(ChatColorType.NORMAL)
					.append(" attempts.")
					.build();

				SendGameMessage(chatMessage);

				resetQuickHopper();
			}
		}
		else
		{
			client.hopToWorld(quickHopTargetWorld);
			resetQuickHopper();
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		if (event.getType() != ChatMessageType.GAMEMESSAGE)
		{
			return;
		}

		if (event.getMessage().equals("Please finish what you're doing before using the World Switcher."))
		{
			resetQuickHopper();
		}
	}

	private void resetQuickHopper()
	{
		displaySwitcherAttempts = 0;
		quickHopTargetWorld = null;
	}

	public void ChangeWorldSet(String worldset,boolean fromServer){

		//request is local, send to server
		if(!fromServer){
			if(LocalMemberIsValid()){
				if(worldset.length() > MAXIMUM_PACKET_LENGTH){
					PostMessageSetNotSent();
				}else{
					partyService.send(new WorldCycleUpdate(worldset));
				}
			}
		}

		//always handle from self, only handle from server if accept cycle is on
		if(!fromServer || config.acceptPartyCycle()){
			panel_cycle.pendingRequest = true;
			panel_cycle.uiInput.setWorldSetInput(worldset);
			CacheNearbyWorlds();
			PostMessageSetChanged(worldset,fromServer);
		}

	}

	public void PostMessageSetChanged(String worldset, boolean fromServer){
		String updateMessage = "World set updated"
				+ (fromServer ?  " by party member" : "")
				+ (worldset.length() <= 39 ? "\n                          ("+worldset+")" : "");
		String chatMessage = new ChatMessageBuilder()
				.append(ChatColorType.HIGHLIGHT)
				.append("[World Cycle] ")
				.append(ChatColorType.NORMAL)
				.append(updateMessage)
				.build();
		SendGameMessage(chatMessage);
	}

	public void PostMessageSetNotSent(){
		String chatMessage = new ChatMessageBuilder()
				.append(ChatColorType.HIGHLIGHT)
				.append("[World Cycle] ")
				.append(ChatColorType.HIGHLIGHT)
				.append("World set not sent to party, Maximum of 50 worlds in the set.")
				.build();
		SendGameMessage(chatMessage);
	}

	public void SendGameMessage(String chatMessage){
		chatMessageManager.queue(QueuedMessage.builder()
				.type(ChatMessageType.CONSOLE)
				.runeLiteFormattedMessage(chatMessage)
				.build());
	}

	public boolean LocalMemberIsValid(){
		PartyMember localMember = partyService.getLocalMember();
		return (localMember != null);
	}

	@Subscribe
	public void onWorldCycleUpdate(WorldCycleUpdate message)
	{
		//don't allow self updates, handle locally
		if(partyService.getLocalMember().getMemberId() == message.getMemberId()){
			return;
		}

		if(LocalMemberIsValid()){
			ChangeWorldSet(message.getWorldSet(),true);
		}
	}
	//Validate the world exists and isn't pvp before returning as a valid cycle world
	World ValidateWorld(int worldNum){

		WorldResult worldResult = worldService.getWorlds();
		if (worldResult == null) {
			return null;
		}

		World world = worldResult.findWorld(worldNum);
		if(world == null){
			return null;
		}

		//ensure there are zero instances of pvp worlds in the world cycle
		EnumSet<WorldType> currentWorldTypes = world.getTypes().clone();
		if(currentWorldTypes.contains(WorldType.PVP) || currentWorldTypes.contains(WorldType.HIGH_RISK)){
			return null;
		}

		return world;
	}

	List<World> getCustomWorldCycle(){

		List<World> worldCycleList = new ArrayList<>();

		String worldList = GetWorldSet();
		if (worldList.isEmpty())
		{
			return worldCycleList;
		}

		WorldResult worldResult = worldService.getWorlds();
		if (worldResult == null)
		{
			return worldCycleList;
		}

		Text.fromCSV(worldList).stream()
				.mapToInt(s ->
				{
					try
					{
						return Integer.parseInt(s);
					}
					catch (NumberFormatException e)
					{
						return 0;
					}
				})
				.filter(world -> ValidateWorld(world) != null)
				.forEach(world -> worldCycleList.add(worldResult.findWorld(world)));
		return worldCycleList;
	}

	/**
	 * Cache current, previous and next world in the set
	 */
	void CacheNearbyWorlds(){
		currentWorldId = client.getWorld();

		World previousWorld = GetWorld(true);
		if(previousWorld != null){
			previousWorldId = previousWorld.getId();
		}else{
			previousWorldId = -1;
		}

		World nextWorld = GetWorld(false);
		if(nextWorld != null){
			nextWorldId = nextWorld.getId();
		}else{
			nextWorldId = -1;
		}
	}

	public String GetWorldSet(){
		return panel_cycle.uiInput.getWorldSetInput();
	}
}

