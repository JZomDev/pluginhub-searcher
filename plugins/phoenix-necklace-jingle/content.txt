package com.phoenixNecklaceJingle;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("phoenixNecklaceJingle")
public interface PhoenixNecklaceJingleConfig extends Config
{
    @ConfigSection(
            name = "Custom Jingle",
            description = "Use a custom jingle when your Phoenix Necklace breaks.",
            position = 1
    )
    String CUSTOM_JINGLE = "customJingle";

	@Range(min = 1, max = 100)
	@ConfigItem(
			keyName = "volume",
			name = "Volume",
			description = "Sound effect volume",
			position = 2
	)
	default int volume() {
		return 100;
	}

    @ConfigItem(
            keyName = "soundID",
            name = "Sound ID",
            description = "The sound ID you wish to play. <br>" +
                    "Sound List: https://oldschool.runescape.wiki/w/List_of_in-game_sound_IDs",
            position = 1
    )
    default int soundID()
    {
        return 3924;
    }
    @ConfigItem(
            keyName = "enableCustomSound",
            name = "Enable Custom Sound",
            description = "Use a custom sound to play rather than an in-game sound  <br>" +
                    "Replace custom.wav in the .runelite folder with your desired sound",
            position = 3,
            section = CUSTOM_JINGLE
    )
    default boolean enableCustomSoundsVolume() { return false; }



}

/*
 * Copyright (c) 2023, petertalbanese <https://github.com/petertalbanese>
 * Copyright (c) 2023, damencs <https://github.com/damencs>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.phoenixNecklaceJingle;
import javax.sound.sampled.AudioFormat;

public class Sound
{
    private byte[] bytes;
    private AudioFormat format;
    private int numBytes;

    Sound(byte[] bytes, AudioFormat format, int numBytes)
    {
        this.bytes = bytes;
        this.format = format;
        this.numBytes = numBytes;
    }

    public byte[] getBytes()
    {
        return bytes;
    }

    public AudioFormat getFormat()
    {
        return format;
    }

    public int getNumBytes()
    {
        return numBytes;
    }
}
package com.phoenixNecklaceJingle;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.RuneLite;
import net.runelite.client.audio.AudioPlayer;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.Text;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;

@Slf4j
@PluginDescriptor(
	name = "Phoenix Necklace Jingle"
)
public class PhoenixNecklaceJinglePlugin extends Plugin
{
    @Inject private Client client;
    @Inject private PhoenixNecklaceJingleConfig config;
    @Inject private AudioPlayer audioPlayer;

    private static final String DEFAULT_SUBPATH = "PhoenixNecklaceJingle/custom.wav";

    @Override
    protected void startUp() throws Exception
    {
        // Create the empty WAV at startup if it's missing
        ensureDefaultSoundExists();
    }

    @Override
    protected void shutDown() throws Exception
    { }

    private File resolveSoundFile()
    {
        File rlDir = RuneLite.RUNELITE_DIR;
        return new File(rlDir, DEFAULT_SUBPATH);
    }

    private void ensureDefaultSoundExists()
    {
        File out = resolveSoundFile();
        if (out.exists()) return;

        out.getParentFile().mkdirs();
        try (InputStream in = getClass().getResourceAsStream("/custom.wav"))
        {
            if (in != null)
            {
                Files.copy(in, out.toPath(), StandardCopyOption.REPLACE_EXISTING);
            }
            else
            {
                log.warn("Bundled default sound missing at /custom.wav");
            }
        }
        catch (IOException e)
        {
            log.warn("Could not write default sound to {}", out, e);
        }
    }
    private static float volumePercentToDb(int volPercent)
    {
        int v = Math.max(0, Math.min(100, volPercent));
        return -30.0f + (v / 100.0f) * 30.0f;
    }

    private void playCustomSound()
    {
        ensureDefaultSoundExists();
        File soundFile = resolveSoundFile();
        if (!soundFile.exists())
        {
            log.warn("Custom sound not found at {}", soundFile.getAbsolutePath());
            return;
        }

        try
        {
            float gainDb = volumePercentToDb(config.volume());
            audioPlayer.play(soundFile, gainDb);
        }
        catch (Exception e)
        {
            log.warn("Unable to play custom sound: {}", soundFile.getAbsolutePath(), e);
        }
    }

    @Subscribe
    private void onChatMessage(ChatMessage event)
    {
        if (event.getType() == ChatMessageType.GAMEMESSAGE && event.getType() != ChatMessageType.SPAM)
        {
            String message = Text.standardize(event.getMessageNode().getValue());
            if (message.contains("your phoenix necklace heals you, but is destroyed in the process."))
            {
                if (this.config.enableCustomSoundsVolume())
                {
                    playCustomSound(); // will be silent if the empty WAV hasn't been replaced
                }
                else
                {
                    client.playSoundEffect(this.config.soundID(), this.config.volume());
                }
            }
        }
    }

    @Provides
    PhoenixNecklaceJingleConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(PhoenixNecklaceJingleConfig.class);
    }
}
package com.phoenixNecklaceJingle;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PhoenixNecklaceJingleTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PhoenixNecklaceJinglePlugin.class);
		RuneLite.main(args);
	}
}
