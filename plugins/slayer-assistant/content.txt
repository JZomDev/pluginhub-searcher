package com.slayerassistant;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SlayerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(SlayerAssistantPlugin.class);
		RuneLite.main(args);
	}
}
package com.slayerassistant.services;

import com.slayerassistant.domain.Task;

import java.util.Comparator;

public interface TaskService 
{
    Task get(String name);

    Task[] getAll();
    
    Task[] getAll(Comparator<Task> comparator);

    Task[] searchPartialName(String text);
}

package com.slayerassistant.services;

import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.google.gson.reflect.TypeToken;

import com.slayerassistant.domain.Task;
import com.slayerassistant.domain.WikiLink;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Singleton;
import java.awt.image.BufferedImage;
import java.io.*;
import java.lang.reflect.Type;
import java.util.*;

@Slf4j
@Singleton
public class TaskServiceImpl implements TaskService 
{
    private final Map<String, Task> tasks = new HashMap<>();
    private final String baseWikiUrl;
    private final String baseImagesPath;
    
    @Inject
    public TaskServiceImpl(
            Gson gson,
            @Named("dataPath") String dataPath,
            @Named("baseWikiUrl") String baseWikiUrl,
            @Named("baseImagesPath") String baseImagesPath)
    {
        this.baseWikiUrl = baseWikiUrl;
        this.baseImagesPath = baseImagesPath;
        
        InputStream inputStream = this.getClass().getResourceAsStream(dataPath);

        if (inputStream == null) 
        {
            throw new RuntimeException("Could not find JSON at path " + dataPath);
        }
        
        try (Reader reader = new InputStreamReader(inputStream))
        {
            Type type = new TypeToken<Map<String, Task>>() {}.getType();
            Map<String, Task> data = gson.fromJson(reader, type);
            
            data.forEach((key, value) -> 
            {
                value.wikiLinks = createWikiLinks(value);
                value.image = getImage(value.name);
                tasks.put(key.toLowerCase(), value);
            });
        } 
        catch (JsonSyntaxException e) 
        {
            log.error("JSON syntax error in file {}", dataPath, e);
        }
        catch (IOException e) 
        {
            log.error("Could not read JSON from file {}", dataPath, e);
        }
    }
    
    @Override
    public Task get(String name)
    {
        return tasks.get(name.toLowerCase());
    }
    
    @Override
    public Task[] getAll()
    {
        return getAll(null);
    }
    
    @Override
    public Task[] getAll(Comparator<Task> comparator)
    {
        if (comparator == null) 
        {
            return tasks.values().toArray(new Task[0]);
        }
        
        return tasks.values().stream()
                .sorted(comparator)
                .toArray(Task[]::new);
    }
    
    @Override
    public Task[] searchPartialName(String text)
    {
        if (text == null || text.isEmpty()) 
        {
            return new Task[0];
        }
        
        String searchTerm = text.toLowerCase();
        return tasks
                .values()
                .stream()
                .filter(m -> m.name.toLowerCase().contains(searchTerm))
                .toArray(Task[]::new);
    }
    
    private WikiLink[] createWikiLinks(Task task)
    {
        List<WikiLink> links = new ArrayList<>();
        
        links.add(createWikiLink(task.name));
        
        for (String variant : task.variants) 
        {
            links.add(createWikiLink(variant));
        }
        
        return links.toArray(new WikiLink[0]);
    }
    
    private WikiLink createWikiLink(String name)
    {
        String url = baseWikiUrl + name.replace(' ', '_');
        
        return new WikiLink(name, url);
    }
    
    private BufferedImage getImage(String name)
    {
        String normalizedName = name.replace(' ', '_').toLowerCase();
        String path = baseImagesPath + normalizedName + ".png";
        
        BufferedImage image = ImageUtil.loadImageResource(getClass(), path);
        return ImageUtil.resizeImage(image, image.getWidth() / 2, image.getHeight() / 2);
    }
}

package com.slayerassistant.domain;

public enum Panel
{
    TASK_SEARCH,
    TASK_SELECTED
}

package com.slayerassistant.domain;

import lombok.Getter;

@Getter
public enum TabKey 
{
    LOCATIONS("Locations"),
    ITEMS_REQUIRED("Items"),
    COMBAT("Combat"),
    MASTERS("Masters"),
    WIKI("Wiki");
    
    private final String name;
    TabKey(String name)
    {
        this.name = name;
    }

}

package com.slayerassistant.domain;

import java.awt.image.BufferedImage;

public class Task 
{
    public String name;
    public int levelRequired;
    public String[] itemsRequired;
    public String[] locations;
    public String[] attributes;
    public String[] attackStyles;
    public String[] variants;
    public String[] masters;
    public transient BufferedImage image;
    public transient WikiLink[] wikiLinks;
    
    public Task(
            String name,
            int levelRequired,
            String[] itemsRequired,
            String[] locations,
            String[] attributes,
            String[] attackStyles,
            String[] variants,
            String[] masters,
            BufferedImage image,
            WikiLink[] wikiLinks) 
    {
        this.name = name;
        this.levelRequired = levelRequired;
        this.itemsRequired = itemsRequired;
        this.locations = locations;
        this.attributes = attributes;
        this.attackStyles = attackStyles;
        this.variants = variants;
        this.masters = masters;
        this.image = image;
        this.wikiLinks = wikiLinks;
    }
}

package com.slayerassistant.domain;

public interface Tab<T> 
{
    void update(T data);
    void shutDown();
}
package com.slayerassistant.domain;

import java.util.Objects;

public class WikiLink 
{
    public final String name;
    public final String url;

    public WikiLink(String name, String url) 
    {
        this.name = Objects.requireNonNull(name, "wiki name cannot be null");
        this.url = Objects.requireNonNull(url, "wiki url cannot be null");
    }
}

package com.slayerassistant.domain;

import com.slayerassistant.SlayerAssistantPlugin;
import net.runelite.client.util.ImageUtil;

import javax.annotation.Nonnull;
import javax.swing.*;
import java.awt.image.BufferedImage;
import java.util.function.UnaryOperator;

public enum Icon
{
    COMBAT("/images/combat.png"),
    COMPASS("/images/compass.png"),
    INVENTORY("/images/inventory.png"),
    SLAYER_SKILL("/images/slayer_icon.png"),
    WIKI("/images/wiki.png"),
    ;

    private final String file;
    Icon(String file)
    {
        this.file = file;
    }
    
    public BufferedImage getImage()
    {
        return ImageUtil.loadImageResource(SlayerAssistantPlugin.class, file);
    }
    
    public ImageIcon getIcon()
    {
        return getIcon(UnaryOperator.identity());
    }
    
    public ImageIcon getIcon(@Nonnull UnaryOperator<BufferedImage> func)
    {
        BufferedImage img = func.apply(getImage());
        return new ImageIcon(img);
    }
}

package com.slayerassistant.modules;

import com.google.inject.AbstractModule;
import com.google.inject.Provides;
import com.google.inject.name.Named;
import com.slayerassistant.services.TaskService;
import com.slayerassistant.services.TaskServiceImpl;

public class TaskServiceModule extends AbstractModule
{
    @Override
    protected void configure()
    {
        bind(TaskService.class).to(TaskServiceImpl.class);
    }

    @Provides
    @Named("dataPath")
    String provideJsonDataPath()
    {
        return "/data/tasks.json";
    }

    @Provides
    @Named("baseWikiUrl")
    String provideBaseWikiUrl()
    {
        return "https://oldschool.runescape.wiki/w/";
    }

    @Provides
    @Named("baseImagesPath")
    String provideBaseImagesPath()
    {
        return "/images/monsters/";
    }
}

package com.slayerassistant.presentation;

import com.slayerassistant.domain.Task;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;

import javax.swing.*;
import javax.swing.border.EtchedBorder;
import java.awt.*;

public class SlayerTaskRenderer extends JLabel implements ListCellRenderer<Task>
{
    private static int hoverIndex = -1;
    
    public void setHoverIndex(int index)
    {
        hoverIndex = index;
    }
    
    @Override
    public Component getListCellRendererComponent(
            JList<? extends Task> list,
            Task value,
            int index,
            boolean isSelected,
            boolean cellHasFocus)
    {
        setOpaque(true);
        setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH, 35));
        setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createEtchedBorder(EtchedBorder.RAISED),
                BorderFactory.createEmptyBorder(0, 5, 0, 0)
        ));
        
        if (index == hoverIndex)
        {
            setBackground(ColorScheme.DARKER_GRAY_HOVER_COLOR);
            setForeground(Color.WHITE);
        }
        else
        {
            setBackground(ColorScheme.DARKER_GRAY_COLOR);
            setForeground(ColorScheme.TEXT_COLOR);
        }
        
        setText(value.name);
        return this;
    }
}

package com.slayerassistant.presentation.panels;

import com.slayerassistant.domain.Task;
import com.slayerassistant.presentation.components.Header;
import com.slayerassistant.presentation.components.TaskTabs;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionListener;

public class TaskSelectedPanel extends JPanel 
{
    private final Header header = new Header();
    private final TaskTabs taskTabs = new TaskTabs();
    private final JButton closeButton = new JButton("Close");
    
    private final ActionListener onClickListener;

    public TaskSelectedPanel(Runnable onClose)
    {
        this.onClickListener = e -> onClose.run();
        closeButton.addActionListener(this.onClickListener);
        
        setLayout(new BorderLayout(0, 10));
        setBorder(new EmptyBorder(5, 0, 0, 0));
        
        add(header, BorderLayout.NORTH);
        add(taskTabs, BorderLayout.CENTER);
        add(closeButton, BorderLayout.SOUTH);
    }

    public void shutDown()
    {
        taskTabs.shutDown();
        closeButton.removeActionListener(onClickListener);
    }
    
    public void update(Task task)
    {
        header.update(task.name, new ImageIcon(task.image));
        SwingUtilities.invokeLater(() -> taskTabs.update(task));
    }
}


package com.slayerassistant.presentation.panels;

import com.slayerassistant.domain.Panel;
import com.slayerassistant.domain.Task;
import com.slayerassistant.services.TaskService;
import net.runelite.client.ui.PluginPanel;

import javax.inject.Inject;
import javax.swing.*;
import java.awt.*;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;

public class MainPanel extends PluginPanel
{
    private final TaskService taskService;

    private final TaskSearchPanel taskSearchPanel = new TaskSearchPanel(this::onSearchBarChanged, this::onTaskSelected);
    private final TaskSelectedPanel taskSelectedPanel = new TaskSelectedPanel(this::onTaskClosed);

    private final Map<Panel, JPanel> panels = new HashMap<>();
    private final JPanel currentPanelContainer = new JPanel(new BorderLayout());

    @Inject
    public MainPanel(TaskService taskService)
    {
        this.taskService = taskService;
        
        Task[] orderedTasks = taskService.getAll(Comparator.comparing(t -> t.name));
        taskSearchPanel.updateTaskList(orderedTasks);

        setLayout(new BorderLayout());

        panels.put(Panel.TASK_SEARCH, taskSearchPanel);
        panels.put(Panel.TASK_SELECTED, taskSelectedPanel);

        add(currentPanelContainer, BorderLayout.CENTER);
        showPanel(Panel.TASK_SEARCH);
    }

    public void shutDown()
    {
        taskSearchPanel.shutDown();
        taskSelectedPanel.shutDown();
    }

    private void onSearchBarChanged(String searchTerm)
    {
        Task[] matchedTasks = searchTerm.isBlank()
                ? taskService.getAll(Comparator.comparing(t -> t.name))
                : taskService.searchPartialName(searchTerm.trim());

        taskSearchPanel.updateTaskList(matchedTasks);
    }

    private void onTaskSelected(Task task)
    {
        taskSelectedPanel.update(task);
        showPanel(Panel.TASK_SELECTED);
    }

    private void onTaskClosed()
    {
        showPanel(Panel.TASK_SEARCH);
    }

    private void showPanel(Panel panel)
    {
        SwingUtilities.invokeLater(() -> 
        {
            currentPanelContainer.removeAll();
            currentPanelContainer.add(panels.get(panel), BorderLayout.CENTER);
            revalidate();
            repaint();
        });
    }
}

package com.slayerassistant.presentation.panels;

import com.slayerassistant.domain.Task;
import com.slayerassistant.presentation.components.SearchBar;
import com.slayerassistant.presentation.components.SelectList;
import com.slayerassistant.presentation.SlayerTaskRenderer;

import javax.swing.*;
import java.awt.*;
import java.util.function.Consumer;

public class TaskSearchPanel extends JPanel
{
    private final SearchBar searchBar;
    private final SelectList<Task> selectList;
    private final SlayerTaskRenderer taskRenderer = new SlayerTaskRenderer();
    
    public TaskSearchPanel(Consumer<String> onSearch, Consumer<Task> onSelect)
    {
        searchBar = new SearchBar(onSearch);
        selectList = new SelectList<>(taskRenderer, onSelect, this::onTaskHover);

        setLayout(new BorderLayout());
        
        add(searchBar, BorderLayout.NORTH);
        add(selectList, BorderLayout.CENTER);
    }
    
    public void shutDown()
    {
        searchBar.shutDown();
        selectList.shutDown();
    }
    
    public void updateTaskList(Task[] tasks)
    {
        selectList.update(tasks);
    }

    private void onTaskHover(int index)
    {
        taskRenderer.setHoverIndex(index);
        if (index != -1)
        {
            setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
        else
        {
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }
}

package com.slayerassistant.presentation.components;

import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.IconTextField;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.util.function.Consumer;

public class SearchBar extends JPanel
{
    private final IconTextField searchBar = new IconTextField();
    private final DocumentListener onChangeListener;
    
    public SearchBar(Consumer<String> onChange)
    {
        onChangeListener = createDocumentListener(onChange);
        searchBar.getDocument().addDocumentListener(onChangeListener);
        
        initialiseStyles();
        
        add(searchBar);
    }
    
    public void shutDown()
    {
        searchBar.getDocument().removeDocumentListener(onChangeListener);
    }
    
    private DocumentListener createDocumentListener(Consumer<String> handler)
    {
        return new DocumentListener()
        {
            @Override
            public void insertUpdate(DocumentEvent e) { handler.accept(searchBar.getText()); }
            @Override
            public void removeUpdate(DocumentEvent e) { handler.accept(searchBar.getText()); }
            @Override
            public void changedUpdate(DocumentEvent e) { handler.accept(searchBar.getText()); }
        };
    }

    private void initialiseStyles()
    {
        searchBar.setIcon(IconTextField.Icon.SEARCH);
        searchBar.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH, 30));
        searchBar.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        searchBar.setHoverBackgroundColor(ColorScheme.DARKER_GRAY_HOVER_COLOR);
        searchBar.setMinimumSize(new Dimension(0, 30));
    }
}

package com.slayerassistant.presentation.components;

import javax.swing.*;
import javax.swing.event.ListSelectionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.util.Arrays;
import java.util.function.Consumer;

public class SelectList<T> extends JList<T>
{
    public SelectList(ListCellRenderer<T> renderer, Consumer<T> onSelect)
    {
        ListSelectionListener onSelectListener = e ->
        {
            T selectedValue = getSelectedValue();
            if (e.getValueIsAdjusting() || selectedValue == null)
            {
                return;
            }
            onSelect.accept(selectedValue);
            clearSelection();
        };

        setCellRenderer(renderer);
        addListSelectionListener(onSelectListener);
    }
    
    public SelectList(ListCellRenderer<T> renderer, Consumer<T> onSelect, Consumer<Integer> onHoverHandler)
    {
        this(renderer, onSelect);
        
        MouseMotionListener onHoverListener = createOnHoverListener(onHoverHandler);
        addMouseMotionListener(onHoverListener);
    }

    public void shutDown() 
    {
        Arrays.stream(getListSelectionListeners())
                .forEach(this::removeListSelectionListener);
        
        Arrays.stream(getMouseMotionListeners())
                .forEach(this::removeMouseMotionListener);

        setModel(new DefaultListModel<>());
    }
    
    public void update(T[] items)
    {
        SwingUtilities.invokeLater(() -> setListData(items));
    }

    private MouseMotionListener createOnHoverListener(Consumer<Integer> onHoverHandler)
    {
        return new MouseMotionListener()
        {
            @Override
            public void mouseDragged(MouseEvent e) { }

            @Override
            public void mouseMoved(MouseEvent e)
            {
                int index = locationToIndex(e.getPoint());
                onHoverHandler.accept(index);
                repaint();
            }
        };
    }
}

package com.slayerassistant.presentation.components.tabs;

import com.slayerassistant.domain.Tab;
import com.slayerassistant.domain.WikiLink;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.LinkBrowser;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@Slf4j
public class WikiTab extends JPanel implements Tab<WikiLink[]> 
{
    private final List<JButton> buttons = new ArrayList<>();

    public WikiTab() 
    {
        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
        setBackground(ColorScheme.DARKER_GRAY_COLOR);
    }

    @Override
    public void update(WikiLink[] wikiLinks)
    {
        removeExistingButtons();

        add(Box.createVerticalStrut(5));
        
        for (WikiLink wikiLink : wikiLinks) 
        {
            JButton button = new JButton(wikiLink.name);
            button.setBackground(ColorScheme.DARKER_GRAY_HOVER_COLOR);
            button.setMaximumSize(new Dimension(Integer.MAX_VALUE, button.getMaximumSize().height));
            button.addActionListener(e -> LinkBrowser.browse(wikiLink.url));
            buttons.add(button);
            
            add(Box.createVerticalStrut(5));
            add(button);
            add(Box.createVerticalStrut(5));
        }

        add(Box.createVerticalStrut(5));
    }

    @Override
    public void shutDown() 
    {
        removeExistingButtons();
    }

    private void removeExistingButtons() 
    {
        for (JButton button : buttons)
        {
            Arrays.stream(button.getActionListeners())
                    .forEach(button::removeActionListener);
        }
        buttons.clear();
        removeAll();
    }
}
package com.slayerassistant.presentation.components.tabs;

import com.slayerassistant.domain.Tab;
import net.runelite.client.ui.ColorScheme;
import org.apache.commons.lang3.StringUtils;

import javax.swing.*;
import javax.swing.text.*;
import java.awt.*;
import java.util.Arrays;

public class TextTab extends JTextPane implements Tab<String[]>
{
    public TextTab()
    {
        setBackground(ColorScheme.DARKER_GRAY_COLOR);
        setMargin(new Insets(10, 5, 10, 5));
        setEditable(false);
        setLineSpacing();
    }
    
    @Override
    public void update(String[] data)
    {
        resetParagraphs();
        
        if (data.length == 0)
        {
            addParagraph("None");
            return;
        }
        Arrays.stream(data).forEach(this::addParagraph);
    }

    @Override
    public void shutDown() 
    { 
        resetParagraphs();
    }
    
    private void addParagraph(String text)
    {
        StyledDocument doc = getStyledDocument();
        try
        {
            doc.insertString(doc.getLength(), StringUtils.capitalize(text) + "\n", null);
        }
        catch (BadLocationException e)
        {
            throw new RuntimeException(e);
        }
    }

    public void resetParagraphs()
    {
        setText("");
    }

    private void setLineSpacing()
    {
        selectAll();
        MutableAttributeSet set = new SimpleAttributeSet(getParagraphAttributes());
        StyleConstants.setLineSpacing(set, 0.5f);
        setParagraphAttributes(set, true);
    }
}
package com.slayerassistant.presentation.components.tabs;

import com.slayerassistant.domain.Tab;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.awt.*;

public class TableTab extends JScrollPane implements Tab<Object[][]>
{
    private final JTable table = new JTable();

    public TableTab(String[] columnNames)
    {
        setTableRenderer(columnNames);
        setHeaderRenderer();
        
        table.setRowHeight(25);
        table.setFocusable(false);
        table.setRowSelectionAllowed(false);
        
        setFocusable(false);
        setPreferredSize(new Dimension(table.getWidth(), 150));
        setViewportView(table);
    }

    @Override
    public void update(Object[][] data)
    {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);

        int maxRowCount = Math.max(data[0].length, data[1].length);
        for (int i = 0; i < maxRowCount; i++)
        {
            String attackStyle = i < data[0].length ? data[0][i].toString() : "";
            String attribute = i < data[1].length ? data[1][i].toString() : "";
            model.addRow(new Object[]{attackStyle, attribute});
        }
    }

    @Override
    public void shutDown()
    {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
    }

    private void setTableRenderer(String[] columnNames)
    {
        table.setModel(new DefaultTableModel(columnNames, 0)
        {
            @Override
            public boolean isCellEditable(int row, int column)
            {
                return false;
            }
        });
    }

    private void setHeaderRenderer()
    {
        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer()
        {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
            {
                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                Border border = BorderFactory.createCompoundBorder(
                        BorderFactory.createMatteBorder(0, 0, 1, 0, Color.darkGray),
                        BorderFactory.createEmptyBorder(8, 3, 5, 3)
                );
                ((JComponent) c).setBorder(border);
                return c;
            }
        };

        for (int i = 0; i < table.getColumnModel().getColumnCount(); i++)
        {
            table.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
    }
}
package com.slayerassistant.presentation.components;

import javax.swing.*;
import java.awt.*;

public class Header extends JLabel
{
    public Header()
    {
        setFont(this.getFont().deriveFont(Font.BOLD, 18f));
        setForeground(Color.ORANGE);
        setHorizontalAlignment(SwingConstants.CENTER);
        setVerticalTextPosition(SwingConstants.TOP);
        setHorizontalTextPosition(SwingConstants.CENTER);
        setIconTextGap(10);
    }
    
    public void update(String title, ImageIcon icon)
    {
        setText(title);
        setIcon(icon);
    }
}

package com.slayerassistant.presentation.components;

import com.slayerassistant.domain.Icon;
import com.slayerassistant.domain.Task;
import com.slayerassistant.presentation.components.tabs.TableTab;
import com.slayerassistant.domain.Tab;
import com.slayerassistant.domain.TabKey;
import com.slayerassistant.presentation.components.tabs.TextTab;
import com.slayerassistant.presentation.components.tabs.WikiTab;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.laf.RuneLiteTabbedPaneUI;

import javax.swing.*;
import java.awt.*;
import java.util.HashMap;
import java.util.Map;

@Slf4j
public class TaskTabs extends JTabbedPane 
{
    private final Map<TabKey, Tab<?>> tabMap = new HashMap<>();

    public TaskTabs() 
    {
        setUI(new RuneLiteTabbedPaneUI() 
        {
            @Override
            protected int calculateTabWidth(int tabPlacement, int tabIndex, FontMetrics metrics)
            {
                return getWidth() / getTabCount();
            }
        });
        
        TabKey locations = TabKey.LOCATIONS;
        TabKey items = TabKey.ITEMS_REQUIRED;
        TabKey combat = TabKey.COMBAT;
        TabKey masters = TabKey.MASTERS;
        TabKey wiki = TabKey.WIKI;
        
        setTab(locations, com.slayerassistant.domain.Icon.COMPASS.getIcon(), new TextTab(), locations.getName());
        setTab(items, com.slayerassistant.domain.Icon.INVENTORY.getIcon(), new TextTab(), items.getName());
        setTab(combat, com.slayerassistant.domain.Icon.COMBAT.getIcon(), new TableTab(new String[] { "Attack Styles", "Attributes" }), combat.getName());
        setTab(masters, com.slayerassistant.domain.Icon.SLAYER_SKILL.getIcon(), new TextTab(), masters.getName());
        setTab(wiki, Icon.WIKI.getIcon(), new WikiTab(), wiki.getName());
    }

    public void shutDown() 
    {
        tabMap.values().forEach(Tab::shutDown);
    }
    
    public void update(Task task)
    {
        updateTab(TabKey.LOCATIONS, task.locations);
        updateTab(TabKey.ITEMS_REQUIRED, task.itemsRequired);
        updateTab(TabKey.COMBAT, new Object[][] { task.attackStyles, task.attributes });
        updateTab(TabKey.MASTERS, task.masters);
        updateTab(TabKey.WIKI, task.wikiLinks);
    }
    
    private <T> void updateTab(TabKey key, T data) 
    {
        Tab<?> rawTab = tabMap.get(key);

        if (rawTab == null) 
        {
            log.error("No tab found with key {}", key.toString());
            return;
        }

        @SuppressWarnings("unchecked")
        Tab<T> tab = (Tab<T>) rawTab;
        tab.update(data);
    }

    private void setTab(TabKey key, ImageIcon icon, Tab<?> tab, String tip) 
    {
        tabMap.put(key, tab);
        addTab(null, icon, (Component) tab, tip);
    }
}
package com.slayerassistant;

import com.google.inject.Binder;
import com.slayerassistant.domain.Icon;
import com.slayerassistant.modules.TaskServiceModule;
import com.slayerassistant.presentation.panels.MainPanel;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;

import javax.inject.Inject;

@Slf4j
@PluginDescriptor(
	name = "Slayer Assistant",
	description = "Assists with slayer task information",
	tags = { "slay", "slayer", "assistant" }
)
public class SlayerAssistantPlugin extends Plugin
{
	@Inject
	private ClientToolbar clientToolbar;
	
	@Inject
	private MainPanel mainPanel;
	
	private NavigationButton navButton;

    @Override
	public void configure(Binder binder)
	{
		binder.install(new TaskServiceModule());
	}

	@Override
	protected void startUp()
	{
		injector.injectMembers(this);

		navButton = getNavButton();

		clientToolbar.addNavigation(navButton);
	}

	@Override
	protected void shutDown()
	{
		clientToolbar.removeNavigation(navButton);
		mainPanel.shutDown();
	}

	private NavigationButton getNavButton()
	{
		return NavigationButton.builder()
				.tooltip("Slayer Assistant")
				.icon(Icon.SLAYER_SKILL.getImage())
				.priority(10)
				.panel(mainPanel)
				.build();
	}
}

