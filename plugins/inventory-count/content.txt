package io.robrichardson.inventorycount;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class InventoryCountPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(InventoryCountPlugin.class);
		RuneLite.main(args);
	}
}
package io.robrichardson.inventorycount;

public class InventoryOverlaySlotSizes
{
    public static final int HIGH = 14;
    public static final int MEDIUM = 7;
    public static final int LOW = 3;
}

package io.robrichardson.inventorycount;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

import java.awt.*;

@ConfigGroup(InventoryCountConfig.GROUP)
public interface InventoryCountConfig extends Config {
    String GROUP = "InventoryCount";

    @ConfigItem(
            keyName = "renderInventoryOverlay",
            name = "Toggle inventory counter",
            description = "Toggle for rendering the inventory count overlay",
            position = 1
    )
    default boolean renderInventoryOverlay() {
        return true;
    }

    @ConfigItem(
            keyName = "renderInventoryInfoBox",
            name = "Toggle inventory box",
            description = "Toggle for rendering the inventory info box",
            position = 2
    )
    default boolean renderInventoryInfoBox() {
        return false;
    }

    @ConfigSection(
            name = "Text Settings",
            description = "Change your text color, outline and positioning",
            position = 3
    )
    String textSection = "Text Settings";

    @ConfigItem(
            keyName = "renderInventoryOverlayTextOutline",
            name = "Text outline",
            description = "Adds an outline to the inventory overlay text",
            position = 3,
            section = textSection
    )
    default boolean renderInventoryOverlayTextOutline() {
        return false;
    }

    @ConfigItem(
            keyName = "customInventoryOverlayTextColor",
            name = "Text color",
            description = "Customize the color of the inventory overlay text",
            position = 2,
            section = textSection
    )
    default Color customInventoryOverlayTextColor() {
        return Color.WHITE;
    }

    @ConfigItem(
            keyName = "customInventoryOverlayTextPosition",
            name = "Text position",
            description = "Configure the position of the inventory overlay text",
            position = 4,
            section = textSection
    )
    default InventoryOverlayTextPositions inventoryOverlayTextPosition() {
        return InventoryOverlayTextPositions.Bottom;
    }

    @ConfigItem(
            keyName = "dynamicInventoryOverlayColor",
            name = "Dynamic text color",
            description = "Toggle to enable or disable the text color changing based on free inventory slots",
            position = 1,
            section = textSection
    )
    default boolean dynamicInventoryOverlayColor() {
        return true;
    }

    @ConfigSection(
            name = "Custom Font Settings",
            description = "Settings for customizing the font of the inventory counter overlay",
            position = 4
    )
    String fontSection = "Custom Font Settings";

    @ConfigItem(
            keyName = "customInventoryOverlayFontSize",
            name = "Text size",
            description = "Adjust the font size of the inventory overlay text",
            position = 3,
            section = fontSection
    )
    default InventoryOverlayTextFontSizes customInventoryOverlayFontSize() {
        return InventoryOverlayTextFontSizes.SIZE_16;
    }

    @ConfigItem(
            keyName = "customInventoryOverlayFont",
            name = "Custom font",
            description = "Choose a custom font for the inventory counter overlay",
            position = 2,
            section = fontSection
    )
    default InventoryOverlayTextFonts customFont() {
        return InventoryOverlayTextFonts.ARIAL_BOLD;
    }

    @ConfigItem(
            keyName = "customInventoryOverlayFontToggle",
            name = "Use custom font",
            description = "Toggle using a custom font or the default plugin font",
            position = 1,
            section = fontSection
    )
    default boolean useCustomFont() {
        return true;
    }
}

package io.robrichardson.inventorycount;

public enum InventoryOverlayTextFontSizes
{
    SIZE_8(8),
    SIZE_9(9),
    SIZE_10(10),
    SIZE_11(11),
    SIZE_12(12),
    SIZE_13(13),
    SIZE_14(14),
    SIZE_15(15),
    SIZE_16(16),
    SIZE_17(17),
    SIZE_18(18),
    SIZE_19(19),
    SIZE_20(20);

    private final int size;

    InventoryOverlayTextFontSizes(int size) {
        this.size = size;
    }

    @Override
    public String toString() {
        return Integer.toString(size);
    }

    public int getSize() {
        return size;
    }
}

package io.robrichardson.inventorycount;
import java.awt.Font;

public enum InventoryOverlayTextFonts
{
    ARIAL_BOLD("Arial Bold", "Arial", Font.BOLD),
    TIMES_NEW_ROMAN("Times New Roman", "Times New Roman", Font.PLAIN),
    COURIER_NEW("Courier New", "Courier New", Font.PLAIN),
    VERDANA("Verdana", "Verdana", Font.PLAIN),
    TAHOMA("Tahoma", "Tahoma", Font.PLAIN);

    private final String displayName;
    private final String fontName;
    private final int fontStyle;

    InventoryOverlayTextFonts(String displayName, String fontName, int fontStyle)
    {
        this.displayName = displayName;
        this.fontName = fontName;
        this.fontStyle = fontStyle;
    }

    @Override
    public String toString()
    {
        return displayName;
    }

    public String getFontName()
    {
        return fontName;
    }

    public int getFontStyle()
    {
        return fontStyle;
    }
}

package io.robrichardson.inventorycount;

import net.runelite.client.plugins.Plugin;
import net.runelite.client.ui.overlay.infobox.InfoBox;

import java.awt.*;
import java.awt.image.BufferedImage;

public class InventoryCountInfoBox extends InfoBox {
    private String _text;
    private final InventoryCountConfig config;

    InventoryCountInfoBox(BufferedImage image, Plugin plugin, InventoryCountConfig config) {
        super(image, plugin);
        this.config = config;
        setTooltip("Number of open inventory spaces");
    }

    @Override
    public String getText() {
        if (config.renderInventoryInfoBox()) {
            return _text;
        }
        return null;
    }

    @Override
    public Color getTextColor() {
        return Color.WHITE;
    }

    public void setText(String text) {
        if (config.renderInventoryInfoBox()) {
            _text = text;
        }
    }
}

package io.robrichardson.inventorycount;

import javax.inject.Inject;

import com.google.inject.Provides;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;
import net.runelite.client.util.ImageUtil;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.util.Arrays;

@Slf4j
@PluginDescriptor(
        name = "Inventory Count"
)
public class InventoryCountPlugin extends Plugin {
    @Inject
    private Client client;

    @Inject
    private ClientThread clientThread;

    @Inject
    private InfoBoxManager infoBoxManager;

    @Inject
    private InventoryCountOverlay overlay;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private InventoryCountConfig config;

    private static final BufferedImage INVENTORY_IMAGE;

    private static final int INVENTORY_SIZE = 28;

    @Getter
    private InventoryCountInfoBox inventoryCountInfoBox;

    static {
        INVENTORY_IMAGE = ImageUtil.loadImageResource(InventoryCountPlugin.class, "inventory_icon.png");
    }

    @Override
    protected void startUp() throws Exception {
        toggleOverlayAndInfoBox();
    }

    @Override
    protected void shutDown() throws Exception {
        overlayManager.remove(overlay);
        removeInfoBox();
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event) {
        if (!InventoryCountConfig.GROUP.equals(event.getGroup())) return;

        toggleOverlayAndInfoBox();
    }

    @Provides
    InventoryCountConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(InventoryCountConfig.class);
    }

    private void toggleOverlayAndInfoBox() {
        clientThread.invoke(() -> {
            if (config.renderInventoryOverlay()) {
                overlayManager.add(overlay);
            } else {
                overlayManager.remove(overlay);
            }

            if (config.renderInventoryInfoBox()) {
                addInfoBox();
            } else {
                removeInfoBox();
            }

            updateOverlays();
        });
    }

    private void addInfoBox() {
        if (inventoryCountInfoBox == null) {
            inventoryCountInfoBox = new InventoryCountInfoBox(INVENTORY_IMAGE, this, config); // Pass config
            infoBoxManager.addInfoBox(inventoryCountInfoBox);
        }
    }

    private void removeInfoBox() {
        if (inventoryCountInfoBox != null) {
            infoBoxManager.removeInfoBox(inventoryCountInfoBox);
            inventoryCountInfoBox = null;
        }
    }

    private void updateOverlays() {
        String text = String.valueOf(openInventorySpaces());
        Color textColor = getInventoryTextColor();

        overlay.setText(text);
        overlay.setColor(textColor);

        if (inventoryCountInfoBox != null) {
            inventoryCountInfoBox.setText(text);
        }
    }

    public int openInventorySpaces() {
        ItemContainer container = client.getItemContainer(InventoryID.INVENTORY);
        Item[] items = container == null ? new Item[0] : container.getItems();
        int usedSpaces = (int) Arrays.stream(items).filter(p -> p.getId() != -1).count();
        return INVENTORY_SIZE - usedSpaces;
    }

    public Color getInventoryTextColor() {
        int freeSlots = openInventorySpaces();

        if (config.dynamicInventoryOverlayColor()) {
            if (freeSlots > InventoryOverlaySlotSizes.HIGH) {
                return Color.GREEN;
            } else if (freeSlots > InventoryOverlaySlotSizes.MEDIUM) {
                return Color.YELLOW;
            } else if (freeSlots > InventoryOverlaySlotSizes.LOW) {
                return new Color(255, 165, 0); // Light orange
            } else {
                return Color.RED;
            }
        }
        return config.customInventoryOverlayTextColor();
    }

    @Subscribe
    private void onItemContainerChanged(ItemContainerChanged event) {
        if (event.getContainerId() == InventoryID.INVENTORY.getId()) {
            updateOverlays();
        }
    }
}

package io.robrichardson.inventorycount;

public enum InventoryOverlayTextPositions {
    Top,
    Center,
    Bottom
}

package io.robrichardson.inventorycount;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.config.FontType;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.TextComponent;

import javax.inject.Inject;
import java.awt.*;

@Slf4j
public class InventoryCountOverlay extends Overlay {

    private final Client client;
    private final InventoryCountConfig config;
    private final FontType infoboxFontType;

    private String _text = "";
    private Color _color = Color.WHITE; // Default color

    @Inject
    public InventoryCountOverlay(Client client, InventoryCountPlugin plugin, InventoryCountConfig config, ConfigManager configManager) {
        super(plugin);

        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
        setPriority(Overlay.PRIORITY_HIGH);

        this.client = client;
        this.config = config;
        this.infoboxFontType = configManager.getConfiguration("runelite", "infoboxFontType", FontType.class);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (!config.renderInventoryOverlay()) {
            return null;
        }

        Widget inventoryWidget = getInventoryWidget(client);
        if (inventoryWidget == null) return null;

        Font infoboxFont = infoboxFontType.getFont();

        if (config.useCustomFont()) {
            InventoryOverlayTextFonts selectedFontEnum = config.customFont();
            int fontSize = config.customInventoryOverlayFontSize().getSize();

            infoboxFont = new Font(selectedFontEnum.getFontName(), selectedFontEnum.getFontStyle(), fontSize);
        }

        graphics.setFont(infoboxFont);

        TextComponent inventoryOverlayText = getInventoryOverlayText(graphics, inventoryWidget);
        inventoryOverlayText.render(graphics);

        return null;
    }

    public void setText(String text) {
        _text = text;
    }

    public void setColor(Color color) {
        _color = color;
    }

    private Widget getInventoryWidget(Client client) {
        Widget inventoryWidget = client.getWidget(ComponentID.FIXED_VIEWPORT_INVENTORY_TAB);

        if (isInventoryWidgetVisible(inventoryWidget)) {
            return inventoryWidget;
        }

        inventoryWidget = getResizableInventoryWidget(client);

        return isInventoryWidgetVisible(inventoryWidget) ? inventoryWidget : null;
    }

    private Widget getResizableInventoryWidget(Client client) {
        Widget inventoryWidget = client.getWidget(ComponentID.RESIZABLE_VIEWPORT_INVENTORY_TAB);

        if (isInventoryWidgetVisible(inventoryWidget)) {
            return inventoryWidget;
        }

        return client.getWidget(ComponentID.RESIZABLE_VIEWPORT_BOTTOM_LINE_INVENTORY_TAB);
    }

    private boolean isInventoryWidgetVisible(Widget inventoryWidget) {
        return inventoryWidget != null && !inventoryWidget.isHidden();
    }

    private TextComponent getInventoryOverlayText(Graphics2D graphics, Widget inventoryWidget) {
        FontMetrics fontMetrics = graphics.getFontMetrics();
        Rectangle bounds = inventoryWidget.getBounds();
        InventoryOverlayTextPositions textPosition = config.inventoryOverlayTextPosition();
        TextComponent inventoryOverlayText = new TextComponent();

        inventoryOverlayText.setText(_text);
        inventoryOverlayText.setColor(_color);
        inventoryOverlayText.setOutline(config.renderInventoryOverlayTextOutline());

        int textWidth = fontMetrics.stringWidth(_text);
        int textHeight = fontMetrics.getHeight() - fontMetrics.getMaxDescent();
        int x = (int) bounds.getCenterX() - (textWidth / 2);
        int y = (int) bounds.getCenterY() + (textHeight / 2);

        switch (textPosition) {
            case Top:
                y = (int) bounds.getMinY() + textHeight;
                break;
            case Bottom:
                y = (int) bounds.getMaxY();
                break;
        }

        inventoryOverlayText.setPosition(new Point(x, y));

        return inventoryOverlayText;
    }
}

