package tictac7x.rooftops;

import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.ItemID;
import net.runelite.api.Player;
import net.runelite.api.Skill;
import net.runelite.api.Tile;
import net.runelite.api.TileObject;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.HitsplatApplied;
import net.runelite.api.events.ItemDespawned;
import net.runelite.api.events.ItemSpawned;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.events.StatChanged;
import tictac7x.rooftops.courses.*;

import javax.annotation.Nullable;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.regex.Pattern;

public class RooftopsCoursesManager {
    private final Client client;
    private final Course[] courses;

    private final Pattern regexLapComplete = Pattern.compile(".*lap count is:.*");

    private final List<Tile> marksOfGraces = new ArrayList<>();
    private final List<Integer> menuOptionsClicked = new ArrayList<>();
    private Optional<Course> course = Optional.empty();

    public RooftopsCoursesManager(final Client client, final Course[] courses) {
        this.client = client;
        this.courses = courses;
    }

    public void onTileObjectSpawned(final TileObject tileObject) {
        if (detectCourse() && course.isPresent()) {
            for (final Obstacle obstacle : course.get().obstacles) {
                obstacle.checkAndSetTileObject(tileObject);
            }
        }
    }

    public void onGameStateChanged(final GameStateChanged event) {
        // Clear previous obstacles objects (since they will spawn again).
        if (event.getGameState() == GameState.LOADING) {
            if (course.isPresent()) course.get().clearObstaclesTileObjects();
            marksOfGraces.clear();
            course = Optional.empty();
        }
    }

    public void onStatChanged(final StatChanged event) {
        if (course.isPresent() && event.getSkill() == Skill.AGILITY) {
            completeObstacle();
            menuOptionsClicked.clear();
        }
    }

    public void onHitsplatApplied(final HitsplatApplied event) {
        if (course.isPresent() && event.getActor() == client.getLocalPlayer()) {
            completeCourse();
        }
    }

    public void onGameTick(final GameTick ignored) {
        checkStartObstacle();
    }

    public void onChatMessage(final ChatMessage event) {
        if (
            course.isPresent() &&
            event.getType() == ChatMessageType.GAMEMESSAGE &&
            regexLapComplete.matcher(event.getMessage()).find()
        ) {
            completeCourse();
        }
    }

    public void onItemSpawned(final ItemSpawned event) {
        if (event.getItem().getId() == ItemID.MARK_OF_GRACE) {
            marksOfGraces.add(event.getTile());
        }
    }

    public void onItemDespawned(final ItemDespawned event) {
        if (event.getItem().getId() == ItemID.MARK_OF_GRACE) {
            marksOfGraces.remove(event.getTile());
        }
    }

    public Optional<Course> getCourse() {
        return course;
    }

    public List<Tile> getMarksOfGraces() {
        return marksOfGraces;
    }

    public boolean isStoppingObstacle(final int obstacleId) {
        if (!course.isPresent()) return false;

        for (final Tile tile : marksOfGraces) {
            for (final MarkOfGrace mark : course.get().marksOfGraces) {
                if (
                    mark.obstacle == obstacleId &&
                    mark.x == tile.getWorldLocation().getX() &&
                    mark.y == tile.getWorldLocation().getY()
                ) {
                    return true;
                }
            }
        }

        return false;
    }

    private boolean isNearNextObstacle() {
        if (!course.isPresent()) return false;

        final Optional<List<Obstacle>> nextObstacles = course.get().getNextObstacles();
        if (!nextObstacles.isPresent()) return false;

        final Player player = client.getLocalPlayer();
        for (final Obstacle nextObstacle : nextObstacles.get()) {
            for (final WorldPoint obstacle_point : nextObstacle.locations) {
                if (player.getWorldLocation().distanceTo(obstacle_point) <= 1) {
                    return true;
                }
            }
        }

        return false;
    }

    private void startObstacle(final Obstacle obstacle) {
        if (course.isPresent()) {
            course.get().startObstacle(obstacle);
        }
    }

    private void completeObstacle() {
        if (!course.isPresent()) return;

        final Optional<Obstacle> currentObstacle = course.get().getCurrentObstacle();
        if (
            currentObstacle.isPresent() &&
            currentObstacle.get().completeAt.isPresent() &&
            (client.getLocalPlayer().getWorldLocation().getX() != currentObstacle.get().completeAt.get()[0] || client.getLocalPlayer().getWorldLocation().getY() != currentObstacle.get().completeAt.get()[1])
        ) {
            return;
        }

        course.get().completeObstacle();
    }

    private boolean detectCourse() {
        if (client.getLocalPlayer() == null || client.getLocalPlayer().getWorldLocation() == null) return false;

        for (final Course course : courses) {
            if (course.isNearRegion(client.getLocalPlayer().getWorldLocation().getRegionID())) {
                if (this.course.isPresent() && course == this.course.get()) return true;

                // New course found, complete previous.
                completeCourse();
                this.course = Optional.of(course);
                return true;
            }
        }

        this.course = Optional.empty();
        return false;
    }

    private void checkStartObstacle() {
        if (!course.isPresent() || course.get().isDoingObstacle() || !isNearNextObstacle()) return;

        final Optional<List<Obstacle>> nextObstacles = course.get().getNextObstacles();
        if (!nextObstacles.isPresent()) return;

        // Start obstacle.
        for (final Obstacle nextObstacle : nextObstacles.get()) {
            if (menuOptionsClicked.contains(nextObstacle.id)) {
                startObstacle(nextObstacle);
            }
        }
    }

    private void completeCourse() {
        if (course.isPresent()) {
            course.get().completeCourse();
        }
    }

    public void onMenuOptionClicked(final MenuOptionClicked event) {
        menuOptionsClicked.add(event.getId());
    }
}

package tictac7x.rooftops;

import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.api.Tile;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import tictac7x.rooftops.courses.Obstacle;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.util.Arrays;

public class RooftopsOverlay extends Overlay {
    private final Client client;
    private final RooftopsConfig config;
    private final RooftopsCoursesManager coursesManager;

    public RooftopsOverlay(final Client client, final RooftopsConfig config, final RooftopsCoursesManager coursesManager) {
        this.client = client;
        this.config = config;
        this.coursesManager = coursesManager;

        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (!coursesManager.getCourse().isPresent()) return null;

        // Obstacles.
        for (final Obstacle obstacle : coursesManager.getCourse().get().obstacles) {
            if (obstacle.minLevel.isPresent() && getAgilityLevel() < obstacle.minLevel.get()) continue;
            if (obstacle.maxLevel.isPresent() && getAgilityLevel() > obstacle.maxLevel.get()) continue;

            final Color color =
                coursesManager.isStoppingObstacle(obstacle.id)
                    ? config.getObstacleStopColor()
                    : coursesManager.getCourse().get().getNextObstacles().isPresent() && coursesManager.getCourse().get().getNextObstacles().get().stream().anyMatch(o -> o.id == obstacle.id)
                        ? coursesManager.getCourse().get().isDoingObstacle()
                            ? config.getObstacleNextUnavailableColor()
                            : config.getObstacleNextColor()
                        : config.getObstacleUnavailableColor();

            if (obstacle.getTileObject().isPresent()) {
                renderShape(graphics, obstacle.getTileObject().get().getClickbox(), color);
            }
        }

        // Mark of graces.
        for (final Tile mark : coursesManager.getMarksOfGraces()) {
            renderShape(graphics, mark.getItemLayer().getCanvasTilePoly(), config.getMarkOfGraceColor());
        }

        return null;
    }

    private void renderShape(final Graphics2D graphics, final Shape shape, final Color color) {
        if (shape == null || color.getAlpha() == 0) return;

        try {
            // Area border.
            graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), Math.min(255, color.getAlpha() + 20)));
            graphics.setStroke(new BasicStroke(1));
            graphics.draw(shape);

            // Area fill.
            graphics.setColor(color);
            graphics.fill(shape);
        } catch (final Exception ignored) {}
    }

    private int getAgilityLevel() {
        return client.getBoostedSkillLevel(Skill.AGILITY);
    }
}

package tictac7x.rooftops.courses;

import tictac7x.rooftops.MarkOfGrace;

public class RooftopCourseVarlamore extends Course {
    public RooftopCourseVarlamore() {
        super("Varlamore",
            // Regions.
            new int[]{6701,6445,},

            // Obstacles.
            new Obstacle[]{
                new Obstacle(55178, 0, new int[][]{{1652, 2931}}),
                new Obstacle(55180, 1, new int[][]{{1655, 2925}})
                    .completeAt(1649, 2910)
                    .nextObstacle(55191, 55184),

                // Basic.
                new Obstacle(55184, 1, new int[][]{{1646, 2910}})
                    .maxLevel(61),
                new Obstacle(55186, 1, new int[][]{{1631, 2910}})
                    .maxLevel(61),
                new Obstacle(55190, 1, new int[][]{{1626, 2932}})
                    .maxLevel(61)
                    .nextObstacle(55179),

                // Advanced.
                new Obstacle(55191, 1, new int[][]{{1648, 2909}})
                    .minLevel(62),
                new Obstacle(55192, 2, new int[][]{{1646, 2907}})
                    .minLevel(62),
                new Obstacle(55194, 2, new int[][]{{1633, 2908}})
                    .minLevel(62)
                    .completeAt(1624, 2931)
                    .nextObstacle(55179),

                // End.
                new Obstacle(55179, 2, new int[][]{{1626, 2933}}),
            },

            new MarkOfGrace[]{}
        );
    }
}


package tictac7x.rooftops.courses;

import tictac7x.rooftops.MarkOfGrace;

public class RooftopCourseSeers extends Course {
    public RooftopCourseSeers() {
        super("Seers' Village",
            // Regions.
            new int[]{10549,10550,10551,10805,10806,10807,11061,11062,11063},

            // Obstacles.
            new Obstacle[]{
                new Obstacle(14927, 0, new int[][]{{2729, 3489}}),
                new Obstacle(14928, 3, new int[][]{{2720, 3492}, {2720, 3493}, {2720, 3494}, {2720, 3495}, {2720, 3496}}),
                new Obstacle(14932, 2, new int[][]{{2710, 3489}}),
                new Obstacle(14929, 2, new int[][]{{2710, 3476}, {2711, 3476}, {2712, 3476}, {2713, 3476}, {2714, 3476}}),
                new Obstacle(14930, 3, new int[][]{{2700, 3469}, {2701, 3469}, {2702, 3469}, {2703, 3469}}),
                new Obstacle(14931, 2, new int[][]{{2703, 3461}, {2703, 3462}, {2703, 3463}, {2703, 3464}, {2703, 3465}})
            },

            new MarkOfGrace[]{
                //
                new MarkOfGrace(2727, 3493, 14928),
                new MarkOfGrace(2706, 3493, 14932), new MarkOfGrace(2709, 3493, 14932),
                new MarkOfGrace(2712, 3481, 14929),
                //
                new MarkOfGrace(2698, 3465, 14931)
            }
        );
    }
}
package tictac7x.rooftops.courses;

import tictac7x.rooftops.MarkOfGrace;

public class RooftopCourseVarrock extends Course {
    public RooftopCourseVarrock() {
        super("Varrock",
            // Regions.
            new int[]{12596,12597,12598,12852,12853,12854},

            // Obstacles.
            new Obstacle[]{
                new Obstacle(14412, 0, new int[][]{{3221, 3414}}),
                new Obstacle(14413, 3, new int[][]{{3213, 3414}}),
                new Obstacle(14414, 3, new int[][]{{3200, 3416}, {3200, 3417}}),
                new Obstacle(14832, 1, new int[][]{{3192, 3416}, {3193, 3416}, {3194, 3416}}),
                new Obstacle(14833, 3, new int[][]{{3193, 3401}, {3194, 3401}, {3195, 3401}, {3196, 3401}, {3197, 3401}, {3198, 3401}}),
                new Obstacle(14834, 3, new int[][]{{3209, 3397}, {3209, 3398}, {3209, 3399}, {3209, 3400}, {3209, 3401}}),
                new Obstacle(14835, 3, new int[][]{{3233, 3402}}),
                new Obstacle(14836, 3, new int[][]{{3236, 3409}, {3237, 3409}, {3238, 3409}, {3239, 3409}, {3240, 3409}}),
                new Obstacle(14841, 3, new int[][]{{3236, 3416}, {3237, 3416}, {3238, 3416}, {3239, 3416}, {3240, 3416}}),
            },

            new MarkOfGrace[]{
                //
                //
                //
                new MarkOfGrace(3195, 3416, 14832),
                //
                new MarkOfGrace(3186, 3395, 14834), new MarkOfGrace(3191, 3394, 14834),
                new MarkOfGrace(3220, 3402, 14835),
                new MarkOfGrace(3238, 3408, 14836)
                //
            }
        );
    }
}

package tictac7x.rooftops.courses;

import tictac7x.rooftops.MarkOfGrace;

public class RooftopCourseAlKharid extends Course {
    public RooftopCourseAlKharid() {
        super("Al Kharid",
            // Regions.
            new int[]{ 12848, 12849,12850,13104,13105,13106,13360,13361,13362 },

            // Obstacles.
            new Obstacle[]{
                new Obstacle(11633, 0, new int[][]{{3273, 3195}}),
                new Obstacle(14398, 3, new int[][]{{3272, 3181}}),
                new Obstacle(14402, 3, new int[][]{{3265, 3166}, {3266, 3166}, {3267, 3166}, {3268, 3166}, {3269, 3166}}),
                new Obstacle(14403, 3, new int[][]{{3302, 3163}, {3303, 3163}}),
                new Obstacle(14404, 1, new int[][]{{3318, 3166}}),
                new Obstacle(11634, 2, new int[][]{{3316, 3179}}),
                new Obstacle(14409, 3, new int[][]{{3313, 3186}}),
                new Obstacle(14399, 3, new int[][]{{3300, 3193}}),
            },

            new MarkOfGrace[]{
                //
                new MarkOfGrace(3277, 3186, 14398),
                new MarkOfGrace(3266, 3163, 14402),
                //
                new MarkOfGrace(3315, 3161, 14404)
                //
                //
                //
            }
        );
    }
}

package tictac7x.rooftops.courses;

import tictac7x.rooftops.MarkOfGrace;

public class RooftopCourseFalador extends Course {
    public RooftopCourseFalador() {
        super("Falador",
            // Regions.
            new int[]{11827,11828,11829,12083,12084,12085},

            // Obstacles.
            new Obstacle[]{
                new Obstacle(14898, 0, new int[][]{{3036, 3341}}),
                new Obstacle(14899, 3, new int[][]{{3040, 3343}}),
                new Obstacle(14901, 3, new int[][]{{3050, 3350}}),
                new Obstacle(14903, 3, new int[][]{{3048, 3359}}),
                new Obstacle(14904, 3, new int[][]{{3044, 3361}, {3044, 3362}, {3044, 3363}, {3044, 3364}}),
                new Obstacle(14905, 3, new int[][]{{3034, 3361}, {3034, 3362}}),
                new Obstacle(14911, 3, new int[][]{{3026, 3353}}),
                new Obstacle(14919, 3, new int[][]{{3018, 3352}, {3017, 3352}, {3016, 3352}}),
                new Obstacle(14920, 3, new int[][]{{3015, 3345}, {3015, 3346}}),
                new Obstacle(14921, 3, new int[][]{{3013, 3343}, {3012, 3343}, {3011, 3343}})
                    .nextObstacle(14922, 14923),
                new Obstacle(14922, 3, new int[][]{{3012, 3334}, {3013, 3334}})
                    .nextObstacle(14924),
                new Obstacle(14923, 3, new int[][]{{3014, 3335}})
                    .nextObstacle(14924),
                new Obstacle(14924, 3, new int[][]{{3018, 3334}, {3018, 3333}, {3018, 3332}}),
                new Obstacle(14925, 3, new int[][]{{3025, 3335}, {3025, 3334}, {3025, 3333}, {3025, 3332}}),
            },

            new MarkOfGrace[]{}
        );
    }
}

package tictac7x.rooftops.courses;

import tictac7x.rooftops.MarkOfGrace;

public class RooftopCourseDraynor extends Course {
    public RooftopCourseDraynor() {
        super("Draynor Village",
            // Regions.
            new int[]{12082,12338,12339,12594,12595},

            // Obstacles.
            new Obstacle[]{
                new Obstacle(11404, 0, new int[][]{{3103, 3279}}),
                new Obstacle(11405, 3, new int[][]{{3098, 3277}}),
                new Obstacle(11406, 3, new int[][]{{3092, 3276}}),
                new Obstacle(11430, 3, new int[][]{{3089, 3264}}),
                new Obstacle(11630, 3, new int[][]{{3088, 3256}}),
                new Obstacle(11631, 3, new int[][]{{3095, 3255}}),
                new Obstacle(11632, 3, new int[][]{{3102, 3261}})
            },

            new MarkOfGrace[]{
                //
                new MarkOfGrace(3098, 3281, 11405),
                new MarkOfGrace(3089, 3274, 11406),
                new MarkOfGrace(3094, 3266, 11430),
                //
                //
                new MarkOfGrace(3100, 3257, 11632), new MarkOfGrace(3097, 3259, 11632)
            }
        );
    }
}

package tictac7x.rooftops.courses;

import tictac7x.rooftops.MarkOfGrace;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public abstract class Course {
    public final String id;
    public final int[] regions;
    public final Obstacle[] obstacles;
    public final MarkOfGrace[] marksOfGraces;

    private Optional<Obstacle> currentObstacle = Optional.empty();
    private boolean doingObstacle;

    public Course(
        final String id,
        final int[] regions,
        final Obstacle[] obstacles,
        final MarkOfGrace[] marksOfGraces
    ) {
        this.id = id;
        this.regions = regions;
        this.obstacles = obstacles;
        this.marksOfGraces = marksOfGraces;
    }

    public Optional<Obstacle> getCurrentObstacle() {
        return currentObstacle;
    }

    public Optional<List<Obstacle>> getNextObstacles() {
        // Course not started.
        if (!currentObstacle.isPresent()) {
            return Optional.of(new ArrayList<>(Arrays.asList(obstacles[0])));
        }

        final Optional<List<Integer>> fixedNextObstacles = currentObstacle.get().nextObstacles;
        if (fixedNextObstacles.isPresent()) {
            final List<Obstacle> next = new ArrayList<>();
            for (final Obstacle obstacle : obstacles) {
                if (fixedNextObstacles.get().contains(obstacle.id)) {
                    next.add(obstacle);
                }
            }
            return Optional.of(next);
        }

        int currentObstacleIndex = 0;
        for (final Obstacle obstacle : obstacles) {
            if (obstacle.id == currentObstacle.get().id) {
                break;
            }

            currentObstacleIndex++;
        }

        // Current obstacle is last.
        if (currentObstacleIndex < obstacles.length - 1) {
            return Optional.of(new ArrayList<>(Arrays.asList(obstacles[currentObstacleIndex + 1])));
        }

        return Optional.empty();
    }

    public void startObstacle(final Obstacle obstacle) {
        if (doingObstacle) return;

        currentObstacle = Optional.of(obstacle);
        doingObstacle = true;
    }

    public void completeObstacle() {
        doingObstacle = false;
    }

    public void completeCourse() {
        currentObstacle = Optional.empty();
        doingObstacle = false;
    }

    public boolean isDoingObstacle() {
        return doingObstacle;
    }

    public boolean isNearRegion(final int region) {
        for (final int courseRegion : this.regions) {
            if (courseRegion == region) {
                return true;
            }
        }

        return false;
    }

    public void clearObstaclesTileObjects() {
        for (final Obstacle obstacle : obstacles) {
            obstacle.clearTileObject();
        }
    }
}

package tictac7x.rooftops.courses;

import tictac7x.rooftops.MarkOfGrace;

public class RooftopCourseRellekka extends Course {
    public RooftopCourseRellekka() {
        super("Rellekka",
            // Regions.
            new int[]{10296,10297,10552,10553,10808,10809},

            // Obstacles.
            new Obstacle[]{
                new Obstacle(14946, 0, new int[][]{{2625, 3677}}),
                new Obstacle(14947, 3, new int[][]{{2623, 3671}, {2622, 3671}, {2621, 3671}}),
                new Obstacle(14987, 3, new int[][]{{2623, 3658}}),
                new Obstacle(14990, 3, new int[][]{{2629, 3656}, {2630, 3656}}),
                new Obstacle(14991, 3, new int[][]{{2643, 3654}, {2644, 3654}}),
                new Obstacle(14992, 3, new int[][]{{2647, 3663}}),
                new Obstacle(14994, 3, new int[][]{{2654, 3676}}),
            },

            new MarkOfGrace[]{
                //
                new MarkOfGrace(2623, 3675, 14947),
                new MarkOfGrace(2627, 3654, 14990), new MarkOfGrace(2629, 3653, 14990), new MarkOfGrace(2628, 3652, 14990),
                //
                new MarkOfGrace(2641, 3650, 14991), new MarkOfGrace(2642, 3651, 14991)
            }
        );
    }
}
package tictac7x.rooftops.courses;

import tictac7x.rooftops.MarkOfGrace;

public class RooftopCourseApeAtoll extends Course {
    public RooftopCourseApeAtoll() {
        super("Ape Atoll",
            // Regions.
            new int[]{ 10794, 11050, 11051 },

            // Obstacles.
            new Obstacle[]{
                new Obstacle(15412, 0, new int[][]{{2754, 2742}}),
                new Obstacle(15414, 0, new int[][]{{2753, 2741}}),
                new Obstacle(15417, 2, new int[][]{{2752, 2741}}),
                new Obstacle(1747, 0, new int[][]{{2746, 2741}}),
                new Obstacle(15487, 0, new int[][]{{2752, 2731}}),
                new Obstacle(16062, 0, new int[][]{{2757, 2734}}),
            },

            new MarkOfGrace[]{
                //
                //
                //
                //
                new MarkOfGrace(2745, 2735, 15487),
            }
        );
    }
}

package tictac7x.rooftops.courses;

import net.runelite.api.TileObject;
import net.runelite.api.coords.WorldPoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class Obstacle {
    public final int id;
    public final List<WorldPoint> locations;
    private Optional<TileObject> tileObject = Optional.empty();

    public Optional<int[]> completeAt = Optional.empty();
    public Optional<List<Integer>> nextObstacles = Optional.empty();
    public Optional<Integer> minLevel = Optional.empty();
    public Optional<Integer> maxLevel = Optional.empty();

    public Obstacle(final int id, final int plane, final int[][] locations) {
        this.id = id;
        this.locations = new ArrayList<>();
        for (final int[] location : locations) {
            this.locations.add(new WorldPoint(location[0], location[1], plane));
        }
    }

    public void checkAndSetTileObject(final TileObject tileObject) {
        if (tileObject.getId() == id) {
            this.tileObject = Optional.of(tileObject);
        }
    }

    public void clearTileObject() {
        tileObject = Optional.empty();
    }

    public Optional<TileObject> getTileObject() {
        return tileObject;
    }

    public Obstacle completeAt(final int x, final int y) {
        completeAt = Optional.of(new int[]{x, y});
        return this;
    }

    public Obstacle nextObstacle(final int... ids) {
        nextObstacles = Optional.of(Arrays.stream(ids).boxed().collect(Collectors.toList()));
        return this;
    }

    public Obstacle minLevel(final int level) {
        this.minLevel = Optional.of(level);
        return this;
    }

    public Obstacle maxLevel(final int level) {
        this.maxLevel = Optional.of(level);
        return this;
    }
}

package tictac7x.rooftops.courses;

import tictac7x.rooftops.MarkOfGrace;

public class RooftopCourseArdougne extends Course {
    public RooftopCourseArdougne() {
        super("Ardougne",
            // Regions.
            new int[]{10290,10291,10292,10546,10547,10548,10802,10803,10804},

            // Obstacles.
            new Obstacle[]{
                new Obstacle(15608, 0, new int[][]{{2673, 3298}}),
                new Obstacle(15609, 3, new int[][]{{2670, 3310}, {2671, 3310}}),
                new Obstacle(26635, 3, new int[][]{{2661, 3318}}),
                new Obstacle(15610, 3, new int[][]{{2653, 3317}, {2653, 3318}}),
                new Obstacle(15611, 3, new int[][]{{2653, 3308}, {2653, 3309}}),
                new Obstacle(28912, 3, new int[][]{{2654, 3300}}),
                new Obstacle(15612, 3, new int[][]{{2656, 3296}, {2657, 3296}})
            },

            new MarkOfGrace[]{
                new MarkOfGrace(2657, 3318, 15610)
            }
        );
    }
}


package tictac7x.rooftops.courses;

import tictac7x.rooftops.MarkOfGrace;

public class RooftopCoursePollnivneach extends Course {
    public RooftopCoursePollnivneach() {
        super("Pollnivneach",
            // Regions.
            new int[]{13101,13102,13103,13357,13358,13359,13613,13614,13615},

            // Obstacles.
            new Obstacle[]{
                new Obstacle(14935, 0, new int[][]{{3351, 2962}}),
                new Obstacle(14936, 1, new int[][]{{3349, 2969}, {3350, 2969}, {3351, 2969}}),
                new Obstacle(14937, 1, new int[][]{{3355, 2977}, {3356, 2977}, {3355, 2976}}),
                new Obstacle(14938, 1, new int[][]{{3363, 2977}}),
                new Obstacle(14939, 1, new int[][]{{3367, 2977}, {3368, 2977}, {3369, 2977}}),
                new Obstacle(14940, 1, new int[][]{{3365, 2982}}),
                new Obstacle(14941, 2, new int[][]{{3358, 2985}}),
                new Obstacle(14944, 2, new int[][]{{3359, 2996}, {3360, 2996}, {3361, 2996}}),
                new Obstacle(14945, 2, new int[][]{{3363, 3001}}),
            },

            new MarkOfGrace[]{
                //
                new MarkOfGrace(3346, 2968, 14936),
                new MarkOfGrace(3353, 2975, 14937),
                //
                //
                //
                new MarkOfGrace(3359, 2983, 14941),
                new MarkOfGrace(3362, 2993, 14944),
                new MarkOfGrace(3357, 3002, 14945)
            }
        );
    }
}
package tictac7x.rooftops.courses;

import tictac7x.rooftops.MarkOfGrace;

public class RooftopCourseCanifis extends Course {
    public RooftopCourseCanifis() {
        super("Canifis",
            // Regions.
            new int[]{13621,13622,13623,13877,13878,13879,14133,14134,14135},

            // Obstacles.
            new Obstacle[]{
                new Obstacle(14843, 0, new int[][]{{3508, 3489}}),
                new Obstacle(14844, 2, new int[][]{{3505, 3498}, {3506, 3498}}),
                new Obstacle(14845, 2, new int[][]{{3496, 3503}, {3496, 3504}, {3496, 3505}, {3497, 3504}, {3497, 3505}}),
                new Obstacle(14848, 2, new int[][]{{3486, 3499}}),
                new Obstacle(14846, 3, new int[][]{{3478, 3492}}),
                new Obstacle(14894, 2, new int[][]{{3480, 3483}}),
                new Obstacle(14847, 3, new int[][]{{3503, 3476}, {3504, 3475}, {3504, 3476}}),
                new Obstacle(14897, 2, new int[][]{{3510, 3483}}),
            },

            new MarkOfGrace[]{
                new MarkOfGrace(3506, 3495, 14844),
                new MarkOfGrace(3501, 3505, 14845),
                new MarkOfGrace(3490, 3501, 14848),
                new MarkOfGrace(3478, 3496, 14846),
                new MarkOfGrace(3478, 3484, 14894)
            }
        );
    }
}

package tictac7x.rooftops;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

import java.awt.Color;

import static tictac7x.rooftops.RooftopsConfig.group;

@ConfigGroup(group)
public interface RooftopsConfig extends Config {
	String group = "tictac7x-rooftops";
	String version = "version";

	@ConfigItem(
		keyName = version,
		name = version,
		description = "Version of the plugin for update message",
		hidden = true
	) default String getVersion() { return ""; }

	@ConfigSection(
		name = "Obstacles",
		description = "Obstacles",
		position = 1
	) String obstacles = "obstacles";

		@Alpha
		@ConfigItem(
			keyName = "obstacle_next",
			name = "Next",
			description = "Color of the next obstacle.",
			position = 1,
			section = obstacles
		) default Color getObstacleNextColor() { return new Color(0, 255, 0, 80); }

		@Alpha
		@ConfigItem(
			keyName = "obstacle_next_unavailable",
			name = "Next unavailable",
			description = "Color of the next obstacle.",
			position = 2,
			section = obstacles
		) default Color getObstacleNextUnavailableColor() { return new Color(200, 255, 0, 80); }

		@Alpha
		@ConfigItem(
			keyName = "obstacle_unavailable",
			name = "Other",
			description = "Color of other obstacles.",
			position = 3,
			section = obstacles
		) default Color getObstacleUnavailableColor() { return new Color(255, 150, 0, 70); }

		@Alpha
		@ConfigItem(
			keyName = "obstacle_stop",
			name = "Stop",
			description = "Color of obstacle that should not be used, because Mark of grace is on the ground.",
			position = 4,
			section = obstacles
		) default Color getObstacleStopColor() { return new Color(255, 0, 0, 80); }

	@ConfigSection(
		name = "Marks of graces",
		description = "Marks of graces",
		position = 2
	) String marks_of_graces = "marks_of_graces";

		@Alpha
		@ConfigItem(
			keyName = "mark_of_grace",
			name = "Mark of grace",
			description = "Color of the Mark of grace.",
			position = 1,
			section = marks_of_graces
		) default Color getMarkOfGraceColor() { return new Color(0, 255, 0, 80); }
}

package tictac7x.rooftops;

public class MarkOfGrace {
    public final int x;
    public final int y;
    public final int obstacle;

    public MarkOfGrace(final int x, final int y, final int obstacle) {
        this.x = x;
        this.y = y;
        this.obstacle = obstacle;
    }
}

package tictac7x.rooftops;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.*;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import tictac7x.rooftops.courses.*;

import javax.inject.Inject;

@Slf4j
@PluginDescriptor(
	name = "Rooftop Agility Improved",
	description = "Improved clickboxes for rooftop agility courses",
	tags = { "roof", "rooftop", "agility", "mark", "grace", "graceful" }
)
public class RooftopsPlugin extends Plugin {
	private final String pluginVersion = "v0.6.1";
	private final String pluginMessage = "" +
		"<colHIGHLIGHT>Rooftop Agility Improved " + pluginVersion + ":<br>" +
		"<colHIGHLIGHT>* Varlamore course added.<br>" +
		"<colHIGHLIGHT>* Ape Atoll course added.<br>" +
		"<colHIGHLIGHT>* Multi paths support and skill level checks."
	;

	@Inject
	private Client client;

	@Inject
	private OverlayManager overlays;

	@Inject
	private ConfigManager configManager;

	@Inject
	private ChatMessageManager chatMessageManager;

	@Inject
	private RooftopsConfig config;

	private RooftopsCoursesManager coursesManager;

	private RooftopsOverlay overlayRooftops;

	@Provides
	RooftopsConfig provideConfig(final ConfigManager configManager) {
		return configManager.getConfig(RooftopsConfig.class);
	}

	@Override
	protected void startUp() {
		coursesManager = new RooftopsCoursesManager(client, new Course[]{
			// Rooftops with marks of grace.
			new RooftopCourseDraynor(),
			new RooftopCourseAlKharid(),
			new RooftopCourseVarrock(),
			new RooftopCourseCanifis(),
			new RooftopCourseFalador(),
			new RooftopCourseSeers(),
			new RooftopCoursePollnivneach(),
			new RooftopCourseRellekka(),
			new RooftopCourseArdougne(),

			// Other.
			new RooftopCourseVarlamore(),
			new RooftopCourseApeAtoll()
		});
		overlayRooftops = new RooftopsOverlay(client, config, coursesManager);
		overlays.add(overlayRooftops);
	}

	@Override
	protected void shutDown() {
		overlays.remove(overlayRooftops);
	}

	@Subscribe
	public void onGameObjectSpawned(final GameObjectSpawned event) {
		coursesManager.onTileObjectSpawned(event.getGameObject());
	}

	@Subscribe
	public void onWallObjectSpawned(final WallObjectSpawned event) {
		coursesManager.onTileObjectSpawned(event.getWallObject());
	}

	@Subscribe
	public void onGroundObjectSpawned(final GroundObjectSpawned event) {
		coursesManager.onTileObjectSpawned(event.getGroundObject());
	}

	@Subscribe
	public void onDecorativeObjectSpawned(final DecorativeObjectSpawned event) {
		coursesManager.onTileObjectSpawned(event.getDecorativeObject());
	}

	@Subscribe
	public void onItemSpawned(final ItemSpawned event) {
		coursesManager.onItemSpawned(event);
	}

	@Subscribe
	public void onItemDespawned(final ItemDespawned event) {
		coursesManager.onItemDespawned(event);
	}

	@Subscribe
	public void onChatMessage(final ChatMessage event) {
		coursesManager.onChatMessage(event);
	}

	@Subscribe
	public void onStatChanged(final StatChanged event) {
		coursesManager.onStatChanged(event);
	}

	@Subscribe
	public void onHitsplatApplied(final HitsplatApplied event) {
		coursesManager.onHitsplatApplied(event);
	}

	@Subscribe
	public void onGameTick(final GameTick gametick) {
		coursesManager.onGameTick(gametick);
	}

	@Subscribe
	public void onGameStateChanged(final GameStateChanged event) {
		coursesManager.onGameStateChanged(event);

		// Send message about plugin updates for once.
		if (event.getGameState() == GameState.LOGGED_IN && !config.getVersion().equals(pluginVersion)) {
			configManager.setConfiguration(RooftopsConfig.group, RooftopsConfig.version, pluginVersion);
			chatMessageManager.queue(QueuedMessage.builder()
				.type(ChatMessageType.CONSOLE)
				.runeLiteFormattedMessage(pluginMessage)
				.build()
			);
		}
	}

	@Subscribe
	public void onMenuOptionClicked(final MenuOptionClicked event) {
		coursesManager.onMenuOptionClicked(event);
	}
}

package tictac7x.rooftops;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class RooftopsPluginTest {
	public static void main(String[] args) throws Exception {
		ExternalPluginManager.loadBuiltin(RooftopsPlugin.class);
		RuneLite.main(args);
	}
}
