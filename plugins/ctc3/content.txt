package com.example;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ExamplePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ExamplePlugin.class);
		RuneLite.main(args);
	}
}
package com.ctc3;

import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Player;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.plugins.cluescrolls.clues.emote.Emote;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

import javax.inject.Inject;
import java.awt.*;

public class CrackTheClue3Overlay extends Overlay {

    private final CrackTheClue3Plugin plugin;
    private final Client client;

    private boolean hasScrolled;

    @Inject
    private CrackTheClue3Overlay(CrackTheClue3Plugin plugin, Client client) {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
        this.plugin = plugin;
        this.client = client;
    }

    @Override
    public Dimension render(Graphics2D graphics) {

        if (client.getGameState() != GameState.LOGGED_IN) {
            return null;
        }

        Emote currentEmote = plugin.getCurrentEmote();

        if (currentEmote == null || !currentEmote.hasSprite()) {
            return null;
        }

        Player localPlayer = client.getLocalPlayer();
        // Check to make sure we're in the basement or standing next to the gates to get in/out
        if (localPlayer == null || localPlayer.getWorldLocation().getRegionID() != 12697 ||
                (!localPlayer.getWorldLocation().equals(new WorldPoint(3191, 9825, 0))
                        && !localPlayer.getWorldLocation().equals(new WorldPoint(3192, 9825, 0))
                        && !localPlayer.getWorldLocation().equals(new WorldPoint(3191, 9824, 0))
                        && !localPlayer.getWorldLocation().equals(new WorldPoint(3192, 9824, 0)))) {
            return null;
        }

        Widget emoteContainer = client.getWidget(ComponentID.EMOTES_EMOTE_CONTAINER);

        if (emoteContainer == null || emoteContainer.isHidden()) {
            return null;
        }

        Widget emoteWindow = client.getWidget(ComponentID.EMOTES_WINDOW);

        if (emoteWindow == null) {
            return null;
        }

        Widget firstEmoteWidget = null;
        Widget secondEmoteWidget = null;

        for (Widget emoteWidget : emoteContainer.getDynamicChildren()) {
            if (emoteWidget.getSpriteId() == currentEmote.getSpriteId()) {
                firstEmoteWidget = emoteWidget;
                plugin.highlightWidget(graphics, emoteWidget, emoteWindow, null, null);
            }
        }
        if (!hasScrolled) {
            hasScrolled = true;
            plugin.scrollToWidget(ComponentID.EMOTES_EMOTE_SCROLL_CONTAINER, ComponentID.EMOTES_EMOTE_SCROLLBAR, firstEmoteWidget, secondEmoteWidget);
        }
        return null;
    }
}

package com.ctc3;

import com.google.common.base.MoreObjects;
import com.google.common.collect.ImmutableList;
import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Player;
import net.runelite.api.ScriptID;
import net.runelite.api.annotations.Component;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.widgets.Widget;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.cluescrolls.clues.emote.Emote;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.ui.overlay.components.TextComponent;

import javax.inject.Inject;
import java.awt.*;
import java.awt.geom.Area;
import java.util.Arrays;
import java.util.List;

import static net.runelite.client.plugins.cluescrolls.clues.emote.Emote.*;

@PluginDescriptor(
        name = "CrackTheClue3 Emote",
        description = "Show the emotes to do in order for Varrock vault",
        tags = {"crack", "clue", "emote"}
)
public class CrackTheClue3Plugin extends Plugin {

    private List<Emote> EMOTES = ImmutableList.of(PANIC, NO, BECKON, LAUGH, SHRUG, CRY, SPIN, YES,
            THINK, DANCE, BLOW_KISS, WAVE, BOW, PANIC, HEADBANG, JUMP_FOR_JOY, ANGRY);

    @AllArgsConstructor
    enum Emote2Anim {
        PANIC(Emote.PANIC, 2105),
        NO(Emote.NO, 856),
        BECKON(Emote.BECKON, 864),
        LAUGH(Emote.LAUGH, 861),
        SHRUG(Emote.SHRUG, 2113),
        CRY(Emote.CRY, 860),
        SPIN(Emote.SPIN, 2107),
        YES(Emote.YES, 855),
        THINK(Emote.THINK, 857),
        DANCE(Emote.DANCE, 866),
        BLOW_KISS(Emote.BLOW_KISS, 1374),
        WAVE(Emote.WAVE, 863),
        BOW(Emote.BOW, 858),
        PANIC_TWO(Emote.PANIC, 2105),
        HEADBANG(Emote.HEADBANG, 2108),
        JUMP_FOR_JOY(Emote.JUMP_FOR_JOY, 2109),
        ANGRY(Emote.ANGRY, 859),


        ;

        private final Emote emote;
        private final int animationId;

        public static Emote2Anim of(final int animationId, final int currentIndex) {
            if (animationId == PANIC.animationId && currentIndex >= 10) {
                return PANIC_TWO;
            }
            return Arrays.stream(values()).filter(emote -> emote.animationId == animationId).findAny().orElse(null);
        }
    }

    private static final Color HIGHLIGHT_BORDER_COLOR = Color.ORANGE;
    private static final Color HIGHLIGHT_HOVER_BORDER_COLOR = HIGHLIGHT_BORDER_COLOR.darker();
    private static final Color HIGHLIGHT_FILL_COLOR = new Color(0, 255, 0, 20);

    private int emoteIndex;

    @Inject
    @Getter
    private Client client;
    @Inject
    private OverlayManager overlayManager;
    @Inject
    private CrackTheClue3Overlay clueOverlay;

    private final TextComponent textComponent = new TextComponent();

    @Override
    protected void startUp() throws Exception {
        overlayManager.add(clueOverlay);
    }

    @Override
    protected void shutDown() throws Exception {
        overlayManager.remove(clueOverlay);
    }

    @Subscribe
    public void onAnimationChanged(final AnimationChanged event) {
        if (client.getGameState() != GameState.LOGGED_IN) {
            return;
        }

        Player localPlayer = client.getLocalPlayer();
        if (localPlayer != event.getActor() || localPlayer.getWorldLocation().getRegionID() != 12697 ||
                (!localPlayer.getWorldLocation().equals(new WorldPoint(3191, 9825, 0))
                        && !localPlayer.getWorldLocation().equals(new WorldPoint(3192, 9825, 0))
                        && !localPlayer.getWorldLocation().equals(new WorldPoint(3191, 9824, 0))
                        && !localPlayer.getWorldLocation().equals(new WorldPoint(3192, 9824, 0)))) {
            return;
        }

        final Emote2Anim emote = Emote2Anim.of(localPlayer.getAnimation(), emoteIndex);
        if (emote == null) {
            return;
        }
        emoteIndex++;
    }

    public Emote getCurrentEmote() {
        if (emoteIndex >= EMOTES.size()) {
            emoteIndex = 0;
            return null;
        }
        return EMOTES.get(emoteIndex);
    }

    void highlightWidget(Graphics2D graphics, Widget toHighlight, Widget container, Rectangle padding, String text) {
        padding = MoreObjects.firstNonNull(padding, new Rectangle());

        net.runelite.api.Point canvasLocation = toHighlight.getCanvasLocation();

        if (canvasLocation == null) {
            return;
        }

        net.runelite.api.Point windowLocation = container.getCanvasLocation();

        if (windowLocation.getY() > canvasLocation.getY() + toHighlight.getHeight()
                || windowLocation.getY() + container.getHeight() < canvasLocation.getY()) {
            return;
        }

        // Visible area of widget
        Area widgetArea = new Area(
                new Rectangle(
                        canvasLocation.getX() - padding.x,
                        Math.max(canvasLocation.getY(), windowLocation.getY()) - padding.y,
                        toHighlight.getWidth() + padding.x + padding.width,
                        Math.min(
                                Math.min(windowLocation.getY() + container.getHeight() - canvasLocation.getY(), toHighlight.getHeight()),
                                Math.min(canvasLocation.getY() + toHighlight.getHeight() - windowLocation.getY(), toHighlight.getHeight())) + padding.y + padding.height
                ));

        OverlayUtil.renderHoverableArea(graphics, widgetArea, client.getMouseCanvasPosition(),
                HIGHLIGHT_FILL_COLOR, HIGHLIGHT_BORDER_COLOR, HIGHLIGHT_HOVER_BORDER_COLOR);

        if (text == null) {
            return;
        }

        FontMetrics fontMetrics = graphics.getFontMetrics();

        textComponent.setPosition(new Point(
                canvasLocation.getX() + toHighlight.getWidth() / 2 - fontMetrics.stringWidth(text) / 2,
                canvasLocation.getY() + fontMetrics.getHeight()));
        textComponent.setText(text);
        textComponent.render(graphics);
    }

    void scrollToWidget(@Component int list, @Component int scrollbar, Widget... toHighlight) {
        final Widget parent = client.getWidget(list);
        int averageCentralY = 0;
        int nonnullCount = 0;
        for (Widget widget : toHighlight) {
            if (widget != null) {
                averageCentralY += widget.getRelativeY() + widget.getHeight() / 2;
                nonnullCount += 1;
            }
        }
        if (nonnullCount == 0) {
            return;
        }
        averageCentralY /= nonnullCount;
        final int newScroll = Math.max(0, Math.min(parent.getScrollHeight(),
                averageCentralY - parent.getHeight() / 2));

        client.runScript(
                ScriptID.UPDATE_SCROLLBAR,
                scrollbar,
                list,
                newScroll
        );
    }

}

