package com.farminghelper.speaax;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PluginLauncher
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(FarmingHelperPlugin.class);
		RuneLite.main(args);
	}
}
package com.farminghelper.speaax;

import net.runelite.api.Client;

import java.util.Arrays;
import java.util.List;

public class FlowerPatchChecker {
    // Add lists for each plant state
    private static final List<Integer> harvestable = Arrays.asList(32);
    private static final List<Integer> growing = Arrays.asList(28, 29, 30, 31);
    private static final List<Integer> dead = Arrays.asList(221,222,223,224);
    private static final List<Integer> weeds = Arrays.asList(0, 1, 2);


    public enum PlantState {
        HARVESTABLE,
        GROWING,
        DEAD,
        WEEDS,
        PLANT,
        UNKNOWN
    }

    public static PlantState checkFlowerPatch(Client client, int varbitIndex) {
        int varbitValue = client.getVarbitValue(varbitIndex);

        if (harvestable.contains(varbitValue)) {
            return PlantState.HARVESTABLE;
        } else if (growing.contains(varbitValue)) {
            return PlantState.GROWING;
        } else if (dead.contains(varbitValue)) {
            return PlantState.DEAD;
        }  else if (weeds.contains(varbitValue)) {
            return PlantState.WEEDS;
        } else if (varbitValue == 3) {
            return PlantState.PLANT;
        } else {
                return PlantState.UNKNOWN;
        }
    }
}
package com.farminghelper.speaax;

import com.farminghelper.speaax.ItemsAndLocations.HerbRunItemAndLocation;
import com.farminghelper.speaax.ItemsAndLocations.TreeRunItemAndLocation;
import com.farminghelper.speaax.ItemsAndLocations.FruitTreeRunItemAndLocation;

import com.google.inject.Provides;
import java.awt.image.BufferedImage;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.*;
import javax.inject.Inject;

import net.runelite.api.*;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.callback.ClientThread;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.client.eventbus.EventBus;

@PluginDescriptor(
		name = "Lazy Farming",
		description = "Show item requirements and highlights for farming runs."
)

public class FarmingHelperPlugin extends Plugin
{
	private final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();

	private HerbRunItemAndLocation herbRunItemAndLocation;
	private TreeRunItemAndLocation treeRunItemAndLocation;
	private FruitTreeRunItemAndLocation fruitTreeRunItemAndLocation;


	@Inject
	private ItemManager itemManager;
	@Inject
	private Client client;

	public void runOnClientThread(Runnable task) {
		clientThread.invokeLater(task);
	}

	public Location getArdougneLocation() {
		return herbRunItemAndLocation.ardougneLocation;
	}
	public Location getCatherbyLocation() {
		return herbRunItemAndLocation.catherbyLocation;
	}
	public Location getFaladorLocation() {
		return herbRunItemAndLocation.faladorLocation;
	}
	public Location getFarmingGuildLocation() {return herbRunItemAndLocation.farmingGuildLocation;}
	public Location getHarmonyLocation() {
		return herbRunItemAndLocation.harmonyLocation;
	}
	public Location getKourendLocation() {
		return herbRunItemAndLocation.kourendLocation;
	}
	public Location getMorytaniaLocation() {
		return herbRunItemAndLocation.morytaniaLocation;
	}
	public Location getTrollStrongholdLocation() {
		return herbRunItemAndLocation.trollStrongholdLocation;
	}

	public Location getWeissLocation() {
		return herbRunItemAndLocation.weissLocation;
	}

	//get Tree locations
	public Location getFaladorTreeLocation() {return treeRunItemAndLocation.faladorTreeLocation;}
	public Location getFarmingGuildTreeLocation() {
		return treeRunItemAndLocation.farmingGuildTreeLocation;
	}
	public Location getGnomeStrongholdTreeLocation() {return treeRunItemAndLocation.gnomeStrongholdTreeLocation;}
	public Location getLumbridgeTreeLocation() {return treeRunItemAndLocation.lumbridgeTreeLocation;}
	public Location getTaverleyTreeLocation() {
		return treeRunItemAndLocation.taverleyTreeLocation;
	}
	public Location getVarrockTreeLocation() {
		return treeRunItemAndLocation.varrockTreeLocation;
	}

	//get fruit tree locations
	public Location getBrimhavenFruitTreeLocation() {return fruitTreeRunItemAndLocation.brimhavenFruitTreeLocation;}
	public Location getCatherbyFruitTreeLocation() {return fruitTreeRunItemAndLocation.catherbyFruitTreeLocation;}
	public Location getFarmingGuildFruitTreeLocation() {return fruitTreeRunItemAndLocation.farmingGuildFruitTreeLocation;}
	public Location getGnomeStrongholdFruitTreeLocation() {return fruitTreeRunItemAndLocation.gnomeStrongholdFruitTreeLocation;}
	public Location getLletyaFruitTreeLocation() {return fruitTreeRunItemAndLocation.lletyaFruitTreeLocation;}
	public Location getTreeGnomeVillageTreeLocation() {return fruitTreeRunItemAndLocation.treeGnomeVillageFruitTreeLocation;}

	private boolean isTeleportOverlayActive = false;
	public boolean isTeleportOverlayActive() {
		return isTeleportOverlayActive;
	}
	public void setTeleportOverlayActive(boolean isTeleportOverlayActive) {
		this.isTeleportOverlayActive = isTeleportOverlayActive;
	}
	@Inject
	private FarmingHelperOverlayInfoBox farmingHelperOverlayInfoBox;
	public FarmingHelperOverlayInfoBox getFarmingHelperOverlayInfoBox()
	{
		return farmingHelperOverlayInfoBox;
	}

	private String lastMessage = "";
	@Subscribe
	public void onChatMessage(ChatMessage event) {
		if (event.getType() == ChatMessageType.GAMEMESSAGE) {
			lastMessage = event.getMessage();
			System.out.println("Last game message updated: " + lastMessage);
		}
		else if (event.getType() == ChatMessageType.SPAM) {
			lastMessage = event.getMessage();
			System.out.println("Last spam message updated: " + lastMessage);
		}
	}

	public String getLastMessage() {
		return lastMessage;
	}
	public boolean checkMessage(String targetMessage, String lastMessage) {
		return lastMessage.trim().equalsIgnoreCase(targetMessage.trim());
	}

	@Inject
	private EventBus eventBus;
	/*
	@Inject
	private Client client;

	 */
	@Inject
	private ClientThread clientThread;


	@Inject
	private FarmingTeleportOverlay farmingTeleportOverlay;
	public FarmingTeleportOverlay getFarmingTeleportOverlay()
	{
		return farmingTeleportOverlay;
	}
	private int lastClickedGroupId;
	private int lastClickedChildId;
	private boolean clicked = false;

	public boolean isClicked(int groupId, int childId) {
		return clicked && groupId == lastClickedGroupId && childId == lastClickedChildId;
	}

	//"no usage" but currently needed for spellbook check
	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event) {
		clientThread.invokeLater(() -> {
			int groupId = event.getWidgetId() >>> 16;
			int childId = event.getWidgetId() & 0xFFFF;
			clicked = true;
			lastClickedGroupId = groupId;
			lastClickedChildId = childId;
			System.out.printf("Clicked widget: groupId=%d, childId=%d%n", groupId, childId);
		});
	}


	private FarmingHelperPanel farmingHelperPanel;
	private FarmingHelperPanel panel;
	private NavigationButton navButton;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	private FarmingHelperConfig config;
	@Inject
	public OverlayManager overlayManager;

	private boolean isOverlayActive = true;

	@Inject
	private FarmingHelperOverlay farmingHelperOverlay;

	public FarmingHelperOverlay getFarmingHelperOverlay()
	{
		return farmingHelperOverlay;
	}

	private boolean itemsCollected = false;
	public boolean areItemsCollected() {
		return itemsCollected;
	}

	public void setItemsCollected(boolean itemsCollected) {
		this.itemsCollected = itemsCollected;
	}
	public Client getClient() {
		return client;
	}

	private int lastAnimationId = -1;


	@Subscribe
	public void onAnimationChanged(AnimationChanged event)
	{
		if (client.getGameState() != GameState.LOGGED_IN
				|| event.getActor() != client.getLocalPlayer())
		{
			return;
		}

		int currentAnimationId = event.getActor().getAnimation();
		if (currentAnimationId != lastAnimationId)
		{
			System.out.println("Animation ID: " + currentAnimationId);
			lastAnimationId = currentAnimationId;
		}
	}

	//update item list
	private Map<Integer, Integer> herbItemsCache;
	public void updateHerbOverlay(Map<Integer, Integer> herbItems)
	{
		this.herbItemsCache = herbItems;
	}
	private Map<Integer, Integer> treeItemsCache;
	public void updateTreeOverlay(Map<Integer, Integer> treeItems)
	{
		this.treeItemsCache = treeItems;
	}

	private Map<Integer, Integer> fruitTreeItemsCache;
	public void updateFruitTreeOverlay(Map<Integer, Integer> fruitTreeItems)
	{
		this.fruitTreeItemsCache = fruitTreeItems;
	}

	@Provides
	FarmingHelperConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(FarmingHelperConfig.class);
	}

	public boolean isOverlayActive()
	{
		return isOverlayActive;
	}

	public void setOverlayActive(boolean overlayActive)
	{
		isOverlayActive = overlayActive;
	}
	public void addTextToInfoBox(String text) {
		farmingHelperOverlayInfoBox.setText(text);
	}
	public boolean getHerbLocationEnabled(String locationName) {
		switch (locationName) {
			case "Ardougne":
				return config.ardougneHerb();
			case "Catherby":
				return config.catherbyHerb();
			case "Falador":
				return config.faladorHerb();
			case "Farming Guild":
				return config.farmingGuildHerb();
			case "Harmony Island":
				return config.harmonyHerb();
			case "Kourend":
				return config.kourendHerb();
			case "Morytania":
				return config.morytaniaHerb();
			case "Troll Stronghold":
				return config.trollStrongholdHerb();
			case "Weiss":
				return config.weissHerb();
			// Add cases for other locations as needed
			default:
				return false;
		}
	}

	public boolean getTreeLocationEnabled(String locationName) {
		switch (locationName) {
			case "Falador":
				return config.faladorTree();
			case "Farming Guild":
				return config.farmingGuildTree();
			case "Gnome Stronghold":
				return config.gnomeStrongholdTree();
			case "Lumbridge":
				return config.lumbridgeTree();
			case "Taverley":
				return config.taverleyTree();
			case "Varrock":
				return config.varrockTree();
			// Add cases for other locations as needed
			default:
				return false;
		}
	}

	public boolean getFruitTreeLocationEnabled(String locationName) {
		switch (locationName) {
			case "Brimhaven":
				return config.brimhavenFruitTree();
			case "Catherby":
				return config.catherbyFruitTree();
			case "Farming Guild":
				return config.farmingGuildFruitTree();
			case "Gnome Stronghold":
				return config.gnomeStrongholdFruitTree();
			case "Lletya":
				return config.lletyaFruitTree();
			case "Tree Gnome Village":
				return config.treeGnomeVillageFruitTree();
			// Add cases for other locations as needed
			default:
				return false;
		}
	}

	@Override
	protected void startUp()
	{

		herbRunItemAndLocation = new HerbRunItemAndLocation(config, client, this);
		treeRunItemAndLocation = new TreeRunItemAndLocation(config, client, this);
		fruitTreeRunItemAndLocation = new FruitTreeRunItemAndLocation(config, client, this);
		farmingHelperOverlay = new FarmingHelperOverlay(client, this, itemManager, herbRunItemAndLocation, treeRunItemAndLocation, fruitTreeRunItemAndLocation);

		panel = new FarmingHelperPanel(this, overlayManager, farmingTeleportOverlay, herbRunItemAndLocation, treeRunItemAndLocation, fruitTreeRunItemAndLocation);
		final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "/com/farminghelper/speaax/icon.png");

		navButton = NavigationButton.builder()
				.tooltip("Lazy Farming ")
				.icon(icon)
				.priority(6)
				.panel(panel)
				.build();
		clientToolbar.addNavigation(navButton);

		overlayManager.add(farmingHelperOverlay);
		overlayManager.add(farmingTeleportOverlay);
		overlayManager.add(farmingHelperOverlayInfoBox);




		// set overlay to inactive
		isOverlayActive = false;
		eventBus.register(this);

		herbRunItemAndLocation.setupHerbLocations();

	}

	@Override
	protected void shutDown()
	{
		clientToolbar.removeNavigation(navButton);
		overlayManager.remove(farmingHelperOverlay);
		overlayManager.remove(farmingTeleportOverlay);
		overlayManager.remove(farmingHelperOverlayInfoBox);
		eventBus.unregister(this);
	}
}
package com.farminghelper.speaax;

import java.awt.Dimension;
import java.awt.Graphics2D;
import java.util.*;
import javax.inject.Inject;

import net.runelite.api.*;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ImageComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;
import java.awt.image.BufferedImage;
import net.runelite.client.game.ItemManager;

import java.awt.Color;
import com.farminghelper.speaax.ItemsAndLocations.HerbRunItemAndLocation;
import com.farminghelper.speaax.ItemsAndLocations.TreeRunItemAndLocation;
import com.farminghelper.speaax.ItemsAndLocations.FruitTreeRunItemAndLocation;

public class FarmingHelperOverlay extends Overlay {

    private HerbRunItemAndLocation herbRunItemAndLocation;
    private TreeRunItemAndLocation treeRunItemAndLocation;
    private FruitTreeRunItemAndLocation fruitTreeRunItemAndLocation;
    private final Client client;
    private final FarmingHelperPlugin plugin;
    private final PanelComponent panelComponent = new PanelComponent();
    @Inject
    private ItemManager itemManager;

    public static final List<Integer> TELEPORT_CRYSTAL_IDS = Arrays.asList(ItemID.TELEPORT_CRYSTAL_1, ItemID.TELEPORT_CRYSTAL_2, ItemID.TELEPORT_CRYSTAL_3, ItemID.TELEPORT_CRYSTAL_4, ItemID.TELEPORT_CRYSTAL_5);
    private static final int BASE_TELEPORT_CRYSTAL_ID = ItemID.TELEPORT_CRYSTAL_1;
    public List<Integer> getTeleportCrystalIdsIds() {
        return TELEPORT_CRYSTAL_IDS;
    }
    private boolean isTeleportCrystal(int itemId) {
        return TELEPORT_CRYSTAL_IDS.contains(itemId);
    }

    public static final List<Integer> SKILLS_NECKLACE_IDS = Arrays.asList(ItemID.SKILLS_NECKLACE1, ItemID.SKILLS_NECKLACE2, ItemID.SKILLS_NECKLACE3, ItemID.SKILLS_NECKLACE4, ItemID.SKILLS_NECKLACE5, ItemID.SKILLS_NECKLACE6);
    private static final int BASE_SKILLS_NECKLACE_ID = ItemID.SKILLS_NECKLACE1;
    public List<Integer> getSkillsNecklaceIdsIds() {
        return SKILLS_NECKLACE_IDS;
    }
    private boolean isSkillsNecklace(int itemId) {
        return SKILLS_NECKLACE_IDS.contains(itemId);
    }


    public static final List<Integer> HERB_PATCH_IDS = Arrays.asList(33176, 27115, 8152, 8150, 8153, 18816, 8151, 9372, 33979 );
    public List<Integer> getHerbPatchIds() {
        return HERB_PATCH_IDS;
    }
    private static final List<Integer> HERB_SEED_IDS = Arrays.asList(5291, 5292, 5293, 5294, 5295, 5296, 5297, 5298, 5299, 5300, 5301, 5302, 5303, 5304  );
    private static final int BASE_SEED_ID = 5291;
    public List<Integer> getHerbSeedIds() {
        return HERB_SEED_IDS;
    }
    private boolean isHerbSeed(int itemId) {
        return HERB_SEED_IDS.contains(itemId);
    }



    private static final List<Integer> FLOWER_PATCH_IDS = Arrays.asList(27111, 7849, 7847, 7850, 7848, 33649);
    public List<Integer> getFlowerPatchIds() {
        return FLOWER_PATCH_IDS;
    }


    public static final List<Integer> TREE_PATCH_IDS = Arrays.asList(8389, 33732, 19147, 8391, 8388, 8390);
    public List<Integer> getTreePatchIds() {
        return TREE_PATCH_IDS;
    }
    private static final List<Integer> TREE_SAPLING_IDS = Arrays.asList(ItemID.OAK_SAPLING, ItemID.WILLOW_SAPLING,ItemID.MAPLE_SAPLING,ItemID.YEW_SAPLING,ItemID.MAGIC_SAPLING);
    private static final int BASE_SAPLING_ID = ItemID.OAK_SAPLING;
    public List<Integer> getTreeSaplingIds() {
        return TREE_SAPLING_IDS;
    }
    private boolean isTreeSapling(int itemId) {return TREE_SAPLING_IDS.contains(itemId);}


    public static final List<Integer> FRUIT_TREE_PATCH_IDS = Arrays.asList(7964, 7965, 34007, 7962, 26579, 7963);
    public List<Integer> getFruitTreePatchIds() {
        return FRUIT_TREE_PATCH_IDS;
    }
    private static final List<Integer> FRUIT_TREE_SAPLING_IDS = Arrays.asList(ItemID.APPLE_SAPLING, ItemID.BANANA_SAPLING,ItemID.ORANGE_SAPLING,ItemID.CURRY_SAPLING,ItemID.PINEAPPLE_SAPLING,ItemID.PAPAYA_SAPLING,ItemID.PALM_SAPLING, ItemID.DRAGONFRUIT_SAPLING);
    private static final int BASE_FRUIT_SAPLING_ID = ItemID.APPLE_SAPLING;
    public List<Integer> getFruitTreeSaplingIds() {return FRUIT_TREE_SAPLING_IDS;}
    private boolean isFruitTreeSapling(int itemId) {return FRUIT_TREE_SAPLING_IDS.contains(itemId);}


    public static final List<Integer> RUNE_POUCH_ID = Arrays.asList(ItemID.RUNE_POUCH, ItemID.DIVINE_RUNE_POUCH);
    public static final List<Integer> RUNE_POUCH_AMOUNT_VARBITS = Arrays.asList(Varbits.RUNE_POUCH_AMOUNT1, Varbits.RUNE_POUCH_AMOUNT2, Varbits.RUNE_POUCH_AMOUNT3, Varbits.RUNE_POUCH_AMOUNT4);

    public static final List<Integer> RUNE_POUCH_RUNE_VARBITS = Arrays.asList(Varbits.RUNE_POUCH_RUNE1, Varbits.RUNE_POUCH_RUNE2, Varbits.RUNE_POUCH_RUNE3, Varbits.RUNE_POUCH_RUNE4);

    private static final Map<Integer, List<Integer>> COMBINATION_RUNE_SUBRUNES_MAP;

    static {
        Map<Integer, List<Integer>> tempMap = new HashMap<>();
        tempMap.put(ItemID.DUST_RUNE, Arrays.asList(ItemID.AIR_RUNE, ItemID.EARTH_RUNE));
        tempMap.put(ItemID.MIST_RUNE, Arrays.asList(ItemID.AIR_RUNE, ItemID.WATER_RUNE));
        tempMap.put(ItemID.MUD_RUNE, Arrays.asList(ItemID.WATER_RUNE, ItemID.EARTH_RUNE));
        tempMap.put(ItemID.LAVA_RUNE, Arrays.asList(ItemID.FIRE_RUNE, ItemID.EARTH_RUNE));
        tempMap.put(ItemID.STEAM_RUNE, Arrays.asList(ItemID.FIRE_RUNE, ItemID.WATER_RUNE));
        tempMap.put(ItemID.SMOKE_RUNE, Arrays.asList(ItemID.FIRE_RUNE, ItemID.AIR_RUNE));
        COMBINATION_RUNE_SUBRUNES_MAP = Collections.unmodifiableMap(tempMap);
    }

    private int getRuneItemIdFromVarbitValue(int varbitValue) {
        switch (varbitValue) {
            case 1:
                return ItemID.AIR_RUNE;
            case 2:
                return ItemID.WATER_RUNE;
            case 3:
                return ItemID.EARTH_RUNE;
            case 4:
                return ItemID.FIRE_RUNE;
            case 5:
                return ItemID.MIND_RUNE;
            case 6:
                return ItemID.CHAOS_RUNE;
            case 7:
                return ItemID.DEATH_RUNE;
            case 8:
                return ItemID.BLOOD_RUNE;
            case 9:
                return ItemID.COSMIC_RUNE;
            case 10:
                return ItemID.NATURE_RUNE;
            case 11:
                return ItemID.LAW_RUNE;
            case 12:
                return ItemID.BODY_RUNE;
            case 13:
                return ItemID.SOUL_RUNE;
            case 14:
                return ItemID.ASTRAL_RUNE;
            case 15:
                return ItemID.MIST_RUNE;
            case 16:
                return ItemID.MUD_RUNE;
            case 17:
                return ItemID.DUST_RUNE;
            case 18:
                return ItemID.LAVA_RUNE;
            case 19:
                return ItemID.STEAM_RUNE;
            case 20:
                return ItemID.SMOKE_RUNE;
            case 21:
                return ItemID.WRATH_RUNE;
            // Add more cases for other runes
            default:
                return -1;
        }
    }

    private Map<Integer, Integer> getRunePouchContentsVarbits() {
        Map<Integer, Integer> runePouchContents = new HashMap<>();

        for (int i = 0; i < RUNE_POUCH_RUNE_VARBITS.size(); i++) {
            int runeVarbitValue = client.getVarbitValue(RUNE_POUCH_RUNE_VARBITS.get(i));
            int runeAmount = client.getVarbitValue(RUNE_POUCH_AMOUNT_VARBITS.get(i));

            int runeId = getRuneItemIdFromVarbitValue(runeVarbitValue);

            if (runeId != -1 && runeAmount > 0) {
                handleCombinationRunes(runeId, runeAmount, runePouchContents);
            }
        }
        return runePouchContents;
    }

    @Inject
    public FarmingHelperOverlay(Client client, FarmingHelperPlugin plugin, ItemManager itemManager, HerbRunItemAndLocation herbRunItemAndLocation, TreeRunItemAndLocation treeRunItemAndLocation, FruitTreeRunItemAndLocation fruitTreeRunItemAndLocation) {
        this.client = client;
        this.plugin = plugin;
        this.itemManager = itemManager;
        this.herbRunItemAndLocation = herbRunItemAndLocation;
        this.treeRunItemAndLocation = treeRunItemAndLocation;
        this.fruitTreeRunItemAndLocation = fruitTreeRunItemAndLocation;
        setPosition(OverlayPosition.BOTTOM_RIGHT);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    private void handleCombinationRunes(int runeId, int runeAmount, Map<Integer, Integer> runePouchContents) {
        if (COMBINATION_RUNE_SUBRUNES_MAP.containsKey(runeId)) {
            List<Integer> subRunes = COMBINATION_RUNE_SUBRUNES_MAP.get(runeId);
            for (int subRune : subRunes) {
                runePouchContents.put(subRune, runePouchContents.getOrDefault(subRune, 0) + runeAmount);
            }
        } else {
            runePouchContents.put(runeId, runeAmount);
        }
    }
    public Integer checkToolLep(Integer item) {
        if(item == ItemID.COMPOST) {
            return client.getVarbitValue(1442);
        }
        if(item == ItemID.SUPERCOMPOST) {
            return client.getVarbitValue(1443);
        }
        if (item == ItemID.ULTRACOMPOST) {
            return client.getVarbitValue(5732);
        }
        if (item == ItemID.BOTTOMLESS_COMPOST_BUCKET_22997) {
            if (client.getVarbitValue(7915) != 0) {
                return 1;
            }
        }
        return 0;
    }

    public Map<Integer, Integer> itemsToCheck;
    @Override
    public Dimension render(Graphics2D graphics) {
        if (plugin.isOverlayActive() && !plugin.areItemsCollected()) {
            if (!plugin.isOverlayActive()) {
                return null;
            }
            plugin.addTextToInfoBox("Grab all the items needed");
            // List of items to check
            Map<Integer, Integer> itemsToCheck = null;
            if(plugin.getFarmingTeleportOverlay().herbRun) {
                itemsToCheck = herbRunItemAndLocation.getHerbItems();
            }
            if(plugin.getFarmingTeleportOverlay().treeRun) {
                itemsToCheck = treeRunItemAndLocation.getTreeItems();
            }
            if(plugin.getFarmingTeleportOverlay().fruitTreeRun) {
                itemsToCheck = fruitTreeRunItemAndLocation.getFruitTreeItems();
            }

            if (itemsToCheck == null || itemsToCheck.isEmpty()) {
                return null;
            }

            ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
            Map<Integer, Integer> runePouchContents = getRunePouchContentsVarbits();

            Item[] items;
            if (inventory == null || inventory.getItems() == null) {
                items = new Item[0];
            } else {
                items = inventory.getItems();
            }

            int teleportCrystalCount = 0;
            for (Item item : items) {
                if (isTeleportCrystal(item.getId())) {
                    teleportCrystalCount += item.getQuantity();
                    break;
                }
            }
            int skillsNecklaceCount = 0;
            for (Item item : items) {
                if (isSkillsNecklace(item.getId())) {
                    skillsNecklaceCount += item.getQuantity();
                    break;
                }
            }

            int totalSeeds = 0;
            if(plugin.getFarmingTeleportOverlay().herbRun) {
                for (Item item : items) {
                    if (isHerbSeed(item.getId())) {
                        totalSeeds += item.getQuantity();
                    }
                }
            }
            if(plugin.getFarmingTeleportOverlay().treeRun) {
                for (Item item : items) {
                    if (isTreeSapling(item.getId())) {
                        totalSeeds += item.getQuantity();
                    }
                }
            }
            if(plugin.getFarmingTeleportOverlay().fruitTreeRun) {
                for (Item item : items) {
                    if (isFruitTreeSapling(item.getId())) {
                        totalSeeds += item.getQuantity();
                    }
                }
            }

            panelComponent.getChildren().clear();
            int yOffset = 0;

            List<AbstractMap.SimpleEntry<Integer, Integer>> missingItemsWithCounts = new ArrayList<>();
            boolean allItemsCollected = true;
            for (Map.Entry<Integer, Integer> entry : itemsToCheck.entrySet()) {
                int itemId = entry.getKey();
                int count = entry.getValue();

                int inventoryCount = 0;
                if(plugin.getFarmingTeleportOverlay().herbRun) {
                    if (itemId == BASE_SEED_ID) {
                        inventoryCount = totalSeeds;
                    } else {
                        for (Item item : items) {
                            if (item != null && item.getId() == itemId) {
                                inventoryCount = item.getQuantity();
                                break;
                            }
                        }
                    }
                }
                // Check if the item is stored at the Tool Lep NPC
                int toolLepCount = checkToolLep(itemId);
                if (toolLepCount > 0) {
                    inventoryCount += toolLepCount;
                }
                if(plugin.getFarmingTeleportOverlay().treeRun) {
                    if (itemId == BASE_SAPLING_ID) {
                        inventoryCount = totalSeeds;
                    } else {
                        for (Item item : items) {
                            if (item != null && item.getId() == itemId) {
                                inventoryCount = item.getQuantity();
                                break;
                            }
                        }
                    }
                }
                if(plugin.getFarmingTeleportOverlay().fruitTreeRun) {
                    if (itemId == BASE_FRUIT_SAPLING_ID) {
                        inventoryCount = totalSeeds;
                    } else {
                        for (Item item : items) {
                            if (item != null && item.getId() == itemId) {
                                inventoryCount = item.getQuantity();
                                break;
                            }
                        }
                    }
                }

                if (itemId == BASE_TELEPORT_CRYSTAL_ID) {
                    inventoryCount = teleportCrystalCount;
                } else {
                    for (Item item : items) {
                        if (item != null && item.getId() == itemId) {
                            inventoryCount = item.getQuantity();
                            break;
                        }
                    }
                }

                if (itemId == BASE_SKILLS_NECKLACE_ID) {
                    inventoryCount = skillsNecklaceCount;
                } else {
                    for (Item item : items) {
                        if (item != null && item.getId() == itemId) {
                            inventoryCount = item.getQuantity();
                            break;
                        }
                    }
                }

                for (Item item : items) {
                    if (item != null && item.getId() == itemId) {
                        inventoryCount = item.getQuantity();
                        break;
                    }
                }


                for (Item item: items) {
                    if (item != null && RUNE_POUCH_ID.contains(item.getId())) {
                        if (runePouchContents.containsKey(itemId)) {
                            inventoryCount += runePouchContents.get(itemId);
                        }
                    }
                }

                for (Item item : items) {
                    if (item != null) {
                        int itemIdRune = item.getId();
                        int itemQuantity = item.getQuantity();

                        if (COMBINATION_RUNE_SUBRUNES_MAP.containsKey(itemIdRune)) {
                            handleCombinationRunes(itemIdRune, itemQuantity, runePouchContents);
                        }
                    }
                }


                if (inventoryCount < count) {
                    allItemsCollected = false;
                    int missingCount = count - inventoryCount;
                    BufferedImage itemImage = itemManager.getImage(itemId);
                    if (itemImage != null) {
                        ImageComponent imageComponent = new ImageComponent(itemImage);
                        panelComponent.getChildren().add(imageComponent);

                        // Add the missing item and count to the list
                        missingItemsWithCounts.add(new AbstractMap.SimpleEntry<>(itemId, missingCount));

                        yOffset += itemImage.getHeight() + 2; // Update yOffset for the next item
                    }
                }
            }
            plugin.setTeleportOverlayActive(allItemsCollected);
            Dimension panelSize = panelComponent.render(graphics);

            // Draw item count on top of the overlay
            yOffset = 0;
            for (AbstractMap.SimpleEntry<Integer, Integer> pair : missingItemsWithCounts) {
                int itemId = pair.getKey();
                int missingCount = pair.getValue();

                BufferedImage itemImage = itemManager.getImage(itemId);
                if (itemImage != null) {
                    // Draw item count
                    if (missingCount > 1) {
                        String countText = Integer.toString(missingCount);
                        int textX = 2; // Calculate X position for the count text
                        int textY = yOffset + 15; // Calculate Y position for the count text
                        graphics.setColor(Color.WHITE);
                        graphics.drawString(countText, textX, textY);
                    }

                    yOffset += itemImage.getHeight() + 2; // Update yOffset for the next item
                }
            }
            // Check if all items have been collected
            if (missingItemsWithCounts.isEmpty()) {
                plugin.setItemsCollected(true);
            } else {
                plugin.setItemsCollected(false);
            }

            return panelSize;
        }
        return null;
    }
}
package com.farminghelper.speaax;

import java.awt.*;
import javax.inject.Inject;

import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetID;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.api.ItemID;
import net.runelite.client.util.ColorUtil;
import net.runelite.api.Tile;

import java.awt.Color;
import java.awt.Shape;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.util.*;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


public class FarmingTeleportOverlay extends Overlay {
    private final Client client;
    private final FarmingHelperPlugin plugin;
    private boolean clicked = false;
    @Inject
    private FarmingHelperConfig config;
    @Inject
    private FarmingHelperOverlay farmingHelperOverlay;
    @Inject
    private FarmingTeleportOverlay farmingTeleportOverlay;
    @Inject
    private FarmingHelperOverlayInfoBox farmingHelperOverlayInfoBox;
    @Inject
    private AreaCheck areaCheck;

    private final PanelComponent panelComponent = new PanelComponent();
    public boolean patchCleared = false;

    private Color leftClickColorWithAlpha;
    private Color rightClickColorWithAlpha;
    private Color highlightUseItemWithAlpha;

    public void updateColors() {
        leftClickColorWithAlpha = new Color(
                config.highlightLeftClickColor().getRed(),
                config.highlightLeftClickColor().getGreen(),
                config.highlightLeftClickColor().getBlue(),
                config.highlightAlpha()
        );
        rightClickColorWithAlpha = new Color(
                config.highlightRightClickColor().getRed(),
                config.highlightRightClickColor().getGreen(),
                config.highlightRightClickColor().getBlue(),
                config.highlightAlpha()
        );
        highlightUseItemWithAlpha = new Color(
                config.highlightUseItemColor().getRed(),
                config.highlightUseItemColor().getGreen(),
                config.highlightUseItemColor().getBlue(),
                config.highlightAlpha()
        );
    }


    public Map<String, Boolean> herbConfigMap = new HashMap<>();


    private int previousRegionId;
    public int inventoryTabValue = 0;



    public boolean isItComposted(String message) {
        String regexCompost1 = "You treat the (herb patch|flower patch|tree patch|fruit tree patch) with (compost|supercompost|ultracompost)\\.";
        String regexCompost2 = "This (herb patch|flower patch|tree patch|fruit tree patch) has already been treated with (compost|supercompost|ultracompost)\\.";
        String combinedRegex = regexCompost1 + "|" + regexCompost2;

        Pattern patternCompost = Pattern.compile(combinedRegex);
        Matcher matcherCompost = patternCompost.matcher(plugin.getLastMessage());

        return matcherCompost.matches();
    }

    @Inject
    public FarmingTeleportOverlay(FarmingHelperPlugin plugin, Client client, AreaCheck areaCheck) {
        this.areaCheck = areaCheck;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
        this.plugin = plugin;
        this.client = client;
    }

    public Overlay interfaceOverlay(int groupId, int childId) {
        return new Overlay() {
            @Override
            public Dimension render(Graphics2D graphics) {
                Client client = plugin.getClient();
                if (client != null) {
                    Widget widget = client.getWidget(groupId, childId);
                    if (widget != null) {
                        Rectangle bounds = widget.getBounds();
                        graphics.setColor(leftClickColorWithAlpha);

                        // Set the composite for transparency
                        AlphaComposite alphaComposite = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.65f);
                        graphics.setComposite(alphaComposite);

                        // Draw a rectangle over the widget
                        graphics.fillRect(bounds.x, bounds.y, bounds.width, bounds.height);

                        // Reset the composite back to the original
                        graphics.setComposite(AlphaComposite.SrcOver);

                    }
                }
                return null;
            }
        };
    }

    public int getChildIndexPN(String searchText) {
        Widget parentWidget = client.getWidget(17, 12);
        if (parentWidget == null) {
            return -1;
        }

        Widget[] children = parentWidget.getChildren();
        if (children == null) {
            return -1;
        }

        for (int index = 0; index < children.length; index++) {
            Widget child = children[index];
            String text = child.getText();
            if (text != null) {
                int colonIndex = text.indexOf(':');
                if (colonIndex != -1 && colonIndex + 1 < text.length()) {
                    String textAfterColon = text.substring(colonIndex + 1).trim();
                    if (textAfterColon.equals(searchText)) {
                        return index;
                    }
                }
            }
        }
        return -1; // Return -1 if the specified text is not found
    }

    public void highlightDynamicComponent(Graphics2D graphics, Widget widget, int dynamicChildIndex, Color color) {
        if (widget != null) {
            Widget[] dynamicChildren = widget.getDynamicChildren();
            if (dynamicChildren != null && dynamicChildIndex >= 0 && dynamicChildIndex < dynamicChildren.length) {
                Widget dynamicChild = dynamicChildren[dynamicChildIndex];
                if (dynamicChild != null) {
                    Rectangle bounds = dynamicChild.getBounds();
                    graphics.setColor(color);
                    //graphics.draw(bounds);
                    graphics.fill(bounds);
                }
            }
        }
    }

    public void itemHighlight(Graphics2D graphics, int itemID, Color color) {
        ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);

        if (inventory != null) {
            Item[] items = inventory.getItems();
            Widget inventoryWidget = client.getWidget(WidgetInfo.INVENTORY);

            for (int i = 0; i < items.length; i++) {
                Item item = items[i];

                if (item.getId() == itemID) {
                    Widget itemWidget = inventoryWidget.getChild(i);
                    Rectangle bounds = itemWidget.getBounds();
                    graphics.setColor(color);
                    graphics.draw(bounds);
                    graphics.fill(bounds);
                }
            }
        }
    }

    private List<GameObject> findGameObjectsByID(int objectID) {
        List<GameObject> gameObjects = new ArrayList<>();
        for (int x = 0; x < Constants.SCENE_SIZE; x++) {
            for (int y = 0; y < Constants.SCENE_SIZE; y++) {
                Tile tile = client.getScene().getTiles()[client.getPlane()][x][y];
                if (tile == null) {
                    continue;
                }

                for (GameObject gameObject : tile.getGameObjects()) {
                    if (gameObject != null && gameObject.getId() == objectID) {
                        gameObjects.add(gameObject);
                    }
                }
            }
        }
        return gameObjects;
    }

    private void drawGameObjectClickbox(Graphics2D graphics, GameObject gameObject, Color color) {
        Shape objectClickbox = gameObject.getClickbox();
        if (objectClickbox != null) {
            graphics.setColor(color);
            graphics.draw(objectClickbox);
            graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), color.getAlpha() / 5));
            graphics.fill(objectClickbox);
        }
    }

    public Overlay gameObjectOverlay(int objectId, Color color) {
        return new Overlay() {
            @Override
            public Dimension render(Graphics2D graphics) {
                Client client = plugin.getClient();
                if (client != null) {
                    List<GameObject> gameObjects = findGameObjectsByID(objectId);
                    for (GameObject gameObject : gameObjects) {
                        drawGameObjectClickbox(graphics, gameObject, color);
                    }
                }
                return null;
            }
        };
    }

    public List<DecorativeObject> findDecorativeObjectsByID(int objectId) {
        Client client = plugin.getClient();
        List<DecorativeObject> foundDecorativeObjects = new ArrayList<>();

        if (client != null) {
            Tile[][][] tiles = client.getScene().getTiles();
            for (int plane = 0; plane < tiles.length; plane++) {
                for (int x = 0; x < tiles[plane].length; x++) {
                    for (int y = 0; y < tiles[plane][x].length; y++) {
                        Tile tile = tiles[plane][x][y];
                        if (tile != null) {
                            DecorativeObject decorativeObject = tile.getDecorativeObject();
                            if (decorativeObject != null && decorativeObject.getId() == objectId) {
                                foundDecorativeObjects.add(decorativeObject);
                            }
                        }
                    }
                }
            }
        }

        return foundDecorativeObjects;
    }

    public Overlay decorativeObjectOverlay(int objectId, Color color) {
        return new Overlay() {
            @Override
            public Dimension render(Graphics2D graphics) {
                Client client = plugin.getClient();
                if (client != null) {
                    List<DecorativeObject> decorativeObjects = findDecorativeObjectsByID(objectId);
                    for (DecorativeObject decorativeObject : decorativeObjects) {
                        drawDecorativeObjectClickbox(graphics, decorativeObject, color);
                    }
                }
                return null;
            }
        };
    }


    public void drawDecorativeObjectClickbox(Graphics2D graphics, DecorativeObject decorativeObject, Color color) {
        Shape clickbox = decorativeObject.getClickbox();
        if (clickbox != null) {
            graphics.setColor(color);
            graphics.draw(clickbox);
            graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), 50));
            graphics.fill(clickbox);
        }
    }

    public void highlightRightClickOption(Graphics2D graphics, String option) {
        // Get the menu entries
        MenuEntry[] menuEntries = client.getMenuEntries();

        for (int i = 0; i < menuEntries.length; i++) {
            MenuEntry entry = menuEntries[i];
            String optionText = entry.getOption();

            // Check if the option text matches the desired option
            if (optionText.equalsIgnoreCase(option)) {
                // Modify the menu entry to include a highlight
                String highlightedText = ColorUtil.prependColorTag(">>> " + optionText, leftClickColorWithAlpha);
                entry.setOption(highlightedText);
                client.setMenuEntries(menuEntries);
                break;
            }
        }
    }

    public void highlightNpc(Graphics2D graphics, String npcName, Color color) {
        List<NPC> npcs = client.getNpcs();

        if (npcs != null) {
            for (NPC npc : npcs) {
                if (npc != null && npc.getName() != null && npc.getName().equals(npcName)) {
                    Polygon tilePolygon = npc.getCanvasTilePoly();

                    if (tilePolygon != null) {
                        graphics.setColor(color);
                        graphics.draw(tilePolygon);
                        //graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue()));
                        graphics.fill(tilePolygon);
                    }
                }
            }
        }
    }


    private boolean isInterfaceOpen(int groupId, int childId) {
        Widget widget = client.getWidget(groupId, childId);
        return widget != null && !widget.isHidden();
    }


    private void printWidgetText(int groupId, int childId) {
        Widget widget = client.getWidget(groupId, childId);
        if (widget != null) {
            String text = widget.getText();
            System.out.println("Widget text: " + text);
        } else {
            System.out.println("Widget not found for groupId: " + groupId + " and childId: " + childId);
        }
    }

    public void highlightHerbPatches(Graphics2D graphics, Color color) {
        List<Integer> herbPatchIds = farmingHelperOverlay.getHerbPatchIds();
        for (Integer patchId : herbPatchIds) {
            gameObjectOverlay(patchId, color).render(graphics);
        }
    }

    public void highlightFlowerPatches(Graphics2D graphics, Color color) {
        List<Integer> flowerPatchIds = farmingHelperOverlay.getFlowerPatchIds();
        for (Integer patchId : flowerPatchIds) {
            gameObjectOverlay(patchId, color).render(graphics);
        }
    }

    public void highlightTreePatches(Graphics2D graphics, Color color) {
        List<Integer> treePatchIds = farmingHelperOverlay.getTreePatchIds();
        for (Integer patchId : treePatchIds) {
            gameObjectOverlay(patchId, color).render(graphics);
        }
    }

    public void highlightFruitTreePatches(Graphics2D graphics, Color color) {
        List<Integer> fruitTreePatchIds = farmingHelperOverlay.getFruitTreePatchIds();
        for (Integer patchId : fruitTreePatchIds) {
            gameObjectOverlay(patchId, color).render(graphics);
        }
    }

    public void highlightHerbSeeds(Graphics2D graphics, Color color) {
        List<Integer> herbSeedIds = farmingHelperOverlay.getHerbSeedIds();
        for (Integer seedId : herbSeedIds) {
            itemHighlight(graphics, seedId, color);
        }
    }

    public void highlightTreeSapling(Graphics2D graphics, Color color) {
        List<Integer> treeSaplingIds = farmingHelperOverlay.getTreeSaplingIds();
        for (Integer seedId : treeSaplingIds) {
            itemHighlight(graphics, seedId, color);
        }
    }

    public void highlightFruitTreeSapling(Graphics2D graphics, Color color) {
        List<Integer> fruitTreeSaplingIds = farmingHelperOverlay.getFruitTreeSaplingIds();
        for (Integer seedId : fruitTreeSaplingIds) {
            itemHighlight(graphics, seedId, color);
        }
    }

    public void highlightTeleportCrystal(Graphics2D graphics, Color color) {
        List<Integer> teleportCrystalIds = farmingHelperOverlay.getTeleportCrystalIdsIds();
        for (Integer seedId : teleportCrystalIds) {
            itemHighlight(graphics, seedId, color);
        }
    }

    public void highlightSkillsNecklace(Graphics2D graphics, Color color) {
        List<Integer> skillsNecklaceIds = farmingHelperOverlay.getSkillsNecklaceIdsIds();
        for (Integer seedId : skillsNecklaceIds) {
            itemHighlight(graphics, seedId, color);
        }
    }

    public Integer selectedCompostID() {
        FarmingHelperConfig.OptionEnumCompost selectedCompost = config.enumConfigCompost();
        switch (selectedCompost) {
            case Compost:
                return ItemID.COMPOST;
            case Supercompost:
                return ItemID.SUPERCOMPOST;
            case Ultracompost:
                return ItemID.ULTRACOMPOST;
            case Bottomless:
                return ItemID.BOTTOMLESS_COMPOST_BUCKET_22997;
        }
        return -1;
    }
    private int currentHerbCase = 1;
    public Boolean herbPatchDone = false;
    private boolean isItemInInventory(int itemId) {
        ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);

        Item[] items;
        if (inventory == null || inventory.getItems() == null) {
            items = new Item[0];
        } else {
            items = inventory.getItems();
        }

        for (Item item : items) {
            if (item.getId() == itemId) {
                return true;
            }
        }

        return false;
    }

    public void withdrawCompost (Graphics2D graphics) {
        plugin.addTextToInfoBox("Withdraw compost from Tool Leprechaun");
        if(!isInterfaceOpen(125,0)) {
            highlightNpc(graphics, "Tool Leprechaun", leftClickColorWithAlpha);
        }
        else {
            if (selectedCompostID() == ItemID.COMPOST) {
                interfaceOverlay(125, 17).render(graphics);
            }
            else if(selectedCompostID() == ItemID.SUPERCOMPOST)
            {
                interfaceOverlay(125, 18).render(graphics);
            }
            else if(selectedCompostID() == ItemID.ULTRACOMPOST) {
                interfaceOverlay(125, 19).render(graphics);
            }
            else if(selectedCompostID() == ItemID.BOTTOMLESS_COMPOST_BUCKET_22997) {
                interfaceOverlay(125, 15).render(graphics);
            }
        }
    }

    public void herbSteps(Graphics2D graphics, Location.Teleport teleport) {
        int currentRegionId = client.getLocalPlayer().getWorldLocation().getRegionID();
        HerbPatchChecker.PlantState plantState;

        //Farming guild herb patch uses Varbits.FARMING_4775
        if (currentRegionId == 4922) {
            plantState = HerbPatchChecker.checkHerbPatch(client, Varbits.FARMING_4775);
        }
        //Harmony herb patch uses Varbits.FARMING_4772
        else if (currentRegionId == 15148) {
            plantState = HerbPatchChecker.checkHerbPatch(client, Varbits.FARMING_4772);
        }
        //Troll Stronghold and Weiss herb patch uses Varbits.FARMING_4771
        else if (currentRegionId == 11321 || currentRegionId == 11325) {
            plantState = HerbPatchChecker.checkHerbPatch(client, Varbits.FARMING_4771);
        }
        //Rest uses Varbits.FARMING_4774
        else {
            plantState = HerbPatchChecker.checkHerbPatch(client, Varbits.FARMING_4774);
        }
        if (!areaCheck.isPlayerWithinArea(teleport.getPoint(), 15))
        {
            //should be replaced with a pathing system, pointing arrow or something else eventually
            highlightHerbPatches(graphics, leftClickColorWithAlpha);
        }
        else {
            switch (plantState) {
                case HARVESTABLE:
                    plugin.addTextToInfoBox("Harvest Herbs.");
                    highlightHerbPatches(graphics, leftClickColorWithAlpha);
                    break;
                case PLANT:
                    plugin.addTextToInfoBox("Use Herb seed on patch.");
                    highlightHerbPatches(graphics, highlightUseItemWithAlpha);
                    highlightHerbSeeds(graphics, highlightUseItemWithAlpha);
                    break;
                case DEAD:
                    plugin.addTextToInfoBox("Clear the dead herb patch.");
                    highlightHerbPatches(graphics, leftClickColorWithAlpha);
                    break;
                case DISEASED:
                    plugin.addTextToInfoBox("Use Plant cure on herb patch. Buy at GE or in farming guild/catherby, and store at Tool Leprechaun for easy access.");
                    highlightHerbPatches(graphics, leftClickColorWithAlpha);
                    itemHighlight(graphics, ItemID.PLANT_CURE, highlightUseItemWithAlpha);
                    break;
                case WEEDS:
                    plugin.addTextToInfoBox("Rake the herb patch.");
                    highlightHerbPatches(graphics, leftClickColorWithAlpha);
                    break;
                case GROWING:
                    plugin.addTextToInfoBox("Use Compost on patch.");
                    if(isItemInInventory(selectedCompostID())) {
                        highlightHerbPatches(graphics, highlightUseItemWithAlpha);
                        itemHighlight(graphics, selectedCompostID(), highlightUseItemWithAlpha);
                    }
                    else {
                        withdrawCompost(graphics);
                    }
                    if (isItComposted(plugin.getLastMessage())) {
                        currentHerbCase = 1;
                        herbPatchDone = true;
                    }
                    break;
                case UNKNOWN:
                    plugin.addTextToInfoBox("UNKNOWN state: Try to do something with the herb patch to change its state.");
                    break;
            }
        }
    }

    //private int currentFlowerCase = 1;
    public static boolean flowerPatchDone = false;

    public void flowerSteps(Graphics2D graphics) {
        if (farmLimps) {
            int currentRegionId = client.getLocalPlayer().getWorldLocation().getRegionID();
            FlowerPatchChecker.PlantState plantState;
            if (currentRegionId == 4922) {
                plantState = FlowerPatchChecker.checkFlowerPatch(client, Varbits.FARMING_7906);
            } else {
                plantState = FlowerPatchChecker.checkFlowerPatch(client, Varbits.FARMING_4773);
            }
            switch (plantState) {
                case HARVESTABLE:
                    plugin.addTextToInfoBox("Harvest Limwurt root.");
                    highlightFlowerPatches(graphics, leftClickColorWithAlpha);
                    break;
                case WEEDS:
                    plugin.addTextToInfoBox("Rake the flower patch.");
                    highlightFlowerPatches(graphics, leftClickColorWithAlpha);
                    break;
                case DEAD:
                    plugin.addTextToInfoBox("Clear the dead flower patch.");
                    highlightFlowerPatches(graphics, leftClickColorWithAlpha);
                    break;
                case PLANT:
                    plugin.addTextToInfoBox("Use Limwurt seed on the patch.");
                    highlightFlowerPatches(graphics, highlightUseItemWithAlpha);
                    itemHighlight(graphics, ItemID.LIMPWURT_SEED, highlightUseItemWithAlpha);
                    break;
                case GROWING:
                    plugin.addTextToInfoBox("Use Compost on patch.");
                    if(isItemInInventory(selectedCompostID())) {
                        highlightFlowerPatches(graphics, highlightUseItemWithAlpha);
                        itemHighlight(graphics, selectedCompostID(), highlightUseItemWithAlpha);
                    }
                    else {
                        withdrawCompost(graphics);
                    }

                    if (isItComposted(plugin.getLastMessage())) {
                        currentHerbCase = 1;
                        flowerPatchDone = true;
                    }
                    break;
            }
        } else {
            flowerPatchDone = true;
        }
    }

    public Boolean treePatchDone = false;
    public Boolean patchComposted = false;

    public void treeSteps(Graphics2D graphics, Location.Teleport teleport) {
        int currentRegionId = client.getLocalPlayer().getWorldLocation().getRegionID();
        TreePatchChecker.PlantState plantState;
        //4771 falador, gnome stronghold, lumbridge, Taverly, Varrock
        //7905 farming guild
        if (currentRegionId == 4922) {
            plantState = TreePatchChecker.checkTreePatch(client, Varbits.FARMING_7905);
        } else {
            plantState = TreePatchChecker.checkTreePatch(client, Varbits.FARMING_4771);
        }
        if (!areaCheck.isPlayerWithinArea(teleport.getPoint(), 15))
        {
            //should be replaced with a pathing system, pointing arrow or something else eventually
            highlightTreePatches(graphics, leftClickColorWithAlpha);
        }
        else {
            switch (plantState) {
                case HEALTHY:
                    plugin.addTextToInfoBox("Check tree health.");
                    highlightTreePatches(graphics, leftClickColorWithAlpha);
                    break;
                case WEEDS:
                    plugin.addTextToInfoBox("Rake the tree patch.");
                    highlightTreePatches(graphics, leftClickColorWithAlpha);
                    break;
                case DEAD:
                    plugin.addTextToInfoBox("Clear the dead tree patch.");
                    highlightTreePatches(graphics, leftClickColorWithAlpha);
                    break;
                case PLANT:
                    plugin.addTextToInfoBox("Use Sapling on the patch.");
                    highlightTreePatches(graphics, highlightUseItemWithAlpha);
                    highlightTreeSapling(graphics, highlightUseItemWithAlpha);
                    break;
                case DISEASED:
                    plugin.addTextToInfoBox("Prune the tree patch patch.");
                    highlightTreePatches(graphics, highlightUseItemWithAlpha);
                    break;
                case REMOVE:
                    plugin.addTextToInfoBox("Pay to remove tree, or cut it down and clear the patch.");
                    if(!isInterfaceOpen(219, 1)) {
                        highlightNpc(graphics, "Heskel", leftClickColorWithAlpha); //Falador
                        highlightNpc(graphics, "Rosie", leftClickColorWithAlpha); //Farming Guild
                        highlightNpc(graphics, "Prissy Scilla", leftClickColorWithAlpha); //Gnome Stronghold
                        highlightNpc(graphics, "Fayeth", leftClickColorWithAlpha); //Lumbridge
                        highlightNpc(graphics, "Alain", leftClickColorWithAlpha); //Taverly
                        highlightNpc(graphics, "Treznor", leftClickColorWithAlpha); //Varrock
                    }
                    else {
                        Widget widget = client.getWidget(219, 1);
                        highlightDynamicComponent(graphics, widget, 1, leftClickColorWithAlpha);
                    }
                    break;
                case UNKNOWN:
                    plugin.addTextToInfoBox("UNKNOWN state: Try to do something with the tree patch to change its state.");
                    break;
                case GROWING:
                    plugin.addTextToInfoBox("Use Compost on patch.");
                    if(isItemInInventory(selectedCompostID())) {
                        highlightTreePatches(graphics, highlightUseItemWithAlpha);
                        itemHighlight(graphics, selectedCompostID(), highlightUseItemWithAlpha);
                    }
                    else {
                        withdrawCompost(graphics);
                    }
                    if (isItComposted(plugin.getLastMessage())) {
                        currentHerbCase = 1;
                        treePatchDone = true;
                    }
                    break;
            }
        }
    }

    public Boolean fruitTreePatchDone = false;

    public void fruitTreeSteps(Graphics2D graphics, Location.Teleport teleport) {
        int currentRegionId = client.getLocalPlayer().getWorldLocation().getRegionID();
        FruitTreePatchChecker.PlantState plantState;
        //Varbits.FARMING_4771 brimhaven, catherby, Lletya, tree gnome village
        //Varbits.FARMING_7909 farming guild
        //Varbits.FARMING_4772 gnome stronghold
        if (currentRegionId == 4922) {
            plantState = FruitTreePatchChecker.checkFruitTreePatch(client, Varbits.FARMING_7909);
        } else if (currentRegionId == 9782 || currentRegionId == 9781) {
            plantState = FruitTreePatchChecker.checkFruitTreePatch(client, Varbits.FARMING_4772);
        } else {
            plantState = FruitTreePatchChecker.checkFruitTreePatch(client, Varbits.FARMING_4771);
        }
        if (!areaCheck.isPlayerWithinArea(teleport.getPoint(), 15)) {
            //should be replaced with a pathing system, point arrow or something else eventually
            highlightFruitTreePatches(graphics, leftClickColorWithAlpha);
        } else {
            switch (plantState) {
                case HEALTHY:
                    plugin.addTextToInfoBox("Check Fruit tree health.");
                    highlightFruitTreePatches(graphics, leftClickColorWithAlpha);
                    break;
                case WEEDS:
                    plugin.addTextToInfoBox("Rake the fruit tree patch.");
                    highlightFruitTreePatches(graphics, leftClickColorWithAlpha);
                    break;
                case DEAD:
                    plugin.addTextToInfoBox("Clear the dead fruit tree patch.");
                    highlightFruitTreePatches(graphics, leftClickColorWithAlpha);
                    break;
                case PLANT:
                    plugin.addTextToInfoBox("Use Sapling on the patch.");
                    highlightFruitTreePatches(graphics, highlightUseItemWithAlpha);
                    highlightFruitTreeSapling(graphics, highlightUseItemWithAlpha);
                    break;
                case DISEASED:
                    plugin.addTextToInfoBox("Prune the fruit tree patch.");
                    highlightFruitTreePatches(graphics, leftClickColorWithAlpha);
                    break;
                case REMOVE:
                    plugin.addTextToInfoBox("Pay to remove fruit tree, or cut it down and clear the patch.");
                    if(!isInterfaceOpen(219, 1)) {
                        highlightNpc(graphics, "Garth", leftClickColorWithAlpha); //Brimhaven
                        highlightNpc(graphics, "Ellena", leftClickColorWithAlpha); //Catherby
                        highlightNpc(graphics, "Nikkie", leftClickColorWithAlpha); //Farming Guild
                        highlightNpc(graphics, "Bolongo", leftClickColorWithAlpha); //Gnome Stronghold
                        highlightNpc(graphics, "Liliwen", leftClickColorWithAlpha); //Lletya
                        highlightNpc(graphics, "Gileth", leftClickColorWithAlpha); //Tree Gnome Village
                    }
                    else {
                        Widget widget = client.getWidget(219, 1);
                        highlightDynamicComponent(graphics, widget, 1, leftClickColorWithAlpha);
                    }
                    break;
                case UNKNOWN:
                    plugin.addTextToInfoBox("UNKNOWN state: Try to do something with the tree patch to change its state.");
                    break;
                case GROWING:
                    plugin.addTextToInfoBox("Use Compost on patch.");
                    if(isItemInInventory(selectedCompostID())) {
                        highlightFruitTreePatches(graphics, highlightUseItemWithAlpha);
                        itemHighlight(graphics, selectedCompostID(), highlightUseItemWithAlpha);
                    }
                    else {
                        withdrawCompost(graphics);
                    }

                    if (isItComposted(plugin.getLastMessage())) {
                        currentHerbCase = 1;
                        fruitTreePatchDone = true;
                    }
                    break;
            }
        }
    }

    private List<Integer> getGameObjectIdsByName(String name) {
        List<Integer> foundObjectIds = new ArrayList<>();
        Scene scene = client.getScene();
        Tile[][][] tiles = scene.getTiles();

        for (int x = 0; x < Constants.SCENE_SIZE; x++) {
            for (int y = 0; y < Constants.SCENE_SIZE; y++) {
                Tile tile = tiles[client.getPlane()][x][y];
                if (tile == null) {
                    continue;
                }

                for (GameObject gameObject : tile.getGameObjects()) {
                    if (gameObject != null) {
                        ObjectComposition objectComposition = client.getObjectDefinition(gameObject.getId());
                        if (objectComposition != null && objectComposition.getName().equals(name)) {
                            foundObjectIds.add(gameObject.getId());
                        }
                    }
                }
            }
        }

        return foundObjectIds;
    }

    public void inHouseCheck() {
        if(getGameObjectIdsByName("Portal").contains(4525))
        {
            currentTeleportCase = 2;
        }
    }

    public void gettingToHouse(Graphics2D graphics) {
        FarmingHelperConfig.OptionEnumHouseTele teleportOption = config.enumConfigHouseTele();
        switch (teleportOption) {
            case Law_air_earth_runes:
                InventoryTabChecker.TabState tabState;
                tabState = InventoryTabChecker.checkTab(client, VarClientInt.INVENTORY_TAB);
                switch (tabState) {
                    case INVENTORY:
                    case REST:
                        interfaceOverlay(161, 64).render(graphics);
                        break;
                    case SPELLBOOK:
                        interfaceOverlay(218, 29).render(graphics);
                        inHouseCheck();
                        break;
                }
            case Teleport_To_House:
                inHouseCheck();
                itemHighlight(graphics, ItemID.TELEPORT_TO_HOUSE, leftClickColorWithAlpha);
                break;
            case Construction_cape:
                inHouseCheck();
                itemHighlight(graphics, ItemID.CONSTRUCT_CAPE, rightClickColorWithAlpha);
                break;
            case Construction_cape_t:
                inHouseCheck();
                itemHighlight(graphics, ItemID.CONSTRUCT_CAPET, rightClickColorWithAlpha);
                break;
            case Max_cape:
                inHouseCheck();
                itemHighlight(graphics, ItemID.MAX_CAPE, rightClickColorWithAlpha);
                break;
        }
    }

    public static int currentTeleportCase = 1;

    public boolean isAtDestination = false;


    public void gettingToLocation(Graphics2D graphics, Location location) {
        updateColors();
        Location.Teleport teleport = location.getSelectedTeleport();
        Boolean locationEnabledBool = false;
        if (plugin.getFarmingTeleportOverlay().herbRun) {
            locationEnabledBool = plugin.getHerbLocationEnabled(location.getName());
        }
        if (plugin.getFarmingTeleportOverlay().treeRun) {
            locationEnabledBool = plugin.getTreeLocationEnabled(location.getName());
        }
        if (plugin.getFarmingTeleportOverlay().fruitTreeRun) {
            locationEnabledBool = plugin.getFruitTreeLocationEnabled(location.getName());
        }
        if (locationEnabledBool) {
            if (!isAtDestination) {
                int currentRegionId = client.getLocalPlayer().getWorldLocation().getRegionID();
                plugin.addTextToInfoBox(teleport.getDescription());
                switch (teleport.getCategory()) {
                    case ITEM:
                        if (teleport.getInterfaceGroupId() != 0) {
                            if (!isInterfaceOpen(teleport.getInterfaceGroupId(), teleport.getInterfaceChildId())) {
                                itemHighlight(graphics, teleport.getId(), rightClickColorWithAlpha);
                                if (!teleport.getRightClickOption().equals("null")) {
                                    highlightRightClickOption(graphics, teleport.getRightClickOption());
                                }
                            } else {
                                Widget widget = client.getWidget(teleport.getInterfaceGroupId(), teleport.getInterfaceChildId());
                                highlightDynamicComponent(graphics, widget, 1, leftClickColorWithAlpha);
                            }
                            if (currentRegionId == teleport.getRegionId()) {
                                currentTeleportCase = 1;
                                isAtDestination = true;
                                startSubCases = true;
                                if (location.getFarmLimps()) {
                                    farmLimps = true;
                                }
                            }
                        } else {
                            if (!teleport.getRightClickOption().equals("null")) {
                                itemHighlight(graphics, teleport.getId(), rightClickColorWithAlpha);
                                highlightRightClickOption(graphics, teleport.getRightClickOption());
                            } else {
                                if(teleport.getId() == ItemID.TELEPORT_CRYSTAL_1) {
                                    highlightTeleportCrystal(graphics, leftClickColorWithAlpha);
                                }
                                if(teleport.getId() == ItemID.SKILLS_NECKLACE1) {
                                    String index = location.getName();
                                    if(Objects.equals(index, "Ardougne")) {
                                        highlightSkillsNecklace(graphics, leftClickColorWithAlpha);
                                        highlightRightClickOption(graphics, "Rub");
                                        Widget widget = client.getWidget(187, 3);
                                        highlightDynamicComponent(graphics, widget, 0, leftClickColorWithAlpha);
                                    }
                                    if(Objects.equals(index, "Farming Guild")) {
                                        highlightSkillsNecklace(graphics, leftClickColorWithAlpha);
                                        highlightRightClickOption(graphics, "Rub");
                                        Widget widget = client.getWidget(187, 3);
                                        highlightDynamicComponent(graphics, widget, 5, leftClickColorWithAlpha);
                                    }
                                }

                                else {
                                    itemHighlight(graphics, teleport.getId(), leftClickColorWithAlpha);
                                }
                            }
                            if (currentRegionId == teleport.getRegionId()) {
                                currentTeleportCase = 1;
                                isAtDestination = true;
                                startSubCases = true;
                                if (location.getFarmLimps()) {
                                    farmLimps = true;
                                }
                            }
                        }
                        break;
                    case PORTAL_NEXUS:
                        switch (currentTeleportCase) {
                            case 1:
                                gettingToHouse(graphics);
                                break;
                            case 2:
                                if (!isInterfaceOpen(17, 0)) {
                                    List<Integer> portalNexusIds = getGameObjectIdsByName("Portal Nexus");
                                    for (Integer objectId : portalNexusIds) {
                                        gameObjectOverlay(objectId, leftClickColorWithAlpha).render(graphics);
                                    }
                                } else {
                                    int index = getChildIndexPN(location.getName());
                                    Widget widget = client.getWidget(17, 13);
                                    highlightDynamicComponent(graphics, widget, index, leftClickColorWithAlpha);
                                }
                                if (currentRegionId == teleport.getRegionId()) {
                                    currentTeleportCase = 1;
                                    isAtDestination = true;
                                    startSubCases = true;
                                    if (location.getFarmLimps()) {
                                        farmLimps = true;
                                    }
                                }
                                break;
                        }
                        break;
                    case JEWELLERY_BOX:
                        switch (currentTeleportCase) {
                            case 1:
                                gettingToHouse(graphics);
                                break;
                            case 2:
                                List<Integer> jewelleryBoxIds = Arrays.asList(29154, 29155, 29156);

                                if (!isInterfaceOpen(590, 0)) {
                                    for (int id : jewelleryBoxIds) {
                                        gameObjectOverlay(id, leftClickColorWithAlpha).render(graphics);
                                    }
                                    gameObjectOverlay(teleport.getId(), leftClickColorWithAlpha).render(graphics);
                                } else {
                                    Widget widget = client.getWidget(590, 5);
                                    highlightDynamicComponent(graphics, widget, 10, leftClickColorWithAlpha);
                                }
                                if (currentRegionId == teleport.getRegionId()) {
                                    currentTeleportCase = 1;
                                    isAtDestination = true;
                                    startSubCases = true;
                                    if (location.getFarmLimps()) {
                                        farmLimps = true;
                                    }
                                }
                                break;
                        }
                        break;
                    case MOUNTED_XERICS:
                        switch (currentTeleportCase) {
                            case 1:
                                gettingToHouse(graphics);
                                break;
                            case 2:
                                List<Integer> xericsTalismanIds = Arrays.asList(33411, 33412, 33413, 33414, 33415);

                                if (!isInterfaceOpen(teleport.getInterfaceGroupId(), teleport.getInterfaceChildId())) {
                                    for (int id : xericsTalismanIds) {
                                        Overlay decorativeObjectHighlight = decorativeObjectOverlay(id, leftClickColorWithAlpha);
                                        decorativeObjectHighlight.render(graphics);
                                    }
                                } else {
                                    Widget widget = client.getWidget(teleport.getInterfaceGroupId(), teleport.getInterfaceChildId());
                                    highlightDynamicComponent(graphics, widget, 1, leftClickColorWithAlpha);
                                    if (currentRegionId == teleport.getRegionId()) {
                                        currentTeleportCase = 1;
                                        isAtDestination = true;
                                        startSubCases = true;
                                        if (location.getFarmLimps()) {
                                            farmLimps = true;
                                        }
                                    }
                                }
                                break;
                        }
                    case SPELLBOOK:
                        InventoryTabChecker.TabState tabState;
                        tabState = InventoryTabChecker.checkTab(client, VarClientInt.INVENTORY_TAB);
                        switch (tabState) {
                            case REST:
                                if (currentRegionId == teleport.getRegionId()) {
                                    currentTeleportCase = 1;
                                    isAtDestination = true;
                                    startSubCases = true;
                                }
                            case INVENTORY:
                                interfaceOverlay(161, 64).render(graphics);
                                if (currentRegionId == teleport.getRegionId()) {
                                    currentTeleportCase = 1;
                                    isAtDestination = true;
                                    startSubCases = true;
                                }
                                break;
                            case SPELLBOOK:
                                interfaceOverlay(teleport.getInterfaceGroupId(), teleport.getInterfaceChildId()).render(graphics);
                                if (currentRegionId == teleport.getRegionId()) {
                                    currentTeleportCase = 1;
                                    isAtDestination = true;
                                    startSubCases = true;
                                }
                                break;
                        }

                        break;
                    default:
                        // Optional: Code for handling unexpected values
                        break;
                }

            } else {
                farming(graphics, teleport);
            }
        } else {
            herbRunIndex++;
        }
    }
    //}


    public static boolean farmLimps = false;

    public void farming(Graphics2D graphics, Location.Teleport teleport) {
        if (startSubCases) {
            if (herbRun) {
                if (subCase == 1) {
                    herbSteps(graphics, teleport);
                    if (herbPatchDone) {
                        subCase = 2;
                        herbPatchDone = false;
                        patchComposted = false;
                    }
                } else if (subCase == 2) {
                    if (config.generalLimpwurt()) {
                        flowerSteps(graphics);
                        if (flowerPatchDone) {
                            subCase = 1;
                            startSubCases = false;
                            isAtDestination = false;
                            herbRunIndex++;
                            farmLimps = false;
                            flowerPatchDone = false;
                            patchComposted = false;

                        }
                    } else {
                        subCase = 1;
                        startSubCases = false;
                        isAtDestination = false;
                        herbRunIndex++;
                        farmLimps = false;
                        flowerPatchDone = false;
                        patchComposted = false;
                    }
                }
            }
            if (treeRun) {
                treeSteps(graphics, teleport);
                if (treePatchDone) {
                    startSubCases = false;
                    isAtDestination = false;
                    herbRunIndex++;
                    patchComposted = false;
                    treePatchDone = false;
                }
            }
            if (fruitTreeRun) {
                fruitTreeSteps(graphics, teleport);
                if (fruitTreePatchDone) {
                    startSubCases = false;
                    isAtDestination = false;
                    herbRunIndex++;
                    patchComposted = false;
                    fruitTreePatchDone = false;
                }
            }
        }
    }

    public static int subCase = 1;
    public static boolean startSubCases = false;
    public static int herbRunIndex = 0;

    public void RemoveOverlay() {
        plugin.overlayManager.remove(farmingHelperOverlay);
        plugin.overlayManager.remove(farmingTeleportOverlay);
        plugin.overlayManager.remove(farmingHelperOverlayInfoBox);
        plugin.setOverlayActive(false);
        plugin.setTeleportOverlayActive(false);
        herbRunIndex = 0;
        currentTeleportCase = 1;
        subCase = 1;
        startSubCases = false;
        isAtDestination = false;
        farmLimps = false;
        flowerPatchDone = false;
        plugin.setItemsCollected(false);
        plugin.getFarmingTeleportOverlay().herbRun = false;
        plugin.getFarmingTeleportOverlay().treeRun = false;
        plugin.getFarmingTeleportOverlay().fruitTreeRun = false;

        fruitTreeRun = false;
        herbRun = false;
        treeRun = false;

    }

    public Boolean herbRun = false;

    public Boolean treeRun = false;

    public Boolean fruitTreeRun = false;

    @Override
    public Dimension render(Graphics2D graphics) {
        if (plugin.isTeleportOverlayActive()) {
            Client client = plugin.getClient();
            if (herbRun) {
                switch (herbRunIndex) {
                    case 0:
                        gettingToLocation(graphics, plugin.getArdougneLocation());
                        break;
                    case 1:
                        gettingToLocation(graphics, plugin.getCatherbyLocation());
                        break;
                    case 2:
                        gettingToLocation(graphics, plugin.getFaladorLocation());
                        break;
                    case 3:
                        gettingToLocation(graphics, plugin.getFarmingGuildLocation());
                        break;
                    case 4:
                        gettingToLocation(graphics, plugin.getHarmonyLocation());
                        break;
                    case 5:
                        gettingToLocation(graphics, plugin.getKourendLocation());
                        break;
                    case 6:
                        gettingToLocation(graphics, plugin.getMorytaniaLocation());
                        break;
                    case 7:
                        gettingToLocation(graphics, plugin.getTrollStrongholdLocation());
                        break;
                    case 8:
                        gettingToLocation(graphics, plugin.getWeissLocation());
                        break;
                    case 9:
                        RemoveOverlay();
                        // add more cases for each location in the array
                    default:
                        RemoveOverlay();
                        // Add any other actions you want to perform when the herb run is complete
                        break;
                }
            } else if (treeRun) {
                switch (herbRunIndex) {
                    case 0:
                        gettingToLocation(graphics, plugin.getFaladorTreeLocation());
                        break;
                    case 1:
                        gettingToLocation(graphics, plugin.getFarmingGuildTreeLocation());
                        break;
                    case 2:
                        gettingToLocation(graphics, plugin.getGnomeStrongholdTreeLocation());
                        break;
                    case 3:
                        gettingToLocation(graphics, plugin.getLumbridgeTreeLocation());
                        break;
                    case 4:
                        gettingToLocation(graphics, plugin.getTaverleyTreeLocation());
                        break;
                    case 5:
                        gettingToLocation(graphics, plugin.getVarrockTreeLocation());
                        break;
                    case 6:
                        RemoveOverlay();
                        // add more cases for each location in the array
                    default:
                        RemoveOverlay();
                        // Add any other actions you want to perform when the herb run is complete
                        break;
                }
            } else if (fruitTreeRun) {
                switch (herbRunIndex) {
                    case 0:
                        gettingToLocation(graphics, plugin.getBrimhavenFruitTreeLocation());
                        break;
                    case 1:
                        gettingToLocation(graphics, plugin.getCatherbyFruitTreeLocation());
                        break;
                    case 2:
                        gettingToLocation(graphics, plugin.getFarmingGuildFruitTreeLocation());
                        break;
                    case 3:
                        gettingToLocation(graphics, plugin.getGnomeStrongholdFruitTreeLocation());
                        break;
                    case 4:
                        gettingToLocation(graphics, plugin.getLletyaFruitTreeLocation());
                        break;
                    case 5:
                        gettingToLocation(graphics, plugin.getTreeGnomeVillageTreeLocation());
                        break;
                    case 6:
                        RemoveOverlay();
                        // add more cases for each location in the array
                    default:
                        RemoveOverlay();
                        // Add any other actions you want to perform when the herb run is complete
                        break;
                }
            }
        }
        return null;
    }
}
package com.farminghelper.speaax;

import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Map;

import com.farminghelper.speaax.ItemsAndLocations.HerbRunItemAndLocation;
import com.farminghelper.speaax.ItemsAndLocations.TreeRunItemAndLocation;
import com.farminghelper.speaax.ItemsAndLocations.FruitTreeRunItemAndLocation;

public class FarmingHelperPanel extends PluginPanel
{
    private final HerbRunItemAndLocation herbRunItemAndLocation;
    private final TreeRunItemAndLocation treeRunItemAndLocation;
    private  final FruitTreeRunItemAndLocation fruitTreeRunItemAndLocation;
	private final FarmingHelperPlugin plugin;
    private final OverlayManager overlayManager;
    private final FarmingTeleportOverlay farmingTeleportOverlay;
    private JButton herbButton;
	private JButton treeButton;
	private JButton fruitTreeButton;
    private JLabel textLabel;

    public FarmingHelperPanel(FarmingHelperPlugin plugin, OverlayManager overlayManager, FarmingTeleportOverlay farmingTeleportOverlay, HerbRunItemAndLocation herbRunItemAndLocation, TreeRunItemAndLocation treeRunItemAndLocation, FruitTreeRunItemAndLocation fruitTreeRunItemAndLocation)
    {
        this.herbRunItemAndLocation = herbRunItemAndLocation;
        this.treeRunItemAndLocation = treeRunItemAndLocation;
        this.farmingTeleportOverlay = farmingTeleportOverlay;
        this.fruitTreeRunItemAndLocation = fruitTreeRunItemAndLocation;
        this.plugin = plugin;
        this.overlayManager = overlayManager;
        setLayout(new GridBagLayout());

        GridBagConstraints c = new GridBagConstraints();
        c.fill = GridBagConstraints.HORIZONTAL;
        c.insets = new Insets(0, 2, 4, 2);

        c.gridx = 0;
        c.gridy = 0;

        herbButton = new JButton("Herb run");
		herbButton.setFocusable(false);
        herbButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                plugin.runOnClientThread(() -> {
                    Map<Integer, Integer> herbItems = herbRunItemAndLocation.getHerbItems();
                    plugin.updateHerbOverlay(herbItems);
                    plugin.setOverlayActive(!plugin.isOverlayActive());
                    onHerbButtonClicked();
                });
            }
        });

        add(herbButton, c);

        JLabel textLabel = new JLabel("Tree/Fruit Tree run is not recommended.");

        c.gridx = 0;
        c.gridy = 1;

        add(textLabel, c);


		c.gridx = 0;
		c.gridy = 2;


		treeButton = new JButton("Tree run");
        treeButton.setFocusable(false);
        treeButton.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e) {
                plugin.runOnClientThread(() -> {
                    Map<Integer, Integer> treeItems = treeRunItemAndLocation.getTreeItems();
                    plugin.updateTreeOverlay(treeItems);
                    plugin.setOverlayActive(!plugin.isOverlayActive());
                    onTreeButtonClicked();
                });
            }
        });

		add(treeButton, c);

		c.gridx = 0;
		c.gridy = 3;

		
		fruitTreeButton = new JButton("Fruit Tree run");
        fruitTreeButton.setFocusable(false);
        fruitTreeButton.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e) {
                plugin.runOnClientThread(() -> {
                    Map<Integer, Integer> fruitTreeItems = fruitTreeRunItemAndLocation.getFruitTreeItems();
                    plugin.updateFruitTreeOverlay(fruitTreeItems);
                    plugin.setOverlayActive(!plugin.isOverlayActive());
                    onFruitTreeButtonClicked();
                });
            }
        });

        add(fruitTreeButton, c);

        JTextArea textAreaTip = new JTextArea("Tips: \n - Rune pouch and combination runes work. \n - If you don't have Bottomless compost bucket you should store compost @ Tool Leprechaun, the plugin checks if you have compost stored there.");
        textAreaTip.setWrapStyleWord(true);
        textAreaTip.setLineWrap(true);
        textAreaTip.setEditable(false);


        c.gridx = 0;
        c.gridy = 6;

        add(textAreaTip, c);
    }

    private void onHerbButtonClicked() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                FarmingHelperOverlay overlay = plugin.getFarmingHelperOverlay();

                if (!plugin.isOverlayActive()) {
                    farmingTeleportOverlay.RemoveOverlay();
                    System.out.println("Remove overlay from button");
                } else {
                    System.out.println("Add overlay from button");
                    plugin.getFarmingTeleportOverlay().herbRun = true;
                    overlayManager.add(overlay);
                    overlayManager.add(farmingTeleportOverlay);
                }
            }
        });
    }

    private void onTreeButtonClicked()
    {
        // Handle button click event here
        SwingUtilities.invokeLater(new Runnable()
        {
            @Override
            public void run() {
                FarmingHelperOverlay overlay = plugin.getFarmingHelperOverlay();

                if (!plugin.isOverlayActive()) {
                    farmingTeleportOverlay.RemoveOverlay();
                    System.out.println("Remove overlay from button");
                } else {
                    System.out.println("Add overlay from button");
                    plugin.getFarmingTeleportOverlay().treeRun = true;
                    overlayManager.add(overlay);
                    overlayManager.add(farmingTeleportOverlay);
                }
            }
        });
    }
	private void onFruitTreeButtonClicked()
    {
        // Handle button click event here
        SwingUtilities.invokeLater(new Runnable()
        {
            @Override
            public void run() {
                FarmingHelperOverlay overlay = plugin.getFarmingHelperOverlay();

                if (!plugin.isOverlayActive()) {
                    farmingTeleportOverlay.RemoveOverlay();
                    System.out.println("Remove overlay from button");
                } else {
                    System.out.println("Add overlay from button");
                    plugin.getFarmingTeleportOverlay().fruitTreeRun = true;
                    overlayManager.add(overlay);
                    overlayManager.add(farmingTeleportOverlay);
                }
            }
        });
    }
}
package com.farminghelper.speaax;

import net.runelite.api.Client;
import net.runelite.api.coords.WorldPoint;

import javax.inject.Inject;

public class AreaCheck {
    private Client client;

    @Inject
    public AreaCheck(Client client) {
        this.client = client;
    }

    public boolean isPlayerWithinArea(WorldPoint centerTile, int range) {
        WorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();

        int minX = centerTile.getX() - range;
        int maxX = centerTile.getX() + range;
        int minY = centerTile.getY() - range;
        int maxY = centerTile.getY() + range;

        return playerLocation.getX() >= minX &&
                playerLocation.getX() <= maxX &&
                playerLocation.getY() >= minY &&
                playerLocation.getY() <= maxY;
    }
}
package com.farminghelper.speaax;
public class ItemRequirement {
    private int itemId;
    private int quantity;

    public ItemRequirement(int itemId, int quantity) {
        this.itemId = itemId;
        this.quantity = quantity;
    }

    public int getItemId() {
        return itemId;
    }

    public int getQuantity() {
        return quantity;
    }
}

package com.farminghelper.speaax;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;

import javax.inject.Inject;
import java.awt.Dimension;
import java.awt.Graphics2D;

public class FarmingHelperOverlayInfoBox extends Overlay {
    private final Client client;
    private final PanelComponent panelComponent = new PanelComponent();
    private final FarmingHelperPlugin plugin;

    private String text;

    @Inject
    public FarmingHelperOverlayInfoBox(Client client, FarmingHelperPlugin plugin) {
        this.client = client;
        this.plugin = plugin;
        setPosition(OverlayPosition.TOP_LEFT);
        setLayer(OverlayLayer.ALWAYS_ON_TOP);
    }

    public void setText(String text) {
        this.text = text;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (!plugin.isOverlayActive()) {
            return null;
        }

        panelComponent.getChildren().clear();

        if (text != null) {
            panelComponent.getChildren().add(LineComponent.builder().left(text).build());
        }

        return panelComponent.render(graphics);
    }
}
package com.farminghelper.speaax;

import net.runelite.api.Client;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class TreePatchChecker {

    public enum Tree {
        //Order of lists is "growing, diseased, dead, healthy, remove"
        OAK(Arrays.asList(8,9,10,11), Arrays.asList(73,74,75), Arrays.asList(137, 138, 139, 141), Arrays.asList(12), Arrays.asList(13,14)),
        WILLOW(Arrays.asList(15,16,17,18,19,20), Arrays.asList(80,81,82,83,84,86), Arrays.asList(144,145,146,147,148, 150), Arrays.asList(21), Arrays.asList(22,23)),
        MAPLE(Arrays.asList(24,25,26,27,28,29,30,31), Arrays.asList(89,90,91,92,93,94,95,97), Arrays.asList(153,154,155,156,157,158,159, 161), Arrays.asList(32), Arrays.asList(33,34)),
        YEW(Arrays.asList(35,36,37,38,39,40,41,42,43,44), Arrays.asList(100,101,102,103,104,105,106,107,108, 110), Arrays.asList(164,165,166,167,168,169,170,171,172, 174), Arrays.asList(45), Arrays.asList(46,47)),
        MAGIC(Arrays.asList(48,49,50,51,52,53,54,55,56,57,58,59), Arrays.asList(113,114,115,116,117,118,119,120,121,122,123, 125), Arrays.asList(177,178,179,180,181,182,183,184,185,186,187, 189), Arrays.asList(60), Arrays.asList(61,62));

        private final List<Integer> growing;
        private final List<Integer> diseased;
        private final List<Integer> dead;
        private final List<Integer> healthy;
        private final List<Integer> remove;

        Tree(List<Integer> growing, List<Integer> diseased, List<Integer> dead, List<Integer> healthy, List<Integer> remove) {
            this.growing = growing;
            this.diseased = diseased;
            this.dead = dead;
            this.healthy = healthy;
            this.remove = remove;
        }

        public List<Integer> getGrowing() {
            return growing;
        }

        public List<Integer> getDiseased() {
            return diseased;
        }

        public List<Integer> getDead() {
            return dead;
        }

        public List<Integer> getHealthy() {
            return healthy;
        }
        public List<Integer> getRemove() {
            return remove;
        }
    }

    // Combine all growing and dead varbit values into single lists
    private static final List<Integer> growing = Stream.of(Tree.values())
            .flatMap(tree -> tree.getGrowing().stream())
            .collect(Collectors.toList());

    private static final List<Integer> diseased = Stream.of(Tree.values())
            .flatMap(tree -> tree.getDiseased().stream())
            .collect(Collectors.toList());

    private static final List<Integer> dead = Stream.of(Tree.values())
            .flatMap(tree -> tree.getDead().stream())
            .collect(Collectors.toList());

    private static final List<Integer> healthy = Stream.of(Tree.values())
            .flatMap(tree -> tree.getHealthy().stream())
            .collect(Collectors.toList());
    private static final List<Integer> remove = Stream.of(Tree.values())
            .flatMap(tree -> tree.getRemove().stream())
            .collect(Collectors.toList());

    private static final List<Integer> weeds = Arrays.asList(0, 1, 2);

    public enum PlantState {
        GROWING,
        DISEASED,
        DEAD,
        WEEDS,
        HEALTHY,
        REMOVE,
        PLANT,
        UNKNOWN
    }

    public static PlantState checkTreePatch(Client client, int varbitIndex) {
        int varbitValue = client.getVarbitValue(varbitIndex);
        if (growing.contains(varbitValue)) {
            return PlantState.GROWING;
        } else if (diseased.contains(varbitValue)) {
            return PlantState.DISEASED;
        } else if (dead.contains(varbitValue)) {
            return PlantState.DEAD;
        } else if (weeds.contains(varbitValue)) {
            return PlantState.WEEDS;
        }  else if (healthy.contains(varbitValue)) {
            return PlantState.HEALTHY;
        }else if (remove.contains(varbitValue)) {
            return PlantState.REMOVE;
        } else if (varbitValue == 3) {
            return PlantState.PLANT;
        } else {
            return PlantState.UNKNOWN;
        }
    }
}
package com.farminghelper.speaax;

import net.runelite.api.Client;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class HerbPatchChecker {
    public enum Herb {
        //Order of lists is "growing, diseased, harvest"
        GUAM(Arrays.asList(4,5,6,7), Arrays.asList(128,129,130), Arrays.asList(8,9,10)),
        MARRENTILL(Arrays.asList(11,12,13,14), Arrays.asList(131,132,133), Arrays.asList(15,16,17)),
        TARROMIN(Arrays.asList(18,19,20,21), Arrays.asList(134,135,136), Arrays.asList(22,23,24)),
        HARRALANDER(Arrays.asList(25,26,27,28), Arrays.asList(137,138,139), Arrays.asList(29,30,31)),
        RANARR(Arrays.asList(32,33,34,35), Arrays.asList(140,141,142), Arrays.asList(36,37,38)),
        TOADFLAX(Arrays.asList(39,40,41,42), Arrays.asList(143,144,145), Arrays.asList(43,44,45)),
        IRIT(Arrays.asList(46,47,48,49), Arrays.asList(146,147,148), Arrays.asList(50,51,52)),
        AVANTOE(Arrays.asList(53,54,55,56), Arrays.asList(149,159,151), Arrays.asList(57,58,59)),
        KWUARM(Arrays.asList(68,69,70,71), Arrays.asList(152,153,154), Arrays.asList(72,73,74)),
        SNAPDRAGON(Arrays.asList(75,76,77,78), Arrays.asList(155,156,157), Arrays.asList(79,80,81)),
        CADANTINE(Arrays.asList(82,83,84,85), Arrays.asList(158,159,160), Arrays.asList(86,87,88)),
        LANTADYME(Arrays.asList(89,90,91,92), Arrays.asList(161,162,163), Arrays.asList(93,94,95)),
        DWARF_WEED(Arrays.asList(96,97,98,99), Arrays.asList(164,165,166), Arrays.asList(100,101,102)),
        TORSTOL(Arrays.asList(103,104,105,106), Arrays.asList(167,168,169), Arrays.asList(107,108,109));

        private final List<Integer> growing;
        private final List<Integer> diseased;
        private final List<Integer> harvest;

        Herb(List<Integer> growing, List<Integer> dead, List<Integer> harvest) {
            this.growing = growing;
            this.diseased = dead;
            this.harvest = harvest;
        }

        public List<Integer> getGrowing() {
            return growing;
        }

        public List<Integer> getDead() {
            return diseased;
        }

        public List<Integer> getHarvest() {
            return harvest;
        }
    }

    // Combine all growing and dead varbit values into single lists
    private static final List<Integer> growing = Stream.of(Herb.values())
            .flatMap(herb -> herb.getGrowing().stream())
            .collect(Collectors.toList());

    private static final List<Integer> diseased = Stream.of(Herb.values())
            .flatMap(herb -> herb.getDead().stream())
            .collect(Collectors.toList());

    private static final List<Integer> harvest = Stream.of(Herb.values())
            .flatMap(herb -> herb.getHarvest().stream())
            .collect(Collectors.toList());

    private static final List<Integer> weeds = Arrays.asList(0, 1, 2);
    private static final List<Integer> dead = Arrays.asList(170,171,172);

    public enum PlantState {
        GROWING,
        DISEASED,
        HARVESTABLE,
        WEEDS,
        DEAD,
        PLANT,
        UNKNOWN
    }

    public static PlantState checkHerbPatch(Client client, int varbitIndex) {
        int varbitValue = client.getVarbitValue(varbitIndex);

        if (growing.contains(varbitValue)) {
            return PlantState.GROWING;
        } else if (diseased.contains(varbitValue)) {
            return PlantState.DISEASED;
        } else if (harvest.contains(varbitValue)) {
            return PlantState.HARVESTABLE;
        } else if (weeds.contains(varbitValue)) {
            return PlantState.WEEDS;
        } else if (dead.contains(varbitValue)) {
            return PlantState.DEAD;
        } else if (varbitValue == 3) {
            return PlantState.PLANT;
        } else {
            return PlantState.UNKNOWN;
        }
    }
}

package com.farminghelper.speaax;

import java.awt.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;

import net.runelite.api.coords.WorldPoint;

public class Location {
    public enum TeleportCategory {
        ITEM,
        PORTAL_NEXUS,
        JEWELLERY_BOX,
        MOUNTED_XERICS,
        SPELLBOOK
    }
    private String name;

    public String getName() {
        return name;
    }
    private Boolean farmLimps;

    public Boolean getFarmLimps() {
        return farmLimps;
    }

    private List<Teleport> teleportOptions;
    private FarmingHelperConfig config;
    private final Function<FarmingHelperConfig, FarmingHelperConfig.OptionEnumTeleport> selectedTeleportFunction;

    public Location(Function<FarmingHelperConfig, FarmingHelperConfig.OptionEnumTeleport> selectedTeleportFunction, FarmingHelperConfig config, String name, Boolean farmLimps) {
        this.config = config;
        this.selectedTeleportFunction = selectedTeleportFunction;
        this.name = name;
        this.farmLimps = farmLimps;
        this.teleportOptions = new ArrayList<>();
    }

    public void addTeleportOption(Teleport teleport) {
        teleportOptions.add(teleport);
    }

    public Teleport getSelectedTeleport() {
        String selectedEnumOption = selectedTeleportFunction.apply(config).name();
        for (Teleport teleport : teleportOptions) {
            if (teleport.getEnumOption().equalsIgnoreCase(selectedEnumOption)) {
                return teleport;
            }
        }
        return teleportOptions.isEmpty() ? null : teleportOptions.get(0);
    }





    public class Teleport {
        private TeleportCategory category;
        private String description;
        private Color color;
        private int id;
        private int interfaceGroupId;
        private int interfaceChildId;

        private int regionId;
        private String enumOption;
        private String rightClickOption;
        private List<ItemRequirement> itemRequirements;
        private WorldPoint point;

        public Teleport(String enumOption, TeleportCategory category, String description, int id, String rightClickOption, int interfaceGroupId, int interfaceChildId, int regionId, WorldPoint point, List<ItemRequirement> itemRequirements) {
            this.enumOption = enumOption;
            this.category = category;
            this.description = description;
            this.id = id;
            this.rightClickOption = rightClickOption;
            this.interfaceGroupId = interfaceGroupId;
            this.interfaceChildId = interfaceChildId;
            this.regionId = regionId;
            this.point = point;
            this.itemRequirements = itemRequirements;
        }

        public Map<Integer, Integer> getItemRequirements() {
            Map<Integer, Integer> requirements = new HashMap<>();
            for (ItemRequirement itemRequirement : itemRequirements) {
                requirements.put(itemRequirement.getItemId(), itemRequirement.getQuantity());
            }
            return requirements;
        }

        public WorldPoint getPoint(){return point;}

        public void addItemRequirement(int itemId, int quantity) {
            ItemRequirement itemRequirement = new ItemRequirement(itemId, quantity);
            this.itemRequirements.add(itemRequirement);
        }
        public void addAllItemRequirements(List<ItemRequirement> itemRequirements) {
            this.itemRequirements.addAll(itemRequirements);
        }

        public void updateTeleportItemId(int newItemId) {
            this.id = newItemId;
        }

        public TeleportCategory getCategory() {
            return category;
        }
        public int getRegionId() {
            return regionId;
        }
        public String getEnumOption() {
            return enumOption;
        }

        public String getDescription() {
            return description;
        }
        public String getRightClickOption() {
            return rightClickOption;
        }

        public void setDescription(String description) {
            this.description = description;
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public int getInterfaceGroupId() {
            return interfaceGroupId;
        }

        public void setInterfaceGroupId(int interfaceGroupId) {
            this.interfaceGroupId = interfaceGroupId;
        }

        public int getInterfaceChildId() {
            return interfaceChildId;
        }

        public void setInterfaceChildId(int interfaceChildId) {
            this.interfaceChildId = interfaceChildId;
        }

        public Color getColor() {
            return  color;
        }
    }
}
package com.farminghelper.speaax;

import net.runelite.api.Client;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class FruitTreePatchChecker {
    public enum FruitTree {
        //Order of lists is "growing, diseased, dead, healthy, remove"
        APPLE(Arrays.asList(8,9,10,11,12,13), Arrays.asList(21,22,23,24,25,26), Arrays.asList(27,28,29,30,31,32), Arrays.asList(34), Arrays.asList(14,15,16,17,18,19,20, 33)),
        BANANA(Arrays.asList(35,36,37,38,39,40), Arrays.asList(48,49,50,51,52,53), Arrays.asList(54,55,56,57,58,59), Arrays.asList(61), Arrays.asList(41,42,43,44,45,46,47, 60)),
        ORANGE(Arrays.asList(72,73,74,75,76,77), Arrays.asList(85,86,87,88,89, 90), Arrays.asList(91,92,93,94,95,96), Arrays.asList(98), Arrays.asList(78,79,80,81,82,83,84, 97)),
        CURRY(Arrays.asList(99,100,101,102,103,104), Arrays.asList(112,113,114,115,116,117), Arrays.asList(118,119,120,121,122,123), Arrays.asList(125), Arrays.asList(105,106,107,108,109,110,111, 124)),
        PINEAPPLE(Arrays.asList(136,137,138,139,140,141), Arrays.asList(149,150,151,152,153,154), Arrays.asList(155,156,157,158,159,160), Arrays.asList(162), Arrays.asList(142,143,144,145,146,147,148, 161)),
        PAPAYA(Arrays.asList(163,164,165,166,167,168), Arrays.asList(176,177,178,179,180,181), Arrays.asList(182,183,184,185,186,187), Arrays.asList(189), Arrays.asList(169,170,171,172,173,174,175, 188)),
        PALM(Arrays.asList(200,201,202,203,204,205), Arrays.asList(213,214,215,216,217,218), Arrays.asList(219,220,221,222,223,224), Arrays.asList(226), Arrays.asList(206,207,208,209,210,211,212, 225)),
        DRAGONFRUIT(Arrays.asList(227,228,229,230,231,232), Arrays.asList(240,241,242,243,244,245), Arrays.asList(246,247,248,249,250,251), Arrays.asList(253), Arrays.asList(233,234,235,236,237,238,239, 252));

        private final List<Integer> growing;
        private final List<Integer> diseased;
        private final List<Integer> dead;
        private final List<Integer> healthy;
        private final List<Integer> remove;

        FruitTree(List<Integer> growing, List<Integer> diseased, List<Integer> dead, List<Integer> healthy, List<Integer> remove) {
            this.growing = growing;
            this.diseased = diseased;
            this.dead = dead;
            this.healthy = healthy;
            this.remove = remove;
        }

        public List<Integer> getGrowing() {
            return growing;
        }

        public List<Integer> getDiseased() {
            return diseased;
        }

        public List<Integer> getDead() {
            return dead;
        }

        public List<Integer> getHealthy() {
            return healthy;
        }
        public List<Integer> getRemove() {
            return remove;
        }
    }

    // Combine all growing and dead varbit values into single lists
    private static final List<Integer> growing = Stream.of(FruitTree.values())
            .flatMap(fruitTree -> fruitTree.getGrowing().stream())
            .collect(Collectors.toList());

    private static final List<Integer> diseased = Stream.of(FruitTree.values())
            .flatMap(fruitTree -> fruitTree.getDiseased().stream())
            .collect(Collectors.toList());

    private static final List<Integer> dead = Stream.of(FruitTree.values())
            .flatMap(fruitTree -> fruitTree.getDead().stream())
            .collect(Collectors.toList());

    private static final List<Integer> healthy = Stream.of(FruitTree.values())
            .flatMap(fruitTree -> fruitTree.getHealthy().stream())
            .collect(Collectors.toList());
    private static final List<Integer> remove = Stream.of(FruitTree.values())
            .flatMap(fruitTree -> fruitTree.getRemove().stream())
            .collect(Collectors.toList());

    private static final List<Integer> weeds = Arrays.asList(0, 1, 2);

    public enum PlantState {
        GROWING,
        DISEASED,
        DEAD,
        WEEDS,
        HEALTHY,
        REMOVE,
        PLANT,
        UNKNOWN
    }

    public static PlantState checkFruitTreePatch(Client client, int varbitIndex) {
        int varbitValue = client.getVarbitValue(varbitIndex);
        if (growing.contains(varbitValue)) {
            return PlantState.GROWING;
        } else if (diseased.contains(varbitValue)) {
            return PlantState.DISEASED;
        } else if (dead.contains(varbitValue)) {
            return PlantState.DEAD;
        } else if (weeds.contains(varbitValue)) {
            return PlantState.WEEDS;
        }  else if (healthy.contains(varbitValue)) {
            return PlantState.HEALTHY;
        }else if (remove.contains(varbitValue)) {
            return PlantState.REMOVE;
        } else if (varbitValue == 3) {
            return PlantState.PLANT;
        } else {
            return PlantState.UNKNOWN;
        }
    }
}
package com.farminghelper.speaax;

import net.runelite.api.Client;

import java.util.Arrays;
import java.util.List;

public class InventoryTabChecker {
    // Add lists for each plant state
    private static final List<Integer> inventory = Arrays.asList(3);
    private static final List<Integer> spellbook = Arrays.asList(6);


    public enum TabState {
        INVENTORY,
        SPELLBOOK,
        REST
    }

    public static TabState checkTab(Client client, int varbitIndex) {
        int varbitValue = client.getVarcIntValue(varbitIndex);
        if (inventory.contains(varbitValue)) {
            return TabState.INVENTORY;
        } else if (spellbook.contains(varbitValue)) {
            return TabState.SPELLBOOK;
        } else {
            return TabState.REST;
        }
    }
}
package com.farminghelper.speaax;

import java.awt.*;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("farminghelper")
public interface FarmingHelperConfig extends Config
{
	@ConfigSection(
			name = "General",
			description = "The highlighted and hidden item lists",
			position = 0
	)
	String generalList = "generalList";

	enum OptionEnumHouseTele
	{
		Law_air_earth_runes,
		Teleport_To_House,
		Construction_cape,
		Construction_cape_t,
		Max_cape
	}
	public interface OptionEnumTeleport {
		String name();
	}
	@ConfigItem(
			position = 9,
			keyName = "enumConfigHouseTele",
			name = "House teleport",
			description = "Desired way to teleport to house",
			section = generalList
	)
	default OptionEnumHouseTele enumConfigHouseTele() { return OptionEnumHouseTele.Law_air_earth_runes; }
	@ConfigItem(
			position = 1,
			keyName = "highlightLeftClickColor",
			name = "Left Click Color",
			description = "The color to use for highlighting objects",
			section = generalList
	)
	default Color highlightLeftClickColor() {return new Color(0, 191, 255, 128);}
	@ConfigItem(
			position = 2,
			keyName = "highlightRightClickColor",
			name = "Right Click Color",
			description = "The color to use for highlighting objects",
			section = generalList
	)
	default Color highlightRightClickColor() {return new Color(0, 191, 30, 128);}
	@ConfigItem(
			position = 3,
			keyName = "highlightUseItemColor",
			name = "'Use' item Color",
			description = "The color to use for highlighting objects",
			section = generalList
	)
	default Color highlightUseItemColor() {return new Color(255, 192, 203, 128);}
	@ConfigItem(
			position = 4,
			keyName = "highlightAlpha",
			name = "Transparency",
			description = "The transparency value for the highlight color (0-255)",
			section = generalList
	)
	default int highlightAlpha() {return 128;}

	enum OptionEnumCompost
	{
		Compost,
		Supercompost,
		Ultracompost,
		Bottomless
	}
	@ConfigItem(
			position = 5,
			keyName = "enumConfigCompost",
			name = "Compost",
			description = "Desired Compost",
			section = generalList
	)
	default OptionEnumCompost enumConfigCompost() { return OptionEnumCompost.Bottomless; }


	@ConfigItem(
			keyName = "booleanConfigRake",
			name = "Rake",
			description = "Include rake?",
			position = 6,
			section = generalList
	)
	default boolean generalRake() { return false; }
	@ConfigItem(
			keyName = "booleanConfigLimpwurt",
			name = "Limpwurt",
			description = "Want to include limpwurts in your farm run?",
			position = 7,
			section = generalList
	)
	default boolean generalLimpwurt() { return false; }
	@ConfigItem(
			keyName = "booleanConfigAllotment",
			name = "Allotment (No code written yet)",
			description = "Want to include Allotment in your farm run?",
			position = 8,
			section = generalList
	)
	default boolean generalAllotment() { return false; }


	@ConfigSection(
		name = "Herbs",
		description = "The highlighted and hidden item lists",
		position = 1
	)
	String herbList = "herbList";

	@ConfigItem(
		keyName = "booleanConfigArdougneHerb",
		name = "Ardougne",
		description = "Include Ardougne?",
		position = 1,
		section = herbList
	)
	default boolean ardougneHerb() { return true; }
	
	@ConfigItem(
		position = 2,
		keyName = "booleanConfigCatherbyHerb",
		name = "Catherby",
		description = "Include Catherby?",
		section = herbList
	)
	default boolean catherbyHerb() { return true; }
	
	@ConfigItem(
		position = 3,
		keyName = "booleanConfigFaladorHerb",
		name = "Falador",
		description = "Include Falador?",
		section = herbList
	)
	default boolean faladorHerb() { return true; }
	
	@ConfigItem(
		position = 4,
		keyName = "booleanConfigFarmingGuildHerb",
		name = "Farming Guild",
		description = "Include Farming guild?(Requires level 65 farming and 60% Hosidious favour)",
		section = herbList
	)
	default boolean farmingGuildHerb() { return false; }
	
	@ConfigItem(
		position = 5,
		keyName = "booleanConfigHarmonyHerb",
		name = "Harmony",
		description = "Include Harmony?(Requires elite Morytania diary)",
		section = herbList
	)
	default boolean harmonyHerb() { return false; }
	
	@ConfigItem(
		position = 6,
		keyName = "booleanConfigKourendHerb",
		name = "Kourend",
		description = "Include Kourend?",
		section = herbList
	)
	default boolean kourendHerb() { return true; }
	
	@ConfigItem(
		position = 7,
		keyName = "booleanConfigMorytaniaHerb",
		name = "Morytania",
		description = "Include Morytania?",
		section = herbList
	)
	default boolean morytaniaHerb() { return true; }
	
	@ConfigItem(
		position = 8,
		keyName = "booleanConfigTrollStrongholdHerb",
		name = "Troll Stronghold",
		description = "Include Troll Stronghold(Requires completion of My Arm's Big Adventure)?",
		section = herbList
	)
	default boolean trollStrongholdHerb() { return false; }
	
	@ConfigItem(
		position = 9,
		keyName = "booleanConfigWeissHerb",
		name = "Weiss",
		description = "Include Weiss?(Requires completion of Making Friends with My Arm, and The Fire of Nourishment must be built)",
		section = herbList
	)
	default boolean weissHerb() { return false; }

	@ConfigSection(
		name = "Tree",
		description = "The highlighted and hidden item lists",
		position = 2
	)
	String treeList = "treeList";
	
	@ConfigItem(
		position = 10,
		keyName = "booleanConfigFaladorTree",
		name = "Falador",
		description = "Include Falador?",
		section = treeList
	)
	default boolean faladorTree() { return true; }
	
	@ConfigItem(
		position = 11,
		keyName = "booleanConfigFarmingGuildTree",
		name = "Farming guild",
		description = "Include Farming Guild?(Requires 65 farming)",
		section = treeList
	)
	default boolean farmingGuildTree() { return false; }
	
	@ConfigItem(
		position = 12,
		keyName = "booleanConfigGnomeStrongholdTree",
		name = "Gnome Stronghold",
		description = "Include Gnome Stronghold?",
		section = treeList
	)
	default boolean gnomeStrongholdTree() { return true; }
	
	@ConfigItem(
		position = 13,
		keyName = "booleanConfigLumbridgeTree",
		name = "Lumbridge",
		description = "Include Lumbridge?",
		section = treeList
	)
	default boolean lumbridgeTree() { return true; }
	
	@ConfigItem(
		position = 14,
		keyName = "booleanConfigTaverleyTree",
		name = "Taverley",
		description = "Include Taverley?",
		section = treeList
	)
	default boolean taverleyTree() { return true; }
	
	@ConfigItem(
		position = 15,
		keyName = "booleanConfigVarrockTree",
		name = "Varrock",
		description = "Include Varrock?",
		section = treeList
	)
	default boolean varrockTree() { return true; }
	
	
	
	
	
	
	@ConfigSection(
		name = "Fruit Tree",
		description = "The highlighted and hidden item lists",
		position = 3
	)
	String fruitTreeList = "fruitTreeList";
	
	@ConfigItem(
		position = 16,
		keyName = "booleanConfigBrimhavenFruitTree",
		name = "Brimhaven",
		description = "Include Brimhaven?",
		section = fruitTreeList
	)
	default boolean brimhavenFruitTree() { return true; }
	
	@ConfigItem(
		position = 17,
		keyName = "booleanConfigCatherbyFruitTree",
		name = "Catherby",
		description = "Include Catherby?",
		section = fruitTreeList
	)
	default boolean catherbyFruitTree() { return true; }
	
	@ConfigItem(
		position = 18,
		keyName = "booleanConfigFarmingGuildFruitTree",
		name = "Farming Guild",
		description = "Include Farming Guild?(Requires 85 farming)",
		section = fruitTreeList
	)
	default boolean farmingGuildFruitTree() { return false; }
	
	@ConfigItem(
		position = 19,
		keyName = "booleanConfigGnomeStrongholdFruitTree",
		name = "Gnome Stronghold",
		description = "Include Gnome Stronghold?",
		section = fruitTreeList
	)
	default boolean gnomeStrongholdFruitTree() { return true; }
	
	@ConfigItem(
		position = 20,
		keyName = "booleanConfigLletyaFruitTree",
		name = "Lletya",
		description = "Include Lletya?(Requires starting Mourning's End Part I)",
		section = fruitTreeList
	)
	default boolean lletyaFruitTree() { return false; }
	
	@ConfigItem(
		position = 21,
		keyName = "booleanConfigTreeGnomeVillageFruitTree",
		name = "Tree Gnome Village",
		description = "Include Tree Gnome Village?",
		section = fruitTreeList
	)
	default boolean treeGnomeVillageFruitTree() { return true; }


	@ConfigSection(
			name = "Herb teleport options",
			description = "Choose what teleport to use for each Herb patch",
			position = 4
	)
	String teleportOptionList = "teleportOptionList";

	enum OptionEnumArdougneTeleport implements OptionEnumTeleport
	{
		Ardougne_teleport,
		Ardougne_tele_tab,
		Ardy_cloak_2,
		Ardy_cloak_3,
		Ardy_cloak_4,
		Skills_Necklace
	}
	@ConfigItem(
			position = 2,
			keyName = "enumOptionEnumArdougneTeleport",
			name = "Ardougne",
			description = "Desired way to teleport to Ardougne",
			section = teleportOptionList
	)
	default OptionEnumArdougneTeleport enumOptionEnumArdougneTeleport() { return OptionEnumArdougneTeleport.Ardy_cloak_3; }
	enum OptionEnumCatherbyTeleport implements OptionEnumTeleport
	{
		Portal_Nexus,
		Camelot_Teleport,
		Camelot_Tele_Tab,
		Catherby_Tele_Tab
	}
	@ConfigItem(
			position = 3,
			keyName = "enumOptionEnumCatherbyTeleport",
			name = "Catherby",
			description = "Desired way to teleport to Catherby",
			section = teleportOptionList
	)
	default OptionEnumCatherbyTeleport enumOptionEnumCatherbyTeleport() { return OptionEnumCatherbyTeleport.Portal_Nexus; }

	enum OptionEnumFaladorTeleport implements OptionEnumTeleport
	{
		Explorers_ring_2,
		Explorers_ring_3,
		Explorers_ring_4,
		Falador_Teleport,
		Falador_Tele_Tab,
		Draynor_Tele_Tab
	}
	@ConfigItem(
			position = 4,
			keyName = "enumOptionEnumFaladorTeleport",
			name = "Falador",
			description = "Desired way to teleport to Falador",
			section = teleportOptionList
	)
	default OptionEnumFaladorTeleport enumOptionEnumFaladorTeleport() { return OptionEnumFaladorTeleport.Explorers_ring_2; }

	enum OptionEnumFarmingGuildTeleport implements OptionEnumTeleport
	{
		Jewellery_box,
		Skills_Necklace
	}
	@ConfigItem(
			position = 5,
			keyName = "enumOptionEnumFarmingGuildTeleport",
			name = "Farming Guild",
			description = "Desired way to teleport to Farming Guild",
			section = teleportOptionList
	)
	default OptionEnumFarmingGuildTeleport enumOptionEnumFarmingGuildTeleport() { return OptionEnumFarmingGuildTeleport.Jewellery_box; }

	enum OptionEnumHarmonyTeleport implements OptionEnumTeleport
	{
		Portal_Nexus,
		Harmony_Tele_tab
	}
	@ConfigItem(
			position = 6,
			keyName = "enumOptionEnumHarmonyTeleport",
			name = "Harmony",
			description = "Desired way to teleport to Harmony",
			section = teleportOptionList
	)
	default OptionEnumHarmonyTeleport enumOptionEnumHarmonyTeleport() { return OptionEnumHarmonyTeleport.Portal_Nexus; }

	enum OptionEnumKourendTeleport implements OptionEnumTeleport
	{
		Xerics_Talisman,
		Mounted_Xerics
	}
	@ConfigItem(
			position = 7,
			keyName = "enumOptionEnumKourendTeleport",
			name = "Kourend",
			description = "Desired way to teleport to Kourend",
			section = teleportOptionList
	)
	default OptionEnumKourendTeleport enumOptionEnumKourendTeleport() { return OptionEnumKourendTeleport.Xerics_Talisman; }

	enum OptionEnumMorytaniaTeleport implements OptionEnumTeleport
	{
		Ectophial
	}
	@ConfigItem(
			position = 8,
			keyName = "enumOptionEnumMorytaniaTeleport",
			name = "Morytania",
			description = "Desired way to teleport to Morytania",
			section = teleportOptionList
	)
	default OptionEnumMorytaniaTeleport enumOptionEnumMorytaniaTeleport() { return OptionEnumMorytaniaTeleport.Ectophial; }

	enum OptionEnumTrollStrongholdTeleport implements OptionEnumTeleport
	{
		Portal_Nexus,
		Stony_Basalt
	}
	@ConfigItem(
			position = 9,
			keyName = "enumOptionEnumTrollStrongholdTeleport",
			name = "Troll Stronghold",
			description = "Desired way to teleport to Troll Stronghold",
			section = teleportOptionList
	)
	default OptionEnumTrollStrongholdTeleport enumOptionEnumTrollStrongholdTeleport() { return OptionEnumTrollStrongholdTeleport.Portal_Nexus; }

	enum OptionEnumWeissTeleport implements OptionEnumTeleport
	{
		Portal_Nexus,
		Icy_basalt
	}
	@ConfigItem(
			position = 10,
			keyName = "enumOptionEnumWeissTeleport",
			name = "Weiss",
			description = "Desired way to teleport to Weiss",
			section = teleportOptionList
	)
	default OptionEnumWeissTeleport enumOptionEnumWeissTeleport() { return OptionEnumWeissTeleport.Portal_Nexus; }

	@ConfigSection(
			name = "Tree teleport options",
			description = "Choose what teleport to use for each Herb patch",
			position = 5
	)
	String treeTeleportOptionList = "treeTeleportOptionList";
	enum TreeOptionEnumFaladorTeleport implements OptionEnumTeleport
	{
		Falador_teleport
	}
	@ConfigItem(
			position = 1,
			keyName = "enumTreeFaladorTeleport",
			name = "Falador",
			description = "Desired way to teleport to Falador",
			section = treeTeleportOptionList
	)
	default TreeOptionEnumFaladorTeleport enumTreeFaladorTeleport() { return TreeOptionEnumFaladorTeleport.Falador_teleport; }

	enum TreeOptionEnumFarmingGuildTeleport implements OptionEnumTeleport
	{
		Jewellery_box
	}
	@ConfigItem(
			position = 1,
			keyName = "enumTreeFarmingGuildTeleport",
			name = "Farming Guild",
			description = "Desired way to teleport to Farming Guild",
			section = treeTeleportOptionList
	)
	default TreeOptionEnumFarmingGuildTeleport enumTreeFarmingGuildTeleport() { return TreeOptionEnumFarmingGuildTeleport.Jewellery_box; }

	enum TreeOptionEnumGnomeStrongholdTeleport implements OptionEnumTeleport
	{
		Royal_seed_pod
	}
	@ConfigItem(
			position = 2,
			keyName = "enumTreeGnomeStrongoldTeleport",
			name = "Gnome Stronghold",
			description = "Desired way to teleport to Gnome Stronghold",
			section = treeTeleportOptionList
	)
	default TreeOptionEnumGnomeStrongholdTeleport enumTreeGnomeStrongoldTeleport() { return TreeOptionEnumGnomeStrongholdTeleport.Royal_seed_pod; }

	enum TreeOptionEnumLumbridgeTeleport implements OptionEnumTeleport
	{
		Lumbridge_teleport
	}
	@ConfigItem(
			position = 3,
			keyName = "enumTreeLumbridgeTeleport",
			name = "Lumbridge",
			description = "Desired way to teleport to Lumbridge",
			section = treeTeleportOptionList
	)
	default TreeOptionEnumLumbridgeTeleport enumTreeLumbridgeTeleport() { return TreeOptionEnumLumbridgeTeleport.Lumbridge_teleport; }

	enum TreeOptionEnumTaverleyTeleport implements OptionEnumTeleport
	{
		Falador_teleport
	}
	@ConfigItem(
			position = 4,
			keyName = "enumTreeTaverleyTeleport",
			name = "Taverley",
			description = "Desired way to teleport to Taverley",
			section = treeTeleportOptionList
	)
	default TreeOptionEnumTaverleyTeleport enumTreeTaverleyTeleport() { return TreeOptionEnumTaverleyTeleport.Falador_teleport; }

	enum TreeOptionEnumVarrockTeleport implements OptionEnumTeleport
	{
		Varrock_teleport
	}
	@ConfigItem(
			position = 5,
			keyName = "enumTreeVarrockTeleport",
			name = "Varrock",
			description = "Desired way to teleport to Varrock",
			section = treeTeleportOptionList
	)
	default TreeOptionEnumVarrockTeleport enumTreeVarrockTeleport() { return TreeOptionEnumVarrockTeleport.Varrock_teleport; }

	@ConfigSection(
			name = "Fruit tree teleport options",
			description = "Choose what teleport to use for each fruit tree",
			position = 6
	)
	String fruitTreeTeleportOptionList = "fruitTreeTeleportOptionList";

	enum FruitTreeOptionEnumBrimhavenTeleport implements OptionEnumTeleport
	{
		Ardougne_teleport
	}
	@ConfigItem(
			position = 1,
			keyName = "enumFruitTreeBrimhavenTeleport",
			name = "Brimhaven",
			description = "Desired way to teleport to Brimhaven",
			section = fruitTreeTeleportOptionList
	)
	default FruitTreeOptionEnumBrimhavenTeleport enumFruitTreeBrimhavenTeleport() { return FruitTreeOptionEnumBrimhavenTeleport.Ardougne_teleport; }

	enum FruitTreeOptionEnumCatherbyTeleport implements OptionEnumTeleport
	{
		Portal_nexus
	}
	@ConfigItem(
			position = 1,
			keyName = "enumFruitTreeCatherbyTeleport",
			name = "Catherby",
			description = "Desired way to teleport to Catherby",
			section = fruitTreeTeleportOptionList
	)
	default FruitTreeOptionEnumCatherbyTeleport enumFruitTreeCatherbyTeleport() { return FruitTreeOptionEnumCatherbyTeleport.Portal_nexus; }

	enum FruitTreeOptionEnumFarmingGuildTeleport implements OptionEnumTeleport
	{
		Jewellery_box
	}
	@ConfigItem(
			position = 1,
			keyName = "enumFruitTreeFarmingGuildTeleport",
			name = "Farming Guild",
			description = "Desired way to teleport to Farming Guild",
			section = fruitTreeTeleportOptionList
	)
	default FruitTreeOptionEnumFarmingGuildTeleport enumFruitTreeFarmingGuildTeleport() { return FruitTreeOptionEnumFarmingGuildTeleport.Jewellery_box; }

	enum FruitTreeOptionEnumGnomeStrongholdTeleport implements OptionEnumTeleport
	{
		Royal_seed_pod
	}
	@ConfigItem(
			position = 1,
			keyName = "enumFruitTreeGnomeStrongholdTeleport",
			name = "Gnome Stronghold",
			description = "Desired way to teleport to Gnome Stronghold",
			section = fruitTreeTeleportOptionList
	)
	default FruitTreeOptionEnumGnomeStrongholdTeleport enumFruitTreeGnomeStrongholdTeleport() { return FruitTreeOptionEnumGnomeStrongholdTeleport.Royal_seed_pod; }

	enum FruitTreeOptionEnumLletyaTeleport implements OptionEnumTeleport
	{
		Teleport_crystal
	}
	@ConfigItem(
			position = 1,
			keyName = "enumFruitTreeLletyaTeleport",
			name = "Lletya",
			description = "Desired way to teleport to Lletya",
			section = fruitTreeTeleportOptionList
	)
	default FruitTreeOptionEnumLletyaTeleport enumFruitTreeLletyaTeleport() { return FruitTreeOptionEnumLletyaTeleport.Teleport_crystal; }

	enum FruitTreeOptionEnumTreeGnomeVillageTeleport implements OptionEnumTeleport
	{
		Royal_seed_pod
	}
	@ConfigItem(
			position = 1,
			keyName = "enumFruitTreeTreeGnomeVillageTeleport",
			name = "Tree Gnome Village",
			description = "Desired way to teleport to Tree Gnome Village",
			section = fruitTreeTeleportOptionList
	)
	default FruitTreeOptionEnumTreeGnomeVillageTeleport enumFruitTreeTreeGnomeVillageTeleport() { return FruitTreeOptionEnumTreeGnomeVillageTeleport.Royal_seed_pod; }
}
package com.farminghelper.speaax.ItemsAndLocations;

import com.farminghelper.speaax.FarmingHelperConfig;
import com.farminghelper.speaax.FarmingHelperPlugin;
import com.farminghelper.speaax.ItemRequirement;
import com.farminghelper.speaax.Location;
import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.coords.WorldPoint;

import java.util.*;

public class FruitTreeRunItemAndLocation {
    private FarmingHelperConfig config;

    private Client client;
    private FarmingHelperPlugin plugin;

    public Location brimhavenFruitTreeLocation;
    public Location catherbyFruitTreeLocation;
    public Location farmingGuildFruitTreeLocation;
    public Location gnomeStrongholdFruitTreeLocation;
    public Location lletyaFruitTreeLocation;
    public Location treeGnomeVillageFruitTreeLocation;


    public List<Location> locations = new ArrayList<>();
    public FruitTreeRunItemAndLocation() {
    }

    public FruitTreeRunItemAndLocation(FarmingHelperConfig config, Client client, FarmingHelperPlugin plugin) {
        this.config = config;
        this.client = client;
        this.plugin = plugin;
    }

    public Map<Integer, Integer> getFruitTreeItems() {
        return getAllItemRequirements(locations);
    }

    public List<ItemRequirement> getHouseTeleportItemRequirements() {
        FarmingHelperConfig.OptionEnumHouseTele selectedOption = config.enumConfigHouseTele();
        List<ItemRequirement> itemRequirements = new ArrayList<>();

        switch (selectedOption) {
            case Law_air_earth_runes:
                itemRequirements.add(new ItemRequirement(ItemID.AIR_RUNE, 1));
                itemRequirements.add(new ItemRequirement(ItemID.EARTH_RUNE, 1));
                itemRequirements.add(new ItemRequirement(ItemID.LAW_RUNE, 1));
                break;
                /*
            case Law_dust_runes:
                itemRequirements.add(new ItemRequirement(ItemID.DUST_RUNE, 1));
                itemRequirements.add(new ItemRequirement(ItemID.LAW_RUNE, 1));
                break;

                 */
            case Teleport_To_House:
                itemRequirements.add(new ItemRequirement(ItemID.TELEPORT_TO_HOUSE, 1));
                break;
            case Construction_cape:
                itemRequirements.add(new ItemRequirement(ItemID.CONSTRUCT_CAPE, 1));
                break;
            case Construction_cape_t:
                itemRequirements.add(new ItemRequirement(ItemID.CONSTRUCT_CAPET, 1));
                break;
            case Max_cape:
                itemRequirements.add(new ItemRequirement(ItemID.MAX_CAPE, 1));
                break;
            default:
                throw new IllegalStateException("Unexpected value: " + selectedOption);
        }

        return itemRequirements;
    }

    public Map<Integer, Integer> getAllItemRequirements(List<Location> locations) {
        Map<Integer, Integer> allRequirements = new HashMap<>();
        setupFruitTreeLocations();
        // Add other items and merge them with allRequirements
        for (Location location : locations) {
            if (plugin.getFruitTreeLocationEnabled(location.getName())) {
                //ItemID.GUAM_SEED is default for herb seeds, code later will allow for any seed to be used, just needed a placeholder ID
                //allRequirements.merge(ItemID.GUAM_SEED, 1, Integer::sum);
                allRequirements.merge(ItemID.APPLE_SAPLING, 1, Integer::sum);
                allRequirements.merge(ItemID.COINS_995, 200, Integer::sum);
                Location.Teleport teleport = location.getSelectedTeleport();
                Map<Integer, Integer> locationRequirements = teleport.getItemRequirements();
                for (Map.Entry<Integer, Integer> entry : locationRequirements.entrySet()) {
                    int itemId = entry.getKey();
                    int quantity = entry.getValue();

                    if (itemId == ItemID.CONSTRUCT_CAPE || itemId == ItemID.CONSTRUCT_CAPET || itemId == ItemID.MAX_CAPE || itemId == ItemID.ROYAL_SEED_POD) {
                        allRequirements.merge(itemId, quantity, (oldValue, newValue) -> Math.min(1, oldValue + newValue));
                    } else {
                        allRequirements.merge(itemId, quantity, Integer::sum);
                    }
                }
            }
        }
        //allRequirements.merge(ItemID.SEED_DIBBER, 1, Integer::sum);
        allRequirements.merge(ItemID.SPADE, 1, Integer::sum);
        allRequirements.merge(ItemID.BOTTOMLESS_COMPOST_BUCKET_22997, 1, Integer::sum);
        allRequirements.merge(ItemID.MAGIC_SECATEURS, 1, Integer::sum);
        if(config.generalRake()){allRequirements.merge(ItemID.RAKE, 1, Integer::sum);}
        return allRequirements;
    }
    public void setupFruitTreeLocations() {
        // Clear the existing locations list
        locations.clear();

        brimhavenFruitTreeLocation = new Location(FarmingHelperConfig::enumFruitTreeBrimhavenTeleport, config, "Brimhaven", false);
        List<ItemRequirement> brimhavenFruitTreeTeleportItems = Arrays.asList(
                new ItemRequirement(ItemID.COINS_995, 30),
                new ItemRequirement(ItemID.LAW_RUNE, 2),
                new ItemRequirement(ItemID.WATER_RUNE, 2));
        WorldPoint brimhavenFruitTreePatchPoint = new WorldPoint(2764, 3212, 0);
        Location.Teleport brimhavenFruitTreeTeleport = brimhavenFruitTreeLocation.new Teleport(
                "Ardougne_teleport",
                Location.TeleportCategory.SPELLBOOK,
                "Teleport to Ardougne with Spellbook and run to Brimhaven.",
                0,
                "null",
                218,
                38,
                10547,
                brimhavenFruitTreePatchPoint,
                brimhavenFruitTreeTeleportItems);
        brimhavenFruitTreeLocation.addTeleportOption(brimhavenFruitTreeTeleport);
        locations.add(brimhavenFruitTreeLocation);

        catherbyFruitTreeLocation = new Location(FarmingHelperConfig::enumFruitTreeCatherbyTeleport, config, "Catherby", false);
        List<ItemRequirement> catherbyFruitTreeTeleportItems = getHouseTeleportItemRequirements();
        WorldPoint cathebyFruitTreePatchPoint = new WorldPoint(2860, 3433, 0);
        Location.Teleport catherbyFruitTreeTeleport = catherbyFruitTreeLocation.new Teleport(
                "Portal_nexus",
                Location.TeleportCategory.PORTAL_NEXUS,
                "Teleport to Catherby with Portal nexus.",
                0,
                "null",
                17,
                13,
                11061,
                cathebyFruitTreePatchPoint,
                catherbyFruitTreeTeleportItems);
        catherbyFruitTreeLocation.addTeleportOption(catherbyFruitTreeTeleport);
        locations.add(catherbyFruitTreeLocation);

        farmingGuildFruitTreeLocation = new Location(FarmingHelperConfig::enumFruitTreeFarmingGuildTeleport, config, "Farming Guild", false);
        List<ItemRequirement> farmingGuildFruitTreeTeleportItems = getHouseTeleportItemRequirements();
        WorldPoint farmingGuildFruitTreePatchPoint = new WorldPoint(1243, 3759, 0);
        Location.Teleport farmingGuildFruitTreeTeleport = farmingGuildFruitTreeLocation.new Teleport(
                "Jewellery_box",
                Location.TeleportCategory.JEWELLERY_BOX,
                "Teleport to Farming Guild with Jewellery box.",
                0,
                "null",
                17,
                13,
                4922,
                farmingGuildFruitTreePatchPoint,
                farmingGuildFruitTreeTeleportItems);
        farmingGuildFruitTreeLocation.addTeleportOption(farmingGuildFruitTreeTeleport);
        locations.add(farmingGuildFruitTreeLocation);

        gnomeStrongholdFruitTreeLocation = new Location(FarmingHelperConfig::enumFruitTreeGnomeStrongholdTeleport, config, "Gnome Stronghold", false);
        List<ItemRequirement> gnomeStrongholdFruitTreeTeleportItems = Arrays.asList(
                new ItemRequirement(ItemID.ROYAL_SEED_POD, 1));
        WorldPoint gnomeStrongholdFruitTreePatchPoint = new WorldPoint(2475, 3446, 0);
        Location.Teleport gnomeStrongholdFruitTreeTeleport = gnomeStrongholdFruitTreeLocation.new Teleport(
                "Royal_seed_pod",
                Location.TeleportCategory.ITEM,
                "Teleport to Gnome Stronghold with Royal seed pod.",
                ItemID.ROYAL_SEED_POD,
                "null",
                0,
                0,
                9782,
                gnomeStrongholdFruitTreePatchPoint,
                gnomeStrongholdFruitTreeTeleportItems);
        gnomeStrongholdFruitTreeLocation.addTeleportOption(gnomeStrongholdFruitTreeTeleport);
        locations.add(gnomeStrongholdFruitTreeLocation);

        lletyaFruitTreeLocation = new Location(FarmingHelperConfig::enumFruitTreeLletyaTeleport, config, "Lletya", false);
        List<ItemRequirement> lletyaFruitTreeTeleportItems = Arrays.asList(
                new ItemRequirement(ItemID.TELEPORT_CRYSTAL_1, 1));
        WorldPoint lletyaFruitTreePatchPoint = new WorldPoint(2346, 3162, 0);
        Location.Teleport lletyaFruitTreeTeleport = lletyaFruitTreeLocation.new Teleport(
                "Teleport_crystal",
                Location.TeleportCategory.ITEM,
                "Teleport to Lletya with Teleport crystal.",
                ItemID.TELEPORT_CRYSTAL_1,
                "null",
                0,
                0,
                9265,
                lletyaFruitTreePatchPoint,
                lletyaFruitTreeTeleportItems);
        lletyaFruitTreeLocation.addTeleportOption(lletyaFruitTreeTeleport);
        locations.add(lletyaFruitTreeLocation);

        treeGnomeVillageFruitTreeLocation = new Location(FarmingHelperConfig::enumFruitTreeTreeGnomeVillageTeleport, config, "Tree Gnome Village", false);
        List<ItemRequirement> treeGnomeVillageFruitTreeTeleportItems = Arrays.asList(
                new ItemRequirement(ItemID.ROYAL_SEED_POD, 1));
        WorldPoint treeGnomeVillageFruitTreePatchPoint = new WorldPoint(2490, 3180, 0);
        Location.Teleport treeGnomeVillageFruitTreeTeleport = treeGnomeVillageFruitTreeLocation.new Teleport(
                "Royal_seed_pod",
                Location.TeleportCategory.ITEM,
                "Teleport to Tree Gnome Village with Royal seed pod and use Spirit tree to Tree Gnome Village.",
                ItemID.ROYAL_SEED_POD,
                "null",
                0,
                0,
                9782,
                treeGnomeVillageFruitTreePatchPoint,
                treeGnomeVillageFruitTreeTeleportItems);
        treeGnomeVillageFruitTreeLocation.addTeleportOption(treeGnomeVillageFruitTreeTeleport);
        locations.add(treeGnomeVillageFruitTreeLocation);

    }
}
package com.farminghelper.speaax.ItemsAndLocations;

import com.farminghelper.speaax.FarmingHelperConfig;
import com.farminghelper.speaax.FarmingHelperPlugin;
import com.farminghelper.speaax.ItemRequirement;
import com.farminghelper.speaax.Location;
import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.coords.WorldPoint;

import java.util.*;

public class HerbRunItemAndLocation {
    private FarmingHelperConfig config;

    private Client client;
    private FarmingHelperPlugin plugin;

    public Location ardougneLocation;
    public Location catherbyLocation;
    public Location faladorLocation;
    public Location farmingGuildLocation;
    public Location harmonyLocation;
    public Location kourendLocation;
    public Location morytaniaLocation;
    public Location trollStrongholdLocation;
    public Location weissLocation;

    public List<Location> locations = new ArrayList<>();
    public HerbRunItemAndLocation() {
    }

    public HerbRunItemAndLocation(FarmingHelperConfig config, Client client, FarmingHelperPlugin plugin) {
        this.config = config;
        this.client = client;
        this.plugin = plugin;
    }

    public Map<Integer, Integer> getHerbItems() {
        return getAllItemRequirements(locations);
    }

    public List<ItemRequirement> getHouseTeleportItemRequirements() {
        FarmingHelperConfig.OptionEnumHouseTele selectedOption = config.enumConfigHouseTele();
        List<ItemRequirement> itemRequirements = new ArrayList<>();

        switch (selectedOption) {
            case Law_air_earth_runes:
                itemRequirements.add(new ItemRequirement(ItemID.AIR_RUNE, 1));
                itemRequirements.add(new ItemRequirement(ItemID.EARTH_RUNE, 1));
                itemRequirements.add(new ItemRequirement(ItemID.LAW_RUNE, 1));
                break;
                /*
            case Law_dust_runes:
                itemRequirements.add(new ItemRequirement(ItemID.DUST_RUNE, 1));
                itemRequirements.add(new ItemRequirement(ItemID.LAW_RUNE, 1));
                break;

                 */
            case Teleport_To_House:
                itemRequirements.add(new ItemRequirement(ItemID.TELEPORT_TO_HOUSE, 1));
                break;
            case Construction_cape:
                itemRequirements.add(new ItemRequirement(ItemID.CONSTRUCT_CAPE, 1));
                break;
            case Construction_cape_t:
                itemRequirements.add(new ItemRequirement(ItemID.CONSTRUCT_CAPET, 1));
                break;
            case Max_cape:
                itemRequirements.add(new ItemRequirement(ItemID.MAX_CAPE, 1));
                break;
            default:
                throw new IllegalStateException("Unexpected value: " + selectedOption);
        }

        return itemRequirements;
    }

    public Map<Integer, Integer> getAllItemRequirements(List<Location> locations) {
        Map<Integer, Integer> allRequirements = new HashMap<>();
        setupHerbLocations();
        // Add other items and merge them with allRequirements
        for (Location location : locations) {
            if (plugin.getHerbLocationEnabled(location.getName())) {
                //ItemID.GUAM_SEED is default for herb seeds, code later will allow for any seed to be used, just needed a placeholder ID
                allRequirements.merge(ItemID.GUAM_SEED, 1, Integer::sum);
                if (selectedCompostID() != -1 && selectedCompostID() != ItemID.BOTTOMLESS_COMPOST_BUCKET_22997) {
                    allRequirements.merge(selectedCompostID(), 1, Integer::sum);
                }
                Location.Teleport teleport = location.getSelectedTeleport();
                Map<Integer, Integer> locationRequirements = teleport.getItemRequirements();
                for (Map.Entry<Integer, Integer> entry : locationRequirements.entrySet()) {
                    int itemId = entry.getKey();
                    int quantity = entry.getValue();

                    if (itemId == ItemID.CONSTRUCT_CAPE || itemId == ItemID.CONSTRUCT_CAPET || itemId == ItemID.MAX_CAPE) {
                        allRequirements.merge(itemId, quantity, (oldValue, newValue) -> Math.min(1, oldValue + newValue));
                    } else {
                        allRequirements.merge(itemId, quantity, Integer::sum);
                    }
                }
                if(location.getFarmLimps() && config.generalLimpwurt()) {
                    allRequirements.merge(ItemID.LIMPWURT_SEED, 1, Integer::sum);
                    if (selectedCompostID() != -1 && selectedCompostID() != ItemID.BOTTOMLESS_COMPOST_BUCKET_22997) {
                        allRequirements.merge(selectedCompostID(), 1, Integer::sum);
                    }
                }
            }
        }
        allRequirements.merge(ItemID.SEED_DIBBER, 1, Integer::sum);
        allRequirements.merge(ItemID.SPADE, 1, Integer::sum);
        if (selectedCompostID() == ItemID.BOTTOMLESS_COMPOST_BUCKET_22997) {
            allRequirements.merge(ItemID.BOTTOMLESS_COMPOST_BUCKET_22997, 1, Integer::sum);
        }
        allRequirements.merge(ItemID.MAGIC_SECATEURS, 1, Integer::sum);
        if(config.generalRake()){allRequirements.merge(ItemID.RAKE, 1, Integer::sum);}
        return allRequirements;
    }
    public Integer selectedCompostID() {
        FarmingHelperConfig.OptionEnumCompost selectedCompost = config.enumConfigCompost();
        switch (selectedCompost) {
            case Compost:
                return ItemID.COMPOST;
            case Supercompost:
                return ItemID.SUPERCOMPOST;
            case Ultracompost:
                return ItemID.ULTRACOMPOST;
            case Bottomless:
                return ItemID.BOTTOMLESS_COMPOST_BUCKET_22997;
        }
        return -1;
    }
    public void setupHerbLocations() {
        // Clear the existing locations list
        locations.clear();
        WorldPoint ardougneHerbPatchPoint = new WorldPoint(2670, 3374, 0);
        ardougneLocation = new Location(FarmingHelperConfig::enumOptionEnumArdougneTeleport, config, "Ardougne", true);

        List<ItemRequirement> ardougneTeleportItem = Arrays.asList(
                new ItemRequirement(ItemID.LAW_RUNE, 2),
                new ItemRequirement(ItemID.WATER_RUNE, 2));
        Location.Teleport ardougneTeleport = ardougneLocation.new Teleport(
                "Ardougne_teleport",
                Location.TeleportCategory.SPELLBOOK,
                "Teleport to Ardougne with standard spellbook, and run north.",
                0,
                "null",
                218,
                38,
                10547,
                ardougneHerbPatchPoint,
                ardougneTeleportItem
        );
        List<ItemRequirement> ardougneTeleTabItem = Arrays.asList(
                new ItemRequirement(ItemID.ARDOUGNE_TELEPORT, 1));
        Location.Teleport ardougneTeleTab = ardougneLocation.new Teleport(
                "Ardougne_Tele_Tab",
                Location.TeleportCategory.ITEM,
                "Teleport to Ardougne with Ardougne tele tab, and run north.",
                ItemID.ARDOUGNE_TELEPORT,
                "null",
                0,
                0,
                10547,
                ardougneHerbPatchPoint,
                ardougneTeleTabItem
        );

        List<ItemRequirement> ardougneArdyCloak2Item = Arrays.asList(
                new ItemRequirement(ItemID.ARDOUGNE_CLOAK_2, 1));
        Location.Teleport ardougneArdyCloak2 = ardougneLocation.new Teleport(
                "Ardy_Cloak_2",
                Location.TeleportCategory.ITEM,
                "Teleport to Ardougne with Ardougne cloak.",
                ItemID.ARDOUGNE_CLOAK_2,
                "Farm Teleport",
                0,
                0,
                10548,
                ardougneHerbPatchPoint,
                ardougneArdyCloak2Item
        );
        List<ItemRequirement> ardougneArdyCloak3Item = Arrays.asList(
                new ItemRequirement(ItemID.ARDOUGNE_CLOAK_3, 1));
        Location.Teleport ardougneArdyCloak3 = ardougneLocation.new Teleport(
                "Ardy_Cloak_3",
                Location.TeleportCategory.ITEM,
                "Teleport to Ardougne with Ardougne cloak.",
                ItemID.ARDOUGNE_CLOAK_3,
                "Farm Teleport",
                0,
                0,
                10548,
                ardougneHerbPatchPoint,
                ardougneArdyCloak3Item
        );
        List<ItemRequirement> ardougneArdyCloak4Item = Arrays.asList(
                new ItemRequirement(ItemID.ARDOUGNE_CLOAK_4, 1)
        );
        Location.Teleport ardougneArdyCloak4 = ardougneLocation.new Teleport(
                "Ardy_Cloak_4",
                Location.TeleportCategory.ITEM,
                "Teleport to Ardougne with Ardougne cloak.",
                ItemID.ARDOUGNE_CLOAK_4,
                "Farm Teleport",
                0,
                0,
                10548,
                ardougneHerbPatchPoint,
                ardougneArdyCloak4Item
        );

        List<ItemRequirement> ardougneSkillsNecklaceItem = Arrays.asList(
                new ItemRequirement(ItemID.SKILLS_NECKLACE1, 1)
        );
        Location.Teleport ardougneSkillsNecklace = ardougneLocation.new Teleport(
                "Skills_Necklace",
                Location.TeleportCategory.ITEM,
                "Teleport to Fishing guild with Skills necklace, and run east.",
                ItemID.SKILLS_NECKLACE1,
                "null",
                0,
                0,
                10292,
                ardougneHerbPatchPoint,
                ardougneSkillsNecklaceItem
        );
        ardougneLocation.addTeleportOption(ardougneTeleport);
        ardougneLocation.addTeleportOption(ardougneTeleTab);
        ardougneLocation.addTeleportOption(ardougneArdyCloak2);
        ardougneLocation.addTeleportOption(ardougneArdyCloak3);
        ardougneLocation.addTeleportOption(ardougneArdyCloak4);
        ardougneLocation.addTeleportOption(ardougneSkillsNecklace);
        locations.add(ardougneLocation);

        WorldPoint catherbyHerbPatchPoint = new WorldPoint(2813, 3463, 0);
        catherbyLocation = new Location(FarmingHelperConfig::enumOptionEnumCatherbyTeleport, config, "Catherby", true);
        List<ItemRequirement> catherbyPortalNexusItems = getHouseTeleportItemRequirements();
        Location.Teleport catherbyPortalNexus = catherbyLocation.new Teleport(
                "Portal_nexus",
                Location.TeleportCategory.PORTAL_NEXUS,
                "Teleport to Catherby with Portal nexus.",
                0,
                "null",
                17,
                13,
                11061,
                catherbyHerbPatchPoint,
                catherbyPortalNexusItems
        );

        List<ItemRequirement> catherbyCamelotTeleportItems = Arrays.asList(
                new ItemRequirement(ItemID.AIR_RUNE, 5),
                new ItemRequirement(ItemID.LAW_RUNE, 1)
        );
        Location.Teleport catherbyCamelotTeleport = catherbyLocation.new Teleport(
                "Camelot_Teleport",
                Location.TeleportCategory.SPELLBOOK,
                "Teleport to Camelot using the standard spellbook, and run east.(If you have configured the teleport to seers you need to right click and teleport to Camelot)",
                0,
                "null",
                218,
                32,
                11062,
                catherbyHerbPatchPoint,
                catherbyCamelotTeleportItems
        );

        List<ItemRequirement> catherbyCamelotTeleTabItems = Arrays.asList(
                new ItemRequirement(ItemID.CAMELOT_TELEPORT, 1)
        );
        Location.Teleport catherbyCamelotTeleTab = catherbyLocation.new Teleport(
                "Camelot_Tele_Tab",
                Location.TeleportCategory.ITEM,
                "Teleport to Camelot using a Camelot tele tab, and run east.(If you have configured the teleport to seers you need to right click and teleport to Camelot)",
                ItemID.CAMELOT_TELEPORT,
                "null",
                0,
                0,
                11062,
                catherbyHerbPatchPoint,
                catherbyCamelotTeleTabItems
        );

        List<ItemRequirement> catherbyTeleTabItems = Arrays.asList(
                new ItemRequirement(ItemID.CATHERBY_TELEPORT, 1)
        );
        Location.Teleport catherbyTeleTab = catherbyLocation.new Teleport(
                "Catherby_Tele_Tab",
                Location.TeleportCategory.ITEM,
                "Teleport to Catherby using Catherby teleport tab.",
                ItemID.CATHERBY_TELEPORT,
                "null",
                0,
                0,
                11061,
                catherbyHerbPatchPoint,
                catherbyTeleTabItems
        );

        catherbyLocation.addTeleportOption(catherbyPortalNexus);
        catherbyLocation.addTeleportOption(catherbyCamelotTeleport);
        catherbyLocation.addTeleportOption(catherbyCamelotTeleTab);
        catherbyLocation.addTeleportOption(catherbyTeleTab);
        locations.add(catherbyLocation);

        WorldPoint faladorHerbPatchPoint = new WorldPoint(3058, 3307, 0);
        faladorLocation = new Location(FarmingHelperConfig::enumOptionEnumFaladorTeleport, config, "Falador", true);
        List<ItemRequirement> faladorExplorersRing2Item = Arrays.asList(
                new ItemRequirement(ItemID.EXPLORERS_RING_2, 1));
        Location.Teleport faladorExplorersRing2 = faladorLocation.new Teleport(
                "Explorers_ring_2",
                Location.TeleportCategory.ITEM,
                "Teleport to Falador with Explorers ring.",
                ItemID.EXPLORERS_RING_2,
                "Teleport",
                0,
                0,
                12083,
                faladorHerbPatchPoint,
                faladorExplorersRing2Item);

        List<ItemRequirement> faladorExplorersRing3Item = Arrays.asList(
                new ItemRequirement(ItemID.EXPLORERS_RING_3, 1));
        Location.Teleport faladorExplorersRing3 = faladorLocation.new Teleport(
                "Explorers_ring_3",
                Location.TeleportCategory.ITEM,
                "Teleport to Falador with Explorers ring.",
                ItemID.EXPLORERS_RING_3,
                "Teleport",
                0,
                0,
                12083,
                faladorHerbPatchPoint,
                faladorExplorersRing3Item);

        List<ItemRequirement> faladorExplorersRing4Item = Arrays.asList(
                new ItemRequirement(ItemID.EXPLORERS_RING_4, 1));
        Location.Teleport faladorExplorersRing4 = faladorLocation.new Teleport(
                "Explorers_ring_4",
                Location.TeleportCategory.ITEM,
                "Teleport to Falador with Explorers ring.",
                ItemID.EXPLORERS_RING_4,
                "Teleport",
                0,
                0,
                12083,
                faladorHerbPatchPoint,
                faladorExplorersRing4Item);

        List<ItemRequirement> faladorTeleportItem = Arrays.asList(
                new ItemRequirement(ItemID.AIR_RUNE, 3),
                new ItemRequirement(ItemID.LAW_RUNE, 1),
                new ItemRequirement(ItemID.WATER_RUNE, 1));
        Location.Teleport faladorTeleport = faladorLocation.new Teleport(
                "Falador_Teleport",
                Location.TeleportCategory.SPELLBOOK,
                "Teleport to Falador with standard spellbook, and run south-east.",
                0,
                "null",
                218,
                27,
                11828,
                faladorHerbPatchPoint,
                faladorTeleportItem);

        List<ItemRequirement> faladorTeleTabItem = Arrays.asList(
                new ItemRequirement(ItemID.FALADOR_TELEPORT, 1));
        Location.Teleport faladorTeleTab = faladorLocation.new Teleport(
                "Falador_Tele_Tab",
                Location.TeleportCategory.ITEM,
                "Teleport to Falador with Falador Tele Tab, and run south-east.",
                ItemID.FALADOR_TELEPORT,
                "null",
                0,
                0,
                11828,
                faladorHerbPatchPoint,
                faladorTeleTabItem);

        List<ItemRequirement> faladorDraynorManorTeleTabItem = Arrays.asList(
                new ItemRequirement(ItemID.DRAYNOR_MANOR_TELEPORT, 1));
        Location.Teleport faladorDraynorManorTeleTab = faladorLocation.new Teleport(
                "Draynor_Tele_Tab",
                Location.TeleportCategory.ITEM,
                "Teleport to Draynor Manor with Draynor Manor Tele Tab, and run south-west.",
                ItemID.DRAYNOR_MANOR_TELEPORT,
                "null",
                0,
                0,
                12340,
                faladorHerbPatchPoint,
                faladorDraynorManorTeleTabItem);

        faladorLocation.addTeleportOption(faladorExplorersRing2);
        faladorLocation.addTeleportOption(faladorExplorersRing3);
        faladorLocation.addTeleportOption(faladorExplorersRing4);
        faladorLocation.addTeleportOption(faladorTeleport);
        faladorLocation.addTeleportOption(faladorTeleTab);
        faladorLocation.addTeleportOption(faladorDraynorManorTeleTab);
        locations.add(faladorLocation);

        WorldPoint farmingGuildHerbPatchPoint = new WorldPoint(1238, 3726, 0);
        farmingGuildLocation = new Location(FarmingHelperConfig::enumOptionEnumFarmingGuildTeleport, config, "Farming Guild", true);
        List<ItemRequirement> farmingGuildJewelleryBoxItems = getHouseTeleportItemRequirements();
        Location.Teleport farmingGuildJewelleryBox = farmingGuildLocation.new Teleport(
                "Jewellery_box",
                Location.TeleportCategory.JEWELLERY_BOX,
                "Teleport to Farming guild with Jewellery box.",
                29155,
                "null",
                0,
                0,
                4922,
                farmingGuildHerbPatchPoint,
                farmingGuildJewelleryBoxItems
        );

        List<ItemRequirement> farmingGuildSkillsNecklaceItems = Arrays.asList(
                new ItemRequirement(ItemID.SKILLS_NECKLACE1, 1));
        Location.Teleport farmingGuildSkillsNecklace = farmingGuildLocation.new Teleport(
                "Skills_Necklace",
                Location.TeleportCategory.ITEM,
                "Teleport to Farming guild using Skills necklace.",
                ItemID.SKILLS_NECKLACE1,
                "null",
                0,
                0,
                4922,
                farmingGuildHerbPatchPoint,
                farmingGuildSkillsNecklaceItems
        );
        farmingGuildLocation.addTeleportOption(farmingGuildJewelleryBox);
        farmingGuildLocation.addTeleportOption(farmingGuildSkillsNecklace);
        locations.add(farmingGuildLocation);

        WorldPoint harmonyHerbPatchPoint = new WorldPoint(3789, 2837, 0);
        harmonyLocation = new Location(FarmingHelperConfig::enumOptionEnumHarmonyTeleport, config, "Harmony Island", false);
        List<ItemRequirement> harmonyPortalNexusItems = getHouseTeleportItemRequirements();
        Location.Teleport harmonyPortalNexus = harmonyLocation.new Teleport(
                "Portal_Nexus",
                Location.TeleportCategory.PORTAL_NEXUS,
                "Teleport to Harmony with Portal Nexus.",
                0,
                "null",
                17,
                13,
                15148,
                harmonyHerbPatchPoint,
                harmonyPortalNexusItems);
        harmonyLocation.addTeleportOption(harmonyPortalNexus);
        locations.add(harmonyLocation);

        List<ItemRequirement> harmonyTeleTabItems = Arrays.asList(
                new ItemRequirement(ItemID.HARMONY_ISLAND_TELEPORT, 1));
        Location.Teleport harmonyTeleTab = harmonyLocation.new Teleport(
                "Harmony_Tele_Tab",
                Location.TeleportCategory.ITEM,
                "Teleport to Harmony with Harmony Tele Tab.",
                ItemID.HARMONY_ISLAND_TELEPORT,
                "null",
                0,
                0,
                15148,
                harmonyHerbPatchPoint,
                harmonyTeleTabItems);
        harmonyLocation.addTeleportOption(harmonyPortalNexus);
        harmonyLocation.addTeleportOption(harmonyTeleTab);
        locations.add(harmonyLocation);

        WorldPoint kourendHerbPatchPoint = new WorldPoint(1738, 3550, 0);
        kourendLocation = new Location(FarmingHelperConfig::enumOptionEnumKourendTeleport, config, "Kourend", true);
        List<ItemRequirement> kourendXericsTalismanItems = Arrays.asList(
                new ItemRequirement(ItemID.XERICS_TALISMAN, 1)
        );
        Location.Teleport kourendXericsTalisman = kourendLocation.new Teleport(
                "Xerics_Talisman",
                Location.TeleportCategory.ITEM,
                "Teleport to Kourend with Xeric's Talisman.",
                ItemID.XERICS_TALISMAN,
                "Rub",
                187,
                3,
                6967,
                kourendHerbPatchPoint,
                kourendXericsTalismanItems
        );
        List<ItemRequirement> kourendMountedXericsItems = getHouseTeleportItemRequirements();
        Location.Teleport kourendMountedXerics = kourendLocation.new Teleport(
                "Mounted_Xerics",
                Location.TeleportCategory.MOUNTED_XERICS,
                "Teleport to Kourend with Xeric's Talisman in PoH.",
                0,
                "null",
                187,
                3,
                6967,
                kourendHerbPatchPoint,
                kourendMountedXericsItems
        );
        kourendLocation.addTeleportOption(kourendXericsTalisman);
        kourendLocation.addTeleportOption(kourendMountedXerics);
        locations.add(kourendLocation);

        WorldPoint morytaniaHerbPatchPoint = new WorldPoint(3601, 3525, 0);
        morytaniaLocation = new Location(FarmingHelperConfig::enumOptionEnumMorytaniaTeleport, config, "Morytania", true);
        List<ItemRequirement> morytaniaEctophialItems = Arrays.asList(
                new ItemRequirement(ItemID.ECTOPHIAL, 1)
        );
        Location.Teleport morytaniaEctophial = morytaniaLocation.new Teleport(
                "Ectophial",
                Location.TeleportCategory.ITEM,
                "Teleport to Morytania with Ectophial.",
                ItemID.ECTOPHIAL,
                "null",
                0,
                0,
                14647,
                morytaniaHerbPatchPoint,
                morytaniaEctophialItems
        );
        morytaniaLocation.addTeleportOption(morytaniaEctophial);
        locations.add(morytaniaLocation);

        WorldPoint trollStrongholhHerbPatchPoint = new WorldPoint(2824, 3696, 0);
        trollStrongholdLocation = new Location(FarmingHelperConfig::enumOptionEnumTrollStrongholdTeleport, config, "Troll Stronghold", false);
        List<ItemRequirement> tsStonyBasaltItems = Arrays.asList(
                new ItemRequirement(ItemID.STONY_BASALT, 1)
        );
        Location.Teleport tsStonyBasalt = trollStrongholdLocation.new Teleport(
                "Stony_Basalt",
                Location.TeleportCategory.ITEM,
                "Teleport to Troll Stronghold with Stony Basalt.",
                ItemID.STONY_BASALT,
                "null",
                0,
                0,
                11321,
                trollStrongholhHerbPatchPoint,
                tsStonyBasaltItems
        );
        List<ItemRequirement> tsPortalNexusItems = getHouseTeleportItemRequirements();
        Location.Teleport tsPortalNexus = trollStrongholdLocation.new Teleport(
                "Portal_Nexus",
                Location.TeleportCategory.PORTAL_NEXUS,
                "Teleport to Troll Stronghold with Portal Nexus.",
                0,
                "null",
                17,
                13,
                11321,
                trollStrongholhHerbPatchPoint,
                tsPortalNexusItems
        );
        trollStrongholdLocation.addTeleportOption(tsStonyBasalt);
        trollStrongholdLocation.addTeleportOption(tsPortalNexus);
        locations.add(trollStrongholdLocation);

        WorldPoint weissHerbPatchPoint = new WorldPoint(2847, 3931, 0);
        weissLocation = new Location(FarmingHelperConfig::enumOptionEnumWeissTeleport, config, "Weiss", false);
        List<ItemRequirement> weissIcyBasaltItems = Arrays.asList(
                new ItemRequirement(ItemID.ICY_BASALT, 1)
        );
        Location.Teleport weissIcyBasalt = weissLocation.new Teleport(
                "Icy_Basalt",
                Location.TeleportCategory.ITEM,
                "Teleport to Weiss with Icy Basalt.",
                ItemID.ICY_BASALT,
                "null",
                0,
                0,
                11325,
                weissHerbPatchPoint,
                weissIcyBasaltItems
        );
        List<ItemRequirement> weissPortalNexusItems = getHouseTeleportItemRequirements();
        Location.Teleport weissPortalNexus = weissLocation.new Teleport(
                "Portal_Nexus",
                Location.TeleportCategory.PORTAL_NEXUS,
                "Teleport to Weiss with Portal Nexus.",
                0,
                "null",
                17,
                13,
                11325,
                weissHerbPatchPoint,
                weissPortalNexusItems
        );
        weissLocation.addTeleportOption(weissIcyBasalt);
        weissLocation.addTeleportOption(weissPortalNexus);
        locations.add(weissLocation);

    }
}
package com.farminghelper.speaax.ItemsAndLocations;

import com.farminghelper.speaax.FarmingHelperConfig;
import com.farminghelper.speaax.FarmingHelperPlugin;
import com.farminghelper.speaax.ItemRequirement;
import com.farminghelper.speaax.Location;
import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.coords.WorldPoint;

import java.util.*;

public class TreeRunItemAndLocation {
    private FarmingHelperConfig config;

    private Client client;
    private FarmingHelperPlugin plugin;

    public Location faladorTreeLocation;
    public Location farmingGuildTreeLocation;
    public Location gnomeStrongholdTreeLocation;
    public Location lumbridgeTreeLocation;
    public Location taverleyTreeLocation;
    public Location varrockTreeLocation;


    public List<Location> locations = new ArrayList<>();
    public TreeRunItemAndLocation() {
    }

    public TreeRunItemAndLocation(FarmingHelperConfig config, Client client, FarmingHelperPlugin plugin) {
        this.config = config;
        this.client = client;
        this.plugin = plugin;
    }

    public Map<Integer, Integer> getTreeItems() {
        return getAllItemRequirements(locations);
    }

    public List<ItemRequirement> getHouseTeleportItemRequirements() {
        FarmingHelperConfig.OptionEnumHouseTele selectedOption = config.enumConfigHouseTele();
        List<ItemRequirement> itemRequirements = new ArrayList<>();

        switch (selectedOption) {
            case Law_air_earth_runes:
                itemRequirements.add(new ItemRequirement(ItemID.AIR_RUNE, 1));
                itemRequirements.add(new ItemRequirement(ItemID.EARTH_RUNE, 1));
                itemRequirements.add(new ItemRequirement(ItemID.LAW_RUNE, 1));
                break;
                /*
            case Law_dust_runes:
                itemRequirements.add(new ItemRequirement(ItemID.DUST_RUNE, 1));
                itemRequirements.add(new ItemRequirement(ItemID.LAW_RUNE, 1));
                break;

                 */
            case Teleport_To_House:
                itemRequirements.add(new ItemRequirement(ItemID.TELEPORT_TO_HOUSE, 1));
                break;
            case Construction_cape:
                itemRequirements.add(new ItemRequirement(ItemID.CONSTRUCT_CAPE, 1));
                break;
            case Construction_cape_t:
                itemRequirements.add(new ItemRequirement(ItemID.CONSTRUCT_CAPET, 1));
                break;
            case Max_cape:
                itemRequirements.add(new ItemRequirement(ItemID.MAX_CAPE, 1));
                break;
            default:
                throw new IllegalStateException("Unexpected value: " + selectedOption);
        }

        return itemRequirements;
    }

    public Map<Integer, Integer> getAllItemRequirements(List<Location> locations) {
        Map<Integer, Integer> allRequirements = new HashMap<>();
        setupTreeLocations();
        // Add other items and merge them with allRequirements
        for (Location location : locations) {
            if (plugin.getTreeLocationEnabled(location.getName())) {
                //ItemID.GUAM_SEED is default for herb seeds, code later will allow for any seed to be used, just needed a placeholder ID
                //allRequirements.merge(ItemID.GUAM_SEED, 1, Integer::sum);
                allRequirements.merge(ItemID.OAK_SAPLING, 1, Integer::sum);
                allRequirements.merge(ItemID.COINS_995, 200, Integer::sum);
                Location.Teleport teleport = location.getSelectedTeleport();
                Map<Integer, Integer> locationRequirements = teleport.getItemRequirements();
                for (Map.Entry<Integer, Integer> entry : locationRequirements.entrySet()) {
                    int itemId = entry.getKey();
                    int quantity = entry.getValue();

                    if (itemId == ItemID.CONSTRUCT_CAPE || itemId == ItemID.CONSTRUCT_CAPET || itemId == ItemID.MAX_CAPE) {
                        allRequirements.merge(itemId, quantity, (oldValue, newValue) -> Math.min(1, oldValue + newValue));
                    } else {
                        allRequirements.merge(itemId, quantity, Integer::sum);
                    }
                }
            }
        }
        //allRequirements.merge(ItemID.SEED_DIBBER, 1, Integer::sum);
        allRequirements.merge(ItemID.SPADE, 1, Integer::sum);
        allRequirements.merge(ItemID.BOTTOMLESS_COMPOST_BUCKET_22997, 1, Integer::sum);
        allRequirements.merge(ItemID.MAGIC_SECATEURS, 1, Integer::sum);
        if(config.generalRake()){allRequirements.merge(ItemID.RAKE, 1, Integer::sum);}
        return allRequirements;
    }
    public void setupTreeLocations() {
        // Clear the existing locations list
        locations.clear();

        faladorTreeLocation = new Location(FarmingHelperConfig::enumTreeFaladorTeleport, config, "Falador", false);
        List<ItemRequirement> faladorTreeTeleportItems = Arrays.asList(
                new ItemRequirement(ItemID.AIR_RUNE, 3),
                new ItemRequirement(ItemID.LAW_RUNE, 1),
                new ItemRequirement(ItemID.WATER_RUNE, 1));
        WorldPoint faladorTreePatchPoint = new WorldPoint(3000, 3373, 0);
        Location.Teleport faladorTreeTeleport = faladorTreeLocation.new Teleport(
                "Falador_teleport",
                Location.TeleportCategory.SPELLBOOK,
                "Teleport to Falador with Spellbook and run to Falador park.",
                0,
                "null",
                218,
                27,
                11828,
                faladorTreePatchPoint,
                faladorTreeTeleportItems);
        faladorTreeLocation.addTeleportOption(faladorTreeTeleport);
        locations.add(faladorTreeLocation);

        farmingGuildTreeLocation = new Location(FarmingHelperConfig::enumTreeFarmingGuildTeleport, config, "Farming Guild", false);
        List<ItemRequirement> farmingGuildTreeTeleportItems = getHouseTeleportItemRequirements();
        WorldPoint farmingGuildTreePatchPoint = new WorldPoint(1232, 3736, 0);
        Location.Teleport farmingGuildTreeTeleport = farmingGuildTreeLocation.new Teleport(
                "Jewellery_box",
                Location.TeleportCategory.JEWELLERY_BOX,
                "Teleport to Farming Guild with Jewellery box.",
                0,
                "null",
                0,
                0,
                4922,
                farmingGuildTreePatchPoint,
                farmingGuildTreeTeleportItems);
        farmingGuildTreeLocation.addTeleportOption(farmingGuildTreeTeleport);
        locations.add(farmingGuildTreeLocation);

        gnomeStrongholdTreeLocation = new Location(FarmingHelperConfig::enumTreeGnomeStrongoldTeleport, config, "Gnome Stronghold", false);
        List<ItemRequirement> gnomeStrongholdTreeTeleportItems = Arrays.asList(
                new ItemRequirement(ItemID.ROYAL_SEED_POD, 1));
        WorldPoint gnomeStrongholdTreePatchPoint = new WorldPoint(2436, 3415, 0);
        Location.Teleport gnomeStrongholdTreeTeleport = gnomeStrongholdTreeLocation.new Teleport(
                "Royal_seed_pod",
                Location.TeleportCategory.ITEM,
                "Teleport to Gnome Stronghold with Royal seed pod.",
                ItemID.ROYAL_SEED_POD,
                "null",
                0,
                0,
                9782,
                gnomeStrongholdTreePatchPoint,
                gnomeStrongholdTreeTeleportItems);
        gnomeStrongholdTreeLocation.addTeleportOption(gnomeStrongholdTreeTeleport);
        locations.add(gnomeStrongholdTreeLocation);

        lumbridgeTreeLocation = new Location(FarmingHelperConfig::enumTreeLumbridgeTeleport, config, "Lumbridge", false);
        List<ItemRequirement> lumbridgeTreeTeleportItems = Arrays.asList(
                new ItemRequirement(ItemID.AIR_RUNE, 3),
                new ItemRequirement(ItemID.LAW_RUNE, 1),
                new ItemRequirement(ItemID.EARTH_RUNE, 1));
        WorldPoint lumbridgeTreePatchPoint = new WorldPoint(3193, 3231, 0);
        Location.Teleport lumbridgeTreeTeleport = lumbridgeTreeLocation.new Teleport(
                "Lumbridge_teleport",
                Location.TeleportCategory.SPELLBOOK,
                "Teleport to Lumbridge with spellbook.",
                0,
                "null",
                218,
                24,
                12850,
                lumbridgeTreePatchPoint,
                lumbridgeTreeTeleportItems);
        lumbridgeTreeLocation.addTeleportOption(lumbridgeTreeTeleport);
        locations.add(lumbridgeTreeLocation);

        taverleyTreeLocation = new Location(FarmingHelperConfig::enumTreeTaverleyTeleport, config, "Taverley", false);
        List<ItemRequirement> taverleyTreeTeleportItems = Arrays.asList(
                new ItemRequirement(ItemID.AIR_RUNE, 3),
                new ItemRequirement(ItemID.LAW_RUNE, 1),
                new ItemRequirement(ItemID.WATER_RUNE, 1));
        WorldPoint taverlyPatchPoint = new WorldPoint(2936, 3438, 0);
        Location.Teleport taverleyTreeTeleport = taverleyTreeLocation.new Teleport(
                "Falador_teleport",
                Location.TeleportCategory.SPELLBOOK,
                "Teleport to Falador with spellbook and run to Taverly.",
                0,
                "null",
                218,
                27,
                11828,
                taverlyPatchPoint,
                taverleyTreeTeleportItems);
        taverleyTreeLocation.addTeleportOption(taverleyTreeTeleport);
        locations.add(taverleyTreeLocation);

        varrockTreeLocation = new Location(FarmingHelperConfig::enumTreeVarrockTeleport, config, "Varrock", false);
        List<ItemRequirement> varrockTreeTeleportItems = Arrays.asList(
                new ItemRequirement(ItemID.AIR_RUNE, 3),
                new ItemRequirement(ItemID.LAW_RUNE, 1),
                new ItemRequirement(ItemID.FIRE_RUNE, 1));
        WorldPoint varrockTreePatchPoint = new WorldPoint(3229, 3459, 0);
        Location.Teleport varrockTreeTeleport = varrockTreeLocation.new Teleport(
                "Varrock_teleport",
                Location.TeleportCategory.SPELLBOOK,
                "Teleport to Varrock with spellbook.",
                0,
                "null",
                218,
                21,
                12853,
                varrockTreePatchPoint,
                varrockTreeTeleportItems);
        varrockTreeLocation.addTeleportOption(varrockTreeTeleport);
        locations.add(varrockTreeLocation);
    }
}
