package com.optimalpoints;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class OptimalPointsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(OptimalPointsPlugin.class);
		RuneLite.main(args);
	}
}
package com.optimalpoints;

import net.runelite.api.*;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;
import org.junit.Assert;
import org.junit.Test;

import javax.annotation.Nullable;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;

public class CurrentBossDataTest {

    /**
     * Test that the sort algorithm always returns the same result with draws
     */
    @Test
    public void testSorting(){
        CurrentBossData testBoss1 = new CurrentBossData(new TestNPC(),1 ,1);
        CurrentBossData testBoss2 = new CurrentBossData(new TestNPC(),1 ,2);
        CurrentBossData testBoss3 = new CurrentBossData(new TestNPC(),2 ,1);
        CurrentBossData testBoss4 = new CurrentBossData(new TestNPC(),2 ,2);

        List<CurrentBossData> currentBosses = new ArrayList<>();
        currentBosses.add(testBoss1);
        currentBosses.add(testBoss2);
        currentBosses.add(testBoss3);
        currentBosses.add(testBoss4);

        int count = 0;
        while (count < 10){
            currentBosses.sort(new PointsComparer());
            Assert.assertEquals(currentBosses.get(0), testBoss3);
            Assert.assertEquals(currentBosses.get(1), testBoss4);
            Assert.assertEquals(currentBosses.get(2), testBoss1);
            Assert.assertEquals(currentBosses.get(3), testBoss2);
            count++;
        }

        count = 0;
        while (count < 10) {
            currentBosses.sort(new DefenseComparer());
            Assert.assertEquals(currentBosses.get(0), testBoss3);
            Assert.assertEquals(currentBosses.get(1), testBoss1);
            Assert.assertEquals(currentBosses.get(2), testBoss4);
            Assert.assertEquals(currentBosses.get(3), testBoss2);
            count++;
        }
    }
}

class TestNPC implements NPC{
    @Override
    public int getId() {
        return 0;
    }

    @Override
    public String getName() {
        return null;
    }

    @Override
    public Actor getInteracting() {
        return null;
    }

    @Override
    public int getHealthRatio() {
        return 0;
    }

    @Override
    public int getHealthScale() {
        return 0;
    }

    @Override
    public WorldPoint getWorldLocation() {
        return null;
    }

    @Override
    public LocalPoint getLocalLocation() {
        return null;
    }

    @Override
    public int getOrientation() {
        return 0;
    }

    @Override
    public int getCurrentOrientation() {
        return 0;
    }

    @Override
    public int getAnimation() {
        return 0;
    }

    @Override
    public int getPoseAnimation() {
        return 0;
    }

    @Override
    public void setPoseAnimation(int animation) {

    }

    @Override
    public int getIdlePoseAnimation() {
        return 0;
    }

    @Override
    public void setIdlePoseAnimation(int animation) {

    }

    @Override
    public int getIdleRotateLeft() {
        return 0;
    }

    @Override
    public int getIdleRotateRight() {
        return 0;
    }

    @Override
    public int getWalkAnimation() {
        return 0;
    }

    @Override
    public int getWalkRotateLeft() {
        return 0;
    }

    @Override
    public int getWalkRotateRight() {
        return 0;
    }

    @Override
    public int getWalkRotate180() {
        return 0;
    }

    @Override
    public int getRunAnimation() {
        return 0;
    }

    @Override
    public void setAnimation(int animation) {

    }

    @Override
    public int getAnimationFrame() {
        return 0;
    }

    @Override
    public void setActionFrame(int actionFrame) {

    }

    @Override
    public void setAnimationFrame(int frame) {

    }

    @Override
    public int getGraphic() {
        return 0;
    }

    @Override
    public void setGraphic(int graphic) {

    }

    @Override
    public int getSpotAnimFrame() {
        return 0;
    }

    @Override
    public void setSpotAnimFrame(int spotAnimFrame) {

    }

    @Override
    public Polygon getCanvasTilePoly() {
        return null;
    }

    @Nullable
    @Override
    public Point getCanvasTextLocation(Graphics2D graphics, String text, int zOffset) {
        return null;
    }

    @Override
    public Point getCanvasImageLocation(BufferedImage image, int zOffset) {
        return null;
    }

    @Override
    public Point getCanvasSpriteLocation(SpritePixels sprite, int zOffset) {
        return null;
    }

    @Override
    public Point getMinimapLocation() {
        return null;
    }

    @Override
    public int getLogicalHeight() {
        return 0;
    }

    @Override
    public Shape getConvexHull() {
        return null;
    }

    @Override
    public WorldArea getWorldArea() {
        return null;
    }

    @Override
    public String getOverheadText() {
        return null;
    }

    @Override
    public void setOverheadText(String overheadText) {

    }

    @Override
    public int getOverheadCycle() {
        return 0;
    }

    @Override
    public void setOverheadCycle(int cycles) {

    }

    @Override
    public boolean isDead() {
        return false;
    }

    @Override
    public int getCombatLevel() {
        return 0;
    }

    @Override
    public int getIndex() {
        return 0;
    }

    @Override
    public NPCComposition getComposition() {
        return null;
    }

    @Nullable
    @Override
    public NPCComposition getTransformedComposition() {
        return null;
    }

    @Override
    public Model getModel() {
        return null;
    }

    @Override
    public int getModelHeight() {
        return 0;
    }

    @Override
    public void setModelHeight(int modelHeight) {

    }

    @Override
    public void draw(int orientation, int pitchSin, int pitchCos, int yawSin, int yawCos, int x, int y, int z, long hash) {

    }

    @Override
    public Node getNext() {
        return null;
    }

    @Override
    public Node getPrevious() {
        return null;
    }

    @Override
    public long getHash() {
        return 0;
    }

    @Override
    public void setIdleRotateLeft(int animation)  {
    }

    @Override
    public void setIdleRotateRight(int animation)  {
    }

    @Override
    public void setWalkAnimation(int animation)  {
    }

    @Override
    public void setWalkRotateLeft(int animation)  {
    }

    @Override
    public void setWalkRotateRight(int animation)  {
    }

    @Override
    public void setWalkRotate180(int animation)  {
    }

    @Override
    public void setGraphicHeight(int height)  {
    }

    @Override
    public int getGraphicHeight()  {
        return 0;
    }

    @Override
    public void setRunAnimation(int animation)  {
    }
}
package com.optimalpoints;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;

import java.awt.Color;

@ConfigGroup("nmzoptimalpoints")
public interface OptimalPointsConfig extends Config {
    @ConfigItem(
            position = 0,
            keyName = "highlightHull",
            name = "Highlight hull",
            description = "Configures whether or not NPC should be highlighted by hull"
    )
    default boolean highlightHull() {
        return true;
    }

    @ConfigItem(
            position = 1,
            keyName = "highlightOutline",
            name = "Highlight outline",
            description = "Configures whether or not NPC should be highlighted by outline"
    )
    default boolean highlightOutline() {
        return false;
    }

    @ConfigItem(
            position = 2,
            keyName = "highlightTile",
            name = "Highlight tile",
            description = "Configures whether or not NPC should be highlighted by tile"
    )
    default boolean highlightTile() {
        return false;
    }

    @ConfigItem(
            position = 3,
            keyName = "highlightSouthWestTile",
            name = "Highlight south west tile",
            description = "Configures whether or not NPC should be highlighted by south western tile"
    )
    default boolean highlightSouthWestTile() {
        return false;
    }

    @ConfigItem(
            position = 4,
            keyName = "borderWidth",
            name = "Border Width",
            description = "Width of the highlighted NPC border"
    )
    @Range(
            min = 0,
            max = 10
    )
    default int borderWidth()
    {
        return 2;
    }

    @ConfigItem(
            position = 5,
            keyName = "outlineFeather",
            name = "Outline feather",
            description = "Specify between 0-4 how much of the model outline should be faded"
    )
    @Range(
            min = 0,
            max = 4
    )
    default int outlineFeather()
    {
        return 0;
    }

    @ConfigItem(
            position = 6,
            keyName = "rankByDefense",
            name = "Rank By Defense",
            description = "If ticked, ranks enemies based on lowest defense instead of points given.")
    default boolean rankByDefense() { return false; }

    @Range(
            min = 1,
            max = 4
    )
    @ConfigItem(
            position = 7,
            keyName = "maxRankToShow",
            name = "Number of bosses to highlight",
            description = "Number of bosses to highlight in NMZ between 1-4"
    )
    default int maxRankToShow() {
        return 1;
    }

    @ConfigItem(
            position = 8,
            keyName = "npcColor1",
            name = "Highlight Color #1",
            description = "Color of the NPC highlight for the enemy worth the most points"
    )
    @Alpha
    default Color getHighlightColor1() {
        return new Color(255, 223, 0);
    }

    @ConfigItem(
            position = 9,
            keyName = "npcColor2",
            name = "Highlight Color #2",
            description = "Color of the NPC highlight for the enemy worth the second most points"
    )
    @Alpha
    default Color getHighlightColor2() {
        return new Color(192, 192, 192);
    }

    @ConfigItem(
            position = 10,
            keyName = "npcColor3",
            name = "Highlight Color #3",
            description = "Color of the NPC highlight for the enemy worth the third most points"
    )
    @Alpha
    default Color getHighlightColor3() {
        return new Color(205, 127, 50);
    }

    @ConfigItem(
            position = 11,
            keyName = "npcColor4",
            name = "Highlight Color #4",
            description = "Color of the NPC highlight for the enemy worth the least points"
    )
    @Alpha
    default Color getHighlightColor4() {
        return Color.WHITE;
    }
}
package com.optimalpoints;

import lombok.Getter;
import net.runelite.api.NPC;

import java.util.Comparator;

public class CurrentBossData {
    @Getter
    private final Integer points_score;
    @Getter
    private final Integer defense_score;

    private NPC npcData;

    public CurrentBossData(NPC npc, int points_score, int defense_score)
    {
        this.npcData = npc;
        this.points_score = points_score;
        this.defense_score = defense_score;
    }

    // For some reason this doesn't work with the lombok annotation
    public NPC getNpcData() {
        return npcData;
    }
}

class PointsComparer implements Comparator<CurrentBossData> {

    @Override
    public int compare(CurrentBossData o1, CurrentBossData o2) {
        Integer score1 = o1.getPoints_score();
        Integer score2 = o2.getPoints_score();
        return score2.compareTo(score1);
    }
}

class DefenseComparer implements Comparator<CurrentBossData> {

    @Override
    public int compare(CurrentBossData o1, CurrentBossData o2) {
        Integer score1 = o1.getDefense_score();
        Integer score2 = o2.getDefense_score();
        return score1.compareTo(score2);
    }
}


package com.optimalpoints;

import lombok.Getter;

public class NMZBoss {
    @Getter
    private final String name;
    @Getter
    private final int normalValue;
    @Getter
    private final int hardValue;
    @Getter
    private final int defenseValue;
    @Getter
    private final int defenseHardValue;

    NMZBoss(String name, int pointsValue, int hardPointsValue, int defenseValue, int hardDefenseValue){
        this.name = name;
        this.normalValue = pointsValue;
        this.hardValue = hardPointsValue;
        this.defenseValue = defenseValue;
        this.defenseHardValue = hardDefenseValue;
    }
}

package com.optimalpoints;

import com.google.common.annotations.VisibleForTesting;
import com.google.inject.Provides;

import javax.inject.Inject;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.GraphicID;
import net.runelite.api.GraphicsObject;
import net.runelite.api.NPC;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.GraphicsObjectCreated;
import net.runelite.api.events.NpcDespawned;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.WildcardMatcher;

import java.io.*;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

@Slf4j
@PluginDescriptor(
        name = "NMZ Optimal Points",
        description = "Highlight NMZ bosses and displays their point value",
        tags = {"highlight", "npcs", "nmz"}
)
public class OptimalPointsPlugin extends Plugin {
    private static final int[] NMZ_MAP_REGION = {9033};
    private static final int MAX_ACTOR_VIEW_RANGE = 15;

    private static final String HARD_IDENTIFIER = "(hard)";

    @Inject
    private Client client;

    @Inject
    private OptimalPointsConfig config;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private OptimalPointsSceneOverlay optimalPointsSceneOverlay;

    @Inject
    private KeyManager keyManager;

    @Inject
    private ClientThread clientThread;

    /**
     * NPCs to highlight
     */
    @Getter(AccessLevel.PACKAGE)
    private final List<CurrentBossData> highlightedNpcs = new ArrayList<>();

    /**
     * Dead NPCs that should be displayed with a respawn indicator if the config is on.
     */
    @Getter(AccessLevel.PACKAGE)
    private final Map<Integer, MemorizedNpc> deadNpcsToDisplay = new HashMap<>();

    /**
     * The time when the last game tick event ran.
     */
    @Getter(AccessLevel.PACKAGE)
    private Instant lastTickUpdate;

    /**
     * Tagged NPCs that have died at some point, which are memorized to
     * remember when and where they will respawn
     */
    private final Map<Integer, MemorizedNpc> memorizedNpcs = new HashMap<>();

    /**
     * Highlight strings from the configuration
     */
    private final List<String> highlights = new ArrayList<>();

    /**
     * Highlight strings from the configuration
     */
    private final List<NMZBoss> nmzBosses = new ArrayList<>();

    /**
     * NPC ids marked with the Tag option
     */
    private final Set<Integer> npcTags = new HashSet<>();

    /**
     * Tagged NPCs that spawned this tick, which need to be verified that
     * they actually spawned and didn't just walk into view range.
     */
    private final List<NPC> spawnedNpcsThisTick = new ArrayList<>();

    /**
     * Tagged NPCs that despawned this tick, which need to be verified that
     * they actually spawned and didn't just walk into view range.
     */
    private final List<NPC> despawnedNpcsThisTick = new ArrayList<>();

    /**
     * World locations of graphics object which indicate that an
     * NPC teleported that were played this tick.
     */
    private final Set<WorldPoint> teleportGraphicsObjectSpawnedThisTick = new HashSet<>();

    /**
     * The players location on the last game tick.
     */
    private WorldPoint lastPlayerLocation;

    /**
     * When hopping worlds, NPCs can spawn without them actually respawning,
     * so we would not want to mark it as a real spawn in those cases.
     */
    private boolean skipNextSpawnCheck = false;

    @Provides
    OptimalPointsConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(OptimalPointsConfig.class);
    }

    @Override
    protected void startUp() throws Exception {
        overlayManager.add(optimalPointsSceneOverlay);
        clientThread.invoke(() ->
        {
            skipNextSpawnCheck = true;
            rebuildAllNpcs();
        });
    }

    @Override
    protected void shutDown() throws Exception {
        overlayManager.remove(optimalPointsSceneOverlay);
        clientThread.invoke(() ->
        {
            deadNpcsToDisplay.clear();
            memorizedNpcs.clear();
            spawnedNpcsThisTick.clear();
            despawnedNpcsThisTick.clear();
            teleportGraphicsObjectSpawnedThisTick.clear();
            npcTags.clear();
            highlightedNpcs.clear();
        });
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged event) {
        if (event.getGameState() == GameState.LOGIN_SCREEN ||
                event.getGameState() == GameState.HOPPING) {
            highlightedNpcs.clear();
            deadNpcsToDisplay.clear();
            memorizedNpcs.forEach((id, npc) -> npc.setDiedOnTick(-1));
            lastPlayerLocation = null;
            skipNextSpawnCheck = true;
        }
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged configChanged) {
        if (!configChanged.getGroup().equals("npcindicators")) {
            return;
        }

        clientThread.invoke(this::rebuildAllNpcs);
    }


    @Subscribe
    public void onNpcSpawned(NpcSpawned npcSpawned) {
        final NPC npc = npcSpawned.getNpc();
        final String npcName = npc.getName();

        if (npcName == null) {
            return;
        }

        if (npcTags.contains(npc.getIndex())) {
            memorizeNpc(npc);
            addHighlightedNpc(npc);
            spawnedNpcsThisTick.add(npc);
            return;
        }

        if (highlightMatchesNPCName(npcName)) {
            addHighlightedNpc(npc);
            if (!client.isInInstancedRegion()) {
                memorizeNpc(npc);
                spawnedNpcsThisTick.add(npc);
            }
        }
    }

    @Subscribe
    public void onNpcDespawned(NpcDespawned npcDespawned) {
        final NPC npc = npcDespawned.getNpc();

        if (memorizedNpcs.containsKey(npc.getIndex())) {
            despawnedNpcsThisTick.add(npc);
        }

        highlightedNpcs.removeIf(t -> t.getNpcData() == npc);
    }

    @Subscribe
    public void onGraphicsObjectCreated(GraphicsObjectCreated event) {
        final GraphicsObject go = event.getGraphicsObject();

        if (go.getId() == GraphicID.GREY_BUBBLE_TELEPORT) {
            teleportGraphicsObjectSpawnedThisTick.add(WorldPoint.fromLocal(client, go.getLocation()));
        }
    }

    @Subscribe
    public void onGameTick(GameTick event) {
        removeOldHighlightedRespawns();
        validateSpawnedNpcs();
        lastTickUpdate = Instant.now();
        lastPlayerLocation = client.getLocalPlayer().getWorldLocation();
    }

    private static boolean isInViewRange(WorldPoint wp1, WorldPoint wp2) {
        int distance = wp1.distanceTo(wp2);
        return distance < MAX_ACTOR_VIEW_RANGE;
    }

    private static WorldPoint getWorldLocationBehind(NPC npc) {
        final int orientation = npc.getOrientation() / 256;
        int dx = 0, dy = 0;

        switch (orientation) {
            case 0: // South
                dy = -1;
                break;
            case 1: // Southwest
                dx = -1;
                dy = -1;
                break;
            case 2: // West
                dx = -1;
                break;
            case 3: // Northwest
                dx = -1;
                dy = 1;
                break;
            case 4: // North
                dy = 1;
                break;
            case 5: // Northeast
                dx = 1;
                dy = 1;
                break;
            case 6: // East
                dx = 1;
                break;
            case 7: // Southeast
                dx = 1;
                dy = -1;
                break;
        }

        final WorldPoint currWP = npc.getWorldLocation();
        return new WorldPoint(currWP.getX() - dx, currWP.getY() - dy, currWP.getPlane());
    }

    private void memorizeNpc(NPC npc) {
        final int npcIndex = npc.getIndex();
        memorizedNpcs.putIfAbsent(npcIndex, new MemorizedNpc(npc));
    }

    private void removeOldHighlightedRespawns() {
        deadNpcsToDisplay.values().removeIf(x -> x.getDiedOnTick() + x.getRespawnTime() <= client.getTickCount() + 1);
    }

    private void getBosses() {
        InputStream boss_list = getClass().getClassLoader().getResourceAsStream("nmzbosses.csv");
        assert boss_list != null;
        NMZBossList nmzBossList = new NMZBossList(boss_list);
        nmzBosses.addAll(nmzBossList.getNmzBossList());
    }

    @VisibleForTesting
    void rebuildAllNpcs() {
        getBosses();
        for (NMZBoss boss : nmzBosses) {
            highlights.add(boss.getName() + "*");
        }

        highlightedNpcs.clear();

        if (client.getGameState() != GameState.LOGGED_IN &&
                client.getGameState() != GameState.LOADING || !isInNightmareZone()) {
            // NPCs are still in the client after logging out,
            // but we don't want to highlight those.
            return;
        }

        for (NPC npc : client.getNpcs()) {
            final String npcName = npc.getName();

            if (npcName == null) {
                continue;
            }

            if (npcTags.contains(npc.getIndex())) {
                addHighlightedNpc(npc);
                continue;
            }

            if (highlightMatchesNPCName(npcName)) {
                if (!client.isInInstancedRegion()) {
                    memorizeNpc(npc);
                }
                addHighlightedNpc(npc);
                continue;
            }

            // NPC is not highlighted
            memorizedNpcs.remove(npc.getIndex());
        }
    }

    private boolean highlightMatchesNPCName(String npcName) {
        for (String highlight : highlights) {
            if (WildcardMatcher.matches(highlight, npcName)) {
                return true;
            }
        }

        return false;
    }

    private void validateSpawnedNpcs() {
        if (skipNextSpawnCheck) {
            skipNextSpawnCheck = false;
        } else {
            for (NPC npc : despawnedNpcsThisTick) {
                if (!teleportGraphicsObjectSpawnedThisTick.isEmpty()) {
                    if (teleportGraphicsObjectSpawnedThisTick.contains(npc.getWorldLocation())) {
                        // NPC teleported away, so we don't want to add the respawn timer
                        continue;
                    }
                }

                if (isInViewRange(client.getLocalPlayer().getWorldLocation(), npc.getWorldLocation())) {
                    final MemorizedNpc mn = memorizedNpcs.get(npc.getIndex());

                    if (mn != null) {
                        mn.setDiedOnTick(client.getTickCount() + 1); // This runs before tickCounter updates, so we add 1

                        if (!mn.getPossibleRespawnLocations().isEmpty()) {
                            log.debug("Starting {} tick countdown for {}", mn.getRespawnTime(), mn.getNpcName());
                            deadNpcsToDisplay.put(mn.getNpcIndex(), mn);
                        }
                    }
                }
            }

            for (NPC npc : spawnedNpcsThisTick) {
                if (!teleportGraphicsObjectSpawnedThisTick.isEmpty()) {
                    if (teleportGraphicsObjectSpawnedThisTick.contains(npc.getWorldLocation()) ||
                            teleportGraphicsObjectSpawnedThisTick.contains(getWorldLocationBehind(npc))) {
                        // NPC teleported here, so we don't want to update the respawn timer
                        continue;
                    }
                }

                if (lastPlayerLocation != null && isInViewRange(lastPlayerLocation, npc.getWorldLocation())) {
                    final MemorizedNpc mn = memorizedNpcs.get(npc.getIndex());

                    if (mn.getDiedOnTick() != -1) {
                        final int respawnTime = client.getTickCount() + 1 - mn.getDiedOnTick();

                        // By killing a monster and leaving the area before seeing it again, an erroneously lengthy
                        // respawn time can be recorded. Thus, if the respawn time is already set and is greater than
                        // the observed time, assume that the lower observed respawn time is correct.
                        if (mn.getRespawnTime() == -1 || respawnTime < mn.getRespawnTime()) {
                            mn.setRespawnTime(respawnTime);
                        }

                        mn.setDiedOnTick(-1);
                    }

                    final WorldPoint npcLocation = npc.getWorldLocation();

                    // An NPC can move in the same tick as it spawns, so we also have
                    // to consider whatever tile is behind the npc
                    final WorldPoint possibleOtherNpcLocation = getWorldLocationBehind(npc);

                    mn.getPossibleRespawnLocations().removeIf(x ->
                            x.distanceTo(npcLocation) != 0 && x.distanceTo(possibleOtherNpcLocation) != 0);

                    if (mn.getPossibleRespawnLocations().isEmpty()) {
                        mn.getPossibleRespawnLocations().add(npcLocation);
                        mn.getPossibleRespawnLocations().add(possibleOtherNpcLocation);
                    }
                }
            }
        }

        spawnedNpcsThisTick.clear();
        despawnedNpcsThisTick.clear();
        teleportGraphicsObjectSpawnedThisTick.clear();
    }

    void addHighlightedNpc(NPC npc) {
        for (NMZBoss boss : nmzBosses) {
            if (WildcardMatcher.matches(boss.getName() + "*", npc.getName())) {
                if (npc.getName().contains(HARD_IDENTIFIER))
                {
                    highlightedNpcs.add(new CurrentBossData(npc, boss.getHardValue(), boss.getDefenseHardValue()));
                }
                else
                {
                    highlightedNpcs.add(new CurrentBossData(npc, boss.getNormalValue(), boss.getDefenseValue()));
                }

            }
        }
    }

    public boolean isInNightmareZone() {
        if (client.getLocalPlayer() == null) {
            return false;
        }

        // NMZ and the KBD lair uses the same region ID but NMZ uses planes 1-3 and KBD uses plane 0
        return client.getLocalPlayer().getWorldLocation().getPlane() > 0 && Arrays.equals(client.getMapRegions(), NMZ_MAP_REGION);
    }
}

/*
 * Copyright (c) 2018, James Swindle <wilingua@gmail.com>
 * Copyright (c) 2018, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.optimalpoints;

import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.NPCComposition;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.ui.overlay.outline.ModelOutlineRenderer;

import javax.inject.Inject;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Dimension;
import java.awt.Shape;
import java.awt.Polygon;
import java.awt.BasicStroke;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.List;
import java.util.Locale;

public class OptimalPointsSceneOverlay extends Overlay {
    private static final Color TOP_TEXT_COLOR = Color.RED;
    private static final Color STANDARD_TEXT_COLOR = Color.WHITE;

    private static final NumberFormat TIME_LEFT_FORMATTER = DecimalFormat.getInstance(Locale.US);

    static {
        ((DecimalFormat) TIME_LEFT_FORMATTER).applyPattern("#0.0");
    }

    private final Client client;
    private final OptimalPointsConfig config;
    private final OptimalPointsPlugin plugin;
    private final ModelOutlineRenderer modelOutlineRenderer;

    @Inject
    OptimalPointsSceneOverlay(Client client, OptimalPointsConfig config, OptimalPointsPlugin plugin, ModelOutlineRenderer modelOutlineRenderer) {
        this.client = client;
        this.config = config;
        this.plugin = plugin;
        this.modelOutlineRenderer = modelOutlineRenderer;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (!plugin.isInNightmareZone())
        {
            return null;
        }
        List<CurrentBossData> bossDataList = plugin.getHighlightedNpcs();
        if (bossDataList.size() == 0) {
            return null;
        }
        if (!config.rankByDefense())
        {
            bossDataList.sort(new PointsComparer());
        }
        else
        {
            bossDataList.sort(new DefenseComparer());
        }
        int rank = 1;
        for (CurrentBossData bossData : bossDataList) {
            renderNpcOverlay(graphics, bossData.getNpcData(),config.rankByDefense() ? bossData.getDefense_score() :
                    bossData.getPoints_score(), rank);
            rank++;
        }
        return null;
    }


    private void renderNpcOverlay(Graphics2D graphics, NPC actor, Integer score, Integer rank) {
        if (rank > config.maxRankToShow()){
            return;
        }

        Color colour = getColorForRank(rank);
        NPCComposition npcComposition = actor.getTransformedComposition();
        if (npcComposition == null || !npcComposition.isInteractible()
                || (actor.isDead())) {
            return;
        }

        if (config.highlightHull()) {
            Shape objectClickbox = actor.getConvexHull();
            renderPoly(graphics, colour, objectClickbox);
        }

        if (config.highlightOutline()) {
            modelOutlineRenderer.drawOutline(actor, config.borderWidth(), colour, config.outlineFeather());
        }

        if (config.highlightTile()) {
            int size = npcComposition.getSize();
            LocalPoint lp = actor.getLocalLocation();
            Polygon tilePoly = Perspective.getCanvasTileAreaPoly(client, lp, size);

            renderPoly(graphics, colour, tilePoly);
        }

        if (config.highlightSouthWestTile()) {
            int size = npcComposition.getSize();
            LocalPoint lp = actor.getLocalLocation();

            int x = lp.getX() - ((size - 1) * Perspective.LOCAL_TILE_SIZE / 2);
            int y = lp.getY() - ((size - 1) * Perspective.LOCAL_TILE_SIZE / 2);

            Polygon southWestTilePoly = Perspective.getCanvasTilePoly(client, new LocalPoint(x, y));

            renderPoly(graphics, colour, southWestTilePoly);
        }

        {
            String displayText = score.toString();
            Point textLocation = actor.getCanvasTextLocation(graphics, displayText, actor.getLogicalHeight() + 40);

            if (textLocation != null) {
                OverlayUtil.renderTextLocation(graphics, textLocation, displayText, rank == 1 ? TOP_TEXT_COLOR : STANDARD_TEXT_COLOR);
            }
        }
    }

    private void renderPoly(Graphics2D graphics, Color color, Shape polygon) {
        if (polygon != null) {
            graphics.setColor(color);
            graphics.setStroke(new BasicStroke(config.borderWidth()));
            graphics.draw(polygon);
            graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), 20));
            graphics.fill(polygon);
        }
    }

    private Color getColorForRank(int rank) {
        switch (rank) {
            case 1:
                return config.getHighlightColor1();
            case 2:
                return config.getHighlightColor2();
            case 3:
                return config.getHighlightColor3();
            case 4:
                return config.getHighlightColor4();
            default:
                return Color.WHITE;
        }
    }
}

/*
 * Copyright (c) 2018, Woox <https://github.com/wooxsolo>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.optimalpoints;

import lombok.Getter;
import lombok.Setter;
import net.runelite.api.NPC;
import net.runelite.api.NPCComposition;
import net.runelite.api.coords.WorldPoint;

import java.util.ArrayList;
import java.util.List;

class MemorizedNpc
{
	@Getter
	private int npcIndex;

	@Getter
	private String npcName;

	@Getter
	private int npcSize;

	/**
	 * The time the npc died at, in game ticks, relative to the tick counter
	 */
	@Getter
	@Setter
	private int diedOnTick;

	/**
	 * The time it takes for the npc to respawn, in game ticks
	 */
	@Getter
	@Setter
	private int respawnTime;

	@Getter
	@Setter
	private List<WorldPoint> possibleRespawnLocations;

	MemorizedNpc(NPC npc)
	{
		this.npcName = npc.getName();
		this.npcIndex = npc.getIndex();
		this.possibleRespawnLocations = new ArrayList<>();
		this.respawnTime = -1;
		this.diedOnTick = -1;

		final NPCComposition composition = npc.getTransformedComposition();

		if (composition != null)
		{
			this.npcSize = composition.getSize();
		}
	}
}
package com.optimalpoints;

import lombok.Getter;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;

public class NMZBossList {
    @Getter
    private ArrayList<NMZBoss> nmzBossList;

    NMZBossList(InputStream bossCSV) {
        this.nmzBossList = new ArrayList<>();
        Reader reader = new InputStreamReader(bossCSV, StandardCharsets.US_ASCII);
        try (BufferedReader br = new BufferedReader(reader)) {
            String currentLine = br.readLine(); // Skip the headers
            currentLine = br.readLine();
            while (currentLine != null) {
                String[] attributes = currentLine.split(",");
                this.nmzBossList.add(new NMZBoss(attributes[0],
                        Integer.parseInt(attributes[1]),
                        Integer.parseInt(attributes[2]),
                        Integer.parseInt(attributes[3]),
                        Integer.parseInt(attributes[4])
                        ));
                currentLine = br.readLine();
            }
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }
}

