package com.thenwefight;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ThenWeFightPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ThenWeFightPlugin.class);
		RuneLite.main(args);
	}
}
package com.thenwefight;

import com.google.inject.Provides;
import com.thenwefight.overlay.*;
import com.thenwefight.utils.GameUtils;
import com.thenwefight.utils.PluginUtils;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.RuneLite;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.Text;

import javax.inject.Inject;
import java.awt.*;
import java.io.File;
import java.util.*;
import java.util.List;

@PluginDescriptor(
		name = "Then We Fight",
		description = "Then We Fight Gamemode Plugin"
)
@Slf4j
public class ThenWeFightPlugin extends Plugin
{
	@Inject
	private Client client;
	@Inject
	private ClientThread clientThread;
	@Inject
	private ThenWeFightConfig config;

	@Inject
	private OverlayManager overlayManager;
	@Inject
	private ConfigManager configManager;
	@Inject
	private ItemManager itemManager;

	@Inject
	private ThenWeFightUnlockOverlay unlockOverlay;
	@Inject
	private ThenWeFightItemOverlay itemOverlay;
	@Inject
	private ThenWeFightSceneOverlay sceneOverlay;
	@Inject
	private ThenWeFightWidgetOverlay widgetOverlay;
	@Inject
	private ThenWeFightTaskOverlay taskOverlay;
	@Inject
	private ThenWeFightItemUnlockOverlay itemUnlockOverlay;

	@Inject
	private PluginUtils pluginUtils;
	@Inject
	private GameUtils gameUtils;

	public static String[] rawTaskList;
	public static String[] rawUnlockList;
	public static String[] rawItemUnlockList;

	public static List<Integer> unlockedItems = new ArrayList<>();
	public static List<String> unlockedNpcs = new ArrayList<>();
	public static List<Integer> lockedWidgets = new ArrayList<>();
	public static List<String> lockedObjects = new ArrayList<>();

	public static final Collection<String> BANK_NPC_NAMES = Arrays.asList("banker", "grand exchange clerk", "banker tutor");
	public static final Collection<String> BANK_OBJECT_NAMES = Arrays.asList("bank booth", "bank chest", "bank deposit box", "bank deposit chest", "grand exchange booth");
	public static final Collection<String> UNDERGROUND_OBJECT_NAMES = Arrays.asList("trapdoor", "dark hole", "hole", "rope", "cavern entrance", "dive", "cave", "tunnel entrance");
	public static final Collection<String> TELEPORT_OPTIONS = Arrays.asList("teleport", "tele");
	public static final Collection<String> TELEPORT_TARGETS = Arrays.asList("teleport", "tele");
	public static final Collection<String> STAIRS_OBJECT_NAMES = Arrays.asList("stairs", "staircase");
	public static final Collection<String> DOOR_OBJECT_NAMES = Arrays.asList("door", "large door");
	public static final Collection<String> DROP_OPTIONS = Arrays.asList("drop", "destroy");
	public static final Collection<String> EAT_OPTIONS = Arrays.asList("eat", "consume");
	public static final Collection<String> DRINK_OPTIONS = Arrays.asList("drink");
	public static final Collection<String> THIEVE_OPTIONS = Arrays.asList("pickpocket", "steal");
	public static final Collection<String> WOODCUTTING_OPTIONS = Arrays.asList("chop down");
	public static final Collection<String> FISHING_OPTIONS = Arrays.asList("bait", "fish", "cast-net", "lure");
	public static final Collection<String> FISHING_TARGETS = Arrays.asList("fishing spot", "rod fishing spot");
	public static final Collection<String> SLAYER_NPC_TARGETS = Arrays.asList("turael", "spria", "krystilia", "mazchna", "vannaka", "chaeldar", "konar quo maten", "nieve", "steve", "duradel");

	public static Collection<GameObject> gameObjects = new ArrayList<>();
	public static Collection<WallObject> wallObjects = new ArrayList<>();
	public static Collection<GroundObject> groundObjects = new ArrayList<>();
	public static Collection<NPC> npcs = new ArrayList<>();

	public static final File THEN_WE_FIGHT_FOLDER = new File(RuneLite.RUNELITE_DIR.getPath() + File.separator + "thenwefight");
	public static File U_1_CUSTOM_DIR = new File(RuneLite.RUNELITE_DIR, "/thenwefight/1.png");
	public static File U_2_CUSTOM_DIR = new File(RuneLite.RUNELITE_DIR, "/thenwefight/2.png");
	public static File U_3_CUSTOM_DIR = new File(RuneLite.RUNELITE_DIR, "/thenwefight/3.png");
	public static File U_4_CUSTOM_DIR = new File(RuneLite.RUNELITE_DIR, "/thenwefight/4.png");
	public static File U_5_CUSTOM_DIR = new File(RuneLite.RUNELITE_DIR, "/thenwefight/5.png");
	public static File U_6_CUSTOM_DIR = new File(RuneLite.RUNELITE_DIR, "/thenwefight/6.png");
	public static File IU_1_CUSTOM_DIR = new File(RuneLite.RUNELITE_DIR, "/thenwefight/1.png");
	public static File IU_2_CUSTOM_DIR = new File(RuneLite.RUNELITE_DIR, "/thenwefight/2.png");
	public static File IU_3_CUSTOM_DIR = new File(RuneLite.RUNELITE_DIR, "/thenwefight/3.png");
	public static File IU_4_CUSTOM_DIR = new File(RuneLite.RUNELITE_DIR, "/thenwefight/4.png");
	public static File IU_5_CUSTOM_DIR = new File(RuneLite.RUNELITE_DIR, "/thenwefight/5.png");
	public static File IU_6_CUSTOM_DIR = new File(RuneLite.RUNELITE_DIR, "/thenwefight/6.png");

	public static final Collection<Integer> OBJECT_ACTIONS = Arrays.asList(MenuAction.EXAMINE_OBJECT.getId(),
			MenuAction.GAME_OBJECT_FIRST_OPTION.getId(), MenuAction.GAME_OBJECT_SECOND_OPTION.getId(),
			MenuAction.GAME_OBJECT_THIRD_OPTION.getId(), MenuAction.GAME_OBJECT_FOURTH_OPTION.getId(),
			MenuAction.GAME_OBJECT_FIFTH_OPTION.getId());
	public static final Collection<Integer> NPC_ACTIONS = Arrays.asList(MenuAction.EXAMINE_NPC.getId(),
			MenuAction.NPC_FIRST_OPTION.getId(), MenuAction.NPC_SECOND_OPTION.getId(),
			MenuAction.NPC_THIRD_OPTION.getId(), MenuAction.NPC_FOURTH_OPTION.getId(),
			MenuAction.NPC_FIFTH_OPTION.getId());
	public static final Collection<Integer> GROUND_ITEM_ACTIONS = Arrays.asList(MenuAction.EXAMINE_ITEM_GROUND.getId(),
			MenuAction.GROUND_ITEM_FIRST_OPTION.getId(), MenuAction.GROUND_ITEM_SECOND_OPTION.getId(),
			MenuAction.GROUND_ITEM_THIRD_OPTION.getId(), MenuAction.GROUND_ITEM_FOURTH_OPTION.getId(),
			MenuAction.GROUND_ITEM_FIFTH_OPTION.getId());

	public static final Collection<Integer> QUEST_TAB_PARAMS = Arrays.asList(10747957, 10551356, 35913792);
	public static final Collection<Integer> INVENT_TAB_PARAMS = Arrays.asList(10747958, 10551357, 35913793);
	public static final Collection<Integer> EQUIPMENT_TAB_PARAMS = Arrays.asList(10747959 ,10551358, 35913794);

	public static final String BACKGROUND_PATH = "background.png";
	public static final String DEBUG_PATH = "debug.png";
	public static final String HEALTH_PATH = "health.png";
	public static final String PRAYER_PATH = "prayer.png";
	public static final String RUN_PATH = "run.png";
	public static final String SPEC_PATH = "spec.png";


	public static final String THICK_SKIN_NAME = "thick skin";
	public static final String BURST_OF_STRENGTH_NAME = "burst of strength";
	public static final String CLARITY_OF_THOUGHT_NAME = "clarity of thought";
	public static final String SHARP_EYE_NAME = "sharp eye";
	public static final String MYSTIC_WILL_NAME = "mystic will";
	public static final String ROCK_SKIN_NAME = "rock skin";
	public static final String SUPERHUMAN_STRENGTH_NAME = "superhuman strength";
	public static final String IMPROVED_REFLEXES_NAME = "improved reflexes";
	public static final String RAPID_RESTORE_NAME = "rapid restore";
	public static final String RAPID_HEAL_NAME = "rapid heal";
	public static final String PROTECT_ITEM_NAME = "protect item";
	public static final String HAWK_EYE_NAME = "hawk eye";
	public static final String MYSTIC_LORE_NAME = "mystic lore";
	public static final String STEEL_SKIN_NAME = "steel skin";
	public static final String ULTIMATE_STRENGTH_NAME = "ultimate strength";
	public static final String INCREDIBLE_REFLEXES_NAME = "incredible reflexes";
	public static final String PROTECT_FROM_MAGIC_NAME = "protect from magic";
	public static final String PROTECT_FROM_MISSILES_NAME = "protect from missiles";
	public static final String PROTECT_FROM_MELEE_NAME = "protect from melee";
	public static final String EAGLE_EYE_NAME = "eagle eye";
	public static final String MYSTIC_MIGHT_NAME = "mystic might";
	public static final String RETRIBUTION_NAME = "retribution";
	public static final String REDEMPTION_NAME = "redemption";
	public static final String SMITE_NAME = "smite";
	public static final String PRESERVE_NAME = "preserve";
	public static final String CHIVALRY_NAME = "chivalry";
	public static final String PIETY_NAME = "piety";
	public static final String RIGOUR_NAME = "rigour";
	public static final String AUGURY_NAME = "augury";

	@Getter
	public Image background;
	@Getter
	public Image debugBackground;
	@Getter
	public Image runOrb;
	@Getter
	public Image prayerOrb;
	@Getter
	public Image specOrb;
	@Getter
	public Image healthOrb;
	@Getter
	public Image u1Custom;
	@Getter
	public Image u2Custom;
	@Getter
	public Image u3Custom;
	@Getter
	public Image u4Custom;
	@Getter
	public Image u5Custom;
	@Getter
	public Image u6Custom;
	@Getter
	public Image iu1Custom;
	@Getter
	public Image iu2Custom;
	@Getter
	public Image iu3Custom;
	@Getter
	public Image iu4Custom;
	@Getter
	public Image iu5Custom;
	@Getter
	public Image iu6Custom;

	public boolean unlockOverlayVisible = false;
	public boolean taskOverlayVisible = false;
	public boolean itemUnlockOverlayVisible = false;

	public int plane = -1;

	@Override
	protected void startUp() throws Exception
	{
		if (!THEN_WE_FIGHT_FOLDER.exists())
		{
			THEN_WE_FIGHT_FOLDER.mkdirs();
		}

		overlayManager.add(itemOverlay);
		overlayManager.add(sceneOverlay);
		overlayManager.add(unlockOverlay);
		overlayManager.add(widgetOverlay);
		overlayManager.add(taskOverlay);
		overlayManager.add(itemUnlockOverlay);

		pluginUtils.updateUnlockList();
		pluginUtils.updateItemUnlockList();
		pluginUtils.setCustomUnlockImageFilePaths();
		pluginUtils.setCustomItemUnlockImageFilePaths();
		pluginUtils.updateItemList();
		pluginUtils.updateNpcList();
		pluginUtils.updateWidgetList();
		pluginUtils.updateGameObjectList();
		pluginUtils.updateTaskList();
		pluginUtils.loadResources();


		unlockOverlayVisible = false;
		taskOverlayVisible = false;

		plane = -1;
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(itemOverlay);
		overlayManager.remove(sceneOverlay);
		overlayManager.remove(unlockOverlay);
		overlayManager.remove(widgetOverlay);
		overlayManager.remove(taskOverlay);
		overlayManager.remove(itemUnlockOverlay);

		pluginUtils.updateUnlockList();
		pluginUtils.updateItemUnlockList();
		pluginUtils.setCustomUnlockImageFilePaths();
		pluginUtils.setCustomItemUnlockImageFilePaths();
		pluginUtils.updateItemList();
		pluginUtils.updateNpcList();
		pluginUtils.updateWidgetList();
		pluginUtils.updateGameObjectList();
		pluginUtils.loadResources();

		unlockOverlayVisible = false;
		taskOverlayVisible = false;

		plane = -1;
	}

	@Subscribe
	private void onConfigChanged(ConfigChanged event)
	{
		if (!event.getGroup().equals("thenwefight"))
		{
			return;
		}

		if (event.getKey().equals("unlockedItems"))
		{
			pluginUtils.updateItemList();
		}

		if (event.getKey().equals("unlockedNpcs")
				|| event.getKey().equals("unlockNpcs")
				|| event.getKey().equals("lockBanks"))
		{
			pluginUtils.updateNpcList();
		}

		if (event.getKey().equals("lockedGameObjects")
				|| event.getKey().equals("lockGameObjects")
				|| event.getKey().equals("lockBanks")
				|| event.getKey().equals("lockUnderground")
				|| event.getKey().equals("lockStairs")
				|| event.getKey().equals("lockDoors"))
		{
			pluginUtils.updateGameObjectList();
		}

		if (event.getKey().equals("lockedWidgets"))
		{
			pluginUtils.updateWidgetList();
		}

		if (event.getKey().equals("taskList"))
		{
			pluginUtils.updateTaskList();
		}

		if (event.getKey().equals("unlockList"))
		{
			pluginUtils.updateUnlockList();
			pluginUtils.setCustomUnlockImageFilePaths();
		}

		if (event.getKey().equals("unlockScroll"))
		{
			pluginUtils.setCustomUnlockImageFilePaths();
		}

		if (event.getKey().equals("itemUnlockList"))
		{
			pluginUtils.updateItemUnlockList();
			pluginUtils.setCustomItemUnlockImageFilePaths();
		}

		if (event.getKey().equals("itemUnlockScroll"))
		{
			pluginUtils.setCustomItemUnlockImageFilePaths();
		}

		if (event.getKey().equals("imageWidth") || event.getKey().equals("imageHeight"))
		{
			pluginUtils.setCustomUnlockImageFilePaths();
			pluginUtils.setCustomItemUnlockImageFilePaths();
		}
	}

	@Provides
	ThenWeFightConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ThenWeFightConfig.class);
	}

	@Subscribe
	private void onMenuEntryAdded(MenuEntryAdded event)
	{
		String target = event.getTarget();
		String cleanTarget = Text.standardize(target);
		String option = event.getOption();
		String cleanOption = Text.standardize(option);
		int type = event.getType();
		int identifier = event.getIdentifier();
		int param1 = event.getActionParam1();
		int param0 = event.getActionParam0();
		Widget widget = event.getMenuEntry().getWidget();
		boolean shiftPressed = client.isKeyPressed(KeyCode.KC_SHIFT);
		boolean unlockedItem = false;
		boolean lockedNpc = false;

		if (widget != null)
		{
			unlockedItem = unlockedItems.contains(widget.getItemId());
		}

		if (QUEST_TAB_PARAMS.contains(param1))
		{
			client.createMenuEntry(-1)
					.setOption(ColorUtil.prependColorTag(unlockOverlayVisible ? "Hide Unlocks" : "View Unlocks", Color.ORANGE))
					.setParam1(param1)
					.setDeprioritized(true)
					.setType(MenuAction.RUNELITE);


			client.createMenuEntry(-2)
					.setOption(ColorUtil.prependColorTag(taskOverlayVisible ? "Hide Tasks" : "View Tasks", Color.ORANGE))
					.setParam1(param1)
					.setDeprioritized(true)
					.setType(MenuAction.RUNELITE);

			client.createMenuEntry(-3)
					.setOption(ColorUtil.prependColorTag(itemUnlockOverlayVisible ? "Hide Item Unlocks" : "View Item Unlocks", Color.ORANGE))
					.setParam1(param1)
					.setDeprioritized(true)
					.setType(MenuAction.RUNELITE);
		}

		if (INVENT_TAB_PARAMS.contains(param1) && config.unlockItems())
		{
			client.createMenuEntry(-1)
					.setOption(ColorUtil.prependColorTag("Lock All Inventory Items", Color.ORANGE))
					.setParam1(param1)
					.setDeprioritized(true)
					.setType(MenuAction.RUNELITE)
					.onClick(pluginUtils::lockAllItems);


			client.createMenuEntry(-2)
					.setOption(ColorUtil.prependColorTag("Unlock All Inventory Items", Color.ORANGE))
					.setParam1(param1)
					.setDeprioritized(true)
					.setType(MenuAction.RUNELITE)
					.onClick(pluginUtils::unlockAllItems);

			client.createMenuEntry(-3)
					.setOption(ColorUtil.prependColorTag("Lock All Inventory Food", Color.ORANGE))
					.setParam1(param1)
					.setDeprioritized(true)
					.setType(MenuAction.RUNELITE)
					.onClick(pluginUtils::lockAllFood);

			client.createMenuEntry(-4)
					.setOption(ColorUtil.prependColorTag("Unlock All Inventory Food", Color.ORANGE))
					.setParam1(param1)
					.setDeprioritized(true)
					.setType(MenuAction.RUNELITE)
					.onClick(pluginUtils::unlockAllFood);
		}

		if (EQUIPMENT_TAB_PARAMS.contains(param1) && config.unlockItems())
		{
			client.createMenuEntry(-1)
					.setOption(ColorUtil.prependColorTag("Lock All Worn Items", Color.ORANGE))
					.setParam1(param1)
					.setDeprioritized(true)
					.setType(MenuAction.RUNELITE)
					.onClick(pluginUtils::lockAllEquipment);


			client.createMenuEntry(-2)
					.setOption(ColorUtil.prependColorTag("Unlock All Worn Items", Color.ORANGE))
					.setParam1(param1)
					.setDeprioritized(true)
					.setType(MenuAction.RUNELITE)
					.onClick(pluginUtils::unlockAllEquipment);
		}

		if (shiftPressed)
		{
			if (param1 == WidgetInfo.INVENTORY.getId()
					&& type == MenuAction.CC_OP_LOW_PRIORITY.getId()
					&& identifier == 10
					&& widget != null
					&& config.unlockItems())
			{
				client.createMenuEntry(-1)
						.setOption(ColorUtil.prependColorTag(unlockedItem ? "Lock": "Unlock", Color.ORANGE))
						.setTarget(target)
						.setIdentifier(identifier)
						.setParam0(widget.getItemId())
						.setParam1(param1)
						.setType(MenuAction.RUNELITE);
			}

			if (type == MenuAction.EXAMINE_NPC.getId()
					&& config.unlockNpcs())
			{
				final int id = event.getMenuEntry().getIdentifier();
				final NPC[] cachedNPCs = client.getCachedNPCs();
				final NPC npc = cachedNPCs[id];

				if (npc != null && npc.getName() != null)
				{
					boolean unlocked = unlockedNpcs.contains(npc.getName().toLowerCase());

					client.createMenuEntry(-1)
							.setOption(ColorUtil.prependColorTag(unlocked ? "Lock NPC": "Unlock NPC", Color.ORANGE))
							.setTarget(target)
							.setIdentifier(identifier)
							.setParam0(param0)
							.setParam1(param1)
							.setType(MenuAction.RUNELITE);
				}
			}

			if (type == MenuAction.EXAMINE_OBJECT.getId()
					&& config.lockGameObjects())
			{
				final int id = event.getMenuEntry().getIdentifier();

				boolean unlocked = lockedObjects.contains(gameUtils.getGameObjectName(id));

				client.createMenuEntry(-1)
						.setOption(ColorUtil.prependColorTag(unlocked ? "Unlock Object": "Lock Object", Color.ORANGE))
						.setTarget(target)
						.setIdentifier(identifier)
						.setParam0(param0)
						.setParam1(param1)
						.setType(MenuAction.RUNELITE);
			}
		}

		if (config.unlockNpcs() && NPC_ACTIONS.contains(type))
		{
			final NPC[] cachedNPCs = client.getCachedNPCs();
			final NPC npc = cachedNPCs[identifier];

			if (npc != null && npc.getName() != null && !unlockedNpcs.contains(npc.getName().toLowerCase()))
			{
				lockedNpc = true;
			}
		}

//		 if youre reading my code for some reason and see this, please continue with your life and pay no attention to it
		if ((config.lockAttacking() && type == MenuAction.NPC_SECOND_OPTION.getId())
				|| (config.unlockItems() && param1 == WidgetInfo.INVENTORY.getId() && widget != null && !unlockedItems.contains(widget.getItemId()))
				|| (config.lockDrinking() && DRINK_OPTIONS.contains(cleanOption))
				|| (config.lockEating() && EAT_OPTIONS.contains(cleanOption))
				|| (config.lockTeles() && option.toLowerCase().contains("teleport"))
				|| (config.lockTeles() && target.toLowerCase().contains("teleport"))
				|| (config.lockTeles() && option.toLowerCase().contains("tele"))
				|| (config.lockTeles() && target.toLowerCase().contains("tele"))
				|| (config.lockBanks() && (BANK_OBJECT_NAMES.contains(cleanTarget) || BANK_NPC_NAMES.contains(cleanTarget)))
				|| (config.lockCoins() && type == MenuAction.GROUND_ITEM_THIRD_OPTION.getId() && cleanTarget.equals("coins"))
				|| (config.unlockItems() && GROUND_ITEM_ACTIONS.contains(type) && lockedObjects.contains(cleanTarget))
				|| (config.lockGameObjects() && OBJECT_ACTIONS.contains(type) && lockedObjects.contains(cleanTarget))
				|| (config.lockBanks() && BANK_OBJECT_NAMES.contains(cleanTarget) && OBJECT_ACTIONS.contains(type))
				|| (config.lockUnderground() && UNDERGROUND_OBJECT_NAMES.contains(cleanTarget) && OBJECT_ACTIONS.contains(type))
				|| (config.lockBanks() && BANK_NPC_NAMES.contains(cleanTarget) && NPC_ACTIONS.contains(type))
				|| (config.lockThieving() && THIEVE_OPTIONS.contains(cleanOption))
				|| (config.lockWoodcutting() && WOODCUTTING_OPTIONS.contains(cleanOption))
				|| (config.lockFishing() && FISHING_TARGETS.contains(cleanTarget))
				|| (config.lockSlayer() && NPC_ACTIONS.contains(type) && SLAYER_NPC_TARGETS.contains(cleanTarget))
				|| lockedNpc)
		{
			event.getMenuEntry().setOption(ColorUtil.prependColorTag(option,config.uiOverlayColour()));
			event.getMenuEntry().setTarget(ColorUtil.prependColorTag(Text.removeTags(target),config.uiOverlayColour()));
			event.getMenuEntry().setDeprioritized(true);
		}
	}

	@Subscribe
	private void onMenuOptionClicked(MenuOptionClicked event)
	{
		String target = event.getMenuTarget();
		String cleanTarget = Text.standardize(target);
		String option = event.getMenuOption();
		int type = event.getMenuAction().getId();
		int identifier = event.getId();
		int param1 = event.getParam1();
		int param0 = event.getParam0();
		MenuEntry entry = event.getMenuEntry();
		Widget widget = entry.getWidget();

		if (param1 == WidgetInfo.INVENTORY.getId()
				&& widget != null
				&& config.unlockItems()
				&& !client.isKeyPressed(KeyCode.KC_SHIFT))
		{
			boolean unlocked = unlockedItems.contains(widget.getItemId());

			if (!unlocked)
			{
				event.consume();
				return;
			}
		}

		if (option.equals("Walk here") && (taskOverlayVisible || unlockOverlayVisible || itemUnlockOverlayVisible))
		{
			unlockOverlayVisible = false;
			taskOverlayVisible = false;
			itemUnlockOverlayVisible = false;
		}

		if (QUEST_TAB_PARAMS.contains(param1))
		{
			if (option.equals(ColorUtil.prependColorTag("View Unlocks", Color.ORANGE)))
			{
				event.consume();
				unlockOverlayVisible = true;
				taskOverlayVisible = false;
				itemUnlockOverlayVisible = false;
			}

			if (option.equals(ColorUtil.prependColorTag("Hide Unlocks", Color.ORANGE)))
			{
				event.consume();
				unlockOverlayVisible = false;
			}

			if (option.equals(ColorUtil.prependColorTag("View Tasks", Color.ORANGE)))
			{
				event.consume();
				taskOverlayVisible = true;
				unlockOverlayVisible = false;
				itemUnlockOverlayVisible = false;
			}

			if (option.equals(ColorUtil.prependColorTag("Hide Tasks", Color.ORANGE)))
			{
				event.consume();
				taskOverlayVisible = false;
			}

			if (option.equals(ColorUtil.prependColorTag("View Item Unlocks", Color.ORANGE)))
			{
				event.consume();
				itemUnlockOverlayVisible = true;
				unlockOverlayVisible = false;
				taskOverlayVisible = false;
			}

			if (option.equals(ColorUtil.prependColorTag("Hide Item Unlocks", Color.ORANGE)))
			{
				event.consume();
				itemUnlockOverlayVisible = false;
			}
		}

		if (param1 == WidgetInfo.INVENTORY.getId()
				&& type == MenuAction.RUNELITE.getId()
				&& param0 != 0
		)
		{
			if (option.equals(ColorUtil.prependColorTag("Unlock", Color.ORANGE)))
			{
				event.consume();
				unlockedItems.add(param0);
				configManager.setConfiguration("thenwefight", "unlockedItems", unlockedItems.toString().replace(" ", "").replace("[", "").replace("]", ""));
			}

			if (option.equals(ColorUtil.prependColorTag("Lock", Color.ORANGE)))
			{
				event.consume();
				unlockedItems.remove((Integer) param0);
				configManager.setConfiguration("thenwefight", "unlockedItems", unlockedItems.toString().replace(" ", "").replace("[", "").replace("]", ""));
			}
		}

		if (type == MenuAction.RUNELITE.getId())
		{
			if (option.equals(ColorUtil.prependColorTag("Unlock NPC", Color.ORANGE)))
			{
				event.consume();

				final NPC[] cachedNPCs = client.getCachedNPCs();
				final NPC npc = cachedNPCs[identifier];

				if (npc != null && npc.getName() != null)
				{
					unlockedNpcs.add(npc.getName().toLowerCase());
					configManager.setConfiguration("thenwefight", "unlockedNpcs", unlockedNpcs.toString().replace("[", "").replace("]", ""));
				}
			}

			if (option.equals(ColorUtil.prependColorTag("Lock NPC", Color.ORANGE)))
			{
				event.consume();

				final NPC[] cachedNPCs = client.getCachedNPCs();
				final NPC npc = cachedNPCs[identifier];

				if (npc != null && npc.getName() != null)
				{
					unlockedNpcs.remove(npc.getName().toLowerCase());
					configManager.setConfiguration("thenwefight", "unlockedNpcs", unlockedNpcs.toString().replace("[", "").replace("]", ""));
				}
			}

			if (option.equals(ColorUtil.prependColorTag("Lock Object", Color.ORANGE)))
			{
				event.consume();

				lockedObjects.add(gameUtils.getGameObjectName(identifier));
				configManager.setConfiguration("thenwefight", "lockedGameObjects", lockedObjects.toString().replace("[", "").replace("]", ""));
			}

			if (option.equals(ColorUtil.prependColorTag("Unlock Object", Color.ORANGE)))
			{
				event.consume();

				lockedObjects.remove(gameUtils.getGameObjectName(identifier));
				configManager.setConfiguration("thenwefight", "lockedGameObjects", lockedObjects.toString().replace("[", "").replace("]", ""));
				pluginUtils.updateGameObjects();
			}
		}
	}

	@Subscribe
	private void onMenuOpened(MenuOpened event)
	{
		ArrayList<MenuEntry> entries = new ArrayList<>();

		for (MenuEntry entry : event.getMenuEntries())
		{
			String target = entry.getTarget();
			String cleanTarget = Text.standardize(target);
			String option = entry.getOption();
			String cleanOption = Text.standardize(option);
			int type = entry.getType().getId();
			int identifier = entry.getIdentifier();
			int param1 = entry.getParam1();
			int param0 = entry.getParam0();
			Widget widget = entry.getWidget();
			boolean shiftPressed = client.isKeyPressed(KeyCode.KC_SHIFT);
			boolean lockedNpc = false;

			if (config.unlockNpcs() && NPC_ACTIONS.contains(type))
			{
				final NPC[] cachedNPCs = client.getCachedNPCs();
				final NPC npc = cachedNPCs[identifier];

				if (npc != null && npc.getName() != null && !unlockedNpcs.contains(npc.getName().toLowerCase()))
				{
					lockedNpc = true;
				}
			}

			if (!((config.lockAttacking() && type == MenuAction.NPC_SECOND_OPTION.getId())
					|| (config.unlockItems() && param1 == WidgetInfo.INVENTORY.getId() && widget != null && !unlockedItems.contains(widget.getItemId()))
					|| (config.lockDrinking() && DRINK_OPTIONS.contains(cleanOption))
					|| (config.lockEating() && EAT_OPTIONS.contains(cleanOption))
					|| (config.lockTeles() && option.toLowerCase().contains("teleport"))
					|| (config.lockTeles() && target.toLowerCase().contains("teleport"))
					|| (config.lockTeles() && option.toLowerCase().contains("tele"))
					|| (config.lockTeles() && target.toLowerCase().contains("tele"))
					|| (config.lockBanks() && (BANK_OBJECT_NAMES.contains(cleanTarget) || BANK_NPC_NAMES.contains(cleanTarget)))
					|| (config.lockCoins() && type == MenuAction.GROUND_ITEM_THIRD_OPTION.getId() && target.contains("Coins"))
					|| (config.unlockItems() && GROUND_ITEM_ACTIONS.contains(type) && lockedObjects.contains(cleanTarget))
					|| (config.lockGameObjects() && OBJECT_ACTIONS.contains(type) && lockedObjects.contains(cleanTarget))
					|| (config.lockBanks() && BANK_OBJECT_NAMES.contains(cleanTarget) && OBJECT_ACTIONS.contains(type))
					|| (config.lockUnderground() && UNDERGROUND_OBJECT_NAMES.contains(cleanTarget) && OBJECT_ACTIONS.contains(type))
					|| (config.lockBanks() && BANK_NPC_NAMES.contains(cleanTarget) && NPC_ACTIONS.contains(type))
					|| (config.lockThieving() && THIEVE_OPTIONS.contains(cleanOption))
					|| (config.lockThieving() && THIEVE_OPTIONS.contains(cleanOption))
					|| (config.lockWoodcutting() && WOODCUTTING_OPTIONS.contains(cleanOption))
					|| (config.lockFishing() && FISHING_TARGETS.contains(cleanTarget))
					|| (config.lockSlayer() && NPC_ACTIONS.contains(type) && SLAYER_NPC_TARGETS.contains(cleanTarget))
					|| lockedNpc)
					|| shiftPressed)
			{
				entries.add(entry);
			}
		}

		client.setMenuEntries(entries.toArray(new MenuEntry[0]));
	}

	@Subscribe
	private void onGameObjectSpawned(GameObjectSpawned event)
	{
		GameObject object = event.getGameObject();
		ObjectComposition objectComposition = gameUtils.getObjectComposition(object.getId());

		if (objectComposition == null || objectComposition.getName() == null || objectComposition.getName().equals(""))
		{
			return;
		}

		String name = objectComposition.getName().toLowerCase();

		if (config.lockBanks() && BANK_OBJECT_NAMES.contains(name) && !gameObjects.contains(object))
		{
			gameObjects.add(object);
		}

		if (config.lockUnderground() && UNDERGROUND_OBJECT_NAMES.contains(name) && !gameObjects.contains(object))
		{
			gameObjects.add(object);
		}

		if (config.lockGameObjects() && lockedObjects.contains(name) && !gameObjects.contains(object))
		{
			gameObjects.add(object);
		}

		if (config.lockDoors() && DOOR_OBJECT_NAMES.contains(name) && !gameObjects.contains(object))
		{
			gameObjects.add(object);
		}

		if (config.lockStairs() && STAIRS_OBJECT_NAMES.contains(name) && !gameObjects.contains(object))
		{
			gameObjects.add(object);
		}
	}

	@Subscribe
	private void onGameObjectDespawned(GameObjectDespawned event)
	{
		gameObjects.remove(event.getGameObject());
	}

	@Subscribe
	private void onWallObjectSpawned(WallObjectSpawned event)
	{
		WallObject object = event.getWallObject();

		ObjectComposition objectComposition = gameUtils.getObjectComposition(object.getId());

		if (objectComposition == null || objectComposition.getName() == null || objectComposition.getName().equals(""))
		{
			return;
		}

		String name = objectComposition.getName().toLowerCase();

		if (config.lockBanks() && BANK_OBJECT_NAMES.contains(name) && !wallObjects.contains(object))
		{
			wallObjects.add(object);
		}

		if (config.lockUnderground() && UNDERGROUND_OBJECT_NAMES.contains(name) && !wallObjects.contains(object))
		{
			wallObjects.add(object);
		}

		if (config.lockGameObjects() && lockedObjects.contains(name) && !wallObjects.contains(object))
		{
			wallObjects.add(object);
		}

		if (config.lockDoors() && DOOR_OBJECT_NAMES.contains(name) && !wallObjects.contains(object))
		{
			wallObjects.add(object);
		}

		if (config.lockStairs() && STAIRS_OBJECT_NAMES.contains(name) && !wallObjects.contains(object))
		{
			wallObjects.add(object);
		}
	}

	@Subscribe
	private void onWallObjectDespawned(WallObjectDespawned event)
	{
		wallObjects.remove(event.getWallObject());
	}

	@Subscribe
	private void onGroundObjectSpawned(GroundObjectSpawned event)
	{
		GroundObject object = event.getGroundObject();
		ObjectComposition objectComposition = gameUtils.getObjectComposition(object.getId());

		if (objectComposition == null || objectComposition.getName() == null || objectComposition.getName().equals(""))
		{
			return;
		}

		String name = objectComposition.getName().toLowerCase();

		if (config.lockBanks() && BANK_OBJECT_NAMES.contains(name) && !groundObjects.contains(object))
		{
			groundObjects.add(object);
		}

		if (config.lockUnderground() && UNDERGROUND_OBJECT_NAMES.contains(name) && !groundObjects.contains(object))
		{
			groundObjects.add(object);
		}

		if (config.lockGameObjects() && lockedObjects.contains(name) && !groundObjects.contains(object))
		{
			groundObjects.add(object);
		}

		if (config.lockDoors() && DOOR_OBJECT_NAMES.contains(name) && !groundObjects.contains(object))
		{
			groundObjects.add(object);
		}

		if (config.lockStairs() && STAIRS_OBJECT_NAMES.contains(name) && !groundObjects.contains(object))
		{
			groundObjects.add(object);
		}
	}

	@Subscribe
	private void onGroundObjectDespawned(GroundObjectDespawned event)
	{
		groundObjects.remove(event.getGroundObject());
	}

	@Subscribe
	private void onNpcSpawned(NpcSpawned event)
	{
		NPC npc = event.getNpc();

		if (npc.getName() == null || npc.getName().equals(""))
		{
			return;
		}

		if (config.lockBanks() && BANK_NPC_NAMES.contains(npc.getName().toLowerCase()) && !npcs.contains(npc))
		{
			npcs.add(npc);
		}

		if (config.unlockNpcs() && !unlockedNpcs.contains(npc.getName().toLowerCase()) && !npcs.contains(npc))
		{
			npcs.add(npc);
		}
	}

	@Subscribe
	private void onNpcDespawned(NpcDespawned event)
	{
		npcs.remove(event.getNpc());
	}

	@Subscribe
	private void onGameStateChanged(GameStateChanged event)
	{
		if (event.getGameState().equals(GameState.LOGGED_IN))
		{
			pluginUtils.updateNpcs();
			pluginUtils.updateGameObjects();
		}
	}

	@Subscribe
	private void onGameTick(GameTick event)
	{
		Player local = client.getLocalPlayer();

		if (local == null)
		{
			return;
		}

		int localPlane = local.getWorldLocation().getPlane();

		if (plane == -1 || plane != localPlane)
		{
			plane = localPlane;
			pluginUtils.updateGameObjects();
		}
	}

}

package com.thenwefight.overlay;

import com.google.common.base.Strings;
import com.thenwefight.ThenWeFightConfig;
import com.thenwefight.ThenWeFightPlugin;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Point;
import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.util.ColorUtil;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.awt.*;

@Slf4j
@Singleton
public
class ThenWeFightSceneOverlay extends Overlay {

    @Inject
    private Client client;
    private final ThenWeFightConfig config;
    private final ThenWeFightPlugin plugin;

    @Inject
    private ThenWeFightSceneOverlay(final Client client, final ThenWeFightConfig config, final ThenWeFightPlugin plugin) {
        super(plugin);
        this.client = client;
        this.config = config;
        this.plugin = plugin;
        this.setPriority(OverlayPriority.HIGHEST);
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }


    @Override
    public Dimension render(Graphics2D graphics)
    {
        Player local = client.getLocalPlayer();

        if (plugin == null || local == null)
        {
            return null;
        }

        for (NPC n : ThenWeFightPlugin.npcs)
        {
            renderNpcOverlay(graphics, config.gameOverlayColour(), n);
        }

        for (GameObject g : ThenWeFightPlugin.gameObjects)
        {
            renderGameObject(graphics, config.gameOverlayColour(), g);
        }

        for (GroundObject go : ThenWeFightPlugin.groundObjects)
        {
            renderGroundObject(graphics, config.gameOverlayColour(), go);
        }

        for (WallObject wo : ThenWeFightPlugin.wallObjects)
        {
            renderWallObject(graphics, config.gameOverlayColour(), wo);
        }

        return null;
    }

    private void renderWorldArea(final Graphics2D graphics, WorldArea area, Color color)
    {
        WorldPoint sw = area.toWorldPoint();
        int width = area.getWidth();
        int height = area.getHeight();
        boolean widthEven = width % 2 == 0;
        boolean heightEven = height % 2 == 0;

        WorldPoint center = new WorldPoint(sw.dx(width / 2).getX(), sw.dy(height / 2).getY(), sw.getPlane());

        LocalPoint local = LocalPoint.fromWorld(client, center);

        if (local == null)
        {
            return;
        }

        if (!widthEven)
        {
            local = new LocalPoint(local.getX() + (Perspective.LOCAL_HALF_TILE_SIZE), local.getY());
            width++;
        } else {
            width++;
        }

        if (!heightEven)
        {
            local = new LocalPoint(local.getX(), local.getY() + (Perspective.LOCAL_HALF_TILE_SIZE));
            height++;
        } else {
            height++;
        }

//        rendering center tiles for debugging
//        renderWorldPoint(graphics, center, Color.GREEN);
//        renderTile(graphics, local, Color.BLUE, 1);

        Polygon tilePoly = Perspective.getCanvasTileAreaPoly(client, local, width, height, area.getPlane(), 100);

        renderPoly(graphics, color, tilePoly, false);
    }

    private void renderNpcText(Graphics2D graphics, NPC npc, String text, Color color)
    {
        Point txtLoc = npc.getCanvasTextLocation(graphics, text, npc.getLogicalHeight() - 70);

        if (npc.getConvexHull() == null || txtLoc == null)
        {
            return;
        }

        renderTextLocation(graphics, txtLoc, text, color);
    }

    private void renderWorldPoint(Graphics2D graphics, WorldPoint worldPoint, Color color)
    {
        LocalPoint lp = LocalPoint.fromWorld(client, worldPoint);
        if (lp != null)
        {
            renderTile(graphics, lp, color, 1);
        }
    }

    private void renderWorldPointText(Graphics2D graphics, WorldPoint worldPoint, String text, Color color)
    {
        LocalPoint lp = LocalPoint.fromWorld(client, worldPoint);
        if (lp != null)
        {
            Point point = Perspective.localToCanvas(client, lp, worldPoint.getPlane());
            if (point != null)
            {
                int textWidth = graphics.getFontMetrics().stringWidth(text);
                int textHeight = graphics.getFontMetrics().getAscent();

                Point centerPoint = new Point(point.getX() - textWidth / 2, point.getY() + textHeight / 2);

                renderTextLocation(graphics, centerPoint, text, color);
            }
        }
    }

    private void renderTile(final Graphics2D graphics, final LocalPoint dest, final Color color, final double borderWidth)
    {
        if (dest == null)
        {
            return;
        }

        final Polygon poly = Perspective.getCanvasTilePoly(client, dest);

        if (poly == null)
        {
            return;
        }

        renderPoly(graphics, color, poly, true);
    }

    public static void renderTextLocation(Graphics2D graphics, Point txtLoc, String text, Color color)
    {
        if (Strings.isNullOrEmpty(text))
        {
            return;
        }

        int x = (int) txtLoc.getX();
        int y = (int) txtLoc.getY();

        graphics.setColor(Color.BLACK);
        graphics.drawString(text, x + 1, y + 1);

        graphics.setColor(color);
        graphics.drawString(text, x, y);
    }

    private void renderNpcOverlay(Graphics2D graphics, Color color, NPC actor)
    {
        NPCComposition npcComposition = actor.getTransformedComposition();
        if (npcComposition == null || !npcComposition.isInteractible()
                || (actor.isDead()))
        {
            return;
        }
        Shape objectClickbox = actor.getConvexHull();
        renderPolyFill(graphics, color, objectClickbox, true);
    }

    private void renderPoly(Graphics2D graphics, Color color, Shape polygon, boolean fill)
    {
        if (polygon != null)
        {
            graphics.setColor(color);
            graphics.setStroke(new BasicStroke((float) 1.2));
            graphics.draw(polygon);
            graphics.setColor(ColorUtil.colorWithAlpha(color, 20));
            if (fill)
            {
                graphics.fill(polygon);
            }
        }
    }

    private void renderPolyFill(Graphics2D graphics, Color color, Shape polygon, boolean fill)
    {
        if (polygon != null)
        {
            graphics.setColor(color);
            graphics.setStroke(new BasicStroke((float) 1.2));
            graphics.draw(polygon);
            graphics.setColor(ColorUtil.colorWithAlpha(color, config.opacity()));
            graphics.fill(polygon);
        }
    }

    private void renderGroundObject(Graphics2D graphics, Color color, GroundObject object)
    {
        Shape shape = object.getConvexHull();

        if (shape != null)
        {
            renderPolyFill(graphics, color, shape, true);
        }
    }

    private void renderWallObject(Graphics2D graphics, Color color, WallObject object)
    {
        Shape shape = object.getConvexHull();

        if (shape != null)
        {
            renderPolyFill(graphics, color, shape, true);
        }
    }

    private void renderGameObject(Graphics2D graphics, Color color, GameObject object)
    {
        Shape shape = object.getConvexHull();

        if (shape != null)
        {
            renderPolyFill(graphics, color, shape, true);
        }
    }
}

package com.thenwefight.overlay;

import com.thenwefight.ThenWeFightConfig;
import com.thenwefight.ThenWeFightPlugin;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.widgets.WidgetID;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.WidgetItemOverlay;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;

@Slf4j
public class ThenWeFightItemOverlay extends WidgetItemOverlay {

    private final ItemManager itemManager;
    private final ThenWeFightPlugin plugin;
    private final ThenWeFightConfig config;

    @Inject
    ThenWeFightItemOverlay(ItemManager itemManager, ThenWeFightPlugin plugin, ThenWeFightConfig config)
    {
        this.itemManager = itemManager;
        this.plugin = plugin;
        this.config = config;
        showOnEquipment();
        showOnInventory();
        showOnBank();
        showOnInterfaces(
                WidgetID.CHAMBERS_OF_XERIC_STORAGE_UNIT_INVENTORY_GROUP_ID,
                WidgetID.CHAMBERS_OF_XERIC_STORAGE_UNIT_PRIVATE_GROUP_ID,
                WidgetID.CHAMBERS_OF_XERIC_STORAGE_UNIT_SHARED_GROUP_ID,
                WidgetID.GRAVESTONE_GROUP_ID
        );
    }

    @Override
    public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem widgetItem)
    {
        if ((config.unlockItems() && !ThenWeFightPlugin.unlockedItems.contains(itemId))
            || config.lockCoins() && itemId == 995)
        {
            Rectangle bounds = widgetItem.getCanvasBounds();

            final BufferedImage outline = itemManager.getItemOutline(itemId, widgetItem.getQuantity(), config.uiOverlayColour());
            graphics.drawImage(outline, (int) bounds.getX(), (int) bounds.getY(), null);

            final Image image = ImageUtil.fillImage(itemManager.getImage(itemId, widgetItem.getQuantity(), false), config.uiOverlayColour());
            float opacity = (config.opacity() == 0 ? 0 : config.opacity() / 255f);
            graphics.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, opacity));
            graphics.drawImage(image, (int) bounds.getX(), (int) bounds.getY(), null);
        }
    }
}
package com.thenwefight.overlay;

import com.thenwefight.ThenWeFightConfig;
import com.thenwefight.ThenWeFightPlugin;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Player;
import net.runelite.api.Prayer;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.Text;
import com.thenwefight.*;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.awt.*;
import java.awt.geom.Rectangle2D;

import static com.thenwefight.ThenWeFightPlugin.*;

@Slf4j
@Singleton
public
class ThenWeFightWidgetOverlay extends Overlay {

    @Inject
    private Client client;
    private final ThenWeFightConfig config;
    private final ThenWeFightPlugin plugin;

    @Inject
    private ThenWeFightWidgetOverlay(final Client client, final ThenWeFightConfig config, final ThenWeFightPlugin plugin) {
        super(plugin);
        this.client = client;
        this.config = config;
        this.plugin = plugin;
        this.setPriority(OverlayPriority.HIGHEST);
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
    }


    @Override
    public Dimension render(Graphics2D graphics)
    {
        Player local = client.getLocalPlayer();

        if (plugin == null || local == null)
        {
            return null;
        }

        if (config.lockWidgets())
        {
            for (int i : ThenWeFightPlugin.lockedWidgets)
            {
                Widget custom = client.getWidget(i);

                if (custom != null && !custom.isHidden())
                {
                    renderWidgetOverlay(graphics, custom, config.uiOverlayColour());
                }
            }
        }

        if (config.lockRunEnergy())
        {
            Widget runOrb = client.getWidget(WidgetInfo.MINIMAP_RUN_ORB);

            if (runOrb != null && !runOrb.isHidden())
            {
                renderImageLocation(graphics, runOrb.getBounds().getLocation(), plugin.getRunOrb());
            }
        }

        if (config.lockPrayer())
        {
            Widget prayOrb = client.getWidget(WidgetInfo.MINIMAP_PRAYER_ORB);

            if (prayOrb != null && !prayOrb.isHidden())
            {
                renderImageLocation(graphics, prayOrb.getBounds().getLocation(), plugin.getPrayerOrb());
            }

            Widget prayerTab = client.getWidget(35454980);

            if (prayerTab != null && !prayerTab.isHidden())
            {
                Widget[] prayers = prayerTab.getStaticChildren();

                if (prayers != null)
                {
                    for (Widget prayer : prayers)
                    {
                        String name = Text.standardize(prayer.getName());

                        if (!prayer.isHidden() &&
                            ((config.lockThickSkin() && name.equals(THICK_SKIN_NAME))
                            || (config.lockBurstOfStrength() && name.equals(BURST_OF_STRENGTH_NAME))
                            || (config.lockClarityOfThought() && name.equals(CLARITY_OF_THOUGHT_NAME))
                            || (config.lockRockSkin() && name.equals(ROCK_SKIN_NAME))
                            || (config.lockSuperhumanStrength() && name.equals(SUPERHUMAN_STRENGTH_NAME))
                            || (config.lockImprovedReflexes() && name.equals(IMPROVED_REFLEXES_NAME))
                            || (config.lockRapidRestore() && name.equals(RAPID_RESTORE_NAME))
                            || (config.lockRapidHeal() && name.equals(RAPID_HEAL_NAME))
                            || (config.lockProtectItem() && name.equals(PROTECT_ITEM_NAME))
                            || (config.lockSteelSkin() && name.equals(STEEL_SKIN_NAME))
                            || (config.lockUltimateStrength() && name.equals(ULTIMATE_STRENGTH_NAME))
                            || (config.lockIncredibleReflexes() && name.equals(INCREDIBLE_REFLEXES_NAME))
                            || (config.lockProtectFromMagic() && name.equals(PROTECT_FROM_MAGIC_NAME))
                            || (config.lockProtectFromMissiles() && name.equals(PROTECT_FROM_MISSILES_NAME))
                            || (config.lockProtectFromMelee() && name.equals(PROTECT_FROM_MELEE_NAME))
                            || (config.lockRetribution() && name.equals(RETRIBUTION_NAME))
                            || (config.lockRedemption() && name.equals(REDEMPTION_NAME))
                            || (config.lockSmite() && name.equals(SMITE_NAME))
                            || (config.lockSharpEye() && name.equals(SHARP_EYE_NAME))
                            || (config.lockMysticWill() && name.equals(MYSTIC_WILL_NAME))
                            || (config.lockHawkEye() && name.equals(HAWK_EYE_NAME))
                            || (config.lockMysticLore() && name.equals(MYSTIC_LORE_NAME))
                            || (config.lockEagleEye() && name.equals(EAGLE_EYE_NAME))
                            || (config.lockMysticMight() && name.equals(MYSTIC_MIGHT_NAME))
                            || (config.lockChivalry() && name.equals(CHIVALRY_NAME))
                            || (config.lockPiety() && name.equals(PIETY_NAME))
                            || (config.lockRigour() && name.equals(RIGOUR_NAME))
                            || (config.lockAugury() && name.equals(AUGURY_NAME))
                            || (config.lockPreserve() && name.equals(PRESERVE_NAME))))
                        {
                            renderWidgetOverlay(graphics, prayer, config.uiOverlayColour());
                        }
                    }
                }
            }
        }

        if (config.lockSpec())
        {
            Widget specOrb = client.getWidget(WidgetInfo.MINIMAP_SPEC_ORB);

            if (specOrb != null && !specOrb.isHidden())
            {
                renderImageLocation(graphics, specOrb.getBounds().getLocation(), plugin.getSpecOrb());
            }

            Widget specBar = client.getWidget(38862888);

            if (specBar != null && !specBar.isHidden())
            {
                renderWidgetOverlay(graphics, specBar, config.uiOverlayColour());
            }
        }

        if (config.lockHitpoints())
        {
            Widget hpOrb = client.getWidget(WidgetInfo.MINIMAP_HEALTH_ORB);

            if (hpOrb != null && !hpOrb.isHidden())
            {
                renderImageLocation(graphics, hpOrb.getBounds().getLocation(), plugin.getHealthOrb());
            }
        }

        if (config.lockTeles())
        {
            Widget spellsTab = client.getWidget(14286851);

            if (spellsTab != null && !spellsTab.isHidden())
            {
                Widget[] spells = spellsTab.getStaticChildren();

                if (spells != null)
                {
                    for (Widget spell : spells)
                    {
                        if (!spell.isHidden() && spell.getName().toLowerCase().contains("tele"))
                        {
                            renderWidgetOverlay(graphics, spell, config.uiOverlayColour());
                        }
                    }
                }
            }
        }

        Widget skillsTab = client.getWidget(WidgetInfo.SKILLS_CONTAINER);

        if (skillsTab != null && !skillsTab.isHidden())
        {
            Widget[] skills = skillsTab.getStaticChildren();

            if (skills != null)
            {
                for (Widget skill : skills)
                {
                    if (skill.isHidden() || skill.getId() == 20971548)
                    {
                        continue;
                    }

                    if ((config.lockAttack() && skill.getId() == 20971521)
                        || (config.lockStrength() && skill.getId() == 20971522)
                        || (config.lockDefence() && skill.getId() == 20971523)
                        || (config.lockRange() && skill.getId() == 20971524)
                        || (config.lockPrayer() && skill.getId() == 20971525)
                        || (config.lockMagic() && skill.getId() == 20971526)
                        || (config.lockRunecrafting() && skill.getId() == 20971527)
                        || (config.lockConstruction() && skill.getId() == 20971528)
                        || (config.lockHitpoints() && skill.getId() == 20971529)
                        || (config.lockAgility() && skill.getId() == 20971530)
                        || (config.lockHerblore() && skill.getId() == 20971531)
                        || (config.lockThieving() && skill.getId() == 20971532)
                        || (config.lockCrafting() && skill.getId() == 20971533)
                        || (config.lockFletching() && skill.getId() == 20971534)
                        || (config.lockSlayer() && skill.getId() == 20971535)
                        || (config.lockHunter() && skill.getId() == 20971536)
                        || (config.lockMining() && skill.getId() == 20971537)
                        || (config.lockSmithing() && skill.getId() == 20971538)
                        || (config.lockFishing() && skill.getId() == 20971539)
                        || (config.lockCooking() && skill.getId() == 20971540)
                        || (config.lockFiremaking() && skill.getId() == 20971541)
                        || (config.lockWoodcutting() && skill.getId() == 20971542)
                        || (config.lockFarming() && skill.getId() == 20971543))
                    {
                        renderWidgetOverlay(graphics, skill, config.uiOverlayColour());
                    }
                }
            }
        }

        if (config.lockEmotes())
        {
            Widget emoteTab = client.getWidget(WidgetInfo.EMOTE_CONTAINER);

            if (emoteTab != null && !emoteTab.isHidden())
            {
                renderWidgetOverlay(graphics, emoteTab, config.uiOverlayColour());
            }
        }

        if (config.lockHopping())
        {
            Widget worldList = client.getWidget(4521984);

            if (worldList != null && !worldList.isHidden())
            {
                renderWidgetOverlay(graphics, worldList, config.uiOverlayColour());
            }

            Widget switchWorlds = client.getWidget(11927559);

            if (switchWorlds != null && !switchWorlds.isHidden())
            {
                renderWidgetOverlay(graphics, switchWorlds, config.uiOverlayColour());
            }
        }

        return null;
    }

    private void renderPolyFill(Graphics2D graphics, Color color, Shape polygon, boolean fill)
    {
        if (polygon != null)
        {
            graphics.setColor(color);
            graphics.setStroke(new BasicStroke((float) 1.2));
            graphics.draw(polygon);
            graphics.setColor(ColorUtil.colorWithAlpha(color, config.opacity()));
            graphics.fill(polygon);
        }
    }

    private void renderWidgetOverlay(Graphics2D graphics, Widget widget, Color color)
    {
        Rectangle2D bounds = widget.getBounds();

        if (bounds != null)
        {
            renderPolyFill(graphics, color, bounds, true);
        }
    }

    public static void renderImageLocation(Graphics2D graphics, Point loc, Image image)
    {
        graphics.drawImage(image, loc.x, loc.y, null);
    }
}

package com.thenwefight.overlay;

import com.google.common.base.Strings;
import com.thenwefight.ThenWeFightConfig;
import com.thenwefight.ThenWeFightPlugin;
import com.thenwefight.utils.PluginUtils;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.awt.*;

@Slf4j
@Singleton
public
class ThenWeFightUnlockOverlay extends Overlay {

    @Inject
    private ItemManager itemManager;
    @Inject
    private PluginUtils pluginUtils;

    private final Client client;
    private final ThenWeFightConfig config;
    private final ThenWeFightPlugin plugin;

    private static final Font FONT = FontManager.getRunescapeFont().deriveFont(Font.BOLD, 16);
    private static final String TITLE = "Then We Fight Unlocks";


    @Inject
    private ThenWeFightUnlockOverlay(final Client client, final ThenWeFightConfig config, final ThenWeFightPlugin plugin) {
        super(plugin);
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
        this.client = client;
        this.config = config;
        this.plugin = plugin;
        this.setPosition(OverlayPosition.TOP_LEFT);
        this.setPriority(OverlayPriority.HIGHEST);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        graphics.setFont(FONT);

        if (!plugin.unlockOverlayVisible)
        {
            return null;
        }

        Point overlay = new Point(config.overlayX(), config.overlayY());
        Point title = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(TITLE) / 2)  + 244, overlay.y + graphics.getFontMetrics().getHeight() + 9);
        Point points = new Point(overlay.x + 20, overlay.y + graphics.getFontMetrics().getHeight() + 9);

        if (config.debug())
        {
            if (plugin.getDebugBackground() != null)
            {
                renderImageLocation(graphics, overlay, plugin.getDebugBackground());
            }
        } else {
            if (plugin.getBackground() != null)
            {
                renderImageLocation(graphics, overlay, plugin.getBackground());
            }
        }

        renderTextLocation(graphics, title, TITLE, Color.YELLOW);
        renderTextLocation(graphics, points, config.points(), Color.YELLOW);

        renderSlots(graphics, overlay);

        return null;
    }

    public void renderSlots(Graphics2D graphics, Point overlay)
    {
        for (int i = config.unlockScroll(); i <= ThenWeFightPlugin.rawUnlockList.length; i++)
        {
            if (i >= config.unlockScroll() + 6) {
                break;
            }

            if (i >= ThenWeFightPlugin.rawUnlockList.length || ThenWeFightPlugin.rawUnlockList[i] == null) {
                continue;
            }

            String[] parsed = ThenWeFightPlugin.rawUnlockList[i].split(",");

            if (parsed == null || parsed.length != 4) {
                continue;
            }

            boolean unlocked = parsed[0].equalsIgnoreCase("y");
            boolean useItemImage = pluginUtils.isNumeric(parsed[1]);
            String points = parsed[2] + " Points";
            String title = parsed[3];
            int itemId = -1;

            if (useItemImage)
            {
                itemId = Integer.parseInt(parsed[1]);
            }

            renderSlot(graphics, overlay, i - config.unlockScroll() + 1, unlocked, title, points, useItemImage, itemId);
        }
    }

    public void renderSlot(Graphics2D graphics, Point overlay, int slot, boolean unlocked, String title, String price, boolean useItemImage, int itemId)
    {
        Point titlePoint = null;
        int iamgeWidth = config.unlockImageWidth();
        int imageHeight = config.unlockImageHeight();
        Image itemImage = null;
        Point imagePoint = null;
        Point pricePoint = null;

        switch(slot)
        {
            case 1:
                if (!title.equals(""))
                {
                    if (!useItemImage && plugin.getU1Custom() == null)
                    {
                        useItemImage = true;
                    }

                    titlePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(title)/ 2) + 90, overlay.y + graphics.getFontMetrics().getHeight() + 97);
                    itemImage = (useItemImage ? itemManager.getImage(itemId) : plugin.getU1Custom()).getScaledInstance(iamgeWidth, imageHeight, 1);
                    imagePoint = new Point(overlay.x + 88 - (iamgeWidth / 2), overlay.y + 72 - (imageHeight / 2));
                    pricePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(price)/ 2) + 90, overlay.y + graphics.getFontMetrics().getHeight() + 122);
                }
                break;
            case 2:
                if (!title.equals(""))
                {
                    if (!useItemImage && plugin.getU2Custom() == null)
                    {
                        useItemImage = true;
                    }

                    titlePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(title)/ 2) + 244, overlay.y + graphics.getFontMetrics().getHeight() + 97);
                    itemImage = (useItemImage ? itemManager.getImage(itemId) : plugin.getU2Custom()).getScaledInstance(iamgeWidth, imageHeight, 1);
                    imagePoint = new Point(overlay.x + 242 - (iamgeWidth / 2), overlay.y + 72 - (imageHeight / 2));
                    pricePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(price)/ 2) + 244, overlay.y + graphics.getFontMetrics().getHeight() + 122);
                }
                break;
            case 3:
                if (!title.equals(""))
                {
                    if (!useItemImage && plugin.getU3Custom() == null)
                    {
                        useItemImage = true;
                    }

                    titlePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(title)/ 2) + 398, overlay.y + graphics.getFontMetrics().getHeight() + 97);
                    itemImage = (useItemImage ? itemManager.getImage(itemId) : plugin.getU3Custom()).getScaledInstance(iamgeWidth, imageHeight, 1);
                    imagePoint = new Point(overlay.x + 396 - (iamgeWidth / 2), overlay.y + 72 - (imageHeight / 2));
                    pricePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(price)/ 2) + 398, overlay.y + graphics.getFontMetrics().getHeight() + 122);
                }
                break;
            case 4:
                if (!title.equals(""))
                {
                    if (!useItemImage && plugin.getU4Custom() == null)
                    {
                        useItemImage = true;
                    }

                    titlePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(title)/ 2) + 90, overlay.y + graphics.getFontMetrics().getHeight() + 227);
                    itemImage = (useItemImage ? itemManager.getImage(itemId) : plugin.getU4Custom()).getScaledInstance(iamgeWidth, imageHeight, 1);
                    imagePoint = new Point(overlay.x + 88 - (iamgeWidth / 2), overlay.y + 202 - (imageHeight / 2));
                    pricePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(price)/ 2) + 90, overlay.y + graphics.getFontMetrics().getHeight() + 252);
                }
                break;
            case 5:
                if (!title.equals(""))
                {
                    if (!useItemImage && plugin.getU5Custom() == null)
                    {
                        useItemImage = true;
                    }

                    titlePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(title)/ 2) + 244, overlay.y + graphics.getFontMetrics().getHeight() + 227);
                    itemImage = (useItemImage ? itemManager.getImage(itemId) : plugin.getU5Custom()).getScaledInstance(iamgeWidth, imageHeight, 1);
                    imagePoint = new Point(overlay.x + 242 - (iamgeWidth / 2), overlay.y + 202 - (imageHeight / 2));
                    pricePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(price)/ 2) + 244, overlay.y + graphics.getFontMetrics().getHeight() + 252);
                }
                break;
            case 6:
                if (!title.equals(""))
                {
                    if (!useItemImage && plugin.getU6Custom() == null)
                    {
                        useItemImage = true;
                    }

                    titlePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(title)/ 2) + 398, overlay.y + graphics.getFontMetrics().getHeight() + 227);
                    itemImage = (useItemImage ? itemManager.getImage(itemId) : plugin.getU6Custom()).getScaledInstance(iamgeWidth, imageHeight, 1);
                    imagePoint = new Point(overlay.x + 396 - (iamgeWidth / 2), overlay.y + 202 - (imageHeight / 2));
                    pricePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(price)/ 2) + 398, overlay.y + graphics.getFontMetrics().getHeight() + 252);
                }
                break;
        }

        if (title == null)
        {
            return;
        }

        renderTextLocation(graphics, titlePoint, title, unlocked ? Color.GREEN : Color.YELLOW);
        renderImageLocation(graphics, imagePoint, itemImage);
        renderTextLocation(graphics, pricePoint, price, unlocked ? Color.GREEN : Color.YELLOW);
    }

    public static void renderTextLocation(Graphics2D graphics, Point txtLoc, String text, Color color)
    {
        if (Strings.isNullOrEmpty(text))
        {
            return;
        }

        int x = (int) txtLoc.getX();
        int y = (int) txtLoc.getY();

        graphics.setColor(Color.BLACK);
        graphics.drawString(text, x + 1, y + 1);

        graphics.setColor(color);
        graphics.drawString(text, x, y);
    }

    public static void renderImageLocation(Graphics2D graphics, Point loc, Image image)
    {
        graphics.drawImage(image, loc.x, loc.y, null);
    }
}

package com.thenwefight.overlay;

import com.google.common.base.Strings;
import com.thenwefight.ThenWeFightConfig;
import com.thenwefight.ThenWeFightPlugin;
import com.thenwefight.utils.PluginUtils;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.awt.*;

@Slf4j
@Singleton
public
class ThenWeFightItemUnlockOverlay extends Overlay {

    @Inject
    private ItemManager itemManager;
    @Inject
    private PluginUtils pluginUtils;

    private final Client client;
    private final ThenWeFightConfig config;
    private final ThenWeFightPlugin plugin;

    private static final Font FONT = FontManager.getRunescapeFont().deriveFont(Font.BOLD, 16);
    private static final String TITLE = "Then We Fight Item Unlocks";


    @Inject
    private ThenWeFightItemUnlockOverlay(final Client client, final ThenWeFightConfig config, final ThenWeFightPlugin plugin) {
        super(plugin);
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
        this.client = client;
        this.config = config;
        this.plugin = plugin;
        this.setPosition(OverlayPosition.TOP_LEFT);
        this.setPriority(OverlayPriority.HIGHEST);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        graphics.setFont(FONT);

        if (!plugin.itemUnlockOverlayVisible)
        {
            return null;
        }

        Point overlay = new Point(config.overlayX(), config.overlayY());
        Point title = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(TITLE) / 2)  + 244, overlay.y + graphics.getFontMetrics().getHeight() + 9);
        Point points = new Point(overlay.x + 20, overlay.y + graphics.getFontMetrics().getHeight() + 9);

        if (config.debug())
        {
            if (plugin.getDebugBackground() != null)
            {
                renderImageLocation(graphics, overlay, plugin.getDebugBackground());
            }
        } else {
            if (plugin.getBackground() != null)
            {
                renderImageLocation(graphics, overlay, plugin.getBackground());
            }
        }

        renderTextLocation(graphics, title, TITLE, Color.YELLOW);
        renderTextLocation(graphics, points, config.points(), Color.YELLOW);

        renderSlots(graphics, overlay);

        return null;
    }

    public void renderSlots(Graphics2D graphics, Point overlay)
    {
        for (int i = config.itemUnlockScroll(); i <= ThenWeFightPlugin.rawItemUnlockList.length; i++)
        {
            if (i >= config.itemUnlockScroll() + 6) {
                break;
            }

            if (i >= ThenWeFightPlugin.rawItemUnlockList.length || ThenWeFightPlugin.rawItemUnlockList[i] == null) {
                continue;
            }

            String[] parsed = ThenWeFightPlugin.rawItemUnlockList[i].split(",");

            if (parsed == null || parsed.length != 4) {
                continue;
            }

            boolean unlocked = parsed[0].equalsIgnoreCase("y");
            boolean useItemImage = pluginUtils.isNumeric(parsed[1]);
            String points = parsed[2] + " Points";
            String title = parsed[3];
            int itemId = -1;

            if (useItemImage)
            {
                itemId = Integer.parseInt(parsed[1]);
            }

            renderSlot(graphics, overlay, i - config.itemUnlockScroll() + 1, unlocked, title, points, useItemImage, itemId);
        }
    }

    public void renderSlot(Graphics2D graphics, Point overlay, int slot, boolean unlocked, String title, String price, boolean useItemImage, int itemId)
    {
        Point titlePoint = null;
        int iamgeWidth = config.unlockImageWidth();
        int imageHeight = config.unlockImageHeight();
        Image itemImage = null;
        Point imagePoint = null;
        Point pricePoint = null;

        switch(slot)
        {
            case 1:
                if (!title.equals(""))
                {
                    if (!useItemImage && plugin.getIu1Custom() == null)
                    {
                        useItemImage = true;
                    }

                    titlePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(title)/ 2) + 90, overlay.y + graphics.getFontMetrics().getHeight() + 97);
                    itemImage = (useItemImage ? itemManager.getImage(itemId) : plugin.getIu1Custom()).getScaledInstance(iamgeWidth, imageHeight, 1);
                    imagePoint = new Point(overlay.x + 88 - (iamgeWidth / 2), overlay.y + 72 - (imageHeight / 2));
                    pricePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(price)/ 2) + 90, overlay.y + graphics.getFontMetrics().getHeight() + 122);
                }
                break;
            case 2:
                if (!title.equals(""))
                {
                    if (!useItemImage && plugin.getIu2Custom() == null)
                    {
                        useItemImage = true;
                    }

                    titlePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(title)/ 2) + 244, overlay.y + graphics.getFontMetrics().getHeight() + 97);
                    itemImage = (useItemImage ? itemManager.getImage(itemId) : plugin.getIu2Custom()).getScaledInstance(iamgeWidth, imageHeight, 1);
                    imagePoint = new Point(overlay.x + 242 - (iamgeWidth / 2), overlay.y + 72 - (imageHeight / 2));
                    pricePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(price)/ 2) + 244, overlay.y + graphics.getFontMetrics().getHeight() + 122);
                }
                break;
            case 3:
                if (!title.equals(""))
                {
                    if (!useItemImage && plugin.getIu3Custom() == null)
                    {
                        useItemImage = true;
                    }

                    titlePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(title)/ 2) + 398, overlay.y + graphics.getFontMetrics().getHeight() + 97);
                    itemImage = (useItemImage ? itemManager.getImage(itemId) : plugin.getIu3Custom()).getScaledInstance(iamgeWidth, imageHeight, 1);
                    imagePoint = new Point(overlay.x + 396 - (iamgeWidth / 2), overlay.y + 72 - (imageHeight / 2));
                    pricePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(price)/ 2) + 398, overlay.y + graphics.getFontMetrics().getHeight() + 122);
                }
                break;
            case 4:
                if (!title.equals(""))
                {
                    if (!useItemImage && plugin.getIu4Custom() == null)
                    {
                        useItemImage = true;
                    }

                    titlePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(title)/ 2) + 90, overlay.y + graphics.getFontMetrics().getHeight() + 227);
                    itemImage = (useItemImage ? itemManager.getImage(itemId) : plugin.getIu4Custom()).getScaledInstance(iamgeWidth, imageHeight, 1);
                    imagePoint = new Point(overlay.x + 88 - (iamgeWidth / 2), overlay.y + 202 - (imageHeight / 2));
                    pricePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(price)/ 2) + 90, overlay.y + graphics.getFontMetrics().getHeight() + 252);
                }
                break;
            case 5:
                if (!title.equals(""))
                {
                    if (!useItemImage && plugin.getIu5Custom() == null)
                    {
                        useItemImage = true;
                    }

                    titlePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(title)/ 2) + 244, overlay.y + graphics.getFontMetrics().getHeight() + 227);
                    itemImage = (useItemImage ? itemManager.getImage(itemId) : plugin.getIu5Custom()).getScaledInstance(iamgeWidth, imageHeight, 1);
                    imagePoint = new Point(overlay.x + 242 - (iamgeWidth / 2), overlay.y + 202 - (imageHeight / 2));
                    pricePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(price)/ 2) + 244, overlay.y + graphics.getFontMetrics().getHeight() + 252);
                }
                break;
            case 6:
                if (!title.equals(""))
                {
                    if (!useItemImage && plugin.getIu6Custom() == null)
                    {
                        useItemImage = true;
                    }

                    titlePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(title)/ 2) + 398, overlay.y + graphics.getFontMetrics().getHeight() + 227);
                    itemImage = (useItemImage ? itemManager.getImage(itemId) : plugin.getIu6Custom()).getScaledInstance(iamgeWidth, imageHeight, 1);
                    imagePoint = new Point(overlay.x + 396 - (iamgeWidth / 2), overlay.y + 202 - (imageHeight / 2));
                    pricePoint = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(price)/ 2) + 398, overlay.y + graphics.getFontMetrics().getHeight() + 252);
                }
                break;
        }

        if (title == null)
        {
            return;
        }

        renderTextLocation(graphics, titlePoint, title, unlocked ? Color.GREEN : Color.YELLOW);
        renderImageLocation(graphics, imagePoint, itemImage);
        renderTextLocation(graphics, pricePoint, price, unlocked ? Color.GREEN : Color.YELLOW);
    }

    public static void renderTextLocation(Graphics2D graphics, Point txtLoc, String text, Color color)
    {
        if (Strings.isNullOrEmpty(text))
        {
            return;
        }

        int x = (int) txtLoc.getX();
        int y = (int) txtLoc.getY();

        graphics.setColor(Color.BLACK);
        graphics.drawString(text, x + 1, y + 1);

        graphics.setColor(color);
        graphics.drawString(text, x, y);
    }

    public static void renderImageLocation(Graphics2D graphics, Point loc, Image image)
    {
        graphics.drawImage(image, loc.x, loc.y, null);
    }
}

package com.thenwefight.overlay;

import com.google.common.base.Strings;
import com.thenwefight.ThenWeFightConfig;
import com.thenwefight.ThenWeFightPlugin;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.awt.*;

@Slf4j
@Singleton
public
class ThenWeFightTaskOverlay extends Overlay {
    @Inject
    private ItemManager itemManager;

    private final Client client;
    private final ThenWeFightConfig config;
    private final ThenWeFightPlugin plugin;

    private static final Font FONT = FontManager.getRunescapeFont().deriveFont(Font.BOLD, 16);
    private static final String TITLE = "Then We Fight Tasks";


    @Inject
    private ThenWeFightTaskOverlay(final Client client, final ThenWeFightConfig config, final ThenWeFightPlugin plugin) {
        super(plugin);
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
        this.client = client;
        this.config = config;
        this.plugin = plugin;
        this.setPosition(OverlayPosition.TOP_LEFT);
        this.setPriority(OverlayPriority.HIGHEST);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        graphics.setFont(FONT);

        if (!plugin.taskOverlayVisible)
        {
            return null;
        }

        Point overlay = new Point(config.overlayX(), config.overlayY());
        Point title = new Point(overlay.x - (graphics.getFontMetrics().stringWidth(TITLE) / 2)  + 244, overlay.y + graphics.getFontMetrics().getHeight() + 9);
        Point points = new Point(overlay.x + 20, overlay.y + graphics.getFontMetrics().getHeight() + 9);

        if (config.debug())
        {
            if (plugin.getDebugBackground() != null)
            {
                renderImageLocation(graphics, overlay, plugin.getDebugBackground());
            }
        } else {
            if (plugin.getBackground() != null)
            {
                renderImageLocation(graphics, overlay, plugin.getBackground());
            }
        }

        renderTextLocation(graphics, title, TITLE, Color.YELLOW);
        renderTextLocation(graphics, points, config.points(), Color.YELLOW);

        for (int i = config.taskScroll(); i <= ThenWeFightPlugin.rawTaskList.length; i++)
        {
            if (i >= config.taskScroll() + 12)
            {
                break;
            }

            if (i >= ThenWeFightPlugin.rawTaskList.length || ThenWeFightPlugin.rawTaskList[i] == null)
            {
                continue;
            }

            String[] parsed = ThenWeFightPlugin.rawTaskList[i].split(",");

            if (parsed == null || parsed.length != 3)
            {
                continue;
            }

            boolean taskCompleted = parsed[0].equalsIgnoreCase("y");
            String taskPoints = parsed[1] + " pts";
            String taskName = parsed[2];
            Color colour = taskCompleted ? Color.GREEN : Color.YELLOW;
            String text = (taskCompleted ? "[x] " : "[  ] ") + taskPoints + " - " + taskName;
            int textLength = text.length();

            while (graphics.getFontMetrics().stringWidth(text) >= 465)
            {
                text = text.substring(0,text.length()-1);
            }

            if (textLength != text.length())
            {
                text = text.substring(0, text.length()-3) + "...";
            }

            Point point = new Point(20 + overlay.x, 40 +(20 * (i - config.taskScroll() + 1)) + overlay.y);

            renderTextLocation(graphics, point, text, colour);
        }

        return null;
    }

    public static void renderTextLocation(Graphics2D graphics, Point txtLoc, String text, Color color)
    {
        if (Strings.isNullOrEmpty(text))
        {
            return;
        }

        int x = (int) txtLoc.getX();
        int y = (int) txtLoc.getY();

        graphics.setColor(Color.BLACK);
        graphics.drawString(text, x + 1, y + 1);

        graphics.setColor(color);
        graphics.drawString(text, x, y);
    }

    public static void renderImageLocation(Graphics2D graphics, Point loc, Image image)
    {
        graphics.drawImage(image, loc.x, loc.y, null);
    }
}

package com.thenwefight.utils;

import com.thenwefight.ThenWeFightConfig;
import com.thenwefight.ThenWeFightPlugin;
import net.runelite.api.*;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.callback.ClientThread;

import javax.annotation.Nullable;
import javax.inject.Inject;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.stream.Collectors;

import static com.thenwefight.ThenWeFightPlugin.*;

public class GameUtils {

    @Inject
    private Client client;
    @Inject
    private ClientThread clientThread;
    @Inject
    private ThenWeFightPlugin plugin;
    @Inject
    private ThenWeFightConfig config;

    public Collection<NPC> getExcludedNpcs(Collection<String> names)
    {
        Collection<NPC> excludedNpcs = new ArrayList<>();

        for (NPC n : client.getNpcs())
        {
            if (n != null && n.getName() != null && !n.getName().equals("") && !names.contains(n.getName().toLowerCase()) && !npcs.contains(n))
            {
                excludedNpcs.add(n);
            }
        }

        return excludedNpcs;
    }

    public Collection<NPC> getIncludedNpcs(Collection<String> names)
    {
        Collection<NPC> includedNpcs = new ArrayList<>();

        for (NPC n : client.getNpcs())
        {
            if (n != null && n.getName() != null && !n.getName().equals("") && names.contains(n.getName().toLowerCase()) && !npcs.contains(n))
            {
                includedNpcs.add(n);
            }
        }

        return includedNpcs;
    }

    public Collection<GameObject> getGameObjects(String names)
    {
        Player local = client.getLocalPlayer();
        final Scene scene = client.getScene();
        final Tile[][][] tiles = scene.getTiles();
        Collection<GameObject> tileGameObjects = new ArrayList<>();

        for (Tile[] tiles1 : tiles[local.getWorldLocation().getPlane()])
        {
            for (Tile tile : tiles1)
            {
                if (tile == null)
                {
                    continue;
                }

                for (GameObject g : tile.getGameObjects())
                {
                    if (g == null || g.getWorldLocation().getPlane() != local.getWorldLocation().getPlane())
                    {
                        continue;
                    }

                    String name = getGameObjectName(g.getId());

                    if (name == null || name.equals(""))
                    {
                        continue;
                    }

                    if (names.contains(name) && !tileGameObjects.contains(g) && !gameObjects.contains(g))
                    {
                        tileGameObjects.add(g);
                    }
                }
            }
        }

        return tileGameObjects;
    }

    public Collection<WallObject> getWallObjects(String names)
    {
        Player local = client.getLocalPlayer();
        final Scene scene = client.getScene();
        final Tile[][][] tiles = scene.getTiles();
        Collection<WallObject> tileWallObjects = new ArrayList<>();

        for (Tile[] tiles1 : tiles[local.getWorldLocation().getPlane()])
        {
            for (Tile tile : tiles1)
            {
                if (tile == null)
                {
                    continue;
                }

                if (tile.getWallObject() == null || tile.getWallObject().getWorldLocation().getPlane() != local.getWorldLocation().getPlane())
                {
                    continue;
                }

                String name = getGameObjectName(tile.getWallObject().getId());

                if (name == null || name.equals(""))
                {
                    continue;
                }

                if (names.contains(name) && !tileWallObjects.contains(tile.getWallObject()) && !wallObjects.contains(tile.getWallObject()))
                {
                    tileWallObjects.add(tile.getWallObject());
                }
            }
        }

        return tileWallObjects;
    }

    public Collection<GroundObject> getGroundObjects(String names)
    {
        Player local = client.getLocalPlayer();
        final Scene scene = client.getScene();
        final Tile[][][] tiles = scene.getTiles();
        Collection<GroundObject> tileGroundObjects = new ArrayList<>();

        for (Tile[] tiles1 : tiles[local.getWorldLocation().getPlane()])
        {
            for (Tile tile : tiles1)
            {
                if (tile == null || tile.getGroundObject() == null || tile.getGroundObject().getWorldLocation().getPlane() != local.getWorldLocation().getPlane())
                {
                    continue;
                }

                String name = getGameObjectName(tile.getGroundObject().getId());

                if (name == null || name.equals(""))
                {
                    continue;
                }

                if (names.contains(name) && !tileGroundObjects.contains(tile.getGroundObject()) && !groundObjects.contains(tile.getGroundObject()))
                {
                    tileGroundObjects.add(tile.getGroundObject());
                }
            }
        }

        return tileGroundObjects;
    }

    @Nullable
    public ObjectComposition getObjectComposition(int id)
    {
        ObjectComposition objectComposition = client.getObjectDefinition(id);
        return objectComposition.getImpostorIds() == null ? objectComposition : objectComposition.getImpostor();
    }

    public String getGameObjectName(int id)
    {
        ObjectComposition objectComposition = getObjectComposition(id);

        if (objectComposition == null || objectComposition.getName() == null || objectComposition.getName().equals(""))
        {
            return "";
        }

        return objectComposition.getName().toLowerCase();
    }

    public Collection<Widget> getAllItems()
    {
        Widget inventory = client.getWidget(WidgetInfo.INVENTORY);

        if (inventory == null)
        {
            return null;
        }

        if (isWidgetInventoryContainer(inventory) && inventory.isHidden())
        {
            refreshInventory();
        }

        Widget[] inventoryItems = inventory.getChildren();

        if (inventoryItems == null || inventoryItems.length == 0)
        {
            return null;
        }

        return Arrays.stream(inventoryItems).collect(Collectors.toList());
    }

    public boolean isWidgetInventoryContainer(Widget widget)
    {
        Widget inventory = client.getWidget(WidgetInfo.INVENTORY);
        return widget != null && inventory != null && widget.getId() == inventory.getId();
    }

    public void refreshInventory()
    {
        if (!client.isClientThread())
        {
            clientThread.invokeLater(() -> client.runScript(6009, WidgetInfo.INVENTORY.getId(), 28, 1, -1));
            return;
        }

        client.runScript(6009, WidgetInfo.INVENTORY.getId(), 28, 1, -1);
    }
}

package com.thenwefight.utils;

import com.thenwefight.ThenWeFightConfig;
import com.thenwefight.ThenWeFightPlugin;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.kit.KitType;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.ItemManager;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.Text;

import javax.imageio.ImageIO;
import javax.inject.Inject;
import java.io.File;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import static com.thenwefight.ThenWeFightPlugin.*;
import static com.thenwefight.ThenWeFightPlugin.IU_6_CUSTOM_DIR;

@Slf4j
public class PluginUtils {

    @Inject
    private Client client;
    @Inject
    private ClientThread clientThread;
    @Inject
    private ThenWeFightPlugin plugin;
    @Inject
    private ThenWeFightConfig config;
    @Inject
    private ConfigManager configManager;
    @Inject
    private ItemManager itemManager;
    @Inject
    private GameUtils gameUtils;

    public void setCustomUnlockImageFilePaths()
    {
        int unlockListLength = rawUnlockList.length;
        int scroll = config.unlockScroll();

        if (unlockListLength >= 1)
        {
            String path1 = rawUnlockList[scroll].split(",")[1];

            if (!isNumeric(path1))
            {
                U_1_CUSTOM_DIR = new File(THEN_WE_FIGHT_FOLDER + File.separator + path1);
            }
        }

        if (unlockListLength >= 2)
        {
            String path2 = rawUnlockList[scroll + 1].split(",")[1];

            if (!isNumeric(path2))
            {
                U_2_CUSTOM_DIR = new File(THEN_WE_FIGHT_FOLDER + File.separator + path2);
            }
        }

        if (unlockListLength >= 3)
        {
            String path3 = rawUnlockList[scroll + 2].split(",")[1];

            if (!isNumeric(path3))
            {
                U_3_CUSTOM_DIR = new File(THEN_WE_FIGHT_FOLDER + File.separator + path3);
            }
        }

        if (unlockListLength >= 4)
        {
            String path4 = rawUnlockList[scroll + 3].split(",")[1];

            if (!isNumeric(path4))
            {
                U_4_CUSTOM_DIR = new File(THEN_WE_FIGHT_FOLDER + File.separator + path4);
            }
        }

        if (unlockListLength >= 5)
        {
            String path5 = rawUnlockList[scroll + 4].split(",")[1];

            if (!isNumeric(path5))
            {
                U_5_CUSTOM_DIR = new File(THEN_WE_FIGHT_FOLDER + File.separator + path5);
            }
        }

        if (unlockListLength >= 6)
        {
            String path6 = rawUnlockList[scroll + 5].split(",")[1];

            if (!isNumeric(path6))
            {
                U_6_CUSTOM_DIR = new File(THEN_WE_FIGHT_FOLDER + File.separator + path6);
            }
        }

        loadCustomUnlockImages();
    }

    public void loadCustomUnlockImages()
    {
        int imageWidth = config.unlockImageWidth();
        int imageHeight = config.unlockImageHeight();

        if (U_1_CUSTOM_DIR.exists())
        {
            try
            {
                synchronized (ImageIO.class)
                {
                    plugin.u1Custom = ImageIO.read(U_1_CUSTOM_DIR).getScaledInstance(imageWidth, imageHeight, 1);
                }
            }
            catch (Exception e)
            {
                log.error("thenwefightplugin: error setting custom task 1 image", e);
            }
        } else {
            log.error("thenwefightplugin: error cannot find image in " + U_1_CUSTOM_DIR.getAbsolutePath());
            plugin.u1Custom = null;
        }

        if (U_2_CUSTOM_DIR.exists())
        {
            try
            {
                synchronized (ImageIO.class)
                {
                    plugin.u2Custom = ImageIO.read(U_2_CUSTOM_DIR).getScaledInstance(imageWidth, imageHeight, 1);
                }
            }
            catch (Exception e)
            {
                log.error("thenwefightplugin: error setting custom task 2 image", e);
            }
        } else {
            log.error("thenwefightplugin: error cannot find image in " + U_2_CUSTOM_DIR.getAbsolutePath());
            plugin.u2Custom = null;
        }

        if (U_3_CUSTOM_DIR.exists())
        {
            try
            {
                synchronized (ImageIO.class)
                {
                    plugin.u3Custom = ImageIO.read(U_3_CUSTOM_DIR).getScaledInstance(imageWidth, imageHeight, 1);
                }
            }
            catch (Exception e)
            {
                log.error("thenwefightplugin: error setting custom task 3 image", e);
            }
        } else {
            log.error("thenwefightplugin: error cannot find image in " + U_3_CUSTOM_DIR.getAbsolutePath());
            plugin.u3Custom = null;
        }

        if (U_4_CUSTOM_DIR.exists())
        {
            try
            {
                synchronized (ImageIO.class)
                {
                    plugin.u4Custom = ImageIO.read(U_4_CUSTOM_DIR).getScaledInstance(imageWidth, imageHeight, 1);
                }
            }
            catch (Exception e)
            {
                log.error("thenwefightplugin: error setting custom task 4 image", e);
            }
        } else {
            log.error("thenwefightplugin: error cannot find image in " + U_4_CUSTOM_DIR.getAbsolutePath());
            plugin.u4Custom = null;
        }

        if (U_5_CUSTOM_DIR.exists())
        {
            try
            {
                synchronized (ImageIO.class)
                {
                    plugin.u5Custom = ImageIO.read(U_5_CUSTOM_DIR).getScaledInstance(imageWidth, imageHeight, 1);
                }
            }
            catch (Exception e)
            {
                log.error("thenwefightplugin: error setting custom task 5 image", e);
            }
        } else {
            log.error("thenwefightplugin: error cannot find image in " + U_5_CUSTOM_DIR.getAbsolutePath());

            plugin.u5Custom = null;
        }

        if (U_6_CUSTOM_DIR.exists())
        {
            try
            {
                synchronized (ImageIO.class)
                {
                    plugin.u6Custom = ImageIO.read(U_6_CUSTOM_DIR).getScaledInstance(imageWidth, imageHeight, 1);
                }
            }
            catch (Exception e)
            {
                log.error("thenwefightplugin: error setting custom task 6 image", e);
            }
        } else {
            log.error("thenwefightplugin: error cannot find image in " + U_6_CUSTOM_DIR.getAbsolutePath());
            plugin.u6Custom = null;
        }
    }

    public void setCustomItemUnlockImageFilePaths()
    {
        int unlockListLength = rawItemUnlockList.length;
        int scroll = config.itemUnlockScroll();

        if (unlockListLength >= 1)
        {
            String path1 = rawItemUnlockList[scroll].split(",")[1];

            if (!isNumeric(path1))
            {
                IU_1_CUSTOM_DIR = new File(THEN_WE_FIGHT_FOLDER + File.separator + path1);
            }
        }

        if (unlockListLength >= 2)
        {
            String path2 = rawItemUnlockList[scroll + 1].split(",")[1];

            if (!isNumeric(path2))
            {
                IU_2_CUSTOM_DIR = new File(THEN_WE_FIGHT_FOLDER + File.separator + path2);
            }
        }

        if (unlockListLength >= 3)
        {
            String path3 = rawItemUnlockList[scroll + 2].split(",")[1];

            if (!isNumeric(path3))
            {
                IU_3_CUSTOM_DIR = new File(THEN_WE_FIGHT_FOLDER + File.separator + path3);
            }
        }

        if (unlockListLength >= 4)
        {
            String path4 = rawItemUnlockList[scroll + 3].split(",")[1];

            if (!isNumeric(path4))
            {
                IU_4_CUSTOM_DIR = new File(THEN_WE_FIGHT_FOLDER + File.separator + path4);
            }
        }

        if (unlockListLength >= 5)
        {
            String path5 = rawItemUnlockList[scroll + 4].split(",")[1];

            if (!isNumeric(path5))
            {
                IU_5_CUSTOM_DIR = new File(THEN_WE_FIGHT_FOLDER + File.separator + path5);
            }
        }

        if (unlockListLength >= 6)
        {
            String path6 = rawItemUnlockList[scroll + 5].split(",")[1];

            if (!isNumeric(path6))
            {
                IU_6_CUSTOM_DIR = new File(THEN_WE_FIGHT_FOLDER + File.separator + path6);
            }
        }

        loadCustomItemUnlockImages();
    }

    public void loadCustomItemUnlockImages()
    {
        int imageWidth = config.unlockImageWidth();
        int imageHeight = config.unlockImageHeight();

        if (IU_1_CUSTOM_DIR.exists())
        {
            try
            {
                synchronized (ImageIO.class)
                {
                    plugin.iu1Custom = ImageIO.read(IU_1_CUSTOM_DIR).getScaledInstance(imageWidth, imageHeight, 1);
                }
            }
            catch (Exception e)
            {
                log.error("thenwefightplugin: error setting custom task 1 image", e);
            }
        } else {
            log.error("thenwefightplugin: error cannot find image in " + IU_1_CUSTOM_DIR.getAbsolutePath());
            plugin.iu1Custom = null;
        }

        if (IU_2_CUSTOM_DIR.exists())
        {
            try
            {
                synchronized (ImageIO.class)
                {
                    plugin.iu2Custom = ImageIO.read(IU_2_CUSTOM_DIR).getScaledInstance(imageWidth, imageHeight, 1);
                }
            }
            catch (Exception e)
            {
                log.error("thenwefightplugin: error setting custom task 2 image", e);
            }
        } else {
            log.error("thenwefightplugin: error cannot find image in " + IU_2_CUSTOM_DIR.getAbsolutePath());
            plugin.iu2Custom = null;
        }

        if (IU_3_CUSTOM_DIR.exists())
        {
            try
            {
                synchronized (ImageIO.class)
                {
                    plugin.iu3Custom = ImageIO.read(IU_3_CUSTOM_DIR).getScaledInstance(imageWidth, imageHeight, 1);
                }
            }
            catch (Exception e)
            {
                log.error("thenwefightplugin: error setting custom task 3 image", e);
            }
        } else {
            log.error("thenwefightplugin: error cannot find image in " + IU_3_CUSTOM_DIR.getAbsolutePath());
            plugin.iu3Custom = null;
        }

        if (IU_4_CUSTOM_DIR.exists())
        {
            try
            {
                synchronized (ImageIO.class)
                {
                    plugin.iu4Custom = ImageIO.read(IU_4_CUSTOM_DIR).getScaledInstance(imageWidth, imageHeight, 1);
                }
            }
            catch (Exception e)
            {
                log.error("thenwefightplugin: error setting custom task 4 image", e);
            }
        } else {
            log.error("thenwefightplugin: error cannot find image in " + IU_4_CUSTOM_DIR.getAbsolutePath());
            plugin.iu4Custom = null;
        }

        if (IU_5_CUSTOM_DIR.exists())
        {
            try
            {
                synchronized (ImageIO.class)
                {
                    plugin.iu5Custom = ImageIO.read(IU_5_CUSTOM_DIR).getScaledInstance(imageWidth, imageHeight, 1);
                }
            }
            catch (Exception e)
            {
                log.error("thenwefightplugin: error setting custom task 5 image", e);
            }
        } else {
            log.error("thenwefightplugin: error cannot find image in " + IU_5_CUSTOM_DIR.getAbsolutePath());

            plugin.iu5Custom = null;
        }

        if (IU_6_CUSTOM_DIR.exists())
        {
            try
            {
                synchronized (ImageIO.class)
                {
                    plugin.iu6Custom = ImageIO.read(IU_6_CUSTOM_DIR).getScaledInstance(imageWidth, imageHeight, 1);
                }
            }
            catch (Exception e)
            {
                log.error("thenwefightplugin: error setting custom task 6 image", e);
            }
        } else {
            log.error("thenwefightplugin: error cannot find image in " + IU_6_CUSTOM_DIR.getAbsolutePath());
            plugin.iu6Custom = null;
        }
    }

    public void loadResources()
    {
        try {
            plugin.background = ImageUtil.loadImageResource(plugin.getClass(), BACKGROUND_PATH);
            plugin.debugBackground = ImageUtil.loadImageResource(plugin.getClass(), DEBUG_PATH);
            plugin.runOrb = ImageUtil.loadImageResource(plugin.getClass(), RUN_PATH);
            plugin.specOrb = ImageUtil.loadImageResource(plugin.getClass(), SPEC_PATH);
            plugin.healthOrb = ImageUtil.loadImageResource(plugin.getClass(), HEALTH_PATH);
            plugin.prayerOrb = ImageUtil.loadImageResource(plugin.getClass(), PRAYER_PATH);
        } catch (Exception e){
            log.error("thenwefightplugin, error loading image resources", e);
        }
    }

    public void updateItemList()
    {
        unlockedItems.clear();
        unlockedItems.addAll(stringToIntList(config.unlockedItems()));
    }

    public void updateNpcList()
    {
        unlockedNpcs.clear();
        unlockedNpcs.addAll(Text.fromCSV(Text.standardize(config.unlockedNpcs())));

        if (client.getGameState().equals(GameState.LOGGED_IN))
        {
            clientThread.invoke(this::updateNpcs);
        }
    }

    public void updateWidgetList()
    {
        lockedWidgets.clear();
        lockedWidgets.addAll(stringToIntList(config.lockedWidgets()));
    }

    public void updateGameObjectList()
    {
        lockedObjects.clear();
        lockedObjects.addAll(Text.fromCSV(Text.standardize(config.lockedGameObjects())));

        if (client.getGameState().equals(GameState.LOGGED_IN))
        {
            clientThread.invoke(this::updateGameObjects);
        }
    }

    public void updateTaskList()
    {
        String raw = config.taskList();
        rawTaskList = raw.split("\n");
    }

    public void updateUnlockList()
    {
        String raw = config.unlockList();
        rawUnlockList = raw.split("\n");
    }

    public void updateItemUnlockList()
    {
        String raw = config.itemUnlockList();
        rawItemUnlockList = raw.split("\n");
    }

    public void updateGameObjects()
    {
        gameObjects.clear();
        wallObjects.clear();
        groundObjects.clear();

        if (config.lockGameObjects())
        {
            for (String s : lockedObjects)
            {
                gameObjects.addAll(gameUtils.getGameObjects(s));
                wallObjects.addAll(gameUtils.getWallObjects(s));
                groundObjects.addAll(gameUtils.getGroundObjects(s));
            }
        }

        if (config.lockBanks())
        {
            for (String s : BANK_OBJECT_NAMES)
            {
                gameObjects.addAll(gameUtils.getGameObjects(s));
                wallObjects.addAll(gameUtils.getWallObjects(s));
                groundObjects.addAll(gameUtils.getGroundObjects(s));
            }
        }

        if (config.lockUnderground())
        {
            for (String s : UNDERGROUND_OBJECT_NAMES)
            {
                gameObjects.addAll(gameUtils.getGameObjects(s));
                wallObjects.addAll(gameUtils.getWallObjects(s));
                groundObjects.addAll(gameUtils.getGroundObjects(s));
            }
        }

        if (config.lockDoors())
        {
            for (String s : DOOR_OBJECT_NAMES)
            {
                gameObjects.addAll(gameUtils.getGameObjects(s));
                wallObjects.addAll(gameUtils.getWallObjects(s));
                groundObjects.addAll(gameUtils.getGroundObjects(s));
            }
        }

        if (config.lockStairs())
        {
            for (String s : STAIRS_OBJECT_NAMES)
            {
                gameObjects.addAll(gameUtils.getGameObjects(s));
                wallObjects.addAll(gameUtils.getWallObjects(s));
                groundObjects.addAll(gameUtils.getGroundObjects(s));
            }
        }
    }

    public void updateNpcs()
    {
        npcs.clear();

        if (config.unlockNpcs())
        {
            npcs.addAll(gameUtils.getExcludedNpcs(unlockedNpcs));
        }

        if (config.lockBanks())
        {
            npcs.addAll(gameUtils.getIncludedNpcs(BANK_NPC_NAMES));
        }
    }

    public void unlockAllItems(MenuEntry entry)
    {
        for (Widget w : gameUtils.getAllItems())
        {
            int id = w.getItemId();

            if (id == -1 || id == 6512 || id == 0)
            {
                continue;
            }

            if (!unlockedItems.contains(id))
            {
                unlockedItems.add(id);
            }
        }

        configManager.setConfiguration("thenwefight", "unlockedItems", unlockedItems.toString().replace(" ", "").replace("[", "").replace("]", ""));
    }

    public void lockAllItems(MenuEntry entry)
    {
        for (Widget w : gameUtils.getAllItems())
        {
            int id = w.getItemId();

            if (id == -1 || id == 6512 || id == 0)
            {
                continue;
            }

            if (unlockedItems.contains(id))
            {
                unlockedItems.remove((Integer) id);
            }
        }

        configManager.setConfiguration("thenwefight", "unlockedItems", unlockedItems.toString().replace(" ", "").replace("[", "").replace("]", ""));
    }

    public void unlockAllFood(MenuEntry entry)
    {
        for (Widget w : gameUtils.getAllItems())
        {
            int id = w.getItemId();

            if (id == -1 || id == 6512 || id == 0)
            {
                continue;
            }

            ItemComposition ic = itemManager.getItemComposition(id);

            if (ic != null)
            {
                for (String s : ic.getInventoryActions())
                {
                    if (s == null || s.equals(""))
                    {
                        continue;
                    }

                    if ((EAT_OPTIONS.contains(s.toLowerCase()) || DRINK_OPTIONS.contains(s.toLowerCase())) && !unlockedItems.contains(id))
                    {
                        unlockedItems.add(id);
                    }
                }
            }
        }

        configManager.setConfiguration("thenwefight", "unlockedItems", unlockedItems.toString().replace(" ", "").replace("[", "").replace("]", ""));
    }

    public void lockAllFood(MenuEntry entry)
    {
        for (Widget w : gameUtils.getAllItems())
        {
            int id = w.getItemId();

            if (id == -1 || id == 6512 || id == 0)
            {
                continue;
            }

            ItemComposition ic = itemManager.getItemComposition(id);

            if (ic != null)
            {
                for (String s : ic.getInventoryActions())
                {
                    if (s == null || s.equals(""))
                    {
                        continue;
                    }

                    if ((EAT_OPTIONS.contains(s.toLowerCase()) || DRINK_OPTIONS.contains(s.toLowerCase())) && unlockedItems.contains(id))
                    {
                        unlockedItems.remove((Integer) id);
                    }
                }
            }
        }

        configManager.setConfiguration("thenwefight", "unlockedItems", unlockedItems.toString().replace(" ", "").replace("[", "").replace("]", ""));
    }

    public void unlockAllEquipment(MenuEntry entry)
    {
        Player local = client.getLocalPlayer();

        if (local == null)
        {
            return;
        }

        for (KitType kitType : KitType.values())
        {
            if (local.getPlayerComposition() == null)
            {
                continue;
            }

            final int itemId = local.getPlayerComposition().getEquipmentId(kitType);

            if (itemId == -1 || itemId == 6512 || itemId == 0)
            {
                continue;
            }

            if (!unlockedItems.contains(itemId))
            {
                unlockedItems.add(itemId);
            }
        }

        configManager.setConfiguration("thenwefight", "unlockedItems", unlockedItems.toString().replace(" ", "").replace("[", "").replace("]", ""));
    }

    public void lockAllEquipment(MenuEntry entry)
    {
        Player local = client.getLocalPlayer();

        if (local == null)
        {
            return;
        }

        for (KitType kitType : KitType.values())
        {
            if (local.getPlayerComposition() == null)
            {
                continue;
            }

            final int itemId = local.getPlayerComposition().getEquipmentId(kitType);

            if (itemId == -1 || itemId == 6512 || itemId == 0)
            {
                continue;
            }

            if (unlockedItems.contains(itemId))
            {
                unlockedItems.remove((Integer) itemId);
            }
        }

        configManager.setConfiguration("thenwefight", "unlockedItems", unlockedItems.toString().replace(" ", "").replace("[", "").replace("]", ""));
    }

    public List<Integer> stringToIntList(String string)
    {
        return (string == null || string.trim().equals("")) ? Arrays.asList(0) :
                Arrays.stream(string.split(",")).map(String::trim).map(Integer::parseInt).collect(Collectors.toList());
    }

    public boolean isNumeric(String strNum)
    {
        if (strNum == null) {
            return false;
        }
        try {
            double d = Double.parseDouble(strNum);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }
}

package com.thenwefight;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("thenwefight")
public interface ThenWeFightConfig extends Config
{
	@ConfigItem(
			name = "Points",
			description = "Points to write in overlayus",
			position = 1,
			keyName = "points"
	)
	default String points() { return "Points: 0"; }

	// OVERLAY SETTINGS

	@ConfigSection(
			name = "Overlay Settings",
			description = "Overlay",
			position = 3,
			closedByDefault = true
	)
	String overlay = "Overlay Settings";


	@Alpha
	@ConfigItem(
			keyName = "gameOverlayColour",
			name = "Game Overlay Colour",
			description = "Colour of overlays that are drawn within the game frame",
			position = 1,
			section = overlay
	)
	default Color gameOverlayColour()
	{
		return Color.GRAY;
	}

	@Alpha
	@ConfigItem(
			keyName = "uiOverlayColour",
			name = "UI Overlay Colour",
			description = "Colour of overlays that are drawn on the UI",
			position = 2,
			section = overlay
	)
	default Color uiOverlayColour()
	{
		return Color.GRAY;
	}

	@Range(
			min = 0,
			max = 255
	)
	@ConfigItem(
			position = 3,
			keyName = "opacity",
			name = "Opacity",
			description = "Overlay Opacity, ranging from 0-255 as an alpha value",
			section = overlay
	)
	default int opacity() { return 100; }

	@ConfigItem(
			name = "Debug Mode",
			description = "Debug overlay",
			position = 7,
			keyName = "debug",
			section = overlay
	)
	default boolean debug() { return false; }

	@ConfigItem(
			name = "Overlay X Offset",
			description = "Horizontal pixels to offset overlay rendering by",
			position = 10,
			keyName = "overlayX",
			section = overlay
	)
	default int overlayX() { return 100; }

	@ConfigItem(
			name = "Overlay Y Offset",
			description = "Vertical pixels to offset overlay rendering by",
			position = 20,
			keyName = "overlayY",
			section = overlay
	)
	default int overlayY() { return 100; }

	@ConfigItem(
			name = "Unlock Image Width",
			description = "Width of each unlock image",
			position = 30,
			keyName = "unlockImageWidth",
			section = overlay
	)
	default int unlockImageWidth() { return 36; }

	@ConfigItem(
			name = "Unlock Image Height",
			description = "Height of each unlock image",
			position = 40,
			keyName = "unlockImageHeight",
			section = overlay
	)
	default int unlockImageHeight() { return 32; }

	//FEATURE SETTINGS

	@ConfigSection(
			name = "Feature Settings",
			description = "Feature",
			position = 5,
			closedByDefault = true
	)
	String feature = "Feature Settings";

	@ConfigItem(
			name = "Unlock Custom NPCs",
			description = "Enable Greying out NPCs by name if they are not unlocked",
			position = 5,
			keyName = "unlockNpcs",
			section = feature
	)
	default boolean unlockNpcs() { return true; }

	@ConfigItem(
			name = "Unlocked NPCS",
			description = "NPC names that are unlocked, separated by commas, not case sensitive",
			position = 10,
			keyName = "unlockedNpcs",
			section = feature
	)
	default String unlockedNpcs() { return "man,woman"; }

	@ConfigItem(
			name = "Unlock Items",
			description = "Enable Greying out Items by ID if they are not unlocked",
			position = 15,
			keyName = "unlockItems",
			section = feature
	)
	default boolean unlockItems() { return true; }

	@ConfigItem(
			name = "Unlocked Items",
			description = "Item IDs that are unlocked, separated by commas, not case sensitive",
			position = 20,
			keyName = "unlockedItems",
			section = feature
	)
	default String unlockedItems() { return "0,0"; }

	@ConfigItem(
			name = "Lock Custom Game Objects",
			description = "Enable Greying out Game Objects by name if they are locked",
			position = 35,
			keyName = "lockGameObjects",
			section = feature
	)
	default boolean lockGameObjects() { return true; }

	@ConfigItem(
			name = "Locked Game Objects",
			description = "Game Object names that are locked, separated by commas, not case sensitive",
			position = 40,
			keyName = "lockedGameObjects",
			section = feature
	)
	default String lockedGameObjects() { return "stairs,door"; }

	@ConfigItem(
			name = "Lock Custom Widgets",
			description = "Enable Greying out Widgets by ID if they are locked",
			position = 42,
			keyName = "lockWidgets",
			section = feature
	)
	default boolean lockWidgets() { return true; }

	@ConfigItem(
			name = "Locked Widgets",
			description = "Widget IDs that are locked, separated by commas, not case sensitive",
			position = 43,
			keyName = "lockedWidgets",
			section = feature
	)
	default String lockedWidgets() { return "0,0"; }

	@ConfigItem(
			name = "Lock Coins",
			description = "Enable Greying out coins",
			position = 45,
			keyName = "lockCoins",
			section = feature
	)
	default boolean lockCoins() { return true; }

	@ConfigItem(
			name = "Lock Attacking",
			description = "Enable Greying out Attacking",
			position = 50,
			keyName = "lockAttacking",
			section = feature
	)
	default boolean lockAttacking() { return true; }

	@ConfigItem(
			name = "Lock Drinking",
			description = "Enable Greying out Drinking",
			position = 55,
			keyName = "lockDrinking",
			section = feature
	)
	default boolean lockDrinking() { return true; }

	@ConfigItem(
			name = "Lock Eating",
			description = "Enable Greying out Eating",
			position = 60,
			keyName = "lockEating",
			section = feature
	)
	default boolean lockEating() { return true; }

	@ConfigItem(
			name = "Lock Teles",
			description = "Enable Greying out Teles",
			position = 65,
			keyName = "lockTeles",
			section = feature
	)
	default boolean lockTeles() { return true; }

	@ConfigItem(
			name = "Lock Banks",
			description = "Enable Greying out banks and bankers",
			position = 70,
			keyName = "lockBanks",
			section = feature
	)
	default boolean lockBanks() { return true; }

	@ConfigItem(
			name = "Lock Underground",
			description = "Enable Greying out trapdoors",
			position = 75,
			keyName = "lockUnderground",
			section = feature
	)
	default boolean lockUnderground() { return true; }

	@ConfigItem(
			name = "Lock Run Energy",
			description = "Enable Greying out run energy orb",
			position = 115,
			keyName = "lockRunEnergy",
			section = feature
	)
	default boolean lockRunEnergy() { return true; }

//	@ConfigItem(
//			name = "Lock Prayers",
//			description = "Enable Greying out prayer orb and prayer book",
//			position = 120,
//			keyName = "lockPrayers",
//			section = feature
//	)
//	default boolean lockPrayers() { return true; }

	@ConfigItem(
			name = "Lock Special Attack",
			description = "Enable Greying out spec orb and spec bar",
			position = 125,
			keyName = "lockSpec",
			section = feature
	)
	default boolean lockSpec() { return true; }

//	@ConfigItem(
//			name = "Lock HP Orb",
//			description = "Enable Greying out HP Orb",
//			position = 130,
//			keyName = "lockHpOrb",
//			section = feature
//	)
//	default boolean lockHpOrb() { return true; }

	@ConfigItem(
			name = "Lock Emotes",
			description = "Enable Greying out Emotes Orb",
			position = 135,
			keyName = "lockEmotes",
			section = feature
	)
	default boolean lockEmotes() { return true; }

	@ConfigItem(
			name = "Lock Doors",
			description = "Enable Greying out Doors",
			position = 140,
			keyName = "lockDoors",
			section = feature
	)
	default boolean lockDoors() { return true; }

	@ConfigItem(
			name = "Lock Stairs",
			description = "Enable Greying out Stairs",
			position = 143,
			keyName = "lockStairs",
			section = feature
	)
	default boolean lockStairs() { return true; }

	@ConfigItem(
			name = "Lock World Hopping",
			description = "Enable Greying out World Hopping",
			position = 145,
			keyName = "lockHopping",
			section = feature
	)
	default boolean lockHopping() { return true; }

	// UNLOCK SKILLS TAB

	@ConfigSection(
			name = "Unlock Skills",
			description = "Unlock Skills",
			position = 10,
			closedByDefault = true
	)
	String unlockSkills = "Unlock Skills";

	@ConfigItem(
			name = "Lock Attack",
			description = "Enable Greying out attack skill",
			position = 10,
			keyName = "lockAttack",
			section = unlockSkills
	)
	default boolean lockAttack() { return true; }

	@ConfigItem(
			name = "Lock Strength",
			description = "Enable Greying out strength skill",
			position = 20,
			keyName = "lockStrength",
			section = unlockSkills
	)
	default boolean lockStrength() { return true; }

	@ConfigItem(
			name = "Lock Defence",
			description = "Enable Greying out defence skill",
			position = 30,
			keyName = "lockDefence",
			section = unlockSkills
	)
	default boolean lockDefence() { return true; }

	@ConfigItem(
			name = "Lock Range",
			description = "Enable Greying out range skill",
			position = 40,
			keyName = "lockRange",
			section = unlockSkills
	)
	default boolean lockRange() { return true; }

	@ConfigItem(
			name = "Lock Prayer",
			description = "Enable Greying out prayer skill",
			position = 50,
			keyName = "lockPrayer",
			section = unlockSkills
	)
	default boolean lockPrayer() { return true; }

	@ConfigItem(
			name = "Lock Magic",
			description = "Enable Greying out magic skill",
			position = 60,
			keyName = "lockMagic",
			section = unlockSkills
	)
	default boolean lockMagic() { return true; }

	@ConfigItem(
			name = "Lock Runecrafting",
			description = "Enable Greying out runecrafting skill",
			position = 70,
			keyName = "lockRunecrafting",
			section = unlockSkills
	)
	default boolean lockRunecrafting() { return true; }

	@ConfigItem(
			name = "Lock Construction",
			description = "Enable Greying out construction skill",
			position = 80,
			keyName = "lockConstruction",
			section = unlockSkills
	)
	default boolean lockConstruction() { return true; }

	@ConfigItem(
			name = "Lock Hitpoints",
			description = "Enable Greying out hitpoints skill",
			position = 90,
			keyName = "lockHitpoints",
			section = unlockSkills
	)
	default boolean lockHitpoints() { return true; }

	@ConfigItem(
			name = "Lock Agility",
			description = "Enable Greying out agility skill",
			position = 100,
			keyName = "lockAgility",
			section = unlockSkills
	)
	default boolean lockAgility() { return true; }

	@ConfigItem(
			name = "Lock Herblore",
			description = "Enable Greying out herblore skill",
			position = 110,
			keyName = "lockHerblore",
			section = unlockSkills
	)
	default boolean lockHerblore() { return true; }

	@ConfigItem(
			name = "Lock Thieving",
			description = "Enable Greying out thieving skill",
			position = 120,
			keyName = "lockThieving",
			section = unlockSkills
	)
	default boolean lockThieving() { return true; }

	@ConfigItem(
			name = "Lock Crafting",
			description = "Enable Greying out crafting skill",
			position = 130,
			keyName = "lockCrafting",
			section = unlockSkills
	)
	default boolean lockCrafting() { return true; }

	@ConfigItem(
			name = "Lock Fletching",
			description = "Enable Greying out fletching skill",
			position = 140,
			keyName = "lockFletching",
			section = unlockSkills
	)
	default boolean lockFletching() { return true; }

	@ConfigItem(
			name = "Lock Slayer",
			description = "Enable Greying out slayer skill",
			position = 150,
			keyName = "lockSlayer",
			section = unlockSkills
	)
	default boolean lockSlayer() { return true; }

	@ConfigItem(
			name = "Lock Hunter",
			description = "Enable Greying out hunter skill",
			position = 160,
			keyName = "lockHunter",
			section = unlockSkills
	)
	default boolean lockHunter() { return true; }

	@ConfigItem(
			name = "Lock Mining",
			description = "Enable Greying out mining skill",
			position = 170,
			keyName = "lockMining",
			section = unlockSkills
	)
	default boolean lockMining() { return true; }

	@ConfigItem(
			name = "Lock Smithing",
			description = "Enable Greying out smithing skill",
			position = 180,
			keyName = "lockSmithing",
			section = unlockSkills
	)
	default boolean lockSmithing() { return true; }

	@ConfigItem(
			name = "Lock Fishing",
			description = "Enable Greying out fishing skill",
			position = 190,
			keyName = "lockFishing",
			section = unlockSkills
	)
	default boolean lockFishing() { return true; }

	@ConfigItem(
			name = "Lock Cooking",
			description = "Enable Greying out cooking skill",
			position = 200,
			keyName = "lockCooking",
			section = unlockSkills
	)
	default boolean lockCooking() { return true; }

	@ConfigItem(
			name = "Lock Firemaking",
			description = "Enable Greying out firemaking skill",
			position = 210,
			keyName = "lockFiremaking",
			section = unlockSkills
	)
	default boolean lockFiremaking() { return true; }

	@ConfigItem(
			name = "Lock Woodcutting",
			description = "Enable Greying out woodcutting skill",
			position = 220,
			keyName = "lockWoodcutting",
			section = unlockSkills
	)
	default boolean lockWoodcutting() { return true; }

	@ConfigItem(
			name = "Lock Farming",
			description = "Enable Greying out farming skill",
			position = 230,
			keyName = "lockFarming",
			section = unlockSkills
	)
	default boolean lockFarming() { return true; }

	// PRAYER SETTINGS

	@ConfigSection(
			name = "Unlock Prayers",
			description = "Prayer Settings",
			position = 17,
			closedByDefault = true
	)
	String prayers = "Prayers";

	@ConfigItem(
			name = "Lock Thick Skin",
			description = "Enable Greying out Thick Skin Prayer",
			position = 10,
			keyName = "lockThickSkin",
			section = prayers
	)
	default boolean lockThickSkin() { return true; }

	@ConfigItem(
			name = "Lock Burst of Stregth",
			description = "Enable Greying out Burst of Stregth Prayer",
			position = 20,
			keyName = "lockBurstOfStrength",
			section = prayers
	)
	default boolean lockBurstOfStrength() { return true; }

	@ConfigItem(
			name = "Lock Clarity of Thought",
			description = "Enable Greying out Clarity of Thought Prayer",
			position = 30,
			keyName = "lockClarityOfThought",
			section = prayers
	)
	default boolean lockClarityOfThought() { return true; }

	@ConfigItem(
			name = "Lock Sharp Eye",
			description = "Enable Greying out Sharp Eye Prayer",
			position = 40,
			keyName = "lockSharpEye",
			section = prayers
	)
	default boolean lockSharpEye() { return true; }

	@ConfigItem(
			name = "Lock Mystic Will",
			description = "Enable Greying out Mystic Will Prayer",
			position = 50,
			keyName = "lockMysticWill",
			section = prayers
	)
	default boolean lockMysticWill() { return true; }

	@ConfigItem(
			name = "Lock Rock Skin",
			description = "Enable Greying out Rock Skin Prayer",
			position = 60,
			keyName = "lockRockSkin",
			section = prayers
	)
	default boolean lockRockSkin() { return true; }

	@ConfigItem(
			name = "Lock Superhuman Strength",
			description = "Enable Greying out Superhuman Strength Prayer",
			position = 70,
			keyName = "lockSuperhumanStrength",
			section = prayers
	)
	default boolean lockSuperhumanStrength() { return true; }

	@ConfigItem(
			name = "Lock Improved Reflexes",
			description = "Enable Greying out Improved Reflexes Prayer",
			position = 80,
			keyName = "lockImprovedReflexes",
			section = prayers
	)
	default boolean lockImprovedReflexes() { return true; }

	@ConfigItem(
			name = "Lock Rapid Restore",
			description = "Enable Greying out Rapid Restore Prayer",
			position = 90,
			keyName = "lockRapidRestore",
			section = prayers
	)
	default boolean lockRapidRestore() { return true; }

	@ConfigItem(
			name = "Lock Rapid Heal",
			description = "Enable Greying out Rapid Heal Prayer",
			position = 100,
			keyName = "lockRapidHeal",
			section = prayers
	)
	default boolean lockRapidHeal() { return true; }

	@ConfigItem(
			name = "Lock Protect Item",
			description = "Enable Greying out Protect Item Prayer",
			position = 110,
			keyName = "lockProtectItem",
			section = prayers
	)
	default boolean lockProtectItem() { return true; }

	@ConfigItem(
			name = "Lock Hawk Eye",
			description = "Enable Greying out Hawk Eye Prayer",
			position = 120,
			keyName = "lockHawkEye",
			section = prayers
	)
	default boolean lockHawkEye() { return true; }

	@ConfigItem(
			name = "Lock Mystic Lore",
			description = "Enable Greying out Mystic Lore Prayer",
			position = 130,
			keyName = "lockMysticLore",
			section = prayers
	)
	default boolean lockMysticLore() { return true; }

	@ConfigItem(
			name = "Lock Steel Skin",
			description = "Enable Greying out Steel Skin Prayer",
			position = 140,
			keyName = "lockSteelSkin",
			section = prayers
	)
	default boolean lockSteelSkin() { return true; }

	@ConfigItem(
			name = "Lock Ultimate Strength",
			description = "Enable Greying out Ultimate Strength Prayer",
			position = 150,
			keyName = "lockUltimateStrength",
			section = prayers
	)
	default boolean lockUltimateStrength() { return true; }

	@ConfigItem(
			name = "Lock Incredible Reflexes",
			description = "Enable Greying out Incredible Reflexes Prayer",
			position = 160,
			keyName = "lockIncredibleReflexes",
			section = prayers
	)
	default boolean lockIncredibleReflexes() { return true; }

	@ConfigItem(
			name = "Lock Protect From Magic",
			description = "Enable Greying out Protect From Magic Prayer",
			position = 170,
			keyName = "lockProtectFromMagic",
			section = prayers
	)
	default boolean lockProtectFromMagic() { return true; }

	@ConfigItem(
			name = "Lock Protect From Missiles",
			description = "Enable Greying out Protect From Missiles Prayer",
			position = 180,
			keyName = "lockProtectFromMissiles",
			section = prayers
	)
	default boolean lockProtectFromMissiles() { return true; }

	@ConfigItem(
			name = "Lock Protect From Melee",
			description = "Enable Greying out Protect From Melee Prayer",
			position = 190,
			keyName = "lockProtectFromMelee",
			section = prayers
	)
	default boolean lockProtectFromMelee() { return true; }

	@ConfigItem(
			name = "Lock Eagle Eye",
			description = "Enable Greying out Eagle Eye Prayer",
			position = 200,
			keyName = "lockEagleEye",
			section = prayers
	)
	default boolean lockEagleEye() { return true; }

	@ConfigItem(
			name = "Lock Mystic Might",
			description = "Enable Greying out Mystic Might Prayer",
			position = 210,
			keyName = "lockMysticMight",
			section = prayers
	)
	default boolean lockMysticMight() { return true; }

	@ConfigItem(
			name = "Lock Retribution",
			description = "Enable Greying out Retribution Prayer",
			position = 220,
			keyName = "lockRetribution",
			section = prayers
	)
	default boolean lockRetribution() { return true; }

	@ConfigItem(
			name = "Lock Redemption",
			description = "Enable Greying out Redemption Prayer",
			position = 230,
			keyName = "lockRedemption",
			section = prayers
	)
	default boolean lockRedemption() { return true; }

	@ConfigItem(
			name = "Lock Smite",
			description = "Enable Greying out Smite Prayer",
			position = 240,
			keyName = "lockSmite",
			section = prayers
	)
	default boolean lockSmite() { return true; }

	@ConfigItem(
			name = "Lock Preserve",
			description = "Enable Greying out Preserve Prayer",
			position = 250,
			keyName = "lockPreserve",
			section = prayers
	)
	default boolean lockPreserve() { return true; }

	@ConfigItem(
			name = "Lock Chivalry",
			description = "Enable Greying out Chivalry Prayer",
			position = 260,
			keyName = "lockChivalry",
			section = prayers
	)
	default boolean lockChivalry() { return true; }

	@ConfigItem(
			name = "Lock Piety",
			description = "Enable Greying out Piety Prayer",
			position = 270,
			keyName = "lockPiety",
			section = prayers
	)
	default boolean lockPiety() { return true; }

	@ConfigItem(
			name = "Lock Rigour",
			description = "Enable Greying out Rigour Prayer",
			position = 280,
			keyName = "lockRigour",
			section = prayers
	)
	default boolean lockRigour() { return true; }

	@ConfigItem(
			name = "Lock Augury",
			description = "Enable Greying out Augury Prayer",
			position = 290,
			keyName = "lockAugury",
			section = prayers
	)
	default boolean lockAugury() { return true; }

	// TASK SETTINGS

	@ConfigSection(
			name = "Tasks",
			description = "Tasks",
			position = 18,
			closedByDefault = true
	)
	String tasks = "Tasks";

	@ConfigItem(
			name = "Task Scroll",
			description = "How many tasks into the list to start displaying them",
			position = 5,
			keyName = "taskScroll",
			section = tasks
	)
	default int taskScroll() { return 0; }

	@ConfigItem(
			name = "Task List",
			description = "Task Tick List to display in the form [Y/N,Points,Name]",
			position = 10,
			keyName = "taskList",
			section = tasks
	)
	default String taskList() { return "Y,20,Thing"; }

	// UNLOCK SETTINGS

	@ConfigSection(
			name = "Unlocks",
			description = "Unlocks",
			position = 19,
			closedByDefault = true
	)
	String unlocks = "Unlocks";

	@ConfigItem(
			name = "Unlock Scroll",
			description = "How many unlocks into the list to start displaying them",
			position = 5,
			keyName = "unlockScroll",
			section = unlocks
	)
	default int unlockScroll() { return 0; }

	@ConfigItem(
			name = "Unlock List",
			description = "Unlock List to display in the form [Y/N,[FILENAME / Item ID],Price,Title]",
			position = 10,
			keyName = "unlockList",
			section = unlocks
	)
	default String unlockList() { return "Y,200,20,Unlock Chicken\nY,chicken.png,20,Unlock Chicken Again"; }

	// ITEM UNLOCK SETTINGS

	@ConfigSection(
			name = "Item Unlocks",
			description = "Item Unlocks",
			position = 25,
			closedByDefault = true
	)
	String itemUnlocks = "Item Unlocks";

	@ConfigItem(
			name = "Item Unlock Scroll",
			description = "How many unlocks into the list to start displaying them",
			position = 5,
			keyName = "itemUnlockScroll",
			section = itemUnlocks
	)
	default int itemUnlockScroll() { return 0; }

	@ConfigItem(
			name = "Item Unlock List",
			description = "Unlock List to display in the form [Y/N,[FILENAME / Item ID],Price,Title]",
			position = 10,
			keyName = "itemUnlockList",
			section = itemUnlocks
	)
	default String itemUnlockList() { return "N,20406,20,Unlock Dragon Scimitar\nN,4151,20,Unlock Abyssal Whip"; }

}

