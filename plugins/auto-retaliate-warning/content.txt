package autoretaliatewarning;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.api.widgets.ComponentID;

@Slf4j
@PluginDescriptor(
	name = "Auto Retaliate Warning",
	description = "Warns you when you have auto retaliate on / off, or NPC attack options not hidden. Helps to prevent misclicks on limited accounts.",
	tags = {"hidden", "attack options", "retaliate", "auto", "auto retaliate", "warning"}
)

public class AutoRetaliateWarningPlugin extends Plugin
{
	private final int AUTO_RETALIATE_VARBIT = 172;
	private final int NPC_ATTACK_OPTIONS_VARBIT = 1306;
	@Inject
	private Client client;

	@Inject
	private AutoRetaliateWarningConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private AutoRetaliateWarningOverlay overlay;

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		hideWidget(client.getWidget(ComponentID.COMBAT_AUTO_RETALIATE), config.hideRetaliateConfig());
	}

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
		hideWidget(client.getWidget(ComponentID.COMBAT_AUTO_RETALIATE), config.hideRetaliateConfig());
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
		log.info("Auto Retaliate Warning stopped!");
		hideWidget(client.getWidget(ComponentID.COMBAT_AUTO_RETALIATE), false);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() == GameState.LOGGED_IN)
		{
		}
	}

	@Provides
	AutoRetaliateWarningConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(AutoRetaliateWarningConfig.class);
	}

	private void hideWidget(Widget widget, boolean hidden)
	{
		if (widget != null)
		{
			widget.setHidden(hidden);
		}
	}

	public boolean getAutoRetaliateStatus()
	{
		return client.getVarpValue(AUTO_RETALIATE_VARBIT) == 0;
	}

	public boolean getNPCAttackOptions()
	{
		return client.getVarpValue(NPC_ATTACK_OPTIONS_VARBIT) != 3;
	}
}


package autoretaliatewarning;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import java.awt.Color;

@ConfigGroup("autoretaliatewarning")
public interface AutoRetaliateWarningConfig extends Config
{
	@ConfigSection(
		name = "General Settings",
		description = "General plugin settings",
		position = 1
	)
	String generalSection = "generalSection";

	@ConfigSection(
		name = "NPC Attack Options",
		description = "Settings for NPC attack options warnings",
		position = 2
	)
	String npcAttackSection = "npcAttackSection";

	@ConfigSection(
		name = "Auto Retaliate On",
		description = "Settings for auto retaliate enabled warnings",
		position = 3
	)
	String autoRetaliateOnSection = "autoRetaliateOnSection";

	@ConfigSection(
		name = "Auto Retaliate Off",
		description = "Settings for auto retaliate disabled warnings",
		position = 4
	)
	String autoRetaliateOffSection = "autoRetaliateOffSection";

	// NPC Attack Options Section
	@ConfigItem(
		position = 1,
		keyName = "npcAttackOptionsWarn",
		name = "Enable Warning",
		description = "Warns you when NPC attack options aren't hidden",
		section = npcAttackSection
	)
	default boolean npcAttackOptionsWarn()
	{
		return true;
	}

	@ConfigItem(
		position = 2,
		keyName = "npcAttackOptionsText",
		name = "Warning Text",
		description = "Custom text to display when NPC attack options aren't hidden",
		section = npcAttackSection
	)
	default String npcAttackOptionsText()
	{
		return "NPC ATTACK OPTIONS NOT HIDDEN";
	}

	@ConfigItem(
		position = 3,
		keyName = "npcAttackOptionsColor",
		name = "Warning Color",
		description = "Color for the NPC attack options warning text",
		section = npcAttackSection
	)
	default Color npcAttackOptionsColor()
	{
		return Color.RED;
	}

	// Auto Retaliate On Section
	@ConfigItem(
		position = 1,
		keyName = "autoRetaliateWarn",
		name = "Enable Warning",
		description = "Warns you when you have auto retaliate enabled",
		section = autoRetaliateOnSection
	)
	default boolean autoRetaliateWarn()
	{
		return true;
	}

	@ConfigItem(
		position = 2,
		keyName = "autoRetaliateText",
		name = "Warning Text",
		description = "Custom text to display when auto retaliate is enabled",
		section = autoRetaliateOnSection
	)
	default String autoRetaliateText()
	{
		return "AUTO RETALIATE IS ON";
	}

	@ConfigItem(
		position = 3,
		keyName = "autoRetaliateColor",
		name = "Warning Color",
		description = "Color for the auto retaliate on warning text",
		section = autoRetaliateOnSection
	)
	default Color autoRetaliateColor()
	{
		return Color.RED;
	}

	// Auto Retaliate Off Section
	@ConfigItem(
		position = 1,
		keyName = "autoRetaliateOffWarn",
		name = "Enable Warning",
		description = "Warns you when you have auto retaliate disabled",
		section = autoRetaliateOffSection
	)
	default boolean autoRetaliateOffWarn()
	{
		return false;
	}

	@ConfigItem(
		position = 2,
		keyName = "autoRetaliateOffText",
		name = "Warning Text",
		description = "Custom text to display when auto retaliate is disabled",
		section = autoRetaliateOffSection
	)
	default String autoRetaliateOffText()
	{
		return "AUTO RETALIATE IS OFF";
	}

	@ConfigItem(
		position = 3,
		keyName = "autoRetaliateOffColor",
		name = "Warning Color",
		description = "Color for the auto retaliate off warning text",
		section = autoRetaliateOffSection
	)
	default Color autoRetaliateOffColor()
	{
		return Color.RED;
	}

	// General Settings Section
	@ConfigItem(
		position = 1,
		keyName = "hideRetaliateConfig",
		name = "Hide Auto Retaliate Button",
		description = "Hides the auto retaliate button",
		section = generalSection
	)
	default boolean hideRetaliateConfig()
	{
		return false;
	}

	@ConfigItem(
		position = 2,
		keyName = "fontSize",
		name = "Font Size",
		description = "Changes the warnings font size",
		section = generalSection
	)
	default int fontSize()
	{
		return 20;
	}
}
package autoretaliatewarning;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import javax.inject.Inject;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.TitleComponent;

public class AutoRetaliateWarningOverlay extends OverlayPanel
{
	private final AutoRetaliateWarningPlugin plugin;
	private final AutoRetaliateWarningConfig config;

	@Inject
	private AutoRetaliateWarningOverlay(AutoRetaliateWarningPlugin plugin, AutoRetaliateWarningConfig config)
	{
		super(plugin);
		setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
		this.plugin = plugin;
		this.config = config;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		graphics.setFont(new Font(FontManager.getRunescapeFont().getName(), Font.PLAIN, config.fontSize()));

		// Get custom text from config
		String autoRetaliateWarning = config.autoRetaliateText();
		String autoRetaliateOffWarning = config.autoRetaliateOffText();
		String npcAttackWarning = config.npcAttackOptionsText();

		boolean autoRetaliateSelected = plugin.getAutoRetaliateStatus();
		boolean getNPCAttackSelected = plugin.getNPCAttackOptions();

		if (autoRetaliateSelected && config.autoRetaliateWarn())
		{
			panelComponent.getChildren().add(TitleComponent.builder()
				.text(autoRetaliateWarning)
				.color(config.autoRetaliateColor())
				.build());
		}
		if (!autoRetaliateSelected && config.autoRetaliateOffWarn())
		{
			panelComponent.getChildren().add(TitleComponent.builder()
				.text(autoRetaliateOffWarning)
				.color(config.autoRetaliateOffColor())
				.build());
		}

		if (getNPCAttackSelected && config.npcAttackOptionsWarn())
		{
			panelComponent.getChildren().add(TitleComponent.builder()
				.text(npcAttackWarning)
				.color(config.npcAttackOptionsColor())
				.build());
		}

		// Calculate the preferred size based on the longest possible text
		String longestText = getLongestText(autoRetaliateWarning, autoRetaliateOffWarning, npcAttackWarning);
		panelComponent.setPreferredSize(new Dimension(
			graphics.getFontMetrics().stringWidth(longestText) + 10,
			graphics.getFontMetrics().getHeight()));

		return super.render(graphics);
	}

	private String getLongestText(String... texts)
	{
		String longest = "";
		for (String text : texts)
		{
			if (text.length() > longest.length())
			{
				longest = text;
			}
		}
		return longest;
	}
}
package autoretaliatewarning;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AutoRetaliateWarningPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AutoRetaliateWarningPlugin.class);
		RuneLite.main(args);
	}
}
