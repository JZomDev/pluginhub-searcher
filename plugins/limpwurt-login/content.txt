package com.github.limpwurtlogin;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class LimpwurtLoginPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(LimpwurtLoginPlugin.class);
		RuneLite.main(args);
	}
}
package com.github.limpwurtlogin.sound;

import org.junit.Test;

import java.util.Arrays;
import java.util.Set;
import java.util.stream.Collectors;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;

public class SoundTest {

    @Test
    public void valuesPopulated() {
        for (Sound sound : Sound.values()) {
            String message = "Sound " + sound.name() + " should have a non-blank resource name";
            assertFalse(message, sound.getResourceName().isBlank());
        }
    }

    @Test
    public void noDuplicateValues() {
        Set<String> uniqueResourceNames = Arrays.stream(Sound.values())
                .map(Sound::getResourceName)
                .collect(Collectors.toSet());

        assertEquals(Sound.values().length, uniqueResourceNames.size());
    }
}

package com.github.limpwurtlogin;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;

@ConfigGroup(LimpwurtLoginConfig.GROUP)
public interface LimpwurtLoginConfig extends Config {
    String GROUP = "limpwurtlogin";

    @Range(
            min = 0,
            max = 200
    )
    @ConfigItem(
            keyName = "loginVolume",
            name = "Login volume",
            description = "Adjust how loud the audio announcement is played"
    )
    default int loginVolume() {
        return 100;
    }
}

package com.github.limpwurtlogin;

import com.github.limpwurtlogin.sound.Sound;
import com.github.limpwurtlogin.sound.SoundEngine;
import com.github.limpwurtlogin.sound.SoundFileManager;
import com.google.inject.Provides;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.events.WidgetClosed;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.widgets.WidgetID;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import okhttp3.OkHttpClient;

import javax.inject.Inject;
import java.util.concurrent.ScheduledExecutorService;

@Slf4j
@PluginDescriptor(
        name = "Limpwurt Login",
        description = "Limpwurt announces when you login",
        tags = {"limpwurt", "login", "sound", "sounds", "announce"}
)

public class LimpwurtLoginPlugin extends Plugin {
    @Inject
    private Client client;

    @Getter(AccessLevel.PACKAGE)
    @Inject
    private ClientThread clientThread;

    @Inject
    private LimpwurtLoginConfig config;

    @Inject
    private ScheduledExecutorService executor;

    @Inject
    private OkHttpClient okHttpClient;

    @Inject
    private EventBus eventBus;

    @Inject
    private SoundEngine soundEngine;

    private boolean hasLoggedIn = false;

    @Override
    protected void startUp() throws Exception {
        log.info("LimpwurtLogin has started");

        hasLoggedIn = false;

        executor.submit(() -> SoundFileManager.prepareSoundFiles(okHttpClient, true));
    }

    @Override
    protected void shutDown() throws Exception {
        soundEngine.close();
        log.info("LimpwurtLogin has shut down");
    }

    @Subscribe
    public void onWidgetClosed(WidgetClosed widgetClosed) {
        if (widgetClosed.getGroupId() == WidgetID.LOGIN_CLICK_TO_PLAY_GROUP_ID && !hasLoggedIn) {
            hasLoggedIn = true; // Just in case
            soundEngine.playClip(Sound.LOGGED_IN, executor);
        }
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged gameStateChanged) {
        switch (gameStateChanged.getGameState()) {
            case LOGIN_SCREEN:
                hasLoggedIn = false;
                break;
        }
    }

    @Provides
    LimpwurtLoginConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(LimpwurtLoginConfig.class);
    }
}

package com.github.limpwurtlogin.sound;

import java.util.Random;

public enum Sound {
    LOGGED_IN("onthelasttimeofthisshit.wav");

    private final String resourceName;

    Sound(String resNam) {
        this(resNam, false);
    }

    Sound(String resNam, boolean streamTroll) {
        resourceName = resNam;
    }

    public String getResourceName() {
        return resourceName;
    }

    private static final Random random = new Random();
}

package com.github.limpwurtlogin.sound;

import com.github.limpwurtlogin.LimpwurtLoginConfig;
import lombok.extern.slf4j.Slf4j;

import javax.inject.Inject;
import javax.inject.Singleton;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.FloatControl;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.time.Duration;
import java.util.concurrent.Executor;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

@Singleton
@Slf4j
public class SoundEngine {

    @Inject
    private LimpwurtLoginConfig config;

    private static final long CLIP_MTIME_UNLOADED = -2;

    private long lastClipMTime = CLIP_MTIME_UNLOADED;
    private Clip clip = null;

    private boolean loadClip(Sound sound) {
        try (InputStream stream = new BufferedInputStream(SoundFileManager.getSoundStream(sound));
             AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(stream)) {
            clip.open(audioInputStream); // liable to error with pulseaudio, works on windows, one user informs me mac works
            return true;
        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
            log.warn("Failed to load Limpwurt Login sound " + sound, e);
        }
        return false;
    }

    public void playClip(Sound sound, Executor executor) {
        executor.execute(() -> playClip(sound));
    }

    public void playClip(Sound sound, ScheduledExecutorService executor, Duration initialDelay) {
        executor.schedule(() -> playClip(sound), initialDelay.toMillis(), TimeUnit.MILLISECONDS);
    }

    private void playClip(Sound sound) {
        long currentMTime = System.currentTimeMillis();
        if (clip == null || currentMTime != lastClipMTime || !clip.isOpen()) {
            if (clip != null && clip.isOpen()) {
                clip.close();
            }

            try {
                clip = AudioSystem.getClip();
            } catch (LineUnavailableException e) {
                lastClipMTime = CLIP_MTIME_UNLOADED;
                log.warn("Failed to get clip for Limpwurt Login sound " + sound, e);
                return;
            }

            lastClipMTime = currentMTime;
            if (!loadClip(sound)) {
                return;
            }
        }

        // User configurable volume
        FloatControl volume = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);
        float gain = 20f * (float) Math.log10(config.loginVolume() / 100f);
        gain = Math.min(gain, volume.getMaximum());
        gain = Math.max(gain, volume.getMinimum());
        volume.setValue(gain);

        // From RuneLite base client Notifier class:
        // Using loop instead of start + setFramePosition prevents the clip
        // from not being played sometimes, presumably a race condition in the
        // underlying line driver
        clip.loop(0);
    }

    public void close() {
        if (clip != null && clip.isOpen()) {
            clip.close();
        }
    }
}

package com.github.limpwurtlogin.sound;

import lombok.extern.slf4j.Slf4j;
import net.runelite.client.RuneLite;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.Arrays;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static java.util.function.Predicate.not;

@Slf4j
public class SoundFileManager {
    private SoundFileManager() {}

    private static final Path DOWNLOAD_DIR = Path.of(RuneLite.RUNELITE_DIR.getPath(), "limpwurt-login");
    private static final String DELETE_WARNING_FILENAME = "_EXTRA_FILES_WILL_BE_DELETED_BUT_FOLDERS_WILL_REMAIN";
    private static final Path DELETE_WARNING_FILE = DOWNLOAD_DIR.resolve(DELETE_WARNING_FILENAME);

    private static final HttpUrl RAW_GITHUB = HttpUrl.parse("https://raw.githubusercontent.com/Gavin-TC/limpwurt-login/sounds");

    public static InputStream getSoundStream(Sound sound) throws FileNotFoundException {
        return new FileInputStream(DOWNLOAD_DIR.resolve(sound.getResourceName()).toFile());
    }

    public static void prepareSoundFiles(OkHttpClient okHttpClient, boolean downloadStreamerTrolls) {
        ensureDownloadDirectoryExists();
        deleteUndesiredFilesIgnoringFolders(downloadStreamerTrolls);
        downloadNotYetPresentSounds(okHttpClient, downloadStreamerTrolls);
    }

    private static void ensureDownloadDirectoryExists() {
       try {
           if (!Files.exists(DOWNLOAD_DIR))
                Files.createDirectories(DOWNLOAD_DIR);
            Files.createFile(DELETE_WARNING_FILE);
        } catch (FileAlreadyExistsException ignored) {
            /* ignored */
        } catch (IOException e) {
            log.error("Could not create download directory or warning file", e);
        }
    }

    private static void deleteUndesiredFilesIgnoringFolders(boolean keepStreamerTrolls) {
        Set<String> desiredSoundFileNames = getDesiredSounds(keepStreamerTrolls)
                .map(Sound::getResourceName)
                .collect(Collectors.toSet());

        Set<Path> toDelete = getFilesPresent().stream()
                .filter(not(desiredSoundFileNames::contains))
                .map(DOWNLOAD_DIR::resolve)
                .collect(Collectors.toSet());
        try {
            for (Path pathToDelete : toDelete) {
                Files.delete(pathToDelete);
            }
        } catch (IOException e) {
            log.error("Failed to delete disused sound files", e);
        }
    }

    private static void downloadNotYetPresentSounds(OkHttpClient okHttpClient, boolean downloadStreamerTrolls) {
        getFilesToDownload(downloadStreamerTrolls)
                .forEach(filename -> downloadFilename(okHttpClient, filename));
    }

    private static void downloadFilename(OkHttpClient okHttpClient, String filename) {
        if (RAW_GITHUB == null) {
            // Hush intellij, it's okay, the potential NPE can't hurt you now
            log.error("Limpwurt Login could not download sounds due to an unexpected null RAW_GITHUB value");
            return;
        }
        HttpUrl soundUrl = RAW_GITHUB.newBuilder().addPathSegment(filename).build();
        Request request = new Request.Builder().url(soundUrl).build();
        try (Response res = okHttpClient.newCall(request).execute()) {
            if (res.body() != null)
                Files.copy(new BufferedInputStream(res.body().byteStream()), DOWNLOAD_DIR.resolve(filename), StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException e) {
            log.error("Limpwurt Login could not download sounds", e);
        }
    }

    private static Stream<String> getFilesToDownload(boolean downloadStreamerTrolls) {
        Set<String> filesAlreadyPresent = getFilesPresent();

        return getDesiredSounds(downloadStreamerTrolls)
                .map(Sound::getResourceName)
                .filter(not(filesAlreadyPresent::contains));
    }

    private static Set<String> getFilesPresent() {
        try (Stream<Path> paths = Files.list(DOWNLOAD_DIR)) {
            return paths
                    .filter(path -> !Files.isDirectory(path))
                    .map(Path::toFile)
                    .map(File::getName)
                    .filter(filename -> !DELETE_WARNING_FILENAME.equals(filename))
                    .collect(Collectors.toSet());
        } catch (IOException e) {
            log.warn("Could not list files in {}, assuming it to be empty", DOWNLOAD_DIR);
            return Set.of();
        }
    }

    private static Stream<Sound> getDesiredSounds(boolean includeStreamerTrolls) {
        return Arrays.stream(Sound.values())
                .filter(sound -> includeStreamerTrolls);
    }
}

