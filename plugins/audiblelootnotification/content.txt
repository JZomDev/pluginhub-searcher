package com.audiblelootnotification;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AudibleLootNotificationPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AudibleLootNotificationPlugin.class);
		RuneLite.main(args);
	}
}
package com.audiblelootnotification;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.util.ArrayList;
import java.util.List;

@ConfigGroup("AudibleLootNotification")
public interface AudibleLootNotificationConfig extends Config
{
	@ConfigItem(
			keyName = "minValue",
			name = "Minimum value",
			description = "Minimum value at which to play the sound"
	)
	default int minValue() {
		return 500000;
	}

	@ConfigItem(
			keyName = "soundVolume",
			name = "Sound volume",
			description = "Adjust the volume of the soundclip",
			position = 2
	)
	default int soundVolume() {
		return 75;
	}

	@ConfigItem(
			keyName = "soundToPlay",
			name = "Select sound",
			description = "Select a sound which shall notify you on valuable drops",
			position = 3
	)
	default SoundManager.Sound getSelectedSound()
	{
		return SoundManager.Sound.MonkeyNoise;
	}

}

package com.audiblelootnotification;

import lombok.extern.slf4j.Slf4j;

import javax.inject.Inject;
import javax.inject.Singleton;
import javax.sound.sampled.*;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;

@Slf4j

@Singleton
public class SoundManager
{
    @Inject
    private AudibleLootNotificationConfig config;

    public enum Sound {
        AcbSpec("/AcbSpec.wav"),
        CashRegister("/CashRegister.wav"),
        CatMeow("/CatMeow.wav"),
        Dolphin("/Dolphin.wav"),
        GuySayingMoney("/GuySayingMoney.wav"),
        HeyYouJustGotMoney("/HeyYouJustGotMoney.wav"),
        MinecraftVillager("/MinecraftVillager.wav"),
        MonkeyNoise("/MonkeyNoise.wav"),
        PigGrunt("/PigGrunt.wav"),
        SoMuchMoneyAutotune("/SoMuchMoneyAutotune.wav");

        private final String fileName;
        Sound(String filename) {
            fileName = filename;
        }

        String getFileName() {
            return fileName;
        }
    }

    private Clip clip = null;
    private static final long CLIP_MTIME_UNLOADED = -2;
    private long lastClipMTime = CLIP_MTIME_UNLOADED;

    // Source: c-engineer-completed plugin
    // https://github.com/m0bilebtw/c-engineer-completed
    private boolean loadClip(Sound sound) {
        try (InputStream s = getClass().getResourceAsStream(sound.getFileName());
             InputStream bufferedIn = new BufferedInputStream(s);
             AudioInputStream audioStream = AudioSystem.getAudioInputStream(bufferedIn)){
            clip.open(audioStream);
            return true;
        } catch (UnsupportedAudioFileException | LineUnavailableException | IOException | NullPointerException e) {
            log.warn("Failed to load sound " + sound, e);
        }
        return false;
    }

    // Source: c-engineer-completed plugin
    // https://github.com/m0bilebtw/c-engineer-completed
    public void playClip(Sound sound) {
        long currentMTime = System.currentTimeMillis();

        if (clip == null || currentMTime != lastClipMTime || !clip.isOpen()) {
            if (clip != null && clip.isOpen()) {
                clip.close();
            }

            try {
                clip = AudioSystem.getClip();
            } catch (LineUnavailableException e) {
                lastClipMTime = CLIP_MTIME_UNLOADED;
                log.warn("Failed to get clip for sound " + sound, e);
                return;
            }

            lastClipMTime = currentMTime;
            if (!loadClip(sound)) {
                return;
            }
        }

        // User configurable volume
        FloatControl volume = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);
        float gain = 20f * (float) Math.log10(config.soundVolume() / 100f);
        gain = Math.min(gain, volume.getMaximum());
        gain = Math.max(gain, volume.getMinimum());
        volume.setValue(gain);

        clip.loop(0);
    }
}

package com.audiblelootnotification;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.NpcLootReceived;
import net.runelite.client.events.PlayerLootReceived;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.ItemStack;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.loottracker.LootReceived;
import net.runelite.http.api.loottracker.LootRecordType;

import java.util.Collection;

@Slf4j
@PluginDescriptor(
	name = "AudibleLootNotification",
	description = "Notifies you with preselected sounds once you received loot which exceeds a defined value threshold"

)
public class AudibleLootNotificationPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private SoundManager soundManager;
	@Inject
	private AudibleLootNotificationConfig config;

	@Inject
	private ItemManager itemManager;

	@Subscribe
	public void onNpcLootReceived(NpcLootReceived npcLootReceived){
		handleReceivedLoot(npcLootReceived.getItems(), npcLootReceived.getNpc().getName());
	}

	@Subscribe
	public void onPlayerLootReceived(PlayerLootReceived playerLootReceived){
		handleReceivedLoot(playerLootReceived.getItems(), playerLootReceived.getPlayer().getName());
	}

	@Subscribe
	public void onLootReceived(LootReceived lootReceived) {
		if (lootReceived.getType() != LootRecordType.EVENT && lootReceived.getType() != LootRecordType.PICKPOCKET) {
			return;
		}
		handleReceivedLoot(lootReceived.getItems(), lootReceived.getName());
	}

	private void handleReceivedLoot(Collection<ItemStack> items, String name) {
		for (ItemStack stack : items) {
			int value = itemManager.getItemPrice(stack.getId()) * stack.getQuantity();

			if (value >= config.minValue())
			{
				new Thread(() -> {
					soundManager.playClip(config.getSelectedSound());
				}).start();
				return;
			}
		}
	}

	@Provides
	AudibleLootNotificationConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(AudibleLootNotificationConfig.class);
	}
}

