package com.npcidletimer;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class NPCIdleTimerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(NPCIdleTimerPlugin.class);
		RuneLite.main(args);
	}
}
package com.npcidletimer;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.awt.Font;
import java.awt.RenderingHints;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

public class NPCIdleTimerOverlay extends Overlay
{

	private final Client client;
	private final NPCIdleTimerPlugin plugin;
	private final NPCIdleTimerConfig config;

    protected String lastFont = "";
    protected int lastFontSize = 0;
    protected boolean useRunescapeFont = true;
    protected NPCIdleTimerConfig.FontStyle lastFontStyle = NPCIdleTimerConfig.FontStyle.DEFAULT;
    protected Font font = null;


	NumberFormat format = new DecimalFormat("#");

	@Inject
	NPCIdleTimerOverlay(Client client, NPCIdleTimerPlugin plugin, NPCIdleTimerConfig config)
	{
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_SCENE);
		this.client = client;
		this.plugin = plugin;
		this.config = config;
	}

	protected void handleFont(Graphics2D graphics) {
        if (font != null) {
            graphics.setFont(font);
            if (useRunescapeFont) {
                graphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);
            }
        }
    }

	@Override
	public Dimension render(Graphics2D graphics)
	{

		updateFont();
		handleFont(graphics);

		if (client.isInInstancedRegion())
		{
			return null;
		}

		if (config.showOverlay())
		{
			plugin.getWanderingNPCs().forEach((id, npc) -> renderTimer(npc, graphics));
		}
		return null;
	}

	private void renderTimer(final WanderingNPC npc, final Graphics2D graphics)
	{
		double maxDisplay = config.maxDisplay();

		if (config.customTimer())
		{
			maxDisplay = config.customTiming();
		}

		double timeLeft = maxDisplay - npc.getTimeWithoutMoving();

		double lowDisplay = config.lowDisplay();
		Color timerColor = config.normalTimerColor();

		if (timeLeft < 0)
		{
			timeLeft = 0;
		}

		if (timeLeft <= lowDisplay)
		{
			timerColor = config.lowTimerColor();
		}

		String timeLeftString = String.valueOf(format.format(timeLeft));

		if (config.showTimingType())
		{
			if (config.showOverlayTicks())
			{
				timeLeftString = timeLeftString + ("T");
			}
			else
			{
				timeLeftString= timeLeftString + ("S");
			}
		}



		final Point canvasPoint = npc.getNpc().getCanvasTextLocation(graphics, timeLeftString, npc.getNpc().getLogicalHeight() + config.timerHeight());

		if (canvasPoint != null && (maxDisplay >= timeLeft))
		{
			OverlayUtil.renderTextLocation(graphics, canvasPoint, timeLeftString, timerColor);
		}
	}
	private void updateFont() {
		//only perform anything within this function if any settings related to the font have changed
		if (!lastFont.equals(config.fontName()) || lastFontSize != config.fontSize() || lastFontStyle != config.fontStyle()) {
			if (config.customFont()) {
				lastFont = config.fontName();
			}
			lastFontSize = config.fontSize();
			lastFontStyle = config.fontStyle();

			//use runescape font as default
			if (config.fontName().equals("") || config.customFont() == false) {
				if (config.fontSize() < 16) {
					font = FontManager.getRunescapeSmallFont();
				} else if (config.fontStyle() == NPCIdleTimerConfig.FontStyle.BOLD || config.fontStyle() == NPCIdleTimerConfig.FontStyle.BOLD_ITALICS) {
					font = FontManager.getRunescapeBoldFont();
				} else {
					font = FontManager.getRunescapeFont();
				}

				if (config.fontSize() > 16) {
					font = font.deriveFont((float) config.fontSize());
				}

				if (config.fontStyle() == NPCIdleTimerConfig.FontStyle.BOLD) {
					font = font.deriveFont(Font.BOLD);
				}
				if (config.fontStyle() == NPCIdleTimerConfig.FontStyle.ITALICS) {
					font = font.deriveFont(Font.ITALIC);
				}
				if (config.fontStyle() == NPCIdleTimerConfig.FontStyle.BOLD_ITALICS) {
					font = font.deriveFont(Font.ITALIC | Font.BOLD);
				}

				useRunescapeFont = true;
				return;
			}

			int style = Font.PLAIN;
			switch (config.fontStyle()) {
				case BOLD:
					style = Font.BOLD;
					break;
				case ITALICS:
					style = Font.ITALIC;
					break;
				case BOLD_ITALICS:
					style = Font.BOLD | Font.ITALIC;
					break;
			}

			font = new Font(config.fontName(), style, config.fontSize());
			useRunescapeFont = false;
		}
	}

}

package com.npcidletimer;

import com.google.common.annotations.VisibleForTesting;
import com.google.inject.Provides;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.inject.Inject;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.NPC;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.NpcDespawned;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;

@Slf4j
@PluginDescriptor(
	name = "NPC Idle Timer"
)
public class NPCIdleTimerPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private NPCIdleTimerConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private NPCIdleTimerOverlay npcidletimeroverlay;

	@Getter(AccessLevel.PACKAGE)
	private Instant lastTickUpdate;

	@Getter(AccessLevel.PACKAGE)
	private long lastTrueTickUpdate;

	@Getter(AccessLevel.PACKAGE)
	private final Map<Integer, WanderingNPC> wanderingNPCs = new HashMap<>();

	private List<String> selectedNPCs = new ArrayList<>();

	@Provides
	NPCIdleTimerConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(NPCIdleTimerConfig.class);
	}

	@Override
	protected void startUp()
	{
		overlayManager.add(npcidletimeroverlay);
		selectedNPCs = getSelectedNPCs();
		rebuildAllNpcs();
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(npcidletimeroverlay);
		wanderingNPCs.clear();
	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned npcSpawned)
	{
		if (client.isInInstancedRegion())
		{
			return;
		}

		final NPC npc = npcSpawned.getNpc();
		final String npcName = npc.getName();

		if (npcName == null || !selectedNPCs.contains(npcName.toLowerCase()))
		{
			return;
		}

		wanderingNPCs.putIfAbsent(npc.getIndex(), new WanderingNPC(npc));
	}

	@Subscribe
	public void onNpcDespawned(NpcDespawned npcDespawned)
	{
		if (client.isInInstancedRegion())
		{
			return;
		}

		final NPC npc = npcDespawned.getNpc();
		final String npcName = npc.getName();

		if (npcName == null || !selectedNPCs.contains(npcName.toLowerCase()))
		{
			return;
		}

		wanderingNPCs.remove(npc.getIndex());
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		if (event.getGameState() == GameState.LOGIN_SCREEN ||
			event.getGameState() == GameState.HOPPING)
		{
			wanderingNPCs.clear();
		}
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		if (client.isInInstancedRegion())
		{
			return;
		}

		lastTrueTickUpdate = client.getTickCount();
		lastTickUpdate = Instant.now();

		for (NPC npc : client.getNpcs())
		{
			final String npcName = npc.getName();

			if (npcName == null || !selectedNPCs.contains(npcName.toLowerCase()))
			{
				continue;
			}

			final WanderingNPC wnpc = wanderingNPCs.get(npc.getIndex());

			if (wnpc == null)
			{
				continue;
			}
			if (config.showOverlayTicks())
			{
				if (wnpc.getCurrentLocation().getX() != npc.getWorldLocation().getX() || wnpc.getCurrentLocation().getY() != npc.getWorldLocation().getY())
				{
					long currentTick = client.getTickCount();
					wnpc.setCurrentLocation(npc.getWorldLocation());
					wnpc.setTimeWithoutMoving(0);
					wnpc.setTrueStoppedMovingTick(currentTick);
					wnpc.setNpc(npc);
				}
				else
				{
					long currentTick = client.getTickCount();
					wnpc.setTimeWithoutMoving(lastTrueTickUpdate - wnpc.getTrueStoppedMovingTick());
				}
			}
			else {
				if (wnpc.getCurrentLocation().getX() != npc.getWorldLocation().getX() || wnpc.getCurrentLocation().getY() != npc.getWorldLocation().getY())
				{
					wnpc.setCurrentLocation(npc.getWorldLocation());
					wnpc.setTimeWithoutMoving(0);
					wnpc.setStoppedMovingTick(Instant.now());
					wnpc.setNpc(npc);
				}
				else
				{
					wnpc.setTimeWithoutMoving(lastTickUpdate.getEpochSecond() - wnpc.getStoppedMovingTick().getEpochSecond());
				}
			}
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged)
	{
		if (!configChanged.getGroup().equals("npcidletimerplugin"))
		{
			return;
		}

		selectedNPCs = getSelectedNPCs();
		rebuildAllNpcs();
	}

	@VisibleForTesting
	List<String> getSelectedNPCs()
	{
		final String configNPCs = config.npcToShowTimer().toLowerCase();

		if (configNPCs.isEmpty())
		{
			return Collections.emptyList();
		}

		return Text.fromCSV(configNPCs);
	}

	private void rebuildAllNpcs()
	{
		wanderingNPCs.clear();

		if (client.getGameState() != GameState.LOGGED_IN &&
			client.getGameState() != GameState.LOADING)
		{
			// NPCs are still in the client after logging out, ignore them
			return;
		}

		for (NPC npc : client.getNpcs())
		{
			final String npcName = npc.getName();

			if (npcName == null || !selectedNPCs.contains(npcName.toLowerCase()))
			{
				continue;
			}

			wanderingNPCs.putIfAbsent(npc.getIndex(), new WanderingNPC(npc));
		}
	}
}

package com.npcidletimer;

import java.time.Instant;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.NPC;
import net.runelite.api.coords.WorldPoint;

public class WanderingNPC
{
	@Getter
	private final int npcIndex;

	@Getter
	private final String npcName;

	@Getter
	@Setter
	private NPC npc;

	@Getter
	@Setter
	private Instant stoppedMovingTick;

	@Getter
	@Setter
	private long trueStoppedMovingTick;
	@Getter
	@Setter
	private long timeWithoutMoving;

	@Getter
	@Setter
	private WorldPoint currentLocation;

	WanderingNPC(NPC npc)
	{
		this.npc = npc;
		this.npcName = npc.getName();
		this.npcIndex = npc.getIndex();
		this.stoppedMovingTick = Instant.now();
		this.trueStoppedMovingTick = 0;
		this.timeWithoutMoving = 0;
		this.currentLocation = npc.getWorldLocation();
	}
}
package com.npcidletimer;

import java.awt.Color;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;

@ConfigGroup("npcidletimerplugin")
public interface NPCIdleTimerConfig extends Config
{
	enum FontStyle {
        BOLD("Bold"),
        ITALICS("Italics"),
        BOLD_ITALICS("Bold and italics"),
        DEFAULT("Default");

        String name;

        FontStyle(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }
    }

	@ConfigSection(
			name = "Timer settings",
			description = "Settings relating to Timer",
			position = 1
	)
	String timer_settings = "timer_settings";

	@ConfigSection(
            name = "font settings",
            description = "Settings relating to fonts",
            position = 2
    )
    String font_settings = "font_settings";

	@ConfigItem(
			position = 0,
			keyName = "showOverlay",
			name = "Show timer over chosen NPCs",
			description = "Configures whether or not to have a timer over the chosen NPCs"
	)
	default boolean showOverlay()
	{
		return true;
	}

	@ConfigItem(
			position = 1,
			keyName = "npcToShowTimer",
			name = "NPC Names",
			description = "Enter names of NPCs where you wish to use this plugin",
			section = timer_settings
	)
	default String npcToShowTimer()
	{
		return "";
	}

	@Alpha
	@ConfigItem(
			position = 2,
			keyName = "normalTimerColor",
			name = "Normal time color",
			description = "Configures the color of the timer",
			section = timer_settings
	)
	default Color normalTimerColor()
	{
		return Color.WHITE;
	}

	@Alpha
	@ConfigItem(
			position = 3,
			keyName = "lowTimerColor",
			name = "Low time color",
			description = "Configures the color of the timer when remaining time is low",
			section = timer_settings
	)
	default Color lowTimerColor()
	{
		return Color.RED;
	}

	@Range(
			max = 1000
	)
	@ConfigItem(
			position = 4,
			keyName = "maxDisplay",
			name = "Time to start timer",
			description = "This defines at what amount of seconds/ticks the timer will be shown. Before this time the npc won't show a timer",
			section = timer_settings
	)
	default int maxDisplay()
	{
		return 300;
	}

	@ConfigItem(
			position = 5,
			keyName = "customTimer",
			name = "Enable custom timer",
			description = "This option enables you to set a custom timer that fits the actual respawn timer of your npc or for other timing related manners",
			section = timer_settings
	)
	default boolean customTimer()
	{
		return false;
	}

	@ConfigItem(
			position = 6,
			keyName = "customTiming",
			name = "Custom timer",
			description = "The starting tick counter on the npc. The default timer of this plugin is set at 300 seconds. You may change this to fit the actual despawn timer",
			section = timer_settings
	)
	default int customTiming()
	{
		return 300;
	}

	@ConfigItem(
			position = 7,
			keyName = "lowDisplay",
			name = "Timer low value",
			description = "The maximum seconds at which the timer is considered low",
			section = timer_settings
	)
	default int lowDisplay()
	{
		return 30;
	}

	@Range(
			max = 300
	)
	@ConfigItem(
			position = 8,
			keyName = "timerHeight",
			name = "Height of timer",
			description = "Change the vertical offset of the timer above the npc",
			section = timer_settings
	)
	default int timerHeight()
	{
		return 25;
	}

	@ConfigItem(
			position = 9,
			keyName = "showOverlayTicks",
			name = "Show timer in ticks",
			description = "Configures whether or not the timer should be shown in tick or seconds",
			section = timer_settings
	)
	default boolean showOverlayTicks()
	{
		return false;
	}

	@ConfigItem(
			position = 10,
			keyName = "showTimingType",
			name = "Show type of timer used",
			description = "Shows the type of timer used in the suffix of the actual time displayed",
			section = timer_settings
	)
	default boolean showTimingType()
	{
		return false;
	}
	@ConfigItem(
			position = 11,
			keyName = "customFont",
			name = "Enable custom fonts",
			description = "Enabling this setting makes it possible to use the custom font from the box below this",
			section = font_settings
	)
	default boolean customFont() {
		return true;
	}

	@ConfigItem(
			position = 12,
			keyName = "fontName",
			name = "Font",
			description = "Name of the font to use for the hp shown. Leave blank to use RuneLite setting.",
			section = font_settings
	)
	default String fontName() {
		return "roboto";
	}

	@ConfigItem(
			position = 13,
			keyName = "fontStyle",
			name = "Font style",
			description = "Style of the font to use for the hp shown. Only works with custom font.",
			section = font_settings
	)
	default FontStyle fontStyle() {
		return FontStyle.DEFAULT;
	}

	@ConfigItem(
			position = 14,
			keyName = "fontSize",
			name = "Font size",
			description = "Size of the font to use for XP drops. Only works with custom font.",
			section = font_settings
	)
	default int fontSize() {
		return 12;
	}
}

