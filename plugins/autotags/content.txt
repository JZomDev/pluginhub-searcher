package com.github.i.autotags;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class GearTagsPluginTest {
	public static void main(String[] args) throws Exception {
		ExternalPluginManager.loadBuiltin(AutoTagsPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2022, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.github.i.autotags;

import lombok.AllArgsConstructor;
import lombok.Data;

import java.awt.*;

@Data
@AllArgsConstructor
public class Tag {
	Color color;

	public static Tag NONE = new Tag(null);
}

/*
 * Copyright (c) 2018 kulers
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.github.i.autotags;

import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.WidgetItemOverlay;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;

class AutoTagsOverlay extends WidgetItemOverlay {
	private final ItemManager itemManager;
	private final AutoTagsPlugin plugin;
	private final AutoTagsConfig config;
	private final Cache<Long, Image> fillCache;
	private final Cache<Integer, Tag> tagCache;
	private final Tag NONE = new Tag(null);

	@Inject
	private AutoTagsOverlay(ItemManager itemManager, AutoTagsPlugin plugin, AutoTagsConfig config) {
		this.itemManager = itemManager;
		this.plugin = plugin;
		this.config = config;
		showOnEquipment();
		showOnInventory();
		showOnInterfaces(
				InterfaceID.CHAMBERS_OF_XERIC_INVENTORY,
				InterfaceID.CHAMBERS_OF_XERIC_STORAGE_UNIT_PRIVATE,
				InterfaceID.CHAMBERS_OF_XERIC_STORAGE_UNIT_SHARED,
				InterfaceID.GRAVESTONE
		);
		fillCache = CacheBuilder.newBuilder()
				.concurrencyLevel(1)
				.maximumSize(32)
				.build();
		tagCache = CacheBuilder.newBuilder()
				.concurrencyLevel(1)
				.maximumSize(39)
				.build();
	}

	@Override
	public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem widgetItem) {
		final Tag tag = getTag(itemId);
		if (tag == null || tag.color == null) {
			return;
		}

		final Color color = tag.color;

		Rectangle bounds = widgetItem.getCanvasBounds();
		if (config.showTagOutline()) {
			final BufferedImage outline = itemManager.getItemOutline(itemId, widgetItem.getQuantity(), color);
			graphics.drawImage(outline, (int) bounds.getX(), (int) bounds.getY(), null);
		}

		if (config.showTagFill()) {
			final Image image = getFillImage(color, widgetItem.getId(), widgetItem.getQuantity());
			graphics.drawImage(image, (int) bounds.getX(), (int) bounds.getY(), null);
		}

		if (config.showTagUnderline()) {
			int heightOffSet = (int) bounds.getY() + (int) bounds.getHeight() + 2;
			graphics.setColor(color);
			graphics.drawLine((int) bounds.getX(), heightOffSet, (int) bounds.getX() + (int) bounds.getWidth(), heightOffSet);
		}
	}


	private Tag getTag(int itemId) {
		Tag tag = tagCache.getIfPresent(itemId);
		if (tag == null) {
			tag = plugin.getTag(itemId);
			if (tag == null) {
				tagCache.put(itemId, NONE);
				return null;
			}

			if (tag == NONE) {
				return null;
			}

			tagCache.put(itemId, tag);
		}
		return tag;
	}

	private Image getFillImage(Color color, int itemId, int qty) {
		long key = (((long) itemId) << 32) | qty;
		Image image = fillCache.getIfPresent(key);
		if (image == null)
		{
			final Color fillColor = ColorUtil.colorWithAlpha(color, config.fillOpacity());
			image = ImageUtil.fillImage(itemManager.getImage(itemId, qty, false), fillColor);
			fillCache.put(key, image);
		}
		return image;
	}

	void invalidateCache() {
		fillCache.invalidateAll();
		tagCache.invalidateAll();
	}
}

/*
 * Copyright (c) 2018 kulers
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.github.i.autotags;

import com.google.gson.Gson;
import net.runelite.client.config.*;

import javax.inject.Inject;
import java.awt.*;
import java.util.Set;
import java.util.stream.Collectors;

@ConfigGroup(AutoTagsConfig.GROUP)
public interface AutoTagsConfig extends Config {
	String GROUP = "AutoTags";

	@ConfigSection(
		name = "Tag display mode",
		description = "How tags are displayed in the inventory",
		position = 0
	)
	String tagStyleSection = "tagStyleSection";

	@ConfigItem(
		position = 0,
		keyName = "showTagOutline",
		name = "Outline",
		description = "Configures whether or not item tags show be outlined",
		section = tagStyleSection
	)
	default boolean showTagOutline()
	{
		return true;
	}

	@ConfigItem(
		position = 1,
		keyName = "tagUnderline",
		name = "Underline",
		description = "Configures whether or not item tags should be underlined",
		section = tagStyleSection
	)
	default boolean showTagUnderline()
	{
		return false;
	}

	@ConfigItem(
		position = 2,
		keyName = "tagFill",
		name = "Fill",
		description = "Configures whether or not item tags should be filled",
		section = tagStyleSection
	)
	default boolean showTagFill()
	{
		return false;
	}

	@Range(
		max = 255
	)
	@ConfigItem(
		position = 3,
		keyName = "fillOpacity",
		name = "Fill opacity",
		description = "Configures the opacity of the tag \"Fill\"",
		section = tagStyleSection
	)
	default int fillOpacity() {
		return 50;
	}

	@ConfigItem(
			keyName = "meleeColor",
			name = "Melee Tag Color",
			description = "Configures the overlay color for melee items",
			section = tagStyleSection
	)
	default Color meleeColor() {
		return Color.PINK;
	}

	@ConfigItem(
			keyName = "magicColor",
			name = "Magic Tag Color",
			description = "Configures the overlay color for magic items",
			section = tagStyleSection
	)
	default Color magicColor() {
		return Color.CYAN;
	}

	@ConfigItem(
			keyName = "rangedColor",
			name = "Ranged Tag Color",
			description = "Configures the overlay color for ranged items",
			section = tagStyleSection
	)
	default Color rangedColor() {
		return Color.GREEN;
	}

	@ConfigItem(
			keyName = "specialColor",
			name = "Special Tag Color",
			description = "Configures the overlay color for special items",
			section = tagStyleSection
	)
	default Color specialColor() {
		return Color.YELLOW;
	}


	@ConfigItem(
			keyName = "overrides",
			name = "overrides",
			description = "holds json for overrides",
			hidden = true
	)
	@Inject
	default String overrides(Gson gson) {
		return gson.toJson(CombatType.CHOICE_LIST.stream()
				.collect(Collectors.toMap(
						combatType -> combatType,
						combatType -> Set.of()
				)));
	}
}

package com.github.i.autotags;

import java.util.List;

public enum CombatType {
    UNKNOWN,
    IGNORE,
    SPECIAL,
    MELEE,
    RANGE,
    MAGIC;

    static final List<CombatType> CHOICE_LIST = List.of(
            MELEE,
            RANGE,
            MAGIC,
            SPECIAL,
            IGNORE
    );

    static CombatType fromString(String str) {
        return CHOICE_LIST.stream()
                .filter(choice -> str.endsWith(choice.toString()))
                .findFirst()
                .get();
    }
}

package com.github.i.autotags;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.inject.Provides;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.KeyCode;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.events.MenuOpened;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetUtil;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ColorUtil;
import net.runelite.http.api.item.ItemEquipmentStats;

import javax.inject.Inject;
import java.awt.*;
import java.lang.reflect.Type;
import java.util.List;
import java.util.*;
import java.util.stream.Stream;

@Slf4j
@PluginDescriptor(name = "AutoTags")
public class AutoTagsPlugin extends Plugin {
	@Inject
	private Gson gson;

	private Map<CombatType, Set<String>> overrides;

	@Inject
	private Client client;

	@Inject
	private ItemManager itemManager;

	@Inject
	OverlayManager overlayManager;

	@Inject
	AutoTagsOverlay overlay;

	private static final String OLD_CONFIG_GROUP_NAME = "auto-tags";

	@Override
	protected void startUp() {
		overlayManager.add(overlay);
		migrate(OLD_CONFIG_GROUP_NAME, AutoTagsConfig.GROUP);
		reloadOverrides();
	}

	@Override
	protected void shutDown() {
		overlayManager.remove(overlay);
	}

	@Inject
	AutoTagsConfig config;

	@Inject ConfigManager configManager;

	@Provides
	AutoTagsConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(AutoTagsConfig.class);
	}


	private void migrate(String oldGroup, String newGroup) {
		String oldKeyPrefix = oldGroup + ".";

		for (String groupQualifiedKey : configManager.getConfigurationKeys(oldKeyPrefix)) {
			String key = groupQualifiedKey.replaceAll(oldKeyPrefix, "");

			String newVal = configManager.getConfiguration(newGroup, key);
			String oldVal = configManager.getConfiguration(oldGroup, key);

			// only migrate values that aren't set
			if (oldVal != null && (newVal == null || newVal.isEmpty())) {
				configManager.setConfiguration(newGroup, key, oldVal);
			}
		}
	}

	private Tag tagForCombatType(CombatType combatType) {
		switch(combatType) {
			case MAGIC:
				return new Tag(config.magicColor());
			case MELEE:
				return new Tag(config.meleeColor());
			case RANGE:
				return new Tag(config.rangedColor());
			case SPECIAL:
				return new Tag(config.specialColor());
			default:
				return Tag.NONE;
		}
	}

	public Tag getTag(int itemId) {
		return tagForCombatType(classifyItem(itemId));
	}

	private CombatType checkOverride(int itemId) {
		var itemName = itemManager.getItemComposition(itemId).getName();

		return overrides
				.entrySet()
				.stream()
				.filter(kv -> kv.getValue().contains(itemName))
				.findFirst()
				.map(Map.Entry::getKey)
				.orElse(CombatType.UNKNOWN);

	}

	/*
		Classifies an item as special, magic, melee, ranged, or ignore.
		Order of precedence for determining item type:
			1. Manual override
			2. Damage bonus
			3. Accuracy bonus

		This handles most uses cases aside from a few niche cases, such as:
			- toxic staff of the dead
			- void equipment (might get around to this one day...)
	 */
	private CombatType classifyItem(int itemId) {
		// allow overriding items that cannot be equipped
		var override = checkOverride(itemId);
		if (override != CombatType.UNKNOWN) {
			return override;
		}

		var itemStats = itemManager.getItemStats(itemId, false);

		if (itemStats == null) {
			return CombatType.UNKNOWN;
		}

		if (!itemStats.isEquipable()) {
			return CombatType.UNKNOWN;
		}

		ItemEquipmentStats itemEquipmentStats = itemStats.getEquipment();

		var damageBonuses = Stream.of(
						new Stat(CombatType.MELEE, itemEquipmentStats.getStr()),
						new Stat(CombatType.RANGE, itemEquipmentStats.getRstr()),
						new Stat(CombatType.MAGIC, itemEquipmentStats.getMdmg()))
				.max(Comparator.comparingInt(Stat::getBonus))
				.flatMap(x -> Optional.ofNullable(x.bonus > 0 ? x.type : null));

		if (damageBonuses.isPresent()) {
			return damageBonuses.get();
		}

		Optional<CombatType> combatType = List.of(
						new Stat(CombatType.MAGIC, itemEquipmentStats.getAmagic()),
						new Stat(CombatType.RANGE, itemEquipmentStats.getArange()),
						new Stat(CombatType.MELEE, itemEquipmentStats.getAcrush()),
						new Stat(CombatType.MELEE, itemEquipmentStats.getAslash()),
						new Stat(CombatType.MELEE, itemEquipmentStats.getAstab()))
				.stream()
				.max(Comparator.comparingInt(Stat::getBonus))
				.flatMap(x -> Optional.ofNullable(x.bonus > 0 ? x.type : null));

		return combatType.orElse(CombatType.UNKNOWN);
	}



	private void reloadOverrides() {
		Type type = new TypeToken<Map<CombatType, Set<String>>>(){}.getType();
		var json = configManager.getConfiguration(AutoTagsConfig.GROUP, "overrides");
		Map<CombatType, Set<String>> overrides = gson.fromJson(json, type);
		if (overrides == null) {
			overrides = Map.of();
		}
		this.overrides = overrides;
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged) {
		if (!configChanged.getGroup().equals(AutoTagsConfig.GROUP)) {
			return;
		}
		overlay.invalidateCache();
		reloadOverrides();
	}

	@AllArgsConstructor
	private static class Stat {
		@Getter
		CombatType type;

		@Getter
		int bonus;
	}

	@Subscribe
	// Adapted from https://github.com/runelite/runelite/blob/master/runelite-client/src/main/java/net/runelite/client/plugins/inventorytags/InventoryTagsPlugin.java#L166
	public void onMenuOpened(final MenuOpened event) {
		if (!client.isKeyPressed(KeyCode.KC_SHIFT)) {
			return;
		}

		final MenuEntry[] entries = event.getMenuEntries();
		for (int idx = entries.length - 1; idx >= 0; --idx)
		{
			final MenuEntry entry = entries[idx];
			final Widget w = entry.getWidget();

			if (w != null && WidgetUtil.componentToInterface(w.getId()) == InterfaceID.INVENTORY
					&& "Examine".equals(entry.getOption()) && entry.getIdentifier() == 10)
			{
				final int itemId = w.getItemId();
				final String itemName = itemManager.getItemComposition(itemId).getName();
				final CombatType selectedType = classifyItem(itemId);

				final MenuEntry parent = client.createMenuEntry(idx)
						.setOption("Set combat type")
						.setTarget(entry.getTarget())
						.setType(MenuAction.RUNELITE_SUBMENU);

				Set<CombatType> choices = new HashSet<>(CombatType.CHOICE_LIST);
				choices.remove(selectedType);

				for (CombatType type : choices) {
					var optionStr = colorForType(type)
							.map(color -> ColorUtil.prependColorTag(type.toString(), color))
							.orElse(type.toString());
					client.createMenuEntry(idx)
							.setOption(optionStr)
							.setType(MenuAction.RUNELITE)
							.setParent(parent)
							.onClick(e -> override(itemName, selectedType, e.getOption()));
				}
			}
		}
	}

	private Optional<Color> colorForType(CombatType combatType) {
		return Optional.ofNullable(tagForCombatType(combatType).color);
	}

	void override(String itemName, CombatType oldType, String newTypeStr) {
		CombatType newType = CombatType.fromString(newTypeStr);

		// need to check because the old type could be unknown
		if (overrides.containsKey(oldType)) {
			overrides.get(oldType).remove(itemName);
		}

		Set<String> newTypeItems = overrides.getOrDefault(newType, new HashSet<>());
		newTypeItems.add(itemName);
		overrides.put(newType, newTypeItems);

		var json = gson.toJson(overrides);
		configManager.setConfiguration(AutoTagsConfig.GROUP, "overrides", json);
	}
}

