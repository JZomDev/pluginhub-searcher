package com.goadinghelper;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.awt.*;

public class GoadingOverlay extends OverlayPanel
{

	private final GoadingConfig config;
	private final Client client;

	@Inject
	private GoadingOverlay(GoadingConfig config, Client client)
	{
		this.config = config;
		this.client = client;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		final String text = "You need to sip a Goading Potion";

		panelComponent.getChildren().clear();

		panelComponent.getChildren().add((LineComponent.builder())
			.left(text)
			.build());

		panelComponent.setPreferredSize(new Dimension(graphics.getFontMetrics().stringWidth(text) - 20, 0));

		panelComponent.setBackgroundColor(config.reminderColor());

		setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
		return panelComponent.render(graphics);
	}

}

package com.goadinghelper;

import com.google.inject.Provides;
import java.awt.event.KeyEvent;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.Notifier;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;

import java.util.Arrays;
import net.runelite.client.util.HotkeyListener;

@Slf4j
@PluginDescriptor(
	name = "Goading Helper"
)
public class GoadingPlugin extends Plugin
{
	private static final int NO_GOADING = -1;

	private static final int GOADING_INTERVAL_TICKS = 6;

	private static final int[] GOADING_POTION_IDS = new int[]{
		ItemID.GOADING_POTION1,
		ItemID.GOADING_POTION2,
		ItemID.GOADING_POTION3,
		ItemID.GOADING_POTION4
	};

	@Inject
	private Client client;

	@Inject
	private GoadingConfig config;

	@Inject
	private InfoBoxManager infoBoxManager;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ItemManager itemManager;

	private GoadingInfobox infoBox;

	@Inject
	private Notifier notifier;

	@Inject
	private GoadingOverlay overlay;

	@Inject
	private GoadingRadiusOverlay radiusOverlay;

	private int nextGoadingTicks = NO_GOADING;

	private boolean hasGoadingPotion = false;

	@Inject
	private KeyManager keyManager;

	@Getter
	private boolean radiusToggled = false;

	@Override
	protected void startUp() throws Exception
	{
		this.infoBox = new GoadingInfobox(this);
		this.infoBoxManager.addInfoBox(this.infoBox);
		this.nextGoadingTicks = NO_GOADING;
		this.infoBox.setImage(itemManager.getImage(ItemID.GOADING_POTION4));
		this.keyManager.registerKeyListener(toggleRadiusHotkeyListener);
	}

	@Override
	protected void shutDown() throws Exception
	{
		this.infoBoxManager.removeInfoBox(this.infoBox);
		this.overlayManager.remove(this.overlay);
		this.overlayManager.remove(this.radiusOverlay);
		this.keyManager.unregisterKeyListener(toggleRadiusHotkeyListener);
	}

	@Subscribe
	protected void onGameTick(GameTick tick)
	{
		--this.nextGoadingTicks;
		updateInfoBox();
	}

	@Subscribe
	protected void onVarbitChanged(VarbitChanged change)
	{
		if (change.getVarbitId() == Varbits.BUFF_GOADING_POTION)
		{
			int value = change.getValue();
			if (value > 0)
			{
				this.nextGoadingTicks = GOADING_INTERVAL_TICKS;
			}
			else
			{
				this.nextGoadingTicks = NO_GOADING;
				this.onGoadingPotionExpired();
			}
		}
	}

	@Subscribe
	protected void onItemContainerChanged(ItemContainerChanged itemContainerChanged)
	{
		if (itemContainerChanged.getContainerId() != InventoryID.INVENTORY.getId())
		{
			return;
		}
		this.hasGoadingPotion = Arrays.stream(GOADING_POTION_IDS).anyMatch(itemContainerChanged.getItemContainer()::contains);
		this.updateOverlay();
	}

	@Subscribe
	protected void onConfigChanged(ConfigChanged event)
	{
		this.updateOverlay();
		this.updateInfoBox();
	}

	private boolean isGoadingActive()
	{
		return this.nextGoadingTicks >= 0;
	}

	private void onGoadingPotionExpired()
	{
		this.updateOverlay();
		if (config.getNotification().isEnabled())
		{
			notifier.notify(config.getNotification(), "Your goading potion has expired");
		}

	}

	private void updateOverlay()
	{
		if (this.isGoadingActive())
		{
			this.overlayManager.add(this.radiusOverlay);
		} else {
			this.overlayManager.remove(this.radiusOverlay);
		}
		if (this.isGoadingActive() || !this.hasGoadingPotion || !config.reminderEnabled())
		{
			this.overlayManager.remove(this.overlay);
			return;
		}
		if (!this.overlayManager.anyMatch(o -> o instanceof GoadingOverlay))
		{
			this.overlayManager.add(this.overlay);
		}
	}

	private void updateInfoBox()
	{
		if (!this.isGoadingActive() || !config.timerEnabled())
		{
			this.infoBoxManager.removeInfoBox(this.infoBox);
			return;
		}
		this.infoBox.setTimer(this.nextGoadingTicks);
		if (!this.infoBoxManager.getInfoBoxes().contains(this.infoBox))
		{
			this.infoBoxManager.addInfoBox(this.infoBox);
		}
	}

	@Provides
	GoadingConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(GoadingConfig.class);
	}

	private final HotkeyListener toggleRadiusHotkeyListener = new HotkeyListener(() -> config.radiusToggleHotkey() )
	{
		@Override
		public void keyPressed(KeyEvent e)
		{
			if (config.radiusToggleHotkey().matches(e))
			{
				radiusToggled = !radiusToggled;
				e.consume();
			}
		 }

		@Override
		public void keyReleased(KeyEvent e)
		{
			hotkeyReleased();
		}

	};

}

package com.goadinghelper;

import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Player;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.config.Keybind;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;

import javax.inject.Inject;
import java.awt.*;
import java.awt.geom.GeneralPath;

import static net.runelite.api.Perspective.LOCAL_TILE_SIZE;

public class GoadingRadiusOverlay extends OverlayPanel
{

	private final GoadingConfig config;
	private final Client client;
	private final GoadingPlugin plugin;

	@Inject
	private GoadingRadiusOverlay(GoadingConfig config, Client client, GoadingPlugin plugin)
	{
		this.config = config;
		this.client = client;
		this.plugin = plugin;
		setPosition(OverlayPosition.DYNAMIC);
		setPriority(Overlay.PRIORITY_LOW);
		setLayer(OverlayLayer.ABOVE_SCENE);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		//Ensure radius overlay can't be toggled off when the toggle hotkey isn't set
		if (!config.radiusEnabled() || (plugin.isRadiusToggled() &&  !Keybind.NOT_SET.equals(config.radiusToggleHotkey())))
		{
			return null;
		}

		// Define the border stroke and color
		Stroke stroke = new BasicStroke((float) config.borderWidth());
		graphics.setStroke(stroke);

		// Draw the square overlay with correct radius and player position
		drawBox(graphics, 4, config.reminderColor(), stroke, 1);

		return null;
	}

	private void drawBox(Graphics2D graphics, int radius, Color borderColour, Stroke borderStroke, int size)
	{
		graphics.setStroke(borderStroke);
		graphics.setColor(borderColour);
		graphics.draw(getSquareAroundPlayerLocation(radius, size));
	}

	private GeneralPath getSquareAroundPlayerLocation(final int radius, final int size)
	{
		GeneralPath path = new GeneralPath(GeneralPath.WIND_EVEN_ODD);

		// Retrieve the player from the client
		Player player = client.getLocalPlayer();
		if (player == null)
		{
			return null; // No player, nothing to render
		}

		// Get the player's current local location
		LocalPoint playerLocation = player.getLocalLocation();
		if (playerLocation == null)
		{
			return null; // Player location not available, skip render
		}

		// Get world position
		WorldPoint worldPoint = WorldPoint.fromLocalInstance(client, playerLocation);
		if (worldPoint == null)
		{
			return null; // World position not available, skip render
		}

		// Calculate the corners of the square based on player's world point
		final int startX = worldPoint.getX() - radius;
		final int startY = worldPoint.getY() - radius;
		final int z = worldPoint.getPlane();
		final int diameter = 2 * radius + size;

		// Corner 1: (startX, startY)
		moveTo(path, startX, startY, z);

		// Corner 2: (startX + diameter, startY)
		for (int i = 1; i <= diameter; i++)
		{
			lineTo(path, startX + i, startY, z);
		}

		// Corner 3: (startX + diameter, startY + diameter)
		for (int i = 1; i <= diameter; i++)
		{
			lineTo(path, startX + diameter, startY + i, z);
		}

		// Corner 4: (startX, startY + diameter)
		for (int i = 1; i <= diameter; i++)
		{
			lineTo(path, startX + diameter - i, startY + diameter, z);
		}

		// Close the square back to Corner 1
		for (int i = 1; i <= diameter-1; i++)
		{
			lineTo(path, startX, startY + diameter - i, z);
		}
		path.closePath();

		return path;
	}

	private boolean moveTo(GeneralPath path, final int x, final int y, final int z)
	{
		Point point = XYToPoint(x, y, z);
		if (point != null)
		{
			path.moveTo(point.getX(), point.getY());
			return true;
		}
		return false;
	}

	private void lineTo(GeneralPath path, final int x, final int y, final int z)
	{
		Point point = XYToPoint(x, y, z);
		if (point != null)
		{
			path.lineTo(point.getX(), point.getY());
		}
	}

	private Point XYToPoint(int x, int y, int z)
	{
		LocalPoint localPoint = LocalPoint.fromWorld(client, x, y);
		if (localPoint == null)
		{
			return null;
		}
		return Perspective.localToCanvas(
			client,
			new LocalPoint(localPoint.getX() - LOCAL_TILE_SIZE / 2, localPoint.getY() - LOCAL_TILE_SIZE / 2),
			z);
	}
}

package com.goadinghelper;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("goading")
public interface GoadingConfig extends Config
{
	@ConfigSection(name = "Notifications",
		description = "Configuration for notifications",
		position = 1)
	String notificationSection = "notificationSection";

	@ConfigSection(name = "Timers",
		description = "Configuration for timers",
		position = 2)
	String timerSection = "timerSection";

	@ConfigSection(name = "Radius",
		description = "Configuration for aggression radius",
		position = 3)
	String radiusSection = "radiusSection";

	@ConfigItem(
		keyName = "reminderEnabled",
		name = "Enable reminder panel",
		description = "Show an overlay reminding you to sip a Goading Potion",
		position = 1,
		section = notificationSection
	)
	default boolean reminderEnabled()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
		keyName = "reminderColor",
		name = "Reminder Color",
		description = "The color to use for the infobox.",
		position = 2,
		section = notificationSection
	)
	default Color reminderColor()
	{
		return new Color(255, 0, 0, 150);
	}

	@ConfigItem(
		keyName = "notificationEnabled",
		name = "Enable runelite notification",
		description = "Uses notification configured in Runelite settings when goading effect expires",
		position = 3,
		section = notificationSection
	)
	default Notification getNotification()
	{
		return Notification.OFF;
	}

	@ConfigItem(
		keyName = "timerEnabled",
		name = "Enable goading timer",
		description = "Show an infobox with a timer ticking down to the next aggression check",
		section = timerSection
	)
	default boolean timerEnabled()
	{
		return false;
	}

	@ConfigItem(
		keyName = "enableGoadingRadius",
		name = "Enable Goading Radius",
		description = "Goading radius border width",
		position = 1,
		section = radiusSection
	)
	default boolean radiusEnabled()
	{
		return false;
	}

	@ConfigItem(
		keyName = "radiusToggleHotkey",
		name = "Goading Radius Hotkey",
		description = "Hotkey to toggle goading radius",
		position = 2,
		section = radiusSection
	)
	default Keybind radiusToggleHotkey()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
		keyName = "borderWidth",
		name = "Border width",
		description = "Goading radius border width",
		position = 3,
		section = radiusSection
	)
	default int borderWidth()
	{
		return 3;
	}
}

package com.goadinghelper;

import lombok.Getter;
import lombok.Setter;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.ui.overlay.infobox.InfoBox;

import java.awt.*;

public class GoadingInfobox extends InfoBox
{

	@Getter
	@Setter
	private int timer = -1;

	public GoadingInfobox(Plugin plugin)
	{
		super(null, plugin);
	}

	@Override
	public String getText()
	{
		// count 6 -> 1 instead of 5 -> 0
		return Integer.toString(timer + 1);
	}

	@Override
	public Color getTextColor()
	{
		return timer == 5 ? Color.GREEN : Color.WHITE;
	}

	@Override
	public String getTooltip()
	{
		return "Goading Potion";
	}
}

package com.goadinghelper;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class GoadingPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(GoadingPlugin.class);
		RuneLite.main(args);
	}
}
