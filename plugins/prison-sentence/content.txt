package com.prison_sentence;

import com.prison_sentence.sources.Current;
import com.prison_sentence.sources.ISource;
import com.prison_sentence.sources.Manual;
import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Item;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;

import java.time.Instant;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;

@Slf4j
@PluginDescriptor(
	name = "PrisonSentence"
)
public class PrisonSentencePlugin extends Plugin
{
	@Inject
	public Client client;

	@Inject
	private PrisonSentenceConfig config;

	@Inject
	public ItemManager itemManager;
	@Inject
	public InfoBoxManager infoBoxManager;
	@Inject
	public ClientThread clientThread;

	private Current myCurrent = null;
	private Sentence sentence = null;

	private boolean myLoadInitialValues = false;

	private List<String> myErrors = new ArrayList<>();

	@Override
	protected void startUp() throws Exception
	{
		myCurrent = new Current(this);
		Setup();

		if (client.getGameState() == GameState.LOGGED_IN)
		{
			myLoadInitialValues = true;
		}
	}

	@Override
	protected void shutDown() throws Exception
	{
		TearDown();
		myCurrent = null;
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() == GameState.LOGGED_IN)
		{
			FlushErrors();
			myLoadInitialValues = true;
		}
	}

	@Subscribe
	public void onGameTick(GameTick gameTick)
	{
		if (myLoadInitialValues)
		{
			myCurrent.LoadInitialValues();
			myLoadInitialValues = false;
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged)
	{
		if (!configChanged.getGroup().equals(Constants.CONFIG_NAME))
			return;

		ReloadConfig();
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged varbitChanged)
	{
		assert myCurrent != null;

		myCurrent.onVarbitChanged(varbitChanged);
	}

	@Provides
    PrisonSentenceConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(PrisonSentenceConfig.class);
	}

	public void Error(String aMessage)
	{
		if (!client.isClientThread())
		{
			clientThread.invokeLater(() -> Error(aMessage));
			return;
		}

		if (client.getGameState() != GameState.LOGGED_IN)
		{
			myErrors.add(aMessage);
			return;
		}

		client.addChatMessage(ChatMessageType.PLAYERRELATED, "", "[PrisonSentence] " + aMessage, null);
	}

	void FlushErrors()
	{
		for (String error : myErrors)
		{
			client.addChatMessage(ChatMessageType.PLAYERRELATED, "",  "[PrisonSentence] " + error, null);
		}

		myErrors.clear();
	}

	void ReloadConfig()
	{
		TearDown();
		Setup();
	}

	void Setup()
	{
		assert sentence == null;

		ISource source = null;

		try
		{
			source = new Manual(config.period(), Instant.parse(config.startTime()), config.startAmount() );
		}
		catch (DateTimeParseException exception)
		{
			Error("The manual start date could not be parsed: " + config.startTime());
			Error(exception.getMessage());
			return;
		}

		sentence = new Sentence(source, myCurrent, config.prisonType(), this, config.amount());
	}

	void TearDown()
	{
		if (sentence != null)
		{
			sentence.Shutdown();
			sentence = null;
		}
	}
}

package com.prison_sentence;

import com.prison_sentence.enums.PrisonType;
import com.prison_sentence.enums.TimePeriod;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

import java.time.Instant;

@ConfigGroup("prison_sentence")
public interface PrisonSentenceConfig extends Config
{
	@ConfigItem(
			keyName = "prison_type",
			name = "Prison type",
			description = "The type of prison you are in"
	)
	default PrisonType prisonType()
	{
		return PrisonType.GAUNTLET;
	}

	@ConfigItem(
			keyName = "sentence_amount",
			name = "Amount per period",
			description = "The amount to do per period"
	)
	default int amount() { return 1; }

	@ConfigItem(
			keyName = "sentence_period",
			name = "Period",
			description = "How long a period is"
	)
	default TimePeriod period() { return TimePeriod.DAILY; }

	@ConfigItem(
			keyName = "start_time",
			name = "Start time",
			description = "The time when your sentence started"
	)
	default String startTime() { return Instant.now().toString(); }

	@ConfigItem(
			keyName = "start_amount",
			name = "Start amount",
			description = "The amount you had when your sentence started"
	)
	default int startAmount() { return 0; }
}

package com.prison_sentence.enums;

public enum TimePeriod {
    DAILY,
    WEEKLY,
    MONTHLY
}

package com.prison_sentence.enums;

public enum PrisonType {

    GAUNTLET,
    CORRUPTED_GAUNTLET,
    CHAMBERS_OF_XERIC
    //THEATRE_OF_BLOOD,
    //TOOMBS_OF_AMASCUT
}

package com.prison_sentence.sources;

import com.prison_sentence.PrisonSentencePlugin;
import com.prison_sentence.enums.PrisonType;
import com.prison_sentence.ui.Translators;
import net.runelite.api.events.VarbitChanged;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Current {

    PrisonSentencePlugin myPlugin;

    Map<Integer, Integer> myStashedKC = new HashMap<>();

    List<Runnable> mySubscribers = new ArrayList<>();

    public Current(PrisonSentencePlugin aPlugin)
    {
        myPlugin = aPlugin;

        for (PrisonType prison : PrisonType.values())
        {
            Integer varpID = Translators.VarpIdFromPrisonType(prison);
            myStashedKC.put(varpID, -1);
        }
    }

    public void LoadInitialValues()
    {
        for (PrisonType prison : PrisonType.values())
        {
            Integer varpID = Translators.VarpIdFromPrisonType(prison);
            myStashedKC.put(varpID, myPlugin.client.getVarpValue(varpID));
        }
    }

    public void OnChange(Runnable aRunnable)
    {
        mySubscribers.add(aRunnable);
    }

    public int GetCurrentAmount(PrisonType aType)
    {
        return myStashedKC.get(Translators.VarpIdFromPrisonType(aType));
    }

    public boolean IsReady(PrisonType aPrisonType)
    {
        return myStashedKC.get(Translators.VarpIdFromPrisonType(aPrisonType)) != -1;
    }

    public void onVarbitChanged(VarbitChanged varbitChanged)
    {
        Integer id = varbitChanged.getVarpId();

        if (!myStashedKC.keySet().contains(id))
            return;

        myStashedKC.put(id, varbitChanged.getValue());

        for (Runnable sub : mySubscribers)
            sub.run();
    }
}

package com.prison_sentence.sources;

import com.prison_sentence.TimeUtils;
import com.prison_sentence.enums.PrisonType;
import com.prison_sentence.enums.TimePeriod;

import java.time.Instant;

public class Manual implements ISource
{
    Instant myStartTime;
    TimePeriod myPeriod;
    int myStartAmount;

    public Manual(TimePeriod aPeriod, Instant aStartTime, int aStartAmount)
    {
        myStartTime = aStartTime;
        myPeriod = aPeriod;
        myStartAmount = aStartAmount;
    }

    @Override
    public boolean IsReady()
    {
        return true;
    }

    @Override
    public int GetAmountAtStartOfPeriod(PrisonType aType, int aTarget)
    {
        switch (myPeriod)
        {
            case DAILY:
                return myStartAmount + aTarget * TimeUtils.DaysSince(myStartTime);
            case WEEKLY:
                return myStartAmount + aTarget * TimeUtils.WeeksSince(myStartTime);
            case MONTHLY:
                return myStartAmount + aTarget * TimeUtils.MonthsSince(myStartTime);
        }

        assert false;
        return -1;
    }
}

package com.prison_sentence.sources;

import com.prison_sentence.enums.PrisonType;

public interface ISource {

    boolean IsReady();
    int GetAmountAtStartOfPeriod(PrisonType aType, int aTarget);
}

package com.prison_sentence;

import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;

public class TimeUtils
{
    public static int DaysSince(Instant aInstant)
    {
        try
        {
            return (int)ChronoUnit.DAYS.between(aInstant, Instant.now());
        }
        catch (Exception e)
        {
            return  0;
        }
    }
    public static int WeeksSince(Instant aInstant)
    {
        return DaysSince(aInstant) / 7;
    }
    public static int MonthsSince(Instant aInstant)
    {
        try
        {
            LocalDate start = LocalDate.ofInstant(aInstant, ZoneId.systemDefault());
            LocalDate now = LocalDate.now();

            return (int)ChronoUnit.MONTHS.between(start, now);
        }
        catch (Exception e)
        {
            return  0;
        }
    }
}

package com.prison_sentence;

public class Constants
{
    public static String CONFIG_NAME = "prison_sentence";
}

package com.prison_sentence.ui;

import com.prison_sentence.enums.PrisonType;
import com.prison_sentence.enums.TimePeriod;
import net.runelite.api.ItemID;
import net.runelite.api.VarPlayer;
import net.runelite.api.Varbits;

public class Translators {

    public static int IconFromPrisonType(PrisonType aPrisonType)
    {
        switch (aPrisonType)
        {
            case GAUNTLET:          return ItemID.YOUNGLLEF;
            case CORRUPTED_GAUNTLET: return ItemID.CORRUPTED_YOUNGLLEF;
            case CHAMBERS_OF_XERIC:   return ItemID.OLMLET;
            //case THEATRE_OF_BLOOD:    return ItemID.LIL_ZIK;
            //case TOOMBS_OF_AMASCUT:   return ItemID.TUMEKENS_GUARDIAN;

            default:                return ItemID.CABBAGE;
        }
    }

    public static Integer VarpIdFromPrisonType(PrisonType aPrisonType)
    {
        switch (aPrisonType)
        {
            case GAUNTLET:            return 2353;
            case CORRUPTED_GAUNTLET:  return 2354;
            case CHAMBERS_OF_XERIC:   return 1532;
            //case THEATRE_OF_BLOOD:    return -1; // TODO
            //case TOOMBS_OF_AMASCUT:   return -1; // TODO

            default:                return -1;
        }
    }

    public static String FriendlyName(PrisonType aPrisonType)
    {
        switch (aPrisonType)
        {
            case GAUNTLET:              return "Gauntlet";
            case CORRUPTED_GAUNTLET:    return "Corrupted Guantlet";
            case CHAMBERS_OF_XERIC:     return "Chambers of Xeric";
            //case THEATRE_OF_BLOOD:    return -1; // TODO
            //case TOOMBS_OF_AMASCUT:   return -1; // TODO

            default:                    return "Unkown";
        }
    }

    public static String FriendlyName(TimePeriod aTimePeriod)
    {
        switch (aTimePeriod)
        {
            case DAILY:     return "daily";
            case WEEKLY:    return "weekly";
            case MONTHLY:   return "monthly";

            default:        return "Unkown";
        }
    }
}

package com.prison_sentence.ui;

import com.prison_sentence.PrisonSentencePlugin;
import com.prison_sentence.Sentence;
import com.prison_sentence.enums.PrisonType;
import com.prison_sentence.sources.Current;
import com.prison_sentence.sources.ISource;
import net.runelite.client.ui.overlay.infobox.InfoBox;

import java.awt.*;

public class SentenceInfoBox extends InfoBox {

    Sentence mySentence;

    public SentenceInfoBox(Sentence aSentence, PrisonType aPrisonType, PrisonSentencePlugin aPlugin)
    {
        super(aPlugin.itemManager.getImage(Translators.IconFromPrisonType(aPrisonType)), aPlugin);

        mySentence = aSentence;

        setTooltip(mySentence.ToTooltip());
    }

    @Override
    public String getText()
    {
        if (mySentence.GetProgress() >= 0)
        {
            return mySentence.GetProgress() + "/" + mySentence.GetTarget();
        }
        else
        {
            return "0/" + (mySentence.GetTarget() - mySentence.GetProgress());
        }
    }

    @Override
    public Color getTextColor()
    {
        return Color.white;
    }

}

package com.prison_sentence;

import com.prison_sentence.enums.PrisonType;
import com.prison_sentence.sources.Current;
import com.prison_sentence.sources.ISource;
import com.prison_sentence.ui.SentenceInfoBox;
import com.prison_sentence.ui.Translators;
import net.runelite.client.util.ColorUtil;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Sentence {

    Boolean myShutDownRequested = false;

    ISource mySource;
    Current myCurrent;

    PrisonType myPrisonType;
    PrisonSentencePlugin myPlugin;
    SentenceInfoBox myInfobox = null;

    Timer mySetupTimer;

    int myProgress = -1;
    int myTarget;

    public Sentence(ISource aSource, Current aCurrent, PrisonType aPrisonType, PrisonSentencePlugin aPlugin, int aTarget)
    {
        mySource = aSource;
        myCurrent = aCurrent;

        myTarget = aTarget;

        myPrisonType = aPrisonType;
        myPlugin = aPlugin;

        mySetupTimer = new Timer(500, (ev) -> Setup());
        mySetupTimer.setRepeats(true);

        mySetupTimer.start();
    }

    public void Shutdown()
    {
        synchronized (myShutDownRequested)
        {
            if (myShutDownRequested)
                return;

            myShutDownRequested = true;
            TearDown();
        }
    }

    public int GetProgress()
    {
        return myProgress;
    }

    public int GetTarget()
    {
        return myTarget;
    }

    public String ToTooltip()
    {
        return "Time to get back to " + ColorUtil.wrapWithColorTag(Translators.FriendlyName(myPrisonType), Color.ORANGE);
    }

    void Setup()
    {
        assert myInfobox == null;

        synchronized (myShutDownRequested)
        {
            if (myShutDownRequested)
            {
                mySetupTimer.stop();
                return;
            }

            if (!myCurrent.IsReady(myPrisonType))
                return;

            if (!mySource.IsReady())
                return;

            mySetupTimer.stop();

            myProgress = myCurrent.GetCurrentAmount(myPrisonType) - mySource.GetAmountAtStartOfPeriod(myPrisonType, myTarget);

            if (myProgress >= myTarget)
            {
                Shutdown();
                return;
            }

            myInfobox = new SentenceInfoBox(this, myPrisonType, myPlugin);

            myPlugin.infoBoxManager.addInfoBox(myInfobox);

            myCurrent.OnChange(() -> {
                myProgress = myCurrent.GetCurrentAmount(myPrisonType) - mySource.GetAmountAtStartOfPeriod(myPrisonType, myTarget);

                if (myProgress >= myTarget)
                    Shutdown();
            });
        }
    }

    void TearDown()
    {
        if (myInfobox != null)
        {
            myPlugin.infoBoxManager.removeInfoBox(myInfobox);
        }
    }
}

package com.prison_sentence;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PrisonSentencePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PrisonSentencePlugin.class);
		RuneLite.main(args);
	}
}
