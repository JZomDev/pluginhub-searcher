package com.tayaramisu;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class JingleJinglePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(JingleJinglePlugin.class);
		RuneLite.main(args);
	}
}
/**
 * Big text generator: https://fsymbols.com/generators/tarty/
 */

package com.tayaramisu;

import net.runelite.client.config.*;

@ConfigGroup(JingleJingleConfig.GROUP)
public interface JingleJingleConfig extends Config {
    String GROUP = "jingles";

    /**
     * ░██████╗░███████╗███╗░░██╗███████╗██████╗░░█████╗░██╗░░░░░
     * ██╔════╝░██╔════╝████╗░██║██╔════╝██╔══██╗██╔══██╗██║░░░░░
     * ██║░░██╗░█████╗░░██╔██╗██║█████╗░░██████╔╝███████║██║░░░░░
     * ██║░░╚██╗██╔══╝░░██║╚████║██╔══╝░░██╔══██╗██╔══██║██║░░░░░
     * ╚██████╔╝███████╗██║░╚███║███████╗██║░░██║██║░░██║███████╗
     * ░╚═════╝░╚══════╝╚═╝░░╚══╝╚══════╝╚═╝░░╚═╝╚═╝░░╚═╝╚══════╝
     */

    @Range(min = 0, max = 200)
    @ConfigItem(
            keyName = "jingleVolume",
            name = "Jingle volume",
            description = "How loud this plugin's jingles are played",
            position = 0
    )
    default int jingleVolume() {
        return 100;
    }

    @ConfigItem(
            keyName = "playCollectionLog",
            name = "Collection Log",
            description = "Should a jingle play when you fill a new collection log slot",
            position = 1
    )
    default boolean playCollectionLog() {
        return true;
    }

    @ConfigItem(
            keyName = "collectionLogJingle",
            name = "Collection Log Jingle",
            description = "The jingle to play when you fill a new collection log slot",
            position = 2
    )
    default Sound collectionLogJingle() {
        return Sound.LEAGUE_AREA_UNLOCK;
    }

    @ConfigItem(
            keyName = "playCombatTask",
            name = "Combat Task",
            description = "Should a jingle play when you complete a new combat task",
            position = 3
    )
    default boolean playCombatTask() {
        return true;
    }

    @ConfigItem(
            keyName = "combatTaskJingle",
            name = "Combat Task Jingle",
            description = "The jingle to play when you complete a new combat task",
            position = 4
    )
    default Sound combatTaskJingle() {
        return Sound.LEAGUE_TASK_COMPLETE;
    }

    @ConfigItem(
            keyName = "playMahomes",
            name = "Mahogany Homes",
            description = "Should a jingle play when you complete a Mahogany Homes contract",
            position = 5
    )
    default boolean playMahomes() {
        return true;
    }

    @ConfigItem(
            keyName = "mahomesJingle",
            name = "Mahogany Homes Jingle",
            description = "The jingle to play when you complete a Mahogany Homes contract",
            position = 6
    )
    default Sound mahomesJingle() {
        return Sound.SCHEMATICS_COMPLETED;
    }

    @ConfigItem(
            keyName = "playFarmingContract",
            name = "Farming Contract",
            description = "Should a jingle play when you complete a Farming Contract",
            position = 7
    )
    default boolean playFarmingContract() {
        return true;
    }

    @ConfigItem(
            keyName = "farmingContractJingle",
            name = "Farming Contract Jingle",
            description = "The jingle to play when you complete a Farming Contract",
            position = 8
    )
    default Sound farmingContractJingle() {
        return Sound.POSTIE_PETE_THEME;
    }

    /**
     * ░█████╗░░█████╗░██╗░░██╗██╗███████╗██╗░░░██╗███████╗███╗░░░███╗███████╗███╗░░██╗████████╗
     * ██╔══██╗██╔══██╗██║░░██║██║██╔════╝██║░░░██║██╔════╝████╗░████║██╔════╝████╗░██║╚══██╔══╝
     * ███████║██║░░╚═╝███████║██║█████╗░░╚██╗░██╔╝█████╗░░██╔████╔██║█████╗░░██╔██╗██║░░░██║░░░
     * ██╔══██║██║░░██╗██╔══██║██║██╔══╝░░░╚████╔╝░██╔══╝░░██║╚██╔╝██║██╔══╝░░██║╚████║░░░██║░░░
     * ██║░░██║╚█████╔╝██║░░██║██║███████╗░░╚██╔╝░░███████╗██║░╚═╝░██║███████╗██║░╚███║░░░██║░░░
     * ╚═╝░░╚═╝░╚════╝░╚═╝░░╚═╝╚═╝╚══════╝░░░╚═╝░░░╚══════╝╚═╝░░░░░╚═╝╚══════╝╚═╝░░╚══╝░░░╚═╝░░░
     *
     * ██████╗░██╗░█████╗░██████╗░██╗███████╗░██████╗
     * ██╔══██╗██║██╔══██╗██╔══██╗██║██╔════╝██╔════╝
     * ██║░░██║██║███████║██████╔╝██║█████╗░░╚█████╗░
     * ██║░░██║██║██╔══██║██╔══██╗██║██╔══╝░░░╚═══██╗
     * ██████╔╝██║██║░░██║██║░░██║██║███████╗██████╔╝
     * ╚═════╝░╚═╝╚═╝░░╚═╝╚═╝░░╚═╝╚═╝╚══════╝╚═════╝░
     */
    @ConfigSection(
            name = "Achievement Diary Settings",
            description = "Jingle settings for achievement diary tasks",
            position = 9,
            closedByDefault = true
    )
    String achievementDiarySettings = "achievementDiarySettings";

    @ConfigItem(
            keyName = "playArdougneDiary",
            name = "Ardougne Diary",
            description = "Should a jingle play when you complete an Ardougne achievement diary task",
            position = 0,
            section = "achievementDiarySettings"
    )
    default boolean playArdougneDiary() {
        return true;
    }
    @ConfigItem(
            keyName = "ardougneTaskJingle",
            name = "Task Jingle",
            description = "The jingle to play when you complete an Ardougne achievement diary task",
            position = 1,
            section = "achievementDiarySettings"
    )
    default Sound ardougneTaskJingle() {
        return Sound.DICE_WIN;
    }
    @ConfigItem(
            keyName = "ardougneCompletionJingle",
            name = "Completion Jingle",
            description = "The jingle to play when you complete any tier of the Ardougne achievement diary",
            position = 2,
            section = "achievementDiarySettings"
    )
    default Sound ardougneCompletionJingle() {
        return Sound.SHAIKAHAN_DEFEATED;
    }

    @ConfigItem(
            keyName = "playDesertDiary",
            name = "Desert Diary",
            description = "Should a jingle play when you complete a Desert achievement diary task",
            position = 3,
            section = "achievementDiarySettings"
    )
    default boolean playDesertDiary() {
        return true;
    }
    @ConfigItem(
            keyName = "desertTaskJingle",
            name = "Task Jingle",
            description = "The jingle to play when you complete a Desert achievement diary task",
            position = 4,
            section = "achievementDiarySettings"
    )
    default Sound desertTaskJingle() {
        return Sound.AGILITY_PYRAMID;
    }
    @ConfigItem(
            keyName = "desertCompletionJingle",
            name = "Completion Jingle",
            description = "The jingle to play when you complete any tier of the Desert achievement diary",
            position = 5,
            section = "achievementDiarySettings"
    )
    default Sound desertCompletionJingle() {
        return Sound.TOA_PATH_COMPLETE;
    }

    @ConfigItem(
            keyName = "playFaladorDiary",
            name = "Falador Diary",
            description = "Should a jingle play when you complete a Falador achievement diary task",
            position = 6,
            section = "achievementDiarySettings"
    )
    default boolean playFaladorDiary() {
        return true;
    }
    @ConfigItem(
            keyName = "faladorTaskJingle",
            name = "Task Jingle",
            description = "The jingle to play when you complete a Falador achievement diary task",
            position = 7,
            section = "achievementDiarySettings"
    )
    default Sound faladorTaskJingle() {
        return Sound.RECRUIT_DRIVE_1;
    }
    @ConfigItem(
            keyName = "faladorCompletionJingle",
            name = "Completion Jingle",
            description = "The jingle to play when you complete any tier of the Falador achievement diary",
            position = 8,
            section = "achievementDiarySettings"
    )
    default Sound faladorCompletionJingle() {
        return Sound.RECRUIT_DRIVE_2;
    }

    @ConfigItem(
            keyName = "playFremennikDiary",
            name = "Fremennik Diary",
            description = "Should a jingle play when you complete a Fremennik achievement diary task",
            position = 9,
            section = "achievementDiarySettings"
    )
    default boolean playFremennikDiary() {
        return true;
    }
    @ConfigItem(
            keyName = "fremennikTaskJingle",
            name = "Task Jingle",
            description = "The jingle to play when you complete a Fremennik achievement diary task",
            position = 10,
            section = "achievementDiarySettings"
    )
    default Sound fremennikTaskJingle() {
        return Sound.FREM_BERATING_KING;
    }
    @ConfigItem(
            keyName = "fremennikCompletionJingle",
            name = "Completion Jingle",
            description = "The jingle to play when you complete any tier of the Fremennik achievement diary",
            position = 11,
            section = "achievementDiarySettings"
    )
    default Sound fremennikCompletionJingle() {
        return Sound.KELDAGRIM_TRADING;
    }

    @ConfigItem(
            keyName = "playKandarinDiary",
            name = "Kandarin Diary",
            description = "Should a jingle play when you complete a Kandarin achievement diary task",
            position = 12,
            section = "achievementDiarySettings"
    )
    default boolean playKandarinDiary() {
        return true;
    }
    @ConfigItem(
            keyName = "kandarinTaskJingle",
            name = "Task Jingle",
            description = "The jingle to play when you complete a Kandarin achievement diary task",
            position = 13,
            section = "achievementDiarySettings"
    )
    default Sound kandarinTaskJingle() {
        return Sound.BURTHORPE_GAMES;
    }
    @ConfigItem(
            keyName = "kandarinCompletionJingle",
            name = "Completion Jingle",
            description = "The jingle to play when you complete any tier of the Kandarin achievement diary",
            position = 14,
            section = "achievementDiarySettings"
    )
    default Sound kandarinCompletionJingle() {
        return Sound.GNOME_SUCCESS;
    }

    @ConfigItem(
            keyName = "playKaramjaDiary",
            name = "Karamja Diary",
            description = "Should a jingle play when you complete a Karamja achievement diary task",
            position = 15,
            section = "achievementDiarySettings"
    )
    default boolean playKaramjaDiary() {
        return false; // Karamja already has jingles, so don't override them by default
    }
    @ConfigItem(
            keyName = "karamjaTaskJingle",
            name = "Task Jingle",
            description = "The jingle to play when you complete a Karamja achievement diary task",
            position = 16,
            section = "achievementDiarySettings"
    )
    default Sound karamjaTaskJingle() {
        return Sound.GNOMEBALL_GOAL;
    }
    @ConfigItem(
            keyName = "karamjaCompletionJingle",
            name = "Completion Jingle",
            description = "The jingle to play when you complete any tier of the Karamja achievement diary",
            position = 17,
            section = "achievementDiarySettings"
    )
    default Sound karamjaCompletionJingle() {
        return Sound.MM1_JUNGLE_DEMON;
    }

    @ConfigItem(
            keyName = "playKourendDiary",
            name = "Kourend Diary",
            description = "Should a jingle play when you complete a Kourend & Kebos achievement diary task",
            position = 18,
            section = "achievementDiarySettings"
    )
    default boolean playKourendDiary() {
        return true;
    }
    @ConfigItem(
            keyName = "kourendTaskJingle",
            name = "Task Jingle",
            description = "The jingle to play when you complete a Kourend & Kebos achievement diary task",
            position = 19,
            section = "achievementDiarySettings"
    )
    default Sound kourendTaskJingle() {
        return Sound.RFD_LUMBRIDGE_GUIDE;
    }
    @ConfigItem(
            keyName = "kourendCompletionJingle",
            name = "Completion Jingle",
            description = "The jingle to play when you complete any tier of the Kourend & Kebos achievement diary",
            position = 20,
            section = "achievementDiarySettings"
    )
    default Sound kourendCompletionJingle() {
        return Sound.RATCATCHER_KING_DIES;
    }

    @ConfigItem(
            keyName = "playLumbridgeDiary",
            name = "Lumbridge Diary",
            description = "Should a jingle play when you complete a Lumbridge achievement diary task",
            position = 21,
            section = "achievementDiarySettings"
    )
    default boolean playLumbridgeDiary() {
        return true;
    }
    @ConfigItem(
            keyName = "lumbridgeTaskJingle",
            name = "Task Jingle",
            description = "The jingle to play when you complete a Lumbridge achievement diary task",
            position = 22,
            section = "achievementDiarySettings"
    )
    default Sound lumbridgeTaskJingle() {
        return Sound.EASTER_2005;
    }
    @ConfigItem(
            keyName = "lumbridgeCompletionJingle",
            name = "Completion Jingle",
            description = "The jingle to play when you complete any tier of the Lumbridge achievement diary",
            position = 23,
            section = "achievementDiarySettings"
    )
    default Sound lumbridgeCompletionJingle() {
        return Sound.LEAGUE_TUT_COMPLETE;
    }

    @ConfigItem(
            keyName = "playMorytaniaDiary",
            name = "Morytania Diary",
            description = "Should a jingle play when you complete a Morytania achievement diary task",
            position = 24,
            section = "achievementDiarySettings"
    )
    default boolean playMorytaniaDiary() {
        return true;
    }
    @ConfigItem(
            keyName = "morytaniaTaskJingle",
            name = "Task Jingle",
            description = "The jingle to play when you complete a Morytania achievement diary task",
            position = 25,
            section = "achievementDiarySettings"
    )
    default Sound morytaniaTaskJingle() {
        return Sound.TEMPLE_TREK_SUCCESS;
    }
    @ConfigItem(
            keyName = "morytaniaCompletionJingle",
            name = "Completion Jingle",
            description = "The jingle to play when you complete any tier of the Morytania achievement diary",
            position = 26,
            section = "achievementDiarySettings"
    )
    default Sound morytaniaCompletionJingle() {
        return Sound.TOB_WAVE_COMPLETE;
    }

    @ConfigItem(
            keyName = "playVarrockDiary",
            name = "Varrock Diary",
            description = "Should a jingle play when you complete a Varrock achievement diary task",
            position = 27,
            section = "achievementDiarySettings"
    )
    default boolean playVarrockDiary() {
        return true;
    }
    @ConfigItem(
            keyName = "varrockTaskJingle",
            name = "Task Jingle",
            description = "The jingle to play when you complete a Varrock achievement diary task",
            position = 28,
            section = "achievementDiarySettings"
    )
    default Sound varrockTaskJingle() {
        return Sound.FORGETTABLE_PUZZLE;
    }
    @ConfigItem(
            keyName = "varrockCompletionJingle",
            name = "Completion Jingle",
            description = "The jingle to play when you complete any tier of the Varrock achievement diary",
            position = 29,
            section = "achievementDiarySettings"
    )
    default Sound varrockCompletionJingle() {
        return Sound.POSTIE_PETE_THEME;
    }

    @ConfigItem(
            keyName = "playWesternProvincesDiary",
            name = "Western Provinces Diary",
            description = "Should a jingle play when you complete a Western Provinces achievement diary task",
            position = 30,
            section = "achievementDiarySettings"
    )
    default boolean playWesternProvincesDiary() {
        return true;
    }
    @ConfigItem(
            keyName = "westernProvincesTaskJingle",
            name = "Task Jingle",
            description = "The jingle to play when you complete a Western Provinces achievement diary task",
            position = 31,
            section = "achievementDiarySettings"
    )
    default Sound westernProvincesTaskJingle() {
        return Sound.CASTLE_WARS_WIN;
    }
    @ConfigItem(
            keyName = "westernProvincesCompletionJingle",
            name = "Completion Jingle",
            description = "The jingle to play when you complete any tier of the Western Provinces achievement diary",
            position = 32,
            section = "achievementDiarySettings"
    )
    default Sound westernProvincesCompletionJingle() {
        return Sound.SECURITY_BOX_HEALTH;
    }

    @ConfigItem(
            keyName = "playWildernessDiary",
            name = "Wilderness Diary",
            description = "Should a jingle play when you complete a Wilderness achievement diary task",
            position = 33,
            section = "achievementDiarySettings"
    )
    default boolean playWildernessDiary() {
        return true;
    }
    @ConfigItem(
            keyName = "wildernessTaskJingle",
            name = "Task Jingle",
            description = "The jingle to play when you complete a Wilderness achievement diary task",
            position = 34,
            section = "achievementDiarySettings"
    )
    default Sound wildernessTaskJingle() {
        return Sound.JORMUNGAND_DEFEATED;
    }
    @ConfigItem(
            keyName = "wildernessCompletionJingle",
            name = "Completion Jingle",
            description = "The jingle to play when you complete any tier of the Wilderness achievement diary",
            position = 35,
            section = "achievementDiarySettings"
    )
    default Sound wildernessCompletionJingle() {
        return Sound.FIGHT_PITS_CHAMP;
    }
}

package com.tayaramisu;

public enum Sound {
    AGILITY_PYRAMID("Agility_Pyramid_Pyramid_Top.wav"),
    AIR_GUITAR("Air_Guitar.wav"),
    BARB_ASS_WAVE("Barb_Ass_Wave_Complete.wav"),
    BARROWS_COMPLETE("Barrows_Complete.wav"),
    BURTHORPE_GAMES("Burthorpe_Games_Room_Draw.wav"),
    CACTI_CHECK("Cacti_Health_Check.wav"),
    CASTLE_WARS_WIN("Castle_Wars_Win.wav"),
    DELIVERY_GNOME("Delivery_Gnome_Restaurant.wav"),
    DICE_WIN("Dice_Win.wav"),
    DORGESHUUN_SUNSHINE("Dorgeshuun_First_Sunshine.wav"),
    DUEL_ARENA_DUEL("Duel_Arena_Start_of_Duel.wav"),
    EASTER_2005("Easter_2005_Scape_Scrambled.wav"),
    FARMING_AMULET("Farming_Amulet.wav"),
    FIGHT_CAVE_WAVE("Fight_Caves_Wave_Complete.wav"),
    FIGHT_PITS_CHAMP("Fight_Pits_Champion.wav"),
    FORGETTABLE_PUZZLE("Forgettable_Puzzle_Completed.wav"),
    FREM_BALLAD_COMPLETE("Fremennik_Ballad_Completed.wav"),
    FREM_BALLAD_OPENING("Fremennik_Ballad_Opening.wav"),
    FREM_BALLAD_REFRAIN("Fremennik_Ballad_Refrain.wav"),
    FREM_BERATING_KING("Fremennik_Berating_the_King.wav"),
    GIANTS_FOUNDRY_HAND("Giants_Foundry_Handing_In.wav"),
    GNOMEBALL_GOAL("Gnomeball_Goal.wav"),
    GNOME_SUCCESS("Gnome_Success_Speedy.wav"),
    GOTR_RIFT_CLOSES("GOTR_Rift_Closes.wav"),
    JORMUNGAND_DEFEATED("Jormungand_Defeated.wav"),
    KELDAGRIM_TRADING("Keldagrim_Trading_Victory.wav"),
    KINGS_RANSOM_VERDICT("King's_Ransom_Trial_Verdict.wav"),
    LEAGUE_AREA_UNLOCK("League_Area_Unlock_Jingle.wav"),
    LEAGUE_RELIC_UNLOCK("League_Relic_Unlock_Jingle.wav"),
    LEAGUE_TASK_COMPLETE("League_Task_Completion_Jingle.wav"),
    LEAGUE_TUT_COMPLETE("League_Tutorial_Complete.wav"),
    MAZE_RANDOM_COMPLETE("Maze_Random_Complete.wav"),
    MM1_JUNGLE_DEMON("MM1_Jungle_Demon_Defeated.wav"),
    MOURN_END_II_CRYSTAL("Mourning's_End_II_Crystal.wav"),
    PEST_CONTROL_WIN("Pest_Control_Win.wav"),
    PICKPOCKET_FAIRY_GOD("Pickpocketing_Fairy_Godfather.wav"),
    POSTIE_PETE_THEME("Postie_Pete_theme.wav"),
    PRISON_PETE_SUCCESS("Prison_Pete_Random_Success.wav"),
    RATCATCHER_KING_DIES("Ratcatchers_King_Rat_Dies.wav"),
    REACTIVATE_WATCHTOWR("Reactivating_the_Watchtower.wav"),
    RECRUIT_DRIVE_1("Recruit_Drive_Hynn_Terprett.wav"),
    RECRUIT_DRIVE_2("Recruit_Drive_Kuam_Ferentse.wav"),
    RECRUIT_DRIVE_3("Recruit_Drive_Lady_Table.wav"),
    RECRUIT_DRIVE_4("Recruit_Drive_Sir_Spishyus.wav"),
    RFD_LUMBRIDGE_GUIDE("RFD_Lumbridge_Guide_Quiz.wav"),
    SCHEMATICS_COMPLETED("Schematics_Completed.wav"),
    SECURITY_BOX_HEALTH("Security_Box_of_Health.wav"),
    SHAIKAHAN_DEFEATED("Shaikahan_Defeated.wav"),
    SHOOT_STAR_DISCOVER("Shooting_Stars_Discoverer.wav"),
    SKULLBALL_GOAL("Werewolf_Skullball_Goal.wav"),
    SOUL_WARS_WIN("Soul_Wars_Win.wav"),
    SWAMP_BOATY("Swamp_Boaty.wav"),
    TEMPLE_TREK_SUCCESS("Temple_Trekking_Event_Success.wav"),
    TEMPLE_TREK_COMPLETE("Temple_Trekking_Trek_Complete.wav"),
    TOB_WAVE_COMPLETE("Theatre_of_Blood_Wave_Complete.wav"),
    TIADECHE_RETURNS("Tiadeche_Returns.wav"),
    TINSAY_RETURNS("Tinsay_Returns.wav"),
    TOA_PATH_COMPLETE("TOA_Path_Challenge_Complete.wav"),
    WILY_CAT_THEME("Wily_Cat_Theme.wav");

    private final String resourceName;

    Sound(String resNam) {
        this(resNam, false);
    }

    Sound(String resNam, boolean streamTroll) {
        resourceName = resNam;
    }

    String getResourceName() {
        return resourceName;
    }
}
/**
 * From C Engineer Completed: https://github.com/m0bilebtw/c-engineer-completed
 */

package com.tayaramisu;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;

import javax.inject.Inject;
import javax.inject.Singleton;
import javax.sound.sampled.*;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Timer;

@Singleton
@Slf4j
public class SoundEngine {

    @Inject
    private JingleJingleConfig config;

    @Inject
    private Client client;

    private static final long CLIP_MTIME_UNLOADED = -2;

    private long lastClipMTime = CLIP_MTIME_UNLOADED;
    private Clip clip = null;

    private boolean loadClip(Sound sound) {
        try (InputStream stream = new BufferedInputStream(SoundFileManager.getSoundStream(sound))) {
            try (AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(stream)) {
                clip.open(audioInputStream); // liable to error with pulseaudio, works on windows, one user informs me mac works
            }
            return true;
        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
            log.warn("Failed to load jingle " + sound, e);
        }
        return false;
    }

    public void playClip(Sound sound) {
        long currentMTime = System.currentTimeMillis();
        if (clip == null || currentMTime != lastClipMTime || !clip.isOpen()) {
            if (clip != null && clip.isOpen()) {
                clip.close();
            }

            try {
                clip = AudioSystem.getClip();
            } catch (LineUnavailableException e) {
                lastClipMTime = CLIP_MTIME_UNLOADED;
                log.warn("Failed to get clip for jingle " + sound, e);
                return;
            }

            lastClipMTime = currentMTime;
            if (!loadClip(sound)) {
                return;
            }
        }

        int lastMusicVolume = client.getMusicVolume();
        FloatControl volume = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);
        float gain = 20f * (float) Math.log10(lastMusicVolume / 100f) - 0.07f;
        gain = Math.min(gain, volume.getMaximum());
        gain = Math.max(gain, volume.getMinimum());
        volume.setValue(gain);

        client.setMusicVolume(0);
        clip.addLineListener(e -> {
            if (e.getType() == LineEvent.Type.STOP) {
                client.setMusicVolume(lastMusicVolume);
            }
        });

        // 1 tick delay to allow time for in-game music to stop before starting the jingle
        Timer t = new java.util.Timer();
        t.schedule(
                new java.util.TimerTask() {
                    @Override
                    public void run() {
                        // From RuneLite base client Notifier class:
                        // Using loop instead of start + setFramePosition prevents the clip
                        // from not being played sometimes, presumably a race condition in the
                        // underlying line driver
                        clip.loop(0);
                        // Close the thread
                        t.cancel();
                    }
                },
                600
        );
    }

    public void close() {
        if (clip != null && clip.isOpen()) {
            clip.close();
        }
    }
}

package com.tayaramisu;

import com.google.inject.Provides;

import java.util.HashMap;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;

import net.runelite.api.annotations.Varbit;
import net.runelite.api.events.*;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import okhttp3.OkHttpClient;

import javax.inject.Inject;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ScheduledExecutorService;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static net.runelite.api.Varbits.*;

@Slf4j
@PluginDescriptor(
        name = "Jingle Jingle",
        description = "Adds customizable jingles for achievement diary tasks, mahogany homes, and more!"
)
public class JingleJinglePlugin extends Plugin {
    @Inject
    private Client client;

    @Getter(AccessLevel.PACKAGE)
    @Inject
    private ClientThread clientThread;

    @Inject
    private ChatMessageManager chatMessageManager;

    @Inject
    private SoundEngine soundEngine;

    @Inject
    private JingleJingleConfig config;

    @Inject
    private ScheduledExecutorService executor;

    @Inject
    private OkHttpClient okHttpClient;

    private final int[] varbitsAchievementDiaries = {
            Varbits.DIARY_ARDOUGNE_EASY, Varbits.DIARY_ARDOUGNE_MEDIUM, Varbits.DIARY_ARDOUGNE_HARD, Varbits.DIARY_ARDOUGNE_ELITE,
            Varbits.DIARY_DESERT_EASY, Varbits.DIARY_DESERT_MEDIUM, Varbits.DIARY_DESERT_HARD, Varbits.DIARY_DESERT_ELITE,
            Varbits.DIARY_FALADOR_EASY, Varbits.DIARY_FALADOR_MEDIUM, Varbits.DIARY_FALADOR_HARD, Varbits.DIARY_FALADOR_ELITE,
            Varbits.DIARY_KANDARIN_EASY, Varbits.DIARY_KANDARIN_MEDIUM, Varbits.DIARY_KANDARIN_HARD, Varbits.DIARY_KANDARIN_ELITE,
            DIARY_KARAMJA_EASY, DIARY_KARAMJA_MEDIUM, DIARY_KARAMJA_HARD, Varbits.DIARY_KARAMJA_ELITE,
            Varbits.DIARY_KOUREND_EASY, Varbits.DIARY_KOUREND_MEDIUM, Varbits.DIARY_KOUREND_HARD, Varbits.DIARY_KOUREND_ELITE,
            Varbits.DIARY_LUMBRIDGE_EASY, Varbits.DIARY_LUMBRIDGE_MEDIUM, Varbits.DIARY_LUMBRIDGE_HARD, Varbits.DIARY_LUMBRIDGE_ELITE,
            Varbits.DIARY_MORYTANIA_EASY, Varbits.DIARY_MORYTANIA_MEDIUM, Varbits.DIARY_MORYTANIA_HARD, Varbits.DIARY_MORYTANIA_ELITE,
            Varbits.DIARY_VARROCK_EASY, Varbits.DIARY_VARROCK_MEDIUM, Varbits.DIARY_VARROCK_HARD, Varbits.DIARY_VARROCK_ELITE,
            Varbits.DIARY_WESTERN_EASY, Varbits.DIARY_WESTERN_MEDIUM, Varbits.DIARY_WESTERN_HARD, Varbits.DIARY_WESTERN_ELITE,
            Varbits.DIARY_WILDERNESS_EASY, Varbits.DIARY_WILDERNESS_MEDIUM, Varbits.DIARY_WILDERNESS_HARD, Varbits.DIARY_WILDERNESS_ELITE
    };


    private static final Pattern COLLECTION_LOG_ITEM_REGEX = Pattern.compile("New item added to your collection log:.*");
    private static final Pattern COMBAT_TASK_REGEX = Pattern.compile("Congratulations, you've completed an? .* combat task:.*");
    private static final Pattern MAHOMES_PATTERN = Pattern.compile("You have completed .* contracts with a total of .* points\\.");
    private static final Pattern FARMING_CONTRACT_PATTERN = Pattern.compile("You've completed a Farming Guild Contract. You should return to Guildmaster Jane\\.");
    private static final Pattern ACHIEVEMENT_DIARY_TASK_PATTERN = Pattern.compile("<col=dc143c>Well done! You have completed an? (\\w+) task in the (.+) area\\. Your Achievement Diary has been updated\\.</col>");

    private static final Set<Integer> badCollectionLogNotificationSettingValues = new HashSet<Integer>() {{
        add(0);
        add(2);
    }};

    private final Map<Integer, Integer> oldAchievementDiaries = new HashMap<>();

    private int lastLoginTick = -1;
    private int lastColLogSettingWarning = -1;

    private boolean gameStateLoggedIn = false;

    @Override
    protected void startUp() throws Exception {
        clientThread.invoke(this::setupOldMaps);
        lastLoginTick = -1;
        executor.submit(() -> {
            SoundFileManager.ensureDownloadDirectoryExists();
            SoundFileManager.downloadAllMissingSounds(okHttpClient);
        });
    }

    @Override
    protected void shutDown() throws Exception {
        oldAchievementDiaries.clear();
        soundEngine.close();
    }

    private void setupOldMaps() {
        if (client.getGameState() != GameState.LOGGED_IN) {
            oldAchievementDiaries.clear();
        } else {
            for (@Varbit int diary : varbitsAchievementDiaries) {
                int value = client.getVarbitValue(diary);
                oldAchievementDiaries.put(diary, value);
            }
        }
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged event) {
        gameStateLoggedIn = event.getGameState() == GameState.LOGGED_IN;
        switch (event.getGameState()) {
            case LOGIN_SCREEN:
            case HOPPING:
            case LOGGING_IN:
            case LOGIN_SCREEN_AUTHENTICATOR:
                oldAchievementDiaries.clear();
            case CONNECTION_LOST:
                // set to -1 here in-case of race condition with varbits changing before this handler is called
                // when game state becomes LOGGED_IN
                lastLoginTick = -1;
                lastColLogSettingWarning = client.getTickCount(); // avoid warning during DC
                break;
            case LOGGED_IN:
                lastLoginTick = client.getTickCount();
                break;
        }
    }

    @Subscribe
    public void onChatMessage(ChatMessage chatMessage) {
        if (chatMessage.getType() != ChatMessageType.GAMEMESSAGE) {
            return;
        }

        if (COLLECTION_LOG_ITEM_REGEX.matcher(chatMessage.getMessage()).matches() && config.playCollectionLog()) {
            soundEngine.playClip(config.collectionLogJingle());
        } else if (COMBAT_TASK_REGEX.matcher(chatMessage.getMessage()).matches() && config.playCombatTask()) {
            soundEngine.playClip(config.combatTaskJingle());
        } else if (MAHOMES_PATTERN.matcher(chatMessage.getMessage()).matches() && config.playMahomes()) {
            soundEngine.playClip(config.mahomesJingle());
        } else if (FARMING_CONTRACT_PATTERN.matcher(chatMessage.getMessage()).matches() && config.playFarmingContract()) {
            soundEngine.playClip(config.farmingContractJingle());
        } else {
            Matcher m = ACHIEVEMENT_DIARY_TASK_PATTERN.matcher(chatMessage.getMessage());
            if(m.matches()) {
                if (m.group(2).equals("Ardougne") && config.playArdougneDiary()) {
                    soundEngine.playClip(config.ardougneTaskJingle());
                } else if (m.group(2).equals("Desert") && config.playDesertDiary()) {
                    soundEngine.playClip(config.desertTaskJingle());
                } else if (m.group(2).equals("Falador") && config.playFaladorDiary()) {
                    soundEngine.playClip(config.faladorTaskJingle());
                } else if (m.group(2).equals("Fremennik") && config.playFremennikDiary()) {
                    soundEngine.playClip(config.fremennikTaskJingle());
                } else if (m.group(2).equals("Kandarin") && config.playKandarinDiary()) {
                    soundEngine.playClip(config.kandarinTaskJingle());
                } else if (m.group(2).equals("Karamja") && config.playKaramjaDiary()) {
                    soundEngine.playClip(config.karamjaTaskJingle());
                } else if (m.group(2).equals("Kourend & Kebos") && config.playKourendDiary()) {
                    soundEngine.playClip(config.kourendTaskJingle());
                } else if (m.group(2).equals("Lumbridge & Draynor") && config.playLumbridgeDiary()) {
                    soundEngine.playClip(config.lumbridgeTaskJingle());
                } else if (m.group(2).equals("Morytania") && config.playMorytaniaDiary()) {
                    soundEngine.playClip(config.morytaniaTaskJingle());
                } else if (m.group(2).equals("Varrock") && config.playVarrockDiary()) {
                    soundEngine.playClip(config.varrockTaskJingle());
                } else if (m.group(2).equals("Western Provinces") && config.playWesternProvincesDiary()) {
                    soundEngine.playClip(config.westernProvincesTaskJingle());
                } else if (m.group(2).equals("Wilderness") && config.playWildernessDiary()) {
                    soundEngine.playClip(config.wildernessTaskJingle());
                }
            }
        }
    }

    private void checkAndWarnForCollectionLogNotificationSetting(int newVarbitValue) {
        if (!config.playCollectionLog())
            return;

        if (!gameStateLoggedIn)
            return;

        if (badCollectionLogNotificationSettingValues.contains(newVarbitValue)) {
            if (lastColLogSettingWarning == -1 || client.getTickCount() - lastColLogSettingWarning > 16) {
                lastColLogSettingWarning = client.getTickCount();
                sendHighlightedMessage("Please enable \"Collection log - New addition notification\" in your game settings for the Collection Log jingle to play! (The chat message one, pop-up doesn't matter)");
            }
        }
    }

    @Subscribe
    public void onVarbitChanged(VarbitChanged varbitChanged) {
        if (varbitChanged.getVarbitId() == Varbits.COLLECTION_LOG_NOTIFICATION) {
            checkAndWarnForCollectionLogNotificationSetting(varbitChanged.getValue());
        }

        // As we can't listen to specific varbits, we get a tonne of events BEFORE the game has even set the player's
        // diary varbits correctly, meaning it assumes every diary is on 0, then suddenly every diary that has been
        // completed gets updated to the true value and tricks the plugin into thinking they only just finished it.
        // To avoid this behaviour, we make sure the current tick count is sufficiently high that we've already passed
        // the initial wave of varbit changes from logging in.
        if (lastLoginTick == -1 || client.getTickCount() - lastLoginTick < 8) {
            return; // Ignoring varbit change as only just logged in
        }

        // Apparently I can't check if it's a particular varbit using the names from Varbits enum, so this is the way
        for (@Varbit int diary : varbitsAchievementDiaries) {
            int newValue = client.getVarbitValue(diary);
            int previousValue = oldAchievementDiaries.getOrDefault(diary, -1);
            oldAchievementDiaries.put(diary, newValue);
            if (previousValue != -1 && previousValue != newValue && isAchievementDiaryCompleted(diary, newValue)) { // && config.announceAchievementDiary()
                // value was not unknown (we know the previous value), value has changed, and value indicates diary is completed now
                switch(diary) {
                    case DIARY_ARDOUGNE_EASY:
                    case DIARY_ARDOUGNE_MEDIUM:
                    case DIARY_ARDOUGNE_HARD:
                    case DIARY_ARDOUGNE_ELITE:
                        if (config.playArdougneDiary()) {
                            soundEngine.playClip(config.ardougneCompletionJingle());
                        }
                        break;
                    case DIARY_DESERT_EASY:
                    case DIARY_DESERT_MEDIUM:
                    case DIARY_DESERT_HARD:
                    case DIARY_DESERT_ELITE:
                        if (config.playDesertDiary()) {
                            soundEngine.playClip(config.desertCompletionJingle());
                        }
                        break;
                    case DIARY_FALADOR_EASY:
                    case DIARY_FALADOR_MEDIUM:
                    case DIARY_FALADOR_HARD:
                    case DIARY_FALADOR_ELITE:
                        if (config.playFaladorDiary()) {
                            soundEngine.playClip(config.faladorCompletionJingle());
                        }
                        break;
                    case DIARY_FREMENNIK_EASY:
                    case DIARY_FREMENNIK_MEDIUM:
                    case DIARY_FREMENNIK_HARD:
                    case DIARY_FREMENNIK_ELITE:
                        if (config.playFremennikDiary()) {
                            soundEngine.playClip(config.fremennikCompletionJingle());
                        }
                        break;
                    case DIARY_KANDARIN_EASY:
                    case DIARY_KANDARIN_MEDIUM:
                    case DIARY_KANDARIN_HARD:
                    case DIARY_KANDARIN_ELITE:
                        if (config.playKandarinDiary()) {
                            soundEngine.playClip(config.kandarinCompletionJingle());
                        }
                        break;
                    case DIARY_KARAMJA_EASY:
                    case DIARY_KARAMJA_MEDIUM:
                    case DIARY_KARAMJA_HARD:
                    case DIARY_KARAMJA_ELITE:
                        if (config.playKaramjaDiary()) {
                            soundEngine.playClip(config.karamjaCompletionJingle());
                        }
                        break;
                    case DIARY_KOUREND_EASY:
                    case DIARY_KOUREND_MEDIUM:
                    case DIARY_KOUREND_HARD:
                    case DIARY_KOUREND_ELITE:
                        if (config.playKourendDiary()) {
                            soundEngine.playClip(config.kourendCompletionJingle());
                        }
                        break;
                    case DIARY_LUMBRIDGE_EASY:
                    case DIARY_LUMBRIDGE_MEDIUM:
                    case DIARY_LUMBRIDGE_HARD:
                    case DIARY_LUMBRIDGE_ELITE:
                        if (config.playLumbridgeDiary()) {
                            soundEngine.playClip(config.lumbridgeCompletionJingle());
                        }
                        break;
                    case DIARY_MORYTANIA_EASY:
                    case DIARY_MORYTANIA_MEDIUM:
                    case DIARY_MORYTANIA_HARD:
                    case DIARY_MORYTANIA_ELITE:
                        if (config.playMorytaniaDiary()) {
                            soundEngine.playClip(config.morytaniaCompletionJingle());
                        }
                        break;
                    case DIARY_VARROCK_EASY:
                    case DIARY_VARROCK_MEDIUM:
                    case DIARY_VARROCK_HARD:
                    case DIARY_VARROCK_ELITE:
                        if (config.playVarrockDiary()) {
                            soundEngine.playClip(config.varrockCompletionJingle());
                        }
                        break;
                    case DIARY_WESTERN_EASY:
                    case DIARY_WESTERN_MEDIUM:
                    case DIARY_WESTERN_HARD:
                    case DIARY_WESTERN_ELITE:
                        if (config.playWesternProvincesDiary()) {
                            soundEngine.playClip(config.westernProvincesCompletionJingle());
                        }
                        break;
                    case DIARY_WILDERNESS_EASY:
                    case DIARY_WILDERNESS_MEDIUM:
                    case DIARY_WILDERNESS_HARD:
                    case DIARY_WILDERNESS_ELITE:
                        if (config.playWildernessDiary()) {
                            soundEngine.playClip(config.wildernessCompletionJingle());
                        }
                        break;
                }
            }
        }
    }

    private boolean isAchievementDiaryCompleted(int diary, int value) {
        switch (diary) {
            case DIARY_KARAMJA_EASY:
            case DIARY_KARAMJA_MEDIUM:
            case DIARY_KARAMJA_HARD:
                return value == 2; // jagex, why?
            default:
                return value == 1;
        }
    }

    @Provides
    JingleJingleConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(JingleJingleConfig.class);
    }

    private void sendHighlightedMessage(String message) {
        String highlightedMessage = new ChatMessageBuilder()
                .append(ChatColorType.HIGHLIGHT)
                .append(message)
                .build();

        chatMessageManager.queue(QueuedMessage.builder()
                .type(ChatMessageType.CONSOLE)
                .runeLiteFormattedMessage(highlightedMessage)
                .build());
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event) {
        if (JingleJingleConfig.GROUP.equals(event.getGroup())) {
            /** Play the sound the user just selected */
            if ("collectionLogJingle".equals(event.getKey())) {
                soundEngine.playClip(config.collectionLogJingle());
            } else if ("combatTaskJingle".equals(event.getKey())) {
                soundEngine.playClip(config.combatTaskJingle());
            } else if ("mahomesJingle".equals(event.getKey())) {
                soundEngine.playClip(config.mahomesJingle());
            } else if ("farmingContractJingle".equals(event.getKey())) {
                soundEngine.playClip(config.farmingContractJingle());
            } else if ("ardougneTaskJingle".equals(event.getKey())) {
                soundEngine.playClip(config.ardougneTaskJingle());
            } else if ("ardougneCompletionJingle".equals(event.getKey())) {
                soundEngine.playClip(config.ardougneCompletionJingle());
            } else if ("desertTaskJingle".equals(event.getKey())) {
                soundEngine.playClip(config.desertTaskJingle());
            } else if ("desertCompletionJingle".equals(event.getKey())) {
                soundEngine.playClip(config.desertCompletionJingle());
            } else if ("faladorTaskJingle".equals(event.getKey())) {
                soundEngine.playClip(config.faladorTaskJingle());
            } else if ("faladorCompletionJingle".equals(event.getKey())) {
                soundEngine.playClip(config.faladorCompletionJingle());
            } else if ("fremennikTaskJingle".equals(event.getKey())) {
                soundEngine.playClip(config.fremennikTaskJingle());
            } else if ("fremennikCompletionJingle".equals(event.getKey())) {
                soundEngine.playClip(config.fremennikCompletionJingle());
            } else if ("kandarinTaskJingle".equals(event.getKey())) {
                soundEngine.playClip(config.kandarinTaskJingle());
            } else if ("kandarinCompletionJingle".equals(event.getKey())) {
                soundEngine.playClip(config.kandarinCompletionJingle());
            } else if ("karamjaTaskJingle".equals(event.getKey())) {
                soundEngine.playClip(config.karamjaTaskJingle());
            } else if ("karamjaCompletionJingle".equals(event.getKey())) {
                soundEngine.playClip(config.karamjaCompletionJingle());
            } else if ("kourendTaskJingle".equals(event.getKey())) {
                soundEngine.playClip(config.kourendTaskJingle());
            } else if ("kourendCompletionJingle".equals(event.getKey())) {
                soundEngine.playClip(config.kourendCompletionJingle());
            } else if ("lumbridgeTaskJingle".equals(event.getKey())) {
                soundEngine.playClip(config.lumbridgeTaskJingle());
            } else if ("lumbridgeCompletionJingle".equals(event.getKey())) {
                soundEngine.playClip(config.lumbridgeCompletionJingle());
            } else if ("morytaniaTaskJingle".equals(event.getKey())) {
                soundEngine.playClip(config.morytaniaTaskJingle());
            } else if ("morytaniaCompletionJingle".equals(event.getKey())) {
                soundEngine.playClip(config.morytaniaCompletionJingle());
            } else if ("varrockTaskJingle".equals(event.getKey())) {
                soundEngine.playClip(config.varrockTaskJingle());
            } else if ("varrockCompletionJingle".equals(event.getKey())) {
                soundEngine.playClip(config.varrockCompletionJingle());
            } else if ("westernProvincesTaskJingle".equals(event.getKey())) {
                soundEngine.playClip(config.westernProvincesTaskJingle());
            } else if ("westernProvincesCompletionJingle".equals(event.getKey())) {
                soundEngine.playClip(config.westernProvincesCompletionJingle());
            } else if ("wildernessTaskJingle".equals(event.getKey())) {
                soundEngine.playClip(config.wildernessTaskJingle());
            } else if ("wildernessCompletionJingle".equals(event.getKey())) {
                soundEngine.playClip(config.wildernessCompletionJingle());
            }
        }
    }
}

/**
 * From C Engineer Completed: https://github.com/m0bilebtw/c-engineer-completed
 */

package com.tayaramisu;

import lombok.extern.slf4j.Slf4j;
import net.runelite.client.RuneLite;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;

@Slf4j
public abstract class SoundFileManager {

    private static final File DOWNLOAD_DIR = new File(RuneLite.RUNELITE_DIR.getPath() + File.separator + "jingle-jingle");
    private static final String DELETE_WARNING_FILENAME = "EXTRA_FILES_WILL_BE_DELETED_BUT_FOLDERS_WILL_REMAIN";
    private static final File DELETE_WARNING_FILE = new File(DOWNLOAD_DIR, DELETE_WARNING_FILENAME);
    private static final HttpUrl RAW_GITHUB = HttpUrl.parse("https://raw.githubusercontent.com/Tayaramisu/JingleJingle/sounds");

    @SuppressWarnings("ResultOfMethodCallIgnored")
    public static void ensureDownloadDirectoryExists() {
        if (!DOWNLOAD_DIR.exists()) {
            DOWNLOAD_DIR.mkdirs();
        }
        try {
            DELETE_WARNING_FILE.createNewFile();
        } catch (IOException ignored) {
        }
    }

    public static void downloadAllMissingSounds(final OkHttpClient okHttpClient) {
        // Get set of existing files in our dir - existing jingles will be skipped, unexpected files (not dirs, some sounds depending on config) will be deleted
        Set<String> filesPresent = getFilesPresent();

        // Download any jingles that are not yet present but desired
        for (Sound sound : Sound.values()) {
            String fileNameToDownload = sound.getResourceName();
            if (filesPresent.contains(fileNameToDownload)) {
                filesPresent.remove(fileNameToDownload);
                continue;
            }

            if (RAW_GITHUB == null) {
                // Hush intellij, it's okay, the potential NPE can't hurt you now
                log.error("Jingle Jingle could not download jingles due to an unexpected null RAW_GITHUB value");
                return;
            }
            HttpUrl soundUrl = RAW_GITHUB.newBuilder().addPathSegment(fileNameToDownload).build();
            Path outputPath = Paths.get(DOWNLOAD_DIR.getPath(), fileNameToDownload);
            try (Response res = okHttpClient.newCall(new Request.Builder().url(soundUrl).build()).execute()) {
                if (res.body() != null)
                    Files.copy(new BufferedInputStream(res.body().byteStream()), outputPath, StandardCopyOption.REPLACE_EXISTING);
            } catch (IOException e) {
                log.error("Jingle Jingle could not download jingles", e);
                return;
            }
        }

        // filesPresent now contains only files in our directory that weren't desired
        // (e.g. old versions of jingles)
        // We now delete them to avoid cluttering up disk space
        // We leave dirs behind (getFilesPresent ignores dirs) as we aren't creating those anyway, so they won't build up over time
        for (String filename : filesPresent) {
            File toDelete = new File(DOWNLOAD_DIR, filename);
            //noinspection ResultOfMethodCallIgnored
            toDelete.delete();
        }
    }

    private static Set<String> getFilesPresent() {
        File[] downloadDirFiles = DOWNLOAD_DIR.listFiles();
        if (downloadDirFiles == null || downloadDirFiles.length == 0)
            return new HashSet<>();

        return Arrays.stream(downloadDirFiles)
                .filter(file -> !file.isDirectory())
                .map(File::getName)
                .filter(filename -> !DELETE_WARNING_FILENAME.equals(filename))
                .collect(Collectors.toSet());
    }

    public static InputStream getSoundStream(Sound sound) throws FileNotFoundException {
        return new FileInputStream(new File(DOWNLOAD_DIR, sound.getResourceName()));
    }
}

