package com.tobnotification;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TobNotificationTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(TobNotificationPlugin.class);
		RuneLite.main(args);
	}
}
package com.tobnotification;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Alpha;
import java.awt.Color;

@ConfigGroup("tobnotification")
public interface TobNotificationConfig extends Config
{
	@ConfigItem(
			keyName = "shouldFlash",
			name = "Flash the Reminder Box",
			description = "Makes the reminder box flash between the defined colors.",
			position = 1
	)
	default boolean shouldFlash() { return false; }

	@Alpha
	@ConfigItem(
			keyName = "flashColor1",
			name = "Flash Color #1",
			description = "The first color to flash between, also controls the non-flashing color.",
			position = 2
	)
	default Color flashColor1() { return new Color(255, 0, 0, 150); }

	@Alpha
	@ConfigItem(
			keyName = "flashColor2",
			name = "Flash Color #2",
			description = "The second color to flash between.",
			position = 3
	)
	default Color flashColor2() { return new Color(70, 61, 50, 150); }

	@ConfigItem(
			keyName = "shouldNotifySote",
			name = "Sotetseg Notification",
			description = "Turns on the custom notification for sotetseg",
			position = 4
	)
	default boolean shouldNotifySote() { return true; }

	@ConfigItem(
			keyName = "customSoteMessage",
			name = "Custom Sotetseg Ball Message",
			description = "Allows a custom message when the sotetseg ball is targeting you",
			position = 5
	)
	default String customSoteMessage() { return "THERE IS A DEATH BALL YOU IDIOT!!!!"; }

	@ConfigItem(
			keyName = "shouldNotifyXarp",
			name = "Xarpus Notification",
			description = "Turns on the custom notification for xarpus",
			position = 6
	)
	default boolean shouldNotifyXarp() { return true; }

	@ConfigItem(
			keyName = "customXarpMessage",
			name = "Custom Xarpus Screech Message",
			description = "Allows a custom message when Xarpus screeches",
			position = 7
	)
	default String customXarpMessage() { return "SCREEEEEEEEEEEEEEECH!!!!!!"; }

	@ConfigItem(
			keyName = "shouldNotifyVerz",
			name = "Verzik Notification",
			description = "Turns on the custom notification for verzik",
			position = 8
	)
	default boolean shouldNotifyVerz() { return true; }

	@ConfigItem(
			keyName = "customVerzikMessage",
			name = "Custom Verzik Green Ball Message",
			description = "Allows a custom message when the green ball is on you",
			position = 9
	)
	default String customVerzikMessage() { return "WEEWOOWEEWOOWEEWOO GREEN BALL!!!!!!!"; }
}

package com.tobnotification;

import net.runelite.api.Client;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.ComponentOrientation;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.awt.*;


public class TobNotificationOverlay extends OverlayPanel
{
	private final TobNotificationConfig config;
	private final Client client;
	private TobNotificationPlugin plugin;

	private String message;

	@Inject
	private TobNotificationOverlay(TobNotificationConfig config, Client client, TobNotificationPlugin plugin)
	{
		this.config = config;
		this.client = client;
		this.plugin = plugin;

		panelComponent.setWrap(true);
		panelComponent.setOrientation(ComponentOrientation.VERTICAL);

		setPosition(OverlayPosition.TOP_LEFT);
		setPriority(OverlayPriority.HIGH);
		setResizable(true);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		String message = "";
		Boolean shouldNotify = false;
		switch (plugin.getBossName()) {
			case "Sotetseg":
				message = config.customSoteMessage();
				shouldNotify = config.shouldNotifySote();
				break;
			case "Xarpus":
				message = config.customXarpMessage();
				shouldNotify = config.shouldNotifyXarp();
				break;
			case "Verzik":
				message = config.customVerzikMessage();
				shouldNotify = config.shouldNotifyVerz();
				break;
		}

		if (shouldNotify) {
			panelComponent.getChildren().clear();

			panelComponent.getChildren().add(LineComponent.builder()
					.left(message)
					.build());

			if (config.shouldFlash()) {
				if (client.getGameCycle() % 40 >= 20)
				{
					panelComponent.setBackgroundColor(config.flashColor1());
				} else
				{
					panelComponent.setBackgroundColor(config.flashColor2());
				}
			} else {
				panelComponent.setBackgroundColor(config.flashColor1());
			}

			return super.render(graphics);
		}

		return null;
	}
}

package com.tobnotification;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.api.events.*;
import java.time.Duration;
import net.runelite.client.ui.overlay.OverlayManager;
import java.time.Instant;
import net.runelite.api.coords.WorldPoint;

@Slf4j
@PluginDescriptor(
	name = "Tob Notification",
	description = "Useful customizable notifications for events in tob",
	tags = {"tob", "notification"}
)

public class TobNotificationPlugin extends Plugin {
	@Inject
	private Client client;

	@Inject
	private TobNotificationConfig config;

	// Default timeouts for different encounters
	private static final int soteTimeout = 10;
	private static final int xarpTimeout = 5;
	private static final int verzTimeout = 7;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private TobNotificationOverlay overlay;
	public String boss;

	// Instant objects when the different tob events start
	private Instant ballStart;
	private Instant stareStart;
	private Instant greenBallStart;

	// Map IDs to ensure this plugin only works within Tob
	private static final int SOTE_REGION = 13123;
	private static final int SOTE_MAZE_REGION = 13379;
	private static final int XARPUS_REGION = 12612;
	private static final int VERZIK_REGION = 12611;

	public String getBossName() {
		return boss;
	}

	@Provides
	TobNotificationConfig getConfig(ConfigManager configManager) {
		return configManager.getConfig(TobNotificationConfig.class);
	}

	@Override
	protected void startUp() throws Exception {
		log.info("Tob Notification started!");
	}

	@Override
	protected void shutDown() throws Exception {
		overlayManager.remove(overlay);
		log.info("Tob Notification stopped!");
	}

	@Subscribe
	public void onGameTick(GameTick event) {
		if (isInTob()) {
			if (ballStart != null) {
				// Once you enter the maze, instantly clear the overlay
				if (WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation()).getRegionID() == SOTE_MAZE_REGION) {
					overlayManager.remove(overlay);
					ballStart = null;
					return;
				}

				final Duration soteBallStart = Duration.ofSeconds(soteTimeout);
				final Duration sinceBallStart = Duration.between(ballStart, Instant.now());

				if (sinceBallStart.compareTo(soteBallStart) >= 0) {
					overlayManager.remove(overlay);
					ballStart = null;
				}
			}
			if (stareStart != null) {
				final Duration xarpStareStart = Duration.ofSeconds(xarpTimeout);
				final Duration sinceStareStart = Duration.between(stareStart, Instant.now());

				if (sinceStareStart.compareTo(xarpStareStart) >= 0) {
					overlayManager.remove(overlay);
					stareStart = null;
				}
			}
			if (greenBallStart != null) {
				final Duration verzBallStart = Duration.ofSeconds(verzTimeout);
				final Duration sinceVerzBallStart = Duration.between(greenBallStart, Instant.now());

				if (sinceVerzBallStart.compareTo(verzBallStart) >= 0) {
					overlayManager.remove(overlay);
					greenBallStart = null;
				}
			}
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage) {
		if (isInTob() && chatMessage.getType().equals(ChatMessageType.GAMEMESSAGE)) {
			if (chatMessage.getMessage().contains("A large ball of energy is shot your way...")) {
				this.boss = "Sotetseg";
				overlayManager.add(overlay);
				ballStart = Instant.now();
			} else if (chatMessage.getMessage().contains("Xarpus begins to stare intently.")) {
				this.boss = "Xarpus";
				overlayManager.add(overlay);
				stareStart = Instant.now();
			} else if (chatMessage.getMessage().contains("Verzik Vitur fires a powerful projectile in your direction...") ||
					   chatMessage.getMessage().contains("A powerful projectile bounces into your direction...")) {
				this.boss = "Verzik";
				overlayManager.add(overlay);
				greenBallStart = Instant.now();
			}
		}
	}

	//Check to see if it's within the specified tob rooms
	private boolean isInTob() {
		return WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation()).getRegionID() == SOTE_REGION ||
				WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation()).getRegionID() == SOTE_MAZE_REGION ||
				WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation()).getRegionID() == XARPUS_REGION ||
				WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation()).getRegionID() == VERZIK_REGION;
	}
}
