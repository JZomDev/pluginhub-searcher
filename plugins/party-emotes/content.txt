package xyz.headlinedev.emotes;

import lombok.EqualsAndHashCode;
import lombok.Value;
import net.runelite.client.party.messages.PartyMemberMessage;

@Value
@EqualsAndHashCode(callSuper = true)
public class PartyEmoteUpdate extends PartyMemberMessage
{
    private final int playerId;
    private final int emoteId;
}
package xyz.headlinedev.emotes;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.time.Duration;
import java.time.Instant;
import java.util.HashMap;
import javax.inject.Inject;
import javax.inject.Singleton;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Player;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.util.ImageUtil;

class EmoteEvent {
    public static final short EMOTE_DISPLAY_TIME_MS = 3000;
    public static final short FADE_OUT_TIME_MS = 750;
    public int sourcePlayerId;
    public int emojiId;
    public Instant startTime;

    EmoteEvent(int sourceId, int emoteId)
    {
        this.sourcePlayerId = sourceId;
        this.emojiId = emoteId;
        this.startTime = Instant.now();
    }

    public long GetMillisLeft() {
        long millis = Duration.between(startTime, Instant.now()).toMillis();
        long left = EMOTE_DISPLAY_TIME_MS - millis;
        return left < 0 ? 0 : left;
    }

    public boolean hasExpired() {
        return GetMillisLeft() == 0;
    }
}

@Slf4j
@Singleton
public class PartyEmoteOverlay extends Overlay
{
    private Client client;

    private Emote[] emojis;

    private final HashMap<Integer, EmoteEvent> activeEmotes;

    private Instant lastUpdate;
    @Inject
    private PartyEmoteOverlay()
    {
        activeEmotes = new HashMap<>();
        setPosition(OverlayPosition.DYNAMIC);
        setPriority(0.2f);
        lastUpdate = Instant.now();
    }

    public void addEvent(EmoteEvent event)
    {
        activeEmotes.put(event.sourcePlayerId, event);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (this.client == null)
            return null;

        if (activeEmotes.size() == 0)
            return null;

        for (Player player : client.getPlayers())
        {
            if (player == null)
                continue;

            EmoteEvent event = activeEmotes.get(player.getId());
            if (event == null)
                continue;

            if (event.hasExpired()) {
                activeEmotes.remove(player.getId());
                continue;
            }

            renderPlayerOverlay(graphics, player, event);
        }
        return null;
    }

    private void renderPlayerOverlay(Graphics2D graphics, Player actor, EmoteEvent event)
    {
        final LocalPoint actorPosition = actor.getLocalLocation();
        final int offset = actor.getLogicalHeight() + 75;
        BufferedImage sourceImg = this.emojis[event.emojiId].getImage();
        BufferedImage img = ImageUtil.resizeCanvas(sourceImg, sourceImg.getWidth(), sourceImg.getHeight());

        // Fade emote out
        if (event.GetMillisLeft() < EmoteEvent.FADE_OUT_TIME_MS)
        {
            BufferedImage newImage = new BufferedImage(sourceImg.getWidth(), sourceImg.getHeight(), BufferedImage.TYPE_INT_ARGB);
            float alpha = event.GetMillisLeft() / (float) EmoteEvent.FADE_OUT_TIME_MS;

            Graphics2D g2d = newImage.createGraphics();
            g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, alpha));
            g2d.drawImage(sourceImg, 0, 0, null);
            g2d.dispose();

            img = newImage;
        }

        final Point imageLoc = Perspective.getCanvasImageLocation(client, actorPosition, img, offset);
        if (imageLoc == null)
            return;

        OverlayUtil.renderImageLocation(graphics, imageLoc, img);
    }

    public void setClient(Client client) {
        this.client = client;
    }

    public void setEmotes(Emote[]  emojis) {
        this.emojis = emojis;
    }
}
package xyz.headlinedev.emotes;

import com.google.inject.Provides;

import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.input.KeyManager;
import net.runelite.client.party.PartyService;
import net.runelite.client.party.WSClient;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.HotkeyListener;
import net.runelite.client.util.ImageUtil;

import java.awt.image.BufferedImage;

class Emote {
	private static short NUM_EMOTES = 0;
	private short id;
	private BufferedImage img;

	Emote(String path) {
		this.id = NUM_EMOTES++;
		this.img = ImageUtil.loadImageResource(PartyEmotePlugin.class, path);
	}

	static int getNumEmotes() { return Emote.NUM_EMOTES; }
	public BufferedImage getImage() {
		return img;
	}
}

@PluginDescriptor(
	name = "Party Emotes"
)
public class PartyEmotePlugin extends Plugin
{
	public static final int EMOTE_COOLDOWN_TICKS = 3;
	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private PartyEmoteConfig config;

	@Inject
	private PartyEmoteOverlay emoteOverlay;

	@Inject
	private KeyManager keyManager;

	@Inject
	private PartyService party;

	@Inject
	private WSClient wsClient;

	private Emote[] emotes;

	private int lastSendTick;

	@Override
	protected void startUp() throws Exception
	{
		this.emotes = new Emote[]{
			new Emote("1F601.png"),
			new Emote("1F644.png"),
			new Emote("1F62D.png"),
			new Emote("1F641.png"),
		};

		overlayManager.add(emoteOverlay);
		keyManager.registerKeyListener(smileListener);
		keyManager.registerKeyListener(eyeRollListener);
		keyManager.registerKeyListener(cryingListener);
		keyManager.registerKeyListener(sadListener);
		wsClient.registerMessage(PartyEmoteUpdate.class);

		emoteOverlay.setEmotes(emotes);
		emoteOverlay.setClient(client);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(emoteOverlay);
		keyManager.unregisterKeyListener(smileListener);
		keyManager.unregisterKeyListener(eyeRollListener);
		keyManager.unregisterKeyListener(cryingListener);
		keyManager.unregisterKeyListener(sadListener);
		wsClient.unregisterMessage(PartyEmoteUpdate.class);

		overlayManager.remove(emoteOverlay);
	}

	protected void useEmote(int emoteId)
	{
		final int currentTick = client.getTickCount();
		// prevent too much emote spam
		if (lastSendTick + EMOTE_COOLDOWN_TICKS > currentTick)
		{
			return;
		}

		lastSendTick = currentTick;

		final int localPlayerId = client.getLocalPlayer().getId();
		emoteOverlay.addEvent(new EmoteEvent(localPlayerId, emoteId));
		if (party.isInParty())
		{
			final PartyEmoteUpdate specialCounterUpdate = new PartyEmoteUpdate(localPlayerId, emoteId);
			party.send(specialCounterUpdate);
		}
	}

	@Subscribe
	public void onPartyEmoteUpdate(PartyEmoteUpdate event)
	{
		int emoteId = event.getEmoteId();

		// make sure the emote id we're receiving is within our loaded range
		// (someone is using a newer version?)
		if (emoteId >= 0 && emoteId < Emote.getNumEmotes())
		{
			emoteOverlay.addEvent(new EmoteEvent(event.getPlayerId(), event.getEmoteId()));
		}
	}

	@Provides
	PartyEmoteConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(PartyEmoteConfig.class);
	}

	private final HotkeyListener smileListener = new HotkeyListener(() -> config.smileKeybind())
	{
		@Override
		public void hotkeyPressed() { useEmote( 0); }
	};
	private final HotkeyListener eyeRollListener = new HotkeyListener(() -> config.eyerollKeybind())
	{
		@Override
		public void hotkeyPressed() { useEmote(1); }
	};
	private final HotkeyListener cryingListener = new HotkeyListener(() -> config.cryingKeybind())
	{
		@Override
		public void hotkeyPressed() { useEmote(2); }
	};
	private final HotkeyListener sadListener = new HotkeyListener(() -> config.sadKeybind())
	{
		@Override
		public void hotkeyPressed() { useEmote(3); }
	};

}

package xyz.headlinedev.emotes;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Keybind;

@ConfigGroup("emoji")
public interface PartyEmoteConfig extends Config
{
	@ConfigItem(
			keyName = "smileKeybind",
			name = "Smile Emote",
			description = "Binds a key to use the smile emote.",
			position = 0
	)
	default Keybind smileKeybind()
	{
		return Keybind.NOT_SET;
	}
	@ConfigItem(
			keyName = "eyerollKeybind",
			name = "Eye Roll Emote",
			description = "Binds a key to use the eye roll emoji.",
			position = 1
	)
	default Keybind eyerollKeybind()
	{
		return Keybind.NOT_SET;
	}
	@ConfigItem(
			keyName = "cryingKeybind",
			name = "Crying Emote",
			description = "Binds a key to use the crying emote.",
			position = 2
	)
	default Keybind cryingKeybind()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
			keyName = "sadKeybind",
			name = "Sad Emote",
			description = "Binds a key to use the sad emote.",
			position = 3
	)
	default Keybind sadKeybind()
	{
		return Keybind.NOT_SET;
	}
}

package xyz.headlinedev.emotes;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PartyEmotesPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PartyEmotePlugin.class);
		RuneLite.main(args);
	}
}
