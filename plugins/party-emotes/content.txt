package xyz.headlinedev.emotes;

import java.awt.*;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.time.Duration;
import java.time.Instant;
import java.util.HashMap;
import javax.inject.Inject;
import javax.inject.Singleton;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Player;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.util.ImageUtil;

@Slf4j
@Singleton
public class PartyEmoteWheelOverlay extends Overlay
{
    private static final int EMOTE_WHEEL_IMAGE_WIDTH = 50;
    private static final int EMOTE_WHEEL_IMAGE_HEIGHT = 50;

    private Client client;
    private Emote[] emojis;
    private Point firstMousePosition;
    private int selectedImage;
    private PartyEmoteConfig config;

    @Inject
    private PartyEmoteWheelOverlay()
    {
        setPosition(OverlayPosition.DYNAMIC);
        setPriority(0.2f);
        this.selectedImage = -1;
        this.firstMousePosition = null;
        this.config = null;
    }

    int getSelectedEmoteIndex()
    {
        if (this.emojis == null)
            return -1;

        if (this.selectedImage < 0 || this.selectedImage >= this.emojis.length)
        {
            return -1;
        }
        return this.emojis[this.selectedImage].getId();
    }

    public void setClient(Client client) {
        this.client = client;
    }

    public void reset() {
        this.firstMousePosition = null;
    }
    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (this.client == null)
            return null;

        if (this.firstMousePosition == null)
        {
            this.firstMousePosition = this.client.getMouseCanvasPosition();
        }

        Point currentMousePos = this.client.getMouseCanvasPosition();

        float wheelRadius = 50.0f;
        if (this.config != null)
        {
            wheelRadius = (float)this.config.wheelRadius();
            if (wheelRadius < 10.0f)
            {
                wheelRadius = 10.0f;
            }
            if (wheelRadius > 150.0f)
            {
                wheelRadius = 150.0f;
            }
        }


        int deadZone = (int)(wheelRadius * 1/2.0f);
        this.selectedImage = -1;
        if (currentMousePos.distanceTo(this.firstMousePosition) > deadZone)
        {
            this.selectedImage = getHoveredEmoteIndex(this.firstMousePosition, currentMousePos, this.emojis.length);
        }

        for (int i = 0; i < this.emojis.length; ++i)
        {
            BufferedImage sourceImg = this.emojis[i].getImage();
            BufferedImage img = ImageUtil.resizeCanvas(sourceImg, EMOTE_WHEEL_IMAGE_WIDTH, EMOTE_WHEEL_IMAGE_HEIGHT);

            if (this.selectedImage == i)
            {
                img = addAuraBehindImage(img, img.getWidth(), Color.YELLOW);
            }

            // Subtracting PI/2 that way emote 0 appears at the top
            double ang = ((double)i/this.emojis.length) * Math.PI * 2 - Math.PI / 2;

            int x = (int)(Math.cos(ang) * wheelRadius) - img.getWidth()/2;
            int y = (int)(Math.sin(ang) * wheelRadius) - img.getHeight()/2;

            Point emotePos = new Point(x + this.firstMousePosition.getX(), y + this.firstMousePosition.getY());

            OverlayUtil.renderImageLocation(graphics, emotePos, img);
        }

        return null;
    }

    private int getHoveredEmoteIndex(Point center, Point mouse, int numEmotes) {
        double dx = center.getX() - mouse.getX();
        double dy = center.getY() - mouse.getY();

        double angle = Math.atan2(dy, dx); // Y flip
        if (angle < 0) angle += Math.PI * 2;

        double sliceAngle = (Math.PI * 2) / numEmotes;

        // Shift to center slices on emotes AND rotate index 0 to top
        angle = (angle + sliceAngle / 2 - Math.PI / 2 + Math.PI * 2) % (Math.PI * 2);

        return (int)(angle / sliceAngle);
    }

    public static BufferedImage addAuraBehindImage(BufferedImage inputImage, int auraSize, Color auraColor) {
        int width = inputImage.getWidth();
        int height = inputImage.getHeight();

        int newWidth = width + auraSize * 2;
        int newHeight = height + auraSize * 2;

        BufferedImage output = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = output.createGraphics();

        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);

        float radius = Math.max(newWidth, newHeight) / 2f;
        Point2D center = new Point2D.Float(newWidth / 2f, newHeight / 2f);

        float[] dist = {0.0f, 1.0f};
        Color[] colors = {
                new Color(auraColor.getRed(), auraColor.getGreen(), auraColor.getBlue(), 180),
                new Color(auraColor.getRed(), auraColor.getGreen(), auraColor.getBlue(), 0)
        };

        RadialGradientPaint gradient = new RadialGradientPaint(center, radius, dist, colors);
        g2d.setPaint(gradient);
        g2d.fill(new Ellipse2D.Double(0, 0, newWidth, newHeight));

        g2d.drawImage(inputImage, auraSize, auraSize, null);
        g2d.dispose();

        return output;
    }

    public void setEmotes(Emote[]  emojis) {
        this.emojis = emojis;
    }

    public void setConfig(PartyEmoteConfig config) {
        this.config = config;
    }
}
package xyz.headlinedev.emotes;

import lombok.EqualsAndHashCode;
import lombok.Value;
import net.runelite.client.party.messages.PartyMemberMessage;

@Value
@EqualsAndHashCode(callSuper = true)
public class PartyEmoteUpdate extends PartyMemberMessage
{
    private final int playerId;
    private final int emoteId;
}
package xyz.headlinedev.emotes;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.time.Duration;
import java.time.Instant;
import java.util.HashMap;
import javax.inject.Inject;
import javax.inject.Singleton;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Player;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.util.ImageUtil;

class EmoteEvent {
    public static final short EMOTE_DISPLAY_TIME_MS = 3000;
    public static final short FADE_OUT_TIME_MS = 750;
    public int sourcePlayerId;
    public int emojiId;
    public Instant startTime;

    EmoteEvent(int sourceId, int emoteId)
    {
        this.sourcePlayerId = sourceId;
        this.emojiId = emoteId;
        this.startTime = Instant.now();
    }

    public long GetMillisLeft() {
        long millis = Duration.between(startTime, Instant.now()).toMillis();
        long left = EMOTE_DISPLAY_TIME_MS - millis;
        return left < 0 ? 0 : left;
    }

    public boolean hasExpired() {
        return GetMillisLeft() == 0;
    }
}

@Slf4j
@Singleton
public class PartyEmoteOverlay extends Overlay
{
    private Client client;
    private Emote[] emojis;
    private final HashMap<Integer, EmoteEvent> activeEmotes;
    private Instant lastUpdate;
    private PartyEmoteConfig config;

    @Inject
    private PartyEmoteOverlay()
    {
        activeEmotes = new HashMap<>();
        setPosition(OverlayPosition.DYNAMIC);
        setPriority(0.2f);
        lastUpdate = Instant.now();
        this.config = null;
    }

    public void addEvent(EmoteEvent event)
    {
        activeEmotes.put(event.sourcePlayerId, event);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (this.client == null)
            return null;

        if (activeEmotes.size() == 0)
            return null;

        for (Player player : client.getPlayers())
        {
            if (player == null)
                continue;

            EmoteEvent event = activeEmotes.get(player.getId());
            if (event == null)
                continue;

            if (event.hasExpired()) {
                activeEmotes.remove(player.getId());
                continue;
            }

            renderPlayerOverlay(graphics, player, event);
        }
        return null;
    }

    private void renderPlayerOverlay(Graphics2D graphics, Player actor, EmoteEvent event)
    {
        final LocalPoint actorPosition = actor.getLocalLocation();
        final int offset = actor.getLogicalHeight() + 75;
        BufferedImage image = this.emojis[event.emojiId].getImage();

        // Fade emote out
        if (event.GetMillisLeft() < EmoteEvent.FADE_OUT_TIME_MS)
        {
            BufferedImage alphaImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_ARGB);
            float alpha = event.GetMillisLeft() / (float) EmoteEvent.FADE_OUT_TIME_MS;

            Graphics2D g2d = alphaImage.createGraphics();
            g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, alpha));
            g2d.drawImage(image, 0, 0, null);
            g2d.dispose();

            image = alphaImage;
        }

        BufferedImage resizedImage = ImageUtil.resizeCanvas(image, 50, 50);
        final Point imageLoc = Perspective.getCanvasImageLocation(client, actorPosition, resizedImage, offset);
        if (imageLoc == null)
            return;

        OverlayUtil.renderImageLocation(graphics, imageLoc, resizedImage);
    }

    public void setClient(Client client) {
        this.client = client;
    }

    public void setEmotes(Emote[]  emojis) {
        this.emojis = emojis;
    }

    public void setConfig(PartyEmoteConfig config) {
        this.config = config;
    }
}
package xyz.headlinedev.emotes;

import com.google.inject.Provides;

import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.input.KeyManager;
import net.runelite.client.party.PartyService;
import net.runelite.client.party.WSClient;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.HotkeyListener;
import net.runelite.client.util.ImageUtil;

import java.awt.image.BufferedImage;
import java.util.ArrayList;

class Emote {
	private static short NUM_EMOTES = 0;
	private int id;
	private BufferedImage img;
	private String name;

	Emote(String path, String name) {
		this.id = NUM_EMOTES++;
		this.name = name;
		this.img = ImageUtil.loadImageResource(PartyEmotePlugin.class, path);
	}

	static int getNumEmotes() { return Emote.NUM_EMOTES; }
	public BufferedImage getImage() {
		return img;
	}

	public int getId() {
		return this.id;
	}
}

@PluginDescriptor(
	name = "Party Emotes"
)
public class PartyEmotePlugin extends Plugin
{
	public static final int EMOTE_COOLDOWN_TICKS = 2;
	public static final int NUM_WHEEL_SLOTS = 6;
	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private PartyEmoteConfig config;

	@Inject
	private PartyEmoteOverlay emoteOverlay;
	@Inject
	private PartyEmoteWheelOverlay wheelOverlay;

	@Inject
	private KeyManager keyManager;

	@Inject
	private PartyService party;

	@Inject
	private WSClient wsClient;

	private Emote[] emotes;

	private int lastSendTick;
	private ArrayList<HotkeyListener> listeners;

	@Override
	protected void startUp() throws Exception
	{
		this.listeners = new ArrayList<>();

		// order here matters! See Emote.id
		this.emotes = new Emote[]{
			new Emote("1F601.png", "Smile"),
			new Emote("1F644.png", "Eye roll"),
			new Emote("1F62D.png", "Crying"),
			new Emote("1F641.png", "Sad"),
			new Emote("1F4A9.png", "Poo"),
			new Emote("1F9D0.png", "Thinking"),
			new Emote("1F606.png", "XD"),
			new Emote("1F918.png", "Rock On"),
			new Emote("1FAE0.png", "Melt"),
			new Emote("2764.png", "Heart"),
		};

		overlayManager.add(emoteOverlay);

		createListeners();

		for (HotkeyListener listener : this.listeners) {
			keyManager.registerKeyListener(listener);
		}

		wsClient.registerMessage(PartyEmoteUpdate.class);

		emoteOverlay.setEmotes(emotes);
		emoteOverlay.setClient(client);
		emoteOverlay.setConfig(config);

		wheelOverlay.setEmotes(emotes);
		wheelOverlay.setClient(client);
		wheelOverlay.setConfig(config);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(emoteOverlay);
		for (HotkeyListener listener : this.listeners) {
			keyManager.unregisterKeyListener(listener);
		}

		wsClient.unregisterMessage(PartyEmoteUpdate.class);

		overlayManager.remove(emoteOverlay);
	}

	protected void useEmote(int emoteId)
	{
		final int currentTick = client.getTickCount();
		// prevent too much emote spam
		if (lastSendTick + EMOTE_COOLDOWN_TICKS > currentTick)
		{
			return;
		}

		lastSendTick = currentTick;

		final int localPlayerId = client.getLocalPlayer().getId();
		emoteOverlay.addEvent(new EmoteEvent(localPlayerId, emoteId));
		if (party.isInParty())
		{
			final PartyEmoteUpdate specialCounterUpdate = new PartyEmoteUpdate(localPlayerId, emoteId);
			party.send(specialCounterUpdate);
		}
	}

	@Subscribe
	public void onPartyEmoteUpdate(PartyEmoteUpdate event)
	{
		int emoteId = event.getEmoteId();

		// make sure the emote id we're receiving is within our loaded range
		// (someone is using a newer version?)
		if (emoteId >= 0 && emoteId < Emote.getNumEmotes())
		{
			emoteOverlay.addEvent(new EmoteEvent(event.getPlayerId(), event.getEmoteId()));
		}
	}

	@Provides
	PartyEmoteConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(PartyEmoteConfig.class);
	}

	private void createListeners() {
		// Emote Wheel
		this.listeners.add(new HotkeyListener(() -> config.wheelKeybind())
		{
			@Override
			public void hotkeyPressed() {
				Emote[] emotes = new Emote[NUM_WHEEL_SLOTS];
				emotes[0] = PartyEmotePlugin.this.emotes[config.wheelSlot0().ordinal()];
				emotes[1] = PartyEmotePlugin.this.emotes[config.wheelSlot1().ordinal()];
				emotes[2] = PartyEmotePlugin.this.emotes[config.wheelSlot2().ordinal()];
				emotes[3] = PartyEmotePlugin.this.emotes[config.wheelSlot3().ordinal()];
				emotes[4] = PartyEmotePlugin.this.emotes[config.wheelSlot4().ordinal()];
				emotes[5] = PartyEmotePlugin.this.emotes[config.wheelSlot5().ordinal()];
				wheelOverlay.setEmotes(emotes);

				overlayManager.add(wheelOverlay);
			}

			@Override
			public void hotkeyReleased() {
				int selectedIndex = wheelOverlay.getSelectedEmoteIndex();
				useEmote(selectedIndex);
				wheelOverlay.reset();
				overlayManager.remove(wheelOverlay);
			}
		});

		// Manual Keybinds
		this.listeners.add(new HotkeyListener(() -> config.bindEmote0())
		{
			@Override
			public void hotkeyPressed() { useEmote(config.useEmote0().ordinal()); }
		});
		this.listeners.add(new HotkeyListener(() -> config.bindEmote1())
		{
			@Override
			public void hotkeyPressed() { useEmote(config.useEmote1().ordinal()); }
		});
		this.listeners.add(new HotkeyListener(() -> config.bindEmote2())
		{
			@Override
			public void hotkeyPressed() { useEmote(config.useEmote2().ordinal()); }
		});
		this.listeners.add(new HotkeyListener(() -> config.bindEmote3())
		{
			@Override
			public void hotkeyPressed() { useEmote(config.useEmote3().ordinal()); }
		});
	}

}

package xyz.headlinedev.emotes;

import net.runelite.client.config.*;

@ConfigGroup("emoji")
public interface PartyEmoteConfig extends Config
{
	@ConfigSection(
			name = "Emote Display Settings",
			description = "Change settings relating to how emotes appear on screen.",
			position = 1
	)
	String displaySection = "wheel2";
	@ConfigItem(
			keyName = "displaySize",
			name = "Wheel Radius",
			description = "Controls the radius of the emote wheel",
			position = 0,
			section = displaySection
	)
	default int wheelRadius()
	{
		return 50;
	}

	enum EmoteSelection
	{
		Smile,
		EyeRoll,
		Crying,
		Sad,
		Poo,
		Thinking,
		XD,
		RockOn,
		Melt,
		Heart,
	}

	@ConfigSection(
			name = "Emote Wheel Selection",
			description = "Select which emotes appear in the wheel.",
			position = 99
	)
	String wheelSection = "wheel";

	@ConfigItem(
			keyName = "wheelKeybind",
			name = "Emote Wheel",
			description = "Binds a key to open the emote wheel.",
			position = 0,
			section = wheelSection
	)
	default Keybind wheelKeybind()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
			position = 21,
			keyName = "wheelSlot0",
			name = "Wheel Emote 1",
			description = "Select emote to use for slot 0 in the wheel.",
			section = wheelSection
	)

	default EmoteSelection wheelSlot0()
	{
		return EmoteSelection.Smile;
	}

	@ConfigItem(
			position = 22,
			keyName = "wheelSlot1",
			name = "Wheel Emote 2",
			description = "Select emote to use for slot 1 in the wheel.",
			section = wheelSection
	)

	default EmoteSelection wheelSlot1()
	{
		return EmoteSelection.EyeRoll;
	}

	@ConfigItem(
			position = 23,
			keyName = "wheelSlot2",
			name = "Wheel Emote 3",
			description = "Select emote to use for slot 2 in the wheel.",
			section = wheelSection
	)

	default EmoteSelection wheelSlot2()
	{
		return EmoteSelection.Thinking;
	}

	@ConfigItem(
			position = 24,
			keyName = "wheelSlot3",
			name = "Wheel Emote 4",
			description = "Select emote to use for slot 3 in the wheel.",
			section = wheelSection
	)

	default EmoteSelection wheelSlot3()
	{
		return EmoteSelection.Heart;
	}

	@ConfigItem(
			position = 25,
			keyName = "wheelSlot4",
			name = "Wheel Emote 5",
			description = "Select emote to use for slot 4 in the wheel.",
			section = wheelSection
	)

	default EmoteSelection wheelSlot4()
	{
		return EmoteSelection.Sad;
	}

	@ConfigItem(
			position = 26,
			keyName = "wheelSlot5",
			name = "Wheel Emote 6",
			description = "Select emote to use for slot 5 in the wheel.",
			section = wheelSection
	)

	default EmoteSelection wheelSlot5()
	{
		return EmoteSelection.XD;
	}

	@ConfigSection(
			name = "Manual Keybinds",
			description = "Bind a key to a specific emote.",
			position = 70
	)
	String manualKeybinds = "manual";

	@ConfigItem(
			position = 71,
			keyName = "useEmote0",
			name = "Emote 1",
			description = "Select emote to use for slot 0 in the wheel.",
			section = manualKeybinds
	)

	default EmoteSelection useEmote0()
	{
		return EmoteSelection.Smile;
	}

	@ConfigItem(
			keyName = "bindEmote0",
			name = "Bind 1",
			description = "Binds a key to the emote slot.",
			position = 72,
			section = manualKeybinds
	)
	default Keybind bindEmote0()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
			position = 73,
			keyName = "useEmote1",
			name = "Emote 2",
			description = "Select emote to use for slot 1.",
			section = manualKeybinds
	)

	default EmoteSelection useEmote1()
	{
		return EmoteSelection.EyeRoll;
	}

	@ConfigItem(
			keyName = "bindEmote1",
			name = "Bind 2",
			description = "Binds a key to the emote slot.",
			position = 74,
			section = manualKeybinds
	)
	default Keybind bindEmote1()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
			position = 75,
			keyName = "useEmote2",
			name = "Emote 3",
			description = "Select emote to use for slot 2.",
			section = manualKeybinds
	)

	default EmoteSelection useEmote2()
	{
		return EmoteSelection.Sad;
	}

	@ConfigItem(
			keyName = "bindEmote2",
			name = "Bind 3",
			description = "Binds a key to the emote slot.",
			position = 76,
			section = manualKeybinds
	)
	default Keybind bindEmote2()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
			position = 77,
			keyName = "useEmote3",
			name = "Emote 4",
			description = "Select emote to use for slot 3.",
			section = manualKeybinds
	)

	default EmoteSelection useEmote3()
	{
		return EmoteSelection.Crying;
	}

	@ConfigItem(
			keyName = "bindEmote3",
			name = "Bind 4",
			description = "Binds a key to the emote slot.",
			position = 78,
			section = manualKeybinds
	)
	default Keybind bindEmote3()
	{
		return Keybind.NOT_SET;
	}
}

package xyz.headlinedev.emotes;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PartyEmotesPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PartyEmotePlugin.class);
		RuneLite.main(args);
	}
}
