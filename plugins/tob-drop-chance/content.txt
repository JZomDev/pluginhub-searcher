package com.tobdropchance;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TobDropChancePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(TobDropChancePlugin.class);
		RuneLite.main(args);
	}
}
package com.tobdropchance;

import java.awt.Dimension;
import java.awt.Graphics2D;
import java.util.List;
import net.runelite.api.Client;
import net.runelite.api.Player;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LayoutableRenderableEntity;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.util.Map;

import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;
import static com.tobdropchance.TobDropChanceConstant.*;
import net.runelite.client.util.Text;

public class TobDropChanceOverlay extends OverlayPanel {

    private Client client;
    private TobDropChancePlugin plugin;
    private TobDropChanceConfig config;

    @Inject
    private TobDropChanceOverlay(TobDropChancePlugin plugin, Client client, TobDropChanceConfig config) {
    	super(plugin);
        this.client = client;
        this.plugin = plugin;
        this.config = config;

        setPosition(OverlayPosition.TOP_RIGHT);

        getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Theatre Points Overlay"));
    }


    @Override
    public Dimension render(Graphics2D graphics) {
        if (plugin.inRaid && plugin.loadedPlayers)
		{
			Player player = client.getLocalPlayer();
			if (player != null && player.getName() != null)
			{
				String name = Text.sanitize(player.getName());

				List<LayoutableRenderableEntity> elems = panelComponent.getChildren();
				elems.clear();

				Map<String, Integer> deaths = plugin.getDeathCounter();

				// These are the maximum number of points that a team could have.
				double maxPoints = (deaths.size() * POINTS_ENCOUNTER) + POINTS_MVP;

				// This is the total amount of deaths that the team has.
				double totalDeaths = 0;
				for (String pName : deaths.keySet())
					totalDeaths += (double) deaths.get(pName);

				// This is the amount of points left.
				double totalLosses = totalDeaths * POINTS_DEATH;
				double pointsRemaining = Math.max(0.0, maxPoints - totalLosses);

				// This is the factor multiplier.
				double multiplier = pointsRemaining / maxPoints;

				// This is the drop chance.
				double dropChance = BASE_RATE * multiplier;

				if (config.showTeamChance())
					elems.add(LineComponent.builder()
						.left("Team:")
						.right(String.format("%.2f%%", dropChance))
						.build());

				// This is your chance at the loot.
				double maxPersonal = POINTS_ENCOUNTER + (POINTS_MVP / deaths.size()); // Let's assume that MVP points are distributed evenly...

				// This is your own personal contribution out of the team's total contribution.
				double personalLosses = POINTS_DEATH * deaths.get(name);
				double personalDeaths = deaths.get(name);
				double personalRemaining = Math.max(0.0, maxPersonal - personalLosses);
				double personalChance = personalRemaining / pointsRemaining;

				if (config.showPersonalChance()) // P(X|Y), X = purple is in your name, Y = team sees a purple
					elems.add(LineComponent.builder()
						.left("Personal:")
						.right(String.format("%.2f%%", 100.0 * personalChance))
						.build());

				if (config.showYoinkChance()) // P(X&Y), team sees a purple in your name
					elems.add(LineComponent.builder()
						.left("Team & Personal:")
						.right(String.format("%.2f%%", dropChance * personalChance))
						.build());

				if (config.showPersonalDeathCount())
					elems.add(LineComponent.builder()
						.left("Personal Deaths:")
						.right(String.format("%d", (int) personalDeaths))
						.build());

				if (config.showDeathCount())
					elems.add(LineComponent.builder()
						.left("Total Deaths:")
						.right(String.format("%d", (int) totalDeaths))
						.build());
			}
		}

        return super.render(graphics);
    }
}

package com.tobdropchance;

import net.runelite.api.Varbits;

import java.util.regex.Pattern;

public class TobDropChanceConstant
{

    public static final int THEATRE_RAIDERS_VARP = 330;
    public static final int MAX_RAIDERS = 5;

    public static final int STATE_NO_PARTY = 0;
    public static final int STATE_IN_PARTY = 1;

    public static final Pattern DEATH_SELF = Pattern.compile("You have died. Death count: (\\d+).");
    public static final Pattern DEATH_OTHER = Pattern.compile("([0-9A-Za-z -_]+) has died. Death count: (\\d+).");

    public static final double POINTS_MVP = 14.0;
    public static final double POINTS_ENCOUNTER = 18.0;
    public static final double POINTS_DEATH = 4.0;

    public static final double BASE_RATE = 11.0;


}

package com.tobdropchance;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("TobDropChanceConfig")
public interface TobDropChanceConfig extends Config {

    @ConfigItem(
            position = 0,
            keyName = "showTeamChance",
            name = "Team Chance",
            description = "The probability that your team will see a purple. P(Y)."
    )
    default boolean showTeamChance() {
        return true;
    }

    @ConfigItem(
            position = 1,
            keyName = "showPersonalChance",
            name = "Personal Chance",
            description = "The (estimated) probability that the purple will be in your name. P(X|Y)."
    )
    default boolean showPersonalChance() {
        return true;
    }

    @ConfigItem(
            position = 2,
            keyName = "showYoinkChance",
            name = "Combined Team & Personal Chance",
            description = "The (estimated) joint probability that the team will see a purple in your name. P(X&Y)."
    )
    default boolean showYoinkChance() {
        return false;
    }

    @ConfigItem(
            position = 3,
            keyName = "showPersonalDeathCount",
            name = "Personal Death Count",
            description = "The amount of deaths for yourself."
    )
    default boolean showPersonalDeathCount() {
        return true;
    }

	@ConfigItem(
		position = 4,
		keyName = "showDeathCount",
		name = "Death Count",
		description = "The total amount of deaths on the team."
	)
	default boolean showDeathCount() {
		return true;
	}
}

package com.tobdropchance;

import com.google.inject.Provides;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.Varbits;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;
import javax.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;

import static com.tobdropchance.TobDropChanceConstant.*;

@Slf4j
@PluginDescriptor(
	name = "ToB Drop Chance",
	description = "Displays estimated team and personal drop chance information at ToB"
)
public class TobDropChancePlugin extends Plugin {

    @Inject
    private Client client;

	@Inject
	private TobDropChanceConfig config;

	@Provides
	TobDropChanceConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(TobDropChanceConfig.class);
	}

	@Inject
    private OverlayManager overlayManager;

    @Inject
    private TobDropChanceOverlay overlay;

    boolean inRaid;

    int raidState;

	@Getter
    Map<String, Integer> deathCounter;

    boolean loadedPlayers;

    @Override
    protected void startUp() {
        deathCounter = new HashMap<>();
        reset();
        overlayManager.add(overlay);
    }

    @Override
    protected void shutDown() {
        overlayManager.remove(overlay);
    }

    private void reset() {
        inRaid = false;
        raidState = 0;
        loadedPlayers = false;
        deathCounter.clear();
    }

    @Subscribe
    private void onChatMessage(ChatMessage event) {
        if (event.getType() == ChatMessageType.GAMEMESSAGE && event.getSender() == null) {
            String msg = Text.sanitize(Text.removeTags(event.getMessage()));
            if (msg == null)
                return;

            String target = null;

            Matcher self = DEATH_SELF.matcher(msg);
            if (self.matches())
                target = Text.sanitize(client.getLocalPlayer().getName());

            Matcher other = DEATH_OTHER.matcher(msg);
            if (other.matches())
                target = other.group(1);

            if (target != null && deathCounter.containsKey(target)) {
                int count = deathCounter.get(target);
                deathCounter.put(target, count + 1);
            }
        }
    }

    @Subscribe
    public void onGameTick(GameTick event) {
        if (inRaid && !loadedPlayers) {
            deathCounter.clear();

            Map<Integer, Object> varcmap = client.getVarcMap();
            for (int i = 0; i < MAX_RAIDERS; i++) {
                Integer playervarp = THEATRE_RAIDERS_VARP + i;
                if (varcmap.containsKey(playervarp)) {
                    String tName = Text.sanitize(varcmap.get(playervarp).toString());
                    if (tName != null && !tName.equals("")) {
                        deathCounter.put(tName, 0);
                    }
                }
            }

            loadedPlayers = true;
        }
    }

    @Subscribe
    public void onVarbitChanged(VarbitChanged event) {
        int nextState = client.getVar(Varbits.THEATRE_OF_BLOOD);
        if (this.raidState != nextState) {
            if (nextState == STATE_NO_PARTY || nextState == STATE_IN_PARTY) { // Player is not in a raid.
                reset();
                raidState = nextState;
            } else { // Player has entered the theatre.
                if (raidState == STATE_IN_PARTY) { // Player was in a party. They are a raider.
                    reset();
                    inRaid = true;
                }

                raidState = nextState;
            }
        }
    }
}

