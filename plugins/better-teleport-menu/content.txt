/*
 * Copyright (c) 2018 Abex
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package abex.os.telemenu;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JButton;
import lombok.Getter;
import net.runelite.client.config.Keybind;
import net.runelite.client.ui.FontManager;

class MultikeybindButton extends JButton
{
	@Getter
	private Multikeybind value;
	private boolean fresh = true;

	public MultikeybindButton(Multikeybind value)
	{
		this.value = value;

		setFont(FontManager.getDefaultFont().deriveFont(12.f));
		update();
		addMouseListener(new MouseAdapter()
		{
			@Override
			public void mouseReleased(MouseEvent e)
			{
				// We have to use a mouse adapter instead of an action listener so the press action key (space) can be bound
				MultikeybindButton.this.value = new Multikeybind();
				update();
			}
		});

		addKeyListener(new KeyAdapter()
		{
			@Override
			public void keyPressed(KeyEvent e)
			{
				Multikeybind v = MultikeybindButton.this.value;
				if (fresh)
				{
					v = new Multikeybind();
					fresh = false;
				}
				Keybind newBind = new Keybind(e);

				// prevent modifier only multi key binds
				if (v.getKeybinds().size() < 1 || newBind.getKeyCode() != KeyEvent.VK_UNDEFINED)
				{
					v = v.with(newBind);
				}
				if (v.getKeybinds().size() == 2 && v.getKeybinds().get(0).getKeyCode() == KeyEvent.VK_UNDEFINED)
				{
					v = new Multikeybind(v.getKeybinds().get(1));
				}

				MultikeybindButton.this.value = v;
				update();
			}
		});
	}

	private void update()
	{
		setText(value.toString());
	}

	public void setValue(Multikeybind value)
	{
		this.value = value;
		update();
	}
}

package abex.os.telemenu;

import com.google.inject.Inject;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.util.WeakHashMap;
import net.runelite.api.Client;
import net.runelite.api.Model;
import net.runelite.api.ModelData;
import net.runelite.api.Rasterizer;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

public class MenuBackgroundOverlay extends Overlay
{
	private static final int IF_MENU = 187;

	private final Client client;
	private final ClientThread clientThread;
	private final BetterTeleportMenuConfig config;

	private boolean drawBackground;
	private WeakHashMap<Widget, Integer> defaultHeight = new WeakHashMap<>();
	private boolean hasPatched = false;

	@Inject
	public MenuBackgroundOverlay(Client client, ClientThread clientThread, BetterTeleportMenuConfig config)
	{
		this.client = client;
		this.clientThread = clientThread;
		this.config = config;

		drawAfterLayer(IF_MENU, 0);
		setPosition(OverlayPosition.DYNAMIC);
		setPriority(-1.f);
		setLayer(OverlayLayer.MANUAL);
	}

	public void resize()
	{
		drawBackground = resize0();
	}

	private boolean resize0()
	{
		Widget bgContainer = client.getWidget(IF_MENU, 0);
		if (bgContainer == null || !config.expandScrollMenu())
		{
			return false;
		}

		Widget parent = bgContainer.getParent(); // 164:16
		Widget model = bgContainer.getChild(0);
		Widget scrollbar = client.getWidget(IF_MENU, 2);
		Widget contents = client.getWidget(IF_MENU, 3);
		if (parent == null || model == null || scrollbar == null || contents == null)
		{
			return false;
		}

		int contentHeight = defaultHeight(contents);
		int boundHeight = defaultHeight(bgContainer);

		int enlarge = Math.max(0, contents.getScrollHeight() - contentHeight);
		enlarge = Math.min(enlarge, parent.getParent().getHeight() - boundHeight);

		if (enlarge == 0)
		{
			return hasPatched;
		}

		hasPatched = true;

		int scrollY = contents.getScrollY();

		patchHeight(bgContainer, enlarge);
		patchHeight(parent, enlarge); // this is safe to change because toplevel_resize & toplevel_subchange will fix it for us
		patchHeight(scrollbar, enlarge);
		patchHeight(contents, enlarge);
		scrollbar.revalidateScroll();

		model.setHidden(true);

		boolean needScroll = contents.getHeight() < contents.getScrollHeight();
		scrollbar.setHidden(!needScroll);
		if (needScroll)
		{
			clientThread.invokeLater(() -> client.runScript(ScriptID.UPDATE_SCROLLBAR, scrollbar.getId(), contents.getId(), scrollY));
		}

		return true;
	}

	private int defaultHeight(Widget w)
	{
		return defaultHeight.computeIfAbsent(w, Widget::getOriginalHeight);
	}

	private void patchHeight(Widget w, int delta)
	{
		w.setOriginalHeight(defaultHeight(w) + delta);
		w.revalidate();
	}

	@Override
	public Dimension render(Graphics2D g)
	{
		if (!drawBackground)
		{
			return null;
		}

		Widget container = client.getWidget(IF_MENU, 0);
		Widget content = client.getWidget(IF_MENU, 3);
		if (container == null || content == null || container.getChild(1) == null)
		{
			drawBackground = false;
			return null;
		}

		Widget text = container.getChild(1);

		ModelData md = client.loadModelData(26397);
		if (md == null)
		{
			return null;
		}

		Model m = md.cloneVertices().light();

		float[] vy = m.getVerticesZ();
		float min = Integer.MAX_VALUE;
		float max = Integer.MIN_VALUE;
		for (float y : vy)
		{
			min = Math.min(min, y);
			max = Math.max(max, y);
		}

		float totalHeight = max - min;
		float hiEdge = max - (312 * totalHeight / 334);
		float loEdge = max - (90 + totalHeight / 334);
		float adj = (hiEdge + loEdge) / 2;

		for (int i = 0; i < vy.length; i++)
		{
			float y = vy[i];
			float y2 = Math.min(Math.max(y, hiEdge), loEdge) - adj;
			y = (y - y2) + (y2 * content.getHeight()) / 232;
			vy[i] = y;
		}

		m.calculateBoundsCylinder();

		Rectangle bounds = container.getBounds();

		Rasterizer r = client.getRasterizer();
		r.setDrawRegion(bounds.x, bounds.y, bounds.x + bounds.width, bounds.y + bounds.height);
		r.resetRasterClipping();
		m.drawFrustum(0,
			0, 0, 512,
			-1, 1020 - 68, -68);

		Rectangle textBounds = text.getBounds();
		text.getFont().drawWidgetText(text.getText(),
			textBounds.x, textBounds.y, textBounds.width, textBounds.height,
			text.getTextColor(), text.getTextShadowed() ? 0 : -1, 255,
			text.getXTextAlignment(), text.getYTextAlignment(), text.getLineHeight());

		return null;
	}
}

package abex.os.telemenu;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Splitter;
import com.google.common.collect.ImmutableList;
import java.awt.event.KeyEvent;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.config.Keybind;

@Slf4j
@EqualsAndHashCode
public class Multikeybind
{
	@Getter
	private final List<Keybind> keybinds;

	public Multikeybind(Keybind... binds)
	{
		keybinds = ImmutableList.copyOf(binds);
	}

	private Multikeybind(ImmutableList<Keybind> keybinds)
	{
		this.keybinds = keybinds;
	}

	@VisibleForTesting
	static int swapNumpadKey(int code)
	{
		if (code >= KeyEvent.VK_0 && code <= KeyEvent.VK_9)
		{
			code += KeyEvent.VK_NUMPAD0 - KeyEvent.VK_0;
		}
		else if (code >= KeyEvent.VK_NUMPAD0 && code <= KeyEvent.VK_NUMPAD9)
		{
			code += KeyEvent.VK_0 - KeyEvent.VK_NUMPAD0;
		}
		return code;
	}

	private static boolean matches(Keybind bind, KeyEvent ev, boolean aliasNumpad)
	{
		if (bind.matches(ev))
		{
			return true;
		}

		if (aliasNumpad)
		{
			int key2 = swapNumpadKey(bind.getKeyCode());
			if (key2 != bind.getKeyCode())
			{
				return new Keybind(key2, bind.getModifiers()).matches(ev);
			}
		}

		return false;
	}

	public MatchState matches(List<KeyEvent> evs)
	{
		return matches(evs, false);
	}

	public MatchState matches(List<KeyEvent> evs, boolean aliasNumpad)
	{
		outer:
		for (int ii = 0; ii < evs.size(); ii++)
		{
			for (int ei = ii, ki = 0; ; ki++, ei++)
			{
				if (ei >= evs.size())
				{
					// no more events
					// if we are also out of keybinds this is a perfect match
					if (ki >= keybinds.size())
					{
						return MatchState.YES;
					}

					// otherwise only a prefix
					return MatchState.PARTIAL;
				}

				if (ki >= keybinds.size())
				{
					// more keypresses, will not match unless they are just modifiers
					for (; ei < evs.size(); ei++)
					{
						if (!isModifierOnly(evs.get(ei).getKeyCode()))
						{
							continue outer;
						}
					}
					break;
				}

				KeyEvent ev = evs.get(ei);
				if (!matches(keybinds.get(ki), ev, aliasNumpad))
				{
					if (isModifierOnly(ev.getKeyCode()) && ei != ii)
					{
						ki--;
						continue;
					}
					break;
				}
			}
		}

		return MatchState.NO;
	}

	public static boolean isModifierOnly(int keyCode)
	{
		return keyCode == KeyEvent.VK_UNDEFINED || Keybind.getModifierForKeyCode(keyCode) != null;
	}

	public String toConfig()
	{
		return keybinds.stream()
			.map(k -> k.getKeyCode() + ":" + k.getModifiers())
			.collect(Collectors.joining(":"));
	}

	public static Multikeybind fromConfig(String config)
	{
		ImmutableList.Builder<Keybind> v = ImmutableList.builder();
		if (config == null)
		{
			return null;
		}
		if (!config.isEmpty())
		{
			try
			{
				Iterator<String> bits = Splitter.on(':').split(config).iterator();
				for (; bits.hasNext(); )
				{
					int code = Integer.parseInt(bits.next());
					int mods = Integer.parseInt(bits.next());
					if (code == KeyEvent.VK_UNDEFINED && mods == 0)
					{
						continue;
					}
					v.add(new Keybind(code, mods));
				}
			}
			catch (Exception e)
			{
				log.warn("Malformed Multikeybind", e);
			}
		}

		return new Multikeybind(v.build());
	}

	public boolean isUnset()
	{
		return keybinds.size() == 0;
	}

	public String toString()
	{
		if (keybinds.size() == 0)
		{
			return "Not set";
		}

		return keybinds.stream()
			.map(Keybind::toString)
			.collect(Collectors.joining(" "));
	}

	public Multikeybind with(Keybind... more)
	{
		return new Multikeybind(ImmutableList.<Keybind>builder()
			.addAll(keybinds)
			.add(more)
			.build());
	}

	enum MatchState
	{
		NO,
		PARTIAL,
		YES,
	}
}

package abex.os.telemenu;

import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.Model;
import net.runelite.api.ModelData;
import net.runelite.api.Perspective;
import net.runelite.api.Rasterizer;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetType;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

public class VarlamoreOverlay extends Overlay
{
	private static final int IF_VARLAMORE_TELEMENU = 874;
	private static final int CC_VT_BG_LAYER = 2;
	private static final int CC_VT_BG_MODEL = 3;

	private final Client client;
	private final BetterTeleportMenuConfig config;

	@Inject
	public VarlamoreOverlay(Client client, BetterTeleportMenuConfig config)
	{
		this.client = client;
		this.config = config;

		drawAfterLayer(IF_VARLAMORE_TELEMENU, CC_VT_BG_LAYER);
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.MANUAL);
	}

	@Override
	public Dimension render(Graphics2D graphics2D)
	{
		Widget bgWidget = client.getWidget(IF_VARLAMORE_TELEMENU, CC_VT_BG_MODEL);
		if (bgWidget == null || bgWidget.getType() != WidgetType.MODEL || !config.enhanceQuetzalContrast())
		{
			return null;
		}

		ModelData md = client.loadModelData(bgWidget.getModelId());
		if (md == null)
		{
			return null;
		}

		Model m = md.cloneTransparencies(true).light();

		byte[] trans = m.getFaceTransparencies();
		for (int i = 0; i < trans.length; i++)
		{
			int v = 256 - trans[i];
			v /= 2;
			trans[i] = (byte) (256 - v);
		}

		m.calculateBoundsCylinder();

		Rasterizer r = client.getRasterizer();

		Rectangle bounds = bgWidget.getParent().getBounds();

		r.setDrawRegion(bounds.x, bounds.y, bounds.x + bounds.width, bounds.y + bounds.height);
		r.resetRasterClipping();

		int var32 = bgWidget.getModelZoom() * Perspective.SINE[bgWidget.getRotationX()] >> 16;
		int var24 = bgWidget.getModelZoom() * Perspective.COSINE[bgWidget.getRotationX()] >> 16;
		m.drawOrtho(0,
			bgWidget.getRotationZ(), bgWidget.getRotationY(), bgWidget.getRotationX(),
			0, var32, var24, bgWidget.getModelZoom());

		return null;
	}
}

package abex.os.telemenu;

import java.awt.BorderLayout;
import java.awt.MouseInfo;
import java.awt.Window;
import java.util.function.Consumer;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;

public class HotkeyDialog extends JDialog
{
	public HotkeyDialog(Window owner, String titleText, Multikeybind defaul, Multikeybind current, Consumer<Multikeybind> done)
	{
		super(owner, ModalityType.APPLICATION_MODAL);
		setTitle("Set hotkey");

		JPanel pane = new JPanel();
		GroupLayout gl = new GroupLayout(pane);
		pane.setLayout(gl);

		JLabel title = new JLabel(titleText);
		MultikeybindButton hotkeyBtn = new MultikeybindButton(current);

		JButton defaultBtn = new JButton("Default");
		defaultBtn.addActionListener(ev ->
		{
			hotkeyBtn.setValue(defaul);
		});

		JButton ok = new JButton("Ok");
		ok.addActionListener(ev ->
		{
			done.accept(hotkeyBtn.getValue());
			this.setVisible(false);
			this.dispose();
		});

		JButton cancel = new JButton("Cancel");
		cancel.addActionListener(ev ->
		{
			this.setVisible(false);
			this.dispose();
		});

		gl.setAutoCreateGaps(true);
		gl.setAutoCreateContainerGaps(true);

		gl.setVerticalGroup(gl.createSequentialGroup()
			.addComponent(true, title)
				.addGroup(gl.createParallelGroup()
					.addComponent(hotkeyBtn)
					.addComponent(defaultBtn))
			.addGroup(gl.createParallelGroup()
				.addComponent(ok)
				.addComponent(cancel)));
		gl.setHorizontalGroup(gl.createParallelGroup()
			.addComponent(title)
			.addGroup(gl.createSequentialGroup()
				.addComponent(hotkeyBtn)
				.addGap(12)
				.addComponent(defaultBtn))
			.addGroup(gl.createSequentialGroup()
				.addGap(0)
				.addComponent(ok)
				.addComponent(cancel)));

		getContentPane().setLayout(new BorderLayout());
		getContentPane().add(pane, BorderLayout.CENTER);

		pack();
		setLocation(MouseInfo.getPointerInfo().getLocation());
		setVisible(true);
	}
}

package abex.os.telemenu;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.collect.HashMultimap;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Multimap;
import com.google.inject.Provides;
import java.applet.Applet;
import java.awt.Component;
import java.awt.Window;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.inject.Inject;
import javax.swing.SwingUtilities;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.Accessors;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.MenuAction;
import net.runelite.api.events.BeforeRender;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.events.PostStructComposition;
import net.runelite.api.events.ScriptPostFired;
import net.runelite.api.events.ScriptPreFired;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.config.Keybind;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.input.KeyListener;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Better Teleport Menu",
	description = "Customize hotkeys for the Spirit Tree/Jewelery box/Portal nexus layout/Diary/Construction cape interfaces",
	tags = "poh,jewelery,cape,diary,tele,port,nexus,hotkey,keybind,disable,strikethrough"
)
public class BetterTeleportMenuPlugin extends Plugin implements KeyListener
{
	private static final int PARAMID_TELENEXUS_DESTINATION_NAME = 660;

	private static final char CHAR_UNSET = '\0';

	@VisibleForTesting
	static final Pattern KEY_PREFIX_MATCHER = Pattern.compile("^(?:(<[^>]+>)([A-Za-z0-9])(:</[^>]+> |</[^>]+> *: +))?(.*?)((?:\\([^)]+\\))?)$");

	private static final Map<Integer, String> ALTERNATE_NEXUS_NAMES = ImmutableMap.<Integer, String>builder()
		.put(459, "Digsite")
		.put(460, "Ape Atoll")
		.put(461, "Canifis")
		.put(466, "Demonic Ruins")
		.put(469, "Frozen Waste Plateau")
		.put(470, "Graveyard of Shadows")
		.build();

	// cleanify(display) -> canon
	private static Map<String, String> canonicalNames = new HashMap<>();
	// canon -> old
	private static Multimap<String, String> migrateNames = HashMultimap.create();

	static
	{
		migrateNames.put("telenexus-carralanger", "telenexus-carralangar");
	}

	@Inject
	private Client client;

	@Inject
	private KeyManager keyManager;

	@Inject
	private ClientThread clientThread;

	@Inject
	private BetterTeleportMenuConfig config;

	@Inject
	private ConfigManager configManager;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private MenuBackgroundOverlay menuBackgroundOverlay;

	@Inject
	private VarlamoreOverlay varlamoreOverlay;

	private List<KeyEvent> recentKeypresses = new ArrayList<>();

	private List<TeleMenu> teleMenus = new ArrayList<>();

	private int timeout = 0;
	private boolean menuJustOpened = false;

	@Subscribe
	private void onGameTick(GameTick t)
	{
		List<TeleMenu> change = null;
		for (TeleMenu menu : teleMenus)
		{
			if (client.getWidget(menu.textWidget.getId() >> 16, 0) == null)
			{
				if (change == null)
				{
					change = new ArrayList<>(teleMenus);
				}
				change.remove(menu);
			}
		}
		if (change != null)
		{
			teleMenus = change;
		}
	}

	@Subscribe
	private void onBeforeRender(BeforeRender ev)
	{
	}

	private String activeMenu = null;

	@Subscribe
	private void onScriptPreFired(ScriptPreFired ev)
	{
		switch (ev.getScriptId())
		{
			case ScriptID.MENU_SETUP:
			{
				String title = client.getStringStack()[client.getStringStackSize() - 1];
				activeMenu = cleanify(title);
				teleMenus = new ArrayList<>();
				break;
			}
		}
	}

	@Subscribe
	private void onPostStructComposition(PostStructComposition ev)
	{
		String newName = ALTERNATE_NEXUS_NAMES.get(ev.getStructComposition().getId());
		if (newName != null)
		{
			if (config.alternateNames())
			{
				String oldName = ev.getStructComposition().getStringValue(PARAMID_TELENEXUS_DESTINATION_NAME);
				// the old name in parentheses is stripped before being passed to cleanify
				String cleanOld = "telenexus-" + cleanify(oldName);
				String cleanNew = "telenexus-" + cleanify(newName);
				canonicalNames.put(cleanNew + "-", cleanOld);
				migrateNames.put(cleanOld, cleanNew); // versions which wrote this did not include the -
				ev.getStructComposition().setValue(PARAMID_TELENEXUS_DESTINATION_NAME, newName + " (" + oldName + ")");
			}
		}
	}

	@Subscribe
	private void onConfigChanged(ConfigChanged ev)
	{
		if (!BetterTeleportMenuConfig.GROUP.equals(ev.getGroup()))
		{
			return;
		}

		if ("alternateNames".equals(ev.getKey()))
		{
			clientThread.invoke(() ->
				client.getStructCompositionCache().reset());
		}
	}

	@Subscribe
	private void onScriptPostFired(ScriptPostFired ev)
	{
		switch (ev.getScriptId())
		{
			case ScriptID.MENU:
			case ScriptID.TOPLEVEL_RESIZE:
				menuBackgroundOverlay.resize();
				break;
			case ScriptID.MENU_CREATEENTRY:
				if (activeMenu != null)
				{
					new TeleMenu()
						.textWidget(client.getScriptActiveWidget())
						.resumeWidget(client.getScriptActiveWidget())
						.opWidget(client.getScriptActiveWidget())
						.keyListenerWidget(client.getScriptDotWidget())
						.identifier(activeMenu)
						.disable(() ->
						{
							Widget textWidget = client.getScriptActiveWidget();
							textWidget.setHidden(true);
							client.getIntStack()[client.getIntStackSize() - 1] -= textWidget.getOriginalHeight();
						})
						.build();
				}
				break;
			case ScriptID.TELENEXUS_CREATE_TELELINE:
				new TeleMenu()
					.textWidget(client.getScriptActiveWidget())
					.resumeWidget(client.getScriptDotWidget())
					.opWidget(client.getWidget(client.getScriptActiveWidget().getId() + 1)
						.getChild(client.getScriptActiveWidget().getIndex()))
					.keyListenerWidget(client.getScriptDotWidget())
					.identifier("telenexus")
					.build();
				break;
			case ScriptID.POH_JEWELLERY_BOX_ADDBUTTON:
				new TeleMenu()
					.textWidget(client.getScriptActiveWidget())
					.resumeWidget(client.getScriptDotWidget())
					.opWidget(client.getScriptActiveWidget())
					.keyListenerWidget(client.getScriptDotWidget())
					.identifier("jewelbox")
					.build();
				break;
		}
	}

	@NoArgsConstructor
	@Accessors(fluent = true, chain = true)
	class TeleMenu
	{
		@Setter
		Widget textWidget;
		@Setter
		Widget resumeWidget;
		@Setter
		Widget opWidget;
		@Setter
		Widget keyListenerWidget;

		@Setter
		String identifier = "";

		@Setter
		String highlightTag = "<shad=ffffff>";

		@Setter
		Runnable disable;

		String displayText;
		char defaultBind;
		String preText;
		String postText;

		boolean highlight;
		boolean disabled;

		Multikeybind bind;

		public void build()
		{
			if (!this.identifier.isEmpty())
			{
				this.identifier += "-";
			}

			Matcher m = KEY_PREFIX_MATCHER.matcher(textWidget.getText());
			if (!m.find())
			{
				log.warn("bad msg \"{}\"", textWidget.getText());
				return;
			}
			preText = m.group(1);
			if (preText == null)
			{
				preText = "<col=735a28>";
			}
			if (m.group(2) == null)
			{
				defaultBind = CHAR_UNSET;
			}
			else
			{
				defaultBind = Character.toUpperCase(m.group(2).charAt(0));
			}
			postText = m.group(3);
			if (postText == null)
			{
				postText = "</col>: ";
			}
			displayText = m.group(4) + m.group(5);

			this.identifier += cleanify(m.group(4));
			if (!"spirit-tree-locations-your-house-".equals(this.identifier))
			{
				this.identifier += cleanify(m.group(5));
			}
			this.identifier = canonicalNames.getOrDefault(this.identifier, this.identifier);
			String strConfigValue = null;
			for (String ident : migrateNames.get(this.identifier))
			{
				if (ident.equals(identifier))
				{
					continue;
				}

				String v = configManager.getConfiguration(BetterTeleportMenuConfig.GROUP, BetterTeleportMenuConfig.KEYBIND_PREFIX + ident);
				if (v != null)
				{
					strConfigValue = v;
					configManager.unsetConfiguration(BetterTeleportMenuConfig.GROUP, BetterTeleportMenuConfig.KEYBIND_PREFIX + ident);
				}
			}
			{
				String v = configManager.getConfiguration(BetterTeleportMenuConfig.GROUP, BetterTeleportMenuConfig.KEYBIND_PREFIX + identifier);
				if (v != null)
				{
					strConfigValue = v;
				}
				else if (strConfigValue != null)
				{
					configManager.setConfiguration(BetterTeleportMenuConfig.GROUP, BetterTeleportMenuConfig.KEYBIND_PREFIX + identifier, strConfigValue);
				}
			}
			this.bind = Multikeybind.fromConfig(strConfigValue);
			if (this.bind == null)
			{
				this.bind = defaultMultiBind();
			}

			disabled = disable != null && config.hideDisabled() && displayText.startsWith("<str>");
			if (disabled)
			{
				disable.run();
			}

			clearKeyListener();
			hotkeyChanged();

			if (opWidget.getOnOpListener() == null)
			{
				// otherwise the actions don't get shown
				opWidget.setOnOpListener(net.runelite.api.ScriptID.NULL);
			}

			List<TeleMenu> change = new ArrayList<>(teleMenus);
			change.add(this);
			change.sort(Comparator.comparing((TeleMenu tm) -> tm.bind.getKeybinds().size()).reversed());
			teleMenus = change;

			menuJustOpened = true;
		}

		Multikeybind defaultMultiBind()
		{
			if (defaultBind == CHAR_UNSET)
			{
				return new Multikeybind();
			}
			return new Multikeybind(new Keybind(defaultBind, 0));
		}

		void hotkeyChanged()
		{
			opWidget.setAction(8, "Set Hotkey (" + this.bind + ")");
			if (this.bind.isUnset())
			{
				textWidget.setText(displayText);
			}
			else
			{
				String preHighlight = this.highlight ? this.highlightTag : "";
				textWidget.setText(this.preText + this.bind + this.postText + preHighlight + displayText);
			}
		}

		void openSetDialog()
		{
			SwingUtilities.invokeLater(() ->
			{
				Window window = null;
				for (Component c = (Applet) client; c != null; c = c.getParent())
				{
					if (c instanceof Window)
					{
						window = (Window) c;
						break;
					}
				}
				new HotkeyDialog(window, this.displayText, defaultMultiBind(), bind, bind ->
				{
					this.bind = bind;
					configManager.setConfiguration(BetterTeleportMenuConfig.GROUP, BetterTeleportMenuConfig.KEYBIND_PREFIX + identifier, bind.toConfig());
					clientThread.invokeLater(() -> hotkeyChanged());
				});
			});
		}

		void clearKeyListener()
		{
			keyListenerWidget.setOnKeyListener((Object[]) null);
		}

		void onTrigger()
		{
			if (disabled || timeout >= client.getGameCycle())
			{
				return;
			}

			resume(resumeWidget);
			textWidget.setText("Please wait...");
			timeout = client.getGameCycle() + 20;
		}

		Multikeybind.MatchState matches(List<KeyEvent> keyEvent)
		{
			if (bind == null)
			{
				return Multikeybind.MatchState.NO;
			}

			return bind.matches(keyEvent, config.aliasNumpad());
		}
	}

	@Subscribe
	private void onMenuOptionClicked(MenuOptionClicked ev)
	{
		if (ev.getMenuAction() == MenuAction.CC_OP_LOW_PRIORITY && ev.getId() == 9)
		{
			for (TeleMenu menu : teleMenus)
			{
				if (menu.opWidget.getId() == ev.getParam1() && menu.opWidget.getIndex() == ev.getParam0())
				{
					menu.openSetDialog();
					ev.consume();
					return;
				}
			}
		}
	}

	@Override
	public void resetConfiguration()
	{
		for (String key : configManager.getConfigurationKeys(BetterTeleportMenuConfig.GROUP + ".keybind."))
		{
			int firstDot = key.indexOf('.');
			if (firstDot != -1)
			{
				configManager.unsetConfiguration(BetterTeleportMenuConfig.GROUP, key.substring(firstDot + 1));
			}
		}
	}

	private void resume(Widget w)
	{
		assert w.getId() == w.getParentId();
		// we are abusing this cs2 to just do a cc_find + cc_resume_pausebutton for us
		client.runScript(ScriptID.SOMETHING_THAT_CC_RESUME_PAUSEBUTTON, w.getId(), w.getIndex());
	}

	private static String cleanify(String in)
	{
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < in.length(); i++)
		{
			char c = in.charAt(i);
			c = Character.toLowerCase(c);
			if ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9'))
			{
				sb.append(c);
			}
			else if (c == '-' || c == ' ')
			{
				sb.append('-');
			}
		}
		return sb.toString();
	}

	@Override
	protected void startUp() throws Exception
	{
		keyManager.registerKeyListener(this);
		// bleh idc to make this work

		overlayManager.add(menuBackgroundOverlay);
		overlayManager.add(varlamoreOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		keyManager.unregisterKeyListener(this);
		clientThread.invokeLater(() ->
		{
			client.getStructCompositionCache().reset();
		});
		// less bleh to make work but idc still

		overlayManager.remove(menuBackgroundOverlay);
		overlayManager.remove(varlamoreOverlay);
	}

	@Override
	public void keyTyped(KeyEvent keyEvent)
	{

	}

	@Override
	public void keyPressed(KeyEvent keyEvent)
	{
		if (teleMenus.isEmpty())
		{
			return;
		}

		if (menuJustOpened)
		{
			menuJustOpened = false;
			recentKeypresses.clear();
		}

		recentKeypresses.add(keyEvent);
		for (; recentKeypresses.size() > 8; recentKeypresses.remove(0)) ;
		for (TeleMenu menu : teleMenus)
		{
			Multikeybind.MatchState match = menu.matches(recentKeypresses);
			if (match != Multikeybind.MatchState.NO)
			{
				keyEvent.consume();

				if (match == Multikeybind.MatchState.YES)
				{
					clientThread.invokeLater(() -> menu.onTrigger());
					return;
				}
			}
			if (menu.highlight != (match == Multikeybind.MatchState.PARTIAL))
			{
				menu.highlight = match == Multikeybind.MatchState.PARTIAL;
				menu.hotkeyChanged();
			}
		}
	}

	@Override
	public void keyReleased(KeyEvent keyEvent)
	{

	}

	@Provides
	BetterTeleportMenuConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(BetterTeleportMenuConfig.class);
	}
}

package abex.os.telemenu;

public class ScriptID
{
	public static final int POH_JEWELLERY_BOX_ADDBUTTON = 1688;
	public static final int TELENEXUS_CREATE_TELELINE = 2675;
	public static final int MENU_SETUP = 219; // the generic scroll menu
	public static final int MENU_CREATEENTRY = 218;
	public static final int MENU = 217;
	public static final int SOMETHING_THAT_CC_RESUME_PAUSEBUTTON = 1437;
	public static final int TOPLEVEL_RESIZE = 909;

	public static final int UPDATE_SCROLLBAR = net.runelite.api.ScriptID.UPDATE_SCROLLBAR;
}

package abex.os.telemenu;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(BetterTeleportMenuConfig.GROUP)
public interface BetterTeleportMenuConfig extends Config
{
	String GROUP = "betterteleportmenu";
	String KEYBIND_PREFIX = "keybind.";

	@ConfigItem(
		keyName = "aliasNumpad",
		name = "Alias Numpad keys",
		description = "Treat numpad keys as their number row variants"
	)
	default boolean aliasNumpad()
	{
		return true;
	}

	@ConfigItem(
		keyName = "alternateNames",
		name = "Alternate names",
		description = "Change confusing names like Carrallanger to more readable variants"
	)
	default boolean alternateNames()
	{
		return true;
	}

	@ConfigItem(
		keyName = "hideDisabled",
		name = "Hide disabled entries",
		description = "Prevent showing of disabled (strikethrough) entries in the \"scroll\"-style menu"
	)
	default boolean hideDisabled()
	{
		return true;
	}

	@ConfigItem(
		keyName = "expandScrollMenu",
		name = "Expand scroll menu",
		description = "Allow the \"scroll\"-style menu to get taller"
	)
	default boolean expandScrollMenu()
	{
		return true;
	}

	@ConfigItem(
		keyName = "enhanceQuetzalContrast",
		name = "Enhance Quetzal contrast",
		description = "Darken non-interactive elements in the Varlamore quetzel transportation menu"
	)
	default boolean enhanceQuetzalContrast()
	{
		return true;
	}
}

package abex.os.telemenu;

import java.awt.event.KeyEvent;
import java.lang.reflect.Field;
import java.util.Arrays;
import javax.swing.JPanel;
import junit.framework.TestCase;
import net.runelite.client.config.Keybind;
import org.junit.Assert;
import org.junit.Test;

public class MultikeybindTest extends TestCase
{
	@Test
	public void testAliasNumpad()
	{
		Assert.assertEquals(KeyEvent.VK_NUMPAD0, Multikeybind.swapNumpadKey(KeyEvent.VK_0));
		Assert.assertEquals(KeyEvent.VK_0, Multikeybind.swapNumpadKey(KeyEvent.VK_NUMPAD0));
		Assert.assertEquals(KeyEvent.VK_NUMPAD2, Multikeybind.swapNumpadKey(KeyEvent.VK_2));
		Assert.assertEquals(KeyEvent.VK_2, Multikeybind.swapNumpadKey(KeyEvent.VK_NUMPAD2));
	}

	public void testMatches()
	{
		Multikeybind ab = new Multikeybind(new Keybind(KeyEvent.VK_A, 0), new Keybind(KeyEvent.VK_B, 0));
		Assert.assertEquals(Multikeybind.MatchState.NO, ab.matches(Arrays.asList(ke(KeyEvent.VK_B, 0))));
		Assert.assertEquals(Multikeybind.MatchState.NO, ab.matches(Arrays.asList()));
		Assert.assertEquals(Multikeybind.MatchState.PARTIAL, ab.matches(Arrays.asList(ke(KeyEvent.VK_A, 0))));
		Assert.assertEquals(Multikeybind.MatchState.PARTIAL, ab.matches(Arrays.asList(ke(KeyEvent.VK_A, 0), ke(KeyEvent.VK_SHIFT, 0))));
		Assert.assertEquals(Multikeybind.MatchState.YES, ab.matches(Arrays.asList(ke(KeyEvent.VK_A, 0), ke(KeyEvent.VK_B, 0))));
		Assert.assertEquals(Multikeybind.MatchState.YES, ab.matches(Arrays.asList(ke(KeyEvent.VK_A, 0), ke(KeyEvent.VK_SHIFT, 0), ke(KeyEvent.VK_B, 0))));
		Assert.assertEquals(Multikeybind.MatchState.NO, ab.matches(Arrays.asList(ke(KeyEvent.VK_SHIFT, 0))));

		Multikeybind aB = new Multikeybind(new Keybind(KeyEvent.VK_A, 0), new Keybind(KeyEvent.VK_B, KeyEvent.SHIFT_DOWN_MASK));
		Assert.assertEquals(Multikeybind.MatchState.YES, aB.matches(Arrays.asList(ke(KeyEvent.VK_A, 0), ke(KeyEvent.VK_SHIFT, 0), ke(KeyEvent.VK_B, KeyEvent.SHIFT_DOWN_MASK))));

		Multikeybind shift = new Multikeybind(new Keybind(KeyEvent.VK_UNDEFINED, KeyEvent.SHIFT_DOWN_MASK));
		Assert.assertEquals(Multikeybind.MatchState.YES, shift.matches(Arrays.asList(ke(KeyEvent.VK_A, 0), ke(KeyEvent.VK_SHIFT, 0))));
	}

	private KeyEvent ke(int keyCode, int modifiers)
	{
		KeyEvent ke = new KeyEvent(new JPanel(), KeyEvent.KEY_PRESSED, 0, modifiers, keyCode, 'x');
		try
		{
			Field f = KeyEvent.class.getDeclaredField("extendedKeyCode");
			f.setAccessible(true);
			f.set(ke, keyCode);
		}
		catch (ReflectiveOperationException e)
		{
			throw new RuntimeException(e);
		}
		return ke;
	}
}
package abex.os.telemenu;

import java.util.regex.Matcher;
import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;
import org.junit.Assert;
import org.junit.Test;

public class BetterTeleportMenuPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(BetterTeleportMenuPlugin.class);
		RuneLite.main(args);
	}

	@Test
	public void testKeyMatcher()
	{
		testKeyMatcher("<col=ccccff>1:</col> Foo", "", "1");
		testKeyMatcher("<col=ccccff>1</col>: Foo", "", "1");
		testKeyMatcher("<col=ccccff>1</col> :  Foo", "", "1");
		testKeyMatcher("<col=ccccff>1</col> :  Foo", "(Ignore Me)", "1");
		testKeyMatcher("Foo", "", null);
	}
	void testKeyMatcher(String test, String badSuffix, String key)
	{
		Matcher m = BetterTeleportMenuPlugin.KEY_PREFIX_MATCHER.matcher(test + badSuffix);
		Assert.assertTrue(test, m.find());
		Assert.assertEquals(key, m.group(2));
		Assert.assertEquals("Foo", m.group(4));
		Assert.assertEquals(test, (key != null ? m.group(1) + m.group(2) + m.group(3) : "") + m.group(4));
	}
}
