package tictac7x.daily;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DailyPluginTest {
	public static void main(String[] args) throws Exception {
		ExternalPluginManager.loadBuiltin(TicTac7xDailyTasksPlugin.class);
		RuneLite.main(args);
	}
}
package tictac7x.daily;

import javax.inject.Inject;

import com.google.inject.Provides;

import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.game.ItemManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;

import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.dailies.Battlestaves;
import tictac7x.daily.dailies.BowStrings;
import tictac7x.daily.dailies.BucketsOfSand;
import tictac7x.daily.dailies.BucketsOfSlime;
import tictac7x.daily.dailies.Dynamite;
import tictac7x.daily.dailies.ExplorersRingAlchemy;
import tictac7x.daily.dailies.HerbBoxes;
import tictac7x.daily.dailies.ImplingJars;
import tictac7x.daily.dailies.KingdomOfMiscellania;
import tictac7x.daily.dailies.OgreArrows;
import tictac7x.daily.dailies.PureEssence;
import tictac7x.daily.dailies.RandomRunes;

@PluginDescriptor(
    configName = "TicTac7xDailyPlugin",
    name = "Daily Tasks",
    description = "Daily infoboxes to annoy you to do your tasks",
    tags = {
        "daily",
        "battlestaves",
        "battlestaff",
        "bowstring",
        "buckets",
        "sand",
        "slime",
        "bone",
        "bonemeal",
        "dynamite",
        "herb",
        "boxes",
        "nmz",
        "impling",
        "jar",
        "kingdom",
        "ogre",
        "rantz",
        "essence",
        "runes",
        "explorer"
    }
)
public class TicTac7xDailyTasksPlugin extends Plugin {
    @Inject
    private Client client;

    @Inject
    private ClientThread clientThread;

    @Inject
    private ConfigManager configManager;

    @Inject
    private TicTac7xDailyTasksConfig config;

    @Inject
    private InfoBoxManager infoBoxManager;

    @Inject
    private ItemManager itemManager;

    @Inject
    private ChatMessageManager chatMessageManager;

    @Provides
    TicTac7xDailyTasksConfig provideConfig(final ConfigManager configManager) {
        return configManager.getConfig(TicTac7xDailyTasksConfig.class);
    }

    private final String plugin_version = "v0.3";
    private final String plugin_message = "" +
        "<colHIGHLIGHT>Daily Tasks " + plugin_version + ":<br>" +
        "<colHIGHLIGHT>* New daily to remind you buy 10 impling jars from Elnock Inquisitor.<br>" +
        "<colHIGHLIGHT>* New daily to remind you to use explorers ring alchemy charges."
    ;
    private DailyInfobox[] dailyInfoboxes = new DailyInfobox[]{};

    @Override
    protected void startUp() {
        if (client.getGameState() == GameState.LOGGED_IN) {
            generateInfoboxes();
        }
    }

    @Override
    protected void shutDown() {
        removeOldInfoboxes();
    }

    @Subscribe
    public void onVarbitChanged(final VarbitChanged event) {
        for (final DailyInfobox infobox : dailyInfoboxes) {
            infobox.onVarbitChanged(event);
        }
    }

    @Subscribe
    public void onGameStateChanged(final GameStateChanged event) {
        if (event.getGameState() != GameState.LOGGED_IN) return;

        generateInfoboxes();

        // Send message about plugin updates for once.
        if (!config.getVersion().isEmpty() && !config.getVersion().equals(plugin_version)) {
            configManager.setConfiguration(TicTac7xDailyTasksConfig.group, TicTac7xDailyTasksConfig.version, plugin_version);
            chatMessageManager.queue(QueuedMessage.builder()
                .type(ChatMessageType.CONSOLE)
                .runeLiteFormattedMessage(plugin_message)
                .build()
            );
        }
    }

    private void generateInfoboxes() {
        new Thread(() -> {
            // Sleep for 2 gameticks to make sure diary checks are read correctly.
            try { Thread.sleep(1200); } catch (final Exception ignored) {}

            clientThread.invokeLater(() -> {
                removeOldInfoboxes();

                dailyInfoboxes = new DailyInfobox[]{
                    new Battlestaves(client, config, itemManager, this),
                    new BucketsOfSand(client, config, itemManager, this),
                    new PureEssence(client, config, itemManager, this),
                    new BucketsOfSlime(client, config, itemManager, this),
                    new OgreArrows(client, config, itemManager, this),
                    new BowStrings(client, config, itemManager, this),
                    new Dynamite(client, config, itemManager, this),
                    new RandomRunes(client, config, itemManager, this),
                    new HerbBoxes(client, config, itemManager, this),
                    new KingdomOfMiscellania(client, config, configManager, itemManager, this),
                    new ImplingJars(client, config, itemManager, this),
                    new ExplorersRingAlchemy(client, config, itemManager, this),
                };

                for (final DailyInfobox infobox : dailyInfoboxes) {
                    infoBoxManager.addInfoBox(infobox);
                }
            });
        }).start();
    }

    private void removeOldInfoboxes() {
        for (final DailyInfobox infobox : dailyInfoboxes) {
            infoBoxManager.removeInfoBox(infobox);
        }
    }
}

package tictac7x.daily.common;

import net.runelite.api.Client;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.ui.overlay.infobox.InfoBox;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.TicTac7xDailyTasksPlugin;

import java.awt.Color;
import java.awt.image.BufferedImage;

public abstract class DailyInfobox extends InfoBox {
    protected final Client client;
    protected final TicTac7xDailyTasksConfig config;
    protected final TicTac7xDailyTasksPlugin plugin;

    protected final String id;

    public DailyInfobox(final String id, final BufferedImage image, final Client client, final TicTac7xDailyTasksConfig config, final TicTac7xDailyTasksPlugin plugin) {
        super(image, plugin);
        this.id = id;
        this.client = client;
        this.config = config;
        this.plugin = plugin;
    }

    abstract public boolean isShowing();

    abstract public String getText();

    abstract public String getTooltip();

    @Override
    public String getName() {
        return super.getName() + "_" + this.id;
    }

    @Override
    public boolean render() {
        return isShowing();
    }

    @Override
    public Color getTextColor() {
        return Color.red;
    }

    public void onVarbitChanged(final VarbitChanged event) {}

    public boolean isDiaryCompleted(final int diary) {
        return client.getVarbitValue(diary) == 1;
    }
}

package tictac7x.daily.dailies;

import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.Quest;
import net.runelite.api.QuestState;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.ItemManager;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.TicTac7xDailyTasksPlugin;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.Arrays;

public class KingdomOfMiscellania extends DailyInfobox {
    private final ConfigManager configManager;

    private final String percentageFormat = "%d%%";
    private final ZoneId timezone = ZoneId.of("Europe/London");
    private final String tooltip = "You need to work harder to increase your kingdom of Miscellania favor: " + percentageFormat;

    private final int VARBIT_KINGDOM_APPROVAL = 72;
    private final int FAVOR_MAX = 127;
    private final double FAVOR_LOST_MODIFIER_WITHOUT_ROYAL_TROUBLE = 0.975;
    private final double FAVOR_LOST_MODIFIER_WITH_ROYAL_TROUBLE = 0.99;
    private final int[] MISCELLANIA_REGIONS = new int[]{10044, 10300};

    public KingdomOfMiscellania(final Client client, final TicTac7xDailyTasksConfig config, final ConfigManager configManager, final ItemManager itemManager, final TicTac7xDailyTasksPlugin plugin) {
        super(TicTac7xDailyTasksConfig.kingdom_of_miscellania_percentage, itemManager.getImage(ItemID.CASKET), client, config, plugin);
        this.configManager = configManager;
    }

    @Override
    public boolean isShowing() {
        return (
            config.showKingdomOfMiscellania() &&
            Quest.THRONE_OF_MISCELLANIA.getState(client) == QuestState.FINISHED &&
            getFavorPercentage() <= config.showKingdomOfMiscellaniaFavor()
        );
    }

    @Override
    public String getText() {
        return String.format(percentageFormat, getFavorPercentage());
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, getFavorPercentage());
    }

    @Override
    public void onVarbitChanged(final VarbitChanged event) {
        if (event.getVarbitId() != VARBIT_KINGDOM_APPROVAL) return;
        if (Arrays.stream(MISCELLANIA_REGIONS).noneMatch(region -> region == client.getLocalPlayer().getWorldLocation().getRegionID())) return;

        configManager.setConfiguration(TicTac7xDailyTasksConfig.group, TicTac7xDailyTasksConfig.kingdom_of_miscellania_favor_date, LocalDateTime.now(timezone).format(DateTimeFormatter.ISO_LOCAL_DATE));
        configManager.setConfiguration(TicTac7xDailyTasksConfig.group, TicTac7xDailyTasksConfig.kingdom_of_miscellania_favor, event.getValue());
    }

    private int getFavorPercentage() {
        try {
            final LocalDate now = LocalDate.now(timezone);
            final LocalDate visited = LocalDate.parse(config.getKingdomOfMiscellaniaFavorDate());
            final long days = Math.abs(ChronoUnit.DAYS.between(now, visited));

            int favor = config.getKingdomOfMiscellaniaFavor();
            for (int i = 0; i < days; i++) {
                favor = (int) Math.round(favor *
                    (Quest.ROYAL_TROUBLE.getState(client) == QuestState.FINISHED
                        ? FAVOR_LOST_MODIFIER_WITH_ROYAL_TROUBLE
                        : FAVOR_LOST_MODIFIER_WITHOUT_ROYAL_TROUBLE)
                );
            }

            return favor * 100 / FAVOR_MAX;
        } catch (final Exception ignored) {
            return 0;
        }
    }
}

package tictac7x.daily.dailies;

import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.Varbits;
import net.runelite.client.game.ItemManager;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.TicTac7xDailyTasksPlugin;

public class HerbBoxes extends DailyInfobox {
    private final int HERB_BOXES_DAILY = 15;
    private final String tooltip = "Buy %d herb boxes from Nightmare Zone rewards shop.";

    public HerbBoxes(final Client client, final TicTac7xDailyTasksConfig config, final ItemManager itemManager, final TicTac7xDailyTasksPlugin plugin) {
        super(TicTac7xDailyTasksConfig.herb_boxes, itemManager.getImage(ItemID.HERB_BOX), client, config, plugin);
    }

    @Override
    public boolean isShowing() {
        return (
            config.showHerbBoxes() &&
            client.getVarbitValue(Varbits.ACCOUNT_TYPE) == 0 && // 0 - REGULAR ACCOUNT
            getHerbBoxesAmount() > 0
        );
    }

    @Override
    public String getText() {
        return String.valueOf(getHerbBoxesAmount());
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, getHerbBoxesAmount());
    }

    private int getHerbBoxesAmount() {
        return HERB_BOXES_DAILY - client.getVarbitValue(Varbits.DAILY_HERB_BOXES_COLLECTED);
    }
}

package tictac7x.daily.dailies;

import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.Varbits;
import net.runelite.client.game.ItemManager;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.TicTac7xDailyTasksPlugin;

public class OgreArrows extends DailyInfobox {
    private final String tooltip = "Collect %d ogre arrows from Rantz near Feldip Hills cave";

    public OgreArrows(final Client client, final TicTac7xDailyTasksConfig config, final ItemManager itemManager, final TicTac7xDailyTasksPlugin plugin) {
        super(TicTac7xDailyTasksConfig.ogre_arrows, itemManager.getImage(ItemID.OGRE_ARROW, 1000, false), client, config, plugin);
    }

    @Override
    public boolean isShowing() {
        return (
            config.showOgreArrows() &&
            isDiaryCompleted(Varbits.DIARY_WESTERN_EASY) &&
            !isDiaryCompleted(Varbits.DAILY_ARROWS_STATE)
        );
    }

    @Override
    public String getText() {
        return String.valueOf(getOgreArrowsAmount());
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, getOgreArrowsAmount());
    }

    private int getOgreArrowsAmount() {
        final boolean easy   = isDiaryCompleted(Varbits.DIARY_WESTERN_EASY);
        final boolean medium = isDiaryCompleted(Varbits.DIARY_WESTERN_MEDIUM);
        final boolean hard   = isDiaryCompleted(Varbits.DIARY_WESTERN_HARD);
        final boolean elite  = isDiaryCompleted(Varbits.DIARY_WESTERN_ELITE);

        if (easy && medium && hard && elite) return 150;
        if (easy && medium && hard) return 100;
        if (easy && medium) return 50;
        if (easy) return 25;
        return 0;
    }
}

package tictac7x.daily.dailies;

import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.Varbits;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.TicTac7xDailyTasksPlugin;
import net.runelite.client.game.ItemManager;

public class Battlestaves extends DailyInfobox {
    private final String tooltip = "Buy %d battlestaves from Zaff at Varrock for %d,000 coins";

    public Battlestaves(final Client client, final TicTac7xDailyTasksConfig config, final ItemManager itemManager, final TicTac7xDailyTasksPlugin plugin) {
        super(TicTac7xDailyTasksConfig.battlestaves, itemManager.getImage(ItemID.BATTLESTAFF), client, config, plugin);
    }

    @Override
    public boolean isShowing() {
        return (
            config.showBattlestaves() &&
            !isDiaryCompleted(Varbits.DAILY_STAVES_COLLECTED)
        );
    }

    @Override
    public String getText() {
        return String.valueOf(getRemainingBattlestavesAmount());
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, getRemainingBattlestavesAmount(), getRemainingBattlestavesAmount() * 7);
    }

    private int getRemainingBattlestavesAmount() {
        final boolean easy   = isDiaryCompleted(Varbits.DIARY_VARROCK_EASY);
        final boolean medium = isDiaryCompleted(Varbits.DIARY_VARROCK_MEDIUM);
        final boolean hard   = isDiaryCompleted(Varbits.DIARY_VARROCK_HARD);
        final boolean elite  = isDiaryCompleted(Varbits.DIARY_VARROCK_ELITE);

        if (easy && medium && hard && elite) return 120;
        if (easy && medium && hard) return 60;
        if (easy && medium) return 30;
        if (easy) return 15;
        return 5;
    }
}

package tictac7x.daily.dailies;

import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.Varbits;
import net.runelite.client.game.ItemManager;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.TicTac7xDailyTasksPlugin;

public class BucketsOfSlime extends DailyInfobox {
    private final String tooltip = "Exchange %d bones to buckets of slime and bonemeal from Robin at Porty Phasmatys";

    public BucketsOfSlime(final Client client, final TicTac7xDailyTasksConfig config, final ItemManager itemManager, final TicTac7xDailyTasksPlugin plugin) {
        super(TicTac7xDailyTasksConfig.buckets_of_slime, itemManager.getImage(ItemID.BUCKET_OF_SLIME), client, config, plugin);
    }

    @Override
    public boolean isShowing() {
        return (
            config.showBucketsOfSlime() &&
            isDiaryCompleted(Varbits.DIARY_MORYTANIA_EASY) &&
            isDiaryCompleted(Varbits.DIARY_MORYTANIA_MEDIUM) &&
            getRemainingBucketsOfSlimeAmount() > 0
        );
    }

    @Override
    public String getText() {
        return String.valueOf(getRemainingBucketsOfSlimeAmount());
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, getRemainingBucketsOfSlimeAmount());
    }

    private int getRemainingBucketsOfSlimeAmount() {
        int buckets_of_slime = 0;

        final boolean easy   = isDiaryCompleted(Varbits.DIARY_MORYTANIA_EASY);
        final boolean medium = isDiaryCompleted(Varbits.DIARY_MORYTANIA_MEDIUM);
        final boolean hard   = isDiaryCompleted(Varbits.DIARY_MORYTANIA_HARD);
        final boolean elite  = isDiaryCompleted(Varbits.DIARY_MORYTANIA_ELITE);

        if (easy && medium && hard && elite) { buckets_of_slime = 39; } else
        if (easy && medium && hard) { buckets_of_slime = 26; } else
        if (easy && medium) { buckets_of_slime = 13; } else
        if (easy) { buckets_of_slime = 0; }

        return buckets_of_slime - client.getVarbitValue(Varbits.DAILY_BONEMEAL_STATE);
    }
}

package tictac7x.daily.dailies;

import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.Varbits;
import net.runelite.client.game.ItemManager;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.TicTac7xDailyTasksPlugin;

import java.util.Random;

public class RandomRunes extends DailyInfobox {
    private final String tooltip = "Claim %d random runes from Lundail at Mage Arena bank";

    public RandomRunes(final Client client, final TicTac7xDailyTasksConfig config, final ItemManager itemManager, final TicTac7xDailyTasksPlugin plugin) {
        super(TicTac7xDailyTasksConfig.random_runes, itemManager.getImage(getRandomRuneId()), client, config, plugin);
    }

    static private int getRandomRuneId() {
        final int[] rune_ids = new int[]{
            ItemID.FIRE_RUNE,
            ItemID.WATER_RUNE,
            ItemID.AIR_RUNE,
            ItemID.EARTH_RUNE,
            ItemID.MIND_RUNE,
            ItemID.BODY_RUNE,
            ItemID.NATURE_RUNE,
            ItemID.CHAOS_RUNE,
            ItemID.LAW_RUNE,
            ItemID.COSMIC_RUNE,
            ItemID.DEATH_RUNE
        };
        final int random = new Random().nextInt(rune_ids.length);
        return rune_ids[random];
    }

    @Override
    public boolean isShowing() {
        return (
            config.showRandomRunes() &&
            isDiaryCompleted(Varbits.DIARY_WILDERNESS_EASY) &&
            !isDiaryCompleted(Varbits.DAILY_RUNES_COLLECTED)
        );
    }

    @Override
    public String getText() {
        return String.valueOf(getRandomRunesAmount());
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, getRandomRunesAmount());
    }

    private int getRandomRunesAmount() {
        final boolean easy   = isDiaryCompleted(Varbits.DIARY_WILDERNESS_EASY);
        final boolean medium = isDiaryCompleted(Varbits.DIARY_WILDERNESS_MEDIUM);
        final boolean hard   = isDiaryCompleted(Varbits.DIARY_WILDERNESS_HARD);
        final boolean elite  = isDiaryCompleted(Varbits.DIARY_WILDERNESS_ELITE);

        if (easy && medium && hard && elite) return 200;
        if (easy && medium && hard) return 120;
        if (easy && medium) return 80;
        if (easy) return 40;
        return 0;
    }
}

package tictac7x.daily.dailies;

import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.Varbits;
import net.runelite.client.game.ItemManager;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.TicTac7xDailyTasksPlugin;

public class PureEssence extends DailyInfobox {
    private final String tooltip = "Collect %d pure essence from Wizard Cromperty at East-Ardougne";

    public PureEssence(final Client client, final TicTac7xDailyTasksConfig config, final ItemManager itemManager, final TicTac7xDailyTasksPlugin plugin) {
        super(TicTac7xDailyTasksConfig.pure_essence, itemManager.getImage(ItemID.PURE_ESSENCE), client, config, plugin);
    }

    @Override
    public boolean isShowing() {
        return (
            config.showPureEssence() &&
            isDiaryCompleted(Varbits.DIARY_ARDOUGNE_EASY) &&
            isDiaryCompleted(Varbits.DIARY_ARDOUGNE_MEDIUM) &&
            !isDiaryCompleted(Varbits.DAILY_ESSENCE_COLLECTED)
        );
    }

    @Override
    public String getText() {
        return String.valueOf(getPureEssenceAmount());
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, getPureEssenceAmount());
    }

    private int getPureEssenceAmount() {
        final boolean easy   = isDiaryCompleted(Varbits.DIARY_ARDOUGNE_EASY);
        final boolean medium = isDiaryCompleted(Varbits.DIARY_ARDOUGNE_MEDIUM);
        final boolean hard   = isDiaryCompleted(Varbits.DIARY_ARDOUGNE_HARD);
        final boolean elite  = isDiaryCompleted(Varbits.DIARY_ARDOUGNE_ELITE);

        if (easy && medium && hard && elite) return 250;
        if (easy && medium && hard) return 150;
        if (easy && medium) return 100;
        if (easy) return 0;
        return 0;
    }
}

package tictac7x.daily.dailies;

import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.client.game.ItemManager;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.TicTac7xDailyTasksPlugin;

public class ImplingJars extends DailyInfobox {
    private final int VARBIT_IMPLING_JARS_BOUGHT = 11769;
    private final String tooltip = "Buy %d impling jars from Elnock Inquisitor at Puro-Puro";

    public ImplingJars(final Client client, final TicTac7xDailyTasksConfig config, final ItemManager itemManager, final TicTac7xDailyTasksPlugin plugin) {
        super(TicTac7xDailyTasksConfig.impling_jars, itemManager.getImage(ItemID.IMPLING_JAR), client, config, plugin);
    }

    @Override
    public boolean isShowing() {
        return (
            config.showImplingJars() &&
            client.getVarbitValue(VARBIT_IMPLING_JARS_BOUGHT) < 10
        );
    }

    @Override
    public String getText() {
        return String.valueOf(getRemainingImplingJarsAmount());
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, getRemainingImplingJarsAmount());
    }

    private int getRemainingImplingJarsAmount() {
        return 10 - client.getVarbitValue(VARBIT_IMPLING_JARS_BOUGHT);
    }
}

package tictac7x.daily.dailies;

import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.Varbits;
import net.runelite.client.game.ItemManager;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.TicTac7xDailyTasksPlugin;

public class BowStrings extends DailyInfobox {
    private final String tooltip = "Exchange flax to %d bow strings from the Flax Keeper at Seers Village";

    public BowStrings(final Client client, final TicTac7xDailyTasksConfig config, final ItemManager itemManager, final TicTac7xDailyTasksPlugin plugin) {
        super(TicTac7xDailyTasksConfig.bow_strings, itemManager.getImage(ItemID.BOW_STRING), client, config, plugin);
    }

    @Override
    public boolean isShowing() {
        return (
            config.showBowStrings() &&
            isDiaryCompleted(Varbits.DIARY_KANDARIN_EASY) &&
            client.getVarbitValue(Varbits.DAILY_FLAX_STATE) == 0
        );
    }

    @Override
    public String getText() {
        return String.valueOf(getRemainingBowStringsAmount());
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, getRemainingBowStringsAmount());
    }

    private int getRemainingBowStringsAmount() {
        final boolean easy   = isDiaryCompleted(Varbits.DIARY_KANDARIN_EASY);
        final boolean medium = isDiaryCompleted(Varbits.DIARY_KANDARIN_MEDIUM);
        final boolean hard   = isDiaryCompleted(Varbits.DIARY_KANDARIN_HARD);
        final boolean elite  = isDiaryCompleted(Varbits.DIARY_KANDARIN_ELITE);

        if (easy && medium && hard && elite) return 250;
        if (easy && medium && hard) return 120;
        if (easy && medium) return 60;
        if (easy) return 30;
        return 0;
    }
}

package tictac7x.daily.dailies;

import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.Varbits;
import net.runelite.client.game.ItemManager;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.TicTac7xDailyTasksPlugin;
import tictac7x.daily.common.DailyInfobox;

public class ExplorersRingAlchemy extends DailyInfobox {
    private final String tooltip = "You have %d alchemy uses left on your Explorers ring";

    public ExplorersRingAlchemy(final Client client, final TicTac7xDailyTasksConfig config, final ItemManager itemManager, final TicTac7xDailyTasksPlugin plugin) {
        super(TicTac7xDailyTasksConfig.explorers_ring_alchemy, itemManager.getImage(getPlayerExplorerRingId(client)), client, config, plugin);
    }

    static private int getPlayerExplorerRingId(final Client client) {
        final boolean easy   = client.getVarbitValue(Varbits.DIARY_LUMBRIDGE_EASY) == 1;
        final boolean medium = client.getVarbitValue(Varbits.DIARY_LUMBRIDGE_MEDIUM) == 1;
        final boolean hard   = client.getVarbitValue(Varbits.DIARY_LUMBRIDGE_HARD) == 1;
        final boolean elite  = client.getVarbitValue(Varbits.DIARY_LUMBRIDGE_ELITE) == 1;

        if (easy && medium && hard && elite) return ItemID.EXPLORERS_RING_4;
        if (easy && medium && hard) return ItemID.EXPLORERS_RING_3;
        if (easy && medium) return ItemID.EXPLORERS_RING_2;
        return ItemID.EXPLORERS_RING_1;
    }

    @Override
    public boolean isShowing() {
        return (
            config.showExplorersRingAlchemy() &&
            isDiaryCompleted(Varbits.DIARY_LUMBRIDGE_EASY) &&
            getRemainingAlchemyUses() > 0
        );
    }

    @Override
    public String getText() {
        return String.valueOf(getRemainingAlchemyUses());
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, getRemainingAlchemyUses());
    }

    private int getRemainingAlchemyUses() {
        return 30 - client.getVarbitValue(Varbits.EXPLORER_RING_ALCHS);
    }
}

package tictac7x.daily.dailies;

import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.Quest;
import net.runelite.api.QuestState;
import net.runelite.api.Varbits;
import net.runelite.client.game.ItemManager;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.TicTac7xDailyTasksPlugin;

public class BucketsOfSand extends DailyInfobox {
    private final int AMOUNT_BUCKETS_OF_SAND = 84;
    private final String tooltip = "Collect %d buckets of sand from Bert at Yanille";

    public BucketsOfSand(final Client client, final TicTac7xDailyTasksConfig config, final ItemManager itemManager, final TicTac7xDailyTasksPlugin plugin) {
        super(TicTac7xDailyTasksConfig.buckets_of_sand, itemManager.getImage(ItemID.BUCKET_OF_SAND), client, config, plugin);
    }

    @Override
    public boolean isShowing() {
        return (
            config.showBucketsOfSand() &&
            client.getVarbitValue(Varbits.ACCOUNT_TYPE) != 2 && // 2 - ULTIMATE IRONMAN
            Quest.THE_HAND_IN_THE_SAND.getState(client) == QuestState.FINISHED &&
            !isDiaryCompleted(Varbits.DAILY_SAND_COLLECTED)
        );
    }

    @Override
    public String getText() {
        return String.valueOf(AMOUNT_BUCKETS_OF_SAND);
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, AMOUNT_BUCKETS_OF_SAND);
    }
}

package tictac7x.daily.dailies;

import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.Varbits;
import net.runelite.client.game.ItemManager;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.TicTac7xDailyTasksPlugin;

public class Dynamite extends DailyInfobox {
    private final String tooltip = "Claim %d dynamite from Thirus at Lovakengj";

    public Dynamite(final Client client, final TicTac7xDailyTasksConfig config, final ItemManager itemManager, final TicTac7xDailyTasksPlugin plugin) {
        super(TicTac7xDailyTasksConfig.dynamite, itemManager.getImage(ItemID.DYNAMITE), client, config, plugin);
    }

    @Override
    public boolean isShowing() {
        return (
            config.showDynamite() &&
            isDiaryCompleted(Varbits.DIARY_KOUREND_EASY) &&
            isDiaryCompleted(Varbits.DIARY_KOUREND_MEDIUM) &&
            !isDiaryCompleted(Varbits.DAILY_DYNAMITE_COLLECTED)
        );
    }

    @Override
    public String getText() {
        return String.valueOf(getDynamiteAmount());
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, getDynamiteAmount());
    }

    private int getDynamiteAmount() {
        final boolean easy   = isDiaryCompleted(Varbits.DIARY_KOUREND_EASY);
        final boolean medium = isDiaryCompleted(Varbits.DIARY_KOUREND_MEDIUM);
        final boolean hard   = isDiaryCompleted(Varbits.DIARY_KOUREND_HARD);
        final boolean elite  = isDiaryCompleted(Varbits.DIARY_KOUREND_ELITE);

        if (easy && medium && hard && elite) return 80;
        if (easy && medium && hard) return 40;
        if (easy && medium) return 20;
        if (easy) return 0;
        return 0;
    }
}

package tictac7x.daily;

import net.runelite.client.config.*;

@ConfigGroup(TicTac7xDailyTasksConfig.group)
public interface TicTac7xDailyTasksConfig extends Config {
    String group = "tictac7x-daily";
    String version = "version";
    String battlestaves = "battlestaves";
    String herb_boxes = "herb_boxes";
    String random_runes = "lundail_runes";
    String bow_strings = "bow_strings";
    String impling_jars = "impling_jars";
    String buckets_of_sand = "buckets_of_sand";
    String buckets_of_slime = "buckets_of_slime";
    String ogre_arrows = "ogre_arrows";
    String pure_essence = "pure_essence";
    String dynamite = "dynamite";
    String explorers_ring_alchemy = "explorers_ring_alchemy";
    String kingdom_of_miscellania = "kingdom_of_miscellania";
    String kingdom_of_miscellania_percentage = "kingdom_of_miscellania_percentage";
    String kingdom_of_miscellania_favor = "kingdom_of_miscellania_favor";
    String kingdom_of_miscellania_favor_date = "miscellania_favor_date";

    @ConfigSection(
        name = "Infoboxes",
        description = "Infoboxes",
        position = 1
    ) String infoboxes = "infoboxes";

        @ConfigItem(
            keyName = battlestaves,
            name = "Battlestaves from Zaff",
            description = "Reminds you to buy battlestaves from Zaff at Varrock.",
            section = infoboxes
        ) default boolean showBattlestaves() { return true; }

        @ConfigItem(
            keyName = bow_strings,
            name = "Bow strings from Flax Keeper",
            description = "Reminds you to exchange flax for Bow Strings from the Flax Keeper at Seers Village.",
            section = infoboxes
        ) default boolean showBowStrings() { return true; }

        @ConfigItem(
            keyName = buckets_of_sand,
            name = "Buckets of sand from Bert",
            description = "Reminds you to collect 84 buckets of sand from Bert at Yanille.",
            section = infoboxes
        ) default boolean showBucketsOfSand() { return true; }

        @ConfigItem(
            keyName = buckets_of_slime,
            name = "Buckets of slime and bonemeal from Robin",
            description = "Reminds you to exchange bones for buckets of slime and bonemeal from Robin at Port Phasmatys.",
            section = infoboxes
        ) default boolean showBucketsOfSlime() { return true; }

        @ConfigItem(
            keyName = kingdom_of_miscellania,
            name = "Miscellania kingdom management",
            description = "Reminds you to manage Miscellania kingdom.",
            section = infoboxes,
            position = 98
        ) default boolean showKingdomOfMiscellania() { return true; }

        @Range(min = 0, max = 99)
        @ConfigItem(
            keyName = kingdom_of_miscellania_percentage,
            name = "Miscellania favor",
            description = "Reminds you to keep favor of Miscellania over certain percentage.",
            position = 99,
            section = infoboxes
        ) default int showKingdomOfMiscellaniaFavor() { return 99; }

        @ConfigItem(
            keyName = ogre_arrows,
            name = "Ogre arrows from Rantz",
            description = "Reminds you to collect ogre arrows from Rantz near Feldip Hills cave.",
            section = infoboxes
        ) default boolean showOgreArrows() { return true; }

        @ConfigItem(
            keyName = pure_essence,
            name = "Pure essence from Wizard Cromperty",
            description = "Reminds you to collect pure essence from Wizard Cromperty at East-Ardougne.",
            section = infoboxes
        ) default boolean showPureEssence() { return true; }

        @ConfigItem(
            keyName = dynamite,
            name = "Dynamite from Thirus",
            description = "Reminds you to collect dynamite from Thirus.",
            section = infoboxes
        ) default boolean showDynamite() { return true; }

        @ConfigItem(
            keyName = random_runes,
            name = "Random runes from Lundail",
            description = "Reminds you to collect random runes from Lundail.",
            section = infoboxes
        ) default boolean showRandomRunes() { return true; }

        @ConfigItem(
            keyName = herb_boxes,
            name = "Herb boxes from Nightmare Zone",
            description = "Reminds you to buy herb boxes from Nightmare Zone.",
            section = infoboxes
        ) default boolean showHerbBoxes() { return true; }

        @ConfigItem(
            keyName = impling_jars,
            name = "Impling jars from Elnock Inquisitor",
            description = "Reminds you to buy impling jars from Elnock Inquisitor.",
            section = infoboxes
        ) default boolean showImplingJars() { return true; }

        @ConfigItem(
            keyName = explorers_ring_alchemy,
            name = "Explorers ring alchemy uses",
            description = "Reminds you to use explorers ring alchemy charges.",
            section = infoboxes
        ) default boolean showExplorersRingAlchemy() { return true; }

    @ConfigSection(
        name = "Debug",
        description = "Debug",
        position = 99,
        closedByDefault = true
    ) String debug = "debug";

        @ConfigItem(
            keyName = version,
            name = "Version",
            description = "Version of the plugin for update message",
            section = debug,
            position = 99
        ) default String getVersion() { return ""; }

        @Range(min = 0, max = 127)
        @ConfigItem(
            keyName = kingdom_of_miscellania_favor,
            name = kingdom_of_miscellania_favor,
            description = kingdom_of_miscellania_favor,
            section = debug
        ) default int getKingdomOfMiscellaniaFavor() { return 0; }

        @ConfigItem(
            keyName = kingdom_of_miscellania_favor_date,
            name = kingdom_of_miscellania_favor_date,
            description = kingdom_of_miscellania_favor_date,
            section = debug
        ) default String getKingdomOfMiscellaniaFavorDate() { return null; }
}

