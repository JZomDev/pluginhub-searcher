package tictac7x.daily;

import net.runelite.client.config.*;

@ConfigGroup(TicTac7xDailyTasksConfig.group)
public interface TicTac7xDailyTasksConfig extends Config {
    String group = "tictac7x-daily";
    String version = "version";
    String battlestaves = "battlestaves";
    String herb_boxes = "herb_boxes";
    String random_runes = "lundail_runes";
    String bow_strings = "bow_strings";
    String impling_jars = "impling_jars";
    String buckets_of_sand = "buckets_of_sand";
    String buckets_of_slime = "buckets_of_slime";
    String ogre_arrows = "ogre_arrows";
    String pure_essence = "pure_essence";
    String dynamite = "dynamite";
    String explorers_ring_alchemy = "explorers_ring_alchemy";
    String kingdom_of_miscellania = "kingdom_of_miscellania";
    String kingdom_of_miscellania_percentage = "kingdom_of_miscellania_percentage";
    String kingdom_of_miscellania_favor = "kingdom_of_miscellania_favor";
    String kingdom_of_miscellania_favor_date = "miscellania_favor_date";

    @ConfigSection(
        name = "Infoboxes",
        description = "Infoboxes",
        position = 1
    ) String infoboxes = "infoboxes";

        @ConfigItem(
            keyName = battlestaves,
            name = "Battlestaves from Zaff",
            description = "Reminds you to buy battlestaves from Zaff at Varrock.",
            section = infoboxes
        ) default boolean showBattlestaves() { return true; }

        @ConfigItem(
            keyName = bow_strings,
            name = "Bow strings from Flax Keeper",
            description = "Reminds you to exchange flax for Bow Strings from the Flax Keeper at Seers Village.",
            section = infoboxes
        ) default boolean showBowStrings() { return true; }

        @ConfigItem(
            keyName = buckets_of_sand,
            name = "Buckets of sand from Bert",
            description = "Reminds you to collect 84 buckets of sand from Bert at Yanille.",
            section = infoboxes
        ) default boolean showBucketsOfSand() { return true; }

        @ConfigItem(
            keyName = buckets_of_slime,
            name = "Buckets of slime and bonemeal from Robin",
            description = "Reminds you to exchange bones for buckets of slime and bonemeal from Robin at Port Phasmatys.",
            section = infoboxes
        ) default boolean showBucketsOfSlime() { return true; }

        @ConfigItem(
            keyName = kingdom_of_miscellania,
            name = "Miscellania kingdom management",
            description = "Reminds you to manage Miscellania kingdom.",
            section = infoboxes,
            position = 98
        ) default boolean showKingdomOfMiscellania() { return true; }

        @Range(min = 0, max = 99)
        @ConfigItem(
            keyName = kingdom_of_miscellania_percentage,
            name = "Miscellania favor",
            description = "Reminds you to keep favor of Miscellania over certain percentage.",
            position = 99,
            section = infoboxes
        ) default int showKingdomOfMiscellaniaFavor() { return 99; }

        @ConfigItem(
            keyName = ogre_arrows,
            name = "Ogre arrows from Rantz",
            description = "Reminds you to collect ogre arrows from Rantz near Feldip Hills cave.",
            section = infoboxes
        ) default boolean showOgreArrows() { return true; }

        @ConfigItem(
            keyName = pure_essence,
            name = "Pure essence from Wizard Cromperty",
            description = "Reminds you to collect pure essence from Wizard Cromperty at East-Ardougne.",
            section = infoboxes
        ) default boolean showPureEssence() { return true; }

        @ConfigItem(
            keyName = dynamite,
            name = "Dynamite from Thirus",
            description = "Reminds you to collect dynamite from Thirus.",
            section = infoboxes
        ) default boolean showDynamite() { return true; }

        @ConfigItem(
            keyName = random_runes,
            name = "Random runes from Lundail",
            description = "Reminds you to collect random runes from Lundail.",
            section = infoboxes
        ) default boolean showRandomRunes() { return true; }

        @ConfigItem(
            keyName = herb_boxes,
            name = "Herb boxes from Nightmare Zone",
            description = "Reminds you to buy herb boxes from Nightmare Zone.",
            section = infoboxes
        ) default boolean showHerbBoxes() { return true; }

        @ConfigItem(
            keyName = impling_jars,
            name = "Impling jars from Elnock Inquisitor",
            description = "Reminds you to buy impling jars from Elnock Inquisitor.",
            section = infoboxes
        ) default boolean showImplingJars() { return true; }

        @ConfigItem(
            keyName = explorers_ring_alchemy,
            name = "Explorers ring alchemy uses",
            description = "Reminds you to use explorers ring alchemy charges.",
            section = infoboxes
        ) default boolean showExplorersRingAlchemy() { return true; }

    @ConfigSection(
        name = "Debug",
        description = "Debug",
        position = 99,
        closedByDefault = true
    ) String debug = "debug";

        @ConfigItem(
            keyName = version,
            name = "Version",
            description = "Version of the plugin for update message",
            section = debug,
            position = 99
        ) default String getVersion() { return ""; }

        @Range(min = 0, max = 127)
        @ConfigItem(
            keyName = kingdom_of_miscellania_favor,
            name = kingdom_of_miscellania_favor,
            description = kingdom_of_miscellania_favor,
            section = debug
        ) default int getKingdomOfMiscellaniaFavor() { return 0; }

        @ConfigItem(
            keyName = kingdom_of_miscellania_favor_date,
            name = kingdom_of_miscellania_favor_date,
            description = kingdom_of_miscellania_favor_date,
            section = debug
        ) default String getKingdomOfMiscellaniaFavorDate() { return null; }
}

package tictac7x.daily.dailies;

import net.runelite.api.gameval.ItemID;
import net.runelite.api.gameval.VarbitID;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.common.Provider;

import java.util.Random;

public class RandomRunes extends DailyInfobox {
    private final String tooltip = "Claim %d random runes from Lundail at Mage Arena bank";

    public RandomRunes(final Provider provider) {
        super(TicTac7xDailyTasksConfig.random_runes, provider.itemManager.getImage(getRandomRuneId()), provider);
    }

    static private int getRandomRuneId() {
        final int[] rune_ids = new int[]{
            ItemID.MINDRUNE,
            ItemID.BODYRUNE,
            ItemID.COSMICRUNE,
            ItemID.NATURERUNE,
            ItemID.LAWRUNE,
            ItemID.CHAOSRUNE,
            ItemID.DEATHRUNE,
        };
        final int random = new Random().nextInt(rune_ids.length);
        return rune_ids[random];
    }

    @Override
    public boolean isShowing() {
        return (
            provider.config.showRandomRunes() &&
            varbitEqualsOne(VarbitID.WILDERNESS_DIARY_EASY_COMPLETE) &&
            !varbitEqualsOne(VarbitID.LUNDAIL_LAST_CLAIMED)
        );
    }

    @Override
    public String getText() {
        return String.valueOf(getRandomRunesAmount());
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, getRandomRunesAmount());
    }

    private int getRandomRunesAmount() {
        final boolean easy   = varbitEqualsOne(VarbitID.WILDERNESS_DIARY_EASY_COMPLETE);
        final boolean medium = varbitEqualsOne(VarbitID.WILDERNESS_DIARY_MEDIUM_COMPLETE);
        final boolean hard   = varbitEqualsOne(VarbitID.WILDERNESS_DIARY_HARD_COMPLETE);
        final boolean elite  = varbitEqualsOne(VarbitID.WILDERNESS_DIARY_ELITE_COMPLETE);

        if (easy && medium && hard && elite) return 200;
        if (easy && medium && hard) return 120;
        if (easy && medium) return 80;
        if (easy) return 40;
        return 0;
    }
}

package tictac7x.daily.dailies;

import net.runelite.api.gameval.ItemID;
import net.runelite.api.gameval.VarbitID;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.common.Provider;

public class OgreArrows extends DailyInfobox {
    private final String tooltip = "Collect %d ogre arrows from Rantz near Feldip Hills cave";

    public OgreArrows(final Provider provider) {
        super(TicTac7xDailyTasksConfig.ogre_arrows, provider.itemManager.getImage(ItemID.OGRE_ARROW, 1000, false), provider);
    }

    @Override
    public boolean isShowing() {
        return (
            provider.config.showOgreArrows() &&
            varbitEqualsOne(VarbitID.WESTERN_DIARY_EASY_COMPLETE) &&
            !varbitEqualsOne(VarbitID.WESTERN_RANTZ_ARROWS)
        );
    }

    @Override
    public String getText() {
        return String.valueOf(getOgreArrowsAmount());
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, getOgreArrowsAmount());
    }

    private int getOgreArrowsAmount() {
        final boolean easy   = varbitEqualsOne(VarbitID.WESTERN_DIARY_EASY_COMPLETE);
        final boolean medium = varbitEqualsOne(VarbitID.WESTERN_DIARY_MEDIUM_COMPLETE);
        final boolean hard   = varbitEqualsOne(VarbitID.WESTERN_DIARY_HARD_COMPLETE);
        final boolean elite  = varbitEqualsOne(VarbitID.WESTERN_DIARY_ELITE_COMPLETE);

        if (easy && medium && hard && elite) return 150;
        if (easy && medium && hard) return 100;
        if (easy && medium) return 50;
        if (easy) return 25;
        return 0;
    }
}

package tictac7x.daily.dailies;

import net.runelite.api.gameval.ItemID;
import net.runelite.api.gameval.VarbitID;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.common.Provider;

public class Dynamite extends DailyInfobox {
    private final String tooltip = "Claim %d dynamite from Thirus at Lovakengj";

    public Dynamite(final Provider provider) {
        super(TicTac7xDailyTasksConfig.dynamite, provider.itemManager.getImage(ItemID.LOVAKENGJ_DYNAMITE_FUSED), provider);
    }

    @Override
    public boolean isShowing() {
        return (
            provider.config.showDynamite() &&
            varbitEqualsOne(VarbitID.KOUREND_DIARY_EASY_COMPLETE) &&
            varbitEqualsOne(VarbitID.KOUREND_DIARY_MEDIUM_COMPLETE) &&
            !varbitEqualsOne(VarbitID.KOUREND_FREE_DYNAMITE)
        );
    }

    @Override
    public String getText() {
        return String.valueOf(getDynamiteAmount());
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, getDynamiteAmount());
    }

    private int getDynamiteAmount() {
        final boolean easy   = varbitEqualsOne(VarbitID.KOUREND_DIARY_EASY_COMPLETE);
        final boolean medium = varbitEqualsOne(VarbitID.KOUREND_DIARY_MEDIUM_COMPLETE);
        final boolean hard   = varbitEqualsOne(VarbitID.KOUREND_DIARY_HARD_COMPLETE);
        final boolean elite  = varbitEqualsOne(VarbitID.KOUREND_DIARY_ELITE_COMPLETE);

        if (easy && medium && hard && elite) return 80;
        if (easy && medium && hard) return 40;
        if (easy && medium) return 20;
        if (easy) return 0;
        return 0;
    }
}

package tictac7x.daily.dailies;

import net.runelite.api.gameval.ItemID;
import net.runelite.api.gameval.VarbitID;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.common.Provider;

public class PureEssence extends DailyInfobox {
    private final String tooltip = "Collect %d pure essence from Wizard Cromperty at East-Ardougne";

    public PureEssence(final Provider provider) {
        super(TicTac7xDailyTasksConfig.pure_essence, provider.itemManager.getImage(ItemID.BLANKRUNE_HIGH), provider);
    }

    @Override
    public boolean isShowing() {
        return (
            provider.config.showPureEssence() &&
            varbitEqualsOne(VarbitID.ARDOUGNE_DIARY_EASY_COMPLETE) &&
            varbitEqualsOne(VarbitID.ARDOUGNE_DIARY_MEDIUM_COMPLETE) &&
            !varbitEqualsOne(VarbitID.ARDOUGNE_FREE_ESSENCE)
        );
    }

    @Override
    public String getText() {
        return String.valueOf(getPureEssenceAmount());
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, getPureEssenceAmount());
    }

    private int getPureEssenceAmount() {
        final boolean easy   = varbitEqualsOne(VarbitID.ARDOUGNE_DIARY_EASY_COMPLETE);
        final boolean medium = varbitEqualsOne(VarbitID.ARDOUGNE_DIARY_MEDIUM_COMPLETE);
        final boolean hard   = varbitEqualsOne(VarbitID.ARDOUGNE_DIARY_HARD_COMPLETE);
        final boolean elite  = varbitEqualsOne(VarbitID.ARDOUGNE_DIARY_ELITE_COMPLETE);

        if (easy && medium && hard && elite) return 250;
        if (easy && medium && hard) return 150;
        if (easy && medium) return 100;
        if (easy) return 0;
        return 0;
    }
}

package tictac7x.daily.dailies;

import net.runelite.api.gameval.ItemID;
import net.runelite.api.gameval.VarbitID;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.common.Provider;

public class BucketsOfSlime extends DailyInfobox {
    private final String tooltip = "Exchange %d bones to buckets of slime and bonemeal from Robin at Porty Phasmatys";

    public BucketsOfSlime(final Provider provider) {
        super(TicTac7xDailyTasksConfig.buckets_of_slime, provider.itemManager.getImage(ItemID.BUCKET_ECTOPLASM), provider);
    }

    @Override
    public boolean isShowing() {
        return (
            provider.config.showBucketsOfSlime() &&
            varbitEqualsOne(VarbitID.MORYTANIA_DIARY_EASY_COMPLETE) &&
            varbitEqualsOne(VarbitID.MORYTANIA_DIARY_MEDIUM_COMPLETE) &&
            getRemainingBucketsOfSlimeAmount() > 0
        );
    }

    @Override
    public String getText() {
        return String.valueOf(getRemainingBucketsOfSlimeAmount());
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, getRemainingBucketsOfSlimeAmount());
    }

    private int getRemainingBucketsOfSlimeAmount() {
        int buckets_of_slime = 0;

        final boolean easy   = varbitEqualsOne(VarbitID.MORYTANIA_DIARY_EASY_COMPLETE);
        final boolean medium = varbitEqualsOne(VarbitID.MORYTANIA_DIARY_MEDIUM_COMPLETE);
        final boolean hard   = varbitEqualsOne(VarbitID.MORYTANIA_DIARY_HARD_COMPLETE);
        final boolean elite  = varbitEqualsOne(VarbitID.MORYTANIA_DIARY_ELITE_COMPLETE);

        if (easy && medium && hard && elite) { buckets_of_slime = 39; } else
        if (easy && medium && hard) { buckets_of_slime = 26; } else
        if (easy && medium) { buckets_of_slime = 13; } else
        if (easy) { buckets_of_slime = 0; }

        return buckets_of_slime - provider.client.getVarbitValue(VarbitID.MORYTANIA_SLIME_CLAIMED);
    }
}

package tictac7x.daily.dailies;

import net.runelite.api.Quest;
import net.runelite.api.QuestState;
import net.runelite.api.gameval.ItemID;
import net.runelite.api.gameval.VarbitID;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.common.Provider;

public class BucketsOfSand extends DailyInfobox {
    private final int AMOUNT_BUCKETS_OF_SAND = 84;
    private final String tooltip = "Collect %d buckets of sand from Bert at Yanille";

    public BucketsOfSand(final Provider provider) {
        super(TicTac7xDailyTasksConfig.buckets_of_sand, provider.itemManager.getImage(ItemID.BUCKET_SAND), provider);
    }

    @Override
    public boolean isShowing() {
        return (
            provider.config.showBucketsOfSand() &&
            provider.client.getVarbitValue(VarbitID.IRONMAN) != 2 && // 2 - ULTIMATE IRONMAN
            Quest.THE_HAND_IN_THE_SAND.getState(provider.client) == QuestState.FINISHED &&
            !varbitEqualsOne(VarbitID.YANILLE_SAND_CLAIMED)
        );
    }

    @Override
    public String getText() {
        return String.valueOf(AMOUNT_BUCKETS_OF_SAND);
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, AMOUNT_BUCKETS_OF_SAND);
    }
}

package tictac7x.daily.dailies;

import net.runelite.api.gameval.ItemID;
import net.runelite.api.gameval.VarbitID;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.common.Provider;

public class ImplingJars extends DailyInfobox {
    private final String tooltip = "Buy %d impling jars from Elnock Inquisitor at Puro-Puro";

    public ImplingJars(final Provider provider) {
        super(TicTac7xDailyTasksConfig.impling_jars, provider.itemManager.getImage(ItemID.II_IMPLING_JAR), provider);
    }

    @Override
    public boolean isShowing() {
        return (
            provider.config.showImplingJars() &&
            provider.client.getVarbitValue(VarbitID.II_DAILY_JARS_PURCHASED) < 10
        );
    }

    @Override
    public String getText() {
        return String.valueOf(getRemainingImplingJarsAmount());
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, getRemainingImplingJarsAmount());
    }

    private int getRemainingImplingJarsAmount() {
        return 10 - provider.client.getVarbitValue(VarbitID.II_DAILY_JARS_PURCHASED);
    }
}

package tictac7x.daily.dailies;

import net.runelite.api.events.VarbitChanged;
import net.runelite.api.gameval.ItemID;
import net.runelite.api.gameval.VarbitID;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.common.Provider;

public class ExplorersRingAlchemy extends DailyInfobox {
    private final String tooltip = "You have %d alchemy uses left on your Explorers ring";

    public ExplorersRingAlchemy(final Provider provider) {
        super(TicTac7xDailyTasksConfig.explorers_ring_alchemy, provider.itemManager.getImage(ItemID.LUMBRIDGE_RING_EASY), provider);
    }

    @Override
    public boolean isShowing() {
        return (
            provider.config.showExplorersRingAlchemy() &&
            varbitEqualsOne(VarbitID.LUMBRIDGE_DIARY_EASY_COMPLETE) &&
            getRemainingAlchemyUses() > 0
        );
    }

    @Override
    public String getText() {
        return String.valueOf(getRemainingAlchemyUses());
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, getRemainingAlchemyUses());
    }

    private int getRemainingAlchemyUses() {
        return 30 - provider.client.getVarbitValue(VarbitID.LUMBRIDGE_FREE_ALCHS);
    }

    @Override
    public void onVarbitChanged(final VarbitChanged event) {
        switch (event.getVarbitId()) {
            case VarbitID.LUMBRIDGE_DIARY_EASY_COMPLETE:
            case VarbitID.LUMBRIDGE_DIARY_MEDIUM_COMPLETE:
            case VarbitID.LUMBRIDGE_DIARY_HARD_COMPLETE:
            case VarbitID.LUMBRIDGE_DIARY_ELITE_COMPLETE:
                setImage(provider.itemManager.getImage(getExplorerRingId()));
                provider.infoBoxManager.updateInfoBoxImage(this);
        }
    }

    private int getExplorerRingId() {
        final boolean easy   = provider.client.getVarbitValue(VarbitID.LUMBRIDGE_DIARY_EASY_COMPLETE) == 1;
        final boolean medium = provider.client.getVarbitValue(VarbitID.LUMBRIDGE_DIARY_MEDIUM_COMPLETE) == 1;
        final boolean hard   = provider.client.getVarbitValue(VarbitID.LUMBRIDGE_DIARY_HARD_COMPLETE) == 1;
        final boolean elite  = provider.client.getVarbitValue(VarbitID.LUMBRIDGE_DIARY_ELITE_COMPLETE) == 1;

        if (easy && medium && hard && elite) return ItemID.LUMBRIDGE_RING_ELITE;
        if (easy && medium && hard) return ItemID.LUMBRIDGE_RING_HARD;
        if (easy && medium) return ItemID.LUMBRIDGE_RING_MEDIUM;
        return ItemID.LUMBRIDGE_RING_EASY;
    }
}

package tictac7x.daily.dailies;

import net.runelite.api.gameval.ItemID;
import net.runelite.api.gameval.VarbitID;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.common.Provider;

public class BowStrings extends DailyInfobox {
    private final String tooltip = "Exchange flax to %d bow strings from the Flax Keeper at Seers Village";

    public BowStrings(final Provider provider) {
        super(TicTac7xDailyTasksConfig.bow_strings, provider.itemManager.getImage(ItemID.BOW_STRING), provider);
    }

    @Override
    public boolean isShowing() {
        return (
            provider.config.showBowStrings() &&
            varbitEqualsOne(VarbitID.KANDARIN_DIARY_EASY_COMPLETE) &&
            provider.client.getVarbitValue(VarbitID.SEERS_FREE_FLAX) == 0
        );
    }

    @Override
    public String getText() {
        return String.valueOf(getRemainingBowStringsAmount());
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, getRemainingBowStringsAmount());
    }

    private int getRemainingBowStringsAmount() {
        final boolean easy   = varbitEqualsOne(VarbitID.KANDARIN_DIARY_EASY_COMPLETE);
        final boolean medium = varbitEqualsOne(VarbitID.KANDARIN_DIARY_MEDIUM_COMPLETE);
        final boolean hard   = varbitEqualsOne(VarbitID.KANDARIN_DIARY_HARD_COMPLETE);
        final boolean elite  = varbitEqualsOne(VarbitID.KANDARIN_DIARY_ELITE_COMPLETE);

        if (easy && medium && hard && elite) return 250;
        if (easy && medium && hard) return 120;
        if (easy && medium) return 60;
        if (easy) return 30;
        return 0;
    }
}

package tictac7x.daily.dailies;

import net.runelite.api.gameval.ItemID;
import net.runelite.api.gameval.VarbitID;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.common.Provider;

public class HerbBoxes extends DailyInfobox {
    private final int HERB_BOXES_DAILY = 15;
    private final String tooltip = "Buy %d herb boxes from Nightmare Zone rewards shop.";

    public HerbBoxes(final Provider provider) {
        super(TicTac7xDailyTasksConfig.herb_boxes, provider.itemManager.getImage(ItemID.NZONE_HERBBOX), provider);
    }

    @Override
    public boolean isShowing() {
        return (
            provider.config.showHerbBoxes() &&
            provider.client.getVarbitValue(VarbitID.IRONMAN) == 0 && // 0 - REGULAR ACCOUNT
            getHerbBoxesAmount() > 0
        );
    }

    @Override
    public String getText() {
        return String.valueOf(getHerbBoxesAmount());
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, getHerbBoxesAmount());
    }

    private int getHerbBoxesAmount() {
        return HERB_BOXES_DAILY - provider.client.getVarbitValue(VarbitID.NZONE_HERBBOXES_PURCHASED);
    }
}

package tictac7x.daily.dailies;

import net.runelite.api.Quest;
import net.runelite.api.QuestState;
import net.runelite.api.events.VarbitChanged;
import net.runelite.api.gameval.ItemID;
import net.runelite.api.gameval.VarbitID;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.common.Provider;

import java.time.LocalDate;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.Arrays;

public class KingdomOfMiscellania extends DailyInfobox {
    private final String percentageFormat = "%d%%";
    private final ZoneId timezone = ZoneId.of("UTC");
    private final String tooltip = "You need to work harder to increase your kingdom of Miscellania favor: " + percentageFormat;

    private final int FAVOR_MAX = 127;
    private final double FAVOR_LOST_MODIFIER_WITHOUT_ROYAL_TROUBLE = 0.975;
    private final double FAVOR_LOST_MODIFIER_WITH_ROYAL_TROUBLE = 0.99;
    private final int[] MISCELLANIA_REGIONS = new int[]{10044, 10300};

    public KingdomOfMiscellania(final Provider provider) {
        super(TicTac7xDailyTasksConfig.kingdom_of_miscellania_percentage, provider.itemManager.getImage(ItemID.CASKET), provider);
    }

    @Override
    public boolean isShowing() {
        return (
            provider.config.showKingdomOfMiscellania() &&
            Quest.THRONE_OF_MISCELLANIA.getState(provider.client) == QuestState.FINISHED &&
            getFavorPercentage() <= provider.config.showKingdomOfMiscellaniaFavor()
        );
    }

    @Override
    public String getText() {
        return String.format(percentageFormat, getFavorPercentage());
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, getFavorPercentage());
    }

    @Override
    public void onVarbitChanged(final VarbitChanged event) {
        if (event.getVarbitId() != VarbitID.MISC_APPROVAL) return;
        if (Arrays.stream(MISCELLANIA_REGIONS).noneMatch(region -> region == provider.client.getLocalPlayer().getWorldLocation().getRegionID())) return;

        provider.configManager.setConfiguration(TicTac7xDailyTasksConfig.group, TicTac7xDailyTasksConfig.kingdom_of_miscellania_favor_date, LocalDate.now(timezone).toString());
        provider.configManager.setConfiguration(TicTac7xDailyTasksConfig.group, TicTac7xDailyTasksConfig.kingdom_of_miscellania_favor, event.getValue());
    }

    private int getFavorPercentage() {
        try {
            final LocalDate now = LocalDate.now(timezone);
            final LocalDate visited = LocalDate.parse(provider.config.getKingdomOfMiscellaniaFavorDate());
            final long days = Math.abs(ChronoUnit.DAYS.between(now, visited));

            int favor = provider.config.getKingdomOfMiscellaniaFavor();
            for (int i = 0; i < days; i++) {
                favor = (int) Math.round(favor *
                    (Quest.ROYAL_TROUBLE.getState(provider.client) == QuestState.FINISHED
                        ? FAVOR_LOST_MODIFIER_WITH_ROYAL_TROUBLE
                        : FAVOR_LOST_MODIFIER_WITHOUT_ROYAL_TROUBLE)
                );
            }

            return favor * 100 / FAVOR_MAX;
        } catch (final Exception ignored) {
            return 0;
        }
    }
}

package tictac7x.daily.dailies;

import net.runelite.api.gameval.ItemID;
import net.runelite.api.gameval.VarbitID;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.common.Provider;

public class Battlestaves extends DailyInfobox {
    private final String tooltip = "Buy %d battlestaves from Zaff at Varrock for %d,000 coins";

    public Battlestaves(final Provider provider) {
        super(TicTac7xDailyTasksConfig.battlestaves, provider.itemManager.getImage(ItemID.BATTLESTAFF), provider);
    }

    @Override
    public boolean isShowing() {
        return (
            provider.config.showBattlestaves() &&
            !varbitEqualsOne(VarbitID.ZAFF_LAST_CLAIMED)
        );
    }

    @Override
    public String getText() {
        return String.valueOf(getRemainingBattlestavesAmount());
    }

    @Override
    public String getTooltip() {
        return String.format(tooltip, getRemainingBattlestavesAmount(), getRemainingBattlestavesAmount() * 7);
    }

    private int getRemainingBattlestavesAmount() {
        final boolean easy   = varbitEqualsOne(VarbitID.VARROCK_DIARY_EASY_COMPLETE);
        final boolean medium = varbitEqualsOne(VarbitID.VARROCK_DIARY_MEDIUM_COMPLETE);
        final boolean hard   = varbitEqualsOne(VarbitID.VARROCK_DIARY_HARD_COMPLETE);
        final boolean elite  = varbitEqualsOne(VarbitID.VARROCK_DIARY_ELITE_COMPLETE);

        if (easy && medium && hard && elite) return 120;
        if (easy && medium && hard) return 60;
        if (easy && medium) return 30;
        if (easy) return 15;
        return 5;
    }
}

package tictac7x.daily.common;

import net.runelite.api.events.VarbitChanged;
import net.runelite.client.ui.overlay.infobox.InfoBox;

import java.awt.Color;
import java.awt.image.BufferedImage;

public abstract class DailyInfobox extends InfoBox {
    protected final Provider provider;
    protected final String id;

    public DailyInfobox(final String id, final BufferedImage image, final Provider provider) {
        super(image, provider.plugin);
        this.id = id;
        this.provider = provider;
    }

    abstract public boolean isShowing();

    abstract public String getText();

    abstract public String getTooltip();

    @Override
    public String getName() {
        return super.getName() + "_" + this.id;
    }

    @Override
    public boolean render() {
        return isShowing();
    }

    @Override
    public Color getTextColor() {
        return Color.red;
    }

    public void onVarbitChanged(final VarbitChanged event) {}

    public boolean varbitEqualsOne(final int varbit) {
        return provider.client.getVarbitValue(varbit) == 1;
    }
}

package tictac7x.daily.common;

import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;
import tictac7x.daily.TicTac7xDailyTasksConfig;
import tictac7x.daily.TicTac7xDailyTasksPlugin;

public class Provider {
    public final Client client;
    public final ItemManager itemManager;
    public final InfoBoxManager infoBoxManager;
    public final ConfigManager configManager;
    public final TicTac7xDailyTasksConfig config;
    public final TicTac7xDailyTasksPlugin plugin;

    public Provider(
        final Client client,
        final ItemManager itemManager,
        final InfoBoxManager infoBoxManager,
        final ConfigManager configManager,
        final TicTac7xDailyTasksConfig config,
        final TicTac7xDailyTasksPlugin plugin
    ) {
        this.client = client;
        this.itemManager = itemManager;
        this.infoBoxManager = infoBoxManager;
        this.configManager = configManager;
        this.config = config;
        this.plugin = plugin;
    }
}

package tictac7x.daily;

import javax.inject.Inject;

import com.google.inject.Provides;

import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.game.ItemManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;

import tictac7x.daily.common.DailyInfobox;
import tictac7x.daily.common.Provider;
import tictac7x.daily.dailies.Battlestaves;
import tictac7x.daily.dailies.BowStrings;
import tictac7x.daily.dailies.BucketsOfSand;
import tictac7x.daily.dailies.BucketsOfSlime;
import tictac7x.daily.dailies.Dynamite;
import tictac7x.daily.dailies.ExplorersRingAlchemy;
import tictac7x.daily.dailies.HerbBoxes;
import tictac7x.daily.dailies.ImplingJars;
import tictac7x.daily.dailies.KingdomOfMiscellania;
import tictac7x.daily.dailies.OgreArrows;
import tictac7x.daily.dailies.PureEssence;
import tictac7x.daily.dailies.RandomRunes;

@PluginDescriptor(
    configName = "TicTac7xDailyPlugin",
    name = "Daily Tasks",
    description = "Daily infoboxes to annoy you to do your tasks",
    tags = {
        "daily",
        "battlestaves",
        "battlestaff",
        "bowstring",
        "buckets",
        "sand",
        "slime",
        "bone",
        "bonemeal",
        "dynamite",
        "herb",
        "boxes",
        "nmz",
        "impling",
        "jar",
        "kingdom",
        "ogre",
        "rantz",
        "essence",
        "runes",
        "explorer"
    }
)
public class TicTac7xDailyTasksPlugin extends Plugin {
    @Inject
    private Client client;

    @Inject
    private ClientThread clientThread;

    @Inject
    private ConfigManager configManager;

    @Inject
    private TicTac7xDailyTasksConfig config;

    @Inject
    private InfoBoxManager infoBoxManager;

    @Inject
    private ItemManager itemManager;

    @Inject
    private ChatMessageManager chatMessageManager;

    @Provides
    TicTac7xDailyTasksConfig provideConfig(final ConfigManager configManager) {
        return configManager.getConfig(TicTac7xDailyTasksConfig.class);
    }

    private final String plugin_version = "v0.3.1";
    private final String plugin_message = "" +
        "<colHIGHLIGHT>Daily Tasks " + plugin_version + ":<br>" +
        "<colHIGHLIGHT>* Duplicate infoboxes fixed."
    ;
    private Provider provider;
    private DailyInfobox[] dailyInfoboxes = new DailyInfobox[]{};

    @Override
    protected void startUp() {
        provider = new Provider(client, itemManager, infoBoxManager, configManager, config, this);

        dailyInfoboxes = new DailyInfobox[]{
            new Battlestaves(provider),
            new BucketsOfSand(provider),
            new PureEssence(provider),
            new BucketsOfSlime(provider),
            new OgreArrows(provider),
            new BowStrings(provider),
            new Dynamite(provider),
            new RandomRunes(provider),
            new HerbBoxes(provider),
            new KingdomOfMiscellania(provider),
            new ImplingJars(provider),
            new ExplorersRingAlchemy(provider),
        };

        for (final DailyInfobox infobox : dailyInfoboxes) {
            infoBoxManager.addInfoBox(infobox);
        }
    }

    @Override
    protected void shutDown() {
        for (final DailyInfobox infobox : dailyInfoboxes) {
            infoBoxManager.removeInfoBox(infobox);
        }
    }

    @Subscribe
    public void onVarbitChanged(final VarbitChanged event) {
        for (final DailyInfobox infobox : dailyInfoboxes) {
            infobox.onVarbitChanged(event);
        }
    }

    @Subscribe
    public void onGameStateChanged(final GameStateChanged event) {
        if (event.getGameState() != GameState.LOGGED_IN) return;

        // Send message about plugin updates for once.
        if (!config.getVersion().isEmpty() && !config.getVersion().equals(plugin_version)) {
            configManager.setConfiguration(TicTac7xDailyTasksConfig.group, TicTac7xDailyTasksConfig.version, plugin_version);
            chatMessageManager.queue(QueuedMessage.builder()
                .type(ChatMessageType.CONSOLE)
                .runeLiteFormattedMessage(plugin_message)
                .build()
            );
        }
    }
}

package tictac7x.daily;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DailyPluginTest {
	public static void main(String[] args) throws Exception {
		ExternalPluginManager.loadBuiltin(TicTac7xDailyTasksPlugin.class);
		RuneLite.main(args);
	}
}
