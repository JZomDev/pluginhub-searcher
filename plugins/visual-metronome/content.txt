package com.visualmetronome;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Keybind;
import java.awt.Color;

@ConfigGroup("visualmetronome")
public interface VisualMetronomeConfig extends Config
{
	@ConfigItem(
			position = 1,
			keyName = "enableMetronome",
			name = "Visual Metronome",
			description = "Enable visual metronome"
	)
	default boolean enableMetronome()
	{
		return true;
	}

	@ConfigItem(
			position = 2,
			keyName = "highlightCurrentTile",
			name = "Enable True Tile Overlay",
			description = "Highlights true player tile using the metronome colors (replacement for tile indicator plugin setting)"
	)
	default boolean highlightCurrentTile()
	{
		return false;
	}


	@Range(
			min = 16
	)
	@ConfigItem(
			position = 3,
			keyName = "boxWidth",
			name = "Default Box Size (Alt + Right Click Box)",
			description = "Configure the default length and width of the box. Use alt + right click on the box to reset to the size specified"
	)
	default int boxWidth()
	{
		return 25;
	}

	@Range(
			min = 1
	)
	@ConfigItem(
			position = 4,
			keyName = "tickCount",
			name = "Tick Count",
			description = "The tick on which the color changes"
	)
	default int tickCount()
	{
		return 1;
	}

	@ConfigSection(
			name = "Tick Number Settings",
			description = "Change Tick Number settings",
			position = 5
	)
	String TickNumberSettings = "Tick Number Settings";

	@ConfigItem(
			position = 1,
			keyName = "showTick",
			name = "Show Metronome Tick Number",
			description = "Shows current tick number on the metronome",
			section = TickNumberSettings
	)
	default boolean showTick()
	{
		return false;
	}

	@ConfigItem(
			position = 2,
			keyName = "showPlayerTick",
			name = "Show Tick Number Above Player",
			description = "Shows current tick number above the player",
			section = TickNumberSettings
	)
	default boolean showPlayerTick()
	{
		return false;
	}

	@ConfigItem(
			position = 3,
			keyName = "disableFontScaling",
			name = "Disable Font Size Scaling (Metronome Tick Only)",
			description = "Disables font size scaling for metronome tick number",
			section = TickNumberSettings
	)
	default boolean disableFontScaling()
	{
		return false;
	}

	@Range(
			min = 8,
			max = 50
	)
	@ConfigItem(
			position = 4,
			keyName = "fontSize",
			name = "Font Size (Overhead Tick Only)",
			description = "Change the font size of the overhead Tick Number",
			section = TickNumberSettings
	)
	default int fontSize()
	{
		return 15;
	}

	@ConfigItem(
			position = 5,
			keyName = "countColor",
			name = "Tick Number Color",
			description = "Configures the color of tick number",
			section = TickNumberSettings
	)
	default Color NumberColor()
	{
		return Color.CYAN;
	}

	@ConfigItem(
			position = 6,
			keyName = "fontType",
			name = "Font Type",
			description = "Change the font of the Tick Number",
			section = TickNumberSettings
	)
	default FontTypes fontType() { return FontTypes.REGULAR; }

	@ConfigSection(
			name = "True Tile Overlay Settings",
			description = "Settings only applied to True Tile Overlay",
			position = 6
	)
	String TileSettings = "True Tile Overlay Settings";

	@Alpha
	@ConfigItem(
			position = 1,
			keyName = "currentTileFillColor",
			name = "True Tile Fill Color",
			description = "Fill color of the true tile overlay",
			section = TileSettings
	)
	default Color currentTileFillColor()
	{
		return new Color(0, 0, 0, 50);
	}

	@ConfigItem(
			position = 2,
			keyName = "currentTileBorderWidth",
			name = "True Tile Border Width",
			description = "Border size of the true tile overlay",
			section = TileSettings
	)
	default double currentTileBorderWidth()
	{
		return 2;
	}

	@ConfigItem(
			position = 3,
			keyName = "changeFillColor",
			name = "Enable Tile Fill Color Metronome",
			description = "Makes the tile fill color change with the metronome",
			section = TileSettings
	)
	default boolean changeFillColor()
	{
		return false;
	}

	@Range(
			min = 0,
			max = 255
	)
	@ConfigItem(
			position = 4,
			keyName = "changeFillColorOpacity",
			name = "Fill Color Metronome Opacity",
			description = "Opacity of the tile fill metronome color if the option above is enabled. Otherwise, the opacity is determined by the True Tile Fill Color setting",
			section = TileSettings
	)
	default int changeFillColorOpacity()
	{
		return 50;
	}

	@ConfigSection(
			name = "Color Settings",
			description = "Change the colors and number of colors to cycle through",
			position = 7
	)
	String ColorSettings = "Color Settings";


	@Range(
			min = 2,
			max = 10
	)
	@ConfigItem(
			position = 1,
			keyName = "colorCycle",
			name = "Number of Colors",
			description = "The number of colors it cycles through",
			section = ColorSettings
	)
	default int colorCycle()
	{
		return 2;
	}

	@Alpha
	@ConfigItem(
			position = 2,
			keyName = "tickColor",
			name = "Tick Color",
			description = "Configures the color of tick",
			section = ColorSettings
	)
	default Color getTickColor()
	{
		return Color.WHITE;
	}

	@Alpha
	@ConfigItem(
			position = 3,
			keyName = "tockColor",
			name = "Tock Color",
			description = "Configures the color of tock",
			section = ColorSettings
	)
	default Color getTockColor()
	{
		return Color.GRAY;
	}

	@Alpha
	@ConfigItem(
			position = 4,
			keyName = "tick3Color",
			name = "3rd Tick Color",
			description = "Configures the color of 3rd tick if enabled",
			section = ColorSettings
	)
	default Color getTick3Color()
	{
		return Color.DARK_GRAY;
	}
	@Alpha
	@ConfigItem(
			position = 5,
			keyName = "tick4Color",
			name = "4th Tick Color",
			description = "Configures the color of the 4th tick if enabled",
			section = ColorSettings
	)
	default Color getTick4Color()
	{
		return Color.BLACK;
	}
	@Alpha
	@ConfigItem(
			position = 6,
			keyName = "tick5Color",
			name = "5th Tick Color",
			description = "Configures the color of the 5th tick if enabled",
			section = ColorSettings
	)
	default Color getTick5Color()
	{
		return new Color(112, 131, 255);
	}
	@Alpha
	@ConfigItem(
			position = 7,
			keyName = "tick6Color",
			name = "6th Tick Color",
			description = "Configures the color of the 6th tick if enabled",
			section = ColorSettings
	)
	default Color getTick6Color()
	{
		return new Color(0, 23, 171);
	}
	@Alpha
	@ConfigItem(
			position = 8,
			keyName = "tick7Color",
			name = "7th Tick Color",
			description = "Configures the color of the 7th tick if enabled",
			section = ColorSettings
	)
	default Color getTick7Color()
	{
		return new Color(107, 255, 124);
	}
	@Alpha
	@ConfigItem(
			position = 9,
			keyName = "tick8Color",
			name = "8th Tick Color",
			description = "Configures the color of the 8th tick if enabled",
			section = ColorSettings
	)
	default Color getTick8Color()
	{
		return new Color(0, 191, 22);
	}
	@Alpha
	@ConfigItem(
			position = 10,
			keyName = "tick9Color",
			name = "9th Tick Color",
			description = "Configures the color of the 9th tick if enabled",
			section = ColorSettings
	)
	default Color getTick9Color()
	{
		return new Color(255, 105, 94);
	}
	@Alpha
	@ConfigItem(
			position = 11,
			keyName = "tick10Color",
			name = "10th Tick Color",
			description = "Configures the color of the 10th tick if enabled",
			section = ColorSettings
	)
	default Color getTick10Color()
	{
		return new Color(255, 17, 0);
	}

	@ConfigSection(
			name = "Hotkey Settings",
			description = "Settings that use hotkeys",
			position = 8
	)
	String HotkeySettings = "Hotkey Settings";

	@ConfigItem(
			position = 1,
			keyName = "tickResetHotkey",
			name = "Tick Cycle Reset Hotkey",
			description = "Hotkey to reset the tick cycle back to 0",
			section = HotkeySettings
	)
	default Keybind tickResetHotkey() {
		return Keybind.NOT_SET;
	}

	@Range(
		min = 0
	)
	@ConfigItem(
		position = 2,
		keyName = "tickResetStartTick",
		name = "Reset to Tick",
		description = "Choose which tick the hotkey resets the timer to",
		section = HotkeySettings
	)
	default int tickResetStartTick()
	{
		return 0;
	}
	@ConfigSection(
			name = "Mouse Following Settings",
			description = "Settings for mouse-following tick counter",
			position = 9,
			closedByDefault = true
	)
	String mouseFollowingSettings = "Mouse Following Settings";
	@ConfigItem(
			position = 0,
			keyName = "mouseFollowingTick",
			name = "Tick Counter Follows Mouse",
			description = "Makes the tick counter follow your mouse cursor. It uses the same settings as the Overhead Tick Number",
			section = mouseFollowingSettings
	)
	default boolean mouseFollowingTick()
	{
		return false;
	}

	@Range(
			min = -100,
			max = 100
	)
	@ConfigItem(
			position = 1,
			keyName = "mouseOffsetX",
			name = "Mouse X Offset",
			description = "X offset from mouse cursor for tick counter",
			section = mouseFollowingSettings
	)
	default int mouseOffsetX()
	{
		return 10;
	}

	@Range(
			min = -100,
			max = 100
	)
	@ConfigItem(
			position = 2,
			keyName = "mouseOffsetY",
			name = "Mouse Y Offset",
			description = "Y offset from mouse cursor for tick counter",
			section = mouseFollowingSettings
	)
	default int mouseOffsetY()
	{
		return -10;
	}

	@ConfigSection(
			name = "Additional Overhead Cycle Settings",
			description = "Enable additional tick cycles to track",
			position = 10,
			closedByDefault = true
	)
	String additionalOverheadSettings = "Additional Overhead Tick Settings";

	@ConfigItem(
			position = 1,
			keyName = "showSecondCycle",
			name = "Enable Second Cycle",
			description = "Enables second tick number above the player",
			section = additionalOverheadSettings
	)
	default boolean enableCycle2()
	{
		return false;
	}

	@Range(
			min = 2
	)
	@ConfigItem(
			position = 2,
			keyName = "tickCount2",
			name = "Second Cycle Length",
			description = "Length for the second cycle in ticks",
			section = additionalOverheadSettings
	)
	default int tickCount2()
	{
		return 2;
	}

	@ConfigItem(
			position = 3,
			keyName = "cycle2Color",
			name = "Second Cycle Color",
			description = "Configures the color of second cycle",
			section = additionalOverheadSettings
	)
	default Color cycle2Color()
	{
		return Color.CYAN;
	}

	@ConfigItem(
			position = 4,
			keyName = "showThirdCycle",
			name = "Enable Third Cycle",
			description = "Enables third tick number above the player",
			section = additionalOverheadSettings
	)
	default boolean enableCycle3()
	{
		return false;
	}
	@Range(
			min = 2
	)
	@ConfigItem(
			position = 5,
			keyName = "tickCount3",
			name = "Third Cycle Length",
			description = "Length for the third cycle in ticks",
			section = additionalOverheadSettings
	)
	default int tickCount3()
	{
		return 2;
	}

	@ConfigItem(
			position = 6,
			keyName = "cycle3Color",
			name = "Third Cycle Color",
			description = "Configures the color of third cycle",
			section = additionalOverheadSettings
	)
	default Color cycle3Color()
	{
		return Color.CYAN;
	}

	@ConfigItem(
			position = 7,
			keyName = "overheadCyclesGapDistance",
			name = "Second and Third Tick Gap Distance",
			description = "Configures the distance of the gap between the overhead ticks",
			section = additionalOverheadSettings
	)
	default int overheadCyclesGapDistance()
	{
		return 20;
	}

	@Range(
			min = -500,
			max = 500
	)
	@ConfigItem(
			position = 8,
			keyName = "overheadHeight",
			name = "Overhead Tick Height",
			description = "Configures the height of overhead ticks",
			section = additionalOverheadSettings
	)
	default int overheadHeight()
	{
		return 20;
	}

	@Range(
			min = -50,
			max = 50
	)
	@ConfigItem(
			position = 9,
			keyName = "overheadXCenterOffset",
			name = "Overhead Tick X Center Offset",
			description = "Configures the X offset of overhead ticks",
			section = additionalOverheadSettings
	)
	default int overheadXCenterOffset()
	{
		return 0;
	}

	@ConfigItem(
			position = 10,
			keyName = "overheadUseCurrentColor",
			name = "Use Metronome Color for Overhead",
			description = "Uses the metronome color for the overhead tick color instead of Tick Number Color",
			section = additionalOverheadSettings
	)
	default boolean overheadUseCurrentColor()
	{
		return false;
	}
}


package com.visualmetronome;

import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
import javax.inject.Inject;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Font;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPriority;
import java.awt.Color;


public class VisualMetronomeNumberOverlay extends Overlay
{

    private final Client client;
    private final VisualMetronomeConfig config;
    private final VisualMetronomePlugin plugin;

    @Inject
    public VisualMetronomeNumberOverlay(Client client, VisualMetronomeConfig config, VisualMetronomePlugin plugin)
    {
        super(plugin);
        this.client = client;
        this.config = config;
        this.plugin = plugin;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.UNDER_WIDGETS);
        setPriority(OverlayPriority.MED);

    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (config.showPlayerTick())
        {
            if (config.fontType() == FontTypes.REGULAR)
            {
                graphics.setFont(new Font(FontManager.getRunescapeFont().getName(), Font.PLAIN, config.fontSize()));
            }
            else
            {
                graphics.setFont(new Font(config.fontType().toString(), Font.PLAIN, config.fontSize()));
            }

            // Set which color to use
            Color numberColor;
            if (config.overheadUseCurrentColor())
            {
                numberColor = plugin.currentColor;
            }
            else
            {
                numberColor = config.NumberColor();
            }

            final int height = client.getLocalPlayer().getLogicalHeight() + config.overheadHeight();
            final LocalPoint localLocation = client.getLocalPlayer().getLocalLocation();
            final Point playerPoint = Perspective.localToCanvas(client, localLocation, client.getPlane(), height);
            final int valueX = playerPoint.getX() + config.overheadXCenterOffset();
            final int valueY = playerPoint.getY();
            final Point tickPoint = new Point(valueX,valueY);

            if (config.tickCount() == 1)
            {
                OverlayUtil.renderTextLocation(graphics, tickPoint, String.valueOf(plugin.currentColorIndex), numberColor);
            }
            else
            {
                OverlayUtil.renderTextLocation(graphics, tickPoint, String.valueOf(plugin.tickCounter), numberColor);
            }

            if (config.enableCycle2())
            {
                final int valueX2 = valueX - config.overheadCyclesGapDistance();
                final Point tick2Point = new Point(valueX2,valueY);
                OverlayUtil.renderTextLocation(graphics, tick2Point, String.valueOf(plugin.tickCounter2), config.cycle2Color());
            }

            if (config.enableCycle3())
            {
                final int valueX3 = valueX + config.overheadCyclesGapDistance();
                final Point tick3Point = new Point(valueX3,valueY);
                OverlayUtil.renderTextLocation(graphics, tick3Point, String.valueOf(plugin.tickCounter3), config.cycle3Color());
            }

        }
        return null;
    }

}



package com.visualmetronome;

import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

import javax.inject.Inject;
import java.awt.Color;
import java.awt.Font;
import java.awt.Dimension;
import java.awt.Graphics2D;

public class MouseFollowingOverlay extends Overlay {
    private final Client client;
    private final VisualMetronomeConfig config;
    private final VisualMetronomePlugin plugin;

    @Inject
    public MouseFollowingOverlay(Client client, VisualMetronomeConfig config, VisualMetronomePlugin plugin)
    {
        super(plugin);
        this.client = client;
        this.config = config;
        this.plugin = plugin;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ALWAYS_ON_TOP);
        setPriority(OverlayPriority.HIGH);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (config.mouseFollowingTick())
        {
            Point mousePos = client.getMouseCanvasPosition();
            if (mousePos != null)
            {
                // Set font
                Font font = config.fontType() == FontTypes.REGULAR
                        ? FontManager.getRunescapeFont().deriveFont(Font.PLAIN, config.fontSize())
                        : new Font(config.fontType().toString(), Font.PLAIN, config.fontSize());
                graphics.setFont(font);

                // Set text
                String text = config.tickCount() == 1
                        ? String.valueOf(plugin.currentColorIndex)
                        : String.valueOf(plugin.tickCounter);

                // Apply configurable offsets using getX()/getY()
                Point textPosition = new Point(
                        (int)mousePos.getX() + config.mouseOffsetX(),
                        (int)mousePos.getY() + config.mouseOffsetY()
                );

                // Set which color to use

                Color numberColor;
                if (config.overheadUseCurrentColor())
                {
                    numberColor = plugin.currentColor;
                }
                else
                {
                    numberColor = config.NumberColor();
                }

                // Render
                OverlayUtil.renderTextLocation(graphics, textPosition, text, numberColor);
            }
        }
        return null;
    }
}
package com.visualmetronome;

import com.google.inject.Provides;
import net.runelite.api.Point;
import net.runelite.api.Client;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import javax.inject.Inject;
import java.awt.event.KeyEvent;
import java.awt.Color;
import java.awt.Dimension;
import net.runelite.client.input.KeyListener;
import net.runelite.client.input.KeyManager;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

@PluginDescriptor(
        name = "Visual Metronome",
        description = "Shows a visual cue on an overlay every game tick to help timing based activities",
        tags = {"timers", "overlays", "tick", "skilling"}
)
public class VisualMetronomePlugin extends Plugin implements KeyListener
{
    @Inject
    private OverlayManager overlayManager;

    @Inject
    private ConfigManager configManager;

    @Inject
    private VisualMetronomeTileOverlay tileOverlay;

    @Inject
    private VisualMetronomeNumberOverlay numberOverlay;

    @Inject
    private FullResizableVisualMetronomeOverlay overlay;

    @Inject
    private VisualMetronomeConfig config;

    @Inject
    private KeyManager keyManager;

    @Inject
    private Client client;

    @Inject
    private MouseFollowingOverlay mouseFollowingOverlay;

    protected int currentColorIndex = 0;
    protected int tickCounter = 0;
    protected int tickCounter2 = 0;
    protected int tickCounter3 = 0;
    protected Color currentColor = Color.WHITE;
    protected Dimension DEFAULT_SIZE = new Dimension(25, 25);

    @Provides
    VisualMetronomeConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(VisualMetronomeConfig.class);
    }

    @Subscribe
    public void onGameTick(GameTick tick)
    {
        if (tickCounter % config.tickCount() == 0)
        {
            tickCounter = 0;
            if (currentColorIndex == config.colorCycle())
            {
                currentColorIndex = 0;
            }
            setCurrentColorByColorIndex(++currentColorIndex);
        }
        tickCounter++;
        if (tickCounter2 % config.tickCount2() == 0){
            tickCounter2 = 0;
        }
        tickCounter2++;
        if (tickCounter3 % config.tickCount3() == 0){
            tickCounter3 = 0;
        }
        tickCounter3++;
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event)
    {
        if (currentColorIndex > config.colorCycle())
        {
            currentColorIndex = 0;
        }

        if (tickCounter > config.tickCount())
        {
            tickCounter = 0;
        }
        if (tickCounter2 > config.tickCount2())
        {
            tickCounter2 = 0;
        }
        if (tickCounter3 > config.tickCount3())
        {
            tickCounter3 = 0;
        }

        DEFAULT_SIZE = new Dimension(config.boxWidth(), config.boxWidth());
    }

    @Override
    protected void startUp() throws Exception
    {
        DEFAULT_SIZE = new Dimension(config.boxWidth(), config.boxWidth());
        overlay.setPreferredSize(DEFAULT_SIZE);
        overlayManager.add(overlay);
        overlayManager.add(tileOverlay);
        overlayManager.add(numberOverlay);
        overlayManager.add(mouseFollowingOverlay);
        keyManager.registerKeyListener(this);
    }

    @Override
    protected void shutDown() throws Exception
    {
        overlayManager.remove(overlay);
        overlayManager.remove(tileOverlay);
        overlayManager.remove(numberOverlay);
        tickCounter = 0;
        tickCounter2 = 0;
        tickCounter3 = 0;
        currentColorIndex = 0;
        currentColor = config.getTickColor();
        overlayManager.remove(mouseFollowingOverlay);
        keyManager.unregisterKeyListener(this);

    }

    //hotkey settings
    @Override
    public void keyTyped(KeyEvent e)
    {
    }

    @Override
    public void keyPressed(KeyEvent e)
    {
        if (config.tickResetHotkey().matches(e))
        {
            int resetValue = 0;

            // Reset Cycle 1
            if (config.tickCount() > 1)
            {
                // Prevent out of bounds by setting to 0 if reset start is above tick count
                resetValue = (config.tickResetStartTick() >= config.tickCount()) ? 0 : config.tickResetStartTick();
                // If resetting to 0, set color index to 0 as well so that the color is set to the first color next
                // onGameTick
                currentColorIndex = resetValue == 0 ? 0 : 1;
            }
            else
            {
                resetValue = (config.tickResetStartTick() >= config.colorCycle()) ? 0 : config.tickResetStartTick();
                currentColorIndex = resetValue;
            }
            tickCounter = resetValue;
            setCurrentColorByColorIndex(currentColorIndex);

            tickCounter2 = (config.tickResetStartTick() >= config.tickCount2()) ? 0 : config.tickResetStartTick();
            tickCounter3 = (config.tickResetStartTick() >= config.tickCount3()) ? 0 : config.tickResetStartTick();
        }
    }

    @Override
    public void keyReleased(KeyEvent e)
    {
    }

    private void setCurrentColorByColorIndex(int currentColorIndex)
    {
        switch (currentColorIndex)
        {
            case 1:
                currentColor = config.getTickColor();
                break;
            case 2:
                currentColor = config.getTockColor();
                break;
            case 3:
                currentColor = config.getTick3Color();
                break;
            case 4:
                currentColor = config.getTick4Color();
                break;
            case 5:
                currentColor = config.getTick5Color();
                break;
            case 6:
                currentColor = config.getTick6Color();
                break;
            case 7:
                currentColor = config.getTick7Color();
                break;
            case 8:
                currentColor = config.getTick8Color();
                break;
            case 9:
                currentColor = config.getTick9Color();
                break;
            case 10:
                currentColor = config.getTick10Color();
        }
    }
}

package com.visualmetronome;

import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Font;
import javax.inject.Inject;
import net.runelite.api.Point;
import net.runelite.client.ui.overlay.OverlayUtil;

public class FullResizableVisualMetronomeOverlay extends Overlay
{

    private final VisualMetronomeConfig config;
    private final VisualMetronomePlugin plugin;

    private static int TITLE_PADDING = 10;
    private static final int MINIMUM_SIZE = 16; // too small and resizing becomes impossible, requiring a reset

    @Inject
    public FullResizableVisualMetronomeOverlay(VisualMetronomeConfig config, VisualMetronomePlugin plugin)
    {
        super(plugin);
        this.config = config;
        this.plugin = plugin;
        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
        setMinimumSize(MINIMUM_SIZE);
        setResizable(true);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        Dimension preferredSize = getPreferredSize();

        if (preferredSize == null)
        {
            // if this happens, reset to default - should be rare, but eg. alt+rightclick will cause this
            preferredSize = plugin.DEFAULT_SIZE;
            setPreferredSize(preferredSize);
        }

        if (config.enableMetronome())
        {
            graphics.setColor(plugin.currentColor);
            graphics.fillRect(0, 0, preferredSize.width, preferredSize.height);
            TITLE_PADDING = (Math.min(preferredSize.width, preferredSize.height) / 2 - 4); // scales tick number position with box size

            if (config.showTick())
            {
                if (config.disableFontScaling())
                {
                    graphics.setColor(config.NumberColor());
                    if (config.tickCount() == 1)
                    {
                        graphics.drawString(String.valueOf(plugin.currentColorIndex), TITLE_PADDING, preferredSize.height - TITLE_PADDING);
                    }
                    else
                    {
                        graphics.drawString(String.valueOf(plugin.tickCounter), TITLE_PADDING, preferredSize.height - TITLE_PADDING);
                    }

                }
                else
                {
                    if (config.fontType() == FontTypes.REGULAR)
                    {
                        graphics.setFont(new Font(FontManager.getRunescapeFont().getName(), Font.PLAIN, Math.min(preferredSize.width, preferredSize.height))); //scales font size based on the size of the metronome
                    }
                    else
                    {
                        graphics.setFont(new Font(config.fontType().toString(), Font.PLAIN, Math.min(preferredSize.width, Math.min(preferredSize.width, preferredSize.height))));
                    }

                    final Point tickCounterPoint = new Point(preferredSize.width / 3, preferredSize.height);
                    if (config.tickCount() == 1)
                    {
                        OverlayUtil.renderTextLocation(graphics, tickCounterPoint, String.valueOf(plugin.currentColorIndex), config.NumberColor());
                    }
                    else
                    {
                        OverlayUtil.renderTextLocation(graphics, tickCounterPoint, String.valueOf(plugin.tickCounter), config.NumberColor());
                    }
                }
            }
        }

        return preferredSize;
    }
}

package com.visualmetronome;

import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
import javax.inject.Inject;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Polygon;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPriority;


public class VisualMetronomeTileOverlay extends Overlay
{

    private final Client client;
    private final VisualMetronomeConfig config;
    private final VisualMetronomePlugin plugin;

    @Inject
    public VisualMetronomeTileOverlay(Client client, VisualMetronomeConfig config, VisualMetronomePlugin plugin)
    {
        super(plugin);
        this.client = client;
        this.config = config;
        this.plugin = plugin;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        setPriority(OverlayPriority.MED);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (config.highlightCurrentTile())
        {
            final WorldPoint playerPos = client.getLocalPlayer().getWorldLocation();
            if (playerPos == null)
            {
                return null;
            }

            final LocalPoint playerPosLocal = LocalPoint.fromWorld(client, playerPos);
            if (playerPosLocal == null)
            {
                return null;
            }

            if (config.changeFillColor())
            {
                final Color fillColor = new Color(plugin.currentColor.getRed(), plugin.currentColor.getGreen(), plugin.currentColor.getBlue(), config.changeFillColorOpacity());
                renderTile(graphics, playerPosLocal, plugin.currentColor, fillColor, config.currentTileBorderWidth());
            }
            else
            {
                renderTile(graphics, playerPosLocal, plugin.currentColor, config.currentTileFillColor(), config.currentTileBorderWidth());
            }
        }

        return null;
    }

    private void renderTile(final Graphics2D graphics, final LocalPoint dest, final Color color, final Color fillColor, final double borderWidth)
    {
        if (dest == null)
        {
            return;
        }

        final Polygon poly = Perspective.getCanvasTilePoly(client, dest);

        if (poly == null)
        {
            return;
        }

        OverlayUtil.renderPolygon(graphics, poly, color, fillColor, new BasicStroke((float) borderWidth));
    }
}



package com.visualmetronome;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Getter
public enum FontTypes
{
    REGULAR("RS Regular"),
    ARIAL("Arial"),
    CAMBRIA("Cambria"),
    ROCKWELL("Rockwell"),
    SEGOE_UI("Segoe Ui"),
    TIMES_NEW_ROMAN("Times New Roman"),
    VERDANA("Verdana");

    private final String name;

    @Override
    public String toString() {
        return name;
    }
}

package com.visualmetronome;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class VisualMetronomePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(VisualMetronomePlugin.class);
		RuneLite.main(args);
	}
}

