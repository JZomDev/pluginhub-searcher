package com.notloc.tilegrid;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Grid"
)
public class TileGridPlugin extends Plugin
{
	@Inject private Client client;
	@Inject private TileGridConfig config;
	@Inject private OverlayManager overlayManager;
	@Inject private TileGridOverlay overlay;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
	}

	@Provides
	TileGridConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(TileGridConfig.class);
	}
}

package com.notloc.tilegrid;

import net.runelite.api.*;

import javax.annotation.Nonnull;

/**
 * Some code copied from Perspective.java and modified to process points in bulk
 */
public class BulkPerspective {

    public static final int LOCAL_COORD_BITS = 7;
    public static final int SCENE_SIZE = Constants.SCENE_SIZE; // in tiles
    private static final int ESCENE_OFFSET = (Constants.EXTENDED_SCENE_SIZE - Constants.SCENE_SIZE) / 2;

    private static final int INVALID_INT = Integer.MIN_VALUE;

    public static Point[] getCanvasTilePoints(@Nonnull Client client, @Nonnull WorldView wv, int[] localXL, int[] localYL, int plane) {
        Scene scene = wv.getScene();

        int[] planes = new int[localXL.length];
        for (int i=0; i < localXL.length; i++) {
            int localX = localXL[i];
            int localY = localYL[i];

            int msx = (localX >> 7) + 40;
            int msy = (localY >> 7) + 40;
            if (msx >= 0 && msy >= 0 && msx < 184 && msy < 184) {
                if (plane == -1) {
                    plane = wv.getPlane();
                }

                byte[][][] tileSettings = scene.getExtendedTileSettings();
                int tilePlane = plane;
                if (plane < 3 && (tileSettings[1][msx][msy] & 2) == 2) {
                    tilePlane = plane + 1;
                }
                planes[i] = tilePlane;
            } else {
                planes[i] = INVALID_INT;
            }
        }

        int[] heights = getHeightBulk(scene, localXL, localYL, planes);
        return localToCanvasBulk(client, localXL, localYL, heights);
    }

    private static int[] getHeightBulk(@Nonnull Scene scene, int[] localXL, int[] localYL, int[] planes) {
        int[][][] tileHeights = scene.getTileHeights();
        int[] heights = new int[localXL.length];
        for (int i = 0; i < localXL.length; i++) {
            int localX = localXL[i];
            int localY = localYL[i];
            int plane = planes[i];
            if (plane == INVALID_INT) {
                heights[i] = INVALID_INT;
                continue;
            }

            int sceneX = (localX >> 7) + 40;
            int sceneY = (localY >> 7) + 40;
            if (sceneX >= 0 && sceneY >= 0 && sceneX < 184 && sceneY < 184) {
                int x = localX & 127;
                int y = localY & 127;
                int var8 = x * tileHeights[plane][sceneX + 1][sceneY] + (128 - x) * tileHeights[plane][sceneX][sceneY] >> 7;
                int var9 = tileHeights[plane][sceneX][sceneY + 1] * (128 - x) + x * tileHeights[plane][sceneX + 1][sceneY + 1] >> 7;
                heights[i] = (128 - y) * var8 + y * var9 >> 7;
            }
        }
        return heights;
    }

    public static Point[] localToCanvasBulk(Client client, int[] xL, int[] yL, int[] zL) {
        return client.isGpu() ? localToCanvasBulkGpu(client, xL, yL, zL) : localToCanvasBulkCpu(client, xL, yL, zL);
    }

    private static Point[] localToCanvasBulkCpu(Client client, int[] xL, int[] yL, int[] zL)
    {
        final int cameraPitch = client.getCameraPitch();
        final int cameraYaw = client.getCameraYaw();

        final int pitchSin = Perspective.SINE[cameraPitch];
        final int pitchCos = Perspective.COSINE[cameraPitch];
        final int yawSin = Perspective.SINE[cameraYaw];
        final int yawCos = Perspective.COSINE[cameraYaw];

        final int camX = client.getCameraX();
        final int camY = client.getCameraY();
        final int camZ = client.getCameraZ();
        final int scale = client.getScale();
        final int viewportWidthHalf = client.getViewportWidth() / 2;
        final int viewportHeightHalf = client.getViewportHeight() / 2;
        final int viewportXOffset = client.getViewportXOffset();
        final int viewportYOffset = client.getViewportYOffset();

        Point[] points = new Point[xL.length];

        int prevX = INVALID_INT;
        int prevY = INVALID_INT;
        int prevZ = INVALID_INT;

        for (int i=0; i<xL.length; i++) {
            int x = xL[i];
            int y = yL[i];
            int z = zL[i];
            if (z == INVALID_INT) {
                continue;
            }

            if (x >= -ESCENE_OFFSET << LOCAL_COORD_BITS && y >= -ESCENE_OFFSET << LOCAL_COORD_BITS &&
                    x <= SCENE_SIZE + ESCENE_OFFSET << LOCAL_COORD_BITS && y <= SCENE_SIZE + ESCENE_OFFSET << LOCAL_COORD_BITS)
            {
                x -= camX;
                y -= camY;
                z -= camZ;

                final int
                        x1 = x * yawCos + y * yawSin >> 16,
                        y1 = y * yawCos - x * yawSin >> 16,
                        y2 = z * pitchCos - y1 * pitchSin >> 16,
                        z1 = y1 * pitchCos + z * pitchSin >> 16;

                if (z1 >= 50)
                {
                    final int pointX = viewportWidthHalf + x1 * scale / z1;
                    final int pointY = viewportHeightHalf + y2 * scale / z1;
                    points[i] = new Point(
                            pointX + viewportXOffset,
                            pointY + viewportYOffset
                    );
                }
            }
        }
        return points;
    }

    private static Point[] localToCanvasBulkGpu(Client client, int[] xL, int[] yL, int[] zL)
    {
        final double
                cameraPitch = client.getCameraFpPitch(),
                cameraYaw = client.getCameraFpYaw();

        final float
                pitchSin = (float) Math.sin(cameraPitch),
                pitchCos = (float) Math.cos(cameraPitch),
                yawSin = (float) Math.sin(cameraYaw),
                yawCos = (float) Math.cos(cameraYaw),
                cameraFpX = (float) client.getCameraFpX(),
                cameraFpY = (float) client.getCameraFpY(),
                cameraFpZ = (float) client.getCameraFpZ();

        final int scale = client.getScale();
        final int viewportWidthHalf = client.getViewportWidth() / 2;
        final int viewportHeightHalf = client.getViewportHeight() / 2;
        final int viewportXOffset = client.getViewportXOffset();
        final int viewportYOffset = client.getViewportYOffset();

        Point[] points = new Point[xL.length];
        for (int i = 0; i < xL.length; i++) {
            int x = xL[i];
            int y = yL[i];
            int z = zL[i];
            if (z == INVALID_INT) {
                continue;
            }

            if (x >= -ESCENE_OFFSET << LOCAL_COORD_BITS && y >= -ESCENE_OFFSET << LOCAL_COORD_BITS &&
                    x <= SCENE_SIZE + ESCENE_OFFSET << LOCAL_COORD_BITS && y <= SCENE_SIZE + ESCENE_OFFSET << LOCAL_COORD_BITS)
            {
                final float
                        fx = x - cameraFpX,
                        fy = y - cameraFpY,
                        fz = z - cameraFpZ;

                final float
                        x1 = fx * yawCos + fy * yawSin,
                        y1 = fy * yawCos - fx * yawSin,
                        y2 = fz * pitchCos - y1 * pitchSin,
                        z1 = y1 * pitchCos + fz * pitchSin;

                if (z1 >= 50f)
                {
                    final int pointX = Math.round(viewportWidthHalf + x1 * scale / z1);
                    final int pointY = Math.round(viewportHeightHalf + y2 * scale / z1);
                    points[i] = new Point(
                            pointX + viewportXOffset,
                            pointY + viewportYOffset
                    );
                }
            }
        }
        return points;
    }
}

package com.notloc.tilegrid;

import java.awt.*;
import javax.inject.Inject;

import net.runelite.api.*;
import net.runelite.api.Point;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

import net.runelite.api.Client;
import net.runelite.api.coords.LocalPoint;

import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;

class TileGridOverlay extends Overlay {
    private final Client client;
    private final TileGridConfig config;

    private BufferedImage _bufferedImage;

    /* NOTE:
     * Polygons when viewed from the top down, north, begin in the bottom left corner and wind counter-clockwise.
     */

    @Inject
    private TileGridOverlay(Client client, TileGridConfig config) {
        this.client = client;
        this.config = config;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        setPriority(PRIORITY_LOW);
    }

    private BufferedImage getBufferedImage() {
        if (_bufferedImage == null || _bufferedImage.getWidth() != client.getCanvas().getWidth() || _bufferedImage.getHeight() != client.getCanvas().getHeight()) {
            _bufferedImage = new BufferedImage(client.getCanvas().getWidth(), client.getCanvas().getHeight(), BufferedImage.TYPE_INT_ARGB);
        } else {
            clearImage(_bufferedImage);
        }
        return _bufferedImage;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        Player player = client.getLocalPlayer();
        WorldView wv = client.getTopLevelWorldView();

        WorldPoint wPos = player.getWorldLocation();
        LocalPoint pos = LocalPoint.fromWorld(wv, wPos);
        if (pos == null) {
            return null;
        }

        LocalPoint lPos = player.getLocalLocation();

        final int playerX = pos.getX();
        final int playerY = pos.getY();
        final int playerLX = lPos.getX();
        final int playerLY = lPos.getY();
        final int plane = player.getWorldLocation().getPlane();

        int renderRange = config.gridDistance();
        int lineCount = (renderRange * 2 + 1) * renderRange * 2;

        // Xs
        int[] hLineXs = new int[lineCount * 2];
        int[] hLineYs = new int[lineCount * 2];
        float[] hDists = new float[lineCount];

        int xi = 0;
        int yi = 0;
        int di = 0;
        for (int y = -renderRange+1; y <= renderRange; y++) {
            for (int x = -renderRange; x <= renderRange; x++) {
                int xP = (playerX + x*128);
                int yP = (playerY + y*128);

                hLineXs[xi]   = xP - 64;
                hLineXs[xi+1] = xP + 63;

                hLineYs[yi]   = yP - 64;
                hLineYs[yi+1] = yP - 64;

                float xDist = (xP - playerLX) / 128f;
                float yDist = (yP - 64 - playerLY) / 128f;
                hDists[di] = xDist * xDist + yDist * yDist;

                xi += 2;
                yi += 2;
                di += 1;
            }
        }

        // Ys
        int[] vLineXs = new int[lineCount * 2];
        int[] vLineYs = new int[lineCount * 2];
        float[] vDists = new float[lineCount];

        xi = 0;
        yi = 0;
        di = 0;
        for (int x = -renderRange+1; x <= renderRange; x++) {
            for (int y = -renderRange; y <= renderRange; y++) {
                int xP = (playerX + x*128);
                int yP = (playerY + y*128);

                vLineXs[xi]   = xP - 64;
                vLineXs[xi+1] = xP - 64;

                vLineYs[yi]   = yP - 64;
                vLineYs[yi+1] = yP + 63;

                float xDist = (xP - 64 - playerLX) / 128f;
                float yDist = (yP - playerLY) / 128f;
                vDists[di] = xDist * xDist + yDist * yDist;

                xi += 2;
                yi += 2;
                di += 1;
            }
        }

        Point[] hPoints = BulkPerspective.getCanvasTilePoints(client, wv, hLineXs, hLineYs, plane);
        Point[] vPoints = BulkPerspective.getCanvasTilePoints(client, wv, vLineXs, vLineYs, plane);

        {
            BufferedImage bufferedImage = getBufferedImage();
            Graphics2D bufferedGraphics = bufferedImage.createGraphics();

            Color realColor = config.gridColor();
            int alpha = realColor.getAlpha();

            // Intentionally write the ALPHA into BLUE
            Color alphaColor = new Color(0, 0, realColor.getAlpha(), 255);
            // Isolate the color, with no alpha
            int rgbInt = realColor.getRGB() & 0x00FFFFFF;

            bufferedGraphics.setColor(alphaColor);
            bufferedGraphics.setStroke(new BasicStroke(1));

            int width = bufferedImage.getWidth();
            int height = bufferedImage.getHeight();
            drawLines(bufferedGraphics, alpha, hDists, hPoints, width, height);
            drawLines(bufferedGraphics, alpha, vDists, vPoints, width, height);
            applyColorAndAlpha(bufferedImage, rgbInt);

            graphics.drawImage(bufferedImage, 0, 0, null);
            bufferedGraphics.dispose();
        }

        return null;
    }

    private void drawLines(Graphics2D bufferedGraphics, int alpha, float[] distances, Point[] points, int w, int h) {
        boolean doFadeOut = config.doFadeOut();
        int fadeOutDistanceSqr = config.fadeOutDistance() * config.fadeOutDistance();
        double fadeOutTaper = config.fadeOutTaper() * config.fadeOutTaper();

        for (int i = 0; i < points.length; i+=2) {
            Point p1 = points[i];
            Point p2 = points[i + 1];
            if (p1 != null && p2 != null && inBounds(p1, p2, w, h)) {
                if (doFadeOut) {
                    double dist = (distances[i / 2] - fadeOutDistanceSqr) / fadeOutTaper;
                    if (dist <= 1) {
                        dist = 1;
                    }
                    Color color = new Color(0, 0, (int) (alpha / dist), 255);
                    bufferedGraphics.setColor(color);
                }
                bufferedGraphics.drawLine(p1.getX(), p1.getY(), p2.getX(), p2.getY());
            }
        }
    }

    private static boolean inBounds(Point p1, Point p2, int w, int h) {
        boolean xVisible = p1.getX() >= 0 || p1.getX() <= w || p2.getX() >= 0 || p2.getX() <= w;
        boolean yVisible = p1.getY() >= 0 || p1.getY() <= h || p2.getY() >= 0 || p2.getY() <= h;
        return xVisible && yVisible;
    }

    // Shifts the image data into the desired format.
    // B becomes A and RGB is injected
    // Ends up being significantly faster than just drawing the image normally with transparent colors
    private static void applyColorAndAlpha(BufferedImage image, int rgb) {
        int[] pixels = ((DataBufferInt) image.getRaster().getDataBuffer()).getData();
        for (int i = 0; i < pixels.length; i++) {
            int pixel = pixels[i];
            if (pixel == 0) {
                continue;
            }
            pixel = (pixel << 24) | rgb;
            pixels[i] = pixel;
        }
    }


    // Manually clears the image, faster than using Graphics2D.clearRect and similar
    private static void clearImage(BufferedImage image) {
        int[] pixels = ((DataBufferInt) image.getRaster().getDataBuffer()).getData();
        for (int i = 0; i < pixels.length; i++) {
            pixels[i] = 0;
        }
    }
}

package com.notloc.tilegrid;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("tilegrid")
public interface TileGridConfig extends Config
{
	@Alpha
	@ConfigItem(
			keyName = "gridcolor",
			name = "Grid Color",
			description = "The color of the tile grid.",
			position = 0
	)
	default Color gridColor() { return new Color(0, 0, 0, 48); }

	@Range(min = 1, max = 64)
	@ConfigItem(
			keyName = "griddistance",
			name = "Draw Distance",
			description = "The max distance from the player to draw the tile grid.",
			position = 2
	)
	default int gridDistance() { return 16; }

	@ConfigItem(
			keyName = "do-fade-out",
			name = "Fade Out?",
			description = "Should grid tiles in the distance fade out?",
			position = 3
	)
	default boolean doFadeOut() { return true; }

	@Range(min = 0, max = 64)
	@ConfigItem(
			keyName = "fade-out-dist",
			name = "Fade Out Distance",
			description = "Grid tiles beyond this distance begin to fade out.",
			position = 4
	)
	default int fadeOutDistance() { return 2; }

	@Range(min = 1, max = 32)
	@ConfigItem(
			keyName = "fade-out-taper",
			name = "Fade Out Taper",
			description = "A stronger taper makes tiles take longer to fade out.",
			position = 5
	)
	default int fadeOutTaper() { return 8; }
}

package com.notloc.tilegrid;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TileGridPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(TileGridPlugin.class);
		RuneLite.main(args);
	}
}
