package com.ninetyninenotifier;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;
import javax.inject.Inject;
import java.awt.*;

public class NinetynineNotifierOverlay extends Overlay
{
    private final NinetynineNotifierPlugin plugin;

    private final PanelComponent panelComponent = new PanelComponent();

    @Inject
    public NinetynineNotifierOverlay(Client client, NinetynineNotifierPlugin plugin)
    {
        this.plugin = plugin;
        setPosition(OverlayPosition.BOTTOM_LEFT);
        panelComponent.setPreferredSize(new Dimension(200, 0));
        panelComponent.setBorder(new Rectangle(5, 5, 5, 5));
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        int skillsCloseTo99 = plugin.getNumberOfSkillsCloseTo99();
        if (skillsCloseTo99 == 0)
        {
            return null;
        }

        String warningText = "You have " + skillsCloseTo99 + " skill" + (skillsCloseTo99 > 1 ? "s" : "") + " close to 99!";

        panelComponent.getChildren().clear();
        panelComponent.getChildren().add(TitleComponent.builder()
                .text(warningText)
                .color(Color.RED)
                .build());

        return panelComponent.render(graphics);
    }
}

package com.ninetyninenotifier;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("ninetyninenotifier")
public interface NinetynineNotifierConfig extends Config
{
	@ConfigItem(
			keyName = "enableSystemNotifier",
			name = "Enable system notifications",
			description = "Show desktop popups when close to level 99",
			position = 1
	)
	default boolean enableSystemNotifier()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableOverlay",
			name = "Show on-screen warning",
			description = "Displays a warning box when you're close to 99",
			position = 2
	)
	default boolean enableOverlay()
	{
		return true;
	}

	@ConfigItem(
			keyName = "threshold",
			name = "XP Threshold",
			description = "Warn when this amount of XP or less remains to 99",
			position = 3
	)
	default int threshold()
	{
		return 50000;
	}

	@ConfigSection(
			name = "Skills to monitor",
			description = "Toggle which skills will trigger notifications",
			position = 99
	)
	String skillsSection = "skillsSection";

	// === Individual skill toggles ===

	@ConfigItem(
			keyName = "enableAttack",
			name = "Attack",
			description = "Enable for Attack",
			section = skillsSection,
			position = 100
	)
	default boolean enableAttack()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableDefence",
			name = "Defence",
			description = "Enable for Defence",
			section = skillsSection,
			position = 101
	)
	default boolean enableDefence()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableStrength",
			name = "Strength",
			description = "Enable for Strength",
			section = skillsSection,
			position = 102
	)
	default boolean enableStrength()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableHitpoints",
			name = "Hitpoints",
			description = "Enable for Hitpoints",
			section = skillsSection,
			position = 103
	)
	default boolean enableHitpoints()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableRanged",
			name = "Ranged",
			description = "Enable for Ranged",
			section = skillsSection,
			position = 104
	)
	default boolean enableRanged()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enablePrayer",
			name = "Prayer",
			description = "Enable for Prayer",
			section = skillsSection,
			position = 105
	)
	default boolean enablePrayer()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableMagic",
			name = "Magic",
			description = "Enable for Magic",
			section = skillsSection,
			position = 106
	)
	default boolean enableMagic()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableCooking",
			name = "Cooking",
			description = "Enable for Cooking",
			section = skillsSection,
			position = 107
	)
	default boolean enableCooking()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableWoodcutting",
			name = "Woodcutting",
			description = "Enable for Woodcutting",
			section = skillsSection,
			position = 108
	)
	default boolean enableWoodcutting()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableFletching",
			name = "Fletching",
			description = "Enable for Fletching",
			section = skillsSection,
			position = 109
	)
	default boolean enableFletching()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableFishing",
			name = "Fishing",
			description = "Enable for Fishing",
			section = skillsSection,
			position = 110
	)
	default boolean enableFishing()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableFiremaking",
			name = "Firemaking",
			description = "Enable for Firemaking",
			section = skillsSection,
			position = 111
	)
	default boolean enableFiremaking()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableCrafting",
			name = "Crafting",
			description = "Enable for Crafting",
			section = skillsSection,
			position = 112
	)
	default boolean enableCrafting()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableSmithing",
			name = "Smithing",
			description = "Enable for Smithing",
			section = skillsSection,
			position = 113
	)
	default boolean enableSmithing()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableMining",
			name = "Mining",
			description = "Enable for Mining",
			section = skillsSection,
			position = 114
	)
	default boolean enableMining()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableHerblore",
			name = "Herblore",
			description = "Enable for Herblore",
			section = skillsSection,
			position = 115
	)
	default boolean enableHerblore()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableAgility",
			name = "Agility",
			description = "Enable for Agility",
			section = skillsSection,
			position = 116
	)
	default boolean enableAgility()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableThieving",
			name = "Thieving",
			description = "Enable for Thieving",
			section = skillsSection,
			position = 117
	)
	default boolean enableThieving()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableSlayer",
			name = "Slayer",
			description = "Enable for Slayer",
			section = skillsSection,
			position = 118
	)
	default boolean enableSlayer()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableFarming",
			name = "Farming",
			description = "Enable for Farming",
			section = skillsSection,
			position = 119
	)
	default boolean enableFarming()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableRunecraft",
			name = "Runecraft",
			description = "Enable for Runecraft",
			section = skillsSection,
			position = 120
	)
	default boolean enableRunecraft()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableHunter",
			name = "Hunter",
			description = "Enable for Hunter",
			section = skillsSection,
			position = 121
	)
	default boolean enableHunter()
	{
		return true;
	}

	@ConfigItem(
			keyName = "enableConstruction",
			name = "Construction",
			description = "Enable for Construction",
			section = skillsSection,
			position = 122
	)
	default boolean enableConstruction()
	{
		return true;
	}


}

package com.ninetyninenotifier;


import net.runelite.client.ui.overlay.OverlayManager;
import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Experience;
import net.runelite.api.Skill;
import net.runelite.api.events.StatChanged;
import net.runelite.client.Notifier;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import javax.inject.Inject;
import java.util.HashSet;
import java.util.Set;

@Slf4j
@PluginDescriptor(
		name = "99 Notifier",
		description = "Notifies you when you're close to 99 in any skill.",
		tags = {"99", "xp", "notifier"}
)
public class NinetynineNotifierPlugin extends Plugin
{
	private static final int XP_99 = 13034431;
	private long pluginStartTime;

	@Inject private Client client;
	@Inject private NinetynineNotifierConfig config;
	@Inject private Notifier notifier;
	@Inject private NinetynineNotifierOverlay overlay;
	@Inject private OverlayManager overlayManager;

	private final Set<Skill> notifiedSkills = new HashSet<>();

	@Override
	protected void startUp()
	{
		pluginStartTime = System.currentTimeMillis();
		notifiedSkills.clear();

		if (config.enableOverlay())
		{
			overlayManager.add(overlay);
		}
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
	}

    @Subscribe
	public void onStatChanged(StatChanged event)
	{
		Skill skill = event.getSkill();

		if (noNotify(skill))
		{
			return;
		}

		int xp = event.getXp();
		int level = Experience.getLevelForXp(xp);
		long timeSinceStart = System.currentTimeMillis() - pluginStartTime;

		if (level >= 99 || notifiedSkills.contains(skill))
		{
			return;
		}

		int remainingXp = XP_99 - xp;
		int threshold = config.threshold();

		if (remainingXp <= threshold)
		{
			String message = "<col=ff0000>Only " + remainingXp + " XP left to 99 in " + skill.getName() + "!";

			// Avoid notifies during client startup phase
			if (config.enableSystemNotifier() && timeSinceStart < 5000)
			{
				notifier.notify(message);
			}else{
				client.addChatMessage(
						net.runelite.api.ChatMessageType.GAMEMESSAGE,
						"",
						message,
						null
				);
			}

			notifiedSkills.add(skill);

		}
	}

	public int getNumberOfSkillsCloseTo99()
	{
		int threshold = config.threshold();
		int count = 0;

		for (Skill skill : Skill.values())
		{
			if (skill == Skill.OVERALL || noNotify(skill))
			{
				continue;
			}

			int xp = client.getSkillExperience(skill);
			int level = Experience.getLevelForXp(xp);

			if (level < 99 && (XP_99 - xp) <= threshold)
			{
				count++;
			}
		}

		return count;
	}

	// Returns true if skill is disabled in config
	private boolean noNotify(Skill skill)
	{
		switch (skill)
		{
			case ATTACK: return !config.enableAttack();
			case DEFENCE: return !config.enableDefence();
			case STRENGTH: return !config.enableStrength();
			case HITPOINTS: return !config.enableHitpoints();
			case RANGED: return !config.enableRanged();
			case PRAYER: return !config.enablePrayer();
			case MAGIC: return !config.enableMagic();
			case COOKING: return !config.enableCooking();
			case WOODCUTTING: return !config.enableWoodcutting();
			case FLETCHING: return !config.enableFletching();
			case FISHING: return !config.enableFishing();
			case FIREMAKING: return !config.enableFiremaking();
			case CRAFTING: return !config.enableCrafting();
			case SMITHING: return !config.enableSmithing();
			case MINING: return !config.enableMining();
			case HERBLORE: return !config.enableHerblore();
			case AGILITY: return !config.enableAgility();
			case THIEVING: return !config.enableThieving();
			case SLAYER: return !config.enableSlayer();
			case FARMING: return !config.enableFarming();
			case RUNECRAFT: return !config.enableRunecraft();
			case HUNTER: return !config.enableHunter();
			case CONSTRUCTION: return !config.enableConstruction();
			default: return true;
		}
	}


	@Subscribe
	public void onConfigChanged(net.runelite.client.events.ConfigChanged event)
	{
		if (!event.getGroup().equals("ninetyninenotifier"))
		{
			return;
		}

		if (event.getKey().equals("enableOverlay"))
		{
			if (config.enableOverlay())
			{
				overlayManager.add(overlay);
			}
			else
			{
				overlayManager.remove(overlay);
			}
		}
	}


	@Provides
	NinetynineNotifierConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(NinetynineNotifierConfig.class);
	}
}



package com.ninetyninenotifier;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class NinetynineNotifierPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(NinetynineNotifierPlugin.class);
		RuneLite.main(args);
	}
}
