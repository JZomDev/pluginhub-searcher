package com.github.zakru.advancednotifications;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AdvancedNotificationsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AdvancedNotificationsPlugin.class);
		RuneLite.main(args);
	}
}
package com.github.zakru.advancednotifications.condition;

import com.github.zakru.advancednotifications.AdvancedNotificationsPlugin;
import com.github.zakru.advancednotifications.notification.Notification;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
public abstract class Condition
{
	@Getter
	@Setter
	private transient AdvancedNotificationsPlugin plugin;

	public Condition(AdvancedNotificationsPlugin plugin)
	{
		this.plugin = plugin;
	}

	public abstract boolean isFulfilled();

	public abstract Condition clone();
}

package com.github.zakru.advancednotifications.condition;

import com.github.zakru.advancednotifications.AdvancedNotificationsPlugin;
import com.github.zakru.advancednotifications.notification.*;
import com.google.gson.*;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.Map;
import java.util.Optional;

public class ConditionAdapter extends TypeAdapter<Condition>
{
	private final AdvancedNotificationsPlugin plugin;
	private final Gson gson;

	public ConditionAdapter(AdvancedNotificationsPlugin plugin)
	{
		this.plugin = plugin;
		gson = new GsonBuilder()
			.registerTypeAdapter(Condition.class, this)
			.registerTypeAdapter(InventoryChecker.Pointer.class, new CheckerAdapter())
			.create();
	}

	@Override
	public void write(JsonWriter out, Condition o) throws IOException
	{
		if (o != null) {
			JsonObject jo = gson.toJsonTree(o).getAsJsonObject();
			jo.addProperty("type", idOf(o));
			gson.toJson(jo, out);
		} else {
			out.nullValue();
		}
	}

	@Override
	public Condition read(JsonReader in) throws IOException
	{
		JsonObject jo = gson.fromJson(in, JsonObject.class);
		String conditionType = jo.get("type").getAsString();
		jo.remove("type");

		Condition condition = ofType(jo, conditionType);

		condition.setPlugin(plugin);
		return condition;
	}

	private Condition ofType(JsonElement in, String type) throws IOException
	{
		ConditionType<?> t = ConditionTypes.REGISTRY.entrySet().stream().filter(e -> e.getKey().equals(type)).map(Map.Entry::getValue).findAny().orElse(null);
		if (t != null) return gson.fromJson(in, t.getTargetClass());
		throw new RuntimeException("Unknown condition type " + type);
	}

	private String idOf(Condition o)
	{
		Optional<String> id = ConditionTypes.REGISTRY.entrySet().stream().filter(e -> e.getValue().getTargetClass() == o.getClass()).map(Map.Entry::getKey).findAny();
		if (id.isPresent()) return id.get();

		throw new RuntimeException("Unknown condition class " + o.getClass());
	}
}

package com.github.zakru.advancednotifications.condition;

import com.github.zakru.advancednotifications.AdvancedNotificationsPlugin;
import com.github.zakru.advancednotifications.notification.Notification;
import lombok.Getter;

public class ConditionType<T extends Condition>
{
	public interface Provider<T extends Condition>
	{
		T provide(AdvancedNotificationsPlugin plugin);
	}

	private final Provider<T> provider;
	@Getter
	private final Class<T> targetClass;

	public ConditionType(Provider<T> provider, Class<T> targetClass)
	{
		this.provider = provider;
		this.targetClass = targetClass;
	}

	public T provide(AdvancedNotificationsPlugin plugin)
	{
		return provider.provide(plugin);
	}
}

package com.github.zakru.advancednotifications.condition;

import com.github.zakru.advancednotifications.notification.EmptyNotification;
import com.github.zakru.advancednotifications.notification.ItemNotification;
import com.github.zakru.advancednotifications.notification.NotificationGroup;
import com.github.zakru.advancednotifications.notification.NotificationType;

import java.util.HashMap;
import java.util.Map;

public class ConditionTypes
{
	public static final Map<String, ConditionType<?>> REGISTRY = new HashMap<>();

	public static final ConditionType<ItemCondition> ITEM = new ConditionType<>(ItemCondition::new, ItemCondition.class);
	public static final ConditionType<EmptyCondition> EMPTY = new ConditionType<>(EmptyCondition::new, EmptyCondition.class);

	public static void registerAll()
	{
		REGISTRY.put("item", ITEM);
		REGISTRY.put("empty", EMPTY);
	}
}

package com.github.zakru.advancednotifications.condition;

import com.github.zakru.advancednotifications.notification.InventoryComparator;

public interface InventoryChecker
{
	public static class Pointer
	{
		public InventoryChecker object;

		public Pointer(InventoryChecker object)
		{
			this.object = object;
		}
	}

	boolean isFulfilled(int count, int param);
	boolean takesParam();

	InventoryChecker EQUAL = new InventoryChecker()
	{
		@Override
		public boolean isFulfilled(int count, int param)
		{
			return count == 0;
		}

		@Override
		public boolean takesParam()
		{
			return true;
		}

		@Override
		public String toString()
		{
			return "=";
		}
	};

	InventoryChecker LESS_THAN = new InventoryChecker()
	{
		@Override
		public boolean isFulfilled(int count, int param)
		{
			return count < 0;
		}

		@Override
		public boolean takesParam()
		{
			return true;
		}

		@Override
		public String toString()
		{
			return "<";
		}
	};

	InventoryChecker GREATER_THAN = new InventoryChecker()
	{
		@Override
		public boolean isFulfilled(int count, int param)
		{
			return count > 0;
		}

		@Override
		public boolean takesParam()
		{
			return true;
		}

		@Override
		public String toString()
		{
			return ">";
		}
	};

	InventoryChecker LESS_OR_EQUAL = new InventoryChecker()
	{
		@Override
		public boolean isFulfilled(int count, int param)
		{
			return count <= 0;
		}

		@Override
		public boolean takesParam()
		{
			return true;
		}

		@Override
		public String toString()
		{
			return "≤";
		}
	};

	InventoryChecker GREATER_OR_EQUAL = new InventoryChecker()
	{
		@Override
		public boolean isFulfilled(int count, int param)
		{
			return count >= 0;
		}

		@Override
		public boolean takesParam()
		{
			return true;
		}

		@Override
		public String toString()
		{
			return "≥";
		}
	};

	InventoryChecker[] CHECKERS = new InventoryChecker[]
	{
		EQUAL, LESS_THAN, GREATER_THAN, LESS_OR_EQUAL, GREATER_OR_EQUAL,
	};
}

package com.github.zakru.advancednotifications.condition;

import com.github.zakru.advancednotifications.AdvancedNotificationsPlugin;
import com.github.zakru.advancednotifications.notification.InventoryComparator;
import com.github.zakru.advancednotifications.notification.ItemNotification;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.InventoryID;
import net.runelite.api.ItemContainer;

import java.util.Arrays;

public class ItemCondition extends Condition
{
	@Getter
	@Setter
	private String item = "Coins";
	@Getter
	@Setter
	private InventoryChecker.Pointer checker = new InventoryChecker.Pointer(InventoryChecker.CHECKERS[0]);
	@Getter
	@Setter
	private int checkerParam = 0;

	public ItemCondition(AdvancedNotificationsPlugin plugin)
	{
		super(plugin);
	}

	@Override
	public boolean isFulfilled()
	{
		return checker.object.isFulfilled(
			Arrays.stream(getPlugin().getClient().getItemContainer(InventoryID.INVENTORY).getItems())
				.filter(i -> getPlugin().getItemManager().getItemComposition(i.getId()).getName().equalsIgnoreCase(item))
				.reduce(0, (a, i) -> a + i.getQuantity(), Integer::sum),
			checkerParam
		);
	}

	@Override
	public ItemCondition clone()
	{
		ItemCondition c = new ItemCondition(getPlugin());
		c.item = item;
		c.checker = new InventoryChecker.Pointer(checker.object);
		c.checkerParam = checkerParam;
		return c;
	}
}

package com.github.zakru.advancednotifications.condition;

import com.github.zakru.advancednotifications.notification.InventoryComparator;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.Arrays;

public class CheckerAdapter extends TypeAdapter<InventoryChecker.Pointer>
{
	@Override
	public void write(JsonWriter out, InventoryChecker.Pointer o) throws IOException
	{
		out.value(Arrays.asList(InventoryChecker.CHECKERS).indexOf(o.object));
	}

	@Override
	public InventoryChecker.Pointer read(JsonReader in) throws IOException
	{
		return new InventoryChecker.Pointer(InventoryChecker.CHECKERS[in.nextInt()]);
	}
}

package com.github.zakru.advancednotifications.condition;

import com.github.zakru.advancednotifications.AdvancedNotificationsPlugin;
import com.github.zakru.advancednotifications.notification.EmptyNotification;
import com.github.zakru.advancednotifications.notification.InventoryComparator;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.InventoryID;
import net.runelite.api.ItemID;

import java.util.Arrays;

public class EmptyCondition extends Condition
{
	@Getter
	@Setter
	private InventoryChecker.Pointer checker = new InventoryChecker.Pointer(InventoryChecker.CHECKERS[0]);
	@Getter
	@Setter
	private int checkerParam = 0;

	public EmptyCondition(AdvancedNotificationsPlugin plugin)
	{
		super(plugin);
	}

	@Override
	public boolean isFulfilled()
	{
		return checker.object.isFulfilled(
			Arrays.stream(getPlugin().getClient().getItemContainer(InventoryID.INVENTORY).getItems())
				.filter(i -> i.getId() == ItemID._3RD_AGE_AMULET)
				.reduce(0, (a, i) -> a + i.getQuantity(), Integer::sum),
			checkerParam
		);
	}

	@Override
	public Condition clone() {
		EmptyCondition n = new EmptyCondition(getPlugin());
		n.checker = new InventoryChecker.Pointer(checker.object);
		n.checkerParam = checkerParam;
		return n;
	}
}

package com.github.zakru.advancednotifications;

import lombok.Value;

@Value
public class InventoryEvent
{
	private final int itemID;
	private final int count;
	private final int previousCount;
}

package com.github.zakru.advancednotifications;

import com.github.zakru.advancednotifications.notification.Notification;

import java.util.List;

public interface DraggableContainer<T>
{
	List<T> getDraggableItems();
	default Notification getRoot() { return null; }
}

package com.github.zakru.advancednotifications;

import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.inject.Inject;

import com.github.zakru.advancednotifications.condition.ConditionTypes;
import com.github.zakru.advancednotifications.notification.*;
import com.github.zakru.advancednotifications.ui.AdvancedNotificationsPluginPanel;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;

import joptsimple.internal.Strings;
import lombok.AccessLevel;
import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.Notifier;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

@PluginDescriptor(
	name = "Advanced Notifications",
	tags = {"notifications", "inventory", "item", "idle"},
	description = "An advanced notification system"
)
public class AdvancedNotificationsPlugin extends Plugin implements DraggableContainer<Notification>
{
	private static final String CONFIG_GROUP = "advancednotifications";
	private static final String CONFIG_KEY = "notifications";
	private static final String CONFIG_KEY_FORMAT = "format";
	private static final String ICON_FILE = "panel_icon.png";
	private static final String PLUGIN_NAME = "Advanced Notifications";

	private static final int FORMAT_CURRENT_VERSION = 1;

	@Inject
	@Getter
	private Client client;

	@Inject
	@Getter
	private ItemManager itemManager;

	@Inject
	@Getter
	private Notifier notifier;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	private ConfigManager configManager;

	private AdvancedNotificationsPluginPanel pluginPanel;
	private NavigationButton navigationButton;
	private Item[] previousItems;

	private List<Notification> notifications;

	static {
		NotificationTypes.registerAll();
		ConditionTypes.registerAll();
	}

	@Override
	protected void startUp() throws Exception
	{
		notifications = new ArrayList<>();
		previousItems = null;

		int version = 0;
		String versionString = configManager.getConfiguration(CONFIG_GROUP, CONFIG_KEY_FORMAT);
		try
		{
			if (!Strings.isNullOrEmpty(versionString)) version = Integer.parseInt(versionString);
		}
		catch (NumberFormatException ignored) {}
		loadConfig(configManager.getConfiguration(CONFIG_GROUP, CONFIG_KEY), version);

		pluginPanel = new AdvancedNotificationsPluginPanel(this);
		pluginPanel.rebuild();

		final BufferedImage icon = ImageUtil.getResourceStreamFromClass(getClass(), ICON_FILE);

		navigationButton = NavigationButton.builder()
			.tooltip(PLUGIN_NAME)
			.icon(icon)
			.priority(5)
			.panel(pluginPanel)
			.build();

		clientToolbar.addNavigation(navigationButton);
	}

	@Override
	protected void shutDown() throws Exception
	{
		clientToolbar.removeNavigation(navigationButton);

		notifications = null;
		pluginPanel = null;
		navigationButton = null;
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (notifications.isEmpty() && event.getGroup().equals(CONFIG_GROUP) && event.getKey().equals(CONFIG_KEY))
		{
			loadConfig(event.getNewValue(), FORMAT_CURRENT_VERSION);
		}
	}

	private void loadConfig(String json, int version)
	{
		if (Strings.isNullOrEmpty(json))
		{
			notifications = new ArrayList<>();
			return;
		}

		if (version == 0)
		{
			Gson gson = new GsonBuilder()
				.registerTypeAdapter(Notification.class, new LegacyNotificationAdapter(this))
				.create();

			notifications = gson.fromJson(json, new TypeToken<ArrayList<Notification>>(){}.getType());
		}
		else if (version == 1)
		{
			Gson gson = new GsonBuilder()
				.registerTypeAdapter(Notification.class, new NotificationAdapter(this))
				.create();

			notifications = gson.fromJson(json, new TypeToken<ArrayList<Notification>>(){}.getType());
		}
	}

	private void notify(Object event)
	{
		for (Notification n : notifications)
		{
			n.tryNotify(event);
		}
	}

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event)
	{
		if (event.getItemContainer() == client.getItemContainer(InventoryID.INVENTORY))
		{
			Item[] items = event.getItemContainer().getItems();
			if (previousItems == null)
			{
				previousItems = items;
				return;
			}

			if (client.getWidget(WidgetInfo.BANK_CONTAINER) == null)
			{
				Set<Integer> uniqueItems = new HashSet<>();
				addUniqueItems(uniqueItems, items);
				addUniqueItems(uniqueItems, previousItems);

				for (int id : uniqueItems)
				{
					notify(new InventoryEvent(id, countItems(items, id), countItems(previousItems, id)));
				}
			}

			previousItems = items;
		}
	}

	private void addUniqueItems(Set<Integer> set, Item[] items)
	{
		for (Item i : items) set.add(i.getId());
	}

	private int countItems(Item[] items, int id)
	{
		int c = 0;
		for (Item i : items) if (i.getId() == id) c += Math.max(i.getQuantity(), 1);
		return c;
	}

	public void updateConfig()
	{
		if (notifications.isEmpty())
		{
			configManager.unsetConfiguration(CONFIG_GROUP, CONFIG_KEY_FORMAT);
			configManager.unsetConfiguration(CONFIG_GROUP, CONFIG_KEY);
			return;
		}

		configManager.unsetConfiguration(CONFIG_GROUP, CONFIG_KEY_FORMAT);
		final Gson gson = new GsonBuilder()
			.registerTypeAdapter(Notification.class, new NotificationAdapter(this))
			.create();
		final String json = gson.toJson(notifications, new TypeToken<ArrayList<Notification>>(){}.getType());
		configManager.setConfiguration(CONFIG_GROUP, CONFIG_KEY, json);
		configManager.setConfiguration(CONFIG_GROUP, CONFIG_KEY_FORMAT, FORMAT_CURRENT_VERSION);
	}

	public void rebuildPluginPanel()
	{
		pluginPanel.rebuild();
	}

	@Override
	public List<Notification> getDraggableItems()
	{
		return notifications;
	}
}

package com.github.zakru.advancednotifications.notification;

import com.github.zakru.advancednotifications.AdvancedNotificationsPlugin;
import lombok.Getter;

public class NotificationType<T extends Notification>
{
	public interface Provider<T extends Notification>
	{
		T provide(AdvancedNotificationsPlugin plugin);
	}

	private final Provider<T> provider;
	@Getter
	private final Class<T> targetClass;

	public NotificationType(Provider<T> provider, Class<T> targetClass)
	{
		this.provider = provider;
		this.targetClass = targetClass;
	}

	public T provide(AdvancedNotificationsPlugin plugin)
	{
		return provider.provide(plugin);
	}
}

package com.github.zakru.advancednotifications.notification;

import com.github.zakru.advancednotifications.AdvancedNotificationsPlugin;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;

public class LegacyNotificationAdapter extends TypeAdapter<Notification>
{
	private final AdvancedNotificationsPlugin plugin;
	private final Gson gson;

	public LegacyNotificationAdapter(AdvancedNotificationsPlugin plugin)
	{
		this.plugin = plugin;
		gson = new GsonBuilder()
			.registerTypeAdapter(Notification.class, this)
			.registerTypeAdapter(InventoryComparator.Pointer.class, new ComparatorAdapter())
			.create();
	}

	@Override
	public void write(JsonWriter out, Notification o) throws IOException
	{
		out.beginObject();
		out.name("type").value(idOf(o));
		out.name("data"); outTyped(out, o);
		out.endObject();
	}

	@Override
	public Notification read(JsonReader in) throws IOException
	{
		int notificationType = -1;
		Notification notification = null;

		in.beginObject();
		while (in.hasNext())
		{
			switch (in.nextName())
			{
				case "type":
					notificationType = in.nextInt();
					break;
				case "data":
					notification = ofType(in, notificationType);
					break;
				default:
					in.skipValue();
			}
		}
		in.endObject();

		notification.setPlugin(plugin);
		return notification;
	}

	private Notification ofType(JsonReader in, int type) throws IOException
	{
		switch (type)
		{
			case 0:
				return gson.fromJson(in, ItemNotification.class);
			case 1:
				return gson.fromJson(in, EmptyNotification.class);
			case 2:
				return gson.fromJson(in, NotificationGroup.class);
			default:
				return null;
		}
	}

	private void outTyped(JsonWriter out, Notification o) throws IOException
	{
		if (o instanceof ItemNotification) gson.toJson(o, ItemNotification.class, out);
		else if (o instanceof EmptyNotification) gson.toJson(o, EmptyNotification.class, out);
		else if (o instanceof NotificationGroup) gson.toJson(o, NotificationGroup.class, out);
	}

	private int idOf(Notification o)
	{
		if (o instanceof ItemNotification) return 0;
		if (o instanceof EmptyNotification) return 1;
		if (o instanceof NotificationGroup) return 2;
		return -1;
	}
}

package com.github.zakru.advancednotifications.notification;

import com.github.zakru.advancednotifications.AdvancedNotificationsPlugin;
import com.github.zakru.advancednotifications.InventoryEvent;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
public class EmptyNotification extends Notification
{
	@Getter
	@Setter
	private InventoryComparator.Pointer comparator = new InventoryComparator.Pointer(InventoryComparator.COMPARATORS[0]);
	@Getter
	@Setter
	private int comparatorParam = 0;

	public EmptyNotification(AdvancedNotificationsPlugin plugin)
	{
		super(plugin);
	}

	@Override
	public void notify(Object event)
	{
		if (!(event instanceof InventoryEvent)) return;

		InventoryEvent e = (InventoryEvent)event;

		if (e.getItemID() == -1 && comparator.object.shouldNotify(e.getPreviousCount(), e.getCount(), comparatorParam))
		{
			doNotification(comparator.object.notification("empty space", comparatorParam));
		}
	}

	@Override
	public EmptyNotification clone()
	{
		EmptyNotification n = new EmptyNotification(getPlugin());
		n.comparator = new InventoryComparator.Pointer(comparator.object);
		n.comparatorParam = comparatorParam;
		return n;
	}
}

package com.github.zakru.advancednotifications.notification;

import java.util.HashMap;
import java.util.Map;

public class NotificationTypes
{
	public static final Map<String, NotificationType<?>> REGISTRY = new HashMap<>();

	public static final NotificationType<ItemNotification> ITEM = new NotificationType<>(ItemNotification::new, ItemNotification.class);
	public static final NotificationType<EmptyNotification> EMPTY = new NotificationType<>(EmptyNotification::new, EmptyNotification.class);
	public static final NotificationType<NotificationGroup> GROUP = new NotificationType<>(NotificationGroup::new, NotificationGroup.class);

	public static void registerAll()
	{
		REGISTRY.put("item", ITEM);
		REGISTRY.put("empty", EMPTY);
		REGISTRY.put("group", GROUP);
	}
}

package com.github.zakru.advancednotifications.notification;

import com.github.zakru.advancednotifications.notification.InventoryComparator;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.Arrays;

public class ComparatorAdapter extends TypeAdapter<InventoryComparator.Pointer>
{
	@Override
	public void write(JsonWriter out, InventoryComparator.Pointer o) throws IOException
	{
		out.value(Arrays.asList(InventoryComparator.COMPARATORS).indexOf(o.object));
	}

	@Override
	public InventoryComparator.Pointer read(JsonReader in) throws IOException
	{
		return new InventoryComparator.Pointer(InventoryComparator.COMPARATORS[in.nextInt()]);
	}
}

package com.github.zakru.advancednotifications.notification;

public interface InventoryComparator
{
	public static class Pointer
	{
		public InventoryComparator object;

		public Pointer(InventoryComparator object)
		{
			this.object = object;
		}
	}

	boolean shouldNotify(int previousCount, int newCount, int param);
	boolean takesParam();
	String notification(String item, int param);

	InventoryComparator COUNT_CHANGED = new InventoryComparator()
	{

		@Override
		public boolean shouldNotify(int previousCount, int newCount, int param)
		{
			return newCount != previousCount;
		}

		@Override
		public boolean takesParam()
		{
			return false;
		}

		@Override
		public String notification(String item, int param)
		{
			return "Your amount of " + item + " changed";
		}

		@Override
		public String toString()
		{
			return "+-";
		}
	};

	InventoryComparator COUNT_INCREASED = new InventoryComparator()
	{

		@Override
		public boolean shouldNotify(int previousCount, int newCount, int param)
		{
			return newCount > previousCount;
		}

		@Override
		public boolean takesParam()
		{
			return false;
		}

		@Override
		public String notification(String item, int param)
		{
			return "You got " + item;
		}

		@Override
		public String toString()
		{
			return "+";
		}
	};

	InventoryComparator COUNT_DECREASED = new InventoryComparator()
	{

		@Override
		public boolean shouldNotify(int previousCount, int newCount, int param)
		{
			return newCount < previousCount;
		}

		@Override
		public boolean takesParam()
		{
			return false;
		}

		@Override
		public String notification(String item, int param)
		{
			return "You lost " + item;
		}

		@Override
		public String toString()
		{
			return "-";
		}
	};

	InventoryComparator EQUAL = new InventoryComparator()
	{

		@Override
		public boolean shouldNotify(int previousCount, int newCount, int param)
		{
			return newCount == param && previousCount != param;
		}

		@Override
		public boolean takesParam()
		{
			return true;
		}

		@Override
		public String notification(String item, int param)
		{
			return "You now have " + param + " " + item;
		}

		@Override
		public String toString()
		{
			return "=";
		}
	};

	InventoryComparator NOT_EQUAL = new InventoryComparator()
	{

		@Override
		public boolean shouldNotify(int previousCount, int newCount, int param)
		{
			return newCount != param && previousCount == param;
		}

		@Override
		public boolean takesParam()
		{
			return true;
		}

		@Override
		public String notification(String item, int param)
		{
			return "You no longer have " + param + " " + item;
		}

		@Override
		public String toString()
		{
			return "≠";
		}
	};

	InventoryComparator LESS_THAN = new InventoryComparator()
	{

		@Override
		public boolean shouldNotify(int previousCount, int newCount, int param)
		{
			return newCount < param && previousCount >= param;
		}

		@Override
		public boolean takesParam()
		{
			return true;
		}

		@Override
		public String notification(String item, int param)
		{
			return "You now have less than " + param + " " + item;
		}

		@Override
		public String toString()
		{
			return "<";
		}
	};

	InventoryComparator GREATER_THAN = new InventoryComparator()
	{

		@Override
		public boolean shouldNotify(int previousCount, int newCount, int param)
		{
			return newCount > param && previousCount <= param;
		}

		@Override
		public boolean takesParam()
		{
			return true;
		}

		@Override
		public String notification(String item, int param)
		{
			return "You now have more than " + param + " " + item;
		}

		@Override
		public String toString()
		{
			return ">";
		}
	};

	InventoryComparator LESS_OR_EQUAL = new InventoryComparator()
	{

		@Override
		public boolean shouldNotify(int previousCount, int newCount, int param)
		{
			return newCount <= param && previousCount > param;
		}

		@Override
		public boolean takesParam()
		{
			return true;
		}

		@Override
		public String notification(String item, int param)
		{
			return "You now have at most " + param + " " + item;
		}

		@Override
		public String toString()
		{
			return "≤";
		}
	};

	InventoryComparator GREATER_OR_EQUAL = new InventoryComparator()
	{

		@Override
		public boolean shouldNotify(int previousCount, int newCount, int param)
		{
			return newCount >= param && previousCount < param;
		}

		@Override
		public boolean takesParam()
		{
			return true;
		}

		@Override
		public String notification(String item, int param)
		{
			return "You now have at least " + param + " " + item;
		}

		@Override
		public String toString()
		{
			return "≥";
		}
	};

	InventoryComparator[] COMPARATORS = new InventoryComparator[]
	{
			COUNT_CHANGED, COUNT_INCREASED, COUNT_DECREASED, EQUAL, NOT_EQUAL,
			LESS_THAN, GREATER_THAN, LESS_OR_EQUAL, GREATER_OR_EQUAL,
	};
}

package com.github.zakru.advancednotifications.notification;

import com.github.zakru.advancednotifications.AdvancedNotificationsPlugin;
import com.github.zakru.advancednotifications.DraggableContainer;
import com.github.zakru.advancednotifications.condition.Condition;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@NoArgsConstructor
public abstract class Notification
{
	@Getter
	@Setter
	private transient AdvancedNotificationsPlugin plugin;

	@Getter
	@Setter
	private boolean enabled = true;

	@Getter
	@Setter
	private transient boolean configuring = false;

	@Getter
	@Setter
	private Condition condition = null;

	@Getter
	private final transient DraggableContainer<Condition> conditionContainer = new DraggableContainer<Condition>() {

		@Override
		public List<Condition> getDraggableItems() {
			return Collections.singletonList(condition);
		}

		@Override
		public Notification getRoot() {
			return Notification.this;
		}
	};

	public Notification(AdvancedNotificationsPlugin plugin)
	{
		this.plugin = plugin;
	}

	public void tryNotify(Object event)
	{
		if (!enabled || (condition != null && !condition.isFulfilled())) return;

		notify(event);
	}

	protected abstract void notify(Object event);

	protected void doNotification(String message)
	{
		plugin.getNotifier().notify(message);
	}

	public abstract Notification clone();
}

package com.github.zakru.advancednotifications.notification;

import com.github.zakru.advancednotifications.AdvancedNotificationsPlugin;
import com.github.zakru.advancednotifications.DraggableContainer;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.ArrayList;
import java.util.List;

@NoArgsConstructor
public class NotificationGroup extends Notification implements DraggableContainer<Notification>
{
	@Getter
	@Setter
	private String name = "Group";
	@Getter
	@Setter
	private boolean collapsed = false;
	private final List<Notification> notifications = new ArrayList<>();

	public NotificationGroup(AdvancedNotificationsPlugin plugin)
	{
		super(plugin);
	}

	@Override
	protected void notify(Object event)
	{
		for (Notification n : notifications) n.tryNotify(event);
	}

	@Override
	public NotificationGroup clone() {
		NotificationGroup n = new NotificationGroup(getPlugin());
		n.name = name + " copy";
		n.collapsed = collapsed;

		for (Notification n1 : notifications) n.notifications.add(n1.clone());

		return n;
	}

	@Override
	public List<Notification> getDraggableItems() {
		return notifications;
	}
}

package com.github.zakru.advancednotifications.notification;

import com.github.zakru.advancednotifications.AdvancedNotificationsPlugin;
import com.github.zakru.advancednotifications.condition.CheckerAdapter;
import com.github.zakru.advancednotifications.condition.Condition;
import com.github.zakru.advancednotifications.condition.ConditionAdapter;
import com.github.zakru.advancednotifications.condition.InventoryChecker;
import com.google.gson.*;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.Map;
import java.util.Optional;

public class NotificationAdapter extends TypeAdapter<Notification>
{
	private final AdvancedNotificationsPlugin plugin;
	private final Gson gson;

	public NotificationAdapter(AdvancedNotificationsPlugin plugin)
	{
		this.plugin = plugin;
		gson = new GsonBuilder()
			.registerTypeAdapter(Notification.class, this)
			.registerTypeAdapter(InventoryComparator.Pointer.class, new ComparatorAdapter())
			.registerTypeAdapter(Condition.class, new ConditionAdapter(plugin))
			.create();
	}

	@Override
	public void write(JsonWriter out, Notification o) throws IOException
	{
		JsonObject jo = gson.toJsonTree(o).getAsJsonObject();
		jo.addProperty("type", idOf(o));
		gson.toJson(jo, out);
	}

	@Override
	public Notification read(JsonReader in) throws IOException
	{
		JsonObject jo = gson.fromJson(in, JsonObject.class);
		String notificationType = jo.get("type").getAsString();
		jo.remove("type");

		Notification notification = ofType(jo, notificationType);

		notification.setPlugin(plugin);
		return notification;
	}

	private Notification ofType(JsonElement in, String type) throws IOException
	{
		NotificationType<?> t = NotificationTypes.REGISTRY.entrySet().stream().filter(e -> e.getKey().equals(type)).map(Map.Entry::getValue).findAny().orElse(null);
		if (t != null) return gson.fromJson(in, t.getTargetClass());
		throw new RuntimeException("Unknown notification type " + type);
	}

	private String idOf(Notification o)
	{
		Optional<String> id = NotificationTypes.REGISTRY.entrySet().stream().filter(e -> e.getValue().getTargetClass() == o.getClass()).map(Map.Entry::getKey).findAny();
		if (id.isPresent()) return id.get();

		throw new RuntimeException("Unknown notification class " + o.getClass());
	}
}

package com.github.zakru.advancednotifications.notification;

import com.github.zakru.advancednotifications.AdvancedNotificationsPlugin;
import com.github.zakru.advancednotifications.InventoryEvent;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
public class ItemNotification extends Notification
{
	@Getter
	@Setter
	private String item = "Coins";
	@Getter
	@Setter
	private InventoryComparator.Pointer comparator = new InventoryComparator.Pointer(InventoryComparator.COMPARATORS[0]);
	@Getter
	@Setter
	private int comparatorParam = 0;

	public ItemNotification(AdvancedNotificationsPlugin plugin)
	{
		super(plugin);
	}

	@Override
	public void notify(Object event)
	{
		if (!(event instanceof InventoryEvent)) return;

		InventoryEvent e = (InventoryEvent)event;

		if (getPlugin().getItemManager().getItemComposition(e.getItemID()).getName().equalsIgnoreCase(item)
			&& comparator.object.shouldNotify(e.getPreviousCount(), e.getCount(), comparatorParam))
		{
			doNotification(comparator.object.notification(item, comparatorParam));
		}
	}

	@Override
	public ItemNotification clone()
	{
		ItemNotification n = new ItemNotification(getPlugin());
		n.item = item;
		n.comparator = new InventoryComparator.Pointer(comparator.object);
		n.comparatorParam = comparatorParam;
		return n;
	}
}

package com.github.zakru.advancednotifications.ui.condition;

import com.github.zakru.advancednotifications.AdvancedNotificationsPlugin;
import com.github.zakru.advancednotifications.DraggableContainer;
import com.github.zakru.advancednotifications.condition.Condition;
import com.github.zakru.advancednotifications.condition.EmptyCondition;
import com.github.zakru.advancednotifications.condition.ItemCondition;
import com.github.zakru.advancednotifications.notification.Notification;
import com.github.zakru.advancednotifications.ui.DropSpace;
import com.github.zakru.advancednotifications.ui.DropSpaceSystem;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.ImageUtil;

import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.util.List;

public abstract class ConditionPanel<C extends Condition> extends JPanel implements MouseListener
{
	private static final ImageIcon DELETE_ICON;
	private static final ImageIcon DELETE_HOVER_ICON;

	static
	{
		final BufferedImage deleteIcon
			= ImageUtil.getResourceStreamFromClass(AdvancedNotificationsPlugin.class, "delete_icon.png");
		DELETE_ICON = new ImageIcon(deleteIcon);
		DELETE_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(deleteIcon, 0.53f));
	}

	protected static class DragStarter extends MouseAdapter
	{
		private final ConditionPanel<?> panel;

		public DragStarter(ConditionPanel<?> panel)
		{
			this.panel = panel;
		}

		@Override
		public void mousePressed(MouseEvent e)
		{
			if (e.getButton() == MouseEvent.BUTTON1)
			{
				panel.system.setDragging(panel.condition, panel.container);
			}
		}

		@SuppressWarnings("unchecked")
		@Override
		public void mouseReleased(MouseEvent e)
		{
			if (e.getButton() == MouseEvent.BUTTON1)
			{
				if (panel.system.getDragHovering() == null)
				{
					panel.system.setDragging(null, null);
				}
				else
				{
					DropSpaceSystem<Condition> system = panel.system;
					DropSpace<Condition> space = system.getDragHovering();
					Condition cond = panel.condition;

					// Check if this is a container and the target is inside it
					if (!(cond instanceof DraggableContainer
						&& space.getContainer() instanceof Condition
						&& (cond == space.getContainer()
							|| containerContains((DraggableContainer<Condition>)cond, (Condition)space.getContainer())))
					)
					{
						if (system.getDraggingFrom() != space.getContainer())
						{
							system.getDraggingFrom().getDraggableItems().remove(system.getDragging());
							space.getContainer().getDraggableItems().add(space.getIndex(), system.getDragging());
						}
						else
						{
							List<Condition> conditions = panel.container.getDraggableItems();
							int originalIndex = conditions.indexOf(panel.condition);
							conditions.remove(panel.condition);
							int index = space.getIndex();
							if (index > originalIndex) index = index - 1;

							conditions.add(index, panel.condition);
						}
						panel.plugin.updateConfig();
						panel.plugin.rebuildPluginPanel();
					}

					space.setBackground(ColorScheme.DARK_GRAY_COLOR);
					system.setDragging(null, null);
					system.setDragHovering(null);
				}
			}
		}

		@SuppressWarnings("unchecked")
		private static boolean containerContains(DraggableContainer<Condition> parent, Condition child) {
			if (parent.getDraggableItems().contains(child)) return true;

			for (Condition c : parent.getDraggableItems())
				if (c instanceof DraggableContainer && containerContains((DraggableContainer<Condition>)c, child)) return true;

			return false;
		}
	}

	protected static class DefaultTypePanel extends JPanel
	{
		private static final Border TYPE_BORDER = BorderFactory.createCompoundBorder(
			BorderFactory.createMatteBorder(0, 0, 1, 0, ColorScheme.DARK_GRAY_COLOR),
			BorderFactory.createEmptyBorder(8, 8, 8, 8));

		public DefaultTypePanel(ConditionPanel<?> panel, String typeName)
		{
			super(new BorderLayout());
			setBackground(ColorScheme.DARKER_GRAY_HOVER_COLOR);
			setOpaque(false);
			setBorder(TYPE_BORDER);
			addMouseListener(new DragStarter(panel));
			addMouseListener(panel);

			JLabel typeLabel = new JLabel(typeName);
			typeLabel.setForeground(Color.WHITE);

			add(typeLabel, BorderLayout.WEST);
			add(createDefaultActions(panel), BorderLayout.EAST);
		}

		public void addDefaultVisualListener()
		{
			addMouseListener(new MouseAdapter()
			{
				@Override
				public void mousePressed(MouseEvent e)
				{
					if (e.getButton() == MouseEvent.BUTTON1)
					{
						((DefaultTypePanel)e.getComponent()).setOpaque(true);
						e.getComponent().repaint();
					}
				}

				@Override
				public void mouseReleased(MouseEvent e)
				{
					if (e.getButton() == MouseEvent.BUTTON1)
					{
						((DefaultTypePanel)e.getComponent()).setOpaque(false);
						e.getComponent().repaint();
					}
				}
			});
		}
	}

	protected final C condition;
	protected final DraggableContainer<Condition> container;
	protected final DropSpaceSystem<Condition> system;
	protected final AdvancedNotificationsPlugin plugin;

	private JPopupMenu menuPopup = new JPopupMenu();
	{
		menuPopup.add(new JMenuItem(new AbstractAction("Clone")
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				container.getDraggableItems().add(condition.clone());
				plugin.rebuildPluginPanel();
			}
		}));
	}

	public ConditionPanel(C condition, DropSpaceSystem<Condition> system, DraggableContainer<Condition> container)
	{
		this.condition = condition;
		this.system = system;
		this.container = container;
		plugin = condition.getPlugin();

		addMouseListener(this);
	}

	public static ConditionPanel<?> buildPanel(Condition cond, DropSpaceSystem<Condition> system, DraggableContainer<Condition> container)
	{
		if (cond instanceof ItemCondition) return new ItemConditionPanel((ItemCondition)cond, system, container);
		if (cond instanceof EmptyCondition) return new EmptyConditionPanel((EmptyCondition)cond, system, container);
		//if (notif instanceof NotificationGroup) return new NotificationGroupPanel((NotificationGroup)cond, system, container);

		return null;
	}

	@Override
	public void mouseClicked(MouseEvent e) {}

	@Override
	public void mouseEntered(MouseEvent e) {}

	@Override
	public void mouseExited(MouseEvent e) {}

	@Override
	public void mousePressed(MouseEvent e)
	{
		handleClick(e);
	}

	@Override
	public void mouseReleased(MouseEvent e)
	{
		handleClick(e);
	}

	private void handleClick(MouseEvent e)
	{
		if (e.isPopupTrigger() && !e.isConsumed())
		{
			menuPopup.show(this, e.getX(), e.getY());
			e.consume();
		}
	}
	
	protected static JPanel createDefaultActions(ConditionPanel<?> panel) {
		JPanel actions = new JPanel(new FlowLayout(FlowLayout.RIGHT, 4, 0));
		actions.setOpaque(false);
		actions.setBorder(BorderFactory.createEmptyBorder(0, -4, 0, -4));

		JLabel deleteButton = new JLabel(DELETE_ICON);
		deleteButton.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mouseClicked(MouseEvent e)
			{
				if (e.getButton() == MouseEvent.BUTTON1)
				{
					Notification root = panel.container.getRoot();
					if (root != null)
					{
						root.setCondition(null);
						root.setConfiguring(false);
					}
					else panel.container.getDraggableItems().remove(panel.condition);
					panel.plugin.updateConfig();
					panel.plugin.rebuildPluginPanel();
				}
			}

			@Override
			public void mouseEntered(MouseEvent e)
			{
				deleteButton.setIcon(DELETE_HOVER_ICON);
			}

			@Override
			public void mouseExited(MouseEvent e)
			{
				deleteButton.setIcon(DELETE_ICON);
			}
		});

		actions.add(deleteButton);
		
		return actions;
	}
}

package com.github.zakru.advancednotifications.ui.condition;

import com.github.zakru.advancednotifications.DraggableContainer;
import com.github.zakru.advancednotifications.condition.Condition;
import com.github.zakru.advancednotifications.condition.EmptyCondition;
import com.github.zakru.advancednotifications.condition.InventoryChecker;
import com.github.zakru.advancednotifications.notification.EmptyNotification;
import com.github.zakru.advancednotifications.notification.InventoryComparator;
import com.github.zakru.advancednotifications.notification.Notification;
import com.github.zakru.advancednotifications.ui.DropSpaceSystem;
import com.github.zakru.advancednotifications.ui.notification.NotificationPanel;
import net.runelite.client.ui.ColorScheme;

import javax.swing.*;
import java.awt.*;

public class EmptyConditionPanel extends ConditionPanel<EmptyCondition>
{
	private final SpinnerModel spinnerModel = new SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1);
	private final JSpinner countSpinner = new JSpinner(spinnerModel);

	public EmptyConditionPanel(
		EmptyCondition condition,
		DropSpaceSystem<Condition> system,
		DraggableContainer<Condition> container
	)
	{
		super(condition, system, container);
		setLayout(new BorderLayout());
		setBackground(ColorScheme.DARKER_GRAY_COLOR);

		DefaultTypePanel typePanel = new DefaultTypePanel(this, "Empty Space Condition");
		typePanel.addDefaultVisualListener();

		JPanel contentPanel = new JPanel(new BorderLayout());
		contentPanel.setBorder(BorderFactory.createEmptyBorder(8, 8, 8, 8));
		contentPanel.setOpaque(false);

		JPanel paramsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
		paramsPanel.setOpaque(false);

		JLabel countLabel = new JLabel("Count ");
		countLabel.setForeground(Color.WHITE);

		JComboBox<InventoryChecker> comparatorBox = new JComboBox<>(InventoryChecker.CHECKERS);
		comparatorBox.setSelectedItem(condition.getChecker().object);
		comparatorBox.setPreferredSize(new Dimension(50, 20));
		comparatorBox.setMaximumRowCount(9);
		comparatorBox.addItemListener(e -> {
			condition.getChecker().object = (InventoryChecker)comparatorBox.getSelectedItem();
			condition.getPlugin().updateConfig();
			countSpinner.setVisible(condition.getChecker().object.takesParam());
		});

		countSpinner.setValue(condition.getCheckerParam());
		countSpinner.setPreferredSize(new Dimension(64, 20));
		countSpinner.setVisible(condition.getChecker().object.takesParam());
		countSpinner.addChangeListener(e -> {
			condition.setCheckerParam((Integer)countSpinner.getValue());
			condition.getPlugin().updateConfig();
		});

		paramsPanel.add(countLabel);
		paramsPanel.add(comparatorBox);
		paramsPanel.add(countSpinner);

		contentPanel.add(paramsPanel, BorderLayout.SOUTH);

		add(typePanel, BorderLayout.NORTH);
		add(contentPanel, BorderLayout.CENTER);
	}
}

package com.github.zakru.advancednotifications.ui.condition;

import com.github.zakru.advancednotifications.DraggableContainer;
import com.github.zakru.advancednotifications.condition.Condition;
import com.github.zakru.advancednotifications.condition.InventoryChecker;
import com.github.zakru.advancednotifications.condition.ItemCondition;
import com.github.zakru.advancednotifications.notification.InventoryComparator;
import com.github.zakru.advancednotifications.notification.ItemNotification;
import com.github.zakru.advancednotifications.notification.Notification;
import com.github.zakru.advancednotifications.ui.DropSpaceSystem;
import com.github.zakru.advancednotifications.ui.notification.NotificationPanel;
import net.runelite.client.ui.ColorScheme;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;

public class ItemConditionPanel extends ConditionPanel<ItemCondition>
{
	private final SpinnerModel spinnerModel = new SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1);
	private final JSpinner countSpinner = new JSpinner(spinnerModel);

	public ItemConditionPanel(ItemCondition condition, DropSpaceSystem<Condition> system, DraggableContainer<Condition> container)
	{
		super(condition, system, container);
		setLayout(new BorderLayout());
		setBackground(ColorScheme.DARKER_GRAY_COLOR);

		DefaultTypePanel typePanel = new DefaultTypePanel(this, "Inventory Condition");
		typePanel.addDefaultVisualListener();

		JPanel contentPanel = new JPanel(new BorderLayout());
		contentPanel.setBorder(BorderFactory.createEmptyBorder(8, 8, 8, 8));
		contentPanel.setOpaque(false);

		JTextField nameField = new JTextField(condition.getItem());
		nameField.getDocument().addDocumentListener(new DocumentListener()
		{
			@Override
			public void insertUpdate(DocumentEvent e)
			{
				updateItem(nameField);
			}

			@Override
			public void removeUpdate(DocumentEvent e)
			{
				updateItem(nameField);
			}

			@Override
			public void changedUpdate(DocumentEvent e)
			{
				updateItem(nameField);
			}
		});

		JPanel paramsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
		paramsPanel.setOpaque(false);

		JLabel countLabel = new JLabel("Count ");
		countLabel.setForeground(Color.WHITE);

		JComboBox<InventoryChecker> comparatorBox = new JComboBox<>(InventoryChecker.CHECKERS);
		comparatorBox.setSelectedItem(condition.getChecker().object);
		comparatorBox.setPreferredSize(new Dimension(50, 20));
		comparatorBox.setMaximumRowCount(9);
		comparatorBox.addItemListener(e -> {
			condition.getChecker().object = (InventoryChecker)comparatorBox.getSelectedItem();
			condition.getPlugin().updateConfig();
			countSpinner.setVisible(condition.getChecker().object.takesParam());
		});

		countSpinner.setValue(condition.getCheckerParam());
		countSpinner.setPreferredSize(new Dimension(64, 20));
		countSpinner.setVisible(condition.getChecker().object.takesParam());
		countSpinner.addChangeListener(e -> {
			condition.setCheckerParam((Integer)countSpinner.getValue());
			condition.getPlugin().updateConfig();
		});

		paramsPanel.add(countLabel);
		paramsPanel.add(comparatorBox);
		paramsPanel.add(countSpinner);

		contentPanel.add(nameField, BorderLayout.NORTH);
		contentPanel.add(paramsPanel, BorderLayout.SOUTH);

		add(typePanel, BorderLayout.NORTH);
		add(contentPanel, BorderLayout.CENTER);
	}

	private void updateItem(JTextField field)
	{
		condition.setItem(field.getText());
		condition.getPlugin().updateConfig();
	}
}

package com.github.zakru.advancednotifications.ui;

import com.github.zakru.advancednotifications.AdvancedNotificationsPlugin;
import com.github.zakru.advancednotifications.notification.Notification;
import net.runelite.client.util.ImageUtil;

import javax.swing.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;

public class EnabledButton extends JLabel
{
	private static final ImageIcon ENABLED_ICON;
	private static final ImageIcon ENABLED_HOVER_ICON;
	private static final ImageIcon DISABLED_ICON;
	private static final ImageIcon DISABLED_HOVER_ICON;
	private final Notification notification;

	static
	{
		final BufferedImage enabledIcon
			= ImageUtil.getResourceStreamFromClass(AdvancedNotificationsPlugin.class, "enabled_icon.png");
		ENABLED_ICON = new ImageIcon(enabledIcon);
		ENABLED_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(enabledIcon, 0.53f));

		final BufferedImage disabledIcon
			= ImageUtil.getResourceStreamFromClass(AdvancedNotificationsPlugin.class, "disabled_icon.png");
		DISABLED_ICON = new ImageIcon(disabledIcon);
		DISABLED_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(disabledIcon, 0.53f));
	}

	public EnabledButton(AdvancedNotificationsPlugin plugin, Notification notification)
	{
		this.notification = notification;

		setIcon(notification.isEnabled() ? ENABLED_ICON : DISABLED_ICON);

		addMouseListener(new MouseAdapter()
		{
			@Override
			public void mouseClicked(MouseEvent e)
			{
				if (e.getButton() == MouseEvent.BUTTON1)
				{
					notification.setEnabled(!notification.isEnabled());
					updateIcon();
					plugin.updateConfig();
				}
			}

			@Override
			public void mouseEntered(MouseEvent e)
			{
				setIcon(notification.isEnabled() ? ENABLED_HOVER_ICON : DISABLED_HOVER_ICON);
			}

			@Override
			public void mouseExited(MouseEvent e)
			{
				setIcon(notification.isEnabled() ? ENABLED_ICON : DISABLED_ICON);
			}
		});
	}

	private void updateIcon()
	{
		if (getIcon() == ENABLED_ICON || getIcon() == DISABLED_ICON)
		{
			setIcon(notification.isEnabled() ? ENABLED_ICON : DISABLED_ICON);
		}
		else
		{
			setIcon(notification.isEnabled() ? ENABLED_HOVER_ICON : DISABLED_HOVER_ICON);
		}
	}
}

package com.github.zakru.advancednotifications.ui;

import com.github.zakru.advancednotifications.DraggableContainer;

public interface DropSpaceSystem<T>
{
	T getDragging();
	void setDragging(T t, DraggableContainer<T> from);
	DraggableContainer<T> getDraggingFrom();
	DropSpace<T> getDragHovering();
	void setDragHovering(DropSpace<T> space);
}

package com.github.zakru.advancednotifications.ui.notification;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;

import javax.swing.BorderFactory;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import com.github.zakru.advancednotifications.DraggableContainer;
import com.github.zakru.advancednotifications.condition.Condition;
import com.github.zakru.advancednotifications.notification.InventoryComparator;
import com.github.zakru.advancednotifications.notification.ItemNotification;
import com.github.zakru.advancednotifications.notification.Notification;

import com.github.zakru.advancednotifications.ui.DropSpaceSystem;
import com.github.zakru.advancednotifications.ui.condition.ConditionPanel;
import net.runelite.client.ui.ColorScheme;

public class ItemNotificationPanel extends NotificationPanel<ItemNotification>
{
	private final SpinnerModel spinnerModel = new SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1);
	private final JSpinner countSpinner = new JSpinner(spinnerModel);

	public ItemNotificationPanel(
		ItemNotification notification,
		DropSpaceSystem<Notification> system,
		DraggableContainer<Notification> container,
		DropSpaceSystem<Condition> conditionSystem
	)
	{
		super(notification, system, container);
		setLayout(new BorderLayout());
		setBackground(ColorScheme.DARKER_GRAY_COLOR);

		DefaultTypePanel typePanel = new DefaultTypePanel(this, "Inventory");
		typePanel.addDefaultVisualListener();

		JPanel contentPanel = new JPanel(new BorderLayout());
		contentPanel.setBorder(BorderFactory.createEmptyBorder(8, 8, 8, 8));
		contentPanel.setOpaque(false);

		JTextField nameField = new JTextField(notification.getItem());
		nameField.getDocument().addDocumentListener(new DocumentListener()
		{
			@Override
			public void insertUpdate(DocumentEvent e)
			{
				updateItem(nameField);
			}

			@Override
			public void removeUpdate(DocumentEvent e)
			{
				updateItem(nameField);
			}

			@Override
			public void changedUpdate(DocumentEvent e)
			{
				updateItem(nameField);
			}
		});

		JPanel paramsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
		paramsPanel.setOpaque(false);

		JLabel countLabel = new JLabel("Count ");
		countLabel.setForeground(Color.WHITE);

		JComboBox<InventoryComparator> comparatorBox = new JComboBox<>(InventoryComparator.COMPARATORS);
		comparatorBox.setSelectedItem(notification.getComparator().object);
		comparatorBox.setPreferredSize(new Dimension(50, 20));
		comparatorBox.setMaximumRowCount(9);
		comparatorBox.addItemListener(e -> {
			notification.getComparator().object = (InventoryComparator)comparatorBox.getSelectedItem();
			notification.getPlugin().updateConfig();
			countSpinner.setVisible(notification.getComparator().object.takesParam());
		});

		countSpinner.setValue(notification.getComparatorParam());
		countSpinner.setPreferredSize(new Dimension(64, 20));
		countSpinner.setVisible(notification.getComparator().object.takesParam());
		countSpinner.addChangeListener(e -> {
			notification.setComparatorParam((Integer)countSpinner.getValue());
			notification.getPlugin().updateConfig();
		});

		paramsPanel.add(countLabel);
		paramsPanel.add(comparatorBox);
		paramsPanel.add(countSpinner);

		contentPanel.add(nameField, BorderLayout.NORTH);
		contentPanel.add(paramsPanel, BorderLayout.SOUTH);

		add(typePanel, BorderLayout.NORTH);
		if (notification.isConfiguring())
		{
			ConditionPanel cond = ConditionPanel.buildPanel(notification.getCondition(), conditionSystem, notification.getConditionContainer());
			cond.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, ColorScheme.DARK_GRAY_COLOR));
			add(cond, BorderLayout.CENTER);
		}
		add(contentPanel, BorderLayout.SOUTH);
	}

	private void updateItem(JTextField field)
	{
		notification.setItem(field.getText());
		notification.getPlugin().updateConfig();
	}
}

package com.github.zakru.advancednotifications.ui.notification;

import com.github.zakru.advancednotifications.*;
import com.github.zakru.advancednotifications.condition.Condition;
import com.github.zakru.advancednotifications.condition.EmptyCondition;
import com.github.zakru.advancednotifications.condition.ItemCondition;
import com.github.zakru.advancednotifications.notification.EmptyNotification;
import com.github.zakru.advancednotifications.notification.ItemNotification;
import com.github.zakru.advancednotifications.notification.Notification;
import com.github.zakru.advancednotifications.notification.NotificationGroup;
import com.github.zakru.advancednotifications.ui.DropSpace;
import com.github.zakru.advancednotifications.ui.DropSpaceSystem;
import com.github.zakru.advancednotifications.ui.EnabledButton;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.ImageUtil;

import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.util.List;

public abstract class NotificationPanel<N extends Notification> extends JPanel implements MouseListener
{
	private static final ImageIcon DELETE_ICON;
	private static final ImageIcon DELETE_HOVER_ICON;

	private static final ImageIcon CONFIGURE_ICON;
	private static final ImageIcon CONFIGURE_HOVER_ICON;
	private static final ImageIcon CONFIGURE_ACTIVE_ICON;
	private static final ImageIcon CONFIGURE_ACTIVE_HOVER_ICON;

	static
	{
		final BufferedImage deleteIcon
			= ImageUtil.getResourceStreamFromClass(AdvancedNotificationsPlugin.class, "delete_icon.png");
		DELETE_ICON = new ImageIcon(deleteIcon);
		DELETE_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(deleteIcon, 0.53f));

		final BufferedImage configureIcon
			= ImageUtil.getResourceStreamFromClass(AdvancedNotificationsPlugin.class, "configure_icon.png");
		CONFIGURE_ICON = new ImageIcon(configureIcon);
		CONFIGURE_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(configureIcon, 0.53f));

		final BufferedImage configureActiveIcon
			= ImageUtil.getResourceStreamFromClass(AdvancedNotificationsPlugin.class, "configure_active_icon.png");
		CONFIGURE_ACTIVE_ICON = new ImageIcon(configureActiveIcon);
		CONFIGURE_ACTIVE_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(configureActiveIcon, 0.53f));
	}

	protected static class DragStarter extends MouseAdapter
	{
		private final NotificationPanel<?> panel;

		public DragStarter(NotificationPanel<?> panel)
		{
			this.panel = panel;
		}

		@Override
		public void mousePressed(MouseEvent e)
		{
			if (e.getButton() == MouseEvent.BUTTON1)
			{
				panel.system.setDragging(panel.notification, panel.container);
			}
		}

		@SuppressWarnings("unchecked")
		@Override
		public void mouseReleased(MouseEvent e)
		{
			if (e.getButton() == MouseEvent.BUTTON1)
			{
				if (panel.system.getDragHovering() == null)
				{
					panel.system.setDragging(null, null);
				}
				else
				{
					DropSpaceSystem<Notification> system = panel.system;
					DropSpace<Notification> space = system.getDragHovering();
					Notification notif = panel.notification;

					// Check if this is a container and the target is inside it
					if (!(notif instanceof DraggableContainer
						&& space.getContainer() instanceof Notification
						&& (notif == space.getContainer()
							|| containerContains((DraggableContainer<Notification>)notif, (Notification)space.getContainer())))
					)
					{
						if (system.getDraggingFrom() != space.getContainer())
						{
							system.getDraggingFrom().getDraggableItems().remove(system.getDragging());
							space.getContainer().getDraggableItems().add(space.getIndex(), system.getDragging());
						}
						else
						{
							List<Notification> notifications = panel.container.getDraggableItems();
							int originalIndex = notifications.indexOf(panel.notification);
							notifications.remove(panel.notification);
							int index = space.getIndex();
							if (index > originalIndex) index = index - 1;

							notifications.add(index, panel.notification);
						}
						panel.plugin.updateConfig();
						panel.plugin.rebuildPluginPanel();
					}

					space.setBackground(ColorScheme.DARK_GRAY_COLOR);
					system.setDragging(null, null);
					system.setDragHovering(null);
				}
			}
		}

		@SuppressWarnings("unchecked")
		private static boolean containerContains(DraggableContainer<Notification> parent, Notification child) {
			if (parent.getDraggableItems().contains(child)) return true;

			for (Notification n : parent.getDraggableItems())
				if (n instanceof DraggableContainer && containerContains((DraggableContainer<Notification>)n, child)) return true;

			return false;
		}
	}

	protected static class DefaultTypePanel extends JPanel
	{
		private static final Border TYPE_BORDER = BorderFactory.createCompoundBorder(
			BorderFactory.createMatteBorder(0, 0, 1, 0, ColorScheme.DARK_GRAY_COLOR),
			BorderFactory.createEmptyBorder(8, 8, 8, 8));

		public DefaultTypePanel(NotificationPanel<?> panel, String typeName)
		{
			super(new BorderLayout());
			setBackground(ColorScheme.DARKER_GRAY_HOVER_COLOR);
			setOpaque(false);
			setBorder(TYPE_BORDER);
			addMouseListener(new DragStarter(panel));
			addMouseListener(panel);

			JLabel typeLabel = new JLabel(typeName);
			typeLabel.setForeground(Color.WHITE);

			add(typeLabel, BorderLayout.WEST);
			add(createDefaultActions(panel), BorderLayout.EAST);
		}

		public void addDefaultVisualListener()
		{
			addMouseListener(new MouseAdapter()
			{
				@Override
				public void mousePressed(MouseEvent e)
				{
					if (e.getButton() == MouseEvent.BUTTON1)
					{
						((DefaultTypePanel)e.getComponent()).setOpaque(true);
						e.getComponent().repaint();
					}
				}

				@Override
				public void mouseReleased(MouseEvent e)
				{
					if (e.getButton() == MouseEvent.BUTTON1)
					{
						((DefaultTypePanel)e.getComponent()).setOpaque(false);
						e.getComponent().repaint();
					}
				}
			});
		}
	}

	protected final N notification;
	protected final DraggableContainer<Notification> container;
	protected final DropSpaceSystem<Notification> system;
	protected final AdvancedNotificationsPlugin plugin;

	private JPopupMenu menuPopup = new JPopupMenu();
	{
		menuPopup.add(new JMenuItem(new AbstractAction("Clone")
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				container.getDraggableItems().add(notification.clone());
				plugin.rebuildPluginPanel();
			}
		}));
	}

	public NotificationPanel(N notification, DropSpaceSystem<Notification> system, DraggableContainer<Notification> container)
	{
		this.notification = notification;
		this.system = system;
		this.container = container;
		plugin = notification.getPlugin();

		addMouseListener(this);
	}

	public static NotificationPanel<?> buildPanel(
		Notification notif,
		DropSpaceSystem<Notification> system,
		DraggableContainer<Notification> container,
		DropSpaceSystem<Condition> conditionSystem
	)
	{
		if (notif instanceof ItemNotification) return new ItemNotificationPanel((ItemNotification)notif, system, container, conditionSystem);
		if (notif instanceof EmptyNotification) return new EmptyNotificationPanel((EmptyNotification)notif, system, container, conditionSystem);
		if (notif instanceof NotificationGroup) return new NotificationGroupPanel((NotificationGroup)notif, system, container, conditionSystem);

		return null;
	}

	@Override
	public void mouseClicked(MouseEvent e) {}

	@Override
	public void mouseEntered(MouseEvent e) {}

	@Override
	public void mouseExited(MouseEvent e) {}

	@Override
	public void mousePressed(MouseEvent e)
	{
		handleClick(e);
	}

	@Override
	public void mouseReleased(MouseEvent e)
	{
		handleClick(e);
	}

	private void handleClick(MouseEvent e)
	{
		if (e.isPopupTrigger() && !e.isConsumed())
		{
			menuPopup.show(this, e.getX(), e.getY());
			e.consume();
		}
	}
	
	protected static JPanel createDefaultActions(NotificationPanel<?> panel) {
		JPanel actions = new JPanel(new FlowLayout(FlowLayout.RIGHT, 4, 0));
		actions.setOpaque(false);
		actions.setBorder(BorderFactory.createEmptyBorder(0, -4, 0, -4));

		JLabel deleteButton = new JLabel(DELETE_ICON);
		deleteButton.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mouseClicked(MouseEvent e)
			{
				if (e.getButton() == MouseEvent.BUTTON1)
				{
					panel.container.getDraggableItems().remove(panel.notification);
					panel.plugin.updateConfig();
					panel.plugin.rebuildPluginPanel();
				}
			}

			@Override
			public void mouseEntered(MouseEvent e)
			{
				deleteButton.setIcon(DELETE_HOVER_ICON);
			}

			@Override
			public void mouseExited(MouseEvent e)
			{
				deleteButton.setIcon(DELETE_ICON);
			}
		});

		JLabel configureButton = new JLabel(panel.notification.getCondition() != null ? CONFIGURE_ACTIVE_ICON : CONFIGURE_ICON);
		if (panel.notification.isConfiguring())
		{
			configureButton.setOpaque(true);
			configureButton.setBackground(ColorScheme.MEDIUM_GRAY_COLOR);
		}
		configureButton.setToolTipText(panel.notification.getCondition() != null ? "Toggle condition configuration" : "Add condition");
		JPopupMenu addPopup = createAddConditionMenu(panel);
		configureButton.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(MouseEvent e)
			{
				if (panel.notification.getCondition() == null)
					addPopup.show(configureButton, e.getX(), e.getY());
			}

			@Override
			public void mouseClicked(MouseEvent e)
			{
				if (panel.notification.getCondition() != null)
				{
					if (e.getButton() == MouseEvent.BUTTON1)
					{
						panel.notification.setConfiguring(!panel.notification.isConfiguring());
						panel.plugin.rebuildPluginPanel();
					}
				}
			}

			@Override
			public void mouseEntered(MouseEvent e)
			{
				configureButton.setIcon(panel.notification.getCondition() != null ? CONFIGURE_ACTIVE_HOVER_ICON : CONFIGURE_HOVER_ICON);
			}

			@Override
			public void mouseExited(MouseEvent e)
			{
				configureButton.setIcon(panel.notification.getCondition() != null ? CONFIGURE_ACTIVE_ICON : CONFIGURE_ICON);
			}
		});

		actions.add(configureButton);
		actions.add(new EnabledButton(panel.plugin, panel.notification));
		actions.add(deleteButton);
		
		return actions;
	}

	protected static JPopupMenu createAddConditionMenu(NotificationPanel<?> panel) {
		JPopupMenu addPopup = new JPopupMenu();
		addPopup.add(new JMenuItem(new AbstractAction("Inventory")
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				panel.notification.setCondition(new ItemCondition(panel.plugin));
				panel.notification.setConfiguring(true);
				panel.plugin.updateConfig();
				panel.plugin.rebuildPluginPanel();
			}
		}));
		addPopup.add(new JMenuItem(new AbstractAction("Empty Space")
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				panel.notification.setCondition(new EmptyCondition(panel.plugin));
				panel.notification.setConfiguring(true);
				panel.plugin.updateConfig();
				panel.plugin.rebuildPluginPanel();
			}
		}));
		/*addPopup.add(new JMenuItem(new AbstractAction("Group")
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				panel.notification.setCondition().add(new ConditionGroup(panel.notification.getPlugin()));
				panel.notification.getPlugin().updateConfig();
				panel.notification.getPlugin().rebuildPluginPanel();
			}
		}));*/

		return addPopup;
	}
}

package com.github.zakru.advancednotifications.ui.notification;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;

import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

import com.github.zakru.advancednotifications.AdvancedNotificationsPlugin;
import com.github.zakru.advancednotifications.DraggableContainer;
import com.github.zakru.advancednotifications.condition.Condition;
import com.github.zakru.advancednotifications.notification.Notification;
import com.github.zakru.advancednotifications.notification.NotificationGroup;

import com.github.zakru.advancednotifications.ui.DropSpace;
import com.github.zakru.advancednotifications.ui.DropSpaceSystem;
import com.github.zakru.advancednotifications.ui.condition.ConditionPanel;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.ImageUtil;

public class NotificationGroupPanel extends NotificationPanel<NotificationGroup>
{
	private static final ImageIcon RENAME_ICON;
	private static final ImageIcon RENAME_HOVER_ICON;

	private static final ImageIcon COLLAPSE_ICON;
	private static final ImageIcon COLLAPSE_HOVER_ICON;
	private static final ImageIcon EXPAND_ICON;
	private static final ImageIcon EXPAND_HOVER_ICON;

	private final JTextField nameLabel;
	private final JLabel rename;

	static
	{
		final BufferedImage renameIcon
			= ImageUtil.getResourceStreamFromClass(AdvancedNotificationsPlugin.class, "rename_icon.png");
		RENAME_ICON = new ImageIcon(renameIcon);
		RENAME_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(renameIcon, 0.53f));

		final BufferedImage collapseIcon
			= ImageUtil.getResourceStreamFromClass(AdvancedNotificationsPlugin.class, "collapse_icon.png");
		COLLAPSE_ICON = new ImageIcon(collapseIcon);
		COLLAPSE_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(collapseIcon, 0.53f));

		final BufferedImage expandIcon
			= ImageUtil.getResourceStreamFromClass(AdvancedNotificationsPlugin.class, "expand_icon.png");
		EXPAND_ICON = new ImageIcon(expandIcon);
		EXPAND_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(expandIcon, 0.53f));
	}

	public NotificationGroupPanel(
		NotificationGroup notification,
		DropSpaceSystem<Notification> system,
		DraggableContainer<Notification> container,
		DropSpaceSystem<Condition> conditionSystem
	)
	{
		super(notification, system, container);
		setLayout(new BorderLayout());
		setOpaque(false);

		JPanel northPanel = new JPanel(new BorderLayout());
		northPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		northPanel.setBorder(BorderFactory.createEmptyBorder(8, 8, 8, 8));
		northPanel.addMouseListener(new DragStarter(this));
		northPanel.addMouseListener(this);
		northPanel.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(MouseEvent e)
			{
				if (e.getButton() == MouseEvent.BUTTON1)
				{
					northPanel.setBackground(ColorScheme.DARKER_GRAY_HOVER_COLOR);
				}
			}

			@Override
			public void mouseReleased(MouseEvent e)
			{
				if (e.getButton() == MouseEvent.BUTTON1)
				{
					northPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
				}
			}
		});

		nameLabel = new JTextField();
		nameLabel.setForeground(Color.WHITE);
		nameLabel.setDisabledTextColor(Color.WHITE);
		nameLabel.setEnabled(false);
		nameLabel.setBorder(null);
		nameLabel.setBackground(null);
		nameLabel.setOpaque(false);
		nameLabel.setText(notification.getName());
		nameLabel.addActionListener(e -> finishRename());
		nameLabel.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(MouseEvent e)
			{
				for (MouseListener l : northPanel.getMouseListeners()) l.mousePressed(e);
			}

			@Override
			public void mouseReleased(MouseEvent e)
			{
				for (MouseListener l : northPanel.getMouseListeners()) l.mouseReleased(e);
			}
		});
		nameLabel.addFocusListener(new FocusAdapter()
		{
			@Override
			public void focusLost(FocusEvent e)
			{
				finishRename();
			}
		});

		JPanel actions = createDefaultActions(this);

		rename = new JLabel(RENAME_ICON);
		rename.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mouseClicked(MouseEvent e)
			{
				if (e.getButton() == MouseEvent.BUTTON1)
				{
					nameLabel.setEnabled(true);
					nameLabel.requestFocusInWindow();
					nameLabel.selectAll();
					rename.setEnabled(false);
				}
			}

			@Override
			public void mouseEntered(MouseEvent e)
			{
				rename.setIcon(RENAME_HOVER_ICON);
			}

			@Override
			public void mouseExited(MouseEvent e)
			{
				rename.setIcon(RENAME_ICON);
			}
		});

		actions.add(rename, 0);

		JLabel collapseOrExpand = new JLabel(notification.isCollapsed() ? EXPAND_ICON : COLLAPSE_ICON);
		collapseOrExpand.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mouseClicked(MouseEvent e)
			{
				if (e.getButton() == MouseEvent.BUTTON1)
				{
					notification.setCollapsed(!notification.isCollapsed());
					notification.getPlugin().updateConfig();
					notification.getPlugin().rebuildPluginPanel();
				}
			}

			@Override
			public void mouseEntered(MouseEvent e)
			{
				collapseOrExpand.setIcon(notification.isCollapsed() ? EXPAND_HOVER_ICON : COLLAPSE_HOVER_ICON);
			}

			@Override
			public void mouseExited(MouseEvent e)
			{
				collapseOrExpand.setIcon(notification.isCollapsed() ? EXPAND_ICON : COLLAPSE_ICON);
			}
		});

		northPanel.add(collapseOrExpand, BorderLayout.WEST);
		northPanel.add(nameLabel, BorderLayout.CENTER);
		northPanel.add(actions, BorderLayout.EAST);

		add(northPanel, BorderLayout.NORTH);

		if (notification.isConfiguring())
		{
			ConditionPanel cond = ConditionPanel.buildPanel(notification.getCondition(), conditionSystem, notification.getConditionContainer());
			cond.setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, ColorScheme.DARK_GRAY_COLOR));
			add(cond, BorderLayout.CENTER);
		}

		if (!notification.isCollapsed())
		{
			JPanel notificationView = new JPanel();
			notificationView.setLayout(new BoxLayout(notificationView, BoxLayout.Y_AXIS));
			notificationView.setOpaque(false);
			notificationView.setBorder(BorderFactory.createCompoundBorder(
				BorderFactory.createMatteBorder(0, 5, 0, 0, ColorScheme.DARKER_GRAY_COLOR),
				BorderFactory.createEmptyBorder(0, 5, 0, 0))
			);

			int index = 0;
			notificationView.add(new DropSpace<Notification>(system, notification, index++));
			for (final Notification notif : notification.getDraggableItems())
			{
				NotificationPanel<?> panel = NotificationPanel.buildPanel(notif, system, notification, conditionSystem);
				if (panel != null)
				{
					notificationView.add(panel);
					notificationView.add(new DropSpace<Notification>(system, notification, index++));
				}
			}

			add(notificationView, BorderLayout.SOUTH);
		}
	}

	public void resetScroll()
	{
		nameLabel.setScrollOffset(0);
	}

	private void finishRename()
	{
		if (!nameLabel.isEnabled()) return;

		nameLabel.setEnabled(false);
		nameLabel.requestFocusInWindow();
		notification.setName(nameLabel.getText());
		plugin.updateConfig();
		rename.setEnabled(true);
	}
}

package com.github.zakru.advancednotifications.ui.notification;

import com.github.zakru.advancednotifications.DraggableContainer;
import com.github.zakru.advancednotifications.condition.Condition;
import com.github.zakru.advancednotifications.notification.EmptyNotification;
import com.github.zakru.advancednotifications.notification.InventoryComparator;
import com.github.zakru.advancednotifications.notification.Notification;

import com.github.zakru.advancednotifications.ui.DropSpaceSystem;
import com.github.zakru.advancednotifications.ui.condition.ConditionPanel;
import net.runelite.client.ui.ColorScheme;

import javax.swing.*;
import java.awt.*;

public class EmptyNotificationPanel extends NotificationPanel<EmptyNotification>
{
	private final SpinnerModel spinnerModel = new SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1);
	private final JSpinner countSpinner = new JSpinner(spinnerModel);

	public EmptyNotificationPanel(
		EmptyNotification notification,
		DropSpaceSystem<Notification> system,
		DraggableContainer<Notification> container,
		DropSpaceSystem<Condition> conditionSystem
	)
	{
		super(notification, system, container);
		setLayout(new BorderLayout());
		setBackground(ColorScheme.DARKER_GRAY_COLOR);

		DefaultTypePanel typePanel = new DefaultTypePanel(this, "Empty Space");
		typePanel.addDefaultVisualListener();

		JPanel contentPanel = new JPanel(new BorderLayout());
		contentPanel.setBorder(BorderFactory.createEmptyBorder(8, 8, 8, 8));
		contentPanel.setOpaque(false);

		JPanel paramsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
		paramsPanel.setOpaque(false);

		JLabel countLabel = new JLabel("Count ");
		countLabel.setForeground(Color.WHITE);

		JComboBox<InventoryComparator> comparatorBox = new JComboBox<>(InventoryComparator.COMPARATORS);
		comparatorBox.setSelectedItem(notification.getComparator().object);
		comparatorBox.setPreferredSize(new Dimension(50, 20));
		comparatorBox.setMaximumRowCount(9);
		comparatorBox.addItemListener(e -> {
			notification.getComparator().object = (InventoryComparator)comparatorBox.getSelectedItem();
			notification.getPlugin().updateConfig();
			countSpinner.setVisible(notification.getComparator().object.takesParam());
		});

		countSpinner.setValue(notification.getComparatorParam());
		countSpinner.setPreferredSize(new Dimension(64, 20));
		countSpinner.setVisible(notification.getComparator().object.takesParam());
		countSpinner.addChangeListener(e -> {
			notification.setComparatorParam((Integer)countSpinner.getValue());
			notification.getPlugin().updateConfig();
		});

		paramsPanel.add(countLabel);
		paramsPanel.add(comparatorBox);
		paramsPanel.add(countSpinner);

		contentPanel.add(paramsPanel, BorderLayout.SOUTH);

		add(typePanel, BorderLayout.NORTH);
		if (notification.isConfiguring())
		{
			ConditionPanel cond = ConditionPanel.buildPanel(notification.getCondition(), conditionSystem, notification.getConditionContainer());
			cond.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, ColorScheme.DARK_GRAY_COLOR));
			add(cond, BorderLayout.CENTER);
		}
		add(contentPanel, BorderLayout.SOUTH);
	}
}

package com.github.zakru.advancednotifications.ui;

import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.JPanel;

import com.github.zakru.advancednotifications.DraggableContainer;

import lombok.Getter;
import net.runelite.client.ui.ColorScheme;

public class DropSpace<T> extends JPanel
{
	private final MouseAdapter listener = new MouseAdapter()
	{
		@Override
		public void mouseEntered(MouseEvent e)
		{
			@SuppressWarnings("unchecked")
			DropSpace<T> space = (DropSpace<T>)e.getComponent();
			if (space.system.getDragging() != null)
			{
				space.setBackground(ColorScheme.MEDIUM_GRAY_COLOR);
				space.system.setDragHovering(space);
			}
		}

		@Override
		public void mouseExited(MouseEvent e)
		{
			@SuppressWarnings("unchecked")
			DropSpace<T> space = (DropSpace<T>)e.getComponent();
			if (space.system.getDragging() != null)
			{
				space.setBackground(ColorScheme.DARK_GRAY_COLOR);
				space.system.setDragHovering(null);
			}
		}
	};

	private final DropSpaceSystem<T> system;
	@Getter
	private final DraggableContainer<T> container;
	@Getter
	private final int index;

	public DropSpace(DropSpaceSystem<T> system, DraggableContainer<T> container, int index)
	{
		this.system = system;
		this.container = container;
		this.index = index;

		setBackground(ColorScheme.DARK_GRAY_COLOR);
		setPreferredSize(new Dimension(0,10));
		setMaximumSize(new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE));

		addMouseListener(listener);
	}
}

package com.github.zakru.advancednotifications.ui;

import com.github.zakru.advancednotifications.*;
import com.github.zakru.advancednotifications.condition.Condition;
import com.github.zakru.advancednotifications.notification.EmptyNotification;
import com.github.zakru.advancednotifications.notification.ItemNotification;
import com.github.zakru.advancednotifications.notification.Notification;
import com.github.zakru.advancednotifications.notification.NotificationGroup;
import com.github.zakru.advancednotifications.ui.notification.NotificationGroupPanel;
import com.github.zakru.advancednotifications.ui.notification.NotificationPanel;
import lombok.Getter;
import lombok.Setter;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.util.ImageUtil;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;

public class AdvancedNotificationsPluginPanel extends PluginPanel implements DropSpaceSystem<Notification>
{
	private static final ImageIcon ADD_ICON;
	private static final ImageIcon ADD_HOVER_ICON;

	private final AdvancedNotificationsPlugin plugin;

	private final JPanel notificationView;

	@Getter
	private Notification dragging;
	@Getter
	private DraggableContainer<Notification> draggingFrom;
	@Getter
	@Setter
	private DropSpace<Notification> dragHovering;

	@Getter
	private Condition draggingCondition;
	@Getter
	private DraggableContainer<Condition> draggingFromCondition;
	@Getter
	@Setter
	private DropSpace<Condition> dragHoveringCondition;

	private DropSpaceSystem<Condition> conditionSystem = new DropSpaceSystem<Condition>() {

		@Override
		public Condition getDragging() {
			return draggingCondition;
		}

		@Override
		public void setDragging(Condition c, DraggableContainer from) {
			draggingCondition = c;
			draggingFromCondition = from;
		}

		@Override
		public DraggableContainer getDraggingFrom() {
			return draggingFromCondition;
		}

		@Override
		public DropSpace getDragHovering() {
			return dragHoveringCondition;
		}

		@Override
		public void setDragHovering(DropSpace space) {
			dragHoveringCondition = space;
		}
	};

	static
	{
		final BufferedImage addIcon
			= ImageUtil.getResourceStreamFromClass(AdvancedNotificationsPlugin.class, "add_icon.png");
		ADD_ICON = new ImageIcon(addIcon);
		ADD_HOVER_ICON = new ImageIcon(ImageUtil.alphaOffset(addIcon, 0.53f));
	}

	public AdvancedNotificationsPluginPanel(AdvancedNotificationsPlugin plugin)
	{
		this.plugin = plugin;

		setLayout(new BorderLayout());
		setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

		JPanel northPanel = new JPanel(new BorderLayout());
		northPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 10, 0));

		JLabel title = new JLabel("Notifications");
		title.setForeground(Color.WHITE);

		JPopupMenu addPopup = new JPopupMenu();
		addPopup.add(new JMenuItem(new AbstractAction("Inventory")
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				plugin.getDraggableItems().add(new ItemNotification(plugin));
				plugin.updateConfig();
				rebuild();
			}
		}));
		addPopup.add(new JMenuItem(new AbstractAction("Empty Space")
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				plugin.getDraggableItems().add(new EmptyNotification(plugin));
				plugin.updateConfig();
				rebuild();
			}
		}));
		addPopup.add(new JMenuItem(new AbstractAction("Group")
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				plugin.getDraggableItems().add(new NotificationGroup(plugin));
				plugin.updateConfig();
				rebuild();
			}
		}));

		JLabel addNotification = new JLabel(ADD_ICON);
		addNotification.setToolTipText("Add a notification");
		addNotification.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(MouseEvent e)
			{
				addPopup.show(addNotification, e.getX(), e.getY());
			}

			@Override
			public void mouseEntered(MouseEvent e)
			{
				addNotification.setIcon(ADD_HOVER_ICON);
			}

			@Override
			public void mouseExited(MouseEvent e)
			{
				addNotification.setIcon(ADD_ICON);
			}
		});

		northPanel.add(title, BorderLayout.WEST);
		northPanel.add(addNotification, BorderLayout.EAST);

		notificationView = new JPanel();
		notificationView.setLayout(new BoxLayout(notificationView, BoxLayout.Y_AXIS));

		add(northPanel, BorderLayout.NORTH);
		add(notificationView, BorderLayout.CENTER);
	}

	public void rebuild()
	{
		notificationView.removeAll();

		int index = 0;
		notificationView.add(new DropSpace<>(this, plugin, index++));
		for (final Notification notif : plugin.getDraggableItems())
		{
			NotificationPanel<?> panel = NotificationPanel.buildPanel(notif, this, plugin, conditionSystem);
			if (panel != null)
			{
				notificationView.add(panel);
				notificationView.add(new DropSpace<>(this, plugin, index++));
			}
		}

		repaint();
		revalidate();

		for (Component n : notificationView.getComponents())
		{
			if (n instanceof NotificationGroupPanel) ((NotificationGroupPanel)n).resetScroll();
		}
	}

	@Override
	public void setDragging(Notification n, DraggableContainer<Notification> from) {
		dragging = n;
		draggingFrom = from;
	}
}

