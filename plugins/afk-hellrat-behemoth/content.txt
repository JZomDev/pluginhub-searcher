package com.afkhellratbehemoth;
// package net.runelite.client.plugins.afkhellratbehemoth;


import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AfkHellratBehemothPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AfkHellratBehemothPlugin.class);
		RuneLite.main(args);
	}
}
package com.afkhellratbehemoth;

import net.runelite.client.config.*;

@ConfigGroup("afkhellratbehemoth")
public interface AfkHellratBehemothConfig extends Config {
	@ConfigItem(
			keyName = "successthreshold",
			name = "Notify Below % Success",
			description = "Notify when the cat is less likely to win than the given percent",
			position = 1
	)
	// so even though this is in percent units, it still returns it as a whole number.
	// ex.: user input of 75 = 75.0 not 0.75
	@Units(Units.PERCENT)
	@Range(max = 100)
	default int getSuccessThreshold() { return 75; }


	@ConfigItem(
			keyName = "hpthreshold",
			name = "Hitpoints Threshold",
			description = "Notify when your cat is at or below a certain hitpoints threshold",
			position = 2
	)
	@Range(max = 14)
	default int getHitpointsThreshold() {
		return 2;
	}

	@ConfigItem(
			keyName = "notifykill",
			name = "Notify on Kill",
			description = "Notify when you kill a Hell-Rat Behemoth",
			position = 3
	)
	default boolean notifyOnKill()
	{
		return false;
	}

}
package com.afkhellratbehemoth;

import com.google.inject.Provides;
import javax.inject.Inject;
import java.text.NumberFormat;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.Notifier;
import net.runelite.api.NPC;
import net.runelite.api.Actor;
import net.runelite.client.ui.overlay.OverlayManager;


import java.util.Objects;


@Slf4j
@PluginDescriptor(
		name = "Afk Hell-Rat Behemoth",
		description = "Calculates % chance your cat will die when fighting Hell-Rat Behemoths, and notifies you when" +
				" it falls below a user-selected threshold.",
		tags = {"cat", "cats", "wily", "hellcat", "hell-cat", "behemoth", "hellrat", "hell-rat", "afk", "spicy", "stew",
				"stews", "rat"}
)
public class AfkHellratBehemothPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private AfkHellratBehemothConfig config;


	@Inject
	private Notifier notifier;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private AfkHellratBehemothOverlay overlay;

	double successRate = 1;
	String catName = "Not set";
	// these 2 vars are used to reset warnings, so it doesn't send a notification multiple times a second until
	//   the cat is healed
	public static Boolean cat_success_warning = false;
	public static Boolean cat_health_warning = false;
	// used to open/close overlay UI
	public static Boolean cat_in_combat = false;
	// used to detect changes in player orientation.  if you run away from the fight, it changes, UI closes/vars reset
	public static int playerOrientation = 0;

	public static Actor hellratActor;



	@Override
	protected void startUp()
	{
		overlayManager.add(overlay);
		// is this useful for anything?  assuming not really, commenting it out for now
		// log.info("Afk Hell-Rat Behemoth Plugin started!");

	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
		// is this useful for anything?  assuming not really, commenting it out for now
		// log.info("Afk Hell-Rat Behemoth Plugin started!");
	}


	@Subscribe
	public void onGameTick(GameTick tick) {
		if (cat_in_combat){
			NPC active_cat = client.getFollower();

			// Get max health and current health - I think their hp are low enough that rounding should always
			//   give the exact hp amount
			int cat_max_health = active_cat.getHealthScale();
			int cat_actual_health = active_cat.getHealthRatio();
			int rat_max_health = hellratActor.getHealthScale();
			int rat_actual_health = hellratActor.getHealthRatio();

			// if cat hasn't been attacked yet, its health is full, let's just treat it like that
			if (cat_max_health == -1) cat_max_health = 30;
			if (cat_actual_health == -1) cat_actual_health = 30;

			String cat_type = getCatType();

			double rat_ratio = (double) rat_actual_health / rat_max_health;
			double cat_ratio = (double) cat_actual_health / cat_max_health;

			long cat_hp;
			int cats_max_hitpoints;

			switch (cat_type) {
				case "Wily": {
					cats_max_hitpoints = 12;
					cat_hp = Math.round(cat_ratio * cats_max_hitpoints);
					break;
				}
				case "Overgrown": {
					cats_max_hitpoints = 10;
					cat_hp = Math.round(cat_ratio * cats_max_hitpoints);
					break;
				}
				case "Lazy": {
					cats_max_hitpoints = 14;
					cat_hp = Math.round(cat_ratio * cats_max_hitpoints);
					break;
				}
				case "Kitten": {
					cats_max_hitpoints = 4;
					cat_hp = Math.round(cat_ratio * cats_max_hitpoints);
					break;
				}
				default: {
					// normal cat
					cats_max_hitpoints = 6;
					cat_hp = Math.round(cat_ratio * cats_max_hitpoints);
				}

			}

			long rat_hp = Math.round(rat_ratio * 15);

			// notify if cat's health has fallen to or below user-inputted HP threshold
			final int hp_threshold = config.getHitpointsThreshold();
			if (cat_hp <= config.getHitpointsThreshold() && !(cat_health_warning)){
				if (hp_threshold > cats_max_hitpoints){
					// the user might not know off-hand what cats have what hp
					notifier.notify("Your cat can't reach the HP threshold you set!  Your current type of cat's max" +
							" HP is " + cats_max_hitpoints + ".");
				}
				else{
					notifier.notify("Cat's health has fallen to " + hp_threshold + "!");
				}
				cat_health_warning = true;
			}
			else if (cat_hp > hp_threshold){
				// cat is above acceptable HP threshold.  reset variable so we get pinged if it falls below again
				cat_health_warning = false;
			}

			double calculated_success_rate = getPercentSuccess(cat_type, cat_hp, rat_hp);

			// notify if cat's odds of winning have fallen below user-inputted threshold
			final double success_threshold = (double) config.getSuccessThreshold() / 100;
			if (calculated_success_rate < success_threshold && !(cat_success_warning)){

				// for robustness's sake in case someone sets the threshold to 99% or something dumb
				if (cat_actual_health != 30) {
					// success rate fell below success threshold to notify, and we haven't been notified about it yet
					NumberFormat percentageFormat = NumberFormat.getPercentInstance();
					percentageFormat.setMinimumFractionDigits(2);
					notifier.notify("Your cat's success rate has fallen to " + percentageFormat.format(calculated_success_rate) +
							"!  Heal your cat!");
					// wall object ID for curtain is 539.  will this highlight all 3 other curtains too?
					// might add in highlighting the curtain later, not now though
					cat_success_warning = true;

				}
			}
			else if (calculated_success_rate >= success_threshold){
				// cat is above acceptable success threshold.  reset variable so we get pinged if it falls below again
				cat_success_warning = false;
			}

		}
	}
	@Subscribe
	public void onAnimationChanged(AnimationChanged event){
		Actor actor = event.getActor();
		if (actor == client.getLocalPlayer()){
			/*
			this actually triggers at the beginning of the fight as you insert your cat (insert anim).
			this will prime our data to get the orientation at the start of the fight before the cat gets in combat.
			if at that point your character's animation changes, it will check for orientation.
			if you're not facing the same way (running/walking away), it will stop the UI/reset variables.
			as easy as it would be, you can't just trigger it to reset on any anim change, as apparently
			you can alch while watching your cat fight
			*/
			int oldPlayerOrientation = playerOrientation;
			playerOrientation = actor.getCurrentOrientation();
			if (playerOrientation != oldPlayerOrientation){
				// if our character orientation has changed, you're running away from the fight.
				// UI closes, warnings reset.
				cat_success_warning = false;
				cat_health_warning = false;
				cat_in_combat = false;
				return;
			}
		}
		if (!Objects.equals(actor.getName(), "Hell-Rat Behemoth")) return;
		if (actor.getAnimation() == 2705 || actor.getAnimation() == 2706){
			// the above are the animations for hell-rat attacking and defending.  2706 is def, 2705 is att
			// realistically, there's probably a way to make this even more accurate by determining cat/rat atk anims
			// and realizing who has the next attack.  but i think in its current state this is more than enough
			// cat atk/def anim = 315/316... confirmed for wily/kitten/overgrown/normal... should I call on those too?

			// as of 8/28/23 I'm changing the UI to trigger on every game tick instead of just atk/def anims
			// so if i were to change it to determine who has next atk etc., i would need to change it back
			// to updating UI/determining odds in this section
			cat_in_combat = true;
			hellratActor = actor;
		}
		else if (actor.getAnimation() == 2707){
			// Hell-rat dying anim
			// notify user if they want it to notify them
			final Boolean notifyonkill = config.notifyOnKill();
			if (notifyonkill) {
				notifier.notify("Your cat has successfully killed the Hell-Rat Behemoth!");
			}
			// reset warning vars
			cat_success_warning = false;
			cat_health_warning = false;
			// necessary to remove overlay from screen
			cat_in_combat = false;
		}

	}


	public double getPercentSuccess(String type, double cat_h, double rat_h)
	{
		/* yeah, alright, this is kind of messy. but I'd rather have this than have the plugin run a ton of
		simulations every time any hp change happens.  each one of these values represents 10M simulations,
		which is probably overkill, but if I'm calculating them in advance then why not.  so basically this data
		is the result of 6.9 billion (nice) combat simulations of cats/rats fighting to the death.  these simulations
		assume both the cat and rat attack at the same time, and if the cat dies at the same time the rat dies,
		it's a cat death (I don't know what actually happens/if that's even possible).
		source code for the simulations in case you want to double-check it (it's in Python):
		https://pastebin.com/GDr4HDjC
		example of the formatting for these:
		wily cat and rat both have max hp.  wily is 12hp, rat is 15 hp.
		we then pull the value from wily_probability, with wily_probability[cat_hp-1][rat_hp-1]
		so we will get wily_probability[11][14], which is 0.9427.  meaning if I don't feed my cat at all,
		it will survive and win the fight 94.27% of the time if wily cat hp is 12 and rat hp is 15.
		*/
		double [][] wily_probability = {
				{0.4949,0.3700,0.2140,0.1441,0.0886,0.0576,0.0361,0.0232,0.0147,0.0093,0.0059,0.0038,0.0024,0.0015,
						0.0010},
				{0.8724,0.7450,0.5634,0.4337,0.3141,0.2288,0.1620,0.1144,0.0795,0.0551,0.0378,0.0259,0.0176,0.0120,
						0.0080},
				{0.9677,0.9115,0.8116,0.7009,0.5791,0.4690,0.3692,0.2858,0.2167,0.1624,0.1203,0.0882,0.0640,0.0462,
						0.0331},
				{0.9918,0.9716,0.9281,0.8646,0.7806,0.6872,0.5887,0.4939,0.4049,0.3269,0.2595,0.2031,0.1569,0.1197,
						0.0908},
				{0.9979,0.9913,0.9744,0.9445,0.8985,0.8371,0.7634,0.6817,0.5965,0.5118,0.4323,0.3590,0.2936,0.2373,
						0.1889},
				{0.9995,0.9974,0.9914,0.9789,0.9567,0.9230,0.8771,0.8196,0.7527,0.6798,0.6037,0.5273,0.4539,0.3849,
						0.3221},
				{0.9999,0.9992,0.9972,0.9924,0.9827,0.9662,0.9411,0.9062,0.8615,0.8076,0.7466,0.6798,0.6102,0.5405,
						0.4718},
				{1.0000,0.9998,0.9991,0.9974,0.9935,0.9860,0.9735,0.9546,0.9279,0.8930,0.8499,0.7991,0.7420,0.6807,
						0.6162},
				{1.0000,0.9999,0.9997,0.9991,0.9976,0.9945,0.9888,0.9792,0.9648,0.9443,0.9170,0.8824,0.8408,0.7927,
						0.7394},
				{1.0000,1.0000,0.9999,0.9997,0.9992,0.9979,0.9955,0.9910,0.9837,0.9726,0.9568,0.9352,0.9076,0.8739,
						0.8337},
				{1.0000,1.0000,1.0000,0.9999,0.9997,0.9992,0.9982,0.9963,0.9928,0.9872,0.9785,0.9662,0.9494,0.9274,
						0.8999},
				{1.0000,1.0000,1.0000,1.0000,0.9999,0.9997,0.9993,0.9985,0.9970,0.9943,0.9898,0.9832,0.9736,0.9602,
						0.9427} };
		double [][] overgrown_probability = {
				{0.3192,0.1019,0.0326,0.0104,0.0033,0.0011,0.0003,0.0001,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,
						0.0000},
				{0.6631,0.3214,0.1377,0.0551,0.0212,0.0079,0.0029,0.0010,0.0004,0.0001,0.0000,0.0000,0.0000,0.0000,
						0.0000},
				{0.8332,0.5484,0.3030,0.1494,0.0685,0.0297,0.0123,0.0049,0.0020,0.0008,0.0003,0.0001,0.0000,0.0000,
						0.0000},
				{0.9175,0.7188,0.4811,0.2838,0.1522,0.0761,0.0360,0.0162,0.0071,0.0030,0.0012,0.0005,0.0002,0.0001,
						0.0000},
				{0.9590,0.8322,0.6373,0.4332,0.2664,0.1509,0.0800,0.0403,0.0193,0.0090,0.0041,0.0018,0.0008,0.0003,
						0.0001},
				{0.9796,0.9029,0.7583,0.5750,0.3958,0.2504,0.1476,0.0820,0.0432,0.0219,0.0107,0.0050,0.0023,0.0011,
						0.0004},
				{0.9900,0.9450,0.8446,0.6948,0.5246,0.3648,0.2362,0.1433,0.0824,0.0451,0.0238,0.0120,0.0059,0.0028,
						0.0013},
				{0.9950,0.9694,0.9030,0.7891,0.6405,0.4829,0.3386,0.2230,0.1386,0.0818,0.0462,0.0251,0.0132,0.0067,
						0.0033},
				{0.9975,0.9830,0.9409,0.8585,0.7378,0.5933,0.4467,0.3158,0.2107,0.1336,0.0806,0.0467,0.0262,0.0141,
						0.0074},
				{0.9988,0.9908,0.9646,0.9078,0.8146,0.6906,0.5519,0.4153,0.2955,0.1996,0.1285,0.0793,0.0468,0.0269,
						0.0148} };
		double [][] lazy_probability = {
				{0.3861,0.1493,0.0576,0.0222,0.0086,0.0033,0.0013,0.0005,0.0002,0.0001,0.0000,0.0000,0.0000,0.0000,
						0.0000},
				{0.7441,0.4256,0.2176,0.1049,0.0484,0.0219,0.0096,0.0042,0.0018,0.0008,0.0003,0.0001,0.0001,0.0000,
						0.0000},
				{0.8934,0.6690,0.4330,0.2538,0.1387,0.0722,0.0362,0.0176,0.0084,0.0039,0.0018,0.0008,0.0004,0.0002,
						0.0001},
				{0.9555,0.8237,0.6307,0.4346,0.2756,0.1639,0.0925,0.0501,0.0263,0.0134,0.0067,0.0033,0.0016,0.0007,
						0.0004},
				{0.9814,0.9107,0.7766,0.6050,0.4343,0.2901,0.1829,0.1099,0.0634,0.0353,0.0191,0.0101,0.0052,0.0026,
						0.0013},
				{0.9923,0.9560,0.8725,0.7424,0.5866,0.4335,0.3010,0.1981,0.1245,0.0753,0.0440,0.0249,0.0138,0.0074,
						0.0040},
				{0.9968,0.9790,0.9301,0.8404,0.7154,0.5725,0.4318,0.3085,0.2100,0.1369,0.0860,0.0522,0.0308,0.0177,
						0.0100},
				{0.9987,0.9901,0.9629,0.9051,0.8136,0.6936,0.5605,0.4303,0.3145,0.2198,0.1477,0.0959,0.0602,0.0366,
						0.0218},
				{0.9994,0.9954,0.9808,0.9458,0.8828,0.7902,0.6756,0.5506,0.4284,0.3188,0.2283,0.1573,0.1046,0.0675,
						0.0424},
				{0.9998,0.9979,0.9902,0.9700,0.9287,0.8620,0.7700,0.6599,0.5419,0.4270,0.3227,0.2354,0.1655,0.1126,
						0.0746},
				{0.9999,0.9990,0.9952,0.9837,0.9581,0.9122,0.8430,0.7524,0.6462,0.5343,0.4250,0.3256,0.2410,0.1726,
						0.1197},
				{1.0000,0.9996,0.9976,0.9913,0.9759,0.9458,0.8964,0.8258,0.7366,0.6346,0.5273,0.4231,0.3280,0.2458,
						0.1792},
				{1.0000,0.9998,0.9988,0.9955,0.9866,0.9675,0.9334,0.8815,0.8102,0.7226,0.6240,0.5210,0.4214,0.3299,
						0.2505},
				{1.0000,0.9999,0.9994,0.9977,0.9926,0.9810,0.9585,0.9215,0.8673,0.7956,0.7098,0.6140,0.5157,0.4196,
						0.3314} };
		double [][] kitten_probability = {
				{0.2790,0.0779,0.0218,0.0060,0.0017,0.0005,0.0001,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,
						0.0000},
				{0.5970,0.2554,0.0961,0.0337,0.0113,0.0037,0.0012,0.0004,0.0001,0.0000,0.0000,0.0000,0.0000,0.0000,
						0.0000},
				{0.7747,0.4554,0.2220,0.0963,0.0387,0.0147,0.0054,0.0019,0.0006,0.0002,0.0001,0.0000,0.0000,0.0000,
						0.0000},
				{0.8741,0.6238,0.3720,0.1935,0.0911,0.0398,0.0165,0.0065,0.0025,0.0009,0.0003,0.0001,0.0000,0.0000,
						0.0000} };
		double [][] cat_probability = {
				{0.3341,0.1117,0.0372,0.0124,0.0042,0.0014,0.0005,0.0002,0.0001,0.0000,0.0000,0.0000,0.0000,0.0000,
						0.0000},
				{0.6855,0.3465,0.1551,0.0649,0.0261,0.0102,0.0039,0.0015,0.0006,0.0002,0.0001,0.0000,0.0000,0.0000,
						0.0000},
				{0.8516,0.5809,0.3346,0.1725,0.0825,0.0375,0.0164,0.0069,0.0028,0.0011,0.0004,0.0002,0.0001,0.0000,
						0.0000},
				{0.9300,0.7503,0.5210,0.3204,0.1795,0.0937,0.0462,0.0218,0.0100,0.0044,0.0019,0.0008,0.0003,0.0001,
						0.0001},
				{0.9669,0.8573,0.6781,0.4789,0.3068,0.1816,0.1006,0.0529,0.0266,0.0129,0.0061,0.0028,0.0013,0.0005,
						0.0002},
				{0.9844,0.9212,0.7939,0.6226,0.4455,0.2941,0.1808,0.1049,0.0578,0.0305,0.0156,0.0077,0.0037,0.0017,
						0.0008} };


		switch (type) {
			case "Wily": {
				successRate = wily_probability[(int)cat_h-1][(int)rat_h-1];
				return successRate;
			}
			case "Overgrown": {
				successRate = overgrown_probability[(int)cat_h-1][(int)rat_h-1];
				return successRate;
			}
			case "Lazy": {
				successRate = lazy_probability[(int)cat_h-1][(int)rat_h-1];
				return successRate;
			}
			case "Kitten": {
				successRate = kitten_probability[(int)cat_h-1][(int)rat_h-1];
				return successRate;
			}
			default: {
				// normal cat
				successRate = cat_probability[(int)cat_h-1][(int)rat_h-1];
				return successRate;
			}

		}


	}

	public String getCatType() {
		// this is only ever called when the cat is actively fighting the hell-rat behemoth.
		//   so in other words, you should always have a follower and this shouldn't produce null pointer exceptions
		NPC active_cat = client.getFollower();
		String cat_full_name = active_cat.getName();
		cat_full_name = cat_full_name.toLowerCase();
		if (cat_full_name.contains("wily")) catName = "Wily";
		else if (cat_full_name.contains("overgrown")) catName = "Overgrown";
		else if (cat_full_name.contains("lazy")) catName = "Lazy";
		else if (cat_full_name.contains("kitten")) catName = "Kitten";
		else catName = "Normal Cat";
		return catName;
	}

	@Provides
	AfkHellratBehemothConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(AfkHellratBehemothConfig.class);
	}
}

package com.afkhellratbehemoth;

import net.runelite.api.Client;
import net.runelite.api.MenuAction;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.awt.*;
import java.awt.font.TextAttribute;
import java.text.NumberFormat;
import java.util.Collections;


public class AfkHellratBehemothOverlay extends OverlayPanel {
    private final Client client;
    private final AfkHellratBehemothPlugin plugin;
    private final AfkHellratBehemothConfig config;


    @Inject
    private AfkHellratBehemothOverlay(Client client, AfkHellratBehemothPlugin plugin,
                                      AfkHellratBehemothConfig config) {
        super(plugin);
        setPosition(OverlayPosition.BOTTOM_LEFT);
        this.client = client;
        this.plugin = plugin;
        this.config = config;
        getMenuEntries().add(new OverlayMenuEntry(MenuAction.RUNELITE_OVERLAY_CONFIG, OverlayManager.OPTION_CONFIGURE,
                "Afk Behemoth Hell-Rat Overlay"));
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (AfkHellratBehemothPlugin.cat_in_combat) {
            setPreferredSize(new Dimension(150, 88));

            LineComponent titleline = LineComponent.builder()
                            .leftFont(graphics.getFont().deriveFont(Collections.singletonMap(
                                    TextAttribute.WEIGHT, TextAttribute.WEIGHT_BOLD)))
                            .left("Cat's Success Rate")
                            .build();
            panelComponent.getChildren().add(titleline);

            // get cat type in advance since I want to  make fun of you if you're using a kitten
            String cat_panel_desc = plugin.catName;
            if (cat_panel_desc.equals("Kitten")) {
                cat_panel_desc += "... but why??";
                setPreferredSize(new Dimension(175, 88));
            }
            LineComponent cat_desc = LineComponent.builder()
                    .left("Cat Type:")
                    .right(cat_panel_desc)
                    .build();
            panelComponent.getChildren().add(cat_desc);

            // convert success rate to percent
            NumberFormat percentageFormat = NumberFormat.getPercentInstance();
            percentageFormat.setMinimumFractionDigits(2);
            String success_rate_string = percentageFormat.format(plugin.successRate);

            LineComponent success_rate_line = LineComponent.builder()
                    .left("Success Rate:")
                    .right(success_rate_string)
                    .build();
            panelComponent.getChildren().add(success_rate_line);
        }
        return super.render(graphics);
    }
}

