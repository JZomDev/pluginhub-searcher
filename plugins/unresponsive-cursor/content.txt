package bluelightzero;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class UnresponsiveCursorTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(UnresponsiveCursorPlugin.class);
		RuneLite.main(args);
	}
}
package bluelightzero;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.ClientTick;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.WorldService;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientUI;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ExecutorServiceExceptionLogger;
import net.runelite.http.api.worlds.World;
import net.runelite.http.api.worlds.WorldResult;

import java.awt.*;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.util.Date;
import java.util.LinkedList;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;

@Slf4j
@PluginDescriptor(
	name = "Unresponsive Cursor"
)
public class UnresponsiveCursorPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClientUI clientUI;

	@Inject
	private WorldService worldService;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private InfoOverlay infoOverlay;

	private static final int TICK_TIME = 600;
	private static final int PING_SLOW_INTERVAL = 6000;
	private static final int PING_FAST_INTERVAL = 200;

	private boolean wasLagging = false;
	private Cursor replacedCursor = null;
	private long lastTickTime;

	private ScheduledExecutorService scheduledExecutorService;
	private static final int TIMEOUT = 1000;
	private static final int PORT = 43594;
	private long lastPingTime;
	private final LinkedList<Long> recentPings = new LinkedList<>();
	private long lastPongTime;
	private long lastPingLatency;

	@Inject
	private UnresponsiveCursorConfig config;

	@Override
	protected void startUp() throws Exception
	{
		scheduledExecutorService = new ExecutorServiceExceptionLogger(Executors.newSingleThreadScheduledExecutor());
		overlayManager.add(infoOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		scheduledExecutorService.shutdown();
		scheduledExecutorService = null;
		overlayManager.remove(infoOverlay);

		if(wasLagging) {
			wasLagging = false;
			clientUI.resetCursor();
		}
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if(gameStateChanged.getGameState() == GameState.LOGIN_SCREEN) {
			if(wasLagging) {
				wasLagging = false;
				clientUI.resetCursor();
			}
		}
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		lastTickTime = new Date().getTime();
	}

	private void pingCurrentWorld() {
		try {
			WorldResult worldResult = worldService.getWorlds();
			if (worldResult == null || client.getGameState() != GameState.LOGGED_IN) {
				return;
			}

			final World currentWorld = worldResult.findWorld(client.getWorld());
			if (currentWorld == null) {
				return;
			}

			String address = currentWorld.getAddress();

			Socket socket = new Socket();
			InetAddress inetAddress = InetAddress.getByName(address);
			long before = new Date().getTime();
			socket.connect(new InetSocketAddress(inetAddress, PORT), TIMEOUT);
			long after = new Date().getTime();
			lastPongTime = after;
			lastPingLatency = after - before;
		} catch (IOException exception) {
		}
	}

	private boolean hasBeenRecentPing() {
		long now = new Date().getTime();
		for (Long pingTime : recentPings) {
			long timeSinceRecentPing = now-pingTime;
			if(timeSinceRecentPing < PING_SLOW_INTERVAL && timeSinceRecentPing > lastPingLatency) {
				return true;
			}
		}
		return false;
	}

	@Subscribe
	public void onClientTick(ClientTick tick) {
		long now = new Date().getTime();

		long timeSinceLastTick = now-lastTickTime;

		boolean isLagging = timeSinceLastTick > (600 + config.lagThreshold());

		if(config.enableText()) {
			if (isLagging && hasBeenRecentPing()) {
				long timeSincePong = now - lastPongTime;
				if (timeSincePong > PING_FAST_INTERVAL + lastPingLatency) {
					infoOverlay.setText(config.connectionLostText());
					infoOverlay.setColor(config.connectionLostTextColor());
				} else {
					infoOverlay.setText(config.serverLagText());
					infoOverlay.setColor(config.serverLagTextColor());
				}
			} else {
				infoOverlay.clearText();
			}
		} else {
			infoOverlay.clearText();
		}

		boolean isDefaultCursor = (clientUI.getCurrentCursor().getType() == Cursor.DEFAULT_CURSOR);
		boolean isCustomCursor = (clientUI.getCurrentCursor().getType() == Cursor.CUSTOM_CURSOR);

		if(isLagging && !wasLagging) {
			if(isDefaultCursor) {
				replacedCursor = null;
				clientUI.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
				wasLagging = true;
			} else if(isCustomCursor) {
				replacedCursor = clientUI.getCurrentCursor();
				clientUI.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
				wasLagging = true;
			}
		} else if(!isLagging && wasLagging) {
			if(replacedCursor != null) {
				clientUI.setCursor(replacedCursor);
			} else {
				clientUI.resetCursor();
			}
			wasLagging = false;
		}

		long timeSincePing = now-lastPingTime;
		if(isLagging) {
			if(timeSincePing > PING_FAST_INTERVAL) {
				scheduledExecutorService.execute(this::pingCurrentWorld);
				lastPingTime = now;
				recentPings.add(now);
			}
		} else {
			if(timeSincePing > PING_SLOW_INTERVAL) {
				scheduledExecutorService.execute(this::pingCurrentWorld);
				lastPingTime = now;
				recentPings.add(now);
			}
		}

		if(recentPings.size() > 10) {
			recentPings.remove();
		}
	}

	@Provides
    UnresponsiveCursorConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(UnresponsiveCursorConfig.class);
	}
}

package bluelightzero;

import com.google.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.client.ui.overlay.*;

import java.awt.*;

public class InfoOverlay extends Overlay {

    private final Client client;
    private final UnresponsiveCursorPlugin plugin;
    private final UnresponsiveCursorConfig config;

    private String text = "";
    private Color color;

    @Inject
    private InfoOverlay(Client client, UnresponsiveCursorPlugin plugin, UnresponsiveCursorConfig config)
    {
        this.client = client;
        this.plugin = plugin;
        this.config = config;
        setLayer(OverlayLayer.ALWAYS_ON_TOP);
        setPriority(OverlayPriority.HIGH);
        setPosition(OverlayPosition.TOOLTIP);
    }

    public void clearText() {
        this.text = "";
    }

    public void setText(String text) {
        this.text = text;
    }

    public void setColor(Color color) {
        this.color = color;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if(!text.isEmpty()) {
            final int textWidth = graphics.getFontMetrics().stringWidth(text);
            final int textHeight = graphics.getFontMetrics().getAscent() - graphics.getFontMetrics().getDescent();

            final Point mousePosition = client.getMouseCanvasPosition();
            final Point textPosition = new Point(mousePosition.getX() + 16, mousePosition.getY() + textHeight / 2);
            OverlayUtil.renderTextLocation(graphics, textPosition, text, color);
        }

        return null;
    }
}

package bluelightzero;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("example")
public interface UnresponsiveCursorConfig extends Config {
	@ConfigSection(
			name = "Server Freeze Style",
			description = "Settings for when the server freezes. (This is when things stop for everyone.)",
			position = 3
	)
	String serverFreezeSection = "Server Freeze Style";

	@ConfigSection(
			name = "Connection Lost Style",
			description = "Settings for when you lose connection. (This is when things stop for you, but then catch up afterwards.)",
			position = 5
	)
	String connectionLostSection = "Connection Lost Style";

	@Range(
			min = 0
	)
	@ConfigItem(
			keyName = "delay",
			name = "Delay (ms)",
			description = "How long to wait after lag before changing cursor in milliseconds. Low values may cause cursor to flicker.",
			position = 1
	)
	default int lagThreshold() { return 100; }

	@ConfigItem(
			keyName = "enableText",
			name = "Enable Text",
			description = "When turned on shows cause of lag as text next to cursor.",
			position = 2
	)
	default boolean enableText() { return true; }

	@ConfigItem(
			keyName = "serverLagText",
			name = "Text",
			description = "The text to use when server freezes. (This is when things stop for everyone.)",
			position = 3,
			section = serverFreezeSection
	)
	default String serverLagText() { return "Server Freeze!"; }

	@ConfigItem(
			keyName = "serverLagTextColor",
			name = "Text Color",
			description = "The text color to use when server freezes. (This is when things stop for everyone.)",
			position = 4,
			section = serverFreezeSection
	)
	default Color serverLagTextColor() { return new Color(255, 141, 60); }

	@ConfigItem(
			keyName = "connectionLostText",
			name = "Text",
			description = "The text to use when you lose connection. (This is when things stop for you, but then catch up afterwards.)",
			position = 5,
			section = connectionLostSection
	)
	default String connectionLostText() { return "Connection Lost!"; }

	@ConfigItem(
			keyName = "connectionLostTextColor",
			name = "Text Color",
			description = "The text color to use when you lose connection. (This is when things stop for you, but then catch up afterwards.)",
			position = 6,
			section = connectionLostSection
	)
	default Color connectionLostTextColor() { return new Color(255, 57, 57); }

}
package bluelightzero;

public enum CursorType {
    DEFAULT,
    WAITING,
}

