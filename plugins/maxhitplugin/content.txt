package com.maxhit;

import com.maxhit.styles.CombatStyle;
import net.runelite.client.plugins.Plugin;

public class InventoryWeapon extends Plugin
{
	String name;
	CombatStyle weaponCombatStyle;
	boolean isTwoHanded = false;
	int ID = -1;
	int strBonus = 0;
	double maxHitBase;
	double maxHitSpec;
}

package com.maxhit.calculators;

import com.google.common.collect.ImmutableSet;
import com.maxhit.MagicSpell;
import com.maxhit.Spellbook;
import com.maxhit.equipment.EquipmentFunctions;
import com.maxhit.equipment.GodCape;
import com.maxhit.equipment.PoweredStaff;
import com.maxhit.equipment.VirtusPieces;
import com.maxhit.monsters.MonsterWeaknesses;
import static com.maxhit.regions.TombsRegions.TOA_ROOM_IDS;
import com.maxhit.styles.AttackStyle;
import java.util.Arrays;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.Skill;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.gameval.ItemID;
import net.runelite.api.gameval.VarPlayerID;
import net.runelite.api.gameval.VarbitID;
import net.runelite.client.game.ItemManager;
import lombok.extern.slf4j.Slf4j;
import java.util.Set;
import net.runelite.client.game.ItemVariationMapping;

@Slf4j
public class MagicMaxHitCalculator extends MaxHitCalculator
{
	private static final Set<Integer> GOD_SPELLS = ImmutableSet.of(
		MagicSpell.FLAMES_OF_ZAMORAK.getVarbValue(),
		MagicSpell.SARADOMIN_STRIKE.getVarbValue(),
		MagicSpell.CLAWS_OF_GUTHIX.getVarbValue());
	private static final Set<Integer> BOLT_SPELLS = ImmutableSet.of(
		MagicSpell.WIND_BOLT.getVarbValue(),
		MagicSpell.WATER_BOLT.getVarbValue(),
		MagicSpell.EARTH_BOLT.getVarbValue(),
		MagicSpell.FIRE_BOLT.getVarbValue());
	private static final Set<Integer> SMOKE_BATTLESTAVES = new ImmutableSet.Builder<Integer>()
		.addAll(ItemVariationMapping.getVariations(ItemID.SMOKE_BATTLESTAFF)).build();

	private static final Set<Integer> TUMEKEN_SHADOWS = ImmutableSet.of(
		ItemID.TUMEKENS_SHADOW,
		ItemID.TUMEKENS_SHADOW_UNCHARGED
	);

	MagicSpell activeSpell = null;
	private double baseSpellDamage;
	private double baseDamageModifier;
	private double primaryMagicDamage;
	private double preHitRoll;
	private double shadowBonus;
	private double salveBonus;
	private double avariceBonus;
	private double smokeBattlestaffBonus;
	private double virtusBonus;
	private double prayerBonus;
	private double elementalWeakness;
	private double slayerBonus;
	private double sceptreBonus;
	private double accursedSceptreSpecialAttackBonus;
	private double tomeBonus;
	private double markOfDarknessBonus;
	private double ahrimsDamnedBonus;
	//Ignore castle wars bracelet for now

	protected MagicMaxHitCalculator(Client client, ItemManager itemManager, AttackStyle attackStyle)
	{
		super(client, itemManager, Skill.MAGIC, attackStyle);
		reset();
	}

	protected void reset()
	{
		voidBonus = 0.0;
		baseSpellDamage = 0.0;
		baseDamageModifier = 0.0;
		primaryMagicDamage = 0.0;
		shadowBonus = 1.0;
		salveBonus = 0.0;
		avariceBonus = 0.0;
		smokeBattlestaffBonus = 0.0;
		virtusBonus = 0.0;
		prayerBonus = 0.0;
		elementalWeakness = 0.0;
		slayerBonus = 0.0;
		sceptreBonus = 0.0;
		accursedSceptreSpecialAttackBonus = 0.0;
		tomeBonus = 0.0;
		markOfDarknessBonus = 0.0;
		ahrimsDamnedBonus = 0.0;
	}

	@Override
	protected void getEffectiveStrength()
	{
	}

	@Override
	protected void getStyleBonus()
	{
	}

	private boolean chaosGauntletsEquipped()
	{
		return EquipmentFunctions.HasEquipped(equippedItems, EquipmentInventorySlot.GLOVES, ItemID.GAUNTLETS_OF_CHAOS);
	}

	private boolean matchingGodCapeEquipped()
	{
		for (GodCape cape : GodCape.values())
		{
			if (cape.isEquipped(equippedItems) && activeSpell.getVarbValue() == cape.getSpellId())
			{
				return true;
			}
		}
		return false;
	}

	private void getSpellBaseMaxDamage()
	{

		// Powered Staves
		for (PoweredStaff staff : PoweredStaff.values())
		{
			for (int itemId : staff.getVarients())
			{
				if (EquipmentFunctions.HasEquipped(equippedItems, EquipmentInventorySlot.WEAPON, itemId))
				{
					baseSpellDamage = staff.getBaseMaxHit(getSkillLevel());
					return;
				}
			}

		}

		int activeSpellVarbit = client.getVarbitValue(VarbitID.AUTOCAST_SPELL);
		// Spellbook Spells
		for (MagicSpell spell : MagicSpell.values())
		{
			if (activeSpellVarbit != spell.getVarbValue())
			{
				continue;
			}
			activeSpell = spell;
			baseSpellDamage = activeSpell.getBaseMaxHit(client);
		}
	}

	private void getBaseDamageModifier()
	{
		getSpellBaseMaxDamage();
		int activeSpellVarbit = client.getVarbitValue(VarbitID.AUTOCAST_SPELL);
		baseDamageModifier = baseSpellDamage;

		// Check for Chaos Gauntlets with bolt spells
		if (BOLT_SPELLS.contains(activeSpellVarbit))
		{
			if (chaosGauntletsEquipped())
			{
				baseDamageModifier += 3;
				return;
			}
		}

		// Check if a god spell is active
		if (!GOD_SPELLS.contains(activeSpellVarbit))
		{
			return;
		}
		// Check if a matching cape is equipped
		if (!matchingGodCapeEquipped())
		{
			return;
		}
		// Check if charge is active
		if (client.getVarbitValue(VarPlayerID.MAGEARENA_CHARGE) == 0)
		{
			return;
		}
		baseDamageModifier += 10;
	}

	private void getShadowBonus()
	{
		boolean shadowEquipped = false;
		// Check if Shadow equipped
		for (int staffId : TUMEKEN_SHADOWS)
		{
			if (EquipmentFunctions.HasEquipped(equippedItems, EquipmentInventorySlot.WEAPON, staffId))
			{
				shadowEquipped = true;
			}
		}

		if (!shadowEquipped)
		{
			return;
		}

		int region = WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation()).getRegionID();
		boolean toaInside = TOA_ROOM_IDS.contains(region);
		if (toaInside)
		{
			shadowBonus = 4.0;
		}
		else
		{
			shadowBonus = 3.0;
		}
	}

	private void getAvariceBonus()
	{
		if (!EquipmentFunctions.GetEquippedItemString(client, equippedItems, EquipmentInventorySlot.AMULET).contains(("Avarice")))
		{
			return;
		}
		NPC npc = (NPC) opponent;
		if (npc == null)
		{
			return;
		}
		String npcName = npc.getName();
		if (npcName == null)
		{
			return;
		}
		if (!npc.getName().contains("Revenant"))
		{
			return;
		}
		if (client.getVarbitValue(VarPlayerID.REVENANT_REWARD_TIME_REMAINING) > 0)
		{
			avariceBonus = 0.35;
			return;
		}
		avariceBonus = 0.2;
	}

	private void getSmokeBattlestaffBonus()
	{
		if (!Spellbook.STANDARD.isActive(client))
		{
			return;
		}

		for (int battlestaffId : SMOKE_BATTLESTAVES)
		{
			if (EquipmentFunctions.HasEquipped(equippedItems, EquipmentInventorySlot.WEAPON, battlestaffId))
			{
				smokeBattlestaffBonus = 0.1;
				return;
			}
		}
	}

	private void getVirtusBonus()
	{
		if (!Spellbook.ANCIENT.isActive(client))
		{
			virtusBonus = 0.0;
			return;
		}
		// Count how many pieces are equipped and multiply by the bonus per piece.
		long piecesEquipped = Arrays.stream(VirtusPieces.values())
			.filter(piece -> piece.isEquipped(equippedItems))
			.count();
		virtusBonus = piecesEquipped * 0.02;
	}

	private void getElementalWeakness()
	{
		for (MonsterWeaknesses monster : MonsterWeaknesses.values())
		{
			if (monster.hasWeakness(opponent, activeSpell))
			{
				elementalWeakness += monster.getSeverity();
				return;
			}

		}
	}


	private void getPrimaryMagicDamage()
	{
		getStrengthBonus(); // I.E. visible bonuses
		getShadowBonus();
		getVoidBonus();
		getSalveBonus();
		getAvariceBonus();
		getSmokeBattlestaffBonus();
		getVirtusBonus();
		getPrayerBonus();
		getElementalWeakness();
		double tempBonuses = (strengthBonus - voidBonus) * shadowBonus;
		tempBonuses = Math.min(1.0, tempBonuses);
		double totalBonus = voidBonus + salveBonus + avariceBonus + smokeBattlestaffBonus + virtusBonus + prayerBonus;
		double elementalWeaknessAddition = Math.floor(baseDamageModifier * elementalWeakness);
		primaryMagicDamage = Math.floor(baseDamageModifier * (1 + tempBonuses + totalBonus) + elementalWeaknessAddition);
	}

	private void getPreHitRoll()
	{

		//TODO: Add slayer, sceptre, and tome bonus
		double totalSlayerBonus = 1.0 + slayerBonus;
		double totalSceptreBonus = 1.0 + sceptreBonus;
		double totalAccursedBonus = 1.0 + accursedSceptreSpecialAttackBonus;
		double totalTomeBonus = 1.0 + tomeBonus;

		double firstFloorCalculation = Math.floor(primaryMagicDamage * totalSlayerBonus);
		double secondFloorCalculation = Math.floor(firstFloorCalculation * totalSceptreBonus);
		double thirdfFloorCalculation = Math.floor(secondFloorCalculation * totalAccursedBonus);
		preHitRoll = Math.floor(thirdfFloorCalculation * totalTomeBonus);
	}

	@Override
	public void calculateMaxHit()
	{
		reset();
		// Base Damage Modifier
		getBaseDamageModifier();
		// Primary Magic Damage
		getPrimaryMagicDamage();
		// Pre Hit Roll == Hit Roll
		// Don't need to use the hit roll step on the wiki since we're just calculating max hit
		getPreHitRoll();
		double firstFloorCalculation = Math.floor(preHitRoll * (1 + markOfDarknessBonus));
		// Skip castle wars bonus
		// Final Post Hit Roll
		maxHit = Math.floor(firstFloorCalculation * (1 + ahrimsDamnedBonus));
	}

	@Override
	public void calculateNextMaxHitRequirements()
	{
		//TODO: Implement
	}
}
package com.maxhit.calculators;

import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.Skill;
import net.runelite.client.game.ItemEquipmentStats;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.ItemStats;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class StrengthBonusCalculator
{

	public static float getStrengthBonus(ItemContainer equippedItems, ItemManager itemManager, Skill skill)
	{
		float strengthBonus = 0.0f;
		if (equippedItems == null)
		{
			return strengthBonus;
		}
		//get str bonus of worn equipment
		for (EquipmentInventorySlot slot : EquipmentInventorySlot.values())
		{
			// Have to convert enum to int i.e. use ordinal
			Item item = equippedItems.getItem(slot.getSlotIdx());
			if (item == null)
			{
				continue;
			}
			int itemId = item.getId();
			final ItemStats itemStats = itemManager.getItemStats(itemId);
			if (itemStats == null)
			{
				continue;
			}
			final ItemEquipmentStats itemEquipmentStats = itemStats.getEquipment();
			strengthBonus += getItemStrength(skill, itemEquipmentStats);
		}
		return strengthBonus;
	}

	private static float getItemStrength(Skill skill, ItemEquipmentStats itemEquipmentStats)
	{
		if (skill == Skill.STRENGTH)
			return (float) itemEquipmentStats.getStr();
		if (skill == Skill.RANGED)
			return (float) itemEquipmentStats.getRstr();
		return itemEquipmentStats.getMdmg();
	}
}

package com.maxhit.calculators;

import com.maxhit.NextMaxHitReqs;
import com.maxhit.equipment.EquipmentFunctions;
import com.maxhit.sets.FullObsidianSet;
import com.maxhit.sets.InquisitorSet;
import com.maxhit.styles.AttackStyle;
import java.util.Collection;
import lombok.extern.slf4j.Slf4j;
import com.maxhit.sets.DharokSet;
import com.maxhit.sets.ObsidianSet;
import net.runelite.api.Client;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.Skill;
import net.runelite.api.gameval.ItemID;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.ItemVariationMapping;

@Slf4j
public class MeleeMaxHitCalculator extends MaxHitCalculator
{
	private final Collection<Integer> FANGS = ItemVariationMapping.getVariations(ItemID.OSMUMTENS_FANG);
	private final DharokSet dharokSetChecker;
	private final ObsidianSet obsidianSetChecker;
	private final FullObsidianSet fullObsidianSetChecker;
	private double baseDamage;
	private double specialBonus;

	protected MeleeMaxHitCalculator(Client client, ItemManager itemManager, AttackStyle attackStyle)
	{
		super(client, itemManager, Skill.STRENGTH, attackStyle);
		dharokSetChecker = new DharokSet(client);
		obsidianSetChecker = new ObsidianSet(client);
		fullObsidianSetChecker = new FullObsidianSet(client);
		reset();
	}

	@Override
	protected void reset()
	{
		super.reset();
		baseDamage = 0.0;
		specialBonus = 1.0;
	}

	@Override
	protected void getStyleBonus()
	{
		if (attackStyle == AttackStyle.AGGRESSIVE) {styleBonus = 3.0;}
		if (attackStyle == AttackStyle.CONTROLLED) {styleBonus = 1.0;}
	}

	private void getBaseDamage()
	{
		getEffectiveStrength();
		getStrengthBonus();
		double bonusMultiplier = (strengthBonus + 64.0) / 640.0;
		baseDamage = Math.floor(0.5 + (effectiveStrength * bonusMultiplier));
	}

	private void getSpecialBonus()
	{
		//Melee sets
		// Excludes special attacks
		if (dharokSetChecker.isWearingSet())
		{
			specialBonus = dharokSetChecker.getMultiplier();
		}

		if (obsidianSetChecker.isWearingSet())
		{
			specialBonus += obsidianSetChecker.getMultiplier();
		}
		if (fullObsidianSetChecker.isWearingSet())
		{
			specialBonus += fullObsidianSetChecker.getMultiplier();
		}
		//TODO update logic to detect just amulet
		if (obsidianSetChecker.isWearingSet())
		{
			specialBonus += 0.1;
		}
		getSalveBonus();

		specialBonus += InquisitorSet.getMultiplier(client, equippedItems);

		specialBonus += salveBonus;
	}

	//TODO add support for Keris/Keris Partisan vs Kalphites

	@Override
	public void calculateMaxHit()
	{
		reset();
		getSpecialBonus();
		getBaseDamage();
		maxHit = Math.floor(baseDamage * specialBonus);

		// The Fang calculation is a bit different. Confirmed in-game
		for(int itemId : FANGS)
		{
			if (EquipmentFunctions.HasEquipped(equippedItems, EquipmentInventorySlot.WEAPON, itemId))
			{
				double fangShrink = Math.floor(maxHit * 3.0 / 20.0);
				maxHit -= fangShrink;
				break;
			}
		}
		calculateNextMaxHitRequirements();
	}

	@Override
	protected void calculateNextMaxHitRequirements()
	{
		final double nextMaxHit = maxHit + 1.0;
		double nextBaseDamage = nextMaxHit / specialBonus;

		// Calculate needed strength bonus
		final double requiredStrengthBonus = ((nextBaseDamage - 0.5) * 640 / effectiveStrength) - 64;
		final double requiredEffectiveStrength = ((nextBaseDamage - 0.5) * 640) / (strengthBonus + 64);
		final double requiredLevel = (Math.ceil((Math.ceil(requiredEffectiveStrength) / voidBonus) - styleBonus - 8.0))  / prayerBonus;
		final double requiredPrayer = (Math.ceil((Math.ceil(requiredEffectiveStrength) / voidBonus) - styleBonus - 8.0)) / getSkillLevel();

		final double levelDiff = Math.ceil(requiredLevel - getSkillLevel());
		final double strengthBonusDiff = Math.ceil(requiredStrengthBonus - strengthBonus);
		final double prayerDiff = Math.ceil((requiredPrayer - prayerBonus) * 100.0);

		nextMaxHitReqs = new NextMaxHitReqs(skill, levelDiff, strengthBonusDiff, prayerDiff);
	}
}

package com.maxhit.calculators;

import com.maxhit.NextMaxHitReqs;
import com.maxhit.PrayerType;
import com.maxhit.styles.AttackStyle;
import com.maxhit.styles.CombatStyle;
import java.util.Collection;
import java.util.Map;
import net.runelite.api.Client;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.Item;
import net.runelite.api.Skill;
import net.runelite.api.gameval.ItemID;
import net.runelite.api.gameval.VarPlayerID;
import net.runelite.client.game.ItemManager;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.game.ItemVariationMapping;

@Slf4j
public class RangedMaxHitCalculator extends MaxHitCalculator
{
	private double baseDamage;
	private double gearBonus;
	private double specialBonus;

	protected RangedMaxHitCalculator(Client client, ItemManager itemManager, AttackStyle attackStyle)
	{
		super(client, itemManager, Skill.RANGED, attackStyle);
		reset();
	}

	@Override
	protected void reset()
	{
		super.reset();
		baseDamage = 0.0;
		gearBonus = 1.0;
		specialBonus = 1.0;
	}

	@Override
	protected void getStyleBonus()
	{
		// Have to use different method since ATTACK style is just equal to RANGED
		if (client.getVarpValue(VarPlayerID.COM_MODE) == AttackStyle.ACCURATE.ordinal())
		{
			styleBonus = 3.0;
		}
	}


	private void getGearBonus()
	{
		getSalveBonus();
		gearBonus += salveBonus;
		//TODO Add support for slayer, Craw's bow, and Twisted bow
	}

	private void getBaseHit()
	{
		getEffectiveStrength();
		getStrengthBonus();
		getGearBonus();
		double strengthCalculation = (effectiveStrength * (strengthBonus + 64)) / 640.0;
		double firstFloorCalculation = Math.floor(0.5 + strengthCalculation);
		baseDamage = Math.floor(firstFloorCalculation * gearBonus);
	}

	private void getSpecialBonus()
	{
		Item weaponItem = equippedItems.getItem(EquipmentInventorySlot.WEAPON.getSlotIdx());
		if (weaponItem == null)
		{
			return;
		}

		if (!ItemVariationMapping.getVariations(ItemID.BOW_OF_FAERDHINEN).contains(weaponItem.getId()))
		{
			return;
		}

		Item headSlotItem = equippedItems.getItem(EquipmentInventorySlot.HEAD.getSlotIdx());
		if (headSlotItem != null && ItemVariationMapping.getVariations(ItemID.CRYSTAL_HELMET).contains(headSlotItem.getId()))
		{
			specialBonus += 0.025;
		}

		Item bodySlotItem = equippedItems.getItem(EquipmentInventorySlot.BODY.getSlotIdx());
		if (bodySlotItem != null && ItemVariationMapping.getVariations(ItemID.CRYSTAL_CHESTPLATE).contains(bodySlotItem.getId()))
		{
			specialBonus += 0.075;
		}

		Item legsSlotItem = equippedItems.getItem(EquipmentInventorySlot.LEGS.getSlotIdx());
		if (bodySlotItem != null && ItemVariationMapping.getVariations(ItemID.CRYSTAL_PLATELEGS).contains(legsSlotItem.getId()))
		{
			specialBonus += 0.05;
		}
	}

	@Override
	public void calculateMaxHit()
	{
		reset();
		getBaseHit();
		getSpecialBonus();
		//TODO add support for special attack
		maxHit = Math.floor(baseDamage * specialBonus);
		calculateNextMaxHitRequirements();
	}

	@Override
	protected void calculateNextMaxHitRequirements()
	{
		final double nextMaxHit = maxHit + 1.0;
		double nextBaseDamage = nextMaxHit / specialBonus;

		// Calculate needed strength bonus
		final double requiredStrengthBonus = ((nextBaseDamage - 0.5) * 640 / effectiveStrength) - 64;
		final double requiredEffectiveStrength = ((nextBaseDamage - 0.5) * 640) / (strengthBonus + 64);
		final double requiredLevel = (Math.ceil((Math.ceil(requiredEffectiveStrength) / voidBonus) - styleBonus - 8.0))  / prayerBonus;
		final double requiredPrayer = (Math.ceil((Math.ceil(requiredEffectiveStrength) / voidBonus) - styleBonus - 8.0)) / getSkillLevel();

		final double levelDiff = Math.ceil(requiredLevel - getSkillLevel());
		final double strengthBonusDiff = Math.ceil(requiredStrengthBonus - strengthBonus);
		final double prayerDiff = Math.ceil((requiredPrayer - prayerBonus) * 100.0);

		nextMaxHitReqs = new NextMaxHitReqs(skill, levelDiff, strengthBonusDiff, prayerDiff);
	}
}

package com.maxhit.calculators;

import com.maxhit.styles.AttackStyle;
import com.maxhit.styles.CombatStyle;
import net.runelite.api.Client;
import net.runelite.client.game.ItemManager;

public class MaxHitCalculatorFactory
{
    private final Client client;
    private final ItemManager itemManager;

    public MaxHitCalculatorFactory(Client client, ItemManager itemManager)
    {
        this.client = client;
        this.itemManager = itemManager;
    }
    public MaxHitCalculator create(CombatStyle combatStyle, AttackStyle attackStyle)
    {
        if (combatStyle == CombatStyle.MELEE)
            return new MeleeMaxHitCalculator(this.client, this.itemManager, attackStyle);
        if (combatStyle == CombatStyle.RANGED)
            return new RangedMaxHitCalculator(this.client, this.itemManager, attackStyle);
        if (combatStyle == CombatStyle.MAGE)
            return new MagicMaxHitCalculator(this.client, this.itemManager, attackStyle);
        return  null;
    }
}

package com.maxhit.calculators;

import com.maxhit.PrayerType;
import com.maxhit.equipment.SalveAmulet;
import com.maxhit.monsters.UndeadMonsters;
import com.maxhit.sets.EliteVoidSet;
import com.maxhit.sets.VoidSet;
import java.util.Map;
import net.runelite.api.Actor;
import net.runelite.api.Client;
import net.runelite.api.ItemContainer;
import net.runelite.api.NPC;
import net.runelite.api.Skill;

public class BonusCalculator
{
	private static final Map<PrayerType, Double> STRENGTH_PRAYERS = Map.of(
		PrayerType.PIETY, 1.23,
		PrayerType.CHIVALRY, 1.18,
		PrayerType.ULTIMATE_STRENGTH, 1.15,
		PrayerType.SUPERHUMAN_STRENGTH, 1.1,
		PrayerType.BURST_OF_STRENGTH, 1.05
	);

	private static final Map<PrayerType, Double> RANGED_PRAYERS = Map.of(
		PrayerType.RIGOUR, 1.23,
		PrayerType.DEADEYE, 1.18,
		PrayerType.EAGLE_EYE, 1.15,
		PrayerType.HAWK_EYE, 1.1,
		PrayerType.SHARP_EYE, 1.05
	);
	private static final Map<PrayerType, Double> MAGIC_PRAYERS = Map.of(
		PrayerType.AUGURY, 0.04,
		PrayerType.MYSTIC_VIGOUR, 0.03,
		PrayerType.MYSTIC_MIGHT, 0.02,
		PrayerType.MYSTIC_LORE, 0.01
	);

	private final VoidSet voidSet;
	private final EliteVoidSet eliteVoidSet;
	private final Client client;
	private final Skill skill;

	public BonusCalculator(Client client, Skill skill)
	{
		this.client = client;
		this.skill = skill;
		voidSet = new VoidSet(client, skill);
		eliteVoidSet = new EliteVoidSet(client, skill);
	}

	public double getSalveBonus(ItemContainer equippedItems, Actor opponent)
	{
		// Check if opponent is undead
		NPC npc = (NPC) opponent;

		if (npc == null)
		{
			return 0.0;
		}

		if (!UndeadMonsters.ID_LIST.contains(npc.getId()))
		{
			return 0.0;
		}

		for (SalveAmulet amuletType : SalveAmulet.values())
		{
			if (amuletType.isEquipped(equippedItems))
			{
				return amuletType.getBonus(skill);
			}
		}
		return 0.0;
	}

	public double getVoidBonus()
	{
		if (voidSet.isWearingSet())
			return voidSet.getMultiplier();

		if (eliteVoidSet.isWearingSet())
			return eliteVoidSet.getMultiplier();
		return 1.0;
	}

	public double getPrayerBonus()
	{
		switch (skill)
		{
			case STRENGTH:
				for (Map.Entry<PrayerType, Double> entry : STRENGTH_PRAYERS.entrySet())
				{
					if (entry.getKey().isActive(client))
					{
						return entry.getValue(); // Return the first active prayer found
					}
				}
				break;
			case RANGED:
				for (Map.Entry<PrayerType, Double> entry : RANGED_PRAYERS.entrySet())
				{
					if (entry.getKey().isActive(client))
					{
						return entry.getValue(); // Return the first active prayer found
					}
				}
				break;
			case MAGIC:
				for (Map.Entry<PrayerType, Double> entry : MAGIC_PRAYERS.entrySet())
				{
					if (entry.getKey().isActive(client))
					{
						return entry.getValue(); // Return the first active prayer found
					}
				}
				return 0.0;
		}
		return 1.0;
	}
}

package com.maxhit.calculators;

import com.maxhit.equipment.EnchantedBolt;
import com.maxhit.equipment.EquipmentFunctions;
import com.maxhit.equipment.SpecialAttackWeapon;
import lombok.Setter;
import net.runelite.api.Client;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.Skill;

public class SpecialAttackCalculator
{
	private final Client client;
	@Setter
	private ItemContainer equippedItems;

	public SpecialAttackCalculator(Client client)
	{
		this.client = client;
	}

	public double getSpecialMaxHit(double maxHitBase)
	{
		Item weapon = equippedItems.getItem(EquipmentInventorySlot.WEAPON.getSlotIdx());
		if (weapon == null)
		{
			return maxHitBase;
		}
		String weaponName = EquipmentFunctions.GetEquippedItemString(client, equippedItems, EquipmentInventorySlot.WEAPON);
		for (SpecialAttackWeapon specialAttackWeapon : SpecialAttackWeapon.values())
		{
			if (specialAttackWeapon.getItemId() == weapon.getId())
			{
				return specialAttackWeapon.getSpecialAttackDamage(client, maxHitBase);
			}
		}

		if (weaponName.contains("rossbo"))
		{
			int rangedLevel = client.getBoostedSkillLevel(Skill.RANGED);
			for (EnchantedBolt bolt : EnchantedBolt.values())
			{
				if (bolt.isEquipped(client, equippedItems))
				{
					return bolt.getDamageMultiplier(maxHitBase, rangedLevel);
				}
			}
		}
		return maxHitBase;
	}
}

package com.maxhit.calculators;

import com.maxhit.NextMaxHitReqs;
import com.maxhit.sets.EquipmentSet;
import com.maxhit.styles.AttackStyle;
import javax.annotation.Nullable;
import javax.inject.Inject;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.Actor;
import net.runelite.api.Client;
import net.runelite.api.ItemContainer;
import net.runelite.api.Skill;
import net.runelite.api.gameval.InventoryID;
import net.runelite.client.game.ItemManager;

public abstract class MaxHitCalculator
{
    protected final Client client;
    protected final ItemManager itemManager;
	protected ItemContainer equippedItems;
	@Getter
    protected final Skill skill;
	@Setter
	protected AttackStyle attackStyle;
    protected double effectiveStrength;
	// Making this a float to account for magic damage being a percent
	protected BonusCalculator bonusCalculator;
    protected float strengthBonus;
    protected double prayerBonus;
    protected double styleBonus;
	protected double salveBonus;
    protected double voidBonus;

	@Nullable
    public Actor opponent;
	@Getter
    protected double maxHit;
	@Getter
	protected NextMaxHitReqs nextMaxHitReqs;

	@Inject
    protected MaxHitCalculator (Client client, ItemManager itemManager, Skill skill, AttackStyle attackStyle)
    {
		this.client = client;
		this.itemManager = itemManager;
        this.skill = skill;
		this.attackStyle = attackStyle;
		this.equippedItems = client.getItemContainer(InventoryID.WORN);
		EquipmentSet.setEquippedItems(equippedItems);
		bonusCalculator = new BonusCalculator(client, skill);
        maxHit = 0.0;
        voidBonus = 1.0;
		salveBonus = 0.0;
    }

	public void setEquippedItems(ItemContainer equippedItems)
	{
		this.equippedItems = equippedItems;
		EquipmentSet.setEquippedItems(equippedItems);
	}

	protected void reset()
	{
		styleBonus = 0.0;
		voidBonus = 1.0;
		prayerBonus = 1.0;
	}

	protected abstract void getStyleBonus();

	protected void getVoidBonus()
	{
		voidBonus = bonusCalculator.getVoidBonus();
		if (skill == Skill.MAGIC)
			voidBonus -= 1.0;
	}

	protected void getPrayerBonus()
	{
		prayerBonus = bonusCalculator.getPrayerBonus();
	}

	protected void getEffectiveStrength()
	{
		getStyleBonus();
		getPrayerBonus();
		getVoidBonus();
		// getValue() gets boosted value
		effectiveStrength = Math.floor(Math.floor((getSkillLevel() * prayerBonus) + styleBonus + 8) * voidBonus);
	}

    protected void getStrengthBonus()
	{
		strengthBonus = StrengthBonusCalculator.getStrengthBonus(equippedItems, itemManager, skill);
	}

    public abstract void calculateMaxHit();

	protected int getSkillLevel()
	{
		return client.getBoostedSkillLevel(this.skill);
	}

	protected void getSalveBonus()
	{
		salveBonus = bonusCalculator.getSalveBonus(equippedItems, opponent);
	}

	protected abstract void calculateNextMaxHitRequirements();
}

package com.maxhit.equipment;

import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.ItemContainer;
import net.runelite.api.Client;


@AllArgsConstructor
public enum EnchantedBolt
{
	DIAMOND("Diamond", 1.15),
	ONYX("Onyx", 1.2),
	DRAGONSTONE("Dragonstone", -1.0)
	{
		@Override
		public double getDamageMultiplier(double baseMaxHit, int rangedLevel)
		{
			return baseMaxHit + Math.floor(rangedLevel * 0.2);
		}
	},
	OPAL("Opal", -1.0)
	{
		@Override
		public double getDamageMultiplier(double baseMaxHit, int rangedLevel)
		{
			return Math.floor(baseMaxHit) + Math.floor(rangedLevel * 0.1);
		}
	}
	//TODO add logic for Pearl Bolts
	;
	@Getter
	private final String name;
	private final double damageMultiplier;

	public double getDamageMultiplier(double baseMaxHit, int rangedLevel)
	{
		return Math.floor(baseMaxHit * damageMultiplier);
	}

	public boolean isEquipped(Client client, ItemContainer equippedItems)
	{
		return EquipmentFunctions.GetEquippedItemString(client, equippedItems, EquipmentInventorySlot.AMMO).contains(name);
	}
}

package com.maxhit.equipment;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.Skill;
import net.runelite.api.gameval.ItemID;
import net.runelite.api.Client;
import net.runelite.api.gameval.VarPlayerID;

@RequiredArgsConstructor
public enum SpecialAttackWeapon
{
	ABYSSAL_BLUDGEON(ItemID.ABYSSAL_BLUDGEON, -1.0)
		{
			@Override
			public double getSpecialAttackDamage(Client client, double maxBase)
			{
				int maxPrayerPoints = client.getRealSkillLevel(Skill.PRAYER);
				int actualPrayerPoints = client.getBoostedSkillLevel(Skill.PRAYER);
				int prayerPointsMissing = maxPrayerPoints - actualPrayerPoints;
				return (1.0 + (0.005 * prayerPointsMissing));
			}
		},
	ABYSSAL_DAGGER(ItemID.ABYSSAL_DAGGER, 0.85),
	ABYSSAL_DAGGER_P(ItemID.ABYSSAL_DAGGER_P, 0.85),
	ABYSSAL_DAGGER_P_PLUS(ItemID.ABYSSAL_DAGGER_P_, 0.85),
	ABYSSAL_DAGGER_P_PLUS_PLUS(ItemID.ABYSSAL_DAGGER_P__, 0.85),
	AGS(ItemID.AGS, 1.375),
	ARKAN_BLADE(ItemID.ARKAN_BLADE, 1.5),
	BLAZING_BLOWPIPE(ItemID.TOXIC_BLOWPIPE_ORNAMENT, 1.5),
	BGS(ItemID.BGS, 1.21),
	BLESSED_SARADOMIN_SWORD(ItemID.BLESSED_SARADOMIN_SWORD, 1.25),
	BRAIN_ANCHOR(ItemID.BRAIN_ANCHOR, 1.1),
	CRYSTAL_HALBERD(ItemID.CRYSTAL_HALBERD, 1.1),
	DARKBOW(ItemID.DARKBOW, 1.3),
	DRAGON_CLAWS(ItemID.DRAGON_CLAWS, 1.98),
	DRAGON_DAGGER(ItemID.DRAGON_DAGGER, -1.0)
		{
			@Override
			public double getSpecialAttackDamage(Client client, double maxHitBase)
			{
				return 2.0 * Math.floor(maxHitBase * 1.15);
			}
		},
	DRAGON_HALBERD(ItemID.DRAGON_HALBERD, 1.1),
	DRAONG_HASTA(ItemID.BRUT_DRAGON_SPEAR, -1.0)
		{
			@Override
			public double getSpecialAttackDamage(Client client, double maxBase)
			{
				return (1.0 + (0.5 * client.getVarbitValue(VarPlayerID.SA_ENERGY) / 1000.0));
			}
		},
	DRAGON_LONGSWORD(ItemID.DRAGON_LONGSWORD, 1.25),
	DRAGON_MACE(ItemID.DRAGON_MACE, 1.5),
	DRAGON_SHORTSWORD(ItemID.DRAGON_SHORTSWORD, 1.25),
	DRAGON_WARHAMMER(ItemID.DRAGON_WARHAMMER, 1.5),
	DUAL_MACUAHUITL(ItemID.DUAL_MACUAHUITL, 1.25),
	HEAVY_BALLISTA(ItemID.HEAVY_BALLISTA, 1.25),
	LIGHT_BALLISTA(ItemID.LIGHT_BALLISTA, 1.25),
	SARADOMIN_SWORD(ItemID.SARADOMIN_SWORD, 1.1),
	SGS(ItemID.SGS, 1.1),
	TOXIC_BLOWPIPE(ItemID.TOXIC_BLOWPIPE, 1.5),
	XBOWS_CROSSBOW_DRAGON(ItemID.XBOWS_CROSSBOW_DRAGON, 1.2),
	ZGS(ItemID.ZGS, 1.1),
	;

	@Getter
	private final int itemId;
	@Getter
	private final double damageMultiplier;

	public double getSpecialAttackDamage(Client client, double maxHitBase)
	{
		return Math.floor(maxHitBase * damageMultiplier);
	}
}
package com.maxhit.equipment;

import javax.annotation.Nonnull;
import net.runelite.api.Item;
import net.runelite.api.Client;
import net.runelite.api.ItemContainer;
import net.runelite.api.EquipmentInventorySlot;


public class EquipmentFunctions
{

	public static boolean HasEquipped(ItemContainer equippedItems, EquipmentInventorySlot slot, int itemID)
	{
		if (equippedItems == null)
		{
			return false;
		}
		Item equippedItem = equippedItems.getItem(slot.ordinal());
		if (equippedItem == null)
		{
			return false;
		}
		return equippedItem.getId() == itemID;
	}

	@Nonnull
	public static String GetEquippedItemString(Client client, ItemContainer equippedItems, EquipmentInventorySlot slot)
	{
		if (equippedItems == null)
		{
			return "";
		}
		Item equippedItem = equippedItems.getItem(slot.getSlotIdx());
		if (equippedItem == null)
		{
			return "";
		}
		return client.getItemDefinition(equippedItem.getId()).getName();
	}
}

package com.maxhit.equipment;

import com.maxhit.MagicSpell;
import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.ItemContainer;
import net.runelite.api.gameval.ItemID;

@Getter
@AllArgsConstructor
public enum GodCape
{
	ZAMORAK(ItemID.ZAMORAK_CAPE, ItemID.MA2_ZAMORAK_CAPE, MagicSpell.FLAMES_OF_ZAMORAK.getVarbValue()),
	SARADOMIN(ItemID.SARADOMIN_CAPE, ItemID.MA2_SARADOMIN_CAPE, MagicSpell.SARADOMIN_STRIKE.getVarbValue()),
	GUTHIX(ItemID.GUTHIX_CAPE, ItemID.MA2_GUTHIX_CAPE, MagicSpell.CLAWS_OF_GUTHIX.getVarbValue())
	;

	private final int regularItemId;
	private final int imbuedItemId;
	private final int spellId;

	public boolean isEquipped(ItemContainer equippedItems)
	{
		if (EquipmentFunctions.HasEquipped(equippedItems, EquipmentInventorySlot.CAPE, regularItemId))
			return true;
		if (EquipmentFunctions.HasEquipped(equippedItems, EquipmentInventorySlot.CAPE, imbuedItemId))
			return true;
		return false;
	}
}

package com.maxhit.equipment;

import com.google.common.collect.ImmutableSet;
import java.util.Collection;
import lombok.AllArgsConstructor;
import net.runelite.api.gameval.ItemID;
import net.runelite.client.game.ItemVariationMapping;

@FunctionalInterface
interface Calculation
{
	double compute(int skillLevel);
}

@AllArgsConstructor
public enum PoweredStaff
{
	WARPED_SCEPTRE(ItemID.WARPED_SCEPTRE_UNCHARGED,
		(skillLevel) -> Math.floor(((8.0 * skillLevel + 96.0) / 37.0))),
	BONE_STAFF(ItemID.RAT_BONE_STAFF,
		(skillLevel) -> Math.floor((skillLevel / 3.0)) + 5.0),
	TRIDENT_OF_THE_SEAS(ItemID.TOTS,
		(skillLevel) -> Math.max(1.0, Math.floor((skillLevel / 3.0)) - 5.0)),
	THAMMARONS_SCEPTRE(ItemID.WILD_CAVE_SCEPTRE_UNCHARGED,
		(skillLevel) -> Math.floor((skillLevel / 3.0)) - 8.0),
	ACCURSED_SCEPTRE(ItemID.WILD_CAVE_ACCURSED_UNCHARGED,
		(skillLevel) -> Math.floor((skillLevel / 3.0)) - 6.0),
	TRIDENT_OF_THE_SWAMP(ItemID.TOXIC_TOTS_CHARGED,
		(skillLevel) -> Math.max(4.0, Math.floor((skillLevel / 3.0)) - 2.0)),
	DAWNBRINGER(ItemID.VERZIK_SPECIAL_WEAPON,
		(skillLevel) -> Math.max(2.0, Math.floor(Math.floor((skillLevel / 3.0)) - 2.0) / 2.0)),
	SANGUINESTI_STAFF(ItemID.SANGUINESTI_STAFF,
	(skillLevel) -> Math.max(5.0, Math.floor((skillLevel / 3.0) - 1.0))),
	SANGUINESTI_STAFF_OR(ItemID.SANGUINESTI_STAFF_OR,
		(skillLevel) -> Math.max(5.0, Math.floor((skillLevel / 3.0) - 1.0))),
	EYE_OF_AYAK(ItemID.EYE_OF_AYAK,
		(skillLevel) -> Math.floor((skillLevel / 3.0)) - 6.0),
	TUMEKENS_SHADOW(ItemID.TUMEKENS_SHADOW,
		(skillLevel) -> Math.max(1.0, Math.floor((skillLevel / 3.0) + 1.0))),
	CRYSTAL_STAFF_BASIC(ItemID.GAUNTLET_MAGIC_T1,
		(skillLevel) -> 23.0),
	CRYSTAL_STAFF_ATTUNED(ItemID.GAUNTLET_MAGIC_T2,
		(skillLevel) -> 31.0),
	CRYSTAL_STAFF_PERFECTED(ItemID.GAUNTLET_MAGIC_T3,
		(skillLevel) -> 39.0),
	;



	private final int itemId;
	private final Calculation baseMaxHitCalculation;
	public double getBaseMaxHit(int magicLevel)
	{
		return Math.max(0.0, baseMaxHitCalculation.compute(magicLevel));
	}

	public Collection<Integer> getVarients()
	{
		int baseId = ItemVariationMapping.map(itemId);
		return ItemVariationMapping.getVariations(baseId);
	}
}

package com.maxhit.equipment;

import java.util.Collection;
import lombok.AllArgsConstructor;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.ItemContainer;
import net.runelite.api.gameval.ItemID;
import net.runelite.client.game.ItemVariationMapping;

@AllArgsConstructor
public enum VirtusPieces
{
	VIRTUS_MASK(ItemVariationMapping.getVariations(ItemID.VIRTUS_MASK), EquipmentInventorySlot.HEAD),
	VIRTUS_ROBE_TOP(ItemVariationMapping.getVariations(ItemID.VIRTUS_TOP), EquipmentInventorySlot.BODY),
	VIRTUS_ROBE_BOTTOM(ItemVariationMapping.getVariations(ItemID.VIRTUS_LEGS), EquipmentInventorySlot.LEGS),
	;

	private final Collection<Integer> itemVariations;
	private final EquipmentInventorySlot slot;

	public boolean isEquipped(ItemContainer equippedItems)
	{
		for (int itemId : itemVariations)
		{
			if (EquipmentFunctions.HasEquipped(equippedItems, slot, itemId))
				return true;
		}
		return false;
	}
}

package com.maxhit.equipment;

import java.util.Collection;
import lombok.AllArgsConstructor;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.ItemContainer;
import net.runelite.api.gameval.ItemID;
import net.runelite.client.game.ItemVariationMapping;

@AllArgsConstructor
public enum InquisitorPieces
{
	HELM(ItemVariationMapping.getVariations(ItemID.INQUISITORS_HELM), EquipmentInventorySlot.HEAD),
	HAUBERK(ItemVariationMapping.getVariations(ItemID.INQUISITORS_BODY), EquipmentInventorySlot.BODY),
	PLATESKIRT(ItemVariationMapping.getVariations(ItemID.INQUISITORS_SKIRT), EquipmentInventorySlot.LEGS)
	;

	private final Collection<Integer> itemVariations;
	private final EquipmentInventorySlot slot;

	public boolean isEquipped(ItemContainer equippedItems)
	{
		for (int itemId : itemVariations)
		{
			if (EquipmentFunctions.HasEquipped(equippedItems, slot, itemId))
				return true;
		}
		return false;
	}
}

package com.maxhit.equipment;

import lombok.AllArgsConstructor;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.ItemContainer;
import net.runelite.api.Skill;
import net.runelite.api.gameval.ItemID;

@AllArgsConstructor
public enum SalveAmulet
{
	REGULAR(ItemID.CRYSTALSHARD_NECKLACE, 0.1667, 0.0, 0.0),
	ENCHANTED(ItemID.LOTR_CRYSTALSHARD_NECKLACE_UPGRADE, 0.2, 0.0, 0.0),
	IMBUED(ItemID.NZONE_SALVE_AMULET, 0.1667, 0.1667, 0.15),
	ENCHANTED_IMBUED(ItemID.NZONE_SALVE_AMULET_E, 0.2, 0.2, 0.2);

	private final int itemId;
	private final double meleeBonus;
	private final double rangedBonus;
	private final double magicBonus;

	public boolean isEquipped(ItemContainer equippedItems)
	{
		return EquipmentFunctions.HasEquipped(equippedItems, EquipmentInventorySlot.AMULET, itemId);
	}

	public double getBonus(Skill skill)
	{
		if (skill == Skill.STRENGTH)
		{
			return meleeBonus;
		}
		if (skill == Skill.RANGED)
		{
			return rangedBonus;
		}
		return magicBonus;
	}


}

package com.maxhit;

import com.maxhit.calculators.MaxHitCalculator;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Skill;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;
import net.runelite.client.util.ColorUtil;
import javax.inject.Inject;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;

import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class MaxHitOverlay extends Overlay
{
	private static final Color COMBAT_LEVEL_COLOUR = new Color(0xff981f);
	private final MaxHitPlugin plugin;
	private final MaxHitConfig config;
	private final Client client;
	private final TooltipManager tooltipManager;
	private final PanelComponent panelComponent = new PanelComponent();


	@Inject
	public MaxHitOverlay(MaxHitPlugin plugin, MaxHitConfig config, Client client, TooltipManager tooltipManager)
	{
		super(plugin);
		setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
		setLayer(OverlayLayer.ABOVE_SCENE);
		this.plugin = plugin;  //set plugin field to plugin object given as input
		this.config = config;
		this.client = client;
		this.tooltipManager = tooltipManager;
		getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Max hit overlay"));
	}

	//render method
	@Override
	public Dimension render(Graphics2D graphics)
	{

		if (client.getGameState() != GameState.LOGGED_IN)
		{
			return null;
		}

		final MaxHitCalculator maxHitCalculator = plugin.getMaxHitCalculator();
		if (maxHitCalculator == null)
		{
			return null;
		}

		double maxHit = maxHitCalculator.getMaxHit();

		panelComponent.getChildren().clear();

		if (config.maxHit())
		{
			panelComponent.getChildren().add(LineComponent.builder()
				.left("Max Hit:")
				.right(String.valueOf(maxHit))
				.build());
		}

		if (config.showSpec() && plugin.isWieldingSpecialAttackWeapon())
		{
			panelComponent.getChildren().add(LineComponent.builder()
				.left("Max Special:")
				.right(Double.toString(Math.floor(plugin.getSpecialAttackCalculator().getSpecialMaxHit(maxHit))))
				.build());
		}

		//If showNextMaxHit is selected and mouse is inside the overlay show the next max hit tooltip
		if (config.showNextMaxHit() && this.getBounds().contains(
			client.getMouseCanvasPosition().getX(),
			client.getMouseCanvasPosition().getY()))
		{
			tooltipManager.add(new Tooltip(getNextMaxHitTooltip()));
		}

		return panelComponent.render(graphics);
	}

	private String getNextMaxHitTooltip()
	{
		NextMaxHitReqs nextMaxHitReqs = plugin.getMaxHitCalculator().getNextMaxHitReqs();
		StringBuilder sb = new StringBuilder();
		sb.append(ColorUtil.wrapWithColorTag("Next max hit:", COMBAT_LEVEL_COLOUR));
		if (plugin.getMaxHitCalculator().getSkill() == Skill.MAGIC)
		{
			sb.append("<br> UNSUPPORTED");
			return sb.toString();
		}
		String levelReqString = String.format("<br> %.0f %s Levels", nextMaxHitReqs.getNextRequiredLevel(), nextMaxHitReqs.getSkill());
		String bonusReqString = String.format("<br> %.0f %s bonus", nextMaxHitReqs.getNextRequiredStrength(), nextMaxHitReqs.getSkill());
		String prayerBonusReqString = String.format("<br> %.0f%% PRAYER bonus", nextMaxHitReqs.getNextRequiredPrayer());


		sb.append(levelReqString);
		sb.append(bonusReqString);
		sb.append(prayerBonusReqString);
		return sb.toString();
	}
}
package com.maxhit;

import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.api.gameval.VarbitID;

@AllArgsConstructor
@Getter
public enum Spellbook {
        STANDARD(0),
        ANCIENT(1),
        LUNAR(2),
        ARCEUUS(3);

        private final int spellbookId;

        public boolean isActive(Client client)
        {
            return client.getVarbitValue(VarbitID.SPELLBOOK) == spellbookId;
        }
}

package com.maxhit;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("maxhit")
public interface MaxHitConfig extends Config {

	@ConfigItem(
			keyName = "maxhit",
			name = "Max Hit",
			description = "Display max hit in current setup",
			position = 1
	)
	default boolean maxHit() { return true; }

	@ConfigItem(
			keyName = "showNextMaxHit",
			name = "Calculate next max hit",
			description = "Mouse over the max hit to show the options to reach the next max hit " +
					"like strength/ranged levels, bonus or prayer boosts",
			position = 2
	)
	default boolean showNextMaxHit() { return true; }

	@ConfigItem(
			keyName = "showSpec",
			name = "Show Special Attack Max hit",
			description = "Show special attack max hit",
			position = 3
	)
	default boolean showSpec() { return true; }
}

package com.maxhit.monsters;

import com.maxhit.MagicSpell;
import java.util.Objects;
import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.api.Actor;
import net.runelite.api.NPC;

@AllArgsConstructor
@Getter
public enum MonsterWeaknesses {
	ABERRANT_SPECTRE(2, "AIR", 0.5),
	ABHORRENT_SPECTRE(7402, "AIR", 0.5),
	ABYSSAL_PORTAL_NORMAL(7533, "FIRE", 0.5),
	ACIDIC_ARAXYTE(13675, "FIRE", 0.5),
	ADAMANT_DRAGON(8030, "EARTH", 0.5),
	AGRITH_NAAR(911, "WATER", 0.25),
	AGRITH_NAAR_NIGHTMARE_ZONE_HARD_MODE(6327, "WATER", 0.25),
	AGRITH_NAAR_NIGHTMARE_ZONE_NORMAL_MODE(6388, "WATER", 0.25),
	AHRIM_THE_BLIGHTED(1672, "AIR", 0.5),
	AIR_ELEMENTAL(1369, "AIR", 0.3),
	ALBINO_BAT(1039, "AIR", 0.4),
	ALCHEMICAL_HYDRA_ELECTRIC(8619, "EARTH", 0.5),
	ALCHEMICAL_HYDRA_EXTINGUISHED(8621, "EARTH", 0.5),
	ALCHEMICAL_HYDRA_FIRE(8620, "EARTH", 0.5),
	ALCHEMICAL_HYDRA_SERPENTINE(8615, "EARTH", 0.5),
	AMMONITE_CRAB(7799, "EARTH", 0.25),
	AMOXLIATL(13685, "FIRE", 0.3),
	ANCIENT_CUSTODIAN(14520, "FIRE", 0.3),
	ANCIENT_WYVERN(7795, "AIR", 0.35),
	ANCIENT_ZYGOMITE(7797, "FIRE", 0.4),
	ANGRY_BARBARIAN_SPIRIT(5563, "AIR", 0.3),
	ANIMATED_ADAMANT_ARMOUR(2455, "EARTH", 0.3),
	ANIMATED_BLACK_ARMOUR(2453, "EARTH", 0.3),
	ANIMATED_BRONZE_ARMOUR(2450, "EARTH", 0.3),
	ANIMATED_IRON_ARMOUR(2451, "EARTH", 0.3),
	ANIMATED_MITHRIL_ARMOUR(2454, "EARTH", 0.3),
	ANIMATED_RUNE_ARMOUR(2456, "EARTH", 0.3),
	ANIMATED_STEEL_ARMOUR(2452, "EARTH", 0.3),
	ANIMATED_SPADE(6470, "EARTH", 0.25),
	ANIMATED_STEEL_ARMOUR_TARNS_LAIR(6438, "EARTH", 0.3),
	ANKOU_LEVEL_75(2514, "AIR", 0.4),
	ANKOU_LEVEL_82(2515, "AIR", 0.4),
	ANKOU_LEVEL_86(2516, "AIR", 0.4),
	ANKOU_LEVEL_95(7257, "AIR", 0.4),
	ANKOU_LEVEL_98(7864, "AIR", 0.4),
	APPARITION_APMEKEN(4196, "AIR", 0.4),
	APPARITION_CRONDIS(4198, "AIR", 0.4),
	APPARITION_HET(4195, "AIR", 0.4),
	APPARITION_SCABARAS(4197, "AIR", 0.4),
	ARAXXOR_ENRAGED(13668, "FIRE", 0.5),
	ARAXXOR_IN_COMBAT(13668, "FIRE", 0.5),
	ARAXYTE_LEVEL_146(11176, "FIRE", 0.5),
	ARAXYTE_LEVEL_96(11175, "FIRE", 0.5),
	ARCANE_SCARAB(11726, "FIRE", 0.5),
	ARMADYLEAN_GUARD(6587, "AIR", 0.3),
	ARMOURED_ZOMBIE_DEFENDER_OF_VARROCK_MELEE_INVASION(12730, "FIRE", 0.5),
	ARMOURED_ZOMBIE_DEFENDER_OF_VARROCK_RANGED_INVASION(12735, "FIRE", 0.5),
	ARMOURED_ZOMBIE_THE_CURSE_OF_ARRAV_1(14135, "FIRE", 0.5),
	ARMOURED_ZOMBIE_THE_CURSE_OF_ARRAV_2(14136, "FIRE", 0.5),
	ARMOURED_ZOMBIE_ZEMOUREGALS_BASE_MELEE(12720, "FIRE", 0.5),
	ARMOURED_ZOMBIE_ZEMOUREGALS_BASE_RANGED(12725, "FIRE", 0.5),
	ARMOURED_ZOMBIE_ZEMOUREGALS_FORT_MELEE_1(14113, "FIRE", 0.5),
	ARMOURED_ZOMBIE_ZEMOUREGALS_FORT_MELEE_2(14114, "FIRE", 0.5),
	ARMOURED_ZOMBIE_ZEMOUREGALS_FORT_MELEE_3(14115, "FIRE", 0.5),
	ARMOURED_ZOMBIE_ZEMOUREGALS_FORT_MELEE_4(14116, "FIRE", 0.5),
	ARMOURED_ZOMBIE_ZEMOUREGALS_FORT_MELEE_5(14117, "FIRE", 0.5),
	ARMOURED_ZOMBIE_ZEMOUREGALS_FORT_RANGED_1(14118, "FIRE", 0.5),
	ARMOURED_ZOMBIE_ZEMOUREGALS_FORT_RANGED_2(14119, "FIRE", 0.5),
	ARMOURED_ZOMBIE_ZEMOUREGALS_FORT_RANGED_3(14120, "FIRE", 0.5),
	ARMOURED_ZOMBIE_ZEMOUREGALS_FORT_RANGED_4(14121, "FIRE", 0.5),
	ARMOURED_ZOMBIE_ZEMOUREGALS_FORT_RANGED_5(14122, "FIRE", 0.5),
	ARRG(643, "EARTH", 0.5),
	ARRG_NIGHTMARE_ZONE_HARD_MODE(6331, "EARTH", 0.5),
	ARRG_NIGHTMARE_ZONE_NORMAL_MODE(6392, "EARTH", 0.5),
	ASYN_SHADE_SHADE(1284, "AIR", 0.4),
	ASYN_SHADE_SHADOW(1283, "AIR", 0.4),
	AUGUR_METZLI_MAGIC(14318, "EARTH", 0.3),
	AUGUR_METZLI_RANGED(14313, "EARTH", 0.3),
	AVIANSIE_LEVEL_131(3183, "AIR", 0.45),
	AVIANSIE_LEVEL_137(3175, "AIR", 0.45),
	AVIANSIE_LEVEL_148(3176, "AIR", 0.45),
	AVIANSIE_LEVEL_69(3169, "AIR", 0.45),
	AVIANSIE_LEVEL_71(3177, "AIR", 0.45),
	AVIANSIE_LEVEL_73(3178, "AIR", 0.45),
	AVIANSIE_LEVEL_79_1(3170, "AIR", 0.45),
	AVIANSIE_LEVEL_79_2(3179, "AIR", 0.45),
	AVIANSIE_LEVEL_83(3172, "AIR", 0.45),
	AVIANSIE_LEVEL_84(3171, "AIR", 0.45),
	AVIANSIE_LEVEL_89(3180, "AIR", 0.45),
	AVIANSIE_LEVEL_92(3173, "AIR", 0.45),
	AVIANSIE_LEVEL_94(3181, "AIR", 0.45),
	AVIANSIE_LEVEL_97_1(3174, "AIR", 0.45),
	AVIANSIE_LEVEL_97_2(3182, "AIR", 0.45),
	BABY_ROC(762, "AIR", 0.3),
	BABY_BLACK_DRAGON_NORMAL(1871, "WATER", 0.5),
	BABY_BLUE_DRAGON_1(241, "WATER", 0.5),
	BABY_BLUE_DRAGON_2(242, "WATER", 0.5),
	BABY_BLUE_DRAGON_3(243, "WATER", 0.5),
	BABY_BLUE_DRAGON_RUINS_OF_TAPOYAUIK_1(14105, "FIRE", 0.5),
	BABY_BLUE_DRAGON_RUINS_OF_TAPOYAUIK_2(14106, "FIRE", 0.5),
	BABY_GREEN_DRAGON_1(5194, "WATER", 0.5),
	BABY_GREEN_DRAGON_2(5872, "WATER", 0.5),
	BABY_GREEN_DRAGON_3(5873, "WATER", 0.5),
	BABY_RED_DRAGON_CONSTRUCTION(137, "WATER", 0.5),
	BABY_RED_DRAGON_1(244, "WATER", 0.5),
	BABY_RED_DRAGON_2(245, "WATER", 0.5),
	BABY_RED_DRAGON_3(246, "WATER", 0.5),
	BABY_TANGLEFOOT_BROWN(5854, "FIRE", 0.2),
	BABY_TANGLEFOOT_TAN(5853, "FIRE", 0.2),
	BALFRUG_KREEYATH(3132, "WATER", 0.25),
	BANSHEE(414, "AIR", 0.3),
	BARK_BLAMISH_SNAIL(2648, "EARTH", 0.3),
	BASILISK_KNIGHT(9293, "EARTH", 0.4),
	BASILISK_SENTINEL(9258, "EARTH", 0.4),
	BASILISK_YOUNGLING(9282, "EARTH", 0.4),
	BASILISK_NORMAL(417, "EARTH", 0.4),
	BASILISK_UNUSED(418, "EARTH", 0.4),
	BAT(2827, "AIR", 0.35),
	BEAR_CUB_1(3908, "FIRE", 0.25),
	BEAR_CUB_2(3909, "FIRE", 0.25),
	BERRY_AWAKE(4132, "EARTH", 0.2),
	BERRY_SLEEPING(4134, "EARTH", 0.2),
	BERSERK_BARBARIAN_SPIRIT(5565, "AIR", 0.25),
	BIG_WOLF_FELDIP_HILLS(115, "FIRE", 0.2),
	BIG_WOLF_WHITE_WOLF_MOUNTAIN(109, "FIRE", 0.2),
	BIG_FROG_LEVEL_10(8701, "EARTH", 0.25),
	BIG_FROG_LEVEL_24(478, "EARTH", 0.25),
	BILLY_GOAT_BROWN(1794, "FIRE", 0.1),
	BILLY_GOAT_TAN(1797, "FIRE", 0.1),
	BIRD_LEVEL_11(5240, "AIR", 0.25),
	BIRD_LEVEL_5(5241, "AIR", 0.25),
	BLACK_BEAR(2839, "FIRE", 0.3),
	BLACK_DEMON_NIGHTMARE_ZONE_HARD_MODE(6295, "WATER", 0.4),
	BLACK_DEMON_NIGHTMARE_ZONE_NORMAL_MODE(6357, "WATER", 0.4),
	BLACK_DEMON_THE_GRAND_TREE(1432, "WATER", 0.4),
	BLACK_DEMON_THE_SCAR(12385, "WATER", 0.4),
	BLACK_DEMON_LEVEL_172(240, "WATER", 0.4),
	BLACK_DEMON_LEVEL_178(7243, "WATER", 0.4),
	BLACK_DEMON_LEVEL_184(7242, "WATER", 0.4),
	BLACK_DEMON_LEVEL_188(7874, "WATER", 0.4),
	BLACK_DRAGON_LEVEL_227(252, "WATER", 0.5),
	BLACK_DRAGON_LEVEL_247(7861, "WATER", 0.5),
	BLACK_JAGUAR(12978, "FIRE", 0.3),
	BLACK_JAGUAR_SCRAMBLED(14512, "FIRE", 0.3),
	BLESSED_SPIDER_NORMAL(4533, "FIRE", 0.5),
	BLESSED_SPIDER_SONG_OF_THE_ELVES(8978, "FIRE", 0.5),
	BLOOD_BLAMISH_SNAIL_POINTED(2650, "EARTH", 0.3),
	BLOOD_BLAMISH_SNAIL_ROUND(2645, "EARTH", 0.3),
	BLUE_DRAGON_1(265, "WATER", 0.5),
	BLUE_DRAGON_2(266, "WATER", 0.5),
	BLUE_DRAGON_3(267, "WATER", 0.5),
	BLUE_DRAGON_4(268, "WATER", 0.5),
	BLUE_DRAGON_5(269, "WATER", 0.5),
	BLUE_DRAGON_RUINS_OF_TAPOYAUIK_1(14103, "FIRE", 0.5),
	BLUE_DRAGON_RUINS_OF_TAPOYAUIK_2(14104, "FIRE", 0.5),
	BLUE_DRAGON_TASK_ONLY_1(5878, "WATER", 0.5),
	BLUE_DRAGON_TASK_ONLY_2(5879, "WATER", 0.5),
	BLUE_DRAGON_TASK_ONLY_3(5880, "WATER", 0.5),
	BLUE_DRAGON_TASK_ONLY_4(5881, "WATER", 0.5),
	BLUE_DRAGON_TASK_ONLY_5(5882, "WATER", 0.5),
	BOAR_LEVEL_5(11066, "FIRE", 0.2),
	BOAR_LEVEL_7(11067, "FIRE", 0.2),
	BODY_GOLEM_GOLEM(10691, "EARTH", 0.35),
	BODY_GOLEM_RUBBLE(10692, "EARTH", 0.35),
	BOUNCER_GHOST(3508, "AIR", 0.15),
	BRANDA_THE_FIRE_QUEEN(12596, "WATER", 0.5),
	BRONZE_DRAGON_CATACOMBS_OF_KOUREND(7253, "EARTH", 0.5),
	BRONZE_DRAGON_STANDARD(270, "EARTH", 0.5),
	BRUISE_BLAMISH_SNAIL_POINTED(2652, "EARTH", 0.25),
	BRUISE_BLAMISH_SNAIL_ROUND(2647, "EARTH", 0.25),
	BRUTAL_BLACK_DRAGON(7275, "WATER", 0.5),
	BRUTAL_BLUE_DRAGON_CATACOMBS_OF_KOUREND(7273, "WATER", 0.5),
	BRUTAL_BLUE_DRAGON_RUINS_OF_TAPOYAUIK(13795, "FIRE", 0.5),
	BRUTAL_GREEN_DRAGON(2918, "WATER", 0.5),
	BRUTAL_RED_DRAGON(7274, "WATER", 0.5),
	BRYOPHYTA(8195, "FIRE", 0.5),
	CALLISTO(6609, "FIRE", 0.3),
	CAVE_BUG_LEVEL_6(481, "FIRE", 0.5),
	CAVE_BUG_LEVEL_96(483, "FIRE", 0.5),
	CAVE_CRAWLER_ICY_1(13800, "FIRE", 0.5),
	CAVE_CRAWLER_ICY_2(13801, "FIRE", 0.5),
	CAVE_GOBLIN_MONSTER_BACKPACK(6437, "FIRE", 0.4),
	CAVE_GOBLIN_MONSTER_BEIGE(6435, "FIRE", 0.4),
	CAVE_GOBLIN_MONSTER_BLUE(6434, "FIRE", 0.4),
	CAVE_GOBLIN_MONSTER_BROWN(6436, "FIRE", 0.4),
	CAVE_GOBLIN_GUARD_LEVEL_24(5335, "FIRE", 0.4),
	CAVE_GOBLIN_MINER_1(5330, "FIRE", 0.4),
	CAVE_GOBLIN_MINER_2(5331, "FIRE", 0.4),
	CAVE_GOBLIN_MINER_3(5332, "FIRE", 0.4),
	CAVE_GOBLIN_MINER_4(5333, "FIRE", 0.4),
	CAVE_GOBLIN_MINER_5(5336, "FIRE", 0.4),
	CAVE_GOBLIN_MINER_6(5337, "FIRE", 0.4),
	CAVE_GOBLIN_MINER_7(5338, "FIRE", 0.4),
	CAVE_GOBLIN_MINER_8(5339, "FIRE", 0.4),
	CAVE_HORROR_ALPHA(1051, "FIRE", 0.3),
	CAVE_HORROR_GUARD(1049, "FIRE", 0.3),
	CAVE_HORROR_SMALL_GUARD(1050, "FIRE", 0.3),
	CAVE_HORROR_WORKER(1047, "FIRE", 0.3),
	CAVE_HORROR_YOUNG_WORKER(1048, "FIRE", 0.3),
	CAVE_KRAKEN_CAVE_KRAKEN(492, "EARTH", 0.5),
	CAVE_KRAKEN_WHIRLPOOL(493, "EARTH", 0.5),
	CAVE_SLIME(480, "EARTH", 0.5),
	CERBERUS(5862, "WATER", 0.4),
	CHAOS_ELEMENTAL(2054, "AIR", 0.5),
	CHAOS_GOLEM_GOLEM(10689, "EARTH", 0.35),
	CHAOS_GOLEM_RUBBLE(10690, "EARTH", 0.35),
	CHASM_CRAWLER_ICY(14031, "FIRE", 0.5),
	CHILLED_JELLY(13799, "FIRE", 0.5),
	CHOKE_DEVIL(7404, "AIR", 0.35),
	CHRONOZON(4987, "WATER", 0.25),
	CHRONOZON_NIGHTMARE_ZONE_HARD_MODE(6292, "WATER", 0.25),
	CHRONOZON_NIGHTMARE_ZONE_NORMAL_MODE(6354, "WATER", 0.25),
	CORPOREAL_BEAST(319, "EARTH", 0.1),
	CRAB_LEVEL_21(4822, "EARTH", 0.2),
	CRAB_LEVEL_23(4819, "EARTH", 0.2),
	CROCODILE(4184, "EARTH", 0.4),
	CRYPT_SPIDER(1683, "FIRE", 0.5),
	DAD(4130, "EARTH", 0.4),
	DAD_NIGHTMARE_ZONE_HARD_MODE(6330, "EARTH", 0.4),
	DAD_NIGHTMARE_ZONE_NORMAL_MODE(6391, "EARTH", 0.4),
	DAGANNOTH_CONSTRUCTION(140, "EARTH", 0.35),
	DAGANNOTH_HORROR_FROM_THE_DEEP(976, "EARTH", 0.35),
	DAGANNOTH_WATERBIRTH_ISLAND_LEVEL_88(2259, "EARTH", 0.35),
	DAGANNOTH_WATERBIRTH_ISLAND_LEVEL_90(3185, "EARTH", 0.35),
	DAGANNOTH_PRIME(2266, "EARTH", 0.35),
	DAGANNOTH_PRIME_DEADMAN_APOCALYPSE(12442, "EARTH", 0.35),
	DAGANNOTH_PRIME_DEADMAN_ARMAGEDDON(12442, "EARTH", 0.35),
	DAGANNOTH_REX(2267, "EARTH", 0.35),
	DAGANNOTH_REX_DEADMAN_APOCALYPSE(12439, "EARTH", 0.35),
	DAGANNOTH_REX_DEADMAN_ARMAGEDDON(12439, "EARTH", 0.35),
	DAGANNOTH_SUPREME(2265, "EARTH", 0.35),
	DAGANNOTH_SUPREME_DEADMAN_APOCALYPSE(12441, "EARTH", 0.35),
	DAGANNOTH_SUPREME_DEADMAN_ARMAGEDDON(12441, "EARTH", 0.35),
	DAGANNOTH_FLEDGELING(2264, "EARTH", 0.35),
	DAGANNOTH_MOTHER(980, "EARTH", 0.35),
	DAGANNOTH_MOTHER_NIGHTMARE_ZONE_HARD_MODE(6300, "EARTH", 0.35),
	DAGANNOTH_MOTHER_NIGHTMARE_ZONE_NORMAL_MODE(6361, "EARTH", 0.35),
	DAGANNOTH_SPAWN(3184, "EARTH", 0.35),
	DAGANNOTH_LEVEL_74_1(970, "EARTH", 0.35),
	DAGANNOTH_LEVEL_74_2(7259, "EARTH", 0.35),
	DAGANNOTH_LEVEL_92_1(973, "EARTH", 0.35),
	DAGANNOTH_LEVEL_92_2(7260, "EARTH", 0.35),
	DARK_BEAST(4005, "EARTH", 0.6),
	DAWN(7852, "EARTH", 0.7),
	DEADLY_RED_SPIDER(3021, "FIRE", 0.4),
	DEATH_WING(509, "AIR", 0.2),
	DEMONIC_GORILLA(7144, "WATER", 0.35),
	DEVIANT_SPECTRE(7279, "AIR", 0.3),
	DHAROK_THE_WRETCHED(1673, "AIR", 0.5),
	DHAROK_THE_WRETCHED_DEADMAN_ARMAGEDDON(12447, "AIR", 0.5),
	DIRE_WOLF_ALPHA(13812, "NONE", 0.0),
	DRAKE(8612, "WATER", 0.5),
	DREADBORN_ARAXYTE(13680, "FIRE", 0.5),
	DUSK_FIRST_FORM(7851, "EARTH", 0.4),
	DUSK_SECOND_FORM(7887, "EARTH", 0.4),
	DUST_DEVIL_CATACOMBS_OF_KOUREND(7249, "AIR", 0.35),
	DUST_DEVIL_SMOKE_DUNGEON(423, "AIR", 0.35),
	DUST_DEVIL_WILDERNESS_SLAYER_CAVE(11238, "AIR", 0.35),
	EARTH_ELEMENTAL_NORMAL(1366, "EARTH", 0.5),
	EARTH_ELEMENTAL_ORE(1367, "EARTH", 0.5),
	EARTHEN_NAGUA_NORMAL(14420, "AIR", 0.15),
	EARTHEN_NAGUA_REINFORCED(14421, "AIR", 0.15),
	EARTHEN_NAGUA_WEAKENED(14420, "AIR", 0.15),
	ELDER_CUSTODIAN_STALKER(14704, "FIRE", 0.3),
	ELDRIC_THE_ICE_KING(14147, "FIRE", 0.5),
	ELIDINIS_WARDEN_ACTIVE(11753, "EARTH", 0.5),
	ELIDINIS_WARDEN_CORE_EJECTED(11755, "EARTH", 0.5),
	ELIDINIS_WARDEN_DAMAGED(11761, "EARTH", 0.5),
	ELIDINIS_WARDEN_ENRAGED(11761, "EARTH", 0.5),
	ELIDINIS_WARDEN_INVULNERABLE(11763, "EARTH", 0.5),
	ELVARG(817, "WATER", 0.3),
	ELVARG_NIGHTMARE_ZONE_HARD_MODE(6118, "WATER", 0.3),
	ELVARG_NIGHTMARE_ZONE_NORMAL_MODE(6349, "WATER", 0.3),
	ENRAGED_BARBARIAN_SPIRIT(5564, "AIR", 0.15),
	ENT_WILDERNESS(6594, "FIRE", 0.4),
	ENT_WOODCUTTING_GUILD(7234, "FIRE", 0.4),
	ENTRANA_FIREBIRD(4927, "WATER", 1.0),
	EVIL_SPIRIT(625, "AIR", 0.3),
	FAREED_NIGHTMARE_ZONE_HARD_MODE(4115, "WATER", 0.3),
	FAREED_NIGHTMARE_ZONE_NORMAL_MODE(6348, "WATER", 0.3),
	FEROCIOUS_BARBARIAN_SPIRIT(5566, "AIR", 0.1),
	FEVER_SPIDER(626, "FIRE", 0.25),
	FIRE_ELEMENTAL(1365, "WATER", 1.0),
	FIRE_ELEMENTAL_ROYAL_TITANS(14150, "WATER", 1.0),
	FIRE_GIANT_LEVEL_104(7252, "WATER", 1.0),
	FIRE_GIANT_LEVEL_109(7251, "WATER", 1.0),
	FIRE_GIANT_LEVEL_86(2075, "WATER", 1.0),
	FIYR_SHADE_SHADE(1286, "AIR", 0.4),
	FIYR_SHADE_SHADOW(1285, "AIR", 0.4),
	FLAMBEED(4881, "WATER", 0.5),
	FLAMBEED_NIGHTMARE_ZONE_HARD_MODE(6309, "WATER", 0.5),
	FLAMBEED_NIGHTMARE_ZONE_NORMAL_MODE(6370, "WATER", 0.5),
	FLAMING_PYRELORD(7394, "WATER", 1.0),
	FLAMING_PYRELORD_DEADMAN_ARMAGEDDON(12453, "WATER", 1.0),
	FLAWED_GOLEM_GOLEM(10695, "EARTH", 0.35),
	FLAWED_GOLEM_RUBBLE(10696, "EARTH", 0.35),
	FLESH_CRAWLER_LEVEL_28(2498, "FIRE", 0.2),
	FLESH_CRAWLER_LEVEL_35(2499, "FIRE", 0.2),
	FLESH_CRAWLER_LEVEL_41(2500, "FIRE", 0.2),
	FLIGHT_KILISA(3165, "AIR", 0.3),
	FLOCKLEADER_GEERIN(3164, "AIR", 0.3),
	FORGOTTEN_SOUL_1(10544, "AIR", 0.5),
	FORGOTTEN_SOUL_2(10545, "AIR", 0.5),
	FOX(3901, "FIRE", 0.25),
	FRENZIED_ICE_TROLL_FEMALE(5825, "FIRE", 0.5),
	FRENZIED_ICE_TROLL_GRUNT(5826, "FIRE", 0.5),
	FRENZIED_ICE_TROLL_MALE(5824, "FIRE", 0.5),
	FRENZIED_ICE_TROLL_RUNT(5823, "FIRE", 0.5),
	FROG(8702, "EARTH", 0.4),
	FROGEEL(3600, "EARTH", 0.4),
	FROST_CRAB_ACTIVE(13789, "FIRE", 1.0),
	FROST_CRAB_HIDDEN(13790, "FIRE", 1.0),
	FROST_NAGUA(13728, "FIRE", 0.5),
	GALVEK_AIR(8097, "WATER", 0.4),
	GALVEK_EARTH(8098, "WATER", 0.4),
	GALVEK_FIRE(8094, "WATER", 0.4),
	GALVEK_WATER(8096, "WATER", 0.4),
	GARGOYLE_BASEMENT(1543, "EARTH", 0.4),
	GARGOYLE_UPSTAIRS(412, "EARTH", 0.4),
	GENERAL_GRAARDOR(2215, "EARTH", 0.4),
	GHAST_LEVEL_109(5626, "AIR", 0.25),
	GHAST_LEVEL_139(5627, "AIR", 0.25),
	GHAST_LEVEL_30(946, "AIR", 0.25),
	GHAST_LEVEL_79(5625, "AIR", 0.25),
	GHOST_GRAVE_OF_SCORPIUS(5370, "AIR", 0.5),
	GHOST_LEVEL_19(85, "AIR", 0.5),
	GHOST_LEVEL_76(2531, "AIR", 0.5),
	GHOST_LEVEL_77(2527, "AIR", 0.5),
	GIANT_MOLE(5779, "EARTH", 0.5),
	GIANT_MOLE_PVM_ARENA(6499, "WATER", 0.5),
	GIANT_ROC(763, "AIR", 0.35),
	GIANT_ROC_NIGHTMARE_ZONE_HARD_MODE(6323, "AIR", 0.35),
	GIANT_ROC_NIGHTMARE_ZONE_NORMAL_MODE(6384, "AIR", 0.35),
	GIANT_ROCK_CRAB_1(2261, "EARTH", 0.2),
	GIANT_ROCK_CRAB_2(5940, "EARTH", 0.2),
	GIANT_SCARAB(797, "FIRE", 0.5),
	GIANT_SCARAB_NIGHTMARE_ZONE_HARD_MODE(1127, "FIRE", 0.5),
	GIANT_SCARAB_NIGHTMARE_ZONE_NORMAL_MODE(6343, "FIRE", 0.5),
	GIANT_BAT_ARCEUUS(6824, "AIR", 0.1),
	GIANT_BAT_NORMAL(2834, "AIR", 0.1),
	GIANT_CRYPT_SPIDER(1684, "FIRE", 0.4),
	GIANT_FROG_LEVEL_13(8700, "EARTH", 0.25),
	GIANT_FROG_LEVEL_99(477, "EARTH", 0.25),
	GIANT_MOSQUITO(1041, "FIRE", 0.4),
	GIANT_ROCKSLUG(7392, "EARTH", 0.2),
	GIANT_SKELETON_SHADOW_DUNGEON_1(680, "EARTH", 0.4),
	GIANT_SKELETON_SHADOW_DUNGEON_2(681, "EARTH", 0.4),
	GIANT_SKELETON_TARNS_LAIR(6440, "EARTH", 0.4),
	GIANT_SNAIL_LEVEL_109(5629, "EARTH", 0.45),
	GIANT_SNAIL_LEVEL_139(5630, "EARTH", 0.45),
	GIANT_SNAIL_LEVEL_80(5628, "EARTH", 0.45),
	GIANT_SPIDER_LEVEL_2(3017, "FIRE", 0.5),
	GIANT_SPIDER_LEVEL_27(3018, "FIRE", 0.5),
	GIANT_SPIDER_LEVEL_50(2477, "FIRE", 0.5),
	GLOD(5129, "EARTH", 0.5),
	GLOD_NIGHTMARE_ZONE_HARD_MODE(6297, "EARTH", 0.5),
	GLOD_NIGHTMARE_ZONE_NORMAL_MODE(6358, "EARTH", 0.5),
	GRAVE_SCORPION(5372, "FIRE", 0.4),
	GREAT_OLM_HEAD_NORMAL(7551, "EARTH", 0.5),
	GREAT_OLM_LEFT_CLAW_NORMAL(7552, "EARTH", 0.5),
	GREAT_OLM_RIGHT_CLAW_NORMAL(7550, "EARTH", 0.5),
	GREATER_SKELETON_HELLHOUND_CALVARION(12108, "EARTH", 0.4),
	GREATER_SKELETON_HELLHOUND_VETION(6614, "EARTH", 0.4),
	GREATER_DEMON_THE_SCAR(12387, "WATER", 0.4),
	GREATER_DEMON_LEVEL_100(7245, "WATER", 0.4),
	GREATER_DEMON_LEVEL_101(7244, "WATER", 0.4),
	GREATER_DEMON_LEVEL_104_WILDERNESS_SLAYER_CAVE(7871, "WATER", 0.4),
	GREATER_DEMON_LEVEL_113(7246, "WATER", 0.4),
	GREATER_DEMON_LEVEL_92(2025, "WATER", 0.4),
	GREEN_DRAGON_LEVEL_79(260, "WATER", 0.5),
	GREEN_DRAGON_LEVEL_88(7868, "WATER", 0.5),
	GRIZZLY_BEAR_CUB_LEVEL_33(3424, "FIRE", 0.2),
	GRIZZLY_BEAR_CUB_LEVEL_36(3425, "FIRE", 0.2),
	GRIZZLY_BEAR_LEVEL_21(2838, "FIRE", 0.2),
	GRIZZLY_BEAR_LEVEL_42(3423, "FIRE", 0.2),
	GUARDIAN_DRAKE(10400, "WATER", 0.5),
	GUTHAN_THE_INFESTED(1674, "AIR", 0.5),
	HARPIE_BUG_SWARM(464, "FIRE", 0.5),
	HAZE_GHOST(3625, "AIR", 0.5),
	HELLHOUND_CONSTRUCTION(135, "WATER", 0.5),
	HELLHOUND_LEVEL_122(104, "WATER", 0.5),
	HELLHOUND_LEVEL_136(7877, "WATER", 0.5),
	HESPORI(8583, "FIRE", 1.0),
	HILL_GIANT(7261, "EARTH", 0.25),
	HILL_GIANT_1(2098, "EARTH", 0.25),
	HILL_GIANT_2(2099, "EARTH", 0.25),
	HILL_GIANT_3(2100, "EARTH", 0.25),
	HILL_GIANT_4(2101, "EARTH", 0.25),
	HILL_GIANT_5(2102, "EARTH", 0.25),
	HILL_GIANT_6(2103, "EARTH", 0.25),
	HILL_GIANT_BRASSARD(10374, "EARTH", 0.25),
	HILL_GIANT_CLOTHED(12849, "EARTH", 0.25),
	HILL_GIANT_HAMMER(10375, "EARTH", 0.25),
	HILL_GIANT_HELMETLESS(12850, "EARTH", 0.25),
	HILL_GIANT_SCIMITAR_AND_SINGLET(10376, "EARTH", 0.25),
	HILL_GIANT_SHIRTLESS(12848, "EARTH", 0.25),
	HOPELESS_CREATURE_LEVEL_40(1072, "FIRE", 0.4),
	HOPELESS_CREATURE_LEVEL_71(4695, "FIRE", 0.4),
	HYDRA(8609, "EARTH", 0.4),
	ICE_QUEEN(4922, "FIRE", 1.0),
	ICE_TROLL_KING(5822, "FIRE", 0.35),
	ICE_TROLL_KING_NIGHTMARE_ZONE_HARD_MODE(6294, "FIRE", 0.35),
	ICE_TROLL_KING_NIGHTMARE_ZONE_NORMAL_MODE(6356, "FIRE", 0.35),
	ICE_DEMON_NORMAL(7584, "FIRE", 1.5),
	ICE_ELEMENTAL_ROYAL_TITANS(14151, "FIRE", 1.0),
	ICE_GIANT_1(2085, "FIRE", 1.0),
	ICE_GIANT_2(2086, "FIRE", 1.0),
	ICE_GIANT_3(2087, "FIRE", 1.0),
	ICE_GIANT_ASGARNIA_ICE_DUNGEON_1(2088, "FIRE", 1.0),
	ICE_GIANT_ASGARNIA_ICE_DUNGEON_2(2089, "FIRE", 1.0),
	ICE_GIANT_VARLAMORE_1(13796, "FIRE", 1.0),
	ICE_GIANT_VARLAMORE_2(13797, "FIRE", 1.0),
	ICE_GIANT_WILDERNESS_SLAYER_CAVE_1(7878, "FIRE", 1.0),
	ICE_GIANT_WILDERNESS_SLAYER_CAVE_2(7879, "FIRE", 1.0),
	ICE_GIANT_WILDERNESS_SLAYER_CAVE_3(7880, "FIRE", 1.0),
	ICE_SPIDER_NORMAL(3022, "FIRE", 1.0),
	ICE_SPIDER_RUINS_OF_TAPOYAUIK(13798, "FIRE", 1.0),
	ICE_SPIDER_SETTLEMENT_RUINS(10722, "FIRE", 1.0),
	ICE_TROLL_FEMALE_VARIANT_1(5830, "FIRE", 1.0),
	ICE_TROLL_FEMALE_VARIANT_2(1876, "FIRE", 1.0),
	ICE_TROLL_GRUNT(1877, "FIRE", 0.35),
	ICE_TROLL_MALE_VARIANT_1(5829, "FIRE", 1.0),
	ICE_TROLL_MALE_VARIANT_2(1875, "FIRE", 1.0),
	ICE_TROLL_RUNT_VARIANT_1(5828, "FIRE", 1.0),
	ICE_TROLL_RUNT_VARIANT_2(1874, "FIRE", 0.5),
	ICE_TROLL_LEVEL_120(650, "FIRE", 1.0),
	ICE_TROLL_LEVEL_121(651, "FIRE", 1.0),
	ICE_TROLL_LEVEL_123(649, "FIRE", 1.0),
	ICE_TROLL_LEVEL_124(648, "FIRE", 1.0),
	ICE_WARRIOR_ASGARNIA_ICE_DUNGEON(2842, "FIRE", 1.0),
	ICE_WARRIOR_ICE_QUEENS_LAIR(2851, "FIRE", 1.0),
	ICE_WARRIOR_NORMAL(2841, "FIRE", 1.0),
	ICE_WARRIOR_VARLAMORE(13802, "FIRE", 1.0),
	ICE_WOLF_LEVEL_132(647, "FIRE", 0.2),
	ICE_WOLF_LEVEL_96(645, "FIRE", 0.2),
	ICEFIEND_LEVEL_13(4813, "FIRE", 1.0),
	ICEFIEND_LEVEL_18(3140, "FIRE", 1.0),
	ICELORD_MELEE_1(855, "FIRE", 0.3),
	ICELORD_MELEE_2(854, "FIRE", 0.3),
	ICELORD_MELEE_3(853, "FIRE", 0.3),
	ICELORD_RANGED(852, "FIRE", 0.3),
	IMP_NORMAL(5007, "WATER", 0.1),
	IRON_DRAGON_CATACOMBS_OF_KOUREND(7254, "EARTH", 0.5),
	IRON_DRAGON_STANDARD(272, "EARTH", 0.5),
	JACKAL(4185, "FIRE", 0.1),
	JAGUAR(12976, "FIRE", 0.1),
	JAGUAR_CUB(12977, "FIRE", 0.1),
	JAL_IMKOT_DEADMAN_ARMAGEDDON(12455, "WATER", 0.3),
	JALTOK_JAD(7700, "WATER", 0.4),
	JELLY_DARK(441, "EARTH", 0.35),
	JELLY_DARK_W(11245, "EARTH", 0.35),
	JELLY_GREEN(442, "EARTH", 0.35),
	JELLY_GREY(438, "EARTH", 0.35),
	JELLY_GREY_W(11242, "EARTH", 0.35),
	JELLY_OLIVE(440, "EARTH", 0.35),
	JELLY_OLIVE_W(11244, "EARTH", 0.35),
	JELLY_REGULAR(437, "EARTH", 0.35),
	JELLY_REGULAR_W(11241, "EARTH", 0.35),
	JELLY_TAN(439, "EARTH", 0.35),
	JELLY_TAN_W(11243, "EARTH", 0.35),
	JOGRE_GWD(2234, "EARTH", 0.25),
	JOGRE_NORMAL(2094, "EARTH", 0.25),
	JUNGLE_DEMON_NIGHTMARE_ZONE_HARD_MODE(6321, "FIRE", 0.25),
	JUNGLE_DEMON_NIGHTMARE_ZONE_NORMAL_MODE(6382, "FIRE", 0.25),
	JUNGLE_WOLF(232, "FIRE", 0.15),
	JUNGLE_HORROR_BLUE_EYES(1045, "FIRE", 0.25),
	JUNGLE_HORROR_GREEN_EYES(1044, "FIRE", 0.25),
	JUNGLE_HORROR_PINK_EYES(1046, "FIRE", 0.25),
	JUNGLE_HORROR_RED_EYES(1042, "FIRE", 0.25),
	JUNGLE_HORROR_YELLOW_EYES(1043, "FIRE", 0.25),
	JUNGLE_SPIDER(3020, "FIRE", 0.4),
	JUNGLE_SPIDER_APE_ATOLL(5243, "FIRE", 0.4),
	JUVENILE_CUSTODIAN_STALKER(14702, "FIRE", 0.3),
	KRIL_TSUTSAROTH(3129, "WATER", 0.3),
	KRIL_TSUTSAROTH_DEADMAN_ARMAGEDDON(12446, "WATER", 0.3),
	KALPHITE_GUARDIAN(960, "FIRE", 0.4),
	KALPHITE_GUARDIAN_LOWER_LEVEL(962, "FIRE", 0.4),
	KALPHITE_GUARDIAN_UPPER_LEVEL(959, "FIRE", 0.4),
	KALPHITE_QUEEN_AIRBORNE(965, "FIRE", 0.4),
	KALPHITE_QUEEN_CRAWLING(963, "FIRE", 0.4),
	KALPHITE_SOLDIER_KALPHITE_CAVE_TASK_ONLY(958, "FIRE", 0.4),
	KALPHITE_SOLDIER_KALPHITE_LAIR(957, "FIRE", 0.4),
	KALPHITE_WORKER(955, "FIRE", 0.4),
	KAMIL_NIGHTMARE_ZONE_HARD_MODE(1129, "FIRE", 0.1),
	KAMIL_NIGHTMARE_ZONE_NORMAL_MODE(6345, "FIRE", 0.1),
	KARAMEL(4882, "FIRE", 0.4),
	KARAMEL_NIGHTMARE_ZONE_HARD_MODE(6310, "FIRE", 0.4),
	KARAMEL_NIGHTMARE_ZONE_NORMAL_MODE(6371, "FIRE", 0.4),
	KARIL_THE_TAINTED(1675, "AIR", 0.5),
	KEPHRI_AGGRESSIVE(11721, "FIRE", 0.35),
	KEPHRI_SHIELDED(11719, "FIRE", 0.4),
	KET_ZEK_STANDARD(3125, "WATER", 0.4),
	KILLERWATT_ATTACKING(469, "AIR", 0.6),
	KILLERWATT_IDLE(470, "AIR", 0.6),
	KING_BLACK_DRAGON(239, "WATER", 0.5),
	KING_BLACK_DRAGON_DEADMAN_ARMAGEDDON(12440, "WATER", 0.5),
	KING_SAND_CRAB_ACTIVE(7266, "EARTH", 0.15),
	KING_SAND_CRAB_HIDDEN(7267, "EARTH", 0.15),
	KING_SCORPION(3027, "FIRE", 0.2),
	KOB(7106, "EARTH", 0.2),
	KRAKA(928, "EARTH", 0.2),
	KRAKEN_KRAKEN(494, "EARTH", 0.5),
	KRAKEN_WHIRLPOOL(496, "EARTH", 0.5),
	KREEARRA(3162, "AIR", 0.3),
	KREEARRA_DEADMAN_ARMAGEDDON(12443, "AIR", 0.3),
	LAVA_BEAST(7817, "WATER", 1.0),
	LAVA_DRAGON(6593, "WATER", 0.5),
	LESSER_DEMON_CHAMPION(3357, "WATER", 0.4),
	LESSER_DEMON_THE_SCAR_LEVEL_39(12376, "WATER", 0.4),
	LESSER_DEMON_THE_SCAR_LEVEL_82(12389, "WATER", 0.4),
	LESSER_DEMON_THE_SCAR_LEVEL_94_MAGE(12361, "WATER", 0.4),
	LESSER_DEMON_THE_SCAR_LEVEL_94_MELEE(12363, "WATER", 0.4),
	LESSER_DEMON_THE_SCAR_LEVEL_94_RANGED(12365, "WATER", 0.4),
	LESSER_DEMON_LEVEL_82(2005, "WATER", 0.4),
	LESSER_DEMON_LEVEL_87(7247, "WATER", 0.4),
	LESSER_DEMON_LEVEL_94(7248, "WATER", 0.4),
	LESSER_DEMON_LEVEL_94_WILDERNESS_SLAYER_CAVE(7865, "WATER", 0.4),
	LOAR_SHADE_SHADE(1277, "AIR", 0.4),
	LOAR_SHADE_SHADOW(1276, "AIR", 0.4),
	LOBSTROSITY(7796, "EARTH", 0.25),
	LOCUST(11584, "FIRE", 0.4),
	LOCUST_RIDER_LANCER(795, "FIRE", 0.4),
	LOCUST_RIDER_LANCER_QUEST(800, "FIRE", 0.4),
	LOCUST_RIDER_RANGER(796, "FIRE", 0.4),
	LOCUST_RIDER_RANGER_QUEST(801, "FIRE", 0.4),
	LONG_TAILED_WYVERN(7792, "AIR", 0.25),
	MALEVOLENT_MAGE_DEADMAN_ARMAGEDDON(12456, "WATER", 0.5),
	MATURE_CUSTODIAN_STALKER(14703, "FIRE", 0.3),
	MIND_GOLEM_GOLEM(10693, "EARTH", 0.35),
	MIND_GOLEM_RUBBLE(10694, "EARTH", 0.35),
	MIRRORBACK_ARAXYTE(13671, "FIRE", 0.5),
	MITHRIL_DRAGON(2919, "EARTH", 0.5),
	MOGRE(2592, "EARTH", 0.2),
	MOLANISK(1, "EARTH", 0.6),
	MONKEY_ZOMBIE_LEVEL_129(5282, "FIRE", 0.5),
	MONKEY_ZOMBIE_LEVEL_82(5283, "FIRE", 0.5),
	MONKEY_ZOMBIE_LEVEL_98(5281, "FIRE", 0.5),
	MONSTROUS_BASILISK_THE_FREMENNIK_EXILES(9287, "EARTH", 0.4),
	MONSTROUS_BASILISK(7395, "EARTH", 0.4),
	MOSS_GIANT_IORWERTH_DUNGEON(8736, "FIRE", 0.5),
	MOSS_GUARDIAN_NIGHTMARE_ZONE_HARD_MODE(6325, "FIRE", 0.5),
	MOSS_GUARDIAN_NIGHTMARE_ZONE_NORMAL_MODE(6386, "FIRE", 0.5),
	MOSS_GIANT_LEVEL_42(2090, "FIRE", 0.5),
	MOSS_GIANT_LEVEL_42_VARLAMORE(12844, "FIRE", 0.5),
	MOSS_GIANT_LEVEL_48(3851, "FIRE", 0.5),
	MOUNTAIN_TROLL_LEVEL_69(936, "FIRE", 0.5),
	MOUNTAIN_TROLL_LEVEL_71(4143, "EARTH", 0.5),
	MUDSKIPPER_LEVEL_30(4820, "EARTH", 0.2),
	MUDSKIPPER_LEVEL_31(4821, "EARTH", 0.2),
	MUMMY_ANCIENT_PYRAMID_1(720, "FIRE", 0.5),
	MUMMY_ANCIENT_PYRAMID_1_ALIGHT(725, "FIRE", 0.5),
	MUMMY_ANCIENT_PYRAMID_2(721, "FIRE", 0.5),
	MUMMY_ANCIENT_PYRAMID_2_ALIGHT(726, "FIRE", 0.5),
	MUMMY_ANCIENT_PYRAMID_3(722, "FIRE", 0.5),
	MUMMY_ANCIENT_PYRAMID_3_ALIGHT(727, "FIRE", 0.5),
	MUMMY_ANCIENT_PYRAMID_4(723, "FIRE", 0.5),
	MUMMY_ANCIENT_PYRAMID_4_ALIGHT(728, "FIRE", 0.5),
	MYRE_BLAMISH_SNAIL_POINTED(2649, "EARTH", 0.25),
	MYRE_BLAMISH_SNAIL_ROUND(2634, "EARTH", 0.25),
	NAZASTAROOL_NIGHTMARE_ZONE_GHOST_HARD_MODE(6339, "AIR", 0.2),
	NAZASTAROOL_NIGHTMARE_ZONE_GHOST_NORMAL_MODE(6400, "AIR", 0.2),
	NEZIKCHENED_NIGHTMARE_ZONE_HARD_MODE(6318, "WATER", 0.1),
	NEZIKCHENED_NIGHTMARE_ZONE_NORMAL_MODE(6379, "WATER", 0.1),
	OBOR(7416, "EARTH", 0.2),
	OCELOT_BROWN(14545, "FIRE", 0.1),
	OCELOT_GREY(14547, "FIRE", 0.1),
	OCELOT_LIGHT_BROWN(14546, "FIRE", 0.1),
	OCHRE_BLAMISH_SNAIL_POINTED(2651, "EARTH", 0.25),
	OCHRE_BLAMISH_SNAIL_ROUND(2646, "EARTH", 0.25),
	OGRE_CHIEFTAIN(4362, "EARTH", 0.2),
	OGRE_LEVEL_53(136, "EARTH", 0.2),
	OGRE_LEVEL_58(2233, "EARTH", 0.2),
	OGRE_LEVEL_63(1153, "EARTH", 0.2),
	OGRESS_SHAMAN(7991, "EARTH", 0.2),
	OGRESS_WARRIOR_1(7989, "EARTH", 0.2),
	OGRESS_WARRIOR_2(7990, "EARTH", 0.2),
	ORK(2237, "EARTH", 0.15),
	OTHERWORLDLY_BEING(2843, "AIR", 0.35),
	PEE_HAT(927, "EARTH", 0.2),
	PENGUIN_MONSTER(2063, "FIRE", 0.25),
	PHANTOM_MUSPAH_MELEE(12078, "AIR", 0.65),
	PHANTOM_MUSPAH_POST_SHIELD(12080, "AIR", 0.65),
	PHANTOM_MUSPAH_RANGED(12077, "AIR", 0.65),
	PHANTOM_MUSPAH_SHIELDED(12079, "AIR", 0.65),
	PHANTOM_MUSPAH_TELEPORTING(12082, "AIR", 0.65),
	PHRIN_SHADE_SHADE(1280, "AIR", 0.4),
	PHRIN_SHADE_SHADOW(1279, "AIR", 0.4),
	PIT_SCORPION(3026, "FIRE", 0.25),
	POISON_SCORPION(3025, "FIRE", 0.25),
	POISON_SPIDER_LEVEL_31(5373, "FIRE", 0.4),
	POISON_SPIDER_LEVEL_64(3023, "FIRE", 0.4),
	PORCUPINE(13968, "FIRE", 0.2),
	PYREFIEND_LEVEL_43(433, "WATER", 1.0),
	PYREFIEND_LEVEL_48(3139, "WATER", 1.0),
	PYRELORD_1(6762, "WATER", 1.0),
	PYRELORD_2(6795, "WATER", 1.0),
	RAM_1(1262, "FIRE", 0.2),
	RAM_2(1263, "FIRE", 0.2),
	RAM_3(1264, "FIRE", 0.2),
	RAM_MONASTERY(1265, "FIRE", 0.2),
	RAM_SHEARED(1261, "FIRE", 0.2),
	RED_DRAGON_SCRAMBLED(14511, "WATER", 0.5),
	RED_DRAGON_1(247, "WATER", 0.5),
	RED_DRAGON_2(248, "WATER", 0.5),
	RED_DRAGON_3(249, "WATER", 0.5),
	RED_DRAGON_4(250, "WATER", 0.5),
	RED_DRAGON_5(251, "WATER", 0.5),
	REVENANT_CYCLOPS(7934, "AIR", 0.3),
	REVENANT_DARK_BEAST(7938, "AIR", 0.3),
	REVENANT_DEMON(7936, "AIR", 0.3),
	REVENANT_DRAGON(7940, "AIR", 0.3),
	REVENANT_GOBLIN(7931, "AIR", 0.3),
	REVENANT_HELLHOUND(7935, "AIR", 0.3),
	REVENANT_HOBGOBLIN(7933, "AIR", 0.3),
	REVENANT_IMP(7881, "AIR", 0.3),
	REVENANT_KNIGHT(7939, "AIR", 0.3),
	REVENANT_ORK(7937, "AIR", 0.3),
	REVENANT_PYREFIEND(7932, "AIR", 0.3),
	RIVER_TROLL_LEVEL_120(6736, "EARTH", 0.2),
	RIVER_TROLL_LEVEL_14(6732, "EARTH", 0.2),
	RIVER_TROLL_LEVEL_159(6737, "EARTH", 0.2),
	RIVER_TROLL_LEVEL_29(6733, "EARTH", 0.2),
	RIVER_TROLL_LEVEL_49(6734, "EARTH", 0.2),
	RIVER_TROLL_LEVEL_79(6735, "EARTH", 0.2),
	RIYL_SHADE_SHADE(1282, "AIR", 0.4),
	RIYL_SHADE_SHADOW(1281, "AIR", 0.4),
	ROCK_TROLL(925, "EARTH", 0.2),
	ROCK_CRAB_ACTIVE(100, "EARTH", 0.2),
	ROCK_CRAB_HIDDEN(101, "EARTH", 0.2),
	ROCK_GOLEM_MONSTER_LEVEL_120(6729, "EARTH", 0.4),
	ROCK_GOLEM_MONSTER_LEVEL_14(6725, "EARTH", 0.4),
	ROCK_GOLEM_MONSTER_LEVEL_154(6730, "EARTH", 0.4),
	ROCK_GOLEM_MONSTER_LEVEL_29(6726, "EARTH", 0.4),
	ROCK_GOLEM_MONSTER_LEVEL_49(6727, "EARTH", 0.4),
	ROCK_GOLEM_MONSTER_LEVEL_79(6728, "EARTH", 0.4),
	ROCK_LOBSTER_ACTIVE(5944, "EARTH", 0.25),
	ROCK_LOBSTER_HIDDEN(5945, "EARTH", 0.25),
	ROCKSLUG_CAVE(421, "EARTH", 0.25),
	ROCKSLUG_SWAMP(422, "EARTH", 0.25),
	RUNE_DRAGON(8031, "EARTH", 0.5),
	RUNE_DRAGON_CONSTRUCTION(8027, "EARTH", 0.5),
	RUNITE_GOLEM(6600, "EARTH", 0.6),
	RUPTURA_ARAXYTE(13673, "FIRE", 0.5),
	SAND_CRAB_ACTIVE(5935, "EARTH", 0.2),
	SAND_CRAB_HIDDEN(5936, "EARTH", 0.2),
	SAND_SNAKE(7903, "EARTH", 0.4),
	SAND_SNAKE_NIGHTMARE_ZONE_HARD(7894, "EARTH", 0.4),
	SAND_SNAKE_NIGHTMARE_ZONE_NORMAL(7895, "EARTH", 0.4),
	SARACHNIS(8713, "FIRE", 0.4),
	SCARAB_MAGE_LEVEL_119_QUEST(11508, "FIRE", 0.5),
	SCARAB_MAGE_LEVEL_66_QUEST(799, "FIRE", 0.5),
	SCARAB_MAGE_LEVEL_93(794, "FIRE", 0.5),
	SCARAB_SWARM_NORMAL(4192, "FIRE", 0.5),
	SCARAB_SWARM_PYRAMID_PLUNDER(1782, "FIRE", 0.5),
	SCARABS(729, "FIRE", 0.5),
	SCARRED_BLACK_DEMON(12386, "WATER", 0.4),
	SCARRED_GREATER_DEMON_LEVEL_113(12373, "WATER", 0.4),
	SCARRED_GREATER_DEMON_LEVEL_95(12388, "WATER", 0.4),
	SCARRED_HELLHOUND(12374, "WATER", 0.5),
	SCARRED_LESSER_DEMON_LEVEL_85(12390, "WATER", 0.4),
	SCORPIA(6615, "FIRE", 0.35),
	SCORPION_LEVEL_14(3024, "FIRE", 0.25),
	SCORPION_LEVEL_37(2480, "FIRE", 0.25),
	SCORPION_LEVEL_38(5242, "FIRE", 0.25),
	SCORPION_LEVEL_59(2479, "FIRE", 0.25),
	SCREAMING_BANSHEE(7390, "AIR", 0.4),
	SCREAMING_TWISTED_BANSHEE(7391, "AIR", 0.4),
	SEAGULL_LEVEL_2(1338, "AIR", 0.2),
	SEAGULL_LEVEL_3(1339, "AIR", 0.2),
	SHADE_CATACOMBS_OF_KOUREND(7258, "AIR", 0.4),
	SHADOW_WYRM_ATTACKING(10399, "EARTH", 0.5),
	SHADOW_WYRM_IDLE(10398, "EARTH", 0.5),
	SHADOW_SPIDER(3016, "FIRE", 0.4),
	SKELETAL_WYVERN_1(468, "FIRE", 0.25),
	SKELETAL_WYVERN_2(465, "FIRE", 0.25),
	SKELETAL_WYVERN_3(466, "FIRE", 0.25),
	SKELETAL_WYVERN_4(467, "FIRE", 0.25),
	SKELETON_APE_ATOLL(5237, "EARTH", 0.35),
	SKELETON_BARROWS_ARMED_ROUND_SHIELD(1688, "EARTH", 0.35),
	SKELETON_BARROWS_SQUARE_SHIELD(1687, "EARTH", 0.35),
	SKELETON_BARROWS_UNARMED(1685, "EARTH", 0.35),
	SKELETON_BARROWS_UNARMED_ROUND_SHIELD(1686, "EARTH", 0.35),
	SKELETON_CATACOMBS_OF_KOUREND(7265, "EARTH", 0.35),
	SKELETON_FORTHOS_RUIN_1(10717, "EARTH", 0.35),
	SKELETON_FORTHOS_RUIN_2(10718, "EARTH", 0.35),
	SKELETON_FORTHOS_RUIN_3(10719, "EARTH", 0.35),
	SKELETON_FORTHOS_RUIN_4(10720, "EARTH", 0.35),
	SKELETON_FORTHOS_RUIN_5(10721, "EARTH", 0.35),
	SKELETON_LUCIENS_CAMP_1(13476, "AIR", 0.35),
	SKELETON_LUCIENS_CAMP_2(13477, "AIR", 0.35),
	SKELETON_LUCIENS_CAMP_3(13478, "AIR", 0.35),
	SKELETON_LUCIENS_CAMP_4(13479, "AIR", 0.35),
	SKELETON_SHAYZIEN_CRYPTS_MAGIC(8072, "EARTH", 0.35),
	SKELETON_SHAYZIEN_CRYPTS_MELEE(8070, "EARTH", 0.35),
	SKELETON_SHAYZIEN_CRYPTS_RANGE(8071, "EARTH", 0.35),
	SKELETON_STRONGHOLD_OF_SECURITY_1(2521, "EARTH", 0.35),
	SKELETON_STRONGHOLD_OF_SECURITY_2(2522, "EARTH", 0.35),
	SKELETON_STRONGHOLD_OF_SECURITY_3(2523, "EARTH", 0.35),
	SKELETON_STRONGHOLD_OF_SECURITY_4(2520, "EARTH", 0.35),
	SKELETON_STRONGHOLD_OF_SECURITY_5(2524, "EARTH", 0.35),
	SKELETON_STRONGHOLD_OF_SECURITY_6(2525, "EARTH", 0.35),
	SKELETON_STRONGHOLD_OF_SECURITY_7(2526, "EARTH", 0.35),
	SKELETON_TARNS_LAIR_LEVEL_40(6448, "EARTH", 0.35),
	SKELETON_TARNS_LAIR_LEVEL_42_HAMMER(6446, "EARTH", 0.35),
	SKELETON_TARNS_LAIR_LEVEL_42_SWORD(6444, "EARTH", 0.35),
	SKELETON_TARNS_LAIR_LEVEL_59(6445, "EARTH", 0.35),
	SKELETON_TARNS_LAIR_LEVEL_63(6447, "EARTH", 0.35),
	SKELETON_TARNS_LAIR_LEVEL_72(6467, "EARTH", 0.35),
	SKELETON_TARNS_LAIR_LEVEL_77(6442, "EARTH", 0.35),
	SKELETON_TARNS_LAIR_LEVEL_81(6443, "EARTH", 0.35),
	SKELETON_TARNS_LAIR_LEVEL_87(6468, "EARTH", 0.35),
	SKELETON_MAGE(6441, "EARTH", 0.35),
	SKELETON_CHAMPION(3358, "AIR", 0.35),
	SKELETON_HELLHOUND_CALVARION(12107, "EARTH", 0.3),
	SKELETON_HELLHOUND_NIGHTMARE_ZONE_HARD_MODE(6326, "EARTH", 0.3),
	SKELETON_HELLHOUND_NIGHTMARE_ZONE_NORMAL_MODE(6387, "EARTH", 0.3),
	SKELETON_HELLHOUND_VETION(6613, "EARTH", 0.3),
	SKELETON_BRUTE(1538, "EARTH", 0.35),
	SKELETON_FREMENNIK_LEVEL_40(4491, "EARTH", 0.35),
	SKELETON_FREMENNIK_LEVEL_50(4494, "EARTH", 0.35),
	SKELETON_FREMENNIK_LEVEL_60(4497, "EARTH", 0.35),
	SKELETON_GUARD(130, "AIR", 0.35),
	SKELETON_HEAVY(1540, "EARTH", 0.35),
	SKELETON_HERO(1537, "EARTH", 0.35),
	SKELETON_THUG(1541, "EARTH", 0.35),
	SKELETON_WARLORD(1539, "EARTH", 0.35),
	SKELETON_LEVEL_21_1(74, "EARTH", 0.35),
	SKELETON_LEVEL_21_2(75, "EARTH", 0.35),
	SKELETON_LEVEL_21_3(76, "EARTH", 0.35),
	SKELETON_LEVEL_22_1(70, "EARTH", 0.35),
	SKELETON_LEVEL_22_2(71, "EARTH", 0.35),
	SKELETON_LEVEL_22_3(72, "EARTH", 0.35),
	SKELETON_LEVEL_22_4(73, "EARTH", 0.35),
	SKELETON_LEVEL_25_1(77, "EARTH", 0.35),
	SKELETON_LEVEL_25_2(78, "EARTH", 0.35),
	SKELETON_LEVEL_25_3(79, "EARTH", 0.35),
	SKELETON_LEVEL_25_4(80, "EARTH", 0.35),
	SKELETON_LEVEL_25_5(81, "EARTH", 0.35),
	SKELETON_LEVEL_29_1(14426, "EARTH", 0.35),
	SKELETON_LEVEL_29_2(14427, "EARTH", 0.35),
	SKELETON_LEVEL_29_3(14428, "EARTH", 0.35),
	SKELETON_LEVEL_45_1(82, "EARTH", 0.35),
	SKELETON_LEVEL_45_2(83, "EARTH", 0.35),
	SKOTIZO(7286, "WATER", 0.4),
	SLAGILITH_NIGHTMARE_ZONE_HARD_MODE(6324, "EARTH", 0.4),
	SLAGILITH_NIGHTMARE_ZONE_NORMAL_MODE(6385, "EARTH", 0.4),
	SMALL_SCARAB(14126, "FIRE", 0.5),
	SMOKE_DEVIL(498, "AIR", 0.3),
	SOLDIER_SCARAB(11724, "FIRE", 0.5),
	SPIDER_APE_ATOLL(5238, "FIRE", 0.5),
	SPIDER_UNGAEL(8137, "FIRE", 0.5),
	SPIDER_COMMON(3019, "FIRE", 0.5),
	SPIDER_STRONGHOLD_OF_SECURITY(2478, "FIRE", 0.5),
	SPIDER_UNDERGROUND_PASS(4561, "FIRE", 0.5),
	SPIDINE(3602, "FIRE", 0.25),
	SPINDEL(11998, "FIRE", 0.25),
	SPIRITUAL_MAGE_ARMADYL(3168, "AIR", 0.3),
	SPIRITUAL_MAGE_BANDOS(2244, "AIR", 0.3),
	SPIRITUAL_MAGE_SARADOMIN(2212, "AIR", 0.3),
	SPIRITUAL_MAGE_ZAMORAK(3161, "AIR", 0.3),
	SPIRITUAL_MAGE_ZAROS(11292, "AIR", 0.3),
	SPIRITUAL_RANGER_ARMADYL(3167, "AIR", 0.3),
	SPIRITUAL_RANGER_BANDOS(2242, "AIR", 0.3),
	SPIRITUAL_RANGER_SARADOMIN(2211, "AIR", 0.3),
	SPIRITUAL_RANGER_ZAMORAK(3160, "AIR", 0.3),
	SPIRITUAL_RANGER_ZAROS(11291, "AIR", 0.3),
	SPIRITUAL_WARRIOR_ARMADYL(3166, "AIR", 0.3),
	SPIRITUAL_WARRIOR_BANDOS(2243, "AIR", 0.3),
	SPIRITUAL_WARRIOR_SARADOMIN(2210, "AIR", 0.3),
	SPIRITUAL_WARRIOR_ZAMORAK(3159, "AIR", 0.3),
	SPIRITUAL_WARRIOR_ZAROS(11290, "AIR", 0.3),
	SPITTING_SCARAB(11725, "FIRE", 0.5),
	SPITTING_WYVERN(7794, "AIR", 0.25),
	STEEL_DRAGON_CONSTRUCTION(139, "EARTH", 0.5),
	STEEL_DRAGON_LEVEL_246(274, "EARTH", 0.5),
	STEEL_DRAGON_LEVEL_246_TASK_ONLY(275, "EARTH", 0.5),
	STEEL_DRAGON_LEVEL_274(7255, "EARTH", 0.5),
	STICK(926, "EARTH", 0.2),
	STRANGE_CREATURE_SHADOWS_OF_CUSTODIA(14706, "FIRE", 0.3),
	SULPHUR_NAGUA(13033, "AIR", 0.15),
	SUQAH_1(787, "EARTH", 0.2),
	SUQAH_2(788, "EARTH", 0.2),
	SUQAH_3(789, "EARTH", 0.2),
	SUQAH_4(790, "EARTH", 0.2),
	SUQAH_5(791, "EARTH", 0.2),
	SUQAH_6(792, "EARTH", 0.2),
	SUQAH_7(793, "EARTH", 0.2),
	SWAMP_CRAB_BLOOMED(8298, "EARTH", 0.35),
	SWAMP_CRAB_HIDDEN(8299, "EARTH", 0.35),
	SWAMP_CRAB_NORMAL(8297, "EARTH", 0.35),
	SWAMP_FROG(8578, "EARTH", 0.2),
	TALONED_WYVERN(7793, "AIR", 0.35),
	TANGLEFOOT_NIGHTMARE_ZONE_HARD_MODE(6291, "FIRE", 0.35),
	TANGLEFOOT_NIGHTMARE_ZONE_NORMAL_MODE(6353, "FIRE", 0.35),
	TEMPLE_SPIDER(8703, "FIRE", 0.4),
	THE_HUEYCOATL_BODY(14017, "EARTH", 0.6),
	THE_HUEYCOATL_NORMAL(14009, "EARTH", 0.6),
	THE_HUEYCOATL_SHIELDED(14011, "EARTH", 0.6),
	THE_HUEYCOATL_TAIL(14014, "EARTH", 0.6),
	THE_HUEYCOATL_TAIL_BROKEN(14015, "EARTH", 0.6),
	THERMONUCLEAR_SMOKE_DEVIL(499, "AIR", 0.2),
	THROWER_TROLL(931, "EARTH", 0.2),
	THROWER_TROLL_TROLLHEIM(4135, "EARTH", 0.2),
	TOK_XIL_STANDARD(2193, "WATER", 0.4),
	TORAG_THE_CORRUPTED(1676, "AIR", 0.5),
	TORMENTED_DEMON_1(13599, "WATER", 0.3),
	TORMENTED_DEMON_2(13600, "WATER", 0.3),
	TORMENTED_DEMON_3(13601, "WATER", 0.3),
	TORMENTED_DEMON_4(13602, "WATER", 0.3),
	TORTOISE_NO_RIDERS(6075, "EARTH", 0.2),
	TORTOISE_WITH_RIDERS(6076, "EARTH", 0.2),
	TOTEM_PHOSANIS_NIGHTMARE(9434, "FIRE", 0.7),
	TOTEM_THE_NIGHTMARE(9434, "FIRE", 0.7),
	TRAPPED_SOUL(8514, "AIR", 0.15),
	TRAPPED_SOUL_NIGHTMARE_ZONE_HARD_MODE(8529, "AIR", 0.15),
	TRAPPED_SOUL_NIGHTMARE_ZONE_NORMAL_MODE(8528, "AIR", 0.15),
	TREE_SPIRIT_LOST_CITY(1163, "FIRE", 0.35),
	TREE_SPIRIT_NIGHTMARE_ZONE_HARD_MODE(6319, "FIRE", 0.35),
	TREE_SPIRIT_NIGHTMARE_ZONE_NORMAL_MODE(6380, "FIRE", 0.35),
	TREE_SPIRIT_LEVEL_120(1865, "FIRE", 0.35),
	TREE_SPIRIT_LEVEL_14(1861, "FIRE", 0.35),
	TREE_SPIRIT_LEVEL_159(1866, "FIRE", 0.35),
	TREE_SPIRIT_LEVEL_29(1862, "FIRE", 0.35),
	TREE_SPIRIT_LEVEL_49(1863, "FIRE", 0.35),
	TREE_SPIRIT_LEVEL_79(1864, "FIRE", 0.35),
	TREUS_DAYTH_NIGHTMARE_ZONE_HARD_MODE(6298, "AIR", 0.25),
	TREUS_DAYTH_NIGHTMARE_ZONE_NORMAL_MODE(6359, "AIR", 0.25),
	TROLL_GENERAL_HAMMER_BROWN(4122, "EARTH", 0.2),
	TROLL_GENERAL_HAMMER_GREY(4121, "EARTH", 0.2),
	TROLL_GENERAL_SWORD(4120, "EARTH", 0.2),
	TSTANON_KARLAK(3130, "WATER", 0.4),
	TUMEKENS_WARDEN_ACTIVE(11756, "EARTH", 0.5),
	TUMEKENS_WARDEN_CORE_EJECTED(11758, "EARTH", 0.5),
	TUMEKENS_WARDEN_DAMAGED(11762, "EARTH", 0.5),
	TUMEKENS_WARDEN_ENRAGED(11762, "EARTH", 0.5),
	TUMEKENS_WARDEN_INVULNERABLE(11764, "EARTH", 0.5),
	TWIG_AWAKE(4131, "EARTH", 0.2),
	TWIG_SLEEPING(4133, "EARTH", 0.2),
	TWISTED_BANSHEE(7272, "AIR", 0.25),
	TZ_KEK_LEVEL_22(3120, "WATER", 0.4),
	TZ_KEK_LEVEL_45(2191, "WATER", 0.4),
	TZ_KIH(2189, "WATER", 0.4),
	TZHAAR_HUR(2161, "WATER", 0.4),
	TZHAAR_KET_LEVEL_149(2173, "WATER", 0.4),
	TZHAAR_KET_LEVEL_221(7679, "WATER", 0.4),
	TZHAAR_MEJ(2154, "WATER", 0.4),
	TZHAAR_XIL_KNIFE(2167, "WATER", 0.4),
	TZHAAR_XIL_RING(2169, "WATER", 0.4),
	TZHAAR_XIL_SWORD(2168, "WATER", 0.4),
	TZTOK_JAD(3127, "WATER", 0.4),
	UNDEAD_DRUID(2145, "FIRE", 0.5),
	UNDEAD_LUMBERJACK_LEVEL_30(5648, "FIRE", 0.5),
	UNDEAD_LUMBERJACK_LEVEL_35(5656, "FIRE", 0.5),
	UNDEAD_LUMBERJACK_LEVEL_40(5665, "FIRE", 0.5),
	UNDEAD_LUMBERJACK_LEVEL_45(5673, "FIRE", 0.5),
	UNDEAD_LUMBERJACK_LEVEL_50(5681, "FIRE", 0.5),
	UNDEAD_LUMBERJACK_LEVEL_55(5689, "FIRE", 0.5),
	UNDEAD_LUMBERJACK_LEVEL_60(5697, "FIRE", 0.5),
	UNDEAD_LUMBERJACK_LEVEL_64(5705, "FIRE", 0.5),
	UNDEAD_LUMBERJACK_LEVEL_70(5713, "FIRE", 0.5),
	UNDEAD_ZEALOT_1(10591, "FIRE", 0.5),
	UNDEAD_ZEALOT_2(10592, "FIRE", 0.5),
	UNDEAD_CHICKEN(2993, "FIRE", 0.5),
	UNDEAD_COW(2992, "FIRE", 0.5),
	UNDEAD_ONE_LEVEL_61(5344, "FIRE", 0.5),
	UNDEAD_ONE_LEVEL_68_SKELETAL(5342, "FIRE", 0.5),
	UNDEAD_ONE_LEVEL_68_ZOMBIE(5346, "FIRE", 0.5),
	UNDEAD_ONE_LEVEL_73(5349, "FIRE", 0.5),
	URIUM_SHADE_SHADE(10589, "AIR", 0.4),
	URIUM_SHADE_SHADOW(6143, "AIR", 0.4),
	VENENATIS(6610, "FIRE", 0.4),
	VERAC_THE_DEFILED(1677, "AIR", 0.5),
	VERZIK_VITUR_ENTRY_MODE_PHASE_3(10835, "FIRE", 0.5),
	VERZIK_VITUR_HARD_MODE_PHASE_3(10852, "FIRE", 0.5),
	VERZIK_VITUR_NORMAL_MODE_PHASE_3(8374, "FIRE", 0.5),
	VESPULA_NORMAL(7530, "FIRE", 0.5),
	VORKATH_DRAGON_SLAYER_II(8058, "FIRE", 0.4),
	VORKATH_POST_QUEST(8059, "FIRE", 0.4),
	VULTURE_FLYING(1268, "AIR", 0.2),
	VULTURE_LANDED(1267, "AIR", 0.2),
	WALLASALKI_1(5938, "EARTH", 0.3),
	WALLASALKI_2(5939, "EARTH", 0.3),
	WARPED_JELLY(7277, "EARTH", 0.3),
	WARPED_TORTOISE(12490, "EARTH", 0.2),
	WATER_ELEMENTAL(1370, "EARTH", 0.5),
	WATERFIEND_NORMAL(2916, "EARTH", 1.0),
	WATERFIEND_SLAYER_TASK(2917, "EARTH", 1.0),
	THE_WHISPERER_AWAKENED(12204, "EARTH", 0.6),
	THE_WHISPERER_POST_QUEST(12204, "EARTH", 0.6),
	THE_WHISPERER_QUEST(12206, "EARTH", 0.6),
	WHITE_JAGUAR(12979, "NONE", 0.0),
	WHITE_WOLF_LEVEL_25(107, "FIRE", 0.25),
	WHITE_WOLF_LEVEL_38(108, "FIRE", 0.25),
	WINGMAN_SKREE(3163, "AIR", 0.3),
	WOLF_SOUL_WARS(10522, "FIRE", 0.25),
	WOLF_LEVEL_11(2491, "FIRE", 0.25),
	WOLF_LEVEL_14(2490, "FIRE", 0.25),
	WOLF_LEVEL_25(110, "FIRE", 0.25),
	WOLF_LEVEL_64(106, "FIRE", 0.25),
	WOLF_LEVEL_64_RELLEKKA(3912, "FIRE", 0.25),
	WYRM_ATTACKING(8611, "EARTH", 0.5),
	WYRM_IDLE(8610, "EARTH", 0.5),
	WYRMLING_ATTACKING(13032, "EARTH", 0.5),
	WYRMLING_IDLE(13031, "EARTH", 0.5),
	XARPUS_ENTRY_MODE(10768, "AIR", 0.5),
	XARPUS_HARD_MODE(10772, "AIR", 0.5),
	XARPUS_NORMAL_MODE(8340, "AIR", 0.5),
	YT_MEJKOT_STANDARD(3123, "WATER", 0.4),
	ZAKLN_GRITCH(3131, "WATER", 0.4),
	ZOMBIE_PIRATE_BRAINDEATH_ISLAND_1(613, "FIRE", 0.5),
	ZOMBIE_PIRATE_BRAINDEATH_ISLAND_2(614, "FIRE", 0.5),
	ZOMBIE_PIRATE_BRAINDEATH_ISLAND_3(615, "FIRE", 0.5),
	ZOMBIE_PIRATE_BRAINDEATH_ISLAND_4(616, "FIRE", 0.5),
	ZOMBIE_PIRATE_BRAINDEATH_ISLAND_5(617, "FIRE", 0.5),
	ZOMBIE_PIRATE_BRAINDEATH_ISLAND_6(618, "FIRE", 0.5),
	ZOMBIE_PIRATE_LEVEL_22(13489, "FIRE", 0.5),
	ZOMBIE_PIRATE_LEVEL_28(13490, "FIRE", 0.5),
	ZOMBIE_PIRATE_LEVEL_34(13492, "FIRE", 0.5),
	ZOMBIE_RAT_1(3969, "FIRE", 0.5),
	ZOMBIE_RAT_2(3970, "FIRE", 0.5),
	ZOMBIE_RAT_3(3971, "FIRE", 0.5),
	ZOMBIE_SWAB_1(619, "FIRE", 0.5),
	ZOMBIE_SWAB_2(620, "FIRE", 0.5),
	ZOMBIE_SWAB_3(621, "FIRE", 0.5),
	ZOMBIE_SWAB_4(622, "FIRE", 0.5),
	ZOMBIE_SWAB_5(623, "FIRE", 0.5),
	ZOMBIE_SWAB_6(624, "FIRE", 0.5),
	ZOMBIE_LEVEL_13_1(26, "FIRE", 0.5),
	ZOMBIE_LEVEL_13_10(38, "FIRE", 0.5),
	ZOMBIE_LEVEL_13_11(39, "FIRE", 0.5),
	ZOMBIE_LEVEL_13_12(40, "FIRE", 0.5),
	ZOMBIE_LEVEL_13_13(41, "FIRE", 0.5),
	ZOMBIE_LEVEL_13_2(27, "FIRE", 0.5),
	ZOMBIE_LEVEL_13_3(28, "FIRE", 0.5),
	ZOMBIE_LEVEL_13_4(29, "FIRE", 0.5),
	ZOMBIE_LEVEL_13_5(30, "FIRE", 0.5),
	ZOMBIE_LEVEL_13_6(31, "FIRE", 0.5),
	ZOMBIE_LEVEL_13_7(32, "FIRE", 0.5),
	ZOMBIE_LEVEL_13_8(34, "FIRE", 0.5),
	ZOMBIE_LEVEL_13_9(37, "FIRE", 0.5),
	ZOMBIE_LEVEL_18_1(42, "FIRE", 0.5),
	ZOMBIE_LEVEL_18_2(43, "FIRE", 0.5),
	ZOMBIE_LEVEL_18_3(44, "FIRE", 0.5),
	ZOMBIE_LEVEL_24_1(49, "FIRE", 0.5),
	ZOMBIE_LEVEL_24_2(50, "FIRE", 0.5),
	ZOMBIE_LEVEL_24_3(51, "FIRE", 0.5),
	ZOMBIE_LEVEL_24_4(52, "FIRE", 0.5),
	ZOMBIE_LEVEL_24_5(54, "FIRE", 0.5),
	ZOMBIE_LEVEL_24_6(55, "FIRE", 0.5),
	ZOMBIE_LEVEL_24_7(56, "FIRE", 0.5),
	ZOMBIE_LEVEL_24_8(57, "FIRE", 0.5),
	ZOMBIE_LEVEL_24_9(58, "FIRE", 0.5),
	ZOMBIES_CHAMPION(3359, "FIRE", 0.5),
	ZOMBIFIED_SPAWN_DRAGON_SLAYER_II(8062, "FIRE", 0.5),
	ZOMBIFIED_SPAWN_POST_QUEST(8063, "FIRE", 0.5),
	ZULRAH_MAGMA(2043, "FIRE", 0.5),
	ZULRAH_SERPENTINE(2042, "FIRE", 0.5),
	ZULRAH_TANZANITE(2044, "FIRE", 0.5),
	ZYGOMITE_LEVEL_74(537, "FIRE", 0.4),
	ZYGOMITE_LEVEL_86(1024, "FIRE", 0.4),
	;
	private final int id;
	private final String element;
	private final double severity;

	public boolean hasWeakness(Actor opponent, MagicSpell activeSpell)
	{
		if (opponent == null)
		{
			return false;
		}
		NPC npc = (NPC) opponent;
		String npcName = npc.getName();
		if (npcName == null)
		{
			return false;
		}
		if (id != npc.getId())
		{
			return false;
		}
		return Objects.equals(activeSpell.getElement(), element);
	}
}
package com.maxhit.monsters;

import com.google.common.collect.ImmutableSet;

import java.util.Set;

public class UndeadMonsters {
	public static final Set<Integer> ID_LIST = ImmutableSet.of(
		2, //Aberrant spectre
		7402, //Abhorrent spectre
		2514, //Ankou
		2515, //Ankou
		2516, //Ankou
		7257, //Ankou
		7864, //Ankou
		12730, //Armoured zombie (Defender of Varrock)
		12735, //Armoured zombie (Defender of Varrock)
		14135, //Armoured zombie (The Curse of Arrav)
		14136, //Armoured zombie (The Curse of Arrav)
		12720, //Armoured zombie (Zemouregal's Base)
		12725, //Armoured zombie (Zemouregal's Base)
		14113, //Armoured zombie (Zemouregal's Fort)
		14114, //Armoured zombie (Zemouregal's Fort)
		14115, //Armoured zombie (Zemouregal's Fort)
		14116, //Armoured zombie (Zemouregal's Fort)
		14117, //Armoured zombie (Zemouregal's Fort)
		14118, //Armoured zombie (Zemouregal's Fort)
		14119, //Armoured zombie (Zemouregal's Fort)
		14120, //Armoured zombie (Zemouregal's Fort)
		14121, //Armoured zombie (Zemouregal's Fort)
		14122, //Armoured zombie (Zemouregal's Fort)
		1284, //Asyn Shade
		1283, //Asyn Shade
		5632, //Asyn shadow (Temple Trekking)
		414, //Banshee
		11994, //Calvar'ion
		11993, //Calvar'ion
		455, //Crawling Hand
		453, //Crawling Hand
		454, //Crawling Hand
		456, //Crawling Hand
		457, //Crawling Hand
		450, //Crawling Hand
		448, //Crawling Hand
		449, //Crawling Hand
		451, //Crawling Hand
		452, //Crawling Hand
		7388, //Crushing hand
		7296, //Dark Ankou
		7279, //Deviant spectre
		1286, //Fiyr Shade
		1285, //Fiyr Shade
		10523, //Forgotten Soul (Soul Wars)
		10525, //Forgotten Soul (Soul Wars)
		10544, //Forgotten Soul
		10545, //Forgotten Soul
		5370, //Ghost (Grave of Scorpius)
		3975, //Ghost (Melzar's Maze)
		3976, //Ghost (Melzar's Maze)
		3977, //Ghost (Melzar's Maze)
		3978, //Ghost (Melzar's Maze)
		3979, //Ghost (Melzar's Maze)
		85, //Ghost
		2531, //Ghost
		2527, //Ghost
		680, //Giant skeleton (Shadow Dungeon)
		681, //Giant skeleton (Shadow Dungeon)
		6440, //Giant skeleton (Tarn's Lair)
		12108, //Greater Skeleton Hellhound (Calvar'ion)
		6614, //Greater Skeleton Hellhound (Vet'ion)
		3625, //Haze
		10506, //Headless Beast
		10492, //Headless Beast (Nightmare Zone)
		10493, //Headless Beast (Nightmare Zone)
		1277, //Loar Shade
		1276, //Loar Shade
		5282, //Monkey Zombie
		5283, //Monkey Zombie
		5281, //Monkey Zombie
		10812, //Pestilent Bloat
		10813, //Pestilent Bloat
		8359, //Pestilent Bloat
		1280, //Phrin Shade
		1279, //Phrin Shade
		7403, //Repugnant spectre
		7934, //Revenant cyclops
		7938, //Revenant dark beast
		7936, //Revenant demon
		7940, //Revenant dragon
		7931, //Revenant goblin
		7935, //Revenant hellhound
		7933, //Revenant hobgoblin
		7881, //Revenant imp
		7939, //Revenant knight
		11246, //Revenant maledictus
		7937, //Revenant ork
		7932, //Revenant pyrefiend
		1282, //Riyl Shade
		1281, //Riyl Shade
		5631, //Riyl shadow (Temple Trekking)
		7390, //Screaming banshee
		7391, //Screaming twisted banshee
		5633, //Shade (Temple Trekking)
		7258, //Shade
		6740, //Shade
		7604, //Skeletal Mystic
		5237, //Skeleton (Ape Atoll)
		1688, //Skeleton (Barrows)
		1687, //Skeleton (Barrows)
		1685, //Skeleton (Barrows)
		1686, //Skeleton (Barrows)
		7265, //Skeleton (Catacombs of Kourend)
		3565, //Skeleton (Draynor Manor)
		10717, //Skeleton (Forthos Ruin)
		10718, //Skeleton (Forthos Ruin)
		10719, //Skeleton (Forthos Ruin)
		10720, //Skeleton (Forthos Ruin)
		10721, //Skeleton (Forthos Ruin)
		13476, //Skeleton (Lucien's camp)
		13477, //Skeleton (Lucien's camp)
		13478, //Skeleton (Lucien's camp)
		13479, //Skeleton (Lucien's camp)
		3972, //Skeleton (Melzar's Maze)
		3973, //Skeleton (Melzar's Maze)
		3974, //Skeleton (Melzar's Maze)
		8072, //Skeleton (Shayzien Crypts)
		8070, //Skeleton (Shayzien Crypts)
		8071, //Skeleton (Shayzien Crypts)
		2521, //Skeleton (Stronghold of Security)
		2522, //Skeleton (Stronghold of Security)
		2523, //Skeleton (Stronghold of Security)
		2520, //Skeleton (Stronghold of Security)
		2524, //Skeleton (Stronghold of Security)
		2525, //Skeleton (Stronghold of Security)
		2526, //Skeleton (Stronghold of Security)
		6448, //Skeleton (Tarn's Lair)
		6446, //Skeleton (Tarn's Lair)
		6444, //Skeleton (Tarn's Lair)
		6445, //Skeleton (Tarn's Lair)
		6447, //Skeleton (Tarn's Lair)
		6467, //Skeleton (Tarn's Lair)
		6442, //Skeleton (Tarn's Lair)
		6443, //Skeleton (Tarn's Lair)
		6468, //Skeleton (Tarn's Lair)
		924, //Skeleton (The Restless Ghost)
		13495, //Skeleton (Wilderness Agility Course)
		13496, //Skeleton (Wilderness Agility Course)
		13497, //Skeleton (Wilderness Agility Course)
		13498, //Skeleton (Wilderness Agility Course)
		13499, //Skeleton (Wilderness Agility Course)
		13500, //Skeleton (Wilderness Agility Course)
		13501, //Skeleton (Wilderness Agility Course)
		6441, //Skeleton (mage)
		3358, //Skeleton Champion
		12107, //Skeleton Hellhound (Calvar'ion)
		6613, //Skeleton Hellhound (Vet'ion)
		84, //Skeleton Mage
		4319, //Skeleton Mage
		1538, //Skeleton brute
		4491, //Skeleton fremennik
		4494, //Skeleton fremennik
		4497, //Skeleton fremennik
		1540, //Skeleton heavy
		1541, //Skeleton thug
		1539, //Skeleton warlord
		74, //Skeleton
		75, //Skeleton
		76, //Skeleton
		70, //Skeleton
		71, //Skeleton
		72, //Skeleton
		73, //Skeleton
		77, //Skeleton
		78, //Skeleton
		79, //Skeleton
		80, //Skeleton
		81, //Skeleton
		14426, //Skeleton
		14427, //Skeleton
		14428, //Skeleton
		82, //Skeleton
		83, //Skeleton
		872, //Skogre
		878, //Skogre
		879, //Skogre
		882, //Slash Bash
		69, //Summoned Zombie
		6476, //Tarn
		3922, //The Draugen
		8512, //Tormented Soul
		2999, //Tortured soul
		8514, //Trapped Soul
		8529, //Trapped Soul (Nightmare Zone)
		8528, //Trapped Soul (Nightmare Zone)
		1163, //Tree spirit (Lost City)
		3616, //Treus Dayth
		7272, //Twisted Banshee
		4500, //Ulfric
		2145, //Undead Druid
		5648, //Undead Lumberjack
		5656, //Undead Lumberjack
		5665, //Undead Lumberjack
		5673, //Undead Lumberjack
		5681, //Undead Lumberjack
		5689, //Undead Lumberjack
		5697, //Undead Lumberjack
		5705, //Undead Lumberjack
		5713, //Undead Lumberjack
		2993, //Undead chicken
		2992, //Undead cow
		5344, //Undead one
		5342, //Undead one
		5346, //Undead one
		5349, //Undead one
		10589, //Urium Shade
		6143, //Urium Shade
		6612, //Vet'ion
		6611, //Vet'ion
		8058, //Vorkath
		8059, //Vorkath
		866, //Zogre
		64, //Zombie (Entrana Dungeon)
		65, //Zombie (Entrana Dungeon)
		66, //Zombie (Entrana Dungeon)
		67, //Zombie (Entrana Dungeon)
		68, //Zombie (Entrana Dungeon)
		7486, //Zombie (Kourend)
		7485, //Zombie (Kourend)
		7488, //Zombie (Kourend)
		7487, //Zombie (Kourend)
		3980, //Zombie (Melzar's Maze)
		6741, //Zombie (Sepulchre of Death)
		8069, //Zombie (Shayzien Crypts)
		8067, //Zombie (Shayzien Crypts)
		8068, //Zombie (Shayzien Crypts)
		2501, //Zombie (Stronghold of Security)
		2502, //Zombie (Stronghold of Security)
		2503, //Zombie (Stronghold of Security)
		2504, //Zombie (Stronghold of Security)
		2505, //Zombie (Stronghold of Security)
		2506, //Zombie (Stronghold of Security)
		2507, //Zombie (Stronghold of Security)
		2508, //Zombie (Stronghold of Security)
		2509, //Zombie (Stronghold of Security)
		6465, //Zombie (Tarn's Lair)
		6449, //Zombie (Tarn's Lair)
		6450, //Zombie (Tarn's Lair)
		6451, //Zombie (Tarn's Lair)
		6452, //Zombie (Tarn's Lair)
		6453, //Zombie (Tarn's Lair)
		6454, //Zombie (Tarn's Lair)
		6455, //Zombie (Tarn's Lair)
		6456, //Zombie (Tarn's Lair)
		6457, //Zombie (Tarn's Lair)
		6458, //Zombie (Tarn's Lair)
		6459, //Zombie (Tarn's Lair)
		6466, //Zombie (Tarn's Lair)
		6460, //Zombie (Tarn's Lair)
		6461, //Zombie (Tarn's Lair)
		6462, //Zombie (Tarn's Lair)
		6463, //Zombie (Tarn's Lair)
		6464, //Zombie (Tarn's Lair)
		5647, //Zombie (Temple Trekking)
		45, //Zombie (Wilderness)
		46, //Zombie (Wilderness)
		47, //Zombie (Wilderness)
		48, //Zombie (Wilderness)
		6596, //Zombie (Wilderness)
		6597, //Zombie (Wilderness)
		6598, //Zombie (Wilderness)
		59, //Zombie (Wilderness)
		60, //Zombie (Wilderness)
		61, //Zombie (Wilderness)
		62, //Zombie (Wilderness)
		63, //Zombie (Wilderness)
		880, //Zombie (Zogre Flesh Eaters)
		613, //Zombie pirate (Braindeath Island)
		614, //Zombie pirate (Braindeath Island)
		615, //Zombie pirate (Braindeath Island)
		616, //Zombie pirate (Braindeath Island)
		617, //Zombie pirate (Braindeath Island)
		618, //Zombie pirate (Braindeath Island)
		563, //Zombie pirate (Harmony Island)
		575, //Zombie pirate (Harmony Island)
		576, //Zombie pirate (Harmony Island)
		577, //Zombie pirate (Harmony Island)
		578, //Zombie pirate (Harmony Island)
		579, //Zombie pirate (Harmony Island)
		580, //Zombie pirate (Harmony Island)
		581, //Zombie pirate (Harmony Island)
		582, //Zombie pirate (Harmony Island)
		584, //Zombie pirate (Harmony Island)
		586, //Zombie pirate (Harmony Island)
		565, //Zombie pirate (Harmony Island)
		588, //Zombie pirate (Harmony Island)
		590, //Zombie pirate (Harmony Island)
		592, //Zombie pirate (Harmony Island)
		593, //Zombie pirate (Harmony Island)
		595, //Zombie pirate (Harmony Island)
		597, //Zombie pirate (Harmony Island)
		599, //Zombie pirate (Harmony Island)
		567, //Zombie pirate (Harmony Island)
		568, //Zombie pirate (Harmony Island)
		569, //Zombie pirate (Harmony Island)
		571, //Zombie pirate (Harmony Island)
		572, //Zombie pirate (Harmony Island)
		573, //Zombie pirate (Harmony Island)
		574, //Zombie pirate (Harmony Island)
		13489, //Zombie pirate
		13490, //Zombie pirate
		13492, //Zombie pirate
		3969, //Zombie rat
		3970, //Zombie rat
		3971, //Zombie rat
		619, //Zombie swab
		620, //Zombie swab
		621, //Zombie swab
		622, //Zombie swab
		623, //Zombie swab
		624, //Zombie swab
		26, //Zombie
		38, //Zombie
		39, //Zombie
		40, //Zombie
		41, //Zombie
		27, //Zombie
		28, //Zombie
		29, //Zombie
		30, //Zombie
		31, //Zombie
		32, //Zombie
		34, //Zombie
		37, //Zombie
		42, //Zombie
		43, //Zombie
		44, //Zombie
		49, //Zombie
		50, //Zombie
		51, //Zombie
		52, //Zombie
		54, //Zombie
		55, //Zombie
		56, //Zombie
		57, //Zombie
		58, //Zombie
		8062, //Zombified Spawn
		8063 //Zombified Spawn
	);
}
package com.maxhit;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.Skill;

@Getter
@Setter
@AllArgsConstructor
public class NextMaxHitReqs
{
	private Skill skill;
	private double nextRequiredLevel;
	private double nextRequiredStrength;
	private double nextRequiredPrayer;
}

package com.maxhit;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.Client;
import net.runelite.api.Skill;


@RequiredArgsConstructor
public enum MagicSpell
{
    //Most common spells
    ICE_BARRAGE(46, "Ice Barrage", 94, 30, Spellbook.ANCIENT, "ICE"),
    BLOOD_BARRAGE(45, "Blood Barrage", 92, 29, Spellbook.ANCIENT, "BLOOD"),
    SHADOW_BARRAGE(44, "Shadow Barrage", 88, 28, Spellbook.ANCIENT, "SHADOW"),
    SMOKE_BARRAGE(43, "Smoke Barrage", 86, 27, Spellbook.ANCIENT, "SMOKE"),
    ICE_BLITZ(42, "Ice Blitz", 82, 26, Spellbook.ANCIENT, "ICE"),
    BLOOD_BLITZ(41, "Blood Blitz", 80, 25, Spellbook.ANCIENT, "BLOOD"),
    SHADOW_BLITZ(40, "Shadow Blitz", 76, 24, Spellbook.ANCIENT, "SHADOW"),
    SMOKE_BLITZ(39, "Smoke Blitz", 74, 23, Spellbook.ANCIENT, "SMOKE"),
    ICE_BURST(38, "Ice Burst", 70, 22, Spellbook.ANCIENT, "ICE"),
    BLOOD_BURST(37, "Blood Burst", 68, 21, Spellbook.ANCIENT, "BLOOD"),
    SHADOW_BURST(36, "Shadow Burst", 64,18, Spellbook.ANCIENT, "SHADOW"),
    SMOKE_BURST(35, "Smoke Burst", 62, 17, Spellbook.ANCIENT, "SMOKE"),
    ICE_RUSH(34, "Ice Rush", 58, 16, Spellbook.ANCIENT, "ICE"),
    BLOOD_RUSH(33, "Blood Rush", 56, 15, Spellbook.ANCIENT, "BLOOD"),
    SHADOW_RUSH(32, "Shadow Rush", 52, 14, Spellbook.ANCIENT, "SHADOW"),
    SMOKE_RUSH(31, "Smoke Rush", 50, 13, Spellbook.ANCIENT, "SMOKE"),

    // standard spells
    FIRE_SURGE(51, "Fire Surge", 95, 24, Spellbook.STANDARD, "FIRE"),
    EARTH_SURGE(50, "Earth Surge", 90, 23, Spellbook.STANDARD, "EARTH")
		{
			@Override
			public int getBaseMaxHit(Client client)
			{
				int magicLevel = client.getBoostedSkillLevel(Skill.MAGIC);
				if (magicLevel >= FIRE_SURGE.levelRequired){ return FIRE_SURGE.baseMaxHit; }
				return EARTH_SURGE.baseMaxHit;
			}
		},
    WATER_SURGE(49, "Water Surge", 85, 22, Spellbook.STANDARD, "WATER")
		{
			@Override
			public int getBaseMaxHit(Client client)
			{
				int magicLevel = client.getBoostedSkillLevel(Skill.MAGIC);
				if (magicLevel >= FIRE_SURGE.levelRequired){ return FIRE_SURGE.baseMaxHit; }
				if (magicLevel >= EARTH_SURGE.levelRequired) { return EARTH_SURGE.baseMaxHit; }
				return WATER_SURGE.baseMaxHit;
			}
		},
    WIND_SURGE(48, "Wind Surge", 81, 21, Spellbook.STANDARD, "AIR")
		{
			@Override
			public int getBaseMaxHit(Client client)
			{
				int magicLevel = client.getBoostedSkillLevel(Skill.MAGIC);
				if (magicLevel >= FIRE_SURGE.levelRequired){ return FIRE_SURGE.baseMaxHit; }
				if (magicLevel >= EARTH_SURGE.levelRequired) { return EARTH_SURGE.baseMaxHit; }
				if (magicLevel >= WATER_SURGE.levelRequired) { return WATER_SURGE.baseMaxHit; }
				return WIND_SURGE.baseMaxHit;
			}
		},
    FIRE_WAVE(16, "Fire Wave", 75, 20, Spellbook.STANDARD, "FIRE"),
    EARTH_WAVE(15, "Earth Wave", 70, 19, Spellbook.STANDARD, "EARTH")
		{
			@Override
			public int getBaseMaxHit(Client client)
			{
				int magicLevel = client.getBoostedSkillLevel(Skill.MAGIC);
				if (magicLevel >= FIRE_WAVE.levelRequired){ return FIRE_WAVE.baseMaxHit; }
				return EARTH_WAVE.baseMaxHit;
			}
		},
    WATER_WAVE(14, "Water Wave", 65, 18, Spellbook.STANDARD, "WATER")
		{
			@Override
			public int getBaseMaxHit(Client client)
			{
				int magicLevel = client.getBoostedSkillLevel(Skill.MAGIC);
				if (magicLevel >= FIRE_WAVE.levelRequired){ return FIRE_WAVE.baseMaxHit; }
				if (magicLevel >= EARTH_WAVE.levelRequired) { return EARTH_WAVE.baseMaxHit; }
				return WATER_WAVE.baseMaxHit;
			}
		},
    WIND_WAVE(13, "Wind Wave", 62, 17, Spellbook.STANDARD, "AIR")
		{
			@Override
			public int getBaseMaxHit(Client client)
			{
				int magicLevel = client.getBoostedSkillLevel(Skill.MAGIC);
				if (magicLevel >= FIRE_WAVE.levelRequired){ return FIRE_WAVE.baseMaxHit; }
				if (magicLevel >= EARTH_WAVE.levelRequired) { return EARTH_WAVE.baseMaxHit; }
				if (magicLevel >= WATER_WAVE.levelRequired) { return WATER_WAVE.baseMaxHit; }
				return WIND_WAVE.baseMaxHit;
			}
		},
    FIRE_BLAST(12, "Fire Blast", 59, 16, Spellbook.STANDARD, "FIRE"),
    EARTH_BLAST(11, "Earth Blast", 53, 15, Spellbook.STANDARD, "EARTH")
		{
			@Override
			public int getBaseMaxHit(Client client)
			{
				int magicLevel = client.getBoostedSkillLevel(Skill.MAGIC);
				if (magicLevel >= FIRE_BLAST.levelRequired){ return 16; }
				return EARTH_BLAST.baseMaxHit;
			}
		},
    WATER_BLAST(10, "Water Blast", 47, 14, Spellbook.STANDARD, "WATER")
		{
			@Override
			public int getBaseMaxHit(Client client)
			{
				int magicLevel = client.getBoostedSkillLevel(Skill.MAGIC);
				if (magicLevel >= FIRE_BLAST.levelRequired){ return FIRE_BLAST.baseMaxHit; }
				if (magicLevel >= EARTH_BLAST.levelRequired) { return EARTH_BLAST.baseMaxHit; }
				return WATER_BLAST.baseMaxHit;
			}
		},
    WIND_BLAST(9, "Wind Blast", 41, 13, Spellbook.STANDARD, "AIR")
		{
			@Override
			public int getBaseMaxHit(Client client)
			{
				int magicLevel = client.getBoostedSkillLevel(Skill.MAGIC);
				if (magicLevel >= FIRE_BLAST.levelRequired){ return FIRE_BLAST.baseMaxHit; }
				if (magicLevel >= EARTH_BLAST.levelRequired) { return EARTH_BLAST.baseMaxHit; }
				if (magicLevel >= WATER_BLAST.levelRequired) { return WATER_BLAST.baseMaxHit; }
				return WIND_BLAST.baseMaxHit;
			}
		},
    FIRE_BOLT(8, "Fire Bolt", 35, 12, Spellbook.STANDARD, "FIRE"),
    EARTH_BOLT(7, "Earth Bolt", 29, 11, Spellbook.STANDARD, "EARTH")
		{
			@Override
			public int getBaseMaxHit(Client client)
			{
				int magicLevel = client.getBoostedSkillLevel(Skill.MAGIC);
				if (magicLevel >= FIRE_BOLT.levelRequired){ return FIRE_BOLT.baseMaxHit; }
				return EARTH_BOLT.baseMaxHit;
			}
		},
    WATER_BOLT(6, "Water Bolt", 23, 10, Spellbook.STANDARD, "WATER")
		{
			@Override
			public int getBaseMaxHit(Client client)
			{
				int magicLevel = client.getBoostedSkillLevel(Skill.MAGIC);
				if (magicLevel >= FIRE_BOLT.levelRequired){ return FIRE_BOLT.baseMaxHit; }
				if (magicLevel >= EARTH_BOLT.levelRequired) { return EARTH_BOLT.baseMaxHit; }
				return WATER_BOLT.baseMaxHit;
			}
		},
    WIND_BOLT(5, "Wind Bolt", 17, 9, Spellbook.STANDARD, "AIR")
		{
			@Override
			public int getBaseMaxHit(Client client)
			{
				int magicLevel = client.getBoostedSkillLevel(Skill.MAGIC);
				if (magicLevel >= FIRE_BOLT.levelRequired){ return FIRE_BOLT.baseMaxHit; }
				if (magicLevel >= EARTH_BOLT.levelRequired) { return EARTH_BOLT.baseMaxHit; }
				if (magicLevel >= WATER_BOLT.levelRequired) { return WATER_BOLT.baseMaxHit; }
				return WIND_BOLT.baseMaxHit;
			}
		},
    FIRE_STRIKE(4, "Fire Strike", 13, 8, Spellbook.STANDARD, "FIRE"),
    EARTH_STRIKE(3, "Earth Strike", 9, 6, Spellbook.STANDARD, "EARTH")
		{
			@Override
			public int getBaseMaxHit(Client client)
			{
				int magicLevel = client.getBoostedSkillLevel(Skill.MAGIC);
				if (magicLevel >= FIRE_STRIKE.levelRequired){ return FIRE_STRIKE.baseMaxHit; }
				return 6;
			}
		},
    WATER_STRIKE(2, "Water Strike", 5, 4, Spellbook.STANDARD, "WATER")
		{
			@Override
			public int getBaseMaxHit(Client client)
			{
				int magicLevel = client.getBoostedSkillLevel(Skill.MAGIC);
				if (magicLevel >= FIRE_STRIKE.levelRequired){ return FIRE_STRIKE.baseMaxHit; }
				if (magicLevel >= EARTH_STRIKE.levelRequired) { return EARTH_STRIKE.baseMaxHit; }
				return WATER_STRIKE.baseMaxHit;
			}
		},

    WIND_STRIKE(1, "Wind Strike", 1, 2, Spellbook.STANDARD, "AIR")
		{
			@Override
			public int getBaseMaxHit(Client client)
			{
				int magicLevel = client.getBoostedSkillLevel(Skill.MAGIC);
				if (magicLevel >= FIRE_STRIKE.levelRequired){ return FIRE_STRIKE.baseMaxHit; }
				if (magicLevel >= EARTH_STRIKE.levelRequired) { return EARTH_STRIKE.baseMaxHit; }
				if (magicLevel >= WATER_STRIKE.levelRequired) { return WATER_STRIKE.baseMaxHit; }
				return WIND_STRIKE.baseMaxHit;
			}
		},

    // standard but not autocast without special staff
    FLAMES_OF_ZAMORAK(20, "Flames of Zamorak", 60, 20, Spellbook.STANDARD, "GOD"),
    CLAWS_OF_GUTHIX(19, "Claws of Guthix", 60, 20, Spellbook.STANDARD, "GOD"),
    SARADOMIN_STRIKE(52, "Saradomin Strike", 60, 20, Spellbook.STANDARD, "GOD"),
    CRUMBLE_UNDEAD(17, "Crumble Undead", 39, 15, Spellbook.STANDARD, ""),
    IBAN_BLAST(47, "Iban Blast", 50, 25, Spellbook.STANDARD, ""),
    MAGIC_DART(18, "Magic Dart", 50, 10, Spellbook.STANDARD, ""),

    // arceuus
    INFERIOR_DEMONBANE(53, "Inferior Demonbane", 44, 16, Spellbook.ARCEUUS, ""),
    SUPERIOR_DEMONBANE(54, "Superior Demonbane", 62, 23, Spellbook.ARCEUUS, ""),
    DARK_DEMONBANE(55, "Dark Demonbane", 82, 30, Spellbook.ARCEUUS, ""),
    GHOSTLY_GRASP(56, "Ghostly Grasp", 35, 12, Spellbook.ARCEUUS, ""),
    SKELETAL_GRASP(57, "Skeletal Grasp", 56, 17, Spellbook.ARCEUUS, ""),
    UNDEAD_GRASP(58, "Undead Grasp", 79, 24, Spellbook.ARCEUUS, ""),
    ;

	@Getter
    private final int varbValue;

	@Getter
    private final String displayName;

	@Getter
	private final int levelRequired;

    private final int baseMaxHit;

	public int getBaseMaxHit(Client client)
	{
		return baseMaxHit;
	}

	@Getter
    private final Spellbook spellbook;

	@Getter
    private final String element;

}
package com.maxhit;

import com.maxhit.calculators.SpecialAttackCalculator;
import java.time.Duration;
import java.time.Instant;
import javax.inject.Inject;
import java.util.HashMap;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import com.google.inject.Provides;
import net.runelite.api.Client;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.GameState;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.Skill;
import net.runelite.api.Actor;
import net.runelite.api.Hitsplat;
import net.runelite.api.NPC;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.events.StatChanged;
import net.runelite.api.events.VarbitChanged;
import net.runelite.api.events.HitsplatApplied;
import net.runelite.api.gameval.InventoryID;
import net.runelite.api.gameval.VarPlayerID;
import net.runelite.api.gameval.VarbitID;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import com.maxhit.calculators.MaxHitCalculator;
import com.maxhit.calculators.MaxHitCalculatorFactory;
import com.maxhit.styles.AttackStyle;
import com.maxhit.styles.StyleFactory;
import com.maxhit.styles.CombatStyle;



@PluginDescriptor(
	name = "Max Hit",
	description = "Displays current max hit",
	enabledByDefault = true,
	tags = {"max, hit, spec, pvp, magic, spell, combat, gear"}
)

@Slf4j
public class MaxHitPlugin extends Plugin
{

	private static final int WEAPON_SPECIAL_REQS = 906;
	private static final Duration WAIT = Duration.ofSeconds(5);

	@Inject
	private Client client;
	@Inject
	private ClientThread clientThread;
	@Inject
	private OverlayManager overlayManager;
	@Inject
	private ItemManager itemManager;
	@Inject
	private MaxHitOverlay myOverlay;
	@Inject
	private MaxHitConfig config;

	@Provides
	MaxHitConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(MaxHitConfig.class);
	}

	private Instant lastTime;
	private ItemContainer equippedItems;
	private MaxHitCalculatorFactory maxHitCalculatorFactory;
	@Getter
	private MaxHitCalculator maxHitCalculator;
	@Getter
	private SpecialAttackCalculator specialAttackCalculator;
	//Might be better to break this out into own class
	@Getter
	private boolean isWieldingSpecialAttackWeapon = false;
	@Getter
	public HashMap<String, InventoryWeapon> map;

	@Override
	public void startUp() throws Exception
	{
		overlayManager.add(myOverlay);
		clientThread.invokeLater(() ->
		{
			maxHitCalculatorFactory = new MaxHitCalculatorFactory(client, itemManager);
			specialAttackCalculator = new SpecialAttackCalculator(client);
			if (!client.getGameState().equals(GameState.LOGGED_IN))
			{
				return;
			}

			equippedItems = client.getItemContainer(InventoryID.WORN);
			if (equippedItems == null)
			{
				return;
			}
			// Safe to assume combat Varbits have been set here?
			getMaxHit();

		});
	}

	@Override
	public void shutDown() throws Exception
	{
		overlayManager.remove(myOverlay);
		lastTime = null;
		isWieldingSpecialAttackWeapon = false;
		maxHitCalculatorFactory = null;
		specialAttackCalculator = null;
		maxHitCalculator = null;
	}

	@Subscribe
	public void onItemContainerChanged(final ItemContainerChanged event)
	{
		//If equipment is changed, recalculate
		if (event.getItemContainer() != client.getItemContainer(InventoryID.WORN))
		{
			return;
		}

		if (maxHitCalculator == null)
		{
			return;
		}
		equippedItems = event.getItemContainer();
		maxHitCalculator.setEquippedItems(equippedItems);
		maxHitCalculator.calculateMaxHit();
		specialAttackCalculator.setEquippedItems(equippedItems);
		checkIsWieldingSpecialAttackWeapon();
	}

	//Update on stat change
	@Subscribe
	public void onStatChanged(StatChanged event)
	{
		// Called upon XP gain, level gained, or boosted level gained
		// Question is, should this be called every time i.e. every attack or just upon level up?
		if (maxHitCalculator == null)
		{
			return;
		}
		Skill[] skills = {
			Skill.STRENGTH, Skill.RANGED, Skill.MAGIC, Skill.HITPOINTS
		};
		for (Skill skill : skills)
		{
			if (event.getSkill() != maxHitCalculator.getSkill())
			{
				continue;
			}
			maxHitCalculator.calculateMaxHit();
			return;
		}
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		// COM_MODE = Attack Style
		// COMBAT_WEAPON_CATEGORY = Weapon Style
		if (event.getVarpId() == VarPlayerID.COM_MODE
			|| event.getVarbitId() == VarPlayerID.COM_STANCE
			|| event.getVarbitId() == VarbitID.COMBAT_WEAPON_CATEGORY
			|| event.getVarbitId() == VarbitID.AUTOCAST_DEFMODE)
		{
			getMaxHit();
		}
		else if (event.getVarbitId() == VarbitID.AUTOCAST_SPELL ||
				 event.getVarbitId() == VarbitID.PRAYER_ALLACTIVE)
		{
			maxHitCalculator.calculateMaxHit();
		}
	}

	@Subscribe
	public void onGameTick(GameTick gameTick)
	{
		if (maxHitCalculator.opponent  != null
			&& lastTime != null
			&& client.getLocalPlayer().getInteracting() == null)
		{
			if (Duration.between(lastTime, Instant.now()).compareTo(WAIT) > 0)
			{
				maxHitCalculator.opponent  = null;
				maxHitCalculator.calculateMaxHit();
			}
		}
	}

	@Subscribe
	public void onHitsplatApplied(HitsplatApplied hitsplatApplied)
	{
		if (maxHitCalculator == null)
		{
			return;
		}
		Actor actor = hitsplatApplied.getActor();
		Hitsplat hitsplat = hitsplatApplied.getHitsplat();
		if (actor == null)
		{
			return;
		}
		if (!(actor instanceof NPC))
		{
			return;
		}
		if (hitsplat.isOthers())
		{
			return;
		}
		lastTime = Instant.now();
		maxHitCalculator.opponent = actor;
		maxHitCalculator.calculateMaxHit();

	}

	private void getMaxHit()
	{
		AttackStyle attackStyle = StyleFactory.getAttackStyle(client);
		if (attackStyle == null || attackStyle == AttackStyle.OTHER)
		{
			return;
		}

		CombatStyle combatStyle = StyleFactory.getCombatType(attackStyle);
		maxHitCalculator = maxHitCalculatorFactory.create(combatStyle, attackStyle);
		maxHitCalculator.calculateMaxHit();
	}

	private void checkIsWieldingSpecialAttackWeapon()
	{
		if (equippedItems == null)
		{
			log.debug("Equipped items null");
			return;
		}
		Item weapon = equippedItems.getItem(EquipmentInventorySlot.WEAPON.getSlotIdx());
		if (weapon == null)
		{
			log.debug("Weapon null");
			return;
		}
		isWieldingSpecialAttackWeapon = client.getEnum(WEAPON_SPECIAL_REQS).getIntValue(weapon.getId()) > 0;
	}
}
/*
 * Copyright (c) 2017, honeyhoney <https://github.com/honeyhoney>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.maxhit.styles;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum AttackStyle
{
    ACCURATE("Accurate"),
    AGGRESSIVE("Aggressive"),
    DEFENSIVE("Defensive"),
    CONTROLLED("Controlled"),
    RANGING("Ranging"),
    LONGRANGE("Longrange"),
    CASTING("Casting"),
    DEFENSIVE_CASTING("Defensive Casting"),
    OTHER("Other");

    private final String name;
}


package com.maxhit.styles;
// Copied from https://github.com/cwjoshuak/rl-attack-types/blob/master/src/main/java/com/cwjoshuak/AttackType.java


import com.google.common.base.Preconditions;
import lombok.Getter;

enum WeaponAttackType
{
	UNARMED(0, AttackType.CRUSH, AttackType.CRUSH, null, AttackType.CRUSH),
	// AXE
	TYPE_1(1, AttackType.SLASH, AttackType.SLASH, AttackType.CRUSH, AttackType.SLASH),
	// BLUNT
	TYPE_2(2, AttackType.CRUSH, AttackType.CRUSH, null, AttackType.CRUSH),
	// BOW
	TYPE_3(3, AttackType.RANGED, AttackType.RANGED, null, AttackType.RANGED),
	// CLAW
	TYPE_4(4, AttackType.SLASH, AttackType.SLASH, AttackType.STAB, AttackType.SLASH),
	// CROSSBOW
	TYPE_5(5, AttackType.RANGED, AttackType.RANGED, null, AttackType.RANGED),
	//SALAMANDER
	TYPE_6(6, AttackType.SLASH, AttackType.RANGED, AttackType.MAGIC, null),
	// CHINCHOMPA
	TYPE_7(7, AttackType.RANGED, AttackType.RANGED, null, AttackType.RANGED),
	// GUN
	TYPE_8(8, AttackType.NONE, AttackType.CRUSH, null, null),
	// SLASH SWORD
	TYPE_9(9, AttackType.SLASH, AttackType.SLASH, AttackType.STAB, AttackType.SLASH),
	// TWO-HANDED SWORD
	TYPE_10(10, AttackType.SLASH, AttackType.SLASH, AttackType.CRUSH, AttackType.SLASH),
	// PICKAXE
	TYPE_11(11, AttackType.STAB, AttackType.STAB, AttackType.CRUSH, AttackType.STAB),
	// POLEARM
	TYPE_12(12, AttackType.STAB, AttackType.SLASH, null, AttackType.STAB),
	// POLESTAFF
	TYPE_13(13, AttackType.CRUSH, AttackType.CRUSH, null, AttackType.CRUSH),
	// SCYTHE
	TYPE_14(14, AttackType.SLASH, AttackType.SLASH, AttackType.CRUSH, AttackType.SLASH),
	// SPEAR
	TYPE_15(15, AttackType.STAB, AttackType.SLASH, AttackType.CRUSH, AttackType.STAB),
	// SPIKED
	TYPE_16(16, AttackType.CRUSH, AttackType.CRUSH, AttackType.STAB, AttackType.CRUSH),
	// STAB SWORD
	TYPE_17(17, AttackType.STAB, AttackType.STAB, AttackType.SLASH, AttackType.STAB),
	// STAFF
	TYPE_18(18, AttackType.CRUSH, AttackType.CRUSH, null, AttackType.CRUSH, AttackType.MAGIC, AttackType.MAGIC),
	// THROWN
	TYPE_19(19, AttackType.RANGED, AttackType.RANGED, null, AttackType.RANGED),
	// WHIP
	TYPE_20(20, AttackType.SLASH, AttackType.SLASH, null, AttackType.SLASH),
	// BLADED STAFF
	TYPE_21(21, AttackType.STAB, AttackType.SLASH, null, AttackType.CRUSH, AttackType.MAGIC, AttackType.MAGIC),

	TYPE_22(22, AttackType.STAB, AttackType.SLASH, null, AttackType.CRUSH, AttackType.MAGIC, AttackType.MAGIC),
	// TWO-HANDED SWORD (GODSWORD)
	TYPE_23(23, AttackType.SLASH, AttackType.SLASH, AttackType.CRUSH, AttackType.SLASH),
	// POWERED STAFF
	TYPE_24(24, AttackType.MAGIC, AttackType.MAGIC, null, AttackType.MAGIC),
	TYPE_25(25, AttackType.STAB, AttackType.SLASH, AttackType.CRUSH, AttackType.STAB),
	TYPE_26(26, AttackType.STAB, AttackType.SLASH, null, AttackType.STAB),
	TYPE_27(27, AttackType.CRUSH, AttackType.CRUSH, null, AttackType.CRUSH),
	// BULWARK
	TYPE_28(28, AttackType.CRUSH, null, null, AttackType.NONE),
	TYPE_29(29, AttackType.MAGIC, AttackType.MAGIC, null, AttackType.MAGIC),
	TYPE_30(30, AttackType.STAB, AttackType.STAB, AttackType.CRUSH, AttackType.STAB);

	@Getter
	private final AttackType[] attackTypes;
	WeaponAttackType(int id, AttackType... attackTypes)
	{
		Preconditions.checkArgument(id == ordinal());
		Preconditions.checkArgument(attackTypes.length == 4 || attackTypes.length == 6,
			"WeaponType " + this + " does not have exactly 4 or 6 attack style arguments");
		this.attackTypes = attackTypes;
	}

	public static WeaponAttackType getWeaponAttackType(int id)
	{
		if (id < 0 || id > values().length)
		{
			return null;
		}
		return values()[id];
	}
}

package com.maxhit.styles;

// Copied from https://github.com/cwjoshuak/rl-attack-types/blob/master/src/main/java/com/cwjoshuak/AttackType.java

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public enum AttackType
{
	CRUSH("Crush"),
	SLASH("Slash"),
	STAB("Stab"),
	RANGED("Ranged"),
	MAGIC("Magic"),
	NONE("None");

	private final String name;
}

package com.maxhit.styles;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum CombatStyle {
    MELEE,
    RANGED,
    MAGE,
    TRIDENT,
}

package com.maxhit.styles;

import lombok.Setter;
import net.runelite.api.Client;
import net.runelite.api.EnumID;
import net.runelite.api.ParamID;
import net.runelite.api.StructComposition;
import lombok.extern.slf4j.Slf4j;
import static com.maxhit.styles.AttackStyle.OTHER;
import net.runelite.api.gameval.VarPlayerID;
import net.runelite.api.gameval.VarbitID;

@Slf4j
@Setter
public class StyleFactory {

	public static AttackType getAttackType(Client client)
	{
		int comMode = client.getVarpValue(VarPlayerID.COM_MODE);
		int weaponCategory = client.getVarbitValue(VarbitID.COMBAT_WEAPON_CATEGORY);
		int castingMode = client.getVarbitValue(VarbitID.AUTOCAST_DEFMODE);
		boolean isDefensiveCasting = (castingMode == 1 && comMode == 4);
		AttackType[] attackTypes = WeaponAttackType.getWeaponAttackType(weaponCategory).getAttackTypes();

		if (comMode < attackTypes.length)
		{
			return attackTypes[comMode];
		}
		else if (comMode == 4 || isDefensiveCasting)
		{
			return AttackType.MAGIC;
		}

		return AttackType.NONE;
	}

    private static AttackStyle[] getAttackStyles(Client client, int currentWeaponCategory)
    {
        int BLUE_MOON_SPEAR = 22;
        int KERIS_PARTISAN = 30;
        int weaponStyleEnum = client.getEnum(EnumID.WEAPON_STYLES).getIntValue(currentWeaponCategory);
        if (weaponStyleEnum == -1)
        {
            // Blue moon spear

            if (currentWeaponCategory == BLUE_MOON_SPEAR)
            {
                return new AttackStyle[]{
                        AttackStyle.ACCURATE,
                        AttackStyle.AGGRESSIVE,
                        null,
                        AttackStyle.DEFENSIVE,
                        AttackStyle.CASTING,
                        AttackStyle.DEFENSIVE_CASTING
                };
            }

            // Partisan
            if (currentWeaponCategory == KERIS_PARTISAN)
            {
                return new AttackStyle[]{
                        AttackStyle.ACCURATE,
                        AttackStyle.AGGRESSIVE,
                        AttackStyle.AGGRESSIVE,
                        AttackStyle.DEFENSIVE
                };
            }
            return new AttackStyle[0];
        }
        int[] weaponStyleStructs = client.getEnum(weaponStyleEnum).getIntVals();

        AttackStyle[] styles = new AttackStyle[weaponStyleStructs.length];
        int i = 0;
        for (int style : weaponStyleStructs)
        {
            StructComposition attackStyleStruct = client.getStructComposition(style);
            String attackStyleName = attackStyleStruct.getStringValue(ParamID.ATTACK_STYLE_NAME);

            AttackStyle attackStyle = AttackStyle.valueOf(attackStyleName.toUpperCase());
            if (attackStyle == AttackStyle.OTHER)
            {
                // "Other" is used for no style
                ++i;
                continue;
            }

            // "Defensive" is used for Defensive and also Defensive casting
            if (i == 5 && attackStyle == AttackStyle.DEFENSIVE)
            {
                attackStyle = AttackStyle.DEFENSIVE_CASTING;
            }

            styles[i++] = attackStyle;
        }
        return styles;
    }

	public static AttackStyle getAttackStyle(Client client)
	{
		int comMode = client.getVarpValue(VarPlayerID.COM_MODE);
		int weaponCategory = client.getVarbitValue(VarbitID.COMBAT_WEAPON_CATEGORY);
		int castingMode = client.getVarbitValue(VarbitID.AUTOCAST_DEFMODE);
		AttackStyle[] attackStyles = StyleFactory.getAttackStyles(client, weaponCategory);
		AttackStyle attackStyle = null;
		if (comMode < attackStyles.length)
		{
			// from script4525
			// Even though the client has 5 attack styles for Staffs, only attack styles 0-4 are used, with an additional
			// casting mode set for defensive casting
			if (comMode == 4)
				comMode += castingMode;

			attackStyle = attackStyles[comMode];

		}
		if (attackStyle == null)
			attackStyle = OTHER;
		return attackStyle;
	}

	//Combat type of equipped weapon (Melee, ranged, magic, other)
	public static CombatStyle getCombatType(AttackStyle attackStyle) {
		if (attackStyle == AttackStyle.ACCURATE ||
			attackStyle == AttackStyle.AGGRESSIVE ||
			attackStyle == AttackStyle.CONTROLLED ||
			attackStyle == AttackStyle.DEFENSIVE)
			return CombatStyle.MELEE;
		if (attackStyle.getName().contains("ang")) return CombatStyle.RANGED;
		if (attackStyle.getName().contains("Casting")) return CombatStyle.MAGE;
		log.debug("Null combat stlye: {}", attackStyle.getName());
		return null;
	}
}

  package com.maxhit;

import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.api.Prayer;
import net.runelite.api.gameval.VarbitID;

// Based off of https://github.com/runelite/runelite/blob/master/runelite-client/src/main/java/net/runelite/client/plugins/prayer/PrayerType.java
@AllArgsConstructor
@Getter
public enum PrayerType
{
    // Melee
    BURST_OF_STRENGTH(Prayer.BURST_OF_STRENGTH),
    SUPERHUMAN_STRENGTH(Prayer.SUPERHUMAN_STRENGTH),
    ULTIMATE_STRENGTH(Prayer.ULTIMATE_STRENGTH),
    CHIVALRY(Prayer.CHIVALRY),
    PIETY(Prayer.PIETY),

    //Ranged
    SHARP_EYE(Prayer.SHARP_EYE),
    HAWK_EYE(Prayer.HAWK_EYE),
    EAGLE_EYE(Prayer.EAGLE_EYE)
            {
                @Override
                public boolean isEnabled(Client client)
                {
                    return !DEADEYE.isEnabled(client);
                }
            },
    DEADEYE(Prayer.DEADEYE)
            {
                @Override
                public boolean isEnabled(Client client)
                {
                    boolean inLms = client.getVarbitValue(VarbitID.BR_INGAME) != 0;
                    boolean deadeye = client.getVarbitValue(VarbitID.PRAYER_DEADEYE_UNLOCKED) != 0;
                    return deadeye && !inLms;
                }
            },
    RIGOUR(Prayer.RIGOUR),

    //Magic
    MYSTIC_WILL(Prayer.MYSTIC_WILL),
    MYSTIC_LORE(Prayer.MYSTIC_LORE),
    MYSTIC_MIGHT(Prayer.MYSTIC_MIGHT)
            {
                @Override
                public boolean isEnabled(Client client)
                {
                    return !MYSTIC_VIGOUR.isEnabled(client);
                }
            },
    MYSTIC_VIGOUR(Prayer.MYSTIC_VIGOUR)
            {
                @Override
                public boolean isEnabled(Client client)
                {
                    boolean inLms = client.getVarbitValue(VarbitID.BR_INGAME) != 0;
                    boolean vigour = client.getVarbitValue(VarbitID.PRAYER_MYSTIC_VIGOUR_UNLOCKED) != 0;
                    return vigour && !inLms;
                }
            },
    AUGURY(Prayer.AUGURY),

    // Leagues
    RP_ANCIENT_STRENGTH(Prayer.RP_ANCIENT_STRENGTH),
    RP_ANCIENT_SIGHT(Prayer.RP_ANCIENT_SIGHT),
    RP_TRINITAS(Prayer.RP_TRINITAS),
    RP_DECIMATE(Prayer.RP_DECIMATE),
    RP_ANNIHILATE(Prayer.RP_ANNIHILATE),
    RP_VAPORISE(Prayer.RP_VAPORISE),
    ;

    private final Prayer prayer;

    public boolean isEnabled(Client client)
    {
        return true;
    }

    public boolean isActive(Client client)
    {
        return client.isPrayerActive(prayer) && isEnabled(client);
    }
}

package com.maxhit.regions;

import com.google.common.collect.ImmutableSet;
import java.util.Set;

public class TombsRegions
{
	private static final int TOA_NEXUS_REGION_ID = 14160;
	private static final int BABA_PUZZLE_ROOM_REGION_ID = 15186;
	private static final int BABA_ROOM_REGION_ID = 15188;
	private static final int KEPHRI_PUZZLE_ROOM_REGION_ID = 14162;
	private static final int KEPHRI_ROOM_REGION_ID = 14164;
	private static final int AKKHA_PUZZLE_ROOM_REGION_ID = 14674;
	private static final int AKKHA_ROOM_REGION_ID = 14676;
	private static final int ZEBAK_PUZZLE_ROOM_REGION_ID = 15698;
	private static final int ZEBAK_ROOM_REGION_ID = 15700;
	private static final int WARDENS_OBELISK_ROOM_REGION_ID = 15184;
	private static final int WARDENS_P3_ROOM_REGION_ID = 15696;
	private static final int TOA_LOOT_ROOM_REGION_ID = 14672;
	private static final int TOA_LOBBY_REGION_ID = 13454;
	public static final Set<Integer> TOA_ROOM_IDS = ImmutableSet.of(
		TOA_NEXUS_REGION_ID,
		BABA_PUZZLE_ROOM_REGION_ID,
		BABA_ROOM_REGION_ID,
		KEPHRI_PUZZLE_ROOM_REGION_ID,
		KEPHRI_ROOM_REGION_ID,
		AKKHA_PUZZLE_ROOM_REGION_ID,
		AKKHA_ROOM_REGION_ID,
		ZEBAK_PUZZLE_ROOM_REGION_ID,
		ZEBAK_ROOM_REGION_ID,
		WARDENS_OBELISK_ROOM_REGION_ID,
		WARDENS_P3_ROOM_REGION_ID,
		TOA_LOOT_ROOM_REGION_ID,
		TOA_LOBBY_REGION_ID
	);
}

package com.maxhit.sets;

import java.util.Collection;
import java.util.Map;
import java.util.Set;
import net.runelite.api.Client;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.gameval.ItemID;

public class ObsidianSet extends EquipmentSet
{

	public ObsidianSet(Client client)
	{
		this.client = client;
	}

	@Override
	public Map<EquipmentInventorySlot, Collection<Integer>> getEquipment()
	{
		return Map.of(
			EquipmentInventorySlot.HEAD, Set.of(ItemID.OBSIDIAN_HELMET),
			EquipmentInventorySlot.BODY, Set.of(ItemID.OBSIDIAN_PLATEBODY),
			EquipmentInventorySlot.LEGS, Set.of(ItemID.OBSIDIAN_PLATELEGS),
			EquipmentInventorySlot.WEAPON, Set.of(
				ItemID.TZHAAR_SPLITSWORD,
				ItemID.BR_OBSIDIAN_SWORD,
				ItemID.TZHAAR_KNIFE,
				ItemID.TZHAAR_MACE,
				ItemID.TZHAAR_MAUL,
				ItemID.TZHAAR_MAUL_T
			)
			);
	}

	@Override
	public double getMultiplier()
	{
		return 1.1;
	}
}

package com.maxhit.sets;

import java.util.Collection;
import java.util.Map;
import java.util.Set;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.gameval.ItemID;

public class BerserkerNecklaceSet extends EquipmentSet
{
	@Override
	protected Map<EquipmentInventorySlot, Collection<Integer>> getEquipment()
	{
		return Map.of(EquipmentInventorySlot.AMULET, Set.of(
			ItemID.JEWL_BESERKER_NECKLACE,
			ItemID.JEWL_BESERKER_NECKLACE_ORNAMENT
		));
	}

	@Override
	public double getMultiplier()
	{
		return 0.2;
	}
}

package com.maxhit.sets;

//Used for determining if the user is wearing a set

import java.util.Collection;
import java.util.Map;
import java.util.Set;
import lombok.Setter;
import net.runelite.api.Client;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.ItemContainer;
import net.runelite.api.Item;


public abstract class EquipmentSet
{
	protected Client client;

	@Setter
	protected static ItemContainer equippedItems;

	protected abstract Map<EquipmentInventorySlot, Collection<Integer>> getEquipment();

	public abstract double getMultiplier();

	public boolean isWearingSet()
	{
		if (equippedItems == null)
		{
			return false;
		}

		for (Map.Entry<EquipmentInventorySlot, Collection<Integer>> requirement : getEquipment().entrySet())
		{
 			final EquipmentInventorySlot slot = requirement.getKey();
			final Collection<Integer> validItemIds = requirement.getValue();

			final Item equippedItem = equippedItems.getItem(slot.getSlotIdx());

			if (equippedItem == null || !validItemIds.contains(equippedItem.getId()))
			{
				return false;
			}
		}

		return true;
	}

}

package com.maxhit.sets;

import com.google.common.collect.ImmutableSet;
import java.util.Collection;
import java.util.Map;
import java.util.Set;
import net.runelite.api.Client;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.Skill;
import net.runelite.api.gameval.ItemID;
import net.runelite.client.game.ItemVariationMapping;

public class VoidSet extends EquipmentSet
{
	protected final Skill skill;

	public VoidSet(Client client, Skill skill)
	{
		this.client = client;
		this.skill = skill;
	}

	protected Collection<Integer> getHelmIds()
	{
		switch (skill)
		{
			case STRENGTH:
				return ItemVariationMapping.getVariations(ItemID.GAME_PEST_MELEE_HELM);
			case RANGED:
				return ItemVariationMapping.getVariations(ItemID.GAME_PEST_ARCHER_HELM);
			case MAGIC:
				return ItemVariationMapping.getVariations(ItemID.GAME_PEST_MAGE_HELM);
		}
		return null;
	}

	@Override
	public Map<EquipmentInventorySlot, Collection<Integer>> getEquipment()
	{
		return Map.of(
			EquipmentInventorySlot.HEAD, getHelmIds(),
			EquipmentInventorySlot.BODY, ItemVariationMapping.getVariations(ItemID.PEST_VOID_KNIGHT_TOP),
			EquipmentInventorySlot.LEGS, ItemVariationMapping.getVariations(ItemID.PEST_VOID_KNIGHT_ROBES),
			EquipmentInventorySlot.GLOVES, ItemVariationMapping.getVariations(ItemID.PEST_VOID_KNIGHT_GLOVES)
		);
	}

	@Override
	public double getMultiplier()
	{
		switch(skill)
		{
			case STRENGTH:
			case RANGED:
				return 1.1;
		}
		return 1.0;
	}
}

package com.maxhit.sets;

import com.google.common.collect.ImmutableSet;
import java.util.Collection;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import net.runelite.api.Client;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.Skill;
import net.runelite.api.gameval.ItemID;
import net.runelite.client.game.ItemVariationMapping;

public class DharokSet extends EquipmentSet
{
	public DharokSet(Client client)
	{
		this.client = client;
	}

	@Override
	public Map<EquipmentInventorySlot, Collection<Integer>> getEquipment()
	{
		return Map.of(
			EquipmentInventorySlot.HEAD, ItemVariationMapping.getVariations(ItemID.BARROWS_DHAROK_HEAD),
			EquipmentInventorySlot.BODY, ItemVariationMapping.getVariations(ItemID.BARROWS_DHAROK_BODY),
			EquipmentInventorySlot.LEGS, ItemVariationMapping.getVariations(ItemID.BARROWS_DHAROK_LEGS),
			EquipmentInventorySlot.WEAPON, ItemVariationMapping.getVariations(ItemID.BARROWS_DHAROK_WEAPON)
		);
	}

	@Override
	public double getMultiplier()
	{
		double baseHitpoints = client.getRealSkillLevel(Skill.HITPOINTS);
		double currentHitpoints = client.getBoostedSkillLevel(Skill.HITPOINTS);
		return (1.0 + (((baseHitpoints - currentHitpoints) / 100.0) * baseHitpoints / 100.0));
	}
}

package com.maxhit.sets;

import java.util.Collection;
import java.util.Map;
import java.util.Set;
import net.runelite.api.Client;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.gameval.ItemID;
import net.runelite.client.game.ItemVariationMapping;

public class FullObsidianSet extends ObsidianSet
{
	public FullObsidianSet(Client client)
	{
		super(client);
	}

	@Override
	public Map<EquipmentInventorySlot, Collection<Integer>> getEquipment()
	{
		Map<EquipmentInventorySlot, Collection<Integer>> equipment = new java.util.HashMap<>(super.getEquipment());
		equipment.put(EquipmentInventorySlot.AMULET, ItemVariationMapping.getVariations(ItemID.JEWL_BESERKER_NECKLACE));
		return equipment;
	}
}

package com.maxhit.sets;

import com.maxhit.styles.CombatStyle;
import java.util.Collection;
import java.util.Map;
import java.util.Set;
import net.runelite.api.Client;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.Skill;
import net.runelite.api.gameval.ItemID;
import net.runelite.client.game.ItemVariationMapping;

public class EliteVoidSet extends VoidSet
{
	public EliteVoidSet(Client client, Skill skill)
	{
		super(client, skill);
	}

	@Override
	public Map<EquipmentInventorySlot, Collection<Integer>> getEquipment()
	{
		return Map.of(
			EquipmentInventorySlot.HEAD, getHelmIds(),
			EquipmentInventorySlot.BODY, ItemVariationMapping.getVariations(ItemID.ELITE_VOID_KNIGHT_TOP),
			EquipmentInventorySlot.LEGS, ItemVariationMapping.getVariations(ItemID.ELITE_VOID_KNIGHT_ROBES),
			EquipmentInventorySlot.GLOVES, ItemVariationMapping.getVariations(ItemID.PEST_VOID_KNIGHT_GLOVES)
		);
	}

	@Override
	public double getMultiplier()
	{
		switch (skill)
		{
			case STRENGTH:
				return 1.1;
			case RANGED:
				return 1.125;
			case MAGIC:
				return 1.05;
		}
		return 1.0;
	}
}

package com.maxhit.sets;

import com.maxhit.equipment.EquipmentFunctions;
import com.maxhit.equipment.InquisitorPieces;
import com.maxhit.styles.AttackType;
import com.maxhit.styles.StyleFactory;
import java.util.Arrays;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.Client;
import net.runelite.api.ItemContainer;
import net.runelite.api.gameval.ItemID;

public class InquisitorSet
{

	public static double getMultiplier(Client client, ItemContainer equippedItems)
	{
		double bonus = 0.0;
		AttackType attackType = StyleFactory.getAttackType(client);
		if (attackType != AttackType.CRUSH)
			return bonus;
		long piecesEquipped = Arrays.stream(InquisitorPieces.values())
			.filter(piece -> piece.isEquipped(equippedItems))
			.count();

		boolean maceEquipped = EquipmentFunctions.HasEquipped(equippedItems, EquipmentInventorySlot.WEAPON, ItemID.INQUISITORS_MACE);
		if (maceEquipped)
			bonus += piecesEquipped * 0.025;
		else
			bonus += piecesEquipped * 0.005;
		if (piecesEquipped == 3 && !maceEquipped)
		{
			bonus += 0.01;
		}
		return bonus;
	}
}

/*
 * Copyright (c) 2023, pajlada <https://github.com/pajlada>
 * Copyright (c) 2023, pajlads <https://github.com/pajlads>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


package com.maxhit;

import com.google.inject.testing.fieldbinder.Bind;
import com.maxhit.calculators.StrengthBonusCalculator;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.gameval.VarbitID;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.ItemClient;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.ItemStats;
import net.runelite.client.plugins.PluginManager;
import net.runelite.client.ui.overlay.OverlayManager;
import org.junit.jupiter.api.BeforeEach;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import static org.mockito.Mockito.*;

/**
 * Based on <a href="https://github.com/pajlads/DinkPlugin/blob/d7c0d4d3f044c25bcff256efc5217955ec1c1494/src/test/java/dinkplugin/notifiers/MockedNotifierTest.java">Dink's MockedNotifierTest</a>
 */
@Slf4j
public abstract class MockedTest extends MockedTestBase
{
	@Bind
	protected Client client = mock(Client.class);

	@Bind
	protected ItemManager itemManager = mock(ItemManager.class);


	@Override
	@BeforeEach
	protected void setUp()
	{
		super.setUp();

		// Get region ID for Shadow Test
		var mockedPlayer = Mockito.mock(Player.class);
		when(client.getLocalPlayer()).thenReturn(mockedPlayer);
		when(mockedPlayer.getLocalLocation()).thenReturn(new LocalPoint(1, 1, 1));
		WorldView mockedWorldView = mock(WorldView.class);
		when(client.getTopLevelWorldView()).thenReturn(mockedWorldView);
		when(client.getWorldView(anyInt())).thenReturn(mockedWorldView);
		when(client.getRealSkillLevel(Skill.HITPOINTS)).thenReturn(99);
		when(client.getVarbitValue(VarbitID.AUTOCAST_SPELL)).thenReturn(MagicSpell.ICE_BARRAGE.getVarbValue());
	}
}

package com.maxhit;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class MaxHitPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(MaxHitPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2023, pajlada <https://github.com/pajlada>
 * Copyright (c) 2023, pajlads <https://github.com/pajlads>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.maxhit;

import com.google.inject.Guice;
import com.google.inject.Injector;
import com.google.inject.testing.fieldbinder.BoundFieldModule;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.mockito.MockitoAnnotations;

/**
 * Based on <a href="https://github.com/pajlads/DinkPlugin/blob/master/src/test/java/dinkplugin/MockedTestBase.java">Dink's MockedTestBase</a>
 */
public abstract class MockedTestBase
{
	protected Injector injector;
	private AutoCloseable mocks;

	@BeforeEach
	protected void setUp()
	{
		this.mocks = MockitoAnnotations.openMocks(this);
		this.injector = Guice.createInjector(BoundFieldModule.of(this));
		this.injector.injectMembers(this);
	}

	@AfterEach
	protected void cleanUp() throws Exception
	{
		mocks.close();
	}
}
package com.maxhit.MaxHitTest;

import com.maxhit.MockedTest;
import com.maxhit.calculators.MaxHitCalculator;
import com.maxhit.calculators.MaxHitCalculatorFactory;
import com.maxhit.calculators.StrengthBonusCalculator;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ItemContainer;
import net.runelite.api.Skill;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import org.mockito.MockedStatic;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.mockStatic;
import static org.mockito.Mockito.when;

@Slf4j
public class PlayerSetupsTest extends MockedTest
{
	private MaxHitCalculatorFactory maxHitCalculatorFactory;
	private ItemContainer mockedItemContainer;

	@BeforeEach
	protected void setUp()
	{
		super.setUp();
		// Consolidate common setup logic that runs before each test
		maxHitCalculatorFactory = new MaxHitCalculatorFactory(client, itemManager);
		mockedItemContainer = mock(ItemContainer.class);
		when(client.getItemContainer(anyInt())).thenReturn(mockedItemContainer);
	}

	private void testPlayerSetups(PlayerSetup[] setups, boolean standard)
	{
		MaxHitCalculator maxHitCalculator;
		for (var setup : setups)
		{
			when(mockedItemContainer.getItems()).thenReturn(setup.getEquippedItems());
			when(mockedItemContainer.getItem(anyInt())).thenAnswer(invocation -> {
				int slotIndex = invocation.getArgument(0); // Get the slot index passed to the method
				return setup.getEquippedItems()[slotIndex];  // Return the item from the corresponding array index
			});
			maxHitCalculator = maxHitCalculatorFactory.create(setup.getCombatStyle(), setup.getAttackStyle());
			try(MockedStatic<StrengthBonusCalculator> strengthBonusCalculatorMockedStatic = mockStatic(StrengthBonusCalculator.class))
			{
				final Skill skill = maxHitCalculator.getSkill();
				strengthBonusCalculatorMockedStatic.when(() ->StrengthBonusCalculator.getStrengthBonus(mockedItemContainer, itemManager, skill)).thenReturn(setup.getStrengthBonus());
				assertEquals(setup.getMaxHitCalculatorClass(), maxHitCalculator.getClass());
				maxHitCalculator.calculateMaxHit();
				if (standard)
					assertEquals(setup.getStandardMaxHit(), maxHitCalculator.getMaxHit(),
						() -> String.format("%s standard max hit should be %.0f", setup.name(), setup.getStandardMaxHit()));
				else
				{
					assertEquals(setup.getMaxedMaxHit(), maxHitCalculator.getMaxHit(),
						() -> String.format("%s maxed max hit should be %.0f", setup.name(), setup.getMaxedMaxHit()));
				}
			}

		}
	}

	@Test
	void testMaxHitStandard()
	{
		when(client.getBoostedSkillLevel(any())).thenReturn(1);
		when(client.getBoostedSkillLevel(Skill.HITPOINTS)).thenReturn(99);
		testPlayerSetups(PlayerSetup.values(), true);
	}

	@Test
	void testMaxHitMax()
	{
		when(client.getBoostedSkillLevel(any())).thenReturn(99);
		when(client.getBoostedSkillLevel(Skill.HITPOINTS)).thenReturn(1);
		testPlayerSetups(PlayerSetup.values(), false);
	}
}

package com.maxhit.MaxHitTest;

import com.maxhit.calculators.MagicMaxHitCalculator;
import com.maxhit.calculators.MeleeMaxHitCalculator;
import com.maxhit.calculators.RangedMaxHitCalculator;
import com.maxhit.styles.AttackStyle;
import com.maxhit.styles.CombatStyle;
import java.util.Map;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.Item;
import net.runelite.api.gameval.ItemID;

@Getter
@RequiredArgsConstructor
public enum PlayerSetup
{
	BASE(
		createEquipment(Map.of()),
		CombatStyle.MELEE, AttackStyle.ACCURATE, MeleeMaxHitCalculator.class,
		0.0f, 1.0, 11.0),
	MELEE_VOID(
		createEquipment(Map.of(
			EquipmentInventorySlot.HEAD.getSlotIdx(), new Item(ItemID.GAME_PEST_MELEE_HELM, 1),
			EquipmentInventorySlot.BODY.getSlotIdx(), new Item(ItemID.PEST_VOID_KNIGHT_TOP, 1),
			EquipmentInventorySlot.LEGS.getSlotIdx(), new Item(ItemID.PEST_VOID_KNIGHT_ROBES, 1),
			EquipmentInventorySlot.GLOVES.getSlotIdx(), new Item(ItemID.PEST_VOID_KNIGHT_GLOVES, 1)
		)),
		CombatStyle.MELEE, AttackStyle.ACCURATE, MeleeMaxHitCalculator.class,
		0.0f, 1.0, 12.0),
	INQUISITORS(
		createEquipment(Map.of(
			EquipmentInventorySlot.HEAD.getSlotIdx(), new Item(ItemID.INQUISITORS_HELM, 1),
			EquipmentInventorySlot.WEAPON.getSlotIdx(), new Item(ItemID.INQUISITORS_MACE, 1),
			EquipmentInventorySlot.BODY.getSlotIdx(), new Item(ItemID.INQUISITORS_BODY, 1),
			EquipmentInventorySlot.LEGS.getSlotIdx(), new Item(ItemID.INQUISITORS_SKIRT, 1)
		)),
		CombatStyle.MELEE, AttackStyle.ACCURATE, MeleeMaxHitCalculator.class,
		159.0f, 3.0, 39.0),
	FANG(
		createEquipment(Map.of(
			EquipmentInventorySlot.WEAPON.getSlotIdx(), new Item(ItemID.OSMUMTENS_FANG, 1)
		)),
		CombatStyle.MELEE, AttackStyle.ACCURATE, MeleeMaxHitCalculator.class,
		181.0f, 3.0, 35.0),
	MAX_DHAROK(
		createEquipment(Map.of(
			EquipmentInventorySlot.HEAD.getSlotIdx(), new Item(ItemID.BARROWS_DHAROK_HEAD, 1),
			EquipmentInventorySlot.WEAPON.getSlotIdx(), new Item(ItemID.BARROWS_DHAROK_WEAPON, 1),
			EquipmentInventorySlot.BODY.getSlotIdx(), new Item(ItemID.BARROWS_DHAROK_BODY, 1),
			EquipmentInventorySlot.LEGS.getSlotIdx(), new Item(ItemID.BARROWS_DHAROK_LEGS, 1)
		)),
		CombatStyle.MELEE, AttackStyle.ACCURATE, MeleeMaxHitCalculator.class,
		157.0f, 3.0, 72.0),
	BOWFA_AND_CRYSTAL(
		createEquipment(Map.of(
			EquipmentInventorySlot.HEAD.getSlotIdx(), new Item(ItemID.CRYSTAL_HELMET, 1),
			EquipmentInventorySlot.WEAPON.getSlotIdx(), new Item(ItemID.BOW_OF_FAERDHINEN, 1),
			EquipmentInventorySlot.BODY.getSlotIdx(), new Item(ItemID.CRYSTAL_CHESTPLATE, 1),
			EquipmentInventorySlot.LEGS.getSlotIdx(), new Item(ItemID.CRYSTAL_PLATELEGS, 1)
		)),
		CombatStyle.RANGED, AttackStyle.ACCURATE, RangedMaxHitCalculator.class,
		121.0f, 3.0, 36.0),
	VIRTUS_MAGE(
	createEquipment(Map.of(
		EquipmentInventorySlot.HEAD.getSlotIdx(), new Item(ItemID.VIRTUS_MASK, 1),
			EquipmentInventorySlot.WEAPON.getSlotIdx(), new Item(ItemID.STAFF_OF_ZAROS, 1),
			EquipmentInventorySlot.BODY.getSlotIdx(), new Item(ItemID.VIRTUS_TOP, 1),
			EquipmentInventorySlot.LEGS.getSlotIdx(), new Item(ItemID.VIRTUS_LEGS, 1)
		)),
	CombatStyle.MAGE, AttackStyle.CASTING, MagicMaxHitCalculator.class,
	0.33f, 39.0, 39.0
	),
	WARPED_SCEPTRE(
		createEquipment(Map.of(
			EquipmentInventorySlot.WEAPON.getSlotIdx(), new Item(ItemID.WARPED_SCEPTRE, 1)
		)),
		CombatStyle.MAGE, AttackStyle.ACCURATE, MagicMaxHitCalculator.class,
		0.27f, 2.0, 30.0
	),
	BONE_STAFF(
		createEquipment(Map.of(
			EquipmentInventorySlot.WEAPON.getSlotIdx(), new Item(ItemID.RAT_BONE_STAFF, 1)
		)),
		CombatStyle.MAGE, AttackStyle.ACCURATE, MagicMaxHitCalculator.class,
		0.27f, 6.0, 48.0
	),
	SANGUINE_STAFF(
		createEquipment(Map.of(
			EquipmentInventorySlot.WEAPON.getSlotIdx(), new Item(ItemID.SANGUINESTI_STAFF_OR, 1)
		)),
		CombatStyle.MAGE, AttackStyle.ACCURATE, MagicMaxHitCalculator.class,
		0.27f, 6.0, 40.0
	),
	SHADOW(
		createEquipment(Map.of(
			EquipmentInventorySlot.WEAPON.getSlotIdx(), new Item(ItemID.TUMEKENS_SHADOW, 1)
		)),
		CombatStyle.MAGE, AttackStyle.ACCURATE, MagicMaxHitCalculator.class,
		0.81f, 2.0, 68.0
	);


	private static Item[] createEquipment(Map<Integer, Item> itemMap) {
		final Item[] equipment = new Item[14];
		itemMap.forEach((slot, item) -> {
			if (slot >= 0 && slot < equipment.length) {
				equipment[slot] = item;
			}
		});
		return equipment;
	}

	private final Item[] equippedItems;
	private final CombatStyle combatStyle;
	private final AttackStyle attackStyle;
	private final Class maxHitCalculatorClass;
	private final float strengthBonus;
	private final double standardMaxHit;
	private final double maxedMaxHit;
}

