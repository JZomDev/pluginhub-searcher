package com.menuhighlighting;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class Launch
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(MenuHighlighting.class);
		RuneLite.main(args);
	}
}
package com.menuhighlighting;

import org.junit.Test;

public class PatternTest {
    @Test public void pattern() {
        PatternTest.matches("*ar", "bar") ;
        PatternTest.matches("*bar", "bar") ;
        PatternTest.matches("ba*", "bar");
        PatternTest.matches("**", "anything");
        PatternTest.matches("*", "just a wildcard");
        PatternTest.matches("foo", "foo") ;
    }

    private static void matches(String pattern, String input) throws AssertionError{
        assert Pattern.match_wildcard(pattern, input): String.format("'%s' should match '%s'", pattern, input);
    }

    @Test public void incorrectPattern() {
        PatternTest.matchesNot("foo", "bar") ;
        PatternTest.matchesNot("ba", "bar");
        PatternTest.matchesNot("xz*", "xyz");
    }

    private static void matchesNot(String pattern, String input) throws AssertionError {
        assert !Pattern.match_wildcard(pattern, input): String.format("'%s' should not match '%s'", pattern, input);
    }

}

package com.menuhighlighting;

import net.runelite.api.MenuEntry;

public class Restore {
    private final MenuEntry entry;
    private final String oldTarget;
    private final String oldOption;

    public Restore(MenuEntry entry, String oldTarget, String oldOption) {
        this.entry = entry;
        this.oldTarget = oldTarget;
        this.oldOption = oldOption;
    }

    public void restore() {
        entry.setTarget(oldTarget);
        entry.setOption(oldOption);
    }
}
package com.menuhighlighting;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.MenuEntry;
import net.runelite.api.events.MenuOpened;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.config.Keybind;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.input.KeyListener;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.Text;

import javax.inject.Inject;
import java.awt.event.KeyEvent;
import java.util.ArrayList;

@Slf4j
@PluginDescriptor(name = "Menu Highlighting")
public class MenuHighlighting extends Plugin implements KeyListener {
    private final ArrayList<Keybind> keybinds = new ArrayList<>();
    private final ArrayList<Highlight> highlights = new ArrayList<>();
    private final ArrayList<Restore> restores = new ArrayList<>();
    @Inject
    private Client client;
    @Inject
    private KeyManager keyManager;
    @Inject
    private MenuHighlightingConfig config;
    @Inject
    private ConfigManager configManager;
    private Integer activeKey = null;

    @Override
    protected void startUp() throws Exception {
        reload();
        keyManager.registerKeyListener(this);
    }

    @Override
    protected void shutDown() throws Exception {
        keyManager.unregisterKeyListener(this);
        restores.clear();
    }

    @Provides
    MenuHighlightingConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(MenuHighlightingConfig.class);
    }

    private void reload() {
        keybinds.clear();
        highlights.clear();
        for (int i = 0; i < 20; i++) {
            keybinds.add(configManager.getConfiguration("menuhighlights", "hotkey" + (i + 1), Keybind.class));
            highlights.add(Highlight.fromString(
                    configManager.getConfiguration("menuhighlights", "hotkey" + (i + 1) + "Field", String.class)));
        }
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged configChanged) {
        if (configChanged.getGroup().equals("menuhighlights")) {
            reload();
        }
    }

    private void recolour(Highlight highlight, MenuEntry[] menuEntries) {
        if (menuEntries != null) {
            for (MenuEntry entry : menuEntries) {
                String rawTarget = entry.getTarget();
                String target = Text.removeTags(rawTarget);
                String option = entry.getOption();

                if (highlight.contains(entry)) {
                    String newTarget = ColorUtil.prependColorTag(target, config.highlightedColor());
                    entry.setTarget(newTarget);
                } else {
                    entry.setTarget(ColorUtil.prependColorTag(target, config.unHighlightedColor()));
                    String newOption = Text.removeTags(option);
                    entry.setOption(ColorUtil.prependColorTag(newOption, config.unHighlightedColor()));
                }
                restores.add(new Restore(entry, rawTarget, option));
            }
        }
    }

    @Subscribe(priority = -1)
    public void onMenuOpened(MenuOpened event) {
        restores.clear();

        if (activeKey == null) {
            return;
        }
        int index = -1;
        for (int i = 0; i < keybinds.size(); i++) {
            int key = keybinds.get(i).getKeyCode();
            if (activeKey.equals(key)) {
                index = i;
                break;
            }
        }
        if (index == -1) {
            // Should never happen...
            return;
        }
        Highlight highlight = highlights.get(index);
        recolour(highlight, event.getMenuEntries());
    }

    @Override
    public void keyPressed(KeyEvent e) {
        int code = e.getKeyCode();
        int index = -1;
        for (int i = 0; i < keybinds.size(); i++) {
            Keybind key = keybinds.get(i);
            if (key.matches(e)) {
                index = i;
                break;
            }
        }
        if (index == -1 || activeKey != null) {
            return;
        }

        activeKey = code;
        Highlight highlight = highlights.get(index);
        if (client.isMenuOpen()) {
            recolour(highlight, client.getMenuEntries());
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        if (activeKey != null && activeKey.equals(e.getKeyCode())) {
            for (Restore restore : restores) {
                restore.restore();
            }
            restores.clear();
            activeKey = null;
        }
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }
}

package com.menuhighlighting;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.MenuEntry;
import net.runelite.client.util.Text;
import org.apache.commons.lang3.StringUtils;

@Slf4j
public class Pattern {
    String option;
    String target;

    private Pattern(String option, String target) {
        this.option = option;
        this.target = target;
    }

    public static Pattern fromString(String input) {
        String[] x = input.split(",", 2);
        if (x.length == 2) {
            // like "attack, man"
            return new Pattern(x[0].trim(), x[1].trim());
        } else {
            // Or just "man"
            return new Pattern(null, x[0].trim());
        }
    }

    public static boolean match_wildcard(String pattern, String taggedInput) {
        // "*" and "**" will match any input
        if (pattern.equals("*") || pattern.equals("**")) {
            return true;
        }
        String input = Text.removeTags(taggedInput);
        boolean atStart = pattern.startsWith("*");
        boolean atEnd = pattern.endsWith("*");

        if (atStart && atEnd) { // such as "*abc*"
            return StringUtils.containsIgnoreCase(input, pattern.subSequence(1, pattern.length() - 1));
        } else if (atStart) { // such as "*abc"
            return StringUtils.endsWithIgnoreCase(input, pattern.subSequence(1, pattern.length()));
        } else if (atEnd) { // such as "abc*"
            return StringUtils.startsWithIgnoreCase(input, pattern.subSequence(0, pattern.length() - 1));
        } else { // No wildcards, just compare it
            return pattern.equalsIgnoreCase(input);
        }
    }

    public boolean matches(MenuEntry entry) {
        return this.match_option(entry.getOption()) && this.match_target(entry.getTarget());
    }

    private boolean match_option(String option) {
        if (this.option == null) {
            return true;
        }
        return Pattern.match_wildcard(this.option, option);
    }

    private boolean match_target(String target) {
        return Pattern.match_wildcard(this.target, target);
    }

}
package com.menuhighlighting;

import net.runelite.api.MenuEntry;

import java.util.ArrayList;
import java.util.List;

public class Highlight {
    private List<Pattern> patterns;

    public static Highlight fromString(String input) {
        Highlight slf = new Highlight();
        ArrayList<Pattern> patterns = new ArrayList<>();
        if (input != null) {
            for (String line : input.split("\n")) {
                if (line.trim().isEmpty()) {
                    continue;
                }
                patterns.add(Pattern.fromString(line));
            }
        }
        slf.patterns = patterns;
        return slf;
    }

    public boolean contains(MenuEntry entry) {
        if (entry.getPlayer() != null) {
            // So that you can't do (for example) `attack, *rot*`
            // to violate the `Indicates players in an opposing clan in PVP` rule.
            return false;
        }
        for (Pattern pattern : patterns) {
            if (pattern.matches(entry)) {
                return true;
            }
        }
        return false;
    }

}
package com.menuhighlighting;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("menuhighlights")
public interface MenuHighlightingConfig extends Config {

    @Alpha
    @ConfigItem(keyName = "highlightedColor", name = "Highlighted color", description = "Configures the color for highlighted items", position = 0)
    default Color highlightedColor() {
        return Color.PINK;
    }

    @Alpha
    @ConfigItem(keyName = "unHighlightedColor", name = "Unhighlighted color", description = "Configures the color for not highlighted items", position = 1)
    default Color unHighlightedColor() {
        return new Color(128, 128, 128, 128);
    }

    @ConfigSection(name = "Hotkeys", description = "Hotkey-based highlighting.", position = 2, closedByDefault = false)
    String hotkeys = "hotkeys";

    @ConfigItem(keyName = "hotkey1", name = "hotkey 1", description = "", section = hotkeys, position = 3)
    default Keybind hotkey1() {
        return Keybind.NOT_SET;
    }

    @ConfigItem(keyName = "hotkey1Field", name = "", description = "", section = hotkeys, position = 4)
    default String hotkey1Field() {
        return "";
    }

    @ConfigItem(keyName = "hotkey2", name = "hotkey 2", description = "", section = hotkeys, position = 5)
    default Keybind hotkey2() {
        return Keybind.NOT_SET;
    }

    @ConfigItem(keyName = "hotkey2Field", name = "", description = "", section = hotkeys, position = 6)
    default String hotkey2Field() {
        return "";
    }

    @ConfigItem(keyName = "hotkey3", name = "hotkey 3", description = "", section = hotkeys, position = 7)
    default Keybind hotkey3() {
        return Keybind.NOT_SET;
    }

    @ConfigItem(keyName = "hotkey3Field", name = "", description = "", section = hotkeys, position = 8)
    default String hotkey3Field() {
        return "";
    }

    @ConfigItem(keyName = "hotkey4", name = "hotkey 4", description = "", section = hotkeys, position = 9)
    default Keybind hotkey4() {
        return Keybind.NOT_SET;
    }

    @ConfigItem(keyName = "hotkey4Field", name = "", description = "", section = hotkeys, position = 10)
    default String hotkey4Field() {
        return "";
    }

    @ConfigItem(keyName = "hotkey5", name = "hotkey 5", description = "", section = hotkeys, position = 11)
    default Keybind hotkey5() {
        return Keybind.NOT_SET;
    }

    @ConfigItem(keyName = "hotkey5Field", name = "", description = "", section = hotkeys, position = 12)
    default String hotkey5Field() {
        return "";
    }

    @ConfigItem(keyName = "hotkey6", name = "hotkey 6", description = "", section = hotkeys, position = 13)
    default Keybind hotkey6() {
        return Keybind.NOT_SET;
    }

    @ConfigItem(keyName = "hotkey6Field", name = "", description = "", section = hotkeys, position = 14)
    default String hotkey6Field() {
        return "";
    }

    @ConfigItem(keyName = "hotkey7", name = "hotkey 7", description = "", section = hotkeys, position = 15)
    default Keybind hotkey7() {
        return Keybind.NOT_SET;
    }

    @ConfigItem(keyName = "hotkey7Field", name = "", description = "", section = hotkeys, position = 16)
    default String hotkey7Field() {
        return "";
    }

    @ConfigItem(keyName = "hotkey8", name = "hotkey 8", description = "", section = hotkeys, position = 17)
    default Keybind hotkey8() {
        return Keybind.NOT_SET;
    }

    @ConfigItem(keyName = "hotkey8Field", name = "", description = "", section = hotkeys, position = 18)
    default String hotkey8Field() {
        return "";
    }

    @ConfigItem(keyName = "hotkey9", name = "hotkey 9", description = "", section = hotkeys, position = 19)
    default Keybind hotkey9() {
        return Keybind.NOT_SET;
    }

    @ConfigItem(keyName = "hotkey9Field", name = "", description = "", section = hotkeys, position = 20)
    default String hotkey9Field() {
        return "";
    }

    @ConfigItem(keyName = "hotkey10", name = "hotkey 10", description = "", section = hotkeys, position = 21)
    default Keybind hotkey10() {
        return Keybind.NOT_SET;
    }

    @ConfigItem(keyName = "hotkey10Field", name = "", description = "", section = hotkeys, position = 22)
    default String hotkey10Field() {
        return "";
    }

    @ConfigItem(keyName = "hotkey11", name = "hotkey 11", description = "", section = hotkeys, position = 23)
    default Keybind hotkey11() {
        return Keybind.NOT_SET;
    }

    @ConfigItem(keyName = "hotkey11Field", name = "", description = "", section = hotkeys, position = 24)
    default String hotkey11Field() {
        return "";
    }

    @ConfigItem(keyName = "hotkey12", name = "hotkey 12", description = "", section = hotkeys, position = 25)
    default Keybind hotkey12() {
        return Keybind.NOT_SET;
    }

    @ConfigItem(keyName = "hotkey12Field", name = "", description = "", section = hotkeys, position = 26)
    default String hotkey12Field() {
        return "";
    }

    @ConfigItem(keyName = "hotkey13", name = "hotkey 13", description = "", section = hotkeys, position = 27)
    default Keybind hotkey13() {
        return Keybind.NOT_SET;
    }

    @ConfigItem(keyName = "hotkey13Field", name = "", description = "", section = hotkeys, position = 28)
    default String hotkey13Field() {
        return "";
    }

    @ConfigItem(keyName = "hotkey14", name = "hotkey 14", description = "", section = hotkeys, position = 29)
    default Keybind hotkey14() {
        return Keybind.NOT_SET;
    }

    @ConfigItem(keyName = "hotkey14Field", name = "", description = "", section = hotkeys, position = 30)
    default String hotkey14Field() {
        return "";
    }

    @ConfigItem(keyName = "hotkey15", name = "hotkey 15", description = "", section = hotkeys, position = 31)
    default Keybind hotkey15() {
        return Keybind.NOT_SET;
    }

    @ConfigItem(keyName = "hotkey15Field", name = "", description = "", section = hotkeys, position = 32)
    default String hotkey15Field() {
        return "";
    }

    @ConfigItem(keyName = "hotkey16", name = "hotkey 16", description = "", section = hotkeys, position = 33)
    default Keybind hotkey16() {
        return Keybind.NOT_SET;
    }

    @ConfigItem(keyName = "hotkey16Field", name = "", description = "", section = hotkeys, position = 34)
    default String hotkey16Field() {
        return "";
    }

    @ConfigItem(keyName = "hotkey17", name = "hotkey 17", description = "", section = hotkeys, position = 35)
    default Keybind hotkey17() {
        return Keybind.NOT_SET;
    }

    @ConfigItem(keyName = "hotkey17Field", name = "", description = "", section = hotkeys, position = 36)
    default String hotkey17Field() {
        return "";
    }

    @ConfigItem(keyName = "hotkey18", name = "hotkey 18", description = "", section = hotkeys, position = 37)
    default Keybind hotkey18() {
        return Keybind.NOT_SET;
    }

    @ConfigItem(keyName = "hotkey18Field", name = "", description = "", section = hotkeys, position = 38)
    default String hotkey18Field() {
        return "";
    }

    @ConfigItem(keyName = "hotkey19", name = "hotkey 19", description = "", section = hotkeys, position = 39)
    default Keybind hotkey19() {
        return Keybind.NOT_SET;
    }

    @ConfigItem(keyName = "hotkey19Field", name = "", description = "", section = hotkeys, position = 40)
    default String hotkey19Field() {
        return "";
    }

    @ConfigItem(keyName = "hotkey20", name = "hotkey 20", description = "", section = hotkeys, position = 41)
    default Keybind hotkey20() {
        return Keybind.NOT_SET;
    }

    @ConfigItem(keyName = "hotkey20Field", name = "", description = "", section = hotkeys, position = 42)
    default String hotkey20Field() {
        return "";
    }
}

