package com.speshkitty.playerpronouns;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

import java.util.ArrayList;
import java.util.List;

public class PlayerNotesPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PlayerPronounsPlugin.class);
		List<String> arguments = new ArrayList<>();

		arguments.add("--profile");
		arguments.add("test");
		arguments.add("--debug");
		arguments.add("--developer-mode");

		String[] arrayArgs = arguments.stream().toArray(String[]::new);

		System.out.println("args: " + String.join(" ", arrayArgs));


		RuneLite.main(arrayArgs);
	}
}
package com.speshkitty.playerpronouns;

import com.google.inject.Provides;
import javax.inject.Inject;

import com.sun.jna.platform.win32.Guid;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.RuneLite;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.task.Schedule;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;
import net.runelite.client.util.Text;

import java.io.File;
import java.time.temporal.ChronoUnit;

@Slf4j
@PluginDescriptor(
	name = "Player Pronouns"
)
public class PlayerPronounsPlugin extends Plugin
{
	@Inject	private Client client;
	@Inject	private PlayerPronounsOverlay overlay;
	@Inject	private OverlayManager overlayManager;
	@Inject	private PlayerPronounsConfig config;
	@Inject	private TooltipManager tooltipManager;
	@Inject private ConfigManager configManager;
	@Inject	private DatabaseAPI databaseAPI;
	@Inject private	ClientThread thread;

	private String playerNameHashed = "";

	protected String getPlayerNameHashed() {
		if(playerNameHashed.isEmpty())
		{
			if(client.getLocalPlayer() == null) {
				return "";
			}
			if(client.getLocalPlayer().getName() == null){
				return "";
			}

			playerNameHashed = databaseAPI.hashString(Text.removeTags(client.getLocalPlayer().getName()));
		}

		return playerNameHashed;
	}

	String getOrCreateApiKey(){
		String keyLocation = "apikey." + getPlayerNameHashed();
		String key = configManager.getConfiguration(PlayerPronounsConfig.GROUP, keyLocation);

		if(key == null || key.isEmpty()) {
			key = String.valueOf(Guid.GUID.newGuid());
			configManager.setConfiguration(PlayerPronounsConfig.GROUP, keyLocation, key);
		}
		return key;
	}

	@Override
	protected void startUp() throws Exception
	{
		log.info("Player Pronouns started!");
		overlayManager.add(overlay);
		if(client.getGameState() == GameState.LOGGED_IN){
			getPlayerNameHashed();
		}

		if(new File(RuneLite.RUNELITE_DIR + "/pronouns/pronouns.json").delete()){
			log.debug("Deleted file: " + RuneLite.RUNELITE_DIR + "/pronouns/pronouns.json");
		}
		if(new File(RuneLite.RUNELITE_DIR + "/pronouns").delete()){
			log.debug("Deleted folder: " + RuneLite.RUNELITE_DIR + "/pronouns");
		}

		databaseAPI.readFromServer();
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
		databaseAPI.destroy();
		log.info("Player Pronouns stopped!");
	}

	@Provides
	PlayerPronounsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(PlayerPronounsConfig.class);
	}

	private boolean logging_in = false;

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged) {
		if(gameStateChanged.getGameState() == GameState.LOGGING_IN) {
			logging_in = true;
		}
		//our last state was logging in
		if(logging_in && gameStateChanged.getGameState() == GameState.LOGGED_IN){
			logging_in = false;
			thread.invokeLater(
				() -> {

					if(client.getLocalPlayer() == null || client.getLocalPlayer().getName() == null) {
						return false;
					}
					playerNameHashed = databaseAPI.hashString(client.getLocalPlayer().getName());
					if(playerNameHashed.isEmpty()) {
						return false;
					}
					else
					{
						if(!config.pronoun().isEmpty()) {
							databaseAPI.putPlayersPronoun(config.presetPronoun(), true);
						}
					}
					return true;
				}
			);
		}
	}

	boolean shouldUpdateConfig = true;

	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged)
	{
		if(!shouldUpdateConfig) {
			shouldUpdateConfig = true;
			return;
		}
		if (!configChanged.getGroup().equals(PlayerPronounsConfig.GROUP)){
			return;
		}
		if ("presetPronoun".equals(configChanged.getKey())) {
			Pronoun oldPronoun = Pronoun.valueOf(configChanged.getOldValue());
			databaseAPI.putPlayersPronoun(oldPronoun, false);
		}
	}

	@Schedule(
			period = 30,
			unit = ChronoUnit.MINUTES,
			asynchronous = true
	)
	public void lookupData(){
		databaseAPI.readFromServer();
	}
}

package com.speshkitty.playerpronouns;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.MenuEntry;
import net.runelite.api.Player;
import net.runelite.client.ui.overlay.*;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;
import net.runelite.client.util.Text;

import javax.inject.Inject;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

@Slf4j
public class PlayerPronounsOverlay extends Overlay {
    private final PlayerPronounsPlugin playerPronounsPlugin;
    private final PlayerPronounsConfig config;
    private final Client client;
    private final TooltipManager tooltipManager;

    @Inject
    private DatabaseAPI databaseAPI;

    @Inject
    PlayerPronounsOverlay(PlayerPronounsPlugin playerPronounsPlugin, PlayerPronounsConfig config, Client client, TooltipManager tooltipManager)
    {
        this.playerPronounsPlugin = playerPronounsPlugin;
        this.config = config;

        this.client = client;
        this.tooltipManager = tooltipManager;

        setPosition(OverlayPosition.TOOLTIP);
        setLayer(OverlayLayer.ALWAYS_ON_TOP);
    }

    @Override
    public Dimension render(Graphics2D graphics) {

        if (client.isMenuOpen())
        {
            return null;
        }

        List<Player> checkedPlayers = new ArrayList<>();

        MenuEntry[] list = client.getMenuEntries();

        if(config.showInChat()) {
            for (MenuEntry entry : list) {
                switch (entry.getOption()) {

                    case "Add friend":
                    case "Message":
                    case "Remove friend":
                        String target = Text.removeTags(entry.getTarget()).replace('\u00A0', ' ').trim();

                        String heldText = databaseAPI.findUserPronouns(target);
                        if (heldText != null && !heldText.isEmpty()) {
                            tooltipManager.add(new Tooltip(heldText));
                        }
                        return null;
                    default:
                        break;

                }
            }
        }

        if(config.showInWorld()) {

            Player foundPlayer;
            for (MenuEntry entry : list) {
                if ((foundPlayer = entry.getPlayer()) == null || checkedPlayers.contains(foundPlayer)) {
                    continue;
                }
                checkedPlayers.add(foundPlayer);
            }

            int numPlayersInList = checkedPlayers.size();

            for (Player p : checkedPlayers) {
                String heldText = databaseAPI.findUserPronouns(p.getName());
                if (heldText != null && !heldText.isEmpty()) {
                    if (numPlayersInList == 1) {
                        tooltipManager.add(new Tooltip(heldText));
                    } else {
                        tooltipManager.add(new Tooltip(p.getName() + ": " + heldText));
                    }
                }
            }
        }

        return null;
    }
}

package com.speshkitty.playerpronouns;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(PlayerPronounsConfig.GROUP)
public interface PlayerPronounsConfig extends Config
{
	String GROUP = "playerpronouns";

	@ConfigItem(
			position = 1,
			keyName = "presetPronoun",
			name = "Pronoun",
			description = "Your pronoun!"
	)
	default Pronoun presetPronoun() {
		return Pronoun.ASK;
	}

	@ConfigItem(
			position = 2,
			keyName = "showChat",
			name = "Show In UI",
			description = "Whether to show people's pronouns when mousing over their name in UI menus."
	)
	default boolean showInChat() {
		return true;
	}

	@ConfigItem(
			position = 3,
			keyName = "showWorld",
			name = "Show In World",
			description = "Whether to show people's pronouns when mousing over them in the world."
	)
	default boolean showInWorld() {
		return true;
	}

	@ConfigItem(
			keyName = "pronoun",
			name = "Custom Pronoun",
			description = "Custom entered pronoun. Please be aware this is manually approved.",
			hidden=true
	)
	default String pronoun() { return ""; }
}

package com.speshkitty.playerpronouns;

import lombok.Getter;
import lombok.Setter;

public class DataBean
{
    @Getter
    @Setter
    String id;
    @Getter
    @Setter
    String pronoun;
}

package com.speshkitty.playerpronouns;

import lombok.Getter;

public enum Pronoun {
    HE_HIM (0, "He/Him"),
    SHE_HER (10, "She/Her"),
    HE_THEY (20, "He/They"),
    SHE_THEY (30, "She/They"),
    THEY_THEM(40, "They/Them"),
    IT_ITS(50, "It/Its"),
    ANY(100, "Any"),
    ASK(200, "Ask");
    //OTHER(500, "Other");

    @Getter
    private final String text;
    @Getter
    private final int internalValue;
    Pronoun(int internalValue, String text){
        this.text = text;
        this.internalValue = internalValue;
    }

    public String toString() {
        return getText();
    }
}

package com.speshkitty.playerpronouns;

import com.google.common.reflect.TypeToken;
import com.google.gson.*;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.util.Text;
import okhttp3.*;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.io.*;
import java.lang.reflect.Type;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.*;
import java.util.zip.GZIPInputStream;

@Slf4j
@Singleton
public class DatabaseAPI {
    private static final MediaType JSON = MediaType.parse("text/json");
    private static final String apiAddress = "https://sx055om2ka.execute-api.eu-west-2.amazonaws.com/publish/";
    private static final String lookupAddress = "https://osrs-pronouns-plugin.s3.eu-west-2.amazonaws.com/latest.txt";

    private HashMap<String, String> knownPronouns = new HashMap<>();

    @Inject private OkHttpClient okHttpClient;
    @Inject private Gson gson;
    @Inject private Client client;

    @Inject private ConfigManager configManager;

    @Inject
    private PlayerPronounsConfig config;
    private final PlayerPronounsPlugin playerPronounsPlugin;

    @Inject
    DatabaseAPI(PlayerPronounsPlugin playerPronounsPlugin) {
        this.playerPronounsPlugin = playerPronounsPlugin;
    }

    @Inject
    private ChatMessageManager chatMessageManager;

    protected void destroy(){
        knownPronouns = new HashMap<>();
    }

    protected String findUserPronouns(String username) {
        String hashedName = hashString(username);
        //log.debug(String.format("\"%s\" hashed to \"%s\"", username, hashedName)); Commented due to spammy
        return knownPronouns.getOrDefault(hashedName, "");
    }

    //Annoying workaround to make gson work right
    Type typeMyType = new TypeToken<List<DataBean>>() {}.getType();

    protected void readFromServer() {
        log.debug("Beginning read from server...");

        Request request = new Request.Builder()
                .url(lookupAddress)
                .get()
                .build();

        try (Response response = okHttpClient.newCall(request).execute()) {
            log.debug("Request sent");
            if (response.body() == null) return;
            ResponseBody responseBody = response.body();
            log.debug("Response received!");

            String decompressed;
            try (final GZIPInputStream gzipInput = new GZIPInputStream(responseBody.byteStream())
                 ) {
                StringBuilder writer = new StringBuilder ();
                int b ;
                while((b = gzipInput.read()) != -1) {
                    writer.append((char)b);
                }
                decompressed = writer.toString(); //tasty JSON data


            } catch (IOException e) {
                throw new UncheckedIOException("Error while decompressing GZIP!", e);
            }

            try {
                List<DataBean> test = gson.fromJson(decompressed, typeMyType);
                knownPronouns.clear();
                for(DataBean bean : test){
                    knownPronouns.put(bean.getId(), bean.getPronoun());
                }
            }
            catch (Exception e){
                sendMessage("There was an error loading pronoun data from the server!");
                sendMessage("This will be automatically retried in 30 minutes.");
                log.error("Error parsing json!");
                e.printStackTrace();
            }

        } catch (IOException e) {
            log.error("Error communicating with server!");
        }
    }

    protected void putPlayersPronoun(Pronoun oldPronoun, boolean isLoginTriggered) {

        if (client.getGameState() != GameState.LOGGED_IN || playerPronounsPlugin.getPlayerNameHashed().isEmpty()) {
            return;
        }
        log.debug("Beginning pronoun update");
        int pronounToPut = config.presetPronoun().getInternalValue();

        String apiKey = playerPronounsPlugin.getOrCreateApiKey();

        JsonObject data = new JsonObject();
        data.addProperty("username", playerPronounsPlugin.getPlayerNameHashed());
        data.addProperty("pronoun", pronounToPut);

        data.addProperty("apikey", apiKey);

        RequestBody body = RequestBody.create(JSON, data.toString());

        //log.debug(data.toString());

        Request request = new Request.Builder()
                .url(apiAddress)
                .put(body)
                .build();

        try (Response response = okHttpClient.newCall(request).execute()) {

            if (response.body() == null) return;
            JsonObject responseData = gson.fromJson(response.body().string(), JsonObject.class);
            JsonPrimitive statusCodePrim = responseData.getAsJsonPrimitive("statusCode");
            JsonPrimitive responseMessagePrim = responseData.getAsJsonPrimitive("body");

            int statusCode = statusCodePrim == null ? 430 : statusCodePrim.getAsInt();
            String responseMessage = responseMessagePrim == null ? "You are likely being rate limited!" : responseMessagePrim.getAsString();

            if(responseData.has("apikey")) {
                configManager.setConfiguration(PlayerPronounsConfig.GROUP,
                        "apikey." + playerPronounsPlugin.getPlayerNameHashed(),
                        responseData.getAsJsonPrimitive("apikey").getAsString());
                sendMessage("API key has been received and set, and is stored in your RuneLite config. Do not share this!");
                sendMessage("If you lose this, you will not be able to update your pronoun until it is removed from the database!");
            }

            if (statusCode == 200) {
                if (!isLoginTriggered) sendMessage(responseMessage);
            } else {
                if (!isLoginTriggered) sendMessage("Error " + statusCode + " - " + responseMessage);
                resetPronounConfig(oldPronoun);
            }
        } catch (IOException e) {
            log.error("Error putting data to server!");
        }
    }

    private void resetPronounConfig(Pronoun pronoun){
        playerPronounsPlugin.shouldUpdateConfig = false;
        configManager.setConfiguration(PlayerPronounsConfig.GROUP,"presetPronoun", pronoun);
        playerPronounsPlugin.shouldUpdateConfig = true;
    }

    private void sendMessage(String message){
        chatMessageManager.queue(
            QueuedMessage.builder()
                .type(ChatMessageType.CONSOLE)
                .runeLiteFormattedMessage(message)
                .build());
    }

    String hashString(String input) {
        if (input == null) {
            return "";
        }
        String cleanedName = Text.removeTags(input);
        try {
            MessageDigest digest = MessageDigest.getInstance("MD5");
            byte[] hash = digest.digest(cleanedName.getBytes(StandardCharsets.UTF_8));
            StringBuilder hexString = new StringBuilder(2 * hash.length);
            for (byte b : hash) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return "";
        }
    }
}

