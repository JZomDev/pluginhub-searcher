package com.sgssavingstracker;

import com.sgssavingstracker.views.RestorePanel;
import com.sgssavingstracker.views.SavingsPanel;
import java.awt.BorderLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.beans.PropertyChangeEvent;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.PluginErrorPanel;

public class SGSSavingsTrackerPanel extends PluginPanel
{
	private final Stats stats;
	private SavingsPanel savingsPanel;
	private RestorePanel restorePanel;

	SGSSavingsTrackerPanel(Stats stats, ItemManager itemManager, SGSSavingsTrackerConfig config)
	{
		this.stats = stats;
		initView(itemManager, config);
	}

	private void initView(ItemManager itemManager, SGSSavingsTrackerConfig config)
	{
		getParent().setLayout(new BorderLayout());
		getParent().add(this, BorderLayout.CENTER);

		setLayout(new GridBagLayout());

		PluginErrorPanel titlePanel = new PluginErrorPanel();
		titlePanel.setContent("SGS Savings Tracker", "Track Hitpoints and Prayer saved by using the SGS Special Attack.");
		GridBagConstraints c0 = new GridBagConstraints();
		c0.gridy = 0;
		c0.fill = GridBagConstraints.BOTH;
		c0.weighty = 0.1;
		c0.weightx = 1;
		add(titlePanel, c0);

		restorePanel = new RestorePanel();
		restorePanel.setMinimumSize(restorePanel.getPreferredSize());
		GridBagConstraints c1 = new GridBagConstraints();
		c1.gridy = 1;
		c1.weightx = 1;
		c1.fill = GridBagConstraints.BOTH;
		c1.insets = new Insets(32, 0, 32, 0);
		add(restorePanel, c1);

		savingsPanel = new SavingsPanel(itemManager, config.hpItem(), config.ppItem());
		GridBagConstraints c2 = new GridBagConstraints();
		c2.gridy = 3;
		c2.weightx = 1;
		c2.fill = GridBagConstraints.BOTH;
		add(savingsPanel, c2);

		JPanel spacer = new JPanel();
		GridBagConstraints c3 = new GridBagConstraints();
		c3.gridy = 4;
		c3.weighty = 1;
		add(spacer, c3);

		JButton resetButton = new JButton("Reset");
		resetButton.addActionListener(event -> {
			int result = JOptionPane.showOptionDialog(this,
				"<html>This will reset Hitpoints and Prayer Points to 0.<br>This action cannot be undone. Are you sure?</html>",
				"Are you sure?", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE,
				null, new String[]{"Yes", "No"}, "No");
			if (result == JOptionPane.YES_OPTION)
			{
				resetClicked();
			}
		});
		GridBagConstraints c4 = new GridBagConstraints();
		c4.gridy = 5;
		c4.weightx = 1;
		c4.fill = GridBagConstraints.BOTH;
		add(resetButton, c4);
	}

	public void update(PropertyChangeEvent event)
	{
		int newValue = (Integer) event.getNewValue();
		switch (event.getPropertyName())
		{
			case "hp":
				restorePanel.setHpSaved(newValue);
				savingsPanel.setHpSaved(newValue);
				break;
			case "pp":
				restorePanel.setPpSaved(newValue);
				savingsPanel.setPpSaved(newValue);
				break;
			case "hitpointsLevel":
				savingsPanel.setHitpointsLevel(newValue);
				break;
			case "prayerLevel":
				savingsPanel.setPrayerLevel(newValue);
				break;
		}
	}

	public void setHpItem(HPItem hpItem)
	{
		savingsPanel.setHpItem(hpItem);
	}

	public void setPpItem(PPItem ppItem)
	{
		savingsPanel.setPpItem(ppItem);
	}

	private void resetClicked()
	{
		if (stats == null)
		{
			return;
		}
		stats.setHpSaved(0);
		stats.setPpSaved(0);
	}
}
package com.sgssavingstracker;

import java.util.function.Function;
import lombok.Getter;

@Getter
public enum HPItem
{
	KARAMBWAN("Karambwan", 3144, hitpointsLevel -> 18),
	SHARK("Shark", 385, hitpointsLevel -> 20),
	MANTA_RAY("Manta ray", 391, hitpointsLevel -> 22),
	SARADOMIN_BREW("Saradomin brew(4)", 6685, hitpointsLevel -> (hitpointsLevel * 15 / 100) + 2, 4);

	private final String name;
	private final int id;
	private final Function<Integer, Integer> restorationFunction;
	private final int dosesPerItem;

	HPItem(String name, int id, Function<Integer, Integer> restorationFunction)
	{
		this.name = name;
		this.id = id;
		this.restorationFunction = restorationFunction;
		this.dosesPerItem = 1;
	}

	HPItem(String name, int id, Function<Integer, Integer> restorationFunction, int dosesPerItem)
	{
		this.name = name;
		this.id = id;
		this.restorationFunction = restorationFunction;
		this.dosesPerItem = dosesPerItem;
	}
}

package com.sgssavingstracker;

import com.google.inject.Provides;
import java.util.Arrays;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.Skill;
import net.runelite.api.VarPlayer;
import net.runelite.api.events.HitsplatApplied;
import net.runelite.api.events.StatChanged;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.RuneScapeProfileChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

@Slf4j
@PluginDescriptor(
	name = "SGS Savings Tracker",
	description = "Track Hitpoints and Prayer saved by using the SGS Special Attack.",
	tags = {"saradomin", "godsword", "hitpoints", "hp", "prayer", "pp"}
)
public class SGSSavingsTrackerPlugin extends Plugin
{
	static final int[] SGS_ITEM_IDS = {11806, 20372};
	static final String CONFIG_GROUP_NAME = "sgssavingstracker";
	static final String CONFIG_HP_KEY = "hitpointsSaved";
	static final String CONFIG_PP_KEY = "prayerSaved";

	private Stats stats;
	private RestoreOccurrence currentRestoreOccurrence;
	private NavigationButton navigationButton;
	private SGSSavingsTrackerPanel panel;

	@Inject
	private Client client;
	@Inject
	private ClientToolbar clientToolbar;
	@Inject
	private ClientThread clientThread;
	@Inject
	private SGSSavingsTrackerConfig config;
	@Inject
	private ConfigManager configManager;
	@Inject
	private ItemManager itemManager;

	@Override
	protected void startUp()
	{
		stats = new Stats();
		panel = new SGSSavingsTrackerPanel(stats, itemManager, config);
		clientThread.invokeLater(() -> {
			panel.setHpItem(config.hpItem());
			panel.setPpItem(config.ppItem());
		});

		stats.addPropertyChangeListener(event ->
			clientThread.invokeLater(() -> {
				panel.update(event);
				saveToConfig();
			}));

		loadFromConfig();
		stats.setSpecPercent(client.getVarpValue(VarPlayer.SPECIAL_ATTACK_PERCENT));
		stats.setHitpointsLevel(client.getRealSkillLevel(Skill.HITPOINTS));
		stats.setPrayerLevel(client.getRealSkillLevel(Skill.PRAYER));

		navigationButton = NavigationButton.builder()
			.panel(panel)
			.tooltip("SGS Savings Tracker")
			.icon(ImageUtil.loadImageResource(getClass(), "/sgs_icon.png"))
			.priority(5)
			.build();
		clientToolbar.addNavigation(navigationButton);
	}

	@Override
	protected void shutDown()
	{
		clientToolbar.removeNavigation(navigationButton);
	}

	@Subscribe
	public void onRuneScapeProfileChanged(RuneScapeProfileChanged event)
	{
		loadFromConfig();
	}

	private void loadFromConfig()
	{
		Integer configHp = configManager.getRSProfileConfiguration(CONFIG_GROUP_NAME, CONFIG_HP_KEY, Integer.class);
		Integer configPp = configManager.getRSProfileConfiguration(CONFIG_GROUP_NAME, CONFIG_PP_KEY, Integer.class);
		int formattedConfigHp = (configHp != null) ? configHp : 0;
		int formattedConfigPp = (configPp != null) ? configPp : 0;
		stats.setHpSaved(formattedConfigHp);
		stats.setPpSaved(formattedConfigPp);
	}

	private void saveToConfig()
	{
		if (stats.getHpSaved() > 0)
		{
			configManager.setRSProfileConfiguration(CONFIG_GROUP_NAME, CONFIG_HP_KEY, stats.getHpSaved());
		}
		else
		{
			configManager.unsetRSProfileConfiguration(CONFIG_GROUP_NAME, CONFIG_HP_KEY);
		}
		if (stats.getPpSaved() > 0)
		{
			configManager.setRSProfileConfiguration(CONFIG_GROUP_NAME, CONFIG_PP_KEY, stats.getPpSaved());
		}
		else
		{
			configManager.unsetRSProfileConfiguration(CONFIG_GROUP_NAME, CONFIG_PP_KEY);
		}
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		if (event.getVarpId() != VarPlayer.SPECIAL_ATTACK_PERCENT)
		{
			return;
		}

		int previousSpecPercent = stats.getSpecPercent();
		stats.setSpecPercent(event.getValue());

		if (playerIsWieldingSgs() && stats.getSpecPercent() < previousSpecPercent)
		{
			currentRestoreOccurrence = new RestoreOccurrence(
				client.getTickCount(),
				client.getBoostedSkillLevel(Skill.HITPOINTS),
				client.getBoostedSkillLevel(Skill.PRAYER));
		}
	}

	@Subscribe
	public void onStatChanged(StatChanged event)
	{
		switch (event.getSkill())
		{
			case HITPOINTS:
				stats.setHitpointsLevel(event.getLevel());
				if (currentRestoreOccurrence != null && client.getTickCount() == currentRestoreOccurrence.getSpecTick())
				{
					currentRestoreOccurrence.setActualHp(event.getBoostedLevel() - currentRestoreOccurrence.getPreviousHp());
				}
				break;
			case PRAYER:
				stats.setPrayerLevel(event.getLevel());
				if (currentRestoreOccurrence != null && client.getTickCount() == currentRestoreOccurrence.getSpecTick())
				{
					currentRestoreOccurrence.setActualPp(event.getBoostedLevel() - currentRestoreOccurrence.getPreviousPp());
				}
				break;
		}
	}

	@Subscribe
	public void onHitsplatApplied(HitsplatApplied event)
	{
		if (!event.getHitsplat().isMine() || event.getActor() == client.getLocalPlayer())
		{
			return;
		}

		// Player used SGS spec
		if (currentRestoreOccurrence == null || client.getTickCount() != currentRestoreOccurrence.getSpecTick() + 1)
		{
			return;
		}

		currentRestoreOccurrence.computeExpected(event.getHitsplat().getAmount());
		currentRestoreOccurrence.computeSaved();

		stats.incrementHpSaved(currentRestoreOccurrence.getSavedHp());
		stats.incrementPpSaved(currentRestoreOccurrence.getSavedPp());
	}

	private boolean playerIsWieldingSgs()
	{
		ItemContainer equipmentItemContainer = client.getItemContainer(InventoryID.EQUIPMENT);
		if (equipmentItemContainer == null)
		{
			return false;
		}

		Item weaponSlotItem = equipmentItemContainer.getItem(EquipmentInventorySlot.WEAPON.getSlotIdx());
		if (weaponSlotItem == null)
		{
			return false;
		}

		return Arrays.stream(SGS_ITEM_IDS).anyMatch(id -> id == weaponSlotItem.getId());
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (event.getGroup().equals(CONFIG_GROUP_NAME))
		{
			clientThread.invokeLater(() -> {
				panel.setHpItem(config.hpItem());
				panel.setPpItem(config.ppItem());
			});
		}
	}

	@Provides
	SGSSavingsTrackerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(SGSSavingsTrackerConfig.class);
	}
}
package com.sgssavingstracker;

import lombok.Getter;
import lombok.Setter;

@Getter
public class RestoreOccurrence
{
	private final int specTick;
	private final int previousHp;
	private final int previousPp;

	private int expectedHp;
	private int expectedPp;
	@Setter
	private int actualHp;
	@Setter
	private int actualPp;
	private int savedHp;
	private int savedPp;

	public RestoreOccurrence(int specTick, int previousHp, int previousPp)
	{
		this.specTick = specTick;
		this.previousHp = previousHp;
		this.previousPp = previousPp;
	}

	public void computeExpected(int specDamage)
	{
		this.expectedHp = Math.max(10, specDamage / 2);
		this.expectedPp = Math.max(5, specDamage / 4);
	}

	public void computeSaved()
	{
		savedHp = Math.min(actualHp, expectedHp);
		savedPp = Math.min(actualPp, expectedPp);
	}
}

package com.sgssavingstracker;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(SGSSavingsTrackerPlugin.CONFIG_GROUP_NAME)
public interface SGSSavingsTrackerConfig extends Config
{
	@ConfigItem(
		keyName = "hp_item",
		name = "HP Restore Item",
		description = "The item to use when displaying equivalent HP savings."
	)
	default HPItem hpItem()
	{
		return HPItem.SHARK;
	}

	@ConfigItem(
		keyName = "pp_item",
		name = "PP Restore Item",
		description = "The item to use when displaying equivalent PP savings."
	)
	default PPItem ppItem()
	{
		return PPItem.PRAYER_POTION;
	}
}
package com.sgssavingstracker.views;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.image.BufferedImage;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.SwingConstants;
import net.runelite.client.util.ImageUtil;

public class RestorePanel extends JPanel
{
	private final StatPanel hpPanel;
	private final StatPanel ppPanel;

	public RestorePanel()
	{
		setLayout(new GridBagLayout());

		JPanel spacerTop = new JPanel();
		spacerTop.setPreferredSize(new Dimension(0, 32));
		GridBagConstraints c0 = new GridBagConstraints();
		c0.gridx = 0;
		c0.gridy = 0;
		c0.weighty = 1;
		add(spacerTop, c0);

		BufferedImage hpIcon = ImageUtil.loadImageResource(getClass(), "/hitpoints_icon.png");
		hpPanel = new StatPanel(hpIcon);
		GridBagConstraints c1 = new GridBagConstraints();
		c1.gridx = 0;
		c1.gridy = 1;
		c1.weightx = 0.5;
		add(hpPanel, c1);

		JPanel spacerBottom = new JPanel();
		spacerBottom.setPreferredSize(new Dimension(0, 32));
		GridBagConstraints c2 = new GridBagConstraints();
		c2.gridx = 0;
		c2.gridy = 3;
		c2.weighty = 1;
		add(spacerBottom, c2);

		JSeparator separator = new JSeparator(SwingConstants.VERTICAL);
		GridBagConstraints c3 = new GridBagConstraints();
		c3.gridx = 1;
		c3.gridy = 0;
		c3.gridheight = 4;
		c3.fill = GridBagConstraints.BOTH;
		add(separator, c3);

		BufferedImage ppIcon = ImageUtil.loadImageResource(getClass(), "/prayer_icon.png");
		ppPanel = new StatPanel(ppIcon);
		GridBagConstraints c4 = new GridBagConstraints();
		c4.gridx = 2;
		c4.gridy = 1;
		c4.weightx = 0.5;
		add(ppPanel, c4);
	}

	public void setHpSaved(int hpSaved)
	{
		hpPanel.setValue(hpSaved);
	}

	public void setPpSaved(int ppSaved)
	{
		ppPanel.setValue(ppSaved);
	}
}

package com.sgssavingstracker.views;

import com.sgssavingstracker.HPItem;
import com.sgssavingstracker.PPItem;
import java.awt.Dimension;
import java.awt.GridLayout;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.util.AsyncBufferedImage;
import net.runelite.client.util.QuantityFormatter;

public class SavingsPanel extends JPanel
{
	private final ItemManager itemManager;

	private JLabel hpItemStackLabel;
	private JLabel ppItemStackLabel;
	private JLabel hpGpValueLabel;
	private JLabel ppGpValueLabel;
	private JLabel totalGpValueLabel;

	private HPItem hpItem;
	private PPItem ppItem;
	private int hpSaved = 0;
	private int ppSaved = 0;
	private int hitpointsLevel = 0;
	private int prayerLevel = 0;
	private int hpSavedGpValue;
	private int ppSavedGpValue;

	public SavingsPanel(ItemManager itemManager, HPItem hpItem, PPItem ppItem)
	{
		this.itemManager = itemManager;
		this.hpItem = hpItem;
		this.ppItem = ppItem;

		initView();
	}

	private void initView()
	{
		setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
		setBackground(ColorScheme.DARKER_GRAY_COLOR);
		setBorder(new EmptyBorder(8, 0, 8, 0));

		JLabel label = new JLabel("You've saved the equivalent of:");
		label.setAlignmentX(CENTER_ALIGNMENT);
		add(label);

		add(Box.createRigidArea(new Dimension(0, 8)));

		JPanel gridPanel1 = new JPanel();
		gridPanel1.setLayout(new GridLayout(2, 2, 16, 8));
		gridPanel1.setBackground(ColorScheme.DARKER_GRAY_COLOR);

		hpItemStackLabel = new JLabel();
		hpItemStackLabel.setHorizontalAlignment(SwingConstants.TRAILING);
		gridPanel1.add(hpItemStackLabel);

		hpGpValueLabel = new JLabel();
		hpGpValueLabel.setFont(FontManager.getRunescapeSmallFont());
		gridPanel1.add(hpGpValueLabel);

		ppItemStackLabel = new JLabel();
		ppItemStackLabel.setHorizontalAlignment(SwingConstants.TRAILING);
		gridPanel1.add(ppItemStackLabel);

		ppGpValueLabel = new JLabel();
		ppGpValueLabel.setFont(FontManager.getRunescapeSmallFont());
		gridPanel1.add(ppGpValueLabel);

		add(gridPanel1);

		add(Box.createRigidArea(new Dimension(0, 7)));

		JSeparator separator = new JSeparator(SwingConstants.HORIZONTAL);
		separator.setMinimumSize(new Dimension(160, 2));
		separator.setMaximumSize(new Dimension(160, 2));
		add(separator);

		add(Box.createRigidArea(new Dimension(0, 9)));

		JPanel gridPanel2 = new JPanel();
		gridPanel2.setLayout(new GridLayout(1, 2, 16, 8));
		gridPanel2.setBackground(ColorScheme.DARKER_GRAY_COLOR);

		JLabel totalLabel = new JLabel("Total: ");
		totalLabel.setHorizontalAlignment(SwingConstants.TRAILING);
		gridPanel2.add(totalLabel);

		totalGpValueLabel = new JLabel();
		totalGpValueLabel.setFont(FontManager.getRunescapeSmallFont());
		gridPanel2.add(totalGpValueLabel);

		add(gridPanel2);
	}

	public void setHpSaved(int hpSaved)
	{
		this.hpSaved = hpSaved;
		calculateHp();
	}

	public void setHpItem(HPItem item)
	{
		this.hpItem = item;
		calculateHp();
	}

	public void setPpSaved(int ppSaved)
	{
		this.ppSaved = ppSaved;
		calculatePp();
	}

	public void setPpItem(PPItem item)
	{
		this.ppItem = item;
		calculatePp();
	}

	public void setHitpointsLevel(int level)
	{
		this.hitpointsLevel = level;
		calculateHp();
	}

	public void setPrayerLevel(int level)
	{
		this.prayerLevel = level;
		calculatePp();
	}

	private void calculateHp()
	{
		int restorePerDose = hpItem.getRestorationFunction().apply(hitpointsLevel);

		float dosesRequired = (float) hpSaved / restorePerDose;
		int itemsRequired = (hitpointsLevel > 0) ? Math.round(dosesRequired / hpItem.getDosesPerItem()) : 0;

		int gpValuePerItem = itemManager.getItemPrice(hpItem.getId());
		hpSavedGpValue = gpValuePerItem * itemsRequired;

		AsyncBufferedImage hpItemStackImage = itemManager.getImage(hpItem.getId(), itemsRequired, true);
		hpItemStackImage.addTo(hpItemStackLabel);
		hpItemStackLabel.setToolTipText("<html>"
			+ hpItem.getName()
			+ ": <font color='white'>"
			+ QuantityFormatter.quantityToStackSize(gpValuePerItem)
			+ "</font> gp each</html>");
		hpGpValueLabel.setText("<html>- <font color='white'>"
			+ QuantityFormatter.quantityToStackSize(hpSavedGpValue)
			+ "</font> gp</html>");

		calculateTotal();
	}

	private void calculatePp()
	{
		int restorePerDose = ppItem.getRestorationFunction().apply(prayerLevel);

		float dosesRequired = (float) ppSaved / restorePerDose;
		int itemsRequired = (prayerLevel > 0) ? Math.round(dosesRequired / ppItem.getDosesPerItem()) : 0;

		int gpValuePerItem = itemManager.getItemPrice(ppItem.getId());
		ppSavedGpValue = gpValuePerItem * itemsRequired;

		AsyncBufferedImage ppItemStackImage = itemManager.getImage(ppItem.getId(), itemsRequired, true);
		ppItemStackImage.addTo(ppItemStackLabel);
		ppItemStackLabel.setToolTipText("<html>"
			+ ppItem.getName()
			+ ": <font color='white'>"
			+ QuantityFormatter.quantityToStackSize(gpValuePerItem)
			+ "</font> gp each</html>");
		ppGpValueLabel.setText("<html>- <font color='white'>"
			+ QuantityFormatter.quantityToStackSize(ppSavedGpValue)
			+ "</font> gp</html>");

		calculateTotal();
	}

	private void calculateTotal()
	{
		totalGpValueLabel.setText("<html>- <font color='white'>"
			+ QuantityFormatter.quantityToStackSize(hpSavedGpValue + ppSavedGpValue)
			+ "</font> gp</html>");
	}
}

package com.sgssavingstracker.views;

import java.awt.BorderLayout;
import java.awt.image.BufferedImage;
import java.text.NumberFormat;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import net.runelite.client.ui.ColorScheme;

public class StatPanel extends JPanel
{
	private final NumberFormat formatter = NumberFormat.getInstance();
	private final JLabel valueLabel;

	public StatPanel(BufferedImage image)
	{
		setLayout(new BorderLayout());
		setBackground(ColorScheme.DARKER_GRAY_COLOR);
		setBorder(new EmptyBorder(8, 8, 8, 8));

		JLabel iconLabel = new JLabel(new ImageIcon(image));
		iconLabel.setBorder(new EmptyBorder(8, 8, 8, 8));
		add(iconLabel, BorderLayout.PAGE_START);

		valueLabel = new JLabel();
		valueLabel.setHorizontalAlignment(SwingConstants.CENTER);
		setValue(0);
		add(valueLabel, BorderLayout.PAGE_END);
	}

	public void setValue(int value)
	{
		valueLabel.setText(formatter.format(value));
	}
}

package com.sgssavingstracker;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import lombok.Getter;
import lombok.Setter;

@Getter
public class Stats
{
	private final PropertyChangeSupport support = new PropertyChangeSupport(this);

	@Setter
	private int specPercent = 0;
	private int hpSaved = 0;
	private int ppSaved = 0;
	private int hitpointsLevel = 0;
	private int prayerLevel = 0;

	public void setHpSaved(int value)
	{
		int previous = hpSaved;
		hpSaved = value;
		support.firePropertyChange("hp", previous, hpSaved);
	}

	public void incrementHpSaved(int value)
	{
		int previous = hpSaved;
		hpSaved += value;
		support.firePropertyChange("hp", previous, hpSaved);
	}

	public void setPpSaved(int value)
	{
		int previous = ppSaved;
		ppSaved = value;
		support.firePropertyChange("pp", previous, ppSaved);
	}

	public void incrementPpSaved(int value)
	{
		int previous = ppSaved;
		ppSaved += value;
		support.firePropertyChange("pp", previous, ppSaved);
	}

	public void setHitpointsLevel(int value)
	{
		if (value == hitpointsLevel)
		{
			return;
		}

		int previous = hitpointsLevel;
		hitpointsLevel = value;
		support.firePropertyChange("hitpointsLevel", previous, hitpointsLevel);
	}

	public void setPrayerLevel(int value)
	{
		if (value == prayerLevel)
		{
			return;
		}

		int previous = prayerLevel;
		prayerLevel = value;
		support.firePropertyChange("prayerLevel", previous, prayerLevel);
	}

	public void addPropertyChangeListener(PropertyChangeListener listener)
	{
		support.addPropertyChangeListener(listener);
	}
}
package com.sgssavingstracker;

import java.util.function.Function;
import lombok.Getter;

@Getter
public enum PPItem
{
	PRAYER_POTION("Prayer potion(4)", 2434, prayerLevel -> (prayerLevel / 4) + 7),
	SUPER_RESTORE("Super restore(4)", 3024, prayerLevel -> (prayerLevel / 4) + 8),
	SANFEW_SERUM("Sanfew serum(4)", 10925, prayerLevel -> (prayerLevel * 3 / 10) + 4);

	private final String name;
	private final int id;
	private final Function<Integer, Integer> restorationFunction;
	private final int dosesPerItem;

	PPItem(String name, int id, Function<Integer, Integer> restorationFunction)
	{
		this.name = name;
		this.id = id;
		this.restorationFunction = restorationFunction;
		this.dosesPerItem = 4;
	}

	PPItem(String name, int id, Function<Integer, Integer> restorationFunction, int dosesPerItem)
	{
		this.name = name;
		this.id = id;
		this.restorationFunction = restorationFunction;
		this.dosesPerItem = dosesPerItem;
	}
}

package com.sgssavingstracker;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SGSSavingsTrackerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(SGSSavingsTrackerPlugin.class);
		RuneLite.main(args);
	}
}
