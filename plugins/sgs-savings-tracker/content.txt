package com.sgssavingstracker;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SGSSavingsTrackerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(SGSSavingsTrackerPlugin.class);
		RuneLite.main(args);
	}
}
package com.sgssavingstracker;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
public class Stats
{
	private final PropertyChangeSupport support = new PropertyChangeSupport(this);

	@Setter
	@Getter
	private int specPercent = 0;
	@Getter
	private int hitpoints = 0;
	@Getter
	private int prayer = 0;
	@Getter
	private int prayerLevel = 0;

	public void setHitpoints(int value)
	{
		int previous = this.hitpoints;
		this.hitpoints = value;
		support.firePropertyChange("hitpoints", previous, this.hitpoints);
	}

	public void setPrayer(int value)
	{
		int previous = this.prayer;
		this.prayer = value;
		support.firePropertyChange("prayer", previous, this.prayer);
	}

	public void setPrayerLevel(int value)
	{
		int previous = this.prayerLevel;
		this.prayerLevel = value;
		support.firePropertyChange("prayerLevel", previous, this.prayerLevel);
	}

	public void incrementHitpoints(int value)
	{
		int previous = this.hitpoints;
		this.hitpoints += value;
		support.firePropertyChange("hitpoints", previous, this.hitpoints);
	}

	public void incrementPrayer(int value)
	{
		int previous = this.prayer;
		this.prayer += value;
		support.firePropertyChange("prayer", previous, this.prayer);
	}

	public void addPropertyChangeListener(PropertyChangeListener listener)
	{
		support.addPropertyChangeListener(listener);
	}
}
package com.sgssavingstracker;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
public class RestoreOccurrence
{
	@Getter
	private final int specTick;
	@Getter
	private final int previousHitpoints;
	@Getter
	private final int previousPrayer;

	private int expectedHitpoints;
	private int expectedPrayer;
	@Setter
	private int actualHitpoints;
	@Setter
	private int actualPrayer;
	@Getter
	private int savedHitpoints;
	@Getter
	private int savedPrayer;

	public RestoreOccurrence(int specTick, int previousHitpoints, int previousPrayer)
	{
		this.specTick = specTick;
		this.previousHitpoints = previousHitpoints;
		this.previousPrayer = previousPrayer;
	}

	public void computeExpected(int specDamage)
	{
		this.expectedHitpoints = Math.max(10, specDamage / 2);
		this.expectedPrayer = Math.max(5, specDamage / 4);
	}

	public void computeSaved()
	{
		savedHitpoints = Math.min(actualHitpoints, expectedHitpoints);
		savedPrayer = Math.min(actualPrayer, expectedPrayer);
	}
}

package com.sgssavingstracker;

import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.Skill;
import net.runelite.api.VarPlayer;
import net.runelite.api.events.HitsplatApplied;
import net.runelite.api.events.StatChanged;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.RuneScapeProfileChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

@Slf4j
@PluginDescriptor(
	name = "SGS Savings Tracker",
	description = "Track Hitpoints and Prayer saved by using the SGS Special Attack.",
	tags = {"saradomin", "godsword", "hitpoints", "hp", "prayer", "pp"}
)
public class SGSSavingsTrackerPlugin extends Plugin
{
	// SGS: 11806
	public static final int SGS_ITEM_ID = 11806;
	public static final String CONFIG_GROUP_NAME = "sgssavingstracker";
	public static final String CONFIG_HITPOINTS_KEY = "hitpointsSaved";
	public static final String CONFIG_PRAYER_KEY = "prayerSaved";

	private Stats stats;
	private RestoreOccurrence currentRestoreOccurrence;
	private NavigationButton navigationButton;

	@Inject
	private Client client;
	@Inject
	private ClientToolbar clientToolbar;
	@Inject
	private ClientThread clientThread;
	@Inject
	private ConfigManager configManager;
	@Inject
	private ItemManager itemManager;

	@Override
	protected void startUp()
	{
		stats = new Stats();
		SGSSavingsTrackerPanel panel = new SGSSavingsTrackerPanel(stats, itemManager);
		stats.addPropertyChangeListener(event ->
			clientThread.invokeLater(() -> {
				panel.update(event);
				saveToConfig();
			}));

		loadFromConfig();
		stats.setSpecPercent(client.getVarpValue(VarPlayer.SPECIAL_ATTACK_PERCENT));
		stats.setPrayerLevel(client.getRealSkillLevel(Skill.PRAYER));

		navigationButton = NavigationButton.builder()
			.panel(panel)
			.tooltip("SGS Savings Tracker")
			.icon(ImageUtil.loadImageResource(getClass(), "/sgs_icon.png"))
			.priority(5)
			.build();
		clientToolbar.addNavigation(navigationButton);
	}

	@Override
	protected void shutDown()
	{
		clientToolbar.removeNavigation(navigationButton);
	}

	@Subscribe
	public void onRuneScapeProfileChanged(RuneScapeProfileChanged event)
	{
		loadFromConfig();
	}

	private void loadFromConfig()
	{
		Integer configHitpoints = configManager.getRSProfileConfiguration(CONFIG_GROUP_NAME, CONFIG_HITPOINTS_KEY, Integer.class);
		Integer configPrayer = configManager.getRSProfileConfiguration(CONFIG_GROUP_NAME, CONFIG_PRAYER_KEY, Integer.class);
		int hitpointsValue = (configHitpoints != null) ? configHitpoints : 0;
		int prayerValue = (configPrayer != null) ? configPrayer : 0;
		stats.setHitpoints(hitpointsValue);
		stats.setPrayer(prayerValue);
	}

	private void saveToConfig()
	{
		if (stats.getHitpoints() > 0)
		{
			configManager.setRSProfileConfiguration(CONFIG_GROUP_NAME, CONFIG_HITPOINTS_KEY, stats.getHitpoints());
		}
		else
		{
			configManager.unsetRSProfileConfiguration(CONFIG_GROUP_NAME, CONFIG_HITPOINTS_KEY);
		}
		if (stats.getPrayer() > 0)
		{
			configManager.setRSProfileConfiguration(CONFIG_GROUP_NAME, CONFIG_PRAYER_KEY, stats.getPrayer());
		}
		else
		{
			configManager.unsetRSProfileConfiguration(CONFIG_GROUP_NAME, CONFIG_PRAYER_KEY);
		}
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		if (event.getVarpId() != VarPlayer.SPECIAL_ATTACK_PERCENT)
		{
			return;
		}

		int previousSpecPercent = stats.getSpecPercent();
		stats.setSpecPercent(event.getValue());

		if (playerIsWieldingSGS() && stats.getSpecPercent() < previousSpecPercent)
		{
			currentRestoreOccurrence = new RestoreOccurrence(
				client.getTickCount(),
				client.getBoostedSkillLevel(Skill.HITPOINTS),
				client.getBoostedSkillLevel(Skill.PRAYER));
		}
	}

	@Subscribe
	public void onStatChanged(StatChanged event)
	{
		if (event.getSkill() == Skill.PRAYER && event.getLevel() != stats.getPrayerLevel())
		{
			stats.setPrayerLevel(event.getLevel());
		}

		// Player used SGS spec
		if (currentRestoreOccurrence == null || client.getTickCount() != currentRestoreOccurrence.getSpecTick())
		{
			return;
		}

		// Record actually gained HP/PP
		switch (event.getSkill())
		{
			case HITPOINTS:
				currentRestoreOccurrence.setActualHitpoints(event.getBoostedLevel() - currentRestoreOccurrence.getPreviousHitpoints());
				break;
			case PRAYER:
				currentRestoreOccurrence.setActualPrayer(event.getBoostedLevel() - currentRestoreOccurrence.getPreviousPrayer());
				break;
		}
	}

	@Subscribe
	public void onHitsplatApplied(HitsplatApplied event)
	{
		if (!event.getHitsplat().isMine() || event.getActor() == client.getLocalPlayer())
		{
			return;
		}

		// Player used SGS spec
		if (currentRestoreOccurrence == null || client.getTickCount() != currentRestoreOccurrence.getSpecTick() + 1)
		{
			return;
		}

		currentRestoreOccurrence.computeExpected(event.getHitsplat().getAmount());
		currentRestoreOccurrence.computeSaved();

		stats.incrementHitpoints(currentRestoreOccurrence.getSavedHitpoints());
		stats.incrementPrayer(currentRestoreOccurrence.getSavedPrayer());
	}

	private boolean playerIsWieldingSGS()
	{
		final ItemContainer equipmentItemContainer = client.getItemContainer(InventoryID.EQUIPMENT);
		if (equipmentItemContainer == null)
		{
			return false;
		}

		Item weaponSlotItem = equipmentItemContainer.getItem(EquipmentInventorySlot.WEAPON.getSlotIdx());
		if (weaponSlotItem == null)
		{
			return false;
		}

		return weaponSlotItem.getId() == SGS_ITEM_ID;
	}
}
package com.sgssavingstracker.views;

import java.awt.Dimension;
import java.awt.GridLayout;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.util.AsyncBufferedImage;
import net.runelite.client.util.QuantityFormatter;

public class SavingsPanel extends JPanel
{
	private static final int SHARK_ITEM_ID = 385;
	private static final int POTION_ITEM_ID = 2434;

	JLabel sharkLabel;
	JLabel potionLabel;
	JLabel sharkValue;
	JLabel potionValue;
	ItemManager itemManager;

	public SavingsPanel(ItemManager itemManager)
	{
		this.itemManager = itemManager;

		setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
		setBackground(ColorScheme.DARKER_GRAY_COLOR);
		setBorder(new EmptyBorder(8, 0, 8, 0));

		JLabel label = new JLabel("You've saved the equivalent of:");
		label.setAlignmentX(CENTER_ALIGNMENT);
		add(label);

		add(Box.createRigidArea(new Dimension(0, 8)));

		JPanel gridPanel = new JPanel();
		gridPanel.setLayout(new GridLayout(2, 2, 16, 8));
		gridPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);

		sharkLabel = new JLabel();
		sharkLabel.setHorizontalAlignment(SwingConstants.TRAILING);
		gridPanel.add(sharkLabel);

		sharkValue = new JLabel();
		sharkValue.setFont(FontManager.getRunescapeSmallFont());
		gridPanel.add(sharkValue);

		potionLabel = new JLabel();
		potionLabel.setHorizontalAlignment(SwingConstants.TRAILING);
		gridPanel.add(potionLabel);

		potionValue = new JLabel();
		potionValue.setFont(FontManager.getRunescapeSmallFont());
		gridPanel.add(potionValue);

		add(gridPanel);

		setSharks(0);
		setPotions(0, 0);
	}

	public void setSharks(int hitpoints)
	{
		int quantity = Math.round(hitpoints / 20f);

		// Initial panel construction is not on client thread, so we can't access getItemPrice
		int value = (quantity > 0) ? itemManager.getItemPrice(SHARK_ITEM_ID) * quantity : 0;

		AsyncBufferedImage sharkImage = itemManager.getImage(SHARK_ITEM_ID, quantity, true);
		sharkImage.addTo(sharkLabel);
		sharkValue.setText("<html>- <font color='white'>" + QuantityFormatter.quantityToStackSize(value) + "</font> gp</html>");
	}

	public void setPotions(int prayer, int prayerLevel)
	{
		int quantity;

		// On login, restore values are loaded from config before prayer level is determined
		// Prevent incorrect quantity from briefly displaying prior to determining prayer level
		if (prayerLevel > 0)
		{
			int restorePerDose = (prayerLevel / 4) + 7;
			float dosesRequired = (float) prayer / restorePerDose;
			quantity = Math.round(dosesRequired / 4);
		}
		else
		{
			quantity = 0;
		}

		// Initial panel construction is not on client thread, so we can't access getItemPrice
		int value = (quantity > 0) ? itemManager.getItemPrice(POTION_ITEM_ID) * quantity : 0;

		AsyncBufferedImage prayerImage = itemManager.getImage(POTION_ITEM_ID, quantity, true);
		prayerImage.addTo(potionLabel);
		potionValue.setText("<html>- <font color='white'>" + QuantityFormatter.quantityToStackSize(value) + "</font> gp</html>");
	}
}

package com.sgssavingstracker.views;

import java.awt.BorderLayout;
import java.awt.image.BufferedImage;
import java.text.NumberFormat;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import net.runelite.client.ui.ColorScheme;

public class StatPanel extends JPanel
{
	NumberFormat formatter = NumberFormat.getInstance();
	JLabel valueLabel;

	public StatPanel(BufferedImage image)
	{
		setLayout(new BorderLayout());
		setBackground(ColorScheme.DARKER_GRAY_COLOR);
		setBorder(new EmptyBorder(8, 8, 8, 8));

		JLabel iconLabel = new JLabel(new ImageIcon(image));
		iconLabel.setBorder(new EmptyBorder(8, 8, 8, 8));
		add(iconLabel, BorderLayout.PAGE_START);

		valueLabel = new JLabel();
		valueLabel.setHorizontalAlignment(SwingConstants.CENTER);
		setValue(0);
		add(valueLabel, BorderLayout.PAGE_END);
	}

	public void setValue(int value)
	{
		valueLabel.setText(formatter.format(value));
	}
}

package com.sgssavingstracker.views;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.image.BufferedImage;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.SwingConstants;
import net.runelite.client.util.ImageUtil;

public class RestorePanel extends JPanel
{
	StatPanel hitpointsPanel;
	StatPanel prayerPanel;

	public RestorePanel()
	{
		setLayout(new GridBagLayout());

		JPanel spacerTop = new JPanel();
		spacerTop.setPreferredSize(new Dimension(0, 32));
		GridBagConstraints c0 = new GridBagConstraints();
		c0.gridx = 0;
		c0.gridy = 0;
		c0.weighty = 1;
		add(spacerTop, c0);

		BufferedImage hitpointsIcon = ImageUtil.loadImageResource(getClass(), "/hitpoints_icon.png");
		hitpointsPanel = new StatPanel(hitpointsIcon);
		GridBagConstraints c1 = new GridBagConstraints();
		c1.gridx = 0;
		c1.gridy = 1;
		c1.weightx = 0.5;
		add(hitpointsPanel, c1);

		JPanel spacerBottom = new JPanel();
		spacerBottom.setPreferredSize(new Dimension(0, 32));
		GridBagConstraints c2 = new GridBagConstraints();
		c2.gridx = 0;
		c2.gridy = 3;
		c2.weighty = 1;
		add(spacerBottom, c2);

		JSeparator separator = new JSeparator(SwingConstants.VERTICAL);
		GridBagConstraints c3 = new GridBagConstraints();
		c3.gridx = 1;
		c3.gridy = 0;
		c3.gridheight = 4;
		c3.fill = GridBagConstraints.BOTH;
		add(separator, c3);

		BufferedImage prayerIcon = ImageUtil.loadImageResource(getClass(), "/prayer_icon.png");
		prayerPanel = new StatPanel(prayerIcon);
		GridBagConstraints c4 = new GridBagConstraints();
		c4.gridx = 2;
		c4.gridy = 1;
		c4.weightx = 0.5;
		add(prayerPanel, c4);
	}

	public void setHitpoints(int hitpoints)
	{
		hitpointsPanel.setValue(hitpoints);
	}

	public void setPrayer(int prayer)
	{
		prayerPanel.setValue(prayer);
	}
}

package com.sgssavingstracker;

import com.sgssavingstracker.views.RestorePanel;
import com.sgssavingstracker.views.SavingsPanel;
import java.awt.BorderLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.beans.PropertyChangeEvent;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.PluginErrorPanel;

public class SGSSavingsTrackerPanel extends PluginPanel
{
	Stats stats;
	RestorePanel restorePanel;
	SavingsPanel savingsPanel;

	SGSSavingsTrackerPanel(Stats stats, ItemManager itemManager)
	{
		this.stats = stats;
		initView(itemManager);
	}

	private void initView(ItemManager itemManager)
	{
		getParent().setLayout(new BorderLayout());
		getParent().add(this, BorderLayout.CENTER);

		setLayout(new GridBagLayout());

		PluginErrorPanel titlePanel = new PluginErrorPanel();
		titlePanel.setContent("SGS Savings Tracker", "Track Hitpoints and Prayer saved by using the SGS Special Attack.");
		GridBagConstraints c0 = new GridBagConstraints();
		c0.gridy = 0;
		c0.fill = GridBagConstraints.BOTH;
		c0.weighty = 0.1;
		c0.weightx = 1;
		add(titlePanel, c0);

		restorePanel = new RestorePanel();
		restorePanel.setMinimumSize(restorePanel.getPreferredSize());
		GridBagConstraints c1 = new GridBagConstraints();
		c1.gridy = 1;
		c1.weightx = 1;
		c1.fill = GridBagConstraints.BOTH;
		c1.insets = new Insets(32, 0, 32, 0);
		add(restorePanel, c1);

		savingsPanel = new SavingsPanel(itemManager);
		GridBagConstraints c2 = new GridBagConstraints();
		c2.gridy = 3;
		c2.weightx = 1;
		c2.fill = GridBagConstraints.BOTH;
		add(savingsPanel, c2);

		JPanel spacer = new JPanel();
		GridBagConstraints c3 = new GridBagConstraints();
		c3.gridy = 4;
		c3.weighty = 1;
		add(spacer, c3);

		JButton resetButton = new JButton("Reset");
		resetButton.addActionListener(event -> {
			final int result = JOptionPane.showOptionDialog(this,
				"<html>This will reset Hitpoints and Prayer Points to 0.<br>This action cannot be undone. Are you sure?</html>",
				"Are you sure?", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE,
				null, new String[]{"Yes", "No"}, "No");
			if (result == JOptionPane.YES_OPTION)
			{
				resetClicked();
			}
		});
		GridBagConstraints c4 = new GridBagConstraints();
		c4.gridy = 5;
		c4.weightx = 1;
		c4.fill = GridBagConstraints.BOTH;
		add(resetButton, c4);
	}

	void update(PropertyChangeEvent event)
	{
		int newValue = (Integer) event.getNewValue();
		switch (event.getPropertyName())
		{
			case "hitpoints":
				restorePanel.setHitpoints(newValue);
				savingsPanel.setSharks(newValue);
				break;
			case "prayer":
				restorePanel.setPrayer(newValue);
				savingsPanel.setPotions(newValue, stats.getPrayerLevel());
				break;
			case "prayerLevel":
				savingsPanel.setPotions(stats.getPrayer(), newValue);
		}
	}

	private void resetClicked()
	{
		if (stats == null)
		{
			return;
		}
		stats.setHitpoints(0);
		stats.setPrayer(0);
	}
}
