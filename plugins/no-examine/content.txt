package com.noexamine;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class NoExaminePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(NoExaminePlugin.class);
		RuneLite.main(args);
	}
}
package com.noexamine;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("noexamine")
public interface NoExamineConfig extends Config
{
	@ConfigSection(
		name = "Examine",
		description = "Settings for removing examine menu options",
		position = 0
	)
	String sectionExamine = "sectionExamine";

	@ConfigItem(
		keyName = "examineShift",
		name = "Bypass with Shift",
		description = "Whether to not remove examine menu options when Shift is held down",
		position = 1,
		section = sectionExamine
	)
	default boolean examineShift()
	{
		return true;
	}

	@ConfigItem(
		keyName = "examineItemGround",
		name = "Ground items",
		description = "Whether to remove examine menu options on ground items",
		position = 2,
		section = sectionExamine
	)
	default boolean examineItemsGround()
	{
		return true;
	}

	@ConfigItem(
		keyName = "examineItemsInventory",
		name = "Inventory items",
		description = "Whether to remove examine menu options on inventory items",
		position = 3,
		section = sectionExamine
	)
	default boolean examineItemInventory()
	{
		return true;
	}

	@ConfigItem(
		keyName = "examineNpcs",
		name = "NPCs",
		description = "Whether to remove examine menu options on NPCs",
		position = 4,
		section = sectionExamine
	)
	default boolean examineNpcs()
	{
		return true;
	}

	@ConfigItem(
		keyName = "examineObjects",
		name = "Objects",
		description = "Whether to remove examine menu options on objects",
		position = 5,
		section = sectionExamine
	)
	default boolean examineObjects()
	{
		return true;
	}

	@ConfigItem(
		keyName = "keepLonelyExamineNpcs",
		name = "Keep lonely NPC examines",
		description = "Whether to not remove examine menu options on NPCs with no other options",
		position = 6,
		section = sectionExamine
	)
	default boolean keepLonelyExamineNpcs()
	{
		return false;
	}

	@ConfigItem(
		keyName = "keepLonelyExamineObjects",
		name = "Keep lonely object examines",
		description = "Whether to not remove examine menu options on objects with no other options",
		position = 6,
		section = sectionExamine
	)
	default boolean keepLonelyExamineObjects()
	{
		return false;
	}

	@ConfigSection(
		name = "Cancel",
		description = "Settings for removing cancel menu options",
		position = 6
	)
	String sectionCancel = "sectionCancel";

	@ConfigItem(
		keyName = "cancelEverywhere",
		name = "Everywhere",
		description = "Whether to remove cancel menu options everywhere",
		position = 7,
		section = sectionCancel
	)
	default boolean cancelEverywhere()
	{
		return false;
	}

	@ConfigSection(
		name = "Remove",
		description = "Settings for removing player-owned house remove menu options",
		position = 8
	)
	String sectionRemove = "sectionRemove";

	@ConfigItem(
		keyName = "removePoh",
		name = "Player-owned house",
		description = "Whether to remove the remove menu options inside the player-owned house when building mode is off",
		position = 9,
		section = sectionRemove
	)
	default boolean removePoh()
	{
		return false;
	}

	@ConfigSection(
		name = "Walk here",
		description = "Settings for removing walk here menu options",
		position = 10
	)
	String sectionWalkHere = "sectionWalkHere";

	@ConfigItem(
		keyName = "walkHereEverywhere",
		name = "Everywhere",
		description = "Whether to remove walk here menu options everywhere",
		position = 11,
		section = sectionWalkHere
	)
	default boolean walkHereEverywhere()
	{
		return false;
	}
}

package com.noexamine;

import com.google.inject.Inject;
import com.google.inject.Provides;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import net.runelite.api.Client;
import net.runelite.api.KeyCode;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.NPCComposition;
import net.runelite.api.ObjectComposition;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.MenuOpened;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

@PluginDescriptor(
	name = "No Examine",
	description = "Remove examine menu options to never missclick again",
	tags = {"examine", "missclick"}
)
public class NoExaminePlugin extends Plugin
{
	private static final String EXAMINE = "Examine";
	private static final String REMOVE = "Remove";
	private static final int POH_BUILDING_MODE_VARBIT = 2176;
	private static final Set<Integer> POH_REGION_IDS = new HashSet<>(Arrays.asList(7258, 7514, 7770, 8026, 7257, 7513, 7769, 8025));

	@Inject
	private Client client;

	@Inject
	private NoExamineConfig config;

	@Provides
	NoExamineConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(NoExamineConfig.class);
	}

	@Subscribe(
		priority = -1
	)
	public void onMenuOpened(MenuOpened event)
	{
		MenuEntry[] menuEntries = client.getMenuEntries();
		List<MenuEntry> alteredMenuEntries = new ArrayList<>();

		for (MenuEntry menuEntry : menuEntries)
		{
			MenuAction menuAction = menuEntry.getType();

			if (!isExamine(menuEntry) &&
				!isCancel(menuAction) &&
				!isRemove(menuAction, menuEntry.getOption()) &&
				!isWalkHere(menuAction))
			{
				alteredMenuEntries.add(menuEntry);
			}
		}

		client.setMenuEntries(alteredMenuEntries.toArray(new MenuEntry[0]));
	}

	private boolean isExamine(MenuEntry menuEntry)
	{
		if (client.isKeyPressed(KeyCode.KC_SHIFT) && config.examineShift())
		{
			return false;
		}
		MenuAction menuAction = menuEntry.getType();
		String option = menuEntry.getOption();
		return (MenuAction.EXAMINE_ITEM_GROUND.equals(menuAction) && config.examineItemsGround()) ||
				(MenuAction.EXAMINE_NPC.equals(menuAction) && config.examineNpcs() && !isLonely(menuEntry, config.keepLonelyExamineNpcs())) ||
				(MenuAction.EXAMINE_OBJECT.equals(menuAction) && config.examineObjects() && !isLonely(menuEntry, config.keepLonelyExamineObjects())) ||
				(MenuAction.CC_OP_LOW_PRIORITY.equals(menuAction) && config.examineItemInventory() && EXAMINE.equals(option));
	}

	private boolean isLonely(MenuEntry menuEntry, boolean keepLonely)
	{
		MenuAction menuAction = menuEntry.getType();
		NPCComposition npcDefinition;
		ObjectComposition objectDefinition;
		boolean isLonelyExamineNpc = (keepLonely &&
			MenuAction.EXAMINE_NPC.equals(menuAction) &&
			menuEntry.getNpc() != null &&
			(npcDefinition = client.getNpcDefinition(menuEntry.getNpc().getId())) != null &&
			isAllNull(npcDefinition.getActions()));
		boolean isLonelyExamineObject = (keepLonely &&
			MenuAction.EXAMINE_OBJECT.equals(menuAction) &&
			(objectDefinition = client.getObjectDefinition(menuEntry.getIdentifier())) != null &&
			isAllNull(objectDefinition.getActions()));
		if (isLonelyExamineNpc || isLonelyExamineObject)
		{
			return true;
		}
		return false;
	}

	private boolean isAllNull(String[] actions)
	{
		for (String action : actions)
		{
			if (action != null)
			{
				return false;
			}
		}
		return true;
	}

	private boolean isPoh()
	{
		return client.getVarbitValue(POH_BUILDING_MODE_VARBIT) != 1 &&
			POH_REGION_IDS.contains(WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation()).getRegionID());
	}

	private boolean isCancel(MenuAction menuAction)
	{
		return MenuAction.CANCEL.equals(menuAction) && config.cancelEverywhere();
	}

	private boolean isRemove(MenuAction menuAction, String option)
	{
		return isPoh() && MenuAction.GAME_OBJECT_FIFTH_OPTION.equals(menuAction) && REMOVE.equals(option) && config.removePoh();
	}

	private boolean isWalkHere(MenuAction menuAction)
	{
		return MenuAction.WALK.equals(menuAction) && config.walkHereEverywhere();
	}
}

