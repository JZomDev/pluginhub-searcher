package com.braceletreminder;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import java.awt.*;

@ConfigGroup("BraceletReminder")
public interface BraceletReminderConfig extends Config {
	@ConfigItem(keyName = "slaughter", name = "Bracelet of Slaughter", description = "Highlights Bracelets of Slaughter.", position = 1)
	default boolean slaughter() {
		return true;
	}

	@ConfigItem(keyName = "expeditious", name = "Expeditious Bracelet", description = "Highlights Expeditious Bracelets.", position = 2)
	default boolean expeditious() {
		return true;
	}

	@ConfigItem(keyName = "LowHPThreshold", name = "Health Threshold", description = "Choose what HP threshold you want to be notified to wear your bracelet.", position = 7)

	default int healthThreshold() {
		return 15;
	}

	@ConfigItem(keyName = "shouldFlash", name = "Disco Mode", description = "make the popup box flash between two colours of your choosing.", position = 3)
	default boolean shouldFlash() { return false; }

	@Alpha
	@ConfigItem(keyName = "flashColor1", name = "Main Colour", description = "pick the main colour of the popup reminder.", position = 4)
	default Color flashColor1() {
		return new Color(23, 255, 177, 150);
	}
	@Alpha
	@ConfigItem(keyName = "flashColor2", name = "Secondary Colour", description = "pick the secondary colour if you have toggled the reminder to flash.", position = 5)
	default Color flashColor2() {
		return new Color(151, 88, 221, 150);
	}
	@ConfigItem(keyName = "ReminderStyle", name = "Reminder Style", description = "Changes the style of the reminder overlay.", position = 6)
	default BraceletOverlayStyle reminderStyle() { return BraceletOverlayStyle.LONG_TEXT;}
	@ConfigItem(keyName = "overlayDuration", name = "Overlay Duration", description = "How long the overlay will stay up in seconds.", position = 8)
	default int overlayDuration() {return 10;}
}

package com.braceletreminder;

public enum BraceletOverlayStyle {
    LONG_TEXT,
    SHORT_TEXT,
}

package com.braceletreminder;

import javax.inject.Inject;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemVariationMapping;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import java.time.Duration;
import java.time.Instant;

import static net.runelite.api.ItemID.*;

@Slf4j
@PluginDescriptor(name = "Bracelet Reminder")

public class BraceletReminderPlugin extends Plugin {

	private int overlayVisible;

	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private BraceletReminderOverlay braceletOverlay;

	@Inject
	private BraceletReminderConfig config;

	@Provides
	BraceletReminderConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(BraceletReminderConfig.class);
	}

	boolean checkBracelet() {
		final ItemContainer equipment = client.getItemContainer(InventoryID.EQUIPMENT);
		return equipment.contains(BRACELET_OF_SLAUGHTER) || equipment.contains(EXPEDITIOUS_BRACELET);
	}

	boolean checkInventory() {
		final ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
		return (config.slaughter() && inventory.contains(BRACELET_OF_SLAUGHTER)) || (config.expeditious() && inventory.contains(EXPEDITIOUS_BRACELET));
	}
	boolean checkAmulet() {
		Item neck = client.getItemContainer(InventoryID.EQUIPMENT).getItem(EquipmentInventorySlot.AMULET.getSlotIdx());
		if (neck == null) {
			return false;
		}
		boolean amuletEquipped = ItemVariationMapping.getVariations(SALVE_AMULETEI).contains(neck.getId());
		boolean amuletEquipped2 = ItemVariationMapping.getVariations(SALVE_AMULET_E).contains(neck.getId());
		boolean amuletEquipped3 = ItemVariationMapping.getVariations(AMULET_OF_AVARICE).contains(neck.getId());
		return (amuletEquipped || amuletEquipped2 || amuletEquipped3);

	}

	boolean checkHelmet() {
		Item hat = client.getItemContainer(InventoryID.EQUIPMENT).getItem(EquipmentInventorySlot.HEAD.getSlotIdx());
		if (hat == null) {
			return false;
		}
		boolean slayerHelmEquipped = ItemVariationMapping.getVariations(SLAYER_HELMET).contains(hat.getId());
		boolean blackMaskEquipped = ItemVariationMapping.getVariations(BLACK_MASK).contains(hat.getId());
		boolean blackMaskiEquipped = ItemVariationMapping.getVariations(BLACK_MASK_I).contains(hat.getId());
		boolean spinyHelmEquipped = ItemVariationMapping.getVariations(SPINY_HELMET).contains(hat.getId());
		boolean nosePegEquipped = ItemVariationMapping.getVariations(NOSE_PEG).contains(hat.getId());
		boolean faceMaskEquipped = ItemVariationMapping.getVariations(FACEMASK).contains(hat.getId());
		boolean earMuffsEquipped = ItemVariationMapping.getVariations(EARMUFFS).contains(hat.getId());
		boolean gogglesEquipped = ItemVariationMapping.getVariations(REINFORCED_GOGGLES).contains(hat.getId());
		return (slayerHelmEquipped || blackMaskEquipped || blackMaskiEquipped || spinyHelmEquipped || nosePegEquipped || faceMaskEquipped || earMuffsEquipped || gogglesEquipped);
	}

	private Actor lastOpponent = null;
	private Instant lastTime = Instant.now();

	@Subscribe
	public void onInteractingChanged(InteractingChanged event) {
		if (event.getSource() != client.getLocalPlayer()) {
			return;
		}

		Actor opponent = event.getTarget();

		if (opponent == null) {
			lastTime = Instant.now();
			return;
		}

		if (opponent == null) {
			lastOpponent = null;
			return;
		}
		if (opponent instanceof NPC) {
			NPC npc = (NPC) opponent;
			int combatLevel = npc.getCombatLevel();
			if (combatLevel >= 1) {
				lastOpponent = opponent;
			}
		}
	}

	public double getOpponentHealth() {
		int healthRatio = lastOpponent.getHealthRatio();
		int healthScale = lastOpponent.getHealthScale();
		return (healthRatio / (double) healthScale) * 100;
	}

	@Subscribe
	public void onGameTick(GameTick gameTick) {
		if (lastTime != null && Duration.between(lastTime, Instant.now()).getSeconds() >= config.overlayDuration()) {
			lastOpponent = null;
			lastTime = null;
		}
		if (overlayVisible != -1) {
			checkOverlay();
		}

		Item gloves = client.getItemContainer(InventoryID.EQUIPMENT).getItem(EquipmentInventorySlot.GLOVES.getSlotIdx());
		boolean shouldAddOverlay =
				(gloves == null && checkInventory() && lastOpponent != null) ||
						(lastOpponent != null && getOpponentHealth() < (double) config.healthThreshold() && !checkBracelet() && (checkAmulet() || checkHelmet()) && checkInventory());

		if (shouldAddOverlay) {
			if (overlayVisible == -1) {
				addOverlay();
			}
		} else {
			if (overlayVisible != -1) {
				removeOverlay();
			}
		}
	}

	@Subscribe
	public void onNpcDespawned(NpcDespawned event) {
		if (lastOpponent != null && event.getActor().equals(lastOpponent)) {
			lastOpponent = null;
		}
	}

	@Override
	protected void startUp() throws Exception {
		overlayVisible = -1;
	}

	@Override
	protected void shutDown() throws Exception {
		if (overlayManager != null)
			overlayManager.remove(braceletOverlay);


	}

	private void addOverlay() {
		if (overlayManager != null) {
			overlayManager.add(braceletOverlay);
			overlayVisible = client.getTickCount();
		}
	}

	private void removeOverlay() {

		overlayManager.remove(braceletOverlay);
		overlayVisible = -1;
	}

	private void checkOverlay() {
		if (checkBracelet() && lastOpponent == null) {
			removeOverlay();
		}
	}
}
// BSD 2-Clause License
//
//Copyright (c) 2021, PortAGuy
//All rights reserved.
//
//Redistribution and use in source and binary forms, with or without
//modification, are permitted provided that the following conditions are met:
//
//1. Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
//2. Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
//FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
//SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
//CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
//OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
package com.braceletreminder;

import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;

public class BraceletReminderOverlay extends OverlayPanel {
    private final BraceletReminderConfig config;
    private final Client client;
    private final BraceletReminderPlugin plugin;
    private final String LONG_TEXT = "You're not wearing a bracelet";
    private final String SHORT_TEXT = "Bracelet";

    @Inject
    private BraceletReminderOverlay(BraceletReminderConfig config, BraceletReminderPlugin plugin, Client client) {
        this.config = config;
        this.plugin = plugin;
        this.client = client;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (panelComponent == null) {
            return null;
        }
        panelComponent.getChildren().clear();
        switch (config.reminderStyle()) {
            case LONG_TEXT:
                panelComponent.getChildren().add((LineComponent.builder())
                        .left(LONG_TEXT)
                        .build());

                panelComponent.setPreferredSize(new Dimension(graphics.getFontMetrics().stringWidth(LONG_TEXT) - 20, 0));
                break;
            case SHORT_TEXT:
                panelComponent.getChildren().add((LineComponent.builder())
                        .left(SHORT_TEXT)
                        .build());
                panelComponent.setPreferredSize(new Dimension(graphics.getFontMetrics().stringWidth(SHORT_TEXT) + 10, 0));
                break;

        }
        if (config.shouldFlash()) {
            if (client.getGameCycle() % 40 >= 20) {
                panelComponent.setBackgroundColor(config.flashColor1());
            } else {
                panelComponent.setBackgroundColor(config.flashColor2());
            }
        } else {
            panelComponent.setBackgroundColor(config.flashColor1());
        }

        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
        return panelComponent.render(graphics);
    }
}
package com.braceletreminder;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class BraceletReminder
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(BraceletReminderPlugin.class);
		RuneLite.main(args);
	}
}
