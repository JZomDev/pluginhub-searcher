package com.dataexport;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DataExportPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(DataExportPlugin.class);
		RuneLite.main(args);
	}
}
package com.dataexport;

import com.dataexport.localstorage.DataWriter;
import com.dataexport.ui.DataExportPluginPanel;
import com.dataexport.ui.Tab;
import com.google.common.collect.ImmutableSet;
import com.google.inject.Provides;
import java.awt.image.BufferedImage;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;
import javax.inject.Inject;
import javax.swing.SwingUtilities;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemComposition;
import net.runelite.api.ItemContainer;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.SkillIconManager;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

@Slf4j
@PluginDescriptor(
	name = "Data Export"
)
public class DataExportPlugin extends Plugin
{
	private static final Set<Integer> CONTAINERS = ImmutableSet.of(InventoryID.BANK.getId(), InventoryID.SEED_VAULT.getId(), InventoryID.INVENTORY.getId(), InventoryID.EQUIPMENT.getId());

	public DataWriter dataWriter;

	public DataExport dataExport;

	public Map<Tab, Boolean> visibilityMap = new LinkedHashMap<>();

	int hashAllItems = -1;

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	private ItemManager itemManager;

	@Inject
	private SkillIconManager skillIconManager;

	@Inject
	private DataExportConfig config;

	@Inject
	private KeyManager keyManager;

	private DataExportPluginPanel panel;

	private NavigationButton navButton;

	private int hashBank = -1;

	private int hashSeedVault = -1;

	private int hashInventory = -1;

	private int hashEquipment = -1;

	//private static final Logger logger = LoggerFactory.getLogger(DataExportPlugin.class);

	private int hashSkills = -1;

	private int lastTick = -1;

	@Provides
	DataExportConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(DataExportConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		log.debug("Data Export started!");
		dataExport = new DataExport(client, config, itemManager, this);
		dataWriter = new DataWriter(config);

		Arrays.asList(Tab.CONTAINER_TABS).forEach(t ->
		{
			visibilityMap.put(t, true);
		});

		this.panel = new DataExportPluginPanel(itemManager, this, config, dataExport);

		final BufferedImage icon = ImageUtil.getResourceStreamFromClass(getClass(), "/data_export_icon.png");

		navButton = NavigationButton.builder()
			.tooltip("Data Exporter")
			.icon(icon)
			.priority(6)
			.panel(panel)
			.build();

		clientToolbar.addNavigation(navButton);

		clientThread.invokeLater(() ->
		{
			switch (client.getGameState())
			{
				case STARTING:
				case UNKNOWN:
					return false;
			}

			SwingUtilities.invokeLater(() ->
			{
				panel.rebuild();
			});

			return true;
		});
	}

	@Override
	protected void shutDown() throws Exception
	{
		log.debug("Data Export stopped!");

		clientToolbar.removeNavigation(navButton);

	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (!event.getGroup().equals("dataexport"))
		{
			return;
		}

		Map<Integer, DataExportItem> mapBlank = new HashMap<>();
		if (!config.includeBank())
		{
			dataExport.setMapBank(mapBlank);
			visibilityMap.put(Tab.BANK, false);
		}
		else
		{
			visibilityMap.put(Tab.BANK, true);
		}

		if (!config.includeSeedVault())
		{
			dataExport.setMapSeedVault(mapBlank);
			visibilityMap.put(Tab.SEED_VAULT, false);
		}
		else
		{
			visibilityMap.put(Tab.SEED_VAULT, true);
		}

		if (!config.includeInventory())
		{
			dataExport.setMapInventory(mapBlank);
			visibilityMap.put(Tab.INVENTORY, false);
		}
		else
		{
			visibilityMap.put(Tab.INVENTORY, true);
		}

		if (!config.includeEquipment())
		{
			dataExport.setMapEquipment(mapBlank);
			visibilityMap.put(Tab.EQUIPMENT, false);
		}
		else
		{
			visibilityMap.put(Tab.EQUIPMENT, true);
		}

		visibilityMap.forEach((t, v) ->
		{
			panel.setVisibility(t, v);
		});

		panel.updateVisibility();
		panel.rebuild();
	}

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event)
	{
		int tick = client.getTickCount();
		if (tick == lastTick)
		{
			return;
		}
		lastTick = tick;

		ItemContainer itemContainer = event.getItemContainer();
		int itemContainerId = event.getContainerId();

		if (itemContainer == null)
		{
			return;
		}

		if (!CONTAINERS.contains(itemContainerId))
		{
			return;
		}

		final Item[] widgetItems = itemContainer.getItems();
		if (widgetItems == null || widgetItems.length == 0)
		{
			return;
		}

		int hash = hashItems(widgetItems);
		//log.info("New hash: " + hash);

		Map<Integer, DataExportItem> mapContainer = new LinkedHashMap<>();

		for (Item widgetItem : widgetItems)
		{
			ItemComposition itemComposition = itemManager.getItemComposition(widgetItem.getId());

			String name = itemComposition.getName();
			int quantity = widgetItem.getQuantity();
			int id = widgetItem.getId();

			if (itemComposition.getPlaceholderTemplateId() != -1)
			{
				quantity = 0;
			}

			if (name != null && quantity > 0 && id != -1)
			{
				DataExportItem item = new DataExportItem(name, quantity, id);
				mapContainer.putIfAbsent(id, item);
				dataExport.addItemAll(id, item);
			}
		}

		if (mapContainer.size() < 2)
		{
			return;
		}

		if (itemContainerId == InventoryID.BANK.getId() && config.includeBank() && hash != hashBank)
		{
			log.debug("Bank hash: " + hashBank + "   ->   " + hash);
			hashBank = hash;
			updateBankData(mapContainer);
		}
		else if (itemContainerId == InventoryID.SEED_VAULT.getId() && config.includeSeedVault() && hash != hashSeedVault)
		{
			log.debug("Seed vault hash: " + hashSeedVault + "   ->   " + hash);
			hashSeedVault = hash;
			updateSeedVaultData(mapContainer);
		}
		else if (itemContainerId == InventoryID.INVENTORY.getId() && config.includeInventory() && hash != hashInventory)
		{
			log.debug("Inventory hash: " + hashInventory + "   ->   " + hash);
			hashInventory = hash;
			updateInventoryData(mapContainer);
		}
		else if (itemContainerId == InventoryID.EQUIPMENT.getId() && config.includeEquipment() && hash != hashEquipment)
		{
			log.debug("Equipment hash: " + hashEquipment + "   ->   " + hash);
			hashEquipment = hash;
			updateEquipmentData(mapContainer);
		}
	}

	private void updateBankData(Map<Integer, DataExportItem> map)
	{
		dataExport.setMapBank(map);
		dataWriter.writeJSON("container_bank", map);
		log.debug("Bank Container Map: {}", map);

		if (map.size() > 1)
		{
			panel.updateTab("Bank", "Ready");
		}
		else
		{
			panel.updateTab("Bank", "Visit a bank!");
		}
	}

	private void updateSeedVaultData(Map<Integer, DataExportItem> map)
	{
		dataExport.setMapSeedVault(map);
		dataWriter.writeJSON("container_seed_vault", map);
		log.debug("Seed Vault Container Map: {}", map);

		if (map.size() > 1)
		{
			panel.updateTab("Seed Vault", "Ready");
		}
		else
		{
			panel.updateTab("Seed Vault", "Inventory empty");
		}
	}

	private void updateInventoryData(Map<Integer, DataExportItem> map)
	{
		dataExport.setMapInventory(map);
		dataWriter.writeJSON("container_inventory", map);
		log.debug("Inventory Container Map: {}", map);

		if (map.size() > 1)
		{
			panel.updateTab("Inventory", "Ready");
		}
		else
		{
			panel.updateTab("Inventory", "No items equipped");
		}
	}

	private void updateEquipmentData(Map<Integer, DataExportItem> map)
	{
		dataExport.setMapEquipment(map);
		dataWriter.writeJSON("container_equipment", map);
		log.debug("Equipment Container Map: {}", map);

		if (map.size() > 1)
		{
			panel.updateTab("Equipment", "Ready");
		}
		else
		{
			panel.updateTab("Equipment", "No items equipped");
		}
	}

	public void exportContainer(String container)
	{
		if (container.equals("container_all_items"))
		{
			dataExport.exportContainer(container);
		}
		else if (container.equals("container_bank"))
		{
			dataExport.exportContainer(container);
		}
		else if (container.equals("container_seed_vault"))
		{
			dataExport.exportContainer(container);
		}
		else if (container.equals("container_inventory"))
		{
			dataExport.exportContainer(container);
		}
		else if (container.equals("container_equipment"))
		{
			dataExport.exportContainer(container);
		}
	}

	public void downloadContainer(String container)
	{
		if (container.equals("container_all_items"))
		{
			dataWriter.writeFile(container, dataExport.getMapItems());
		}
		else if (container.equals("container_bank"))
		{
			dataWriter.writeFile(container, dataExport.getMapBank());
		}
		else if (container.equals("container_seed_vault"))
		{
			dataWriter.writeFile(container, dataExport.getMapSeedVault());
		}
		else if (container.equals("container_inventory"))
		{
			dataWriter.writeFile(container, dataExport.getMapInventory());
		}
		else if (container.equals("container_equipment"))
		{
			dataWriter.writeFile(container, dataExport.getMapEquipment());
		}
	}

	private int hashItems(final Item[] items)
	{
		final Map<Integer, Integer> mapCheck = new HashMap<>(items.length);
		for (Item item : items)
		{
			mapCheck.put(item.getId(), item.getQuantity());
		}

		return mapCheck.hashCode();
	}
}

package com.dataexport;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("dataexport")
public interface DataExportConfig extends Config
{
	@ConfigItem(
		keyName = "includeBank",
		name = "Include bank",
		description = "Include bank in data export",
		position = 1
	)
	default boolean includeBank()
	{
		return false;
	}

	@ConfigItem(
		keyName = "includeSeedVault",
		name = "Include seed vault",
		description = "Include seed vault in data export",
		position = 2
	)
	default boolean includeSeedVault()
	{
		return false;
	}

	@ConfigItem(
		keyName = "includeInventory",
		name = "Include inventory",
		description = "Include inventory in data export",
		position = 3
	)
	default boolean includeInventory()
	{
		return false;
	}

	@ConfigItem(
		keyName = "includeEquipment",
		name = "Include equipment",
		description = "Include equipment in data export",
		position = 4
	)
	default boolean includeEquipment()
	{
		return false;
	}

	@ConfigItem(
		keyName = "displayExport",
		name = "Include export button",
		description = "Include export button for each container in panel",
		position = 5
	)
	default boolean displayExport()
	{
		return false;
	}

	@ConfigItem(
		keyName = "displayDownload",
		name = "Include download button",
		description = "Include download button for each container in panel",
		position = 6
	)
	default boolean displayDownload()
	{
		return false;
	}

	@ConfigItem(
		keyName = "downloadJSON",
		name = "Download as JSON",
		description = "Downloading will result in a JSON for a particular container",
		position = 7
	)
	default boolean downloadJSON()
	{
		return false;
	}

	@ConfigItem(
		keyName = "downloadCSV",
		name = "Download as CSV",
		description = "Downloading will result in a CSV for a particular container",
		position = 8
	)
	default boolean downloadCSV()
	{
		return false;
	}

}

package com.dataexport;

import lombok.Getter;

public class DataExportItem
{
	@Getter
	private final int id;

	@Getter
	private final int quantity;

	@Getter
	private final String name;

	DataExportItem(String name, int quantity, int id)
	{
		this.id = id;
		this.quantity = quantity;
		this.name = name;
	}

	@Override
	public String toString()
	{
		return name + " x " + quantity;
	}

	public String getCSV()
	{
		return id + "," + quantity + "," + name;
	}
}

package com.dataexport;

import com.dataexport.ui.DataExportPluginPanel;
import com.google.gson.Gson;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.game.ItemManager;

@Slf4j
public class DataExport
{
	private final Client client;

	private final DataExportConfig config;

	private final ItemManager itemManager;

	int hashAllItems;

	@Getter
	@Setter
	private Map<Integer, DataExportItem> mapBank;

	@Getter
	@Setter
	private Map<Integer, DataExportItem> mapSeedVault;

	@Getter
	@Setter
	private Map<Integer, DataExportItem> mapInventory;

	@Getter
	@Setter
	private Map<Integer, DataExportItem> mapEquipment;

	@Getter
	@Setter
	private Map<Integer, DataExportItem> mapSkills;

	@Getter
	@Setter
	private Map<Integer, DataExportItem> mapItems;

	@Getter
	@Setter
	private ArrayList<Integer> arrayListItems;

	private DataExportPluginPanel panel;

	private DataExportPlugin plugin;

	public DataExport(Client client, DataExportConfig config, ItemManager itemManager, DataExportPlugin plugin)
	{
		this.client = client;
		this.config = config;
		this.itemManager = itemManager;
		this.plugin = plugin;

		hashAllItems = -1;

		mapBank = new LinkedHashMap<>();
		mapSeedVault = new LinkedHashMap<>();
		mapInventory = new LinkedHashMap<>();
		mapEquipment = new LinkedHashMap<>();
		mapItems = new LinkedHashMap<>();
		arrayListItems = new ArrayList<>();
	}

	public void exportContainer(String container)
	{
		Map<Integer, DataExportItem> map;

		if (container.equals("container_all_items"))
		{
			map = mapItems;
		}
		else if (container.equals("container_bank"))
		{
			map = mapBank;
		}
		else if (container.equals("container_seed_vault"))
		{
			map = mapSeedVault;
		}
		else if (container.equals("container_inventory"))
		{
			map = mapInventory;
		}
		else if (container.equals("container_equipment"))
		{
			map = mapEquipment;
		}
		else if (container.equals("container_all_items"))
		{
			map = mapItems;
		}
		else
		{
			map = new LinkedHashMap<>();
		}

		if (map == null)
		{
			return;
		}

		SwingUtilities.invokeLater(() ->
		{
			final Gson gson = new Gson();
			final String json = gson.toJson(map.values());
			final StringSelection contents = new StringSelection(json);
			Toolkit.getDefaultToolkit().getSystemClipboard().setContents(contents, null);
			JOptionPane.showMessageDialog(panel,
				"Container data was copied to clipboard.",
				"Export Setup Succeeded",
				JOptionPane.PLAIN_MESSAGE);
		});
	}

	public void rebuildSkillArrayList()
	{

	}

	private int getTotalQuantityForItem(int id)
	{
		int total = 0;

		if (mapBank.containsKey(id) && mapBank.size() > 1)
		{
			total += mapBank.get(id).getQuantity();
		}
		if (mapSeedVault.containsKey(id) && mapSeedVault.size() > 1)
		{
			total += mapSeedVault.get(id).getQuantity();
		}
		if (mapInventory.containsKey(id) && mapInventory.size() > 1)
		{
			total += mapInventory.get(id).getQuantity();
		}
		if (mapEquipment.containsKey(id) && mapEquipment.size() > 1)
		{
			total += mapEquipment.get(id).getQuantity();
		}

		return total;
	}

	public void addItemAll(int id, DataExportItem item)
	{
		DataExportItem item2 = mapItems.get(id);

		if (item2 != null)
		{
			return;
		}

		log.info("Adding to list: " + item.getName());
		mapItems.put(id, item);
	}
}

package com.dataexport;

import lombok.Getter;

public class DataExportSkill
{
	@Getter
	private final String name;

	@Getter
	private final int level;

	@Getter
	private final int experience;

	DataExportSkill(String name, int level, int experience)
	{
		this.name = name;
		this.level = level;
		this.experience = experience;
	}
}
package com.dataexport.ui;

import com.dataexport.DataExport;
import com.dataexport.DataExportConfig;
import com.dataexport.DataExportPlugin;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.Constants;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;

public class DataExportTabPanel extends JPanel
{
	private static final Color COLOR = ColorScheme.DARK_GRAY_COLOR;

	private static final Color HOVER_COLOR = ColorScheme.DARKER_GRAY_HOVER_COLOR;

	private final ItemManager itemManager;

	private final DataExportPlugin plugin;

	private final DataExportPluginPanel panel;

	private final DataExportConfig config;

	private final DataExport dataExport;

	@Getter
	public String title;

	@Getter
	@Setter
	public String status;

	@Getter
	@Setter
	public boolean visibility = true;

	JLabel readyLabel;

	JButton buttonExport;

	JButton buttonDownload;

	DataExportTabPanel(DataExportPlugin plugin, DataExportPluginPanel panel, DataExportConfig config, DataExport dataExport, ItemManager itemManager, Tab tab, String title, String container, String status)
	{
		this.plugin = plugin;
		this.panel = panel;
		this.config = config;
		this.dataExport = dataExport;
		this.itemManager = itemManager;
		this.title = title;
		this.status = status;

		setBackground(ColorScheme.DARKER_GRAY_COLOR);
		setLayout(new BorderLayout());
		setBorder(new EmptyBorder(5, 10, 5, 10));

		JPanel panelWrapper = new JPanel(new BorderLayout());
		panelWrapper.setLayout(new GridLayout(1, 2));
		panelWrapper.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		panelWrapper.setBorder(new EmptyBorder(5, 10, 5, 10));
		panelWrapper.setVisible(true);

		JPanel leftContainer = new JPanel();
		leftContainer.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		leftContainer.setLayout(new BorderLayout());
		//leftContainer.setBorder(new EmptyBorder(5, 7, 5, 7));

		JLabel titleLabel = new JLabel(title);
		titleLabel.setForeground(Color.WHITE);

		JLabel iconLabel = new JLabel();
		iconLabel.setMinimumSize(new Dimension(Constants.ITEM_SPRITE_WIDTH, Constants.ITEM_SPRITE_HEIGHT));
		itemManager.getImage(tab.getItemID()).addTo(iconLabel);

		leftContainer.add(titleLabel, BorderLayout.NORTH);
		leftContainer.add(iconLabel, BorderLayout.SOUTH);

		JPanel rightContainer = new JPanel();
		rightContainer.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		rightContainer.setLayout(new GridLayout(2, 1));
		//rightContainer.setBorder(new EmptyBorder(5, 10, 5, 10));

		readyLabel = new JLabel(status);
		readyLabel.setForeground(Color.RED);
		readyLabel.setFont(FontManager.getRunescapeSmallFont());

		JPanel buttonContainer = new JPanel();
		buttonContainer.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		buttonContainer.setLayout(new GridLayout(1, 2));
		buttonContainer.setBorder(new EmptyBorder(5, 10, 5, 10));

		buttonExport = new JButton();
		buttonExport.setText("Export");
		buttonExport.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		buttonExport.setBorder(new EmptyBorder(3, 7, 3, 7));

		buttonExport.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(MouseEvent e)
			{
				buttonExport.setBackground(ColorScheme.BRAND_ORANGE);
				plugin.exportContainer(container);
			}

			@Override
			public void mouseReleased(MouseEvent e)
			{
				buttonExport.setBackground(ColorScheme.DARKER_GRAY_COLOR);
			}

			@Override
			public void mouseEntered(MouseEvent e)
			{
				buttonExport.setBackground(HOVER_COLOR);
				setCursor(new Cursor(Cursor.HAND_CURSOR));
			}

			@Override
			public void mouseExited(MouseEvent e)
			{
				buttonExport.setBackground(COLOR);
				setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
			}
		});

		buttonDownload = new JButton();
		buttonDownload.setText("Download");
		buttonDownload.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		buttonDownload.setBorder(new EmptyBorder(3, 7, 3, 7));

		buttonDownload.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(MouseEvent e)
			{
				buttonDownload.setBackground(ColorScheme.BRAND_ORANGE);
				plugin.downloadContainer(container);
			}

			@Override
			public void mouseReleased(MouseEvent e)
			{
				buttonDownload.setBackground(ColorScheme.DARKER_GRAY_COLOR);
			}

			@Override
			public void mouseEntered(MouseEvent e)
			{
				buttonDownload.setBackground(HOVER_COLOR);
				setCursor(new Cursor(Cursor.HAND_CURSOR));
			}

			@Override
			public void mouseExited(MouseEvent e)
			{
				buttonDownload.setBackground(COLOR);
				setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
			}
		});

		buttonContainer.add(buttonExport);
		buttonContainer.add(buttonDownload);

		rightContainer.add(readyLabel);
		rightContainer.add(buttonContainer);

		panelWrapper.add(leftContainer, BorderLayout.WEST);
		panelWrapper.add(rightContainer, BorderLayout.CENTER);

		add(panelWrapper);

		updateVisibility();
	}

	private void updateVisibility()
	{
		if (!config.displayExport())
		{
			buttonExport.setVisible(false);
		}

		if (!config.displayDownload())
		{
			buttonDownload.setVisible(false);
		}
	}

	public void updateStatus(String status)
	{
		readyLabel.setText(status);

		if (status.equals("Visit a bank!"))
		{
			readyLabel.setForeground(Color.RED);
		}
		else
		{
			readyLabel.setForeground(Color.GREEN);
		}
	}

	@Override
	public String toString()
	{
		return title + ", " + isVisible();
	}
}

package com.dataexport.ui;

import com.dataexport.DataExport;
import com.dataexport.DataExportConfig;
import com.dataexport.DataExportPlugin;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.swing.BoxLayout;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;

@Slf4j
public class DataExportPluginPanel extends PluginPanel
{
	final JPanel wrapperPanel = new JPanel();

	private final ItemManager itemManager;

	private final DataExportPlugin plugin;

	private final DataExportConfig config;

	private final DataExport dataExport;

	private JPanel containerContainer = new JPanel();

	private Map<Tab, DataExportTabPanel> containers = new LinkedHashMap<>();

	public DataExportPluginPanel(ItemManager itemManager, DataExportPlugin plugin, DataExportConfig config, DataExport dataExport)
	{
		super(true);

		this.itemManager = itemManager;
		this.plugin = plugin;
		this.config = config;
		this.dataExport = dataExport;

		setBackground(ColorScheme.DARK_GRAY_COLOR);
		setLayout(new BorderLayout());
		setBorder(new EmptyBorder(7, 7, 7, 7));

		wrapperPanel.setLayout(new BoxLayout(wrapperPanel, BoxLayout.Y_AXIS));
		wrapperPanel.setBackground(ColorScheme.DARK_GRAY_COLOR);

		containerContainer.setLayout(new GridLayout(0, 1, 0, 8));
		containerContainer.setBackground(ColorScheme.DARK_GRAY_COLOR);
		containerContainer.setVisible(true);

		Arrays.asList(Tab.CONTAINER_TABS).forEach(t ->
		{
			DataExportTabPanel p = new DataExportTabPanel(plugin, this, config, dataExport, itemManager, t, t.getName(), t.getFilePrefix(), "Not ready");
			containers.put(t, p);
		});

		containers.forEach((tab, panel) ->
			containerContainer.add(panel));

		wrapperPanel.add(containerContainer);

		this.add(wrapperPanel);

		updateVisibility();
		rebuild();
	}

	public void updateVisibility()
	{
		containerContainer.removeAll();

		log.debug("Containers: {}", containers.values());

		containers.forEach((t, p) ->
		{
			if (p.isVisibility())
			{
				containerContainer.add(p);
			}
		});

		rebuild();
	}

	public void setVisibility(Tab tab, boolean visibility)
	{
		log.debug("Containers: {}", containers.values());

		Map<Tab, DataExportTabPanel> containersTemp = new LinkedHashMap<>();

		containers.forEach((t, p) ->
		{
			if (p.isVisibility() && t.getName().compareTo(p.getTitle()) != 0)
			{
				setVisibility(Tab.ALL_ITEMS, true);
			}
			if (tab.getName().equals(t.getName()))
			{
				DataExportTabPanel panel = containers.get(tab);
				panel.setVisibility(visibility);
				containersTemp.put(t, panel);
			}

			containersTemp.put(t, p);
		});

		containers = containersTemp;
	}

	public void updateTab(String container, String newStatus)
	{
		containers.forEach((tab, panel) ->
		{
			if (panel.getTitle().equals(container))
			{
				panel.updateStatus(newStatus);
			}
			containers.put(tab, panel);
		});

		containers.forEach((tab, panel) ->
			containerContainer.add(panel));

		rebuild();
	}

	public void rebuild()
	{
		revalidate();
		repaint();
	}
}

/*
 * Copyright (c) 2018 Abex
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 *  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.dataexport.ui;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.ItemID;

@RequiredArgsConstructor
@Getter
public enum Tab
{
	ALL_ITEMS("All Items", ItemID.TWISTED_BOW, "container_all_items"),
	BANK("Bank", ItemID.BANK_KEY, "container_bank"),
	SEED_VAULT("Seed Vault", ItemID.SEED_PACK, "container_seed_vault"),
	INVENTORY("Inventory", ItemID.EXPLORER_BACKPACK, "container_inventory"),
	EQUIPMENT("Equipment", ItemID.ROGUES_EQUIPMENT_CRATE, "container_equipment");

	public static final Tab[] CONTAINER_TABS = {ALL_ITEMS, BANK, SEED_VAULT, INVENTORY, EQUIPMENT};

	private final String name;

	private final int itemID;

	private final String filePrefix;

	@Override
	public String toString()
	{
		return name;
	}
}

package com.dataexport.ui;

public enum DataExportState
{
	CHANGED,
	NOT_CHANGED
}

package com.dataexport.localstorage;

import com.dataexport.DataExportConfig;
import com.dataexport.DataExportItem;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import static net.runelite.client.RuneLite.RUNELITE_DIR;
import net.runelite.http.api.RuneLiteAPI;

@Slf4j
public class DataWriter
{
	private static final String FILE_EXTENSION_JSON = ".json";

	private static final String FILE_EXTENSION_CSV = ".csv";

	private static final File LOOT_RECORD_DIR = new File(RUNELITE_DIR, "Data Exports");

	private File playerFolder = LOOT_RECORD_DIR;

	private String name;

	private DataExportConfig config;

	public DataWriter(DataExportConfig config)
	{
		this.config = config;
		LOOT_RECORD_DIR.mkdir();
	}

	private static String fileNameJSON(final String dataContainerName)
	{
		return dataContainerName.toLowerCase().trim() + FILE_EXTENSION_JSON;
	}

	private static String fileNameCSV(final String dataContainerName)
	{
		return dataContainerName.toLowerCase().trim() + FILE_EXTENSION_CSV;
	}

	public void setPlayerUsername(final String username)
	{
		if (username.equalsIgnoreCase(name))
		{
			return;
		}

		playerFolder = new File(LOOT_RECORD_DIR, username);
		playerFolder.mkdir();
		name = username;
	}

	public void writeFile(String dataContainer, Map<Integer, DataExportItem> items)
	{
		if (config.downloadJSON())
		{
			writeJSON(dataContainer, items);
		}
		if (config.downloadCSV())
		{
			writeCSV(dataContainer, items);
		}
	}

	public synchronized boolean writeJSON(String dataContainer, Map<Integer, DataExportItem> items)
	{
		final String fileName = fileNameJSON(dataContainer);
		final File lootFile = new File(playerFolder, fileName);

		try
		{
			final BufferedWriter file = new BufferedWriter(new FileWriter(String.valueOf(lootFile), false));
			for (Map.Entry<Integer, DataExportItem> item : items.entrySet())
			{
				// Convert entry to JSON
				final String dataAsString = RuneLiteAPI.GSON.toJson(item.getValue());
				file.append(dataAsString);
				file.newLine();
			}
			file.close();

			return true;
		}
		catch (IOException ioe)
		{
			log.warn("Error rewriting data to file {}: {}", fileName, ioe.getMessage());
			return false;
		}
	}

	public synchronized boolean writeCSV(String dataContainer, Map<Integer, DataExportItem> items)
	{
		final String fileName = fileNameCSV(dataContainer);
		final File lootFile = new File(playerFolder, fileName);

		try
		{
			final BufferedWriter file = new BufferedWriter(new FileWriter(String.valueOf(lootFile), false));
			for (Map.Entry<Integer, DataExportItem> item : items.entrySet())
			{
				// Convert entry to CSV
				final String line = item.getValue().getCSV();
				file.append(line);
				file.newLine();
			}
			file.close();

			return true;
		}
		catch (IOException ioe)
		{
			log.warn("Error rewriting data to file {}: {}", fileName, ioe.getMessage());
			return false;
		}
	}
}

