package com.lootingbag;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class LootingBagPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(LootingBagPlugin.class);
		RuneLite.main(args);
	}
}
package com.lootingbag;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NonNull;
import lombok.Setter;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.ItemDespawned;

@AllArgsConstructor
public class PickupAction
{
	@Getter
	private int itemId;

	@NonNull
	@Getter
	private WorldPoint worldPoint;

	@Getter
	private int ticksSincePickup;

	@Getter
	@Setter
	private int quantity;

	public PickupAction(int itemId, @NonNull WorldPoint worldPoint) {
		this.itemId = itemId;
		this.worldPoint = worldPoint;
	}

	public void incrementTicksSincePickup() {
		ticksSincePickup++;
	}

	public boolean matchesItemDespawnEvent(ItemDespawned event) {
		return event.getTile().getWorldLocation().equals(worldPoint)
			&& event.getItem().getId() == itemId;
	}
}

package com.lootingbag;

import com.google.inject.Inject;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import net.runelite.api.ItemID;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.WidgetItemOverlay;
import net.runelite.client.ui.overlay.components.TextComponent;

public class LootingBagOverlay extends WidgetItemOverlay
{
	private final LootingBagPlugin plugin;
	private final LootingBagConfig config;

	@Inject
	LootingBagOverlay(LootingBagPlugin plugin, LootingBagConfig config)
	{
		this.plugin = plugin;
		this.config = config;
		showOnInventory();
	}

	@Override
	public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem widgetItem)
	{
		if (itemId != ItemID.LOOTING_BAG && itemId != ItemID.LOOTING_BAG_22586) {
			return;
		}
		graphics.setFont(FontManager.getRunescapeSmallFont());
		if (config.bagValue()) {
			renderText(graphics, widgetItem.getCanvasBounds(), 0, getValueText());
		}
		if (config.freeSlots()) {
			renderText(graphics, widgetItem.getCanvasBounds(), -12, getFreeSlotsText());
		}
	}

	private void renderText(Graphics2D graphics, Rectangle bounds, int yOff, String text)
	{
		final TextComponent textComponent = new TextComponent();
		textComponent.setPosition(new Point(bounds.x - 1, bounds.y + bounds.height - 1 + yOff));
		textComponent.setColor(config.textColor());
		textComponent.setText(text);
		textComponent.render(graphics);
	}

	private String getFreeSlotsText()
	{
		LootingBag lootingBag = plugin.getLootingBag();
		if (!lootingBag.isSynced())
		{
			return "Check";
		}

		return Integer.toString(lootingBag.getFreeSlots());
	}

	private String getValueText()
	{
		LootingBag lootingBag = plugin.getLootingBag();
		if (!lootingBag.isSynced())
		{
			return "Check";
		}

		long lootingBagValue = lootingBag.getValueOfItems();
		String text = lootingBag.isQuantityOfItemsAccurate() ? "" : ">";
		if (lootingBagValue >= 10_000_000)
		{
			return text + lootingBagValue / 1_000_000 + "M";
		}
		if (lootingBagValue >= 100_000)
		{
			return text + lootingBagValue / 1000 + "k";
		}
		return text + lootingBagValue;
	}
}

package com.lootingbag;

import static com.lootingbag.LootingBagConfig.CONFIG_GROUP;
import java.awt.Color;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(CONFIG_GROUP)
public interface LootingBagConfig extends Config
{
	String CONFIG_GROUP = "lootingbagvalue";
	String priceKey = "priceType";

	@ConfigItem(
		keyName = "textColor",
		name = "Text color",
		description = "Color of the text overlay on looting bag"
	)
	default Color textColor() {
		return Color.WHITE;
	}

	@ConfigItem(
		keyName = "bagValue",
		name = "Bag Value",
		description = "Display looting bag value"
	)
	default boolean bagValue() {
		return true;
	}

	@ConfigItem(
		keyName = "freeSlots",
		name = "Free slots",
		description = "Display number of free slots in bag"
	)
	default boolean freeSlots() {
		return true;
	}
}

package com.lootingbag;

import com.google.common.collect.ImmutableMap;
import com.google.gson.Gson;
import com.google.inject.Provides;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.OptionalInt;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemComposition;
import net.runelite.api.ItemContainer;
import net.runelite.api.ItemID;
import net.runelite.api.MenuAction;
import net.runelite.api.VarClientInt;
import net.runelite.api.VarClientStr;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.events.ItemDespawned;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.events.VarClientIntChanged;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Looting Bag"
)
public class LootingBagPlugin extends Plugin
{
	public static final int LOOTING_BAG_CONTAINER = 516;

	private static final int LOOTING_BAG_SUPPLIES_SETTING_VARBIT_ID = 15310;

	private static final Map<String, Integer> AmountTextToInt = ImmutableMap.of(
		"One", 1,
		"Two", 2,
		"Both", 2,
		"Five", 5
	);

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private LootingBagOverlay overlay;

	@Inject
	private Client client;

	@Inject
	private ItemManager itemManager;

	@Getter
	private LootingBag lootingBag;

	@Inject
	private Gson gson;

	private PickupAction lastPickUpAction;

	private int lastItemIdUsedOnLootingBag;

	/**
	 * Used to keep track of whether the deposit X input is open.
	 */
	private boolean depositingX;

	/**
	 * The last amount entered into the deposit X interface
	 */
	private int lastDepositedXAmount;

	private int lastInputTypeValue;

	private Item[] lastInventoryItems;

	private ArrayList<PickupAction> possibleSuppliesPickupActions;

	@Override
	protected void startUp()
	{
		lootingBag = new LootingBag(client, itemManager);
		overlayManager.add(overlay);
		possibleSuppliesPickupActions = new ArrayList<>();
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onGameTick(GameTick gameTick)
	{
		possibleSuppliesPickupActions.removeIf(action -> {
			if (action.getTicksSincePickup() >= 1) {
				// Whatever we picked up went into our looting bag
				log.debug("Item was not supply and got added to looting bag: " + getItemName(action.getItemId()));
				lootingBag.addItem(
					action.getItemId(),
					action.getQuantity());
				return true;
			}

			action.incrementTicksSincePickup();
			return false;
		});
	}

	@Subscribe
	public void onVarClientIntChanged(VarClientIntChanged event) {
		if (event.getIndex() == VarClientInt.INPUT_TYPE) {
			int value = client.getVarcIntValue(VarClientInt.INPUT_TYPE);
			String text = client.getVarcStrValue(VarClientStr.INPUT_TEXT);

			// Number input closed
			if (value == 0) {
				// Make sure we were depositing X
				if (depositingX && !text.equals("")) {
					lastDepositedXAmount = Integer.parseInt(text);
				}

				// If the number input was previously open but is now closed,
				//		We are no longer depositing
				if (lastInputTypeValue == 7) {
					depositingX = false;
				}
			}

			lastInputTypeValue = value;
		}
	}

	@Subscribe
	public void onWidgetLoaded(WidgetLoaded event)
	{
		if (event.getGroupId() == InterfaceID.LOOTING_BAG)
		{
			// We can use the ItemContainer as a source of truth!
			ItemContainer lootingBagContainer = client.getItemContainer(LOOTING_BAG_CONTAINER);
			lootingBag.syncItems(lootingBagContainer);
		}
	}

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event) {
		if (event.getContainerId() == InventoryID.INVENTORY.getId()) {
			handleInventoryUpdated(event.getItemContainer());
		}

		if (event.getContainerId() == LOOTING_BAG_CONTAINER) {
			lootingBag.syncItems(event.getItemContainer());
		}
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event) {
		Widget widget = event.getWidget();

		// Select amount to deposit in looting bag menu
		if (event.getMenuAction() == MenuAction.WIDGET_CONTINUE
				&& widget != null
				&& widget.getParentId() == ComponentID.DIALOG_OPTION_OPTIONS
				&& depositingX) {
			handleAmountToDepositSelection(widget.getText());
		}

		// Use an item on another item
		if (event.getMenuAction() == MenuAction.WIDGET_TARGET_ON_WIDGET
				&& event.getMenuOption().equals("Use")) {
			Widget selectedWidget = client.getSelectedWidget();
			if (selectedWidget == null)
			{
				return;
			}

			log.debug("Using item " + itemManager.getItemComposition(selectedWidget.getItemId()).getName()
				+ " on item " + itemManager.getItemComposition(event.getItemId()).getName());
			handleItemUsedOnItem(selectedWidget.getItemId(), event.getItemId());
			return;
		}

		// Take an item off the ground
		if (event.getMenuAction() == MenuAction.GROUND_ITEM_THIRD_OPTION
				&& event.getMenuOption().equals("Take")) {
			WorldPoint point = WorldPoint.fromScene(client, event.getParam0(), event.getParam1(), client.getPlane());
			lastPickUpAction = new PickupAction(event.getId(), point);
		}
	}

	@Subscribe
	public void onItemDespawned(ItemDespawned event) {
		// Check if player has open looting bag in inventory
		ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
		if (inventory == null || !inventory.contains(ItemID.LOOTING_BAG_22586)) {
			return;
		}

		// Check that this event matches the last pickup action
		if (lastPickUpAction == null || !lastPickUpAction.matchesItemDespawnEvent(event)) {
			return;
		}

		WorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();
		WorldPoint groundItemLocation = event.getTile().getWorldLocation();

		// Check that the item despawned on the same tile the player is on
		if (!playerLocation.equals(groundItemLocation)) {
			return;
		}

		int itemId = event.getItem().getId();
		int quantity = event.getItem().getQuantity();
		ItemComposition itemComposition = itemManager.getItemComposition(itemId);

		// This might be a "supply"
		if (doSuppliesGoIntoInventory() && !itemComposition.isStackable()) {
			log.debug("Possibly picked up a supply: " + itemComposition.getName());
			lastPickUpAction.setQuantity(quantity);
			possibleSuppliesPickupActions.add(lastPickUpAction);
			return;
		}

		// We've picked up an item into our looting bag!
		lastPickUpAction = null;
		boolean isQuantityConfirmed = quantity < 65535;
		lootingBag.addItem(
			event.getItem().getId(),
			quantity,
			isQuantityConfirmed
		);
	}

	private void handleInventoryUpdated(ItemContainer inventory) {

		// We've deposited X
		if (lastDepositedXAmount > 0) {
			int numAddedToInventory = getNumberOfItemsAddedToInventory(
				inventory,
				lastItemIdUsedOnLootingBag
			);

			// The amount of the item we expected got removed from the inventory
			if (numAddedToInventory == -lastDepositedXAmount) {
				lootingBag.addItem(lastItemIdUsedOnLootingBag, lastDepositedXAmount);
				lastDepositedXAmount = 0;
				depositingX = false;
			}
		}



		WorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();
		if (doSuppliesGoIntoInventory()) {
			OptionalInt matchingActionIndex = IntStream.range(0, possibleSuppliesPickupActions.size())
				.filter(index -> {
					PickupAction action = possibleSuppliesPickupActions.get(index);
					if (!action.getWorldPoint().equals(playerLocation)) {
						return true;
					}

					int numAddedToInventory = getNumberOfItemsAddedToInventory(
						inventory,
						action.getItemId()
					);

					if (numAddedToInventory > 0) {
						log.debug(numAddedToInventory + " " + getItemName(action.getItemId()) + " got added to inventory");
					}

					// We picked up a supply, and it didn't go into the looting bag
					if (numAddedToInventory == 1) {
						log.debug("Supply got added to inventory: " + getItemName(action.getItemId()));
						return true;
					}

					return false;
				})
				.findFirst();

			if (matchingActionIndex.isPresent())
			{
				List<PickupAction> subListToRemove = possibleSuppliesPickupActions.subList(0, matchingActionIndex.getAsInt() + 1);
				log.debug("Clearing the following pickup actions: " + gson.toJson(subListToRemove.stream().map(action -> getItemName(action.getItemId())).collect(Collectors.toList())));
				subListToRemove.clear();
			}
		}

		lastInventoryItems = inventory.getItems();
	}

	private int getNumberOfItemsAddedToInventory(ItemContainer inventory, int itemId) {
		int lastCount = Arrays.stream(lastInventoryItems)
			.filter(item -> item.getId() == itemId)
			.mapToInt(Item::getQuantity)
			.sum();
		int newCount = inventory.count(itemId);
		return newCount - lastCount;
	}

	private void handleItemUsedOnItem(int itemId1, int itemId2) {
		if (!isLootingBag(itemId1) && !isLootingBag(itemId2)) {
			return;
		}

		int itemId = isLootingBag(itemId1)
			? itemId2
			: itemId1;

		ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
		if (inventory == null) {
			log.error("Could not get inventory ItemContainer when using item on looting bag.");
			return;
		}

		int count = inventory.count(itemId);
		if (count == 1)
		{
			lootingBag.addItem(itemId, 1);
			return;
		}

		lastItemIdUsedOnLootingBag = itemId;
		lastDepositedXAmount = count;
	}

	private void handleAmountToDepositSelection(String amountText) {
		if (AmountTextToInt.containsKey(amountText)) {
			int amount = AmountTextToInt.get(amountText);
			lootingBag.addItem(lastItemIdUsedOnLootingBag, amount);
			return;
		}

		if (amountText.equals("All"))
		{
			ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
			if (inventory == null) {
				log.error("Could not get inventory ItemContainer when selected put 'All' into looting bag.");
				return;
			}

			int amount = inventory.count(lastItemIdUsedOnLootingBag);
			lootingBag.addItem(lastItemIdUsedOnLootingBag, amount);
			return;
		}

		if (amountText.equals("X")) {
			depositingX = true;
			return;
		}

		log.error("Unknown item amount '{}' selected when depositing to looting bag.", amountText);
	}

	@Provides
	LootingBagConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(LootingBagConfig.class);
	}

	private String getItemName(int itemId) {
		return itemManager.getItemComposition(itemId).getName();
	}

	private boolean doSuppliesGoIntoInventory() {
		return client.getVarbitValue(LOOTING_BAG_SUPPLIES_SETTING_VARBIT_ID) == 1;
	}

	private boolean isLootingBag(int itemId)
	{
		return itemId == ItemID.LOOTING_BAG
			|| itemId == ItemID.LOOTING_BAG_22586;
	}
}

package com.lootingbag;

import java.util.Arrays;
import java.util.HashSet;
import java.util.stream.Collectors;
import static net.runelite.api.ItemID.*;

public class GeUntradables
{

	/**
	 * All ItemIDs for items that are tradeable but cannot be bought/sold on the Grand Exchange
	 * Scraped from <a href="https://oldschool.runescape.wiki/w/Grand_Exchange/Non-tradeable_items"/>
	 */
	private static final int[] ITEM_IDS = new int[]
	{
		COINS_995,

		// Burnt/inedible food
		BURNT_FISH, BURNT_FISH_343, BURNT_FISH_357,
		BURNT_FISH_367, BURNT_FISH_369, BURNT_SWORDFISH,
		BURNT_LOBSTER, BURNT_SHARK,
		BURNT_MANTA_RAY, BURNT_SEA_TURTLE,
		BURNT_CAKE, BURNT_STEW,
		BURNT_CURRY, BURNT_CHICKEN, BURNT_MEAT,
		BURNT_GNOMEBOWL, BURNT_CRUNCHIES, BURNT_BATTA,
		BURNT_PIZZA, BURNT_BREAD, BURNT_PIE, BURNT_OOMLIE_WRAP,
		BURNT_OOMLIE, BURNT_KARAMBWAN, BURNT_SNAIL, BURNT_EEL,
		BURNT_CAVE_EEL, BURNT_SWEETCORN, BURNT_SPIDER, BURNT_POTATO,
		BURNT_EGG, BURNT_ONION, BURNT_MUSHROOM,
		BURNT_RABBIT,
		BURNT_JUBBLY,
		BURNT_MONKFISH, BURNT_SHRIMP, BURNT_BIRD_MEAT, BURNT_BEAST_MEAT,
		BURNT_RAINBOW_FISH,
		BURNT_DARK_CRAB, BURNT_ANGLERFISH,
		BURNT_FISH_20854, BURNT_BAT,
		RUINED_CHOMPY, ROTTEN_TOMATO, ROTTEN_FOOD,
		SPIDER_ON_SHAFT_6303, RUINED_HERB_TEA, UGTHANKI_KEBAB,

		// Item Packs
		WATERFILLED_VIAL_PACK,
		FEATHER_PACK, BAIT_PACK,  AIR_RUNE_PACK,
		WATER_RUNE_PACK, EARTH_RUNE_PACK, FIRE_RUNE_PACK,
		MIND_RUNE_PACK, CHAOS_RUNE_PACK,
		BIRD_SNARE_PACK, BOX_TRAP_PACK, MAGIC_IMP_BOX_PACK,
		PLATINUM_TOKEN, PLANT_POT_PACK, SACK_PACK,
		BASKET_PACK,
		TZHAAR_AIR_RUNE_PACK, TZHAAR_WATER_RUNE_PACK, TZHAAR_EARTH_RUNE_PACK,
		TZHAAR_FIRE_RUNE_PACK,

		// Fire Arrows
		BRONZE_FIRE_ARROW, IRON_FIRE_ARROW,
		STEEL_FIRE_ARROW, MITHRIL_FIRE_ARROW, ADAMANT_FIRE_ARROW,
		RUNE_FIRE_ARROW, DRAGON_FIRE_ARROW, AMETHYST_FIRE_ARROW,

		// Satchels
		PLAIN_SATCHEL, GREEN_SATCHEL,
		RED_SATCHEL, BLACK_SATCHEL, GOLD_SATCHEL, RUNE_SATCHEL,

		// Books
		NEWCOMER_MAP, ASTRONOMY_BOOK, FLYER,
		CRYSTAL_SINGING_FOR_BEGINNERS, CADARN_LINEAGE,
		NEWSPAPER_11171, HALF_CERTIFICATE, HALF_CERTIFICATE_11174,
		GLASSBLOWING_BOOK,

		// Cosmetics
		HOLY_HANDEGG, PEACEFUL_HANDEGG, CHAOTIC_HANDEGG,

		// Quest items
		WEAPON_STORE_KEY, PHOENIX_CROSSBOW, MISCELLANEOUS_KEY,
		SPARE_CONTROLS, DAMP_TINDERBOX,
		RAW_BEEF_4287, RAW_CHICKEN_4289, COOKED_CHICKEN_4291, COOKED_MEAT_4293,
		BUCKET_OF_RUBBLE, BUCKET_OF_RUBBLE_7624, BUCKET_OF_RUBBLE_7626,
		CRATE, AN_EMPTY_BOX,
		MUD, MUDDY_ROCK, BROKEN_POLE,
		PETES_CANDLESTICK,
		WASHING_BOWL,

		// Castle wars
		BANDAGES, TOOLKIT_4051, BARRICADE,
		EXPLOSIVE_POTION, CLIMBING_ROPE, ROCK_4043,

		// Trouble Brewing
		BLUE_FLOWERS_8936, RED_FLOWERS_8938,

		// Misc.
		POTION, EMPTY_OYSTER, BAILING_BUCKET,
		SMASHED_GLASS, TILE, ROCK,
		CAT_TRAINING_MEDAL,
		CRUSHED_GEM,
		RAW_SWAMP_PASTE,
		GROUND_BAT_BONES,
		SULPHUR, STRIP_OF_CLOTH, SAMPLE_BOTTLE,
		TANKARD, IRON_SICKLE,
		HALF_COCONUT, COCONUT_SHELL,
		GUTHIX_BALANCE_UNF_7658, TEA_LEAVES, FIELD_RATION,
		ANCHOVY_PASTE,
		BIRD_NEST_13653,
		DAMP_EGG, FOSSILISED_DUNG, BRUISED_BANANA,
		SMELLY_SOCK, SPOOKY_EGG, OLD_WOOL
	};

	public static HashSet<Integer> ItemIds = new HashSet<>(
		Arrays.stream(ITEM_IDS)
			.boxed()
			.collect(Collectors.toList())
	);
}

package com.lootingbag;

import com.google.common.collect.ImmutableSet;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ItemComposition;
import net.runelite.api.ItemContainer;
import net.runelite.api.Varbits;
import net.runelite.client.game.ItemManager;

@Slf4j
public class LootingBag
{
	private static final int LOOTING_BAG_SIZE = 28;

	private static final Set<Integer> FEROX_REGION = ImmutableSet.of(12600, 12344);

	private final ItemManager itemManager;

	private final Client client;

	private final Map<Integer, Integer> items;

	@Getter
	private boolean isSynced;

	@Getter
	private boolean isQuantityOfItemsAccurate = true;

	@Getter
	private long valueOfItems = 0;

	public LootingBag(Client client, ItemManager itemManager)
	{
		this.client = client;
		this.itemManager = itemManager;
		this.items = new HashMap<>();
		this.isSynced = false;
	}

	public void addItem(
			int itemId,
			int quantity) {
		addItem(itemId, quantity, true);
	}

	public void addItem(
			int itemId,
			int quantity,
			boolean isQuantityConfirmed) {

		// Check that we can deposit any item into looting bag
		// 		E.g. We're in the wilderness
		if (!canDepositItems()) {
			return;
		}

		// Check that the item can go in the looting bag
		//		E.g. It's tradeable
		if (!canItemGoInLootingBag(itemId)) {
			log.debug("Item can not go in looting bag: " + itemManager.getItemComposition(itemId).getName());
			return;
		}

		ItemComposition itemComposition = itemManager.getItemComposition(itemId);

		// Check that we have room in the looting bag
		if (getFreeSlots() == 0
				&& (!itemComposition.isStackable() || !items.containsKey(itemId))) {
			return;
		}

		if (!isQuantityConfirmed) {
			isQuantityOfItemsAccurate = false;
		}

		log.debug("Successfully added item to looting bag: " + itemComposition.getName() + "x" + quantity);
		items.merge(itemId, quantity, Integer::sum);
		calculateValueOfItems();
	}

	public int getFreeSlots()
	{
		return LOOTING_BAG_SIZE -
			items.keySet().stream()
				.mapToInt(itemId ->
					itemManager.getItemComposition(itemId).isStackable()
						? 1
						: items.get(itemId)
				).sum();
	}

	public void syncItems(ItemContainer lootingBagContainer) {
		items.clear();

		// The looting bag container will be null when it is empty
		if (lootingBagContainer == null) {
			isSynced = true;
			calculateValueOfItems();
			return;
		}

		items.putAll(Arrays.stream(lootingBagContainer.getItems())
			.reduce(
				new HashMap<>(),
				(map, item) -> {
					map.merge(item.getId(), item.getQuantity(), Integer::sum);
					return map;
				},
				(map1, map2) -> {
					map1.putAll(map2);
					return map1;
				}));

		calculateValueOfItems();
		isQuantityOfItemsAccurate = true;
		isSynced = true;
	}

	private boolean canItemGoInLootingBag(int itemId) {
		return isItemTradeable(itemId)
			|| isItemTradeable(itemManager.getItemComposition(itemId).getLinkedNoteId());
	}

	private boolean isItemTradeable(int itemId) {
		ItemComposition itemComposition = itemManager.getItemComposition(itemId);

		return itemComposition.isTradeable() // GE tradeable items
			|| itemComposition.getName().matches("Ensouled [a-z]+ head")
			|| GeUntradables.ItemIds.contains(itemId);
	}

	private boolean canDepositItems() {
		// Can't deposit items into looting bag if not in wilderness or Ferox
		return client.getVarbitValue(Varbits.IN_WILDERNESS) != 0
			|| FEROX_REGION.contains(client.getLocalPlayer().getWorldLocation().getRegionID());
	}

	private void calculateValueOfItems() {
		valueOfItems = items.keySet().stream()
			.mapToLong(itemId -> getPriceOfItem(itemId, items.get(itemId)))
			.sum();
	}

	private long getPriceOfItem(int itemId, int quantity) {
		return itemManager.getItemPrice(itemId) * (long) quantity;
	}
}

