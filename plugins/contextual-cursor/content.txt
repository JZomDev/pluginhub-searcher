package io.hydrox.contextualcursor;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ContextualCursorPluginLauncher
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ContextualCursorPlugin.class);
		RuneLite.main(args);
	}
}

/*
 * Copyright (c) 2019-2022 Enriath <ikada@protonmail.ch>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package io.hydrox.contextualcursor;

import lombok.AllArgsConstructor;
import net.runelite.api.SpriteID;
import java.util.HashMap;
import java.util.Map;

@AllArgsConstructor
public enum SpellSprite
{
	// Standard
	WIND_STRIKE(SpriteID.SPELL_WIND_STRIKE),
	CONFUSE(SpriteID.SPELL_CONFUSE),
	WATER_STRIKE(SpriteID.SPELL_WATER_STRIKE),
	LVL_1_ENCHANT("lvl-1 enchant", SpriteID.SPELL_LVL_1_ENCHANT),
	EARTH_STRIKE(SpriteID.SPELL_EARTH_STRIKE),
	WEAKEN(SpriteID.SPELL_WEAKEN),
	FIRE_STRIKE(SpriteID.SPELL_FIRE_STRIKE),
	WIND_BOLT(SpriteID.SPELL_WIND_BOLT),
	CURSE(SpriteID.SPELL_CURSE),
	BIND(SpriteID.SPELL_BIND),
	LOW_LEVEL_ALCHEMY(SpriteID.SPELL_LOW_LEVEL_ALCHEMY),
	WATER_BOLT(SpriteID.SPELL_WATER_BOLT),
	LVL_2_ENCHANT("lvl-2 enchant", SpriteID.SPELL_LVL_2_ENCHANT),
	EARTH_BOLT(SpriteID.SPELL_EARTH_BOLT),
	TELEKINETIC_GRAB(SpriteID.SPELL_TELEKINETIC_GRAB),
	FIRE_BOLT(SpriteID.SPELL_FIRE_BOLT),
	CRUMBLE_UNDEAD(SpriteID.SPELL_CRUMBLE_UNDEAD),
	WIND_BLAST(SpriteID.SPELL_WIND_BLAST),
	SUPERHEAT_ITEM(SpriteID.SPELL_SUPERHEAT_ITEM),
	WATER_BLAST(SpriteID.SPELL_WATER_BLAST),
	LVL_3_ENCHANT("lvl-3 enchant", SpriteID.SPELL_LVL_3_ENCHANT),
	IBAN_BLAST(SpriteID.SPELL_IBAN_BLAST),
	SNARE(SpriteID.SPELL_SNARE),
	MAGIC_DART(SpriteID.SPELL_MAGIC_DART),
	EARTH_BLAST(SpriteID.SPELL_EARTH_BLAST),
	HIGH_LEVEL_ALCHEMY(SpriteID.SPELL_HIGH_LEVEL_ALCHEMY),
	CHARGE_WATER_ORB(SpriteID.SPELL_CHARGE_WATER_ORB),
	LVL_4_ENCHANT("lvl-4 enchant", SpriteID.SPELL_LVL_4_ENCHANT),
	FIRE_BLAST(SpriteID.SPELL_FIRE_BLAST),
	CHARGE_EARTH_ORB(SpriteID.SPELL_CHARGE_EARTH_ORB),
	SARADOMIN_STRIKE(SpriteID.SPELL_SARADOMIN_STRIKE),
	CLAWS_OF_GUTHIX(SpriteID.SPELL_CLAWS_OF_GUTHIX),
	FLAMES_OF_ZAMORAK(SpriteID.SPELL_FLAMES_OF_ZAMORAK),
	WIND_WAVE(SpriteID.SPELL_WIND_WAVE),
	CHARGE_FIRE_ORB(SpriteID.SPELL_CHARGE_FIRE_ORB),
	WATER_WAVE(SpriteID.SPELL_WATER_WAVE),
	CHARGE_AIR_ORB(SpriteID.SPELL_CHARGE_AIR_ORB),
	VULNERABILITY(SpriteID.SPELL_VULNERABILITY),
	LVL_5_ENCHANT("lvl-5 enchant", SpriteID.SPELL_LVL_5_ENCHANT),
	EARTH_WAVE(SpriteID.SPELL_EARTH_WAVE),
	ENFEEBLE(SpriteID.SPELL_ENFEEBLE),
	TELEOTHER_LUMBRIDGE(SpriteID.SPELL_TELEOTHER_LUMBRIDGE),
	FIRE_WAVE(SpriteID.SPELL_FIRE_WAVE),
	ENTANGLE(SpriteID.SPELL_ENTANGLE),
	STUN(SpriteID.SPELL_STUN),
	WIND_SURGE(SpriteID.SPELL_WIND_SURGE),
	TELEOTHER_FALADOR(SpriteID.SPELL_TELEOTHER_FALADOR),
	WATER_SURGE(SpriteID.SPELL_WATER_SURGE),
	TELE_BLOCK(SpriteID.SPELL_TELE_BLOCK),
	LVL_6_ENCHANT("lvl-6 enchant", SpriteID.SPELL_LVL_6_ENCHANT),
	TELEOTHER_CAMELOT(SpriteID.SPELL_TELEOTHER_CAMELOT),
	EARTH_SURGE(SpriteID.SPELL_EARTH_SURGE),
	LVL_7_ENCHANT("lvl-7 enchant", SpriteID.SPELL_LVL_7_ENCHANT),
	FIRE_SURGE(SpriteID.SPELL_FIRE_SURGE),
	// Ancients
	SMOKE_RUSH(SpriteID.SPELL_SMOKE_RUSH),
	SHADOW_RUSH(SpriteID.SPELL_SHADOW_RUSH),
	BLOOD_RUSH(SpriteID.SPELL_BLOOD_RUSH),
	ICE_RUSH(SpriteID.SPELL_ICE_RUSH),
	SMOKE_BURST(SpriteID.SPELL_SMOKE_BURST),
	SHADOW_BURST(SpriteID.SPELL_SHADOW_BURST),
	BLOOD_BURST(SpriteID.SPELL_BLOOD_BURST),
	ICE_BURST(SpriteID.SPELL_ICE_BURST),
	SMOKE_BLITZ(SpriteID.SPELL_SMOKE_BLITZ),
	SHADOW_BLITZ(SpriteID.SPELL_SHADOW_BLITZ),
	BLOOD_BLITZ(SpriteID.SPELL_BLOOD_BLITZ),
	ICE_BLITZ(SpriteID.SPELL_ICE_BLITZ),
	SMOKE_BARRAGE(SpriteID.SPELL_SMOKE_BARRAGE),
	SHADOW_BARRAGE(SpriteID.SPELL_SHADOW_BARRAGE),
	BLOOD_BARRAGE(SpriteID.SPELL_BLOOD_BARRAGE),
	ICE_BARRAGE(SpriteID.SPELL_ICE_BARRAGE),
	// Lunars
	CURE_PLANT(SpriteID.SPELL_CURE_PLANT),
	MONSTER_EXAMINE(SpriteID.SPELL_MONSTER_EXAMINE),
	STAT_SPY(SpriteID.SPELL_STAT_SPY),
	FERTILE_SOIL(SpriteID.SPELL_FERTILE_SOIL),
	PLANK_MAKE(SpriteID.SPELL_PLANK_MAKE),
	CURE_OTHER(SpriteID.SPELL_CURE_OTHER),
	STAT_RESTORE_POT_SHARE(SpriteID.SPELL_STAT_RESTORE_POT_SHARE),
	BOOST_POTION_SHARE(SpriteID.SPELL_BOOST_POTION_SHARE),
	ENERGY_TRANSFER(SpriteID.SPELL_ENERGY_TRANSFER),
	HEAL_OTHER(SpriteID.SPELL_HEAL_OTHER),
	VENGEANCE_OTHER(SpriteID.SPELL_VENGEANCE_OTHER),
	// Arceuus
	BASIC_REANIMATION(SpriteID.SPELL_BASIC_REANIMATION),
	ADEPT_REANIMATION(SpriteID.SPELL_ADEPT_REANIMATION),
	EXPERT_REANIMATION(SpriteID.SPELL_EXPERT_REANIMATION),
	MASTER_REANIMATION(SpriteID.SPELL_MASTER_REANIMATION),
	RESURRECT_CROPS(SpriteID.SPELL_RESURRECT_CROPS),
	DARK_LURE(SpriteID.SPELL_DARK_LURE),
	MARK_OF_DARKNESS(SpriteID.SPELL_MARK_OF_DARKNESS),
	GHOSTLY_GRASP(SpriteID.SPELL_GHOSTLY_GRASP),
	SKELETAL_GRASP(SpriteID.SPELL_SKELETAL_GRASP),
	UNDEAD_GRASP(SpriteID.SPELL_UNDEAD_GRASP),
	INFERIOR_DEMONBANE(SpriteID.SPELL_INFERIOR_DEMONBANE),
	SUPERIOR_DEMONBANE(SpriteID.SPELL_SUPERIOR_DEMONBANE),
	DARK_DEMONBANE(SpriteID.SPELL_DARK_DEMONBANE);

	private final String name;
	final int spriteID;

	SpellSprite(int spriteID)
	{
		this(null, spriteID);
	}

	private String getName()
	{
		return name != null ? name : this.name().toLowerCase().replace("_", " ");
	}

	private static final Map<String, SpellSprite> map = new HashMap<>();

	static
	{
		for (SpellSprite spell : values())
		{
			map.put(spell.getName(), spell);
		}
	}

	static SpellSprite get(String spell)
	{
		return map.get(spell);
	}
}

/*
 * Copyright (c) 2020-2022 Enriath <ikada@protonmail.ch>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package io.hydrox.contextualcursor;

import com.google.common.collect.Sets;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.Point;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.ui.ClientUI;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.ImageComponent;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;
import net.runelite.client.util.Text;
import javax.inject.Inject;
import javax.swing.JPanel;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.lang.reflect.Field;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
public class ContextualCursorWorkerOverlay extends Overlay
{
	private static final Cursor BLANK_MOUSE = Toolkit.getDefaultToolkit().createCustomCursor(
		new BufferedImage(32, 32,BufferedImage.TYPE_INT_ARGB),
		new java.awt.Point(0, 0),
		"blank"
	);
	private static final Tooltip SPACER_TOOLTIP = new Tooltip(
		new ImageComponent(new BufferedImage(1, 10, BufferedImage.TYPE_INT_ARGB))
	);
	private static final Pattern SPELL_FINDER = Pattern.compile(">(.*?)(?:</col>| -> )");
	private static final int MENU_OPTION_HEIGHT = 15;
	private static final int MENU_EXTRA_TOP = 4;
	private static final int MENU_EXTRA_BOTTOM = 3;
	private static final int MENU_BORDERS_TOTAL = MENU_EXTRA_TOP + MENU_OPTION_HEIGHT + MENU_EXTRA_BOTTOM;
	private static final Set<MenuAction> IGNORED_ACTIONS = Sets.newHashSet(
		MenuAction.WALK, MenuAction.CC_OP, MenuAction.CANCEL, MenuAction.CC_OP_LOW_PRIORITY
	);

	private final Client client;
	private final ClientUI clientUI;
	private final ContextualCursorPlugin plugin;
	private final SpriteManager spriteManager;
	private final TooltipManager tooltipManager;

	private Point menuOpenPoint;

	private boolean cursorOverriden;
	private Cursor originalCursor;

	@Inject
	ContextualCursorWorkerOverlay(Client client, ClientUI clientUI, ContextualCursorPlugin plugin,
								  SpriteManager spriteManager, TooltipManager tooltipManager)
	{
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_WIDGETS);
		setPriority(OverlayPriority.HIGHEST);
		this.client = client;
		this.clientUI = clientUI;
		this.plugin = plugin;
		this.spriteManager = spriteManager;
		this.tooltipManager = tooltipManager;
	}

	private void storeOriginalCursor()
	{
		if (cursorOverriden)
		{
			return;
		}
		try
		{
			// All this because clientUI doesn't have a `getCursor` function.
			Field f = clientUI.getClass().getDeclaredField("container");
			f.setAccessible(true);
			JPanel container = (JPanel) f.get(clientUI);
			final Cursor currentCursor = container.getCursor();
			if (!currentCursor.getName().equals("blank"))
			{
				originalCursor = container.getCursor();
			}
		}
		catch (NoSuchFieldException | IllegalAccessException ignored)
		{
		}
	}

	void resetCursor()
	{
		if (cursorOverriden)
		{
			cursorOverriden = false;
			plugin.setSpriteToDraw(null);
			if (originalCursor != null)
			{
				clientUI.setCursor(originalCursor);
			}
			else
			{
				clientUI.resetCursor();
			}
		}
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (plugin.isAltPressed())
		{
			resetCursor();
			return null;
		}

		final MenuEntry menuEntry;

		if (client.isMenuOpen())
		{
			menuEntry = processMenu();
		}
		else
		{
			menuOpenPoint = client.getMouseCanvasPosition();
			final MenuEntry[] menuEntries = client.getMenuEntries();
			int last = menuEntries.length - 1;

			if (last < 0)
			{
				return null;
			}

			menuEntry = menuEntries[last];
		}

		if (menuEntry == null ||
			(!menuEntry.isItemOp()
			&& !menuEntry.getOption().equals("Examine")
			&& IGNORED_ACTIONS.contains(menuEntry.getType())))
		{
			resetCursor();
			return null;
		}

		processEntry(graphics,  menuEntry.getType(), menuEntry.getOption(),  menuEntry.getTarget());
		return null;
	}

	private MenuEntry processMenu()
	{
		final MenuEntry[] menuEntries = client.getMenuEntries();

		final int menuTop;
		final int menuHeight = (menuEntries.length * MENU_OPTION_HEIGHT) + MENU_BORDERS_TOTAL;
		if (menuHeight + menuOpenPoint.getY() > client.getCanvasHeight())
		{
			menuTop = client.getCanvasHeight() - menuHeight;
		}
		else
		{
			menuTop = menuOpenPoint.getY();
		}

		final int fromTop = (client.getMouseCanvasPosition().getY() - MENU_EXTRA_TOP) - menuTop;

		final int index = menuEntries.length - (fromTop / MENU_OPTION_HEIGHT);

		if (index >= menuEntries.length || index < 0)
		{
			return null;
		}

		return menuEntries[index];
	}

	private static final Set<MenuAction> SPELL_TYPES = Sets.newHashSet(
		MenuAction.WIDGET_TARGET_ON_GAME_OBJECT, MenuAction.WIDGET_TARGET_ON_NPC, MenuAction.WIDGET_TARGET_ON_PLAYER,
		MenuAction.WIDGET_TARGET_ON_GROUND_ITEM, MenuAction.WIDGET_TARGET_ON_WIDGET, MenuAction.WIDGET_TARGET
	);

	private void processEntry(Graphics2D graphics, MenuAction type, String option, String target)
	{
		final ContextualCursor cursor;
		if (SPELL_TYPES.contains(type) && option.equals("Cast"))
		{
			final Matcher spellFinder = SPELL_FINDER.matcher(target.toLowerCase());

			if (!spellFinder.find())
			{
				return;
			}

			final String spellText = spellFinder.group(1);
			final SpellSprite spell = SpellSprite.get(spellText);

			final BufferedImage magicSprite = spriteManager.getSprite(spell.spriteID, 0);
			if (magicSprite == null)
			{
				return;
			}

			setSpriteToDraw(magicSprite);
			return;
		}
		else if (option.equals("Lookup") && Text.removeTags(target).startsWith("Wiki ->"))
		{
			cursor = ContextualCursor.WIKI;
		}
		else
		{
			cursor = ContextualCursor.get(Text.removeTags(option));
		}

		if (cursor == null)
		{
			resetCursor();
			return;
		}

		BufferedImage sprite = cursor.getCursor();
		if (cursor.getSpriteID() != null)
		{
			if (client.getSpriteOverrides().containsKey(cursor.getSpriteID()))
			{
				sprite = client.getSpriteOverrides().get(cursor.getSpriteID()).toBufferedImage();
			}
			else
			{
				sprite = spriteManager.getSprite(cursor.getSpriteID(), 0);
			}
			if (sprite == null)
			{
				return;
			}
		}
		if (sprite != null)
		{
			setSpriteToDraw(sprite);
		}
	}

	private void setSpriteToDraw(BufferedImage sprite)
	{
		storeOriginalCursor();
		clientUI.setCursor(BLANK_MOUSE);
		cursorOverriden = true;
		plugin.setSpriteToDraw(sprite);
		// Add an empty tooltip to keep real tooltips out of the way
		tooltipManager.addFront(SPACER_TOOLTIP);
	}
}

/*
 * Copyright (c) 2020-2022 Enriath <ikada@protonmail.ch>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package io.hydrox.contextualcursor;

import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.input.KeyListener;
import net.runelite.client.input.KeyManager;
import net.runelite.client.input.MouseListener;
import net.runelite.client.input.MouseManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import javax.inject.Inject;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;

@PluginDescriptor(
	name = "Contextual Cursor",
	description = "RSHD-style image cursors"
)
@Slf4j
public class ContextualCursorPlugin extends Plugin implements KeyListener, MouseListener
{
	@Inject
	private ContextualCursorDrawOverlay contextualCursorDrawOverlay;
	@Inject
	private ContextualCursorWorkerOverlay contextualCursorWorkerOverlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private KeyManager keyManager;

	@Inject
	private MouseManager mouseManager;

	@Getter
	private boolean altPressed;

	@Getter
	@Setter
	private BufferedImage spriteToDraw;

	protected void startUp()
	{
		overlayManager.add(contextualCursorWorkerOverlay);
		overlayManager.add(contextualCursorDrawOverlay);
		keyManager.registerKeyListener(this);
		mouseManager.registerMouseListener(this);
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(contextualCursorWorkerOverlay);
		overlayManager.remove(contextualCursorDrawOverlay);
		contextualCursorWorkerOverlay.resetCursor();
		keyManager.unregisterKeyListener(this);
		mouseManager.unregisterMouseListener(this);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		if (event.getGameState() != GameState.LOGGED_IN && event.getGameState() != GameState.LOADING)
		{
			contextualCursorWorkerOverlay.resetCursor();
		}
	}

	@Override
	public void keyPressed(KeyEvent keyEvent)
	{
		altPressed = keyEvent.isAltDown();
	}

	@Override
	public void keyReleased(KeyEvent keyEvent)
	{
		altPressed = keyEvent.isAltDown();
	}

	@Override
	public MouseEvent mouseEntered(MouseEvent mouseEvent)
	{
		altPressed = mouseEvent.isAltDown();
		return mouseEvent;
	}

	@Override
	public MouseEvent mouseExited(MouseEvent mouseEvent)
	{
		altPressed = mouseEvent.isAltDown();
		return mouseEvent;
	}

	// Beyond this point is junk.
	// Look upon this method-bloat and despair!

	@Override
	public MouseEvent mouseDragged(MouseEvent mouseEvent)
	{
		return mouseEvent;
	}

	@Override
	public MouseEvent mouseMoved(MouseEvent mouseEvent)
	{
		return mouseEvent;
	}

	@Override
	public MouseEvent mouseClicked(MouseEvent mouseEvent)
	{
		return mouseEvent;
	}

	@Override
	public MouseEvent mousePressed(MouseEvent mouseEvent)
	{
		return mouseEvent;
	}

	@Override
	public MouseEvent mouseReleased(MouseEvent mouseEvent)
	{
		return mouseEvent;
	}

	@Override
	public void keyTyped(KeyEvent keyEvent)
	{

	}
}

/*
 * Copyright (c) 2022 Enriath <ikada@protonmail.ch>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package io.hydrox.contextualcursor;

import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import javax.inject.Inject;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;

public class ContextualCursorDrawOverlay extends Overlay
{
	//The pointer sticks out to the left slightly, so this makes sure it's point to the correct spot
	private static final Point POINTER_OFFSET = new Point(-5, 0);
	//The centre of the circle (biased bottom right since it's an even size), for use with sprites
	private static final Point CENTRAL_POINT = new Point(16, 18);

	private final Client client;
	private final ContextualCursorPlugin plugin;

	@Inject
	ContextualCursorDrawOverlay(Client client, ContextualCursorPlugin plugin)
	{
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ALWAYS_ON_TOP);
		setPriority(OverlayPriority.HIGHEST);
		this.client = client;
		this.plugin = plugin;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		BufferedImage sprite = plugin.getSpriteToDraw();
		if (sprite == null)
		{
			return null;
		}

		final Point mousePos = client.getMouseCanvasPosition();
		final ContextualCursor blank = ContextualCursor.BLANK;
		graphics.drawImage(blank.getCursor(), mousePos.getX() + POINTER_OFFSET.getX(), mousePos.getY() + POINTER_OFFSET.getY(), null);
		final int spriteX = POINTER_OFFSET.getX() + CENTRAL_POINT.getX() - sprite.getWidth() / 2;
		final int spriteY = POINTER_OFFSET.getY() + CENTRAL_POINT.getY() - sprite.getHeight() / 2;
		graphics.drawImage(sprite, mousePos.getX() + spriteX, mousePos.getY() + spriteY, null);
		return null;
	}
}

/*
 * Copyright (c) 2019-2022 Enriath <ikada@protonmail.ch>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package io.hydrox.contextualcursor;

import lombok.Getter;
import net.runelite.api.SpriteID;
import net.runelite.client.util.ImageUtil;

import java.awt.image.BufferedImage;
import java.util.HashMap;
import java.util.Map;

@Getter
public enum ContextualCursor
{
	BLANK("blank"),
	GENERIC("generic"), //Cursor inside background

	BANK("bank", "bank"),
	CLOSE("close", "close"),
	CONFIGURE(1654, "configure", "configuration"), // Wrench sprite
	DRINK("drink", "drink"),
	DROP("drop", "drop", "empty", "deposit"),
	EAT("eat", "eat"),
	ENTER("enter", "climb-into", "enter", "exit", "yanille", "varrock", "seers' village", "camelot",
		"grand exchange", "watchtower", "go-through"),
	EQUIP("equip", "wield", "wear", "equip"),
	EXCHANGE(SpriteID.GE_GUIDE_PRICE, "exchange", "trade", "trade with", "collect"),
	FRIEND(SpriteID.TAB_FRIENDS, "add friend"),
	IGNORE(SpriteID.TAB_IGNORES, "add ignore"),
	IMPOSSIBLE("impossible", "destroy"),
	LADDER("ladder", "climb"),
	LADDER_DOWN("ladder_down", "climb-down", "climb down"),
	LADDER_UP("ladder_up", "climb-up", "climb up"),
	OPEN("open", "open"),
	PICK_UP("pick_up", "take", "withdraw" ,"fill"),
	PLANK("plank", "buy-plank"),
	READ("read", "read", "story"),
	REPORT(SpriteID.DEADMAN_EXCLAMATION_MARK_SKULLED_WARNING, "report"),
	SEARCH("search", "search", "lookup", "examine", "view", "look-inside"),
	TALK("talk", "talk", "talk-to", "talk to"),
	UNTIE("untie", "tether"),
	USE("use", "use"),
	WIKI("wiki", "lookup-entity"),

	// Skills
	AGILITY(SpriteID.SKILL_AGILITY, "balance", "balance-across", "climb-across", "climb-on", "climb-over",
		"cross", "grab", "grapple", "hurdle", "jump", "jump-up", "jump-to", "jump-off", "jump-in", "jump-on", "kick",
		"leap", "shoot", "squeeze-past", "squeeze-through", "swing", "swing across", "swing-across", "swing-on", "tap",
		"tag", "teeth-grip", "tread-softly", "vault", "walk-on", "walk-across", "crawl-through", "jump-over"),
	ATTACK(SpriteID.SKILL_ATTACK, "attack"),
	CONSTRUCTION(SpriteID.SKILL_CONSTRUCTION, "build", "remove"),
	COOKING(SpriteID.SKILL_COOKING, "cook", "churn", "cook-at", "prepare-fish"),
	CRAFTING(SpriteID.SKILL_CRAFTING, "spin"),
	FARMING(SpriteID.SKILL_FARMING, "check-health", "harvest", "rake", "pick", "pick-fruit", "clear", "pay"),
	FIREMAKING(SpriteID.SKILL_FIREMAKING, "light", "feed"),
	FISHING(SpriteID.SKILL_FISHING, "net", "bait", "lure", "small net", "harpoon", "cage", "big net",
		"use-rod", "fish", "take-net"),
	HERBLORE(SpriteID.SKILL_HERBLORE, "clean"),
	HUNTER(SpriteID.SKILL_HUNTER, "catch", "lay", "dismantle", "reset", "check"),
	MAGIC(SpriteID.SKILL_MAGIC, "spellbook", "teleport", "teleport menu"), // `venerate` interferes with the Dark Altar's RC use
	MINING(SpriteID.SKILL_MINING, "mine", "smash-to-bits"),
	PRAYER(SpriteID.SKILL_PRAYER, "pray", "bury", "pray-at", "offer-fish", "scatter"),
	RUNECRAFTING(SpriteID.SKILL_RUNECRAFT, "craft-rune", "imbue"),
	SMITHING(SpriteID.SKILL_SMITHING, "smelt", "smith", "hammer", "refine"),
	SLAYER(SpriteID.SKILL_SLAYER, "assignment"),
	STRENGTH(SpriteID.SKILL_STRENGTH, "bang", "move"),
	THIEVING(SpriteID.SKILL_THIEVING, "steal-from", "pickpocket", "search for traps", "pick-lock"),
	WOODCUTTING(SpriteID.SKILL_WOODCUTTING, "chop down", "chop-down", "chop", "cut", "hack");

	private BufferedImage cursor;
	private Integer spriteID;
	private String[] actions;

	ContextualCursor(String cursor_path, String ... actions)
	{
		this.cursor = ImageUtil.loadImageResource(ContextualCursorPlugin.class, String.format("cursors/%s.png", cursor_path));
		this.actions = actions;
	}

	ContextualCursor(int spriteID, String ... actions)
	{
		this.spriteID = spriteID;
		this.actions = actions;
	}

	private static final Map<String, ContextualCursor> cursorMap = new HashMap<>();

	static
	{
		for (ContextualCursor cursor : values())
		{
			for (String action : cursor.actions)
			{
				cursorMap.put(action, cursor);
			}
		}
	}

	static ContextualCursor get(String action)
	{
		//return cursorMap.get(action.toLowerCase());
		return cursorMap.getOrDefault(action.toLowerCase(), GENERIC);
	}
}

