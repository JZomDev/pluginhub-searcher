package com.salverrs.HouseAdvertisementPlus;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class HouseAdvertisementPlusTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(HouseAdvertisementPlusPlugin.class);
		RuneLite.main(args);
	}
}
package com.salverrs.HouseAdvertisementPlus;

import net.runelite.api.Client;
import net.runelite.api.widgets.Widget;
import org.apache.commons.lang3.BooleanUtils;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;

public class HouseAdvertisementMapper {

    private Client client;
    private List<String> favourites;

    private List<String> blacklist;
    public HouseAdvertisementMapper(Client client, List<String> favourites, List<String> blacklist)
    {
        this.favourites = favourites;
        this.client = client;
        this.blacklist = blacklist;
    }

    public HashMap<String, HouseAdvertisement> GetHouseAdvertisements() {
        final Widget root = client.getWidget(AdvertID.WIDGET_GROUP_ID, 0);
        if (root == null)
            return null;

        HashMap<Integer, HouseAdvertisement> advertYOffsetMap = new HashMap();
        HashMap<String, HouseAdvertisement> advertPlayerNameMap = new HashMap();

        final Widget[] playerNameWidgets = client.getWidget(AdvertID.WIDGET_GROUP_ID, AdvertID.WIDGET_NAME_INDEX).getDynamicChildren();
        final Widget[] constructionLvlWidgets = client.getWidget(AdvertID.WIDGET_GROUP_ID, AdvertID.WIDGET_CONSTRUCTION_LVL_INDEX).getDynamicChildren();
        final Widget[] guildedAlterWidgets = client.getWidget(AdvertID.WIDGET_GROUP_ID, AdvertID.WIDGET_GUILDED_ALTER_INDEX).getDynamicChildren();
        final Widget[] nexusLvlWidgets = client.getWidget(AdvertID.WIDGET_GROUP_ID, AdvertID.WIDGET_NEXUS_INDEX).getDynamicChildren();
        final Widget[] jewelleryLvlWidgets = client.getWidget(AdvertID.WIDGET_GROUP_ID, AdvertID.WIDGET_JEWELLERY_INDEX).getDynamicChildren();
        final Widget[] poolLvlWidgets = client.getWidget(AdvertID.WIDGET_GROUP_ID, AdvertID.WIDGET_POOL_INDEX).getDynamicChildren();
        final Widget[] spellAltarLvlWidgets = client.getWidget(AdvertID.WIDGET_GROUP_ID, AdvertID.WIDGET_SPELL_ALTER_INDEX).getDynamicChildren();
        final Widget[] armourStandWidgets = client.getWidget(AdvertID.WIDGET_GROUP_ID, AdvertID.WIDGET_ARMOUR_STAND_INDEX).getDynamicChildren();
        final Widget[] enterArrowWidgets = client.getWidget(AdvertID.WIDGET_GROUP_ID, AdvertID.WIDGET_ENTER_ARROW_INDEX).getDynamicChildren();
        final Widget[] locationNameWidgets = client.getWidget(AdvertID.WIDGET_GROUP_ID, AdvertID.WIDGET_LOCATION_INDEX).getDynamicChildren();

        for (Widget w : playerNameWidgets)
        {
            if (w.isHidden())
                continue;

            final String playerName = AdvertUtil.normalizeName(w.getText());
            final int yOffset = w.getRelativeY();

            if (playerName == null || playerName == "")
                continue;

            final HouseAdvertisement advert = new HouseAdvertisement(playerName, yOffset);

            advert.setOriginalYOffset(yOffset);
            advert.addWidget(AdvertID.KEY_NAME, w);
            advertYOffsetMap.put(yOffset, advert);
            advertPlayerNameMap.put(playerName, advert);

            if (favourites.contains(playerName))
            {
                advert.setFavourite(true);
                advert.setFavouritePriority(getFavouriteIndex(playerName));
            }
            else
            {
                advert.setFavouritePriority(-1);
            }

            if (blacklist.contains(playerName))
            {
                advert.setBlacklisted(true);
            }
        }

        for (Widget w : constructionLvlWidgets)
        {
            if (w.isHidden())
                continue;

            final int yOffset = w.getRelativeY();
            final HouseAdvertisement advert = advertYOffsetMap.get(yOffset);
            if (advert == null)
                continue;

            final String text = w.getText();
            if (text == null || text.equals(""))
                continue;

            final int constructionLvl = Integer.parseInt(text);
            advert.setConstructionLvl(constructionLvl);
            advert.addWidget(AdvertID.KEY_CONSTRUCTION_LVL, w);
        }

        for (Widget w : guildedAlterWidgets)
        {
            if (w.isHidden())
                continue;

            final int yOffset = w.getRelativeY();
            final HouseAdvertisement advert = advertYOffsetMap.get(yOffset);
            if (advert == null)
                continue;

            final String text = w.getText();
            if (text == null || text.equals(""))
                continue;

            final boolean hasGuildedAlter = BooleanUtils.toBoolean(text);
            advert.setHasGuildedAlter(hasGuildedAlter);
            advert.addWidget(AdvertID.KEY_ALTAR, w);
        }

        for (Widget w : nexusLvlWidgets)
        {
            if (w.isHidden())
                continue;

            final int yOffset = w.getRelativeY();
            final HouseAdvertisement advert = advertYOffsetMap.get(yOffset);
            if (advert == null)
                continue;

            final String text = w.getText();
            if (text == null || text.equals(""))
                continue;

            final int nexusLvl = Integer.parseInt(text);
            advert.setNexusLvl(nexusLvl);
            advert.addWidget(AdvertID.KEY_NEXUS_LVL, w);
        }

        for (Widget w : jewelleryLvlWidgets)
        {
            if (w.isHidden())
                continue;

            final int yOffset = w.getRelativeY();
            final HouseAdvertisement advert = advertYOffsetMap.get(yOffset);
            if (advert == null)
                continue;

            final String text = w.getText();
            if (text == null || text.equals(""))
                continue;

            final int jewelleryLvl = Integer.parseInt(text);
            advert.setJewelleryLvl(jewelleryLvl);
            advert.addWidget(AdvertID.KEY_JEWELLERY_LVL, w);
        }

        for (Widget w : poolLvlWidgets)
        {
            if (w.isHidden())
                continue;

            final int yOffset = w.getRelativeY();
            final HouseAdvertisement advert = advertYOffsetMap.get(yOffset);
            if (advert == null)
                continue;

            final String text = w.getText();
            if (text == null || text.equals(""))
                continue;

            final int poolLvl = Integer.parseInt(text);
            advert.setPoolLvl(poolLvl);
            advert.addWidget(AdvertID.KEY_POOL_LVL,w);
        }

        for (Widget w : spellAltarLvlWidgets)
        {
            if (w.isHidden())
                continue;

            final int yOffset = w.getRelativeY();
            final HouseAdvertisement advert = advertYOffsetMap.get(yOffset);
            if (advert == null)
                continue;

            final String text = w.getText();
            if (text == null || text.equals(""))
                continue;

            final int spellAltarLvl = Integer.parseInt(text);
            advert.setSpellAltarLvl(spellAltarLvl);
            advert.addWidget(AdvertID.KEY_SPELL_ALTAR_LVL, w);
        }

        for (Widget w : armourStandWidgets)
        {
            if (w.isHidden())
                continue;

            final int yOffset = w.getRelativeY();
            final HouseAdvertisement advert = advertYOffsetMap.get(yOffset);
            if (advert == null)
                continue;

            final String text = w.getText();
            if (text == null || text.equals(""))
                continue;

            final boolean hasArmourStand = BooleanUtils.toBoolean(text);
            advert.setHasArmourStand(hasArmourStand);
            advert.addWidget(AdvertID.KEY_ARMOUR_STAND, w);
        }

        for (Widget w : enterArrowWidgets)
        {
            if (w.isHidden())
                continue;

            final String nameArg = AdvertUtil.getPlayerFromOpArg(w, AdvertID.ADVERT_ARROW_PLAYER_ARG_INDEX);
            if (nameArg == null || nameArg.equals(""))
                continue;

            final String playerName = AdvertUtil.normalizeName(nameArg);
            final HouseAdvertisement advert = advertPlayerNameMap.get(playerName);
            if (advert == null)
                continue;

            advert.setAnotherLocation(false);
            advert.addWidget(AdvertID.KEY_ENTER, w);
        }

        for (Widget w : locationNameWidgets)
        {
            if (w.isHidden())
                continue;

            final int yOffset = w.getRelativeY();
            final HouseAdvertisement advert = advertYOffsetMap.get(yOffset);
            if (advert == null)
                continue;

            final String text = w.getText();
            if (text == null || text.equals(""))
                continue;

            advert.setLocation(text);
            advert.addWidget(AdvertID.KEY_LOCATION, w);
        }

        final List<HouseAdvertisement> adverts = new ArrayList(advertPlayerNameMap.values());
        adverts.sort(Comparator.comparing(a -> a.getOriginalYOffset()));

        for (int i = 0; i < adverts.size(); i++)
        {
            HouseAdvertisement advert = adverts.get(i);
            advert.setRowIndex(i);
        }

        return advertPlayerNameMap;
    }

    private int getFavouriteIndex(String playerName)
    {
        final int index = favourites.indexOf(AdvertUtil.normalizeName(playerName));
        if (index == -1)
        {
            return index;
        }
        else
        {
            return favourites.size() - index;
        }
    }

}

package com.salverrs.HouseAdvertisementPlus;

import java.util.Arrays;
import java.util.List;

public class AdvertID {

    public static List<String> ADVERT_WIDGET_KEYS = Arrays.asList(
            AdvertID.KEY_NAME,
            AdvertID.KEY_CONSTRUCTION_LVL,
            AdvertID.KEY_NEXUS_LVL,
            AdvertID.KEY_POOL_LVL,
            AdvertID.KEY_ALTAR,
            AdvertID.KEY_SPELL_ALTAR_LVL,
            AdvertID.KEY_ARMOUR_STAND,
            AdvertID.KEY_JEWELLERY_LVL,
            AdvertID.KEY_ENTER,
            AdvertID.KEY_LOCATION
    );

    public static final int ADVERT_DEFAULT_FONT_ID = 495;
    public static final int UPDATE_ADD_LINE_SCRIPT_ID = 3110;
    public static final int UPDATE_ADD_SORT_SCRIPT_ID = 3112;
    public static final int UPDATE_RE_DRAW_SCRIPT_ID = 3113;
    public static final int UPDATE_POH_INIT_SCRIPT_ID = 3109;
    public static final int WIDGET_GROUP_ID = 52;
    public static final int WIDGET_TITLE_PARENT_INDEX = 3;
    public static final int WIDGET_CONTAINER_ID = 7;
    public static final int WIDGET_TITLE_INDEX = 1;

    public static final int WIDGET_ROWS_INDEX = 8;
    public static final int WIDGET_NAME_INDEX = 9;
    public static final int WIDGET_CONSTRUCTION_LVL_INDEX = 12;
    public static final int WIDGET_GUILDED_ALTER_INDEX = 13;
    public static final int WIDGET_NEXUS_INDEX = 14;
    public static final int WIDGET_JEWELLERY_INDEX = 15;
    public static final int WIDGET_POOL_INDEX = 16;
    public static final int WIDGET_SPELL_ALTER_INDEX = 17;
    public static final int WIDGET_ARMOUR_STAND_INDEX = 18;
    public static final int WIDGET_ENTER_ARROW_INDEX = 19;

    public static final int WIDGET_LOCATION_INDEX = 10;
    public static final int ADVERT_ARROW_PLAYER_ARG_INDEX = 1;
    public static final int LAST_VISIT_VAR_INDEX = 361;

    public static final int LOCAL_ONLY_VARBIT_ID = 9448;
    public static final String TITLE = "House Advertisement";
    public static final String ENTER_HOUSE_OPTION_TEXT = "Enter House";
    public static final String LAST_VISIT_OPTION_TEXT = "Visit-Last";
    public static final String KEY_NAME = "NAME";
    public static final String KEY_CONSTRUCTION_LVL = "CONSTRUCTION";
    public static final String KEY_ALTAR = "ALTAR";
    public static final String KEY_NEXUS_LVL = "NEXUS";
    public static final String KEY_JEWELLERY_LVL = "JEWELLERY";
    public static final String KEY_POOL_LVL = "POOL";
    public static final String KEY_SPELL_ALTAR_LVL = "SPELL_ALTAR";
    public static final String KEY_ARMOUR_STAND = "ARMOUR_STAND";
    public static final String KEY_ENTER = "ENTER";
    public static final String KEY_LOCATION = "LOCATION";


}

package com.salverrs.HouseAdvertisementPlus;

import com.salverrs.HouseAdvertisementPlus.Filters.NumericFilters;
import com.salverrs.HouseAdvertisementPlus.Filters.YesNoFilter;
import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup(HouseAdvertisementPlusPlugin.ConfigGroup)
public interface HouseAdvertisementPlusConfig extends Config
{
	@ConfigSection(
			name = "Filters",
			description = "House advertisement filters.",
			position = 0
	)
	String filtersSection = "filters";

	@ConfigSection(
			name = "Favourites",
			description = "Favourite house advertisements.",
			position = 1
	)
	String favouritesSection = "favourites";

	@ConfigSection(
			name = "Blacklist",
			description = "House advertisements to always hide.",
			position = 2
	)
	String blackListSection = "blacklist";

	@ConfigSection(
			name = "Menu Options",
			description = "House Advertisement menu options.",
			position = 3
	)
	String menuOptionsSection = "menuOptions";

	@ConfigItem(
			keyName = "useAdvertFilters",
			name = "Enable Filters",
			description = "Enable the filters feature for the advertisement board.",
			position = 0,
			section = filtersSection
	)
	default boolean useFilters() { return false; }

	@Range(
			max = NumericFilters.CONSTRUCTION_LEVEL_MAX,
			min = NumericFilters.ALL_FILTER_MIN
	)
	@ConfigItem(
			keyName = "minConstructionLvl",
			name = "Minimum Construction Level",
			description = "The minimum Construction level for a house advertisement to be shown.",
			position = 1,
			section = filtersSection
	)
	default int minConstructionLvl() { return 1; }

	@ConfigItem(
			keyName = "hasGuildedAltar",
			name = "Has Guilded Altar",
			description = "The minimum Guilded Altar requirement for a house advertisement to be shown.",
			position = 2,
			section = filtersSection
	)
	default YesNoFilter hasGuildedAltar() { return YesNoFilter.N; }

	@Range(
			max = NumericFilters.NEXUS_MAX_TIER,
			min = NumericFilters.ALL_FILTER_MIN
	)
	@ConfigItem(
			keyName = "minNexusLvl",
			name = "Minimum Nexus Tier",
			description = "The minimum Nexus tier for a house advertisement to be shown.",
			position = 3,
			section = filtersSection
	)
	default int minNexusLvl() { return 0; }

	@Range(
			max = NumericFilters.JEWELLERY_MAX_TIER,
			min = NumericFilters.ALL_FILTER_MIN
	)
	@ConfigItem(
			keyName = "minJewelleryLvl",
			name = "Minimum Jewellery Box Tier",
			description = "The minimum Jewellery Box tier for a house advertisement to be shown.",
			position = 4,
			section = filtersSection
	)
	default int minJewelleryLvl() { return 0; }

	@Range(
			max = NumericFilters.POOL_MAX_TIER,
			min = NumericFilters.ALL_FILTER_MIN
	)
	@ConfigItem(
			keyName = "minPoolLvl",
			name = "Minimum Pool Tier",
			description = "The minimum Pool tier for a house advertisement to be shown.",
			position = 5,
			section = filtersSection
	)
	default int minPoolLvl() { return 0; }


	@Range(
			max = NumericFilters.SPELL_ALTAR_MAX_TIER,
			min = NumericFilters.ALL_FILTER_MIN
	)
	@ConfigItem(
			keyName = "minSpellAltarLvl",
			name = "Minimum Spell Altar Tier",
			description = "The minimum Spell Altar tier for a house advertisement to be shown.",
			position = 6,
			section = filtersSection
	)
	default int minSpellAltarLvl() { return 0; }

	@ConfigItem(
			keyName = "hasArmourStand",
			name = "Has Armour Stand",
			description = "The minimum Armour Stand requirement for a house advertisement to be shown.",
			position = 7,
			section = filtersSection
	)
	default YesNoFilter hasArmourStand() { return YesNoFilter.N; }

	@ConfigItem(
			keyName = "useFavourites",
			name = "Enable Favourites",
			description = "Enable the favourites feature for house advertisements.",
			position = 8,
			section = favouritesSection
	)
	default boolean useFavourites()
	{
		return true;
	}

	@ConfigItem(
		keyName = "favouritePlayers",
		name = "Favourite Players",
		description = "List of favourite player house advertisements (Comma separated). These can also be added by right-clicking the arrow on advertisements.",
		position = 9,
		section = favouritesSection
	)
	default String getPlayerFavourites()
	{
		return "";
	}

	@ConfigItem(
			keyName = "favouritePlayers",
			name = "",
			description = ""
	)
	void setPlayerFavourites(String playerName);

	@ConfigItem(
			keyName = "pinFavourites",
			name = "Pin Favourites to Top",
			description = "Pin favourites to the top of the advertisement board.",
			position = 10,
			section = favouritesSection
	)
	default boolean pinFavourites()
	{
		return true;
	}

	@ConfigItem(
			keyName = "highlightColor",
			name = "Highlight Colour",
			description = "The highlight colour for advertisement favorites.",
			position = 11,
			section = favouritesSection
	)
	default Color highlightColor()
	{
		return new Color(255, 255, 0);
	}

	@ConfigItem(
			keyName = "highlightEnterButton",
			name = "Highlight Advert Enter Button",
			description = "Highlight the advertisement arrow button used to enter the house.",
			position = 12,
			section = favouritesSection
	)
	default boolean highlightEnterButton()
	{
		return true;
	}

	@ConfigItem(
			keyName = "highlightEntireAdvert",
			name = "Highlight Advert Text",
			description = "Highlight the text on the advertisement row.",
			position = 13,
			section = favouritesSection
	)
	default boolean highlightAdvertText()
	{
		return true;
	}

	@ConfigItem(
			keyName = "useBlacklist",
			name = "Enable Blacklist",
			description = "Enable the blacklist feature for house advertisements.",
			position = 14,
			section = blackListSection
	)
	default boolean useBlacklist()
	{
		return true;
	}

	@ConfigItem(
			keyName = "blacklistedPlayers",
			name = "Blacklisted Players (Hidden)",
			description = "List of blacklisted player house advertisements to hide (Comma separated). These can also be added by right-clicking the arrow on advertisements.",
			position = 15,
			section = blackListSection
	)
	default String getPlayerBlacklist()
	{
		return "";
	}

	@ConfigItem(
			keyName = "blacklistedPlayers",
			name = "",
			description = ""
	)
	void setPlayerBlacklist(String playerName);

	@ConfigItem(
			keyName = "visitLastPreview",
			name = "Show Visit-Last Name Preview",
			description = "Preview the name of the last house you visited on the Visit-Last menu option (when available).",
			position = 16,
			section = menuOptionsSection
	)
	default boolean visitLastPreview()
	{
		return true;
	}

	@ConfigItem(
			keyName = "visitLastPreviewColour",
			name = "Name Preview Colour",
			description = "The colour of the Visit-Last name preview (when available).",
			position = 17,
			section = menuOptionsSection
	)
	default Color visitLastPreviewColour()
	{
		return new Color(0, 255, 0);
	}

}


package com.salverrs.HouseAdvertisementPlus;

import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;

import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;


public class HouseAdvertisementPlusOverlay extends Overlay {

    @Inject
    private HouseAdvertisementPlusPlugin plugin;

    public HouseAdvertisementPlusOverlay() {
        setLayer(OverlayLayer.MANUAL);
        drawAfterLayer(AdvertID.WIDGET_GROUP_ID, AdvertID.WIDGET_CONTAINER_ID);
        setPosition(OverlayPosition.DYNAMIC);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        plugin.renderHighlights(graphics);
        return null;
    }
}

package com.salverrs.HouseAdvertisementPlus;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetType;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.menus.MenuManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;

import java.awt.*;
import java.awt.geom.Area;
import java.awt.geom.RoundRectangle2D;
import java.util.*;
import java.util.List;
import java.util.function.Consumer;

@Slf4j
@PluginDescriptor(
	name = "House Advertisement Plus",
	description = "QOL features for the House Advertisement board.",
	tags = {"poh", "house", "advert", "advertisement", "plus", "board", "favourites", "filter", "qol"},
	enabledByDefault = true
)
public class HouseAdvertisementPlusPlugin extends Plugin
{
	public static final String ConfigGroup = "HouseAdvertisementPlus";
	private String lastVisited = "";
	private Widget container;
	private boolean advertBoardVisible = false;
	private boolean shouldRenderBoard = false;
	private boolean shouldRenderHighlights = false;
	private boolean requiresUpdate = true;
	private List<String> favouritePlayers = new ArrayList();
	private List<String> blacklistPlayers = new ArrayList();

	private HashMap<String, HouseAdvertisement> adverts;
	private final List<WidgetTarget> widgetsToHighlight = new ArrayList();
	private final List<WidgetTarget> textToHighlight = new ArrayList();
	private final HashMap<String, Integer> defaultTextColours = new HashMap();

	@Inject
	private ClientThread clientThread;
	@Inject
	private Client client;
	@Inject
	private HouseAdvertisementPlusOverlay overlay;
	@Inject
	private OverlayManager overlayManager;
	@Inject
	private MenuManager menuManager;
	@Inject
	private HouseAdvertisementPlusConfig config;

	@Override
	protected void startUp() throws Exception
	{
		log.info("House Advertisement Plus started!");
		favouritePlayers = AdvertUtil.normalizeNames(Text.fromCSV(config.getPlayerFavourites()));
		blacklistPlayers = AdvertUtil.normalizeNames(Text.fromCSV(config.getPlayerBlacklist()));
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		log.info("House Advertisement Plus stopped!");
		resetAll();
		overlayManager.remove(overlay);
	}


	@Subscribe(priority = -100)
	public void onClientTick(ClientTick clientTick)
	{
		if (advertBoardVisible && requiresUpdate) {
			processHouseAdvertisements();
			requiresUpdate = false;
		}

		AddMenuEntries();
	}


	@Subscribe
	public void onScriptPostFired(ScriptPostFired event)
	{
		int id = event.getScriptId();
		if (id == AdvertID.UPDATE_ADD_LINE_SCRIPT_ID ||
			id == AdvertID.UPDATE_ADD_SORT_SCRIPT_ID ||
			id == AdvertID.UPDATE_POH_INIT_SCRIPT_ID ||
			id == AdvertID.UPDATE_RE_DRAW_SCRIPT_ID)
		{
			resetUpdateState();
		}
	}

	@Subscribe
	public void onWidgetClosed(WidgetClosed e)
	{
		final int groupId = e.getGroupId();
		if (groupId == AdvertID.WIDGET_GROUP_ID)
		{
			advertBoardVisible = false;
			resetUpdateState();
			resetWidgetHighlights();
			refreshVisibility();
		}
	}

	@Subscribe
	public void onWidgetLoaded(WidgetLoaded e)
	{
		final int groupId = e.getGroupId();

		if (groupId == AdvertID.WIDGET_GROUP_ID)
		{
			if (!isHouseAdvertWidgetVisible()) {
				return;
			}

			advertBoardVisible = true;
			resetUpdateState();
			refreshVisibility();
		}
	}

	@Subscribe
	public void onVarClientStrChanged(VarClientStrChanged e)
	{
		if (e.getIndex() == AdvertID.LAST_VISIT_VAR_INDEX)
		{
			lastVisited = client.getVarcStrValue(AdvertID.LAST_VISIT_VAR_INDEX);
		}
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		if (event.getGameState() == GameState.LOGGED_IN)
		{
			lastVisited = client.getVarcStrValue(AdvertID.LAST_VISIT_VAR_INDEX);
		}
	}

	private void AddMenuEntries()
	{
		if (client.getGameState() != GameState.LOGGED_IN || client.isMenuOpen())
			return;

		final MenuEntry[] entries = client.getMenuEntries();
		for (final MenuEntry entry : entries)
		{
			final String option = entry.getOption();
			if (advertBoardVisible && option.contains(AdvertID.ENTER_HOUSE_OPTION_TEXT))
			{
				addCustomMenuOptions(entry);
			}
			else if (option.contains(AdvertID.LAST_VISIT_OPTION_TEXT))
			{
				if (config.visitLastPreview())
				{
					addLastVisitName(entry);
				}
			}
		}
	}

	private void addCustomMenuOptions(MenuEntry entry)
	{
		final Widget arrowWidget = entry.getWidget();

		if (arrowWidget.getOpacity() == 255) // Hide menu option for 'hidden' (opacity=255) enter widgets.
		{
			client.setMenuEntries(new MenuEntry[0]);
			return;
		}

		String playerName = AdvertUtil.getPlayerFromOpArg(arrowWidget, AdvertID.ADVERT_ARROW_PLAYER_ARG_INDEX);
		if (playerName == null || playerName.equals(""))
			return;

		final String originalName = playerName;
		playerName = AdvertUtil.normalizeName(playerName);
		int menuInsertIndex = 2;

		if (config.useFavourites())
		{
			if (favouritePlayers.contains(playerName))
			{
				client.createMenuEntry(menuInsertIndex)
						.setOption("Remove " + originalName + " from favourites")
						.setTarget("")
						.setType(MenuAction.RUNELITE)
						.onClick(removeFromFavourites(playerName));
			}
			else
			{
				client.createMenuEntry(menuInsertIndex)
						.setOption("Add " + originalName + " to favourites")
						.setTarget("")
						.setType(MenuAction.RUNELITE)
						.onClick(addToFavourites(playerName));
			}

			menuInsertIndex--;
		}

		if (config.useBlacklist() && !favouritePlayers.contains(playerName))
		{
			client.createMenuEntry(menuInsertIndex)
					.setOption("Hide " + originalName)
					.setTarget("")
					.setType(MenuAction.RUNELITE)
					.onClick(addToBlacklist(playerName));
		}
	}

	private void addLastVisitName(MenuEntry entry)
	{
		if (lastVisited != null && !lastVisited.equals(""))
		{
			final int r = config.visitLastPreviewColour().getRed();
			final int g = config.visitLastPreviewColour().getGreen();
			final int b = config.visitLastPreviewColour().getBlue();
			String hexColor = String.format("%02x%02x%02x", r, g, b);
			entry.setTarget("<col=" + hexColor + ">" + lastVisited + "</col>");
		}
	}

	private Consumer<MenuEntry> addToBlacklist(String playerName)
	{
		return e -> {
			if (blacklistPlayers.contains(playerName))
				return;

			final ArrayList<String> newPlayerList = new ArrayList<>(blacklistPlayers);
			newPlayerList.add(playerName);
			config.setPlayerBlacklist(Text.toCSV(newPlayerList));
			resetUpdateState();
		};
	}

	private Consumer<MenuEntry> addToFavourites(String playerName)
	{
		return e -> {
			if (favouritePlayers.contains(playerName))
				return;

			final ArrayList<String> newPlayerList = new ArrayList<>(favouritePlayers);
			newPlayerList.add(playerName);
			config.setPlayerFavourites(Text.toCSV(newPlayerList));
			resetUpdateState();
		};
	}

	private Consumer<MenuEntry> removeFromFavourites(String playerName)
	{
		return e -> {
			if (!favouritePlayers.contains(playerName))
				return;

			final ArrayList<String> newPlayerList = new ArrayList<>(favouritePlayers);
			newPlayerList.removeIf(p -> p.equals(playerName));
			config.setPlayerFavourites(Text.toCSV(newPlayerList));
			resetUpdateState();
		};
	}

	private void processHouseAdvertisements()
	{
		clientThread.invoke(() ->
		{
			resetWidgetHighlights();

			final HouseAdvertisementMapper mapper = new HouseAdvertisementMapper(client, favouritePlayers, blacklistPlayers);
			adverts = mapper.GetHouseAdvertisements();

			if (adverts == null || adverts.size() == 0)
				return;

			List<HouseAdvertisement> ads = new ArrayList<>(adverts.values());

			refreshAdvertState(ads);

			if (config.useBlacklist())
			{
				applyBlacklist(adverts);
			}

			if (config.useFilters())
			{
				applyFilters(ads);
			}

			if (config.useFavourites())
			{
				if (config.pinFavourites())
				{
					moveFavouritesToTop(ads);
				}

				if (config.highlightEnterButton() || config.highlightAdvertText())
				{
					highlightFavourites(ads);
				}
			}

			moveInvisibleToBottom(ads);
			shouldRenderBoard = true;
		});

		clientThread.invokeLater(() -> {
			refreshVisibility();
		});
	}

	private void resetAll()
	{
		if (adverts != null)
		{
			refreshAdvertState(adverts.values());
		}

		shouldRenderBoard = true;
		refreshVisibility();
		resetWidgetHighlights();
		resetUpdateState();
	}

	private void resetUpdateState()
	{
		requiresUpdate = true;
		shouldRenderBoard = false;
		shouldRenderHighlights = false;
	}

	private void refreshAdvertState(Collection<HouseAdvertisement> ads)
	{
		for (HouseAdvertisement advert : ads)
		{
			if (advert == null)
				continue;

			advert.setIsVisible(true);
		}
	}

	private void refreshVisibility()
	{
		container = client.getWidget(AdvertID.WIDGET_GROUP_ID, AdvertID.WIDGET_CONTAINER_ID);
		if (container == null)
			return;

		container.setType(shouldRenderBoard ? WidgetType.LAYER : -1);

		shouldRenderHighlights = shouldRenderBoard;
	}

	private void resetWidgetHighlights()
	{
		for (WidgetTarget wt : textToHighlight)
		{
			final Widget w = wt.getWidget();
			w.setTextColor(defaultTextColours.get(wt.getKey()));
		}

		widgetsToHighlight.clear();
		textToHighlight.clear();
	}

	private void applyBlacklist(HashMap<String, HouseAdvertisement> ads)
	{
		for (String playerName : ads.keySet())
		{
			final HouseAdvertisement advert = ads.get(playerName);
			if (!advert.isBlacklisted())
				continue;

			advert.setIsVisible(false);
		}
	}


	private void applyFilters(List<HouseAdvertisement> ads)
	{
		for (HouseAdvertisement advert : ads)
		{
			if (passesFilter(advert))
				continue;

			advert.setIsVisible(false);
		}
	}


	private boolean passesFilter(HouseAdvertisement advert)
	{
		return (
			advert.getConstructionLvl() >= config.minConstructionLvl() &&
			AdvertUtil.yesNoPasses(config.hasGuildedAltar(), advert.isHasGuildedAlter()) &&
			advert.getNexusLvl() >= config.minNexusLvl() &&
			advert.getJewelleryLvl() >= config.minJewelleryLvl() &&
			advert.getPoolLvl() >= config.minPoolLvl() &&
			advert.getSpellAltarLvl() >= config.minSpellAltarLvl() &&
			AdvertUtil.yesNoPasses(config.hasArmourStand(), advert.isHasArmourStand())
		);
	}


	private void moveInvisibleToBottom(List<HouseAdvertisement> ads)
	{
		ads.sort(Comparator.comparing(a -> !a.isVisible()));
		revalidateRowOrder(ads);
	}

	private void moveFavouritesToTop(List<HouseAdvertisement> ads)
	{
		ads.sort(Comparator.comparing(a -> -a.getFavouritePriority()));
		revalidateRowOrder(ads);
	}

	private void revalidateRowOrder(List<HouseAdvertisement> adverts)
	{
		for (int i = 0; i < adverts.size(); i++)
		{
			HouseAdvertisement advert = adverts.get(i);
			advert.setRow(i);
		}
	}

	private void highlightFavourites(List<HouseAdvertisement> adverts)
	{
		for (HouseAdvertisement advert : adverts)
		{
			if (!advert.isFavourite() || !advert.isVisible())
				continue;

			if (config.highlightEnterButton())
			{
				Widget enterArrow = advert.getWidget(AdvertID.KEY_ENTER);
				if (enterArrow != null)
				{
					widgetsToHighlight.add(new WidgetTarget(AdvertID.KEY_ENTER, enterArrow));
				}
			}

			if (config.highlightAdvertText())
			{
				for (String key : advert.getAdvertWidgets().keySet())
				{
					if (key == AdvertID.KEY_ENTER)
						continue;

					final Widget w = advert.getWidget(key);
					textToHighlight.add(new WidgetTarget(key, w));

					if (!defaultTextColours.containsKey(key))
					{
						defaultTextColours.put(key, w.getTextColor());
					}
				}
			}
		}
	}

	private boolean isHouseAdvertWidgetVisible()
	{
		final Widget titleParent = client.getWidget(AdvertID.WIDGET_GROUP_ID, AdvertID.WIDGET_TITLE_PARENT_INDEX);
		final Widget title = titleParent != null ?  titleParent.getChild(AdvertID.WIDGET_TITLE_INDEX) : null;
		final String titleText = title != null ? title.getText() : null;
		return (titleText != null && titleText.equals(AdvertID.TITLE));
	}

	public void renderHighlights(Graphics2D g)
	{
		if (!advertBoardVisible || !shouldRenderHighlights)
			return;

		final Color highlightColor = config.highlightColor();
		for (WidgetTarget wt : widgetsToHighlight)
		{
			Rectangle bounds = wt.getWidget().getBounds();

			final int adjustedWidth = bounds.width - (bounds.width / 20);
			final RoundRectangle2D rounded = new RoundRectangle2D.Double(bounds.x, bounds.y, adjustedWidth, bounds.height, bounds.width / 5, bounds.width / 5);
			final Area roundedArea = new Area(rounded);

			if (container != null)
			{
				final Area containerArea = new Area(container.getBounds());
				roundedArea.intersect(containerArea);
			}

			g.setColor(highlightColor);
			g.draw(roundedArea);
		}

		for (WidgetTarget wt : textToHighlight)
		{
			wt.getWidget().setTextColor(highlightColor.getRGB());
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged)
	{
		if (!configChanged.getGroup().equals(HouseAdvertisementPlusPlugin.ConfigGroup))
		{
			return;
		}

		favouritePlayers = AdvertUtil.normalizeNames(Text.fromCSV(config.getPlayerFavourites()));
		blacklistPlayers = AdvertUtil.normalizeNames(Text.fromCSV(config.getPlayerBlacklist()));
		resetUpdateState();
	}

	@Provides
	HouseAdvertisementPlusConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(HouseAdvertisementPlusConfig.class);
	}

}

package com.salverrs.HouseAdvertisementPlus;

import com.salverrs.HouseAdvertisementPlus.Filters.YesNoFilter;
import net.runelite.api.widgets.Widget;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class AdvertUtil {

    public static boolean namesEqual(String a, String b)
    {
        String nameA = normalizeName(a);
        String nameB = normalizeName(b);
        return nameA.equals(nameB);
    }

    public static String normalizeName(String name)
    {
        return name.replaceAll("\u00a0"," ").toLowerCase().trim();
    }

    public static List<String> normalizeNames(List<String> names)
    {
        ArrayList<String> normalized = new ArrayList();
        names.forEach(n -> normalized.add(normalizeName(n)));
        return normalized;
    }

    public static String getPlayerFromOpArg(Widget widget, int argIndex)
    {
        Object[] args = widget.getOnOpListener();

        if (args == null || args.length < argIndex + 1)
            return null;

        if (args[argIndex].getClass() != String.class)
            return null;

        return (String)args[argIndex];
    }

    public static boolean yesNoPasses(YesNoFilter filter, boolean actual)
    {
        final int fVal = filter == YesNoFilter.Y ? 1 : 0;
        final int actualVal = actual ? 1 : 0;
        return actualVal >= fVal;
    }

}

package com.salverrs.HouseAdvertisementPlus;

import lombok.Getter;
import lombok.Setter;
import net.runelite.api.widgets.Widget;

@Getter
@Setter
public class WidgetTarget {
    private Widget widget;
    private String key;

    public WidgetTarget(String key, Widget widget)
    {
        this.widget = widget;
        this.key = key;
    }
}

package com.salverrs.HouseAdvertisementPlus.Filters;

public class NumericFilters {
    public static final int ALL_FILTER_MIN = 0;
    public static final int CONSTRUCTION_LEVEL_MAX = 99;
    public static final int NEXUS_MAX_TIER = 3;
    public static final int JEWELLERY_MAX_TIER = 3;
    public static final int POOL_MAX_TIER = 5;
    public static final int SPELL_ALTAR_MAX_TIER = 4;
}

package com.salverrs.HouseAdvertisementPlus.Filters;

public enum YesNoFilter {
    Y,
    N
}

package com.salverrs.HouseAdvertisementPlus;

import lombok.Getter;
import lombok.Setter;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetID;

import java.util.HashMap;

@Getter
@Setter
public class HouseAdvertisement {

    private int originalYOffset;
    private int rowIndex;
    private int favouritePriority;
    private String playerName;
    private String location;
    private int constructionLvl;
    private boolean hasGuildedAlter;
    private int nexusLvl;
    private int jewelleryLvl;
    private int poolLvl;
    private int spellAltarLvl;
    private boolean hasArmourStand;
    private boolean isFavourite;
    private boolean isBlacklisted;
    private boolean isAnotherLocation;
    private boolean isVisible;
    private HashMap<String, Widget> advertWidgets;

    public HouseAdvertisement(String playerName, int yOffset) {
        this.playerName = playerName;
        this.advertWidgets = new HashMap<String, Widget>();
        isAnotherLocation = true;
    }

    public void addWidget(String key, Widget w)
    {
        advertWidgets.put(key, w);
    }

    public Widget getWidget(String key)
    {
        return advertWidgets.get(key);
    }

    public void setIsVisible(boolean visible)
    {
        isVisible = visible;
        for (Widget w : advertWidgets.values())
        {
            w.setOpacity(visible ? 0 : 255);
            w.setFontId(visible ? AdvertID.ADVERT_DEFAULT_FONT_ID : -1);
        }
    }

    public void setRow(int targetRowIndex)
    {
        for (String widgetKey : advertWidgets.keySet())
        {
            final Widget widget = advertWidgets.get(widgetKey);
            final int height = widget.getHeight();
            final int relativeY = widget.getRelativeY();

            if (widgetKey == AdvertID.KEY_ENTER)
            {
                final int numPadding = (rowIndex * 2 + 1);
                final int paddingHeight = (relativeY - (height * rowIndex)) / numPadding;
                final int targetNumPadding = (targetRowIndex * 2 + 1);
                final int targetYOffset = targetRowIndex * height + (targetNumPadding * paddingHeight);
                widget.setOriginalY(targetYOffset);
            }
            else
            {
                final int targetYOffset = targetRowIndex * widget.getHeight();
                widget.setOriginalY(targetYOffset);
            }

            widget.revalidate();
        }

        rowIndex = targetRowIndex;
    }

}

