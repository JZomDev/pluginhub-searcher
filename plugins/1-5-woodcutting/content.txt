package com.patchtimer;

import com.google.inject.Inject;
import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;

public class TimerOverlay extends Overlay{
    private final PatchTimerPlugin plugin;
    private final PatchTimerConfig config;
    private final Client client;

    @Inject
    TimerOverlay(PatchTimerPlugin plugin, PatchTimerConfig config, Client client ){
    setPosition(OverlayPosition.DYNAMIC);
    setLayer(OverlayLayer.ABOVE_SCENE);
    this.plugin = plugin;
    this.config = config;
    this.client = client;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        final int backgroundSize = this.config.getBackgroundSize();
        final Color colorBackground = this.config.getBackgroundColor();
        final Color colorText = this.config.getTextColor();
        final Color tick_early_color = this.config.getTick_early_color();
        final Color tick_perfect_color = this.config.getTick_perfect_color();
        final Color tick_late_color = this.config.getTick_late_color();

        this.plugin.getTreeTimerList().forEach(TreeTimer -> {
            final String text = TreeTimer.getTicksLeftDisplay();
            final LocalPoint localPoint = LocalPoint.fromWorld(this.client, TreeTimer.getLocation());
            if (localPoint != null){
                final Color color;
                final int counter = TreeTimer.getTicksLeft();

                if (counter == 3)
                {
                    color = tick_early_color;
                }
                else if (counter == 2)
                {
                    color = tick_perfect_color;
                }
                else if (counter == 1)
                {
                    color = tick_late_color;
                }
                else {
                    color = colorText;
                }

                final Point point = Perspective.getCanvasTextLocation(this.client, graphics, localPoint, text, 0);
                Rectangle2D textBounds = graphics.getFontMetrics().getStringBounds(text, graphics);
                this.drawTextBackground(graphics, point, colorBackground, textBounds, backgroundSize);
                this.drawText(graphics, point, color, text);
            }

        });
        return null;
    }
    private void drawTextBackground(Graphics2D graphics, Point point, Color color, Rectangle2D textBounds, int size) {
        graphics.setColor(color);

        final int x = (int) (point.getX() - ((double) size / 2) + (textBounds.getWidth() / 2));
        final int y = (int) (point.getY() - ((double) size / 2) - (textBounds.getHeight() / 2));

        graphics.fillRect(x, y, size, size);
    }
    private void drawText(Graphics2D graphics, Point point, Color color, String text) {
        final int x = point.getX();
        final int y = point.getY();
        graphics.setColor(color);
        graphics.drawString(text, x, y);
    }
}
package com.patchtimer;

import lombok.Getter;
import net.runelite.api.coords.WorldPoint;


@Getter
public class TreeTimer{
    private final WorldPoint location;
    private String ticksLeftDisplay;
    private int ticksLeft;

    TreeTimer(WorldPoint location, int respawnTime) {
        this.ticksLeft = respawnTime;
        this.ticksLeftDisplay = "" + this.ticksLeft;
        this.location = location;
    }

    public void decrement() {
        this.ticksLeftDisplay = "" + --this.ticksLeft;
    }
}

package com.patchtimer;

import net.runelite.client.config.*;
import java.awt.*;

@ConfigGroup("patchtimer")
public interface PatchTimerConfig extends Config {
	@ConfigSection(
		name = "Timer Settings",
		description = "",
		position = 100
	)
	String timerSettings = "timersettings";

	@Alpha

	@ConfigItem(
			keyName = "backgroundSize",
			name = "Background Size",
			description = "How large the timer background should be",
			position = 0,
			section = timerSettings
	)
	default int getBackgroundSize() {
		return 16;
	}

	@ConfigItem(
			keyName = "backgroundColor",
			name = "Background Color",
			description = "The color the timer background should be",
			position = 1,
			section = timerSettings
	)
	default Color getBackgroundColor() {
		return new Color(0,0,0,167);
	}

	@ConfigItem(
			keyName = "textColor",
			name = "Text Color",
			description = "The color the timer text should be",
			position = 3,
			section = timerSettings
	)
	default Color getTextColor() {
		return new Color(255,255,255,255);
	}

	@ConfigItem(
			keyName = "tick_early_color",
			name = "Early Tick Color",
			description = "The color to be 1t early to chop on tree respawn",
			position = 4,
			section = timerSettings
	)
	default Color getTick_early_color() {
		return new Color(255, 0, 0,255);
	}
	@ConfigItem(
			keyName = "tick_perfect_color",
			name = "Perfect Tick Color",
			description = "The color to be tick perfect to chop on tree respawn",
			position = 5,
			section = timerSettings
	)
	default Color getTick_perfect_color() {
		return new Color(64, 255, 0,255);
	}
	@ConfigItem(
			keyName = "tick_late_color",
			name = "Late Tick Color",
			description = "The color to be 1 tick late to chop on tree respawn",
			position = 6,
			section = timerSettings
	)
	default Color getTick_late_color() {
		return new Color(255, 239, 0,255);
	}
	@Alpha
	@ConfigItem(
			keyName = "assumeTick",
			name = "Assume Respawn tick",
			description = "If the timer should assume that the tree will respawn 1 tick sooner on single log roll",
			position = 101
	)
	default boolean getAssumeTick(){
		return false;
	}
}

package com.patchtimer;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.VarbitChanged;
import net.runelite.api.events.StatChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import java.util.LinkedList;
import java.util.List;

@Slf4j
@PluginDescriptor(
	name = "1.5 Woodcutting"
)

public class PatchTimerPlugin extends Plugin
{
	static final int LEFT_TREE = 4771;
	static final int MIDDLE_TREE = 4772;
	static final int RIGHT_TREE = 4773;
	static final int TEAK_STUMP = 17;
	static final int MAHOGANY_STUMP = 40;

	static final int TEAK_XP = 85;
	static final int MAHOGANY_XP = 125;

	static final int TEAK_RESPAWN = 18;
	static final int MAHOGANY_RESPAWN = 41;

	@Getter
	private final List<TreeTimer> treeTimerList = new LinkedList<>();

	private int lastWoodcuttingXp = 0;
	private boolean treeFell = false;

	@Inject
	private Client client;

	@Inject
	private PatchTimerConfig config;

	@Inject
	private TimerOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
		this.treeTimerList.clear();
	}
	private int lastFallenTreeId = -1;

	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		if ((event.getVarbitId() == LEFT_TREE || event.getVarbitId() == MIDDLE_TREE || event.getVarbitId() == RIGHT_TREE)
				&& (event.getValue() == TEAK_STUMP || event.getValue() == MAHOGANY_STUMP)){
			treeFell = true;
			lastFallenTreeId= event.getVarbitId();
			log.debug("Tree Fell: ID = " + lastFallenTreeId);
		}
	}
	@Subscribe
	public void onStatChanged(StatChanged statChanged) {
		if (statChanged.getSkill() != Skill.WOODCUTTING) {
			return;
		}
		int woodcuttingXp = statChanged.getXp();
		int skillGained = woodcuttingXp - lastWoodcuttingXp;
		lastWoodcuttingXp = woodcuttingXp;

		if (treeFell && lastFallenTreeId != -1)
		{
			int teakRespawn = config.getAssumeTick() ? TEAK_RESPAWN -1 : TEAK_RESPAWN;
			int mahoganyRespawn = config.getAssumeTick() ? MAHOGANY_RESPAWN -1 : MAHOGANY_RESPAWN;

			if (isInRange(skillGained, TEAK_XP)) {
				log.debug("Single Teak log");
				addTreeTimer(lastFallenTreeId, teakRespawn);
			}
			else if (isInRange(skillGained, MAHOGANY_XP)) {
				log.debug("Single Mahogany log");
				addTreeTimer(lastFallenTreeId, mahoganyRespawn);
			}
		else if (isInRange(skillGained, TEAK_XP * 2)) {
		log.debug("Double Teak log");
		addTreeTimer(lastFallenTreeId, TEAK_RESPAWN);
		}

		else if (isInRange(skillGained, MAHOGANY_XP * 2)) {
		log.debug("Double Mahogany log");
		addTreeTimer(lastFallenTreeId, MAHOGANY_RESPAWN);
			}
			treeFell = false;
			lastFallenTreeId = -1;
		}
	}
private void addTreeTimer(int treeId, int respawnDuration)
{
	WorldPoint treeLocation = getTreeLocation(treeId);
	if (treeLocation != null)
	{
		treeTimerList.add(new TreeTimer(treeLocation, respawnDuration));
		log.debug("Added TreeTimer for Tree ID " + treeId + " at " + treeLocation + " with respawn duration " + respawnDuration);
	}
	else
	{
		log.warn("Tree ID " + treeId + " does not have a mapped location!");
	}
}

private WorldPoint getTreeLocation(int treeId)
{
	switch (treeId)
	{
		case LEFT_TREE:
			return new WorldPoint(3715, 3835, 0);
		case MIDDLE_TREE:
			return new WorldPoint(3708, 3833, 0);
		case RIGHT_TREE:
			return new WorldPoint(3702, 3837, 0);
		default:
			return null;
	}
}
	@Subscribe
	public void onGameTick(GameTick event){
			this.treeTimerList.removeIf(TreeTimer -> {
				TreeTimer.decrement();
				return TreeTimer.getTicksLeft() < 0;
			});
	}
private boolean isInRange(int value, int base)
{
	return value >= base && value <= base * 1.13;
}
	@Provides
	PatchTimerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(PatchTimerConfig.class);
	}
}

package com.patchtimer;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PatchTimerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PatchTimerPlugin.class);
		RuneLite.main(args);
	}
}
