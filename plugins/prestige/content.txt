package com.prestige;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PrestigePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PrestigePlugin.class);
		RuneLite.main(args);
	}
}
package com.prestige;

import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.api.Skill;
import net.runelite.api.SpriteID;

@Getter
@AllArgsConstructor
enum SkillData {
    ATTACK(Skill.ATTACK, SpriteID.SKILL_ATTACK),
    STRENGTH(Skill.STRENGTH, SpriteID.SKILL_STRENGTH),
    DEFENCE(Skill.DEFENCE, SpriteID.SKILL_DEFENCE),
    RANGED(Skill.RANGED, SpriteID.SKILL_RANGED),
    PRAYER(Skill.PRAYER, SpriteID.SKILL_PRAYER),
    MAGIC(Skill.MAGIC, SpriteID.SKILL_MAGIC),
    RUNECRAFT(Skill.RUNECRAFT, SpriteID.SKILL_RUNECRAFT),
    CONSTRUCTION(Skill.CONSTRUCTION, SpriteID.SKILL_CONSTRUCTION),
    HITPOINTS(Skill.HITPOINTS, SpriteID.SKILL_HITPOINTS),
    AGILITY(Skill.AGILITY, SpriteID.SKILL_AGILITY),
    HERBLORE(Skill.HERBLORE, SpriteID.SKILL_HERBLORE),
    THIEVING(Skill.THIEVING, SpriteID.SKILL_THIEVING),
    CRAFTING(Skill.CRAFTING, SpriteID.SKILL_CRAFTING),
    FLETCHING(Skill.FLETCHING, SpriteID.SKILL_FLETCHING),
    SLAYER(Skill.SLAYER, SpriteID.SKILL_SLAYER),
    HUNTER(Skill.HUNTER, SpriteID.SKILL_HUNTER),
    MINING(Skill.MINING, SpriteID.SKILL_MINING),
    SMITHING(Skill.SMITHING, SpriteID.SKILL_SMITHING),
    FISHING(Skill.FISHING, SpriteID.SKILL_FISHING),
    COOKING(Skill.COOKING, SpriteID.SKILL_COOKING),
    FIREMAKING(Skill.FIREMAKING, SpriteID.SKILL_FIREMAKING),
    WOODCUTTING(Skill.WOODCUTTING, SpriteID.SKILL_WOODCUTTING),
    FARMING(Skill.FARMING, SpriteID.SKILL_FARMING);

    private final Skill skill;
    private final int sprite;

    static SkillData get(int sprite) {
        for (SkillData skill : values()) {
            if (skill.sprite == sprite) {
                return skill;
            }
        }

        return null;
    }
}

package com.prestige;

import javax.inject.Inject;

import com.google.inject.Provides;
import com.prestige.levelUp.LevelUpDisplayInput;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ScriptCallbackEvent;
import net.runelite.api.events.ScriptPreFired;
import net.runelite.api.events.StatChanged;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.chatbox.ChatboxPanelManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import org.apache.commons.lang3.StringUtils;

import java.util.*;
import java.util.stream.Collectors;

import static net.runelite.api.ScriptID.XPDROPS_SETDROPSIZE;

@Slf4j
@PluginDescriptor(
        name = "Prestige",
        description = "Resets xp to 0 and doubles xp rate between levels 92 and 99",
        tags = {"levelling", "reset", "99", "92"}
)
public class PrestigePlugin extends Plugin {
    private static final String TOTAL_LEVEL_TEXT_PREFIX = "Total level:<br>";
    private int xpFactor = 2;
    private int maxXp = Experience.getXpForLevel(99);
    private int prestigeXP = maxXp - (maxXp / xpFactor);
    private static final List<Skill> COMBAT_SKILLS = Arrays.asList(Skill.ATTACK, Skill.DEFENCE, Skill.STRENGTH, Skill.MAGIC, Skill.RANGED);
    private static final Map<Skill, Integer> ACTUAL_SKILL_XP = new HashMap<>();
    private static final Map<Skill, Integer> ACTUAL_SKILL_BOOST = new HashMap<>();

    @Inject
    @Getter(AccessLevel.PUBLIC)
    private Client client;
    @Inject
    @Getter(AccessLevel.PUBLIC)
    private ClientThread clientThread;
    @Inject
    @Getter(AccessLevel.PUBLIC)
    private ChatboxPanelManager chatboxPanelManager;
    @Inject
    @Getter(AccessLevel.PUBLIC)
    private ChatMessageManager chatMessageManager;
    @Inject
    private PrestigeConfig config;
    private LevelUpDisplayInput input;

    @Provides
    PrestigeConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(PrestigeConfig.class);
    }

    private final Map<Skill, Integer> updatedSkills = new HashMap<>();
    private final List<Skill> levelledSkills = new ArrayList<>();

    @Subscribe
    public void onGameTick(GameTick event) {
        if (input != null) {
            input.closeIfTriggered();
        }

        if (levelledSkills.isEmpty() || !chatboxPanelManager.getContainerWidget().isHidden()) {
            return;
        }

        final Skill skill = levelledSkills.remove(0);

        int xp = client.getSkillExperience(skill);

        // Reset the skill
        // Set xp rate to the xp modifier
        if (isPrestiged(xp)) {
            xp = prestigeXP(xp);
        }

        input = new LevelUpDisplayInput(this, skill, Experience.getLevelForXp(xp));
        chatboxPanelManager.openInput(input);
    }

    @Override
    protected void shutDown() {
        this.resetSkills();
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged configChanged) {
        if (!configChanged.getGroup().equals("prestige")) {
            return;
        }

        this.calculatePrestigeRange();
        this.resetSkills();
        this.updateAllStats();
    }

    @Subscribe
    public void onScriptCallbackEvent(ScriptCallbackEvent e) {
        final String[] stringStack = client.getStringStack();
        final int stringStackSize = client.getStringStackSize();

        switch (e.getEventName()) {
            case "skillTabTotalLevel":
                int level = 0;

                for (Skill s : Skill.values()) {
                    if (s == Skill.OVERALL) {
                        continue;
                    }

                    level += Experience.getLevelForXp(client.getSkillExperience(s));
                }

                stringStack[stringStackSize - 1] = TOTAL_LEVEL_TEXT_PREFIX + level;
                break;
        }
    }

    @Override
    protected void startUp() {
        for (Skill skill : Skill.values()) {
            if (skill != Skill.OVERALL) {
                ACTUAL_SKILL_XP.put(skill, client.getSkillExperience(skill));
                ACTUAL_SKILL_BOOST.put(skill, client.getBoostedSkillLevel(skill));
            }
        }

        this.calculatePrestigeRange();

        this.updateAllStats();
    }

    private void updateAllStats() {
        for (Skill skill : Skill.values()) {
            if (skill != Skill.OVERALL) {
                changeStat(skill, client.getRealSkillLevel(skill), ACTUAL_SKILL_BOOST.get(skill), true);
                client.queueChangedSkill(skill);
            }
        }
    }

    @Subscribe
    public void onStatChanged(StatChanged statChanged) {
        this.changeStat(statChanged.getSkill(), statChanged.getLevel(), statChanged.getBoostedLevel(), false);
    }

    private void resetSkills() {
        for (Skill skill : Skill.values()) {
            if (skill != Skill.OVERALL) {
                int xp = ACTUAL_SKILL_XP.get(skill);

                client.getRealSkillLevels()[skill.ordinal()] = Experience.getLevelForXp(xp);
                client.getSkillExperiences()[skill.ordinal()] = xp;
                client.getBoostedSkillLevels()[skill.ordinal()] = ACTUAL_SKILL_BOOST.get(skill);

                client.queueChangedSkill(skill);
            }
        }
    }

    private void changeStat(Skill skill, int level, int boostedLevel, boolean ignoreLevels) {
        int xp = client.getSkillExperience(skill);

        ACTUAL_SKILL_XP.put(skill, xp);
        ACTUAL_SKILL_BOOST.put(skill, boostedLevel);

        if (COMBAT_SKILLS.contains(skill)) {
            // Player doesn't want to show prestige for combat skills
            if (!config.enableCombat()) {
                return;
            }
        } else if (Skill.HITPOINTS == skill) {
            // Player doesn't want to show prestige for HP
            if (!config.enableHP()) {
                return;
            }
        } else if (Skill.PRAYER == skill) {
            // Player doesn't want to show prestige for Prayer
            if (!config.enablePrayer()) {
                return;
            }
        } else {
            // Player doesn't want to show prestige for non-combat skills
            if (!config.enableNonCombat()) {
                return;
            }
        }

        // Reset the skill
        // Set xp rate to the xp modifier
        if (isPrestiged(xp)) {
            if (!config.showRealLevels() || isPrestigeLevelCloser(xp)) {
                int prestigeXp = prestigeXP(xp);
                int newLevel = Experience.getLevelForXp(prestigeXp);
                int boostDiff = boostedLevel - Experience.getLevelForXp(ACTUAL_SKILL_XP.get(skill));

                // Set the prestige level and xp
                client.getRealSkillLevels()[skill.ordinal()] = newLevel;
                client.getSkillExperiences()[skill.ordinal()] = prestigeXp;
                client.getBoostedSkillLevels()[skill.ordinal()] = newLevel + boostDiff;

                int oldLevel = updatedSkills.get(skill) != null ? updatedSkills.get(skill) : level;

                if (!ignoreLevels && oldLevel < newLevel) {
                    levelledSkills.add(skill);
                }

                updatedSkills.put(skill, newLevel);
            }
        }
    }

    // Determines if the player's level is between 92 and 99, and is therefore prestiged
    private boolean isPrestiged(int xp) {
        return xp > prestigeXP && xp < maxXp;
    }

    // Determines if the player's real skill level is closer to levelling up than their prestige level
    private boolean isPrestigeLevelCloser(int xp) {
        int prestigeXp = prestigeXP(xp);
        int level = Experience.getLevelForXp(xp);
        int remaining = Experience.getXpForLevel(level + 1) - xp;
        int prestigeRemaining = Experience.getXpForLevel(Experience.getLevelForXp(prestigeXp) + 1) - prestigeXp;

        return (prestigeRemaining / xpFactor) < remaining;
    }

    private int prestigeXP(int xp) {
        return (xp - prestigeXP) * xpFactor;
    }

    private void calculatePrestigeRange() {
        xpFactor = config.xpFactor();
        maxXp = Experience.getXpForLevel(config.goalLevel());
        prestigeXP = maxXp - (maxXp / xpFactor);
    }
}

/*
 * Copyright (c) 2020, Jordan <nightfirecat@protonmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.prestige.levelUp;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.List;

import com.prestige.PrestigePlugin;
import com.prestige.model.SkillModel;
import lombok.Getter;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Experience;
import net.runelite.api.FontID;
import net.runelite.api.Player;
import net.runelite.api.Skill;
import net.runelite.api.widgets.JavaScriptCallback;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.api.widgets.WidgetPositionMode;
import net.runelite.api.widgets.WidgetSizeMode;
import net.runelite.api.widgets.WidgetTextAlignment;
import net.runelite.api.widgets.WidgetType;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.game.chatbox.ChatboxInput;
import net.runelite.client.input.KeyListener;

public class LevelUpDisplayInput extends ChatboxInput implements KeyListener
{
    private static final int X_OFFSET = 13;
    private static final int Y_OFFSET = 16;

    private final PrestigePlugin plugin;
    private final Skill skill;
    private final int level;

    @Getter
    private boolean closeMessage;

    public LevelUpDisplayInput(PrestigePlugin plugin, Skill skill, int level) {
        this.plugin = plugin;
        this.skill = skill;
        this.level = level;
    }

    @Override
    public void open() {
        final Widget chatboxContainer = plugin.getChatboxPanelManager().getContainerWidget();

        final String skillName = skill.getName();
        final int skillExperience = plugin.getClient().getSkillExperience(skill);
        final List<SkillModel> skillModels = SkillModel.getSKILL_MODELS(skill);
        final String prefix = (skill == Skill.AGILITY || skill == Skill.ATTACK) ? "an " : "a ";

        final Widget levelUpHeader = chatboxContainer.createChild(-1, WidgetType.TEXT);
        final Widget levelUpText = chatboxContainer.createChild(-1, WidgetType.TEXT);
        final Widget levelUpContinue = chatboxContainer.createChild(-1, WidgetType.TEXT);

        final String levelUpMessage;
        if (skillExperience >= Experience.MAX_SKILL_XP) {
            plugin.getClientThread().invoke(() -> this.setFireworksGraphic(LevelUpFireworks.NINETY_NINE));
            levelUpMessage = "Congratulations, you just maxed your " + skillName + " skill.";
        } else {
            plugin.getClientThread().invoke(() -> this.setFireworksGraphic(LevelUpFireworks.NORMAL));
            levelUpMessage = "Congratulations, you just advanced " + prefix + skillName + " prestige level.";
        }
        levelUpHeader.setText(levelUpMessage);
        levelUpHeader.setTextColor(Color.BLUE.getRGB());
        levelUpHeader.setFontId(FontID.QUILL_8);
        levelUpHeader.setXPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
        levelUpHeader.setOriginalX(73 + X_OFFSET);
        levelUpHeader.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
        levelUpHeader.setOriginalY(15 + Y_OFFSET);
        levelUpHeader.setOriginalWidth(390);
        levelUpHeader.setOriginalHeight(30);
        levelUpHeader.setXTextAlignment(WidgetTextAlignment.CENTER);
        levelUpHeader.setYTextAlignment(WidgetTextAlignment.LEFT);
        levelUpHeader.setWidthMode(WidgetSizeMode.ABSOLUTE);
        levelUpHeader.revalidate();

        final String levelUpTextMessage;
        if (skillExperience == Experience.MAX_SKILL_XP) {
            levelUpTextMessage = "You have reached maximum experience in " + skillName;
        } else {
            levelUpTextMessage = (skill == Skill.HITPOINTS
                    ? "Your Hitpoints prestige is now " + level
                    : "Your " + skillName + " prestige level is now " + level)
                    + '.';
        }
        levelUpText.setText(levelUpTextMessage);
        levelUpText.setFontId(FontID.QUILL_8);
        levelUpText.setXPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
        levelUpText.setOriginalX(73 + X_OFFSET);
        levelUpText.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
        levelUpText.setOriginalY(44 + Y_OFFSET);
        levelUpText.setOriginalWidth(390);
        levelUpText.setOriginalHeight(30);
        levelUpText.setXTextAlignment(WidgetTextAlignment.CENTER);
        levelUpText.setYTextAlignment(WidgetTextAlignment.LEFT);
        levelUpText.setWidthMode(WidgetSizeMode.ABSOLUTE);
        levelUpText.revalidate();

        levelUpContinue.setText("Click here to continue");
        levelUpContinue.setTextColor(Color.BLUE.getRGB());
        levelUpContinue.setFontId(FontID.QUILL_8);
        levelUpContinue.setXPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
        levelUpContinue.setOriginalX(73 + X_OFFSET);
        levelUpContinue.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
        levelUpContinue.setOriginalY(74 + Y_OFFSET);
        levelUpContinue.setOriginalWidth(390);
        levelUpContinue.setOriginalHeight(17);
        levelUpContinue.setXTextAlignment(WidgetTextAlignment.CENTER);
        levelUpContinue.setYTextAlignment(WidgetTextAlignment.LEFT);
        levelUpContinue.setWidthMode(WidgetSizeMode.ABSOLUTE);
        levelUpContinue.setAction(0, "Continue");
        levelUpContinue.setOnOpListener((JavaScriptCallback) ev -> triggerCloseViaMessage());
        levelUpContinue.setOnMouseOverListener((JavaScriptCallback) ev -> levelUpContinue.setTextColor(Color.WHITE.getRGB()));
        levelUpContinue.setOnMouseLeaveListener((JavaScriptCallback) ev -> levelUpContinue.setTextColor(Color.BLUE.getRGB()));
        levelUpContinue.setHasListener(true);
        levelUpContinue.revalidate();

        for (SkillModel skillModel : skillModels) {
            buildWidgetModel(chatboxContainer, skillModel);
        }

        plugin.getChatMessageManager().queue(QueuedMessage.builder()
                .type(ChatMessageType.GAMEMESSAGE)
                .runeLiteFormattedMessage(skillExperience == Experience.MAX_SKILL_XP
                        ? "Congratulations, you've just reached max experience in " + skillName + '!'
                        : "Congratulations, you've just advanced your " + skillName + " prestige level. You are now prestige level " + level + '.')
                .build());
    }

    @Override
    public void keyTyped(KeyEvent e) {
        if (e.getKeyChar() != ' ') {
            return;
        }

        triggerCloseViaMessage();

        e.consume();
    }

    @Override
    public void keyPressed(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
    }

    public void closeIfTriggered() {
        if (closeMessage && plugin.getChatboxPanelManager().getCurrentInput() == this) {
            plugin.getChatboxPanelManager().close();
        }
    }

    void triggerClose() {
        closeMessage = true;
    }

    private void triggerCloseViaMessage() {
        final Widget levelUpContinue = plugin.getClient().getWidget(WidgetInfo.CHATBOX_CONTAINER).getChild(2);
        levelUpContinue.setText("Please wait...");

        closeMessage = true;
    }

    private static void buildWidgetModel(Widget chatboxContainer, SkillModel model) {
        final Widget levelUpModel = chatboxContainer.createChild(-1, WidgetType.MODEL);

        levelUpModel.setModelId(model.getModelId());
        levelUpModel.setXPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
        levelUpModel.setOriginalX(model.getOriginalX() + X_OFFSET);
        levelUpModel.setYPositionMode(WidgetPositionMode.ABSOLUTE_TOP);
        levelUpModel.setOriginalY(model.getOriginalY() + Y_OFFSET);
        levelUpModel.setOriginalWidth(model.getIconWidth());
        levelUpModel.setOriginalHeight(model.getIconHeight());
        levelUpModel.setRotationX(model.getRotationX());
        levelUpModel.setRotationY(model.getRotationY());
        levelUpModel.setRotationZ(model.getRotationZ());
        levelUpModel.setModelZoom(model.getModelZoom());
        levelUpModel.revalidate();
    }

    private void setFireworksGraphic(LevelUpFireworks firework) {
        final Player localPlayer = plugin.getClient().getLocalPlayer();
        if (localPlayer == null) {
            return;
        }

        final int fireworksGraphic = firework.getGraphicId();

        if (fireworksGraphic == -1) {
            return;
        }

        localPlayer.setGraphic(fireworksGraphic);
        localPlayer.setSpotAnimFrame(0);
    }
}

/*
 * Copyright (c) 2020, Jordan <nightfirecat@protonmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.prestige.levelUp;

import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
@Getter
public enum LevelUpFireworks {
    NONE("None", -1),
    NORMAL("Normal", 199),
    NINETY_NINE("99", 1388),
    MAX_TOTAL("Max total", 1389);

    private final String name;
    private final int graphicId;

    @Override
    public String toString() {
        return getName();
    }
}

package com.prestige;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;

@ConfigGroup("prestige")
public interface PrestigeConfig extends Config {
    @ConfigItem(
            keyName = "showRealLevels",
            name = "Show real levels",
            description = "When enabled, your real level will display if it's closer to levelling-up than your prestige level",
            position = 1
    )
    default boolean showRealLevels() {
        return false;
    }

    @Range(max = 126, min = 1)
    @ConfigItem(
            keyName = "goalLevel",
            name = "Goal Level",
            description = "Max level you're trying to achieve - Half of this will be the level at which you prestige",
            position = 2
    )
    default int goalLevel() {
        return 99;
    }

    @Range(max = 100, min = 2)
    @ConfigItem(
            keyName = "xpFactor",
            name = "XP Factor",
            description = "The rate at which xp is multiplied. Prestige when you have (1 / XP Factor) remaining. XP Factor of 2 means you prestige at half (1/2) xp remaining, for example.",
            position = 3
    )
    default int xpFactor() {
        return 2;
    }

    @ConfigItem(
            keyName = "enableHP",
            name = "Enable HP Prestige",
            description = "Enables prestige levels for HP NOTE: This may not work well with boosts or HP tracking",
            position = 4
    )
    default boolean enableHP() {
        return false;
    }

    @ConfigItem(
            keyName = "enablePrayer",
            name = "Enable Prayer Prestige",
            description = "Enables prestige levels for Prayer  NOTE: This may not work well with boosts or prayer tracking",
            position = 5
    )
    default boolean enablePrayer() {
        return false;
    }

    @ConfigItem(
            keyName = "enableCombat",
            name = "Enable Combat Prestige",
            description = "Enables prestige levels for combat skills (Attack, Strength, Defense, Ranged, Magic) NOTE: This may not work well with boosts",
            position = 6
    )
    default boolean enableCombat() {
        return true;
    }

    @ConfigItem(
            keyName = "enableNonCombat",
            name = "Enable Non-Combat Prestige",
            description = "Enables prestige levels for non-combat skills",
            position = 7
    )
    default boolean enableNonCombat() {
        return true;
    }
}

/*
 * Copyright (c) 2020, Jordan <nightfirecat@protonmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.prestige.model;

final class ModelId
{
    static final int ANVIL = 1251;
    static final int WILLOW_TREE = 1570;
    static final int SLAYER_SKILL_MODEL = 1733;
    static final int FIREMAKING_SKILL_MODEL = 2260;
    static final int STEEL_KITESHIELD = 2339;
    static final int PURE_ESSENCE = 2349;
    static final int RAW_TUNA = 2355;
    static final int CLEAN_HERB = 2364;
    static final int HAMMER = 2376;
    static final int BLUE_WIZARD_HAT = 2483;
    static final int CHISEL = 2489;
    static final int HIGHWAYMAN_MASK = 2500;
    static final int STEEL_PICKAXE = 2529;
    static final int SHORTBOW = 2562;
    static final int STEEL_LONGSWORD = 2602;
    static final int STEEL_SWORD = 2604;
    static final int STEEL_ARROW = 2711;
    static final int PRAYER_SKILL_MODEL = 3325;
    static final int STRENGTH_SKILL_MODEL = 3327;
    static final int AGILITY_SKILL_MODEL = 3328;
    static final int HEARTH = 3326;
    static final int WATERING_CAN = 7331;
    static final int SAW = 12309;
    static final int FOOTPRINT = 19980;
    static final int COOKING_SKILL_MODEL = 27611;
}
/*
 * Copyright (c) 2020, Jordan <nightfirecat@protonmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.prestige.model;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.ListMultimap;
import lombok.Getter;
import net.runelite.api.Skill;

import java.util.List;

@Getter
public enum SkillModel
{
    CONSTRUCTION1(Skill.CONSTRUCTION, ModelId.HAMMER, 10, 14, 669, 0, 15, 329),
    CONSTRUCTION2(Skill.CONSTRUCTION, ModelId.SAW, 11, 14, 615, 0, 111, 451),
    COOKING(Skill.COOKING, ModelId.COOKING_SKILL_MODEL, 31, 59, 169, 0, 1593, 963),
    CRAFTING1(Skill.CRAFTING, ModelId.HAMMER, 30, 24, 418, 0, 14, 496),
    CRAFTING2(Skill.CRAFTING, ModelId.CHISEL, 39, 45, 353, 0, 18, 400),
    DEFENCE(Skill.DEFENCE, ModelId.STEEL_KITESHIELD, 34, 37, 337, 0, 1074, 598),
    FARMING(Skill.FARMING, ModelId.WATERING_CAN, 31, 52, 118, 0, 1278, 451),
    FIREMAKING(Skill.FIREMAKING, ModelId.FIREMAKING_SKILL_MODEL, 29, 55, 115, 0, 1689, 771),
    FISHING(Skill.FISHING, ModelId.RAW_TUNA, 33, 30, 351, 0, 1865, 517),
    FLETCHING1(Skill.FLETCHING, ModelId.STEEL_ARROW, 43, 19, 254, 0, 1257, 408),
    FLETCHING2(Skill.FLETCHING, ModelId.STEEL_ARROW, 46, 44, 223, 0, 177, 444),
    HERBLORE(Skill.HERBLORE, ModelId.CLEAN_HERB, 20, 35, 550, 0, 2024, 344),
    HITPOINTS(Skill.HITPOINTS, ModelId.HEARTH, 35, 58, 538, 0, 0, 250),
    MAGIC(Skill.MAGIC, ModelId.BLUE_WIZARD_HAT, 29, 50, 131, 0, 1913, 344),
    MINING(Skill.MINING, ModelId.STEEL_PICKAXE, 38, 33, 292, 0, 1166, 413),
    PRAYER(Skill.PRAYER, ModelId.PRAYER_SKILL_MODEL, 29, 27, 582, 0, 504, 505),
    RANGED1(Skill.RANGED, ModelId.STEEL_ARROW, 28, 34, 206, 0, 195, 405),
    RANGED2(Skill.RANGED, ModelId.SHORTBOW, 42, 17, 422, 0, 1618, 397),
    RUNECRAFT(Skill.RUNECRAFT, ModelId.PURE_ESSENCE, 35, 38, 242, 0, 1979, 328),
    SLAYER(Skill.SLAYER, ModelId.SLAYER_SKILL_MODEL, 34, 60, 221, 0, 1944, 649),
    SMITHING(Skill.SMITHING, ModelId.ANVIL, 34, 53, 97, 0, 1868, 716),
    STRENGTH(Skill.STRENGTH, ModelId.STRENGTH_SKILL_MODEL, 35, 23, 512, 0, 14, 631),
    AGILITY(Skill.AGILITY, ModelId.AGILITY_SKILL_MODEL, 29, 29, 533, 0, 2040, 685),
    THIEVING(Skill.THIEVING, ModelId.HIGHWAYMAN_MASK, 42, 31, 366, 0, 55, 155),
    WOODCUTTING(Skill.WOODCUTTING, ModelId.WILLOW_TREE, 20, 69, 116, 0, 1978, 1800),
    ATTACK1(Skill.ATTACK, ModelId.STEEL_SWORD, 65, 38, 234, 0, 148, 444),
    ATTACK2(Skill.ATTACK, ModelId.STEEL_LONGSWORD, 27, 29, 198, 0, 1419, 330),
    HUNTER(Skill.HUNTER, ModelId.FOOTPRINT, 45, 48, 512, 0, 0, 1000);

    private static final ListMultimap<Skill, SkillModel> SKILL_MODELS =  ArrayListMultimap.create();

    private final Skill skill;
    private final int modelId;
    private final int originalX;
    private final int originalY;
    private final int rotationX;
    private final int rotationY;
    private final int rotationZ;
    private final int modelZoom;
    private final int iconWidth;
    private final int iconHeight;

    SkillModel(Skill skill, int modelId, int originalX, int originalY, int rotationX, int rotationY, int rotationZ, int modelZoom)
    {
        this.skill = skill;
        this.modelId = modelId;
        this.originalX = originalX;
        this.originalY = originalY;
        this.rotationX = rotationX;
        this.rotationY = rotationY;
        this.rotationZ = rotationZ;
        this.modelZoom = modelZoom;
        this.iconWidth = skill == Skill.CONSTRUCTION ? 49 : 32;
        this.iconHeight = skill == Skill.CONSTRUCTION ? 61 : 32;
    }

    static
    {
        for (SkillModel skillModel : values())
        {
            SKILL_MODELS.put(skillModel.skill, skillModel);
        }
    }

    public static List<SkillModel> getSKILL_MODELS(Skill skill)
    {
        return SKILL_MODELS.get(skill);
    }
}
