package com.pmhighlight;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PmHighlightPluginTest
{
    public static void main(String[] args) throws Exception
    {
        ExternalPluginManager.loadBuiltin(PmHighlightPlugin.class);
        RuneLite.main(args);
    }
}

package com.pmhighlight;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.inject.Provides;
import com.pmhighlight.ui.PmHighlightPluginPanel;
import lombok.Getter;
import net.runelite.api.ChatMessageType;
import net.runelite.api.MessageNode;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.ui.components.colorpicker.ColorPickerManager;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.Text;
import net.runelite.client.Notifier;
import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@PluginDescriptor(
        name = "PM Highlight",
        description = "Highlight private messages in different colors for certain players",
        tags = {"highlight", "color", "private", "chat", "friends"}
)
public class PmHighlightPlugin extends Plugin
{
    @Inject
    protected ClientToolbar clientToolbar;

    protected NavigationButton navigationButton;
    protected PmHighlightPluginPanel pluginPanel;

    @Inject
    private PmHighlightConfig config;

    @Inject
    private ConfigManager configManager;

    @Inject
    private Notifier notifier;

    @Inject
    private Gson gson;


    @Getter
    private final HashMap<String, PlayerSettings> playerSettingsMap = new HashMap();

    @Getter
    @Inject
    private ColorPickerManager colorPickerManager;

    private static final String CONFIG_GROUP_NAME = "pmhighlight";
    private static final String CONFIG_KEY = "playersettings";
    private static final String LOG_REGEX = "(?<name>.+)\\shas\\slogged\\s(?<method>in|out).";
    private static final String NAME_REGEX = "(?<icon>\\<img=\\d+>)?(?<name>.*)";
    private Pattern logPattern;
    private Pattern namePattern;

    @Provides
    PmHighlightConfig getConfig(ConfigManager configManager)
    {
        return configManager.getConfig(PmHighlightConfig.class);
    }

    @Override
    protected void startUp() throws Exception
    {
        logPattern = Pattern.compile(LOG_REGEX);
        namePattern = Pattern.compile(NAME_REGEX);
        pluginPanel = new PmHighlightPluginPanel(this);
        String configJson = configManager.getConfiguration(CONFIG_GROUP_NAME, CONFIG_KEY);
        loadConfig(configJson);

        final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "/icon_marker.png");

        pluginPanel.rebuild();
        navigationButton = NavigationButton.builder()
                                            .tooltip("PM Highlights")
                                            .icon(icon)
                                            .priority(5)
                                            .panel(pluginPanel)
                                            .build();

        clientToolbar.addNavigation(navigationButton);

    }

    @Override
    protected void shutDown()
    {
        updateConfig();
        clientToolbar.removeNavigation(navigationButton);
        playerSettingsMap.clear();
        pluginPanel = null;
        navigationButton = null;
    }

    @Subscribe(priority = 1)
    public void onChatMessage(ChatMessage message)
    {
        ChatMessageType type = message.getType();

        /**
         * Update log in/out message.
         */
        if ( type == ChatMessageType.LOGINLOGOUTNOTIFICATION ) {
            MessageNode messageNode = message.getMessageNode();
            Matcher logMatcher = logPattern.matcher(messageNode.getValue());

            if ( logMatcher.find() ) {
                if ( logMatcher.group("name") != null ) {
                    String playerName = logMatcher.group("name");
                    playerName = Text.toJagexName(playerName);

                    if ( playerSettingsMap.containsKey(playerName) ) {
                        PlayerSettings settings = playerSettingsMap.get(playerName);

                        if ( settings.isLogHighlightEnabled() ) {
                            Color color = Color.decode(settings.getLogColor());
                            messageNode.setValue(wrapWithColorTags(messageNode.getValue(), color));
                        }

                        if (logMatcher.group("method").equals("in") && settings.isNotifyOnLogin()) {
                            notifier.notify(playerName + " has logged in");
                        }
                    }
                }
            }
        }

        /**
         * Update in-/out- going messages.
         */
        if ( type == ChatMessageType.PRIVATECHAT || type == ChatMessageType.PRIVATECHATOUT ) {
            MessageNode messageNode = message.getMessageNode();

            String messageName = Text.toJagexName(messageNode.getName());
            Matcher nameMatcher = namePattern.matcher(messageName);

            String icon = "";
            String playerName = "";

            if (nameMatcher.find() ) {
                if ( nameMatcher.group("icon") != null ) {
                    icon = nameMatcher.group("icon");
                }

                if ( nameMatcher.group("name") != null ) {
                    playerName = nameMatcher.group("name");
                }

                if ( playerSettingsMap.containsKey(playerName)) {
                    PlayerSettings settings = playerSettingsMap.get(playerName);

                    if ( settings.isNameHighlightEnabled() ) {
                        Color nameColor = Color.decode(settings.getNameColor());
                        String coloredName = wrapWithColorTags(playerName, nameColor);

                        // Prepend name with the icon if it was set
                        if (!icon.isEmpty()) {
                            coloredName = icon + coloredName;
                        }
                        messageNode.setName(wrapWithColorTags(coloredName, nameColor));
                    }

                    if ( settings.isMessageHighlightEnabled() ) {
                        Color messageColor = Color.decode(settings.getMessageColor());
                        messageNode.setValue(wrapWithColorTags(messageNode.getValue(), messageColor));
                    }
                }
            }
        }
    }

    /**
     * Wrap a string with color tags.
     * @param text The text to wrap
     * @param color Color to wrap the text with
     * @return String
     */
    private String wrapWithColorTags(String text, Color color)
    {
        return ColorUtil.wrapWithColorTag(
                text.replace(ColorUtil.CLOSING_COLOR_TAG, ColorUtil.colorTag(color)),
                color
        );
    }

    /**
     * Get the default color
     * @return Color defaultColor
     */
    public Color getDefaultColor()
    {
        return config.defaultColor();
    }

    /**
     * Get the default value for weather the name should be highlighted
     * @return boolean
     */
    public boolean getDefaultNameHighlightSetting()
    {
        return config.highlightUsernameDefault();
    }

    /**
     * Get the default value for weather the message should be highlighted
     * @return boolean
     */
    public boolean getDefaultMessageHighlightSetting()
    {
        return config.highlightMessageDefault();
    }

    /**
     * Get the default value for weather the log in/out message should be highlighted
     * @return boolean
     */
    public boolean getDefaultLogNHighlightSetting()
    {
        return config.highlightLoggedInOutDefault();
    }

    /**
     * Get the default value for login notifications
     * @return boolean
     */
    public boolean getDefaultNotifyOnLogin()
    {
        return config.notifyOnLogin();
    }

    /**
     * Convert any Color to it's equivalent RGB HEX string.
     * @param color color
     * @return String RGB HEX string
     */
    public String colorToHexString(Color color)
    {
        return String.format("#%02x%02x%02x", color.getRed(), color.getGreen(), color.getBlue());
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged configChangedEvent)
    {
        if ( configChangedEvent.getGroup().equals(CONFIG_GROUP_NAME) && configChangedEvent.getKey().equals(CONFIG_KEY) ) {
            loadConfig(configChangedEvent.getNewValue());
        }
    }

    /**
     * Helper to enable/disable the new user creation panel.
     * @param show show Whether or not to show the panel.
     */
    public void setSettingsCreationPanelState(boolean show)
    {
        pluginPanel.showSettingCreationPanel(show);
    }

    /**
     * Update the config with player settings, this converts the map from memory into a json string.
     */
    public void updateConfig()
    {
        if (playerSettingsMap.isEmpty()) {
            configManager.unsetConfiguration(CONFIG_GROUP_NAME, CONFIG_KEY);
        } else {
            String json = this.gson.toJson(playerSettingsMap);
            configManager.setConfiguration(CONFIG_GROUP_NAME, CONFIG_KEY, json);
        }
    }

    /**
     * Load the player settings map from a json string
     * @param json JSON stringified map that contains player settings.
     */
    private void loadConfig(String json)
    {
        playerSettingsMap.clear();

        Map<String, PlayerSettings> list = this.gson.fromJson(json, new TypeToken<HashMap<String, PlayerSettings>>() {}.getType());
        if ( list != null ) {
            for (String key : list.keySet()) {
                playerSettingsMap.put(key, list.get(key));
            }
        }

    }

    /**
     * Create a new PlayerSetting object and add it tot he Map
     * @param name Player name
     * @param nameColor Color to highlight player name with
     * @param messageColor Color to highlight message with
     * @param logColor Color to highlight log in/out message with
     */
    public void createPlayerSettings(String name, String nameColor, String messageColor, String logColor)
    {
        PlayerSettings settings = new PlayerSettings();
        settings.setNameColor(nameColor);
        settings.setMessageColor(messageColor);
        settings.setLogColor(logColor);
        settings.setNameHighlightEnabled(getDefaultNameHighlightSetting());
        settings.setMessageHighlightEnabled(getDefaultMessageHighlightSetting());
        settings.setLogHighlightEnabled(getDefaultLogNHighlightSetting());
        settings.setNotifyOnLogin(getDefaultNotifyOnLogin());

        playerSettingsMap.put(name, settings);
        pluginPanel.rebuild();
    }

    /**
     * Replacea a player's settings
     * @param name Name of the player
     * @param settings PlayerSettings object to set
     */
    public void updatePlayerSettings(String name, PlayerSettings settings)
    {
        playerSettingsMap.put(name, settings);
    }

    /**
     * Remove a player's settings by player name
     * @param name Player name
     */
    public void removePlayerSettings(String name)
    {
        if ( playerSettingsMap.containsKey(name)) {
            playerSettingsMap.remove(name);
            pluginPanel.rebuild();
        }
    }
}

package com.pmhighlight;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.*;

@ConfigGroup("pmhighlight")
public interface PmHighlightConfig extends Config
{
    @ConfigItem(
            keyName = "highlightUsername",
            name = "Highlight username default",
            description = "Whether or not to highlight the player name by default",
            position = 14
    )
    default boolean highlightUsernameDefault() { return true; }

    @ConfigItem(
            keyName = "highlightMessage",
            name = "Highlight message default",
            description = "Whether or not to highlight the message by default",
            position = 14
    )
    default boolean highlightMessageDefault() { return true; }

    @ConfigItem(
            keyName = "highlightLog",
            name = "Highlight log message default",
            description = "Whether or not to highlight the log in/out message by default",
            position = 14
    )
    default boolean highlightLoggedInOutDefault() { return true; }

    @ConfigItem(
            keyName = "color",
            name = "Default color",
            description = "Default color to use for highlights",
            position = 14
    )
    default Color defaultColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "notifyOnLogin",
            name = "Notify on log in",
            description = "Default notification setting",
            position = 14
    )
    default boolean notifyOnLogin() {
        return false;
    }
}

package com.pmhighlight;

import lombok.*;

import java.awt.Color;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class PlayerSettings
{
    private String nameColor;
    private String messageColor;
    private String logColor;
    private boolean nameHighlightEnabled;
    private boolean messageHighlightEnabled;
    private boolean logHighlightEnabled;
    private boolean notifyOnLogin;
}

package com.pmhighlight.ui;

import com.pmhighlight.PlayerSettings;
import com.pmhighlight.PmHighlightPlugin;
import lombok.Getter;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.PluginErrorPanel;
import net.runelite.client.util.ImageUtil;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.util.HashMap;

public class PmHighlightPluginPanel extends PluginPanel
{
    private static final ImageIcon ICON_ADD;
    private final JLabel addPlayerSettings = new JLabel(ICON_ADD);
    private final JPanel configView = new JPanel(new GridBagLayout());
    private final PluginErrorPanel noPlayerSettingsPanel = new PluginErrorPanel();
    private final JLabel title = new JLabel();
    private final PmHighlightPlugin plugin;

    @Getter
    private AddPlayerSettingsPanel addPlayerSettingsPanel;

    static
    {
        final BufferedImage icon = ImageUtil.loadImageResource(PmHighlightPluginPanel.class, "/icon_add.png");
        ICON_ADD = new ImageIcon(icon);
    }

    public PmHighlightPluginPanel(PmHighlightPlugin plugin)
    {
        this.plugin = plugin;

        setBorder(new EmptyBorder(10, 10, 10, 10));
        setLayout(new BorderLayout());

        // North panel
        JPanel northPanel = new JPanel(new BorderLayout());
        northPanel.setBorder(new EmptyBorder(1, 0, 10, 0));

        title.setText("PM Highlights");
        title.setForeground(Color.WHITE);
        northPanel.add(title, BorderLayout.WEST);

        addPlayerSettings.setForeground(new Color(110, 225, 110));
        addPlayerSettings.setToolTipText("Add player highlight");
        addPlayerSettings.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                showSettingCreationPanel(true);
            }
        });
        northPanel.add(addPlayerSettings, BorderLayout.EAST);

        // Center panel
        JPanel centerPanel = new JPanel(new BorderLayout());
        centerPanel.setBackground(ColorScheme.DARK_GRAY_COLOR);

        GridBagConstraints constraints = new GridBagConstraints();
        constraints.fill = GridBagConstraints.HORIZONTAL;
        constraints.weightx = 1;
        constraints.gridx = 0;
        constraints.gridy = 0;

        noPlayerSettingsPanel.setContent("PM Highlights", "No players configured");
        noPlayerSettingsPanel.setVisible(false);
        configView.add(noPlayerSettingsPanel, constraints);
        constraints.gridy++;

        addPlayerSettingsPanel = new AddPlayerSettingsPanel(plugin);
        addPlayerSettingsPanel.setVisible(false);
        configView.add(addPlayerSettingsPanel, constraints);
        constraints.gridy++;

        centerPanel.add(configView, BorderLayout.CENTER);

        add(northPanel, BorderLayout.NORTH);
        add(centerPanel, BorderLayout.CENTER);
    }

    public void rebuild()
    {
        GridBagConstraints constraints = new GridBagConstraints();
        constraints.fill = GridBagConstraints.HORIZONTAL;
        constraints.weightx = 1;
        constraints.gridx = 0;
        constraints.gridy = 0;

        configView.removeAll();
        int playerSettingsCount = 0;
        HashMap<String, PlayerSettings> settingsHashMap = plugin.getPlayerSettingsMap();
        for (String key : settingsHashMap.keySet()) {
            PlayerSettingsPanel playerSettingsPanel = new PlayerSettingsPanel(plugin, key, settingsHashMap.get(key));
            configView.add(playerSettingsPanel, constraints);
            constraints.gridy++;

            playerSettingsCount++;
        }

        noPlayerSettingsPanel.setVisible(playerSettingsCount == 0);
        title.setVisible(playerSettingsCount > 0);
        configView.add(noPlayerSettingsPanel, constraints);
        constraints.gridy++;

        configView.add(addPlayerSettingsPanel, constraints);
        constraints.gridy++;

        repaint();
        revalidate();
    }

    public void showSettingCreationPanel(boolean show)
    {
        if ( show ) {
            noPlayerSettingsPanel.setVisible(false);
        } else {
            rebuild();
        }

        addPlayerSettingsPanel.setVisible(show);
        addPlayerSettings.setVisible(!show);
        if (show) {
            addPlayerSettingsPanel.resetNameField();
        }
    }

}

package com.pmhighlight.ui;

import com.pmhighlight.PmHighlightPlugin;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.components.FlatTextField;
import net.runelite.client.ui.components.colorpicker.RuneliteColorPicker;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class AddPlayerSettingsPanel extends JPanel
{
    private final PmHighlightPlugin plugin;

    private final JLabel nameInputLabel = new JLabel();
    private final FlatTextField nameInputField = new FlatTextField();

    private final JLabel nameColorLabel = new JLabel();
    private final JLabel nameColorIndicator = new JLabel();
    private RuneliteColorPicker nameColorPicker;

    private final JLabel messageColorLabel = new JLabel();
    private final JLabel messageColorIndicator = new JLabel();
    private RuneliteColorPicker messageColorPicker;

    private final JLabel logColorLabel = new JLabel();
    private final JLabel logColorIndicator = new JLabel();
    private RuneliteColorPicker logColorPicker;

    public AddPlayerSettingsPanel(PmHighlightPlugin plugin)
    {
        this.plugin = plugin;

        setLayout(new GridBagLayout());
        setBorder(new EmptyBorder(5, 0, 5, 0));
        GridBagConstraints constraints = new GridBagConstraints();
        constraints.fill = GridBagConstraints.HORIZONTAL;
        constraints.weightx = 5;
        constraints.gridx = 0;
        constraints.gridy = 0;

        JPanel titlePanel = new JPanel();
        JLabel title = new JLabel("New player highlight");
        titlePanel.add(title);
        titlePanel.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
        titlePanel.setBorder(new EmptyBorder(2, 2, 2, 2));
        add(titlePanel, constraints);
        constraints.gridy++;

        JPanel inputPanel = new JPanel(new GridLayout(4, 2, 8, 8));

        inputPanel.setBorder(new EmptyBorder(10, 5, 5, 5));
        inputPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);

        nameInputLabel.setText("Player name:");
        nameInputField.setBackground(ColorScheme.DARK_GRAY_COLOR);
        inputPanel.add(nameInputLabel);
        inputPanel.add(nameInputField);

        // name color picker
        nameColorLabel.setText("Name color:");
        nameColorIndicator.setText(plugin.colorToHexString((plugin.getDefaultColor())));
        nameColorIndicator.setForeground(Color.WHITE);
        nameColorIndicator.setBackground(plugin.getDefaultColor());
        nameColorIndicator.setOpaque(true);

        nameColorIndicator.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                openColorPicker(nameColorPicker, nameColorIndicator);
            }
        });

        inputPanel.add(nameColorLabel);
        inputPanel.add(nameColorIndicator);

        // Message color picker
        messageColorLabel.setText("Message color:");
        messageColorIndicator.setText(plugin.colorToHexString((plugin.getDefaultColor())));
        messageColorIndicator.setForeground(Color.WHITE);
        messageColorIndicator.setBackground(plugin.getDefaultColor());
        messageColorIndicator.setOpaque(true);

        messageColorIndicator.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                openColorPicker(messageColorPicker, messageColorIndicator);
            }
        });

        inputPanel.add(messageColorLabel);
        inputPanel.add(messageColorIndicator);

        // Log in/out message color
        logColorLabel.setText("Log message color:");
        logColorIndicator.setText(plugin.colorToHexString((plugin.getDefaultColor())));
        logColorIndicator.setForeground(Color.WHITE);
        logColorIndicator.setBackground(plugin.getDefaultColor());
        logColorIndicator.setOpaque(true);

        logColorIndicator.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                openColorPicker(logColorPicker, logColorIndicator);
            }
        });

        inputPanel.add(logColorLabel);
        inputPanel.add(logColorIndicator);

        add(inputPanel, constraints);
        constraints.gridy++;

        JPanel actionsPanel = createActionsPanel();
        actionsPanel.setBorder(new EmptyBorder(10, 5, 5, 5));
        add(actionsPanel, constraints);
    }

    private JPanel createActionsPanel()
    {
        JPanel buttonPanel = new JPanel(new GridLayout(1, 2, 8, 8));
        buttonPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);

        JButton cancelButton = new JButton("Cancel");
        cancelButton.addActionListener(l -> {
            plugin.setSettingsCreationPanelState(false);
        });

        JButton saveButton = new JButton("Save");
        saveButton.addActionListener(l -> {
            plugin.createPlayerSettings(nameInputField.getText(),
                                        nameColorIndicator.getText(),
                                        messageColorIndicator.getText(),
                                        logColorIndicator.getText());
            plugin.updateConfig();
            plugin.setSettingsCreationPanelState(false);
        });

        buttonPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
        buttonPanel.add(cancelButton);
        buttonPanel.add(saveButton);

        return buttonPanel;
    }

    public void openColorPicker(RuneliteColorPicker colorPicker, JLabel indicatorLabel)
    {
        colorPicker = plugin.getColorPickerManager().create(
                SwingUtilities.windowForComponent(this),
                Color.decode(indicatorLabel.getText()),
                "Choose a color",
                true
        );

        colorPicker.setLocation(getLocationOnScreen());

        colorPicker.setOnColorChange(selectedColor -> {
            indicatorLabel.setText(plugin.colorToHexString(selectedColor));
            indicatorLabel.setBackground(selectedColor);
        });

        colorPicker.setVisible(true);
    }

    /**
     * REset the name input field's text
     */
    public void resetNameField()
    {
        nameInputField.setText("");
    }
}

package com.pmhighlight.ui;

import com.pmhighlight.PlayerSettings;
import com.pmhighlight.PmHighlightPlugin;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.components.colorpicker.RuneliteColorPicker;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class PlayerSettingsPanel extends JPanel
{

    private final PmHighlightPlugin plugin;
    private String playerName;
    private PlayerSettings settings;

    private boolean showDetails = false;
    private final JPanel detailsPanel;

    private final JLabel nameColorLabel = new JLabel();
    private final JLabel nameColorIndicator = new JLabel();
    private RuneliteColorPicker nameColorPicker;
    private JCheckBox nameHighlightSettingCheckbox;

    private final JLabel messageColorLabel = new JLabel();
    private final JLabel messageColorIndicator = new JLabel();
    private RuneliteColorPicker messageColorPicker;
    private JCheckBox messageHighlightSettingCheckbox;

    private final JLabel logColorLabel = new JLabel();
    private final JLabel logColorIndicator = new JLabel();
    private RuneliteColorPicker logColorPicker;
    private JCheckBox logHighlightSettingCheckbox;

    private JCheckBox notifyOnLoginCheckbox;

    public PlayerSettingsPanel(PmHighlightPlugin plugin, String playerName, PlayerSettings settings)
    {
        this.plugin = plugin;
        this.playerName = playerName;
        this.settings = settings;

        setLayout(new BorderLayout());
        setBorder(new EmptyBorder(5, 0, 5, 0));

        JPanel view = new JPanel(new BorderLayout());
        view.setBorder(new EmptyBorder(2, 2, 2, 2));
        view.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());

        JPanel titlePanel = new JPanel();
        titlePanel.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
        JLabel nameLabel = new JLabel(playerName);

        titlePanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                showDetails = !showDetails;
                detailsPanel.setVisible(showDetails);
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                titlePanel.setBackground(ColorScheme.DARKER_GRAY_HOVER_COLOR);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                titlePanel.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
            }
        });

        titlePanel.add(nameLabel, BorderLayout.CENTER);
        detailsPanel = createDetailsJPanel(settings);
        detailsPanel.setVisible(false);

        view.add(titlePanel, BorderLayout.NORTH);
        view.add(detailsPanel, BorderLayout.CENTER);
        add(view);
    }

    private JPanel createDetailsJPanel(PlayerSettings settings)
    {
        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints constraints = new GridBagConstraints();
        constraints.fill = GridBagConstraints.HORIZONTAL;
        constraints.weightx = 5;
        constraints.gridx = 0;
        constraints.gridy = 0;

        panel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        JLabel settingsTitle = new JLabel("Settings");
        settingsTitle.setBorder(new EmptyBorder(10, 5, 5, 5));
        panel.add(settingsTitle, constraints);
        constraints.gridy++;

        JPanel settingsPanel = createSettingsPanel();
        panel.add(settingsPanel, constraints);
        constraints.gridy++;

        JLabel colorTile = new JLabel("Colors");
        colorTile.setBorder(new EmptyBorder(10, 5, 5, 5));
        panel.add(colorTile, constraints);
        constraints.gridy++;

        JPanel colorPanel = createColorDetailsPanel();
        colorPanel.setBorder(new EmptyBorder(0, 5, 5, 5));
        panel.add(colorPanel, constraints);
        constraints.gridy++;

        JPanel actionsPanel = createActionPanel();
        actionsPanel.setBorder(new EmptyBorder(10, 5, 5, 5));
        panel.add(actionsPanel, constraints);

        return panel;
    }

    private JPanel createSettingsPanel()
    {
        JPanel settingsPanel = new JPanel(new GridLayout(4, 1));
        settingsPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);

        nameHighlightSettingCheckbox = new JCheckBox("Highlight name");
        nameHighlightSettingCheckbox.setSelected(settings.isNameHighlightEnabled());
        nameHighlightSettingCheckbox.addItemListener(event -> {
            int state = event.getStateChange();

            boolean enabled = state == 1;
            settings.setNameHighlightEnabled(enabled);
            plugin.updatePlayerSettings(playerName, settings);
            plugin.updateConfig();
        });

        messageHighlightSettingCheckbox = new JCheckBox("Highlight message");
        messageHighlightSettingCheckbox.setSelected(settings.isMessageHighlightEnabled());
        messageHighlightSettingCheckbox.addItemListener(event -> {
            int state = event.getStateChange();

            boolean enabled = state == 1;
            settings.setMessageHighlightEnabled(enabled);
            plugin.updatePlayerSettings(playerName, settings);
            plugin.updateConfig();
        });

        logHighlightSettingCheckbox = new JCheckBox("Highlight log in/out message");
        logHighlightSettingCheckbox.setSelected(settings.isLogHighlightEnabled());
        logHighlightSettingCheckbox.addItemListener(event -> {
            int state = event.getStateChange();

            boolean enabled = state == 1;
            settings.setLogHighlightEnabled(enabled);
            plugin.updatePlayerSettings(playerName, settings);
            plugin.updateConfig();
        });

        notifyOnLoginCheckbox = new JCheckBox("Notify on login");
        notifyOnLoginCheckbox.setSelected(settings.isNotifyOnLogin());
        notifyOnLoginCheckbox.addItemListener(event -> {
            int state = event.getStateChange();

            boolean enabled = state == 1;
            settings.setNotifyOnLogin(enabled);
            plugin.updatePlayerSettings(playerName, settings);
            plugin.updateConfig();
        });

        settingsPanel.add(nameHighlightSettingCheckbox);
        settingsPanel.add(messageHighlightSettingCheckbox);
        settingsPanel.add(logHighlightSettingCheckbox);
        settingsPanel.add(notifyOnLoginCheckbox);

        return settingsPanel;
    }

    private JPanel createColorDetailsPanel()
    {
        JPanel colorPanel = new JPanel(new GridLayout(3, 2, 8, 8));
        colorPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);

        nameColorLabel.setText("Name:");
        nameColorIndicator.setText(settings.getNameColor());
        nameColorIndicator.setForeground(Color.WHITE);
        nameColorIndicator.setBackground(Color.decode(settings.getNameColor()));
        nameColorIndicator.setPreferredSize(new Dimension(2, 2));
        nameColorIndicator.setOpaque(true);

        nameColorIndicator.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                openColorPicker(nameColorPicker, nameColorLabel, nameColorIndicator, "name");
            }
        });

        colorPanel.add(nameColorLabel);
        colorPanel.add(nameColorIndicator);

        // Message color picker
        messageColorLabel.setText("Message:");
        messageColorIndicator.setText(settings.getMessageColor());
        messageColorIndicator.setForeground(Color.WHITE);
        messageColorIndicator.setBackground(Color.decode(settings.getMessageColor()));
        messageColorIndicator.setOpaque(true);

        messageColorIndicator.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                openColorPicker(messageColorPicker, messageColorLabel, messageColorIndicator, "message");
            }
        });

        colorPanel.add(messageColorLabel);
        colorPanel.add(messageColorIndicator);

        // Log in/out message color
        logColorLabel.setText("Log message:");
        logColorIndicator.setText(settings.getLogColor());
        logColorIndicator.setForeground(Color.WHITE);
        logColorIndicator.setBackground(Color.decode(settings.getLogColor()));
        logColorIndicator.setOpaque(true);

        logColorIndicator.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                openColorPicker(logColorPicker, logColorLabel, logColorIndicator, "log");
            }
        });

        colorPanel.add(logColorLabel);
        colorPanel.add(logColorIndicator);

        return colorPanel;
    }

    private JPanel createActionPanel()
    {
        JPanel panel = new JPanel(new GridLayout(1, 2, 8, 8));
        panel.setBackground(ColorScheme.DARKER_GRAY_COLOR);

        JButton resetButton = new JButton("Reset");
        resetButton.addActionListener(l -> {
            int confirm = JOptionPane.showConfirmDialog(PlayerSettingsPanel.this,
                    "Are you sure you want to reset the settings for this player?",
                    "Warning", JOptionPane.OK_CANCEL_OPTION);

            if ( confirm == 0 ) {
                Color defaultColor = plugin.getDefaultColor();
                String defaultColorhex = plugin.colorToHexString(defaultColor);
                boolean nameEnabled = plugin.getDefaultNameHighlightSetting();
                boolean messageEnabled = plugin.getDefaultMessageHighlightSetting();
                boolean logEnabled = plugin.getDefaultLogNHighlightSetting();

                settings.setNameColor(defaultColorhex);
                nameColorIndicator.setText(defaultColorhex);
                nameColorIndicator.setBackground(defaultColor);
                settings.setNameHighlightEnabled(nameEnabled);
                nameHighlightSettingCheckbox.setSelected(nameEnabled);

                settings.setMessageColor(defaultColorhex);
                messageColorIndicator.setText(defaultColorhex);
                messageColorIndicator.setBackground(defaultColor);
                settings.setMessageHighlightEnabled(messageEnabled);
                messageHighlightSettingCheckbox.setSelected(messageEnabled);

                settings.setLogColor(defaultColorhex);
                logColorIndicator.setText(defaultColorhex);
                logColorIndicator.setBackground(defaultColor);
                settings.setLogHighlightEnabled(logEnabled);
                logHighlightSettingCheckbox.setSelected(logEnabled);

                plugin.updatePlayerSettings(playerName, settings);
                plugin.updateConfig();
            }
        });

        JButton removeButton = new JButton("Remove");
        removeButton.addActionListener(l -> {
            int confirm = JOptionPane.showConfirmDialog(PlayerSettingsPanel.this,
                    "Are you sure you want to delete the settings for this player?",
                    "Warning", JOptionPane.OK_CANCEL_OPTION);

            if ( confirm == 0 ) {
                plugin.removePlayerSettings(playerName);
                plugin.updateConfig();
            }
        });

        panel.setBorder(new EmptyBorder(5, 5, 5, 5));
        panel.add(resetButton);
        panel.add(removeButton);

        return panel;
    }

    public void openColorPicker(RuneliteColorPicker colorPicker, JLabel label, JLabel indicatorLabel, String setting)
    {
        colorPicker = plugin.getColorPickerManager().create(
                SwingUtilities.windowForComponent(this),
                Color.decode(indicatorLabel.getText()),
                "Pick a color",
                true
        );

        colorPicker.setLocation(getLocationOnScreen());

        colorPicker.setOnColorChange(selectedColor -> {
            String hex = plugin.colorToHexString(selectedColor);
            indicatorLabel.setText(hex);
            indicatorLabel.setBackground(selectedColor);

            switch(setting) {
                case "name":
                    settings.setNameColor(hex);
                    break;
                case "message":
                    settings.setMessageColor(hex);
                    break;
                case "log":
                    settings.setLogColor(hex);
                    break;
                default:
                    break;
            }

        });

        colorPicker.setOnClose(c -> {
            plugin.updatePlayerSettings(playerName, settings);
            plugin.updateConfig();
        });

        colorPicker.setVisible(true);
    }

}

