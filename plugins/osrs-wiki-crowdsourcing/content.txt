package com.Crowdsourcing.npc_respawn;

import lombok.AllArgsConstructor;
import lombok.Data;
import net.runelite.api.coords.WorldPoint;

@Data
@AllArgsConstructor
public class NpcRespawnData
{
    private int npcIndex;
    private int npcId;
    private int respawnTime;
    private WorldPoint location;
    private boolean isInInstance;
}

package com.Crowdsourcing.npc_respawn;

import com.Crowdsourcing.CrowdsourcingManager;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.NPC;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.NpcDespawned;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.eventbus.Subscribe;

import java.util.HashMap;
import java.util.HashSet;

public class CrowdsourcingNpcRespawn {

    private static final int MAX_ACTOR_VIEW_RANGE = 15;
    private WorldPoint lastPlayerLocation;
    private HashMap<Integer, Integer> npcDespawnTimes = new HashMap<>();
    private HashSet<Integer> seenNpcs = new HashSet<>();
    private boolean logging = false;

    @Inject
    private Client client;

    @Inject
    public CrowdsourcingManager manager;

    public void setLogging(boolean logging)
    {
        this.logging = logging;
    }

    private static boolean isInViewRange(WorldPoint wp1, WorldPoint wp2)
    {
        int distance = wp1.distanceTo(wp2);
        return distance < MAX_ACTOR_VIEW_RANGE;
    }

    @Subscribe
    public void onGameTick(GameTick event)
    {
        lastPlayerLocation = client.getLocalPlayer().getWorldLocation();
    }

    @Subscribe
    public void onNpcSpawned(NpcSpawned npcSpawned)
    {
        final NPC npc = npcSpawned.getNpc();
        int index = npc.getIndex();
        if (!npcDespawnTimes.containsKey(index)) {
            return;
        }

        if (lastPlayerLocation != null && isInViewRange(lastPlayerLocation, npc.getWorldLocation())) {
            int respawnTime = client.getTickCount() - npcDespawnTimes.get(index);
            LocalPoint local = LocalPoint.fromWorld(client, npc.getWorldLocation());
            WorldPoint location = null;
            boolean isInInstance = false;
            if (local != null)
            {
                location = WorldPoint.fromLocalInstance(client, local);
                isInInstance = client.isInInstancedRegion();
            }
            manager.storeEvent(new NpcRespawnData(index, npc.getId(), respawnTime, location, isInInstance));
            if (logging)
            {
                manager.sendMessage(String.format("NPC %d: %d ticks", npc.getId(), respawnTime+1));
            }
            seenNpcs.add(index);
            npcDespawnTimes.remove(index);
        }
    }

    @Subscribe
    public void onNpcDespawned(NpcDespawned npcDespawned)
    {
        final NPC npc = npcDespawned.getNpc();
        int index = npc.getIndex();
        if (seenNpcs.contains(index)) {
            return;
        }

        if (isInViewRange(client.getLocalPlayer().getWorldLocation(), npc.getWorldLocation())) {
            npcDespawnTimes.put(index, client.getTickCount());
        }
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged event)
    {
        if (event.getGameState() == GameState.LOGIN_SCREEN ||
                event.getGameState() == GameState.HOPPING)
        {
            npcDespawnTimes.clear();
        }
    }
}

package com.Crowdsourcing.shootingstars;

import lombok.Value;
import net.runelite.client.config.RuneScapeProfileType;

@Value
public class CannonData
{
	int cannonVarbit;
	long time;
	int world;
	RuneScapeProfileType mode;
}

/*
 * Copyright (c) 2023, Ron Young <https://github.com/raiyni>
 * All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.Crowdsourcing.shootingstars;

import com.google.common.base.MoreObjects;
import com.google.common.primitives.Ints;
import com.google.gson.Gson;
import java.io.IOException;
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.NPC;
import net.runelite.api.Point;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameObjectDespawned;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.NpcDespawned;
import net.runelite.api.events.NpcSpawned;
import net.runelite.api.events.VarbitChanged;
import net.runelite.api.gameval.NpcID;
import net.runelite.api.gameval.VarbitID;
import net.runelite.client.config.RuneScapeProfileType;
import net.runelite.client.eventbus.Subscribe;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

@Slf4j
public class CrowdsourcingStars
{
	private static final int VARBIT_THROTTLE_SECONDS = 5;
	private static final String CROWDSOURCING_URL = "https://crowdsource.runescape.wiki/shooting_stars";
	private static final MediaType JSON = MediaType.get("application/json; charset=utf-8");
	private static final Pattern STAR_PROGRESS = Pattern.compile("This is a size-(?<tier>[0-9]+) star.* It has been mined (?<progress>[0-9]+)%.*", Pattern.CASE_INSENSITIVE);
	private static final int CHECK_SECONDS = 60 * 1000;
	private static final double HP_SUBMIT_CHANCE = 0.01;
	private static final double NEXT_TIER_SUBMIT_CHANCE = 0.01;
	private static final double MISSING_STAR_SUBMIT_CHANCE = 0.01;

	@Inject
	private Client client;

	@Inject
	private OkHttpClient okHttpClient;

	@Inject
	private Gson gson;

	private Star trackedStar;
	private StarData lastSent;

	private Map<Point, Long> checkedPoints = new HashMap<>();

	private long cannonThrottle = -1;

	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		if (event.getVarbitId() != VarbitID.MCANNON_SETUPTIME)
		{
			return;
		}

		final int value = event.getValue();
		if (value == 0)
		{
			return;
		}

		long now = Instant.now().getEpochSecond();
		if (now - cannonThrottle >= VARBIT_THROTTLE_SECONDS)
		{
			cannonThrottle = now;

			submitObject(new CannonData(value, now, client.getWorld(), RuneScapeProfileType.getCurrent(client)));
		}
	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned event)
	{
		if (event.getNpc().getId() != NpcID.STAR_HEADBAR_NPC)
		{
			return;
		}

		var npc = event.getNpc();
		if (trackedStar == null)
		{
			trackedStar = new Star(client.getWorld(), npc.getWorldLocation());
			checkedPoints.clear();
		}

		trackedStar.setNpc(npc);
	}

	@Subscribe
	public void onNpcDespawned(NpcDespawned event)
	{
		if (event.getNpc().getId() != NpcID.STAR_HEADBAR_NPC)
		{
			return;
		}

		if (trackedStar == null)
		{
			return;
		}

		trackedStar.setNpc(null);
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		checkStarProgress();
		checkMissingStar();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		if (event.getGameState() == GameState.LOGIN_SCREEN || event.getGameState() == GameState.HOPPING)
		{
			reset();
		}

		// if a cannon is out, the varbit value is saved across hopping and logging out
		if (event.getGameState() == GameState.LOGGED_IN)
		{
			cannonThrottle = Instant.now().getEpochSecond();
		}

		// gameobjects don't fire despawn when teleporting away
		if (event.getGameState() == GameState.LOADING)
		{
			checkedPoints.clear();

			if (trackedStar != null)
			{
				trackedStar.setGameObject(null);
			}
		}
	}

	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned event)
	{
		var gameObject = event.getGameObject();
		int tier = Tiers.of(gameObject.getId());
		if (tier < 0)
		{
			return;
		}

		if (trackedStar == null)
		{
			trackedStar = new Star(client.getWorld(), gameObject.getWorldLocation());
			checkedPoints.clear();
		}

		trackedStar.setGameObject(gameObject);

		// if for some reason someone runs away from the star
		// crossing a loading line next to the star can refire gameobject spawn events
		if (trackedStar.getTier() == tier)
		{
			return;
		}

		int lastTier = trackedStar.getTier();
		if (lastTier > -1)
		{
			trackedStar.setHp(50);
		}

		trackedStar.setTier(tier);

		// always submit newly found stars
		if (lastTier == -1 || shouldSubmit(NEXT_TIER_SUBMIT_CHANCE))
		{
			submit();
		}
	}

	@Subscribe
	public void onGameObjectDespawned(GameObjectDespawned event)
	{
		int tier = Tiers.of(event.getGameObject().getId());
		if (tier < 0)
		{
			return;
		}

		if (trackedStar != null)
		{
			trackedStar.setGameObject(null);
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		if (event.getType() != ChatMessageType.MESBOX)
		{
			return;
		}

		final String message = event.getMessage();
		if (message.startsWith("You see a shooting star!") || message.equals("You look through the telescope but you don't see anything interesting."))
		{
			submitTelescopeMessage(message);
			return;
		}

		Matcher m = STAR_PROGRESS.matcher(message);
		if (!m.matches())
		{
			return;
		}

		if (trackedStar == null)
		{
			log.error("Tracked star not found");
			return;
		}

		int tier = MoreObjects.firstNonNull(Ints.tryParse(m.group("tier")), -1);
		int hp = MoreObjects.firstNonNull(Ints.tryParse(m.group("progress")), -1);

		trackedStar.setTier(tier);
		trackedStar.setHp((100 - hp) / 2);

		submitObject(StarData.builder()
			.tier(tier)
			.hp(hp)
			.exact(true)
			.world(client.getWorld())
			.location(trackedStar.getLocation())
			.mode(RuneScapeProfileType.getCurrent(client))
			.build());
	}

	private void submitTelescopeMessage(final String message)
	{
		String json = gson.toJson(new TelescopeData(client.getWorld(), message, RuneScapeProfileType.getCurrent(client)));
		log.debug("submitting {}", json);

		Request r = new Request.Builder()
			.url(CROWDSOURCING_URL)
			.post(RequestBody.create(JSON, json))
			.build();

		okHttpClient.newCall(r).enqueue(new Callback()
		{
			@Override
			public void onFailure(Call call, IOException e)
			{
				log.debug("Error sending crowdsourcing data", e);
			}

			@Override
			public void onResponse(Call call, Response response)
			{
				log.debug("Successfully sent crowdsourcing data");
				response.close();
			}
		});
	}

	private boolean shouldSubmit(double chance)
	{
		double n = Math.random();
		return n >= 1d - chance;
	}

	private void submit()
	{
		if (trackedStar == null)
		{
			log.error("Missing star to submit");
			return;
		}

		if (lastSent != null &&
			lastSent.getTier() == trackedStar.getTier() &&
			(lastSent.getHp() != null && lastSent.getHp() == trackedStar.getHp()) &&
			lastSent.getWorld() == trackedStar.getWorld() &&
			lastSent.getLocation().equals(trackedStar.getLocation()))
		{
			log.debug("Not submitting, same information");
			return;
		}

		lastSent = StarData.builder()
			.tier(trackedStar.getTier())
			.world(client.getWorld())
			.location(trackedStar.getLocation())
			.hp(trackedStar.getHp() > -1 ? trackedStar.getHp() : null)
			.mode(RuneScapeProfileType.getCurrent(client))
			.build();
		submitObject(lastSent);
	}

	private void submitObject(Object obj)
	{
		String json = gson.toJson(obj);
		log.debug("submitting {}", json);

		Request r = new Request.Builder()
			.url(CROWDSOURCING_URL)
			.post(RequestBody.create(JSON, json))
			.build();

		okHttpClient.newCall(r).enqueue(new Callback()
		{
			@Override
			public void onFailure(Call call, IOException e)
			{
				log.debug("Error sending crowdsourcing data", e);
			}

			@Override
			public void onResponse(Call call, Response response)
			{
				log.debug("Successfully sent crowdsourcing data");
				response.close();
			}
		});
	}

	private void checkStarProgress()
	{
		if (trackedStar == null)
		{
			return;
		}

		if (trackedStar.getNpc() == null)
		{
			if (trackedStar.getGameObject() == null)
			{
				// star probably died, any tier can disappear if the next wave comes
				// dead star will be submitted by the missing star check
				reset();
			}

			return;
		}

		NPC npc = trackedStar.getNpc();
		int hp = npc.getHealthRatio();
		if (hp == -1 || hp == trackedStar.getHp())
		{
			return;
		}

		int lastKnownHp = trackedStar.getHp();
		trackedStar.setHp(hp);
		if (lastKnownHp == -1 || shouldSubmit(HP_SUBMIT_CHANCE))
		{
			submit();
		}
	}

	private void checkMissingStar()
	{
		if (trackedStar != null || client.getPlane() != 0)
		{
			return;
		}

		long now = System.currentTimeMillis();
		var currentLocation = client.getLocalPlayer().getWorldLocation();
		for (int regionId : client.getMapRegions())
		{
			if (!Locations.containsKey(regionId))
			{
				continue;
			}

			for (var p : Locations.get(regionId))
			{
				if (WorldPoint.isInScene(client, p.getX(), p.getY()) &&
					(Math.abs(currentLocation.getX() / 8 - p.getX() / 8) <= 3) && (Math.abs(currentLocation.getY() / 8 - p.getY() / 8) <= 3))
				{
					// always submit first seen missing star location
					long time = checkedPoints.getOrDefault(p, -1L);
					if (now - time < CHECK_SECONDS)
					{
						continue;
					}

					checkedPoints.put(p, now);
					if (time == -1 || shouldSubmit(MISSING_STAR_SUBMIT_CHANCE))
					{
						submitObject(StarData.builder()
							.tier(0)
							.world(client.getWorld())
							.location(new WorldPoint(p.getX(), p.getY(), client.getPlane()))
							.mode(RuneScapeProfileType.getCurrent(client))
							.build()
						);
					}
				}
			}
		}
	}

	public void reset()
	{
		lastSent = null;
		trackedStar = null;
		checkedPoints.clear();
		cannonThrottle = -1;
	}
}

/*
 * Copyright (c) 2023, Ron Young <https://github.com/raiyni>
 * All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.Crowdsourcing.shootingstars;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.ListMultimap;
import com.google.common.collect.Lists;
import java.util.List;
import net.runelite.api.Point;

public class Locations
{
	private static final ListMultimap<Integer, Point> POINTS = ArrayListMultimap.create();

	static
	{
		List<Point> points = Lists.newArrayList(
			new Point(1210, 3651),
			new Point(1258, 3564),
			new Point(1279, 3817),
			new Point(1322, 3816),
			new Point(1437, 3840),
			new Point(1534, 3747),
			new Point(1597, 3648),
			new Point(1760, 3853),
			new Point(1769, 3709),
			new Point(1778, 3493),
			new Point(2139, 3938),
			new Point(2173, 3409),
			new Point(2200, 2792),
			new Point(2269, 3158),
			new Point(2318, 3269),
			new Point(2329, 3163),
			new Point(2341, 3635),
			new Point(2375, 3832),
			new Point(2393, 3814),
			new Point(2444, 3490),
			new Point(2448, 3436),
			new Point(2468, 2842),
			new Point(2483, 2886),
			new Point(2528, 3887),
			new Point(2567, 2858),
			new Point(2571, 2964),
			new Point(2589, 3478),
			new Point(2602, 3086),
			new Point(2608, 3233),
			new Point(2624, 3141),
			new Point(2630, 2993),
			new Point(2683, 3699),
			new Point(2705, 3333),
			new Point(2727, 3683),
			new Point(2736, 3221),
			new Point(2742, 3143),
			new Point(2804, 3434),
			new Point(2822, 3238),
			new Point(2827, 2999),
			new Point(2835, 3296),
			new Point(2845, 3037),
			new Point(2882, 3474),
			new Point(2906, 3355),
			new Point(2940, 3280),
			new Point(2974, 3241),
			new Point(3018, 3443),
			new Point(3018, 3593),
			new Point(3030, 3348),
			new Point(3049, 3940),
			new Point(3057, 3887),
			new Point(3091, 3962),
			new Point(3093, 3756),
			new Point(3094, 3235),
			new Point(3108, 3569),
			new Point(3153, 3150),
			new Point(3171, 2910),
			new Point(3175, 3362),
			new Point(3188, 3932),
			new Point(3230, 3155),
			new Point(3258, 3408),
			new Point(3274, 6055),
			new Point(3276, 3164),
			new Point(3290, 3353),
			new Point(3296, 3298),
			new Point(3316, 2867),
			new Point(3351, 3281),
			new Point(3424, 3160),
			new Point(3434, 2889),
			new Point(3451, 3233),
			new Point(3500, 3219),
			new Point(3505, 3485),
			new Point(3635, 3340),
			new Point(3650, 3214),
			new Point(3686, 2969),
			new Point(3774, 3814),
			new Point(3818, 3801)
		);

		for (Point p : points)
		{
			POINTS.put(((p.getX() >> 6) << 8) | (p.getY() >> 6), p);
		}
	}

	public static List<Point> get(int regionId)
	{
		return POINTS.get(regionId);
	}

	public static boolean containsKey(int regionId)
	{
		return POINTS.containsKey(regionId);
	}
}

/*
 * Copyright (c) 2023, Ron Young <https://github.com/raiyni>
 * All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.Crowdsourcing.shootingstars;


import java.util.List;
import net.runelite.api.gameval.ObjectID;

public class Tiers
{
	private static final List<Integer> TIERS = List.of(
		ObjectID.STAR_SIZE_ONE_STAR,
		ObjectID.STAR_SIZE_TWO_STAR,
		ObjectID.STAR_SIZE_THREE_STAR,
		ObjectID.STAR_SIZE_FOUR_STAR,
		ObjectID.STAR_SIZE_FIVE_STAR,
		ObjectID.STAR_SIZE_SIX_STAR,
		ObjectID.STAR_SIZE_SEVEN_STAR,
		ObjectID.STAR_SIZE_EIGHT_STAR,
		ObjectID.STAR_SIZE_NINE_STAR
	);

	public static int of(int id)
	{
		int idx = TIERS.indexOf(id);
		return idx > -1 ? idx + 1 : -1;
	}
}

package com.Crowdsourcing.shootingstars;

import lombok.Value;
import net.runelite.client.config.RuneScapeProfileType;

@Value
public class TelescopeData
{
	private int world;
	private String message;
	private RuneScapeProfileType mode;
}

/*
 * Copyright (c) 2023, Ron Young <https://github.com/raiyni>
 * All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.Crowdsourcing.shootingstars;

import lombok.Builder;
import lombok.Data;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.config.RuneScapeProfileType;

@Data
@Builder
public class StarData
{
	private int tier;
	private int world;
	private Integer hp;
	private Boolean exact;
	private WorldPoint location;
	private RuneScapeProfileType mode;
}

/*
 * Copyright (c) 2023, Ron Young <https://github.com/raiyni>
 * All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.Crowdsourcing.shootingstars;


import lombok.Data;
import lombok.RequiredArgsConstructor;
import net.runelite.api.GameObject;
import net.runelite.api.NPC;
import net.runelite.api.coords.WorldPoint;

@Data
@RequiredArgsConstructor
public class Star
{
	private int tier = -1;
	private int hp = -1;

	private NPC npc;
	private GameObject gameObject;

	private final int world;
	private final WorldPoint location;
}
package com.Crowdsourcing.quest_log;

import com.Crowdsourcing.CrowdsourcingManager;
import java.util.HashMap;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.gameval.VarPlayerID;
import net.runelite.api.gameval.VarbitID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.eventbus.Subscribe;

@Slf4j
public class CrowdsourcingQuestLog
{
	static class VarTuple {
		public final int varType;
		public final int varIndex;
		public VarTuple(int varType, int varIndex) {
			this.varType = varType;
			this.varIndex = varIndex;
		}
	}
	static HashMap<String, VarTuple> questVarbs = new HashMap<>();
	static
	{
		// Set varb or varp to send with each one
		questVarbs.put("Black Knights' Fortress", new VarTuple(1, VarPlayerID.SPY));
		questVarbs.put("Cook's Assistant", new VarTuple(1, VarPlayerID.COOKQUEST));
		questVarbs.put("The Corsair Curse", new VarTuple(0, VarbitID.CORSCURS_PROGRESS));
		questVarbs.put("Demon Slayer", new VarTuple(0, VarbitID.DEMONSLAYER_MAIN));
		questVarbs.put("Doric's Quest", new VarTuple(1, VarPlayerID.DORICQUEST));
		questVarbs.put("Dragon Slayer I", new VarTuple(1, VarPlayerID.DRAGONQUEST));
		questVarbs.put("Ernest the Chicken", new VarTuple(1, VarPlayerID.HAUNTED));
		questVarbs.put("Goblin Diplomacy", new VarTuple(0, VarbitID.GOBDIP_MAIN));
		questVarbs.put("Imp Catcher", new VarTuple(1, VarPlayerID.IMP));
		questVarbs.put("The Knight's Sword", new VarTuple(1, VarPlayerID.SQUIRE));
		questVarbs.put("Misthalin Mystery", new VarTuple(0, VarbitID.MISTMYST_PROGRESS));
		questVarbs.put("Pirate's Treasure", new VarTuple(1, VarPlayerID.HUNT));
		questVarbs.put("Prince Ali Rescue", new VarTuple(1, VarPlayerID.PRINCEQUEST));
		questVarbs.put("The Restless Ghost", new VarTuple(1, VarPlayerID.PRIESTSTART));
		questVarbs.put("Romeo & Juliet", new VarTuple(1, VarPlayerID.RJQUEST));
		questVarbs.put("Rune Mysteries", new VarTuple(1, VarPlayerID.RUNEMYSTERIES));
		questVarbs.put("Sheep Shearer", new VarTuple(1, VarPlayerID.SHEEP));
		questVarbs.put("Vampyre Slayer", new VarTuple(1, VarPlayerID.VAMPIRE));
		questVarbs.put("Witch's Potion", new VarTuple(1, VarPlayerID.HETTY));
		questVarbs.put("X Marks the Spot", new VarTuple(0, VarbitID.CLUEQUEST));
		questVarbs.put("Below Ice Mountain", new VarTuple(0, VarbitID.BIM));
		questVarbs.put("Animal Magnetism", new VarTuple(0, VarbitID.ANMA_MAIN));
		questVarbs.put("Another Slice of H.A.M.", new VarTuple(0, VarbitID.SLICE_QUEST));
		questVarbs.put("Between a Rock...", new VarTuple(0, VarbitID.DWARFROCK_QUEST));
		questVarbs.put("Big Chompy Bird Hunting", new VarTuple(1, VarPlayerID.CHOMPYBIRD));
		questVarbs.put("Biohazard", new VarTuple(1, VarPlayerID.BIOHAZARD));
		questVarbs.put("Cabin Fever", new VarTuple(1, VarPlayerID.FEVER_QUEST));
		questVarbs.put("Clock Tower", new VarTuple(1, VarPlayerID.COGQUEST));
		questVarbs.put("Cold War", new VarTuple(0, VarbitID.PENG_QUEST));
		questVarbs.put("Contact!", new VarTuple(0, VarbitID.CONTACT));
		questVarbs.put("Creature of Fenkenstrain", new VarTuple(1, VarPlayerID.FENK_QUEST));
		questVarbs.put("Darkness of Hallowvale", new VarTuple(0, VarbitID.MYQ3_MAIN_QUEST));
		questVarbs.put("Death Plateau", new VarTuple(1, VarPlayerID.DEATH_EQUIPROOM));
		questVarbs.put("Death to the Dorgeshuun", new VarTuple(0, VarbitID.DTTD_MAIN));
		questVarbs.put("The Depths of Despair", new VarTuple(0, VarbitID.HOSIDIUSQUEST));
		questVarbs.put("Desert Treasure", new VarTuple(0, VarbitID.DESERTTREASURE));
		questVarbs.put("Devious Minds", new VarTuple(0, VarbitID.DEVIOUS_MAIN));
		questVarbs.put("The Dig Site", new VarTuple(1, VarPlayerID.ITEXAMLEVEL));
		questVarbs.put("Dragon Slayer II", new VarTuple(0, VarbitID.DS2));
		questVarbs.put("Dream Mentor", new VarTuple(0, VarbitID.DREAM_PROG));
		questVarbs.put("Druidic Ritual", new VarTuple(1, VarPlayerID.DRUIDQUEST));
		questVarbs.put("Dwarf Cannon", new VarTuple(1, VarPlayerID.MCANNON));
		questVarbs.put("Eadgar's Ruse", new VarTuple(1, VarPlayerID.EADGAR_QUEST));
		questVarbs.put("Eagles' Peak", new VarTuple(0, VarbitID.EAGLEPEAK_QUEST));
		questVarbs.put("Elemental Workshop I", new VarTuple(1, VarPlayerID.ELEMENTAL_WORKSHOP_BITS));
		questVarbs.put("Elemental Workshop II", new VarTuple(0, VarbitID.ELEMENTAL_QUEST_2_MAIN));
		questVarbs.put("Enakhra's Lament", new VarTuple(0, VarbitID.ENAKH_QUEST));
		questVarbs.put("Enlightened Journey", new VarTuple(0, VarbitID.ZEP_QUEST));
		questVarbs.put("The Eyes of Glouphrie", new VarTuple(0, VarbitID.EYEGLO_QUEST));
		questVarbs.put("Fairytale I - Growing Pains", new VarTuple(0, VarbitID.FAIRY_FARMERS_QUEST));
		questVarbs.put("Fairytale II - Cure a Queen", new VarTuple(0, VarbitID.FAIRY2_QUEENCURE_QUEST));
		questVarbs.put("Family Crest", new VarTuple(1, VarPlayerID.CRESTQUEST));
		questVarbs.put("The Feud", new VarTuple(0, VarbitID.FEUD_VAR));
		questVarbs.put("Fight Arena", new VarTuple(1, VarPlayerID.ARENAQUEST));
		questVarbs.put("Fishing Contest", new VarTuple(1, VarPlayerID.FISHINGCOMPO));
		questVarbs.put("Forgettable Tale...", new VarTuple(0, VarbitID.FORGET_QUEST));
		questVarbs.put("Bone Voyage", new VarTuple(0, VarbitID.FOSSILQUEST_PROGRESS));
		questVarbs.put("The Fremennik Isles", new VarTuple(0, VarbitID.FRIS_QUEST));
		questVarbs.put("The Fremennik Trials", new VarTuple(1, VarPlayerID.VIKING));
		questVarbs.put("Garden of Tranquillity", new VarTuple(0, VarbitID.GARDEN_QUEST));
		questVarbs.put("Gertrude's Cat", new VarTuple(1, VarPlayerID.FLUFFS));
		questVarbs.put("Ghosts Ahoy", new VarTuple(0, VarbitID.AHOY_QUESTVAR));
		questVarbs.put("The Giant Dwarf", new VarTuple(0, VarbitID.GIANTDWARF_QUEST));
		questVarbs.put("The Golem", new VarTuple(0, VarbitID.GOLEM_A));
		questVarbs.put("The Grand Tree", new VarTuple(1, VarPlayerID.GRANDTREE));
		questVarbs.put("The Great Brain Robbery", new VarTuple(1, VarPlayerID.BRAIN_QUEST_VAR));
		questVarbs.put("Grim Tales", new VarTuple(0, VarbitID.GRIM_QUEST));
		questVarbs.put("The Hand in the Sand", new VarTuple(0, VarbitID.HANDSAND_QUEST));
		questVarbs.put("Haunted Mine", new VarTuple(1, VarPlayerID.HAUNTEDMINE));
		questVarbs.put("Hazeel Cult", new VarTuple(1, VarPlayerID.HAZEELCULTQUEST));
		questVarbs.put("Heroes' Quest", new VarTuple(1, VarPlayerID.HEROQUEST));
		questVarbs.put("Holy Grail", new VarTuple(1, VarPlayerID.GRAIL));
		questVarbs.put("Horror from the Deep", new VarTuple(0, VarbitID.HORRORQUEST));
		questVarbs.put("Icthlarin's Little Helper", new VarTuple(0, VarbitID.ICS_LITTLE_VAR));
		questVarbs.put("In Aid of the Myreque", new VarTuple(0, VarbitID.MYREQUE_2_QUEST));
		questVarbs.put("In Search of the Myreque", new VarTuple(1, VarPlayerID.ROUTEQUEST));
		questVarbs.put("Jungle Potion", new VarTuple(1, VarPlayerID.JUNGLEPOTION));
		questVarbs.put("King's Ransom", new VarTuple(0, VarbitID.KR_QUEST));
		questVarbs.put("Legends' Quest", new VarTuple(1, VarPlayerID.LEGENDSQUEST));
		questVarbs.put("Lost City", new VarTuple(1, VarPlayerID.ZANARIS));
		questVarbs.put("The Lost Tribe", new VarTuple(0, VarbitID.LOST_TRIBE_QUEST));
		questVarbs.put("Lunar Diplomacy", new VarTuple(0, VarbitID.LUNAR_QUEST_MAIN));
		questVarbs.put("Making Friends with My Arm", new VarTuple(0, VarbitID.MY2ARM_STATUS));
		questVarbs.put("Making History", new VarTuple(0, VarbitID.MAKINGHISTORY_PROG));
		questVarbs.put("Merlin's Crystal", new VarTuple(1, VarPlayerID.ARTHUR));
		questVarbs.put("Monkey Madness I", new VarTuple(1, VarPlayerID.MM_MAIN));
		questVarbs.put("Monkey Madness II", new VarTuple(0, VarbitID.MM2_PROGRESS));
		questVarbs.put("Monk's Friend", new VarTuple(1, VarPlayerID.DRUNKMONKQUEST));
		questVarbs.put("Mountain Daughter", new VarTuple(0, VarbitID.MDAUGHTER_QUEST_VAR));
		questVarbs.put("Mourning's End Part I", new VarTuple(1, VarPlayerID.MOURNING_QUEST));
		questVarbs.put("Mourning's End Part II", new VarTuple(0, VarbitID.MOURNING_QUEST_MAIN));
		questVarbs.put("Murder Mystery", new VarTuple(1, VarPlayerID.MURDERQUEST));
		questVarbs.put("My Arm's Big Adventure", new VarTuple(0, VarbitID.MYARM));
		questVarbs.put("Nature Spirit", new VarTuple(1, VarPlayerID.DRUIDSPIRIT));
		questVarbs.put("Observatory Quest", new VarTuple(1, VarPlayerID.ITGRONIGEN));
		questVarbs.put("Olaf's Quest", new VarTuple(0, VarbitID.OLAF_QUEST_VAR));
		questVarbs.put("One Small Favour", new VarTuple(1, VarPlayerID.ONESMALLFAVOUR));
		questVarbs.put("Plague City", new VarTuple(1, VarPlayerID.ELENAQUEST));
		questVarbs.put("Priest in Peril", new VarTuple(1, VarPlayerID.PRIESTPERIL));
		questVarbs.put("The Queen of Thieves", new VarTuple(0, VarbitID.PISCQUEST));
		questVarbs.put("Rag and Bone Man I", new VarTuple(1, VarPlayerID.RAG_QUEST));
		questVarbs.put("Rag and Bone Man II", new VarTuple(1, VarPlayerID.RAG_BONE_2));
		questVarbs.put("Ratcatchers", new VarTuple(0, VarbitID.RATCATCH_VAR));
		questVarbs.put("Recipe for Disaster", new VarTuple(0, VarbitID.HUNDRED_MAIN_QUEST_VAR));
		questVarbs.put("Recruitment Drive", new VarTuple(0, VarbitID.RD_MAIN));
		questVarbs.put("Regicide", new VarTuple(1, VarPlayerID.REGICIDE_QUEST));
		questVarbs.put("Roving Elves", new VarTuple(1, VarPlayerID.ROVING_ELVES_QUEST));
		questVarbs.put("Royal Trouble", new VarTuple(0, VarbitID.ROYAL_QUEST));
		questVarbs.put("Rum Deal", new VarTuple(1, VarPlayerID.DEAL_QUEST));
		questVarbs.put("Scorpion Catcher", new VarTuple(1, VarPlayerID.SCORPCATCHER));
		questVarbs.put("Sea Slug", new VarTuple(1, VarPlayerID.SEASLUGQUEST));
		questVarbs.put("Shades of Mort'ton", new VarTuple(1, VarPlayerID.MORTTONQUEST));
		questVarbs.put("Shadow of the Storm", new VarTuple(0, VarbitID.AGRITH_QUEST));
		questVarbs.put("Sheep Herder", new VarTuple(1, VarPlayerID.SHEEPHERDERQUEST));
		questVarbs.put("Shilo Village", new VarTuple(1, VarPlayerID.ZOMBIEQUEEN));
		questVarbs.put("The Slug Menace", new VarTuple(0, VarbitID.SLUG2_MAIN));
		questVarbs.put("A Soul's Bane", new VarTuple(0, VarbitID.SOULBANE_PROG));
		questVarbs.put("Spirits of the Elid", new VarTuple(0, VarbitID.ELIDQUEST));
		questVarbs.put("Swan Song", new VarTuple(0, VarbitID.SWANSONG));
		questVarbs.put("Tai Bwo Wannai Trio", new VarTuple(1, VarPlayerID.TBWT_MAIN));
		questVarbs.put("A Tail of Two Cats", new VarTuple(0, VarbitID.TWOCATS_QUEST));
		questVarbs.put("Tale of the Righteous", new VarTuple(0, VarbitID.SHAYZIENQUEST));
		questVarbs.put("A Taste of Hope", new VarTuple(0, VarbitID.MYQ4));
		questVarbs.put("Tears of Guthix", new VarTuple(0, VarbitID.TOG_JUNA_BOWL));
		questVarbs.put("Temple of Ikov", new VarTuple(1, VarPlayerID.IKOV));
		questVarbs.put("Throne of Miscellania", new VarTuple(1, VarPlayerID.MISC_QUEST));
		questVarbs.put("The Tourist Trap", new VarTuple(1, VarPlayerID.DESERTRESCUE));
		questVarbs.put("Tower of Life", new VarTuple(0, VarbitID.TOL_PROG));
		questVarbs.put("Tree Gnome Village", new VarTuple(1, VarPlayerID.TREEQUEST));
		questVarbs.put("Tribal Totem", new VarTuple(1, VarPlayerID.TOTEMQUEST));
		questVarbs.put("Troll Romance", new VarTuple(1, VarPlayerID.TROLL_LOVE));
		questVarbs.put("Troll Stronghold", new VarTuple(1, VarPlayerID.TROLL_QUEST));
		questVarbs.put("Underground Pass", new VarTuple(1, VarPlayerID.UPASS));
		questVarbs.put("Client of Kourend", new VarTuple(0, VarbitID.VEOS_PROGRESS));
		questVarbs.put("Wanted!", new VarTuple(0, VarbitID.WANTED_MAIN));
		questVarbs.put("Watchtower", new VarTuple(1, VarPlayerID.ITWATCHTOWER));
		questVarbs.put("Waterfall Quest", new VarTuple(1, VarPlayerID.WATERFALL_QUEST));
		questVarbs.put("What Lies Below", new VarTuple(0, VarbitID.SUROK_QUEST));
		questVarbs.put("Witch's House", new VarTuple(1, VarPlayerID.BALLQUEST));
		questVarbs.put("Zogre Flesh Eaters", new VarTuple(0, VarbitID.ZOGRE));
		questVarbs.put("The Ascent of Arceuus", new VarTuple(0, VarbitID.ARCQUEST));
		questVarbs.put("The Forsaken Tower", new VarTuple(0, VarbitID.LOVAQUEST));
		questVarbs.put("Song of the Elves", new VarTuple(0, VarbitID.SOTE));
		questVarbs.put("The Fremennik Exiles", new VarTuple(0, VarbitID.VIKINGEXILE));
		questVarbs.put("Sins of the Father", new VarTuple(0, VarbitID.MYQ5));
		questVarbs.put("A Porcine of Interest", new VarTuple(0, VarbitID.PORCINE));
		questVarbs.put("Getting Ahead", new VarTuple(0, VarbitID.GA));
		questVarbs.put("A Kingdom Divided", new VarTuple(0, VarbitID.AKD));
		questVarbs.put("A Night at the Theatre", new VarTuple(0, VarbitID.TOBQUEST));
	}

	@Inject
	private Client client;

	@Inject
	private CrowdsourcingManager manager;

	@Subscribe
	private void onWidgetLoaded(WidgetLoaded event)
	{
		// Only check if the diary/quest widget text is changing
		if (event.getGroupId() != InterfaceID.QUESTJOURNAL)
			return;
		Widget w = client.getWidget(InterfaceID.Questjournal.TEXTLAYER);
		if (w == null)
			return;

		// Get all of the lines of the text area. Each line is a widget.
		Widget[] children = w.getStaticChildren();
		if (children == null)
			return;

		// Concat the strs and append a newline between each widget (since they are on different lines
		StringBuilder s = new StringBuilder();
		if (w.getStaticChildren() != null) {
			for(Widget child : children) {
				s.append(child.getText());
				s.append('\n');
			}
		}

		// Get the title and figure out if this is a quest.
		Widget titleWidget = client.getWidget(InterfaceID.Questjournal.TITLE);
		if (titleWidget == null || titleWidget.getText() == null)
			return;
		String key = titleWidget.getText().substring("<col=7f0000>".length(), titleWidget.getText().length()-6);
		if (CrowdsourcingQuestLog.questVarbs.containsKey(key))
		{
			// If this is a quest other than SOA, send in data for the main quest progress var.
			log.debug("Matched! " + key);
			VarTuple tup = questVarbs.get(key);
			boolean isVarbit = tup.varType == 0;
			int varValue = isVarbit ? client.getVarbitValue(tup.varIndex) : client.getVarpValue(tup.varIndex);
			QuestLogData data = new QuestLogData(key, isVarbit, tup.varIndex, varValue, s.toString().trim());
			manager.storeEvent(data);
		}
		else if ("Shield of Arrav".equals(key))
		{
			// If this is SOA, we have two varps to send data for.
			log.debug("Matched! " + key);
			QuestLogData data = new QuestLogData(key, false, VarPlayerID.PHOENIXGANG, client.getVarpValue(VarPlayerID.PHOENIXGANG), s.toString().trim());
			QuestLogData data2 = new QuestLogData(key, false, VarPlayerID.BLACKARMGANG, client.getVarpValue(VarPlayerID.BLACKARMGANG), s.toString().trim());
			manager.storeEvent(data);
			manager.storeEvent(data2);
		}
		else {
			log.debug("No match! " + key);
		}
	}

}

package com.Crowdsourcing.quest_log;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class QuestLogData
{
	private String qlName;
	private boolean qlIsVarbit;
	private int qlVarbIndex;
	private int qlVarbValue;
	private String qlText;
}

package com.Crowdsourcing.item_sighting;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class ItemSightingData
{
	private int itemId;
	private int itemContainerId;
}

package com.Crowdsourcing.item_sighting;

import com.Crowdsourcing.CrowdsourcingManager;
import com.google.common.collect.ImmutableSet;
import java.util.HashSet;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Item;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.client.eventbus.Subscribe;

@Slf4j
public class CrowdsourcingItemSighting
{

	@Inject
	public CrowdsourcingManager manager;

	@Inject
	public Client client;

	private static final ImmutableSet<Integer> whitelist = ImmutableSet.of(
		34, 84, 89, 421, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 595, 604, 609, 610, 612, 613, 614, 615, 617, 618, 620, 623, 678, 690, 712, 713, 723, 724, 725, 728, 738, 740, 755, 758, 762, 764, 766, 770, 818, 943, 945, 965, 972, 977, 1235, 1410, 1411, 1413, 1415, 1417, 1450, 1459, 1460, 1465, 1481, 1482, 1483, 1484, 1487, 1488, 1489, 1490, 1491, 1492, 1497, 1498, 1499, 1500, 1501, 1502, 1562, 1566, 1567, 1583, 1584, 1686, 1808, 1810, 1847, 1848, 1855, 1867, 1883, 1903, 1940, 1946, 1992, 1996, 2009, 2013, 2042, 2044, 2046, 2050, 2052, 2056, 2058, 2060, 2062, 2066, 2068, 2070, 2072, 2076, 2078, 2082, 2086, 2088, 2090, 2094, 2096, 2098, 2100, 2154, 2156, 2158, 2160, 2173, 2179, 2181, 2183, 2189, 2193, 2197, 2203, 2207, 2211, 2215, 2245, 2251, 2257, 2261, 2263, 2265, 2267, 2269, 2271, 2273, 2275, 2279, 2340, 2345, 2422, 2425, 2474, 2511, 2513, 2514, 2516, 2529, 2530, 2677, 2680, 2682, 2684, 2688, 2689, 2690, 2692, 2695, 2697, 2699, 2709, 2712, 2713, 2714, 2715, 2717, 2718, 2720, 2721, 2724, 2725, 2726, 2728, 2730, 2732, 2734, 2736, 2738, 2740, 2742, 2744, 2745, 2746, 2748, 2749, 2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2775, 2777, 2779, 2781, 2784, 2787, 2789, 2791, 2802, 2804, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2814, 2816, 2818, 2820, 2821, 2822, 2824, 2825, 2826, 2828, 2829, 2830, 2833, 2834, 2835, 2836, 2841, 2842, 2845, 2846, 2847, 2849, 2850, 2853, 2854, 2855, 2856, 2885, 2992, 2993, 2994, 2997, 3006, 3062, 3103, 3114, 3132, 3133, 3135, 3136, 3137, 3147, 3151, 3154, 3165, 3174, 3177, 3179, 3180, 3181, 3182, 3185, 3187, 3209, 3213, 3214, 3215, 3218, 3219, 3222, 3223, 3231, 3233, 3235, 3237, 3241, 3243, 3245, 3247, 3249, 3251, 3253, 3255, 3257, 3259, 3262, 3263, 3264, 3265, 3266, 3269, 3270, 3271, 3272, 3375, 3383, 3417, 3457, 3458, 3459, 3485, 3490, 3491, 3493, 3495, 3496, 3500, 3511, 3515, 3517, 3518, 3519, 3521, 3523, 3527, 3529, 3530, 3531, 3533, 3535, 3536, 3537, 3538, 3539, 3541, 3543, 3545, 3547, 3549, 3550, 3551, 3553, 3555, 3557, 3559, 3561, 3563, 3581, 3583, 3584, 3585, 3586, 3587, 3589, 3591, 3592, 3593, 3595, 3597, 3598, 3600, 3603, 3604, 3606, 3608, 3610, 3611, 3612, 3616, 3617, 3618, 3619, 3620, 3621, 3622, 3623, 3624, 3625, 3626, 3627, 3628, 3629, 3630, 3631, 3632, 3633, 3634, 3635, 3636, 3637, 3638, 3639, 3640, 3641, 3642, 3643, 3644, 3645, 3646, 3647, 3648, 3649, 3650, 3651, 3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659, 3660, 3661, 3662, 3663, 3664, 3665, 3666, 3667, 3680, 3681, 3682, 3683, 3684, 3685, 3686, 3715, 3716, 3718, 3719, 3720, 3721, 3722, 3723, 3724, 3725, 3726, 3727, 3728, 3729, 3730, 3731, 3732, 3733, 3734, 3735, 3736, 3737, 3738, 3739, 3740, 3741, 3742, 3743, 3744, 3745, 3746, 3849, 3869, 3870, 3871, 3872, 3873, 3874, 3875, 3876, 3877, 3878, 3879, 3880, 3881, 3882, 3883, 3884, 3885, 3886, 3887, 3888, 3889, 3890, 3891, 3892, 3893, 3894, 3895, 3904, 3906, 3908, 3910, 3912, 3914, 3916, 3918, 3920, 3922, 3924, 3926, 3928, 3930, 3932, 3934, 3936, 3938, 3940, 3942, 3944, 3946, 3948, 3950, 3952, 3954, 3956, 3958, 3960, 3962, 3964, 3966, 3968, 3970, 3972, 3974, 3976, 3978, 3980, 3981, 3982, 3983, 3984, 3986, 3988, 3990, 3992, 3994, 3996, 3998, 4001, 4005, 4009, 4010, 4018, 4022, 4037, 4039, 4041, 4042, 4075, 4133, 4134, 4135, 4136, 4137, 4138, 4139, 4140, 4141, 4142, 4143, 4144, 4145, 4146, 4147, 4148, 4149, 4150, 4159, 4178, 4180, 4181, 4182, 4183, 4185, 4186, 4191, 4192, 4197, 4198, 4201, 4203, 4205, 4206, 4211, 4212, 4213, 4214, 4215, 4216, 4217, 4218, 4219, 4220, 4221, 4222, 4223, 4224, 4225, 4226, 4227, 4228, 4229, 4230, 4231, 4232, 4233, 4234, 4235, 4237, 4238, 4240, 4242, 4243, 4244, 4245, 4246, 4248, 4249, 4253, 4254, 4256, 4258, 4259, 4260, 4262, 4263, 4264, 4265, 4266, 4267, 4268, 4269, 4270, 4271, 4273, 4274, 4275, 4276, 4283, 4295, 4297, 4415, 4428, 4429, 4430, 4431, 4432, 4433, 4434, 4447, 4495, 4498, 4500, 4501, 4519, 4520, 4521, 4524, 4558, 4559, 4560, 4561, 4562, 4563, 4564, 4572, 4574, 4575, 4576, 4577, 4584, 4595, 4602, 4614, 4625, 4653, 4658, 4659, 4660, 4661, 4662, 4663, 4664, 4665, 4666, 4667, 4678, 4680, 4681, 4692, 4701, 4704, 4809, 4810, 4811, 4814, 4815, 4816, 4818, 4829, 4836, 4837, 4838, 4840, 4858, 4860, 4863, 4864, 4865, 4866, 4884, 4890, 4914, 4920, 4926, 4929, 4931, 4936, 4937, 4944, 4953, 4954, 4955, 4956, 4959, 4960, 4961, 4962, 4967, 4978, 4979, 4984, 4985, 4986, 4991, 4992, 5002, 5021, 5023, 5054, 5056, 5057, 5058, 5060, 5061, 5062, 5063, 5064, 5068, 5073, 5087, 5089, 5093, 5095, 5171, 5327, 5328, 5349, 5356, 5363, 5369, 5511, 5518, 5546, 5549, 5550, 5551, 5552, 5559, 5561, 5562, 5563, 5564, 5565, 5566, 5567, 5568, 5569, 5570, 5571, 5572, 5573, 5577, 5578, 5579, 5580, 5581, 5582, 5583, 5584, 5585, 5586, 5587, 5588, 5589, 5590, 5591, 5592, 5593, 5594, 5595, 5596, 5597, 5598, 5599, 5600, 5601, 5602, 5603, 5604, 5605, 5607, 5608, 5609, 5610, 5614, 5615, 5684, 5702, 5732, 5733, 5738, 5745, 5749, 5753, 5771, 5773, 5775, 5777, 5779, 5781, 5783, 5785, 5787, 5789, 5791, 5793, 5795, 5797, 5799, 5801, 5803, 5805, 5807, 5809, 5811, 5813, 5815, 5819, 5821, 5823, 5825, 5827, 5829, 5831, 5833, 5835, 5837, 5839, 5841, 5843, 5845, 5847, 5849, 5851, 5853, 5855, 5857, 5859, 5861, 5863, 5865, 5867, 5869, 5871, 5873, 5875, 5877, 5879, 5881, 5883, 5885, 5887, 5889, 5891, 5893, 5895, 5899, 5901, 5903, 5905, 5907, 5909, 5911, 5913, 5915, 5917, 5919, 5921, 5923, 5925, 5927, 5929, 5939, 5942, 5945, 5951, 5990, 6026, 6028, 6030, 6053, 6063, 6084, 6085, 6086, 6087, 6088, 6105, 6122, 6123, 6178, 6179, 6204, 6206, 6208, 6217, 6219, 6221, 6223, 6225, 6227, 6229, 6231, 6233, 6239, 6241, 6243, 6245, 6247, 6249, 6251, 6253, 6255, 6261, 6263, 6265, 6267, 6269, 6271, 6273, 6275, 6277, 6301, 6303, 6412, 6414, 6422, 6424, 6426, 6428, 6430, 6432, 6434, 6436, 6438, 6450, 6452, 6453, 6454, 6455, 6456, 6457, 6458, 6459, 6460, 6461, 6462, 6463, 6464, 6466, 6467, 6468, 6478, 6479, 6514, 6515, 6516, 6517, 6518, 6519, 6520, 6521, 6525, 6526, 6543, 6546, 6549, 6550, 6551, 6552, 6553, 6554, 6555, 6556, 6557, 6558, 6559, 6561, 6637, 6640, 6642, 6643, 6644, 6645, 6646, 6647, 6652, 6657, 6658, 6659, 6660, 6661, 6662, 6663, 6675, 6677, 6678, 6679, 6680, 6683, 6695, 6708, 6709, 6710, 6717, 6741, 6743, 6756, 6757, 6758, 6759, 6768, 6771, 6774, 6775, 6780, 6781, 6782, 6791, 6793, 6796, 6797, 6808, 6811, 6820, 6822, 6823, 6824, 6825, 6826, 6827, 6828, 6829, 6830, 6831, 6832, 6833, 6834, 6835, 6836, 6837, 6838, 6839, 6840, 6841, 6842, 6843, 6844, 6845, 6846, 6847, 6848, 6849, 6850, 6851, 6852, 6853, 6854, 6855, 6864, 6868, 6869, 6870, 6871, 6872, 6873, 6874, 6875, 6876, 6877, 6878, 6879, 6880, 6881, 6882, 6887, 6888, 6912, 6916, 6918, 6924, 6926, 6946, 6947, 6948, 6949, 6950, 6951, 6952, 6953, 6954, 6956, 6957, 6964, 6967, 6969, 6985, 6986, 6987, 6988, 6989, 6991, 6994, 6996, 6997, 6999, 7002, 7050, 7092, 7094, 7096, 7097, 7098, 7099, 7100, 7101, 7102, 7103, 7104, 7105, 7106, 7107, 7108, 7109, 7110, 7118, 7119, 7120, 7121, 7122, 7143, 7145, 7146, 7147, 7148, 7149, 7150, 7155, 7156, 7160, 7204, 7226, 7228, 7237, 7240, 7242, 7244, 7246, 7255, 7257, 7259, 7261, 7263, 7264, 7265, 7267, 7269, 7273, 7277, 7280, 7281, 7282, 7283, 7285, 7286, 7287, 7288, 7289, 7291, 7293, 7295, 7297, 7300, 7303, 7306, 7308, 7310, 7311, 7312, 7314, 7316, 7318, 7413, 7414, 7420, 7463, 7466, 7470, 7471, 7473, 7475, 7476, 7477, 7478, 7498, 7519, 7547, 7548, 7550, 7552, 7554, 7556, 7558, 7560, 7562, 7565, 7573, 7575, 7586, 7597, 7598, 7599, 7600, 7601, 7602, 7603, 7604, 7605, 7606, 7607, 7608, 7609, 7610, 7611, 7612, 7613, 7614, 7615, 7616, 7617, 7618, 7620, 7636, 7638, 7641, 7642, 7643, 7644, 7645, 7647, 7648, 7654, 7656, 7658, 7682, 7684, 7686, 7692, 7694, 7696, 7698, 7700, 7702, 7704, 7706, 7708, 7710, 7712, 7714, 7728, 7730, 7731, 7732, 7733, 7734, 7740, 7744, 7746, 7748, 7750, 7752, 7756, 7774, 7775, 7776, 7781, 7787, 7789, 7792, 7796, 7804, 7813, 7814, 7816, 7817, 7819, 7820, 7822, 7823, 7825, 7826, 7828, 7829, 7831, 7832, 7841, 7843, 7844, 7845, 7846, 7847, 7848, 7849, 7850, 7852, 7853, 7855, 7856, 7858, 7859, 7861, 7864, 7865, 7867, 7868, 7870, 7871, 7873, 7874, 7875, 7876, 7877, 7881, 7882, 7883, 7885, 7886, 7887, 7888, 7889, 7893, 7894, 7896, 7897, 7898, 7900, 7901, 7903, 7904, 7909, 7910, 7911, 7912, 7914, 7915, 7916, 7921, 7928, 7929, 7930, 7931, 7932, 7933, 7939, 7941, 7952, 7957, 7958, 7959, 7961, 7962, 7963, 7964, 7966, 7968, 7970, 7971, 7974, 7986, 7987, 8003, 8004, 8005, 8020, 8022, 8023, 8024, 8025, 8026, 8027, 8028, 8029, 8030, 8031, 8032, 8033, 8034, 8035, 8036, 8037, 8038, 8039, 8040, 8041, 8042, 8043, 8044, 8045, 8046, 8047, 8048, 8049, 8050, 8051, 8052, 8053, 8054, 8055, 8056, 8057, 8058, 8059, 8060, 8061, 8062, 8063, 8064, 8065, 8066, 8067, 8068, 8069, 8070, 8071, 8072, 8073, 8074, 8075, 8076, 8077, 8078, 8079, 8080, 8081, 8082, 8083, 8084, 8085, 8086, 8087, 8088, 8089, 8090, 8091, 8093, 8094, 8095, 8096, 8097, 8098, 8099, 8100, 8101, 8102, 8103, 8104, 8105, 8106, 8107, 8108, 8109, 8110, 8111, 8112, 8113, 8114, 8115, 8116, 8117, 8118, 8119, 8120, 8121, 8122, 8123, 8124, 8125, 8126, 8127, 8128, 8129, 8130, 8131, 8132, 8133, 8134, 8135, 8136, 8137, 8138, 8139, 8140, 8141, 8142, 8143, 8144, 8145, 8146, 8147, 8148, 8149, 8150, 8151, 8152, 8153, 8154, 8155, 8156, 8157, 8158, 8159, 8160, 8161, 8162, 8163, 8164, 8165, 8166, 8167, 8168, 8169, 8170, 8171, 8172, 8173, 8174, 8175, 8176, 8177, 8178, 8179, 8180, 8181, 8182, 8183, 8184, 8185, 8186, 8187, 8188, 8189, 8190, 8191, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8203, 8204, 8205, 8206, 8207, 8208, 8209, 8210, 8211, 8212, 8213, 8214, 8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8223, 8224, 8225, 8226, 8227, 8228, 8229, 8230, 8231, 8232, 8233, 8234, 8235, 8236, 8237, 8238, 8239, 8240, 8241, 8242, 8243, 8244, 8245, 8246, 8247, 8248, 8249, 8250, 8251, 8252, 8253, 8254, 8255, 8256, 8257, 8258, 8259, 8260, 8261, 8262, 8263, 8264, 8265, 8266, 8267, 8268, 8269, 8270, 8271, 8272, 8273, 8274, 8275, 8276, 8277, 8278, 8279, 8280, 8281, 8282, 8283, 8284, 8285, 8286, 8287, 8288, 8289, 8290, 8291, 8292, 8293, 8294, 8295, 8296, 8297, 8298, 8299, 8300, 8301, 8302, 8303, 8304, 8305, 8306, 8307, 8308, 8309, 8310, 8311, 8312, 8313, 8314, 8315, 8316, 8317, 8318, 8319, 8320, 8321, 8322, 8323, 8324, 8325, 8326, 8327, 8328, 8329, 8330, 8331, 8332, 8333, 8334, 8335, 8336, 8337, 8338, 8339, 8340, 8341, 8342, 8343, 8344, 8345, 8346, 8347, 8348, 8349, 8350, 8351, 8352, 8353, 8354, 8355, 8356, 8357, 8358, 8359, 8360, 8361, 8362, 8363, 8364, 8365, 8366, 8367, 8368, 8369, 8370, 8371, 8372, 8373, 8374, 8375, 8376, 8377, 8378, 8379, 8380, 8381, 8382, 8383, 8384, 8385, 8386, 8387, 8388, 8389, 8390, 8391, 8392, 8393, 8394, 8395, 8396, 8397, 8398, 8399, 8400, 8401, 8402, 8403, 8404, 8405, 8406, 8407, 8408, 8409, 8410, 8411, 8412, 8413, 8414, 8415, 8416, 8466, 8468, 8470, 8472, 8474, 8476, 8480, 8482, 8486, 8490, 8492, 8500, 8502, 8504, 8506, 8508, 8512, 8514, 8516, 8520, 8526, 8528, 8530, 8532, 8534, 8536, 8538, 8540, 8542, 8544, 8546, 8548, 8550, 8552, 8554, 8556, 8558, 8560, 8562, 8564, 8566, 8568, 8570, 8572, 8574, 8576, 8580, 8586, 8588, 8594, 8596, 8598, 8602, 8606, 8608, 8610, 8612, 8614, 8616, 8618, 8620, 8622, 8624, 8626, 8628, 8630, 8632, 8634, 8636, 8638, 8640, 8642, 8644, 8646, 8648, 8650, 8652, 8656, 8658, 8660, 8662, 8666, 8668, 8670, 8674, 8678, 8680, 8682, 8684, 8686, 8688, 8690, 8692, 8694, 8696, 8700, 8702, 8706, 8708, 8710, 8714, 8720, 8722, 8726, 8728, 8730, 8732, 8736, 8740, 8742, 8744, 8746, 8748, 8752, 8754, 8756, 8758, 8760, 8764, 8766, 8774, 8796, 8857, 8858, 8859, 8860, 8861, 8862, 8863, 8864, 8871, 8887, 8888, 8889, 8900, 8903, 8905, 8907, 8909, 8911, 8913, 8915, 8917, 8919, 8936, 8943, 8944, 8945, 8946, 8947, 8948, 8949, 8950, 8972, 8974, 8976, 8977, 8986, 8987, 8990, 9012, 9055, 9067, 9086, 9088, 9089, 9090, 9091, 9092, 9093, 9105, 9106, 9415, 9480, 9481, 9487, 9489, 9508, 9510, 9512, 9514, 9516, 9518, 9520, 9522, 9524, 9527, 9529, 9531, 9533, 9535, 9538, 9540, 9542, 9544, 9547, 9549, 9551, 9553, 9590, 9591, 9595, 9596, 9598, 9601, 9602, 9604, 9605, 9608, 9610, 9612, 9614, 9619, 9623, 9633, 9646, 9647, 9648, 9650, 9651, 9652, 9653, 9654, 9655, 9656, 9657, 9658, 9659, 9660, 9662, 9665, 9702, 9716, 9747, 9750, 9753, 9759, 9771, 9774, 9780, 9783, 9789, 9792, 9795, 9798, 9807, 9817, 9818, 9819, 9820, 9821, 9822, 9823, 9824, 9825, 9826, 9827, 9828, 9829, 9830, 9831, 9832, 9833, 9834, 9835, 9836, 9837, 9838, 9839, 9840, 9841, 9842, 9843, 9844, 9845, 9846, 9847, 9848, 9851, 9852, 9853, 9854, 9855, 9856, 9857, 9858, 9859, 9860, 9861, 9863, 9864, 9865, 9866, 9867, 9901, 9902, 9904, 9906, 9907, 9908, 9909, 9910, 9911, 9912, 9913, 9914, 9915, 9916, 9917, 9918, 9919, 9933, 9935, 9936, 9937, 9938, 9939, 9940, 9941, 9942, 9943, 9947, 9948, 9951, 9952, 9953, 9954, 9955, 9956, 9957, 9958, 9959, 9960, 9961, 9962, 9963, 9964, 9965, 9966, 9967, 9968, 9969, 9970, 9971, 9972, 9973, 9974, 9975, 9976, 9977, 10023, 10024, 10073, 10074, 10175, 10177, 10181, 10183, 10185, 10186, 10187, 10189, 10190, 10191, 10193, 10195, 10197, 10198, 10199, 10201, 10203, 10204, 10205, 10206, 10207, 10208, 10209, 10211, 10212, 10213, 10215, 10217, 10219, 10221, 10223, 10224, 10225, 10227, 10229, 10231, 10233, 10235, 10237, 10239, 10241, 10243, 10245, 10246, 10247, 10249, 10251, 10253, 10255, 10257, 10259, 10260, 10261, 10263, 10265, 10267, 10268, 10269, 10271, 10273, 10275, 10276, 10277, 10279, 10330, 10332, 10336, 10338, 10340, 10342, 10344, 10346, 10348, 10350, 10352, 10485, 10486, 10506, 10510, 10511, 10513, 10514, 10515, 10516, 10517, 10518, 10519, 10520, 10521, 10522, 10523, 10524, 10525, 10526, 10527, 10528, 10529, 10530, 10531, 10532, 10533, 10534, 10535, 10536, 10537, 10538, 10539, 10540, 10541, 10542, 10543, 10544, 10545, 10546, 10554, 10556, 10557, 10558, 10559, 10560, 10561, 10563, 10566, 10567, 10582, 10583, 10591, 10592, 10603, 10604, 10605, 10606, 10607, 10608, 10609, 10610, 10611, 10612, 10613, 10614, 10615, 10616, 10617, 10618, 10619, 10620, 10621, 10622, 10623, 10624, 10625, 10626, 10627, 10628, 10629, 10630, 10631, 10632, 10633, 10634, 10635, 10636, 10637, 10638, 10639, 10640, 10641, 10642, 10643, 10644, 10645, 10646, 10647, 10648, 10649, 10650, 10651, 10652, 10653, 10654, 10655, 10656, 10657, 10658, 10659, 10660, 10661, 10662, 10663, 10664, 10665, 10667, 10670, 10671, 10672, 10673, 10674, 10675, 10676, 10677, 10678, 10679, 10680, 10681, 10682, 10683, 10684, 10685, 10686, 10687, 10688, 10689, 10690, 10691, 10692, 10693, 10694, 10695, 10696, 10697, 10698, 10699, 10700, 10701, 10702, 10703, 10704, 10705, 10706, 10707, 10708, 10709, 10710, 10711, 10712, 10713, 10714, 10715, 10716, 10717, 10718, 10719, 10720, 10721, 10722, 10723, 10724, 10725, 10726, 10727, 10728, 10729, 10730, 10731, 10732, 10733, 10734, 10735, 10736, 10737, 10738, 10739, 10740, 10741, 10742, 10743, 10744, 10745, 10746, 10747, 10748, 10749, 10750, 10751, 10752, 10753, 10754, 10755, 10756, 10757, 10758, 10759, 10760, 10761, 10762, 10763, 10764, 10765, 10766, 10767, 10768, 10769, 10770, 10771, 10772, 10773, 10774, 10775, 10776, 10777, 10778, 10779, 10780, 10781, 10782, 10783, 10784, 10785, 10786, 10787, 10788, 10789, 10790, 10791, 10792, 10793, 10794, 10795, 10796, 10797, 10798, 10799, 10800, 10801, 10802, 10803, 10804, 10805, 10806, 10807, 10829, 10830, 10831, 10832, 10833, 10834, 10835, 10840, 10841, 10842, 10852, 10853, 10854, 10855, 10856, 10883, 10884, 10886, 10889, 10893, 10894, 10895, 10896, 10897, 10898, 10899, 10904, 10911, 10913, 10915, 10919, 10921, 10923, 10945, 10946, 10947, 10948, 10949, 10950, 10951, 10966, 10967, 10968, 10969, 10983, 10984, 10985, 10986, 10987, 10988, 10989, 10990, 10991, 10992, 10993, 10994, 10997, 10998, 11003, 11006, 11007, 11008, 11009, 11015, 11016, 11017, 11018, 11023, 11024, 11025, 11026, 11027, 11028, 11029, 11030, 11031, 11032, 11033, 11035, 11040, 11041, 11044, 11046, 11047, 11048, 11049, 11050, 11051, 11052, 11053, 11054, 11055, 11056, 11057, 11058, 11059, 11062, 11068, 11071, 11078, 11087, 11094, 11117, 11130, 11132, 11135, 11137, 11157, 11158, 11164, 11165, 11167, 11169, 11182, 11185, 11186, 11187, 11188, 11189, 11195, 11210, 11267, 11268, 11269, 11271, 11274, 11277, 11278, 11286, 11335, 11342, 11344, 11345, 11346, 11347, 11348, 11349, 11350, 11351, 11352, 11354, 11356, 11358, 11359, 11360, 11361, 11362, 11363, 11364, 11365, 11366, 11409, 11416, 11427, 11428, 11447, 11489, 11491, 11493, 11495, 11525, 11674, 11675, 11676, 11678, 11679, 11680, 11681, 11686, 11687, 11688, 11689, 11690, 11691, 11692, 11693, 11694, 11695, 11696, 11697, 11698, 11699, 11700, 11701, 11702, 11703, 11710, 11712, 11713, 11714, 11715, 11716, 11717, 11718, 11720, 11721, 11748, 11749, 11750, 11751, 11752, 11753, 11754, 11755, 11756, 11757, 11758, 11759, 11760, 11761, 11762, 11763, 11764, 11765, 11766, 11767, 11768, 11769, 11774, 11775, 11776, 11777, 11778, 11779, 11780, 11781, 11782, 11783, 11793, 11794, 11796, 11800, 11848, 11851, 11853, 11855, 11857, 11859, 11861, 11876, 11887, 11910, 11912, 11914, 11916, 11917, 11918, 11922, 11923, 11928, 11930, 11938, 11996, 11997, 12010, 12017, 12022, 12024, 12026, 12028, 12030, 12032, 12034, 12036, 12038, 12040, 12042, 12043, 12044, 12046, 12048, 12050, 12051, 12052, 12053, 12054, 12055, 12056, 12059, 12060, 12061, 12062, 12073, 12076, 12080, 12082, 12084, 12094, 12095, 12096, 12100, 12104, 12107, 12108, 12110, 12111, 12112, 12113, 12117, 12119, 12120, 12121, 12122, 12126, 12129, 12131, 12133, 12134, 12136, 12142, 12143, 12148, 12149, 12152, 12154, 12157, 12158, 12159, 12160, 12161, 12163, 12165, 12166, 12171, 12173, 12176, 12177, 12180, 12182, 12183, 12184, 12185, 12188, 12389, 12417, 12419, 12420, 12421, 12422, 12424, 12426, 12437, 12457, 12458, 12459, 12526, 12532, 12534, 12543, 12545, 12547, 12549, 12551, 12553, 12555, 12557, 12559, 12561, 12563, 12565, 12580, 12583, 12586, 12589, 12591, 12592, 12594, 12601, 12643, 12644, 12645, 12650, 12656, 12657, 12659, 12660, 12661, 12662, 12663, 12664, 12665, 12666, 12667, 12668, 12669, 12670, 12671, 12672, 12673, 12674, 12675, 12676, 12677, 12678, 12679, 12680, 12681, 12682, 12683, 12684, 12685, 12686, 12687, 12688, 12689, 12690, 12693, 12694, 12703, 12704, 12705, 12706, 12707, 12708, 12709, 12710, 12711, 12712, 12713, 12714, 12715, 12716, 12717, 12718, 12719, 12720, 12721, 12722, 12723, 12724, 12725, 12726, 12746, 12747, 12748, 12749, 12750, 12751, 12752, 12753, 12754, 12755, 12756, 12757, 12759, 12761, 12766, 12767, 12769, 12771, 12792, 12793, 12794, 12798, 12800, 12802, 12808, 12813, 12814, 12815, 12816, 12819, 12823, 12827, 12835, 12836, 12837, 12838, 12839, 12840, 12841, 12842, 12843, 12844, 12846, 12848, 12849, 12856, 12861, 12862, 12875, 12881, 12885, 12897, 12898, 12902, 12927, 12955, 12980, 13036, 13038, 13080, 13081, 13082, 13083, 13084, 13085, 13086, 13087, 13088, 13089, 13090, 13091, 13092, 13093, 13094, 13095, 13096, 13097, 13098, 13099, 13100, 13101, 13161, 13163, 13165, 13167, 13169, 13171, 13178, 13179, 13181, 13183, 13184, 13185, 13186, 13187, 13193, 13195, 13196, 13197, 13198, 13200, 13201, 13205, 13206, 13211, 13219, 13224, 13231, 13242, 13244, 13248, 13273, 13282, 13289, 13290, 13291, 13292, 13293, 13294, 13295, 13296, 13297, 13298, 13299, 13300, 13301, 13302, 13303, 13304, 13305, 13306, 13307, 13317, 13318, 13319, 13323, 13324, 13325, 13326, 13327, 13340, 13341, 13342, 13345, 13346, 13347, 13348, 13349, 13350, 13351, 13352, 13415, 13429, 13430, 13432, 13434, 13435, 13436, 13438, 13447, 13450, 13456, 13462, 13465, 13468, 13471, 13477, 13498, 13558, 13559, 13560, 13561, 13562, 13580, 13582, 13584, 13586, 13588, 13590, 13592, 13594, 13596, 13598, 13600, 13602, 13604, 13606, 13608, 13610, 13612, 13614, 13616, 13618, 13620, 13622, 13624, 13626, 13628, 13630, 13632, 13634, 13636, 13638, 13653, 13654, 13656, 13661, 13662, 13666, 13668, 13670, 13672, 13674, 13676, 13678, 13680, 15297, 15303, 15304, 15309, 15344, 15345, 15346, 16684, 16888, 16889, 16890, 16891, 16892, 16893, 17152, 19473, 19478, 19492, 19493, 19496, 19501, 19505, 19507, 19509, 19517, 19519, 19521, 19523, 19527, 19528, 19532, 19535, 19538, 19541, 19558, 19559, 19560, 19562, 19567, 19568, 19569, 19595, 19598, 19604, 19607, 19639, 19643, 19647, 19701, 19718, 19732, 19735, 19745, 19748, 19749, 19757, 19758, 19759, 19760, 19761, 19764, 19765, 19768, 19769, 19771, 19773, 19774, 19775, 19777, 19778, 19779, 19780, 19781, 19782, 19783, 19784, 19787, 19788, 19791, 19793, 19794, 19797, 19799, 19800, 19808, 19809, 19812, 19813, 19815, 19816, 19817, 19818, 19825, 19826, 19827, 19829, 19832, 19833, 19834, 19841, 19843, 19845, 19849, 19850, 19851, 19855, 19861, 19863, 19865, 19867, 19869, 19871, 19873, 19875, 19877, 19879, 19881, 19892, 19893, 19896, 19897, 19909, 20005, 20011, 20014, 20068, 20071, 20095, 20098, 20107, 20146, 20149, 20155, 20199, 20202, 20211, 20282, 20283, 20284, 20285, 20286, 20287, 20288, 20289, 20290, 20291, 20292, 20293, 20294, 20295, 20296, 20297, 20298, 20299, 20300, 20301, 20302, 20303, 20304, 20305, 20306, 20307, 20308, 20309, 20310, 20311, 20312, 20313, 20314, 20315, 20316, 20317, 20318, 20319, 20320, 20321, 20322, 20323, 20324, 20325, 20326, 20327, 20328, 20329, 20330, 20331, 20332, 20333, 20334, 20335, 20336, 20337, 20338, 20339, 20340, 20341, 20342, 20343, 20344, 20345, 20346, 20347, 20348, 20349, 20350, 20351, 20352, 20353, 20354, 20368, 20388, 20389, 20391, 20392, 20393, 20394, 20395, 20396, 20397, 20398, 20399, 20400, 20401, 20402, 20403, 20404, 20406, 20408, 20409, 20410, 20411, 20412, 20413, 20414, 20415, 20416, 20417, 20418, 20419, 20420, 20421, 20424, 20427, 20428, 20429, 20430, 20431, 20445, 20447, 20449, 20451, 20453, 20455, 20457, 20459, 20463, 20465, 20467, 20469, 20471, 20473, 20475, 20477, 20479, 20481, 20483, 20485, 20487, 20489, 20491, 20493, 20495, 20497, 20499, 20501, 20503, 20505, 20507, 20509, 20511, 20513, 20515, 20523, 20524, 20525, 20527, 20532, 20533, 20534, 20535, 20536, 20537, 20539, 20541, 20547, 20548, 20549, 20550, 20551, 20552, 20553, 20554, 20555, 20556, 20558, 20559, 20560, 20561, 20562, 20563, 20564, 20565, 20566, 20567, 20568, 20569, 20570, 20571, 20572, 20573, 20574, 20575, 20576, 20577, 20579, 20580, 20581, 20582, 20583, 20584, 20585, 20587, 20593, 20594, 20598, 20600, 20601, 20602, 20603, 20604, 20605, 20607, 20608, 20617, 20618, 20619, 20620, 20621, 20622, 20623, 20624, 20625, 20626, 20627, 20628, 20629, 20630, 20631, 20632, 20633, 20634, 20635, 20636, 20637, 20638, 20639, 20640, 20641, 20642, 20643, 20644, 20645, 20646, 20647, 20648, 20649, 20650, 20651, 20652, 20653, 20654, 20745, 20746, 20762, 20763, 20766, 20767, 20768, 20769, 20770, 20771, 20772, 20781, 20782, 20784, 20785, 20792, 20794, 20796, 20802, 20803, 20804, 20805, 20806, 20807, 20808, 20809, 20810, 20811, 20812, 20813, 20814, 20815, 20816, 20817, 20818, 20819, 20820, 20821, 20822, 20823, 20824, 20825, 20826, 20827, 20828, 20829, 20830, 20831, 20854, 20855, 20856, 20857, 20858, 20859, 20860, 20861, 20862, 20863, 20864, 20865, 20866, 20869, 20870, 20871, 20872, 20873, 20874, 20875, 20876, 20877, 20878, 20879, 20880, 20881, 20882, 20884, 20913, 20914, 20915, 20916, 20917, 20918, 20919, 20920, 20925, 20926, 20927, 20928, 20929, 20930, 20931, 20932, 20937, 20938, 20939, 20940, 20941, 20942, 20943, 20944, 20949, 20950, 20951, 20952, 20953, 20954, 20955, 20956, 20961, 20962, 20963, 20964, 20965, 20966, 20967, 20968, 20973, 20974, 20975, 20976, 20977, 20978, 20979, 20980, 20985, 20986, 20987, 20988, 20989, 20990, 20991, 20992, 21027, 21033, 21037, 21038, 21039, 21040, 21041, 21042, 21043, 21046, 21060, 21063, 21066, 21069, 21072, 21075, 21078, 21186, 21187, 21188, 21189, 21192, 21193, 21195, 21196, 21197, 21202, 21206, 21207, 21208, 21213, 21216, 21217, 21218, 21219, 21220, 21221, 21222, 21223, 21224, 21225, 21226, 21227, 21228, 21229, 21230, 21231, 21232, 21233, 21234, 21235, 21236, 21237, 21238, 21239, 21240, 21241, 21242, 21243, 21244, 21245, 21246, 21247, 21248, 21249, 21250, 21251, 21252, 21253, 21254, 21261, 21262, 21263, 21264, 21270, 21278, 21284, 21287, 21289, 21291, 21297, 21308, 21309, 21310, 21311, 21312, 21313, 21340, 21352, 21359, 21360, 21391, 21396, 21397, 21398, 21399, 21400, 21401, 21402, 21403, 21404, 21405, 21406, 21407, 21408, 21409, 21410, 21411, 21412, 21413, 21414, 21415, 21416, 21417, 21418, 21419, 21420, 21421, 21422, 21423, 21424, 21425, 21426, 21427, 21428, 21429, 21430, 21431, 21432, 21433, 21434, 21435, 21436, 21437, 21438, 21507, 21508, 21511, 21512, 21515, 21518, 21524, 21528, 21529, 21530, 21531, 21532, 21533, 21534, 21535, 21536, 21537, 21538, 21549, 21551, 21553, 21612, 21616, 21634, 21637, 21670, 21672, 21674, 21676, 21678, 21680, 21682, 21693, 21697, 21698, 21701, 21704, 21707, 21710, 21711, 21712, 21713, 21714, 21715, 21716, 21717, 21718, 21719, 21722, 21723, 21745, 21758, 21766, 21768, 21788, 21797, 21798, 21799, 21804, 21807, 21810, 21813, 21826, 21829, 21832, 21841, 21842, 21843, 21844, 21845, 21846, 21861, 21862, 21863, 21864, 21865, 21866, 21867, 21868, 21869, 21870, 21871, 21872, 21873, 21874, 21875, 21882, 21885, 21888, 21895, 21911, 21912, 21913, 21914, 21916, 21918, 21921, 21981, 21997, 22000, 22001, 22006, 22009, 22010, 22011, 22012, 22013, 22014, 22015, 22016, 22017, 22018, 22019, 22020, 22021, 22022, 22023, 22024, 22025, 22026, 22027, 22028, 22029, 22030, 22031, 22032, 22035, 22079, 22083, 22084, 22085, 22086, 22087, 22088, 22089, 22090, 22091, 22092, 22093, 22094, 22095, 22096, 22097, 22100, 22103, 22116, 22127, 22129, 22131, 22133, 22135, 22137, 22139, 22141, 22143, 22145, 22147, 22149, 22151, 22153, 22155, 22157, 22159, 22161, 22163, 22165, 22167, 22169, 22171, 22173, 22175, 22177, 22179, 22181, 22183, 22185, 22187, 22189, 22191, 22207, 22208, 22221, 22224, 22227, 22228, 22229, 22230, 22236, 22239, 22242, 22244, 22287, 22290, 22299, 22302, 22305, 22308, 22309, 22310, 22311, 22312, 22313, 22314, 22315, 22318, 22319, 22320, 22321, 22330, 22331, 22333, 22335, 22337, 22338, 22339, 22340, 22341, 22342, 22343, 22344, 22345, 22346, 22347, 22348, 22349, 22350, 22367, 22372, 22376, 22378, 22380, 22382, 22384, 22386, 22388, 22390, 22392, 22394, 22396, 22413, 22430, 22437, 22441, 22443, 22473, 22477, 22496, 22498, 22500, 22502, 22519, 22520, 22525, 22528, 22529, 22530, 22532, 22534, 22535, 22536, 22537, 22541, 22552, 22588, 22589, 22606, 22607, 22608, 22609, 22610, 22613, 22616, 22619, 22622, 22625, 22628, 22631, 22634, 22636, 22638, 22641, 22644, 22647, 22650, 22653, 22656, 22663, 22664, 22665, 22666, 22677, 22678, 22679, 22680, 22681, 22682, 22683, 22686, 22687, 22688, 22691, 22694, 22697, 22700, 22704, 22705, 22706, 22707, 22708, 22709, 22721, 22722, 22723, 22724, 22725, 22726, 22727, 22728, 22729, 22730, 22744, 22758, 22762, 22763, 22764, 22765, 22766, 22767, 22768, 22769, 22770, 22771, 22772, 22773, 22774, 22779, 22789, 22800, 22803, 22812, 22814, 22816, 22817, 22957, 22969, 22983, 22999, 23040, 23041, 23042, 23043, 23062, 23073, 23081, 23082, 23103, 23104, 23105, 23106, 23107, 23124, 23131, 23132, 23135, 23139, 23140, 23142, 23145, 23150, 23151, 23152, 23153, 23154, 23155, 23156, 23158, 23163, 23165, 23168, 23174, 23184, 23194, 23197, 23242, 23249, 23258, 23261, 23264, 23267, 23276, 23279, 23336, 23339, 23342, 23345, 23348, 23381, 23416, 23418, 23419, 23420, 23421, 23422, 23423, 23424, 23425, 23426, 23427, 23428, 23429, 23430, 23431, 23432, 23433, 23434, 23435, 23436, 23437, 23438, 23439, 23440, 23441, 23450, 23451, 23452, 23453, 23454, 23455, 23456, 23457, 23460, 23461, 23462, 23463, 23464, 23465, 23466, 23467, 23468, 23469, 23470, 23471, 23472, 23473, 23474, 23475, 23476, 23477, 23478, 23479, 23480, 23481, 23482, 23483, 23484, 23485, 23486, 23487, 23489, 23516, 23520, 23547, 23549, 23555, 23557, 23561, 23563, 23565, 23573, 23581, 23583, 23585, 23587, 23589, 23605, 23607, 23609, 23615, 23617, 23620, 23622, 23624, 23626, 23630, 23633, 23637, 23638, 23639, 23640, 23646, 23648, 23652, 23654, 23655, 23657, 23667, 23675, 23782, 23783, 23789, 23791, 23792, 23793, 23795, 23808, 23820, 23821, 23822, 23823, 23824, 23830, 23831, 23832, 23833, 23834, 23835, 23836, 23837, 23838, 23839, 23840, 23841, 23842, 23843, 23844, 23845, 23846, 23847, 23848, 23849, 23850, 23851, 23852, 23853, 23854, 23855, 23856, 23857, 23858, 23861, 23862, 23863, 23864, 23865, 23866, 23867, 23868, 23869, 23870, 23871, 23872, 23873, 23874, 23875, 23876, 23877, 23878, 23879, 23880, 23881, 23882, 23883, 23884, 23885, 23886, 23887, 23888, 23889, 23890, 23891, 23892, 23893, 23894, 23895, 23896, 23897, 23898, 23899, 23900, 23901, 23902, 23903, 23904, 23905, 23906, 23907, 23911, 23913, 23915, 23917, 23919, 23921, 23923, 23925, 23927, 23931, 23933, 23935, 23937, 23939, 23941, 23973, 23977, 23981, 23989, 23993, 23995, 24130, 24132, 24134, 24135, 24136, 24137, 24138, 24139, 24140, 24141, 24142, 24143, 24147, 24149, 24151, 24153, 24155, 24157, 24158, 24159, 24160, 24161, 24162, 24163, 24164, 24165, 24166, 24167, 24168, 24169, 24170, 24171, 24172, 24173, 24174, 24175, 24176, 24177, 24178, 24179, 24180, 24181, 24182, 24183, 24184, 24185, 24189, 24190, 24191, 24192, 24194, 24195, 24197, 24198, 24200, 24201, 24203, 24204, 24206, 24211, 24213, 24215, 24217, 24222, 24223, 24229, 24232, 24233, 24234, 24235, 24236, 24238, 24240, 24242, 24244, 24246, 24248, 24249, 24250, 24254, 24255, 24256, 24257, 24258, 24259, 24260, 24261, 24262, 24265, 24276, 24277, 24279, 24281, 24283, 24285, 24287, 24291, 24294, 24297, 24298, 24299, 24300, 24301, 24302, 24303, 24304, 24329, 24331, 24332, 24333, 24336, 24361, 24362, 24363, 24364, 24365, 24366, 24367, 24416, 24418, 24424, 24425, 24426, 24432, 24433, 24434, 24435, 24436, 24437, 24438, 24439, 24440, 24441, 24442, 24443, 24472, 24475, 24479, 24483, 24484, 24488, 24491, 24511, 24514, 24517, 24520, 24522, 24523, 24524, 24528, 24531, 24533, 24534, 24541, 24542, 24543, 24544, 24545, 24546, 24547, 24549, 24553, 24554, 24559, 24563, 24565, 24567, 24569, 24571, 24573, 24575, 24577, 24579, 24581, 24583, 24587, 24617, 24650, 24652, 24655, 24656, 24658, 24660, 24661, 24662, 24663, 24664, 24666, 24668, 24670, 24672, 24673, 24674, 24675, 24690, 24695, 24702, 24703, 24708, 24735, 24745, 24748, 24751, 24754, 24757, 24760, 24771, 24773, 24777, 24820, 24822, 24824, 24830, 24832, 24834, 24836, 24838, 24840, 24844, 24853, 24859, 24860, 24861, 24868, 24869, 24870, 24871, 24885, 24886, 24887, 24888, 24889, 24890, 24891, 24892, 24893, 24894, 24895, 24896, 24897, 24898, 24899, 24900, 24901, 24902, 24903, 24904, 24905, 24906, 24907, 24908, 24909, 24910, 24911, 24912, 24913, 24914, 24915, 24916, 24917, 24918, 24919, 24920, 24921, 24922, 24923, 24924, 24925, 24926, 24927, 24928, 24929, 24930, 24931, 24932, 24933, 24934, 24935, 24936, 24937, 24941, 24946, 24971, 24973, 24979, 24982, 24989, 24990, 24991, 24992, 24993, 24994, 24996, 25040, 25041, 25060, 25064, 25067, 25071, 25074, 25077, 25080, 25083, 25086, 25102, 25104, 25106, 25108, 25110, 25112, 25114, 25117, 25145, 25146, 25154, 25155, 25157, 25160, 25161, 25162, 25173, 25176, 25179, 25181, 25183, 25185, 25187, 25191, 25193, 25195, 25196, 25207, 25208, 25212, 25213, 25214, 25215, 25216, 25217, 25218, 25219, 25220, 25221, 25222, 25223, 25224, 25225, 25226, 25227, 25228, 25229, 25230, 25231, 25232, 25233, 25234, 25235, 25236, 25237, 25238, 25239, 25240, 25241, 25242, 25243, 25244, 25246, 25248, 25250, 25252, 25254, 25256, 25258, 25260, 25262, 25264, 25266, 25267, 25268, 25269, 25270, 25271, 25272, 25273, 25274, 25275, 25276, 25278, 25280, 25283, 25284, 25285, 25286, 25287, 25288, 25289, 25290, 25319, 25320, 25321, 25350, 25351, 25352, 25353, 25354, 25355, 25356, 25357, 25358, 25359, 25360, 25361, 25362, 25363, 25364, 25365, 25366, 25367, 25369, 25371, 25380, 25383, 25469, 25470, 25471, 25484, 25485, 25486, 25487, 25488, 25489, 25490, 25491, 25492, 25493, 25494, 25495, 25496, 25497, 25504, 25505, 25506, 25507, 25508, 25509, 25510, 25511, 25512, 25513, 25514, 25515, 25516, 25517, 25533, 25535, 25537, 25563, 25566, 25571, 25608, 25609, 25610, 25611, 25613, 25615, 25617, 25618, 25619, 25620, 25621, 25622, 25623, 25624, 25625, 25627, 25628, 25629, 25630, 25643, 25647, 25656, 25662, 25668, 25674, 25706, 25708, 25710, 25711, 25731, 25733, 25734, 25736, 25738, 25739, 25741, 25742, 25744, 25746, 25748, 25749, 25750, 25751, 25752, 25821, 25848, 25869, 25938, 25939, 25941, 25942, 25944, 25945, 25947, 25948, 25950, 25951, 25953, 25954, 25956, 25962, 26184, 26185, 26186, 26187, 26188, 26189, 26190, 26191, 26192, 26193, 26194, 26195, 26196, 26197, 26198, 26199, 26200, 26201, 26202, 26203, 26204, 26205, 26206, 26207, 26208, 26209, 26210, 26211, 26212, 26213, 26214, 26215, 26216, 26247, 26248, 26250, 26252, 26254, 26262, 26264, 26266, 26269, 26270, 26272, 26274, 26276, 26278, 26280, 26282, 26284, 26286, 26288, 26290, 26292, 26294, 26296, 26298, 26300, 26302, 26304, 26306, 26308, 26316, 26326, 26328, 26330, 26332, 26334, 26336, 26338, 26417, 26418, 26419, 26420, 26544, 26545, 26546, 26547, 26548, 26549, 26551, 26553, 26563, 26564, 26565, 26594, 26595, 26598, 26600, 26602, 26605, 26607, 26609, 26611, 26613, 26615, 26617, 26619, 26621, 26623, 26625, 26627, 26629, 26631, 26633, 26635, 26637, 26639, 26641, 26643, 26645, 26647, 26656, 26657, 26658, 26659, 26660, 26661, 26662, 26663, 26664, 26665, 26666, 26667, 26668, 26669, 26670, 26671, 26672, 26673, 26695, 26696, 26697, 26707, 26708, 26709, 26710, 26711, 26712, 26713, 26714, 26715, 26716, 26717, 26718, 26719, 26720, 26721, 26722, 26723, 26724, 26725, 26726, 26727, 26728, 26729, 26730, 26794, 26795, 26796, 26797, 26916, 26917, 26918, 26919, 26920, 26921, 26922, 26923, 26924, 26925, 26926, 26927, 26928, 26929, 26930, 26931, 26932, 26933, 26934, 26935, 26936, 26950, 26971, 26972, 26973, 26974, 26975, 26976, 26977, 26978, 26979, 26980, 26981, 26982, 26983, 27033
	);

	// Trying to catch all item ids in the sailing beta but we don't know them ahead of time
	private static final int MAX_ITEM_ID_BEFORE_SAILING_BETA = 30850;

	// Cache seen items so we avoid sending them more than once
	private static HashSet<Integer> seenItems = new HashSet<>();

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged itemContainerChanged)
	{
		Item[] items = itemContainerChanged.getItemContainer().getItems();

		for (Item item : items)
		{
			if (!(whitelist.contains(item.getId()) || item.getId() > MAX_ITEM_ID_BEFORE_SAILING_BETA)  || seenItems.contains(item.getId()))
			{
				log.trace(String.format("Skipped item: (%d\t%d)", item.getId(), itemContainerChanged.getContainerId()));
				continue;
			}

			ItemSightingData data = new ItemSightingData(item.getId(), itemContainerChanged.getContainerId());
			manager.storeEvent(data);
			log.debug(String.format("Stored event: (%d\t%d)", item.getId(), itemContainerChanged.getContainerId()));
			seenItems.add(item.getId());
		}
	}
}

package com.Crowdsourcing.monster_examine;

import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import lombok.extern.slf4j.Slf4j;
import net.runelite.http.api.RuneLiteAPI;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

import javax.inject.Inject;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.Set;

@Slf4j
public class MonsterExamineClient {

    private static final String SUBMIT_URL = "https://chisel.weirdgloop.org/monsterexamine/submit";
    private static final String SEEN_URL = "https://chisel.weirdgloop.org/monsterexamine/seen";
    private static final MediaType JSON = MediaType.parse("application/json; charset=utf-8");

    private final MonsterExamine plugin;


    @Inject
    private MonsterExamineClient(MonsterExamine plugin)
    {
        this.plugin = plugin;
    }

    protected void submitToAPI(MonsterExamineData data)
    {
        Request r = new Request.Builder()
                .url(SUBMIT_URL)
                .post(RequestBody.create(JSON, RuneLiteAPI.GSON.toJson(data)))
                .build();
        RuneLiteAPI.CLIENT.newCall(r).enqueue(new Callback()
        {
            @Override
            public void onFailure(Call call, IOException e)
            {
                log.debug("Error sending monster examine data", e);
            }

            @Override
            public void onResponse(Call call, Response response)
            {
                log.info("Successfully sent monster examine data");
                getSeenIds();
                response.close();
            }
        });
    }

    protected void getSeenIds()
    {
        Request request = new Request.Builder()
                .url(SEEN_URL)
                .build();

        RuneLiteAPI.CLIENT.newCall(request).enqueue(new Callback()
        {
            @Override
            public void onFailure(Call call, IOException e)
            {
                log.debug("Error getting seen monster ids", e);
            }

            @Override
            public void onResponse(Call call, Response response)
            {
                try
                {
                    InputStream in = response.body().byteStream();
                    Set<Integer> tmp = RuneLiteAPI.GSON.fromJson(new InputStreamReader(in, StandardCharsets.UTF_8), new TypeToken<Set<Integer>>(){}.getType());
                    if (tmp == null)
                    {
                        log.debug("Error parsing monster ids JSON");
                        response.close();
                        return;
                    }
                    plugin.setSeenIds(tmp);
                    response.close();
                }
                catch (JsonParseException ex)
                {
                    log.debug("Error parsing monster ids JSON", ex);
                    response.close();
                }
            }
        });
    }
}

package com.Crowdsourcing.monster_examine;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class MonsterExamineData {
    int monsterId;
    String monsterName;
    String stats;
    String aggressive;
    String defensive;
    String other;
    String username;
}

package com.Crowdsourcing.monster_examine;

import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.events.ScriptPostFired;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.ui.overlay.OverlayManager;

import java.util.HashSet;
import java.util.Set;

@Slf4j
public class MonsterExamine
{
    @Inject
    private Client client;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private MonsterExamineOverlay overlay;

    @Inject
    private MonsterExamineClient httpClient;

    int lastId = -1;
    Set<Integer> seenIds = new HashSet<>();

    public void startUp()
    {
        overlayManager.add(overlay);
        httpClient.getSeenIds();
    }

    public void shutDown()
    {
        overlayManager.remove(overlay);
    }

    @Subscribe
    public void onMenuOptionClicked(MenuOptionClicked event)
    {
        String target = event.getMenuTarget();
        if (target.startsWith("<col=00ff00>Monster Examine</col><col=ffffff> -> "))
        {
			lastId = client.getTopLevelWorldView().npcs().byIndex(event.getId()).getComposition().getId();
        }
    }

    public void setSeenIds(Set<Integer> seenIds)
    {
        this.seenIds = seenIds;
    }

    public Set<Integer> getSeenIds()
    {
        return this.seenIds;
    }

    @Subscribe
    public void onScriptPostFired(ScriptPostFired event)
    {
        if (event.getScriptId() == 1179)
        {
            String name = client.getWidget(InterfaceID.DreamMonsterStat.MONSTER_NAME).getText();
            String stats = client.getWidget(InterfaceID.DreamMonsterStat.MONSTER_STATS).getText();
            String aggressive = client.getWidget(InterfaceID.DreamMonsterStat.MONSTER_AGGRESSIVE).getText();
            String defensive = client.getWidget(InterfaceID.DreamMonsterStat.MONSTER_DEFENSIVE).getText();
            String other = client.getWidget(InterfaceID.DreamMonsterStat.MONSTER_OTHER).getText();
            httpClient.submitToAPI(
                    new MonsterExamineData(lastId, name, stats ,aggressive, defensive, other, client.getLocalPlayer().getName()));
        }
    }


}

package com.Crowdsourcing.monster_examine;

import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.NPCComposition;
import net.runelite.api.Point;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.OverlayUtil;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.awt.*;
import java.util.Arrays;

@Singleton
class MonsterExamineOverlay extends Overlay
{

    private final Client client;
    private final MonsterExamine plugin;

    private static final Color PURPLE = new Color(170, 0, 255);

    @Inject
    private MonsterExamineOverlay(Client client, MonsterExamine plugin)
    {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        setPriority(OverlayPriority.HIGHEST);
        this.client = client;
        this.plugin = plugin;
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        for (NPC npc : client.getNpcs())
        {
            if (npc == null)
            {
                continue;
            }
            if (plugin.getSeenIds().contains(npc.getComposition().getId()))
            {
                continue;
            }

            NPCComposition composition = npc.getComposition();
            if (!Arrays.asList(composition.getActions()).contains("Attack"))
            {
                continue;
            }


            Shape objectClickbox = npc.getConvexHull();
            if (objectClickbox == null)
            {
                continue;
            }

            String text = "ID:" + composition.getId();
            Point textLocation = npc.getCanvasTextLocation(graphics, text, npc.getLogicalHeight() + 40);
            if (textLocation != null)
            {
                OverlayUtil.renderTextLocation(graphics, textLocation, text, PURPLE);
            }
            graphics.setColor(PURPLE);
            graphics.draw(objectClickbox);
            graphics.setColor(new Color(PURPLE.getRed(), PURPLE.getGreen(), PURPLE.getBlue(), 20));
            graphics.fill(objectClickbox);
        }
        return null;
    }
}
/*
 * Copyright (c) 2020 andmcadams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.Crowdsourcing.varbits;

import lombok.AllArgsConstructor;
import lombok.Data;
import net.runelite.api.coords.WorldPoint;

@Data
@AllArgsConstructor
public class VarData
{
	private final int varType;
	private final int varbitNumber;
	private final int oldValue;
	private final int newValue;
	private final int tick;
	private final boolean isInInstance;
	private final WorldPoint location;
}

/*
 * Copyright (c) 2018 Abex
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.Crowdsourcing.varbits;

import com.Crowdsourcing.CrowdsourcingManager;
import com.google.common.collect.HashMultimap;
import com.google.common.collect.Multimap;
import java.util.HashSet;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.IndexDataBase;
import net.runelite.api.VarbitComposition;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.VarbitChanged;
import net.runelite.api.gameval.VarbitID;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.eventbus.Subscribe;

@Slf4j
public class CrowdsourcingVarbits
{

	@Inject
	private Client client;

	@Inject
	private CrowdsourcingManager crowdsourcingManager;

	@Inject
	private ClientThread clientThread;

	private static final int VARBITS_ARCHIVE_ID = 14;

	private int[] oldVarps = null;
	private int[] oldVarps2 = null;
	private Multimap<Integer, Integer> varbits;

	private int initializingTick = 0;

	private static HashSet<Integer> blackList;

	private static final int VARBIT = 0;
	private static final int VARPLAYER = 1;

	public void startUp()
	{

		// Blacklist certain common varbs that give us little useful data.
		blackList = new HashSet<>();
		blackList.add(VarbitID.COMBAT_WEAPON_CATEGORY); // Equipped weapon type
		blackList.add(VarbitID.SETTINGS_BARBARIAN_POTION_MAKEX); // Dialogue option appear/disappear
		blackList.add(VarbitID.CLOCK); // 100 tick counter
		varbits = HashMultimap.create();

		if (client.getGameState() == GameState.STARTING || client.getGameState() == GameState.UNKNOWN)
		{
			return;
		}

		if (oldVarps == null)
		{
			oldVarps = new int[client.getVarps().length];
			oldVarps2 = new int[client.getVarps().length];
		}

		// Set oldVarps to be the current varps
		System.arraycopy(client.getVarps(), 0, oldVarps, 0, oldVarps.length);
		System.arraycopy(client.getVarps(), 0, oldVarps2, 0, oldVarps2.length);

		// For all varbits, add their ids to the multimap with the varp index as their key
		clientThread.invoke(() -> {
			if (client.getIndexConfig() == null)
			{
				return false;
			}
			IndexDataBase indexVarbits = client.getIndexConfig();
			final int[] varbitIds = indexVarbits.getFileIds(VARBITS_ARCHIVE_ID);
			for (int id : varbitIds)
			{
				VarbitComposition varbit = client.getVarbit(id);
				if (varbit != null)
				{
					varbits.put(varbit.getIndex(), id);
				}
			}
			return true;
		});
	}

	public void shutDown()
	{
		varbits = null;
		oldVarps = null;
	}

	private boolean disconnected = false;
	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState().equals(GameState.HOPPING)
			|| gameStateChanged.getGameState().equals(GameState.LOGGING_IN)
			|| (gameStateChanged.getGameState() == GameState.LOGGED_IN && disconnected))
		{
			disconnected = false;
			initializingTick = client.getTickCount() + 5;
			shutDown();
			startUp();
		}

		if (gameStateChanged.getGameState() == GameState.CONNECTION_LOST)
		{
			disconnected = true;
		}
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged varbitChanged)
	{
		int tick = client.getTickCount();

		// Whenever a varbit is changed, record it and pass the info off to be submitted.
		int index = varbitChanged.getIndex();
		int[] varps = client.getVarps();

		for (int i : varbits.get(index))
		{
			int oldValue = client.getVarbitValue(oldVarps, i);
			int newValue = client.getVarbitValue(varps, i);

			// If the varbit is being changed on an initializing tick (when logging in),
			// don't push out varbit changes. There are too many, and are generally uninteresting.
			if (oldValue != newValue && tick > initializingTick)
			{
				client.setVarbitValue(oldVarps2, i, newValue);
				if (!blackList.contains(i))
				{
					/* Wait a tick before grabbing location.
					 *
					 * This seems to cause fewer issues than not waiting a tick.
					 * Only noticeable issues seem to be in places like Dorgesh-Kaan, where you can go up and down
					 * stairs quickly to trick it into thinking varbs were updated in a different location.
					 * Without waiting a tick, certain loads/instances are messed up, including the Dorgesh-Kaan light
					 * varbs when loading a part of the map you haven't been to.
					 */
					clientThread.invokeLater(() ->
					{
						LocalPoint local = LocalPoint.fromWorld(client, client.getLocalPlayer().getWorldLocation());
						WorldPoint location = WorldPoint.fromLocalInstance(client, local);
						boolean isInInstance = client.isInInstancedRegion();

						VarData varbitData = new VarData(VARBIT, i, oldValue, newValue, tick, isInInstance, location);
						crowdsourcingManager.storeEvent(varbitData);
						// log.info(varbitData.toString());
					});
				}
			}
		}

		int oldValue = oldVarps2[index];
		int newValue = varps[index];

		// Push out varp changes
		if (oldValue != newValue && tick > initializingTick)
		{
			clientThread.invokeLater(() -> {
				LocalPoint local = LocalPoint.fromWorld(client, client.getLocalPlayer().getWorldLocation());
				WorldPoint location = WorldPoint.fromLocalInstance(client, local);
				boolean isInInstance = client.isInInstancedRegion();

				VarData varPlayerData = new VarData(VARPLAYER, index, oldValue, newValue, tick, isInInstance, location);
				crowdsourcingManager.storeEvent(varPlayerData);
				// log.info(varPlayerData.toString());
			});
		}

		oldVarps[index] = varps[index];
		oldVarps2[index] = varps[index];
	}

}

package com.Crowdsourcing.overhead_dialogue;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class OverheadDialogueData
{
	private int ohNpcid;
	private String ohText;
}

package com.Crowdsourcing.overhead_dialogue;

import com.Crowdsourcing.CrowdsourcingManager;
import com.google.common.cache.CacheBuilder;
import com.google.common.cache.CacheLoader;
import com.google.common.cache.LoadingCache;

import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.events.OverheadTextChanged;
import net.runelite.client.eventbus.Subscribe;

import java.util.concurrent.ExecutionException;

@Slf4j
public class CrowdsourcingOverheadDialogue
{
	@Inject
	public CrowdsourcingManager manager;

	@Inject
	public Client client;


	public static CacheLoader<Tuple, Boolean> loader;
	public static LoadingCache<Tuple, Boolean> recentlySeen;

	static
	{
		loader = new CacheLoader<Tuple, Boolean>()
		{
			@Override
			public Boolean load(Tuple key)
			{
				return true;
			}
		};
		recentlySeen = CacheBuilder.newBuilder().maximumSize(100).build(loader);
	}

	static class Tuple
	{
		public final int npcId;
		public final String text;

		public Tuple(int npcId, String text)
		{
			this.npcId = npcId;
			this.text = text;
		}

		@Override
		public boolean equals(Object o)
		{
			if (!(o instanceof Tuple))
			{
				return false;
			}
			Tuple t = (Tuple) o;
			return ((this.npcId == t.npcId) && (this.text.equals(t.text)));
		}

		@Override
		public int hashCode() {
			int hash = 17;
			hash = hash * 486187739 + this.npcId;
			hash = hash * 486187739 + this.text.hashCode();
			return hash;
		}
	}

	@Subscribe
	public void onOverheadTextChanged(OverheadTextChanged event)
	{
		// Ignore non-NPC overhead dialogue
		if (!(event.getActor() instanceof NPC))
		{
			return;
		}

		NPC npc = (NPC) event.getActor();
		Tuple npcPair = new Tuple(npc.getComposition().getId(), event.getOverheadText());
		// If we have seen this npc, text pair recently, do not send it.
		if (recentlySeen.getIfPresent(npcPair) != null)
		{
			log.debug("Already saw this pair in the last 100 sightings");
			return;
		}
		// Note that we actually get dialogue for all variants of an NPC, even if they are not visible due to varbits.
		// Grabbing the name() of these yields null while they are invisible, so just use the NPC id.
		OverheadDialogueData data = new OverheadDialogueData(npc.getComposition().getId(), event.getOverheadText());

		manager.storeEvent(data);
		try
		{
			log.debug("Message recorded from NPC id: " + npc.getComposition().getId());
			recentlySeen.get(npcPair);
		}
		catch (ExecutionException e)
		{
			log.debug("ExecutionException caught");
		}
	}

}

package com.Crowdsourcing.inventory;

import com.Crowdsourcing.CrowdsourcingManager;
import com.google.common.collect.ImmutableSet;
import java.util.HashSet;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.gameval.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.client.eventbus.Subscribe;

@Slf4j
public class CrowdsourcingInventory
{

    @Inject
    public CrowdsourcingManager manager;

    @Inject
    public Client client;

	// There's no gameval equivalent to the old InventoryID.TRADEOTHER so this is effectively the old value
	private static final int TRADE_OTHER_INVENTORY_ID = (InventoryID.TRADEOFFER | 0x8000);

    private static final ImmutableSet<Integer> blacklist = ImmutableSet.of(
		InventoryID.INV, InventoryID.BANK, InventoryID.WORN,
		InventoryID.TRADEOFFER, TRADE_OTHER_INVENTORY_ID
    );

    // Cache seen inventories so we avoid sending them more than once
    private static HashSet<Integer> seenInventories = new HashSet<>();

    @Subscribe
    public void onItemContainerChanged(ItemContainerChanged itemContainerChanged)
    {
        int id = itemContainerChanged.getContainerId();

        if (blacklist.contains(id) || seenInventories.contains(id))
        {
            return;
        }

        seenInventories.add(id);

        Item[] items = itemContainerChanged.getItemContainer().getItems().clone();

        if (client == null || client.getLocalPlayer() == null)
        {
            return;
        }
        LocalPoint local = LocalPoint.fromWorld(client, client.getLocalPlayer().getWorldLocation());
        if (local == null)
        {
            return;
        }
        WorldPoint location = WorldPoint.fromLocalInstance(client, local);

        manager.storeEvent(new InventoryData(id, items, location, client.getAccountType().isIronman()));
    }
}

package com.Crowdsourcing.inventory;

import lombok.AllArgsConstructor;
import lombok.Data;
import net.runelite.api.Item;
import net.runelite.api.coords.WorldPoint;

@Data
@AllArgsConstructor
public class InventoryData
{
    private int id;
    private Item[] items;
    private WorldPoint location;
    private boolean isIronman;
}
package com.Crowdsourcing.toa;

import lombok.AllArgsConstructor;
import lombok.Data;
import net.runelite.api.Skill;

@Data
@AllArgsConstructor
public class TombsSkillChangedData
{
	private final int gameTickToA;
	private final Skill skill;
	private final int baseLevel;
	private final int oldLevel;
	private final int newLevel;
}

package com.Crowdsourcing.toa;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class TombsChatMessageData
{
	private final int gameTickToA;
	private final String chatMessageToA;
}

package com.Crowdsourcing.toa;

import com.google.common.collect.ImmutableSet;
import java.util.HashMap;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.StatChanged;
import net.runelite.client.eventbus.Subscribe;
import com.Crowdsourcing.CrowdsourcingManager;

public class CrowdsourcingTombs
{
	private static final String CHAT_MESSAGE_SMELLING_SALTS_START = "You crush the salts. Your heart rate increases.";
	private static final String CHAT_MESSAGE_NECTAR = "You drink some of the nectar. It hurts! This was not made for mortals.";
	private static final String CHAT_MESSAGE_TEARS = "You drink some of the tears.";
	private static final String CHAT_MESSAGE_TEARS_AOE = " has restored your prayer and combat stats.";
	private static final String CHAT_MESSAGE_AMBROSIA = "You drink the ambrosia. You feel reinvigorated.";
	private static final String CHAT_MESSAGE_HONEY_LOCUST = "You bite down on the dried bug. It's very chewy, but you feel slightly reinvigorated...";

	@Inject
	private CrowdsourcingManager manager;

	@Inject
	private Client client;

	private int currentTick = -1;

	private final ImmutableSet<Skill> skillsToCheck = ImmutableSet.<Skill>builder()
		.add(Skill.HITPOINTS, Skill.ATTACK, Skill.STRENGTH, Skill.DEFENCE,
			Skill.RANGED, Skill.MAGIC, Skill.PRAYER, Skill.RANGED).build();

	//Map of boosted combat skills prior to stat change: {Skill, prevBoostedSkill}
	private final HashMap<Skill, Integer> prevCombatSkills = new HashMap<>();

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage)
	{
		String message = chatMessage.getMessage();

		boolean teammateUsedTears = message.contains(CHAT_MESSAGE_TEARS_AOE);
		boolean playerUsedItemOnSelf = (message.equals(CHAT_MESSAGE_TEARS) || message.equals(CHAT_MESSAGE_NECTAR) ||
			message.equals(CHAT_MESSAGE_AMBROSIA) || message.equals(CHAT_MESSAGE_HONEY_LOCUST) ||
			message.equals(CHAT_MESSAGE_SMELLING_SALTS_START));
		if (teammateUsedTears || playerUsedItemOnSelf)
		{
			// Take a note of what our skills are prior to them changing (onChatMessage fires before onStatChanged)
			for (Skill s : skillsToCheck)
			{
				prevCombatSkills.put(s, client.getBoostedSkillLevel(s));
			}
			currentTick = client.getTickCount();
			TombsChatMessageData data = new TombsChatMessageData(currentTick, message);
			manager.storeEvent(data);
		}
	}

	@Subscribe
	public void onStatChanged(StatChanged statChanged)
	{
		Skill skill = statChanged.getSkill();

		if (currentTick == client.getTickCount() && skillsToCheck.contains(skill))
		{
			// If we see the old and new levels are the same, assume this is an xp change and exit
			if (client.getBoostedSkillLevel(skill) == prevCombatSkills.get(skill))
			{
				return;
			}

			TombsSkillChangedData data = new TombsSkillChangedData(
				currentTick,
				skill,
				client.getRealSkillLevel(skill),
				prevCombatSkills.get(skill),
				client.getBoostedSkillLevel(skill)
			);
			manager.storeEvent(data);
		}
	}
}

/*
 * Copyright (c) 2021, ThePharros
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.Crowdsourcing.mlm;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class PaydirtMineData
{
	private final int baseLevel;
	private final int boostedLevel;
	private final int ring;
	private final int diary;
	private final long timestamp;
}
/*
 * Copyright (c) 2021, ThePharros and leejt
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.Crowdsourcing.mlm;

import com.google.common.collect.HashMultiset;
import com.google.common.collect.Multiset;
import com.google.common.collect.Multisets;
import com.google.common.collect.EvictingQueue;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Arrays;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.MenuAction;
import net.runelite.api.Skill;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.gameval.InventoryID;
import net.runelite.api.gameval.ItemID;
import net.runelite.api.gameval.ObjectID;
import net.runelite.api.gameval.VarbitID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.eventbus.Subscribe;
import com.Crowdsourcing.CrowdsourcingManager;

@Slf4j
public class CrowdsourcingMLM
{
	@Inject
	private CrowdsourcingManager manager;

	@Inject
	private Client client;

	private static final String CHAT_MESSAGE_PAYDIRT = "You manage to mine some pay-dirt.";
	private static final String COLLECT_ORE_FROM_SACK = "You collect your ore from the sack.";
	private static final int MOTHERLODE_MINE_REGION_ID = 14936;
	// This is the multiloc; the transformed ID is 26678.
	private static final int SACK_ID = ObjectID.MOTHERLODE_SACK;

	private Multiset<Integer> prevInventorySnapshot;

	// Maximum remainder to track: size of sack, plus size of inventory
	private final EvictingQueue<PaydirtMineData> paydirtMineData = EvictingQueue.create(189 + 28);
	private boolean waitingForOre = false;

	@Subscribe
	public void onGameTick(GameTick gameTick)
	{
		if (client.getLocalPlayer().getWorldLocation().getRegionID() != MOTHERLODE_MINE_REGION_ID)
		{
			return;
		}

		if (!waitingForOre) {
			return;
		}

		Widget widgetSpriteText = client.getWidget(InterfaceID.Objectbox.TEXT);

		if (widgetSpriteText == null)
		{
			return;
		}

		if (widgetSpriteText.getText().startsWith(COLLECT_ORE_FROM_SACK)) {
			waitingForOre = false;
			final Multiset<Integer> currentInventorySnapshot = getInventorySnapshot();
			final Multiset<Integer> rewards = Multisets.difference(currentInventorySnapshot, prevInventorySnapshot);
			final int currentSackCount = client.getVarbitValue(VarbitID.MOTHERLODE_SACK_TRANSMIT);
			MLMData event = new MLMData(
				new ArrayList(paydirtMineData),
				rewards,
				currentSackCount,
				currentInventorySnapshot.count(ItemID.PAYDIRT)
			);
			manager.storeEvent(event);
		}
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked menuOptionClicked)
	{
		MenuAction menuAction = menuOptionClicked.getMenuAction();
		if (menuOptionClicked.getId() == SACK_ID && menuAction == MenuAction.GAME_OBJECT_FIRST_OPTION) {
			prevInventorySnapshot = getInventorySnapshot();
			waitingForOre = true;
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		if (event.getType() != ChatMessageType.SPAM)
		{
			return;
		}

		if (event.getMessage().equals(CHAT_MESSAGE_PAYDIRT))
		{
			paydirtMineData.add(new PaydirtMineData(
				client.getRealSkillLevel(Skill.MINING),
				client.getBoostedSkillLevel(Skill.MINING),
				getRingId(),
				getDiaryCompletions(),
				Instant.now().getEpochSecond()
			));
		}
	}

	private Multiset<Integer> getInventorySnapshot()
	{
		final ItemContainer inventory = client.getItemContainer(InventoryID.INV);
		Multiset<Integer> inventorySnapshot = HashMultiset.create();

		if (inventory != null)
		{
			Arrays.stream(inventory.getItems())
				.forEach(item -> inventorySnapshot.add(item.getId(), item.getQuantity()));
		}

		return inventorySnapshot;
	}

	private int getRingId()
	{
		ItemContainer equipContainer = client.getItemContainer(InventoryID.WORN);
		if (equipContainer != null)
		{
			final Item[] items = equipContainer.getItems();
			int idx = EquipmentInventorySlot.RING.getSlotIdx();
			if (idx < items.length)
			{
				return equipContainer.getItems()[idx].getId();
			}
		}
		return -1;
	}

	private int getDiaryCompletions()
	{
		int easy = client.getVarbitValue(VarbitID.FALADOR_DIARY_EASY_COMPLETE);
		int medium = client.getVarbitValue(VarbitID.FALADOR_DIARY_MEDIUM_COMPLETE);
		int hard = client.getVarbitValue(VarbitID.FALADOR_DIARY_HARD_COMPLETE);
		int elite = client.getVarbitValue(VarbitID.FALADOR_DIARY_ELITE_COMPLETE);

		return easy + 2*medium + 4*hard + 8*elite;
	}
}

/*
 * Copyright (c) 2021, ThePharros
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.Crowdsourcing.mlm;

import com.google.common.collect.Multiset;
import java.util.ArrayList;
import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class MLMData
{
	private final ArrayList<PaydirtMineData> paydirtMineData;
	private final Multiset<Integer> rewards;
	private final int currentSackCount;
	private final int paydirtCount;
}
package com.Crowdsourcing.respawns;

import javax.inject.Inject;

import com.Crowdsourcing.CrowdsourcingManager;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.ObjectComposition;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.WorldService;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import java.util.LinkedHashMap;
import java.util.Map;

@Slf4j
@PluginDescriptor(
        name = "Respawns",
        description = "Logs scenery and item respawn times to your chatbox."
)
public class Respawns
{
    @Inject
    private Client client;

    @Inject
    private WorldService worldService;

    @Inject
    private CrowdsourcingManager manager;

    @Inject
    private ItemManager itemManager;

    private GameState gameState;

    private static final int MAX_DESPAWN_ENTRIES = 5000;
    private Map<RespawnKey, Integer> despawnedScenery = new LinkedHashMap<RespawnKey, Integer>()
    {
        @Override
        protected boolean removeEldestEntry(Map.Entry<RespawnKey, Integer> eldest)
        {
            return size() > MAX_DESPAWN_ENTRIES;
        }
    };

    private Map<RespawnKey, ItemRespawnValue> despawnedItems = new LinkedHashMap<RespawnKey, ItemRespawnValue>()
    {
        @Override
        protected boolean removeEldestEntry(Map.Entry<RespawnKey, ItemRespawnValue> eldest)
        {
            return size() > MAX_DESPAWN_ENTRIES;
        }
    };

    @Subscribe
    public void onItemSpawned(ItemSpawned event)
    {
        RespawnKey key = new RespawnKey(event.getTile().getWorldLocation(), event.getItem().getId());
        if (despawnedItems.containsKey(key))
        {
            int diff = client.getTickCount() - despawnedItems.get(key).getTickCount();
            if (diff == 0)
            {
                return;
            }
            int worldPopulation = despawnedItems.get(key).getWorldPopulation();
            int estimate = diff * 4000 / (4000 - worldPopulation) + 1;
            despawnedItems.remove(key);
            String name = itemManager.getItemComposition(key.getId()).getName();

            String message = String.format("ITEM %s: %d ticks on %d population, estimate: %d",
                    name, diff, worldPopulation, estimate + 1);
            manager.sendMessage(message);
        }
    }

    @Subscribe
    public void onItemDespawned(ItemDespawned event)
    {
        int worldPopulation = worldService.getWorlds().findWorld(client.getWorld()).getPlayers();
        RespawnKey key = new RespawnKey(event.getTile().getWorldLocation(), event.getItem().getId());
        despawnedItems.put(key, new ItemRespawnValue(client.getTickCount(), worldPopulation));
    }

    private void scenerySpawn(WorldPoint baseLocation, int id)
    {
        if (gameState != GameState.LOGGED_IN)
        {
            return;
        }
        RespawnKey key = new RespawnKey(baseLocation, id);
        if (despawnedScenery.containsKey(key))
        {
            int diff = client.getTickCount() - despawnedScenery.get(key);
            despawnedScenery.remove(key);
            ObjectComposition objectComposition = client.getObjectDefinition(id);
            objectComposition = objectComposition.getImpostorIds() == null ? objectComposition : objectComposition.getImpostor();
            String name = objectComposition.getName();
            String message = String.format("SCENERY %s (id: %d): %d ticks", name, id, diff + 1);
            manager.sendMessage(message);
        }
    }

    private void sceneryDespawn(WorldPoint baseLocation, int id)
    {
        if (gameState != GameState.LOGGED_IN)
        {
            return;
        }
        RespawnKey key = new RespawnKey(baseLocation, id);
        despawnedScenery.put(key, client.getTickCount());
    }

    @Subscribe
    public void onDecorativeObjectSpawned(DecorativeObjectSpawned event)
    {
        scenerySpawn(event.getTile().getWorldLocation(), event.getDecorativeObject().getId());
    }

    @Subscribe
    public void onWallObjectSpawned(WallObjectSpawned event)
    {
        scenerySpawn(event.getTile().getWorldLocation(), event.getWallObject().getId());
    }

    @Subscribe
    public void onGameObjectSpawned(GameObjectSpawned event)
    {
        scenerySpawn(event.getTile().getWorldLocation(), event.getGameObject().getId());
    }

    @Subscribe
    public void onGroundObjectSpawned(GroundObjectSpawned event)
    {
        scenerySpawn(event.getTile().getWorldLocation(), event.getGroundObject().getId());
    }

    @Subscribe
    public void onDecorativeObjectDespawned(DecorativeObjectDespawned event)
    {
        sceneryDespawn(event.getTile().getWorldLocation(), event.getDecorativeObject().getId());
    }

    @Subscribe
    public void onWallObjectDespawned(WallObjectDespawned event)
    {
        sceneryDespawn(event.getTile().getWorldLocation(), event.getWallObject().getId());
    }

    @Subscribe
    public void onGameObjectDespawned(GameObjectDespawned event)
    {
        sceneryDespawn(event.getTile().getWorldLocation(), event.getGameObject().getId());
    }

    @Subscribe
    public void onGroundObjectDespawned(GroundObjectDespawned event)
    {
        sceneryDespawn(event.getTile().getWorldLocation(), event.getGroundObject().getId());
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged event)
    {
        gameState = event.getGameState();
        if (gameState == GameState.LOGIN_SCREEN || gameState == GameState.HOPPING) {
            despawnedScenery.clear();
            despawnedItems.clear();
        }
    }

    @Data
    @AllArgsConstructor
    static class RespawnKey
    {
        private final WorldPoint location;
        private final int id;
    }

    @Data
    @AllArgsConstructor
    static class ItemRespawnValue
    {
        private final int tickCount;
        private final int worldPopulation;
    }
}

package com.Crowdsourcing.pyramid_plunder;

import lombok.AllArgsConstructor;
import lombok.Data;
import net.runelite.api.coords.WorldPoint;

@Data
@AllArgsConstructor
public class PyramidPlunderSceneryData
{
	private int ppSceneryId;
	private int ppBaseId;
	private int ppMenuAction;
	private WorldPoint ppLocation;
	private int ppThievingLevel;
	private int ppBoostedThievingLevel;
	private int ppTick;
}

package com.Crowdsourcing.pyramid_plunder;

import com.Crowdsourcing.CrowdsourcingManager;
import com.google.common.collect.ImmutableSet;
import java.util.HashMap;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import static net.runelite.api.MenuAction.GAME_OBJECT_FIRST_OPTION;
import static net.runelite.api.MenuAction.GAME_OBJECT_SECOND_OPTION;
import static net.runelite.api.MenuAction.NPC_THIRD_OPTION;
import net.runelite.api.ObjectComposition;
import net.runelite.api.Skill;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.events.VarbitChanged;
import net.runelite.api.gameval.NpcID;
import net.runelite.api.gameval.ObjectID;
import net.runelite.api.gameval.VarbitID;
import net.runelite.client.eventbus.Subscribe;

@Slf4j
public class CrowdsourcingPyramidPlunder
{

	@Inject
	public CrowdsourcingManager manager;

	@Inject
	public Client client;


	private final WorldArea inside = new WorldArea(1916, 4418, 70, 62, 0);
	private final WorldArea insideFloor1 = new WorldArea(1916, 4418, 70, 62, 1);
	private final WorldArea insideFloor2 = new WorldArea(1916, 4418, 70, 62, 2);
	private final WorldArea outside = new WorldArea(3281, 2787, 16, 17, 0);

	ImmutableSet<Integer> varbsToTrack = ImmutableSet.<Integer>builder()
		// Urns
		.add(VarbitID.NTK_URN1_STATE)
		.add(VarbitID.NTK_URN2_STATE)
		.add(VarbitID.NTK_URN3_STATE)
		.add(VarbitID.NTK_URN4_STATE)
		.add(VarbitID.NTK_URN5_STATE)
		.add(VarbitID.NTK_URN6_STATE)
		.add(VarbitID.NTK_URN7_STATE)
		.add(VarbitID.NTK_URN8_STATE)
		.add(VarbitID.NTK_URN9_STATE)
		.add(VarbitID.NTK_URN10_STATE)
		.add(VarbitID.NTK_URN11_STATE)
		.add(VarbitID.NTK_URN12_STATE)
		.add(VarbitID.NTK_URN13_STATE)
		.add(VarbitID.NTK_URN14_STATE)
		// Sarcophagus
		.add(VarbitID.NTK_SARCOPHAGUS_STATE)
		// Grand gold chest
		.add(VarbitID.NTK_GOLDEN_CHEST_STATE).build();

	HashMap<Integer, Integer> varbVals = new HashMap<>();

	public void startUp()
	{
		if (client == null)
			return;

		// There's probably some way to init varbVals with these values so we don't need this function
		for (Integer varbIndex : varbsToTrack)
		{
			if (varbIndex == null)
				continue;
			varbVals.put(varbIndex, 0);
		}
	}

	private boolean isInPyramidPlunder(WorldPoint w)
	{
		if (w.isInArea(inside) || w.isInArea(insideFloor1) || w.isInArea(insideFloor2) || w.isInArea(outside))
			return true;
		return false;
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged varbitChanged)
	{
		if (client == null)
			return;
		// Check each varb
		for (Integer varbIndex : varbsToTrack)
		{
			// If the varb has changed, update the value in the map and create a new data object to log
			int oldVarbVal = varbVals.get(varbIndex);
			int newVarbVal = client.getVarbitValue(varbIndex);
			if (newVarbVal != oldVarbVal)
			{
				// Create varb data
				varbVals.put(varbIndex, client.getVarbitValue(varbIndex));
				WorldPoint w = client.getLocalPlayer().getWorldLocation();
				int unboostedLevel = client.getRealSkillLevel(Skill.THIEVING);
				int boostedLevel = client.getBoostedSkillLevel(Skill.THIEVING);
				// Only send data if we are in or right outside PP. Still track changes in map though
				if (isInPyramidPlunder(w))
				{
					PyramidPlunderVarbData data = new PyramidPlunderVarbData(varbIndex, oldVarbVal, newVarbVal, w, unboostedLevel, boostedLevel, client.getTickCount());
					//log.error(data.toString());
					manager.storeEvent(data);
				}
			}
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage)
	{
		if (chatMessage.getType() != ChatMessageType.GAMEMESSAGE && chatMessage.getType() != ChatMessageType.SPAM)
		{
			return;
		}
		String message = chatMessage.getMessage();
		if (client == null || client.getLocalPlayer() == null)
		{
			return;
		}
		int unboostedLevel = client.getRealSkillLevel(Skill.THIEVING);
		int boostedLevel = client.getBoostedSkillLevel(Skill.THIEVING);
		WorldPoint w = client.getLocalPlayer().getWorldLocation();
		// Only store message info if we are in or nearby PP
		if (isInPyramidPlunder(w))
		{
			PyramidPlunderMessageData data = new PyramidPlunderMessageData(message, w, unboostedLevel, boostedLevel, client.getTickCount());
			// log.error(data.toString());
			manager.storeEvent(data);
		}
	}

	ImmutableSet<Integer> objectIdsToCheck = ImmutableSet.<Integer>builder()
		// outside doors
		.add(ObjectID.NTK_PYRAMID_DOOR_NORTH_ANIM).add(ObjectID.NTK_PYRAMID_DOOR_NORTH_NOANIM)
		.add(ObjectID.NTK_PYRAMID_DOOR_NORTH_OPEN_NOANIM).add(ObjectID.NTK_PYRAMID_DOOR_EAST_ANIM)
		.add(ObjectID.NTK_PYRAMID_DOOR_EAST_NOANIM).add(ObjectID.NTK_PYRAMID_DOOR_EAST_OPEN_NOANIM)
		.add(ObjectID.NTK_PYRAMID_DOOR_SOUTH_ANIM).add(ObjectID.NTK_PYRAMID_DOOR_SOUTH_NOANIM)
		.add(ObjectID.NTK_PYRAMID_DOOR_SOUTH_OPEN_NOANIM).add(ObjectID.NTK_PYRAMID_DOOR_WEST_ANIM)
		.add(ObjectID.NTK_PYRAMID_DOOR_WEST_NOANIM).add(ObjectID.NTK_PYRAMID_DOOR_WEST_OPEN_NOANIM)
		// spear trap
		.add(ObjectID.NTK_SPEARTRAP_INMOTION)
		// Grand gold chest
		.add(ObjectID.NTK_GOLDEN_CHEST_CLOSED).add(ObjectID.NTK_GOLDEN_CHEST_OPEN)
		// Sarcophagus
		.add(ObjectID.NTK_SARCOPHAGUS).add(ObjectID.NTK_SARCOPHAGUS_OPEN).add(ObjectID.NTK_SARCOPHAGUS_ANIM)
		// urns, urns, and more urns
		.add(ObjectID.NTK_URN1_CLOSED).add(ObjectID.NTK_URN2_CLOSED).add(ObjectID.NTK_URN3_CLOSED)
		.add(ObjectID.NTK_URN_ROUGH_CLOSED).add(ObjectID.NTK_URN1_OPEN).add(ObjectID.NTK_URN2_OPEN)
		.add(ObjectID.NTK_URN3_OPEN).add(ObjectID.NTK_URN_ROUGH_OPEN).add(ObjectID.NTK_URN1_SNAKE)
		.add(ObjectID.NTK_URN2_SNAKE).add(ObjectID.NTK_URN3_SNAKE).add(ObjectID.NTK_URN_ROUGH_SNAKE)
		.add(ObjectID.NTK_URN1_SNAKE_CHARMED).add(ObjectID.NTK_URN2_SNAKE_CHARMED).add(ObjectID.NTK_URN3_SNAKE_CHARMED)
		.add(ObjectID.NTK_URN_ROUGH_SNAKE_CHARMED)
		// inside doors
		.add(ObjectID.NTK_TOMB_DOOR_NOANIM).add(ObjectID.NTK_TOMB_DOOR_ANIM)
		.add(ObjectID.NTK_TOMB_DOOR_EXIT).add(ObjectID.NTK_ANTECHAMBER_EXIT).build();
	@Subscribe
	private void onMenuOptionClicked(MenuOptionClicked event) {
		int tick = client.getTickCount();
		if (event.getMenuAction() == GAME_OBJECT_FIRST_OPTION || event.getMenuAction() == GAME_OBJECT_SECOND_OPTION)
		{
			ObjectComposition objectComposition = client.getObjectDefinition(event.getId());
			// If imposter ids is null, use the composition's id (loc is not a multiloc in this case)
			int id;
			if (objectComposition.getImpostorIds() == null)
				id = objectComposition.getId();
			else
				id = objectComposition.getImpostor().getId();
			if (objectIdsToCheck.contains(id))
			{
				int unboostedLevel = client.getRealSkillLevel(Skill.THIEVING);
				int boostedLevel = client.getBoostedSkillLevel(Skill.THIEVING);
				WorldPoint w = WorldPoint.fromScene(client, event.getParam0(), event.getParam1(), client.getPlane());
				PyramidPlunderSceneryData data = new PyramidPlunderSceneryData(id, objectComposition.getId(), event.getMenuAction().getId(), w, unboostedLevel, boostedLevel, tick);
				// log.error(data.toString());
				manager.storeEvent(data);
			}
		}
		// Guardian mummy event
		else if (event.getMenuAction() == NPC_THIRD_OPTION && event.getMenuTarget().equals("<col=ffff00>Guardian mummy"))
		{
			int unboostedLevel = client.getRealSkillLevel(Skill.THIEVING);
			int boostedLevel = client.getBoostedSkillLevel(Skill.THIEVING);
			WorldPoint w = WorldPoint.fromScene(client, event.getParam0(), event.getParam1(), client.getPlane());
			PyramidPlunderSceneryData data = new PyramidPlunderSceneryData(NpcID.NTK_MUMMY_GUARDIAN, NpcID.NTK_MUMMY_GUARDIAN, event.getMenuAction().getId(), w, unboostedLevel, boostedLevel, tick);
			// log.error(data.toString());
			manager.storeEvent(data);
		}
	}

}

package com.Crowdsourcing.pyramid_plunder;

import lombok.AllArgsConstructor;
import lombok.Data;
import net.runelite.api.coords.WorldPoint;

@Data
@AllArgsConstructor
public class PyramidPlunderMessageData
{
	private String ppMessageText;
	private WorldPoint ppLocation;
	private int ppThievingLevel;
	private int ppBoostedThievingLevel;
	private int ppTick;
}

package com.Crowdsourcing.pyramid_plunder;

import lombok.AllArgsConstructor;
import lombok.Data;
import net.runelite.api.coords.WorldPoint;

@Data
@AllArgsConstructor
public class PyramidPlunderVarbData
{
	private int ppVarbIndex;
	private int ppOldVarbValue;
	private int ppNewVarbValue;
	private WorldPoint ppLocation;
	private int ppThievingLevel;
	private int ppBoostedThievingLevel;
	private int ppTick;
}

/*
 * Copyright (c) 2019, Weird Gloop <admin@weirdgloop.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.Crowdsourcing.dialogue;

import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameTick;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.eventbus.Subscribe;
import com.Crowdsourcing.CrowdsourcingManager;

@Slf4j
public class CrowdsourcingDialogue
{

	@Inject
	private Client client;

	@Inject
	private CrowdsourcingManager manager;

	private String lastSpriteText = null;
	private int lastItemId;

	private String lastDoubleSpriteText = null;
	private int lastDoubleItemId1;
	private int lastDoubleItemId2;

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		Widget spriteWidget = client.getWidget(InterfaceID.Objectbox.ITEM);
		Widget textWidget = client.getWidget(InterfaceID.Objectbox.TEXT);
		if (spriteWidget != null && textWidget != null && (!textWidget.getText().equals(lastSpriteText)
			|| spriteWidget.getItemId() != lastItemId))
		{
			lastItemId = spriteWidget.getItemId();
			lastSpriteText = textWidget.getText();
			log.debug(String.format("%d: %s", lastItemId, lastSpriteText));
			if (client == null || client.getLocalPlayer() == null)
			{
				return;
			}
			LocalPoint local = LocalPoint.fromWorld(client, client.getLocalPlayer().getWorldLocation());
			if (local == null)
			{
				return;
			}
			WorldPoint location = WorldPoint.fromLocalInstance(client, local);
			boolean isInInstance = client.isInInstancedRegion();
			SpriteTextData data = new SpriteTextData(lastSpriteText, lastItemId, isInInstance, location);
			manager.storeEvent(data);
		}
		else if (spriteWidget == null || textWidget == null)
		{
			lastSpriteText = null;
			lastItemId = -1;
		}


		Widget doubleSprite1Widget = client.getWidget(11, 1);
		Widget doubleSprite2Widget = client.getWidget(11, 3);
		Widget doubleTextWidget = client.getWidget(11, 2);
		if (doubleSprite1Widget != null && doubleTextWidget != null && (!doubleTextWidget.getText().equals(lastDoubleSpriteText)
				|| doubleSprite1Widget.getItemId() != lastDoubleItemId1 || doubleSprite2Widget.getItemId() != lastDoubleItemId2))
		{
			lastDoubleItemId1 = doubleSprite1Widget.getItemId();
			lastDoubleItemId2 = doubleSprite2Widget.getItemId();
			lastDoubleSpriteText = doubleTextWidget.getText();
			log.debug(String.format("%d, %d: %s", lastDoubleItemId1, lastDoubleItemId2, lastDoubleSpriteText));
			if (client == null || client.getLocalPlayer() == null)
			{
				return;
			}
			LocalPoint local = LocalPoint.fromWorld(client, client.getLocalPlayer().getWorldLocation());
			if (local == null)
			{
				return;
			}
			WorldPoint location = WorldPoint.fromLocalInstance(client, local);
			boolean isInInstance = client.isInInstancedRegion();
			DoubleSpriteTextData data = new DoubleSpriteTextData(lastDoubleSpriteText, lastDoubleItemId1, lastDoubleItemId2, isInInstance, location);
			manager.storeEvent(data);
		}
		else if (doubleSprite1Widget == null || doubleSprite2Widget == null || doubleTextWidget == null)
		{
			lastDoubleSpriteText = null;
			lastDoubleItemId1 = -1;
			lastDoubleItemId2 = -1;
		}
	}
}

/*
 * Copyright (c) 2021, Weird Gloop <admin@weirdgloop.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.Crowdsourcing.dialogue;

import lombok.AllArgsConstructor;
import lombok.Data;
import net.runelite.api.coords.WorldPoint;

@Data
@AllArgsConstructor
public class DoubleSpriteTextData
{
    private String text;
    private int itemId1;
    private int itemId2;
    private final boolean isInInstance;
    private final WorldPoint location;
}

/*
 * Copyright (c) 2021, Weird Gloop <admin@weirdgloop.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.Crowdsourcing.dialogue;

import lombok.AllArgsConstructor;
import lombok.Data;
import net.runelite.api.coords.WorldPoint;

@Data
@AllArgsConstructor
public class SpriteTextData
{
	private String text;
	private int itemId;
	private final boolean isInInstance;
	private final WorldPoint location;
}

package com.Crowdsourcing.npc_sighting;

import lombok.AllArgsConstructor;
import lombok.Data;
import net.runelite.api.coords.WorldPoint;

@Data
@AllArgsConstructor
public class NpcSightingData
{
	private int npcId;
	private int npcIndex;
	private int rate;
	private boolean isSpawn;
	private int world;
	private boolean isInInstance;
	private WorldPoint npcLocation;
}

package com.Crowdsourcing.npc_sighting;

import com.google.common.collect.ImmutableSet;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.NpcChanged;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.eventbus.Subscribe;
import com.Crowdsourcing.CrowdsourcingManager;

@Slf4j
public class CrowdsourcingNpcSighting
{

	@Inject
	public CrowdsourcingManager manager;

	@Inject
	public Client client;

	// Cook's list of unseen NPCs + implings
	private static final ImmutableSet<Integer> whitelist = ImmutableSet.of(
		1645, 1636, 1646, 1637, 1647, 1638, 1648, 1639, 1649, 1640, 1650, 1641, 1651, 1642, 1652, 1643, 1653, 1644, 1654, 7233, 7302, 8741, 8742, 8743, 8744, 8745, 8746, 8747, 8748, 8749, 8750, 8751, 8752, 8753, 8754, 8755, 8756, 8757, 9, 22, 33, 35, 36, 53, 69, 94, 96, 98, 113, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 136, 140, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 225, 227, 231, 233, 254, 284, 285, 293, 298, 309, 312, 313, 314, 315, 316, 321, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 373, 374, 377, 378, 379, 384, 385, 386, 387, 389, 392, 395, 396, 418, 420, 426, 431, 432, 455, 456, 457, 492, 493, 494, 496, 508, 514, 515, 524, 527, 533, 535, 538, 539, 540, 541, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 577, 579, 582, 586, 588, 597, 600, 625, 636, 637, 639, 643, 644, 647, 671, 672, 673, 674, 675, 676, 677, 678, 682, 683, 688, 689, 696, 697, 706, 707, 708, 709, 716, 718, 719, 724, 725, 726, 727, 728, 730, 733, 734, 735, 736, 737, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 762, 763, 764, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 798, 799, 800, 801, 804, 805, 806, 807, 808, 817, 820, 824, 825, 826, 830, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 846, 871, 877, 878, 880, 882, 883, 884, 889, 893, 912, 919, 920, 948, 967, 968, 969, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 992, 993, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1020, 1021, 1022, 1028, 1033, 1034, 1054, 1055, 1058, 1059, 1101, 1102, 1121, 1122, 1123, 1124, 1125, 1126, 1138, 1144, 1150, 1154, 1155, 1156, 1161, 1171, 1179, 1180, 1181, 1183, 1185, 1186, 1187, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1215, 1216, 1217, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1240, 1241, 1243, 1244, 1246, 1247, 1249, 1250, 1252, 1253, 1255, 1256, 1257, 1258, 1261, 1266, 1269, 1270, 1271, 1272, 1291, 1292, 1295, 1296, 1301, 1302, 1309, 1342, 1343, 1344, 1345, 1360, 1362, 1364, 1377, 1388, 1391, 1392, 1393, 1395, 1396, 1398, 1399, 1415, 1426, 1428, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1461, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1492, 1505, 1512, 1517, 1531, 1532, 1533, 1534, 1545, 1554, 1555, 1562, 1563, 1564, 1565, 1566, 1567, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1604, 1605, 1606, 1607, 1608, 1609, 1617, 1619, 1620, 1621, 1624, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1662, 1663, 1664, 1665, 1667, 1668, 1669, 1670, 1738, 1748, 1763, 1780, 1784, 1785, 1787, 1788, 1789, 1790, 1791, 1809, 1810, 1811, 1812, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1830, 1832, 1836, 1837, 1840, 1841, 1842, 1847, 1848, 1849, 1850, 1851, 1861, 1862, 1863, 1864, 1865, 1867, 1868, 1869, 1870, 1871, 1873, 1877, 1878, 1879, 1892, 1915, 1916, 1917, 1918, 1923, 1924, 1925, 1926, 1931, 1932, 1934, 1935, 1936, 1946, 1960, 1961, 1962, 1963, 1964, 1966, 1969, 1970, 1973, 1977, 1978, 1980, 1981, 1982, 1989, 1995, 2001, 2012, 2015, 2016, 2033, 2042, 2043, 2044, 2047, 2061, 2068, 2073, 2084, 2097, 2104, 2105, 2106, 2107, 2108, 2110, 2111, 2112, 2113, 2115, 2117, 2118, 2119, 2120, 2121, 2122, 2128, 2146, 2150, 2151, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2205, 2206, 2207, 2208, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2251, 2254, 2257, 2260, 2270, 2276, 2278, 2279, 2285, 2318, 2330, 2341, 2342, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2381, 2408, 2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419, 2420, 2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2430, 2431, 2435, 2440, 2445, 2449, 2482, 2493, 2494, 2495, 2496, 2497, 2532, 2533, 2534, 2544, 2545, 2546, 2554, 2564, 2565, 2568, 2572, 2580, 2581, 2582, 2587, 2588, 2589, 2590, 2591, 2598, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2659, 2660, 2661, 2662, 2690, 2692, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2828, 2829, 2830, 2832, 2836, 2846, 2847, 2850, 2915, 2924, 2930, 2933, 2970, 2971, 2972, 2973, 2974, 2980, 2981, 2982, 2983, 2984, 2987, 2989, 2990, 2991, 2994, 3002, 3003, 3008, 3009, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3047, 3048, 3085, 3086, 3088, 3104, 3128, 3129, 3130, 3131, 3132, 3144, 3145, 3146, 3148, 3149, 3150, 3152, 3153, 3154, 3156, 3158, 3190, 3191, 3192, 3195, 3196, 3209, 3210, 3236, 3238, 3239, 3256, 3259, 3268, 3296, 3300, 3303, 3304, 3314, 3315, 3316, 3320, 3328, 3329, 3330, 3334, 3335, 3336, 3337, 3338, 3339, 3350, 3353, 3354, 3355, 3356, 3357, 3358, 3359, 3360, 3361, 3362, 3365, 3366, 3368, 3370, 3371, 3372, 3373, 3374, 3375, 3376, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 3390, 3391, 3392, 3393, 3394, 3395, 3396, 3397, 3398, 3399, 3400, 3401, 3402, 3403, 3404, 3405, 3406, 3407, 3408, 3409, 3410, 3411, 3412, 3414, 3415, 3416, 3419, 3432, 3439, 3448, 3450, 3451, 3452, 3453, 3454, 3455, 3456, 3457, 3458, 3459, 3460, 3462, 3463, 3464, 3465, 3466, 3467, 3468, 3469, 3470, 3471, 3472, 3473, 3474, 3475, 3476, 3477, 3478, 3488, 3491, 3492, 3493, 3494, 3508, 3509, 3510, 3511, 3512, 3513, 3514, 3540, 3546, 3547, 3549, 3550, 3552, 3553, 3554, 3555, 3556, 3557, 3558, 3559, 3560, 3563, 3567, 3570, 3571, 3572, 3573, 3574, 3575, 3576, 3577, 3578, 3579, 3580, 3581, 3582, 3583, 3584, 3585, 3586, 3589, 3590, 3591, 3592, 3593, 3594, 3595, 3610, 3612, 3616, 3617, 3618, 3619, 3620, 3621, 3622, 3623, 3624, 3625, 3627, 3649, 3660, 3679, 3696, 3697, 3698, 3699, 3700, 3701, 3702, 3703, 3704, 3705, 3706, 3707, 3708, 3712, 3713, 3714, 3715, 3716, 3720, 3722, 3723, 3724, 3725, 3726, 3727, 3728, 3733, 3734, 3735, 3736, 3737, 3738, 3739, 3740, 3741, 3742, 3743, 3744, 3745, 3746, 3747, 3752, 3756, 3757, 3758, 3759, 3760, 3761, 3762, 3763, 3764, 3765, 3766, 3767, 3768, 3769, 3770, 3771, 3775, 3776, 3777, 3778, 3794, 3795, 3796, 3825, 3826, 3827, 3828, 3833, 3834, 3844, 3845, 3846, 3852, 3853, 3855, 3861, 3876, 3877, 3878, 3879, 3880, 3882, 3884, 3885, 3886, 3889, 3890, 3891, 3892, 3904, 3906, 3918, 3919, 3953, 3986, 3987, 3988, 3989, 3995, 4010, 4012, 4014, 4017, 4019, 4020, 4021, 4022, 4043, 4044, 4045, 4046, 4047, 4048, 4049, 4050, 4051, 4052, 4053, 4070, 4071, 4119, 4131, 4159, 4160, 4161, 4177, 4182, 4187, 4193, 4194, 4195, 4197, 4198, 4199, 4206, 4212, 4220, 4221, 4222, 4223, 4224, 4225, 4226, 4228, 4229, 4230, 4231, 4232, 4233, 4234, 4235, 4236, 4237, 4238, 4239, 4240, 4241, 4242, 4243, 4250, 4254, 4256, 4257, 4268, 4269, 4272, 4273, 4286, 4289, 4290, 4291, 4297, 4298, 4300, 4301, 4302, 4303, 4304, 4305, 4306, 4307, 4308, 4309, 4310, 4311, 4312, 4313, 4314, 4315, 4317, 4320, 4321, 4322, 4323, 4324, 4326, 4332, 4333, 4334, 4337, 4338, 4339, 4340, 4341, 4342, 4343, 4344, 4345, 4346, 4347, 4348, 4349, 4350, 4351, 4352, 4354, 4355, 4356, 4357, 4358, 4359, 4360, 4361, 4368, 4380, 4382, 4383, 4384, 4386, 4387, 4388, 4389, 4390, 4391, 4392, 4393, 4394, 4395, 4396, 4407, 4409, 4411, 4412, 4413, 4414, 4416, 4417, 4419, 4420, 4421, 4422, 4424, 4426, 4431, 4432, 4433, 4434, 4439, 4440, 4441, 4442, 4443, 4460, 4462, 4470, 4471, 4472, 4473, 4474, 4475, 4478, 4479, 4480, 4481, 4482, 4483, 4484, 4485, 4486, 4487, 4499, 4500, 4505, 4506, 4510, 4512, 4513, 4514, 4515, 4529, 4530, 4531, 4532, 4540, 4550, 4559, 4562, 4563, 4564, 4565, 4566, 4567, 4568, 4569, 4570, 4571, 4575, 4577, 4578, 4579, 4580, 4581, 4582, 4583, 4584, 4585, 4593, 4594, 4595, 4596, 4597, 4598, 4599, 4600, 4601, 4602, 4603, 4610, 4611, 4612, 4613, 4614, 4615, 4616, 4617, 4618, 4620, 4621, 4622, 4623, 4624, 4629, 4630, 4632, 4633, 4640, 4641, 4644, 4645, 4646, 4647, 4654, 4674, 4675, 4676, 4677, 4678, 4679, 4680, 4681, 4682, 4683, 4684, 4686, 4696, 4697, 4699, 4700, 4701, 4702, 4703, 4704, 4706, 4711, 4715, 4716, 4717, 4718, 4719, 4720, 4721, 4722, 4723, 4724, 4725, 4726, 4727, 4734, 4735, 4742, 4743, 4744, 4763, 4764, 4765, 4768, 4770, 4772, 4777, 4778, 4779, 4780, 4781, 4782, 4783, 4784, 4785, 4786, 4787, 4788, 4790, 4791, 4792, 4793, 4794, 4795, 4796, 4798, 4799, 4802, 4803, 4804, 4805, 4807, 4810, 4811, 4812, 4814, 4815, 4816, 4824, 4825, 4826, 4827, 4828, 4829, 4830, 4831, 4833, 4834, 4835, 4836, 4837, 4839, 4840, 4841, 4842, 4843, 4844, 4845, 4846, 4847, 4848, 4852, 4853, 4854, 4855, 4856, 4857, 4858, 4861, 4865, 4866, 4867, 4868, 4869, 4870, 4871, 4872, 4873, 4874, 4875, 4876, 4877, 4878, 4879, 4880, 4881, 4882, 4883, 4884, 4885, 4886, 4887, 4888, 4889, 4890, 4891, 4892, 4898, 4902, 4903, 4904, 4905, 4906, 4907, 4908, 4909, 4910, 4911, 4912, 4914, 4918, 4930, 4931, 4932, 4933, 4934, 4935, 4936, 4937, 4938, 4940, 4941, 4942, 4943, 4944, 4945, 4946, 4947, 4948, 4949, 4950, 4951, 4952, 4953, 4954, 4955, 4956, 4957, 4958, 4959, 4960, 4961, 4962, 4967, 4968, 4970, 4976, 4978, 4981, 4982, 4989, 4990, 4991, 4992, 4993, 4994, 4995, 4996, 4997, 4998, 5000, 5001, 5002, 5004, 5009, 5010, 5011, 5012, 5013, 5014, 5015, 5016, 5017, 5018, 5019, 5020, 5021, 5027, 5028, 5029, 5030, 5031, 5032, 5033, 5035, 5048, 5049, 5050, 5051, 5052, 5053, 5054, 5055, 5056, 5057, 5058, 5059, 5062, 5063, 5065, 5068, 5070, 5072, 5073, 5074, 5078, 5090, 5091, 5092, 5093, 5094, 5095, 5096, 5097, 5098, 5099, 5100, 5101, 5102, 5103, 5104, 5105, 5106, 5107, 5108, 5109, 5110, 5111, 5112, 5113, 5114, 5115, 5116, 5117, 5119, 5120, 5121, 5122, 5123, 5124, 5130, 5132, 5134, 5135, 5136, 5139, 5140, 5141, 5142, 5143, 5144, 5145, 5146, 5147, 5148, 5149, 5150, 5151, 5152, 5153, 5154, 5155, 5156, 5157, 5158, 5159, 5160, 5161, 5162, 5171, 5174, 5176, 5177, 5178, 5179, 5180, 5181, 5182, 5184, 5221, 5222, 5223, 5224, 5225, 5226, 5239, 5246, 5257, 5258, 5259, 5260, 5261, 5262, 5264, 5269, 5271, 5284, 5288, 5289, 5290, 5291, 5304, 5305, 5306, 5307, 5308, 5309, 5320, 5321, 5322, 5323, 5326, 5327, 5328, 5329, 5340, 5341, 5352, 5353, 5354, 5355, 5366, 5367, 5384, 5385, 5389, 5390, 5391, 5392, 5393, 5394, 5395, 5396, 5397, 5398, 5399, 5400, 5401, 5402, 5403, 5404, 5405, 5406, 5407, 5408, 5409, 5410, 5411, 5412, 5413, 5414, 5415, 5416, 5419, 5428, 5430, 5431, 5432, 5433, 5434, 5439, 5440, 5441, 5443, 5444, 5445, 5446, 5447, 5448, 5458, 5459, 5460, 5461, 5462, 5463, 5464, 5465, 5466, 5467, 5468, 5469, 5470, 5472, 5473, 5474, 5475, 5476, 5477, 5478, 5479, 5480, 5481, 5482, 5483, 5484, 5485, 5486, 5488, 5489, 5490, 5491, 5492, 5493, 5494, 5495, 5496, 5500, 5502, 5503, 5504, 5505, 5506, 5507, 5508, 5509, 5511, 5512, 5530, 5534, 5535, 5536, 5538, 5539, 5540, 5541, 5542, 5543, 5544, 5545, 5546, 5567, 5568, 5569, 5570, 5571, 5572, 5573, 5574, 5575, 5576, 5577, 5578, 5579, 5580, 5581, 5582, 5583, 5584, 5585, 5586, 5587, 5588, 5597, 5598, 5599, 5600, 5601, 5602, 5604, 5605, 5610, 5611, 5612, 5613, 5618, 5637, 5638, 5639, 5640, 5641, 5642, 5648, 5656, 5657, 5658, 5660, 5662, 5664, 5665, 5666, 5667, 5668, 5669, 5670, 5671, 5672, 5673, 5674, 5675, 5676, 5677, 5678, 5679, 5680, 5681, 5682, 5683, 5684, 5685, 5686, 5687, 5688, 5689, 5690, 5691, 5692, 5693, 5694, 5695, 5696, 5697, 5698, 5699, 5701, 5705, 5706, 5707, 5708, 5709, 5710, 5711, 5712, 5713, 5714, 5715, 5716, 5717, 5718, 5719, 5720, 5725, 5726, 5727, 5728, 5733, 5777, 5778, 5784, 5785, 5808, 5815, 5817, 5818, 5819, 5822, 5823, 5824, 5825, 5826, 5827, 5836, 5837, 5838, 5839, 5846, 5855, 5860, 5861, 5864, 5866, 5867, 5868, 5869, 5871, 5881, 5882, 5886, 5887, 5888, 5894, 5898, 5912, 5914, 5915, 5929, 5930, 5933, 5937, 5954, 5955, 5957, 5958, 5959, 5960, 5977, 5989, 5997, 6006, 6007, 6008, 6009, 6010, 6012, 6013, 6014, 6015, 6016, 6017, 6018, 6025, 6026, 6041, 6042, 6053, 6054, 6055, 6065, 6066, 6067, 6068, 6083, 6085, 6097, 6098, 6099, 6103, 6104, 6105, 6106, 6107, 6108, 6109, 6110, 6111, 6112, 6113, 6114, 6115, 6116, 6118, 6123, 6124, 6125, 6127, 6129, 6130, 6131, 6132, 6133, 6145, 6146, 6147, 6148, 6149, 6150, 6151, 6152, 6156, 6159, 6161, 6162, 6163, 6164, 6166, 6171, 6172, 6178, 6189, 6190, 6207, 6214, 6215, 6216, 6217, 6218, 6224, 6225, 6226, 6227, 6228, 6229, 6253, 6257, 6258, 6260, 6264, 6271, 6276, 6278, 6279, 6280, 6281, 6282, 6284, 6292, 6296, 6297, 6300, 6301, 6302, 6303, 6304, 6305, 6313, 6314, 6340, 6342, 6343, 6344, 6345, 6346, 6347, 6348, 6349, 6350, 6351, 6352, 6353, 6354, 6355, 6356, 6357, 6358, 6359, 6361, 6362, 6363, 6364, 6365, 6366, 6367, 6368, 6369, 6370, 6371, 6372, 6373, 6374, 6375, 6376, 6377, 6378, 6379, 6382, 6384, 6385, 6388, 6391, 6392, 6394, 6395, 6396, 6397, 6398, 6399, 6400, 6401, 6408, 6410, 6412, 6414, 6415, 6416, 6417, 6418, 6419, 6420, 6421, 6422, 6423, 6424, 6425, 6426, 6427, 6428, 6429, 6430, 6431, 6432, 6433, 6438, 6439, 6457, 6471, 6472, 6475, 6476, 6477, 6483, 6484, 6485, 6486, 6487, 6489, 6490, 6491, 6492, 6493, 6494, 6495, 6496, 6497, 6498, 6499, 6500, 6501, 6502, 6503, 6504, 6505, 6506, 6509, 6510, 6512, 6513, 6514, 6515, 6516, 6517, 6518, 6519, 6536, 6537, 6538, 6539, 6540, 6541, 6542, 6543, 6544, 6545, 6546, 6547, 6573, 6574, 6575, 6576, 6579, 6580, 6581, 6582, 6583, 6591, 6592, 6595, 6617, 6622, 6623, 6624, 6625, 6626, 6627, 6628, 6629, 6630, 6632, 6642, 6644, 6648, 6649, 6650, 6669, 6670, 6671, 6672, 6673, 6674, 6675, 6676, 6684, 6685, 6686, 6687, 6688, 6690, 6692, 6693, 6694, 6697, 6698, 6699, 6700, 6701, 6702, 6703, 6704, 6706, 6707, 6710, 6711, 6712, 6713, 6714, 6718, 6719, 6720, 6725, 6726, 6727, 6728, 6729, 6732, 6733, 6734, 6735, 6736, 6756, 6757, 6758, 6766, 6767, 6770, 6772, 6773, 6774, 6777, 6778, 6779, 6780, 6781, 6792, 6793, 6794, 6796, 6797, 6798, 6799, 6800, 6801, 6802, 6803, 6804, 6805, 6806, 6807, 6808, 6809, 6810, 6811, 6812, 6815, 6819, 6820, 6821, 6822, 6827, 6831, 6833, 6835, 6839, 6841, 6843, 6845, 6849, 6853, 6855, 6857, 6859, 6861, 6862, 6864, 6904, 6906, 6908, 6910, 6912, 6939, 6941, 6958, 6959, 6960, 6961, 6971, 6972, 7015, 7018, 7019, 7021, 7022, 7024, 7025, 7028, 7031, 7032, 7043, 7070, 7095, 7096, 7097, 7099, 7100, 7101, 7102, 7103, 7104, 7105, 7106, 7107, 7108, 7109, 7110, 7111, 7112, 7113, 7114, 7115, 7116, 7117, 7119, 7121, 7122, 7123, 7124, 7125, 7126, 7127, 7128, 7129, 7130, 7131, 7132, 7133, 7134, 7135, 7136, 7137, 7138, 7139, 7140, 7141, 7142, 7143, 7152, 7153, 7154, 7156, 7157, 7158, 7159, 7160, 7161, 7162, 7163, 7164, 7165, 7166, 7167, 7168, 7169, 7170, 7171, 7172, 7173, 7174, 7175, 7176, 7177, 7178, 7183, 7185, 7186, 7187, 7188, 7189, 7191, 7194, 7195, 7205, 7210, 7211, 7213, 7217, 7218, 7219, 7220, 7221, 7222, 7223, 7224, 7225, 7226, 7232, 7233, 7250, 7284, 7285, 7297, 7298, 7299, 7300, 7301, 7302, 7303, 7304, 7313, 7314, 7315, 7316, 7317, 7318, 7319, 7324, 7325, 7326, 7327, 7328, 7329, 7330, 7332, 7333, 7338, 7339, 7341, 7342, 7344, 7348, 7383, 7388, 7390, 7391, 7392, 7393, 7394, 7397, 7401, 7403, 7409, 7417, 7430, 7431, 7433, 7435, 7455, 7472, 7477, 7489, 7490, 7491, 7492, 7493, 7494, 7495, 7496, 7499, 7501, 7502, 7503, 7506, 7507, 7508, 7509, 7510, 7512, 7513, 7515, 7516, 7517, 7519, 7525, 7526, 7527, 7528, 7532, 7533, 7539, 7547, 7550, 7551, 7552, 7553, 7554, 7556, 7557, 7559, 7560, 7587, 7588, 7589, 7599, 7600, 7615, 7616, 7620, 7621, 7623, 7624, 7625, 7626, 7627, 7628, 7629, 7630, 7631, 7632, 7633, 7635, 7636, 7638, 7639, 7640, 7641, 7650, 7651, 7655, 7665, 7666, 7667, 7672, 7674, 7700, 7701, 7702, 7703, 7704, 7705, 7706, 7707, 7708, 7709, 7710, 7723, 7724, 7725, 7726, 7727, 7728, 7729, 7734, 7740, 7741, 7746, 7747, 7748, 7749, 7750, 7751, 7752, 7753, 7761, 7762, 7763, 7764, 7765, 7766, 7779, 7780, 7781, 7785, 7786, 7789, 7807, 7808, 7809, 7810, 7811, 7812, 7813, 7814, 7815, 7816, 7821, 7822, 7830, 7849, 7850, 7854, 7856, 7857, 7862, 7863, 7874, 7875, 7898, 7899, 7903, 7904, 7907, 7908, 7909, 7910, 7930, 7941, 7942, 7944, 7949, 7956, 7957, 7958, 7961, 7963, 7965, 7966, 7967, 7969, 7970, 7971, 7972, 7975, 7976, 7979, 7981, 7982, 7983, 7992, 7994, 7996, 7997, 7999, 8000, 8003, 8004, 8005, 8009, 8011, 8012, 8013, 8014, 8015, 8016, 8017, 8018, 8019, 8020, 8022, 8023, 8026, 8027, 8028, 8032, 8033, 8034, 8035, 8042, 8043, 8044, 8045, 8046, 8047, 8048, 8049, 8050, 8051, 8052, 8053, 8054, 8055, 8056, 8057, 8060, 8062, 8073, 8074, 8075, 8076, 8077, 8078, 8079, 8080, 8081, 8082, 8083, 8084, 8085, 8086, 8087, 8088, 8089, 8090, 8091, 8092, 8093, 8094, 8098, 8100, 8101, 8102, 8103, 8104, 8105, 8106, 8108, 8109, 8110, 8111, 8112, 8113, 8114, 8115, 8116, 8117, 8118, 8119, 8120, 8121, 8122, 8123, 8124, 8125, 8126, 8127, 8128, 8129, 8130, 8131, 8135, 8136, 8138, 8139, 8140, 8142, 8143, 8144, 8145, 8146, 8147, 8148, 8149, 8150, 8151, 8152, 8153, 8154, 8155, 8156, 8157, 8158, 8159, 8160, 8161, 8162, 8163, 8164, 8165, 8166, 8167, 8168, 8169, 8170, 8171, 8172, 8173, 8174, 8175, 8176, 8177, 8178, 8179, 8182, 8188, 8193, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8203, 8204, 8205, 8207, 8208, 8209, 8210, 8211, 8213, 8214, 8215, 8216, 8217, 8220, 8223, 8224, 8225, 8226, 8227, 8228, 8229, 8230, 8231, 8232, 8233, 8234, 8235, 8236, 8237, 8238, 8239, 8240, 8241, 8242, 8243, 8246, 8247, 8249, 8250, 8252, 8253, 8254, 8255, 8256, 8257, 8258, 8259, 8260, 8261, 8263, 8264, 8265, 8266, 8293, 8294, 8295, 8296, 8298, 8320, 8323, 8324, 8336, 8337, 8338, 8341, 8354, 8358, 8360, 8361, 8362, 8363, 8364, 8365, 8366, 8367, 8373, 8375, 8376, 8377, 8378, 8379, 8380, 8381, 8382, 8383, 8384, 8386, 8387, 8389, 8390, 8391, 8392, 8393, 8394, 8395, 8396, 8397, 8398, 8399, 8402, 8403, 8404, 8405, 8407, 8408, 8409, 8410, 8411, 8412, 8413, 8414, 8415, 8416, 8418, 8419, 8424, 8425, 8426, 8427, 8428, 8429, 8430, 8431, 8432, 8434, 8435, 8436, 8437, 8438, 8439, 8440, 8441, 8442, 8445, 8447, 8449, 8451, 8453, 8455, 8456, 8457, 8459, 8460, 8461, 8463, 8464, 8465, 8467, 8468, 8470, 8471, 8472, 8473, 8474, 8475, 8476, 8477, 8478, 8479, 8480, 8481, 8484, 8485, 8486, 8487, 8488, 8489, 8490, 8500, 8501, 8502, 8504, 8505, 8516, 8522, 8525, 8539, 8540, 8544, 8545, 8546, 8547, 8550, 8551, 8554, 8558, 8561, 8562, 8586, 8587, 8605, 8630, 8633, 8634, 8635, 8636, 8637, 8639, 8640, 8641, 8642, 8645, 8646, 8647, 8648, 8649, 8650, 8651, 8652, 8653, 8654, 8655, 8656, 8657, 8658, 8659, 8660, 8661, 8662, 8663, 8664, 8666, 8667, 8668, 8671, 8675, 8676, 8677, 8678, 8679, 8689, 8690, 8691, 8696, 8704, 8705, 8706, 8707, 8708, 8709, 8710, 8712, 8730, 8732, 8734, 8735, 8740, 8742, 8751, 8753, 8756, 8758, 8759, 8760, 8761, 8762, 8765, 8766, 8767, 8768, 8769, 8770, 8771, 8772, 8773, 8774, 8775, 8776, 8784, 8785, 8786, 8787, 8788, 8789, 8790, 8791, 8792, 8793, 8794, 8795, 8797, 8802, 8803, 8804, 8805, 8806, 8807, 8808, 8810, 8811, 8812, 8813, 8814, 8815, 8816, 8818, 8820, 8821, 8822, 8825, 8827, 8830, 8832, 8840, 8841, 8842, 8843, 8847, 8853, 8854, 8855, 8856, 8857, 8858, 8859, 8860, 8861, 8862, 8863, 8864, 8866, 8867, 8868, 8869, 8870, 8871, 8872, 8873, 8874, 8875, 8876, 8877, 8878, 8879, 8880, 8881, 8882, 8883, 8884, 8885, 8886, 8887, 8888, 8889, 8890, 8891, 8892, 8893, 8894, 8896, 8897, 8898, 8900, 8901, 8902, 8903, 8905, 8906, 8907, 8909, 8910, 8912, 8913, 8914, 8916, 8919, 8920, 8924, 8925, 8928, 8931, 8932, 8933, 8937, 8939, 8952, 8962, 8963, 8964, 8965, 8966, 8967, 8969, 8970, 8971, 8972, 8973, 8974, 8975, 8976, 8977, 8979, 8980, 8981, 8982, 8983, 8984, 8985, 8986, 8987, 8988, 8989, 8990, 8991, 8992, 8993, 8994, 8995, 8996, 8997, 8998, 8999, 9000, 9001, 9002, 9003, 9004, 9005, 9006, 9007, 9008, 9009, 9010, 9011, 9012, 9013, 9014, 9015, 9016, 9017, 9018, 9019, 9024, 9025, 9038, 9039, 9133, 9134, 9135, 9136, 9139, 9141, 9142, 9143, 9144, 9190, 9191, 9194, 9203, 9204, 9205, 9206, 9207, 9208, 9209, 9210, 9211, 9212, 9213, 9214, 9215, 9216, 9217, 9218, 9219, 9220, 9221, 9232, 9243, 9244, 9245, 9248, 9249, 9250, 9251, 9252, 9253, 9254, 9255, 9257, 9259, 9260, 9261, 9262, 9263, 9264, 9265, 9266, 9267, 9268, 9269, 9270, 9271, 9273, 9274, 9275, 9276, 9277, 9278, 9279, 9280, 9281, 9282, 9283, 9284, 9285, 9286, 9287, 9288, 9289, 9290, 9291, 9292, 9294, 9295, 9296, 9297, 9299, 9300, 9301, 9302, 9303, 9304, 9305, 9307, 9308, 9309, 9310, 9311, 9312, 9313, 9314, 9315, 9316, 9317, 9318, 9319, 9320, 9321, 9322, 9323, 9324, 9325, 9326, 9327, 9328, 9329, 9330, 9331, 9332, 9333, 9334, 9335, 9336, 9337, 9338, 9339, 9340, 9341, 9342, 9343, 9344, 9345, 9346, 9347, 9348, 9349, 9350, 9351, 9352, 9353, 9354, 9355, 9356, 9357, 9358, 9359, 9360, 9361, 9362, 9363, 9364, 9365, 9366, 9367, 9368, 9369, 9370, 9371, 9372, 9373, 9374, 9375, 9376, 9377, 9378, 9379, 9380, 9381, 9382, 9383, 9384, 9385, 9386, 9387, 9388, 9389, 9390, 9391, 9392, 9393, 9394, 9395, 9396, 9397, 9399, 9410, 9411, 9412, 9413, 9414, 9415, 9416, 9417, 9418, 9419, 9420, 9421, 9422, 9423, 9424, 9426, 9427, 9428, 9429, 9431, 9432, 9433, 9435, 9436, 9437, 9438, 9439, 9440, 9441, 9442, 9444, 9445, 9446, 9447, 9448, 9449, 9450, 9451, 9452, 9453, 9456, 9457, 9458, 9461, 9462, 9463, 9464, 9465, 9466, 9467, 9468, 9469, 9470, 9471, 9472, 9475, 9476, 9477, 9478, 9479, 9480, 9481, 9482, 9483, 9484, 9485, 9486, 9487, 9488, 9489, 9490, 9491, 9505, 9506, 9509, 9510, 9511, 9512, 9513, 9514, 9516, 9518, 9521, 9522, 9523, 9524, 9525, 9526, 9527, 9530, 9531, 9532, 9533, 9534, 9535, 9537, 9538, 9539, 9541, 9542, 9543, 9544, 9545, 9546, 9547, 9548, 9549, 9550, 9551, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9561, 9562, 9563, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579, 9580, 9581, 9582, 9583, 9584, 9585, 9586, 9587, 9591, 9592, 9593, 9594, 9595, 9596, 9597, 9598, 9599, 9600, 9601, 9602, 9603, 9604, 9605, 9606, 9607, 9608, 9610, 9618, 9619, 9620, 9621, 9622, 9623, 9624, 9625, 9626, 9627, 9628, 9629, 9630, 9631, 9632, 9633, 9634, 9635, 9636, 9639, 9640, 9641, 9642, 9645, 9646, 9647, 9648, 9649, 9650, 9651, 9652, 9653, 9654, 9655, 9656, 9657, 9658, 9659, 9660, 9661, 9662, 9663, 9664, 9665, 9666, 9667, 9668, 9669, 9670, 9671, 9675, 9676, 9722, 9729, 9730, 9733, 9734, 9747, 9748, 9764, 9765, 9766, 9767, 9768, 9769, 9770, 9771, 9772, 9773, 9774, 9775, 9776, 9777, 9778, 9779, 9780, 9781, 9782, 9783, 9784, 9785, 9786, 9787, 9788, 9789, 9790, 9791, 9792, 9793, 9794, 9795, 9796, 9797, 9798, 9799, 9800, 9803, 9807, 9808, 9809, 9810, 9811, 9814, 9815, 9816, 9817, 9823, 9824, 9825, 9826, 9854, 9856, 9857, 9859, 9860, 9862, 9863, 9864, 9865, 9866, 9867, 9868, 9869, 9870, 9871, 9872, 9873, 9874, 9875, 9876, 9877, 9878, 9881, 9882, 9883, 9884, 9885, 9886, 9887, 9888, 9889, 9891, 9892, 9893, 9894, 9895, 9897, 9898, 9899, 9900, 9902, 9903, 9904, 9906, 9907, 9908, 9909, 9910, 9911, 9912, 9913, 9914, 9915, 9916, 9917, 9918, 9919, 9920, 9921, 9922, 9923, 9924, 9925, 9926, 9927, 9928, 9929, 9930, 9931, 9932, 9933, 9934, 9935, 9936, 9937, 9938, 9939, 9940, 9941, 9942, 9943, 9944, 9945, 9946, 9947, 9948, 9949, 9950, 9951, 9952, 9953, 9954, 9955, 9956, 9957, 9958, 9959, 9961, 9962, 9963, 9964, 9965, 9966, 9967, 9968, 9969, 9970, 9971, 9972, 9973, 9974, 9976, 9977, 9978, 9979, 9980, 9981, 9982, 9983, 9985, 9986, 9987, 9988, 9989, 9990, 9991, 9992, 9993, 9994, 9995, 9996, 9997, 9998, 9999, 10000, 10001, 10002, 10003, 10004, 10005, 10006, 10007, 10008, 10009, 10010, 10011, 10012, 10013, 10014, 10015, 10016, 10017, 10018, 10019, 10020, 10021, 10022, 10023, 10024, 10025, 10026, 10027, 10028, 10029, 10030, 10031, 10032, 10033, 10034, 10035, 10036, 10037, 10038, 10039, 10040, 10041, 10042, 10043, 10044, 10045, 10046, 10047, 10048, 10050, 10051, 10052, 10054, 10055, 10056, 10057, 10058, 10059, 10060, 10061, 10062, 10063, 10065, 10066, 10067, 10068, 10069, 10070, 10071, 10072, 10073, 10074, 10075, 10076, 10077, 10078, 10079, 10080, 10081, 10082, 10083, 10084, 10085, 10086, 10087, 10088, 10089, 10090, 10091, 10092, 10093, 10094, 10095, 10096, 10097, 10098, 10099, 10100, 10101, 10103, 10104, 10105, 10106, 10107, 10108, 10109, 10110, 10111, 10112, 10113, 10114, 10115, 10116, 10117, 10118, 10119, 10120, 10121, 10122, 10123, 10124, 10125, 10126, 10127, 10128, 10129, 10130, 10131, 10132, 10133, 10134, 10135, 10136, 10137, 10138, 10139, 10140, 10141, 10142, 10143, 10144, 10145, 10146, 10147, 10148, 10149, 10150, 10151, 10152, 10153, 10154, 10155, 10156, 10157, 10158, 10159, 10160, 10161, 10162, 10163, 10164, 10165, 10166, 10167, 10168, 10169, 10170, 10171, 10172, 10173, 10174, 10175, 10176, 10177, 10178, 10179, 10180, 10181, 10182, 10183, 10184, 10185, 10186, 10187, 10188, 10189, 10190, 10191, 10192, 10193, 10194, 10195, 10196, 10197, 10198, 10199, 10200, 10201, 10202, 10203, 10204, 10205, 10206, 10207, 10208, 10209, 10210, 10211, 10212, 10213, 10214, 10215, 10216, 10217, 10218, 10219, 10220, 10221, 10222, 10223, 10224, 10225, 10226, 10227, 10228, 10229, 10230, 10231, 10232, 10233, 10234, 10235, 10236, 10237, 10238, 10239, 10240, 10241, 10242, 10243, 10244, 10245, 10246, 10247, 10248, 10249, 10250, 10251, 10252, 10253, 10254, 10255, 10256, 10257, 10258, 10259, 10260, 10261, 10262, 10263, 10264, 10265, 10266, 10267, 10268, 10269, 10270, 10271, 10272, 10273, 10274, 10275, 10276, 10277, 10278, 10279, 10280, 10281, 10282, 10283, 10284, 10285, 10286, 10287, 10288, 10289, 10290, 10291, 10292, 10293, 10294, 10295, 10296, 10297, 10298, 10299, 10300, 10301, 10302, 10303, 10304, 10305, 10306, 10307, 10308, 10309, 10310, 10311, 10312, 10313, 10314, 10315, 10316, 10317, 10318, 10319, 10320, 10321, 10322, 10323, 10324, 10325, 10326, 10327, 10328, 10329, 10330, 10331, 10332, 10333, 10334, 10335, 10336, 10337, 10338, 10339, 10340, 10341, 10342, 10343, 10344, 10345, 10346, 10347, 10348, 10349, 10350, 10351, 10352, 10353, 10354, 10355, 10356, 10357, 10358, 10359, 10360, 10361, 10362, 10363, 10364, 10365, 10366, 10367, 10371, 10372, 10373, 10375, 10390, 10391, 10392, 10393, 10394, 10395, 10398, 10400, 10401, 10402, 10403, 10404, 10405, 10406, 10408, 10409, 10410, 10411, 10412, 10413, 10426, 10427, 10432, 10433, 10434, 10437, 10438, 10439, 10444, 10445, 10446, 10447, 10448, 10449, 10450, 10451, 10452, 10453, 10454, 10455, 10456, 10457, 10458, 10459, 10460, 10461, 10462, 10463, 10464, 10465, 10466, 10467, 10468, 10469, 10470, 10471, 10472, 10473, 10474, 10475, 10477, 10478, 10479, 10480, 10481, 10482, 10483, 10484, 10485, 10486, 10487, 10488, 10489, 10490, 10491, 10493, 10498, 10499, 10501, 10502, 10503, 10504, 10513, 10516, 10519, 10521, 10527, 10528, 10529, 10538, 10542, 10543, 10546, 10547, 10556, 10557, 10558, 10572, 10573, 10574, 10575, 10581, 10582, 10586, 10588, 10594, 10598, 10603, 10621, 10622, 10624, 10627, 10628, 10629, 10630, 10631, 10632, 10635, 10640, 10650, 10655, 10656, 10657, 10659, 10660, 10661, 10662, 10663, 10665, 10666, 10667, 10668, 10669, 10670, 10671, 10672, 10673, 10674, 10675, 10676, 10677, 10678, 10679, 10680, 10681, 10682, 10683, 10684, 10685, 10687, 10688, 10697, 10698, 10699, 10704, 10705, 10706, 10708, 10709, 10710, 10711, 10723, 10724, 10726, 10727, 10731, 10739, 10740, 10741, 10742, 10743, 10744, 10745, 10746, 10748, 10749, 10750, 10751, 10752, 10753, 10754, 10755, 10756, 10757, 10760, 10761, 10762, 10763, 10764, 10765, 10766, 10769, 10770, 10771, 10772, 10773, 10786, 10790, 10791, 10792, 10793, 10794, 10795, 10796, 10797, 10798, 10799, 10800, 10801, 10802, 10803, 10804, 10805, 10806, 10807, 10808, 10809, 10810, 10811, 10813, 10822, 10823, 10824, 10825, 10826, 10827, 10828, 10829, 10834, 10836, 10838, 10839, 10840, 10842, 10843, 10846, 10847, 10848, 10849, 10850, 10851, 10852, 10853, 10854, 10855, 10856, 10857, 10858, 10859, 10860, 10861, 10862, 10863, 10864, 10866, 10867, 10868, 10869, 10870, 10871, 10872, 10873, 10874, 10875, 10876, 10877
	);

	// Trying to catch all npc ids in the sailing beta but we don't know them ahead of time
	private static final int MAX_NPC_ID_BEFORE_SAILING_BETA = 14204;

	private static final int BLACKLIST_OVERRIDE_RATE = 100;

	@Subscribe
	public void onNpcSpawned(NpcSpawned npcSpawned)
	{
		processNpc(npcSpawned.getNpc(), true);
	}

	@Subscribe
	public void onNpcChanged(NpcChanged npcChanged)
	{
		processNpc(npcChanged.getNpc(), false);
	}

	private void processNpc(NPC npc, boolean isSpawn)
	{
		int id = npc.getComposition().getId();
		int index = npc.getIndex();
		int rate = 1;
		int world = client.getWorld();

		// If the id is not in the whitelist and doesn't succeed the roll, drop it. Otherwise update rate and store.
		if (!(whitelist.contains(id) || id > MAX_NPC_ID_BEFORE_SAILING_BETA))
		{
			if (Math.random() < 1.0 / BLACKLIST_OVERRIDE_RATE)
			{
				rate = BLACKLIST_OVERRIDE_RATE;
			}
			else
			{
				log.trace(String.format("Skipping non-whitelisted id: %d", id));
				return;
			}
		}


		LocalPoint local = LocalPoint.fromWorld(client, npc.getWorldLocation());
		if (local == null)
		{
			return;
		}
		WorldPoint location = WorldPoint.fromLocalInstance(client, local);
		boolean isInInstance = client.isInInstancedRegion();
		NpcSightingData data = new NpcSightingData(id, index, rate, isSpawn, world, isInInstance, location);
		manager.storeEvent(data);
		log.debug(String.format("Stored event: (%d\t%d)", id, rate));
	}
}

package com.Crowdsourcing.scenery;

import lombok.AllArgsConstructor;
import lombok.Data;
import net.runelite.api.coords.WorldPoint;

@Data
@AllArgsConstructor
public class SceneryEvent
{
	private final SceneryEventType type;
	private final WorldPoint location;
	private final int id;
	private final int rate;
}
package com.Crowdsourcing.scenery;

import com.google.common.collect.ImmutableSet;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.DecorativeObjectSpawned;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GroundObjectSpawned;
import net.runelite.api.events.WallObjectSpawned;
import net.runelite.client.eventbus.Subscribe;
import com.Crowdsourcing.CrowdsourcingManager;

@Slf4j
public class CrowdsourcingScenery
{
	@Inject
	private CrowdsourcingManager manager;

	@Inject
	private Client client;

	private GameState gameState;

	private static final int BLACKLIST_OVERRIDE_RATE = 100;

	// List of objects we don't care about, even if they are loaded later. Mostly POH.
	private final ImmutableSet<Integer> blacklist = ImmutableSet.of(
		// All in POH...
		40963, 5121, 37469, 34833, 5126, 5127, 29189, 13320, 5129, 13322, 41024, 41025, 41026, 13323, 41028, 41030, 41031, 41032, 5132, 41034, 41035, 5133, 5134, 5135, 13328, 13329, 13671, 41068, 13330, 13331, 18793, 5140, 13674, 15381, 13326, 5142, 5143, 5144, 41106, 13337, 13338, 15387, 5148, 41131, 41132, 41133, 41134, 15389, 41136, 41137, 41138, 41139, 41140, 5150, 41142, 41143, 41144, 41145, 41146, 28859, 41148, 41149, 41150, 41151, 41152, 5152, 41154, 41155, 41157, 13345, 41162, 5154, 26830, 37581, 26832, 26833, 26834, 26835, 26836, 26837, 26838, 41175, 26840, 15396, 26842, 41179, 26844, 41181, 26846, 13349, 26848, 26849, 26850, 26851, 26852, 26853, 26854, 26855, 26856, 26857, 26859, 26860, 37586, 26863, 26864, 26865, 26866, 26867, 26868, 26869, 26871, 26872, 37468, 13375, 13017, 33357, 5130, 13361, 18766, 18768, 18769, 18770, 18771, 18772, 18774, 18776, 18778, 18780, 18782, 18784, 18786, 18788, 18790, 18792, 13372, 18794, 18796, 18798, 13373, 18800, 18802, 18803, 18804, 18806, 18808, 18809, 18810, 18811, 18812, 18813, 18814, 18815, 13378, 41027, 5128, 33179, 33180, 33181, 15429, 4515, 4516, 4517, 4518, 4519, 4520, 4521, 4523, 4524, 4525, 4527, 4528, 4529, 4532, 4534, 41033, 4537, 27068, 27069, 27070, 29119, 29120, 29121, 29122, 29123, 29124, 29125, 29126, 29127, 29128, 29129, 29130, 29131, 29132, 29133, 13389, 29136, 29137, 29138, 29139, 29140, 29141, 29142, 29143, 29144, 29145, 29146, 29147, 29148, 29150, 29151, 29152, 13392, 29155, 29156, 37349, 29158, 29159, 29160, 29161, 29162, 13394, 29166, 37629, 29168, 29169, 13396, 13383, 13397, 29184, 29185, 13398, 13400, 26845, 29207, 29211, 13402, 5137, 33434, 29226, 29227, 29228, 29229, 29230, 29231, 29232, 29233, 29234, 29235, 29236, 29238, 29239, 29240, 29241, 29242, 29243, 37436, 37437, 29246, 29247, 10816, 41141, 33346, 33347, 29252, 33349, 33350, 33351, 33352, 33353, 29258, 29259, 29260, 29261, 6734, 6735, 29264, 37459, 29267, 29268, 29269, 29270, 29271, 29272, 6745, 6746, 6747, 29276, 29277, 19038, 6751, 6752, 6753, 6754, 6755, 6756, 6758, 6759, 6760, 6761, 6762, 6763, 6764, 6765, 6766, 6767, 6768, 6769, 6770, 33396, 13343, 13319, 6777, 6778, 6779, 6780, 6782, 33407, 5146, 33409, 6786, 6787, 6788, 6789, 6790, 40385, 6792, 6793, 6794, 33419, 33420, 27074, 6798, 6799, 6802, 6803, 6804, 6805, 6806, 29335, 33432, 29337, 29338, 2715, 29340, 29341, 29342, 29344, 29345, 29346, 29347, 29348, 29349, 29350, 29352, 29353, 29354, 29355, 29356, 29357, 29358, 29359, 29360, 29361, 37559, 27082, 5138, 27083, 37577, 37579, 13390, 13005, 37583, 37585, 13010, 37587, 37589, 37590, 37591, 37592, 37593, 13018, 37598, 33372, 37603, 13127, 37617, 37618, 37620, 37621, 33366, 37630, 6729, 13733, 41434, 13090, 13091, 13095, 13097, 13325, 13111, 13112, 13116, 13117, 13120, 13121, 31554, 13126, 29153, 13128, 13129, 13130, 13131, 13132, 13137, 13138, 13139, 13140, 13141, 13142, 13143, 13144, 13145, 13147, 13148, 13149, 13150, 29157, 13152, 13153, 13154, 13155, 13157, 13158, 13159, 13160, 13161, 13165, 13166, 13167, 13168, 13169, 13170, 13171, 13172, 13173, 13174, 13175, 13178, 13179, 13182, 13187, 13192, 13197, 26831, 40771, 5145, 15256, 15257, 15259, 15260, 13213, 15262, 15263, 13216, 15265, 15266, 15267, 15268, 15269, 15270, 15271, 15273, 15274, 15275, 15276, 15277, 15278, 15279, 15280, 15281, 15282, 15283, 15284, 15285, 15286, 15287, 15288, 15289, 15290, 15291, 15292, 15293, 15294, 15295, 15296, 15297, 15298, 15299, 15300, 15301, 15302, 15303, 15304, 31689, 15306, 39883, 39884, 15309, 15310, 13263, 5147, 15315, 15316, 15317, 13271, 13272, 6784, 15323, 15324, 15325, 15326, 15327, 15328, 15329, 13282, 15331, 13285, 15336, 15337, 13291, 13293, 15342, 15343, 15344, 15345, 15346, 15347, 15348, 15349, 15350, 15351, 15352, 15353, 15354, 15355, 15356, 13309, 13332, 13311, 13312, 15361, 15362, 15363, 15364, 15365, 15366, 15367, 15368, 15369, 15370, 15371, 15372, 15373, 15374, 15375, 15376, 15377, 15378, 15379, 15380, 5141, 15382, 15383, 15384, 15385, 15386, 13339, 13340, 5149, 13342, 5151, 15392, 15393, 15394, 15395, 13348, 15397, 15398, 15399, 15400, 15401, 15402, 15403, 15404, 15405, 15406, 15407, 15408, 15409, 13362, 13363, 13365, 13366, 13367, 13368, 13369, 13370, 13151, 15420, 15421, 15422, 15423, 15424, 15425, 15426, 15427, 13381, 13382, 15431, 15432, 13385, 15434, 15435, 15436, 15437, 15438, 15439, 15440, 15441, 15442, 15443, 15444, 15445, 15446, 15447, 15448, 15450, 13404, 41172, 41147, 33385, 26839, 41153, 9354, 9355, 5631, 13333, 4540, 5136, 13482, 13483, 13484, 13487, 13489, 13490, 13491, 13497, 13498, 13499, 13500, 13501, 13502, 13503, 13505, 13507, 13508, 13510, 13511, 13512, 13513, 13514, 13515, 13516, 13517, 13519, 13520, 13521, 13522, 13523, 13524, 13526, 13527, 13528, 13531, 6728, 13536, 13539, 13542, 31977, 31978, 13547, 13549, 13550, 13551, 31985, 13554, 13556, 13557, 13558, 13559, 13561, 13563, 13565, 13566, 13567, 13571, 13572, 13573, 13574, 13575, 13576, 13578, 13579, 13341, 26841, 26843, 6727, 15388, 13615, 13616, 13617, 13618, 13619, 13620, 41182, 13622, 13624, 13625, 13626, 13627, 13633, 13634, 13636, 13637, 13639, 13640, 13641, 13642, 13643, 13644, 13647, 13648, 13649, 13650, 13652, 13653, 13654, 13655, 13656, 13657, 13658, 13659, 13661, 13662, 13663, 13664, 13665, 13666, 13667, 13668, 13669, 13670, 13344, 13672, 13673, 15390, 13675, 13676, 13677, 26847, 29245, 13684, 13685, 13686, 13687, 13689, 13695, 13696, 29248, 29249, 15391, 37442, 26861, 13208, 29251, 13721, 13722, 13723, 13725, 29253, 40859, 13732, 29254, 13737, 29255, 31986, 15261, 29256, 13214, 13750, 29257, 13753, 13215, 40383, 40384, 15264, 13762, 33355, 13769, 6733, 13778, 13780, 29262, 29263, 13794, 13795, 13796, 13798, 13799, 13212, 13810, 6739, 13814, 13817, 6741, 5632, 13826, 13827, 6742, 13830, 13228, 6743, 13731, 6744, 29273, 29274, 29275, 6748, 33373, 6750, 33375, 13240, 13011, 5139, 26231, 41416, 33390, 33391, 29244, 6740, 15305, 26296, 26297, 26298, 26299, 15307, 15308, 6776, 33402, 13264, 33408, 33410, 5907, 33412, 33413, 33414, 6791, 13277, 33416, 33417, 33418, 40768, 40769, 40770, 6795, 40772, 40773, 40774, 13281, 40776, 40778, 40779, 15330, 13283, 29250, 34653, 34654, 13289, 33429, 6807, 40846, 40847, 40848, 29336, 40851, 13294, 33433, 13295, 40861, 40862, 40863, 4541, 29339, 40871, 40872, 13298, 40878, 40880, 13299, 27071, 6749, 13302, 40904, 13303, 13304, 40915, 27072, 40917, 13305, 13306, 13307, 13308, 41135, 33415, 31983,
		// More POH...
		13008, 13009, 13015, 13016, 13098, 13099, 13100, 13101, 13102, 13103, 13108, 13110, 13118, 13119, 13350, 13351, 13391, 13538, 13540, 13543, 13629, 13632, 13697, 13728, 13729, 13730, 15311, 15312, 15313, 15314, 15430, 15452, 18773, 18775, 18777, 18779, 18781, 18783, 18785, 18787, 18789, 18791, 18795, 18797, 18799, 18801, 18805, 18807, 26215, 26216, 26229, 26230, 26236, 26237, 26239, 26241, 26242, 26713, 27084, 27085, 27086, 27087, 29111, 29113, 29114, 29154, 29167, 29170, 29174, 29176, 29177, 29178, 29179, 29186, 29187, 29188, 29191, 29192, 29193, 29195, 29196, 29197, 29202, 29203, 29205, 29206, 29210, 29212, 29213, 29215, 29217, 29221, 29223, 30403, 31982, 32537, 37438, 37456, 37463, 37464, 37465, 37466, 37619, 39882, 40844, 40845, 41029, 41037, 41039, 41041, 41042, 41044, 41045, 41046, 41047, 41048, 41051, 41052, 41053, 41054, 41055, 41056, 41058, 41061, 41062, 41063, 41064, 41070, 41075, 41076, 41077, 41078, 41079, 41085, 41086, 41087, 41088, 41089, 41090, 41091, 41092, 41093, 41094, 41097, 41099, 41101, 41103, 41104, 41105, 41107, 41108, 41109, 41114, 41115, 41116, 41120, 41121, 41122, 41123, 41160, 41161, 41163, 41164, 41168, 41170, 41171, 41173, 41174, 41176, 41177, 41178, 6521,
		// Corrupted Gauntlet
		36000, 36001, 35970, 35971, 35972, 35973, 35974, 35975, 35976, 35968, 35969, 36046, 36047, 36048, 35992, 35994, 35999, 35998, 35967,
		// Gauntlet
		36095, 36103, 36150, 36104, 36151, 36149,
		// MLM ore veins and water
		26664, 26662, 26661, 26663, 10459, 2018,
		// Puro Puro wheat
		25028, 25027, 25023, 25022, 25021, 25019, 25018, 25017, 25016, 25000,
		// Tempoross one-use scenery
		40979, 40976, 40971, 40970, 40969, 40968,
		// ToB floor
		33034, 33033,
		// Camdozaal rubble
		41594,
		// Abyssal Sire blocking tile
		4451,
		// Fire
		26185
	);

	private void addObjectThisTick(SceneryEventType type, WorldPoint baseLocation, int id)
	{
		if (gameState != GameState.LOGGED_IN)
		{
			// Ignore any objects sent when game state is LOADING. This should ignore all spawns that happen
			// while reading the maps index.
			// If for whatever reason this is an ineffective check, don't let it grow unbounded...
			return;
		}

		int rate = 1;
		if (blacklist.contains(id))
		{
			// Still keep blacklisted entries *some* of the time...
			if (Math.random() < 1.0 / BLACKLIST_OVERRIDE_RATE)
			{
				rate = BLACKLIST_OVERRIDE_RATE;
			}
			else
			{
				return;
			}
		}
		LocalPoint local = LocalPoint.fromWorld(client, baseLocation);
		WorldPoint location = WorldPoint.fromLocalInstance(client, local);
		manager.storeEvent(new SceneryEvent(type, location, id, rate));
	}

	@Subscribe
	public void onDecorativeObjectSpawned(DecorativeObjectSpawned event)
	{
		addObjectThisTick(
			SceneryEventType.DECORATIVE_OBJECT_SPAWNED,
			event.getTile().getWorldLocation(),
			event.getDecorativeObject().getId()
		);
	}

	@Subscribe
	public void onWallObjectSpawned(WallObjectSpawned event)
	{
		addObjectThisTick(
			SceneryEventType.WALL_OBJECT_SPAWNED,
			event.getTile().getWorldLocation(),
			event.getWallObject().getId()
		);
	}

	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned event)
	{
		addObjectThisTick(
			SceneryEventType.GAME_OBJECT_SPAWNED,
			event.getTile().getWorldLocation(),
			event.getGameObject().getId()
		);
	}

	@Subscribe
	public void onGroundObjectSpawned(GroundObjectSpawned event)
	{
		addObjectThisTick(
			SceneryEventType.GROUND_OBJECT_SPAWNED,
			event.getTile().getWorldLocation(),
			event.getGroundObject().getId()
		);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		gameState = event.getGameState();
	}
}
package com.Crowdsourcing.scenery;

public enum SceneryEventType
{
	GAME_OBJECT_SPAWNED,
	GAME_OBJECT_DESPAWNED,
	GAME_OBJECT_CHANGED,
	WALL_OBJECT_SPAWNED,
	WALL_OBJECT_DESPAWNED,
	WALL_OBJECT_CHANGED,
	DECORATIVE_OBJECT_SPAWNED,
	DECORATIVE_OBJECT_DESPAWNED,
	DECORATIVE_OBJECT_CHANGED,
	GROUND_OBJECT_SPAWNED,
	GROUND_OBJECT_DESPAWNED,
	GROUND_OBJECT_CHANGED
}

package com.Crowdsourcing.messages;

import com.Crowdsourcing.CrowdsourcingManager;
import java.util.HashMap;
import java.util.regex.Pattern;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.Skill;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.gameval.InventoryID;
import net.runelite.api.gameval.ItemID;
import net.runelite.api.gameval.VarbitID;
import net.runelite.client.eventbus.Subscribe;

@Slf4j
public class CrowdsourcingMessages
{
	@Inject
	private CrowdsourcingManager manager;

	@Inject
	private Client client;

	// Make sure anything here ONLY matches what you want
	private static final String CAIRN_ISLE_SUCCESS = "You manage to keep your balance on the bridge.";
	private static final String CAIRN_ISLE_FAIL = "You fall!";

	// Ardy log shortcut, log NW of sinclair mansion, Karamja east log
	private static final String LOG_SUCCESS = "You make it across the log without any problems.";
	private static final String LOG_FAIL = "You lose your footing and fall into the water.";

	// Rock jumps in lumbridge caves
	private static final String STEPPING_STONE_ATTEMPT = "You leap across with a mighty leap!";
	private static final String STEPPING_STONE_FAIL = "You slip over on the slimy stone.";

	// Lava dragon scales, store herblore level and hard diary completion
	private static final int HARD_WILDERNESS_DIARY_VARBIT = 4509;
	private static final String LAVA_DRAGON_SCALE_GRIND_PREFIX = "You grind the lava dragon scale";

	// Sacred eel -> Zulrah scales, cooking level
	private static final String SACRED_EEL_DISSECTION_PREFIX = "You dissect the eel carcass";

	// Undead twigs, presumably add WC level
	private static final String UNDEAD_TWIGS_SUCCESS = "You cut some undead twigs.";
	private static final String UNDEAD_TWIGS_FAIL = "You almost remove a suitable twig, but you don't quite manage it.";

	// Wire machine, presumably add Thieving level
	private static final String WIRE_MACHINE_SUCCESS = "You grab a piece of wire.";
	private static final String WIRE_MACHINE_FAIL = "You catch your hand in the mechanism.";

	// Vyre distraction
	private static final String VYRE_DISTRACTION_SUCCESS = "You manage to distract the vampyre and sneak away.";
	private static final String VYRE_DISTRACTION_FAIL = "You failed to distract the vampyre.";

	// Zogre coffins (need to do some more checking here, lockpick might complicate things and need to check message uniqueness)
	private static final String ZOGRE_COFFIN_SUCCESS = "You unlock the coffin...";
	private static final String ZOGRE_COFFIN_FAIL = "You fail to pick the lock - your fingers get numb from fumbling with the lock.";
	private static final String ZOGRE_COFFIN_LOCKPICK_SNAPS = "Your lockpick snaps.";

	// Pickable doors (Yanille dungeon and Ross' door for example)
	private static final String PICKLOCK_DOOR_SUCCESS = "You manage to pick the lock.";
	private static final String PICKLOCK_DOOR_FAIL = "You fail to pick the lock.";
	private static final String PICKLOCK_DOOR_TRAP = "You have activated a trap on the lock.";

	// Pickable chests (Aldarin for example)
	private static final String PICKLOCK_CHEST_SUCCESS = "You manage to unlock the chest.";
	private static final String PICKLOCK_CHEST_FAIL = "You fail to picklock the chest.";
	private static final String PICKLOCK_CHEST_TRAP = "You have activated a trap on the chest.";

	// Viyeldi Caves rock mining
	private static final String VIYELDI_ROCK_MINING_SUCCESS = "You manage to smash the rock to bits.";
	private static final String VIYELDI_ROCK_MINING_FAIL = "The pick clangs heavily against the rock face and the vibrations rattle your nerves.";

	// Viyeldi Caves jagged wall
	private static final String VIYELDI_JAGGED_WALL_SUCCESS = "You take a good run up and sail majestically over the wall.";
	private static final String VIYELDI_JAGGED_WALL_FAIL = "You fail to jump the wall properly and clip the wall with your leg.";

	// Stealing entrana candles
	private static final String ENTRANA_CANDLE_SUCCESS = "You steal a candle.";
	private static final String ENTRANA_CANDLE_FAIL = "A higher power smites you.";

	// Underground Pass things
	private static final String UP_ROCKSLIDE_SUCCESS = "You climb over the rocks.";
	private static final String UP_ROCKSLIDE_FAIL = "You slip and hurt yourself.";

	private static final String UP_FIREARROW_SUCCESS = "...the arrow impales the rope support.";
	private static final String UP_FIREARROW_FAIL = "...but the arrow just misses the rope.";

	private static final String UP_ROPESWING_SUCCESS = "...and skillfully swing across.";
	private static final String UP_ROPESWING_FAIL = "...but you fall into the darkness.";

	private static final String UP_MARKINGS_TRAP_SUCCESS = "...and succeed, you quickly walk past.";
	private static final String UP_MARKINGS_TRAP_FAIL = "... and fail, activating the trap!";

	private static final String UP_SLAVE_CAGE_LOCKPICK_SUCCESS = "You successfully pick the lock.";
	private static final String UP_SLAVE_CAGE_LOCKPICK_FAIL = "You attempt to pick the lock but fail to do so.";

	private static final String UP_LEDGE_WALK_SUCCESS = "...you make it across safely.";
	private static final String UP_LEDGE_WALK_FAIL = "...but you fall into the rat pit.";

	private static final String UP_STONE_BRIDGE_SUCCESS = "...and make it.";
	private static final String UP_STONE_BRIDGE_FAIL = "...and fall off it.";

	private static final String UP_BRIDGE_SUCCESS = "...you manage to cross safely.";
	private static final String UP_BRIDGE_FAIL = "...but you tumble into the darkness.";

	private static final String CACTUS_SUCCESS_1 = "You top up your skin with water from the cactus.";
	private static final String CACTUS_SUCCESS_2 = "You fill your skin with water from the cactus.";
	private static final String CACTUS_SUCCESS_3 = "You have no empty waterskins to put the water in.";
	private static final String CACTUS_FAIL = "You fail to cut the cactus correctly and it gives no water this time.";

	// This message gives us number of successes without a fragment
	private static final String VM_BOULDER_SUCCESS = "You chip off a part of the boulder.";
	private static final String VM_BOULDER_REWARDS_PREFIX = "You mine out ";

	// Farming pickpockets
	private static final Pattern MASTER_FARMER_PICKPOCKET = Pattern.compile("You steal 1 " +
		"(cadantine|dwarf weed|guam|harralander|irit|kwuarm|lantadyme|marrentill|ranarr|snapdragon|tarromin|toadflax|torstol) seed.*");

	// Control
	private static final String TUNA_SUCCESS = "You manage to cook a tuna.";
	private static final String TUNA_FAIL = "You accidentally burn the tuna.";

	// Pet fish tiny bluefish, greenfish, spinefish
	private static final String PET_FISH_BLUEFISH = "...and you catch a Tiny Bluefish!";
	private static final String PET_FISH_GREENFISH = "...and you catch a Tiny Greenfish!";
	private static final String PET_FISH_SPINEFISH = "...and you catch a Tiny Spinefish!";

	// Camdozaal preparing fish
	private static final String CAMDOZAAL_PREPARE_GUPPY_SUCCESS = "You successfully prepare the Guppy.";
	private static final String CAMDOZAAL_PREPARE_CAVEFISH_SUCCESS = "You successfully prepare the Cavefish.";
	private static final String CAMDOZAAL_PREPARE_TETRA_SUCCESS = "You successfully prepare the Tetra.";
	private static final String CAMDOZAAL_PREPARE_CATFISH_SUCCESS = "You successfully prepare the Catfish.";
	private static final String CAMDOZAAL_PREPARE_GUPPY_FAIL = "You accidentally ruin the Guppy.";
	private static final String CAMDOZAAL_PREPARE_CAVEFISH_FAIL = "You accidentally ruin the Cavefish.";
	private static final String CAMDOZAAL_PREPARE_TETRA_FAIL = "You accidentally ruin the Tetra.";
	private static final String CAMDOZAAL_PREPARE_CATFISH_FAIL = "You accidentally ruin the Catfish.";
	private static final int CHARM_OF_PREPARATION = VarbitID.CAMDOZAAL_FISH_PREP_BUFF;
	private static final int CHARM_OF_BOOST = VarbitID.CAMDOZAAL_TIMED_MULTI_BUFF;

	// Temple of Marimbo Dungeon entrance via crate during Monkey Madness 1
	private static final String CRATE_4714_CATLIKE_AGILITY_ATTEMPT = "You begin to lower yourself into the hole...";
	private static final String CRATE_4714_CATLIKE_AGILITY_SUCCESS = "... and using your catlike agility land on all fours at the bottom of a large cavern!";

	// Stuffed snake message box cooking messages
	private static final String STUFFED_SNAKE_SUCCESS = "You cook the stuffed snake to perfection.";
	private static final String STUFFED_SNAKE_FAILURE = "You burn the stuffed snake.";

  // Hallowed Sepulchre coffins
  private static final String SEPULCHRE_FAILURE = "You have been poisoned!";
  private static final String SEPULCHRE_FAILURE_ANTIPOISON = "You trigger a trap on the chest which poisons you!";
  private static final String SEPULCHRE_SUCCESS = "You push the coffin lid aside.";

	private HashMap<String, Object> createSkillMap(Skill s)
	{
		HashMap<String, Object> h = new HashMap<>();
		h.put(s.getName(), client.getRealSkillLevel(s));
		h.put("B" + s.getName(), client.getBoostedSkillLevel(s));
		return h;
	}

	public HashMap<String, Object> getMetadataForMessage(String message)
	{
		// For each message, check if we need to add metadata. If so, add it to the hashmap to be returned.

		// Should these just be a bunch of ImmutableSets and checks on contains?
		if (CAIRN_ISLE_SUCCESS.equals(message) || CAIRN_ISLE_FAIL.equals(message))
		{
			return createSkillMap(Skill.AGILITY);
		}

		if (LOG_SUCCESS.equals(message) || LOG_FAIL.equals(message))
		{
			return createSkillMap(Skill.AGILITY);
		}

		if (STEPPING_STONE_ATTEMPT.equals(message) || STEPPING_STONE_FAIL.equals(message))
		{
			return createSkillMap(Skill.AGILITY);
		}

		if (message.startsWith(LAVA_DRAGON_SCALE_GRIND_PREFIX))
		{
			HashMap<String, Object> h = createSkillMap(Skill.HERBLORE);
			h.put("Diarycomplete", client.getVarbitValue(HARD_WILDERNESS_DIARY_VARBIT));
			return h;
		}

		if (message.startsWith(SACRED_EEL_DISSECTION_PREFIX))
		{
			return createSkillMap(Skill.COOKING);
		}

		if (UNDEAD_TWIGS_SUCCESS.equals(message) || UNDEAD_TWIGS_FAIL.equals(message)
			|| CACTUS_SUCCESS_1.equals(message) || CACTUS_SUCCESS_2.equals(message) || CACTUS_SUCCESS_3.equals(message)
			|| CACTUS_FAIL.equals(message))
		{
			return createSkillMap(Skill.WOODCUTTING);
		}

		if (WIRE_MACHINE_SUCCESS.equals(message) || WIRE_MACHINE_FAIL.equals(message))
		{
			return createSkillMap(Skill.THIEVING);
		}

		if (VYRE_DISTRACTION_SUCCESS.equals(message) || VYRE_DISTRACTION_FAIL.equals(message))
		{
			return createSkillMap(Skill.THIEVING);
		}

		if (ZOGRE_COFFIN_SUCCESS.equals(message)
			|| ZOGRE_COFFIN_FAIL.equals(message)
			|| ZOGRE_COFFIN_LOCKPICK_SNAPS.equals(message)
			|| PICKLOCK_DOOR_SUCCESS.equals(message)
			|| PICKLOCK_DOOR_FAIL.equals(message)
			|| PICKLOCK_DOOR_TRAP.equals(message)
			|| PICKLOCK_CHEST_SUCCESS.equals(message)
			|| PICKLOCK_CHEST_FAIL.equals(message)
			|| PICKLOCK_CHEST_TRAP.equals(message))
		{
			boolean hasLockpick = false;
			boolean hasHairClip = false;
			ItemContainer equipContainer = client.getItemContainer(InventoryID.INV);
			if (equipContainer != null)
			{
				final Item[] items = equipContainer.getItems();
				for (Item item : items)
				{
					if (item.getId() == ItemID.LOCKPICK)
						hasLockpick = true;
					else if (item.getId() == ItemID.KR_HAIRCLIP)
						hasHairClip = true;
				}
			}
			HashMap<String, Object> h = createSkillMap(Skill.THIEVING);
			h.put("Lockpick", hasLockpick);
			h.put("Hairclip", hasHairClip);
			return h;
		}

		if (VIYELDI_ROCK_MINING_SUCCESS.equals(message) || VIYELDI_ROCK_MINING_FAIL.equals(message)
			|| VM_BOULDER_SUCCESS.equals(message) || message.startsWith(VM_BOULDER_REWARDS_PREFIX))
		{
			return createSkillMap(Skill.MINING);
		}

		if (VIYELDI_JAGGED_WALL_SUCCESS.equals(message) || VIYELDI_JAGGED_WALL_FAIL.equals(message))
		{
			return createSkillMap(Skill.AGILITY);
		}

		if (ENTRANA_CANDLE_SUCCESS.equals(message) || ENTRANA_CANDLE_FAIL.equals(message))
		{
			return createSkillMap(Skill.THIEVING);
		}

		if (UP_ROCKSLIDE_SUCCESS.equals(message) || UP_ROCKSLIDE_FAIL.equals(message)
			|| UP_ROPESWING_SUCCESS.equals(message) || UP_ROPESWING_FAIL.equals(message)
			|| UP_LEDGE_WALK_SUCCESS.equals(message) || UP_LEDGE_WALK_FAIL.equals(message)
			|| UP_STONE_BRIDGE_SUCCESS.equals(message) || UP_STONE_BRIDGE_FAIL.equals(message)
			|| UP_BRIDGE_SUCCESS.equals(message) || UP_BRIDGE_FAIL.equals(message))
		{
			return createSkillMap(Skill.AGILITY);
		}

		if (UP_FIREARROW_SUCCESS.equals(message) || UP_FIREARROW_FAIL.equals(message))
		{
			return createSkillMap(Skill.RANGED);
		}

		if (UP_SLAVE_CAGE_LOCKPICK_SUCCESS.equals(message) || UP_SLAVE_CAGE_LOCKPICK_FAIL.equals(message)
			|| UP_MARKINGS_TRAP_SUCCESS.equals(message) || UP_MARKINGS_TRAP_FAIL.equals(message))
		{
			return createSkillMap(Skill.THIEVING);
		}

		if (TUNA_SUCCESS.equals(message) || TUNA_FAIL.equals(message))
		{
			return createSkillMap(Skill.COOKING);
		}

		if (MASTER_FARMER_PICKPOCKET.matcher(message).matches())
		{
			return createSkillMap(Skill.FARMING);
		}

		if (PET_FISH_BLUEFISH.equals(message) || PET_FISH_GREENFISH.equals(message) || PET_FISH_SPINEFISH.equals(message))
		{
			return createSkillMap(Skill.FISHING);
		}

		if (CAMDOZAAL_PREPARE_GUPPY_SUCCESS.equals(message)
			|| CAMDOZAAL_PREPARE_CAVEFISH_SUCCESS.equals(message)
			|| CAMDOZAAL_PREPARE_TETRA_SUCCESS.equals(message)
			|| CAMDOZAAL_PREPARE_CATFISH_SUCCESS.equals(message)
			|| CAMDOZAAL_PREPARE_GUPPY_FAIL.equals(message)
			|| CAMDOZAAL_PREPARE_CAVEFISH_FAIL.equals(message)
			|| CAMDOZAAL_PREPARE_TETRA_FAIL.equals(message)
			|| CAMDOZAAL_PREPARE_CATFISH_FAIL.equals(message))
		{
			HashMap<String, Object> h = createSkillMap(Skill.COOKING);
			h.put("CharmOfPreparation", client.getVarbitValue(CHARM_OF_PREPARATION) > 0);
			h.put("CharmOfBoost", client.getVarbitValue(CHARM_OF_BOOST) > 0);
			return h;
		}

		if (CRATE_4714_CATLIKE_AGILITY_ATTEMPT.equals(message)
			|| CRATE_4714_CATLIKE_AGILITY_SUCCESS.equals(message))
		{
			return createSkillMap(Skill.AGILITY);
		}

		if (STUFFED_SNAKE_SUCCESS.equals(message)
			|| STUFFED_SNAKE_FAILURE.equals(message))
		{
			return createSkillMap(Skill.COOKING);
		}

    if (SEPULCHRE_FAILURE.equals(message) || SEPULCHRE_SUCCESS.equals(message) || SEPULCHRE_FAILURE_ANTIPOISON.equals(message))
    {
      boolean hasLockpick = false;
      boolean hasStrangeOldLockpick = false;
      ItemContainer equipContainer = client.getItemContainer(InventoryID.INV);
      if (equipContainer != null)
      {
        final Item[] items = equipContainer.getItems();
        for (Item item : items)
        {
          if (item.getId() == ItemID.LOCKPICK)
            hasLockpick = true;
          if (item.getId() == ItemID.STRANGE_OLD_LOCKPICK || item.getId() == ItemID.STRANGE_OLD_LOCKPICK_FULL)
            hasStrangeOldLockpick = true;
        }
        HashMap<String, Object> h = createSkillMap(Skill.THIEVING);
        h.put("Lockpick", hasLockpick);
        h.put("StrangeLockpick", hasStrangeOldLockpick);
        return h;
      }
    }

		return null;
	}

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage)
	{
		if (chatMessage.getType() != ChatMessageType.GAMEMESSAGE && chatMessage.getType() != ChatMessageType.SPAM && chatMessage.getType() != ChatMessageType.MESBOX)
		{
			return;
		}
		String message = chatMessage.getMessage();
		if (client == null || client.getLocalPlayer() == null)
		{
			return;
		}
		LocalPoint local = LocalPoint.fromWorld(client, client.getLocalPlayer().getWorldLocation());
		if (local == null)
		{
			return;
		}
		WorldPoint location = WorldPoint.fromLocalInstance(client, local);
		boolean isInInstance = client.isInInstancedRegion();
		HashMap<String, Object> metadata = getMetadataForMessage(message);
		MessagesData data = new MessagesData(message, isInInstance, location, metadata);
		// log.debug("" + data);
		manager.storeEvent(data);
	}
}

package com.Crowdsourcing.messages;

import java.util.HashMap;
import lombok.AllArgsConstructor;
import lombok.Data;
import net.runelite.api.coords.WorldPoint;

@Data
@AllArgsConstructor
public class MessagesData
{
	private String message;
	private boolean isInInstance;
	private WorldPoint location;
	private HashMap<String, Object> metadata;
}

/*
 * Copyright (c) 2018, Weird Gloop <admin@weirdgloop.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.Crowdsourcing;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

import com.google.gson.Gson;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

@Slf4j
@Singleton
public class CrowdsourcingManager
{

	private static final String CROWDSOURCING_BASE = "https://crowdsource.runescape.wiki/runelite";
	private static final MediaType JSON = MediaType.parse("application/json; charset=utf-8");
	private static final int MAX_LENGTH = 10000;

	@Inject
	private OkHttpClient okHttpClient;

	@Inject
	private Gson gson;

	@Inject
	private ChatMessageManager chatMessageManager;

	private List<Object> data = new ArrayList<>();

	public int size()
	{
		return data.size();
	}

	public void storeEvent(Object event)
	{
		if (this.size() > MAX_LENGTH)
		{
			return;
		}

		synchronized (this)
		{
			data.add(event);
		}
	}

	protected void submitToAPI()
	{
		List<Object> temp;
		synchronized (this)
		{
			if (data.isEmpty())
			{
				return;
			}
			temp = data;
			data = new ArrayList<>();
		}

		Request r = new Request.Builder()
			.url(CROWDSOURCING_BASE)
			.post(RequestBody.create(JSON, gson.toJson(temp)))
			.build();

		okHttpClient.newCall(r).enqueue(new Callback()
		{
			@Override
			public void onFailure(Call call, IOException e)
			{
				log.debug("Error sending crowdsourcing data", e);
			}

			@Override
			public void onResponse(Call call, Response response)
			{
				log.debug("Successfully sent crowdsourcing data");
				response.close();
			}
		});
	}

	public void sendMessage(String message)
	{
		final ChatMessageBuilder chatMessage = new ChatMessageBuilder()
				.append(ChatColorType.HIGHLIGHT)
				.append(message)
				.append(ChatColorType.NORMAL);

		chatMessageManager.queue(QueuedMessage.builder()
				.type(ChatMessageType.ITEM_EXAMINE)
				.runeLiteFormattedMessage(chatMessage.build())
				.build());
	}
}

package com.Crowdsourcing.clues;


import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ItemComposition;

import static net.runelite.api.MenuAction.CC_OP;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.gameval.ItemID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import com.Crowdsourcing.CrowdsourcingManager;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

@Slf4j
public class CrowdsourcingClues {
    @Inject
    private Client client;

    @Inject
    private CrowdsourcingManager manager;

    @Inject
    private ItemManager itemManager;

    private HashSet<Integer> seenClues = new HashSet<>();
    private Widget mapClueWidgetParent;
    private Integer clueId = -1;
    private String clueText;
    private List<MapClueWidgetPart> parts;

    @Subscribe
    private void onMenuOptionClicked(MenuOptionClicked event) {
		if ("Read".equals(event.getMenuOption()) && event.getMenuAction() == CC_OP && event.getMenuEntry().getItemId() != -1) {
            final ItemComposition itemComposition = itemManager.getItemComposition(event.getMenuEntry().getItemId());
            if (itemComposition.getName().startsWith("Clue scroll") || itemComposition.getName().startsWith("Challenge scroll")) {
                if (!seenClues.contains(itemComposition.getId())) {
                    clueId = itemComposition.getId();
                    if (clueId != ItemID.TRAIL_CLUE_MASTER && clueId != ItemID.TRAIL_CLUE_BEGINNER) {
                        seenClues.add(clueId);
                    }
                }
            }
        }
    }

    @Subscribe
    public void onWidgetLoaded(WidgetLoaded event) {
        int groupId = event.getGroupId();
        for (int childId = 0; childId < 100; childId++) {
            final Widget w = client.getWidget(groupId, childId);
            if (w == null) {
                break;
            }
            // These are the corners of the map clue. We couldn't figure out
            // a better way to do this.
            if (w.getModelId() == 3388) {
                mapClueWidgetParent = w.getParent();
            }
        }
    }
    @Subscribe
    public void onGameTick(GameTick event) {
       if (clueId == -1) {
           return;
       }
       final Widget clueTextWidget = client.getWidget(InterfaceID.TrailCluetext.TEXT);
       if (clueTextWidget != null) {
           String candidateClueText = clueTextWidget.getText();
           if (clueId == ItemID.TRAIL_CLUE_MASTER && candidateClueText.equals(clueText)) {
               clueId = -1;
               return;
           }
           clueText = candidateClueText;
           submitClue();
           return;
       }

        if (mapClueWidgetParent != null) {
            parts = new ArrayList<>();
            for (Widget child : mapClueWidgetParent.getNestedChildren()) {
                parts.add(new MapClueWidgetPart(
                        child.getRelativeX(),
                        child.getRelativeY(),
                        child.getRotationX(),
                        child.getRotationY(),
                        child.getRotationZ(),
                        child.getModelId(),
                        child.getModelZoom()
                ));
            }
            clueText = "";
            submitClue();
        }
    }

    private void submitClue() {
        manager.storeEvent(new ClueData(clueId, clueText, parts));
        log.info("{}, {}, {}", clueId, clueText, parts);
        clueId = -1;
        parts = null;
        mapClueWidgetParent = null;

    }
}
package com.Crowdsourcing.clues;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class MapClueWidgetPart
{
    private int x;
    private int y;
    private int rotationX;
    private int rotationY;
    private int rotationZ;
    private int modelId;
    private int modelZoom;
}
package com.Crowdsourcing.clues;

import lombok.AllArgsConstructor;
import lombok.Data;

import java.util.List;

@Data
@AllArgsConstructor
public class ClueData
{
    private int clueId;
    private String text;
    private List<MapClueWidgetPart> parts;
}
/*
 * Copyright (c) 2021, Weird Gloop <admin@weirdgloop.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.Crowdsourcing.playerkit;

import com.Crowdsourcing.CrowdsourcingManager;
import java.util.Arrays;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.gameval.InventoryID;
import net.runelite.client.eventbus.Subscribe;

@Slf4j
public class CrowdsourcingPlayerkit
{

	@Inject
	private CrowdsourcingManager manager;

	@Inject
	private Client client;

	private GameState gameState;

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged itemContainerChanged)
	{
		if (itemContainerChanged.getItemContainer() != client.getItemContainer(InventoryID.WORN))
		{
			return;
		}

		try
		{
			int[] playerkit = client.getLocalPlayer().getPlayerComposition().getEquipmentIds();
			int poseAnim = client.getLocalPlayer().getIdlePoseAnimation();
			PlayerkitData playerkitData = new PlayerkitData(playerkit, poseAnim);
			manager.storeEvent(playerkitData);
			log.debug("playerkit: " + Arrays.toString(playerkit));
			log.debug("idle_pose_anim: " + poseAnim);
		}
		catch (NullPointerException e)
		{
			log.warn(e.toString());
		}

	}
}

/*
 * Copyright (c) 2021, Weird Gloop <admin@weirdgloop.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.Crowdsourcing.playerkit;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class PlayerkitData
{
	private int[] playerkit;
	private int poseAnim;
}

/*
 * Copyright (c) 2019, Weird Gloop <admin@weirdgloop.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.Crowdsourcing.pottery;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class PotteryData
{
	private final String message;
	private final int craftingLevel;
}

/*
 * Copyright (c) 2019, Weird Gloop <admin@weirdgloop.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.Crowdsourcing.pottery;

import com.Crowdsourcing.CrowdsourcingManager;
import javax.inject.Inject;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.eventbus.Subscribe;

public class CrowdsourcingPottery
{
	private static final String FIRING_SUCCESS_PREFIX = "You remove the ";
	private static final String FIRING_SUCCESS_SUFFIX = " from the oven.";
	private static final String FIRING_FAILURE_PREFIX = "The ";
	private static final String FIRING_FAILURE_SUFFIX = " cracks in the oven.";

	@Inject
	private CrowdsourcingManager manager;

	@Inject
	private Client client;

	@Subscribe
	public void onChatMessage(final ChatMessage event)
	{
		if (!ChatMessageType.SPAM.equals(event.getType()))
		{
			return;
		}

		final String message = event.getMessage();

		if ((message.startsWith(FIRING_SUCCESS_PREFIX) && message.endsWith(FIRING_SUCCESS_SUFFIX)) ||
			(message.startsWith(FIRING_FAILURE_PREFIX) && message.endsWith(FIRING_FAILURE_SUFFIX)))
		{
			final int craftingLevel = client.getBoostedSkillLevel(Skill.CRAFTING);
			PotteryData data = new PotteryData(message, craftingLevel);
			manager.storeEvent(data);
		}
	}
}

package com.Crowdsourcing.impling;

import com.Crowdsourcing.CrowdsourcingManager;
import javax.inject.Inject;

import com.google.common.collect.ImmutableSet;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.NPC;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.api.gameval.NpcID;
import net.runelite.client.eventbus.Subscribe;

import java.util.Set;

public class CrowdsourcingImpling {

    private static final int MAX_ACTOR_VIEW_RANGE = 15;
    private WorldPoint lastPlayerLocation;

	private static final Set<Integer> INVISIBLE_IDS = ImmutableSet.of(
		NpcID.II_RARE_IMPLING_PRECURSOR,
		NpcID.II_RARE_IMPLING_PRECURSOR_MAZE,
		NpcID.II_UNCOMMON_IMPLING_PRECURSOR,
		NpcID.II_COMMON_IMPLING_PRECURSOR,
		NpcID.II_IMPLING_TYPE_12_PRECURSOR,
		NpcID.II_MAZE_BLOCKING_TIMER,
		NpcID.II_MAZE_GATE_TIMER,
		NpcID.II_IMPLING_ADDER,
		NpcID.II_CROP_CIRCLE_NPC);

    @Inject
    private Client client;

    @Inject
    public CrowdsourcingManager manager;

    private static boolean isInViewRange(WorldPoint wp1, WorldPoint wp2)
    {
        int distance = wp1.distanceTo(wp2);
        return distance < MAX_ACTOR_VIEW_RANGE;
    }

    @Subscribe
    public void onGameTick(GameTick event)
    {
        lastPlayerLocation = client.getLocalPlayer().getWorldLocation();
    }

    @Subscribe
    public void onNpcSpawned(NpcSpawned npcSpawned)
    {
        final NPC npc = npcSpawned.getNpc();
        int id = npc.getComposition().getId();
        if (!INVISIBLE_IDS.contains(id)) {
            return;
        }

        WorldPoint npcLocation = npc.getWorldLocation();
        if (lastPlayerLocation != null && isInViewRange(lastPlayerLocation, npcLocation)) {
            ImplingData data = new ImplingData(id, -1, npcLocation);
            manager.storeEvent(data);
        }
    }

    @Subscribe
    public void onNpcChanged(NpcChanged npcChanged)
    {
        final NPC npc = npcChanged.getNpc();
        final int id = npc.getComposition().getId();
        final int oldId = npcChanged.getOld().getId();
        if (!INVISIBLE_IDS.contains(id) && !INVISIBLE_IDS.contains(oldId)) {
            return;
        }

        WorldPoint npcLocation = npc.getWorldLocation();
        ImplingData data = new ImplingData(id, oldId, npcLocation);
        manager.storeEvent(data);
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged event)
    {
        if (event.getGameState() == GameState.LOGIN_SCREEN ||
                event.getGameState() == GameState.HOPPING)
        {
            lastPlayerLocation = null;
        }
    }
}

package com.Crowdsourcing.impling;

import lombok.AllArgsConstructor;
import lombok.Data;
import net.runelite.api.coords.WorldPoint;

@Data
@AllArgsConstructor
public class ImplingData
{
    private int npcId;
    private int oldNpcId;
    private WorldPoint location;
}

package com.Crowdsourcing.experience;

import com.Crowdsourcing.CrowdsourcingManager;
import static com.google.common.base.MoreObjects.firstNonNull;
import java.util.HashMap;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.MenuAction;
import net.runelite.api.Skill;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.events.StatChanged;
import net.runelite.client.config.RuneScapeProfileType;
import net.runelite.client.eventbus.Subscribe;

@Slf4j
public class CrowdsourcingExperience
{

	@Inject
	Client client;

	@Inject
	CrowdsourcingManager manager;

	private long lastAccountHash;
	private RuneScapeProfileType lastWorldType;
	private boolean initializeExperience;

	private MenuAction menuAction;
	private int id;
	private String menuOption;
	private String menuTarget;
	private int param0;
	private int param1;


	private HashMap<String, Integer> skillExperience = new HashMap<>();

	public void startUp()
	{
		// Need this so when we start up the plugin after login we grab the current xp
		initializeExperience = true;
	}

	@Subscribe
	private void onStatChanged(StatChanged event)
	{
		// Ignore overall xp
		if (event.getSkill() == Skill.OVERALL)
			return;

		int lastExperience = skillExperience.get(event.getSkill().getName());
		skillExperience.put(event.getSkill().getName(), event.getXp());

		// Do not send initializing values since this is after world hop/login/turning on the plugin
		if (initializeExperience)
			return;

		if (client == null || client.getLocalPlayer() == null)
			return;

		int experienceDiff = event.getXp() - lastExperience;

		// Ignore things that are not experience changes
		if (experienceDiff == 0)
			return;

		log.trace("Stat change " + event.getSkill().getName() + " " + (event.getXp() - lastExperience));
		int currentLevel = client.getRealSkillLevel(event.getSkill());
		LocalPoint local = LocalPoint.fromWorld(client, client.getLocalPlayer().getWorldLocation());
		if (local == null)
		{
			return;
		}
		WorldPoint location = WorldPoint.fromLocalInstance(client, local);
		boolean isInInstance = client.isInInstancedRegion();

		// Check map and if val is different, roll to store
		ExperienceData data = new ExperienceData(event.getSkill(), experienceDiff, currentLevel, location, isInInstance,
			menuAction, id, menuOption,
			menuTarget, param0, param1);
		manager.storeEvent(data);
	}

	private void resetState()
	{
		// Set all of the skills to either the current experience (if logged in) or 0 (if not)
		log.debug("Resetting state");
		skillExperience.clear();
		for (Skill s : Skill.values())
		{
			if (s == Skill.OVERALL)
				continue;
			if (client != null)
			{
				log.debug("Putting skill exp " + s.getName() + " " + client.getSkillExperience(s));
				skillExperience.put(s.getName(), client.getSkillExperience(s));
			}
			else
				skillExperience.put(s.getName(), 0);
		}
	}


	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		// Mostly taken from the ExpTrackerPlugin file. This checks to see if we need to reset the experience map due to
		// world type change or log out -> login with a new account.
		GameState state = event.getGameState();
		if (state == GameState.LOGGED_IN)
		{
			// LOGGED_IN is triggered between region changes too.
			// Check that the username changed or the world type changed.
			RuneScapeProfileType type = RuneScapeProfileType.getCurrent(client);

			if (client.getAccountHash() != lastAccountHash || lastWorldType != type)
			{
				// Reset
				log.debug("World change: {} -> {}, {} -> {}",
					lastAccountHash, client.getAccountHash(),
					firstNonNull(lastWorldType, "<unknown>"),
					firstNonNull(type, "<unknown>"));

				lastAccountHash = client.getAccountHash();
				lastWorldType = type;
				resetState();
				// Must be set from hitting the LOGGING_IN or HOPPING case below
				assert initializeExperience;
			}
		}
		else if (state == GameState.LOGGING_IN || state == GameState.HOPPING)
		{
			initializeExperience = true;
		}
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		// Initialize (or re-initialize) experience if needed. This needs to be in game tick so we can check after login
		if (initializeExperience)
		{
			initializeExperience = false;
			resetState();
		}
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked menuOptionClicked)
	{
		if (menuOptionClicked.getMenuAction() != MenuAction.WALK
			&& !menuOptionClicked.getMenuOption().equals("Message"))
		{
			menuAction = menuOptionClicked.getMenuAction();
			menuOption = menuOptionClicked.getMenuOption();
			id = menuOptionClicked.getId();
			param0 = menuOptionClicked.getParam0();
			param1 = menuOptionClicked.getParam1();
			menuTarget = menuOptionClicked.getMenuTarget();

		}
	}
}

package com.Crowdsourcing.experience;

import lombok.AllArgsConstructor;
import lombok.Data;
import net.runelite.api.MenuAction;
import net.runelite.api.Skill;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.MenuOptionClicked;

@Data
@AllArgsConstructor
public class ExperienceData
{
	private Skill expSkill;
	private int expAmount;
	private int expCurrentLevel;
	private WorldPoint expPoint;
	private boolean expIsInInstance;
	private MenuAction expMenuAction;
	private int expMenuIdentifier;
	private String expMenuOption;
	private String expMenuTarget;
	private int expParam0;
	private int expParam1;
}

package com.Crowdsourcing;

import com.Crowdsourcing.animation.CrowdsourcingAnimation;
import com.Crowdsourcing.clues.CrowdsourcingClues;
import com.Crowdsourcing.dialogue.CrowdsourcingDialogue;
import com.Crowdsourcing.experience.CrowdsourcingExperience;
import com.Crowdsourcing.inventory.CrowdsourcingInventory;
import com.Crowdsourcing.item_sighting.CrowdsourcingItemSighting;
import com.Crowdsourcing.messages.CrowdsourcingMessages;
import com.Crowdsourcing.mlm.CrowdsourcingMLM;
import com.Crowdsourcing.monster_examine.MonsterExamine;
import com.Crowdsourcing.npc_sighting.CrowdsourcingNpcSighting;
import com.Crowdsourcing.npc_respawn.CrowdsourcingNpcRespawn;
import com.Crowdsourcing.overhead_dialogue.CrowdsourcingOverheadDialogue;
import com.Crowdsourcing.playerkit.CrowdsourcingPlayerkit;
import com.Crowdsourcing.pottery.CrowdsourcingPottery;
import com.Crowdsourcing.pyramid_plunder.CrowdsourcingPyramidPlunder;
import com.Crowdsourcing.quest_log.CrowdsourcingQuestLog;
import com.Crowdsourcing.respawns.Respawns;
import com.Crowdsourcing.scenery.CrowdsourcingScenery;
import com.Crowdsourcing.shootingstars.CrowdsourcingStars;
import com.Crowdsourcing.toa.CrowdsourcingTombs;
import com.Crowdsourcing.varbits.CrowdsourcingVarbits;
import com.Crowdsourcing.impling.CrowdsourcingImpling;
import javax.inject.Inject;
import java.time.temporal.ChronoUnit;

import lombok.extern.slf4j.Slf4j;

import net.runelite.api.events.CommandExecuted;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.task.Schedule;

@Slf4j
@PluginDescriptor(
	name = "OSRS Wiki Crowdsourcing (advanced)",
	description = "Help figure out varbits, quest states, and more. See osrs.wiki/RS:CROWD"
)
public class AdvancedCrowdsourcingPlugin extends Plugin
{
	// Number of seconds to wait between trying to send data to the wiki.
	// NOTE: I wanted to make this a config entry but annotation parameters
	// need to be compile time constants.
	private static final int SECONDS_BETWEEN_UPLOADS = 300;

	@Inject
	private EventBus eventBus;

	@Inject
	CrowdsourcingManager manager;

	@Inject
	private CrowdsourcingDialogue dialogue;

	@Inject
	private CrowdsourcingVarbits varbits;

	@Inject
	private CrowdsourcingMLM mlm;

	@Inject
	private CrowdsourcingScenery scenery;

	@Inject
	private CrowdsourcingMessages messages;

	@Inject
	private CrowdsourcingPlayerkit playerkit;

	@Inject
	private CrowdsourcingNpcSighting npcSighting;

	@Inject
	private CrowdsourcingItemSighting itemSighting;

	@Inject
	private CrowdsourcingInventory inventory;

	@Inject
	private CrowdsourcingClues clues;

	@Inject
	private CrowdsourcingAnimation animation;

	@Inject
	private CrowdsourcingNpcRespawn npcRespawn;

	@Inject
	private Respawns respawns;

	@Inject
	private MonsterExamine monsterExamine;

	@Inject
	private CrowdsourcingQuestLog questLog;

	@Inject
	private CrowdsourcingOverheadDialogue overheadDialogue;

	@Inject
	private CrowdsourcingPottery pottery;

	@Inject
	private CrowdsourcingExperience experience;

	@Inject
	private CrowdsourcingImpling impling;

  	@Inject
	private CrowdsourcingPyramidPlunder pyramidPlunder;

	@Inject
	private CrowdsourcingTombs toa;

	@Inject
	private CrowdsourcingStars stars;

	@Override
	protected void startUp() throws Exception
	{
		eventBus.register(dialogue);
		eventBus.register(varbits);
		eventBus.register(mlm);
		eventBus.register(scenery);
		eventBus.register(messages);
		eventBus.register(playerkit);
		eventBus.register(npcSighting);
		eventBus.register(itemSighting);
		eventBus.register(inventory);
		eventBus.register(clues);
		eventBus.register(animation);
		eventBus.register(npcRespawn);
		eventBus.register(questLog);
		eventBus.register(overheadDialogue);
		eventBus.register(pottery);
		eventBus.register(experience);
		eventBus.register(pyramidPlunder);
		eventBus.register(toa);
		eventBus.register(impling);
		eventBus.register(stars);

		varbits.startUp();
		experience.startUp();
		pyramidPlunder.startUp();
		stars.reset();
	}

	@Override
	protected void shutDown() throws Exception
	{
		eventBus.unregister(dialogue);
		eventBus.unregister(varbits);
		eventBus.unregister(mlm);
		eventBus.unregister(scenery);
		eventBus.unregister(messages);
		eventBus.unregister(playerkit);
		eventBus.unregister(npcSighting);
		eventBus.unregister(itemSighting);
		eventBus.unregister(inventory);
		eventBus.unregister(clues);
		eventBus.unregister(animation);
		eventBus.unregister(npcRespawn);
		eventBus.unregister(questLog);
		eventBus.unregister(overheadDialogue);
		eventBus.unregister(pottery);
		eventBus.unregister(experience);
		eventBus.unregister(pyramidPlunder);
		eventBus.unregister(toa);
		eventBus.unregister(impling);
		eventBus.unregister(stars);

		varbits.shutDown();
		stars.reset();
	}

	@Schedule(
		period = SECONDS_BETWEEN_UPLOADS,
		unit = ChronoUnit.SECONDS,
		asynchronous = true
	)
	public void submitToAPI()
	{
		manager.submitToAPI();
	}

	@Subscribe
	public void onCommandExecuted(CommandExecuted commandExecuted)
	{
		String cmd = commandExecuted.getCommand();
		switch (cmd) {
			case "respawnon":
				eventBus.register(respawns);
				manager.sendMessage("Turned on respawns logger.");
				npcRespawn.setLogging(true);
				break;
			case "respawnoff":
				eventBus.unregister(respawns);
				manager.sendMessage("Turned off respawns logger.");
				npcRespawn.setLogging(false);
				break;
			case "monsteron":
				eventBus.register(monsterExamine);
				monsterExamine.startUp();
				manager.sendMessage("Turned on monster examine logger.");
				break;
			case "monsteroff":
				eventBus.unregister(monsterExamine);
				monsterExamine.shutDown();
				manager.sendMessage("Turned off monster examine logger.");
				break;
		}
	}
}

package com.Crowdsourcing.animation;

import com.Crowdsourcing.CrowdsourcingManager;
import java.util.HashSet;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.NPCComposition;
import net.runelite.api.Player;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.AnimationChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.eventbus.Subscribe;

@Slf4j
public class CrowdsourcingAnimation
{
	@Inject
	public CrowdsourcingManager manager;

	@Inject
	public Client client;

	@Inject
	public ClientThread clientThread;

	// Cache seen anims so we avoid sending them more than once
	private static HashSet<Integer> seenPlayerAnims = new HashSet<>();
	private static HashSet<Integer> seenNpcAnims = new HashSet<>();


	@Subscribe
	private void onAnimationChanged(AnimationChanged event)
	{
		if (event.getActor() instanceof Player)
		{
			Player p = (Player) event.getActor();
			if (seenPlayerAnims.contains(p.getAnimation()))
			{
				return;
			}
			seenPlayerAnims.add(p.getAnimation());
			clientThread.invokeLater(() ->
			{
				// Grab the player's location
				LocalPoint local = LocalPoint.fromWorld(client, p.getWorldLocation());
				if (local == null)
				{
					return;
				}
				WorldPoint location = WorldPoint.fromLocalInstance(client, local);
				boolean isInInstance = client.isInInstancedRegion();

				// Create and send the animation data
				AnimationData data = new AnimationData(p.getAnimation(), -1, true, isInInstance, location);
				log.trace("Player anim id: {} stored", p.getAnimation());
				manager.storeEvent(data);
			});
		}
		else if (event.getActor() instanceof NPC)
		{
			NPC seenNpc = (NPC) event.getActor();
			NPCComposition seenNpcComposition = seenNpc.getTransformedComposition();
			if (seenNpcComposition == null || seenNpcComposition.getId() == -1 || seenNpc.getAnimation() == -1)
			{
				return;
			}

			// Calculate a key for the blacklist
			int key = (seenNpcComposition.getId() << 16) + seenNpc.getAnimation();
			if (seenNpcAnims.contains(key))
			{
				return;
			}
			seenNpcAnims.add(key);
			clientThread.invokeLater(() ->
			{
				// Grab the NPC's location
				LocalPoint local = LocalPoint.fromWorld(client, seenNpc.getWorldLocation());
				if (local == null)
				{
					return;
				}
				WorldPoint location = WorldPoint.fromLocalInstance(client, local);
				boolean isInInstance = client.isInInstancedRegion();

				// Create and send the animation data
				AnimationData data = new AnimationData(seenNpc.getAnimation(), seenNpcComposition.getId(), false, isInInstance, location);
				log.trace("NPC id {}: anim id {} stored", seenNpcComposition.getId(), seenNpc.getAnimation());
				manager.storeEvent(data);
			});
		}

	}
}

package com.Crowdsourcing.animation;

import lombok.AllArgsConstructor;
import lombok.Data;
import net.runelite.api.coords.WorldPoint;

@Data
@AllArgsConstructor
public class AnimationData
{
	private int animationId;
	private int npcId;
	private boolean isPlayer;
	private boolean isInInstance;
	private WorldPoint location;
}

package com.Crowdsourcing;

import com.Crowdsourcing.AdvancedCrowdsourcingPlugin;
import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AdvancedCrowdsourcingPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AdvancedCrowdsourcingPlugin.class);
		RuneLite.main(args);
	}
}
