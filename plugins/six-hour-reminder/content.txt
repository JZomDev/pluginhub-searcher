package com.SixHourReminder;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SixHourReminderTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(SixHourReminderPlugin.class);
		RuneLite.main(args);
	}
}

package com.SixHourReminder;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;
import net.runelite.client.config.Units;

@ConfigGroup("sixhourreminder")
public interface SixHourReminderConfig extends Config {
    @ConfigItem(
            keyName = "sixHourReminderTime",
            name = "Time until 6h",
            description = "Amount of time needed until 6h logout for the infobox to appear",
            position = 0
    )
    @Units(Units.MINUTES)
    @Range(min = 1, max = 60)
    default int sixHourReminderTime()
    {
        return 30;
    }

    @ConfigItem(
            keyName = "enablePreview",
            name = "Enable Preview",
            description = "Shows a preview of the overlay",
            position = 1
    )
    default boolean previewMode()
    {
        return false;
    }
}

package com.SixHourReminder;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.time.Instant;

@Slf4j
@PluginDescriptor(
		name = "Six Hour Reminder",
		description = "Reminds you when you're about to be 6hr logged.",
		tags = {"richardant", "6h", "logout", "six", "reminder", "log", "hour"}
)
public class SixHourReminderPlugin extends Plugin {

    @Inject
    private SixHourReminderConfig config;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private Client client;

    @Inject
    private SixHourReminderPanel sixHourReminderPanel;

    private Instant loginTime;

    private boolean ready;

    private Instant sixhourTime;

    private Instant sixhourTimePreview;

    private boolean sixhourReady;

    public Instant getSixhourTime() {
        return this.sixhourTime;
    }

    public Instant getSixhourTimePreview() {
        return this.sixhourTimePreview;
    }
  
    @Provides
    SixHourReminderConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(SixHourReminderConfig.class);
    }

    public void shutDown() {
        this.loginTime = null;
        this.sixhourTime = null;
        this.overlayManager.remove(this.sixHourReminderPanel);
    }

    public void startUp() {
        this.overlayManager.add(this.sixHourReminderPanel);
    }

    @Subscribe
    private void onConfigChanged(ConfigChanged e) {
        if (e.getGroup().equals("sixhourreminder"))
            if (e.getKey().equals("enablePreview") || e.getKey().equals("sixHourReminderTime"))
                this.sixhourTimePreview = Instant.now();
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged event) {
        GameState state = event.getGameState();
        switch (state) {
            case LOGIN_SCREEN:
            case LOGIN_SCREEN_AUTHENTICATOR:
            case LOGGING_IN:
                this.ready = true;
                this.loginTime = null;
                this.sixhourReady = true;
                this.sixhourTime = null;
                break;
            case LOGGED_IN:
                if (this.ready) {
                    this.loginTime = Instant.now();
                    this.sixhourTimePreview = Instant.now();
                    this.ready = false;
                }
                if (this.sixhourReady) {
                    this.sixhourTime = Instant.now();
                    this.sixhourTimePreview = Instant.now();
                    this.sixhourReady = false;
                }
                break;
            case HOPPING:
                this.sixhourReady = true;
                break;
        }
    }
}

package com.SixHourReminder;

import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.time.Duration;
import java.time.Instant;
import java.util.concurrent.TimeUnit;

public class SixHourReminderPanel extends OverlayPanel {
    private final SixHourReminderPlugin plugin;

    private final SixHourReminderConfig config;

    @Inject
    private SixHourReminderPanel(SixHourReminderPlugin plugin, SixHourReminderConfig config) {
        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
        this.plugin = plugin;
        this.config = config;
    }

    public Dimension render(Graphics2D graphics) {
        if (this.plugin.getSixhourTime() != null) {
            int time = (int)Math.floor(Duration.between(this.plugin.getSixhourTime(), Instant.now()).getSeconds());
            int minutes = time / 60;
            if (360 - minutes <= this.config.sixHourReminderTime()) {
                this.panelComponent.getChildren().clear();
                String seconds = formatTime(21600 - time);
                String overtime = formatTime(time - 21600);
                LineComponent lineComponent;
                if(21600 > time) {
                    lineComponent = LineComponent.builder().left("6H LOGOUT").leftColor(Color.red).right(seconds).build();
                }
                else
                {
                    lineComponent = LineComponent.builder().left("OVERTIME").leftColor(Color.red).right(overtime).build();
                }
                this.panelComponent.getChildren().add(lineComponent);
                return super.render(graphics);
            }
            else if (config.previewMode()) {
                int previewtime = (360 - config.sixHourReminderTime()) * 60;
                int timep = (int)Math.floor(Duration.between(this.plugin.getSixhourTimePreview(), Instant.now()).getSeconds()) + previewtime;
                this.panelComponent.getChildren().clear();
                String seconds = formatTime(21600 - timep);
                String overtime = formatTime(timep - 21600);
                LineComponent lineComponent;
                if(21600 > timep) {
                    lineComponent = LineComponent.builder().left("6H LOGOUT").leftColor(Color.red).right(seconds).build();
                }
                else
                {
                    lineComponent = LineComponent.builder().left("OVERTIME").leftColor(Color.red).right(overtime).build();
                }
                this.panelComponent.getChildren().add(lineComponent);
                return super.render(graphics);
            }
        }
        return null;
    }

    private String formatTime(int millis) {
        return String.format("%d:%02d", TimeUnit.SECONDS.toMinutes(millis) % TimeUnit.HOURS.toMinutes(1L),
                TimeUnit.SECONDS.toSeconds(millis) % TimeUnit.MINUTES.toSeconds(1L));
    }
}

