package com.rlweather;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class RlweatherPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(RlweatherPlugin.class);
		RuneLite.main(args);
	}
}
package com.rlweather;

import lombok.extern.slf4j.Slf4j;

import java.io.*;
import java.net.URL;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Objects;
import java.util.Random;
import javax.sound.sampled.*;

@Slf4j
public class Sound {

    private final HashMap<String, Clip> clips = new HashMap<String, Clip>();

    public void rain(String key, int volume) {
        Clip clip = play(key,"/normalized/177479__unfa__slowly-raining-loop-3.wav", true, volume);
        subscribe(key, clip);
    }

    public void thunder(String key, int volume) {
        String[] thunderSounds = {
                "/normalized/195344__morninggloryproductions__thunder-2.wav",
                "/normalized/352574__dobroide__20160816-thunder-03-2.wav",
                "/normalized/505113__fission9__thunder-close-2.wav"
        };

        int r = new Random().nextInt(thunderSounds.length);

        Clip clip = play(key, thunderSounds[r], false, volume);
        subscribe(key, clip);
    }
    
    public void snow(String key, int volume) {
        Clip clip = play(key,"/normalized/201208__rivv3t__raw-wind_edited.wav", true, volume);
        subscribe(key, clip);
    }

    private void subscribe(String key, Clip clip) {
        clips.put(key, clip);
    }

    public Clip play(String key, String soundFilePath, boolean loop, int volume) {
        Clip clip = null; // yuck!

        try {
            AudioInputStream stream = AudioSystem.getAudioInputStream(getClass().getResource(soundFilePath));
            clip = AudioSystem.getClip();

            // callback once sound is completed
            // removes clip from clips map
            clip.addLineListener(e -> {
                if (e.getType() == LineEvent.Type.STOP) {
                    clips.remove(key);
                }
            });
            clip.open(stream);
            try {
                FloatControl gainControl = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);
                if (volume == 100) {
                    volume = 99;
                }
                float vol = (float) (10 * Math.log10((float) volume / 100));
                //System.out.println("Setting rl-weather volume to " + vol + " dB");
                gainControl.setValue(vol);
            } catch (IllegalArgumentException e) {
                log.error("It seems like gain control may not be supported on your system: ", e);
            }
            clip.start();

            if(loop) {
                clip.loop(Clip.LOOP_CONTINUOUSLY);
            }

            return clip;
        }
        catch (Exception e) {
            log.warn("Failed to play sound: " + soundFilePath, e);
        }

        return clip;
    }

    public boolean isPlaying(String key) {
        return clips.containsKey(key);
    }

    public void stop(String key) {
        Clip clip = clips.get(key);
        try {
            clip.stop();
        } catch (Exception e) {
            // bzzt, likely no clip by that key
        }
    }

    public void stopAll() {
        for (String key : clips.keySet()) {
            stop(key);
        }
    }
}

package com.rlweather;

import net.runelite.client.config.*;

import java.awt.Color;

@ConfigGroup("Weather")
public interface RlweatherConfig extends Config
{

	@ConfigSection(name = "Sound Effects", description = "Sound effects", position = 1, closedByDefault = false)
	String SoundEffectsSettings = "SoundEffectsSettings";

	// SOUND EFFECTS
	@ConfigItem(
			position = 1,
			keyName = "soundsenabled",
			name = "Weather Sounds Enabled (beta)",
			description = "Make the noises?",
			section = SoundEffectsSettings
	)
	default boolean soundsEnabled()
	{
		return false;
	}
	
	@Range(
		min = 0,
		max = 100
	)
	@ConfigItem(
			position = 2,
			keyName = "soundvolume",
			name = "Sound Volume",
			description = "Set volume level for sounds",
			section = SoundEffectsSettings
	)
	default int soundVolume()
	{
		return 25;
	}

	@ConfigSection(name = "Visual Effects", description = "Visual effects", position = 2, closedByDefault = false)
	String VisualEffectsSettings = "VisualEffectsSettings";

	@ConfigItem(
			position = 3,
			keyName = "depthenabled",
			name = "Depth Enabled",
			description = "Simulate depth on the particles?",
			section = VisualEffectsSettings
	)
	default boolean depthEnabled()
	{
		return false;
	}

	@ConfigSection(name = "Rain & Storm Effects", description = "Rain & storm effects", position = 3, closedByDefault = false)
	String RainStormEffectsSettings = "RainStormEffectsSettings";

	// LIGHTNING
	@ConfigItem(
			position = 4,
			keyName = "lightningenabled",
			name = "Lightning Enabled",
			description = "Is it really horrendous out? (Lightning Flashes)",
			section = RainStormEffectsSettings
	)
	default boolean lightningEnabled()
	{
		return false;
	}
	
	@ConfigItem(
			position = 5,
			keyName = "thunderenabled",
			name = "Thunder Enabled",
			description = "Is it really horrendous out? (Thunder Sounds)",
			section = RainStormEffectsSettings
	)
	default boolean thunderEnabled()
	{
		return false;
	}

	@ConfigItem(
			position = 6,
			keyName = "lightningfrequency",
			name = "Lightning Frequency (WARNING BRIGHT FLASHES)",
			description = "The rough frequency of the lightning in ticks",
			section = RainStormEffectsSettings
	)
	default int lightningFrequency()
	{
		return 100;
	}

	@ConfigItem(
			position = 7,
			keyName = "lightningcolor",
			name = "Lightning Color",
			description = "The color of the lightning",
			section = RainStormEffectsSettings
	)
	default Color lightningColor()
	{
		return new Color(255, 255, 253);
	}


	// RAIN
	@ConfigItem(
			position = 8,
			keyName = "rainenabled",
			name = "Rain Enabled",
			description = "Is it raining?",
			section = RainStormEffectsSettings
	)
	default boolean rainEnabled()
	{
		return true;
	}

	@ConfigItem(
			position = 9,
			keyName = "raincolor",
			name = "Rain Color",
			description = "The color of the rain",
			section = RainStormEffectsSettings
	)
	default Color rainColor()
	{
		return new Color(136, 151, 240);
	}

	@ConfigItem(
			position = 10,
			keyName = "rainthickness",
			name = "Rain Thickness",
			description = "The thickness of the rain",
			section = RainStormEffectsSettings
	)
	default int rainThickness()
	{
		return 1;
	}

	@ConfigItem(
			position = 11,
			keyName = "rainlength",
			name = "Rain Length",
			description = "The length of the rain",
			section = RainStormEffectsSettings
	)
	default int rainLength()
	{
		return 15;
	}

	@ConfigItem(
			position = 12,
			keyName = "rainwind",
			name = "Rain Wind Speed",
			description = "The wind affecting the rain",
			section = RainStormEffectsSettings
	)
	default int rainWind()
	{
		return 2;
	}

	@ConfigItem(
			position = 13,
			keyName = "raingravity",
			name = "Rain Gravity",
			description = "The speed of the rain",
			section = RainStormEffectsSettings
	)
	default int rainGravity()
	{
		return 8;
	}

	@ConfigItem(
			position = 14,
			keyName = "raindiv",
			name = "Rain Dither",
			description = "The dither of the rain (zig-zagging)",
			section = RainStormEffectsSettings
	)
	default int rainDiv()
	{
		return 4;
	}


	@ConfigSection(name = "Wintry Effects", description = "Wintry effects", position = 4, closedByDefault = false)
	String WintryEffectsSettings = "WintryEffectsSettings";

	// SNOW
	@ConfigItem(
			position = 15,
			keyName = "snowenabled",
			name = "Snow Enabled",
			description = "Is it snowing?",
			section = WintryEffectsSettings
	)
	default boolean snowEnabled()
	{
		return false;
	}

	@ConfigItem(
			position = 16,
			keyName = "snowcolor",
			name = "Snow Color",
			description = "The color of the snow",
			section = WintryEffectsSettings
	)
	default Color snowColor()
	{
		return new Color(255, 255, 255);
	}

	@ConfigItem(
			position = 17,
			keyName = "snowthickness",
			name = "Snow Thickness",
			description = "The thickness of the snow",
			section = WintryEffectsSettings
	)
	default int snowThickness()
	{
		return 3;
	}

	@ConfigItem(
			position = 18,
			keyName = "snowwind",
			name = "Snow Wind Speed",
			description = "The wind affecting the snow",
			section = WintryEffectsSettings
	)
	default int snowWind()
	{
		return 2;
	}

	@ConfigItem(
			position = 19,
			keyName = "snowgravity",
			name = "Snow Gravity",
			description = "The speed of the snow",
			section = WintryEffectsSettings
	)
	default int snowGravity()
	{
		return 3;
	}

	@ConfigItem(
			position = 20,
			keyName = "snowdiv",
			name = "Snow Dither",
			description = "The dither of the snow (zig-zagging)",
			section = WintryEffectsSettings
	)
	default int snowDiv()
	{
		return 3;
	}

	@ConfigSection(name = "Location Matching", description = "Location matching", position = 5, closedByDefault = false)
	String LocationMatchingSettings = "LocationMatchingSettings";

	// Location Weather
	@ConfigItem(
			position = 21,
			keyName = "locationenabled",
			name = "Real World Location Matching",
			description = "Match the weather to a real world location?",
			section = LocationMatchingSettings
	)
	default boolean locationEnabled()
	{
		return false;
	}

	@ConfigItem(
			position = 22,
			keyName = "location",
			name = "Real World Location",
			description = "City name or Area name, <br>eg. London, UK <br>Changes take effect on click elsewhere",
			section = LocationMatchingSettings
	)
	default String location()
	{
		return "";
	}

	@ConfigItem(
			position = 23,
			keyName = "apiKey",
			name = "OpenWeatherMap API Key",
			description = "Required for locational weather. <br>Create free key at openweathermap.org/api",
			section = LocationMatchingSettings
	)
	default String apiKey()
	{
		return "";
	}
}

package com.rlweather;

import java.awt.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import javax.inject.Inject;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

public class RlweatherOverlay extends Overlay
{
    // general
    private Client client;
    private final RlweatherPlugin plugin;
    private final RlweatherConfig config;

    // collections
    private final List<Drop> rain = new LinkedList<>();
    private final List<Drop> snow = new LinkedList<>();

    // misc
    private double chanceOfSpawn = 0.8;
    
    private final Random r = new Random();

    @Inject
    public RlweatherOverlay(Client client, RlweatherPlugin plugin, RlweatherConfig config) {
        super(plugin);
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        this.plugin = plugin;
        this.client = client;
        this.config = config;
    }

    /**
     * Render method
     * Reads the flags set by Plugin and renders what's been asked
     *
     */
    @Override
    public Dimension render(Graphics2D graphics) {

        Dimension canvasDim = client.getRealDimensions();

        // LIGHTNING
        if(plugin.PERFORM_LIGHTNING) {
            plugin.PERFORM_LIGHTNING = false; // we only want this lasting 1fr, reset the flag early
            graphics.setColor(config.lightningColor());
            graphics.fillRect(0, 0, canvasDim.width, canvasDim.height);
        }

        // RAIN
        if(plugin.PERFORM_RAIN) {
            renderDrops(rain, canvasDim, graphics, "rain");
        }

        // SNOW
        if(plugin.PERFORM_SNOW) {
            renderDrops(snow, canvasDim, graphics, "snow");
        }

        return null;
    }

    /**
     * addDrop method
     * Adds a new Drop instance to the given List<Drop>
     *
     */
    private void addDrop(List<Drop> list, int width, Color color, int wind, int gravity, int div, boolean depthEnabled) {
        list.add(new Drop(width, color, wind, gravity, div, depthEnabled));
    }

    /**
     * renderDrops method
     * Renders Drops from a given list & stores spent ones in a garbage collection List.
     * If type "rain"; draws a line
     * If type "snow"; draws an oval
     *
     * This method exists to prevent code duplication
     *
     */
    private void renderDrops(List<Drop> drops, Dimension c, Graphics2D g, String type) {

        // drop attrs
        int length;
        int thickness;
        Color color;
        int wind;
        int gravity;
        int div;

        // default to rain
        length = config.rainLength();
        thickness = config.rainThickness();
        color = config.rainColor();
        wind = config.rainWind();
        gravity = config.rainGravity();
        div = config.rainDiv();

        // adjust if snow
        if(type.equals("snow")) {
            thickness = config.snowThickness();
            color = config.snowColor();
            wind = config.snowWind();
            gravity = config.snowGravity();
            div = config.snowDiv();
        }

        // maybe add new drop this frame
        if (Math.random() < chanceOfSpawn) {
            addDrop(drops, c.width, color, wind, gravity, div, config.depthEnabled());
        }

        // loop existing Drops
        for (Drop drop : drops) {
            g.setColor(drop.color);

            // if rain draw lines of thickness
            // drawLine(..) has no means of thickness so loop with offset
            if(type.equals("rain")) {

                if(config.depthEnabled()) {
                    drop.depth = r.nextInt(9); //We need a higher depth possibility for rain.
                    length = length + drop.depth;
                }

                g.setStroke(new BasicStroke(thickness));
                g.drawLine(drop.x2, drop.y2, drop.x1, drop.y2 + length);
            }

            // if snow draw oval of thickness
            if(type.equals("snow")) {

                if(config.depthEnabled()) {
                    thickness = thickness + drop.depth;
                }

                int radius = (thickness / 2);
                g.fillOval(drop.x1 - radius, drop.y1 - radius, thickness, thickness);
            }

            // update positions
            drop.update();

            // reset changables for next drop if modified
            length = config.rainLength();
            if(type.equals("snow")) {
                thickness = config.snowThickness();
            }
        }

        // remove spent drops
        drops.removeIf(drop ->
            drop.y1 > c.height || // offscreen down
            drop.x1 > c.width || // offscreen right
            drop.y1 < 0 || // offscreen up
            drop.x1 < -c.width / 2 // offscreen left, account for spawning outside bounds in Drop.java
        );
    }
}

package com.rlweather;

import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;
import java.util.List;

public class WeatherModel {

    // openweather returns an array of one weather item
    // catch it but then return only the first
    // kinda confusing but shortens the codebase hugely
    private List<Weather> weather;

    public Weather getWeather() {
        return this.weather.get(0);
    }

    public void setWeather(List<Weather> weather) {
        this.weather = weather;
    }

    public class Weather {
        private int id;

        public int getId() {
            return this.id;
        }

        public void setId(int id) {
            this.id = id;
        }

        // https://openweathermap.org/weather-conditions
        public boolean isRainingFromID() {
            if (this.id < 600) {
                return true;
            } else {
                return false;
            }
        }

        public boolean isSnowingFromID() {
            if (this.id < 700 && this.id >= 600) {
                return true;
            } else {
                return false;
            }
        }

        public boolean isThunderingFromID() {
            if (this.id < 300) {
                return true;
            } else {
                return false;
            }
        }
    }
}

/**
 * Drop class
 *
 * Basic information for a droplet of rain or snow, update()
 * causes the droplet to fall a little farther.
 *
 */

package com.rlweather;

import java.awt.Color;
import java.util.Random;

public class Drop {
    int x1;
    int y1;
    int x2;
    int y2;
    Color color;
    int wind;
    int gravity;
    int div;
    boolean depthEnabled;
    int depth;

    public Drop(int width, Color color, int wind, int gravity, int div, boolean depthEnabled) {
        Random r = new Random();
        this.x1 = r.nextInt(width + (width/2)) - (width/2); // -width/2 to width, java lol
        this.y1 = 0;
        this.x2 = x1;
        this.y2 = y1;
        this.color = color;
        this.wind = wind;
        this.gravity = gravity;
        this.div = div;
        this.depthEnabled = depthEnabled;
        this.depth = r.nextInt(3) + 1; // higher = closed to camera
    }

    public void update() {
        Random r = new Random();

        this.x2 = this.x1;
        this.y2 = this.y1;

        this.x1 += this.wind;
        if (this.div > 0)
        {
            this.x1 += r.nextInt(this.div + this.div) - this.div; // -div to div
        }

        int adv = this.gravity;

        if (this.depthEnabled) {
            adv = adv  + (this.depth / 3);
        }

        if (this.gravity > 0 && adv <= 0) {
            adv = 1;
        }
        this.y1 += adv;
    }
}

package com.rlweather;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import okhttp3.OkHttpClient;

import java.util.Random;


@Slf4j
@PluginDescriptor(
	name = "Weather"
)
public class RlweatherPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private RlweatherConfig config;

	@Inject
	private RlweatherOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ChatMessageManager chatMessageManager;

	@Inject
	private WeatherAPI weatherAPI;

	// TIMEOUTS
	public int lastLightning = 10;

	// AUDIO
	public Sound sound = new Sound();

	// SOUND KEYS
	// used to manage the sounds in use
	protected String KEY_RAIN = "rain";
	protected String KEY_THUNDER = "thunder";
	protected String KEY_SNOW = "snow";

	// GENERAL FLAGS
	public boolean PLAYER_OUTSIDE = false;

	// FLAGS FOR RENDER
	// read by the render method to decide what to do each frame
	public boolean PERFORM_LIGHTNING = false; // also changed in render for the 1fr quickness
	public boolean PERFORM_RAIN = false;
	public boolean PERFORM_SNOW = false;

	@Override
	protected void startUp() throws Exception
	{
		log.info("Weather started!");
		overlayManager.add(overlay);
		weatherAPI.setChatMessageManager(chatMessageManager);
	}

	@Override
	protected void shutDown() throws Exception
	{
		log.info("Weather stopped!");
		sound.stopAll();
		overlayManager.remove(overlay);
	}

	private boolean isLightningEnabled() {
		if(config.locationEnabled()) {
			return config.lightningEnabled() && weatherAPI.isThundering();
		} else {
			return config.lightningEnabled();
		}
	}
	private boolean isThunderEnabled() {
		if(config.locationEnabled()) {
			return config.thunderEnabled() && weatherAPI.isThundering();
		} else {
			return config.thunderEnabled();
		}
	}
	private boolean isRainEnabled() {
		if(config.locationEnabled()) {
			return config.rainEnabled() && weatherAPI.isRaining();
		} else {
			return config.rainEnabled();
		}
	}
	private boolean isSnowEnabled() {
		if(config.locationEnabled()) {
			return config.snowEnabled() && weatherAPI.isSnowing();
		} else {
			return config.snowEnabled();
		}
	}

	@Subscribe
	private void onConfigChanged(ConfigChanged event) {
		if (!event.getGroup().equals("Weather")) {
			return;
		}
		
		if (event.getKey().equals("soundvolume")) {
			sound.stopAll(); //Replay the sound on the next tick with the new volume level.
		}
		if (!config.locationEnabled()) {
			return;
		}
		if (event.getKey().equals("locationenabled") ||
			event.getKey().equals("location") ||
			event.getKey().equals("apiKey") ) {
			weatherAPI.setApiKey(config.apiKey());
			weatherAPI.setLocation(config.location());
			weatherAPI.zeroStaleness();
		}
	}

	@Subscribe
	public void onGameTick(GameTick gameTick) {
		Player player = client.getLocalPlayer();
		if (player == null)
		{
			return; // no player?? bow out early.
		}

		// UPDATE PLAYER STATUS
		PLAYER_OUTSIDE = player.getWorldLocation().getY() < Constants.OVERWORLD_MAX_Y;

		// RESET FLAGS
		PERFORM_LIGHTNING = false;
		PERFORM_RAIN = false;
		PERFORM_SNOW = false;

		// RETURN EARLY IF PLAYER NOT OUTSIDE
		if(!PLAYER_OUTSIDE) return;

		if(config.locationEnabled()) {
			weatherAPI.setApiKey(config.apiKey());
			weatherAPI.setLocation(config.location());
			weatherAPI.update();
		}

		// LIGHTNING
		if(isLightningEnabled() || isThunderEnabled()) {
			if(lastLightning <= 0) {
				Random r = new Random();
				if(r.nextInt(20) == 0) { // 1/20 chance of lightning when it hits
					if (isLightningEnabled()) {
						// set flag to flash lightning
						PERFORM_LIGHTNING = true;
					}
					
					// reset lightning timer
					lastLightning = config.lightningFrequency();

					// play audio, thunder always plays regardless of lightning flash
					// but only if its activated, to avoid confusion
					if(config.soundsEnabled() && isThunderEnabled()) {
						sound.thunder(KEY_THUNDER, config.soundVolume());
					}
				}
			}
		}
		// always count down regardless
		if(lastLightning > 0) { lastLightning--; }
		else if(lastLightning < 0) { lastLightning = 0; }

		// RAIN
		if(isRainEnabled()) {
			// set flag to make rain
			PERFORM_RAIN = true;
			// if not already raining, begin rain sound
			if(!sound.isPlaying(KEY_RAIN) && config.soundsEnabled()) {
				sound.rain(KEY_RAIN, config.soundVolume());
			}
		}
		else {
			sound.stop(KEY_RAIN);
		}

		// SNOW
		if(isSnowEnabled()) {
			// set flag to make snow
			PERFORM_SNOW = true;
			// if not already snowing, begin snow sound
			if(!sound.isPlaying(KEY_SNOW) && config.soundsEnabled()) {
				sound.snow(KEY_SNOW, config.soundVolume());
			}
		} else {
			sound.stop(KEY_SNOW);
		}

		// SOUNDS
		if(!config.soundsEnabled()) {
			// stop all sounds immediately if sounds disabled
			sound.stopAll();
		}

	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() == GameState.LOGIN_SCREEN
			|| gameStateChanged.getGameState() == GameState.LOGIN_SCREEN_AUTHENTICATOR
			|| gameStateChanged.getGameState() == GameState.LOGGING_IN
			|| gameStateChanged.getGameState() == GameState.HOPPING
			|| gameStateChanged.getGameState() == GameState.CONNECTION_LOST) {
			sound.stopAll();
		}
	}

	@Provides
	RlweatherConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(RlweatherConfig.class);
	}
}

package com.rlweather;

import com.google.gson.Gson;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.client.RuneLite;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import javax.inject.Inject;
import java.io.IOException;
import java.util.Optional;

@Slf4j
public class WeatherAPI {
    private final int MAX_STALENESS = 360; // Gameticks are ~0.6sec, 600 ~= every 3 minutes
                                            // Roughly req 14600 a month if continuous play.
                                            // (don't ever get near free api rate limits)
                                            // see https://openweathermap.org/price
                                            // we must be careful here!
    private String location = "";
    private String apiKey = "";
    private ChatMessageManager chatMessageManager;
    private int staleness = MAX_STALENESS;
    private boolean isSnowing = false;
    private boolean isRaining = false;
    private boolean isThundering = false;
    private Optional<Boolean> isHealthy = Optional.empty();
    private OkHttpClient okHttpClient;
    private Gson gson;

    @Inject
    private WeatherAPI(OkHttpClient okHttpClient, Gson gson) {
        this.okHttpClient = okHttpClient;
        this.gson = gson;
        log.debug("Weather API starting");
    }

    public void zeroStaleness() {
        this.staleness = MAX_STALENESS + 100;
        sendMessage("Weather location config change detected, refreshing..");
    }

    public void setLocation(String location) {
        if(!this.location.equals(location)) {
            this.location = location;
            isHealthy = Optional.empty();
        }
    }

    public void setApiKey(String apiKey) {
        if(!this.apiKey.equals(apiKey)) {
            this.apiKey = apiKey;
            isHealthy = Optional.empty();
        }
    }

    public void setChatMessageManager(ChatMessageManager chatMessageManager) {
        this.chatMessageManager = chatMessageManager;
    }

    private void sendMessage(String chat) {
        final String message = new ChatMessageBuilder()
                .append(chat)
                .build();

        chatMessageManager.queue(
                QueuedMessage.builder()
                        .type(ChatMessageType.CONSOLE)
                        .runeLiteFormattedMessage(message)
                        .build());
    }

    // Called on gametick (~0.6 seconds), updates every MAX_STALENESS increment
    public void update() {
        if(location.equals("") || apiKey.equals("")) {
            return;
        } else if(staleness > MAX_STALENESS) {
            log.debug("Weather data stale, refreshing from API");

            HttpUrl httpUrl = new HttpUrl.Builder()
                    .scheme("https")
                    .host("api.openweathermap.org")
                    .addPathSegment("data")
                    .addPathSegment("2.5")
                    .addPathSegment("weather")
                    .addQueryParameter("q", location)
                    .addQueryParameter("units", "metric")
                    .addQueryParameter("cnt", "10")
                    .build();

            Request getRequest = new Request.Builder()
                    .url(httpUrl)
                    .header("User-Agent", RuneLite.USER_AGENT + " (rl-weather")
                    .header("x-api-key", apiKey)
                    .build();

            okHttpClient.newCall(getRequest).enqueue(new Callback() {
                @Override
                public void onResponse(Call call, Response response) throws IOException {
                    log.info(call.toString(), response.body().toString());

                    if (response.isSuccessful()) {
                        if (response.body() != null) {
                            WeatherModel weatherModel = gson.fromJson(response.body().string(), WeatherModel.class);
                            isRaining = weatherModel.getWeather().isRainingFromID();
                            isSnowing = weatherModel.getWeather().isSnowingFromID();
                            isThundering = weatherModel.getWeather().isThunderingFromID();
                            if(!isHealthy.orElse(false)) {
                                sendMessage("Now connected to weather in "+ location);
                            }
                            isHealthy = Optional.of(true);
                            log.debug("Updated weather --\n" +
                                    "isRaining: " + isRaining() + "\n" +
                                    "isSnowing: " + isSnowing() + "\n" +
                                    "isThundering: " + isThundering() + "\n");
                        } else {
                            log.error("Empty body response: " + response.code());
                        }
                    } else {
                        log.error("Responded with error code: " + response.code());
                        String error = "";
                        try {
                            error = response.body().string();
                            log.error(error);
                        } catch (IOException e) {
                            e.printStackTrace();
                        } finally {
                            log.error("Disabling weather statuses due to broken API request");
                            isRaining = false;
                            isSnowing = false;
                            isThundering = false;
                            if(isHealthy.orElse(true)) {
                                sendMessage("Could not load weather data with given API key and/or location " + location);
                                sendMessage(error);
                                log.debug("API health dropped, sent message to console.");
                            } else {
                                log.debug("API has not been healthy, won't notify.");
                            }
                            isHealthy = Optional.of(false);
                        }
                    }
                    response.close();
                }

                @Override
                public void onFailure(Call call, IOException e) {
                    log.error("Error in call" + call.toString());
                    log.error(e.toString());
                    e.printStackTrace();
                }
            });

            // reset staleness
            staleness = 0;
        } else {
            staleness ++;
        }
    }

    public boolean isSnowing() {
        return isSnowing;
    }
    public boolean isRaining() {
        return isRaining;
    }
    public boolean isThundering() {
        return isThundering;
    }
}

