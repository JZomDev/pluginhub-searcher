package com.example;

import com.ItemRarity.ItemRarityPlugin;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ItemRarityPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ItemRarityPlugin.class);
		RuneLite.main(args);
	}
}
package com.ItemRarity;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("itemRarity")
public interface ItemRarityConfig extends Config
{
	@ConfigItem(
			keyName = "useStorePrice",
			name = "Use Store Price",
			description = "Whether to use the Store price",
			position = 1
	)
	default boolean getUseStoreValue()
	{
		return false;
	}

	@ConfigItem(
			keyName = "useGEPrice",
			name = "Use GE Price",
			description = "Whether to use the GE price",
			position = 2
	)
	default boolean getUseGEValue()
	{
		return true;
	}

	@ConfigItem(
			keyName = "useHAPrice",
			name = "Use HA Price",
			description = "Whether to use the HA price",
			position = 3
	)
	default boolean getUseHAValue()
	{
		return true;
	}

	@ConfigItem(
			keyName = "useStackCount",
			name = "Use Stack Count",
			description = "Whether to Calculate the rarity based on the number of items in the stack",
			position = 4
	)
	default boolean getUseStackCount()
	{
		return false;
	}

	// Color Section
	@ConfigSection(
			position = 5,
			name = "Common",
			description = "The color and price of Common Rarity"
	)
	String commonSection = "commonSection";

	@ConfigItem(
			keyName = "commonItemValue",
			name = "Price",
			description = "Max Price of a Common Item",
			section = commonSection,
			position = 1
	)
	default int getCommonItemValue()
	{
		return 1000;
	}

	@Alpha
	@ConfigItem(
			keyName = "commonItemColor",
			name = "Highlight Color",
			description = "Color of a Common Item",
			section = commonSection,
			position = 2
	)
	default Color getCommonItemColor()
	{
		return new Color(0,0,0,0.0f);
	}



	// Color Section
	@ConfigSection(
			position = 6,
			name = "Uncommon",
			description = "The color and price of Uncommon Rarity"
	)
	String uncommonSection = "uncommonSection";

	@ConfigItem(
			keyName = "uncommonItemValue",
			name = "Price",
			description = "Max Price of a Uncommon Item",
			section = uncommonSection,
			position = 1
	)
	default int getUncommonItemValue()
	{
		return 12500;
	}

	@Alpha
	@ConfigItem(
			keyName = "uncommonItemColor",
			name = "Highlight Color",
			description = "Color of a Uncommon Item",
			section = uncommonSection,
			position = 2
	)
	default Color getUncommonItemColor()
	{
		return new Color(0, 240 / 255f, 0, 110 / 255f);
	}


	// Color Section
	@ConfigSection(
			position = 7,
			name = "Rare",
			description = "The color and price of Rare Rarity"
	)
	String rareSection = "rareSection";

	@ConfigItem(
			keyName = "rareItemValue",
			name = "Price",
			description = "Max Price of a Rare Item",
			section = rareSection,
			position = 1
	)
	default int getRareItemValue()
	{
		return 125000;
	}

	@Alpha
	@ConfigItem(
			keyName = "rareItemColor",
			name = "Highlight Color",
			description = "Color of a Rare Item",
			section = rareSection,
			position = 2
	)
	default Color getRareItemColor()
	{
		return new Color(0, 100 / 255f, 240 / 255f, 195 / 255f);
	}



	// Color Section
	@ConfigSection(
			position = 8,
			name = "Epic",
			description = "The color and price of Epic Rarity"
	)
	String epicSection = "epicSection";

	@ConfigItem(
			keyName = "epicItemValue",
			name = "Price",
			description = "Max Price of a Epic Item",
			section = epicSection,
			position = 1
	)
	default int getEpicItemValue()
	{
		return 1800000;
	}

	@Alpha
	@ConfigItem(
			keyName = "epicItemColor",
			name = "Highlight Color",
			description = "Color of a Epic Item",
			section = epicSection,
			position = 2
	)
	default Color getEpicItemColor()
	{
		return new Color(160 / 255f, 50 / 255f, 240 / 255f, 195 / 255f);
	}



	// Color Section
	@ConfigSection(
			position = 9,
			name = "Legendary",
			description = "The color and price of Legendary Rarity"
	)
	String legendarySection = "legendarySection";

	@ConfigItem(
			keyName = "legendaryItemValue",
			name = "Price",
			description = "Max Price of a Legendary Item",
			section = legendarySection,
			position = 1
	)
	default int getLegendaryItemValue()
	{
		return Integer.MAX_VALUE;
	}

	@Alpha
	@ConfigItem(
			keyName = "legendaryItemColor",
			name = "Highlight Color",
			description = "Color of a Legendary Item",
			section = legendarySection,
			position = 2
	)
	default Color getLegendaryItemColor()
	{
		return new Color(255 / 255f, 120 / 255f, 0 / 255f, 195 / 255f);
	}
}

package com.ItemRarity;

// External
import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;

// RuneLite Plugins
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

// RuneLite
import net.runelite.client.config.ConfigManager;

// UI
import net.runelite.client.ui.overlay.OverlayManager;

import java.awt.*;

@Slf4j
@PluginDescriptor(
	name = "ItemRarity"
)
public class ItemRarityPlugin extends Plugin
{
	@Inject
	private ItemRarityConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ItemRarityOverlay overlay;

	@Override
	protected void startUp() throws Exception
	{
		log.info("ItemRarity started!");
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		log.info("ItemRarity stopped!");
		overlayManager.remove(overlay);
	}

	@Provides
	ItemRarityConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ItemRarityConfig.class);
	}

	boolean getUseStoreValue()
	{
		return config.getUseStoreValue();
	}

	boolean getUseGEValue()
	{
		return config.getUseGEValue();
	}

	boolean getUseHAValue()
	{
		return config.getUseHAValue();
	}

	boolean getUseStackCount()
	{
		return config.getUseStackCount();
	}

	Color getRarityColor(final int itemPrice)
	{
		if (itemPrice < config.getCommonItemValue())
		{
			return config.getCommonItemColor();
		}
		else if (itemPrice < config.getUncommonItemValue())
		{
			return config.getUncommonItemColor();
		}
		else if (itemPrice < config.getRareItemValue())
		{
			return config.getRareItemColor();
		}
		else if (itemPrice < config.getEpicItemValue())
		{
			return config.getEpicItemColor();
		}

		return config.getLegendaryItemColor();
	}
}

package com.ItemRarity;

// External
import com.google.inject.Inject;
import lombok.extern.slf4j.Slf4j;

// Inventory/Items
import net.runelite.api.ItemComposition;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.ui.overlay.WidgetItemOverlay;

// UI
import net.runelite.client.game.ItemManager;

// ItemRarityPlugin
import com.ItemRarity.ItemRarityConfig;

import java.awt.*;
import java.awt.image.BufferedImage;


@Slf4j
public class ItemRarityOverlay extends WidgetItemOverlay
{
    private static final int INVENTORY_SIZE = 28;

    private final ItemRarityPlugin plugin;
    private final ItemManager itemManager;

    @Inject
    private ItemRarityOverlay(ItemRarityPlugin plugin, ItemManager itemManager)
    {
        this.plugin = plugin;
        this.itemManager = itemManager;

        showOnEquipment();
        showOnInventory();
        showOnBank();
    }

    private int itemPrice(int itemId)
    {
        // Used to get High Alch Price
        ItemComposition itemDef = itemManager.getItemComposition(itemId);

        int maxPrice = 0;

        // Get GE price and High Alch Price
        int gePrice = itemManager.getItemPrice(itemId);

        // High Alch Price
        int haPrice = itemDef.getHaPrice();

        // Store Price of the item
        int storePrice = itemDef.getPrice();

        if (plugin.getUseStoreValue())
        {
            maxPrice = Integer.max(storePrice, maxPrice);
        }

        if (plugin.getUseGEValue())
        {
            maxPrice = Integer.max(gePrice, maxPrice);
        }

        if (plugin.getUseHAValue())
        {
            maxPrice = Integer.max(haPrice, maxPrice);
        }

        return maxPrice;
    }

    @Override
    public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem itemWidget)
    {
        int price = itemPrice(itemId);

        if (plugin.getUseStackCount())
        {
            price *= itemWidget.getQuantity();
        }

        // Get Rarity Color
        final Color color = plugin.getRarityColor(price);

        // Null check and alpha optimization
        if (color == null || color.getAlpha() == 0)
        {
            return;
        }

        Rectangle bounds = itemWidget.getCanvasBounds();

        final BufferedImage outline = itemManager.getItemOutline(itemId, itemWidget.getQuantity(), color);
        graphics.drawImage(outline, (int)bounds.getX(), (int)bounds.getY(), null);
    }
}

