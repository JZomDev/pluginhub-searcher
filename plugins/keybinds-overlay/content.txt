package com.keybindsOverlay;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class KeybindsOverlayPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(KeybindsOverlayPlugin.class);
		RuneLite.main(args);
	}
}
package com.keybindsOverlay;

import net.runelite.client.config.*;

import java.awt.event.KeyEvent;

@ConfigGroup("example")
public interface KeybindsOverlayConfig extends Config
{
	@ConfigSection(
			position = 1,
			name = "Overlay",
			description = "Settings for the overlay."

	)
	String keybindsSection = "keybinds";

	@ConfigSection(
			position = 2,
			name = "Order of the icons",
			description = "Settings for the icons \n 1 <--> 7"

	)
	String iconOrderSection = "layout";

	@ConfigItem(
			position = 0,
			keyName = "combat_icon",
			name = "Combat icon",
			description = "",
			section = iconOrderSection
	)
	default int combatLocation(){ return 1; }

	@ConfigItem(
			position = 1,
			keyName = "skills_icon",
			name = "Skills icon",
			description = "",
			section = iconOrderSection
	)
	default int skillsLocation(){ return 2; }

	@ConfigItem(
			position = 2,
			keyName = "quests_icon",
			name = "Quests icon",
			description = "",
			section = iconOrderSection
	)
	default int questsLocation(){ return 3; }

	@ConfigItem(
			position = 3,
			keyName = "inventory_icon",
			name = "Inventory icon",
			description = "",
			section = iconOrderSection
	)
	default int inventoryLocation(){ return 4; }

	@ConfigItem(
			position = 4,
			keyName = "equipment_icon",
			name = "Equipment icon",
			description = "",
			section = iconOrderSection
	)
	default int equipmentLocation(){ return 5; }

	@ConfigItem(
			position = 5,
			keyName = "prayer_icon",
			name = "Prayer icon",
			description = "",
			section = iconOrderSection
	)

	default int prayerLocation(){ return 6; }

	@ConfigItem(
			position = 6,
			keyName = "spellbook_icon",
			name = "Spellbook icon",
			description = "",
			section = iconOrderSection
	)
	default int spellbookLocation(){ return 7; }

	@ConfigItem(
			position = 3,
			keyName = "combat",
			name = "Combat",
			description = "",
			section = keybindsSection
	)
	default Keybind combatKey(){ return new Keybind(KeyEvent.VK_F1, 0); }

	@ConfigItem(
			position = 4,
			keyName = "skills",
			name = "Skills",
			description = "",
			section = keybindsSection
	)
	default Keybind skillsKey(){ return new Keybind(KeyEvent.VK_F2, 0); }

	@ConfigItem(
			position = 5,
			keyName = "quests",
			name = "Quests",
			description = "",
			section = keybindsSection
	)
	default Keybind questsKey(){ return new Keybind(KeyEvent.VK_F3, 0); }

	@ConfigItem(
			position = 6,
			keyName = "inventory",
			name = "Inventory",
			description = "",
			section = keybindsSection
	)
	default Keybind inventoryKey(){ return new Keybind(KeyEvent.VK_ESCAPE, 0); }

	@ConfigItem(
			position = 7,
			keyName = "equipment",
			name = "Equipment",
			description = "",
			section = keybindsSection
	)
	default Keybind equipmentKey(){ return new Keybind(KeyEvent.VK_F4, 0); }

	@ConfigItem(
			position = 8,
			keyName = "prayers",
			name = "Prayers",
			description = "",
			section = keybindsSection
	)
	default Keybind prayerKey(){ return new Keybind(KeyEvent.VK_F5, 0); }

	@ConfigItem(
			position = 9,
			keyName = "spellbook",
			name = "Spellbook",
			description = "",
			section = keybindsSection
	)
	default Keybind spellbookKey(){ return new Keybind(KeyEvent.VK_F6, 0); }
}

package com.keybindsOverlay;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Keybinds Overlay"
)
public class KeybindsOverlayPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private KeybindsOverlayOverlay overlay;

	@Override
	protected void startUp()
	{
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
	}

	@Provides
	KeybindsOverlayConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(KeybindsOverlayConfig.class);
	}
}

package com.keybindsOverlay;

import net.runelite.client.config.Keybind;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.ComponentOrientation;
import net.runelite.client.ui.overlay.components.ImageComponent;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;

import javax.inject.Inject;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.lang.reflect.InvocationTargetException;
import java.util.*;
import java.util.stream.Collectors;

public class KeybindsOverlayOverlay extends Overlay {

    private final KeybindsOverlayConfig config;
    private final PanelComponent panelComponent = new PanelComponent();

    @Inject
    private KeybindsOverlayOverlay(KeybindsOverlayConfig config)
    {
        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
        setPriority(OverlayPriority.HIGH);
        this.config = config;

    }


    @Override
    public Dimension render(Graphics2D graphics) {

        panelComponent.getChildren().clear();

        panelComponent.setOrientation(ComponentOrientation.HORIZONTAL);
        panelComponent.setGap(new Point(20, 0));


        for (sidePanelTab tab: getOrderOfTabs())
        {
            if (isKeybindingDefined(getKeybinding(tab))) {
                addTabToPanel(tab);
            }
        }

        return panelComponent.render(graphics);
    }

    private void addLine(String text)
    {
        panelComponent.getChildren().add(LineComponent.builder()
                .right(text.substring(0, Math.min(3, text.length())).toUpperCase())
                .rightColor(Color.PINK)
                .build());
    }

    private void addIcon(BufferedImage icon)
    {
        panelComponent.getChildren()
                .add(new ImageComponent(icon));
    }

    private void addTabToPanel(sidePanelTab tab)
    {
        addIcon(tab.getIcon());
        addKeybinding(getKeybinding(tab));
    }

    private Keybind getKeybinding(sidePanelTab tab) {
        Keybind keybind;
        try {
            keybind = (Keybind) tab.getKeybindingMethod().invoke(config);
        } catch (IllegalAccessException | InvocationTargetException e) {
            keybind = new Keybind(KeyEvent.VK_UNDEFINED,0);
        }
        return keybind;
    }

    private int getLocation(sidePanelTab tab)
    {
        int location;
        try {
            location = (int) tab.getLocationMethod().invoke(config);
        } catch (IllegalAccessException | InvocationTargetException e) {
            Random random = new Random();
            location = 20 + random.nextInt(14);
        }
        return location;
    }

    private void addKeybinding(Keybind keybind)
    {
        addLine(String.valueOf(keybind));
    }

    private boolean isKeybindingDefined(Keybind keybind)
    {
        return keybind.getKeyCode() != KeyEvent.VK_UNDEFINED;
    }

    private Set<sidePanelTab> getOrderOfTabs()
    {
        Map<sidePanelTab, Integer> orderOfTabs = new HashMap<>();
        for (sidePanelTab tab: sidePanelTab.values()){
            orderOfTabs.merge(tab, getLocation(tab), (oldVale, newValue)-> newValue);
            getLocation(tab);
        }

        return orderOfTabs.entrySet()
                .stream()
                .sorted((Map.Entry.comparingByValue()))
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new)).keySet();


    }

}

package com.keybindsOverlay;

import net.runelite.client.util.ImageUtil;

import java.awt.image.BufferedImage;
import java.lang.reflect.Method;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public enum sidePanelTab {

     COMBAT, SKILLS, QUESTS, INVENTORY, EQUIPMENT, PRAYER, SPELLBOOK;

    // Not in use tabs rn.
    // ACCOUNT_MANAGEMENT, CLAN_CHAT, EMOTE,  FRIENDS, LOGOUT, MUSIC, OPTIONS

    public BufferedImage getIcon() {
        try {
            return ImageUtil.resizeImage(ImageUtil.loadImageResource(getClass(), "/sidePanel/tabs/"+ name().toLowerCase() + ".png"), 18, 18);
        } catch (Exception e) {
            System.err.println("errorLoading image");
        }
        throw new RuntimeException("Shouldn't be here.");
    }

    public Method getKeybindingMethod() {
        return getMethod(name(), "Key");
    }

    public Method getLocationMethod() {
        return getMethod(name(), "Location");
    }

    private Method getMethod(String mainSpecifier, String secondSpecifier)
    {
        Method[] methods = KeybindsOverlayConfig.class.getMethods();
        Pattern pattern = Pattern.compile(mainSpecifier.toLowerCase() + secondSpecifier);
        for (Method method : methods) {
            Matcher matcher = pattern.matcher(method.getName());
            if (matcher.lookingAt()) {
                return method;
            }
        }
        throw new RuntimeException("Programming error. \n" + mainSpecifier + secondSpecifier);
    }

}

