package com.erishiongames.memeeffects;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class MemeEffectsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(MemeEffectsPlugin.class);
		RuneLite.main(args);
	}
}
/* BSD 2-Clause License
 * Copyright (c) 2023, Erishion Games LLC <https://github.com/Erishion-Games-LLC>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.erishiongames.memeeffects;

public enum AnimationIds {

    MORTAR_AND_VIAL(363),
    MORTAR_AND_PESTLE(364),
	;

	private final int animationID;

	AnimationIds(int animationID)
	{
		this.animationID = animationID;
	}

	public int getAnimationID()
	{
		return animationID;
	}
}

/* BSD 2-Clause License
 * Copyright (c) 2023, Erishion Games LLC <https://github.com/Erishion-Games-LLC>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.erishiongames.memeeffects;

import com.erishiongames.memeeffects.messages.MessageManager;
import com.erishiongames.memeeffects.sounds.SoundFileManager;
import com.erishiongames.memeeffects.sounds.SoundManager;
import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import okhttp3.OkHttpClient;
import java.util.concurrent.ScheduledExecutorService;

@Slf4j
@PluginDescriptor(
	name = "Meme Effects"
)
public class MemeEffectsPlugin extends Plugin
{
	public static final String CONFIG_GROUP = "memeeffects";

	@Inject
	private Client client;

	@Inject
	private MemeEffectsPluginConfig config;

	@Inject
	private ScheduledExecutorService executor;

	@Inject
	private OkHttpClient okHttpClient;

	@Inject
	private SoundManager soundManager;

	@Inject
	private MessageManager messageManager;

	@Inject
	private EventBus eventBus;


	@Override
	protected void startUp() throws Exception
	{
		eventBus.register(soundManager);
		eventBus.register(messageManager);

		executor.submit(() -> {
			SoundFileManager.ensureDownloadDirectoryExists();
			SoundFileManager.downloadAllMissingSounds(okHttpClient);
		});
	}

	@Override
	protected void shutDown() throws Exception
	{
		eventBus.unregister(soundManager);
		eventBus.unregister(messageManager);
	}

	@Provides
	MemeEffectsPluginConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(MemeEffectsPluginConfig.class);
	}
}

/* BSD 2-Clause License
 * Copyright (c) 2023, Erishion Games LLC <https://github.com/Erishion-Games-LLC>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.erishiongames.memeeffects.sounds;

public enum SoundEffectIds
{
    MORTAR_AND_PESTLE(2608);
	private final int soundEffectID;


	SoundEffectIds(int soundEffectID)
	{
		this.soundEffectID = soundEffectID;
	}

	public int getSoundEffectID()
	{
		return soundEffectID;
	}
}
/* BSD 2-Clause License
 * Copyright (c) 2023, Erishion Games LLC <https://github.com/Erishion-Games-LLC>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.erishiongames.memeeffects.sounds;

import com.erishiongames.memeeffects.AnimationIds;
import com.erishiongames.memeeffects.MemeEffectsPluginConfig;
import javax.inject.Inject;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.SoundEffectPlayed;
import net.runelite.client.eventbus.Subscribe;

public class SoundManager
{
	private int currentAnimationID = 0;

	@Inject
	private SoundEngine soundEngine;

	@Inject
	private MemeEffectsPluginConfig config;

	@Subscribe
	public void onAnimationChanged(AnimationChanged animationChanged){
		currentAnimationID = animationChanged.getActor().getAnimation();
		if(config.enableMortarPestleBonk()){
			tryPlayMortarPestleBonk(currentAnimationID);
		}
	}

	public void tryPlayMortarPestleBonk(int currentAnimationID){
		if(currentAnimationID == AnimationIds.MORTAR_AND_PESTLE.getAnimationID()){
			soundEngine.playClip(SoundFiles.MORTAR_PESTLE_BONK);
		}
	}

	public void tryRemoveMortarPestleSound(SoundEffectPlayed soundEffectPlayed) {
		if (soundEffectPlayed.getSoundId() == SoundEffectIds.MORTAR_AND_PESTLE.getSoundEffectID() && currentAnimationID == AnimationIds.MORTAR_AND_PESTLE.getAnimationID()) {
			soundEffectPlayed.consume();
		}
	}

	@Subscribe
	public void onSoundEffectPlayed(SoundEffectPlayed soundEffectPlayed)
	{
		if(config.enableMortarPestleBonk()){
			tryRemoveMortarPestleSound(soundEffectPlayed);
		}
	}
}

/* BSD 2-Clause License
 * Copyright (c) 2021, m0bilebtw
 * Copyright (c) 2023, Erishion Games LLC <https://github.com/Erishion-Games-LLC>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.erishiongames.memeeffects.sounds;

import com.erishiongames.memeeffects.MemeEffectsPluginConfig;
import lombok.extern.slf4j.Slf4j;
import javax.inject.Inject;
import javax.inject.Singleton;
import javax.sound.sampled.*;
import java.io.InputStream;
import java.io.BufferedInputStream;
import java.io.IOException;


@Singleton
@Slf4j
public class SoundEngine {

    //Copied from https://github.com/m0bilebtw/c-engineer-completed/blob/master/src/main/java/com/github/m0bilebtw/SoundEngine.java

    @Inject
    private MemeEffectsPluginConfig config;

    private static final long CLIP_MTIME_UNLOADED = -2;
    private long lastClipMTime = CLIP_MTIME_UNLOADED;
    private Clip clip = null;


    private boolean loadClip(SoundFiles sound) {
        try (InputStream stream = new BufferedInputStream(SoundFileManager.getSoundStream(sound))) {
            try (AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(stream)) {
                clip.open(audioInputStream); // liable to error with pulseaudio, works on windows, one user informs me mac works
            }
            return true;
        }
            catch (UnsupportedAudioFileException | IOException | LineUnavailableException ignored) {
            }
            return false;
        }

    public void playClip(SoundFiles sound) {
        long currentMTime = System.currentTimeMillis();
        if (clip == null || currentMTime != lastClipMTime || !clip.isOpen()) {
            if (clip != null && clip.isOpen()) {
                clip.close();
            }

            try { clip = AudioSystem.getClip();
            }
            catch (LineUnavailableException e) {
                lastClipMTime = CLIP_MTIME_UNLOADED;
                return;
            }

            lastClipMTime = currentMTime;
            if (!loadClip(sound)) {
                return;
            }
        }

        // User configurable volume
        FloatControl volume = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);
        float gain = 20f * (float) Math.log10(config.Volume() / 100f);
        gain = Math.min(gain, volume.getMaximum());
        gain = Math.max(gain, volume.getMinimum());
        volume.setValue(gain);

        // From RuneLite base client Notifier class:
        // Using loop instead of start + setFramePosition prevents the clip
        // from not being played sometimes, presumably a race condition in the
        // underlying line driver
        clip.loop(0);
    }
}

/* BSD 2-Clause License
 * Copyright (c) 2021, m0bilebtw
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.erishiongames.memeeffects.sounds;

import com.erishiongames.memeeffects.MemeEffectsPlugin;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.RuneLite;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

@Slf4j
public abstract class SoundFileManager {

    //Copied from https://github.com/m0bilebtw/c-engineer-completed/blob/master/src/main/java/com/github/m0bilebtw/SoundFileManager.java

    private static final File DOWNLOAD_DIR = new File(RuneLite.RUNELITE_DIR.getPath() + File.separator + MemeEffectsPlugin.CONFIG_GROUP);
    private static final String DELETE_WARNING_FILENAME = "EXTRA_FILES_WILL_BE_DELETED_BUT_FOLDERS_WILL_REMAIN";
    private static final File DELETE_WARNING_FILE = new File(DOWNLOAD_DIR, DELETE_WARNING_FILENAME);
    private static final HttpUrl RAW_GITHUB = HttpUrl.parse("https://raw.githubusercontent.com/Erishion-Games-LLC/Meme-Sounds-Runelite-Plugin/master/sounds");

    @SuppressWarnings("ResultOfMethodCallIgnored")
    public static void ensureDownloadDirectoryExists() {
        if (!DOWNLOAD_DIR.exists()) {
            DOWNLOAD_DIR.mkdirs();
        }
        try {
            DELETE_WARNING_FILE.createNewFile();
        } catch (IOException ignored) { }
    }

    public static void downloadAllMissingSounds(final OkHttpClient okHttpClient) {
        File[] downloadDirFiles = DOWNLOAD_DIR.listFiles();

        // Get set of existing files in our dir - existing sounds will be skipped, unexpected files (not dirs) will be deleted
        Set<String> filesPresent = new HashSet<>();
        if (downloadDirFiles != null && downloadDirFiles.length > 0) {
            Arrays.stream(downloadDirFiles)
                    .filter(file -> !file.isDirectory())
                    .map(File::getName)
                    .filter(filename -> !DELETE_WARNING_FILENAME.equals(filename))
                    .forEach(filesPresent::add);
        }

        // Download any sounds that are not yet present but exist in SoundFiles enum
        SoundFiles[] allSounds = SoundFiles.values();
        for (SoundFiles sound : allSounds) {
            String fileName = sound.getResourceName();
            if (filesPresent.contains(fileName)) {
                filesPresent.remove(fileName);
                continue;
            }

            if (RAW_GITHUB == null) {
                // Hush intellij, it's okay, the potential NPE can't hurt you now
                log.error("Could not download sounds due to an unexpected null RAW_GITHUB value");
                return;
            }
            HttpUrl soundUrl = RAW_GITHUB.newBuilder().addPathSegment(fileName).build();
            Path outputPath = Paths.get(DOWNLOAD_DIR.getPath(), fileName);
            try (Response res = okHttpClient.newCall(new Request.Builder().url(soundUrl).build()).execute()) {
                if (res.body() != null)
                    Files.copy(new BufferedInputStream(res.body().byteStream()), outputPath, StandardCopyOption.REPLACE_EXISTING);
            } catch (IOException e) {
                log.error("Could not download sounds", e);
                return;
            }
        }

        // filesPresent now contains only files in our directory that we weren't expecting
        // (eg. old versions of sounds)
        // We now delete them to avoid cluttering up disk space
        // We leave dirs behind (filesPresent filters them out early on) as we aren't creating those anyway so they won't build up over time
        for (String filename : filesPresent) {
            File toDelete = new File(DOWNLOAD_DIR, filename);
            //noinspection ResultOfMethodCallIgnored
            toDelete.delete();
        }
    }

    public static InputStream getSoundStream(SoundFiles sound) throws FileNotFoundException {
        return new FileInputStream(new File(DOWNLOAD_DIR, sound.getResourceName()));
    }
}
/* BSD 2-Clause License
 * Copyright (c) 2023, Erishion Games LLC <https://github.com/Erishion-Games-LLC>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.erishiongames.memeeffects.sounds;

public enum SoundFiles
{
    MORTAR_PESTLE_BONK("Bonk.wav"),
    ;

    private final String resourceName;

    SoundFiles(String resourceName){
        this.resourceName = resourceName;
    }

    public String getResourceName() {
        return resourceName;
    }

}

/* BSD 2-Clause License
 * Copyright (c) 2023, Erishion Games LLC <https://github.com/Erishion-Games-LLC>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.erishiongames.memeeffects.messages;

import com.erishiongames.memeeffects.MemeEffectsPluginConfig;
import java.util.Objects;
import javax.inject.Inject;
import net.runelite.api.Actor;
import net.runelite.api.MessageNode;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.OverheadTextChanged;
import net.runelite.client.eventbus.Subscribe;

public class MessageManager
{
	@Inject
	private MemeEffectsPluginConfig config;

	@Subscribe(priority = -10.0f)
	public void onOverheadTextChanged(OverheadTextChanged textChanged)
	{
		MessageValues messageValue = getMessageValue(textChanged.getOverheadText());
		if (messageValue == null)
		{
			return;
		}

		if (!shouldEnableMessage(messageValue))
		{
			return;
		}

		String message = getConfigMessage(messageValue);
		Actor actor = textChanged.getActor();
		if (message == null || message.isEmpty())
		{
			actor.setOverheadText("Meme Effects: Message is empty. TEST");
		}
		else
		{
			actor.setOverheadText(message);
		}
	}

	private MessageValues getMessageValue(String message)
	{
		for (MessageValues messageValue : MessageValues.values())
		{
			if (messageValue.getMessage().equals(message))
			{
				return messageValue;
			}
		}
		return null;
	}

	private boolean shouldEnableMessage(MessageValues messageValue)
	{
		switch (messageValue)
		{
			case EXCALIBUR:
				return config.enableExcalibur();
			case DRAGON_BATTLEAXE:
				return config.enableDragonBattleaxe();
			case DRAGON_AXE:
				return config.enableDragonAxe();
			case DRAGON_HARPOON:
				return config.enableDragonHarpoon();
			case DRAGON_PICKAXE:
				return config.enableDragonPick();
			default:
				return false;
		}
	}

	private String getConfigMessage(MessageValues messageValue)
	{
		switch (messageValue) {
			case EXCALIBUR:
				return config.excaliburMessage();
			case DRAGON_BATTLEAXE:
				return config.dBattleaxeMessage();
			case DRAGON_AXE:
				return config.dAxeMessage();
			case DRAGON_HARPOON:
				return config.dHarpoonMessage();
			case DRAGON_PICKAXE:
				return config.dPickMessage();
			default:
				return null;
		}
	}
}

/* BSD 2-Clause License
 * Copyright (c) 2023, Erishion Games LLC <https://github.com/Erishion-Games-LLC>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.erishiongames.memeeffects.messages;

import lombok.Getter;

@Getter
public enum MessageValues
{
	DRAGON_BATTLEAXE("Raarrrrrgggggghhhhhhh!"),
	DRAGON_PICKAXE("Smashing!"),
	DRAGON_HARPOON("Here fishy fishies!"),
	DRAGON_AXE("Chop chop!"),
	EXCALIBUR("For Camelot!"),

	;


	private final String message;

	MessageValues(String message)
	{
		this.message = message;
	}
}

/* BSD 2-Clause License
 * Copyright (c) 2023, Erishion Games LLC <https://github.com/Erishion-Games-LLC>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.erishiongames.memeeffects;

import com.erishiongames.memeeffects.messages.MessageValues;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup(MemeEffectsPlugin.CONFIG_GROUP)
public interface MemeEffectsPluginConfig extends Config
{
	@ConfigSection
	(
		name = "Audio Changer",
		description = "Audio Configuration Values",
		position = 1
	)
		String audioChanger = "Audio Changer";

		@ConfigItem
		(
			keyName = "Volume",
			name = "Volume",
			description = "Adjust how loud the sound effects are",
			position = 0,
			section = audioChanger
		)
			default int Volume() {return 100;}

		@ConfigItem
		(
			keyName = "enableMortarPestleBonk",
			name = "Enable mortar and pestle bonk",
			description = "Enable mortar and pestle bonking sound",
			position = 1,
			section = audioChanger
		)
		default boolean enableMortarPestleBonk() {return true;}



	@ConfigSection
	(
		name = "Text Changer",
		description = "Text Configuration Values",
		position = 2
	)
		String textChanger = "Text Changer";


		//DPick
		@ConfigItem
		(
			keyName = "enableDragonPick",
			name = "Change Dragon Pickaxe message",
			description = "",
			position = 0,
			section = textChanger
		)
		default boolean enableDragonPick() {return true;}
		@ConfigItem
		(
			keyName = "dPickMessage",
			name = "Dragon Pickaxe Message",
			description = "",
			position = 1,
			section = textChanger
		)
		default String dPickMessage() {return MessageValues.DRAGON_PICKAXE.getMessage();}

		//DAxe
		@ConfigItem
			(
				keyName = "enableDragonAxe",
				name = "Change Dragon Axe message",
				description = "",
				position = 2,
				section = textChanger
			)
		default boolean enableDragonAxe() {return true;}
		@ConfigItem
			(
				keyName = "dAxeMessage",
				name = "Dragon Axe Message",
				description = "",
				position = 3,
				section = textChanger
			)
		default String dAxeMessage() {return MessageValues.DRAGON_AXE.getMessage();}


		//DHarpoon
		@ConfigItem
			(
				keyName = "enableDragonHarpoon",
				name = "Change Dragon Harpoon message",
				description = "",
				position = 4,
				section = textChanger
			)
		default boolean enableDragonHarpoon() {return true;}
		@ConfigItem
			(
				keyName = "dHarpoonMessage",
				name = "Dragon Harpoon Message",
				description = "",
				position = 5,
				section = textChanger
			)
		default String dHarpoonMessage() {return MessageValues.DRAGON_HARPOON.getMessage();}

		//DBattleaxe
		@ConfigItem
			(
				keyName = "enableDragonBattleaxe",
				name = "Change Dragon Battleaxe message",
				description = "",
				position = 6,
				section = textChanger
			)
		default boolean enableDragonBattleaxe() {return true;}
		@ConfigItem
			(
				keyName = "dBattleaxeMessage",
				name = "Dragon Battleaxe message",
				description = "",
				position = 7,
				section = textChanger
			)
		default String dBattleaxeMessage() {return MessageValues.DRAGON_BATTLEAXE.getMessage();}

		//Excalibur
		@ConfigItem
			(
				keyName = "enableExcalibur",
				name = "Change Excalibur message",
				description = "",
				position = 8,
				section = textChanger
			)
		default boolean enableExcalibur() {return true;}
		@ConfigItem
			(
				keyName = "excaliburMessage",
				name = "Excalibur Message",
				description = "",
				position = 9,
				section = textChanger
			)
		default String excaliburMessage() {return MessageValues.EXCALIBUR.getMessage();}

//		//Custom Changer
//		@ConfigItem
//			(
//				keyName = "enableCustomChanger",
//				name = "Change Custom message",
//				description = "",
//				position = 10,
//				section = textChanger
//			)
//		default boolean enableCustomChanger() {return true;}
//		@ConfigItem
//			(
//				keyName = "messageToReplace",
//				name = "Message To Replace",
//				description = "",
//				position = 11,
//				section = textChanger
//			)
//		default String messageToReplace() {return "Set message to replace here";}
//		@ConfigItem
//			(
//				keyName = "customMessageReplacement",
//				name = "Custom Message Replacement",
//				description = "",
//				position = 12,
//				section = textChanger
//			)
//		default String customMessageReplacement() {return "Set the custom message replacement here";}
}
