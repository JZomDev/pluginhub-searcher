package com.vengeancehelper;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class VengeancePluginTest
{
    public static void main(String[] args) throws Exception
    {
        ExternalPluginManager.loadBuiltin(VengeanceHelperPlugin.class);
        RuneLite.main(args);
    }
}

package com.vengeancehelper;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Units;

@ConfigGroup("vengeancehelper")
public interface VengeanceHelperConfig extends Config
{
	@ConfigItem(
			keyName = "shouldNotify",
			name = "Notify when vengeance expires",
			description = "Sends a notification once the vengeance needs to be recast."
	)

	default boolean shouldNotify()
	{
		return true;
	}

	@ConfigItem(
			keyName = "shouldFlash",
			name = "Flash the Reminder Box",
			description = "Makes the reminder box flash."
	)
	default boolean shouldFlash() { return false; }

	@ConfigItem(
			keyName = "vengeanceTimeoutSeconds",
			name = "Timeout Vengeance Box",
			description = "The duration of time before the vengeance box disappears."
	)
	@Units(Units.SECONDS)
	default int vengeanceTimeout()
	{
		return 180;
	}

	@ConfigItem(
			keyName = "onlyLunar",
			name = "Only on Lunar Spellbook",
			description = "Only display the reminder box when on the Lunar spellbook"
	)
	default boolean onlyLunar() { return true; }
}

package com.vengeancehelper;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.Notifier;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;
import java.time.Duration;
import java.time.Instant;

@Slf4j
@PluginDescriptor(
		name = "Vengeance Helper"
)
public class VengeanceHelperPlugin extends Plugin {
	@Inject
	private Client client;

	@Inject
	private Notifier notifier;

	@Inject
	private VengeanceHelperOverlay overlay;

	@Inject
	private VengeanceHelperConfig config;

	@Inject
	private OverlayManager overlayManager;

	private Instant overlayLastDisplayed;
	private static final int SPELLBOOK_VARBIT = 4070;
	private static final int LUNAR_SPELLBOOK = 2;

	@Override
	protected void startUp() throws Exception
	{
	}

	@Override
	protected void shutDown() throws Exception
	{
		clearOverlay();
	}

	@Subscribe
	public void onGameTick(GameTick gameTick)
	{
		if (config.onlyLunar() && client.getVarbitValue(SPELLBOOK_VARBIT) != LUNAR_SPELLBOOK)
		{
			clearOverlay();
		}
		if (overlayLastDisplayed != null)
		{
			Duration timeoutOverlay = Duration.ofSeconds(config.vengeanceTimeout());
			Duration sinceLastOverlayDisplay = Duration.between(overlayLastDisplayed, Instant.now());
			if (sinceLastOverlayDisplay.compareTo(timeoutOverlay) >= 0)
			{
				clearOverlay();
			}
		}
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		if (event.getVarbitId() == Varbits.VENGEANCE_ACTIVE || event.getVarbitId() == Varbits.VENGEANCE_COOLDOWN)
		{
			boolean isVengeanceActive = client.getVarbitValue(Varbits.VENGEANCE_ACTIVE) == 1;
			boolean isVengeanceCastable = client.getVarbitValue(Varbits.VENGEANCE_COOLDOWN) == 0;
			if (!isVengeanceActive && isVengeanceCastable)
			{
				if (config.onlyLunar() && client.getVarbitValue(SPELLBOOK_VARBIT) != LUNAR_SPELLBOOK)
				{
					return;
				}
				overlayManager.add(overlay);
				if(config.shouldNotify())
				{
					notifier.notify("You need to cast vengeance!");
				}
				overlayLastDisplayed = Instant.now();
			}
			else
			{
				clearOverlay();
			}
		}
	}

	public void clearOverlay()
	{
		overlayManager.remove(overlay);
		overlayLastDisplayed = null;
	}

	@Provides
	VengeanceHelperConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(VengeanceHelperConfig.class);
	}
}

package com.vengeancehelper;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

public class VengeanceHelperOverlay extends OverlayPanel {

    private static final Color FOCUS = new Color(255, 0, 0, 150);

    private final VengeanceHelperConfig config;
    private final Client client;

    @Inject
    private VengeanceHelperOverlay(VengeanceHelperConfig config, Client client)
    {
        this.config = config;
        this.client = client;
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        panelComponent.getChildren().clear();

        panelComponent.getChildren().add((LineComponent.builder())
                .left("Cast Vengeance!")
                .build());

        if (config.shouldFlash()) {
            if (client.getGameCycle() % 40 >= 20)
            {
                panelComponent.setBackgroundColor(getPreferredColor());
            } else
            {
                panelComponent.setBackgroundColor(FOCUS);
            }
        } else {
            panelComponent.setBackgroundColor(FOCUS);
        }

        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
        return panelComponent.render(graphics);
    }
}

