package com.GameTickInfo;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class GameTickInfoTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(GameTickInfoPlugin.class);
		RuneLite.main(args);
	}
}
package com.GameTickInfo;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import javax.inject.Inject;
import java.awt.*;

public class GameTickCycleOverlay extends OverlayPanel{
    private final GameTickInfoConfig config;
    private final Client client;
    private final PanelComponent GameTickCyclePanelComponent = new PanelComponent();



    @Inject
    private GameTickCycleOverlay(GameTickInfoConfig config, Client client)
    {
        this.config = config;
        this.client = client;
        setPosition(OverlayPosition.TOP_LEFT);
        isResizable();
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        String timeToDisplay = String.valueOf(GameTickInfoPlugin.timeSinceCycleStart);
        if(config.startCountAtZeroToggle()){
            timeToDisplay = String.valueOf(GameTickInfoPlugin.timeSinceCycleStart - 1);
        }
        GameTickCyclePanelComponent.getChildren().clear();
        if( config.displayGameTicksSinceCycleStart()){
            GameTickCyclePanelComponent.getChildren().add(TitleComponent.builder()
                    .text(timeToDisplay)
                    .color(config.gameTicksCycleColor())
                    .build()
            );
            GameTickCyclePanelComponent.setPreferredSize(new Dimension(graphics.getFontMetrics().stringWidth(String.valueOf(GameTickInfoPlugin.timeSinceCycleStart))+10,0));
        }
        return GameTickCyclePanelComponent.render(graphics);
    }

}

package com.GameTickInfo;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.api.events.ClientTick;
import net.runelite.api.events.GameTick;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.chat.ChatCommandManager;
import net.runelite.client.input.KeyListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

@Slf4j
@PluginDescriptor(
	name = "Game Tick Info",
	description = "Displays game tick counters and lets you mark tiles to track laps"
)
public class GameTickInfoPlugin extends Plugin implements KeyListener
{
	public static int timeOnTile = 0;
	public static int gameTickOnTile = 0;
	public static int timeSinceCycleStart;
	public static int lapStartTime=-1;
	public static int currentLapTime=-1;
	public static int previousLap = -1;
	public static int totalLaps = 0;
	public final List<GameTickTile> rememberedTiles = new ArrayList<>();

	private GameTickTile previousTile;
	private GameTickTile currentTile;
	private boolean shiftHeld = false;

	@Inject
	private Client client;
	@Inject
	private ChatCommandManager chatCommandManager;
	@Inject
	private GameTickInfoConfig config;
	@Inject
	private OverlayManager overlayManager;
	@Inject
	private GameTicksOnTileOverlay gameTicksOnTileOverlay;
	@Inject
	private GameTickLapsOverlay gameTickLapsOverlay;
	@Inject
	private MarkedTilesOverlay markedTilesOverlay;
	@Inject
	private GameTickCycleOverlay gameTickCycleOverlay;


	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(markedTilesOverlay);
		overlayManager.add(gameTickLapsOverlay);
		overlayManager.add(gameTicksOnTileOverlay);
		overlayManager.add(gameTickCycleOverlay);
		client.getCanvas().addKeyListener(this);
	}



	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(gameTicksOnTileOverlay);
		overlayManager.remove(gameTickLapsOverlay);
		overlayManager.remove(markedTilesOverlay);
		overlayManager.remove(gameTickCycleOverlay);
		client.getCanvas().removeKeyListener(this);
	}

	@Override
	public void keyTyped(KeyEvent e) {

	}

	@Override
	public void keyPressed(KeyEvent e) {
		if (e.getKeyCode() == KeyEvent.VK_SHIFT) {
			shiftHeld = true;
		}
	}

	@Override
	public void keyReleased(KeyEvent e) {
		if (e.getKeyCode() == KeyEvent.VK_SHIFT) {
			shiftHeld = false;
		}
	}

	public Collection<GameTickTile> getRememberedTiles(){
		return this.rememberedTiles;
	}
	private void resetCurrentLapTime(){
		lapStartTime = -1;
		currentLapTime = -1;
	}

	@Subscribe
	public void onClientTick(ClientTick clientTick) {
		//logic for game tick on tile counter
		currentTile = new GameTickTile(client.getLocalPlayer().getWorldLocation());
		if(currentTile.equals(previousTile)){
			timeOnTile = client.getTickCount()-gameTickOnTile-1;
		}
		else{
			timeOnTile = 0;
			gameTickOnTile= client.getTickCount();
		}
		//logic for the lap timer
		if(rememberedTiles.contains(currentTile)){
			if(currentLapTime!=-1){
				previousLap=currentLapTime;
				totalLaps++;
			}
			resetCurrentLapTime();
		}
		//begin lap when you leave the start tile
		if(!rememberedTiles.contains(currentTile)&&rememberedTiles.contains(previousTile)){
			lapStartTime = client.getTickCount();
		}
		if(lapStartTime!=-1){
			currentLapTime = client.getTickCount()-lapStartTime;
		}
		//reset lap counter if there are no start tiles
		if(rememberedTiles.isEmpty()){
			resetCurrentLapTime();
			previousLap = -1;
			totalLaps = 0;
		}
		previousTile=currentTile;
	}
	@Subscribe
	public void onGameTick(GameTick event){
		//Game Tick Cycle Logic
		if(timeSinceCycleStart>=config.gameTicksPerCycle()){
			timeSinceCycleStart = 1;
		}
		else{
			timeSinceCycleStart++;
		}
	}
	@Subscribe
	public void onMenuEntryAdded(MenuEntryAdded event) {
		if(!config.displayGameTickLaps()) return;
		if (shiftHeld&&event.getOption().equals("Walk here")) {
			Tile selectedSceneTile = this.client.getSelectedSceneTile();
			if (selectedSceneTile == null){
				return;
			}
			this.client.createMenuEntry(-1).setOption("Mark/Unmark Start Zone").setTarget("Tile").setType(MenuAction.RUNELITE).onClick((e)->{
				Tile target = this.client.getSelectedSceneTile();
				if(target != null){
					GameTickTile targetGameTickTile = new GameTickTile(target.getWorldLocation()) ;
					if(!rememberedTiles.contains(targetGameTickTile)){
						rememberedTiles.add(targetGameTickTile);
					}
					else{
						rememberedTiles.remove(targetGameTickTile);
					}
				}
			});

		}
	}

	@Provides
	GameTickInfoConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(GameTickInfoConfig.class);
	}
}

package com.GameTickInfo;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.components.TextComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;
import net.runelite.api.MenuAction;
import javax.inject.Inject;
import net.runelite.api.Client;
import java.awt.*;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class GameTickLapsOverlay extends OverlayPanel{
    private final GameTickInfoConfig config;
    private final Client client;
    private final PanelComponent gameTickLapsPanelComponent = new PanelComponent();
    private final GameTickInfoPlugin plugin;



    @Inject
    private GameTickLapsOverlay(GameTickInfoConfig config, Client client, GameTickInfoPlugin plugin)
    {
        this.config = config;
        this.client = client;
        this.plugin = plugin;
        addMenuEntry(MenuAction.RUNELITE_OVERLAY, "Reset", "Game Tick Laps", e -> plugin.rememberedTiles.clear());
        setPosition(OverlayPosition.TOP_LEFT);
        isResizable();
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        gameTickLapsPanelComponent.getChildren().clear();
        if(config.displayGameTickLaps()) {
            String currentLap = String.valueOf(GameTickInfoPlugin.currentLapTime);
            String previousLap = String.valueOf(GameTickInfoPlugin.previousLap);
            String totalLaps = String.valueOf(GameTickInfoPlugin.totalLaps);

            if (currentLap.equals("-1")) {
                currentLap = "~~~";
            }

            gameTickLapsPanelComponent.getChildren().clear();
            if (config.displayGameTickLaps()) {
                gameTickLapsPanelComponent.getChildren().add(TitleComponent.builder()
                        .text("Lap Information")
                        .color(Color.WHITE)
                        .build());
                gameTickLapsPanelComponent.getChildren().add(LineComponent.builder()
                        .left("Current Lap: ")
                        .leftColor(Color.WHITE)
                        .right(currentLap)
                        .rightColor(Color.GREEN)
                        .build());
                if (!previousLap.equals("-1"))
                {
                    gameTickLapsPanelComponent.getChildren().add(LineComponent.builder()
                            .left("Previous Lap: ")
                            .leftColor(Color.WHITE)
                            .rightColor(Color.GREEN)
                            .right(previousLap)
                            .build()
                    );
                }
                if (!totalLaps.equals("0"))
                {
                    gameTickLapsPanelComponent.getChildren().add(LineComponent.builder()
                            .left("Total Laps: ")
                            .leftColor(Color.WHITE)
                            .rightColor(Color.GREEN)
                            .right(totalLaps)
                            .build()
                    );
                }
                gameTickLapsPanelComponent.setPreferredSize(new Dimension(graphics.getFontMetrics()
                        .stringWidth("Previous Lap: ") + 10 + (Math.max(graphics
                        .getFontMetrics()
                        .stringWidth(previousLap), graphics.getFontMetrics().stringWidth(currentLap))), 0));
                }
            }
        return gameTickLapsPanelComponent.render(graphics);
    }
}

package com.GameTickInfo;

import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayUtil;

import javax.inject.Inject;
import java.awt.*;
import java.util.Collection;

public class MarkedTilesOverlay extends Overlay{
    private static final int MAX_DRAW_DISTANCE = 32;

    private final Client client;
    private final GameTickInfoConfig config;
    private final GameTickInfoPlugin plugin;

    @Inject
    private MarkedTilesOverlay(Client client, GameTickInfoConfig config, GameTickInfoPlugin plugin)
    {
        this.client = client;
        this.config = config;
        this.plugin = plugin;
        setPosition(OverlayPosition.DYNAMIC);
        setPriority(OverlayPriority.LOW);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }
    @Override
    public Dimension render(Graphics2D graphics)
    {
        if(config.displayGameTickLaps()) {
            final Collection<GameTickTile> startTiles = plugin.getRememberedTiles();
            if (startTiles.isEmpty()) {
                return null;
            }
            float[] dash1 = {3f,0f,3f};
            Stroke stroke = new BasicStroke((float) config.borderWidth(),BasicStroke.CAP_BUTT,BasicStroke.JOIN_MITER,10,dash1,1);
            for (GameTickTile startTile : startTiles) {
                WorldPoint worldPoint = startTile.getWorldPoint();
                if (worldPoint.getPlane() != client.getPlane()) {
                    continue;
                }
                drawTile(graphics, worldPoint, stroke);
            }
        }
        return null;
    }
    private void drawTile(Graphics2D graphics, WorldPoint point, Stroke stroke)
    {
        WorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();
        if(point.distanceTo(playerLocation)>=MAX_DRAW_DISTANCE)
            {
                return;
            }
        LocalPoint lp = LocalPoint.fromWorld(client, point);
        if (lp == null)
            {
                return;
            }
        Polygon poly = Perspective.getCanvasTilePoly(client,lp);
        if(poly != null){
            OverlayUtil.renderPolygon(graphics,poly,config.markerColor(),stroke);
        }
    }

}


package com.GameTickInfo;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;
import net.runelite.api.MenuAction;
import javax.inject.Inject;
import net.runelite.api.Client;

import java.awt.*;

public class GameTicksOnTileOverlay extends OverlayPanel{
    private final GameTickInfoConfig config;
    private final Client client;
    private final PanelComponent gameTicksOnTilePanelComponent = new PanelComponent();



    @Inject
    private GameTicksOnTileOverlay(GameTickInfoConfig config, Client client)
    {
        this.config = config;
        this.client = client;
        setPosition(OverlayPosition.TOP_LEFT);
        isResizable();
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        gameTicksOnTilePanelComponent.getChildren().clear();
        if( config.displayGameTicksOnTile()){
            String valueToDisplay = String.valueOf(GameTickInfoPlugin.timeOnTile);
            if(!config.startTicksOnTileAtZero()) valueToDisplay = String.valueOf(GameTickInfoPlugin.timeOnTile+1);
            gameTicksOnTilePanelComponent.getChildren().add(TitleComponent.builder()
                    .text(valueToDisplay)
                    .color(config.gameTicksOnTileColor())
                    .build()
            );
            gameTicksOnTilePanelComponent.setPreferredSize(new Dimension(graphics.getFontMetrics().stringWidth(String.valueOf(GameTickInfoPlugin.timeOnTile))+10,0));
        }
        return gameTicksOnTilePanelComponent.render(graphics);
    }

}

package com.GameTickInfo;

import net.runelite.api.coords.WorldPoint;

public class GameTickTile {
    private final WorldPoint worldPoint;

    GameTickTile(WorldPoint worldPoint){
        this.worldPoint = worldPoint;
    }
    public int getX(){
        return worldPoint.getX();
    }
    public int getY(){
        return worldPoint.getY();
    }

    public WorldPoint getWorldPoint() {
        return worldPoint;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        GameTickTile comparedTile = (GameTickTile) obj;
        return this.getX() == comparedTile.getX() && this.getY() == comparedTile.getY();
    }
}

package com.GameTickInfo;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("Game Tick Information")
public interface GameTickInfoConfig extends Config
{
	@ConfigSection(
			name = "Time On Tile",
			description = "Displays a counter for time spent on the current tile",
			position = 0
	)
	String timeOnTileSection = "timeOnTileSection";
	@ConfigItem(
			position = 1,
			keyName = "displayGameTicksOnTile",
			name = "Display Time on Tile",
			description = "Shows how many game ticks you have been on the current tile",
			section = timeOnTileSection
	)
	default boolean displayGameTicksOnTile() { return true; }
	@ConfigItem(
			position = 2,
			keyName = "startTicksOnTileAtZero",
			name = "Start Time on Tile at Zero",
			description = "Starts the time on tile counter at zero instead of one",
			section = timeOnTileSection
	)
	default boolean startTicksOnTileAtZero() { return true; }
	@ConfigItem(
			position = 3,
			keyName = "gameTicksOnTileColor",
			name = "Time on Tile Text Color",
			description = "Chose a color for the game ticks on tile counter",
			section = timeOnTileSection
	)
	default Color gameTicksOnTileColor()
	{
		return Color.GREEN;
	}
	@ConfigSection(
			name = "Custom Game Tick Cycle",
			description = "Display a cycle of game ticks",
			position = 2
	)
	String customGameTickCycle = "customGameTickCycle";
	@ConfigItem(
			position = 1,
			keyName = "displayGameTicksSinceCycleStart",
			name = "Display custom game tick cycle",
			description = "Displays a counter to track game ticks in a set cycle",
			section = customGameTickCycle
	)
	default boolean displayGameTicksSinceCycleStart() { return true; }

	@ConfigItem(
			position = 2,
			keyName = "gameTicksPerCycle",
			name = "Number of Ticks",
			description = "How many ticks to display per cycle",
			section = customGameTickCycle
	)
	default int gameTicksPerCycle() { return 4; }
	@ConfigItem(
			position = 3,
			keyName = "startCountAtZeroToggle",
			name = "Start Tick Cycle at Zero",
			description = "Starts the cycle count at zero instead of one",
			section = customGameTickCycle
	)
	default boolean startCountAtZeroToggle() { return false; }
	@ConfigItem(
			position = 4,
			keyName = "gameTicksCycleColor",
			name = "Tick Cycle Text Color",
			description = "Choose a color for the game tick cycle counter",
			section = customGameTickCycle
	)
	default Color gameTicksCycleColor()
	{
		return Color.CYAN;
	}
	@ConfigSection(
			name = "Game Tick Laps",
			description = "Lets you mark tiles with 'Shift + Right Click' to mark lap start locations, and displays related lap information",
			position = 3
	)
	String gameTickLapsSection = "gameTickLapsSection";
	@ConfigItem(
			position = 1,
			keyName = "displayGameTickLaps",
			name = "Display Lap Information",
			description = "Lets you mark a start location for a lap using 'Shift + Right Click' and tracks time until you pass that location",
			section = gameTickLapsSection
	)
	default boolean displayGameTickLaps() { return false; }

	@ConfigItem(
			position = 2,
			keyName = "markerColor",
			name = "Tile Color",
			description = "The color for lap tiles",
			section = gameTickLapsSection
	)
	default Color markerColor()
	{
		return Color.CYAN;
	}

	@ConfigItem(
			position = 3,
			keyName = "borderWidth",
			name = "Border Width",
			description = "Width of the marked tile border",
			section = gameTickLapsSection
	)
	default double borderWidth()
	{
		return 3;
	}
}

