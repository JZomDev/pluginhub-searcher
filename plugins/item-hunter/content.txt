package org.makingstan;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ItemHunterLauncher
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ItemHunterPlugin.class);
		RuneLite.main(args);
	}
}
package org.makingstan;

import net.runelite.api.Client;
import net.runelite.api.ItemComposition;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;

import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;

public class ItemTemplate extends JPanel {
    JLabel itemName = new JLabel();

    public ItemTemplate(ItemComposition itemComposition, BufferedImage iconImage)
    {
        this.setLayout(new GridBagLayout());
        this.setBackground(ColorScheme.DARK_GRAY_COLOR.darker());

        Dimension itemNameDimension = new Dimension(215, iconImage.getHeight());

        this.itemName.setHorizontalTextPosition(SwingConstants.RIGHT);
        this.itemName.setFont(FontManager.getRunescapeFont());
        this.itemName.setText(itemComposition.getMembersName());
        this.itemName.setIcon(new ImageIcon(iconImage));
        this.itemName.setMaximumSize(itemNameDimension);
        this.itemName.setMinimumSize(itemNameDimension);
        this.itemName.setPreferredSize(itemNameDimension);

        this.setMaximumSize(itemNameDimension);
        this.setMinimumSize(itemNameDimension);
        this.setPreferredSize(itemNameDimension);


        this.add(this.itemName);
    }
}

package org.makingstan;

import java.util.Random;

public class Utils {
    private static Random random = new Random();
    public static int random(int min, int max)
    {
        return random.nextInt(max + 1 - min) + min;
    }
}

package org.makingstan;

public class ConfigElements {
    protected final static String CURRENT_ITEM = "currentItem";
    protected final static String BLOCK_LIST = "blockList";
    protected final static String COMPLETED_LIST = "completedList";
    protected final static String COMPLETED = "completed";
    protected final static String SKIPPED = "skipped";
    protected final static String CONFIG_GROUP = "Item Hunter";
}

package org.makingstan;

import com.google.inject.Provides;

import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

import java.awt.image.BufferedImage;
import java.util.HashSet;

import static org.makingstan.ConfigElements.*;

@Slf4j
@PluginDescriptor(
	name = "Item Hunter"
)
public class ItemHunterPlugin extends Plugin
{
	@Inject
	public Client client;

	@Inject
	public ItemHunterConfig config;

	@Inject
	public ClientToolbar clientToolbar;

	@Inject
	public ClientThread clientThread;

	@Inject
	public ItemManager itemManager;

	@Inject
	public ConfigManager configManager;

	private NavigationButton navButton;
	private ItemHunterPanel panel;

	BufferedImage panelIcon = ImageUtil.loadImageResource(getClass(), "/itemhuntericon48x48.png");

	@Override
	protected void startUp()
	{
		new SaveHandler(configManager);
		this.panel = injector.getInstance(ItemHunterPanel.class);
		new ItemHandler(client, config, itemManager, panel, clientThread);


		navButton = NavigationButton.builder()
			.tooltip("Item Hunter")
			.icon(panelIcon)
			.priority(3)
			.panel(panel)
			.build();
		clientToolbar.addNavigation(navButton);

		Integer itemId = (Integer) SaveHandler.getElement(CURRENT_ITEM, int.class);
		if(SaveHandler.getElement(BLOCK_LIST, HashSet.class) == null)
		{
			configManager.setConfiguration(CONFIG_GROUP, BLOCK_LIST, new HashSet<Integer>());
		}
		if(SaveHandler.getElement(COMPLETED_LIST, HashSet.class) == null)
		{
			configManager.setConfiguration(CONFIG_GROUP, COMPLETED_LIST, new HashSet<Integer>());
		}
		if(SaveHandler.getElement(COMPLETED, boolean.class) == null)
		{
			configManager.setConfiguration(CONFIG_GROUP, COMPLETED, false);
		}
		if(SaveHandler.getElement(SKIPPED, boolean.class) == null)
		{
			configManager.setConfiguration(CONFIG_GROUP, SKIPPED, false);
		}

		if(itemId == null)
		{
			ItemHandler.generateNewItem(false);
		}
		else
		{
			ItemHandler.updateItemUI();
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if(
				event.getGroup().equalsIgnoreCase("Item Hunter") &&
				(event.getNewValue().equalsIgnoreCase("true") || event.getNewValue().equalsIgnoreCase("false")) &&
				(event.getKey().equalsIgnoreCase("Forfeit for skipping items") || event.getKey().equalsIgnoreCase("Hide clear all button"))
		)
		{
			ItemHandler.updateItemUI();
		}
	}

	@Override
	protected void shutDown()
	{
		clientToolbar.removeNavigation(navButton);
	}

	@Provides
	ItemHunterConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ItemHunterConfig.class);
	}
}

package org.makingstan;

import net.runelite.api.Client;
import net.runelite.api.ItemComposition;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.game.ItemManager;

import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.lang.reflect.InvocationTargetException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Objects;

import static org.makingstan.ConfigElements.*;

public class ItemHandler {

    private static Client client;
    private static ItemHunterConfig config;
    private static ItemManager itemManager;
    private static ItemHunterPanel panel;
    private static ClientThread clientThread;

    public ItemHandler(Client client, ItemHunterConfig config, ItemManager itemManager, ItemHunterPanel panel, ClientThread clientThread)
    {
        ItemHandler.clientThread = clientThread;
        ItemHandler.panel = panel;
        ItemHandler.itemManager = itemManager;
        ItemHandler.config = config;
        ItemHandler.client = client;
    }


    private static int getRandomValidItemId()
    {
        boolean itemIsValid = false;
        int itemId = 0;

        while(!itemIsValid)
        {
            itemId = Utils.random(0, client.getItemCount());

            ItemComposition composition = client.getItemDefinition(itemId);

            HashSet<Integer> blockList = (HashSet<Integer>)SaveHandler.getElement(BLOCK_LIST, HashSet.class);
            HashSet<Integer> completedList = (HashSet<Integer>)SaveHandler.getElement(COMPLETED_LIST, HashSet.class);

            // convert the name to a UTF8 valid string, otherwise you'll have weird invisable characters and that could mess up the conditions for a valid item
            String itemName = new String(composition.getMembersName().getBytes(StandardCharsets.UTF_8));

            HashSet<String> completedListNames = new HashSet<>();

            for (Integer integer : completedList) {
                String name = new String(client.getItemDefinition(integer).getMembersName().getBytes(StandardCharsets.UTF_8));
                completedListNames.add(name);
            }


            if(
                    // don't generate any items that don't have a main, are named null or whatever
                    composition.getName().trim().length() > 0 &&
                            !itemName.trim().equalsIgnoreCase("null") &&

                            // don't generate duplicate clue scroll items, as there are alot of duplicate clue scroll ids
                            !(completedListNames.contains(itemName) && itemName.toLowerCase().startsWith("clue scroll")) &&

                            //We don't want to regenerate any blocked or completed items
                            !blockList.contains(itemId) &&
                            !completedList.contains(itemId)
            )
            {
                if(config.excludeNotedItems())
                {
                    if(composition.getNote() == -1) itemIsValid = true;
                }
                else
                {
                    itemIsValid = true;
                }
            }
        }

        return itemId;
    }

    // Generates a new item
    public static void generateNewItem(boolean checkIfCompleted)
    {
        if(checkIfCompleted)
        {
            if((isCurrentItemCompleted() || isCurrentItemSkipped()))
            {
                if(config.dialogConfirmation())
                {
                    int newItemConfirm = JOptionPane.showConfirmDialog(null,
                            "Are you sure you want to generate a new item?", "Item Hunter",
                            JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null);

                    if(newItemConfirm == JOptionPane.YES_OPTION)
                    {
                        newItem();
                    }
                }
                else
                {
                    newItem();
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "You have to complete or skip an item before generating another!");
            }

        }
        else
        {
            newItem();
        }
    }

    private static void newItem()
    {
        clientThread.invokeLater(new Runnable() {
            @Override
            public void run() {
                int itemId = getRandomValidItemId();

                SaveHandler.setElement(CURRENT_ITEM, itemId);
                SaveHandler.setElement(COMPLETED, false);
                SaveHandler.setElement(SKIPPED, false);

                updateItemUI();
            }
        });
    }

    public static void unobtainableItem()
    {
        // We don't want to flag an item as unobtainable if it's already completed or skipped
        if(isCurrentItemCompleted() || isCurrentItemSkipped())
        {
            JOptionPane.showConfirmDialog(null,
                    "You can't flag an item as unobtainable if you've completed or skipped it!", "Item Hunter",
                    JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE, null);
            return;
        }

        if(config.dialogConfirmation())
        {
            int confirmUnobtainable = JOptionPane.showConfirmDialog(null,
                    "Are you sure you want to set this item to unobtainable? It will be added to your block list and a new item will be generated.", "Item Hunter",
                    JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null);

            // If the user didn't click the yes option, we don't let the unobtainable item event go through the current item.
            if(confirmUnobtainable != JOptionPane.YES_OPTION) return;
        }


        SaveHandler.addItemToList(BLOCK_LIST, (Integer) SaveHandler.getElement(CURRENT_ITEM, int.class));
        ItemHandler.generateNewItem(false);
    }

    public static void skipItem()
    {
        /* Don't skip an item if you have completed it */
        if(isCurrentItemCompleted() || isCurrentItemSkipped()) {
            JOptionPane.showConfirmDialog(null,
                    "You can't skip an item if you've completed or skipped it!", "Item Hunter",
                    JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE, null);
            return;
        }

        if(config.dialogConfirmation())
        {
            int confirmSkip = JOptionPane.showConfirmDialog(null,
                    "Are you sure you want to skip this item?", "Item Hunter",
                    JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null);

            // If the user didn't click the yes option, we don't skip the current item.
            if(confirmSkip != JOptionPane.YES_OPTION) return;
        }

        // Forfeit skipped items if the user wishes to do so
        if(config.forfeitSkippedItems())
        {
            HashSet<Integer> completedList = (HashSet<Integer>)SaveHandler.getElement(COMPLETED_LIST, HashSet.class);
            boolean shouldContinue = true;

            if(completedList.size() == 0)
            {
                JOptionPane.showConfirmDialog(null,
                        "You can't forfeit an item if you don't have any completed items!", "Item Hunter",
                        JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE, null);
                shouldContinue = false;
            }

            if(shouldContinue)
            {
                int randomIndex = Utils.random(0, completedList.size()-1);
                int itemIdToBeForfeited = 0;

                int i = 0;
                for(int itemId : completedList)
                {
                    if(i == randomIndex)
                    {
                        itemIdToBeForfeited = itemId;

                        completedList.remove(itemIdToBeForfeited);
                        int finalItemIdToBeForfeited = itemIdToBeForfeited;
                        clientThread.invoke(() -> {
                            try {
                                ItemComposition composition = client.getItemDefinition(finalItemIdToBeForfeited);
;
                                SwingUtilities.invokeAndWait(() -> {
                                    // Create an item popup of what item you forfeited
                                    JOptionPane.showConfirmDialog(null,
                                            "Your forfeited your "+composition.getMembersName()+"!", "Item Hunter",
                                            JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE, null);
                                });
                            } catch (InterruptedException | InvocationTargetException e) {
                                throw new RuntimeException(e);
                            }
                        });

                        break;
                    }
                    i++;
                }

                // update out completed list to the completed list without our forfeited item
                SaveHandler.setElement(COMPLETED_LIST, completedList);
            }
        }


        // If the user wants to block skipped items, let's do that
        if(config.blockSkippedItems())
        {
            SaveHandler.addItemToList(BLOCK_LIST, (Integer) SaveHandler.getElement(CURRENT_ITEM, int.class));
        }

        // Set our skipped variable to true, because this item has been skipped
        SaveHandler.setElement(SKIPPED, true);

        // Update our ui to be able to see the skipped change
        updateItemUI();
    }

    public static void clearCompletedItems()
    {
        String confirmClearAll = JOptionPane.showInputDialog(null,
                "Are you really sure you want to clear all of your completed items? Type \"yes\" to confirm.");


        // Don't continue if they didn't type "yes"
        // Do the null check to avoid a NPE
        if(confirmClearAll != null)
        {
            if(!confirmClearAll.equalsIgnoreCase("yes")) return;
        }
        else
        {
            return;
        }

        SaveHandler.setElement(COMPLETED_LIST, new HashSet<Integer>());

        updateItemUI();
    }

    public static void completeItem()
    {
        /* Don't complete an item if you have skipped it */
        if(isCurrentItemSkipped() || isCurrentItemCompleted()) {
            JOptionPane.showConfirmDialog(null,
                    "You can't complete an item if you've skipped or completed it!", "Item Hunter",
                    JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE, null);
            return;
        }

        if(config.dialogConfirmation())
        {
            int confirmComplete = JOptionPane.showConfirmDialog(null,
                    "Are you sure you want to complete this item?", "Item Hunter",
                    JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null);

            // Don't continue if they didn't click YES
            if(confirmComplete != JOptionPane.YES_OPTION) return;
        }

        // We now know that the user can and wants to complete this item,
        // set our completed variable to true and add our item to the completed list so it won't be generated again
        SaveHandler.addItemToList(COMPLETED_LIST, (Integer) SaveHandler.getElement(CURRENT_ITEM, int.class));
        SaveHandler.setElement(COMPLETED, true);

        // Update our ui to show the new completed value
        updateItemUI();
    }

    public static boolean isCurrentItemCompleted()
    {
        return (boolean)SaveHandler.getElement(COMPLETED, boolean.class);
    }

    public static boolean isCurrentItemSkipped()
    {
        return (boolean)SaveHandler.getElement(SKIPPED, boolean.class);
    }

    public static void updateItemUI()
    {
        int itemId = (int)SaveHandler.getElement(CURRENT_ITEM, int.class);

        clientThread.invoke(() -> {
            ItemComposition itemComposition = client.getItemDefinition(itemId);
            BufferedImage iconImage = itemManager.getImage(itemId);

            panel.updateItemUI(itemComposition, iconImage);
        });
    }
}

package org.makingstan;

import net.runelite.client.config.ConfigManager;

import java.util.HashSet;

import static org.makingstan.ConfigElements.CONFIG_GROUP;

public class SaveHandler {

    private static ConfigManager configManager;

    public SaveHandler(ConfigManager configManager)
    {
        SaveHandler.configManager = configManager;
    }

    public static void addItemToList(String listName, int itemId)
    {
        HashSet<Integer> list = (HashSet<Integer>) getElement(listName, HashSet.class);

        list.add(itemId);

        configManager.setConfiguration(CONFIG_GROUP, listName, list);
    }

    public static void setElement(String elementName, Object value)
    {
       configManager.setConfiguration(CONFIG_GROUP, elementName, value);
    }

    public static Object getElement(String elementName, Class<?> clazz)
    {
        if(clazz == HashSet.class)
        {
            // The configmanager doesn't support storing the hashsets type, and i really wanne store in a hashmap so im just gonna accept that i have to do this
            // https://github.com/runelite/runelite/blob/master/runelite-client/src/main/java/net/runelite/client/config/ConfigManager.java
            HashSet<Integer> hashset = new HashSet<>();
            String hashSetString = configManager.getConfiguration(CONFIG_GROUP, elementName, clazz);

            if(hashSetString == null) return null;

            String bracketsRemoved = hashSetString.replaceAll("\\[", "").replaceAll("]", "");


            String[] commaSeperated = bracketsRemoved.split(",");


            for(String element : commaSeperated)
            {
                if(!element.equalsIgnoreCase(""))
                {
                    int elementInt = Integer.parseInt(element);
                    hashset.add(elementInt);
                }
            }

            return hashset;
        }
        return configManager.getConfiguration(CONFIG_GROUP, elementName, clazz);
    }
}

package org.makingstan;

import lombok.SneakyThrows;
import net.runelite.api.ItemComposition;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;

public class ItemHunterPanel extends PluginPanel {
    JLabel itemStatus = new JLabel();
    JLabel itemIconLabel = new JLabel();
    JLabel itemName = new JLabel();
    JLabel itemId = new JLabel();

    JButton skipButton = new JButton( );
    JButton completedButton = new JButton();
    JButton newItemButton = new JButton();
    JButton unobtainableItemButton = new JButton();

    JPanel itemInformation = new JPanel();
    JPanel itemShowCasePanel = new JPanel();
    JPanel controlButtonsPanel = new JPanel();

    JPanel itemPanel = new JPanel();
    JPanel completedItemsPanel = new JPanel();
    JPanel columnHeader = new JPanel();

    JScrollPane completedItemsPane = new JScrollPane();
    JButton clearAllButton = new JButton("Clear All");


    BufferedImage skipImage = ImageUtil.loadImageResource(getClass(), "/skip.png");
    BufferedImage completedIcon = ImageUtil.loadImageResource(getClass(), "/complete.png");
    BufferedImage newItemIcon = ImageUtil.loadImageResource(getClass(), "/newitem.png");
    BufferedImage unobtainableIcon = ImageUtil.loadImageResource(getClass(), "/unobtainable.png");

    ItemHunterPlugin itemGeneratorPlugin;

    @Inject
    public ItemHunterPanel(ItemHunterPlugin itemGeneratorPlugin) {
        this.itemGeneratorPlugin = itemGeneratorPlugin;

        setLayout(new BorderLayout());
        setBackground(ColorScheme.DARK_GRAY_COLOR);

        itemStatus.setFont(FontManager.getRunescapeBoldFont());
        itemName.setFont(FontManager.getRunescapeBoldFont());
        itemId.setFont(FontManager.getRunescapeFont());

        itemName.setHorizontalAlignment(JLabel.CENTER);
        itemId.setHorizontalAlignment(JLabel.CENTER);

        itemInformation.setLayout(new GridBagLayout());

        GridBagConstraints itemInformationConstraints = new GridBagConstraints();
        itemInformationConstraints.gridy = 0;
        itemInformation.add(itemName, itemInformationConstraints);
        itemInformationConstraints.gridy = 1;
        itemInformation.add(itemId, itemInformationConstraints);

        skipButton.setIcon(new ImageIcon(skipImage));
        skipButton.setFocusPainted(false);
        skipButton.setToolTipText("Skip Item");
        skipButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ItemHandler.skipItem();
            }
        });


        completedButton.setIcon(new ImageIcon(completedIcon));
        completedButton.setFocusPainted(false);
        completedButton.setToolTipText("Complete Item");
        completedButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ItemHandler.completeItem();
            }
        });

        newItemButton.setIcon(new ImageIcon(newItemIcon));
        newItemButton.setFocusPainted(false);
        newItemButton.setToolTipText("New Item");
        newItemButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ItemHandler.generateNewItem(true);
            }
        });

        unobtainableItemButton.setIcon(new ImageIcon(unobtainableIcon));
        unobtainableItemButton.setFocusPainted(false);
        unobtainableItemButton.setToolTipText("Unobtainable Item");
        unobtainableItemButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ItemHandler.unobtainableItem();
            }
        });

        clearAllButton.setFocusPainted(false);
        clearAllButton.setToolTipText("Clear Items");
        clearAllButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ItemHandler.clearCompletedItems();
            }
        });

        itemShowCasePanel.setLayout(new GridBagLayout());
        GridBagConstraints itemShowCasePanelConstraints = new GridBagConstraints();
        itemShowCasePanelConstraints.gridy = 0;
        itemShowCasePanel.add(itemIconLabel, itemShowCasePanelConstraints);
        itemShowCasePanelConstraints.gridy = 1;
        itemShowCasePanel.add(itemInformation, itemShowCasePanelConstraints);

        controlButtonsPanel.setLayout(new FlowLayout(FlowLayout.CENTER));

        controlButtonsPanel.add(completedButton);
        controlButtonsPanel.add(newItemButton);
        controlButtonsPanel.add(skipButton);
        controlButtonsPanel.add(unobtainableItemButton);

        itemPanel.setLayout(new BorderLayout());
        itemPanel.add(itemStatus, BorderLayout.NORTH);
        itemPanel.add(itemShowCasePanel, BorderLayout.CENTER);
        itemPanel.add(controlButtonsPanel, BorderLayout.SOUTH);

        completedItemsPanel.setLayout(new BoxLayout(completedItemsPanel, BoxLayout.Y_AXIS));

        columnHeader.add(new JLabel("Completed Items: ", SwingConstants.LEFT));

        JViewport viewPort = new JViewport();
        viewPort.setView(columnHeader);
        viewPort.setFont(FontManager.getRunescapeBoldFont());

        completedItemsPane.setColumnHeader(viewPort);
        completedItemsPane.setViewportView(completedItemsPanel);
        completedItemsPane.getViewport().setPreferredSize(new Dimension(this.getWidth(), 300));
        completedItemsPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        completedItemsPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);

        
        add(itemPanel, BorderLayout.NORTH);
        add(completedItemsPane, BorderLayout.SOUTH);
    }

    @SneakyThrows
    public void updateItemUI(ItemComposition itemComposition, BufferedImage itemIcon)
    {
        itemStatus.setText("Current Item to Obtain: ");

        if(ItemHandler.isCurrentItemSkipped())
        {
            itemStatus.setText("Item Skipped");
        }
        else if(ItemHandler.isCurrentItemCompleted())
        {
            itemStatus.setText("Item Completed");
        }


        itemIconLabel.setIcon(new ImageIcon(resize(itemIcon, itemIcon.getWidth()*3, itemIcon.getHeight()*3)));

        itemName.setText(itemComposition.getMembersName());
        itemId.setText("Id: "+itemComposition.getId());



        completedItemsPanel.removeAll();
        completedItemsPane.getViewport().remove(completedItemsPane.getViewport().getView());

        SwingUtilities.invokeAndWait(() -> {
            boolean containsClearAllButton = false;

            for(Component component: columnHeader.getComponents())
            {
                if(component instanceof JButton)
                {
                    containsClearAllButton = true;
                    break;
                }
            }

            if(containsClearAllButton && itemGeneratorPlugin.config.hideClearCompletedItems())
            {
                columnHeader.remove(clearAllButton);
            }
            else if(!containsClearAllButton && !itemGeneratorPlugin.config.hideClearCompletedItems())
            {
                columnHeader.add(clearAllButton);
            }
        });


        for(int completedItem : (HashSet<Integer>)SaveHandler.getElement(ConfigElements.COMPLETED_LIST, HashSet.class))
        {
            itemGeneratorPlugin.clientThread.invoke(new Runnable() {
                @SneakyThrows
                @Override
                public void run() {
                    ItemComposition composition = itemGeneratorPlugin.client.getItemDefinition(completedItem);
                    BufferedImage iconImage = itemGeneratorPlugin.itemManager.getImage(completedItem);

                    SwingUtilities.invokeAndWait(() -> completedItemsPanel.add(new ItemTemplate(composition, iconImage)));
                }
            });
        }

        completedItemsPane.setViewportView(completedItemsPanel);

        this.revalidate();
    }

    // I "borrowed" this piece of code
    /* https://stackoverflow.com/questions/9417356/bufferedimage-resize */
    public static BufferedImage resize(BufferedImage img, int newW, int newH) {
        Image tmp = img.getScaledInstance(newW, newH, Image.SCALE_SMOOTH);
        BufferedImage dimg = new BufferedImage(newW, newH, BufferedImage.TYPE_INT_ARGB);

        Graphics2D g2d = dimg.createGraphics();
        g2d.drawImage(tmp, 0, 0, null);
        g2d.dispose();

        return dimg;
    }
}
package org.makingstan;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("Item Hunter")
public interface ItemHunterConfig extends Config
{

	@ConfigItem(
			keyName = "Exclude noted items",
			name = "Exclude noted items",
			description = "Excludes noted items from generating."
	)
	default boolean excludeNotedItems() {
		return true;
	}

	@ConfigItem(
			keyName = "Block skipped items",
			name = "Block skipped items",
			description = "Blocks skipped items."
	)
	default boolean blockSkippedItems()
	{
		return false;
	}

	@ConfigItem(
			keyName = "Forfeit for skipping items",
			name = "Forfeit for skipping items",
			description = "Enables the forfeiting of skipped items."
	)
	default boolean forfeitSkippedItems()
	{
		return true;
	}

	@ConfigItem(
			keyName = "Hide clear all button",
			name = "Hide clear all button",
			description = "Hides the clear all button."
	)
	default boolean hideClearCompletedItems()
	{
		return true;
	}

	@ConfigItem(
			keyName = "Dialog confirmation",
			name = "Dialog confirmation",
			description = "Enables the popping up of a dialog."
	)
	default boolean dialogConfirmation()
	{
		return true;
	}


}

