package com.zom.dense_essence;

import java.awt.Color;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("zomDenseEssence")
public interface DenseEssenceConfig extends Config
{
	@ConfigItem(
		keyName = "showDenseRunestoneIndicator",
		name = "Show dense runestone indicator",
		description = "Configures whether to display an indicator when dense runestone is ready to be mined",
		position = 1
	)
	default boolean showDenseRunestoneIndicator()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showDenseRunestoneClickbox",
		name = "Show dense runestone click box",
		description = "Configures whether to display a click box when dense runestone is ready to be mined",
		position = 2
	)
	default boolean showDenseRunestoneClickbox()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showDenseRunestoneClickboxAvailable",
		name = "Available Color",
		description = "Configures Color of available dense runestone",
		position = 3
	)
	default Color showDenseRunestoneClickboxAvailable()
	{
		return Color.GREEN;
	}

	@ConfigItem(
		keyName = "showDenseRunestoneClickboxUnavailable",
		name = "Unavailable Color",
		description = "Configures color of unavailable dense runestone",
		position = 4
	)
	default Color showDenseRunestoneClickboxUnavailable()
	{
		return Color.RED;
	}

	@ConfigItem(
			keyName = "highlightAltarClickbox",
			name = "Highlight Altars",
			description = "Highlights Blood/Soul Altars when there are dark essence fragments/blocks in inventory",
			position = 5
	)
	default boolean highlightAltarClickbox()
	{
		return true;
	}
}

package com.zom.dense_essence;

import com.google.inject.Provides;
import java.awt.Color;
import java.util.Objects;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.GameState;
import net.runelite.api.InventoryID;
import net.runelite.api.ItemContainer;
import net.runelite.api.ItemID;
import net.runelite.api.NullObjectID;
import net.runelite.api.ObjectID;
import net.runelite.api.events.GameObjectDespawned;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Dense Runecrafting"
)
public class DenseEssencePlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private DenseEssenceConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private DenseRunestoneOverlay denseRunestoneOverlay;

	private static final int DENSE_RUNESTONE_SOUTH_ID = NullObjectID.NULL_10796;
	private static final int DENSE_RUNESTONE_NORTH_ID = NullObjectID.NULL_8981;

	@Getter
	private GameObject denseRunestoneSouth;

	@Getter
	private GameObject denseRunestoneNorth;

	@Getter
	private GameObject soulAltar;

	@Getter
	private GameObject bloodAltar;

	@Getter
	private Color clickboxBorderColorMinable;
	@Getter
	private Color clickboxFillColorMinable;
	@Getter
	private Color clickboxBorderHoverColorMinable;

	@Getter
	private Color clickboxBorderColorDepleted;
	@Getter
	private Color clickboxFillColorDepleted;
	@Getter
	private Color clickboxBorderHoverColorDepleted;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(denseRunestoneOverlay);
		clickboxBorderColorMinable = config.showDenseRunestoneClickboxAvailable();
		clickboxFillColorMinable = new Color(clickboxBorderColorMinable.getRed(), clickboxBorderColorMinable.getGreen(), clickboxBorderColorMinable.getBlue(), 50);
		clickboxBorderHoverColorMinable = clickboxBorderColorMinable.darker();

		clickboxBorderColorDepleted = config.showDenseRunestoneClickboxUnavailable();
		clickboxFillColorDepleted = new Color(clickboxBorderColorDepleted.getRed(), clickboxBorderColorDepleted.getGreen(), clickboxBorderColorDepleted.getBlue(), 50);
		clickboxBorderHoverColorDepleted = clickboxBorderColorDepleted.darker();
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (event.getGroup().equals("zomDenseEssence"))
		{
			clickboxBorderColorMinable = config.showDenseRunestoneClickboxAvailable();
			clickboxFillColorMinable = new Color(clickboxBorderColorMinable.getRed(), clickboxBorderColorMinable.getGreen(), clickboxBorderColorMinable.getBlue(), 50);
			clickboxBorderHoverColorMinable = clickboxBorderColorMinable.darker();

			clickboxBorderColorDepleted = config.showDenseRunestoneClickboxUnavailable();
			clickboxFillColorDepleted = new Color(clickboxBorderColorDepleted.getRed(), clickboxBorderColorDepleted.getGreen(), clickboxBorderColorDepleted.getBlue(), 50);
			clickboxBorderHoverColorDepleted = clickboxBorderColorDepleted.darker();
		}
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(denseRunestoneOverlay);
		denseRunestoneNorth = null;
		denseRunestoneSouth = null;
		soulAltar = null;
		bloodAltar = null;

		clickboxFillColorMinable = null;
		clickboxBorderColorMinable = null;
		clickboxBorderHoverColorMinable = null;
		clickboxBorderColorDepleted = null;
		clickboxFillColorDepleted = null;
		clickboxBorderHoverColorDepleted = null;

	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		GameState gameState = event.getGameState();
		if (gameState == GameState.LOADING)
		{
			denseRunestoneNorth = null;
			denseRunestoneSouth = null;
			bloodAltar = null;
			soulAltar = null;
		}
	}

	@Provides
	DenseEssenceConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(DenseEssenceConfig.class);
	}

	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned event)
	{
		GameObject obj = event.getGameObject();
		int id = obj.getId();

		switch (id)
		{
			case DENSE_RUNESTONE_SOUTH_ID:
				denseRunestoneSouth = obj;
				break;
			case DENSE_RUNESTONE_NORTH_ID:
				denseRunestoneNorth = obj;
				break;
			case ObjectID.SOUL_ALTAR:
				soulAltar = obj;
				break;
			case ObjectID.BLOOD_ALTAR:
				bloodAltar = obj;
				break;
		}
	}

	@Subscribe
	public void onGameObjectDespawned(GameObjectDespawned event)
	{
		switch (event.getGameObject().getId())
		{
			case DENSE_RUNESTONE_SOUTH_ID:
				denseRunestoneSouth = null;
				break;
			case DENSE_RUNESTONE_NORTH_ID:
				denseRunestoneNorth = null;
				break;
			case ObjectID.SOUL_ALTAR:
				soulAltar = null;
				break;
			case ObjectID.BLOOD_ALTAR:
				bloodAltar = null;
				break;
		}
	}

	public boolean hasDarkEssence()
	{
		final ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
		return inventory != null && (inventory.contains(ItemID.DARK_ESSENCE_FRAGMENTS) || inventory.contains(ItemID.DARK_ESSENCE_BLOCK));
	}
}

package com.zom.dense_essence;

import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Shape;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.Point;
import net.runelite.api.Skill;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.game.SkillIconManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

public class DenseRunestoneOverlay extends Overlay
{
	private static final int Z_OFFSET = 200;
	private static final int MAX_DISTANCE = 2550;

	private final Client client;
	private final DenseEssencePlugin plugin;
	private final DenseEssenceConfig config;
	private final SkillIconManager skillIconManager;

	@Inject
	private DenseRunestoneOverlay(
		Client client, DenseEssencePlugin plugin, DenseEssenceConfig config, SkillIconManager skillIconManager)
	{
		this.client = client;
		this.plugin = plugin;
		this.config = config;
		this.skillIconManager = skillIconManager;

		setLayer(OverlayLayer.ABOVE_SCENE);
		setPosition(OverlayPosition.DYNAMIC);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		boolean northStoneMineable = client.getVarbitValue(4927) == 0;
		boolean southStoneMineable = client.getVarbitValue(4928) == 0;
		GameObject northStone = plugin.getDenseRunestoneNorth();
		GameObject southStone = plugin.getDenseRunestoneSouth();
		GameObject soulAltar = plugin.getSoulAltar();
		GameObject bloodAltar = plugin.getBloodAltar();
		LocalPoint playerLocation = client.getLocalPlayer().getLocalLocation();

		if (northStone != null)
		{
			if (northStone.getLocalLocation().distanceTo(playerLocation) < MAX_DISTANCE)
			{
				renderStone(graphics, northStone, northStoneMineable);
			}
		}

		if (southStone != null)
		{
			if (southStone.getLocalLocation().distanceTo(playerLocation) < MAX_DISTANCE)
			{
				renderStone(graphics, southStone, southStoneMineable);
			}
		}

		if (config.highlightAltarClickbox() && plugin.hasDarkEssence())
		{
			if (soulAltar != null)
			{
				if (soulAltar.getLocalLocation().distanceTo(playerLocation) < MAX_DISTANCE)
				{
					renderAltar(graphics, soulAltar);
				}
			}
			if (bloodAltar != null)
			{
				if (bloodAltar.getLocalLocation().distanceTo(playerLocation) < MAX_DISTANCE)
				{
					renderAltar(graphics, bloodAltar);
				}
			}
		}
		return null;
	}

	private void renderStone(Graphics2D graphics, GameObject gameObject, boolean minable)
	{
		if (config.showDenseRunestoneClickbox())
		{
			Shape clickbox = gameObject.getClickbox();
			Point mousePosition = client.getMouseCanvasPosition();
			if (minable)
			{
				OverlayUtil.renderHoverableArea(
					graphics, clickbox, mousePosition,
					plugin.getClickboxFillColorMinable(), plugin.getClickboxBorderColorMinable(), plugin.getClickboxBorderHoverColorMinable());
			}
			else
			{
				OverlayUtil.renderHoverableArea(
					graphics, clickbox, mousePosition,
					plugin.getClickboxFillColorDepleted(), plugin.getClickboxBorderColorDepleted(), plugin.getClickboxBorderHoverColorDepleted());
			}
		}
		if (config.showDenseRunestoneIndicator() && minable)
		{
			LocalPoint gameObjectLocation = gameObject.getLocalLocation();
			OverlayUtil.renderImageLocation(
				client, graphics, gameObjectLocation,
				skillIconManager.getSkillImage(Skill.MINING, false), Z_OFFSET);
		}
	}

	private void renderAltar(Graphics2D graphics, GameObject gameObject)
	{
		Point mousePosition = client.getMouseCanvasPosition();

		OverlayUtil.renderHoverableArea(graphics, gameObject.getClickbox(), mousePosition,
			plugin.getClickboxFillColorMinable(), plugin.getClickboxBorderColorMinable(),
			plugin.getClickboxBorderHoverColorMinable());

		OverlayUtil.renderImageLocation(
			client, graphics, gameObject.getLocalLocation(),
			skillIconManager.getSkillImage(Skill.RUNECRAFT, false), Z_OFFSET);
	}
}

package com.zom.dense_essence;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DenseEssenceTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(DenseEssencePlugin.class);
		RuneLite.main(args);
	}
}
