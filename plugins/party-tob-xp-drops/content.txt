package com.partytobxpdrops;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PartyTobXpDropsTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PartyTobXpDropsPlugin.class);
		RuneLite.main(args);
	}
}
package com.partytobxpdrops.attacks;

import lombok.Getter;
import net.runelite.api.Skill;

public enum AttackStyle
{
	ACCURATE("Accurate", Skill.ATTACK),
	AGGRESSIVE("Aggressive", Skill.STRENGTH),
	DEFENSIVE("Defensive", Skill.DEFENCE),
	CONTROLLED("Controlled", Skill.ATTACK, Skill.STRENGTH, Skill.DEFENCE),
	RANGING("Ranging", Skill.RANGED),
	LONGRANGE("Longrange", Skill.RANGED, Skill.DEFENCE),
	CASTING("Casting", Skill.MAGIC),
	DEFENSIVE_CASTING("Defensive Casting", Skill.MAGIC, Skill.DEFENCE),
	OTHER("Other");

	@Getter
	private final String name;
	@Getter
	private final Skill[] skills;

	AttackStyle(String name, Skill... skills)
	{
		this.name = name;
		this.skills = skills;
	}
}
package com.partytobxpdrops.attacks;

/*
 * Copyright (c) 2017, honeyhoney <https://github.com/honeyhoney>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import com.google.common.collect.ImmutableMap;
import java.util.Map;
import lombok.Getter;
import static com.partytobxpdrops.attacks.AttackStyle.ACCURATE;
import static com.partytobxpdrops.attacks.AttackStyle.AGGRESSIVE;
import static com.partytobxpdrops.attacks.AttackStyle.CASTING;
import static com.partytobxpdrops.attacks.AttackStyle.CONTROLLED;
import static com.partytobxpdrops.attacks.AttackStyle.DEFENSIVE;
import static com.partytobxpdrops.attacks.AttackStyle.DEFENSIVE_CASTING;
import static com.partytobxpdrops.attacks.AttackStyle.LONGRANGE;
import static com.partytobxpdrops.attacks.AttackStyle.OTHER;
import static com.partytobxpdrops.attacks.AttackStyle.RANGING;

public enum WeaponType
{
	TYPE_0(ACCURATE, AGGRESSIVE, null, DEFENSIVE),
	TYPE_1(ACCURATE, AGGRESSIVE, AGGRESSIVE, DEFENSIVE),
	TYPE_2(ACCURATE, AGGRESSIVE, null, DEFENSIVE),
	TYPE_3(RANGING, RANGING, null, LONGRANGE),
	TYPE_4(ACCURATE, AGGRESSIVE, CONTROLLED, DEFENSIVE),
	TYPE_5(RANGING, RANGING, null, LONGRANGE),
	TYPE_6(AGGRESSIVE, RANGING, CASTING, null),
	TYPE_7(RANGING, RANGING, null, LONGRANGE),
	TYPE_8(OTHER, AGGRESSIVE, null, null),
	TYPE_9(ACCURATE, AGGRESSIVE, CONTROLLED, DEFENSIVE),
	TYPE_10(ACCURATE, AGGRESSIVE, AGGRESSIVE, DEFENSIVE),
	TYPE_11(ACCURATE, AGGRESSIVE, AGGRESSIVE, DEFENSIVE),
	TYPE_12(CONTROLLED, AGGRESSIVE, null, DEFENSIVE),
	TYPE_13(ACCURATE, AGGRESSIVE, null, DEFENSIVE),
	TYPE_14(ACCURATE, AGGRESSIVE, AGGRESSIVE, DEFENSIVE),
	TYPE_15(CONTROLLED, CONTROLLED, CONTROLLED, DEFENSIVE),
	TYPE_16(ACCURATE, AGGRESSIVE, CONTROLLED, DEFENSIVE),
	TYPE_17(ACCURATE, AGGRESSIVE, AGGRESSIVE, DEFENSIVE),
	TYPE_18(ACCURATE, AGGRESSIVE, null, DEFENSIVE, CASTING, DEFENSIVE_CASTING),
	TYPE_19(RANGING, RANGING, null, LONGRANGE),
	TYPE_20(ACCURATE, CONTROLLED, null, DEFENSIVE),
	TYPE_21(ACCURATE, AGGRESSIVE, null, DEFENSIVE, CASTING, DEFENSIVE_CASTING),
	TYPE_22(ACCURATE, AGGRESSIVE, AGGRESSIVE, DEFENSIVE),
	TYPE_23(CASTING, CASTING, null, DEFENSIVE_CASTING),
	TYPE_24(ACCURATE, AGGRESSIVE, CONTROLLED, DEFENSIVE),
	TYPE_25(CONTROLLED, AGGRESSIVE, null, DEFENSIVE),
	TYPE_26(AGGRESSIVE, AGGRESSIVE, null, AGGRESSIVE),
	TYPE_27(ACCURATE, null, null, OTHER),
	TYPE_28(ACCURATE, ACCURATE, LONGRANGE),
	TYPE_29(ACCURATE, AGGRESSIVE, AGGRESSIVE, DEFENSIVE);

	@Getter
	private final AttackStyle[] attackStyles;

	private static final Map<Integer, WeaponType> weaponTypes;

	static
	{
		ImmutableMap.Builder<Integer, WeaponType> builder = new ImmutableMap.Builder<>();

		for (WeaponType weaponType : values())
		{
			builder.put(weaponType.ordinal(), weaponType);
		}

		weaponTypes = builder.build();
	}

	WeaponType(AttackStyle... attackStyles)
	{
		this.attackStyles = attackStyles;
	}

	public static WeaponType getWeaponType(int id)
	{
		return weaponTypes.get(id);
	}
}
package com.partytobxpdrops;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import javax.inject.Inject;
import lombok.Setter;
import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;


public class PartyTobXpDropsOverlay extends OverlayPanel
{
	private final Client client;
	private final PartyTobXpDropsPlugin plugin;
	private final PartyTobXpDropsConfig config;

	@Setter
	private Font defaultFont;
	@Setter
	private Color defaultColor;

	@Inject
	private PartyTobXpDropsOverlay(Client client, PartyTobXpDropsPlugin plugin, PartyTobXpDropsConfig config)
	{
		super(plugin);
		this.client = client;
		this.plugin = plugin;
		this.config = config;
		setPosition(OverlayPosition.TOP_LEFT);
		setPriority(0.75f);

		_updateConfigurations();
	}

	public void _updateConfigurations()
	{
		int style = Font.PLAIN;
		if (config.fontsBold())
		{
			style = Font.BOLD;
		}
		this.defaultFont = new Font(config.fontsName().toString(), style, config.fontsSize());
		this.defaultColor = config.playerNameColor();
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (plugin.stopped())
		{
			return null;
		}

		for (PartyTobXpDropsPlugin.PlayerOrb playerOrb : plugin.getPlayerOrbs())
		{
			if (client.getVarbitValue(playerOrb.getHealthVarb()) == 0) // Orb doesn't exist
			{
				break;
			}
			String playerName = client.getVarcStrValue(playerOrb.getNameVarc());
			String xp = null;
			Skill skill = null;
			PartyTobXpDropsPlugin.PartyXpItem partyXpItem = plugin.getPartyXp().getOrDefault(playerName, null);
			if (partyXpItem != null)
			{
				skill = partyXpItem.getSkill();
				xp = String.valueOf(partyXpItem.getXp());
				if (plugin.config.displayTicksRemaining())
				{
					xp += " (" + partyXpItem.getCooldown() + ")";
				}
			}
			Color xpColor = defaultColor;
			if (skill != null)
			{
				switch (skill)
				{
					case MAGIC:
						xpColor = Color.CYAN;
						break;
					case RANGED:
						xpColor = Color.GREEN;
						break;
					case ATTACK:
					case STRENGTH:
					case DEFENCE:
						xpColor = Color.ORANGE;
						break;
				}
			}
			panelComponent.getChildren().add(
				LineComponent.builder()
					.left(playerName)
					.leftFont(defaultFont)
					.leftColor(defaultColor)
					.right(xp)
					.rightFont(defaultFont)
					.rightColor(xpColor)
					.build()
			);
		}
		return super.render(graphics);
	}
}
package com.partytobxpdrops.constants;

public class TobNpc
{
	public final static int MAIDEN_P0 = 8360;
	public final static int MAIDEN_P0_HM = 10822;
	public final static int MAIDEN_P0_SM = 10814;
	public final static int MAIDEN_P1 = 8361;
	public final static int MAIDEN_P1_HM = 10823;
	public final static int MAIDEN_P1_SM = 10815;
	public final static int MAIDEN_P2 = 8362;
	public final static int MAIDEN_P2_HM = 10824;
	public final static int MAIDEN_P2_SM = 10816;
	public final static int MAIDEN_P3 = 8363;
	public final static int MAIDEN_P3_HM = 10825;
	public final static int MAIDEN_P3_SM = 10817;

	public final static int MAIDEN_MATOMENOS = 8366;
	public final static int MAIDEN_MATOMENOS_HM = 10828;
	public final static int MAIDEN_MATOMENOS_SM = 10820;

	public final static int MAIDEN_BLOOD = 8367;
	public final static int MAIDEN_BLOOD_HM = 10829;
	public final static int MAIDEN_BLOOD_SM = 10821;

	public final static int BLOAT = 8359;
	public final static int BLOAT_HM = 10813;
	public final static int BLOAT_SM = 10812;

	public final static int NYLO_BOSS_MELEE = 8355;
	public final static int NYLO_BOSS_MELEE_HM = 10808;
	public final static int NYLO_BOSS_MELEE_SM = 10787;

	public final static int NYLO_BOSS_MAGE = 8356;
	public final static int NYLO_BOSS_MAGE_HM = 10809;
	public final static int NYLO_BOSS_MAGE_SM = 10788;

	public final static int NYLO_BOSS_RANGE = 8357;
	public final static int NYLO_BOSS_RANGE_HM = 10810;
	public final static int NYLO_BOSS_RANGE_SM = 10789;

	public final static int NYLO_PRINKIPAS_MELEE = 10804;
	public final static int NYLO_PRINKIPAS_MAGIC = 10805;
	public final static int NYLO_PRINKIPAS_RANGE = 10806;

	public final static int[] NYLOCAS_NPC_IDS = {
		8342, 8348, 8345, 8351, 8343, 8349, 8346, 8352, 8344, 8350, 8347, 8353,
		10791, 10792, 10793, 10797, 10798, 10799, 10794, 10795, 10796,
		10800, 10801, 10802, 10774, 10777, 10780, 10783, 10775, 10778,
		10781, 10784, 10776, 10779, 10782, 10785
	};

	public final static int SOTETSEG = 8388;
	public final static int SOTETSEG_HM = 10868;
	public final static int SOTETSEG_SM = 10865;

	public final static int XARPUS_P1 = 8339;
	public final static int XARPUS_P1_HM = 10771;
	public final static int XARPUS_P1_SM = 10767;

	public final static int XARPUS_P23 = 8340;
	public final static int XARPUS_P23_HM = 10772;
	public final static int XARPUS_P23_SM = 10768;

	public final static int VERZIK_MATOMENOS = 8385;
	public final static int VERZIK_MATOMENOS_HM = 10862;
	public final static int VERZIK_MATOMENOS_SM = 10845;

	public final static int VERZIK_P1 = 8370;
	public final static int VERZIK_P1_HM = 10848;
	public final static int VERZIK_P1_SM = 10831;

	public final static int VERZIK_P2 = 8372;
	public final static int VERZIK_P2_HM = 10850;
	public final static int VERZIK_P2_SM = 10833;

	public final static int VERZIK_P3 = 8374;
	public final static int VERZIK_P3_HM = 10852;
	public final static int VERZIK_P3_SM = 10835;
}

package com.partytobxpdrops.constants;

public class TobRegion
{
	public final static int LOBBY_REGION = 14642;
	public final static int MAIDEN_REGION = 12613;
	public final static int BLOAT_REGION = 13125;
	public final static int NYLO_REGION = 13122;
	public final static int SOTETSEG_REGION = 13123;
	public final static int SOTETSEG_UNDER_REGION = 13379;
	public final static int XARPUS_REGION = 12612;
	public final static int VERZIK_REGION = 12611;
}
package com.partytobxpdrops.misc;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Getter
public enum Fonts
{
	REGULAR("RS Regular"),
	ARIAL("Arial"),
	CAMBRIA("Cambria"),
	ROCKWELL("Rockwell"),
	SEGOE_UI("Segoe Ui"),
	TIMES_NEW_ROMAN("Times New Roman"),
	VERDANA("Verdana"),
	DIALOG("DIALOG"),
	RUNESCAPE("RuneScape");

	private final String name;

	@Override
	public String toString()
	{
		return name;
	}
}
package com.partytobxpdrops;

import com.google.common.collect.ImmutableList;
import com.google.inject.Provides;
import com.partytobxpdrops.attacks.AttackStyle;
import com.partytobxpdrops.attacks.WeaponType;
import com.partytobxpdrops.constants.TobNpc;
import com.partytobxpdrops.constants.TobRegion;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.inject.Inject;
import lombok.Data;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Actor;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.NPC;
import net.runelite.api.Varbits;
import net.runelite.api.events.FakeXpDrop;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.StatChanged;
import net.runelite.api.events.VarbitChanged;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.InventoryID;
import net.runelite.api.VarPlayer;
import net.runelite.client.game.ItemManager;
import net.runelite.http.api.item.ItemEquipmentStats;
import net.runelite.http.api.item.ItemStats;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.PartyChanged;
import net.runelite.client.party.PartyService;
import net.runelite.client.party.WSClient;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.party.PartyPlugin;
import net.runelite.client.plugins.xptracker.XpTrackerPlugin;
import net.runelite.api.Skill;
import net.runelite.client.ui.overlay.OverlayManager;
import org.apache.commons.lang3.ArrayUtils;


@PluginDependency(XpTrackerPlugin.class)
@PluginDependency(PartyPlugin.class)
@PluginDescriptor(
	name = "Party Tob XP Drops",
	description = "Shows xp drops of other party members in tob."

)
@Slf4j
public class PartyTobXpDropsPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	public PartyTobXpDropsConfig config;

	@Inject
	private PartyService partyService;

	@Inject
	private WSClient wsClient;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private PartyTobXpDropsOverlay overlay;

	@Inject
	private ItemManager itemManager;

	@Getter
	private boolean inTob;

	@Getter
	private boolean inActiveRegion = false;

	private final Set<Integer> activeRegions = new HashSet<Integer>();

	@Data
	static class PartyXpItem
	{
		final Skill skill;
		final int xp;
		int cooldown;
	}

	@Data
	static class PlayerOrb
	{
		final private int healthVarb;
		final private int nameVarc;
	}

	@Getter
	private final HashMap<String, PartyXpItem> partyXp = new HashMap<>();

	private static final HashMap<Skill, Integer> previousXp = new HashMap<>();
	private static final HashMap<Skill, Integer> tickXp = new HashMap<>();

	@Getter
	private final ArrayList<PlayerOrb> playerOrbs = new ArrayList<PlayerOrb>();

	static final List<Skill> COMBAT_SKILLS = ImmutableList.of(
		Skill.ATTACK,
		Skill.STRENGTH,
		Skill.DEFENCE,
		Skill.RANGED,
		Skill.HITPOINTS,
		Skill.MAGIC);

	@Provides
	PartyTobXpDropsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(PartyTobXpDropsConfig.class);
	}


	@Override
	protected void startUp() throws Exception
	{
		wsClient.registerMessage(XpDropMessage.class);
		overlayManager.add(overlay);
		if (client.getGameState() == GameState.LOGGED_IN)
		{
			clientThread.invokeLater(this::loadPreviousXpValues);
		}
		_updateActiveRegions();
		_updateActivePlayers();
	}

	@Override
	protected void shutDown() throws Exception
	{
		wsClient.unregisterMessage(XpDropMessage.class);
		overlayManager.remove(overlay);
		tickXp.clear();
		partyXp.clear();
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged)
	{
		if (!configChanged.getGroup().equals(PartyTobXpDropsConfig.GROUP))
		{
			return;
		}
		_updateActiveRegions();
		_updateActivePlayers();
		overlay._updateConfigurations();
	}

	@Subscribe
	public void onXpDropMessage(XpDropMessage xpDropMessage)
	{
		if (stopped())
		{
			return;
		}
		clientThread.invoke(() ->
		{
			log.debug("Received message from " + xpDropMessage.getPlayerName() + ", skill: " + xpDropMessage.getSkill() + ", xp : " + xpDropMessage.getXp());
			if (shouldDisplayMessage(xpDropMessage))
			{
				PartyXpItem partyXpItem = new PartyXpItem(xpDropMessage.getSkill(), xpDropMessage.getXp());
				if (config.ticksToKeep() > 0)
				{
					partyXpItem.setCooldown(config.ticksToKeep());
				}
				else
				{
					partyXpItem.setCooldown(xpDropMessage.getCooldown());
				}
				partyXp.put(xpDropMessage.getPlayerName(), partyXpItem);
			}
		});
	}

	@Subscribe
	protected void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (stopped())
		{
			return;
		}
		if (gameStateChanged.getGameState() == GameState.LOGGED_IN)
		{
			clientThread.invokeLater(this::loadPreviousXpValues);
		}
	}

	@Subscribe
	public void onPartyChanged(final PartyChanged event)
	{
		if (inTob)
		{
			clientThread.invokeLater(this::loadPreviousXpValues);
		}
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		if (client.getLocalPlayer() == null)
		{
			return;
		}
		inTob = client.getVarbitValue(Varbits.THEATRE_OF_BLOOD) > 1;
	}

	@Subscribe
	public void onGameTick(GameTick gameTick)
	{
		updateInActiveRegion();
		if (stopped())
		{
			return;
		}
		processTickXp();
		updateXpCooldowns();
	}

	@Subscribe
	protected void onStatChanged(StatChanged event)
	{
		if (!COMBAT_SKILLS.contains(event.getSkill()))
		{
			return;
		}
		int xpNow = event.getXp();
		int xpBefore = previousXp.getOrDefault(event.getSkill(), -1);
		if (xpBefore == -1)
		{
			return;
		}
		int xp = xpNow - xpBefore;
		if (xpBefore != 0 && xp > 0)
		{
			if (!tickXp.containsKey(event.getSkill()))
			{
				tickXp.merge(event.getSkill(), xp, Integer::sum);
			}
		}
		previousXp.put(event.getSkill(), event.getXp());
	}

	@Subscribe
	protected void onFakeXpDrop(FakeXpDrop event)
	{
		if (!COMBAT_SKILLS.contains(event.getSkill()))
		{
			return;
		}
		int xp = event.getXp();
		if (xp >= 20000000)
		{
			return;
		}
		tickXp.merge(event.getSkill(), xp, Integer::sum);
	}

	public void _updateActiveRegions()
	{
		activeRegions.clear();
		if ((config.showMaiden()) | (config.showMaidenCrabs()))
		{
			activeRegions.add(TobRegion.MAIDEN_REGION);
		}
		if (config.showBloat())
		{
			activeRegions.add(TobRegion.BLOAT_REGION);
		}
		if (config.showNylocas())
		{
			activeRegions.add(TobRegion.NYLO_REGION);
		}
		if (config.showSotetseg())
		{
			activeRegions.add(TobRegion.SOTETSEG_REGION);
			activeRegions.add(TobRegion.SOTETSEG_UNDER_REGION);
		}
		if (config.showXarpus())
		{
			activeRegions.add(TobRegion.XARPUS_REGION);
		}
		if (config.showVerzik())
		{
			activeRegions.add(TobRegion.VERZIK_REGION);
		}
	}

	private void _updateActivePlayers()
	{
		playerOrbs.clear();
		if (config.showPlayer1())
		{
			playerOrbs.add(new PlayerOrb(6442, 330));
		}
		if (config.showPlayer2())
		{
			playerOrbs.add(new PlayerOrb(6443, 331));
		}
		if (config.showPlayer3())
		{
			playerOrbs.add(new PlayerOrb(6444, 332));
		}
		if (config.showPlayer4())
		{
			playerOrbs.add(new PlayerOrb(6445, 333));
		}
		if (config.showPlayer5())
		{
			playerOrbs.add(new PlayerOrb(6446, 334));
		}
	}

	private void processTickXp()
	{
		if (tickXp.containsKey(Skill.MAGIC))
		{
			if (tickXp.size() == 1)
			{
				tickXp.clear();
				return;
			}
			if ((tickXp.containsKey(Skill.STRENGTH)) | (tickXp.containsKey(Skill.ATTACK)) | (tickXp.containsKey(Skill.RANGED)))
			{
				tickXp.remove(Skill.MAGIC);
			}
			if (tickXp.containsKey(Skill.DEFENCE))
			{
				tickXp.merge(Skill.MAGIC, tickXp.get(Skill.DEFENCE), Integer::sum);
				tickXp.remove(Skill.DEFENCE);
			}
		}
		if (tickXp.containsKey(Skill.RANGED))
		{
			if (tickXp.containsKey(Skill.DEFENCE))
			{
				tickXp.merge(Skill.RANGED, tickXp.get(Skill.DEFENCE), Integer::sum);
				tickXp.remove(Skill.DEFENCE);
			}
		}

		int hpXp;
		if (tickXp.containsKey(Skill.HITPOINTS))
		{
			hpXp = tickXp.remove(Skill.HITPOINTS);
		}
		else
		{
			hpXp = 0;
		}
		Actor interactingActor = client.getLocalPlayer().getInteracting();
		if (!(interactingActor instanceof NPC))
		{
			return;
		}
		String playerName = client.getLocalPlayer().getName();
		int interactingNpcId = ((NPC) interactingActor).getId();
		tickXp.forEach((skill, xp) -> {
//			onXpDropMessage(new XpDropMessage(playerName, skill, xp + hpXp, interactingNpcId, getWeaponSpeed()));
			partyService.send(new XpDropMessage(playerName, skill, xp + hpXp, interactingNpcId, getWeaponSpeed()));
		});
		tickXp.clear();
	}

	private void updateXpCooldowns()
	{
		Iterator<Map.Entry<String, PartyXpItem>> iterator = partyXp.entrySet().iterator();
		while (iterator.hasNext())
		{
			Map.Entry<String, PartyXpItem> entry = iterator.next();
			PartyXpItem partyXpItem = entry.getValue();
			partyXpItem.cooldown--;
			if (partyXpItem.cooldown == 0)
			{
				iterator.remove();
			}
		}
	}

	public boolean stopped()
	{
		return (!inActiveRegion) | (!partyService.isInParty());
	}

	private void updateInActiveRegion()
	{
		if (client.getMapRegions() != null)
		{
			for (int regionId : client.getMapRegions())
			{
				if (activeRegions.contains(regionId))
				{
					inActiveRegion = true;
					return;
				}
			}
		}
		inActiveRegion = false;
	}

	private void loadPreviousXpValues()
	{
		int[] xps = client.getSkillExperiences();
		for (Skill skill : COMBAT_SKILLS)
		{
			previousXp.put(skill, xps[skill.ordinal()]);
		}
	}

	private boolean shouldDisplayMessage(XpDropMessage xpDropMessage)
	{
		switch (xpDropMessage.getSkill())
		{
			case STRENGTH:
			case ATTACK:
			case DEFENCE:
				if (!config.showMelee())
				{
					return false;
				}
				break;
			case RANGED:
				if (!config.showRange())
				{
					return false;
				}
				break;
			case MAGIC:
				if (!config.showMagic())
				{
					return false;
				}
				break;
			default:
				return false;
		}
		switch (xpDropMessage.getNpcId())
		{
			case TobNpc.MAIDEN_P1:
			case TobNpc.MAIDEN_P1_HM:
			case TobNpc.MAIDEN_P1_SM:
			case TobNpc.MAIDEN_P2:
			case TobNpc.MAIDEN_P2_HM:
			case TobNpc.MAIDEN_P2_SM:
			case TobNpc.MAIDEN_P3:
			case TobNpc.MAIDEN_P3_HM:
			case TobNpc.MAIDEN_P3_SM:
				if (!config.showMaiden())
				{
					return false;
				}
				break;
			case TobNpc.MAIDEN_MATOMENOS:
			case TobNpc.MAIDEN_MATOMENOS_HM:
			case TobNpc.MAIDEN_MATOMENOS_SM:
				if (!config.showMaidenCrabs())
				{
					return false;
				}
				break;
			case TobNpc.BLOAT:
			case TobNpc.BLOAT_HM:
			case TobNpc.BLOAT_SM:
				if (!config.showBloat())
				{
					return false;
				}
				break;
			case TobNpc.NYLO_BOSS_MELEE:
			case TobNpc.NYLO_BOSS_MELEE_HM:
			case TobNpc.NYLO_BOSS_MELEE_SM:
			case TobNpc.NYLO_BOSS_RANGE:
			case TobNpc.NYLO_BOSS_RANGE_HM:
			case TobNpc.NYLO_BOSS_RANGE_SM:
			case TobNpc.NYLO_BOSS_MAGE:
			case TobNpc.NYLO_BOSS_MAGE_HM:
			case TobNpc.NYLO_BOSS_MAGE_SM:
			case TobNpc.NYLO_PRINKIPAS_MELEE:
			case TobNpc.NYLO_PRINKIPAS_RANGE:
			case TobNpc.NYLO_PRINKIPAS_MAGIC:
				if (!config.showNylocas())
				{
					return false;
				}
				break;
			case TobNpc.SOTETSEG:
			case TobNpc.SOTETSEG_HM:
			case TobNpc.SOTETSEG_SM:
				if (!config.showSotetseg())
				{
					return false;
				}
				break;
			case TobNpc.XARPUS_P23:
			case TobNpc.XARPUS_P23_HM:
			case TobNpc.XARPUS_P23_SM:
				if (!config.showXarpus())
				{
					return false;
				}
				break;
			case TobNpc.VERZIK_P1:
			case TobNpc.VERZIK_P1_HM:
			case TobNpc.VERZIK_P1_SM:
			case TobNpc.VERZIK_P2:
			case TobNpc.VERZIK_P2_HM:
			case TobNpc.VERZIK_P2_SM:
			case TobNpc.VERZIK_P3:
			case TobNpc.VERZIK_P3_HM:
			case TobNpc.VERZIK_P3_SM:
			case TobNpc.VERZIK_MATOMENOS:
			case TobNpc.VERZIK_MATOMENOS_HM:
			case TobNpc.VERZIK_MATOMENOS_SM:
				if (!config.showVerzik())
				{
					return false;
				}
				break;
		}
		if (ArrayUtils.contains(TobNpc.NYLOCAS_NPC_IDS, xpDropMessage.getNpcId()))
		{
			return config.showNylocas();
		}
		return true;
	}

	private int getWeaponSpeed()
	{
		ItemStats weaponStats = getWeaponStats();
		ItemEquipmentStats e = weaponStats.getEquipment();
		int speed = e.getAspeed();
		if (getAttackStyle() == AttackStyle.RANGING &&
			client.getVarpValue(VarPlayer.ATTACK_STYLE) == 1)
		{
			speed -= 1;
		}
		return speed;
	}

	private ItemStats getItemStatsFromContainer(ItemContainer container, int slotID)
	{
		if (container == null)
		{
			return null;
		}
		final Item item = container.getItem(slotID);
		return item != null ? itemManager.getItemStats(item.getId(), false) : null;
	}

	private ItemStats getWeaponStats()
	{
		return getItemStatsFromContainer(client.getItemContainer(InventoryID.EQUIPMENT),
			EquipmentInventorySlot.WEAPON.getSlotIdx());
	}

	private AttackStyle getAttackStyle()
	{
		final int currentAttackStyleVarbit = client.getVarpValue(VarPlayer.ATTACK_STYLE);
		final int currentEquippedWeaponTypeVarbit = client.getVarbitValue(Varbits.EQUIPPED_WEAPON_TYPE);
		AttackStyle[] attackStyles = WeaponType.getWeaponType(currentEquippedWeaponTypeVarbit).getAttackStyles();

		if (currentAttackStyleVarbit < attackStyles.length)
		{
			return attackStyles[currentAttackStyleVarbit];
		}
		return AttackStyle.ACCURATE;
	}
}

package com.partytobxpdrops;

import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Setter;
import lombok.Value;
import net.runelite.api.Skill;
import net.runelite.client.party.messages.PartyMemberMessage;

@Value
@AllArgsConstructor
@EqualsAndHashCode(callSuper = true)
public class XpDropMessage extends PartyMemberMessage
{
	String playerName;
	Skill skill;
	int xp;
	int npcId;
	int cooldown;
}

package com.partytobxpdrops;

import com.partytobxpdrops.misc.Fonts;
import java.awt.Color;
import java.awt.Font;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup(PartyTobXpDropsConfig.GROUP)
public interface PartyTobXpDropsConfig extends Config
{
	String GROUP = "partytobxpdrops";

	@ConfigSection(
		name = "General",
		position = 0,
		description = "GeneralSettings",
		closedByDefault = false
	)
	String generalSettings = "generalSettings";

	@ConfigItem(
		position = 0,
		keyName = "displayTicksRemaining",
		name = "Display ticks remaining",
		description = "Display xp drop cooldown",
		section = generalSettings
	)
	default boolean displayTicksRemaining()
	{
		return true;
	}

	@ConfigItem(
		position = 1,
		keyName = "ticksToKeep",
		name = "Ticks to keep",
		description = "Number of ticks till xp drop disappears. If it's set to 0 players cooldown will be used instead",
		section = generalSettings
	)
	default int ticksToKeep()
	{
		return 0;
	}

	@ConfigItem(
		position = 2,
		keyName = "fontsName",
		name = "Fonts",
		description = "Fonts to use for xp",
		section = generalSettings
	)
	default Fonts fontsName()
	{
		return Fonts.ARIAL;
	}

	@ConfigItem(
		position = 3,
		keyName = "fontsSize",
		name = "Font Size",
		description = "Size of fonts",
		section = generalSettings
	)
	default int fontsSize()
	{
		return 12;
	}

	@ConfigItem(
		position = 4,
		keyName = "fontsBold",
		name = "Bold",
		description = "Bold fonts",
		section = generalSettings
	)
	default boolean fontsBold()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
		position = 5,
		keyName = "playerNameColor",
		name = "Player Name Color",
		description = "Color of player name",
		section = generalSettings
	)
	default Color playerNameColor()
	{
		return Color.WHITE;
	}

	@ConfigSection(
		name = "Players",
		position = 1,
		description = "Show players (based on orb order)",
		closedByDefault = false
	)
	String playerSettings = "playerSettings";

	@ConfigItem(
		position = 0,
		keyName = "showPlayer1",
		name = "Player 1",
		description = "Show orb 1 player",
		section = playerSettings
	)
	default boolean showPlayer1()
	{
		return true;
	}

	@ConfigItem(
		position = 1,
		keyName = "showPlayer2",
		name = "Player 2",
		description = "Show orb 2 player",
		section = playerSettings
	)
	default boolean showPlayer2()
	{
		return true;
	}

	@ConfigItem(
		position = 2,
		keyName = "showPlayer3",
		name = "Player 3",
		description = "Show orb 3 player",
		section = playerSettings
	)
	default boolean showPlayer3()
	{
		return true;
	}

	@ConfigItem(
		position = 3,
		keyName = "showPlayer4",
		name = "Player 4",
		description = "Show orb 4 player",
		section = playerSettings
	)
	default boolean showPlayer4()
	{
		return true;
	}

	@ConfigItem(
		position = 4,
		keyName = "showPlayer5",
		name = "Player 5",
		description = "Show orb 5 player",
		section = playerSettings
	)
	default boolean showPlayer5()
	{
		return true;
	}

	@ConfigSection(
		name = "Targets",
		position = 2,
		description = "Show xp drops in rooms",
		closedByDefault = false
	)
	String roomSettings = "roomSettings";

	@ConfigItem(
		position = 0,
		keyName = "showMaiden",
		name = "Maiden",
		description = "Show xp drops at maiden",
		section = roomSettings
	)
	default boolean showMaiden()
	{
		return true;
	}

	@ConfigItem(
		position = 1,
		keyName = "showMaidenCrabs",
		name = "Maiden Crabs",
		description = "Show xp drops on maiden crabs",
		section = roomSettings
	)
	default boolean showMaidenCrabs()
	{
		return true;
	}

	@ConfigItem(
		position = 2,
		keyName = "showBloat",
		name = "Bloat",
		description = "Show xp drops at bloat",
		section = roomSettings
	)
	default boolean showBloat()
	{
		return true;
	}

	@ConfigItem(
		position = 3,
		keyName = "showNylocas",
		name = "Nylocas",
		description = "Show xp drops at nylocas",
		section = roomSettings
	)
	default boolean showNylocas()
	{
		return true;
	}

	@ConfigItem(
		position = 4,
		keyName = "showSotetseg",
		name = "Sotetseg",
		description = "Show xp drops at sotetseg",
		section = roomSettings
	)
	default boolean showSotetseg()
	{
		return true;
	}

	@ConfigItem(
		position = 5,
		keyName = "showXarpus",
		name = "Xarpus",
		description = "Show xp drops at xarpus",
		section = roomSettings
	)
	default boolean showXarpus()
	{
		return true;
	}

	@ConfigItem(
		position = 6,
		keyName = "showVerzik",
		name = "Verzik",
		description = "Show xp drops at verzik",
		section = roomSettings
	)
	default boolean showVerzik()
	{
		return true;
	}

	@ConfigSection(
		name = "Styles",
		position = 3,
		description = "Show styles",
		closedByDefault = false
	)
	String styleSettings = "styleSettings";

	@ConfigItem(
		position = 0,
		keyName = "showMagic",
		name = "Magic",
		description = "Display magic xp drops",
		section = styleSettings
	)
	default boolean showMagic()
	{
		return true;
	}

	@ConfigItem(
		position = 1,
		keyName = "showRange",
		name = "Range",
		description = "Display range xp drops",
		section = styleSettings
	)
	default boolean showRange()
	{
		return true;
	}

	@ConfigItem(
		position = 2,
		keyName = "showMelee",
		name = "Melee",
		description = "Display melee xp drops",
		section = styleSettings
	)
	default boolean showMelee()
	{
		return true;
	}
}

