package com.npcanimator;
import com.npcanimator.NPCAnimatorPlugin;
import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class NPCAnimatorPluginTest
{
    public static void main(String[] args) throws Exception
    {
        ExternalPluginManager.loadBuiltin(NPCAnimatorPlugin.class);
        RuneLite.main(args);
    }
}
package com.npcanimator.views;

import com.npcanimator.NPCAnimatorPlugin;
import com.npcanimator.utils.SimpleEmote;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.util.SwingUtil;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicButtonUI;
import java.awt.*;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;

import static com.npcanimator.utils.Icons.COLLAPSED_ICON;
import static com.npcanimator.utils.Icons.EXPANDED_ICON;

public class EmoteAnimationRow extends JPanel {

    private final NPCAnimatorPlugin plugin;
    private final int id;
    private final SimpleEmote emote;

    /*
        headerContainer
        detailsContainer
        greetingsContainer
     */

    private final JPanel headerContainer = new JPanel();
    private final JButton collapseButton = new JButton();
    private final JLabel rowNameLabel = new JLabel();

    private final JPanel detailsContainer = new JPanel();
    private final JButton playAnimationButton = new JButton();

    private final JPanel footerContainer = new JPanel();

    private static final String DELETE_ANIMATION_WARNING_TEXT = "Delete \"%s\" from your saved animations?";
    private static final String SAVE_ANIMATION_WARNING_TEXT = "Add \"%s\" to your saved animations?";


    public EmoteAnimationRow(final NPCAnimatorPlugin plugin, SimpleEmote emote, boolean isStandardEmote) {
        this.plugin = plugin;
        this.emote = emote;
        this.id = emote.getId();

        setLayout(new BorderLayout(0, 0));
        setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 1, 0, ColorScheme.DARKER_GRAY_COLOR.darker()),
                BorderFactory.createEmptyBorder(5, 0, 5, 10)
        ));
        buildHeaderContainer();

        this.rowNameLabel.setText(emote.getName() + ": " + this.id);

        add(this.headerContainer, BorderLayout.NORTH);
        add(this.detailsContainer, BorderLayout.CENTER);
        collapse();
        if (!isStandardEmote) {
            addDeleteMenu();
        }
        else {
            addQuickSaveMenu();
        }
    }

    void addDeleteMenu() {
        final JMenuItem copy = new JMenuItem("Copy ID");
        copy.addActionListener(e -> {
            Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard();
            Transferable tText = new StringSelection(Integer.toString(this.id));
            clip.setContents(tText, null);
        });

        final JMenuItem delete = getDeleteJMenuItem();

        // Create popup menu with a copy and delete button
        final JPopupMenu popupMenu = new JPopupMenu();
        popupMenu.setBorder(new EmptyBorder(5, 5, 5, 5));
        popupMenu.add(copy);
        popupMenu.add(delete);
        this.setComponentPopupMenu(popupMenu);
    }

    private JMenuItem getDeleteJMenuItem() {
        final JMenuItem delete = new JMenuItem("Delete Animation");
        delete.addActionListener(e -> {
            final int result = JOptionPane.showOptionDialog(
                this, String.format(DELETE_ANIMATION_WARNING_TEXT, this.emote.getName()),
                "Delete Animation", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE,
                null, new String[]{"Yes", "No"},
                "No"
            );

            if (result != JOptionPane.YES_OPTION) {
                return;
            }
            deleteEmoteRow();
        });
        return delete;
    }

    void addQuickSaveMenu() {
        final JMenuItem copy = new JMenuItem("Copy ID");
        copy.addActionListener(e -> {
            Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard();
            Transferable tText = new StringSelection(Integer.toString(this.id));
            clip.setContents(tText, null);
        });

        final JMenuItem save = getSaveJMenuItem();

        // Create popup menu with a copy and save button
        final JPopupMenu popupMenu = new JPopupMenu();
        popupMenu.setBorder(new EmptyBorder(5, 5, 5, 5));
        popupMenu.add(copy);
        popupMenu.add(save);
        this.setComponentPopupMenu(popupMenu);
    }

    private JMenuItem getSaveJMenuItem() {
        final JMenuItem save = new JMenuItem("Save Animation");
        save.addActionListener(e -> {
            final int result = JOptionPane.showOptionDialog(
                this,
                String.format(SAVE_ANIMATION_WARNING_TEXT, this.emote.getName()),
                "Delete Animation", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE,
                null, new String[]{"Yes", "No"},
                "No"
            );

            if (result != JOptionPane.YES_OPTION) {
                return;
            }
            this.plugin.addEmoteToSaved(this.emote);
        });
        return save;
    }

    boolean isCollapsed() {
        return collapseButton.isSelected();
    }

    void collapse() {
        if (!isCollapsed()) {
            collapseButton.setSelected(true);
            detailsContainer.setVisible(false);
            footerContainer.setVisible(false);
        }
    }

    void expand() {
        if (isCollapsed()) {
            collapseButton.setSelected(false);
            detailsContainer.setVisible(true);
            footerContainer.setVisible(true);
        }
    }

    void toggleCollapse() {
        if (isCollapsed()) {
            expand();
        }
        else {
            collapse();
        }
    }

    void buildHeaderContainer() {
        BoxLayout layout = new BoxLayout(this.headerContainer, BoxLayout.X_AXIS);

        this.headerContainer.setLayout(layout);
        this.headerContainer.setBorder(new EmptyBorder(5, 0, 0, 0));

        buildHeaderComponents();

        this.headerContainer.add(Box.createRigidArea(new Dimension(10, 0)));
        this.headerContainer.add(this.rowNameLabel);

        this.headerContainer.add(Box.createHorizontalGlue());
        this.headerContainer.add(this.playAnimationButton);
    }

    void buildHeaderComponents() {
        SwingUtil.removeButtonDecorations(this.collapseButton);
        this.collapseButton.setIcon(EXPANDED_ICON);
        this.collapseButton.setSelectedIcon(COLLAPSED_ICON);
        SwingUtil.addModalTooltip(this.collapseButton, "Expand", "Collapse");
        this.collapseButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
        this.collapseButton.setUI(new BasicButtonUI());
        this.collapseButton.addActionListener(evt -> toggleCollapse());

        this.rowNameLabel.setText("Animation");
        this.rowNameLabel.setFont(FontManager.getRunescapeSmallFont());
        this.rowNameLabel.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        this.rowNameLabel.setMinimumSize(new Dimension(1, this.rowNameLabel.getPreferredSize().height));

        SwingUtil.removeButtonDecorations(this.playAnimationButton);
        this.playAnimationButton.setText("Play");
        this.playAnimationButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
        this.playAnimationButton.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        this.playAnimationButton.setUI(new BasicButtonUI());
        this.playAnimationButton.addActionListener(evt -> runSelectedAnimation());
    }

    void runSelectedAnimation() {
        try {
            this.plugin.runAnimationOnPlayer(this.id);
        }
        catch (Exception e) {
            // Failed to run selected animation
        }
    }

    void deleteEmoteRow() {
        this.plugin.deleteEmoteFromSaved(this.emote, this);
    }
}

package com.npcanimator.views;

import com.npcanimator.NPCAnimatorPlugin;
import com.npcanimator.utils.AnimatedNPC;
import com.npcanimator.utils.SimpleEmote;
import com.npcanimator.utils.StandardEmotes;
import net.runelite.api.Player;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.util.SwingUtil;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicButtonUI;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Objects;

import static com.npcanimator.utils.Icons.COLLAPSED_ICON;
import static com.npcanimator.utils.Icons.EXPANDED_ICON;

public class NPCAnimatorPanel extends PluginPanel
{
    private final NPCAnimatorPlugin plugin;

    private final JPanel savedNPCAnimationsContainer = new JPanel();
    private final JPanel spawnedNPCAnimationsContainer = new JPanel();

    private final HashMap<Integer, NPCAnimationRow> savedAnimatedNPCRowMap = new HashMap<>();
    private final HashMap<Integer, NPCAnimationRow> spawnedAnimatedNPCRowMap = new HashMap<>();

    private final JLabel pluginNameLabel = new JLabel();
    private final JLabel pluginIcon = new JLabel();

    private Player myPlayer;

    // UI Elements
    private final JPanel tabHeaderPanel = new JPanel();
    private final JButton savedTabButton = new JButton();
    private final JButton spawnedTabButton = new JButton();
    private final JButton animationsTabButton = new JButton();
    private final JPanel playerAnimationPanel = new JPanel();
    private final JPanel playerAnimationDetailsPanel = new JPanel();
    private final SpinnerNumberModel spinnerNumberModel = new SpinnerNumberModel(1, 0, 100000, 1);
    private final JSpinner playerAnimationJSpinner = new JSpinner(spinnerNumberModel);

    private String selectedTab = "Animations";
    private final JPanel savedEmotesListContainer = new JPanel();
    private final JPanel defaultEmotesListContainer = new JPanel();

    private final JPanel savedAnimationsTabHeaderPanel = new JPanel();
    private final JButton defaultAnimationTabButton = new JButton();
    private final JButton savedAnimationTabButton = new JButton();
    private String selectedEmoteAnimationTab = "Saved";

    private final SpinnerNumberModel savedSpinnerNumberModel = new SpinnerNumberModel(1, 0, 100000, 1);
    private final SpinnerNumberModel spawnedSpinnerNumberModel = new SpinnerNumberModel(1, 0, 100000, 1);
    private final JSpinner savedTestingAnimationJSpinner = new JSpinner(savedSpinnerNumberModel);
    private final JSpinner spawnedTestingAnimationJSpinner = new JSpinner(spawnedSpinnerNumberModel);

    private boolean savedNPCTestingCollapsed = false;
    private boolean spawnedNPCTestingCollapsed = false;
    private boolean playerAnimationTestingCollapsed = false;
    private JPanel spawnedTestingPanel;
    private JPanel savedTestingPanel;


    void runSelectedAnimation() {
        try {
            int animationID = Integer.parseInt(playerAnimationJSpinner.getValue().toString());
            this.plugin.runAnimationOnPlayer(animationID);
        }
        catch (Exception e) {
            // Failed to run animation
        }
    }

    void stopSelectedAnimation() {
        try {
            this.plugin.runAnimationOnPlayer(-1);
        }
        catch (Exception e) {
            // Failed to stop animation
        }
    }

    void playAnimationOnAllSaved() {
        int animationID;

        try {
            animationID = Integer.parseInt(savedTestingAnimationJSpinner.getValue().toString());
            this.plugin.runAnimationForAllSavedNPCs(animationID);
        }
        catch (Exception e) {
            return;
        }
    }
    void stopAnimationOnAllSaved() {
        try {
            this.plugin.runAnimationForAllSavedNPCs(-1);
        }
        catch (Exception e) {
            return;
        }
    }

    void playAnimationOnAllSpawned() {
        int animationID;

        try {
            animationID = Integer.parseInt(spawnedTestingAnimationJSpinner.getValue().toString());
            this.plugin.runAnimationForAllSpawnedNPCs(animationID);
        }
        catch (Exception e) {
            return;
        }
    }
    void stopAnimationOnAllSpawned() {
        try {
            this.plugin.runAnimationForAllSpawnedNPCs(-1);
        }
        catch (Exception e) {
            return;
        }
    }

    void playAllGreetings() {
        this.plugin.runGreetingsForAllSavedNPCs();
    }

    void saveSelectedAnimation() {
        int animationID;

        try {
            animationID = Integer.parseInt(playerAnimationJSpinner.getValue().toString());
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(
                this.playerAnimationPanel,
                "Animation ID must be a number",
                "Invalid Animation ID",
                JOptionPane.WARNING_MESSAGE
            );
            return;
        }

        final String result = JOptionPane.showInputDialog(this.playerAnimationPanel, "Name this animation");
        if (Objects.equals(result, "")) {
            JOptionPane.showMessageDialog(
                this.playerAnimationPanel,
                "Name cannot be empty!",
                "Invalid Animation Name",
                JOptionPane.WARNING_MESSAGE
            );
            return;
        }
        if (Objects.equals(result, null)) {
            return;
        }

        SimpleEmote emote = new SimpleEmote(result, animationID);

        if (!this.plugin.addEmoteToSaved(emote)) {
            JOptionPane.showMessageDialog(
                this.playerAnimationPanel,
                "Animation ID has already been saved.",
                "Invalid Animation ID",
                JOptionPane.WARNING_MESSAGE
            );
        }
    }

    void changeTab(String tabName) {
        this.selectedTab = tabName;
        this.pluginNameLabel.setText("NPC Animator - " + tabName);

        if (Objects.equals(tabName, "Animations")) {
            this.playerAnimationPanel.setVisible(true);
            this.savedAnimationsTabHeaderPanel.setVisible(true);

            this.savedNPCAnimationsContainer.setVisible(false);
            this.spawnedNPCAnimationsContainer.setVisible(false);

            this.animationsTabButton.setBackground(ColorScheme.DARKER_GRAY_HOVER_COLOR.darker());
            this.savedTabButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
            this.spawnedTabButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());

            if (Objects.equals(this.selectedEmoteAnimationTab, "Saved")) {
                this.savedAnimationTabButton.setBackground(ColorScheme.DARKER_GRAY_HOVER_COLOR.darker());
                this.defaultAnimationTabButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
                this.savedEmotesListContainer.setVisible(true);
                this.defaultEmotesListContainer.setVisible(false);
            }
            else if (Objects.equals(this.selectedEmoteAnimationTab, "Default")) {
                this.defaultAnimationTabButton.setBackground(ColorScheme.DARKER_GRAY_HOVER_COLOR.darker());
                this.savedAnimationTabButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
                this.savedEmotesListContainer.setVisible(false);
                this.defaultEmotesListContainer.setVisible(true);
            }
        }
        else if (Objects.equals(tabName, "Saved")) {
            this.playerAnimationPanel.setVisible(false);
            this.savedAnimationsTabHeaderPanel.setVisible(false);
            this.savedEmotesListContainer.setVisible(false);
            this.defaultEmotesListContainer.setVisible(false);
            this.savedNPCAnimationsContainer.setVisible(true);
            this.spawnedNPCAnimationsContainer.setVisible(false);

            this.savedTabButton.setBackground(ColorScheme.DARKER_GRAY_HOVER_COLOR.darker());
            this.animationsTabButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
            this.spawnedTabButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
        }
        else if (Objects.equals(tabName, "Spawned")) {
            this.playerAnimationPanel.setVisible(false);
            this.savedAnimationsTabHeaderPanel.setVisible(false);
            this.savedEmotesListContainer.setVisible(false);
            this.defaultEmotesListContainer.setVisible(false);
            this.savedNPCAnimationsContainer.setVisible(false);
            this.spawnedNPCAnimationsContainer.setVisible(true);

            this.spawnedTabButton.setBackground(ColorScheme.DARKER_GRAY_HOVER_COLOR.darker());
            this.animationsTabButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
            this.savedTabButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
        }
    }

    void changePlayerAnimationsTab(String tabName) {
        this.selectedEmoteAnimationTab = tabName;

        if (Objects.equals(tabName, "Default")) {
            this.defaultEmotesListContainer.setVisible(true);
            this.savedEmotesListContainer.setVisible(false);

            this.savedAnimationTabButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
            this.defaultAnimationTabButton.setBackground(ColorScheme.DARKER_GRAY_HOVER_COLOR.darker());
        }
        else if (Objects.equals(tabName, "Saved")) {
            this.defaultEmotesListContainer.setVisible(false);
            this.savedEmotesListContainer.setVisible(true);

            this.savedAnimationTabButton.setBackground(ColorScheme.DARKER_GRAY_HOVER_COLOR.darker());
            this.defaultAnimationTabButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
        }
    }

    public void setPlayerForAnimatorPanel(Player myPlayer) {
        this.myPlayer = myPlayer;
    }


    public NPCAnimatorPanel(final NPCAnimatorPlugin plugin) {
        this.plugin = plugin;

        setBorder(new EmptyBorder(6, 6, 6, 6));
        setBackground(ColorScheme.DARK_GRAY_COLOR);
        setLayout(new BorderLayout());

        final JPanel headerLayoutPanel = new JPanel();
        headerLayoutPanel.setLayout(new BoxLayout(headerLayoutPanel, BoxLayout.Y_AXIS));
        headerLayoutPanel.setBorder(new EmptyBorder(5, 5, 10, 5));
        buildTabHeaderPanel();
        headerLayoutPanel.add(this.tabHeaderPanel);
        this.getScrollPane().setColumnHeaderView(headerLayoutPanel);

        final JPanel layoutPanel = new JPanel();
        layoutPanel.setLayout(new BoxLayout(layoutPanel, BoxLayout.Y_AXIS));
        add(layoutPanel, BorderLayout.NORTH);

        buildPlayerAnimationPanel();
        buildSavedAnimationTabHeaderPanel();
        buildSavedNPCAnimationsPanel();
        buildSpawnedNPCAnimationsPanel();

        layoutPanel.add(this.playerAnimationPanel);
        layoutPanel.add(this.savedAnimationsTabHeaderPanel);
        layoutPanel.add(this.defaultEmotesListContainer);
        layoutPanel.add(this.savedEmotesListContainer);
        layoutPanel.add(savedNPCAnimationsContainer);
        layoutPanel.add(spawnedNPCAnimationsContainer);
    }

    JPanel buildAnimationTestingPanel(String extraHelpLabel, boolean isSaved) {
        JPanel animationTestingPanel = new JPanel();
        animationTestingPanel.setLayout(new BorderLayout(0, 0));
        animationTestingPanel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createMatteBorder(0, 0, 5, 0, ColorScheme.DARKER_GRAY_COLOR),
            BorderFactory.createEmptyBorder(0, 10, 10, 10)
        ));

        JPanel testingHeaderPanel = new JPanel();
        BoxLayout testingLayout = new BoxLayout(testingHeaderPanel, BoxLayout.X_AXIS);
        testingHeaderPanel.setLayout(testingLayout);
        testingHeaderPanel.setBorder(new EmptyBorder(0, 0, 0, 0));

        JPanel testingDetailsPanel = new JPanel();
        GridLayout testingDetailsPanelLayout = new GridLayout();
        if (isSaved) {
            testingDetailsPanelLayout.setRows(4);
        }
        else {
            testingDetailsPanelLayout.setRows(3);
        }
        testingDetailsPanelLayout.setColumns(1);
        testingDetailsPanelLayout.setVgap(5);
        testingDetailsPanel.setLayout(testingDetailsPanelLayout);

        JLabel testingHelpLabel = new JLabel();
        testingHelpLabel.setText("NPC Testing");
        testingHelpLabel.setFont(FontManager.getRunescapeSmallFont());
        testingHelpLabel.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        testingHelpLabel.setMinimumSize(new Dimension(1, testingHelpLabel.getPreferredSize().height));

        JButton collapseButton = new JButton();
        SwingUtil.removeButtonDecorations(collapseButton);
        collapseButton.setIcon(EXPANDED_ICON);
        collapseButton.setSelectedIcon(COLLAPSED_ICON);
        SwingUtil.addModalTooltip(collapseButton, "Expand", "Collapse");
        collapseButton.setBorder(new EmptyBorder(0, 20, 0, 0));
        collapseButton.setContentAreaFilled(false);
        collapseButton.setUI(new BasicButtonUI());

        testingHeaderPanel.add(testingHelpLabel);
        testingHeaderPanel.add(Box.createHorizontalGlue());
        testingHeaderPanel.add(collapseButton);


        JLabel testingExtraHelpLabel = new JLabel();
        testingExtraHelpLabel.setText(extraHelpLabel);
        testingExtraHelpLabel.setFont(FontManager.getRunescapeSmallFont());
        testingExtraHelpLabel.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        testingExtraHelpLabel.setMinimumSize(new Dimension(1, testingExtraHelpLabel.getPreferredSize().height));

        JLabel testingAnimationIDLabel = new JLabel();
        testingAnimationIDLabel.setText("Animation ID");
        testingAnimationIDLabel.setFont(FontManager.getRunescapeSmallFont());
        testingAnimationIDLabel.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        testingAnimationIDLabel.setMinimumSize(new Dimension(1, testingAnimationIDLabel.getPreferredSize().height));

        JButton testingPlayAnimationButton = new JButton();
        SwingUtil.removeButtonDecorations(testingPlayAnimationButton);
        testingPlayAnimationButton.setText("Play");
        testingPlayAnimationButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
        testingPlayAnimationButton.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        testingPlayAnimationButton.setUI(new BasicButtonUI());

        JButton testingStopAnimationButton = new JButton();
        SwingUtil.removeButtonDecorations(testingStopAnimationButton);
        testingStopAnimationButton.setText("Stop");
        testingStopAnimationButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
        testingStopAnimationButton.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        testingStopAnimationButton.setUI(new BasicButtonUI());

        if (isSaved) {
            testingPlayAnimationButton.addActionListener(evt -> playAnimationOnAllSaved());
            testingStopAnimationButton.addActionListener(evt -> stopAnimationOnAllSaved());
        }
        else {
            testingPlayAnimationButton.addActionListener(evt -> playAnimationOnAllSpawned());
            testingStopAnimationButton.addActionListener(evt -> stopAnimationOnAllSpawned());
        }


        JButton testingPlayGreetingsAnimationButton = new JButton();
        SwingUtil.removeButtonDecorations(testingPlayGreetingsAnimationButton);
        testingPlayGreetingsAnimationButton.setText("Play Greetings");
        testingPlayGreetingsAnimationButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
        testingPlayGreetingsAnimationButton.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        testingPlayGreetingsAnimationButton.setUI(new BasicButtonUI());
        testingPlayGreetingsAnimationButton.addActionListener(evt -> playAllGreetings());

        JPanel animationTestingBoxLayoutPanel = new JPanel();
        animationTestingBoxLayoutPanel.setLayout(new BoxLayout(animationTestingBoxLayoutPanel, BoxLayout.X_AXIS));
        animationTestingBoxLayoutPanel.setBorder(new EmptyBorder(0, 0, 5, 0));

        savedTestingAnimationJSpinner.setFont(FontManager.getRunescapeSmallFont());
        spawnedTestingAnimationJSpinner.setFont(FontManager.getRunescapeSmallFont());

        GridLayout collapsedTestingPanelLayout = new GridLayout();
        collapsedTestingPanelLayout.setRows(1);
        collapsedTestingPanelLayout.setColumns(1);
        collapsedTestingPanelLayout.setVgap(5);

        if (isSaved) {
            collapseButton.addActionListener(evt -> {
                if (savedNPCTestingCollapsed) {
                    testingDetailsPanel.setVisible(true);
                    savedNPCTestingCollapsed = false;
                    collapseButton.setSelected(false);
                }
                else {
                    testingDetailsPanel.setVisible(false);
                    savedNPCTestingCollapsed = true;
                    collapseButton.setSelected(true);
                }
            });
            animationTestingBoxLayoutPanel.add(savedTestingAnimationJSpinner);
        }
        else {
            collapseButton.addActionListener(evt -> {
                if (spawnedNPCTestingCollapsed) {
                    testingDetailsPanel.setVisible(true);
                    spawnedNPCTestingCollapsed = false;
                    collapseButton.setSelected(false);
                }
                else {
                    testingDetailsPanel.setVisible(false);
                    spawnedNPCTestingCollapsed = true;
                    collapseButton.setSelected(true);
                }
            });
            animationTestingBoxLayoutPanel.add(spawnedTestingAnimationJSpinner);
        }

        animationTestingBoxLayoutPanel.add(Box.createRigidArea(new Dimension(10, 0)));
        animationTestingBoxLayoutPanel.add(testingPlayAnimationButton);
        animationTestingBoxLayoutPanel.add(Box.createRigidArea(new Dimension(10, 0)));
        animationTestingBoxLayoutPanel.add(testingStopAnimationButton);

        testingDetailsPanel.add(testingExtraHelpLabel);
        testingDetailsPanel.add(testingAnimationIDLabel);
        testingDetailsPanel.add(animationTestingBoxLayoutPanel);
        if (isSaved) {
            testingDetailsPanel.add(testingPlayGreetingsAnimationButton);
            savedNPCTestingCollapsed = true;
        }
        else {
            spawnedNPCTestingCollapsed = true;
        }
        testingDetailsPanel.setVisible(false);
        collapseButton.setSelected(true);

        animationTestingPanel.add(testingHeaderPanel, BorderLayout.NORTH);
        animationTestingPanel.add(testingDetailsPanel, BorderLayout.CENTER);

        return animationTestingPanel;
    }

    void buildSavedNPCAnimationsPanel() {
        savedNPCAnimationsContainer.setLayout(new BoxLayout(savedNPCAnimationsContainer, BoxLayout.Y_AXIS));
        savedNPCAnimationsContainer.setBorder(new EmptyBorder(0, 0, 0, 0));
        savedNPCAnimationsContainer.setVisible(false);

        this.savedTestingPanel = buildAnimationTestingPanel("Play animation on all visible saved NPCs", true);
        savedNPCAnimationsContainer.add(this.savedTestingPanel);
    }

    void buildSpawnedNPCAnimationsPanel() {
        spawnedNPCAnimationsContainer.setLayout(new BoxLayout(spawnedNPCAnimationsContainer, BoxLayout.Y_AXIS));
        spawnedNPCAnimationsContainer.setBorder(new EmptyBorder(0, 0, 0, 0));
        spawnedNPCAnimationsContainer.setVisible(false);

        this.spawnedTestingPanel = buildAnimationTestingPanel("Play animation on all visible NPCs", false);
        spawnedNPCAnimationsContainer.add(this.spawnedTestingPanel);
    }

    private void buildPlayerAnimationPanel() {
        this.playerAnimationPanel.setLayout(new BoxLayout(this.playerAnimationPanel, BoxLayout.Y_AXIS));
        this.playerAnimationPanel.setBorder(new EmptyBorder(0, 0, 0, 0));
        this.playerAnimationPanel.setVisible(true);

        buildDetailsContainer();
        this.playerAnimationPanel.add(this.playerAnimationDetailsPanel);
    }

    void buildDetailsContainer() {
        this.playerAnimationDetailsPanel.setLayout(new BorderLayout(0, 0));
        this.playerAnimationDetailsPanel.setBorder(new EmptyBorder(0, 10, 10, 10));

        buildDetailsComponents();

        JPanel testingHeaderPanel = new JPanel();
        BoxLayout testingLayout = new BoxLayout(testingHeaderPanel, BoxLayout.X_AXIS);
        testingHeaderPanel.setLayout(testingLayout);
        testingHeaderPanel.setBorder(new EmptyBorder(0, 0, 0, 0));

        JPanel testingDetailsPanel = new JPanel();
        GridLayout testingDetailsPanelLayout = new GridLayout();
        testingDetailsPanelLayout.setRows(4);
        testingDetailsPanelLayout.setColumns(1);
        testingDetailsPanelLayout.setVgap(5);
        testingDetailsPanel.setLayout(testingDetailsPanelLayout);

        JLabel testingHelpLabel = new JLabel();
        testingHelpLabel.setText("Player Animations");
        testingHelpLabel.setFont(FontManager.getRunescapeSmallFont());
        testingHelpLabel.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        testingHelpLabel.setMinimumSize(new Dimension(1, testingHelpLabel.getPreferredSize().height));

        JButton collapseButton = new JButton();
        SwingUtil.removeButtonDecorations(collapseButton);
        collapseButton.setIcon(EXPANDED_ICON);
        collapseButton.setSelectedIcon(COLLAPSED_ICON);
        SwingUtil.addModalTooltip(collapseButton, "Expand", "Collapse");
        collapseButton.setBorder(new EmptyBorder(0, 20, 0, 0));
        collapseButton.setContentAreaFilled(false);
        collapseButton.setUI(new BasicButtonUI());

        testingHeaderPanel.add(testingHelpLabel);
        testingHeaderPanel.add(Box.createHorizontalGlue());
        testingHeaderPanel.add(collapseButton);

        JLabel testingExtraHelpLabel = new JLabel();
        testingExtraHelpLabel.setText("Test and save animations");
        testingExtraHelpLabel.setFont(FontManager.getRunescapeSmallFont());
        testingExtraHelpLabel.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        testingExtraHelpLabel.setMinimumSize(new Dimension(1, testingExtraHelpLabel.getPreferredSize().height));

        JLabel testingAnimationIDLabel = new JLabel();
        testingAnimationIDLabel.setText("Animation ID");
        testingAnimationIDLabel.setFont(FontManager.getRunescapeSmallFont());
        testingAnimationIDLabel.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        testingAnimationIDLabel.setMinimumSize(new Dimension(1, testingAnimationIDLabel.getPreferredSize().height));

        JButton testingPlayAnimationButton = new JButton();
        SwingUtil.removeButtonDecorations(testingPlayAnimationButton);
        testingPlayAnimationButton.setText("Play");
        testingPlayAnimationButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
        testingPlayAnimationButton.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        testingPlayAnimationButton.setUI(new BasicButtonUI());

        JButton testingStopAnimationButton = new JButton();
        SwingUtil.removeButtonDecorations(testingStopAnimationButton);
        testingStopAnimationButton.setText("Stop");
        testingStopAnimationButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
        testingStopAnimationButton.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        testingStopAnimationButton.setUI(new BasicButtonUI());


        testingPlayAnimationButton.addActionListener(evt -> runSelectedAnimation());
        testingStopAnimationButton.addActionListener(evt -> stopSelectedAnimation());


        JButton testingSaveAnimationButton = new JButton();
        SwingUtil.removeButtonDecorations(testingSaveAnimationButton);
        testingSaveAnimationButton.setText("Save Animation");
        testingSaveAnimationButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
        testingSaveAnimationButton.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        testingSaveAnimationButton.setUI(new BasicButtonUI());
        testingSaveAnimationButton.addActionListener(evt -> saveSelectedAnimation());

        GridLayout collapsedTestingPanelLayout = new GridLayout();
        collapsedTestingPanelLayout.setRows(1);
        collapsedTestingPanelLayout.setColumns(1);
        collapsedTestingPanelLayout.setVgap(5);

        collapseButton.addActionListener(evt -> {
            if (playerAnimationTestingCollapsed) {
                testingDetailsPanel.setVisible(true);
                playerAnimationTestingCollapsed = false;
                collapseButton.setSelected(false);
            }
            else {
                testingDetailsPanel.setVisible(false);
                playerAnimationTestingCollapsed = true;
                collapseButton.setSelected(true);
            }
        });

        JPanel animationTestingBoxLayoutPanel = new JPanel();
        animationTestingBoxLayoutPanel.setLayout(new BoxLayout(animationTestingBoxLayoutPanel, BoxLayout.X_AXIS));
        animationTestingBoxLayoutPanel.setBorder(new EmptyBorder(0, 0, 5, 0));

        this.playerAnimationJSpinner.setFont(FontManager.getRunescapeSmallFont());

        animationTestingBoxLayoutPanel.add(this.playerAnimationJSpinner);
        animationTestingBoxLayoutPanel.add(Box.createRigidArea(new Dimension(10, 0)));
        animationTestingBoxLayoutPanel.add(testingPlayAnimationButton);
        animationTestingBoxLayoutPanel.add(Box.createRigidArea(new Dimension(10, 0)));
        animationTestingBoxLayoutPanel.add(testingStopAnimationButton);

        testingDetailsPanel.add(testingExtraHelpLabel);
        testingDetailsPanel.add(testingAnimationIDLabel);
        testingDetailsPanel.add(animationTestingBoxLayoutPanel);
        testingDetailsPanel.add(testingSaveAnimationButton);
        testingDetailsPanel.setVisible(false);
        playerAnimationTestingCollapsed = true;
        collapseButton.setSelected(true);

        this.playerAnimationDetailsPanel.add(testingHeaderPanel, BorderLayout.NORTH);
        this.playerAnimationDetailsPanel.add(testingDetailsPanel, BorderLayout.CENTER);
    }

    void buildDetailsComponents() {
        this.defaultEmotesListContainer.setLayout(new BoxLayout(this.defaultEmotesListContainer, BoxLayout.Y_AXIS));
        this.savedEmotesListContainer.setLayout(new BoxLayout(this.savedEmotesListContainer, BoxLayout.Y_AXIS));

        StandardEmotes standardEmotes = new StandardEmotes();
        ArrayList<SimpleEmote> sortedEmoteList = standardEmotes.getSortedEmoteArrayList();

        sortedEmoteList.forEach(simpleEmote -> {
            EmoteAnimationRow emoteRow = new EmoteAnimationRow(plugin, simpleEmote, true);
            this.defaultEmotesListContainer.add(emoteRow);
        });

        this.defaultEmotesListContainer.setVisible(false);
    }

    private void buildTabHeaderPanel() {
        this.tabHeaderPanel.setBorder(new EmptyBorder(0, 0, 0, 0));
        this.tabHeaderPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);

        GridLayout layout = new GridLayout();
        layout.setRows(1);
        layout.setColumns(3);
        this.tabHeaderPanel.setLayout(layout);
        this.tabHeaderPanel.setVisible(true);

        Font rsSmallFont = FontManager.getRunescapeSmallFont();
        Font tabButtonFont = new Font(rsSmallFont.getFontName(), rsSmallFont.getStyle(), 14);

        SwingUtil.removeButtonDecorations(this.animationsTabButton);
        this.animationsTabButton.setText("Animations");
        this.animationsTabButton.setFont(tabButtonFont);
        this.animationsTabButton.setBackground(ColorScheme.DARKER_GRAY_HOVER_COLOR.darker());
        this.animationsTabButton.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        this.animationsTabButton.setPreferredSize(new Dimension(this.animationsTabButton.getPreferredSize().width, 30));
        this.animationsTabButton.setMargin(new Insets(0, 0, 0, 0));
        this.animationsTabButton.setUI(new BasicButtonUI());
        this.animationsTabButton.addActionListener(evt -> changeTab("Animations"));
        this.tabHeaderPanel.add(this.animationsTabButton);

        SwingUtil.removeButtonDecorations(this.savedTabButton);
        this.savedTabButton.setText("Saved");
        this.savedTabButton.setFont(tabButtonFont);
        this.savedTabButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
        this.savedTabButton.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        this.savedTabButton.setUI(new BasicButtonUI());
        this.savedTabButton.addActionListener(evt -> changeTab("Saved"));
        this.tabHeaderPanel.add(this.savedTabButton);

        SwingUtil.removeButtonDecorations(this.spawnedTabButton);
        this.spawnedTabButton.setText("Spawned");
        this.spawnedTabButton.setFont(tabButtonFont);
        this.spawnedTabButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
        this.spawnedTabButton.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        this.spawnedTabButton.setUI(new BasicButtonUI());
        this.spawnedTabButton.addActionListener(evt -> changeTab("Spawned"));
        this.tabHeaderPanel.add(this.spawnedTabButton);
    }

    private void buildSavedAnimationTabHeaderPanel() {
        this.savedAnimationsTabHeaderPanel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createMatteBorder(5, 0, 0, 0, ColorScheme.DARKER_GRAY_COLOR),
            BorderFactory.createEmptyBorder(8, 10, 8, 10)
        ));

        GridLayout layout = new GridLayout();
        layout.setRows(1);
        layout.setColumns(2);
        this.savedAnimationsTabHeaderPanel.setLayout(layout);
        this.savedAnimationsTabHeaderPanel.setVisible(true);

        Font rsSmallFont = FontManager.getRunescapeSmallFont();
        Font tabButtonFont = new Font(rsSmallFont.getFontName(), rsSmallFont.getStyle(), 14);

        SwingUtil.removeButtonDecorations(this.savedAnimationTabButton);
        this.savedAnimationTabButton.setText("Saved");
        this.savedAnimationTabButton.setFont(tabButtonFont);
        this.savedAnimationTabButton.setBackground(ColorScheme.DARKER_GRAY_HOVER_COLOR.darker());
        this.savedAnimationTabButton.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        this.savedAnimationTabButton.setUI(new BasicButtonUI());
        this.savedAnimationTabButton.addActionListener(evt -> changePlayerAnimationsTab("Saved"));
        this.savedAnimationsTabHeaderPanel.add(this.savedAnimationTabButton);

        SwingUtil.removeButtonDecorations(this.defaultAnimationTabButton);
        this.defaultAnimationTabButton.setText("Default");
        this.defaultAnimationTabButton.setFont(tabButtonFont);
        this.defaultAnimationTabButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
        this.defaultAnimationTabButton.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        this.defaultAnimationTabButton.setPreferredSize(new Dimension(this.defaultAnimationTabButton.getPreferredSize().width, 30));
        this.defaultAnimationTabButton.setMargin(new Insets(0, 0, 0, 0));
        this.defaultAnimationTabButton.setUI(new BasicButtonUI());
        this.defaultAnimationTabButton.addActionListener(evt -> changePlayerAnimationsTab("Default"));
        this.savedAnimationsTabHeaderPanel.add(this.defaultAnimationTabButton);
    }

    public void loadHeaderIcon(BufferedImage img) {
        ImageIcon imageIcon = new ImageIcon(img.getScaledInstance(24, 32, Image.SCALE_SMOOTH));
        pluginIcon.setIcon(imageIcon);
    }

    public void addFromSaveFile(HashMap<Integer, AnimatedNPC> saveList) {
        saveList.entrySet().stream()
        .sorted(Comparator.comparing(k -> k.getValue().getName()))
        .forEach(k -> {
            NPCAnimationRow npcRow = new NPCAnimationRow(plugin, k.getValue(), true);
            this.savedNPCAnimationsContainer.add(npcRow);
            this.savedAnimatedNPCRowMap.put(k.getValue().getId(), npcRow);
        });

        this.savedNPCAnimationsContainer.revalidate();
    }

    public void addSpawnedNPC(final AnimatedNPC animatedNPC) {
        NPCAnimationRow npcRow = new NPCAnimationRow(plugin, animatedNPC, false);
        this.spawnedNPCAnimationsContainer.add(npcRow);
        this.spawnedNPCAnimationsContainer.revalidate();
        this.spawnedAnimatedNPCRowMap.put(animatedNPC.getId(), npcRow);
    }

    public void updateSpawnedNPC(final AnimatedNPC animatedNPC, boolean isIncrease) {
        NPCAnimationRow spawnedNPCRow = this.spawnedAnimatedNPCRowMap.get(animatedNPC.getId());

        if (isIncrease) {
            spawnedNPCRow.increaseIDCount();
        }
        else {
            spawnedNPCRow.decreaseIDCount();
        }
    }

    public void removeSpawnedNPC (int npcID) {
        NPCAnimationRow selectedRow = this.spawnedAnimatedNPCRowMap.get(npcID);
        this.spawnedNPCAnimationsContainer.remove(selectedRow);
        this.spawnedNPCAnimationsContainer.revalidate();
    }

    public void removeAllSpawnedNPCs() {
        this.spawnedNPCAnimationsContainer.removeAll();
        this.spawnedNPCAnimationsContainer.add(this.spawnedTestingPanel);
        this.spawnedNPCAnimationsContainer.revalidate();
    }

    public void addSavedNPC(final AnimatedNPC animatedNPC) {
        NPCAnimationRow npcRow = new NPCAnimationRow(plugin, animatedNPC, true);
        npcRow.setSavedNPCVisible(true);
        this.savedNPCAnimationsContainer.add(npcRow);
        this.savedNPCAnimationsContainer.revalidate();
        this.savedAnimatedNPCRowMap.put(animatedNPC.getId(), npcRow);
    }

    public void setSavedNPCVisible(final int npcID, boolean isVisible) {
        NPCAnimationRow savedNPCRow = this.savedAnimatedNPCRowMap.get(npcID);
        savedNPCRow.setSavedNPCVisible(isVisible);
    }

    public void resetAllSavedNPCRows() {
        for (NPCAnimationRow row : this.savedAnimatedNPCRowMap.values()) {
            row.setSavedNPCVisible(false);
        }
        this.savedNPCAnimationsContainer.revalidate();
    }

    public void updateSavedNPC(final AnimatedNPC animatedNPC) {
        NPCAnimationRow savedNPCRow = this.savedAnimatedNPCRowMap.get(animatedNPC.getId());
        savedNPCRow.updateGreetingsComponents(animatedNPC);
        savedNPCRow.revalidate();
        this.savedNPCAnimationsContainer.revalidate();
    }

    public void removeSavedNPC(final NPCAnimationRow row) {
        this.savedNPCAnimationsContainer.remove(row);
        this.savedNPCAnimationsContainer.revalidate();
    }

    public void addEmotesFromSaveFile(HashMap<Integer, SimpleEmote> saveList) {
        saveList.entrySet().stream()
        .sorted(Comparator.comparing(k -> k.getValue().getName()))
        .forEach(k -> {
            EmoteAnimationRow emoteRow = new EmoteAnimationRow(plugin, k.getValue(), false);
            this.savedEmotesListContainer.add(emoteRow);
        });

        this.savedEmotesListContainer.revalidate();
    }

    public void addSavedEmote(final SimpleEmote emote) {
        EmoteAnimationRow emoteRow = new EmoteAnimationRow(plugin, emote, false);
        this.savedEmotesListContainer.add(emoteRow);
        this.savedEmotesListContainer.revalidate();
    }

    public void removeSavedEmote(final EmoteAnimationRow row) {
        this.savedEmotesListContainer.remove(row);
        this.savedEmotesListContainer.revalidate();
    }
}
package com.npcanimator.views;

import com.npcanimator.NPCAnimatorPlugin;
import com.npcanimator.utils.AnimatedNPC;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.util.SwingUtil;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicButtonUI;
import java.awt.*;

import static com.npcanimator.utils.Icons.COLLAPSED_ICON;
import static com.npcanimator.utils.Icons.EXPANDED_ICON;

public class NPCAnimationRow extends JPanel {

    private final NPCAnimatorPlugin plugin;
    private final AnimatedNPC animatedNPC;

    /*
        headerContainer
        detailsContainer
        greetingsContainer
     */

    private final JPanel headerContainer = new JPanel();
        private final JButton collapseButton = new JButton();
        private final String npcName;
        private final JLabel npcNameLabel = new JLabel();

    private final JPanel detailsContainer = new JPanel();
        private final SpinnerNumberModel testingSpinnerNumberModel = new SpinnerNumberModel(1, 0, 10000, 1);
        private final JSpinner animationJSpinner = new JSpinner(testingSpinnerNumberModel);
        private final JLabel animationLabel = new JLabel();
        private final JButton playAnimationButton = new JButton();
        private final JButton stopAnimationButton = new JButton();

    private final JPanel greetingsContainer = new JPanel();
        private final JLabel greetingLabel = new JLabel();
        private final JCheckBox greetingCheckbox = new JCheckBox();
        private final SpinnerNumberModel greetingSpinnerNumberModel = new SpinnerNumberModel(1, 0, 10000, 1);
        private final JSpinner greetingJSpinner = new JSpinner(greetingSpinnerNumberModel);
        private final JButton playGreetingAnimationButton = new JButton();
        private final JButton stopGreetingAnimationButton = new JButton();

    private final JPanel footerContainer = new JPanel();
        private final JButton saveAnimationButton = new JButton();

    private static final String DELETE_NPC_WARNING_TEXT = "Delete %s from your saved NPCs?";
    private static final String SAVE_NPC_WARNING_TEXT = "Save %s's animation?";

    private static final Color expandedBGColor = new Color(48, 48, 48);

    private int idCount = 1;
    private boolean npcIsVisible;

    public NPCAnimationRow(final NPCAnimatorPlugin plugin, AnimatedNPC animatedNPC, boolean isSaved) {
        this.plugin = plugin;
        this.animatedNPC = animatedNPC;

        setLayout(new BorderLayout(0, 0));
        setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 1, 0, ColorScheme.DARKER_GRAY_COLOR.darker()),
                BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));

        buildHeaderContainer();
        buildDetailsContainer();
        buildGreetingsContainer();

        this.npcName = animatedNPC.getName();
        this.npcNameLabel.setText(npcName);
        this.animationJSpinner.setValue(0);
        this.greetingCheckbox.setSelected(animatedNPC.isGreetingEnabled());
        this.greetingJSpinner.setValue(animatedNPC.getGreetingID());

        add(this.headerContainer, BorderLayout.NORTH);
        add(this.detailsContainer, BorderLayout.CENTER);
        add(this.greetingsContainer, BorderLayout.SOUTH);
        collapse();
        if (isSaved) {
            addDeleteMenu();
        }
    }

    public void increaseIDCount () {
        this.idCount += 1;
        this.npcNameLabel.setText(npcName + "(" + this.idCount + ")");
    }
    public void decreaseIDCount () {
        this.idCount -= 1;
        if (this.idCount == 1) {
            this.npcNameLabel.setText(npcName);
        }
        else {
            this.npcNameLabel.setText(npcName + "(" + this.idCount + ")");
        }
    }

    void addDeleteMenu() {
        final JMenuItem delete = new JMenuItem("Delete NPC");
        delete.addActionListener(e -> {
            final int result = JOptionPane.showOptionDialog(
                this, String.format(DELETE_NPC_WARNING_TEXT, this.animatedNPC.getName()),
                "Delete NPC", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE,
                null, new String[]{"Yes", "No"},
                "No"
            );

            if (result != JOptionPane.YES_OPTION) {
                return;
            }
            deleteNPCAnimation();
        });

        // Create popup menu with a delete NPC button
        final JPopupMenu popupMenu = new JPopupMenu();
        popupMenu.setBorder(new EmptyBorder(5, 5, 5, 5));
        popupMenu.add(delete);
        this.setComponentPopupMenu(popupMenu);
    }

    boolean isCollapsed() {
        return collapseButton.isSelected();
    }

    void collapse() {
        if (!isCollapsed()) {
            collapseButton.setSelected(true);
            detailsContainer.setVisible(false);
            greetingsContainer.setVisible(false);
            this.setBackground(ColorScheme.DARK_GRAY_COLOR);
            this.headerContainer.setBackground(ColorScheme.DARK_GRAY_COLOR);
        }
    }

    void expand() {
        if (isCollapsed()) {
            collapseButton.setSelected(false);
            detailsContainer.setVisible(true);
            greetingsContainer.setVisible(true);
            this.setBackground(expandedBGColor);
            this.headerContainer.setBackground(expandedBGColor);
        }
    }

    void toggleCollapse() {
        if (isCollapsed()) {
            expand();
        }
        else {
            collapse();
        }
    }

    void buildHeaderContainer() {
        BoxLayout layout = new BoxLayout(this.headerContainer, BoxLayout.X_AXIS);

        this.headerContainer.setLayout(layout);
        this.headerContainer.setBorder(new EmptyBorder(0, 0, 0, 0));

        buildHeaderComponents();

        this.headerContainer.add(this.npcNameLabel);
        this.headerContainer.add(Box.createHorizontalGlue());
        this.headerContainer.add(this.collapseButton);
    }

    void buildHeaderComponents() {
        SwingUtil.removeButtonDecorations(this.collapseButton);
        this.collapseButton.setIcon(EXPANDED_ICON);
        this.collapseButton.setSelectedIcon(COLLAPSED_ICON);
        SwingUtil.addModalTooltip(this.collapseButton, "Expand", "Collapse");
        this.collapseButton.setBorder(new EmptyBorder(0, 20, 0, 0));
        this.collapseButton.setContentAreaFilled(false);
        this.collapseButton.setUI(new BasicButtonUI());
        this.collapseButton.addActionListener(evt -> toggleCollapse());

        this.npcNameLabel.setText("NPC Name");
        this.npcNameLabel.setFont(FontManager.getRunescapeSmallFont());
        this.npcNameLabel.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        this.npcNameLabel.setMinimumSize(new Dimension(1, this.npcNameLabel.getPreferredSize().height));
    }

    public void setSavedNPCVisible(boolean isVisible) {
        if (isVisible != npcIsVisible) {
            npcIsVisible = isVisible;
            if (isVisible) {
                this.npcNameLabel.setForeground(ColorScheme.GRAND_EXCHANGE_LIMIT);
            }
            else {
                this.npcNameLabel.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
            }
        }
    }

    void buildDetailsContainer() {
        GridLayout layout = new GridLayout();
        layout.setRows(2);
        layout.setColumns(1);
        layout.setVgap(0);
        this.detailsContainer.setLayout(layout);
        this.detailsContainer.setBorder(new EmptyBorder(0, 0, 0, 0));
        this.detailsContainer.setBackground(expandedBGColor);

        JPanel animationTestingBoxLayoutPanel = new JPanel();
        animationTestingBoxLayoutPanel.setLayout(new BoxLayout(animationTestingBoxLayoutPanel, BoxLayout.X_AXIS));
        animationTestingBoxLayoutPanel.setBorder(new EmptyBorder(0, 0, 5, 0));
        animationTestingBoxLayoutPanel.setBackground(expandedBGColor);

        buildDetailsComponents();

        this.detailsContainer.add(this.animationLabel);
        animationTestingBoxLayoutPanel.add(this.animationJSpinner);
        animationTestingBoxLayoutPanel.add(Box.createRigidArea(new Dimension(10, 0)));
        animationTestingBoxLayoutPanel.add(this.playAnimationButton);
        animationTestingBoxLayoutPanel.add(Box.createRigidArea(new Dimension(10, 0)));
        animationTestingBoxLayoutPanel.add(this.stopAnimationButton);
        this.detailsContainer.add(animationTestingBoxLayoutPanel);
    }

    void buildDetailsComponents() {
        this.animationLabel.setText("Animation Testing");
        this.animationLabel.setFont(FontManager.getRunescapeSmallFont());
        this.animationLabel.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        this.animationLabel.setMinimumSize(new Dimension(1, this.animationLabel.getPreferredSize().height));

        SwingUtil.removeButtonDecorations(this.playAnimationButton);
        this.playAnimationButton.setText("Play");
        this.playAnimationButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
        this.playAnimationButton.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        this.playAnimationButton.setUI(new BasicButtonUI());
        this.playAnimationButton.addActionListener(evt -> runSelectedAnimation());

        SwingUtil.removeButtonDecorations(this.stopAnimationButton);
        this.stopAnimationButton.setText("Stop");
        this.stopAnimationButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
        this.stopAnimationButton.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        this.stopAnimationButton.setUI(new BasicButtonUI());
        this.stopAnimationButton.addActionListener(evt -> stopSelectedAnimation());

        this.animationJSpinner.setFont(FontManager.getRunescapeSmallFont());
    }

    void runSelectedAnimation() {
        try {
            int animationID = Integer.parseInt(animationJSpinner.getValue().toString());
            this.animatedNPC.setAnimation(animationID);
        }
        catch (Exception e) {
            // Failed to run selected animation
        }
    }

    void runGreetingAnimation() {
        try {
            int animationID = Integer.parseInt(greetingJSpinner.getValue().toString());
            this.animatedNPC.setAnimation(animationID);
        }
        catch (Exception e) {
            // Failed to run greeting animation
        }
    }

    void stopSelectedAnimation() {
        try {
            this.animatedNPC.stopAnimation();
        }
        catch (Exception e) {
            // Failed to stop the NPC animation
        }
    }

    void buildGreetingsContainer() {
        buildGreetingsComponents();
        buildFooterContainer();

        GridLayout layout = new GridLayout();
        layout.setRows(4);
        layout.setColumns(1);
        layout.setVgap(5);
        this.greetingsContainer.setLayout(layout);
        this.greetingsContainer.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createEmptyBorder(5, 0, 5, 0),
                BorderFactory.createMatteBorder(1, 0, 0, 0, ColorScheme.MEDIUM_GRAY_COLOR)
        ));
        this.greetingsContainer.setBackground(expandedBGColor);

        JPanel animationTestingBoxLayoutPanel = new JPanel();
        animationTestingBoxLayoutPanel.setLayout(new BoxLayout(animationTestingBoxLayoutPanel, BoxLayout.X_AXIS));
        animationTestingBoxLayoutPanel.setBorder(new EmptyBorder(0, 0, 5, 0));
        animationTestingBoxLayoutPanel.setBackground(expandedBGColor);

        this.greetingsContainer.add(this.greetingLabel);
        this.greetingsContainer.add(this.greetingCheckbox);
        animationTestingBoxLayoutPanel.add(this.greetingJSpinner);
        animationTestingBoxLayoutPanel.add(Box.createRigidArea(new Dimension(10, 0)));
        animationTestingBoxLayoutPanel.add(this.playGreetingAnimationButton);
        animationTestingBoxLayoutPanel.add(Box.createRigidArea(new Dimension(10, 0)));
        animationTestingBoxLayoutPanel.add(this.stopGreetingAnimationButton);
        this.greetingsContainer.add(animationTestingBoxLayoutPanel);
        this.greetingsContainer.add(this.saveAnimationButton);
    }

    void updateGreetingsComponents(AnimatedNPC animatedNPC) {
        this.greetingCheckbox.setSelected(animatedNPC.isGreetingEnabled());
        this.greetingJSpinner.setValue(animatedNPC.getGreetingID());
    }

    void buildGreetingsComponents() {
        this.greetingLabel.setText("Greeting Animation");
        this.greetingLabel.setFont(FontManager.getRunescapeSmallFont());
        this.greetingLabel.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        this.greetingLabel.setMinimumSize(new Dimension(1, this.greetingLabel.getPreferredSize().height));
        this.greetingLabel.setBorder(new EmptyBorder(5,0,0,0));

        this.greetingCheckbox.setText("Enabled");
        this.greetingCheckbox.setFont(FontManager.getRunescapeSmallFont());
        this.greetingCheckbox.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        this.greetingCheckbox.setMinimumSize(new Dimension(1, this.greetingCheckbox.getPreferredSize().height));
        this.greetingCheckbox.setMargin(new Insets(0, 0, 0, 0));

        this.greetingJSpinner.setFont(FontManager.getRunescapeSmallFont());

        SwingUtil.removeButtonDecorations(this.playGreetingAnimationButton);
        this.playGreetingAnimationButton.setText("Play");
        this.playGreetingAnimationButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
        this.playGreetingAnimationButton.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        this.playGreetingAnimationButton.setUI(new BasicButtonUI());
        this.playGreetingAnimationButton.addActionListener(evt -> runGreetingAnimation());

        SwingUtil.removeButtonDecorations(this.stopGreetingAnimationButton);
        this.stopGreetingAnimationButton.setText("Stop");
        this.stopGreetingAnimationButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
        this.stopGreetingAnimationButton.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        this.stopGreetingAnimationButton.setUI(new BasicButtonUI());
        this.stopGreetingAnimationButton.addActionListener(evt -> stopSelectedAnimation());
    }

    void buildFooterContainer() {
        BoxLayout layout = new BoxLayout(this.footerContainer, BoxLayout.X_AXIS);
        this.footerContainer.setLayout(layout);
        this.footerContainer.setBorder(new EmptyBorder(15, 0, 0, 0));

        buildFooterComponents();

        this.footerContainer.add(Box.createHorizontalGlue());
        this.footerContainer.add(this.saveAnimationButton);
    }

    void buildFooterComponents() {
        SwingUtil.removeButtonDecorations(this.saveAnimationButton);
        this.saveAnimationButton.setText("Save");
        this.saveAnimationButton.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
        this.saveAnimationButton.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        this.saveAnimationButton.setUI(new BasicButtonUI());
        this.saveAnimationButton.addActionListener(evt -> saveNPCAnimation());
    }

    void saveNPCAnimation() {
        boolean greetingEnabled = this.greetingCheckbox.isSelected();
        int greetingAnimationID;

        try {
            greetingAnimationID = Integer.parseInt(greetingJSpinner.getValue().toString());
        }
        catch (Exception e) {
            greetingAnimationID = -1;
        }

        final int result = JOptionPane.showOptionDialog(
            this, String.format(SAVE_NPC_WARNING_TEXT, this.animatedNPC.getName()),
            "Save Animation", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE,
            null, new String[]{"Yes", "No"},
            "No"
        );

        if (result != JOptionPane.YES_OPTION) {
            return;
        }

        try {
            this.animatedNPC.setGreetingEnabled(greetingEnabled);
            this.animatedNPC.setGreeting(greetingAnimationID);
            this.plugin.addNPCToSaved(this.animatedNPC);

            JOptionPane.showMessageDialog(
                this,
                "NPC Animation Saved",
                "Saved",
                JOptionPane.WARNING_MESSAGE
            );

            collapse();
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(
                this,
                "Failed to save NPC Animation",
                "Save Failed",
                JOptionPane.ERROR_MESSAGE
            );
        }

    }

    void deleteNPCAnimation() {
        this.plugin.deleteNPCFromSaved(this.animatedNPC, this);
    }
}

package com.npcanimator.utils;

import net.runelite.client.util.ImageUtil;

import javax.swing.*;
import java.awt.image.BufferedImage;

public class Icons {
    public static final BufferedImage NAV_BUTTON = ImageUtil.loadImageResource(Icons.class, "/cheer_icon.png");
    final static BufferedImage collapsedImage = ImageUtil.loadImageResource(Icons.class, "/collapsed_icon.png");
    final static BufferedImage expandedImage = ImageUtil.loadImageResource(Icons.class, "/expanded_icon.png");

    public static final ImageIcon COLLAPSED_ICON = new ImageIcon(collapsedImage);
    public static final ImageIcon EXPANDED_ICON = new ImageIcon(expandedImage);
}
package com.npcanimator.utils;

import com.google.gson.JsonObject;
import net.runelite.api.NPC;

import java.util.ArrayList;

public class AnimatedNPC {

    private NPC npc;
    private final String npcName;
    private final int npcID;

    private boolean greetingEnabled;
    private int greetingID;

    private int idCount = 1;

    private final ArrayList<NPC> npcList = new ArrayList<>();


    // Create an AnimatedNPC object from the UI
    public AnimatedNPC (final NPC npc) {
        this.npcID = npc.getId();
        this.npc = npc;
        this.npcName = npc.getName();
        this.npcList.add(npc);
    }

    // Create an AnimatedNPC object from a JSON Object
    public AnimatedNPC (JsonObject jsonObject){
        this.npcID = jsonObject.get("npcID").getAsInt();
        this.npcName = jsonObject.get("npcName").getAsString();
        this.greetingEnabled = jsonObject.get("greetingEnabled").getAsBoolean();
        this.greetingID = jsonObject.get("greetingID").getAsInt();
    }

    public void increaseIDCount (NPC npc) {
        this.idCount += 1;
        this.npcList.add(npc);
    }
    public void decreaseIDCount(NPC npc) {
        this.idCount -= 1;
        this.npcList.remove(npc);
    }

    public int getIDCount() {
        return this.idCount;
    }

    public void setNPCObject(NPC npc) {
        this.npc = npc;
        this.npcList.clear();
        this.idCount = 1;
        this.npcList.add(npc);
    }

    public JsonObject toJSON() {
        /*
            {
                "npcName":"Eliza","npcID":11852,
                "greetingEnabled":true,"greetingID":711
            }
         */

        JsonObject jsonObject = new JsonObject();
        jsonObject.addProperty("npcName", npcName);
        jsonObject.addProperty("npcID", npcID);
        jsonObject.addProperty("greetingEnabled", greetingEnabled);
        jsonObject.addProperty("greetingID", greetingID);

        return jsonObject;
    }

    public void setGreetingEnabled(boolean greetingEnabled) { this.greetingEnabled = greetingEnabled; }
    public void setGreeting(int greetingID) {
        this.greetingID = greetingID;
    }

    public void runNPCInteractionAnimation(NPC selectedNPC) {
        // Only run the greeting animation if its enabled and an animation has been set
        if (greetingID > 0 && greetingEnabled) {
            selectedNPC.setAnimation(greetingID);
            selectedNPC.setAnimationFrame(0);
        }
    }

    public int getId() {
        return this.npcID;
    }

    public String getName() {
        return this.npcName;
    }

    public void setAnimation(int animationID) {
        for (NPC selectedNPC : npcList) {
            selectedNPC.setAnimation(animationID);
            selectedNPC.setAnimationFrame(0);
        }
    }

    public void stopAnimation() {
        for (NPC selectedNPC: npcList) {
            selectedNPC.setAnimation(-1);
            selectedNPC.setAnimationFrame(0);
        }
    }

    public boolean isGreetingEnabled() {
        return greetingEnabled;
    }

    public int getGreetingID() {
        return greetingID;
    }
}

package com.npcanimator.utils;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class StandardEmotes {

    HashMap<Integer, String> emoteList = new HashMap<>();
    ArrayList<SimpleEmote> emoteArrayList = new ArrayList<>();


    public StandardEmotes() {
        emoteList.put(855, "Yes");
        emoteList.put(856, "No");
        emoteList.put(858, "Bow");
        emoteList.put(859, "Angry");
        emoteList.put(857, "Think");
        emoteList.put(863, "Wave");
        emoteList.put(2113, "Shrug");
        emoteList.put(862, "Cheer");
        emoteList.put(864, "Beckon");
        emoteList.put(861, "Laugh");
        emoteList.put(2109, "Jump for Joy");
        emoteList.put(2111, "Yawn");
        emoteList.put(866, "Dance");
        emoteList.put(2106, "Jig");
        emoteList.put(2107, "Spin");
        emoteList.put(2108, "Headbang");
        emoteList.put(860, "Cry");
        emoteList.put(1374, "Blow Kiss");
        emoteList.put(2105, "Panic");
        emoteList.put(2110, "Raspberry");
        emoteList.put(865, "Clap");
        emoteList.put(2112, "Salute");
        emoteList.put(4276, "Idea");
        emoteList.put(4278, "Stamp");
        emoteList.put(4280, "Flap");
        emoteList.put(4275, "Slap Head");
        emoteList.put(3543, "Zombie Dance");
        emoteList.put(874, "Sit up");
        emoteList.put(872, "Push up");
        emoteList.put(870, "Star jump");
        emoteList.put(868, "Jog");
        emoteList.put(8917, "Flex");
        convertToSortedHashMap();
    }

    // Sort emotes alphabetically
    void convertToSortedHashMap() {
        emoteList.entrySet().stream()
        .sorted(Map.Entry.comparingByValue())
        .forEach(k -> {
            SimpleEmote emote = new SimpleEmote(k.getValue(), k.getKey());
            emoteArrayList.add(emote);
        });
    }

    public ArrayList<SimpleEmote> getSortedEmoteArrayList() {
        return emoteArrayList;
    }
}

package com.npcanimator.utils;

import com.google.gson.JsonObject;

public class SimpleEmote {

    String name;
    int id;

    public SimpleEmote(String name, int id) {
        this.name = name;
        this.id = id;
    }

    public SimpleEmote (JsonObject jsonObject){
        this.name = jsonObject.get("name").getAsString();
        this.id = jsonObject.get("id").getAsInt();
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public JsonObject toJSON() {
        JsonObject jsonObject = new JsonObject();
        jsonObject.addProperty("name", name);
        jsonObject.addProperty("id", id);

        return jsonObject;
    }
}

package com.npcanimator.utils;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;

import java.io.*;
import java.util.HashMap;
import java.util.Objects;

import static net.runelite.client.RuneLite.RUNELITE_DIR;

// This class handles the saving and loading of data in JSON format
public class StorageController {
    static String packageName = "npcanimator";

    private static final File NPCANIMATOR_DIR = new File(RUNELITE_DIR, packageName);
    private static final File NPCANIMATOR_SAVE_DATA_DIR = new File(NPCANIMATOR_DIR, "data");


    public HashMap<Integer, AnimatedNPC> readNPCAnimationFile(String profileKey) {
        // Attempt to read saved npc animations file for profileKey
        try {
            String filePath = getPluginSaveFilePath(profileKey, "npc");
            assert filePath != null;
            FileReader reader = new FileReader(filePath);
            JsonArray fileContents = new JsonParser().parse(reader).getAsJsonArray();
            HashMap<Integer, AnimatedNPC> savedAnimatedNPCMap = new HashMap<>();

            for (JsonElement animatedNPCJSON : fileContents) {
                AnimatedNPC animatedNPC = new AnimatedNPC(animatedNPCJSON.getAsJsonObject());
                savedAnimatedNPCMap.put(animatedNPC.getId(), animatedNPC);
            }

            return savedAnimatedNPCMap;
        }
        catch (FileNotFoundException e) {
            // Failed to read npc animations file
        }
        return null;
    }

    public HashMap<Integer, SimpleEmote> readSavedEmotesFile(String profileKey) {
        // Attempt to read saved emotes file for profileKey
        try {
            String filePath = getPluginSaveFilePath(profileKey, "emote");
            assert filePath != null;
            FileReader reader = new FileReader(filePath);
            JsonArray fileContents = new JsonParser().parse(reader).getAsJsonArray();
            HashMap<Integer, SimpleEmote> savedEmoteMap = new HashMap<>();

            for (JsonElement emoteJSON : fileContents) {
                SimpleEmote emote = new SimpleEmote(emoteJSON.getAsJsonObject());
                savedEmoteMap.put(emote.getId(), emote);
            }

            return savedEmoteMap;
        }
        catch (FileNotFoundException e) {
            // Failed to read emotes file
        }
        return null;
    }

    public void writeFile(String profileKey, String contents, String type) {
        String filePath = "";
        try {
            filePath = getPluginSaveFilePath(profileKey, type);
            assert filePath != null;
            BufferedWriter writer = new BufferedWriter(new FileWriter(filePath));
            writer.write(contents);
            writer.close();
        }
        catch (IOException e) {
            // Unable to write JSON file at path: " + filePath + "\n" + e.getMessage())
        }

    }

    private String getDataFilePath(String fileName) {
        File directory = new File(NPCANIMATOR_SAVE_DATA_DIR + File.separator);
        directory.mkdirs();
        return directory + File.separator + fileName;
    }

    private String getPluginSaveFilePath(String profileKey, String type) {
        if (Objects.equals(type, "npc")) {
            String fileName = packageName + "-npc-" + profileKey + ".json";
            return getDataFilePath(fileName);
        }
        else if (Objects.equals(type, "emote")) {
            String fileName = packageName + "-emote-" + profileKey + ".json";
            return getDataFilePath(fileName);
        }
        return null;
    }
}
package com.npcanimator;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(NPCAnimatorConfig.CONFIG_GROUP)
public interface NPCAnimatorConfig extends Config
{
    String CONFIG_GROUP = "NPCAnimator";

    @ConfigItem(
        keyName = "populateSpawnedNPCs",
        name = "Populate Spawned NPCs List",
        description = "Recommended to disable this option when you are not adding animations to spawned NPCs."
    )
    default boolean populateSpawnedNPCs() {
        return true;
    }

}

package com.npcanimator;

import com.google.common.base.Strings;
import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.inject.Provides;
import com.npcanimator.utils.AnimatedNPC;
import com.npcanimator.utils.Icons;
import com.npcanimator.utils.SimpleEmote;
import com.npcanimator.utils.StorageController;
import com.npcanimator.views.EmoteAnimationRow;
import com.npcanimator.views.NPCAnimationRow;
import com.npcanimator.views.NPCAnimatorPanel;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.InteractingChanged;
import net.runelite.api.events.NpcDespawned;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.RuneScapeProfileChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;

import javax.inject.Inject;
import javax.swing.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Objects;
import java.util.concurrent.ScheduledExecutorService;

@Slf4j
@PluginDescriptor(
        name = "NPC Animator",
        description = "Set and run custom animations on NPCs and your own character",
        tags = {"animations", "npcs"}
)

public class NPCAnimatorPlugin extends Plugin {
    private String profileKey;

    HashMap<Integer, AnimatedNPC> savedAnimatedNPCMap = new HashMap<>();
    HashMap<Integer, AnimatedNPC> spawnedAnimatedNPCMap = new HashMap<>();
    HashMap<Integer, SimpleEmote> playerSavedEmotesMap = new HashMap<>();
    Player myPlayer;

    // UI
    private NPCAnimatorPanel panel;
    private NavigationButton navButton;
    private boolean populateSpawnedNPCs;

    @Inject
    private Client client;

    @Inject
    private Gson gson;

    @Inject
    private NPCAnimatorConfig config;

    @Inject
    private ConfigManager configManager;

    @Inject
    private ClientToolbar clientToolbar;

    @Inject
    private ItemManager itemManager;

    @Inject
    private SpriteManager spriteManager;

    @Inject
    private ScheduledExecutorService executor;

    @Inject
    private StorageController storageController;


    @Provides
    NPCAnimatorConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(NPCAnimatorConfig.class);
    }


    @Override
    protected void startUp() throws Exception {
        profileKey = null;
        panel = new NPCAnimatorPanel(this);
        spriteManager.getSpriteAsync(SpriteID.EMOTE_CHEER, 0, panel::loadHeaderIcon);

        navButton = NavigationButton.builder()
                .tooltip("NPC Animator")
                .icon(Icons.NAV_BUTTON)
                .priority(5)
                .panel(panel)
                .build();

        clientToolbar.addNavigation(navButton);

        String profileKey = configManager.getRSProfileKey();
        switchProfile(profileKey);
    }

    @Override
    protected void shutDown() {
        clientToolbar.removeNavigation(navButton);
        spawnedAnimatedNPCMap.clear();
        savedAnimatedNPCMap.clear();
    }


    /*   SUBSCRIPTIONS   */

    @Subscribe
    public void onRuneScapeProfileChanged(RuneScapeProfileChanged e) {
        final String profileKey = configManager.getRSProfileKey();
        if (profileKey == null) {
            return;
        }

        if (profileKey.equals(this.profileKey)) {
            return;
        }

        switchProfile(profileKey);
    }


    @Subscribe
    public void onConfigChanged(ConfigChanged configChanged) {
        String key = configChanged.getKey();
        if (key.equals("populateSpawnedNPCs")) {
            populateSpawnedNPCs = Boolean.parseBoolean(configChanged.getNewValue());
            if (!populateSpawnedNPCs) {
                spawnedAnimatedNPCMap.clear();
                SwingUtilities.invokeLater(() -> panel.removeAllSpawnedNPCs());
            }
        }
    }

    /**
        // Only needed for getting the animation IDs for the default emotes
        // @Subscribe
        public void onAnimationChanged(AnimationChanged animationChanged) {
            System.out.println("Animation Changed");
            Actor actor = animationChanged.getActor();
            System.out.println(actor.getName() + ": " + Integer.toString(actor.getAnimation()));
            if (animationChanged.getActor().equals(client.getLocalPlayer())) {
                System.out.println(animationChanged.getActor().getAnimation());
            }
        }
     **/

    @Subscribe
    public void onGameStateChanged(GameStateChanged gameStateChanged) {
        GameState gameState = gameStateChanged.getGameState();
        if (gameState == GameState.LOGGED_IN) {
            this.myPlayer = client.getLocalPlayer();
            panel.setPlayerForAnimatorPanel(this.myPlayer);
        }
        else if (gameState == GameState.LOGIN_SCREEN || gameState == GameState.HOPPING) {
            this.myPlayer = null;
            spawnedAnimatedNPCMap.clear();
            SwingUtilities.invokeLater(() -> panel.removeAllSpawnedNPCs());
            SwingUtilities.invokeLater(() -> panel.resetAllSavedNPCRows());
        }
    }

    @Subscribe
    public void onNpcSpawned(NpcSpawned npcSpawned) {
        if (!populateSpawnedNPCs) {
            return;
        }
        NPC npc = npcSpawned.getNpc();
        int npcID = npc.getId();
        AnimatedNPC savedAnimatedNPC = null;

        if (Objects.equals(npc.getName(), "null")) {
            return;
        }

        if (!spawnedAnimatedNPCMap.containsKey(npcID)) {
            // create an AnimatedNPC object
            AnimatedNPC spawnedAnimatedNPC = new AnimatedNPC(npc);

            if (savedAnimatedNPCMap.containsKey(npcID)) {
                savedAnimatedNPC = savedAnimatedNPCMap.get(npcID);
                savedAnimatedNPC.setNPCObject(npc);
                // Set NPC visibility in saved list
                SwingUtilities.invokeLater(() -> panel.setSavedNPCVisible(npcID, true));
                spawnedAnimatedNPC = savedAnimatedNPC;
            }
            spawnedAnimatedNPCMap.put(npcID, spawnedAnimatedNPC);
            AnimatedNPC finalSpawnedAnimatedNPC = spawnedAnimatedNPC;
            SwingUtilities.invokeLater(() -> panel.addSpawnedNPC(finalSpawnedAnimatedNPC));
        }
        else {
            // update the AnimatedNPC object idCount
            AnimatedNPC spawnedAnimatedNPC = spawnedAnimatedNPCMap.get(npcID);
            spawnedAnimatedNPC.increaseIDCount(npc);
            spawnedAnimatedNPCMap.put(npcID, spawnedAnimatedNPC);
            SwingUtilities.invokeLater(() -> panel.updateSpawnedNPC(spawnedAnimatedNPC, true));

            if (savedAnimatedNPCMap.containsKey(npcID)) {
                savedAnimatedNPC = savedAnimatedNPCMap.get(npcID);
                savedAnimatedNPC.increaseIDCount(npc);
                savedAnimatedNPCMap.put(npcID, savedAnimatedNPC);
                SwingUtilities.invokeLater(() -> panel.setSavedNPCVisible(npcID, true));
            }
        }
    }

    @Subscribe
    public void onNpcDespawned(NpcDespawned npcDespawned) {
        if (!populateSpawnedNPCs) {
            return;
        }
        NPC npc = npcDespawned.getNpc();
        int npcID = npc.getId();

        if (spawnedAnimatedNPCMap.containsKey(npcID)) {
            AnimatedNPC despawnedAnimatedNPC = spawnedAnimatedNPCMap.get(npcID);
            if (despawnedAnimatedNPC.getIDCount() <= 1) {
                spawnedAnimatedNPCMap.remove(npcID);
                SwingUtilities.invokeLater(() -> panel.removeSpawnedNPC(npcID));
            }
            else {
                despawnedAnimatedNPC.decreaseIDCount(npc);
                spawnedAnimatedNPCMap.put(npcID, despawnedAnimatedNPC);
                SwingUtilities.invokeLater(() -> panel.updateSpawnedNPC(despawnedAnimatedNPC, false));
            }
        }

        if (savedAnimatedNPCMap.containsKey(npcID)) {
            AnimatedNPC despawnedAnimatedNPC = savedAnimatedNPCMap.get(npcID);
            despawnedAnimatedNPC.decreaseIDCount(npc);
            savedAnimatedNPCMap.put(npcID, despawnedAnimatedNPC);
            if (despawnedAnimatedNPC.getIDCount() == 0) {
                // Set NPC visibility in saved list
                SwingUtilities.invokeLater(() -> panel.setSavedNPCVisible(npcID, false));
            }
        }
    }


    @Subscribe
    public void onInteractingChanged(InteractingChanged interactingChanged)
    {
        Actor sourceActor = interactingChanged.getSource();
        if (sourceActor.equals(client.getLocalPlayer())) {
            Actor targetActor = interactingChanged.getTarget();
            if (targetActor == null) {
                return;
            }

            if (targetActor instanceof NPC) {
                NPC targetNPC = (NPC) targetActor;
                int npcID = targetNPC.getId();

                // Run interaction animation if needed
                if (savedAnimatedNPCMap.containsKey(npcID)) {
                    AnimatedNPC selectedNPC = savedAnimatedNPCMap.get(npcID);
                    selectedNPC.runNPCInteractionAnimation(targetNPC);
                }
            }
        }
    }


    /*   Handling Profile Changes   */

    private void switchProfile(String profileKey) {
        populateSpawnedNPCs = config.populateSpawnedNPCs();

        executor.execute(() -> {
            this.profileKey = profileKey;
            if (this.profileKey != null) {
                HashMap<Integer, AnimatedNPC> savedList = storageController.readNPCAnimationFile(this.profileKey);
                HashMap<Integer, SimpleEmote> playerEmoteList = storageController.readSavedEmotesFile(this.profileKey);
                if (savedList != null) {
                    savedAnimatedNPCMap = savedList;
                    SwingUtilities.invokeLater(() -> panel.addFromSaveFile(savedList));
                }
                if (playerEmoteList != null) {
                    playerSavedEmotesMap = playerEmoteList;
                    SwingUtilities.invokeLater(() -> panel.addEmotesFromSaveFile(playerSavedEmotesMap));
                }
            }
        });
    }


    /*   Run Animation Code   */

    public void runAnimationOnPlayer(int animationID) {
        try {
            this.myPlayer.setAnimation(animationID);
            this.myPlayer.setAnimationFrame(0);
        }
        catch (Exception e) {
            // System.out.println(e.getMessage());
        }
    }

    public void runGreetingsForAllSavedNPCs() {
        for (AnimatedNPC savedAnimatedNPC : savedAnimatedNPCMap.values()) {
            savedAnimatedNPC.setAnimation(savedAnimatedNPC.getGreetingID());
        }
    }

    public void runAnimationForAllSavedNPCs(int animationID) {
        for (AnimatedNPC savedAnimatedNPC : savedAnimatedNPCMap.values()) {
            savedAnimatedNPC.setAnimation(animationID);
        }
    }
    public void runAnimationForAllSpawnedNPCs(int animationID) {
        for (AnimatedNPC spawnedAnimatedNPC : spawnedAnimatedNPCMap.values()) {
            spawnedAnimatedNPC.setAnimation(animationID);
        }
    }


    /*   NPC Handling   */

    public void addNPCToSaved(AnimatedNPC animatedNPC) {
        int animatedNPCID = animatedNPC.getId();
        if (!savedAnimatedNPCMap.containsKey(animatedNPCID)) {
            // NPC not saved -> add it
            savedAnimatedNPCMap.put(animatedNPCID, animatedNPC);
            SwingUtilities.invokeLater(() -> panel.addSavedNPC(animatedNPC));
            saveAnimatedNPCsToFile();
        }
        else {
            // NPC already saved -> update it
            savedAnimatedNPCMap.put(animatedNPCID, animatedNPC);
            SwingUtilities.invokeLater(() -> panel.updateSavedNPC(animatedNPC));
            saveAnimatedNPCsToFile();
        }
    }

    public void deleteNPCFromSaved(AnimatedNPC animatedNPC, NPCAnimationRow row) {
        int animatedNPCID = animatedNPC.getId();
        if (!savedAnimatedNPCMap.containsKey(animatedNPCID)) {
            return;
        }
        savedAnimatedNPCMap.remove(animatedNPCID);
        saveAnimatedNPCsToFile();
        SwingUtilities.invokeLater(() -> panel.removeSavedNPC(row));
    }

    void saveAnimatedNPCsToFile() {
        if (Strings.isNullOrEmpty(this.profileKey)) {
            // No profile key -> cannot save
            return;
        }

        ArrayList<JsonObject> jsonObjects = new ArrayList<>();

        for (AnimatedNPC savedAnimatedNPC : savedAnimatedNPCMap.values()) {
            jsonObjects.add(savedAnimatedNPC.toJSON());
        }

        String jsonAll = gson.toJson(jsonObjects);
        storageController.writeFile(this.profileKey, jsonAll, "npc");
    }


    /*   Emote Handling   */

    void saveEmotesToFile() {
        if (Strings.isNullOrEmpty(this.profileKey)) {
            // No profile key -> cannot save
            return;
        }

        ArrayList<JsonObject> jsonObjects = new ArrayList<>();

        for (SimpleEmote savedEmote : playerSavedEmotesMap.values()) {
            jsonObjects.add(savedEmote.toJSON());
        }

        String jsonAll = gson.toJson(jsonObjects);
        storageController.writeFile(this.profileKey, jsonAll, "emote");
    }

    public boolean addEmoteToSaved(SimpleEmote emote) {
        if (!playerSavedEmotesMap.containsKey(emote.getId())) {
            playerSavedEmotesMap.put(emote.getId(), emote);
            SwingUtilities.invokeLater(() -> panel.addSavedEmote(emote));
            saveEmotesToFile();
            return true;
        }
        return false;
    }

    public void deleteEmoteFromSaved(SimpleEmote emote, EmoteAnimationRow row) {
        int id = emote.getId();
        if (!playerSavedEmotesMap.containsKey(id)) {
            return;
        }
        playerSavedEmotesMap.remove(id);
        saveEmotesToFile();
        SwingUtilities.invokeLater(() -> panel.removeSavedEmote(row));
    }
}

