package com.playerhighlighter;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PlayerHighlighterTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PlayerHighlighterPlugin.class);
		RuneLite.main(args);
	}
}
package com.playerhighlighter;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("playerhighlighter")
public interface PlayerHighlighterConfig extends Config
{
	@Alpha
	@ConfigItem(
		keyName = "outlineColor",
		name = "Player Outline Color",
		description = "This is the color that will outline the character"
	)
	default Color outlineColor()
	{
		return new Color(0, 0, 255, 100);
	}

	@Alpha
	@ConfigItem(
			keyName = "selfColor",
			name = "Self Outline Color",
			description = "This is the color that will outline your character"
	)
	default Color selfColor()
	{
		return new Color(0, 255, 0, 100);
	}

	@Alpha
	@ConfigItem(
			keyName = "underfootColor",
			name = "Underfoot Color",
			description = "This is the color that will outline players standing underneath you"
	)
	default Color underfootColor()
	{
		return new Color(255, 0, 0, 100);
	}
	@ConfigItem(
			keyName = "borderWidth",
			name = "Outline Border Width",
			description = "This is the width of the outline around a player"
	)
	@Range(
			min=1
	)

	default int borderWidth(){return 3;}

	@ConfigItem(
			keyName = "borderFeather",
			name = "Outline Feather",
			description = "Amount to feather the outline around a player"
	)
	@Range(
			min=0
	)

	default int borderFeather(){return 5;}

	@ConfigItem(
			keyName = "highlightRadius",
			name = "Highlight Radius",
			description = "Players within this radius (from you) will be highlighted"
	)
	@Range(
			min=0
	)

	default int highlightRadius(){return 3;}

	@ConfigItem(
			keyName = "highlightSelf",
			name = "Highlight Self",
			description = "Highlight your own player"
	)
	default boolean highlightSelf() {return false;}

}



package com.playerhighlighter;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Player;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Player Highlighter"
)
public class PlayerHighlighterPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private PlayerHighlighterConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject PlayerHighlighterOverlay overlay;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
		log.info("Player Highlighter started!");
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
		log.info("Player Highlighter stopped!");
	}

	@Provides
	PlayerHighlighterConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(PlayerHighlighterConfig.class);
	}
}

package com.playerhighlighter;

import net.runelite.client.ui.overlay.Overlay;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Player;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.outline.ModelOutlineRenderer;

import javax.inject.Inject;
import java.awt.*;

public class PlayerHighlighterOverlay extends Overlay {
    private final Client client;
    private final PlayerHighlighterPlugin plugin;
    private final PlayerHighlighterConfig config;
    private final ModelOutlineRenderer outlineRenderer;

    @Inject
    private PlayerHighlighterOverlay(Client client, PlayerHighlighterPlugin plugin, PlayerHighlighterConfig config, ModelOutlineRenderer outlineRenderer){
        this.client = client;
        this.plugin = plugin;
        this.config = config;
        this.outlineRenderer = outlineRenderer;

        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    public Dimension render(Graphics2D graphics){

        WorldPoint my_loc = client.getLocalPlayer().getWorldLocation();

        for(Player player : client.getPlayers()){

            WorldPoint player_loc = player.getWorldLocation();
            float distance = my_loc.distanceTo(player_loc);

            if(player != client.getLocalPlayer() && distance == 0){
                outlineRenderer.drawOutline(player, config.borderWidth(), config.underfootColor(), config.borderFeather());
                continue;
            }

            if(player != client.getLocalPlayer() && distance <= config.highlightRadius())
                outlineRenderer.drawOutline(player, config.borderWidth(), config.outlineColor(), config.borderFeather());
        }

        if(config.highlightSelf())
            outlineRenderer.drawOutline(client.getLocalPlayer(), config.borderWidth(), config.selfColor(), config.borderFeather());

        return null;
    }

}

