package com.github.calebwhiting.runelite.api;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.eventbus.Subscribe;

import java.util.LinkedList;
import java.util.Objects;
import java.util.Queue;

/**
 * Calculates the average tick time, in an ideal world this would always be 600ms,
 * however in practice it fluctuates depending upon various factors including client
 * and server load.
 */
@Singleton
public class TickManager
{

	/**
	 * The perfect tick time
	 */
	public static final long PERFECT_TICK_TIME = 600L;

	/**
	 * Number of ticks to remember
	 */
	private static final int DEFAULT_BUFFER_SIZE = 1000;

	private final int bufferSize;
	private final Queue<Long> tickTimes;
	@Inject private Client client;
	@Getter private int lastTick;
	@Getter private long averageTickTime;
	@Getter private long lastTickTime;
	@Getter private boolean paused = true;
	private long tickTimesTotal;

	private TickManager(int bufferSize)
	{
		if (bufferSize <= 1) {
			throw new IllegalArgumentException("bufferSize must be more than 1");
		}
		this.bufferSize = bufferSize;
		this.averageTickTime = PERFECT_TICK_TIME;
		this.tickTimes = new LinkedList<>();
		for (int i = 0; i < bufferSize; i++) {
			this.tickTimes.add(PERFECT_TICK_TIME);
		}
		this.tickTimesTotal = (this.tickTimes.size() * PERFECT_TICK_TIME);
		this.lastTickTime = -1;
	}

	@Inject
	public TickManager()
	{
		this(DEFAULT_BUFFER_SIZE);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged evt)
	{
		this.paused = evt.getGameState() != GameState.LOGGED_IN;
		if (this.paused || this.lastTickTime != -1) {
			return;
		}
		this.lastTickTime = System.currentTimeMillis();
	}

	@Subscribe
	public void onGameTick(GameTick evt)
	{
		long now = System.currentTimeMillis();
		if (!this.paused) {
			long tickTime = now - this.lastTickTime;
			/* we should always have {bufferSize} elements in the queue */
			if (this.tickTimes.size() != this.bufferSize) {
				throw new IllegalStateException("Somehow the tick time queue has become corrupted!");
			}
			long toRemove = Objects.requireNonNull(this.tickTimes.poll());
			this.tickTimesTotal = this.tickTimesTotal - toRemove + tickTime;
			this.averageTickTime = this.tickTimesTotal / this.bufferSize;
			this.tickTimes.offer(tickTime);
			this.lastTick = this.client.getTickCount();
		}
		this.lastTickTime = now;
	}

}
package com.github.calebwhiting.runelite.api;

import com.github.calebwhiting.runelite.api.event.*;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import net.runelite.api.Client;
import net.runelite.api.Player;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.ClientTick;
import net.runelite.api.events.InteractingChanged;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;

@Singleton
public class LocalPlayerManager
{

	@Inject private Client client;
	@Inject private EventBus eventBus;

	private LocalPoint pDest;
	private LocalPoint pPos;
	private int pRegionId = -1;

	@Subscribe
	public void onClientTick(ClientTick evt)
	{
		LocalPoint dest = this.client.getLocalDestinationLocation();
		if (this.isDifferent(dest, this.pDest)) {
			this.eventBus.post(new DestinationChanged(this.pDest, dest));
			this.pDest = dest;
		}
		Player me = this.client.getLocalPlayer();
		LocalPoint pos = me == null ? null : me.getLocalLocation();
		if (this.isDifferent(pos, this.pPos)) {
			this.eventBus.post(new LocalPositionChanged(this.pPos, pos));
			this.pPos = pos;
		}
		int regionId = (pos == null) ? -1 : WorldPoint.fromLocal(this.client, pos).getRegionID();
		if (regionId != this.pRegionId) {
			this.eventBus.post(new LocalRegionChanged(this.pRegionId, this.pRegionId));
			this.pRegionId = regionId;
		}
	}

	@Subscribe
	public void onAnimationChanged(AnimationChanged evt)
	{
		Player me = this.client.getLocalPlayer();
		if (me != null && evt.getActor() == me) {
			this.eventBus.post(new LocalAnimationChanged(me));
		}
	}

	@Subscribe
	public void onInteractingChanged(InteractingChanged evt)
	{
		Player me = this.client.getLocalPlayer();
		if (me != null && evt.getSource() == me) {
			this.eventBus.post(new LocalInteractingChanged(me, evt.getTarget()));
		}
	}

	private boolean isDifferent(LocalPoint first, LocalPoint second)
	{
		if (first == second) {
			return false;
		}
		return first == null || second == null || first.distanceTo(second) > 0;
	}

}

package com.github.calebwhiting.runelite.api.ui;

import net.runelite.client.game.ItemManager;
import net.runelite.client.game.SpriteManager;

import java.awt.image.BufferedImage;

public interface IconSource
{

	BufferedImage toBufferedImage(ItemManager itemManager, SpriteManager spriteManager);

}

package com.github.calebwhiting.runelite.api.ui;

import lombok.RequiredArgsConstructor;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.SpriteManager;

import java.awt.image.BufferedImage;

@RequiredArgsConstructor
public class SpriteIconSource implements IconSource
{

	private final int spriteId;

	private final int fileId;

	@Override
	public BufferedImage toBufferedImage(ItemManager itemManager, SpriteManager spriteManager)
	{
		return spriteManager.getSprite(this.spriteId, this.fileId);
	}

}

package com.github.calebwhiting.runelite.api.ui;

import lombok.experimental.UtilityClass;
import net.runelite.client.ui.overlay.RenderableEntity;

import java.awt.*;

@UtilityClass
public class Rendering
{

	private final float INFOBOX_COLOR_OFFSET = 0.2f;
	private final float INFOBOX_OUTER_COLOR_OFFSET = 1 - INFOBOX_COLOR_OFFSET;
	private final float INFOBOX_INNER_COLOR_OFFSET = 1 + INFOBOX_COLOR_OFFSET;
	private final float INFOBOX_ALPHA_COLOR_OFFSET = 1 + 2 * INFOBOX_COLOR_OFFSET;

	private final int MAX_BYTE = 255;

	public Color outsideStrokeColor(Color backgroundColor)
	{
		return new Color(
				Math.round(backgroundColor.getRed() * INFOBOX_OUTER_COLOR_OFFSET),
				Math.round(backgroundColor.getGreen() * INFOBOX_OUTER_COLOR_OFFSET),
				Math.round(backgroundColor.getBlue() * INFOBOX_OUTER_COLOR_OFFSET),
				Math.min(MAX_BYTE, Math.round(backgroundColor.getAlpha() * INFOBOX_ALPHA_COLOR_OFFSET))
		);
	}

	public Color insideStrokeColor(Color backgroundColor)
	{
		return new Color(
				Math.min(MAX_BYTE, Math.round(backgroundColor.getRed() * INFOBOX_INNER_COLOR_OFFSET)),
				Math.min(MAX_BYTE, Math.round(backgroundColor.getGreen() * INFOBOX_INNER_COLOR_OFFSET)),
				Math.min(MAX_BYTE, Math.round(backgroundColor.getBlue() * INFOBOX_INNER_COLOR_OFFSET)),
				Math.min(MAX_BYTE, Math.round(backgroundColor.getAlpha() * INFOBOX_ALPHA_COLOR_OFFSET))
		);
	}

	public void renderEntityRelative(Graphics2D gfx, RenderableEntity entity, int x, int y)
	{
		Graphics2D g = (Graphics2D) gfx.create();
		try {
			g.translate(x, y);
			entity.render(g);
		} finally {
			g.dispose();
		}
	}

	private int getCenteredTextY(FontMetrics fm, int boundaryHeight)
	{
		return ((boundaryHeight - fm.getHeight()) / 2) + (fm.getAscent());
	}

	public void drawText(Graphics2D g, Rectangle bounds, Color color, Alignment alignment, String text, boolean isVertical)
	{
		Font currentFont = g.getFont();
		Font newFont = currentFont.deriveFont(currentFont.getStyle(), isVertical ? 13 : 16);
		g.setFont(newFont);
		FontMetrics fm = g.getFontMetrics();
		double x = bounds.x;

		switch (alignment.getAlignmentX()) {
			case Alignment.MIN:
				x = bounds.x;
				break;
			case Alignment.MID:
				x = isVertical ? (bounds.getCenterX() + bounds.x - (fm.getHeight() / 2)) : (bounds.getCenterX() - ((double) fm.stringWidth(text) / 2));
				break;
			case Alignment.MAX:
				x = isVertical ? (bounds.getMaxX() + bounds.x - fm.getHeight()): (bounds.getMaxX() - fm.stringWidth(text));
				break;
		}
		double y = bounds.y;
		switch (alignment.getAlignmentY()) {
			case Alignment.MIN:
				y = isVertical ? bounds.y + fm.getHeight() : bounds.y;
				break;
			case Alignment.MID:
				y = isVertical ? bounds.getCenterY() - (text.length() * 10 / 2) + fm.getHeight() : bounds.y + getCenteredTextY(fm, bounds.height);
				break;
			case Alignment.MAX:
				y = isVertical ? bounds.getMaxY() - ((text.length() - 1) * 10) : (bounds.getMaxY() - fm.getHeight());
				break;
		}
		float fX = Math.round(x);
		float fY = Math.round(y);
		if(isVertical){
			char [] textChar = text.toCharArray();
			for(int i = 0; i < textChar.length; i++){
				g.setColor(Color.BLACK);
				g.drawChars(textChar, i, 1, (int)fX + 1, (int)fY + 1 + i * 10);
				g.setColor(color);
				g.drawChars(textChar, i, 1, (int)fX, (int)fY + i * 10);
			}
		}
		else{
			g.setColor(Color.BLACK);
			g.drawString(text, fX + 1, fY + 1);
			g.setColor(color);
			g.drawString(text, fX, fY);
		}
	}

	public void drawProgressBar(Graphics2D g, Rectangle bounds, Color borderColor, Color progressLeftColor, Color progressDoneColor, long min, long max, long value, boolean isVertical)
	{
		double progress = ((double) value - min) / ((double) max - min);
		progress = Math.min(1.0, progress);
		Rectangle progressDone = new Rectangle(bounds);
		Rectangle progressLeft = new Rectangle(bounds);
		if (isVertical){
			progressDone.height = (int) Math.round(progress * progressDone.height);
			progressLeft.y += progressDone.height;
			progressLeft.height -= progressDone.height;
		}
		else{
			progressDone.width = (int) Math.round(progress * progressDone.width);
			progressLeft.x += progressDone.width;
			progressLeft.width -= progressDone.width;
		}
		g.setColor(progressLeftColor);
		g.fill(progressLeft);
		g.setColor(progressDoneColor);
		g.fill(progressDone);
		g.setColor(borderColor);
		g.draw(bounds);
	}

}

package com.github.calebwhiting.runelite.api.ui;

import lombok.RequiredArgsConstructor;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.SpriteManager;

import java.awt.image.BufferedImage;

@RequiredArgsConstructor
public class ItemIconSource implements IconSource
{

	private final int itemId;

	@Override
	public BufferedImage toBufferedImage(ItemManager itemManager, SpriteManager spriteManager)
	{
		return itemManager.getImage(this.itemId);
	}

}

package com.github.calebwhiting.runelite.api.ui;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Getter
public enum Alignment
{
	TOP_LEFT(Alignment.MIN, Alignment.MIN),
	TOP(Alignment.MID, Alignment.MIN),
	TOP_RIGHT(Alignment.MAX, Alignment.MIN),
	LEFT(Alignment.MIN, Alignment.MID),
	CENTER(Alignment.MID, Alignment.MID),
	RIGHT(Alignment.MAX, Alignment.MID),
	BOTTOM_LEFT(Alignment.MIN, Alignment.MAX),
	BOTTOM(Alignment.MID, Alignment.MAX),
	BOTTOM_RIGHT(Alignment.MAX, Alignment.MAX);

	public static final int MIN = 0;

	public static final int MID = 1;

	public static final int MAX = 2;

	private final int alignmentX;

	private final int alignmentY;
}

package com.github.calebwhiting.runelite.api;

import com.github.calebwhiting.runelite.api.event.ItemSelectionChanged;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import net.runelite.api.*;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;

import java.util.Arrays;
import java.util.function.IntPredicate;
import java.util.stream.Stream;

@Singleton
public class InventoryManager
{

	@Inject private Client client;

	@Inject private EventBus eventBus;

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked evt)
	{
		if (evt.getMenuAction() != MenuAction.WIDGET_TARGET) {
			return;
		}
		ItemContainer inventory = this.client.getItemContainer(InventoryID.INVENTORY);
		if (inventory == null) {
			return;
		}
		Item item = inventory.getItem(evt.getParam0());
		this.eventBus.post(new ItemSelectionChanged(item));
	}

	public Stream<Item> getItems()
	{
		ItemContainer inventory = this.client.getItemContainer(InventoryID.INVENTORY);
		if (inventory == null) {
			return Stream.empty();
		}
		return Stream.of(inventory.getItems());
	}

	public int getFreeSpaces()
	{
		ItemContainer container = this.client.getItemContainer(InventoryID.INVENTORY);
		if (container == null) {
			return 0;
		}
		int free = 28;
		for (Item item : container.getItems()) {
			if (item.getId() >= 0) {
				free--;
			}
		}
		return free;
	}

	public int getItemCount(IntPredicate idPredicate)
	{
		return this.getItems().filter(it -> idPredicate.test(it.getId())).mapToInt(Item::getQuantity).sum();
	}

	public int getItemCountById(int... ids)
	{
		if (ids.length == 0) {
			throw new IllegalArgumentException("Must specify at least one item ID");
		}
		int[] copy = ids.clone();
		Arrays.sort(copy);
		return this.getItemCount(id -> Arrays.binarySearch(copy, id) >= 0);
	}

}

package com.github.calebwhiting.runelite.api;

import com.github.calebwhiting.runelite.api.event.DestinationChanged;
import com.github.calebwhiting.runelite.api.event.Interrupt;
import com.github.calebwhiting.runelite.api.event.LocalInteractingChanged;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.MenuAction;
import net.runelite.api.events.*;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;

import com.github.calebwhiting.runelite.plugins.actionprogress.Action;
import com.github.calebwhiting.runelite.plugins.actionprogress.ActionManager;
import com.github.calebwhiting.runelite.plugins.actionprogress.ActionProgressConfig;

import java.util.Arrays;

@Slf4j
@Singleton
public class InterruptManager
{
	private static final int[] WIDGET_CLICK_INTERRUPTS = {
			// Accept Aid
			PACK(InterfaceID.SETTINGS_SIDE, 72),
			// Toggle Run
			PACK(InterfaceID.SETTINGS_SIDE, 73),
			// House settings
			PACK(InterfaceID.SETTINGS_SIDE, 74),
			// Bond pouch
			PACK(InterfaceID.SETTINGS_SIDE, 75),
			// Settings buttons
			7602203, 7602204, 7602206,
			// Equipment buttons
			25362433, 25362435, 25362437, 25362439,
			// Combat buttons
			38862852, 38862856, 38862860, 38862864, 38862878,
			// Equipment slots
			25362447, 25362448, 25362449, 25362457, 25362450, 25362451, 25362452, 25362453, 25362455, 25362454,
			25362456,
			// Prayers
			35454981, 35454982, 35454983, 35454984, 35454985, 35454986, 35454987, 35454988, 35454989, 35454990,
			35454991, 35454992, 35454993, 35454994, 35454995, 35454996, 35454997, 35454998, 35454999, 35455000,
			35455001, 35455002, 35455003, 35455004, 35455005, 35455006, 35455007, 35455008
	};

	private static final int KOUREND_FAVOUR_OVERVIEW_GROUP_ID = 626;

	private static final int CHATBOX_MAKE_GROUP_ID = 270;

	private static final int SKILL_GUIDE_GROUP_ID = 214;

	private static final int COMBAT_ACHIEVEMENTS_GROUP_ID = 717;

	private static final int VAR_PLAYER_RUNNING = 173;

	private static final int[] WIDGET_GROUPS_INTERRUPT = {
			InterfaceID.COLLECTION_LOG, InterfaceID.LEVEL_UP, InterfaceID.BANK, InterfaceID.BANK_PIN,
			InterfaceID.DEPOSIT_BOX, InterfaceID.ACHIEVEMENT_DIARY, InterfaceID.ADVENTURE_LOG,
			InterfaceID.BANK_INVENTORY, InterfaceID.DIALOG_NPC, InterfaceID.DIALOG_PLAYER,
			InterfaceID.DIALOG_OPTION, InterfaceID.DIALOG_SPRITE, InterfaceID.DESTROY_ITEM,
			InterfaceID.DUEL_INVENTORY, InterfaceID.TOA_RAID,
			InterfaceID.EXPLORERS_RING, InterfaceID.FAIRY_RING,
			InterfaceID.TRAWLER_REWARD, InterfaceID.BARROWS_REWARD,
			InterfaceID.GRAND_EXCHANGE, InterfaceID.KILL_LOG, InterfaceID.GUIDE_PRICES,
			InterfaceID.KEPT_ON_DEATH, InterfaceID.RUNE_POUCH, InterfaceID.SHOP,
			InterfaceID.SEED_VAULT, InterfaceID.SLAYER_REWARDS, InterfaceID.SMITHING,
			InterfaceID.DIARY, KOUREND_FAVOUR_OVERVIEW_GROUP_ID, CHATBOX_MAKE_GROUP_ID,
			SKILL_GUIDE_GROUP_ID, COMBAT_ACHIEVEMENTS_GROUP_ID
	};

	private static final MenuAction[] MENU_ACTIONS_INTERRUPT = {
			MenuAction.WALK, MenuAction.WIDGET_FIRST_OPTION, MenuAction.WIDGET_SECOND_OPTION,
			MenuAction.WIDGET_TARGET_ON_GAME_OBJECT, MenuAction.WIDGET_TARGET_ON_GROUND_ITEM, MenuAction.WIDGET_TARGET_ON_PLAYER,
			MenuAction.WIDGET_TARGET_ON_NPC, MenuAction.WIDGET_TARGET_ON_GROUND_ITEM, MenuAction.WIDGET_TARGET_ON_PLAYER,
			MenuAction.WIDGET_TARGET_ON_NPC, MenuAction.WIDGET_TARGET_ON_GAME_OBJECT,
			MenuAction.WIDGET_TARGET_ON_WIDGET
	};

	static {
		Arrays.sort(WIDGET_CLICK_INTERRUPTS);
		Arrays.sort(WIDGET_GROUPS_INTERRUPT);
		Arrays.sort(MENU_ACTIONS_INTERRUPT);
	}

	@Getter private boolean waiting;

	@Inject private ActionProgressConfig config;

	@Inject private Client client;

	@Inject private EventBus eventBus;
	@Inject protected ActionManager actionManager;

	private static int PACK(int groupId, int childId)
	{
		return groupId << 16 | childId;
	}

	public void interrupt(Object source)
	{
		if (this.waiting) {
			Interrupt interrupt = new Interrupt(source);
			this.eventBus.post(interrupt);
			if (!interrupt.isConsumed()) {
				this.waiting = false;
				log.debug("Interrupted by {}", source);
			}
		}
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged evt)
	{
		if (evt.getValue() == VAR_PLAYER_RUNNING) {
			if (client.getLocalDestinationLocation() == null) {
				this.interrupt("run toggled");
			}
		}
	}

	public void setWaiting(boolean waiting)
	{
		this.waiting = waiting;
	}

	@Subscribe
	public void onDestinationChanged(DestinationChanged evt)
	{
		if (evt.getTo() != null) {
			Action action = this.actionManager.getCurrentAction();

			if (action != null && ( action == Action.FLETCH_ATTACH
				|| action == Action.FLETCH_CUT_ARROW_SHAFT
				|| action == Action.FLETCH_CUT_BOW
				|| action == Action.FLETCH_CUT_TIPS
				|| action == Action.FLETCH_ATTACH_TIPS
				|| action == Action.FLETCH_CUT_TIPS_AMETHYST
				|| action == Action.FLETCH_STRING_BOW
				|| action == Action.FLETCH_ATTACH_CROSSBOW
				|| action == Action.FLETCH_STRING_CROSSBOW
				|| action == Action.FLETCH_JAVELIN
				|| action == Action.FLETCH_DART
        || action == Action.GUARDIAN_OF_THE_RIFT_REWARD_POOL 
        || action == Action.GUARDIAN_OF_THE_RIFT_CRAFTING)) {
				return;
			}
      
			this.interrupt(evt);
		}
	}

	@Subscribe
	public void onLocalInteractingChanged(LocalInteractingChanged evt)
	{
		this.interrupt(evt);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged evt)
	{
		if (evt.getGameState() == GameState.LOGIN_SCREEN) {
			this.interrupt(evt);
		}
	}

	@Subscribe
	public void onHitsplatApplied(HitsplatApplied evt)
	{
		if (evt.getActor() == client.getLocalPlayer() && evt.getHitsplat().isMine()) {
			this.interrupt(evt);
		}
	}

	@Subscribe
	public void onResizeableChanged(ResizeableChanged evt)
	{
		this.interrupt(evt);
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked evt)
	{
		if (Arrays.binarySearch(MENU_ACTIONS_INTERRUPT, evt.getMenuAction()) >= 0) {
			this.interrupt(evt);
		} else if (evt.getMenuAction() == MenuAction.CC_OP &&
				   Arrays.binarySearch(WIDGET_CLICK_INTERRUPTS, evt.getParam1()) >= 0) {
			this.interrupt(evt);
		}
	}

	@Subscribe
	public void onWidgetLoaded(WidgetLoaded evt)
	{
		int groupId = evt.getGroupId();
		if (Arrays.binarySearch(WIDGET_GROUPS_INTERRUPT, groupId) >= 0) {
			this.interrupt(evt);
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage evt)
	{
		if (evt.getType() == ChatMessageType.GAMEMESSAGE) {
			if (evt.getMessage().matches("You need level (\\d*) ([A-Za-z]*) to (.*)$")) {
				// level requirement not met
				this.interrupt(evt);
			} else if (evt.getMessage().matches("The [a-z-]*, [a-z-]* portal shield has dropped!")) {
				// pest control portal dropped
				this.interrupt(evt);
			} else if (evt.getMessage().matches("Your amulet of chemistry helps you create a [0-9]{1}-dose potion. <col=ff0000>It then crumbles to dust.</col>") && this.config.herbChemistry()) {
				// Creating potions interrupted by chemistry amulet breaking
				this.interrupt(evt);
			}
		}
	}

}
package com.github.calebwhiting.runelite.api.event;

import lombok.Data;
import net.runelite.api.coords.LocalPoint;

@Data
public class LocalPositionChanged
{

	private final LocalPoint from;

	private final LocalPoint to;

}

package com.github.calebwhiting.runelite.api.event;

import lombok.Data;
import net.runelite.api.coords.LocalPoint;

@Data
public class DestinationChanged
{

	private final LocalPoint from;

	private final LocalPoint to;

}

package com.github.calebwhiting.runelite.api.event;

import lombok.Data;

/**
 * An event fired when an action is interrupted
 */
@Data
public class Interrupt
{

	private final Object source;

	private boolean consumed = false;

}

package com.github.calebwhiting.runelite.api.event;

import lombok.Data;
import net.runelite.api.Item;

/**
 * An event fired when an item is selected in the players inventory
 * <p>
 * Note: There is not an event fired when an item is deselected
 */
@Data
public class ItemSelectionChanged
{

	private final Item item;

}

package com.github.calebwhiting.runelite.api.event;

import lombok.Data;

@Data
public class LocalRegionChanged
{

	private final int from;

	private final int to;

}

package com.github.calebwhiting.runelite.api.event;

import lombok.Data;
import lombok.NonNull;
import net.runelite.api.Actor;
import net.runelite.api.Player;

@Data
public class LocalInteractingChanged
{

	@NonNull private final Player localPlayer;

	private final Actor target;

}

package com.github.calebwhiting.runelite.api.event;

import lombok.Data;
import net.runelite.api.Player;
import org.jetbrains.annotations.NotNull;

@Data
public class LocalAnimationChanged
{

	@NotNull private final Player localPlayer;

}

package com.github.calebwhiting.runelite.data;

import java.util.Collections;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

@SuppressWarnings("OverloadedVarargsMethod")
public class IDs
{

	private final Set<Integer> ids;

	public IDs(Set<Integer> ids)
	{
		this.ids = Collections.unmodifiableSet(ids);
	}

	// map various types to a single set of integers
	// handles int/int[]/IDs
	public IDs(Object... of)
	{
		this(Stream.of(of).map(IDs::objectToInts).flatMapToInt(IntStream::of).boxed().collect(Collectors.toSet()));
	}

	@SuppressWarnings("ChainOfInstanceofChecks")
	private static int[] objectToInts(Object o)
	{
		if (o instanceof int[]) {
			return (int[]) o;
		}
		if (o instanceof Integer) {
			return new int[]{(int) o};
		}
		if (o instanceof IDs) {
			return ((IDs) o).build();
		}
		throw new IllegalArgumentException(String.format("Unsupported type: %s", o.getClass()));
	}

	public boolean contains(int id)
	{
		return this.ids.contains(id);
	}

	public int[] build()
	{
		return this.ids.stream().mapToInt(Integer::intValue).toArray();
	}

	@Override
	public String toString()
	{
		return "IDs{" + "" + this.ids + '}';
	}

}
package com.github.calebwhiting.runelite.data;

import net.runelite.api.gameval.ItemID;

public interface Crafting
{

	int[] SILVER_AND_GOLD_ITEMS = {
			ItemID.GOLD_RING, ItemID.SAPPHIRE_RING, ItemID.EMERALD_RING, ItemID.RUBY_RING, ItemID.DIAMOND_RING,
			ItemID.DRAGONSTONE_RING, ItemID.GOLD_NECKLACE, ItemID.SAPPHIRE_NECKLACE, ItemID.EMERALD_NECKLACE,
			ItemID.RUBY_NECKLACE, ItemID.DIAMOND_NECKLACE, ItemID.DRAGONSTONE_NECKLACE, ItemID.UNSTRUNG_GOLD_AMULET,
			ItemID.UNSTRUNG_SAPPHIRE_AMULET, ItemID.UNSTRUNG_EMERALD_AMULET, ItemID.UNSTRUNG_RUBY_AMULET, ItemID.UNSTRUNG_DIAMOND_AMULET,
			ItemID.UNSTRUNG_DRAGONSTONE_AMULET, ItemID.NOSTRINGSTAR, ItemID.NOSTRINGSNAKE, ItemID.SILVER_SICKLE,
			ItemID.FENK_CONDUCTOR, ItemID.TIARA, ItemID.ONYX_RING, ItemID.ONYX_NECKLACE, ItemID.UNSTRUNG_ONYX_AMULET,
			ItemID.AGRITH_SIGIL, ItemID.BURGH_ROD_COMMAND1, ItemID.XBOWS_CROSSBOW_BOLTS_SILVER_UNFEATHERED,
			ItemID.JEWL_GOLD_BRACELET, ItemID.JEWL_SAPPHIRE_BRACELET,
			ItemID.JEWL_EMERALD_BRACELET, ItemID.JEWL_RUBY_BRACELET,
			ItemID.JEWL_DIAMOND_BRACELET, ItemID.JEWL_DRAGONSTONE_BRACELET,
			ItemID.JEWL_DRAGONSTONE_BRACELET,
			ItemID.JEWL_ONYX_BRACELET, ItemID.ZENYTE_BRACELET, ItemID.UNSTRUNG_ZENYTE_AMULET, ItemID.ZENYTE_NECKLACE, ItemID.ZENYTE_RING, ItemID.OPAL_RING,
			ItemID.JADE_RING, ItemID.TOPAZ_RING, ItemID.OPAL_NECKLACE, ItemID.JADE_NECKLACE, ItemID.TOPAZ_NECKLACE,
			ItemID.UNSTRUNG_OPAL_AMULET, ItemID.UNSTRUNG_JADE_AMULET, ItemID.UNSTRUNG_TOPAZ_AMULET, ItemID.OPAL_BRACELET,
			ItemID.JADE_BRACELET, ItemID.TOPAZ_BRACELET
	};
	int[] GOLD_ITEMS = {
			ItemID.GOLD_RING, ItemID.SAPPHIRE_RING, ItemID.EMERALD_RING, ItemID.RUBY_RING, ItemID.DIAMOND_RING, ItemID.DRAGONSTONE_RING, ItemID.SLAYER_RING_8, ItemID.ONYX_RING, ItemID.ZENYTE_RING,
			ItemID.GOLD_NECKLACE, ItemID.SAPPHIRE_NECKLACE, ItemID.EMERALD_NECKLACE, ItemID.RUBY_NECKLACE, ItemID.DIAMOND_NECKLACE, ItemID.DRAGONSTONE_NECKLACE, ItemID.ONYX_NECKLACE, ItemID.ZENYTE_NECKLACE,
			ItemID.UNSTRUNG_GOLD_AMULET, ItemID.UNSTRUNG_SAPPHIRE_AMULET, ItemID.UNSTRUNG_EMERALD_AMULET, ItemID.UNSTRUNG_RUBY_AMULET, ItemID.UNSTRUNG_DIAMOND_AMULET,	ItemID.UNSTRUNG_DRAGONSTONE_AMULET, ItemID.UNSTRUNG_ONYX_AMULET, ItemID.UNSTRUNG_ZENYTE_AMULET,
			ItemID.JEWL_GOLD_BRACELET, ItemID.JEWL_SAPPHIRE_BRACELET,	ItemID.JEWL_EMERALD_BRACELET, ItemID.JEWL_RUBY_BRACELET, ItemID.JEWL_DIAMOND_BRACELET, ItemID.JEWL_DRAGONSTONE_BRACELET, ItemID.ZENYTE_BRACELET
	};
	int[] SILVER_ITEMS = {
			ItemID.OPAL_RING, ItemID.JADE_RING, ItemID.TOPAZ_RING,
			ItemID.OPAL_NECKLACE, ItemID.JADE_NECKLACE, ItemID.TOPAZ_NECKLACE,
			ItemID.UNSTRUNG_OPAL_AMULET, ItemID.UNSTRUNG_JADE_AMULET, ItemID.UNSTRUNG_TOPAZ_AMULET,
			ItemID.OPAL_BRACELET, ItemID.JADE_BRACELET, ItemID.TOPAZ_BRACELET,
			ItemID.NOSTRINGSTAR, ItemID.NOSTRINGSNAKE,
			ItemID.SILVER_SICKLE, ItemID.FENK_CONDUCTOR,
			ItemID.XBOWS_CROSSBOW_BOLTS_SILVER_UNFEATHERED, ItemID.TIARA,
			ItemID.BURGH_ROD_COMMAND1, ItemID.AGRITH_SIGIL


	};
	int[] SAPPHIRE_AND_OPAL_JEWELLERY = {
			ItemID.SAPPHIRE_RING, ItemID.SAPPHIRE_NECKLACE, ItemID.STRUNG_SAPPHIRE_AMULET, ItemID.JEWL_SAPPHIRE_BRACELET, ItemID.OPAL_RING, ItemID.OPAL_NECKLACE, ItemID.STRUNG_OPAL_AMULET,
			ItemID.OPAL_BRACELET
	};
	int[] EMERALD_JEWELLERY = {
			ItemID.EMERALD_RING, ItemID.EMERALD_NECKLACE, ItemID.STRUNG_EMERALD_AMULET, ItemID.MAGIC_STRUNG_EMERALD_AMULET,
			ItemID.JEWL_EMERALD_BRACELET, ItemID.JADE_RING, ItemID.JADE_NECKLACE,
			ItemID.STRUNG_JADE_AMULET, ItemID.JADE_BRACELET
	};
	int[] TOPAZ_AND_RUBY_JEWELLERY = {
			ItemID.RUBY_RING, ItemID.RUBY_NECKLACE, ItemID.STRUNG_RUBY_AMULET, ItemID.JEWL_RUBY_BRACELET, ItemID.TOPAZ_RING, ItemID.TOPAZ_NECKLACE, ItemID.STRUNG_TOPAZ_AMULET,
			ItemID.TOPAZ_BRACELET
	};
	int[] DIAMOND_JEWELLERY = {
			ItemID.DIAMOND_RING, ItemID.DIAMOND_NECKLACE, ItemID.STRUNG_DIAMOND_AMULET, ItemID.JEWL_DIAMOND_BRACELET
	};
	int[] DRAGONSTONE_JEWELLERY = {
			ItemID.DRAGONSTONE_RING, ItemID.DRAGONSTONE_NECKLACE, ItemID.STRUNG_DRAGONSTONE_AMULET, ItemID.JEWL_DRAGONSTONE_BRACELET,
			ItemID.JEWL_DRAGONSTONE_BRACELET
	};
	int[] ONYX_JEWELLERY = {
			ItemID.ONYX_RING, ItemID.ONYX_NECKLACE, ItemID.STRUNG_ONYX_AMULET, ItemID.JEWL_ONYX_BRACELET
	};
	int[] ZENYTE_JEWELLERY = {
			ItemID.ZENYTE_BRACELET, ItemID.ZENYTE_NECKLACE, ItemID.ZENYTE_RING,
			ItemID.ZENYTE_AMULET
	};
	int [] AMETHYST_HEADS_AND_TIPS = {
			ItemID.FLETCHING_BOLT_TIP_AMETHYST, ItemID.FLETCHING_ARROW_HEAD_AMETHYST, ItemID.AMETHYST_JAVELIN_HEAD, ItemID.AMETHYST_DART_TIP
	};

}
package com.github.calebwhiting.runelite.data;

import com.github.calebwhiting.runelite.api.InventoryManager;
import lombok.Data;
import static net.runelite.api.ItemID.*;

@Data
public class Recipe
{

	private final int productId;

	private final Ingredient[] requirements;

	private final Ingredient tool;

	/*
	 * Some actions are showing the ingredient as the final product. When this is set to true, the first ingredient will
	 * be the one used to register. 
	 */
	private final Boolean isSelectingIngredientAsProduct; 

	public Recipe(int productId, Ingredient[] requirements, Ingredient tool)
	{
		this.productId = productId;
		this.requirements = requirements;
		this.tool = tool;
		this.isSelectingIngredientAsProduct = false;
	}

	public Recipe(int productId, Ingredient... requirements)
	{
		this.productId = productId;
		this.requirements = requirements;
		this.tool = null;
		this.isSelectingIngredientAsProduct = false;
	}

	public Recipe(int productId, Boolean isSelectingIngredientAsProduct, Ingredient... requirements)
	{
		this.productId = productId;
		this.requirements = requirements;
		this.tool = null;
		this.isSelectingIngredientAsProduct = isSelectingIngredientAsProduct;
	}

	public static <T extends Recipe> T forProduct(T[] all, int productId, InventoryManager inventoryManager)
	{
		for (T v : all) {
			if (v.getIsSelectingIngredientAsProduct()) {
				for (Ingredient ingredient : v.getRequirements()){
					if(ingredient.getItemId() == productId && (v.getTool() == null || inventoryManager.getItems().anyMatch(item -> item.getId() == v.getTool().getItemId()))){
						return v;
					}
				}
			}
			else if (v.getProductId() == productId && (v.getTool() == null || inventoryManager.getItems().anyMatch(item -> item.getId() == v.getTool().getItemId()))) {
				return v;
			}
		}
		return null;
	}

	public int getMakeProductCount(InventoryManager inventoryManager)
	{
		int amount = Integer.MAX_VALUE;
		for (Ingredient requirement : this.getRequirements()) {
			if (inventoryManager.getItems().noneMatch(item -> item.getId() == requirement.getItemId())) {
				return 0;
			}

			if (requirement.isConsumed()) {
				if (this.getTool() != null && !inventoryManager.getItems().anyMatch(item -> item.getId() == tool.getItemId())){
					return 0;
				}
				amount = Math.min(
						amount,
						this.getTool() != null
						? getMakeProductCountWithTool(inventoryManager.getItemCountById(requirement.getItemId()) / requirement.getAmount())
						: inventoryManager.getItemCountById(requirement.getItemId()) / requirement.getAmount()
				);
			}
		}
		return amount;
	}

	private int getMakeProductCountWithTool(int amount){
		int toolAmount = Integer.MAX_VALUE;
		switch (productId) {
			case CANNONBALL:
				if (tool != null && tool.getItemId() == DOUBLE_AMMO_MOULD){
					//Round up since the double ammo mould is able to smelt with only one silver bar
					toolAmount = (int)Math.ceil((double)amount / 2);
				}
				else{
					toolAmount = amount;
				}
				break;

			default:
				toolAmount = amount;
				break;
		}
		return toolAmount;
	}

}

package com.github.calebwhiting.runelite.data;

import net.runelite.api.ItemID;

public interface Woodcutting
{
	int[] LEAVES = {
			ItemID.LEAVES, ItemID.OAK_LEAVES, ItemID.WILLOW_LEAVES, ItemID.MAPLE_LEAVES,
			ItemID.YEW_LEAVES, ItemID.MAGIC_LEAVES
	};
	int[] RATION_FOOD = {
			ItemID.SARDINE, ItemID.SALMON, ItemID.TROUT, ItemID.COD, ItemID.HERRING, ItemID.PIKE, ItemID.MACKEREL,
			ItemID.RAW_TUNA, ItemID.TUNA_26149, ItemID.BASS, ItemID.SWORDFISH, ItemID.LOBSTER, ItemID.SHARK,
			ItemID.SHARK_6969, ItemID.SHARK_20390, ItemID.LAVA_EEL, ItemID.MANTA_RAY, ItemID.MONKFISH,
			ItemID.MONKFISH_20547, ItemID.DARK_CRAB, ItemID.ANGLERFISH, ItemID.COOKED_MEAT, ItemID.COOKED_CHICKEN,
			ItemID.COOKED_CHICKEN_4291
	};
}

package com.github.calebwhiting.runelite.data;

import net.runelite.api.ItemID;

/**
 * NOTE:
 * The difference between a finished and unfinished potion is that
 * unfinished potions take 1 tick to produce, whereas finished potions take 2 ticks.
 * This means you need to "wrongly" categorize certain recipes for correct functionality.
 */
public interface Herblore
{

	Recipe[] UNFINISHED_POTIONS = {
			// @formatter:off
            new Recipe(ItemID.GUAM_POTION_UNF, Ingredients.VIAL_OF_WATER, Ingredients.GUAM_LEAF),
            new Recipe(ItemID.UNFINISHED_POTION_4840, Ingredients.VIAL_OF_WATER, Ingredients.ROGUES_PURSE),
            new Recipe(ItemID.MARRENTILL_POTION_UNF, Ingredients.VIAL_OF_WATER, Ingredients.MARRENTILL),
            new Recipe(ItemID.TARROMIN_POTION_UNF, Ingredients.VIAL_OF_WATER, Ingredients.TARROMIN),
            new Recipe(ItemID.UNFINISHED_POTION, Ingredients.VIAL_OF_WATER, Ingredients.ASHES),
            new Recipe(ItemID.HARRALANDER_POTION_UNF, Ingredients.VIAL_OF_WATER, Ingredients.HARRALANDER),
            new Recipe(ItemID.MAGIC_ESSENCE_UNF, Ingredients.VIAL_OF_WATER, Ingredients.STAR_FLOWER),
            new Recipe(ItemID.RANARR_POTION_UNF, Ingredients.VIAL_OF_WATER, Ingredients.RANARR_WEED),
            new Recipe(ItemID.TOADFLAX_POTION_UNF, Ingredients.VIAL_OF_WATER, Ingredients.TOADFLAX),
            new Recipe(ItemID.IRIT_POTION_UNF, Ingredients.VIAL_OF_WATER, Ingredients.IRIT_LEAF),
            new Recipe(ItemID.AVANTOE_POTION_UNF, Ingredients.VIAL_OF_WATER, Ingredients.AVANTOE),
            new Recipe(ItemID.KWUARM_POTION_UNF, Ingredients.VIAL_OF_WATER, Ingredients.KWUARM),
            new Recipe(ItemID.SNAPDRAGON_POTION_UNF, Ingredients.VIAL_OF_WATER, Ingredients.SNAPDRAGON),
            new Recipe(ItemID.CADANTINE_POTION_UNF, Ingredients.VIAL_OF_WATER, Ingredients.CADANTINE),
            new Recipe(ItemID.LANTADYME_POTION_UNF, Ingredients.VIAL_OF_WATER, Ingredients.LANTADYME),
            new Recipe(ItemID.DWARF_WEED_POTION_UNF, Ingredients.VIAL_OF_WATER, Ingredients.DWARF_WEED),
            new Recipe(ItemID.TORSTOL_POTION_UNF, Ingredients.VIAL_OF_WATER, Ingredients.TORSTOL),
            new Recipe(ItemID.CADANTINE_BLOOD_POTION_UNF, Ingredients.VIAL_OF_BLOOD, Ingredients.CADANTINE),
            new Recipe(ItemID.GUTHIX_BALANCE_UNF_7658, Ingredients.RESTORE_1, Ingredients.GARLIC),
            new Recipe(ItemID.GUTHIX_BALANCE_UNF_7656, Ingredients.RESTORE_2, Ingredients.GARLIC),
            new Recipe(ItemID.GUTHIX_BALANCE_UNF_7654, Ingredients.RESTORE_3, Ingredients.GARLIC),
            new Recipe(ItemID.GUTHIX_BALANCE_UNF, Ingredients.RESTORE_4, Ingredients.GARLIC),
            // Seriously, fuck this recipe with a barbed harpoon :(
            new Recipe(HerbTeaMix.HERB_TEA_MIX_G, Ingredients.CUP_OF_HOT_WATER, Ingredients.GUAM_LEAF),
            new Recipe(HerbTeaMix.HERB_TEA_MIX_M, Ingredients.CUP_OF_HOT_WATER, Ingredients.MARRENTILL),
            new Recipe(HerbTeaMix.HERB_TEA_MIX_H, Ingredients.CUP_OF_HOT_WATER, Ingredients.HARRALANDER),
            new Recipe(HerbTeaMix.HERB_TEA_MIX_GG, Ingredients.HERB_TEA_MIX_G, Ingredients.GUAM_LEAF),
            new Recipe(HerbTeaMix.HERB_TEA_MIX_GM, Ingredients.HERB_TEA_MIX_G, Ingredients.MARRENTILL),
            new Recipe(HerbTeaMix.HERB_TEA_MIX_GM, Ingredients.HERB_TEA_MIX_M, Ingredients.GUAM_LEAF),
            new Recipe(HerbTeaMix.HERB_TEA_MIX_HG, Ingredients.HERB_TEA_MIX_G, Ingredients.HARRALANDER),
            new Recipe(HerbTeaMix.HERB_TEA_MIX_HG, Ingredients.HERB_TEA_MIX_H, Ingredients.GUAM_LEAF),
            new Recipe(HerbTeaMix.HERB_TEA_MIX_HM, Ingredients.HERB_TEA_MIX_H, Ingredients.MARRENTILL),
            new Recipe(HerbTeaMix.HERB_TEA_MIX_HM, Ingredients.HERB_TEA_MIX_M, Ingredients.HARRALANDER),
            new Recipe(HerbTeaMix.HERB_TEA_MIX_GGH, Ingredients.HERB_TEA_MIX_GG, Ingredients.HARRALANDER),
            new Recipe(HerbTeaMix.HERB_TEA_MIX_GGH, Ingredients.HERB_TEA_MIX_HG, Ingredients.GUAM_LEAF),
            new Recipe(HerbTeaMix.HERB_TEA_MIX_GGM, Ingredients.HERB_TEA_MIX_GG, Ingredients.MARRENTILL),
            new Recipe(HerbTeaMix.HERB_TEA_MIX_GGM, Ingredients.HERB_TEA_MIX_GM, Ingredients.GUAM_LEAF),
            new Recipe(HerbTeaMix.HERB_TEA_MIX_HMG, Ingredients.HERB_TEA_MIX_GM, Ingredients.HARRALANDER),
            new Recipe(HerbTeaMix.HERB_TEA_MIX_HMG, Ingredients.HERB_TEA_MIX_HM, Ingredients.GUAM_LEAF),
            new Recipe(HerbTeaMix.HERB_TEA_MIX_HMG, Ingredients.HERB_TEA_MIX_HG, Ingredients.MARRENTILL),
            // @formatter:on
	};
	Recipe[] POTIONS = {
			// @formatter:off
            new Recipe(ItemID.ATTACK_POTION3, Ingredients.GUAM_UNF, Ingredients.EYE_OF_NEWT),
            new Recipe(ItemID.ANTIPOISON3, Ingredients.MARRENTILL_UNF, Ingredients.UNICORN_HORN_DUST),
            new Recipe(ItemID.RELICYMS_BALM3, Ingredients.ROGUES_PURSE_UNF, Ingredients.SNAKE_WEED),
            new Recipe(ItemID.STRENGTH_POTION3, Ingredients.TARROMIN_UNF, Ingredients.LIMPWURT_ROOT),
            new Recipe(ItemID.SERUM_207_3, Ingredients.TARROMIN_UNF, Ingredients.ASHES),
            new Recipe(ItemID.SERUM_207_3, Ingredients.ASH_POTION, Ingredients.TARROMIN),
            new Recipe(ItemID.COMPOST_POTION3, Ingredients.HARRALANDER_UNF, Ingredients.VOLCANIC_ASH),
            new Recipe(ItemID.RESTORE_POTION3, Ingredients.HARRALANDER_UNF, Ingredients.RED_SPIDERS_EGGS),
            new Recipe(ItemID.GUTHIX_BALANCE1, Ingredients.GUTHIX_BALANCE_UNF_1, Ingredients.SILVER_DUST),
            new Recipe(ItemID.GUTHIX_BALANCE2, Ingredients.GUTHIX_BALANCE_UNF_2, Ingredients.SILVER_DUST),
            new Recipe(ItemID.GUTHIX_BALANCE3, Ingredients.GUTHIX_BALANCE_UNF_3, Ingredients.SILVER_DUST),
            new Recipe(ItemID.GUTHIX_BALANCE4, Ingredients.GUTHIX_BALANCE_UNF_4, Ingredients.SILVER_DUST),
            new Recipe(ItemID.BLAMISH_OIL, Ingredients.HARRALANDER_UNF, Ingredients.BLAMISH_SNAIL_SLIME),
            new Recipe(ItemID.ENERGY_POTION3, Ingredients.HARRALANDER_UNF, Ingredients.CHOCOLATE_DUST),
            new Recipe(ItemID.DEFENCE_POTION3, Ingredients.RANARR_UNF, Ingredients.WHITE_BERRIES),
            new Recipe(ItemID.AGILITY_POTION3, Ingredients.TOADFLAX_UNF, Ingredients.TOADS_LEGS),
            new Recipe(ItemID.COMBAT_POTION3, Ingredients.HARRALANDER_UNF, Ingredients.GOAT_HORN_DUST),
            new Recipe(ItemID.PRAYER_POTION3, Ingredients.RANARR_UNF, Ingredients.SNAPE_GRASS),
            new Recipe(ItemID.SUPER_ATTACK3, Ingredients.IRIT_UNF, Ingredients.EYE_OF_NEWT),
            new Recipe(ItemID.GOBLIN_POTION3, Ingredients.TOADFLAX_UNF, Ingredients.PHARMAKOS_BERRIES),
            new Recipe(ItemID.SUPERANTIPOISON3, Ingredients.IRIT_UNF, Ingredients.UNICORN_HORN_DUST),
            new Recipe(ItemID.FISHING_POTION3, Ingredients.AVANTOE_UNF, Ingredients.SNAPE_GRASS),
            new Recipe(ItemID.SUPER_ENERGY3, Ingredients.AVANTOE_UNF, Ingredients.MORT_MYRE_FUNGUS),
            new Recipe(ItemID.SHRINKMEQUICK, Ingredients.TARROMIN_UNF, Ingredients.SHRUNK_OGLEROOT),
            new Recipe(ItemID.HUNTER_POTION3, Ingredients.AVANTOE_UNF, Ingredients.KEBBIT_TEETH_DUST),
            new Recipe(ItemID.SUPER_STRENGTH3, Ingredients.KWUARM_UNF, Ingredients.LIMPWURT_ROOT),
            new Recipe(ItemID.MAGIC_ESSENCE3, Ingredients.MAGIC_ESSENCE_UNF, Ingredients.GORAK_CLAW_POWDER),
            new Recipe(ItemID.WEAPON_POISON, Ingredients.KWUARM_UNF, Ingredients.DRAGON_SCALE_DUST),
            new Recipe(ItemID.SUPER_RESTORE3, Ingredients.SNAPDRAGON_UNF, Ingredients.RED_SPIDERS_EGGS),
            new Recipe(SanfewSerum.MIX_1_1, Ingredients.SUPER_RESTORE_1, Ingredients.UNICORN_HORN_DUST),
            new Recipe(SanfewSerum.MIX_1_2, Ingredients.SUPER_RESTORE_2, Ingredients.UNICORN_HORN_DUST),
            new Recipe(SanfewSerum.MIX_1_3, Ingredients.SUPER_RESTORE_3, Ingredients.UNICORN_HORN_DUST),
            new Recipe(SanfewSerum.MIX_1_4, Ingredients.SUPER_RESTORE_4, Ingredients.UNICORN_HORN_DUST),
            new Recipe(SanfewSerum.MIX_2_1, Ingredients.MIXTURE_STEP_1_1, Ingredients.SNAKE_WEED),
            new Recipe(SanfewSerum.MIX_2_2, Ingredients.MIXTURE_STEP_1_2, Ingredients.SNAKE_WEED),
            new Recipe(SanfewSerum.MIX_2_3, Ingredients.MIXTURE_STEP_1_3, Ingredients.SNAKE_WEED),
            new Recipe(SanfewSerum.MIX_2_4, Ingredients.MIXTURE_STEP_1_4, Ingredients.SNAKE_WEED),
            new Recipe(ItemID.SANFEW_SERUM1, Ingredients.MIXTURE_STEP_2_1, Ingredients.NAIL_BEAST_NAILS),
            new Recipe(ItemID.SANFEW_SERUM2, Ingredients.MIXTURE_STEP_2_2, Ingredients.NAIL_BEAST_NAILS),
            new Recipe(ItemID.SANFEW_SERUM3, Ingredients.MIXTURE_STEP_2_3, Ingredients.NAIL_BEAST_NAILS),
            new Recipe(ItemID.SANFEW_SERUM4, Ingredients.MIXTURE_STEP_2_4, Ingredients.NAIL_BEAST_NAILS),
            new Recipe(ItemID.SUPER_DEFENCE3, Ingredients.CADANTINE_UNF, Ingredients.WHITE_BERRIES),
            new Recipe(ItemID.ANTIDOTE3, Ingredients.ANTIDOTE_P_UNF, Ingredients.YEW_ROOTS),
            new Recipe(ItemID.ANTIFIRE_POTION3, Ingredients.LANTADYME_UNF, Ingredients.DRAGON_SCALE_DUST),
            new Recipe(ItemID.RANGING_POTION3, Ingredients.DWARF_WEED_UNF, Ingredients.WINE_OF_ZAMORAK),
            new Recipe(ItemID.WEAPON_POISON_5937, Ingredients.WEAPON_POISON_P_UNF, Ingredients.RED_SPIDERS_EGGS),
            new Recipe(ItemID.MAGIC_POTION3, Ingredients.LANTADYME_UNF, Ingredients.POTATO_CACTUS),
            new Recipe(ItemID.ZAMORAK_BREW3, Ingredients.TORSTOL_UNF, Ingredients.JANGERBERRIES),
            new Recipe(ItemID.ANTIDOTE3_5954, Ingredients.ANTIDOTE_PP_UNF, Ingredients.MAGIC_ROOTS),
            new Recipe(ItemID.BASTION_POTION3, Ingredients.CADANTINE_BLOOD_UNF, Ingredients.WINE_OF_ZAMORAK),
            new Recipe(ItemID.BATTLEMAGE_POTION3, Ingredients.CADANTINE_BLOOD_UNF, Ingredients.POTATO_CACTUS),
            new Recipe(ItemID.SARADOMIN_BREW3, Ingredients.TOADFLAX_UNF, Ingredients.CRUSHED_NEST),
            new Recipe(ItemID.WEAPON_POISON_5940, Ingredients.WEAPON_POISON_PP_UNF, Ingredients.POISON_IVY_BERRIES),
            new Recipe(ItemID.ANCIENT_BREW3, Ingredients.DWARF_WEED_UNF, Ingredients.NIHIL_DUST),
			new Recipe(ItemID.FORGOTTEN_BREW4, Ingredients.ANCIENT_BREW_4, Ingredients.ANCIENT_ESSENCE.clone(80)),
            new Recipe(ItemID.SUPER_COMBAT_POTION4, Ingredients.SUPER_ATTACK_4, Ingredients.SUPER_STRENGTH_4, Ingredients.SUPER_DEFENCE_4, Ingredients.TORSTOL),
            new Recipe(ItemID.SUPER_COMBAT_POTION4, Ingredients.SUPER_ATTACK_4, Ingredients.SUPER_STRENGTH_4, Ingredients.SUPER_DEFENCE_4, Ingredients.TORSTOL_UNF),
            new Recipe(ItemID.SUPER_ANTIFIRE_POTION4, Ingredients.ANTIFIRE_4, Ingredients.CRUSHED_SUPERIOR_DRAGON_BONES),
            new Recipe(ItemID.ANTIVENOM4_12913, Ingredients.ANTIVENOM_4, Ingredients.TORSTOL),
			new Recipe(ItemID.STAMINA_POTION1, true, Ingredients.SUPER_ENERGY_1, Ingredients.AMYLASE_CRYSTAL),
			new Recipe(ItemID.STAMINA_POTION2, true, Ingredients.SUPER_ENERGY_2, Ingredients.AMYLASE_CRYSTAL.clone(2)),
			new Recipe(ItemID.STAMINA_POTION3, true, Ingredients.SUPER_ENERGY_3, Ingredients.AMYLASE_CRYSTAL.clone(3)),
			new Recipe(ItemID.STAMINA_POTION4, true, Ingredients.SUPER_ENERGY_4, Ingredients.AMYLASE_CRYSTAL.clone(4)),
			new Recipe(ItemID.EXTENDED_ANTIFIRE1, true,Ingredients.ANTIFIRE_1, Ingredients.LAVA_SCALE_SHARD),
			new Recipe(ItemID.EXTENDED_ANTIFIRE2, true, Ingredients.ANTIFIRE_2, Ingredients.LAVA_SCALE_SHARD.clone(2)),
			new Recipe(ItemID.EXTENDED_ANTIFIRE3, true, Ingredients.ANTIFIRE_3, Ingredients.LAVA_SCALE_SHARD.clone(3)),
			new Recipe(ItemID.EXTENDED_ANTIFIRE4, true, Ingredients.ANTIFIRE_4, Ingredients.LAVA_SCALE_SHARD.clone(4)),
			new Recipe(ItemID.ANTIVENOM1, true, Ingredients.ANTIDOTE_PP_1, Ingredients.ZULRAHS_SCALES.clone(5)),
			new Recipe(ItemID.ANTIVENOM2, true, Ingredients.ANTIDOTE_PP_2, Ingredients.ZULRAHS_SCALES.clone(10)),
			new Recipe(ItemID.ANTIVENOM3, true, Ingredients.ANTIDOTE_PP_3, Ingredients.ZULRAHS_SCALES.clone(15)),
			new Recipe(ItemID.ANTIVENOM4, true, Ingredients.ANTIDOTE_PP_4, Ingredients.ZULRAHS_SCALES.clone(20)),
            new Recipe(ItemID.EXTENDED_SUPER_ANTIFIRE1, true,  Ingredients.SUPER_ANTIFIRE_1, Ingredients.LAVA_SCALE_SHARD),
            new Recipe(ItemID.EXTENDED_SUPER_ANTIFIRE2, true,  Ingredients.SUPER_ANTIFIRE_2, Ingredients.LAVA_SCALE_SHARD.clone(2)),
            new Recipe(ItemID.EXTENDED_SUPER_ANTIFIRE3, true, Ingredients.SUPER_ANTIFIRE_3, Ingredients.LAVA_SCALE_SHARD.clone(3)),
            new Recipe(ItemID.EXTENDED_SUPER_ANTIFIRE4, true, Ingredients.SUPER_ANTIFIRE_4, Ingredients.LAVA_SCALE_SHARD.clone(4)),
            // Divine potions
            new Recipe(ItemID.DIVINE_SUPER_ATTACK_POTION1, Ingredients.SUPER_ATTACK_1, Ingredients.CRYSTAL_DUST),
            new Recipe(ItemID.DIVINE_SUPER_ATTACK_POTION2, Ingredients.SUPER_ATTACK_2, Ingredients.CRYSTAL_DUST.clone(2)),
            new Recipe(ItemID.DIVINE_SUPER_ATTACK_POTION3, Ingredients.SUPER_ATTACK_3, Ingredients.CRYSTAL_DUST.clone(3)),
            new Recipe(ItemID.DIVINE_SUPER_ATTACK_POTION4, Ingredients.SUPER_ATTACK_4, Ingredients.CRYSTAL_DUST.clone(4)),
            new Recipe(ItemID.DIVINE_SUPER_STRENGTH_POTION1, Ingredients.SUPER_STRENGTH_1, Ingredients.CRYSTAL_DUST),
            new Recipe(ItemID.DIVINE_SUPER_STRENGTH_POTION2, Ingredients.SUPER_STRENGTH_2, Ingredients.CRYSTAL_DUST.clone(2)),
            new Recipe(ItemID.DIVINE_SUPER_STRENGTH_POTION3, Ingredients.SUPER_STRENGTH_3, Ingredients.CRYSTAL_DUST.clone(3)),
            new Recipe(ItemID.DIVINE_SUPER_STRENGTH_POTION4, Ingredients.SUPER_STRENGTH_4, Ingredients.CRYSTAL_DUST.clone(4)),
            new Recipe(ItemID.DIVINE_SUPER_DEFENCE_POTION1, Ingredients.SUPER_DEFENCE_1, Ingredients.CRYSTAL_DUST),
            new Recipe(ItemID.DIVINE_SUPER_DEFENCE_POTION2, Ingredients.SUPER_DEFENCE_2, Ingredients.CRYSTAL_DUST.clone(2)),
            new Recipe(ItemID.DIVINE_SUPER_DEFENCE_POTION3, Ingredients.SUPER_DEFENCE_3, Ingredients.CRYSTAL_DUST.clone(3)),
            new Recipe(ItemID.DIVINE_SUPER_DEFENCE_POTION4, Ingredients.SUPER_DEFENCE_4, Ingredients.CRYSTAL_DUST.clone(4)),
            new Recipe(ItemID.DIVINE_RANGING_POTION1, Ingredients.RANGING_1, Ingredients.CRYSTAL_DUST),
            new Recipe(ItemID.DIVINE_RANGING_POTION2, Ingredients.RANGING_2, Ingredients.CRYSTAL_DUST.clone(2)),
            new Recipe(ItemID.DIVINE_RANGING_POTION3, Ingredients.RANGING_3, Ingredients.CRYSTAL_DUST.clone(3)),
            new Recipe(ItemID.DIVINE_RANGING_POTION4, Ingredients.RANGING_4, Ingredients.CRYSTAL_DUST.clone(4)),
            new Recipe(ItemID.DIVINE_MAGIC_POTION1, Ingredients.MAGIC_1, Ingredients.CRYSTAL_DUST),
            new Recipe(ItemID.DIVINE_MAGIC_POTION2, Ingredients.MAGIC_2, Ingredients.CRYSTAL_DUST.clone(2)),
            new Recipe(ItemID.DIVINE_MAGIC_POTION3, Ingredients.MAGIC_3, Ingredients.CRYSTAL_DUST.clone(3)),
            new Recipe(ItemID.DIVINE_MAGIC_POTION4, Ingredients.MAGIC_4, Ingredients.CRYSTAL_DUST.clone(4)),
            new Recipe(ItemID.DIVINE_BASTION_POTION1, Ingredients.BASTION_1, Ingredients.CRYSTAL_DUST),
            new Recipe(ItemID.DIVINE_BASTION_POTION2, Ingredients.BASTION_2, Ingredients.CRYSTAL_DUST.clone(2)),
            new Recipe(ItemID.DIVINE_BASTION_POTION3, Ingredients.BASTION_3, Ingredients.CRYSTAL_DUST.clone(3)),
            new Recipe(ItemID.DIVINE_BASTION_POTION4, Ingredients.BASTION_4, Ingredients.CRYSTAL_DUST.clone(4)),
            new Recipe(ItemID.DIVINE_BATTLEMAGE_POTION1, Ingredients.BATTLEMAGE_1, Ingredients.CRYSTAL_DUST),
            new Recipe(ItemID.DIVINE_BATTLEMAGE_POTION2, Ingredients.BATTLEMAGE_2, Ingredients.CRYSTAL_DUST.clone(2)),
            new Recipe(ItemID.DIVINE_BATTLEMAGE_POTION3, Ingredients.BATTLEMAGE_3, Ingredients.CRYSTAL_DUST.clone(3)),
            new Recipe(ItemID.DIVINE_BATTLEMAGE_POTION4, Ingredients.BATTLEMAGE_4, Ingredients.CRYSTAL_DUST.clone(4)),
            new Recipe(ItemID.DIVINE_SUPER_COMBAT_POTION1, Ingredients.SUPER_COMBAT_1, Ingredients.CRYSTAL_DUST),
            new Recipe(ItemID.DIVINE_SUPER_COMBAT_POTION2, Ingredients.SUPER_COMBAT_2, Ingredients.CRYSTAL_DUST.clone(2)),
            new Recipe(ItemID.DIVINE_SUPER_COMBAT_POTION3, Ingredients.SUPER_COMBAT_3, Ingredients.CRYSTAL_DUST.clone(3)),
            new Recipe(ItemID.DIVINE_SUPER_COMBAT_POTION4, Ingredients.SUPER_COMBAT_4, Ingredients.CRYSTAL_DUST.clone(4)),
            // These potions are more correctly classified as unfinished, however they take 2 ticks to make
            new Recipe(ItemID.ANTIDOTE_UNF, Ingredients.COCONUT_MILK, Ingredients.TOADFLAX),
            new Recipe(ItemID.ANTIDOTE_UNF_5951, Ingredients.COCONUT_MILK, Ingredients.IRIT_LEAF),
            new Recipe(ItemID.WEAPON_POISON_UNF, Ingredients.COCONUT_MILK, Ingredients.CACTUS_SPINE),
            new Recipe(ItemID.WEAPON_POISON_UNF_5939, Ingredients.COCONUT_MILK, Ingredients.CAVE_NIGHTSHADE)
            // @formatter:on
	};
	int[] GRIMY_HERBS = {
			ItemID.GRIMY_GUAM_LEAF, ItemID.GRIMY_MARRENTILL, ItemID.GRIMY_TARROMIN, ItemID.GRIMY_HARRALANDER,
			ItemID.GRIMY_RANARR_WEED, ItemID.GRIMY_TOADFLAX, ItemID.GRIMY_IRIT_LEAF, ItemID.GRIMY_AVANTOE,
			ItemID.GRIMY_KWUARM, ItemID.GRIMY_SNAPDRAGON, ItemID.GRIMY_CADANTINE, ItemID.GRIMY_LANTADYME,
			ItemID.GRIMY_DWARF_WEED, ItemID.GRIMY_TORSTOL, ItemID.GRIMY_ARDRIGAL, ItemID.GRIMY_SITO_FOIL,
			ItemID.GRIMY_ROGUES_PURSE, ItemID.GRIMY_SNAKE_WEED, ItemID.GRIMY_VOLENCIA_MOSS, ItemID.GRIMY_BUCHU_LEAF,
			ItemID.GRIMY_NOXIFER, ItemID.GRIMY_GOLPAR
	};

	interface HerbTeaMix
	{

		int HERB_TEA_MIX_H = ItemID.HERB_TEA_MIX;
		int HERB_TEA_MIX_G = ItemID.HERB_TEA_MIX_4466;
		int HERB_TEA_MIX_M = ItemID.HERB_TEA_MIX_4468;
		int HERB_TEA_MIX_HM = ItemID.HERB_TEA_MIX_4470;
		int HERB_TEA_MIX_HG = ItemID.HERB_TEA_MIX_4472;
		int HERB_TEA_MIX_GG = ItemID.HERB_TEA_MIX_4474;
		int HERB_TEA_MIX_GM = ItemID.HERB_TEA_MIX_4476;
		int HERB_TEA_MIX_HMG = ItemID.HERB_TEA_MIX_4478;
		int HERB_TEA_MIX_GGM = ItemID.HERB_TEA_MIX_4480;
		int HERB_TEA_MIX_GGH = ItemID.HERB_TEA_MIX_4482;

	}

	interface SanfewSerum
	{

		int MIX_1_1 = ItemID.MIXTURE__STEP_11;
		int MIX_1_2 = ItemID.MIXTURE__STEP_12;
		int MIX_1_3 = ItemID.MIXTURE__STEP_13;
		int MIX_1_4 = ItemID.MIXTURE__STEP_14;
		int MIX_2_1 = ItemID.MIXTURE__STEP_21;
		int MIX_2_2 = ItemID.MIXTURE__STEP_22;
		int MIX_2_3 = ItemID.MIXTURE__STEP_23;
		int MIX_2_4 = ItemID.MIXTURE__STEP_24;

	}

	interface Ingredients
	{

		// Base
		Ingredient VIAL_OF_WATER = new Ingredient(ItemID.VIAL_OF_WATER);
		Ingredient VIAL_OF_BLOOD = new Ingredient(ItemID.VIAL_OF_BLOOD);
		Ingredient COCONUT_MILK = new Ingredient(ItemID.COCONUT_MILK);
		Ingredient CUP_OF_HOT_WATER = new Ingredient(ItemID.CUP_OF_HOT_WATER);
		Ingredient GUAM_UNF = new Ingredient(ItemID.GUAM_POTION_UNF);
		Ingredient ROGUES_PURSE_UNF = new Ingredient(ItemID.UNFINISHED_POTION_4840);
		Ingredient MARRENTILL_UNF = new Ingredient(ItemID.MARRENTILL_POTION_UNF);
		Ingredient TARROMIN_UNF = new Ingredient(ItemID.TARROMIN_POTION_UNF);
		Ingredient ASH_POTION = new Ingredient(ItemID.UNFINISHED_POTION);
		Ingredient HARRALANDER_UNF = new Ingredient(ItemID.HARRALANDER_POTION_UNF);
		Ingredient MAGIC_ESSENCE_UNF = new Ingredient(ItemID.MAGIC_ESSENCE_UNF);
		Ingredient RANARR_UNF = new Ingredient(ItemID.RANARR_POTION_UNF);
		Ingredient TOADFLAX_UNF = new Ingredient(ItemID.TOADFLAX_POTION_UNF);
		Ingredient IRIT_UNF = new Ingredient(ItemID.IRIT_POTION_UNF);
		Ingredient AVANTOE_UNF = new Ingredient(ItemID.AVANTOE_POTION_UNF);
		Ingredient KWUARM_UNF = new Ingredient(ItemID.KWUARM_POTION_UNF);
		Ingredient SNAPDRAGON_UNF = new Ingredient(ItemID.SNAPDRAGON_POTION_UNF);
		Ingredient CADANTINE_UNF = new Ingredient(ItemID.CADANTINE_POTION_UNF);
		Ingredient LANTADYME_UNF = new Ingredient(ItemID.LANTADYME_POTION_UNF);
		Ingredient DWARF_WEED_UNF = new Ingredient(ItemID.DWARF_WEED_POTION_UNF);
		Ingredient TORSTOL_UNF = new Ingredient(ItemID.TORSTOL_POTION_UNF);
		Ingredient CADANTINE_BLOOD_UNF = new Ingredient(ItemID.CADANTINE_BLOOD_POTION_UNF);
		// Combination base
		Ingredient RESTORE_1 = new Ingredient(ItemID.RESTORE_POTION1);
		Ingredient RESTORE_2 = new Ingredient(ItemID.RESTORE_POTION2);
		Ingredient RESTORE_3 = new Ingredient(ItemID.RESTORE_POTION3);
		Ingredient RESTORE_4 = new Ingredient(ItemID.RESTORE_POTION4);
		Ingredient SUPER_RESTORE_1 = new Ingredient(ItemID.SUPER_RESTORE1);
		Ingredient SUPER_RESTORE_2 = new Ingredient(ItemID.SUPER_RESTORE2);
		Ingredient SUPER_RESTORE_3 = new Ingredient(ItemID.SUPER_RESTORE3);
		Ingredient SUPER_RESTORE_4 = new Ingredient(ItemID.SUPER_RESTORE4);
		Ingredient GUTHIX_BALANCE_UNF_1 = new Ingredient(ItemID.GUTHIX_BALANCE_UNF_7658);
		Ingredient GUTHIX_BALANCE_UNF_2 = new Ingredient(ItemID.GUTHIX_BALANCE_UNF_7656);
		Ingredient GUTHIX_BALANCE_UNF_3 = new Ingredient(ItemID.GUTHIX_BALANCE_UNF_7654);
		Ingredient GUTHIX_BALANCE_UNF_4 = new Ingredient(ItemID.GUTHIX_BALANCE_UNF);
		Ingredient SUPER_ENERGY_1 = new Ingredient(ItemID.SUPER_ENERGY1);
		Ingredient SUPER_ENERGY_2 = new Ingredient(ItemID.SUPER_ENERGY2);
		Ingredient SUPER_ENERGY_3 = new Ingredient(ItemID.SUPER_ENERGY3);
		Ingredient SUPER_ENERGY_4 = new Ingredient(ItemID.SUPER_ENERGY4);
		Ingredient WEAPON_POISON_P_UNF = new Ingredient(ItemID.WEAPON_POISON_UNF);
		Ingredient WEAPON_POISON_PP_UNF = new Ingredient(ItemID.WEAPON_POISON_UNF_5939);
		Ingredient ANTIDOTE_P_UNF = new Ingredient(ItemID.ANTIDOTE_UNF);
		Ingredient ANTIDOTE_PP_UNF = new Ingredient(ItemID.ANTIDOTE_UNF_5951);
		Ingredient ANTIFIRE_1 = new Ingredient(ItemID.ANTIFIRE_POTION1);
		Ingredient ANTIFIRE_2 = new Ingredient(ItemID.ANTIFIRE_POTION2);
		Ingredient ANTIFIRE_3 = new Ingredient(ItemID.ANTIFIRE_POTION3);
		Ingredient ANTIFIRE_4 = new Ingredient(ItemID.ANTIFIRE_POTION4);
		Ingredient SUPER_ANTIFIRE_1 = new Ingredient(ItemID.SUPER_ANTIFIRE_POTION1);
		Ingredient SUPER_ANTIFIRE_2 = new Ingredient(ItemID.SUPER_ANTIFIRE_POTION2);
		Ingredient SUPER_ANTIFIRE_3 = new Ingredient(ItemID.SUPER_ANTIFIRE_POTION3);
		Ingredient SUPER_ANTIFIRE_4 = new Ingredient(ItemID.SUPER_ANTIFIRE_POTION4);
		Ingredient ANTIVENOM_4 = new Ingredient(ItemID.ANTIVENOM4);
		Ingredient ANTIDOTE_PP_1 = new Ingredient(ItemID.ANTIDOTE1_5958);
		Ingredient ANTIDOTE_PP_2 = new Ingredient(ItemID.ANTIDOTE2_5956);
		Ingredient ANTIDOTE_PP_3 = new Ingredient(ItemID.ANTIDOTE3_5954);
		Ingredient ANTIDOTE_PP_4 = new Ingredient(ItemID.ANTIDOTE4_5952);
		Ingredient SUPER_ATTACK_1 = new Ingredient(ItemID.SUPER_ATTACK1);
		Ingredient SUPER_ATTACK_2 = new Ingredient(ItemID.SUPER_ATTACK2);
		Ingredient SUPER_ATTACK_3 = new Ingredient(ItemID.SUPER_ATTACK3);
		Ingredient SUPER_ATTACK_4 = new Ingredient(ItemID.SUPER_ATTACK4);
		Ingredient SUPER_STRENGTH_1 = new Ingredient(ItemID.SUPER_STRENGTH1);
		Ingredient SUPER_STRENGTH_2 = new Ingredient(ItemID.SUPER_STRENGTH2);
		Ingredient SUPER_STRENGTH_3 = new Ingredient(ItemID.SUPER_STRENGTH3);
		Ingredient SUPER_STRENGTH_4 = new Ingredient(ItemID.SUPER_STRENGTH4);
		Ingredient SUPER_DEFENCE_1 = new Ingredient(ItemID.SUPER_DEFENCE1);
		Ingredient SUPER_DEFENCE_2 = new Ingredient(ItemID.SUPER_DEFENCE2);
		Ingredient SUPER_DEFENCE_3 = new Ingredient(ItemID.SUPER_DEFENCE3);
		Ingredient SUPER_DEFENCE_4 = new Ingredient(ItemID.SUPER_DEFENCE4);
		Ingredient RANGING_1 = new Ingredient(ItemID.RANGING_POTION1);
		Ingredient RANGING_2 = new Ingredient(ItemID.RANGING_POTION2);
		Ingredient RANGING_3 = new Ingredient(ItemID.RANGING_POTION3);
		Ingredient RANGING_4 = new Ingredient(ItemID.RANGING_POTION4);
		Ingredient MAGIC_1 = new Ingredient(ItemID.MAGIC_POTION1);
		Ingredient MAGIC_2 = new Ingredient(ItemID.MAGIC_POTION2);
		Ingredient MAGIC_3 = new Ingredient(ItemID.MAGIC_POTION3);
		Ingredient MAGIC_4 = new Ingredient(ItemID.MAGIC_POTION4);
		Ingredient BASTION_1 = new Ingredient(ItemID.BASTION_POTION1);
		Ingredient BASTION_2 = new Ingredient(ItemID.BASTION_POTION2);
		Ingredient BASTION_3 = new Ingredient(ItemID.BASTION_POTION3);
		Ingredient BASTION_4 = new Ingredient(ItemID.BASTION_POTION4);
		Ingredient BATTLEMAGE_1 = new Ingredient(ItemID.BATTLEMAGE_POTION1);
		Ingredient BATTLEMAGE_2 = new Ingredient(ItemID.BATTLEMAGE_POTION2);
		Ingredient BATTLEMAGE_3 = new Ingredient(ItemID.BATTLEMAGE_POTION3);
		Ingredient BATTLEMAGE_4 = new Ingredient(ItemID.BATTLEMAGE_POTION4);
		Ingredient SUPER_COMBAT_1 = new Ingredient(ItemID.SUPER_COMBAT_POTION1);
		Ingredient SUPER_COMBAT_2 = new Ingredient(ItemID.SUPER_COMBAT_POTION2);
		Ingredient SUPER_COMBAT_3 = new Ingredient(ItemID.SUPER_COMBAT_POTION3);
		Ingredient SUPER_COMBAT_4 = new Ingredient(ItemID.SUPER_COMBAT_POTION4);
		// Sanfew serum mixtures
		Ingredient MIXTURE_STEP_1_1 = new Ingredient(ItemID.MIXTURE__STEP_11);
		Ingredient MIXTURE_STEP_1_2 = new Ingredient(ItemID.MIXTURE__STEP_12);
		Ingredient MIXTURE_STEP_1_3 = new Ingredient(ItemID.MIXTURE__STEP_13);
		Ingredient MIXTURE_STEP_1_4 = new Ingredient(ItemID.MIXTURE__STEP_14);
		Ingredient MIXTURE_STEP_2_1 = new Ingredient(ItemID.MIXTURE__STEP_21);
		Ingredient MIXTURE_STEP_2_2 = new Ingredient(ItemID.MIXTURE__STEP_22);
		Ingredient MIXTURE_STEP_2_3 = new Ingredient(ItemID.MIXTURE__STEP_23);
		Ingredient MIXTURE_STEP_2_4 = new Ingredient(ItemID.MIXTURE__STEP_24);
		// Guthix rest tea mixtures
		Ingredient HERB_TEA_MIX_H = new Ingredient(ItemID.HERB_TEA_MIX);
		Ingredient HERB_TEA_MIX_G = new Ingredient(ItemID.HERB_TEA_MIX_4466);
		Ingredient HERB_TEA_MIX_M = new Ingredient(ItemID.HERB_TEA_MIX_4468);
		Ingredient HERB_TEA_MIX_HM = new Ingredient(ItemID.HERB_TEA_MIX_4470);
		Ingredient HERB_TEA_MIX_HG = new Ingredient(ItemID.HERB_TEA_MIX_4472);
		Ingredient HERB_TEA_MIX_GG = new Ingredient(ItemID.HERB_TEA_MIX_4474);
		Ingredient HERB_TEA_MIX_GM = new Ingredient(ItemID.HERB_TEA_MIX_4476);
		Ingredient HERB_TEA_MIX_HMG = new Ingredient(ItemID.HERB_TEA_MIX_4478);
		Ingredient HERB_TEA_MIX_GGM = new Ingredient(ItemID.HERB_TEA_MIX_4480);
		Ingredient HERB_TEA_MIX_GGH = new Ingredient(ItemID.HERB_TEA_MIX_4482);
		// Herbs
		Ingredient GUAM_LEAF = new Ingredient(ItemID.GUAM_LEAF);
		Ingredient ROGUES_PURSE = new Ingredient(ItemID.ROGUES_PURSE);
		Ingredient MARRENTILL = new Ingredient(ItemID.MARRENTILL);
		Ingredient TARROMIN = new Ingredient(ItemID.TARROMIN);
		Ingredient HARRALANDER = new Ingredient(ItemID.HARRALANDER);
		Ingredient STAR_FLOWER = new Ingredient(ItemID.STAR_FLOWER);
		Ingredient RANARR_WEED = new Ingredient(ItemID.RANARR_WEED);
		Ingredient TOADFLAX = new Ingredient(ItemID.TOADFLAX);
		Ingredient IRIT_LEAF = new Ingredient(ItemID.IRIT_LEAF);
		Ingredient AVANTOE = new Ingredient(ItemID.AVANTOE);
		Ingredient KWUARM = new Ingredient(ItemID.KWUARM);
		Ingredient SNAPDRAGON = new Ingredient(ItemID.SNAPDRAGON);
		Ingredient CADANTINE = new Ingredient(ItemID.CADANTINE);
		Ingredient LANTADYME = new Ingredient(ItemID.LANTADYME);
		Ingredient DWARF_WEED = new Ingredient(ItemID.DWARF_WEED);
		Ingredient TORSTOL = new Ingredient(ItemID.TORSTOL);
		// Secondaries
		Ingredient GARLIC = new Ingredient(ItemID.GARLIC);
		Ingredient EYE_OF_NEWT = new Ingredient(ItemID.EYE_OF_NEWT);
		Ingredient UNICORN_HORN_DUST = new Ingredient(ItemID.UNICORN_HORN_DUST);
		Ingredient SNAKE_WEED = new Ingredient(ItemID.SNAKE_WEED);
		Ingredient LIMPWURT_ROOT = new Ingredient(ItemID.LIMPWURT_ROOT);
		Ingredient ASHES = new Ingredient(ItemID.ASHES);
		Ingredient VOLCANIC_ASH = new Ingredient(ItemID.VOLCANIC_ASH);
		Ingredient RED_SPIDERS_EGGS = new Ingredient(ItemID.RED_SPIDERS_EGGS);
		Ingredient SILVER_DUST = new Ingredient(ItemID.SILVER_DUST);
		Ingredient BLAMISH_SNAIL_SLIME = new Ingredient(ItemID.BLAMISH_SNAIL_SLIME);
		Ingredient CHOCOLATE_DUST = new Ingredient(ItemID.CHOCOLATE_DUST);
		Ingredient WHITE_BERRIES = new Ingredient(ItemID.WHITE_BERRIES);
		Ingredient TOADS_LEGS = new Ingredient(ItemID.TOADS_LEGS);
		Ingredient GOAT_HORN_DUST = new Ingredient(ItemID.GOAT_HORN_DUST);
		Ingredient SNAPE_GRASS = new Ingredient(ItemID.SNAPE_GRASS);
		Ingredient PHARMAKOS_BERRIES = new Ingredient(ItemID.PHARMAKOS_BERRIES);
		Ingredient MORT_MYRE_FUNGUS = new Ingredient(ItemID.MORT_MYRE_FUNGUS);
		Ingredient SHRUNK_OGLEROOT = new Ingredient(ItemID.SHRUNK_OGLEROOT);
		Ingredient KEBBIT_TEETH_DUST = new Ingredient(ItemID.KEBBIT_TEETH_DUST);
		Ingredient GORAK_CLAW_POWDER = new Ingredient(ItemID.GORAK_CLAW_POWDER);
		Ingredient DRAGON_SCALE_DUST = new Ingredient(ItemID.DRAGON_SCALE_DUST);
		Ingredient NAIL_BEAST_NAILS = new Ingredient(ItemID.NAIL_BEAST_NAILS);
		Ingredient YEW_ROOTS = new Ingredient(ItemID.YEW_ROOTS);
		Ingredient WINE_OF_ZAMORAK = new Ingredient(ItemID.WINE_OF_ZAMORAK);
		Ingredient POTATO_CACTUS = new Ingredient(ItemID.POTATO_CACTUS);
		Ingredient JANGERBERRIES = new Ingredient(ItemID.JANGERBERRIES);
		Ingredient MAGIC_ROOTS = new Ingredient(ItemID.MAGIC_ROOTS);
		Ingredient CRUSHED_NEST = new Ingredient(ItemID.CRUSHED_NEST);
		Ingredient POISON_IVY_BERRIES = new Ingredient(ItemID.POISON_IVY_BERRIES);
		Ingredient NIHIL_DUST = new Ingredient(ItemID.NIHIL_DUST);
		Ingredient LAVA_SCALE_SHARD = new Ingredient(ItemID.LAVA_SCALE_SHARD);
		Ingredient CRYSTAL_DUST = new Ingredient(ItemID.CRYSTAL_DUST);
		Ingredient CRUSHED_SUPERIOR_DRAGON_BONES = new Ingredient(ItemID.CRUSHED_SUPERIOR_DRAGON_BONES);
		Ingredient ZULRAHS_SCALES = new Ingredient(ItemID.ZULRAHS_SCALES);
		Ingredient CAVE_NIGHTSHADE = new Ingredient(ItemID.CAVE_NIGHTSHADE);
		Ingredient AMYLASE_CRYSTAL = new Ingredient(ItemID.AMYLASE_CRYSTAL);
		Ingredient CACTUS_SPINE = new Ingredient(ItemID.CACTUS_SPINE);
		Ingredient ANCIENT_BREW_4 = new Ingredient(ItemID.ANCIENT_BREW4);
		Ingredient ANCIENT_ESSENCE = new Ingredient(ItemID.ANCIENT_ESSENCE);

	}

}

package com.github.calebwhiting.runelite.data;

import lombok.Getter;

@Getter
public class Ingredient
{

	private final int itemId;

	private final int amount;

	private final boolean consumed;

	public Ingredient(int itemId, int amount, boolean consumed)
	{
		this.itemId = itemId;
		this.amount = amount;
		this.consumed = consumed;
	}

	public Ingredient(int itemId, int amount)
	{
		this(itemId, amount, true);
	}

	public Ingredient(int itemId)
	{
		this(itemId, 1, true);
	}

	public Ingredient clone(int amount)
	{
		return new Ingredient(this.itemId, amount, this.consumed);
	}

}

package com.github.calebwhiting.runelite.data;

import lombok.Data;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.Client;
import net.runelite.api.EnumComposition;
import net.runelite.api.EnumID;
import net.runelite.api.InventoryID;
import net.runelite.api.ItemContainer;
import net.runelite.api.ItemID;
import org.apache.commons.lang3.ArrayUtils;
import net.runelite.api.Varbits;
import net.runelite.api.annotations.Varbit;

import java.util.Arrays;
import java.util.Objects;

public interface Magic
{

	@Getter
	enum StandardSpell implements Spell
	{
		LUMBRIDGE_HOME_TELEPORT(
				"Lumbridge Home Teleport",
				0,
				0
		),
		WIND_STRIKE(
				"Wind Strike",
				1,
				1,
				new RuneRequirement(Rune.AIR, 1),
				new RuneRequirement(Rune.MIND, 1)
		),
		CONFUSE(
				"Confuse",
				2,
				3,
				new RuneRequirement(Rune.BODY, 1),
				new RuneRequirement(Rune.EARTH, 2),
				new RuneRequirement(Rune.WATER, 3)
		),
		ENCHANT_CROSSBOW_BOLT(
				"Crossbow Bolt Enchantments",
				3,
				4
		),
		WATER_STRIKE(
				"Water Strike",
				4,
				5,
				new RuneRequirement(Rune.AIR, 1),
				new RuneRequirement(Rune.MIND, 1),
				new RuneRequirement(Rune.WATER, 1)
		),
		LVL_1_ENCHANT(
				"Lvl-1 Enchant",
				6,
				7,
				new RuneRequirement(Rune.COSMIC, 1),
				new RuneRequirement(Rune.WATER, 1)
		),
		EARTH_STRIKE(
				"Earth Strike",
				7,
				9,
				new RuneRequirement(Rune.AIR, 1),
				new RuneRequirement(Rune.EARTH, 2),
				new RuneRequirement(Rune.MIND, 1)
		),
		WEAKEN(
				"Weaken",
				8,
				11,
				new RuneRequirement(Rune.BODY, 1),
				new RuneRequirement(Rune.EARTH, 2),
				new RuneRequirement(Rune.WATER, 3)
		),
		FIRE_STRIKE(
				"Fire Strike",
				9,
				13,
				new RuneRequirement(Rune.AIR, 2),
				new RuneRequirement(Rune.FIRE, 3),
				new RuneRequirement(Rune.MIND, 1)
		),
		BONES_TO_BANANAS(
				"Bones to Bananas",
				10,
				15,
				new RuneRequirement(Rune.EARTH, 2),
				new RuneRequirement(Rune.NATURE, 1),
				new RuneRequirement(Rune.WATER, 2)
		),
		WIND_BOLT(
				"Wind Bolt",
				11,
				17,
				new RuneRequirement(Rune.AIR, 2),
				new RuneRequirement(Rune.CHAOS, 1)
		),
		CURSE(
				"Curse",
				12,
				19,
				new RuneRequirement(Rune.BODY, 1),
				new RuneRequirement(Rune.EARTH, 3),
				new RuneRequirement(Rune.WATER, 2)
		),
		BIND(
				"Bind",
				13,
				20,
				new RuneRequirement(Rune.EARTH, 3),
				new RuneRequirement(Rune.NATURE, 2),
				new RuneRequirement(Rune.WATER, 3)
		),
		LOW_LEVEL_ALCHEMY(
				"Low Level Alchemy",
				14,
				21,
				new RuneRequirement(Rune.FIRE, 3),
				new RuneRequirement(Rune.NATURE, 1)
		),
		WATER_BOLT(
				"Water Bolt",
				15,
				23,
				new RuneRequirement(Rune.AIR, 2),
				new RuneRequirement(Rune.CHAOS, 1),
				new RuneRequirement(Rune.WATER, 2)
		),
		VARROCK_TELEPORT(
				"Varrock Teleport",
				16,
				25,
				new RuneRequirement(Rune.AIR, 3),
				new RuneRequirement(Rune.FIRE, 1),
				new RuneRequirement(Rune.LAW, 1)
		),
		LVL_2_ENCHANT(
				"Lvl-2 Enchant",
				17,
				27,
				new RuneRequirement(Rune.AIR, 3),
				new RuneRequirement(Rune.COSMIC, 1)
		),
		EARTH_BOLT(
				"Earth Bolt",
				18,
				29,
				new RuneRequirement(Rune.AIR, 3),
				new RuneRequirement(Rune.CHAOS, 1),
				new RuneRequirement(Rune.EARTH, 1)
		),
		LUMBRIDGE_TELEPORT(
				"Lumbridge Teleport",
				19,
				31,
				new RuneRequirement(Rune.AIR, 3),
				new RuneRequirement(Rune.EARTH, 1),
				new RuneRequirement(Rune.LAW, 1)
		),
		TELEKINETIC_GRAB(
				"Telekinetic Grab",
				20,
				33,
				new RuneRequirement(Rune.AIR, 1),
				new RuneRequirement(Rune.LAW, 1)
		),
		FIRE_BOLT(
				"Fire Bolt",
				21,
				35,
				new RuneRequirement(Rune.AIR, 3),
				new RuneRequirement(Rune.CHAOS, 1),
				new RuneRequirement(Rune.FIRE, 4)
		),
		FALADOR_TELEPORT(
				"Falador Teleport",
				22,
				37,
				new RuneRequirement(Rune.AIR, 3),
				new RuneRequirement(Rune.LAW, 1),
				new RuneRequirement(Rune.WATER, 1)
		),
		CRUMBLE_UNDEAD(
				"Crumble Undead",
				23,
				39,
				new RuneRequirement(Rune.AIR, 2),
				new RuneRequirement(Rune.CHAOS, 1),
				new RuneRequirement(Rune.EARTH, 2)
		),
		TELEPORT_TO_HOUSE(
				"Teleport to House",
				24,
				40,
				new RuneRequirement(Rune.AIR, 1),
				new RuneRequirement(Rune.EARTH, 1),
				new RuneRequirement(Rune.LAW, 1)
		),
		WIND_BLAST(
				"Wind Blast",
				25,
				41,
				new RuneRequirement(Rune.AIR, 3),
				new RuneRequirement(Rune.DEATH, 1)
		),
		SUPERHEAT_ITEM(
				"Superheat Item",
				26,
				43,
				new RuneRequirement(Rune.FIRE, 4),
				new RuneRequirement(Rune.NATURE, 1)
		),
		CAMELOT_TELEPORT(
				"Camelot Teleport",
				27,
				45,
				new RuneRequirement(Rune.AIR, 5),
				new RuneRequirement(Rune.LAW, 1)
		),
		WATER_BLAST(
				"Water Blast",
				28,
				47,
				new RuneRequirement(Rune.AIR, 3),
				new RuneRequirement(Rune.DEATH, 1),
				new RuneRequirement(Rune.WATER, 3)
		),
		KOUREND_CASTLE_TELEPORT(
				"Kourend Castle Teleport",
				29,
				48,
				new RuneRequirement(Rune.FIRE, 5),
				new RuneRequirement(Rune.LAW, 2),
				new RuneRequirement(Rune.SOUL, 2),
				new RuneRequirement(Rune.WATER, 4)
		),
		LVL_3_ENCHANT(
				"Lvl-3 Enchant",
				30,
				49,
				new RuneRequirement(Rune.COSMIC, 1),
				new RuneRequirement(Rune.FIRE, 5)
		),
		IBAN_BLAST(
				"Iban Blast",
				31,
				50,
				new RuneRequirement(Rune.DEATH, 1),
				new RuneRequirement(Rune.FIRE, 5)
		),
		SNARE(
				"Snare",
				32,
				50,
				new RuneRequirement(Rune.EARTH, 4),
				new RuneRequirement(Rune.NATURE, 3),
				new RuneRequirement(Rune.WATER, 4)
		),
		MAGIC_DART(
				"Magic Dart",
				33,
				50,
				new RuneRequirement(Rune.DEATH, 1),
				new RuneRequirement(Rune.MIND, 4)
		),
		ARDOUGNE_TELEPORT(
				"Ardougne Teleport",
				34,
				51,
				new RuneRequirement(Rune.LAW, 2),
				new RuneRequirement(Rune.WATER, 2)
		),
		EARTH_BLAST(
				"Earth Blast",
				35,
				53,
				new RuneRequirement(Rune.AIR, 3),
				new RuneRequirement(Rune.DEATH, 1),
				new RuneRequirement(Rune.EARTH, 4)
		),
		HIGH_LEVEL_ALCHEMY(
				"High Level Alchemy",
				34,
				55,
				new RuneRequirement(Rune.FIRE, 5),
				new RuneRequirement(Rune.NATURE, 1)
		),
		CHARGE_WATER_ORB(
				"Charge Water Orb",
				38,
				56,
				new RuneRequirement(Rune.COSMIC, 3),
				new RuneRequirement(Rune.WATER, 30)
		),
		LVL_4_ENCHANT(
				"Lvl-4 Enchant",
				39,
				57,
				new RuneRequirement(Rune.COSMIC, 1),
				new RuneRequirement(Rune.EARTH, 10)
		),
		WATCHTOWER_TELEPORT(
				"Watchtower Teleport",
				40,
				58,
				new RuneRequirement(Rune.EARTH, 2),
				new RuneRequirement(Rune.LAW, 2)
		),
		FIRE_BLAST(
				"Fire Blast",
				41,
				59,
				new RuneRequirement(Rune.AIR, 4),
				new RuneRequirement(Rune.DEATH, 1),
				new RuneRequirement(Rune.FIRE, 5)
		),
		CHARGE_EARTH_ORB(
				"Charge Earth Orb",
				42,
				60,
				new RuneRequirement(Rune.COSMIC, 3),
				new RuneRequirement(Rune.EARTH, 30)
		),
		BONES_TO_PEACHES(
				"Bones to Peaches",
				43,
				60,
				new RuneRequirement(Rune.EARTH, 2),
				new RuneRequirement(Rune.NATURE, 2),
				new RuneRequirement(Rune.WATER, 4)
		),
		SARADOMIN_STRIKE(
				"Saradomin Strike",
				44,
				60,
				new RuneRequirement(Rune.AIR, 4),
				new RuneRequirement(Rune.BLOOD, 2),
				new RuneRequirement(Rune.FIRE, 2)
		),
		CLAWS_OF_GUTHIX(
				"Claws of Guthix",
				45,
				60,
				new RuneRequirement(Rune.AIR, 4),
				new RuneRequirement(Rune.BLOOD, 2),
				new RuneRequirement(Rune.FIRE, 1)
		),
		FLAMES_OF_ZAMORAK(
				"Flames of Zamorak",
				46,
				60,
				new RuneRequirement(Rune.AIR, 1),
				new RuneRequirement(Rune.BLOOD, 2),
				new RuneRequirement(Rune.FIRE, 4)
		),
		TROLLHEIM_TELEPORT(
				"Trollheim Teleport",
				47,
				61,
				new RuneRequirement(Rune.FIRE, 2),
				new RuneRequirement(Rune.LAW, 2)
		),
		WIND_WAVE(
				"Wind Wave",
				48,
				62,
				new RuneRequirement(Rune.AIR, 5),
				new RuneRequirement(Rune.BLOOD, 1)
		),
		CHARGE_FIRE_ORB(
				"Charge Fire Orb",
				49,
				63,
				new RuneRequirement(Rune.COSMIC, 3),
				new RuneRequirement(Rune.FIRE, 30)
		),
		APE_ATOLL_TELEPORT(
				"Ape Atoll Teleport",
				50,
				64,
				new RuneRequirement(Rune.FIRE, 2),
				new RuneRequirement(Rune.LAW, 2),
				new RuneRequirement(Rune.WATER, 2)
		),
		WATER_WAVE(
				"Water Wave",
				51,
				65,
				new RuneRequirement(Rune.AIR, 5),
				new RuneRequirement(Rune.BLOOD, 1),
				new RuneRequirement(Rune.WATER, 7)
		),
		CHARGE_AIR_ORB(
				"Charge Air Orb",
				52,
				66,
				new RuneRequirement(Rune.AIR, 30),
				new RuneRequirement(Rune.COSMIC, 3)
		),
		VULNERABILITY(
				"Vulnerability",
				53,
				66,
				new RuneRequirement(Rune.EARTH, 5),
				new RuneRequirement(Rune.SOUL, 1),
				new RuneRequirement(Rune.WATER, 5)
		),
		LVL_5_ENCHANT(
				"Lvl-5 Enchant",
				54,
				68,
				new RuneRequirement(Rune.COSMIC, 1),
				new RuneRequirement(Rune.EARTH, 15),
				new RuneRequirement(Rune.WATER, 15)
		),
		EARTH_WAVE(
				"Earth Wave",
				55,
				70,
				new RuneRequirement(Rune.AIR, 5),
				new RuneRequirement(Rune.BLOOD, 1),
				new RuneRequirement(Rune.EARTH, 7)
		),
		ENFEEBLE(
				"Enfeeble",
				56,
				73,
				new RuneRequirement(Rune.EARTH, 8),
				new RuneRequirement(Rune.SOUL, 1),
				new RuneRequirement(Rune.WATER, 8)
		),
		TELEOTHER_LUMBRIDGE(
				"Teleother Lumbridge",
				57,
				74,
				new RuneRequirement(Rune.EARTH, 1),
				new RuneRequirement(Rune.LAW, 1),
				new RuneRequirement(Rune.SOUL, 1)
		),
		FIRE_WAVE(
				"Fire Wave",
				58,
				75,
				new RuneRequirement(Rune.AIR, 5),
				new RuneRequirement(Rune.BLOOD, 1),
				new RuneRequirement(Rune.FIRE, 7)
		),
		ENTANGLE(
				"Entangle",
				59,
				79,
				new RuneRequirement(Rune.EARTH, 5),
				new RuneRequirement(Rune.NATURE, 4),
				new RuneRequirement(Rune.WATER, 5)
		),
		STUN(
				"Stun",
				60,
				80,
				new RuneRequirement(Rune.EARTH, 12),
				new RuneRequirement(Rune.SOUL, 1),
				new RuneRequirement(Rune.WATER, 12)
		),
		CHARGE(
				"Charge",
				61,
				80,
				new RuneRequirement(Rune.AIR, 3),
				new RuneRequirement(Rune.BLOOD, 3),
				new RuneRequirement(Rune.FIRE, 3)
		),
		WIND_SURGE(
				"Wind Surge",
				62,
				81,
				new RuneRequirement(Rune.AIR, 7),
				new RuneRequirement(Rune.WRATH, 1)
		),
		TELEOTHER_FALADOR(
				"Teleother Falador",
				63,
				82,
				new RuneRequirement(Rune.LAW, 1),
				new RuneRequirement(Rune.SOUL, 1),
				new RuneRequirement(Rune.WATER, 1)
		),
		WATER_SURGE(
				"Water Surge",
				64,
				85,
				new RuneRequirement(Rune.AIR, 7),
				new RuneRequirement(Rune.WATER, 10),
				new RuneRequirement(Rune.WRATH, 1)
		),
		TELE_BLOCK(
				"Tele Block",
				65,
				85,
				new RuneRequirement(Rune.CHAOS, 1),
				new RuneRequirement(Rune.DEATH, 1),
				new RuneRequirement(Rune.LAW, 1)
		),
		TELEPORT_TO_BOUNTY_TARGET(
				"Teleport to Bounty Target",
				66,
				85,
				new RuneRequirement(Rune.CHAOS, 1),
				new RuneRequirement(Rune.DEATH, 1),
				new RuneRequirement(Rune.LAW, 1)
		),
		LVL_6_ENCHANT(
				"Lvl-6 Enchant",
				67,
				87,
				new RuneRequirement(Rune.COSMIC, 1),
				new RuneRequirement(Rune.EARTH, 20),
				new RuneRequirement(Rune.FIRE, 20)
		),
		TELEOTHER_CAMELOT(
				"Teleother Camelot",
				68,
				90,
				new RuneRequirement(Rune.LAW, 1),
				new RuneRequirement(Rune.SOUL, 2)
		),
		EARTH_SURGE(
				"Earth Surge",
				69,
				90,
				new RuneRequirement(Rune.AIR, 7),
				new RuneRequirement(Rune.EARTH, 10),
				new RuneRequirement(Rune.WRATH, 1)
		),
		LVL_7_ENCHANT(
				"Lvl-7 Enchant",
				70,
				93,
				new RuneRequirement(Rune.BLOOD, 20),
				new RuneRequirement(Rune.COSMIC, 1),
				new RuneRequirement(Rune.SOUL, 20)
		),
		FIRE_SURGE(
				"Fire Surge",
				71,
				95,
				new RuneRequirement(Rune.AIR, 7),
				new RuneRequirement(Rune.FIRE, 10),
				new RuneRequirement(Rune.WRATH, 1)
		);

		private static final int STANDARD_SPELLBOOK_GROUP_ID = 218;

		private static final int STANDARD_SPELLBOOK_FIRST_SPELL_INDEX = 7;

		private final String name;

		private final int index;

		private final int levelRequirement;

		private final RuneRequirement[] runeRequirements;

		StandardSpell(String name, int index, int levelRequirement, RuneRequirement... runeRequirements)
		{
			this.name = name;
			this.index = index;
			this.levelRequirement = levelRequirement;
			this.runeRequirements = runeRequirements;
		}

		@Override
		public int getGroupId()
		{
			return STANDARD_SPELLBOOK_GROUP_ID;
		}

		public int getChildId()
		{
			return STANDARD_SPELLBOOK_FIRST_SPELL_INDEX + this.getIndex();
		}
	}

	@Getter
	enum LunarSpell implements Spell
	{
		STRING_JEWELLERY(
				"String Jewellery",
				22,
				80,
				new RuneRequirement(Rune.EARTH, 10),
				new RuneRequirement(Rune.ASTRAL, 2),
				new RuneRequirement(Rune.WATER, 5)
		),
		PLANK_MAKE(
				"Plank Make",
				29,
				86,
				new RuneRequirement(Rune.EARTH, 15),
				new RuneRequirement(Rune.ASTRAL, 2),
				new RuneRequirement(Rune.NATURE, 1)
		);

		private static final int LUNAR_SPELLBOOK_GROUP_ID = 218;

		private static final int LUNAR_SPELLBOOK_FIRST_SPELL_INDEX = 104;

		private final String name;

		private final int index;

		private final int levelRequirement;

		private final RuneRequirement[] runeRequirements;

		LunarSpell(String name, int index, int levelRequirement, RuneRequirement... runeRequirements)
		{
			this.name = name;
			this.index = index;
			this.levelRequirement = levelRequirement;
			this.runeRequirements = runeRequirements;
		}

		@Override
		public int getGroupId()
		{
			return LUNAR_SPELLBOOK_GROUP_ID;
		}

		public int getChildId()
		{
			return LUNAR_SPELLBOOK_FIRST_SPELL_INDEX + this.getIndex();
		}
	}

	@Getter
	enum PlankMakeSpell
	{
		PLANK_MAKE(LunarSpell.PLANK_MAKE, ItemID.LOGS, 70),
		PLANK_MAKE_OAK(LunarSpell.PLANK_MAKE, ItemID.OAK_LOGS, 175),
		PLANK_MAKE_TEAK(LunarSpell.PLANK_MAKE, ItemID.TEAK_LOGS, 350),
		PLANK_MAKE_MAHOGANY(LunarSpell.PLANK_MAKE, ItemID.MAHOGANY_LOGS, 1050);

		private final Spell spell;

		private final int plank;

		private final int cost;

		PlankMakeSpell(Spell spell, int plank, int cost)
		{
			this.spell = spell;
			this.plank = plank;
			this.cost = cost;
		}
	}

	@Getter
	enum StringJewellerySpell
	{
		STRING_STRUNG_RABBIT_FOOT(LunarSpell.STRING_JEWELLERY, ItemID.RABBIT_FOOT),
		STRING_HOLY_SYMBOL(LunarSpell.STRING_JEWELLERY, ItemID.UNSTRUNG_SYMBOL),
		STRING_UNHOLY_SYMBOL(LunarSpell.STRING_JEWELLERY, ItemID.UNSTRUNG_EMBLEM),
		STRING_OPAL_AMULET(LunarSpell.STRING_JEWELLERY, ItemID.OPAL_AMULET_U),
		STRING_JADE_AMULET(LunarSpell.STRING_JEWELLERY, ItemID.JADE_AMULET_U),
		STRING_SAPPHIRE_AMULET(LunarSpell.STRING_JEWELLERY, ItemID.SAPPHIRE_AMULET_U),
		STRING_TOPAZ_AMULET(LunarSpell.STRING_JEWELLERY, ItemID.TOPAZ_AMULET_U),
		STRING_EMERALD_AMULET(LunarSpell.STRING_JEWELLERY, ItemID.EMERALD_AMULET_U),
		STRING_RUBY_AMULET(LunarSpell.STRING_JEWELLERY, ItemID.RUBY_AMULET_U),
		STRING_GOLD_AMULET(LunarSpell.STRING_JEWELLERY, ItemID.GOLD_AMULET_U),
		STRING_DIAMOND_AMULET(LunarSpell.STRING_JEWELLERY, ItemID.DIAMOND_AMULET_U),
		STRING_DRAGONSTONE_AMULET(LunarSpell.STRING_JEWELLERY, ItemID.DRAGONSTONE_AMULET_U),
		STRING_ONYX_AMULET(LunarSpell.STRING_JEWELLERY, ItemID.ONYX_AMULET_U),
		STRING_ZENYTE_AMULET(LunarSpell.STRING_JEWELLERY, ItemID.ZENYTE_AMULET_U);

		private final Spell spell;

		private final int jewelleryItemId;

		StringJewellerySpell(Spell spell, int jewelleryItemId)
		{
			this.spell = spell;
			this.jewelleryItemId = jewelleryItemId;
		}
	}

	@Getter
	enum EnchantSpell
	{
		ENCHANT_SAPPHIRE(StandardSpell.LVL_1_ENCHANT, Crafting.SAPPHIRE_AND_OPAL_JEWELLERY),
		ENCHANT_EMERALD(StandardSpell.LVL_2_ENCHANT, Crafting.EMERALD_JEWELLERY),
		ENCHANT_RUBY(StandardSpell.LVL_3_ENCHANT, Crafting.TOPAZ_AND_RUBY_JEWELLERY),
		ENCHANT_DIAMOND(StandardSpell.LVL_4_ENCHANT, Crafting.DIAMOND_JEWELLERY),
		ENCHANT_DRAGONSTONE(StandardSpell.LVL_5_ENCHANT, Crafting.DRAGONSTONE_JEWELLERY),
		ENCHANT_ONYX(StandardSpell.LVL_6_ENCHANT, Crafting.ONYX_JEWELLERY),
		ENCHANT_ZENYTE(StandardSpell.LVL_7_ENCHANT, Crafting.ZENYTE_JEWELLERY);

		private final Spell spell;

		private final int[] jewellery;

		EnchantSpell(Spell spell, int[] jewellery)
		{
			this.spell = spell;
			this.jewellery = jewellery;
			Arrays.sort(jewellery);
		}
	}

	@RequiredArgsConstructor
	@Getter
	enum Rune
	{
		AIR("Air", RuneIDs.AIR.build(), StaveIDs.AIR.build()),
		WATER("Water", RuneIDs.WATER.build(), new IDs(StaveIDs.WATER, ItemID.TOME_OF_WATER).build()),
		EARTH("Earth", RuneIDs.EARTH.build(), new IDs(StaveIDs.EARTH, ItemID.TOME_OF_EARTH).build()),
		FIRE("Fire", RuneIDs.FIRE.build(), new IDs(StaveIDs.FIRE, ItemID.TOME_OF_FIRE).build()),
		MIND("Mind", RuneIDs.MIND.build()),
		BODY("Body", RuneIDs.BODY.build()),
		COSMIC("Cosmic", RuneIDs.COSMIC.build()),
		CHAOS("Chaos", RuneIDs.CHAOS.build()),
		ASTRAL("Astral", RuneIDs.ASTRAL.build()),
		NATURE("Nature", RuneIDs.NATURE.build()),
		LAW("Law", RuneIDs.LAW.build()),
		DEATH("Death", RuneIDs.DEATH.build()),
		BLOOD("Blood", RuneIDs.BLOOD.build()),
		SOUL("Soul", RuneIDs.SOUL.build()),
		WRATH("Wrath", RuneIDs.WRATH.build());

		private final String name;

		private final int[] runeIds;

		private final int[] unlimitedSources;

		private static final int RUNE_POUCH_NUM_SLOTS = 4;

		private static final int[] AMOUNT_VARBITS = {
			Varbits.RUNE_POUCH_AMOUNT1, Varbits.RUNE_POUCH_AMOUNT2, Varbits.RUNE_POUCH_AMOUNT3, Varbits.RUNE_POUCH_AMOUNT4
		};

		private static final int[] RUNE_VARBITS =
		{
			Varbits.RUNE_POUCH_RUNE1, Varbits.RUNE_POUCH_RUNE2, Varbits.RUNE_POUCH_RUNE3, Varbits.RUNE_POUCH_RUNE4
		};

		Rune(String name, int... runeId)
		{
			this(name, runeId, ArrayUtils.EMPTY_INT_ARRAY);
		}

		public int countAvailable(Client client)
		{
			for (int itemId : this.unlimitedSources) {
				ItemContainer equipment = client.getItemContainer(InventoryID.EQUIPMENT);
				if (equipment != null && equipment.contains(itemId)) {
					return Integer.MAX_VALUE;
				}
			}

			EnumComposition runepouchEnum = client.getEnum(EnumID.RUNEPOUCH_RUNE);
			int count = 0;
			
			for (int itemId : this.runeIds) {				
				for (int i = 0; i < RUNE_POUCH_NUM_SLOTS; i++){
					@Varbit int runeVarbit = RUNE_VARBITS[i];
					int runepouchRuneId = client.getVarbitValue(runeVarbit);
					int runeId = runepouchEnum.getIntValue(runepouchRuneId);
					if (runeId == itemId){
						@Varbit int amountVarbit = AMOUNT_VARBITS[i];
						int amount = client.getVarbitValue(amountVarbit);
						count += amount;
					}
				}
				
				ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
				count += inventory == null ? 0 : inventory.count(itemId);
			}
			return count;
		}
	}

	@Getter
	@RequiredArgsConstructor
	enum LecternSpell
	{
		ENCHANT_ONYX(ItemID.ENCHANT_ONYX, "Enchant onyx", StandardSpell.LVL_6_ENCHANT),
		LUMBRIDGE_TELEPORT(ItemID.LUMBRIDGE_TELEPORT, "Lumbridge teleport", StandardSpell.LUMBRIDGE_TELEPORT),
		ENCHANT_DIAMOND(ItemID.ENCHANT_DIAMOND, "Enchant diamond", StandardSpell.LVL_4_ENCHANT),
		WATCHTOWER_TELEPORT(ItemID.WATCHTOWER_TELEPORT, "Watchtower teleport", StandardSpell.WATCHTOWER_TELEPORT),
		HOUSE_TELEPORT(ItemID.TELEPORT_TO_HOUSE, "Teleport to house", StandardSpell.TELEPORT_TO_HOUSE),
		ENCHANT_EMERALD(ItemID.ENCHANT_EMERALD_OR_JADE, "Enchant emerald", StandardSpell.LVL_2_ENCHANT),
		ENCHANT_SAPPHIRE(ItemID.ENCHANT_SAPPHIRE_OR_OPAL, "Enchant sapphire", StandardSpell.LVL_1_ENCHANT),
		FALADOR_TELEPORT(ItemID.FALADOR_TELEPORT, "Falador teleport", StandardSpell.FALADOR_TELEPORT),
		ARDOUGNE_TELEPORT(ItemID.ARDOUGNE_TELEPORT, "Ardougne teleport", StandardSpell.ARDOUGNE_TELEPORT),
		BONES_TO_BANANAS(ItemID.BONES_TO_BANANAS, "Bones to bananas", StandardSpell.BONES_TO_BANANAS),
		ENCHANT_DRAGONSTONE(ItemID.ENCHANT_DRAGONSTONE, "Enchant dragonstone", StandardSpell.LVL_5_ENCHANT),
		ENCHANT_RUBY(ItemID.ENCHANT_RUBY_OR_TOPAZ, "Enchant ruby", StandardSpell.LVL_3_ENCHANT),
		VARROCK_TELEPORT(ItemID.VARROCK_TELEPORT, "Varrock teleport", StandardSpell.VARROCK_TELEPORT),
		CAMELOT_TELEPORT(ItemID.CAMELOT_TELEPORT, "Camelot teleport", StandardSpell.CAMELOT_TELEPORT),
		BONES_TO_PEACHES(ItemID.BONES_TO_PEACHES, "Bones to peaches", StandardSpell.BONES_TO_PEACHES);

		private final int product;

		private final String itemText;

		private final Spell spell;
	}

	@Getter
	@RequiredArgsConstructor
	enum ChargeOrbSpell
	{
		CHARGE_AIR_ORB(ItemID.AIR_ORB, StandardSpell.CHARGE_AIR_ORB),
		CHARGE_EARTH_ORB(ItemID.EARTH_ORB, StandardSpell.CHARGE_EARTH_ORB),
		CHARGE_FIRE_ORB(ItemID.FIRE_ORB, StandardSpell.CHARGE_FIRE_ORB),
		CHARGE_WATER_ORB(ItemID.WATER_ORB, StandardSpell.CHARGE_WATER_ORB);

		private final int product;

		private final Spell spell;

		public static ChargeOrbSpell byProduct(int productId)
		{
			return Arrays.stream(values()).filter(x -> x.product == productId).findFirst().orElse(null);
		}
	}

	@Getter
	enum EnchantCrossbowBoltSpell
	{
		ENCHANT_OPAL_BOLT(ItemID.OPAL_BOLTS_E, ItemID.OPAL_BOLTS, new RuneRequirement(Rune.AIR, 2),new RuneRequirement(Rune.COSMIC, 1)),
		ENCHANT_OPAL_DRAGON_BOLT(ItemID.OPAL_DRAGON_BOLTS_E, ItemID.OPAL_DRAGON_BOLTS, new RuneRequirement(Rune.AIR, 2),new RuneRequirement(Rune.COSMIC, 1)),
		ENCHANT_JADE_BOLT(ItemID.JADE_BOLTS_E, ItemID.JADE_BOLTS, new RuneRequirement(Rune.EARTH, 2),new RuneRequirement(Rune.COSMIC, 1)),
		ENCHANT_JADE_DRAGON_BOLT(ItemID.JADE_DRAGON_BOLTS_E, ItemID.JADE_DRAGON_BOLTS, new RuneRequirement(Rune.EARTH, 2),new RuneRequirement(Rune.COSMIC, 1)),
		ENCHANT_PEARL_BOLT(ItemID.PEARL_BOLTS_E, ItemID.PEARL_BOLTS, new RuneRequirement(Rune.WATER, 2),new RuneRequirement(Rune.COSMIC, 1)),
		ENCHANT_PEARL_DRAGON_BOLT(ItemID.PEARL_DRAGON_BOLTS_E, ItemID.PEARL_DRAGON_BOLTS, new RuneRequirement(Rune.WATER, 2),new RuneRequirement(Rune.COSMIC, 1)),
		ENCHANT_TOPAZ_BOLT(ItemID.TOPAZ_BOLTS_E, ItemID.TOPAZ_BOLTS, new RuneRequirement(Rune.FIRE, 2),new RuneRequirement(Rune.COSMIC, 1)),
		ENCHANT_TOPAZ_DRAGON_BOLT(ItemID.TOPAZ_DRAGON_BOLTS_E, ItemID.TOPAZ_DRAGON_BOLTS, new RuneRequirement(Rune.FIRE, 2),new RuneRequirement(Rune.COSMIC, 1)),
		ENCHANT_SAPPHIRE_BOLT(ItemID.SAPPHIRE_BOLTS_E, ItemID.SAPPHIRE_BOLTS, new RuneRequirement(Rune.WATER, 1),new RuneRequirement(Rune.COSMIC, 1), new RuneRequirement(Rune.MIND, 1)),
		ENCHANT_SAPPHIRE_DRAGON_BOLT(ItemID.SAPPHIRE_DRAGON_BOLTS_E, ItemID.SAPPHIRE_DRAGON_BOLTS, new RuneRequirement(Rune.WATER, 1),new RuneRequirement(Rune.COSMIC, 1), new RuneRequirement(Rune.MIND, 1)),
		ENCHANT_EMERALD_BOLT(ItemID.EMERALD_BOLTS_E, ItemID.EMERALD_BOLTS, new RuneRequirement(Rune.AIR, 3),new RuneRequirement(Rune.COSMIC, 1), new RuneRequirement(Rune.NATURE, 1)),
		ENCHANT_EMERALD_DRAGON_BOLT(ItemID.EMERALD_DRAGON_BOLTS_E, ItemID.EMERALD_DRAGON_BOLTS, new RuneRequirement(Rune.AIR, 3),new RuneRequirement(Rune.COSMIC, 1), new RuneRequirement(Rune.NATURE, 1)),
		ENCHANT_RUBY_BOLT(ItemID.RUBY_BOLTS_E, ItemID.RUBY_BOLTS, new RuneRequirement(Rune.FIRE, 5),new RuneRequirement(Rune.COSMIC, 1), new RuneRequirement(Rune.BLOOD, 1)),
		ENCHANT_RUBY_DRAGON_BOLT(ItemID.RUBY_DRAGON_BOLTS_E, ItemID.RUBY_DRAGON_BOLTS, new RuneRequirement(Rune.FIRE, 5),new RuneRequirement(Rune.COSMIC, 1), new RuneRequirement(Rune.BLOOD, 1)),
		ENCHANT_DIAMOND_BOLT(ItemID.DIAMOND_BOLTS_E, ItemID.DIAMOND_BOLTS, new RuneRequirement(Rune.EARTH, 10),new RuneRequirement(Rune.COSMIC, 1), new RuneRequirement(Rune.LAW, 2)),
		ENCHANT_DIAMOND_BOLT2(ItemID.DIAMOND_BOLTS_E_23649, ItemID.DIAMOND_BOLTS, new RuneRequirement(Rune.EARTH, 10),new RuneRequirement(Rune.COSMIC, 1), new RuneRequirement(Rune.LAW, 2)),
		ENCHANT_DIAMOND_DRAGON_BOLT(ItemID.DIAMOND_DRAGON_BOLTS_E, ItemID.DIAMOND_DRAGON_BOLTS, new RuneRequirement(Rune.EARTH, 10),new RuneRequirement(Rune.COSMIC, 1), new RuneRequirement(Rune.LAW, 2)),
		ENCHANT_DRAGONSTONE_BOLT(ItemID.DRAGONSTONE_BOLTS_E, ItemID.DRAGONSTONE_BOLTS, new RuneRequirement(Rune.EARTH, 15),new RuneRequirement(Rune.COSMIC, 1), new RuneRequirement(Rune.SOUL, 1)),
		ENCHANT_DRAGONSTONE_DRAGON_BOLT(ItemID.DRAGONSTONE_DRAGON_BOLTS_E, ItemID.DRAGONSTONE_DRAGON_BOLTS, new RuneRequirement(Rune.EARTH, 15),new RuneRequirement(Rune.COSMIC, 1), new RuneRequirement(Rune.SOUL, 1)),
		ENCHANT_ONYX_BOLT(ItemID.ONYX_BOLTS_E, ItemID.ONYX_BOLTS, new RuneRequirement(Rune.FIRE, 20),new RuneRequirement(Rune.COSMIC, 1), new RuneRequirement(Rune.DEATH, 1)),
		ENCHANT_ONYX_DRAGON_BOLT(ItemID.ONYX_DRAGON_BOLTS_E, ItemID.ONYX_DRAGON_BOLTS, new RuneRequirement(Rune.FIRE, 20),new RuneRequirement(Rune.COSMIC, 1), new RuneRequirement(Rune.DEATH, 1));

		private final int product;

		private final int source;

		private final RuneRequirement[] runeRequirements;

		EnchantCrossbowBoltSpell(int productId, int sourceId, RuneRequirement... runeRequirements)
		{
			this.product = productId;
			this.source = sourceId;
			this.runeRequirements = runeRequirements;
		}

		public static int getAvailableCasts(Client client, int productId)
		{
			EnchantCrossbowBoltSpell spell = Arrays.stream(values()).filter(x -> x.product == productId).findFirst().orElse(null);
			Objects.requireNonNull(spell, "No enchant crossbow bolt spell found for product: " + productId);

			int min = Integer.MAX_VALUE;

			for (RuneRequirement requirement : spell.getRuneRequirements()) {
				int amount = requirement.getRune().countAvailable(client);
				min = Math.min(min, amount / requirement.getAmount());
			}

			ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
			return min = Math.min(min, inventory.count(spell.getSource()) / 10);
		}
	}

	interface StaveIDs
	{

		IDs SMOKE = new IDs(
				ItemID.SMOKE_BATTLESTAFF,
				ItemID.MYSTIC_SMOKE_STAFF
		);
		IDs DUST = new IDs(
				ItemID.DUST_BATTLESTAFF,
				ItemID.MYSTIC_DUST_STAFF
		);
		IDs MIST = new IDs(
				ItemID.MIST_BATTLESTAFF,
				ItemID.MYSTIC_MIST_STAFF
		);
		IDs MUD = new IDs(
				ItemID.MUD_BATTLESTAFF,
				ItemID.MYSTIC_MUD_STAFF
		);
		IDs LAVA = new IDs(
				ItemID.LAVA_BATTLESTAFF,
				ItemID.LAVA_BATTLESTAFF_21198,
				ItemID.MYSTIC_LAVA_STAFF,
				ItemID.MYSTIC_LAVA_STAFF_21200
		);
		IDs STEAM = new IDs(
				ItemID.STEAM_BATTLESTAFF,
				ItemID.STEAM_BATTLESTAFF_12795,
				ItemID.MYSTIC_STEAM_STAFF,
				ItemID.MYSTIC_STEAM_STAFF_12796
		);
		IDs AIR = new IDs(
				SMOKE,
				DUST,
				MIST,
				STEAM,
				ItemID.STAFF_OF_AIR,
				ItemID.AIR_BATTLESTAFF,
				ItemID.MYSTIC_AIR_STAFF
		);
		IDs WATER = new IDs(
				MUD,
				MIST,
				STEAM,
				ItemID.STAFF_OF_WATER,
				ItemID.WATER_BATTLESTAFF,
				ItemID.MYSTIC_WATER_STAFF
		);
		IDs EARTH = new IDs(
				DUST,
				MUD,
				LAVA,
				ItemID.STAFF_OF_EARTH,
				ItemID.EARTH_BATTLESTAFF,
				ItemID.MYSTIC_EARTH_STAFF
		);
		IDs FIRE = new IDs(
				SMOKE, 
				STEAM, 
				LAVA, 
				ItemID.STAFF_OF_FIRE, 
				ItemID.FIRE_BATTLESTAFF,
				ItemID.MYSTIC_FIRE_STAFF
		);

	}

	interface RuneIDs
	{

		IDs SMOKE = new IDs(ItemID.SMOKE_RUNE);
		IDs DUST = new IDs(ItemID.DUST_RUNE);
		IDs LAVA = new IDs(ItemID.LAVA_RUNE);
		IDs MIST = new IDs(ItemID.MIST_RUNE);
		IDs MUD = new IDs(ItemID.MUD_RUNE);
		IDs STEAM = new IDs(ItemID.STEAM_RUNE);
		IDs AIR = new IDs(
				SMOKE,
				DUST,
				MIST,
				ItemID.AIR_RUNE,
				ItemID.AIR_RUNE_NZ,
				ItemID.AIR_RUNE_6422,
				ItemID.AIR_RUNE_7558,
				ItemID.AIR_RUNE_9693,
				ItemID.AIR_RUNE_11688
		);
		IDs WATER = new IDs(
				MIST,
				MUD,
				STEAM,
				ItemID.WATER_RUNE,
				ItemID.WATER_RUNE_NZ,
				ItemID.WATER_RUNE_6424,
				ItemID.WATER_RUNE_7556,
				ItemID.WATER_RUNE_9691,
				ItemID.WATER_RUNE_11687
		);
		IDs EARTH = new IDs(
				DUST,
				LAVA,
				MUD,
				ItemID.EARTH_RUNE,
				ItemID.EARTH_RUNE_NZ,
				ItemID.EARTH_RUNE_6426,
				ItemID.EARTH_RUNE_9695,
				ItemID.EARTH_RUNE_11689
		);
		IDs FIRE = new IDs(
				SMOKE,
				LAVA,
				STEAM,
				ItemID.FIRE_RUNE,
				ItemID.FIRE_RUNE_NZ,
				ItemID.FIRE_RUNE_6428,
				ItemID.FIRE_RUNE_7554,
				ItemID.FIRE_RUNE_9699,
				ItemID.FIRE_RUNE_11686
		);
		IDs MIND = new IDs(
				ItemID.MIND_RUNE,
				ItemID.MIND_RUNE_6436,
				ItemID.MIND_RUNE_9697,
				ItemID.MIND_RUNE_11690
		);
		IDs BODY = new IDs(
				ItemID.BODY_RUNE,
				ItemID.BODY_RUNE_6438,
				ItemID.BODY_RUNE_11691
		);
		IDs COSMIC = new IDs(
				ItemID.COSMIC_RUNE,
				ItemID.COSMIC_RUNE_11696
		);
		IDs CHAOS = new IDs(
				ItemID.CHAOS_RUNE,
				ItemID.CHAOS_RUNE_NZ,
				ItemID.CHAOS_RUNE_6430,
				ItemID.CHAOS_RUNE_7560,
				ItemID.CHAOS_RUNE_11694
		);
		IDs ASTRAL = new IDs(
				ItemID.ASTRAL_RUNE,
				ItemID.ASTRAL_RUNE_11699
		);
		IDs NATURE = new IDs(
				ItemID.NATURE_RUNE,
				ItemID.NATURE_RUNE_11693
		);
		IDs LAW = new IDs(
				ItemID.LAW_RUNE,
				ItemID.LAW_RUNE_6434,
				ItemID.LAW_RUNE_11695
		);
		IDs DEATH = new IDs(
				ItemID.DEATH_RUNE,
				ItemID.DEATH_RUNE_NZ,
				ItemID.DEATH_RUNE_6432,
				ItemID.DEATH_RUNE_11692
		);
		IDs BLOOD = new IDs(
				ItemID.BLOOD_RUNE,
				ItemID.BLOOD_RUNE_NZ,
				ItemID.BLOOD_RUNE_11697
		);
		IDs SOUL = new IDs(
				ItemID.SOUL_RUNE,
				ItemID.SOUL_RUNE_11698
		);
		IDs WRATH = new IDs(
				ItemID.WRATH_RUNE,
				ItemID.WRATH_RUNE_22208
		);

	}

	interface Spell
	{

		String getName();

		int getGroupId();

		int getChildId();

		int getLevelRequirement();

		RuneRequirement[] getRuneRequirements();

		default int getWidgetId()
		{
			return this.getGroupId() << 16 | this.getChildId();
		}

		default int getAvailableCasts(Client client)
		{
			int min = Integer.MAX_VALUE;
			for (RuneRequirement requirement : this.getRuneRequirements()) {
				int amount = requirement.getRune().countAvailable(client);
				min = Math.min(min, amount / requirement.getAmount());
			}
			return min;
		}

	}

	@Data
	class RuneRequirement
	{

		private final Rune rune;

		private final int amount;

	}

}
package com.github.calebwhiting.runelite.data;

import com.github.calebwhiting.runelite.plugins.actionprogress.CoalBag;
import lombok.Data;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.ItemContainer;
import net.runelite.api.ItemID;

public interface Smithing
{

	@Getter
	enum Bar
	{
		BRONZE(ItemID.BRONZE_BAR, new OreRequirement(Ore.COPPER, 1), new OreRequirement(Ore.TIN, 1)),
		BLURITE(ItemID.BLURITE_BAR, new OreRequirement(Ore.BLURITE, 1)),
		IRON(ItemID.IRON_BAR, new OreRequirement(Ore.IRON, 1)),
		SILVER(ItemID.SILVER_BAR, new OreRequirement(Ore.SILVER, 1)),
		STEEL(ItemID.STEEL_BAR, new OreRequirement(Ore.IRON, 1), new OreRequirement(Ore.COAL, 2)),
		GOLD(ItemID.GOLD_BAR, new OreRequirement(Ore.GOLD, 1)),
		MITHRIL(ItemID.MITHRIL_BAR, new OreRequirement(Ore.MITHRIL, 1), new OreRequirement(Ore.COAL, 4)),
		ADAMANTITE(ItemID.ADAMANTITE_BAR, new OreRequirement(Ore.ADAMANTITE, 1), new OreRequirement(Ore.COAL, 6)),
		RUNITE(ItemID.RUNITE_BAR, new OreRequirement(Ore.RUNITE, 1), new OreRequirement(Ore.COAL, 8));

		private final int itemId;

		private final OreRequirement[] requirements;

		Bar(int itemId, OreRequirement... requirements)
		{
			this.itemId = itemId;
			this.requirements = requirements;
		}

		public int countAvailableOres(Client client)
		{
			ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
			if (inventory == null) {
				return 0;
			}
			int count = Integer.MAX_VALUE;
			for (OreRequirement requirement : this.requirements) {
				int oreCount = inventory.count(requirement.getOre().getItemId());
				if (requirement.getOre().getItemId() == ItemID.COAL)
				{
					oreCount += CoalBag.getAmount();
				}
				if (oreCount == 0) {
					return 0;
				}
				count = Math.min(count, oreCount / requirement.getAmount());
			}
			return count;
		}
	}

	@Getter
	@RequiredArgsConstructor
	enum Ore
	{
		TIN(ItemID.TIN_ORE),
		COPPER(ItemID.COPPER_ORE),
		IRON(ItemID.IRON_ORE),
		BLURITE(ItemID.BLURITE_ORE),
		SILVER(ItemID.SILVER_ORE),
		COAL(ItemID.COAL),
		GOLD(ItemID.GOLD_ORE),
		MITHRIL(ItemID.MITHRIL_ORE),
		ADAMANTITE(ItemID.ADAMANTITE_ORE),
		RUNITE(ItemID.RUNITE_ORE);

		private final int itemId;
	}

	@Data
	class OreRequirement
	{

		private final Ore ore;

		private final int amount;

	}

}
package com.github.calebwhiting.runelite.data;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.ItemID;

public interface Cooking
{

	@Getter
	@RequiredArgsConstructor
	enum Cookable
	{
		PLAIN_PIZZA(ItemID.UNCOOKED_PIZZA, ItemID.PLAIN_PIZZA),
		SARDINE(ItemID.RAW_SARDINE, ItemID.SARDINE),
		SALMON(ItemID.RAW_SALMON, ItemID.SALMON),
		TROUT(ItemID.RAW_TROUT, ItemID.TROUT),
		COD(ItemID.RAW_COD, ItemID.COD),
		HERRING(ItemID.RAW_HERRING, ItemID.HERRING),
		PIKE(ItemID.RAW_PIKE, ItemID.PIKE),
		MACKEREL(ItemID.RAW_MACKEREL, ItemID.MACKEREL),
		TUNA(new IDs(ItemID.RAW_TUNA), new IDs(ItemID.TUNA, ItemID.TUNA_26149)),
		BASS(ItemID.RAW_BASS, ItemID.BASS),
		SWORDFISH(ItemID.RAW_SWORDFISH, ItemID.SWORDFISH),
		LOBSTER(ItemID.RAW_LOBSTER, ItemID.LOBSTER),
		SHARK(new IDs(ItemID.RAW_SHARK), new IDs(ItemID.SHARK, ItemID.SHARK_6969, ItemID.SHARK_20390)),
		LAVA_EEL(ItemID.RAW_LAVA_EEL, ItemID.LAVA_EEL),
		MANTA_RAY(ItemID.RAW_MANTA_RAY, ItemID.MANTA_RAY),
		MONKFISH(new IDs(ItemID.RAW_MONKFISH), new IDs(ItemID.MONKFISH, ItemID.MONKFISH_20547)),
		DARK_CRAB(ItemID.RAW_DARK_CRAB, ItemID.DARK_CRAB),
		ANGLERFISH(ItemID.RAW_ANGLERFISH, ItemID.ANGLERFISH),
		KARAMBWAN(new IDs(ItemID.RAW_KARAMBWAN), new IDs(
				ItemID.COOKED_KARAMBWAN,
				ItemID.COOKED_KARAMBWAN_3147,
				ItemID.COOKED_KARAMBWAN_23533,
				ItemID.POISON_KARAMBWAN
		)),
		SLIMY_EEL(ItemID.RAW_SLIMY_EEL, ItemID.COOKED_SLIMY_EEL),
		RAINBOW_FISH(ItemID.RAW_RAINBOW_FISH, ItemID.RAINBOW_FISH),
		HARPOONFISH(ItemID.RAW_HARPOONFISH, ItemID.HARPOONFISH),
		APPLE_PIE(ItemID.UNCOOKED_APPLE_PIE, ItemID.APPLE_PIE),
		REDBERRY_PIE(ItemID.UNCOOKED_BERRY_PIE, ItemID.REDBERRY_PIE),
		MEAT_PIE(ItemID.UNCOOKED_MEAT_PIE, ItemID.MEAT_PIE),
		BOTANICAL_PIE(ItemID.UNCOOKED_BOTANICAL_PIE, ItemID.BOTANICAL_PIE),
		MUSHROOM_PIE(ItemID.UNCOOKED_MUSHROOM_PIE, ItemID.MUSHROOM_PIE),
		DRAGONFRUIT_PIE(ItemID.UNCOOKED_DRAGONFRUIT_PIE, ItemID.DRAGONFRUIT_PIE),
		ADMIRAL_PIE(ItemID.RAW_ADMIRAL_PIE, ItemID.ADMIRAL_PIE),
		FISH_PIE(ItemID.RAW_FISH_PIE, ItemID.FISH_PIE),
		GARDEN_PIE(ItemID.RAW_GARDEN_PIE, ItemID.GARDEN_PIE),
		SUMMER_PIE(ItemID.RAW_SUMMER_PIE, ItemID.SUMMER_PIE),
		WILD_PIE(ItemID.RAW_WILD_PIE, ItemID.WILD_PIE),
		UGTHANKI_MEAT(ItemID.RAW_UGTHANKI_MEAT, ItemID.UGTHANKI_MEAT),
		THIN_SNAIL(ItemID.THIN_SNAIL, ItemID.THIN_SNAIL_MEAT),
		LEAN_SNAIL(ItemID.LEAN_SNAIL, ItemID.LEAN_SNAIL_MEAT),
		FAT_SNAIL(ItemID.FAT_SNAIL, ItemID.FAT_SNAIL_MEAT),
		MYSTERY_MEAT(ItemID.RAW_MYSTERY_MEAT, ItemID.COOKED_MYSTERY_MEAT),
		CHICKEN(
				new IDs(ItemID.RAW_CHICKEN, ItemID.RAW_CHICKEN_4289),
				new IDs(ItemID.COOKED_CHICKEN, ItemID.COOKED_CHICKEN_4291)
		),
		MEAT(
				new IDs(
						ItemID.RAW_BEEF,
						ItemID.RAW_BEEF_4287,
						ItemID.RAW_RAT_MEAT,
						ItemID.RAW_BEAR_MEAT,
						ItemID.RAW_YAK_MEAT
				),
				new IDs(ItemID.COOKED_MEAT)
		),
		WRAPPED_OOMLIE(ItemID.WRAPPED_OOMLIE, ItemID.COOKED_OOMLIE_WRAP),
		CHOMPY(ItemID.RAW_CHOMPY, ItemID.COOKED_CHOMPY),
		SKEWERED_CHOMPY(ItemID.SKEWERED_CHOMPY, ItemID.COOKED_CHOMPY_7228),
		CRAB_MEAT(ItemID.CRAB_MEAT, ItemID.COOKED_CRAB_MEAT),
		JUBBLY(ItemID.RAW_JUBBLY, ItemID.COOKED_JUBBLY),
		SKEWERED_BIRD_MEAT(ItemID.SKEWERED_BIRD_MEAT, ItemID.ROAST_BIRD_MEAT),
		SKEWERED_BEAST(new IDs(ItemID.RAW_BEAST_MEAT, ItemID.SKEWERED_BEAST), new IDs(ItemID.ROAST_BEAST_MEAT)),
		RABBIT(ItemID.RAW_RABBIT, ItemID.COOKED_RABBIT),
		SKEWERED_RABBIT(ItemID.SKEWERED_RABBIT, ItemID.ROAST_RABBIT),
		SPIDER_ON_STICK(ItemID.SPIDER_ON_STICK, ItemID.SPIDER_ON_STICK_6297),
		BAKED_POTATO(ItemID.POTATO, ItemID.BAKED_POTATO),
		SWEETCORN(ItemID.SWEETCORN, ItemID.COOKED_SWEETCORN),
		GIANT_SEAWEED(ItemID.GIANT_SEAWEED, ItemID.SODA_ASH),
		SEAWEED(ItemID.SEAWEED, ItemID.SODA_ASH),
		EDIBLE_SEAWEED(ItemID.EDIBLE_SEAWEED, ItemID.SODA_ASH);

		private final IDs raw;

		private final IDs cooked;

		Cookable(int raw, int cooked)
		{
			this(new IDs(raw), new IDs(cooked));
		}
	}

}
package com.github.calebwhiting.runelite.data;

import net.runelite.api.ItemID;

public interface Fletching
{
	int[] UNENCHANTED_BOLTS_AND_ARROWS = {
			ItemID.BRONZE_BOLTS, ItemID.BRONZE_ARROW, ItemID.IRON_ARROW, ItemID.STEEL_ARROW, ItemID.MITHRIL_ARROW,
			ItemID.ADAMANT_ARROW, ItemID.RUNE_ARROW, ItemID.OGRE_ARROW, ItemID.BROAD_ARROWS, ItemID.BROAD_ARROWS_4160,
			ItemID.BRONZE_BRUTAL, ItemID.IRON_BRUTAL, ItemID.STEEL_BRUTAL, ItemID.BLACK_BRUTAL, ItemID.MITHRIL_BRUTAL,
			ItemID.ADAMANT_BRUTAL, ItemID.RUNE_BRUTAL, ItemID.MITHRIL_ARROW_7552, ItemID.BLURITE_BOLTS, ItemID.IRON_BOLTS,
			ItemID.STEEL_BOLTS,ItemID.MITHRIL_BOLTS, ItemID.ADAMANT_BOLTS, ItemID.RUNITE_BOLTS, ItemID.SILVER_BOLTS,
			ItemID.DRAGON_ARROW,ItemID.BRONZE_ARROW_11700, ItemID.IRON_ARROW_11701,
			ItemID.STEEL_ARROW_11702, ItemID.MITHRIL_ARROW_11703, ItemID.BROAD_BOLTS, ItemID.ADAMANT_ARROW_20388,
			ItemID.DRAGON_ARROW_20389, ItemID.RUNE_ARROW_20600, ItemID.DRAGON_BOLTS, ItemID.BARBED_ARROW
	};
	int[] BOLT_TIPS = {
			ItemID.OPAL_BOLT_TIPS, ItemID.PEARL_BOLT_TIPS, ItemID.JADE_BOLT_TIPS, ItemID.TOPAZ_BOLT_TIPS,
			ItemID.SAPPHIRE_BOLT_TIPS, ItemID.EMERALD_BOLT_TIPS, ItemID.RUBY_BOLT_TIPS, ItemID.DIAMOND_BOLT_TIPS,
			ItemID.DRAGONSTONE_BOLT_TIPS, ItemID.ONYX_BOLT_TIPS
	};

	int[] JAVELINS = {
			ItemID.BRONZE_JAVELIN, ItemID.IRON_JAVELIN, ItemID.STEEL_JAVELIN, ItemID.MITHRIL_JAVELIN,
			ItemID.ADAMANT_JAVELIN, ItemID.RUNE_JAVELIN, ItemID.AMETHYST_JAVELIN, ItemID.DRAGON_JAVELIN,
	};
}

package com.github.calebwhiting.runelite.plugins.actionprogress;

import com.github.calebwhiting.runelite.data.Ingredient;
import com.github.calebwhiting.runelite.data.Recipe;
import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.api.Item;

import java.util.Arrays;
import java.util.stream.Stream;

@Getter
public class Product extends Recipe
{

	private final Action action;

	public Product(Action action, int productId, Ingredient... requirements)
	{
		super(productId, requirements);
		this.action = action;
	}

	public Product(Action action, int productId, Ingredient[] requirements, Ingredient tool)
	{
		super(productId, requirements, tool);
		this.action = action;
	}

	public Product(Action action, int productId, Boolean isSelectingIngredientAsProduct, Ingredient... requirements)
	{
		super(productId, isSelectingIngredientAsProduct, requirements);
		this.action = action;
	}

	public boolean isMadeWith(Item... items)
	{
		return Stream.of(items)
					 .mapToInt(Item::getId)
					 .allMatch(id -> Arrays.stream(this.getRequirements())
										   .mapToInt(Ingredient::getItemId)
										   .anyMatch(i -> i == id));
	}
	public boolean IngredientsIsIncludedIn(String ingredientString, Client client){
		return Stream.of(getRequirements())
					 .anyMatch(ing -> ingredientString.toLowerCase().contains(
							 client.getItemDefinition(ing.getItemId()).getName().toLowerCase())
					 );
	}
}

package com.github.calebwhiting.runelite.plugins.actionprogress;

import com.github.calebwhiting.runelite.api.ui.IconSource;
import com.github.calebwhiting.runelite.api.ui.ItemIconSource;
import com.github.calebwhiting.runelite.api.ui.SpriteIconSource;
import net.runelite.api.ItemID;
import net.runelite.api.SpriteID;

public interface ActionIcon
{

	IconSource SPRITE_TOTAL = new SpriteIconSource(SpriteID.SKILL_TOTAL, 0);
	IconSource SPRITE_CRAFTING = new SpriteIconSource(SpriteID.SKILL_CRAFTING, 0);
	IconSource SPRITE_FISHING = new SpriteIconSource(SpriteID.SKILL_FISHING, 0);
	IconSource SPRITE_WOODCUTTING = new SpriteIconSource(SpriteID.SKILL_WOODCUTTING, 0);
	IconSource SPRITE_COOKING = new SpriteIconSource(SpriteID.SKILL_COOKING, 0);
	IconSource SPRITE_FLETCHING = new SpriteIconSource(SpriteID.SKILL_FLETCHING, 0);
	IconSource SPRITE_FIREMAKING = new SpriteIconSource(SpriteID.SKILL_FIREMAKING, 0);
	IconSource SPRITE_SMITHING = new SpriteIconSource(SpriteID.SKILL_SMITHING, 0);
	IconSource SPRITE_MAGIC = new SpriteIconSource(SpriteID.SKILL_MAGIC, 0);
	IconSource SPRITE_HERBLORE = new SpriteIconSource(SpriteID.SKILL_HERBLORE, 0);
	IconSource SPRITE_GUARDIAN_OF_THE_RIFT_REWARD = new ItemIconSource(ItemID.ABYSSAL_PROTECTOR);
	IconSource SPRITE_FARMING = new SpriteIconSource(SpriteID.SKILL_FARMING, 0);
	IconSource SPRITE_BUCKET = new ItemIconSource(ItemID.BUCKET);

}

/*
 * Copyright (c) 2019 Adam <Adam@sigterm.info>
 * Copyright (c) 2021 Nick Wolff <nick@wolff.tech>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

//Taken from https://github.com/WolffTech/coal-bag-plugin/blob/master/src/main/java/com/coalbagplugin/CoalBag.java

package com.github.calebwhiting.runelite.plugins.actionprogress;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class CoalBag
{
	private static final int UNKNOWN_AMOUNT = 0;
	private static final int EMPTY_AMOUNT = 0;

	private static final Pattern BAG_EMPTY_MESSAGE = Pattern.compile("^The coal bag is (?:now\\s)?empty\\.");
	private static final Pattern BAG_ONE_OR_MANY_MESSAGE = Pattern.compile("^The coal bag (?:still\\s)?contains ([\\d]+|one) pieces? of coal\\.");

	private static int storedAmount;

	private static void setAmount(int amount)
	{
		storedAmount = amount;
	}

	private static void setEmptyAmount()
	{
		storedAmount = EMPTY_AMOUNT;
	}

	public static void setUnknownAmount()
	{
		storedAmount = UNKNOWN_AMOUNT;
	}

	public static int getAmount()
	{
		return storedAmount;
	}

	public static void updateAmount(String message)
	{
		final Matcher emptyMatcher = BAG_EMPTY_MESSAGE.matcher(message);
		if (emptyMatcher.matches())
		{
			setEmptyAmount();
		}
		else
		{
			final Matcher oneOrManyMatcher = BAG_ONE_OR_MANY_MESSAGE.matcher(message);
			if (oneOrManyMatcher.matches())
			{
				final String match = oneOrManyMatcher.group(1);
				if (match.equals("one"))
				{
					setAmount(1);
				} else {
					setAmount(Integer.parseInt(match));
				}
			}
		}
	}

	public static boolean isUnknown()
	{
		return storedAmount == UNKNOWN_AMOUNT;
	}

	public static boolean isEmpty()
	{
		return storedAmount == EMPTY_AMOUNT;
	}
}
package com.github.calebwhiting.runelite.plugins.actionprogress;

import com.github.calebwhiting.runelite.api.InterruptManager;
import com.github.calebwhiting.runelite.api.InventoryManager;
import com.github.calebwhiting.runelite.api.LocalPlayerManager;
import com.github.calebwhiting.runelite.api.TickManager;
import com.github.calebwhiting.runelite.plugins.actionprogress.detect.*;
import com.github.calebwhiting.runelite.plugins.actionprogress.event.ActionStartedEvent;
import com.github.calebwhiting.runelite.plugins.actionprogress.event.ActionStoppedEvent;
import com.google.inject.Inject;
import com.google.inject.Provides;
import com.google.inject.Singleton;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.ClientTick;
import net.runelite.api.widgets.Widget;
import net.runelite.client.Notifier;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.awt.*;
import java.util.Collection;
import java.util.Collections;
import java.util.LinkedList;

@Slf4j
@Singleton
@Getter
@PluginDescriptor(name = "Action Progress")
public class ActionProgressPlugin extends Plugin
{

	private static final Class<?>[] DETECTORS = new Class[]{
			ChatboxDetector.class, UseItemOnItemDetector.class, EnchantSpellDetector.class, PlankMakeSpellDetector.class,
			FurnaceCastingDetector.class, LecternDetector.class, SandpitDetector.class, SmithingDetector.class,
			TemporossDetector.class, TemporossRewardPoolDetector.class, ItemClickDetector.class, GuardianOfTheRift.class, StringJewellerySpellDetector.class
			// WintertodtDetector.class
	};

	private final Collection<Object> eventHandlers = new LinkedList<>();

	@Inject private ActionProgressConfig config;

	@Inject private ActionProgressOverlay overlay;

	@Inject private ActionManager actionManager;

	@Inject private OverlayManager overlayManager;

	@Inject private ItemManager itemManager;

	@Inject private SpriteManager spriteManager;

	@Inject private Notifier notifier;

	@Inject private EventBus eventBus;

	@Inject private ClientThread clientThread;

	@Inject private Client client;

	@Getter private String currentActionName;

	@Getter private Image currentProductImage;

	@Override
	protected void startUp() throws Exception
	{
		log.debug("starting up");
		super.startUp();
		this.overlay.setResizable(true);
		this.currentProductImage = this.itemManager.getImage(1050); //Santa hat
		this.overlayManager.add(this.overlay);
		Collections.addAll(this.eventHandlers, this.injector.getInstance(TickManager.class),
				this.injector.getInstance(InterruptManager.class),
				this.injector.getInstance(InventoryManager.class),
				this.injector.getInstance(ActionManager.class),
				this.injector.getInstance(LocalPlayerManager.class)
		);
		for (Class<?> detector : DETECTORS) {
			log.debug("initializing detector {}", detector);
			ActionDetector instance = (ActionDetector) this.injector.getInstance(detector);
			this.eventHandlers.add(instance);
			this.clientThread.invoke(instance::setup);
		}
		this.eventHandlers.forEach(this.eventBus::register);
		CoalBag.setUnknownAmount();
	}

	@Override
	protected void shutDown() throws Exception
	{
		log.debug("shutting down");
		super.shutDown();
		this.overlayManager.remove(this.overlay);
		this.eventHandlers.forEach(this.eventBus::unregister);
		for (Class<?> detector : DETECTORS) {
			log.debug("shutDown detector {}", detector);
			ActionDetector instance = (ActionDetector) this.injector.getInstance(detector);
			this.eventHandlers.add(instance);
			this.clientThread.invoke(instance::shutDown);
		}
		this.eventHandlers.clear();
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		if (event.getType() == ChatMessageType.GAMEMESSAGE)
		{
			CoalBag.updateAmount(event.getMessage());
		}
	}

	@Subscribe
	public void onClientTick(ClientTick clientTick)
	{
		// running this under onClientTick as it is possible to close the widget on the same tick that it opens.
		// because the coal bag sometimes displays the emptied amount message as a widget, we need to check for that here.
		Widget coalBagWidget = client.getWidget(12648450);
		if (coalBagWidget != null)
		{
			CoalBag.updateAmount(coalBagWidget.getText());
		}
	}

	@Subscribe
	public void onActionStartedEvent(ActionStartedEvent evt)
	{
		this.currentActionName = evt.getAction().getDescription();
		if (this.config.showProductIcons() && evt.getProductId() != -1) {
			log.debug("fetching item sprite");
			this.currentProductImage = this.itemManager.getImage(evt.getProductId());
		} else {
			log.debug("fetching action sprite");
			this.currentProductImage = evt.getAction()
										  .getIconSource()
										  .toBufferedImage(this.itemManager, this.spriteManager);
		}
	}

	@Subscribe
	public void onActionStoppedEvent(ActionStoppedEvent evt)
	{
		if (this.client.getTickCount() <= evt.getStartTick() + 1) {
			log.debug("ignoring fast failure");
			return;
		}
		if (this.config.notifyWhenFinished().isEnabled() && !evt.isInterrupted()) {
			this.notifier.notify(config.notifyWhenFinished(), "All of your items have been processed!");
		}
	}

	@Provides
	ActionProgressConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ActionProgressConfig.class);
	}

}
package com.github.calebwhiting.runelite.plugins.actionprogress;

import com.github.calebwhiting.runelite.api.ui.Alignment;
import com.github.calebwhiting.runelite.api.ui.Rendering;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import net.runelite.api.Client;
import net.runelite.client.config.RuneLiteConfig;
import net.runelite.client.ui.overlay.Overlay;

import java.awt.*;

@Singleton
public class ActionProgressOverlay extends Overlay
{

	private static final Dimension EMPTY = new Dimension(0, 0);

	private static final int ICON_SIZE = 32;
	
	private static final int INSET = 5;

	private static final int PAD = 2;

	private static final int PROGRESS_MIN_HEIGHT = 40;

	private static final int PROGRESS_MIN_WIDTH = 50;

	private static final int PROGRESS_MIN_WIDTH_HORIZONTAL = INSET + ICON_SIZE + PAD + PROGRESS_MIN_WIDTH + INSET;

	@Inject private ActionProgressPlugin plugin;

	@Inject private ActionManager actionManager;

	@Inject private Client client;

	@Inject private RuneLiteConfig runeLiteConfig;

	@Inject private ActionProgressConfig config;

	@Override
	public Dimension render(Graphics2D g)
	{
		try {
			this.setMinimumSize(20);
			Dimension preferredDimension = this.getPreferredSize();
			int tick = this.client.getTickCount();
			Image icon = this.plugin.getCurrentProductImage();
			if (tick > this.actionManager.getActionEndTick()) {
				return EMPTY;
				//return this.renderInfobox(g, "Leather-working", "0/10", "130s", icon, 0, 2, 1, preferredDimension); //For debugging
			}
			String timeString = 
				this.config.useTicks() 
					? String.format("%dt", Math.round((float) this.actionManager.getTicksLeft()))
					: String.format("%ds", Math.round((float) this.actionManager.getApproximateCompletionTime() / 1000));
			String header = String.format("%s", this.plugin.getCurrentActionName());
			String count = String.format("%d/%d", this.actionManager.getCurrentActionProcessed(),this.actionManager.getActionCount());
			long min, max, value;
			if (this.config.smoothProgressBar()) {
				min = this.actionManager.getActionStartMs();
				max = this.actionManager.getActionEndMs();
				value = System.currentTimeMillis();
			} else {
				min = this.actionManager.getActionStartTick();
				max = this.actionManager.getActionEndTick();
				value = tick;
			}
			return this.renderInfobox(g, header, count, timeString, icon, min, max, value, preferredDimension);
		} catch (Throwable t) {
			t.printStackTrace();
			return EMPTY;
		}
	}

	private Dimension renderInfobox(
			Graphics2D g, String header, String count, String timeString, Image icon, long min, long max, long value, Dimension preferredDimension)
	{
		FontMetrics fm = g.getFontMetrics();

		int preferredWidth = preferredDimension != null ? (int)preferredDimension.getWidth() : 200;
		int preferredHeight = preferredDimension != null ? (int)preferredDimension.getHeight() : 55;

		boolean isVertical = false;
		boolean isCompact = false;
		int height = 0;
		int width = 0;
		
		if (preferredWidth < PROGRESS_MIN_WIDTH_HORIZONTAL){
			isVertical = true;
			width = Math.max(INSET + INSET + PAD + PAD + INSET + INSET, preferredWidth);
			height = Math.max(INSET + ICON_SIZE + PAD + PROGRESS_MIN_HEIGHT + INSET, preferredHeight);
		}
		else{
			if (preferredHeight < 33){
				isCompact = true;
			}
			width = Math.max(INSET + ICON_SIZE + PAD + PROGRESS_MIN_WIDTH + INSET, preferredWidth);
			height = Math.max(PAD + fm.getHeight() + PAD, preferredHeight);
		}
		
		Color border = Rendering.outsideStrokeColor(this.runeLiteConfig.overlayBackgroundColor());
		Color progressDoneColor = this.config.progressDoneColor();
		Color progressLeftColor = this.config.progressLeftColor();
		g.setColor(this.runeLiteConfig.overlayBackgroundColor());
		g.fillRect(0, 0, width, height);
		g.setColor(border);
		g.drawRect(0, 0, width, height);
		
		String actionText = header + " (" + count + ")";


		if (isVertical){
			DrawVerticalMode(g,fm, height, width, timeString, count, actionText, icon, min, max, value, border, progressDoneColor, progressLeftColor);
		}
		else {
			if (isCompact) {
				DrawCompactMode(g,fm, height, width, timeString, count, actionText, icon, min, max, value, border, progressDoneColor, progressLeftColor);
			}
			else {
				DrawStandardMode(g,fm, height, width, timeString, count, actionText, icon, min, max, value, border, progressDoneColor, progressLeftColor);
			}
		}
		return new Dimension(width, height);
	}

	private void DrawStandardMode (Graphics2D g, FontMetrics fm, int height, int width, String timeString, String count, String actionText, Image icon, long min, long max, long value, Color border, Color progressDoneColor, Color progressLeftColor) {
		int heightWithIcon = INSET + ICON_SIZE + fm.getHeight();
		//Icon & time
		if (height <= heightWithIcon){
			Rendering.drawText(g, new Rectangle(INSET, (height / 2) - fm.getHeight() / 2, ICON_SIZE, fm.getHeight() + PAD), Color.ORANGE,
					Alignment.CENTER, timeString, false
			);
		}
		else{
			int iconWidth = icon.getWidth(null);
			int iconHeight = icon.getHeight(null);
			g.drawImage(icon, INSET + (ICON_SIZE / 2) - (iconWidth / 2), INSET + (ICON_SIZE / 2) - (iconHeight / 2),
					iconWidth, iconHeight, null
			);
			Rendering.drawText(g, new Rectangle(INSET, Math.max(INSET + ICON_SIZE + PAD, height / 2), ICON_SIZE, fm.getHeight()), Color.ORANGE,
					Alignment.CENTER, timeString, false
			);
		}


		Rectangle right = new Rectangle(INSET + ICON_SIZE + PAD, INSET, Math.max(PROGRESS_MIN_WIDTH, width - INSET - ICON_SIZE - PAD - INSET), height - INSET - INSET);
		//Action
		int stringActionWidth = g.getFontMetrics().stringWidth(actionText);
		if (right.width - INSET - INSET > stringActionWidth) {
			Rendering.drawText(g,
					new Rectangle(right.x, right.y, right.width, PAD + fm.getHeight()),
					Color.WHITE,
					Alignment.CENTER,
					actionText,
					false
			);
		}
		else{
			Rendering.drawText(g,
					new Rectangle(right.x, right.y, right.width, PAD + fm.getHeight()),
					Color.WHITE,
					Alignment.CENTER,
					count,
					false
			);
		}
		//Progress bar
		Rendering.drawProgressBar(g, new Rectangle(right.x, INSET + fm.getHeight() + INSET, right.width, height - (INSET + fm.getHeight() + INSET + INSET)),
				border, progressLeftColor, progressDoneColor, min, max, value, false
		);
	}
	private void DrawCompactMode (Graphics2D g, FontMetrics fm, int height, int width, String timeString, String count, String actionText, Image icon, long min, long max, long value, Color border, Color progressDoneColor, Color progressLeftColor){
		//Progress bar
		Rendering.drawProgressBar(g,
				new Rectangle(0, 0, width, height),
				border,
				progressLeftColor,
				progressDoneColor,
				min, max, value,
				false
		);
		//Time
		int stringTimeWidth = g.getFontMetrics().stringWidth(timeString);
		Rectangle rectTime = new Rectangle(width - PAD - stringTimeWidth, (height / 2) - fm.getHeight() / 2, stringTimeWidth, fm.getHeight());
		Rendering.drawText(g,
				rectTime,
				Color.ORANGE,
				Alignment.RIGHT,
				timeString,
				false
		);
		//Icon
		Rectangle rectIcon = new Rectangle(0, 0, height, height);
		g.drawImage(icon,
				0,
				0,
				height,
				height,
				null
		);
		//Action
		int stringActionWidth = g.getFontMetrics().stringWidth(actionText);
		int actionTextRemainingSpace = width - rectIcon.width - rectTime.width - INSET - INSET;
		if (actionTextRemainingSpace > stringActionWidth){
			Rectangle rectAction = new Rectangle((width / 2) - (stringActionWidth / 2), (height / 2) - fm.getHeight() / 2, stringActionWidth, fm.getHeight());
			Rendering.drawText(g,
					rectAction,
					Color.WHITE,
					Alignment.CENTER,
					actionText,
					false
			);
		}
		else{
			int stringCountWidth = g.getFontMetrics().stringWidth(count);
			Rectangle rectAction = new Rectangle((width / 2) - (stringCountWidth / 2), (height / 2) - fm.getHeight() / 2, stringCountWidth, fm.getHeight());
			Rendering.drawText(g,
					rectAction,
					Color.WHITE,
					Alignment.CENTER,
					count,
					false
			);
		}
	}

	private void DrawVerticalMode (Graphics2D g, FontMetrics fm, int height, int width, String timeString, String count, String actionText, Image icon, long min, long max, long value, Color border, Color progressDoneColor, Color progressLeftColor){
		int widthWithIcon = INSET + ICON_SIZE + INSET + INSET + PAD + INSET;

		Rectangle left = new Rectangle(INSET, INSET, fm.getHeight(), height - (INSET * 2));
		Rectangle right = new Rectangle((int)left.getMaxX() + left.x, left.y, Math.max(INSET,width - left.width - INSET - left.x - PAD), height - (INSET * 2));

		if(height < actionText.length() * 10 + ICON_SIZE + INSET + INSET + INSET){
			actionText = count;
		}

		if (width <= widthWithIcon){
			Rendering.drawText(g, new Rectangle(PAD, left.y, width, INSET + fm.getHeight() + PAD), Color.ORANGE,
					Alignment.CENTER, timeString, false
			);
			Rendering.drawText(g, new Rectangle(left.x, PAD + INSET + fm.getHeight() + INSET + PAD, left.width, Math.max(INSET,right.height - PAD - INSET - fm.getHeight() - PAD)), Color.WHITE,
					Alignment.CENTER, actionText, true
			);
		}
		else
		{
			left = new Rectangle(INSET, INSET + ICON_SIZE, ICON_SIZE, height - ICON_SIZE - (INSET * 2));
			right = new Rectangle(INSET + ICON_SIZE + PAD, INSET, Math.max(INSET,width - INSET - ICON_SIZE - PAD - INSET), height - (INSET * 2));
			int iconWidth = icon.getWidth(null);
			int iconHeight = icon.getHeight(null);
			g.drawImage(icon, INSET + (ICON_SIZE / 2) - (iconWidth / 2), INSET + (ICON_SIZE / 2) - (iconHeight / 2),
					iconWidth, iconHeight, null
			);
			Rendering.drawText(g, new Rectangle(right.x, right.y, right.width, INSET + fm.getHeight() + PAD), Color.ORANGE,
					Alignment.CENTER, timeString, false
			);
			Rendering.drawText(g, left, Color.WHITE,
					Alignment.CENTER, actionText, true
			);
		}

		Rendering.drawProgressBar(g, new Rectangle(right.x, PAD + INSET + fm.getHeight() + INSET + PAD, right.width, Math.max(INSET,right.height - PAD - INSET - fm.getHeight() - PAD)),
				border, progressLeftColor, progressDoneColor, min, max, value, true
		);
	}

}
package com.github.calebwhiting.runelite.plugins.actionprogress;

import com.github.calebwhiting.runelite.api.ui.IconSource;
import lombok.Getter;

import java.util.function.Function;

@Getter
public enum Action
{
	COLLECT_SAND("Collecting", ActionProgressConfig::collectSand, ActionIcon.SPRITE_BUCKET, 1, 2),
	COOKING("Cooking", ActionProgressConfig::cookingCooking, ActionIcon.SPRITE_COOKING, 2, 3, 4),
	COOKING_CUT_FRUIT("Cutting", ActionProgressConfig::cookingCutFruit, ActionIcon.SPRITE_COOKING, 2),
	COOKING_MIX_DOUGH("Combining", ActionProgressConfig::cookingMixPastry, ActionIcon.SPRITE_COOKING, 1, 2),
	COOKING_MIX_GRAPES("Combining", ActionProgressConfig::cookingMixWines, ActionIcon.SPRITE_COOKING, 3, 2),
	COOKING_TOP_PIZZA("Combining", ActionProgressConfig::cookingTopPizza, ActionIcon.SPRITE_COOKING, 2),
	CRAFT_BATTLESTAVES("Combining", ActionProgressConfig::craftBattlestaves, ActionIcon.SPRITE_CRAFTING, 3, 2),
	CRAFT_BLOW_GLASS("Glassblowing", ActionProgressConfig::craftGlassblowing, ActionIcon.SPRITE_CRAFTING, 3),
	CRAFT_CAST_GOLD_AND_SILVER("Casting", ActionProgressConfig::craftCastGoldAndSilver, ActionIcon.SPRITE_CRAFTING, 3),
	CRAFT_CUT_GEMS("Cutting", ActionProgressConfig::craftCutGems, ActionIcon.SPRITE_CRAFTING, 2),
	CRAFT_HARD_LEATHER("Leather-working", ActionProgressConfig::craftLeatherWorking, ActionIcon.SPRITE_CRAFTING, 2),
	CRAFT_LEATHER("Leather-working", ActionProgressConfig::craftLeatherWorking, ActionIcon.SPRITE_CRAFTING, 3),
	CRAFT_MOLTEN_GLASS("Creating", ActionProgressConfig::craftMakeMoltenGlass, ActionIcon.SPRITE_CRAFTING, 2),
	CRAFT_STRING_JEWELLERY("Stringing", ActionProgressConfig::craftStringJewellery, ActionIcon.SPRITE_CRAFTING, 2),
	CRAFT_LOOM("Weaving,", ActionProgressConfig::craftWeaving,ActionIcon.SPRITE_CRAFTING, 4, 3),
	CRAFT_LOOM_DRIFT_NET("Weaving,", ActionProgressConfig::craftWeaving,ActionIcon.SPRITE_CRAFTING, 3),
	CRAFT_SHIELD("Crafting", ActionProgressConfig::craftShields, ActionIcon.SPRITE_CRAFTING, 5),
	CRAFT_AMETHYST_HEADS_AND_TIPS("Crafting", ActionProgressConfig::craftHeadsAndTips,ActionIcon.SPRITE_CRAFTING,2),
	FLETCH_ATTACH("Attaching", ActionProgressConfig::fletchArrowsAndBolts, ActionIcon.SPRITE_FLETCHING, 2),
	FLETCH_ATTACH_3T("Attaching", ActionProgressConfig::fletchArrowsAndBolts, ActionIcon.SPRITE_FLETCHING, 3),
	FLETCH_CUT_ARROW_SHAFT("Cutting", ActionProgressConfig::fletchArrowsAndBolts, ActionIcon.SPRITE_FLETCHING, 3),
	FLETCH_CUT_JAVELIN_SHAFT("Cutting", ActionProgressConfig::fletchArrowsAndBolts, ActionIcon.SPRITE_FLETCHING, 3),
	FLETCH_CUT_HIKING_STAFF("Cutting", ActionProgressConfig::fletchHikingStaves, ActionIcon.SPRITE_FLETCHING, 3),
	FLETCH_CUT_BOW("Cutting", ActionProgressConfig::fletchBows, ActionIcon.SPRITE_FLETCHING, 3),
	FLETCH_CUT_TIPS("Cutting", ActionProgressConfig::fletchArrowsAndBolts, ActionIcon.SPRITE_FLETCHING, 5),
	FLETCH_ATTACH_TIPS("Attaching", ActionProgressConfig::fletchArrowsAndBolts, ActionIcon.SPRITE_FLETCHING, 2), 
	FLETCH_CUT_TIPS_AMETHYST("Cutting", ActionProgressConfig::fletchArrowsAndBolts, ActionIcon.SPRITE_FLETCHING, 2),
	FLETCH_STRING_BOW("Stringing", ActionProgressConfig::fletchBows, ActionIcon.SPRITE_FLETCHING, 2),
	FLETCH_SHIELD("Cutting", ActionProgressConfig::fletchShields, ActionIcon.SPRITE_FLETCHING, 7),	
	FLETCH_CUT_CROSSBOW("Cutting", ActionProgressConfig::fletchCrossbows, ActionIcon.SPRITE_FLETCHING, 2, 3),
	FLETCH_ATTACH_CROSSBOW("Attaching", ActionProgressConfig::fletchCrossbows, ActionIcon.SPRITE_FLETCHING, 2),
	FLETCH_STRING_CROSSBOW("Stringing", ActionProgressConfig::fletchCrossbows, ActionIcon.SPRITE_FLETCHING, 2),
	FLETCH_SPINNING("Spinning", ActionProgressConfig::fletchSpinning, ActionIcon.SPRITE_FLETCHING, 3),
	FLETCH_JAVELIN("Attaching", ActionProgressConfig::fletchJavelin, ActionIcon.SPRITE_FLETCHING, 2),
	FLETCH_DART("Attaching", ActionProgressConfig::fletchArrowsAndBolts, ActionIcon.SPRITE_FLETCHING, 2),
	GRIND("Grinding", ActionProgressConfig::grinding, ActionIcon.SPRITE_TOTAL, 0, 2, 3),
	GRIND_BONE_SHARDS("Grinding", ActionProgressConfig::grinding, ActionIcon.SPRITE_TOTAL, 1, 4),
	GRIND_DARK_ESSENCE("Grinding", ActionProgressConfig::grinding, ActionIcon.SPRITE_TOTAL, 1, 3, 4),
	SUNFIRE_WINE("Grinding", ActionProgressConfig::grinding, ActionIcon.SPRITE_TOTAL, 1, 4),
	HERB_CLEAN("Cleaning", ActionProgressConfig::herbCleaning, ActionIcon.SPRITE_HERBLORE, 0, 2),
	HERB_MIX_POTIONS("Mixing", ActionProgressConfig::herbPotions, ActionIcon.SPRITE_HERBLORE, 2),
	HERB_MIX_POTIONS_3T("Mixing", ActionProgressConfig::herbPotions, ActionIcon.SPRITE_HERBLORE, 0, 3),
	HERB_MIX_TAR("Mixing", ActionProgressConfig::herbTar, ActionIcon.SPRITE_HERBLORE, 2, 3),
	HERB_MIX_UNFINISHED("Mixing", ActionProgressConfig::herbPotions, ActionIcon.SPRITE_HERBLORE, 2, 1),
	MAGIC_CREATE_TABLET("Enchanting", ActionProgressConfig::magicTablets, ActionIcon.SPRITE_MAGIC, 2, 4),
	MAGIC_ENCHANT_BOLTS("Enchanting", ActionProgressConfig::magicEnchantBolts, ActionIcon.SPRITE_MAGIC, 1, 3),
	MAGIC_ENCHANT_JEWELLERY("Enchanting", ActionProgressConfig::magicEnchantJewellery, ActionIcon.SPRITE_MAGIC, 0, 7),
	MAGIC_CHARGE_ORB("Charging", ActionProgressConfig::magicChargeOrbs, ActionIcon.SPRITE_MAGIC, 3, 6),
	MAGIC_STRING_JEWELLERY("Stringing jewellery", ActionProgressConfig::magicStringJewellery, ActionIcon.SPRITE_MAGIC, 3),
	MAGIC_PLANK_MAKE("Making plank", ActionProgressConfig::magicPlankMake, ActionIcon.SPRITE_MAGIC, 3, 6),
	MAKING_FORESTERS_RATION("Making rations", ActionProgressConfig::forestersRation, ActionIcon.SPRITE_WOODCUTTING, 3),
	SMELTING("Smelting", ActionProgressConfig::smithSmelting, ActionIcon.SPRITE_SMITHING, 5),
	SMELTING_CANNONBALLS("Casting", ActionProgressConfig::smithCannonballs, ActionIcon.SPRITE_SMITHING, 7, 10),
	SMITHING("Forging", ActionProgressConfig::smithSmithing, ActionIcon.SPRITE_SMITHING, 5),
	SMITHING_WITH_SMITH_OUTFIT("Forging", ActionProgressConfig::smithSmithing, ActionIcon.SPRITE_SMITHING, 5),
	TEMPOROSS_COOKING("Cooking", ActionProgressConfig::temporossCooking, ActionIcon.SPRITE_COOKING, 4, 3),
	TEMPOROSS_FILL_CRATE("Filling", ActionProgressConfig::temporossFiring, ActionIcon.SPRITE_FISHING, 2),
	TEMPOROSS_REWARD_POOL("Fishing", ActionProgressConfig::temporossRewardPool, ActionIcon.SPRITE_FISHING, 1, 3),
	WINTERTODT_WOODCUTTING("Chopping", ActionProgressConfig::wintertodtWoodcutting, ActionIcon.SPRITE_WOODCUTTING, 2, 3),
	WINTERTODT_FIREMAKING("Lighting", ActionProgressConfig::wintertodtLighting, ActionIcon.SPRITE_FIREMAKING, 4, 3),
	WINTERTODT_FLETCHING("Cutting", ActionProgressConfig::wintertodtFletching, ActionIcon.SPRITE_FLETCHING, 4, 4),
	FARM_ULTRA_COMPOST("Mixing",ActionProgressConfig::farmUltraCompost, ActionIcon.SPRITE_FARMING,2),
	FIREMAKING_CAMPFIRE("Tending",ActionProgressConfig::campfire, ActionIcon.SPRITE_FIREMAKING,5,9),
	GUARDIAN_OF_THE_RIFT_CRAFTING("Crafting", ActionProgressConfig::guardianOfTheRiftCrafting, ActionIcon.SPRITE_CRAFTING, 1),
	//Timing might be off. Not on the wiki. Will need to confirm when having more rewards points
	GUARDIAN_OF_THE_RIFT_REWARD_POOL("Searching", ActionProgressConfig::guardianOfTheRiftRewardPool, ActionIcon.SPRITE_GUARDIAN_OF_THE_RIFT_REWARD, 3),
	CHURNING_CREAM("Churning", ActionProgressConfig::cookingChurning, ActionIcon.SPRITE_COOKING,10),
	CHURNING_BUTTER_WITH_MILK("Churning", ActionProgressConfig::cookingChurning, ActionIcon.SPRITE_COOKING,19),
	CHURNING_BUTTER_WITH_CREAM("Churning", ActionProgressConfig::cookingChurning, ActionIcon.SPRITE_COOKING,10),
	CHURNING_CHEESE_WITH_MILK("Churning", ActionProgressConfig::cookingChurning, ActionIcon.SPRITE_COOKING,26),
	CHURNING_CHEESE_WITH_CREAM("Churning", ActionProgressConfig::cookingChurning, ActionIcon.SPRITE_COOKING,19),
	CHURNING_CHEESE_WITH_BUTTER("Churning", ActionProgressConfig::cookingChurning, ActionIcon.SPRITE_COOKING,10),
	CHURNING_CHEESE_WITH_GARLIC("Churning", ActionProgressConfig::cookingChurning, ActionIcon.SPRITE_COOKING,10),
	WETTING_CLAY("Wetting", ActionProgressConfig::craftWettingClay, ActionIcon.SPRITE_CRAFTING,2);
	//FILLING("Filling", ActionProgressConfig::filling, ActionIcon.SPRITE_TOTAL, 1);

	private final String description;

	private final IconSource iconSource;

	private final int[] tickTimes;

	private final Function<ActionProgressConfig, Boolean> enabledFunction;

	Action(
			String description,
			Function<ActionProgressConfig, Boolean> enabledFunction,
			IconSource iconSource,
			int tickTime0,
			int... otherTickTimes)
	{
		this.description = description;
		this.enabledFunction = enabledFunction;
		this.iconSource = iconSource;
		// I did it this way so that we never accidentally create an action with zero tick times,
		// while preserving the convenience of var-args
		int[] tickTimes = new int[otherTickTimes.length + 1];
		tickTimes[0] = tickTime0;
		System.arraycopy(otherTickTimes, 0, tickTimes, 1, otherTickTimes.length);
		this.tickTimes = tickTimes;
	}
}
package com.github.calebwhiting.runelite.plugins.actionprogress.detect;

import com.github.calebwhiting.runelite.data.Magic;
import com.github.calebwhiting.runelite.plugins.actionprogress.Action;
import com.github.calebwhiting.runelite.plugins.actionprogress.ActionProgressConfig;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import net.runelite.api.Client;
import net.runelite.api.gameval.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.gameval.ItemID;
import net.runelite.api.MenuAction;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.widgets.Widget;
import net.runelite.client.eventbus.Subscribe;

@Singleton
public class PlankMakeSpellDetector extends ActionDetector
{

	@Inject private ActionProgressConfig config;

	@Inject private Client client;

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked evt)
	{
		if (!this.config.magicPlankMake()) {
			return;
		}
		if (evt.getMenuAction() != MenuAction.WIDGET_TARGET_ON_WIDGET) {
			return;
		}
		ItemContainer inventory = this.client.getItemContainer(InventoryID.INV);
		if (inventory == null) {
			return;
		}

		// There is not a space in the middle of Plank Make, it is a '\u00A0' afaik
		// We are matching "Plank[standard ASCII plus the whitespace codepoints]Make"
		if(!evt.getMenuTarget().matches(".*Plank\\p{Z}Make.*")){
			return;
		}
		for (Magic.PlankMakeSpell plankMakeSpell : Magic.PlankMakeSpell.values()) {
			Magic.Spell spell = plankMakeSpell.getSpell();
			Widget widget = this.client.getWidget(spell.getWidgetId());
			if (widget == null || widget.getBorderType() != 2) {
				continue;
			}
			int itemId = evt.getItemId();
			if (plankMakeSpell.getPlank() != itemId || !inventory.contains(ItemID.COINS)) {
				continue;
			}

			int coinsQuantity = 0;
			for (Item item : inventory.getItems()) {
				if(item.getId() == ItemID.COINS){
					coinsQuantity = item.getQuantity();
				}
			}

			int amount = Math.min(inventory.count(itemId), Math.min(spell.getAvailableCasts(this.client), coinsQuantity / plankMakeSpell.getCost()));
			this.actionManager.setAction(Action.MAGIC_PLANK_MAKE, amount, itemId);
			break;
		}
	}

}

package com.github.calebwhiting.runelite.plugins.actionprogress.detect;

import com.github.calebwhiting.runelite.api.InventoryManager;
import com.github.calebwhiting.runelite.data.Ingredient;
import com.github.calebwhiting.runelite.data.Magic;
import com.github.calebwhiting.runelite.plugins.actionprogress.Product;
import com.google.inject.Inject;
import net.runelite.api.*;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.widgets.Widget;
import net.runelite.client.eventbus.Subscribe;

import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.IntStream;
import static com.github.calebwhiting.runelite.plugins.actionprogress.Action.*;
import static net.runelite.api.ItemID.*;

public class UseItemOnItemDetector extends ActionDetector
{

	private static final Ingredient PESTLE_AND_MORTAR = new Ingredient(ItemID.PESTLE_AND_MORTAR, 1, false);
	private static final Ingredient CHISEL = new Ingredient(ItemID.CHISEL, 1, false);
	private static final String BREAK_DOWN = "Break-down";

	private static final Product[] PRODUCTS = {
			new Product(GRIND, 				GROUND_ASHES, 					new Ingredient[]{ new Ingredient(ASHES)}, 														PESTLE_AND_MORTAR),
			new Product(GRIND, 				CRUSHED_NEST, 					new Ingredient[]{ new Ingredient(BIRD_NEST_5075)}, 												PESTLE_AND_MORTAR),
			new Product(GRIND, 				DRAGON_SCALE_DUST, 				new Ingredient[]{ new Ingredient(BLUE_DRAGON_SCALE)}, 											PESTLE_AND_MORTAR),
			new Product(GRIND, 				GROUND_CHARCOAL, 				new Ingredient[]{ new Ingredient(CHARCOAL)}, 													PESTLE_AND_MORTAR),
			new Product(GRIND, 				CHOCOLATE_DUST, 				new Ingredient[]{ new Ingredient(CHOCOLATE_BAR)}, 												PESTLE_AND_MORTAR),
			new Product(GRIND, 				GROUND_CRAB_MEAT, 				new Ingredient[]{ new Ingredient(CRAB_MEAT)}, 													PESTLE_AND_MORTAR),
			new Product(GRIND, 				GOAT_HORN_DUST, 				new Ingredient[]{ new Ingredient(DESERT_GOAT_HORN)}, 											PESTLE_AND_MORTAR),
			new Product(GRIND, 				GROUND_THISTLE, 				new Ingredient[]{ new Ingredient(DRIED_THISTLE)}, 												PESTLE_AND_MORTAR),
			new Product(GRIND, 				GORAK_CLAW_POWDER, 				new Ingredient[]{ new Ingredient(GORAK_CLAWS)}, 												PESTLE_AND_MORTAR),
			new Product(GRIND, 				GROUND_GUAM, 					new Ingredient[]{ new Ingredient(GUAM_LEAF)}, 													PESTLE_AND_MORTAR),
			new Product(GRIND, 				KEBBIT_TEETH_DUST, 				new Ingredient[]{ new Ingredient(KEBBIT_TEETH)}, 												PESTLE_AND_MORTAR),
			new Product(GRIND, 				GROUND_KELP, 					new Ingredient[]{ new Ingredient(KELP)}, 														PESTLE_AND_MORTAR),
			new Product(GRIND, 				LAVA_SCALE_SHARD, 				new Ingredient[]{ new Ingredient(LAVA_SCALE)}, 													PESTLE_AND_MORTAR),
			new Product(GRIND, 				GROUND_MUD_RUNES,				new Ingredient[]{ new Ingredient(MUD_RUNE)}, 													PESTLE_AND_MORTAR),
			new Product(GRIND, 				MYSTERIOUS_CRUSHED_MEAT, 		new Ingredient[]{ new Ingredient(MYSTERIOUS_MEAT)}, 											PESTLE_AND_MORTAR),
			new Product(GRIND, 				NIHIL_DUST, 					new Ingredient[]{ new Ingredient(NIHIL_SHARD)}, 												PESTLE_AND_MORTAR),
			new Product(GRIND, 				KARAMBWAN_PASTE, 				new Ingredient[]{ new Ingredient(POISON_KARAMBWAN)}, 											PESTLE_AND_MORTAR),
			new Product(GRIND, 				GROUND_COD, 					new Ingredient[]{ new Ingredient(RAW_COD)}, 													PESTLE_AND_MORTAR),
			new Product(GRIND, 				RUNE_DUST, 						new Ingredient[]{ new Ingredient(RUNE_SHARDS)}, 												PESTLE_AND_MORTAR),
			new Product(GRIND, 				GROUND_SEAWEED, 				new Ingredient[]{ new Ingredient(SEAWEED)}, 													PESTLE_AND_MORTAR),
			new Product(GRIND, 				GROUND_TOOTH, 					new Ingredient[]{ new Ingredient(SUQAH_TOOTH)}, 												PESTLE_AND_MORTAR),
			new Product(GRIND, 				UNICORN_HORN_DUST, 				new Ingredient[]{ new Ingredient(UNICORN_HORN)}, 												PESTLE_AND_MORTAR),
			new Product(GRIND, 				CRUSHED_SUPERIOR_DRAGON_BONES, 	new Ingredient[]{ new Ingredient(SUPERIOR_DRAGON_BONES)}, 										PESTLE_AND_MORTAR),
			new Product(GRIND_BONE_SHARDS, 	BLESSED_BONE_SHARDS, 			new Ingredient[]{ new Ingredient(BLESSED_BONES)}, 												CHISEL),
			new Product(GRIND_BONE_SHARDS, 	BLESSED_BONE_SHARDS, 			new Ingredient[]{ new Ingredient(BLESSED_BAT_BONES)}, 											CHISEL),
			new Product(GRIND_BONE_SHARDS, 	BLESSED_BONE_SHARDS, 			new Ingredient[]{ new Ingredient(BLESSED_BIG_BONES)}, 											CHISEL),
			new Product(GRIND_BONE_SHARDS, 	BLESSED_BONE_SHARDS, 			new Ingredient[]{ new Ingredient(BLESSED_ZOGRE_BONES)}, 										CHISEL),
			new Product(GRIND_BONE_SHARDS, 	BLESSED_BONE_SHARDS, 			new Ingredient[]{ new Ingredient(BLESSED_BABYWYRM_BONES)}, 										CHISEL),
			new Product(GRIND_BONE_SHARDS, 	BLESSED_BONE_SHARDS, 			new Ingredient[]{ new Ingredient(BLESSED_BABYDRAGON_BONES)}, 									CHISEL),
			new Product(GRIND_BONE_SHARDS, 	BLESSED_BONE_SHARDS, 			new Ingredient[]{ new Ingredient(BLESSED_WYRM_BONES)}, 											CHISEL),
			new Product(GRIND_BONE_SHARDS, 	BLESSED_BONE_SHARDS, 			new Ingredient[]{ new Ingredient(SUNKISSED_BONES)}, 											CHISEL),
			new Product(GRIND_BONE_SHARDS, 	BLESSED_BONE_SHARDS, 			new Ingredient[]{ new Ingredient(BLESSED_WYVERN_BONES)}, 										CHISEL),
			new Product(GRIND_BONE_SHARDS, 	BLESSED_BONE_SHARDS, 			new Ingredient[]{ new Ingredient(BLESSED_DRAGON_BONES)}, 										CHISEL),
			new Product(GRIND_BONE_SHARDS, 	BLESSED_BONE_SHARDS, 			new Ingredient[]{ new Ingredient(BLESSED_DRAKE_BONES)}, 										CHISEL),
			new Product(GRIND_BONE_SHARDS, 	BLESSED_BONE_SHARDS, 			new Ingredient[]{ new Ingredient(BLESSED_FAYRG_BONES)}, 										CHISEL),
			new Product(GRIND_BONE_SHARDS, 	BLESSED_BONE_SHARDS, 			new Ingredient[]{ new Ingredient(BLESSED_LAVA_DRAGON_BONES)}, 									CHISEL),
			new Product(GRIND_BONE_SHARDS, 	BLESSED_BONE_SHARDS, 			new Ingredient[]{ new Ingredient(BLESSED_RAURG_BONES)}, 										CHISEL),
			new Product(GRIND_BONE_SHARDS, 	BLESSED_BONE_SHARDS, 			new Ingredient[]{ new Ingredient(BLESSED_HYDRA_BONES)}, 										CHISEL),
			new Product(GRIND_BONE_SHARDS, 	BLESSED_BONE_SHARDS, 			new Ingredient[]{ new Ingredient(DAGANNOTH_BONES_29376)}, 										CHISEL),
			new Product(GRIND_BONE_SHARDS, 	BLESSED_BONE_SHARDS, 			new Ingredient[]{ new Ingredient(BLESSED_OURG_BONES)}, 											CHISEL),
			new Product(GRIND_BONE_SHARDS, 	BLESSED_BONE_SHARDS, 			new Ingredient[]{ new Ingredient(BLESSED_SUPERIOR_DRAGON_BONES)}, 								CHISEL),
			new Product(GRIND_BONE_SHARDS, 	BLESSED_BONE_SHARDS, 			new Ingredient[]{ new Ingredient(BLESSED_BONE_STATUETTE)}, 										CHISEL),
			new Product(GRIND_BONE_SHARDS, 	BLESSED_BONE_SHARDS, 			new Ingredient[]{ new Ingredient(BLESSED_BONE_STATUETTE_29340)}, 								CHISEL), //Might not be required. Not sure what the difference is
			new Product(GRIND_BONE_SHARDS, 	BLESSED_BONE_SHARDS, 			new Ingredient[]{ new Ingredient(BLESSED_BONE_STATUETTE_29342)}, 								CHISEL), //Might not be required. Not sure what the difference is
			new Product(GRIND_DARK_ESSENCE, DARK_ESSENCE_FRAGMENTS, 		new Ingredient[]{ new Ingredient(DARK_ESSENCE_BLOCK)},				 							CHISEL),
			new Product(SUNFIRE_WINE, 		JUG_OF_SUNFIRE_WINE,			new Ingredient[]{ new Ingredient(JUG_OF_WINE), new Ingredient(SUNFIRE_SPLINTERS, 2)}, 	PESTLE_AND_MORTAR)
	};

	@Inject private InventoryManager inventoryManager;

	@Inject private Client client;

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked evt)
	{
		if(evt.getMenuOption().equals(BREAK_DOWN)){
			for (Product product : PRODUCTS) {
				if(product.IngredientsIsIncludedIn(evt.getMenuTarget(), client)){
					int amount = product.getMakeProductCount(this.inventoryManager);
					if (amount > 0) {
						this.actionManager.setAction(product.getAction(), amount, product.getProductId());
					}
				}
			}
		}
		if (evt.getMenuAction() != MenuAction.WIDGET_TARGET_ON_WIDGET) {
			return;
		}
		ItemContainer inventory = this.client.getItemContainer(InventoryID.INVENTORY);
		Widget widget = this.client.getSelectedWidget();
		if (inventory == null|| widget == null) {
			return;
		}

		//Given evt.getMenuTarget() is in the following format <col=ff9040>Bird nest</col><col=ffffff> -> <col=ff9040>Bird nest</col>
		//The code below will check if the source and the target are the same, and return if it is the case
		Pattern r = Pattern.compile("<.*>(.*)</.*><.*>(.*)</.*>");
		Matcher m = r.matcher(evt.getMenuTarget());
		if (m.find() && Objects.equals(m.group(1), m.group(2))){
			return;
		}

		Item[] items = IntStream.of(widget.getId(), evt.getParam0())
								.mapToObj(inventory::getItem)
								.filter(n -> n!= null)
								.toArray(Item[]::new);

		for (Product product : PRODUCTS) {
			if (product.isMadeWith(items)) {
				int amount = product.getMakeProductCount(this.inventoryManager);
				if (amount > 0) {
					this.actionManager.setAction(product.getAction(), amount, product.getProductId());
				}
			}
		}
	}
}

package com.github.calebwhiting.runelite.plugins.actionprogress.detect;

import com.github.calebwhiting.runelite.data.Magic;
import com.github.calebwhiting.runelite.plugins.actionprogress.Action;
import com.github.calebwhiting.runelite.plugins.actionprogress.ActionProgressConfig;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import net.runelite.api.Client;
import net.runelite.api.ItemContainer;
import net.runelite.api.MenuAction;
import net.runelite.api.gameval.*;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.widgets.Widget;
import net.runelite.client.eventbus.Subscribe;

@Singleton
public class StringJewellerySpellDetector extends ActionDetector
{
	@Inject private ActionProgressConfig config;

	@Inject private Client client;

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked evt)
	{
		if (!this.config.magicStringJewellery()) {
			return;
		}
		if (evt.getMenuAction() != MenuAction.CC_OP) {
			return;
		}
		ItemContainer inventory = this.client.getItemContainer(InventoryID.INV);
		if (inventory == null) {
			return;
		}
		// There is not a space in the middle of String Jewellery, it is a '\u00A0' afaik
		// We are matching "String[standard ASCII plus the whitespace codepoints]Jewellery"
		if(!evt.getMenuTarget().matches(".*String\\p{Z}Jewellery.*")){
			return;
		}

		for (Magic.StringJewellerySpell stringJewellerySpell : Magic.StringJewellerySpell.values()) {
			Magic.Spell spell = stringJewellerySpell.getSpell();
			Widget widget = this.client.getWidget(spell.getWidgetId());
			if (widget != null && widget.getBorderType() == 0) {
				int itemId = stringJewellerySpell.getJewelleryItemId();
				if (inventory.count(itemId) <= 0) {
					continue;
				}

				int amount = Math.min(inventory.count(itemId), spell.getAvailableCasts(this.client));
				this.actionManager.setAction(Action.MAGIC_STRING_JEWELLERY, amount, itemId);
				break;
			}
		}
	}
}

package com.github.calebwhiting.runelite.plugins.actionprogress.detect;

import com.github.calebwhiting.runelite.api.InventoryManager;
import com.github.calebwhiting.runelite.data.Herblore;
import com.github.calebwhiting.runelite.plugins.actionprogress.Action;
import com.github.calebwhiting.runelite.plugins.actionprogress.ActionManager;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import net.runelite.api.*;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.client.eventbus.Subscribe;

@Singleton
public class ItemClickDetector extends ActionDetector
{

	@Inject private Client client;

	@Inject private InventoryManager inventoryManager;

	@Inject private ActionManager actionManager;

	@Override
	public void setup()
	{
		super.setup();
		this.registerAction(Action.HERB_CLEAN, Herblore.GRIMY_HERBS);
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked evt)
	{
		if (evt.getMenuAction() != MenuAction.CC_OP || !evt.getMenuOption().toLowerCase().equals("clean")) {
			return;
		}
		int itemID = evt.getItemId();
		ItemContainer inventory = this.client.getItemContainer(InventoryID.INVENTORY);
		if (inventory == null || !inventory.contains(itemID)) {
			return;
		}
		Action action = this.itemActions.get(itemID);
		if (action == null) {
			return;
		}
		int amount = this.inventoryManager.getItemCountById(itemID);
		this.actionManager.setAction(action, amount, itemID);
	}

}

package com.github.calebwhiting.runelite.plugins.actionprogress.detect;

import com.github.calebwhiting.runelite.data.Magic;
import com.github.calebwhiting.runelite.plugins.actionprogress.Action;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import net.runelite.api.Client;
import net.runelite.api.MenuAction;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.widgets.Widget;
import net.runelite.client.eventbus.Subscribe;
@Singleton
public class LecternDetector extends ActionDetector
{

	private static final int VAR_MAKE_AMOUNT = 2224;

	private static final int WIDGET_LECTERN = 26411019;

	@Inject private Client client;

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked evt)
	{
		if (evt.getParam1() == -1 || evt.getMenuAction() != MenuAction.CC_OP) {
			return;
		}
		Widget widget = this.client.getWidget(evt.getParam1());
		if (widget == null || widget.getParentId() != WIDGET_LECTERN) {
			return;
		}
		int amount = this.client.getVarpValue(VAR_MAKE_AMOUNT);
		for (Magic.LecternSpell item : Magic.LecternSpell.values()) {
			if (evt.getMenuOption().toLowerCase().contains(item.getItemText().toLowerCase())) {
				this.actionManager.setAction(Action.MAGIC_CREATE_TABLET, amount, item.getProduct());
				break;
			}
		}
	}

}

package com.github.calebwhiting.runelite.plugins.actionprogress.detect;

import com.github.calebwhiting.runelite.api.InventoryManager;
import com.github.calebwhiting.runelite.api.event.LocalAnimationChanged;
import com.github.calebwhiting.runelite.plugins.actionprogress.Action;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.eventbus.Subscribe;

import java.util.Arrays;

@Slf4j
@Singleton
public class TemporossDetector extends ActionDetector
{

	private static final int TEMPOROSS_REGION = 12078;

	private static final int[] TEMPOROSS_AMMUNITION_CRATE = {
			NpcID.AMMUNITION_CRATE, NpcID.AMMUNITION_CRATE_10577, NpcID.AMMUNITION_CRATE_10578,
			NpcID.AMMUNITION_CRATE_10579
	};

	private static final int[] TEMPOROSS_AMMUNITION = {
			ItemID.RAW_HARPOONFISH, ItemID.HARPOONFISH, ItemID.CRYSTALLISED_HARPOONFISH
	};

	static {
		Arrays.sort(TEMPOROSS_AMMUNITION_CRATE);
		Arrays.sort(TEMPOROSS_AMMUNITION);
	}

	@Inject private Client client;

	@Inject private InventoryManager inventoryManager;

	@Subscribe
	public void onLocalAnimationChanged(LocalAnimationChanged evt)
	{
		Action action = this.actionManager.getCurrentAction();
		Player me = evt.getLocalPlayer();
		int region = WorldPoint.fromLocalInstance(this.client, me.getLocalLocation()).getRegionID();
		if (action == Action.TEMPOROSS_FILL_CRATE || action == Action.TEMPOROSS_COOKING) {
			log.debug("action is already {}", action);
			return;
		}
		Actor interacting = me.getInteracting();
		int id = interacting instanceof NPC ? ((NPC) interacting).getId() : -1;
		if (id != -1 && Arrays.binarySearch(TEMPOROSS_AMMUNITION_CRATE, id) >= 0) {
			log.debug("filling crate");
			int amount = this.inventoryManager.getItemCountById(TEMPOROSS_AMMUNITION);
			this.actionManager.setAction(Action.TEMPOROSS_FILL_CRATE, amount, -1);
		} else if(this.inventoryManager.getItemCountById(ItemID.RAW_HARPOONFISH) > 0){
			log.debug("cooking fish");
			int amount = this.inventoryManager.getItemCountById(ItemID.RAW_HARPOONFISH);
			this.actionManager.setAction(Action.TEMPOROSS_COOKING, amount, ItemID.HARPOONFISH);
		}
	}

}

package com.github.calebwhiting.runelite.plugins.actionprogress.detect;

import com.github.calebwhiting.runelite.api.InterruptManager;
import com.github.calebwhiting.runelite.api.InventoryManager;
import com.github.calebwhiting.runelite.plugins.actionprogress.Action;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import net.runelite.api.*;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.widgets.Widget;
import net.runelite.client.eventbus.Subscribe;

import java.util.Arrays;
import java.util.Objects;
import java.util.stream.Stream;

/**
 * Not ready for release
 */
@Singleton
public class WintertodtDetector extends ActionDetector
{

	public static final int[] WOODCUTTING_ANIMATIONS = {
			AnimationID.WOODCUTTING_DRAGON_OR, AnimationID.WOODCUTTING_RUNE, AnimationID.WOODCUTTING_ADAMANT,
			AnimationID.WOODCUTTING_MITHRIL, AnimationID.WOODCUTTING_BLACK, AnimationID.WOODCUTTING_STEEL,
			AnimationID.WOODCUTTING_IRON, AnimationID.WOODCUTTING_BRONZE, AnimationID.WOODCUTTING_INFERNAL,
			AnimationID.WOODCUTTING_DRAGON, AnimationID.WOODCUTTING_3A_AXE, AnimationID.WOODCUTTING_GILDED,
			AnimationID.WOODCUTTING_CRYSTAL, AnimationID.WOODCUTTING_TRAILBLAZER
	};

	private static final int WINTERTODT_PRISON_REGION_ID = 6462;

	private static final String[] INTERRUPT_MESSAGES = {
			"The cold of the Wintertodt seeps into your bones.", "The freezing cold attack",
			"The brazier is broken and shrapnel damages you.", "The brazier has gone out."
	};

	private static final int[] BRUMA_KINDLING_MATERIALS = {
			ItemID.KNIFE, ItemID.BRUMA_ROOT
	};

	static {
		Arrays.sort(BRUMA_KINDLING_MATERIALS);
	}

	@Inject private Client client;

	@Inject private InventoryManager inventoryManager;

	@Inject private InterruptManager interruptManager;

	private boolean isInWintertodtPrison()
	{
		Player me = this.client.getLocalPlayer();
		if (me == null) {
			return false;
		}
		WorldPoint worldPoint = me.getWorldLocation();
		int region = worldPoint.getRegionID();
		return region == WINTERTODT_PRISON_REGION_ID;
	}

	@Subscribe
	public void onChatMessage(ChatMessage evt)
	{
		ChatMessageType chatMessageType = evt.getType();
		if (chatMessageType != ChatMessageType.GAMEMESSAGE && chatMessageType != ChatMessageType.SPAM) {
			return;
		}
		Action action = this.actionManager.getCurrentAction();
		if (action != Action.WINTERTODT_FIREMAKING && action != Action.WINTERTODT_FLETCHING) {
			return;
		}
		String message = evt.getMessage();
		Stream.of(INTERRUPT_MESSAGES)
			  .filter(message::startsWith)
			  .findFirst()
			  .ifPresent(x -> this.interruptManager.interrupt(evt));
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked evt)
	{
		if (evt.getMenuAction() != MenuAction.WIDGET_TARGET_ON_WIDGET) {
			return;
		}
		ItemContainer inventory = this.client.getItemContainer(InventoryID.INVENTORY);
		Widget widget = this.client.getSelectedWidget();
		if (inventory == null || widget == null) {
			return;
		}
		int[] items = {
				Objects.requireNonNull(inventory.getItem(widget.getId())).getId(),
				Objects.requireNonNull(inventory.getItem(evt.getParam0())).getId()
		};
		Arrays.sort(items);
		if (Arrays.equals(items, BRUMA_KINDLING_MATERIALS)) {
			this.actionManager.setAction(Action.WINTERTODT_FLETCHING,
					this.inventoryManager.getItemCountById(ItemID.BRUMA_ROOT),
					ItemID.BRUMA_KINDLING
			);
		}
	}

	@Subscribe
	public void onGameTick(GameTick evt)
	{
		Player local = this.client.getLocalPlayer();
		if (local == null || !this.isInWintertodtPrison()) {
			return;
		}
		Action action = this.actionManager.getCurrentAction();
		if (Arrays.binarySearch(WOODCUTTING_ANIMATIONS, local.getAnimation()) >= 0) {
			int rem = this.inventoryManager.getFreeSpaces();
			if (action != Action.WINTERTODT_WOODCUTTING) {
				this.actionManager.setAction(Action.WINTERTODT_WOODCUTTING, rem, ItemID.BRUMA_ROOT);
			}
		} else if (local.getAnimation() == AnimationID.LOOKING_INTO) {
			if (action != Action.WINTERTODT_FIREMAKING) {
				int rem = this.inventoryManager.getItemCountById(ItemID.BRUMA_ROOT, ItemID.BRUMA_KINDLING);
				this.actionManager.setAction(Action.WINTERTODT_FIREMAKING, rem, ItemID.BRUMA_ROOT);
			}
		}
	}

}

package com.github.calebwhiting.runelite.plugins.actionprogress.detect;

import com.github.calebwhiting.runelite.api.InventoryManager;
import com.github.calebwhiting.runelite.data.*;
import com.github.calebwhiting.runelite.plugins.actionprogress.Action;
import com.github.calebwhiting.runelite.plugins.actionprogress.ActionUtils;
import com.github.calebwhiting.runelite.plugins.actionprogress.Product;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.ScriptEvent;
import net.runelite.api.events.ScriptPostFired;
import net.runelite.api.events.ScriptPreFired;
import net.runelite.api.events.VarbitChanged;
import net.runelite.api.widgets.Widget;
import net.runelite.client.eventbus.Subscribe;

import java.util.Arrays;
import java.util.Objects;

import static com.github.calebwhiting.runelite.plugins.actionprogress.Action.*;
import static net.runelite.api.ItemID.*;

/**
 * Detects actions initiated from the chatbox crafting interface (Eg: Fletching, Glassblowing, Leather-work)
 */
@Slf4j
@Singleton
public class ChatboxDetector extends ActionDetector
{

	/**
	 * Indicates how many items are to be created in the crafting dialogue.
	 */
	private static final int VAR_MAKE_AMOUNT = 200;

	/**
	 * Indicates the selected product in the crafting dialogue.
	 */
	private static final int VAR_SELECTED_INDEX = 2673;

	private static final int WIDGET_MAKE_PARENT = 270;

	private static final int WIDGET_MAKE_QUESTION = 5;
	private static final int WIDGET_MAKE_SLOT_START = 14;
	private static final int WIDGET_MAKE_SLOT_COUNT = 9;
	private static final int WIDGET_MAKE_SLOT_ITEM = 38;

	private static final int WIDGET_ID_CHATBOX_FIRST_MAKE_BUTTON = 17694734;

	private static final int MAKE_X_SETUP = 2046;
	private static final int MAKE_X_BUTTON_CLICK = 2050;
	private static final int MAKE_X_BUTTON_KEY = 2051;
	private static final int MAKE_X_BUTTON_TRIGGERED = 2052;

	private static final Product[] MULTI_MATERIAL_PRODUCTS = {
			// @formatter:off
            new Product(CRAFT_LEATHER, GREEN_DHIDE_BODY, new Ingredient(GREEN_DRAGON_LEATHER, 3)),
            new Product(CRAFT_LEATHER, GREEN_DHIDE_CHAPS, new Ingredient(GREEN_DRAGON_LEATHER, 2)),
            new Product(CRAFT_LEATHER, BLUE_DHIDE_BODY, new Ingredient(BLUE_DRAGON_LEATHER, 3)),
            new Product(CRAFT_LEATHER, BLUE_DHIDE_CHAPS, new Ingredient(BLUE_DRAGON_LEATHER, 2)),
            new Product(CRAFT_LEATHER, RED_DHIDE_BODY, new Ingredient(RED_DRAGON_LEATHER, 3)),
            new Product(CRAFT_LEATHER, RED_DHIDE_CHAPS, new Ingredient(RED_DRAGON_LEATHER, 2)),
            new Product(CRAFT_LEATHER, BLACK_DHIDE_BODY, new Ingredient(BLACK_DRAGON_LEATHER, 3)),
            new Product(CRAFT_LEATHER, BLACK_DHIDE_CHAPS, new Ingredient(BLACK_DRAGON_LEATHER, 2)),
            new Product(CRAFT_LEATHER, SNAKESKIN_BANDANA, new Ingredient(SNAKESKIN, 5)),
            new Product(CRAFT_LEATHER, SNAKESKIN_BODY, new Ingredient(SNAKESKIN, 15)),
            new Product(CRAFT_LEATHER, SNAKESKIN_BOOTS, new Ingredient(SNAKESKIN, 6)),
            new Product(CRAFT_LEATHER, SNAKESKIN_CHAPS, new Ingredient(SNAKESKIN, 12)),
            new Product(CRAFT_LEATHER, SNAKESKIN_VAMBRACES, new Ingredient(SNAKESKIN, 8)),
            new Product(CRAFT_LEATHER, XERICIAN_HAT, new Ingredient(XERICIAN_FABRIC, 3)),
            new Product(CRAFT_LEATHER, XERICIAN_TOP, new Ingredient(XERICIAN_FABRIC, 5)),
            new Product(CRAFT_LEATHER, XERICIAN_ROBE, new Ingredient(XERICIAN_FABRIC, 4)),
            new Product(CRAFT_LEATHER, XERICIAN_ROBE, new Ingredient(XERICIAN_FABRIC, 4)),
            new Product(CRAFT_LEATHER, LEATHER_GLOVES, new Ingredient(LEATHER)),
            new Product(CRAFT_LEATHER, LEATHER_BOOTS, new Ingredient(LEATHER)),
            new Product(CRAFT_LEATHER, LEATHER_COWL, new Ingredient(LEATHER)),
            new Product(CRAFT_LEATHER, LEATHER_VAMBRACES, new Ingredient(LEATHER)),
            new Product(CRAFT_LEATHER, LEATHER_BODY, new Ingredient(LEATHER)),
            new Product(CRAFT_LEATHER, LEATHER_CHAPS, new Ingredient(LEATHER)),
            new Product(CRAFT_LEATHER, COIF, new Ingredient(LEATHER)),
            new Product(CRAFT_HARD_LEATHER, HARDLEATHER_BODY, new Ingredient(HARD_LEATHER, 1)),
            new Product(CRAFT_BATTLESTAVES, AIR_BATTLESTAFF, new Ingredient(AIR_ORB), new Ingredient(BATTLESTAFF)),
            new Product(CRAFT_BATTLESTAVES, FIRE_BATTLESTAFF, new Ingredient(FIRE_ORB), new Ingredient(BATTLESTAFF)),
            new Product(CRAFT_BATTLESTAVES, EARTH_BATTLESTAFF, new Ingredient(EARTH_ORB), new Ingredient(BATTLESTAFF)),
            new Product(CRAFT_BATTLESTAVES, WATER_BATTLESTAFF, new Ingredient(WATER_ORB), new Ingredient(BATTLESTAFF)),
            new Product(SMELTING, BRONZE_BAR, new Ingredient(TIN_ORE), new Ingredient(COPPER_ORE)),
            new Product(SMELTING, IRON_BAR, new Ingredient(IRON_ORE)),
            new Product(SMELTING, SILVER_BAR, new Ingredient(SILVER_ORE)),
            new Product(SMELTING, STEEL_BAR, new Ingredient(IRON_ORE), new Ingredient(COAL, 2)),
            new Product(SMELTING, GOLD_BAR, new Ingredient(GOLD_ORE)),
            new Product(SMELTING, MITHRIL_BAR, new Ingredient(MITHRIL_ORE), new Ingredient(COAL, 4)),
            new Product(SMELTING, ADAMANTITE_BAR, new Ingredient(ADAMANTITE_ORE), new Ingredient(COAL, 6)),
            new Product(SMELTING, RUNITE_BAR, new Ingredient(RUNITE_ORE), new Ingredient(COAL, 8)),
			new Product(SMELTING_CANNONBALLS, CANNONBALL, new Ingredient[]{new Ingredient(STEEL_BAR)}, new Ingredient(AMMO_MOULD)),
			new Product(SMELTING_CANNONBALLS, CANNONBALL, new Ingredient[]{new Ingredient(STEEL_BAR)}, new Ingredient(DOUBLE_AMMO_MOULD)),
            new Product(CRAFT_CUT_GEMS, OPAL, true, new Ingredient(UNCUT_OPAL)),
            new Product(CRAFT_CUT_GEMS, JADE, true, new Ingredient(UNCUT_JADE)),
            new Product(CRAFT_CUT_GEMS, RED_TOPAZ, true, new Ingredient(UNCUT_RED_TOPAZ)),
            new Product(CRAFT_CUT_GEMS, SAPPHIRE, true, new Ingredient(UNCUT_SAPPHIRE)),
            new Product(CRAFT_CUT_GEMS, EMERALD, true, new Ingredient(UNCUT_EMERALD)),
            new Product(CRAFT_CUT_GEMS, RUBY, true, new Ingredient(UNCUT_RUBY)),
            new Product(CRAFT_CUT_GEMS, DIAMOND, true, new Ingredient(UNCUT_DIAMOND)),
            new Product(CRAFT_CUT_GEMS, DRAGONSTONE, true, new Ingredient(UNCUT_DRAGONSTONE)),
            new Product(CRAFT_CUT_GEMS, ONYX, true, new Ingredient(UNCUT_ONYX)),
            new Product(CRAFT_CUT_GEMS, ZENYTE, true, new Ingredient(UNCUT_ZENYTE)),
            new Product(CRAFT_STRING_JEWELLERY, STRUNG_RABBIT_FOOT, new Ingredient(RABBIT_FOOT), new Ingredient(BALL_OF_WOOL)),
            new Product(CRAFT_STRING_JEWELLERY, HOLY_SYMBOL, new Ingredient(UNSTRUNG_SYMBOL), new Ingredient(BALL_OF_WOOL)),
            new Product(CRAFT_STRING_JEWELLERY, UNHOLY_SYMBOL, new Ingredient(UNSTRUNG_EMBLEM), new Ingredient(BALL_OF_WOOL)),
            new Product(CRAFT_STRING_JEWELLERY, OPAL_AMULET, new Ingredient(OPAL_AMULET_U), new Ingredient(BALL_OF_WOOL)),
            new Product(CRAFT_STRING_JEWELLERY, JADE_AMULET, new Ingredient(JADE_AMULET_U), new Ingredient(BALL_OF_WOOL)),
            new Product(CRAFT_STRING_JEWELLERY, SAPPHIRE_AMULET, new Ingredient(SAPPHIRE_AMULET_U), new Ingredient(BALL_OF_WOOL)),
            new Product(CRAFT_STRING_JEWELLERY, TOPAZ_AMULET, new Ingredient(TOPAZ_AMULET_U), new Ingredient(BALL_OF_WOOL)),
            new Product(CRAFT_STRING_JEWELLERY, EMERALD_AMULET, new Ingredient(EMERALD_AMULET_U), new Ingredient(BALL_OF_WOOL)),
            new Product(CRAFT_STRING_JEWELLERY, RUBY_AMULET, new Ingredient(RUBY_AMULET_U), new Ingredient(BALL_OF_WOOL)),
            new Product(CRAFT_STRING_JEWELLERY, GOLD_AMULET, new Ingredient(GOLD_AMULET_U), new Ingredient(BALL_OF_WOOL)),
            new Product(CRAFT_STRING_JEWELLERY, DIAMOND_AMULET, new Ingredient(DIAMOND_AMULET_U), new Ingredient(BALL_OF_WOOL)),
            new Product(CRAFT_STRING_JEWELLERY, DRAGONSTONE_AMULET, new Ingredient(DRAGONSTONE_AMULET_U), new Ingredient(BALL_OF_WOOL)),
            new Product(CRAFT_STRING_JEWELLERY, ONYX_AMULET, new Ingredient(ONYX_AMULET_U), new Ingredient(BALL_OF_WOOL)),
            new Product(CRAFT_STRING_JEWELLERY, ZENYTE_AMULET, new Ingredient(ZENYTE_AMULET_U), new Ingredient(BALL_OF_WOOL)),
            new Product(CRAFT_MOLTEN_GLASS, MOLTEN_GLASS, new Ingredient(BUCKET_OF_SAND), new Ingredient(SODA_ASH)),
            new Product(CRAFT_BLOW_GLASS, BEER_GLASS, new Ingredient(MOLTEN_GLASS)),
            new Product(CRAFT_BLOW_GLASS, EMPTY_CANDLE_LANTERN, new Ingredient(MOLTEN_GLASS)),
            new Product(CRAFT_BLOW_GLASS, EMPTY_OIL_LAMP, new Ingredient(MOLTEN_GLASS)),
            new Product(CRAFT_BLOW_GLASS, VIAL, new Ingredient(MOLTEN_GLASS)),
            new Product(CRAFT_BLOW_GLASS, EMPTY_FISHBOWL, new Ingredient(MOLTEN_GLASS)),
            new Product(CRAFT_BLOW_GLASS, UNPOWERED_ORB, new Ingredient(MOLTEN_GLASS)),
            new Product(CRAFT_BLOW_GLASS, LANTERN_LENS, new Ingredient(MOLTEN_GLASS)),
            new Product(CRAFT_BLOW_GLASS, EMPTY_LIGHT_ORB, new Ingredient(MOLTEN_GLASS)),
			new Product(CRAFT_LOOM, BASKET, new Ingredient(WILLOW_BRANCH, 6)),
			new Product(CRAFT_LOOM, EMPTY_SACK, new Ingredient(JUTE_FIBRE, 4)),
			new Product(CRAFT_LOOM_DRIFT_NET, DRIFT_NET, new Ingredient(JUTE_FIBRE, 2)),
			new Product(CRAFT_LOOM, STRIP_OF_CLOTH, new Ingredient(BALL_OF_WOOL, 4)),
			new Product(CRAFT_SHIELD, HARD_LEATHER_SHIELD, new Ingredient(GREEN_DRAGON_LEATHER, 2), new Ingredient (MAPLE_SHIELD), new Ingredient(BRONZE_NAILS, 15)),
			new Product(CRAFT_SHIELD, SNAKESKIN_SHIELD, new Ingredient(SNAKESKIN, 2), new Ingredient (WILLOW_SHIELD), new Ingredient(IRON_NAILS, 15)),
			new Product(CRAFT_SHIELD, GREEN_DHIDE_SHIELD, new Ingredient(GREEN_DRAGON_LEATHER, 2), new Ingredient (MAPLE_SHIELD), new Ingredient(STEEL_NAILS, 15)),
			new Product(CRAFT_SHIELD, BLUE_DHIDE_SHIELD, new Ingredient(BLUE_DRAGON_LEATHER, 2), new Ingredient (YEW_SHIELD), new Ingredient(MITHRIL_NAILS, 15)),
			new Product(CRAFT_SHIELD, RED_DHIDE_SHIELD, new Ingredient(RED_DRAGON_LEATHER, 2), new Ingredient (MAGIC_SHIELD), new Ingredient(ADAMANTITE_NAILS, 15)),
			new Product(CRAFT_SHIELD, BLACK_DHIDE_SHIELD, new Ingredient(BLACK_DRAGON_LEATHER, 2), new Ingredient (REDWOOD_SHIELD), new Ingredient(RUNE_NAILS, 15)),
			new Product(FLETCH_CUT_HIKING_STAFF, REDWOOD_HIKING_STAFF, new Ingredient(REDWOOD_LOGS)),
			new Product(FLETCH_CUT_BOW, LONGBOW_U, new Ingredient(LOGS)),
            new Product(FLETCH_CUT_BOW, OAK_LONGBOW_U, new Ingredient(OAK_LOGS)),
            new Product(FLETCH_CUT_BOW, WILLOW_LONGBOW_U, new Ingredient(WILLOW_LOGS)),
            new Product(FLETCH_CUT_BOW, MAPLE_LONGBOW_U, new Ingredient(MAPLE_LOGS)),
            new Product(FLETCH_CUT_BOW, YEW_LONGBOW_U, new Ingredient(YEW_LOGS)),
            new Product(FLETCH_CUT_BOW, MAGIC_LONGBOW_U, new Ingredient(MAGIC_LOGS)),
            new Product(FLETCH_CUT_BOW, SHORTBOW_U, new Ingredient(LOGS)),
            new Product(FLETCH_CUT_BOW, OAK_SHORTBOW_U, new Ingredient(OAK_LOGS)),
            new Product(FLETCH_CUT_BOW, WILLOW_SHORTBOW_U, new Ingredient(WILLOW_LOGS)),
            new Product(FLETCH_CUT_BOW, MAPLE_SHORTBOW_U, new Ingredient(MAPLE_LOGS)),
            new Product(FLETCH_CUT_BOW, YEW_SHORTBOW_U, new Ingredient(YEW_LOGS)),
            new Product(FLETCH_CUT_BOW, MAGIC_SHORTBOW_U, new Ingredient(MAGIC_LOGS)),
			new Product(FLETCH_STRING_BOW, LONGBOW, new Ingredient(LONGBOW_U), new Ingredient(BOW_STRING_SPOOL)),
            new Product(FLETCH_STRING_BOW, LONGBOW, new Ingredient(LONGBOW_U), new Ingredient(BOW_STRING)),
			new Product(FLETCH_STRING_BOW, OAK_LONGBOW, new Ingredient(OAK_LONGBOW_U), new Ingredient(BOW_STRING_SPOOL)),
            new Product(FLETCH_STRING_BOW, OAK_LONGBOW, new Ingredient(OAK_LONGBOW_U), new Ingredient(BOW_STRING)),
			new Product(FLETCH_STRING_BOW, WILLOW_LONGBOW, new Ingredient(WILLOW_LONGBOW_U), new Ingredient(BOW_STRING_SPOOL)),
            new Product(FLETCH_STRING_BOW, WILLOW_LONGBOW, new Ingredient(WILLOW_LONGBOW_U), new Ingredient(BOW_STRING)),
			new Product(FLETCH_STRING_BOW, MAPLE_LONGBOW, new Ingredient(MAPLE_LONGBOW_U), new Ingredient(BOW_STRING_SPOOL)),
            new Product(FLETCH_STRING_BOW, MAPLE_LONGBOW, new Ingredient(MAPLE_LONGBOW_U), new Ingredient(BOW_STRING)),
			new Product(FLETCH_STRING_BOW, YEW_LONGBOW, new Ingredient(YEW_LONGBOW_U), new Ingredient(BOW_STRING_SPOOL)),
            new Product(FLETCH_STRING_BOW, YEW_LONGBOW, new Ingredient(YEW_LONGBOW_U), new Ingredient(BOW_STRING)),
			new Product(FLETCH_STRING_BOW, MAGIC_LONGBOW, new Ingredient(MAGIC_LONGBOW_U), new Ingredient(BOW_STRING_SPOOL)),
            new Product(FLETCH_STRING_BOW, MAGIC_LONGBOW, new Ingredient(MAGIC_LONGBOW_U), new Ingredient(BOW_STRING)),
			new Product(FLETCH_STRING_BOW, SHORTBOW, new Ingredient(SHORTBOW_U), new Ingredient(BOW_STRING_SPOOL)),
            new Product(FLETCH_STRING_BOW, SHORTBOW, new Ingredient(SHORTBOW_U), new Ingredient(BOW_STRING)),
			new Product(FLETCH_STRING_BOW, OAK_SHORTBOW, new Ingredient(OAK_SHORTBOW_U), new Ingredient(BOW_STRING_SPOOL)),
            new Product(FLETCH_STRING_BOW, OAK_SHORTBOW, new Ingredient(OAK_SHORTBOW_U), new Ingredient(BOW_STRING)),
			new Product(FLETCH_STRING_BOW, WILLOW_SHORTBOW, new Ingredient(WILLOW_SHORTBOW_U), new Ingredient(BOW_STRING_SPOOL)),
            new Product(FLETCH_STRING_BOW, WILLOW_SHORTBOW, new Ingredient(WILLOW_SHORTBOW_U), new Ingredient(BOW_STRING)),
			new Product(FLETCH_STRING_BOW, MAPLE_SHORTBOW, new Ingredient(MAPLE_SHORTBOW_U), new Ingredient(BOW_STRING_SPOOL)),
            new Product(FLETCH_STRING_BOW, MAPLE_SHORTBOW, new Ingredient(MAPLE_SHORTBOW_U), new Ingredient(BOW_STRING)),
			new Product(FLETCH_STRING_BOW, YEW_SHORTBOW, new Ingredient(YEW_SHORTBOW_U), new Ingredient(BOW_STRING_SPOOL)),
            new Product(FLETCH_STRING_BOW, YEW_SHORTBOW, new Ingredient(YEW_SHORTBOW_U), new Ingredient(BOW_STRING)),
			new Product(FLETCH_STRING_BOW, MAGIC_SHORTBOW, new Ingredient(MAGIC_SHORTBOW_U), new Ingredient(BOW_STRING_SPOOL)),
            new Product(FLETCH_STRING_BOW, MAGIC_SHORTBOW, new Ingredient(MAGIC_SHORTBOW_U), new Ingredient(BOW_STRING)),
			new Product(FLETCH_SPINNING, BOW_STRING, new Ingredient(FLAX)),
			new Product(FLETCH_SHIELD, OAK_SHIELD, new Ingredient(OAK_LOGS, 2)),
			new Product(FLETCH_SHIELD, WILLOW_SHIELD, new Ingredient(WILLOW_LOGS, 2)),
			new Product(FLETCH_SHIELD, MAPLE_SHIELD, new Ingredient(MAPLE_LOGS, 2)),
			new Product(FLETCH_SHIELD, YEW_SHIELD, new Ingredient(YEW_LOGS, 2)),
			new Product(FLETCH_SHIELD, MAGIC_SHIELD, new Ingredient(MAGIC_LOGS, 2)),
			new Product(FLETCH_SHIELD, REDWOOD_SHIELD, new Ingredient(REDWOOD_LOGS, 2)),
			new Product(FLETCH_CUT_CROSSBOW, WOODEN_STOCK, new Ingredient(LOGS)),
			new Product(FLETCH_CUT_CROSSBOW, OAK_STOCK, new Ingredient(OAK_LOGS)),
			new Product(FLETCH_CUT_CROSSBOW, WILLOW_STOCK, new Ingredient(WILLOW_LOGS)),
			new Product(FLETCH_CUT_CROSSBOW, TEAK_STOCK, new Ingredient(TEAK_LOGS)),
			new Product(FLETCH_CUT_CROSSBOW, MAPLE_STOCK, new Ingredient(MAPLE_LOGS)),
			new Product(FLETCH_CUT_CROSSBOW, MAHOGANY_STOCK, new Ingredient(MAHOGANY_LOGS)),
			new Product(FLETCH_CUT_CROSSBOW, YEW_STOCK, new Ingredient(YEW_LOGS)),
			new Product(FLETCH_CUT_CROSSBOW, MAGIC_STOCK, new Ingredient(MAGIC_LOGS)),
			new Product(FLETCH_ATTACH_CROSSBOW, BRONZE_CROSSBOW_U, new Ingredient(WOODEN_STOCK), new Ingredient(BRONZE_LIMBS)),
			new Product(FLETCH_ATTACH_CROSSBOW, BLURITE_CROSSBOW_U, new Ingredient(OAK_STOCK), new Ingredient(BLURITE_LIMBS)),
			new Product(FLETCH_ATTACH_CROSSBOW, IRON_CROSSBOW_U, new Ingredient(WILLOW_STOCK), new Ingredient(IRON_LIMBS)),
			new Product(FLETCH_ATTACH_CROSSBOW, STEEL_CROSSBOW_U, new Ingredient(TEAK_STOCK), new Ingredient(STEEL_LIMBS)),
			new Product(FLETCH_ATTACH_CROSSBOW, MITHRIL_CROSSBOW_U, new Ingredient(MAPLE_STOCK), new Ingredient(MITHRIL_LIMBS)),
			new Product(FLETCH_ATTACH_CROSSBOW, ADAMANT_CROSSBOW_U, new Ingredient(MAHOGANY_STOCK), new Ingredient(ADAMANTITE_LIMBS)),
			new Product(FLETCH_ATTACH_CROSSBOW, RUNITE_CROSSBOW_U, new Ingredient(YEW_STOCK), new Ingredient(RUNITE_LIMBS)),
			new Product(FLETCH_ATTACH_CROSSBOW, DRAGON_CROSSBOW_U, new Ingredient(MAGIC_STOCK), new Ingredient(DRAGON_LIMBS)),
			new Product(FLETCH_STRING_CROSSBOW, BRONZE_CROSSBOW, new Ingredient(BRONZE_CROSSBOW_U), new Ingredient(CROSSBOW_STRING)),
			new Product(FLETCH_STRING_CROSSBOW, BLURITE_CROSSBOW, new Ingredient(BLURITE_CROSSBOW_U), new Ingredient(CROSSBOW_STRING)),
			new Product(FLETCH_STRING_CROSSBOW, IRON_CROSSBOW, new Ingredient(IRON_CROSSBOW_U), new Ingredient(CROSSBOW_STRING)),
			new Product(FLETCH_STRING_CROSSBOW, STEEL_CROSSBOW, new Ingredient(STEEL_CROSSBOW_U), new Ingredient(CROSSBOW_STRING)),
			new Product(FLETCH_STRING_CROSSBOW, MITHRIL_CROSSBOW, new Ingredient(MITHRIL_CROSSBOW_U), new Ingredient(CROSSBOW_STRING)),
			new Product(FLETCH_STRING_CROSSBOW, ADAMANT_CROSSBOW,new Ingredient(ADAMANT_CROSSBOW_U), new Ingredient(CROSSBOW_STRING)),
			new Product(FLETCH_STRING_CROSSBOW, RUNE_CROSSBOW, new Ingredient(RUNITE_CROSSBOW_U), new Ingredient(CROSSBOW_STRING)),
			new Product(FLETCH_STRING_CROSSBOW, DRAGON_CROSSBOW, new Ingredient(DRAGON_CROSSBOW_U), new Ingredient(CROSSBOW_STRING)),
			new Product(FLETCH_ATTACH_TIPS, DIAMOND_DRAGON_BOLTS, new Ingredient(DRAGON_BOLTS, 10), new Ingredient(DIAMOND_BOLT_TIPS, 10)),
			new Product(FLETCH_ATTACH_TIPS, DRAGONSTONE_DRAGON_BOLTS, new Ingredient(DRAGON_BOLTS, 10), new Ingredient(DIAMOND_BOLT_TIPS, 10)),
			new Product(FLETCH_ATTACH_TIPS, EMERALD_DRAGON_BOLTS, new Ingredient(DRAGON_BOLTS, 10), new Ingredient(DIAMOND_BOLT_TIPS, 10)),
			new Product(FLETCH_ATTACH_TIPS, JADE_DRAGON_BOLTS, new Ingredient(DRAGON_BOLTS, 10), new Ingredient(DIAMOND_BOLT_TIPS, 10)),
			new Product(FLETCH_ATTACH_TIPS, ONYX_DRAGON_BOLTS, new Ingredient(DRAGON_BOLTS, 10), new Ingredient(DIAMOND_BOLT_TIPS, 10)),
			new Product(FLETCH_ATTACH_TIPS, OPAL_DRAGON_BOLTS, new Ingredient(DRAGON_BOLTS, 10), new Ingredient(DIAMOND_BOLT_TIPS, 10)),
			new Product(FLETCH_ATTACH_TIPS, PEARL_DRAGON_BOLTS, new Ingredient(DRAGON_BOLTS, 10), new Ingredient(DIAMOND_BOLT_TIPS, 10)),
			new Product(FLETCH_ATTACH_TIPS, RUBY_DRAGON_BOLTS, new Ingredient(DRAGON_BOLTS, 10), new Ingredient(DIAMOND_BOLT_TIPS, 10)),
			new Product(FLETCH_ATTACH_TIPS, SAPPHIRE_DRAGON_BOLTS, new Ingredient(DRAGON_BOLTS, 10), new Ingredient(DIAMOND_BOLT_TIPS, 10)),
			new Product(FLETCH_ATTACH_TIPS, TOPAZ_DRAGON_BOLTS, new Ingredient(DRAGON_BOLTS, 10), new Ingredient(DIAMOND_BOLT_TIPS, 10)),
			new Product(FLETCH_DART, BRONZE_DART, new Ingredient(BRONZE_DART_TIP, 10), new Ingredient(FEATHER, 10)),
			new Product(FLETCH_DART, IRON_DART, new Ingredient(IRON_DART_TIP, 10), new Ingredient(FEATHER, 10)),
			new Product(FLETCH_DART, STEEL_DART, new Ingredient(STEEL_DART_TIP, 10), new Ingredient(FEATHER, 10)),
			new Product(FLETCH_DART, MITHRIL_DART, new Ingredient(MITHRIL_DART_TIP, 10), new Ingredient(FEATHER, 10)),
			new Product(FLETCH_DART, ADAMANT_DART, new Ingredient(ADAMANT_DART_TIP, 10), new Ingredient(FEATHER, 10)),
			new Product(FLETCH_DART, RUNE_DART, new Ingredient(RUNE_DART_TIP, 10), new Ingredient(FEATHER, 10)),
			new Product(FLETCH_DART, AMETHYST_DART, new Ingredient(AMETHYST_DART_TIP, 10), new Ingredient(FEATHER, 10)),
			new Product(FLETCH_DART, DRAGON_DART, new Ingredient(DRAGON_DART_TIP, 10), new Ingredient(FEATHER, 10)),
			new Product(FLETCH_ATTACH, OPAL_BOLTS, new Ingredient(BRONZE_BOLTS,10) , new Ingredient(OPAL_BOLT_TIPS,10)),
			new Product(FLETCH_ATTACH, JADE_BOLTS, new Ingredient(BLURITE_BOLTS,10) , new Ingredient(JADE_BOLT_TIPS,10)),
			new Product(FLETCH_ATTACH, PEARL_BOLTS, new Ingredient(IRON_BOLTS,10) , new Ingredient(PEARL_BOLT_TIPS,10)),
			new Product(FLETCH_ATTACH, TOPAZ_BOLTS, new Ingredient(STEEL_BOLTS,10) , new Ingredient(TOPAZ_BOLT_TIPS,10)),
			new Product(FLETCH_ATTACH, BARBED_BOLTS, new Ingredient(BRONZE_BOLTS, 1) , new Ingredient(BARB_BOLTTIPS,1)),
			new Product(FLETCH_ATTACH, SAPPHIRE_BOLTS, new Ingredient(MITHRIL_BOLTS,10) , new Ingredient(SAPPHIRE_BOLT_TIPS,10)),
			new Product(FLETCH_ATTACH, EMERALD_BOLTS, new Ingredient(MITHRIL_BOLTS,10) , new Ingredient(EMERALD_BOLT_TIPS,10)),
			new Product(FLETCH_ATTACH, RUBY_BOLTS, new Ingredient(ADAMANT_BOLTS,10) , new Ingredient(RUBY_BOLT_TIPS,10)),
			new Product(FLETCH_ATTACH, DIAMOND_BOLTS, new Ingredient(ADAMANT_BOLTS,10) , new Ingredient(DIAMOND_BOLT_TIPS,10)),
			new Product(FLETCH_ATTACH, DRAGONSTONE_BOLTS, new Ingredient(RUNITE_BOLTS,10) , new Ingredient(DRAGONSTONE_BOLT_TIPS,10)),
			new Product(FLETCH_ATTACH, ONYX_BOLTS, new Ingredient(RUNITE_BOLTS,10) , new Ingredient(ONYX_BOLT_TIPS,10)),
			new Product(FARM_ULTRA_COMPOST, ULTRACOMPOST, new Ingredient(VOLCANIC_ASH,2), new Ingredient(SUPERCOMPOST)),
			new Product(CHURNING_CREAM, POT_OF_CREAM, new Ingredient(BUCKET_OF_MILK)),
			new Product(CHURNING_BUTTER_WITH_MILK, PAT_OF_BUTTER, new Ingredient(BUCKET_OF_MILK)),
			new Product(CHURNING_BUTTER_WITH_CREAM, PAT_OF_BUTTER, new Ingredient(POT_OF_CREAM)),
			new Product(CHURNING_CHEESE_WITH_MILK, CHEESE, new Ingredient(BUCKET_OF_MILK)),
			new Product(CHURNING_CHEESE_WITH_CREAM, CHEESE, new Ingredient(POT_OF_CREAM)),
			new Product(CHURNING_CHEESE_WITH_BUTTER, CHEESE, new Ingredient(PAT_OF_BUTTER)),
			new Product(CHURNING_CHEESE_WITH_GARLIC, CHEESE, new Ingredient(PAT_OF_NOT_GARLIC_BUTTER)),
			new Product(WETTING_CLAY, SOFT_CLAY, new Ingredient(CLAY), new Ingredient(BUCKET_OF_WATER)),
			new Product(WETTING_CLAY, SOFT_CLAY, new Ingredient(CLAY), new Ingredient(BOWL_OF_WATER)),
			new Product(WETTING_CLAY, SOFT_CLAY, new Ingredient(CLAY), new Ingredient(JUG_OF_WATER)),
			new Product(WETTING_CLAY, SOFT_CLAY, new Ingredient(CLAY), new Ingredient(VIAL_OF_WATER)),
            // @formatter:on
	};

	private final int[] widgetProductIds = new int[WIDGET_MAKE_SLOT_COUNT];

	@Inject private Client client;

	@Inject private InventoryManager inventoryManager;

	@Inject private ActionUtils actionUtils;

	private int selectedIndex = -1;

	private String question;

	@Subscribe
	public void onVarbitChanged(VarbitChanged evt)
	{
		if (evt.getValue() == VAR_SELECTED_INDEX) {
			this.selectedIndex = this.client.getVarpValue(evt.getValue());
		}
	}

	@Subscribe
	public void onScriptPreFired(ScriptPreFired evt)
	{
		if (evt.getScriptId() == MAKE_X_BUTTON_KEY ||
			evt.getScriptId() == MAKE_X_BUTTON_CLICK) {
			ScriptEvent se = evt.getScriptEvent();
			Widget source = se == null ? null : se.getSource();
			if (source != null) {
				this.selectedIndex = (source.getId() - WIDGET_ID_CHATBOX_FIRST_MAKE_BUTTON);
			}
		}
	}

	@Subscribe
	public void onScriptPostFired(ScriptPostFired evt)
	{
		if (evt.getScriptId() == MAKE_X_SETUP) {
			log.debug("[proc_itembutton_draw] updating products");
			this.updateProducts();
		} else if (evt.getScriptId() == MAKE_X_BUTTON_TRIGGERED) {
			this.onQuestionAnswered();
		}
	}

	protected void unhandled(int itemId)
	{
		log.warn("[*] Unhandled chatbox action");
		log.warn(" |-> Question: {}", this.question);
		log.warn(" |-> Item ID: {}", itemId);
	}

	@Override
	public void setup()
	{
		/*
		 * Cooking
		 */
		this.registerAction(COOKING_TOP_PIZZA, INCOMPLETE_PIZZA, UNCOOKED_PIZZA, PINEAPPLE_PIZZA, ANCHOVY_PIZZA,
				MEAT_PIZZA
		);
		this.registerAction(COOKING_MIX_GRAPES, UNFERMENTED_WINE, UNFERMENTED_WINE_1996, ZAMORAKS_UNFERMENTED_WINE);
		this.registerAction(COOKING_MIX_DOUGH, BREAD_DOUGH, PASTRY_DOUGH, PITTA_DOUGH, PIZZA_BASE);
		/*
		 * Fletching
		 */
		this.registerAction(FLETCH_ATTACH, Fletching.UNENCHANTED_BOLTS_AND_ARROWS);
		this.registerAction(FLETCH_ATTACH_3T, KEBBIT_BOLTS, MOONLIGHT_ANTELOPE_ANTLER, SUNLIGHT_ANTELOPE_ANTLER);
		this.registerAction(FLETCH_ATTACH, HEADLESS_ARROW, FLIGHTED_OGRE_ARROW, AMETHYST_BROAD_BOLTS, AMETHYST_ARROW);
		this.registerAction(FLETCH_JAVELIN, Fletching.JAVELINS);
		this.registerAction(FLETCH_CUT_ARROW_SHAFT, ARROW_SHAFT, BRUMA_KINDLING, OGRE_ARROW_SHAFT);
		this.registerAction(FLETCH_CUT_JAVELIN_SHAFT, JAVELIN_SHAFT);
		this.registerAction(FLETCH_CUT_TIPS, Fletching.BOLT_TIPS);
		/*
		 *  Crafting
		 */
		this.registerAction(CRAFT_AMETHYST_HEADS_AND_TIPS, Crafting.AMETHYST_HEADS_AND_TIPS);
		/*
		 * Herblore
		 */
		this.registerAction(HERB_MIX_TAR, GUAM_TAR, MARRENTILL_TAR, TARROMIN_TAR, HARRALANDER_TAR);
		this.registerAction(HERB_MIX_POTIONS_3T, GUTHIX_REST3);
		for (Recipe recipe : Herblore.UNFINISHED_POTIONS) {
			this.registerAction(HERB_MIX_UNFINISHED, recipe.getProductId());
		}
		for (Recipe recipe : Herblore.POTIONS) {
			this.registerAction(HERB_MIX_POTIONS, recipe.getIsSelectingIngredientAsProduct() ? recipe.getRequirements()[0].getItemId() : recipe.getProductId()); //TODO Find way to display product when getIsSelectingIngredientAsProduct = true
		}
		for (int leaveItem : Woodcutting.LEAVES){
			for (int foodItem : Woodcutting.RATION_FOOD) {
				this.registerAction(MAKING_FORESTERS_RATION, ItemID.FORESTERS_RATION, leaveItem, foodItem);
			}
		}
		/*
		 * Magic
		 */
		//this.registerAction(MAGIC_ENCHANT_BOLTS, Fletching.ENCHANTED_BOLTS);
	}

	private void onQuestionAnswered()
	{
		int currentProductId = this.widgetProductIds[this.selectedIndex];
		int amount = this.getActionCount(currentProductId);
		String question = this.question == null ? "?" : this.question;
		switch (question) {
			case "How many would you like to cook?":
			case "What would you like to cook?":
				this.actionManager.setAction(COOKING, amount, currentProductId);
				break;
			case "How would you like to cut the pineapple?":
				if (currentProductId == PINEAPPLE_RING) {
					amount = Math.min(amount, this.actionUtils.getActionsUntilFull(4, 1));
				}
				this.actionManager.setAction(COOKING_CUT_FRUIT, amount, currentProductId);
				break;
			case "How many would you like to charge?":
				Magic.ChargeOrbSpell spell = Magic.ChargeOrbSpell.byProduct(currentProductId);
				Objects.requireNonNull(spell, "No charge orb spell found for product: " + currentProductId);
				this.actionManager.setAction(
						Action.MAGIC_CHARGE_ORB,
						Math.min(amount, spell.getSpell().getAvailableCasts(this.client)),
						currentProductId
				);
				break;
			case "How many sets of bolts to enchant?":
				int enchantCrossbolBoltAmount = Magic.EnchantCrossbowBoltSpell.getAvailableCasts(client, currentProductId);
				this.actionManager.setAction(
						Action.MAGIC_ENCHANT_BOLTS,
						Math.min(amount, enchantCrossbolBoltAmount),
						currentProductId
				);
				break;
			case "What would you like to smelt?": // Smelting bars
				Product smithingProduct = Recipe.forProduct(MULTI_MATERIAL_PRODUCTS, currentProductId, this.inventoryManager);
				if (smithingProduct != null) {
					if (amount > 0) {
						this.actionManager.setAction(
								smithingProduct.getAction(),
								amount,
								smithingProduct.getIsSelectingIngredientAsProduct() ? smithingProduct.getProductId() : currentProductId
						);
					}
				}
				break;
			case "How many would you like to burn?": // Firemaking tending
				this.actionManager.setAction(FIREMAKING_CAMPFIRE, amount, currentProductId);			
				break;
			case "How many would you like to string?": // Fletching/Stringing
			case "What would you like to string?": // Fletching/Stringing
			case "What would you like to make?": // Various
			case "How many batches would you like?":
			case "How many bars would you like to smith?": // Cannonballs
			case "How many gems would you like to cut?": // Cutting gems
			case "How many do you wish to make?": // Various
			case "How many sets of 15 do you wish to complete?": // Arrows
			case "How many sets of 15 do you wish to feather?": // Headless arrows
			case "?":
			default:
				Product recipe = Recipe.forProduct(MULTI_MATERIAL_PRODUCTS, currentProductId, this.inventoryManager);
				if (recipe != null) {
					amount = Math.min(amount, recipe.getMakeProductCount(this.inventoryManager));
					if (amount > 0) {
						this.actionManager.setAction(
								recipe.getAction(),
								amount,
								recipe.getIsSelectingIngredientAsProduct() ? recipe.getProductId() : currentProductId
						);
					}
				} else {
					this.setActionByItemId(currentProductId, amount);
				}
				break;
		}
	}

	private void updateProducts()
	{
		for (int slotIndex = 0; slotIndex < WIDGET_MAKE_SLOT_COUNT; slotIndex++) {
			Widget slotWidget = this.client.getWidget(WIDGET_MAKE_PARENT, WIDGET_MAKE_SLOT_START + slotIndex);
			Widget container = slotWidget == null ? null : slotWidget.getChild(WIDGET_MAKE_SLOT_ITEM);
			int id = container == null ? -1 : container.getItemId();
			if (id != -1 && id != HOURGLASS && id != HOURGLASS_12841) {
				this.widgetProductIds[slotIndex] = id;
			}
		}
		Widget questionWidget = this.client.getWidget(WIDGET_MAKE_PARENT, WIDGET_MAKE_QUESTION);
		if (questionWidget != null) {
			this.question = questionWidget.getText();
		}
		log.debug("updated products: {}", Arrays.toString(this.widgetProductIds));
	}

	private int getActionCount(int productId)
	{
		int n = this.client.getVarcIntValue(VAR_MAKE_AMOUNT);
		for (Smithing.Bar bar : Smithing.Bar.values()) {
			if (productId == bar.getItemId()) {
				return Math.min(n, bar.countAvailableOres(this.client));
			}
		}
		for (Cooking.Cookable entry : Cooking.Cookable.values()) {
			IDs raw = entry.getRaw(), cooked = entry.getCooked();
			if (cooked.contains(productId)) {
				int rawFish = this.inventoryManager.getItemCount(raw::contains);
				return Math.min(n, rawFish);
			}
		}
		return n;
	}

}
package com.github.calebwhiting.runelite.plugins.actionprogress.detect;

import com.github.calebwhiting.runelite.api.event.LocalAnimationChanged;
import com.github.calebwhiting.runelite.plugins.actionprogress.Action;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import net.runelite.api.*;
import net.runelite.client.eventbus.Subscribe;

@Singleton
public class SandpitDetector extends ActionDetector
{

	@Inject private Client client;

	@Subscribe
	public void onLocalAnimationChanged(LocalAnimationChanged evt)
	{
		Player me = evt.getLocalPlayer();
		if (me.getAnimation() != AnimationID.SAND_COLLECTION) {
			return;
		}
		if (this.actionManager.getCurrentAction() == Action.COLLECT_SAND) {
			return;
		}
		ItemContainer inventory = this.client.getItemContainer(InventoryID.INVENTORY);
		if (inventory == null) {
			return;
		}
		int buckets = inventory.count(ItemID.BUCKET);
		this.actionManager.setAction(Action.COLLECT_SAND, buckets, ItemID.BUCKET_OF_SAND);
	}

}

package com.github.calebwhiting.runelite.plugins.actionprogress.detect;

import com.github.calebwhiting.runelite.plugins.actionprogress.Action;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.ItemContainer;
import net.runelite.api.ItemID;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.events.ScriptPreFired;
import net.runelite.api.events.VarClientIntChanged;
import net.runelite.api.events.VarbitChanged;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.input.KeyListener;
import net.runelite.client.input.KeyManager;

import java.awt.event.KeyEvent;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Singleton
@Slf4j
public class SmithingDetector extends ActionDetector implements KeyListener
{

	@Inject private Client client;

	@Inject private ClientThread clientThread;
	
	@Inject private KeyManager keyManager;

	private static final Pattern X_BARS_PATTERN = Pattern.compile("^(?<x>\\d*) (bars?)$");

	private static final int VAR_AVAILABLE_MATERIALS = 2224;

	private static final int VAR_SMITHING_INTERFACE = 989;

	private static final int VAR_SELECTED_SMITHING_INDEX = 13895;

	private static final int SCRIPT_SMITHING_INIT = 431;

	private static final int ENUM_SMITHING_WIDGET_INDEX = 1101;

	private static final int ENUM_SMITHING_ITEM_BAR = 845;

	private int smithingItemid;

	private int numberOfBarsForSelectedItem;

	private boolean waitingForSmithingSelection = false;

	private HashMap<Integer, Integer> indexToItemId = new HashMap<Integer,Integer>();

	@Override
	public void keyTyped(KeyEvent event)
	{

	}
	
	@Override
	public void keyReleased(KeyEvent event)
	{

	}

	@Override
	public void keyPressed(KeyEvent event)
	{
		if (waitingForSmithingSelection && event.getKeyCode() == KeyEvent.VK_SPACE)
		{
			clientThread.invokeLater(() -> {
				int availableBars = this.client.getVarpValue(VAR_AVAILABLE_MATERIALS);
				if(numberOfBarsForSelectedItem == 0)
				{
					return;
				}

				if(isWearingSmithOutfit()){
					this.actionManager.setAction(Action.SMITHING_WITH_SMITH_OUTFIT, (availableBars / numberOfBarsForSelectedItem), smithingItemid);
				}
				else {
					this.actionManager.setAction(Action.SMITHING, (availableBars / numberOfBarsForSelectedItem), smithingItemid);
				}
			});
		}
	}

	@Override
	public void setup()
	{
		keyManager.registerKeyListener(this);
	}

	@Override
	public void shutDown()
	{
		keyManager.unregisterKeyListener(this);
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged evt)
	{
		if (evt.getVarbitId() == VAR_SELECTED_SMITHING_INDEX) {			
			int index = evt.getValue();
			if(indexToItemId.containsKey(index)){
				smithingItemid = indexToItemId.get(index);
				numberOfBarsForSelectedItem = client.getEnum(ENUM_SMITHING_ITEM_BAR).getIntValue(smithingItemid);
			}			
		}
	}

	@Subscribe
	public void onVarClientIntChanged(VarClientIntChanged varClientIntChanged)
	{
		if (varClientIntChanged.getIndex() == VAR_SMITHING_INTERFACE)
		{
			waitingForSmithingSelection = !waitingForSmithingSelection;
		}
	}

	@Subscribe
	public void onScriptPreFired(ScriptPreFired evt)
	{
		if (evt.getScriptId() == SCRIPT_SMITHING_INIT){
			final int[] intStack = client.getIntStack();
			final int intStackSize = client.getIntStackSize();
			final int widgetId = intStack[intStackSize - 4];			
			final int itemId = intStack[intStackSize - 3];

			int index = client.getEnum(ENUM_SMITHING_WIDGET_INDEX).getIntValue(widgetId);
			indexToItemId.put(index, itemId);

			int var_index = this.client.getVarbitValue(VAR_SELECTED_SMITHING_INDEX);

			try {
				smithingItemid = indexToItemId.get(var_index);
				numberOfBarsForSelectedItem = client.getEnum(ENUM_SMITHING_ITEM_BAR).getIntValue(smithingItemid);
			}catch (NullPointerException e){
				log.debug("Item not found in indexToItemId map");
			}

		}
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked evt)
	{
		int param1 = evt.getParam1();
		if (param1 == -1) {
			return;
		}
		Widget widget = this.client.getWidget(param1);
		if (widget == null) {
			return;
		}
		if (widget.getParentId() == ComponentID.SMITHING_INVENTORY_ITEM_CONTAINER) {
			Widget widget1 = widget.getChild(1);
			Widget widget2 = widget.getChild(2);
			String text = widget1.getText();
			String text2 = widget2.getText();
			Matcher matcher = X_BARS_PATTERN.matcher(text);
			Matcher matcher2 = X_BARS_PATTERN.matcher(text2);
			if (matcher.matches() || matcher2.matches()) {
				String x = matcher.matches() ? matcher.group("x") : matcher2.group("x");
				int barsPerItem = Integer.parseInt(x);
				int availableBars = this.client.getVarpValue(VAR_AVAILABLE_MATERIALS);
				int productId = matcher.matches() ? widget2.getItemId() : widget1.getItemId() ;
				if(isWearingSmithOutfit()){
					this.actionManager.setAction(Action.SMITHING_WITH_SMITH_OUTFIT, (availableBars / barsPerItem), productId);
				}
				else {
					this.actionManager.setAction(Action.SMITHING, (availableBars / barsPerItem), productId);
				}
			}
		}
	}

	private boolean isWearingSmithOutfit(){
		ItemContainer gear = this.client.getItemContainer(InventoryID.EQUIPMENT);
		if (gear == null) {
			return false;
		}
        return gear.contains(ItemID.SMITHS_TUNIC) &&
                gear.contains(ItemID.SMITHS_TROUSERS) &&
                gear.contains(ItemID.SMITHS_BOOTS) &&
                (gear.contains(ItemID.SMITHS_GLOVES) || gear.contains(ItemID.SMITHS_GLOVES_I));
    }

}

package com.github.calebwhiting.runelite.plugins.actionprogress.detect;

import com.github.calebwhiting.runelite.plugins.actionprogress.Action;
import com.google.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.annotations.Varbit;
import net.runelite.api.events.GameTick;
import net.runelite.client.eventbus.Subscribe;

public class TemporossRewardPoolDetector extends ActionDetector
{

	@Varbit private static final int VAR_TEMPOROSS_PERMITS = 11936;

	@Inject private Client client;

	private int previousPermits = -1;

	@Subscribe
	public void onGameTick(GameTick evt)
	{
		int permits = this.client.getVarbitValue(VAR_TEMPOROSS_PERMITS);
		if (permits < this.previousPermits) {
			if (this.actionManager.getCurrentAction() != Action.TEMPOROSS_REWARD_POOL) {
				this.actionManager.setAction(Action.TEMPOROSS_REWARD_POOL, permits + 1, -1);
			}
		}
		this.previousPermits = permits;
	}

}

package com.github.calebwhiting.runelite.plugins.actionprogress.detect;

import com.github.calebwhiting.runelite.plugins.actionprogress.Action;
import com.github.calebwhiting.runelite.plugins.actionprogress.ActionManager;
import com.google.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.game.ItemManager;
import java.util.HashMap;

@Slf4j
public class ActionDetector
{

	protected final HashMap<Integer, Action> itemActions = new HashMap<Integer, Action>();

	@Inject protected ItemManager itemManager;

	@Inject protected ActionManager actionManager;

	protected void registerAction(Action action, int... itemIds)
	{
		for (int id : itemIds) {
			this.itemActions.put(id, action);
			log.debug("Registered action {} for item: {}", action, id);
		}
	}

	protected void setActionByItemId(int itemId, int amount)
	{
		log.debug("looking for action by item id: {}", itemId);
		Action action = this.itemActions.get(itemId);
		if (action == null) {
			this.unhandled(itemId);
		} else {
			this.actionManager.setAction(action, amount, itemId);
		}
	}

	protected void unhandled(int itemId)
	{
		log.error("Unhandled product: {}", itemId);
	}

	public void setup()
	{
	}

	public void shutDown()
	{
	}

}
package com.github.calebwhiting.runelite.plugins.actionprogress.detect;

import com.github.calebwhiting.runelite.data.Magic;
import com.github.calebwhiting.runelite.plugins.actionprogress.Action;
import com.github.calebwhiting.runelite.plugins.actionprogress.ActionProgressConfig;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.ItemContainer;
import net.runelite.api.MenuAction;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.widgets.Widget;
import net.runelite.client.eventbus.Subscribe;

import java.util.Arrays;
@Singleton
public class EnchantSpellDetector extends ActionDetector
{

	@Inject private ActionProgressConfig config;

	@Inject private Client client;

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked evt)
	{
		if (!this.config.magicEnchantJewellery()) {
			return;
		}
		if (evt.getMenuAction() == MenuAction.WIDGET_TARGET_ON_WIDGET) {
			ItemContainer inventory = this.client.getItemContainer(InventoryID.INVENTORY);
			if (inventory == null) {
				return;
			}
			for (Magic.EnchantSpell enchantSpell : Magic.EnchantSpell.values()) {
				Magic.Spell spell = enchantSpell.getSpell();
				Widget widget = this.client.getWidget(spell.getWidgetId());
				if (widget != null && widget.getBorderType() == 2) {
					int itemId = evt.getItemId();
					if (Arrays.binarySearch(enchantSpell.getJewellery(), itemId) < 0) {
						continue;
					}
					int amount = Math.min(inventory.count(itemId), spell.getAvailableCasts(this.client));
					this.actionManager.setAction(Action.MAGIC_ENCHANT_JEWELLERY, amount, itemId);
					break;
				}
			}
		}
	}

}

package com.github.calebwhiting.runelite.plugins.actionprogress.detect;

import com.google.inject.Singleton;

//TODO

@Singleton
public class RiftGuardianDetector extends ActionDetector
{

}

package com.github.calebwhiting.runelite.plugins.actionprogress.detect;

import java.util.Arrays;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.github.calebwhiting.runelite.api.InterruptManager;
import com.github.calebwhiting.runelite.api.InventoryManager;
import com.github.calebwhiting.runelite.plugins.actionprogress.Action;
import com.google.inject.Inject;
import com.google.inject.Singleton;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.ItemContainer;
import net.runelite.api.ItemID;
import net.runelite.api.Player;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.widgets.Widget;
import net.runelite.client.eventbus.Subscribe;


@Slf4j
@Singleton
public class GuardianOfTheRift extends ActionDetector
{
	private static final int REWARD_GUARDIAN_ID = 43695;
	private static final int WORKBENCH_ID = 43754;
	private static final int GUARDIAN_FRAGMENTS_ITEM_ID = 26878;
	private static final int CRAFTING_ANIMATION_ID = 9365;
	private static final int REWARD_SEARCHING_ANIMATION_ID = 9353;
	private static final int MINIGAME_MAIN_REGION = 14484;

	//Apparently varbits 13686 & 13685 have the values of the points, but I couldn't get them to work so the workaround is to find them manually.
	private static final String REWARD_POINT_REGEX = "Total elemental energy:[^>]+>([\\d,]+).*Total catalytic energy:[^>]+>([\\d,]+).";
	private static final Pattern REWARD_POINT_PATTERN = Pattern.compile(REWARD_POINT_REGEX);
	private static final String CHECK_POINT_REGEX = "You have (\\d+) catalytic energy and (\\d+) elemental energy";
	private static final Pattern CHECK_POINT_PATTERN = Pattern.compile(CHECK_POINT_REGEX);

	private static final int DIALOG_WIDGET_GROUP = 229;
	private static final int DIALOG_WIDGET_MESSAGE = 1;

	private int currentElementalRewardPoints = -1;
	private int currentCatalyticRewardPoints = -1;
	private int numberOfGuardianEssencesToMake = -1;

	private boolean triggeringEssenceCrafting;
	private boolean triggeringRewardSearch;	

	@Inject private Client client;

	@Inject private InventoryManager inventoryManager;

	@Inject protected InterruptManager interruptManager;

	private boolean checkInMainRegion(){
		int[] currentMapRegions = client.getMapRegions();
		return currentMapRegions != null && Arrays.stream(currentMapRegions).anyMatch(x -> x == MINIGAME_MAIN_REGION);
	}

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage)
	{
		if(!checkInMainRegion()) return;
		if(chatMessage.getType() != ChatMessageType.SPAM && chatMessage.getType() != ChatMessageType.GAMEMESSAGE) return;

		String msg = chatMessage.getMessage();
		Matcher rewardPointMatcher = REWARD_POINT_PATTERN.matcher(msg);
		
		if(msg.contains("You found some loot:")){
			currentElementalRewardPoints--;
			currentCatalyticRewardPoints--;
		}
		else if(msg.contains("The Great Guardian was defeated!")){
			interruptManager.interrupt("Guardian of the Rift game concluded");
		}
		else if(rewardPointMatcher.find()) {
			interruptManager.interrupt("Guardian of the Rift game concluded");
			currentElementalRewardPoints = Integer.parseInt(rewardPointMatcher.group(1).replaceAll(",", ""));
			currentCatalyticRewardPoints = Integer.parseInt(rewardPointMatcher.group(2).replaceAll(",", ""));
		}
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked evt)
	{
		if(!checkInMainRegion()) return;

		if (evt.getId() == REWARD_GUARDIAN_ID && evt.getMenuOption().toLowerCase().equals("search")){
			triggeringRewardSearch = true;
		}

		if(evt.getId() == WORKBENCH_ID && evt.getMenuOption().toLowerCase().equals("work-at")){			
			triggeringEssenceCrafting = true;
			ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
			numberOfGuardianEssencesToMake = inventory == null ? 0 : Math.min(inventory.count(GUARDIAN_FRAGMENTS_ITEM_ID), this.inventoryManager.getFreeSpaces());
		}
	}

	@Subscribe
	public void onGameTick(GameTick evt)
	{
		if(!checkInMainRegion()) return;

		Widget dialog = client.getWidget(DIALOG_WIDGET_GROUP, DIALOG_WIDGET_MESSAGE);
		if (dialog != null){			
		String dialogText = dialog.getText();
		final Matcher checkMatcher = CHECK_POINT_PATTERN.matcher(dialogText);
		if (checkMatcher.find(0))
		{
			currentCatalyticRewardPoints = Integer.parseInt(checkMatcher.group(1));
			currentElementalRewardPoints = Integer.parseInt(checkMatcher.group(2));
			}
		}
		
		Player local = this.client.getLocalPlayer();
		if (local == null || local.getAnimation() == -1) return;

		log.debug (local.getAnimation() + " local animation");
		
		if (triggeringEssenceCrafting && local.getAnimation() == CRAFTING_ANIMATION_ID){
			triggeringEssenceCrafting = false;

			if (numberOfGuardianEssencesToMake == 0) return;
			
			this.actionManager.setAction(Action.GUARDIAN_OF_THE_RIFT_CRAFTING, numberOfGuardianEssencesToMake, ItemID.GUARDIAN_ESSENCE);	
		}
		else if (triggeringRewardSearch && local.getAnimation() == REWARD_SEARCHING_ANIMATION_ID){
			triggeringRewardSearch = false;

			int numberOfRewards = Math.min(currentElementalRewardPoints, currentCatalyticRewardPoints);

			if (numberOfRewards == 0) return;

			this.actionManager.setAction(Action.GUARDIAN_OF_THE_RIFT_REWARD_POOL, numberOfRewards, -1);
		}

	}
}

package com.github.calebwhiting.runelite.plugins.actionprogress.detect;

import com.github.calebwhiting.runelite.data.Crafting;
import com.github.calebwhiting.runelite.plugins.actionprogress.Action;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Player;
import net.runelite.api.events.WidgetClosed;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.gameval.VarbitID;
import net.runelite.client.eventbus.Subscribe;

import static net.runelite.api.gameval.AnimationID.HUMAN_FURNACE;


/**
 * Detects actions initiated from the furnace casting interface (Gold/Silver products)
 */
@Slf4j
public class FurnaceCastingDetector extends ActionDetector
{
	/**
	 * Indicates how many items are to be created in the crafting dialogue.
	 */
	private static final int VAR_FURNACE_MAKE_AMOUNT = 2224;

	@Inject private Client client;

	@Override
	public void setup()
	{
		this.registerAction(Action.CRAFT_CAST_GOLD_AND_SILVER, Crafting.SILVER_AND_GOLD_ITEMS);
	}

	/**
	 * Consumes Widget Closed event and runs if the widget was our gold or silver casting
	 * @param evt Widget Closed Event
	 */
	@Subscribe
	@Singleton
	public void onWidgetClosed(WidgetClosed evt){

		// Gold Casting
		if(evt.getGroupId() == InterfaceID.CRAFTING_GOLD) {
			// Get the player's active animation, if there is no animation this also fails
			Player me = this.client.getLocalPlayer();
			if (me.getAnimation() != HUMAN_FURNACE) {
				return;
			}

			// action count is a player value while last type is a varbit, we may need to update VAR_FURNACE_MAKE_AMOUNT
			int actionCount = this.client.getVarpValue(VAR_FURNACE_MAKE_AMOUNT);
			int lastType =	this.client.getVarbitValue(VarbitID.CRAFTING_GOLD_ITEM_LASTTYPE) - 1; // minus 1 for array trav

			// error check so we don't out of bounds in case they ever change the method by which they count
			if (lastType >= 0) {
				this.setActionByItemId(Crafting.GOLD_ITEMS[lastType], actionCount);
			}
		}
		// Silver Casting
		else if(evt.getGroupId() == InterfaceID.SILVER_CRAFTING) {
			// Get the player's active animation, if there is no animation this also fails
			Player me = this.client.getLocalPlayer();
			if (me.getAnimation() != HUMAN_FURNACE) {
				return;
			}

			// action count is a player value while last type is a varbit, we may need to update VAR_FURNACE_MAKE_AMOUNT
			int actionCount = this.client.getVarpValue(VAR_FURNACE_MAKE_AMOUNT);
			int lastType =	this.client.getVarbitValue(VarbitID.CRAFTING_SILVER_ITEM_LASTTYPE) - 1; // minus 1 for array trav

			// error check so we don't out of bounds in case they ever change the method by which they count
			if (lastType >= 0) {
				this.setActionByItemId(Crafting.SILVER_ITEMS[lastType], actionCount);
			}
		}
	}
}
package com.github.calebwhiting.runelite.plugins.actionprogress;

import com.github.calebwhiting.runelite.api.InterruptManager;
import com.github.calebwhiting.runelite.api.TickManager;
import com.github.calebwhiting.runelite.api.event.Interrupt;
import com.github.calebwhiting.runelite.data.Fletching;
import com.github.calebwhiting.runelite.plugins.actionprogress.event.ActionStartedEvent;
import com.github.calebwhiting.runelite.plugins.actionprogress.event.ActionStoppedEvent;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.ItemContainer;
import net.runelite.api.ItemID;
import net.runelite.api.events.GameTick;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;

@Slf4j
@Singleton
public class ActionManager
{

	@Inject private EventBus eventBus;

	@Inject private Client client;

	@Inject private InterruptManager interruptManager;

	@Inject private TickManager tickManager;

	@Inject private ActionProgressConfig config;

	/**
	 * The tick which started the series of actions
	 */
	@Getter private int actionStartTick;

	/**
	 * The time when the series of actions was started
	 */
	@Getter private long actionStartMs;

	/**
	 * The tick when the current series of actions will be complete
	 */
	@Getter private int actionEndTick;

	/**
	 * The time when the series of actions will be complete
	 */
	@Getter private long actionEndMs;

	/**
	 * The amount of actions in the sequence of actions
	 */
	@Getter private int actionCount;

	@Getter private Action currentAction;

	@Getter @Setter private int currentProductId = -1;

	private int calculateActionTicks(Action action, int actionCount)
	{
		int nTicksElapsed = 0;
		int[] timings = getActionTickTimes(action);

		//Could be done more cleanly elsewhere, but it would require changing everything from int to double
		int realActionCount = action == Action.SMITHING_WITH_SMITH_OUTFIT ? (int) (actionCount * .8) : actionCount;
		for (int i = 0; i < realActionCount; i++) {
			nTicksElapsed += timings[i >= timings.length ? timings.length - 1 : i];
		}
		return nTicksElapsed;
	}

	public void setAction(Action action, int actionCount, int itemId)
	{
		if (!action.getEnabledFunction().apply(this.config)) {
			log.debug("action {} is disabled", action);
			return;
		}
		if (actionCount <= 1 && this.config.ignoreSingleActions()) {
			log.debug("ignoring single action");
			return;
		}
		if (actionCount == 0){
			log.debug("Nothing to do");
			return;
		}
		this.currentAction = action;
		this.currentProductId = itemId;
		this.actionStartTick = this.client.getTickCount();
		this.actionEndTick = this.actionStartTick + calculateActionTicks(action, actionCount);
		long duration = calculateActionTicks(action, actionCount) * TickManager.PERFECT_TICK_TIME;
		this.actionStartMs = System.currentTimeMillis();
		this.actionEndMs = this.actionStartMs + duration;
		this.actionCount = actionCount;
		this.interruptManager.setWaiting(true);
		log.debug("Started action: {} x {} ({} -> {})", this.actionCount, action.name(), this.actionStartTick,
				this.actionEndTick
		);
		this.eventBus.post(
				new ActionStartedEvent(action, itemId, actionCount, this.actionStartTick, this.actionEndTick));
	}

	private void resetAction()
	{
		log.debug("resetting action");
		if (this.currentAction != null) {
			this.eventBus.post(new ActionStoppedEvent(this.currentAction, this.currentProductId, this.actionCount,
					this.actionStartTick, this.actionEndTick,
					this.client.getTickCount() < this.actionEndTick
			));
		}
		this.currentAction = null;
		this.currentProductId = this.actionStartTick = this.actionEndTick = this.actionCount = -1;
		this.actionStartMs = this.actionEndMs = 0L;
	}

	@Subscribe(priority = -1)
	public void onInterrupt(Interrupt evt)
	{
		if (!evt.isConsumed()) {
			this.resetAction();
		}
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		this.actionEndMs = System.currentTimeMillis() + this.getApproximateCompletionTime();
		if (this.actionEndTick != -1 && this.client.getTickCount() >= this.actionEndTick) {
			log.debug("action end tick has passed");
			if (this.interruptManager.isWaiting()) {
				this.interruptManager.setWaiting(false);
			}
			this.resetAction();
		}
	}

	public int getCurrentActionProcessed()
	{
		if (this.currentAction == null) {
			return 0;
		}
		int actions = 0;
		int rem = this.client.getTickCount() - this.actionStartTick;
		int[] timings = getActionTickTimes(this.currentAction);
		for (int tickTime : timings) {
			rem -= tickTime;
			if (rem >= 0) {
				actions++;
			} else {
				rem = 0;
				break;
			}
		}
		return actions + (rem / timings[timings.length - 1]);
	}

	public float getTicksLeft()
	{
		int tick = this.client.getTickCount();
		float ticksLeft = ((float) this.actionEndTick - tick);
		if (ticksLeft <= 0) {
			return 0;
		}
		return ticksLeft;
	}

	public int[] getActionTickTimes(Action action) {
		// Should maybe be more generic in the future to handle different "modifiers" to actions
		if (!isBoostableFletchingAction(action)) {
			return action.getTickTimes();
		}

		boolean hasFletchingKnife = hasFletchingKnifeInInventory() || isWearingFletchingKnife();
		if (!hasFletchingKnife) {
			return action.getTickTimes();
		}

		int[] original = action.getTickTimes();
		int length = original.length == 1 ? 2 : original.length;
		int[] adjusted = new int[length];

		// The first tick remains unchanged
		adjusted[0] = original[0];

		// The following ticks are 1 tick faster
		for (int i = 1; i < length; i++) {
			int baseTick = (i < original.length) ? original[i] : original[0];
			adjusted[i] = Math.max(1, baseTick - 1);
		}

		return adjusted;
	}

	public long getApproximateCompletionTime()
	{
		float ticksLeft = getTicksLeft();
		long timeSinceTick = System.currentTimeMillis() - this.tickManager.getLastTickTime();
		return Math.round((ticksLeft * TickManager.PERFECT_TICK_TIME) - timeSinceTick);
	}

	private boolean isBoostableFletchingAction(Action action) {
		String name = action.name();
		return name.contains("FLETCH")
			   && !name.contains("TIPS")
			   && action.getDescription().equals("Cutting");
	}

	private boolean hasFletchingKnifeInInventory() {
		ItemContainer inventory = this.client.getItemContainer(InventoryID.INVENTORY);
		if (inventory == null) {
			return false;
		}

		return inventory.contains(ItemID.FLETCHING_KNIFE);
	}

	private boolean isWearingFletchingKnife() {
		ItemContainer gear = this.client.getItemContainer(InventoryID.EQUIPMENT);
		if (gear == null) {
			return false;
		}

		return gear.contains(ItemID.FLETCHING_KNIFE);
	}

}
package com.github.calebwhiting.runelite.plugins.actionprogress;

import com.github.calebwhiting.runelite.api.InventoryManager;
import com.google.inject.Inject;
import com.google.inject.Singleton;

@Singleton
public class ActionUtils
{

	@Inject private InventoryManager inventoryManager;

	public int getActionsUntilFull(int nCreatePerAction, int nDestroyPerAction)
	{
		int freeSlots = this.inventoryManager.getFreeSpaces();
		int diffPerAction = (nCreatePerAction - nDestroyPerAction);
		if (diffPerAction <= 0) {
			return Integer.MAX_VALUE;
		}
		return (freeSlots / diffPerAction) + (freeSlots % nCreatePerAction == 0 ? 0 : 1);
	}

}

package com.github.calebwhiting.runelite.plugins.actionprogress;

import net.runelite.client.config.*;

import java.awt.Color;

@ConfigGroup("actionprogress")
public interface ActionProgressConfig extends Config
{

	@ConfigSection(
			name = "Cooking actions",
			description = "Enable/Disable cooking specific actions.",
			position = 7
	) String COOKING = "Cooking actions";
	@ConfigSection(
			name = "Smithing actions",
			description = "Enable/Disable smithing specific actions.",
			position = 8
	) String SMITHING = "Smithing actions";
	@ConfigSection(
			name = "Crafting actions",
			description = "Enable/Disable crafting specific actions.",
			position = 9
	) String CRAFTING = "Crafting actions";
	@ConfigSection(
			name = "Fletching actions",
			description = "Enable/Disable fletching specific actions.",
			position = 10
	) String FLETCHING = "Fletching actions";
	@ConfigSection(
			name = "Herblore actions",
			description = "Enable/Disable herblore specific actions.",
			position = 11
	) String HERBLORE = "Herblore actions";
	@ConfigSection(
			name = "Magic actions",
			description = "Enable/Disable magic specific actions.",
			position = 12
	) String MAGIC = "Magic actions";

	@ConfigSection(
			name = "Woodcutting actions",
			description = "Enable/Disable woodcutting specific actions.",
			position = 13
	) String WOODCUTTING = "Woodcutting actions";
	@ConfigSection(
			name = "Farming actions",
			description = "Enable/Disable Farming actions.",
			position = 14
	) String FARMING = "Farming actions";
	@ConfigSection(
			name = "Tempoross actions",
			description = "Enable/Disable tempoross specific actions.",
			position = 15
	) String TEMPOROSS = "Tempoross actions";
	@ConfigSection(
			name = "Wintertodt actions (not yet supported)",
			description = "Enable/Disable wintertodt specific actions.",
			position = 16,
			closedByDefault = true
	) String WINTERTODT = "Wintertodt actions";
	@ConfigSection(
			name = "Guardian of the Rift actions",
			description = "Enable/Disable guardian of the rift specific actions.",
			position = 17
	) String GUARDIAN_OF_THE_RIFT = "Guardian of the Rift actions";
	@ConfigSection(
			name = "Miscellaneous actions",
			description = "Enable/Disable miscellaneous actions.",
			position = 18
	) String MISCELLANEOUS = "Miscellaneous actions";

	@ConfigItem(
			name = "Show ticks instead of seconds",
			keyName = "use-ticks",
			description = "Enable/Disable the usage of ticks when displaying the progress bar.",
			position = 0
	)
	default boolean useTicks()
	{
		return false;
	}

	@ConfigItem(
			name = "Notify when finished",
			keyName = "notify-when-finished",
			description = "Enable/Disable notifications when actions are completed or interrupted.",
			position = 1
	)
	default Notification notifyWhenFinished()
	{
		return Notification.OFF;
	}

	@ConfigItem(
			name = "Smooth progress bar",
			keyName = "smooth-progress-bar",
			description = "Enable/Disable smooth progress bar.",
			position = 2
	)
	default boolean smoothProgressBar()
	{
		return true;
	}

	@ConfigItem(
			name = "Product icons",
			keyName = "show-product-icons",
			description = "When enabled, show the product icon in the infobox where available. " +
						  "Otherwise fallback to skill icons.",
			position = 3
	)
	default boolean showProductIcons()
	{
		return true;
	}

	@ConfigItem(
			name = "Ignore single actions",
			keyName = "ignore-single-actions",
			description = "Ignore single actions",
			position = 4
	)
	default boolean ignoreSingleActions()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
			name = "Progress left color",
			keyName = "progress-left-color",
			description = "Color to be used to display the remaining actions on the progress bar",
			position = 5
	)
	default Color progressLeftColor()
	{
		return new Color(255, 52, 52, 100);
	}

	@Alpha
	@ConfigItem(
			name = "Progress done color",
			keyName = "progress-done-color",
			description = "Color to be used to display the completed actions on the progress bar",
			position = 6
	)
	default Color progressDoneColor()
	{
		return new Color(0, 255, 52, 100);
	}

	@ConfigItem(
			name = "Cooking",
			keyName = "cooking.cooking",
			description = "Enable/Disable monitoring cooking.",
			section = COOKING
	)
	default boolean cookingCooking()
	{
		return true;
	}

	@ConfigItem(
			name = "Mixing wine",
			keyName = "cooking.mix-wine",
			description = "Enable/Disable monitoring mixing wine.",
			section = COOKING
	)
	default boolean cookingMixWines()
	{
		return true;
	}

	@ConfigItem(
			name = "Mixing pastry",
			keyName = "cooking.mix-pastry",
			description = "Enable/Disable monitoring mixing pastry.",
			section = COOKING
	)
	default boolean cookingMixPastry()
	{
		return true;
	}

	@ConfigItem(
			name = "Topping pizza",
			keyName = "cooking.top-pizza",
			description = "Enable/Disable monitoring topping pizza.",
			section = COOKING
	)
	default boolean cookingTopPizza()
	{
		return true;
	}

	@ConfigItem(
			name = "Cutting fruit",
			keyName = "cooking.slicing",
			description = "Enable/Disable monitoring cutting fruit.",
			section = COOKING
	)
	default boolean cookingCutFruit()
	{
		return true;
	}

	@ConfigItem(
			name = "Dairy churning",
			keyName = "cooking.churning",
			description = "Enable/Disable monitoring churning dairy products.",
			section = COOKING
	)
	default boolean cookingChurning()
	{
		return true;
	}

	@ConfigItem(
			name = "Smelting Items",
			keyName = "smithing.smelting",
			description = "Enable/Disable monitoring smelting.",
			section = SMITHING
	)
	default boolean smithSmelting()
	{
		return true;
	}

	@ConfigItem(
			name = "Smithing Items",
			keyName = "smithing.smithing",
			description = "Enable/Disable monitoring smithing items.",
			section = SMITHING
	)
	default boolean smithSmithing()
	{
		return true;
	}

	@ConfigItem(
			name = "Cannonballs",
			keyName = "smithing.cannonballs",
			description = "Enable/Disable monitoring casting cannonballs",
			section = SMITHING
	)
	default boolean smithCannonballs()
	{
		return true;
	}

	@ConfigItem(
			name = "Casting gold & silver",
			keyName = "crafting.cast-gold-and-silver",
			description = "Enable/Disable monitoring casting gold & silver items.",
			section = CRAFTING
	)
	default boolean craftCastGoldAndSilver()
	{
		return true;
	}

	@ConfigItem(
			name = "Creating molten glass",
			keyName = "crafting.molten-glass",
			description = "Enable/Disable monitoring creating molten glass.",
			section = CRAFTING
	)
	default boolean craftMakeMoltenGlass()
	{
		return true;
	}

	@ConfigItem(
			name = "Glassblowing",
			keyName = "crafting.glassblowing",
			description = "Enable/Disable monitoring glassblowing.",
			section = CRAFTING
	)
	default boolean craftGlassblowing()
	{
		return true;
	}

	@ConfigItem(
			name = "Stringing jewellery",
			keyName = "crafting.string",
			description = "Enable/Disable monitoring stringing jewellery.",
			section = CRAFTING
	)
	default boolean craftStringJewellery()
	{
		return true;
	}

	@ConfigItem(
			name = "Cutting gems",
			keyName = "crafting.gems",
			description = "Enable/Disable monitoring cutting gems.",
			section = CRAFTING
	)
	default boolean craftCutGems()
	{
		return true;
	}

	@ConfigItem(
			name = "Leather-working",
			keyName = "crafting.leather",
			description = "Enable/Disable monitoring leather-working.",
			section = CRAFTING
	)
	default boolean craftLeatherWorking()
	{
		return true;
	}

	@ConfigItem(
			name = "Battlestaves",
			keyName = "crafting.battlestaves",
			description = "Enable/Disable monitoring attaching orbs to battlestaves.",
			section = CRAFTING
	)
	default boolean craftBattlestaves()
	{
		return true;
	}

	
	@ConfigItem(
			name = "Weaving",
			keyName = "crafting.waeving",
			description = "Enable/Disable monitoring for items crafted at a loom.",
			section = CRAFTING
	)
	default boolean craftWeaving()
	{
		return true;
	}

	@ConfigItem(
			name = "Making shields",
			keyName = "crafting.shields",
			description = "Enable/Disable monitoring for crafting wooden shields into leather shields.",
			section = CRAFTING
	)
	default boolean craftShields()
	{
		return true;
	}

	@ConfigItem(
			name = "Making amethyst heads and tips",
			keyName = "crafting.headsAndTips",
			description = "Enable/Disable monitoring for crafting amethyst heads and tips.",
			section = CRAFTING
	)
	default boolean craftHeadsAndTips()
	{
		return true;
	}

	@ConfigItem(
			name = "Wetting clay",
			keyName = "crafting.wettingClay",
			description = "Enable/Disable monitoring for wetting clay.",
			section = CRAFTING
	)
	default boolean craftWettingClay()
	{
		return true;
	}

	@ConfigItem(
			name = "Arrows & bolts",
			keyName = "fletching.ammunition",
			description = "Enable/Disable monitoring fletching arrows & bolts.",
			section = FLETCHING
	)
	default boolean fletchArrowsAndBolts()
	{
		return true;
	}

	@ConfigItem(
			name = "Making bows",
			keyName = "fletching.bows",
			description = "Enable/Disable monitoring cutting & stringing bows.",
			section = FLETCHING
	)
	default boolean fletchBows()
	{
		return true;
	}

	@ConfigItem(
			name = "Making crossbows",
			keyName = "fletching.crossbows",
			description = "Enable/Disable monitoring cutting & stringing crossbows.",
			section = FLETCHING
	)
	default boolean fletchCrossbows()
	{
		return true;
	}

	@ConfigItem(
			name = "Spinning flax",
			keyName = "fletching.spinning",
			description = "Enable/Disable monitoring spinning flax into bowstring.",
			section = FLETCHING
	)
	default boolean fletchSpinning()
	{
		return true;
	}

	@ConfigItem(
			name = "Making shields",
			keyName = "fletching.shields",
			description = "Enable/Disable monitoring cutting logs into shields.",
			section = FLETCHING
	)
	default boolean fletchShields()
	{
		return true;
	}

	@ConfigItem(
			name = "Making hiking staves",
			keyName = "fletching.hikingStaves",
			description = "Enable/Disable monitoring cutting logs into hiking staves.",
			section = FLETCHING
	)
	default boolean fletchHikingStaves()
	{
		return true;
	}


	@ConfigItem(
			name = "Making javelins",
			keyName = "fletching.javelins",
			description = "Enable/Disable monitoring attaching heads on javelin shafts.",
			section = FLETCHING
	)
	default boolean fletchJavelin()
	{
		return true;
	}

	@ConfigItem(
			name = "Herb cleaning",
			keyName = "herblore.cleaning",
			description = "Enable/Disable monitoring herb cleaning.",
			section = HERBLORE
	)
	default boolean herbCleaning()
	{
		return true;
	}

	@ConfigItem(
			name = "Mixing potions",
			keyName = "herblore.potions",
			description = "Enable/Disable monitoring mixing potions.",
			section = HERBLORE
	)
	default boolean herbPotions()
	{
		return true;
	}

	@ConfigItem(
			name = "Chemistry amulet",
			keyName = "herblore.chemistry",
			description = "Stop when chemistry amulet breaks.",
			section = HERBLORE
	)
	default boolean herbChemistry()
	{
		return true;
	}

	@ConfigItem(
			name = "Mixing tar",
			keyName = "herblore.tar",
			description = "Enable/Disable monitoring mixing tar.",
			section = HERBLORE
	)
	default boolean herbTar()
	{
		return true;
	}

	@ConfigItem(
			name = "Enchant jewellery spells",
			keyName = "magic.enchant-jewellery",
			description = "Enable/Disable monitoring jewellery enchantment spells.",
			section = MAGIC
	)
	default boolean magicEnchantJewellery()
	{
		return true;
	}

	@ConfigItem(
			name = "Charge orb spells",
			keyName = "magic.charge-orbs",
			description = "Enable/Disable monitoring charge obs spells.",
			section = MAGIC
	)
	default boolean magicChargeOrbs()
	{
		return true;
	}

	@ConfigItem(
			name = "String jewellery spell",
			keyName = "magic.string-jewellery",
			description = "Enable/Disable monitoring string jewellery spell.",
			section = MAGIC
	)
	default boolean magicStringJewellery()
	{
		return true;
	}

	@ConfigItem(
			name = "Plank make spell",
			keyName = "magic.plank-make",
			description = "Enable/Disable monitoring plank make spell.",
			section = MAGIC
	)
	default boolean magicPlankMake()
	{
		return true;
	}

	@ConfigItem(
			name = "Enchant bolt spells",
			keyName = "magic.enchant-bolts",
			description = "Enable/Disable monitoring bolt enchantment spells.",
			section = MAGIC
	)
	default boolean magicEnchantBolts()
	{
		return true;
	}

	@ConfigItem(
			name = "Creating tablets",
			keyName = "magic.tablets",
			description = "Enable/Disable monitoring creating magic tablets at a lectern.",
			section = MAGIC
	)
	default boolean magicTablets()
	{
		return true;
	}

	@ConfigItem(
			name = "Creating forester's ration",
			keyName = "woodcutting.rations",
			description = "Enable/Disable monitoring creating forester's ration.",
			section = WOODCUTTING
	)
	default boolean forestersRation() { return true; }

	@ConfigItem(
			name = "Creating ultracompost",
			keyName = "farming.ultracompost",
			description = "Enable/Disable monitoring for creating ultracompost.",
			section = FARMING
	)
	default boolean farmUltraCompost()
	{
		return true;
	}

	@ConfigItem(
			name = "Cooking",
			keyName = "tempoross.cooking",
			description = "Enable/Disable monitoring tempoross cooking.",
			section = TEMPOROSS
	)
	default boolean temporossCooking()
	{
		return true;
	}

	@ConfigItem(
			name = "Firing",
			keyName = "tempoross.firing",
			description = "Enable/Disable monitoring tempoross firing.",
			section = TEMPOROSS
	)
	default boolean temporossFiring()
	{
		return true;
	}

	@ConfigItem(
			name = "Reward pool",
			keyName = "tempoross.reward-pool",
			description = "Enable/Disable monitoring tempoross reward pool.",
			section = TEMPOROSS
	)
	default boolean temporossRewardPool()
	{
		return true;
	}

	@ConfigItem(
			name = "Woodcutting",
			keyName = "wintertodt.woodcutting",
			description = "Enable/Disable monitoring wintertodt woodcutting.",
			section = WINTERTODT
	)
	default boolean wintertodtWoodcutting()
	{
		return true;
	}

	@ConfigItem(
			name = "Burning",
			keyName = "wintertodt.burning",
			description = "Enable/Disable monitoring wintertodt burning.",
			section = WINTERTODT
	)
	default boolean wintertodtLighting()
	{
		return true;
	}

	@ConfigItem(
			name = "Fletching",
			keyName = "wintertodt.fletching",
			description = "Enable/Disable monitoring wintertodt fletching.",
			section = WINTERTODT
	)
	default boolean wintertodtFletching()
	{
		return true;
	}

	@ConfigItem(
			name = "Crafting guardian essences",
			keyName = "guardianOfTheRift.crafting",
			description = "Enable/Disable monitoring Guardian of the Rift crafting.",
			section = GUARDIAN_OF_THE_RIFT
	)
	default boolean guardianOfTheRiftCrafting()
	{
		return true;
	}

	@ConfigItem(
			name = "Reward pool",
			keyName = "guardianOfTheRift.reward-pool",
			description = "Enable/Disable monitoring Guardian of the Rift reward pool.",
			section = GUARDIAN_OF_THE_RIFT
	)
	default boolean guardianOfTheRiftRewardPool()
	{
		return true;
	}

	@ConfigItem(
			name = "Collecting sand",
			keyName = "misc.collect-sand",
			description = "Enable/Disable monitoring collecting sand.",
			section = MISCELLANEOUS
	)
	default boolean collectSand()
	{
		return true;
	}

	@ConfigItem(
			name = "Grinding items",
			keyName = "misc.grinding",
			description = "Enable/Disable monitoring grinding items.",
			section = MISCELLANEOUS
	)
	default boolean grinding()
	{
		return true;
	}

	@ConfigItem(
			name = "Tending to campfire",
			keyName = "misc.campfire",
			description = "Enable/Disable monitoring campfire tending.",
			section = MISCELLANEOUS
	)
	default boolean campfire()
	{
		return true;
	}

}

package com.github.calebwhiting.runelite.plugins.actionprogress.event;

import com.github.calebwhiting.runelite.plugins.actionprogress.Action;

public class ActionStartedEvent extends GameActionEvent
{

	public ActionStartedEvent(Action action, int productId, int actionCount, int startTick, int endTick)
	{
		super(action, productId, actionCount, startTick, endTick);
	}

}

package com.github.calebwhiting.runelite.plugins.actionprogress.event;

import com.github.calebwhiting.runelite.plugins.actionprogress.Action;
import lombok.Data;

@Data
public abstract class GameActionEvent
{

	private final Action action;

	private final int productId;

	private final int actionCount;

	private final int startTick;

	private final int endTick;

}

package com.github.calebwhiting.runelite.plugins.actionprogress.event;

import com.github.calebwhiting.runelite.plugins.actionprogress.Action;
import lombok.Getter;

@Getter
public class ActionStoppedEvent extends GameActionEvent
{

	private final boolean interrupted;

	public ActionStoppedEvent(
			Action action, int productId, int actionCount, int startTick, int endTick, boolean interrupted)
	{
		super(action, productId, actionCount, startTick, endTick);
		this.interrupted = interrupted;
	}

}

package com.github.calebwhiting.runelite.data;

import com.github.calebwhiting.runelite.plugins.actionprogress.detect.WintertodtDetector;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.Field;
import java.util.Arrays;

public class DataVerifyTest
{

	private static final Logger log = LoggerFactory.getLogger(DataVerifyTest.class);

	private static final String[] ARROW_TIP_MATERIALS = {
			"ONYX", "DRAGON(STONE)?", "DIAMOND", "RUNE", "RUBY", "EMERALD", "ADAMANT", "SAPPHIRE", "TOPAZ", "MITHRIL",
			"JADE", "STEEL", "IRON", "BRONZE", "BARBED", "PEARL", "OPAL", "BROAD", "AMETHYST", "SILVER", "RUNITE",
			"BLACK", "BLURITE", "OGRE", "KEBBIT"
	};

	private static final String[] JEWELLERY_MATERIALS = {
			"ZENYTE", "ONYX", "DRAGON(STONE)?", "DIAMOND", "RUBY", "EMERALD", "SAPPHIRE", "TOPAZ", "JADE", "OPAL",
			"GOLD"
	};

	private boolean failed;

	@Test
	public void verifyItemIdConstants()
	{
		this.verify(Fletching.class, "BOLT_TIPS", IDQuery.ofItems().query(".*_BOLT_TIPS?"));
		this.verify(
				Fletching.class,
				"UNENCHANTED_BOLTS_AND_ARROWS",
				IDQuery.ofItems()
					   .query(String.format("(%s)_(ARROW(S)?|BOLT(S)?|BRUTAL)", String.join("|", ARROW_TIP_MATERIALS)))
		);
		this.verify(
				Crafting.class,
				"SAPPHIRE_AND_OPAL_JEWELLERY",
				IDQuery.ofItems().query("(SAPPHIRE|OPAL)_(RING|NECKLACE|BRACELET|AMULET)")
		);
		this.verify(
				Crafting.class,
				"EMERALD_JEWELLERY",
				IDQuery.ofItems().query("(EMERALD|JADE|PRENATURE)_(RING|NECKLACE|BRACELET|AMULET)")
		);
		this.verify(
				Crafting.class,
				"TOPAZ_AND_RUBY_JEWELLERY",
				IDQuery.ofItems().query("(RUBY|TOPAZ)_(RING|NECKLACE|BRACELET|AMULET)")
		);
		this.verify(
				Crafting.class,
				"DIAMOND_JEWELLERY",
				IDQuery.ofItems().query("DIAMOND_(RING|NECKLACE|BRACELET|AMULET)")
		);
		this.verify(
				Crafting.class,
				"DRAGONSTONE_JEWELLERY",
				IDQuery.ofItems().query("DRAGON(STONE)?_(RING|NECKLACE|BRACELET|AMULET)")
		);
		this.verify(
				Crafting.class,
				"ONYX_JEWELLERY",
				IDQuery.ofItems().query("ONYX_(RING|NECKLACE|BRACELET|AMULET)")
		);
		this.verify(
				Crafting.class,
				"ZENYTE_JEWELLERY",
				IDQuery.ofItems().query("ZENYTE_(RING|NECKLACE|BRACELET|AMULET)")
		);
		this.verify(
				Crafting.class,
				"SILVER_AND_GOLD_ITEMS",
				IDQuery.ofItems()
					   // Gold Jewellery
					   .query(String.format(
							   "(%s)_(BRACELET|AMULET_U|NECKLACE|RING)",
							   String.join("|", JEWELLERY_MATERIALS)
					   ))
					   // Silver
					   .query("UNSTRUNG_(SYMBOL|EMBLEM)|TIARA|SILVER_" +
							  "(SICKLE|BOLTS_UNF)")
					   // Misc
					   .query("CONDUCTOR|DEMONIC_SIGIL|SILVTHRILL_ROD")
		);
		this.verify(WintertodtDetector.class, "WOODCUTTING_ANIMATIONS", IDQuery.ofAnimations().query("WOODCUTTING_" +
																									 ".*"));
	}

	public void verify(Class<?> c, String constantName, IDQuery query)
	{
		try {
			Field constant = c.getDeclaredField(constantName);
			Assert.assertSame("ID constants must be of type int[]", constant.getType(), int[].class);
			constant.setAccessible(true);
			int[] queryIds = query.ids();
			Arrays.sort(queryIds);
			int[] current = (int[]) constant.get(null);
			if (Arrays.equals(queryIds, current)) {
				log.info("Verified {}.{}", c.getCanonicalName(), constantName);
				return;
			}
			DataVerificationException.newInstance(c, constantName, query).printStackTrace();
			this.failed = true;
		} catch (ReflectiveOperationException e) {
			log.error("An error occurred", e);
		}
	}

	@Before
	public void init()
	{
		this.failed = false;
	}

	@After
	public void testFailure()
	{
		if (this.failed) {
			// we don't want to actually fail, just warn
			System.err.println("One or more constant is out-of-date");
		}
	}

}

package com.github.calebwhiting.runelite.data;

import net.runelite.api.*;
import net.runelite.api.widgets.InterfaceID;
import org.intellij.lang.annotations.Language;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Queries ID mapping classes (ItemID, NpcID, ObjectID, WidgetID, etc)
 */
public class IDQuery
{

	private static final LazyInitializer<IDQuery> ITEM_DATABASE = new LazyInitializer<IDQuery>()
	{
		@Override
		protected IDQuery create()
		{
			return new IDQuery(ItemID.class);
		}
	};

	private static final LazyInitializer<IDQuery> NPC_DATABASE = new LazyInitializer<IDQuery>()
	{
		@Override
		protected IDQuery create()
		{
			return new IDQuery(NpcID.class);
		}
	};

	private static final LazyInitializer<IDQuery> OBJECT_DATABASE = new LazyInitializer<IDQuery>()
	{
		@Override
		protected IDQuery create()
		{
			return new IDQuery(ObjectID.class);
		}
	};

	private static final LazyInitializer<IDQuery> WIDGET_DATABASE = new LazyInitializer<IDQuery>()
	{
		@Override
		protected IDQuery create()
		{
			return new IDQuery(InterfaceID.class);
		}
	};

	private static final LazyInitializer<IDQuery> SCRIPT_DATABASE = new LazyInitializer<IDQuery>()
	{
		@Override
		protected IDQuery create()
		{
			return new IDQuery(ScriptID.class);
		}
	};

	private static final LazyInitializer<IDQuery> ANIMATION_DATABASE = new LazyInitializer<IDQuery>()
	{
		@Override
		protected IDQuery create()
		{
			return new IDQuery(AnimationID.class);
		}
	};

	private static final LazyInitializer<IDQuery> VARBIT_DATABASE = new LazyInitializer<IDQuery>()
	{
		@Override
		protected IDQuery create()
		{
			return new IDQuery(Varbits.class);
		}
	};

	private final Set<Integer> results;

	private final Map<String, Integer> nameToIdMap;

	private final Map<Integer, String> idToNameMap;

	private final Class<?> databaseClass;

	public IDQuery(Class<?> databaseClass)
	{
		this.nameToIdMap = new HashMap<>();
		this.idToNameMap = new HashMap<>();
		this.results = new HashSet<>();
		this.databaseClass = databaseClass;
		loadSymbols(databaseClass, this.nameToIdMap, this.idToNameMap);
	}

	private IDQuery(
			Map<String, Integer> nameToIdMap,
			Map<Integer, String> idToNameMap,
			Set<Integer> results,
			Class<?> databaseClass)
	{
		this.nameToIdMap = nameToIdMap;
		this.idToNameMap = idToNameMap;
		this.results = results;
		this.databaseClass = databaseClass;
	}

	public static IDQuery ofItems()
	{
		return ITEM_DATABASE.get().copy();
	}

	public static IDQuery ofNPCs()
	{
		return NPC_DATABASE.get().copy();
	}

	public static IDQuery ofObjects()
	{
		return OBJECT_DATABASE.get().copy();
	}

	public static IDQuery ofAnimations()
	{
		return ANIMATION_DATABASE.get().copy();
	}

	public static IDQuery ofVarbits()
	{
		return VARBIT_DATABASE.get().copy();
	}

	public static IDQuery ofWidgets()
	{
		return WIDGET_DATABASE.get().copy();
	}

	public static IDQuery ofScripts()
	{
		return SCRIPT_DATABASE.get().copy();
	}

	private static void loadSymbols(
			Class<?> databaseClass, Map<String, Integer> nameToIdMap, Map<Integer, String> idToNameMap)
	{
		Field[] fields = databaseClass.getFields();
		for (Field field : fields) {
			if ((field.getModifiers() & Modifier.STATIC) == 0) {
				continue;
			}
			if (field.getType() != int.class) {
				continue;
			}
			try {
				int value = field.getInt(null);
				nameToIdMap.put(field.getName(), value);
				idToNameMap.put(value, field.getName());
			} catch (ReflectiveOperationException ignore) {
			}
		}
	}

	public Class<?> getDatabaseClass()
	{
		return this.databaseClass;
	}

	public IDQuery query(@Language("RegExp") String regex)
	{
		return this.query(Pattern.compile(regex), true);
	}

	public IDQuery query(@Language("RegExp") String regex, boolean stripNumberSuffix)
	{
		return this.query(Pattern.compile(regex), stripNumberSuffix);
	}

	private boolean matchQuery(Matcher matcher, boolean stripNumberSuffix, String name)
	{
		String stripped = stripNumberSuffix ? name.replaceAll("_[0-9]*$", "") : name;
		matcher.reset(stripped);
		return matcher.matches();
	}

	public IDQuery query(Pattern regex)
	{
		return this.query(regex, true);
	}

	public IDQuery query(Pattern regex, boolean stripNumberSuffix)
	{
		Matcher matcher = regex.matcher("");
		Set<Integer> results = new HashSet<>(this.results);
		this.nameToIdMap.entrySet()
						.stream()
						.filter(s -> this.matchQuery(matcher, stripNumberSuffix, s.getKey()))
						.map(Map.Entry::getValue)
						.forEach(results::add);
		return new IDQuery(this.nameToIdMap, this.idToNameMap, results, this.databaseClass);
	}

	public String getNameString(int id)
	{
		return this.idToNameMap.get(id);
	}

	public IDs results()
	{
		return new IDs(this.results);
	}

	public int[] ids()
	{
		return this.results().build();
	}

	public IDQuery copy()
	{
		return new IDQuery(this.nameToIdMap, this.idToNameMap, new HashSet<>(this.results), this.databaseClass);
	}

}

package com.github.calebwhiting.runelite.data;

import java.util.Arrays;

public class DataVerificationException extends RuntimeException
{

	public DataVerificationException(Class<?> declaringClass, String message)
	{
		super(message);
		this.setStackTrace(new StackTraceElement[]{
				new StackTraceElement(declaringClass.getName(), "<clinit>",
						declaringClass.getName().replace('.', '/') + ".java", 0
				)
		});
	}

	public static DataVerificationException newInstance(Class<?> declaringClass, String constantName, IDQuery query)
	{
		StringBuilder msg = new StringBuilder();
		msg.append("int[] ").append(constantName).append(" = {").append('\n');
		int[] ids = query.ids();
		Arrays.sort(ids);
		for (int i = 0; i < ids.length; i++) {
			msg.append("\t")
			   .append(query.getDatabaseClass().getSimpleName())
			   .append('.')
			   .append(query.getNameString(ids[i]));
			if (i < ids.length - 1) {
				msg.append(",");
			}
			msg.append("\n");
		}
		msg.append("}");
		return new DataVerificationException(declaringClass, msg.toString());
	}

}

package com.github.calebwhiting.runelite.data;

public abstract class LazyInitializer<T>
{

	private boolean initialized = false;

	private T value;

	public T get()
	{
		if (!this.initialized) {
			this.value = this.create();
			this.initialized = true;
		}
		return this.value;
	}

	protected abstract T create();

}

package com.github.calebwhiting.runelite;

import com.github.calebwhiting.runelite.dev.ActionDiagnosticsPlugin;
import com.github.calebwhiting.runelite.plugins.actionprogress.ActionProgressPlugin;
import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

@SuppressWarnings("unchecked")
public class ActionProgressPluginTest
{

	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ActionProgressPlugin.class, ActionDiagnosticsPlugin.class);
		RuneLite.main(args);
	}

}
package com.github.calebwhiting.runelite.dev;

import net.runelite.api.Skill;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("actiondiagnostics")
public interface ActionDiagnosticsConfig extends Config
{

	@ConfigSection(
			name = "Experience Trigger Input",
			description = "Which experience drops should be used as a trigger",
			position = 4
	) String experienceTriggerInput = "Experience Trigger Input";
	@ConfigSection(
			name = "Inventory Trigger Input",
			description = "Which item should be used as a trigger",
			position = 5
	) String inventoryTriggerInput = "Inventory Trigger Input";
	@ConfigSection(
			name = "Inventory Stack Trigger Input",
			description = "Which item should be used as a trigger",
			position = 6
	) String inventoryStackTriggerInput = "Inventory Stack Trigger Input";

	@ConfigItem(
			name = "History capacity",
			description = "The amount of events to remember",
			keyName = "history-capacity",
			position = 1
	)
	default int capacity()
	{
		return 50000;
	}

	@ConfigItem(
			name = "Trigger",
			description = "What will be the indicator that an action has happened",
			keyName = "action-trigger",
			position = 1
	)
	default Trigger trigger()
	{
		return Trigger.EXPERIENCE;
	}

	@ConfigItem(
			name = "Action ticks",
			description = "How many ticks the action takes",
			keyName = "action-ticks",
			position = 2
	)
	default int ticks()
	{
		return 3;
	}

	@ConfigItem(
			name = "Unique events",
			description = "Only show unique events",
			keyName = "unique-events",
			position = 3
	)
	default boolean onlyUniqueEvents()
	{
		return false;
	}

	@ConfigItem(
			name = "Skill",
			keyName = "experience.skill",
			description = "Which skill will be used as a trigger",
			section = experienceTriggerInput
	)
	default Skill experienceTriggerSkill()
	{
		return Skill.OVERALL;
	}

	@ConfigItem(
			name = "Experience Size",
			keyName = "experience.amount",
			description = "The exact size of the experience drop to use as a trigger",
			section = experienceTriggerInput
	)
	default int experienceTriggerSize()
	{
		return 0;
	}

	@ConfigItem(
			name = "Item ID",
			keyName = "inventory.item-id",
			description = "The item ID to use as a trigger",
			section = inventoryTriggerInput
	)
	default int inventoryTriggerItemId()
	{
		return 0;
	}

	@ConfigItem(
			name = "Item ID",
			keyName = "inventory-stack.item-id",
			description = "The item ID to use as a trigger",
			section = inventoryStackTriggerInput
	)
	default int inventoryStackTriggerItemId()
	{
		return 0;
	}

}

package com.github.calebwhiting.runelite.dev;

import com.github.calebwhiting.runelite.api.event.DestinationChanged;
import com.github.calebwhiting.runelite.api.event.LocalRegionChanged;
import com.github.calebwhiting.runelite.data.IDQuery;
import com.github.calebwhiting.runelite.plugins.actionprogress.ActionProgressPlugin;
import com.google.inject.Inject;
import com.google.inject.Provides;
import net.runelite.api.*;
import net.runelite.api.annotations.Varbit;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.PluginDescriptor;
import org.apache.commons.text.WordUtils;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

@PluginDescriptor(
		name = "Action Diagnostics",
		description = "A tool to find action triggers.",
		developerPlugin = true,
		enabledByDefault = false
)
@PluginDependency(ActionProgressPlugin.class)
public class ActionDiagnosticsPlugin extends Plugin
{
	private LinkedList<HistoricEvent> history;

	@Inject private Client client;

	@Inject private ActionDiagnosticsConfig config;

	private IDQuery clientScriptsQuery;

	private int lastTriggerTick = 0;

	private int[] pClientVars;

	private HashMap<Integer, Item[]> inventoryMap;

	private static String getItemName(int id)
	{
		String name = IDQuery.ofItems().getNameString(id);
		return name == null ? String.valueOf(id) : name;
	}

	@Override
	protected void startUp()
	{
		IDQuery.ofScripts();
		this.history = new LinkedList<>();
		this.clientScriptsQuery = new IDQuery(ClientScriptID.class);
		this.pClientVars = this.client.getVarps().clone();
		this.inventoryMap = new HashMap<>();
		for (InventoryID iid : InventoryID.values()) {
			ItemContainer container = this.client.getItemContainer(iid);
			if (container == null) {
				continue;
			}
			Item[] curr = new Item[container.size()];
			for (int i = 0; i < container.size(); i++) {
				curr[i] = container.getItem(i);
			}
			this.inventoryMap.put(iid.getId(), curr);
		}
	}

	@Override
	protected void shutDown() throws Exception
	{
		super.shutDown();
		this.history.clear();
		this.history = null;
		this.clientScriptsQuery = null;
		this.pClientVars = null;
		this.inventoryMap.clear();
	}

	@Provides
	ActionDiagnosticsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ActionDiagnosticsConfig.class);
	}

	private void push(String event)
	{
		if (this.history.size() >= this.config.capacity()) {
			this.history.remove();
		}
		HistoricEvent historic = new HistoricEvent(this.client.getTickCount(), event);
		this.history.add(historic);
	}

	private void push(String eventId, Object... args)
	{
		if (args.length % 2 != 0) {
			throw new IllegalArgumentException();
		}
		StringBuilder data = new StringBuilder();
		for (int i = 0; i < args.length; i += 2) {
			if (i > 0) {
				data.append(", ");
			}
			String s;
			Object key = args[i];
			Object value = args[i + 1];
			switch (value == null ? "" : value.getClass().getSimpleName()) {
				case "LocalPoint": {
					LocalPoint localPoint = (LocalPoint) value;
					s = String.format("(%d, %d)", localPoint.getX(), localPoint.getY());
					break;
				}
				case "WorldPoint": {
					WorldPoint worldPoint = (WorldPoint) value;
					s = String.format("(%d, %d, %d)", worldPoint.getX(), worldPoint.getY(), worldPoint.getPlane());
					break;
				}
				default:
					s = String.valueOf(value);
					break;
			}
			data.append(key).append("=\"").append(s).append("\"");
		}
		this.push(String.format("%-20s %s", eventId, data));
	}

	private void trigger()
	{
		int tick = this.client.getTickCount();
		int targetTick = tick - this.config.ticks();
		List<HistoricEvent> events = new LinkedList<>(this.history);
		Map<Object, Integer> eventCounts = new LinkedHashMap<>();
		events.stream().filter(Objects::nonNull).forEach(event ->
		{
			if (event.getTick() == targetTick) {
				int previous = eventCounts.getOrDefault(
						event.getEvent(), 0);
				eventCounts.put(event.getEvent(), previous + 1);
			}
		});
		System.out.println("[" + tick + "] triggered");
		eventCounts.keySet().forEach(event ->
		{
			boolean unique = true;
			for (HistoricEvent e : events) {
				if (e.getTick() != targetTick && e.getTick() > this.lastTriggerTick) {
					if (Objects.equals(event, e.getEvent())) {
						unique = false;
						break;
					}
				}
			}
			if (!unique && this.config.onlyUniqueEvents()) {
				return;
			}
			System.out.println("[" + tick + "] " + (unique ? "[*]" : "   ") + "[" +
							   eventCounts.get(event) + "] " + event);
		});
		this.lastTriggerTick = tick;
	}

	@Subscribe
	public void onDestinationChanged(DestinationChanged evt)
	{
		this.push("destination-change", "from", evt.getFrom(), "to", evt.getTo());
	}

	@Subscribe
	public void onLocalRegionChanged(LocalRegionChanged evt)
	{
		this.push("region-changed", "from", evt.getFrom(), "to", evt.getTo());
	}

	@Subscribe
	public void onAnimationChanged(AnimationChanged evt)
	{
		Actor actor = evt.getActor();
		Player local = this.client.getLocalPlayer();
		String animation = IDQuery.ofAnimations().getNameString(actor.getAnimation());
		animation = animation == null ? String.valueOf(actor.getAnimation()) : animation;
		if (local != null && evt.getActor() == local) {
			this.push("animation", "src", "self", "id", animation);
		} else if (local instanceof NPC) {
			NPC npc = (NPC) actor;
			String name = IDQuery.ofNPCs().getNameString(npc.getId());
			name = name == null ? String.valueOf(npc.getId()) : name;
			this.push("animation", "src", "NPC:" + name, "id", animation);
		}
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged evt)
	{
		@Varbit
		int index = evt.getValue();
		if (this.client.getVarps()[index] == this.pClientVars[index]) {
			return;
		}
		String name = IDQuery.ofVarbits().getNameString(index);
		name = name == null ? String.valueOf(index) : name;
		this.push("varbit", "index", name, "from", this.pClientVars[index], "to", this.client.getVarbitValue(index));
		this.pClientVars[index] = this.client.getVarps()[index];
	}

	@Subscribe
	public void onScriptCallbackEvent(ScriptCallbackEvent evt)
	{
		Script script = evt.getScript();
		String instructions = script.getInstructions() == null ? "[]" :
							  IntStream.of(script.getInstructions())
									   .mapToObj(String::valueOf)
									   .collect(Collectors.joining(", ", "[", "]"));
		String operands = script.getIntOperands() == null ? "[]" :
						  IntStream.of(script.getIntOperands())
								   .mapToObj(String::valueOf)
								   .collect(Collectors.joining(", ", "[", "]"));
		this.push("script-callback", "name", evt.getEventName(), "instructions", instructions, "operands", operands);
	}

	@Subscribe
	public void onScriptPreFired(ScriptPreFired evt)
	{
		String name = this.clientScriptsQuery.getNameString(evt.getScriptId());
		name = name == null ? String.valueOf(evt.getScriptId()) : name;
		ScriptEvent se = evt.getScriptEvent();
		if (se != null) {
			Object[] args = se.getArguments();
			String argsString = Stream.of(args)
									  .skip(1)
									  .map(String::valueOf)
									  .collect(Collectors.joining(", ", "[", "]"));
			this.push("script-fire", "id", name, "src", se.getSource() == null ? -1 : se.getSource().getId(), "args",
					argsString, "op", se.getOp(), "op-base", se.getOpbase(), "mouse",
					String.format("(%d, %d)", se.getMouseX(), se.getMouseY()), "typed", se.getTypedKeyCode()
			);
		} else {
			this.push("script-begin", "id", name);
		}
	}

	@Subscribe
	public void onScriptPostFired(ScriptPostFired evt)
	{
		String name = this.clientScriptsQuery.getNameString(evt.getScriptId());
		name = name == null ? String.valueOf(evt.getScriptId()) : name;
		this.push("script-end", "id", name);
	}

	@Subscribe
	public void onWidgetClosed(WidgetClosed evt)
	{
		this.push("widget-closed", "group", evt.getGroupId(), "mode", evt.getModalMode(), "unload", evt.isUnload());
	}

	@Subscribe
	public void onChatMessage(ChatMessage evt)
	{
		this.push("chat-received", "type", WordUtils.capitalizeFully(evt.getType().name().replace('_', ' ')),
				"message",
				evt.getMessage()
		);
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked evt)
	{
		this.push("menu-option", "0", evt.getParam0(), "1", evt.getParam1(), "opt", evt.getMenuOption(), "target",
				evt.getMenuTarget(), "action", evt.getMenuAction(), "id", evt.getId(), "selected-index",
				this.client.getSelectedWidget().getId()
		);
	}

	@Subscribe
	public void onAreaSoundEffectPlayed(AreaSoundEffectPlayed evt)
	{
		this.push("area-sound-effect", "src", evt.getSource() == null ? "null" : evt.getSource().getName(), "id",
				evt.getSoundId(), "pos", String.format("(%d, %d)", evt.getSceneX(), evt.getSceneY()), "range",
				evt.getRange(), "delay", evt.getDelay()
		);
	}

	@Subscribe
	public void onStatChanged(StatChanged evt)
	{
		this.push("stat-changed", "skill", evt.getSkill(), "xp", evt.getXp(), "level", evt.getLevel(), "boost",
				evt.getBoostedLevel()
		);
		if (this.config.trigger() == Trigger.EXPERIENCE) {
			Skill triggerSkill = this.config.experienceTriggerSkill();
			int triggerSize = this.config.experienceTriggerSize();
			if (triggerSkill != Skill.OVERALL && triggerSkill != evt.getSkill()) {
				return;
			}
			if (triggerSize != 0 && evt.getXp() != triggerSize) {
				return;
			}
			this.trigger();
		}
	}

	@Subscribe
	public void onSoundEffectPlayed(SoundEffectPlayed evt)
	{
		this.push("sound-effect", "src", evt.getSource() == null ? "null" : evt.getSource().getName(), "id",
				evt.getSoundId(), "delay", evt.getDelay()
		);
	}

	@Subscribe
	public void onWidgetLoaded(WidgetLoaded evt)
	{
		this.push("widget-loaded", "group", evt.getGroupId());
	}

	@Subscribe
	public void onVarClientIntChanged(VarClientIntChanged evt)
	{
		@Varbit
		int index = evt.getIndex();
		if (this.client.getVarps()[index] == this.pClientVars[index]) {
			return;
		}
		String name = IDQuery.ofVarbits().getNameString(index);
		name = name == null ? String.valueOf(index) : name;
		this.push("int-var", "index", name, "value", this.client.getVarcIntValue(index));
		this.pClientVars[index] = this.client.getVarps()[index];
	}

	@Subscribe
	public void onVarClientStrChanged(VarClientStrChanged evt)
	{
		@Varbit
		int index = evt.getIndex();
		String name = IDQuery.ofVarbits().getNameString(index);
		name = name == null ? String.valueOf(index) : name;
		this.push("str-var", "id", name, "value", this.client.getVarcStrValue(index));
	}

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged evt)
	{
		ItemContainer container = evt.getItemContainer();
		this.push("item-change", "container", container.getId());
		Item[] prev = this.inventoryMap.get(container.getId());
		Item[] curr = new Item[container.size()];
		for (int i = 0; i < container.size(); i++) {
			curr[i] = container.getItem(i);
		}
		if (prev != null) {
			for (int i = 0; i < container.size(); i++) {
				Item a = i < prev.length ? prev[i] : null;
				Item b = i < curr.length ? curr[i] : null;
				if (!Objects.equals(a, b)) {
					this.push(
							"item-change",
							"container",
							evt.getContainerId(),
							"slot",
							i,
							"from-x",
							a == null ? 0 : a.getQuantity(),
							"from",
							a == null ? "null" : getItemName(a.getId()),
							"to-x",
							b == null ? 0 : b.getQuantity(),
							"to",
							b == null ? "null" : getItemName(b.getId())
					);
				}
			}
		}
		this.inventoryMap.put(container.getId(), curr);
	}

}

package com.github.calebwhiting.runelite.dev;

class HistoricEvent
{

	private final int tick;

	private final Object event;

	HistoricEvent(int tick, String event)
	{
		this.tick = tick;
		this.event = event;
	}

	public int getTick()
	{
		return this.tick;
	}

	public Object getEvent()
	{
		return this.event;
	}

	@Override
	public boolean equals(Object o)
	{
		if (this == o) {
			return true;
		}
		if (o == null || this.getClass() != o.getClass()) {
			return false;
		}
		HistoricEvent that = (HistoricEvent) o;
		return this.getTick() == that.getTick() && this.getEvent().equals(that.getEvent());
	}

	@Override
	public int hashCode()
	{
		int result = this.getTick();
		result = 31 * result + this.getEvent().hashCode();
		return result;
	}

}

package com.github.calebwhiting.runelite.dev;

import org.apache.commons.text.WordUtils;

public enum Trigger
{
	EXPERIENCE,
	INVENTORY_ITEM_ADD,
	INVENTORY_ITEM_REMOVE,
	INVENTORY_STACK_ADD,
	INVENTORY_STACK_REMOVE;

	@Override
	public String toString()
	{
		return WordUtils.capitalizeFully(this.name().replace('_', ' '));
	}
}

package com.github.calebwhiting.runelite.dev;

public interface ClientScriptID
{

	int CLIENTSCRIPT_TT_REWARDS_INIT = 0;
	int PROC_SETTINGS_WARNING_CARRALLANGAR_TELEPORT = 1;
	int PROC_HEX_TO_RGB = 2;
	int PROC_TARGET_WORLD = 3;
	int CLIENTSCRIPT_TT_REWARD_SELECTED_ONCLICK = 4;
	int CLIENTSCRIPT_TT_REWARD_SELECTED = 5;
	int CLIENTSCRIPT_WOM_TAB_INIT = 6;
	int PROC_TT_REWARD_HIGHLIGHT_SELECTED = 7;
	int PROC_TT_REWARD_SET_DESC = 8;
	int CLIENTSCRIPT_TT_REWARD_HIGHLIGHT = 9;
	int CLIENTSCRIPT_WOM_ITEM_MOVE = 10;
	int CLIENTSCRIPT_WOM_TAB_HIGHLIGHT = 11;
	int CLIENTSCRIPT_SCRIPT_12 = 12;
	int CLIENTSCRIPT_SCRIPT_13 = 13;
	int CLIENTSCRIPT_SCRIPT_14 = 14;
	int PROC_SCRIPT_15 = 15;
	int CLIENTSCRIPT_WOM_TAB_HIGHLIGHT_ONCLICK = 16;
	int CLIENTSCRIPT_WOM_ITEM_UPDATE = 17;
	int CLIENTSCRIPT_WOM_ITEM_HIDE = 18;
	int PROC_MAGIC_RUNECOUNT = 19;
	int PROC_MAGIC_TOSTRING = 20;
	int PROC_WOM_BUILD_ITEM_LIST = 21;
	int CLIENTSCRIPT_TT_REWARD_HIGHLIGHT_OFF = 22;
	int CLIENTSCRIPT_PVP_STORE_INIT = 23;
	int PROC_SCRIPT_24 = 24;
	int CLIENTSCRIPT_CLOSEBUTTON = 25;
	int PROC_CLOSEBUTTON_ACTION = 26;
	int CLIENTSCRIPT_CLOSEBUTTON_OVER = 27;
	int CLIENTSCRIPT_CLOSEBUTTON_LEAVE = 28;
	int CLIENTSCRIPT_CLOSEBUTTON_CLICK = 29;
	int CLIENTSCRIPT_SCROLLBAR_VERTICAL = 30;
	int PROC_SCROLLBAR_VERTICAL = 31;
	int CLIENTSCRIPT_SCROLLBAR_VERTICAL_UP = 32;
	int CLIENTSCRIPT_SCROLLBAR_VERTICAL_DOWN = 33;
	int CLIENTSCRIPT_SCROLLBAR_VERTICAL_JUMP = 34;
	int CLIENTSCRIPT_SCROLLBAR_VERTICAL_DRAG = 35;
	int CLIENTSCRIPT_SCROLLBAR_VERTICAL_WHEEL = 36;
	int PROC_SCROLLBAR_VERTICAL_DOSCROLL = 37;
	int CLIENTSCRIPT_ADDTOOLTIP = 38;
	int CLIENTSCRIPT_CAMERA_ZOOM = 39;
	int CLIENTSCRIPT_DELTOOLTIP = 40;
	int PROC_DELTOOLTIP_ACTION = 41;
	int PROC_CAMERA_DO_ZOOM = 42;
	int CLIENTSCRIPT_ZOOM_MOUSE_TOGGLE = 43;
	int CLIENTSCRIPT_GRAPHIC_SWAPPER = 44;
	int CLIENTSCRIPT_TEXT_COLOUR_SWAPPER = 45;
	int PROC_TOSTRING_SPACER = 46;
	int PROC_SCRIPT_47 = 47;
	int CLIENTSCRIPT_CC_COLOUR_TEMPORARILY = 48;
	int CLIENTSCRIPT_DOCHEAT = 49;
	int PROC_SETTINGS_WARNING_CARRALLANGAR_TABLET = 50;
	int CLIENTSCRIPT_PATTERN_NEXT_SETMODEL = 51;
	int CLIENTSCRIPT_PATTERN_CARDS_SETMODEL = 52;
	int CLIENTSCRIPT_TOL_PRESSURE_LEVERINIT = 53;
	int CLIENTSCRIPT_POH_OPTIONS_DRAWBUTTON = 54;
	int CLIENTSCRIPT_CHATBOX_KEYINPUT_INIT = 55;
	int PROC_AREA_TASK_COMPLETE = 56;
	int CLIENTSCRIPT_CHATBOX_KEYINPUT_LISTENER = 57;
	int CLIENTSCRIPT_CHATBOX_MULTI_INIT = 58;
	int PROC_CHATBOX_MULTI_ADDOPTION = 59;
	int CLIENTSCRIPT_DREAM_BANK_INIT = 60;
	int CLIENTSCRIPT_DREAM_CHEST_INIT = 61;
	int CLIENTSCRIPT_HP_HUD_UPDATE_BAR = 62;
	int CLIENTSCRIPT_SCROLLBAR_VERTICAL_GRAPHICS = 63;
	int CLIENTSCRIPT_SCRIPT_64 = 64;
	int CLIENTSCRIPT_SET_SPINNER = 65;
	int CLIENTSCRIPT_SPINNER = 66;
	int CLIENTSCRIPT_MODEL_SWAPPER = 67;
	int CLIENTSCRIPT_TEXT_SWAPPER = 68;
	int CLIENTSCRIPT_COMP_SETHIDE = 69;
	int CLIENTSCRIPT_TZHAAR_FIGHTPIT_FOESREMAINING = 70;
	int PROC_TOPLEVEL_SIDEBUTTON_OP = 71;
	int PROC_SCROLLBAR_RESIZE = 72;
	int CLIENTSCRIPT_CHATDEFAULT_ONKEY = 73;
	int PROC_ADD_TO_INPUTSTRING = 74;
	int PROC_CHATOUT_SCROLLUP = 75;
	int PROC_CHATOUT_SCROLLDOWN = 76;
	int PROC_CHATOUT_ADD = 77;
	int PROC_CHATOUT_SET = 78;
	int PROC_CHATOUT_GET = 79;
	int CLIENTSCRIPT_CHAT_ONSUBCHANGE = 80;
	int CLIENTSCRIPT_SCRIPT_81 = 81;
	int CLIENTSCRIPT_ORBS_UPDATE_PRAYER = 82;
	int CLIENTSCRIPT_SPLITPM_CHANGED = 83;
	int PROC_REBUILDCHATBOX = 84;
	int CLIENTSCRIPT_CC_COLOUR_SWAPPER = 85;
	int CLIENTSCRIPT_CHAT_OP = 86;
	int CLIENTSCRIPT_MACRO_PINBALL_SCORE = 87;
	int CLIENTSCRIPT_PRIVATE_OP = 88;
	int PROC_REBUILDPMBOX = 89;
	int PROC_FILTERTEST = 90;
	int PROC_PM_FILTERTEST = 91;
	int CLIENTSCRIPT_V2_STONE_BUTTON = 92;
	int CLIENTSCRIPT_V2_STONE_BUTTON_FILLED = 93;
	int CLIENTSCRIPT_V2_STONE_BUTTON_IN = 94;
	int PROC_CHAT_AUTOTYPER_UPDATEOP = 95;
	int PROC_CHAT_SENDPUBLIC = 96;
	int CLIENTSCRIPT_V2_STONE_BUTTON_OUT_FILLED = 97;
	int PROC_CREATE_GRAPHIC = 98;
	int CLIENTSCRIPT_DUEL_CHECK_BUTTON = 99;
	int CLIENTSCRIPT_DUEL_STAKE_VARTRANS = 100;
	int CLIENTSCRIPT_MESLAYER_CLOSE = 101;
	int PROC_MESLAYER_MODE1 = 102;
	int CLIENTSCRIPT_MESLAYER_MODE2 = 103;
	int CLIENTSCRIPT_MESLAYER_MODE3 = 104;
	int CLIENTSCRIPT_MESLAYER_MODE4 = 105;
	int CLIENTSCRIPT_MESLAYER_MODE5 = 106;
	int PROC_MESLAYER_MODE6 = 107;
	int CLIENTSCRIPT_MESLAYER_MODE7 = 108;
	int CLIENTSCRIPT_MESLAYER_MODE8 = 109;
	int CLIENTSCRIPT_MESLAYER_MODE9 = 110;
	int PROC_MESLAYER_MODE10 = 111;
	int CLIENTSCRIPT_MESLAYER_ONKEY = 112;
	int PROC_SCRIPT_113 = 113;
	int CLIENTSCRIPT_OCULUS_INIT = 114;
	int CLIENTSCRIPT_PATTERN_CARDS_SELECT_INIT = 115;
	int CLIENTSCRIPT_PATTERN_CARDS_SELECT_OP = 116;
	int CLIENTSCRIPT_PATTERN_CARDS_SELECT_UPDATE = 117;
	int CLIENTSCRIPT_QUESTSCROLL_INIT = 118;
	int CLIENTSCRIPT_COMPONENT_PULSE_START = 119;
	int PROC_PATTERN_CARDS_SELECT_UPDATE = 120;
	int CLIENTSCRIPT_PATTERN_CARDS_CONFIRM_INIT = 121;
	int CLIENTSCRIPT_COMPONENT_PULSE_TIMER = 122;
	int CLIENTSCRIPT_FRIEND_INIT = 123;
	int CLIENTSCRIPT_GROUPING_VIEWCHANNEL = 124;
	int PROC_FRIEND_UPDATE = 125;
	int CLIENTSCRIPT_FRIEND_OP = 126;
	int CLIENTSCRIPT_IGNORE_INIT = 127;
	int CLIENTSCRIPT_GROUPING_OFFSET = 128;
	int PROC_IGNORE_UPDATE = 129;
	int CLIENTSCRIPT_IGNORE_OP = 130;
	int CLIENTSCRIPT_CLOSEBUTTON_KEY = 131;
	int CLIENTSCRIPT_BARROWS_OVERLAY_INIT = 132;
	int CLIENTSCRIPT_SNAPSHOT_ONKEY = 133;
	int PROC_V2_STONE_BUTTON_FILLED = 134;
	int CLIENTSCRIPT_IF_SETTEXTFONT = 135;
	int CLIENTSCRIPT_ABYSSALSIRE_OVERSEER = 136;
	int CLIENTSCRIPT_ABYSSALSIRE_OVERSEER_UPDATE = 137;
	int CLIENTSCRIPT_MESLAYER_ONDIALOGABORT = 138;
	int CLIENTSCRIPT_RAIDS_PARTYDETAILS_AUTOREFRESH = 139;
	int CLIENTSCRIPT_BARROWS_OVERLAY_SIZE = 140;
	int PROC_GE_COLLECT_ALL_INIT = 141;
	int CLIENTSCRIPT_TRADE_CONFIRM_INIT = 142;
	int CLIENTSCRIPT_CAM_FORCEANGLE = 143;
	int CLIENTSCRIPT_BANK_DEPOSITBOX_INIT = 144;
	int CLIENTSCRIPT_BANK_DEPOSITBOX_UPDATE = 145;
	int PROC_BANK_DEPOSITBOX_UPDATE = 146;
	int PROC_SCRIPT_147 = 147;
	int PROC_SCRIPT_148 = 148;
	int CLIENTSCRIPT_INTERFACE_INV_INIT = 149;
	int CLIENTSCRIPT_INTERFACE_INV_INIT_BIG = 150;
	int CLIENTSCRIPT_INTERFACE_INV_UPDATE_BIG = 151;
	int CLIENTSCRIPT_CHAT_SET_FILTER = 152;
	int PROC_INTERFACE_INV_UPDATE_BIG = 153;
	int PROC_INTERFACE_INV_DRAW_SLOT_BIG = 154;
	int CLIENTSCRIPT_INTERFACE_INV_DRAGCOMPLETE_SWAP_BIG = 155;
	int CLIENTSCRIPT_INTERFACE_INV_DRAGCOMPLETE_SHUFFLE_BIG = 156;
	int PROC_SCROLLBAR_ONDRAG_DOSCROLL = 157;
	int CLIENTSCRIPT_INTERFACE_INVOTHER_INIT = 158;
	int CLIENTSCRIPT_INTERFACE_INVOTHER_UPDATE_BIG = 159;
	int PROC_INTERFACE_INVOTHER_UPDATE_BIG = 160;
	int PROC_INTERFACE_INVOTHER_DRAW_SLOT_BIG = 161;
	int CLIENTSCRIPT_INTERFACE_INV_DRAG_SLOT = 162;
	int CLIENTSCRIPT_CWS_TOGGLE = 163;
	int CLIENTSCRIPT_CWS_GRAPHIC_SWAP = 164;
	int CLIENTSCRIPT_CWS_GRAPHIC_SWAP_2 = 165;
	int PROC_CWS_CC_GETVAR = 166;
	int CLIENTSCRIPT_CWS_MOUSEOVER = 167;
	int PROC_BARROWS_OVERLAY_SIZE = 168;
	int CLIENTSCRIPT_KR_MOUSELEAVE_COLOUR = 169;
	int CLIENTSCRIPT_KR_TUMBLER_HEIGHT = 170;
	int CLIENTSCRIPT_KR_DISPLAY_RIDDLE = 171;
	int PROC_BANK_DEPOSITBOX_DRAWSLOT = 172;
	int CLIENTSCRIPT_SCRIPT_173 = 173;
	int PROC_SCRIPT_174 = 174;
	int CLIENTSCRIPT_CHAT_BUTTON_ONOP = 175;
	int PROC_SKILL_GUIDE_SUBSECTION_THIEVING = 176;
	int CLIENTSCRIPT_RAIDS_STORAGE_ITEMS_OP = 177;
	int PROC_REDRAW_CHAT_BUTTONS = 178;
	int PROC_CHAT_ALERT_GET = 179;
	int PROC_CHAT_ALERT_ENABLE = 180;
	int CLIENTSCRIPT_NTK_LAYOUT = 181;
	int CLIENTSCRIPT_CHAT_ALERT_FLASH = 182;
	int PROC_CHAT_ALERT_SET = 183;
	int PROC_CHAT_SET_FILTER = 184;
	int PROC_CHAT_GET_FILTER = 185;
	int CLIENTSCRIPT_COMBAT_INTERFACE_SP_REDRAW = 186;
	int PROC_COMBAT_INTERFACE_SP_REDRAW = 187;
	int CLIENTSCRIPT_COMBAT_INTERFACE_SP_UPDATEBAR = 188;
	int PROC_COMBAT_INTERFACE_SP_UPDATEBAR = 189;
	int CLIENTSCRIPT_PATCHY_PAGE_1 = 190;
	int CLIENTSCRIPT_PATCHY_PAGE_2 = 191;
	int PROC_CHATALERTS = 192;
	int PROC_PANETEST = 193;
	int CLIENTSCRIPT_JOINCHAT_ONOP = 194;
	int CLIENTSCRIPT_PATTERN_CARDS_CONFIRM_UPDATE = 195;
	int CLIENTSCRIPT_SCRIPT_196 = 196;
	int CLIENTSCRIPT_AGILITYARENA_REWARDS_INIT = 197;
	int PROC_V2_STONE_BUTTON_IN_FILLED = 198;
	int PROC_SCRIPT_199 = 199;
	int CLIENTSCRIPT_DISPLAYNAME_INIT = 200;
	int CLIENTSCRIPT_PET_INSURANCE_INSURED = 201;
	int CLIENTSCRIPT_SCRIPT_202 = 202;
	int PROC_SCRIPT_203 = 203;
	int CLIENTSCRIPT_DISPLAYNAME_DRAW = 204;
	int CLIENTSCRIPT_DUEL_INITWORN = 205;
	int CLIENTSCRIPT_DUEL_CONFIRM_TEXT = 206;
	int PROC_DUEL_ADDTOSTRING = 207;
	int PROC_V2_STONE_BUTTON_OUT_FILLED = 208;
	int CLIENTSCRIPT_TRADE_PARTNER_SET = 209;
	int PROC_TRADE_PARTNER_CHECK = 210;
	int CLIENTSCRIPT_POH_OPTIONS_BUILDMODE = 211;
	int PROC_SCRIPT_212 = 212;
	int PROC_CLANWARS_HUD_TIMEREMAINING_RESYNCH = 213;
	int CLIENTSCRIPT_SCRIPT_214 = 214;
	int CLIENTSCRIPT_SCRIPT_215 = 215;
	int CLIENTSCRIPT_REBUILDCHATBOX = 216;
	int CLIENTSCRIPT_MENU = 217;
	int PROC_MENU_CREATEENTRY = 218;
	int PROC_SCRIPT_219 = 219;
	int PROC_NTK_LAYOUT = 220;
	int CLIENTSCRIPT_CC_COLOUR_TEMPORARILY_END = 221;
	int PROC_SCRIPT_222 = 222;
	int PROC_SCRIPT_223 = 223;
	int PROC_INPUTSTRING_HANDLECHEAT = 224;
	int PROC_INPUTSTRING_TELEDIRECTION = 225;
	int CLIENTSCRIPT_LOST_PROPERTY_INIT = 226;
	int CLIENTSCRIPT_STEELBORDER = 227;
	int PROC_STEELBORDER = 228;
	int CLIENTSCRIPT_CC_GRAPHIC_SWAPPER = 229;
	int CLIENTSCRIPT_MAKEOVER_CLOTHES_SETUP = 230;
	int PROC_SCROLLBAR_VERTICAL_REBUILD = 231;
	int CLIENTSCRIPT_LEAGUE_REWARDS_INIT = 232;
	int CLIENTSCRIPT_SCRIPT_233 = 233;
	int PROC_FAKE_RUNES_ENABLED = 234;
	int CLIENTSCRIPT_AUTOCAST_INIT = 235;
	int CLIENTSCRIPT_AUTOCAST_SPELLHIGHLIGHT = 236;
	int PROC_AUTOCAST_SPELLHIGHLIGHT = 237;
	int CLIENTSCRIPT_AUTOCAST_TOOLTIP = 238;
	int PROC_AUTOCAST_TOOLTIP = 239;
	int CLIENTSCRIPT_AUTOCAST_TOOLTIP_RUNECOUNT = 240;
	int PROC_AUTOCAST_TOOLTIP_RUNECOUNT = 241;
	int PROC_CHATDEFAULT_OPT_ITEM = 242;
	int PROC_AUTOCAST_SPELLPOS = 243;
	int CLIENTSCRIPT_CC_SETTRANS = 244;
	int CLIENTSCRIPT_DEADMAN_TOURNAMENT_FOGCOLOUR = 245;
	int PROC_RGB_TO_HEX = 246;
	int PROC_INZONE = 247;
	int CLIENTSCRIPT_NZONE_REWARDS_INIT = 248;
	int PROC_STEELBOX = 249;
	int CLIENTSCRIPT_MUSIC_INIT = 250;
	int CLIENTSCRIPT_NZONE_REWARDS_UPDATEPOTION = 251;
	int CLIENTSCRIPT_MUSIC_INIT_COMPONENT = 252;
	int CLIENTSCRIPT_NZONE_LISTBOSSES = 253;
	int CLIENTSCRIPT_NZONE_LISTQUESTS = 254;
	int CLIENTSCRIPT_NZONE_GAME_OVERLAY = 255;
	int CLIENTSCRIPT_NZONE_GAME_HIDE = 256;
	int CLIENTSCRIPT_NZONE_GAME_POINTS_TRANSMIT = 257;
	int CLIENTSCRIPT_NZONE_GAME_POINTS_TICKUP = 258;
	int PROC_NZONE_GAME_POINTS_SET = 259;
	int CLIENTSCRIPT_NZONE_GAME_ABSORPTION_TRANSMIT = 260;
	int CLIENTSCRIPT_NZONE_GAME_ABSORPTION_TICKDOWN = 261;
	int PROC_NZONE_GAME_ABSORPTION_SET = 262;
	int CLIENTSCRIPT_NZONE_GAME_SUBTITLE = 263;
	int CLIENTSCRIPT_NZONE_LOBBY_OVERLAY = 264;
	int CLIENTSCRIPT_NZONE_LOBBY_HIDE = 265;
	int CLIENTSCRIPT_NZONE_LOBBY_PARTYSTATUS = 266;
	int PROC_NZONE_LOBBY_PARTYSTATUS = 267;
	int CLIENTSCRIPT_NZONE_LOBBY_PARTYNAMES = 268;
	int PROC_NZONE_LOBBY_PARTYNAMES = 269;
	int CLIENTSCRIPT_NZONE_LOBBY_COFFER = 270;
	int PROC_NZONE_LOBBY_COFFER = 271;
	int CLIENTSCRIPT_NZONE_LOBBY_COFFER_EXAMINE = 272;
	int CLIENTSCRIPT_SETTRANS = 273;
	int CLIENTSCRIPT_BANKMAIN_INIT = 274;
	int PROC_NZONE_REWARDS_PRICE = 275;
	int CLIENTSCRIPT_BANKMAIN_BUILD = 276;
	int PROC_BANKMAIN_BUILD = 277;
	int PROC_BANKMAIN_DRAWITEM = 278;
	int PROC_BANKMAIN_FILTERITEM = 279;
	int PROC_BANKMAIN_FILTERSTRING = 280;
	int CLIENTSCRIPT_BANKMAIN_SEARCH_TOGGLE = 281;
	int PROC_BANKMAIN_SEARCH_SETBUTTON = 282;
	int CLIENTSCRIPT_BANKMAIN_SEARCH_REFRESH = 283;
	int CLIENTSCRIPT_BANKMAIN_DRAGSCROLL = 284;
	int CLIENTSCRIPT_BANKMAIN_REORDER = 285;
	int CLIENTSCRIPT_BANKMAIN_SWAPINSERT = 286;
	int PROC_BANKMAIN_SWAPINSERT = 287;
	int CLIENTSCRIPT_BANKMAIN_SWAPINSERT_OP = 288;
	int CLIENTSCRIPT_BANKMAIN_ITEMNOTE = 289;
	int PROC_BANKMAIN_ITEMNOTE = 290;
	int CLIENTSCRIPT_BANKMAIN_ITEMNOTE_OP = 291;
	int CLIENTSCRIPT_BANKMAIN_DEPOSITALL = 292;
	int CLIENTSCRIPT_BANKMAIN_DEPOSITALL_END = 293;
	int CLIENTSCRIPT_BANKSIDE_INIT = 294;
	int CLIENTSCRIPT_BANKSIDE_BUILD = 295;
	int PROC_BANKSIDE_BUILD = 296;
	int PROC_BANKSIDE_DRAWITEM = 297;
	int CLIENTSCRIPT_BANKSIDE_REORDER = 298;
	int PROC_MESLAYER_CLOSE = 299;
	int PROC_MESLAYER_MODE11 = 300;
	int CLIENTSCRIPT_NZONE_REWARDS_LISTS = 301;
	int PROC_NZONE_REWARDS_LISTS = 302;
	int PROC_NZONE_REWARDS_LISTS_DRAWITEM = 303;
	int PROC_NZONE_REWARDS_UPDATEPOTION = 304;
	int CLIENTSCRIPT_NZONE_REWARDS_UPGRADES = 305;
	int PROC_NZONE_REWARDS_UPGRADES = 306;
	int CLIENTSCRIPT_NZONE_REWARDS_TABS = 307;
	int PROC_NZONE_REWARDS_TABS = 308;
	int PROC_NZONE_REWARDS_TAB = 309;
	int CLIENTSCRIPT_NZONE_REWARDS_SETPOINTS = 310;
	int PROC_NZONE_REWARDS_SETPOINTS = 311;
	int CLIENTSCRIPT_WELCOME_SCREEN_INIT = 312;
	int CLIENTSCRIPT_MUSIC_VARTRANSMIT = 313;
	int PROC_MUSIC_SETCOLOUR = 314;
	int CLIENTSCRIPT_MUSIC_OPTIONBUTTONS_SETMODE = 315;
	int CLIENTSCRIPT_MUSIC_OPTIONBUTTONS_SETLOOP = 316;
	int CLIENTSCRIPT_MUSIC_OPTIONBUTTONS_RESYNCH = 317;
	int PROC_MUSIC_OPTIONBUTTONS = 318;
	int CLIENTSCRIPT_SLAYER_REWARDS_CONFIRM_BACK = 319;
	int CLIENTSCRIPT_SLAYER_REWARDS_CONFIRM_BACKLATER = 320;
	int CLIENTSCRIPT_SLAYER_REWARDS_BUY_INIT = 321;
	int CLIENTSCRIPT_SLAYER_REWARDS_BUY_OP = 322;
	int CLIENTSCRIPT_COMBAT_INTERFACE_OPBUTTON = 323;
	int PROC_COMBAT_INTERFACE_SETBUTTONS = 324;
	int CLIENTSCRIPT_COMBAT_INTERFACE_RETALIATE = 325;
	int CLIENTSCRIPT_SLAYER_REWARDS_BUY_RELEASE = 326;
	int CLIENTSCRIPT_COMBAT_INTERFACE_SP = 327;
	int CLIENTSCRIPT_SLAYER_REWARDS_TASKS_INIT = 328;
	int CLIENTSCRIPT_COMBAT_INTERFACE_AUTOCAST = 329;
	int CLIENTSCRIPT_THORMAC_SETUP = 330;
	int CLIENTSCRIPT_THORMAC_HIGHLIGHT = 331;
	int PROC_THORMAC_HIGHLIGHT = 332;
	int CLIENTSCRIPT_BANKPIN_KEYPAD_INIT = 333;
	int CLIENTSCRIPT_GODWARS_HIDESHOW_INIT = 334;
	int CLIENTSCRIPT_GODWARS_HIDESHOW = 335;
	int PROC_GODWARS_HIDESHOW = 336;
	int CLIENTSCRIPT_GODWARS_KILLCOUNT_ARMADYL = 337;
	int CLIENTSCRIPT_GODWARS_KILLCOUNT_BANDOS = 338;
	int CLIENTSCRIPT_GODWARS_KILLCOUNT_SARADOMIN = 339;
	int CLIENTSCRIPT_GODWARS_KILLCOUNT_ZAMORAK = 340;
	int PROC_GODWARS_KILLCOUNT = 341;
	int CLIENTSCRIPT_GODWARS_DARKNESS = 342;
	int CLIENTSCRIPT_GODWARS_FADER_INIT = 343;
	int CLIENTSCRIPT_GODWARS_FADER = 344;
	int PROC_PATTERN_CARDS_CONFIRM_UPDATE = 345;
	int CLIENTSCRIPT_PATTERN_CARDS_CONFIRM_OP = 346;
	int CLIENTSCRIPT_PATTERN_CARDS_CONFIRM_RESET = 347;
	int CLIENTSCRIPT_POH_MENU_INIT = 348;
	int PROC_SCRIPT_349 = 349;
	int PROC_SW_WORLD = 350;
	int CLIENTSCRIPT_SCRIPT_351 = 351;
	int PROC_SCRIPT_352 = 352;
	int CLIENTSCRIPT_STONEPANEL_LIGHT = 353;
	int PROC_STONEPANEL_LIGHT = 354;
	int CLIENTSCRIPT_STONEPANEL_BLUE = 355;
	int PROC_STONEPANEL_BLUE = 356;
	int CLIENTSCRIPT_STONEPANEL_RED = 357;
	int PROC_STONEPANEL_RED = 358;
	int PROC_SCRIPT_359 = 359;
	int CLIENTSCRIPT_SCRIPT_360 = 360;
	int CLIENTSCRIPT_SCRIPT_361 = 361;
	int CLIENTSCRIPT_SCRIPT_362 = 362;
	int PROC_SCRIPT_363 = 363;
	int CLIENTSCRIPT_SCRIPT_364 = 364;
	int PROC_SCRIPT_365 = 365;
	int PROC_SCRIPT_366 = 366;
	int PROC_SCRIPT_367 = 367;
	int PROC_SCRIPT_368 = 368;
	int CLIENTSCRIPT_SCRIPT_369 = 369;
	int CLIENTSCRIPT_SCRIPT_370 = 370;
	int CLIENTSCRIPT_SCRIPT_371 = 371;
	int PROC_SCRIPT_372 = 372;
	int PROC_SCRIPT_373 = 373;
	int PROC_SCRIPT_374 = 374;
	int PROC_SETTINGS_BOND_OPTIONS = 375;
	int PROC_GET_SELECTED_QUANTITY = 376;
	int PROC_SET_SELECTED_QUANTITY = 377;
	int CLIENTSCRIPT_MENU_INDEXED = 378;
	int PROC_MENU_CREATEENTRY_INDEXED = 379;
	int CLIENTSCRIPT_SCRIPT_380 = 380;
	int CLIENTSCRIPT_SCRIPT_381 = 381;
	int CLIENTSCRIPT_SCRIPT_382 = 382;
	int PROC_PVPW_CHECK = 383;
	int PROC_WILDERNESS_LEVEL = 384;
	int CLIENTSCRIPT_PVP_ICONS_LAYOUT = 385;
	int PROC_PVP_ICONS_LAYOUT = 386;
	int PROC_PVP_ICONS_COMLEVELRANGE = 387;
	int CLIENTSCRIPT_PVP_ICONS_WILDERNESSLEVEL = 388;
	int PROC_SCRIPT_389 = 389;
	int CLIENTSCRIPT_COMBAT_WILDERNESS_TRANSMIT = 390;
	int CLIENTSCRIPT_POH_OPTIONS_DOORS = 391;
	int CLIENTSCRIPT_STEELBOX = 392;
	int CLIENTSCRIPT_STATS_INIT = 393;
	int CLIENTSCRIPT_STATS_SETLEVELS = 394;
	int PROC_STATS_SETLEVELS = 395;
	int CLIENTSCRIPT_STATS_SKILLTOTAL = 396;
	int CLIENTSCRIPT_FAIRYRINGS_OP = 397;
	int CLIENTSCRIPT_FAIRYRINGS_ROTATE = 398;
	int CLIENTSCRIPT_FAIRYRINGS_CONFIRM = 399;
	int CLIENTSCRIPT_FAIRYRINGS_CONFIRM_EXPIRE = 400;
	int CLIENTSCRIPT_FAIRYRINGS_SORT_MOUSEEFFECT = 401;
	int CLIENTSCRIPT_FAIRYRINGS_SORT_UPDATE = 402;
	int CLIENTSCRIPT_POH_TABLETS_INIT = 403;
	int CLIENTSCRIPT_RAIDS_STORAGE_PRIVATE_INIT = 404;
	int CLIENTSCRIPT_SLAYER_REWARDS_INIT = 405;
	int CLIENTSCRIPT_SLAYER_REWARDS_TABS = 406;
	int PROC_SLAYER_REWARDS_TABS = 407;
	int PROC_SLAYER_REWARDS_TAB = 408;
	int CLIENTSCRIPT_SLAYER_REWARDS_SETPOINTS = 409;
	int PROC_SLAYER_REWARDS_SETPOINTS = 410;
	int CLIENTSCRIPT_SLAYER_REWARDS_UNLOCK_INIT = 411;
	int CLIENTSCRIPT_SCRIPT_412 = 412;
	int PROC_SCRIPT_413 = 413;
	int CLIENTSCRIPT_SLAYER_REWARDS_UNLOCK_CONFIRM = 414;
	int CLIENTSCRIPT_SMITHING_INIT = 415;
	int CLIENTSCRIPT_SMITHING_SETUP = 416;
	int CLIENTSCRIPT_CHAT_SET_FILTER_CONDITIONAL = 417;
	int CLIENTSCRIPT_LONGSCROLL_SETUP = 418;
	int PROC_SKILL_GUIDE_SUBSECTION_SLAYER = 419;
	int CLIENTSCRIPT_COMBAT_INTERFACE_SETUP = 420;
	int CLIENTSCRIPT_SLAYER_REWARDS_TASKS_CURRENTTASK = 421;
	int PROC_SLAYER_REWARDS_TASKS_CURRENTTASK = 422;
	int CLIENTSCRIPT_SLAYER_REWARDS_TASKS_CANCELTASK = 423;
	int CLIENTSCRIPT_SLAYER_REWARDS_TASKS_BLOCKED_INIT = 424;
	int CLIENTSCRIPT_SLAYER_REWARDS_TASKS_BLOCKED_DRAW = 425;
	int PROC_SLAYER_REWARDS_TASKS_BLOCKED_DRAW = 426;
	int CLIENTSCRIPT_SLAYER_REWARDS_TASKS_UNBLOCKTASK = 427;
	int CLIENTSCRIPT_SCRIPT_428 = 428;
	int CLIENTSCRIPT_SCRIPT_429 = 429;
	int PROC_SMITHING_SETUP = 430;
	int PROC_SMITHING_ITEM = 431;
	int CLIENTSCRIPT_GROUPING_INIT = 432;
	int CLIENTSCRIPT_GROUPING_DROPDOWN = 433;
	int CLIENTSCRIPT_GROUPING_REBUILD = 434;
	int PROC_GROUPING_REBUILD = 435;
	int CLIENTSCRIPT_GROUPING_MOUSEOVER = 436;
	int CLIENTSCRIPT_GROUPING_JOINCHANNEL = 437;
	int PROC_TOURNAMENT_WORLD = 438;
	int CLIENTSCRIPT_SCRIPT_439 = 439;
	int CLIENTSCRIPT_SETTINGS_CLIENT_TYPE = 440;
	int PROC_SCRIPT_441 = 441;
	int PROC_SCRIPT_442 = 442;
	int CLIENTSCRIPT_CASTLEWARSTRADE_INIT = 443;
	int CLIENTSCRIPT_BARBASSAULT_TURRET_DATA = 444;
	int PROC_SETVOLUMEMUSIC = 445;
	int CLIENTSCRIPT_ORBS_UPDATE_HEALTH = 446;
	int CLIENTSCRIPT_ORBS_UPDATE_RUNENERGY = 447;
	int CLIENTSCRIPT_SCRIPT_448 = 448;
	int PROC_ORBS_UPDATE = 449;
	int CLIENTSCRIPT_RAREITEMS_DIANGO = 450;
	int PROC_HIGH_RISK_WORLD = 451;
	int PROC_SCRIPT_452 = 452;
	int CLIENTSCRIPT_RUNE_POUCH_INIT = 453;
	int PROC_ORBS_UPDATE_RUNMODE = 454;
	int CLIENTSCRIPT_ORBS_TOGGLE_PRAYER = 455;
	int PROC_ORBS_UPDATE_PRAYER = 456;
	int CLIENTSCRIPT_ORBS_TOGGLE_RUNMODE = 457;
	int CLIENTSCRIPT_PRAYER_INIT = 458;
	int CLIENTSCRIPT_TOL_PRESSURE_LEVERRESYNCH = 459;
	int PROC_TOL_PRESSURE_LEVERRESYNCH = 460;
	int CLIENTSCRIPT_PRAYER_UPDATEBUTTON = 461;
	int CLIENTSCRIPT_PRAYER_OP = 462;
	int PROC_PRAYER_UPDATEBUTTON = 463;
	int PROC_PRAYER_ISAVAILABLE = 464;
	int PROC_PRAYER_QUICKSORT = 465;
	int CLIENTSCRIPT_QUICKPRAYER_INIT = 466;
	int CLIENTSCRIPT_QUICKPRAYER_ICON_UPDATE = 467;
	int PROC_QUICKPRAYER_ICON_UPDATE = 468;
	int CLIENTSCRIPT_QUICKPRAYER_BUTTON_OP = 469;
	int CLIENTSCRIPT_QUICKPRAYER_BUTTON_UPDATE = 470;
	int PROC_QUICKPRAYER_BUTTON_UPDATE = 471;
	int CLIENTSCRIPT_QUICKPRAYER_CLOSE = 472;
	int CLIENTSCRIPT_QUICKPRAYER_CLOSE_TIMEOUT = 473;
	int CLIENTSCRIPT_SCRIPT_474 = 474;
	int PROC_PEST_REWARDS_DIVIDER = 475;
	int CLIENTSCRIPT_BR_HUD_WRITETIMER = 476;
	int CLIENTSCRIPT_NTK_TEXTBOX = 477;
	int PROC_SKILL_GUIDE_DATA_THIEVING = 478;
	int CLIENTSCRIPT_NTK_TIMER_RESYNCH = 479;
	int PROC_NTK_TIMER_RESYNCH = 480;
	int CLIENTSCRIPT_NTK_TIMER_AUTONOMOUS = 481;
	int PROC_NTK_TIMER_UPDATE = 482;
	int CLIENTSCRIPT_BARBASSAULT_TUTORIAL_BUTTON_INIT = 483;
	int CLIENTSCRIPT_BARBASSAULT_TUTORIAL_BUTTON_SETUP = 484;
	int PROC_BARBASSAULT_TUTORIAL_BUTTON_SETUP = 485;
	int PROC_V2_STONE_BUTTON = 486;
	int CLIENTSCRIPT_CC_SETTRANS_TEMPORARILY = 487;
	int CLIENTSCRIPT_CC_SETTRANS_TEMPORARILY_END = 488;
	int CLIENTSCRIPT_OPSOUND = 489;
	int CLIENTSCRIPT_BANKSIDE_SWITCHVIEW = 490;
	int PROC_BANKSIDE_SWITCHVIEW = 491;
	int CLIENTSCRIPT_MISC_COLLECTION_INIT = 492;
	int CLIENTSCRIPT_MISC_COLLECTION_DRAW = 493;
	int PROC_TOSTRING_MINUTES = 494;
	int CLIENTSCRIPT_WILDERNESS_LOOTINGBAG_SETUP = 495;
	int CLIENTSCRIPT_WILDERNESS_LOOTINGBAG_DRAW = 496;
	int PROC_WILDERNESS_LOOTINGBAG_DRAW = 497;
	int CLIENTSCRIPT_KILLDEATHRATIO_INIT = 498;
	int PROC_MAKEOVER_DRAWMODELS = 499;
	int CLIENTSCRIPT_MAKEOVER_INDICATOR = 500;
	int PROC_MAKEOVER_INDICATOR = 501;
	int CLIENTSCRIPT_MAKEOVER_HAIR_SETUP = 502;
	int PROC_LEAGUE_REWARDS_DRAW = 503;
	int CLIENTSCRIPT_BANKMAIN_SWITCHTAB = 504;
	int PROC_BANKMAIN_FINISHBUILDING = 505;
	int PROC_BANKMAIN_TABICON = 506;
	int PROC_SCRIPT_507 = 507;
	int PROC_BANKMAIN_TABICON_HIGHLIGHT = 508;
	int PROC_SCRIPT_509 = 509;
	int PROC_SCRIPT_510 = 510;
	int CLIENTSCRIPT_BANKMAIN_DRAGTAB_TEXT = 511;
	int CLIENTSCRIPT_BANKMAIN_DRAGTAB_GRAPHIC = 512;
	int PROC_BANK_GETTABRANGE = 513;
	int PROC_BANKMAIN_SEARCHING = 514;
	int CLIENTSCRIPT_SCRIPT_515 = 515;
	int PROC_BANK_TABFORSLOT = 516;
	int CLIENTSCRIPT_SCRIPT_517 = 517;
	int PROC_SCRIPT_518 = 518;
	int PROC_SCRIPT_519 = 519;
	int PROC_SCRIPT_520 = 520;
	int CLIENTSCRIPT_SCRIPT_521 = 521;
	int CLIENTSCRIPT_SCRIPT_522 = 522;
	int PROC_SCRIPT_523 = 523;
	int PROC_SCRIPT_524 = 524;
	int PROC_SCRIPT_525 = 525;
	int CLIENTSCRIPT_TOOLTIP_MOUSEREPEAT = 526;
	int PROC_SETTINGS_COLOUR_INPUT_UPDATE = 527;
	int PROC_SETTINGS_BUFF_CORRUPTION = 528;
	int PROC_SCRIPT_529 = 529;
	int PROC_SCRIPT_530 = 530;
	int PROC_SCRIPT_531 = 531;
	int CLIENTSCRIPT_SCRIPT_532 = 532;
	int CLIENTSCRIPT_SCRIPT_533 = 533;
	int CLIENTSCRIPT_STEAM_SET_UNLOCKED = 534;
	int CLIENTSCRIPT_SOUL_WARS_REWARDS_INIT = 535;
	int PROC_SCRIPT_536 = 536;
	int PROC_SCRIPT_537 = 537;
	int PROC_SOUL_WARS_REWARDS_STATBUTTONDRAW = 538;
	int PROC_OPTIONS_SETFPS = 539;
	int CLIENTSCRIPT_GE_OFFERS_BIGBUTTON_INIT = 540;
	int PROC_GE_OFFERS_BIGBUTTON = 541;
	int CLIENTSCRIPT_GE_OFFERS_BIGBUTTON_OP = 542;
	int CLIENTSCRIPT_GE_OFFERS_BIGBUTTON_RESET = 543;
	int PROC_LEAGUE_REWARD_DRAW_ITEM = 544;
	int CLIENTSCRIPT_WEAR_UPDATESLOT = 545;
	int PROC_WEAR_UPDATESLOT = 546;
	int CLIENTSCRIPT_RUNWEIGHT_VISIBLE = 547;
	int PROC_MESLAYER_MODE12 = 548;
	int PROC_MESLAYER_MODE12_SETPROMPT = 549;
	int PROC_MESLAYER_MODE13 = 550;
	int PROC_MESLAYER_MODE13_SETPROMPT = 551;
	int CLIENTSCRIPT_CHAT_AUTOTYPER = 552;
	int PROC_SCRIPT_553 = 553;
	int CLIENTSCRIPT_CLANWARS_CONFIRM_SETUP = 554;
	int CLIENTSCRIPT_CLANWARS_CONFIRM_CHALLENGE_WAIT = 555;
	int CLIENTSCRIPT_CLANWARS_CONFIRM_CHALLENGE_OP = 556;
	int CLIENTSCRIPT_CLANWARS_CONFIRM_CHALLENGE_REDRAW = 557;
	int PROC_CLANWARS_CONFIRM_CHALLENGE_REDRAW = 558;
	int CLIENTSCRIPT_CLANWARS_CONFIRM_JOIN_OP = 559;
	int PROC_CLANWARS_CONFIRM_PRESSED = 560;
	int PROC_CLANWARS_CONFIRM_NOTPRESSED = 561;
	int CLIENTSCRIPT_CLANWARS_VIEW_SETUP = 562;
	int CLIENTSCRIPT_CLANWARS_VIEW_OP = 563;
	int PROC_CLANWARS_VIEW_SETUP = 564;
	int PROC_CLANWARS_VIEW_SETBUTTON = 565;
	int PROC_CLANWARS_VIEW_UPDATEBUTTON = 566;
	int CLIENTSCRIPT_CLANWARS_VIEW_SPIN = 567;
	int PROC_CLANWARS_FFA_ARENA = 568;
	int CLIENTSCRIPT_CLANWARS_FFA_INIT = 569;
	int CLIENTSCRIPT_CLANWARS_FFA_HINT = 570;
	int PROC_CLANWARS_FFA_HINT = 571;
	int PROC_SCRIPT_572 = 572;
	int PROC_SCRIPT_573 = 573;
	int PROC_GNOMEBALL_SCORE = 574;
	int PROC_SCRIPT_575 = 575;
	int CLIENTSCRIPT_CLANWARS_SETUP_SCROLLBOX_INIT = 576;
	int PROC_CLANWARS_SETUP_SCROLLBOX_DRAWFRAME = 577;
	int CLIENTSCRIPT_CLANWARS_SETUP_SMALLBOX_INIT = 578;
	int CLIENTSCRIPT_SCRIPT_579 = 579;
	int CLIENTSCRIPT_SCRIPT_580 = 580;
	int PROC_SCRIPT_581 = 581;
	int CLIENTSCRIPT_CLANWARS_SETUP_TOGGLEBOX_INIT = 582;
	int CLIENTSCRIPT_CLANWARS_SETUP_TOGGLEBOX_OP = 583;
	int CLIENTSCRIPT_CLANWARS_SETUP_TOGGLEBOX_UPDATE = 584;
	int PROC_CLANWARS_SETUP_TOGGLEBOX_UPDATE = 585;
	int CLIENTSCRIPT_CLANWARS_SETUP_MOUSELEAVE = 586;
	int CLIENTSCRIPT_CLANWARS_SETUP_CORNER_INIT = 587;
	int CLIENTSCRIPT_CLANWARS_SETUP_CORNER_OP = 588;
	int CLIENTSCRIPT_CLANWARS_SETUP_CORNER_UPDATE = 589;
	int PROC_CLANWARS_SETUP_CORNER_UPDATE = 590;
	int CLIENTSCRIPT_SCRIPT_591 = 591;
	int CLIENTSCRIPT_CLANWARS_GAMEOVER = 592;
	int CLIENTSCRIPT_CLANWARS_HUD_INIT = 593;
	int CLIENTSCRIPT_CLANWARS_HUD_UPDATE = 594;
	int PROC_CLANWARS_HUD_INFO_UPDATE = 595;
	int PROC_CLANWARS_HUD_COUNTDOWN_UPDATE = 596;
	int CLIENTSCRIPT_CLANWARS_HUD_COUNTDOWN_TICK = 597;
	int PROC_CLANWARS_HUD_COUNTDOWN_REDRAW = 598;
	int CLIENTSCRIPT_CC_TEXT_SWAPPER = 599;
	int CLIENTSCRIPT_IF_SETTEXTALIGN = 600;
	int PROC_POLL_STOREQUESTION = 601;
	int PROC_POLL_RETRIEVEQUESTION = 602;
	int CLIENTSCRIPT_POLL_INITIALISE = 603;
	int CLIENTSCRIPT_POLL_SETBUTTON = 604;
	int CLIENTSCRIPT_POLL_RESETBUTTON = 605;
	int PROC_POLL_SETBUTTON = 606;
	int CLIENTSCRIPT_POLL_BUTTONHOVER = 607;
	int CLIENTSCRIPT_POLL_BUTTONOP = 608;
	int CLIENTSCRIPT_SCRIPT_609 = 609;
	int CLIENTSCRIPT_SCRIPT_610 = 610;
	int PROC_POLL_ADDLINK = 611;
	int PROC_POLL_SETUPLINK = 612;
	int CLIENTSCRIPT_POLL_CLICKLINK = 613;
	int CLIENTSCRIPT_POLL_RESETLINK = 614;
	int CLIENTSCRIPT_POLL_PLACEHOLDER_INIT = 615;
	int CLIENTSCRIPT_POLL_PLACEHOLDER_PULSE = 616;
	int PROC_POLL_PLACEHOLDER_PULSE = 617;
	int CLIENTSCRIPT_POLL_CONCLUDE = 618;
	int CLIENTSCRIPT_POLL_VOTING_ADDQUESTION_FULL = 619;
	int CLIENTSCRIPT_POLL_VOTING_ADDQUESTION_REFRESH = 620;
	int PROC_POLL_VOTING_ADDQUESTION = 621;
	int CLIENTSCRIPT_SCRIPT_622 = 622;
	int CLIENTSCRIPT_SCRIPT_623 = 623;
	int CLIENTSCRIPT_POLL_RESULTS_ADDQUESTION_FULL = 624;
	int CLIENTSCRIPT_POLL_RESULTS_ADDQUESTION_REFRESH = 625;
	int PROC_POLL_RESULTS_ADDQUESTION = 626;
	int CLIENTSCRIPT_POLL_HISTORY_SETUP = 627;
	int CLIENTSCRIPT_POLL_HISTORYOP = 628;
	int CLIENTSCRIPT_POLL_HISTORYRESET = 629;
	int CLIENTSCRIPT_IGNORE_UPDATE = 630;
	int CLIENTSCRIPT_FRIEND_UPDATE = 631;
	int PROC_SCRIPT_632 = 632;
	int PROC_INT_TO_BOOL = 633;
	int PROC_DISPLAYNAME_DRAW = 634;
	int CLIENTSCRIPT_DISPLAYNAME_LOOKUP = 635;
	int CLIENTSCRIPT_SCRIPT_636 = 636;
	int PROC_PET_INSURANCE_DRAWLIST = 637;
	int CLIENTSCRIPT_PET_INSURANCE_OP = 638;
	int CLIENTSCRIPT_POH_MENAGERIE_INITLIST = 639;
	int CLIENTSCRIPT_POH_MENAGERIE_DRAWLIST = 640;
	int PROC_POH_MENAGERIE_DRAWLIST = 641;
	int PROC_POH_MENAGERIE_DRAWPET = 642;
	int CLIENTSCRIPT_POH_MENAGERIE_INITROAMING = 643;
	int CLIENTSCRIPT_POH_MENAGERIE_SETROAMING = 644;
	int PROC_POH_MENAGERIE_SETROAMING = 645;
	int CLIENTSCRIPT_POH_MENAGERIE_TOGGLEROAMING = 646;
	int CLIENTSCRIPT_POH_MENAGERIE_PETLIST = 647;
	int CLIENTSCRIPT_POH_ADD_ROOM_INIT = 648;
	int PROC_POH_ADD_ROOM_INITBUTTON = 649;
	int CLIENTSCRIPT_POH_ADD_ROOM_COSTUPDATE = 650;
	int PROC_POH_ADD_ROOM_COSTUPDATE = 651;
	int CLIENTSCRIPT_POH_ADD_ROOM_OP = 652;
	int PROC_BANKPIN_KEYPAD_SET = 653;
	int CLIENTSCRIPT_SKILL_GUIDE_INIT = 654;
	int CLIENTSCRIPT_SKILL_GUIDE_BUILD = 655;
	int PROC_SKILL_GUIDE_BUILD = 656;
	int PROC_SKILL_GUIDE_ADDENTRY = 657;
	int PROC_SKILL_GUIDE_SUBSECTION_CONSTRUCTION = 658;
	int PROC_SKILL_GUIDE_DATA_CONSTRUCTION = 659;
	int PROC_SKILL_GUIDE_SUBSECTION = 660;
	int PROC_SKILL_GUIDE_DATA = 661;
	int PROC_SKILL_GUIDE_SALAMANDERS = 662;
	int CLIENTSCRIPT_CHAT_ONCHATTRANSMIT = 663;
	int CLIENTSCRIPT_SCRIPT_664 = 664;
	int CLIENTSCRIPT_RUNE_POUCH_DRAWPOUCH = 665;
	int PROC_RUNE_POUCH_DRAWPOUCH = 666;
	int PROC_RUNE_POUCH_DRAWPOUCH_SLOT = 667;
	int CLIENTSCRIPT_RUNE_POUCH_POUCHREORDER = 668;
	int CLIENTSCRIPT_RUNE_POUCH_DRAWINVENTORY = 669;
	int PROC_RUNE_POUCH_DRAWINVENTORY = 670;
	int PROC_RUNE_POUCH_DRAWINVENTORY_SLOT = 671;
	int CLIENTSCRIPT_RUNE_POUCH_INVENTORYREORDER = 672;
	int PROC_ADD = 673;
	int CLIENTSCRIPT_SCRIPT_674 = 674;
	int PROC_SCRIPT_675 = 675;
	int CLIENTSCRIPT_SCRIPT_676 = 676;
	int PROC_MESLAYER_OPEN = 677;
	int PROC_MESLAYER_DYNAMICBUTTON = 678;
	int PROC_BANKPIN_BUTTON_SETUP = 679;
	int PROC_MESLAYER_INITLASTNAMES = 680;
	int PROC_MESLAYER_ENTER = 681;
	int CLIENTSCRIPT_MESLAYER_LASTNAME_CLICK = 682;
	int CLIENTSCRIPT_BANKPIN_BUTTON_ADDTEXTLATER = 683;
	int CLIENTSCRIPT_BANKPIN_BUTTON_MOUSEOVER = 684;
	int CLIENTSCRIPT_BANKPIN_BUTTON_OP = 685;
	int CLIENTSCRIPT_BANKPIN_OTHERBUTTON = 686;
	int CLIENTSCRIPT_IRONMAN_INIT = 687;
	int CLIENTSCRIPT_TRAIL_SLIDEPUZZLE_INIT = 688;
	int CLIENTSCRIPT_TRAIL_SLIDEPUZZLE_SYNCH = 689;
	int PROC_TRAIL_SLIDEPUZZLE_SYNCH = 690;
	int CLIENTSCRIPT_TRAIL_SLIDEPUZZLE_OP = 691;
	int PROC_TRAIL_SLIDEPUZZLE_POSITION = 692;
	int CLIENTSCRIPT_CORP_BEAST_DAMAGE = 693;
	int CLIENTSCRIPT_MAKEOVERMAGE_GENDER = 694;
	int CLIENTSCRIPT_MAKEOVERMAGE_COLOUR_INIT = 695;
	int CLIENTSCRIPT_MAKEOVERMAGE_COLOUR_UPDATE = 696;
	int CLIENTSCRIPT_MAKEOVERMAGE_COLOUR_OP = 697;
	int PROC_MAKEOVERMAGE_COLOUR_UPDATE = 698;
	int CLIENTSCRIPT_EMOTE_INIT = 699;
	int CLIENTSCRIPT_EMOTE_UPDATE = 700;
	int PROC_EMOTE_UPDATE = 701;
	int PROC_EMOTE_CHECKUNLOCKED = 702;
	int CLIENTSCRIPT_STONEBORDER = 703;
	int PROC_WOM_ITEM_DISPLAY = 704;
	int CLIENTSCRIPT_BANK_DEPOSITBOX_DRAG = 705;
	int CLIENTSCRIPT_GE_COLLECT_ALL_DRAW = 706;
	int PROC_GE_COLLECT_ALL_DRAW = 707;
	int PROC_SCRIPT_708 = 708;
	int CLIENTSCRIPT_BUILD_ACHIEVEMENT_LIST = 709;
	int CLIENTSCRIPT_DEADMAN_SPECTATOR_MAP_CLOSE = 710;
	int PROC_STONEBORDER = 711;
	int CLIENTSCRIPT_STONEBOX = 712;
	int PROC_STONEBOX = 713;
	int CLIENTSCRIPT_THINBOX = 714;
	int PROC_THINBOX = 715;
	int PROC_SCRIPT_716 = 716;
	int CLIENTSCRIPT_ANMA_REWARD_INIT = 717;
	int CLIENTSCRIPT_OBJECT_SWAPPER = 718;
	int CLIENTSCRIPT_CC_OBJECT_SWAPPER = 719;
	int CLIENTSCRIPT_CC_FADE = 720;
	int CLIENTSCRIPT_CC_FADE_TIMER = 721;
	int CLIENTSCRIPT_BONDIF_CONVERT_INIT = 722;
	int CLIENTSCRIPT_BONDIF_CONVERT_INITIALVALUES = 723;
	int CLIENTSCRIPT_BONDIF_CONVERT_INVTRANSMIT = 724;
	int CLIENTSCRIPT_BONDIF_CONVERT_VARTRANSMIT = 725;
	int CLIENTSCRIPT_BONDIF_CONVERT_X = 726;
	int CLIENTSCRIPT_BONDIF_CONVERT_MINUS = 727;
	int CLIENTSCRIPT_BONDIF_CONVERT_PLUS = 728;
	int PROC_BONDIF_CONVERT_UPDATEVALUES = 729;
	int PROC_BONDIF_CONVERT_DISABLECONFIRM = 730;
	int PROC_BONDIF_CONVERT_ENABLECONFIRM = 731;
	int CLIENTSCRIPT_SCRIPT_732 = 732;
	int CLIENTSCRIPT_SCRIPT_733 = 733;
	int CLIENTSCRIPT_BONDIF_REDEEM_INIT = 734;
	int CLIENTSCRIPT_INFERNO_HUD_INIT = 735;
	int CLIENTSCRIPT_INFERNO_HUD_POS = 736;
	int PROC_INFERNO_HUD_POS = 737;
	int CLIENTSCRIPT_INFERNO_HUD_UPDATE = 738;
	int PROC_INFERNO_HUD_UPDATE = 739;
	int PROC_SCROLLBAR_VERTICAL_SETDRAGGER = 740;
	int CLIENTSCRIPT_PEST_ACTIVITY_INIT = 741;
	int CLIENTSCRIPT_SEED_VAULT_SIZE_CHECK = 742;
	int CLIENTSCRIPT_CLANWARS_HUD_TIMEREMAINING_TICK = 743;
	int PROC_CLANWARS_HUD_TIMEREMAINING_GETTEXT = 744;
	int PROC_QUICKSORT_QUESTLIST = 745;
	int CLIENTSCRIPT_SCRIPT_746 = 746;
	int CLIENTSCRIPT_WORLDSWITCHER_INIT = 747;
	int CLIENTSCRIPT_OUTPUT_WIFIAVAILABLE = 748;
	int CLIENTSCRIPT_TUTORIAL_PROGRESSBAR_INIT = 749;
	int CLIENTSCRIPT_MESLAYER_MODE14 = 750;
	int CLIENTSCRIPT_MESLAYER_MODE14_UPDATE = 751;
	int PROC_MESLAYER_MODE14_UPDATE = 752;
	int PROC_SCRIPT_753 = 753;
	int CLIENTSCRIPT_MESLAYER_MODE14_SELECT = 754;
	int CLIENTSCRIPT_TRADE_MAIN_INIT = 755;
	int CLIENTSCRIPT_CC_FLASHER = 756;
	int CLIENTSCRIPT_IF_FLASHER = 757;
	int CLIENTSCRIPT_DUEL_OPTIONS_CLICK = 758;
	int PROC_DUEL_OPTIONS_RADIO_BUTTONS = 759;
	int PROC_WORLDSWITCHER_SORTBUTTON_DRAW = 760;
	int CLIENTSCRIPT_WORLDSWITCHER_SORTBUTTON_OP = 761;
	int CLIENTSCRIPT_TRADE_MAIN_DRAWITEMS = 762;
	int PROC_TRADE_MAIN_DRAWITEMS = 763;
	int CLIENTSCRIPT_DUEL_CONFIRM_INITWORN = 764;
	int CLIENTSCRIPT_TRADE_SLOT_CHANGED = 765;
	int CLIENTSCRIPT_TRADE_SLOT_FLASHER = 766;
	int CLIENTSCRIPT_TRADE_CONFIRM_REDRAW = 767;
	int PROC_TRADE_CONFIRM_REDRAW = 768;
	int PROC_TRADE_CONFIRM_ITEMTEXT = 769;
	int PROC_STONEPANEL = 770;
	int PROC_SCRIPT_771 = 771;
	int CLIENTSCRIPT_V2_STONE_BUTTON_IN_FILLED = 772;
	int PROC_GE_OFFERS_SETUP_INIT = 773;
	int PROC_GE_OFFERS_SETUP_BUTTONTEXT = 774;
	int PROC_GE_OFFERS_SETUP_BUTTONGRAPHIC = 775;
	int CLIENTSCRIPT_GE_OFFERS_SETUP_DRAW = 776;
	int CLIENTSCRIPT_GE_OFFERS_SETUP_CHANGEQUANTITY = 777;
	int CLIENTSCRIPT_GE_OFFERS_SETUP_CHANGEPRICE = 778;
	int PROC_GE_OFFERS_SETUP_DRAW = 779;
	int PROC_GE_OFFERS_SETUP_DRAW_DISABLECONFIRM = 780;
	int CLIENTSCRIPT_GE_OFFER_SIDE_INIT = 781;
	int CLIENTSCRIPT_GE_OFFER_SIDE_DRAW = 782;
	int PROC_GE_OFFER_SIDE_DRAW = 783;
	int CLIENTSCRIPT_GE_PRICECHECKER_INIT = 784;
	int CLIENTSCRIPT_GE_PRICECHECKER_PRICES = 785;
	int CLIENTSCRIPT_GE_PRICECHECKER_REDRAW = 786;
	int PROC_GE_PRICECHECKER_REDRAW = 787;
	int CLIENTSCRIPT_GE_COLLECT_INIT = 788;
	int PROC_GE_COLLECT_INITSLOT = 789;
	int CLIENTSCRIPT_GE_COLLECT_DRAWSLOT = 790;
	int PROC_GE_COLLECT_DRAWSLOT = 791;
	int PROC_GE_COLLECT_DRAWITEM = 792;
	int PROC_GE_OFFERS_INDEX_INITTOP = 793;
	int PROC_GE_OFFERS_INDEX_INITSLOT = 794;
	int CLIENTSCRIPT_GE_OFFERS_INDEX_DRAWTOP = 795;
	int PROC_GE_OFFERS_INDEX_DRAWTOP = 796;
	int CLIENTSCRIPT_GE_OFFERS_INDEX_DRAWSLOT = 797;
	int PROC_GE_OFFERS_INDEX_DRAWSLOT = 798;
	int CLIENTSCRIPT_GE_PRICELIST = 799;
	int CLIENTSCRIPT_GE_PRICELIST_DRAW = 800;
	int CLIENTSCRIPT_GE_PRICELIST_SWITCHMODE = 801;
	int PROC_GE_PRICELIST_DRAW = 802;
	int CLIENTSCRIPT_GE_OFFERS_INIT = 803;
	int CLIENTSCRIPT_GE_OFFERS_SWITCHPANEL = 804;
	int CLIENTSCRIPT_SCRIPT_805 = 805;
	int PROC_GE_OFFERS_SWITCHPANEL = 806;
	int PROC_GE_OFFERS_INITBOXES = 807;
	int CLIENTSCRIPT_GE_OFFERS_PRICEICON = 808;
	int PROC_GE_OFFERS_PRICEICON = 809;
	int PROC_GE_TEXTBOX = 810;
	int CLIENTSCRIPT_SCRIPT_811 = 811;
	int PROC_SCRIPT_812 = 812;
	int PROC_GE_OFFERS_CHECKAVAILABLE = 813;
	int CLIENTSCRIPT_CONFIRMDESTROY_INIT = 814;
	int PROC_CONFIRMDESTROY_SETUPBUTTON = 815;
	int PROC_SCRIPT_816 = 816;
	int CLIENTSCRIPT_SCRIPT_817 = 817;
	int PROC_SCRIPT_818 = 818;
	int PROC_SCRIPT_819 = 819;
	int CLIENTSCRIPT_SCRIPT_820 = 820;
	int PROC_SCRIPT_821 = 821;
	int CLIENTSCRIPT_ITEMSETS_INIT = 822;
	int CLIENTSCRIPT_ITEMSETS_REDRAW = 823;
	int PROC_ITEMSETS_REDRAW = 824;
	int CLIENTSCRIPT_ITEMSETS_SIDE_INIT = 825;
	int CLIENTSCRIPT_ITEMSETS_SIDE_DRAW = 826;
	int PROC_ITEMSETS_SIDE_DRAW = 827;
	int CLIENTSCRIPT_PLAYERMEMBER = 828;
	int CLIENTSCRIPT_DUEL_CONFIRM_WORN = 829;
	int CLIENTSCRIPT_SCRIPT_830 = 830;
	int CLIENTSCRIPT_ZOOM_INIT = 831;
	int CLIENTSCRIPT_ZOOM_OUTLINE = 832;
	int CLIENTSCRIPT_ZOOM_SLIDER_ONDRAG = 833;
	int CLIENTSCRIPT_IF_SETNOCLICKTHROUGH = 834;
	int PROC_OPTIONS_BUTTON_OFF = 835;
	int PROC_OPTIONS_BUTTON_ON = 836;
	int PROC_TOOLTIP_MOUSEREPEAT = 837;
	int PROC_SCROLLBAR_VERTICAL_REPAINT = 838;
	int CLIENTSCRIPT_BANKMAIN_SIZE_CHECK = 839;
	int PROC_BANKMAIN_SIZE_CHECK = 840;
	int CLIENTSCRIPT_WORLDSWITCHER_LOADING = 841;
	int PROC_SCRIPT_842 = 842;
	int PROC_SOUL_WARS_REWARDS_DRAWITEM = 843;
	int PROC_SOUL_WARS_REWARDS_SELECT = 844;
	int CLIENTSCRIPT_SOUL_WARS_REWARDS_SELECT = 845;
	int CLIENTSCRIPT_SOUL_WARS_REWARDS_REFUSE = 846;
	int PROC_SOUL_WARS_REWARDS_DRAWCONFIRM = 847;
	int CLIENTSCRIPT_SCRIPT_848 = 848;
	int PROC_SOUL_WARS_REWARDS_CONFIRMTEXT = 849;
	int CLIENTSCRIPT_SOUL_WARS_REWARDS_CONFIRMOP = 850;
	int CLIENTSCRIPT_SCRIPT_851 = 851;
	int PROC_SCRIPT_852 = 852;
	int PROC_SCRIPT_853 = 853;
	int PROC_SCRIPT_854 = 854;
	int CLIENTSCRIPT_SCRIPT_855 = 855;
	int PROC_SCRIPT_856 = 856;
	int PROC_SCRIPT_857 = 857;
	int PROC_SCRIPT_858 = 858;
	int PROC_SCRIPT_859 = 859;
	int CLIENTSCRIPT_MES = 860;
	int CLIENTSCRIPT_SCRIPT_861 = 861;
	int CLIENTSCRIPT_SCRIPT_862 = 862;
	int CLIENTSCRIPT_SCRIPT_863 = 863;
	int CLIENTSCRIPT_SCRIPT_864 = 864;
	int CLIENTSCRIPT_PVP_ICONS_LAYOUT_INIT = 865;
	int PROC_SCRIPT_866 = 866;
	int CLIENTSCRIPT_TUTORIAL_PROGRESSBAR_SET = 867;
	int PROC_SCRIPT_868 = 868;
	int PROC_SCRIPT_869 = 869;
	int CLIENTSCRIPT_MODEL_DYNAMICZOOM_INIT = 870;
	int CLIENTSCRIPT_MODEL_DYNAMICZOOM = 871;
	int PROC_MODEL_DYNAMICZOOM = 872;
	int CLIENTSCRIPT_WOM_TELESCOPE_INIT = 873;
	int CLIENTSCRIPT_WOM_TELESCOPE_BORDERS = 874;
	int PROC_WOM_TELESCOPE_BORDERS = 875;
	int CLIENTSCRIPT_CC_OUTLINE_ON = 876;
	int PROC_BR_HUD_WRITETIMER = 877;
	int CLIENTSCRIPT_BOARDGAMES_RANK_DRAUGHTS = 878;
	int CLIENTSCRIPT_BOARDGAMES_RANK_RUNELINK = 879;
	int CLIENTSCRIPT_BOARDGAMES_RANK_RUNEVERSI = 880;
	int CLIENTSCRIPT_BOARDGAMES_RANK_RUNESQUARES = 881;
	int CLIENTSCRIPT_GNOMEBALL_SCORE = 882;
	int CLIENTSCRIPT_SCRIPT_883 = 883;
	int CLIENTSCRIPT_CASTLEWARS_HUD_INIT = 884;
	int CLIENTSCRIPT_SCRIPT_885 = 885;
	int CLIENTSCRIPT_SCRIPT_886 = 886;
	int CLIENTSCRIPT_CASTLEWARS_OVERLAY_SARADOMIN = 887;
	int CLIENTSCRIPT_CASTLEWARS_OVERLAY_ZAMORAK = 888;
	int CLIENTSCRIPT_II_IMPLING_COUNT = 889;
	int PROC_SCRIPT_890 = 890;
	int CLIENTSCRIPT_WORLDSWITCHER_DRAW = 891;
	int PROC_WORLDSWITCHER_DRAW = 892;
	int PROC_WORLDSWITCHER_WIPE_FAVOURITE = 893;
	int CLIENTSCRIPT_BARROWS_NODNOD = 894;
	int CLIENTSCRIPT_BARROWS_NODNODOFF = 895;
	int CLIENTSCRIPT_MOLE_GO_SPLAT = 896;
	int CLIENTSCRIPT_MOLE_GO_SPLAT_OFF = 897;
	int PROC_MOLE_SPLAT_ZOOM = 898;
	int CLIENTSCRIPT_AGILITYARENA_OVERLAY = 899;
	int PROC_TOPLEVEL_GETCOMPONENTS = 900;
	int CLIENTSCRIPT_TOPLEVEL_INIT = 901;
	int CLIENTSCRIPT_TOPLEVEL_VARTRANSMIT = 902;
	int CLIENTSCRIPT_TOPLEVEL_SUBCHANGE = 903;
	int CLIENTSCRIPT_TOPLEVEL_RESIZE = 904;
	int CLIENTSCRIPT_TOPLEVEL_KEYPRESS = 905;
	int CLIENTSCRIPT_TOPLEVEL_TIMER = 906;
	int PROC_TOPLEVEL_REDRAW = 907;
	int PROC_TOPLEVEL_SUBCHANGE = 908;
	int PROC_TOPLEVEL_RESIZE = 909;
	int PROC_TOPLEVEL_MAINMODAL_BG_CALCULATE = 910;
	int PROC_TOPLEVEL_MAINMODAL_BG_BUILD = 911;
	int PROC_TOPLEVEL_SIDEBUTTONS_ENABLE = 912;
	int PROC_TOPLEVEL_FLASHICON = 913;
	int CLIENTSCRIPT_TOPLEVEL_SIDEBUTTON_OP = 914;
	int CLIENTSCRIPT_TOPLEVEL_SIDEBUTTON_SWITCH = 915;
	int PROC_TOPLEVEL_SIDEBUTTON_SWITCH = 916;
	int CLIENTSCRIPT_TOPLEVEL_MAINMODAL_BACKGROUND = 917;
	int PROC_TOPLEVEL_CHECK_SIDEPANEL = 918;
	int PROC_TOPLEVEL_SIDE_CUSTOMISE = 919;
	int PROC_TOPLEVEL_RESIZE_CUSTOMISE = 920;
	int PROC_TOPLEVEL_CHATBOX_MAKETRANSPARENT = 921;
	int PROC_TOPLEVEL_CHATBOX_PERMITTRANSPARENT = 922;
	int PROC_TOPLEVEL_CHATBOX_BACKGROUND = 923;
	int CLIENTSCRIPT_SCRIPT_924 = 924;
	int CLIENTSCRIPT_CHATBOX_INIT = 925;
	int CLIENTSCRIPT_PM_INIT = 926;
	int PROC_CHATDEFAULT_SETONKEY = 927;
	int CLIENTSCRIPT_SMOKEOVERLAY_INIT = 928;
	int CLIENTSCRIPT_BANKMAIN_TOGGLEPLACEHOLDERS = 929;
	int PROC_BANKMAIN_TOGGLEPLACEHOLDERS = 930;
	int CLIENTSCRIPT_SNOW_FLAKES_INIT = 931;
	int CLIENTSCRIPT_SNOWFLAKES_ZOOM = 932;
	int PROC_SNOWFLAKES_ZOOM = 933;
	int CLIENTSCRIPT_MYQ3_BLACKOUT_INIT = 934;
	int CLIENTSCRIPT_MYQ3_BLACKOUT_BORDERS = 935;
	int PROC_MYQ3_BLACKOUT_BORDERS = 936;
	int CLIENTSCRIPT_SCRIPT_937 = 937;
	int CLIENTSCRIPT_SCRIPT_938 = 938;
	int PROC_SCRIPT_939 = 939;
	int CLIENTSCRIPT_PENG_OBSERVER_INIT = 940;
	int CLIENTSCRIPT_PENG_OBSERVER_BORDERS = 941;
	int PROC_PENG_OBSERVER_BORDERS = 942;
	int CLIENTSCRIPT_SCRIPT_943 = 943;
	int CLIENTSCRIPT_SCRIPT_944 = 944;
	int PROC_SCRIPT_945 = 945;
	int CLIENTSCRIPT_ZEP_BALLOON_MAP_HOVER = 946;
	int CLIENTSCRIPT_SCRIPT_947 = 947;
	int CLIENTSCRIPT_FADE_OVERLAY = 948;
	int CLIENTSCRIPT_FADE_OVERLAY_UPDATE = 949;
	int PROC_FADE_OVERLAY_INCREMENT = 950;
	int CLIENTSCRIPT_FADE_OVERLAY_LEGACY = 951;
	int CLIENTSCRIPT_FADE_OVERLAY_LEGACY_UPDATE = 952;
	int CLIENTSCRIPT_MACRO_PINBALL_SCORE_INIT = 953;
	int CLIENTSCRIPT_SCRIPT_954 = 954;
	int PROC_SCRIPT_955 = 955;
	int CLIENTSCRIPT_MACRO_MAZE_TIMER = 956;
	int PROC_SCRIPT_957 = 957;
	int CLIENTSCRIPT_SCRIPT_958 = 958;
	int CLIENTSCRIPT_SCRIPT_959 = 959;
	int PROC_WORLDSWITCHER_ENTRY_DRAW = 960;
	int PROC_SCRIPT_961 = 961;
	int CLIENTSCRIPT_TOURNAMENT_SUPPLIES_INIT = 962;
	int CLIENTSCRIPT_TOURNAMENT_SUPPLIES_SEARCH_UPDATE = 963;
	int CLIENTSCRIPT_TOURNAMENT_SUPPLIES_SEARCH_TOGGLE = 964;
	int PROC_TOURNAMENT_SUPPLIES_SEARCH_OFF = 965;
	int PROC_TOURNAMENT_SUPPLIES_SEARCH_ON = 966;
	int PROC_TOURNAMENT_SUPPLIES_DRAWLIST = 967;
	int CLIENTSCRIPT_DUEL_OPTIONS_CHANGED = 968;
	int CLIENTSCRIPT_STAKE_TOOLTIP = 969;
	int CLIENTSCRIPT_LOGOUT_OP = 970;
	int CLIENTSCRIPT_NTK_INIT = 971;
	int CLIENTSCRIPT_DEATHKEEP_INIT = 972;
	int CLIENTSCRIPT_DEATHKEEP_LEFT_REDRAW = 973;
	int PROC_DEATHKEEP_LEFT_REDRAW = 974;
	int PROC_DEATHKEEP_LEFT_SETSECTION = 975;
	int PROC_DEATHKEEP_LEFT_PROTECTEDITEM = 976;
	int PROC_DEATHKEEP_LEFT_KEEPITEM = 977;
	int PROC_DEATHKEEP_LEFT_DELETEDITEM = 978;
	int PROC_DEATHKEEP_LEFT_GRAVEITEM = 979;
	int PROC_DEATHKEEP_LEFT_COINSITEM = 980;
	int CLIENTSCRIPT_KEYBIND_BUILD_DROPDOWN = 981;
	int PROC_KEYBIND_BUILD_DROPDOWN = 982;
	int CLIENTSCRIPT_KEYBIND_DROPDOWN_SELECT = 983;
	int CLIENTSCRIPT_SCRIPT_984 = 984;
	int CLIENTSCRIPT_KEYBIND_OPEN_MENU = 985;
	int PROC_KEYBIND_GET_SLOT = 986;
	int CLIENTSCRIPT_KEYBIND_CLOSE_DROPDOWN = 987;
	int CLIENTSCRIPT_SCRIPT_988 = 988;
	int CLIENTSCRIPT_SCRIPT_989 = 989;
	int PROC_SCRIPT_990 = 990;
	int CLIENTSCRIPT_STONEPANEL = 991;
	int CLIENTSCRIPT_SCRIPT_992 = 992;
	int CLIENTSCRIPT_XPDROPS_INIT = 993;
	int CLIENTSCRIPT_XPDROPS_VARTRANSMIT = 994;
	int PROC_XPDROPS_REDRAW = 995;
	int PROC_XPDROPS_SETDROPSIZE = 996;
	int PROC_XPDROPS_SHOWPANEL = 997;
	int CLIENTSCRIPT_XPDROPS_HIDEPANEL = 998;
	int PROC_XPDROPS_SETBAR = 999;
	int PROC_XPDROPS_SETBAR_PROGRESS = 1000;
	int PROC_XPDROPS_PERCENTAGE_TOSTRING = 1001;
	int PROC_XPDROPS_DATA_GET = 1002;
	int PROC_XPDROPS_SETSTATLISTENER = 1003;
	int CLIENTSCRIPT_XPDROPS_STATTRANSMIT = 1004;
	int CLIENTSCRIPT_XPDROPS_DROPLETMOVE = 1005;
	int PROC_SCRIPT_1006 = 1006;
	int PROC_STAT_TOTALLEVEL = 1007;
	int PROC_STATS_TOTALXP = 1008;
	int PROC_STATS_TOSTRING_TOTALXP = 1009;
	int CLIENTSCRIPT_XPDROPS_SETUP_INIT = 1010;
	int PROC_XPDROPS_SETUP_INIT_DISPLAY = 1011;
	int CLIENTSCRIPT_XPDROPS_SETUP_DISPLAY_HOVER = 1012;
	int PROC_XPDROPS_SETUP_DISPLAY_HOVEROFF = 1013;
	int PROC_XPDROPS_SETUP_DISPLAY_HOVERDISABLE = 1014;
	int CLIENTSCRIPT_SCRIPT_1015 = 1015;
	int PROC_SCRIPT_1016 = 1016;
	int CLIENTSCRIPT_SCRIPT_1017 = 1017;
	int PROC_SCRIPT_1018 = 1018;
	int CLIENTSCRIPT_SCRIPT_1019 = 1019;
	int CLIENTSCRIPT_SCRIPT_1020 = 1020;
	int CLIENTSCRIPT_XPDROPS_SETUP_DISPLAY_UPDATE = 1021;
	int PROC_XPDROPS_SETUP_DISPLAY_UPDATE = 1022;
	int CLIENTSCRIPT_SCRIPT_1023 = 1023;
	int CLIENTSCRIPT_SCRIPT_1024 = 1024;
	int CLIENTSCRIPT_SCRIPT_1025 = 1025;
	int PROC_SCRIPT_1026 = 1026;
	int PROC_SCRIPT_1027 = 1027;
	int PROC_XPDROPS_TOSTRING = 1028;
	int PROC_XPDROPS_TOSTRING_THOUSANDS = 1029;
	int CLIENTSCRIPT_XPDROPS_SETUP_DISPLAY_OPEN = 1030;
	int PROC_SCRIPT_1031 = 1031;
	int PROC_SCRIPT_1032 = 1032;
	int PROC_SCRIPT_1033 = 1033;
	int CLIENTSCRIPT_WELCOME_SCREEN_LASTLOGIN = 1034;
	int CLIENTSCRIPT_XPDROPS_SETUP_DISPLAY_DROPDOWN_HOVER = 1035;
	int CLIENTSCRIPT_XPDROPS_SETUP_DISPLAY_DROPDOWN_OP = 1036;
	int CLIENTSCRIPT_XPDROPS_SETUP_DISPLAY_DROPDOWN_CLOSE = 1037;
	int PROC_XPDROPS_SETUP_DISPLAY_DROPDOWN_CLOSE = 1038;
	int CLIENTSCRIPT_ORBS_XPDROPS_INIT = 1039;
	int CLIENTSCRIPT_ORBS_XPDROPS_OP = 1040;
	int CLIENTSCRIPT_ORBS_XPDROPS_UPDATE = 1041;
	int PROC_ORBS_XPDROPS_UPDATE = 1042;
	int CLIENTSCRIPT_ZOOM_SLIDER_DRAGCOMPLETE = 1043;
	int PROC_SCRIPT_1044 = 1044;
	int PROC_MAX = 1045;
	int PROC_MIN = 1046;
	int CLIENTSCRIPT_CAMERA_ZOOM_SLIDER_CLICK = 1047;
	int PROC_ZOOM_SLIDER_SPECIFIC_POS = 1048;
	int PROC_ZOOM_POSITION_SLIDER = 1049;
	int CLIENTSCRIPT_TOPLEVEL_COMPASS_OP = 1050;
	int CLIENTSCRIPT_SPINMODEL = 1051;
	int CLIENTSCRIPT_MOURNING_TOAD_INIT = 1052;
	int CLIENTSCRIPT_MOURNING_TOAD_SETTOAD = 1053;
	int PROC_MOURNING_TOAD_SETTOAD = 1054;
	int CLIENTSCRIPT_FARMING_TOOLS_MAIN_INIT = 1055;
	int CLIENTSCRIPT_FARMING_TOOLS_SIDE_INIT = 1056;
	int PROC_FARMING_TOOLS_MAIN_CREATE = 1057;
	int PROC_FARMING_TOOLS_SIDE_CREATE = 1058;
	int CLIENTSCRIPT_FARMING_TOOLS_MAIN_UPDATE = 1059;
	int PROC_FARMING_TOOLS_MAIN_UPDATE = 1060;
	int CLIENTSCRIPT_FARMING_TOOLS_SIDE_UPDATE = 1061;
	int PROC_FARMING_TOOLS_SIDE_UPDATE = 1062;
	int PROC_FARMING_TOOLS_GETSTORED = 1063;
	int PROC_FARMING_TOOLS_GETCARRIED = 1064;
	int CLIENTSCRIPT_BARROWS_REWARD_INIT = 1065;
	int CLIENTSCRIPT_BARROWS_REWARD_DRAW = 1066;
	int PROC_BARROWS_REWARD_DRAW = 1067;
	int CLIENTSCRIPT_SARADOMIN_LIGHT_EFFECT = 1068;
	int CLIENTSCRIPT_SARADOMIN_LIGHT_EFFECT_UPDATE = 1069;
	int PROC_SARADOMIN_LIGHT_EFFECT_UPDATE = 1070;
	int PROC_BARROWS_OVERLAY_CREATEBROTHER = 1071;
	int CLIENTSCRIPT_BARROWS_OVERLAY_KILLBROTHER = 1072;
	int PROC_BARROWS_OVERLAY_KILLBROTHER = 1073;
	int CLIENTSCRIPT_SHOP_MAIN_INIT = 1074;
	int CLIENTSCRIPT_SHOP_MAIN_UPDATE = 1075;
	int PROC_SHOP_MAIN_UPDATE = 1076;
	int CLIENTSCRIPT_POH_OPTIONS_TELE = 1077;
	int CLIENTSCRIPT_POH_OPTIONS_DOORS_ONOP = 1078;
	int CLIENTSCRIPT_POH_OPTIONS_TELE_ONOP = 1079;
	int CLIENTSCRIPT_SCRIPT_1080 = 1080;
	int CLIENTSCRIPT_OPENURL_RAW = 1081;
	int CLIENTSCRIPT_OPTIONS_BUTTON_OFF = 1082;
	int CLIENTSCRIPT_OPTIONS_BUTTON_ON = 1083;
	int CLIENTSCRIPT_STONEBUTTON_URL = 1084;
	int CLIENTSCRIPT_STONEBUTTON_URL_DRAW = 1085;
	int PROC_STONEBUTTON_URL_DRAW = 1086;
	int CLIENTSCRIPT_STONEBUTTON_URL_CLICK = 1087;
	int CLIENTSCRIPT_STONEBUTTON_URL_CLICKRELEASE = 1088;
	int CLIENTSCRIPT_SLAYER_REWARDS_EXTEND_INIT = 1089;
	int PROC_SLAYER_REWARDS_UNLOCK_DRAW = 1090;
	int CLIENTSCRIPT_SLAYER_REWARDS_ETCETERA_DRAW = 1091;
	int PROC_SLAYER_REWARDS_ETCETERA_DRAW = 1092;
	int CLIENTSCRIPT_BUGREPORT_INIT = 1093;
	int PROC_BUGREPORT_INIT_TEXTINPUT = 1094;
	int CLIENTSCRIPT_BUGREPORT_INFO = 1095;
	int CLIENTSCRIPT_BUGREPORT_SWITCH_TEXTINPUT = 1096;
	int PROC_BUGREPORT_SWITCH_TEXTINPUT = 1097;
	int CLIENTSCRIPT_BUGREPORT_KEYPRESS = 1098;
	int PROC_BUGREPORT_PARSE = 1099;
	int CLIENTSCRIPT_BUGREPORT_DRAWBUTTON = 1100;
	int PROC_BUGREPORT_DRAWBUTTON = 1101;
	int CLIENTSCRIPT_BUGREPORT_CONTINUE = 1102;
	int CLIENTSCRIPT_BUGREPORT_SUBMIT = 1103;
	int CLIENTSCRIPT_SNAPSHOT_INIT = 1104;
	int CLIENTSCRIPT_SKILL_GUIDE_SIDEPANELOP = 1105;
	int PROC_ABYSSALSIRE_OVERSEER_UPDATE = 1106;
	int PROC_SCRIPT_1107 = 1107;
	int CLIENTSCRIPT_SCRIPT_1108 = 1108;
	int PROC_SCRIPT_1109 = 1109;
	int CLIENTSCRIPT_LEAGUE_STATISTICS_INIT = 1110;
	int PROC_LEAGUE_STATISTICS_DRAW = 1111;
	int CLIENTSCRIPT_FARMING_VIEW_INIT = 1112;
	int PROC_FARMING_VIEW_CREATETAB = 1113;
	int CLIENTSCRIPT_FARMING_VIEW_OPTAB = 1114;
	int CLIENTSCRIPT_FARMING_VIEW_UPDATETABS = 1115;
	int PROC_FARMING_VIEW_UPDATETABS = 1116;
	int PROC_FARMING_VIEW_TABPANEL = 1117;
	int CLIENTSCRIPT_FARMING_VIEW_PANEL_LOADING = 1118;
	int CLIENTSCRIPT_FARMING_VIEW_SETPANEL = 1119;
	int CLIENTSCRIPT_SNAPSHOT_RULES_INIT = 1120;
	int PROC_SNAPSHOT_RULES_WRITE = 1121;
	int CLIENTSCRIPT_SNAPSHOT_RULES_HOVER = 1122;
	int CLIENTSCRIPT_SNAPSHOT_RULES_SEND = 1123;
	int PROC_SCRIPT_1124 = 1124;
	int PROC_LEAGUE_POINTS_EARNED = 1125;
	int PROC_SCRIPT_1126 = 1126;
	int PROC_SCRIPT_1127 = 1127;
	int CLIENTSCRIPT_SCRIPT_1128 = 1128;
	int PROC_SCRIPT_1129 = 1129;
	int CLIENTSCRIPT_SCRIPT_1130 = 1130;
	int CLIENTSCRIPT_SCRIPT_1131 = 1131;
	int CLIENTSCRIPT_SCRIPT_1132 = 1132;
	int CLIENTSCRIPT_SCRIPT_1133 = 1133;
	int CLIENTSCRIPT_SCRIPT_1134 = 1134;
	int PROC_SCRIPT_1135 = 1135;
	int CLIENTSCRIPT_SCRIPT_1136 = 1136;
	int CLIENTSCRIPT_SCRIPT_1137 = 1137;
	int PROC_DEADMAN_WORLD = 1138;
	int CLIENTSCRIPT_DEADMANPROTECT_ONLOAD = 1139;
	int CLIENTSCRIPT_DEADMAN_STATS_INIT = 1140;
	int CLIENTSCRIPT_DEADMAN_STATS_VARTRANSMIT = 1141;
	int CLIENTSCRIPT_DEADMAN_STATS_CLICK = 1142;
	int PROC_SCRIPT_1143 = 1143;
	int PROC_SCRIPT_1144 = 1144;
	int PROC_DEADMAN_STATS_SET_PROTECT = 1145;
	int PROC_DEADMAN_STATS_SET_UNPROTECT = 1146;
	int PROC_DEADMANPROTECT_XP_COUNTS = 1147;
	int CLIENTSCRIPT_DEADMANPROTECT_BANK_TRANSMIT = 1148;
	int CLIENTSCRIPT_DEADMAN_DELAY = 1149;
	int CLIENTSCRIPT_DEADMAN_DELAY_TIMER = 1150;
	int CLIENTSCRIPT_SCRIPT_1151 = 1151;
	int CLIENTSCRIPT_SCRIPT_1152 = 1152;
	int CLIENTSCRIPT_SCRIPT_1153 = 1153;
	int CLIENTSCRIPT_SCRIPT_1154 = 1154;
	int PROC_SCRIPT_1155 = 1155;
	int PROC_SCRIPT_1156 = 1156;
	int CLIENTSCRIPT_SCRIPT_1157 = 1157;
	int CLIENTSCRIPT_SCRIPT_1158 = 1158;
	int CLIENTSCRIPT_SCRIPT_1159 = 1159;
	int PROC_SCRIPT_1160 = 1160;
	int PROC_SCRIPT_1161 = 1161;
	int CLIENTSCRIPT_SCRIPT_1162 = 1162;
	int CLIENTSCRIPT_DEADMANLOOT_ONLOAD = 1163;
	int CLIENTSCRIPT_DEADMANLOOT_ITEMNOTE_TRANSMIT = 1164;
	int CLIENTSCRIPT_DEADMANLOOT_ITEMNOTE_SWITCH = 1165;
	int PROC_DEADMANLOOT_ITEMNOTE_UPDATE = 1166;
	int CLIENTSCRIPT_DEADMAN_LOOTALL = 1167;
	int CLIENTSCRIPT_DEADMAN_LOOTALL_END = 1168;
	int CLIENTSCRIPT_DEADMANLOOT_VALUE_UPDATE = 1169;
	int CLIENTSCRIPT_DEADMANLOOT_INV_TRANSMIT = 1170;
	int PROC_DEADMANLOOT_INV_UPDATE = 1171;
	int CLIENTSCRIPT_DEADMANLOOT_TAB_TRANSMIT = 1172;
	int CLIENTSCRIPT_DEADMANLOOT_INV_SWITCH = 1173;
	int PROC_DEADMANLOOT_INV_SWITCH = 1174;
	int PROC_DEADMANLOOT_INV_TABS_REDRAW = 1175;
	int CLIENTSCRIPT_SCRIPT_1176 = 1176;
	int CLIENTSCRIPT_SCRIPT_1177 = 1177;
	int CLIENTSCRIPT_SCRIPT_1178 = 1178;
	int CLIENTSCRIPT_DREAM_MONSTER_POPULATE = 1179;
	int CLIENTSCRIPT_DREAM_MONSTER_SWITCH_TAB = 1180;
	int PROC_DREAM_MONSTER_SWITCH_TAB = 1181;
	int PROC_DEADMAN_SKULLDURATION = 1182;
	int CLIENTSCRIPT_CLANCUP_HUD_INIT = 1183;
	int CLIENTSCRIPT_CLANCUP_HUD_UPDATE = 1184;
	int PROC_CLANCUP_HUD_UPDATE = 1185;
	int CLIENTSCRIPT_KOUREND_SIDEPANEL_INIT = 1186;
	int CLIENTSCRIPT_KOUREND_SIDEPANEL_HUDTOGGLE = 1187;
	int CLIENTSCRIPT_KOUREND_SIDEPANEL_HUDOP = 1188;
	int PROC_KOUREND_SIDEPANEL_HUDTOGGLE = 1189;
	int CLIENTSCRIPT_SCRIPT_1190 = 1190;
	int CLIENTSCRIPT_THINSTONEBOX = 1191;
	int PROC_THINSTONEBOX = 1192;
	int CLIENTSCRIPT_HOSIDIUS_TITHE_HUD = 1193;
	int CLIENTSCRIPT_HOSIDIUS_TITHE_HUD_UPDATE = 1194;
	int PROC_HOSIDIUS_TITHE_HUD_UPDATE = 1195;
	int CLIENTSCRIPT_SCRIPT_1196 = 1196;
	int CLIENTSCRIPT_SCRIPT_1197 = 1197;
	int PROC_SCRIPT_1198 = 1198;
	int CLIENTSCRIPT_SCRIPT_1199 = 1199;
	int CLIENTSCRIPT_SCRIPT_1200 = 1200;
	int PROC_SCRIPT_1201 = 1201;
	int CLIENTSCRIPT_SCRIPT_1202 = 1202;
	int CLIENTSCRIPT_ZEAH_FAVOUR_INIT = 1203;
	int PROC_ZEAH_FAVOUR_INIT_TAB = 1204;
	int CLIENTSCRIPT_ZEAH_FAVOUR_SET_TAB = 1205;
	int PROC_ZEAH_FAVOUR_SET_TAB = 1206;
	int CLIENTSCRIPT_ZEAH_FAVOUR_TAB_MOUSEREPEAT = 1207;
	int PROC_ZEAH_FAVOUR_INIT_LIST = 1208;
	int PROC_ZEAH_FAVOUR_ADD_LIST = 1209;
	int CLIENTSCRIPT_ZEAH_FAVOUR_SETTITLE = 1210;
	int PROC_ZEAH_FAVOUR_SETTITLE = 1211;
	int CLIENTSCRIPT_ZEAH_FAVOUR_RECOLOUR_LIST = 1212;
	int PROC_ZEAH_FAVOUR_RECOLOUR_LIST = 1213;
	int PROC_ZEAH_FAVOUR_SORT = 1214;
	int CLIENTSCRIPT_ZEAH_FAVOUR_OVERLAY_INIT = 1215;
	int CLIENTSCRIPT_SCRIPT_1216 = 1216;
	int CLIENTSCRIPT_SCRIPT_1217 = 1217;
	int CLIENTSCRIPT_ZEAH_FAVOUR_OVERLAY_HIDESHOW = 1218;
	int PROC_ZEAH_FAVOUR_OVERLAY_HIDESHOW = 1219;
	int CLIENTSCRIPT_ZEAH_BORDER_FLASH = 1220;
	int CLIENTSCRIPT_ZEAH_FADE_BORDER = 1221;
	int CLIENTSCRIPT_ZEAH_OVERLAY_GROW = 1222;
	int CLIENTSCRIPT_ZEAH_OVERLAY_GROW_IT = 1223;
	int CLIENTSCRIPT_ZEAH_OVERLAY_SHRINK = 1224;
	int CLIENTSCRIPT_ZEAH_OVERLAY_SHRINK_IT = 1225;
	int CLIENTSCRIPT_ZEAH_FAVOUR_UPDATE = 1226;
	int PROC_KOUREND_SIDEPANEL_BUILD = 1227;
	int CLIENTSCRIPT_KOUREND_SIDEPANEL_UPDATE = 1228;
	int PROC_KOUREND_SIDEPANEL_UPDATE = 1229;
	int PROC_KOUREND_SIDEPANEL_TASKS_DEFAULT = 1230;
	int CLIENTSCRIPT_KOUREND_SIDEPANEL_TASKS_OP = 1231;
	int CLIENTSCRIPT_KOUREND_SIDEPANEL_TASKS_RESET = 1232;
	int CLIENTSCRIPT_SCRIPT_1233 = 1233;
	int PROC_TRADE_TOOLTIP = 1234;
	int CLIENTSCRIPT_SCRIPT_1235 = 1235;
	int CLIENTSCRIPT_SCRIPT_1236 = 1236;
	int PROC_SCRIPT_1237 = 1237;
	int CLIENTSCRIPT_SCRIPT_1238 = 1238;
	int PROC_SCRIPT_1239 = 1239;
	int CLIENTSCRIPT_FORGET_GREEN_COUNTER = 1240;
	int CLIENTSCRIPT_FORGET_YELLOW_COUNTER = 1241;
	int CLIENTSCRIPT_FORGET_INIT_TRACKS = 1242;
	int CLIENTSCRIPT_FORGET_INIT_SWITCHES = 1243;
	int CLIENTSCRIPT_FORGET_SET_SWITCHES = 1244;
	int PROC_FORGET_SET_SWITCH = 1245;
	int PROC_SCRIPT_1246 = 1246;
	int CLIENTSCRIPT_SCRIPT_1247 = 1247;
	int PROC_SCRIPT_1248 = 1248;
	int CLIENTSCRIPT_SCRIPT_1249 = 1249;
	int CLIENTSCRIPT_SCRIPT_1250 = 1250;
	int CLIENTSCRIPT_SCRIPT_1251 = 1251;
	int CLIENTSCRIPT_SCRIPT_1252 = 1252;
	int PROC_SCRIPT_1253 = 1253;
	int CLIENTSCRIPT_SCRIPT_1254 = 1254;
	int PROC_SCRIPT_1255 = 1255;
	int CLIENTSCRIPT_SCRIPT_1256 = 1256;
	int CLIENTSCRIPT_SCRIPT_1257 = 1257;
	int CLIENTSCRIPT_SCRIPT_1258 = 1258;
	int CLIENTSCRIPT_SCRIPT_1259 = 1259;
	int PROC_SCRIPT_1260 = 1260;
	int PROC_DEADMAN_TOURNAMENT_FOGCOLOUR = 1261;
	int CLIENTSCRIPT_DEADMAN_TOURNAMENT_REFRESH_INIT = 1262;
	int CLIENTSCRIPT_DEADMAN_TOURNAMENT_REFRESH_RESET = 1263;
	int PROC_DEADMAN_TOURNAMENT_REFRESH_RESET = 1264;
	int CLIENTSCRIPT_DEADMAN_TOURNAMENT_REFRESH_OP = 1265;
	int CLIENTSCRIPT_DEADMAN_TOURNAMENT_SENDNAMES = 1266;
	int CLIENTSCRIPT_DEADMAN_TOURNAMENT_OP = 1267;
	int CLIENTSCRIPT_DEADMAN_TOURNAMENT_SUBMIT = 1268;
	int CLIENTSCRIPT_BANKMAIN_TOGGLEPLACEHOLDERS_OP = 1269;
	int CLIENTSCRIPT_SCRIPT_1270 = 1270;
	int CLIENTSCRIPT_SCRIPT_1271 = 1271;
	int PROC_SCRIPT_1272 = 1272;
	int CLIENTSCRIPT_SCRIPT_1273 = 1273;
	int PROC_DEADMANPROTECT_CREATETAB = 1274;
	int CLIENTSCRIPT_DEADMANPROTECT_SETTAB = 1275;
	int PROC_DEADMANPROTECT_SETTAB = 1276;
	int PROC_DEADMANPROTECT_STATS_REFRESH_ALL = 1277;
	int PROC_DEADMANPROTECT_STATS_REFRESH = 1278;
	int PROC_SCRIPT_1279 = 1279;
	int PROC_SCRIPT_1280 = 1280;
	int CLIENTSCRIPT_SCRIPT_1281 = 1281;
	int PROC_SCRIPT_1282 = 1282;
	int WORLDMAPELEMENTMOUSEREPEAT_650 = 1283;
	int WORLDMAPELEMENTMOUSELEAVE_650 = 1284;
	int PROC_COLOUR_INTERPOLATE = 1285;
	int CLIENTSCRIPT_GLIDERMAP_INIT = 1286;
	int CLIENTSCRIPT_GLIDERMAP_HIDESHOW = 1287;
	int PROC_GLIDERMAP_HIDESHOW = 1288;
	int CLIENTSCRIPT_GLIDERMAP_FLY = 1289;
	int PROC_GLIDERMAP_FLY = 1290;
	int CLIENTSCRIPT_SCRIPT_1291 = 1291;
	int CLIENTSCRIPT_BR_LOADOUT_INIT = 1292;
	int CLIENTSCRIPT_BR_LOADOUT_MENUOP = 1293;
	int CLIENTSCRIPT_BR_LOADOUT_MENURESET = 1294;
	int CLIENTSCRIPT_BR_LOADOUT_MENUDRAGGING = 1295;
	int CLIENTSCRIPT_SCRIPT_1296 = 1296;
	int CLIENTSCRIPT_SLAYER_REWARDS_UNLOCK_DRAW = 1297;
	int PROC_SLAYER_REWARDS_UNLOCK_DESC = 1298;
	int PROC_SCRIPT_1299 = 1299;
	int CLIENTSCRIPT_SOULBEARER_REPAIR = 1300;
	int CLIENTSCRIPT_SOULBEARER_REPAIR_UPDATE = 1301;
	int PROC_SOULBEARER_REPAIR_UPDATE = 1302;
	int CLIENTSCRIPT_TOG_SIDEPANEL_INIT = 1303;
	int CLIENTSCRIPT_TOG_SIDEPANEL_TEARS = 1304;
	int PROC_TOG_SIDEPANEL_TEARS = 1305;
	int CLIENTSCRIPT_TOG_SIDEPANEL_TIMER = 1306;
	int CLIENTSCRIPT_TOG_SIDEPANEL_TIMER_UPDATE = 1307;
	int CLIENTSCRIPT_GE_HISTORY_MOUSEEFFECT = 1308;
	int CLIENTSCRIPT_POH_OPTIONS_VIEWER_INIT = 1309;
	int CLIENTSCRIPT_POH_OPTIONS_VIEWER_SET = 1310;
	int PROC_TOG_SIDEPANEL_TIMER = 1311;
	int CLIENTSCRIPT_SCRIPT_1312 = 1312;
	int CLIENTSCRIPT_CATA_ALTAR_UPDATE = 1313;
	int CLIENTSCRIPT_JAR_OF_DARKNESS = 1314;
	int CLIENTSCRIPT_JAR_OF_DARKNESS_UPDATE = 1315;
	int PROC_JAR_OF_DARKNESS_UPDATE = 1316;
	int PROC_SCRIPT_1317 = 1317;
	int CLIENTSCRIPT_BANKMAIN_INCINERATOR_ENABLEOP = 1318;
	int CLIENTSCRIPT_BANKMAIN_INCINERATOR_CLOSE = 1319;
	int PROC_STAT_F2PLEVEL = 1320;
	int CLIENTSCRIPT_SCRIPT_1321 = 1321;
	int CLIENTSCRIPT_SCRIPT_1322 = 1322;
	int PROC_SCRIPT_1323 = 1323;
	int CLIENTSCRIPT_SNAPSHOT_MUTE = 1324;
	int CLIENTSCRIPT_SNAPSHOT_IGNORE = 1325;
	int PROC_SNAPSHOT_TOGGLE = 1326;
	int CLIENTSCRIPT_II_TRACKER_BUILD = 1327;
	int PROC_II_TRACKER_BUILD_SPLIT = 1328;
	int PROC_II_TRACKER_BUILD_ELEMENT = 1329;
	int CLIENTSCRIPT_II_TRACKER_TAB_SELECT = 1330;
	int PROC_II_TRACKER_TAB_SELECT = 1331;
	int CLIENTSCRIPT_SCRIPT_1332 = 1332;
	int CLIENTSCRIPT_LIGHT_PUZZLE_INIT = 1333;
	int PROC_LIGHT_PUZZLE_BUTTON_SETUP = 1334;
	int CLIENTSCRIPT_LIGHT_PUZZLE_TEXT_MOUSEOVER = 1335;
	int CLIENTSCRIPT_LIGHT_PUZZLE_OP_BUTTON = 1336;
	int CLIENTSCRIPT_LIGHT_PUZZLE_BUTTON_RESET = 1337;
	int CLIENTSCRIPT_LIGHT_PUZZLE_UPDATE = 1338;
	int PROC_LIGHT_PUZZLE_UPDATE = 1339;
	int PROC_QUEST_F2P_COUNT = 1340;
	int PROC_QUICKSORT_COMPONENTTEXT = 1341;
	int PROC_QUICKSORT_COMPONENTENUM = 1342;
	int CLIENTSCRIPT_SCRIPT_1343 = 1343;
	int CLIENTSCRIPT_SCRIPT_1344 = 1344;
	int CLIENTSCRIPT_BR_FOGCOLOUR = 1345;
	int PROC_BR_FOGCOLOUR = 1346;
	int CLIENTSCRIPT_BR_HUD_INIT = 1347;
	int PROC_SCRIPT_1348 = 1348;
	int PROC_SETTINGS_BUFF_RESURRECTION = 1349;
	int CLIENTSCRIPT_QUESTLIST_INIT = 1350;
	int PROC_QUESTLIST_SECTIONINIT = 1351;
	int PROC_QUESTLIST_SORT = 1352;
	int CLIENTSCRIPT_QUESTLIST_SHOWPROGRESS = 1353;
	int PROC_QUESTLIST_SHOWPROGRESS = 1354;
	int CLIENTSCRIPT_QUESTLIST_QP = 1355;
	int PROC_QUESTLIST_QP = 1356;
	int CLIENTSCRIPT_MESOVERLAY_EXIT = 1357;
	int CLIENTSCRIPT_SCRIPT_1358 = 1358;
	int CLIENTSCRIPT_SCRIPT_1359 = 1359;
	int PROC_QUICKSORT_INTENUM = 1360;
	int PROC_WELCOME_SCREEN_LASTLOGIN = 1361;
	int CLIENTSCRIPT_WELCOME_SCREEN_MESSAGES = 1362;
	int CLIENTSCRIPT_BR_LOADOUT_DRAWLOADOUT_REQUEST = 1363;
	int CLIENTSCRIPT_BARBASSAULT_REWARD_SHOP_INIT = 1364;
	int CLIENTSCRIPT_SCRIPT_1365 = 1365;
	int PROC_SCRIPT_1366 = 1366;
	int PROC_SCRIPT_1367 = 1367;
	int CLIENTSCRIPT_SCRIPT_1368 = 1368;
	int PROC_SCRIPT_1369 = 1369;
	int PROC_SCRIPT_1370 = 1370;
	int PROC_SCRIPT_1371 = 1371;
	int PROC_SCRIPT_1372 = 1372;
	int PROC_SCRIPT_1373 = 1373;
	int PROC_SCRIPT_1374 = 1374;
	int PROC_POH_OPTIONS_VIEWER_SET = 1375;
	int CLIENTSCRIPT_POH_VIEWER_SETROOM = 1376;
	int PROC_POH_VIEWER_ROOMTOOLTIP = 1377;
	int CLIENTSCRIPT_POH_VIEWER_ROOM_INDICATOR = 1378;
	int CLIENTSCRIPT_POH_VIEWER_ROOM_OP = 1379;
	int PROC_POH_VIEWER_ROOM_INDICATOR = 1380;
	int CLIENTSCRIPT_POH_VIEWER_ROOM_HOVER = 1381;
	int CLIENTSCRIPT_SCRIPT_1382 = 1382;
	int PROC_SCRIPT_1383 = 1383;
	int CLIENTSCRIPT_POH_VIEWER_PREVIEW_POSITION = 1384;
	int PROC_SCRIPT_1385 = 1385;
	int PROC_SCRIPT_1386 = 1386;
	int PROC_SCRIPT_1387 = 1387;
	int CLIENTSCRIPT_POH_VIEWER_SETLEVEL = 1388;
	int PROC_POH_VIEWER_SETLEVEL = 1389;
	int PROC_POH_VIEWER_HANDLELEVEL = 1390;
	int PROC_SCRIPT_1391 = 1391;
	int PROC_SCRIPT_1392 = 1392;
	int CLIENTSCRIPT_POH_VIEWER_PREVIEW_PULSE = 1393;
	int PROC_POH_VIEWER_PREVIEW_PULSE = 1394;
	int CLIENTSCRIPT_POH_VIEWER_SIDEINIT = 1395;
	int CLIENTSCRIPT_POH_VIEWER_SIDEUPDATE = 1396;
	int PROC_POH_VIEWER_SIDEUPDATE = 1397;
	int PROC_POH_VIEWER_DISABLEBUTTON = 1398;
	int PROC_POH_VIEWER_ENABLEBUTTON = 1399;
	int PROC_POH_VIEWER_DISABLEROTATE = 1400;
	int PROC_POH_VIEWER_ENABLEROTATE = 1401;
	int CLIENTSCRIPT_POH_VIEWER_OPBUTTON = 1402;
	int CLIENTSCRIPT_POH_VIEWER_ROTATE_TIMEOUT = 1403;
	int CLIENTSCRIPT_SCRIPT_1404 = 1404;
	int CLIENTSCRIPT_SCRIPT_1405 = 1405;
	int CLIENTSCRIPT_SCRIPT_1406 = 1406;
	int PROC_SCRIPT_1407 = 1407;
	int CLIENTSCRIPT_CHAMPIONS_LOG = 1408;
	int PROC_CHAMPIONS_LOG_BUILD = 1409;
	int PROC_INPUTSTRING_TELEVERTICAL = 1410;
	int CLIENTSCRIPT_QUESTDISPLAY = 1411;
	int PROC_QUESTDISPLAY_SETUP = 1412;
	int CLIENTSCRIPT_SCRIPT_1413 = 1413;
	int PROC_HP_HUD_UPDATE_BAR = 1414;
	int CLIENTSCRIPT_NIGHTMARE_PORTAL_REMOVE = 1415;
	int CLIENTSCRIPT_SCRIPT_1416 = 1416;
	int CLIENTSCRIPT_SCRIPT_1417 = 1417;
	int CLIENTSCRIPT_BR_TOURNAMENT_SENDNAMES = 1418;
	int CLIENTSCRIPT_BR_TOURNAMENT_OP = 1419;
	int CLIENTSCRIPT_BR_TOURNAMENT_SUBMIT = 1420;
	int CLIENTSCRIPT_WINT_UPDATE = 1421;
	int CLIENTSCRIPT_BLAST_FURNACE_HUD_INIT = 1422;
	int CLIENTSCRIPT_BLAST_FURNACE_HUD_UPDATE = 1423;
	int PROC_BLAST_FURNACE_HUD_UPDATE = 1424;
	int PROC_MINMAX = 1425;
	int CLIENTSCRIPT_TOL_PRESSURE_LEVEROP = 1426;
	int CLIENTSCRIPT_TOL_PRESSURE_INIT = 1427;
	int CLIENTSCRIPT_SCRIPT_1428 = 1428;
	int CLIENTSCRIPT_SCRIPT_1429 = 1429;
	int CLIENTSCRIPT_SCRIPT_1430 = 1430;
	int PROC_SCRIPT_1431 = 1431;
	int CLIENTSCRIPT_WINT_OUTSIDE_EVENT = 1432;
	int CLIENTSCRIPT_WINT_INSIDE_EVENT = 1433;
	int PROC_SCRIPT_1434 = 1434;
	int CLIENTSCRIPT_CWS_INIT = 1435;
	int PROC_CWS_INIT_BUTTON = 1436;
	int CLIENTSCRIPT_SCRIPT_1437 = 1437;
	int CLIENTSCRIPT_CWS_SET_TOGGLE = 1438;
	int PROC_CWS_SET_TOGGLE = 1439;
	int CLIENTSCRIPT_CWS_RESPONSE_TOGGLE = 1440;
	int CLIENTSCRIPT_DUEL_WAIT_BUTTON = 1441;
	int PROC_DUEL_WAIT_BUTTON = 1442;
	int CLIENTSCRIPT_DUEL_ACCEPT_BUTTON = 1443;
	int PROC_DUEL_COLOUR_VARIATION = 1444;
	int CLIENTSCRIPT_DUEL_OPTIONS_EXCLAMATIONS = 1445;
	int PROC_PLAYERMEMBER = 1446;
	int CLIENTSCRIPT_SCRIPT_1447 = 1447;
	int PROC_SCRIPT_1448 = 1448;
	int CLIENTSCRIPT_DUEL_STAKE_EXCLAMATIONS = 1449;
	int CLIENTSCRIPT_DUEL_STAKE_CHANGED = 1450;
	int PROC_DUEL_CHECK_BUTTON = 1451;
	int CLIENTSCRIPT_SCRIPT_1452 = 1452;
	int PROC_SCRIPT_1453 = 1453;
	int CLIENTSCRIPT_ZMI_BANK_PAYMENT_INIT = 1454;
	int CLIENTSCRIPT_BANK_PAYMENT_DRAW = 1455;
	int PROC_BANK_PAYMENT_DRAW = 1456;
	int CLIENTSCRIPT_SCRIPT_1457 = 1457;
	int CLIENTSCRIPT_ZMI_BANK_PAYMENT_SELECTION_RESET = 1458;
	int CLIENTSCRIPT_AGILITYARENA_REWARDS_DRAW = 1459;
	int CLIENTSCRIPT_LUMBRIDGE_ALCHEMY_INIT = 1460;
	int CLIENTSCRIPT_LUMBRIDGE_ALCHEMY_INVTRANSMIT = 1461;
	int PROC_LUMBRIDGE_ALCHEMY_INVTRANSMIT = 1462;
	int CLIENTSCRIPT_LUMBRIDGE_ALCHEMY_VARTRANSMIT = 1463;
	int PROC_LUMBRIDGE_ALCHEMY_VARTRANSMIT = 1464;
	int CLIENTSCRIPT_SCRIPT_1465 = 1465;
	int CLIENTSCRIPT_SCRIPT_1466 = 1466;
	int CLIENTSCRIPT_SCRIPT_1467 = 1467;
	int PROC_SCRIPT_1468 = 1468;
	int CLIENTSCRIPT_SCRIPT_1469 = 1469;
	int CLIENTSCRIPT_SCRIPT_1470 = 1470;
	int CLIENTSCRIPT_SCRIPT_1471 = 1471;
	int CLIENTSCRIPT_SCRIPT_1472 = 1472;
	int PROC_SCRIPT_1473 = 1473;
	int PROC_SCRIPT_1474 = 1474;
	int CLIENTSCRIPT_HIDEY_BUILD = 1475;
	int CLIENTSCRIPT_HIDEY_BUILDLISTS = 1476;
	int PROC_HIDEY_BUILDLISTS = 1477;
	int PROC_HIDEY_BUILD_TAB = 1478;
	int PROC_HH_GET_STATUS = 1479;
	int CLIENTSCRIPT_HIDEY_TABBUTTONS = 1480;
	int PROC_HIDEY_TABBUTTONS = 1481;
	int PROC_HIDEY_TABBUTTONS_DRAW = 1482;
	int CLIENTSCRIPT_HIDEY_TABBUTTONS_HOVER = 1483;
	int PROC_TRAIL_SLIDEPUZZLE_GETINT = 1484;
	int PROC_TRAIL_SLIDEPUZZLE_SETINT = 1485;
	int PROC_SCRIPT_1486 = 1486;
	int CLIENTSCRIPT_SCRIPT_1487 = 1487;
	int CLIENTSCRIPT_SCRIPT_1488 = 1488;
	int PROC_SCRIPT_1489 = 1489;
	int PROC_SCRIPT_1490 = 1490;
	int PROC_QUICKSORT_CCTEXT = 1491;
	int CLIENTSCRIPT_ORBS_WORLDMAP_INIT = 1492;
	int CLIENTSCRIPT_PEST_ACTIVITY_UPDATE = 1493;
	int PROC_PEST_ACTIVITY_UPDATE = 1494;
	int CLIENTSCRIPT_SCRIPT_1495 = 1495;
	int CLIENTSCRIPT_AGILITYARENA_REWARDS_SETGRACEFULBUTTON = 1496;
	int PROC_AGILITYARENA_REWARDS_SETGRACEFULBUTTON = 1497;
	int CLIENTSCRIPT_SCRIPT_1498 = 1498;
	int CLIENTSCRIPT_SCRIPT_1499 = 1499;
	int CLIENTSCRIPT_SCRIPT_1500 = 1500;
	int PROC_SCRIPT_1501 = 1501;
	int PROC_SCRIPT_1502 = 1502;
	int PROC_STRING_PREPENDZERO = 1503;
	int CLIENTSCRIPT_SCRIPT_1504 = 1504;
	int CLIENTSCRIPT_RAIDS_OVERLAY_INIT = 1505;
	int PROC_SCRIPT_1506 = 1506;
	int CLIENTSCRIPT_SCRIPT_1507 = 1507;
	int CLIENTSCRIPT_SCRIPT_1508 = 1508;
	int CLIENTSCRIPT_SCRIPT_1509 = 1509;
	int CLIENTSCRIPT_RAIDS_OVERLAY_DATABOX = 1510;
	int PROC_RAIDS_OVERLAY_DATABOX = 1511;
	int CLIENTSCRIPT_RAIDS_FADEOUT = 1512;
	int CLIENTSCRIPT_RAIDS_FADEIN = 1513;
	int CLIENTSCRIPT_RAIDS_FADER_UPDATE = 1514;
	int PROC_RAIDS_FADER_UPDATE = 1515;
	int CLIENTSCRIPT_RAIDS_PARTYDETAILS_INIT = 1516;
	int CLIENTSCRIPT_RAIDS_PARTYDETAILS_ADDLINE = 1517;
	int PROC_RAIDS_PARTYDETAILS_ENTRY_INIT = 1518;
	int CLIENTSCRIPT_RAIDS_PARTYDETAILS_ENTRY_SETUP = 1519;
	int PROC_RAIDS_PARTYDETAILS_ENTRY_SETUP = 1520;
	int CLIENTSCRIPT_RAIDS_PARTYDETAILS_ENTRY_OP = 1521;
	int CLIENTSCRIPT_RAIDS_PARTYDETAILS_CLOSESTATS = 1522;
	int PROC_RAIDS_PARTYDETAILS_CLOSESTATS = 1523;
	int CLIENTSCRIPT_SCRIPT_1524 = 1524;
	int PROC_RAIDS_PARTYDETAILS_SETSORT = 1525;
	int PROC_RAIDS_PARTYDETAILS_SORT = 1526;
	int PROC_RAIDS_PARTYDETAILS_SORTBUTTON_DRAW = 1527;
	int CLIENTSCRIPT_SCRIPT_1528 = 1528;
	int CLIENTSCRIPT_RAIDS_PARTYDETAILS_CLICKSORT = 1529;
	int PROC_SCRIPT_1530 = 1530;
	int PROC_SCRIPT_1531 = 1531;
	int CLIENTSCRIPT_SCRIPT_1532 = 1532;
	int PROC_SCRIPT_1533 = 1533;
	int CLIENTSCRIPT_SCRIPT_1534 = 1534;
	int CLIENTSCRIPT_SCRIPT_1535 = 1535;
	int CLIENTSCRIPT_SCRIPT_1536 = 1536;
	int PROC_SCRIPT_1537 = 1537;
	int CLIENTSCRIPT_RAIDS_SIDEPANEL_INIT = 1538;
	int CLIENTSCRIPT_RAIDS_SIDEPANEL_DATA = 1539;
	int PROC_RAIDS_SIDEPANEL_DATA = 1540;
	int CLIENTSCRIPT_RAIDS_SIDEPANEL_DRAWBUTTON = 1541;
	int PROC_RAIDS_SIDEPANEL_DRAWBUTTON = 1542;
	int CLIENTSCRIPT_RAIDS_SIDEPANEL_OPBUTTON = 1543;
	int CLIENTSCRIPT_RAIDS_SIDEPANEL_RESETBUTTON = 1544;
	int CLIENTSCRIPT_RAIDS_SIDEPANEL_REFRESH = 1545;
	int PROC_RAIDS_SIDEPANEL_REFRESHEFFECT = 1546;
	int CLIENTSCRIPT_RAIDS_SIDEPANEL_INITLINES = 1547;
	int CLIENTSCRIPT_RAIDS_SIDEPANEL_ADDLINE = 1548;
	int PROC_RAIDS_SIDEPANEL_ENTRY_INIT = 1549;
	int CLIENTSCRIPT_RAIDS_SIDEPANEL_ENTRY_SETUP = 1550;
	int PROC_RAIDS_SIDEPANEL_ENTRY_SETUP = 1551;
	int CLIENTSCRIPT_RAIDS_SIDEPANEL_ENTRY_OP = 1552;
	int CLIENTSCRIPT_SCRIPT_1553 = 1553;
	int PROC_RAIDS_SIDEPANEL_SETSORT = 1554;
	int PROC_RAIDS_SIDEPANEL_SORT = 1555;
	int PROC_RAIDS_SIDEPANEL_SORTBUTTON_DRAW = 1556;
	int CLIENTSCRIPT_RAIDS_SIDEPANEL_CLICKSORT = 1557;
	int PROC_SCRIPT_1558 = 1558;
	int CLIENTSCRIPT_SCRIPT_1559 = 1559;
	int PROC_SCRIPT_1560 = 1560;
	int CLIENTSCRIPT_SCRIPT_1561 = 1561;
	int CLIENTSCRIPT_SCRIPT_1562 = 1562;
	int CLIENTSCRIPT_RAIDS_PARTYLIST_INIT = 1563;
	int CLIENTSCRIPT_RAIDS_PARTYLIST_SETPARTYBUTTON = 1564;
	int PROC_RAIDS_PARTYLIST_SETPARTYBUTTON = 1565;
	int CLIENTSCRIPT_RAIDS_PARTYLIST_ADDLINE = 1566;
	int PROC_RAIDS_PARTYLIST_ENTRY_INIT = 1567;
	int CLIENTSCRIPT_RAIDS_PARTYLIST_OP = 1568;
	int CLIENTSCRIPT_RAIDS_PARTYLIST_RESET = 1569;
	int PROC_RAIDS_PARTYLIST_SETSORT = 1570;
	int PROC_RAIDS_PARTYLIST_SORT = 1571;
	int PROC_RAIDS_PARTYLIST_SORTBUTTON_DRAW = 1572;
	int CLIENTSCRIPT_RAIDS_PARTYLIST_CLICKSORT = 1573;
	int PROC_RAIDS_PARTYLIST_AGE_INIT = 1574;
	int PROC_RAIDS_PARTYLIST_AGE_WRITE = 1575;
	int CLIENTSCRIPT_RAIDS_PARTYLIST_AGE_UPDATE = 1576;
	int CLIENTSCRIPT_BARROWS_OVERLAY_REWARD = 1577;
	int PROC_BARROWS_OVERLAY_REWARD = 1578;
	int CLIENTSCRIPT_RAIDS_REWARDS_INIT = 1579;
	int CLIENTSCRIPT_RAIDS_REWARDS_BUILD = 1580;
	int PROC_RAIDS_REWARDS_BUILD = 1581;
	int PROC_RAIDS_REWARDS_DRAWITEM = 1582;
	int CLIENTSCRIPT_RAIDS_REWARDS_OP = 1583;
	int CLIENTSCRIPT_KILLCOUNTS = 1584;
	int CLIENTSCRIPT_SCRIPT_1585 = 1585;
	int PROC_SCRIPT_1586 = 1586;
	int CLIENTSCRIPT_SCRIPT_1587 = 1587;
	int CLIENTSCRIPT_SCRIPT_1588 = 1588;
	int CLIENTSCRIPT_RAIDS_STORAGE_SHARED_INIT = 1589;
	int CLIENTSCRIPT_RAIDS_STORAGE_SHARED_WARNING = 1590;
	int CLIENTSCRIPT_RAIDS_STORAGE_SHARED_ITEMS = 1591;
	int PROC_RAIDS_STORAGE_SHARED_ITEMS = 1592;
	int CLIENTSCRIPT_DISPLAYNAME_STATUSFLASH = 1593;
	int PROC_DISPLAYNAME_STATUSSTATIC = 1594;
	int PROC_AGILITYARENA_REWARDS_DRAW = 1595;
	int CLIENTSCRIPT_SILVER_CRAFTING_INIT = 1596;
	int CLIENTSCRIPT_DEADMAN_DELAY_ABORTION = 1597;
	int PROC_SKILL_GUIDE_SUBSECTION_HUNTER = 1598;
	int PROC_SKILL_GUIDE_DATA_HUNTER = 1599;
	int PROC_ADVENTUREPATH_REPLACE = 1600;
	int CLIENTSCRIPT_BUTTON_SELECT_SOUND = 1601;
	int PROC_RAIDS_STORAGE_SHARED_WARNING = 1602;
	int CLIENTSCRIPT_ADVENTUREPATH_VOUCHER_OP_INIT = 1603;
	int CLIENTSCRIPT_RAIDS_STORAGE_PRIVATE_PROMPT = 1604;
	int PROC_RAIDS_STORAGE_PRIVATE_PROMPT = 1605;
	int CLIENTSCRIPT_RAIDS_STORAGE_PRIVATE_ITEMS = 1606;
	int PROC_RAIDS_STORAGE_PRIVATE_ITEMS = 1607;
	int PROC_RAIDS_STORAGE_PRIVATE_DRAWITEM = 1608;
	int CLIENTSCRIPT_RAIDS_STORAGE_PRIVATE_DRAGSCROLL = 1609;
	int CLIENTSCRIPT_RAIDS_STORAGE_PRIVATE_REORDER = 1610;
	int PROC_RAIDS_STORAGE_DRAWBUTTON = 1611;
	int CLIENTSCRIPT_RAIDS_STORAGE_OPBUTTON = 1612;
	int CLIENTSCRIPT_RAIDS_STORAGE_RESETBUTTON = 1613;
	int CLIENTSCRIPT_RAIDS_STORAGE_SIDE_INIT = 1614;
	int CLIENTSCRIPT_RAIDS_STORAGE_SIDE_SETUP = 1615;
	int PROC_RAIDS_STORAGE_SIDE_SETUP = 1616;
	int PROC_RAIDS_STORAGE_SIDE_DISMISS_ENABLE = 1617;
	int CLIENTSCRIPT_RAIDS_STORAGE_SIDE_DISMISS = 1618;
	int CLIENTSCRIPT_RAIDS_STORAGE_SIDE_DISMISS_RESET = 1619;
	int CLIENTSCRIPT_RAIDS_STORAGE_SIDE_ITEMS = 1620;
	int PROC_RAIDS_STORAGE_SIDE_ITEMS = 1621;
	int PROC_RAIDS_STORAGE_SIDE_PRIVATE_DRAWITEM = 1622;
	int CLIENTSCRIPT_RAIDS_STORAGE_SIDE_REORDER = 1623;
	int PROC_RAIDS_STORAGE_SIDE_WARNING = 1624;
	int PROC_GLIDERMAP_SHOWGLIDER = 1625;
	int PROC_GLIDERMAP_HIDEGLIDER = 1626;
	int PROC_SCRIPT_1627 = 1627;
	int PROC_STORAGE_MAIN_UPDATE_VARTRANSMIT = 1628;
	int PROC_STORAGE_GETSTORED = 1629;
	int PROC_STORAGE_GETCARRIED = 1630;
	int PROC_SCRIPT_1631 = 1631;
	int CLIENTSCRIPT_SCRIPT_1632 = 1632;
	int CLIENTSCRIPT_MOTHERLODE_HUD_INIT = 1633;
	int CLIENTSCRIPT_MOTHERLODE_HUD_UPDATE = 1634;
	int PROC_MOTHERLODE_HUD_UPDATE = 1635;
	int CLIENTSCRIPT_SCRIPT_1636 = 1636;
	int CLIENTSCRIPT_DEADMAN_TOURNAMENT_TIMER_RESYNCH = 1637;
	int PROC_DEADMAN_TOURNAMENT_TIMER_RESYNCH = 1638;
	int CLIENTSCRIPT_DEADMAN_TOURNAMENT_TIMER_UPDATE = 1639;
	int PROC_DEADMAN_TOURNAMENT_TIMER_UPDATE = 1640;
	int CLIENTSCRIPT_DEADMAN_TOURNAMENT_HUDUPDATE = 1641;
	int PROC_DEADMAN_TOURNAMENT_HUDUPDATE = 1642;
	int CLIENTSCRIPT_DEADMAN_FINALLOCATION = 1643;
	int CLIENTSCRIPT_GE_HISTORY_INIT = 1644;
	int CLIENTSCRIPT_GE_HISTORY_ADDLINE = 1645;
	int CLIENTSCRIPT_GE_HISTORY_FINISH = 1646;
	int PROC_SCRIPT_1647 = 1647;
	int PROC_SCRIPT_1648 = 1648;
	int PROC_STORAGE_MAIN_CREATE = 1649;
	int CLIENTSCRIPT_STORAGE_MAIN_RECREATE = 1650;
	int CLIENTSCRIPT_CONFIRMDESTROY_TRIGGERBUTTON = 1651;
	int CLIENTSCRIPT_CONFIRMDESTROY_RESETBUTTON = 1652;
	int PROC_IGNORE_SORTBUTTON_DRAW = 1653;
	int CLIENTSCRIPT_IGNORE_SORTBUTTON_CLICKSORT = 1654;
	int PROC_SCRIPT_1655 = 1655;
	int CLIENTSCRIPT_CHATCHANNEL_CURRENT_INIT = 1656;
	int CLIENTSCRIPT_CHATCHANNEL_CURRENT_BUILD = 1657;
	int PROC_CHATCHANNEL_CURRENT_BUILD = 1658;
	int PROC_SCRIPT_1659 = 1659;
	int CLIENTSCRIPT_CHATCHANNEL_CURRENT_SORTBUTTON_CLICKSORT = 1660;
	int CLIENTSCRIPT_KEYBOARD_KEY = 1661;
	int CLIENTSCRIPT_CHATCHANNEL_SETUP_INIT = 1662;
	int CLIENTSCRIPT_CHATCHANNEL_SETUP_BUILD = 1663;
	int PROC_CHATCHANNEL_SETUP_BUILD = 1664;
	int PROC_SCRIPT_1665 = 1665;
	int CLIENTSCRIPT_CHATCHANNEL_SETUP_SORTBUTTON_CLICKSORT = 1666;
	int CLIENTSCRIPT_CHATCHANNEL_SETUP_SETRANK = 1667;
	int CLIENTSCRIPT_SCRIPT_1668 = 1668;
	int PROC_FRIENDS_SORTBUTTON_DRAW = 1669;
	int CLIENTSCRIPT_FRIENDS_SORTBUTTON_CLICKSORT = 1670;
	int CLIENTSCRIPT_SCRIPT_1671 = 1671;
	int PROC_DISPLAYNAME_BUTTON_INIT = 1672;
	int CLIENTSCRIPT_DISPLAYNAME_BUTTON_OP = 1673;
	int CLIENTSCRIPT_DISPLAYNAME_BUTTON_RESET = 1674;
	int CLIENTSCRIPT_DISPLAYNAME_BUTTON_DRAW = 1675;
	int PROC_DISPLAYNAME_BUTTON_DRAW = 1676;
	int PROC_DISPLAYNAME_DISABLEBUTTON = 1677;
	int PROC_SCRIPT_1678 = 1678;
	int CLIENTSCRIPT_SCRIPT_1679 = 1679;
	int CLIENTSCRIPT_SCRIPT_1680 = 1680;
	int CLIENTSCRIPT_SCRIPT_1681 = 1681;
	int PROC_SCRIPT_1682 = 1682;
	int PROC_SCRIPT_1683 = 1683;
	int CLIENTSCRIPT_SCRIPT_1684 = 1684;
	int CLIENTSCRIPT_POH_JEWELLERY_BOX_INIT = 1685;
	int PROC_POH_JEWELLERY_BOX_PREPBOX = 1686;
	int PROC_POH_JEWELLERYBOX_GETBUTTONSPACING = 1687;
	int PROC_POH_JEWELLERY_BOX_ADDBUTTON = 1688;
	int CLIENTSCRIPT_POH_JEWELLERY_BOX_KEYPRESS = 1689;
	int CLIENTSCRIPT_POH_JEWELLERY_BOX_OP = 1690;
	int PROC_POH_JEWELLERY_BOX_ACTIVATE = 1691;
	int CLIENTSCRIPT_POH_JEWELLERY_BOX_TIMEOUT = 1692;
	int CLIENTSCRIPT_SCRIPT_1693 = 1693;
	int PROC_SCRIPT_1694 = 1694;
	int PROC_SCRIPT_1695 = 1695;
	int PROC_AGILITYARENA_REWARDS_INITBUTTON = 1696;
	int PROC_MAGIC_SPACER_TOSTRING = 1697;
	int CLIENTSCRIPT_BLAST_MINING_HUD_INIT = 1698;
	int CLIENTSCRIPT_ORBS_WORLDMAP_SETUP = 1699;
	int PROC_ORBS_WORLDMAP_SETUP = 1700;
	int PROC_KEYPRESS_PERMIT = 1701;
	int PROC_WORLDMAP_ELEMENTS_UPDATE = 1702;
	int OPWORLDMAPELEMENT1_13 = 1703;
	int OPWORLDMAPELEMENT1_14 = 1704;
	int PROC_SCRIPT_1705 = 1705;
	int PROC_SCRIPT_1706 = 1706;
	int CLIENTSCRIPT_WORLDMAP_INIT = 1707;
	int CLIENTSCRIPT_WORLDMAP_MAPLIST_OPEN = 1708;
	int CLIENTSCRIPT_WORLDMAP_MAPLIST_CLOSE = 1709;
	int PROC_WORLDMAP_MAPLIST_CLOSE = 1710;
	int CLIENTSCRIPT_WORLDMAP_MAPLIST_SELECT = 1711;
	int PROC_WORLDMAP_LOADMAP = 1712;
	int CLIENTSCRIPT_SCRIPT_1713 = 1713;
	int CLIENTSCRIPT_WORLDMAP_OVERVIEW_CLICK = 1714;
	int PROC_WORLDMAP_FINDCOORDINMAP = 1715;
	int PROC_WORLDMAP_TOGGLES_CREATEBUTTON = 1716;
	int PROC_WORLDMAP_TOGGLES_ENABLEBUTTON = 1717;
	int CLIENTSCRIPT_WORLDMAP_TOGGLES_OP = 1718;
	int CLIENTSCRIPT_WORLDMAP_TOGGLES_VARTRANSMIT = 1719;
	int PROC_WORLDMAP_TOGGLES_SET = 1720;
	int PROC_WORLDMAP_APPLYZOOM = 1721;
	int PROC_WORLDMAP_ZOOMBUTTON_BUILD = 1722;
	int CLIENTSCRIPT_WORLDMAP_ZOOMBUTTON_DRAW = 1723;
	int PROC_WORLDMAP_ZOOMBUTTON_DRAW = 1724;
	int CLIENTSCRIPT_WORLDMAP_ZOOM_SCROLL = 1725;
	int CLIENTSCRIPT_WORLDMAP_ZOOM_ADJUST = 1726;
	int PROC_WORLDMAP_ZOOM_ADJUST = 1727;
	int CLIENTSCRIPT_WORLDMAP_KEYFLASH = 1728;
	int CLIENTSCRIPT_WORLDMAP_KEYRESET = 1729;
	int PROC_WORLDMAP_KEYBUTTON = 1730;
	int PROC_WORLDMAP_KEYSORT = 1731;
	int CLIENTSCRIPT_WORLDMAP_KEY_TOGGLE = 1732;
	int PROC_WORLDMAP_KEY_TOGGLE = 1733;
	int CLIENTSCRIPT_WORLDMAP_SEARCH_OFF = 1734;
	int PROC_WORLDMAP_SEARCH_OFF = 1735;
	int CLIENTSCRIPT_WORLDMAP_SEARCH_START = 1736;
	int CLIENTSCRIPT_WORLDMAP_SEARCH_INPUT = 1737;
	int PROC_WORLDMAP_SEARCH_UPDATE = 1738;
	int PROC_SCRIPT_1739 = 1739;
	int CLIENTSCRIPT_WORLDMAP_SIZE_HANDLER = 1740;
	int PROC_WORLDMAP_SIZE_HANDLER = 1741;
	int CLIENTSCRIPT_WORLDMAP_OVERVIEW_TOGGLE = 1742;
	int PROC_WORLDMAP_OVERVIEW_TOGGLE = 1743;
	int CLIENTSCRIPT_WORLDMAP_HOVERTOGGLE = 1744;
	int PROC_WORLDMAP_WINDOW_SET = 1745;
	int PROC_SCRIPT_1746 = 1746;
	int CLIENTSCRIPT_WORLDMAP_WINDOW_DRAG_PREVIEW = 1747;
	int CLIENTSCRIPT_WORLDMAP_WINDOW_DRAG_END = 1748;
	int CLIENTSCRIPT_WORLDMAP_TRANSMITDATA = 1749;
	int CLIENTSCRIPT_WORLDMAP_OVERLAY = 1750;
	int PROC_WORLDMAP_OVERLAY_CLEAR = 1751;
	int PROC_WORLDMAP_ELEMENTS_CHOOSEPOSITION = 1752;
	int PROC_SCRIPT_1753 = 1753;
	int PROC_SCRIPT_1754 = 1754;
	int CLIENTSCRIPT_SCRIPT_1755 = 1755;
	int CLIENTSCRIPT_SCRIPT_1756 = 1756;
	int PROC_WORLDMAP_ELEMENTS_MARKER = 1757;
	int CLIENTSCRIPT_SCRIPT_1758 = 1758;
	int PROC_SCRIPT_1759 = 1759;
	int WORLDMAPELEMENTMOUSEREPEAT_0 = 1760;
	int WORLDMAPELEMENTMOUSEREPEAT_1 = 1761;
	int WORLDMAPELEMENTMOUSEREPEAT_2 = 1762;
	int WORLDMAPELEMENTMOUSEREPEAT_3 = 1763;
	int WORLDMAPELEMENTMOUSEREPEAT_4 = 1764;
	int WORLDMAPELEMENTMOUSEREPEAT_5 = 1765;
	int CLIENTSCRIPT_HELPER_AGILITY_HIGHLIGHT_OBSTACLES = 1766;
	int WORLDMAPELEMENTMOUSEREPEAT_7 = 1767;
	int WORLDMAPELEMENTMOUSEREPEAT_8 = 1768;
	int WORLDMAPELEMENTMOUSEREPEAT_9 = 1769;
	int WORLDMAPELEMENTMOUSEREPEAT_10 = 1770;
	int WORLDMAPELEMENTMOUSEREPEAT_11 = 1771;
	int WORLDMAPELEMENTMOUSEREPEAT_12 = 1772;
	int WORLDMAPELEMENTMOUSEREPEAT_13 = 1773;
	int WORLDMAPELEMENTMOUSEREPEAT_14 = 1774;
	int WORLDMAPELEMENTMOUSEREPEAT_15 = 1775;
	int WORLDMAPELEMENTMOUSEREPEAT_16 = 1776;
	int WORLDMAPELEMENTMOUSEREPEAT_17 = 1777;
	int WORLDMAPELEMENTMOUSEREPEAT_18 = 1778;
	int WORLDMAPELEMENTMOUSEREPEAT_19 = 1779;
	int WORLDMAPELEMENTMOUSEREPEAT_20 = 1780;
	int WORLDMAPELEMENTMOUSEREPEAT_21 = 1781;
	int WORLDMAPELEMENTMOUSEREPEAT_22 = 1782;
	int WORLDMAPELEMENTMOUSEREPEAT_23 = 1783;
	int WORLDMAPELEMENTMOUSEREPEAT_24 = 1784;
	int WORLDMAPELEMENTMOUSEREPEAT_25 = 1785;
	int WORLDMAPELEMENTMOUSEREPEAT_26 = 1786;
	int WORLDMAPELEMENTMOUSEREPEAT_27 = 1787;
	int WORLDMAPELEMENTMOUSEREPEAT_28 = 1788;
	int WORLDMAPELEMENTMOUSEREPEAT_29 = 1789;
	int WORLDMAPELEMENTMOUSEREPEAT_30 = 1790;
	int WORLDMAPELEMENTMOUSEREPEAT_31 = 1791;
	int WORLDMAPELEMENTMOUSEREPEAT_32 = 1792;
	int WORLDMAPELEMENTMOUSEREPEAT_33 = 1793;
	int WORLDMAPELEMENTMOUSEREPEAT_34 = 1794;
	int WORLDMAPELEMENTMOUSEREPEAT_35 = 1795;
	int WORLDMAPELEMENTMOUSEREPEAT_36 = 1796;
	int WORLDMAPELEMENTMOUSEREPEAT_37 = 1797;
	int WORLDMAPELEMENTMOUSEREPEAT_38 = 1798;
	int WORLDMAPELEMENTMOUSEREPEAT_39 = 1799;
	int WORLDMAPELEMENTMOUSEREPEAT_40 = 1800;
	int WORLDMAPELEMENTMOUSEREPEAT_41 = 1801;
	int WORLDMAPELEMENTMOUSEREPEAT_42 = 1802;
	int WORLDMAPELEMENTMOUSEREPEAT_43 = 1803;
	int WORLDMAPELEMENTMOUSEREPEAT_44 = 1804;
	int WORLDMAPELEMENTMOUSEREPEAT_45 = 1805;
	int WORLDMAPELEMENTMOUSEREPEAT_46 = 1806;
	int WORLDMAPELEMENTMOUSEREPEAT_47 = 1807;
	int WORLDMAPELEMENTMOUSEREPEAT_48 = 1808;
	int WORLDMAPELEMENTMOUSEREPEAT_49 = 1809;
	int WORLDMAPELEMENTMOUSEREPEAT_50 = 1810;
	int WORLDMAPELEMENTMOUSEREPEAT_51 = 1811;
	int WORLDMAPELEMENTMOUSEREPEAT_52 = 1812;
	int WORLDMAPELEMENTMOUSEREPEAT_53 = 1813;
	int WORLDMAPELEMENTMOUSEREPEAT_54 = 1814;
	int WORLDMAPELEMENTMOUSEREPEAT_55 = 1815;
	int WORLDMAPELEMENTMOUSEREPEAT_56 = 1816;
	int CLIENTSCRIPT_KEYBOARD_SHOW_STRING = 1817;
	int WORLDMAPELEMENTMOUSEREPEAT_58 = 1818;
	int WORLDMAPELEMENTMOUSEREPEAT_59 = 1819;
	int WORLDMAPELEMENTMOUSEREPEAT_60 = 1820;
	int WORLDMAPELEMENTMOUSEREPEAT_61 = 1821;
	int WORLDMAPELEMENTMOUSEREPEAT_62 = 1822;
	int WORLDMAPELEMENTMOUSEREPEAT_63 = 1823;
	int WORLDMAPELEMENTMOUSEREPEAT_64 = 1824;
	int WORLDMAPELEMENTMOUSEREPEAT_65 = 1825;
	int WORLDMAPELEMENTMOUSEREPEAT_66 = 1826;
	int WORLDMAPELEMENTMOUSEREPEAT_67 = 1827;
	int WORLDMAPELEMENTMOUSEREPEAT_68 = 1828;
	int WORLDMAPELEMENTMOUSEREPEAT_69 = 1829;
	int WORLDMAPELEMENTMOUSEREPEAT_70 = 1830;
	int WORLDMAPELEMENTMOUSEREPEAT_71 = 1831;
	int WORLDMAPELEMENTMOUSEREPEAT_72 = 1832;
	int WORLDMAPELEMENTMOUSEREPEAT_73 = 1833;
	int WORLDMAPELEMENTMOUSEREPEAT_74 = 1834;
	int WORLDMAPELEMENTMOUSEREPEAT_75 = 1835;
	int WORLDMAPELEMENTMOUSEREPEAT_76 = 1836;
	int WORLDMAPELEMENTMOUSEREPEAT_77 = 1837;
	int PROC_KEYBOARD_SHOW_STRING = 1838;
	int WORLDMAPELEMENTMOUSEREPEAT_79 = 1839;
	int WORLDMAPELEMENTMOUSEREPEAT_80 = 1840;
	int WORLDMAPELEMENTMOUSEREPEAT_81 = 1841;
	int WORLDMAPELEMENTMOUSEREPEAT_82 = 1842;
	int WORLDMAPELEMENTMOUSEREPEAT_83 = 1843;
	int WORLDMAPELEMENTMOUSEREPEAT_84 = 1844;
	int WORLDMAPELEMENTMOUSEREPEAT_85 = 1845;
	int WORLDMAPELEMENTMOUSEREPEAT_86 = 1846;
	int PROC_WORLDMAP_ELEMENT_TOOLTIP = 1847;
	int WORLDMAPELEMENTMOUSELEAVE_0 = 1848;
	int WORLDMAPELEMENTMOUSELEAVE_1 = 1849;
	int WORLDMAPELEMENTMOUSELEAVE_2 = 1850;
	int WORLDMAPELEMENTMOUSELEAVE_3 = 1851;
	int WORLDMAPELEMENTMOUSELEAVE_4 = 1852;
	int WORLDMAPELEMENTMOUSELEAVE_5 = 1853;
	int PROC_HELPER_AGILITY_HIGHLIGHT_OBSTACLES = 1854;
	int WORLDMAPELEMENTMOUSELEAVE_7 = 1855;
	int WORLDMAPELEMENTMOUSELEAVE_8 = 1856;
	int WORLDMAPELEMENTMOUSELEAVE_9 = 1857;
	int WORLDMAPELEMENTMOUSELEAVE_10 = 1858;
	int WORLDMAPELEMENTMOUSELEAVE_11 = 1859;
	int WORLDMAPELEMENTMOUSELEAVE_12 = 1860;
	int WORLDMAPELEMENTMOUSELEAVE_13 = 1861;
	int WORLDMAPELEMENTMOUSELEAVE_14 = 1862;
	int WORLDMAPELEMENTMOUSELEAVE_15 = 1863;
	int WORLDMAPELEMENTMOUSELEAVE_16 = 1864;
	int WORLDMAPELEMENTMOUSELEAVE_17 = 1865;
	int WORLDMAPELEMENTMOUSELEAVE_18 = 1866;
	int WORLDMAPELEMENTMOUSELEAVE_19 = 1867;
	int WORLDMAPELEMENTMOUSELEAVE_20 = 1868;
	int WORLDMAPELEMENTMOUSELEAVE_21 = 1869;
	int WORLDMAPELEMENTMOUSELEAVE_22 = 1870;
	int WORLDMAPELEMENTMOUSELEAVE_23 = 1871;
	int WORLDMAPELEMENTMOUSELEAVE_24 = 1872;
	int WORLDMAPELEMENTMOUSELEAVE_25 = 1873;
	int WORLDMAPELEMENTMOUSELEAVE_26 = 1874;
	int WORLDMAPELEMENTMOUSELEAVE_27 = 1875;
	int WORLDMAPELEMENTMOUSELEAVE_28 = 1876;
	int WORLDMAPELEMENTMOUSELEAVE_29 = 1877;
	int WORLDMAPELEMENTMOUSELEAVE_30 = 1878;
	int WORLDMAPELEMENTMOUSELEAVE_31 = 1879;
	int WORLDMAPELEMENTMOUSELEAVE_32 = 1880;
	int WORLDMAPELEMENTMOUSELEAVE_33 = 1881;
	int WORLDMAPELEMENTMOUSELEAVE_34 = 1882;
	int WORLDMAPELEMENTMOUSELEAVE_35 = 1883;
	int WORLDMAPELEMENTMOUSELEAVE_36 = 1884;
	int WORLDMAPELEMENTMOUSELEAVE_37 = 1885;
	int WORLDMAPELEMENTMOUSELEAVE_38 = 1886;
	int WORLDMAPELEMENTMOUSELEAVE_39 = 1887;
	int WORLDMAPELEMENTMOUSELEAVE_40 = 1888;
	int WORLDMAPELEMENTMOUSELEAVE_41 = 1889;
	int WORLDMAPELEMENTMOUSELEAVE_42 = 1890;
	int WORLDMAPELEMENTMOUSELEAVE_43 = 1891;
	int WORLDMAPELEMENTMOUSELEAVE_44 = 1892;
	int WORLDMAPELEMENTMOUSELEAVE_45 = 1893;
	int WORLDMAPELEMENTMOUSELEAVE_46 = 1894;
	int WORLDMAPELEMENTMOUSELEAVE_47 = 1895;
	int WORLDMAPELEMENTMOUSELEAVE_48 = 1896;
	int WORLDMAPELEMENTMOUSELEAVE_49 = 1897;
	int WORLDMAPELEMENTMOUSELEAVE_50 = 1898;
	int WORLDMAPELEMENTMOUSELEAVE_51 = 1899;
	int WORLDMAPELEMENTMOUSELEAVE_52 = 1900;
	int WORLDMAPELEMENTMOUSELEAVE_53 = 1901;
	int WORLDMAPELEMENTMOUSELEAVE_54 = 1902;
	int WORLDMAPELEMENTMOUSELEAVE_55 = 1903;
	int WORLDMAPELEMENTMOUSELEAVE_56 = 1904;
	int CLIENTSCRIPT_BUGREPORT_TEXTINPUT = 1905;
	int WORLDMAPELEMENTMOUSELEAVE_58 = 1906;
	int WORLDMAPELEMENTMOUSELEAVE_59 = 1907;
	int WORLDMAPELEMENTMOUSELEAVE_60 = 1908;
	int WORLDMAPELEMENTMOUSELEAVE_61 = 1909;
	int WORLDMAPELEMENTMOUSELEAVE_62 = 1910;
	int WORLDMAPELEMENTMOUSELEAVE_63 = 1911;
	int WORLDMAPELEMENTMOUSELEAVE_64 = 1912;
	int WORLDMAPELEMENTMOUSELEAVE_65 = 1913;
	int WORLDMAPELEMENTMOUSELEAVE_66 = 1914;
	int WORLDMAPELEMENTMOUSELEAVE_67 = 1915;
	int WORLDMAPELEMENTMOUSELEAVE_68 = 1916;
	int WORLDMAPELEMENTMOUSELEAVE_69 = 1917;
	int WORLDMAPELEMENTMOUSELEAVE_70 = 1918;
	int WORLDMAPELEMENTMOUSELEAVE_71 = 1919;
	int WORLDMAPELEMENTMOUSELEAVE_72 = 1920;
	int WORLDMAPELEMENTMOUSELEAVE_73 = 1921;
	int WORLDMAPELEMENTMOUSELEAVE_74 = 1922;
	int WORLDMAPELEMENTMOUSELEAVE_75 = 1923;
	int WORLDMAPELEMENTMOUSELEAVE_76 = 1924;
	int WORLDMAPELEMENTMOUSELEAVE_77 = 1925;
	int CLIENTSCRIPT_SCRIPT_1926 = 1926;
	int WORLDMAPELEMENTMOUSELEAVE_79 = 1927;
	int WORLDMAPELEMENTMOUSELEAVE_80 = 1928;
	int WORLDMAPELEMENTMOUSELEAVE_81 = 1929;
	int WORLDMAPELEMENTMOUSELEAVE_82 = 1930;
	int WORLDMAPELEMENTMOUSELEAVE_83 = 1931;
	int WORLDMAPELEMENTMOUSELEAVE_84 = 1932;
	int WORLDMAPELEMENTMOUSELEAVE_85 = 1933;
	int WORLDMAPELEMENTMOUSELEAVE_86 = 1934;
	int PROC_INSTANCE_CHECK = 1935;
	int PROC_SCRIPT_1936 = 1936;
	int CLIENTSCRIPT_BOOKOFSCROLLS_INIT = 1937;
	int CLIENTSCRIPT_BOOKOFSCROLLS_POPULATE = 1938;
	int PROC_BOOKOFSCROLLS_POPULATE = 1939;
	int CLIENTSCRIPT_BLAST_MINING_HUD_UPDATE = 1940;
	int PROC_BLAST_MINING_HUD_UPDATE = 1941;
	int PROC_WILDWARS_WORLD = 1942;
	int CLIENTSCRIPT_WILDWARS_HUDUPDATE = 1943;
	int PROC_WILDWARS_HUDUPDATE = 1944;
	int CLIENTSCRIPT_WILDWARS_HUD_INIT = 1945;
	int CLIENTSCRIPT_SCRIPT_1946 = 1946;
	int CLIENTSCRIPT_SCRIPT_1947 = 1947;
	int CLIENTSCRIPT_SCRIPT_1948 = 1948;
	int CLIENTSCRIPT_SCRIPT_1949 = 1949;
	int CLIENTSCRIPT_SCRIPT_1950 = 1950;
	int CLIENTSCRIPT_SCRIPT_1951 = 1951;
	int CLIENTSCRIPT_SCRIPT_1952 = 1952;
	int CLIENTSCRIPT_SCRIPT_1953 = 1953;
	int CLIENTSCRIPT_SCRIPT_1954 = 1954;
	int CLIENTSCRIPT_SCRIPT_1955 = 1955;
	int CLIENTSCRIPT_WILDWARS_FOGCOLOUR = 1956;
	int PROC_WILDWARS_FOGCOLOUR = 1957;
	int PROC_STORAGE_MAIN_RECREATE = 1958;
	int PROC_STORAGE_SIDE_CREATE = 1959;
	int CLIENTSCRIPT_STORAGE_SIDE_RECREATE = 1960;
	int PROC_STORAGE_SIDE_RECREATE = 1961;
	int PROC_SCRIPT_1962 = 1962;
	int CLIENTSCRIPT_SCRIPT_1963 = 1963;
	int PROC_SCRIPT_1964 = 1964;
	int CLIENTSCRIPT_STORAGE_MAIN_CREATE_QUANTITYBUTTON = 1965;
	int CLIENTSCRIPT_TOL_PRESSURE_DRAW = 1966;
	int CLIENTSCRIPT_VM_INFO_INIT = 1967;
	int PROC_VM_KUDOS_GET_STATUS = 1968;
	int PROC_VM_KUDOS_GET_QUEST_STATUS = 1969;
	int PROC_DEADMAN_LOBBY_TELE = 1970;
	int PROC_TEXT_DEVICE = 1971;
	int PROC_ON_MOBILE = 1972;
	int CLIENTSCRIPT_SCRIPT_1973 = 1973;
	int CLIENTSCRIPT_MESOVERLAY = 1974;
	int CLIENTSCRIPT_SCRIPT_1975 = 1975;
	int CLIENTSCRIPT_SCRIPT_1976 = 1976;
	int CLIENTSCRIPT_SCRIPT_1977 = 1977;
	int PROC_SCRIPT_1978 = 1978;
	int PROC_SCRIPT_1979 = 1979;
	int CLIENTSCRIPT_KEYBOARD_SHOW = 1980;
	int CLIENTSCRIPT_VM_INFO_DRAW = 1981;
	int PROC_VM_INFO_DRAW = 1982;
	int PROC_KEYBOARD_SHOW = 1983;
	int PROC_KEYBOARD_HIDE = 1984;
	int CLIENTSCRIPT_GRAVESTONE_RETRIEVAL_INIT = 1985;
	int CLIENTSCRIPT_GRAVESTONE_RETRIEVAL_UNLOCKSTATUS = 1986;
	int PROC_GRAVESTONE_RETRIEVAL_UNLOCKSTATUS = 1987;
	int CLIENTSCRIPT_GRAVESTONE_RETRIEVAL_BUTTONHOVER = 1988;
	int CLIENTSCRIPT_GRAVESTONE_RETRIEVAL_BUTTONOP = 1989;
	int CLIENTSCRIPT_GRAVESTONE_RETRIEVAL_BUTTONRESET = 1990;
	int CLIENTSCRIPT_GRAVESTONE_RETRIEVAL_ITEMS = 1991;
	int PROC_GRAVESTONE_RETRIEVAL_ITEMS = 1992;
	int CLIENTSCRIPT_FOSSILQUEST_VOYAGE = 1993;
	int CLIENTSCRIPT_FOSSILQUEST_PROGRESS = 1994;
	int CLIENTSCRIPT_SCRIPT_1995 = 1995;
	int CLIENTSCRIPT_FOSSILQUEST_VOYAGE_END = 1996;
	int CLIENTSCRIPT_FOSSIL_OXYGEN_LEVEL = 1997;
	int CLIENTSCRIPT_FOSSIL_INIT = 1998;
	int CLIENTSCRIPT_FOSSIL_WARNING_FLASHER = 1999;
	int CLIENTSCRIPT_FOSSIL_FADE_OVERLAY = 2000;
	int CLIENTSCRIPT_FOSSIL_FADE_OVERLAY_UPDATE = 2001;
	int PROC_FOSSIL_FADE_OVERLAY_INCREMENT = 2002;
	int CLIENTSCRIPT_FOSSIL_SWAMP_SPLAT = 2003;
	int PROC_STORAGE_MAIN_CREATE_QUANTITYBUTTON = 2004;
	int CLIENTSCRIPT_SCRIPT_2005 = 2005;
	int CLIENTSCRIPT_FOSSIL_STORAGE_INIT = 2006;
	int CLIENTSCRIPT_FOSSIL_STORAGE_BUILD = 2007;
	int PROC_FOSSIL_STORAGE_BUILD = 2008;
	int PROC_FOSSIL_STORAGE_GET = 2009;
	int CLIENTSCRIPT_FOSSIL_VOLCANIC_SHOP_INIT = 2010;
	int CLIENTSCRIPT_FOSSIL_VOLCANIC_SHOP_POINTS = 2011;
	int PROC_FOSSIL_VOLCANIC_SHOP_POINTS = 2012;
	int CLIENTSCRIPT_FOSSIL_POOL_INIT = 2013;
	int CLIENTSCRIPT_FOSSIL_POOL_UPDATE = 2014;
	int CLIENTSCRIPT_FOSSIL_POOL_PROGRESS_UPDATE = 2015;
	int CLIENTSCRIPT_VOLCANIC_MINE_HUD_INIT = 2016;
	int CLIENTSCRIPT_MESOVERLAY_CHECKHEIGHT = 2017;
	int PROC_MESOVERLAY_DRAW = 2018;
	int CLIENTSCRIPT_VOLCANIC_MINE_UPDATEHUD = 2019;
	int PROC_VOLCANIC_MINE_SET_VENTTEXT = 2020;
	int PROC_VOLCANIC_MINE_SET_CHAMBERTEXT = 2021;
	int PROC_VOLCANIC_MINE_SET_OTHERINFO = 2022;
	int PROC_VOLCANIC_MINE_VENTCOLOUR = 2023;
	int PROC_VOLCANIC_MINE_CHAMBERCOLOUR = 2024;
	int CLIENTSCRIPT_VOLCANIC_MINE_SETUP_TIMER = 2025;
	int CLIENTSCRIPT_SCRIPT_2026 = 2026;
	int PROC_SCRIPT_2027 = 2027;
	int CLIENTSCRIPT_SCRIPT_2028 = 2028;
	int PROC_SCRIPT_2029 = 2029;
	int PROC_SCRIPT_2030 = 2030;
	int PROC_SCRIPT_2031 = 2031;
	int CLIENTSCRIPT_AGILITYARENA_REWARDS_HIDELAYER = 2032;
	int PROC_AGILITYARENA_REWARDS_GRACEFULBUTTON_INIT = 2033;
	int CLIENTSCRIPT_AGILITYARENA_REWARDS_GRACEFULBUTTON_DRAW = 2034;
	int PROC_AGILITYARENA_REWARDS_GRACEFULBUTTON_DRAW = 2035;
	int PROC_AGILITYARENA_REWARDS_GRACEFULBUTTON_DRAWCOMPONENTS = 2036;
	int CLIENTSCRIPT_AGILITYARENA_REWARDS_GRACEFULCANCEL = 2037;
	int PROC_AGILITYARENA_REWARDS_GRACEFULCANCEL = 2038;
	int CLIENTSCRIPT_AIDE_MAP_INIT = 2039;
	int CLIENTSCRIPT_AIDE_MAP_TUTORS = 2040;
	int PROC_AIDE_MAP_TUTORS = 2041;
	int CLIENTSCRIPT_AIDE_MAP_MARKER = 2042;
	int PROC_AIDE_MAP_MARKER = 2043;
	int PROC_BEIGE_STONE_BUTTON_IN = 2044;
	int PROC_BEIGE_STONE_BUTTON_OUT = 2045;
	int CLIENTSCRIPT_SKILLMULTI_SETUP = 2046;
	int PROC_SKILLMULTI_WIPEBUTTON = 2047;
	int PROC_SKILLMULTI_ITEMBUTTON_INIT = 2048;
	int CLIENTSCRIPT_SKILLMULTI_ITEMBUTTON_HOVER = 2049;
	int CLIENTSCRIPT_SKILLMULTI_ITEMBUTTON_OP = 2050;
	int CLIENTSCRIPT_SKILLMULTI_ITEMBUTTON_KEY = 2051;
	int PROC_SKILLMULTI_ITEMBUTTON_TRIGGERED = 2052;
	int CLIENTSCRIPT_SKILLMULTI_ITEMBUTTON_RESET = 2053;
	int PROC_SKILLMULTI_ITEMBUTTON_DRAW = 2054;
	int PROC_SKILLMULTI_QUANTITYBUTTONS_SET = 2055;
	int PROC_SKILLMULTI_QUANTITYBUTTON_SETUP = 2056;
	int CLIENTSCRIPT_SKILLMULTI_QUANTITYBUTTON_DRAW = 2057;
	int PROC_SKILLMULTI_QUANTITYBUTTON_DRAW = 2058;
	int CLIENTSCRIPT_SKILLMULTI_QUANTITYBUTTON_OP = 2059;
	int CLIENTSCRIPT_SKILLMULTI_QUANTITYBUTTON_X_START = 2060;
	int PROC_SKILLMULTI_QUANTITYBUTTON_X_RECEIVE = 2061;
	int CLIENTSCRIPT_SKILLMULTI_QUANTITYBUTTON_X_END = 2062;
	int PROC_MESLAYER_SKILLMULTI = 2063;
	int CLIENTSCRIPT_CHAT_BROADCAST_OP = 2064;
	int CLIENTSCRIPT_CHAT_RECOL = 2065;
	int PROC_CHAT_BROADCAST_PARSEURL = 2066;
	int PROC_V2_STONE_BUTTON_IN = 2067;
	int PROC_TOPLEVEL_KEYPRESS = 2068;
	int CLIENTSCRIPT_ORBS_UPDATE_SPECENERGY = 2069;
	int CLIENTSCRIPT_DEADMAN_SPECTATOR_ENABLE = 2070;
	int CLIENTSCRIPT_DEADMAN_SPECTATOR_UPDATE = 2071;
	int PROC_DEADMAN_SPECTATOR_CHAT = 2072;
	int CLIENTSCRIPT_SAILING_MENU_INIT = 2073;
	int CLIENTSCRIPT_SAILING_MENU_FILTER = 2074;
	int PROC_SAILING_MENU_FILTER = 2075;
	int PROC_SCRIPT_2076 = 2076;
	int CLIENTSCRIPT_VM_KUDOS_INIT = 2077;
	int CLIENTSCRIPT_VM_KUDOS_UPDATE = 2078;
	int PROC_VM_KUDOS_UPDATE = 2079;
	int CLIENTSCRIPT_SCRIPT_2080 = 2080;
	int CLIENTSCRIPT_MAGIC_FLASH_SPELL = 2081;
	int PROC_KOTS_WORLD = 2082;
	int PROC_KOTS_REMAINING_TIME = 2083;
	int PROC_DEADMAN_FINALLOCATION = 2084;
	int CLIENTSCRIPT_SCRIPT_2085 = 2085;
	int CLIENTSCRIPT_SCRIPT_2086 = 2086;
	int CLIENTSCRIPT_TOB_HUD_INIT = 2087;
	int CLIENTSCRIPT_TRAIL_REWARDSCREEN_INIT = 2088;
	int CLIENTSCRIPT_TRAIL_REWARDSCREEN_DRAW = 2089;
	int PROC_TRAIL_REWARDSCREEN_DRAW = 2090;
	int CLIENTSCRIPT_XPDROPS_FAKE = 2091;
	int CLIENTSCRIPT_OCULUS_FLASHERS = 2092;
	int PROC_SCRIPT_2093 = 2093;
	int PROC_IRONMAN_MODEBUTTON_INIT = 2094;
	int CLIENTSCRIPT_IRONMAN_MODEBUTTON_REDRAW = 2095;
	int PROC_IRONMAN_MODEBUTTON_REDRAW = 2096;
	int CLIENTSCRIPT_AUTOCAST_SETUP = 2097;
	int PROC_AUTOCAST_SETUP = 2098;
	int CLIENTSCRIPT_HP_HUD_INIT = 2099;
	int CLIENTSCRIPT_HP_HUD_POS = 2100;
	int PROC_HP_HUD_POS = 2101;
	int CLIENTSCRIPT_HP_HUD_UPDATE = 2102;
	int PROC_HP_HUD_UPDATE = 2103;
	int CLIENTSCRIPT_DS2_FOSSIL_MAP_INIT = 2104;
	int CLIENTSCRIPT_DS2_FOSSIL_MAP_REDRAW = 2105;
	int PROC_DS2_FOSSIL_MAP_REDRAW = 2106;
	int CLIENTSCRIPT_DS2_FOSSIL_MAP_ROTATE = 2107;
	int CLIENTSCRIPT_DS2_FOSSIL_MAP_SWAP = 2108;
	int CLIENTSCRIPT_DS2_FOSSIL_MAP_STUCK = 2109;
	int PROC_DS2_FOSSIL_MAP_GETSLOT = 2110;
	int PROC_DS2_FOSSIL_MAP_SETSLOT = 2111;
	int CLIENTSCRIPT_STORAGE_MAIN_UPDATE = 2112;
	int CLIENTSCRIPT_SCRIPT_2113 = 2113;
	int CLIENTSCRIPT_SCRIPT_2114 = 2114;
	int CLIENTSCRIPT_IRONMAN_MODEBUTTON_OP = 2115;
	int PROC_SCRIPT_2116 = 2116;
	int CLIENTSCRIPT_SCRIPT_2117 = 2117;
	int PROC_SCRIPT_2118 = 2118;
	int CLIENTSCRIPT_SCRIPT_2119 = 2119;
	int CLIENTSCRIPT_IRONMAN_MISCELLANEOUS_REDRAW = 2120;
	int PROC_IRONMAN_MISCELLANEOUS_REDRAW = 2121;
	int CLIENTSCRIPT_SCRIPT_2122 = 2122;
	int CLIENTSCRIPT_SCRIPT_2123 = 2123;
	int CLIENTSCRIPT_SCRIPT_2124 = 2124;
	int PROC_SCRIPT_2125 = 2125;
	int CLIENTSCRIPT_SCRIPT_2126 = 2126;
	int PROC_SCRIPT_2127 = 2127;
	int CLIENTSCRIPT_SCRIPT_2128 = 2128;
	int CLIENTSCRIPT_SCRIPT_2129 = 2129;
	int CLIENTSCRIPT_SCRIPT_2130 = 2130;
	int PROC_SCRIPT_2131 = 2131;
	int CLIENTSCRIPT_FOSSIL_DRIFTNET_INIT = 2132;
	int PROC_SCRIPT_2133 = 2133;
	int CLIENTSCRIPT_SCRIPT_2134 = 2134;
	int CLIENTSCRIPT_SCRIPT_2135 = 2135;
	int PROC_SCRIPT_2136 = 2136;
	int CLIENTSCRIPT_SCRIPT_2137 = 2137;
	int PROC_SCRIPT_2138 = 2138;
	int CLIENTSCRIPT_SCRIPT_2139 = 2139;
	int CLIENTSCRIPT_FOSSIL_DRIFTNET_STORE_INIT = 2140;
	int CLIENTSCRIPT_FOSSIL_DRIFTNET_STORE_UPDATE = 2141;
	int PROC_FOSSIL_DRIFTNET_STORE_UPDATE = 2142;
	int CLIENTSCRIPT_SCRIPT_2143 = 2143;
	int CLIENTSCRIPT_SCRIPT_2144 = 2144;
	int PROC_SCRIPT_2145 = 2145;
	int PROC_STORAGE_MAIN_UPDATE = 2146;
	int CLIENTSCRIPT_STORAGE_SIDE_UPDATE = 2147;
	int PROC_STORAGE_SIDE_UPDATE = 2148;
	int PROC_SCRIPT_2149 = 2149;
	int CLIENTSCRIPT_SCRIPT_2150 = 2150;
	int PROC_GRAPHIC_DEVICE = 2151;
	int CLIENTSCRIPT_CHATBOX_KEYINPUT_CLICKLISTENER = 2152;
	int PROC_CHATBOX_KEYINPUT_MATCHED = 2153;
	int CLIENTSCRIPT_LOGOUT_LAYOUT_INIT = 2154;
	int CLIENTSCRIPT_TOPLEVEL_CHATBOX_RESETBACKGROUND_SOON = 2155;
	int PROC_POH_OPTIONS_DOORS_RENDER = 2156;
	int PROC_CHATDEFAULT_STOPINPUT = 2157;
	int CLIENTSCRIPT_CHATDEFAULT_RESTOREINPUT = 2158;
	int CLIENTSCRIPT_SCRIPT_2159 = 2159;
	int PROC_SCRIPT_2160 = 2160;
	int CLIENTSCRIPT_SCRIPT_2161 = 2161;
	int CLIENTSCRIPT_SCRIPT_2162 = 2162;
	int PROC_MAKEOVER_UNLOCKEDCOLOUR = 2163;
	int CLIENTSCRIPT_XPDROPS_SETPOSITION = 2164;
	int PROC_XPDROPS_SETPOSITION = 2165;
	int CLIENTSCRIPT_SCRIPT_2166 = 2166;
	int CLIENTSCRIPT_SCRIPT_2167 = 2167;
	int CLIENTSCRIPT_SCRIPT_2168 = 2168;
	int PROC_SCRIPT_2169 = 2169;
	int CLIENTSCRIPT_SCRIPT_2170 = 2170;
	int CLIENTSCRIPT_SCRIPT_2171 = 2171;
	int CLIENTSCRIPT_SCRIPT_2172 = 2172;
	int PROC_SCRIPT_2173 = 2173;
	int PROC_TOURNAMENT_BETA_WORLD = 2174;
	int PROC_SCRIPT_2175 = 2175;
	int CLIENTSCRIPT_LOGOUT_LAYOUT_UPDATE = 2176;
	int PROC_SETVOLUMESOUNDS = 2177;
	int PROC_SETVOLUMEAREASOUNDS = 2178;
	int PROC_DEADMAN_SPECTATOR_NAMES = 2179;
	int CLIENTSCRIPT_DEADMAN_SPECTATOR_SINGLE = 2180;
	int CLIENTSCRIPT_DEADMAN_SPECTATOR_DOUBLE = 2181;
	int PROC_DEADMAN_SPECTATOR_STATS = 2182;
	int PROC_DEADMAN_SPECTATOR_INVENTORY = 2183;
	int PROC_DEADMAN_SPECTATOR_INVENTORY_DUMMY = 2184;
	int CLIENTSCRIPT_DEADMAN_SPECTATOR_MAP = 2185;
	int PROC_SPECTATOR_KEYPRESS = 2186;
	int PROC_DEADMAN_FREECAM_ENABLE = 2187;
	int PROC_DEADMAN_OVERLAY_HIDE = 2188;
	int PROC_DEADMAN_MAP_ENABLE = 2189;
	int PROC_DEADMAN_AREA_SWITCH = 2190;
	int PROC_DEADMAN_FINAL_AREA_1_TELE = 2191;
	int PROC_DEADMAN_FINAL_AREA_2_TELE = 2192;
	int PROC_DEADMAN_ARENAS_TELE = 2193;
	int PROC_SCRIPT_2194 = 2194;
	int PROC_SCALE_COLOUR = 2195;
	int PROC_CURRENT_DATE_TIME = 2196;
	int PROC_SETUP_DIARY_ENTRY = 2197;
	int CLIENTSCRIPT_UPDATE_DIARY_ENTRY = 2198;
	int PROC_UPDATE_DIARY_ENTRY = 2199;
	int PROC_DIARY_COMPLETION_INFO = 2200;
	int CLIENTSCRIPT_DIARY_MOUSEOVER = 2201;
	int CLIENTSCRIPT_DEADMAN_SPECTATOR_TEMP_NAME = 2202;
	int PROC_DEADMAN_MAP_KEYPRESS = 2203;
	int PROC_DEADMAN_1V1_TELE = 2204;
	int CLIENTSCRIPT_DECANT_INIT = 2205;
	int PROC_DECANT_BUTTON = 2206;
	int CLIENTSCRIPT_SCRIPT_2207 = 2207;
	int CLIENTSCRIPT_SCRIPT_2208 = 2208;
	int CLIENTSCRIPT_SCRIPT_2209 = 2209;
	int CLIENTSCRIPT_SCRIPT_2210 = 2210;
	int CLIENTSCRIPT_SCRIPT_2211 = 2211;
	int CLIENTSCRIPT_SCRIPT_2212 = 2212;
	int PROC_SCRIPT_2213 = 2213;
	int PROC_WELCOME_SCREEN_MESSAGES = 2214;
	int CLIENTSCRIPT_WELCOME_SCREEN_CREDIT = 2215;
	int PROC_WELCOME_SCREEN_CREDIT = 2216;
	int CLIENTSCRIPT_SCRIPT_2217 = 2217;
	int PROC_SCRIPT_2218 = 2218;
	int PROC_OCULUS_FLASHERS = 2219;
	int CLIENTSCRIPT_OCULUS_CONTROLS = 2220;
	int CLIENTSCRIPT_SET_RENDERSELF = 2221;
	int PROC_SCRIPT_2222 = 2222;
	int PROC_SCRIPT_2223 = 2223;
	int PROC_SCRIPT_2224 = 2224;
	int CLIENTSCRIPT_BANKMAIN_QUANTITY_OP = 2225;
	int CLIENTSCRIPT_DECANT_MOUSEOVER = 2226;
	int PROC_DECANT_MOUSEOVER = 2227;
	int PROC_SCRIPT_2228 = 2228;
	int CLIENTSCRIPT_SHOP_QUANTITY = 2229;
	int PROC_SHOP_QUANTITY = 2230;
	int CLIENTSCRIPT_SHOP_QUANTITY_OP = 2231;
	int CLIENTSCRIPT_MAGIC_FLASH = 2232;
	int PROC_WELCOME_SCREEN_CONTINUE_TEXT = 2233;
	int CLIENTSCRIPT_CAMERA_DO_ZOOM = 2234;
	int CLIENTSCRIPT_SCRIPT_2235 = 2235;
	int CLIENTSCRIPT_SCRIPT_2236 = 2236;
	int PROC_SCRIPT_2237 = 2237;
	int PROC_SETBRIGHTNESS = 2238;
	int CLIENTSCRIPT_KEYBOARD_HIDE = 2239;
	int CLIENTSCRIPT_COLLECTION_INIT = 2240;
	int CLIENTSCRIPT_SCRIPT_2241 = 2241;
	int PROC_SCRIPT_2242 = 2242;
	int PROC_LOGOUT_LAYOUT_UPDATE = 2243;
	int CLIENTSCRIPT_LOGOUT_BUTTON_TEXT = 2244;
	int PROC_QUEST_MEMBERS_COUNT = 2245;
	int PROC_HP_BAR_RESET = 2246;
	int PROC_MACRO_PINBALL_SCORE = 2247;
	int PROC_DEADMAN_MODE = 2248;
	int CLIENTSCRIPT_CC_DELETEALL = 2249;
	int PROC_SCRIPT_2250 = 2250;
	int CLIENTSCRIPT_CHATBOX_OPEN_INPUT = 2251;
	int CLIENTSCRIPT_BUGREPORT_HOME = 2252;
	int CLIENTSCRIPT_BUGREPORT_NEXT = 2253;
	int CLIENTSCRIPT_BUGREPORT_BACK = 2254;
	int PROC_MUSIC_SORT = 2255;
	int PROC_ZOOM_INIT = 2256;
	int CLIENTSCRIPT_MUSIC_INIT_COUNTER = 2257;
	int CLIENTSCRIPT_SCRIPT_2258 = 2258;
	int PROC_SCRIPT_2259 = 2259;
	int PROC_SCRIPT_2260 = 2260;
	int PROC_STEAM_SET_UNLOCKED = 2261;
	int CLIENTSCRIPT_MAGIC_SPELLBOOK_INIT = 2262;
	int PROC_TUTORIAL_PROGRESSBAR_SET = 2263;
	int PROC_WORLDMAP_MOBILE_LAYOUT = 2264;
	int PROC_MINIQUEST_COUNT = 2265;
	int PROC_SCRIPT_2266 = 2266;
	int PROC_SCRIPT_2267 = 2267;
	int CLIENTSCRIPT_TEXT_DEVICE = 2268;
	int CLIENTSCRIPT_TELENEXUS_INIT = 2269;
	int CLIENTSCRIPT_SCRIPT_2270 = 2270;
	int PROC_SCRIPT_2271 = 2271;
	int CLIENTSCRIPT_SCRIPT_2272 = 2272;
	int PROC_SCRIPT_2273 = 2273;
	int PROC_V2_STONE_BUTTON_FADABLE = 2274;
	int PROC_SCRIPT_2275 = 2275;
	int PROC_MISC_COLLECTION_DRAW = 2276;
	int CLIENTSCRIPT_BONDIF_REDEEM_SUBTITLE = 2277;
	int CLIENTSCRIPT_BONDIF_REDEEM_PACKAGE_INIT = 2278;
	int CLIENTSCRIPT_BONDIF_REDEEM_PACKAGE_OP_DISABLED = 2279;
	int CLIENTSCRIPT_BONDIF_REDEEM_PACKAGE_OP_PERMITTED = 2280;
	int CLIENTSCRIPT_BONDIF_REDEEM_PACKAGE_DRAW = 2281;
	int PROC_BONDIF_REDEEM_PACKAGE_DRAW = 2282;
	int PROC_BONDIF_REDEEM_PACKAGE_DETAILS = 2283;
	int CLIENTSCRIPT_SCRIPT_2284 = 2284;
	int CLIENTSCRIPT_BONDIF_REDEEM_RIGHTCOLUMN = 2285;
	int PROC_BONDIF_REDEEM_RIGHTCOLUMN = 2286;
	int CLIENTSCRIPT_BONDIF_REDEEM_HOVER = 2287;
	int CLIENTSCRIPT_BONDIF_REDEEM_FADEEND = 2288;
	int CLIENTSCRIPT_RAIDS_OVERLAY_TIMER = 2289;
	int CLIENTSCRIPT_RAIDS_CHALLENGE_BUILD_LIST = 2290;
	int CLIENTSCRIPT_RAIDS_CHALLENGE_MOVE_HIGHLIGHT = 2291;
	int CLIENTSCRIPT_RAIDS_SCORE_DISPLAY = 2292;
	int CLIENTSCRIPT_RAIDS_CHALLENGE_CHECKBOX = 2293;
	int PROC_RAIDS_CHALLENGE_CHECKBOX = 2294;
	int PROC_TOB_HUD_STATUS_INIT = 2295;
	int CLIENTSCRIPT_TOB_HUD_DRAW = 2296;
	int PROC_TOB_HUD_DRAW = 2297;
	int PROC_TOB_HUD_STATUSREFRESH = 2298;
	int CLIENTSCRIPT_SCRIPT_2299 = 2299;
	int PROC_SCRIPT_2300 = 2300;
	int CLIENTSCRIPT_TOB_HUD_STATUSNAMES = 2301;
	int CLIENTSCRIPT_TOB_HUD_NAMEFLASHER = 2302;
	int PROC_TOB_HUD_NAMEFLASHER = 2303;
	int CLIENTSCRIPT_TOB_HUD_UPDATEPROGRESS = 2304;
	int PROC_TOB_HUD_UPDATEPROGRESS = 2305;
	int CLIENTSCRIPT_TOB_HUD_FADE = 2306;
	int CLIENTSCRIPT_TOB_HUD_PORTAL = 2307;
	int CLIENTSCRIPT_SCRIPT_2308 = 2308;
	int PROC_TOB_HUD_FADE = 2309;
	int PROC_SCRIPT_2310 = 2310;
	int CLIENTSCRIPT_SCRIPT_2311 = 2311;
	int PROC_SCRIPT_2312 = 2312;
	int PROC_TOB_HUD_SETPORTAL = 2313;
	int CLIENTSCRIPT_TOB_HUD_PLAYPORTAL = 2314;
	int CLIENTSCRIPT_TOB_HUD_CLEARTEXT = 2315;
	int CLIENTSCRIPT_TOB_PARTYDETAILS_INIT = 2316;
	int CLIENTSCRIPT_TOB_PARTYDETAILS_ADDMEMBER = 2317;
	int PROC_SCRIPT_2318 = 2318;
	int CLIENTSCRIPT_TOB_PARTYDETAILS_KICKMEMBER = 2319;
	int CLIENTSCRIPT_TOB_PARTYDETAILS_TIMEOUT_KICKMEMBER = 2320;
	int CLIENTSCRIPT_TOB_PARTYDETAILS_ADDAPPLICANT = 2321;
	int PROC_SCRIPT_2322 = 2322;
	int CLIENTSCRIPT_SCRIPT_2323 = 2323;
	int PROC_SCRIPT_2324 = 2324;
	int PROC_SCRIPT_2325 = 2325;
	int PROC_SCRIPT_2326 = 2326;
	int CLIENTSCRIPT_SCRIPT_2327 = 2327;
	int CLIENTSCRIPT_SCRIPT_2328 = 2328;
	int CLIENTSCRIPT_TOB_PARTYDETAILS_FORCEBUTTON = 2329;
	int CLIENTSCRIPT_SCRIPT_2330 = 2330;
	int CLIENTSCRIPT_SCRIPT_2331 = 2331;
	int CLIENTSCRIPT_TOB_PARTYDETAILS_AUTOREFRESH = 2332;
	int PROC_TOB_PARTYDETAILS_SETSORT = 2333;
	int PROC_TOB_PARTYDETAILS_SORT = 2334;
	int PROC_TOB_PARTYDETAILS_SORTBUTTON_DRAW = 2335;
	int CLIENTSCRIPT_TOB_PARTYDETAILS_CLICKSORT = 2336;
	int CLIENTSCRIPT_TOB_PARTYLIST_INIT = 2337;
	int CLIENTSCRIPT_TOB_PARTYLIST_SETPARTYBUTTON = 2338;
	int PROC_TOB_PARTYLIST_SETPARTYBUTTON = 2339;
	int CLIENTSCRIPT_TOB_PARTYLIST_ADDLINE = 2340;
	int PROC_TOB_PARTYLIST_SETSORT = 2341;
	int PROC_TOB_PARTYLIST_SORTBUTTON_DRAW = 2342;
	int CLIENTSCRIPT_TOB_PARTYLIST_CLICKSORT = 2343;
	int PROC_SCRIPT_2344 = 2344;
	int CLIENTSCRIPT_STEAM_SET_STAT_PROGRESS = 2345;
	int CLIENTSCRIPT_SCRIPT_2346 = 2346;
	int CLIENTSCRIPT_SCRIPT_2347 = 2347;
	int PROC_SCRIPT_2348 = 2348;
	int CLIENTSCRIPT_SCRIPT_2349 = 2349;
	int PROC_DEADMAN_CHEST_TELE = 2350;
	int PROC_STEAM_SET_STAT_PROGRESS = 2351;
	int CLIENTSCRIPT_SCRIPT_2352 = 2352;
	int CLIENTSCRIPT_CASTLEWARS_WAITINGROOM_INIT = 2353;
	int CLIENTSCRIPT_CASTLEWARS_WAITINGROOM_UPDATE = 2354;
	int PROC_SCRIPT_2355 = 2355;
	int CLIENTSCRIPT_STEAM_LOCK_ACHIEVEMENTS = 2356;
	int PROC_ON_ENHANCED = 2357;
	int CLIENTSCRIPT_SETTINGS_INTERFACE_SCALING = 2358;
	int PROC_SHIFTCLICK_TOGGLE = 2359;
	int CLIENTSCRIPT_SCRIPT_2360 = 2360;
	int CLIENTSCRIPT_SCRIPT_2361 = 2361;
	int CLIENTSCRIPT_TELENEXUS_DRAGSCROLL = 2362;
	int PROC_SETTINGS_INTERFACE_SCALING = 2363;
	int PROC_SCRIPT_2364 = 2364;
	int CLIENTSCRIPT_TELENEXUS_LEFT_CLICK = 2365;
	int CLIENTSCRIPT_STATS_INIT_TOOLTIP = 2366;
	int CLIENTSCRIPT_STATS_OP = 2367;
	int CLIENTSCRIPT_SCRIPT_2368 = 2368;
	int CLIENTSCRIPT_SCRIPT_2369 = 2369;
	int CLIENTSCRIPT_SCRIPT_2370 = 2370;
	int PROC_SCRIPT_2371 = 2371;
	int PROC_SCRIPT_2372 = 2372;
	int PROC_TOPLEVEL_CHATBOX_CONTROLS_MAKETRANSPARENT = 2373;
	int CLIENTSCRIPT_FADE_INIT = 2374;
	int PROC_CASTLEWARS_WAITINGROOM_UPDATE = 2375;
	int CLIENTSCRIPT_HP_HUD_OPEN = 2376;
	int PROC_HP_HUD_OPEN = 2377;
	int CLIENTSCRIPT_SCRIPT_2378 = 2378;
	int CLIENTSCRIPT_TOPLEVEL_CHATBOX_RESETBACKGROUND = 2379;
	int CLIENTSCRIPT_SCRIPT_2380 = 2380;
	int CLIENTSCRIPT_SCRIPT_2381 = 2381;
	int PROC_SCRIPT_2382 = 2382;
	int CLIENTSCRIPT_WINT_LAYOUT_INIT = 2383;
	int CLIENTSCRIPT_WINT_LAYOUT_UPDATE = 2384;
	int PROC_WINT_LAYOUT_UPDATE = 2385;
	int PROC_SCRIPT_2386 = 2386;
	int PROC_SCRIPT_2387 = 2387;
	int CLIENTSCRIPT_COLLECTION_DRAW_TABS_ALL = 2388;
	int PROC_COLLECTION_DRAW_TABS_ALL = 2389;
	int PROC_SCRIPT_2390 = 2390;
	int CLIENTSCRIPT_MOBILE_BILLING_OPEN = 2391;
	int CLIENTSCRIPT_TRAWLER_OVERLAY_INIT = 2392;
	int CLIENTSCRIPT_SCRIPT_2393 = 2393;
	int CLIENTSCRIPT_SCRIPT_2394 = 2394;
	int CLIENTSCRIPT_SCRIPT_2395 = 2395;
	int CLIENTSCRIPT_ORBS_UPDATE_STORE = 2396;
	int CLIENTSCRIPT_RECURRING_MEMBERSHIP = 2397;
	int PROC_RECURRING_MEMBERSHIP = 2398;
	int PROC_OPENURL_RAW = 2399;
	int PROC_SETTINGS_PRECISE_TIMING = 2400;
	int PROC_TIME_CONVERT_OPTION = 2401;
	int CLIENTSCRIPT_NZONE_GAME_INIT = 2402;
	int CLIENTSCRIPT_SCRIPT_2403 = 2403;
	int CLIENTSCRIPT_SCRIPT_2404 = 2404;
	int CLIENTSCRIPT_NZONE_LOBBY_INIT = 2405;
	int CLIENTSCRIPT_SCRIPT_2406 = 2406;
	int CLIENTSCRIPT_TOL_HOMONCULUS_OVERLAY_INIT = 2407;
	int CLIENTSCRIPT_SCRIPT_2408 = 2408;
	int CLIENTSCRIPT_SOULBANE_ANGERBAR_INIT = 2409;
	int PROC_TIME_CONVERT = 2410;
	int PROC_TIME_CONVERT_MS = 2411;
	int PROC_SCRIPT_2412 = 2412;
	int CLIENTSCRIPT_STEELBOX_BACKGROUND = 2413;
	int PROC_SHOW_STOREBUTTON = 2414;
	int WORLDMAPELEMENTMOUSEREPEAT_274 = 2415;
	int WORLDMAPELEMENTMOUSEREPEAT_576 = 2416;
	int WORLDMAPELEMENTMOUSEREPEAT_577 = 2417;
	int WORLDMAPELEMENTMOUSEREPEAT_578 = 2418;
	int WORLDMAPELEMENTMOUSEREPEAT_579 = 2419;
	int WORLDMAPELEMENTMOUSEREPEAT_580 = 2420;
	int WORLDMAPELEMENTMOUSEREPEAT_581 = 2421;
	int WORLDMAPELEMENTMOUSEREPEAT_582 = 2422;
	int WORLDMAPELEMENTMOUSEREPEAT_583 = 2423;
	int WORLDMAPELEMENTMOUSEREPEAT_584 = 2424;
	int WORLDMAPELEMENTMOUSEREPEAT_585 = 2425;
	int WORLDMAPELEMENTMOUSEREPEAT_586 = 2426;
	int WORLDMAPELEMENTMOUSEREPEAT_587 = 2427;
	int WORLDMAPELEMENTMOUSEREPEAT_588 = 2428;
	int WORLDMAPELEMENTMOUSEREPEAT_589 = 2429;
	int WORLDMAPELEMENTMOUSEREPEAT_591 = 2430;
	int WORLDMAPELEMENTMOUSEREPEAT_592 = 2431;
	int WORLDMAPELEMENTMOUSEREPEAT_593 = 2432;
	int WORLDMAPELEMENTMOUSEREPEAT_594 = 2433;
	int WORLDMAPELEMENTMOUSEREPEAT_595 = 2434;
	int WORLDMAPELEMENTMOUSEREPEAT_596 = 2435;
	int WORLDMAPELEMENTMOUSEREPEAT_597 = 2436;
	int WORLDMAPELEMENTMOUSEREPEAT_598 = 2437;
	int WORLDMAPELEMENTMOUSEREPEAT_590 = 2438;
	int WORLDMAPELEMENTMOUSEREPEAT_599 = 2439;
	int WORLDMAPELEMENTMOUSEREPEAT_600 = 2440;
	int WORLDMAPELEMENTMOUSELEAVE_274 = 2441;
	int WORLDMAPELEMENTMOUSELEAVE_576 = 2442;
	int WORLDMAPELEMENTMOUSELEAVE_577 = 2443;
	int WORLDMAPELEMENTMOUSELEAVE_578 = 2444;
	int WORLDMAPELEMENTMOUSELEAVE_579 = 2445;
	int WORLDMAPELEMENTMOUSELEAVE_580 = 2446;
	int WORLDMAPELEMENTMOUSELEAVE_581 = 2447;
	int WORLDMAPELEMENTMOUSELEAVE_582 = 2448;
	int WORLDMAPELEMENTMOUSELEAVE_583 = 2449;
	int WORLDMAPELEMENTMOUSELEAVE_584 = 2450;
	int WORLDMAPELEMENTMOUSELEAVE_585 = 2451;
	int WORLDMAPELEMENTMOUSELEAVE_586 = 2452;
	int WORLDMAPELEMENTMOUSELEAVE_587 = 2453;
	int WORLDMAPELEMENTMOUSELEAVE_588 = 2454;
	int WORLDMAPELEMENTMOUSELEAVE_589 = 2455;
	int WORLDMAPELEMENTMOUSELEAVE_591 = 2456;
	int WORLDMAPELEMENTMOUSELEAVE_592 = 2457;
	int WORLDMAPELEMENTMOUSELEAVE_593 = 2458;
	int WORLDMAPELEMENTMOUSELEAVE_594 = 2459;
	int WORLDMAPELEMENTMOUSELEAVE_595 = 2460;
	int WORLDMAPELEMENTMOUSELEAVE_596 = 2461;
	int WORLDMAPELEMENTMOUSELEAVE_597 = 2462;
	int WORLDMAPELEMENTMOUSELEAVE_598 = 2463;
	int WORLDMAPELEMENTMOUSELEAVE_590 = 2464;
	int WORLDMAPELEMENTMOUSELEAVE_599 = 2465;
	int WORLDMAPELEMENTMOUSELEAVE_600 = 2466;
	int PROC_SCRIPT_2467 = 2467;
	int CLIENTSCRIPT_SCRIPT_2468 = 2468;
	int PROC_MESLAYER_BUTTON_DRAW = 2469;
	int CLIENTSCRIPT_MESLAYER_MODE7_BUTTON = 2470;
	int CLIENTSCRIPT_MESLAYER_MODE7_RESETBUTTON = 2471;
	int PROC_SCRIPT_2472 = 2472;
	int CLIENTSCRIPT_MODEL_TRANSPARENT_INIT = 2473;
	int CLIENTSCRIPT_MODEL_TRANSPARENT_DYNAMICZOOM_INIT = 2474;
	int CLIENTSCRIPT_CC_OUTLINE_OFF = 2475;
	int CLIENTSCRIPT_DUEL_INFO = 2476;
	int CLIENTSCRIPT_DUEL_STAKE_INV_CASH = 2477;
	int CLIENTSCRIPT_DUEL_STAKE_INV_DETAILS = 2478;
	int CLIENTSCRIPT_SCRIPT_2479 = 2479;
	int CLIENTSCRIPT_DUEL_STAKE_LOAD_HIGHLIGHT = 2480;
	int CLIENTSCRIPT_DUEL_STAKE_LOAD_MOUSEOUT = 2481;
	int CLIENTSCRIPT_DUEL_SWITCH_SETUP_BUTTONS = 2482;
	int CLIENTSCRIPT_DUEL_INVALID_OPTION = 2483;
	int CLIENTSCRIPT_DUEL_SWITCH_TO_INFO = 2484;
	int CLIENTSCRIPT_DUEL_SWITCH_TO_INV = 2485;
	int CLIENTSCRIPT_DUEL_SWITCH_TO_WORN = 2486;
	int PROC_DUEL_SWITCH_BUTTONS = 2487;
	int CLIENTSCRIPT_DUEL_MOUSEOUT_BUTTONS = 2488;
	int CLIENTSCRIPT_DUEL_ADD_GRAPHICS = 2489;
	int CLIENTSCRIPT_SCRIPT_2490 = 2490;
	int PROC_DUEL_STAKE_SETUP_BUTTONTEXT = 2491;
	int PROC_DUEL_STAKE_TEXTBOX = 2492;
	int CLIENTSCRIPT_SCRIPT_2493 = 2493;
	int PROC_SKILL_GUIDE_SUBSECTION_PRAYER = 2494;
	int CLIENTSCRIPT_OPENURL_RAW_SILENT = 2495;
	int PROC_MOBILE_BILLING_OPEN = 2496;
	int CLIENTSCRIPT_ACCOUNT_INIT = 2497;
	int CLIENTSCRIPT_ACCOUNT_INFO_UPDATE = 2498;
	int PROC_SKILL_GUIDE_DATA_PRAYER = 2499;
	int CLIENTSCRIPT_ACCOUNT_UPDATE_DISPLAY = 2500;
	int PROC_ACCOUNT_UPDATE_DISPLAY = 2501;
	int PROC_ACCOUNT_UPDATE_LAYOUT = 2502;
	int PROC_ACCOUNT_BILLING_UPDATE = 2503;
	int PROC_XP_DROPS_TOOLTIP_SETUP = 2504;
	int PROC_ACCOUNT_INBOX_UPDATE = 2505;
	int PROC_ACCOUNT_NAME_UPDATE = 2506;
	int PROC_IGNORE_APPEARANCE = 2507;
	int PROC_FRIENDS_APPEARANCE = 2508;
	int PROC_SCRIPT_2509 = 2509;
	int CLIENTSCRIPT_SCRIPT_2510 = 2510;
	int PROC_SCRIPT_2511 = 2511;
	int CLIENTSCRIPT_SCRIPT_2512 = 2512;
	int PROC_SCRIPT_2513 = 2513;
	int PROC_XPDROPS_SETUP_APPEARANCE = 2514;
	int CLIENTSCRIPT_PEST_LANDER_OVERLAY_INIT = 2515;
	int CLIENTSCRIPT_PEST_STATUS_OVERLAY_INIT = 2516;
	int PROC_NZONE_LOBBY_HINT = 2517;
	int PROC_SCRIPT_2518 = 2518;
	int PROC_SCRIPT_2519 = 2519;
	int PROC_SCRIPT_2520 = 2520;
	int PROC_SKILL_GUIDE_SUBSECTION_DEFENCE = 2521;
	int CLIENTSCRIPT_DECANT_ITEMBUTTON_KEY = 2522;
	int CLIENTSCRIPT_SCRIPT_2523 = 2523;
	int CLIENTSCRIPT_TOPLEVEL_MAINMODAL_OPEN = 2524;
	int PROC_TOPLEVEL_MAINMODAL_BACKGROUND = 2525;
	int PROC_SCRIPT_2526 = 2526;
	int PROC_MOBILE_MAINMODAL_OPEN = 2527;
	int CLIENTSCRIPT_SCRIPT_2528 = 2528;
	int PROC_DEADMAN_RESTRICTED_ITEM = 2529;
	int CLIENTSCRIPT_POH_RANGING_INIT = 2530;
	int CLIENTSCRIPT_CORP_BEAST_INIT = 2531;
	int CLIENTSCRIPT_BOARDGAMES_OVERLAY_INIT = 2532;
	int CLIENTSCRIPT_GNOMEBALL_INIT = 2533;
	int CLIENTSCRIPT_II_SCROLL_INIT = 2534;
	int CLIENTSCRIPT_BARBASSAULT_OVERLAY_INIT = 2535;
	int CLIENTSCRIPT_BARBASSAULT_HEALER_INIT = 2536;
	int CLIENTSCRIPT_DUEL_HUD_INIT = 2537;
	int CLIENTSCRIPT_AGILITYARENA_OVERLAY_INIT = 2538;
	int CLIENTSCRIPT_BR_LOBBYOVERLAY_INIT = 2539;
	int CLIENTSCRIPT_BREW_LOBBY_OVERLAY_INIT = 2540;
	int CLIENTSCRIPT_BREW_GAME_OVERLAY_INIT = 2541;
	int PROC_TOPLEVEL_MAINMODAL_BG_CALCULATE_MOBILE = 2542;
	int CLIENTSCRIPT_SCRIPT_2543 = 2543;
	int CLIENTSCRIPT_100GUIDE_OVERLAY_INIT = 2544;
	int CLIENTSCRIPT_SCRIPT_2545 = 2545;
	int CLIENTSCRIPT_AHOY_WINDSPEED_INIT = 2546;
	int CLIENTSCRIPT_MACRO_EVIL_BOB_INIT = 2547;
	int CLIENTSCRIPT_MAZETIMER_INIT = 2548;
	int CLIENTSCRIPT_TZHAAR_FIGHTPIT_INIT = 2549;
	int CLIENTSCRIPT_SCRIPT_2550 = 2550;
	int CLIENTSCRIPT_CATA_BOSS_INIT = 2551;
	int CLIENTSCRIPT_MAGICTRAINING_ALCH_INIT = 2552;
	int CLIENTSCRIPT_MAGICTRAINING_OTHER_INIT = 2553;
	int CLIENTSCRIPT_FOSSIL_POOL_OVERLAY_INIT = 2554;
	int CLIENTSCRIPT_SCRIPT_2555 = 2555;
	int CLIENTSCRIPT_MEMBERSHIP_BENEFITS_INIT = 2556;
	int CLIENTSCRIPT_MEMBERSHIP_BENEFITS_HIDE_BONDS = 2557;
	int CLIENTSCRIPT_MEMBERSHIP_BENEFITS_HOVER = 2558;
	int PROC_MEMBERSHIP_BENEFITS_HIDE_BONDS = 2559;
	int PROC_MEMBERSHIP_BENEFITS_BUTTON_INIT = 2560;
	int CLIENTSCRIPT_MEMBERSHIP_BENEFITS_BUTTON_DRAW = 2561;
	int PROC_MEMBERSHIP_BENEFITS_BUTTON_DRAW = 2562;
	int CLIENTSCRIPT_MEMBERSHIP_BENEFITS_VIEW = 2563;
	int CLIENTSCRIPT_MEMBERSHIP_BENEFITS_CLOSE_BENEFIT_HOVER = 2564;
	int CLIENTSCRIPT_MEMBERSHIP_BENEFITS_CLOSE_BENEFIT = 2565;
	int CLIENTSCRIPT_MEMBERSHIP_BENEFITS_PROMPT_INIT = 2566;
	int CLIENTSCRIPT_MEMBERSHIP_BENEFITS_PROMPT_HIDE_BONDS = 2567;
	int PROC_MEMBERSHIP_BENEFITS_PROMPT_HIDE_BONDS = 2568;
	int PROC_MEMBERSHIP_BENEFITS_PROMPT_BUTTON_INIT = 2569;
	int CLIENTSCRIPT_MEMBERSHIP_BENEFITS_PROMPT_BUTTON_DRAW = 2570;
	int PROC_MEMBERSHIP_BENEFITS_PROMPT_BUTTON_DRAW = 2571;
	int CLIENTSCRIPT_TUTORIAL_DISPLAYNAME_BORDER = 2572;
	int CLIENTSCRIPT_TUTORIAL_DISPLAYNAME_INIT = 2573;
	int CLIENTSCRIPT_TUTORIAL_DISPLAYNAME_BUTTONS = 2574;
	int PROC_TUTORIAL_DISPLAYNAME_BUTTONS = 2575;
	int PROC_BANKSIDE_EXTRAOP = 2576;
	int CLIENTSCRIPT_BANKMAIN_QUANTITY_BUTTONS = 2577;
	int PROC_BANKMAIN_QUANTITY_BUTTONS = 2578;
	int PROC_SCRIPT_2579 = 2579;
	int PROC_INT_DEVICE = 2580;
	int PROC_MOBILE_CHATBOX_RESIZE = 2581;
	int PROC_SKILL_GUIDE_DATA_DEFENCE = 2582;
	int PROC_TELENEXUS_LEFT_CLICK = 2583;
	int CLIENTSCRIPT_TUTORIAL_OVERLAY_HINT = 2584;
	int PROC_TUTORIAL_HINT_CHATBOX = 2585;
	int PROC_TUTORIAL_HINT_CAMERA = 2586;
	int PROC_TUTORIAL_HINT_CAMERA_DESKTOP = 2587;
	int PROC_TUTORIAL_HINT_CAMERA_MOBILE = 2588;
	int PROC_TUTORIAL_HINT_MOVE = 2589;
	int PROC_TUTORIAL_HINT_MOVE_DESKTOP = 2590;
	int PROC_TUTORIAL_HINT_MOVE_MOBILE = 2591;
	int PROC_TUTORIAL_HINT_INTERACT = 2592;
	int PROC_TUTORIAL_HINT_INTERACT_DESKTOP = 2593;
	int PROC_TUTORIAL_HINT_INTERACT_MOBILE = 2594;
	int PROC_BANK_DEPOSITBOX_LAYOUT = 2595;
	int CLIENTSCRIPT_DEPOSITBOX_MOBILE_BUTTON_INIT = 2596;
	int CLIENTSCRIPT_DEPOSITBOX_MOBILE_BUTTON_UPDATE = 2597;
	int PROC_DEPOSITBOX_MOBILE_BUTTON_OPTEXT = 2598;
	int PROC_SCRIPT_2599 = 2599;
	int CLIENTSCRIPT_DEPOSITBOX_MOBILE_BUTTON_OP = 2600;
	int PROC_DEPOSITBOX_MOBILE_BUTTON_UPDATE = 2601;
	int CLIENTSCRIPT_SCRIPT_2602 = 2602;
	int PROC_SCRIPT_2603 = 2603;
	int PROC_SCRIPT_2604 = 2604;
	int CLIENTSCRIPT_SCRIPT_2605 = 2605;
	int PROC_SCRIPT_2606 = 2606;
	int CLIENTSCRIPT_SCRIPT_2607 = 2607;
	int PROC_SCRIPT_2608 = 2608;
	int CLIENTSCRIPT_SCRIPT_2609 = 2609;
	int CLIENTSCRIPT_MAGIC_SPELLBOOK_REDRAW = 2610;
	int PROC_MAGIC_SPELLBOOK_REDRAW = 2611;
	int CLIENTSCRIPT_SCRIPT_2612 = 2612;
	int CLIENTSCRIPT_SCRIPT_2613 = 2613;
	int PROC_SCRIPT_2614 = 2614;
	int PROC_MAGIC_SPELLBOOK_MODIFYOPS = 2615;
	int PROC_MAGIC_SPELLBOOK_INITIALISESPELLS = 2616;
	int CLIENTSCRIPT_MAGIC_SPELLBOOK_TARGETMODE = 2617;
	int PROC_MAGIC_SPELLBOOK_HIDESPELLS = 2618;
	int PROC_MAGIC_SPELLBOOK_PASSFILTER = 2619;
	int PROC_MAGIC_SPELLBOOK_HASRUNES = 2620;
	int PROC_MAGIC_SPELLBOOK_SORT = 2621;
	int CLIENTSCRIPT_MAGIC_SPELLBOOK_SETTOOLTIP = 2622;
	int PROC_MAGIC_SPELLBOOK_SETTOOLTIP = 2623;
	int PROC_WOM_TAB_HIGHLIGHT = 2624;
	int PROC_WOM_GET_GRAPHICS = 2625;
	int PROC_WOM_GET_TAB = 2626;
	int PROC_WOM_GET_TEXT = 2627;
	int CLIENTSCRIPT_SCRIPT_2628 = 2628;
	int PROC_SCRIPT_2629 = 2629;
	int CLIENTSCRIPT_BOOK_INDEXED_INIT = 2630;
	int CLIENTSCRIPT_BOOK_INDEXED_INDEX_INIT = 2631;
	int CLIENTSCRIPT_BOOK_INIT = 2632;
	int PROC_QUESTLIST_DRAW = 2633;
	int CLIENTSCRIPT_MOBILE_RATING_INIT = 2634;
	int CLIENTSCRIPT_BOARDGAMES_BUTTON_INIT = 2635;
	int CLIENTSCRIPT_BOARDGAMES_RUNELINK_OPTIONS_INIT = 2636;
	int PROC_XP_DROPS_TOOLTIP_DESKTOP = 2637;
	int PROC_XP_DROPS_TOOLTIP_MOBILE = 2638;
	int CLIENTSCRIPT_XPDROPS_TOOLTIP_MOBILE = 2639;
	int CLIENTSCRIPT_XPDROPS_TOOLTIP_MOBILE_REMOVE = 2640;
	int CLIENTSCRIPT_EQUIPMENT_ICON_INIT = 2641;
	int CLIENTSCRIPT_EQUIPMENT_ICON_CHECK = 2642;
	int CLIENTSCRIPT_EQUIPMENT_ICON_FLASH = 2643;
	int CLIENTSCRIPT_TUTORIAL_DEFAULT_SETTINGS = 2644;
	int CLIENTSCRIPT_TUTORIAL_END = 2645;
	int PROC_TOPLEVEL_SIDEBUTTON_HIGHLIGHT = 2646;
	int CLIENTSCRIPT_SCRIPT_2647 = 2647;
	int CLIENTSCRIPT_SCRIPT_2648 = 2648;
	int CLIENTSCRIPT_SCRIPT_2649 = 2649;
	int CLIENTSCRIPT_TELENEXUS_RADIO_CLICK = 2650;
	int CLIENTSCRIPT_TELENEXUS_TICK_OP = 2651;
	int CLIENTSCRIPT_TELENEXUS_TICK_MOUSEOVER = 2652;
	int CLIENTSCRIPT_TELENEXUS_TICK_MOUSELEAVE = 2653;
	int CLIENTSCRIPT_TELENEXUS_SHOW_COST = 2654;
	int PROC_TELENEXUS_SHOW_COST = 2655;
	int CLIENTSCRIPT_TELENEXUS_EXAMINE_COST = 2656;
	int CLIENTSCRIPT_TELENEXUS_HIDE_COST = 2657;
	int PROC_TELENEXUS_HIDE_COST = 2658;
	int CLIENTSCRIPT_TELENEXUS_OKBUTTON_CLICK = 2659;
	int CLIENTSCRIPT_TELENEXUS_DONE_TEXT = 2660;
	int CLIENTSCRIPT_TELENEXUS_CANCEL = 2661;
	int CLIENTSCRIPT_POH_NEXUS_MODEL = 2662;
	int PROC_POH_NEXUS_MODEL = 2663;
	int PROC_SCRIPT_2664 = 2664;
	int PROC_SCRIPT_2665 = 2665;
	int PROC_TELENEXUS_SET_SLOT = 2666;
	int PROC_TELENEXUS_REMOVE_TELE = 2667;
	int PROC_TELENEXUS_SLOTS_FULL = 2668;
	int PROC_TELENEXUS_GET_SLOT_VALUE = 2669;
	int PROC_SCRIPT_2670 = 2670;
	int PROC_SCRIPT_2671 = 2671;
	int CLIENTSCRIPT_TELENEXUS_TELEPORT_INIT = 2672;
	int CLIENTSCRIPT_SCRIPT_2673 = 2673;
	int PROC_SCRIPT_2674 = 2674;
	int PROC_SCRIPT_2675 = 2675;
	int CLIENTSCRIPT_TELENEXUS_OPTIONS_MOUSEOVER = 2676;
	int CLIENTSCRIPT_TELENEXUS_OPTIONS_MOUSELEAVE = 2677;
	int CLIENTSCRIPT_TELENEXUS_SCRY_CLICK = 2678;
	int CLIENTSCRIPT_TELENEXUS_SCRY_VARTRANS = 2679;
	int PROC_TELENEXUS_OPTIONS = 2680;
	int PROC_TELENEXUS_GET_SLOT = 2681;
	int PROC_MAGIC_STOP_FLASH = 2682;
	int CLIENTSCRIPT_BOARDGAMES_RUNELINK_OPTIONS_UPDATE_SELECTIONS = 2683;
	int CLIENTSCRIPT_BOND_PROMPT_INIT = 2684;
	int CLIENTSCRIPT_TELENEXUS_KEYINPUT_LISTENER = 2685;
	int PROC_TELENEXUS_KEYINPUT_MATCHED = 2686;
	int CLIENTSCRIPT_SCRIPT_2687 = 2687;
	int CLIENTSCRIPT_SCRIPT_2688 = 2688;
	int CLIENTSCRIPT_SCRIPT_2689 = 2689;
	int PROC_SCRIPT_2690 = 2690;
	int CLIENTSCRIPT_SCRIPT_2691 = 2691;
	int PROC_SCRIPT_2692 = 2692;
	int CLIENTSCRIPT_SCRIPT_2693 = 2693;
	int CLIENTSCRIPT_SCRIPT_2694 = 2694;
	int CLIENTSCRIPT_TOURNAMENT_SUPPLIES_PREVIEWAREA = 2695;
	int PROC_TOURNAMENT_SUPPLIES_PREVIEWAREA = 2696;
	int CLIENTSCRIPT_TOURNAMENT_SUPPLIES_SWITCHLAYER = 2697;
	int PROC_TOURNAMENT_SUPPLIES_SWITCHLAYER = 2698;
	int CLIENTSCRIPT_SCRIPT_2699 = 2699;
	int PROC_SCRIPT_2700 = 2700;
	int PROC_TOOLTIP_BUILD = 2701;
	int PROC_SCRIPT_2702 = 2702;
	int PROC_SCRIPT_2703 = 2703;
	int CLIENTSCRIPT_SCRIPT_2704 = 2704;
	int CLIENTSCRIPT_SCRIPT_2705 = 2705;
	int CLIENTSCRIPT_SHOW_IOS_REVIEW = 2706;
	int CLIENTSCRIPT_1V1ARENA_REVIEW_INIT = 2707;
	int CLIENTSCRIPT_1V1ARENA_REVIEW_DRAW = 2708;
	int PROC_1V1ARENA_REVIEW_DRAW = 2709;
	int CLIENTSCRIPT_1V1ARENA_RESULTS_INIT = 2710;
	int CLIENTSCRIPT_1V1ARENA_CLEAR_OPBUTTON = 2711;
	int CLIENTSCRIPT_1V1ARENA_CLEAR_RESETBUTTON = 2712;
	int CLIENTSCRIPT_1V1ARENA_HUD_INIT = 2713;
	int CLIENTSCRIPT_1V1ARENA_HUD_BUTTON = 2714;
	int CLIENTSCRIPT_1V1ARENA_HUD_RESETBUTTON = 2715;
	int CLIENTSCRIPT_1V1ARENA_HUD_TOGGLE = 2716;
	int PROC_1V1ARENA_HUD_TOGGLE = 2717;
	int CLIENTSCRIPT_1V1ARENA_HUD_TRANSMIT = 2718;
	int PROC_1V1ARENA_HUD_BUILDPLAYER = 2719;
	int PROC_SCRIPT_2720 = 2720;
	int PROC_1V1ARENA_HUD_BUILDARENA = 2721;
	int CLIENTSCRIPT_1V1ARENA_SPECTATOR_INIT = 2722;
	int CLIENTSCRIPT_1V1ARENA_SPECTATOR_ENDHINT = 2723;
	int PROC_BOARDGAMES_RUNELINK_OPTIONS_UPDATE_SELECTIONS = 2724;
	int CLIENTSCRIPT_BOARDGAMES_RUNELINK_OPTIONS_UPDATE_RUNE = 2725;
	int PROC_BOARDGAMES_RUNELINK_OPTIONS_UPDATE_RUNE = 2726;
	int CLIENTSCRIPT_MESLAYER_KEYBOARD_SHOW = 2727;
	int PROC_COLLECTION_DRAW_TAB = 2728;
	int CLIENTSCRIPT_COLLECTION_HOVER_TAB = 2729;
	int CLIENTSCRIPT_COLLECTION_DRAW_LIST = 2730;
	int PROC_COLLECTION_DRAW_LIST = 2731;
	int PROC_COLLECTION_DRAW_LOG = 2732;
	int CLIENTSCRIPT_COLLECTION_ITEM_CLICK = 2733;
	int PROC_SCRIPT_2734 = 2734;
	int PROC_COLLECTION_CATEGORY_COUNT = 2735;
	int CLIENTSCRIPT_LOVAQUEST_LOCKS_INIT = 2736;
	int CLIENTSCRIPT_LOVAQUEST_POWER_GRID_INIT = 2737;
	int CLIENTSCRIPT_LOVAQUEST_POWER_GRID_REDRAW = 2738;
	int PROC_LOVAQUEST_POWER_GRID_REDRAW = 2739;
	int CLIENTSCRIPT_LOVAQUEST_POWER_GRID_ROTATE = 2740;
	int PROC_LOVAQUEST_POWER_GRID_GETSLOT = 2741;
	int PROC_LOVAQUEST_POWER_GRID_SETSLOT = 2742;
	int PROC_SKILL_GUIDE_DATA_SLAYER = 2743;
	int CLIENTSCRIPT_BOARDGAMES_RUNELINK_OPTIONS_UPDATE_TIME = 2744;
	int PROC_BOARDGAMES_RUNELINK_OPTIONS_UPDATE_TIME = 2745;
	int CLIENTSCRIPT_BOARDGAMES_RUNELINK_OPTIONS_UPDATE_RANKED = 2746;
	int PROC_BOARDGAMES_RUNELINK_OPTIONS_UPDATE_RANKED = 2747;
	int CLIENTSCRIPT_FARMING_TOOLS_MAIN_RECREATE = 2748;
	int PROC_FARMING_TOOLS_MAIN_RECREATE = 2749;
	int CLIENTSCRIPT_FARMING_TOOLS_SIDE_RECREATE = 2750;
	int PROC_FARMING_TOOLS_SIDE_RECREATE = 2751;
	int CLIENTSCRIPT_SNAPSHOT_OPENKEYBOARD = 2752;
	int CLIENTSCRIPT_WINT_TIMER_INIT = 2753;
	int CLIENTSCRIPT_WINT_TIMER_RESYNCH = 2754;
	int PROC_WINT_TIMER_RESYNCH = 2755;
	int CLIENTSCRIPT_WINT_TIMER_COUNTDOWN = 2756;
	int PROC_WINT_TIMER_COUNTDOWN = 2757;
	int PROC_PRAYER_INFOBUTTON = 2758;
	int CLIENTSCRIPT_PRAYER_INFOMODE = 2759;
	int CLIENTSCRIPT_PRAYER_LEVELUPDATE = 2760;
	int PROC_PRAYER_LEVELUPDATE = 2761;
	int PROC_PRAYER_GETTOOLTIPTEXT = 2762;
	int PROC_TOL_PRESSURE_DRAW = 2763;
	int PROC_TOL_PRESSURE_VALVEINIT = 2764;
	int CLIENTSCRIPT_TOL_PRESSURE_VALVELISTENER = 2765;
	int PROC_TOL_PRESSURE_VALVELISTENER = 2766;
	int CLIENTSCRIPT_TOL_PRESSURE_VALVEOP = 2767;
	int CLIENTSCRIPT_TOL_PIPE_INIT = 2768;
	int CLIENTSCRIPT_TOL_PIPE_SETBUTTONS = 2769;
	int PROC_TOL_PIPE_SETBUTTONS = 2770;
	int CLIENTSCRIPT_PEST_REWARDS_INIT = 2771;
	int CLIENTSCRIPT_PEST_REWARDS_SHOWPOINTS = 2772;
	int PROC_PEST_REWARDS_SHOWPOINTS = 2773;
	int CLIENTSCRIPT_PEST_REWARDS_CONFIRMOP = 2774;
	int CLIENTSCRIPT_PEST_REWARDS_DRAW = 2775;
	int PROC_PEST_REWARDS_DRAW = 2776;
	int CLIENTSCRIPT_PEST_REWARDS_CONFIRMDRAW = 2777;
	int PROC_PEST_REWARDS_CONFIRMDRAW = 2778;
	int PROC_PEST_REWARDS_ITEMDRAW = 2779;
	int PROC_PEST_REWARDS_STATDRAW = 2780;
	int PROC_PEST_REWARDS_STATBUTTONDRAW = 2781;
	int CLIENTSCRIPT_PEST_REWARDS_SELECT = 2782;
	int CLIENTSCRIPT_PEST_REWARDS_REFUSE = 2783;
	int PROC_PEST_REWARDS_COSTPOINTS = 2784;
	int PROC_PEST_REWARDS_COSTPTS = 2785;
	int PROC_SCRIPT_2786 = 2786;
	int CLIENTSCRIPT_BARROWS_PUZZLE_INIT = 2787;
	int PROC_BARROWS_PUZZLE_BUTTONINIT = 2788;
	int CLIENTSCRIPT_BARROWS_PUZZLE_BUTTONHOVER = 2789;
	int PROC_SKILL_GUIDE_SUBSECTION_MAGIC = 2790;
	int PROC_SKILL_GUIDE_DATA_MAGIC = 2791;
	int PROC_ORBS_SPEC_DRAW_BUTTON = 2792;
	int CLIENTSCRIPT_ORBS_TOGGLE_SPEC_OP = 2793;
	int CLIENTSCRIPT_ORBS_BLOCKED_SPEC_OP = 2794;
	int CLIENTSCRIPT_ITEMSETS_INFO_INIT = 2795;
	int CLIENTSCRIPT_SCRIPT_2796 = 2796;
	int CLIENTSCRIPT_JOURNAL_LIST_INIT = 2797;
	int CLIENTSCRIPT_SIDE_JOURNAL_SWITCHTAB_ONOP = 2798;
	int CLIENTSCRIPT_SIDE_JOURNAL_SWITCHTAB_ONTRANSMIT = 2799;
	int PROC_SIDE_JOURNAL_SWITCHTAB = 2800;
	int PROC_SIDE_JOURNAL_ACTIVE = 2801;
	int PROC_SIDE_JOURNAL_INACTIVE = 2802;
	int CLIENTSCRIPT_SCRIPT_2803 = 2803;
	int CLIENTSCRIPT_SCRIPT_2804 = 2804;
	int CLIENTSCRIPT_DEADMAN_BROADCAST_MESSAGE = 2805;
	int PROC_SCRIPT_2806 = 2806;
	int PROC_DEADMAN_BROADCAST_MESSAGE_SIZING = 2807;
	int CLIENTSCRIPT_DEADMAN_BROADCAST_MESSAGE_TIMER = 2808;
	int CLIENTSCRIPT_SCRIPT_2809 = 2809;
	int CLIENTSCRIPT_SCRIPT_2810 = 2810;
	int CLIENTSCRIPT_SEED_VAULT_SIDE_INIT = 2811;
	int CLIENTSCRIPT_SEED_VAULT_SIDE_DRAW = 2812;
	int PROC_SEED_VAULT_SIDE_DRAW = 2813;
	int CLIENTSCRIPT_SEED_VAULT_BUILD_CATEGORY_LIST = 2814;
	int CLIENTSCRIPT_SEED_VAULT_CATOP = 2815;
	int CLIENTSCRIPT_SEED_VAULT_CATVAR = 2816;
	int PROC_SEED_VAULT_CATSELECT = 2817;
	int CLIENTSCRIPT_SEED_VAULT_INIT = 2818;
	int CLIENTSCRIPT_SEED_VAULT_BUILD = 2819;
	int PROC_SEED_VAULT_BUILD = 2820;
	int CLIENTSCRIPT_SCRIPT_2821 = 2821;
	int CLIENTSCRIPT_SCRIPT_2822 = 2822;
	int PROC_SCRIPT_2823 = 2823;
	int CLIENTSCRIPT_SEED_VAULT_DRAG_OBJ = 2824;
	int CLIENTSCRIPT_SEED_VAULT_DRAG_TEXT = 2825;
	int PROC_SEED_VAULT_DOSCROLL = 2826;
	int CLIENTSCRIPT_SEED_VAULT_DROP = 2827;
	int PROC_SCRIPT_2828 = 2828;
	int PROC_SCRIPT_2829 = 2829;
	int CLIENTSCRIPT_SCRIPT_2830 = 2830;
	int PROC_SCRIPT_2831 = 2831;
	int PROC_SCRIPT_2832 = 2832;
	int PROC_SCRIPT_2833 = 2833;
	int CLIENTSCRIPT_IF_FLASH_COMPONENT = 2834;
	int WORLDMAPELEMENTMOUSEREPEAT_619 = 2835;
	int WORLDMAPELEMENTMOUSELEAVE_619 = 2836;
	int CLIENTSCRIPT_SCRIPT_2837 = 2837;
	int CLIENTSCRIPT_SCRIPT_2838 = 2838;
	int PROC_SCRIPT_2839 = 2839;
	int CLIENTSCRIPT_ADVENTUREPATH_VOUCHER_INIT = 2840;
	int PROC_ADVENTUREPATH_VOUCHER_ENTRY = 2841;
	int CLIENTSCRIPT_ADVENTUREPATH_VOUCHER_ITEM_OP = 2842;
	int CLIENTSCRIPT_ADVENTUREPATH_ITEM_INIT = 2843;
	int PROC_ADVENTUREPATH_ITEM_ENTRY = 2844;
	int PROC_ADVENTUREPATH_RETURN_HEAD_POS = 2845;
	int CLIENTSCRIPT_ADVENTUREPATH_INIT = 2846;
	int PROC_ADVENTUREPATH_CHANGE_PAGE = 2847;
	int PROC_SCRIPT_2848 = 2848;
	int PROC_SCRIPT_2849 = 2849;
	int CLIENTSCRIPT_SCRIPT_2850 = 2850;
	int CLIENTSCRIPT_SCRIPT_2851 = 2851;
	int PROC_SEED_VAULT_SIZE_CHECK = 2852;
	int CLIENTSCRIPT_SCRIPT_2853 = 2853;
	int PROC_SCRIPT_2854 = 2854;
	int PROC_SCRIPT_2855 = 2855;
	int CLIENTSCRIPT_SCRIPT_2856 = 2856;
	int CLIENTSCRIPT_SCRIPT_2857 = 2857;
	int CLIENTSCRIPT_SCRIPT_2858 = 2858;
	int CLIENTSCRIPT_CLOCK_FAKE_UPDATE = 2859;
	int CLIENTSCRIPT_CLOCK_UPDATE = 2860;
	int PROC_CLOCK_SET = 2861;
	int PROC_SEED_VAULT_SEARCHING = 2862;
	int PROC_SEED_VAULT_FILTERITEM = 2863;
	int PROC_SEED_VAULT_FILTERSTRING = 2864;
	int CLIENTSCRIPT_SEED_VAULT_SEARCH_TOGGLE = 2865;
	int PROC_SEED_VAULT_SEARCH_SETBUTTON = 2866;
	int CLIENTSCRIPT_SEED_VAULT_SEARCH_REFRESH = 2867;
	int CLIENTSCRIPT_OBJBOX_SETBUTTONS = 2868;
	int CLIENTSCRIPT_OBJBOX_LISTENER = 2869;
	int CLIENTSCRIPT_OBJBOX_RESET = 2870;
	int PROC_SCRIPT_2871 = 2871;
	int PROC_SCRIPT_2872 = 2872;
	int CLIENTSCRIPT_KDR_UPDATE = 2873;
	int PROC_KDR_UPDATE = 2874;
	int CLIENTSCRIPT_SCRIPT_2875 = 2875;
	int PROC_SCRIPT_2876 = 2876;
	int CLIENTSCRIPT_CLANWARS_SETUP_SMALLBOX_OPEN = 2877;
	int CLIENTSCRIPT_CLANWARS_SETUP_SMALLBOX_CLOSE = 2878;
	int CLIENTSCRIPT_CLANWARS_SETUP_SMALLBOX_UPDATETEXT = 2879;
	int PROC_CLANWARS_SETUP_SMALLBOX_UPDATETEXT = 2880;
	int PROC_SCRIPT_2881 = 2881;
	int CLIENTSCRIPT_IF_FLASH_COMPONENT_TIMER = 2882;
	int CLIENTSCRIPT_SCRIPT_2883 = 2883;
	int CLIENTSCRIPT_CC_FLASH_COMPONENT = 2884;
	int CLIENTSCRIPT_CC_FLASH_COMPONENT_TIMER = 2885;
	int CLIENTSCRIPT_HP_HUD_FADE_IN_CHECK = 2886;
	int CLIENTSCRIPT_HP_HUD_FADE_IN = 2887;
	int PROC_HP_HUD_FADE_IN = 2888;
	int CLIENTSCRIPT_HP_HUD_FADE_OUT = 2889;
	int PROC_HP_HUD_FADE_OUT = 2890;
	int PROC_ORBS_WORLDMAP_GRAPHICS = 2891;
	int PROC_ORBS_WORLDMAP_OP1 = 2892;
	int CLIENTSCRIPT_OVERLAY_PORTAL = 2893;
	int CLIENTSCRIPT_OVERLAY_PORTAL_REMOVE = 2894;
	int CLIENTSCRIPT_OVERLAY_PORTAL_ADJUST = 2895;
	int CLIENTSCRIPT_MIRROR_INTERFACE_INIT = 2896;
	int CLIENTSCRIPT_MIRROR_INTERFACE_KEYPRESS = 2897;
	int CLIENTSCRIPT_MIRROR_INTERFACE_BUTTON_RESET = 2898;
	int CLIENTSCRIPT_MIRROR_INTERFACE_BUTTON_DRAW = 2899;
	int PROC_MIRROR_INTERFACE_BUTTON_DRAW = 2900;
	int CLIENTSCRIPT_SCRIPT_2901 = 2901;
	int CLIENTSCRIPT_SCRIPT_2902 = 2902;
	int CLIENTSCRIPT_SCRIPT_2903 = 2903;
	int WORLDMAPELEMENTMOUSEREPEAT_630 = 2904;
	int WORLDMAPELEMENTMOUSEREPEAT_631 = 2905;
	int WORLDMAPELEMENTMOUSELEAVE_630 = 2906;
	int WORLDMAPELEMENTMOUSELEAVE_631 = 2907;
	int CLIENTSCRIPT_GAUNTLET_MAP_INIT = 2908;
	int PROC_GAUNTLET_MAP_UPDATE = 2909;
	int PROC_GAUNTLET_MAP_START_UPDATE = 2910;
	int PROC_GAUNTLET_MAP_ROOM_UPDATE = 2911;
	int PROC_GAUNTLET_MAP_PLAYER_UPDATE = 2912;
	int CLIENTSCRIPT_GAUNTLET_OVERLAY_INIT = 2913;
	int CLIENTSCRIPT_GAUNTLET_TIMER_UPDATE = 2914;
	int CLIENTSCRIPT_GAUNTLET_TIMER = 2915;
	int CLIENTSCRIPT_GAUNTLET_TIMER_END = 2916;
	int CLIENTSCRIPT_GAUNTLET_RECIPES_INIT = 2917;
	int PROC_SCRIPT_2918 = 2918;
	int PROC_GAUNTLET_SELECT_ITEM = 2919;
	int PROC_SCRIPT_2920 = 2920;
	int CLIENTSCRIPT_PRIF_OVERLAY_PORTAL = 2921;
	int CLIENTSCRIPT_PRIF_REMOVE_PORTAL = 2922;
	int CLIENTSCRIPT_PRIF_ADJUST_PORTAL = 2923;
	int CLIENTSCRIPT_PRIF_RECIPES_INIT = 2924;
	int PROC_SCRIPT_2925 = 2925;
	int CLIENTSCRIPT_SKILLMAIN_INIT = 2926;
	int CLIENTSCRIPT_SKILLMAIN_SETUP = 2927;
	int PROC_SKILLMAIN_SETUP = 2928;
	int PROC_SKILLMAIN_BUTTON_CREATE = 2929;
	int CLIENTSCRIPT_SKILLMAIN_SETQUANTITY = 2930;
	int CLIENTSCRIPT_SKILLMAIN_BUTTON_DRAW = 2931;
	int PROC_SKILLMAIN_BUTTON_DRAW = 2932;
	int PROC_SKILLMAIN_BUTTON_WIPE = 2933;
	int CLIENTSCRIPT_SILVER_CRAFTING_MOUSEEFFECT = 2934;
	int PROC_SILVER_CRAFTING_JEWELLERYTITLE_SETUP = 2935;
	int CLIENTSCRIPT_SILVER_CRAFTING_JEWELLERYTITLE_DRAW = 2936;
	int PROC_SILVER_CRAFTING_JEWELLERYTITLE_DRAW = 2937;
	int PROC_SILVER_CRAFTING_JEWELLERY_SETUP = 2938;
	int CLIENTSCRIPT_SILVER_CRAFTING_JEWELLERY_DRAW = 2939;
	int PROC_SILVER_CRAFTING_JEWELLERY_DRAW = 2940;
	int PROC_SILVER_CRAFTING_MISCELLANEOUS_SETUP = 2941;
	int CLIENTSCRIPT_SILVER_CRAFTING_MISCELLANEOUS_DRAW = 2942;
	int PROC_SILVER_CRAFTING_MISCELLANEOUS_DRAW = 2943;
	int CLIENTSCRIPT_SCRIPT_2944 = 2944;
	int PROC_ADVENTUREPATH_INIT = 2945;
	int PROC_ADVENTUREPATH_DRAW_PATH = 2946;
	int CLIENTSCRIPT_ADVENTUREPATH_ON_MOUSE_OVER = 2947;
	int CLIENTSCRIPT_ADVENTUREPATH_TASK_INIT_TRANSMIT = 2948;
	int CLIENTSCRIPT_ADVENTUREPATH_TASK_INIT = 2949;
	int PROC_ADVENTUREPATH_TASK_INIT_OP = 2950;
	int PROC_ADVENTUREPATH_TASK_INIT = 2951;
	int CLIENTSCRIPT_ADVENTUREPATH_MOUSEOVER_PATH_REWARD = 2952;
	int CLIENTSCRIPT_ADVENTUREPATH_MOUSELEAVE_PATH_REWARD = 2953;
	int CLIENTSCRIPT_ADVENTUREPATH_SET_INFO_TRANSMIT = 2954;
	int CLIENTSCRIPT_ADVENTUREPATH_SET_INFO = 2955;
	int CLIENTSCRIPT_AP_ICON_FLASH = 2956;
	int CLIENTSCRIPT_AP_FLASH_TIMER = 2957;
	int PROC_ADVENTUREPATH_FLASHICON = 2958;
	int PROC_ADVENTUREPATH_RETURN_TASK_STATUS = 2959;
	int PROC_ADVENTUREPATH_RETURN_REWARD_F2P = 2960;
	int PROC_ADVENTUREPATH_RETURN_REWARD_P2P = 2961;
	int PROC_ADVENTUREPATH_RETURN_KIT = 2962;
	int PROC_ADVENTUREPATH_RETURN_PATH_STATUS = 2963;
	int PROC_ADVENTUREPATH_RETURN_PATH_REWARD_F2P = 2964;
	int PROC_ADVENTUREPATH_RETURN_PATH_REWARD_P2P = 2965;
	int PROC_ADVENTUREPATH_RETURN_VOUCHER = 2966;
	int PROC_ADVENTUREPATH_RETURN_PATH_LENGTH = 2967;
	int PROC_ADVENTUREPATH_RETURN_PATH_TASKS_DONE = 2968;
	int PROC_ADVENTUREPATH_RETURN_TASK_FOCUS = 2969;
	int PROC_ADVENTUREPATH_SET_TASK_FOCUS = 2970;
	int CLIENTSCRIPT_BOARDGAMES_DRAUGHTS_OPTIONS_INIT = 2971;
	int PROC_SCRIPT_2972 = 2972;
	int PROC_SCRIPT_2973 = 2973;
	int PROC_CREATE_V2_STONE_BUTTON_FILLED_FREE = 2974;
	int CLIENTSCRIPT_V2_STONE_BUTTON_FILLED_FREE = 2975;
	int PROC_V2_STONE_BUTTON_FILLED_FREE = 2976;
	int CLIENTSCRIPT_V2_STONE_BUTTON_IN_FILLED_FREE = 2977;
	int PROC_V2_STONE_BUTTON_IN_FILLED_FREE = 2978;
	int PROC_CREATE_V2_STONE_BUTTON_FILLED_FREE_ICON = 2979;
	int CLIENTSCRIPT_V2_STONE_BUTTON_FILLED_FREE_ICON = 2980;
	int PROC_V2_STONE_BUTTON_FILLED_FREE_ICON = 2981;
	int CLIENTSCRIPT_V2_STONE_BUTTON_IN_FILLED_FREE_ICON = 2982;
	int PROC_V2_STONE_BUTTON_IN_FILLED_FREE_ICON = 2983;
	int PROC_SCRIPT_2984 = 2984;
	int CLIENTSCRIPT_SCRIPT_2985 = 2985;
	int CLIENTSCRIPT_SCRIPT_2986 = 2986;
	int PROC_SCRIPT_2987 = 2987;
	int CLIENTSCRIPT_SCRIPT_2988 = 2988;
	int PROC_SCRIPT_2989 = 2989;
	int PROC_SCRIPT_2990 = 2990;
	int PROC_STONEBORDER_FREE = 2991;
	int CLIENTSCRIPT_ADVENTUREPATH_DO_NOTHING = 2992;
	int PROC_ADVENTUREPATH_HINT_LIST = 2993;
	int PROC_SCRIPT_2994 = 2994;
	int CLIENTSCRIPT_SCRIPT_2995 = 2995;
	int CLIENTSCRIPT_SCRIPT_2996 = 2996;
	int PROC_ADVENTUREPATH_SET_INFO = 2997;
	int CLIENTSCRIPT_SCRIPT_2998 = 2998;
	int CLIENTSCRIPT_SCRIPT_2999 = 2999;
	int CLIENTSCRIPT_SCRIPT_3000 = 3000;
	int CLIENTSCRIPT_SCRIPT_3001 = 3001;
	int PROC_ADVENTUREPATH_TASK_FOCUS = 3002;
	int CLIENTSCRIPT_ADVENTUREPATH_OPEN_URL = 3003;
	int PROC_SCRIPT_3004 = 3004;
	int PROC_ADVENTUREPATH_SPAWN_ITEM = 3005;
	int CLIENTSCRIPT_ADVENTUREPATH_SAY_ITEM = 3006;
	int PROC_ADVENTUREPATH_BUTTON_TEXT = 3007;
	int CLIENTSCRIPT_ADVENTUREPATH_BACK_MOUSEOVER = 3008;
	int CLIENTSCRIPT_ADVENTUREPATH_BACK_MOUSELEAVE = 3009;
	int PROC_ADVENTUREPATH_BACK_BUTTON_TEXT = 3010;
	int CLIENTSCRIPT_ADVENTUREPATH_BACK_TO_PATHS = 3011;
	int CLIENTSCRIPT_ADVENTUREPATH_SHOW_MORE_INFO = 3012;
	int CLIENTSCRIPT_SCRIPT_3013 = 3013;
	int CLIENTSCRIPT_SCRIPT_3014 = 3014;
	int CLIENTSCRIPT_SCRIPT_3015 = 3015;
	int PROC_SCRIPT_3016 = 3016;
	int CLIENTSCRIPT_SCRIPT_3017 = 3017;
	int CLIENTSCRIPT_ADVENTUREPATH_SIDE_INIT = 3018;
	int CLIENTSCRIPT_ADVENTUREPATH_SIDE_INFO_TRANSMIT = 3019;
	int CLIENTSCRIPT_SCRIPT_3020 = 3020;
	int CLIENTSCRIPT_ADVENTUREPATH_SIDE_LAYER = 3021;
	int PROC_ADVENTUREPATH_SIDE_INFO = 3022;
	int PROC_ADVENTUREPATH_SIDE_SETTINGS = 3023;
	int CLIENTSCRIPT_ADVENTUREPATH_SIDE_SETTINGS_BUTTON_OP = 3024;
	int PROC_ADVENTUREPATH_SIDE_SETTINGS_CONTENT = 3025;
	int CLIENTSCRIPT_SCRIPT_3026 = 3026;
	int CLIENTSCRIPT_SCRIPT_3027 = 3027;
	int CLIENTSCRIPT_SCRIPT_3028 = 3028;
	int CLIENTSCRIPT_SCRIPT_3029 = 3029;
	int CLIENTSCRIPT_SCRIPT_3030 = 3030;
	int CLIENTSCRIPT_SCRIPT_3031 = 3031;
	int CLIENTSCRIPT_SCRIPT_3032 = 3032;
	int CLIENTSCRIPT_SCRIPT_3033 = 3033;
	int PROC_SCRIPT_3034 = 3034;
	int PROC_ADVENTUREPATH_SIDE_CREATE_TOGGLE = 3035;
	int CLIENTSCRIPT_ADVENTUREPATH_SIDE_SETTINGS_BACK_LEAVE = 3036;
	int PROC_ADVENTUREPATH_SIDE_SETTINGS_BACK_LEAVE = 3037;
	int CLIENTSCRIPT_ADVENTUREPATH_SIDE_SETTINGS_BACK_OVER = 3038;
	int CLIENTSCRIPT_ADVENTUREPATH_SIDE_SETTINGS_BACK_OP = 3039;
	int CLIENTSCRIPT_SCRIPT_3040 = 3040;
	int PROC_LEAGUE_CREATE_DROPDOWN = 3041;
	int PROC_POH_TABLETS_BUILDBUTTON = 3042;
	int CLIENTSCRIPT_POH_TABLETS_UPDATEBUTTON = 3043;
	int CLIENTSCRIPT_POH_TABLETS_HIDEHIGHLIGHT = 3044;
	int CLIENTSCRIPT_TRAWLER_WATER_INIT = 3045;
	int CLIENTSCRIPT_TRAWLER_WATER_UPDATE = 3046;
	int PROC_TRAWLER_WATER_UPDATE = 3047;
	int CLIENTSCRIPT_TRAWLER_ACTIVITY_INIT = 3048;
	int CLIENTSCRIPT_TRAWLER_ACTIVITY_UPDATE = 3049;
	int PROC_TRAWLER_ACTIVITY_UPDATE = 3050;
	int CLIENTSCRIPT_SCRIPT_3051 = 3051;
	int CLIENTSCRIPT_SCRIPT_3052 = 3052;
	int PROC_SCRIPT_3053 = 3053;
	int CLIENTSCRIPT_SKILL_GUIDE_MAGIC_OP = 3054;
	int PROC_MODULO = 3055;
	int CLIENTSCRIPT_MACRO_BEEKEEPER_INIT = 3056;
	int CLIENTSCRIPT_MACRO_BEEKEEPER_TRANSMIT = 3057;
	int CLIENTSCRIPT_MACRO_BEEKEEPER_CONFIRMBUTTON = 3058;
	int CLIENTSCRIPT_MACRO_BEEKEEPER_TIMER = 3059;
	int PROC_MACRO_BEEKEEPER_UPDATE = 3060;
	int PROC_MACRO_BEEKEEPER_SETCOMPONENT = 3061;
	int CLIENTSCRIPT_MACRO_BEEKEEPER_REARRANGE = 3062;
	int CLIENTSCRIPT_BEES_INIT = 3063;
	int CLIENTSCRIPT_BEES = 3064;
	int CLIENTSCRIPT_BEES_MOUSEOVER = 3065;
	int CLIENTSCRIPT_BEES_MOUSELEAVE = 3066;
	int PROC_BR_LOADOUT_DRAWLOADOUT = 3067;
	int CLIENTSCRIPT_BR_LOADOUT_INSERT = 3068;
	int CLIENTSCRIPT_BR_LOADOUT_REARRANGE = 3069;
	int PROC_BR_LOADOUT_ADDITEM = 3070;
	int CLIENTSCRIPT_BR_LOADOUT_HIDEWARNING = 3071;
	int CLIENTSCRIPT_BR_LOADOUT_RESTOREWARNING = 3072;
	int PROC_BR_LOADOUT_SORT = 3073;
	int PROC_BR_LOADOUT_GET_INV = 3074;
	int PROC_BR_LOADOUT_GET_WORN = 3075;
	int PROC_BR_LOADOUT_SET_INV = 3076;
	int PROC_BR_LOADOUT_SET_WORN = 3077;
	int CLIENTSCRIPT_BR_TOURNAMENT_BUTTON_INIT = 3078;
	int CLIENTSCRIPT_BR_TOURNAMENT_BUTTON_RESET = 3079;
	int PROC_BR_TOURNAMENT_BUTTON_RESET = 3080;
	int CLIENTSCRIPT_BR_TOURNAMENT_BUTTON_OP = 3081;
	int CLIENTSCRIPT_BR_REWARD_SHOP_INIT = 3082;
	int CLIENTSCRIPT_BR_REWARD_SHOP_SHOWPOINTS = 3083;
	int PROC_BR_REWARD_SHOP_SHOWPOINTS = 3084;
	int CLIENTSCRIPT_BR_REWARD_SHOP_CONFIRMOP = 3085;
	int CLIENTSCRIPT_BR_REWARD_SHOP_DRAW = 3086;
	int PROC_BR_REWARD_SHOP_DRAW = 3087;
	int PROC_BR_REWARD_SHOP_ITEMDRAW = 3088;
	int CLIENTSCRIPT_BR_REWARD_SHOP_SELECT = 3089;
	int CLIENTSCRIPT_BR_REWARD_SHOP_REFUSE = 3090;
	int PROC_WELCOME_SCREEN_BANNER = 3091;
	int CLIENTSCRIPT_SCRIPT_3092 = 3092;
	int CLIENTSCRIPT_CANOE_INIT = 3093;
	int CLIENTSCRIPT_CANOE_REMAKE = 3094;
	int PROC_CANOE_SETUP = 3095;
	int PROC_CANOE_NAME = 3096;
	int CLIENTSCRIPT_CLOSE_MOUSE_INTERACT = 3097;
	int CLIENTSCRIPT_CANOE_CLOSE = 3098;
	int CLIENTSCRIPT_CANOE_MAP_INIT = 3099;
	int PROC_CANOE_LOCATION_SETUP = 3100;
	int CLIENTSCRIPT_CANOE_LOCATION_HOVER = 3101;
	int PROC_SCRIPT_3102 = 3102;
	int PROC_CANOE_GET_STATE = 3103;
	int PROC_CANOE_RETURN_LOCATIONS = 3104;
	int PROC_CANOE_PADDLE_LOG = 3105;
	int PROC_CANOE_PADDLE_DUGOUT = 3106;
	int PROC_CANOE_PADDLE_STABLE_DUGOUT = 3107;
	int PROC_CANOE_PADDLE_STABLE_WAKA = 3108;
	int CLIENTSCRIPT_POH_BOARD_INIT = 3109;
	int CLIENTSCRIPT_POH_BOARD_ADDLINE = 3110;
	int CLIENTSCRIPT_POH_BOARD_SET_LAST_NAME = 3111;
	int PROC_POH_BOARD_SETSORT = 3112;
	int PROC_POH_BOARD_REDRAW = 3113;
	int PROC_POH_BOARD_V_LINE = 3114;
	int PROC_POH_BOARD_SORTBUTTON_DRAW = 3115;
	int CLIENTSCRIPT_POH_BOARD_HOVERSORT = 3116;
	int CLIENTSCRIPT_POH_BOARD_CLICKSORT = 3117;
	int CLIENTSCRIPT_POH_BOARD_LOCATION_FILTER_INIT = 3118;
	int CLIENTSCRIPT_POH_BOARD_LOCATION_FILTER_ONTRANSMIT = 3119;
	int CLIENTSCRIPT_POH_BOARD_LOCATION_FILTER_CLICKED = 3120;
	int PROC_POH_BOARD_LOCATION_FILTER_ACTIVATE = 3121;
	int PROC_POH_BOARD_LOCATION_FILTER_BUILD = 3122;
	int PROC_POH_BOARD_LOC = 3123;
	int CLIENTSCRIPT_POH_BOARD_EXPLAIN_LOCATION = 3124;
	int CLIENTSCRIPT_POH_BOARD_SEND_NAME = 3125;
	int CLIENTSCRIPT_POH_BOARD_VALIDATE_NAME = 3126;
	int CLIENTSCRIPT_SCRIPT_3127 = 3127;
	int CLIENTSCRIPT_SCREEN_GLOW_START = 3128;
	int CLIENTSCRIPT_SCREEN_GLOW_END = 3129;
	int CLIENTSCRIPT_SCREEN_GLOW_FADEIN = 3130;
	int CLIENTSCRIPT_SCREEN_GLOW_FADEOUT = 3131;
	int CLIENTSCRIPT_SCRIPT_3132 = 3132;
	int CLIENTSCRIPT_SCRIPT_3133 = 3133;
	int PROC_SCRIPT_3134 = 3134;
	int PROC_SCRIPT_3135 = 3135;
	int CLIENTSCRIPT_SCRIPT_3136 = 3136;
	int CLIENTSCRIPT_SCRIPT_3137 = 3137;
	int PROC_SCRIPT_3138 = 3138;
	int PROC_SCRIPT_3139 = 3139;
	int CLIENTSCRIPT_SCRIPT_3140 = 3140;
	int CLIENTSCRIPT_TARGET_SYSTEM_INIT = 3141;
	int CLIENTSCRIPT_TARGET_SYSTEM_HIDEOP = 3142;
	int CLIENTSCRIPT_TARGET_SYSTEM_REDRAW = 3143;
	int PROC_TARGET_SYSTEM_REDRAW = 3144;
	int CLIENTSCRIPT_SCRIPT_3145 = 3145;
	int CLIENTSCRIPT_SCRIPT_3146 = 3146;
	int CLIENTSCRIPT_SCRIPT_3147 = 3147;
	int PROC_SCRIPT_3148 = 3148;
	int CLIENTSCRIPT_SCRIPT_3149 = 3149;
	int PROC_SCRIPT_3150 = 3150;
	int CLIENTSCRIPT_BOARDGAMES_DRAUGHTS_OPTIONS_UPDATE_SELECTIONS = 3151;
	int PROC_BOARDGAMES_DRAUGHTS_OPTIONS_UPDATE_SELECTIONS = 3152;
	int CLIENTSCRIPT_OFFER_BANNER_INIT = 3153;
	int PROC_OFFER_BANNER_CLOSE = 3154;
	int CLIENTSCRIPT_OFFER_BANNER = 3155;
	int PROC_OFFER_BANNER = 3156;
	int CLIENTSCRIPT_OFFER_BUTTON = 3157;
	int PROC_OFFER_BUTTON = 3158;
	int PROC_SCRIPT_3159 = 3159;
	int PROC_LEAGUE_WORLD = 3160;
	int CLIENTSCRIPT_CLEAR_CHAT_ALL = 3161;
	int CLIENTSCRIPT_LEAGUE_ICON_FLASH = 3162;
	int CLIENTSCRIPT_LEAGUE_FLASH_TIMER = 3163;
	int PROC_LEAGUE_FLASHICON = 3164;
	int CLIENTSCRIPT_BUFF_BAR_INIT = 3165;
	int CLIENTSCRIPT_BUFF_BAR_SETUP = 3166;
	int PROC_BUFF_BAR_SETUP = 3167;
	int PROC_BUFF_BAR_BUFF_CREATE = 3168;
	int PROC_BUFF_BAR_BUFF_CREATE_TOOLTIP = 3169;
	int CLIENTSCRIPT_BUFF_BAR_MOBILE_TOOLTIP = 3170;
	int CLIENTSCRIPT_BUFF_BAR_MOBILE_TOOLTIP_REMOVE = 3171;
	int PROC_BUFF_BAR_BUFF_POSITION = 3172;
	int CLIENTSCRIPT_SCRIPT_3173 = 3173;
	int CLIENTSCRIPT_ACCOUNT_SUMMARY_INIT = 3174;
	int CLIENTSCRIPT_SUMMARY_SIDEPANEL_DRAW = 3175;
	int PROC_SIDE_JOURNAL_TAB_HIGHLIGHT = 3176;
	int PROC_SIDE_JOURNAL_TAB_HIGHLIGHT_RESET = 3177;
	int PROC_SIDE_JOURNAL_ADDITIONAL = 3178;
	int PROC_CHATBOX_OPEN = 3179;
	int PROC_SCRIPT_3180 = 3180;
	int CLIENTSCRIPT_LEAGUE_POINTS_PROGRESS_BAR = 3181;
	int PROC_LEAGUE_POINTS_PROGRESS_BAR = 3182;
	int CLIENTSCRIPT_LEAGUE_PROGRESS_BAR_MOBILE_TOOLTIP = 3183;
	int CLIENTSCRIPT_LEAGUE_POINTS_PROGRESS_BAR_EXPAND = 3184;
	int CLIENTSCRIPT_LEAGUE_BORDER_PULSE_START = 3185;
	int CLIENTSCRIPT_LEAGUE_BORDER_PULSE_STOP = 3186;
	int CLIENTSCRIPT_LEAGUE_BORDER_PULSE = 3187;
	int CLIENTSCRIPT_LEAGUE_RELICS_INIT = 3188;
	int PROC_LEAGUE_RELICS_DRAW_SELECTIONS = 3189;
	int CLIENTSCRIPT_LEAGUE_RELIC_HOVER = 3190;
	int CLIENTSCRIPT_LEAGUE_RELICS_LOADING = 3191;
	int CLIENTSCRIPT_LEAGUE_RELICS_STOP_LOADING = 3192;
	int CLIENTSCRIPT_LEAGUE_RELIC_EXPANDED_VIEW = 3193;
	int CLIENTSCRIPT_LEAGUE_RELIC_NOT_AVAILABLE = 3194;
	int CLIENTSCRIPT_LEAGUE_RELIC_BUTTON_HOVER = 3195;
	int CLIENTSCRIPT_LEAGUE_RELIC_BACK = 3196;
	int CLIENTSCRIPT_LEAGUE_RELIC_CONFIRM = 3197;
	int CLIENTSCRIPT_LEAGUE_RELIC_CONFIRM_BACK = 3198;
	int PROC_LEAGUE_RELIC_DISPLAY = 3199;
	int CLIENTSCRIPT_CLOCK_INIT = 3200;
	int CLIENTSCRIPT_SCRIPT_3201 = 3201;
	int CLIENTSCRIPT_LEAGUE_TASKS_INIT = 3202;
	int CLIENTSCRIPT_LEAGUE_TASKS_DRAW_LIST = 3203;
	int PROC_LEAGUE_TASKS_DRAW_LIST = 3204;
	int PROC_ACCOUNT_SETUP_TABS = 3205;
	int CLIENTSCRIPT_LEAGUE_TASK_HOVER = 3206;
	int CLIENTSCRIPT_LEAGUE_TASK_FILTER_INIT = 3207;
	int CLIENTSCRIPT_LEAGUE_TASK_UPDATETEXT = 3208;
	int PROC_LEAGUE_TASK_FILTER_UPDATETEXT = 3209;
	int PROC_SCRIPT_3210 = 3210;
	int PROC_SCRIPT_3211 = 3211;
	int CLIENTSCRIPT_LEAGUE_TASK_FILTER_OPEN = 3212;
	int PROC_SCRIPT_3213 = 3213;
	int CLIENTSCRIPT_LEAGUE_TASK_FILTER_CLOSE = 3214;
	int PROC_LEAGUE_TASK_UPDATETEXT = 3215;
	int PROC_LEAGUE_TASK_IS_COMPLETED = 3216;
	int CLIENTSCRIPT_LEAGUE_INFO_INIT = 3217;
	int PROC_LEAGUE_INFO_DRAW_INTERFACE = 3218;
	int PROC_LEAGUE_GET_LEAGUE_NAME = 3219;
	int CLIENTSCRIPT_LEAGUE_INFO_MOUSEOVER = 3220;
	int CLIENTSCRIPT_LEAGUE_INFO_MOUSELEAVE = 3221;
	int CLIENTSCRIPT_LEAGUE_BLOG_CLICK = 3222;
	int CLIENTSCRIPT_LEAGUE_MENU_CLICK = 3223;
	int CLIENTSCRIPT_LEAGUE_MENU_FRAME_CLICK = 3224;
	int CLIENTSCRIPT_LEAGUE_SIDE_PANEL_INIT = 3225;
	int CLIENTSCRIPT_LEAGUE_SIDE_PANEL_UPDATE_BAR = 3226;
	int PROC_LEAGUE_SIDE_PANEL_UPDATE_BAR = 3227;
	int PROC_LEAGUE_SIDE_PANEL_UPDATE_TEXT = 3228;
	int CLIENTSCRIPT_LEAGUE_SIDE_PANEL_BUTTON_HOVER = 3229;
	int CLIENTSCRIPT_LEAGUE_SIDE_PANEL_HUDTOGGLE = 3230;
	int CLIENTSCRIPT_LEAGUE_SIDE_PANEL_HUDOP = 3231;
	int PROC_LEAGUE_SIDE_PANEL_HUDTOGGLE = 3232;
	int WORLDMAPELEMENTMOUSEREPEAT_645 = 3233;
	int WORLDMAPELEMENTMOUSELEAVE_645 = 3234;
	int PROC_UPDATE_DIARY_ENTRY_GREY = 3235;
	int PROC_QUESTLIST_F2P_PROGRESS_GREY = 3236;
	int PROC_QUESTLIST_MEMBERS_PROGRESS_GREY = 3237;
	int PROC_QUESTLIST_MINIQUESTS_PROGRESS_GREY = 3238;
	int PROC_QUESTLIST_SHOWPROGRESS_GREY = 3239;
	int CLIENTSCRIPT_V2_STONE_BUTTON_CHANGE_OUT = 3240;
	int PROC_V2_STONE_BUTTON_CHANGE_OUT = 3241;
	int CLIENTSCRIPT_V2_STONE_BUTTON_CHANGE_IN = 3242;
	int PROC_V2_STONE_BUTTON_CHANGE_IN = 3243;
	int CLIENTSCRIPT_SCRIPT_3244 = 3244;
	int PROC_SCRIPT_3245 = 3245;
	int CLIENTSCRIPT_SCRIPT_3246 = 3246;
	int CLIENTSCRIPT_SCRIPT_3247 = 3247;
	int PROC_SCRIPT_3248 = 3248;
	int PROC_SCRIPT_3249 = 3249;
	int PROC_SCRIPT_3250 = 3250;
	int CLIENTSCRIPT_SCRIPT_3251 = 3251;
	int PROC_SCRIPT_3252 = 3252;
	int CLIENTSCRIPT_MAGIC_TRAINING_INIT = 3253;
	int CLIENTSCRIPT_MAGIC_TRAINING_REWARDS = 3254;
	int PROC_MAGIC_TRAINING_REWARDS = 3255;
	int CLIENTSCRIPT_MAGIC_TRAINING_REWARDS_OP = 3256;
	int PROC_MAGIC_TRAINING_HIGHLIGHT_SELECTED = 3257;
	int PROC_MAGIC_TRAINING_COSTS_BACKGROUND = 3258;
	int CLIENTSCRIPT_MAGIC_TRAINING_COSTS_TRANSMIT = 3259;
	int PROC_MAGIC_TRAINING_COSTS = 3260;
	int CLIENTSCRIPT_MAGIC_TRAINING_CONFIRM_TRANSMIT = 3261;
	int PROC_MAGIC_TRAINING_CONFIRM = 3262;
	int CLIENTSCRIPT_ACCOUNT_TAB_HIGHLIGHT = 3263;
	int CLIENTSCRIPT_ACCOUNT_TAB_HIGHLIGHT_RESET = 3264;
	int PROC_ACCOUNT_TAB_HIGHLIGHT = 3265;
	int PROC_ACCOUNT_TAB_HIGHLIGHT_RESET = 3266;
	int CLIENTSCRIPT_ACCOUNT_SWITCH_TAB = 3267;
	int CLIENTSCRIPT_ACCOUNT_UPDATE_TABS = 3268;
	int PROC_ACCOUNT_UPDATE_TABS = 3269;
	int PROC_ACCOUNT_POLLS_UPDATE = 3270;
	int CLIENTSCRIPT_BOARDGAMES_DRAUGHTS_OPTIONS_UPDATE_RUNE = 3271;
	int PROC_BOARDGAMES_DRAUGHTS_OPTIONS_UPDATE_RUNE = 3272;
	int CLIENTSCRIPT_BOARDGAMES_DRAUGHTS_OPTIONS_UPDATE_TIME = 3273;
	int PROC_BOARDGAMES_DRAUGHTS_OPTIONS_UPDATE_TIME = 3274;
	int CLIENTSCRIPT_BANKMAIN_VIEWBUTTONS = 3275;
	int PROC_BANKMAIN_VIEWBUTTONS = 3276;
	int CLIENTSCRIPT_SCRIPT_3277 = 3277;
	int CLIENTSCRIPT_SCRIPT_3278 = 3278;
	int CLIENTSCRIPT_SCRIPT_3279 = 3279;
	int PROC_SCRIPT_3280 = 3280;
	int CLIENTSCRIPT_WEAR_INITSLOTS = 3281;
	int PROC_WEAR_INITSLOT = 3282;
	int PROC_SCRIPT_3283 = 3283;
	int CLIENTSCRIPT_LEAGUE_REWARD_SHOP_SELECT = 3284;
	int CLIENTSCRIPT_LEAGUE_REWARD_SHOP_REFUSE = 3285;
	int PROC_SCRIPT_3286 = 3286;
	int CLIENTSCRIPT_LEAGUE_REWARD_SHOP_CONFIRMOP = 3287;
	int CLIENTSCRIPT_LEAGUE_REWARD_SHOP_BUY = 3288;
	int CLIENTSCRIPT_LEAGUE_REWARD_CONFIRM_BACK = 3289;
	int PROC_LEAGUE_REWARD_SHOP_SHOWPOINTS = 3290;
	int CLIENTSCRIPT_LEAGUE_REWARD_SHOP_SHOWPOINTS = 3291;
	int PROC_SCRIPT_3292 = 3292;
	int CLIENTSCRIPT_BOARDGAMES_DRAUGHTS_OPTIONS_UPDATE_RANKED = 3293;
	int PROC_BOARDGAMES_DRAUGHTS_OPTIONS_UPDATE_RANKED = 3294;
	int CLIENTSCRIPT_BOARDGAMES_RUNEVERSI_OPTIONS_INIT = 3295;
	int CLIENTSCRIPT_BOARDGAMES_RUNEVERSI_OPTIONS_UPDATE_SELECTIONS = 3296;
	int PROC_WIKI_ICON_ENABLED = 3297;
	int CLIENTSCRIPT_SCRIPT_3298 = 3298;
	int PROC_WIKI_CHAT_SEARCH = 3299;
	int CLIENTSCRIPT_WIKI_LOOKUP = 3300;
	int PROC_WIKI_LOOKUP = 3301;
	int PROC_SCRIPT_3302 = 3302;
	int PROC_ENCODE_FOR_URL = 3303;
	int CLIENTSCRIPT_WIKI_ICON_INIT = 3304;
	int CLIENTSCRIPT_WIKI_ICON_UPDATE = 3305;
	int PROC_WIKI_ICON_UPDATE = 3306;
	int CLIENTSCRIPT_WELCOME_TYPE_SETUP_TRANSMIT = 3307;
	int CLIENTSCRIPT_WELCOME_TYPE_SETUP_OP = 3308;
	int PROC_WELCOME_TYPE_SETUP = 3309;
	int PROC_SUMMARY_SIDEPANEL_DRAW = 3310;
	int CLIENTSCRIPT_NIGHTMARE_TOTEMS_INIT = 3311;
	int CLIENTSCRIPT_NIGHTMARE_TOTEM_HUD_FADE_IN = 3312;
	int PROC_NIGHTMARE_TOTEM_HUD_FADE_IN = 3313;
	int PROC_NIGHTMARE_TOTEM_HUD_POS = 3314;
	int CLIENTSCRIPT_NIGHTMARE_TOTEM_HUD_UPDATE = 3315;
	int PROC_NIGHTMARE_TOTEM_HUD_UPDATE = 3316;
	int CLIENTSCRIPT_NIGHTMARE_TOTEM_HUD_UPDATE_BAR = 3317;
	int PROC_NIGHTMARE_TOTEM_HUD_UPDATE_BAR = 3318;
	int CLIENTSCRIPT_NIGHTMARE_TOTEM_HUD_BAR_FADEOUT = 3319;
	int PROC_NIGHTMARE_TOTEM_HUD_BAR_FADEOUT = 3320;
	int CLIENTSCRIPT_NIGHTMARE_TOTEM_HUD_BAR_FADEIN = 3321;
	int PROC_NIGHTMARE_TOTEM_HUD_BAR_FADEIN = 3322;
	int CLIENTSCRIPT_NIGHTMARE_TOTEM_HUD_FADE_OUT = 3323;
	int PROC_NIGHTMARE_TOTEM_HUD_FADE_OUT = 3324;
	int PROC_BONDS_HIDE = 3325;
	int CLIENTSCRIPT_SCRIPT_3326 = 3326;
	int PROC_BANKSIDE_WORN_DRAWITEM = 3327;
	int CLIENTSCRIPT_BANKSIDE_WORN_REORDER = 3328;
	int CLIENTSCRIPT_NEWSPAPER_INIT = 3329;
	int CLIENTSCRIPT_NEWSPAPER_CONTENT = 3330;
	int CLIENTSCRIPT_SCRIPT_3331 = 3331;
	int CLIENTSCRIPT_SCRIPT_3332 = 3332;
	int PROC_SKILL_GUIDE_SUBSECTION_FIREMAKING = 3333;
	int PROC_SKILL_GUIDE_DATA_FIREMAKING = 3334;
	int CLIENTSCRIPT_SCRIPT_3335 = 3335;
	int CLIENTSCRIPT_SCRIPT_3336 = 3336;
	int CLIENTSCRIPT_ADVENTUREPATH_SIDE_HINT_MOUSEOVER = 3337;
	int CLIENTSCRIPT_ADVENTUREPATH_SIDE_HINT_MOUSELEAVE = 3338;
	int CLIENTSCRIPT_ADVENTUREPATH_SIDE_SETTINGS_MOUSEOVER = 3339;
	int CLIENTSCRIPT_ADVENTUREPATH_SIDE_SETTINGS_MOUSELEAVE = 3340;
	int CLIENTSCRIPT_SCRIPT_3341 = 3341;
	int CLIENTSCRIPT_SCRIPT_3342 = 3342;
	int CLIENTSCRIPT_NOTIFICATION_DISPLAY_INIT = 3343;
	int CLIENTSCRIPT_NOTIFICATION_TLI_UPDATE = 3344;
	int CLIENTSCRIPT_NOTIFICATION_STORE_DATA = 3345;
	int CLIENTSCRIPT_NOTIFICATION_START = 3346;
	int CLIENTSCRIPT_NOTIFICATION_DELAY = 3347;
	int CLIENTSCRIPT_NOTIFICATION_END = 3348;
	int PROC_NOTIFICATION_INIT = 3349;
	int CLIENTSCRIPT_NOTIFICATION_POSITIONING = 3350;
	int PROC_NOTIFICATION_POSITIONING = 3351;
	int PROC_BOARDGAMES_RUNEVERSI_OPTIONS_UPDATE_SELECTIONS = 3352;
	int CLIENTSCRIPT_BOARDGAMES_RUNEVERSI_OPTIONS_UPDATE_RUNE = 3353;
	int PROC_BOARDGAMES_RUNEVERSI_OPTIONS_UPDATE_RUNE = 3354;
	int CLIENTSCRIPT_BOARDGAMES_RUNEVERSI_OPTIONS_UPDATE_TIME = 3355;
	int PROC_BOARDGAMES_RUNEVERSI_OPTIONS_UPDATE_TIME = 3356;
	int CLIENTSCRIPT_BOARDGAMES_RUNEVERSI_OPTIONS_UPDATE_RANKED = 3357;
	int PROC_BOARDGAMES_RUNEVERSI_OPTIONS_UPDATE_RANKED = 3358;
	int CLIENTSCRIPT_SCRIPT_3359 = 3359;
	int CLIENTSCRIPT_GAZETTE_BUTTON = 3360;
	int PROC_GAZETTE_BUTTON = 3361;
	int PROC_SCRIPT_3362 = 3362;
	int CLIENTSCRIPT_SCRIPT_3363 = 3363;
	int PROC_SCRIPT_3364 = 3364;
	int CLIENTSCRIPT_PVP_STORE_SIDE_INIT = 3365;
	int CLIENTSCRIPT_PVP_STORE_SIDE_DRAW = 3366;
	int PROC_PVP_STORE_SIDE_DRAW = 3367;
	int CLIENTSCRIPT_SCRIPT_3368 = 3368;
	int PROC_SCRIPT_3369 = 3369;
	int CLIENTSCRIPT_SCRIPT_3370 = 3370;
	int CLIENTSCRIPT_GRAPHICBOX_SETBUTTONS = 3371;
	int CLIENTSCRIPT_GRAPHICBOX_LISTENER = 3372;
	int CLIENTSCRIPT_GRAPHICBOX_RESET = 3373;
	int CLIENTSCRIPT_GRAPHICBOX_SET_GRAPHIC = 3374;
	int CLIENTSCRIPT_SCRIPT_3375 = 3375;
	int CLIENTSCRIPT_TUT2_OVERLAY_HINT = 3376;
	int PROC_TUT2_HINT_CHATBOX = 3377;
	int PROC_TUT2_HINT_CAMERA = 3378;
	int PROC_TUT2_HINT_CAMERA_DESKTOP = 3379;
	int PROC_TUT2_HINT_CAMERA_MOBILE = 3380;
	int PROC_TUT2_HINT_MOVE = 3381;
	int PROC_TUT2_HINT_MOVE_DESKTOP = 3382;
	int PROC_TUT2_HINT_MOVE_MOBILE = 3383;
	int PROC_TUT2_HINT_INTERACT = 3384;
	int PROC_TUT2_HINT_INTERACT_DESKTOP = 3385;
	int PROC_TUT2_HINT_INTERACT_MOBILE = 3386;
	int CLIENTSCRIPT_TUT2_PROGRESSBAR_INIT = 3387;
	int CLIENTSCRIPT_TUT2_PROGRESSBAR_SET = 3388;
	int PROC_TUT2_PROGRESSBAR_SET = 3389;
	int CLIENTSCRIPT_TUT2_DEFAULT_SETTINGS = 3390;
	int CLIENTSCRIPT_TUT2_END = 3391;
	int CLIENTSCRIPT_SCRIPT_3392 = 3392;
	int CLIENTSCRIPT_SCRIPT_3393 = 3393;
	int PROC_SCRIPT_3394 = 3394;
	int PROC_SCRIPT_3395 = 3395;
	int CLIENTSCRIPT_MESLAYER_KEY_CLOSE = 3396;
	int PROC_SCRIPT_3397 = 3397;
	int CLIENTSCRIPT_SCRIPT_3398 = 3398;
	int CLIENTSCRIPT_SCRIPT_3399 = 3399;
	int CLIENTSCRIPT_SCRIPT_3400 = 3400;
	int CLIENTSCRIPT_SCRIPT_3401 = 3401;
	int CLIENTSCRIPT_WORLDMAP_KEY_TOGGLE_TRANSMIT = 3402;
	int CLIENTSCRIPT_PRAYER_FLASH_PRAYER = 3403;
	int CLIENTSCRIPT_PRAYER_FLASH_TIMER = 3404;
	int CLIENTSCRIPT_PRAYER_STOP_FLASH = 3405;
	int CLIENTSCRIPT_HIGHLIGHT_NOCLICK = 3406;
	int CLIENTSCRIPT_HIGHLIGHT_NOCLICK_CLEAR = 3407;
	int CLIENTSCRIPT_HIGHLIGHT_START = 3408;
	int CLIENTSCRIPT_HIGHLIGHT_SCREEN = 3409;
	int PROC_HIGHLIGHT_SCREEN = 3410;
	int CLIENTSCRIPT_HIGHLIGHT_RESIZE = 3411;
	int CLIENTSCRIPT_HIGHLIGHT_SCREEN_HIDE_LAYER = 3412;
	int CLIENTSCRIPT_HIGHLIGHT_TEXTBOX = 3413;
	int CLIENTSCRIPT_HIGHLIGHT_TEXTBOX_RESIZE = 3414;
	int PROC_HIGHLIGHT_TEXTBOX = 3415;
	int PROC_SCRIPT_3416 = 3416;
	int CLIENTSCRIPT_HIGHLIGHT_CLOSE_BUTTON = 3417;
	int CLIENTSCRIPT_HIGHLIGHT_CLOSE_OP = 3418;
	int PROC_HIGHLIGHT_BUTTON = 3419;
	int CLIENTSCRIPT_HIGHLIGHT_NEXT = 3420;
	int CLIENTSCRIPT_SCRIPT_3421 = 3421;
	int PROC_SCRIPT_3422 = 3422;
	int CLIENTSCRIPT_BOARDGAMES_RUNEVERSI_UPDATE_GRID = 3423;
	int CLIENTSCRIPT_BOARDGAMES_CHALLENGE_INIT = 3424;
	int CLIENTSCRIPT_BOARDGAMES_CHALLENGE_UPDATE = 3425;
	int PROC_BOARDGAMES_CHALLENGE_UPDATE = 3426;
	int CLIENTSCRIPT_ACCOUNT_SUMMARY_UPDATE_XP = 3427;
	int PROC_BOOL_TO_INT = 3428;
	int CLIENTSCRIPT_HP_BAR_RESET = 3429;
	int CLIENTSCRIPT_SCRIPT_3430 = 3430;
	int PROC_SCRIPT_3431 = 3431;
	int CLIENTSCRIPT_SCRIPT_3432 = 3432;
	int CLIENTSCRIPT_SCRIPT_3433 = 3433;
	int CLIENTSCRIPT_SCRIPT_3434 = 3434;
	int PROC_SCRIPT_3435 = 3435;
	int PROC_STRING_TO_INT = 3436;
	int PROC_SCRIPT_3437 = 3437;
	int PROC_SCRIPT_3438 = 3438;
	int PROC_SCRIPT_3439 = 3439;
	int CLIENTSCRIPT_SCRIPT_3440 = 3440;
	int CLIENTSCRIPT_HALLOWED_OVERLAY_INIT = 3441;
	int CLIENTSCRIPT_HALLOWED_TIMER_UPDATE = 3442;
	int CLIENTSCRIPT_HALLOWED_TIMER_PAUSE = 3443;
	int CLIENTSCRIPT_HALLOWED_TIMER = 3444;
	int PROC_HALLOWED_TIMER_TEXT = 3445;
	int CLIENTSCRIPT_SCRIPT_3446 = 3446;
	int CLIENTSCRIPT_SCRIPT_3447 = 3447;
	int CLIENTSCRIPT_SCRIPT_3448 = 3448;
	int PROC_SCRIPT_3449 = 3449;
	int CLIENTSCRIPT_SCRIPT_3450 = 3450;
	int CLIENTSCRIPT_SCRIPT_3451 = 3451;
	int CLIENTSCRIPT_DEATHKEEP_OPITEM = 3452;
	int PROC_DEATHKEEP_RIGHT_INITBUTTON = 3453;
	int PROC_DEATHKEEP_RIGHT_DRAWBUTTON = 3454;
	int CLIENTSCRIPT_DEATHKEEP_RIGHT_OPBUTTON = 3455;
	int CLIENTSCRIPT_DEATHKEEP_RIGHT_RESETBUTTON = 3456;
	int PROC_GRAVESTONE_HUD_INIT = 3457;
	int CLIENTSCRIPT_GRAVESTONE_HUD_RESYNCH = 3458;
	int PROC_GRAVESTONE_HUD_RESYNCH = 3459;
	int CLIENTSCRIPT_GRAVESTONE_HUD_TICKDOWN = 3460;
	int PROC_GRAVESTONE_HUD_WRITE = 3461;
	int CLIENTSCRIPT_GRAVESTONE_GENERIC_INIT = 3462;
	int CLIENTSCRIPT_GRAVESTONE_GENERIC_WINDOW_SET = 3463;
	int PROC_GRAVESTONE_GENERIC_WINDOW_SET = 3464;
	int PROC_SCRIPT_3465 = 3465;
	int CLIENTSCRIPT_GRAVESTONE_GENERIC_DRAG_PREVIEW = 3466;
	int CLIENTSCRIPT_GRAVESTONE_GENERIC_DRAG_END = 3467;
	int CLIENTSCRIPT_GRAVESTONE_GENERIC_SIZE_HANDLER = 3468;
	int PROC_GRAVESTONE_GENERIC_SIZE_HANDLER = 3469;
	int PROC_GRAVESTONE_GENERIC_RESETBUTTON = 3470;
	int CLIENTSCRIPT_GRAVESTONE_GENERIC_OPBUTTON = 3471;
	int CLIENTSCRIPT_GRAVESTONE_GENERIC_RESETBUTTON = 3472;
	int CLIENTSCRIPT_GRAVESTONE_GENERIC_TITLE = 3473;
	int PROC_GRAVESTONE_GENERIC_TITLE = 3474;
	int PROC_GRAVESTONE_GENERIC_PARSEFEE = 3475;
	int PROC_GRAVESTONE_GENERIC_PARSECOFFER = 3476;
	int CLIENTSCRIPT_GRAVESTONE_GENERIC_RESYNCHDATA = 3477;
	int CLIENTSCRIPT_GRAVESTONE_TRANSMIT_DATA = 3478;
	int CLIENTSCRIPT_DEATH_COFFER_INIT = 3479;
	int CLIENTSCRIPT_DEATH_COFFER_SETCONTENTS = 3480;
	int PROC_DEATH_COFFER_SETCONTENTS = 3481;
	int CLIENTSCRIPT_SCRIPT_3482 = 3482;
	int PROC_SCRIPT_3483 = 3483;
	int PROC_DEATH_COFFER_ACTIVEBUTTON = 3484;
	int PROC_DEATH_COFFER_INACTIVEBUTTON = 3485;
	int CLIENTSCRIPT_DEATH_COFFER_OPBUTTON = 3486;
	int CLIENTSCRIPT_DEATH_COFFER_RESETBUTTON = 3487;
	int CLIENTSCRIPT_DEATH_COFFER_DRAWBUTTON = 3488;
	int PROC_DEATH_COFFER_DRAWBUTTON = 3489;
	int CLIENTSCRIPT_DEATH_OFFICE_INIT = 3490;
	int CLIENTSCRIPT_DEATH_OFFICE_REDRAW = 3491;
	int PROC_DEATH_OFFICE_REDRAW = 3492;
	int CLIENTSCRIPT_DEATH_OFFICE_TITLE = 3493;
	int PROC_DEATH_OFFICE_TITLE = 3494;
	int CLIENTSCRIPT_DEATH_OFFICE_RESETQUANTITY = 3495;
	int PROC_DEATH_OFFICE_RESETQUANTITY = 3496;
	int CLIENTSCRIPT_DEATH_OFFICE_DRAWQUANTITY = 3497;
	int PROC_DEATH_OFFICE_DRAWQUANTITY = 3498;
	int CLIENTSCRIPT_DEATH_OFFICE_OPQUANTITY = 3499;
	int CLIENTSCRIPT_SCRIPT_3500 = 3500;
	int PROC_SCRIPT_3501 = 3501;
	int CLIENTSCRIPT_SCRIPT_3502 = 3502;
	int PROC_SCRIPT_3503 = 3503;
	int CLIENTSCRIPT_SCRIPT_3504 = 3504;
	int PROC_INV_FREESPACE = 3505;
	int PROC_SCRIPT_3506 = 3506;
	int WORLDMAPELEMENTMOUSEREPEAT_652 = 3507;
	int WORLDMAPELEMENTMOUSELEAVE_652 = 3508;
	int PROC_ADVENTUREPATH_VOUCHER_INIT = 3509;
	int PROC_SCRIPT_3510 = 3510;
	int PROC_SCRIPT_3511 = 3511;
	int PROC_SCRIPT_3512 = 3512;
	int CLIENTSCRIPT_TELEBLOCK_TIMER_TOOLTIP = 3513;
	int CLIENTSCRIPT_TELEBLOCK_TIMER = 3514;
	int CLIENTSCRIPT_TELEBLOCK_TOGGLE_ONMOUSELEAVE = 3515;
	int PROC_SCRIPT_3516 = 3516;
	int CLIENTSCRIPT_SCRIPT_3517 = 3517;
	int CLIENTSCRIPT_SCRIPT_3518 = 3518;
	int PROC_SCRIPT_3519 = 3519;
	int CLIENTSCRIPT_SCRIPT_3520 = 3520;
	int CLIENTSCRIPT_SCRIPT_3521 = 3521;
	int PROC_SCRIPT_3522 = 3522;
	int CLIENTSCRIPT_SCRIPT_3523 = 3523;
	int PROC_SCRIPT_3524 = 3524;
	int CLIENTSCRIPT_SCRIPT_3525 = 3525;
	int CLIENTSCRIPT_SCRIPT_3526 = 3526;
	int PROC_SCRIPT_3527 = 3527;
	int PROC_SCRIPT_3528 = 3528;
	int CLIENTSCRIPT_SCRIPT_3529 = 3529;
	int CLIENTSCRIPT_SCRIPT_3530 = 3530;
	int CLIENTSCRIPT_HALLOWED_TOOLS_MAIN_INIT = 3531;
	int CLIENTSCRIPT_POH_COSTUMES_INIT = 3532;
	int CLIENTSCRIPT_POH_COSTUMES_BUILD = 3533;
	int PROC_POH_COSTUMES_BUILD = 3534;
	int PROC_POH_COSTUMES_DRAW_BIG = 3535;
	int PROC_POH_COSTUMES_DRAW_SMALL = 3536;
	int PROC_POH_COSTUMES_DRAWALTERNATES = 3537;
	int PROC_POH_COSTUMES_DRAWITEM = 3538;
	int PROC_POH_COSTUMES_HIDEITEM = 3539;
	int PROC_POH_COSTUMES_COUNTMEMBERS = 3540;
	int PROC_POH_COSTUMES_COUNTALTERNATES = 3541;
	int CLIENTSCRIPT_POH_COSTUMES_OPGRAPHIC = 3542;
	int PROC_POH_COSTUMES_QUICKSORT = 3543;
	int PROC_POH_COSTUMES_RIGHTBORDER = 3544;
	int PROC_POH_COSTUMES_BOTTOMFILLER = 3545;
	int CLIENTSCRIPT_POH_COSTUMES_HEIGHTSTRETCH = 3546;
	int PROC_POH_COSTUMES_HEIGHTSTRETCH = 3547;
	int CLIENTSCRIPT_POH_COSTUMES_BUTTONS_DYNAMICSETUP = 3548;
	int PROC_POH_COSTUMES_BUTTONS_DYNAMICSETUP = 3549;
	int CLIENTSCRIPT_POH_COSTUMES_BUTTONS_DRAW = 3550;
	int PROC_POH_COSTUMES_BUTTONS_DRAW = 3551;
	int CLIENTSCRIPT_POH_COSTUMES_BUTTONS_1OFF_OP = 3552;
	int CLIENTSCRIPT_POH_COSTUMES_BUTTONS_1OFF_RESET = 3553;
	int PROC_POH_COSTUMES_BUTTONS_1OFF_RESET = 3554;
	int CLIENTSCRIPT_POH_COSTUMES_BUTTONS_TOGGLE_OP = 3555;
	int CLIENTSCRIPT_POH_COSTUMES_BUTTONS_TOGGLE_RESET = 3556;
	int PROC_POH_COSTUMES_BUTTONS_TOGGLE_RESET = 3557;
	int CLIENTSCRIPT_POH_COSTUMES_BUTTONS_SEARCHOP = 3558;
	int CLIENTSCRIPT_SCRIPT_3559 = 3559;
	int PROC_SCRIPT_3560 = 3560;
	int PROC_POH_COSTUMES_SEARCHSORT = 3561;
	int CLIENTSCRIPT_POH_COSTUMES_SEARCHRESULT = 3562;
	int CLIENTSCRIPT_POH_COSTUMES_SEARCHTIMEOUT = 3563;
	int CLIENTSCRIPT_POH_COSTUMES_BUTTONS_SEARCH_RESET = 3564;
	int PROC_POH_COSTUMES_BUTTONS_SEARCH_RESET = 3565;
	int CLIENTSCRIPT_BOARDGAMES_RUNESQUARES_OPTIONS_INIT = 3566;
	int CLIENTSCRIPT_HALLOWED_TOOLS_SIDE_INIT = 3567;
	int PROC_HALLOWED_TOOLS_MAIN_CREATE = 3568;
	int CLIENTSCRIPT_HALLOWED_TOOLS_MAIN_RECREATE = 3569;
	int PROC_HALLOWED_TOOLS_MAIN_RECREATE = 3570;
	int PROC_HALLOWED_TOOLS_SIDE_CREATE = 3571;
	int CLIENTSCRIPT_HALLOWED_TOOLS_SIDE_RECREATE = 3572;
	int PROC_HALLOWED_TOOLS_SIDE_RECREATE = 3573;
	int PROC_SCRIPT_3574 = 3574;
	int CLIENTSCRIPT_SCRIPT_3575 = 3575;
	int PROC_SCRIPT_3576 = 3576;
	int CLIENTSCRIPT_HALLOWED_TOOLS_MAIN_UPDATE = 3577;
	int PROC_HALLOWED_TOOLS_MAIN_UPDATE = 3578;
	int CLIENTSCRIPT_HALLOWED_TOOLS_SIDE_UPDATE = 3579;
	int PROC_HALLOWED_TOOLS_SIDE_UPDATE = 3580;
	int PROC_HALLOWED_TOOLS_GETSTORED = 3581;
	int PROC_HALLOWED_TOOLS_GETCARRIED = 3582;
	int CLIENTSCRIPT_TELETAB_INIT = 3583;
	int CLIENTSCRIPT_TELETAB_STEELBORDER = 3584;
	int CLIENTSCRIPT_TELETAB_SKILLMAIN_INIT = 3585;
	int CLIENTSCRIPT_TELETAB_REDRAW = 3586;
	int PROC_TELETAB_REDRAW = 3587;
	int PROC_SCRIPT_3588 = 3588;
	int PROC_TELETAB_ADDINGREDIENT = 3589;
	int PROC_TELETAB_PLACEINGREDIENT = 3590;
	int PROC_TELETAB_BUTTON_REDRAW = 3591;
	int CLIENTSCRIPT_TELETAB_BUTTON_DRAW = 3592;
	int PROC_TELETAB_BUTTON_DRAW = 3593;
	int CLIENTSCRIPT_TELETAB_BUTTON_OP = 3594;
	int CLIENTSCRIPT_TELETAB_CONFIRM_DRAW = 3595;
	int PROC_TELETAB_CONFIRM_DRAW = 3596;
	int CLIENTSCRIPT_TELETAB_CONFIRM_OP = 3597;
	int CLIENTSCRIPT_TELETAB_CONFIRM_RESET = 3598;
	int PROC_SKILLMAIN_INIT = 3599;
	int CLIENTSCRIPT_BEES_MOUSEREPEAT = 3600;
	int CLIENTSCRIPT_BUILD_MAKEOVER_FEET = 3601;
	int CLIENTSCRIPT_MAKEOVER_FEET_SELECT = 3602;
	int PROC_MAKEOVER_FEET_ADD_OPTION = 3603;
	int CLIENTSCRIPT_100GUIDE_FLOUR_INIT = 3604;
	int CLIENTSCRIPT_100GUIDE_FLOUR_DRAWITEMS = 3605;
	int PROC_100GUIDE_FLOUR_DRAWITEMS = 3606;
	int CLIENTSCRIPT_PARTYDROP_MAIN_INIT = 3607;
	int CLIENTSCRIPT_PARTYDROP_MAIN_CHESTITEMS = 3608;
	int PROC_PARTYDROP_MAIN_CHESTITEMS = 3609;
	int CLIENTSCRIPT_PARTYDROP_QUANTITY_OP = 3610;
	int CLIENTSCRIPT_PARTYDROP_MAIN_OFFERITEMS = 3611;
	int PROC_PARTYDROP_MAIN_OFFERITEMS = 3612;
	int CLIENTSCRIPT_PARTYDROP_MAIN_QUANTITYBUTTON = 3613;
	int PROC_PARTYDROP_MAIN_QUANTITYBUTTON = 3614;
	int CLIENTSCRIPT_PARTYDROP_MAIN_CONFIRM_OP = 3615;
	int CLIENTSCRIPT_PARTYDROP_MAIN_CONFIRM_RESET = 3616;
	int CLIENTSCRIPT_PARTYDROP_SIDE_INIT = 3617;
	int CLIENTSCRIPT_PARTYDROP_SIDE_BUILD = 3618;
	int PROC_PARTYDROP_SIDE_BUILD = 3619;
	int PROC_PARTYDROP_SIDE_DRAWITEM = 3620;
	int CLIENTSCRIPT_PARTYDROP_SIDE_REORDER = 3621;
	int PROC_CLAN_STONEBUTTON_INIT = 3622;
	int CLIENTSCRIPT_CLAN_STONEBUTTON_DRAW = 3623;
	int PROC_CLAN_STONEBUTTON_DRAW = 3624;
	int CLIENTSCRIPT_IMP_BOX_DEPOSIT_INIT = 3625;
	int CLIENTSCRIPT_IMP_BOX_TEXT_UPDATE = 3626;
	int PROC_IMP_BOX_TEXT_UPDATE = 3627;
	int CLIENTSCRIPT_INTERFACE_INV_OVERLAY_INIT = 3628;
	int CLIENTSCRIPT_SCRIPT_3629 = 3629;
	int PROC_SCRIPT_3630 = 3630;
	int CLIENTSCRIPT_SCRIPT_3631 = 3631;
	int CLIENTSCRIPT_SCRIPT_3632 = 3632;
	int PROC_SCRIPT_3633 = 3633;
	int CLIENTSCRIPT_CASTLEWARS_CATAPULT_INIT = 3634;
	int CLIENTSCRIPT_CASTLEWARS_CATAPULT_HOVER = 3635;
	int PROC_CASTLEWARS_CATAPULT_HOVER = 3636;
	int CLIENTSCRIPT_SCRIPT_3637 = 3637;
	int CLIENTSCRIPT_SCRIPT_3638 = 3638;
	int CLIENTSCRIPT_SCRIPT_3639 = 3639;
	int PROC_SCRIPT_3640 = 3640;
	int CLIENTSCRIPT_SCRIPT_3641 = 3641;
	int PROC_SCRIPT_3642 = 3642;
	int CLIENTSCRIPT_SCRIPT_3643 = 3643;
	int CLIENTSCRIPT_SCRIPT_3644 = 3644;
	int PROC_SCRIPT_3645 = 3645;
	int PROC_SCRIPT_3646 = 3646;
	int CLIENTSCRIPT_SCRIPT_3647 = 3647;
	int PROC_SCRIPT_3648 = 3648;
	int CLIENTSCRIPT_SCRIPT_3649 = 3649;
	int CLIENTSCRIPT_BONDIF_INIT = 3650;
	int CLIENTSCRIPT_SCRIPT_3651 = 3651;
	int PROC_SCRIPT_3652 = 3652;
	int CLIENTSCRIPT_SCRIPT_3653 = 3653;
	int PROC_SCRIPT_3654 = 3654;
	int CLIENTSCRIPT_SCRIPT_3655 = 3655;
	int PROC_SCRIPT_3656 = 3656;
	int CLIENTSCRIPT_TRAILBLAZER_AREAS_INIT = 3657;
	int PROC_LEAGUE_AREAS_DRAW_INTERFACE = 3658;
	int PROC_SCRIPT_3659 = 3659;
	int PROC_LEAGUE_AREAS_SETUP_EVENTS = 3660;
	int CLIENTSCRIPT_LEAGUE_AREAS_ONCLICK = 3661;
	int PROC_LEAGUE_AREAS_ONCLICK = 3662;
	int CLIENTSCRIPT_LEAGUE_AREAS_MOUSEOVER = 3663;
	int PROC_LEAGUE_AREAS_MOUSEOVER = 3664;
	int CLIENTSCRIPT_LEAGUE_AREAS_MOUSELEAVE = 3665;
	int PROC_LEAGUE_AREAS_MOUSELEAVE = 3666;
	int CLIENTSCRIPT_LEAGUE_AREAS_STOP_LOADING = 3667;
	int CLIENTSCRIPT_LEAGUE_AREAS_SHOW_DETAILED = 3668;
	int PROC_LEAGUE_AREAS_SHOW_DETAILED = 3669;
	int CLIENTSCRIPT_LEAGUE_AREAS_TAB_CLICK = 3670;
	int PROC_LEAGUE_AREAS_TAB_DETAILS = 3671;
	int CLIENTSCRIPT_LEAGUE_AREA_BUTTON_HOVER = 3672;
	int PROC_LEAGUE_AREA_BUTTON_HOVER = 3673;
	int CLIENTSCRIPT_LEAGUE_AREA_CONFIRM = 3674;
	int CLIENTSCRIPT_LEAGUE_AREA_TELEPORT = 3675;
	int CLIENTSCRIPT_LEAGUE_AREA_NOT_AVAILABLE = 3676;
	int CLIENTSCRIPT_SCRIPT_3677 = 3677;
	int CLIENTSCRIPT_LEAGUE_AREA_BACK = 3678;
	int CLIENTSCRIPT_LEAGUE_AREA_CONFIRM_SELECTION = 3679;
	int CLIENTSCRIPT_LEAGUE_AREA_CONFIRM_BACK = 3680;
	int PROC_SCRIPT_3681 = 3681;
	int PROC_SCRIPT_3682 = 3682;
	int CLIENTSCRIPT_LEAGUE_AREAS_PROGRESS_BAR = 3683;
	int PROC_LEAGUE_AREAS_PROGRESS_BAR = 3684;
	int CLIENTSCRIPT_LEAGUE_AREA_FLASH_START = 3685;
	int CLIENTSCRIPT_LEAGUE_AREA_FLASH_STOP = 3686;
	int CLIENTSCRIPT_LEAGUE_AREA_FLASH = 3687;
	int PROC_SCRIPT_3688 = 3688;
	int PROC_SCRIPT_3689 = 3689;
	int PROC_SCRIPT_3690 = 3690;
	int PROC_LEAGUES_CLOSE_BUTTON = 3691;
	int CLIENTSCRIPT_LEAGUES_CLOSEBUTTON_CLICK = 3692;
	int PROC_LEAGUES_MENU_BUTTON = 3693;
	int PROC_LEAGUE_RELIC_HOVER = 3694;
	int PROC_LEAGUE_RELIC_BUTTON_HOVER = 3695;
	int PROC_LEAGUE_RELIC_DISPLAY_CORE = 3696;
	int PROC_LEAGUE_RELIC_ACTIVE = 3697;
	int CLIENTSCRIPT_SCRIPT_3698 = 3698;
	int PROC_LEAGUE_TASK_DISPLAY = 3699;
	int CLIENTSCRIPT_LEAGUE_SETUP_DISPLAY_HOVER = 3700;
	int PROC_LEAGUE_SETUP_DISPLAY_HOVEROFF = 3701;
	int PROC_LEAGUE_SETUP_DISPLAY_HOVERDISABLE = 3702;
	int CLIENTSCRIPT_LEAGUE_SETUP_DISPLAY_DROPDOWN_HOVER = 3703;
	int CLIENTSCRIPT_SCRIPT_3704 = 3704;
	int CLIENTSCRIPT_SCRIPT_3705 = 3705;
	int PROC_SCRIPT_3706 = 3706;
	int CLIENTSCRIPT_LEAGUE_TUTORIAL_MAIN_INIT = 3707;
	int CLIENTSCRIPT_LEAGUE_TUTORIAL_INTERFACE_UPDATE = 3708;
	int PROC_LEAGUE_TUTORIAL_INTERFACE_UPDATE = 3709;
	int CLIENTSCRIPT_LEAGUE_TUTORIAL_BUTTON_HOVER = 3710;
	int CLIENTSCRIPT_LEAGUE_TUTORIAL_BUTTON_OP = 3711;
	int CLIENTSCRIPT_LEAGUE_TUTORIAL_BUTTON_RESET = 3712;
	int PROC_LEAGUE_TUTORIAL_BUTTON_DRAW = 3713;
	int PROC_LEAGUE_TUTORIAL_INTERFACE_UPDATE_HEADER = 3714;
	int PROC_LEAGUE_TUTORIAL_INTERFACE_UPDATE_TEXT = 3715;
	int PROC_LEAGUE_TUTORIAL_INTERFACE_UPDATE_BUTTON1 = 3716;
	int PROC_LEAGUE_TUTORIAL_INTERFACE_UPDATE_BUTTON2 = 3717;
	int PROC_LEAGUE_TUTORIAL_INTERFACE_UPDATE_GRAPHIC = 3718;
	int PROC_IN_LEAGUE_TUTORIAL = 3719;
	int PROC_SCRIPT_3720 = 3720;
	int PROC_SCRIPT_3721 = 3721;
	int CLIENTSCRIPT_SCRIPT_3722 = 3722;
	int PROC_SCRIPT_3723 = 3723;
	int CLIENTSCRIPT_SCRIPT_3724 = 3724;
	int PROC_SCRIPT_3725 = 3725;
	int PROC_SCRIPT_3726 = 3726;
	int CLIENTSCRIPT_SCRIPT_3727 = 3727;
	int PROC_SCRIPT_3728 = 3728;
	int CLIENTSCRIPT_START_SLIDESHOW = 3729;
	int PROC_START_SLIDESHOW = 3730;
	int CLIENTSCRIPT_STOP_SLIDESHOW = 3731;
	int PROC_STOP_SLIDESHOW = 3732;
	int CLIENTSCRIPT_SLIDESHOW_TIMER = 3733;
	int PROC_SLIDESHOW_TRANSITION = 3734;
	int CLIENTSCRIPT_SLIDESHOW_FADEOUT = 3735;
	int CLIENTSCRIPT_SLIDESHOW_SKIP = 3736;
	int CLIENTSCRIPT_SCRIPT_3737 = 3737;
	int CLIENTSCRIPT_CLOSEBUTTON_CLICK_SOUND = 3738;
	int PROC_SCRIPT_3739 = 3739;
	int CLIENTSCRIPT_SOUND_SYNTH = 3740;
	int PROC_IN_TUTORIAL = 3741;
	int PROC_GET_QUEST_NAME = 3742;
	int CLIENTSCRIPT_BANKSIDE_BAG_DRAW = 3743;
	int PROC_BANKSIDE_BAG_DRAW = 3744;
	int PROC_MESLAYER_MODE1_ENABLED = 3745;
	int CLIENTSCRIPT_SCRIPT_3746 = 3746;
	int CLIENTSCRIPT_SCRIPT_3747 = 3747;
	int CLIENTSCRIPT_SCRIPT_3748 = 3748;
	int PROC_SCRIPT_3749 = 3749;
	int CLIENTSCRIPT_SCRIPT_3750 = 3750;
	int CLIENTSCRIPT_SCRIPT_3751 = 3751;
	int PROC_SCRIPT_3752 = 3752;
	int CLIENTSCRIPT_SCRIPT_3753 = 3753;
	int CLIENTSCRIPT_SCRIPT_3754 = 3754;
	int PROC_SCRIPT_3755 = 3755;
	int CLIENTSCRIPT_SCRIPT_3756 = 3756;
	int CLIENTSCRIPT_SCRIPT_3757 = 3757;
	int PROC_SCRIPT_3758 = 3758;
	int CLIENTSCRIPT_SCRIPT_3759 = 3759;
	int CLIENTSCRIPT_SCRIPT_3760 = 3760;
	int PROC_SCRIPT_3761 = 3761;
	int CLIENTSCRIPT_SCRIPT_3762 = 3762;
	int CLIENTSCRIPT_FRIENDSCHAT_OP = 3763;
	int PROC_FRIENDSCHAT_SENDKICK = 3764;
	int CLIENTSCRIPT_CHATCHANNEL_LOGIN = 3765;
	int CLIENTSCRIPT_FRIENDSCHAT_LEAVECHAT = 3766;
	int CLIENTSCRIPT_SCRIPT_3767 = 3767;
	int CLIENTSCRIPT_SCRIPT_3768 = 3768;
	int PROC_ON_STEAM = 3769;
	int CLIENTSCRIPT_SCRIPT_3770 = 3770;
	int CLIENTSCRIPT_SCRIPT_3771 = 3771;
	int CLIENTSCRIPT_SCRIPT_3772 = 3772;
	int PROC_SCRIPT_3773 = 3773;
	int CLIENTSCRIPT_SCRIPT_3774 = 3774;
	int CLIENTSCRIPT_PILLORY_BUTTON_INIT = 3775;
	int PROC_PILLORY_BUTTON_RESET = 3776;
	int CLIENTSCRIPT_PILLORY_BUTTON_OP = 3777;
	int CLIENTSCRIPT_PILLORY_BUTTON_RESET = 3778;
	int CLIENTSCRIPT_GNOME_CUISINE_INIT = 3779;
	int PROC_GNOME_CUISINE_ENUM = 3780;
	int PROC_GNOME_CUISINE_TITLE = 3781;
	int CLIENTSCRIPT_GNOME_CUISINE_CONFIRMATION_IN = 3782;
	int CLIENTSCRIPT_GNOME_CUISINE_CONFIRMATION_OUT = 3783;
	int CLIENTSCRIPT_GNOME_CUISINE_UPDATE_IF = 3784;
	int PROC_GNOME_SHOW_CUISINE = 3785;
	int CLIENTSCRIPT_GNOME_SHOW_INGREDIENTS = 3786;
	int PROC_GNOME_SHOW_INGREDIENTS = 3787;
	int PROC_GNOME_CREATE_INGREDIENT = 3788;
	int PROC_GNOME_RETURN_DUMMY = 3789;
	int PROC_CUISINE_CHECK_INV = 3790;
	int CLIENTSCRIPT_SCRIPT_3791 = 3791;
	int CLIENTSCRIPT_SCRIPT_3792 = 3792;
	int CLIENTSCRIPT_SCRIPT_3793 = 3793;
	int CLIENTSCRIPT_SCRIPT_3794 = 3794;
	int CLIENTSCRIPT_SCRIPT_3795 = 3795;
	int CLIENTSCRIPT_SCRIPT_3796 = 3796;
	int CLIENTSCRIPT_SCRIPT_3797 = 3797;
	int CLIENTSCRIPT_SCRIPT_3798 = 3798;
	int CLIENTSCRIPT_QUIZ_INIT = 3799;
	int CLIENTSCRIPT_MACRO_MIME_EMOTES_BUILD = 3800;
	int CLIENTSCRIPT_MACRO_MIME_EMOTES_DRAWBUTTON = 3801;
	int PROC_MACRO_MIME_EMOTES_DRAWBUTTON = 3802;
	int PROC_MACRO_MIME_EMOTES_BUTTONTEXT = 3803;
	int CLIENTSCRIPT_XPREWARD_INIT = 3804;
	int CLIENTSCRIPT_XPREWARD_UPDATE = 3805;
	int PROC_XPREWARD_UPDATE = 3806;
	int CLIENTSCRIPT_XPREWARD_SELECT = 3807;
	int CLIENTSCRIPT_XPREWARD_CONFIRM = 3808;
	int PROC_SCRIPT_3809 = 3809;
	int CLIENTSCRIPT_SCRIPT_3810 = 3810;
	int CLIENTSCRIPT_BREW_TOOLS_INIT = 3811;
	int PROC_BREW_TOOLS_SETUPBUTTON = 3812;
	int PROC_BREW_TOOLS_RESETBUTTON = 3813;
	int CLIENTSCRIPT_BREW_TOOLS_OP = 3814;
	int CLIENTSCRIPT_BREW_TOOLS_RESETBUTTON = 3815;
	int CLIENTSCRIPT_BREW_TOOLS_SUPPLIES = 3816;
	int PROC_BREW_TOOLS_SUPPLIES = 3817;
	int CLIENTSCRIPT_HAUNTEDMINE_CONTROLS_INIT = 3818;
	int CLIENTSCRIPT_HAUNTEDMINE_CONTROLS_UPDATE = 3819;
	int PROC_HAUNTEDMINE_CONTROLS_UPDATE = 3820;
	int CLIENTSCRIPT_SCRIPT_3821 = 3821;
	int PROC_SCRIPT_3822 = 3822;
	int CLIENTSCRIPT_SCRIPT_3823 = 3823;
	int CLIENTSCRIPT_SCRIPT_3824 = 3824;
	int CLIENTSCRIPT_PRISONPETE_INIT = 3825;
	int CLIENTSCRIPT_SETTINGS_INIT = 3826;
	int PROC_SETTINGS_INIT = 3827;
	int PROC_SETTINGS_WINDOW_SETUP = 3828;
	int CLIENTSCRIPT_SCRIPT_3829 = 3829;
	int CLIENTSCRIPT_SCRIPT_3830 = 3830;
	int CLIENTSCRIPT_SETTINGS_WINDOW_RESIZE = 3831;
	int PROC_SETTINGS_WINDOW_RESIZE = 3832;
	int CLIENTSCRIPT_SCRIPT_3833 = 3833;
	int PROC_SCRIPT_3834 = 3834;
	int CLIENTSCRIPT_SETTINGS_TAB_OP = 3835;
	int CLIENTSCRIPT_SETTINGS_TAB_TRANSMIT = 3836;
	int PROC_SETTINGS_CREATE_TABS = 3837;
	int PROC_SETTINGS_TAB_SELECTED = 3838;
	int PROC_SETTINGS_TAB_NOT_SELECTED = 3839;
	int PROC_SETTINGS_POPULATE_SETTINGS = 3840;
	int PROC_SETTINGS_CREATE_SETTING = 3841;
	int PROC_SETTINGS_SEEMORE = 3842;
	int CLIENTSCRIPT_SETTINGS_SEEMORE_OP = 3843;
	int PROC_SETTINGS_SEEMORE_CHECK = 3844;
	int PROC_SCRIPT_3845 = 3845;
	int PROC_SETTINGS_CREATE_TOGGLE = 3846;
	int CLIENTSCRIPT_SETTINGS_TOGGLE_OP = 3847;
	int CLIENTSCRIPT_SETTINGS_TOGGLE_SYNCH = 3848;
	int CLIENTSCRIPT_SETTINGS_TOGGLE_TRANSMIT = 3849;
	int PROC_SETTINGS_CREATE_DROP_DOWN = 3850;
	int CLIENTSCRIPT_SETTING_SHOW_DROPDOWN = 3851;
	int CLIENTSCRIPT_SETTING_DROPDOWN_ENTRY_OP = 3852;
	int CLIENTSCRIPT_SETTING_DROPDOWN_ENTRY_CLOSE = 3853;
	int CLIENTSCRIPT_SETTING_DROPDOWN_SYNCH = 3854;
	int CLIENTSCRIPT_SETTING_DROPDOWN_TRANSMIT = 3855;
	int PROC_SETTINGS_CREATE_INPUT_SETTING = 3856;
	int CLIENTSCRIPT_SETTINGS_INPUT_OP = 3857;
	int CLIENTSCRIPT_SETTINGS_INPUT_SETTING_TRANSMIT = 3858;
	int CLIENTSCRIPT_SETTINGS_INPUT_TIMER = 3859;
	int PROC_SETTINGS_CREATE_SLIDER = 3860;
	int CLIENTSCRIPT_SETTINGS_SLIDER_OP = 3861;
	int CLIENTSCRIPT_SETTINGS_SLIDER_SYNCH = 3862;
	int CLIENTSCRIPT_SETTINGS_SLIDER_ON_TRANSMIT = 3863;
	int PROC_SETTINGS_CREATE_KEYBIND_ENTRY = 3864;
	int PROC_SETTINGS_CREATE_BUTTON = 3865;
	int CLIENTSCRIPT_SETTINGS_BUTTON_OP = 3866;
	int CLIENTSCRIPT_SETTINGS_BUTTON_ON_TRANSMIT = 3867;
	int PROC_HEADER_CREATE = 3868;
	int PROC_TEXT_CREATE = 3869;
	int PROC_SEARCHBAR_CREATE = 3870;
	int PROC_SEARCHBAR_SETUP_OP = 3871;
	int CLIENTSCRIPT_SETTINGS_SHOW_KEYBOARD = 3872;
	int CLIENTSCRIPT_SEARCHBAR_OP = 3873;
	int CLIENTSCRIPT_SEARCHBAR_MOUSEOVER = 3874;
	int CLIENTSCRIPT_SEARCHBAR_MOUSELEAVE = 3875;
	int CLIENTSCRIPT_SEARCHBAR_KEYPRESS = 3876;
	int PROC_SEARCHBAR_SET_TEXT = 3877;
	int CLIENTSCRIPT_SETTINGS_OP_SOUND = 3878;
	int PROC_SETTINGS_OP_SOUND = 3879;
	int PROC_SCRIPT_3880 = 3880;
	int PROC_SETTINGS_TOGGLE_CHOOSE_TRANSMIT = 3881;
	int PROC_SETTINGS_DROPDOWN_CHOOSE_TRANSMIT = 3882;
	int PROC_SETTINGS_INPUT_SETTING_SET_TRANSMIT = 3883;
	int PROC_SETTINGS_SLIDER_CHOOSE_TRANSMIT = 3884;
	int PROC_SETTINGS_SLIDER_CHOOSE_ONOP = 3885;
	int PROC_SETTINGS_SLIDER_CHOOSE_ONDRAG = 3886;
	int PROC_SETTINGS_SLIDER_CHOOSE_ONDRAGCOMPLETE = 3887;
	int PROC_SCRIPT_3888 = 3888;
	int PROC_SCRIPT_3889 = 3889;
	int CLIENTSCRIPT_SCRIPT_3890 = 3890;
	int CLIENTSCRIPT_SCRIPT_3891 = 3891;
	int CLIENTSCRIPT_SCRIPT_3892 = 3892;
	int CLIENTSCRIPT_SCRIPT_3893 = 3893;
	int CLIENTSCRIPT_SETTINGS_ZOOM_POSITION_TIMER = 3894;
	int CLIENTSCRIPT_SETTINGS_CAMERA_ZOOM_SLIDER_CLICK = 3895;
	int CLIENTSCRIPT_SETTINGS_ZOOM_SLIDER_ONDRAG = 3896;
	int CLIENTSCRIPT_SETTINGS_ZOOM_SLIDER_DRAGCOMPLETE = 3897;
	int PROC_SETTINGS_ZOOM_SLIDER_SPECIFIC_POS = 3898;
	int PROC_SETTINGS_CAMERA_DO_ZOOM = 3899;
	int PROC_SETTINGS_ZOOM_POSITION_SLIDER = 3900;
	int CLIENTSCRIPT_SETTINGS_ZOOM_TRANS_TIMER = 3901;
	int PROC_SETTINGS_BUTTON_CHOOSE_TRANSMIT = 3902;
	int CLIENTSCRIPT_SETTINGS_BUTTON_INIT = 3903;
	int CLIENTSCRIPT_SETTINGS_BUTTON_REPEAT = 3904;
	int CLIENTSCRIPT_SETTINGS_BUTTON_LEAVE = 3905;
	int CLIENTSCRIPT_BOARDGAMES_RUNESQUARES_OPTIONS_UPDATE_SELECTIONS = 3906;
	int PROC_BOARDGAMES_RUNESQUARES_OPTIONS_UPDATE_SELECTIONS = 3907;
	int CLIENTSCRIPT_SETTINGS_SIDE_BOTTOM_INIT = 3908;
	int CLIENTSCRIPT_SETTINGS_SIDE_TABS_INIT = 3909;
	int PROC_SETTINGS_SIDE_TABS = 3910;
	int CLIENTSCRIPT_SETTINGS_SIDE_TAB_HIGHLIGHT = 3911;
	int CLIENTSCRIPT_SETTINGS_SIDE_TAB_HIGHLIGHT_RESET = 3912;
	int PROC_SETTINGS_SIDE_TAB_HIGHLIGHT = 3913;
	int PROC_SETTINGS_SIDE_TAB_HIGHLIGHT_RESET = 3914;
	int CLIENTSCRIPT_SETTINGS_SIDE_SWITCH_TAB = 3915;
	int CLIENTSCRIPT_SETTINGS_SIDE_UPDATE_TABS = 3916;
	int PROC_SETTINGS_SIDE_UPDATE_TABS = 3917;
	int PROC_SETTINGS_SIDE_HOUSE_CREATE = 3918;
	int PROC_SETTINGS_SIDE_ACCEPT_AID = 3919;
	int CLIENTSCRIPT_SETTINGS_SIDE_ACCEPT_AID_RESYNCH = 3920;
	int CLIENTSCRIPT_SETTINGS_ACCEPT_AID_OP = 3921;
	int PROC_SETTINGS_SIDE_ACCEPT_AID_CREATE = 3922;
	int PROC_SETTINGS_SIDE_RUNMODE = 3923;
	int CLIENTSCRIPT_SETTINGS_SIDE_RUNMODE_RESYNCH = 3924;
	int CLIENTSCRIPT_SETTINGS_SIDE_RUNMODE_OP = 3925;
	int PROC_SETTINGS_SIDE_RUNMODE_CREATE = 3926;
	int CLIENTSCRIPT_SCRIPT_3927 = 3927;
	int CLIENTSCRIPT_SCRIPT_3928 = 3928;
	int CLIENTSCRIPT_SCRIPT_3929 = 3929;
	int CLIENTSCRIPT_SCRIPT_3930 = 3930;
	int CLIENTSCRIPT_SCRIPT_3931 = 3931;
	int PROC_SCRIPT_3932 = 3932;
	int CLIENTSCRIPT_SCRIPT_3933 = 3933;
	int CLIENTSCRIPT_SCRIPT_3934 = 3934;
	int CLIENTSCRIPT_SCRIPT_3935 = 3935;
	int PROC_SETTINGS_CREATE_ICON = 3936;
	int PROC_SETTINGS_UPDATE_ICON = 3937;
	int CLIENTSCRIPT_SETTINGS_ICON_OP = 3938;
	int CLIENTSCRIPT_SCRIPT_3939 = 3939;
	int CLIENTSCRIPT_SCRIPT_3940 = 3940;
	int PROC_SCRIPT_3941 = 3941;
	int CLIENTSCRIPT_ZOOM_MOUSE_TRANSMIT = 3942;
	int CLIENTSCRIPT_ZOOM_TIMER = 3943;
	int CLIENTSCRIPT_SETTINGS_SIDE_OP_SOUND = 3944;
	int PROC_SETTINGS_SIDE_OP_SOUND = 3945;
	int CLIENTSCRIPT_SCRIPT_3946 = 3946;
	int PROC_ACCOUNT_SUMMARY_UPDATE_TEXT = 3947;
	int PROC_SCRIPT_3948 = 3948;
	int PROC_SCRIPT_3949 = 3949;
	int PROC_SCRIPT_3950 = 3950;
	int PROC_SCRIPT_3951 = 3951;
	int PROC_SCRIPT_3952 = 3952;
	int PROC_SCRIPT_3953 = 3953;
	int CLIENTSCRIPT_SUMMARY_SIDEPANEL_COMBAT_LEVEL_TRANSMIT = 3954;
	int PROC_SETTINGS_CHECK_BLOCK = 3955;
	int PROC_SETTINGS_OP_CHECKER = 3956;
	int PROC_SCRIPT_3957 = 3957;
	int PROC_SCRIPT_3958 = 3958;
	int PROC_SETTINGS_CUSTOM_CHECK = 3959;
	int PROC_SETTINGS_GET_TOGGLE = 3960;
	int PROC_SETTINGS_GET_SLIDER = 3961;
	int PROC_SETTINGS_GET_DROPDOWN = 3962;
	int PROC_SETTINGS_GET_KEYBIND = 3963;
	int PROC_SETTINGS_GET_NUMBER_INPUT = 3964;
	int PROC_SETTINGS_CLICKED_TOGGLE = 3965;
	int PROC_SETTINGS_SET_SLIDER = 3966;
	int PROC_SETTINGS_SET_DROPDOWN = 3967;
	int PROC_SETTINGS_SET_KEYBIND = 3968;
	int PROC_SETTINGS_CLICKED_BUTTON = 3969;
	int CLIENTSCRIPT_SCRIPT_3970 = 3970;
	int PROC_SCRIPT_3971 = 3971;
	int PROC_SCRIPT_3972 = 3972;
	int PROC_SETTINGS_HITSPLAT_TINTING = 3973;
	int PROC_SETTINGS_WIKI_LOOKUP = 3974;
	int PROC_SETTINGS_DATA_ORBS = 3975;
	int PROC_SCRIPT_3976 = 3976;
	int PROC_SCRIPT_3977 = 3977;
	int PROC_SCRIPT_3978 = 3978;
	int PROC_SETTINGS_SPECIAL_ATTACK_BAR_TOOLTIP = 3979;
	int PROC_SCRIPT_3980 = 3980;
	int PROC_SCRIPT_3981 = 3981;
	int PROC_SCRIPT_3982 = 3982;
	int PROC_SCRIPT_3983 = 3983;
	int PROC_SETTINGS_SPLIT_PRIVATE_CHAT = 3984;
	int PROC_SETTINGS_HIDE_PRIVATE_CHAT = 3985;
	int PROC_SETTINGS_PROFANITY_FILTER = 3986;
	int CLIENTSCRIPT_SCRIPT_3987 = 3987;
	int PROC_SCRIPT_3988 = 3988;
	int PROC_SCRIPT_3989 = 3989;
	int PROC_SETTINGS_MOUSE_CAMERA = 3990;
	int PROC_SCRIPT_3991 = 3991;
	int PROC_SCRIPT_3992 = 3992;
	int PROC_SCRIPT_3993 = 3993;
	int PROC_SETTINGS_FUNCTION_BUTTON = 3994;
	int PROC_SCRIPT_3995 = 3995;
	int PROC_SCRIPT_3996 = 3996;
	int CLIENTSCRIPT_BOARDGAMES_RUNESQUARES_OPTIONS_UPDATE_RUNE = 3997;
	int CLIENTSCRIPT_SETTINGS_CLIENT_MODE = 3998;
	int PROC_BOARDGAMES_RUNESQUARES_OPTIONS_UPDATE_RUNE = 3999;
	int CLIENTSCRIPT_BOARDGAMES_RUNESQUARES_OPTIONS_UPDATE_TIME = 4000;
	int PROC_SCRIPT_4001 = 4001;
	int PROC_SETTINGS_WARNING_DAREEYAK_TELEPORT = 4002;
	int PROC_BOARDGAMES_RUNESQUARES_OPTIONS_UPDATE_TIME = 4003;
	int PROC_SETTINGS_WARNING_ANNAKARL_TELEPORT = 4004;
	int PROC_SETTINGS_WARNING_GHORROCK_TELEPORT = 4005;
	int PROC_SETTINGS_WARNING_ICE_PLATEAU_TABLET = 4006;
	int PROC_SETTINGS_WARNING_CEMETERY_TABLET = 4007;
	int PROC_SETTINGS_WARNING_CRABS_TABLET = 4008;
	int PROC_SCRIPT_4009 = 4009;
	int PROC_SETTINGS_WARNING_DAREEYAK_TABLET = 4010;
	int CLIENTSCRIPT_BOARDGAMES_RUNESQUARES_OPTIONS_UPDATE_RANKED = 4011;
	int PROC_SETTINGS_WARNING_ANNAKARL_TABLET = 4012;
	int PROC_SETTINGS_WARNING_GHORROCK_TABLET = 4013;
	int PROC_SETTINGS_LOOT_DROP_NOTIFICATION = 4014;
	int PROC_SETTINGS_DROP_ITEM_WARNINGS = 4015;
	int PROC_SCRIPT_4016 = 4016;
	int PROC_SCRIPT_4017 = 4017;
	int PROC_SETTINGS_ACCEPT_AID = 4018;
	int PROC_BOARDGAMES_RUNESQUARES_OPTIONS_UPDATE_RANKED = 4019;
	int CLIENTSCRIPT_CHATDEFAULT_STOPINPUT = 4020;
	int CLIENTSCRIPT_SCRIPT_4021 = 4021;
	int CLIENTSCRIPT_BOARDGAMES_RUNESQUARES_UPDATE_GRID = 4022;
	int CLIENTSCRIPT_SCRIPT_4023 = 4023;
	int PROC_QUEST_PROGRESS_GET = 4024;
	int PROC_QUEST_F2P_INDEX_STATUS_GET = 4025;
	int PROC_QUEST_MEMBERS_INDEX_STATUS_GET = 4026;
	int PROC_MINIQUEST_INDEX_STATUS_GET = 4027;
	int PROC_QUEST_INDEX_STATUS_GET = 4028;
	int PROC_QUEST_STATUS_GET = 4029;
	int PROC_QUEST_STATUS_GET_EXCEPTIONS = 4030;
	int WORLDMAPELEMENTMOUSEREPEAT_680 = 4031;
	int WORLDMAPELEMENTMOUSELEAVE_680 = 4032;
	int CLIENTSCRIPT_WARGUILD_DEFENCE_MINI_HIGHLIGHT = 4033;
	int PROC_SETTINGS_SEPARATE_HOURS = 4034;
	int CLIENTSCRIPT_PUBLISHING_PLATFORM = 4035;
	int PROC_SCRIPT_4036 = 4036;
	int CLIENTSCRIPT_BOLT_POUCH_EXTRA_AMMO_INIT = 4037;
	int CLIENTSCRIPT_BOLT_POUCH_EXTRA_AMMO_DRAW = 4038;
	int PROC_BOLT_POUCH_EXTRA_AMMO_DRAW = 4039;
	int CLIENTSCRIPT_BOLT_POUCH_INIT = 4040;
	int CLIENTSCRIPT_BOLT_POUCH_SETUP_ENTRY = 4041;
	int PROC_BOLT_POUCH_SETUP_ENTRY = 4042;
	int CLIENTSCRIPT_BOLT_POUCH_DRAG_COMPLETE = 4043;
	int CLIENTSCRIPT_BOLT_POUCH_SETUP_ENTRY_TIMER = 4044;
	int PROC_BOLT_POUCH_CREATE_ENTRY = 4045;
	int CLIENTSCRIPT_BOLT_POUCH_OP = 4046;
	int PROC_BOLT_POUCH_RETURN_SLOT = 4047;
	int PROC_BOLT_POUCH_RETURN_ID = 4048;
	int CLIENTSCRIPT_TACKLE_BOX_INIT = 4049;
	int CLIENTSCRIPT_TACKLE_BOX_DRAW = 4050;
	int PROC_TACKLE_BOX_DRAW = 4051;
	int PROC_TACKLE_BOX_SETITEM = 4052;
	int PROC_TACKLE_BOX_SETSIDEITEM = 4053;
	int PROC_TACKLE_BOX_SETBLANK = 4054;
	int CLIENTSCRIPT_TACKLE_BOX_OPITEM = 4055;
	int CLIENTSCRIPT_TACKLE_BOX_SWAPITEM = 4056;
	int CLIENTSCRIPT_TACKLE_BOX_SWAPSIDEITEM = 4057;
	int CLIENTSCRIPT_TACKLE_BOX_DRAGITEM = 4058;
	int PROC_TACKLE_BOX_BUTTON_DRAW = 4059;
	int CLIENTSCRIPT_TACKLE_BOX_BUTTON_OP = 4060;
	int CLIENTSCRIPT_TACKLE_BOX_SIDE_INIT = 4061;
	int CLIENTSCRIPT_TACKLE_BOX_SIDE_DRAW = 4062;
	int PROC_TACKLE_BOX_SIDE_DRAW = 4063;
	int PROC_SCRIPT_4064 = 4064;
	int CLIENTSCRIPT_SCRIPT_4065 = 4065;
	int CLIENTSCRIPT_SCRIPT_4066 = 4066;
	int PROC_SCRIPT_4067 = 4067;
	int CLIENTSCRIPT_SCRIPT_4068 = 4068;
	int CLIENTSCRIPT_SCRIPT_4069 = 4069;
	int CLIENTSCRIPT_SCRIPT_4070 = 4070;
	int CLIENTSCRIPT_TEMPOROSS_HUD_INIT = 4071;
	int PROC_SCRIPT_4072 = 4072;
	int PROC_SCRIPT_4073 = 4073;
	int CLIENTSCRIPT_TEMPOROSS_HUD_UPDATE = 4074;
	int PROC_TEMPOROSS_HUD_UPDATE_BAR = 4075;
	int CLIENTSCRIPT_TEMPOROSS_HUD_BAR_MOVEMENT = 4076;
	int PROC_TEMPOROSS_HUD_BAR_MOVEMENT = 4077;
	int PROC_DEBUG_MES = 4078;
	int PROC_CHATDEFAULT_RESTOREINPUT = 4079;
	int CLIENTSCRIPT_COLLECTION_INIT_FRAME = 4080;
	int PROC_SCRIPT_4081 = 4081;
	int PROC_COLLECTION_SEARCH_INIT = 4082;
	int PROC_COLLECTION_SEARCH_BUTTON = 4083;
	int CLIENTSCRIPT_COLLECTION_TOGGLE_SEARCH = 4084;
	int PROC_COLLECTION_TOGGLE_SEARCH = 4085;
	int PROC_COLLECTION_SEARCHBAR_CREATE = 4086;
	int CLIENTSCRIPT_COLLECTION_SEARCH_BUTTON_PRESS = 4087;
	int PROC_COLLECTION_SEARCHBAR_SETUP_OP = 4088;
	int CLIENTSCRIPT_COLLECTION_SETTINGS_SHOW_KEYBOARD = 4089;
	int CLIENTSCRIPT_COLLECTION_SEARCHBAR_OP = 4090;
	int PROC_COLLECTION_SEARCHBAR_OP = 4091;
	int CLIENTSCRIPT_COLLECTION_SEARCHBAR_MOUSEOVER = 4092;
	int CLIENTSCRIPT_COLLECTION_SEARCHBAR_MOUSELEAVE = 4093;
	int CLIENTSCRIPT_COLLECTION_SEARCHBAR_KEYPRESS = 4094;
	int PROC_COLLECTION_SEARCHBAR_SET_TEXT = 4095;
	int PROC_COLLECTION_POPULATE_SEARCH_RESULTS = 4096;
	int PROC_COLLECTION_SEARCH_SCROLLBAR = 4097;
	int PROC_COLLECTION_SEARCH_DISPLAY_ITEM = 4098;
	int PROC_COLLECTION_DISPLAY_HEADER = 4099;
	int CLIENTSCRIPT_COLLECTION_DELAYED_TRANSMIT = 4100;
	int PROC_COLLECTION_SEARCH_KEYBOARD_LISTENER = 4101;
	int PROC_SCRIPT_4102 = 4102;
	int PROC_SCRIPT_4103 = 4103;
	int PROC_EMOTE_SET_GRAPHIC = 4104;
	int PROC_EMOTE_OP1_CONFIGURE = 4105;
	int PROC_EMOTE_OP2_CONFIGURE = 4106;
	int CLIENTSCRIPT_CAMDOZAAL_RAMARNO_SHOP_SETUP = 4107;
	int CLIENTSCRIPT_SCRIPT_4108 = 4108;
	int PROC_SCRIPT_4109 = 4109;
	int PROC_CAMDOZAAL_RAMARNO_SHOP_SETUP_BUTTON = 4110;
	int CLIENTSCRIPT_CAMDOZAAL_VAULT_INIT = 4111;
	int CLIENTSCRIPT_CAMDOZAAL_TIMER_UPDATE = 4112;
	int CLIENTSCRIPT_CAMDOZAAL_TIMER_PAUSE = 4113;
	int CLIENTSCRIPT_CAMDOZAAL_TIMER = 4114;
	int PROC_CAMDOZAAL_TIMER_TEXT = 4115;
	int CLIENTSCRIPT_SCRIPT_4116 = 4116;
	int CLIENTSCRIPT_SCRIPT_4117 = 4117;
	int CLIENTSCRIPT_SCRIPT_4118 = 4118;
	int PROC_SCRIPT_4119 = 4119;
	int CLIENTSCRIPT_SCRIPT_4120 = 4120;
	int CLIENTSCRIPT_SCRIPT_4121 = 4121;
	int PROC_SCRIPT_4122 = 4122;
	int CLIENTSCRIPT_SOUL_WARS_REWARDS_DRAWCONFIRM = 4123;
	int PROC_SCRIPT_4124 = 4124;
	int CLIENTSCRIPT_SIDE_CONTAINER_INIT = 4125;
	int CLIENTSCRIPT_SIDE_CONTAINER_RELOAD = 4126;
	int PROC_SIDE_CONTAINER_RELOAD = 4127;
	int PROC_SCRIPT_4128 = 4128;
	int PROC_SCRIPT_4129 = 4129;
	int CLIENTSCRIPT_STAT_BOOSTS_HUD_INIT = 4130;
	int PROC_MAGIC_SPELLBOOK_UNLOCKED = 4131;
	int PROC_SCRIPT_4132 = 4132;
	int PROC_ARCEUUS_AUTOCAST_SPELLPOS = 4133;
	int PROC_SCRIPT_4134 = 4134;
	int PROC_SCRIPT_4135 = 4135;
	int PROC_SCRIPT_4136 = 4136;
	int PROC_SCRIPT_4137 = 4137;
	int PROC_SCRIPT_4138 = 4138;
	int CLIENTSCRIPT_SCRIPT_4139 = 4139;
	int PROC_SCRIPT_4140 = 4140;
	int CLIENTSCRIPT_TUTORIAL_DISPLAYNAME_ONKEY = 4141;
	int PROC_SCRIPT_4142 = 4142;
	int CLIENTSCRIPT_SCRIPT_4143 = 4143;
	int CLIENTSCRIPT_SCRIPT_4144 = 4144;
	int CLIENTSCRIPT_SCRIPT_4145 = 4145;
	int CLIENTSCRIPT_SCRIPT_4146 = 4146;
	int PROC_SCRIPT_4147 = 4147;
	int CLIENTSCRIPT_SCRIPT_4148 = 4148;
	int CLIENTSCRIPT_SCRIPT_4149 = 4149;
	int CLIENTSCRIPT_SCRIPT_4150 = 4150;
	int PROC_SCRIPT_4151 = 4151;
	int CLIENTSCRIPT_SCRIPT_4152 = 4152;
	int PROC_SCRIPT_4153 = 4153;
	int CLIENTSCRIPT_SCRIPT_4154 = 4154;
	int CLIENTSCRIPT_SCRIPT_4155 = 4155;
	int CLIENTSCRIPT_SCRIPT_4156 = 4156;
	int PROC_SCRIPT_4157 = 4157;
	int PROC_GETBIT_RANGE = 4158;
	int PROC_SETBIT_RANGE = 4159;
	int PROC_CLEARBIT_RANGE = 4160;
	int PROC_SETBIT_RANGE_TOINT = 4161;
	int CLIENTSCRIPT_ROGUETRADER_INIT = 4162;
	int PROC_ROGUETRADER_GAME_SIZE = 4163;
	int PROC_ROGUETRADER_DRAW_FRAMES = 4164;
	int PROC_ROGUETRADER_DRAW_RUNES = 4165;
	int CLIENTSCRIPT_ROGUETRADER_SELECTRUNE_TRANSMIT = 4166;
	int CLIENTSCRIPT_ROGUETRADER_SELECTRUNE = 4167;
	int PROC_ROGUETRADER_DRAW_GAME = 4168;
	int CLIENTSCRIPT_SCRIPT_4169 = 4169;
	int CLIENTSCRIPT_ROGUETRADER_DRAW_GAME_TRANSMIT = 4170;
	int CLIENTSCRIPT_ROGUETRADER_PLACERUNE = 4171;
	int CLIENTSCRIPT_SCRIPT_4172 = 4172;
	int PROC_SCRIPT_4173 = 4173;
	int PROC_ROGUETRADER_TILE_GET = 4174;
	int PROC_ROGUETRADER_TILE_SET = 4175;
	int CLIENTSCRIPT_TRAWLER_START_TOGGLE = 4176;
	int CLIENTSCRIPT_TRAWLER_START_SETGRAPHIC = 4177;
	int PROC_TRAWLER_START_SETGRAPHIC = 4178;
	int CLIENTSCRIPT_CHAT_SENDABUSEREPORT = 4179;
	int PROC_SETTINGS_COLOUR_CHOOSE_TRANSMIT = 4180;
	int PROC_SETTINGS_GET_COLOUR = 4181;
	int PROC_SCRIPT_4182 = 4182;
	int CLIENTSCRIPT_SETTINGS_COLOUR_INPUT_CLICK = 4183;
	int CLIENTSCRIPT_SETTINGS_COLOUR_INPUT_UPDATE = 4184;
	int CLIENTSCRIPT_SCRIPT_4185 = 4185;
	int CLIENTSCRIPT_SCRIPT_4186 = 4186;
	int CLIENTSCRIPT_SCRIPT_4187 = 4187;
	int PROC_SCRIPT_4188 = 4188;
	int PROC_SCRIPT_4189 = 4189;
	int CLIENTSCRIPT_SCRIPT_4190 = 4190;
	int PROC_SCRIPT_4191 = 4191;
	int PROC_COLOUR_TO_STRING = 4192;
	int PROC_SCRIPT_4193 = 4193;
	int PROC_SIN_DEG = 4194;
	int PROC_COS_DEG = 4195;
	int CLIENTSCRIPT_AUDIO_TOOL = 4196;
	int PROC_AUDIO_DRAW_MENU = 4197;
	int PROC_AUDIO_MENU = 4198;
	int PROC_AUDIO_MENU_CREATEENTRY_INDEXED = 4199;
	int CLIENTSCRIPT_AUDIO_CATEGORY_SELECT = 4200;
	int PROC_AUDIO_CATEGORY_SELECT = 4201;
	int PROC_SCRIPT_4202 = 4202;
	int CLIENTSCRIPT_AUDIO_SYNTH_PLAY = 4203;
	int CLIENTSCRIPT_AUDIO_LOOP_CLICK = 4204;
	int PROC_SCRIPT_4205 = 4205;
	int PROC_SCRIPT_4206 = 4206;
	int CLIENTSCRIPT_SCRIPT_4207 = 4207;
	int CLIENTSCRIPT_SCRIPT_4208 = 4208;
	int PROC_SCRIPT_4209 = 4209;
	int PROC_SCRIPT_4210 = 4210;
	int CLIENTSCRIPT_SCRIPT_4211 = 4211;
	int CLIENTSCRIPT_SCRIPT_4212 = 4212;
	int PROC_SCRIPT_4213 = 4213;
	int CLIENTSCRIPT_SCRIPT_4214 = 4214;
	int PROC_SCRIPT_4215 = 4215;
	int PROC_THINBOX_SPECIFIC = 4216;
	int CLIENTSCRIPT_LOADING_ICON_INIT = 4217;
	int PROC_LOADING_ICON_INIT = 4218;
	int PROC_LOADING_ICON_DRAW = 4219;
	int CLIENTSCRIPT_LOADING_ICON_RESIZE = 4220;
	int WORLDMAPELEMENTMOUSEREPEAT_690 = 4221;
	int WORLDMAPELEMENTMOUSELEAVE_690 = 4222;
	int CLIENTSCRIPT_CLAN_MEMBERS_INIT = 4223;
	int PROC_SCRIPT_4224 = 4224;
	int CLIENTSCRIPT_SCRIPT_4225 = 4225;
	int CLIENTSCRIPT_SCRIPT_4226 = 4226;
	int CLIENTSCRIPT_SCRIPT_4227 = 4227;
	int PROC_SCRIPT_4228 = 4228;
	int PROC_CLAN_MEMBERS_SETSIZE = 4229;
	int CLIENTSCRIPT_CLAN_MEMBERS_CHECKSIZE = 4230;
	int CLIENTSCRIPT_CLAN_MEMBERS_DRAW = 4231;
	int PROC_CLAN_MEMBERS_DRAW = 4232;
	int CLIENTSCRIPT_CLAN_MEMBERS_HOVER = 4233;
	int CLIENTSCRIPT_CLAN_MEMBERS_OP = 4234;
	int CLIENTSCRIPT_CLAN_MEMBERS_BUTTONRESET = 4235;
	int PROC_CLAN_MEMBERS_FILTERCHECK = 4236;
	int PROC_CLAN_MEMBERS_FILTER_INIT = 4237;
	int CLIENTSCRIPT_CLAN_MEMBERS_FILTER_SETRANK = 4238;
	int PROC_CLAN_MEMBERS_FILTER_SETRANK = 4239;
	int PROC_SCRIPT_4240 = 4240;
	int CLIENTSCRIPT_CLAN_MEMBERS_FILTER_HOVER = 4241;
	int CLIENTSCRIPT_SCRIPT_4242 = 4242;
	int CLIENTSCRIPT_CLAN_MEMBERS_FILTER_OP = 4243;
	int CLIENTSCRIPT_SCRIPT_4244 = 4244;
	int PROC_CLAN_MEMBERS_SEARCHING = 4245;
	int PROC_CLAN_MEMBERS_FILTERNAME = 4246;
	int PROC_CLAN_MEMBERS_SEARCH_SETBUTTON = 4247;
	int CLIENTSCRIPT_CLAN_MEMBERS_SEARCH_REFRESH = 4248;
	int CLIENTSCRIPT_CLAN_MEMBERS_SEARCH_TOGGLE = 4249;
	int CLIENTSCRIPT_CLAN_MEMBERS_SEARCH_DRAWBUTTON = 4250;
	int CLIENTSCRIPT_SCRIPT_4251 = 4251;
	int PROC_CLAN_MEMBERS_SEARCH_DRAWBUTTON = 4252;
	int PROC_CLAN_MEMBERS_SHOWRANK = 4253;
	int PROC_CLAN_MEMBERS_SHOWJOINED = 4254;
	int PROC_SCRIPT_4255 = 4255;
	int PROC_SCRIPT_4256 = 4256;
	int CLIENTSCRIPT_SCRIPT_4257 = 4257;
	int CLIENTSCRIPT_SCRIPT_4258 = 4258;
	int PROC_SCRIPT_4259 = 4259;
	int CLIENTSCRIPT_SCRIPT_4260 = 4260;
	int PROC_SCRIPT_4261 = 4261;
	int PROC_SCRIPT_4262 = 4262;
	int CLIENTSCRIPT_CLAN_INTERESTS = 4263;
	int PROC_CLAN_INTERESTS_SETSIZE = 4264;
	int CLIENTSCRIPT_CLAN_INTERESTS_CHECKSETSIZE = 4265;
	int CLIENTSCRIPT_CLAN_INTERESTS_SYNCH = 4266;
	int PROC_CLAN_INTERESTS_SYNCH = 4267;
	int CLIENTSCRIPT_CLAN_INTERESTS_OP = 4268;
	int CLIENTSCRIPT_CLAN_BANNED_INIT = 4269;
	int CLIENTSCRIPT_CLAN_BANNED_DRAW = 4270;
	int PROC_CLAN_BANNED_DRAW = 4271;
	int PROC_CLAN_BANNED_SETSIZE = 4272;
	int CLIENTSCRIPT_CLAN_BANNED_CHECKSIZE = 4273;
	int PROC_CLAN_BANNED_WIPEDISPLAY = 4274;
	int PROC_CLAN_BANNED_POPULATEDISPLAY = 4275;
	int CLIENTSCRIPT_CLAN_BANNED_OP = 4276;
	int CLIENTSCRIPT_CLAN_BANNED_BUTTONRESET = 4277;
	int CLIENTSCRIPT_CLAN_BANNED_UNBAN = 4278;
	int CLIENTSCRIPT_CLAN_BANNED_BLOCKER = 4279;
	int PROC_CLAN_BANNED_BLOCKER = 4280;
	int PROC_CLAN_BANNED_SEARCH_SETBUTTON = 4281;
	int CLIENTSCRIPT_CLAN_BANNED_SEARCH_REFRESH = 4282;
	int CLIENTSCRIPT_CLAN_BANNED_SEARCH_TOGGLE = 4283;
	int CLIENTSCRIPT_CLAN_INFO_INIT = 4284;
	int CLIENTSCRIPT_CLAN_INFO_DRAW = 4285;
	int PROC_CLAN_INFO_DRAW = 4286;
	int PROC_SCRIPT_4287 = 4287;
	int PROC_SCRIPT_4288 = 4288;
	int CLIENTSCRIPT_CLAN_INFO_STATIC = 4289;
	int CLIENTSCRIPT_CLAN_INFO_EDITABLE = 4290;
	int PROC_CLAN_INFO_SETSIZE = 4291;
	int CLIENTSCRIPT_CLAN_INFO_CHECKSIZE = 4292;
	int PROC_SCRIPT_4293 = 4293;
	int CLIENTSCRIPT_CLAN_INFO_EDITABLE_HOVER = 4294;
	int CLIENTSCRIPT_CLAN_INFO_EDITABLE_OP = 4295;
	int CLIENTSCRIPT_CLAN_INFO_EDITABLE_RESET = 4296;
	int CLIENTSCRIPT_SCRIPT_4297 = 4297;
	int CLIENTSCRIPT_SCRIPT_4298 = 4298;
	int PROC_CLAN_INTERFACETITLE = 4299;
	int CLIENTSCRIPT_CLAN_INTERFACETITLE_SETTITLE = 4300;
	int PROC_CLAN_INTERFACETITLE_SETTITLE = 4301;
	int PROC_SCRIPT_4302 = 4302;
	int PROC_SCRIPT_4303 = 4303;
	int PROC_SCRIPT_4304 = 4304;
	int PROC_SCRIPT_4305 = 4305;
	int PROC_SCRIPT_4306 = 4306;
	int CLIENTSCRIPT_CLAN_RANKTITLES_INIT = 4307;
	int PROC_CLAN_RANKTITLES_SETSIZE = 4308;
	int CLIENTSCRIPT_CLAN_RANKTITLES_CHECKSIZE = 4309;
	int CLIENTSCRIPT_CLAN_RANKTITLES_DRAW = 4310;
	int PROC_CLAN_RANKTITLES_DRAW = 4311;
	int CLIENTSCRIPT_CLAN_RANKTITLE_WIPE = 4312;
	int CLIENTSCRIPT_CLAN_RANKTITLE_DRAGCOMPLETE = 4313;
	int CLIENTSCRIPT_CLAN_RANKTITLE_DRAGTITLE = 4314;
	int CLIENTSCRIPT_CLAN_RANKTITLE_DRAGTIMEOUT = 4315;
	int CLIENTSCRIPT_CLAN_RANKPOPUP = 4316;
	int PROC_CLAN_RANKPOPUP_SETSIZE = 4317;
	int CLIENTSCRIPT_CLAN_RANKPOPUP_CHECKSIZE = 4318;
	int CLIENTSCRIPT_CLAN_RANKPOPUP_UPDATETITLE = 4319;
	int PROC_CLAN_RANKPOPUP_UPDATETITLE = 4320;
	int CLIENTSCRIPT_CLAN_HALL_PIANO = 4321;
	int PROC_SCRIPT_4322 = 4322;
	int CLIENTSCRIPT_SCRIPT_4323 = 4323;
	int CLIENTSCRIPT_SCRIPT_4324 = 4324;
	int PROC_SCRIPT_4325 = 4325;
	int CLIENTSCRIPT_SCRIPT_4326 = 4326;
	int CLIENTSCRIPT_SCRIPT_4327 = 4327;
	int CLIENTSCRIPT_SCRIPT_4328 = 4328;
	int PROC_SCRIPT_4329 = 4329;
	int CLIENTSCRIPT_CLAN_HALL_INIT = 4330;
	int PROC_SCRIPT_4331 = 4331;
	int PROC_CLAN_HALL_SETTINGS_CREATE_TOGGLE = 4332;
	int PROC_CLAN_HALL_SETTINGS_GET_VALUE = 4333;
	int PROC_CLAN_HALL_SETTINGS_SET_VALUE = 4334;
	int CLIENTSCRIPT_SCRIPT_4335 = 4335;
	int PROC_CLAN_HALL_SETTINGS_SET_TOGGLE = 4336;
	int CLIENTSCRIPT_CLAN_HALL_SETTINGS_TOGGLE_OP = 4337;
	int PROC_SCRIPT_4338 = 4338;
	int CLIENTSCRIPT_SCRIPT_4339 = 4339;
	int CLIENTSCRIPT_SCRIPT_4340 = 4340;
	int CLIENTSCRIPT_CLAN_STORAGE_MAIN_INIT = 4341;
	int CLIENTSCRIPT_CLAN_STORAGE_MAIN_HINT = 4342;
	int PROC_CLAN_STORAGE_MAIN_HINT = 4343;
	int CLIENTSCRIPT_CLAN_STORAGE_MAIN_DRAWCOINS = 4344;
	int PROC_CLAN_STORAGE_MAIN_DRAWCOINS = 4345;
	int CLIENTSCRIPT_CLAN_STORAGE_OPITEM = 4346;
	int CLIENTSCRIPT_CLAN_STORAGE_SIDE_INIT = 4347;
	int CLIENTSCRIPT_CLAN_STORAGE_SIDE_DRAWCOINS = 4348;
	int PROC_CLAN_STORAGE_SIDE_DRAWCOINS = 4349;
	int CLIENTSCRIPT_CLAN_STORAGE_BUTTON_OP = 4350;
	int CLIENTSCRIPT_CLAN_STORAGE_BUTTON_RESET = 4351;
	int PROC_CLAN_STORAGE_BUTTON_RESET = 4352;
	int PROC_CLAN_STORAGE_BUTTON_DRAW = 4353;
	int CLIENTSCRIPT_CLAN_BOARD_INIT = 4354;
	int CLIENTSCRIPT_SCRIPT_4355 = 4355;
	int PROC_SCRIPT_4356 = 4356;
	int CLIENTSCRIPT_CLAN_BOARD_ADDLINE = 4357;
	int PROC_CLAN_BOARD_ENTRY_INIT = 4358;
	int CLIENTSCRIPT_SCRIPT_4359 = 4359;
	int PROC_SCRIPT_4360 = 4360;
	int CLIENTSCRIPT_CLAN_BOARD_ENTRY_OP = 4361;
	int CLIENTSCRIPT_CLAN_BOARD_ENTRY_RESET = 4362;
	int PROC_CLAN_BOARD_SETSORT = 4363;
	int PROC_CLAN_BOARD_SORTBUTTON_DRAW = 4364;
	int CLIENTSCRIPT_CLAN_BOARD_CLICKSORT = 4365;
	int CLIENTSCRIPT_CLAN_BOARD_FILTERUPDATE = 4366;
	int PROC_CLAN_BOARD_FILTERUPDATE = 4367;
	int PROC_SCRIPT_4368 = 4368;
	int CLIENTSCRIPT_CLAN_BOARD_FILTEROP = 4369;
	int CLIENTSCRIPT_CLAN_BOARD_FILTERRESET = 4370;
	int PROC_SCRIPT_4371 = 4371;
	int PROC_CLAN_BOARD_SETSIZE = 4372;
	int CLIENTSCRIPT_CLAN_BOARD_CHECKSIZE = 4373;
	int CLIENTSCRIPT_CLAN_APPLICANTS_INIT = 4374;
	int CLIENTSCRIPT_SCRIPT_4375 = 4375;
	int CLIENTSCRIPT_CLAN_APPLICANTS_ADDAPPLICANT = 4376;
	int PROC_CLAN_APPLICANTS_ENTRY_INIT = 4377;
	int CLIENTSCRIPT_CLAN_APPLICANTS_ENTRY_OP = 4378;
	int CLIENTSCRIPT_CLAN_APPLICANTS_ENTRY_RESET = 4379;
	int CLIENTSCRIPT_CLAN_APPLICANTS_SETCOLOUR = 4380;
	int PROC_CLAN_APPLICANTS_SETCOLOUR = 4381;
	int PROC_CLAN_APPLICANTS_SETSIZE = 4382;
	int CLIENTSCRIPT_CLAN_APPLICANTS_CHECKSIZE = 4383;
	int PROC_SCRIPT_4384 = 4384;
	int CLIENTSCRIPT_SCRIPT_4385 = 4385;
	int CLIENTSCRIPT_SCRIPT_4386 = 4386;
	int CLIENTSCRIPT_SCRIPT_4387 = 4387;
	int PROC_CLAN_PROPERTY_UPDATEBUTTON = 4388;
	int CLIENTSCRIPT_CLAN_APPLICANTS_FRAMEINIT = 4389;
	int CLIENTSCRIPT_CLAN_APPLICANTS_FRAMEDRAW = 4390;
	int PROC_CLAN_APPLICANTS_FRAMEDRAW = 4391;
	int CLIENTSCRIPT_CLAN_DEBUG_PROFILE = 4392;
	int PROC_SCRIPT_4393 = 4393;
	int PROC_SCRIPT_4394 = 4394;
	int CLIENTSCRIPT_CLAN_SIDEPANEL_INIT = 4395;
	int CLIENTSCRIPT_CLAN_SIDEPANEL_DRAW = 4396;
	int PROC_CLAN_SIDEPANEL_DRAW = 4397;
	int CLIENTSCRIPT_CLAN_SIDEPANEL_CHATMUTE = 4398;
	int PROC_CLAN_SIDEPANEL_DRAWCHANNEL = 4399;
	int CLIENTSCRIPT_CLAN_SIDEPANEL_OP = 4400;
	int PROC_CLAN_SIDEPANEL_OP = 4401;
	int CLIENTSCRIPT_CLAN_SIDEPANEL_REFRESH_INIT = 4402;
	int CLIENTSCRIPT_CLAN_SIDEPANEL_REFRESH_OP = 4403;
	int CLIENTSCRIPT_CLAN_SIDEPANEL_REFRESH_RESET = 4404;
	int PROC_CLAN_SIDEPANEL_REFRESH_RESET = 4405;
	int CLIENTSCRIPT_CLAN_EVENTS_INIT = 4406;
	int CLIENTSCRIPT_CLAN_EVENTS_ADDEVENT = 4407;
	int PROC_CLAN_EVENTS_CREATE_TEXT_COMPONENT = 4408;
	int PROC_CLAN_EVENTS_SETSIZE = 4409;
	int CLIENTSCRIPT_CLAN_EVENTS_CHECKSIZE = 4410;
	int PROC_CLAN_EVENTS_WIPEDISPLAY = 4411;
	int PROC_CLAN_EVENTS_HAS_PERMISSION = 4412;
	int CLIENTSCRIPT_CLAN_EVENTS_CREATE_INIT = 4413;
	int CLIENTSCRIPT_SCRIPT_4414 = 4414;
	int CLIENTSCRIPT_SCRIPT_4415 = 4415;
	int PROC_SCRIPT_4416 = 4416;
	int PROC_SETTINGS_INT_DATE = 4417;
	int CLIENTSCRIPT_CLAN_EVENTS_SELECTION_UPDATETEXT = 4418;
	int PROC_CLAN_EVENTS_SELECTION_UPDATETEXT = 4419;
	int CLIENTSCRIPT_CLAN_EVENTS_INT_UPDATETEXT = 4420;
	int PROC_CLAN_EVENTS_INT_UPDATETEXT = 4421;
	int PROC_SCRIPT_4422 = 4422;
	int PROC_SCRIPT_4423 = 4423;
	int CLIENTSCRIPT_SCRIPT_4424 = 4424;
	int CLIENTSCRIPT_SCRIPT_4425 = 4425;
	int PROC_SCRIPT_4426 = 4426;
	int PROC_SCRIPT_4427 = 4427;
	int CLIENTSCRIPT_SCRIPT_4428 = 4428;
	int PROC_CLAN_OUTFIT_DRAW_BUTTON = 4429;
	int CLIENTSCRIPT_CLAN_OUTFIT_BUTTON_CLICK = 4430;
	int CLIENTSCRIPT_CLAN_OUTFIT = 4431;
	int CLIENTSCRIPT_SCRIPT_4432 = 4432;
	int PROC_CLAN_OUTFIT_DRAW_COLOUR_ICONS = 4433;
	int CLIENTSCRIPT_CLAN_OUTFIT_REDRAW = 4434;
	int PROC_CLAN_OUTFIT_DRAW_ICON = 4435;
	int PROC_CLAN_OUTFIT_DRAW_COLOUR = 4436;
	int PROC_CLAN_OUTFIT_DRAW_ARROW = 4437;
	int CLIENTSCRIPT_CLAN_OUTFIT_ARROW_CLICK = 4438;
	int CLIENTSCRIPT_CLAN_OUTFIT_COLOUR_CLICK = 4439;
	int PROC_CLAN_OUTFIT_ICON_GET = 4440;
	int PROC_CLAN_OUTFIT_ICON_GET_ALL = 4441;
	int PROC_SCRIPT_4442 = 4442;
	int PROC_CLAN_OUTFIT_ICON_SET = 4443;
	int CLIENTSCRIPT_CLAN_ICON_CLICK = 4444;
	int CLIENTSCRIPT_CLAN_CREATE_SIDE_INIT = 4445;
	int CLIENTSCRIPT_CLAN_CREATE_MEMBER_INVITE = 4446;
	int CLIENTSCRIPT_SCRIPT_4447 = 4447;
	int CLIENTSCRIPT_CLAN_CREATE_SIDE_LIST_PLAYERS = 4448;
	int PROC_CLAN_CREATE_SIDE_LIST_PLAYERS = 4449;
	int PROC_CLAN_CREATE_PLAYER_COMPONENT = 4450;
	int CLIENTSCRIPT_SCRIPT_4451 = 4451;
	int PROC_CLAN_STONEBUTTON_TARGET_INIT = 4452;
	int CLIENTSCRIPT_SCRIPT_4453 = 4453;
	int CLIENTSCRIPT_SCRIPT_4454 = 4454;
	int CLIENTSCRIPT_CLAN_CREATE_TARGETMODE = 4455;
	int PROC_CLAN_PERMISSION_GET = 4456;
	int CLIENTSCRIPT_CLAN_PERMISSION_INIT = 4457;
	int PROC_CLAN_PERMISSIONS_SETSIZE = 4458;
	int CLIENTSCRIPT_SCRIPT_4459 = 4459;
	int PROC_CLAN_PERMISSIONS_CATEGORYTITLE = 4460;
	int CLIENTSCRIPT_CLAN_PERMISSIONS_INDEXOP = 4461;
	int CLIENTSCRIPT_CLAN_PERMISSIONS_TITLERESET = 4462;
	int PROC_CLAN_PERMISSIONS_BUTTONINIT = 4463;
	int CLIENTSCRIPT_CLAN_PERMISSIONS_BUTTONRESYNCH = 4464;
	int PROC_CLAN_PERMISSIONS_BUTTONRESYNCH = 4465;
	int CLIENTSCRIPT_CLAN_PERMISSIONS_BUTTONHOVER = 4466;
	int CLIENTSCRIPT_CLAN_PERMISSIONS_BUTTONOP = 4467;
	int CLIENTSCRIPT_CLAN_PERMISSIONS_BUTTONTIMEOUT = 4468;
	int CLIENTSCRIPT_CLAN_PERMISSION_SETTITLE = 4469;
	int PROC_CLAN_PERMISSION_SETTITLE = 4470;
	int CLIENTSCRIPT_SIDE_CHANNELS_INIT = 4471;
	int CLIENTSCRIPT_SCRIPT_4472 = 4472;
	int PROC_SCRIPT_4473 = 4473;
	int PROC_SIDE_CHANNELS_TABINIT = 4474;
	int PROC_SIDE_CHANNELS_SETTAB = 4475;
	int CLIENTSCRIPT_SIDE_CHANNELS_DRAWTAB = 4476;
	int PROC_SIDE_CHANNELS_DRAWTAB = 4477;
	int CLIENTSCRIPT_SIDE_CHANNELS_OPTAB = 4478;
	int PROC_MESLAYER_MODE18 = 4479;
	int CLIENTSCRIPT_MESLAYER_MODE19 = 4480;
	int PROC_SCRIPT_4481 = 4481;
	int CLIENTSCRIPT_CHAT_BUTTON_HOVER = 4482;
	int PROC_SCRIPT_4483 = 4483;
	int PROC_SCRIPT_4484 = 4484;
	int PROC_SCRIPT_4485 = 4485;
	int CLIENTSCRIPT_SCRIPT_4486 = 4486;
	int PROC_SCRIPT_4487 = 4487;
	int CLIENTSCRIPT_SCRIPT_4488 = 4488;
	int CLIENTSCRIPT_SCRIPT_4489 = 4489;
	int CLIENTSCRIPT_TOB_SCOREBOARD_INIT = 4490;
	int CLIENTSCRIPT_TOB_SCOREBOARD_TAB_UPDATE = 4491;
	int PROC_TOB_SCOREBOARD_TAB_UPDATE = 4492;
	int CLIENTSCRIPT_TOB_SCOREBOARD_TAB_SELECT = 4493;
	int PROC_SCRIPT_4494 = 4494;
	int PROC_TOB_PARTYDETAILS_BACK_BUTTON = 4495;
	int CLIENTSCRIPT_SCRIPT_4496 = 4496;
	int PROC_SCRIPT_4497 = 4497;
	int CLIENTSCRIPT_SCRIPT_4498 = 4498;
	int PROC_SCRIPT_4499 = 4499;
	int PROC_SCRIPT_4500 = 4500;
	int PROC_SCRIPT_4501 = 4501;
	int CLIENTSCRIPT_SCRIPT_4502 = 4502;
	int PROC_SCRIPT_4503 = 4503;
	int CLIENTSCRIPT_SCRIPT_4504 = 4504;
	int PROC_SCRIPT_4505 = 4505;
	int PROC_SCRIPT_4506 = 4506;
	int PROC_SCRIPT_4507 = 4507;
	int PROC_HEX_STRING_TO_INT = 4508;
	int CLIENTSCRIPT_SCRIPT_4509 = 4509;
	int PROC_SCRIPT_4510 = 4510;
	int PROC_ANCIENT_AUTOCAST_SPELLPOS = 4511;
	int PROC_STANDARD_AUTOCAST_SPELLPOS = 4512;
	int CLIENTSCRIPT_STAT_BOOSTS_HUD_UPDATE_ENABLED = 4513;
	int CLIENTSCRIPT_STAT_BOOSTS_HUD_UPDATE_DISPLAYS = 4514;
	int PROC_SCRIPT_4515 = 4515;
	int PROC_SCRIPT_4516 = 4516;
	int CLIENTSCRIPT_SCRIPT_4517 = 4517;
	int CLIENTSCRIPT_SCRIPT_4518 = 4518;
	int PROC_SCRIPT_4519 = 4519;
	int CLIENTSCRIPT_SCRIPT_4520 = 4520;
	int CLIENTSCRIPT_SCRIPT_4521 = 4521;
	int CLIENTSCRIPT_SCRIPT_4522 = 4522;
	int CLIENTSCRIPT_SCRIPT_4523 = 4523;
	int CLIENTSCRIPT_SCRIPT_4524 = 4524;
	int PROC_SCRIPT_4525 = 4525;
	int CLIENTSCRIPT_SCRIPT_4526 = 4526;
	int CLIENTSCRIPT_SCRIPT_4527 = 4527;
	int CLIENTSCRIPT_SCRIPT_4528 = 4528;
	int CLIENTSCRIPT_SCRIPT_4529 = 4529;
	int CLIENTSCRIPT_SCRIPT_4530 = 4530;
	int CLIENTSCRIPT_SCRIPT_4531 = 4531;
	int CLIENTSCRIPT_SCRIPT_4532 = 4532;
	int CLIENTSCRIPT_SCRIPT_4533 = 4533;
	int CLIENTSCRIPT_SCRIPT_4534 = 4534;
	int CLIENTSCRIPT_SCRIPT_4535 = 4535;
	int CLIENTSCRIPT_SCRIPT_4536 = 4536;
	int CLIENTSCRIPT_SCRIPT_4537 = 4537;
	int CLIENTSCRIPT_SCRIPT_4538 = 4538;
	int CLIENTSCRIPT_SCRIPT_4539 = 4539;
	int CLIENTSCRIPT_SCRIPT_4540 = 4540;
	int CLIENTSCRIPT_SCRIPT_4541 = 4541;
	int CLIENTSCRIPT_SCRIPT_4542 = 4542;
	int CLIENTSCRIPT_SCRIPT_4543 = 4543;
	int CLIENTSCRIPT_SCRIPT_4544 = 4544;
	int CLIENTSCRIPT_SCRIPT_4545 = 4545;
	int CLIENTSCRIPT_SCRIPT_4546 = 4546;
	int PROC_SCRIPT_4547 = 4547;
	int CLIENTSCRIPT_SCRIPT_4548 = 4548;
	int CLIENTSCRIPT_SCRIPT_4549 = 4549;
	int CLIENTSCRIPT_SCRIPT_4550 = 4550;
	int CLIENTSCRIPT_SCRIPT_4551 = 4551;
	int CLIENTSCRIPT_SCRIPT_4552 = 4552;
	int PROC_SCRIPT_4553 = 4553;
	int PROC_SCRIPT_4554 = 4554;
	int PROC_SCRIPT_4555 = 4555;
	int PROC_SCRIPT_4556 = 4556;
	int PROC_SCRIPT_4557 = 4557;
	int PROC_SCRIPT_4558 = 4558;
	int CLIENTSCRIPT_SCRIPT_4559 = 4559;
	int PROC_SCRIPT_4560 = 4560;
	int PROC_WELCOME_SCREEN_TOGGLE = 4561;
	int CLIENTSCRIPT_SCRIPT_4562 = 4562;
	int PROC_SCRIPT_4563 = 4563;
	int CLIENTSCRIPT_SETTINGS_PLAYER_ATTACK_OPTIONS = 4564;
	int CLIENTSCRIPT_SETTINGS_NPC_ATTACK_OPTIONS = 4565;
	int CLIENTSCRIPT_SETTINGS_FPS_LIMIT = 4566;
	int PROC_SETTINGS_SIDE_DROPDOWN_CREATE = 4567;
	int CLIENTSCRIPT_SETTINGS_SIDE_DROPDOWN_OPEN = 4568;
	int CLIENTSCRIPT_SETTINGS_SIDE_DROPDOWN_OP = 4569;
	int CLIENTSCRIPT_SETTINGS_SIDE_DROPDOWN_CLOSE = 4570;
	int PROC_SETTINGS_SIDE_DROPDOWN_CLOSE = 4571;
	int CLIENTSCRIPT_SETTINGS_SIDE_DROPDOWN_TIMER = 4572;
	int CLIENTSCRIPT_SETTINGS_SIDE_DROPDOWN_TRANSMIT = 4573;
	int PROC_SETTINGS_SIDE_DROPDOWN_UPDATE = 4574;
	int CLIENTSCRIPT_SETTINGS_SIDE_DROPDOWN_HOVER = 4575;
	int PROC_SCRIPT_4576 = 4576;
	int PROC_SETTINGS_TOGGLE_ROOF = 4577;
	int PROC_SCRIPT_4578 = 4578;
	int PROC_SCRIPT_4579 = 4579;
	int PROC_SETTINGS_ATTACK_STYLE = 4580;
	int PROC_SETTINGS_MOUSEOVER_TOOLTIPS = 4581;
	int PROC_SETTINGS_MOUSEOVER_TEXT = 4582;
	int PROC_SETTINGS_ANTIDRAG = 4583;
	int PROC_SETTINGS_REGEN_INDICATOR = 4584;
	int PROC_SETTINGS_HELPER_COX = 4585;
	int CLIENTSCRIPT_SETTINGS_CHAT_TIMESTAMPS = 4586;
	int PROC_SCRIPT_4587 = 4587;
	int PROC_SCRIPT_4588 = 4588;
	int PROC_SCRIPT_4589 = 4589;
	int PROC_SETTINGS_BUFF_BAR = 4590;
	int PROC_SETTINGS_BUFF_BAR_TOOLTIP = 4591;
	int PROC_SETTINGS_BUFF_LEAGUES = 4592;
	int PROC_SETTINGS_BUFF_HOME_TELEPORT = 4593;
	int PROC_SCRIPT_4594 = 4594;
	int PROC_SETTINGS_BUFF_TELEBLOCK = 4595;
	int PROC_SCRIPT_4596 = 4596;
	int PROC_SCRIPT_4597 = 4597;
	int PROC_SCRIPT_4598 = 4598;
	int PROC_SCRIPT_4599 = 4599;
	int PROC_SCRIPT_4600 = 4600;
	int PROC_SCRIPT_4601 = 4601;
	int PROC_SCRIPT_4602 = 4602;
	int PROC_SCRIPT_4603 = 4603;
	int PROC_SCRIPT_4604 = 4604;
	int PROC_SCRIPT_4605 = 4605;
	int PROC_SCRIPT_4606 = 4606;
	int PROC_SCRIPT_4607 = 4607;
	int PROC_SCRIPT_4608 = 4608;
	int PROC_SCRIPT_4609 = 4609;
	int PROC_SCRIPT_4610 = 4610;
	int PROC_SCRIPT_4611 = 4611;
	int PROC_SCRIPT_4612 = 4612;
	int PROC_SCRIPT_4613 = 4613;
	int PROC_SCRIPT_4614 = 4614;
	int PROC_SCRIPT_4615 = 4615;
	int CLIENTSCRIPT_SCRIPT_4616 = 4616;
	int PROC_SCRIPT_4617 = 4617;
	int CLIENTSCRIPT_ANTIDRAG_TOGGLE = 4618;
	int PROC_ANTIDRAG_TOGGLE = 4619;
	int CLIENTSCRIPT_SCRIPT_4620 = 4620;
	int CLIENTSCRIPT_SCRIPT_4621 = 4621;
	int CLIENTSCRIPT_SCRIPT_4622 = 4622;
	int PROC_SCRIPT_4623 = 4623;
	int PROC_TEST_SETUP_HIGHLIGHTS = 4624;
	int CLIENTSCRIPT_SCRIPT_4625 = 4625;
	int CLIENTSCRIPT_SCRIPT_4626 = 4626;
	int CLIENTSCRIPT_SCRIPT_4627 = 4627;
	int CLIENTSCRIPT_SCRIPT_4628 = 4628;
	int CLIENTSCRIPT_SCRIPT_4629 = 4629;
	int CLIENTSCRIPT_SCRIPT_4630 = 4630;
	int CLIENTSCRIPT_SCRIPT_4631 = 4631;
	int CLIENTSCRIPT_SCRIPT_4632 = 4632;
	int CLIENTSCRIPT_SCRIPT_4633 = 4633;
	int CLIENTSCRIPT_SCRIPT_4634 = 4634;
	int CLIENTSCRIPT_SCRIPT_4635 = 4635;
	int CLIENTSCRIPT_SCRIPT_4636 = 4636;
	int CLIENTSCRIPT_SCRIPT_4637 = 4637;
	int CLIENTSCRIPT_SCRIPT_4638 = 4638;
	int CLIENTSCRIPT_SCRIPT_4639 = 4639;
	int CLIENTSCRIPT_SCRIPT_4640 = 4640;
	int CLIENTSCRIPT_SCRIPT_4641 = 4641;
	int CLIENTSCRIPT_SCRIPT_4642 = 4642;
	int CLIENTSCRIPT_SCRIPT_4643 = 4643;
	int CLIENTSCRIPT_SCRIPT_4644 = 4644;
	int CLIENTSCRIPT_SCRIPT_4645 = 4645;
	int CLIENTSCRIPT_SCRIPT_4646 = 4646;
	int CLIENTSCRIPT_SCRIPT_4647 = 4647;
	int PROC_SCRIPT_4648 = 4648;
	int CLIENTSCRIPT_CHATTIMESTAMP = 4649;
	int PROC_SCRIPT_4650 = 4650;
	int PROC_MESCOORD = 4651;
	int CLIENTSCRIPT_CLIENT_TYPE_MES = 4652;
	int CLIENTSCRIPT_HELPER_COX_INIT = 4653;
	int CLIENTSCRIPT_HELPER_COX_OP = 4654;
	int CLIENTSCRIPT_HELPER_COX_TRANSMIT = 4655;
	int CLIENTSCRIPT_HELPER_COX_CONTENT = 4656;
	int PROC_HELPER_COX_CONTENT = 4657;
	int CLIENTSCRIPT_HELPER_COX_DATA = 4658;
	int CLIENTSCRIPT_HELPER_COX_TIMER = 4659;
	int PROC_HELPER_COX_DATA = 4660;
	int PROC_HELPER_COX_TIMER_CONVERT = 4661;
	int CLIENTSCRIPT_RAIDS_OVERLAY_CONTENT_TRANSMIT = 4662;
	int PROC_RAIDS_OVERLAY_CONTENT = 4663;
	int CLIENTSCRIPT_BUFF_BAR_BUFF_TIMER = 4664;
	int CLIENTSCRIPT_BUFF_BAR_BUFF_TRANSMIT = 4665;
	int PROC_SCRIPT_4666 = 4666;
	int PROC_BUFF_BAR_TIME_STRING = 4667;
	int PROC_BUFF_BAR_MAX_BUFFS = 4668;
	int PROC_BUFF_BAR_BUFF_AMOUNT = 4669;
	int PROC_BUFF_BAR_POSITION_INIT = 4670;
	int CLIENTSCRIPT_BUFF_BAR_POSITION_REVIEW = 4671;
	int PROC_BUFF_BAR_POSITION_REVIEW = 4672;
	int PROC_ENHANCED_BUFFS = 4673;
	int PROC_SCRIPT_4674 = 4674;
	int PROC_SCRIPT_4675 = 4675;
	int PROC_SCRIPT_4676 = 4676;
	int PROC_SCRIPT_4677 = 4677;
	int PROC_SCRIPT_4678 = 4678;
	int PROC_BUFF_BAR_GET_TRANSMIT = 4679;
	int PROC_SCRIPT_4680 = 4680;
	int PROC_SCRIPT_4681 = 4681;
	int PROC_BUFF_BAR_GET_NUMBER = 4682;
	int PROC_BUFF_BAR_BUFF_SHOW = 4683;
	int PROC_BUFF_BAR_BUFF_DISABLED = 4684;
	int CLIENTSCRIPT_SCRIPT_4685 = 4685;
	int PROC_SCRIPT_4686 = 4686;
	int PROC_SCRIPT_4687 = 4687;
	int PROC_HELPER_INIT = 4688;
	int CLIENTSCRIPT_HELPER_SETUP = 4689;
	int CLIENTSCRIPT_HELPER_BACKGROUND = 4690;
	int PROC_HELPER_BACKGROUND = 4691;
	int CLIENTSCRIPT_SCRIPT_4692 = 4692;
	int CLIENTSCRIPT_SCRIPT_4693 = 4693;
	int CLIENTSCRIPT_SCRIPT_4694 = 4694;
	int PROC_HELPER_GENERIC_SETUP = 4695;
	int CLIENTSCRIPT_HELPER_GENERIC_OP = 4696;
	int PROC_HELPER_GENERIC_RESET_OP = 4697;
	int PROC_HELPER_GENERIC_RESET = 4698;
	int PROC_HELPER_GENERIC_UPDATE_TEXT = 4699;
	int PROC_SCRIPT_4700 = 4700;
	int PROC_SCRIPT_4701 = 4701;
	int PROC_HELPER_GENERIC_SET_HEIGHT = 4702;
	int PROC_SCRIPT_4703 = 4703;
	int PROC_HELPER_GENERIC_SET_SIZE = 4704;
	int PROC_HELPER_GENERIC_ADD_TITLE = 4705;
	int PROC_HELPER_GENERIC_ADD_TEXT = 4706;
	int PROC_HELPER_GENERIC_ADD_DATA = 4707;
	int PROC_HELPER_GENERIC_DRAW_TITLE = 4708;
	int PROC_HELPER_GENERIC_DRAW_TEXT = 4709;
	int PROC_HELPER_GENERIC_DRAW_DATA = 4710;
	int PROC_HELPER_GENERIC_SET_TYPE = 4711;
	int PROC_HELPER_GENERIC_GET_TYPE = 4712;
	int PROC_HELPER_GENERIC_SET_STRING = 4713;
	int PROC_HELPER_GENERIC_GET_STRING = 4714;
	int CLIENTSCRIPT_HELPER_NEW_TOPLEVEL = 4715;
	int CLIENTSCRIPT_HEALTH_REGEN_TIMER = 4716;
	int CLIENTSCRIPT_SCRIPT_4717 = 4717;
	int PROC_HEALTH_REGEN_TIMER = 4718;
	int CLIENTSCRIPT_SCRIPT_4719 = 4719;
	int CLIENTSCRIPT_SCRIPT_4720 = 4720;
	int CLIENTSCRIPT_SPEC_REGEN_TIMER = 4721;
	int CLIENTSCRIPT_SCRIPT_4722 = 4722;
	int PROC_SPEC_REGEN_TIMER = 4723;
	int CLIENTSCRIPT_SCRIPT_4724 = 4724;
	int CLIENTSCRIPT_SCRIPT_4725 = 4725;
	int PROC_SCRIPT_4726 = 4726;
	int PROC_MOUSEOVER_TEXT = 4727;
	int PROC_MOUSEOVER_TOOLTIP = 4728;
	int PROC_SCRIPT_4729 = 4729;
	int CLIENTSCRIPT_SCRIPT_4730 = 4730;
	int PROC_SCRIPT_4731 = 4731;
	int PROC_SCRIPT_4732 = 4732;
	int PROC_SCRIPT_4733 = 4733;
	int PROC_SCRIPT_4734 = 4734;
	int PROC_SCRIPT_4735 = 4735;
	int PROC_SCRIPT_4736 = 4736;
	int PROC_SCRIPT_4737 = 4737;
	int PROC_SCRIPT_4738 = 4738;
	int PROC_SCRIPT_4739 = 4739;
	int PROC_SCRIPT_4740 = 4740;
	int CLIENTSCRIPT_SCRIPT_4741 = 4741;
	int PROC_SCRIPT_4742 = 4742;
	int PROC_SCRIPT_4743 = 4743;
	int CLIENTSCRIPT_HIGHLIGHT_NPC_ON = 4744;
	int CLIENTSCRIPT_HIGHLIGHT_NPC_OFF = 4745;
	int CLIENTSCRIPT_HIGHLIGHT_NPCTYPE_ON = 4746;
	int CLIENTSCRIPT_HIGHLIGHT_NPCTYPE_OFF = 4747;
	int CLIENTSCRIPT_HIGHLIGHT_LOC_ON = 4748;
	int CLIENTSCRIPT_HIGHLIGHT_LOC_OFF = 4749;
	int CLIENTSCRIPT_HIGHLIGHT_LOCTYPE_ON = 4750;
	int CLIENTSCRIPT_HIGHLIGHT_LOCTYPE_OFF = 4751;
	int CLIENTSCRIPT_HIGHLIGHT_OBJ_ON = 4752;
	int CLIENTSCRIPT_HIGHLIGHT_OBJ_OFF = 4753;
	int CLIENTSCRIPT_HIGHLIGHT_OBJTYPE_ON = 4754;
	int CLIENTSCRIPT_HIGHLIGHT_OBJTYPE_OFF = 4755;
	int CLIENTSCRIPT_HIGHLIGHT_PLAYER_ON = 4756;
	int CLIENTSCRIPT_HIGHLIGHT_PLAYER_OFF = 4757;
	int CLIENTSCRIPT_HIGHLIGHT_TILE_ON = 4758;
	int CLIENTSCRIPT_HIGHLIGHT_TILE_OFF = 4759;
	int PROC_SCRIPT_4760 = 4760;
	int CLIENTSCRIPT_SCRIPT_4761 = 4761;
	int CLIENTSCRIPT_SCRIPT_4762 = 4762;
	int CLIENTSCRIPT_SCRIPT_4763 = 4763;
	int CLIENTSCRIPT_SCRIPT_4764 = 4764;
	int PROC_SCRIPT_4765 = 4765;
	int PROC_SCRIPT_4766 = 4766;
	int PROC_SCRIPT_4767 = 4767;
	int PROC_CA_CREATE_DROPDOWN = 4768;
	int PROC_SCRIPT_4769 = 4769;
	int CLIENTSCRIPT_SCRIPT_4770 = 4770;
	int CLIENTSCRIPT_SCRIPT_4771 = 4771;
	int CLIENTSCRIPT_CA_INFO_MOUSEOVER = 4772;
	int CLIENTSCRIPT_CA_INFO_MOUSELEAVE = 4773;
	int PROC_SCRIPT_4774 = 4774;
	int PROC_SCRIPT_4775 = 4775;
	int PROC_SCRIPT_4776 = 4776;
	int PROC_SCRIPT_4777 = 4777;
	int PROC_CA_SPECIFIC_KILLCOUNT = 4778;
	int PROC_SCRIPT_4779 = 4779;
	int PROC_CA_SPECIFIC_TASKCOUNT = 4780;
	int CLIENTSCRIPT_CA_TASKS_PROGRESS_BAR = 4781;
	int PROC_CA_TASKS_PROGRESS_BAR = 4782;
	int PROC_SCRIPT_4783 = 4783;
	int PROC_CA_TASKS_COMPLETED_TIER = 4784;
	int PROC_CA_TIER_COMPLETION_STATUS = 4785;
	int PROC_CA_TASKS_BOSS_TOTAL = 4786;
	int PROC_CA_TASKS_BOSS_TOTAL_TIER = 4787;
	int PROC_CA_TASKS_TOTAL = 4788;
	int PROC_CA_TASKS_TIER_TOTAL = 4789;
	int PROC_CA_TIER_STATUS = 4790;
	int CLIENTSCRIPT_CA_BOSSES_INIT = 4791;
	int PROC_WORLDMAP_TOOLTIP_OVERRIDE = 4792;
	int PROC_CA_SEARCHBAR_CREATE = 4793;
	int PROC_CA_SEARCHBAR_SETUP_OP = 4794;
	int CLIENTSCRIPT_CA_BOSSES_CLEAR_SEARCH = 4795;
	int CLIENTSCRIPT_CA_SETTINGS_SHOW_KEYBOARD = 4796;
	int CLIENTSCRIPT_CA_SEARCHBAR_OP = 4797;
	int CLIENTSCRIPT_CA_SEARCHBAR_KEYPRESS = 4798;
	int PROC_CA_SEARCHBAR_SET_TEXT = 4799;
	int PROC_CA_BOSSES_DRAW_LIST = 4800;
	int CLIENTSCRIPT_CA_BOSS_SELECT = 4801;
	int PROC_CA_BOSS_ENABLE_SEARCH = 4802;
	int PROC_CA_BOSS_DISABLE_SEARCH = 4803;
	int CLIENTSCRIPT_CA_OVERVIEW_INIT = 4804;
	int PROC_CA_OVERVIEW_DRAW_INTERFACE = 4805;
	int PROC_SCRIPT_4806 = 4806;
	int PROC_SCRIPT_4807 = 4807;
	int PROC_CA_OVERVIEW_CREATE_PERSONAL = 4808;
	int PROC_SCRIPT_4809 = 4809;
	int PROC_SCRIPT_4810 = 4810;
	int CLIENTSCRIPT_CA_REWARDS_INIT = 4811;
	int CLIENTSCRIPT_CA_REWARDS_TIERS_INIT = 4812;
	int PROC_CA_REWARDS_TIERS_INIT = 4813;
	int PROC_SCRIPT_4814 = 4814;
	int PROC_SCRIPT_4815 = 4815;
	int CLIENTSCRIPT_CA_TASKS_INIT = 4816;
	int CLIENTSCRIPT_CA_TASKS_DRAW_LIST = 4817;
	int PROC_CA_TASKS_DRAW_LIST = 4818;
	int PROC_CA_TASK_DISPLAY = 4819;
	int CLIENTSCRIPT_CA_INFO_HOVER = 4820;
	int CLIENTSCRIPT_CA_TASK_FILTER_INIT = 4821;
	int CLIENTSCRIPT_CA_TASK_UPDATETEXT = 4822;
	int PROC_CA_TASK_FILTER_UPDATETEXT = 4823;
	int PROC_SCRIPT_4824 = 4824;
	int PROC_SCRIPT_4825 = 4825;
	int CLIENTSCRIPT_CA_TASK_FILTER_OPEN = 4826;
	int CLIENTSCRIPT_CA_SETUP_DISPLAY_HOVER = 4827;
	int PROC_CA_SETUP_DISPLAY_HOVEROFF = 4828;
	int PROC_CA_SETUP_DISPLAY_HOVERDISABLE = 4829;
	int CLIENTSCRIPT_CA_SETUP_DISPLAY_DROPDOWN_HOVER = 4830;
	int PROC_SCRIPT_4831 = 4831;
	int CLIENTSCRIPT_CA_TASK_FILTER_CLOSE = 4832;
	int PROC_CA_TASK_UPDATETEXT = 4833;
	int PROC_SCRIPT_4834 = 4834;
	int CLIENTSCRIPT_CA_BOSS_INIT = 4835;
	int PROC_CA_BOSS_SET_NAME = 4836;
	int PROC_CA_BOSS_INIT_WIKI = 4837;
	int CLIENTSCRIPT_CA_BOSS_LOOKUP = 4838;
	int PROC_CA_BOSS_INIT_MAP = 4839;
	int PROC_CA_BOSS_INIT_COLLECTION = 4840;
	int PROC_SCRIPT_4841 = 4841;
	int PROC_CA_BOSS_INIT_IMAGE = 4842;
	int PROC_CA_BOSS_INIT_STATS = 4843;
	int PROC_CA_BOSS_INIT_BUTTONS = 4844;
	int CLIENTSCRIPT_CA_BOSS_DRAW_TABS_ALL = 4845;
	int PROC_CA_BOSS_DRAW_TABS_ALL = 4846;
	int CLIENTSCRIPT_CA_BOSS_TAB_CLICK = 4847;
	int PROC_CA_BOSS_TAB_DETAILS = 4848;
	int PROC_DYNAMIC_STONE_BUTTON_FILLED = 4849;
	int WORLDMAPELEMENTMOUSEREPEAT_697 = 4850;
	int WORLDMAPELEMENTMOUSELEAVE_697 = 4851;
	int CLIENTSCRIPT_SCRIPT_4852 = 4852;
	int PROC_SCRIPT_4853 = 4853;
	int CLIENTSCRIPT_SCRIPT_4854 = 4854;
	int CLIENTSCRIPT_SCRIPT_4855 = 4855;
	int PROC_SCRIPT_4856 = 4856;
	int CLIENTSCRIPT_SCRIPT_4857 = 4857;
	int PROC_SCRIPT_4858 = 4858;
	int CLIENTSCRIPT_SCRIPT_4859 = 4859;
	int PROC_SCRIPT_4860 = 4860;
	int CLIENTSCRIPT_SCRIPT_4861 = 4861;
	int PROC_SCRIPT_4862 = 4862;
	int WORLDMAPELEMENTMOUSEREPEAT_700 = 4863;
	int WORLDMAPELEMENTMOUSEREPEAT_701 = 4864;
	int WORLDMAPELEMENTMOUSEREPEAT_702 = 4865;
	int WORLDMAPELEMENTMOUSEREPEAT_703 = 4866;
	int WORLDMAPELEMENTMOUSEREPEAT_704 = 4867;
	int WORLDMAPELEMENTMOUSEREPEAT_705 = 4868;
	int WORLDMAPELEMENTMOUSEREPEAT_706 = 4869;
	int WORLDMAPELEMENTMOUSEREPEAT_707 = 4870;
	int WORLDMAPELEMENTMOUSEREPEAT_708 = 4871;
	int WORLDMAPELEMENTMOUSEREPEAT_709 = 4872;
	int WORLDMAPELEMENTMOUSEREPEAT_710 = 4873;
	int WORLDMAPELEMENTMOUSEREPEAT_711 = 4874;
	int WORLDMAPELEMENTMOUSEREPEAT_712 = 4875;
	int WORLDMAPELEMENTMOUSEREPEAT_713 = 4876;
	int WORLDMAPELEMENTMOUSEREPEAT_714 = 4877;
	int WORLDMAPELEMENTMOUSEREPEAT_715 = 4878;
	int WORLDMAPELEMENTMOUSEREPEAT_716 = 4879;
	int WORLDMAPELEMENTMOUSEREPEAT_717 = 4880;
	int WORLDMAPELEMENTMOUSEREPEAT_718 = 4881;
	int WORLDMAPELEMENTMOUSEREPEAT_719 = 4882;
	int WORLDMAPELEMENTMOUSEREPEAT_720 = 4883;
	int WORLDMAPELEMENTMOUSEREPEAT_721 = 4884;
	int WORLDMAPELEMENTMOUSEREPEAT_722 = 4885;
	int WORLDMAPELEMENTMOUSEREPEAT_723 = 4886;
	int WORLDMAPELEMENTMOUSEREPEAT_724 = 4887;
	int WORLDMAPELEMENTMOUSEREPEAT_725 = 4888;
	int WORLDMAPELEMENTMOUSEREPEAT_726 = 4889;
	int WORLDMAPELEMENTMOUSEREPEAT_727 = 4890;
	int WORLDMAPELEMENTMOUSEREPEAT_728 = 4891;
	int WORLDMAPELEMENTMOUSEREPEAT_729 = 4892;
	int WORLDMAPELEMENTMOUSEREPEAT_730 = 4893;
	int WORLDMAPELEMENTMOUSEREPEAT_731 = 4894;
	int WORLDMAPELEMENTMOUSEREPEAT_732 = 4895;
	int WORLDMAPELEMENTMOUSEREPEAT_733 = 4896;
	int WORLDMAPELEMENTMOUSEREPEAT_734 = 4897;
	int WORLDMAPELEMENTMOUSEREPEAT_735 = 4898;
	int WORLDMAPELEMENTMOUSEREPEAT_736 = 4899;
	int WORLDMAPELEMENTMOUSEREPEAT_737 = 4900;
	int WORLDMAPELEMENTMOUSEREPEAT_738 = 4901;
	int WORLDMAPELEMENTMOUSEREPEAT_739 = 4902;
	int WORLDMAPELEMENTMOUSEREPEAT_740 = 4903;
	int WORLDMAPELEMENTMOUSEREPEAT_741 = 4904;
	int WORLDMAPELEMENTMOUSEREPEAT_742 = 4905;
	int WORLDMAPELEMENTMOUSEREPEAT_743 = 4906;
	int WORLDMAPELEMENTMOUSEREPEAT_744 = 4907;
	int WORLDMAPELEMENTMOUSEREPEAT_745 = 4908;
	int WORLDMAPELEMENTMOUSEREPEAT_746 = 4909;
	int WORLDMAPELEMENTMOUSEREPEAT_747 = 4910;
	int WORLDMAPELEMENTMOUSEREPEAT_748 = 4911;
	int WORLDMAPELEMENTMOUSEREPEAT_749 = 4912;
	int WORLDMAPELEMENTMOUSEREPEAT_750 = 4913;
	int WORLDMAPELEMENTMOUSEREPEAT_751 = 4914;
	int WORLDMAPELEMENTMOUSEREPEAT_752 = 4915;
	int WORLDMAPELEMENTMOUSEREPEAT_753 = 4916;
	int WORLDMAPELEMENTMOUSEREPEAT_754 = 4917;
	int WORLDMAPELEMENTMOUSEREPEAT_755 = 4918;
	int WORLDMAPELEMENTMOUSEREPEAT_756 = 4919;
	int WORLDMAPELEMENTMOUSEREPEAT_757 = 4920;
	int WORLDMAPELEMENTMOUSEREPEAT_758 = 4921;
	int WORLDMAPELEMENTMOUSEREPEAT_759 = 4922;
	int WORLDMAPELEMENTMOUSEREPEAT_760 = 4923;
	int WORLDMAPELEMENTMOUSEREPEAT_761 = 4924;
	int WORLDMAPELEMENTMOUSEREPEAT_762 = 4925;
	int WORLDMAPELEMENTMOUSEREPEAT_763 = 4926;
	int WORLDMAPELEMENTMOUSEREPEAT_764 = 4927;
	int WORLDMAPELEMENTMOUSEREPEAT_765 = 4928;
	int WORLDMAPELEMENTMOUSEREPEAT_766 = 4929;
	int WORLDMAPELEMENTMOUSEREPEAT_767 = 4930;
	int WORLDMAPELEMENTMOUSEREPEAT_768 = 4931;
	int WORLDMAPELEMENTMOUSEREPEAT_769 = 4932;
	int WORLDMAPELEMENTMOUSEREPEAT_770 = 4933;
	int WORLDMAPELEMENTMOUSEREPEAT_771 = 4934;
	int WORLDMAPELEMENTMOUSEREPEAT_772 = 4935;
	int WORLDMAPELEMENTMOUSEREPEAT_773 = 4936;
	int WORLDMAPELEMENTMOUSEREPEAT_774 = 4937;
	int WORLDMAPELEMENTMOUSEREPEAT_775 = 4938;
	int WORLDMAPELEMENTMOUSEREPEAT_776 = 4939;
	int WORLDMAPELEMENTMOUSEREPEAT_777 = 4940;
	int WORLDMAPELEMENTMOUSEREPEAT_778 = 4941;
	int WORLDMAPELEMENTMOUSEREPEAT_779 = 4942;
	int WORLDMAPELEMENTMOUSEREPEAT_780 = 4943;
	int WORLDMAPELEMENTMOUSEREPEAT_781 = 4944;
	int WORLDMAPELEMENTMOUSEREPEAT_782 = 4945;
	int WORLDMAPELEMENTMOUSEREPEAT_783 = 4946;
	int WORLDMAPELEMENTMOUSEREPEAT_784 = 4947;
	int WORLDMAPELEMENTMOUSEREPEAT_785 = 4948;
	int WORLDMAPELEMENTMOUSEREPEAT_786 = 4949;
	int WORLDMAPELEMENTMOUSEREPEAT_787 = 4950;
	int WORLDMAPELEMENTMOUSEREPEAT_788 = 4951;
	int WORLDMAPELEMENTMOUSEREPEAT_789 = 4952;
	int WORLDMAPELEMENTMOUSEREPEAT_790 = 4953;
	int WORLDMAPELEMENTMOUSEREPEAT_791 = 4954;
	int WORLDMAPELEMENTMOUSEREPEAT_792 = 4955;
	int WORLDMAPELEMENTMOUSEREPEAT_793 = 4956;
	int WORLDMAPELEMENTMOUSEREPEAT_794 = 4957;
	int WORLDMAPELEMENTMOUSEREPEAT_795 = 4958;
	int WORLDMAPELEMENTMOUSEREPEAT_796 = 4959;
	int WORLDMAPELEMENTMOUSEREPEAT_797 = 4960;
	int WORLDMAPELEMENTMOUSEREPEAT_798 = 4961;
	int WORLDMAPELEMENTMOUSEREPEAT_799 = 4962;
	int WORLDMAPELEMENTMOUSEREPEAT_800 = 4963;
	int WORLDMAPELEMENTMOUSEREPEAT_801 = 4964;
	int WORLDMAPELEMENTMOUSEREPEAT_802 = 4965;
	int WORLDMAPELEMENTMOUSEREPEAT_803 = 4966;
	int WORLDMAPELEMENTMOUSEREPEAT_804 = 4967;
	int WORLDMAPELEMENTMOUSEREPEAT_805 = 4968;
	int WORLDMAPELEMENTMOUSEREPEAT_806 = 4969;
	int WORLDMAPELEMENTMOUSEREPEAT_807 = 4970;
	int WORLDMAPELEMENTMOUSEREPEAT_808 = 4971;
	int WORLDMAPELEMENTMOUSEREPEAT_809 = 4972;
	int WORLDMAPELEMENTMOUSEREPEAT_810 = 4973;
	int WORLDMAPELEMENTMOUSEREPEAT_811 = 4974;
	int WORLDMAPELEMENTMOUSEREPEAT_812 = 4975;
	int WORLDMAPELEMENTMOUSEREPEAT_813 = 4976;
	int WORLDMAPELEMENTMOUSEREPEAT_814 = 4977;
	int WORLDMAPELEMENTMOUSEREPEAT_815 = 4978;
	int WORLDMAPELEMENTMOUSEREPEAT_816 = 4979;
	int WORLDMAPELEMENTMOUSEREPEAT_817 = 4980;
	int WORLDMAPELEMENTMOUSEREPEAT_818 = 4981;
	int WORLDMAPELEMENTMOUSEREPEAT_819 = 4982;
	int WORLDMAPELEMENTMOUSEREPEAT_820 = 4983;
	int WORLDMAPELEMENTMOUSEREPEAT_821 = 4984;
	int WORLDMAPELEMENTMOUSEREPEAT_822 = 4985;
	int WORLDMAPELEMENTMOUSEREPEAT_823 = 4986;
	int WORLDMAPELEMENTMOUSEREPEAT_824 = 4987;
	int WORLDMAPELEMENTMOUSEREPEAT_825 = 4988;
	int WORLDMAPELEMENTMOUSEREPEAT_826 = 4989;
	int WORLDMAPELEMENTMOUSEREPEAT_827 = 4990;
	int WORLDMAPELEMENTMOUSEREPEAT_828 = 4991;
	int WORLDMAPELEMENTMOUSEREPEAT_829 = 4992;
	int WORLDMAPELEMENTMOUSEREPEAT_830 = 4993;
	int WORLDMAPELEMENTMOUSEREPEAT_831 = 4994;
	int WORLDMAPELEMENTMOUSEREPEAT_832 = 4995;
	int WORLDMAPELEMENTMOUSEREPEAT_833 = 4996;
	int WORLDMAPELEMENTMOUSEREPEAT_834 = 4997;
	int WORLDMAPELEMENTMOUSEREPEAT_835 = 4998;
	int WORLDMAPELEMENTMOUSEREPEAT_836 = 4999;
	int WORLDMAPELEMENTMOUSEREPEAT_837 = 5000;
	int WORLDMAPELEMENTMOUSEREPEAT_838 = 5001;
	int WORLDMAPELEMENTMOUSEREPEAT_839 = 5002;
	int WORLDMAPELEMENTMOUSEREPEAT_840 = 5003;
	int WORLDMAPELEMENTMOUSEREPEAT_841 = 5004;
	int WORLDMAPELEMENTMOUSEREPEAT_842 = 5005;
	int WORLDMAPELEMENTMOUSEREPEAT_843 = 5006;
	int WORLDMAPELEMENTMOUSEREPEAT_844 = 5007;
	int WORLDMAPELEMENTMOUSEREPEAT_845 = 5008;
	int WORLDMAPELEMENTMOUSEREPEAT_846 = 5009;
	int WORLDMAPELEMENTMOUSEREPEAT_847 = 5010;
	int WORLDMAPELEMENTMOUSEREPEAT_848 = 5011;
	int WORLDMAPELEMENTMOUSEREPEAT_849 = 5012;
	int WORLDMAPELEMENTMOUSEREPEAT_850 = 5013;
	int WORLDMAPELEMENTMOUSELEAVE_700 = 5014;
	int WORLDMAPELEMENTMOUSELEAVE_701 = 5015;
	int WORLDMAPELEMENTMOUSELEAVE_702 = 5016;
	int WORLDMAPELEMENTMOUSELEAVE_703 = 5017;
	int WORLDMAPELEMENTMOUSELEAVE_704 = 5018;
	int WORLDMAPELEMENTMOUSELEAVE_705 = 5019;
	int WORLDMAPELEMENTMOUSELEAVE_706 = 5020;
	int WORLDMAPELEMENTMOUSELEAVE_707 = 5021;
	int WORLDMAPELEMENTMOUSELEAVE_708 = 5022;
	int WORLDMAPELEMENTMOUSELEAVE_709 = 5023;
	int WORLDMAPELEMENTMOUSELEAVE_710 = 5024;
	int WORLDMAPELEMENTMOUSELEAVE_711 = 5025;
	int WORLDMAPELEMENTMOUSELEAVE_712 = 5026;
	int WORLDMAPELEMENTMOUSELEAVE_713 = 5027;
	int WORLDMAPELEMENTMOUSELEAVE_714 = 5028;
	int WORLDMAPELEMENTMOUSELEAVE_715 = 5029;
	int WORLDMAPELEMENTMOUSELEAVE_716 = 5030;
	int WORLDMAPELEMENTMOUSELEAVE_717 = 5031;
	int WORLDMAPELEMENTMOUSELEAVE_718 = 5032;
	int WORLDMAPELEMENTMOUSELEAVE_719 = 5033;
	int WORLDMAPELEMENTMOUSELEAVE_720 = 5034;
	int WORLDMAPELEMENTMOUSELEAVE_721 = 5035;
	int WORLDMAPELEMENTMOUSELEAVE_722 = 5036;
	int WORLDMAPELEMENTMOUSELEAVE_723 = 5037;
	int WORLDMAPELEMENTMOUSELEAVE_724 = 5038;
	int WORLDMAPELEMENTMOUSELEAVE_725 = 5039;
	int WORLDMAPELEMENTMOUSELEAVE_726 = 5040;
	int WORLDMAPELEMENTMOUSELEAVE_727 = 5041;
	int WORLDMAPELEMENTMOUSELEAVE_728 = 5042;
	int WORLDMAPELEMENTMOUSELEAVE_729 = 5043;
	int WORLDMAPELEMENTMOUSELEAVE_730 = 5044;
	int WORLDMAPELEMENTMOUSELEAVE_731 = 5045;
	int WORLDMAPELEMENTMOUSELEAVE_732 = 5046;
	int WORLDMAPELEMENTMOUSELEAVE_733 = 5047;
	int WORLDMAPELEMENTMOUSELEAVE_734 = 5048;
	int WORLDMAPELEMENTMOUSELEAVE_735 = 5049;
	int WORLDMAPELEMENTMOUSELEAVE_736 = 5050;
	int WORLDMAPELEMENTMOUSELEAVE_737 = 5051;
	int WORLDMAPELEMENTMOUSELEAVE_738 = 5052;
	int WORLDMAPELEMENTMOUSELEAVE_739 = 5053;
	int WORLDMAPELEMENTMOUSELEAVE_740 = 5054;
	int WORLDMAPELEMENTMOUSELEAVE_741 = 5055;
	int WORLDMAPELEMENTMOUSELEAVE_742 = 5056;
	int WORLDMAPELEMENTMOUSELEAVE_743 = 5057;
	int WORLDMAPELEMENTMOUSELEAVE_744 = 5058;
	int WORLDMAPELEMENTMOUSELEAVE_745 = 5059;
	int WORLDMAPELEMENTMOUSELEAVE_746 = 5060;
	int WORLDMAPELEMENTMOUSELEAVE_747 = 5061;
	int WORLDMAPELEMENTMOUSELEAVE_748 = 5062;
	int WORLDMAPELEMENTMOUSELEAVE_749 = 5063;
	int WORLDMAPELEMENTMOUSELEAVE_750 = 5064;
	int WORLDMAPELEMENTMOUSELEAVE_751 = 5065;
	int WORLDMAPELEMENTMOUSELEAVE_752 = 5066;
	int WORLDMAPELEMENTMOUSELEAVE_753 = 5067;
	int WORLDMAPELEMENTMOUSELEAVE_754 = 5068;
	int WORLDMAPELEMENTMOUSELEAVE_755 = 5069;
	int WORLDMAPELEMENTMOUSELEAVE_756 = 5070;
	int WORLDMAPELEMENTMOUSELEAVE_757 = 5071;
	int WORLDMAPELEMENTMOUSELEAVE_758 = 5072;
	int WORLDMAPELEMENTMOUSELEAVE_759 = 5073;
	int WORLDMAPELEMENTMOUSELEAVE_760 = 5074;
	int WORLDMAPELEMENTMOUSELEAVE_761 = 5075;
	int WORLDMAPELEMENTMOUSELEAVE_762 = 5076;
	int WORLDMAPELEMENTMOUSELEAVE_763 = 5077;
	int WORLDMAPELEMENTMOUSELEAVE_764 = 5078;
	int WORLDMAPELEMENTMOUSELEAVE_765 = 5079;
	int WORLDMAPELEMENTMOUSELEAVE_766 = 5080;
	int WORLDMAPELEMENTMOUSELEAVE_767 = 5081;
	int WORLDMAPELEMENTMOUSELEAVE_768 = 5082;
	int WORLDMAPELEMENTMOUSELEAVE_769 = 5083;
	int WORLDMAPELEMENTMOUSELEAVE_770 = 5084;
	int WORLDMAPELEMENTMOUSELEAVE_771 = 5085;
	int WORLDMAPELEMENTMOUSELEAVE_772 = 5086;
	int WORLDMAPELEMENTMOUSELEAVE_773 = 5087;
	int WORLDMAPELEMENTMOUSELEAVE_774 = 5088;
	int WORLDMAPELEMENTMOUSELEAVE_775 = 5089;
	int WORLDMAPELEMENTMOUSELEAVE_776 = 5090;
	int WORLDMAPELEMENTMOUSELEAVE_777 = 5091;
	int WORLDMAPELEMENTMOUSELEAVE_778 = 5092;
	int WORLDMAPELEMENTMOUSELEAVE_779 = 5093;
	int WORLDMAPELEMENTMOUSELEAVE_780 = 5094;
	int WORLDMAPELEMENTMOUSELEAVE_781 = 5095;
	int WORLDMAPELEMENTMOUSELEAVE_782 = 5096;
	int WORLDMAPELEMENTMOUSELEAVE_783 = 5097;
	int WORLDMAPELEMENTMOUSELEAVE_784 = 5098;
	int WORLDMAPELEMENTMOUSELEAVE_785 = 5099;
	int WORLDMAPELEMENTMOUSELEAVE_786 = 5100;
	int WORLDMAPELEMENTMOUSELEAVE_787 = 5101;
	int WORLDMAPELEMENTMOUSELEAVE_788 = 5102;
	int WORLDMAPELEMENTMOUSELEAVE_789 = 5103;
	int WORLDMAPELEMENTMOUSELEAVE_790 = 5104;
	int WORLDMAPELEMENTMOUSELEAVE_791 = 5105;
	int WORLDMAPELEMENTMOUSELEAVE_792 = 5106;
	int WORLDMAPELEMENTMOUSELEAVE_793 = 5107;
	int WORLDMAPELEMENTMOUSELEAVE_794 = 5108;
	int WORLDMAPELEMENTMOUSELEAVE_795 = 5109;
	int WORLDMAPELEMENTMOUSELEAVE_796 = 5110;
	int WORLDMAPELEMENTMOUSELEAVE_797 = 5111;
	int WORLDMAPELEMENTMOUSELEAVE_798 = 5112;
	int WORLDMAPELEMENTMOUSELEAVE_799 = 5113;
	int WORLDMAPELEMENTMOUSELEAVE_800 = 5114;
	int WORLDMAPELEMENTMOUSELEAVE_801 = 5115;
	int WORLDMAPELEMENTMOUSELEAVE_802 = 5116;
	int WORLDMAPELEMENTMOUSELEAVE_803 = 5117;
	int WORLDMAPELEMENTMOUSELEAVE_804 = 5118;
	int WORLDMAPELEMENTMOUSELEAVE_805 = 5119;
	int WORLDMAPELEMENTMOUSELEAVE_806 = 5120;
	int WORLDMAPELEMENTMOUSELEAVE_807 = 5121;
	int WORLDMAPELEMENTMOUSELEAVE_808 = 5122;
	int WORLDMAPELEMENTMOUSELEAVE_809 = 5123;
	int WORLDMAPELEMENTMOUSELEAVE_810 = 5124;
	int WORLDMAPELEMENTMOUSELEAVE_811 = 5125;
	int WORLDMAPELEMENTMOUSELEAVE_812 = 5126;
	int WORLDMAPELEMENTMOUSELEAVE_813 = 5127;
	int WORLDMAPELEMENTMOUSELEAVE_814 = 5128;
	int WORLDMAPELEMENTMOUSELEAVE_815 = 5129;
	int WORLDMAPELEMENTMOUSELEAVE_816 = 5130;
	int WORLDMAPELEMENTMOUSELEAVE_817 = 5131;
	int WORLDMAPELEMENTMOUSELEAVE_818 = 5132;
	int WORLDMAPELEMENTMOUSELEAVE_819 = 5133;
	int WORLDMAPELEMENTMOUSELEAVE_820 = 5134;
	int WORLDMAPELEMENTMOUSELEAVE_821 = 5135;
	int WORLDMAPELEMENTMOUSELEAVE_822 = 5136;
	int WORLDMAPELEMENTMOUSELEAVE_823 = 5137;
	int WORLDMAPELEMENTMOUSELEAVE_824 = 5138;
	int WORLDMAPELEMENTMOUSELEAVE_825 = 5139;
	int WORLDMAPELEMENTMOUSELEAVE_826 = 5140;
	int WORLDMAPELEMENTMOUSELEAVE_827 = 5141;
	int WORLDMAPELEMENTMOUSELEAVE_828 = 5142;
	int WORLDMAPELEMENTMOUSELEAVE_829 = 5143;
	int WORLDMAPELEMENTMOUSELEAVE_830 = 5144;
	int WORLDMAPELEMENTMOUSELEAVE_831 = 5145;
	int WORLDMAPELEMENTMOUSELEAVE_832 = 5146;
	int WORLDMAPELEMENTMOUSELEAVE_833 = 5147;
	int WORLDMAPELEMENTMOUSELEAVE_834 = 5148;
	int WORLDMAPELEMENTMOUSELEAVE_835 = 5149;
	int WORLDMAPELEMENTMOUSELEAVE_836 = 5150;
	int WORLDMAPELEMENTMOUSELEAVE_837 = 5151;
	int WORLDMAPELEMENTMOUSELEAVE_838 = 5152;
	int WORLDMAPELEMENTMOUSELEAVE_839 = 5153;
	int WORLDMAPELEMENTMOUSELEAVE_840 = 5154;
	int WORLDMAPELEMENTMOUSELEAVE_841 = 5155;
	int WORLDMAPELEMENTMOUSELEAVE_842 = 5156;
	int WORLDMAPELEMENTMOUSELEAVE_843 = 5157;
	int WORLDMAPELEMENTMOUSELEAVE_844 = 5158;
	int WORLDMAPELEMENTMOUSELEAVE_845 = 5159;
	int WORLDMAPELEMENTMOUSELEAVE_846 = 5160;
	int WORLDMAPELEMENTMOUSELEAVE_847 = 5161;
	int WORLDMAPELEMENTMOUSELEAVE_848 = 5162;
	int WORLDMAPELEMENTMOUSELEAVE_849 = 5163;
	int WORLDMAPELEMENTMOUSELEAVE_850 = 5164;
	int CLIENTSCRIPT_HELPER_AGILITY_HIGHLIGHT_SHORTCUTS = 5165;
	int PROC_HELPER_AGILITY_HIGHLIGHT_SHORTCUTS = 5166;
	int CLIENTSCRIPT_HELPER_AGILITY_HIGHLIGHT_COURSE = 5167;
	int PROC_HELPER_AGILITY_HIGHLIGHT_STARTS = 5168;
	int PROC_HELPER_AGILITY_HIGHLIGHT_COURSE = 5169;
	int CLIENTSCRIPT_HELPER_AGILITY_INIT = 5170;
	int PROC_HELPER_AGILITY_RESET_DATA = 5171;
	int PROC_SCRIPT_5172 = 5172;
	int CLIENTSCRIPT_HELPER_AGILITY_START_LAP = 5173;
	int CLIENTSCRIPT_HELPER_AGILITY_END_LAP = 5174;
	int CLIENTSCRIPT_HELPER_AGILITY_ADD_XP = 5175;
	int CLIENTSCRIPT_HELPER_AGILITY_LEVEL_UP = 5176;
	int CLIENTSCRIPT_HELPER_AGILITY_UPDATE_TITLE = 5177;
	int CLIENTSCRIPT_HELPER_AGILITY_UPDATE_LAPS_COMPLETED = 5178;
	int CLIENTSCRIPT_SCRIPT_5179 = 5179;
	int CLIENTSCRIPT_SCRIPT_5180 = 5180;
	int CLIENTSCRIPT_HELPER_AGILITY_UPDATE_NEXT_LEVEL = 5181;
	int PROC_HELPER_AGILITY_DRAW_CONTENT = 5182;
	int PROC_SCRIPT_5183 = 5183;
	int PROC_SETTINGS_HELPER_AGILITY = 5184;
	int PROC_SETTINGS_HELPER_AGILITY_HIGHLIGHT_OBSTACLES = 5185;
	int PROC_SETTINGS_HELPER_AGILITY_HIGHLIGHT_SHORTCUTS = 5186;
	int PROC_SETTINGS_BUFF_AMMO = 5187;
	int PROC_SCRIPT_5188 = 5188;
	int PROC_SCRIPT_5189 = 5189;
	int PROC_SETTINGS_MINIMAP_LOCK = 5190;
	int CLIENTSCRIPT_SETTINGS_MINIMAP_LOCK = 5191;
	int CLIENTSCRIPT_SCRIPT_5192 = 5192;
	int PROC_SCRIPT_5193 = 5193;
	int CLIENTSCRIPT_SCRIPT_5194 = 5194;
	int PROC_SCRIPT_5195 = 5195;
	int PROC_SCRIPT_5196 = 5196;
	int TRIGGER_48 = 5197;
	int PROC_SCRIPT_5198 = 5198;
	int CLIENTSCRIPT_SCRIPT_5199 = 5199;
	int PROC_SCRIPT_5200 = 5200;
	int PROC_SCRIPT_5201 = 5201;
	int CLIENTSCRIPT_SCRIPT_5202 = 5202;
	int TRIGGER_49 = 5203;
	int PROC_SCRIPT_5204 = 5204;
	int CLIENTSCRIPT_SCRIPT_5205 = 5205;
	int PROC_SCRIPT_5206 = 5206;
	int PROC_SCRIPT_5207 = 5207;
	int CLIENTSCRIPT_SCRIPT_5208 = 5208;
	int TRIGGER_47 = 5209;
	int PROC_SCRIPT_5210 = 5210;
	int CLIENTSCRIPT_SCRIPT_5211 = 5211;
	int PROC_SCRIPT_5212 = 5212;
	int PROC_SCRIPT_5213 = 5213;
	int CLIENTSCRIPT_SCRIPT_5214 = 5214;
	int PROC_SCRIPT_5215 = 5215;
	int PROC_SCRIPT_5216 = 5216;
	int PROC_SCRIPT_5217 = 5217;
	int CLIENTSCRIPT_SCRIPT_5218 = 5218;
	int PROC_SCRIPT_5219 = 5219;
	int PROC_SCRIPT_5220 = 5220;
	int CLIENTSCRIPT_SUMMARY_SIDEPANEL_TIMER_DRAW = 5221;
	int CLIENTSCRIPT_SCRIPT_5222 = 5222;
	int PROC_SCRIPT_5223 = 5223;
	int CLIENTSCRIPT_SCRIPT_5224 = 5224;
	int PROC_SCRIPT_5225 = 5225;
	int PROC_SCRIPT_5226 = 5226;
	int PROC_SCRIPT_5227 = 5227;
	int CLIENTSCRIPT_SCRIPT_5228 = 5228;
	int CLIENTSCRIPT_SCRIPT_5229 = 5229;
	int PROC_SCRIPT_5230 = 5230;
	int CLIENTSCRIPT_SCRIPT_5231 = 5231;
	int PROC_SCRIPT_5232 = 5232;
	int PROC_SCRIPT_5233 = 5233;
	int PROC_SCRIPT_5234 = 5234;
	int CLIENTSCRIPT_SCRIPT_5235 = 5235;
	int CLIENTSCRIPT_SCRIPT_5236 = 5236;
	int PROC_SCRIPT_5237 = 5237;
	int PROC_SCRIPT_5238 = 5238;
	int CLIENTSCRIPT_SCRIPT_5239 = 5239;
	int CLIENTSCRIPT_SCRIPT_5240 = 5240;

}
