package dev.kocken;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TouchBarPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(TouchBarPlugin.class);
		RuneLite.main(args);
	}
}

package dev.kocken;

import dev.kocken.touchbar.KeyBindings;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("touch-bar")
public interface TouchBarPluginConfig extends Config
{
	@ConfigItem(keyName = "combat", name = "Combat Option key", position = 1, description = "")
	default KeyBindings combat()
	{
		return KeyBindings.F1;
	}

	@ConfigItem(keyName = "skills", name = "Skills key", position = 2, description = "")
	default KeyBindings skills()
	{
		return KeyBindings.F2;
	}

	@ConfigItem(keyName = "quests", name = "Quest List key", position = 3, description = "")
	default KeyBindings quests()
	{
		return KeyBindings.F3;
	}

	@ConfigItem(keyName = "inventory", name = "Inventory key", position = 4, description = "")
	default KeyBindings inventory()
	{
		return KeyBindings.ESCAPE;
	}

	@ConfigItem(keyName = "equipment", name = "Worn Equipment key", position = 5, description = "")
	default KeyBindings equipment()
	{
		return KeyBindings.F4;
	}

	@ConfigItem(keyName = "prayer", name = "Prayer key", position = 6, description = "")
	default KeyBindings prayer()
	{
		return KeyBindings.F5;
	}

	@ConfigItem(keyName = "magic", name = "Magic key", position = 7, description = "")
	default KeyBindings magic()
	{
		return KeyBindings.F6;
	}

	@ConfigItem(keyName = "chat", name = "Chat-channel key", position = 8, description = "")
	default KeyBindings chat()
	{
		return KeyBindings.F7;
	}

	@ConfigItem(keyName = "friends", name = "Friends List key", position = 9, description = "")
	default KeyBindings friends()
	{
		return KeyBindings.F8;
	}

	@ConfigItem(keyName = "account", name = "Account Management key", position = 10, description = "")
	default KeyBindings account()
	{
		return KeyBindings.F9;
	}

	@ConfigItem(keyName = "logout", name = "Logout key", position = 11, description = "")
	default KeyBindings logout()
	{
		return KeyBindings.NONE;
	}

	@ConfigItem(keyName = "settings", name = "Settings key", position = 12, description = "")
	default KeyBindings settings()
	{
		return KeyBindings.F10;
	}

	@ConfigItem(keyName = "emotes", name = "Emotes key", position = 13, description = "")
	default KeyBindings emotes()
	{
		return KeyBindings.F11;
	}

	@ConfigItem(keyName = "music", name = "Music Player key", position = 14, description = "")
	default KeyBindings music()
	{
		return KeyBindings.F12;
	}

}

package dev.kocken.touchbar;

public enum KeyBindings {
    F1(112),
    F2(113),
    F3(114),
    F4(115),
    F5(116),
    F6(117),
    F7(118),
    F8(119),
    F9(120),
    F10(121),
    F11(122),
    F12(123),
    ESCAPE(27),
    NONE(-1);

    private final int keyCode;

    KeyBindings(Integer keyCode)
    {
        this.keyCode = keyCode;
    }

    public int getKeyCode()
    {
        return keyCode;
    }
}

package dev.kocken.touchbar;

import dev.kocken.TouchBarPluginConfig;
import dev.kocken.nativebridge.JavaTouchBar;
import dev.kocken.nativebridge.common.Image;
import dev.kocken.nativebridge.item.TouchBarItem;
import dev.kocken.nativebridge.item.view.TouchBarButton;

import java.awt.*;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class TouchBarManager {

    private static final int TAB_BUTTONS_COUNT = 7;

    private final TouchBarConfiguration touchBarConfig;
    private final JavaTouchBar touchBar;
    private final Robot robot;

    private final List<TouchBarButton> tabButtons = new ArrayList<>();
    private final List<TouchBarItem> tabItems = new ArrayList<>();

    private TouchBarPluginConfig config;
    private boolean isTopRowActive = true;

    public TouchBarManager(TouchBarPluginConfig config) throws AWTException {
        this.touchBarConfig = new TouchBarConfiguration();
        this.touchBar = new JavaTouchBar();
        this.robot = new Robot();
        this.config = config;

        InitializeTabButtons();
        SetTabButtons();
    }

    /**
     * Method for re-setting TabItems and showing the TouchBar on all the Frames
     */
    public void ShowTouchBar() {
        touchBar.setItems(tabItems);

        for (Frame frame : Frame.getFrames())
            touchBar.show(frame);
    }

    /**
     * Method for hiding the TouchBar on all the Frames
     */
    public void HideTouchBar() {
        for (Frame frame : Frame.getFrames())
            touchBar.hide(frame);
    }

    /**
     * Method for switching which tab row is active and setting the new tab buttons
     */
    private void SwitchRows() {
        isTopRowActive = !isTopRowActive;
        SetTabButtons();
    }

    /**
     * Method for Initializing empty TouchBarButtons and adding them to a TouchBarItem
     */
    private void InitializeTabButtons() {
        for (int i = 0; i < TAB_BUTTONS_COUNT; i++) {
            tabButtons.add(new TouchBarButton());
            tabItems.add(new TouchBarItem(String.valueOf(i), tabButtons.get(i)));
        }

        tabItems.add(new TouchBarItem("switch", CreateSwitchRowButton()));
    }

    /**
     * Method for setting the variables of the existing TouchBarButton using a TouchBarConfiguration
     */
    private void SetTabButtons() {
        Map<String, Integer> configuration = isTopRowActive ? touchBarConfig.topRowButtonsConfiguration(config) : touchBarConfig.bottomRowButtonsConfiguration(config);

        int index = 0;
        for (Map.Entry<String, Integer> entry : configuration.entrySet()) {
            String imageName = entry.getKey();
            Integer keyCode = entry.getValue();

            tabButtons.get(index).setImage(loadButtonImage(imageName));
            tabButtons.get(index).setAction(view -> robot.keyPress(keyCode));
            index += 1;
        }
        ShowTouchBar();
    }

    /**
     * Loads the image for a TouchBarButton
     *
     * @param imageName the name of the png image in the resources/images directory
     * @return returns the TouchBar Button Image
     */
    private Image loadButtonImage(String imageName) {
        Image image = null;
        try {
            InputStream imageStream = getClass().getClassLoader().getResourceAsStream(String.format("images/%s.png", imageName));
            image = new Image(imageStream);
        } catch (IOException error) {
            error.printStackTrace();
        }
        return image;
    }

    /**
     * Method for creating a TouchBarButton that switches the active row
     *
     * @return returns TouchBarButton for switching the active row
     */
    private TouchBarButton CreateSwitchRowButton() {
        TouchBarButton switchRowButton = new TouchBarButton();
        switchRowButton.setTitle("↕︎");
        switchRowButton.setAction(view -> SwitchRows());

        return switchRowButton;
    }

    /**
     * Method for updating the plugin config, setting the TouchBarButtons and showing the updated TouchBar
     *
     * @param config the updated config
     */
    public void UpdatePluginConfig(TouchBarPluginConfig config) {
        this.config = config;
        SetTabButtons();
    }

}

package dev.kocken.touchbar;

import dev.kocken.TouchBarPluginConfig;

import java.util.LinkedHashMap;
import java.util.Map;

public class TouchBarConfiguration {

    public Map<String, Integer> topRowButtonsConfiguration(TouchBarPluginConfig config){
        return new LinkedHashMap<String, Integer>() {{
            put("combat", config.combat().getKeyCode());
            put("skills", config.skills().getKeyCode());
            put("quests", config.quests().getKeyCode());
            put("inventory", config.inventory().getKeyCode());
            put("equipment", config.equipment().getKeyCode());
            put("prayer", config.prayer().getKeyCode());
            put("spellbook", config.magic().getKeyCode());
        }};
    }

    public Map<String, Integer> bottomRowButtonsConfiguration(TouchBarPluginConfig config){
        return new LinkedHashMap<String, Integer>() {{
            put("chat", config.chat().getKeyCode());
            put("friends", config.friends().getKeyCode());
            put("account", config.account().getKeyCode());
            put("logout", config.logout().getKeyCode());
            put("settings", config.settings().getKeyCode());
            put("emotes", config.emotes().getKeyCode());
            put("music", config.music().getKeyCode());
        }};
    }
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge;

import java.util.Observable;

public abstract class NativeLinkObject extends Observable {

	/**
	 *
	 */

	private long _nativeInstancePointer = 0L;

	protected long getNativeInstancePointer() {
		return _nativeInstancePointer;
	}

	void setNativeInstancePointer(long nativeInstancePointer) {
		_nativeInstancePointer = nativeInstancePointer;
	}
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.scrubber;

import dev.kocken.nativebridge.item.view.TouchBarScrubber;

public abstract interface ScrubberActionListener {

    void didSelectItemAtIndex(TouchBarScrubber scrubber, long index);
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.scrubber;

import dev.kocken.nativebridge.item.view.TouchBarScrubber;
import dev.kocken.nativebridge.scrubber.view.ScrubberView;

public interface ScrubberDataSource {

	int getNumberOfItems(TouchBarScrubber scrubber);

    ScrubberView getViewForIndex(TouchBarScrubber scrubber, long index);
}

package dev.kocken.nativebridge.scrubber;

public class ScrubberMode {

	public static final int NONE = 0;

	public static final int FREE = 1;

	public static final int FIXED = 2;

}


/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.scrubber;

public class ScrubberSelectionStyle {

    public static final int NONE = 0;

    public static final int OUTLINE_OVERLAY_STYLE = 1;

    public static final int ROUNDED_BACKGROUND_STYLE = 2;
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.scrubber.view;

import dev.kocken.nativebridge.common.Image;

public class ScrubberImageItemView extends ScrubberView {

    private Image _image;
    private int _alignment;

    public Image getImage() {
		return _image;
	}

	public void setImage(Image image) {
		_image = image;
	}

	public int getAlignment() {
		return _alignment;
	}

	public void setAlignment(int alignment) {
		_alignment = alignment;
	}
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.scrubber.view;


public class ScrubberView {

	private String _identifier;

	public String getIdentifier() {
		return _identifier;
	}

	public void setIdentifier( String identifier ) {
		_identifier = identifier;
	}
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.scrubber.view;

public class ScrubberTextItemView extends ScrubberView {

    private String _stringValue;

	public String getStringValue() {
		return _stringValue;
	}

	public void setStringValue( String stringValue ) {
		_stringValue = stringValue;
	}
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.common;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;

public class Image {

	private String _name;
	private String _path;

	private byte[] _data;

	@SuppressWarnings("unused")
	private Image() {}

	/**
	 *
	 * @param nameOrPath
	 * @param isPath
	 */
	public Image(String nameOrPath, boolean isPath) {
		if(isPath) {
			_path = nameOrPath;
		}
		else {
			_name = nameOrPath;
		}
	}

	/**
	 *
	 * @param data
	 */
	public Image(byte[] data) {
		_data = data;
	}

	/**
	 *
	 * @param dataInputStream
	 * @throws IOException
	 */
	public Image(InputStream dataInputStream) throws IOException {
		readFromInputStream(dataInputStream);
	}

	/**
	 *
	 * @param dataInputStream
	 * @throws IOException
	 */
	public void readFromInputStream(InputStream dataInputStream) throws IOException {
		if(dataInputStream == null) {
			throw new NullPointerException();
		}

		try (ByteArrayOutputStream dataOutputStream = new ByteArrayOutputStream()) {
			byte[] buffer = new byte[1024];

	        int read = 0;
	        while((read = dataInputStream.read(buffer)) != -1) {
	        		dataOutputStream.write(buffer, 0, read);
	        }

	        _data = dataOutputStream.toByteArray();
		}
		catch(IOException e) {
			throw e;
		}
		finally {
			dataInputStream.close();
		}
	}

	public String getName() {
		return _name;
	}

	public void setName(String name) {
		_name = name;
	}

	public String getPath() {
		return _path;
	}

	public void setPath(String path) {
		_path = path;
	}

	public byte[] getData() {
		return _data;
	}

	public void getData(byte[] data) {
		_data = data;
	}
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.common;

public class ControlState {

    public static final int MIXED           = -1;

    public static final int OFF             = 0;

    public static final int ON       	   = 1;
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.common;

public class ImagePosition {

	// The cell doesn’t display an image.
	public static final int NO = 0;

	// The cell displays an image, but not a title.
	public static final int ONLY = 1;

	// The image is to the left of the title.
	public static final int LEFT = 2;

	// The image is to the right of the title.
	public static final int RIGHT = 3;

	// The image is below the title.
	public static final int BELOW = 4;

	// The image is above the title.
	public static final int ABOVE = 5;

	// The image overlaps the title.
	public static final int OVERLAPS = 6;

}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.common;

public class Color {

	public static final Color BLACK = new Color("blackColor");
	public static final Color DARK_GRAY = new Color("darkGrayColor");
	public static final Color LIGHT_GRAY = new Color("lightGrayColor");
	public static final Color WHITE = new Color("whiteColor");
	public static final Color GRAY = new Color("grayColor");

	public static final Color RED = new Color("redColor");
	public static final Color GREEN = new Color("greenColor");
	public static final Color BLUE = new Color("blueColor");

	public static final Color CYAN = new Color("cyanColor");
	public static final Color YELLOW = new Color("yellowColor");
	public static final Color MAGENTA = new Color("magentaColor");
	public static final Color ORANGE = new Color("orangeColor");
	public static final Color PURPLE = new Color("purpleColor");
	public static final Color BROWN = new Color("brownColor");
	public static final Color CLEAR = new Color("clearColor");

	public static final Color CONTROL_SHADOW = new Color("controlShadowColor");
	public static final Color CONTROL_DARK_SHADOW = new Color("controlDarkShadowColor");
	public static final Color CONTROL_COLOR = new Color("controlColor");
	public static final Color CONTROL_HIGHLIGHT = new Color("controlHighlightColor");
	public static final Color CONTROL_LIGHT_HIGHLIGHT = new Color("controlLightHighlightColor");
	public static final Color CONTROL_TEXT = new Color("controlTextColor");
	public static final Color CONTROL_BACKGROUND = new Color("controlBackgroundColor");

	public static final Color SELECTED_CONTROL = new Color("selectedControlColor");
	public static final Color SECONDARY_SELECTED_CONTROL = new Color("secondarySelectedControlColor");
	public static final Color SELECTED_CONTROL_TEXT = new Color("selectedControlTextColor");
	public static final Color DISABLED_CONTROL_TEXT = new Color("disabledControlTextColor");
	public static final Color TEXT = new Color("textColor");
	public static final Color TEXT_BACKGROUND = new Color("textBackgroundColor");
	public static final Color SELECTED_TEXT = new Color("selectedTextColor");
	public static final Color SELECTED_TEXT_BACKGROUND = new Color("selectedTextBackgroundColor");
	public static final Color GRID_COLOR = new Color("gridColor");
	public static final Color KEYBOARD_FOCUS_INDICATOR = new Color("keyboardFocusIndicatorColor");
	public static final Color WINDOW_BACKGROUND = new Color("windowBackgroundColor");
	public static final Color UNDERPAGE_BACKGROUND = new Color("underPageBackgroundColor");

	public static final Color LABEL = new Color("labelColor");
	public static final Color SECONDARY_LABEL = new Color("secondaryLabelColor");
	public static final Color TERTIARY_LABEL = new Color("tertiaryLabelColor");
	public static final Color QUATERNARY_LABEL = new Color("quaternaryLabelColor");

	public static final Color SCROLLBAR = new Color("scrollBarColor");
	public static final Color KNOB = new Color("knobColor");
	public static final Color SELECTED_KNOB = new Color("selectedKnobColor");

	public static final Color WINDOW_FRAME = new Color("windowFrameColor");
	public static final Color WINDOW_FRAME_TEXT = new Color("windowFrameTextColor");

	public static final Color SELECTED_MENU_ITEM = new Color("selectedMenuItemColor");
	public static final Color SELECTED_MENU_ITEM_TEXT = new Color("selectedMenuItemTextColor");

	public static final Color HIGHLIGHT = new Color("highlightColor");
	public static final Color SHADOW = new Color("shadowColor");

	public static final Color HEADER = new Color("headerColor");
	public static final Color HEADER_TEXT = new Color("headerTextColor");

	public static final Color ALTERNATE_SELECTED_CONTROL = new Color("alternateSelectedControlColor");
	public static final Color ALTERNATE_SELECTED_CONTROL_TEXT = new Color("alternateSelectedControlTextColor");

	public static final Color SCRUBBER_TEXTURED_BACKGROUND = new Color("scrubberTexturedBackgroundColor");

	public static final Color SYSTEM_RED = new Color("systemRedColor");
	public static final Color SYSTEM_GREEN = new Color("systemGreenColor");
	public static final Color SYSTEM_BLUE = new Color("systemBlueColor");
	public static final Color SYSTEM_ORANGE = new Color("systemOrangeColor");
	public static final Color SYSTEM_YELLOW = new Color("systemYellowColor");
	public static final Color SYSTEM_BROWN = new Color("systemBrownColor");
	public static final Color SYSTEM_PINK = new Color("systemPinkColor");
	public static final Color SYSTEM_PURPLE = new Color("systemPurpleColor");
	public static final Color SYSTEM_GRAY = new Color("systemGrayColor");

	private String _nsColorKey;

	private float _red;
	private float _green;
	private float _blue;
	private float _alpha;

	public Color(String nsColorKey) {
		_nsColorKey = nsColorKey;
	}

	public Color(float red, float green, float blue) {
		this( red, green, blue, 1f );
	}

	public Color(float red, float green, float blue, float alpha) {
		_red = red;
		_green = green;
		_blue = blue;
		_alpha = alpha;
	}

	public String getNsColorKey() {
		return _nsColorKey;
	}

	public void setNsColorKey(String nsColorKey) {
		_nsColorKey = nsColorKey;
	}

	public float getRed() {
		return _red;
	}

	public void setRed(float red) {
		_red = red;
	}

	public float getGreen() {
		return _green;
	}

	public void setGreen(float green) {
		_green = green;
	}

	public float getBlue() {
		return _blue;
	}

	public void setBlue(float blue) {
		_blue = blue;
	}

	public float getAlpha() {
		return _alpha;
	}

	public void setAlpha(float alpha) {
		_alpha = alpha;
	}
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.common;

public class ImageName {

	/**
	 * Naming for the following 4 variables is probably under Apple's copyright
	 *
	 * Copyright (c) 2015-2018, Apple Inc.
     * All rights reserved.
	 */
	public static final String NSImageNameTouchBarAddDetailTemplate = "NSTouchBarAddDetailTemplate";
	public static final String NSImageNameTouchBarAddTemplate = "NSTouchBarAddTemplate";
	public static final String NSImageNameTouchBarAlarmTemplate = "NSTouchBarAlarmTemplate";
	public static final String NSImageNameTouchBarAudioInputMuteTemplate = "NSTouchBarAudioInputMuteTemplate";
	public static final String NSImageNameTouchBarAudioInputTemplate = "NSTouchBarAudioInputTemplate";
	public static final String NSImageNameTouchBarAudioOutputMuteTemplate = "NSTouchBarAudioOutputMuteTemplate";
	public static final String NSImageNameTouchBarAudioOutputVolumeHighTemplate = "NSTouchBarAudioOutputVolumeHighTemplate";
	public static final String NSImageNameTouchBarAudioOutputVolumeLowTemplate = "NSTouchBarAudioOutputVolumeLowTemplate";
	public static final String NSImageNameTouchBarAudioOutputVolumeMediumTemplate = "TouchBarAudioOutputVolumeMediumTemplate";
	public static final String NSImageNameTouchBarAudioOutputVolumeOffTemplate = "NSTouchBarAudioOutputVolumeOffTemplate";
	public static final String NSImageNameTouchBarBookmarksTemplate = "NSTouchBarBookmarksTemplate";
	public static final String NSImageNameTouchBarColorPickerFill = "NSTouchBarColorPickerFill";
	public static final String NSImageNameTouchBarColorPickerFont = "NSTouchBarColorPickerFont";
	public static final String NSImageNameTouchBarColorPickerStroke = "NSTouchBarColorPickerStroke";
	public static final String NSImageNameTouchBarCommunicationAudioTemplate = "NSTouchBarCommunicationAudioTemplate";
	public static final String NSImageNameTouchBarCommunicationVideoTemplate = "NSTouchBarCommunicationVideoTemplate";
	public static final String NSImageNameTouchBarComposeTemplate = "NSTouchBarComposeTemplate";
	public static final String NSImageNameTouchBarDeleteTemplate = "NSTouchBarDeleteTemplate";
	public static final String NSImageNameTouchBarDownloadTemplate = "NSTouchBarDownloadTemplate";
	public static final String NSImageNameTouchBarEnterFullScreenTemplate = "NSTouchBarEnterFullScreenTemplate";
	public static final String NSImageNameTouchBarExitFullScreenTemplate = "NSTouchBarExitFullScreenTemplate";
	public static final String NSImageNameTouchBarFastForwardTemplate = "NSTouchBarFastForwardTemplate";
	public static final String NSImageNameTouchBarFolderCopyToTemplate = "NSTouchBarFolderCopyToTemplate";
	public static final String NSImageNameTouchBarFolderMoveToTemplate = "NSTouchBarFolderMoveToTemplate";
	public static final String NSImageNameTouchBarFolderTemplate = "NSTouchBarFolderTemplate";
	public static final String NSImageNameTouchBarGetInfoTemplate = "NSTouchBarGetInfoTemplate";
	public static final String NSImageNameTouchBarGoBackTemplate = "NSTouchBarGoBackTemplate";
	public static final String NSImageNameTouchBarGoDownTemplate = "NSTouchBarGoDownTemplate";
	public static final String NSImageNameTouchBarGoForwardTemplate = "NSTouchBarGoForwardTemplate";
	public static final String NSImageNameTouchBarGoUpTemplate = "NSTouchBarGoUpTemplate";
	public static final String NSImageNameTouchBarHistoryTemplate = "NSTouchBarHistoryTemplate";
	public static final String NSImageNameTouchBarIconViewTemplate = "NSTouchBarIconViewTemplate";
	public static final String NSImageNameTouchBarListViewTemplate = "NSTouchBarListViewTemplate";
	public static final String NSImageNameTouchBarMailTemplate = "NSTouchBarMailTemplate";
	public static final String NSImageNameTouchBarNewFolderTemplate = "NSTouchBarNewFolderTemplate";
	public static final String NSImageNameTouchBarNewMessageTemplate = "NSTouchBarNewMessageTemplate";
	public static final String NSImageNameTouchBarOpenInBrowserTemplate = "NSTouchBarOpenInBrowserTemplate";
	public static final String NSImageNameTouchBarPauseTemplate = "NSTouchBarPauseTemplate";
	public static final String NSImageNameTouchBarPlayPauseTemplate = "NSTouchBarPlayPauseTemplate";
	public static final String NSImageNameTouchBarPlayTemplate = "NSTouchBarPlayTemplate";
	public static final String NSImageNameTouchBarQuickLookTemplate = "NSTouchBarQuickLookTemplate";
	public static final String NSImageNameTouchBarRecordStartTemplate = "NSTouchBarRecordStartTemplate";
	public static final String NSImageNameTouchBarRecordStopTemplate = "NSTouchBarRecordStopTemplate";
	public static final String NSImageNameTouchBarRefreshTemplate = "NSTouchBarRefreshTemplate";
	public static final String NSImageNameTouchBarRemoveTemplate = "NSTouchBarRemoveTemplate";
	public static final String NSImageNameTouchBarRewindTemplate = "NSTouchBarRewindTemplate";
	public static final String NSImageNameTouchBarRotateLeftTemplate = "NSTouchBarRotateLeftTemplate";
	public static final String NSImageNameTouchBarRotateRightTemplate = "NSTouchBarRotateRightTemplate";
	public static final String NSImageNameTouchBarSearchTemplate = "NSTouchBarSearchTemplate";
	public static final String NSImageNameTouchBarShareTemplate = "NSTouchBarShareTemplate";
	public static final String NSImageNameTouchBarSidebarTemplate = "NSTouchBarSidebarTemplate";
	public static final String NSImageNameTouchBarSkipAhead15SecondsTemplate = "NSTouchBarSkipAhead15SecondsTemplate";
	public static final String NSImageNameTouchBarSkipAhead30SecondsTemplate = "NSTouchBarSkipAhead30SecondsTemplate";
	public static final String NSImageNameTouchBarSkipAheadTemplate = "NSTouchBarSkipAheadTemplate";
	public static final String NSImageNameTouchBarSkipBack15SecondsTemplate = "NSTouchBarSkipBack15SecondsTemplate";
	public static final String NSImageNameTouchBarSkipBack30SecondsTemplate = "NSTouchBarSkipBack30SecondsTemplate";
	public static final String NSImageNameTouchBarSkipBackTemplate = "NSTouchBarSkipBackTemplate";
	public static final String NSImageNameTouchBarSkipToEndTemplate = "NSTouchBarSkipToEndTemplate";
	public static final String NSImageNameTouchBarSkipToStartTemplate = "NSTouchBarSkipToStartTemplate";
	public static final String NSImageNameTouchBarSlideshowTemplate = "NSTouchBarSlideshowTemplate";
	public static final String NSImageNameTouchBarTagIconTemplate = "NSTouchBarTagIconTemplate";
	public static final String NSImageNameTouchBarTextBoldTemplate = "NSTouchBarTextBoldTemplate";
	public static final String NSImageNameTouchBarTextBoxTemplate = "NSTouchBarTextBoxTemplate";
	public static final String NSImageNameTouchBarTextCenterAlignTemplate = "NSTouchBarTextCenterAlignTemplate";
	public static final String NSImageNameTouchBarTextItalicTemplate = "NSTouchBarTextItalicTemplate";
	public static final String NSImageNameTouchBarTextJustifiedAlignTemplate = "NSTouchBarTextJustifiedAlignTemplate";
	public static final String NSImageNameTouchBarTextLeftAlignTemplate = "NSTouchBarTextLeftAlignTemplate";
	public static final String NSImageNameTouchBarTextListTemplate = "NSTouchBarTextListTemplate";
	public static final String NSImageNameTouchBarTextRightAlignTemplate = "NSTouchBarTextRightAlignTemplate";
	public static final String NSImageNameTouchBarTextStrikethroughTemplate = "NSTouchBarTextStrikethroughTemplate";
	public static final String NSImageNameTouchBarTextUnderlineTemplate = "NSTouchBarTextUnderlineTemplate";
	public static final String NSImageNameTouchBarUserAddTemplate = "NSTouchBarUserAddTemplate";
	public static final String NSImageNameTouchBarUserGroupTemplate = "NSTouchBarUserGroupTemplate";
	public static final String NSImageNameTouchBarUserTemplate = "NSTouchBarUserTemplate";

	/* If you have a volume indicator, use NSImageNameTouchBarAudioOutputVolume{Off,Low,Medium,High}Template, which align the speaker correctly.  For volume controls, use NSImageNameTouchBarVolume{Down,Up}Template.
	 */
	public static final String NSImageNameTouchBarVolumeDownTemplate = "NSTouchBarVolumeDownTemplate";
	public static final String NSImageNameTouchBarVolumeUpTemplate = "NSTouchBarVolumeUpTemplate";

	/* If you have an NSTouchBarItem with a seekable media control, NSImageNameTouchBarPlayheadTemplate is suitable for use in displaying the playhead.
	 */
	public static final String NSImageNameTouchBarPlayheadTemplate = "NSTouchBarPlayheadTemplate";
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.common;

public class ImageAlignment {

    public static final int CENTER          = 0;

    public static final int TOP             = 1;

    public static final int TOP_LEFT        = 2;

    public static final int TOP_RIGHT       = 3;

    public static final int LEFT            = 4;

    public static final int BOTTOM          = 5;

    public static final int BOTTOM_LEFT     = 6;

    public static final int BOTTOM_RIGHT    = 7;

    public static final int RIGHT           = 8;
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.awt;

import java.awt.Component;

import dev.kocken.nativebridge.JavaTouchBarJNI;

public class AWTUtils {

	public static long getViewPointer(Component component) throws RuntimeException {
		if(component == null) {
			return 0;
		}

		try {
	        return JavaTouchBarJNI.getAWTViewPointer0(component);
		}
	    catch (Exception exception) {
	    		throw new RuntimeException(exception);
	    }
	}
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge;

import java.awt.Component;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;


public class JavaTouchBarJNI {

	static {
		try {
			System.loadLibrary("JavaTouchBar");
		}
		catch(UnsatisfiedLinkError e) {
			loadLibraryFromJar("/lib/libJavaTouchBar.dylib");
		}
	}

	public static native void setTouchBar0(long viewPointer, JavaTouchBar touchBar);

	public static native void updateTouchBarItem(long nativeInstancePointer);

	public static native void callObjectSelector(long nativeInstancePointer, String selector, boolean onMainThread);

	public static native int callIntObjectSelector(long nativeInstancePointer, String selector);

	public static native long getAWTViewPointer0(Component c);

	private static void loadLibraryFromJar(String path) throws UnsatisfiedLinkError {
		try (InputStream inputStream = JavaTouchBarJNI.class.getResourceAsStream(path)) {
			File tempLib = File.createTempFile(path, "");

		    byte[] buffer = new byte[1024];
		    int read;

		    try(FileOutputStream fileOutputStream = new FileOutputStream(tempLib)) {
			    	while(true) {
						assert inputStream != null;
						if ((read = inputStream.read(buffer)) == -1) break;
						fileOutputStream.write(buffer, 0, read);
			    	}
		    }

		    System.load(tempLib.getAbsolutePath());
		}
		catch(Exception e) {
			throw new UnsatisfiedLinkError("Unable to open "+ path +" from jar file.");
		}
	}
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge;

import java.awt.Component;
import java.util.ArrayList;
import java.util.List;

import dev.kocken.nativebridge.awt.AWTUtils;
import dev.kocken.nativebridge.item.TouchBarItem;

public class JavaTouchBar {

	private String _customizationIdentifier;
	private String _principalItemIdentifier;

	private List<TouchBarItem> _items;

	public String getCustomizationIdentifier() {
		return _customizationIdentifier;
	}

	public void setCustomizationIdentifier( String customizationIdentifier ) {
		_customizationIdentifier = customizationIdentifier;
	}

	public String getPrincipalItemIdentifier() {
		return _principalItemIdentifier;
	}

	public void setPrincipalItemIdentifier( String principalItemIdentifier ) {
		_principalItemIdentifier = principalItemIdentifier;
	}

	public List<TouchBarItem> getItems() {
		if(_items == null) { _items = new ArrayList<>(); }
		return _items;
	}

	public void setItems( List<TouchBarItem> items ) {
		_items = items;
	}

	public void addItem(TouchBarItem touchBarItem) {
		getItems().add(touchBarItem);
	}

	public void show(Component c) {
		long viewPointer = AWTUtils.getViewPointer(c);
		JavaTouchBarJNI.setTouchBar0(viewPointer, this);
	}

	public void show(long window) {
		JavaTouchBarJNI.setTouchBar0(window, this);
	}

	public void hide(Component c) {
		if(c == null) {
			return;
		}
		long viewPointer = AWTUtils.getViewPointer(c);
		JavaTouchBarJNI.setTouchBar0(viewPointer, null);
	}

	public void hide(long window) {
		JavaTouchBarJNI.setTouchBar0(window, null);
	}
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.swing;

import dev.kocken.nativebridge.item.view.TouchBarButton;
import dev.kocken.nativebridge.item.view.TouchBarView;
import dev.kocken.nativebridge.item.view.action.TouchBarViewAction;

import javax.swing.Action;
import javax.swing.SwingUtilities;
import java.awt.event.ActionEvent;
import java.beans.PropertyChangeListener;
import java.util.Objects;

/**
 * A class that wraps a {@link TouchBarViewAction} such that it knows when a {@link TouchBarButton} needs to be
 * enabled/disabled.
 */
public class SwingTouchBarActionDelegate implements TouchBarViewAction {
	private static final String PROPERTY_NAME_ENABLED = "enabled";

	private final Action action;
	private final PropertyChangeListener propertyChangeListener;

	public SwingTouchBarActionDelegate(final Action action, final TouchBarButton touchBarButton) {
		Objects.requireNonNull(action, "action");
		Objects.requireNonNull(touchBarButton, "touchBarButton");

		this.action = action;
		this.propertyChangeListener = event -> {
			if (PROPERTY_NAME_ENABLED.equals(event.getPropertyName())) {
				touchBarButton.fireActionStateChanged();
			}
		};

		this.action.addPropertyChangeListener(this.propertyChangeListener);
	}

	public void destroy() {
		this.action.removePropertyChangeListener(this.propertyChangeListener);
	}

	protected boolean isOnEDT() {
		return SwingUtilities.isEventDispatchThread();
	}

	protected ActionEvent getActionEvent() {
		return new ActionEvent(this, 0, null);
	}

	@Override
	public void onCall(final TouchBarView view) {
		if (isOnEDT()) {
			callAction();
		} else {
			SwingUtilities.invokeLater(this::callAction);
		}
	}

	private void callAction() {
		this.action.actionPerformed(getActionEvent());
	}

	@Override
	public boolean isEnabled() {
		return this.action.isEnabled();
	}
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.slider;

import dev.kocken.nativebridge.item.view.TouchBarSlider;

public abstract interface SliderActionListener {

    void sliderValueChanged(TouchBarSlider slider, double value);
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.item;

import dev.kocken.nativebridge.JavaTouchBar;
import dev.kocken.nativebridge.JavaTouchBarJNI;
import dev.kocken.nativebridge.common.Image;
import dev.kocken.nativebridge.item.view.TouchBarView;

public class PopoverTouchBarItem extends TouchBarItem {

	private TouchBarView _collapsedRepresentation;
	private Image _collapsedRepresentationImage;
	private String _collapsedRepresentationLabel;

	private JavaTouchBar _popoverTouchBar;
	private JavaTouchBar _pressAndHoldTouchBar;

	private Boolean _showsCloseButton;

	public PopoverTouchBarItem(String identifier) {
		super(identifier);
	}

	public TouchBarView getCollapsedRepresentation() {
		return _collapsedRepresentation;
	}

	public void setCollapsedRepresentation(TouchBarView collapsedRepresentation) {
		_collapsedRepresentation = collapsedRepresentation;
		update();
	}

	public Image getCollapsedRepresentationImage() {
		return _collapsedRepresentationImage;
	}

	public void setCollapsedRepresentationImage(Image collapsedRepresentationImage) {
		_collapsedRepresentationImage = collapsedRepresentationImage;
		update();
	}

	public String getCollapsedRepresentationLabel() {
		return _collapsedRepresentationLabel;
	}

	public void setCollapsedRepresentationLabel(String collapsedRepresentationLabel) {
		_collapsedRepresentationLabel = collapsedRepresentationLabel;
		update();
	}

	public JavaTouchBar getPopoverTouchBar() {
		return _popoverTouchBar;
	}

	public void setPopoverTouchBar(JavaTouchBar popoverTouchBar) {
		_popoverTouchBar = popoverTouchBar;
		update();
	}

	public JavaTouchBar getPressAndHoldTouchBar() {
		return _pressAndHoldTouchBar;
	}

	public void setPressAndHoldTouchBar(JavaTouchBar pressAndHoldTouchBar) {
		_pressAndHoldTouchBar = pressAndHoldTouchBar;
		update();
	}

	public void showPopover() {
		JavaTouchBarJNI.callObjectSelector(getNativeInstancePointer(), "showPopover", true);
	}

	public void dismissPopover() {
		JavaTouchBarJNI.callObjectSelector(getNativeInstancePointer(), "dismissPopover", true);
	}

	public Boolean isShowsCloseButton() {
		return _showsCloseButton;
	}

	public void setShowsCloseButton(Boolean showsCloseButton) {
		_showsCloseButton = showsCloseButton;
		update();
	}
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.item;

import dev.kocken.nativebridge.JavaTouchBar;
import dev.kocken.nativebridge.item.view.TouchBarView;

public class GroupTouchBarItem extends TouchBarItem {

	private JavaTouchBar _groupTouchBar;

	/**
	 * A Boolean value that specifies that items should have equal widths when possible.
	 */
	private boolean _prefersEqualWidths;

	/**
	 * The preferred width for items in the group when prefersEqualWidths is true.
	 */
	private float _preferredItemWidth;

	public GroupTouchBarItem( String identifier ) {
		super( identifier );
	}

	public GroupTouchBarItem( String identifier, TouchBarView view ) {
		super( identifier, view );
	}

	public JavaTouchBar getGroupTouchBar() {
		if(_groupTouchBar == null) { _groupTouchBar = new JavaTouchBar(); }
		return _groupTouchBar;
	}

	public void setGroupTouchBar( JavaTouchBar groupTouchBar ) {
		_groupTouchBar = groupTouchBar;
	}

	public boolean isPrefersEqualWidths() {
		return _prefersEqualWidths;
	}

	public void setPrefersEqualWidths( boolean prefersEqualWidths ) {
		_prefersEqualWidths = prefersEqualWidths;
	}

	public float getPreferredItemWidth() {
		return _preferredItemWidth;
	}

	public void setPreferredItemWidth( float preferredItemWidth ) {
		_preferredItemWidth = preferredItemWidth;
	}
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.item;

import java.util.Observable;
import java.util.Observer;

import dev.kocken.nativebridge.JavaTouchBarJNI;
import dev.kocken.nativebridge.NativeLinkObject;
import dev.kocken.nativebridge.item.view.TouchBarView;

public class TouchBarItem extends NativeLinkObject implements Observer {

	/**
	 * Naming for the following 4 variables is probably under Apple's copyright
	 *
	 * Copyright (c) 2015-2018, Apple Inc.
     * All rights reserved.
	 */
	public static final String NSTouchBarItemIdentifierFixedSpaceSmall = "NSTouchBarItemIdentifierFixedSpaceSmall";
	public static final String NSTouchBarItemIdentifierFixedSpaceLarge = "NSTouchBarItemIdentifierFixedSpaceLarge";
	public static final String NSTouchBarItemIdentifierFlexibleSpace = "NSTouchBarItemIdentifierFlexibleSpace";
	public static final String NSTouchBarItemIdentifierOtherItemsProxy = "NSTouchBarItemIdentifierOtherItemsProxy";

	private String _identifier;
	private TouchBarView _view;

	private String _customizationLabel;
	private boolean _customizationAllowed;

	public TouchBarItem(String identifier) {
		this(identifier, null);
	}

	public TouchBarItem(String identifier, TouchBarView view) {
		this(identifier, view, false);
	}

	public TouchBarItem(String identifier, TouchBarView view, boolean customizationAllowed) {
		_identifier = identifier;
		_customizationAllowed = customizationAllowed;

		setView(view);
	}

	public String getIdentifier() {
		return _identifier;
	}

	public void setIdentifier(String identifier) {
		_identifier = identifier;
		update();
	}

	public TouchBarView getView() {
		return _view;
	}

	public void setView(TouchBarView view) {
		_view = view;

		if(_view != null) {
			_view.deleteObservers();
			_view.addObserver(this);
		}

		update();
	}

	public String getCustomizationLabel() {
		return _customizationLabel;
	}

	public void setCustomizationLabel(String customizationLabel) {
		_customizationLabel = customizationLabel;
		update();
	}

	public boolean isCustomizationAllowed() {
		return _customizationAllowed;
	}

	public void setCustomizationAllowed(boolean customizationAllowed) {
		_customizationAllowed = customizationAllowed;
		update();
	}

	@Override
	public void update(Observable observable, Object obj) {
		update();
	}

	protected void update() {
		updateNativeInstance();
	}

	private void updateNativeInstance() {
		if(getNativeInstancePointer() == 0) {
			return;
		}

		JavaTouchBarJNI.updateTouchBarItem(getNativeInstancePointer());
	}
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.item.view;

public class TouchBarTextField extends TouchBarView {

	private String _stringValue;

	public String getStringValue() {
		return _stringValue;
	}

	public void setStringValue(String stringValue) {
		_stringValue = stringValue;
		update();
	}
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.item.view;

import dev.kocken.nativebridge.JavaTouchBarJNI;
import dev.kocken.nativebridge.item.view.action.TouchBarViewAction;
import dev.kocken.nativebridge.common.Color;
import dev.kocken.nativebridge.common.Image;
import dev.kocken.nativebridge.common.ImagePosition;

public class TouchBarButton extends TouchBarView {

	public enum ButtonType {
		MOMENTARY_LIGHT,

		PUSH_ON_PUSH_OFF,

		TOGGLE,

		SWITCH,

		RADIO,

		MOMENTARY_CHANGE,

		ON_OFF,

		MOMENTARY_PUSH_IN,

		ACCELERATOR,

		MOMENTARY_MULTILEVEL_ACCELERATOR
	}

	private String _title;
	private String _alternateTitle;

	private Image _image;
	private Image _alternateImage;

	private int _imagePosition = ImagePosition.OVERLAPS;

	private Color _bezelColor;

	private TouchBarViewAction _action;

	private ButtonType _type = ButtonType.MOMENTARY_LIGHT;

	private boolean _allowsMixedState;

	public String getTitle() {
		return _title;
	}

	public void setTitle(String title) {
		_title = title;
		update();
	}

	public String getAlternateTitle() {
		return _alternateTitle;
	}

	public void setAlternatTitle(String alternateTitle) {
		_alternateTitle = alternateTitle;
		update();
	}

	public Image getImage() {
		return _image;
	}

	public void setImage(Image image) {
		_image = image;
		update();
	}

	public Image getAlternateImage() {
		return _alternateImage;
	}

	public void setAlternateImage(Image alternateImage) {
		_alternateImage = alternateImage;
		update();
	}

	public int getImagePosition() {
		return _imagePosition;
	}

	public void setImagePosition(int imagePosition) {
		_imagePosition = imagePosition;
		update();
	}

	public Color getBezelColor() {
		return _bezelColor;
	}

	public void setBezelColor(Color bezelColor) {
		_bezelColor = bezelColor;
		update();
	}

	public TouchBarViewAction getAction() {
		return _action;
	}

	public void setAction(TouchBarViewAction action) {
		_action = action;
		update();
	}

	public ButtonType getType() {
		return _type;
	}

	public void setType(ButtonType type) {
		_type = type;
		update();
	}

	int getButtonType() {
		return _type.ordinal();
	}

	public boolean getAllowsMixedState() {
		return _allowsMixedState;
	}

	public void setAllowsMixedState(boolean allowsMixedState) {
		_allowsMixedState = allowsMixedState;
		update();
	}

	public void setNextState() {
		JavaTouchBarJNI.callObjectSelector(getNativeInstancePointer(), "setNextState", true);
	}

	public int getState() {
		return JavaTouchBarJNI.callIntObjectSelector(getNativeInstancePointer(), "state");
	}

	public void trigger() {
		if(_action == null) {
			return;
		}

		_action.onCall(this);
	}

	public boolean isEnabled() {
		return _action == null || _action.isEnabled();
	}

	public void fireActionStateChanged() {
		if (this._action != null) {
			update();
		}
	}
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.item.view;

import dev.kocken.nativebridge.common.Color;
import dev.kocken.nativebridge.scrubber.ScrubberActionListener;
import dev.kocken.nativebridge.scrubber.ScrubberDataSource;

public class TouchBarScrubber extends TouchBarView {

    private int _mode;
    private boolean _showsArrowButtons;
    private Color _backgroundColor;
    private int _selectionOverlayStyle;
    private int _selectionBackgroundStyle;

    private ScrubberActionListener _actionListener;
    private ScrubberDataSource _dataSource;

    public int getMode() {
		return _mode;
	}

	public void setMode(int mode) {
		_mode = mode;
		update();
	}

	public boolean getShowsArrowButtons() {
		return _showsArrowButtons;
	}

	public void setShowsArrowButtons(boolean showsArrowButtons) {
		_showsArrowButtons = showsArrowButtons;
		update();
	}

	public Color getBackgroundColor() {
		return _backgroundColor;
	}

	public void setBackgroundColor(Color backgroundColor) {
		_backgroundColor = backgroundColor;
		update();
	}

	public int getSelectionOverlayStyle() {
		return _selectionOverlayStyle;
	}

	public void setSelectionOverlayStyle(int selectionOverlayStyle) {
		_selectionOverlayStyle = selectionOverlayStyle;
		update();
	}

	public int getSelectionBackgroundStyle() {
		return _selectionBackgroundStyle;
	}

	public void setSelectionBackgroundStyle(int selectionBackgroundStyle) {
		_selectionBackgroundStyle = selectionBackgroundStyle;
		update();
	}

	public ScrubberActionListener getActionListener() {
        return _actionListener;
    }

    public void setActionListener(ScrubberActionListener actionListener) {
        _actionListener = actionListener; // dynamically resolved so does not require update to be called.
    }

    public ScrubberDataSource getDataSource() {
        return _dataSource;
    }

    public void setDataSource(ScrubberDataSource dataSource) {
        _dataSource = dataSource; // dynamically resolved so does not require update to be called.
    }
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.item.view;

import dev.kocken.nativebridge.slider.SliderActionListener;

public class TouchBarSlider extends TouchBarView {

    private double _minValue;
    private double _maxValue;

    private SliderActionListener _actionListener;

	public SliderActionListener getActionListener() {
        return _actionListener;
    }

    public void setActionListener(SliderActionListener actionListener) {
        _actionListener = actionListener; // dynamically resolved so does not require update to be called.
    }

	public double getMinValue() {
		return _minValue;
	}

	public void setMinValue(double minValue) {
		_minValue = minValue;
		update();
	}

	public double getMaxValue() {
		return _maxValue;
	}

	public void setMaxValue(double maxValue) {
		_maxValue = maxValue;
		update();
	}

}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.item.view.action;

import dev.kocken.nativebridge.item.view.TouchBarView;

public interface TouchBarViewAction {

	void onCall(TouchBarView view);

	default boolean isEnabled() {
		return true;
	}
}

/**
 * JTouchBar
 *
 * Copyright (c) 2018 - 2019 thizzer.com
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 * @author  	M. ten Veldhuis
 */
package dev.kocken.nativebridge.item.view;

import dev.kocken.nativebridge.NativeLinkObject;

public abstract class TouchBarView extends NativeLinkObject {

	void update() {
		setChanged();
		notifyObservers();
	}
}

package dev.kocken;

import com.google.inject.Provides;
import dev.kocken.touchbar.TouchBarManager;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import javax.inject.Inject;

@Slf4j
@PluginDescriptor(
        name = "Touch Bar"
)
public class TouchBarPlugin extends Plugin {

    @Inject
    private TouchBarPluginConfig config;

    private TouchBarManager touchBarManager;

    @Override
    protected void startUp() throws Exception {
        touchBarManager = new TouchBarManager(config);
        log.info("Touch Bar Plugin started!");
    }

    @Override
    protected void shutDown() {
        touchBarManager.HideTouchBar();
        log.info("Touch Bar Plugin stopped!");
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged gameStateChanged) {
        GameState state = gameStateChanged.getGameState();

        if (state == GameState.LOGGED_IN)
            touchBarManager.ShowTouchBar();

        if (state == GameState.LOGIN_SCREEN)
            touchBarManager.HideTouchBar();
    }

    @Provides
    TouchBarPluginConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(TouchBarPluginConfig.class);
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged newConfig){
        touchBarManager.UpdatePluginConfig(config);
    }
}

