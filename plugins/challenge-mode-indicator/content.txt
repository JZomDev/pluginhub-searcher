package io.robrichardson.challengemodeindicator;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ChallengeModeIndicatorPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ChallengeModeIndicatorPlugin.class);
		RuneLite.main(args);
	}
}
package io.robrichardson.challengemodeindicator;

import com.google.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

import java.awt.*;

@Slf4j
public class ChallengeModeIndicatorOverlay extends Overlay {
    private static final int MAX_DISTANCE = 2350;
    private final Client client;
    private final ChallengeModeIndicatorConfig config;
    private final ChallengeModeIndicatorPlugin plugin;

    @Inject
    ChallengeModeIndicatorOverlay(Client client, ChallengeModeIndicatorConfig config, ChallengeModeIndicatorPlugin plugin) {
        super(plugin);
        this.client = client;
        this.config = config;
        this.plugin = plugin;

        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        Player player = client.getLocalPlayer();
        if(plugin.isChallengeModeActivated() && player != null && plugin.getLeverObject() != null && plugin.getLeverTile() != null) {
            LocalPoint playerLocation = player.getLocalLocation();
            LocalPoint leverLocation = plugin.getLeverObject().getLocalLocation();
            if (plugin.getLeverTile().getPlane() == client.getPlane() && playerLocation.distanceTo(leverLocation) <= MAX_DISTANCE) {
                if(plugin.getLeverObject().getSceneMinLocation().equals(plugin.getLeverTile().getSceneLocation())) {
                    final Point textLocation = plugin.getLeverObject().getCanvasTextLocation(graphics, config.activeText(), 200);
                    if(textLocation != null) {
                        OverlayUtil.renderTextLocation(graphics, textLocation, config.activeText(), config.activeColor());
                    }
//                    OverlayUtil.renderTileOverlay(graphics, plugin.getLeverObject(), config.activeText(), config.activeColor());
                }
            }
        }

        return null;
    }
}

package io.robrichardson.challengemodeindicator;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.*;

@ConfigGroup(ChallengeModeIndicatorConfig.GROUP)
public interface ChallengeModeIndicatorConfig extends Config
{
	String GROUP = "ChallengeModeIndicator";

	@ConfigItem(
		keyName = "activeText",
		name = "Active Lever Text",
		description = "The text to show over the lever when challenge mode is active"
	)
	default String activeText() {
		return "Challenge Mode: Active";
	}

	@Alpha
	@ConfigItem(
			keyName = "activeColor",
			name = "Text Color",
			description = "Configures the lever text color"
	)
	default Color activeColor() {
		return Color.GREEN;
	}
}

package io.robrichardson.challengemodeindicator;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameObjectDespawned;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.util.*;

@Slf4j
@PluginDescriptor(
	name = "Challenge Mode Indicator"
)
public class ChallengeModeIndicatorPlugin extends Plugin
{
	final List<Integer> leverIds = new ArrayList<>(Arrays.asList(
			ObjectID.LEVER_13672,
			ObjectID.LEVER_13673,
			ObjectID.LEVER_13674
	));

	@Inject
	private Client client;

	@Inject
	private ChallengeModeIndicatorConfig config;

	@Inject
	private ChallengeModeIndicatorOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	@Getter
	private boolean challengeModeActivated = false;

	@Getter
	private GameObject leverObject;

	@Getter
	private Tile leverTile;

	@Override
	protected void startUp() throws Exception {
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception {
		overlayManager.remove(overlay);
		leverObject = null;
		leverTile = null;
	}

	@Provides
	ChallengeModeIndicatorConfig provideConfig(ConfigManager configManager)  {
		return configManager.getConfig(ChallengeModeIndicatorConfig.class);
	}

	@Subscribe
	public void onGameStateChanged(final GameStateChanged event) {
		if (event.getGameState() == GameState.HOPPING || event.getGameState() == GameState.LOGIN_SCREEN)
		{
			challengeModeActivated = false;
		}
	}

	@Subscribe
	public void onGameObjectSpawned(final GameObjectSpawned event) {
		final GameObject gameObject = event.getGameObject();
		final int id = gameObject.getId();
		if(leverIds.contains(id)) {
			leverObject = gameObject;
			leverTile = event.getTile();
		}
	}

	@Subscribe
	private void onGameObjectDespawned(final GameObjectDespawned event) {
		final GameObject gameObject = event.getGameObject();
		final int id = gameObject.getId();
		if(leverIds.contains(id)) {
			leverObject = null;
			leverTile = null;
		}
	}

	@Subscribe
	public void onChatMessage(final ChatMessage event) {
		if (event.getType() != ChatMessageType.SPAM && event.getType() != ChatMessageType.GAMEMESSAGE) {
			return;
		}

		String enableString = "Challenge mode is on.";
		String disableString = "Challenge mode has ended.";
		if(Objects.equals(event.getMessage(), enableString)) {
			challengeModeActivated = true;
		} else if(Objects.equals(event.getMessage(), disableString)) {
			challengeModeActivated = false;
		}
	}
}

