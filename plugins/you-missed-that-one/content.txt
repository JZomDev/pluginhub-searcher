package com.YouMissedThatOne;

import net.runelite.api.Client;
import net.runelite.api.events.SoundEffectPlayed;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.awt.*;

public class YouMissedThatOneOverlay extends OverlayPanel
{
    private final YouMissedThatOneConfig config;
    private final YouMissedThatOnePlugin plugin;
    private final Client client;

    @Inject
    YouMissedThatOneOverlay(Client client, YouMissedThatOnePlugin plugin, YouMissedThatOneConfig config)
    {
        super(plugin);
        this.client = client;
        this.plugin = plugin;
        this.config = config;
        setPosition(OverlayPosition.TOP_LEFT);


    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (!config.EnableOverLay())
        {
            return null;
        }

        panelComponent.getChildren().add(LineComponent.builder()
                .left("Weapon ID: ")
                .right(String.valueOf(plugin.HeldWeaponID))
                .build());
        panelComponent.getChildren().add(LineComponent.builder()
                .left("Animation ID: ")
                .right(String.valueOf(plugin.PlayingAnimationID))
                .build());
        return super.render(graphics);
    }
}

package com.YouMissedThatOne;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.RuneLite;
import net.runelite.api.ChatMessageType;

import javax.sound.sampled.*;
import java.io.*;
import java.util.*;

@Slf4j
@PluginDescriptor(
	name = "You Missed That One"
)
public class YouMissedThatOnePlugin extends Plugin
{
	@Inject
	private Client client;
	@Inject
	private ClientThread clientThread;
	@Inject
	private YouMissedThatOneOverlay youMissedThatOneOverlay;
	@Inject
	private YouMissedThatOneConfig config;
	@Inject
	private OverlayManager overlayManager;
	@Inject
	private ItemManager itemManager;

	File runeliteDir = RuneLite.RUNELITE_DIR;
	File customSoundsDir = new File(runeliteDir, "YouMissedThatOne");

	boolean SpecialUsed = false;
	boolean HpXpDrop = false;
	boolean TwoTickFix = false;
	private int TwoTickCooldown = 0;
	public int specialPercentage = 0;
	public int HeldWeaponID;
	public int WasHeldWeaponID = -1;
	public int PlayingAnimationID;
	public int WasAnimationID = -1;
	public int Volume;
	public int CustomSoundID;
	public String UserData;
	List<Integer> TwoTickWeaponList = new ArrayList<Integer>();
	public List<UserWeaponData> SpecialWeaponList = new ArrayList<>();
	public List<UserWeaponData> NormalWeaponList = new ArrayList<>();
	Random NextRandom = new Random();
	private SoundManager soundManager;

	@Override
	protected void startUp() throws Exception
	{
		UserData = config.UserSelectedSpecialSounds();
		if (!UserData.isEmpty())
		{
			SpecialWeaponList.clear();
			SpecialWeaponList = parseWeaponData(UserData);
		}

		UserData = config.UserSelectedNormalSounds();
		if (!UserData.isEmpty())
		{
			NormalWeaponList.clear();
			NormalWeaponList = parseWeaponData(UserData);
		}

		Volume = config.SoundSwapVolume();

		TwoTickWeaponListMaker();

		soundManager = new SoundManager(config);

		try
		{
			if (!customSoundsDir.exists())
			{
				customSoundsDir.mkdirs();
			}
		}
		catch (SecurityException securityException)
		{
			log.error("Error creating directory");
		}

		overlayManager.add(youMissedThatOneOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(youMissedThatOneOverlay);
		soundManager.cleanup();
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		Client client = this.client;

		// get currently equipped weaponID
		ItemContainer equipment = client.getItemContainer(InventoryID.EQUIPMENT);
		if (equipment != null)
		{
			int SlotIdx = EquipmentInventorySlot.WEAPON.getSlotIdx();
			Item slotItem = equipment.getItem(SlotIdx);
			if (slotItem != null)
			{
				HeldWeaponID = slotItem.getId();
			}
			else
			{
				HeldWeaponID = -1;
			}

			// check if the weapon was same as last tick, less time used to check if its 2 tick weapon or not
			if (HeldWeaponID != WasHeldWeaponID)
			{
				WasHeldWeaponID = HeldWeaponID;

				if (TwoTickWeaponList.contains(HeldWeaponID))
				{
					TwoTickFix = true;
				}
				else
				{
					TwoTickFix = false;
				}
			}
		}

		// If using 2 tick weapon, use this scuffed "fix" to bypass animation length problem
		if (TwoTickFix)
		{
			if (TwoTickCooldown > 0)
			{
				TwoTickCooldown--;
				return;
			}
			TwoTickCooldown = 1;
		}
		// If using slower weapon, just check if current animation ID isn't same as last time. Also wait out two tick cooldown if its still going.
		else if (PlayingAnimationID == WasAnimationID || TwoTickCooldown > 0)
		{
			if (TwoTickCooldown > 0)
			{
				TwoTickCooldown--;
			}
			return;
		}


		if (SpecialUsed)
		{
			if (!SpecialWeaponList.isEmpty() && config.SpecialSoundsEnabled())
			{
				for (UserWeaponData weapon : SpecialWeaponList)
				{
					if (weapon.getWeaponID() == HeldWeaponID && weapon.getAnimationID() == PlayingAnimationID)
					{
						if (HpXpDrop)
						{
							if (weapon.getOnHit() != -1)
							{
								if (config.RandomizerOnHit())
								{
									CustomSoundID = NextRandom.nextInt(10000);
								}
								else
								{
									CustomSoundID = weapon.getOnHit();
								}

								if (config.EnableSoundSwap())
								{
									File soundFile = new File(customSoundsDir, CustomSoundID + ".wav");
									if (soundFile.exists())
									{
										soundManager.playCustomSound(soundFile, Volume);
									}
									else
									{
										client.playSoundEffect(CustomSoundID);
									}
								}
								else
								{
									client.playSoundEffect(CustomSoundID);
								}
							}
						}
						else
						{
							if (weapon.getOnMiss() != -1)
							{
								if (config.RandomizerOnMiss())
								{
									CustomSoundID = NextRandom.nextInt(10000);
								}
								else
								{
									CustomSoundID = weapon.getOnMiss();
								}

								if (config.EnableSoundSwap())
								{
									File soundFile = new File(customSoundsDir, CustomSoundID + ".wav");
									if (soundFile.exists())
									{
										soundManager.playCustomSound(soundFile, Volume);
									}
									else
									{
										client.playSoundEffect(CustomSoundID);
									}
								}
								else
								{
									client.playSoundEffect(CustomSoundID);
								}
							}
						}
					}
				}
			}
		}
		else
		{
			if (!NormalWeaponList.isEmpty() && config.NormalSoundsEnabled())
			{
				for (UserWeaponData weapon : NormalWeaponList)
				{
					if (weapon.getWeaponID() == HeldWeaponID && weapon.getAnimationID() == PlayingAnimationID)
					{
						if (HpXpDrop)
						{
							if (weapon.getOnHit() != -1)
							{
								if (config.RandomizerOnHit())
								{
									CustomSoundID = NextRandom.nextInt(10000);
								}
								else
								{
									CustomSoundID = weapon.getOnHit();
								}

								if (config.EnableSoundSwap())
								{
									File soundFile = new File(customSoundsDir, CustomSoundID + ".wav");
									if (soundFile.exists())
									{
										soundManager.playCustomSound(soundFile, Volume);
									}
									else
									{
										client.playSoundEffect(CustomSoundID);
									}
								}
								else
								{
									client.playSoundEffect(CustomSoundID);
								}
							}
						}
						else
						{
							if (weapon.getOnMiss() != -1)
							{
								if (config.RandomizerOnMiss())
								{
									CustomSoundID = NextRandom.nextInt(10000);
								}
								else
								{
									CustomSoundID = weapon.getOnMiss();
								}

								if (config.EnableSoundSwap())
								{
									File soundFile = new File(customSoundsDir, CustomSoundID + ".wav");
									if (soundFile.exists())
									{
										soundManager.playCustomSound(soundFile, Volume);
									}
									else
									{
										client.playSoundEffect(CustomSoundID);
									}
								}
								else
								{
									client.playSoundEffect(CustomSoundID);
								}
							}
						}
					}
				}
			}
		}

		// make hp xp drop and special attack used false
		HpXpDrop = false;
		SpecialUsed = false;
		// keep track what the animation was
		WasAnimationID = PlayingAnimationID;

	}

	@Subscribe
	public void onAnimationChanged(AnimationChanged event)
	{
		Actor actor = event.getActor();

		// Check if the animation change is for the local player
		if (actor == client.getLocalPlayer())
		{
			PlayingAnimationID = actor.getAnimation();
		}
	}

	@Subscribe
	public void	onConfigChanged(ConfigChanged event)
	{
		switch (event.getKey())
		{
			case "customSpecialSounds":
			{
				UserData = config.UserSelectedSpecialSounds();
				if (!UserData.isEmpty())
				{
					SpecialWeaponList.clear();
					SpecialWeaponList = parseWeaponData(UserData);
				}
				break;
			}
			case "customNormalSounds":
			{
				UserData = config.UserSelectedNormalSounds();
				if (!UserData.isEmpty())
				{
					NormalWeaponList.clear();
					NormalWeaponList = parseWeaponData(UserData);
				}
				break;
			}
			case "SoundSwapVolume":
			{
				Volume = config.SoundSwapVolume();
				break;
			}
		}
	}

	public void TwoTickWeaponListMaker()
	{
		// this is just easy way to make list of all 2 tick weapons which can cause problems on the plugin

		// Knives
		TwoTickWeaponList.add(ItemID.BRONZE_KNIFE);
		TwoTickWeaponList.add(ItemID.BRONZE_KNIFEP);
		TwoTickWeaponList.add(ItemID.BRONZE_KNIFEP_5654);
		TwoTickWeaponList.add(ItemID.BRONZE_KNIFEP_5661);
		TwoTickWeaponList.add(ItemID.IRON_KNIFE);
		TwoTickWeaponList.add(ItemID.IRON_KNIFEP);
		TwoTickWeaponList.add(ItemID.IRON_KNIFEP_5655);
		TwoTickWeaponList.add(ItemID.IRON_KNIFEP_5662);
		TwoTickWeaponList.add(ItemID.STEEL_KNIFE);
		TwoTickWeaponList.add(ItemID.STEEL_KNIFEP);
		TwoTickWeaponList.add(ItemID.STEEL_KNIFEP_5656);
		TwoTickWeaponList.add(ItemID.STEEL_KNIFEP_5663);
		TwoTickWeaponList.add(ItemID.BLACK_KNIFE);
		TwoTickWeaponList.add(ItemID.BLACK_KNIFEP);
		TwoTickWeaponList.add(ItemID.BLACK_KNIFEP_5658);
		TwoTickWeaponList.add(ItemID.BLACK_KNIFEP_5665);
		TwoTickWeaponList.add(ItemID.MITHRIL_KNIFE);
		TwoTickWeaponList.add(ItemID.MITHRIL_KNIFEP);
		TwoTickWeaponList.add(ItemID.MITHRIL_KNIFEP_5657);
		TwoTickWeaponList.add(ItemID.MITHRIL_KNIFEP_5664);
		TwoTickWeaponList.add(ItemID.ADAMANT_KNIFE);
		TwoTickWeaponList.add(ItemID.ADAMANT_KNIFEP);
		TwoTickWeaponList.add(ItemID.ADAMANT_KNIFEP_5659);
		TwoTickWeaponList.add(ItemID.ADAMANT_KNIFEP_5666);
		TwoTickWeaponList.add(ItemID.RUNE_KNIFE);
		TwoTickWeaponList.add(ItemID.RUNE_KNIFEP);
		TwoTickWeaponList.add(ItemID.RUNE_KNIFEP_5660);
		TwoTickWeaponList.add(ItemID.RUNE_KNIFEP_5667);
		TwoTickWeaponList.add(ItemID.DRAGON_KNIFE);
		TwoTickWeaponList.add(ItemID.DRAGON_KNIFEP);
		TwoTickWeaponList.add(ItemID.DRAGON_KNIFE_22812);
		TwoTickWeaponList.add(ItemID.DRAGON_KNIFE_22814);
		TwoTickWeaponList.add(ItemID.DRAGON_KNIFE_27157);
		TwoTickWeaponList.add(ItemID.DRAGON_KNIFEP_22808);
		TwoTickWeaponList.add(ItemID.DRAGON_KNIFEP_22810);

		// Darts
		TwoTickWeaponList.add(ItemID.BRONZE_DART);
		TwoTickWeaponList.add(ItemID.BRONZE_DARTP);
		TwoTickWeaponList.add(ItemID.BRONZE_DARTP_5628);
		TwoTickWeaponList.add(ItemID.BRONZE_DARTP_5635);
		TwoTickWeaponList.add(ItemID.IRON_DART);
		TwoTickWeaponList.add(ItemID.IRON_DARTP);
		TwoTickWeaponList.add(ItemID.IRON_DART_P);
		TwoTickWeaponList.add(ItemID.IRON_DARTP_5636);
		TwoTickWeaponList.add(ItemID.STEEL_DART);
		TwoTickWeaponList.add(ItemID.STEEL_DARTP);
		TwoTickWeaponList.add(ItemID.STEEL_DARTP_5630);
		TwoTickWeaponList.add(ItemID.STEEL_DARTP_5637);
		TwoTickWeaponList.add(ItemID.BLACK_DART);
		TwoTickWeaponList.add(ItemID.BLACK_DARTP);
		TwoTickWeaponList.add(ItemID.BLACK_DARTP_5631);
		TwoTickWeaponList.add(ItemID.BLACK_DARTP_5638);
		TwoTickWeaponList.add(ItemID.MITHRIL_DART);
		TwoTickWeaponList.add(ItemID.MITHRIL_DARTP);
		TwoTickWeaponList.add(ItemID.MITHRIL_DARTP_5632);
		TwoTickWeaponList.add(ItemID.MITHRIL_DARTP_5639);
		TwoTickWeaponList.add(ItemID.ADAMANT_DART);
		TwoTickWeaponList.add(ItemID.ADAMANT_DARTP);
		TwoTickWeaponList.add(ItemID.ADAMANT_DARTP_5633);
		TwoTickWeaponList.add(ItemID.ADAMANT_DARTP_5640);
		TwoTickWeaponList.add(ItemID.RUNE_DART);
		TwoTickWeaponList.add(ItemID.RUNE_DARTP);
		TwoTickWeaponList.add(ItemID.RUNE_DARTP_5634);
		TwoTickWeaponList.add(ItemID.RUNE_DARTP_5641);
		TwoTickWeaponList.add(ItemID.AMETHYST_DART);
		TwoTickWeaponList.add(ItemID.AMETHYST_DARTP);
		TwoTickWeaponList.add(ItemID.AMETHYST_DARTP_25855);
		TwoTickWeaponList.add(ItemID.AMETHYST_DARTP_25857);
		TwoTickWeaponList.add(ItemID.DRAGON_DART);
		TwoTickWeaponList.add(ItemID.DRAGON_DARTP);
		TwoTickWeaponList.add(ItemID.DRAGON_DARTP_11233);
		TwoTickWeaponList.add(ItemID.DRAGON_DARTP_11234);

		// Blowpipe
		TwoTickWeaponList.add(ItemID.TOXIC_BLOWPIPE);
		TwoTickWeaponList.add(ItemID.BLAZING_BLOWPIPE);
	}

	public void sendGameMessage(String message)
	{
		clientThread.invoke(() ->
				client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", message, null)
		);
	}

	public static class UserWeaponData
	{
		private final int WeaponID;
		private final int AnimationID;
		private final int OnHit;
		private final int OnMiss;

		public UserWeaponData(int WeaponID, int AnimationID, int OnHit, int OnMiss)
		{
			this.WeaponID = WeaponID;
			this.AnimationID = AnimationID;
			this.OnHit = OnHit;
			this.OnMiss = OnMiss;
		}

		public int getWeaponID()
		{
			return WeaponID;
		}

		public int getAnimationID() {
			return AnimationID;
		}

		public int getOnHit()
		{
			return OnHit;
		}

		public int getOnMiss()
		{
			return OnMiss;
		}

		@Override
		public String toString()
		{
			return "WeaponData{WeaponID='" + WeaponID + "', AnimationID=" + AnimationID + "', OnHit=" + OnHit + ", OnMiss=" + OnMiss + "}";
		}
	}

	private List<UserWeaponData> parseWeaponData(String input)
	{
		List<UserWeaponData> WeaponList = new ArrayList<>();

		// Split the input string into individual weapon entries
		String[] WeaponEntries = input.split(";");
		for (String entry : WeaponEntries)
		{
			// Remove any comment (text after "//")
			int commentIndex = entry.indexOf("//");
			if (commentIndex != -1)
			{
				entry = entry.substring(0, commentIndex).trim(); // Remove the comment
			}

			if (!entry.isEmpty())
			{
				// Split each entry into its components: name, number1, number2
				String[] parts = entry.split(",");
				if (parts.length == 4)
				{
					try
					{
						int WeaponID = Integer.parseInt(parts[0].trim()); // WeaponID
						int AnimationID = Integer.parseInt(parts[1].trim()); // AnimationID
						int OnHit = Integer.parseInt(parts[2].trim()); // On hit
						int OnMiss = Integer.parseInt(parts[3].trim()); // On miss

						// Add the parsed data to the list
						WeaponList.add(new UserWeaponData(WeaponID, AnimationID, OnHit, OnMiss));
					}
					catch (NumberFormatException e)
					{
						sendGameMessage("Failed to parse custom sound entry \"" + entry + "\" Please check your input.");
					}
				}
				else
				{
					sendGameMessage("Failed to parse custom sound entry \"" + entry + "\" Please check your input.");
				}
			}
		}
		return WeaponList;
	}

	@Subscribe
	public void onStatChanged(StatChanged event)
	{
		// check if skill is hp
		if (event.getSkill() == Skill.HITPOINTS)
		{
			HpXpDrop = true;
		}
	}
	@Subscribe
	public void onFakeXpDrop(FakeXpDrop event)
	{
		// check if skill is hp
		if (event.getSkill() == Skill.HITPOINTS)
		{
			HpXpDrop = true;
		}
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		if (event.getVarpId() != VarPlayer.SPECIAL_ATTACK_PERCENT)
		{
			return;
		}
		// save previous value
		int wasSpecialPercentage = specialPercentage;
		// get new value from event
		specialPercentage = event.getValue();

		// compare if it is less than last time
		if (wasSpecialPercentage > specialPercentage)
		{
			SpecialUsed = true;
		}

	}


	@Provides
	YouMissedThatOneConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(YouMissedThatOneConfig.class);
	}
}

package com.YouMissedThatOne;

import lombok.extern.slf4j.Slf4j;
import javax.sound.sampled.*;
import java.io.*;
import java.util.*;


@Slf4j

public class SoundManager {

    private final YouMissedThatOneConfig config;

    public SoundManager(YouMissedThatOneConfig config) {
        this.config = config;
    }

    private final Map<File, byte[]> soundCache = new HashMap<>();
    private final Map<File, Clip> clipMap = new HashMap<>();

    private byte[] loadSoundData(File soundFile) throws IOException {
        if (!soundCache.containsKey(soundFile)) {
            try (InputStream is = new FileInputStream(soundFile);
                 ByteArrayOutputStream buffer = new ByteArrayOutputStream()) {
                byte[] data = new byte[1024];
                int nRead;
                while ((nRead = is.read(data, 0, data.length)) != -1) {
                    buffer.write(data, 0, nRead);
                }
                soundCache.put(soundFile, buffer.toByteArray());
            }
        }
        return soundCache.get(soundFile);
    }

    public void playCustomSound(File soundFile, int volume) {
        try {
            if (!config.SoundSwapOverlap())
            {
                if (clipMap.containsKey(soundFile))
                {
                    Clip existingClip = clipMap.get(soundFile);
                    if (existingClip.isOpen())
                    {
                        existingClip.stop();
                        existingClip.setFramePosition(0);
                        adjustVolume(existingClip, volume);
                        existingClip.start();
                        return;
                    }
                }
            }

            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(
                    new ByteArrayInputStream(loadSoundData(soundFile))
            );

            Clip clip;

            // Overlapping sounds need to create a new clip every time. Clips are closed later on
            if (config.SoundSwapOverlap())
            {
                clip = AudioSystem.getClip();
                clip.open(audioInputStream);
            }
            // If not overlapping, reuse existing clip and map the clips
            else
            {
                if (clipMap.containsKey(soundFile))
                {
                    clip = clipMap.get(soundFile);
                    if (!clip.isOpen())
                    {
                        clip.open(audioInputStream);
                    }
                }
                else
                {
                    clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clipMap.put(soundFile, clip);
                }
            }

            adjustVolume(clip, volume);

            // on overlapping sounds, add listener and close clips once clips have stopped
            if (config.SoundSwapOverlap()) {
                clip.addLineListener(event -> {
                    if (event.getType() == LineEvent.Type.STOP) {
                        clip.close();
                    }
                });
            }

            clip.start();

        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
            log.error("Error playing custom sound: {}", e.getMessage());
        }
    }

    private void adjustVolume(Clip clip, int volume) {
        if (clip.isControlSupported(FloatControl.Type.MASTER_GAIN)) {
            FloatControl volumeControl = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);
            float volumeInDecibels = (volume > 0) ? 20f * (float) Math.log10(volume / 100.0) : -80f;
            volumeControl.setValue(volumeInDecibels);
        }
    }

    public void cleanup() {
        for (Map.Entry<File, Clip> entry : clipMap.entrySet()) {
            Clip clip = entry.getValue();
            if (clip.isOpen()) {
                clip.stop();
                clip.flush();
                clip.close();
            }
        }
        clipMap.clear();
    }

}
package com.YouMissedThatOne;

import net.runelite.client.config.*;

@ConfigGroup("YouMissedThatOne")
public interface YouMissedThatOneConfig extends Config
{


	@ConfigItem(
			keyName = "EnableOverlay",
			name = "Show ID overlay",
			description = "Shows held weapon item ID and current animation ID",
			position = 1
	)
	default boolean EnableOverLay()
	{
		return false;
	}

	@ConfigItem(
			keyName = "EnableSoundSwap",
			name = "Enable sound swap",
			description = "Allows you to replace sound effects, similar to the Sound Swapper plugin." +
					"<br/> To replace a sound effect, add a .wav file to this plugin’s directory with the corresponding sound ID as the filename." +
					"<br/> For example, to replace sound ID \"1569\" with your custom sound, name the file \"1569.wav\"" +
					"<br/> Plugin directory location: %USERPROFILE%/.runelite/YouMissedThatOne",
			position = 2
	)
	default boolean EnableSoundSwap()
	{
		return false;
	}

	@ConfigItem(
			keyName = "SoundSwapVolume",
			name = "Sound swap volume",
			description = "Set the volume of swapped sounds (0-100)",
			position = 3
	)
	@Range(min = 0, max = 100)
	default int SoundSwapVolume() { return 50; }

	@ConfigItem(
			keyName = "SoundSwapOverlap",
			name = "Overlap swapped sounds",
			description = "Enables swapped sound effects to overlap if the audio clips are long enough.",
			position = 4
	)
	default boolean SoundSwapOverlap() { return false; }

	@ConfigItem(
			keyName = "RandomizerOnHit",
			name = "Randomize sound on hit",
			description = "Plays random sound effects on hit for the selected weapons." +
					"<br/> If sound swap is enabled, custom sounds can also play when their ID is randomly selected" +
					"<br/> The randomized sound ID is chosen within the range of 0–10,000.",
			position = 5
	)
	default boolean RandomizerOnHit() { return false; }

	@ConfigItem(
			keyName = "RandomizerOnMiss",
			name = "Randomize sound on miss",
			description = "Plays random sound effects on miss for the selected weapons." +
					"<br/> If sound swap is enabled, custom sounds can also play when their ID is randomly selected" +
					"<br/> The randomized sound ID is chosen within the range of 0–10,000.",
			position = 6
	)
	default boolean RandomizerOnMiss() { return false; }

	@ConfigSection(
			name = "Special attacks",
			description = "Settings for special attacks",
			position = 7
	)
	String SPECIAL_ATTACKS_SECTION = "SpecialAttackSounds";

	@ConfigSection(
			name = "Normal attacks",
			description = "Settings for normal attacks",
			position = 8
	)
	String NORMAL_ATTACKS_SECTION = "NormalAttackSounds";

	@ConfigItem(
			keyName = "SpecialAttackSounds",
			name = "Special attack sound effects",
			description = "Play sound effect when you hit or miss on special attack." +
					"<br/> Two tick weapons have minor problem with this plugin, they usually play extra sound effect at end of combat.",
			position = 1,
			section = SPECIAL_ATTACKS_SECTION
	)
	default boolean SpecialSoundsEnabled() { return false; }


	@ConfigItem(
			keyName = "customSpecialSounds",
			name = "Custom special attack sounds",
			description = "Enter a weapon item ID, attack animation ID, the sound ID to play on hit, and the sound ID to play on miss." +
						"<br/> Separate IDs with commas. To add multiple weapons, separate each set with a semicolon." +
						"<br/> For unarmed attacks, use the weapon item ID \"-1\". If you only want one of the sound effects, set the other sound ID to \"-1\"" +
						"<br/> For example. \"26374, 9168, 1569, 1640;\" Where 26374 is zcb item ID, 9168 is zcb attack animation ID, 1569 is sound ID on hit, and 1640 is sound ID on miss." +
						"<br/> You can add comments by using \"//\". Ensure the comment follows the data and precedes the semicolon. For example: \"26374, 9168, 1569, 1640 //This is zcb;\"",
			position = 2,
			section = SPECIAL_ATTACKS_SECTION
	)
	default String UserSelectedSpecialSounds()
	{
		return "";
	}

	@ConfigItem(
			keyName = "NormalAttackSounds",
			name = "Normal attack sound effects",
			description = "Play sound effect when you hit or miss on normal attack."+
					"<br/> Two tick weapons have minor problem with this plugin, they usually play extra sound effect at end of combat.",
			position = 1,
			section = NORMAL_ATTACKS_SECTION
	)
	default boolean NormalSoundsEnabled() { return false; }

	@ConfigItem(
			keyName = "customNormalSounds",
			name = "Custom normal attack sounds",
			description = "Enter a weapon item ID, attack animation ID, the sound ID to play on hit, and the sound ID to play on miss." +
					"<br/> Separate IDs with commas. To add multiple weapons, separate each set with a semicolon." +
					"<br/> For unarmed attacks, use the weapon item ID \"-1\". If you only want one of the sound effects, set the other sound ID to \"-1\"" +
					"<br/> For example. \"26374, 9168, 1569, 1640;\" Where 26374 is zcb item ID, 9168 is zcb attack animation ID, 1569 is sound ID on hit, and 1640 is sound ID on miss." +
					"<br/> You can add comments by using \"//\". Ensure the comment follows the data and precedes the semicolon. For example: \"26374, 9168, 1569, 1640 // This is zcb;\"",
			position = 2,
			section = NORMAL_ATTACKS_SECTION
	)
	default String UserSelectedNormalSounds()
	{
		return "";
	}

}

package com.YouMissedThatOne;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class YouMissedThatOnePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(YouMissedThatOnePlugin.class);
		RuneLite.main(args);
	}
}
