package com.acoldoneclogging;

import java.util.Random;
import java.util.regex.Pattern;
import javax.inject.Inject;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.events.ActorDeath;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.eventbus.Subscribe;

public class AudioTriggers
{
	@Inject
	private AColdOneCloggingConfig config;
	@Inject
	private SoundEngine soundEngine;
	@Inject
	private Client client;


	private static final Pattern clogRegex = Pattern.compile("New item added to your collection log:.*");
	private static final Pattern taskRegex = Pattern.compile("CA_ID:\\d+\\|Congratulations, you've completed an? \\w+ combat task:.*");
	private static final Pattern KEBAB = Pattern.compile("Your reward*Kebab*");
	//private static final Pattern leaguesTaskRegex = Pattern.compile("Congratulations, you've completed an? \\w+ task:.*");

	private final Random random = new Random();



	//CAs, Clogs and leagues
	@Subscribe
	public void onChatMessage(ChatMessage chatMessage)
	{

		if (chatMessage.getType() == ChatMessageType.GAMEMESSAGE)
		{
			String Message = chatMessage.getMessage();
			if (config.AnnounceClog() && clogRegex.matcher(Message).matches())
			{
				Sound selectedLog = Sound.valueOf("CollectionLog_" + (random.nextInt(13) + 1));
				soundEngine.playClip(selectedLog);
			}
//			Leagues Hijinks
//			else if (config.AnnounceLeaguesTasks() && leaguesTaskRegex.matcher(Message).matches())
//			{
//				Sound selectedLog = Sound.valueOf("LeaguesTask_" + (random.nextInt(3) + 1));
//				soundEngine.playClip(selectedLog);
//			}
			else if (config.AnnounceCombatTasks() && taskRegex.matcher(Message).matches())
			{
				Sound selectedLog = Sound.valueOf("TaskCompletion_" + (random.nextInt(3) + 1));
				soundEngine.playClip(selectedLog);
			}
			else if (config.KEBAB() && KEBAB.matcher(Message).matches())
			{
				soundEngine.playClip(Sound.valueOf("KEBAB"));
			}
		}
	}

	//Death Audio Clip
	@Subscribe
	public void onActorDeath(ActorDeath actorDeath)
	{
		if (actorDeath.getActor() != client.getLocalPlayer())
		{
			return;
		}
		if (config.AnnounceDeath())
		{
			soundEngine.playClip(Sound.valueOf("Death"));
		}
	}
}

package com.acoldoneclogging;


import com.acoldoneclogging.Overlays.GIFTriggers;
import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;
import java.util.concurrent.ScheduledExecutorService;

@Slf4j
@PluginDescriptor(name = "AColdOne Clogging")
public class AColdOneCloggingPlugin extends Plugin {
    @Inject
    private Client client;

    @Inject
    private AColdOneCloggingConfig config;

	@Inject
	private AudioTriggers audioTriggers;
	@Inject
	private BalledLOL balledLOL;
	@Inject
	private GIFTriggers gifOverlays;

    @Inject
    private SoundEngine soundEngine;
	@Inject
    private ScheduledExecutorService executorService;
    @Inject
    private OverlayManager overlayManager;


	@Inject
	private EventBus eventBus;


    @Override
    protected void startUp() throws Exception {


		eventBus.register(audioTriggers); //Audio Clips
		eventBus.register(balledLOL); //Getting balled lol
		eventBus.register(gifOverlays); //Leo and Sky GIFs
		gifOverlays.initialise();
    }

    @Override
    protected void shutDown() throws Exception {
		eventBus.unregister(audioTriggers);
		eventBus.unregister(balledLOL);
		eventBus.unregister(gifOverlays);
		gifOverlays.shutDown();
    }

	@Provides
    AColdOneCloggingConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(AColdOneCloggingConfig.class);
    }
}

package com.acoldoneclogging;

import java.io.BufferedInputStream;
import java.io.InputStream;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.audio.AudioPlayer;

@Singleton
@Slf4j
public class SoundEngine
{
	@Inject
	private AColdOneCloggingConfig config;
	@Inject
	private AudioPlayer audioPlayer;

	public void playClip(Sound sound)
	{
		float gain = 20f * (float) Math.log10(config.Volume() / 100f);
		try
		{
			InputStream resourceStream = SoundEngine.class.getResourceAsStream(sound.getResourceName());
			InputStream fileStream = new BufferedInputStream(resourceStream);
			audioPlayer.play(fileStream,gain);
		}
		catch (Exception e)
		{
			log.info("Error Playing Clip: {}", sound,e);
		}
	}


}

package com.acoldoneclogging.Overlays;

import com.acoldoneclogging.AColdOneCloggingPlugin;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;

public class GIFOverlay extends OverlayPanel {

	@Inject
    private BufferedImage bufferedImage;

	private final AlphaComposite alphaComposite = AlphaComposite.getInstance(AlphaComposite.SRC_OVER);

    public GIFOverlay(String initialImage) {
        bufferedImage = ImageUtil.loadImageResource(GIFOverlay.class, initialImage);
        setPosition(OverlayPosition.DYNAMIC);
    }
	@Override
    public Dimension render(Graphics2D graphics) {
		graphics.setComposite(alphaComposite);
        graphics.drawImage(bufferedImage, 100, 100, null);
        return null;
    }
    public void setImage(String image) {
        bufferedImage = ImageUtil.loadImageResource(AColdOneCloggingPlugin.class, image);
    }
}
package com.acoldoneclogging.Overlays;

import com.acoldoneclogging.AColdOneCloggingConfig;
import static java.lang.Boolean.FALSE;
import static java.lang.Boolean.TRUE;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.util.Text;

@Slf4j
public class GIFTriggers extends OverlayPanel
{
	@Inject
	private Client client;
	@Inject
	private AColdOneCloggingConfig config;
	@Inject
	private ScheduledExecutorService executorService;
	@Inject
	private OverlayManager overlayManager;


	private final GIFOverlay skyArriveOverlay = new GIFOverlay("/gottaGo/175.gif");
	private final GIFOverlay gottaGoOverlay = new GIFOverlay("/gottaGo/0.gif");

	private final GIFOverlay leoSpinOverlay = new GIFOverlay("/leoSpin/0.gif");
	private final GIFOverlay wideLeoOverlay = new GIFOverlay("/wideLeo/0.gif");

	//Leo GIFs
	private final String[] wideLeoIcons = new String[59];
	private final String[] leoSpinIcons = new String[66];

	//Sky GIFs
	private final String[] gottaGoIcons = new String[175];

	public void initialise()
	{
		setupGIFs();
	}

	public void shutDown()
	{
		overlayManager.remove(skyArriveOverlay);
		overlayManager.remove(gottaGoOverlay);
		overlayManager.remove(wideLeoOverlay);
		overlayManager.remove(leoSpinOverlay);
	}

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage)
	{
		if (chatMessage.getType() == ChatMessageType.PUBLICCHAT && Text.sanitize(chatMessage.getName()).equalsIgnoreCase(client.getLocalPlayer().getName()))
		{
			String message = chatMessage.getMessage();
			if (config.skyEmotes() && message.equalsIgnoreCase("!skyArrive"))
			{
				playGIF("skyArrive");
			}
			else if (config.skyEmotes() && message.equalsIgnoreCase("!gottaGo"))
			{
				playGIF("gottaGo");
			}
			else if (config.leoEmotes() && message.equalsIgnoreCase("!wideLeo"))
			{
				playGIF("wideLeo");
			}
			else if (config.leoEmotes() && message.equalsIgnoreCase("!leoSpin"))
			{
				playGIF("leoSpin");
			}

		}
	}

	private void setupGIFs()
	{
		for (int i = 0; i < 59; i++)
		{
			wideLeoIcons[i] = "/wideLeo/" + i + ".gif";
		}

		for (int i = 0; i < 66; i++)
		{
			leoSpinIcons[i] = "/leoSpin/" + i + ".gif";
		}
		for (int i = 0; i < 175; i++)
		{
			gottaGoIcons[i] = "/gottaGo/" + i + ".gif";
		}
	}

	private void playGIF(String emoteName)
	{
		switch (emoteName)
		{
			case "skyArrive":
				gifPlayer(skyArriveOverlay, gottaGoIcons, 30, TRUE);
				break;
			case "gottaGo":
				gifPlayer(gottaGoOverlay, gottaGoIcons, 30, FALSE);
				break;
			case "wideLeo":
				gifPlayer(wideLeoOverlay, wideLeoIcons, 40, FALSE);
				break;
			case "leoSpin":
				gifPlayer(leoSpinOverlay, leoSpinIcons, 40, FALSE);
				break;
		}
	}

	private void gifPlayer(GIFOverlay gifOverlay, String[] gifFrames, int frameDelay, boolean reversedGIF)
	{
		overlayManager.add(gifOverlay);
		final Timer timer = new Timer();
		TimerTask task = new TimerTask()
		{
			int currentIndex = reversedGIF ? gifFrames.length - 1 : 0;
			int loopAmount = config.LoopAmount();

			@Override
			public void run()
			{
				if (reversedGIF)
				{
					if (currentIndex >= 0)
					{
						gifOverlay.setImage(gifFrames[currentIndex]);
						currentIndex--;
					}
					else
					{
						loopAmount--;
						if (loopAmount != 0)
						{
							timer.cancel();
							executorService.schedule(() -> overlayManager.remove(gifOverlay), 60, TimeUnit.MILLISECONDS);
						}
						else
						{
							currentIndex = gifFrames.length - 1;
						}
					}
				}
				else
				{
					if (currentIndex < gifFrames.length)
					{
						gifOverlay.setImage(gifFrames[currentIndex]);
						currentIndex++;
					}
					else
					{
						loopAmount--;
						if (loopAmount != 0)
						{
							timer.cancel();
							executorService.schedule(() -> overlayManager.remove(gifOverlay), 60, TimeUnit.MILLISECONDS);
						}
						else
						{
							currentIndex = 0;
						}
					}
				}
			}
		};
		timer.scheduleAtFixedRate(task, 0, frameDelay);
	}

}


package com.acoldoneclogging;

public enum Sound
{
	CollectionLog_1("/Clogging_1.wav"),
	CollectionLog_2("/Clogging_2.wav"),
	CollectionLog_3("/Clogging_3.wav"),
	CollectionLog_4("/Clogging_4.wav"),
	CollectionLog_5("/Clogging_5.wav"),
	CollectionLog_6("/Clogging_6.wav"),
	CollectionLog_7("/Clogging_7.wav"),
	CollectionLog_8("/Clogging_8.wav"),
	CollectionLog_9("/Clogging_9.wav"),
	CollectionLog_10("/Clogging_10.wav"),
	CollectionLog_11("/Clogging_11.wav"),
	CollectionLog_12("/Clogging_12.wav"),
	CollectionLog_13("/Clogging_13.wav"),
//	CollectionLog_14("/Clogging_14.wav"),
//	CollectionLog_15("/Clogging_15.wav"),
//	CollectionLog_16("/Clogging_16.wav"),

	Balled_1("/Balled_1.wav"),

	TaskCompletion_1("/TaskCompletion_1.wav"),
	TaskCompletion_2("/TaskCompletion_2.wav"),
	TaskCompletion_3("/TaskCompletion_3.wav"),

//	LeaguesTask_1("/LeaguesTask_1.wav"),
//	LeaguesTask_2("/LeaguesTask_2.wav"),
//	LeaguesTask_3("/LeaguesTask_3.wav"),

	Death("/Death.wav"),
	KEBAB("/KEBAB.wav");

	private final String ResourceName;

	Sound(String resName)
	{
		ResourceName = resName;
	}

	String getResourceName()
	{
		return ResourceName;
	}
}

package com.acoldoneclogging;

import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.imageio.ImageIO;
import javax.inject.Inject;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Actor;
import net.runelite.api.Client;
import net.runelite.api.Projectile;
import net.runelite.api.events.ProjectileMoved;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.ui.DrawManager;
import static net.runelite.http.api.RuneLiteAPI.GSON;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

@Data
class DiscordWebhookBody {
	private String content;
	private Embed embed;

	@Data
	static class Embed {
		final UrlEmbed image;
	}

	@Data
	static class UrlEmbed {
		final String url;
	}
}


@Slf4j
public class BalledLOL
{
	@Inject
	private Client client;
	@Inject
	private ScheduledExecutorService executorService;
	@Inject
	private AColdOneCloggingConfig config;
	@Inject
	private SoundEngine soundEngine;
	@Inject
	private DrawManager drawManager;
	@Inject
	private OkHttpClient okHttpClient;

	private int lastBalledTick = -1;

	private boolean gettingBalled = false;

	//Getting Balled LOL
	@Subscribe
	public void onProjectileMoved(ProjectileMoved projectileMoved)
	{
		int currentTick = client.getTickCount();
		if (currentTick - lastBalledTick > 500)
		{
			gettingBalled = false;
		}
		if (gettingBalled)
		{
			return;
		}
		Projectile projectile = projectileMoved.getProjectile();
		if (projectile.getId() != 55)
		{
			return;
		}
		Actor me = client.getLocalPlayer();
		if (me == null)
		{
			return;
		}
		Actor projectileInteraction = projectile.getInteracting();


		if (!me.equals(projectileInteraction))
		{
			return;
		}
		if (!config.Balled())
		{
			return;
		}
		gettingBalled = true;
		lastBalledTick = currentTick;
		me.setOverheadText("Oh no, i got balled");
		executorService.schedule(() -> {
			soundEngine.playClip(Sound.valueOf("Balled_1"));
			if (config.BalledScreenshot() && config.WebhookLink() != null)
			{
				sendScreenshot(me.getName());
			}
			client.getLocalPlayer().setOverheadText("");
		}, 1200, TimeUnit.MILLISECONDS);
	}
	private void sendScreenshot(String playerName)
	{
		String MessageString;
		MessageString = String.format("%s %s", playerName, "got balled <:x0r6ztlurk:948329913734275093>");
		DiscordWebhookBody discordWebhookBody = new DiscordWebhookBody();
		discordWebhookBody.setContent(MessageString);

		String webhookLink = config.WebhookLink();
		HttpUrl url = HttpUrl.parse(webhookLink);
		MultipartBody.Builder requestBodyBuilder = new MultipartBody.Builder()
			.setType(MultipartBody.FORM)
			.addFormDataPart("payload_json", GSON.toJson(discordWebhookBody));

		drawManager.requestNextFrameListener(image ->
		{
			BufferedImage bufferedImage = (BufferedImage) image;
			byte[] imageBytes;
			try
			{
				imageBytes = toByteArray(bufferedImage);
			}
			catch (IOException e)
			{
				log.warn("Error converting image to byte array", e);
				return;
			}

			requestBodyBuilder.addFormDataPart("file", "image.png",
				RequestBody.create(MediaType.parse("image/png"), imageBytes));
			buildRequestAndSend(url, requestBodyBuilder);
		});
	}


	private void buildRequestAndSend(HttpUrl url, MultipartBody.Builder requestBodyBuilder)
	{
		RequestBody requestBody = requestBodyBuilder.build();
		Request request = new Request.Builder()
			.url(url)
			.post(requestBody)
			.build();

		okHttpClient.newCall(request).enqueue(new Callback()
		{
			@Override
			public void onFailure(Call call, IOException e)
			{
				log.warn("Error submitting webhook", e);
			}

			@Override
			public void onResponse(Call call, Response response) throws IOException
			{
				response.close();
			}
		});
	}
	private static byte[] toByteArray(BufferedImage bufferedImage) throws IOException
	{
		ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
		ImageIO.write(bufferedImage, "png", byteArrayOutputStream);
		return byteArrayOutputStream.toByteArray();
	}
}

package com.acoldoneclogging;

import net.runelite.client.config.*;

@ConfigGroup("AColdOneClogging")
public interface AColdOneCloggingConfig extends Config
{
	@ConfigSection(
		name = "GIFs",
		description = "Cause Leo & Sky deserve their own section :",
		position = 1
	)
	String GIFs = "GIFs";

	@ConfigSection(
		name = "Misc Sounds",
		description = "Any Extra funny sounds that i may add",
		position = 2
	)
	String Misc = "misc";

	@Range(
		min = 0,
		max = 100
	)
	@ConfigItem(
		keyName = "Volume",
		name = "Volume",
		description = "Control how loud the audio should be"
	)
	default int Volume()
	{
		return 73;
	}

	@ConfigItem(
		keyName = "AnnounceClog",
		name = "Collection Logs",
		description = "Announces Collection Logs with an Audio Clip"
	)
	default boolean AnnounceClog()
	{
		return true;
	}

	@ConfigItem(
		keyName = "AnnounceCombatTasks",
		name = "Combat Achievements",
		description = "Announces Combat Task Completions with an Audio Clip"
	)
	default boolean AnnounceCombatTasks()
	{
		return true;
	}

//	@ConfigItem(
//		keyName = "AnnounceLeaguesTasks",
//		name = "Leagues Tasks",
//		description = "Announces Leagues Task Completions with an Audio Clip"
//	)
//	default boolean AnnounceLeaguesTasks(){
//		return true;
//	}

	@ConfigItem(
		keyName = "AnnounceDeath",
		name = "Death",
		description = "Announces Deaths with an Audio Clip"
	)
	default boolean AnnounceDeath()
	{
		return true;
	}

	@ConfigItem(
		keyName = "KEBAB",
		name = "Kebab Drops",
		description = "Celebrate Kebab drops with an Audio Clip"
	)
	default boolean KEBAB()
	{
		return true;
	}

	@ConfigItem(
		keyName = "Balled",
		name = "Getting Balled",
		description = "Get Balled Lmao",
		section = Misc
	)
	default boolean Balled()
	{
		return true;
	}

	@ConfigItem(
		keyName = "BalledScreenshot",
		name = "Screenshot of getting Balled",
		description = "Screenshot of you getting balled being shared in the #[INSERT CURRENT CHANNEL NAME] of the AColdOne Discord Server",
		section = Misc
	)
	default boolean BalledScreenshot()
	{
		return true;
	}

	@ConfigItem(
		keyName = "WebhookLink",
		name = "Discord Webhook Link",
		description = "Discord Webhook Link to send screenshot to",
		section = Misc
	)
	default String WebhookLink()
	{
		return "";
	}

	@ConfigItem(
		keyName = "leoEmotes",
		name = "Leo Emotes",
		description = "Overlay emotes of Leo(\"!leo\",\"!leoSpin\") ",
		position = 1,
		section = GIFs
	)
	default boolean leoEmotes()
	{
		return true;
	}

	@ConfigItem(
		keyName = "skyEmotes",
		name = "Sky Emotes",
		description = "Overlay emotes of Sky (\"!gottaGo\",\"!skyArrive\")",
		position = 2,
		section = GIFs
	)
	default boolean skyEmotes()
	{
		return true;
	}

	@ConfigItem(
		keyName = "LoopAmount",
		name = "Loop Amount",
		description = "Number of times to loop the gif on the screen when saying \"!LeoSpin\" ",
		position = 3,
		section = GIFs
	)
	default int LoopAmount()
	{
		return 1;
	}
}

package com.acoldoneclogging;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AColdOneCloggingPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AColdOneCloggingPlugin.class);
		RuneLite.main(args);
	}
}
