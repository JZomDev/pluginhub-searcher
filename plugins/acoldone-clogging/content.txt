package com.acoldoneclogging;

import com.acoldoneclogging.Overlays.LeoSpinOverlay;
import com.acoldoneclogging.Overlays.WideLeoOverlay;
import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.ProjectileMoved;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.DrawManager;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;
import okhttp3.*;

import javax.imageio.ImageIO;
import javax.inject.Inject;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.*;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;

import static net.runelite.http.api.RuneLiteAPI.GSON;

@Slf4j
@PluginDescriptor(name = "AColdOne Clogging")
public class AColdOneCloggingPlugin extends Plugin {
    @Inject
    private Client client;

    @Inject
    private AColdOneCloggingConfig config;
    @Inject
    private SoundEngine soundEngine;
    @Inject
    private ChatMessageManager chatMessageManager;
    @Inject
    private ScheduledExecutorService executorService;
    @Inject
    private OverlayManager overlayManager;
    @Inject
    private DrawManager drawManager;
    @Inject
    private OkHttpClient okHttpClient;

    private final WideLeoOverlay wideLeoOverlay = new WideLeoOverlay();
    private final LeoSpinOverlay leoSpinOverlay = new LeoSpinOverlay();
    private static final Pattern clogRegex = Pattern.compile("New item added to your collection log:.*");
	private static final Pattern taskRegex = Pattern.compile("Congratulations, you've completed an? (?:\\w+) combat task:.*");
	private static final Pattern leaguesTaskRegex = Pattern.compile("Congratulations, you've completed an? \\w+ task:.*");

    private static final Set<Integer> badClogSettings = new HashSet<>() {{
        add(0);
        add(2);
    }};

    private int lastClogWarning = -1;

    private int lastBalledTick = -1;
    private boolean functionRunning = false;
    private final String[] wideLeoIcons = new String[59];
    private final String[] leoSpinIcons = new String[66];
	private final Random random = new Random();


    @Override
    protected void startUp() throws Exception {
        overlaysSetup();
    }

    @Override
    protected void shutDown() throws Exception {
        soundEngine.close();
    }

    @Subscribe
    protected void onGameStateChanged(GameStateChanged stateChanged) {
        switch (stateChanged.getGameState()) {
            case LOGIN_SCREEN:
            case LOGGING_IN:
            case HOPPING:
            case CONNECTION_LOST:
                lastClogWarning = client.getTickCount();
                break;
            case LOGGED_IN:
                break;
        }
    }

    @Subscribe
    public void onChatMessage(ChatMessage chatMessage) {
        if (chatMessage.getType() == ChatMessageType.PUBLICCHAT) {
            String Message = chatMessage.getMessage();
            boolean isUser = Text.sanitize(chatMessage.getName()).equalsIgnoreCase(client.getLocalPlayer().getName());
            if (config.WideLeo() && Message.equalsIgnoreCase("!Leo") && isUser) {
                overlayManager.add(wideLeoOverlay);
                LeoWiden();
            } else if (config.LeoSpin() && Message.equalsIgnoreCase("!LeoSpin") && isUser) {
                overlayManager.add(leoSpinOverlay);
                leoSpin();
            }

        }
        else if (chatMessage.getType() == ChatMessageType.GAMEMESSAGE) {
            String Message = chatMessage.getMessage();
            if (config.AnnounceClog() && clogRegex.matcher(Message).matches()) {
                Sound selectedLog = Sound.valueOf("CollectionLog_" + (random.nextInt(14) + 1));
                soundEngine.playClip(selectedLog);
            } else if (config.AnnounceLeaguesTasks() && leaguesTaskRegex.matcher(Message).matches())
			{
				Sound selectedLog = Sound.valueOf("LeaguesTask_" + (random.nextInt(3) + 1));
				soundEngine.playClip(selectedLog);
			}
			else if (config.AnnounceCombatTasks() && taskRegex.matcher(Message).matches()) {
				Sound selectedLog = Sound.valueOf("TaskCompletion_" + (random.nextInt(3) + 1));
				soundEngine.playClip(selectedLog);
            }
        }
    }

	private void WarnForClogSettings(int newVarbitValue) {
        if (badClogSettings.contains(newVarbitValue)) {
            if (lastClogWarning == -1 || client.getTickCount() - lastClogWarning > 10) {
                lastClogWarning = client.getTickCount();
                SendMessage("Please enable \"Collection log - New addition notification\" in your game settings or switch off the \"AColdOne Clogging\" plugin to switch off this warning");
            }
        }
    }

    @Subscribe
    public void onVarbitChanged(VarbitChanged varbitChanged) {
        if (varbitChanged.getVarbitId() == Varbits.COLLECTION_LOG_NOTIFICATION) {
            WarnForClogSettings(varbitChanged.getValue());
        }
    }

    @Subscribe
    public void onProjectileMoved(ProjectileMoved projectileMoved) {
        int currentTick = client.getTickCount();
        if (currentTick - lastBalledTick > 500) {
            functionRunning = false;
        }
        if (functionRunning) {
            return;
        }
        Projectile projectile = projectileMoved.getProjectile();
        if (projectile.getId() != 55) {
            return;
        }
        Actor me = client.getLocalPlayer();
        if (me == null) {
            return;
        }
        Actor projectileInteraction = projectile.getInteracting();
        if (!me.equals(projectileInteraction)) {
            return;
        }
        if (!config.Balled()) {
            return;
        }
        functionRunning = true;
        lastBalledTick = currentTick;
        me.setOverheadText("Oh no, i got balled");
        executorService.schedule(() -> {
            soundEngine.playClip(Sound.valueOf("Balled_1"));
            if (config.BalledScreenshot() && config.WebhookLink()!=null) {
                sendScreenshot(me.getName());
            }
            client.getLocalPlayer().setOverheadText("");
        }, 1200, TimeUnit.MILLISECONDS);
    }

    public void SendMessage(String Message) {
        String highlightedMessage = new ChatMessageBuilder().append(ChatColorType.HIGHLIGHT).append(Message).build();

        chatMessageManager.queue(QueuedMessage.builder().type(ChatMessageType.CONSOLE).runeLiteFormattedMessage(highlightedMessage).build());
    }

    public void LeoWiden() {
        final Timer timer = new Timer();
        long interval = 40;
        TimerTask task = new TimerTask() {
            int currentIndex = 0;

            @Override
            public void run() {
                if (currentIndex < wideLeoIcons.length) {
                    String image = wideLeoIcons[currentIndex];
                    wideLeoOverlay.setImage(image);
                    currentIndex++;
                } else {
                    timer.cancel();
                    executorService.schedule(() -> {
                        overlayManager.remove(wideLeoOverlay);
                    }, 250, TimeUnit.MILLISECONDS);
                }
            }
        };
        timer.scheduleAtFixedRate(task, 0, interval);
    }

    public void leoSpin() {
        final Timer timer = new Timer();
        long interval = 40;

        TimerTask task = new TimerTask() {
            int currentIndex = 0;

            @Override
            public void run() {
                if (currentIndex < leoSpinIcons.length * config.LoopAmount()) {
                    String image = leoSpinIcons[currentIndex % leoSpinIcons.length];
                    leoSpinOverlay.setImage(image);
                    currentIndex++;
                } else {
                    timer.cancel();
                    executorService.schedule(() -> {
                        overlayManager.remove(leoSpinOverlay);
                    }, 250, TimeUnit.MILLISECONDS);
                }
            }
        };
        timer.scheduleAtFixedRate(task, 0, interval);
    }

    public void overlaysSetup() {
        for (int i = 0; i < 59; i++) {
            wideLeoIcons[i] = "/WideLeo/" + i + ".gif";
        }
        for(int i = 0; i < 66; i++){
            leoSpinIcons[i] = "/LeoSpin/" + i + ".gif";
        }
    }


    private void sendScreenshot(String playerName)
    {
        String MessageString;
        MessageString = String.format("%s %s", playerName, "got balled <:x0r6ztlurk:948329913734275093>");
        DiscordWebhookBody discordWebhookBody = new DiscordWebhookBody();
        discordWebhookBody.setContent(MessageString);

        String webhookLink = config.WebhookLink();
        HttpUrl url = HttpUrl.parse(webhookLink);
        MultipartBody.Builder requestBodyBuilder = new MultipartBody.Builder()
                .setType(MultipartBody.FORM)
                .addFormDataPart("payload_json", GSON.toJson(discordWebhookBody));

        drawManager.requestNextFrameListener(image ->
        {
            BufferedImage bufferedImage = (BufferedImage) image;
            byte[] imageBytes;
            try
            {
                imageBytes = convertImageToByteArray(bufferedImage);
            }
            catch (IOException e)
            {
                log.warn("Error converting image to byte array", e);
                return;
            }

            requestBodyBuilder.addFormDataPart("file", "image.png",
                    RequestBody.create(MediaType.parse("image/png"), imageBytes));
            buildRequestAndSend(url, requestBodyBuilder);
        });
    }


    private void buildRequestAndSend(HttpUrl url, MultipartBody.Builder requestBodyBuilder)
    {
        RequestBody requestBody = requestBodyBuilder.build();
        Request request = new Request.Builder()
                .url(url)
                .post(requestBody)
                .build();

        okHttpClient.newCall(request).enqueue(new Callback()
        {
            @Override
            public void onFailure(Call call, IOException e)
            {
                log.debug("Error submitting webhook", e);
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException
            {
                response.close();
            }
        });
    }

    private static byte[] convertImageToByteArray(BufferedImage bufferedImage) throws IOException
    {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        ImageIO.write(bufferedImage, "png", byteArrayOutputStream);
        return byteArrayOutputStream.toByteArray();
    }
    @Provides
    AColdOneCloggingConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(AColdOneCloggingConfig.class);
    }
}

package com.acoldoneclogging;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import javax.inject.Inject;
import javax.inject.Singleton;
import javax.sound.sampled.*;
import lombok.extern.slf4j.Slf4j;

@Singleton
@Slf4j
public class SoundEngine
{
	@Inject
	private AColdOneCloggingConfig config;
	private static final long CLIP_MTIME_UNLOADED = -2;

	private long lastClipMTime = CLIP_MTIME_UNLOADED;
	private Clip clip = null;

	private boolean loadClip(Sound sound) {
		try (InputStream resourceStream = SoundEngine.class.getResourceAsStream(sound.getResourceName())) {
			if (resourceStream == null) {
				log.warn("Failed to load sound " + sound + " as resource stream was null!");
			} else {
				try (InputStream fileStream = new BufferedInputStream(resourceStream);
					 AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(fileStream)) {
					clip.open(audioInputStream); // liable to error with pulseaudio, works on windows, no clue about mac
				}
				return true;
			}
		} catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
			log.warn("Failed to load sound " + sound, e);
		}
		return false;
	}

	public void playClip(Sound sound) {
		long currentMTime = System.currentTimeMillis();
		if (clip == null || currentMTime != lastClipMTime || !clip.isOpen()) {
			if (clip != null && clip.isOpen()) {
				clip.close();
			}

			try {
				clip = AudioSystem.getClip();
			} catch (LineUnavailableException e) {
				lastClipMTime = CLIP_MTIME_UNLOADED;
				log.warn("Failed to get clip for C Engineer sound " + sound, e);
				return;
			}

			lastClipMTime = currentMTime;
			if (!loadClip(sound)) {
				return;
			}
		}

		// User configurable volume
		FloatControl volume = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);
		float gain = 20f * (float) Math.log10(config.Volume() / 100f);
		gain = Math.min(gain, volume.getMaximum());
		gain = Math.max(gain, volume.getMinimum());
		volume.setValue(gain);

		// From RuneLite base client Notifier class:
		// Using loop instead of start + setFramePosition prevents the clip
		// from not being played sometimes, presumably a race condition in the
		// underlying line driver
		clip.loop(0);
	}

	public void close()
	{
		if(clip!=null && clip.isOpen())
		{
			clip.close();
		}
	}
}

package com.acoldoneclogging.Overlays;

import com.acoldoneclogging.AColdOneCloggingPlugin;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;

public class LeoSpinOverlay extends OverlayPanel {
    @Inject
    private Client client;
    private BufferedImage bufferedImage;
    public LeoSpinOverlay(){
        bufferedImage = ImageUtil.loadImageResource(LeoSpinOverlay.class,"/LeoSpin/0.gif");
        setPosition(OverlayPosition.DYNAMIC);
    }
    @Override
    public Dimension render(Graphics2D graphics){
        AlphaComposite alphaComposite = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1);
        graphics.setComposite(alphaComposite);
        graphics.drawImage(bufferedImage.getScaledInstance(128, 128, Image.SCALE_SMOOTH), 100, 100, null);
        return null;
    }
    public void setImage(String image){
        bufferedImage = ImageUtil.loadImageResource(AColdOneCloggingPlugin.class, image);
    }
}

package com.acoldoneclogging.Overlays;

import com.acoldoneclogging.AColdOneCloggingPlugin;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;

public class WideLeoOverlay extends OverlayPanel {
    @Inject
    private BufferedImage bufferedImage;
    private AlphaComposite alphaComposite = AlphaComposite.getInstance(AlphaComposite.SRC_OVER);
    public WideLeoOverlay() {
        bufferedImage = ImageUtil.loadImageResource(WideLeoOverlay.class, "/WideLeo/0.gif");
        setPosition(OverlayPosition.DYNAMIC);
    }
    @Override
    public Dimension render(Graphics2D graphics) {
        graphics.setComposite(alphaComposite);
        graphics.drawImage(bufferedImage.getScaledInstance(336, 112, Image.SCALE_SMOOTH), 100, 100, null);
        return null;
    }
    public void setImage(String image) {
        bufferedImage = ImageUtil.loadImageResource(AColdOneCloggingPlugin.class, image);
    }
}
package com.acoldoneclogging;

public enum Sound
{
	CollectionLog_1("/Clogging_1.wav"),
	CollectionLog_2("/Clogging_2.wav"),
	CollectionLog_3("/Clogging_3.wav"),
	CollectionLog_4("/Clogging_4.wav"),
	CollectionLog_5("/Clogging_5.wav"),
	CollectionLog_6("/Clogging_6.wav"),
	CollectionLog_7("/Clogging_7.wav"),
	CollectionLog_8("/Clogging_8.wav"),
	CollectionLog_9("/Clogging_9.wav"),
	CollectionLog_10("/Clogging_10.wav"),
	CollectionLog_11("/Clogging_11.wav"),
	CollectionLog_12("/Clogging_12.wav"),
	CollectionLog_13("/Clogging_13.wav"),
	CollectionLog_14("/Clogging_14.wav"),

	Balled_1("/Balled_1.wav"),

	TaskCompletion_1("/TaskCompletion_1.wav"),
	TaskCompletion_2("/TaskCompletion_2.wav"),
	TaskCompletion_3("/TaskCompletion_3.wav"),

	LeaguesTask_1("/LeaguesTask_1.wav"),
	LeaguesTask_2("/LeaguesTask_2.wav"),
	LeaguesTask_3("/LeaguesTask_3.wav");

	private final String ResourceName;

	Sound(String resName)
	{
		ResourceName=resName;

	}
	String getResourceName()
	{
		return ResourceName;
	}
}

package com.acoldoneclogging;

import net.runelite.client.config.*;

@ConfigGroup("AColdOneClogging")
public interface AColdOneCloggingConfig extends Config
{
	@ConfigSection(
			name = "Leo",
			description = "Cause Leo and his emotes deserve their own section",
			position = 1
	)
	String Leo="Leo";
	@ConfigSection(
			name = "Misc Sounds",
			description = "Any Extra funny sounds that i may add",
			position = 2
	)
	String Misc="misc";
	@Range(
		min = 0,
		max = 10000
	)
	@ConfigItem(
		keyName = "Volume",
		name = "Volume",
		description = "Control how loud the audio should be"
	)
	default int Volume()
	{
		return 100;
	}
	@ConfigItem(
			keyName = "AnnounceClog",
			name = "Collection Logs",
			description = "Announces Collection Logs with an Audio Clip"
	)
	default boolean AnnounceClog(){
		return true;
	}
	@ConfigItem(
			keyName = "AnnounceCombatTasks",
			name = "Combat Achievements",
			description = "Announces Combat Task Completions with an Audio Clip"
	)
	default boolean AnnounceCombatTasks(){
		return true;
	}

	@ConfigItem(
		keyName = "AnnounceLeaguesTasks",
		name = "Leagues Tasks",
		description = "Announces Leagues Task Completions with an Audio Clip"
	)
	default boolean AnnounceLeaguesTasks(){
		return true;
	}

	@ConfigItem(
			keyName = "Balled",
			name = "Getting Balled",
			description = "Get Balled Lmao",
			section = Misc
	)
	default boolean Balled()
	{
		return true;
	}
	@ConfigItem(
			keyName = "BalledScreenshot",
			name = "Screenshot of getting Balled",
			description = "Screenshot of you getting balled being shared in the #gatored-balled channel of the AColdOne Discord Server",
			section = Misc
	)
	default boolean BalledScreenshot()
	{
		return true;
	}

	@ConfigItem(
			keyName = "WebhookLink",
			name = "Discord Webhook Link",
			description = "Discord Webhook Link to send screenshot to",
			section = Misc
	)
	default String WebhookLink() { return "";}
	@ConfigItem(
			keyName = "WideLeo",
			name = "Wide Leo Emote",
			description = "Overlay the 7TV emote \"LeoWidenUp\" on the screen when saying \"!Leo\" ",
			position = 1,
			section = Leo
	)
	default boolean WideLeo()
	{
		return true;
	}
	@ConfigItem(
			keyName = "LeoSpin",
			name = "Leo Spin Emote",
			description = "Overlay the 7TV emote \"LeoSpin\" on the screen when saying \"!LeoSpin\" ",
			position = 2,
			section = Leo
	)
	default boolean LeoSpin()
	{
		return true;
	}
	@ConfigItem(
			keyName = "LoopAmount",
			name = "Loop Amount",
			description = "Number of times to loop the gif on the screen when saying \"!LeoSpin\" ",
			position = 3,
			section = Leo
	)
	default int LoopAmount()
	{
		return 3;
	}
}

package com.acoldoneclogging;

import lombok.Data;

@Data
class DiscordWebhookBody {
    private String content;
    private Embed embed;

    @Data
    static class Embed {
        final UrlEmbed image;
    }

    @Data
    static class UrlEmbed {
        final String url;
    }
}
package com.acoldoneclogging;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AColdOneCloggingPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AColdOneCloggingPlugin.class);
		RuneLite.main(args);
	}
}
