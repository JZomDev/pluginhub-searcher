package com.identificator;

import java.awt.BorderLayout;
import javax.swing.BorderFactory;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.border.EmptyBorder;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;

public class IdentificatorPanel extends PluginPanel
{
	private final JTextArea editor = new JTextArea();

	IdentificatorPanel()
	{
		getParent().setLayout(new BorderLayout());
		getParent().add(this, BorderLayout.CENTER);

		setLayout(new BorderLayout());
		setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
		setBackground(ColorScheme.DARK_GRAY_COLOR);

		editor.setTabSize(2);
		editor.setLineWrap(true);
		editor.setWrapStyleWord(true);

		JPanel notesContainer = new JPanel();
		notesContainer.setLayout(new BorderLayout());
		notesContainer.setBackground(ColorScheme.DARKER_GRAY_COLOR);

		editor.setOpaque(false);

		notesContainer.add(editor, BorderLayout.CENTER);
		notesContainer.setBorder(new EmptyBorder(10, 10, 10, 10));

		add(notesContainer, BorderLayout.CENTER);
	}

	void appendText(String data)
	{
		editor.append(data + "\n");
		editor.setCaretPosition(editor.getDocument().getLength());
	}
}

package com.identificator;

import com.google.common.collect.ImmutableList;
import com.google.inject.Inject;
import com.google.inject.Provides;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.util.Arrays;
import java.util.List;
import net.runelite.api.Animation;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.DecorativeObject;
import net.runelite.api.DynamicObject;
import net.runelite.api.GameObject;
import net.runelite.api.GroundObject;
import net.runelite.api.KeyCode;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.NPC;
import net.runelite.api.NPCComposition;
import net.runelite.api.NpcOverrides;
import net.runelite.api.ObjectComposition;
import net.runelite.api.Player;
import net.runelite.api.Renderable;
import net.runelite.api.Tile;
import net.runelite.api.TileItem;
import net.runelite.api.TileObject;
import net.runelite.api.WallObject;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.api.events.MenuOpened;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.ImageUtil;

@PluginDescriptor(
	name = "Identificator",
	description = "Show IDs for NPCs, objects, animations and more",
	tags = {"id", "identification"}
)
public class IdentificatorPlugin extends Plugin
{
	private static final String PANEL_DELIMITER = "\t";

	static final String CONFIG_GROUP = "identificator";
	static final int TILE_RADIUS = 20;
	static final List<MenuAction> OBJECT_MENU_TYPES = ImmutableList.of(
		MenuAction.EXAMINE_OBJECT,
		MenuAction.GAME_OBJECT_FIRST_OPTION,
		MenuAction.GAME_OBJECT_SECOND_OPTION,
		MenuAction.GAME_OBJECT_THIRD_OPTION,
		MenuAction.GAME_OBJECT_FOURTH_OPTION,
		MenuAction.GAME_OBJECT_FIFTH_OPTION
	);
	static final List<MenuAction> GROUND_ITEM_MENU_TYPES = ImmutableList.of(
		MenuAction.EXAMINE_ITEM_GROUND,
		MenuAction.GROUND_ITEM_FIRST_OPTION,
		MenuAction.GROUND_ITEM_SECOND_OPTION,
		MenuAction.GROUND_ITEM_THIRD_OPTION,
		MenuAction.GROUND_ITEM_FOURTH_OPTION,
		MenuAction.GROUND_ITEM_FIFTH_OPTION
	);

	StringBuilder hoverText = new StringBuilder();
	boolean showHoverInfo;
	boolean showOverheadInfo;
	private boolean showMenuInfo;
	boolean triggerWithShift;
	boolean showNpcId;
	boolean showNpcMorphId;
	boolean showNpcAnimationId;
	boolean showNpcPoseAnimationId;
	boolean showNpcGraphicId;
	boolean showPlayerAnimationId;
	boolean showPlayerPoseAnimationId;
	boolean showPlayerGraphicId;
	boolean showGameObjectId;
	boolean showGameObjectMorphId;
	boolean showGroundObjectId;
	boolean showGroundObjectMorphId;
	boolean showGroundObjectAnimationId;
	boolean showDecorativeObjectId;
	boolean showDecorativeObjectMorphId;
	boolean showDecorativeObjectAnimationId;
	boolean showWallObjectId;
	boolean showWallObjectMorphId;
	boolean showWallObjectAnimationId;
	boolean showGroundItemId;
	boolean showInventoryItemId;
	boolean showInterfaceItemId;
	boolean showInterfaceModelId;
	boolean showInterfaceSpriteId;
	boolean showNpcOverrideModelIds;
	boolean showNpcOverrideColours;
	boolean showNpcOverrideTextures;
	boolean showGameObjectAnimationId;
	boolean showNpcChatheadModelId;
	boolean showNpcChatheadAnimationId;
	Color colourHover;
	Color colourOverhead;
	Color colourMenu;
	Color colourChathead;
	Color colourInventory;
	Color colourInterface;

	private IdentificatorPanel panel;
	private NavigationButton navigationButton;
	private int lastTickCount;
	private int loginTickCount;
	private int lastPlayerAnimationId;
	private int lastPlayerPoseAnimationId;
	private int lastPlayerGraphicId;

	@Inject
	private Client client;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	private IdentificatorConfig config;

	@Inject
	private IdentificatorOverlay identificatorOverlay;

	@Inject
	private IdentificatorTextOverlay identificatorTextOverlay;

	@Inject
	private OverlayManager overlayManager;

	@Provides
	IdentificatorConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(IdentificatorConfig.class);
	}

	@Override
	protected void startUp()
	{
		loadOptions();
		overlayManager.add(identificatorOverlay);
		overlayManager.add(identificatorTextOverlay);

		panel = new IdentificatorPanel();

		final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "/panel_icon.png");

		navigationButton = NavigationButton.builder()
			.tooltip("Identificator")
			.icon(icon)
			.priority(100)
			.panel(panel)
			.build();

		if (config.logging())
		{
			clientToolbar.addNavigation(navigationButton);
		}
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(identificatorOverlay);
		overlayManager.remove(identificatorTextOverlay);
		clientToolbar.removeNavigation(navigationButton);
		panel = null;
		navigationButton = null;
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (!CONFIG_GROUP.equals(event.getGroup()))
		{
			return;
		}

		loadOptions();

		if ("logging".equals(event.getKey()))
		{
			if (config.logging())
			{
				clientToolbar.addNavigation(navigationButton);
			}
			else
			{
				clientToolbar.removeNavigation(navigationButton);
			}
		}
	}

	private void loadOptions()
	{
		showHoverInfo = config.showHoverInfo();
		showOverheadInfo = config.showOverheadInfo();
		showMenuInfo = config.showMenuInfo();
		triggerWithShift = config.triggerWithShift();
		showNpcId = config.showNpcId();
		showNpcMorphId = config.showNpcMorphId();
		showNpcAnimationId = config.showNpcAnimationId();
		showNpcPoseAnimationId = config.showNpcPoseAnimationId();
		showNpcGraphicId = config.showNpcGraphicId();
		showPlayerAnimationId = config.showPlayerAnimationId();
		showPlayerPoseAnimationId = config.showPlayerPoseAnimationId();
		showPlayerGraphicId = config.showPlayerGraphicId();
		showGameObjectId = config.showGameObjectId();
		showGameObjectMorphId = config.showGameObjectMorphId();
		showGroundObjectId = config.showGroundObjectId();
		showGroundObjectMorphId = config.showGroundObjectMorphId();
		showGroundObjectAnimationId = config.showGroundObjectAnimationId();
		showDecorativeObjectId = config.showDecorativeObjectId();
		showDecorativeObjectMorphId = config.showDecorativeObjectMorphId();
		showDecorativeObjectAnimationId = config.showDecorativeObjectAnimationId();
		showWallObjectId = config.showWallObjectId();
		showWallObjectMorphId = config.showWallObjectMorphId();
		showWallObjectAnimationId = config.showWallObjectAnimationId();
		showGroundItemId = config.showGroundItemId();
		showInventoryItemId = config.showInventoryItemId();
		showInterfaceItemId = config.showInterfaceItemId();
		showInterfaceModelId = config.showInterfaceModelId();
		showInterfaceSpriteId = config.showInterfaceSpriteId();
		showNpcOverrideModelIds = config.showNpcOverrideModelIds();
		showNpcOverrideColours = config.showNpcOverrideColours();
		showNpcOverrideTextures = config.showNpcOverrideTextures();
		showGameObjectAnimationId = config.showGameObjectAnimationId();
		showNpcChatheadModelId = config.showNpcChatheadModelId();
		showNpcChatheadAnimationId = config.showNpcChatheadAnimationId();
		colourHover = config.colourHover();
		colourOverhead = config.colourOverhead();
		colourMenu = config.colourMenu();
		colourChathead = config.colourChathead();
		colourInventory = config.colourInventory();
		colourInterface = config.colourInterface();
	}

	public boolean exclude(NPC npc)
	{
		return npc == null || npc.getName() == null || npc.getName().isEmpty() || "null".equals(npc.getName());
	}

	public boolean isGameObject(GameObject gameObject)
	{
		// 0 = Player
		// 1 = NPC
		// 2 = Object
		// 3 = Item
		return gameObject != null && (gameObject.getHash() >> 16 & 7) == 2;
	}

	public ObjectComposition getMorphedGameObject(GameObject gameObject)
	{
		if (isGameObject(gameObject))
		{
			ObjectComposition objectComposition = client.getObjectDefinition(gameObject.getId());
			if (objectComposition != null && objectComposition.getImpostorIds() != null)
			{
				return objectComposition.getImpostor();
			}
		}
		return null;
	}

	public ObjectComposition getMorphedTileObject(TileObject tileObject)
	{
		if (tileObject != null)
		{
			ObjectComposition objectComposition = client.getObjectDefinition(tileObject.getId());
			if (objectComposition != null && objectComposition.getImpostorIds() != null)
			{
				return objectComposition.getImpostor();
			}
		}
		return null;
	}

	public void wrapId(StringBuilder original, String prefix, int id)
	{
		wrapId(original, prefix, "" + id);
	}

	public void wrapId(StringBuilder original, String prefix, String text)
	{
		if (text.length() > 0)
		{
			original.append(original.length() > 0 ? " " : "").append("(").append(prefix).append(": ").append(text).append(")");
		}
	}

	public void appendId(StringBuilder text, int id)
	{
		appendId(text, "" + id);
	}

	public void appendId(StringBuilder original, String text)
	{
		if (text.length() > 0)
		{
			original.append(original.length() > 0 ? ", " : "").append(text);
		}
	}

	public void appendAnimation(StringBuilder text, Renderable renderable)
	{
		if (renderable instanceof DynamicObject)
		{
			Animation animation = ((DynamicObject) renderable).getAnimation();
			if (animation != null)
			{
				text.append(text.length() > 0 ? ", " : "").append(animation.getId());
			}
		}
	}

	public String gameObjectsToText(GameObject[] gameObjects)
	{
		StringBuilder text = new StringBuilder();

		if (gameObjects == null)
		{
			return text.toString();
		}

		for (GameObject gameObject : gameObjects)
		{
			if (isGameObject(gameObject))
			{
				appendId(text, gameObject.getId());
			}
		}

		return text.toString();
	}

	public String morphedGameObjectsToText(GameObject[] gameObjects)
	{
		StringBuilder text = new StringBuilder();

		if (gameObjects == null)
		{
			return text.toString();
		}

		for (GameObject gameObject : gameObjects)
		{
			if (isGameObject(gameObject))
			{
				ObjectComposition morphedGameObject = getMorphedGameObject(gameObject);
				if (morphedGameObject != null)
				{
					appendId(text, morphedGameObject.getId());
				}
			}
		}

		return text.toString();
	}

	public String gameObjectAnimationsToText(GameObject[] gameObjects)
	{
		StringBuilder text = new StringBuilder();

		if (gameObjects == null)
		{
			return text.toString();
		}

		for (GameObject gameObject : gameObjects)
		{
			if (isGameObject(gameObject))
			{
				appendAnimation(text, gameObject.getRenderable());
			}
		}

		return text.toString();
	}

	public String morphedTileObjectToText(TileObject tileObject)
	{
		ObjectComposition morphedTileObjectComposition = getMorphedTileObject(tileObject);
		if (morphedTileObjectComposition == null)
		{
			return "";
		}
		return "" + morphedTileObjectComposition.getId();
	}

	public String groundItemsToText(List<TileItem> tileItems)
	{
		StringBuilder text = new StringBuilder();

		if (tileItems == null)
		{
			return text.toString();
		}

		for (TileItem tileItem : tileItems)
		{
			if (tileItem != null)
			{
				appendId(text, tileItem.getId());
			}
		}

		return text.toString();
	}

	@Subscribe
	public void onMenuEntryAdded(MenuEntryAdded event)
	{
		if (triggerWithShift && !client.isKeyPressed(KeyCode.KC_SHIFT))
		{
			return;
		}

		MenuEntry entry = event.getMenuEntry();
		final MenuAction menuAction = entry.getType();
		final NPC npc = entry.getNpc();
		final Player player = entry.getPlayer();
		final int itemOp = entry.getItemOp();
		final int itemId = entry.getItemId();

		if (!exclude(npc))
		{
			hoverText = new StringBuilder();

			if (showNpcId)
			{
				// Both npc.getId() and npc.getTransformedComposition.getId() returns the transformed NPC id.
				// However npc.getComposition.getId() returns the original non-transformed NPC id.
				NPCComposition npcComposition = npc.getComposition();
				wrapId(hoverText, "ID", (npcComposition != null ? npcComposition.getId() : npc.getId()));
			}
			if (showNpcMorphId)
			{
				// Both npc.getId() and npc.getTransformedComposition.getId() returns the transformed NPC id.
				// However npc.getComposition.getId() returns the original non-transformed NPC id.
				NPCComposition npcComposition = npc.getComposition();
				if (npcComposition != null && npcComposition.getId() != npc.getId())
				{
					wrapId(hoverText, "Morph ID", npc.getId());
				}
			}
			if (showNpcAnimationId)
			{
				wrapId(hoverText, "A", npc.getAnimation());
			}
			if (showNpcPoseAnimationId)
			{
				wrapId(hoverText, "P", npc.getPoseAnimation());
			}
			if (showNpcGraphicId)
			{
				wrapId(hoverText, "G", npc.getGraphic());
			}
			NpcOverrides modelOverrides = npc.getModelOverrides();
			if (modelOverrides != null)
			{
				if (showNpcOverrideModelIds && modelOverrides.getModelIds() != null)
				{
					wrapId(hoverText, "M", Arrays.toString(modelOverrides.getModelIds()));
				}
				if (showNpcOverrideColours && modelOverrides.getColorToReplaceWith() != null)
				{
					wrapId(hoverText, "C", Arrays.toString(modelOverrides.getColorToReplaceWith()));
				}
				if (showNpcOverrideTextures && modelOverrides.getTextureToReplaceWith() != null)
				{
					wrapId(hoverText, "T", Arrays.toString(modelOverrides.getTextureToReplaceWith()));
				}
			}
		}
		else if (player != null)
		{
			hoverText = new StringBuilder();

			if (showPlayerAnimationId)
			{
				wrapId(hoverText, "A", player.getAnimation());
			}
			if (showPlayerPoseAnimationId)
			{
				wrapId(hoverText, "P", player.getPoseAnimation());
			}
			if (showPlayerGraphicId)
			{
				wrapId(hoverText, "G", player.getGraphic());
			}
		}
		else if (OBJECT_MENU_TYPES.contains(menuAction) && client.getSelectedSceneTile() != null)
		{
			hoverText = new StringBuilder();

			Tile tile = client.getSelectedSceneTile();

			GameObject[] gameObjects = tile.getGameObjects();
			GroundObject groundObject = tile.getGroundObject();
			DecorativeObject decorativeObject = tile.getDecorativeObject();
			WallObject wallObject = tile.getWallObject();

			if (showGameObjectId)
			{
				wrapId(hoverText, "ID", gameObjectsToText(gameObjects));
			}
			if (showGameObjectMorphId)
			{
				wrapId(hoverText, "Morph ID", morphedGameObjectsToText(gameObjects));
			}
			if (showGameObjectAnimationId)
			{
				wrapId(hoverText, "A", gameObjectAnimationsToText(gameObjects));
			}
			if (showGroundObjectId && groundObject != null)
			{
				wrapId(hoverText, "ID", groundObject.getId());
			}
			if (showGroundObjectMorphId)
			{
				wrapId(hoverText, "Morph ID", morphedTileObjectToText(groundObject));
			}
			if (showGroundObjectAnimationId && groundObject != null)
			{
				StringBuilder text = new StringBuilder();
				appendAnimation(text, groundObject.getRenderable());
				wrapId(hoverText, "A", text.toString());
			}
			if (showDecorativeObjectId && decorativeObject != null)
			{
				wrapId(hoverText, "ID", decorativeObject.getId());
			}
			if (showDecorativeObjectMorphId)
			{
				wrapId(hoverText, "Morph ID", morphedTileObjectToText(decorativeObject));
			}
			if (showDecorativeObjectAnimationId && decorativeObject != null)
			{
				StringBuilder text = new StringBuilder();
				appendAnimation(text, decorativeObject.getRenderable());
				appendAnimation(text, decorativeObject.getRenderable2());
				wrapId(hoverText, "A", text.toString());
			}
			if (showWallObjectId && wallObject != null)
			{
				wrapId(hoverText, "ID", wallObject.getId());
			}
			if (showWallObjectMorphId)
			{
				wrapId(hoverText, "Morph ID", morphedTileObjectToText(wallObject));
			}
			if (showWallObjectAnimationId && wallObject != null)
			{
				StringBuilder text = new StringBuilder();
				appendAnimation(text, wallObject.getRenderable1());
				appendAnimation(text, wallObject.getRenderable2());
				wrapId(hoverText, "A", text.toString());
			}
		}
		else if (GROUND_ITEM_MENU_TYPES.contains(menuAction) && client.getSelectedSceneTile() != null)
		{
			hoverText = new StringBuilder();

			Tile tile = client.getSelectedSceneTile();
			List<TileItem> groundItems = tile.getGroundItems();

			if (showGroundItemId && groundItems != null)
			{
				wrapId(hoverText, "ID", event.getIdentifier());
			}
		}
		else if (itemOp > -1 && itemId > 0)
		{
			hoverText = new StringBuilder();

			if (showInventoryItemId)
			{
				wrapId(hoverText, "ID", itemId);
			}
		}
	}

	@Subscribe
	public void onMenuOpened(MenuOpened event)
	{
		if (!showMenuInfo || (triggerWithShift && !client.isKeyPressed(KeyCode.KC_SHIFT)))
		{
			return;
		}

		MenuEntry[] menuEntries = client.getMenuEntries();
		for (int i = menuEntries.length - 1; i >= 0; i--)
		{
			if (!exclude(menuEntries[i].getNpc()) ||
				menuEntries[i].getPlayer() != null ||
				OBJECT_MENU_TYPES.contains(menuEntries[i].getType()) ||
				GROUND_ITEM_MENU_TYPES.contains(menuEntries[i].getType()) ||
				(menuEntries[i].getItemOp() > -1 && menuEntries[i].getItemId() > 0))
			{
				menuEntries[i].setTarget(menuEntries[i].getTarget() + ColorUtil.wrapWithColorTag(" " + hoverText, colourMenu));
			}
		}
		client.setMenuEntries(menuEntries);
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		Player player = client.getLocalPlayer();
		if (player == null)
		{
			return;
		}

		int tickCount = client.getTickCount() - loginTickCount;
		int timestamp = config.logRelativeTickTimestamp() ? (tickCount - lastTickCount) : tickCount;

		int playerAnimationId = player.getAnimation();
		int playerPoseAnimationId = player.getPoseAnimation();
		int playerGraphicId = player.getGraphic();

		if (playerAnimationId != lastPlayerAnimationId)
		{
			if (config.logPlayerAnimationId())
			{
				panel.appendText(timestamp + PANEL_DELIMITER + playerAnimationId);
			}
			lastTickCount = tickCount;
			lastPlayerAnimationId = playerAnimationId;
		}

		if (playerPoseAnimationId != lastPlayerPoseAnimationId)
		{
			if (config.logPlayerPoseAnimationId())
			{
				panel.appendText(timestamp + PANEL_DELIMITER + playerPoseAnimationId);
			}
			lastTickCount = tickCount;
			lastPlayerPoseAnimationId = playerPoseAnimationId;
		}

		if (playerGraphicId != lastPlayerGraphicId)
		{
			if (config.logPlayerGraphicId())
			{
				panel.appendText(timestamp + PANEL_DELIMITER + playerGraphicId);
			}
			lastTickCount = tickCount;
			lastPlayerGraphicId = playerGraphicId;
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		if (ChatMessageType.WELCOME.equals(event.getType()))
		{
			loginTickCount = client.getTickCount();
		}
	}
}

package com.identificator;

import com.google.inject.Inject;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import net.runelite.api.Client;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

public class IdentificatorTextOverlay extends Overlay
{
	private final IdentificatorPlugin plugin;
	private final Client client;

	@Inject
	IdentificatorTextOverlay(IdentificatorPlugin plugin, Client client)
	{
		this.plugin = plugin;
		this.client = client;
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_WIDGETS);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		renderInterfaces(graphics);

		renderChathead(graphics);

		renderInventory(graphics);

		return null;
	}

	private void renderInterfaces(Graphics2D graphics)
	{
		renderInterface(graphics, 214, 29); // Skill guide icons
	}

	private void renderInterface(Graphics2D graphics, int groupId, int childId)
	{
		Widget widget = client.getWidget(groupId, childId);

		if (widget == null)
		{
			return;
		}
		
		for (Widget child : widget.getDynamicChildren())
		{
			if (child == null)
			{
				continue;
			}

			StringBuilder text = new StringBuilder();

			if (plugin.showInterfaceItemId && child.getItemId() >= 0 && child.getItemId() != 7620) // blank
			{
				plugin.appendId(text, "I: " + child.getItemId());
			}
	
			if (plugin.showInterfaceModelId && child.getModelId() >= 0)
			{
				plugin.appendId(text, "M: " + child.getModelId());
			}
	
			if (plugin.showInterfaceSpriteId && child.getSpriteId() >= 0)
			{
				plugin.appendId(text, "S: " + child.getSpriteId());
			}

			if (text.length() <= 0)
			{
				return;
			}
	
			int width = graphics.getFontMetrics().stringWidth(text.toString());
			int textX = Math.max(child.getCanvasLocation().getX() - width / 2 + child.getWidth() / 2, 15);
			int textY = child.getCanvasLocation().getY();
	
			graphics.setColor(plugin.colourInterface);
			graphics.drawString(text.toString(), textX, textY);
		}
	}

	private void renderChathead(Graphics2D graphics)
	{
		Widget chathead = client.getWidget(ComponentID.DIALOG_NPC_HEAD_MODEL);

		if (chathead == null)
		{
			return;
		}

		StringBuilder text = new StringBuilder();

		if (plugin.showNpcChatheadModelId)
		{
			plugin.appendId(text, "M: " + chathead.getModelId());
		}

		if (plugin.showNpcChatheadAnimationId)
		{
			plugin.appendId(text, "A: " + chathead.getAnimationId());
		}

		if (text.length() <= 0)
		{
			return;
		}

		int width = graphics.getFontMetrics().stringWidth(text.toString());
		int textX = Math.max(chathead.getCanvasLocation().getX() - width / 2 + chathead.getWidth() / 2, 15);
		int textY = chathead.getCanvasLocation().getY() - 37;

		graphics.setColor(plugin.colourChathead);
		graphics.drawString(text.toString(), textX, textY);
	}

	private void renderInventory(Graphics2D graphics)
	{
		Widget inventory = client.getWidget(ComponentID.INVENTORY_CONTAINER);

		if (inventory == null || inventory.isHidden() ||
			!plugin.showOverheadInfo || !plugin.showInventoryItemId)
		{
			return;
		}

		for (Widget item : inventory.getDynamicChildren())
		{
			if (item.getItemId() == 6512) // null
			{
				continue;
			}
			StringBuilder text = new StringBuilder();
			plugin.appendId(text, item.getItemId());

			int textWidth = graphics.getFontMetrics().stringWidth(text.toString());
			int textHeight = graphics.getFontMetrics().getHeight();
			int textX = Math.max(item.getCanvasLocation().getX() - textWidth / 2 + item.getWidth() / 2, 15);
			int textY = item.getCanvasLocation().getY() + textHeight / 2 + item.getHeight() / 2;

			graphics.setColor(Color.BLACK);
			graphics.drawString(text.toString(), textX + 1, textY + 1);
			graphics.setColor(plugin.colourInventory);
			graphics.drawString(text.toString(), textX, textY);
		}
	}
}

package com.identificator;

import com.google.inject.Inject;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.util.Arrays;
import java.util.List;
import net.runelite.api.Client;
import net.runelite.api.DecorativeObject;
import net.runelite.api.GameObject;
import net.runelite.api.GroundObject;
import net.runelite.api.KeyCode;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.NPC;
import net.runelite.api.NPCComposition;
import net.runelite.api.NpcOverrides;
import net.runelite.api.Perspective;
import net.runelite.api.Player;
import net.runelite.api.Point;
import net.runelite.api.Tile;
import net.runelite.api.TileItem;
import net.runelite.api.WallObject;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;
import net.runelite.client.util.ColorUtil;

public class IdentificatorOverlay extends Overlay
{
	private final IdentificatorPlugin plugin;
	private final Client client;
	private final TooltipManager tooltipManager;

	@Inject
	IdentificatorOverlay(IdentificatorPlugin plugin, Client client, TooltipManager tooltipManager)
	{
		this.plugin = plugin;
		this.client = client;
		this.tooltipManager = tooltipManager;
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_SCENE);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (plugin.triggerWithShift && !client.isKeyPressed(KeyCode.KC_SHIFT))
		{
			return null;
		}

		if (plugin.showOverheadInfo)
		{
			for (NPC npc : client.getNpcs())
			{
				renderNpc(graphics, npc);
			}

			for (Player player : client.getPlayers())
			{
				renderPlayer(graphics, player);
			}

			Tile[][] tiles = client.getScene().getTiles()[client.getPlane()];

			final WorldPoint location = client.getLocalPlayer().getWorldLocation();
			final int radius = IdentificatorPlugin.TILE_RADIUS;
			final int width = tiles.length;
			final int height = tiles[0].length;

			for (int i = 0; i < width; i++)
			{
				for (int j = 0; j < height; j++)
				{
					Tile tile = tiles[i][j];
					if (tile == null)
					{
						continue;
					}

					if (location.distanceTo(tile.getWorldLocation()) > radius)
					{
						continue;
					}

					GameObject[] gameObjects = tile.getGameObjects();
					GroundObject groundObject = tile.getGroundObject();
					DecorativeObject decorativeObject = tile.getDecorativeObject();
					WallObject wallObject = tile.getWallObject();
					List<TileItem> groundItems = tile.getGroundItems();

					StringBuilder ids = new StringBuilder();
					StringBuilder animations = new StringBuilder();

					if (plugin.showGameObjectId)
					{
						plugin.appendId(ids, plugin.gameObjectsToText(gameObjects));
					}
					if (plugin.showGameObjectMorphId)
					{
						plugin.appendId(ids, plugin.morphedGameObjectsToText(gameObjects));
					}
					if (plugin.showGameObjectAnimationId)
					{
						plugin.appendId(animations, plugin.gameObjectAnimationsToText(gameObjects));
					}
					if (plugin.showGroundObjectId && groundObject != null)
					{
						plugin.appendId(ids, groundObject.getId());
					}
					if (plugin.showGroundObjectMorphId)
					{
						plugin.appendId(ids, plugin.morphedTileObjectToText(groundObject));
					}
					if (plugin.showGroundObjectAnimationId && groundObject != null)
					{
						plugin.appendAnimation(animations, groundObject.getRenderable());
					}
					if (plugin.showDecorativeObjectId && decorativeObject != null)
					{
						plugin.appendId(ids, decorativeObject.getId());
					}
					if (plugin.showDecorativeObjectMorphId)
					{
						plugin.appendId(ids, plugin.morphedTileObjectToText(decorativeObject));
					}
					if (plugin.showDecorativeObjectAnimationId && decorativeObject != null)
					{
						plugin.appendAnimation(animations, decorativeObject.getRenderable());
						plugin.appendAnimation(animations, decorativeObject.getRenderable2());
					}
					if (plugin.showWallObjectId && wallObject != null)
					{
						plugin.appendId(ids, wallObject.getId());
					}
					if (plugin.showWallObjectMorphId)
					{
						plugin.appendId(ids, plugin.morphedTileObjectToText(wallObject));
					}
					if (plugin.showWallObjectAnimationId && wallObject != null)
					{
						plugin.appendAnimation(animations, wallObject.getRenderable1());
						plugin.appendAnimation(animations, wallObject.getRenderable2());
					}
					if (plugin.showGroundItemId)
					{
						plugin.appendId(ids, plugin.groundItemsToText(groundItems));
					}

					StringBuilder text = new StringBuilder();
					plugin.wrapId(text, "ID", ids.toString());
					plugin.wrapId(text, "A", animations.toString());

					if (text.length() <= 0)
					{
						continue;
					}

					final Point textLocation = Perspective.getCanvasTextLocation(client, graphics, tile.getLocalLocation(), text.toString(), 40);

					if (textLocation != null)
					{
						OverlayUtil.renderTextLocation(graphics, textLocation, text.toString(), plugin.colourOverhead);
					}
				}
			}
		}

		if (plugin.showHoverInfo && plugin.hoverText.length() > 0 && (isHoveringGameScene() || isHoveringInventory()))
		{
			tooltipManager.add(new Tooltip(ColorUtil.wrapWithColorTag(plugin.hoverText.toString(), plugin.colourHover)));
		}

		return null;
	}

	private boolean isHoveringGameScene()
	{
		MenuEntry[] menuEntries = client.getMenuEntries();
		for (int i = menuEntries.length - 1; i >= 0; i--)
		{
			if (MenuAction.WALK.equals(menuEntries[i].getType()))
			{
				return true;
			}
		}
		return false;
	}

	private boolean isHoveringInventory()
	{
		MenuEntry[] menuEntries = client.getMenuEntries();
		for (int i = menuEntries.length - 1; i >= 0; i--)
		{
			if (menuEntries[i].getItemOp() > -1 && menuEntries[i].getItemId() > 0)
			{
				return true;
			}
		}
		return false;
	}

	private void renderNpc(Graphics2D graphics, NPC npc)
	{
		if (plugin.exclude(npc))
		{
			return;
		}

		StringBuilder text = new StringBuilder();

		if (plugin.showNpcId)
		{
			// Both npc.getId() and npc.getTransformedComposition.getId() returns the transformed NPC id.
			// However npc.getComposition.getId() returns the original non-transformed NPC id.
			NPCComposition npcComposition = npc.getComposition();
			plugin.wrapId(text, "ID", (npcComposition != null ? npcComposition.getId() : npc.getId()));
		}

		if (plugin.showNpcMorphId)
		{
			// Both npc.getId() and npc.getTransformedComposition.getId() returns the transformed NPC id.
			// However npc.getComposition.getId() returns the original non-transformed NPC id.
			NPCComposition npcComposition = npc.getComposition();
			if (npcComposition != null && npcComposition.getId() != npc.getId())
			{
				plugin.wrapId(text, "Morph ID", npc.getId());
			}
		}

		if (plugin.showNpcAnimationId)
		{
			plugin.wrapId(text, "A", npc.getAnimation());
		}

		if (plugin.showNpcPoseAnimationId)
		{
			plugin.wrapId(text, "P", npc.getPoseAnimation());
		}

		if (plugin.showNpcGraphicId)
		{
			plugin.wrapId(text, "G", npc.getGraphic());
		}

		NpcOverrides modelOverrides = npc.getModelOverrides();
		if (modelOverrides != null)
		{
			if (plugin.showNpcOverrideModelIds && modelOverrides.getModelIds() != null)
			{
				plugin.wrapId(text, "M", Arrays.toString(modelOverrides.getModelIds()));
			}

			if (plugin.showNpcOverrideColours && modelOverrides.getColorToReplaceWith() != null)
			{
				plugin.wrapId(text, "C", Arrays.toString(modelOverrides.getColorToReplaceWith()));
			}

			if (plugin.showNpcOverrideTextures && modelOverrides.getTextureToReplaceWith() != null)
			{
				plugin.wrapId(text, "T", Arrays.toString(modelOverrides.getTextureToReplaceWith()));
			}
		}

		if (text.length() <= 0)
		{
			return;
		}

		final Point textLocation = npc.getCanvasTextLocation(graphics, text.toString(), npc.getLogicalHeight() + 40);

		if (textLocation != null)
		{
			OverlayUtil.renderTextLocation(graphics, textLocation, text.toString(), plugin.colourOverhead);
		}
	}

	private void renderPlayer(Graphics2D graphics, Player player)
	{
		if (player == null)
		{
			return;
		}

		StringBuilder text = new StringBuilder();

		if (plugin.showPlayerAnimationId)
		{
			plugin.wrapId(text, "A", player.getAnimation());
		}

		if (plugin.showPlayerPoseAnimationId)
		{
			plugin.wrapId(text, "P", player.getPoseAnimation());
		}

		if (plugin.showPlayerGraphicId)
		{
			plugin.wrapId(text, "G", player.getGraphic());
		}

		if (text.length() <= 0)
		{
			return;
		}

		final Point textLocation = player.getCanvasTextLocation(graphics, text.toString(), player.getLogicalHeight() + 40);

		if (textLocation != null)
		{
			OverlayUtil.renderTextLocation(graphics, textLocation, text.toString(), plugin.colourOverhead);
		}
	}
}

package com.identificator;

import java.awt.Color;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup(IdentificatorPlugin.CONFIG_GROUP)
public interface IdentificatorConfig extends Config
{
	@ConfigItem(
		keyName = "showHoverInfo",
		name = "Show hover info",
		description = "Whether to show identification info on mouse hover",
		position = 0
	)
	default boolean showHoverInfo()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showOverheadInfo",
		name = "Show overhead info",
		description = "Whether to show identification info above NPCs and objects",
		position = 1
	)
	default boolean showOverheadInfo()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showMenuInfo",
		name = "Show menu info",
		description = "Whether to append identification info in menus",
		position = 2
	)
	default boolean showMenuInfo()
	{
		return true;
	}

	@ConfigItem(
		keyName = "triggerWithShift",
		name = "Trigger with shift",
		description = "Whether the identification info should only be triggered when the shift key is held down",
		position = 3
	)
	default boolean triggerWithShift()
	{
		return false;
	}

	@ConfigSection(
		name = "Options",
		description = "Options for which IDs to display",
		position = 4
	)
	String optionsSection = "optionsSection";

	@ConfigItem(
		keyName = "showNpcId",
		name = "Show NPC id",
		description = "Whether to display the id of an NPC",
		position = 5,
		section = optionsSection
	)
	default boolean showNpcId()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showNpcMorphId",
		name = "Show NPC morph id",
		description = "Whether to display the current transformed/morph id of an NPC",
		position = 6,
		section = optionsSection
	)
	default boolean showNpcMorphId()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showNpcAnimationId",
		name = "Show NPC animation id",
		description = "Whether to display the current animation id of an NPC",
		position = 7,
		section = optionsSection
	)
	default boolean showNpcAnimationId()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showNpcPoseAnimationId",
		name = "Show NPC pose animation id",
		description = "Whether to display the current pose animation id of an NPC",
		position = 8,
		section = optionsSection
	)
	default boolean showNpcPoseAnimationId()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showNpcGraphicId",
		name = "Show NPC graphic id",
		description = "Whether to display the current graphic id of an NPC",
		position = 9,
		section = optionsSection
	)
	default boolean showNpcGraphicId()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showPlayerAnimationId",
		name = "Show player animation id",
		description = "Whether to display the current animation id of a player",
		position = 10,
		section = optionsSection
	)
	default boolean showPlayerAnimationId()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showPlayerPoseAnimationId",
		name = "Show player pose animation id",
		description = "Whether to display the current pose animation id of a player",
		position = 11,
		section = optionsSection
	)
	default boolean showPlayerPoseAnimationId()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showPlayerGraphicId",
		name = "Show player graphic id",
		description = "Whether to display the current graphic id of a player",
		position = 12,
		section = optionsSection
	)
	default boolean showPlayerGraphicId()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showGameObjectId",
		name = "Show game object id",
		description = "Whether to display the id of a game object",
		position = 13,
		section = optionsSection
	)
	default boolean showGameObjectId()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showGameObjectMorphId",
		name = "Show game object morph id",
		description = "Whether to display the current transformed/morph id of a game object",
		position = 14,
		section = optionsSection
	)
	default boolean showGameObjectMorphId()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showGameObjectAnimationId",
		name = "Show game object animation id",
		description = "Whether to display the animation id of a dynamic game object.<br>" +
			"Make sure to hover/interact with the base tile(s) of the object.",
		position = 15,
		section = optionsSection
	)
	default boolean showGameObjectAnimationId()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showGroundObjectId",
		name = "Show ground object id",
		description = "Whether to display the id of a ground object",
		position = 16,
		section = optionsSection
	)
	default boolean showGroundObjectId()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showGroundObjectMorphId",
		name = "Show ground object morph id",
		description = "Whether to display the current transformed/morph id of a ground object",
		position = 17,
		section = optionsSection
	)
	default boolean showGroundObjectMorphId()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showGroundObjectAnimationId",
		name = "Show ground object animation id",
		description = "Whether to display the animation id of a dynamic ground object",
		position = 18,
		section = optionsSection
	)
	default boolean showGroundObjectAnimationId()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showDecorativeObjectId",
		name = "Show decorative object id",
		description = "Whether to display the id of a decorative object",
		position = 19,
		section = optionsSection
	)
	default boolean showDecorativeObjectId()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showDecorativeObjectMorphId",
		name = "Show decorative object morph id",
		description = "Whether to display the current transformed/morph id of a decorative object",
		position = 20,
		section = optionsSection
	)
	default boolean showDecorativeObjectMorphId()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showDecorativeObjectAnimationId",
		name = "Show decorative object animation id",
		description = "Whether to display the animation id of a dynamic decorative object",
		position = 21,
		section = optionsSection
	)
	default boolean showDecorativeObjectAnimationId()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showWallObjectId",
		name = "Show wall object id",
		description = "Whether to display the id of a wall object",
		position = 22,
		section = optionsSection
	)
	default boolean showWallObjectId()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showWallObjectMorphId",
		name = "Show wall object morph id",
		description = "Whether to display the current transformed/morph id of a wall object",
		position = 23,
		section = optionsSection
	)
	default boolean showWallObjectMorphId()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showWallObjectAnimationId",
		name = "Show wall object animation id",
		description = "Whether to display the animation id of a dynamic wall object",
		position = 24,
		section = optionsSection
	)
	default boolean showWallObjectAnimationId()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showGroundItemId",
		name = "Show ground item id",
		description = "Whether to display the id of a ground item",
		position = 25,
		section = optionsSection
	)
	default boolean showGroundItemId()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showInventoryItemId",
		name = "Show inventory item id",
		description = "Whether to display the id of an inventory item",
		position = 26,
		section = optionsSection
	)
	default boolean showInventoryItemId()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showInterfaceItemId",
		name = "Show interface item id",
		description = "Whether to display the item id (I) of an interface icon",
		position = 27,
		section = optionsSection
	)
	default boolean showInterfaceItemId()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showInterfaceModelId",
		name = "Show interface model id",
		description = "Whether to display the model id (M) of an interface icon",
		position = 28,
		section = optionsSection
	)
	default boolean showInterfaceModelId()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showInterfaceSpriteId",
		name = "Show interface sprite id",
		description = "Whether to display the sprite id (S) of an interface icon",
		position = 29,
		section = optionsSection
	)
	default boolean showInterfaceSpriteId()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showNpcOverrideModelIds",
		name = "Show NPC override model ids",
		description = "Whether to display NPC override model ids (M)",
		position = 30,
		section = optionsSection
	)
	default boolean showNpcOverrideModelIds()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showNpcOverrideColours",
		name = "Show NPC override model colours",
		description = "Whether to display NPC override model colours (C)",
		position = 31,
		section = optionsSection
	)
	default boolean showNpcOverrideColours()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showNpcOverrideTextures",
		name = "Show NPC override model textures",
		description = "Whether to display NPC override model textures (T)",
		position = 32,
		section = optionsSection
	)
	default boolean showNpcOverrideTextures()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showNpcChatheadModelId",
		name = "Show NPC chathead model ID",
		description = "Whether to display NPC chathead model ID",
		position = 33,
		section = optionsSection
	)
	default boolean showNpcChatheadModelId()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showNpcChatheadAnimationId",
		name = "Show NPC chathead animation ID",
		description = "Whether to display NPC chathead animation ID",
		position = 34,
		section = optionsSection
	)
	default boolean showNpcChatheadAnimationId()
	{
		return false;
	}

	@ConfigSection(
		name = "Logging",
		description = "Options for logging tick timestamp and player related IDs in a side panel",
		position = 35
	)
	String loggingSection = "optionsLogging";

	@ConfigItem(
		keyName = "logging",
		name = "Enable logging",
		description = "Whether to enable logging of tick timestamp and player related IDs in a side panel",
		position = 36,
		section = loggingSection
	)
	default boolean logging()
	{
		return false;
	}

	@ConfigItem(
		keyName = "logRelativeTickTimestamp",
		name = "Relative tick timestamp",
		description = "Whether to make the tick timestamp relative to the last logged entry or make it static",
		position = 37,
		section = loggingSection
	)
	default boolean logRelativeTickTimestamp()
	{
		return false;
	}

	@ConfigItem(
		keyName = "logPlayerAnimationId",
		name = "Log animation IDs",
		description = "Whether to log player animation IDs in a side panel",
		position = 38,
		section = loggingSection
	)
	default boolean logPlayerAnimationId()
	{
		return true;
	}

	@ConfigItem(
		keyName = "logPlayerPoseAnimationId",
		name = "Log pose animation IDs",
		description = "Whether to log player pose animation IDs in a side panel",
		position = 39,
		section = loggingSection
	)
	default boolean logPlayerPoseAnimationId()
	{
		return false;
	}

	@ConfigItem(
		keyName = "logPlayerGraphicId",
		name = "Log graphic IDs",
		description = "Whether to log player graphic IDs in a side panel",
		position = 40,
		section = loggingSection
	)
	default boolean logPlayerGraphicId()
	{
		return false;
	}

	@ConfigSection(
		name = "Colours",
		description = "Options for the text colours",
		position = 41
	)
	String coloursSection = "coloursSection";

	@Alpha
	@ConfigItem(
		keyName = "colourHover",
		name = "Hover text",
		description = "The colour of the hover info text",
		position = 42,
		section = coloursSection
	)
	default Color colourHover()
	{
		return Color.WHITE;
	}

	@Alpha
	@ConfigItem(
		keyName = "colourOverhead",
		name = "Overhead text",
		description = "The colour of the overhead info text",
		position = 43,
		section = coloursSection
	)
	default Color colourOverhead()
	{
		return Color.WHITE;
	}

	@Alpha
	@ConfigItem(
		keyName = "colourMenu",
		name = "Menu text",
		description = "The colour of the menu info text",
		position = 44,
		section = coloursSection
	)
	default Color colourMenu()
	{
		return new Color(170, 110, 0);
	}

	@Alpha
	@ConfigItem(
		keyName = "colourChathead",
		name = "Chathead text",
		description = "The colour of the chathead info text",
		position = 45,
		section = coloursSection
	)
	default Color colourChathead()
	{
		return Color.BLACK;
	}

	@Alpha
	@ConfigItem(
		keyName = "colourInventory",
		name = "Inventory text",
		description = "The colour of the inventory info text",
		position = 46,
		section = coloursSection
	)
	default Color colourInventory()
	{
		return Color.WHITE;
	}

	@Alpha
	@ConfigItem(
		keyName = "colourInterface",
		name = "Interface text",
		description = "The colour of the interface info text",
		position = 47,
		section = coloursSection
	)
	default Color colourInterface()
	{
		return Color.WHITE;
	}
}

package com.identificator;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class IdentificatorPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(IdentificatorPlugin.class);
		RuneLite.main(args);
	}
}
