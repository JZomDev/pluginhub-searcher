package ejedev.chompyhunter;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ChompyHunterPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ChompyHunterPlugin.class);
		RuneLite.main(args);
	}
}

package ejedev.chompyhunter;
import lombok.AccessLevel;
import lombok.Data;
import lombok.Getter;
import net.runelite.api.NPC;
import java.time.temporal.ChronoUnit;
import java.time.Instant;

@Data
class Chompy {
    @Getter(AccessLevel.PACKAGE)
    private final NPC npc;
    @Getter(AccessLevel.PACKAGE)
    private Instant spawnTime;

    Chompy(NPC npc)
    {
        this.npc = npc;
        this.spawnTime = Instant.now().plus(60,
                ChronoUnit.SECONDS);;
    }
}
package ejedev.chompyhunter;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("chompyhunter")
public interface ChompyHunterConfig extends Config
{
    @ConfigItem(
            keyName = "notifyChompy",
            name = "Notify on spawn",
            description = "Sends a notification when a chompy spawns",
            position = 1
    )
    default boolean notifyChompySpawn()
    {
        return false;
    }
    @ConfigItem(
        keyName = "autoHide",
        name = "Autohide",
        description = "Hide plugin when not in Castle Wars or Feldip Hiills regions",
        position = 2
    )
default boolean autoHide()
{
    return true;
}
@ConfigItem(
        keyName = "autoHideTimeout",
        name = "Autohide Timeout",
        description = "Timeout in seconds when leaving region",
        position = 3
)
default int autoHideTimeout()
{
    return 60;
}
}
package ejedev.chompyhunter;
import net.runelite.api.*;
import net.runelite.client.ui.overlay.*;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;
import javax.inject.Inject;
import java.awt.*;
import java.time.Duration;
import java.time.Instant;
import static net.runelite.api.MenuAction.RUNELITE_OVERLAY;
import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class ChompyHunterInfoOverlay extends OverlayPanel {
    private final ChompyHunterPlugin plugin;
    private final Client client;
    static final String CHOMPY_RESET = "Reset";

    @Inject
    public ChompyHunterInfoOverlay(ChompyHunterPlugin plugin, Client client) {
        super(plugin);
        setPosition(OverlayPosition.TOP_LEFT);
        this.plugin = plugin;
        this.client = client;
        getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Chompy Overlay"));
        getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY, CHOMPY_RESET, "Chompy Overlay"));
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (!plugin.getPanelEnabled()) {
            return null;
        } else {
            panelComponent.setPreferredSize(new Dimension(175, 0));
            panelComponent.getChildren().add(TitleComponent.builder()
                    .text("Chompy Hunter")
                    .color(Color.GREEN)
                    .build());
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Chompies This Session:")
                    .right(Integer.toString(plugin.getChompyKills()))
                    .build());
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Chompies Killed Total:")
                    .right(Integer.toString(plugin.getChompyTotalKills()))
                    .build());
            if (plugin.getChompyKills() > 0) {
                float elapsed = (float) (((Duration.between(plugin.getStartTime(), Instant.now()).getSeconds()) /60.0) /60.0);
                int perHour = (int) (plugin.getChompyKills() / elapsed);
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Per hour:")
                        .right(Integer.toString(perHour))
                        .build());
            }
            return super.render(graphics);
        }
    }
}

package ejedev.chompyhunter;
import com.google.inject.Provides;
import lombok.AccessLevel;
import lombok.Getter;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Player;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.NpcDespawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import javax.inject.Inject;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.api.events.NpcSpawned;
import net.runelite.api.NPC;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayManager;
import java.time.Instant;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.Notifier;

@PluginDescriptor(
        name = "Chompy Hunter",
        description = "A plugin to overlay chompy birds with a timer and colour based on remaining time till despawn. This is an updated version originally by ejedev.",
        tags = {"chompy", "bird", "hunt", "hunting", "chompies", "track", "count", "western"}
)

public class ChompyHunterPlugin extends Plugin{

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private ChompyHunterConfig config;

    static final String AUTO_HIDE_KEY = "autoHide";
    private static final Pattern Chompy_KC_REGEX = Pattern.compile("You've scratched up a total of.*");

    private static final List<Integer> CW_Feldhip_REGION_IDS = Arrays.asList(
            9263,
            9519,
            9775,
            10051,
            9774,
            10030,
            10286,
            10542
    );

    private int lastRegionId = -1;
    private boolean panelEnabled = false;

    @Provides
    ChompyHunterConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(ChompyHunterConfig.class);
    }

    @Override
    protected void startUp()
    {
        overlayManager.add(overlay);
        overlayManager.add(overlayInfo);
        chompies.clear();
        ChompyKills = 0;
        ChompyTotalKills = 0;
        StartTime = null;
        PluginTimeout = null;
        panelEnabled = false;
    }

    @Override
    protected void shutDown()
    {
        overlayManager.remove(overlay);
        overlayManager.remove(overlayInfo);
        chompies.clear();
        ChompyKills = 0;
        ChompyTotalKills = 0;
        StartTime = null;
        PluginTimeout = null;
        panelEnabled = false;
    }

    @Getter(AccessLevel.PACKAGE)
    private final Map<Integer, Chompy> chompies = new HashMap<>();

    @Getter(AccessLevel.PACKAGE)
    private int ChompyKills;
    @Getter(AccessLevel.PACKAGE)
    private int ChompyTotalKills;

    @Getter(AccessLevel.PACKAGE)
    private Instant StartTime;
    @Getter(AccessLevel.PACKAGE)
    private Instant PluginTimeout;

    @Inject
    private Client client;

    @Inject
    private ChompyHunterOverlay overlay;

    @Inject
    private ChompyHunterInfoOverlay overlayInfo;

    @Inject
    private Notifier notifier;

    public boolean getPanelEnabled()
    {
        return panelEnabled;
    }

    @Subscribe
    public void onChatMessage(ChatMessage chatMessage) {
        if (chatMessage.getMessage().equals("You scratch a notch on your bow for the chompy bird kill.") && chatMessage.getType() == ChatMessageType.SPAM) {
            if (StartTime == null) {
                StartTime = Instant.now();
                PluginTimeout = null;
            }
            panelEnabled = true;
            ChompyKills++;
            ChompyTotalKills++;
        }
        if (Chompy_KC_REGEX.matcher(chatMessage.getMessage()).matches() && chatMessage.getType() == ChatMessageType.GAMEMESSAGE) {
            ChompyTotalKills = Integer.parseInt(chatMessage.getMessage().replaceAll("[^0-9]", ""));
            if (StartTime == null) {
                StartTime = Instant.now();
                PluginTimeout = null;
            }
            panelEnabled = true;
        }
    }

    @Subscribe
   private void onNpcSpawned(NpcSpawned event)
    {
        NPC npc = event.getNpc();

        if (npc == null)
        {
            return;
        }

        String name = event.getNpc().getName();

        if (name != null) {
            if (name.equals("Chompy bird") && !chompies.containsKey(npc.getIndex())) {
                chompies.put(npc.getIndex(), new Chompy(npc));
                if (config.notifyChompySpawn()) {
                    notifier.notify("A chompy has spawned!");
                }
            }
        }
    }

   @Subscribe
    private void onNpcDespawned(NpcDespawned event)
    {
        NPC npc = event.getNpc();
        String name = event.getNpc().getName();
        if (name != null) {
            if (name.equals("Chompy bird") && chompies.containsKey(npc.getIndex())) {
                chompies.remove(event.getNpc().getIndex());
            }
        }
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event) {
        if (event.getKey().equals(AUTO_HIDE_KEY)) {
            boolean nearChompy = CW_Feldhip_REGION_IDS.contains(getRegionId());
            panelEnabled = nearChompy || !config.autoHide();
            if (panelEnabled && StartTime == null) {
                StartTime = Instant.now();
                PluginTimeout = null;
            }
        }
    }

    @Subscribe
    private void onGameTick(GameTick tick) {
        if(panelEnabled && config.autoHide()) {
            checkRegion();
        }
    }

    private void checkRegion() {
        final int regionId = getRegionId();

        if (!CW_Feldhip_REGION_IDS.contains(regionId)) {
            if (PluginTimeout == null) {
                PluginTimeout = Instant.now().plusSeconds(config.autoHideTimeout());
            } else if (PluginTimeout.isBefore(Instant.now())) {
                StartTime = null;
                PluginTimeout = null;
                panelEnabled = false;
            }

            lastRegionId = regionId;
            return;
        }
    }

    private int getRegionId() {
        Player player = client.getLocalPlayer();
        if (player == null) {
            return -1;
        }

        return WorldPoint.fromLocalInstance(client, player.getLocalLocation()).getRegionID();
    }
}
package ejedev.chompyhunter;
import net.runelite.api.*;
import net.runelite.api.Point;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.util.Text;
import javax.inject.Inject;
import java.awt.*;
import java.time.Duration;
import java.time.Instant;

public class ChompyHunterOverlay extends Overlay {

    private final ChompyHunterPlugin plugin;
    private final Client client;

    @Inject
    public ChompyHunterOverlay(ChompyHunterPlugin plugin, Client client) {
        this.plugin = plugin;
        this.client = client;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
       renderChompy(graphics);
       return null;
    }

    private void renderChompy(Graphics2D graphics)
    {
        for (Chompy chompy : plugin.getChompies().values())
        {
            Shape objectClickbox = chompy.getNpc().getConvexHull();
            long timeLeft = Duration.between(Instant.now(), chompy.getSpawnTime()).getSeconds();
            String timeLeftFormatted = timeLeft + "";
            Color color = Color.GREEN;
            if(timeLeft < 30 && timeLeft > 15) {
                color = Color.ORANGE;
            }
            else if(timeLeft<= 15) {
                color = Color.RED;
            }
            if (chompy.getNpc().getName() != null && chompy.getNpc().getId() == 1475 && timeLeft > -1)
            {
                renderPoly(graphics, color, objectClickbox);
                String npcName = Text.removeTags(chompy.getNpc().getName());
                Point textLocation = chompy.getNpc().getCanvasTextLocation(graphics, npcName, chompy.getNpc().getLogicalHeight() + 40);
                if (textLocation != null)
                {
                    OverlayUtil.renderTextLocation(graphics, textLocation, timeLeftFormatted, color);
                }
            }
        }
    }

    private void renderPoly(Graphics2D graphics, Color color, Shape polygon)
    {
        if (polygon != null)
        {
            graphics.setColor(color);
            graphics.setStroke(new BasicStroke(2));
            graphics.draw(polygon);
            graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), 20));
            graphics.fill(polygon);
        }
    }
}



