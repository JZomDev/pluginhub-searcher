package com.whiteknightrank;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class WhiteKnightRankPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(WhiteKnightRankPlugin.class);
		RuneLite.main(args);
	}
}
package com.whiteknightrank;

import java.util.HashMap;
import java.util.Map;
import lombok.Getter;

@Getter
public enum KnightRank
{
	MASTER(1300),
	ADEPT(800),
	NOBLE(500),
	PAGE(300),
	PEON(200),
	NOVICE(100),
	NO_RANK(0);

	private final int kc;

	private static final Map<Integer, KnightRank> BY_KC = new HashMap<>();

	static
	{
		for (KnightRank e : values())
		{
			BY_KC.put(e.kc, e);
		}
	}

	KnightRank(int kc)
	{
		this.kc = kc;
	}

	public String prettyName()
	{
		return name().substring(0, 1).toUpperCase() + name().substring(1).toLowerCase().replaceAll("_", " ");
	}

	public static KnightRank valueOfKc(int kc)
	{
		for (KnightRank e : values())
		{
			if (kc >= e.kc)
			{
				return e;
			}
		}

		return null;
	}
}

package com.whiteknightrank;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("whiteknightrank")
public interface WhiteKnightRankConfig extends Config
{
	@ConfigItem(keyName = "showOverlay", name = "Show Overlay", description = "Show an overlay when actively killing knights")
	default boolean showOverlay()
	{
		return true;
	}

	@ConfigItem(keyName = "showNotificationOnRank", name = "Notify on rank", description = "Receive a notification when you rank up")
	default boolean showNotificationOnRank()
	{
		return true;
	}
}

package com.whiteknightrank;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;

@Slf4j
public class QuestLogParser
{
	public static final int KC_LOG_COMPONENT_ID = 7798814;
	public static final String KC_LOG_TEXT_MATCH = "White Knight with a kill score of <col=\\d+>([\\d,]+)<col=\\d+>";
	public static final String QUEST_NAME = "Wanted!";

	@Inject
	private Client client;

	/**
	 * Parse the number of Black Knight kills from the widget text
	 *
	 * @return int
	 */
	public int getKc()
	{
		Widget widget = client.getWidget(KC_LOG_COMPONENT_ID);

		if (widget == null || widget.getText() == null)
		{
			return 0;
		}

		// <col=000080>I am currently a <col=800000>NOVICE<col=000080> White Knight with a kill score of <col=800000>152<col=000080>.
		Pattern pattern = Pattern.compile(KC_LOG_TEXT_MATCH);
		Matcher matcher = pattern.matcher(widget.getText());
		boolean found = matcher.find();

		if (found)
		{
			String kc = matcher.group(1).replaceAll(",", "");
			return Integer.parseInt(kc);
		}

		log.debug("Failed to parse KC from widget text: {}", widget.getText());

		return 0;
	}

	public boolean isWantedQuest()
	{
		Widget widgetTitle = client.getWidget(ComponentID.DIARY_TITLE);

		return widgetTitle != null && widgetTitle.getText() != null && widgetTitle.getText().contains(QUEST_NAME);
	}
}

package com.whiteknightrank;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.NPC;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.client.Notifier;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.NpcLootReceived;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(name = "White Knight Rank", description = "Track your White Knight rank and Black Knight kills.", tags = {"white", "knight", "black", "whiteknight", "blackknight"})
public class WhiteKnightRankPlugin extends Plugin
{
	public static final String CONFIG_GROUP = "whiteknightrank";
	public static final String CONFIG_KC_KEY = "kc";

	@Inject
	private Client client;

	@Inject
	private WhiteKnightRankConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private Notifier notifier;

	@Inject
	public ConfigManager configManager;

	@Inject
	private WhiteKnightOverlay overlay;

	@Inject
	private QuestLogParser questLogParser;

	@Getter
	private int kc = 0;

	@Getter
	private KnightRank knightRank = KnightRank.NO_RANK;

	@Getter
	private long lastKillTime;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() == GameState.LOGGED_IN)
		{
			loadKc();
		}
	}

	@Subscribe
	public void onWidgetLoaded(WidgetLoaded event)
	{
		if (event.getGroupId() != InterfaceID.DIARY || !questLogParser.isWantedQuest())
		{
			return;
		}

		// Opening the "Wanted!" quest log will fetch the kc and persist to disk
		kc = questLogParser.getKc();
		knightRank = KnightRank.valueOfKc(kc);
		saveKc();

		log.debug("KC from quest log: {}", kc);
	}

	@Subscribe
	public void onNpcLootReceived(final NpcLootReceived npcLootReceived)
	{
		final NPC npc = npcLootReceived.getNpc();

		if (KnightNpc.isKnight(npc.getId()))
		{
			trackKill(npc);
		}
	}

	private void trackKill(NPC npc)
	{
		int points = KnightNpc.getPoints(npc.getId());
		KnightRank oldRank = knightRank;

		kc += points;
		knightRank = KnightRank.valueOfKc(kc);
		lastKillTime = System.currentTimeMillis() / 1000L;

		if (config.showNotificationOnRank() && oldRank != knightRank)
		{
			notifier.notify("Congratulations! You are now a White Knight " + knightRank.prettyName() + "!");
		}

		saveKc();
		log.debug("Killed: {} (ID: {} / P: {}) / KC: {} / {}", npc.getName(), npc.getId(), points, kc, knightRank.prettyName());
	}

	/**
	 * Check if the overlay should be shown
	 * The conditions are that a knight is nearby or has been killed in the last 10 minutes
	 *
	 * @return boolean
	 */
	public boolean recentlyKilledKnight()
	{
		long currentTime = System.currentTimeMillis() / 1000L;
		return lastKillTime >= currentTime - 600;
	}

	private void saveKc()
	{
		configManager.setConfiguration(CONFIG_GROUP, CONFIG_KC_KEY, kc);
	}

	private void loadKc()
	{
		// if we already have KC loaded, don't overwrite it
		if (kc > 0)
		{
			return;
		}

		String loadedKc = configManager.getConfiguration(CONFIG_GROUP, CONFIG_KC_KEY);

		if (loadedKc != null)
		{
			kc = Integer.parseInt(loadedKc);
			knightRank = KnightRank.valueOfKc(kc);
			assert knightRank != null;
			log.debug("Loaded KC: {} / {}", loadedKc, knightRank.prettyName());
		}
	}

	@Provides
	WhiteKnightRankConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(WhiteKnightRankConfig.class);
	}
}

package com.whiteknightrank;

import java.util.HashMap;
import java.util.Map;

public class KnightNpc
{
	// https://chisel.weirdgloop.org/moid/npc_name.html#/elite%20?black%20knight|elite%20dark/
	private static final Map<Integer, Integer> BLACK_KNIGHTS = new HashMap<>(
		Map.ofEntries(
			// Black Knight
			Map.entry(516, 1),
			Map.entry(517, 1),
			Map.entry(1545, 1),
			Map.entry(4331, 1),
			Map.entry(4959, 1),
			Map.entry(11952, 1),
			Map.entry(11953, 1),
			// Elite Dark Warrior
			Map.entry(13465, 6),
			Map.entry(13466, 6),
			// Elite Dark Ranger
			Map.entry(13467, 6),
			Map.entry(13468, 6),
			// Elite Dark Mage
			Map.entry(13469, 6),
			Map.entry(13470, 6),
			// Elite Black Knight
			Map.entry(13463, 12),
			Map.entry(13464, 12)
		)
	);

	private static final Map<Integer, Integer> WHITE_KNIGHTS = new HashMap<>(
		Map.ofEntries(
			Map.entry(1798, 1),
			Map.entry(1799, 1),
			Map.entry(1800, 1),
			Map.entry(1829, 1),
			Map.entry(4114, 1),
			Map.entry(11948, 1),
			Map.entry(11949, 1),
			Map.entry(11950, 1),
			Map.entry(11951, 1)
		)
	);

	/**
	 * Find the points acquired for killing a Black (or White!) Knight
	 *
	 * @param npcId
	 * @return int
	 */
	public static int getPoints(int npcId)
	{
		// Killing a white knight will decrease your rank
		if (WHITE_KNIGHTS.containsKey(npcId))
		{
			return -1;
		}

		return BLACK_KNIGHTS.getOrDefault(npcId, 0);
	}

	public static boolean isKnight(int npcId)
	{
		return BLACK_KNIGHTS.containsKey(npcId) || WHITE_KNIGHTS.containsKey(npcId);
	}
}

package com.whiteknightrank;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

public class WhiteKnightOverlay extends OverlayPanel
{
	private final WhiteKnightRankPlugin plugin;
	private final WhiteKnightRankConfig config;

	@Inject
	private WhiteKnightOverlay(WhiteKnightRankPlugin plugin, WhiteKnightRankConfig config)
	{
		super(plugin);
		setPosition(OverlayPosition.TOP_CENTER);
		this.plugin = plugin;
		this.config = config;
		addMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "White Knight overlay");
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (!config.showOverlay() || !plugin.recentlyKilledKnight())
		{
			return null;
		}

		panelComponent.getChildren().add(TitleComponent.builder().text("White Knight Rank").color(Color.WHITE).build());
		panelComponent.getChildren().add(LineComponent.builder().left("Kills").right(String.valueOf(plugin.getKc())).build());
		panelComponent.getChildren().add(LineComponent.builder().left("Rank").right(plugin.getKnightRank().prettyName()).build());

		return super.render(graphics);
	}
}

