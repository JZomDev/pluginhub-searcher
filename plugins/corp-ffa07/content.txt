package com.corpffa;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CorpFfaPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CorpFfaPlugin.class);
		RuneLite.main(args);
	}
}
package com.corpffa;

import net.runelite.api.Player;

import java.util.ArrayList;
import java.util.List;

public class PlayerState {
    public int SpecCount;
    public List<Integer> BannedGear;
    public boolean IsRanger;
    public boolean HasLeft;
    public boolean IsTagged;
    public net.runelite.api.Player Player;
    public boolean HideFromList;
    public boolean HasBeenScreenshotted;

    public Integer Weapon;

    public PlayerState(Player player) {
        Player = player;
        SpecCount = 0;
        BannedGear = new ArrayList<>();
        IsRanger = false;
        HasLeft = false;
        IsTagged = false;
        HideFromList = false;
        Weapon = -1;
        HasBeenScreenshotted = false;
    }
}
package com.corpffa;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("corpFfa")
public interface CorpFfaConfig extends Config {
    @ConfigSection(
            name = "General",
            position = 0,
            closedByDefault = false,
            description = "General"
    )
    String generalSection = "General";

    @ConfigSection(
            name = "Banned Gear",
            position = 1,
            closedByDefault = false,
            description = "Banned Gear"
    )
    String bannedGearSection = "Banned Gear";

    @ConfigSection(
            name = "Hiding",
            position = 2,
            closedByDefault = false,
            description = "Hiding"
    )
    String hidingSection = "Hiding";

    @ConfigSection(
            name = "Colors",
            position = 3,
            closedByDefault = false,
            description = "Colors"
    )
    String colorsSection = "Colors";

    @ConfigSection(
            name = "Screenshots",
            position = 4,
            closedByDefault = false,
            description = "Screenshots"
    )
    String screenshotsSection = "Screenshots";

    @ConfigItem(
            keyName = "rangerColor",
            name = "Ranger Color",
            description = "The color to show rangers in",
            section = colorsSection
    )
    default Color rangerColor() {
        return Color.RED;
    }

    @ConfigItem(
            keyName = "cheaterColor",
            name = "Cheater Color",
            description = "The color to show cheaters in",
            section = colorsSection
    )
    default Color cheaterColor() {
        return Color.RED;
    }

    @ConfigItem(
            keyName = "goodColor",
            name = "Good Player Color",
            description = "The color to show good players in",
            section = colorsSection
    )
    default Color goodColor() {
        return Color.GREEN;
    }

    @ConfigItem(
            keyName = "defaultColor",
            name = "Default Color",
            description = "The default color to use",
            section = colorsSection
    )
    default Color defaultColor() {
        return Color.WHITE;
    }

    @ConfigItem(
            keyName = "gonePlayerColor",
            name = "Teled Player Color",
            description = "The color to use for players that have teleported/died/despawned",
            section = colorsSection
    )
    default Color gonePlayerColor() {
        return Color.BLACK;
    }

    @ConfigItem(
            keyName = "playerCountColor",
            name = "Player Count Color",
            description = "The color to show the player count in",
            section = colorsSection
    )
    default Color playerCountColor() {
        return Color.YELLOW;
    }

    @ConfigItem(
            keyName = "taggedPlayerColor",
            name = "Tagged Player Color",
            description = "The color to show tagged players in",
            section = colorsSection
    )
    default Color taggedPlayerColor() {
        return Color.CYAN;
    }

    @ConfigItem(
            keyName = "hideGoodPlayers",
            name = "Hide Good Players",
            description = "Should the plugin hide players that have 2 specced and have allowed gear?",
            section = hidingSection
    )
    default boolean hideGoodPlayers() {
        return false;
    }

    @ConfigItem(
            keyName = "hidePlayerCount",
            name = "Hide Player Count",
            description = "Should the player count be hidden?",
            section = hidingSection
    )
    default boolean hidePlayerCount() {
        return false;
    }

    @ConfigItem(
            keyName = "hideBanner",
            name = "Hide \"Corp FFA\" Banner",
            description = "Should the \"Corp FFA\" banner be hidden?",
            section = hidingSection
    )
    default boolean hideBanner() {
        return false;
    }

    @ConfigItem(
            keyName = "hideTeledPlayers",
            name = "Hide Teled Players",
            description = "Should teled/dead players be hidden in the player list?",
            section = hidingSection
    )
    default boolean hideTeledPlayers() {
        return false;
    }

    @Range(
            min = 0,
            max = 9
    )
    @ConfigItem(
            keyName = "bannedItemCountToShow",
            name = "Max Shown Items",
            description = "How many banned items should be shown on a player?",
            section = bannedGearSection
    )
    default int bannedItemCountToShow() {
        return 1;
    }

    @ConfigItem(
            keyName = "allowArclight",
            name = "Allow Arclight specs",
            description = "Allows Arclight to be used as a special attack weapon",
            section = bannedGearSection
    )
    default boolean allowArclight() {
        return false;
    }

    @ConfigItem(
            keyName = "taggedPlayers",
            name = "Tagged Players",
            description = "A list of player names that should be tagged. Separate names with commas (,)",
            section = generalSection
    )
    default String taggedPlayers() {
        return "";
    }

    @ConfigItem(
            keyName = "nonFriendChatLabel",
            name = "Non-friends chat label",
            description = "The label to give players who aren't in the FC.",
            section = generalSection
    )
    default String nonFriendChatLabel() {
        return "*";
    }

    @ConfigItem(
            keyName = "saveToClipboard",
            name = "Copy To Clipboard",
            description = "Should screenshots also be saved to the clipboard?",
            section = screenshotsSection
    )
    default boolean saveToClipboard() {
        return false;
    }

    @ConfigItem(
            keyName = "captureOnCrash",
            name = "Screenshot Crashers",
            description = "Should screenshots be taken of crashers?",
            section = screenshotsSection
    )
    default boolean captureOnCrash() {
        return false;
    }

    @ConfigItem(
            keyName = "nofifyOnCapture",
            name = "Notify On Screenshot",
            description = "Should a notification be given when a screenshot is taken?",
            section = screenshotsSection
    )
    default boolean nofifyOnCapture() {
        return false;
    }

}

package com.corpffa;

import java.awt.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map.Entry;
import java.util.stream.Collectors;
import javax.inject.Inject;

import net.runelite.api.*;
import net.runelite.api.Point;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.ui.overlay.components.LayoutableRenderableEntity;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

public class CorpFfaOverlay extends OverlayPanel {
    private final CorpFfaPlugin plugin;
    private final CorpFfaConfig config;
    private final Client client;

    @Inject
    public CorpFfaOverlay(CorpFfaPlugin plugin, Client client, CorpFfaConfig config) {
        super(plugin);

        setPosition(OverlayPosition.DYNAMIC);
        setPosition(OverlayPosition.DETACHED);
        setPosition(OverlayPosition.TOP_LEFT);
        setPreferredSize(new Dimension(100, 600));
        this.plugin = plugin;
        this.client = client;
        this.config = config;
    }

    @Override
    public Dimension render(Graphics2D graphics2D) {
        List<LayoutableRenderableEntity> renderableEntities = panelComponent.getChildren();
        renderableEntities.clear();
        Rectangle overlayPosition = super.getBounds();

        List<Entry<String, PlayerState>> playerStates = new ArrayList<>(plugin.PlayersInCave.entrySet());

        if (playerStates.size() <= 1) {
            return super.render(graphics2D);
        }

        long numberOfSpeccedPlayers = playerStates.stream().filter(playerEntry -> playerEntry.getValue().SpecCount >= 2).count();
        boolean shouldHaveSpecced = numberOfSpeccedPlayers > 3;


        // Sort list alphabetically
        playerStates.sort((player1, player2) -> {
            String playerName1 = player1.getKey();
            String playerName2 = player2.getKey();

            return playerName1.compareToIgnoreCase(playerName2);
        });

        if (!config.hideBanner()) {
            renderableEntities.add(TitleComponent.builder().text("Corp FFA").color(config.defaultColor()).build());
        }

        drawPlayerList(graphics2D, renderableEntities, overlayPosition, playerStates, shouldHaveSpecced);


        if (!config.hidePlayerCount()) {
            drawPlayerCount(renderableEntities, shouldHaveSpecced);
        }

        return super.render(graphics2D);
    }


    /**
     * Draw the list of players with highlights
     *
     * @param graphics2D
     * @param renderableEntities
     * @param overlayPosition
     * @param playerStates
     * @param shouldHaveSpecced  Are players expected to have specced yet?
     */
    private void drawPlayerList(Graphics2D graphics2D, List<LayoutableRenderableEntity> renderableEntities, Rectangle overlayPosition, List<Entry<String, PlayerState>> playerStates, boolean shouldHaveSpecced) {
        for (Entry<String, PlayerState> entry : playerStates) {
            PlayerState playerState = entry.getValue();
            Player player = playerState.Player;
            String nonFriendsChatIndicator = config.nonFriendChatLabel();

            if (playerState.HideFromList) {
                continue;
            }

            boolean hasBannedGear = playerState.BannedGear.size() > 0;
            boolean hasSpecced = playerState.SpecCount >= 2;
            boolean allGood = !hasBannedGear && hasSpecced;
            boolean isNonSpeccer = !hasSpecced && shouldHaveSpecced;

            String rightLabel = playerState.SpecCount + "";
            Color rightColor = config.defaultColor();

            String leftLabel = player.getName() + (player.isClanMember() || player.isFriend() || player.isFriendsChatMember() ? "" : " " + nonFriendsChatIndicator);
            Color leftColor = config.defaultColor();

            Color highlightColor = null;
            String highlightText = null;

            boolean shouldRender = true;

            if (playerState.HasLeft) {
                Color goneColor = config.gonePlayerColor();
                leftColor = goneColor;
                rightColor = goneColor;

                if (config.hideTeledPlayers()) {
                    shouldRender = false;
                }
            } else if (hasBannedGear && config.bannedItemCountToShow() > 0) {
                List<String> itemNames = playerState.BannedGear
                        .stream()
                        .limit(config.bannedItemCountToShow())
                        .map(gearId -> client.getItemDefinition(gearId).getName())
                        .collect(Collectors.toList());
                rightLabel = playerState.SpecCount + " - " + String.join(", ", itemNames);

                highlightPlayer(graphics2D, player, rightLabel, config.cheaterColor(), overlayPosition.x, overlayPosition.y);

                Color cheaterColor = config.cheaterColor();
                leftColor = cheaterColor;
                rightColor = cheaterColor;

            } else if (isNonSpeccer) {
                Color cheaterColor = config.cheaterColor();
                leftColor = cheaterColor;
                rightColor = cheaterColor;

                highlightColor = cheaterColor;
                highlightText = playerState.SpecCount + " spec";
                if (playerState.Weapon != -1) {
                    String weaponName = client.getItemDefinition(playerState.Weapon).getName();
                    String acronym = Arrays.stream(weaponName.split(" ")).map(str -> str.substring(0, 1)).collect(Collectors.joining(""));

                    highlightText += "( " + acronym + ")";
                }

            } else if (allGood) {
                Color goodColor = config.goodColor();
                leftColor = goodColor;
                rightColor = goodColor;

                if (config.hideGoodPlayers()) {
                    shouldRender = false;
                }
            }

            if (playerState.IsTagged) {
                Color taggedPlayerColor = config.taggedPlayerColor();

                highlightColor = taggedPlayerColor;
                highlightText = leftLabel;

                leftColor = taggedPlayerColor;
                leftLabel += "*";
                shouldRender = true;
            }

            if (shouldRender) {
                renderableEntities.add(
                        LineComponent.builder()
                                .leftColor(leftColor).left(leftLabel)
                                .rightColor(rightColor).right(rightLabel)
                                .build()
                );
                if (highlightText != null && highlightColor != null && !playerState.HasLeft) {
                    highlightPlayer(graphics2D, player, highlightText, highlightColor, overlayPosition.x, overlayPosition.y);
                }
            }

        }
    }


    private void drawPlayerCount(List<LayoutableRenderableEntity> renderableEntities, boolean showCount) {

        List<PlayerState> playersInCave = plugin.PlayersInCave.values()
                .stream()
                .filter(o -> !o.HasLeft)
                .collect(Collectors.toList());
        int playerCount = playersInCave.size();

        String playerCountText = "-";

        if (showCount) {
            playerCountText = playerCount + "";
        }

        renderableEntities.add(
                LineComponent.builder()
                        .leftColor(config.playerCountColor()).left("Players")
                        .rightColor(config.playerCountColor()).right(playerCountText)
                        .build()
        );
    }

    /**
     * Highlight a player with text
     *
     * @param graphics    Graphics object
     * @param actor       The players to highlight
     * @param text        The text to show
     * @param color       The color of the txt
     * @param xTextOffSet The X offset of the text (usually the overlay X position)
     * @param yTextOffSet The Y offset of the text (usually the overlay Y position)
     */
    private void highlightPlayer(Graphics2D graphics, Actor actor, String text, Color color, int xTextOffSet, int yTextOffSet) {
        Point poly = actor.getCanvasTextLocation(graphics, text, 20);
        if (poly == null) {
            return;
        }

        Point offsetPoint = new Point(poly.getX() - xTextOffSet, poly.getY() - yTextOffSet);

        OverlayUtil.renderTextLocation(graphics, offsetPoint, text, color);

    }
}


package com.corpffa;

import com.google.common.collect.ImmutableSet;
import com.google.inject.Provides;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ScheduledExecutorService;
import java.util.function.Consumer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.api.kit.KitType;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.DrawManager;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ImageCapture;
import net.runelite.client.util.ImageUploadStyle;

@Slf4j
@PluginDescriptor(
        name = "Corp FFA"
)

public class CorpFfaPlugin extends Plugin {
    @Inject
    private Client client;

    @Inject
    private CorpFfaConfig config;

    @Inject
    private CorpFfaOverlay overlay;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private ImageCapture imageCapture;


    @Inject
    private ScheduledExecutorService executor;

    @Inject
    DrawManager drawManager;

    @Provides
    CorpFfaConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(CorpFfaConfig.class);
    }


    public HashMap<String, PlayerState> PlayersInCave;

    /**
     * Is the player currently in the corp beast cave?
     */
    private boolean IsActive;

    private List<String> TaggedPlayers;

    private final Set<Integer> BannedItems = ImmutableSet.of(
            // Melee
            ItemID.DRAGON_HALBERD,
            ItemID.CRYSTAL_HALBERD,
            ItemID.CRYSTAL_HALBERD_24125,
            ItemID.DRAGON_CLAWS,
            ItemID.DRAGON_CLAWS_OR,
            ItemID.DRAGON_CLAWS_CR,
            ItemID.DRAGON_CLAWS_20784,
            ItemID.DRAGON_HUNTER_LANCE,
            ItemID.ZAMORAKIAN_HASTA,
            ItemID.VOIDWAKER,
            // Body
            ItemID.BANDOS_CHESTPLATE,
            ItemID.BANDOS_CHESTPLATE_OR,
            ItemID.OBSIDIAN_PLATEBODY,
            ItemID.FIGHTER_TORSO,
            ItemID.FIGHTER_TORSO_L,
            ItemID.FIGHTER_TORSO_OR,
            ItemID.FIGHTER_TORSO_LOR,
            ItemID.INQUISITORS_HAUBERK,
            ItemID.TORVA_PLATEBODY,
            ItemID.TORVA_PLATEBODY_DAMAGED,
            ItemID.SANGUINE_TORVA_PLATEBODY,
            ItemID.ECLIPSE_MOON_CHESTPLATE,
            ItemID.ECLIPSE_MOON_CHESTPLATE_BROKEN,
            ItemID.ECLIPSE_MOON_CHESTPLATE_29031,
            ItemID.BLOOD_MOON_CHESTPLATE,
            ItemID.BLOOD_MOON_CHESTPLATE_BROKEN,
            ItemID.BLOOD_MOON_CHESTPLATE_29043,
            ItemID.BLUE_MOON_CHESTPLATE,
            ItemID.BLUE_MOON_CHESTPLATE_BROKEN,
            ItemID.BLUE_MOON_CHESTPLATE_29037,
            ItemID.MIXED_HIDE_TOP,
            // Legs
            ItemID.BANDOS_TASSETS,
            ItemID.BANDOS_TASSETS_OR,
            ItemID.BANDOS_TASSETS_23646,
            ItemID.OBSIDIAN_PLATELEGS,
            ItemID.INQUISITORS_PLATESKIRT,
            ItemID.FREMENNIK_KILT,
            ItemID.TORVA_PLATELEGS,
            ItemID.TORVA_PLATELEGS_DAMAGED,
            ItemID.SANGUINE_TORVA_PLATELEGS,
            ItemID.ECLIPSE_MOON_TASSETS,
            ItemID.ECLIPSE_MOON_TASSETS_BROKEN,
            ItemID.ECLIPSE_MOON_TASSETS_29033,
            ItemID.BLOOD_MOON_TASSETS,
            ItemID.BLOOD_MOON_TASSETS_BROKEN,
            ItemID.BLOOD_MOON_TASSETS_29045,
            ItemID.BLUE_MOON_TASSETS,
            ItemID.BLUE_MOON_TASSETS_BROKEN,
            ItemID.BLUE_MOON_TASSETS_29039,
            // Ranged
            ItemID.TWISTED_BOW,
            ItemID.TOXIC_BLOWPIPE,
            ItemID.BLAZING_BLOWPIPE,
            ItemID.DRAGON_KNIFE,
            ItemID.DRAGON_KNIFE_22812,
            ItemID.DRAGON_KNIFE_22814,
            ItemID.DRAGON_KNIFEP,
            ItemID.DRAGON_KNIFEP_22808,
            ItemID.DRAGON_KNIFEP_22810
    );

    private final Set<Integer> RangedWeapons = ImmutableSet.of(
            ItemID.RUNE_CROSSBOW,
            ItemID.RUNE_CROSSBOW_23601,
            ItemID.DRAGON_CROSSBOW,
            ItemID.DRAGON_HUNTER_CROSSBOW,
            ItemID.ARMADYL_CROSSBOW,
            ItemID.ARMADYL_CROSSBOW_23611,
            ItemID.DARK_BOW,
            ItemID.DARK_BOW_12765,
            ItemID.DARK_BOW_12766,
            ItemID.DARK_BOW_12767,
            ItemID.DARK_BOW_12768,
            ItemID.DARK_BOW_20408,
            ItemID.ZARYTE_CROSSBOW,
            ItemID.ADAMANT_CROSSBOW
    );

    private final Set<Integer> GoodSpecWeapons = ImmutableSet.of(
            ItemID.DRAGON_WARHAMMER,
            ItemID.DRAGON_WARHAMMER_20785,
            ItemID.BANDOS_GODSWORD,
            ItemID.BANDOS_GODSWORD_20782,
            ItemID.BANDOS_GODSWORD_21060,
            ItemID.BANDOS_GODSWORD_OR,
            ItemID.ELDER_MAUL,
            ItemID.ELDER_MAUL_OR,
            ItemID.ELDER_MAUL_21205
    );

    private final Set<Integer> ArclightSpecWeapons = ImmutableSet.of(
            ItemID.EMBERLIGHT,
            ItemID.ARCLIGHT,
            ItemID.DARKLIGHT
    );

    private final Set<Integer> IgnoredAnimations = ImmutableSet.of(
            AnimationID.IDLE,
            AnimationID.CONSUMING,
            AnimationID.DEATH
    );

    private final Pattern receivedADropPattern = Pattern.compile("<col=[\\d\\w]+>([\\s\\w\\xa0\\-]+) received a drop: .+</col>");


    @Override
    protected void startUp() throws Exception {
        PlayersInCave = new HashMap<>();
        RefreshTaggedPlayers();
    }

    @Override
    protected void shutDown() throws Exception {
        overlayManager.remove(overlay);
        PlayersInCave.clear();
        IsActive = false;
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged gameStateChanged) {
        if (gameStateChanged.getGameState() == GameState.LOGGED_IN) {
            Player currentPlayer = client.getLocalPlayer();
            int location = currentPlayer.getWorldLocation().getRegionID();
            PlayersInCave.clear();

            //Corp cave - 11844
            IsActive = location == 11844;

            if (IsActive) {
                overlayManager.add(overlay);
                RefreshTaggedPlayers();
            }
        }

    }

    @Subscribe
    public void onPlayerDespawned(PlayerDespawned playerDespawned) {
        String playerName = playerDespawned.getPlayer().getName();
        if (PlayersInCave.containsKey(playerName)) {
            PlayerState playerState = PlayersInCave.get(playerName);
            playerState.HasLeft = true;
        }
    }

    @Subscribe
    public void onPlayerSpawned(PlayerSpawned playerSpawned) {
        if (!IsActive) {
            return;
        }
        Player player = playerSpawned.getPlayer();

        PlayerComposition playerComposition = player.getPlayerComposition();
        if (playerComposition == null) {
            return;
        }

        String playerName = player.getName();
        PlayerState playerState = GetOrAddPlayerState(player, playerName);

        playerState.HasLeft = false;


        boolean isTagged = DoTaggedCheck(playerState, playerName);

        boolean hadBannedGear = DoBannedGearCheck(playerState, playerComposition);

        if (!hadBannedGear && !isTagged) {
            playerState.HideFromList = true;
        }
    }

    @Subscribe
    public void onNpcSpawned(NpcSpawned npcSpawned) {
        NPC npc = npcSpawned.getNpc();
        if (npc.getCombatLevel() != 785) {
            return;
        }

        IsActive = true;
        PlayersInCave.clear();
        RefreshTaggedPlayers();
    }

    @Subscribe
    public void onChatMessage(ChatMessage chatMessage) {
        if (!IsActive) {
            return;
        }

        boolean isGameMessage = chatMessage.getType() == ChatMessageType.GAMEMESSAGE;
        if (!isGameMessage) {
            return;
        }

        Matcher matcher = receivedADropPattern.matcher(chatMessage.getMessage());
        boolean isLootMessage = matcher.find();
        if (!isLootMessage) {
            return;
        }

        String userName = matcher.group(1);
        if (!PlayersInCave.containsKey(userName)) {
            return;
        }

        PlayerState playerState = PlayersInCave.get(userName);
        boolean playerHasSpecced = playerState.SpecCount >= 2;
        if (playerHasSpecced) {
            return;
        }
        String message = "<col=FF0000>" + userName + " got the kill with " + playerState.SpecCount + " specs!</col>";

        client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", message, null);

    }

    @Subscribe
    public void onAnimationChanged(AnimationChanged e) {
        if (!IsActive) {
            return;
        }
        if (!(e.getActor() instanceof Player))
            return;
        Player player = (Player) e.getActor();

        int animationId = player.getAnimation();
        if (IgnoredAnimations.contains(animationId)) {
            return;
        }

        PlayerComposition playerComposition = player.getPlayerComposition();
        if (playerComposition == null) {
            return;
        }

        String playerName = player.getName();
        PlayerState playerState = GetOrAddPlayerState(player, playerName);

        playerState.HideFromList = false;
        playerState.HasLeft = false;

        Integer equippedWeapon = playerComposition.getEquipmentId(KitType.WEAPON);
        boolean isHoldingGoodSpecWeapon = GoodSpecWeapons.contains(equippedWeapon);
        isHoldingGoodSpecWeapon |= config.allowArclight() && ArclightSpecWeapons.contains(equippedWeapon);
        if (!isHoldingGoodSpecWeapon) {
            playerState.Weapon = equippedWeapon;
        } else {
            playerState.Weapon = -1;
        }

        DoTaggedCheck(playerState, playerName);
        DoRangerCheck(playerState, playerComposition);
        DoSpecCheck(playerState, player);

        boolean hasBannedGear = DoBannedGearCheck(playerState, playerComposition);

        if (hasBannedGear && !playerState.HasBeenScreenshotted && config.captureOnCrash()) {
            playerState.HasBeenScreenshotted = true;
            takeScreenshot("crash--" + playerName + "--");
        }

    }

    private boolean DoBannedGearCheck(PlayerState playerState, PlayerComposition playerComposition) {
        List<Integer> bannedGear = new ArrayList<>();
        if (config.bannedItemCountToShow() > 0) {
            bannedGear = GetBannedItems(playerComposition);
        }
        boolean hasBannedGear = bannedGear.size() > 0;
        if (hasBannedGear) {
            playerState.BannedGear = Stream.concat(playerState.BannedGear.stream(), bannedGear.stream())
                    .distinct()
                    .collect(Collectors.toList());
        }
        return hasBannedGear;
    }

    private boolean DoRangerCheck(PlayerState playerState, PlayerComposition playerComposition) {
        boolean isRanger = IsRanger(playerComposition);
        playerState.IsRanger = isRanger;
        return isRanger;
    }

    private boolean DoSpecCheck(PlayerState playerState, Player player) {
        boolean isSpeccing = IsSpeccing(player);
        if (isSpeccing) {
            playerState.SpecCount += 1;
        }
        return isSpeccing;
    }

    private boolean DoTaggedCheck(PlayerState playerState, String playerName) {
        if (playerName == null) {
            playerName = "";
        }
        boolean isTaggedPlayer = TaggedPlayers.contains(playerName.toLowerCase());
        playerState.IsTagged = isTaggedPlayer;
        return isTaggedPlayer;
    }

    private PlayerState GetOrAddPlayerState(Player player, String playerName) {
        return PlayersInCave.computeIfAbsent(playerName, k -> new PlayerState(player));
    }

    private boolean IsRanger(PlayerComposition playerComposition) {
        return RangedWeapons.contains(playerComposition.getEquipmentId(KitType.WEAPON));
    }

    private boolean IsSpeccing(Player player) {
        if (player == null) {
            return false;
        }

        final int animId = player.getAnimation();

        switch (animId) {
            case 7642: // BGS
            case 7643: // BGS
            case 1378: // DWH
            case 11124: // MAUL
                return true;
        }

        if ((animId == 2890 || animId == 11138) && config.allowArclight())
            return true;

        return false;
    }

    private List<Integer> GetBannedItems(PlayerComposition playerComposition) {
        List<Integer> illegalItems = new ArrayList<>();

        if (playerComposition == null) {
            return illegalItems;
        }

        List<Integer> equippedItems = Arrays.asList(
                playerComposition.getEquipmentId(KitType.TORSO),
                playerComposition.getEquipmentId(KitType.LEGS),
                playerComposition.getEquipmentId(KitType.WEAPON)
        );

        for (Integer equippedItem : equippedItems) {
            if (BannedItems.contains(equippedItem)) {
                illegalItems.add(equippedItem);
            }
        }

        return illegalItems;
    }


    public void RefreshTaggedPlayers() {
        TaggedPlayers = Arrays.stream(config.taggedPlayers().split(","))
                .map(a -> a.trim().toLowerCase())
                .collect(Collectors.toList());
    }

    private void takeScreenshot(String fileName) {
        boolean shouldNotify = config.nofifyOnCapture();
        boolean shouldCopyToClipboard = config.saveToClipboard();

        Consumer<Image> imageCallback = (img) ->
                executor.submit(() -> imageCapture.takeScreenshot((BufferedImage) img, fileName, "corp-ffa", shouldNotify, shouldCopyToClipboard ? ImageUploadStyle.CLIPBOARD : ImageUploadStyle.NEITHER));

        drawManager.requestNextFrameListener(imageCallback);
    }
}

