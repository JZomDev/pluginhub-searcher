package com.gauntletminimap;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class GauntletMinimapPluginTest {
	public static void main(String[] args) throws Exception {
		ExternalPluginManager.loadBuiltin(GauntletMinimapPlugin.class);
		RuneLite.main(args);
	}
}
package com.gauntletminimap;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup(GauntletMinimapConfig.CONFIG_GROUP)
public interface GauntletMinimapConfig extends Config {

	String CONFIG_GROUP = "gauntletMinimap";

	@ConfigSection(
			name = "Resources",
			description = "Resources section.",
			position = 0
	)
	String resourcesSection = "resources";

	@ConfigItem(
			keyName = "oreDeposit",
			name = "Ore Deposits",
			description = "Show the Ore Deposits (Mining) on the minimap.",
			section = "resources",
			position = 0
	)
	default boolean oreDeposit() {
		return true;
	}

	@ConfigItem(
			keyName = "phrenRoots",
			name = "Phren Roots",
			description = "Show the Phren Roots (Woodcutting) on the minimap.",
			section = "resources",
			position = 1
	)
	default boolean phrenRoots() {
		return true;
	}

	@ConfigItem(
			keyName = "linumTirinum",
			name = "Linum Tirinums",
			description = "Show the Linum Tirinums (Farming) on the minimap.",
			section = "resources",
			position = 2
	)
	default boolean linumTirinum() {
		return true;
	}

	@ConfigItem(
			keyName = "grymRoot",
			name = "Grym Roots",
			description = "Show the Grym Roots (Herblore) on the minimap.",
			section = "resources",
			position = 3
	)
	default boolean grymRoot() {
		return true;
	}

	@ConfigItem(
			keyName = "fishingSpot",
			name = "Fishing Spots",
			description = "Show the Fishing Spots (Fishing) on the minimap.",
			section = "resources",
			position = 4
	)
	default boolean fishingSpot() {
		return true;
	}

	@ConfigSection(
			name = "Demi-bosses",
			description = "Demi-bosses section.",
			position = 1
	)
	String demiBossesSection = "demiBosses";

	@ConfigItem(
			keyName = "bear",
			name = "Bear",
			description = "Show the Bear Demi-boss (Melee) on the minimap.",
			section = "demiBosses",
			position = 0
	)
	default boolean bear() {
		return true;
	}

	@ConfigItem(
			keyName = "dragon",
			name = "Dragon",
			description = "Show the Dragon Demi-boss (Magic) on the minimap.",
			section = "demiBosses",
			position = 1
	)
	default boolean dragon() {
		return true;
	}

	@ConfigItem(
			keyName = "darkBeast",
			name = "Dark Beast",
			description = "Show the Dark beast Demi-boss (Ranged) on the minimap.",
			section = "demiBosses",
			position = 2
	)
	default boolean darkBeast() {
		return true;
	}

	@ConfigSection(
			name = "Tracker",
			description = "Resource tracker section.",
			position = 2
	)
	String trackerSection = "tracker";

	@ConfigItem(
			keyName = "trackResources",
			name = "Track Resources",
			description = "Hides resource nodes after gathering a certain amount.",
			section = "tracker",
			position = 0
	)
	default boolean trackResources() {
		return false;
	}

	@ConfigItem(
			keyName = "ore",
			name = "Ore",
			description = "The desired amount of ore.",
			section = "tracker",
			position = 1
	)
	default int ore() {
		return 3;
	}

	@ConfigItem(
			keyName = "bark",
			name = "Bark",
			description = "The desired amount of bark.",
			section = "tracker",
			position = 2
	)
	default int bark() {
		return 3;
	}

	@ConfigItem(
			keyName = "fibre",
			name = "Fibre",
			description = "The desired amount of fibre.",
			section = "tracker",
			position = 3
	)
	default int fibre() {
		return 3;
	}

	@ConfigItem(
			keyName = "herb",
			name = "Herb",
			description = "The desired amount of herb.",
			section = "tracker",
			position = 4
	)
	default int herb() {
		return 3;
	}

	@ConfigItem(
			keyName = "fish",
			name = "Fish",
			description = "The desired amount of fish.",
			section = "tracker",
			position = 5
	)
	default int fish() {
		return 20;
	}

}

package com.gauntletminimap;

import net.runelite.api.Point;
import net.runelite.client.ui.overlay.*;

import javax.inject.Inject;
import java.awt.*;

public class GauntletMinimapOverlay extends Overlay {

    private final GauntletMinimapPlugin plugin;

    @Inject
    private GauntletMinimapOverlay(GauntletMinimapPlugin plugin) {
        this.plugin = plugin;

        setLayer(OverlayLayer.ABOVE_WIDGETS);
        setPosition(OverlayPosition.DYNAMIC);
        setPriority(OverlayPriority.HIGH);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        plugin.resourceNodes.forEach(node -> renderImageOnMinimap(graphics, node));
        plugin.demiBosses.forEach(demiBoss -> renderImageOnMinimap(graphics, demiBoss));

        return null;
    }

    private void renderImageOnMinimap(Graphics2D graphics, MinimapRenderable minimapRenderable) {
        final String className = minimapRenderable.getClass().getSimpleName();

        if (!plugin.displayableItems.contains(className) || plugin.trackResources && !plugin.isDemiboss(className)
                && plugin.collectedResources.get(className) >= plugin.maxResources.get(className))
            return;

        Point minimapLocation = minimapRenderable.getMinimapLocation();

        if (minimapLocation != null)
            OverlayUtil.renderImageLocation(graphics, minimapLocation, minimapRenderable.getImage());
    }

}

package com.gauntletminimap;

import net.runelite.api.Point;

import java.awt.image.BufferedImage;

public interface MinimapRenderable {

    Point getMinimapLocation();

    BufferedImage getImage();

}

package com.gauntletminimap;

import com.gauntletminimap.demiboss.*;
import com.gauntletminimap.resourcenode.*;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

@Slf4j
@PluginDescriptor(
		name = "Gauntlet Minimap",
		description = "Displays the resource nodes of the Gauntlet on your minimap",
		tags = {"corrupted","gauntlet","resource","nodes","demi-boss","demiboss","minimap","hunllef","pve","pvm","minigame"}
)
public class GauntletMinimapPlugin extends Plugin {

	@Inject
	private Client client;

	@Inject
	private GauntletMinimapConfig config;

	@Inject
	private GauntletMinimapOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	private boolean isStarted = false;

	private static final int CRYSTAL_GAUNTLET_REGION_ID = 7512;
	private static final int CORRUPTED_GAUNTLET_REGION_ID = 7768;

	private static final String MINING_MESSAGE = "You manage to mine some ore.";
	private static final String WOODCUTTING_MESSAGE = "You get some bark.";
	private static final String FARMING_MESSAGE = "You pick some fibre from the plant.";
	private static final String HERBLORE_MESSAGE = "You pick a herb from the roots.";
	private static final String FISHING_MESSAGE = "You manage to catch a fish.";

	protected final Set<ResourceNode> resourceNodes = new HashSet<>();
	protected final Set<DemiBoss> demiBosses = new HashSet<>();

	protected boolean trackResources;
	protected Map<String, Integer> maxResources;
	protected Map<String, Integer> collectedResources = new HashMap<String, Integer>() {{
		put(OreDeposit.class.getSimpleName(), 0);
		put(PhrenRoot.class.getSimpleName(), 0);
		put(LinumTirinum.class.getSimpleName(), 0);
		put(GrymRoot.class.getSimpleName(), 0);
		put(FishingSpot.class.getSimpleName(), 0);
	}};

	protected Set<String> displayableItems = new HashSet<>();

	private static final Set<Integer> RESOURCE_NODE_IDS = ImmutableSet.of(
			ObjectID.CRYSTAL_DEPOSIT,
			ObjectID.CORRUPT_DEPOSIT,
			ObjectID.PHREN_ROOTS,
			ObjectID.CORRUPT_PHREN_ROOTS,
			ObjectID.LINUM_TIRINUM,
			ObjectID.CORRUPT_LINUM_TIRINUM,
			ObjectID.GRYM_ROOT,
			ObjectID.CORRUPT_GRYM_ROOT,
			ObjectID.FISHING_SPOT_36068,
			ObjectID.CORRUPT_FISHING_SPOT
	);

	private static final Set<Integer> DEMI_BOSS_IDS = ImmutableSet.of(
			NpcID.CRYSTALLINE_BEAR,
			NpcID.CORRUPTED_BEAR,
			NpcID.CRYSTALLINE_DRAGON,
			NpcID.CORRUPTED_DRAGON,
			NpcID.CRYSTALLINE_DARK_BEAST,
			NpcID.CORRUPTED_DARK_BEAST
	);

	@Override
	protected void startUp() {
		resourceNodes.clear();

		if (!isStarted) {
			isStarted = true;
			setConfigs();

			if (isInGauntlet())
				overlayManager.add(overlay);
		}
	}

	@Override
	protected void shutDown() {
		if (isStarted) {
			isStarted = false;
			overlayManager.remove(overlay);
			resourceNodes.clear();

			collectedResources = new HashMap<String, Integer>() {{
				put(OreDeposit.class.getSimpleName(), 0);
				put(PhrenRoot.class.getSimpleName(), 0);
				put(LinumTirinum.class.getSimpleName(), 0);
				put(GrymRoot.class.getSimpleName(), 0);
				put(FishingSpot.class.getSimpleName(), 0);
			}};
		}
	}

	@Subscribe
	private void onGameStateChanged(final GameStateChanged event) {
		switch(event.getGameState()) {
			case LOADING:
				if (isInGauntlet())
					startUp();
				else
					shutDown();
				break;
			case LOGIN_SCREEN:
			case HOPPING:
				shutDown();
				break;
			default:
				break;
		}
	}

	@Subscribe
	private void onGameObjectSpawned(final GameObjectSpawned event) {
		if (!isInGauntlet())
			return;

		final GameObject gameObject = event.getGameObject();

		if (RESOURCE_NODE_IDS.contains(gameObject.getId()))
			resourceNodes.add(gameObjectToResource(gameObject));
	}

	@Subscribe
	private void onGameObjectDespawned(final GameObjectDespawned event) {
		if (!isInGauntlet())
			return;

		final GameObject gameObject = event.getGameObject();

		if (RESOURCE_NODE_IDS.contains(gameObject.getId()))
			resourceNodes.remove(gameObjectToResource(gameObject));
	}

	@Subscribe
	private void onNpcSpawned(final NpcSpawned event) {
		if (!isInGauntlet())
			return;

		final NPC npc = event.getNpc();

		if (DEMI_BOSS_IDS.contains(npc.getId()))
			demiBosses.add(npcToDemiBoss(npc));
	}

	@Subscribe
	private void onNpcDespawned(NpcDespawned event) {
		if (!isInGauntlet())
			return;

		final NPC npc = event.getNpc();

		if (DEMI_BOSS_IDS.contains(npc.getId()))
			demiBosses.remove(npcToDemiBoss(npc));
	}

	@Subscribe
	private void onConfigChanged(ConfigChanged event) {
		if (!event.getGroup().equals(GauntletMinimapConfig.CONFIG_GROUP))
			return;

		setConfigs();
	}

	@Subscribe
	private void onChatMessage(ChatMessage event) {
		if (event.getType() == ChatMessageType.SPAM) {
			switch (event.getMessage()) {
				case MINING_MESSAGE:
					collectedResources.merge(OreDeposit.class.getSimpleName(), 1, Integer::sum);
					break;
				case WOODCUTTING_MESSAGE:
					collectedResources.merge(PhrenRoot.class.getSimpleName(), 1, Integer::sum);
					break;
				case FARMING_MESSAGE:
					collectedResources.merge(LinumTirinum.class.getSimpleName(), 1, Integer::sum);
					break;
				case HERBLORE_MESSAGE:
					collectedResources.merge(GrymRoot.class.getSimpleName(), 1, Integer::sum);
					break;
				case FISHING_MESSAGE:
					collectedResources.merge(FishingSpot.class.getSimpleName(), 1, Integer::sum);
					break;
				default:
					break;
			}
		}
	}

	@Provides
	GauntletMinimapConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(GauntletMinimapConfig.class);
	}

	private ResourceNode gameObjectToResource(GameObject gameObject) {
		switch (gameObject.getId()) {
			case ObjectID.CRYSTAL_DEPOSIT:
			case ObjectID.CORRUPT_DEPOSIT:
				return new OreDeposit(gameObject);
			case ObjectID.PHREN_ROOTS:
			case ObjectID.CORRUPT_PHREN_ROOTS:
				return new PhrenRoot(gameObject);
			case ObjectID.LINUM_TIRINUM:
			case ObjectID.CORRUPT_LINUM_TIRINUM:
				return new LinumTirinum(gameObject);
			case ObjectID.GRYM_ROOT:
			case ObjectID.CORRUPT_GRYM_ROOT:
				return new GrymRoot(gameObject);
			case ObjectID.FISHING_SPOT_36068:
			case ObjectID.CORRUPT_FISHING_SPOT:
				return new FishingSpot(gameObject);
			default:
				return null;
		}
	}

	private DemiBoss npcToDemiBoss(NPC npc) {
		switch (npc.getId()) {
			case NpcID.CRYSTALLINE_BEAR:
			case NpcID.CORRUPTED_BEAR:
				return new Bear(npc);
			case NpcID.CRYSTALLINE_DRAGON:
			case NpcID.CORRUPTED_DRAGON:
				return new Dragon(npc);
			case NpcID.CRYSTALLINE_DARK_BEAST:
			case NpcID.CORRUPTED_DARK_BEAST:
				return new DarkBeast(npc);
			default:
				return null;
		}
	}

	private void setConfigs() {
		updateDisplayableItems(config.oreDeposit(), OreDeposit.class.getSimpleName());
		updateDisplayableItems(config.phrenRoots(), PhrenRoot.class.getSimpleName());
		updateDisplayableItems(config.linumTirinum(), LinumTirinum.class.getSimpleName());
		updateDisplayableItems(config.grymRoot(), GrymRoot.class.getSimpleName());
		updateDisplayableItems(config.fishingSpot(), FishingSpot.class.getSimpleName());

		updateDisplayableItems(config.bear(), Bear.class.getSimpleName());
		updateDisplayableItems(config.dragon(), Dragon.class.getSimpleName());
		updateDisplayableItems(config.darkBeast(), DarkBeast.class.getSimpleName());

		trackResources = config.trackResources();

		maxResources = ImmutableMap.of(
				OreDeposit.class.getSimpleName(), config.ore(),
				PhrenRoot.class.getSimpleName(), config.bark(),
				LinumTirinum.class.getSimpleName(), config.fibre(),
				GrymRoot.class.getSimpleName(), config.herb(),
				FishingSpot.class.getSimpleName(), config.fish()
		);
	}

	private void updateDisplayableItems(boolean add, String className) {
		if (add)
			displayableItems.add(className);
		else
			displayableItems.remove(className);
	}

	protected boolean isDemiboss(String className) {
		return className.equals(Bear.class.getSimpleName())
				|| className.equals(Dragon.class.getSimpleName())
				|| className.equals(DarkBeast.class.getSimpleName());
	}

	public boolean isInNormal() {
		if (client.getLocalPlayer() == null)
			return false;

		return client.getMapRegions()[0] == CRYSTAL_GAUNTLET_REGION_ID;
	}

	public boolean isInCorrupted() {
		if (client.getLocalPlayer() == null)
			return false;

		return client.getMapRegions()[0] == CORRUPTED_GAUNTLET_REGION_ID;
	}

	private boolean isInGauntlet() {
		return isInNormal() || isInCorrupted();
	}
}

package com.gauntletminimap.resourcenode;

import net.runelite.api.GameObject;
import net.runelite.api.Skill;

public class LinumTirinum extends ResourceNode {

    public LinumTirinum(GameObject gameObject) {
        super(gameObject, Skill.FARMING);
    }

}

package com.gauntletminimap.resourcenode;

import net.runelite.api.GameObject;
import net.runelite.api.Skill;

public class PhrenRoot extends ResourceNode {

    public PhrenRoot(GameObject gameObject) {
        super(gameObject, Skill.WOODCUTTING);
    }

}

package com.gauntletminimap.resourcenode;

import net.runelite.api.GameObject;
import net.runelite.api.Skill;

public class OreDeposit extends ResourceNode {

    public OreDeposit(GameObject gameObject) {
        super(gameObject, Skill.MINING);
    }

}

package com.gauntletminimap.resourcenode;

import net.runelite.api.GameObject;
import net.runelite.api.Skill;

public class FishingSpot extends ResourceNode {

    public FishingSpot(GameObject gameObject) {
        super(gameObject, Skill.FISHING);
    }

}

package com.gauntletminimap.resourcenode;

import net.runelite.api.GameObject;
import net.runelite.api.Skill;

public class GrymRoot extends ResourceNode {

    public GrymRoot(GameObject gameObject) {
        super(gameObject, Skill.HERBLORE);
    }

}

package com.gauntletminimap.resourcenode;

import com.gauntletminimap.MinimapRenderable;
import net.runelite.api.GameObject;
import net.runelite.api.Point;
import net.runelite.api.Skill;
import net.runelite.client.game.SkillIconManager;

import java.awt.image.BufferedImage;

public abstract class ResourceNode implements MinimapRenderable {

    private final GameObject gameObject;
    private final BufferedImage image;

    protected ResourceNode(GameObject gameObject, Skill skill) {
        this.gameObject = gameObject;
        image = new SkillIconManager().getSkillImage(skill, true);
    }

    public GameObject getGameObject() {
        return gameObject;
    }

    @Override
    public BufferedImage getImage() {
        return image;
    }

    @Override
    public Point getMinimapLocation() {
        Point point = gameObject.getMinimapLocation();

        if (point == null)
            return null;

        return new Point(point.getX() - image.getHeight() / 2, point.getY() - image.getWidth() / 2);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;

        if (o == null || getClass() != o.getClass())
            return false;

        return gameObject.equals(((ResourceNode) o).getGameObject());
    }

    @Override
    public int hashCode() {
        return gameObject.hashCode();
    }

}

package com.gauntletminimap.demiboss;

import net.runelite.api.NPC;
import net.runelite.api.Skill;

public class Dragon extends DemiBoss {

    public Dragon(NPC npc) {
        super(npc, Skill.MAGIC);
    }

}

package com.gauntletminimap.demiboss;

import net.runelite.api.NPC;
import net.runelite.api.Skill;

public class Bear extends DemiBoss {

    public Bear(NPC npc) {
        super(npc, Skill.ATTACK);
    }

}

package com.gauntletminimap.demiboss;

import net.runelite.api.NPC;
import net.runelite.api.Skill;

public class DarkBeast extends DemiBoss {

    public DarkBeast(NPC npc) {
        super(npc, Skill.RANGED);
    }

}

package com.gauntletminimap.demiboss;

import com.gauntletminimap.MinimapRenderable;
import net.runelite.api.NPC;
import net.runelite.api.Point;
import net.runelite.api.Skill;
import net.runelite.client.game.SkillIconManager;

import java.awt.image.BufferedImage;

public abstract class DemiBoss implements MinimapRenderable {

    private final NPC npc;
    private final BufferedImage image;

    protected DemiBoss(NPC npc, Skill skill) {
        this.npc = npc;
        image = new SkillIconManager().getSkillImage(skill, true);
    }

    public NPC getNpc() {
        return npc;
    }

    @Override
    public BufferedImage getImage() {
        return image;
    }

    @Override
    public Point getMinimapLocation() {
        Point point = npc.getMinimapLocation();

        if (point == null)
            return null;

        return new Point(point.getX() - image.getHeight() / 2, point.getY() - image.getWidth() / 2);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;

        if (o == null || getClass() != o.getClass())
            return false;

        return npc.equals(((DemiBoss) o).getNpc());
    }

    @Override
    public int hashCode() {
        return npc.hashCode();
    }

}

