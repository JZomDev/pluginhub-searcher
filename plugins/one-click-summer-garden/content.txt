package com.duckblade.runelite.summergarden;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SummerGardenPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(SummerGardenPlugin.class);
		RuneLite.main(args);
	}
}

package com.duckblade.runelite.summergarden;

import static com.duckblade.runelite.summergarden.GateStartTest.Direction.*;
import java.util.Random;
import net.runelite.api.NPC;
import net.runelite.api.coords.WorldPoint;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import org.mockito.Mockito;

public class GateStartTest
{

	@Test
	public void testValidTicks() {
		boolean[][] expectedNormalStart = ElementalCollisionDetector.VALID_TICKS_NORMAL_START;
		boolean[][] expectedGateStart = ElementalCollisionDetector.VALID_TICKS_GATE_START;
		boolean[][] generatedGateStart = generateValidTicks(0);
		boolean[][] generatedNormalStart = generateValidTicks(3);
		System.out.println("expected (normal start):");
		print2darray(expectedNormalStart);
		System.out.println("generated:");
		print2darray(generatedNormalStart);
		System.out.println("expected (gate start):");
		print2darray(expectedGateStart);
		System.out.println("generated:");
		print2darray(generatedGateStart);

		Assert.assertArrayEquals(expectedNormalStart, generatedNormalStart);
		Assert.assertArrayEquals(expectedGateStart, generatedGateStart);
	}

	private void print2darray(boolean[][] expected)
	{
		for (boolean[] arr : expected)
		{
			String s = "";
			for (int j = 0; j < arr.length; j++)
			{
				s += (arr[j] ? j + 1 : 0) + " ";
			}
			System.out.println(s);
		}
	}

	@Ignore
	@Test
	public void gateVsNormalParityComparison() {
		ElementalCollisionDetector ecd = new ElementalCollisionDetector();

		int n = 10000;

		int highestLowestParity_gate = 0;
		int paritySumSum_gate = 0;
		int highestLowestParity_normal = 0;
		int paritySumSum_normal = 0;
		Random random = new Random();
		for (int i = 0; i < n; i++)
		{
			updateNpcs(ecd, 0, random.nextInt(10), random.nextInt(12), random.nextInt(20), random.nextInt(12), random.nextInt(12));

			ecd.setGateStart(true);
			int paritySum = ecd.getParitySum(ecd.getBestStartPointForLowestTotalParityScore());
			paritySumSum_gate += paritySum;
			if (paritySum > highestLowestParity_gate)
			{
				highestLowestParity_gate = paritySum;
			}

			ecd.setGateStart(false);
			paritySum = ecd.getParitySum(ecd.getBestStartPointForLowestTotalParityScore());
			paritySumSum_normal += paritySum;
			if (paritySum > highestLowestParity_normal)
			{
				highestLowestParity_normal = paritySum;
			}
		}
		System.out.println("gate:         highest: " + highestLowestParity_gate + " average: " + (((double) paritySumSum_gate) / n));
		System.out.println("normal:       highest: " + highestLowestParity_normal + " average: " + (((double) paritySumSum_normal) / n));
	}

	private void printParities(ElementalCollisionDetector ecd)
	{
		for (int i = 0; i < 6; i++)
		{
			System.out.println("parity for elemental " + 0 + " is " + ecd.getParity(i + 1801));
		}
	}

	private void updateNpcs(ElementalCollisionDetector ecd, int... npcOffsets)
	{
		assert npcOffsets.length == 6;

		for (int i = 0; i < 6; i++)
		{
			ecd.updatePosition(npc(i), npcOffsets[i]);
		}
	}

	private NPC npc(int index) {
		NPC npc = Mockito.mock(NPC.class);
		Mockito.when(npc.getId()).thenReturn(1801 + index);
		Mockito.when(npc.getWorldLocation()).thenReturn(HOMES[index]);
		return npc;
	}

	private static final WorldPoint[] HOMES = {
		new WorldPoint(2907, 5488, 0),
		new WorldPoint(2907, 5490, 0),
		new WorldPoint(2910, 5487, 0),
		new WorldPoint(2912, 5485, 0),
		new WorldPoint(2921, 5486, 0),
		new WorldPoint(2921, 5495, 0),
	};

	enum Direction {
		NORTH(0, 1), SOUTH(0, -1), EAST(1, 0), WEST(-1, 0),
		NORTHEAST(1, 1), SOUTHEAST(1, -1), SOUTHWEST(-1, -1), NORTHWEST(-1, 1)
		;

		public final int x;
		public final int y;

		Direction(int x, int y)
		{
			this.x = x;
			this.y = y;
		}
	}
	private static final Direction[][] ELEMENTAL_PATHS = {
		{SOUTH, SOUTH, SOUTH, SOUTH, SOUTH, NORTH, NORTH, NORTH, NORTH, NORTH},
		{NORTH, NORTH, NORTH, NORTH, NORTH, SOUTH, SOUTH, SOUTH, SOUTH, SOUTH},
		{NORTH, NORTH, NORTH, NORTH, NORTH, NORTH, SOUTH, SOUTH, SOUTH, SOUTH, SOUTH, SOUTH},
		{EAST, EAST, EAST, SOUTH, SOUTH, EAST, EAST, EAST, NORTH, NORTH, WEST, WEST, WEST, SOUTH, SOUTH, WEST, WEST, WEST, NORTH, NORTH},
		{EAST, EAST, NORTH, NORTH, NORTH, NORTH, SOUTH, SOUTH, SOUTH, SOUTH, WEST, WEST},
		{SOUTH, SOUTH, SOUTH, SOUTH, EAST, EAST, NORTH, NORTH, NORTH, NORTH, WEST, WEST}
	};
	/**
	 * The tile just after the gate.
	 */
	private static final WorldPoint PLAYER_START = new WorldPoint(2910, 5481, 0);
	private static final Direction[] PLAYER_PATH = {
		NORTH, WEST, WEST, WEST, NORTH, NORTH, NORTH, NORTH, NORTH, NORTH, WEST, NORTH, NORTH, NORTH, NORTHEAST, NORTH,
		NORTH, NORTH, EAST, EAST, SOUTH, SOUTH, SOUTH, SOUTH, SOUTHEAST, SOUTH, SOUTH, SOUTHWEST, SOUTH, SOUTH, EAST,
		EAST, EAST, EAST, EAST, EAST, EAST, EAST, EAST, EAST, EAST, EAST, NORTH, EAST, EAST, NORTH, NORTH, NORTH,
		NORTH, NORTH, WEST, WEST, SOUTH, SOUTH, SOUTH, SOUTH, WEST, WEST,
	};

	private static int moduloPositive(int base, int mod) {
		return ((base % mod) + mod) % mod;
	}

	/**
	 * WARNING: In this function, elementals can see through walls. In game, they cannot. This does not make a
	 * difference for the summer garden, but may for other situations.
	 */
	private static boolean[][] generateValidTicks(int playerStartOffset)
	{
		boolean[][] validTicks = new boolean[6][];
		for (int i = 0; i < validTicks.length; i++)
		{
			validTicks[i] = new boolean[ELEMENTAL_PATHS[i].length];
		}

		for (int elementalIndex = 0; elementalIndex < ELEMENTAL_PATHS.length; elementalIndex++)
		{
			Direction[] elementalPath = ELEMENTAL_PATHS[elementalIndex];
			for (int elementalPathIndex = 0; elementalPathIndex < elementalPath.length; elementalPathIndex++)
			{
				// must use the elemental's last direction to tell where it's looking.
				Direction elementalDirection = elementalPath[moduloPositive(elementalPathIndex - 1, elementalPath.length)];
				System.out.println("elemental " + elementalIndex + " " + elementalDirection + " " + elementalPathIndex);

				validTicks[elementalIndex][elementalPathIndex] =
					isValidElementalStartPosition(playerStartOffset, elementalPathIndex, elementalIndex);
			}
		}
		return validTicks;
	}

	private static boolean isValidElementalStartPosition(int playerStartOffset, int elementalPathIndex, int elementalIndex)
	{
		Direction[] elementalPath = ELEMENTAL_PATHS[elementalIndex];

		int playerX = PLAYER_START.getX();
		int playerY = PLAYER_START.getY();
		int elementalX = HOMES[elementalIndex].getX();
		int elementalY = HOMES[elementalIndex].getY();

		for (int i = 0; i < playerStartOffset; i++)
		{
			Direction playerDirection = PLAYER_PATH[i];
			playerX += playerDirection.x;
			playerY += playerDirection.y;
		}

		for (int i = 0; i < elementalPathIndex; i++)
		{
			Direction elementalDirection = elementalPath[moduloPositive(i, elementalPath.length)];
			elementalX += elementalDirection.x;
			elementalY += elementalDirection.y;
		}

		int i = 0;
		while (playerStartOffset + i * 2 + 1 < PLAYER_PATH.length)
		{
			// Elemental looks in the last direction it moved
			Direction elementalLooking = elementalPath[moduloPositive(elementalPathIndex + i - 1, elementalPath.length)];
			Direction elementalDirection = elementalPath[moduloPositive(elementalPathIndex + i, elementalPath.length)];

			Direction playerDirection1 = PLAYER_PATH[playerStartOffset + i * 2];
			Direction playerDirection2 = PLAYER_PATH[playerStartOffset + i * 2 + 1];

			// The tile it's on and the 3 tiles in front of it are always dangerous.
			for (int j = 0; j < 4; j++)
			{
				if (playerX == elementalX + elementalLooking.x * j && playerY == elementalY + elementalLooking.y * j) {
					return false;
				}
			}

			playerX += playerDirection1.x;
			playerY += playerDirection1.y;
			playerX += playerDirection2.x;
			playerY += playerDirection2.y;
			elementalX += elementalDirection.x;
			elementalY += elementalDirection.y;
			i++;
		}
		return true;
	}

}

package com.duckblade.runelite.summergarden;

public enum ShowNumbers
{
	YES,
	ON_WRONG,
	NO
}

package com.duckblade.runelite.summergarden;

import com.google.inject.Provides;
import java.awt.Color;
import java.awt.TrayIcon;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.Player;
import net.runelite.api.Preferences;
import net.runelite.api.Varbits;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameObjectDespawned;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameTick;
import net.runelite.client.Notifier;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.infobox.InfoBox;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;

@Slf4j
@PluginDescriptor(
	name = "One Click Summer Garden"
)
public class SummerGardenPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private InfoBoxManager infoBoxManager;

	@Inject
	private ItemManager itemManager;

	@Inject
	private Notifier notifier;

	@Inject
	private ElementalCollisionDetector collisionDetector;

	@Inject
	private SummerGardenOverlay overlay;

	@Inject
	private SummerGardenConfig config;

	public static final String CONFIG_GROUP = "oneclicksummergarden";
	public static final String CONFIG_KEY_GATE_START = "useGateStartPoint";
	public static final String CONFIG_KEY_COUNTDOWN_TIMER_INFOBOX = "showCountdownTimer";
	public static final String CONFIG_KEY_RACE_STYLE_COUNTDOWN = "raceStyleCountdown";
	public static final String CONFIG_KEY_RACE_STYLE_VOLUME = "raceStyleVolume";
	private static final WorldPoint GARDEN = new WorldPoint(2915, 5490, 0);
	private static final String STAMINA_MESSAGE = "[One Click Summer Garden] Low Stamina Warning";
	private static final String CYCLE_MESSAGE = "[One Click Summer Garden] Cycle Ready";
	private static final int SUMMER_SQUIRK_ITEM_ID = 10845;
	private static final int RACE_STYLE_SOUND_LOW = 3817;
	private static final int RACE_STYLE_SOUND_HIGH = 3818;
	private static final int OBJECT_ID_TREE = 12943;

	private InfoBox countdownTimerInfoBox;
	private boolean sentStaminaNotification = false;

	@Getter
	private GameObject treeObject;

	@Override
	protected void startUp()
	{
		enableOverlay();
		if (config.showCountdownTimer())
		{
			enableCountdownTimerInfoBox();
		}
		collisionDetector.setGateStart(config.useGateStartPoint());
	}

	@Override
	protected void shutDown()
	{
		disableOverlay();
		disableCountdownTimerInfoBox();
	}

	private boolean overlayEnabled = false;

	private void enableOverlay()
	{
		if (overlayEnabled)
		{
			return;
		}

		overlayEnabled = true;
		overlayManager.add(overlay);
	}

	private void disableOverlay()
	{
		if (overlayEnabled)
		{
			overlayManager.remove(overlay);
		}
		overlayEnabled = false;
	}

	private void enableCountdownTimerInfoBox()
	{
		if (countdownTimerInfoBox == null)
		{
			countdownTimerInfoBox = new InfoBox(itemManager.getImage(SUMMER_SQUIRK_ITEM_ID), this)
			{
				@Override
				public String getText()
				{
					return String.valueOf(collisionDetector.getTicksUntilStart());
				}

				@Override
				public Color getTextColor()
				{
					return null;
				}
			};
			infoBoxManager.addInfoBox(countdownTimerInfoBox);
		}
	}

	private void disableCountdownTimerInfoBox()
	{
		infoBoxManager.removeInfoBox(countdownTimerInfoBox);
		countdownTimerInfoBox = null;
	}

	@Subscribe
	public void onGameTick(GameTick e)
	{
		Player p = client.getLocalPlayer();
		if (p == null)
		{
			return;
		}

		if (p.getWorldLocation().distanceTo2D(GARDEN) >= 50)
		{
			disableCountdownTimerInfoBox();
			disableOverlay();
			return;
		}

		if (config.showCountdownTimer())
		{
			enableCountdownTimerInfoBox();
		}
		enableOverlay();
		client.getNpcs()
			.stream()
			.filter(ElementalCollisionDetector::isSummerElemental)
			.forEach(npc -> collisionDetector.updatePosition(npc, client.getTickCount()));
		collisionDetector.updateCountdownTimer(client.getTickCount());

		// cycle notification
		if (config.cycleNotification() && collisionDetector.getTicksUntilStart() == config.notifyTicksBeforeStart())
		{
			notifier.notify(CYCLE_MESSAGE, TrayIcon.MessageType.INFO);
		}

		playCountdownSounds();

		checkStamina();
	}

	private void playCountdownSounds()
	{
		// Race-style countdown  -Green Donut
		if (config.raceStyleCountdown() && collisionDetector.getTicksUntilStart() <= 3 && config.raceStyleVolume() > 0)
		{
			// As playSoundEffect only uses the volume argument when the in-game volume isn't muted, sound effect volume
			// needs to be set to the value desired for race sounds and afterwards reset to the previous value.
			Preferences preferences = client.getPreferences();
			int previousVolume = preferences.getSoundEffectVolume();
			preferences.setSoundEffectVolume(config.raceStyleVolume());

			if (collisionDetector.getTicksUntilStart() == 0)
			{
				// high sound for countdown 0
				client.playSoundEffect(RACE_STYLE_SOUND_HIGH, config.raceStyleVolume());
			}
			else
			{
				// low sound for countdown 3,2,1
				client.playSoundEffect(RACE_STYLE_SOUND_LOW, config.raceStyleVolume());
			}
			preferences.setSoundEffectVolume(previousVolume);
		}
	}

	private void checkStamina()
	{
		// check for stamina usage
		int stamThreshold = config.staminaThreshold() * 100;
		if (stamThreshold != 0)
		{
			boolean stamActive = client.getVarbitValue(Varbits.RUN_SLOWED_DEPLETION_ACTIVE) != 0;
			if (client.getEnergy() <= stamThreshold && !stamActive && !sentStaminaNotification)
			{
				notifier.notify(STAMINA_MESSAGE, TrayIcon.MessageType.INFO);
				sentStaminaNotification = true;
			}
			else if (client.getEnergy() > stamThreshold)
			{
				sentStaminaNotification = false;
			}
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged)
	{
		if (!configChanged.getGroup().equals(CONFIG_GROUP))
		{
			return;
		}

		if (configChanged.getKey().equals(CONFIG_KEY_GATE_START))
		{
			collisionDetector.setGateStart(config.useGateStartPoint());
		}
		else if (configChanged.getKey().equals(CONFIG_KEY_COUNTDOWN_TIMER_INFOBOX))
		{
			if (config.showCountdownTimer())
			{
				enableCountdownTimerInfoBox();
			}
			else
			{
				disableCountdownTimerInfoBox();
			}
		}
	}

	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned e)
	{
		if (e.getGameObject().getId() == OBJECT_ID_TREE)
		{
			this.treeObject = e.getGameObject();
		}
	}

	@Subscribe
	public void onGameObjectDespawned(GameObjectDespawned e)
	{
		if (e.getGameObject() == this.treeObject)
		{
			this.treeObject = null;
		}
	}

	@Provides
	SummerGardenConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(SummerGardenConfig.class);
	}
}

package com.duckblade.runelite.summergarden;

import java.awt.Color;
import net.runelite.api.SoundEffectVolume;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;
import net.runelite.client.config.Units;

@ConfigGroup(SummerGardenPlugin.CONFIG_GROUP)
public interface SummerGardenConfig extends Config
{

	@ConfigItem(
		keyName = "highlightGood",
		name = "On-Parity Color",
		description = "Color to highlight elementals whose parity is correct.",
		position = 1
	)
	default Color highlightGood()
	{
		return Color.green.darker();
	}

	@ConfigItem(
		keyName = "highlightBad",
		name = "Off-Parity Color",
		description = "Color to highlight elementals whose parity is incorrect.",
		position = 2
	)
	default Color highlightBad()
	{
		return Color.orange;
	}

	@ConfigItem(
		keyName = "highlightLaunch",
		name = "Launch Color",
		description = "Color to highlight elementals when it is time to click the Sq'irk tree.",
		position = 3
	)
	default Color highlightLaunch()
	{
		return Color.decode("#00ADFF");
	}

	@ConfigItem(
		keyName = "highlightLaunchTile",
		name = "Highlight Launch Tile",
		description = "Whether or not to highlight the tile at which the first elemental will be when you click the Sq'irk tree.",
		position = 4
	)
	default boolean highlightLaunchTile()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showNumbers",
		name = "Show Numbers",
		description = "Whether to show numbers on Elementals, showing how many resets will be needed.",
		position = 5
	)
	default ShowNumbers showNumbers()
	{
		return ShowNumbers.YES;
	}

	@ConfigItem(
		keyName = "staminaWarning",
		name = "Low Stamina Threshold",
		description = "What stamina level to warn to use stamina potion (0 to disable).",
		position = 6
	)
	default int staminaThreshold()
	{
		return 25;
	}

	@ConfigItem(
		keyName = "cycleNotification",
		name = "Cycle Notification",
		description = "Whether to send a notification when the launch cycle is starting.",
		position = 7
	)
	default boolean cycleNotification()
	{
		return false;
	}

	@ConfigItem(
		keyName = "notifyTicksBeforeStart",
		name = "Notify ticks before start",
		description = "Requires \"Cycle Notification\" to be enabled. This number controls how many ticks prior to the time you will need to click the tree that the notification is sent.",
		position = 8
	)
	default int notifyTicksBeforeStart()
	{
		return 7;
	}

	@ConfigItem(
		keyName = SummerGardenPlugin.CONFIG_KEY_COUNTDOWN_TIMER_INFOBOX,
		name = "Show countdown timer",
		description = "Shows a countdown timer infobox for when it is time to start running the maze. Click on the tree when it says \"0\"",
		position = 9
	)
	@Units(Units.TICKS)
	default boolean showCountdownTimer()
	{
		return true;
	}

	@ConfigItem(
		keyName = SummerGardenPlugin.CONFIG_KEY_GATE_START,
		name = "Start on tile after gate",
		description = "Whether to start from the tile you stand on after entering the gate, rather than the normal start tile which is 3 tiles further. This saves the click of having to run to the start tile after clicking the gate.",
		position = 10
	)
	default boolean useGateStartPoint()
	{
		return true;
	}

	@ConfigItem(
		keyName = "countdownOnTreeSize",
		name = "Tree Countdown",
		description = "Font size of a countdown on the tree. Set to 0 to disable.",
		position = 11
	)
	default int countdownOnTreeSize()
	{
		return 0;
	}

	// Race-style countdown  -Green Donut
	@ConfigSection(
		name = "Race-Style Countdown",
		description = "Options for the race-style countdown",
		position = 12,
		closedByDefault = true
	)
	String raceStyleSection = "raceStyle";

	@ConfigItem(
		keyName = SummerGardenPlugin.CONFIG_KEY_RACE_STYLE_COUNTDOWN,
		name = "Enable race-style countdown",
		description = "Plays race-style countdown sounds on the last few ticks before and when the player needs to click the tree.",
		position = 1,
		section = raceStyleSection
	)
	default boolean raceStyleCountdown()
	{
		return false;
	}

	@Range(
		max = SoundEffectVolume.HIGH
	)
	@ConfigItem(
		keyName = SummerGardenPlugin.CONFIG_KEY_RACE_STYLE_VOLUME,
		name = "Race-style volume",
		description = "Configures the volume of the race-style countdown sounds.",
		position = 2,
		section = raceStyleSection
	)
	default int raceStyleVolume()
	{
		return SoundEffectVolume.MEDIUM_HIGH;
	}

}

package com.duckblade.runelite.summergarden;

import static com.duckblade.runelite.summergarden.ShowNumbers.ON_WRONG;
import static com.duckblade.runelite.summergarden.ShowNumbers.YES;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Shape;
import java.awt.geom.Rectangle2D;
import javax.inject.Inject;
import javax.inject.Singleton;
import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.NPC;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

@Singleton
public class SummerGardenOverlay extends Overlay
{

	private final Client client;
	private final SummerGardenPlugin plugin;
	private final SummerGardenConfig config;
	private final ElementalCollisionDetector collisionDetector;

	private static final WorldPoint START_POINT_REGULAR_START = new WorldPoint(2908, 5482, 0);
	private static final WorldPoint START_POINT_GATE_START = new WorldPoint(2910, 5481, 0);

	private static final WorldPoint LAUNCH_POINT_REGULAR_START = new WorldPoint(2907, 5485, 0);
	private static final WorldPoint LAUNCH_POINT_GATE_START = new WorldPoint(2907, 5484, 0);

	@Inject
	public SummerGardenOverlay(Client client, SummerGardenPlugin plugin, SummerGardenConfig config, ElementalCollisionDetector collisionDetector)
	{
		this.client = client;
		this.plugin = plugin;
		this.config = config;
		this.collisionDetector = collisionDetector;
		setPosition(OverlayPosition.DYNAMIC);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		client.getNpcs()
			.stream()
			.filter(ElementalCollisionDetector::isSummerElemental)
			.forEach(npc -> renderNpc(npc, graphics));

		if (config.highlightLaunchTile())
		{
			renderTile(graphics, config.useGateStartPoint() ? START_POINT_GATE_START : START_POINT_REGULAR_START, config.highlightLaunch());
			renderTile(graphics, config.useGateStartPoint() ? LAUNCH_POINT_GATE_START : LAUNCH_POINT_REGULAR_START, config.highlightLaunch());
		}

		renderTreeCountdown(plugin.getTreeObject(), graphics);

		return null;
	}

	private void renderTile(Graphics2D graphics, WorldPoint wp, Color color)
	{
		LocalPoint lp = LocalPoint.fromWorld(client, wp);
		if (lp != null)
		{
			Polygon poly = Perspective.getCanvasTilePoly(client, lp);
			if (poly != null)
			{
				OverlayUtil.renderPolygon(graphics, poly, color);
			}
		}
	}

	private Color selectColor(int npcId, int parity)
	{
		if (collisionDetector.isLaunchCycle() && (npcId == 1801 || npcId == 1803))
		{
			return config.highlightLaunch();
		}
		if (parity == 0)
		{
			return config.highlightGood();
		}
		if (parity == -1)
		{
			return Color.gray;
		}
		return config.highlightBad();
	}

	private void renderNpc(NPC npc, Graphics2D graphics)
	{
		// determine parity and color
		int npcId = npc.getId();
		int parity = collisionDetector.getParity(npcId);
		Color highlightColor = selectColor(npcId, parity);

		// draw tile under
		renderTile(graphics, npc.getWorldLocation(), highlightColor);

		// draw text
		ShowNumbers numbersConfig = config.showNumbers();
		if (numbersConfig == YES || (parity != 0 && numbersConfig == ON_WRONG))
		{
			String text = parity != -1 ? String.valueOf(parity) : "?";
			Point p2 = Perspective.getCanvasTextLocation(client, graphics, npc.getLocalLocation(), text, 1);
			if (p2 != null)
			{
				OverlayUtil.renderTextLocation(graphics, p2, text, highlightColor);
			}
		}
	}

	private void renderTreeCountdown(GameObject tree, Graphics2D graphics)
	{
		int size = config.countdownOnTreeSize();
		if (size == 0 || tree == null)
		{
			return;
		}

		Shape clickbox = tree.getClickbox();
		if (clickbox == null)
		{
			return;
		}

		String t = String.valueOf(collisionDetector.getTicksUntilStart());
		Font font = graphics.getFont().deriveFont((float) config.countdownOnTreeSize());
		int width = graphics.getFontMetrics().stringWidth(t);
		int height = graphics.getFontMetrics().getHeight();

		Rectangle2D bounds = clickbox.getBounds();
		Point center = new Point((int) bounds.getCenterX() - width / 2, (int) bounds.getCenterY() + height / 2);

		Color color = collisionDetector.isLaunchCycle() ? config.highlightLaunch() : config.highlightGood();
		graphics.setFont(font);
		OverlayUtil.renderPolygon(graphics, clickbox, color);
		OverlayUtil.renderTextLocation(graphics, center, t, color);
	}

}

package com.duckblade.runelite.summergarden;

import java.util.Arrays;
import javax.inject.Singleton;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.NPC;
import net.runelite.api.coords.WorldPoint;

@Singleton
public class ElementalCollisionDetector
{

	private static final WorldPoint[] HOMES = {
		new WorldPoint(2907, 5488, 0),
		new WorldPoint(2907, 5490, 0),
		new WorldPoint(2910, 5487, 0),
		new WorldPoint(2912, 5485, 0),
		new WorldPoint(2921, 5486, 0),
		new WorldPoint(2921, 5495, 0),
	};
	private static final int[] CYCLE_LENGTHS = {10, 10, 12, 20, 12, 12};

	@Setter
	private boolean gateStart;

	private final int[] tickBasis = {-1, -1, -1, -1, -1, -1};

	@Getter
	private int ticksUntilStart = -1;

	static final boolean[][] VALID_TICKS_NORMAL_START = {
		{false, false, false, false, false, false, false, true, false, false},
		{false, false, false, true, false, false, false, false, true, false},
		{true, false, false, false, false, true, true, true, false, false, false, false},
		{true, true, true, true, false, false, false, true, true, true, true, false, false, true, false, false, false, false, false, true},
		{false, false, true, false, false, false, false, false, true, false, false, false},
		{true, false, false, false, true, false, true, true, true, true, true, true}
	};
	static final boolean[][] VALID_TICKS_GATE_START = {
		{false, false, false, false, false, false, true, false, false, false},
		{true, true, true, false, false, false, false, true, false, false},
		{false, false, true, true, true, true, false, false, false, false, true, true},
		{true, true, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, true, true},
		{true, false, true, false, false, false, true, false, false, false, false, true},
		{false, false, false, true, false, false, true, true, true, true, true, false}
	};

	/**
	 * The second index is the number of ticks since it was last at its home spot.
	 * The value in the array is whether you can run past that elemental without getting caught.
	 */
	private boolean[] getValidTicksForElemental(int elementalIndex)
	{
		return gateStart ? VALID_TICKS_GATE_START[elementalIndex] : VALID_TICKS_NORMAL_START[elementalIndex];
	}

	public static boolean isSummerElemental(NPC npc)
	{
		return npc.getId() >= 1801 && npc.getId() <= 1806;
	}

	public void updatePosition(NPC npc, int tc)
	{
		if (!isSummerElemental(npc))
		{
			return;
		}

		int eId = npc.getId() - 1801;
		if (npc.getWorldLocation().equals(HOMES[eId]))
		{
			tickBasis[eId] = tc;
		}
	}

	public void updateCountdownTimer(int tc)
	{
		// This is less than 60 * 6 * 20 = 7200 operations, shouldn't lag anyone to run it every game tick.
		ticksUntilStart = moduloPositive(getBestStartPointForLowestTotalParityScore() - tc, 60);
	}

	/**
	 * only returns one best point, even if there are multiple with the same parity.
	 */
	int getBestStartPointForLowestTotalParityScore()
	{
		int smallestParity = Integer.MAX_VALUE;
		int smallestParityIndex = -1;
		for (int i = 0; i < 60; i++)
		{
			int paritySum = getParitySum(i);
			if (paritySum < smallestParity)
			{
				smallestParity = paritySum;
				smallestParityIndex = i;
			}
		}
		if (smallestParityIndex == -1)
		{
			throw new IllegalStateException("Every elemental should be passable on at least one tick.");
		}
		return smallestParityIndex;
	}

	int getParitySum(int startCycle)
	{
		int paritySum = 0;
		for (int elementalIndex = 0; elementalIndex < 6; elementalIndex++)
		{
			paritySum += getParityForStartCycle(startCycle, elementalIndex);
		}
		return paritySum;
	}

	private int getParityForStartCycle(int startCycle, int elementalIndex)
	{
		if (tickBasis[elementalIndex] == -1)
		{
			return -1;
		}

		int basis = tickBasis[elementalIndex];

		boolean[] validTicksForElemental = getValidTicksForElemental(elementalIndex);
		for (int parity = 0; parity < validTicksForElemental.length; parity++)
		{
			int cycleLength = CYCLE_LENGTHS[elementalIndex];
			int indexWithParity = moduloPositive(startCycle - basis - parity, cycleLength);
			if (validTicksForElemental[indexWithParity])
			{
				return parity;
			}
		}
		throw new IllegalStateException("Every elemental should be passable on at least one tick.");
	}

	public int getParity(int elementalId)
	{
		boolean seenAllElementalBasis = !Arrays.stream(tickBasis).filter(i -> i == -1).findAny().isPresent();
		return !seenAllElementalBasis ? -1 : getParityForStartCycle(getBestStartPointForLowestTotalParityScore(), elementalId - 1801);
	}

	public boolean isLaunchCycle()
	{
		return ticksUntilStart < 8;
	}

	private static int moduloPositive(int base, int mod)
	{
		return ((base % mod) + mod) % mod;
	}

}

