package com.agilitypyramidsliderblocktimer;

import com.google.common.collect.ImmutableSet;
import com.google.inject.Provides;
import java.util.HashSet;
import java.util.Set;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.NpcID;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Agility Pyramid Slider Block Timer"
)
public class AgilityPyramidSliderBlockTimerPlugin extends Plugin
{
	@Inject
	private Client client;

	@Getter
	private final Set<NPC> npcs = new HashSet<>();

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private AgilityPyramidSliderBlockTimerOverlay agilityPyramidSliderBlockTimerOverlay;

	@Inject
	private AgilityPyramidSliderBlockTimerConfig config;

	private static final Set<Integer> AGILITY_PYRAMID_TRAP_NPCS = ImmutableSet.of(
		NpcID.PYRAMID_BLOCK, NpcID.PYRAMID_BLOCK_5788  // sliding pyramid blocks
	);

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(agilityPyramidSliderBlockTimerOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(agilityPyramidSliderBlockTimerOverlay);
		npcs.clear();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		switch (event.getGameState())
		{
			case HOPPING:
			case LOGIN_SCREEN:
				npcs.clear();
				break;
		}
	}

	@Provides
	AgilityPyramidSliderBlockTimerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(AgilityPyramidSliderBlockTimerConfig.class);
	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned npcSpawned)
	{
		NPC npc = npcSpawned.getNpc();

		if (AGILITY_PYRAMID_TRAP_NPCS.contains(npc.getId()))
		{
			npcs.add(npc);
		}
	}
}

package com.agilitypyramidsliderblocktimer;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.time.Duration;
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.WorldView;
import net.runelite.api.Point;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ProgressPieComponent;
import net.runelite.client.util.ColorUtil;

public class AgilityPyramidSliderBlockTimerOverlay extends Overlay
{
	private final Map<Integer, Integer> trapLastPositions = new HashMap<>();
	private final Map<Integer, Instant> trapStartTimers = new HashMap<>();

	private final Client client;
	private final AgilityPyramidSliderBlockTimerConfig config;

	@Inject
	private AgilityPyramidSliderBlockTimerOverlay(Client client, AgilityPyramidSliderBlockTimerPlugin plugin, AgilityPyramidSliderBlockTimerConfig config)
	{
		super(plugin);
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_SCENE);
		this.client = client;
		this.config = config;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		WorldView worldView = client.getLocalPlayer().getWorldView();
		if (worldView != null)
		{
			Color trapHighlightColor = config.getSliderBlockColor();
			worldView.npcs().forEach((npc) -> {
				if (Npcs.TRAP_NPC_IDS.contains(npc.getId()))
				{
					Polygon tilePoly = npc.getCanvasTilePoly();
					Integer lastTrapPosition = trapLastPositions.get(npc.getId());
					WorldPoint currentPosition = npc.getWorldLocation();
					Integer xPos = currentPosition.getX();
					Integer yPos = currentPosition.getY();
					String movementDimension = Npcs.TRAP_MOVEMENT_DIMENSION.get(npc.getId());

					if (lastTrapPosition != null)
					{
						Integer restingPosition = Npcs.TRAP_RESTING_POSITION.get(npc.getId());
						boolean shouldRenderTime = (movementDimension.equals("x") && restingPosition.equals(xPos))
								|| (movementDimension.equals("y") && restingPosition.equals(yPos));

						if (shouldRenderTime && tilePoly != null)
						{
							if ((movementDimension.equals("x") && !lastTrapPosition.equals(xPos))
									|| (movementDimension.equals("y") && !lastTrapPosition.equals(yPos)))
							{
								trapStartTimers.put(npc.getId(), Instant.now());
							}

							final String restingTime = Npcs.TRAP_RESTING_TIME.get(npc.getId());
							final Duration trapTime = Duration.parse(restingTime);
							Instant timer = trapStartTimers.get(npc.getId());
							if (timer == null)
							{
								timer = Instant.now();
							}

							final ProgressPieComponent progressPie = new ProgressPieComponent();
							int xPiePos = (tilePoly.xpoints[0] + tilePoly.xpoints[2]) / 2;
							int yPiePos = (tilePoly.ypoints[0] + tilePoly.ypoints[2]) / 2;

							final Point position = new Point(xPiePos, yPiePos);

							Color trapBorder = ColorUtil.colorWithAlpha(trapHighlightColor, 255);

							progressPie.setFill(trapHighlightColor);
							progressPie.setBorderColor(trapBorder);
							progressPie.setPosition(position);

							final Duration duration = Duration.between(timer, Instant.now());
							progressPie.setProgress(1 - (duration.compareTo(trapTime) < 0
									? (double) duration.toMillis() / trapTime.toMillis()
									: 1));

							progressPie.render(graphics);
						}
					}

					if (movementDimension.equals("x"))
					{
						trapLastPositions.put(npc.getId(), currentPosition.getX());
					}
					else if (movementDimension.equals("y"))
					{
						trapLastPositions.put(npc.getId(), currentPosition.getY());
					}
				}
			});
		}

		return null;
	}
}

package com.agilitypyramidsliderblocktimer;

import java.awt.Color;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("agilitypyramidsliderblocktimer")
public interface AgilityPyramidSliderBlockTimerConfig extends Config
{
	@Alpha
	@ConfigItem(
		keyName = "sliderBlockHighlight",
		name = "Slider Block Color",
		description = "Color of slider block overlay",
		position = 1
	)
	default Color getSliderBlockColor()
	{
		return Color.RED;
	}
}

package com.agilitypyramidsliderblocktimer;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;

import java.util.Map;
import static net.runelite.api.NpcID.*;

import java.util.Set;

public class Npcs
{
	static final Set<Integer> TRAP_NPC_IDS = ImmutableSet.of(
		// Agility pyramid
		PYRAMID_BLOCK, PYRAMID_BLOCK_5788
	);

	static final Map<Integer, Integer> TRAP_RESTING_POSITION = ImmutableMap.of(
		PYRAMID_BLOCK, 2845,
		PYRAMID_BLOCK_5788, 3372
	);

	static final Map<Integer, String> TRAP_MOVEMENT_DIMENSION = ImmutableMap.of(
		PYRAMID_BLOCK, "y",
		PYRAMID_BLOCK_5788, "x"
	);

	static final Map<Integer, String> TRAP_RESTING_TIME = ImmutableMap.of(
		PYRAMID_BLOCK, "PT4.8S",
		PYRAMID_BLOCK_5788, "PT6.0S"
	);
}
package com.agilitypyramidsliderblocktimer;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AgilityPyramidSliderBlockTimerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AgilityPyramidSliderBlockTimerPlugin.class);
		RuneLite.main(args);
	}
}
