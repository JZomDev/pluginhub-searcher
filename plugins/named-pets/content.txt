package com.pappymint.namedpets;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class NamedPetsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(NamedPetsPlugin.class);
		RuneLite.main(args);
	}
}
package com.pappymint.namedpets;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.Color;

@ConfigGroup("namedpets")
public interface NamedPetsConfig extends Config
{
	@ConfigItem(
		keyName = "position",
		name = "Adjust Name Position",
		description = "Adjust the position the name above the pet (0 - 100)"
	)
	default int getCustomPosition()
	{
		return 0;
	}

	@ConfigItem(
			keyName = "defaultNameColor",
			name = "Default Pet Name Color",
			description = "A default color for pet names. If you individually set a color for a pet name, that will be set first."
	)
	default Color getDefaultPetNameColor() { return new Color(255, 255, 255); }

	@ConfigItem(
			keyName = "enablePOHPetNames",
			name = "Name POH pets",
			description = "View and name pets in your player owned home"
	)
	default boolean petNamesPOHEnabled () { return true; }

	@ConfigItem(
			keyName = "replaceMenuPetname",
			name = "Replace Menu Option Pet Name",
			description = "Replace the right-click menu option with the pet name"
	)
	default boolean replaceMenuPetName () { return false; }
}

package com.pappymint.namedpets;

import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.Actor;
import net.runelite.api.Point;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

import java.awt.*;
import java.util.Objects;
import javax.inject.Inject;

public class NamedPetsOverlay extends Overlay
{
    private final NamedPetsConfig pluginConfig;
    private final NamedPetsPlugin plugin;
    private final NamedPetsConfigManager configManager;

    @Inject
    private Client client;

    @Inject
    private NamedPetsOverlay(NamedPetsPlugin plugin, NamedPetsConfig pluginConfig, NamedPetsConfigManager configManager)
    {
        this.plugin = plugin;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);

        this.pluginConfig = pluginConfig;
        this.configManager = configManager;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        NPC follower = client.getFollower();
        if (follower != null) {
            renderPetName(graphics, follower, follower.getId());
        }

        if (pluginConfig.petNamesPOHEnabled()) {
            renderPOHPetNames(graphics);
        }

        return null;
    }

    private void renderPetName(Graphics2D graphics, Actor petActor, int petId) {
        // Gets stored pet name + name color from config manager
        String storedPetName = configManager.getSavedPetName(petId);
        if (storedPetName != null && !storedPetName.isEmpty()) {
            Color nameColor = getPetNameColor(petId);

            // Default config height to 0 if it isnt between 1 - 100
            int customHeightIncrease = pluginConfig.getCustomPosition() > 0 && pluginConfig.getCustomPosition() <= 100 ? pluginConfig.getCustomPosition() : 0;
            Point petNameLocation = petActor.getCanvasTextLocation(graphics, storedPetName, petActor.getModelHeight() + customHeightIncrease);

            if (petNameLocation != null) {
                OverlayUtil.renderTextLocation(graphics, petNameLocation, storedPetName, nameColor);
            }
        }
    }

    private Color getPetNameColor(int petId) {
        String customColorSetForPet = configManager.getSavedPetColor(petId);
        Color defaultConfigColor = pluginConfig.getDefaultPetNameColor();

        if (customColorSetForPet != null) {
            return Color.decode(customColorSetForPet);
        } else if (defaultConfigColor != null) {
            return defaultConfigColor;
        } else {
            return Color.white;
        }
    }

    /**
     * POH pet ids are different to follower NPC pet IDs. We must find a mapping
     * between the two to successfully find the appropriate set name for a POH pet.
     * @param graphics Graphics2D for rendering
     */
    private void renderPOHPetNames(Graphics2D graphics) {
        for (NPC pohPet : plugin.getPOHPetRenderList()) {
            // Only use the follower NPC id for naming, retrieving.

            for (int existingFollowerId : configManager.getAllSavedPetIds()) {
                if (Objects.equals(pohPet.getName(), configManager.getPetNPCName(existingFollowerId))) {
                    renderPetName(graphics, pohPet, existingFollowerId);
                    break;
                }
            }
        }
    }
}

package com.pappymint.namedpets;

import net.runelite.client.config.ConfigManager;

import javax.inject.Inject;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public class NamedPetsConfigManager {
    private final ConfigManager configManager;

    public static final String CONFIG_GROUP = "namedPets";
    public static final String CONFIG_NAME = "name";
    public static final String CONFIG_COLOR = "color";
    public static final String CONFIG_NPC_NAME = "npcName";

    @Inject
    NamedPetsConfigManager(NamedPetsPlugin plugin, ConfigManager configManager) {
        this.configManager = configManager;
    }

    private String nameConfigKey(int petId) {
        return CONFIG_NAME + "-" + petId;
    }
    private String colorConfigKey(int petId) {
        return CONFIG_COLOR + "-" + petId;
    }
    private String npcNameConfigKey(int petId) {
        return CONFIG_NPC_NAME + "-" + petId;
    }

    // *** Pet Name Getters/Setters ***
    public String getSavedPetName(int petId) {
        return configManager.getRSProfileConfiguration(CONFIG_GROUP, nameConfigKey(petId));
    }
    public void setPetName(int petId, String petName) {
        configManager.setRSProfileConfiguration(CONFIG_GROUP, nameConfigKey(petId), petName);
    }
    public void unsetPetName(int petId) {
        configManager.unsetRSProfileConfiguration(CONFIG_GROUP, nameConfigKey(petId));
    }

    // *** Pet Color Getters/Setters ***
    public String getSavedPetColor(int petId) {
        return configManager.getRSProfileConfiguration(CONFIG_GROUP, colorConfigKey(petId));
    }
    public void setPetColor(int petId, Color petNameColor) {
        configManager.setRSProfileConfiguration(CONFIG_GROUP, colorConfigKey(petId), petNameColor);
    }
    public void unsetPetColor(int petId) {
        configManager.unsetRSProfileConfiguration(CONFIG_GROUP, colorConfigKey(petId));
    }

    // *** Pet NPC Name Getters/Setters ***
    public String getPetNPCName(int petId) {
        return configManager.getRSProfileConfiguration(CONFIG_GROUP, npcNameConfigKey(petId));
    }
    public void setPetNPCName(int petId, String npcName) {
        configManager.setRSProfileConfiguration(CONFIG_GROUP, npcNameConfigKey(petId), npcName);
    }

    public List<Integer> getAllSavedPetIds() {
        List<Integer> idList = new ArrayList<>();

        final String profileKey = configManager.getRSProfileKey();
        List<String> configKeys = configManager.getRSProfileConfigurationKeys(CONFIG_GROUP, profileKey, CONFIG_NAME);

        for (String key : configKeys) {
            String prefix = CONFIG_NAME + "-";
            if (key.startsWith(prefix)) {
                idList.add(Integer.valueOf(key.replace(prefix, "")));
            }
        }

        return idList;
    }
}

package com.pappymint.namedpets;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.MenuOpened;
import net.runelite.api.events.NpcDespawned;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.game.chatbox.ChatboxPanelManager;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.components.colorpicker.ColorPickerManager;
import net.runelite.client.ui.components.colorpicker.RuneliteColorPicker;
import net.runelite.client.ui.overlay.OverlayManager;
import javax.inject.Inject;
import javax.swing.*;
import java.applet.Applet;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Objects;

@Slf4j
@PluginDescriptor(
	name = "Named Pets",
	description = "Right click & give your pets a name!",
	tags = {"name", "pet"}
)
public class NamedPetsPlugin extends Plugin
{
	private NamedPetsConfigManager pluginConfigManager;

	@Inject
	private Client client;
	@Inject
	private NamedPetsConfig config;
	@Inject
	private ChatboxPanelManager chatboxPanelManager;
	@Inject
	private ConfigManager configManager;
	@Inject
	private OverlayManager overlayManager;
	@Inject
	private NamedPetsOverlay petNameOverlay;
	@Inject
	private ClientToolbar clientToolbar;
	@Inject
	private ColorPickerManager colorPickerManager;

	@Provides
	NamedPetsConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(NamedPetsConfig.class);
	}

	private ArrayList<NPC> pohPets = new ArrayList<>();

	@Override
	protected void startUp() throws Exception {
		pluginConfigManager = new NamedPetsConfigManager(this, configManager);
		overlayManager.add(petNameOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(petNameOverlay);
	}

	@Subscribe
	public void onMenuOpened(MenuOpened menuOpened)
	{
		checkIfMenuOptionsBelongToFollower(menuOpened.getMenuEntries());
	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned event)
	{
		if (config.petNamesPOHEnabled()) {
			NPC spawnedNpc = event.getNpc();
			NPCComposition npcComposition = spawnedNpc.getComposition();
			String[] actions = npcComposition.getActions();

			// Has menu option 'Pick-up' and is not following the player
			if (Arrays.asList(actions).contains("Pick-up") && !npcComposition.isFollower()) {
                addNewPOHPetToRenderList(spawnedNpc);
			}
		}
	}

	@Subscribe
	public void onNpcDespawned(NpcDespawned event)
	{
		// Unsubscribe pet from render list
		NPC npcDespawned = event.getNpc();
		removePOHPetFromRenderList(npcDespawned);
	}

	private void checkIfMenuOptionsBelongToFollower(MenuEntry[] menuEntries)
	{
		NPC myFollowerNPC = client.getFollower();
		if (myFollowerNPC == null) {
			return;
		}

		for (int entryIndex = 0; entryIndex < menuEntries.length; entryIndex++) {
			MenuEntry entry = menuEntries[entryIndex];

			NPC targetedNpc = entry.getNpc();

			if (targetedNpc != null && targetedNpc.getId() == myFollowerNPC.getId()) {
				// Add menu entry at index below this option - e.g. "Name Overgrown Hellcat"
				addNamePetMenuOption(targetedNpc, entryIndex, entry, menuEntries);
				addColorNameMenuOption(targetedNpc, entryIndex, entry);
				break;
			}
		}
	}

	private void addNamePetMenuOption(NPC pet, int index, MenuEntry menuEntry, MenuEntry[] menuEntries) {
		if (config.replaceMenuPetName()) {
			int petId = pet.getId();
			String petName = getExistingPetName(petId);
			if (pet.getName() != null) {
				for (MenuEntry menuEntry1 : menuEntries) {
					if (menuEntry1.getTarget() != null && menuEntry1.getTarget().contains(pet.getName())) {
						menuEntry1.setTarget(menuEntry1.getTarget().replace(pet.getName(), petName));
					}
				}
			}
		}
		client.createMenuEntry(index)
			.setOption("Name")
			.setTarget(menuEntry.getTarget())
			.setType(MenuAction.RUNELITE)
			.onClick(e -> onNameMenuEntryOptionClicked(pet));
	}

	private void addColorNameMenuOption(NPC pet, int index, MenuEntry menuEntry) {
		int petId = pet.getId();
		if (!getExistingPetName(petId).isEmpty()) {
			// Add remove color option if color is set

			client.createMenuEntry(index)
				.setOption("Color Name")
				.setTarget(menuEntry.getTarget())
				.onClick(e ->
				{
					Color existingColor = getExistingPetNameColor(petId);

					SwingUtilities.invokeLater(() ->
					{
						RuneliteColorPicker colorPicker = colorPickerManager.create(SwingUtilities.windowForComponent((Applet) client),
								existingColor, "Pet Name Color", false);
						colorPicker.setOnClose(color -> saveNameColor(petId, color));
						colorPicker.setVisible(true);
					});
				});


			if (
				pluginConfigManager.getSavedPetColor(petId) != null &&
				!pluginConfigManager.getSavedPetColor(petId).isEmpty()
			) {
				client.createMenuEntry(index + 1)
						.setOption("Remove Name Color")
						.setTarget(menuEntry.getTarget())
						.onClick(e ->
						{
							pluginConfigManager.unsetPetColor(petId);
						});
			}
		}
	}

	private void onNameMenuEntryOptionClicked(NPC pet) {
		chatboxPanelManager.openTextInput("Name your " + pet.getName())
			.value(getExistingPetName(pet.getId()))
			.onDone((input) ->
			{
				savePetName(pet, input);
			})
			.build();
	}

	/**
	 * Save a pet name into config manager
	 * @param petNpc Pet NPC
	 * @param petName Pet name to save
	 */
	private void savePetName(NPC petNpc, String petName)
	{
		if (Objects.equals(petName, "") || petName == null) {
			pluginConfigManager.unsetPetName(petNpc.getId());
		} else {
			pluginConfigManager.setPetName(petNpc.getId(), petName);
			pluginConfigManager.setPetNPCName(petNpc.getId(), petNpc.getName());
		}
	}

	private String getExistingPetName(int petNpcId)
	{
		String name = pluginConfigManager.getSavedPetName(petNpcId);
		if (name != null) {
			return name;
		}
		return "";
	}

	/**
	 * Saves a color to display for an individual pet
	 * @param petNpcId Pet NPC to set colored name for
	 * @param nameColor Color to save
	 */
	private void saveNameColor(int petNpcId, Color nameColor)
	{
		pluginConfigManager.setPetColor(petNpcId, nameColor);
	}

	private Color getExistingPetNameColor(int petNpcId)
	{
		String savedColor = pluginConfigManager.getSavedPetColor(petNpcId);
		if (savedColor != null) {
			return Color.decode(savedColor);
		}
		return Color.white;
	}

	public ArrayList<NPC> getPOHPetRenderList() {
		return pohPets;
	}

	public void addNewPOHPetToRenderList(NPC newPet)
	{
		if (!isPetInPOHRenderList(newPet)) {
			pohPets.add(newPet);
		}
	}

	public void removePOHPetFromRenderList(NPC petToRemove)
	{
		if (isPetInPOHRenderList(petToRemove)) {
			pohPets.remove(petToRemove);
		}
	}

	public boolean isPetInPOHRenderList(NPC pet)
	{
		return pohPets.contains(pet);
	}
}
