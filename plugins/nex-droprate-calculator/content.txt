package com.nexdropratecalculator;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class NexDroprateCalculatorPluginTest {
  public static void main(String[] args) throws Exception {
    ExternalPluginManager.loadBuiltin(NexDroprateCalculatorPlugin.class);
    RuneLite.main(args);
  }
}

package com.nexdropratecalculator;

import com.google.inject.Provides;
import java.awt.image.BufferedImage;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.HitsplatApplied;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.events.ConfigChanged;

@Slf4j
@PluginDescriptor(name = "Nex Droprate Calculator")
public class NexDroprateCalculatorPlugin extends Plugin {
  @Inject private Client client;
  @Inject private ClientToolbar clientToolbar;
  private NexDroprateCalculatorPanel panel;
  private NavigationButton navButton;
  @Inject private OverlayManager overlayManager;
  @Inject private NexDroprateCalculatorOverlay overlay;
  @Inject private NexDroprateCalculatorConfig config;

  private int ownContribution = 0;
  private int totalContribution = 0;
  private boolean inFight = false;
  private boolean inFightInit = false;
  private boolean isMVP = false;
  private boolean minContribution = false;
  private int waitTicks = 0;
  private boolean dumpResults = false;
  private boolean AtNex = false;
  private int ticksUntilOverlayRemoval = -1;  // Initialize to -1 to indicate it's not active


  @Override
  protected void startUp() throws Exception {
    log.debug("Starting Nex Droprate Calculator Plugin");

    panel = injector.getInstance(NexDroprateCalculatorPanel.class);
    panel.init();

    final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "icon.png");
    navButton = NavigationButton.builder().tooltip("Nex Calculator").icon(icon).panel(panel).build();

    clientToolbar.addNavigation(navButton);

    if (config.showOverlay() && (AtNex)) {
      overlayManager.add(overlay);
    }

    log.debug("Nex Droprate Calculator Plugin started successfully");
  }

  @Override
  protected void shutDown() {
    log.debug("Shutting down Nex Droprate Calculator Plugin");

    panel.deinit();
    clientToolbar.removeNavigation(navButton);
    overlayManager.remove(overlay); // Remove the overlay from the overlay manager
    panel = null;
    navButton = null;

    log.debug("Nex Droprate Calculator Plugin shut down successfully");
  }

  @Subscribe
  public void onConfigChanged(ConfigChanged event) {
    if (event.getGroup().equals("nex-droprate-calculator") && (event.getKey().equals("showOverlay"))) {
      if (config.showOverlay() && (AtNex))
      {
        overlayManager.add(overlay);
      } else {
        overlayManager.remove(overlay);
      }
    }
  }

  @Subscribe
  public void onGameTick(GameTick tick) {

    NPC nex = client.getNpcs().stream()
            .filter(npc -> npc.getId() >= 11278 && npc.getId() <= 11282)
            .findFirst()
            .orElse(null);

    inFight = nex != null;
    log.debug("inFight status: {}", inFight);

    if (inFight) {
      if (!inFightInit) {
        log.debug("Initializing fight");
        waitTicks = 2;
        dumpResults = true;
        inFightInit = true;
        isMVP = false;
        minContribution = false;
        ownContribution = 0;
        totalContribution = 0;
        AtNex = true;
        if (config.showOverlay())
        {
          overlayManager.add(overlay);
        }
      }

      int players = (int) client.getPlayers().stream().count();
      log.debug("Number of players in fight: {}", players);
      panel.updateValues(ownContribution, totalContribution, players, isMVP, minContribution, 1);
      overlay.updateValues(ownContribution, totalContribution, players, isMVP, minContribution, 1);
      ownContribution = 0;
      totalContribution = 0;
      // Reset the countdown if still in fight
      ticksUntilOverlayRemoval = -1;  // Cancel countdown since we're in the fight
      return;
    }

    if (waitTicks > 0) {
      waitTicks--;
      log.debug("Waiting ticks: {}", waitTicks);
    } else {
      if (dumpResults) {
        log.debug("Dumping results");
        int players = (int) client.getPlayers().stream().count();
        panel.updateValues(0, 0, 0, isMVP, minContribution, 0);
        overlay.updateValues(0, 0, players, isMVP, minContribution, 0);
        dumpResults = false;
        inFightInit = false;
      }
    }

    if (inFight) {
      log.debug("Exiting fight");
      int players = (int) client.getPlayers().stream().count();
      panel.updateValues(0, 0, 0, false, false, -1);
      overlay.updateValues(0, 0, players, false, false, -1);
    }

    // If fight has ended and countdown has not started yet
    if (!inFight && ticksUntilOverlayRemoval == -1) {
      ticksUntilOverlayRemoval = 50;  // Start 30-second countdown (50 game ticks)
      log.debug("Fight ended, starting overlay removal countdown");
    }

    // If the countdown is active, decrement the timer
    if (ticksUntilOverlayRemoval > 0) {
      ticksUntilOverlayRemoval--;
      log.debug("Overlay removal countdown: {} ticks remaining", ticksUntilOverlayRemoval);
    }

    // Once the countdown reaches 0, remove the overlay
    if (ticksUntilOverlayRemoval == 0) {
      log.debug("30 seconds passed, removing overlay");
      overlayManager.remove(overlay);  // Remove overlay after 30 seconds
      panel.updateValues(0, 0, 0, false, false, -1);
      overlay.updateValues(0, 0, 0, false, false, -1);
      AtNex = false;  // Reset AtNex status
      ticksUntilOverlayRemoval = -1;  // Reset countdown
    }

    // Reset fight status
    inFight = false;
    inFightInit = false;
  }

  @Subscribe
  public void onChatMessage(ChatMessage chatMessage) {
    Player player = client.getLocalPlayer();
    log.debug("Received chat message: {}", chatMessage.getMessage());

    if (chatMessage.getType() == ChatMessageType.GAMEMESSAGE) {
      if (chatMessage.getMessage().contains("You were the MVP for this fight")) {
        log.debug("MVP message detected");
        isMVP = true;
      }
      if (chatMessage.getMessage().contains("received a drop")) {
        log.debug("Drop message detected");
        minContribution = true;
      }
    }
  }

  @Subscribe
  public void onHitsplatApplied(HitsplatApplied hitsplatApplied) {
    if (inFight) {
      if (hitsplatApplied.getActor() instanceof NPC) {
        Hitsplat hitsplat = hitsplatApplied.getHitsplat();
        if (hitsplat.isMine()) {
          log.debug("Hitsplat applied to me: {}", hitsplat.getAmount());
          ownContribution += hitsplat.getAmount();
        }
        if (hitsplat.getHitsplatType() != HitsplatID.HEAL) {
          totalContribution += hitsplat.getAmount();
          log.debug("Total contribution updated: {}", totalContribution);
        }
      }
    }
  }

  @Provides
  NexDroprateCalculatorConfig provideConfig(ConfigManager configManager) {
    return configManager.getConfig(NexDroprateCalculatorConfig.class);
  }
}
package com.nexdropratecalculator;

import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class NexDroprateCalculatorOverlay extends OverlayPanel {
    public NexDroprateCalculatorRun currentRun = new NexDroprateCalculatorRun();
    private final NexDroprateCalculatorPlugin plugin;
    private int playersCount = 0;

    void updateValues(
            int ownContribution,
            int totalContribution,
            int players,
            boolean isMVP,
            boolean minContribution,
            int state) {

        this.playersCount = players;

        if (state == 1 && currentRun.getRunState() == 1) {
            // Collecting current run information
            currentRun.updateRun(
                    ownContribution, totalContribution, players, isMVP, minContribution, false, false);
            currentRun.setRunState(state);
        } else if (state == 1 && currentRun.getRunState() != 1) {
            // New run starts
            if (currentRun.getRunState() == 0);
            currentRun.reset();
            currentRun.updateRun(
                    ownContribution, totalContribution, players, isMVP, minContribution, true, false);
            currentRun.setRunState(state);
        } else if (state == 0 && currentRun.getRunState() == 1) {
            // Current run finished
            currentRun.updateRun(
                    ownContribution, totalContribution, players, isMVP, minContribution, false, true);
            currentRun.setRunState(state);
        } else if (state == -1 && currentRun.getRunState() == 1) {
            // Current run canceled
            currentRun.setRunState(state);
        }
    }

    @Inject
    public NexDroprateCalculatorOverlay(NexDroprateCalculatorPlugin plugin) {
        super(plugin);
        setPosition(OverlayPosition.TOP_LEFT);
        this.plugin = plugin;
        addMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Nex Droprate Calculator Overlay");
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (currentRun.getRunState() != -1) {

            String playersValue = String.valueOf(playersCount); // Convert playersCount to String
            double threshold = 100.0 / playersCount;  // Calculate the threshold (100 / player count)
            double contributionPercent = currentRun.getRunContributionPercent();  // Get the contribution percent

// Convert necessary values to String
            String[] dropRate = {fraction(currentRun.getRunUniqueChanceRoll()), percent(contributionPercent), playersValue};
            String[] type = {"Drop Rate:", "Contribution:", "Players:"};

// Determine the color for the contribution text
            Color contributionColor = contributionPercent > threshold ? Color.GREEN : Color.RED;

            panelComponent.getChildren().add(TitleComponent.builder()
                    .text("Nex Calculator")
                    .color(Color.ORANGE)
                    .build());

            for (int i = 0; i < dropRate.length; i++) {
                Color leftColor = Color.WHITE;  // Default left color
                Color rightColor = (i == 1) ? contributionColor : Color.WHITE;  // Apply the color logic to "Contribution" text only

                panelComponent.getChildren().add(LineComponent.builder()
                        .left(type[i])
                        .right(dropRate[i])
                        .leftColor(leftColor)
                        .rightColor(rightColor)
                        .build());
            }

            return super.render(graphics);

        }
        return null; // Return null if the overlay should not be shown
    }

    private String percent(double value) {
        return String.format("%.1f%%", value);
    }

    private String fraction(int value) {
        if (value == 0) {
            return "N/A";
        }
        int denominator = (value);
        return "1/" + denominator;
    }
}

package com.nexdropratecalculator;

import java.awt.*;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.PluginPanel;

@Slf4j
public class NexDroprateCalculatorPanel extends PluginPanel {
  public NexDroprateCalculatorRun currentRun = new NexDroprateCalculatorRun();
  public NexDroprateCalculatorRun lastRun = new NexDroprateCalculatorRun();
  public NexDroprateCalculatorRun averageRun = new NexDroprateCalculatorRun();

  public JPanel runPanel;

  // Persist the components in fields
  private JLabel uniqueChanceLabel;
  private JLabel uniqueRollLabel;
  private JLabel contributionPercentLabel;
  private JLabel contributionFlatLabel;
  private JLabel playersLabel;
  private JLabel isMVPLabel;
  private JLabel timeLabel;
  private JLabel stateLabel;

  private JLabel lastUniqueChanceLabel;
  private JLabel lastUniqueRollLabel;
  private JLabel lastContributionPercentLabel;
  private JLabel lastContributionFlatLabel;
  private JLabel lastPlayersLabel;
  private JLabel lastIsMVPLabel;
  private JLabel lastTimeLabel;

  private JLabel totalKillsLabel;
  private JLabel averageUniqueChanceLabel;
  private JLabel averageUniqueRollLabel;
  private JLabel averageContributionPercentLabel;
  private JLabel averageContributionFlatLabel;
  private JLabel averagePlayersLabel;
  private JLabel averageMVPPercentLabel;
  private JLabel averageMVPTotalLabel;
  private JLabel averageTimeLabel;
  private JLabel killsPerHourLabel;
  private JLabel uniqueChancePerHourLabel;
  private JLabel uniqueRollCombined;

  void init() {
    final Font font = FontManager.getDefaultFont();

    setLayout(new BorderLayout());
    setBackground(ColorScheme.DARK_GRAY_COLOR);
    setBorder(new EmptyBorder(10, 10, 10, 10));

    // Run panel
    runPanel = new JPanel();
    runPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
    runPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
    runPanel.setLayout(new GridLayout(0, 1));

    // Current run labels
    JLabel currentKillLabel = new JLabel(labelTitle("- Current Kill -"));
    currentKillLabel.setFont(font);
    runPanel.add(currentKillLabel);

    uniqueChanceLabel = new JLabel(labelValue("Unique Chance", "0.0000%"));
    uniqueChanceLabel.setFont(font);
    runPanel.add(uniqueChanceLabel);

    uniqueRollLabel = new JLabel(labelValue("Unique Roll", "N/A"));
    uniqueRollLabel.setFont(font);
    runPanel.add(uniqueRollLabel);

    contributionPercentLabel = new JLabel(labelValue("Contribution", "0.00%"));
    contributionPercentLabel.setFont(font);
    runPanel.add(contributionPercentLabel);

    contributionFlatLabel = new JLabel(labelValue("Damage", "0/0"));
    contributionFlatLabel.setFont(font);
    runPanel.add(contributionFlatLabel);

    playersLabel = new JLabel(labelValue("Players", "0.00"));
    playersLabel.setFont(font);
    runPanel.add(playersLabel);

    isMVPLabel = new JLabel(labelValue("MVP", "no"));
    isMVPLabel.setFont(font);
    runPanel.add(isMVPLabel);

    timeLabel = new JLabel(labelValue("Time", "00h 00m 00s"));
    timeLabel.setFont(font);
    runPanel.add(timeLabel);

    stateLabel = new JLabel(labelState(0));
    stateLabel.setFont(font);
    runPanel.add(stateLabel);

    JLabel emptyLabel = new JLabel(labelEmpty());
    emptyLabel.setFont(font);
    runPanel.add(emptyLabel);

    // Last run labels
    JLabel lastKillLabel = new JLabel(labelTitle("- Last Kill -"));
    lastKillLabel.setFont(font);
    runPanel.add(lastKillLabel);

    lastUniqueChanceLabel = new JLabel(labelValue("Unique Chance", "0.0000%"));
    lastUniqueChanceLabel.setFont(font);
    runPanel.add(lastUniqueChanceLabel);

    lastUniqueRollLabel = new JLabel(labelValue("Unique Roll", "N/A"));
    lastUniqueRollLabel.setFont(font);
    runPanel.add(lastUniqueRollLabel);

    lastContributionPercentLabel = new JLabel(labelValue("Contribution", "0.00%"));
    lastContributionPercentLabel.setFont(font);
    runPanel.add(lastContributionPercentLabel);

    lastContributionFlatLabel = new JLabel(labelValue("Damage", "0/0"));
    lastContributionFlatLabel.setFont(font);
    runPanel.add(lastContributionFlatLabel);

    lastPlayersLabel = new JLabel(labelValue("Players", "0.00"));
    lastPlayersLabel.setFont(font);
    runPanel.add(lastPlayersLabel);

    lastIsMVPLabel = new JLabel(labelValue("MVP", "no"));
    lastIsMVPLabel.setFont(font);
    runPanel.add(lastIsMVPLabel);

    lastTimeLabel = new JLabel(labelValue("Time", "00h 00m 00s"));
    lastTimeLabel.setFont(font);
    runPanel.add(lastTimeLabel);

    JLabel lastEmptyLabel = new JLabel(labelEmpty());
    lastEmptyLabel.setFont(font);
    runPanel.add(lastEmptyLabel);

    // Average run labels
    JLabel averageKillLabel = new JLabel(labelTitle("- Averages -"));
    averageKillLabel.setFont(font);
    runPanel.add(averageKillLabel);

    totalKillsLabel = new JLabel(labelValue("Total Kills", "0"));
    totalKillsLabel.setFont(font);
    runPanel.add(totalKillsLabel);

    averageUniqueChanceLabel = new JLabel(labelValue("Unique Chance", "0.0000%"));
    averageUniqueChanceLabel.setFont(font);
    runPanel.add(averageUniqueChanceLabel);

    averageUniqueRollLabel = new JLabel(labelValue("Unique Roll", "N/A"));
    averageUniqueRollLabel.setFont(font);
    runPanel.add(averageUniqueRollLabel);

    averageContributionPercentLabel = new JLabel(labelValue("Contribution", "0.00%"));
    averageContributionPercentLabel.setFont(font);
    runPanel.add(averageContributionPercentLabel);

    averageContributionFlatLabel = new JLabel(labelValue("Damage", "0/0"));
    averageContributionFlatLabel.setFont(font);
    runPanel.add(averageContributionFlatLabel);

    averagePlayersLabel = new JLabel(labelValue("Players", "0.00"));
    averagePlayersLabel.setFont(font);
    runPanel.add(averagePlayersLabel);

    averageMVPPercentLabel = new JLabel(labelValue("MVP", "0.00%"));
    averageMVPPercentLabel.setFont(font);
    runPanel.add(averageMVPPercentLabel);

    averageMVPTotalLabel = new JLabel(labelValue("MVP Total", "0"));
    averageMVPTotalLabel.setFont(font);
    runPanel.add(averageMVPTotalLabel);

    averageTimeLabel = new JLabel(labelValue("Time", "00h 00m 00s"));
    averageTimeLabel.setFont(font);
    runPanel.add(averageTimeLabel);

    killsPerHourLabel = new JLabel(labelValue("Kills / hr", "0.00"));
    killsPerHourLabel.setFont(font);
    runPanel.add(killsPerHourLabel);

    uniqueChancePerHourLabel = new JLabel(labelValue("Unique Chance / hr", "0.0000%"));
    uniqueChancePerHourLabel.setFont(font);
    runPanel.add(uniqueChancePerHourLabel);

    uniqueRollCombined = new JLabel(labelValue("Combined Unique Roll", "N/A"));
    uniqueRollCombined.setFont(font);
    runPanel.add(uniqueRollCombined);

    JLabel averageEmptyLabel = new JLabel(labelEmpty());
    averageEmptyLabel.setFont(font);
    runPanel.add(averageEmptyLabel);

    JButton resetButton = new JButton(labelButton("Reset Averages"));
    resetButton.setFont(font);
    resetButton.setFocusable(false);
    resetButton.addActionListener(e -> {
      averageRun.reset();
      RestButtonUpdate();
    });
    runPanel.add(resetButton);

    add(runPanel);
  }

  void deinit() {}

  void updateValues(
          int ownContribution,
          int totalContribution,
          int players,
          boolean isMVP,
          boolean minContribution,
          int state) {
    if (state == 1 && currentRun.getRunState() == 1) {
      // Collecting current run information
      currentRun.updateRun(
              ownContribution, totalContribution, players, isMVP, minContribution, false, false);
      currentRun.setRunState(state);
    } else if (state == 1 && currentRun.getRunState() != 1) {
      // New run starts
      if (currentRun.getRunState() == 0) lastRun.setFromRun(currentRun);
      currentRun.reset();
      currentRun.updateRun(
              ownContribution, totalContribution, players, isMVP, minContribution, true, false);
      currentRun.setRunState(state);
    } else if (state == 0 && currentRun.getRunState() == 1) {
      // Current run finished
      currentRun.updateRun(
              ownContribution, totalContribution, players, isMVP, minContribution, false, true);
      averageRun.addRun(currentRun);
      currentRun.setRunState(state);
    } else if (state == -1 && currentRun.getRunState() == 1) {
      // Current run canceled
      currentRun.setRunState(state);
    }

    uniqueChanceLabel.setText(labelValue("Unique Chance", String.format("%.4f", currentRun.getRunUniqueChancePercent()) + "%"));
    uniqueRollLabel.setText(labelValue("Unique Roll", fraction(currentRun.getRunUniqueChanceRoll())));
    contributionPercentLabel.setText(labelValue("Contribution", String.format("%.2f", currentRun.getRunContributionPercent()) + "%"));
    contributionFlatLabel.setText(labelValue("Damage", currentRun.getRunContributionFlatOwn() + "/" + currentRun.getRunContributionFlatTotal()));
    playersLabel.setText(labelValue("Players", String.format("%.2f", currentRun.getRunPlayers())));
    isMVPLabel.setText(labelValue("MVP", (currentRun.isRunIsMVP() ? "yes" : "no")));
    timeLabel.setText(labelValue("Time", currentRun.getTime()));
    stateLabel.setText(labelState(currentRun.getRunState()));

    // Last run
    lastUniqueChanceLabel.setText(labelValue("Unique Chance", String.format("%.4f", lastRun.getRunUniqueChancePercent()) + "%"));
    lastUniqueRollLabel.setText(labelValue("Unique Roll", fraction(lastRun.getRunUniqueChanceRoll())));
    lastContributionPercentLabel.setText(labelValue("Contribution", String.format("%.2f", lastRun.getRunContributionPercent()) + "%"));
    lastContributionFlatLabel.setText(labelValue("Damage", lastRun.getRunContributionFlatOwn() + "/" + lastRun.getRunContributionFlatTotal()));
    lastPlayersLabel.setText(labelValue("Players", String.format("%.2f", lastRun.getRunPlayers())));
    lastIsMVPLabel.setText(labelValue("MVP", (lastRun.isRunIsMVP() ? "yes" : "no")));
    lastTimeLabel.setText(labelValue("Time", lastRun.getTime()));

    // Average run
    totalKillsLabel.setText(labelValue("Total Kills", String.valueOf(averageRun.getRunAverageTotal())));
    averageUniqueChanceLabel.setText(labelValue("Unique Chance", String.format("%.4f", averageRun.getRunAverageUniqueChancePercent()) + "%"));
    averageUniqueRollLabel.setText(labelValue("Unique Roll", fraction(averageRun.getRunAverageUniqueChanceRoll())));
    averageContributionPercentLabel.setText(labelValue("Contribution", String.format("%.2f", averageRun.getRunAverageContributionPercent()) + "%"));
    averageContributionFlatLabel.setText(labelValue("Damage", averageRun.getRunAverageContributionFlatOwn() + "/" + averageRun.getRunAverageContributionFlatTotal()));
    averagePlayersLabel.setText(labelValue("Players", String.format("%.2f", averageRun.getRunAveragePlayers())));
    averageMVPPercentLabel.setText(labelValue("MVP", String.format("%.2f", (averageRun.getRunAverageIsMVPPercent()) * 100) + "%"));
    averageMVPTotalLabel.setText(labelValue("MVP Total", String.valueOf(averageRun.getRunAverageIsMVPTotal())));
    averageTimeLabel.setText(labelValue("Time", averageRun.getRunAverageTime()));
    killsPerHourLabel.setText(labelValue("Kills / hr", String.format("%.2f", averageRun.getRunAverageRunsPerHour())));
    uniqueChancePerHourLabel.setText(labelValue("Unique Chance / hr", String.format("%.4f", averageRun.getRunAverageUniqueChancePercentPerHour()) + "%"));

    int total = averageRun.getRunAverageTotal();
    if (total != 0) {
      uniqueRollCombined.setText(labelValue("Combined Unique Roll", String.format(fraction(averageRun.getRunAverageUniqueChanceRoll() / total))));
    } else {
      uniqueRollCombined.setText(labelValue("Combined Unique Roll", "N/A"));  // Or any appropriate fallback message
    }
  }

  void RestButtonUpdate() {
    totalKillsLabel.setText(labelValue("Total Kills", String.valueOf(averageRun.getRunAverageTotal())));
    averageUniqueChanceLabel.setText(labelValue("Unique Chance", String.format("%.4f", averageRun.getRunAverageUniqueChancePercent()) + "%"));
    averageUniqueRollLabel.setText(labelValue("Unique Roll", fraction(averageRun.getRunAverageUniqueChanceRoll())));
    averageContributionPercentLabel.setText(labelValue("Contribution", String.format("%.2f", averageRun.getRunAverageContributionPercent()) + "%"));
    averageContributionFlatLabel.setText(labelValue("Damage", averageRun.getRunAverageContributionFlatOwn() + "/" + averageRun.getRunAverageContributionFlatTotal()));
    averagePlayersLabel.setText(labelValue("Players", String.format("%.2f", averageRun.getRunAveragePlayers())));
    averageMVPPercentLabel.setText(labelValue("MVP", String.format("%.2f", (averageRun.getRunAverageIsMVPPercent()) * 100) + "%"));
    averageMVPTotalLabel.setText(labelValue("MVP Total", String.valueOf(averageRun.getRunAverageIsMVPTotal())));
    averageTimeLabel.setText(labelValue("Time", averageRun.getRunAverageTime()));
    killsPerHourLabel.setText(labelValue("Kills / hr", String.format("%.2f", averageRun.getRunAverageRunsPerHour())));
    uniqueChancePerHourLabel.setText(labelValue("Unique Chance / hr", String.format("%.4f", averageRun.getRunAverageUniqueChancePercentPerHour()) + "%"));

    int total = averageRun.getRunAverageTotal();
    if (total != 0) {
      uniqueRollCombined.setText(labelValue("Combined Unique Roll", String.format(fraction(averageRun.getRunAverageUniqueChanceRoll() / total))));
    } else {
      uniqueRollCombined.setText(labelValue("Combined Unique Roll", "N/A"));  // Or any appropriate fallback message
    }
  }

  private String labelTitle(String title) {
    return "<html><div style='color:white;font-size:10px;'>" + title + "</div></html>";
  }

  private String labelValue(String name, String value) {
    return "<html><div style='color:white;font-size:10px;'><b>" + name + ": </b>" + value + "</div></html>";
  }

  private String labelState(int state) {
    String stateStr;
    switch (state) {
      case 1:
        stateStr = "Active";
        break;
      case -1:
        stateStr = "Cancelled";
        break;
      default:
        stateStr = "Inactive";
    }

    return "<html><div style='color:white;font-size:10px;'><b>State: </b>" + stateStr + "</div></html>";
  }

  private String labelEmpty() {
    return "<html><div style='color:white;font-size:10px;'><b></b></div></html>";
  }

  private String labelButton(String text) {
    return "<html><div style='color:white;font-size:10px;'>" + text + "</div></html>";
  }

  private String fraction(int value) {
    if (value == 0) {
      return "N/A";
    }
    int denominator = (value);
    return "1/" + denominator;
  }
}
package com.nexdropratecalculator;

import lombok.Data;

@Data
public class NexDroprateCalculatorRun {
  public int runState = 0;

  public double runUniqueChancePercent = 0;
  public int runUniqueChanceRoll = 0;
  public double runContributionPercent = 0;
  public int runContributionFlatOwn = 0;
  public int runContributionFlatTotal = 0;
  public boolean runMinimumContribution = false;
  public double runPlayers = 0;
  public int runPlayersMin = 0;
  public int runPlayersMax = 0;
  public boolean runIsMVP = false;
  public int ticks = 0;
  public String time = "00h 00m 00s";

  public int runAverageTotal = 0;
  public double runAverageUniqueChancePercent = 0;
  public int runAverageUniqueChanceRoll = 0;
  public double runAverageContributionPercent = 0;
  public int runAverageContributionFlatOwn = 0;
  public int runAverageContributionFlatTotal = 0;
  public int runAverageContributionMinimumDamageTotal = 0;
  public double runAveragePlayers = 0;
  public int runAverageIsMVPTotal = 0;
  public double runAverageIsMVPPercent = 0;
  public int runAverageTicks = 0;
  public String runAverageTime = "00h 00m 00s";
  public double runAverageRunsPerHour = 0;
  public double runAverageUniqueChancePercentPerHour = 0;

  public NexDroprateCalculatorRun() {}

  public void updateRun(
      int ownContribution,
      int totalContribution,
      int players,
      boolean isMVP,
      boolean minContribution,
      boolean runStarted,
      boolean runFinished) {
    if (runFinished) {
      runIsMVP = isMVP;
      if (runIsMVP) {
        double mvpBoost = runContributionPercent + (runContributionPercent * .10);
        if (mvpBoost > 100.0) mvpBoost = 100.0;
        runUniqueChanceRoll = (int) Math.ceil(43.0 * (100.0 / mvpBoost));
        runUniqueChancePercent = (1.0 / (double) runUniqueChanceRoll) * 100.0;
      }
      runMinimumContribution = minContribution;
      return;
    }

    ticks++;
    int secondsTotal = (int) Math.ceil((double) ticks * 0.6);
    int seconds = secondsTotal % 60;
    int minutes = (int) Math.floor((double) secondsTotal / 60.0);
    int hours = (int) Math.floor((double) secondsTotal / 3600.0);
    time = String.format("%02dh %02dm %02ds", hours, minutes % 60, seconds % 60);

    if (runStarted) {
      runPlayersMin = players;
      runPlayersMax = players;
    }
    if (players < runPlayersMin) runPlayersMin = players;
    if (players > runPlayersMax) runPlayersMax = players;

    runPlayers = (runPlayersMax + runPlayersMin) / 2.0;

    runContributionFlatOwn += ownContribution;
    runContributionFlatTotal += totalContribution;

    if (runContributionFlatOwn <= 0 || runContributionFlatTotal <= 0) {
      runUniqueChanceRoll = 0;
      runUniqueChancePercent = 0;
      runContributionPercent = 0;
    } else {
      runUniqueChanceRoll = (int) Math.ceil(43.0 * (100.0 / runContributionPercent));
      runUniqueChancePercent = (1.0 / (double) runUniqueChanceRoll) * 100.0;
      runContributionPercent =
          ((double) runContributionFlatOwn / (double) runContributionFlatTotal) * 100.0;
    }
  }

  public void addRun(NexDroprateCalculatorRun run) {
    runAverageTicks =
        (int)
            Math.round(
                (((double) runAverageTicks * runAverageTotal) + (double) run.getTicks())
                    / (double) (runAverageTotal + 1));
    int secondsTotal = (int) Math.ceil((double) runAverageTicks * 0.6);
    int seconds = secondsTotal % 60;
    int minutes = (int) Math.floor((double) secondsTotal / 60.0);
    int hours = (int) Math.floor((double) secondsTotal / 3600.0);
    runAverageTime = String.format("%02dh %02dm %02ds", hours, minutes % 60, seconds % 60);

    runAverageUniqueChancePercent =
        ((runAverageUniqueChancePercent * (double) runAverageTotal)
                + run.getRunUniqueChancePercent())
            / (double) (runAverageTotal + 1);
    runAverageUniqueChanceRoll = (int) Math.ceil(100.0 / runAverageUniqueChancePercent);

    runAverageContributionPercent =
        ((runAverageContributionPercent * (double) runAverageTotal)
                + run.getRunContributionPercent())
            / (double) (runAverageTotal + 1);
    runAverageContributionFlatOwn =
        (int)
            Math.round(
                (((double) runAverageContributionFlatOwn * runAverageTotal)
                        + (double) run.getRunContributionFlatOwn())
                    / (double) (runAverageTotal + 1));
    runAverageContributionFlatTotal =
        (int)
            Math.round(
                (((double) runAverageContributionFlatTotal * runAverageTotal)
                        + (double) run.getRunContributionFlatTotal())
                    / (double) (runAverageTotal + 1));
    runAverageContributionMinimumDamageTotal += run.isRunMinimumContribution() ? 1 : 0;

    runAveragePlayers =
        ((runAveragePlayers * runAverageTotal) + run.getRunPlayers())
            / (double) (runAverageTotal + 1);

    runAverageIsMVPTotal += run.isRunIsMVP() ? 1 : 0;
    runAverageIsMVPPercent = (double) runAverageIsMVPTotal / (double) (runAverageTotal + 1);

    runAverageRunsPerHour = 6000.0 / ((double) runAverageTicks + 30.0);
    runAverageUniqueChancePercentPerHour =
        (1 - Math.pow(1.0 - (runAverageUniqueChancePercent / 100.0), runAverageRunsPerHour))
            * 100.0;

    runAverageTotal++;
  }

  public void setFromRun(NexDroprateCalculatorRun run) {
    runState = run.getRunState();

    runUniqueChancePercent = run.getRunUniqueChancePercent();
    runUniqueChanceRoll = run.getRunUniqueChanceRoll();
    runContributionPercent = run.getRunContributionPercent();
    runContributionFlatOwn = run.getRunContributionFlatOwn();
    runContributionFlatTotal = run.getRunContributionFlatTotal();
    runMinimumContribution = run.isRunMinimumContribution();
    runPlayers = run.getRunPlayers();
    runPlayersMin = run.getRunPlayersMin();
    runPlayersMax = run.getRunPlayersMax();
    runIsMVP = run.isRunIsMVP();
    ticks = run.getTicks();
    time = run.getTime();

    runAverageTotal = run.getRunAverageTotal();
    runAverageUniqueChancePercent = run.getRunAverageUniqueChancePercent();
    runAverageUniqueChanceRoll = run.getRunAverageUniqueChanceRoll();
    runAverageContributionPercent = run.getRunAverageContributionPercent();
    runAverageContributionFlatOwn = run.getRunAverageContributionFlatOwn();
    runAverageContributionFlatTotal = run.getRunAverageContributionFlatTotal();
    runAverageContributionMinimumDamageTotal = run.getRunAverageContributionMinimumDamageTotal();
    runAveragePlayers = run.getRunAveragePlayers();
    runAverageIsMVPTotal = run.getRunAverageIsMVPTotal();
    runAverageIsMVPPercent = run.getRunAverageIsMVPPercent();
    runAverageTicks = run.getRunAverageTicks();
    runAverageTime = run.getRunAverageTime();
    runAverageRunsPerHour = run.getRunAverageRunsPerHour();
    runAverageUniqueChancePercentPerHour = run.getRunAverageUniqueChancePercentPerHour();
  }

  public void reset() {
    runState = 0;

    runUniqueChancePercent = 0;
    runUniqueChanceRoll = 0;
    runContributionPercent = 0;
    runContributionFlatOwn = 0;
    runContributionFlatTotal = 0;
    runMinimumContribution = false;
    runPlayers = 0;
    runPlayersMin = 0;
    runPlayersMax = 0;
    runIsMVP = false;
    ticks = 0;
    time = "00h 00m 00s";

    runAverageTotal = 0;
    runAverageUniqueChancePercent = 0;
    runAverageUniqueChanceRoll = 0;
    runAverageContributionPercent = 0;
    runAverageContributionFlatOwn = 0;
    runAverageContributionFlatTotal = 0;
    runAverageContributionMinimumDamageTotal = 0;
    runAveragePlayers = 0;
    runAverageIsMVPTotal = 0;
    runAverageIsMVPPercent = 0;
    runAverageTicks = 0;
    runAverageTime = "00h 00m 00s";
    runAverageRunsPerHour = 0;
    runAverageUniqueChancePercentPerHour = 0;
  }
}

package com.nexdropratecalculator;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;


@ConfigGroup("nex-droprate-calculator")
public interface NexDroprateCalculatorConfig extends Config {

    @ConfigItem(
            position = 1,
            keyName = "showOverlay",
            name = "Show Overlay",
            description = "Toggle overlay"
    )
    default boolean showOverlay() {
        return true;
    }

    @ConfigItem(
            position = 2,
            keyName = "DropRate",
            name = "Increase Drop Rate",
            description = "Only works if you believe!"
    )
    default boolean DropRate() {
        return true;
    }
}


