package com.timeplayed;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.*;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.RuneScapeProfileChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Time Played",
	description = "Displays time played",
	enabledByDefault = true,
	tags = {"time played, playtime, play, time, timer, ingame, in game"}
)

public class TimePlayedPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private TimePlayedOverlay myOverlay;

	@Inject
	private TimePlayedConfig config;

	@Inject
	private ConfigManager configManager;

	private boolean paused = true;


	@Override
	protected void startUp() throws Exception {
		overlayManager.add(myOverlay);
		myOverlay.seconds = getStoredSeconds();
		myOverlay.minutes = getStoredMinutes();
	}

	@Override
	protected void shutDown() throws Exception {
		if (config.clearReportButton() || config.showOnReportButton()) {
			Widget reportButton = client.getWidget(ComponentID.CHATBOX_REPORT_TEXT);
			if (reportButton != null) {
				reportButton.setText("Report");
			}
		}
		setStoredSeconds(myOverlay.seconds);
		setStoredMinutes(myOverlay.minutes);
		overlayManager.remove(myOverlay);
	}

	@Subscribe
	private void onConfigChanged(ConfigChanged event) {
		if (!event.getGroup().equals("timeplayed"))
		{
			return;
		}

		if (event.getKey().equals("ontop")) {
			if (config.ontop()) {
				myOverlay.setLayer(OverlayLayer.ABOVE_WIDGETS);
			} else {
				myOverlay.setLayer(OverlayLayer.ABOVE_SCENE);
			}
		}

		if (event.getKey().equals("showonreportbutton") || event.getKey().equals("clearreportbutton")) {
			Widget reportButton = client.getWidget(ComponentID.CHATBOX_REPORT_TEXT);
			if (reportButton != null) {
				if (config.showOnReportButton() || config.clearReportButton()) {
					reportButton.setText("");
				} else {
					reportButton.setText("Report");
				}
			}
		}
	}

	@Subscribe
	private void onGameStateChanged(GameStateChanged event) {
		if (event.getGameState() == GameState.LOADING ||
				event.getGameState() == GameState.LOGGED_IN ||
				event.getGameState() == GameState.CONNECTION_LOST) {
			if (paused) {
				paused = false;

				myOverlay.seconds = getStoredSeconds();
				myOverlay.minutes = getStoredMinutes();
				if (myOverlay.minutes == 0) {
					myOverlay.minutes = client.getVarcIntValue(526);
				}

				// there is a 1.2 second penalty every time you hop
				myOverlay.seconds += 12;
				if (myOverlay.seconds >= 600) {
					myOverlay.minutes += 1;
					myOverlay.seconds -= 600;
				}

				// after penalty, see if we were desynced
				int timePlayed = client.getVarcIntValue(526);
				if (timePlayed > myOverlay.minutes) {
					myOverlay.minutes = timePlayed;
					myOverlay.seconds = 0;
				}

			}
		} else if (!paused) {
			paused = true;
			setStoredSeconds(myOverlay.seconds);
			setStoredMinutes(myOverlay.minutes);
		}
	}

	@Subscribe
	public void onRuneScapeProfileChanged(RuneScapeProfileChanged event) {
		myOverlay.seconds = getStoredSeconds();
		myOverlay.minutes = getStoredMinutes();
	}

	@Subscribe
	public void onGameTick(GameTick event) {
		if (myOverlay == null) {
			return;
		}
		myOverlay.lastTick = java.time.Instant.now().toEpochMilli();
		myOverlay.msOffset = 0;
		myOverlay.seconds += 6;

		if (myOverlay.seconds >= 600) {
			myOverlay.minutes += 1;
			myOverlay.seconds -= 600;
		}
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event) {
		int timePlayed = client.getVarcIntValue(526);
		if (timePlayed > myOverlay.minutes) {
			myOverlay.minutes = timePlayed;
			myOverlay.seconds = 0;
		}
	}

	@Subscribe
	public void onClientTick(ClientTick event) {
		// save current time for smooth timer
		if (myOverlay != null) {
			long time = java.time.Instant.now().toEpochMilli();
			myOverlay.msOffset = (int) ((time - myOverlay.lastTick) / 100);
		}

		if (paused) {
			return;
		}
		// clear report button
		if (config.clearReportButton() || config.showOnReportButton()) {
			Widget reportButton = client.getWidget(ComponentID.CHATBOX_REPORT_TEXT);
			if (reportButton != null && reportButton.getText().equals("Report")) {
				reportButton.setText("");
			}
		}



	}

	@Provides
	TimePlayedConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(TimePlayedConfig.class);
	}

	private int getStoredSeconds()
	{
		try
		{
			return Integer.parseInt(configManager.getRSProfileConfiguration("timeplayed", "seconds"));
		}
		catch (NumberFormatException ignored)
		{
			return 0;
		}
	}

	private void setStoredSeconds(int seconds)
	{
		configManager.setRSProfileConfiguration("timeplayed", "seconds", seconds);

	}

	private int getStoredMinutes()
	{
		try
		{
			return Integer.parseInt(configManager.getRSProfileConfiguration("timeplayed", "minutes"));
		}
		catch (NumberFormatException ignored)
		{
			paused = true;
			return 0;
		}
	}

	private void setStoredMinutes(int minutes)
	{
		configManager.setRSProfileConfiguration("timeplayed", "minutes", minutes);

	}
}

package com.timeplayed;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("timeplayed")
public interface TimePlayedConfig extends Config
{
	@ConfigItem(
			keyName = "displays",
			name = "Display seconds?",
			description = "Check the box to display seconds.",
			position = 1
	)
	default boolean displaySeconds() { return true; }

	@ConfigItem(
			keyName = "displayms",
			name = "Display ms?",
			description = "Check the box to display ms.",
			position = 1
	)
	default boolean displayMs() { return false; }

	@ConfigItem(
			keyName = "displaydays",
			name = "Display days?",
			description = "Check the box to display days instead of just hours.",
			position = 1
	)
	default boolean displayDays() { return false; }

	@ConfigItem(
			keyName = "smoothtimer",
			name = "Smooth timer?",
			description = "Check the box to use a smooth timer. This means it will interpolate and count up ms instead of just counting up ticks, and the seconds section will change every second rather than at a variable rate dependent on ticks.",
			position = 2
	)
	default boolean smoothTimer() { return true; }

	@ConfigItem(
			keyName = "ontop",
			name = "Always on top?",
			description = "Check the box to show the timer above all other interfaces.",
			position = 3
	)
	default boolean ontop() { return true; }

	@ConfigItem(
			keyName = "showonreportbutton",
			name = "Show time on Report button?",
			description = "Check the box to draw the timer on the report button. Hides the default timer.",
			position = 5
	)
	default boolean showOnReportButton() { return false; }

	@ConfigItem(
			keyName = "clearreportbutton",
			name = "Clear text on Report button?",
			description = "Check the box to clear the text from the Report button (to put the fancy timer on top).",
			position = 6
	)
	default boolean clearReportButton() { return false; }

	@ConfigItem(
			keyName = "defstyle",
			name = "Use default RuneLite styling?",
			description = "Check the box to ignore all customizations below.",
			position = 4
	)
	default boolean defStyle() { return false; }

	@ConfigSection(
			name = "Timer Offset",
			description = "Subtract time from the display on the timer. Useful to reset the time from zero for challenges.",
			position = 7,
			closedByDefault = false
	)
	String offsetSection = "offs";
	@ConfigItem(
			keyName = "useoffset",
			name = "Use offset?",
			description = "Check the box to subtract the offset from the displayed time.",
			section = "offs",
			position = 1
	)
	default boolean useOffset() { return false; }
	@ConfigItem(
			keyName = "offset",
			name = "Offset (minutes)",
			description = "The amount of minutes to subtract from the timer.\n" +
					"Calculate this number by doing (hours * 60) + minutes.\n" +
					"If the number entered is too high, no offset will be used.",
			section = "offs",
			position = 2
	)
	default int offset() { return 0; }

	@ConfigSection(
			name = "Customizations",
			description = "Customize the appearance of the timer to look more like LiveSplit",
			position = 8,
			closedByDefault = false
	)
	String customizationsSection = "cust";

	@ConfigItem(
			keyName = "fontsize",
			name = "Font size",
			description = "The font size to display the timer at",
			section = "cust",
			position = 1
	)
	default int fontSize() { return 16; }

	@Alpha
	@ConfigItem(
			keyName = "fontcolor",
			name = "Font color",
			description = "The color to display the timer with",
			section = "cust",
			position = 2
	)
	default Color fontColor() { return new Color(41,204,84, 255); }

	@ConfigItem(
			keyName = "font",
			name = "Font",
			description = "The font to display the timer with",
			section = "cust",
			position = 3
	)
	default String font() { return "Century Gothic Bold"; }

	@Alpha
	@ConfigItem(
			keyName = "bgcolor",
			name = "Background color",
			description = "The color of the background (transparent by default)",
			section = "cust",
			position = 4
			//hidden = true // FIXME: hidden because it doesn't scale appropriate to the font size
	)
	default Color bgColor() { return new Color(70, 61, 50, 0); }

}

package com.timeplayed;

import net.runelite.api.Client;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ComponentConstants;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;

import javax.inject.Inject;
import java.awt.*;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;


import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class TimePlayedOverlay extends Overlay {

    private TimePlayedPlugin plugin;
    private TimePlayedConfig config;
    private Client client;
    private TooltipManager tooltipManager;

    private PanelComponent panelComponent = new PanelComponent();

    public int minutes = 0;
    public int seconds = 0;
    public long lastTick = 0;
    public int msOffset = 0;


    @Inject
    public TimePlayedOverlay(TimePlayedPlugin plugin, TimePlayedConfig config, Client client, TooltipManager tooltipManager) {
        super(plugin);
        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
        if (config.ontop()) {
            setLayer(OverlayLayer.ABOVE_WIDGETS);
        } else {
            setLayer(OverlayLayer.ABOVE_SCENE);
        }

        this.plugin = plugin;
        this.config = config;
        this.client = client;
        this.tooltipManager = tooltipManager;

        setMinimumSize(10);
        panelComponent.setBorder(new Rectangle(4, 4));

        getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Time played overlay"));
    }

    //render method
    @Override
    public Dimension render(Graphics2D graphics) {
        panelComponent.getChildren().clear();


        String leftStr = buildLeftString();
        String rightStr = buildRightString();
        String str = leftStr + rightStr;

        if (config.showOnReportButton()) {
            Widget reportButton = client.getWidget(ComponentID.CHATBOX_REPORT_TEXT);
            if (reportButton != null) {
                reportButton.setText(str);
            }
            return null;
        }

        if (config.defStyle()) {
            FontMetrics metrics = graphics.getFontMetrics(FontManager.getRunescapeFont());
            int hgt = metrics.getHeight();
            int adv = metrics.stringWidth(leftStr + rightStr);
            panelComponent.getChildren().add(LineComponent.builder()
                    .right(str)
                    .build());

            Color bgcolor = ComponentConstants.STANDARD_BACKGROUND_COLOR;
            panelComponent.setBackgroundColor(bgcolor);

            panelComponent.setPreferredSize(new Dimension(adv + 8, hgt + 8));

        } else {
            Font font = new Font(config.font(), Font.PLAIN, config.fontSize());
            Color color = config.fontColor();
            Color bgcolor = config.bgColor();
            FontMetrics metrics = graphics.getFontMetrics(font);
            int hgt = metrics.getHeight();
            int adv = metrics.stringWidth(leftStr + rightStr);

            panelComponent.getChildren().add(LineComponent.builder()
                    .right(leftStr + rightStr)
                    .rightFont(font)
                    .rightColor(color)
                    .build());

            panelComponent.setBackgroundColor(bgcolor);

            panelComponent.setPreferredSize(new Dimension(adv + 8, hgt + 8));

        }

        return panelComponent.render(graphics);
    }

    public String buildLeftString() {
        int offsetMinutes = minutes;
        if (config.useOffset() && (offsetMinutes - config.offset()) >= 0) {
            offsetMinutes -= config.offset();
        }

        if (config.displayDays()) {
            int days = offsetMinutes / 1440;
            int hrs = (offsetMinutes % 1440) / 60;
            int mins = offsetMinutes % 60;
            return String.format("%01dd%02d:%02d", days, hrs, mins);
        } else {
            int hrs = offsetMinutes / 60;
            int mins = offsetMinutes % 60;
            return String.format("%d:%02d", hrs, mins);
        }

    }

    public String buildRightString() {
        int effectiveSec;
        if (config.smoothTimer()) {
            if (msOffset >= 6) {
                msOffset = 5;
            }
            effectiveSec = seconds + msOffset;

        } else {
            effectiveSec = seconds;
        }
        if(config.displaySeconds() == false) {
            return "";
        }
        if (config.displayMs()) {
            int secs = effectiveSec / 10;
            int ms = effectiveSec % 10;
            return String.format(":%02d.%01d", secs, ms);
        } else {
            int secs = effectiveSec / 10;
            return String.format(":%02d", secs);
        }


    }

}
package com.timeplayed;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TimePlayedPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(TimePlayedPlugin.class);
		RuneLite.main(args);
	}
}
