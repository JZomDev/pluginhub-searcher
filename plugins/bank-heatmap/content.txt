package io.ryoung.heatmap;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class HeatmapPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(HeatmapPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2019, Ron Young <https://github.com/raiyni>
 * All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package io.ryoung.heatmap;

import lombok.Data;

@Data
class HeatmapItem
{
	private int id;

	private long gePrice;
	private long alchPrice;

	private float alchFactor;
	private float geFactor;

	private int quantity;
}

package io.ryoung.heatmap;

import java.awt.BasicStroke;
import java.awt.Dimension;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;

public class HeatmapTutorialOverlay extends OverlayPanel
{
	private final Client client;
	private final HeatmapPlugin plugin;

	@Inject
	private HeatmapTutorialOverlay(Client client, HeatmapPlugin plugin)
	{
		super(plugin);
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_WIDGETS);
		this.client = client;
		this.plugin = plugin;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (!plugin.isBankVisible())
		{
			return null;
		}

		Widget button = client.getWidget(ComponentID.BANK_SETTINGS_BUTTON);
		if (button == null || button.isSelfHidden() || button.getDynamicChildren()[0].getSpriteId() != 195)
		{
			return null;
		}

		Rectangle bounds = button.getBounds();

		graphics.setColor(ColorScheme.BRAND_ORANGE);
		graphics.setStroke(new BasicStroke(2));
		graphics.drawRect(bounds.x, bounds.y, bounds.width, bounds.height);

		FontMetrics font = graphics.getFontMetrics();
		int width = font.stringWidth("Right click this button");

		graphics.setColor(ColorScheme.DARKER_GRAY_COLOR);
		graphics.fillRect(bounds.x + bounds.width + 2, bounds.y - 15, width + 6, 30);


		graphics.setColor(ColorScheme.BRAND_ORANGE);
		graphics.drawString("Right click this button", bounds.x + bounds.width + 5, bounds.y);
		graphics.drawString("for Heatmap overlay", bounds.x + bounds.width + 5, bounds.y + 12);

		return super.render(graphics);
	}
}

/*
 * Copyright (c) 2019, Ron Young <https://github.com/raiyni>
 * All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package io.ryoung.heatmap;

import java.util.HashMap;
import java.util.Map;
import javax.inject.Inject;
import lombok.Getter;
import net.runelite.api.Constants;
import net.runelite.api.Item;
import net.runelite.api.ItemID;
import net.runelite.client.game.ItemManager;

public class HeatmapCalculation
{
	private final ItemManager itemManager;

	@Getter
	private final Map<Integer, HeatmapItem> heatmapItems = new HashMap<>();

	@Inject
	private HeatmapCalculation(ItemManager itemManager)
	{
		this.itemManager = itemManager;
	}

	void calculate(Item[] items)
	{
		heatmapItems.clear();
		if (items == null)
		{
			return;
		}

		for (final Item item : items)
		{
			final int qty = item.getQuantity();
			final int id = item.getId();

			final HeatmapItem hItem = new HeatmapItem();
			hItem.setId(id);
			hItem.setQuantity(qty);
			heatmapItems.put(item.getId(), hItem);

			if (id <= 0 || qty == 0)
			{
				continue;
			}

			switch (id)
			{
				case ItemID.COINS_995:
					hItem.setAlchPrice(qty);
					hItem.setGePrice(qty);
					break;
				case ItemID.PLATINUM_TOKEN:
					hItem.setGePrice(qty * 1000L);
					hItem.setAlchPrice(qty * 1000L);
					break;
				default:
					final long storePrice = itemManager.getItemComposition(id).getPrice();
					final long alchPrice = (long) (storePrice * Constants.HIGH_ALCHEMY_MULTIPLIER);

					hItem.setGePrice(itemManager.getItemPrice(id) * qty);
					hItem.setAlchPrice(alchPrice * qty);
					break;
			}
		}

		normalizeItems();
	}

	private void normalizeItems()
	{
		long minAlch = Long.MAX_VALUE, minGe = Long.MAX_VALUE;
		long maxAlch = Long.MIN_VALUE, maxGe = Long.MIN_VALUE;

		for (HeatmapItem hItem : heatmapItems.values())
		{
			minGe = Math.min(minGe, hItem.getGePrice());
			minAlch = Math.min(minAlch, hItem.getAlchPrice());

			maxGe = Math.max(maxGe, hItem.getGePrice());
			maxAlch = Math.max(maxAlch, hItem.getAlchPrice());
		}

		for (HeatmapItem hItem : heatmapItems.values())
		{
			hItem.setAlchFactor(normalize(0, 1, minAlch, maxAlch, hItem.getAlchPrice()));
			hItem.setGeFactor(normalize(0, 1, minGe, maxGe, hItem.getGePrice()));
		}
	}

	private static float normalize(int a, int b, long min, long max, long x)
	{
		return (b - a) * ((float) (x - min) / (max - min)) + a;
	}
}

package io.ryoung.heatmap;

import com.google.common.collect.ImmutableList;
import com.google.inject.Provides;
import java.util.Arrays;
import java.util.List;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.ScriptID;
import net.runelite.api.Varbits;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.api.events.ScriptPostFired;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Bank Heatmap"
)
public class HeatmapPlugin extends Plugin
{
	enum HEATMAP_MODE
	{
		NULL,
		HA,
		GE
	}

	private static final List<Integer> TAB_VARBITS = ImmutableList.of(
		Varbits.BANK_TAB_ONE_COUNT,
		Varbits.BANK_TAB_TWO_COUNT,
		Varbits.BANK_TAB_THREE_COUNT,
		Varbits.BANK_TAB_FOUR_COUNT,
		Varbits.BANK_TAB_FIVE_COUNT,
		Varbits.BANK_TAB_SIX_COUNT,
		Varbits.BANK_TAB_SEVEN_COUNT,
		Varbits.BANK_TAB_EIGHT_COUNT,
		Varbits.BANK_TAB_NINE_COUNT
	);

	@Inject
	private Client client;

	@Inject
	private HeatmapCalculation heatmapCalculation;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private HeatmapItemOverlay heatmapItemOverlay;

	@Inject
	private HeatmapTutorialOverlay heatmapTutorialOverlay;

	@Inject
	private HeatmapConfig config;

	@Getter
	private HEATMAP_MODE heatmapMode = HEATMAP_MODE.NULL;

	@Override
	protected void startUp()
	{
		overlayManager.add(heatmapItemOverlay);
		overlayManager.add(heatmapTutorialOverlay);
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(heatmapItemOverlay);
		overlayManager.remove(heatmapTutorialOverlay);
		heatmapMode = HEATMAP_MODE.NULL;
	}

	@Provides
	HeatmapConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(HeatmapConfig.class);
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (!"heatmap".equals(event.getGroup()) || !"tutorial".equals(event.getKey()))
		{
			return;
		}

		if (config.showTutorial())
		{
			overlayManager.add(heatmapTutorialOverlay);
		}
		else
		{
			overlayManager.remove(heatmapTutorialOverlay);
		}
	}

	@Subscribe
	public void onScriptPostFired(ScriptPostFired event)
	{
		if (event.getScriptId() == ScriptID.BANKMAIN_BUILD)
		{
			Item[] items = getBankTabItems();
			heatmapItemOverlay.getHeatmapImages().invalidateAll();
			heatmapCalculation.calculate(items);
		}
	}

	@Subscribe
	public void onMenuEntryAdded(MenuEntryAdded event)
	{
		if (event.getType() != MenuAction.CC_OP.getId() || !event.getOption().equals("Show menu")
			|| (event.getActionParam1() >> 16) != InterfaceID.BANK)
		{
			return;
		}

		client.getMenu().createMenuEntry(-1)
			.setOption("Toggle GE Heatmap")
			.setTarget("")
			.setType(MenuAction.RUNELITE)
			.onClick(this::onClick)
			.setDeprioritized(true);

		client.getMenu().createMenuEntry(-1)
			.setOption("Toggle HA Heatmap")
			.setTarget("")
			.setType(MenuAction.RUNELITE)
			.onClick(this::onClick)
			.setDeprioritized(true);


		if (config.showTutorial())
		{
			client.getMenu().createMenuEntry(-1)
				.setOption("Disable tutorial")
				.setTarget("")
				.setType(MenuAction.WIDGET_FIFTH_OPTION)
				.setIdentifier(event.getIdentifier())
				.setParam0(event.getActionParam0())
				.setParam1(event.getActionParam1())
				.onClick(e -> config.setTutorial(false))
				.setDeprioritized(true);
		}
	}

	public void onClick(MenuEntry e)
	{
		HEATMAP_MODE mode = e.getOption().equals("Toggle GE Heatmap") ? HEATMAP_MODE.GE : HEATMAP_MODE.HA;
		if (mode == heatmapMode)
		{
			heatmapMode = HEATMAP_MODE.NULL;
		}
		else
		{
			heatmapItemOverlay.getHeatmapImages().invalidateAll();
			heatmapMode = mode;
		}
	}

	private Item[] getBankTabItems()
	{
		final ItemContainer container = client.getItemContainer(InventoryID.BANK);
		if (container == null)
		{
			return null;
		}

		final Item[] items = container.getItems();
		int currentTab = client.getVarbitValue(Varbits.CURRENT_BANK_TAB);

		if (currentTab > 0 && currentTab < 14)
		{
			int startIndex = 0;

			for (int i = currentTab - 1; i > 0; i--)
			{
				startIndex += client.getVarbitValue(TAB_VARBITS.get(i - 1));
			}

			int itemCount = client.getVarbitValue(TAB_VARBITS.get(currentTab - 1));
			return Arrays.copyOfRange(items, startIndex, startIndex + itemCount);
		}

		return items;
	}

	HeatmapItem getHeatmapItem(int id)
	{
		return heatmapCalculation.getHeatmapItems().get(id);
	}

	boolean isBankVisible()
	{
		Widget bank = client.getWidget(ComponentID.BANK_CONTAINER);
		return config.showTutorial() && bank != null && !bank.isHidden();
	}
}

/*
 * Copyright (c) 2019, Ron Young <https://github.com/raiyni>
 * All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package io.ryoung.heatmap;

import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import com.google.inject.Inject;
import io.ryoung.heatmap.HeatmapPlugin.HEATMAP_MODE;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.util.concurrent.TimeUnit;
import lombok.Getter;
import net.runelite.api.ItemComposition;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.WidgetItemOverlay;
import net.runelite.client.util.ImageUtil;

public class HeatmapItemOverlay extends WidgetItemOverlay
{
	private static final int ALPHA = 135;
	private static final int COLOR_BOUNDARY = 240;

	private final HeatmapPlugin plugin;
	private final ItemManager itemManager;

	@Getter
	private final Cache<Integer, BufferedImage> heatmapImages = CacheBuilder.newBuilder()
		.maximumSize(160)
		.expireAfterWrite(2, TimeUnit.MINUTES)
		.build();

	@Inject
	HeatmapItemOverlay(HeatmapPlugin plugin, ItemManager itemManager)
	{
		this.plugin = plugin;
		this.itemManager = itemManager;
		showOnBank();
	}

	@Override
	public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem itemWidget)
	{
		HeatmapItem hItem = plugin.getHeatmapItem(itemId);
		HEATMAP_MODE mode = plugin.getHeatmapMode();
		if (hItem == null || itemWidget.getWidget().getParentId() != ComponentID.BANK_ITEM_CONTAINER
			|| mode == HEATMAP_MODE.NULL
			|| (mode == HEATMAP_MODE.GE && hItem.getGePrice() < 1) || (mode == HEATMAP_MODE.HA && hItem.getAlchPrice() < 1))
		{
			return;
		}

		Rectangle bounds = itemWidget.getCanvasBounds();
		BufferedImage image = heatmapImages.getIfPresent(itemId);
		if (image == null)
		{
			image = getImage(hItem, mode);
			heatmapImages.put(itemId, image);
		}

		graphics.drawImage(image, bounds.x, bounds.y, null);
	}

	private static Color getColor(float value)
	{
		float h = (1 - value) * COLOR_BOUNDARY / 360;
		Color c = Color.getHSBColor(h, 1, 1f);

		return new Color(c.getRed(), c.getGreen(), c.getBlue(), ALPHA);
	}

	private BufferedImage getImage(HeatmapItem item, HEATMAP_MODE mode)
	{
		ItemComposition itemComposition = itemManager.getItemComposition(item.getId());
		boolean stackable = item.getQuantity() > 1 || itemComposition.isStackable();
		BufferedImage image = itemManager.getImage(item.getId(), item.getQuantity(), stackable);
		Color color = getColor(mode == HEATMAP_MODE.GE ? item.getGeFactor() : item.getAlchFactor());
		return ImageUtil.fillImage(image, color);
	}
}

package io.ryoung.heatmap;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("heatmap")
public interface HeatmapConfig extends Config
{
	@ConfigItem(
		keyName = "tutorial",
		name = "Show Heatmap Tutorial",
		description = "Show Heatmap Tutorial",
		position = 1
	)
	default boolean showTutorial()
	{
		return true;
	}

	@ConfigItem(
		keyName = "tutorial",
		name = "",
		description = ""
	)
	void setTutorial(boolean tutorial);
}

