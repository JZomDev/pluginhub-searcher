package com.valuabledroprecolor;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ValuableDropRecolorPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ValuableDropRecolorPlugin.class);
		RuneLite.main(args);
	}
}
package com.valuabledroprecolor;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("valuabledroprecolor")
public interface ValuableDropRecolorConfig extends Config {

	@ConfigSection(
			name = "Transparent Settings",
			description = "Settings for transparent chatbox",
			position = 0
	)
	String transparent = "transparent";

	@ConfigSection(
			name = "Opaque Settings",
			description = "Settings for opaque chatbox",
			position = 0
	)
	String opaque = "opaque";

	@ConfigItem(
			keyName = "highlightedItems",
			name = "Highlighted Items",
			description = "Configures specifically highlighted items. Format: (item), (item)",
			position = 0
	)
	default String getHighlightItems()
	{
		return "";
	}

	@ConfigItem(
			keyName = "recolorHighlightedOnly",
			name = "Recolor Highlighted Drops Only",
			description = "Configures whether or not to only recolor highlighted drops",
			position = 1
	)
	default boolean recolorHighlightedOnly()
	{
		return false;
	}

	@ConfigItem(
			keyName = "lowValuePrice",
			name = "Low value price",
			description = "Configures the start price for low value items",
			position = 2
	)
	default int lowValuePrice()
	{
		return 20000;
	}

	@ConfigItem(
			keyName = "mediumValuePrice",
			name = "Medium value price",
			description = "Configures the start price for medium value items",
			position = 3
	)
	default int mediumValuePrice()
	{
		return 100000;
	}

	@ConfigItem(
			keyName = "highValuePrice",
			name = "High value price",
			description = "Configures the start price for high value items",
			position = 4
	)
	default int highValuePrice()
	{
		return 1000000;
	}

	@ConfigItem(
			keyName = "insaneValuePrice",
			name = "Insane value price",
			description = "Configures the start price for insane value items",
			position = 5
	)
	default int insaneValuePrice()
	{
		return 10000000;
	}

	@Alpha
	@ConfigItem(
			keyName = "defaultColorTransparent",
			name = "Default items",
			description = "Configures the color for default, non-highlighted items",
			position = 1,
			section = transparent
	)
	default Color defaultColorTransparent()
	{
		return Color.lightGray;
	}

	@Alpha
	@ConfigItem(
			keyName = "highlightedColorTransparent",
			name = "Highlighted items",
			description = "Configures the color for highlighted items",
			position = 2,
			section = transparent
	)
	default Color highlightedColorTransparent()
	{
		return Color.decode("#AA00FF");
	}

	@Alpha
	@ConfigItem(
			keyName = "lowValueColorTransparent",
			name = "Low value items",
			description = "Configures the color for low value items",
			position = 3,
			section = transparent
	)
	default Color lowValueColorTransparent()
	{
		return Color.decode("#66B2FF");
	}

	@Alpha
	@ConfigItem(
			keyName = "mediumValueColorTransparent",
			name = "Medium value items",
			description = "Configures the color for medium value items",
			position = 4,
			section = transparent
	)
	default Color mediumValueColorTransparent()
	{
		return Color.decode("#99FF99");
	}

	@Alpha
	@ConfigItem(
			keyName = "highValueColorTransparent",
			name = "High value items",
			description = "Configures the color for high value items",
			position = 5,
			section = transparent
	)
	default Color highValueColorTransparent()
	{
		return Color.decode("#FF9600");
	}

	@Alpha
	@ConfigItem(
			keyName = "insaneValueColorTransparent",
			name = "Insane value items",
			description = "Configures the color for insane value items",
			position = 6,
			section = transparent
	)
	default Color insaneValueColorTransparent()
	{
		return Color.decode("#FF66B2");
	}

	@Alpha
	@ConfigItem(
			keyName = "untradeableDropTransparent",
			name = "Untradeable items",
			description = "Configures the color for untradeable items",
			position = 7,
			section = transparent
	)
	default Color untradeableDropTransparent()
	{
		return Color.RED;
	}

	@Alpha
	@ConfigItem(
			keyName = "defaultColorOpaque",
			name = "Default items",
			description = "Configures the color for default, non-highlighted items",
			position = 1,
			section = opaque
	)
	default Color defaultColorOpaque()
	{
		return Color.BLACK;
	}

	@Alpha
	@ConfigItem(
			keyName = "highlightedColorOpaque",
			name = "Highlighted items",
			description = "Configures the color for highlighted items",
			position = 2,
			section = opaque
	)
	default Color highlightedColorOpaque()
	{
		return Color.decode("#AA00FF");
	}

	@Alpha
	@ConfigItem(
			keyName = "lowValueColorOpaque",
			name = "Low value items",
			description = "Configures the color for low value items",
			position = 3,
			section = opaque
	)
	default Color lowValueColorOpaque()
	{
		return Color.decode("#0000FF");
	}

	@Alpha
	@ConfigItem(
			keyName = "mediumValueColorOpaque",
			name = "Medium value items",
			description = "Configures the color for medium value items",
			position = 4,
			section = opaque
	)
	default Color mediumValueColorOpaque()
	{
		return Color.decode("#008100");
	}

	@Alpha
	@ConfigItem(
			keyName = "highValueColorOpaque",
			name = "High value items",
			description = "Configures the color for high value items",
			position = 5,
			section = opaque
	)
	default Color highValueColorOpaque()
	{
		return Color.decode("#985C00");
	}

	@Alpha
	@ConfigItem(
			keyName = "insaneValueColorOpaque",
			name = "Insane value items",
			description = "Configures the color for insane value items",
			position = 6,
			section = opaque
	)
	default Color insaneValueColorOpaque()
	{
		return Color.decode("#FF007D");
	}

	@Alpha
	@ConfigItem(
			keyName = "untradeableDropOpaque",
			name = "Untradeable items",
			description = "Configures the color for untradeable items",
			position = 7,
			section = opaque
	)
	default Color untradeableDropOpaque()
	{
		return Color.RED;
	}


}
package com.valuabledroprecolor;

import com.google.inject.Provides;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.MessageNode;
import net.runelite.api.Varbits;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.Text;
import net.runelite.client.util.WildcardMatcher;

import javax.inject.Inject;
import java.awt.*;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@PluginDescriptor(
		name = "Valuable Drop Recolor",
		description = "Recolors valuable drop chat messages",
		tags = {"valuable", "drop", "recolor", "item", "items", "color", "chat", "message"}
)
public class ValuableDropRecolorPlugin extends Plugin {

	@Inject
	private Client client;
	@Inject
	private ValuableDropRecolorConfig config;

	@Provides
	ValuableDropRecolorConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ValuableDropRecolorConfig.class);
	}
	private List<String> highlightedItems;

	@Override
	protected void startUp() {
		highlightedItems = Text.fromCSV(config.getHighlightItems());
	}

	@Override
	protected void shutDown() {
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event) {
		if (event.getKey().equals("highlightedItems")) {
			highlightedItems = Text.fromCSV(config.getHighlightItems());
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage)
	{
		MessageNode messageNode = chatMessage.getMessageNode();
		if (messageNode.getType() != ChatMessageType.GAMEMESSAGE)
		{
			return;
		}

		String valuableDropPatternString = "Valuable drop: ((?:\\d+ x )?(.*?)) \\((\\d{1,3}(?:,\\d{3})*|\\d+) coin(?:s?)\\)";
		Pattern valuableDropPattern = Pattern.compile(valuableDropPatternString);
		Matcher valuableDropMatcher = valuableDropPattern.matcher(messageNode.getValue());

		String untradeablePatternString = "Untradeable drop:\\s*(\\d+\\s*x\\s*)?([^<]+)";
		Pattern untradeablePattern = Pattern.compile(untradeablePatternString);
		Matcher untradeableMatcher = untradeablePattern.matcher(messageNode.getValue());

		Color color;
		Color defaultColor;
		Color highlightedColor;
		Color lowValueColor;
		Color mediumValueColor;
		Color highValueColor;
		Color insaneValueColor;
		Color untradeableColor;
		if (client.getVarbitValue(Varbits.TRANSPARENT_CHATBOX) == 0 || !client.isResized())
		{
			defaultColor = config.defaultColorOpaque();
			highlightedColor = config.highlightedColorOpaque();
			lowValueColor = config.lowValueColorOpaque();
			mediumValueColor = config.mediumValueColorOpaque();
			highValueColor = config.highValueColorOpaque();
			insaneValueColor = config.insaneValueColorOpaque();
			untradeableColor = config.untradeableDropOpaque();
		}
		else
		{
			defaultColor = config.defaultColorTransparent();
			highlightedColor = config.highlightedColorTransparent();
			lowValueColor = config.lowValueColorTransparent();
			mediumValueColor = config.mediumValueColorTransparent();
			highValueColor = config.highValueColorTransparent();
			insaneValueColor = config.insaneValueColorTransparent();
			untradeableColor = config.untradeableDropTransparent();
		}

		if (untradeableMatcher.find())
		{
			if (highlightMatchesItemName(untradeableMatcher.group(2)))
			{
				String string = ColorUtil.prependColorTag(Text.removeTags(messageNode.getValue()), highlightedColor);
				messageNode.setValue(string);
				return;
			}
			if (config.recolorHighlightedOnly())
			{
				String string = ColorUtil.prependColorTag(Text.removeTags(messageNode.getValue()), defaultColor);
				messageNode.setValue(string);
				return;
			}
			String string = ColorUtil.prependColorTag(Text.removeTags(messageNode.getValue()), untradeableColor);
			messageNode.setValue(string);
			return;
		}

		if (valuableDropMatcher.find())
		{
			if (highlightMatchesItemName(valuableDropMatcher.group(2)))
			{
				String string = ColorUtil.prependColorTag(Text.removeTags(messageNode.getValue()), highlightedColor);
				messageNode.setValue(string);
				return;
			}
			if (config.recolorHighlightedOnly())
			{
				String string = ColorUtil.prependColorTag(Text.removeTags(messageNode.getValue()), defaultColor);
				messageNode.setValue(string);
				return;
			}
			int coins = Integer.parseInt(valuableDropMatcher.group(3).replaceAll(",", ""));
			if (coins >= 0 && coins < config.lowValuePrice()) {
				color = defaultColor;
			} else if (coins >= config.lowValuePrice() && coins < config.mediumValuePrice()) {
				color = lowValueColor;
			} else if (coins >= config.mediumValuePrice() && coins < config.highValuePrice()) {
				color = mediumValueColor;
			} else if (coins >= config.highValuePrice() && coins < config.insaneValuePrice()) {
				color = highValueColor;
			} else if (coins >= config.insaneValuePrice()) {
				color = insaneValueColor;
			} else {
				color = defaultColor;
			}
			String string = ColorUtil.prependColorTag(Text.removeTags(messageNode.getValue()), color);
			messageNode.setValue(string);
		}
	}

	private boolean highlightMatchesItemName(String itemName)
	{
		for (String name : highlightedItems)
		{
			if (WildcardMatcher.matches(name, itemName))
			{
				return true;
			}
		}

		return false;
	}
}
