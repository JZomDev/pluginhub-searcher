package com.scrollboxcounter;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("scrollboxcounter")
public interface ScrollBoxCounterConfig extends Config
{
	enum MaxCluePosition
	{
		DISABLED("Disabled"),
		BOTTOM_LEFT("Bottom Left"),
		BOTTOM_RIGHT("Bottom Right");

		private final String name;

		MaxCluePosition(String name)
		{
			this.name = name;
		}

		@Override
		public String toString()
		{
			return name;
		}
	}

	@ConfigItem(
		keyName = "maxCluePosition",
		name = "Max Clue Scrolls Position",
		description = "Choose where to display the maximum clue scroll count on each item"
	)
	default MaxCluePosition maxCluePosition()
	{
		return MaxCluePosition.BOTTOM_LEFT;
	}

	@ConfigItem(
		keyName = "markFullStacks",
		name = "Mark Full Stacks",
		description = "Mark counters red when total item count (inventory + bank) reaches maximum capacity"
	)
	default boolean markFullStacks()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showBanked",
		name = "Show Banked",
		description = "Show the quantity of clue scroll boxes stored in the bank when viewing inventory"
	)
	default boolean showBanked()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showChatMessages",
		name = "Show Chat Messages",
		description = "Show chat messages when clue scroll boxes are picked up or appear in the inventory"
	)
	default boolean showChatMessages() {
		return true;
	}
}

package com.scrollboxcounter;

import com.google.inject.Provides;
import javax.inject.Inject;
import java.util.HashMap;
import java.util.Map;

import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.gameval.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@PluginDescriptor(
	name = "Scroll Box Counter"
)
public class ScrollBoxCounterPlugin extends Plugin {
	public static final int CLUE_SCROLL_BOX_BEGINNER = 24361;
	public static final int CLUE_SCROLL_BOX_EASY = 24362;
	public static final int CLUE_SCROLL_BOX_MEDIUM = 24363;
	public static final int CLUE_SCROLL_BOX_HARD = 24364;
	public static final int CLUE_SCROLL_BOX_ELITE = 24365;
	public static final int CLUE_SCROLL_BOX_MASTER = 24366;

	public static final int SCROLL_CASE_BEGINNER_MINOR = 16565;
	public static final int SCROLL_CASE_BEGINNER_MAJOR = 16566;
	public static final int SCROLL_CASE_EASY_MINOR = 16567;
	public static final int SCROLL_CASE_EASY_MAJOR = 16586;
	public static final int SCROLL_CASE_MEDIUM_MINOR = 16587;
	public static final int SCROLL_CASE_MEDIUM_MAJOR = 16588;
	public static final int SCROLL_CASE_HARD_MINOR = 16589;
	public static final int SCROLL_CASE_HARD_MAJOR = 16590;
	public static final int SCROLL_CASE_ELITE_MINOR = 16591;
	public static final int SCROLL_CASE_ELITE_MAJOR = 16592;
	public static final int SCROLL_CASE_MASTER_MINOR = 16593;
	public static final int SCROLL_CASE_MASTER_MAJOR = 16594;
	public static final int SCROLL_CASE_MIMIC = 16595;

	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ScrollBoxCounterOverlay overlay;

	@Inject
	private ChatMessageManager chatMessageManager;

	private final Map<Integer, Integer> bankItems = new HashMap<>();

	@Override
	protected void startUp() {
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() {
		overlayManager.remove(overlay);
		bankItems.clear();
	}

	@Provides
	ScrollBoxCounterConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(ScrollBoxCounterConfig.class);
	}

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event) {
		if (event.getContainerId() == InventoryID.BANK) {
			updateBankItems(event.getItemContainer());
		}
	}

	private void updateBankItems(ItemContainer bank) {
		bankItems.entrySet().removeIf(entry -> ScrollBoxCounterUtils.isClueScrollBox(entry.getKey()));

		if (bank != null) {
			Item[] items = bank.getItems();
			for (Item item : items) {
				if (item != null && item.getId() != -1 && item.getQuantity() > 0 && ScrollBoxCounterUtils.isClueScrollBox(item.getId())) {
						bankItems.put(item.getId(), item.getQuantity());
					}

			}
		}
	}

	public int getBankCount(int itemId) {
		return bankItems.getOrDefault(itemId, 0);
	}

	public void sendChatMessage(String chatMessage)
	{
		final String message = new ChatMessageBuilder()
				.append(ChatColorType.HIGHLIGHT)
				.append(chatMessage)
				.build();

		chatMessageManager.queue(
				QueuedMessage.builder()
						.type(ChatMessageType.CONSOLE)
						.runeLiteFormattedMessage(message)
						.build());
	}
}

package com.scrollboxcounter;

import com.google.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.gameval.InventoryID;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.api.ItemContainer;
import net.runelite.api.Item;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.WidgetItemOverlay;

import java.awt.*;
import java.util.HashMap;
import java.util.Map;

public class ScrollBoxCounterOverlay extends WidgetItemOverlay
{
	private final ScrollBoxCounterConfig config;
	private final Client client;
	private final ScrollBoxCounterPlugin plugin;
	private int currentItemId;
	private final Map<Integer, Integer> previousInventoryCounts = new HashMap<>();
	private boolean initializedInventoryTracking = false;

	@Inject
	ScrollBoxCounterOverlay(ScrollBoxCounterConfig config, Client client, ScrollBoxCounterPlugin plugin)
	{
		this.config = config;
		this.client = client;
		this.plugin = plugin;
		showOnInventory();
		showOnBank();
	}

	@Override
	public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem widgetItem)
	{
		if (!ScrollBoxCounterUtils.isClueScrollBox(itemId))
		{
			return;
		}

		this.currentItemId = itemId;

		if (!initializedInventoryTracking) {
			updatePreviousInventoryCounts();
			initializedInventoryTracking = true;
		}

		if (!isItemInBank(widgetItem)) {
			checkInventoryChanges();
		}

		final Rectangle bounds = widgetItem.getCanvasBounds();
		if (bounds == null)
		{
			return;
		}

		int quantity = widgetItem.getQuantity();
		if (quantity < 1)
		{
			return;
		}

		boolean isInBank = isItemInBank(widgetItem);
		int maxClues = ScrollBoxCounterUtils.getMaxClueCount(itemId, client);
		int bankCount = plugin.getBankCount(itemId);

		int totalCount = quantity + (isInBank ? 0 : bankCount);
		if (isInBank)
		{
			int inventoryCount = ScrollBoxCounterUtils.getInventoryCount(itemId, client);
			totalCount = quantity + inventoryCount;
		}

		boolean isFullStack = config.markFullStacks() && totalCount >= maxClues;

		if (config.maxCluePosition() == ScrollBoxCounterConfig.MaxCluePosition.DISABLED && !config.showBanked() && !isFullStack)
		{
			return;
		}

		renderOverlayText(graphics, bounds, quantity, maxClues, isFullStack, isInBank);
	}

	private boolean isItemInBank(WidgetItem widgetItem)
	{
		return widgetItem.getWidget().getId() >>> 16 == 12;
	}

	private void renderOverlayText(Graphics2D graphics, Rectangle bounds, int quantity, int maxClues, boolean isFullStack, boolean isInBank)
	{
		graphics.setFont(FontManager.getRunescapeSmallFont());
		Color textColor = isFullStack ? Color.RED : Color.WHITE;

		if (isFullStack)
		{
			renderQuantityOnly(graphics, bounds, quantity, textColor);
		}

		if (config.maxCluePosition() != ScrollBoxCounterConfig.MaxCluePosition.DISABLED)
		{
			renderMaxClues(graphics, bounds, maxClues, textColor, config.maxCluePosition());
		}

		if (config.showBanked() && !isInBank)
		{
			int bankCount = plugin.getBankCount(currentItemId);
			if (bankCount > 0)
			{
				renderBankedQuantity(graphics, bounds, bankCount, textColor);
			}
		}
	}

	private void renderQuantityOnly(Graphics2D graphics, Rectangle bounds, int quantity, Color textColor)
	{
		String quantityText = String.valueOf(quantity);
		graphics.setColor(textColor);
		graphics.drawString(quantityText, bounds.x, bounds.y + 10);
	}

	private void renderMaxClues(Graphics2D graphics, Rectangle bounds, int maxClues, Color textColor, ScrollBoxCounterConfig.MaxCluePosition position)
	{
		String maxText = String.valueOf(maxClues);
		FontMetrics fm = graphics.getFontMetrics();
		int textWidth = fm.stringWidth(maxText);

		int x;
		int y;
		switch (position)
		{
			case BOTTOM_LEFT:
				x = bounds.x;
				y = bounds.y + bounds.height - 2;
				break;
			case BOTTOM_RIGHT:
				x = bounds.x + bounds.width - textWidth;
				y = bounds.y + bounds.height - 2;
				break;
			default:
				return;
		}

		graphics.setColor(Color.BLACK);
		graphics.drawString(maxText, x + 1, y + 1);

		graphics.setColor(textColor);
		graphics.drawString(maxText, x, y);
	}

	private void renderBankedQuantity(Graphics2D graphics, Rectangle bounds, int bankCount, Color textColor)
	{
		String bankedText = "+" + bankCount;
		FontMetrics fm = graphics.getFontMetrics();

		int x = bounds.x + bounds.width - fm.stringWidth(bankedText);
		int y = bounds.y + 10;

		graphics.setColor(Color.BLACK);
		graphics.drawString(bankedText, x + 1, y + 1);

		graphics.setColor(textColor);
		graphics.drawString(bankedText, x, y);
	}

	private void checkInventoryChanges() {
		ItemContainer inventory = client.getItemContainer(InventoryID.INV);
		if (inventory == null) {
			return;
		}

		Map<Integer, Integer> currentCounts = new HashMap<>();
		for (Item item : inventory.getItems()) {
			if (item != null && item.getId() != -1 && ScrollBoxCounterUtils.isClueScrollBox(item.getId())) {
				currentCounts.put(item.getId(), item.getQuantity());
			}
		}

		for (Map.Entry<Integer, Integer> entry : currentCounts.entrySet()) {
			int itemId = entry.getKey();
			int currentCount = entry.getValue();
			int previousCount = previousInventoryCounts.getOrDefault(itemId, 0);

			if (currentCount > previousCount) {
				if (!ScrollBoxCounterUtils.isBankOpen(client) && config.showChatMessages()) {
					sendScrollBoxMessage(itemId, currentCount);
				}
			}
		}

		previousInventoryCounts.clear();
		previousInventoryCounts.putAll(currentCounts);
	}

	private void sendScrollBoxMessage(int itemId, int inventoryCount) {
		String tierName = ScrollBoxCounterUtils.getScrollBoxTierName(itemId);
		int bankCount = plugin.getBankCount(itemId);
		int totalCount = inventoryCount + bankCount;
		int maxCount = ScrollBoxCounterUtils.getMaxClueCount(itemId, client);

		String message = "Holding " + totalCount + "/" + maxCount + " scroll boxes (" + tierName + ")";
		plugin.sendChatMessage(message);
	}

	private void updatePreviousInventoryCounts() {
		ItemContainer inventory = client.getItemContainer(InventoryID.INV);
		if (inventory == null) {
			return;
		}

		previousInventoryCounts.clear();
		for (Item item : inventory.getItems()) {
			if (item != null && item.getId() != -1 && ScrollBoxCounterUtils.isClueScrollBox(item.getId())) {
				previousInventoryCounts.put(item.getId(), item.getQuantity());
			}
		}
	}
}

package com.scrollboxcounter;

import net.runelite.api.Client;
import net.runelite.api.gameval.InventoryID;
import net.runelite.api.ItemContainer;

public class ScrollBoxCounterUtils {

    private static final int BASE_CLUE_COUNT = 2;

    public static boolean isClueScrollBox(int itemId) {
        return itemId == ScrollBoxCounterPlugin.CLUE_SCROLL_BOX_BEGINNER ||
                itemId == ScrollBoxCounterPlugin.CLUE_SCROLL_BOX_EASY ||
                itemId == ScrollBoxCounterPlugin.CLUE_SCROLL_BOX_MEDIUM ||
                itemId == ScrollBoxCounterPlugin.CLUE_SCROLL_BOX_HARD ||
                itemId == ScrollBoxCounterPlugin.CLUE_SCROLL_BOX_ELITE ||
                itemId == ScrollBoxCounterPlugin.CLUE_SCROLL_BOX_MASTER;
    }

    public static String getScrollBoxTierName(int itemId) {
        switch (itemId) {
            case ScrollBoxCounterPlugin.CLUE_SCROLL_BOX_BEGINNER:
                return "Beginner";
            case ScrollBoxCounterPlugin.CLUE_SCROLL_BOX_EASY:
                return "Easy";
            case ScrollBoxCounterPlugin.CLUE_SCROLL_BOX_MEDIUM:
                return "Medium";
            case ScrollBoxCounterPlugin.CLUE_SCROLL_BOX_HARD:
                return "Hard";
            case ScrollBoxCounterPlugin.CLUE_SCROLL_BOX_ELITE:
                return "Elite";
            case ScrollBoxCounterPlugin.CLUE_SCROLL_BOX_MASTER:
                return "Master";
            default:
                return "Unknown";
        }
    }

    public static int getMaxClueCount(int itemId, Client client) {
        int tierBonus = getTierBonus(itemId, client);
        int mimicBonus = getMimicBonus(client);
        return BASE_CLUE_COUNT + tierBonus + mimicBonus;
    }

    public static int getTierBonus(int itemId, Client client) {
        int bonus = 0;

        switch (itemId) {
            case ScrollBoxCounterPlugin.CLUE_SCROLL_BOX_BEGINNER:
                bonus += client.getVarbitValue(ScrollBoxCounterPlugin.SCROLL_CASE_BEGINNER_MINOR);
                bonus += client.getVarbitValue(ScrollBoxCounterPlugin.SCROLL_CASE_BEGINNER_MAJOR);
                break;
            case ScrollBoxCounterPlugin.CLUE_SCROLL_BOX_EASY:
                bonus += client.getVarbitValue(ScrollBoxCounterPlugin.SCROLL_CASE_EASY_MINOR);
                bonus += client.getVarbitValue(ScrollBoxCounterPlugin.SCROLL_CASE_EASY_MAJOR);
                break;
            case ScrollBoxCounterPlugin.CLUE_SCROLL_BOX_MEDIUM:
                bonus += client.getVarbitValue(ScrollBoxCounterPlugin.SCROLL_CASE_MEDIUM_MINOR);
                bonus += client.getVarbitValue(ScrollBoxCounterPlugin.SCROLL_CASE_MEDIUM_MAJOR);
                break;
            case ScrollBoxCounterPlugin.CLUE_SCROLL_BOX_HARD:
                bonus += client.getVarbitValue(ScrollBoxCounterPlugin.SCROLL_CASE_HARD_MINOR);
                bonus += client.getVarbitValue(ScrollBoxCounterPlugin.SCROLL_CASE_HARD_MAJOR);
                break;
            case ScrollBoxCounterPlugin.CLUE_SCROLL_BOX_ELITE:
                bonus += client.getVarbitValue(ScrollBoxCounterPlugin.SCROLL_CASE_ELITE_MINOR);
                bonus += client.getVarbitValue(ScrollBoxCounterPlugin.SCROLL_CASE_ELITE_MAJOR);
                break;
            case ScrollBoxCounterPlugin.CLUE_SCROLL_BOX_MASTER:
                bonus += client.getVarbitValue(ScrollBoxCounterPlugin.SCROLL_CASE_MASTER_MINOR);
                bonus += client.getVarbitValue(ScrollBoxCounterPlugin.SCROLL_CASE_MASTER_MAJOR);
                break;
        }

        return bonus;
    }

    public static int getMimicBonus(Client client) {
        return client.getVarbitValue(ScrollBoxCounterPlugin.SCROLL_CASE_MIMIC);
    }

    public static int getInventoryCount(int itemId, Client client) {
        ItemContainer inventory = client.getItemContainer(InventoryID.INV);
        if (inventory == null) {
            return 0;
        }
        return inventory.count(itemId);
    }

    public static boolean isBankOpen(Client client) {
        return client.getItemContainer(InventoryID.BANK) != null;
    }
}
package com.scrollboxcounter;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ScrollBoxCounterTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ScrollBoxCounterPlugin.class);
		RuneLite.main(args);
	}
}
