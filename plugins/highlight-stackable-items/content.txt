package com.HighlightStackables;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class HighlightStackablesPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(HighlightStackablesPlugin.class);
		RuneLite.main(args);
	}
}
package com.HighlightStackables;

import com.google.inject.Provides;

import javax.inject.Inject;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;

import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;

import net.runelite.client.events.ClientShutdown;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.PluginDescriptor;

import net.runelite.client.plugins.grounditems.GroundItemsConfig;
import net.runelite.client.plugins.grounditems.GroundItemsPlugin;
import net.runelite.client.plugins.grounditems.GroundItemsOverlay;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;


@Slf4j
@PluginDescriptor(
		name = "Highlight Stackables"
)
@PluginDependency(GroundItemsPlugin.class)
public class HighlightStackablesPlugin extends Plugin {
	private Item[] previousInventory = new Item[28];
	private List<String> spawnedItems;
	private List<String> spawnedItemsUnique;
	private List<String> removedItems;
	private Set<String> uniqueSet;
	private String formattedString;

	@Provides
	HighlightStackablesConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(HighlightStackablesConfig.class);
	}

	@Getter(AccessLevel.PACKAGE)
	@Setter(AccessLevel.PACKAGE)
	private boolean hotKeyPressed;

	@Inject
	private HighlightStackablesConfig config;
	@Inject
	private HighlightStackablesHotkeyListener hotkeyListener;
	@Inject
	private GroundItemsPlugin groundItemsPlugin;
	@Inject
	private GroundItemsConfig groundItemsConfig;
	@Inject
	private GroundItemsOverlay groundItemsOverlay;
	@Inject
	private Client client;
	@Inject
	private ItemManager itemManager;
	@Inject
	private KeyManager keyManager;

	@Override
	protected void startUp() {
		spawnedItems = new ArrayList<>();
		spawnedItemsUnique = new ArrayList<>();
		removedItems = new ArrayList<>();
		uniqueSet = new HashSet<>();
		keyManager.registerKeyListener(hotkeyListener);
		// Store the original highlighted items from GroundItemsConfig
		config.setOriginalItem(groundItemsConfig.getHighlightItems());
	}
	@Override
	protected void shutDown() {
		// Restore the original highlighted items to GroundItemsConfig
		groundItemsConfig.setHighlightedItem(config.getOrginalItems());
		keyManager.unregisterKeyListener(hotkeyListener);
	}
	@Subscribe
	public void onClientShutdown(ClientShutdown event) {
		// Restore the original highlighted items to GroundItemsConfig
		groundItemsConfig.setHighlightedItem(config.getOrginalItems());
	}
	@Subscribe
	public void onGameStateChanged(final GameStateChanged event) {
		// Clear item lists if you leave the area
		if (event.getGameState() == GameState.LOADING) {
			spawnedItems.clear();
			spawnedItemsUnique.clear();
		}
	}
	@Subscribe
	public void onGameTick(GameTick event) {
		if (hotKeyPressed) {
			return; // hotKeyPressed is true, skip the rest of the function
		}
		// Check if spawnedItems is empty and if Highlighted items from GroundItemsConfig and my config don't match
		if (spawnedItems.isEmpty() && !groundItemsConfig.getHighlightItems().equals(config.getOrginalItems())) {

			// Restore the original highlighted items
			groundItemsConfig.setHighlightedItem(config.getOrginalItems());
		}
		//check if spawned items isnt empty
		if (!spawnedItems.isEmpty()) {
			formatString();

			// Create the string that should be in groundItems Config
			String finishedString = new String();
			finishedString = config.getOrginalItems() + "," + formattedString;

			//Check if finished string = groundItems Config
			if(finishedString != groundItemsConfig.getHighlightItems()){

				//Set groundItems Config
				sortItems();
				groundItemsConfig.setHighlightedItem(config.getOrginalItems() + "," + formattedString);
			}
		}
	}
	@Subscribe
	public void onConfigChanged(ConfigChanged event) {
		if (event.getGroup().equals("highlightStackables")) {

			// Update the highlighted items in GroundItemsConfig
			groundItemsConfig.setHighlightedItem(config.getOrginalItems());
		}
	}

	private void sortItems() {
		// Copy spawnedItems to spawnedItemsUnique removing all duplicates.
		for (String element : spawnedItems) {
			boolean alreadyExists = false;
			for (String uniqueElement : spawnedItemsUnique) {
				if (element.contains(uniqueElement)) {
					alreadyExists = true;
					break;
				}
			}
			if (!alreadyExists) {
				spawnedItemsUnique.add(element);
			}
		}
	}

	private void formatString() {
		// Convert List to String, Remove [ and ]
		formattedString = spawnedItemsUnique.toString();
		formattedString = formattedString.substring(1, formattedString.length() - 1);
		groundItemsConfig.setHighlightedItem(config.getOrginalItems() + "," + formattedString);
	}

	@Subscribe
	public void onItemSpawned(ItemSpawned itemSpawned) {
		final ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
		final TileItem item = itemSpawned.getItem();
		final int id = item.getId();
		final ItemComposition itemComposition = itemManager.getItemComposition(id);
		String exclusionList = groundItemsConfig.getHiddenItems().toString();

		if (itemComposition.isStackable() && !exclusionList.contains(itemComposition.getName())) {
			if (config.inventoryMode()) {
				if (inventory != null && inventory.contains(itemComposition.getId())) {
					spawnedItems.add(itemComposition.getName());

					//Check if hotkey is pressed after adding item to spawned item list, But before sort/format
					if (hotKeyPressed) {
						return; // hotKeyPressed is true, skip the rest of the function
					}
					groundItemsConfig.setHighlightedItem(config.getOrginalItems());
					if(removedItems.contains(itemComposition.getName())){
						for(String element : removedItems){
							if(element.equals((itemComposition.getName()))){
								spawnedItems.add(element);
							}
						}
					}
					sortItems();
					formatString();
				}
			} else {
				spawnedItems.add(itemComposition.getName());

				//Check if hotkey is pressed after adding item to spawned item list, But before sort/format
				if (hotKeyPressed) {
					return; // hotKeyPressed is true, skip the rest of the function
				}
				groundItemsConfig.setHighlightedItem(config.getOrginalItems());
				sortItems();
				formatString();
			}
		}
	}

	@Subscribe
	public void onItemDespawned(ItemDespawned itemDespawned) {

		final ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
		final TileItem item = itemDespawned.getItem();
		final int id = item.getId();
		final ItemComposition itemComposition = itemManager.getItemComposition(id);

		spawnedItems.remove(itemComposition.getName());
		removedItems.remove(itemComposition.getName());

		//Iterate over the spawnedItemsUnique list and remove any element that is not present in the spawnedItems list
		spawnedItemsUnique.removeIf(element -> !spawnedItems.contains(element));

		//Check if hotkey is pressed after removing item from spawned item list, But before sort/format
		if (hotKeyPressed) {
			return; // hotKeyPressed is true, skip the rest of the function
		}
		sortItems();
		formatString();
	}

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event) {
		final ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
		if (event.getItemContainer() == inventory) {
			final Item[] currentItems = event.getItemContainer().getItems();

			//compare the players current inventory to the previous inventory.
			for (int i = 0; i < currentItems.length; i++) {
				Item currentItem = currentItems[i];
				Item previousItem = previousInventory[i];

				// Check if the item was removed from the inventory
				if (previousItem != null && currentItem.getId() == -1 && previousItem.getId() != currentItem.getId()) {
					ItemComposition removedItemComposition = itemManager.getItemComposition(previousItem.getId());

					// An item was dropped by the player
					if (inventory != null && !inventory.contains(removedItemComposition.getId())) {

						//Add item to removedItems List
						for (String item : spawnedItems) {
							if (item.equals(removedItemComposition.getName())) {
								removedItems.add(item);
							}
						}
						//remove all cases of dropped item from spawnedItems list
						spawnedItems.removeIf(item -> item.equals(removedItemComposition.getName()));

						// Iterate over the spawnedItemsUnique list and remove any element that is not present in the spawnedItems list
						spawnedItemsUnique.removeIf(element -> !spawnedItems.contains(element));
						sortItems();
						formatString();
					}
				}
			}
			previousInventory = currentItems.clone(); // Update the previous inventory state
		}
	}

}
/*
 * Copyright (c) 2017, Aria <aria@ar1as.space>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */




package com.HighlightStackables;
import net.runelite.client.config.*;
import net.runelite.client.config.Keybind;


@ConfigGroup("highlightStackables")
public interface HighlightStackablesConfig extends Config
{
    @ConfigSection(
            name = "Item Lists",
            description = "The highlighted item list",
            position = 0
    )
    String itemLists = "itemLists";

    @ConfigItem(
            keyName = "highlightedItems",
            name = "Highlighted Items",
            description = "<html>Configures specifically highlighted ground items. Format: (item), (item)<br>Use this for manually highlighting items rather than the highlighted items list built into ground items.<html>",
            position = 0,
            section = itemLists
    )
    default String getOrginalItems()
    {
        return "";
    }

    @ConfigItem(
            keyName = "highlightedItems",
            name = "",
            description = ""
    )
    void setOriginalItem(String key);

    @ConfigItem(
            keyName = "InventoryMode",
            name = "Highlight stackables in inventory",
            description = "<html>Highlight stackable ground items already in inventory.<br>If this is disabled, all stackable items will be highlighted.<br>Unless they are on the hidden item list.</html>",

            position = 32
    )
    default boolean inventoryMode()
    {
        return true;
    }

    //I've tested this quite a bit with no issues but im still gonna leave the experimental label on it for now.
    @ConfigSection(
            name = "Experimental",
            description = "Experimental options",
            position = 40
    )
    String experimental = "Experimental";
    @ConfigItem(
            keyName = "pauseMode",
            name = "Use hotkey to highlight",
            description = "<html>This lets you pause the plugin so you can use the ground items hotkey to highlight.</html>",
            section = experimental,
            position = 41
    )
    default boolean pauseMode()
    {
        return false;
    }
    @ConfigItem(
            keyName = "hotkey",
            name = "Hotkey",
            description = "Set this to match your hotkey from GroundItemsPlugin",
            section = experimental,
            position = 42
    )
    default Keybind hotkey()
    {
        return Keybind.ALT;
    }
}
/*
 * Copyright (c) 2018, Seth <https://github.com/sethtroll>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.HighlightStackables;

import java.time.Duration;
import java.time.Instant;
import javax.inject.Inject;

import net.runelite.client.plugins.grounditems.GroundItemsConfig;
import net.runelite.client.util.HotkeyListener;


class HighlightStackablesHotkeyListener extends HotkeyListener
{
    private final HighlightStackablesPlugin plugin;
    private final HighlightStackablesConfig config;

    private Instant lastPress;
    @Inject
    private GroundItemsConfig groundItemsConfig;
    @Inject
    private HighlightStackablesHotkeyListener(HighlightStackablesPlugin plugin, HighlightStackablesConfig config)
    {
        super(config::hotkey);

        this.plugin = plugin;
        this.config = config;
    }

    @Override
    public void hotkeyPressed()
    {

        if(config.pauseMode())
        {
            groundItemsConfig.setHighlightedItem(config.getOrginalItems());
            plugin.setHotKeyPressed(true);
            lastPress = Instant.now();
        }
    }

    @Override
    public void hotkeyReleased()
    {
        if(config.pauseMode()) {
            config.setOriginalItem(groundItemsConfig.getHighlightItems());
            plugin.setHotKeyPressed(false);
        }
    }
}
