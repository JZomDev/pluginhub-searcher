package com.example;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetType;
import net.runelite.client.callback.ClientThread;
import net.runelite.api.ChatMessageType;

import javax.inject.Inject;
import java.awt.*;
import java.util.*;
import java.util.List;
import java.util.stream.Collectors;

@Slf4j
@RequiredArgsConstructor(onConstructor_ = @Inject)
public class OrderWidgetDecorator {

    private static final int COMPONENT_POTION_ORDERS_GROUP_ID = 882;
    private static final int COMPONENT_POTION_ORDERS = COMPONENT_POTION_ORDERS_GROUP_ID << 16 | 2;

    private final Client client;
    private final ClientThread clientThread;
    private final StrategyLookup strategyLookup;
    private final MasteringMixologyStrategyConfig config;

    private static final Map<String, String> NAME_TO_CODE = Map.of(
            "Alco-augmentator", "AAA",
            "Mammoth-might mix", "MMM",
            "Liplack liquor", "LLL",
            "Mystic mana amalgam", "MMA",
            "Marley's moonlight", "MML",
            "Azure aura mix", "AAM",
            "Aqualux amalgam", "ALA",
            "Megalite liquid", "MLL",
            "Anti-leech lotion", "ALL",
            "Mixalot", "MAL"
    );

    public void decorateOrderWidgets()
    {
        clientThread.invoke(() -> {
            Widget parent = client.getWidget(COMPONENT_POTION_ORDERS);
            if (parent == null || parent.getChildren() == null) {
                return;
            }
            List<String> codes = new ArrayList<>();
            List<Widget> potionOrderWidgets = new ArrayList<>();
            Widget[] children = parent.getChildren();
            for (Widget child : children) {
                if (codes.size() > 3) {
                    break;
                }
                if (child.getType() != WidgetType.TEXT) {
                    continue;
                }
                String originalText = child.getText();
                if (originalText == null || originalText.isEmpty()) {
                    continue;
                }
                boolean containsPotion = NAME_TO_CODE.keySet().stream().anyMatch(originalText::contains);
                if (!containsPotion) {
                    continue;
                }
                // Extract potion codes from full names using map
                codes.addAll(
                        NAME_TO_CODE.entrySet().stream()
                                .filter(e -> originalText.contains(e.getKey()))
                                .map(Map.Entry::getValue)
                                .collect(Collectors.toList())
                );
                potionOrderWidgets.add(child);
                log.debug("Extracted codes: {} from widget text: {}", codes, originalText);
            }
//            client.addChatMessage(ChatMessageType.GAMEMESSAGE, "Mastering Mixology", "Found codes: " + String.join(", ", codes), null);

            if (codes.size() == 3) {

            String formattedKey = String.join("-", codes);
            String expected = strategyLookup.getChoiceForDraw(config.strategy(), formattedKey);

            Map<String, Long> expectedCount = expected == null ? Map.of() :
                    Arrays.stream(expected.split("-"))
                            .collect(Collectors.groupingBy(s -> s, Collectors.counting()));

            Map<String, Integer> appliedCount = new HashMap<>();

            for (Widget child : potionOrderWidgets) {
                String text = child.getText();
                if (text == null) continue;

                // Identify which potion this widget represents
                Optional<Map.Entry<String, String>> match = NAME_TO_CODE.entrySet().stream()
                        .filter(e -> text.contains(e.getKey()))
                        .findFirst();

                if (match.isEmpty()) continue;

                String code = match.get().getValue();

                long allowed = expectedCount.getOrDefault(code, 0L);
                int used = appliedCount.getOrDefault(code, 0);

                boolean isIncluded = used < allowed;
                if (isIncluded) {
                    appliedCount.put(code, used + 1);
                }
                child.setTextColor(isIncluded ? Color.GREEN.getRGB() : Color.RED.getRGB());
                child.revalidate();
            }
            expectedCount.clear();
            appliedCount.clear();
            codes.clear();
            potionOrderWidgets.clear();
            }
        });
    }
}

package com.example;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.events.ScriptPostFired;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

@Slf4j
@PluginDescriptor(
	name = "Mastering Mixology Strategy"
)
public class MasteringMixologyStrategyPlugin extends Plugin
{
	@SuppressWarnings("unused")
	@Inject
	private OrderWidgetDecorator decorator;

	@SuppressWarnings("unused")
	@Provides
	MasteringMixologyStrategyConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(MasteringMixologyStrategyConfig.class);
	}

	@SuppressWarnings("unused")
	@Subscribe
	public void onScriptPostFired(ScriptPostFired event)
	{
		if (event.getScriptId() == 7063) // 7063
		{
			decorator.decorateOrderWidgets(); // logic is embedded in the widget, activeOrders unused for now
		}
	}
	@SuppressWarnings("unused")
	@Subscribe
	public void onConfigChanged(ConfigChanged event) {
		if (event.getKey().equals("strategy")) {
			decorator.decorateOrderWidgets();
		}
	}
}

package com.example;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("masteringmixology")
public interface MasteringMixologyStrategyConfig extends Config
{
	@ConfigItem(
			keyName = "strategy",
			name = "Select Strategy",
			description = "Choose the strategy to simulate during mixology"
	)
	default StrategyType strategy()
	{
		return StrategyType.FULL_ORDERS;
	}

	enum StrategyType
	{
		FULL_ORDERS("Full orders", "1_complete_full_orders.csv"),
		SKIP_TRIPLES_UNLESS_MAL("Reduce triples", "2_skip_triples_unless_MAL.csv"),
		REDUCE_DOUBLE_AGA("Reduce double aga", "3_skip_double_aga_for_less_aga_points.csv"),
		FULL_ORDER_IF_LYE_4PLUS("Full order if lye 4+", "4_full_order_if_lye_4plus.csv"),
		OPTIMISED_POINT_DISTRIBUTION("Optimised point distribution", "4.1_full_order_if_lye_4plus.csv");

		private final String name;
		private final String file;

		StrategyType(String name, String file) {
			this.name = name;
			this.file = file;
		}

		public String fileName() {
			return file;
		}
		@Override
		public String toString() {
			return name;
		}
	}
}


package com.example;

import lombok.extern.slf4j.Slf4j;

import javax.annotation.Nullable;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.*;

@Slf4j
public class StrategyLookup
{
    private final Map<String, Map<String, String>> strategyMap = new HashMap<>();

    public StrategyLookup()
    {
        for (MasteringMixologyStrategyConfig.StrategyType strategy : MasteringMixologyStrategyConfig.StrategyType.values())
        {
            String filename = strategy.fileName();
            String path = "/strategies/" + filename;

            try (InputStream input = getClass().getResourceAsStream(path))
            {
                if (input == null)
                {
                    log.warn("Strategy file not found: {}", path);
                    continue;
                }

                Map<String, String> drawToChoice = new HashMap<>();

                try (BufferedReader reader = new BufferedReader(new InputStreamReader(input, StandardCharsets.UTF_8)))
                {
                    reader.lines()
                            .skip(1)
                            .map(line -> line.split(",", 2))
                            .filter(parts -> parts.length == 2)
                            .forEach(parts -> drawToChoice.put(parts[0].trim(), parts[1].trim()));
                }

                log.info("Loaded strategy '{}': {} entries from {}", strategy.name(), drawToChoice.size(), filename);
                strategyMap.put(strategy.name(), drawToChoice);
            }
            catch (Exception e)
            {
                log.error("Failed to read strategy file: {}", path, e);
            }
        }
    }
    @Nullable
    public String getChoiceForDraw(MasteringMixologyStrategyConfig.StrategyType strategy, String draw)
    {
        Map<String, String> drawMap = strategyMap.get(strategy.name());
        if (drawMap == null)
        {
            return null;
        }

        String normalizedDraw = normalizeDraw(draw);

        for (Map.Entry<String, String> entry : drawMap.entrySet())
        {
            if (normalizeDraw(entry.getKey()).equals(normalizedDraw))
            {
                return entry.getValue();
            }
        }
        return null;
    }

    private String normalizeDraw(String draw)
    {
        String[] parts = draw.split("-");
        Arrays.sort(parts);
        return String.join("-", parts);
    }
}

package com.example;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class MasteringMixologyStrategyTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(MasteringMixologyStrategyPlugin.class);
		RuneLite.main(args);
	}
}
