package com.coxscavcalculator;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CoxScavCalculatorPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CoxScavCalculatorPlugin.class);
		RuneLite.main(args);
	}
}
package com.coxscavcalculator;

import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.events.GameTick;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

import java.awt.image.BufferedImage;

@Slf4j
@PluginDescriptor(
	name = "Cox Scav Calculator",
	description = "Calculates Scav Drops and Herbs for potions in Cox",
	tags = {"CoX", "Bwana Ian", "Scavs", "Potions"}
)
public class CoxScavCalculatorPlugin extends Plugin
{
	@Inject
	private ClientToolbar clientToolbar;

	private CoxScavCalculatorPanel panel;
	private NavigationButton navButton;

	@Override
	protected void startUp()
	{
		startPanel();
	}

	@Override
	protected void shutDown()
	{
		clientToolbar.removeNavigation(navButton);

	}

	private void startPanel(){
		final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "icon.png");
		panel = injector.getInstance(CoxScavCalculatorPanel.class);

		navButton = NavigationButton.builder()
				.tooltip("Cox Scavs")
				.icon(icon)
				.priority(7)
				.panel(panel)
				.build();

		clientToolbar.addNavigation(navButton);
	}
}

package com.coxscavcalculator;

import com.google.inject.Inject;
import lombok.SneakyThrows;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.FlatTextField;
import net.runelite.client.util.ImageUtil;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;

public class CoxScavCalculatorPanel extends PluginPanel {
    //Holds ints just to be safe
    private int plankCount;
    private int buchuCount;
    private int golparCount;
    private int noxiferCount;
    private int juiceCount;
    private int cicelyCount;
    private int mushroomCount;

    //Combo boxes can go here
    private JComboBox chestCombo = new JComboBox();
    private FlatTextField aidText = new FlatTextField();
    private FlatTextField enhanceText = new FlatTextField();
    private FlatTextField overloadText = new FlatTextField();
    private FlatTextField revitText = new FlatTextField();
    private JPanel itemPanel = new JPanel();

    @Inject
    private CoxScavCalculatorPanel(){
        plankCount = 0;
        buchuCount = 0;
        golparCount = 0;
        noxiferCount = 0;
        juiceCount = 0;
        cicelyCount = 0;
        mushroomCount = 0;

        this.setPreferredSize(new Dimension(200, 600));
        this.add(createTitleLabel("Cox Scav Helper"));
        styleBoxes();

        itemPanel.setLayout(new GridLayout(0,4));
        itemPanel.setPreferredSize(new Dimension(200, 100));
        setItemPanel();

        String[] chestData = {"Private Level 0 Construction", "Small Level 30 Construction", "Medium Level 60 Construction", "Large Level 90 Construction", "Massive Level 99 Construction"};
        chestCombo.setModel(new DefaultComboBoxModel(chestData));
        chestCombo.setSelectedIndex(0);
        this.add(getChest());
        this.add(chestCombo);
        this.add(getAid());
        this.add(aidText);
        this.add(getEnhance());
        this.add(enhanceText);
        this.add(getOverload());
        this.add(overloadText);
        this.add(getRevit());
        this.add(revitText);
        this.add(createEnterButton());
        this.add(itemPanel);
    }

    private JButton createEnterButton(){
        final JButton label = new JButton("Calculate");
        label.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH - 20,30));
        label.setFocusable(false);
        label.addMouseListener(new MouseAdapter(){
            @Override
            public void mouseEntered(MouseEvent e)
            {
                label.setBackground(ColorScheme.DARK_GRAY_HOVER_COLOR);
            }

            @Override
            public void mouseExited(MouseEvent e)
            {
                label.setBackground(ColorScheme.DARK_GRAY_COLOR);
            }

            @SneakyThrows
            @Override
            public void mousePressed(MouseEvent e)
            {
                if (e.getButton() == MouseEvent.BUTTON1)
                {
                    label.setText("Wait...");
                    runCalculation();
                    setItemPanel();
                    label.setText("Calculate");
                }
            }
        });

        return label;
    }

    private void styleBoxes(){
        chestCombo.setBackground(ColorScheme.DARKER_GRAY_COLOR);

        aidText.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH - 20, 30));
        aidText.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        aidText.setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
        aidText.setText("0");

        enhanceText.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH - 20, 30));
        enhanceText.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        enhanceText.setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
        enhanceText.setText("0");

        overloadText.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH - 20, 30));
        overloadText.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        overloadText.setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
        overloadText.setText("0");

        revitText.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH - 20, 30));
        revitText.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        revitText.setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
        revitText.setText("0");
    }

    private JLabel getChest(){
        JLabel label = new JLabel();
        label.setToolTipText("Chest");
        label.setFont(FontManager.getRunescapeFont());
        label.setText("Chest Tier");
        label.setForeground(Color.yellow);
        label.setIcon(new ImageIcon(ImageUtil.loadImageResource(getClass(), "Chest.png")));
        label.setIconTextGap(10);
        return label;
    }

    private JLabel getAid(){
        JLabel label = new JLabel();
        label.setToolTipText("Xeric's Aid");
        label.setFont(FontManager.getRunescapeFont());
        label.setText("Xeric's Aid #");
        label.setForeground(Color.yellow);
        label.setIcon(new ImageIcon(ImageUtil.loadImageResource(getClass(), "Xerics_aid.png")));
        label.setIconTextGap(10);
        return label;
    }

    private JLabel getEnhance(){
        JLabel label = new JLabel();
        label.setToolTipText("Prayer Enhance");
        label.setFont(FontManager.getRunescapeFont());
        label.setText("Prayer Enhance #");
        label.setForeground(Color.yellow);
        label.setIcon(new ImageIcon(ImageUtil.loadImageResource(getClass(), "Prayer_enhance.png")));
        label.setIconTextGap(10);
        return label;
    }

    private JLabel getOverload(){
        JLabel label = new JLabel();
        label.setToolTipText("Overload");
        label.setFont(FontManager.getRunescapeFont());
        label.setText("Overload #");
        label.setForeground(Color.yellow);
        label.setIcon(new ImageIcon(ImageUtil.loadImageResource(getClass(), "Overload.png")));
        label.setIconTextGap(10);
        return label;
    }

    private JLabel getRevit(){
        JLabel label = new JLabel();
        label.setToolTipText("Revitalisation");
        label.setFont(FontManager.getRunescapeFont());
        label.setText("Revitalisation #");
        label.setForeground(Color.yellow);
        label.setIcon(new ImageIcon(ImageUtil.loadImageResource(getClass(), "Revitalisation.png")));
        label.setIconTextGap(10);
        return label;
    }

    private JLabel createTitleLabel(String title) {
        JLabel label = new JLabel(title, SwingConstants.CENTER);
        label.setPreferredSize(new Dimension(200, 20));
        label.setForeground(Color.yellow);
        return label;
    }

    private void runCalculation(){

        int aid, enhance, overload, revit;
        try {
            aid = Integer.parseInt(aidText.getText());
        } catch (Exception e){
            aid = 0;
            aidText.setText("0");
        }
        try {
            enhance = Integer.parseInt(enhanceText.getText());
        } catch (Exception e){
            enhance = 0;
            enhanceText.setText("0");
        }
        try {
            overload = Integer.parseInt(overloadText.getText());
        } catch (Exception e){
            overload = 0;
            overloadText.setText("0");
        }
        try {
            revit = Integer.parseInt(revitText.getText());
        } catch (Exception e){
            revit = 0;
            revitText.setText("0");
        }

        plankCount = 0;
        buchuCount = 0;
        golparCount = 0;
        noxiferCount = 0;
        juiceCount = 0;
        cicelyCount = 0;
        mushroomCount = 0;
        //Chest
        plankCount += 2 * chestCombo.getSelectedIndex();
        //Xeric's Aid
        buchuCount += aid;
        juiceCount += aid;
        //Enhance
        buchuCount += enhance;
        cicelyCount += enhance;
        //Overload
        noxiferCount += overload;
        //Elder
        golparCount += overload;
        mushroomCount += overload;
        //Twisted
        golparCount += overload;
        cicelyCount += overload;
        //Kodai
        golparCount += overload;
        juiceCount += overload;
        //Revit
        buchuCount += revit;
        mushroomCount += revit;
    }

    private void setItemPanel() {
        itemPanel.removeAll();
        itemPanel.add(createItemLabel("Plank", String.valueOf(plankCount)));
        itemPanel.add(createItemLabel("Buchu", String.valueOf(buchuCount)));
        itemPanel.add(createItemLabel("Golpar", String.valueOf(golparCount)));
        itemPanel.add(createItemLabel("Noxifer", String.valueOf(noxiferCount)));
        itemPanel.add(createItemLabel("Juice", String.valueOf(juiceCount)));
        itemPanel.add(createItemLabel("Cicely", String.valueOf(cicelyCount)));
        itemPanel.add(createItemLabel("Mushroom", String.valueOf(mushroomCount)));
    }

    private JLabel createItemLabel(String name, String qty){
        JLabel label = new JLabel();
        label.setToolTipText(name);
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setBorder(BorderFactory.createLineBorder(ColorScheme.DARK_GRAY_COLOR, 2));
        Icon icon = new ImageIcon(ImageUtil.loadImageResource(getClass(), name + ".png"));
        label.setIcon(getLabeledIcon(icon, qty));
        return label;
    }

    private Icon getLabeledIcon(Icon old, String qty){
        int w = old.getIconWidth();
        int h = old.getIconHeight();
        BufferedImage img = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = img.createGraphics();
        old.paintIcon(null, g2d, 0, 0);
        g2d.setPaint(Color.white);
        g2d.drawString(qty, 0, 10);
        g2d.dispose();
        return new ImageIcon(img.getScaledInstance(w, h, Image.SCALE_SMOOTH));
    }
}

