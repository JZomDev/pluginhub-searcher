package im2be.afkcountdown;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AfkCountdownPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AfkCountdownPlugin.class);
		RuneLite.main(args);
	}
}
package im2be.afkcountdown;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.config.FontType;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.OverlayUtil;

import javax.inject.Inject;
import java.awt.*;
import java.time.Duration;
import java.time.Instant;
import java.time.temporal.ChronoUnit;

@Slf4j
public class AfkCountdownOverlay extends Overlay {

    private final Client client;
    private final AfkCountdownConfig config;
    private final ConfigManager configManager;

    private Instant endTime;

    @Inject
    public AfkCountdownOverlay(Client client, AfkCountdownPlugin plugin, AfkCountdownConfig config, ConfigManager configManager) {
        super(plugin);
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
        setPriority(OverlayPriority.HIGH);
        this.client = client;
        this.config = config;
        this.configManager = configManager;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (!config.renderOnLogoutStone()) return null;

        Widget toDrawOn;
        if (client.isResized()) {

            // Default to classic layout logout button
            toDrawOn = client.getWidget(WidgetInfo.RESIZABLE_VIEWPORT_LOGOUT_TAB);

            // else try classic while-bank-is-open logout button (or where it would be, at least)
            if (toDrawOn == null || toDrawOn.isHidden())
                toDrawOn = client.getWidget(WidgetInfo.RESIZABLE_VIEWPORT_INVENTORY_PARENT);

            // else try logout button next to minimap for modern layout
            if (toDrawOn == null || toDrawOn.isHidden())
                toDrawOn = client.getWidget(WidgetInfo.RESIZABLE_MINIMAP_LOGOUT_BUTTON);

        } else {
            toDrawOn = client.getWidget(WidgetInfo.FIXED_VIEWPORT_LOGOUT_TAB);
        }
        if (toDrawOn == null || toDrawOn.isHidden()) return null;

        Duration timeLeft = Duration.between(Instant.now(), endTime);
        if (timeLeft.isNegative()) return null;

        String textToDraw = textFrom(timeLeft);
        FontType infoboxFontType = configManager.getConfiguration("runelite", "infoboxFontType", FontType.class);
        graphics.setFont(infoboxFontType.getFont()); // make sure we do this before calculating drawLocation

        Rectangle bounds = toDrawOn.getBounds();
        Point drawLocation = new Point((int) bounds.getCenterX() - (graphics.getFontMetrics().stringWidth(textToDraw) / 2), (int) bounds.getMaxY());
        OverlayUtil.renderTextLocation(graphics, drawLocation, textToDraw, textColor(timeLeft));

        return null;
    }

    public void setTimer(long period) {
        endTime = Instant.now().plus(Duration.of(period, ChronoUnit.MILLIS));
    }

    private Color textColor(Duration timeLeft) {
        if (timeLeft.getSeconds() < 60)
            return Color.RED.brighter();
        return Color.WHITE;
    }

    private String textFrom(Duration duration) {
        int seconds = (int) (duration.toMillis() / 1000L);

        int minutes = (seconds % 3600) / 60;
        int secs = seconds % 60;

        return String.format("%d:%02d", minutes, secs);
    }
}

package im2be.afkcountdown;

import lombok.Getter;
import lombok.Setter;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.ui.overlay.infobox.Timer;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.time.Duration;
import java.time.Instant;
import java.time.temporal.ChronoUnit;

public class AfkCountdownTimer extends Timer
{

    AfkCountdownTimer(Duration duration, BufferedImage image, Plugin plugin)
    {
        super(duration.toMillis(), ChronoUnit.MILLIS, image, plugin);
        setTooltip("Time until you log out due to inactivity");
    }

    @Override
    public Color getTextColor()
    {
        Duration timeLeft = Duration.between(Instant.now(), getEndTime());

        if (timeLeft.getSeconds() < 60)
        {
            return Color.RED.brighter();
        }

        return Color.WHITE;
    }
}

package im2be.afkcountdown;

import javax.inject.Inject;

import com.google.inject.Provides;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Constants;
import net.runelite.api.GameState;
import net.runelite.api.events.ClientTick;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;
import net.runelite.client.util.ImageUtil;
import java.awt.image.BufferedImage;
import java.time.Duration;
import java.time.Instant;

@Slf4j
@PluginDescriptor(
	name = "AFK Countdown",
	description = "Shows you exactly how many seconds it will take before you log out due to inactivity",
	tags = {"afk", "timer", "countdown", "log", "logout"}
)
public class AfkCountdownPlugin extends Plugin
{
	@Inject
	private Client client;

	@Getter
	private AfkCountdownTimer currentTimer;

	@Getter Instant timerStartTime;

	@Inject
	private InfoBoxManager infoBoxManager;

	@Inject
	private AfkCountdownOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private AfkCountdownConfig config;

	private static final BufferedImage LOGOUT_IMAGE;
	private boolean active = false;

	private long lastIdleDuration = -1;

	static
	{
		LOGOUT_IMAGE = ImageUtil.loadImageResource(AfkCountdownPlugin.class, "logout_icon.png");
	}

	@Override
	protected void startUp() throws Exception
	{
		active = true;
		if (config.renderOnLogoutStone())
			overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		active = false;
		lastIdleDuration = -1;
		removeTimer();
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event) {
		if (!AfkCountdownConfig.GROUP.equals(event.getGroup())) return;

		if ("renderOnLogoutStone".equals(event.getKey())) {
			if (config.renderOnLogoutStone()) {
				overlayManager.add(overlay);
				removeTimer();
			} else {
				overlayManager.remove(overlay);

				// emulate infobox timer creation similar to onClientTick does
				setTimer(Duration.ofMillis(getDurationMillis()));
			}
		}
	}

	private long getDurationMillis()
	{
		return Constants.CLIENT_TICK_LENGTH * (client.getIdleTimeout() - getIdleTicks()) + 999;
	}

	@Provides
	AfkCountdownConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(AfkCountdownConfig.class);
	}

	private int getIdleTicks()
	{
		return Math.min(client.getKeyboardIdleTicks(), client.getMouseIdleTicks());
	}

	@Subscribe
	public void onClientTick(ClientTick clientTick)
	{
		if (!active)
		{
			return;
		}

		if (client.getGameState() != GameState.LOGGED_IN)
		{
			return;
		}

		final long durationMillis = getDurationMillis();

		if (durationMillis < 0)
		{
			return;
		}

		if (lastIdleDuration == -1 || durationMillis < lastIdleDuration)
		{

			if (durationMillis >= 0)
			{
				setTimer(Duration.ofMillis(durationMillis));
				overlay.setTimer(durationMillis);
			}
			else
			{
				removeTimer();
			}
		}

		lastIdleDuration = durationMillis;
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() != GameState.LOGGED_IN)
		{
			removeTimer();
			lastIdleDuration = -1;
		}
	}


	private void removeTimer()
	{
		infoBoxManager.removeInfoBox(currentTimer);
		currentTimer = null;
		timerStartTime = null;
	}

	private void setTimer(Duration duration)
	{
		if (config.renderOnLogoutStone()) return;

		final Instant now = Instant.now();
		if (currentTimer == null)
		{
			currentTimer = new AfkCountdownTimer(duration, LOGOUT_IMAGE, this);
			timerStartTime = now;
			infoBoxManager.addInfoBox(currentTimer);
		}
		else
		{
			final Duration newDuration = duration.plus(Duration.between(timerStartTime, now));
			currentTimer.setDuration(newDuration);
		}
	}
}

package im2be.afkcountdown;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(AfkCountdownConfig.GROUP)
public interface AfkCountdownConfig  extends Config {

    String GROUP = "AfkCountdown";

    @ConfigItem(
            keyName = "renderOnLogoutStone",
            name = "Render on logout stone",
            description = "Disable for infobox, enable for text overlay on logout tab stone"
    )
    default boolean renderOnLogoutStone() {
        return false;
    }

}

