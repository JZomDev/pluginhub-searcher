package com.tickdanceaim;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TickDanceAimPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(TickDanceAimPlugin.class);
		RuneLite.main(args);
	}
}
package com.tickdanceaim;

import net.runelite.api.*;
import net.runelite.client.game.ItemManager;
import net.runelite.client.util.AsyncBufferedImage;

import java.util.ArrayList;

public class ItemSwitch {

    ArrayList<Integer> items;

    public AsyncBufferedImage icon;


    public ItemSwitch()
    {
        items = new ArrayList<Integer>();
    }

    public void updateImage(ItemManager itemManager)
    {
        if (items.size() > 0)
            icon = itemManager.getImage(items.get(0));
    }

    public boolean isEmpty()
    {
        return items.isEmpty();
    }

    public boolean isWearing(Client client)
    {
        final ItemContainer equipment = client.getItemContainer(InventoryID.EQUIPMENT);
        if (equipment == null) {
            return false;
        }
        for (int i = 0; i < items.size(); ++i) {
            if (!equipment.contains(items.get(i)))
                return false;
        }
        return true;
    }

    public void fromString(String s)
    {
        items.clear();
        for (String is : s.split(",")) {
            try {
                Integer item = Integer.parseInt(is.trim());
                items.add(item);
            } catch (NumberFormatException e) {
            }
        }
    }

    public String toString()
    {
        String itemString = "";
        for (int i = 0; i < items.size(); ++i) {
            itemString += String.valueOf(items.get(i));
            if (i != items.size() - 1)
                itemString += ", ";
        }
        return itemString;
    }
}

package com.tickdanceaim;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;

import net.runelite.api.*;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetID;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.coords.WorldArea;
import net.runelite.client.ui.overlay.OverlayManager;


import java.util.*;


@Slf4j
@PluginDescriptor(
	name = "Tick dance"
)
public class TickDanceAimPlugin extends Plugin
{
	@Inject
	private TickDanceAimConfig config;

	@Inject
	private Client client;

	@Inject
	private ConfigManager configManager;

	@Inject
	private TickDanceAimOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	ArrayList<ItemSwitch> itemSwitches;
	ArrayList<Integer> switchPattern;
	int activeSwitch = 0;
	int switchTick = 0;

	@Inject
	ItemManager itemManager;


	public WorldPoint gameAreaCorner1;
	public WorldPoint gameAreaCorner2;
	public WorldArea gameArea = null;

	public WorldPoint tile1 = new WorldPoint(0, 0, 0);
	public WorldPoint tile2 = new WorldPoint(0, 0, 0);

	private int successfulTicks = 0;
	private int successfulSwitches = 0;
	private int successfulTiles = 0;


	public int tickCounter = 0;
	private int ticksInteracted = 0;
	private int tickGameUpdated = 0;

	private Random rnd;

	@Provides
	TickDanceAimConfig provideConfig(ConfigManager cm)
	{
		return cm.getConfig(TickDanceAimConfig.class);
	}

	@Override
	protected void startUp()
	{
		overlayManager.add(overlay);
		rnd = new Random();

		itemSwitches = new ArrayList<ItemSwitch>();
		switchPattern = new ArrayList<Integer>();
		for (int i = 0; i < 5; ++i) {
			itemSwitches.add(new ItemSwitch());
		}

		itemSwitches.get(0).fromString(config.switchIds1());
		itemSwitches.get(1).fromString(config.switchIds2());
		itemSwitches.get(2).fromString(config.switchIds3());
		itemSwitches.get(3).fromString(config.switchIds4());
		itemSwitches.get(4).fromString(config.switchIds5());

		for (int i = 0; i < 5; ++i)
			itemSwitches.get(i).updateImage(itemManager);

		parseSwitchConfig();
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
	}


	@Subscribe
	private void onGameTick(GameTick gameTick)
	{
		tickCounter++;
		if (gameArea == null)
			return;
		if (client.getLocalPlayer().getWorldLocation().distanceTo(gameArea) > 15)
			return;


		boolean updateRequired = false;
		boolean streakFailed = false;

		if (tickGameUpdated + config.updateRate() <= tickCounter) {
			if (client.getLocalPlayer().getInteracting() == null) {
				ticksInteracted = 0;
				updateRequired = true;
			} else {
				ticksInteracted++;
				if (ticksInteracted > config.interactionPause())
					updateRequired = true;
			}
		}

		if (tile1 != null && tile2 != null && updateRequired &&
				!tile1.equals(client.getLocalPlayer().getWorldLocation())) {
			streakFailed = true;
		} else {
			if (updateRequired)
				successfulTiles++;
		}

		int prevSwitch = activeSwitch;
		updateActiveSwitch();
		if (prevSwitch != activeSwitch) {
			if (!itemSwitches.get(prevSwitch).isWearing(client)) {
				streakFailed = true;
			} else {
				successfulSwitches += itemSwitches.get(prevSwitch).items.size();
			}
		}

		if (streakFailed) {
			if (successfulTicks > config.updateRate() + 1) {
				if (config.printStreaks())
					printStreak();
			}
			successfulTicks = 0;
			successfulTiles = 0;
			successfulSwitches = 0;
		} else {
			successfulTicks++;
		}

		if (updateRequired) {
			updateTiles();
		}
	}

	private void printStreak()
	{
		if (successfulTicks <= 0)
			return;
		float tilesAvg = ((float)successfulTiles / (float)(successfulTicks + 1));
		float switchesAvg = ((float)successfulSwitches / (float)(successfulTicks + 1));
		String msg = "Tick Dance: Ticks "  + successfulTicks + "     " +
				"tiles/tick " + String.format("%.2f", tilesAvg) + "     ";
		if (successfulSwitches > 0)
				msg += "switches/tick " + String.format("%.2f", switchesAvg) + "     " ;
		msg += gameArea.getWidth() + "x" + gameArea.getHeight();

		client.addChatMessage(ChatMessageType.TRADE, "", msg, null);
	}

	private void updateTiles()
	{
		tickGameUpdated = tickCounter;

		if (gameAreaCorner1 == null || gameArea == null)
			return;

		WorldPoint n = genNextTile();
		if (n == null)
			return;
		tile1 = tile2;
		tile2 = n;
	}

	private void updateActiveSwitch()
	{
		if (!switchPattern.isEmpty()) {
			activeSwitch = switchPattern.get(tickCounter % switchPattern.size());;
			return;
		}
		if (switchTick + config.switchRate() <= tickCounter) {
			switchTick = tickCounter;
			ArrayList<Integer> nonEmpty = new ArrayList<Integer>();
			for (int i = 0; i < itemSwitches.size(); ++i) {
				if (!itemSwitches.get(i).isEmpty()) {
					if (!config.repeatingSwitches() && i == activeSwitch)
						continue;
					nonEmpty.add(i);
				}
			}
			if (nonEmpty.isEmpty())
				return;
			activeSwitch = nonEmpty.get(rnd.nextInt(nonEmpty.size()));
		}
	}

	private WorldPoint genNextTile()
	{
		if (gameArea == null)
			return null;

		ArrayList<WorldPoint> cand;
		if (tile1 == null || !tile1.isInArea(gameArea))
			tile1 = gameArea.toWorldPoint();
		if (tile2 == null || !tile2.isInArea(gameArea))
			tile2 = gameArea.toWorldPoint();

		cand = genTileCandidates(tile2);
		if (cand.size() > 0)
			return cand.get(Math.abs(rnd.nextInt() % cand.size()));
		return null;
	}

	private ArrayList<WorldPoint> genTileCandidates(WorldPoint center)
	{
		ArrayList<WorldPoint> ret = new ArrayList<WorldPoint>();
		WorldPoint pPos = center;

		WorldPoint pStart = pPos.dx(-2).dy(-2);
		WorldArea pArea = new WorldArea(pStart.getX(), pStart.getY(), 5, 5, pStart.getPlane());

		List<WorldPoint> pAreaPoints = pArea.toWorldPointList();
		for (WorldPoint p : pAreaPoints) {
			int diffx = pPos.getX() - p.getX();
			int diffy = pPos.getY() - p.getY();
			if (this.gameArea.distanceTo(p) != 0)
				continue;
			if (pPos.equals(p))
				continue;
			if (p.equals(tile1) || p.equals(tile2))
				continue;


			if (!config.walkTiles() && (pPos.distanceTo(p) < 2))
				continue;
			if (!config.runTiles() && (pPos.distanceTo(p) > 1))
				continue;
			if (!config.cardinalTiles() && (diffx == 0 || diffy == 0))
				continue;
			if (!config.diagonalTiles() &&
					(Math.abs(diffx) == Math.abs(diffy)))
				continue;
			if (!config.LTiles() && (
					(Math.abs(diffx) == 2 && Math.abs(diffy) == 1) ||
							(Math.abs(diffy) == 2 && Math.abs(diffx) == 1)
			))
				continue;
			ret.add(p);
		}
		return ret;
	}

	private int randomRange(int start, int end)
	{
		if (start == end)
			return start;
		return Math.min(start, end) + rnd.nextInt(Math.abs(end - start) + 1);
	}

	private WorldPoint worldPointRandom(WorldPoint start, WorldPoint end)
	{
		return new WorldPoint(randomRange(start.getX(), end.getX()), randomRange(start.getY(), end.getY()),
				randomRange(start.getPlane(), end.getPlane()));
	}

	private void setArea(WorldPoint p1, WorldPoint p2)
	{
		if (p1 != null && p2 != null) {
			WorldPoint sw = new WorldPoint(
					Math.min(p1.getX(), p2.getX()),
					Math.min(p1.getY(), p2.getY()),
					p1.getPlane());
			int width = Math.abs(p1.getX() - p2.getX()) + 1;
			int height = Math.abs(p1.getY() - p2.getY()) + 1;
			gameArea = new WorldArea(sw, width, height);
		}
	}


	@Subscribe
	public void onMenuEntryAdded(MenuEntryAdded event)
	{
		final boolean hotKeyPressed = client.isKeyPressed(KeyCode.KC_SHIFT);
		if (!hotKeyPressed)
			return;
		if (event.getOption().equals("Walk here")) {
			Tile selectedSceneTile = client.getSelectedSceneTile();

			if (selectedSceneTile == null) {
				return;
			}

			MenuEntry subMenu = client.createMenuEntry(-1)
					.setOption("Tick Dance")
					.setType(MenuAction.RUNELITE_SUBMENU);

			client.createMenuEntry(-1)
				.setOption("Set corner 1")
				.setType(MenuAction.RUNELITE)
				.setParent(subMenu)
				.onClick(e ->
				{
					Tile target = client.getSelectedSceneTile();
					if (target != null) {
						gameAreaCorner1 = target.getWorldLocation();
						setArea(gameAreaCorner1, gameAreaCorner2);
						tickGameUpdated = 0;
					}
				});

			client.createMenuEntry(-2)
				.setOption("Set corner 2")
				.setType(MenuAction.RUNELITE)
				.setParent(subMenu)
				.onClick(e ->
				{
					Tile target = client.getSelectedSceneTile();
					if (target != null) {
						gameAreaCorner2 = target.getWorldLocation();
						setArea(gameAreaCorner1, gameAreaCorner2);
						tickGameUpdated = 0;
					}
				});
		}

		final Widget w = event.getMenuEntry().getWidget();
		if (w != null && WidgetInfo.TO_GROUP(w.getId()) == WidgetID.INVENTORY_GROUP_ID
				&& "Examine".equals(event.getOption()) && event.getIdentifier() == 10)
		{
			createSwitchMenuEntries(event);
		}
	}

	public void createSwitchMenuEntries(MenuEntryAdded event)
	{
		final Widget w = event.getMenuEntry().getWidget();
		int itemId = w.getItemId();
		MenuEntry subMenu = client.createMenuEntry(-1)
				.setOption("Tick Dance")
				.setTarget(event.getTarget())
				.setType(MenuAction.RUNELITE_SUBMENU);
		for (int i = 0; i < itemSwitches.size(); ++i) {
			final int ii = i;
			if (!itemSwitches.get(ii).items.contains(itemId)) {
				client.createMenuEntry(-ii - 1)
					.setOption("Add to switch " + (ii + 1))
					.setType(MenuAction.RUNELITE)
					.setParent(subMenu)
					.onClick(e ->
					{
						itemSwitches.get(ii).items.add(itemId);
						updateSwitchConfigText(ii);
						itemSwitches.get(ii).updateImage(itemManager);
					});
			} else {
				client.createMenuEntry(-ii - 1)
					.setOption("Remove from switch " + (ii + 1))
					.setType(MenuAction.RUNELITE)
					.setParent(subMenu)
					.onClick(e ->
					{
						itemSwitches.get(ii).items.remove((Object) itemId);
						updateSwitchConfigText(ii);
						itemSwitches.get(ii).updateImage(itemManager);
					});
			}
		}
	}

	private void updateSwitchConfigText(final int i)
	{
		switch (i) {
			case 0:
				config.setSwitchIds1(itemSwitches.get(i).toString());
				break;
			case 1:
				config.setSwitchIds2(itemSwitches.get(i).toString());
				break;
			case 2:
				config.setSwitchIds3(itemSwitches.get(i).toString());
				break;
			case 3:
				config.setSwitchIds4(itemSwitches.get(i).toString());
				break;
			case 4:
				config.setSwitchIds5(itemSwitches.get(i).toString());
				break;
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (event.getGroup().equals("TickDanceAimConfig")) {
			if (event.getKey().equals("switchPattern")) {
				parseSwitchConfig();
			} else {
				Integer id = null;
				if (event.getKey().equals("switchIds1"))
					id = 0;
				else if (event.getKey().equals("switchIds2"))
					id = 1;
				else if (event.getKey().equals("switchIds3"))
					id = 2;
				else if (event.getKey().equals("switchIds4"))
					id = 3;
				else if (event.getKey().equals("switchIds5"))
					id = 4;
				if (id == null)
					return;
				itemSwitches.get(id).fromString(event.getNewValue());
				itemSwitches.get(id).updateImage(itemManager);
			}
		}
	}

	private void parseSwitchConfig()
	{
		switchPattern.clear();
		String ss = config.switchPattern();
		for (String s : ss.split(",")) {
			try {
				Integer sw = Integer.parseInt(s.trim());
				if (!(sw >= 1 && sw <= 5))
					continue;
				switchPattern.add(sw - 1);
			} catch (NumberFormatException e) {
			}
		}
	}

	public int patternTicksRemaining()
	{
		int count = 0;
		int n = tickCounter % switchPattern.size();
		int prevVal = switchPattern.get(n);
		for (int i = n; i < switchPattern.size(); ++i) {
			int val = switchPattern.get(i);
			if (val == prevVal)
				count++;
			else
				return count;
			prevVal = val;
		}
		return count;
	}

}

package com.tickdanceaim;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

import java.awt.*;

@ConfigGroup("TickDanceAimConfig")
public interface TickDanceAimConfig extends Config
{
    @ConfigSection(
            name = "Shift right click the ground to set the area and to start",
            description = "Shift right click the ground to set the area and to start",
            position = 0
    )
    String instructionsSection = "Shift right click the ground to set the area and to start";


	@ConfigSection(
			name = "Random tiles",
			description = "Configure random tiles",
			position = 1
	)
	String tileSection = "Random tiles";

    @ConfigItem(
			keyName = "updateRate",
			name = "Update rate",
			description = "Changes how often should the tiles move",
			position = 1,
			section = tileSection
	)
	default int updateRate()
	{
		return 1;
	}
	@ConfigItem(
			keyName = "interactionPause",
			name = "Interaction pause",
			description = "Pauses for maximum of N ticks while interacting",
			position = 2,
			section = tileSection
	)
	default int interactionPause()
	{
		return 1;
	}
	@ConfigItem(
			keyName = "walkTiles",
			name = "Walk tiles",
			description = "Allow generating tiles that are 1 tile away",
			position = 3,
			section = tileSection
	)
	default boolean walkTiles()
	{
		return true;
	}
	@ConfigItem(
			keyName = "runTiles",
			name = "Run tiles",
			description = "Allow generating tiles that are 2 tiles away",
			position = 4,
			section = tileSection
	)
	default boolean runTiles()
	{
		return true;
	}
	@ConfigItem(
			keyName = "cardinalTiles",
			name = "Cardinal direction tiles",
			description = "Allow cardinal direction tiles to be generated",
			position = 5,
			section = tileSection
	)
	default boolean cardinalTiles()
	{
		return true;
	}
	@ConfigItem(
			keyName = "diagonalTiles",
			name = "Diagonal tiles",
			description = "Allow diagonal direction tiles to be generated",
			position = 6,
			section = tileSection
	)
	default boolean diagonalTiles()
	{
		return true;
	}
	@ConfigItem(
			keyName = "LTiles",
			name = "L tiles",
			description = "Allow L movement tiles to be generated",
			position = 7,
			section = tileSection
	)
	default boolean LTiles()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
			keyName = "tile1Color",
			name = "Tile1 color",
			description = "Configures the color of the tile you're supposed to click on the current tick",
			position = 10,
			section = tileSection
	)
	default Color tile1Color() {
		return new Color(255, 0, 0, 150);
	}

	@Alpha
	@ConfigItem(
			keyName = "tile2Color",
			name = "Tile2 color",
			description = "Configures the color of the tile you're supposed to click on the next tick, alpha 0 to disable",
			position = 11,
			section = tileSection
	)
	default Color tile2Color() {
		return new Color(0, 0, 0, 0);
	}



	@ConfigSection(
			name = "Random switches",
			description = "Configure random item switches",
			position = 2
	)
	String switchSection = "Random switches";

	@ConfigItem(
			keyName = "switchIds1",
			name = "Switch1, shift right click an item to set",
			description = "Configures switch set 1, empty to disable",
			position = 0,
			section = switchSection
	)
	default String switchIds1()
	{
		return "";
	}
	@ConfigItem(
			keyName = "switchIds1",
			name = "",
			description = ""
	)
	void setSwitchIds1(String key);

	@ConfigItem(
			keyName = "switchIds2",
			name = "Switch2",
			description = "Configures switch set 2, empty to disable",
			position = 1,
			section = switchSection
	)
	default String switchIds2()
	{
		return "";
	}
	@ConfigItem(
			keyName = "switchIds2",
			name = "",
			description = ""
	)
	void setSwitchIds2(String key);

	@ConfigItem(
			keyName = "switchIds3",
			name = "Switch3",
			description = "Configures switch set 3, empty to disable",
			position = 2,
			section = switchSection
	)
	default String switchIds3()
	{
		return "";
	}
	@ConfigItem(
			keyName = "switchIds3",
			name = "",
			description = ""
	)
	void setSwitchIds3(String key);

	@ConfigItem(
			keyName = "switchIds4",
			name = "Switch4",
			description = "Configures switch set 4, empty to disable",
			position = 3,
			section = switchSection
	)
	default String switchIds4()
	{
		return "";
	}
	@ConfigItem(
			keyName = "switchIds4",
			name = "",
			description = ""
	)
	void setSwitchIds4(String key);

	@ConfigItem(
			keyName = "switchIds5",
			name = "Switch5",
			description = "Configures switch set 3, empty to disable",
			position = 4,
			section = switchSection
	)
	default String switchIds5()
	{
		return "";
	}
	@ConfigItem(
			keyName = "switchIds5",
			name = "",
			description = ""
	)
	void setSwitchIds5(String key);

	@ConfigItem(
			keyName = "switchRate",
			name = "Switch rate",
			description = "Changes how often you need to switch items",
			position = 5,
			section = switchSection
	)
	default int switchRate()
	{
		return 1;
	}

	@ConfigItem(
			keyName = "repeatingSwitches",
			name = "Repeating switches",
			description = "Allow same switch to be selected back to back",
			position = 6,
			section = switchSection
	)
	default boolean repeatingSwitches()
	{
		return false;
	}


	@ConfigItem(
			keyName = "switchPattern",
			name = "Custom switch pattern",
			description = "Example pattern: 1,1,1,2,2,2 to switch between set 1 and set 2 every 3 ticks. Empty for random",
			position = 7,
			section = switchSection
	)
	default String switchPattern()
	{
		return "";
	}
	@ConfigItem(
			keyName = "switchPattern",
			name = "",
			description = ""
	)
	void switchPattern(String key);



	@ConfigItem(
			keyName = "printStreaks",
			name = "Print streaks",
			description = "Print streaks, make sure trade offers are on in-game",
			position = 8
	)
	default boolean printStreaks()
	{
		return true;
	}


	@Alpha
	@ConfigItem(
			keyName = "borderColor",
			name = "Border color",
			description = "",
			position = 12
	)
	default Color borderColor() {
		return new Color(0, 0, 0, 255);
	}

}

package com.tickdanceaim;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Polygon;
import javax.inject.Inject;
import javax.inject.Singleton;
import java.awt.BasicStroke;
import java.awt.Stroke;
import java.lang.*;

import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.OverlayUtil;


@Singleton
class TickDanceAimOverlay extends Overlay
{
    private final TickDanceAimConfig config;
    private final Client client;
    private final TickDanceAimPlugin plugin;

    private static final int MAX_DRAW_DISTANCE = 32;
    private static final int LOCAL_TILE_SIZE = Perspective.LOCAL_TILE_SIZE;

    @Inject
    private TickDanceAimOverlay(Client client, TickDanceAimConfig config, TickDanceAimPlugin plugin)
    {
        this.config = config;
        this.client = client;
        this.plugin = plugin;
        setPosition(OverlayPosition.DYNAMIC);
        setPriority(OverlayPriority.LOW);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (plugin.gameArea == null)
            return null;
        if (plugin.gameArea.distanceTo(client.getLocalPlayer().getWorldLocation()) > MAX_DRAW_DISTANCE)
            return null;

        if (config.tile1Color().getAlpha() != 0)
            worldPointRender(graphics, plugin.tile1, config.tile1Color());
        if (config.tile2Color().getAlpha() != 0)
            worldPointRender(graphics, plugin.tile2, config.tile2Color());
        if (!plugin.itemSwitches.get(plugin.activeSwitch).isEmpty())
            itemSwitchRender(graphics, plugin.tile1, plugin.itemSwitches.get(plugin.activeSwitch));
        drawAreaBorder(graphics, plugin.gameArea);
        return null;
    }

    private void worldPointRender(Graphics2D graphics, WorldPoint p, Color c)
    {
        if (p == null)
            return;
        LocalPoint lp = LocalPoint.fromWorld(client, p);
        if (lp == null) {
            return;
        }

        Polygon poly = Perspective.getCanvasTilePoly(client, lp);
        Stroke stroke = new BasicStroke(3.0f);
        if (poly != null) {
            OverlayUtil.renderPolygon(graphics, poly, c, stroke);
        }
    }

    private void drawAreaBorder(Graphics2D graphics, WorldArea a)
    {
        LocalPoint corners[] = areaToLocalPoints(a);
        if (corners == null)
            return;

        int pathX[] = new int[5];
        int pathY[] = new int[5];
        for (int i = 0; i < 4; ++i) {
            int plane = a.getPlane();
            Point p = Perspective.localToCanvas(client, corners[i], plane);
            if (p == null)
                return;
            pathX[i] = p.getX();
            pathY[i] = p.getY();
        }
        pathX[4] = pathX[0];
        pathY[4] = pathY[0];
        graphics.setColor(config.borderColor());
        Stroke stroke = new BasicStroke(1.0f);
        graphics.setStroke(stroke);
        graphics.drawPolyline(pathX, pathY, 5);
    }

    void itemSwitchRender(Graphics2D graphics, WorldPoint wp, ItemSwitch itemSwitch)
    {
        LocalPoint lp = LocalPoint.fromWorld(client, wp);
        if (lp == null || itemSwitch.icon == null) {
            return;
        }
        Point sp = Perspective.localToCanvas(client, lp, plugin.gameArea.getPlane(), 0);
        if (sp == null)
            return;

        OverlayUtil.renderImageLocation(client, graphics, lp, itemSwitch.icon, 0);
        int ticksRemaining = plugin.switchTick + config.switchRate() - plugin.tickCounter;
        if (!plugin.switchPattern.isEmpty())
            ticksRemaining = plugin.patternTicksRemaining();
        if (ticksRemaining >= 0)
            OverlayUtil.renderTextLocation(graphics, sp, String.valueOf(ticksRemaining), Color.WHITE);
    }

    LocalPoint[] areaToLocalPoints(WorldArea a)
    {
        LocalPoint corners[] = new LocalPoint[4];
        int lts = LOCAL_TILE_SIZE / 2;
        corners[0] = LocalPoint.fromWorld(client, a.getX(), a.getY());
        corners[1] = LocalPoint.fromWorld(client, a.getX() + a.getWidth() - 1, a.getY());
        corners[2] = LocalPoint.fromWorld(client, a.getX() + a.getWidth() - 1, a.getY() + a.getHeight() - 1);
        corners[3] = LocalPoint.fromWorld(client, a.getX(), a.getY() + a.getHeight() - 1);
        for (int i = 0; i < 4; ++i)
            if (corners[i] == null)
                return null;
        //fromWorlds returns the center of the tile, so we need to move them half a tile to the edge, using moveLocalPoint
        corners[0] = moveLocalPoint(corners[0], -lts, -lts);
        corners[1] = moveLocalPoint(corners[1],  lts, -lts);
        corners[2] = moveLocalPoint(corners[2],  lts,  lts);
        corners[3] = moveLocalPoint(corners[3], -lts,  lts);
        return corners;
    }

    LocalPoint moveLocalPoint(LocalPoint p, int dx, int dy)
    {
        return new LocalPoint(p.getX() + dx, p.getY() + dy);
    }
}

