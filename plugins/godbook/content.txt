package com.infernostats;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.gameval.VarbitID;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.util.LinkedHashMap;

@Slf4j
@PluginDescriptor(
  name = "Godbook",
  tags = {"timer", "timing", "maiden", "xarpus", "verzik"}
)
public class GodbookPlugin extends Plugin
{
	@Getter(AccessLevel.MODULE)
	private LinkedHashMap<String, Integer> players;

	@Inject
	private Client client;

	@Inject
	private GodbookOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private GodbookConfig config;

	@Provides
	GodbookConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(GodbookConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		players = new LinkedHashMap<>();
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
		players.clear();
	}

  @Subscribe
  public void onAnimationChanged(final AnimationChanged event)
  {
		if (config.theatreOnly() && !isInTheatreOfBlood())
			return;

    if (config.instanceOnly() && !isInInstance())
      return;

    switch (config.animations()) {
      case BOTH: {
        if (TimingAnimationID.isTimingAnimation(event.getActor().getAnimation()))
          players.put(event.getActor().getName(), 0);
      }
      case GODBOOKS_ONLY: {
        if (TimingAnimationID.isGodbookAnimation(event.getActor().getAnimation()))
          players.put(event.getActor().getName(), 0);
      }
      case EMOTES_ONLY: {
        if (TimingAnimationID.isEmoteAnimation(event.getActor().getAnimation()))
          players.put(event.getActor().getName(), 0);
      }
    }
  }

	@Subscribe
	public void onGameTick(GameTick event)
	{
		if (players.isEmpty())
			return;

		players.entrySet()
			.forEach(i -> i.setValue(i.getValue() + 1));

		players.entrySet()
			.removeIf(i -> i.getValue() >= config.maxTicks());
	}

  private boolean isInTheatreOfBlood()
  {
    return client.getVarbitValue(VarbitID.TOB_CLIENT_PARTYSTATUS) != 0;
  }

  private boolean isInInstance()
  {
    WorldView wv = client.getTopLevelWorldView();
    if (wv == null) {
      return false;
    }
    return wv.isInstance();
  }
}
package com.infernostats;

import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import javax.inject.Inject;
import java.awt.*;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Collections;

class GodbookOverlay extends Overlay
{
	private final GodbookPlugin plugin;
	private final PanelComponent panelComponent = new PanelComponent();

	@Inject
	private GodbookOverlay(GodbookPlugin plugin)
	{
		this.plugin = plugin;

		setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		String title = "Tick:";
		HashMap<String, Integer> players = plugin.getPlayers();

		panelComponent.getChildren().clear();

		if (!players.isEmpty())
		{
			panelComponent.setPreferredSize(new Dimension(getMaxWidth(graphics, players, title) + 14, 0));
			panelComponent.getChildren().add(TitleComponent.builder().text(title).color(Color.green).build());

			players.forEach(this::addPlayerToOverlay);
		}

		return panelComponent.render(graphics);
	}

	private int getMaxWidth(Graphics2D graphics, HashMap<String, Integer> players, String title)
	{
		String longestKey = Collections.max(players.keySet(), Comparator.comparingInt(String::length));
		return graphics.getFontMetrics().stringWidth(longestKey) + graphics.getFontMetrics().stringWidth(title);
	}

	private void addPlayerToOverlay(String playerName, Integer ticks)
	{
		panelComponent.getChildren().add(LineComponent.builder().left(playerName).right(Integer.toString(ticks)).build());
	}
}


package com.infernostats;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("Godbook")
public interface GodbookConfig extends Config
{
	@ConfigItem(
			position = 0,
			keyName = "theatreOnly",
			name = "Theatre of Blood Only",
			description = "Only display the overlay when in the Theatre of Blood"
	)
	default boolean theatreOnly()
	{
		return false;
	}

  @ConfigItem(
      position = 1,
      keyName = "instanceOnly",
      name = "Instance Only",
      description = "Only display the overlay when in an instance"
  )
  default boolean instanceOnly()
  {
    return false;
  }

	@ConfigItem(
			position = 2,
			keyName = "ticks",
			name = "Ticks",
			description = "How many ticks the counter remains active for"
	)
	default int maxTicks()
	{
		return 157;
	}

  enum AllowedAnimations {
    EMOTES_ONLY,
    GODBOOKS_ONLY,
    BOTH
  };

  @ConfigItem(
      position = 3,
      keyName = "allowedAnimations",
      name = "Allowed Animations",
      description = "Trigger the overlay on Emotes, Godbooks, or Both"
  )
  default AllowedAnimations animations()
  {
    return AllowedAnimations.BOTH;
  }
}

package com.infernostats;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class TimingAnimationID {
  public static final int HOLY_BOOK = 1335;
  public static final int HOLY_BOOK_OR = 9403;
  public static final int UNHOLY_BOOK = 1336;
  public static final int UNHOLY_BOOK_OR = 9404;
  public static final int BOOK_OF_BALANCE = 1337;
  public static final int BOOK_OF_BALANCE_OR = 9405;
  public static final int BOOK_OF_WAR = 7153;
  public static final int BOOK_OF_WAR_OR = 9414;
  public static final int BOOK_OF_LAW = 7154;
  public static final int BOOK_OF_LAW_OR = 9440;
  public static final int BOOK_OF_DARKNESS = 7155;
  public static final int BOOK_OF_DARKNESS_OR = 9441;

  public static final int EMOTE_YES = 855;
  public static final int EMOTE_NO = 856;
  public static final int EMOTE_SPIN = 2107;
  public static final int EMOTE_THINK = 857;
  public static final int EMOTE_DANCE = 866;

  private static final List<Integer> godbookAnimationIDs = new ArrayList<>(
      Arrays.asList(
          HOLY_BOOK,
          HOLY_BOOK_OR,
          UNHOLY_BOOK,
          UNHOLY_BOOK_OR,
          BOOK_OF_BALANCE,
          BOOK_OF_BALANCE_OR,
          BOOK_OF_WAR,
          BOOK_OF_WAR_OR,
          BOOK_OF_LAW,
          BOOK_OF_LAW_OR,
          BOOK_OF_DARKNESS,
          BOOK_OF_DARKNESS_OR
      )
  );

  private static final List<Integer> emoteAnimationIDs = new ArrayList<>(
      Arrays.asList(
        EMOTE_YES,
        EMOTE_NO,
        EMOTE_SPIN,
        EMOTE_THINK,
        EMOTE_DANCE
      )
  );

  private static final List<Integer> timingAnimationIDs = Stream.of(
      godbookAnimationIDs.stream(),
      emoteAnimationIDs.stream()
  ).flatMap(s -> s).collect(Collectors.toList());

  public static boolean isGodbookAnimation(int animationID)
  {
    return godbookAnimationIDs.contains(animationID);
  }

  public static boolean isEmoteAnimation(int animationID)
  {
    return emoteAnimationIDs.contains(animationID);
  }

  public static boolean isTimingAnimation(int animationID)
  {
    return timingAnimationIDs.contains(animationID);
  }
}

package com.infernostats;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class GodbookPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(GodbookPlugin.class);
		RuneLite.main(args);
	}
}
