package com.vartan.BankLocks.util;

import com.vartan.BankLocks.model.MoreComponentIDs;
import net.runelite.api.Client;
import net.runelite.api.widgets.Widget;

import java.util.Collection;
import java.util.Set;
import java.util.stream.Collectors;

public class InterfaceUtil {
    public static boolean anyInterfaceContainsWidget(Collection<Integer> interfaceIds, Widget widget, Client client) {
        Set<Widget> interfaceWidgets = interfaceIds.stream().map(client::getWidget).collect(Collectors.toSet());
        while(widget != null) {
            if (interfaceWidgets.contains(widget)) {
                return true;
            }
            widget = widget.getParent();
        }
        return false;
    }

    /**
     * Gets the item ID from an interface widget, or from its second child.
     *
     * In most cases, the item ID is directly the widget returned by MenuOptionClicked. However, in the case of
     * the equipment tab in the bank, the item ID is actually part of the widget's child at index 1.
     */
    public static int getItemIdOrChildItemId(Widget widget) {
        if (widget == null) {
            return ItemUtil.INVALID_ITEM_ID;
        }
        int itemId = widget.getItemId();

        if (ItemUtil.isValidItemId(itemId)) {
            return itemId;
        }
        Widget[] children = widget.getChildren();
        if (children != null && children.length > 1) {
            // Equipment tab has the item ID as the 2nd child.
            return children[1].getItemId();
        }
        return ItemUtil.INVALID_ITEM_ID;
    }

    /**
     * Checks whether a widget is a child of a locked widget.
     */
    public static boolean isInLockedInterface(Widget widget, Client client) {
        return InterfaceUtil.anyInterfaceContainsWidget(MoreComponentIDs.LOCKED_INTERFACES, widget, client);
    }

    /**
     * Checks whether a widget is in a lockable interface.
     */
    public static boolean isInLockableInterface(Widget widget, Client client) {
        return InterfaceUtil.anyInterfaceContainsWidget(MoreComponentIDs.LOCKABLE_INTERFACES, widget, client);
    }
}

package com.vartan.BankLocks.util;

import java.util.Set;

public class SetUtil {
    public static <T> boolean toggleItem(Set<T> set, T item) {
        if(set.contains(item)) {
            set.remove(item);
            return false;
        }
        set.add(item);
        return true;
    }
}

package com.vartan.BankLocks.util;

public class ItemUtil {
    public static int INVALID_ITEM_ID = -1;
    public static boolean isValidItemId(int itemId) {
        return itemId >= 0;
    }
}

package com.vartan.BankLocks;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("Bank Locks")
public interface BankLocksConfig extends Config {
    String CONFIG_GROUP = "bankLocks";
    String LOCKED_ITEMS_CONFIG_NAME = "lockedItems";

    @ConfigItem(
            keyName = "preventDepositAll",
            name = "Prevent deposit-all locked item",
            description = "Whether the 'Deposit inventory' and 'Deposit worn items' buttons will be " +
                    "disabled if pressing it would deposit a locked item.",
            position = 0
    )
    default boolean preventDepositAll() {
        return true;
    }

    @ConfigItem(
            keyName = "playSoundWhenPrevented",
            name = "Enable sound effect",
            description = "Whether a warning sound will play when the plugin prevents a deposit.",
            position = 1
    )
    default boolean playSoundWhenPrevented() {
        return true;
    }

    @ConfigItem(
            keyName = "holdShiftForLockAndUnlock",
            name = "Hold shift to lock/unlock",
            description = "Whether shift is required to display 'Bank-lock' and 'Bank-unlock' right click menu " +
                    "entries. When this is unchecked, they will always be shown.",
            position = 2

    )
    default boolean holdShiftForLockAndUnlock() {
        return true;
    }

    @ConfigItem(
            keyName = "lockOpacity",
            name = "Lock overlay opacity",
            description = "How visible should the lock overlay be? 1 for fully visible, 0 to turn off the lock " +
                    "overlay.",
            position = 3

    )
    default double lockOpacity() {
        return 0.8f;
    }
}

package com.vartan.BankLocks;

import net.runelite.client.config.ConfigManager;

import javax.inject.Inject;
import java.util.Arrays;
import java.util.Set;
import java.util.stream.Collectors;

public class BankLocksLoader {
    @Inject
    private ConfigManager configManager;

    /** Saves the locked item ID set to config. */
    public void saveLockedItems(Set<Integer> lockedItemIds) {
        String commaSeparatedItemIds = lockedItemIds
                .stream()
                .map(String::valueOf)
                .collect(Collectors.joining(","));
        configManager.setConfiguration(BankLocksConfig.CONFIG_GROUP,
                BankLocksConfig.LOCKED_ITEMS_CONFIG_NAME,
                commaSeparatedItemIds);
    }

    /** Returns the set of item IDs saved to config, or an empty set if it doesn't exist. */
    public Set<Integer> loadLockedItems() {
        try {
        String commaSeparatedItemIds = configManager.getConfiguration(BankLocksConfig.CONFIG_GROUP,
                BankLocksConfig.LOCKED_ITEMS_CONFIG_NAME);
            if (commaSeparatedItemIds != null) {
                return Arrays.stream(commaSeparatedItemIds.split(","))
                        .map(Integer::parseInt)
                        .collect(Collectors.toSet());
            }
        } catch (Exception e) {
            // If there is any exception encountered (reading config or converting to Set<Integer>),
            // behave as if there is no saved config.
        }
        return Set.of();
    }
}

package com.vartan.BankLocks.model;

public class SoundEffects {
    public static int GE_TRADE_ERROR = 3926;
}

package com.vartan.BankLocks.model;

import net.runelite.api.widgets.ComponentID;

import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class MoreComponentIDs {
    /**
     * Interfaces from which you can deposit items.
     */
    public static final Set<Integer> LOCKED_INTERFACES = Set.of(
            ComponentID.BANK_INVENTORY_ITEM_CONTAINER,
            ComponentID.DEPOSIT_BOX_INVENTORY_ITEM_CONTAINER,
            ComponentID.BANK_EQUIPMENT_PARENT,
            ComponentID.BANK_INVENTORY_EQUIPMENT_ITEM_CONTAINER
    );
    
    /**
     * Interfaces that don't deposit (no need to lock), but can be used to lock and unlock items.
     */
    private static final Set<Integer> ADDITIONAL_LOCKABLE_INTERFACES = Set.of(
            ComponentID.INVENTORY_CONTAINER,
            ComponentID.EQUIPMENT_INVENTORY_ITEM_CONTAINER
    );

    /**
     * Interfaces that can be used to lock/unlock items from being banked.
     */
    public static final Set<Integer> LOCKABLE_INTERFACES = Stream.concat(
            LOCKED_INTERFACES.stream(), // Locked interfaces are also lockable.
            ADDITIONAL_LOCKABLE_INTERFACES.stream()
    ).collect(Collectors.toSet());

    /** Deposit-all inventory button for the deposit box. */
    public static int DEPOSIT_BOX_DEPOSIT_INVENTORY = 12582916;

    /** Deposit-all equipment button for the deposit box. */
    public static int DEPOSIT_BOX_DEPOSIT_EQUIPMENT = 12582918;

    /**
     * Identifiers for deposit all inventory buttons.
     */
    public static final Set<Integer> DEPOSIT_INVENTORY_COMPONENT_IDS = Set.of(
            ComponentID.BANK_DEPOSIT_INVENTORY,
            MoreComponentIDs.DEPOSIT_BOX_DEPOSIT_INVENTORY
    );

    /**
     * Identifiers for deposit all equipment buttons.
     */
    public static final Set<Integer> DEPOSIT_EQUIPMENT_COMPONENT_IDS = Set.of(
            ComponentID.BANK_DEPOSIT_EQUIPMENT,
            MoreComponentIDs.DEPOSIT_BOX_DEPOSIT_EQUIPMENT
    );
}

package com.vartan.BankLocks;

import com.google.inject.Provides;
import com.vartan.BankLocks.model.MoreComponentIDs;
import com.vartan.BankLocks.model.SoundEffects;
import com.vartan.BankLocks.util.InterfaceUtil;
import com.vartan.BankLocks.util.ItemUtil;
import com.vartan.BankLocks.util.SetUtil;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;

import javax.inject.Inject;
import java.awt.image.BufferedImage;
import java.util.HashSet;
import java.util.Set;

@Slf4j
@PluginDescriptor(
        name = "Bank Locks"
)
public class BankLocksPlugin extends Plugin {
    /**
     * Lock image used by the overlay. Must be generated from the main thread.
     */
    BufferedImage lockImage;
    @Inject
    private ConfigManager configManager;
    @Inject
    private ItemManager itemManager;
    @Inject
    private Client client;
    @Inject
    private BankLocksConfig config;
    @Inject
    private BankLocksOverlay overlay;
    @Inject
    private OverlayManager overlayManager;
    @Inject
    private BankLocksLoader loader;

    /**
     * Set of item IDs that should not be banked.
     * This is persisted across sessions via (save|load)LockedItems methods.
     */
    @Getter
    private Set<Integer> lockedItemIds = new HashSet<>();

    @Override
    protected void startUp() throws Exception {
        overlayManager.add(overlay);
    }

    @Override
    protected void shutDown() throws Exception {
        overlayManager.remove(overlay);
    }

    @Subscribe()
    public void onMenuOptionClicked(MenuOptionClicked event) {
        Widget widget = event.getMenuEntry().getWidget();
        if (widget == null) {
            // Ignore any menu options that aren't from a widget.
            return;
        }
        String option = Text.removeTags(event.getMenuOption());
        int widgetId = widget.getId();

        if (preventDepositAll(event, widgetId)) return;

        preventDepositItem(event, option, widget);
    }

    private void preventDepositItem(MenuOptionClicked event, String option, Widget widget) {
        if (!option.startsWith("Deposit") /* depositing from most interfaces*/
                && !option.equalsIgnoreCase("Bank") /* depositing from the equipment tab in the bank. */) {
            return;
        }

        int itemId = InterfaceUtil.getItemIdOrChildItemId(event.getWidget());
        if (!ItemUtil.isValidItemId(itemId)) {
            return;
        }

        if (shouldPreventDeposit(widget, itemId)) {
            preventMenuOptionClicked(event, itemId);
        }
    }

    /**
     * Prevents depositing all inventory items or equipment.
     */
    private boolean preventDepositAll(MenuOptionClicked event, int widgetId) {
        if (config.preventDepositAll()) {
            InventoryID inventoryID = null;
            if (MoreComponentIDs.DEPOSIT_INVENTORY_COMPONENT_IDS.contains(widgetId)) {
                inventoryID = InventoryID.INVENTORY;
            } else if (MoreComponentIDs.DEPOSIT_EQUIPMENT_COMPONENT_IDS.contains(widgetId)) {
                inventoryID = InventoryID.EQUIPMENT;
            } else {
                return false;
            }
            int itemId = shouldPreventDepositAll(inventoryID);
            if (ItemUtil.isValidItemId(itemId)) {
                preventMenuOptionClicked(event, itemId);
                return true;
            }
        }
        return false;
    }

    /**
     * Returns the first locked item ID in an inventory (or equipment).
     */
    private int shouldPreventDepositAll(InventoryID id) {
        ItemContainer itemContainer = client.getItemContainer(id);
        if (itemContainer == null) {
            return ItemUtil.INVALID_ITEM_ID;
        }
        for (Item item : itemContainer.getItems()) {
            int itemId = item.getId();
            if (lockedItemIds.contains(itemId)) {
                return itemId;
            }
        }
        return ItemUtil.INVALID_ITEM_ID;
    }

    /**
     * Prevents the menu option from being clicked and notifies the user which item blocked it.
     */
    private void preventMenuOptionClicked(MenuOptionClicked event, int itemId) {
        if (config.playSoundWhenPrevented()) {
            client.playSoundEffect(SoundEffects.GE_TRADE_ERROR);
        }
        ItemComposition itemComposition = itemManager.getItemComposition(itemId);
        String itemName = itemComposition.getName();

        client.addChatMessage(ChatMessageType.GAMEMESSAGE, "",
                "Prevented depositing a locked item: " + itemName, null);
        event.consume();
    }

    /**
     * Returns the item ID if the widget clicked is a locked item in a locked interface.
     */
    private boolean shouldPreventDeposit(Widget widget, int itemId) {
        if (!InterfaceUtil.isInLockedInterface(widget, client)) {
            return false;
        }
        return lockedItemIds.contains(itemId);
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged gameStateChanged) {
        GameState gameState = gameStateChanged.getGameState();
        if (gameState == GameState.LOGGED_IN) {
            lockedItemIds = loader.loadLockedItems();
            if (lockImage == null) {
                lockImage = itemManager.getImage(ItemID.GOLD_LOCKS);
            }
        }
    }

    @Provides
    BankLocksConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(BankLocksConfig.class);
    }

    /**
     * Adds "Bank-unlock" and "Bank-lock" options to items.
     */
    @Subscribe
    public void onMenuEntryAdded(MenuEntryAdded event) {
        if (config.holdShiftForLockAndUnlock() && !client.isKeyPressed(KeyCode.KC_SHIFT)) {
            return;
        }
        if (!event.getOption().contains("Examine")) {
            // Exit early on "Examine" check, since it's a simple string operation.
            // Other work below may take longer depending on the interface.
            return;
        }
        // TODO: Consider unlock-all right click on deposit-all buttons.
        int itemId = InterfaceUtil.getItemIdOrChildItemId(event.getMenuEntry().getWidget());
        if (!ItemUtil.isValidItemId(itemId)
                || !InterfaceUtil.isInLockableInterface(event.getMenuEntry().getWidget(), client)) {
            return;
        }
        String menuOption = lockedItemIds.contains(itemId) ? "Bank-unlock" : "Bank-lock";
        client.createMenuEntry(-1)
                .setOption(menuOption)
                .setTarget(event.getTarget())
                .setType(MenuAction.RUNELITE)
                .onClick(e ->
                {
                    SetUtil.toggleItem(lockedItemIds, itemId);
                    loader.saveLockedItems(lockedItemIds);
                });
    }
}

package com.vartan.BankLocks;

import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.WidgetItemOverlay;

import javax.inject.Inject;
import java.awt.*;

public class BankLocksOverlay extends WidgetItemOverlay {
    private final BankLocksPlugin plugin;
    private final BankLocksConfig config;

    @Inject
    private BankLocksOverlay(BankLocksPlugin plugin, BankLocksConfig config) {
        super();
        this.plugin = plugin;
        this.config = config;
        showOnInventory();
        showOnEquipment();
        // TODO: Figure out how to get this working on bank equipment inventory.
    }

    @Override
    public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem widgetItem) {
        // Clamp opacity between 0-1.
        float opacity = (float) Math.max(0, Math.min(1, config.lockOpacity()));
        if (opacity <= 0f || !plugin.getLockedItemIds().contains(itemId) || plugin.lockImage == null) {
            return;
        }

        Rectangle location = widgetItem.getCanvasBounds();
        int width = (int) location.getWidth();
        int height = (int) location.getHeight();
        int x = (int) location.getX();
        int y = (int) location.getY();

        // Draw transparent lock over the bottom-right corner of the item.
        graphics.setFont(FontManager.getRunescapeSmallFont());
        AlphaComposite composite = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, opacity);
        graphics.setComposite(composite);
        graphics.drawImage(plugin.lockImage, x + width / 2, y + height / 2, width / 2, height / 2, null);
    }
}

package com.vartan.BankLocks;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class BankLocksPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(BankLocksPlugin.class);
		RuneLite.main(args);
	}
}
