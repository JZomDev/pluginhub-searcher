package com.highalchighlight;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class HighAlcHighlightTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(HighAlcHighlightPlugin.class);
		RuneLite.main(args);
	}
}
package com.highalchighlight;

import net.runelite.api.Client;
import net.runelite.api.ItemComposition;
import net.runelite.api.ItemID;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.WidgetItemOverlay;

import com.highalchighlight.config.FireRuneSource;

import javax.inject.Inject;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;

public class HighAlcHighlightOverlay extends WidgetItemOverlay
{
	private final Client client;
    private final ItemManager itemManager;
    private final HighAlcHighlightConfig config;
    @Inject
    private HighAlcHighlightOverlay(Client client, ItemManager itemManager, HighAlcHighlightPlugin plugin, HighAlcHighlightConfig config)
    {
    	this.client = client;
        this.itemManager = itemManager;
        this.config = config;
        showOnInventory();
        showOnBank();
    }

    @Override
    public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem itemWidget)
    {
        if (checkInterfaceIsHighlightable(itemWidget)) {
            int gePrice = itemManager.getItemPrice(itemId);
            if (gePrice >= 100)
            {
                if (gePrice > 499999999) {
                    gePrice = gePrice - 5000000;
                }
                gePrice = gePrice - gePrice/100;
            }

            int profitPerCast = getProfit(itemId, gePrice);
            boolean isSellable = isSellable(gePrice);

            if ((profitPerCast > 0) && (isSellable || config.highlightUnsellables())) {
                Color colorToUse = getColor(profitPerCast, isSellable);

                Rectangle bounds = itemWidget.getCanvasBounds();
                final BufferedImage outline = itemManager.getItemOutline(itemId, itemWidget.getQuantity(), colorToUse);
                graphics.drawImage(outline, (int) bounds.getX(), (int) bounds.getY(), null);
            }
        }
    }

	private boolean checkInterfaceIsHighlightable(WidgetItem itemWidget)
	{
		if (config.getHighlightLocation() != HighAlcHighlightConfig.HighlightLocationType.BOTH)
		{
			Widget bankWidget = client.getWidget(WidgetInfo.BANK_ITEM_CONTAINER);
			if (bankWidget != null && config.getHighlightLocation() == HighAlcHighlightConfig.HighlightLocationType.BANK)
			{
				return bankWidget.getId() == itemWidget.getWidget().getId();
			}
			Widget inventoryWidget = client.getWidget(WidgetInfo.INVENTORY);
			Widget bankInventoryWidget = client.getWidget(WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER);
			if (inventoryWidget != null && config.getHighlightLocation() == HighAlcHighlightConfig.HighlightLocationType.INVENTORY)
			{
			    if (bankInventoryWidget != null) {
			        return bankInventoryWidget.getId() == itemWidget.getWidget().getId();
                }

				return inventoryWidget.getId() == itemWidget.getWidget().getId();
			}
		}
		return true;
	}

    private int getProfit(int itemId, int gePrice)
    {

        ItemComposition itemDef = itemManager.getItemComposition(itemId);

        int haPrice = itemDef.getHaPrice();

        int fireRunePrice = itemManager.getItemPrice(ItemID.FIRE_RUNE);
        int natureRunePrice;
        if (config.useGE())
        {
            natureRunePrice = itemManager.getItemPrice(ItemID.NATURE_RUNE);
        }
        else
        {
            natureRunePrice = config.overridePrice();
        }
        int fireRuneMultiplier = 0;
        if (config.fireRuneSource() == FireRuneSource.RUNES) {
            fireRuneMultiplier = 5;
        }

        double natureRuneMultiplier = 1.0;
        if (config.useBryoStaff()) {
            natureRuneMultiplier = 0.9375;
        }

        int castCost = (fireRunePrice * fireRuneMultiplier) + (int) Math.ceil(natureRunePrice * natureRuneMultiplier);

        if (config.useGEPrices())
        {
            return haPrice - gePrice - castCost;
        }
        else
        {
            return haPrice - castCost;
        }
    }

    private boolean isSellable(int gePrice) { return (gePrice > 0); }

    private Color getColor(int profitPerCast, boolean isSellable)
    {
        if (!isSellable) {
            return config.getUnsellableColour();
        }

        if (config.useGradientMode()) {
            double percent = Math.min(((double) profitPerCast) / config.highProfitValue(), 1.0);

            return getGradientColor(config.getColour(), config.getHighProfitColour(), percent);
        } else {
            if (profitPerCast >= config.highProfitValue()) {
                return config.getHighProfitColour();
            } else {
                return config.getColour();
            }
        }
    }

    private Color getGradientColor(Color lowColor, Color highColor, double percent)
    {
        int newRed = findStep(lowColor.getRed(), highColor.getRed(), percent);
        int newGreen = findStep(lowColor.getGreen(), highColor.getGreen(), percent);
        int newBlue = findStep(lowColor.getBlue(), highColor.getBlue(), percent);

        return new Color(newRed, newGreen, newBlue);
    }

    private int findStep(int low, int high, double percent)
    {
        return (int) (low + (high-low)*percent);
    }
}

package com.highalchighlight.config;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum FireRuneSource {
    STAFF("Fire Staff"),
    TOME("Tome of Fire"),
    RUNES("Fire Runes");

    private final String name;

    @Override
    public String toString()
    {
        return name;
    }
}

package com.highalchighlight;

import lombok.AllArgsConstructor;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import com.highalchighlight.config.FireRuneSource;

import java.awt.Color;

@ConfigGroup("highalchighlight")
public interface HighAlcHighlightConfig extends Config
{
	@ConfigItem(
		position = 1,
		keyName = "usingBryo",
		name = "Using Bryophyta's Staff",
		description = "Configures if you are using Bryophyta's Staff."
	)
	default boolean useBryoStaff() {return false;}

	@ConfigItem(
		position = 2,
		keyName = "fireRuneSource",
		name = "Source of Fire Runes",
		description = "Configures what source of fire runes you are using."
	)
	default FireRuneSource fireRuneSource() { return FireRuneSource.STAFF; }

	@ConfigItem(
			position = 3,
			keyName = "useGE",
			name = "Use GE Price for Nature Runes",
			description = "Fetch the price of Nature Runes from the GE (Ironmen should set this to off)"
	)
	default boolean useGE() {return true;}

	@ConfigItem(
			position = 4,
			keyName = "useGEPrices",
			name = "Use GE Price for Item",
			description = "Fetch the price of the item for High Alc calculation, otherwise just uses HA Value - Cast Cost"
	)
	default boolean useGEPrices() {return true;}

	@ConfigItem(
			position = 5,
			keyName = "overridePrice",
			name = "Nature rune cost",
			description = "If the Nature Rune GE price is not used this is the price for Nature Runes that will be used."
	)
	default int overridePrice() {return 203;}

	@ConfigItem(
		position = 6,
		keyName = "useGradientMode",
		name = "Gradient Mode",
		description = "Enabling this setting will cause items to be highlighted in a gradient color from your Highlight Colour to your High-Profit Colour based on profitability."
	)
	default boolean useGradientMode() {return true;}

	@ConfigItem(
		position = 7,
		keyName = "HighlightColour",
		name = "Highlight Colour",
		description = "Highlight colour of profitable items"
	)
	default Color getColour() {return Color.WHITE;}

	@ConfigItem(
			position = 8,
			keyName = "highProfitValue",
			name = "High-Profit Threshold",
			description = "The price for high-profit highlighting."
	)
	default int highProfitValue() { return 300; }

	@ConfigItem(
			position = 9,
			keyName = "highProfitColour",
			name = "High-Profit Colour",
			description = "Highlight colour of items that are high-profit."
	)
	default Color getHighProfitColour() {return Color.GREEN;}

	@ConfigItem(
			position = 10,
			keyName = "highlightUnsellables",
			name = "Highlight Unsellables",
			description = "If enabled, highlights items that would make a profit but cannot be sold on the GE"
	)
	default boolean highlightUnsellables() {return true;}

	@ConfigItem(
		position = 11,
		keyName = "unsellableHighlightColour",
		name = "Unsellables Colour",
		description = "Colour to show if Highlight Unsellables is checked"
	)
	default Color getUnsellableColour() {return Color.YELLOW;}

	@AllArgsConstructor
	enum HighlightLocationType
	{
		BOTH("Both"),
		BANK("Bank"),
		INVENTORY("Inventory");

		private final String value;

		@Override
		public String toString()
		{
			return value;
		}
	}

	@ConfigItem(
		position = 3,
		keyName = "highlightLocation",
		name = "Highlight",
		description = "Colour to show if Highlight Unsellables is checked"
	)
	default HighlightLocationType getHighlightLocation() {return HighlightLocationType.BOTH;}
}

package com.highalchighlight;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.menus.MenuManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
		name = "High Alc Profit",
		description = "Highlights any item in your backpack or bank that would be profit to high alc",
		tags = {"highlight", "items", "overlay"},
		enabledByDefault = false
)
public class HighAlcHighlightPlugin extends Plugin {
	@Inject
	private Client client;

	@Inject
	private ConfigManager configManager;

	@Inject
	private HighAlcHighlightConfig config;

	@Inject
	private MenuManager menuManager;

	@Inject
	private HighAlcHighlightOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	@Provides
	HighAlcHighlightConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(HighAlcHighlightConfig.class);
	}

	@Override
	protected void startUp() throws Exception {
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception {
		overlayManager.remove(overlay);
	}
}

