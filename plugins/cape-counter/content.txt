package com.CapeCounterPlugin;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CapeCounterPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CapeCounterPlugin.class);
		RuneLite.main(args);
	}
}
package com.CapeCounterPlugin;

import com.google.inject.Inject;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.ComponentOrientation;
import net.runelite.client.ui.overlay.components.ImageComponent;

import java.awt.*;
import java.util.Collections;

import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class CapeCounterOverlay extends OverlayPanel {

	private final CapeCounterPlugin plugin;
	private final CapeCounterConfig config;
	private final ItemManager manager;

	@Inject
	private CapeCounterOverlay(CapeCounterPlugin plugin, CapeCounterConfig config, ItemManager manager) {
		super(plugin);
		setPosition(OverlayPosition.TOP_LEFT);
		setPriority(OverlayPriority.LOW);
		this.plugin = plugin;
		this.config = config;
		this.manager = manager;
		panelComponent.setWrap(true);
		panelComponent.setOrientation(ComponentOrientation.HORIZONTAL);
		getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Cape Counter overlay"));
	}

	@Override
	public Dimension render(Graphics2D graphics) {

		for (Capes cape : Capes.values()) {
			int count = Collections.frequency(plugin.getPlayerCapes().values(), cape.getItemId());
			if (count >= config.getMinimumCapeCount()) {
				panelComponent.getChildren().add(new ImageComponent(manager.getImage(cape.getItemId(), count, true)));
			}
		}

		return super.render(graphics);
	}

}

package com.CapeCounterPlugin;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;

@ConfigGroup("capeCounter")
public interface CapeCounterConfig extends Config {
	@Range(
			min = 1
	)
	@ConfigItem(
			keyName = "minimumCapeCount",
			name = "Minimum Cape Count",
			description = "Configures the minimum number of capes which must be present before being displayed.",
			position = 1
	)
	default int getMinimumCapeCount() {
		return 1;
	}
}

package com.CapeCounterPlugin;

import lombok.Getter;

public enum Capes {
	RED_CAPE(1007),
	BLACK_CAPE(1019),
	BLUE_CAPE(1021),
	YELLOW_CAPE(1023),
	GREEN_CAPE(1027),
	PURPLE_CAPE(1029),
	ORANGE_CAPE(1031),
	BLACK_CLAN_CLOAK(25712),
	ORANGE_CLAN_CLOAK(25714),
	BLUE_CLAN_CLOAK(25715),
	RED_CLAN_CLOAK(25716),
	GREEN_CLAN_CLOAK(25717),
	YELLOW_CLAN_CLOAK(25718),
	LIGHT_BLUE_CLAN_CLOAK(25719),
	PURPLE_CLAN_CLOAK(25720);

	@Getter
	private int itemId;

	Capes(int itemId) {
		this.itemId = itemId;
	}
}

package com.CapeCounterPlugin;

import com.google.inject.Provides;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Player;
import net.runelite.api.events.PlayerChanged;
import net.runelite.api.events.PlayerDespawned;
import net.runelite.api.events.PlayerSpawned;
import net.runelite.api.kit.KitType;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;
import java.util.HashMap;
import java.util.Map;

@Slf4j
@PluginDescriptor(
		name = "Cape Counter"
)
public class CapeCounterPlugin extends Plugin {
	@Getter(AccessLevel.PACKAGE)
	private final Map<Player, Integer> playerCapes = new HashMap<>();
	@Inject
	private Client client;
	@Inject
	private CapeCounterConfig config;
	@Inject
	private OverlayManager overlayManager;
	@Inject
	private CapeCounterOverlay capeCounterOverlay;

	protected void startUp() {
		this.overlayManager.add(this.capeCounterOverlay);
	}

	protected void shutDown() {
		this.overlayManager.remove(this.capeCounterOverlay);
	}

	@Provides
	CapeCounterConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(CapeCounterConfig.class);
	}

	@Subscribe
	public void onPlayerSpawned(PlayerSpawned event) {
		final Player player = event.getPlayer();
		if (doesPlayerHaveCape(player)) {
			playerCapes.put(player, player.getPlayerComposition().getEquipmentId(KitType.CAPE));
		}
	}

	@Subscribe
	public void onPlayerDespawned(PlayerDespawned playerDespawned) {
		final Player player = playerDespawned.getPlayer();
		playerCapes.remove(player);
	}

	@Subscribe
	public void onPlayerChanged(PlayerChanged playerChanged) {
		playerCapes.remove(playerChanged.getPlayer());
		if (doesPlayerHaveCape(playerChanged.getPlayer())) {
			playerCapes.put(playerChanged.getPlayer(), playerChanged.getPlayer().getPlayerComposition().getEquipmentId(KitType.CAPE));
		}
	}

	private boolean doesPlayerHaveCape(Player player) {
		if (player.getPlayerComposition().getEquipmentId(KitType.CAPE) == -1) {
			return false;
		}
		for (Capes cape : Capes.values()) {
			if (player.getPlayerComposition().getEquipmentId(KitType.CAPE) == cape.getItemId()) {
				return true;
			}
		}
		return false;
	}

}

