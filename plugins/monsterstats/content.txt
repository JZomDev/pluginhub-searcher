package com.monsterstats;

import lombok.extern.slf4j.Slf4j;

import java.util.ArrayList;
import java.util.List;

@Slf4j
public class NPCDataCleaner {

    public static String cleanData(String start) {
        if (start == null || start.trim().isEmpty()) {
            return "?";
        }
        return getFirstValue(start.replace("\"", "").trim());
    }

    public static List<String> parseNPCStringList(String input) {
        List<String> result = new ArrayList<>();
        if (input == null || input.isEmpty() || input.equals("?")) {
            result.add("No Data");
            return result;
        }
        if (input.charAt(0) =='\"') {
            input = input.split("\"", 2)[1];
        }
        String[] parts = input.split(",");
        for (String part : parts) {
            result.add(part.trim());
        }
        return result;
    }

    public static List<Integer> parseNPCIDs(String input) {
        List<Integer> result = new ArrayList<>();
        if (input == null || input.isEmpty() || input.equals("?")) {
            result.add(-1);
            return result;
        }
        if (input.charAt(0) =='\"') {
            input = input.split("\"", 2)[1];
        }
        // Split the input string by commas
        String[] parts = input.split(",");

        // Parse each part into an integer and add to the result list
        for (String part : parts) {
            try {
                result.add(Integer.parseInt(part.trim()));
            } catch (NumberFormatException e) {
                // Handle the case where part is not a valid integer
                log.debug("Invalid number format in NPC IDs: " + part, e);
                List<Integer> invalidResult = new ArrayList<>();
                invalidResult.add(-1);
                return invalidResult;
            }
        }
        return result;
    }

    public static String cleanElementalWeakness(String start) {
        if (start == null || start.trim().isEmpty()) {
            return "None";
        }
        return getFirstValue(start.replace("\"", "").trim());
    }

    public static String cleanElementalWeaknessPercent(String start) {
        if (start == null || start.trim().isEmpty()) {
            return "0";
        }

        String cleanedValue = getFirstValue(start.replace("\"", "").trim());

        try {
            // Try to parse the cleaned value to an integer
            Integer.parseInt(cleanedValue);
        } catch (NumberFormatException e) {
            // If parsing fails, set the value to 0
            cleanedValue = "0";
        }

        return cleanedValue;
    }

    private static String getFirstValue(String input) {
        if (input.contains(",")) {
            return input.split(",")[0].trim();
        }
        return input;
    }
}


package com.monsterstats;

import com.google.inject.Inject;

import java.awt.*;
import java.awt.image.BufferedImage;

import net.runelite.api.*;
import net.runelite.api.Point;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.*;
import net.runelite.client.ui.overlay.components.ComponentOrientation;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;
import net.runelite.client.util.ImageUtil;

public class MonsterStatsOverlay extends Overlay
{
    private final MonsterStatsPlugin plugin;
    private final TooltipManager tooltipManager;
    private final Client client;

    final BufferedImage stabIcon;
    final BufferedImage crushIcon;
    final BufferedImage slashIcon;
    final BufferedImage standardIcon;
    final BufferedImage heavyIcon;
    final BufferedImage lightIcon;
    final BufferedImage elementalIcon;
    final BufferedImage magicIcon;
    final BufferedImage fireIcon;
    final BufferedImage waterIcon;
    final BufferedImage airIcon;
    final BufferedImage earthIcon;
    final BufferedImage maxHitIcon;
    final BufferedImage attackStyleIcon;

    @Inject
    MonsterStatsOverlay(MonsterStatsPlugin plugin, Client client, TooltipManager tooltipManager)
    {
        this.plugin = plugin;
        this.client = client;
        this.tooltipManager = tooltipManager;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        stabIcon = ImageUtil.loadImageResource(getClass(),"/White_dagger.png");
        crushIcon = ImageUtil.loadImageResource(getClass(),"/White_warhammer.png");
        slashIcon = ImageUtil.loadImageResource(getClass(),"/White_scimitar.png");
        standardIcon = ImageUtil.loadImageResource(getClass(),"/Steel_arrow_5.png");
        heavyIcon = ImageUtil.loadImageResource(getClass(),"/Steel_bolts_5.png");
        lightIcon = ImageUtil.loadImageResource(getClass(),"/Steel_dart.png");
        elementalIcon = ImageUtil.loadImageResource(getClass(),"/Pure_essence.png");
        magicIcon = ImageUtil.loadImageResource(getClass(),"/Magic_icon.png");
        fireIcon = ImageUtil.loadImageResource(getClass(), "/Fire_rune.png");
        waterIcon = ImageUtil.loadImageResource(getClass(), "/Water_rune.png");
        airIcon = ImageUtil.loadImageResource(getClass(), "/Air_rune.png");
        earthIcon = ImageUtil.loadImageResource(getClass(), "/Earth_rune.png");
        maxHitIcon = ImageUtil.loadImageResource(getClass(), "/Damage_hitsplat_(max_hit).png");
        attackStyleIcon = ImageUtil.loadImageResource(getClass(), "/Combat_icon.png");
    }

    public BufferedImage getElementalWeaknessIcon(String elementalWeakness)
    {
        switch (elementalWeakness)
        {
            case "Air":
                return airIcon;
            case "Water":
                return waterIcon;
            case "Fire":
                return fireIcon;
            case "Earth":
                return earthIcon;
            default:
                return elementalIcon;
        }
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (plugin.hoveredNPC != null)
        {
            renderNpc(graphics, plugin.hoveredNPC);
        }
        return null;
    }

    private boolean isHoveringGameScene()
    {
        MenuEntry[] menuEntries = client.getMenuEntries();
        for (int i = menuEntries.length - 1; i >= 0; i--)
        {
            if (MenuAction.WALK.equals(menuEntries[i].getType()))
            {
                return true;
            }
        }
        return false;
    }

    private void renderNpc(Graphics2D graphics, NPC npc)
    {
        if (npc == null || npc.getCombatLevel() <= 0)
        {
            return;
        }

        Integer npcID = npc.getId();
        NPCStats idStats = NPCDataLoader.getIDStats(npcID);

        if (isHoveringGameScene())
        {
            renderTooltip(graphics, idStats);
        }
    }

private void renderTooltip(Graphics2D graphics, NPCStats stats)
{
    Point mousePosition = client.getMouseCanvasPosition();
    // Create a horizontal panel for icons and stats
    PanelComponent rowPanel = new PanelComponent();
    rowPanel.setPreferredLocation(new java.awt.Point(mousePosition.getX(), mousePosition.getY()));
    rowPanel.setOrientation(ComponentOrientation.HORIZONTAL);
    rowPanel.setBorder(new Rectangle(2,2,305,55)); //Set border of resulting tooltip
    rowPanel.setGap(new java.awt.Point(2, 0));  // Add horizontal gap between components

    tooltipManager.addFront(new Tooltip(rowPanel));
    rowPanel.getChildren().add(createIconWithText( (stabIcon), stats.getStabDefence()));
    rowPanel.getChildren().add(createIconWithText( (crushIcon), stats.getCrushDefence()));
    rowPanel.getChildren().add(createIconWithText( (slashIcon), stats.getSlashDefence()));
    rowPanel.getChildren().add(createIconWithText( (getElementalWeaknessIcon(stats.getElementalWeakness())), stats.getElementalPercent() + "%"));
    rowPanel.getChildren().add(createIconWithText( (magicIcon), stats.getMagicDefence()));
    rowPanel.getChildren().add(createIconWithText( (standardIcon), stats.getStandardDefence()));
    rowPanel.getChildren().add(createIconWithText( (heavyIcon), stats.getHeavyDefence()));
    rowPanel.getChildren().add(createIconWithText( (lightIcon), stats.getLightDefence()));

}

    private PanelComponent createIconWithText(BufferedImage icon, String text)
    {
        PanelComponent iconWithTextPanel = new PanelComponent();
        iconWithTextPanel.setOrientation(ComponentOrientation.VERTICAL);
        iconWithTextPanel.setBorder(new Rectangle(2,2,34,50)); //set border of individual icon/value pair
        iconWithTextPanel.setGap(new java.awt.Point(0, 3));  // Add vertical gap between icon and text
        iconWithTextPanel.getChildren().add(new ImageComponent(icon)); //add icon
        LineComponent valueLine = LineComponent.builder().left(" ").right("").left(text).build();
        iconWithTextPanel.getChildren().add(valueLine);

        return iconWithTextPanel;
    }

}

package com.monsterstats;

import lombok.extern.slf4j.Slf4j;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Slf4j
public class NPCDataLoader {

    private static final String CSV_FILE = "/monsterdata.csv";
    private static final Map<String, NPCStats> npcData = new HashMap<>();
    private static final Map<Integer, NPCStats> npcIDData = new HashMap<>();

    static {
        try (InputStream inputStream = NPCDataLoader.class.getResourceAsStream(CSV_FILE)) {
            if (inputStream == null) {
                log.warn("Could not find file: {}", CSV_FILE);
            } else {
                try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        String[] fields = parseCSVLine(line);
                        boolean hasAltForms = false;
                        if (fields.length < 13) {
                            // Fill missing fields with '?'
                            fields = fillMissingFields(fields);
                        }
                        String name = NPCDataCleaner.cleanData(fields[0]);
                        String realName = name;
                        if (name.contains("#")) {
                            hasAltForms = true;
                            name = name.split("#", 2)[0];
                        }
                        // Exclude any names containing "(Deadman: Apocalypse)"
                        if (name.toLowerCase().contains("(deadman: apocalypse)")) {
                            continue;
                        }

                        List<Integer> npcIDs = NPCDataCleaner.parseNPCIDs(fields[10]);
                        if (npcIDs.get(0) == -1) { //if we don't have an npc id, we skip entry
                            continue;
                        }
                        String elementalWeakness = NPCDataCleaner.cleanElementalWeakness(fields[1]);
                        String elementalPercent = NPCDataCleaner.cleanElementalWeaknessPercent(fields[2].toLowerCase());
                        String magicDefence = NPCDataCleaner.cleanData(fields[3]);
                        String crushDefence = NPCDataCleaner.cleanData(fields[4]);
                        String stabDefence = NPCDataCleaner.cleanData(fields[5]);
                        String slashDefence = NPCDataCleaner.cleanData(fields[6]);
                        String standardDefence = NPCDataCleaner.cleanData(fields[7]);
                        String heavyDefence = NPCDataCleaner.cleanData(fields[8]);
                        String lightDefence = NPCDataCleaner.cleanData(fields[9]);

                        List<String> maxHits = NPCDataCleaner.parseNPCStringList(fields[11]);
                        List<String> attackStyle = NPCDataCleaner.parseNPCStringList(fields[12]);


                        if (!npcIDs.isEmpty()) {
                            for (Integer id : npcIDs) { //create a new NPC object for each npc id with their realName, then we use the prefix of realName to find the main object in our other Map
                                NPCStats npcStats = new NPCStats(realName, name, elementalWeakness, elementalPercent, crushDefence, stabDefence, slashDefence, standardDefence, heavyDefence, lightDefence, magicDefence, id, hasAltForms, maxHits, attackStyle);
                                npcIDData.put(id, npcStats); //add to the map the id to this npcStats object. We add the full data because for mouseover tooltips we can use the data here and not search the other map.
                            }
                        }
                        NPCStats npcStats = new NPCStats(realName, name, elementalWeakness, elementalPercent, crushDefence, stabDefence, slashDefence, standardDefence, heavyDefence, lightDefence, magicDefence, npcIDs.get(0), hasAltForms, maxHits, attackStyle);
                        if (hasAltForms && npcData.containsKey(name)) { //if this monster has alternate forms with different stats and the data entry already exists
                            npcData.get(name).addForm(npcStats); //we then add this data to the base entry in alternate forms
                        } else {
                            npcData.put(name, npcStats);
                        }

                    }
                }
            }
        } catch (IOException e) {
            log.warn("Failed to read monster data", e);
        }
    }

    private static String[] fillMissingFields(String[] fields) {
        String[] result = new String[13];
        for (int i = 0; i < 13; i++) {
            if (i < fields.length) {
                result[i] = fields[i];
            } else {
                result[i] = "?";
            }
        }
        return result;
    }

    private static String[] parseCSVLine(String line) {
        StringBuilder sb = new StringBuilder();
        boolean inQuotes = false;
        boolean startCollectChar = false;
        char[] chars = line.toCharArray();
        for (char ch : chars) {
            if (inQuotes) {
                startCollectChar = true;
                if (ch == '\"') {
                    inQuotes = false;
                } else {
                    sb.append(ch);
                }
            } else {
                if (ch == '\"') {
                    inQuotes = true;
                    if (startCollectChar) {
                        sb.append('\"');
                    }
                } else if (ch == ',') {
                    sb.append('|'); // Use a different delimiter to split later
                } else {
                    sb.append(ch);
                }
            }
        }
        return sb.toString().split("\\|");
    }

    public static Map<String, NPCStats> getAllNPCStats()
    {
        return npcData;
    }

    public static NPCStats getNPCStats(String npcName)
    {
        return npcData.get(npcName);
    }

    public static NPCStats getIDStats(Integer npcID) {
        return npcIDData.get(npcID);
    }
}

package com.monsterstats;

import javax.inject.Inject;
import javax.swing.*;

import com.google.inject.Provides;
import net.runelite.api.*;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.client.util.ImageUtil;

@PluginDescriptor(
		name = "Monster Stats",
		description = "Shows monster stats and other info with search functionality",
		tags = {"npc", "stats", "tooltip", "search", "defensive", "defence", "weakness", "elemental", "weaknesses", "bestiary", "monsters", "wiki"}
)
public class MonsterStatsPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private MonsterStatsOverlay monsterStatsOverlay;

	@Inject
	private MonsterStatsConfig config;

	@Inject
	private ConfigManager configManager;

	@Inject
	private ClientThread clientThread;

	@Inject
	private ClientToolbar clientToolbar;

	NPC hoveredNPC;

	private NavigationButton navButton;
	private MonsterStatsPanel monsterStatsPanel;
	private static final String STATS_OPTION = "Stats";

	@Provides
	 MonsterStatsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(MonsterStatsConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(monsterStatsOverlay);

		if (config.enableSidePanel()) {
			addNavBar();
		}
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(monsterStatsOverlay);
		clientToolbar.removeNavigation(navButton);
		monsterStatsPanel = null;
	}

	public void addNavBar() {
		monsterStatsPanel = new MonsterStatsPanel(monsterStatsOverlay, ImageUtil.loadImageResource(getClass(),"/icon.png"));
		navButton = NavigationButton.builder()
				.tooltip("Monster Stats")
				.icon(ImageUtil.loadImageResource(getClass(),"/icon.png"))
				.panel(monsterStatsPanel)
				.build();

		clientToolbar.addNavigation(navButton);
	}

	public void removeNavBar()
	{
		if (navButton != null && monsterStatsPanel != null) {
			clientToolbar.removeNavigation(navButton);
			navButton = null;
			monsterStatsPanel = null;
		}
	}

	@Subscribe()
	public void onConfigChanged(ConfigChanged event) { //remove the nav button if the side panel gets disabled
		String configName = event.getKey();
		String configGroup = event.getGroup();
		if (configName.equals("enableSidePanel") && configGroup.equals("monsterstats")) {
			boolean enableSidePanel = Boolean.parseBoolean(event.getNewValue());
			if (enableSidePanel && navButton == null && monsterStatsPanel == null) {
				addNavBar();
			} else {
				removeNavBar();
				configManager.setConfiguration("monsterstats", "showStatsMenuOption", false); //also disable the right click menu, as this relies on side panel.
			}
		}
	}

	@Subscribe
	public void onMenuEntryAdded(MenuEntryAdded event)
	{
		if (config.enableSidePanel() && config.showStatsMenuOption() && event.getType() == MenuAction.NPC_SECOND_OPTION.getId() && event.getTarget() != null) //Add Stats option to right clicked NPCs
		{
			client.createMenuEntry(client.getMenuEntries().length)
					.setOption(STATS_OPTION)
					.setTarget(event.getTarget())
					.setIdentifier(event.getIdentifier())
					.setType(MenuAction.RUNELITE)
					.setParam0(event.getActionParam0())
					.setParam1(event.getActionParam1());

		}
		if (config.shiftForTooltip() && !client.isKeyPressed(KeyCode.KC_SHIFT)) //don't add tooltip if shift for tooltip is on
		{
			hoveredNPC = null;
			return;
		}
		if (config.showHoverTooltip()) //if hovering, tooltips are on, and shift for tooltip isn't on then show tooltip.
		{
			MenuEntry entry = event.getMenuEntry();
            hoveredNPC = entry.getNpc();
		}
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event) {
		if (event.getMenuOption().equals(STATS_OPTION)) {
			clientThread.invoke(() -> {
				NPC clickedNPC = client.getTopLevelWorldView().npcs().byIndex(event.getId()); //get the NPC from the MenuOptionClicked event id
				if (clickedNPC != null) {
					NPCStats npcStats = NPCDataLoader.getIDStats(clickedNPC.getId());
					if (npcStats.getName().contains("#")) { //if the name contains a '#' it has alternate forms and we will select this alt form.
						monsterStatsPanel.search(npcStats.getSearchName(), true, npcStats.getName().split("#", 2)[1]);
					} else { //otherwise we just select the default of that monster.
						monsterStatsPanel.search(npcStats.getSearchName(), true, "");
					}
					SwingUtilities.invokeLater(() -> clientToolbar.openPanel(navButton)); // Ensure the panel is opened on EDT
				}
			});

		}
	}
}

package com.monsterstats;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("monsterstats")
public interface MonsterStatsConfig extends Config
{
    @ConfigItem(
            keyName = "showStatsMenuOption",
            name = "Show Stats Menu Option",
            description = "Enable right-click 'Stats' option for NPCs, side panel must also be enabled."
    )
    default boolean showStatsMenuOption()
    {
        return true;
    }

    @ConfigItem(
            keyName = "showHoverTooltip",
            name = "Show Hover Tooltip",
            description = "Show a tooltip with elemental weakness and weakness percent when hovering over monsters."
    )
    default boolean showHoverTooltip()
    {
        return true;
    }

    @ConfigItem(
            keyName = "shiftForTooltip",
            name = "Shift for Tooltip",
            description = "Hover tooltip only appears when the Shift key is held."
    )
    default boolean shiftForTooltip()
    {
        return true;
    }

    @ConfigItem(
            keyName = "enableSidePanel",
            name = "Enable Side Panel",
            description = "Enables the searchable side panel to display more monster stats."
    )
    default boolean enableSidePanel() { return true; }
}

//MIT License

//Copyright (c) 2023 Rob Camick

//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
package com.monsterstats;

import java.awt.*;

public class WrapLayout extends FlowLayout {
    public WrapLayout() {
        super(FlowLayout.CENTER);
    }

    public WrapLayout(int align) {
        super(align);
    }

    public WrapLayout(int align, int hgap, int vgap) {
        super(align, hgap, vgap);
    }

    @Override
    public Dimension preferredLayoutSize(Container target) {
        return layoutSize(target, true);
    }

    @Override
    public Dimension minimumLayoutSize(Container target) {
        return layoutSize(target, false);
    }

    private Dimension layoutSize(Container target, boolean preferred) {
        synchronized (target.getTreeLock()) {
            int targetWidth = target.getSize().width;

            if (targetWidth == 0) {
                targetWidth = Integer.MAX_VALUE;
            }

            int hgap = getHgap();
            int vgap = getVgap();
            Insets insets = target.getInsets();
            int horizontalInsetsAndGap = insets.left + insets.right + (hgap * 2);
            int maxWidth = targetWidth - horizontalInsetsAndGap;

            Dimension dim = new Dimension(0, 0);
            int rowWidth = 0;
            int rowHeight = 0;

            int nmembers = target.getComponentCount();

            for (int i = 0; i < nmembers; i++) {
                Component m = target.getComponent(i);

                if (m.isVisible()) {
                    Dimension d = preferred ? m.getPreferredSize() : m.getMinimumSize();

                    if (rowWidth + d.width > maxWidth) {
                        addRow(dim, rowWidth, rowHeight);
                        rowWidth = 0;
                        rowHeight = 0;
                    }

                    if (rowWidth != 0) {
                        rowWidth += hgap;
                    }

                    rowWidth += d.width;
                    rowHeight = Math.max(rowHeight, d.height);
                }
            }

            addRow(dim, rowWidth, rowHeight);

            dim.width += horizontalInsetsAndGap;
            dim.height += insets.top + insets.bottom + vgap * 2;

            return dim;
        }
    }

    private void addRow(Dimension dim, int rowWidth, int rowHeight) {
        dim.width = Math.max(dim.width, rowWidth);
        if (dim.height > 0) {
            dim.height += getVgap();
        }
        dim.height += rowHeight;
    }
}

package com.monsterstats;

import net.runelite.client.ui.PluginPanel;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import net.runelite.client.ui.ColorScheme;

public class MonsterStatsPanel extends PluginPanel
{
    private final JTextField searchField;
    private final JPanel resultsPanel;
    private final JPanel dataPanel;
    private final JPanel buttonPanel;
    private final JPanel maxHitTitlePanel;
    private final JPanel maxHitListPanel;
    private final JPanel attackStyleTitlePanel;
    private final JPanel attackStyleListPanel;
    private final JTextPane monsterTextPane;
    private final MonsterStatsOverlay monsterStatsOverlay;

    public MonsterStatsPanel(MonsterStatsOverlay monsterStatsOverlay, BufferedImage titleIcon)
    {
        this.monsterStatsOverlay = monsterStatsOverlay;

        setLayout(new BorderLayout());

        // Create a panel to hold the title and search field
        JPanel northPanel = new JPanel();
        northPanel.setLayout(new BoxLayout(northPanel, BoxLayout.Y_AXIS));

        // Add title with icon
        JPanel titlePanel = new JPanel();
        titlePanel.setLayout(new BoxLayout(titlePanel, BoxLayout.X_AXIS));
        titlePanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        titlePanel.setBorder(new EmptyBorder(5,5,5,5));
        titlePanel.setAlignmentX(Component.CENTER_ALIGNMENT);

        JLabel titleLabel = new JLabel("Monster Stats");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 16));
        titlePanel.add(new JLabel(new ImageIcon(titleIcon)));
        titlePanel.add(Box.createRigidArea(new Dimension(5, 0))); // Add some space between icon and title
        titlePanel.add(titleLabel);
        titlePanel.add(Box.createRigidArea(new Dimension(5, 0))); // Add some space between icon and title
        titlePanel.add(new JLabel(new ImageIcon(titleIcon)));
        // Add the titlePanel to the northPanel
        northPanel.add(titlePanel);
        northPanel.add(Box.createRigidArea(new Dimension(0, 10))); // Add space between title and search field

        // Add search field
        searchField = new JTextField();
        searchField.getDocument().addDocumentListener(new DocumentListener()
        {
            @Override
            public void insertUpdate(DocumentEvent e)
            {
                search(searchField.getText(), false, "");
            }

            @Override
            public void removeUpdate(DocumentEvent e)
            {
                search(searchField.getText(), false, "");
            }

            @Override
            public void changedUpdate(DocumentEvent e)
            {
                search(searchField.getText(), false, "");
            }
        });

        // Add the searchField to the northPanel
        northPanel.add(searchField);
        northPanel.add(Box.createRigidArea(new Dimension(0, 10))); // Add space between search field and results

        // Add the northPanel to the main panel
        add(northPanel, BorderLayout.NORTH);

        // Create a central panel to hold results and data panels with spacing
        JPanel centerPanel = new JPanel();
        centerPanel.setLayout(new BoxLayout(centerPanel, BoxLayout.Y_AXIS));


        resultsPanel = new JPanel();
        resultsPanel.setLayout(new BoxLayout(resultsPanel, BoxLayout.Y_AXIS));

        JScrollPane resultsScrollPane = new JScrollPane(resultsPanel);
        resultsScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        resultsScrollPane.setPreferredSize(new Dimension(300, 200));  // Set max height for the results panel

        JPanel monsterLabelPanel = new JPanel();
        monsterLabelPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        monsterLabelPanel.setBorder(new EmptyBorder(5,0,5,0));
        monsterLabelPanel.setLayout(new BoxLayout( monsterLabelPanel, BoxLayout.X_AXIS));
        monsterLabelPanel.setAlignmentX(Component.CENTER_ALIGNMENT);

        monsterTextPane = new JTextPane(); //To create wrapping text, we create a text pane with special document styling.
        monsterTextPane.setText("Monster Stats");
        monsterTextPane.setFont(new Font("Arial", Font.BOLD, 14));
        monsterTextPane.setEditable(false);
        monsterTextPane.setOpaque(false);
        monsterTextPane.setAlignmentX(Component.CENTER_ALIGNMENT);
        monsterTextPane.setAlignmentY(Component.CENTER_ALIGNMENT);
        StyledDocument doc = monsterTextPane.getStyledDocument();
        SimpleAttributeSet center = new SimpleAttributeSet();
        StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);
        doc.setParagraphAttributes(0, doc.getLength(), center, false);

        monsterLabelPanel.add(new JLabel(new ImageIcon(titleIcon))); //Create Title area with our icon on either side of our wrap-able title object.
        monsterLabelPanel.add(Box.createRigidArea(new Dimension(5, 0)));
        monsterLabelPanel.add(monsterTextPane);
        monsterLabelPanel.add(Box.createRigidArea(new Dimension(5, 0)));
        monsterLabelPanel.add(new JLabel(new ImageIcon(titleIcon)));

        dataPanel = new JPanel();
        dataPanel.setLayout(new BoxLayout(dataPanel, BoxLayout.Y_AXIS));

        buttonPanel = new JPanel(new WrapLayout(FlowLayout.CENTER));
        JScrollPane buttonPane = new JScrollPane(buttonPanel);
        buttonPane.setPreferredSize(new Dimension(100, 100));

        //Building the max hit title panel
        maxHitTitlePanel = new JPanel();
        buildTitlePanel(maxHitTitlePanel, "Max Hit", new ImageIcon(monsterStatsOverlay.maxHitIcon));

        //Building the max hit list panel
        maxHitListPanel = new JPanel();
        JScrollPane maxHitScrollPane = buildListPanel(maxHitListPanel);


        //build attack style title panel
        attackStyleTitlePanel = new JPanel();
        buildTitlePanel(attackStyleTitlePanel, "Attack Style", new ImageIcon(monsterStatsOverlay.attackStyleIcon));

        //build attack style list panel
        attackStyleListPanel = new JPanel();
        JScrollPane attackStyleScrollPane = buildListPanel(attackStyleListPanel);

        //Adding everything to main center panel
        centerPanel.add(resultsScrollPane);
        centerPanel.add(Box.createRigidArea(new Dimension(0, 10))); //Spacer
        centerPanel.add(monsterLabelPanel);
        centerPanel.add(Box.createRigidArea(new Dimension(0, 10)));
        centerPanel.add(buttonPane);
        centerPanel.add(Box.createRigidArea(new Dimension(0, 10)));
        centerPanel.add(new JScrollPane(dataPanel));
        centerPanel.add(Box.createRigidArea(new Dimension(0, 10)));
        centerPanel.add(maxHitTitlePanel);
        centerPanel.add(Box.createRigidArea(new Dimension(0, 10)));
        centerPanel.add(maxHitScrollPane);
        centerPanel.add(Box.createRigidArea(new Dimension(0, 10)));
        centerPanel.add(attackStyleTitlePanel);
        centerPanel.add(Box.createRigidArea(new Dimension(0, 10)));
        centerPanel.add(attackStyleScrollPane);

        add(centerPanel, BorderLayout.CENTER);

    }

    public void search(String searchString, boolean selectFirstMatch, String altForm)
    {
        List<NPCStats> results = NPCDataLoader.getAllNPCStats().entrySet().stream()
                .filter(entry -> entry.getKey().toLowerCase().contains(searchString.toLowerCase()))
                .sorted((a, b) -> {
                    if (a.getKey().equalsIgnoreCase(searchString)) return -1;
                    if (b.getKey().equalsIgnoreCase(searchString)) return 1;
                    return a.getKey().compareToIgnoreCase(b.getKey());
                })
                .map(Map.Entry::getValue)
                .collect(Collectors.toList());

        resultsPanel.removeAll();

        for (NPCStats npcStats : results)
        {
            JButton resultButton = new JButton(npcStats.getSearchName());
            resultButton.setAlignmentX(Component.LEFT_ALIGNMENT);
            resultButton.setHorizontalTextPosition(0);
            resultButton.setMaximumSize(new Dimension(220, resultButton.getMinimumSize().height)); //Set button to take up width of search results panel
            resultButton.addActionListener(e -> displayStats(npcStats, ""));
            resultsPanel.add(resultButton);
        }

        if (selectFirstMatch && !results.isEmpty())
        {
            displayStats(results.get(0), altForm);
        }

        revalidate();
        repaint();
    }

    private void displayStats(NPCStats npcStats, String altForm)
    {
        dataPanel.removeAll();
        buttonPanel.removeAll();

        JButton firstButton = null;
        NPCStats defaultStats = null;
        NPCStats selectedStats = null;

        if (npcStats.getAltForms() != null && !npcStats.getAltForms().isEmpty()) { //if there is multiple forms to display for a npc
            for (String k : npcStats.getAltForms().keySet()) {
                String parsedKey = k.replace("_", " ");
                JButton formButton = new JButton(parsedKey);
                if (firstButton == null) {
                    firstButton = formButton;
                    defaultStats = npcStats.getAltForms().get(k);
                }
                formButton.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        displayStats(npcStats, k);
                    }
                });
                buttonPanel.add(formButton);
                if (k.equals(altForm)) {
                    formButton.setEnabled(false); //show which button is selected
                }
            }
            if (altForm.isEmpty()) { //if altforms exist, but we don't have one selected, we enable the defaultButton
                firstButton.setEnabled(false);
            }
        } else {
            JButton noForms = new JButton("No Alternate Forms");
            noForms.setEnabled(false);
            buttonPanel.add(noForms);
        }
        if (!altForm.isEmpty()) { //if we are selecting an alt form, get that alt form to display
            selectedStats = npcStats.getAltForms().get(altForm);
        } else if (!npcStats.getAltForms().isEmpty()) { //if there is alt forms, but we aren't selecting one, show default one
            selectedStats = defaultStats;
        } else {
            selectedStats = npcStats; //if we have no alt forms
        }

        // Create the stats panel section by section
        JPanel statsPanel = new JPanel();
        statsPanel.setLayout(new BoxLayout(statsPanel, BoxLayout.Y_AXIS));
        statsPanel.setBorder(new EmptyBorder(5,5,5,5));
        statsPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        addSectionSubTitle(statsPanel, "Melee Defence");
        addVerticalSpacing(statsPanel);
        assert selectedStats != null;
        addIconsAndValues(statsPanel, new BufferedImage[]{monsterStatsOverlay.stabIcon, monsterStatsOverlay.crushIcon, monsterStatsOverlay.slashIcon},
                new String[]{selectedStats.getStabDefence(), selectedStats.getCrushDefence(), selectedStats.getSlashDefence()});

        addVerticalSpacing(statsPanel);

        addSectionSubTitle(statsPanel, "Magic Defence");
        addVerticalSpacing(statsPanel);

        BufferedImage elementalWeakness;
        elementalWeakness = monsterStatsOverlay.getElementalWeaknessIcon(selectedStats.getElementalWeakness());

        addIconsAndValues(statsPanel, new BufferedImage[]{monsterStatsOverlay.magicIcon, elementalWeakness},
                new String[]{selectedStats.getMagicDefence(), selectedStats.getElementalPercent() + "%"});

        addVerticalSpacing(statsPanel);

        addSectionSubTitle(statsPanel, "Ranged Defence");
        addVerticalSpacing(statsPanel);
        addIconsAndValues(statsPanel, new BufferedImage[]{monsterStatsOverlay.standardIcon, monsterStatsOverlay.heavyIcon, monsterStatsOverlay.lightIcon},
                new String[]{selectedStats.getStandardDefence(), selectedStats.getHeavyDefence(), selectedStats.getLightDefence()});

        dataPanel.add(statsPanel);
        monsterTextPane.setText(selectedStats.getSearchName());

        maxHitListPanel.removeAll();
        addListItems(maxHitListPanel,selectedStats.getMaxHits());

        attackStyleListPanel.removeAll();
        addListItems(attackStyleListPanel,selectedStats.getAttackStyles());

        revalidate();
        repaint();
    }

    private void addListItems(JPanel listSection, List<String> listItems) //populate a JPanel with list items
    {
        for (String item : listItems)
        {
            JLabel itemLabel = new JLabel(item);
            itemLabel.setFont(new Font("Arial", Font.PLAIN, 16));
            itemLabel.setBorder(new EmptyBorder(2, 5, 2, 5));
            itemLabel.setHorizontalAlignment(SwingConstants.CENTER); // Align text inside label
            itemLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
            listSection.add(itemLabel);
        }
    }

    private void buildTitlePanel(JPanel panel, String title, ImageIcon icon) //adds individual title sections for other stats
    {
        panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));
        panel.setBorder(new EmptyBorder(5,5,5,5));
        panel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        panel.setAlignmentX(Component.CENTER_ALIGNMENT);
        panel.setPreferredSize(new Dimension(400,50));

        JLabel titleLabel = new JLabel(title);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 20));
        panel.add(new JLabel(icon));
        panel.add(Box.createRigidArea(new Dimension(5, 0)));
        panel.add(titleLabel);
        panel.add(Box.createRigidArea(new Dimension(5, 0)));
        panel.add(new JLabel(icon));
    }

    private JScrollPane buildListPanel(JPanel panel)
    {
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setMaximumSize(new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE));
        panel.setBackground(ColorScheme.DARKER_GRAY_COLOR);

        JScrollPane listScrollPane = new JScrollPane(panel);
        listScrollPane.setPreferredSize(new Dimension(300, 100)); // Shows about 2 entries
        listScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        listScrollPane.setBorder(null);
        return listScrollPane;
    }

    private void addVerticalSpacing(JPanel panel)
    {
        panel.add(Box.createRigidArea(new Dimension(0, 20)));
    }

    private void addIconsAndValues(JPanel panel, BufferedImage[] icons, String[] values) //Adds stat values with corresponding stat icons
    {
        JPanel iconsAndValuesPanel = new JPanel();
        iconsAndValuesPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        iconsAndValuesPanel.setLayout(new GridLayout(2, icons.length, 10, 5)); // 2 rows, n columns, with horizontal and vertical gaps

        for (BufferedImage icon : icons) {
            JLabel iconLabel = new JLabel(new ImageIcon(icon));
            iconLabel.setHorizontalAlignment(SwingConstants.CENTER);
            iconsAndValuesPanel.add(iconLabel);
        }

        for (String value : values) {
            JLabel valueLabel = new JLabel(value);
            valueLabel.setHorizontalAlignment(SwingConstants.CENTER);
            iconsAndValuesPanel.add(valueLabel);
        }

        panel.add(iconsAndValuesPanel);
    }

    private void addSectionSubTitle(JPanel panel, String text) //adds sub titles to the stats section
    {
        JLabel titleLabel = new JLabel(text);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 14));
        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        panel.add(titleLabel);
    }
}

package com.monsterstats;

import lombok.Getter;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

@Getter
public class NPCStats {
    private final String name;
    private final String searchName;
    private final String elementalWeakness;
    private final String elementalPercent;
    private final String crushDefence;
    private final String stabDefence;
    private final String slashDefence;
    private final String standardDefence;
    private final String magicDefence;
    private final String heavyDefence;
    private final String lightDefence;
    private final List<String> maxHits;
    private final List<String> attackStyles;
    private final Integer npcID;
    private final Map<String, NPCStats> altForms = new HashMap<>();

    public NPCStats(String name, String searchName, String elementalWeakness, String elementalPercent, String crushDefence, String stabDefence, String slashDefence, String standardDefence, String heavyDefence, String lightDefence, String magicDefence, Integer npcID, boolean alt, List<String> maxHits, List<String> attackStyles) {
        this.name = name;
        this.searchName = searchName;
        this.elementalWeakness = elementalWeakness;
        this.elementalPercent = elementalPercent;
        this.crushDefence = crushDefence;
        this.stabDefence = stabDefence;
        this.slashDefence = slashDefence;
        this.standardDefence = standardDefence;
        this.magicDefence = magicDefence;
        this.heavyDefence = heavyDefence;
        this.lightDefence = lightDefence;
        this.npcID = npcID;
        if (alt) {
            String altName = name.split("#", 2)[1];
            altForms.put(altName,this);
        }
        this.maxHits = maxHits;
        this.attackStyles = attackStyles;
    }

    public void addForm(NPCStats altForm) {
        String altName = altForm.getName().split("#",2)[1];
        altForms.put(altName, altForm);
    }

}

package com.monsterstats;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class MonsterStatsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(MonsterStatsPlugin.class);
		RuneLite.main(args);
	}
}
