package com.pathfinder;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PathfinderPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PathHighlightPlugin.class);
		RuneLite.main(args);
	}
}
package com.pathfinder;

import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Tile;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.widgets.Widget;
import net.runelite.client.plugins.itemstats.stats.Stats;
import net.runelite.client.ui.overlay.*;
import net.runelite.api.widgets.WidgetInfo;

import javax.inject.Inject;
import java.awt.*;

import static net.runelite.client.plugins.itemstats.Builders.heal;

public class PathHighlightOverlay extends Overlay {
    private final Client client;
    private final PathHighlightConfig config;
    private final PathHighlightPlugin plugin;

    @Inject
    private PathHighlightOverlay(Client client, PathHighlightConfig config, PathHighlightPlugin plugin)
    {
        this.client = client;
        this.config = config;
        this.plugin = plugin;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        setPriority(OverlayPriority.MED);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (!this.plugin.isDisplay()) {
            return null;
        }
        WorldPoint currPoint = client.getLocalPlayer().getWorldLocation();
        Tile selectedTile = client.getSelectedSceneTile();
        if (selectedTile != null && currPoint != null)
        {
            WorldPoint selectedPoint = selectedTile.getWorldLocation();
            int xDist = selectedPoint.getX() - currPoint.getX();
            int yDist = selectedPoint.getY() - currPoint.getY();
            int dx = 0, dy = 0;
            //Figure out which axis the character will walk along,
            //According to whether the x or y-distance to the destination is longer.
            if (Math.abs(xDist) > Math.abs(yDist))
            {
                dx = (int) Math.signum((float) xDist);
            }
            else
            {
                dy = (int) Math.signum((float) yDist);
            }

            // TODO figure out how to detect if the player is actually running
            boolean isRunning = true;

            boolean jumpedOver = isRunning;
            //Character will first walk on an axis until along a diagonal with the destination...
            while (Math.abs(xDist) != Math.abs(yDist))
            {
                currPoint = currPoint.dx(dx).dy(dy);
                LocalPoint pt = LocalPoint.fromWorld(client, currPoint.getX(), currPoint.getY());
                if (!jumpedOver || !config.skipJumpedTiles())
                    renderTile(graphics, pt, config.highlightPathColor());
                jumpedOver ^= isRunning; // Flip only if running;
                xDist = selectedPoint.getX() - currPoint.getX();
                yDist = selectedPoint.getY() - currPoint.getY();
            }
            //...Then walk diagonally to the destination.
            dx = (int) Math.signum((float) xDist);
            dy = (int) Math.signum((float) yDist);
            while (xDist != 0 && yDist != 0)
            {
                currPoint = currPoint.dx(dx).dy(dy);
                LocalPoint pt = LocalPoint.fromWorld(client, currPoint.getX(), currPoint.getY());
                if (!config.skipJumpedTiles() || !jumpedOver)
                    renderTile(graphics, pt, config.highlightPathColor());
                jumpedOver ^= isRunning; // Flip only if running;
                xDist = selectedPoint.getX() - currPoint.getX();
                yDist = selectedPoint.getY() - currPoint.getY();
            }

            if (!jumpedOver && config.skipJumpedTiles())
            { // Last tile was jumped over, flag was flipped
                LocalPoint pt = LocalPoint.fromWorld(client, currPoint.getX(), currPoint.getY());
                renderTile(graphics, pt, config.highlightPathColor());
            }
        }
        return null;
    }

    private void renderTile(final Graphics2D graphics, final LocalPoint dest, final Color color)
    {
        if (dest == null)
        {
            return;
        }

        final Polygon poly = Perspective.getCanvasTilePoly(client, dest);

        if (poly == null)
        {
            return;
        }

        OverlayUtil.renderPolygon(graphics, poly, color);
    }
}

package com.pathfinder;

import net.runelite.client.config.*;
import net.runelite.client.util.OSType;

import java.awt.*;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;

@ConfigGroup("pathfinder")
public interface PathHighlightConfig extends Config
{
	@Alpha
	@ConfigItem(
			keyName = "highlightPathColor",
			name = "Path Color",
			description = "Configures the color of the path"
	)
	default Color highlightPathColor()
	{
		return new Color(0, 127, 0, 127);
	}

	@ConfigItem(
			keyName = "skipJumpedTiles",
			name = "Hide Tiles Jumped Over",
			description = "Hides tiles you would jump over when you run"
	)
	default boolean skipJumpedTiles() { return true; }

	@ConfigItem(
			keyName = "displaySetting",
			name = "Display Setting",
			description = "Configures when the path should be displayed"
	)
	default PathDisplaySetting displaySetting() { return PathDisplaySetting.ALWAYS_DISPLAY; }

	@ConfigItem(
			keyName = "displayKeybind",
			name = "Keybind",
			description = "Sets the keybind if configured to display the path on toggle or while a key is pressed.\nCan be combined with Shift, Ctrl and Alt as well as Command on Mac."
	)
	default Keybind displayKeybind() {
		OSType osType = OSType.getOSType();
		int modifier;
		if (osType == OSType.MacOS){
			modifier = InputEvent.META_DOWN_MASK; //Command on Mac keyboard
		} else {
			modifier = InputEvent.CTRL_DOWN_MASK;
		}
		return new Keybind(KeyEvent.VK_Z, modifier);
	}
}

package com.pathfinder;

public enum PathDisplaySetting {
    ALWAYS_DISPLAY,
    DISPLAY_WHILE_KEY_PRESSED,
    TOGGLE_ON_KEY_PRESSED
}

package com.pathfinder;

import net.runelite.client.config.Keybind;
import net.runelite.client.input.KeyListener;

import javax.inject.Inject;
import java.awt.event.KeyEvent;

public class PathKeyListener implements KeyListener {
    @Inject
    PathHighlightConfig config;

    @Inject
    PathHighlightPlugin plugin;

    @Override
    public void keyTyped(KeyEvent e) {

    }

    @Override
    public void keyPressed(KeyEvent e) {
        //TODO: Add integration with Key Rebinding plugin
        Keybind keybind = config.displayKeybind();
        if (keybind.matches(e)) {
            if (config.displaySetting() == PathDisplaySetting.DISPLAY_WHILE_KEY_PRESSED) {
                plugin.setDisplay(true);
            } else if (config.displaySetting() == PathDisplaySetting.TOGGLE_ON_KEY_PRESSED) {
                plugin.setDisplay(!plugin.isDisplay());
            }
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        Keybind keybind = config.displayKeybind();
        if (keybind.matches(e) && config.displaySetting() == PathDisplaySetting.DISPLAY_WHILE_KEY_PRESSED) {
            plugin.setDisplay(false);
        }
    }
}

package com.pathfinder;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
		name = "Pathfinder",
		description = "Highlight the path your character will take to the hovered tile",
		tags = {"highlight", "overlay", "path", "tile", "tiles", "gauntlet", "zalcano"},
		enabledByDefault = false
)
public class PathHighlightPlugin extends Plugin
{
	@Inject
	private PathHighlightConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private PathHighlightOverlay overlay;

	@Inject
	private KeyManager keyManager;

	@Inject
	private PathKeyListener keyListener;

	@Getter(AccessLevel.PACKAGE)
	@Setter(AccessLevel.PACKAGE)
	boolean display;

	@Provides
	PathHighlightConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(PathHighlightConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
		keyManager.registerKeyListener(keyListener);
		setDisplay(config.displaySetting() == PathDisplaySetting.ALWAYS_DISPLAY);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
		keyManager.unregisterKeyListener(keyListener);
	}

	@Subscribe
	private void onConfigChanged(ConfigChanged event) {
		if (event.getGroup().equals("pathfinder") && event.getKey().equals("displaySetting")) {
			setDisplay(config.displaySetting() == PathDisplaySetting.ALWAYS_DISPLAY);
		}
	}
}

