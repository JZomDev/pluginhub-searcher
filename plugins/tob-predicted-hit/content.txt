package com.partyhits.util;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Getter
public enum FontTypes
{
    REGULAR("RS Regular"),
    ARIAL("Arial"),
    TIMES_NEW_ROMAN("Times New Roman");

    private final String name;

    @Override
    public String toString()
    {
        return name;
    }
}

package com.partyhits.util;


import lombok.EqualsAndHashCode;
import lombok.Value;
import net.runelite.client.party.messages.PartyMemberMessage;


@Value
@EqualsAndHashCode(callSuper = true)
public class Hit extends PartyMemberMessage
{
    int damage;
    String player;
    int tickDelay;
}

package com.partyhits;

import com.partyhits.util.FontTypes;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

import java.awt.*;
import net.runelite.client.config.Range;

@ConfigGroup("partyhits")
public interface PartyHitsConfig extends Config
{
	@ConfigSection(
			name = "General",
			position = 0,
			description = "General Settings",
			closedByDefault = false
	)
	String generalSettings = "generalSettings";

	@ConfigSection(
			name = "Font",
			position = 1,
			description = "Font Options",
			closedByDefault = true
	)
	String fontSettings = "fontSettings";

	@ConfigSection(
			name = "Maiden",
			position = 2,
			description = "Maiden Settings",
			closedByDefault = true
	)
	String maidenSettings = "maidenSettings";

	@ConfigItem(
			position = 0,
			keyName = "Duration",
			name = "Hitsplat duration",
			description = "How long should the hitsplat stay for (in frames).",
			section = generalSettings
	)
	default int duration()
	{
		return 150;
	}
	@ConfigItem(
			position = 1,
			keyName = "Maiden Only",
			name = "Maiden Only",
			description = "Only show hits in the maiden room.",
			section = generalSettings
	)
	default boolean maidenOnly()
	{
		return false;
	}
	@ConfigItem(
			position = 2,
			keyName = "Show Self",
			name = "Show Self",
			description = "Show your own hits.",
			section = generalSettings
	)
	default boolean ownHits()
	{
		return false;
	}
	@ConfigItem(
			position = 3,
			keyName = "Show party hits",
			name = "Show party hits",
			description = "Show the hits of your party members.",
			section = generalSettings
	)
	default boolean partyHits()
	{
		return true;
	}
	@ConfigItem(
			position = 4,
			keyName = "Maiden Live HP",
			name = "Maiden Live HP",
			description = "Shows maidens current hp.",
			section = maidenSettings
	)
	default boolean maidenHP()
	{
		return false;
	}
	@Range(min = -100, max = 100)
	@ConfigItem(
			position = 5,
			keyName = "Height Offset",
			name = "Height Offset",
			description = "Make the hitsplat higher above the player.",
			section = fontSettings
	)
	default int offset()
	{
		return 20;
	}
	@Range(min = -100, max = 100)
	@ConfigItem(
			position = 6,
			keyName = "Horizontal Offset",
			name = "Horizontal Offset",
			description = "Adjust the horizontal offset of the text.",
			section = fontSettings
	)
	default int horOffset()
	{
		return 0;
	}
	@ConfigItem(
			position = 7,
			keyName = "Font",
			name = "Font",
			description = "Change the font of the text.",
			section = fontSettings
	)
	default FontTypes font()
	{
		return FontTypes.ARIAL;
	}
	@ConfigItem(
			position = 8,
			keyName = "Font Size",
			name = "Font Size",
			description = "Change the size of the text.",
			section = fontSettings
	)
	default int size()
	{
		return 15;
	}
	@ConfigItem(
			position = 9,
			keyName = "Text Color",
			name = "Text Color",
			description = "Change the color of the text.",
			section = fontSettings
	)
	default Color color()
	{
		return Color.WHITE;
	}
	@Range(min = -100, max = 100)
	@ConfigItem(
			position = 10,
			keyName = "Maiden Height Offset",
			name = "Maiden Height Offset",
			description = "Make the Maiden HP higher.",
			section = maidenSettings
	)
	default int maidenOffset()
	{
		return 30;
	}
	@Range(min = -100, max = 100)
	@ConfigItem(
			position = 11,
			keyName = "Maiden Horizontal Offset",
			name = "Maiden Horizontal Offset",
			description = "Adjust the horizontal offset of the text on maiden.",
			section = maidenSettings
	)
	default int maidenHorOffset()
	{
		return -5;
	}
	@ConfigItem(
			position = 12,
			keyName = "Maiden Font",
			name = "Maiden Font",
			description = "Change the font of the HP on maiden.",
			section = maidenSettings
	)
	default FontTypes maidenFont()
	{
		return FontTypes.ARIAL;
	}
	@ConfigItem(
			position = 13,
			keyName = "Maiden Font Size",
			name = "Maiden Font Size",
			description = "Change the size of the HP on maiden.",
			section = maidenSettings
	)
	default int maidenSize()
	{
		return 15;
	}
	@ConfigItem(
			position = 14,
			keyName = "Maiden Text Color",
			name = "Maiden Text Color",
			description = "Change the color of the text on maiden.",
			section = maidenSettings
	)
	default Color maidenColor()
	{
		return Color.GREEN;
	}
	@ConfigItem(
			position = 15,
			keyName = "Sync hits",
			name = "Sync hits",
			description = "Sync your hits with your teammates (delays your hits updating slightly)",
			section = maidenSettings
	)
	default boolean syncHits()
	{
		return false;
	}
	@ConfigItem(
			position = 16,
			keyName = "Update Threshold",
			name = "Update Threshold",
			description = "Only update Maidens HP if change is more than x% from old hp",
			section = maidenSettings
	)
	default double updateThreshold()
	{
		return 0.2;
	}
}

package com.partyhits;


import com.partyhits.npcs.ToBNPCs;
import net.runelite.api.Client;
import net.runelite.client.util.Text;

import javax.inject.Inject;

public class XpToDamage
{
    private final Client client;

    @Inject
    protected XpToDamage(Client client)
    {
        this.client = client;
    }

    public int calculateHit(int id, int hpXpDiff)
    {
        if (ToBNPCs.isTOBNPC(id))
        {
            int partySize = getToBPartySize();
            double modifier = ToBNPCs.getModifier(id, partySize);
            return (int) Math.round((hpXpDiff * (3.0d / 4.0d)) / modifier);
        }
        else
        {
            return (int) Math.round((hpXpDiff * (3.0d / 4.0d)));
        }
    }

    public int getToBPartySize()
    {
        int count = 0;
        for (int i = 330; i < 335; i++)
        {
            String jagexName = client.getVarcStrValue(i);
            if (jagexName != null)
            {
                String name = Text.removeTags(jagexName).replace('\u00A0', ' ').trim();
                if (!"".equals(name))
                {
                    count++;
                }
            }
        }
        return count;
    }
}

package com.partyhits.maiden;

import com.partyhits.PartyHitsConfig;
import net.runelite.api.NPC;
import net.runelite.api.Point;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

import javax.inject.Inject;
import java.awt.*;

public class MaidenOverlay extends Overlay
{
    private final PartyHitsConfig config;
    private final MaidenHandler maidenHandler;
    private double lastRenderedHp = 100.0;

    @Inject
    public MaidenOverlay(MaidenHandler maidenHandler, PartyHitsConfig config)
    {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.UNDER_WIDGETS);
        this.maidenHandler = maidenHandler;
        this.config = config;
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (maidenHandler.isMaidenActive() && maidenHandler.getMaidenNpc() != null)
        {
            NPC maiden = maidenHandler.getMaidenNpc();
            double maidenHp = maidenHandler.getPredictedHpPercent();
            if (maidenHp < 0)
                maidenHp = 0;

            double threshold = config.updateThreshold();
            if (Math.abs(maidenHp - lastRenderedHp) >= threshold)
            {
                lastRenderedHp = maidenHp;
            }
            String hpText = String.format("%.1f", lastRenderedHp);

            Point pt = maiden.getCanvasTextLocation(graphics, hpText,config.maidenOffset() * 5);
            if (pt != null)
            {
				graphics.setFont(new Font(config.maidenFont().getName(), Font.BOLD, config.maidenSize()));
				int x = pt.getX() + config.maidenHorOffset();
				int y = pt.getY();

				graphics.setColor(new Color(0,0,0, config.maidenColor().getAlpha()));
				graphics.drawString(hpText, x + 1, y + 1);

				graphics.setColor(config.maidenColor());
				graphics.drawString(hpText, x, y);
            }
        }
        return null;
    }
}

package com.partyhits.maiden;

import com.partyhits.XpToDamage;
import com.partyhits.util.Hit;
import lombok.Getter;
import net.runelite.api.*;
import net.runelite.api.events.GameTick;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.ui.overlay.OverlayManager;
import org.apache.commons.lang3.tuple.Pair;

import javax.inject.Inject;
import java.util.ArrayList;
import java.util.List;


public class MaidenHandler
{
    @Inject
    private XpToDamage xpToDamage;
    @Inject
    private MaidenOverlay maidenOverlay;
    @Inject
    private OverlayManager overlayManager;
    @Getter
    private NPC maidenNpc;
    private int maxHp;
    @Getter
    private double predictedHpPercent;
    private double realHpPercent;
    @Getter
    private boolean maidenActive;
    private List<Pair<Integer, Integer>> queuedDamage = new ArrayList<>();

    public void init(NPC maiden)
    {
        overlayManager.add(maidenOverlay);
        queuedDamage.clear();
        maidenActive = true;
        maidenNpc = maiden;
        predictedHpPercent = 100.0;
        realHpPercent = 100.0;

        int partySize = xpToDamage.getToBPartySize();
        boolean maidenEM = maidenNpc.getId() == NpcID.THE_MAIDEN_OF_SUGADINTI_10814;

        maxHp = getMaidenMaxHp(partySize, maidenEM);
    }

    public void deactivate()
    {
        overlayManager.remove(maidenOverlay);
        maidenActive = false;
        queuedDamage.clear();
        maidenNpc = null;
    }

    @Subscribe
    protected void onGameTick(GameTick event)
    {
        if (maidenActive)
        {
            updateHpPercentage();
            updatePredictedHp(1);
            reduceQueuedDamage();
        }
    }

    private void reduceQueuedDamage()
    {
        List<Pair<Integer, Integer>> newQueuedDamage = new ArrayList<>();

        for (Pair<Integer, Integer> entry : queuedDamage)
        {
            int dmg = entry.getLeft();
            int tickDelay = entry.getRight() - 1;

            if (tickDelay >= 0)
            {
                newQueuedDamage.add(Pair.of(dmg, tickDelay));
            }
        }
        queuedDamage = newQueuedDamage;
    }

    public void updatePredictedHp(int tick)
    {
        if (maidenNpc == null || maidenNpc.isDead() || maidenNpc.getHealthScale() == 0)
        {
            return;
        }

        int queuedDmgTotal = 0;
        for (Pair<Integer, Integer> entry : queuedDamage)
        {
            if (entry.getRight() >= tick)
                queuedDmgTotal += entry.getLeft();
        }

        double queuedDamagePercentage = (queuedDmgTotal / (double) maxHp) * 100;
        predictedHpPercent = realHpPercent - queuedDamagePercentage;
    }

    private int getMaidenMaxHp(int partySize, boolean maidenEM)
    {
        if (maidenEM)
        {
            switch (partySize)
            {
                case 1: return 500;
                case 2: return 950;
                case 3: return 1350;
                case 4: return 1700;
                default: return 2000;
            }
        }
        else
        {
            switch (partySize)
            {
                case 4: return 3062;
                case 5: return 3500;
                default: return 2625;
            }
        }
    }

    private void updateHpPercentage()
    {
        if (maidenNpc.getHealthRatio() / maidenNpc.getHealthScale() != 1)
            realHpPercent = ((double) maidenNpc.getHealthRatio() / (double) maidenNpc.getHealthScale() * 100);
    }

    public void queueDamage(Hit hit, boolean ownHit)
    {
        if (hit.getTickDelay() > 0)
        {
            if (ownHit)
            {
                queuedDamage.add(Pair.of(hit.getDamage(), hit.getTickDelay()));
                updatePredictedHp(1);
            }
            else
            {
                queuedDamage.add(Pair.of(hit.getDamage(), hit.getTickDelay() - 1));
                updatePredictedHp(0);
            }
        }
    }
}

package com.partyhits;

import com.google.inject.Provides;
import javax.inject.Inject;

import com.partyhits.maiden.MaidenHandler;
import com.partyhits.util.Hit;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.api.kit.KitType;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.party.PartyService;
import net.runelite.client.party.WSClient;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import org.apache.commons.lang3.ArrayUtils;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

@Slf4j
@PluginDescriptor(
	name = "ToB Predicted Hit",
		description = "Shows the hits of your party members in ToB",
		tags = {"party", "hits", "tob", "maiden"}
)
public class PartyHitsPlugin extends Plugin
{
	@Inject
	private Client client;
	@Inject
	private ClientThread clientThread;
	@Inject
	private PartyHitsConfig config;
	@Inject
	private WSClient wsClient;
	@Inject
	private PartyService party;
	@Inject
	private OverlayManager overlayManager;
	@Inject
	private PartyHitsOverlay partyHitsOverlay;
	@Inject
	private XpToDamage xpToDamage;
	@Inject
	private MaidenHandler maidenHandler;
	@Inject
	private EventBus eventBus;
	private static final int[] previousExp = new int[Skill.values().length];
	private boolean resetXpTrackerLingerTimerFlag = false;
	private final int MAIDEN_REGIONID = 12613;
	private final int MAX_XP = 20000000;
	private static final Set<Integer> RANGED_BOWS = new HashSet<>(Arrays.asList(
			ItemID.TWISTED_BOW, ItemID.BOW_OF_FAERDHINEN, ItemID.BOW_OF_FAERDHINEN_C,
			ItemID.ARMADYL_CROSSBOW, ItemID.RUNE_CROSSBOW, ItemID.DRAGON_CROSSBOW
	));
	private static final Set<Integer> RANGED_THROWN = new HashSet<>(Arrays.asList(
			ItemID.CHINCHOMPA_10033, ItemID.RED_CHINCHOMPA_10034, ItemID.BLACK_CHINCHOMPA,
			ItemID.BLAZING_BLOWPIPE, ItemID.TOXIC_BLOWPIPE
	));
	private static final Set<Integer> POWERED_STAVES = new HashSet<>(Arrays.asList(
			ItemID.SANGUINESTI_STAFF,
			ItemID.TRIDENT_OF_THE_SEAS_FULL,
			ItemID.TRIDENT_OF_THE_SEAS,
			ItemID.TRIDENT_OF_THE_SWAMP,
			ItemID.TRIDENT_OF_THE_SWAMP_E,
			ItemID.HOLY_SANGUINESTI_STAFF,
			ItemID.ACCURSED_SCEPTRE,
			ItemID.WARPED_SCEPTRE
	));
	private static final Set<Integer> SHADOW = new HashSet<>(Arrays.asList(
			ItemID.TUMEKENS_SHADOW,
			ItemID.CORRUPTED_TUMEKENS_SHADOW
		));

	@Override
	protected void startUp()
	{
		overlayManager.add(partyHitsOverlay);
		wsClient.registerMessage(Hit.class);
		eventBus.register(maidenHandler);
		if (client.getGameState() == GameState.LOGGED_IN)
		{
			clientThread.invokeLater(() ->
					{
						int[] xps = client.getSkillExperiences();
						System.arraycopy(xps, 0, previousExp, 0, previousExp.length);
					});
		}
		else
		{
			resetXpTracker();
		}
	}

	@Override
	protected void shutDown()
	{
		if (maidenHandler.isMaidenActive())
			maidenHandler.deactivate();

		overlayManager.remove(partyHitsOverlay);
		eventBus.unregister(maidenHandler);
		wsClient.unregisterMessage(Hit.class);
	}

	@Subscribe
	protected void onStatChanged(StatChanged event)
	{
		int currentXp = event.getXp();
		int previousXp = previousExp[event.getSkill().ordinal()];
		int xpDiff = currentXp - previousXp;
		if (previousXp > 0 && xpDiff > 0)
		{
			processXP(event.getSkill(), xpDiff);
		}
		previousExp[event.getSkill().ordinal()] = event.getXp();
	}

	@Subscribe
	protected void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() == GameState.LOGIN_SCREEN || gameStateChanged.getGameState() == GameState.HOPPING)
		{
			resetXpTracker();
			resetXpTrackerLingerTimerFlag = true;
		}
		if (gameStateChanged.getGameState() == GameState.LOGGED_IN && resetXpTrackerLingerTimerFlag)
		{
			resetXpTrackerLingerTimerFlag = false;
		}
	}

	@Subscribe
	protected void onNpcSpawned(NpcSpawned event)
	{
		if (!inTob() || !inMaidenRegion())
			return;

		NPC npc = event.getNpc();
		int npcId = npc.getId();
		switch (npcId)
		{
			case NpcID.THE_MAIDEN_OF_SUGADINTI: // regular mode
			case NpcID.THE_MAIDEN_OF_SUGADINTI_10822: // hard mode
			case NpcID.THE_MAIDEN_OF_SUGADINTI_10814: // entry mode
				if (config.maidenHP())
					maidenHandler.init(npc);
				break;
		}
	}

	@Subscribe
	protected void onNpcDespawned(NpcDespawned event)
	{
		if (!inTob() || !inMaidenRegion())
			return;

		String npcName = event.getNpc().getName();
		if (Objects.equals(npcName, "The Maiden of Sugadinti"))
		{
			if (maidenHandler.isMaidenActive())
				maidenHandler.deactivate();
		}
	}

	@Subscribe
	protected void onFakeXpDrop(FakeXpDrop event)
	{
		if (event.getXp() >= MAX_XP)
			return;

		processXP(event.getSkill(), event.getXp());
	}

	private void processXP(Skill skill, int xpDrop)
	{
		if (!inTob())
			return;

		if (config.maidenOnly() && !inMaidenRegion())
			return;

		if (skill == Skill.HITPOINTS)
		{
			Player player = client.getLocalPlayer();
			if (player == null)
				return;

			Actor actor = player.getInteracting();
			if (actor instanceof NPC)
			{
				int npcId = ((NPC) actor).getId();

				int dmg = xpToDamage.calculateHit(npcId, xpDrop);
				if (dmg > 0)
				{
					int projectileDelay = 0;
					if (Objects.equals(actor.getName(), "The Maiden of Sugadinti"))
					{
						WorldPoint maidenLoc = actor.getWorldLocation();
						int minDistance = 10;

						for (int x = 0; x < 6; x++)
						{
							for (int y = 0; y < 6; y++)
							{
								WorldPoint tileLocation = new WorldPoint(maidenLoc.getX() + x, maidenLoc.getY() + y, maidenLoc.getPlane());
								int distance = player.getWorldLocation().distanceTo(tileLocation);

								if (distance < minDistance)
								{
									minDistance = distance;
								}
							}
						}
						projectileDelay = getTickDelay(minDistance);
					}

					Hit hit = new Hit(dmg, player.getName(), projectileDelay);
					sendHit(hit);
					if (config.maidenHP() && !config.syncHits())
						maidenHandler.queueDamage(hit, true);
				}
			}
		}
	}

	@Subscribe
	protected void onHit(Hit hit)
	{
		boolean isLocalPlayer = Objects.equals(hit.getPlayer(), client.getLocalPlayer().getName());

		if (config.maidenHP() && inMaidenRegion())
		{
			if (!isLocalPlayer || config.syncHits())
			{
				maidenHandler.queueDamage(hit, false);
			}
		}

		if (config.partyHits() && !isLocalPlayer)
		{
			partyHitsOverlay.addHit(hit, config.duration());
		}
	}

	private int getTickDelay(int distance)
	{
		Player player = client.getLocalPlayer();
		if (player == null)
			return 0;

		PlayerComposition playerComposition = player.getPlayerComposition();
		if (playerComposition == null)
			return 0;

		int weaponUsed = playerComposition.getEquipmentId(KitType.WEAPON);
		if (RANGED_BOWS.contains(weaponUsed))
		{
			return (int) Math.floor((3 + distance) / 6.0) + 2;
		}
		else if (RANGED_THROWN.contains(weaponUsed))
		{
			return (int) Math.floor(distance / 6.0) + 2;
		}
		else if (POWERED_STAVES.contains(weaponUsed))
		{
			return (int) Math.floor((1 + distance) / 3.0) + 2;
		}
		else if (SHADOW.contains(weaponUsed))
		{
			return (int) Math.floor((1 + distance) / 3.0) + 3;
		}
		else if (weaponUsed == ItemID.ZARYTE_CROSSBOW)
		{
			return 3; // zcb spec has a set projectile delay of 3, later differentiate between auto & spec
		}
		else if (weaponUsed == ItemID.TONALZTICS_OF_RALOS)
		{
			return 2;
		}
		return 1; // Assuming all other weapons have a delay of 1, later fix for multi tick weapons like claws/dualies
	}

	private void sendHit(Hit hit)
	{
		if (party.isInParty())
		{
			if (config.ownHits() && Objects.equals(hit.getPlayer(), client.getLocalPlayer().getName()))
				partyHitsOverlay.addHit(hit, config.duration());

			clientThread.invokeLater(() -> party.send(hit));
		}
	}

	private boolean inTob()
	{
		int tobVar = client.getVarbitValue(Varbits.THEATRE_OF_BLOOD);
		return tobVar == 2 || tobVar == 3;
	}

	private boolean inMaidenRegion()
	{
		return ArrayUtils.contains(client.getTopLevelWorldView().getMapRegions(), MAIDEN_REGIONID);
	}

	private void resetXpTracker()
	{
		Arrays.fill(previousExp, 0);
	}

	@Provides
	PartyHitsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(PartyHitsConfig.class);
	}
}

package com.partyhits.npcs;

import net.runelite.api.NpcID;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;

public enum ToBNPCs
{
    // TOB EM
    BLOAT_EM(			new ToBNPC(1.075,	1.075, 	1.075	), NpcID.PESTILENT_BLOAT_10812),
    NYLOCAS_VASILIAS_EM(new ToBNPC(1.025,	1.025, 	1.025	), NpcID.NYLOCAS_VASILIAS_10787, NpcID.NYLOCAS_VASILIAS_10788, NpcID.NYLOCAS_VASILIAS_10789),
    SOTETSEG_EM(		new ToBNPC(1.045,	1.045, 	1.045	), NpcID.SOTETSEG_10865),
    VERZIK_P1_EM(		new ToBNPC(1.05,	1.05, 	1.05	), NpcID.VERZIK_VITUR_10831, NpcID.VERZIK_VITUR_10832),
    VERZIK_P2_EM(		new ToBNPC(1.025,	1.025, 	1.025	), NpcID.VERZIK_VITUR_10833, NpcID.VERZIK_VITUR_10834),
    VERZIK_P3_EM(		new ToBNPC(1.125,	1.125, 	1.125	), NpcID.VERZIK_VITUR_10835, NpcID.VERZIK_VITUR_10836),
    // TOB
    BLOAT(				new ToBNPC(1.7, 	1.775, 	1.85	), NpcID.PESTILENT_BLOAT),
    NYLOCAS_VASILIAS(	new ToBNPC(1.175,	1.2, 	1.2		), NpcID.NYLOCAS_VASILIAS_8355, NpcID.NYLOCAS_VASILIAS_8356, NpcID.NYLOCAS_VASILIAS_8357),
    SOTETSEG(			new ToBNPC(1.375,	1.375, 	1.375	), NpcID.SOTETSEG_8388),
    VERZIK_P1(			new ToBNPC(1.05,	1.05, 	1.05	), NpcID.VERZIK_VITUR_8370, NpcID.VERZIK_VITUR_8371),
    VERZIK_P2(			new ToBNPC(1.30,	1.30, 	1.30	), NpcID.VERZIK_VITUR_8372, NpcID.VERZIK_VITUR_8373),
    VERZIK_P3(			new ToBNPC(1.575,	1.575, 	1.575	), NpcID.VERZIK_VITUR_8374, NpcID.VERZIK_VITUR_8375),
    // TOB HM
    BLOAT_HM(			new ToBNPC(1.8, 	1.85, 	1.85	), NpcID.PESTILENT_BLOAT_10813),
    NYLOCAS_VASILIAS_HM(new ToBNPC(1.175,	1.2, 	1.2		), NpcID.NYLOCAS_VASILIAS_10808, NpcID.NYLOCAS_VASILIAS_10809, NpcID.NYLOCAS_VASILIAS_10810),
    SOTETSEG_HM(		new ToBNPC(1.4,	1.4, 	1.4		), NpcID.SOTETSEG_10868),
    VERZIK_P1_HM(		new ToBNPC(1.05,	1.05, 	1.05	), NpcID.VERZIK_VITUR_10848, NpcID.VERZIK_VITUR_10849),
    VERZIK_P2_HM(		new ToBNPC(1.30,	1.30, 	1.30	), NpcID.VERZIK_VITUR_10850, NpcID.VERZIK_VITUR_10851),
    VERZIK_P3_HM(		new ToBNPC(1.575,	1.575, 	1.575	), NpcID.VERZIK_VITUR_10852, NpcID.VERZIK_VITUR_10853),
    ;
    private final HashSet<Integer> ids;
    private final ToBNPC npcWithScalingBonus;
    ToBNPCs(ToBNPC npcWithScalingBonus, int ... ids)
    {
        this.npcWithScalingBonus = npcWithScalingBonus;
        this.ids = new HashSet<>();
        Arrays.stream(ids).forEach(this.ids::add);
    }

    private static final HashMap<Integer, ToBNPC> NPCS_WITH_SCALING_BONUS_MAPPING;

    static
    {
        NPCS_WITH_SCALING_BONUS_MAPPING = new HashMap<>();
        for (ToBNPCs value : ToBNPCs.values())
        {
            for (Integer id : value.ids)
            {
                NPCS_WITH_SCALING_BONUS_MAPPING.put(id, value.npcWithScalingBonus);
            }
        }
    }

    public static boolean isTOBNPC(int id)
    {
        return NPCS_WITH_SCALING_BONUS_MAPPING.containsKey(id);
    }

    public static double getModifier(int id, int partySize)
    {
        if (isTOBNPC(id))
        {
            return NPCS_WITH_SCALING_BONUS_MAPPING.get(id).calculateModifier(partySize);
        }
        return 1.0;
    }
}

package com.partyhits.npcs;

public class ToBNPC
{
    private final double[] modifiers;

    ToBNPC(double... modifiers)
    {
        this.modifiers = modifiers;
    }

    public double calculateModifier(int partySize)
    {
        return modifiers[Math.min(Math.max(partySize - 3, 0), modifiers.length - 1)];
    }
}

package com.partyhits;

import com.partyhits.util.Hit;
import net.runelite.api.*;
import net.runelite.api.Point;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

import javax.inject.Inject;
import java.awt.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Objects;

public class PartyHitsOverlay extends Overlay
{
    private final PartyHitsPlugin plugin;
    private final PartyHitsConfig config;
    @Inject
    private Client client;
    private final Map<Hit, Integer> hits = new HashMap<>();

    @Inject
    PartyHitsOverlay(PartyHitsPlugin plugin, PartyHitsConfig config)
    {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.UNDER_WIDGETS);
        this.plugin = plugin;
        this.config = config;
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
		graphics.setFont(new Font(config.font().toString(), Font.BOLD, config.size()));

        Map<Hit, Integer> updatedHits = new HashMap<>();

        Iterator<Map.Entry<Hit, Integer>> iterator = hits.entrySet().iterator();

        while (iterator.hasNext())
        {
            Map.Entry<Hit, Integer> entry = iterator.next();
            Hit hit = entry.getKey();
            int duration = entry.getValue();
            if (duration <= 0)
            {
                iterator.remove();
                continue;
            }
            renderHit(graphics, hit);
            updatedHits.put(hit, duration - 1);
        }
        hits.putAll(updatedHits);

        return null;
    }

    private void renderHit(Graphics2D graphics, Hit hit)
    {
        String targetName = hit.getPlayer();
        Player target = null;
        for (Player p : client.getTopLevelWorldView().players())
        {
            if (Objects.equals(p.getName(), targetName))
            {
                target = p;
            }
        }

        if (target == null)
            return;

        String damageText = String.valueOf(hit.getDamage());
        Point pt = target.getCanvasTextLocation(graphics, damageText, config.offset() * 10);
        if (pt != null)
        {
			int x = pt.getX() + config.horOffset();
			int y = pt.getY();

			graphics.setColor(new Color(0,0,0, config.color().getAlpha()));
			graphics.drawString(damageText, x + 1, y + 1);

            graphics.setColor(config.color());
            graphics.drawString(damageText, x, y);
        }
    }

    public void addHit(Hit hit, int duration)
    {
        hits.keySet().removeIf(existingHit -> existingHit.getPlayer().equals(hit.getPlayer())); // if a player still has a hit, remove it

        hits.put(hit, duration);
    }
}

package com.partyhits;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PartyHitsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PartyHitsPlugin.class);
		RuneLite.main(args);
	}
}
