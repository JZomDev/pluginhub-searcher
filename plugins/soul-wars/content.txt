package com.soulwars;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SoulWarsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(SoulWarsPlugin.class);
		RuneLite.main(args);
	}
}
package com.soulwars;

import javax.inject.Singleton;

import com.google.common.collect.ImmutableSet;
import lombok.extern.slf4j.Slf4j;
import javax.inject.Inject;

import com.soulwars.SoulWarsConfig.TrackingMode;
import net.runelite.api.WorldView;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.Notifier;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.infobox.InfoBox;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;
import net.runelite.client.ui.overlay.infobox.InfoBoxPriority;
import org.apache.commons.lang3.ArrayUtils;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.stream.Collectors;

import static net.runelite.api.NpcID.AVATAR_OF_CREATION_10531;
import static net.runelite.api.NpcID.AVATAR_OF_DESTRUCTION_10532;

@Slf4j
@Singleton
public class SoulWarsManager {

    @Inject
    private SoulWarsPlugin plugin;
    @Inject
    private SoulWarsConfig config;
    @Inject
    private ItemManager itemManager;
    @Inject
    private InfoBoxManager infoBoxManager;
    @Inject
    private OverlayManager overlayManager;
    @Inject
    private Notifier notifier;

    private final EnumMap<SoulWarsResource, SoulWarsInfoBox> resourceToInfoBox = new EnumMap<>(SoulWarsResource.class);
    private final EnumMap<SoulWarsResource, Integer> resourceToTrackedNumber = new EnumMap<>(SoulWarsResource.class);

    private final WorldArea blue_spawn = new WorldArea(2136, 2900, 8, 11, 0);
    private final WorldArea west_graveyard = new WorldArea(2157, 2893, 11, 11, 0);
    private final WorldArea obelisk = new WorldArea(2199, 2904, 16, 16, 0);
    private final WorldArea east_graveyard = new WorldArea(2248, 2920, 11, 11, 0);
    private final WorldArea red_spawn = new WorldArea(2271, 2914, 8, 11, 0);
    static final ImmutableSet<Integer> SOUL_WARS_ARENA_REGIONS = ImmutableSet.of(
            SoulWarsRegion.WEST_REGION.regionId, SoulWarsRegion.OBELISK_REGION.regionId, SoulWarsRegion.EAST_REGION.regionId
    );
    static final ImmutableSet<Integer> AVATARS_IDS = ImmutableSet.of(
            AVATAR_OF_CREATION_10531, AVATAR_OF_DESTRUCTION_10532
    );
    static final int VARBIT_SOUL_WARS = 3815;
    static final int VARBIT_SOUL_WARS_ACTIVITY = 9794;
    private static final double MAX_ACTIVITY = 800.0;

    private SoulWarsTeam team = SoulWarsTeam.NONE;
    private SoulWarsTeam west_graveyard_control = SoulWarsTeam.NONE;
    private SoulWarsTeam obelisk_control = SoulWarsTeam.NONE;
    private SoulWarsTeam east_graveyard_control = SoulWarsTeam.NONE;
    private int inventoryFragments;
    private boolean currentIsActive = true;
    EnumMap<SoulWarsRegion, ArrayList<CaptureAreaTile>> regionToCaptureAreaTiles = new EnumMap<>(SoulWarsRegion.class);

    void init(SoulWarsTeam soulWarsTeam)
    {
        team = soulWarsTeam;
        currentIsActive = true;
        inventoryFragments = 0;
        regionToCaptureAreaTiles.clear();
        createInfoBoxesFromConfig();
    }

    private void createInfoBox(final SoulWarsResource resource, final int goal)
    {
        final boolean isDecrement = config.trackingMode() == TrackingMode.DECREMENT;

        // use team cape for captures
        int itemId = resource == SoulWarsResource.CAPTURES ? team.itemId : resource.itemId;

        final SoulWarsInfoBox infoBox = new SoulWarsInfoBox(
                itemManager.getImage(itemId),
                plugin,
                goal,
                isDecrement,
                resource.name
        );

        resourceToInfoBox.put(resource, infoBox);
        infoBoxManager.addInfoBox(infoBox);
        updateInfoBox(resource, resourceToTrackedNumber.getOrDefault(resource,0));
    }

    private void createInfoBoxesFromConfig()
    {
        if (config.showFragmentsSacrificed()) {
            createInfoBox(SoulWarsResource.FRAGMENTS_SACRIFICED, config.fragmentsSacrificed());
        }
        if (config.showAvatarDamage()) {
            createInfoBox(SoulWarsResource.AVATAR_DAMAGE, config.avatarDamage());
        }
        if (config.showBonesBuried()) {
            createInfoBox(SoulWarsResource.BONES_BURIED, config.bonesBuried());
        }
        if (config.showCaptures()) {
            createInfoBox(SoulWarsResource.CAPTURES, config.captures());
        }
    }

    // for config changes without touching game values
    public void updateInfoBoxes()
    {
        infoBoxManager.removeIf(SoulWarsInfoBox.class::isInstance);
        createInfoBoxesFromConfig();
    }

    private void updateInfoBox(final SoulWarsResource resource, final int count)
    {
        final SoulWarsInfoBox infoBox = resourceToInfoBox.get(resource);

        if (infoBox == null)
        {
            return;
        }

        infoBox.updateCount(count);

        if (config.removedWhenGoalReached() && infoBox.hasReachedGoal())
        {
            infoBoxManager.removeInfoBox(infoBox);
            resourceToInfoBox.remove(resource);
        }
    }

    public void highlightCaptureAreas(int[] loadedRegionIds, WorldView worldView) {
        if (ArrayUtils.contains(loadedRegionIds, SoulWarsRegion.WEST_REGION.regionId)) {
            regionToCaptureAreaTiles.put(SoulWarsRegion.WEST_REGION, (ArrayList<CaptureAreaTile>) west_graveyard.toWorldPointList().stream().map(point -> new CaptureAreaTile(SoulWarsRegion.WEST_REGION, point, west_graveyard_control.color, worldView)).collect(Collectors.toList()));
        }
        if (ArrayUtils.contains(loadedRegionIds, SoulWarsRegion.OBELISK_REGION.regionId)) {
            regionToCaptureAreaTiles.put(SoulWarsRegion.OBELISK_REGION, (ArrayList<CaptureAreaTile>) obelisk.toWorldPointList().stream().map(point -> new CaptureAreaTile(SoulWarsRegion.OBELISK_REGION, point, obelisk_control.color, worldView)).collect(Collectors.toList()));
        }
        if (ArrayUtils.contains(loadedRegionIds, SoulWarsRegion.EAST_REGION.regionId)) {
            regionToCaptureAreaTiles.put(SoulWarsRegion.EAST_REGION, (ArrayList<CaptureAreaTile>) east_graveyard.toWorldPointList().stream().map(point -> new CaptureAreaTile(SoulWarsRegion.EAST_REGION, point, east_graveyard_control.color, worldView)).collect(Collectors.toList()));
        }
    }

    void updateCaptureAreas(SoulWarsRegion region, Color color) {
        ArrayList<CaptureAreaTile> currentTiles = regionToCaptureAreaTiles.get(region);
        for (CaptureAreaTile tile:currentTiles) {
            tile.updateColor(color);
        }
        regionToCaptureAreaTiles.put(region, currentTiles);
    }

    public void reset()
    {
        team = SoulWarsTeam.NONE;
        currentIsActive = true;
        west_graveyard_control = SoulWarsTeam.NONE;
        obelisk_control = SoulWarsTeam.NONE;
        east_graveyard_control = SoulWarsTeam.NONE;
        regionToCaptureAreaTiles.clear();
        inventoryFragments = 0;
        resourceToTrackedNumber.clear();
        infoBoxManager.removeIf(SoulWarsInfoBox.class::isInstance);
    }

    void parseChatMessage(final String chatMessage, final WorldPoint location)
    {
        if (team == SoulWarsTeam.NONE || location == null)
        {
            return;
        }

        if (chatMessage.contains("You charge the Soul Obelisk with soul fragments"))
        {
            increaseFragmentsSacrificed(inventoryFragments);
        } else if (chatMessage.contains("You bury the bones")) {
            increaseBonesBuried();
        } else if (chatMessage.contains(SoulWarsTeam.RED.chatIdentifier)) {
            if (chatMessage.contains("eastern graveyard")) {
                east_graveyard_control = SoulWarsTeam.RED;
                updateCaptureAreas(SoulWarsRegion.EAST_REGION, SoulWarsTeam.RED.color);
                if (team == SoulWarsTeam.RED && location.isInArea(east_graveyard)) {
                    increaseCaptures();
                }
            } else if (chatMessage.contains("Soul Obelisk")) {
                obelisk_control = SoulWarsTeam.RED;
                updateCaptureAreas(SoulWarsRegion.OBELISK_REGION, SoulWarsTeam.RED.color);
                if (team == SoulWarsTeam.RED && location.isInArea(obelisk)) {
                    increaseCaptures();
                }
            } else if (chatMessage.contains("western graveyard")) {
                west_graveyard_control = SoulWarsTeam.RED;
                updateCaptureAreas(SoulWarsRegion.WEST_REGION, SoulWarsTeam.RED.color);
                if (team == SoulWarsTeam.RED && location.isInArea(west_graveyard)) {
                    increaseCaptures();
                }
            }
        } else if (chatMessage.contains(SoulWarsTeam.BLUE.chatIdentifier)) {
            if (chatMessage.contains("eastern graveyard")) {
                east_graveyard_control = SoulWarsTeam.BLUE;
                updateCaptureAreas(SoulWarsRegion.EAST_REGION, SoulWarsTeam.BLUE.color);
                if (team == SoulWarsTeam.BLUE && location.isInArea(east_graveyard)) {
                    increaseCaptures();
                }
            } else if (chatMessage.contains("Soul Obelisk")) {
                obelisk_control = SoulWarsTeam.BLUE;
                updateCaptureAreas(SoulWarsRegion.OBELISK_REGION, SoulWarsTeam.BLUE.color);
                if (team == SoulWarsTeam.BLUE && location.isInArea(obelisk)) {
                    increaseCaptures();
                }
            } else if (chatMessage.contains("western graveyard")) {
                west_graveyard_control = SoulWarsTeam.BLUE;
                updateCaptureAreas(SoulWarsRegion.WEST_REGION, SoulWarsTeam.BLUE.color);
                if (team == SoulWarsTeam.BLUE && location.isInArea(west_graveyard)) {
                    increaseCaptures();
                }
            }
        }
    }

    public boolean shouldSacrificeObelisk() {
        return obelisk_control == team;
    }

    public boolean shouldBuryBone(final WorldPoint location) {
        if (location == null) {
            return false;
        }
        if (location.isInArea(west_graveyard)) {
            return west_graveyard_control == team;
        } else if (location.isInArea(east_graveyard)) {
            return east_graveyard_control == team;
        } else {
            return location.isInArea(red_spawn) || location.isInArea(blue_spawn);
        }
    }

    private void increaseCaptures()
    {
        int capturesSoFar = resourceToTrackedNumber.getOrDefault(SoulWarsResource.CAPTURES, 0);
        int totalCaptures = capturesSoFar + 1;
        resourceToTrackedNumber.put(SoulWarsResource.CAPTURES, totalCaptures);
        updateInfoBox(SoulWarsResource.CAPTURES, totalCaptures);
    }

    private void increaseBonesBuried()
    {
        int bonesBuriedSoFar = resourceToTrackedNumber.getOrDefault(SoulWarsResource.BONES_BURIED, 0);
        int totalBonesBuried = bonesBuriedSoFar + 1;
        resourceToTrackedNumber.put(SoulWarsResource.BONES_BURIED, totalBonesBuried);
        updateInfoBox(SoulWarsResource.BONES_BURIED, totalBonesBuried);
    }

    private void increaseFragmentsSacrificed(final int numFragments)
    {
        int fragmentsSacrificedSoFar = resourceToTrackedNumber.getOrDefault(SoulWarsResource.FRAGMENTS_SACRIFICED, 0);
        int totalFragmentsSacrificed = fragmentsSacrificedSoFar + numFragments;
        resourceToTrackedNumber.put(SoulWarsResource.FRAGMENTS_SACRIFICED, totalFragmentsSacrificed);
        updateInfoBox(SoulWarsResource.FRAGMENTS_SACRIFICED, totalFragmentsSacrificed);
    }

    // needed for when avatar is low strength and can't sacrifice all fragments
    private void decreaseFragmentsSacrificed(final int numFragments)
    {
        int fragmentsSacrificedSoFar = resourceToTrackedNumber.getOrDefault(SoulWarsResource.FRAGMENTS_SACRIFICED, 0);
        int totalFragmentsSacrificed = fragmentsSacrificedSoFar - numFragments;
        resourceToTrackedNumber.put(SoulWarsResource.FRAGMENTS_SACRIFICED, totalFragmentsSacrificed);
        updateInfoBox(SoulWarsResource.FRAGMENTS_SACRIFICED, totalFragmentsSacrificed);
    }

    public void updateFragmentInInventoryCount(final int numFragments)
    {
        // num fragments decrease so sacrificed but potentially some remain due to low avatar strength
        if (inventoryFragments > numFragments) {
            decreaseFragmentsSacrificed(numFragments);
        }
        inventoryFragments = numFragments;
    }

    public void updateActivityBar(final int activityValue)
    {
        int threshold = config.activityNotifThreshold();
        boolean isActive = activityValue/MAX_ACTIVITY > threshold/100.0;
        if (currentIsActive != isActive) {
            if (config.shouldNotify() && !isActive) {
                notifier.notify("Soul Wars activity bar dropping below " + threshold + "%");
            }
            currentIsActive = isActive;
        }
    }

    public void dealtAvatarDamage(int avatarDamage)
    {
        int damageSoFar = resourceToTrackedNumber.getOrDefault(SoulWarsResource.AVATAR_DAMAGE, 0);
        int totalAvatarDamage = damageSoFar + avatarDamage;
        resourceToTrackedNumber.put(SoulWarsResource.AVATAR_DAMAGE, totalAvatarDamage);
        updateInfoBox(SoulWarsResource.AVATAR_DAMAGE, totalAvatarDamage);
    }

    private static class SoulWarsInfoBox extends InfoBox
    {
        private final int goal;
        private int count;
        private Color color = Color.WHITE;
        private final boolean isDecrement;
        private String text;

        private SoulWarsInfoBox(
                final BufferedImage bufferedImage,
                final SoulWarsPlugin plugin,
                final int goal,
                final boolean isDecrement,
                final String tooltip)
        {
            super(bufferedImage, plugin);
            setPriority(InfoBoxPriority.LOW);
            this.count = 0;
            this.goal = goal;
            this.isDecrement = isDecrement;
            this.text = calculateText();
            this.setTooltip(tooltip);
        }

        @Override
        public String getText()
        {
            return text;
        }

        @Override
        public Color getTextColor()
        {
            return color;
        }
        private void updateCount(final int count)
        {
            this.count = count;
            color = hasReachedGoal() ? Color.GRAY : Color.WHITE;
            text = calculateText();
        }

        private String calculateText() {
            return isDecrement ? String.valueOf(this.goal-this.count) : String.valueOf(this.count);
        }

        private boolean hasReachedGoal()
        {
            return count >= goal;
        }
    }
}

package com.soulwars;

import net.runelite.api.ItemID;
import net.runelite.api.ObjectID;

import java.awt.*;

enum SoulWarsRegion {
    WEST_REGION(8493),
    OBELISK_REGION(8749),
    EAST_REGION(9005);

    public final int regionId;

    SoulWarsRegion(final int regionId) {
        this.regionId = regionId;
    }
}

enum SoulWarsTeam {
    NONE("", ItemID.OBELISK, 0, ObjectID.SOUL_OBELISK_40449, Color.WHITE),
    BLUE("blue team", ItemID.BLUE_CAPE_25208, 1, ObjectID.SOUL_OBELISK_40450, Color.BLUE),
    RED("red team", ItemID.RED_CAPE_25207, 2, ObjectID.SOUL_OBELISK_40451, Color.RED);

    final String chatIdentifier;
    final int itemId;
    final int varbitNum;
    final int obeliskId;
    final Color color;


    SoulWarsTeam(final String chatIdentifier, final int itemId, final int varbitNum, final int obeliskId, final Color color) {
        this.chatIdentifier = chatIdentifier;
        this.itemId = itemId;
        this.varbitNum = varbitNum;
        this.obeliskId = obeliskId;
        this.color = color;
    }
}

enum SoulWarsResource {
    FRAGMENTS_SACRIFICED("Fragments Sacrificed", ItemID.SOUL_FRAGMENT_25201),
    BONES_BURIED("Bones Buried", ItemID.BONES_25199),
    AVATAR_DAMAGE("Avatar Damage", ItemID.LIL_CREATOR),
    CAPTURES("Areas Captured", ItemID.OBELISK);

    final String name;
    final int itemId;

    SoulWarsResource(final String name, final int itemId) {
        this.name = name;
        this.itemId = itemId;
    }
}

/*
 * Copyright (c) 2018, TheLonelyDev <https://github.com/TheLonelyDev>
 * Copyright (c) 2018, Adam <Adam@sigterm.info>
 * Copyright (c) 2022, Trevor <https://github.com/TrevorMDev>
 * Copyright (c) 2024, Lucidare <https://github.com/Lucidare>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.soulwars;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Player;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

import javax.inject.Inject;
import java.awt.*;
import java.util.ArrayList;

@Slf4j
public class CaptureAreaOverlay extends Overlay {

    @Inject
    private final SoulWarsManager soulWarsManager;
    @Inject
    private final Client client;
    @Inject
    private final SoulWarsConfig config;

    @Inject
    public CaptureAreaOverlay(SoulWarsManager soulWarsManager, Client client, SoulWarsConfig config) {
        this.soulWarsManager = soulWarsManager;
        this.client = client;
        this.config = config;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics2D) {
        if (soulWarsManager.regionToCaptureAreaTiles.isEmpty() || !config.highlightCaptureAreas()) {
            return null;
        }

        Stroke stroke = new BasicStroke((float) 0);
        for (final ArrayList<CaptureAreaTile> captureAreaTiles : soulWarsManager.regionToCaptureAreaTiles.values()) {
            for (final CaptureAreaTile tile: captureAreaTiles) {
                drawTile(graphics2D, tile, stroke);
            }
        }

        return null;
    }

    private void drawTile(Graphics2D graphics2D, CaptureAreaTile captureAreaTile, Stroke borderStroke) {
        Player player = client.getLocalPlayer();
        if (player == null) {
            return;
        }

        WorldPoint playerLocation = WorldPoint.fromLocalInstance(client, player.getLocalLocation());

        if (captureAreaTile.worldPoint.distanceTo(playerLocation) >= config.maxDrawDistance()) {
            return;
        }

        for (LocalPoint lp: captureAreaTile.localPoint) {
            if (lp == null) {
                return;
            }

            Polygon poly = Perspective.getCanvasTilePoly(client, lp);
            if (poly != null) {
                Color color = captureAreaTile.color;
                Color fillColor = new Color(color.getRed(), color.getGreen(), color.getBlue(), config.fillOpacity());
                OverlayUtil.renderPolygon(graphics2D, poly, color, fillColor, borderStroke);
            }
        }
    }
}

package com.soulwars;

import net.runelite.api.WorldView;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;

import java.awt.Color;
import java.util.Collection;
import java.util.stream.Collectors;

class CaptureAreaTile {
    SoulWarsRegion region;
    Collection<LocalPoint> localPoint;
    WorldPoint worldPoint;
    Color color;

    CaptureAreaTile(SoulWarsRegion region, WorldPoint point, Color color, WorldView worldView) {
        this.region = region;
        this.worldPoint = point;
        this.localPoint = WorldPoint.toLocalInstance(worldView, point).stream().map(wp -> LocalPoint.fromWorld(worldView, wp)).collect(Collectors.toList());
        this.color = color;
    }

    void updateColor(Color color) {
        this.color = color;
    }
}
package com.soulwars;

import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup(SoulWarsConfig.CONFIG_GROUP)
public interface SoulWarsConfig extends Config
{
	String CONFIG_GROUP = "soul-wars";

	@ConfigSection(
			name = "Tracking",
			description = "Configuration settings related to tracking.",
			position = 0
	)
	String trackingSection = "Tracking";

	@ConfigItem(
			keyName = "trackingMode",
			name = "Tracking Mode",
			description = "Increment or decrement resource counters.",
			position = 1,
			section = trackingSection
	)
	default TrackingMode trackingMode()
	{
		return TrackingMode.INCREMENT;
	}

	@ConfigItem(
			keyName = "removedWhenGoalReached",
			name = "Remove when goal reached",
			description = "Remove counters when desired number is reached.",
			position = 2,
			section = trackingSection
	)
	default boolean removedWhenGoalReached()
	{
		return false;
	}

	@ConfigItem(
			keyName = "showFragmentsSacrificed",
			name = "Show fragments sacrificed",
			description = "Display number of fragments sacrificed",
			position = 3,
			section = trackingSection
	)
	default boolean showFragmentsSacrificed()
	{
		return true;
	}

	@ConfigItem(
			keyName = "fragmentsSacrificed",
			name = "Fragments Sacrificed",
			description = "The desired number of fragments to sacrifice.",
			position = 4,
			section = trackingSection
	)
	default int fragmentsSacrificed()
	{
		return 24;
	}

	@ConfigItem(
			keyName = "showAvatarDamage",
			name = "Show avatar damage",
			description = "Display amount of damage you've done to the avatar",
			position = 5,
			section = trackingSection
	)
	default boolean showAvatarDamage()
	{
		return true;
	}

	@ConfigItem(
			keyName = "avatarDamage",
			name = "Avatar Damage",
			description = "The desired number of avatar damage.",
			position = 6,
			section = trackingSection
	)
	default int avatarDamage()
	{
		return 260;
	}

	@ConfigItem(
			keyName = "showBonesBuried",
			name = "Show bones buried",
			description = "Display number of bones you've buried in your graveyard",
			position = 7,
			section = trackingSection
	)
	default boolean showBonesBuried()
	{
		return true;
	}

	@ConfigItem(
			keyName = "bonesBuried",
			name = "Bones Buried",
			description = "The desired number of bones buried.",
			position = 8,
			section = trackingSection
	)
	default int bonesBuried()
	{
		return 5;
	}

	@ConfigItem(
			keyName = "showCaptures",
			name = "Show captures",
			description = "Display number of times you've captured an obelisk or graveyard",
			position = 9,
			section = trackingSection
	)
	default boolean showCaptures()
	{
		return true;
	}

	@ConfigItem(
			keyName = "captures",
			name = "Captures",
			description = "The desired number of captures.",
			position = 10,
			section = trackingSection
	)
	default int captures()
	{
		return 6;
	}

	@ConfigSection(
			name = "Prevention",
			description = "Configuration settings related to prevention.",
			position = 2
	)
	String preventionSection = "Prevention";

	@ConfigItem(
			keyName = "preventIncorrectSacrifice",
			name = "Prevent incorrect sacrifice",
			description = "Prevent sacrificing fragments when obelisk is not captured.",
			position = 1,
			section = preventionSection
	)
	default boolean preventIncorrectSacrifice()
	{
		return true;
	}

	@ConfigItem(
			keyName = "preventIncorrectBury",
			name = "Prevent incorrect bone bury",
			description = "Prevent burying bones when graveyard is not captured.",
			position = 2,
			section = preventionSection
	)
	default boolean preventIncorrectBury()
	{
		return true;
	}

	@ConfigSection(
			name = "Capture Areas",
			description = "Configuration settings related to rendering capture areas.",
			position = 3
	)
	String captureAreas = "Capture Areas";

	@ConfigItem(
		keyName = "highlightCaptureAreas",
		name = "Highlight capture areas",
		description = "highlight the capture areas.",
		position = 1,
		section = captureAreas
	)
	default boolean highlightCaptureAreas()
	{
		return true;
	}

	@ConfigItem(
			keyName = "maxDrawDistance",
			name = "Max Draw Distance",
			description = "The max draw distance of the capture areas",
			position = 2,
			section = captureAreas
	)
	default int maxDrawDistance() {
		return 32;
	}

	@ConfigItem(
			keyName = "fillOpacity",
			name = "Fill Opacity",
			description = "Opacity of the tile fill color for capture areas",
			position = 3,
			section = captureAreas
	)
	default int fillOpacity() {
		return 50;
	}

	@ConfigSection(
			name = "Idle Activity Notifier",
			description = "Configuration settings related to activity timer.",
			position = 4
	)
	String activityNotifier = "Activity Notifier";

	@ConfigItem(
			keyName = "shouldNotify",
			name = "Enable activity notification",
			description = "Sends a notification when below set activity level.",
			position = 1,
			section = activityNotifier
	)
	default boolean shouldNotify()
	{
		return true;
	}

	@ConfigItem(
			keyName = "activityNotifPercent",
			name = "Notification Threshold",
			description = "The percent of activity when you want to retrieve a notification",
			position = 2,
			section = activityNotifier
	)
	default int activityNotifThreshold() {
		return 20;
	}

	// Constants

	@Getter
	@AllArgsConstructor
	enum TrackingMode
	{
		DECREMENT("Decrement"),
		INCREMENT("Increment");

		private final String name;

		@Override
		public String toString()
		{
			return name;
		}
	}
}

package com.soulwars;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.api.kit.KitType;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.party.PartyService;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.util.Arrays;

import static com.soulwars.SoulWarsManager.*;

@Slf4j
@PluginDescriptor(
	name = "Soul Wars",
	description = "Keeps track of fragments, avatar damage, bones buried, and captures.",
	tags = {"soul", "wars"}
)

public class SoulWarsPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private SoulWarsConfig config;

	@Inject
	private PartyService partyService;
	@Inject
	private SoulWarsManager soulWarsManager;
	@Inject
	private OverlayManager overlayManager;

	private CaptureAreaOverlay overlay;
	private static final int INVENTORY_CLICK = 57;
	private SoulWarsTeam team = SoulWarsTeam.NONE;

	@Override
	protected void startUp() throws Exception
	{
		overlay = new CaptureAreaOverlay(soulWarsManager, client, config);
		overlayManager.add(overlay);

		// Weird edge case: Turned on plugin while in game
		// determine team by checking cape instead
		Player player = client.getLocalPlayer();
		if (player == null)
		{
			return;
		}
		int capeId = player.getPlayerComposition().getEquipmentId(KitType.CAPE);
		if (capeId == SoulWarsTeam.BLUE.itemId) {
			team = SoulWarsTeam.BLUE;
		} else if (capeId == SoulWarsTeam.RED.itemId) {
			team = SoulWarsTeam.RED;
		}

		if (inSoulWarsGame()) {
			soulWarsManager.init(team);
			highlightCaptureAreas(player);
		}
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
		soulWarsManager.reset();
	}


	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged) {
		Player player = client.getLocalPlayer();
		if (player == null) {
			return;
		}
		highlightCaptureAreas(player);
	}

	@Subscribe
	public void onHitsplatApplied(HitsplatApplied hitsplatApplied)
	{
		Actor actor = hitsplatApplied.getActor();
		if (!(actor instanceof NPC))
		{
			return;
		}

		Hitsplat hitsplat = hitsplatApplied.getHitsplat();
		final int npcId = ((NPC) actor).getId();

		if (!AVATARS_IDS.contains(npcId))
		{
			// only track avatars
			return;
		}

		if (hitsplat.isMine()) {
			int hit = hitsplat.getAmount();
			soulWarsManager.dealtAvatarDamage(hit);
		}
	}

	@Provides
	SoulWarsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(SoulWarsConfig.class);
	}

	@Subscribe
	void onConfigChanged(final ConfigChanged event)
	{
		if (!event.getGroup().equals(SoulWarsConfig.CONFIG_GROUP))
		{
			return;
		}

		if (inSoulWarsGame()) {
			soulWarsManager.updateInfoBoxes();
		}
	}

	@Subscribe
	void onChatMessage(final ChatMessage event)
	{
		final ChatMessageType type = event.getType();

		if (type == ChatMessageType.SPAM || type == ChatMessageType.GAMEMESSAGE)
		{
			soulWarsManager.parseChatMessage(event.getMessage(), getWorldPoint());
		}
	}

	@Subscribe
	public void onItemContainerChanged(final ItemContainerChanged event) {
		// Update inventory, update shard count
		boolean foundFragments = false;
		if (event.getContainerId() == InventoryID.INVENTORY.getId()) {
			ItemContainer inventory = event.getItemContainer();
			for (final Item item : inventory.getItems()) {
				if (item.getId() == SoulWarsResource.FRAGMENTS_SACRIFICED.itemId) {
					foundFragments = true;
					soulWarsManager.updateFragmentInInventoryCount(item.getQuantity());
				}
			}
			// no fragments in inventory
			if (!foundFragments) {
				soulWarsManager.updateFragmentInInventoryCount(0);
			}
		}
	}

	@Subscribe
	void onVarbitChanged(final VarbitChanged event)
	{
		final int varbit = event.getVarbitId();

		if (varbit == VARBIT_SOUL_WARS)
		{
			int teamNum = event.getValue();

			// joined game
			if (teamNum != 0) {
				if (teamNum == SoulWarsTeam.BLUE.varbitNum) {
					team = SoulWarsTeam.BLUE;
				} else if (teamNum == SoulWarsTeam.RED.varbitNum) {
					team = SoulWarsTeam.RED;
				}
				soulWarsManager.reset();
				soulWarsManager.init(team);
			}
			// left game
			else {
				team = SoulWarsTeam.NONE;
				soulWarsManager.reset();
			}
		} else if (varbit == VARBIT_SOUL_WARS_ACTIVITY) {
			int activityNum = event.getValue();
			soulWarsManager.updateActivityBar(activityNum);
		}
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event)
	{
		if (!inSoulWarsGame()) {
			return;
		}

		int eventId = event.getId();
		int actionId = event.getMenuAction().getId();
		int itemId = event.getItemId();

		if (config.preventIncorrectSacrifice()) {
			boolean isObeliskClick = eventId == SoulWarsTeam.NONE.obeliskId
					|| eventId == SoulWarsTeam.RED.obeliskId
					|| eventId == SoulWarsTeam.BLUE.obeliskId;

			if (isObeliskClick) {
				 if (!soulWarsManager.shouldSacrificeObelisk()) {
					event.consume();
					client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Preventing sacrificing on incorrect obelisk.", "Soul Wars");
				}
			}
		}
		if (config.preventIncorrectBury()) {
			boolean isBoneClick = actionId == INVENTORY_CLICK && itemId == SoulWarsResource.BONES_BURIED.itemId;
			if (isBoneClick) {
				if (!soulWarsManager.shouldBuryBone(getWorldPoint())) {
					event.consume();
					client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Preventing burying on incorrect graveyard.", "Soul Wars");
				}
			}
		}
	}

	private void highlightCaptureAreas(Player player) {
		int wv = player.getLocalLocation().getWorldView();
		WorldView worldView = client.getWorldView(wv);

		int[] loadedRegionIds = worldView.getScene().getMapRegions();
		int[] loadedSoulWarsRegion = Arrays.stream(loadedRegionIds).filter(SOUL_WARS_ARENA_REGIONS::contains).toArray();
		soulWarsManager.highlightCaptureAreas(loadedSoulWarsRegion, worldView);
	}

	private boolean inSoulWarsGame()
	{
		return team != SoulWarsTeam.NONE;
	}

	private WorldPoint getWorldPoint()
	{
		Player player = client.getLocalPlayer();
		if (player == null)
		{
			return null;
		}
		return WorldPoint.fromLocalInstance(client, player.getLocalLocation());
	}
}

