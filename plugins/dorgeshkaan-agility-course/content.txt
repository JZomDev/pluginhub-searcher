package com.anderzenn.dorgeshkaanagilitycourse;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
@PluginDescriptor(
	name = "Dorgesh-Kaan Agility Course",
	description = "provides quality of life information to-do with the Dorgesh-Kaan agility course",
	tags = {"agility","dorgesh-kaan","dorgesh","kaan","dorgeshkaan","helper","agilityhelper","course","agilitycourse","agility course"}
)
public class DorgeshKaanAgilityCourse extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	ConfigManager configManager;

	@Inject
	DorgeshKaanAgilityCourseConfig config;

	@Inject
	private DorgeshKaanOverlay overlay;

	@Inject
	private SpannerWarningOverlay spannerWarningOverlay;

	private static final int REGION_ID = 10833;

	private static final Pattern REQUEST_PATTERN = Pattern.compile("The engineer asks you to get a (\\w+) or a (\\w+)");

	//public final Map<String, String> itemPaths = new HashMap<>();
	public String requestedItem1 = null;
	public String requestedItem2 = null;
	private boolean wasInRegion = false;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
		overlayManager.add(spannerWarningOverlay);
		//initializeItemPaths();

		// Load saved items in config
		requestedItem1 = config.requestedItem1();
		requestedItem2 = config.requestedItem2();

		updateOverlay();
	}

	@Override
	protected void shutDown() throws Exception {
		overlayManager.remove(overlay);
		overlayManager.remove(spannerWarningOverlay);
		overlay.clearOverlay();
		spannerWarningOverlay.clearWarning();
	}

	/*
	Not currently being used, saved for a future feature where it highlights
	the path you need to take based on if the item you have is heavy or delicate.
	I've kept it in the code for the sake of me actually remembering lol

	private void initializeItemPaths() {
		// Maps items to paths, based on if they're delicate or heavy.
		itemPaths.put("cog", "heavy");
		itemPaths.put("lever", "heavy");
		itemPaths.put("power box", "heavy"); // Power Box
		itemPaths.put("capacitor", "delicate");
		itemPaths.put("fuse", "delicate");
		itemPaths.put("meter", "delicate");
	}
	 */

	private void clearRequestedItems() {
		requestedItem1 = null;
		requestedItem2 = null;

		// Clear items stored in config
		configManager.unsetConfiguration("DorgeshKaanAgilityCourseConfig", "requestedItem1");
		configManager.unsetConfiguration("DorgeshKaanAgilityCourseConfig", "requestedItem2");
	}

	@Subscribe
	public void onChatMessage(ChatMessage event) {
		if (event.getType() != ChatMessageType.GAMEMESSAGE)	return;

		Matcher requestMatcher = REQUEST_PATTERN.matcher(event.getMessage());
		if (requestMatcher.find()) {
			requestedItem1 = requestMatcher.group(1);
			requestedItem2 = requestMatcher.group(2);

			if (requestedItem2.equalsIgnoreCase("power")) requestedItem2 = "power box";

			// Save requested items to config
			configManager.setConfiguration("DorgeshKaanAgilityCourseConfig", "requestedItem1", requestedItem1);
			configManager.setConfiguration("DorgeshKaanAgilityCourseConfig", "requestedItem2", requestedItem2);

			updateOverlay();
			return;
		}

		if (event.getMessage().contains("Your Dorgesh-Kaan Agility lap count is: ")) {
			clearRequestedItems();
			overlay.clearOverlay();
			updateOverlay();
		}
	}

	@Subscribe
	public void onGameTick(GameTick event) {
		boolean inRegion = isInRegion();
		if (inRegion != wasInRegion) {
			wasInRegion = inRegion;
			updateOverlay();
		}

		if (isInRegion()) {
			updateOverlay();
		}
	}

	private void updateOverlay() {
		if (!isInRegion()) {
			overlay.clearOverlay();
			spannerWarningOverlay.clearWarning();
			return;
		}

		if (config.highlightOption()) highlightOption();

		overlay.updateOverlay(requestedItem1, requestedItem2);
		spannerWarningOverlay.updateWarning(displaySpannerWarning());
	}

	private boolean isInRegion() {
		return client.getLocalPlayer() != null && WorldPoint.fromLocal(client, client.getLocalPlayer().getLocalLocation()).getRegionID() == REGION_ID;
	}

	public boolean hasSpanner() {
		ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
		if (inventory != null) {
			for (Item item : inventory.getItems()) {
				if (item.getId() == ItemID.SPANNER) {
					return true;
				}
			}
		}
		return false;
	}

	public boolean displaySpannerWarning() {
		return isInRegion() && !hasSpanner();
	}

	private void highlightOption() {
		clientThread.invokeLater(() -> {
			Widget dialogueOptions = client.getWidget(InterfaceID.DIALOG_OPTION, 1);

			if (dialogueOptions == null) {
				return;
			}

			if (dialogueOptions.getChildren() == null) {
				return;
			}

			for (Widget option : dialogueOptions.getChildren()) {
				if (option != null && option.getText() != null) {
					String optionText = option.getText().trim().toLowerCase();

					if (isRequestedItem(optionText)) {
						option.setTextColor(config.highlightColour().getRGB()); // Colour the correct dialogue option
					}
				}
			}
		});
	}

	private boolean isRequestedItem(String optionText) {
		return optionText != null && (optionText.equalsIgnoreCase(requestedItem1) || optionText.equalsIgnoreCase(requestedItem2));
	}

	@Provides
	DorgeshKaanAgilityCourseConfig dorgeshKaanAgilityCourseConfig(ConfigManager configManager) {
		return configManager.getConfig(DorgeshKaanAgilityCourseConfig.class);
	}
}

package com.anderzenn.dorgeshkaanagilitycourse;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.*;

@ConfigGroup("DorgeshKaanAgilityCourseConfig")
public interface DorgeshKaanAgilityCourseConfig extends Config
{
	@ConfigItem(
			keyName = "highlightOption",
			name = "Highlight Option",
			description = "Highlight the correct item to pick from the boilers"
	)
	default boolean highlightOption() {
		return true;
	}

	@ConfigItem(
			keyName = "highlightColour",
			name = "Highlight Colour",
			description = "Colour of the correct item to pick from the boilers"
	)
	default Color highlightColour() {
		return Color.CYAN;
	}

	@ConfigItem(
			keyName = "requestedItem1",
			name = "Requested item 1",
			description = "Stores the first requested item",
			hidden = true
	)
	default String requestedItem1() {
		return "";
	}

	@ConfigItem(
			keyName = "requestedItem2",
			name = "Requested item 2",
			description = "Stores the second requested item",
			hidden = true
	)
	default String requestedItem2() {
		return "";
	}
}

package com.anderzenn.dorgeshkaanagilitycourse;

import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ComponentOrientation;
import net.runelite.client.ui.overlay.components.ImageComponent;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;

@Slf4j
public class SpannerWarningOverlay extends OverlayPanel {
    private final DorgeshKaanAgilityCourse plugin;

    private BufferedImage spannerIcon;
    private boolean showWarning;

    @Inject
    private SpannerWarningOverlay(DorgeshKaanAgilityCourse plugin) {
        this.plugin = plugin;
        setPosition(OverlayPosition.TOP_LEFT);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
        panelComponent.setWrap(true);
        panelComponent.setOrientation(ComponentOrientation.HORIZONTAL);
        loadSpannerIcon();
    }

    private void loadSpannerIcon() {
        spannerIcon = loadImage();
    }

    private BufferedImage loadImage() {
        try {
            return ImageUtil.loadImageResource(DorgeshKaanAgilityCourse.class, "/Spanner.png");
        } catch (Exception e) {
            log.error("Error loading image: {}", "Spanner.png", e);
            return null;
        }
    }

    public void updateWarning(boolean showWarning) {
        this.showWarning = showWarning;
    }

    public void clearWarning() {
        showWarning = false;
        panelComponent.getChildren().clear();
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        panelComponent.getChildren().clear();

        if (spannerIcon != null && plugin.displaySpannerWarning()) {
                panelComponent.getChildren().add(new ImageComponent(spannerIcon));
                panelComponent.getChildren().add(LineComponent.builder()
                        .right("No Spanner!")
                        .rightColor(Color.RED)
                        .build());
                // Spacing to counter text overlapping with icon
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("")
                        .build());
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("")
                        .build());
                // Text that without the two line components above, overlaps with icon
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Talk to Turgall to receive another.")
                        .build());
            }

        return super.render(graphics);
    }
}

package com.anderzenn.dorgeshkaanagilitycourse;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ComponentOrientation;
import net.runelite.client.ui.overlay.components.ImageComponent;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.HashMap;
import java.util.Map;

@Slf4j
public class DorgeshKaanOverlay extends OverlayPanel {
    private final Client client;
    private final DorgeshKaanAgilityCourse plugin;
    private final Map<String, BufferedImage> itemIcons = new HashMap<>();

    private String requestedItem1;
    private String requestedItem2;

    @Inject
    private DorgeshKaanOverlay(Client client, DorgeshKaanAgilityCourse plugin) {
        super(plugin);
        this.client = client;
        this.plugin = plugin;

        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
        panelComponent.setOrientation(ComponentOrientation.HORIZONTAL);
        panelComponent.setGap(new Point(5, 0));

        loadIcons();
    }

    private void loadIcons() {
        itemIcons.put("capacitor", loadImage("Capacitor.png"));
        itemIcons.put("cog", loadImage("Cog.png"));
        itemIcons.put("fuse", loadImage("Fuse.png"));
        itemIcons.put("lever", loadImage("Lever.png"));
        itemIcons.put("meter", loadImage("Meter.png"));
        itemIcons.put("power box", loadImage("Powerbox.png"));
    }

    private BufferedImage loadImage(String fileName) {
        try {
            return ImageUtil.loadImageResource(DorgeshKaanAgilityCourse.class, "/" + fileName);
        } catch (Exception e) {
            log.error("Error loading image: {}", fileName, e);
            return null;
        }
    }

    public void updateOverlay(String item1, String item2) {
        if (!plugin.hasSpanner()) {
            clearOverlay();
            return;
        }

        this.requestedItem1 = item1;
        this.requestedItem2 = item2;
    }

    public void clearOverlay() {
        requestedItem1 = null;
        requestedItem2 = null;
        panelComponent.getChildren().clear();
    }

    private void addIconToPanel(String itemName) {
        BufferedImage icon = itemIcons.get(itemName);
        if (icon != null) panelComponent.getChildren().add(new ImageComponent(icon));
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        panelComponent.getChildren().clear();

        if (requestedItem1 != null) {
            addIconToPanel(requestedItem1);
        }

        if (requestedItem2 != null) {
            addIconToPanel(requestedItem2);
        }

        return super.render(graphics);
    }
}

package com.anderzenn.dorgeshkaanagilitycourse;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DorgeshKaanAgilityCourseTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(DorgeshKaanAgilityCourse.class);
		RuneLite.main(args);
	}
}
