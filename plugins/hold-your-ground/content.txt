package com.skeldoor;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class HoldYourGroundPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(HoldYourGroundPlugin.class);
		RuneLite.main(args);
	}
}
package com.skeldoor;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.HotkeyListener;
import net.runelite.client.util.Text;

import java.awt.*;
import java.util.Objects;

@Slf4j
@PluginDescriptor(
	name = "Hold Your Ground"
)
public class HoldYourGroundPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private HoldYourGroundConfig config;

	@Inject
	private HoldYourGroundOverlay holdYourGroundOverlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ChatMessageManager chatMessageManager;

	String attackOption = "Attack";
	String magicOption = "Cast";
	String talkMenuOption = "Talk-to";
	String tradeMenuOption =  "Trade";
	String pickpocketMenuOption =  "Pickpocket";
	String useMenuOption = "Use";
	String walkHereMenuOption = "Walk here";

	boolean overrideHoldMove = false;

	@Inject
	private KeyManager keyManager;

	private final HotkeyListener hotkeyListener = new HotkeyListener(() -> config.holdMovingHotkey())
	{
		@Override
		public void hotkeyPressed()
		{
			overrideHoldMove = true;
		}

		@Override
		public void hotkeyReleased()
		{
			overrideHoldMove = false;
		}
	};

	@Override
	protected void startUp()
	{
		keyManager.registerKeyListener(hotkeyListener);
		overlayManager.add(holdYourGroundOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		keyManager.unregisterKeyListener(hotkeyListener);
		overlayManager.remove(holdYourGroundOverlay);
	}

	private boolean playerCanMove(HoldYourGroundConfig config, boolean overrideHoldMove, MenuOptionClicked event){
		if (!config.holdMoving()) {
			// If hold moving feature is not enabled, allow movement
			return true;
		}

		// If hold moving is enabled, check the hotkey inversion logic
		if (config.holdMovingHotkeyInvert()) {
			// If the inversion is true, allow movement when the hotkey is pressed
			return !overrideHoldMove;
		} else {
			// If the inversion is false, block movement when the hotkey is pressed
			return overrideHoldMove;
		}
	}

	@Subscribe
	private void onMenuOptionClicked(MenuOptionClicked event) {
		String target = event.getMenuTarget();
		String menuOption = event.getMenuOption();

		if (Objects.equals(menuOption, walkHereMenuOption)){
			// If holdMoving is enabled, prevent player movement.
			// If we're holding the hotkey, allow movement, unless config.holdMovingHotkeyInvert() is true
			if (!playerCanMove(config, overrideHoldMove, event)) {
				event.consume();
				sendHighlightedChatMessage("Player movement is disabled");
			}
		}

		int identifier = event.getMenuEntry().getIdentifier();
		final NPC[] cachedNPCs = client.getCachedNPCs();
		final NPC npc = cachedNPCs[identifier];

		if (npc == null) return;
		if (npc.getName() == null) return;

		WorldArea start = client.getLocalPlayer().getWorldArea();
		boolean hasLineOfSight = HoldYourGroundUtils.hasLineOfSight(client, start, npc.getLocalLocation());
		boolean isWithinRange = HoldYourGroundUtils.isWithinRange(client, start, npc.getLocalLocation(), config.maxTileRange());

		// If we don't have line of sight or aren't within configured range, consume the click to stop it happening
		if (config.holdAttacks()     && Objects.equals(menuOption, attackOption) ||
			config.holdSpells()      && Objects.equals(menuOption, magicOption) ||
			config.holdTalkTo()      && Objects.equals(menuOption, talkMenuOption) ||
			config.holdTrades()      && Objects.equals(menuOption, tradeMenuOption) ||
			config.holdPickpockets() && Objects.equals(menuOption, pickpocketMenuOption) ||
			config.holdUses()        && Objects.equals(menuOption, useMenuOption)
		){
			if (!hasLineOfSight) {
				event.getMenuEntry().setTarget(ColorUtil.prependColorTag(Text.removeTags(target),Color.black));
				event.getMenuEntry().setDeprioritized(true);
				event.consume();
				sendHighlightedChatMessage("No line of sight to your target to " + menuOption);
			} else if (!isWithinRange) {
				event.getMenuEntry().setTarget(ColorUtil.prependColorTag(Text.removeTags(target),Color.black));
				event.getMenuEntry().setDeprioritized(true);
				event.consume();
				sendHighlightedChatMessage("Your target is too far to " + menuOption);
			} else if (config.requireStationary() && npc.getPoseAnimation() != npc.getIdlePoseAnimation()){
				event.getMenuEntry().setTarget(ColorUtil.prependColorTag(Text.removeTags(target),Color.black));
				event.getMenuEntry().setDeprioritized(true);
				event.consume();
				sendHighlightedChatMessage("Your target is moving");
			}
		}
	}

	private void sendHighlightedChatMessage(String message) {
		if (!config.chatMessages()) return;
		ChatMessageBuilder msg = new ChatMessageBuilder()
				.append(ChatColorType.HIGHLIGHT)
				.append(message);

		chatMessageManager.queue(QueuedMessage.builder()
				.type(ChatMessageType.CONSOLE)
				.runeLiteFormattedMessage(msg.build())
				.build());
	}

	@Provides
	HoldYourGroundConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(HoldYourGroundConfig.class);
	}
}

package com.skeldoor;

import net.runelite.api.Client;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;

public class HoldYourGroundUtils {

    public static boolean hasLineOfSight(Client client, WorldArea start, LocalPoint targetLocalPoint)
    {
        WorldPoint targetWorldPoint = WorldPoint.fromLocal(client, targetLocalPoint);
        return start.hasLineOfSightTo(client.getTopLevelWorldView(), targetWorldPoint);
    }

    public static boolean isWithinRange(Client client, WorldArea start, LocalPoint targetLocalPoint, int range){
        WorldPoint targetWorldPoint = WorldPoint.fromLocal(client, targetLocalPoint);

        int xDiff = Math.abs(start.getX() - targetWorldPoint.getX());
        int yDiff = Math.abs(start.getY() - targetWorldPoint.getY());

        // If range is 1 we must be EXACTLY 1 tile away as melee/pickpockets will move our character to an adjacent tile
        // Range calculations in runescape work on a square, so you can shoot further on diagonals
        if (range == 1){
            return (xDiff == range && yDiff == 0 ) || (xDiff == 0 && yDiff == range );
        } else  {
            return xDiff <= range && yDiff <= range;
        }
    }
}

package com.skeldoor;

import net.runelite.api.Client;
import net.runelite.api.Constants;
import net.runelite.api.Perspective;
import net.runelite.api.Tile;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldArea;
import net.runelite.client.ui.overlay.*;

import javax.inject.Inject;
import java.awt.*;

public class HoldYourGroundOverlay extends Overlay {

    @Inject
    private Client client;

    @Inject
    private HoldYourGroundConfig config;

    @Inject
    private HoldYourGroundOverlay() {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
        setPriority(OverlayPriority.HIGHEST);
    }

    private void renderTileIfHasLineOfSight(Graphics2D graphics, WorldArea start, LocalPoint targetLocalPoint, Polygon polyToRender)
    {
        Color tileColour = Color.red;
        if (HoldYourGroundUtils.hasLineOfSight(client, start, targetLocalPoint) &&
            HoldYourGroundUtils.isWithinRange(client, start, targetLocalPoint, config.maxTileRange())) {
            tileColour = Color.green;
        }
        OverlayUtil.renderPolygon(graphics, polyToRender, tileColour);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (!config.showOverlay()) return null;
        WorldArea start = client.getLocalPlayer().getWorldArea();
        Tile[][][] tiles = client.getScene().getTiles();
        int z = client.getPlane();
        for (int x = 0; x < Constants.SCENE_SIZE; ++x)
        {
            for (int y = 0; y < Constants.SCENE_SIZE; ++y) {
                Tile tile = tiles[z][x][y];
                final LocalPoint tileLocalLocation = tile.getLocalLocation();
                Polygon poly = Perspective.getCanvasTilePoly(client, tileLocalLocation);
                if (poly != null && poly.contains(client.getMouseCanvasPosition().getX(), client.getMouseCanvasPosition().getY()))
                {
                    renderTileIfHasLineOfSight(graphics, start, tileLocalLocation, poly);
                }
            }
        }
        return null;
    }
}

package com.skeldoor;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Keybind;

@ConfigGroup("Hold Your Ground")
public interface HoldYourGroundConfig extends Config
{
	@ConfigItem(
		keyName = "maxTileRange",
		name = "Max Tile Range",
		description = "How far your interaction range extends. Conversations/Pickpocketing/Salamander = 1, Shortbow/Powered Staff = 7, Shortbow(def) = 9, Spells = 10",
		position = 0
	)
	default int maxTileRange()
	{
		return 1;
	}

	@ConfigItem(
		keyName = "holdAttacks",
		name = "Hold your attacks",
		description = "Whether your attacks will be held back",
		position = 1
	)
	default boolean holdAttacks()
	{
		return true;
	}

	@ConfigItem(
		keyName = "holdSpells",
		name = "Hold your spells",
		description = "Whether your spell casts will be held back",
		position = 2
	)
	default boolean holdSpells()
	{
		return true;
	}

	@ConfigItem(
		keyName = "holdTalkTo",
		name = "Hold your conversations",
		description = "Whether your conversations (Talk to) will be held back",
		position = 3
	)
	default boolean holdTalkTo()
	{
		return true;
	}

	@ConfigItem(
		keyName = "holdTrades",
		name = "Hold your trades",
		description = "Whether your trade will be held back",
		position = 4
	)
	default boolean holdTrades()
	{
		return true;
	}

	@ConfigItem(
		keyName = "holdPickpockets",
		name = "Hold your pickpockets",
		description = "Whether your pickpockets will be held back",
		position = 5
	)
	default boolean holdPickpockets()
	{
		return true;
	}

	@ConfigItem(
		keyName = "holdUses",
		name = "Hold your uses",
		description = "Whether your item uses (Use item on) will be held back",
		position = 6
	)
	default boolean holdUses()
	{
		return true;
	}

	@ConfigItem(
		keyName = "holdMoving",
		name = "Hold your horses",
		description = "Whether your character movements will be held back",
		position = 7
	)
	default boolean holdMoving()
	{
		return true;
	}

	@ConfigItem(
			keyName = "holdMovingHotkey",
			name = "Hold your horses hotkey",
			description = "Hold this key down to allow movement again, good for repositioning your character (unset to disable)",
			position = 8
	)
	default Keybind holdMovingHotkey()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
			keyName = "holdMovingHotkeyInvert",
			name = "Invert hold your horses hotkey",
			description = "Invert the action of the above hotkey",
			position = 9
	)
	default boolean holdMovingHotkeyInvert()
	{
		return false;
	}

	@ConfigItem(
		keyName = "requireStationary",
		name = "Require stationary",
		description = "Require that the NPC is not moving",
		position = 10
	)
	default boolean requireStationary()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showOverlay",
		name = "Show overlay",
		description = "Whether the npc overlay shows on their tile",
		position = 11
	)
	default boolean showOverlay()
	{
		return false;
	}

	@ConfigItem(
		keyName = "chatMessages",
		name = "Show chat messages",
		description = "Whether chat will be populated with the reason for a held click",
		position = 12
	)
	default boolean chatMessages()
	{
		return true;
	}

}

