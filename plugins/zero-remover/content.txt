package com.zeroremover;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ZeroRemoverPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ZeroRemoverPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2021, GeChallengeM <github.com/GeChallengeM>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.zeroremover;

import com.google.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.MessageNode;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.widgets.Widget;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

@PluginDescriptor(
		name = "Zero Remover",
		description = "Removes the redundant 0 from precise timers.",
		tags = {"zero","timer","remove","0"}
)

@Slf4j
public class ZeroRemoverPlugin extends Plugin
{
	@Inject
	private Client client;

	private boolean ShouldReplace = false;
	private boolean ReplaceNow = false;

	@Override
	protected void startUp()
	{
		ShouldReplace = true;
	}

	@Override
	protected void shutDown()
	{
		ShouldReplace = false;
	}

	@Subscribe
	public void onWidgetLoaded(WidgetLoaded event)
	{
		ReplaceNow = true;
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		if (ShouldReplace && ReplaceNow)
		{
			if (client.isResized())
			{
				ReplaceWText(new Widget[]{client.getWidget(10551316)}); //Classic
				ReplaceWText(new Widget[]{client.getWidget(10747924)}); //Modern
			}
			else
			{
				ReplaceWText(new Widget[]{client.getWidget(35913756)});
			}
			ReplaceNow = false;
		}
	}

	private void ReplaceWText(Widget[] parent)
	{
		if (parent == null)
		{
			return;
		}
		for (Widget w : parent)
		{
			if (w != null)
			{
				final String message = w.getText();
				if (message != null) {
					String replacement = message.replaceAll("([0-9]*?:*)([0-9]{1,2})\\.([0-9])0", "$1$2.$3");
					w.setText(replacement);
				}
				ReplaceWText(w.getNestedChildren());
				ReplaceWText(w.getStaticChildren());
			}
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage)
	{
		if (!ShouldReplace)
		{
			return;
		}
		ChatMessageType chatMessageType = chatMessage.getType();
		if (chatMessageType == ChatMessageType.GAMEMESSAGE || chatMessageType == ChatMessageType.FRIENDSCHATNOTIFICATION)
		{
			MessageNode messageNode = chatMessage.getMessageNode();
			final String message = messageNode.getValue();
			String replacement = message.replaceAll("([0-9]*?:*)([0-9]{1,2})\\.([0-9])0","$1$2.$3");
			messageNode.setValue(replacement);
		}
	}
}
