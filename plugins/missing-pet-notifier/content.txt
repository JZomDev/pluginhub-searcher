package com.missingpetnotifier;

import static com.missingpetnotifier.PetHandler.itemMatchesPet;
import com.google.inject.Provides;
import java.util.Arrays;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.events.ActorDeath;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Missing Pet Notifier"
)
public class MissingPetNotifierPlugin extends Plugin
{
	@Inject
	private Client client;
	@Inject
	private MissingPetNotifierConfig config;
	@Inject
	private OverlayManager overlayManager;
	@Inject
	private ConfigManager configManager;

	private MissingPetNotifierOverlay overlay;

	private static final String CONFIG_GROUP = "missingpetnotifier";
	@Getter
	private boolean shouldSeePet = false;
	@Getter
	private int numMissingTicks = 0;
	private String followerName;

	@Override
	protected  void startUp()
	{
		overlay = new MissingPetNotifierOverlay();
		followerName = configManager.getConfiguration(CONFIG_GROUP, "last_pet");
		shouldSeePet = followerName != null;
		PetHandler.init();
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
		overlay = null;
		configManager.setConfiguration(CONFIG_GROUP, "last_pet", followerName);
		followerName = null;
		shouldSeePet = false;
		numMissingTicks = 0;
		PetHandler.reset();
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		String message = event.getMessage();
		if (ChatMessageType.GAMEMESSAGE.equals(event.getType()) && message.contains("You do not have a follower."))
		{
			followerName = null;
			shouldSeePet = false;
		}
	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned event)
	{
		if (event.getNpc() == client.getFollower())
		{
			followerName = client.getFollower().getName();
			shouldSeePet = true;
		}
	}

	@Subscribe
	public void onActorDeath(ActorDeath event)
	{
		if (event.getActor() == client.getLocalPlayer())
		{
			shouldSeePet = false;
			followerName = null;
		}
	}

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event)
	{
		if (event.getContainerId() != InventoryID.INVENTORY.getId() || followerName == null)
		{
			return;
		}
		Item[] inventoryItems = event.getItemContainer().getItems();
		final boolean didPickUpPet = Arrays.stream(inventoryItems)
			.anyMatch(item -> itemMatchesPet(client.getItemDefinition(item.getId()).getName(), followerName));
		shouldSeePet = !didPickUpPet;
		if (didPickUpPet)
		{
			followerName = null;
		}
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		if (shouldSeePet && client.getFollower() == null)
		{
			if (numMissingTicks >= config.timeMissingDelay())
			{
				overlayManager.add(overlay);
			}
			else
			{
				numMissingTicks++;
			}
		}
		else
		{
			followerName = client.getFollower() == null ? null : client.getFollower().getName();
			numMissingTicks = 0;
			overlayManager.remove(overlay);
		}
	}

	@Provides
	MissingPetNotifierConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(MissingPetNotifierConfig.class);
	}
}

package com.missingpetnotifier;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class PetHandler
{
	private static ImmutableMap<String, String> itemToNpcMap;
	private static ImmutableSet<String> baseItems;
	private static ImmutableSet<String> baseNpcs;
	private static ImmutableMap<String, String> itemVariantsToBase;
	private static ImmutableMap<String, String> npcVariantsToBase;

	private static String dedupeNpc(String npcName)
	{
		if (baseNpcs.contains(npcName))
		{
			return npcName;
		}
		if (npcVariantsToBase.containsKey(npcName))
		{
			return npcVariantsToBase.get(npcName);
		}

		log.debug("Unrecognized pet npc name: {}", npcName);
		return npcName;
	}

	private static String dedupeItem(String itemName)
	{
		if (baseItems.contains(itemName))
		{
			return itemName;
		}
		if (itemVariantsToBase.containsKey(itemName))
		{
			return itemVariantsToBase.get(itemName);
		}
		log.debug("Unrecognized pet item name: {}", itemName);

		return itemName;
	}

	public static boolean itemMatchesPet(String itemName, String followerName)
	{
		final String dedupedNpcName = dedupeNpc(followerName);
		final String dedupedItemName = dedupeItem(itemName);
		return dedupedItemName.equalsIgnoreCase(dedupedNpcName) ||
			(itemToNpcMap.containsKey(dedupedItemName) && itemToNpcMap.get(dedupedItemName).equals(dedupedNpcName));
	}

	public static void init()
	{
		itemToNpcMap = ImmutableMap.<String, String>builder()
			.put("Pet snakeling", "Snakeling")
			.put("Pet chaos elemental", "Chaos Elemental Jr.")
			.put("Pet dagannoth prime", "Dagannoth Prime Jr.")
			.put("Pet dagannoth rex", "Dagannoth Rex Jr.")
			.put("Pet dagannoth supreme", "Dagannoth Supreme Jr.")
			.put("Pet dark core", "Dark core")
			.put("Pet general graardor", "General Graardor Jr.")
			.put("Pet k'ril tsutsaroth", "K'ril Tsutsaroth Jr.")
			.put("Pet kraken", "Kraken")
			.put("Pet kree'arra", "Kree'arra Jr.")
			.put("Pet smoke devil", "Smoke Devil")
			.put("Pet zilyana", "Zilyana Jr.")
			.put("Pet penance queen", "Penance Pet")
			.build();

		itemVariantsToBase = ImmutableMap.<String, String>builder()
			.put("Baby mole-rat", "Baby mole")
			.put("Little parasite", "Little nightmare")
			.put("Tzrek-zuk", "Jal-nib-rek")
			.put("Pet corporeal critter", "Pet dark core")
			.put("Lil' maiden", "Lil' zik")
			.put("Lil' bloat", "Lil' zik")
			.put("Lil' nylo", "Lil' zik")
			.put("Lil' sot", "Lil' zik")
			.put("Lil' xarp", "Lil' zik")
			.put("Rax", "Nid")
			.put("Midnight", "Noon")
			.put("Puppadile", "Olmlet")
			.put("Tektiny", "Olmlet")
			.put("Enraged tektiny", "Olmlet")
			.put("Vanguard", "Olmlet")
			.put("Vasa minirio", "Olmlet")
			.put("Vespina", "Olmlet")
			.put("Flying vespina", "Olmlet")
			.put("Tumeken's damaged guardian", "Tumeken's guardian")
			.put("Elidinis' guardian", "Tumeken's guardian")
			.put("Elidinis' damaged guardian", "Tumeken's guardian")
			.put("Akkhito", "Tumeken's guardian")
			.put("Babi", "Tumeken's guardian")
			.put("Kephriti", "Tumeken's guardian")
			.put("Zebo", "Tumeken's guardian")
			.put("Jalrek-jad", "Tzrek-jad")
			.put("Corrupted youngllef", "Youngllef")
			.put("Dark squirrel", "Giant squirrel")
			.put("Bone squirrel", "Giant squirrel")
			.put("Great blue heron", "Heron")
			.put("Greatish guardian", "Rift guardian")
			.put("Ziggy", "Rocky")
			.put("Red", "Rocky")
			.put("Lil' destructor", "Lil' creator")
			.put("Fox", "Beaver")
			.put("Pheasant", "Beaver")
			.put("Ric", "Bran")
			.build();

		npcVariantsToBase = ImmutableMap.<String, String>builder()
			.put("Baby Mole-rat", "Baby Mole")
			.put("TzRek-Zuk", "Jal-Nib-Rek")
			.put("Little Parasite", "Little Nightmare")
			.put("Corporeal Critter", "Dark core")
			.put("Lil' Maiden", "Lil' Zik")
			.put("Lil' Bloat", "Lil' Zik")
			.put("Lil' Nylo", "Lil' Zik")
			.put("Lil' Sot", "Lil' Zik")
			.put("Lil' Xarp", "Lil' Zik")
			.put("Rax", "Nid")
			.put("Midnight", "Noon")
			.put("Puppadile", "Olmlet")
			.put("Tektiny", "Olmlet")
			.put("Enraged Tektiny", "Olmlet")
			.put("Vanguard", "Olmlet")
			.put("Vasa Minirio", "Olmlet")
			.put("Vespina", "Olmlet")
			.put("Flying Vespina", "Olmlet")
			.put("Tumeken's Damaged Guardian", "Tumeken's Guardian")
			.put("Elidinis' Guardian", "Tumeken's Guardian")
			.put("Elidinis' Damaged Guardian", "Tumeken's Guardian")
			.put("Akkhito", "Tumeken's Guardian")
			.put("Babi", "Tumeken's Guardian")
			.put("Kephriti", "Tumeken's Guardian")
			.put("Zebo", "Tumeken's Guardian")
			.put("JalRek-Jad", "TzRek-Jad")
			.put("Corrupted Youngllef", "Youngllef")
			.put("Dark Squirrel", "Giant Squirrel")
			.put("Bone Squirrel", "Giant Squirrel")
			.put("Great blue heron", "Heron")
			.put("Greatish guardian", "Rift guardian")
			.put("Ziggy", "Rocky")
			.put("Red", "Rocky")
			.put("Lil' Destructor", "Lil' Creator")
			.put("Fox", "Beaver")
			.put("Pheasant", "Beaver")
			.put("Ric", "Bran")
			.build();

		baseItems = itemToNpcMap.keySet();
		baseNpcs = ImmutableSet.<String>builder()
			.addAll(itemToNpcMap.values())
			.build();
	}

	public static void reset()
	{
		itemToNpcMap = null;
		baseNpcs = null;
		baseItems = null;
		itemVariantsToBase = null;
		npcVariantsToBase = null;
	}
}

package com.missingpetnotifier;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("missingpetnotifier")
public interface MissingPetNotifierConfig extends Config
{
	@ConfigItem(
		keyName = "timeMissingDelay",
		name = "Time Missing Delay",
		description = "The number of ticks your pet is missing before alerting"
	)
	default int timeMissingDelay()
	{
		return 5;
	}
}

package com.missingpetnotifier;

import java.awt.Dimension;
import java.awt.Graphics2D;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

public class MissingPetNotifierOverlay extends OverlayPanel
{
	private static final String MISSING_PET_TEXT = "Your pet is missing!";

	@Override
	public Dimension render(Graphics2D graphics)
	{
		panelComponent.getChildren().clear();
		panelComponent.getChildren().add((LineComponent.builder().left(MISSING_PET_TEXT).build()));
		setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
		return panelComponent.render(graphics);
	}
}

package com.missingpetnotifier;

import static com.missingpetnotifier.PetHandler.itemMatchesPet;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.Test;

public class PetHandlerTest
{
	@Before
	public void init()
	{
		PetHandler.init();
	}

	@Test
	public void GIVEN_matchingItemAndNpcNames_WHEN_itemMatchesPet_THEN_returnsTrue()
	{
		String npcName = "Jal-Nib-Rek";
		String itemName = "jal-nib-rek";

		assertTrue(itemMatchesPet(itemName, npcName));
	}

	@Test
	public void GIVEN_npcVariants_WHEN_itemMatchesPet_THEN_returnsTrue()
	{
		String npcName = "Tektiny";
		String itemName = "Flying vespina";

		assertTrue(itemMatchesPet(itemName, npcName));
	}

	@Test
	public void GIVEN_itemAndNpcMismatch_WHEN_itemMatchesPet_THEN_returnsTrue()
	{
		String npcName = "K'ril Tsutsaroth Jr.";
		String itemName = "Pet k'ril tsutsaroth";

		assertTrue(itemMatchesPet(itemName, npcName));
	}
}

package com.missingpetnotifier;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class MissingPetNotifierPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(MissingPetNotifierPlugin.class);
		RuneLite.main(args);
	}
}
