
package com.ondrad.nekos;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import okhttp3.OkHttpClient;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

@Slf4j
@PluginDescriptor(
		name = "Nekos",
		description = "Displays a cute neko on the screen",
		tags = {"anime", "neko", "overlay", "catgirl, kitsune, cat"}
)
public class nekoPlugin extends Plugin {

	@Inject
	private nekoConfig 	config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private GetRequest getRequest;

	@Inject
	private nekoOverlay overlay;
	private ScheduledExecutorService executorService;

	@Override
	protected void startUp() {
		overlayManager.add(overlay);
		executorService = Executors.newSingleThreadScheduledExecutor();
		int delaySeconds = config.delaySeconds();
		executorService.scheduleAtFixedRate(this::fetchNekoImage, 0, delaySeconds, TimeUnit.SECONDS);
	}

	private void fetchNekoImage() {
		String endpoint;
		switch (config.type()) {
			case NEKOS:
				endpoint = "https://nekos.life/api/v2/img/neko";
				break;
			case CATS:
				endpoint = "https://nekos.life/api/v2/img/meow";
				break;
			case KITSUNE:
				endpoint = "https://nekos.life/api/v2/img/fox_girl";
				break;
			default:
				endpoint = "https://nekos.life/api/v2/img/neko";
				break;
		}

		try {
			BufferedImage image = getRequest.GETRequest(endpoint);
				if (image != null) {
				overlay.updateImage(image);
			}
		} catch (IOException ex) {
			log.error("Failed to fetch image", ex);
		}
	}

	@Override
	protected void shutDown() {
		overlayManager.remove(overlay);
		if (executorService != null) {
			executorService.shutdown();
		}
	}

	@Provides
	nekoConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(nekoConfig.class);
	}
}

package com.ondrad.nekos;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;

import java.awt.*;

@ConfigGroup("nekoconfig")
public interface nekoConfig extends Config
{

	enum ImageType {
		NEKOS,
		CATS,
		KITSUNE
	}
	@ConfigItem(
			position = 1,
			keyName = "type",
			name = "Type:",
			description = "Choose the type of image to display"
	)
	default ImageType type() {
		return ImageType.NEKOS;
	}


	@ConfigItem(
			position = 5,
			keyName = "xpos",
			name = "X Position",
			description = "X position of the image"
	)
	default int xpos() { return 9; }

	@ConfigItem(
			position = 6,
			keyName = "ypos",
			name = "Y position",
			description = "Y position of the image"
	)
	default int ypos()
	{
		return 147;
	}

	@ConfigItem(
			position = 2,
			keyName = "delaySeconds",
			name = "Delay in seconds",
			description = "The delay between images in seconds"
	)
	@Range(
			min = 1
	)
	default int delaySeconds()
	{
		return 10;
	}

	@ConfigItem(
			position = 3,
			keyName = "Dimensions",
			name = "Dimensions",
			description = "witdth and height of the image"
	)
	default Dimension dimension()
	{
		return new Dimension(200, 300);
	}

	@ConfigItem(
			position = 4,
			keyName = "opacity",
			name = "Opacity",
			description = "Opacity of the image in %"
	)
	@Range(
			min = 0,
			max = 100
	)
	default int opacity()
	{
		return 100;
	}

}

package com.ondrad.nekos;

import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;

public class nekoOverlay extends Overlay {
    private static class ImageState {
        final BufferedImage image;
        final boolean loaded;

        ImageState(BufferedImage image, boolean loaded) {
            this.image = image;
            this.loaded = loaded;
        }
    }

    private volatile ImageState imageState = new ImageState(null, false);
    @Inject
    private nekoConfig config;

    @Inject
    nekoOverlay() {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ALWAYS_ON_TOP);
    }

    @Override
    public Dimension render(Graphics2D graphics) {

        final ImageState currentState = imageState;

        if (currentState.loaded && currentState.image != null) {

            graphics.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, (float) config.opacity() / 100));


            graphics.drawImage(
                    currentState.image,
                    config.xpos(),
                    config.ypos(),
                    config.dimension().width,
                    config.dimension().height,
                    null
            );

        }


        return new Dimension(1, 1);
    }

    public void updateImage(BufferedImage newImage) {
        imageState = new ImageState(newImage, newImage != null);
    }
}
package com.ondrad.nekos;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import javax.imageio.ImageIO;
import javax.inject.Inject;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;

public class GetRequest {
    private final OkHttpClient client;
@Inject
    public GetRequest(OkHttpClient client) {
        this.client = client;
    }

    public BufferedImage GETRequest(String endpoint) throws IOException {
        Request apiRequest = new Request.Builder()
                .url(endpoint)
                .get()
                .build();

        try (Response apiResponse = client.newCall(apiRequest).execute()) {
            if (!apiResponse.isSuccessful()) {
                return null;
            }

            String jsonResponse = apiResponse.body().string();
            String imageUrl = jsonResponse
                    .replace("{\"url\":\"", "")
                    .replace("\"}", "");

            Request imageRequest = new Request.Builder()
                    .url(imageUrl)
                    .build();

            try (Response imageResponse = client.newCall(imageRequest).execute()) {
                if (!imageResponse.isSuccessful()) {
                    return null;
                }

                try (InputStream inputStream = imageResponse.body().byteStream()) {
                    return ImageIO.read(inputStream);
                }
            }
        }
    }
}
package com.ondrad.nekos;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class nekoPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(nekoPlugin.class);
		RuneLite.main(args);
	}
}
