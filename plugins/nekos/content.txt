package com.ondrad.nekos;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class nekoPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(nekoPlugin.class);
		RuneLite.main(args);
	}
}
package com.ondrad.nekos;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.*;

@ConfigGroup("nekoconfig")
public interface nekoConfig extends Config
{
	@ConfigItem(
			keyName = "xpos",
			name = "X Position",
			description = "X position of the image"
	)
	default int xpos()
	{
		return 9;
	}

	@ConfigItem(
			keyName = "ypos",
			name = "Y position",
			description = "Y position of the image"
	)
	default int ypos()
	{
		return 147;
	}

	@ConfigItem(
			keyName = "delaySeconds",
			name = "Delay in seconds",
			description = "The delay between images in seconds"
	)
	default int delaySeconds()
	{
		return 10;
	}

	@ConfigItem(
			keyName = "Dimensions",
			name = "Dimensions",
			description = "witdth and height of the image"
	)
	default Dimension dimension()
	{
		return new Dimension(350, 479);
	}

	@ConfigItem(
			keyName = "opacity",
			name = "Opacity",
			description = "Opacity of the image in %"
	)
	default int opacity()
	{
 		return 100;
	}

}

package com.ondrad.nekos;

import com.google.inject.Provides;

import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import javax.swing.Timer;

import java.io.IOException;

@Slf4j
@PluginDescriptor(
		name = "Nekos",
		description = "Displays a cute neko",
		tags = {"anime", "neko", "overlay", "catgirl"}
)
public class nekoPlugin extends Plugin {

	@Inject
	private nekoConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private nekoOverlay overlay;
	private Timer timer;


	@Override
	protected void startUp(){

		overlayManager.add(overlay);

		int delaySeconds = config.delaySeconds();
		int delayMillis = delaySeconds * 1000;

		timer = new Timer(delayMillis, e -> {
			try {
				overlay.GETRequest();
			} catch (IOException ex) {
				throw new RuntimeException(ex);
			}
		});
		timer.start();

	}


	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
		timer.stop();
	}


	@Provides
	nekoConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(nekoConfig.class);
	}
}

package com.ondrad.nekos;

import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

import javax.imageio.ImageIO;
import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

public class nekoOverlay extends Overlay {

    private BufferedImage image;

    @Inject
    private nekoConfig config;


    @Inject
    nekoOverlay() {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ALWAYS_ON_TOP);
    }


    public void GETRequest() throws IOException {
        String urlName = "https://nekos.life/api/v2/img/neko";
        URL urlForGetReq = new URL(urlName);
        String read;
        HttpURLConnection connection = (HttpURLConnection) urlForGetReq.openConnection();
        connection.setRequestMethod("GET");
        connection.setRequestProperty("Cache-Control", "no-cache");
        int codeResponse = connection.getResponseCode();
        if (codeResponse == HttpURLConnection.HTTP_OK) {
            InputStreamReader isrObj = new InputStreamReader(connection.getInputStream());
            BufferedReader bf = new BufferedReader(isrObj);
            StringBuilder responseStr = new StringBuilder();
            while ((read = bf.readLine()) != null) {
                responseStr.append(read);
            }
            bf.close();
            connection.disconnect();

            //IDK how to make this better
            String responseStrString = responseStr.toString();
            String replacedresponse = responseStrString.replace("{\"url\":\"", "");
            String replacedresponse2 = replacedresponse.replace("\"}", "");

            URL imageUrl = new URL(replacedresponse2);

            synchronized (ImageIO.class)
            {
                image = ImageIO.read(imageUrl);
            }

        } else {
            System.out.println("GET Request did not work");
        }

    }




    @Override
    public Dimension render(Graphics2D graphics)
    {
        AlphaComposite ac = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, (float) config.opacity() / 100);
        graphics.setComposite(ac);
        graphics.drawImage(image.getScaledInstance(config.dimension().width, config.dimension().height, Image.SCALE_SMOOTH), config.xpos(), config.ypos(), null);
        return null;
    }
}

