package com.duckblade.osrs.comborunes;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ComboRunesOnlyPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ComboRunesOnlyPlugin.class);
		RuneLite.main(args);
	}
}
package com.duckblade.osrs.comborunes;

import java.util.function.Function;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.coords.WorldPoint;

@RequiredArgsConstructor
public enum Altar
{

	AIR(11339, ComboRunesOnlyConfig::removeAir),
	WATER(10827, ComboRunesOnlyConfig::removeWater),
	EARTH(10571, ComboRunesOnlyConfig::removeEarth),
	FIRE(10315, ComboRunesOnlyConfig::removeFire);

	private final int region;
	private final Function<ComboRunesOnlyConfig, Boolean> configGetter;

	@Getter
	private boolean configEnabled;

	public boolean inAltar(WorldPoint wp)
	{
		return wp.getRegionID() == this.region;
	}

	public void refreshConfig(ComboRunesOnlyConfig config)
	{
		this.configEnabled = configGetter.apply(config);
	}

	public static void refreshAllConfig(ComboRunesOnlyConfig config)
	{
		for (Altar a : Altar.values())
		{
			a.refreshConfig(config);
		}
	}

}
package com.duckblade.osrs.comborunes;

import java.util.Arrays;
import java.util.function.Function;
import lombok.RequiredArgsConstructor;
import net.runelite.api.MenuEntry;

@RequiredArgsConstructor
public enum RemoveMode
{

	REMOVE_COMPLETELY(menuEntries ->
		Arrays.stream(menuEntries)
			.filter(me -> !ComboRunesOnlyPlugin.isCraftRuneEntry(me))
			.toArray(MenuEntry[]::new)
	),
	DEPRIORITIZE(menuEntries ->
	{
		Arrays.stream(menuEntries)
			.filter(ComboRunesOnlyPlugin::isCraftRuneEntry)
			.findFirst()
			.ifPresent(me -> me.setDeprioritized(true));
		return menuEntries;
	}
	),
	;

	private final Function<MenuEntry[], MenuEntry[]> menuEntryModifier;

	public MenuEntry[] processMenuEntries(MenuEntry[] menuEntries)
	{
		return this.menuEntryModifier.apply(menuEntries);
	}

}
package com.duckblade.osrs.comborunes;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(ComboRunesOnlyConfig.CONFIG_GROUP)
public interface ComboRunesOnlyConfig extends Config
{

	String CONFIG_GROUP = "comborunesonly";
	String UPDATE_VERSION_KEY_NAME = "updateVersion";

	@ConfigItem(
		keyName = "removeAir",
		name = "Remove for Air Altar",
		description = "Remove left-click craft-rune from the Air Altar.",
		position = 1
	)
	default boolean removeAir()
	{
		return true;
	}

	@ConfigItem(
		keyName = "removeWater",
		name = "Remove for Water Altar",
		description = "Remove left-click craft-rune from the Water Altar.",
		position = 2
	)
	default boolean removeWater()
	{
		return true;
	}

	@ConfigItem(
		keyName = "removeEarth",
		name = "Remove for Earth Altar",
		description = "Remove left-click craft-rune from the Earth Altar.",
		position = 3
	)
	default boolean removeEarth()
	{
		return true;
	}

	@ConfigItem(
		keyName = "removeFire",
		name = "Remove for Fire Altar",
		description = "Remove left-click craft-rune from the Fire Altar.",
		position = 4
	)
	default boolean removeFire()
	{
		return true;
	}

	@ConfigItem(
		keyName = "removeMode",
		name = "Mode",
		description = "Whether to deprioritize or completely remove craft-rune at altars.",
		position = 5
	)
	default RemoveMode removeMode()
	{
		return RemoveMode.REMOVE_COMPLETELY;
	}

	@ConfigItem(
		keyName = UPDATE_VERSION_KEY_NAME,
		name = "Update Version",
		description = "",
		hidden = true
	)
	default int updateVersion()
	{
		return 0;
	}

}
package com.duckblade.osrs.comborunes;

import javax.inject.Inject;
import javax.inject.Singleton;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;

@Singleton
public class UpdateNotifier
{

	private static final int TARGET_VERSION = 1;

	@Inject
	private Client client;

	@Inject
	private ComboRunesOnlyConfig config;

	@Inject
	private ConfigManager configManager;

	public void checkAndNotify()
	{
		switch (config.updateVersion())
		{
			case TARGET_VERSION:
				return;

			case 0:
				sendMessage("<col=ff0000>Missing Craft-rune?</col> " +
					"ComboRunesOnly now removes Craft-rune options from more altars " +
					"and can de-prioritize options instead of fully removing them. " +
					"Check the plugin configuration to customize.");
		}

		configManager.setConfiguration(
			ComboRunesOnlyConfig.CONFIG_GROUP,
			ComboRunesOnlyConfig.UPDATE_VERSION_KEY_NAME,
			TARGET_VERSION
		);
	}

	private void sendMessage(String message)
	{
		client.addChatMessage(
			ChatMessageType.GAMEMESSAGE,
			"",
			message,
			null
		);
	}

}
package com.duckblade.osrs.comborunes;

import com.google.inject.Provides;
import java.util.Arrays;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.MenuEntry;
import net.runelite.api.Player;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

@Slf4j
@PluginDescriptor(
	name = "ComboRunesOnly",
	tags = {"rc", "runecraft", "runes", "gotr", "guardians", "rift"}
)
@Singleton
public class ComboRunesOnlyPlugin extends Plugin
{

	@Inject
	private Client client;

	@Inject
	private ComboRunesOnlyConfig config;

	@Inject
	private UpdateNotifier updateNotifier;

	private RemoveMode removeMode;
	private boolean inAltar = false;

	@Override
	public void startUp() throws Exception
	{
		Altar.refreshAllConfig(config);
		removeMode = config.removeMode();
		inAltar = false;
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged e)
	{
		if (ComboRunesOnlyConfig.CONFIG_GROUP.equals(e.getGroup()))
		{
			Altar.refreshAllConfig(config);
			removeMode = config.removeMode();
		}
	}

	@Subscribe
	public void onMenuEntryAdded(MenuEntryAdded e)
	{
		if (inAltar && isCraftRuneEntry(e))
		{
			client.setMenuEntries(
				removeMode.processMenuEntries(client.getMenuEntries())
			);
		}
	}

	@Subscribe
	public void onGameTick(GameTick g)
	{
		// use game tick to cache whether player is in altar
		Player p = client.getLocalPlayer();
		if (p == null)
		{
			return;
		}

		WorldPoint wp = p.getWorldLocation();
		boolean wasInAltar = this.inAltar;
		this.inAltar = Arrays.stream(Altar.values())
			.filter(Altar::isConfigEnabled)
			.anyMatch(a -> a.inAltar(wp));

		if (inAltar && !wasInAltar) // rising edge
		{
			updateNotifier.checkAndNotify();
		}
	}

	@Provides
	public ComboRunesOnlyConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ComboRunesOnlyConfig.class);
	}

	public static boolean isCraftRuneEntry(MenuEntryAdded entry)
	{
		return isCraftRuneEntry(entry.getTarget(), entry.getOption());
	}

	public static boolean isCraftRuneEntry(MenuEntry entry)
	{
		return isCraftRuneEntry(entry.getTarget(), entry.getOption());
	}

	private static boolean isCraftRuneEntry(String target, String option)
	{
		return target != null &&
			target.contains("Altar") &&
			"Craft-rune".equals(option);
	}

}
