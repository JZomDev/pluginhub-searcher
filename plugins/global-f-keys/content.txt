package com.globalfkeys;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class GlobalFKeysPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(GlobalFKeysPlugin.class);
		RuneLite.main(args);
	}
}
package com.globalfkeys;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Keybind;
import net.runelite.client.config.ModifierlessKeybind;

@ConfigGroup(GlobalFKeysConfig.CONFIG_GROUP_NAME)
public interface GlobalFKeysConfig extends Config
{
	String CONFIG_GROUP_NAME = "globalKeybinds";
	
	@ConfigItem(
		keyName = "combatTabKey",
		name = "Combat Tab Key",
		description = "Key to set for the combat tab",
		position = 1
	)
	default Keybind combatTab()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
		keyName = "skillsTabKey",
		name = "Skills Tab Key",
		description = "Key to set for the skills tab",
		position = 2
	)
	default Keybind skillsTab()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
		keyName = "questsTabKey",
		name = "Quests Tab Key",
		description = "Key to set for the quests tab",
		position = 3
	)
	default Keybind questsTab()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
		keyName = "inventoryTabKey",
		name = "Inventory Tab Key",
		description = "Key to set for the inventory tab",
		position = 4
	)
	default Keybind inventoryTab()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
		keyName = "equipmentTabKey",
		name = "Equipment Tab Key",
		description = "Key to set for the equipment tab",
		position = 5
	)
	default Keybind equipmentTab()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
		keyName = "prayerTabKey",
		name = "Prayer Tab Key",
		description = "Key to set for the prayer tab",
		position = 6
	)
	default Keybind prayerTab()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
		keyName = "magicTabKey",
		name = "Magic Tab Key",
		description = "Key to set for the magic tab",
		position = 7
	)
	default Keybind magicTab()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
		keyName = "friendsTabKey",
		name = "Friends Tab Key",
		description = "Key to set for the friends tab",
		position = 8
	)
	default Keybind friendsTab()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
		keyName = "accountManagementTabKey",
		name = "Account Management Tab Key",
		description = "Key to set for the account management tab",
		position = 9
	)
	default Keybind accountManagementTab()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
		keyName = "logoutTabKey",
		name = "Logout Tab Key",
		description = "Key to set for the logout tab",
		position = 10
	)
	default Keybind logoutTab()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
		keyName = "settingsTabKey",
		name = "Settings Tab Key",
		description = "Key to set for the settings tab",
		position = 11
	)
	default Keybind settingsTab()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
		keyName = "emotesTabKey",
		name = "Emotes Tab Key",
		description = "Key to set for the emotes tab",
		position = 12
	)
	default Keybind emotesTab()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
		keyName = "chatChannelTabKey",
		name = "Chat-Channel Tab Key",
		description = "Key to set for the chat-channel tab",
		position = 13
	)
	default Keybind chatChannelTab()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
		keyName = "musicPlayerTabKey",
		name = "Music Player Tab Key",
		description = "Key to set for the music player tab",
		position = 14
	)
	default Keybind musicPlayerTab()
	{
		return Keybind.NOT_SET;
	}
}

/*
 * Copyright (c) 2022, SirGirion <seallproducts@gmail.com>
 * Copyright (c) 2018, Adam <Adam@sigterm.info>
 * Copyright (c) 2018, Abexlry <abexlry@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.globalfkeys;

import com.google.common.collect.ImmutableSet;
import com.google.inject.Provides;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.inject.Inject;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.VarClientInt;
import net.runelite.api.WidgetNode;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.VarbitChanged;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.api.widgets.WidgetModalMode;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

@Slf4j
@PluginDescriptor(
	name = "Global F Keys"
)
public class GlobalFKeysPlugin extends Plugin
{
	// Following varbits get the F-Key the player has set in settings; value is numeric
	// such that a value of 12 means that tab is bound to F12
	static final int COMBAT_TAB_BINDING = 4675;
	static final int SKILLS_TAB_BINDING = 4676;
	static final int QUESTS_TAB_BINDING = 4677;
	static final int INVENTORY_TAB_BINDING = 4678;
	static final int EQUIPMENT_TAB_BINDING = 4679;
	static final int PRAYER_TAB_BINDING = 4680;
	static final int MAGIC_TAB_BINDING = 4682;
	static final int FRIENDS_TAB_BINDING = 4684;
	static final int ACCOUNT_MANAGEMENT_TAB_BINDING = 6517;
	static final int LOGOUT_BINDING = 4689;
	static final int SETTINGS_TAB_BINDING = 4686;
	static final int EMOTE_TAB_BINDING = 4687;
	static final int CHAT_CHANNEL_TAB_BINDING = 4683;
	static final int MUSIC_PLAYER_TAB_BINDING = 4688;

	private static final Set<Integer> VARBITS = ImmutableSet.of(
		COMBAT_TAB_BINDING, SKILLS_TAB_BINDING, QUESTS_TAB_BINDING,
		INVENTORY_TAB_BINDING, EQUIPMENT_TAB_BINDING, PRAYER_TAB_BINDING,
		MAGIC_TAB_BINDING, FRIENDS_TAB_BINDING, ACCOUNT_MANAGEMENT_TAB_BINDING,
		LOGOUT_BINDING, SETTINGS_TAB_BINDING, EMOTE_TAB_BINDING,
		CHAT_CHANNEL_TAB_BINDING, MUSIC_PLAYER_TAB_BINDING
	);

	@Inject
	private Client client;

	@Inject
	private GlobalFKeysConfig config;

	@Inject
	private KeyManager keyManager;

	@Inject
	private GlobalFKeysKeyListener inputListener;

	@Inject
	private ConfigManager configManager;

	@Getter(AccessLevel.PACKAGE)
	private boolean shouldNotRemapEscape;

	@Getter(AccessLevel.PACKAGE)
	private final Map<Integer, FKey> fkeyVarbitToKey = new HashMap<>();

	@Override
	protected void startUp() throws Exception
	{
		keyManager.registerKeyListener(inputListener);
		configManager.getConfigurationKeys(GlobalFKeysConfig.CONFIG_GROUP_NAME)
			.forEach(key ->
			{
				// New config values end in -Key, unset old ones for people
				if (!key.endsWith("Key"))
				{
					final String rawKey = key.split("\\.", 2)[1];
					configManager.unsetConfiguration(GlobalFKeysConfig.CONFIG_GROUP_NAME, rawKey);
				}
			});
	}

	@Override
	protected void shutDown() throws Exception
	{
		keyManager.unregisterKeyListener(inputListener);
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged varbitChanged)
	{
		VARBITS.forEach(varbit ->
		{
			final int varbitVal = client.getVarbitValue(varbit);
			final FKey existingValue = fkeyVarbitToKey.get(varbit);
			final FKey newValue = FKey.VARBIT_TO_FKEY.get(varbitVal);
			if (existingValue == null || existingValue != newValue)
			{
				fkeyVarbitToKey.put(varbit, newValue);
				log.debug("Storing FKey value {} for varbit {}", varbitVal, varbit);
			}
		});
	}

	@Subscribe
	private void onConfigChanged(ConfigChanged configChanged)
	{
		// If a user sets a keybinding, we need to check every other config
		// and set them to None if they are the same key
		// TODO: Revisit if panel refresh ever gets supported
		if (configChanged.getGroup().equals(GlobalFKeysConfig.CONFIG_GROUP_NAME))
		{
			log.debug("Checking for mutual exclusivity on config changed: {}", configChanged);
			final String fkeyValue = configChanged.getNewValue();
			for (String key : configManager.getConfigurationKeys(GlobalFKeysConfig.CONFIG_GROUP_NAME))
			{
				final String rawKey = key.split("\\.", 2)[1];
				if (rawKey.equals(configChanged.getKey()))
				{
					continue;
				}

				final String configValue = configManager.getConfiguration(GlobalFKeysConfig.CONFIG_GROUP_NAME, rawKey);
				if (fkeyValue.equals(configValue))
				{
					// Set value back to None
					configManager.setConfiguration(GlobalFKeysConfig.CONFIG_GROUP_NAME, rawKey, FKey.NONE);
					log.debug("Setting config for {} to NONE", rawKey);
				}
			}
		}
	}

	@Subscribe
	private void onGameTick(GameTick gameTick)
	{
		boolean modalOpen = false;
		for (WidgetNode node : client.getComponentTable())
		{
			if (node.getModalMode() != WidgetModalMode.NON_MODAL)
			{
				modalOpen = true;
			}
		}
		shouldNotRemapEscape = modalOpen;
	}

	@Provides
	GlobalFKeysConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(GlobalFKeysConfig.class);
	}

	/**
	 * Check if a dialog is open that will grab numerical input, to prevent F-key remapping
	 * from triggering.
	 *
	 * @return
	 */
	boolean isDialogOpen()
	{
		// Most chat dialogs with numerical input are added without the chatbox or its key listener being removed,
		// so chatboxFocused() is true. The chatbox onkey script uses the following logic to ignore key presses,
		// so we will use it too to not remap F-keys.
		return isHidden(WidgetInfo.CHATBOX_MESSAGES) || isHidden(WidgetInfo.CHATBOX_TRANSPARENT_LINES)
			// We want to block F-key remapping in the bank pin interface too, so it does not interfere with the
			// Keyboard Bankpin feature of the Bank plugin
			|| !isHidden(WidgetInfo.BANK_PIN_CONTAINER);
	}

	boolean isOptionsDialogOpen()
	{
		return client.getWidget(WidgetInfo.DIALOG_OPTION) != null;
	}

	private boolean isHidden(WidgetInfo widgetInfo)
	{
		Widget w = client.getWidget(widgetInfo);
		return w == null || w.isSelfHidden();
	}

	boolean chatboxFocused()
	{
		Widget chatboxParent = client.getWidget(WidgetInfo.CHATBOX_PARENT);
		if (chatboxParent == null || chatboxParent.getOnKeyListener() == null)
		{
			return false;
		}

		// the search box on the world map can be focused, and chat input goes there, even
		// though the chatbox still has its key listener.
		Widget worldMapSearch = client.getWidget(WidgetInfo.WORLD_MAP_SEARCH);
		return worldMapSearch == null || client.getVarcIntValue(VarClientInt.WORLD_MAP_SEARCH_FOCUSED) != 1;
	}

	boolean isWorldMapOpen()
	{
		return !isHidden(WidgetInfo.WORLD_MAP_VIEW) || !isHidden(WidgetInfo.WORLD_MAP_OVERVIEW_MAP);
	}
}

package com.globalfkeys;

import com.google.common.collect.ImmutableMap;
import java.util.Map;
import lombok.AllArgsConstructor;
import lombok.Getter;

import java.awt.event.KeyEvent;

@Getter
@AllArgsConstructor
public enum FKey
{
    NONE(KeyEvent.VK_UNDEFINED, 0),
    F1(KeyEvent.VK_F1, 1),
    F2(KeyEvent.VK_F2, 2),
    F3(KeyEvent.VK_F3, 3),
    F4(KeyEvent.VK_F4, 4),
    F5(KeyEvent.VK_F5, 5),
    F6(KeyEvent.VK_F6, 6),
    F7(KeyEvent.VK_F7, 7),
    F8(KeyEvent.VK_F8, 8),
    F9(KeyEvent.VK_F9, 9),
    F10(KeyEvent.VK_F10, 10),
    F11(KeyEvent.VK_F11, 11),
    F12(KeyEvent.VK_F12, 12),
	ESC(KeyEvent.VK_ESCAPE, 13);

    private final int keyEvent;
	private final int varbitValue;

	static final Map<Integer, FKey> VARBIT_TO_FKEY;
	static
	{
		ImmutableMap.Builder<Integer, FKey> builder = new ImmutableMap.Builder<>();
		for (FKey fkey : FKey.values())
		{
			builder.put(fkey.getVarbitValue(), fkey);
		}
		VARBIT_TO_FKEY = builder.build();
	}
}

/*
 * Copyright (c) 2022, SirGirion <seallproducts@gmail.com>
 * Copyright (c) 2018, Adam <Adam@sigterm.info>
 * Copyright (c) 2018, Abexlry <abexlry@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */package com.globalfkeys;

import com.google.common.collect.ImmutableSet;
import java.awt.event.KeyEvent;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.function.Supplier;
import javax.inject.Inject;
import net.runelite.client.config.Keybind;
import net.runelite.client.input.KeyListener;

public class GlobalFKeysKeyListener implements KeyListener
{
	@Inject
	private GlobalFKeysPlugin plugin;
	@Inject
	private GlobalFKeysConfig config;

    private final Map<Integer, Integer> modified = new HashMap<>();
    private final Set<Character> blockedChars = new HashSet<>();
	private final ImmutableSet<Integer> ALLOWED_WHEN_DIALOGUE = new ImmutableSet.Builder<Integer>()
		.add(KeyEvent.VK_F1)
		.add(KeyEvent.VK_F2)
		.add(KeyEvent.VK_F3)
		.add(KeyEvent.VK_F4)
		.add(KeyEvent.VK_F5)
		.add(KeyEvent.VK_F6)
		.add(KeyEvent.VK_F7)
		.add(KeyEvent.VK_F8)
		.add(KeyEvent.VK_F9)
		.add(KeyEvent.VK_F10)
		.add(KeyEvent.VK_F11)
		.add(KeyEvent.VK_F12)
		.add(KeyEvent.VK_ESCAPE)
		.build();

    @Override
    public void keyTyped(KeyEvent e)
    {
        char keyChar = e.getKeyChar();
        if (keyChar != KeyEvent.CHAR_UNDEFINED && blockedChars.contains(keyChar))
        {
            e.consume();
        }
    }

    @Override
    public void keyPressed(KeyEvent e)
    {
        int mappedKeyCode = KeyEvent.VK_UNDEFINED;
		final int keyCode = e.getKeyCode();

		// Don't remap escapes when modal is open or world map is open
		if (keyCode == KeyEvent.VK_ESCAPE && (plugin.isShouldNotRemapEscape() || plugin.isWorldMapOpen()))
		{
			return;
		}

		if (!plugin.chatboxFocused())
		{
			return;
		}

		if (config.combatTab().matches(e))
		{
			mappedKeyCode = plugin.getFkeyVarbitToKey().get(GlobalFKeysPlugin.COMBAT_TAB_BINDING).getKeyEvent();
		}
		else if (config.skillsTab().matches(e))
		{
			mappedKeyCode = plugin.getFkeyVarbitToKey().get(GlobalFKeysPlugin.SKILLS_TAB_BINDING).getKeyEvent();
		}
		else if (config.questsTab().matches(e))
		{
			mappedKeyCode = plugin.getFkeyVarbitToKey().get(GlobalFKeysPlugin.QUESTS_TAB_BINDING).getKeyEvent();
		}
		else if (config.inventoryTab().matches(e))
		{
			mappedKeyCode = plugin.getFkeyVarbitToKey().get(GlobalFKeysPlugin.INVENTORY_TAB_BINDING).getKeyEvent();
		}
		else if (config.equipmentTab().matches(e))
		{
			mappedKeyCode = plugin.getFkeyVarbitToKey().get(GlobalFKeysPlugin.EQUIPMENT_TAB_BINDING).getKeyEvent();
		}
		else if (config.prayerTab().matches(e))
		{
			mappedKeyCode = plugin.getFkeyVarbitToKey().get(GlobalFKeysPlugin.PRAYER_TAB_BINDING).getKeyEvent();
		}
		else if (config.magicTab().matches(e))
		{
			mappedKeyCode = plugin.getFkeyVarbitToKey().get(GlobalFKeysPlugin.MAGIC_TAB_BINDING).getKeyEvent();
		}
		else if (config.friendsTab().matches(e))
		{
			mappedKeyCode = plugin.getFkeyVarbitToKey().get(GlobalFKeysPlugin.FRIENDS_TAB_BINDING).getKeyEvent();
		}
		else if (config.accountManagementTab().matches(e))
		{
			mappedKeyCode = plugin.getFkeyVarbitToKey().get(GlobalFKeysPlugin.ACCOUNT_MANAGEMENT_TAB_BINDING).getKeyEvent();
		}
		else if (config.logoutTab().matches(e))
		{
			mappedKeyCode = plugin.getFkeyVarbitToKey().get(GlobalFKeysPlugin.LOGOUT_BINDING).getKeyEvent();
		}
		else if (config.settingsTab().matches(e))
		{
			mappedKeyCode = plugin.getFkeyVarbitToKey().get(GlobalFKeysPlugin.SETTINGS_TAB_BINDING).getKeyEvent();
		}
		else if (config.emotesTab().matches(e))
		{
			mappedKeyCode = plugin.getFkeyVarbitToKey().get(GlobalFKeysPlugin.EMOTE_TAB_BINDING).getKeyEvent();
		}
		else if (config.chatChannelTab().matches(e))
		{
			mappedKeyCode = plugin.getFkeyVarbitToKey().get(GlobalFKeysPlugin.CHAT_CHANNEL_TAB_BINDING).getKeyEvent();
		}
		else if (config.musicPlayerTab().matches(e))
		{
			mappedKeyCode = plugin.getFkeyVarbitToKey().get(GlobalFKeysPlugin.MUSIC_PLAYER_TAB_BINDING).getKeyEvent();
		}

		// In vanilla, if there is a dialogue open, the F keys work as expected so IIF a user has an F key
		// set as a remap, still send it. Otherwise, treat it like they pressed the real key not an F key
		if (plugin.isDialogOpen() && !ALLOWED_WHEN_DIALOGUE.contains(mappedKeyCode))
		{
			mappedKeyCode = KeyEvent.VK_UNDEFINED;
		}

        if (mappedKeyCode != KeyEvent.VK_UNDEFINED && mappedKeyCode != keyCode)
		{
			// If options dialog is open, and we remapped to Fkey, send actual keycode instead.
			if (plugin.isDialogOpen() && plugin.isOptionsDialogOpen())
			{
				mappedKeyCode = keyCode;
			}
            final char keyChar = e.getKeyChar();
            modified.put(keyCode, mappedKeyCode);
            e.setKeyCode(mappedKeyCode);
            // arrow keys and fkeys do not have a character
            e.setKeyChar(KeyEvent.CHAR_UNDEFINED);
            if (keyChar != KeyEvent.CHAR_UNDEFINED)
            {
                // If this key event has a valid key char then a key typed event may be received next,
                // we must block it
                blockedChars.add(keyChar);
            }
        }
    }

    @Override
    public void keyReleased(KeyEvent e)
    {
        final int keyCode = e.getKeyCode();
        final char keyChar = e.getKeyChar();

        if (keyChar != KeyEvent.CHAR_UNDEFINED)
        {
            blockedChars.remove(keyChar);
        }

        final Integer mappedKeyCode = modified.remove(keyCode);
        if (mappedKeyCode != null)
        {
            e.setKeyCode(mappedKeyCode);
            e.setKeyChar(KeyEvent.CHAR_UNDEFINED);
        }
    }
}

