package com.butlerinfo;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ButlerInfoPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ButlerInfoPlugin.class);
		RuneLite.main(args);
	}
}
package com.butlerinfo;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("butler-info")
public interface ButlerInfoConfig extends Config
{
	@ConfigItem(
			position = 0,
			keyName = "onlyBuildingMode",
			name = "Only show in building mode",
			description = "Only display overlay/infoboxes when in building mode"
	)
	default boolean onlyInBuildingMode()
	{
		return true;
	}

	@ConfigItem(
			position = 1,
			keyName = "shouldResetSession",
			name = "Reset when exiting/entering house",
			description = "Resets the session and all trackers when you exit/enter your house"
	)
	default boolean shouldResetSession()
	{
		return true;
	}

	@ConfigSection(
			name = "InfoBoxes",
			description = "Settings for the butler infoboxes",
			position = 2
	)
	String infoBoxes = "InfoBoxes";

	@ConfigItem(
			position = 3,
			keyName = "showItemCount",
			name = "Show held item count",
			description = "Display the butler's held item count infobox",
			section = infoBoxes
	)
	default boolean showItemCount()
	{
		return true;
	}

	@ConfigItem(
			position = 4,
			keyName = "showBankTripTimer",
			name = "Show bank trip timer",
			description = "Display the butler's bank trip timer infobox",
			section = infoBoxes
	)
	default boolean showBankTripTimer()
	{
		return true;
	}

	@ConfigItem(
			position = 5,
			keyName = "showTripsUntilPayment",
			name = "Show trips until next payment",
			description = "Display the number of trips until another payment is required infobox",
			section = infoBoxes
	)
	default boolean showTripsUntilPayment()
	{
		return true;
	}

	@ConfigSection(
			name = "Overlay",
			description = "Settings for the butler info overlay",
			position = 6
	)
	String overlay = "Overlay";

	@ConfigItem(
			position = 7,
			keyName = "showTotalAmountPayed",
			name = "Show total amount payed",
			description = "Display the total amount payed during session",
			section = overlay
	)
	default boolean showTotalAmountPayed()
	{
		return true;
	}

	@ConfigItem(
			position = 8,
			keyName = "showTotalBankTrips",
			name = "Show total bank trips made",
			description = "Display the total amount of bank trips made by your servant during session",
			section = overlay
	)
	default boolean showTotalBankTrips()
	{
		return true;
	}
}

package com.butlerinfo;

import lombok.Getter;

import javax.inject.Inject;

public class ChatContinueEvent
{
    @Getter
    private final ButlerInfoPlugin plugin;

    @Getter
    private final String text;

    @Inject
    public ChatContinueEvent(ButlerInfoPlugin plugin, String text) {
        this.plugin = plugin;
        this.text = text;
    }
}

package com.butlerinfo;

import lombok.Getter;

import javax.inject.Inject;

public class ChatOptionEvent
{
    @Getter
    private final ButlerInfoPlugin plugin;

    @Getter
    private final String optionPrompt;

    @Getter
    private final String text;

    @Getter
    private final int optionOrder;

    @Inject
    public ChatOptionEvent(ButlerInfoPlugin plugin, String optionPrompt, String text, int optionOrder) {
        this.plugin = plugin;
        this.optionPrompt = optionPrompt;
        this.text = text;
        this.optionOrder = optionOrder;
    }
}

package com.butlerinfo;

import lombok.Getter;

import java.util.function.BiConsumer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public enum ChatOption
{
    TAKE_ITEMS_BACK(
        "Select an Option",
        "^Take (.+) back to the bank",
        1,
        (event, option) -> event.getPlugin().setSendingItemsBack(true)),

    PAY_SERVANT(
        "Select an Option",
        "^Okay, here's (?<quantity>.+) coins.",
        1,
        (event, option) -> {
            int paymentAmount = option.getQuantityReferenced(event.getText());
            event.getPlugin().getServant().setPaymentAmount(paymentAmount);
            event.getPlugin().getServant().addPaymentToTotal(paymentAmount);
            event.getPlugin().getServant().setTripsUntilPayment(Servant.TRIPS_PER_PAYMENT);
        }),

    REPEAT_TASK(
        "Repeat last task?",
        "^Fetch from bank: (?<quantity>\\d+) x (?<item>.+)",
        1,
        (event, option) -> {
            String item = option.getItemReferenced(event.getText());
            event.getPlugin().getServant().sendOnBankTrip(item);
        }),

    SEND_SERVANT_FOR_ITEM(
        "Select an Option",
        "^(?<item>.+planks|Soft clay|Limestone brick|Steel bar|Cloth|Gold leaf|Marble block|Magic housing stone)",
        Constants.NO_SPECIFIC_ORDER,
        (event, option) -> {
            event.getPlugin().getDialogManager().setEnteringAmount(true);
            String item = option.getItemReferenced(event.getText());
            event.getPlugin().getServant().setItem(item);
        });

    private static class Constants
    {
        public static int NO_SPECIFIC_ORDER = -1;
    }

    @Getter
    private final String optionPrompt;

    @Getter
    private final String text;

    @Getter
    private final int optionOrder;

    private final BiConsumer<ChatOptionEvent, ChatOption> action;

    ChatOption(String optionPrompt, String text, int optionOrder, BiConsumer<ChatOptionEvent, ChatOption> action) {
        this.optionPrompt = optionPrompt;
        this.text = text;
        this.optionOrder = optionOrder;
        this.action = action;
    }

    public void executeAction(ChatOptionEvent event, ChatOption option) {
        if (event.getPlugin().getServant() == null) {
            return;
        }
        action.accept(event, option);
    }

    public Pattern getOptionPromptPattern() {
        return Pattern.compile(optionPrompt);
    }

    public Pattern getTextPattern() {
        return Pattern.compile(text);
    }

    public int getQuantityReferenced(String eventOptionText) {
        Matcher matcher = getTextPattern().matcher(eventOptionText);
        matcher.find();
        String matchedText = matcher.group("quantity");
        try {
            return Integer.parseInt(matchedText.replace(",", ""));
        } catch(NumberFormatException e) {
            return 0;
        }
    }

    public String getItemReferenced(String eventOptionText) {
        Matcher matcher = getTextPattern().matcher(eventOptionText);
        matcher.find();
        return matcher.group("item");
    }

    public static ChatOption getByEvent(ChatOptionEvent event) {
        for (ChatOption option : ChatOption.values()) {
            if(option.getOptionPromptPattern().matcher(event.getOptionPrompt()).find()
                    && option.getTextPattern().matcher(event.getText()).find()
                    && (option.optionOrder == Constants.NO_SPECIFIC_ORDER || option.optionOrder == event.getOptionOrder())) {
                return option;
            }
        }
        return null;
    }
}

package com.butlerinfo;

import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.awt.*;
import java.text.NumberFormat;
import java.util.Locale;

public class ServantOverlay extends OverlayPanel {

    private final ButlerInfoPlugin plugin;

    private final ButlerInfoConfig config;

    @Inject
    private ServantOverlay(ButlerInfoPlugin plugin, ButlerInfoConfig config)
    {
        this.plugin = plugin;
        this.config = config;
        this.setPreferredPosition(OverlayPosition.BOTTOM_LEFT);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (plugin.getServant() == null || (config.onlyInBuildingMode() && !plugin.getPlayerOwnedHouse().isBuildingMode())) {
            return null;
        }

        if (config.showTotalAmountPayed()) {
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Total gp payed:")
                    .right(NumberFormat.getNumberInstance(Locale.US).format(plugin.getServant().getTotalPayed()))
                    .build());
        }

        if (config.showTotalBankTrips()) {
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Bank trips made:")
                    .right(Integer.toString(plugin.getServant().getTotalBankTripsMade()))
                    .build());
        }

        return super.render(graphics);
    }
}

package com.butlerinfo;

import lombok.Getter;

import java.util.function.BiConsumer;
import java.util.regex.Pattern;

public enum ChatContinue
{
    NOT_ENOUGH_IN_BANK(
        "^Master, I dearly wish that I could perform your instruction in full, but alas, I can only carry (\\d+) items.",
        (event, option) -> {
            event.getPlugin().getServant().sendOnBankTrip();
        }),

    SEND_ITEMS_BACK_CONFIRMATION(
    "Very well, Master.",
        (event, option) -> {
            if(event.getPlugin().isSendingItemsBack()) {
                event.getPlugin().setSendingItemsBack(false);
                event.getPlugin().getServant().setItemAmountHeld(0);
                event.getPlugin().startBankTripTimer();
            }
        }
    );

    @Getter
    private final String text;

    private final BiConsumer<ChatContinueEvent, ChatContinue> action;

    ChatContinue(String text, BiConsumer<ChatContinueEvent, ChatContinue> action) {
        this.text = text;
        this.action = action;
    }

    public void executeAction(ChatContinueEvent event, ChatContinue option) {
        if (event.getPlugin().getServant() == null) {
            return;
        }
        action.accept(event, option);
    }

    public Pattern getTextPattern() {
        return Pattern.compile(text);
    }

    public static ChatContinue getByEvent(ChatContinueEvent event) {
        for (ChatContinue option : ChatContinue.values()) {
            if(option.getTextPattern().matcher(event.getText()).find()) {
                return option;
            }
        }
        return null;
    }
}

package com.butlerinfo;

import net.runelite.api.ItemID;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.ui.overlay.infobox.Counter;

import java.text.NumberFormat;
import java.util.Locale;

public class TripsUntilPaymentCounter extends Counter
{
    TripsUntilPaymentCounter(Plugin plugin, Servant servant, ItemManager itemManager) {
        super(itemManager.getImage(
                    ItemID.COINS_995,
                    servant.getPaymentAmount(),
                    false),
                plugin,
                servant.getTripsUntilPayment());

        String tooltipText = String.format(
                "%s bank trip(s) before you will have to pay %s gp",
                servant.getTripsUntilPayment(),
                NumberFormat.getNumberInstance(Locale.US).format(servant.getPaymentAmount()));
        setTooltip(tooltipText);
    }
}

package com.butlerinfo;

import net.runelite.api.ItemID;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.ui.overlay.infobox.Counter;

public class ItemCounter extends Counter
{
    ItemCounter(Plugin plugin, Servant servant, ItemManager itemManager) {
        super(itemManager.getImage(servant.getItem() != null ? servant.getItem().getItemId() : ItemID.PLANK),
                plugin,
                servant.getItemAmountHeld());

        setTooltip(String.format("%s currently has %s %s(s)", servant.getType().getName(), servant.getItemAmountHeld(), servant.getItem().getName()));
    }
}

package com.butlerinfo;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.*;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;
import net.runelite.client.util.Text;

import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
@PluginDescriptor(
	name = "Butler Info"
)
public class ButlerInfoPlugin extends Plugin
{
	private static final Pattern ITEM_AMOUNT_MATCHER = Pattern.compile(
			"^Master, I have returned with what thou asked me to retrieve. As I see thy inventory is full, I shall wait with these (\\d+) items until thou art ready."
	);

	private static final Pattern NOT_ENOUGH_IN_BANK_MATCHER = Pattern.compile(
			"^Master, I dearly wish that I could perform your instruction in full, but alas, I can only carry (\\d+) items."
	);

	private static final String SINGLE_ITEM_TEXT = "Master, I have returned with what thou asked me to retrieve. As I see thy inventory is full, I shall wait with the last item until thou art ready.";

	private static final String NO_EXTRA_ITEMS_TEXT = "Master, I have returned with what you asked me to retrieve.";

	@Inject
	private Client client;

	@Inject
	private ButlerInfoConfig config;

	@Inject
	private InfoBoxManager infoBoxManager;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ServantOverlay servantOverlay;

	@Inject
	private ItemManager itemManager;

	@Inject
	@Getter
	private PlayerOwnedHouse playerOwnedHouse;

	@Inject
	private EventBus eventBus;

	@Inject
	private KeyManager keyManager;

	@Inject
	@Getter
	private DialogManager dialogManager;

	@Getter
	@Setter
	private Servant servant;

	private BankTripTimer bankTripTimer;

	private ItemCounter itemCounter;

	private TripsUntilPaymentCounter tripsUntilPaymentCounter;

	@Getter
	@Setter
	private boolean sendingItemsBack = false;

	@Getter
	@Setter
	private boolean bankTimerReset = false;

	@Provides
	ButlerInfoConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ButlerInfoConfig.class);
	}


	@Override
	protected void startUp()
	{
		eventBus.register(playerOwnedHouse);
		eventBus.register(dialogManager);
		keyManager.registerKeyListener(dialogManager);
		overlayManager.add(servantOverlay);
	}

	@Override
	protected void shutDown()
	{
		eventBus.unregister(playerOwnedHouse);
		eventBus.unregister(dialogManager);
		keyManager.unregisterKeyListener(dialogManager);
		overlayManager.remove(servantOverlay);
		removeAll();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		if (event.getGameState() == GameState.LOADING && config.shouldResetSession())
		{
			servant = null;
		}
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		if (servant == null) {
			return;
		}
		Widget npcDialog = client.getWidget(WidgetInfo.DIALOG_NPC_TEXT);
		if (npcDialog == null) {
			return;
		}
		String text = Text.sanitizeMultilineText(npcDialog.getText());
		final Matcher itemAmountMatcher = ITEM_AMOUNT_MATCHER.matcher(text);
		final Matcher notEnoughInBankMatcher = NOT_ENOUGH_IN_BANK_MATCHER.matcher(text);
		if (itemAmountMatcher.find()) {
			servant.finishBankTrip(Integer.parseInt(itemAmountMatcher.group(1)));
		}
		if (notEnoughInBankMatcher.find()) {
			if (!isBankTimerReset()) {
				setBankTimerReset(true);
				removeBankTripTimer(false);
				servant.setTripsUntilPayment(servant.getPrevTripsUntilPayment());
			}
		}
		if (text.equals(SINGLE_ITEM_TEXT)) {
			servant.finishBankTrip(1);
		}
		if (text.equals(NO_EXTRA_ITEMS_TEXT)) {
			servant.finishBankTrip(0);
		}
	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned event)
	{
		if(event.getNpc() == null || servant != null) {
			return;
		}
		Optional<ServantType> typeOptional = ServantType.getByNpcId(event.getNpc().getId());
		typeOptional.ifPresent(type -> {
			Servant servant = new Servant(type);
			servant.setPlugin(this);
			setServant(servant);
		});
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		switch (event.getKey()) {
			case "onlyBuildingMode":
				if (config.onlyInBuildingMode() && !playerOwnedHouse.isBuildingMode()) {
					removeAll();
				} else {
					renderAll();
				}
				break;
			case "showItemCount":
				if (config.showItemCount()) {
					renderItemCounter();
				} else {
					removeItemCounter();
				}
				break;
			case "showBankTripTimer":
				if (config.showBankTripTimer()) {
					renderBankTripTimer();
				} else {
					removeBankTripTimer(true);
				}
				break;
			case "showTripsUntilPayment":
				if (config.showTripsUntilPayment()) {
					renderTripsUntilPayment();
				} else {
					removeTripsUntilPayment();
				}
				break;
		}
	}

	public void renderItemCounter() {
		if (!config.showItemCount() || (config.onlyInBuildingMode() && !playerOwnedHouse.isBuildingMode())) {
			return;
		}

		removeItemCounter();
		if (servant.getItemAmountHeld() <= 0) {
			return;
		}

		itemCounter = new ItemCounter(this, servant, itemManager);

		infoBoxManager.addInfoBox(itemCounter);
	}

	private void removeItemCounter()
	{
		if (itemCounter == null)
		{
			return;
		}

		infoBoxManager.removeInfoBox(itemCounter);
		itemCounter = null;
	}

	public void startBankTripTimer() {
		if (servant == null) {
			return;
		}
		bankTripTimer = new BankTripTimer(this, servant, itemManager);
		renderBankTripTimer();
	}

	private void renderBankTripTimer()
	{
		if (!config.showBankTripTimer() || (config.onlyInBuildingMode() && !playerOwnedHouse.isBuildingMode())) {
			return;
		}
		if (bankTripTimer == null)
		{
			return;
		}

		removeBankTripTimer(true);
		infoBoxManager.addInfoBox(bankTripTimer);
	}

	private void removeBankTripTimer(boolean preserveTimer)
	{
		if (bankTripTimer == null)
		{
			return;
		}

		infoBoxManager.removeInfoBox(bankTripTimer);
		if (!preserveTimer) {
			bankTripTimer = null;
		}
	}

	public void renderTripsUntilPayment() {
		if (!config.showTripsUntilPayment() || (config.onlyInBuildingMode() && !playerOwnedHouse.isBuildingMode())) {
			return;
		}

		removeTripsUntilPayment();
		if (servant.getTripsUntilPayment() <= 0) {
			return;
		}

		tripsUntilPaymentCounter = new TripsUntilPaymentCounter(this, servant, itemManager);

		infoBoxManager.addInfoBox(tripsUntilPaymentCounter);
	}

	private void removeTripsUntilPayment()
	{
		if (tripsUntilPaymentCounter == null)
		{
			return;
		}

		infoBoxManager.removeInfoBox(tripsUntilPaymentCounter);
		tripsUntilPaymentCounter = null;
	}

	public void renderAll() {
		renderItemCounter();
		renderBankTripTimer();
		renderTripsUntilPayment();
	}

	private void removeAll() {
		removeItemCounter();
		removeBankTripTimer(true);
		removeTripsUntilPayment();
	}
}

package com.butlerinfo;

import lombok.Getter;
import lombok.Setter;
import net.runelite.api.Client;
import net.runelite.api.MenuAction;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetID;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.input.KeyListener;
import net.runelite.client.util.Text;

import javax.inject.Inject;
import java.awt.event.KeyEvent;

public class DialogManager implements KeyListener
{
    private static final int MENU_OPTION_HOTKEY_SCRIPT_ID = 2153;

    private static final int CONTINUE_OPTION = -1;

    @Inject
    private Client client;

    @Getter
    private ButlerInfoPlugin plugin;

    @Getter
    @Setter
    private boolean enteringAmount;

    @Inject
    public DialogManager(ButlerInfoPlugin plugin)
    {
        this.plugin = plugin;
        enteringAmount = false;
    }

    @Override
    public void keyPressed(KeyEvent e)
    {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_SPACE:
                handleDialogAction(CONTINUE_OPTION);
                break;
            case KeyEvent.VK_1:
                handleDialogAction(1);
                break;
            case KeyEvent.VK_2:
                handleDialogAction(2);
                break;
            case KeyEvent.VK_3:
                handleDialogAction(3);
                break;
            case KeyEvent.VK_4:
                handleDialogAction(4);
                break;
            case KeyEvent.VK_5:
                handleDialogAction(5);
                break;
            case KeyEvent.VK_ENTER:
                if (isEnteringAmount()) {
                    setEnteringAmount(false);
                    plugin.getServant().sendOnBankTrip();
                }
                break;
        }
    }

    @Override
    public void keyReleased(KeyEvent e) { }

    @Override
    public void keyTyped(KeyEvent e) { }

    @Subscribe
    public void onMenuOptionClicked(MenuOptionClicked event)
    {
        if (event.getMenuAction() == MenuAction.WIDGET_CONTINUE) {
            handleDialogAction(event.getParam0());
        }
    }

    private void handleDialogAction(int selectedOption)
    {
        if (selectedOption == CONTINUE_OPTION) {
            Widget npcDialogWidget = client.getWidget(WidgetInfo.DIALOG_NPC_TEXT);
            fireChatContinueEvent(npcDialogWidget);
        } else {
            Widget playerDialogueOptionsWidget = client.getWidget(WidgetID.DIALOG_OPTION_GROUP_ID, 1);
            fireChatOptionEvent(playerDialogueOptionsWidget, selectedOption);
        }
    }

    private void fireChatContinueEvent(Widget widget)
    {
        if (widget == null) {
            return;
        }

        String text = Text.sanitizeMultilineText(widget.getText());
        ChatContinueEvent continueEvent = new ChatContinueEvent(plugin, text);

        ChatContinue chatContinue = ChatContinue.getByEvent(continueEvent);
        if(chatContinue != null) {
            chatContinue.executeAction(continueEvent, chatContinue);
        }
    }

    private void fireChatOptionEvent(Widget widget, int selectedOption)
    {
        if (widget == null || widget.getChildren() == null) {
            return;
        }

        Widget[] dialogueOptions = widget.getChildren();
        ChatOptionEvent chatOptionEvent = new ChatOptionEvent(
                plugin,
                dialogueOptions[0].getText(),
                dialogueOptions[selectedOption].getText(),
                selectedOption);

        ChatOption chatOption = ChatOption.getByEvent(chatOptionEvent);
        if (chatOption != null) {
            chatOption.executeAction(chatOptionEvent, chatOption);
        }
    }
}

package com.butlerinfo;

import lombok.Getter;
import lombok.Setter;

public class Servant
{
    public static final int TRIPS_PER_PAYMENT = 8;

    @Getter
    private final ServantType type;

    @Setter
    private ButlerInfoPlugin plugin;

    @Getter
    private ConstructionItem item;

    @Getter
    private int itemAmountHeld;

    @Getter
    private int tripsUntilPayment;

    @Getter
    @Setter
    private int prevTripsUntilPayment;

    @Getter
    @Setter
    private int paymentAmount;

    @Getter
    private int totalPayed;

    @Getter
    private int totalBankTripsMade;

    Servant(ServantType type)
    {
        this.type = type;
        this.tripsUntilPayment = 0;
        this.prevTripsUntilPayment = 0;
        this.itemAmountHeld = 0;
        this.totalPayed = 0;
        this.totalBankTripsMade = 0;
    }

    public void setItem(String itemName)
    {
        ConstructionItem.getByName(singularize(itemName)).ifPresent(item -> this.item = item);
    }

    public void setItemAmountHeld(int value)
    {
        itemAmountHeld = value;
        plugin.renderItemCounter();
    }

    public void setTripsUntilPayment(int value)
    {
        setPrevTripsUntilPayment(tripsUntilPayment);
        tripsUntilPayment = Math.max(value, 0);
        plugin.renderTripsUntilPayment();
    }

    public void sendOnBankTrip()
    {
        plugin.startBankTripTimer();
        incrementTotalBankTripsMade();
        setTripsUntilPayment(tripsUntilPayment - 1);
    }

    public void sendOnBankTrip(String item)
    {
        setItem(item);
        sendOnBankTrip();
    }

    public void finishBankTrip(int itemAmountHeld) {
        plugin.setBankTimerReset(false);
        setItemAmountHeld(itemAmountHeld);
    }

    public void addPaymentToTotal(int paymentAmount) {
        totalPayed += paymentAmount;
    }

    public void incrementTotalBankTripsMade() {
        totalBankTripsMade++;
    }

    private String singularize(String item)
    {
        if(item.charAt(item.length() - 1) == 's') {
            return item.substring(0, item.length() - 1);
        } else {
            return item;
        }
    }
}

package com.butlerinfo;

import lombok.Getter;
import net.runelite.api.NpcID;

import java.util.Optional;

public enum ServantType {
    RICK(NpcID.RICK, "Rick", 100),
    MAID(NpcID.MAID, "Maid", 50),
    COOK(NpcID.COOK, "Cook", 28),
    BUTLER(NpcID.BUTLER, "Butler", 20),
    DEMON_BUTLER(NpcID.DEMON_BUTLER, "Demon butler", 12);

    @Getter
    private final int npcId;

    @Getter
    private final String name;

    @Getter
    private final int ticks;

    ServantType(int npcId, String name, int ticks)
    {
        this.npcId = npcId;
        this.name = name;
        this.ticks = ticks;
    }

    public static Optional<ServantType> getByNpcId(int npcId)
    {
        for (ServantType type : ServantType.values()) {
            if (type.npcId == npcId) {
                return Optional.of(type);
            }
        }
        return Optional.empty();
    }
}

package com.butlerinfo;

import lombok.Getter;
import lombok.Setter;
import net.runelite.api.ItemID;

import java.util.Optional;

public enum ConstructionItem
{
    PLANK("Wooden plank", ItemID.PLANK),
    OAK_PLANK("Oak plank", ItemID.OAK_PLANK),
    TEAK_PLANK("Teak plank", ItemID.TEAK_PLANK),
    MAHOGANY_PLANK("Mahogany plank", ItemID.MAHOGANY_PLANK),
    SOFT_CLAY("Soft clay", ItemID.SOFT_CLAY),
    LIMESTONE_BRICK("Limestone brick", ItemID.LIMESTONE_BRICK),
    STEEL_BAR("Steel bar", ItemID.STEEL_BAR),
    BOLT_OF_CLOTH("Cloth", ItemID.BOLT_OF_CLOTH),
    GOLD_LEAF("Gold leaf", ItemID.GOLD_LEAF),
    MARBLE_BLOCK("Marble block", ItemID.MARBLE_BLOCK),
    MAGIC_STONE("Magic housing stone", ItemID.MAGIC_STONE);

    @Getter
    private final String name;

    @Getter
    private final int itemId;

    ConstructionItem(String name, int itemId)
    {

        this.name = name;
        this.itemId = itemId;
    }

    public static Optional<ConstructionItem> getByName(String name)
    {
        for (ConstructionItem item : ConstructionItem.values()) {
            if (item.getName().equals(name)) {
                return Optional.of(item);
            }
        }
        return Optional.empty();
    }
}

package com.butlerinfo;

import lombok.Getter;
import lombok.Setter;
import net.runelite.api.Client;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.eventbus.Subscribe;

import javax.inject.Inject;

public class PlayerOwnedHouse
{
    public static final int BUILDING_MODE_VARP = 780;

    public static final int BUILDING_MODE_VARBIT = 2176;

    @Inject
    private Client client;

    @Getter
    private ButlerInfoPlugin plugin;

    @Getter
    @Setter
    private boolean buildingMode;

    @Inject
    public PlayerOwnedHouse(ButlerInfoPlugin plugin)
    {
        this.plugin = plugin;
        setBuildingMode(false);
    }

    @Subscribe
    public void onVarbitChanged(VarbitChanged event)
    {
        if (event.getIndex() == PlayerOwnedHouse.BUILDING_MODE_VARP)
        {
            setBuildingMode(client.getVarbitValue(PlayerOwnedHouse.BUILDING_MODE_VARBIT) == 1);
            if (plugin.getServant() != null) {
                plugin.renderAll();
            }
        }
    }
}

package com.butlerinfo;

import net.runelite.api.ItemID;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.ui.overlay.infobox.Timer;

import java.time.temporal.ChronoUnit;

public class BankTripTimer extends Timer
{
    BankTripTimer(Plugin plugin, Servant servant, ItemManager itemManager)
    {
        super(servant.getType().getTicks() * 600L, ChronoUnit.MILLIS, itemManager.getImage(ItemID.WATCH), plugin);
        setTooltip("Time left until servant returns.");
    }
}

