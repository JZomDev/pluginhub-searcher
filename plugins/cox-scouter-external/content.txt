/*
 * Copyright (c) 2018, Kamiel
 * Copyright (c) 2020, Truth Forger <https://github.com/Blackberry0Pie>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package bbp.chambers;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.util.HashSet;
import java.util.Set;
import javax.inject.Inject;
import net.runelite.api.FriendsChatManager;
import net.runelite.api.Client;
import static net.runelite.api.MenuAction.RUNELITE_OVERLAY;
import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;

import net.runelite.api.SpriteID;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.game.WorldService;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

import net.runelite.client.plugins.raids.RaidRoom;
import net.runelite.client.plugins.raids.solver.Room;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.ComponentConstants;
import net.runelite.client.ui.overlay.components.ComponentOrientation;
import net.runelite.client.ui.overlay.components.ImageComponent;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;
import net.runelite.client.util.ImageUtil;
import net.runelite.http.api.worlds.World;
import net.runelite.http.api.worlds.WorldRegion;
import net.runelite.http.api.worlds.WorldResult;

public class CoxScouterExternalOverlay extends OverlayPanel
{
	static final String BROADCAST_ACTION = "Broadcast layout";
	static final String SCREENSHOT_ACTION = "Screenshot";
	private static final int BORDER_OFFSET = 2;
	private static final int ICON_SIZE = 32;
	private static final int SMALL_ICON_SIZE = 21;

	private final Client client;
	private final CoxScouterExternalPlugin plugin;
	private final CoxScouterExternalConfig config;

	private final ItemManager itemManager;
	private final SpriteManager spriteManager;
	private final PanelComponent panelImages = new PanelComponent();

	@Inject
	private WorldService worldService;

	@Inject
	private ConfigManager configManager;

	@Inject
	private CoxScouterExternalOverlay(Client client, CoxScouterExternalPlugin plugin, CoxScouterExternalConfig config, ItemManager itemManager, SpriteManager spriteManager)
	{
		super(plugin);
		setPosition(OverlayPosition.TOP_LEFT);
		setPriority(OverlayPriority.LOW);
		this.client = client;
		this.plugin = plugin;
		this.config = config;
		this.itemManager = itemManager;
		this.spriteManager = spriteManager;
		getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Raids overlay"));
		getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY, BROADCAST_ACTION, "Raids overlay"));
		getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY, SCREENSHOT_ACTION, "Raids overlay"));
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		plugin.shouldShowOverlays();
		if (!plugin.isShouldShowOverlays())
		{
			return null;
		}
		boolean ccDisplay = configManager.getConfiguration("raids", "ccDisplay", Boolean.class);
		boolean enabledWhitelist = configManager.getConfiguration("raids", "enableLayoutWhitelist", Boolean.class);
		boolean rotationWhitelist = configManager.getConfiguration("raids", "enableRotationWhitelist", Boolean.class);

		Color color = Color.WHITE;
		String layout;
		try
		{
			layout = plugin.getRaid().getLayout().toCodeString();
		}
		catch (NullPointerException e)
		{
			layout = "";
		}
		FontMetrics metrics = graphics.getFontMetrics();

		String displayLayout;
		if (config.displayFloorBreak())
		{
			displayLayout = plugin.getRaid().getLayout().toCode();
			displayLayout = displayLayout.substring(0, displayLayout.length() - 1).replaceAll("#", "").replaceFirst("Â¤", " | ");
		}
		else
		{
			displayLayout = layout;
		}
		if (enabledWhitelist && !plugin.getLayoutWhitelist().contains(layout.toLowerCase()))
		{
			color = Color.RED;
		}

		boolean hide = false;
		HashSet<String> roomNames = new HashSet<>();
		for (Room layoutRoom : plugin.getRaid().getLayout().getRooms())
		{
			int position = layoutRoom.getPosition();
			RaidRoom room = plugin.getRaid().getRoom(position);

			if (room == null)
			{
				continue;
			}
			roomNames.add(room.getName().toLowerCase());

			if (config.hideBlacklisted() && plugin.getRoomBlacklist().contains(room.getName().toLowerCase()))
			{
				hide = true;
				break;
			}
		}

		if (!hide)
		{
			if (config.hideMissingHighlighted())
			{
				int hCount = 0;
				for (String requiredRoom : plugin.getRoomHighlightedList())
				{
					if (roomNames.contains(requiredRoom))
					{
						hCount++;
					}
				}
				if(hCount < config.highlightedShowThreshold())
				{
					hide = true;
				}
			}
			if (config.hideMissingLayout())
			{
				if (enabledWhitelist && !plugin.getLayoutWhitelist().contains(layout.toLowerCase()))
				{
					hide = true;
				}
			}
			if (config.hideRopeless() && !roomNames.contains("tightrope"))
			{
				hide = true;
			}
		}

		if (hide)
		{
			panelComponent.getChildren().add(TitleComponent.builder()
					.text("Bad Raid!")
					.color(Color.RED)
					.build());

			return super.render(graphics);
		}

		panelComponent.getChildren().add(TitleComponent.builder()
				.text(displayLayout)
				.color(color)
				.build());

		if (ccDisplay)
		{
			color = Color.RED;
			FriendsChatManager friendsChatManager = client.getFriendsChatManager();

			String worldString = "W" + client.getWorld();
			WorldResult worldResult = worldService.getWorlds();
			if (worldResult != null)
			{
				World world = worldResult.findWorld(client.getWorld());
				WorldRegion region = world.getRegion();
				if (region != null)
				{
					String countryCode = region.getAlpha2();
					worldString += " (" + countryCode + ")";
				}
			}

			String owner = "Join a FC";
			if (friendsChatManager != null)
			{
				owner = friendsChatManager.getOwner();
				color = Color.ORANGE;
			}

			panelComponent.setPreferredSize(new Dimension(Math.max(ComponentConstants.STANDARD_WIDTH, metrics.stringWidth(worldString) + metrics.stringWidth(owner) + 14), 0));
			panelComponent.getChildren().add(LineComponent.builder()
					.left(worldString)
					.right(owner)
					.leftColor(Color.ORANGE)
					.rightColor(color)
					.build());
		}

		Set<Integer> imageIds = new HashSet<>();
		int roomWidth = 0;
		int temp;

		for (Room layoutRoom : plugin.getRaid().getLayout().getRooms())
		{
			int position = layoutRoom.getPosition();
			RaidRoom room = plugin.getRaid().getRoom(position);

			if (room == null)
			{
				continue;
			}

			temp = metrics.stringWidth(room.getName());
			if (temp > roomWidth)
			{
				roomWidth = temp;
			}

			color = Color.WHITE;

			switch (room.getType())
			{
				case COMBAT:
					String bossName = room == RaidRoom.UNKNOWN_COMBAT ? "Unknown" : room.getName();
					String bossNameLC = room.getName().toLowerCase();
					if (config.showRecommendedItems() && plugin.getRecommendedItemsList().get(bossNameLC) != null)
						imageIds.addAll(plugin.getRecommendedItemsList().get(bossNameLC));
					if (plugin.getRoomHighlightedList().contains(bossNameLC) && !config.highlightColor().equals(Color.WHITE))
					{
						color = config.highlightColor();
					}
					else if (plugin.getRoomWhitelist().contains(bossNameLC))
					{
						color = Color.GREEN;
					}
					else if (plugin.getRoomBlacklist().contains(bossNameLC)
							|| rotationWhitelist && !plugin.getRotationMatches())
					{
						color = Color.RED;
					}

					panelComponent.getChildren().add(LineComponent.builder()
							.left(config.showRecommendedItems() ? "" : room.getType().getName())
							.right(bossName)
							.rightColor(color)
							.build());

					break;

				case PUZZLE:
					String puzzleName = room == RaidRoom.UNKNOWN_PUZZLE ? "Unknown" : room.getName();
					String puzzleNameLC = room.getName().toLowerCase();
					if (config.showRecommendedItems() && plugin.getRecommendedItemsList().get(puzzleNameLC) != null)
						imageIds.addAll(plugin.getRecommendedItemsList().get(puzzleNameLC));
					if (plugin.getRoomHighlightedList().contains(puzzleNameLC))
					{
						color = config.highlightColor();
					}
					else if (plugin.getRoomWhitelist().contains(puzzleNameLC))
					{
						color = Color.GREEN;
					}
					else if (plugin.getRoomBlacklist().contains(puzzleNameLC))
					{
						color = Color.RED;
					}

					panelComponent.getChildren().add(LineComponent.builder()
							.left(config.showRecommendedItems() ? "" : room.getType().getName())
							.right(puzzleName)
							.rightColor(color)
							.build());
					break;
			}
		}

		//add recommended items
		Dimension panelDims = super.render(graphics);
		if (config.showRecommendedItems() && imageIds.size() > 0)
		{
			panelImages.getChildren().clear();
			Integer[] idArray = imageIds.toArray(new Integer[0]);
			int fontHeight = metrics.getHeight();
			int imagesVerticalOffset = 2 + BORDER_OFFSET + fontHeight + (ccDisplay ? fontHeight : 0);
			int imagesMaxHeight = (int) panelDims.getHeight() - BORDER_OFFSET - imagesVerticalOffset;
			boolean smallImages = false;

			panelImages.setPreferredLocation(new Point(0, imagesVerticalOffset));
			panelImages.setBackgroundColor(null);
			panelImages.setWrap(true);
			panelImages.setPreferredSize(new Dimension(2 * ICON_SIZE, 0));
			if (2 * (imagesMaxHeight / ICON_SIZE) < idArray.length)
			{
				smallImages = true;
				panelImages.setPreferredSize(new Dimension(3 * SMALL_ICON_SIZE, 0));
			}

			panelImages.setOrientation(ComponentOrientation.HORIZONTAL);
			for (Integer e : idArray)
			{
				final BufferedImage image = getImage(e, smallImages);
				if (image != null)
				{
					panelImages.getChildren().add(new ImageComponent(image));
				}
			}

			panelImages.render(graphics);
		}
		return panelDims;
	}

	private BufferedImage getImage(int id, boolean small)
	{
		BufferedImage bim;
		if (id != SpriteID.SPELL_ICE_BARRAGE)
			bim = itemManager.getImage(id);
		else
			bim = spriteManager.getSprite(id, 0);
		if (bim == null)
			return null;
		if (!small)
			return ImageUtil.resizeCanvas(bim, ICON_SIZE, ICON_SIZE);
		if (id != SpriteID.SPELL_ICE_BARRAGE)
			return ImageUtil.resizeImage(bim, SMALL_ICON_SIZE, SMALL_ICON_SIZE);
		return ImageUtil.resizeCanvas(bim, SMALL_ICON_SIZE, SMALL_ICON_SIZE);
	}
}

/*
 * Copyright (c) 2020, Truth Forger <https://github.com/Blackberry0Pie>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package bbp.chambers;

import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.awt.Dimension;
import java.awt.Graphics2D;

public class CoxScouterExternalTutorialOverlay extends OverlayPanel
{
	private final CoxScouterExternalConfig config;
	private final CoxScouterExternalPlugin plugin;

	private final LineComponent line1;
	private final LineComponent line2;
	private final LineComponent line3;
	private final LineComponent line4;

	@Inject
	private CoxScouterExternalTutorialOverlay(CoxScouterExternalConfig config, CoxScouterExternalPlugin plugin)
	{
		this.config = config;
		this.plugin = plugin;

		panelComponent.setPreferredSize(new Dimension(234, 0));

		line1 = LineComponent.builder().left("This scouter can work at the same time as the default scouter.").build();
		line2 = LineComponent.builder().left("You can turn off the default scouter: Chambers -> Show scout overlay.").build();
		line3 = LineComponent.builder().left("You MUST use a unique screenshot hotkey for the screenshot feature to work.").build();
		line4 = LineComponent.builder().left("You can turn off this tutorial overlay: CoX External -> disable Show tutorial overlay.").build();

		setPriority(OverlayPriority.LOW);
		setPosition(OverlayPosition.TOP_RIGHT);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (!config.showTutorialOverlay())
		{
			return null;
		}

		if (!plugin.isShouldShowOverlays())
		{
			return null;
		}

		panelComponent.getChildren().add(line1);
		panelComponent.getChildren().add(line2);
		panelComponent.getChildren().add(line3);
		panelComponent.getChildren().add(line4);

		return super.render(graphics);
	}
}

/*
 * Copyright (c) 2018, Kamiel
 * Copyright (c) 2020, Truth Forger <https://github.com/Blackberry0Pie>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package bbp.chambers;

import com.google.common.annotations.VisibleForTesting;
import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.ItemID;
import net.runelite.api.MenuAction;
import net.runelite.api.SpriteID;
import net.runelite.api.VarPlayer;
import net.runelite.api.Varbits;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.RuneLiteConfig;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.OverlayMenuClicked;
import net.runelite.client.game.ItemManager;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.raids.Raid;
import net.runelite.client.plugins.raids.RaidRoom;
import net.runelite.client.plugins.raids.RoomType;
import net.runelite.client.plugins.raids.events.RaidScouted;
import net.runelite.client.plugins.raids.events.RaidReset;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.raids.solver.Room;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.HotkeyListener;
import net.runelite.client.util.ImageCapture;
import net.runelite.client.util.ImageUploadStyle;
import net.runelite.client.util.Text;
import net.runelite.client.party.PartyMember;
import net.runelite.client.party.PartyService;
import net.runelite.client.party.messages.PartyChatMessage;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@Slf4j
@PluginDescriptor(
	name = "CoX Scouter External",
	tags = {"combat", "overlay", "pve", "pvm", "bosses", "chambers", "xeric", "raids"}
)
public class CoxScouterExternalPlugin extends Plugin
{
	@Getter
	private Raid raid;

	@Inject
	private Client client;

	@Inject
	private RuneLiteConfig runeLiteConfig;

	@Inject
	private ImageCapture imageCapture;

	@Inject
	private CoxScouterExternalConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ConfigManager configManager;

	@Inject
	private CoxScouterExternalOverlay overlay;

	@Inject
	private CoxScouterExternalTutorialOverlay tutorialOverlay;

	@Inject
	private ItemManager itemManager;

	@Inject
	private PartyService party;

	@Inject
	private ChatMessageManager chatMessageManager;

	@Inject
	private KeyManager keyManager;

	@Inject
	private ClientThread clientThread;

	@Getter
	private final Set<String> roomWhitelist = new HashSet<>();

	@Getter
	private final Set<String> roomBlacklist = new HashSet<>();

	@Getter
	private final Set<String> rotationWhitelist = new HashSet<>();

	@Getter
	private final Set<String> layoutWhitelist = new HashSet<>();

	@Getter
	private final Set<String> roomHighlightedList = new HashSet<>();

	@Getter
	private final Map<String, List<Integer>> recommendedItemsList = new HashMap<>();

	@Getter
	private int raidPartyID;

	@Getter
	private boolean shouldShowOverlays;

	// if the player is inside of a raid or not
	@Getter
	private boolean inRaidChambers;
	private static int raidState;
	private static final Pattern ROTATION_REGEX = Pattern.compile("\\[(.*?)]");
	private static final int OLM_PLANE = 0;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
		overlayManager.add(tutorialOverlay);
		updateLists();
		this.clientThread.invokeLater(this::checkRaidPresence);
		keyManager.registerKeyListener(screenshotHotkeyListener);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
		overlayManager.remove(tutorialOverlay);
		inRaidChambers = false;
		keyManager.unregisterKeyListener(screenshotHotkeyListener);
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (!event.getGroup().equals("raids") && !event.getGroup().equals("coxscouterexternal"))
		{
			return;
		}

		updateLists();
	}

	@Subscribe
	public void onRaidScouted(RaidScouted raidScouted)
	{
		this.raid = raidScouted.getRaid();
	}

	@Subscribe
	public void onRaidReset(RaidReset raidReset)
	{
		this.raid = null;
	}

	@Subscribe
	public void onOverlayMenuClicked(final OverlayMenuClicked event)
	{
		if (!(event.getEntry().getMenuAction() == MenuAction.RUNELITE_OVERLAY
				&& event.getOverlay() == overlay))
		{
			return;
		}

		if (event.getEntry().getOption().equals(CoxScouterExternalOverlay.BROADCAST_ACTION))
		{
			sendRaidLayoutMessage();
		}
		else if (event.getEntry().getOption().equals(CoxScouterExternalOverlay.SCREENSHOT_ACTION))
		{
			clientThread.invoke(CoxScouterExternalPlugin.this::screenshotScoutOverlay);
		}
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		this.clientThread.invokeLater(this::checkRaidPresence);
	}

	@Subscribe
	public void onGameTick(GameTick gameTick)
	{
		shouldShowOverlays = shouldShowOverlays();
	}

	@Provides
	CoxScouterExternalConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(CoxScouterExternalConfig.class);
	}

	@VisibleForTesting
	private void updateLists()
	{
		updateList(roomWhitelist, configManager.getConfiguration("raids", "whitelistedRooms"));
		updateList(roomBlacklist, configManager.getConfiguration("raids", "blacklistedRooms"));
		updateList(layoutWhitelist, configManager.getConfiguration("raids", "whitelistedLayouts"));
		updateList(roomHighlightedList, config.highlightedRooms());
		updateMap(recommendedItemsList, config.recommendedItems());

		// Update rotation whitelist
		rotationWhitelist.clear();
		if (configManager.getConfiguration("raids", "whitelistedRotations") != null)
		{
			for (String line : configManager.getConfiguration("raids", "whitelistedRotations").split("\\n"))
			{
				rotationWhitelist.add(line.toLowerCase().replace(" ", ""));
			}
		}
	}

	private void updateList(Collection<String> list, String input)
	{
		if (input == null)
		{
			return;
		}

		list.clear();
		for (String s : Text.fromCSV(input.toLowerCase()))
		{
			if (s.equals("unknown"))
			{
				list.add("unknown (combat)");
				list.add("unknown (puzzle)");
			}
			else
			{
				list.add(s);
			}
		}
	}

	private void updateMap(Map<String, List<Integer>> map, String input)
	{
		map.clear();

		Matcher m = ROTATION_REGEX.matcher(input);
		while (m.find())
		{
			String everything = m.group(1).toLowerCase();
			int split = everything.indexOf(',');
			if (split < 0)
				continue;
			String key = everything.substring(0, split);
			if (key.length() < 1)
				continue;
			List<String> itemNames = Text.fromCSV(everything.substring(split));

			map.computeIfAbsent(key, k -> new ArrayList<>());

			for (String itemName : itemNames)
			{
				if (itemName.equals(""))
					continue;
				if (itemName.equals("ice barrage"))
					map.get(key).add(SpriteID.SPELL_ICE_BARRAGE);
				else if (itemName.matches("\\d*"))
					try {
						map.get(key).add(Integer.parseInt(itemName));
					} catch(NumberFormatException e) {
						log.warn("Caught NumberFormatException for explicit ItemID in scouter item overlay");
					}
				else if (itemName.startsWith("salve"))
					map.get(key).add(ItemID.SALVE_AMULETEI);
				else if (itemName.contains("blowpipe"))
					map.get(key).add(ItemID.TOXIC_BLOWPIPE);
				else if (itemName.contains("slayer helm"))
					map.get(key).add(ItemID.SLAYER_HELMET_I);
				else if (itemManager.search(itemName).size() > 0)
					map.get(key).add(itemManager.search(itemName).get(0).getId());
				else
					log.info("RaidsPlugin: Could not find an item ID for item: " + itemName);
			}
		}
	}

	boolean getRotationMatches()
	{
		RaidRoom[] combatRooms = getCombatRooms();
		String rotation = Arrays.stream(combatRooms)
				.map(RaidRoom::getName)
				.map(String::toLowerCase)
				.collect(Collectors.joining(","));

		return rotationWhitelist.contains(rotation);
	}

	private RaidRoom[] getCombatRooms()
	{
		List<RaidRoom> combatRooms = new ArrayList<>();

		for (Room room : raid.getLayout().getRooms())
		{
			if (room == null)
			{
				continue;
			}

			if (raid.getRooms()[room.getPosition()].getType() == RoomType.COMBAT)
			{
				combatRooms.add(raid.getRooms()[room.getPosition()]);
			}
		}

		return combatRooms.toArray(new RaidRoom[0]);
	}

	private void sendRaidLayoutMessage()
	{
		final String layout = getRaid().getLayout().toCodeString();
		final String rooms = toRoomString(getRaid());
		final String raidData = "[" + layout + "]: " + rooms;

		final String layoutMessage = new ChatMessageBuilder()
				.append(ChatColorType.HIGHLIGHT)
				.append("Layout: ")
				.append(ChatColorType.NORMAL)
				.append(raidData)
				.build();

		final PartyMember localMember = party.getLocalMember();

		if (party.getMembers().isEmpty() || localMember == null)
		{
			chatMessageManager.queue(QueuedMessage.builder()
					.type(ChatMessageType.FRIENDSCHATNOTIFICATION)
					.runeLiteFormattedMessage(layoutMessage)
					.build());
		}
		else
		{
			final PartyChatMessage message = new PartyChatMessage(layoutMessage);
			message.setMemberId(localMember.getMemberId());
			party.send(message);
		}
	}

	private String toRoomString(Raid raid)
	{
		final StringBuilder sb = new StringBuilder();

		for (RaidRoom room : getOrderedRooms(raid))
		{
			switch (room.getType())
			{
				case PUZZLE:
				case COMBAT:
					sb.append(room.getName()).append(", ");
					break;
			}
		}

		final String roomsString = sb.toString();
		return roomsString.substring(0, roomsString.length() - 2);
	}

	private List<RaidRoom> getOrderedRooms(Raid raid)
	{
		List<RaidRoom> orderedRooms = new ArrayList<>();
		for (Room r : raid.getLayout().getRooms())
		{
			final int position = r.getPosition();
			final RaidRoom room = raid.getRoom(position);

			if (room == null)
			{
				continue;
			}

			orderedRooms.add(room);
		}

		return orderedRooms;
	}

	private void screenshotScoutOverlay()
	{
		if (!shouldShowOverlays)
		{
			return;
		}

		Rectangle overlayDimensions = overlay.getBounds();
		BufferedImage overlayImage = new BufferedImage(overlayDimensions.width, overlayDimensions.height, BufferedImage.TYPE_INT_RGB);
		Graphics2D graphic = overlayImage.createGraphics();
		graphic.setFont(runeLiteConfig.interfaceFontType().getFont());
		graphic.setColor(Color.BLACK);
		graphic.fillRect(0, 0, overlayDimensions.width, overlayDimensions.height);
		overlay.render(graphic);

		imageCapture.saveScreenshot(overlayImage, "CoX_scout-", null, false, configManager.getConfiguration("raids", "copyToClipboard", Boolean.class));
		graphic.dispose();
	}

	private final HotkeyListener screenshotHotkeyListener = new HotkeyListener(() -> config.screenshotHotkey())
	{
		@Override
		public void hotkeyPressed()
		{
			clientThread.invoke(CoxScouterExternalPlugin.this::screenshotScoutOverlay);
		}
	};

	boolean shouldShowOverlays()
	{
		if (raid == null
				|| raid.getLayout() == null
				|| !config.scoutOverlay())
		{
			return false;
		}

		if (isInRaidChambers())
		{
			// If the raid has started
			if (raidState > 0)
			{
				return configManager.getConfiguration("raids", "scoutOverlayInRaid", Boolean.class);
			}
			else
			{
				return true;
			}
		}

		boolean overlayAtBank = configManager.getConfiguration("raids", "scoutOverlayAtBank", Boolean.class);
		return getRaidPartyID() != -1 && overlayAtBank;
	}

	private void checkRaidPresence()
	{
		if (client.getGameState() != GameState.LOGGED_IN)
		{
			return;
		}

		int tempRaidState = client.getVarbitValue(Varbits.RAID_STATE);
		int tempPartyID = client.getVarpValue(VarPlayer.IN_RAID_PARTY);
		boolean tempInRaid = client.getVarbitValue(Varbits.IN_RAID) == 1;

		// if the player's party state has changed
		if (tempPartyID != raidPartyID)
		{
			raidPartyID = tempPartyID;
		}

		// if the player's raid state has changed
		if (tempInRaid != inRaidChambers)
		{
			inRaidChambers = tempInRaid;
		}

		// if the player's raid state has changed
		if (tempRaidState != raidState)
		{
			raidState = tempRaidState;
		}
	}
}

/*
 * Copyright (c) 2020, Truth Forger <https://github.com/Blackberry0Pie>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package bbp.chambers;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Keybind;

import java.awt.Color;

@ConfigGroup("coxscouterexternal")
public interface CoxScouterExternalConfig extends Config
{
	@ConfigItem(
		position = 0,
		keyName = "showTutorialOverlay",
		name = "Show tutorial overlay",
		description = "Whether to show an overlay to help understand how to use the plugin"
	)
	default boolean showTutorialOverlay()
	{
		return true;
	}

	@ConfigItem(
		position = 1,
		keyName = "scoutOverlay",
		name = "Show scout overlay",
		description = "Display an overlay that shows the current raid layout (when entering lobby)"
	)
	default boolean scoutOverlay()
	{
		return true;
	}

	@ConfigItem(
		position = 2,
		keyName = "displayFloorBreak",
		name = "Layout floor break",
		description = "Displays floor break in layout"
	)
	default boolean displayFloorBreak()
	{
		return false;
	}

	@ConfigItem(
		position = 3,
		keyName = "screenshotHotkey",
		name = "Scouter screenshot hotkey",
		description = "Hotkey used to screenshot the scouting overlay"
	)
	default Keybind screenshotHotkey()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
		position = 4,
		keyName = "showRecommendedItems",
		name = "Show recommended items",
		description = "Adds overlay with recommended items to scouter"
	)
	default boolean showRecommendedItems()
	{
		return false;
	}

	@ConfigItem(
		position = 5,
		keyName = "recommendedItems",
		name = "Recommended items",
		description = "User-set recommended items in the form: [muttadiles,ice barrage,zamorak godsword],[tekton,elder maul], ..."
	)
	default String recommendedItems()
	{
		return "";
	}

	@ConfigItem(
		position = 6,
		keyName = "highlightedRooms",
		name = "Highlighted rooms",
		description = "Display highlighted rooms in a different color on the overlay. Separate with comma (full name)"
	)
	default String highlightedRooms()
	{
		return "";
	}

	@ConfigItem(
		position = 7,
		keyName = "highlightColor",
		name = "Highlight color",
		description = "The color of highlighted rooms"
	)
	default Color highlightColor()
	{
		return Color.MAGENTA;
	}

	@ConfigItem(
		position = 8,
		keyName = "hideMissingHighlighted",
		name = "Hide missing highlighted",
		description = "Completely hides raids missing highlighted room(s)"
	)
	default boolean hideMissingHighlighted()
	{
		return false;
	}

	@ConfigItem(
		position = 9,
		keyName = "highlightedShowThreshold",
		name = "Show threshold",
		description = "The number of highlighted rooms needed to show the raid. 0 means no threshold."
	)
	default int highlightedShowThreshold()
	{
		return 0;
	}

	@ConfigItem(
		position = 10,
		keyName = "hideBlacklist",
		name = "Hide raids with blacklisted",
		description = "Completely hides raids containing blacklisted room(s)"
	)
	default boolean hideBlacklisted()
	{
		return false;
	}

	@ConfigItem(
		position = 11,
		keyName = "hideMissingLayout",
		name = "Hide missing layout",
		description = "Completely hides raids missing a whitelisted layout"
	)
	default boolean hideMissingLayout()
	{
		return false;
	}

	@ConfigItem(
		position = 12,
		keyName = "hideRopeless",
		name = "Hide ropeless raids",
		description = "Completely hides raids missing a tightrope"
	)
	default boolean hideRopeless()
	{
		return false;
	}
}

package bbp.chambers;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CoxScouterExternalPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CoxScouterExternalPlugin.class);
		RuneLite.main(args);
	}
}
