package com.creativetechguy;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TreeDespawnTimerPluginTest {
    public static void main(String[] args) throws Exception {
        ExternalPluginManager.loadBuiltin(TreeDespawnTimerPlugin.class);
        RuneLite.main(args);
    }
}
package com.creativetechguy;

import net.runelite.api.Point;
import net.runelite.api.*;
import net.runelite.api.coords.WorldPoint;

import java.awt.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.function.Function;

public class TreeState {

    WorldPoint worldPoint;
    Point centerOffset;
    HashSet<Player> playersChopping = new HashSet<>();
    HashSet<Player> unrenderedPlayersChopping = new HashSet<>();
    List<WorldPoint> points;
    String treeName;
    boolean haveYouChoppedLog = false;
    boolean hideTree = false;

    private int ticksLeft;
    private final int maxTicks;
    private final Client client;
    private final TreeDespawnTimerConfig config;

    public TreeState(GameObject tree, Client client, TreeDespawnTimerConfig config) {
        worldPoint = tree.getWorldLocation();
        this.client = client;
        this.config = config;
        TreeConfig treeConfig = TreeConfig.getTreeById(tree.getId());
        treeName = treeConfig.name();
        maxTicks = treeConfig.getMaxTicks();
        ticksLeft = maxTicks;
        centerOffset = getCenterOffset(tree);
        points = getPoints(tree);
    }

    boolean hasUnrenderedPlayersChopping() {
        return !unrenderedPlayersChopping.isEmpty();
    }

    int getTickDelta() {
        if (!playersChopping.isEmpty() || hasUnrenderedPlayersChopping()) {
            if (playersChopping.size() >= 2 || !playersChopping.contains(client.getLocalPlayer()) || haveYouChoppedLog || hasUnrenderedPlayersChopping()) {
                return -1;
            }
        } else if (ticksLeft < maxTicks) {
            return 1;
        } else if (haveYouChoppedLog && ticksLeft == maxTicks) {
            haveYouChoppedLog = false;
        }
        return 0;
    }

    void tick() {
        ticksLeft += getTickDelta();
    }

    boolean shouldShowTimer(DebugLevel debugLevel) {
        if (DebugLevel.VERBOSE.shouldShow(debugLevel)) {
            return true;
        }
        if (DebugLevel.BASIC.shouldShow(debugLevel) && ticksLeft < maxTicks) {
            return true;
        }
        if (hideTree) {
            return false;
        }
        if (playersChopping.size() > 0) {
            return true;
        }
        return ticksLeft < maxTicks;
    }

    boolean shouldShowTimer() {
        return shouldShowTimer(config.debugLevel());
    }

    Color getTimerColor() {
        // This is used for debugging only
        if (hideTree) {
            return Color.GRAY;
        }
        double percent = getTimePercent() * 100;
        if (percent < 15) {
            return config.timerColorLow();
        }
        if (percent < 40) {
            return config.timerColorMedium();
        }
        if (percent < 80) {
            return config.timerColorHigh();
        }
        return config.timerColorFull();
    }

    Float getTimePercent() {
        return Math.max(ticksLeft / (float) maxTicks, 0);
    }

    Integer getTimeTicks() {
        if (DebugLevel.VERBOSE.shouldShow(config.debugLevel())) {
            return ticksLeft;
        }
        return Math.max(ticksLeft, 0);
    }

    Integer getTimeSeconds(int subTickMs) {
        int secondsLeft = (int) Math.floor((ticksLeft * Constants.GAME_TICK_LENGTH + subTickMs * getTickDelta()) / 1000f);
        if (DebugLevel.VERBOSE.shouldShow(config.debugLevel())) {
            return secondsLeft;
        }
        return Math.max(secondsLeft, 0);
    }

    private List<WorldPoint> getPoints(GameObject gameObject) {
        WorldPoint minPoint = getSWWorldPoint(gameObject);
        WorldPoint maxPoint = getNEWorldPoint(gameObject);

        if (minPoint.equals(maxPoint)) {
            return Collections.singletonList(minPoint);
        }

        final int plane = minPoint.getPlane();
        final List<WorldPoint> list = new ArrayList<>();
        for (int x = minPoint.getX(); x <= maxPoint.getX(); x++) {
            for (int y = minPoint.getY(); y <= maxPoint.getY(); y++) {
                list.add(new WorldPoint(x, y, plane));
            }
        }
        return list;
    }

    private Point getCenterOffset(GameObject gameObject) {
        int x = 0;
        int y = 0;
        if (gameObject.sizeX() % 2 == 0) {
            x = (gameObject.sizeX() - 1) * Perspective.LOCAL_HALF_TILE_SIZE;
        }
        if (gameObject.sizeY() % 2 == 0) {
            y = (gameObject.sizeY() - 1) * Perspective.LOCAL_HALF_TILE_SIZE;
        }
        return new Point(x, y);
    }

    private WorldPoint getSWWorldPoint(GameObject gameObject) {
        return getWorldPoint(gameObject, GameObject::getSceneMinLocation);
    }

    private WorldPoint getNEWorldPoint(GameObject gameObject) {
        return getWorldPoint(gameObject, GameObject::getSceneMaxLocation);
    }

    private WorldPoint getWorldPoint(GameObject gameObject, Function<GameObject, Point> pointFunction) {
        Point point = pointFunction.apply(gameObject);
        return WorldPoint.fromScene(client, point.getX(), point.getY(), gameObject.getPlane());
    }

    public boolean canShowPopularIndicator() {
        int regionID = worldPoint.getRegionID();
        // Woodcutting guild doesn't use Forestry's tree popularity system
        if (regionID == 6198 || regionID == 6454) {
            return false;
        }
        return true;
    }
}

package com.creativetechguy;

import lombok.Setter;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.RenderableEntity;

import java.awt.*;

public class CustomTextComponent implements RenderableEntity {
    private final String text;
    private final Point position;
    @Setter
    private Color color = Color.BLACK;
    @Setter
    private boolean emphasize = false;
    @Setter
    private boolean centered = true;

    private static Font emphasizeFont = FontManager.getRunescapeBoldFont().deriveFont(16f);
    private static Font standardFont = FontManager.getRunescapeSmallFont().deriveFont(16f);

    static void updateFontSizes(int normal, int emphasized) {
        standardFont = FontManager.getRunescapeSmallFont().deriveFont((float) normal);
        // Bold font is naturally much larger than the small font, so scale down the size to keep them in-line
        emphasizeFont = FontManager.getRunescapeBoldFont().deriveFont((float) Math.round(emphasized * 0.65f));
    }

    public CustomTextComponent(String text, Point position) {
        this.text = text;
        this.position = position;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        Font originalFont = graphics.getFont();
        graphics.setFont(emphasize ? emphasizeFont : standardFont);

        final FontMetrics fontMetrics = graphics.getFontMetrics();
        int textWidth = fontMetrics.stringWidth(text);
        int textHeight = fontMetrics.getAscent();

        if (centered) {
            position.setLocation(position.getX() - textWidth / 2d, position.getY() + textHeight / 2d);
        }

        graphics.setColor(Color.BLACK);
        if (emphasize) {
            graphics.drawString(text, position.x, position.y - 1);
            graphics.drawString(text, position.x - 1, position.y);
        }
        graphics.drawString(text, position.x, position.y + 1);
        graphics.drawString(text, position.x + 1, position.y);

        graphics.setColor(color);
        graphics.drawString(text, position.x, position.y);

        if (originalFont != null) {
            graphics.setFont(originalFont);
        }

        return new Dimension(textWidth, textHeight);
    }
}

package com.creativetechguy;

public enum TimerTypes {
    PIE,
    TICKS,
    SECONDS
}

package com.creativetechguy;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

import java.awt.*;

@ConfigGroup(TreeDespawnTimerConfig.GROUP_NAME)
public interface TreeDespawnTimerConfig extends Config {
    String GROUP_NAME = "tree-despawn-timer";

    @ConfigItem(
            keyName = "timerType",
            name = "Timer Display Type",
            position = 1,
            description = "The UI style for displaying the estimated remaining time on each tree."
    )
    default TimerTypes timerType() {
        return TimerTypes.PIE;
    }

    @ConfigItem(
            keyName = "highlightPopularTrees",
            name = "Popular Tree Indicator",
            position = 2,
            description = "Increases the size of the timer when there are 10+ players chopping the tree."
    )
    default boolean highlightPopularTrees() {
        return true;
    }

    @ConfigSection(
            name = "Advanced UI Customization",
            description = "Detailed options for customizing timer overlay",
            position = 3,
            closedByDefault = true
    )
    String uiCustomizationSection = "uiCustomizationSection";

    @ConfigItem(
            keyName = "timerColorLow",
            name = "Timer Color Low",
            position = 0,
            description = "Overlay color when the tree is about to despawn.",
            section = uiCustomizationSection
    )
    default Color timerColorLow() {
        return new Color(220, 0, 0);
    }

    @ConfigItem(
            keyName = "timerColorMedium",
            name = "Timer Color Medium",
            position = 1,
            description = "Overlay color when the tree is nearly running out of time.",
            section = uiCustomizationSection
    )
    default Color timerColorMedium() {
        return new Color(230, 160, 0);
    }

    @ConfigItem(
            keyName = "timerColorHigh",
            name = "Timer Color High",
            position = 2,
            description = "Overlay color when the tree is fairly new.",
            section = uiCustomizationSection
    )
    default Color timerColorHigh() {
        return new Color(230, 230, 0);
    }

    @ConfigItem(
            keyName = "timerColorFull",
            name = "Timer Color Full",
            position = 3,
            description = "Overlay color when the tree is extremely new.",
            section = uiCustomizationSection
    )
    default Color timerColorFull() {
        return new Color(0, 255, 0);
    }

    String UI_SIZE_NORMAL = "uiSizeNormal";

    @ConfigItem(
            keyName = UI_SIZE_NORMAL,
            name = "UI Size Normal",
            position = 4,
            description = "Size of the timer.",
            section = uiCustomizationSection
    )
    default int uiSizeNormal() {
        return 16;
    }

    String UI_SIZE_POPULAR = "uiSizePopular";

    @ConfigItem(
            keyName = UI_SIZE_POPULAR,
            name = "UI Size Popular",
            position = 5,
            description = "Size of the timer for a highlighted popular tree.",
            section = uiCustomizationSection
    )
    default int uiSizePopular() {
        return 25;
    }

    @ConfigSection(
            name = "Debug",
            description = "Advanced debugging features. You probably don't need this.",
            position = 4,
            closedByDefault = true
    )
    String debugSection = "debugSection";

    @ConfigItem(
            keyName = "debugLevel",
            name = "Debug Level",
            description = "Controls the amount of debug information displayed.",
            section = debugSection
    )
    default DebugLevel debugLevel() {
        return DebugLevel.NONE;
    }

}

package com.creativetechguy;

import lombok.Getter;
import net.runelite.api.GameObject;
import net.runelite.api.NullObjectID;
import net.runelite.api.ObjectID;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public enum TreeConfig {
    // Seconds from: https://oldschool.runescape.wiki/w/Woodcutting#Mechanics
    // Tree Ids (simplified) from: https://github.com/runelite/runelite/blob/master/runelite-client/src/main/java/net/runelite/client/plugins/woodcutting/Tree.java
    OAK(27, new int[]{ObjectID.OAK_TREE_4540, ObjectID.OAK_TREE_10820}),
    WILLOW(30,
            new int[]{ObjectID.WILLOW_TREE_10819, ObjectID.WILLOW_TREE_10829, ObjectID.WILLOW_TREE_10831, ObjectID.WILLOW_TREE_10833}),
    TEAK(30, new int[]{ObjectID.TEAK_TREE, ObjectID.TEAK_TREE_36686, ObjectID.TEAK_TREE_40758}),
    MAPLE(60, new int[]{ObjectID.MAPLE_TREE_10832, ObjectID.MAPLE_TREE_36681, ObjectID.MAPLE_TREE_40754}),
    HOLLOW(36, new int[]{ObjectID.HOLLOW_TREE_10821, ObjectID.HOLLOW_TREE_10830}),
    MAHOGANY(60,
            new int[]{ObjectID.MAHOGANY_TREE, ObjectID.MAHOGANY_TREE_36688, ObjectID.MAHOGANY_TREE_40760}),
    ARCTIC_PINE(60 + 24, new int[]{ObjectID.ARCTIC_PINE_TREE}),
    YEW(60 + 54,
            new int[]{ObjectID.YEW_TREE_10822, NullObjectID.NULL_10823, ObjectID.YEW_TREE_36683, ObjectID.YEW_TREE_40756, ObjectID.YEW_TREE_42391}),
    MAGIC(60 * 3 + 54, new int[]{ObjectID.MAGIC_TREE_10834, NullObjectID.NULL_10835}),
    REDWOOD(60 * 4 + 24,
            new int[]{ObjectID.REDWOOD_TREE, ObjectID.REDWOOD_TREE_29670});

    private static final ArrayList<Integer> blockedRegions = new ArrayList<>(List.of(
            // Miscellania
            10044,
            // Etcetria
            10300
    ));

    @Getter
    private final int maxTicks;
    private final int[] treeIds;
    private static final HashMap<Integer, TreeConfig> treeMap = new HashMap<>();

    static {
        for (TreeConfig treeConfig : values()) {
            for (int treeId : treeConfig.treeIds) {
                treeMap.put(treeId, treeConfig);
            }
        }
    }

    TreeConfig(int maxSeconds, int[] treeIds) {
        this.maxTicks = (int) Math.round(maxSeconds / 0.6d);
        this.treeIds = treeIds;
    }

    static TreeConfig getTreeById(int gameObjectId) {
        return treeMap.get(gameObjectId);
    }

    static boolean isTree(GameObject gameObject) {
        if (blockedRegions.contains(gameObject.getWorldLocation().getRegionID())) {
            return false;
        }
        return treeMap.containsKey(gameObject.getId());
    }
}

package com.creativetechguy;

public enum DebugLevel {
    NONE(0),
    BASIC(1),
    VERBOSE(2),
    SILLY(3);
    private final int value;

    private DebugLevel(int value) {
        this.value = value;
    }

    public boolean shouldShow(DebugLevel userLevel) {
        return userLevel.value >= this.value;
    }
}

package com.creativetechguy;

import com.google.inject.Provides;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.Angle;
import net.runelite.api.coords.Direction;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.annotation.Nullable;
import javax.inject.Inject;
import java.util.*;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

@Slf4j
@PluginDescriptor(
        name = "Tree Despawn Timer",
        description = "Show an estimate of the remaining time until a tree is chopped down",
        configName = TreeDespawnTimerConfig.GROUP_NAME
)
public class TreeDespawnTimerPlugin extends Plugin {
    @Inject
    private Client client;

    @Inject
    private TreeDespawnTimerConfig config;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private TreeDespawnTimerOverlay treeDespawnTimerOverlay;

    @Getter
    private int subTick = 0;

    private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
    private ScheduledFuture<?> subTickFuture;
    private final HashMap<WorldPoint, TreeState> treeAtLocation = new HashMap<>();
    protected HashSet<TreeState> uniqueTrees = new HashSet<>();
    private final HashMap<Player, TreeState> playerTreeChopping = new HashMap<>();
    private final HashMap<Player, Integer> newlySpawnedPlayers = new HashMap<>();
    private final HashMap<Player, WorldPoint> playerSpawnLocation = new HashMap<>();
    private final ArrayList<Runnable> deferTickQueue = new ArrayList<>();
    private final HashMap<Player, Integer> playerRecentlySpeced = new HashMap<>();
    private int nextGarbageCollect = 25;
    private int localPlayerRecentlyClimbedRedwood = 0;
    private int currentPlayerPlane = 0;
    private final int playerSpawnedTicksMax = 8;
    private final int playerSpecTicksMax = 8;
    private int nextAnimationRecheck = 0;
    private final int animationRecheckTicks = 4;

    @Provides
    TreeDespawnTimerConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(TreeDespawnTimerConfig.class);
    }

    @Override
    protected void startUp() throws Exception {
        CustomTextComponent.updateFontSizes(config.uiSizeNormal(), config.uiSizePopular());
        overlayManager.add(treeDespawnTimerOverlay);
        deferTickQueue.add(() -> {
            client.getPlayers().forEach(player -> {
                onPlayerSpawned(new PlayerSpawned(player));
                handlePlayerChopping(player);
            });
        });
        subTickFuture = executor.scheduleAtFixedRate(
                () -> {
                    subTick += Constants.CLIENT_TICK_LENGTH;
                },
                0,
                Constants.CLIENT_TICK_LENGTH,
                TimeUnit.MILLISECONDS
        );
    }

    @Override
    protected void shutDown() throws Exception {
        overlayManager.remove(treeDespawnTimerOverlay);
        treeAtLocation.clear();
        uniqueTrees.clear();
        playerTreeChopping.clear();
        newlySpawnedPlayers.clear();
        playerSpawnLocation.clear();
        deferTickQueue.clear();
        playerRecentlySpeced.clear();
        subTickFuture.cancel(false);
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event) {
        if (!event.getGroup().equals(TreeDespawnTimerConfig.GROUP_NAME)) {
            return;
        }
        if (event.getKey().equals(TreeDespawnTimerConfig.UI_SIZE_NORMAL) || event.getKey()
                .equals(TreeDespawnTimerConfig.UI_SIZE_POPULAR)) {
            CustomTextComponent.updateFontSizes(config.uiSizeNormal(), config.uiSizePopular());
        }
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged event) {
        if (event.getGameState() == GameState.HOPPING || event.getGameState() == GameState.LOGGING_IN) {
            treeAtLocation.clear();
            uniqueTrees.clear();
            playerTreeChopping.clear();
            newlySpawnedPlayers.clear();
            playerSpawnLocation.clear();
            deferTickQueue.clear();
            playerRecentlySpeced.clear();
            localPlayerRecentlyClimbedRedwood = playerSpawnedTicksMax;
        }
    }

    @Subscribe
    public void onGameTick(GameTick gameTick) {
        computePlayerPlaneChange();
        if (localPlayerRecentlyClimbedRedwood > 0) {
            localPlayerRecentlyClimbedRedwood--;
        }
        deferTickQueue.forEach(Runnable::run);
        deferTickQueue.clear();

        uniqueTrees.forEach(TreeState::tick);
        nextGarbageCollect--;
        if (nextGarbageCollect <= 0) {
            ArrayList<TreeState> toDelete = new ArrayList<>();
            nextGarbageCollect = 25; // 15 seconds
            uniqueTrees.forEach(tree -> {
                // Cleanup untouched trees far away from the player
                boolean isFarAway = tree.worldPoint.getPlane() == client.getLocalPlayer()
                        .getWorldLocation()
                        .getPlane() && tree.worldPoint.distanceTo(client.getLocalPlayer()
                        .getWorldLocation()) > 150;
                if ((isFarAway && !tree.shouldShowTimer(DebugLevel.NONE)) || (tree.getTimeTicks() <= 0 && tree.playersChopping.isEmpty())) {
                    toDelete.add(tree);
                }
            });
            toDelete.forEach(this::deleteTree);
        }
        // Chopping animations frequently face the wrong direction initially, this rechecks the animation state every few seconds
        nextAnimationRecheck--;
        if (nextAnimationRecheck <= 0) {
            nextAnimationRecheck = animationRecheckTicks;
            client.getPlayers().forEach(this::handlePlayerChopping);
        }
        newlySpawnedPlayers.entrySet().removeIf(p -> {
            p.setValue(p.getValue() - 1);
            if (p.getValue() <= 0) {
                playerSpawnLocation.remove(p.getKey());
            }
            return p.getValue() <= 0;
        });
        playerRecentlySpeced.entrySet().removeIf(p -> {
            p.setValue(p.getValue() - 1);
            return p.getValue() <= 0;
        });
        subTick = 0;
    }

    @Subscribe
    public void onGameObjectSpawned(GameObjectSpawned event) {
        GameObject gameObject = event.getGameObject();
        if (TreeConfig.isTree(gameObject)) {
            TreeState treeState = new TreeState(gameObject, client, config);
            if (treeAtLocation.containsKey(gameObject.getWorldLocation())) {
                return;
            }
            treeState.points.forEach(point -> treeAtLocation.put(point, treeState));
            uniqueTrees.add(treeState);
        }
    }

    @Subscribe
    public void onGameObjectDespawned(GameObjectDespawned event) {
        GameObject gameObject = event.getGameObject();
        if (!TreeConfig.isTree(gameObject)) {
            return;
        }
        TreeState treeState = treeAtLocation.get(gameObject.getWorldLocation());
        if (treeState == null) {
            return;
        }
        if (DebugLevel.VERBOSE.shouldShow(config.debugLevel())) {
            client.addChatMessage(ChatMessageType.GAMEMESSAGE,
                    "TDT DEBUG",
                    treeState.treeName.toLowerCase() + " despawned. P:" + treeState.playersChopping.size() + ", UPC:" + treeState.unrenderedPlayersChopping.size() + "," + (treeState.haveYouChoppedLog ? " HYCL " : " ") + treeState.getTimeSeconds(
                            getSubTick()) + "s remaining" + (treeState.shouldShowTimer(DebugLevel.NONE) ? "" : " (hidden)"),
                    "");
        }
        deleteTree(treeState);
    }

    @Subscribe
    public void onMenuOptionClicked(MenuOptionClicked event) {
        if (!DebugLevel.SILLY.shouldShow(config.debugLevel())) {
            return;
        }
        if (!event.getMenuOption().equals("Examine")) {
            return;
        }
        Tile tile = client.getSelectedSceneTile();
        assert tile != null;
        GameObject[] gameObjects = Optional.ofNullable(tile.getGameObjects()).orElse(new GameObject[]{});
        TreeState treeState = null;
        for (GameObject gameObject : gameObjects) {
            if (gameObject != null && treeAtLocation.containsKey(gameObject.getWorldLocation())) {
                treeState = treeAtLocation.get(gameObject.getWorldLocation());
            }
        }
        if (treeState != null && (treeState.playersChopping.size() > 0 || treeState.unrenderedPlayersChopping.size() > 0)) {
            client.addChatMessage(ChatMessageType.GAMEMESSAGE,
                    "TDT DEBUG",
                    "P: " + treeState.playersChopping.stream()
                            .map(Actor::getName)
                            .collect(Collectors.joining(", ")) + " UPC: " + treeState.unrenderedPlayersChopping.stream()
                            .map(Actor::getName)
                            .collect(Collectors.joining(", ")),
                    "");
        }
    }

    @Subscribe
    public void onAnimationChanged(AnimationChanged event) {
        if (event.getActor() instanceof Player) {
            Player player = (Player) event.getActor();
            deferTickQueue.add(() -> this.handlePlayerChopping(player));
        }
    }

    @Subscribe
    public void onPlayerSpawned(PlayerSpawned event) {
        Player player = event.getPlayer();
        if (player.equals(client.getLocalPlayer())) {
            return;
        }
        newlySpawnedPlayers.put(player, playerSpawnedTicksMax);
        playerSpawnLocation.put(player, player.getWorldLocation());
    }

    @Subscribe
    public void onPlayerDespawned(PlayerDespawned event) {
        Player player = event.getPlayer();
        if (playerTreeChopping.containsKey(player)) {
            TreeState treeState = playerTreeChopping.get(player);
            if (treeState.treeName.equals(TreeConfig.REDWOOD.name())) {
                computePlayerPlaneChange();
            }

            if (!treeState.treeName.equals(TreeConfig.REDWOOD.name()) || hasLocalPlayerRecentlyClimbedRedwood()) {
                treeState.unrenderedPlayersChopping.add(player);
            }
            treeState.playersChopping.remove(player);
            playerTreeChopping.remove(player);
        }
    }

    @Subscribe
    public void onStatChanged(StatChanged event) {
        if (event.getSkill() == Skill.WOODCUTTING) {
            TreeState interactingTree = playerTreeChopping.get(client.getLocalPlayer());
            if (interactingTree != null) {
                interactingTree.haveYouChoppedLog = true;
            }
        }
    }

    void handlePlayerChopping(Player player) {
        // If the player has moved since they spawned, they weren't already chopping
        if (hasMoved(player)) {
            newlySpawnedPlayers.remove(player);
            playerSpawnLocation.remove(player);
        }
        boolean isNewPlayer = newlySpawnedPlayers.containsKey(player);
        TreeState previousTree = playerTreeChopping.get(player);
        TreeState newTree = null;
        if (isWoodcutting(player)) {
            TreeState interactingTree = findClosetFacingTree(player);
            if (interactingTree == null) {
                return;
            }
            newTree = interactingTree;
            // A player spawned in and nearly immediately started chopping, assume they've been chopping for a while
            if (isNewPlayer && !interactingTree.hasUnrenderedPlayersChopping() && interactingTree.playersChopping.isEmpty()) {
                if (interactingTree.treeName.equals(TreeConfig.REDWOOD.name())) {
                    // Local player just climbed a redwood tree, so assume they've been chopping for a while
                    if (hasLocalPlayerRecentlyClimbedRedwood()) {
                        interactingTree.hideTree = true;
                    }
                    // If the local player has already been at redwoods and a new player shows up,
                    // ignore that they are a new player since that player likely just climbed the ladder too.
                } else {
                    interactingTree.hideTree = true;
                }
            }
            interactingTree.playersChopping.add(player);
            playerTreeChopping.put(player, interactingTree);
            interactingTree.unrenderedPlayersChopping.removeIf((p) -> Objects.equals(p.getName(), player.getName()));
        }
        if (previousTree != newTree && previousTree != null) {
            previousTree.playersChopping.remove(player);
            if (newTree == null) {
                playerTreeChopping.remove(player);
            }
        }
    }

    void deleteTree(TreeState treeState) {
        treeState.playersChopping.forEach(playerTreeChopping::remove);
        treeState.points.forEach(treeAtLocation::remove);
        uniqueTrees.remove(treeState);
    }

    void computePlayerPlaneChange() {
        int newPlane = client.getLocalPlayer().getWorldLocation().getPlane();
        if (newPlane != currentPlayerPlane) {
            currentPlayerPlane = newPlane;
            localPlayerRecentlyClimbedRedwood = playerSpawnedTicksMax;
        }
    }

    boolean hasLocalPlayerRecentlyClimbedRedwood() {
        return localPlayerRecentlyClimbedRedwood > 0;
    }

    @Nullable
    TreeState findClosetFacingTree(Player player) {
        WorldPoint actorLocation = player.getWorldLocation();
        Direction direction = new Angle(player.getOrientation()).getNearestDirection();
        WorldPoint facingPoint = neighborPoint(actorLocation, direction);
        return treeAtLocation.get(facingPoint);
    }

    private WorldPoint neighborPoint(WorldPoint point, Direction direction) {
        switch (direction) {
            case NORTH:
                return point.dy(1);
            case SOUTH:
                return point.dy(-1);
            case EAST:
                return point.dx(1);
            case WEST:
                return point.dx(-1);
            default:
                throw new IllegalStateException();
        }
    }

    // https://github.com/runelite/runelite/blob/master/runelite-client/src/main/java/net/runelite/client/plugins/woodcutting/WoodcuttingPlugin.java#L103
    private boolean isWoodcutting(Player player) {
        if (playerRecentlySpeced.containsKey(player)) {
            return true;
        }
        switch (player.getAnimation()) {
            // 1H Axes
            case AnimationID.WOODCUTTING_BRONZE:
            case AnimationID.WOODCUTTING_IRON:
            case AnimationID.WOODCUTTING_STEEL:
            case AnimationID.WOODCUTTING_BLACK:
            case AnimationID.WOODCUTTING_MITHRIL:
            case AnimationID.WOODCUTTING_ADAMANT:
            case AnimationID.WOODCUTTING_RUNE:
            case AnimationID.WOODCUTTING_GILDED:
            case AnimationID.WOODCUTTING_DRAGON:
            case AnimationID.WOODCUTTING_DRAGON_OR:
            case AnimationID.WOODCUTTING_INFERNAL:
            case AnimationID.WOODCUTTING_3A_AXE:
            case AnimationID.WOODCUTTING_CRYSTAL:
            case AnimationID.WOODCUTTING_TRAILBLAZER:
                // 2H Axes
            case AnimationID.WOODCUTTING_2H_BRONZE:
            case AnimationID.WOODCUTTING_2H_IRON:
            case AnimationID.WOODCUTTING_2H_STEEL:
            case AnimationID.WOODCUTTING_2H_BLACK:
            case AnimationID.WOODCUTTING_2H_MITHRIL:
            case AnimationID.WOODCUTTING_2H_ADAMANT:
            case AnimationID.WOODCUTTING_2H_RUNE:
            case AnimationID.WOODCUTTING_2H_DRAGON:
            case AnimationID.WOODCUTTING_2H_CRYSTAL:
            case AnimationID.WOODCUTTING_2H_CRYSTAL_INACTIVE:
            case AnimationID.WOODCUTTING_2H_3A:
                return true;
            // Special Attack
            case 2876: // (Lumber Up) Special Attack
                playerRecentlySpeced.put(player, playerSpecTicksMax);
                return true;
            default:
                return false;
        }
    }

    private boolean hasMoved(Player player) {
        WorldPoint spawnLocation = playerSpawnLocation.get(player);
        if (spawnLocation == null) {
            return false;
        }
        return !player.getWorldLocation().equals(spawnLocation);
    }
}

package com.creativetechguy;

import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ProgressPieComponent;

import javax.inject.Inject;
import java.awt.*;
import java.time.Duration;

public class TreeDespawnTimerOverlay extends Overlay {

    private final TreeDespawnTimerPlugin plugin;
    private final TreeDespawnTimerConfig config;
    private final Client client;

    @Inject
    private TreeDespawnTimerOverlay(TreeDespawnTimerPlugin plugin, TreeDespawnTimerConfig config, Client client) {
        this.plugin = plugin;
        this.config = config;
        this.client = client;
        setLayer(OverlayLayer.UNDER_WIDGETS);
        setPosition(OverlayPosition.DYNAMIC);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        for (TreeState treeState : plugin.uniqueTrees) {
            if (!treeState.shouldShowTimer()) {
                continue;
            }
            LocalPoint lp = LocalPoint.fromWorld(client, treeState.worldPoint);
            if (lp == null) {
                continue;
            }
            LocalPoint centeredPoint = new LocalPoint(lp.getX() + treeState.centerOffset.getX(),
                    lp.getY() + treeState.centerOffset.getY());
            Point point = Perspective.localToCanvas(client,
                    centeredPoint,
                    client.getPlane());
            if (point == null) {
                continue;
            }
            // Mobile InfoBox reveals that the +10 bonus doesn't include yourself.
            int minPlayersForPopular = treeState.playersChopping.contains(client.getLocalPlayer()) ? 11 : 10;
            boolean isPopularTree = config.highlightPopularTrees() && treeState.playersChopping.size() >= minPlayersForPopular && treeState.canShowPopularIndicator();
            if (config.timerType() == TimerTypes.PIE) {
                ProgressPieComponent pie = new ProgressPieComponent();
                pie.setPosition(point);
                pie.setBorderColor(treeState.getTimerColor());
                pie.setDiameter(config.uiSizeNormal());
                if (isPopularTree) {
                    pie.setBorder(Color.BLACK, 2);
                    pie.setDiameter(config.uiSizePopular());
                }
                pie.setFill(treeState.getTimerColor());
                pie.setProgress(treeState.getTimePercent());
                pie.render(graphics);
            } else if (config.timerType() == TimerTypes.TICKS) {
                String text = treeState.getTimeTicks().toString();
                CustomTextComponent textComponent = new CustomTextComponent(text,
                        new java.awt.Point(point.getX(), point.getY()));
                if (isPopularTree) {
                    textComponent.setEmphasize(true);
                }
                textComponent.setColor(treeState.getTimerColor());
                textComponent.render(graphics);
            } else if (config.timerType() == TimerTypes.SECONDS) {
                Duration duration = Duration.ofSeconds(treeState.getTimeSeconds(plugin.getSubTick()));
                String text = String.format("%s%d:%02d",
                        duration.toSeconds() < 0 ? "-" : "",
                        Math.abs(duration.toMinutesPart()),
                        Math.abs(duration.toSecondsPart()));
                CustomTextComponent textComponent = new CustomTextComponent(text,
                        new java.awt.Point(point.getX(), point.getY()));
                if (isPopularTree) {
                    textComponent.setEmphasize(true);
                }
                textComponent.setColor(treeState.getTimerColor());
                textComponent.render(graphics);
            }
            if (DebugLevel.VERBOSE.shouldShow(config.debugLevel())) {
                StringBuilder text = new StringBuilder();
                text.append("P:").append(treeState.playersChopping.size());
                if (treeState.hasUnrenderedPlayersChopping()) {
                    text.append(" UPC:" + treeState.unrenderedPlayersChopping.size());
                }
                if (treeState.haveYouChoppedLog) {
                    text.append(" HYCL");
                }
                CustomTextComponent textComponent = new CustomTextComponent(text.toString(),
                        new java.awt.Point(point.getX(), point.getY() - 10));
                textComponent.setColor(Color.CYAN);
                textComponent.render(graphics);
            }
        }
        return null;
    }
}

