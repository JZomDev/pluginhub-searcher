package com.bingoteamindicators;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class BingoTeamColoursPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(BingoTeamIndicatorsPlugin.class);
		RuneLite.main(args);
	}
}
package com.bingoteamindicators;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;

@ConfigGroup("BingoTeamIndicators")
public interface BingoTeamIndicatorsConfig extends Config
{

}

package com.bingoteamindicators;

import com.google.gson.Gson;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.ArrayList;

import static net.runelite.client.RuneLite.RUNELITE_DIR;

public class PersistentVariablesHandler implements Serializable {

    int amountOfTeams = 1;
    ArrayList<String> names = new ArrayList<>();
    transient File file;

    transient Gson gson;

    public PersistentVariablesHandler() {
    }

    public PersistentVariablesHandler(Gson gson) {
        this.gson = gson;
    }

    public void init() {
        createDirectory();
        load();
    }

    private void createDirectory() {
        File mainFolder = new File(RUNELITE_DIR, "bingo-team-colours");
        file = new File(mainFolder, "bingo.json");

        if (!file.exists()) {
            mainFolder.mkdirs();
            try {
                file.createNewFile();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }
    }

    private void save() {
        try {
            String json = gson.toJson(this);

            Files.write(file.toPath(), json.getBytes(StandardCharsets.UTF_8));

        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }

    private void load() {
        try {
            String json = Files.readString(file.toPath());
            PersistentVariablesHandler handler = gson.fromJson(json, PersistentVariablesHandler.class);

            if (handler != null) {
                this.amountOfTeams = handler.getAmountOfTeams();
                this.names = handler.getNames();
            }
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }

    public int getAmountOfTeams() {
        return amountOfTeams;
    }

    public ArrayList<String> getNames() {
        return names;
    }

    public void setAmountOfTeams(int amount) {
        this.amountOfTeams = amount;
        save();
    }

    public void setNames(ArrayList<String> names) {
        this.names = names;
        save();
    }
}

package com.bingoteamindicators;

import com.google.gson.Gson;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.FlatTextField;

import javax.inject.Inject;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.util.ArrayList;

@Slf4j
public class BingoTeamIndicatorsPanel extends PluginPanel {

    private final ArrayList<JPanel> teamFields = new ArrayList<>();
    private final ArrayList<String> teamNames = new ArrayList<>();
    private FlatTextField amountOfTeams;

    private PersistentVariablesHandler dataHandler;
    @Inject
    private BingoTeamIndicatorsPlugin plugin;


    @Inject
    public BingoTeamIndicatorsPanel(BingoTeamIndicatorsPlugin plugin, Gson gson) {
        dataHandler = new PersistentVariablesHandler(gson);
        this.plugin = plugin;
    }

    public void init() {
        dataHandler.init();
        createTitle();
        createTeamPanels();
    }

    public PersistentVariablesHandler getDataHandler(){
        return dataHandler;
    }

    private void createTitle() {
        removeAll();

        JPanel titlePanel = new JPanel();
        titlePanel.setBorder(new EmptyBorder(10, 10, 20, 10));

        JLabel title = new JLabel();
        title.setText("Bingo Team Indicators");
        title.setForeground(Color.WHITE);
        titlePanel.add(title);

        add(titlePanel);

        JPanel teamAmount = new JPanel();
        JLabel amountLabel = new JLabel();
        amountLabel.setText("Amount of teams");
        amountLabel.setForeground(Color.WHITE);
        teamAmount.add(amountLabel, BorderLayout.CENTER);

        amountOfTeams = new FlatTextField();
        if (dataHandler.getAmountOfTeams() > 0) {
            amountOfTeams.setText(String.valueOf(dataHandler.getAmountOfTeams()));
        } else {
            amountOfTeams.setText("1");
        }
        amountOfTeams.setBackground(ColorScheme.DARKER_GRAY_COLOR);

        teamAmount.add(amountOfTeams);
        amountOfTeams.getDocument().addDocumentListener(new DocumentListener() {

            final Runnable refresh = () -> refreshPanel();

            @Override
            public void insertUpdate(DocumentEvent e) {
                SwingUtilities.invokeLater(refresh);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                SwingUtilities.invokeLater(refresh);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                SwingUtilities.invokeLater(refresh);
            }
        });

        add(teamAmount);
    }

    public void createTeamPanels() {
        for (int i = 0; i < getAmountOfTeams(); i++) {
            addTeamField(i);
        }
    }

    private int getAmountOfTeams() {
        int n = 1;
        try {
            n = Integer.parseInt(amountOfTeams.getText());
            if (n < 1) {
                n = 1;
                amountOfTeams.setText("1");
            } else if (n > 15) {
                n = 15;
                amountOfTeams.setText("15");
            }
        } catch (NumberFormatException e) {
            amountOfTeams.setText("1");
        }
        return n;
    }

    public void refreshPanel() {
        int amount = getAmountOfTeams();

        //If the number got lowered, remove the latest ones in the list
        if (amount < teamFields.size()) {
            ArrayList<JPanel> toRemove = new ArrayList<>();
            for (int i = teamFields.size(); i > amount; i--) {
                toRemove.add(teamFields.get(i - 1));
            }
            for (int i = 0; i < toRemove.size(); i++) {
                remove(toRemove.get(i));
                teamFields.remove(toRemove.get(i));
            }
        }
        //If the number got raised, add new panels without removing the previous
        else if (amount > teamFields.size()) {
            for (int i = teamFields.size(); i < amount; i++) {
                addTeamField(i);
            }
        }

        dataHandler.setAmountOfTeams(getAmountOfTeams());
        revalidate();
    }

    private void addTeamField(int index) {
        JPanel teamPanel = new JPanel();
        teamPanel.setBorder(new EmptyBorder(10, 10, 10, 10));

        JLabel teamLabel = new JLabel();
        teamLabel.setText("Team " + (index + 1));
        teamLabel.setToolTipText("Separate names by commas");
        teamLabel.setForeground(Color.WHITE);
        teamPanel.add(teamLabel, BorderLayout.NORTH);

        JTextArea names = new JTextArea();
        names.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH - 20, 100));
        names.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        names.setLineWrap(true);
        names.getDocument().addDocumentListener(new DocumentListener() {

            final Runnable refresh = new Runnable() {
                @Override
                public void run() {
                    if (teamNames.size() > index)
                        teamNames.set(index, names.getText());
                    else
                        teamNames.add(names.getText());
                    dataHandler.setNames(teamNames);
                    plugin.linkNamesToIcons();
                }
            };

            @Override
            public void insertUpdate(DocumentEvent e) {
                SwingUtilities.invokeLater(refresh);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                SwingUtilities.invokeLater(refresh);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                SwingUtilities.invokeLater(refresh);
            }
        });

        if (dataHandler.getNames().size() > index) {
            String n = dataHandler.getNames().get(index);
            names.setText(n);
        }
        teamPanel.add(names);

        teamFields.add(teamPanel);
        teamPanel.setPreferredSize(new Dimension(PANEL_WIDTH, 150));
        add(teamPanel);
    }
}

package com.bingoteamindicators;


public enum ChatIcons {
    ONE("/one.png"),
    TWO("/two.png"),
    THREE("/three.png"),
    FOUR("/four.png"),
    FIVE("/five.png"),
    SIX("/six.png"),
    SEVEN("/seven.png"),
    EIGHT("/eight.png"),
    NINE("/nine.png"),
    TEN("/ten.png"),
    ELEVEN("/eleven.png"),
    TWELVE("/twelve.png"),
    THIRTEEN("/thirteen.png"),
    FOURTEEN("/fourteen.png"),
    FIFTEEN("/fifteen.png");

    private final String path;
    ChatIcons(String path) { this.path = path; }
    String getIconPath() {return path;}
}

package com.bingoteamindicators;

import com.google.inject.Provides;

import javax.imageio.ImageIO;
import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.Text;

import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.HashMap;

@Slf4j
@PluginDescriptor(
        name = "Bingo Team Indicators"
)
public class BingoTeamIndicatorsPlugin extends Plugin {
    @Inject
    private Client client;

    @Inject
    private BingoTeamIndicatorsConfig config;

    @Inject
    private ClientToolbar clientToolbar;

    @Inject
    private ClientThread clientThread;

    //Sidepanel
    private BingoTeamIndicatorsPanel panel;
    private NavigationButton navButton;

    //Icons stuff
    private final HashMap<ChatIcons, Integer> iconIds = new HashMap<>();
    private final HashMap<Integer, String> iconTags = new HashMap<>();
    private final HashMap<String, Integer> nameNumberCombo = new HashMap<>();
    private boolean hasLoaded = false;

    @Provides
    BingoTeamIndicatorsConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(BingoTeamIndicatorsConfig.class);
    }

    private BufferedImage getIcon() {
        return ImageUtil.loadImageResource(BingoTeamIndicatorsPlugin.class, "/panelIcon.png");
    }

    @Override
    protected void startUp() throws Exception {
        panel = injector.getInstance(BingoTeamIndicatorsPanel.class);
        panel.init();

        navButton = NavigationButton.builder()
                .tooltip("Bingo Team Indicators")
                .priority(10)
                .icon(getIcon())
                .panel(panel)
                .build();

        clientToolbar.addNavigation(navButton);
    }

    @Override
    protected void shutDown() throws Exception {
        clientToolbar.removeNavigation(navButton);
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged state) {
        if (!hasLoaded && state.getGameState() == GameState.LOGGED_IN) {
            clientThread.invoke(() -> {
                if (client.getModIcons() == null) return;
                loadIcons();
                panel.init();
                hasLoaded = true;
            });
        }
    }

    @Subscribe
    public void onChatMessage(ChatMessage event) {
        if (event.getType() != ChatMessageType.CLAN_CHAT && event.getType() != ChatMessageType.CLAN_GUEST_CHAT && event.getType() != ChatMessageType.FRIENDSCHAT) {
            return;
        }
        String name = Text.standardize(Text.removeTags(event.getName().toLowerCase()));
        if (nameNumberCombo.containsKey(name)) {
            rebuildChat(Text.removeTags(event.getName()));
        }
    }

    private void loadIcons() {
        final IndexedSprite[] modIcons = client.getModIcons();

        if (modIcons == null) return;

        int index = 0;
        for (ChatIcons icon : ChatIcons.values()) {
            iconIds.put(icon, modIcons.length + index);
            index++;
        }

        final IndexedSprite[] newModIcons = Arrays.copyOf(modIcons, modIcons.length + 15);

        for (ChatIcons icon : iconIds.keySet()) {

            try (InputStream s = getClass().getResourceAsStream(icon.getIconPath());
                 InputStream bufIn = new BufferedInputStream(s))
            {
                BufferedImage bf = ImageIO.read(bufIn);
                IndexedSprite sprite = ImageUtil.getImageIndexedSprite(bf, client);
                newModIcons[iconIds.get(icon)] = sprite;

                iconTags.put((iconIds.get(icon) - modIcons.length), "<img=" + iconIds.get(icon) + ">");

            } catch(IOException ioException) {
                ioException.printStackTrace();
            }
        }

        client.setModIcons(newModIcons);
    }

    private void rebuildChat(String rsn) {
        boolean needsRefresh = false;
        IterableHashTable<MessageNode> msgs = client.getMessages();

        for (MessageNode msg : msgs) {
            String cleanRsn = Text.standardize(Text.removeTags(msg.getName()));
            String rsnFromEvent = Text.standardize(rsn);
            ChatMessageType msgType = msg.getType();

            if (cleanRsn.equals(rsnFromEvent) && (msgType == ChatMessageType.CLAN_CHAT || msgType == ChatMessageType.CLAN_GUEST_CHAT || msgType == ChatMessageType.FRIENDSCHAT)) {
                msg.setName(iconTags.get(nameNumberCombo.get(cleanRsn.toLowerCase())) + rsn);
                needsRefresh = true;
            }
        }
        if (needsRefresh) {
            client.refreshChat();
        }
    }

    public void linkNamesToIcons() {
        PersistentVariablesHandler handler = panel.getDataHandler();

        nameNumberCombo.clear();

        for (int i = 0; i < handler.getNames().size(); i++) {
            String[] names = handler.getNames().get(i).split(",");
            for (int j = 0; j < names.length; j++) {
                names[j] = names[j].strip();
                nameNumberCombo.put(names[j].toLowerCase(), i);
            }
        }
    }
}

