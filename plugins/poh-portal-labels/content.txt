package com.portalname;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import javax.inject.Inject;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
		name = "POH Portal Labels"
)
public class PortalNamePlugin extends Plugin
{
	// @Inject
	// private Client client;

	// @Inject
	// private PortalNameEventSubscriber eventSubscriber;

	@Inject
	private PortalNameConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private PortalNameOverlay overlay;

	@Override
	protected void startUp() throws Exception
	{
		// UNCOMMENT BELOW TO GET LOGS FOR OBJECT IDs
		//eventBus.register(eventSubscriber);
                log.debug("Portal Name plugin started!");
                overlay.updatePortalColors();
                overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		// UNCOMMENT BELOW TO GET LOGS FOR OBJECT IDs
		//eventBus.unregister(eventSubscriber);
                log.debug("Portal Name plugin stopped!");
                overlayManager.remove(overlay);
	}

	@Provides
	PortalNameConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(PortalNameConfig.class);
	}
}

package com.portalname;

import net.runelite.client.config.*;

import java.awt.*;


@ConfigGroup("PortalName")
public interface PortalNameConfig extends Config {

    // Enum list for choosing active color style
    public enum ColorStyle {
        SINGLE,
        MULTI
    }

    // Position of the label relative to the portal
    enum TextPosition
    {
        TOP,
        MIDDLE,
        BOTTOM
    }

    @ConfigItem(
            keyName = "colorStyle",
            name = "Color Style",
            description = "How colors should be displayed"
    )
    default ColorStyle colorStyle()
    {
        return ColorStyle.SINGLE;   // Default to single color
    }

    @ConfigItem(
            keyName = "textPosition",
            name = "Text Position",
            description = "Where labels are drawn relative to the portal"
    )
    default TextPosition textPosition()
    {
        return TextPosition.MIDDLE;
    }


    // SINGLE STYLE SECTION
    @ConfigSection(
            name = "Single Style",
            description = "One color for all labels or Multiple = Different colors per portal",
            position = 0
    )
    String singleStyle = "singleStyle";

    @ConfigItem(
            keyName = "singleColor",
            name = "Color",
            description = "Single color for all labels",
            section = singleStyle
    )
    default Color singleColor()
    {
        return Color.GREEN; // default color green
    }


    // MULTI STYLE
    @ConfigSection(
            name = "Multi Style",
            description = "Different colors per portal",
            position = 1
    )
    String multiStyle = "multiStyle";

    // REQUIRED TO DO SPACING IN LABELS
    public enum ColorSelection
    {
        PORTAL_COLORS("Portal Colors"),
        UNIQUE_COLORS("Unique Colors");

        private final String label;

        ColorSelection(String label)
        {
            this.label = label;
        }

        @Override
        public String toString()
        {
            return label;
        }
    }

    @ConfigItem(
            keyName = "colorSelection",
            name = "Color Selection",
            description = "Use portal colors or set unique colors per destination",
            section = "multiStyle"
    )
    default ColorSelection colorSelection() {
        return ColorSelection.PORTAL_COLORS;
    }


    // UNIQUE PORTAL COLOR SECTION
    @ConfigSection(
            name = "Unique Portal Colors",
            description = "Only used when 'Unique Colors' is selected above",
            position = 2
    )
    String uniqueColors = "uniqueColors";

    // UNIQUE PORTAL COLORS
    @ConfigItem(
            keyName = "annakarlColor",
            name = "Annakarl",
            description = "Color for Annakarl Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color  annakarlColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "apeAtollColor",
            name = "Ape Atoll Dungeon",
            description = "Color for Ape Atoll Dungeon Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color apeAtollColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "arceuusLibraryColor",
            name = "Arceuus Library",
            description = "Color for Arceuus Library Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color arceuusLibraryColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "ardougneColor",
            name = "Ardougne",
            description = "Color for Ardougne Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color ardougneColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "barrowsColor",
            name = "Barrows",
            description = "Color for Barrows Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color barrowsColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "battlefrontColor",
            name = "Battlefront",
            description = "Color for Battlefront Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color battlefrontColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "camelotColor",
            name = "Camelot",
            description = "Color for Camelot Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color camelotColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "carrallangerColor",
            name = "Carrallanger",
            description = "Color for Carrallanger Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color carrallangerColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "catherbyColor",
            name = "Catherby",
            description = "Color for Catherby Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color catherbyColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "cemeteryColor",
            name = "Cemetery",
            description = "Color for Cemetery Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color cemeteryColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "civitasColor",
            name = "Civitas illa Fortis",
            description = "Color for Civitas illa Fortis Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color civitasColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "draynorColor",
            name = "Draynor Manor",
            description = "Color for Draynor Manor Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color draynorColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "faladorColor",
            name = "Falador",
            description = "Color for Falador Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color faladorColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "fenkenstrainColor",
            name = "Fenkenstrain's Castle",
            description = "Color for Fenkenstrain's Castle Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color fenkenstrainColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "fishingGuildColor",
            name = "Fishing Guild",
            description = "Color for Fishing Guild Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color fishingGuildColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "ghorrockColor",
            name = "Ghorrock",
            description = "Color for Ghorrock Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color ghorrockColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "grandExchangeColor",
            name = "Grand Exchange",
            description = "Color for Grand Exchange Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color grandExchangeColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "harmonyIslandColor",
            name = "Harmony Island",
            description = "Color for Harmony Island Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color harmonyIslandColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "kharyrllColor",
            name = "Kharyrll",
            description = "Color for Kharyrll Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color kharyrllColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "kourendColor",
            name = "Kourend",
            description = "Color for Kourend Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color kourendColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "lumbridgeColor",
            name = "Lumbridge",
            description = "Color for Lumbridge Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color lumbridgeColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "lunarIsleColor",
            name = "Lunar Isle",
            description = "Color for Lunar Isle Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color lunarIsleColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "marimColor",
            name = "Marim",
            description = "Color for Marim Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color marimColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "mindAltarColor",
            name = "Mind Altar",
            description = "Color for Mind Altar Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color mindAltarColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "salveGraveyardColor",
            name = "Salve Graveyard",
            description = "Color for Salve Graveyard Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color salveGraveyardColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "seersVillageColor",
            name = "Seers' Village",
            description = "Color for Seers' Village Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color seersVillageColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "senntistenColor",
            name = "Senntisten",
            description = "Color for Senntisten Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color senntistenColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "trollStrongholdColor",
            name = "Troll Stronghold",
            description = "Color for Troll Stronghold Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color trollStrongholdColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "varrockColor",
            name = "Varrock",
            description = "Color for Varrock Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color varrockColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "waterbirthColor",
            name = "Waterbirth Island",
            description = "Color for Waterbirth Island Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color waterbirthColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "weissColor",
            name = "Weiss",
            description = "Color for Weiss Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color weissColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "westArdougneColor",
            name = "West Ardougne",
            description = "Color for West Ardougne Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color westArdougneColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "yanilleColor",
            name = "Yanille",
            description = "Color for Yanille Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color yanilleColor() { return Color.GREEN; }

    @ConfigItem(
            keyName = "yanilleWatchtowerColor",
            name = "Yanille Watchtower",
            description = "Color for Yanille Watchtower Portal",
            section = "uniqueColors"
    )
    @Alpha
    default Color yanilleWatchtowerColor() { return Color.GREEN; }




}

package com.portalname;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.client.eventbus.Subscribe;
import javax.inject.Inject;

@Slf4j
public class PortalNameEventSubscriber
{
    private final Client client;

    @Inject
    public PortalNameEventSubscriber(Client client)
    {
        this.client = client;
    }

    @Subscribe
    public void onMenuOptionClicked(MenuOptionClicked event)
    {
        MenuAction action = event.getMenuAction();

        if (action == MenuAction.GAME_OBJECT_FIRST_OPTION
                || action == MenuAction.GAME_OBJECT_SECOND_OPTION
                || action == MenuAction.GAME_OBJECT_THIRD_OPTION
                || action == MenuAction.GAME_OBJECT_FOURTH_OPTION
                || action == MenuAction.GAME_OBJECT_FIFTH_OPTION)
        {
            int id = event.getId();
            GameObject clickedObject = findGameObjectById(id);

            if (clickedObject != null)
            {
                log.debug("Clicked GameObject: ID={}, Class={}, WorldLocation={}",
                        clickedObject.getId(),
                        clickedObject.getClass().getSimpleName(),
                        clickedObject.getWorldLocation());
            }
            else
            {
                log.debug("Clicked GameObject ID={}, but couldn't find matching GameObject in scene.", id);
            }
        }
    }

    private GameObject findGameObjectById(int id)
    {
        int plane = client.getPlane();
        Tile[][] tiles = client.getScene().getTiles()[plane];

        for (int x = 0; x < tiles.length; x++)
        {
            for (int y = 0; y < tiles[x].length; y++)
            {
                Tile tile = tiles[x][y];
                if (tile == null)
                    continue;

                for (GameObject obj : tile.getGameObjects())
                {
                    if (obj != null && obj.getId() == id)
                    {
                        return obj;
                    }
                }
            }
        }

        return null;
    }
}

package com.portalname;

import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.Point;
import net.runelite.api.Scene;
import net.runelite.api.Perspective;
import net.runelite.api.Tile;
import net.runelite.api.Model;
import net.runelite.api.JagexColor;
import net.runelite.api.gameval.ObjectID;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import lombok.extern.slf4j.Slf4j;
import java.awt.*;
import java.util.HashMap;
import javax.inject.Inject;
import java.util.Map;
import com.portalname.PortalNameConfig.TextPosition;


@Slf4j
public class PortalNameOverlay extends Overlay
{


    private static final Map<Integer, String> PORTAL_LABELS = new HashMap<>();

    static {
        PORTAL_LABELS.put(29341, "Annakarl");
        PORTAL_LABELS.put(29349, "Annakarl");
        PORTAL_LABELS.put(29357, "Annakarl");
        PORTAL_LABELS.put(56052, "Annakarl");
        PORTAL_LABELS.put(37592, "Ape Atoll Dungeon");
        PORTAL_LABELS.put(37604, "Ape Atoll Dungeon");
        PORTAL_LABELS.put(37616, "Ape Atoll Dungeon");
        PORTAL_LABELS.put(56073, "Ape Atoll Dungeon");
        PORTAL_LABELS.put(41416, "Arceuus Library");
        PORTAL_LABELS.put(41417, "Arceuus Library");
        PORTAL_LABELS.put(41418, "Arceuus Library");
        PORTAL_LABELS.put(56063, "Arceuus Library");
        PORTAL_LABELS.put(13619, "Ardougne");
        PORTAL_LABELS.put(13626, "Ardougne");
        PORTAL_LABELS.put(13633, "Ardougne");
        PORTAL_LABELS.put(56045, "Ardougne");
        PORTAL_LABELS.put(37591, "Barrows");
        PORTAL_LABELS.put(37603, "Barrows");
        PORTAL_LABELS.put(37615, "Barrows");
        PORTAL_LABELS.put(56072, "Barrows");
        PORTAL_LABELS.put(37584, "Battlefront");
        PORTAL_LABELS.put(37596, "Battlefront");
        PORTAL_LABELS.put(37608, "Battlefront");
        PORTAL_LABELS.put(56065, "Battlefront");
        PORTAL_LABELS.put(13618, "Camelot");
        PORTAL_LABELS.put(33094, "Camelot");
        PORTAL_LABELS.put(33100, "Camelot");
        PORTAL_LABELS.put(33106, "Camelot");
        PORTAL_LABELS.put(56043, "Camelot");
        PORTAL_LABELS.put(33434, "Carrallanger");
        PORTAL_LABELS.put(33437, "Carrallanger");
        PORTAL_LABELS.put(33440, "Carrallanger");
        PORTAL_LABELS.put(56061, "Carrallanger");
        PORTAL_LABELS.put(33432, "Catherby");
        PORTAL_LABELS.put(33435, "Catherby");
        PORTAL_LABELS.put(33438, "Catherby");
        PORTAL_LABELS.put(56059, "Catherby");
        PORTAL_LABELS.put(37590, "Cemetery");
        PORTAL_LABELS.put(37602, "Cemetery");
        PORTAL_LABELS.put(37614, "Cemetery");
        PORTAL_LABELS.put(56071, "Cemetery");
        PORTAL_LABELS.put(50713, "Civitas illa Fortis");
        PORTAL_LABELS.put(50714, "Civitas illa Fortis");
        PORTAL_LABELS.put(50715, "Civitas illa Fortis");
        PORTAL_LABELS.put(56057, "Civitas illa Fortis");
        PORTAL_LABELS.put(37583, "Draynor Manor");
        PORTAL_LABELS.put(37595, "Draynor Manor");
        PORTAL_LABELS.put(37607, "Draynor Manor");
        PORTAL_LABELS.put(56064, "Draynor Manor");
        PORTAL_LABELS.put(13617, "Falador");
        PORTAL_LABELS.put(13624, "Falador");
        PORTAL_LABELS.put(13631, "Falador");
        PORTAL_LABELS.put(56041, "Falador");
        PORTAL_LABELS.put(37587, "Fenkenstrain's Castle");
        PORTAL_LABELS.put(37599, "Fenkenstrain's Castle");
        PORTAL_LABELS.put(37611, "Fenkenstrain's Castle");
        PORTAL_LABELS.put(56068, "Fenkenstrain's Castle");
        PORTAL_LABELS.put(29343, "Fishing Guild");
        PORTAL_LABELS.put(29351, "Fishing Guild");
        PORTAL_LABELS.put(29359, "Fishing Guild");
        PORTAL_LABELS.put(56054, "Fishing Guild");
        PORTAL_LABELS.put(33433, "Ghorrock");
        PORTAL_LABELS.put(33436, "Ghorrock");
        PORTAL_LABELS.put(33439, "Ghorrock");
        PORTAL_LABELS.put(56060, "Ghorrock");
        PORTAL_LABELS.put(13615, "Grand Exchange");
        PORTAL_LABELS.put(33093, "Grand Exchange");
        PORTAL_LABELS.put(33099, "Grand Exchange");
        PORTAL_LABELS.put(33105, "Grand Exchange");
        PORTAL_LABELS.put(56039, "Grand Exchange");
        PORTAL_LABELS.put(37589, "Harmony Island");
        PORTAL_LABELS.put(37601, "Harmony Island");
        PORTAL_LABELS.put(37613, "Harmony Island");
        PORTAL_LABELS.put(56070, "Harmony Island");
        PORTAL_LABELS.put(29338, "Kharyrll");
        PORTAL_LABELS.put(29346, "Kharyrll");
        PORTAL_LABELS.put(29354, "Kharyrll");
        PORTAL_LABELS.put(56049, "Kharyrll");
        PORTAL_LABELS.put(29345, "Kourend");
        PORTAL_LABELS.put(29353, "Kourend");
        PORTAL_LABELS.put(29361, "Kourend");
        PORTAL_LABELS.put(56056, "Kourend");
        PORTAL_LABELS.put(13616, "Lumbridge");
        PORTAL_LABELS.put(13623, "Lumbridge");
        PORTAL_LABELS.put(13630, "Lumbridge");
        PORTAL_LABELS.put(56040, "Lumbridge");
        PORTAL_LABELS.put(29339, "Lunar Isle");
        PORTAL_LABELS.put(29347, "Lunar Isle");
        PORTAL_LABELS.put(29355, "Lunar Isle");
        PORTAL_LABELS.put(56050, "Lunar Isle");
        PORTAL_LABELS.put(29344, "Marim");
        PORTAL_LABELS.put(29352, "Marim");
        PORTAL_LABELS.put(29360, "Marim");
        PORTAL_LABELS.put(56055, "Marim");
        PORTAL_LABELS.put(37585, "Mind Altar");
        PORTAL_LABELS.put(37597, "Mind Altar");
        PORTAL_LABELS.put(37609, "Mind Altar");
        PORTAL_LABELS.put(56066, "Mind Altar");
        PORTAL_LABELS.put(37586, "Salve Graveyard");
        PORTAL_LABELS.put(37598, "Salve Graveyard");
        PORTAL_LABELS.put(37610, "Salve Graveyard");
        PORTAL_LABELS.put(56067, "Salve Graveyard");
        PORTAL_LABELS.put(33095, "Seers' Village");
        PORTAL_LABELS.put(33101, "Seers' Village");
        PORTAL_LABELS.put(33107, "Seers' Village");
        PORTAL_LABELS.put(56044, "Seers' Village");
        PORTAL_LABELS.put(29340, "Senntisten");
        PORTAL_LABELS.put(29348, "Senntisten");
        PORTAL_LABELS.put(29356, "Senntisten");
        PORTAL_LABELS.put(56051, "Senntisten");
        PORTAL_LABELS.put(33179, "Troll Stronghold");
        PORTAL_LABELS.put(33180, "Troll Stronghold");
        PORTAL_LABELS.put(33181, "Troll Stronghold");
        PORTAL_LABELS.put(56058, "Troll Stronghold");
        PORTAL_LABELS.put(33092, "Varrock");
        PORTAL_LABELS.put(33098, "Varrock");
        PORTAL_LABELS.put(33104, "Varrock");
        PORTAL_LABELS.put(56038, "Varrock");
        PORTAL_LABELS.put(29342, "Waterbirth Island");
        PORTAL_LABELS.put(29350, "Waterbirth Island");
        PORTAL_LABELS.put(29358, "Waterbirth Island");
        PORTAL_LABELS.put(56053, "Waterbirth Island");
        PORTAL_LABELS.put(37581, "Weiss");
        PORTAL_LABELS.put(37593, "Weiss");
        PORTAL_LABELS.put(37605, "Weiss");
        PORTAL_LABELS.put(56062, "Weiss");
        PORTAL_LABELS.put(37588, "West Ardougne");
        PORTAL_LABELS.put(37600, "West Ardougne");
        PORTAL_LABELS.put(37612, "West Ardougne");
        PORTAL_LABELS.put(56069, "West Ardougne");
        PORTAL_LABELS.put(33097, "Yanille");
        PORTAL_LABELS.put(33102, "Yanille");
        PORTAL_LABELS.put(33103, "Yanille");
        PORTAL_LABELS.put(33109, "Yanille");
        PORTAL_LABELS.put(56048, "Yanille");
        PORTAL_LABELS.put(33096, "Yanille Watchtower");
        PORTAL_LABELS.put(33108, "Yanille Watchtower");
        PORTAL_LABELS.put(56047, "Yanille Watchtower");
    }

    private final Map<String, Color> portalColors = new HashMap<>();

    private final Client client;

    @Inject
    private PortalNameConfig config;

    @Inject
    public PortalNameOverlay(Client client)
    {
        this.client = client;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    void updatePortalColors()
    {
        portalColors.clear();
        portalColors.put("Annakarl", config.annakarlColor());
        portalColors.put("Ape Atoll Dungeon", config.apeAtollColor());
        portalColors.put("Arceuus Library", config.arceuusLibraryColor());
        portalColors.put("Ardougne", config.ardougneColor());
        portalColors.put("Barrows", config.barrowsColor());
        portalColors.put("Battlefront", config.battlefrontColor());
        portalColors.put("Camelot", config.camelotColor());
        portalColors.put("Carrallanger", config.carrallangerColor());
        portalColors.put("Catherby", config.catherbyColor());
        portalColors.put("Cemetery", config.cemeteryColor());
        portalColors.put("Civitas illa Fortis", config.civitasColor());
        portalColors.put("Draynor Manor", config.draynorColor());
        portalColors.put("Falador", config.faladorColor());
        portalColors.put("Fenkenstrain's Castle", config.fenkenstrainColor());
        portalColors.put("Fishing Guild", config.fishingGuildColor());
        portalColors.put("Ghorrock", config.ghorrockColor());
        portalColors.put("Grand Exchange", config.grandExchangeColor());
        portalColors.put("Harmony Island", config.harmonyIslandColor());
        portalColors.put("Kharyrll", config.kharyrllColor());
        portalColors.put("Kourend", config.kourendColor());
        portalColors.put("Lumbridge", config.lumbridgeColor());
        portalColors.put("Lunar Isle", config.lunarIsleColor());
        portalColors.put("Marim", config.marimColor());
        portalColors.put("Mind Altar", config.mindAltarColor());
        portalColors.put("Salve Graveyard", config.salveGraveyardColor());
        portalColors.put("Seers' Village", config.seersVillageColor());
        portalColors.put("Senntisten", config.senntistenColor());
        portalColors.put("Troll Stronghold", config.trollStrongholdColor());
        portalColors.put("Varrock", config.varrockColor());
        portalColors.put("Waterbirth Island", config.waterbirthColor());
        portalColors.put("Weiss", config.weissColor());
        portalColors.put("West Ardougne", config.westArdougneColor());
        portalColors.put("Yanille", config.yanilleColor());
        portalColors.put("Yanille Watchtower", config.yanilleWatchtowerColor());
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (client.getGameState() != net.runelite.api.GameState.LOGGED_IN)
            return null;

        Scene scene = client.getLocalPlayer().getWorldView().getScene();
        Tile[][] tiles = scene.getTiles()[client.getLocalPlayer().getWorldLocation().getPlane()];

        boolean inPoh = false;
        outer:
        for (int x = 0; x < tiles.length; x++)
        {
            for (int y = 0; y < tiles[x].length; y++)
            {
                Tile tile = tiles[x][y];
                if (tile == null) continue;

                for (GameObject gameObject : tile.getGameObjects())
                {
                    if (gameObject != null && gameObject.getId() == ObjectID.POH_EXIT_PORTAL)
                    {
                        inPoh = true;
                        break outer;
                    }
                }
            }
        }

        if (!inPoh)
        {
            return null;
        }

        for (int x = 0; x < tiles.length; x++)
        {
            for (int y = 0; y < tiles[x].length; y++)
            {
                Tile tile = tiles[x][y];
                if (tile == null) continue;

                for (GameObject gameObject : tile.getGameObjects())
                {
                    if (gameObject == null || gameObject.getId() == -1)
                        continue;

                    int id = gameObject.getId();
                    String label = PORTAL_LABELS.get(id);

                    if (label != null)
                    {
                        LocalPoint localLocation = gameObject.getLocalLocation();
                        if (localLocation != null)
                        {
                            // Offset determines where the label is drawn on the portal
                            int zOffset;
                            switch (config.textPosition())
                            {
                                case TOP:
                                    zOffset = 250;
                                    break;
                                case BOTTOM:
                                    zOffset = -50;
                                    break;
                                case MIDDLE:
                                default:
                                    zOffset = 100;
                                    break;
                            }
                            FontMetrics metrics = graphics.getFontMetrics();
                            int xOffset = -(metrics.stringWidth(label) / 2);
                            Point textLocation = Perspective.localToCanvas(client, localLocation,
                                    client.getLocalPlayer().getWorldLocation().getPlane(), zOffset);
                            if (textLocation != null)
                            {
                                graphics.setColor(Color.BLACK); // outline
                                graphics.drawString(label, textLocation.getX() + xOffset + 1, textLocation.getY() + 1);

                                // Determine color style and set colors
                                if (config.colorStyle() == PortalNameConfig.ColorStyle.SINGLE)
                                {
                                    Color color = config.singleColor();
                                    graphics.setColor(color);
                                }
                                else if (config.colorStyle() == PortalNameConfig.ColorStyle.MULTI)
                                {
                                    // Determine if user wants unique colors or portal colors
                                    if (config.colorSelection() == PortalNameConfig.ColorSelection.PORTAL_COLORS)
                                    {
                                        Color portalColor = getPortalColor(gameObject);
                                        graphics.setColor(portalColor);
                                    }
                                    // Use colors set by user per portal.
                                    else
                                    {
                                        updatePortalColors();   // pull current color config
                                        Color textColor = portalColors.getOrDefault(label, Color.WHITE);
                                        graphics.setColor(textColor);
                                    }
                                }
                                graphics.drawString(label, textLocation.getX() + xOffset, textLocation.getY());
                            }
                        }
                    }
                }
            }
        }

        return null;
    }

    private Color getPortalColor(GameObject gameObject)
    {
        Model model = gameObject.getRenderable().getModel();
        if (model == null)
        {
            return Color.WHITE;
        }

        int[] colors = model.getFaceColors1();
        if (colors == null || colors.length == 0)
        {
            return Color.WHITE;
        }

        int h = JagexColor.unpackHue((short) colors[0]);
        int s = JagexColor.unpackSaturation((short) colors[0]);
        int l = JagexColor.unpackLuminance((short) colors[0]);

        Color color = hslToRgb(h, s, l);

        // Some portal colors can be quite dark. Brighten them for better
        // readability while maintaining the original hue and saturation.
        return brighten(color, 0.4f);
    }

    private static Color hslToRgb(int hue, int sat, int lum)
    {
        float h = (float) hue / JagexColor.HUE_MAX;
        float s = (float) sat / JagexColor.SATURATION_MAX;
        float l = (float) lum / JagexColor.LUMINANCE_MAX;

        float q = l < 0.5f ? l * (1 + s) : (l + s - l * s);
        float p = 2 * l - q;

        float r = hueToRgb(p, q, h + 1f / 3f);
        float g = hueToRgb(p, q, h);
        float b = hueToRgb(p, q, h - 1f / 3f);

        return new Color(
                clamp(Math.round(r * 255)),
                clamp(Math.round(g * 255)),
                clamp(Math.round(b * 255))
        );
    }

    private static float hueToRgb(float p, float q, float t)
    {
        if (t < 0)
        {
            t += 1;
        }
        if (t > 1)
        {
            t -= 1;
        }
        if (t < 1f / 6f)
        {
            return p + (q - p) * 6f * t;
        }
        if (t < 1f / 2f)
        {
            return q;
        }
        if (t < 2f / 3f)
        {
            return p + (q - p) * (2f / 3f - t) * 6f;
        }
        return p;
    }

    private static int clamp(int value)
    {
        return Math.min(255, Math.max(0, value));
    }

    private static Color brighten(Color color, float factor)
    {
        float[] hsb = Color.RGBtoHSB(color.getRed(), color.getGreen(), color.getBlue(), null);
        hsb[2] = Math.min(1f, hsb[2] + factor);
        int rgb = Color.HSBtoRGB(hsb[0], hsb[1], hsb[2]);
        return new Color(rgb);
    }
}

package com.portalname;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PortalNamePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PortalNamePlugin.class);
		RuneLite.main(args);
	}
}
