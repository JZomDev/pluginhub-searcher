package tictac7x.balloon;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class BalloonPluginTest {
	public static void main(String[] args) throws Exception {
		ExternalPluginManager.loadBuiltin(TicTac7xBalloonPlugin.class);
		RuneLite.main(args);
	}
}
package tictac7x.balloon;

import net.runelite.client.config.ConfigManager;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.ui.overlay.infobox.InfoBox;

import java.awt.Color;

public class BalloonInfoBox extends InfoBox {
    private final ConfigManager configs;
    private final BalloonConfig config;
    private final Balloon balloon;

    private final String logs_id;
    private final String tooltip;
    private boolean render_recently = false;

    public BalloonInfoBox(final int item_id, final String logs_id, final String tooltip, final ConfigManager configs, final BalloonConfig config, final ItemManager items, final Balloon balloon, final Plugin plugin) {
        super(items.getImage(item_id), plugin);
        this.configs = configs;
        this.config = config;
        this.balloon = balloon;

        this.logs_id = logs_id;
        this.tooltip = tooltip;
    }

    @Override
    public String getName() {
        return super.getName() + "_" + this.logs_id;
    }

    @Override
    public String getTooltip() {
        return this.tooltip;
    }

    @Override
    public String getText() {
        return String.valueOf(this.getCount());
    }

    @Override
    public Color getTextColor() {
        return this.getCount() > 0 ? Color.lightGray : Color.red;
    }

    @Override
    public boolean render() {
        return
            config.show() == BalloonConfig.Show.ALL_THE_TIME ||
            config.show() == BalloonConfig.Show.NEAR_THE_BALLOON && balloon.isVisible() ||
            config.show() == BalloonConfig.Show.RECENTLY_USED && this.render_recently;
    }

    private int getCount() {
        return Integer.parseInt(configs.getConfiguration(BalloonConfig.group, this.logs_id));
    }

    // Logs count changed and infoboxes are shown based on recently used.
    public void onConfigChanged(final ConfigChanged event) {
        if (
            event.getGroup().equals(BalloonConfig.group) &&
            event.getKey().equals(this.logs_id) &&
            config.show() == BalloonConfig.Show.RECENTLY_USED
        ) {
            // Start showing infobox.
            this.render_recently = true;

            new Thread(() -> {
                try {
                    // Hide the infobox after specified time.
                    Thread.sleep(60L * config.showRecentlyUsedForMinutes() * 1000);
                    this.render_recently = false;
                } catch (final Exception ignored) {}
            }).start();
        }
    }
}

package tictac7x.balloon;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;

import javax.inject.Inject;

@Slf4j
@PluginDescriptor(
	name = "Balloon Transport System",
	description = "Show amount of logs stored in the balloon transport system storages.",
	tags = { "balloon", "transport", "logs", "storage" }
)
public class TicTac7xBalloonPlugin extends Plugin {
	@Inject
	private Client client;

	@Inject
	private OverlayManager overlays;

	@Inject
	private ConfigManager configs;

	@Inject
	private InfoBoxManager infoboxes;

	@Inject
	private ClientThread client_thread;

	@Inject
	private ItemManager items;

	@Inject
	private BalloonConfig config;

	private Balloon balloon;
	private BalloonStorage balloon_storage;
	private BalloonInfoBox[] balloon_infoboxes;

	@Provides
	BalloonConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(BalloonConfig.class);
	}

	@Override
	protected void startUp() {
		balloon = new Balloon();
		balloon_storage = new BalloonStorage(client, client_thread, configs);
		balloon_infoboxes = new BalloonInfoBox[]{
			new BalloonInfoBox(ItemID.LOGS, BalloonConfig.logs_regular, "Regular logs - Entrana / Taverley", configs, config, items, balloon, this),
			new BalloonInfoBox(ItemID.OAK_LOGS, BalloonConfig.logs_oak, "Oak logs - Crafting Guild", configs, config, items, balloon, this),
			new BalloonInfoBox(ItemID.WILLOW_LOGS, BalloonConfig.logs_willow, "Willow logs - Varrock", configs, config, items, balloon, this),
			new BalloonInfoBox(ItemID.YEW_LOGS, BalloonConfig.logs_yew, "Yew logs - Castle Wars", configs, config, items, balloon, this),
			new BalloonInfoBox(ItemID.MAGIC_LOGS, BalloonConfig.logs_magic, "Magic logs - Grand Tree", configs, config, items, balloon, this),
		};

		for (final BalloonInfoBox infobox : balloon_infoboxes) {
			infoboxes.addInfoBox(infobox);
		}
	}

	@Override
	protected void shutDown() {
		for (final BalloonInfoBox infobox : balloon_infoboxes) {
			infoboxes.removeInfoBox(infobox);
		}
	}

	@Subscribe
	public void onChatMessage(final ChatMessage event) {
		balloon_storage.onChatMessage(event);
	}

	@Subscribe
	public void onWidgetLoaded(final WidgetLoaded event) {
		balloon_storage.onWidgetLoaded(event);
	}

	@Subscribe
	public void onGameObjectSpawned(final GameObjectSpawned event) {
		balloon.onGameObjectSpawned(event);
	}

	@Subscribe
	public void onGameStateChanged(final GameStateChanged event) {
		balloon.onGameStateChanged(event);
	}

	@Subscribe
	public void onConfigChanged(final ConfigChanged event) {
		for (final BalloonInfoBox infobox : balloon_infoboxes) {
			infobox.onConfigChanged(event);
		}
	}
}

package tictac7x.balloon;

import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.Range;
import net.runelite.client.config.Units;

@ConfigGroup(BalloonConfig.group)
public interface BalloonConfig extends Config {
	String group = "tictac7x-balloon";
	enum Show { RECENTLY_USED, NEAR_THE_BALLOON, ALL_THE_TIME }

	@ConfigSection(
		name = "Infoboxes",
		description = "Infoboxes",
		position = 1
	) String infoboxes = "infoboxes";

		@ConfigItem(
			keyName = "show",
			name = "Show",
			description = "When to show infoboxes about balloon logs",
			position = 1,
			section = infoboxes
		) default Show show() { return Show.RECENTLY_USED; }

		@Units("min")
		@Range(min = 1, max = 60)
		@ConfigItem(
			keyName = "recently_used",
			name = "Recently used duration",
			description = "Duration for how long infoboxes are visible if showing only recently used logs",
			position = 2,
			section = infoboxes
		) default int showRecentlyUsedForMinutes() { return 3; }

	@ConfigSection(
		name = "Debug",
		description = "Debug",
		position = 2,
		closedByDefault = true
	) String debug = "debug";

		String logs_regular = "logs_regular";
		@ConfigItem(
			keyName = logs_regular,
			name = "Regular logs",
			description = "Amount of regular logs",
			position = 1,
			section = debug
		) default int getLogsRegular() { return 0; }

		String logs_oak = "logs_oak";
		@ConfigItem(
			keyName = logs_oak,
			name = "Oak logs",
			description = "Amount of oak logs",
			position = 2,
			section = debug
		) default int getLogsOak() { return 0; }

		String logs_willow = "logs_willow";
		@ConfigItem(
			keyName = logs_willow,
			name = "Willow logs",
			description = "Amount of willow logs",
			position = 3,
			section = debug
		) default int getLogsWillow() { return 0; }

		String logs_yew = "logs_yew";
		@ConfigItem(
			keyName = logs_yew,
			name = "Yew logs",
			description = "Amount of yew logs",
			position = 4,
			section = debug
		) default int getLogsYew() { return 0; }

		String logs_magic = "logs_magic";
		@ConfigItem(
			keyName = logs_magic,
			name = "Magic logs",
			description = "Amount of magic logs",
			position = 5,
			section = debug
		) default int getLogsMagic() { return 0; }
}

package tictac7x.balloon;

import com.google.common.collect.ImmutableSet;
import net.runelite.api.GameState;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameStateChanged;

import java.util.Set;

public class Balloon {
    private final Set<Integer> balloon_game_object_ids = ImmutableSet.of(19133, 19135, 19137, 19139, 19141, 19143);
    private boolean visible = false;

    public void onGameObjectSpawned(final GameObjectSpawned event) {
        if (balloon_game_object_ids.contains(event.getGameObject().getId())) {
            this.visible = true;
        }
    }

    public void onGameStateChanged(final GameStateChanged event) {
        if (event.getGameState() == GameState.LOADING) {
            this.visible = false;
        }
    }

    public boolean isVisible() {
        return this.visible;
    }
}

package tictac7x.balloon;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;

public class BalloonStorage {
    private static final int WIDGET_CHECK_PARENT_ID = 229;
    private static final int WIDGET_CHECK_CHILD_ID = 1;
    private static final int WIDGET_STORE_PARENT_ID = 193;
    private static final int WIDGET_STORE_CHILD_ID = 2;

    private final Pattern regex_left_plural = Pattern.compile("You have (?<count>.+) sets of (?<type>.*) left in storage.");
    private final Pattern regex_left_singular = Pattern.compile("You have one set of (?<type>.*) left in storage.");
    private final Pattern regex_last = Pattern.compile("You used the last of your (?<type>.*).");
    private final Pattern regex_store = Pattern.compile("You put the (.*) in the crate. You now have (?<count>.+) stored.");
    private final Pattern regex_needed = Pattern.compile("You need 1 (?<type>.*) logs to make this trip.");
    private final Pattern regex_check = Pattern.compile("This crate currently contains (?<regular>.+) logs, (?<oak>.+) oak logs, (?<willow>.+) willow logs, (?<yew>.+) yew logs and (?<magic>.+) magic logs.");

    private final Client client;
    private final ClientThread client_thread;
    private final ConfigManager configs;

    public BalloonStorage(final Client client, final ClientThread client_thread, final ConfigManager configs) {
        this.client = client;
        this.client_thread = client_thread;
        this.configs = configs;
    }

    public void onWidgetLoaded(final WidgetLoaded event) {
        if (event.getGroupId() == WIDGET_CHECK_PARENT_ID) {
            client_thread.invokeLater(() -> {
                final Widget widget = client.getWidget(WIDGET_CHECK_PARENT_ID, WIDGET_CHECK_CHILD_ID);
                if (widget == null) return;

                final String message = widget.getText().replaceAll("<br>", " ");
                updateLogsCountFromCheckMessage(message);
                updateLogsCountFromNeededMessage(message);
            });
        } else if (event.getGroupId() == WIDGET_STORE_PARENT_ID) {
            client_thread.invokeLater(() -> {
                final Widget widget = client.getWidget(WIDGET_STORE_PARENT_ID, WIDGET_STORE_CHILD_ID);
                if (widget == null) return;

                final String message = widget.getText().replaceAll("<br>", " ");
                updateLogsCountFromStoreMessage(message);
            });
        }
    }

    public void onChatMessage(final ChatMessage event) {
        if (event.getType() != ChatMessageType.SPAM) return;
        updateLogsCountFromLeftPluralMessage(event.getMessage());
        updateLogsCountFromLeftSingularMessage(event.getMessage());
        updateLogsCountFromLastMessage(event.getMessage());
    }

    private void updateLogsCountFromLeftPluralMessage(final String message) {
        final Matcher matcher = regex_left_plural.matcher(message);
        if (!matcher.find()) return;

        final String type = matcher.group("type");
        final int count = Integer.parseInt(matcher.group("count"));

        saveLogsCountBasedOnType(type, count);
    }

    private void updateLogsCountFromLeftSingularMessage(final String message) {
        final Matcher matcher = regex_left_singular.matcher(message);
        if (!matcher.find()) return;

        final String type = matcher.group("type");
        saveLogsCountBasedOnType(type, 1);
    }

    private void updateLogsCountFromLastMessage(final String message) {
        final Matcher matcher = regex_last.matcher(message);
        if (!matcher.find()) return;

        final String type = matcher.group("type");
        saveLogsCountBasedOnType(type, 0);
    }

    private void updateLogsCountFromCheckMessage(final String message) {
        final Matcher matcher = regex_check.matcher(message);
        if (!matcher.find()) return;

        final int logs_regular = Integer.parseInt(matcher.group("regular"));
        final int logs_oak     = Integer.parseInt(matcher.group("oak"    ));
        final int logs_willow  = Integer.parseInt(matcher.group("willow" ));
        final int logs_yew     = Integer.parseInt(matcher.group("yew"    ));
        final int logs_magic   = Integer.parseInt(matcher.group("magic"  ));

        saveLogsCountBasedOnType("normal", logs_regular);
        saveLogsCountBasedOnType("oak",    logs_oak    );
        saveLogsCountBasedOnType("willow", logs_willow );
        saveLogsCountBasedOnType("yew",    logs_yew    );
        saveLogsCountBasedOnType("magic",  logs_magic  );
    }

    private void updateLogsCountFromNeededMessage(final String message) {
        final Matcher matcher = regex_needed.matcher(message);
        if (!matcher.find()) return;

        final String type = matcher.group("type");
        saveLogsCountBasedOnType(type, 0);
    }

    private void updateLogsCountFromStoreMessage(final String message) {
        final Matcher matcher = regex_store.matcher(message);
        if (!matcher.find()) return;

        final String type = matcher.group("type");
        final int count = Integer.parseInt(matcher.group("count"));

        saveLogsCountBasedOnType(type, count);
    }

    private void saveLogsCountBasedOnType(final String type, final int count) {
        switch (type) {
            case "Logs":
            case "normal":
                configs.setConfiguration(BalloonConfig.group, BalloonConfig.logs_regular, count);
                break;
            case "Oak logs":
            case "oak":
                configs.setConfiguration(BalloonConfig.group, BalloonConfig.logs_oak,     count);
                break;
            case "Willow logs":
            case "willow":
                configs.setConfiguration(BalloonConfig.group, BalloonConfig.logs_willow,  count);
                break;
            case "Yew logs":
            case "yew":
                configs.setConfiguration(BalloonConfig.group, BalloonConfig.logs_yew,     count);
                break;
            case "Magic logs":
            case "magic":
                configs.setConfiguration(BalloonConfig.group, BalloonConfig.logs_magic,   count);
                break;
        }
    }
}

