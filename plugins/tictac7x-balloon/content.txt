package tictac7x.balloon;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import net.runelite.api.ChatMessageType;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.config.ConfigManager;

public class BalloonStorage {
    private final Pattern regex_left_plural = Pattern.compile("You have (?<count>.+) sets of (?<type>.*) left in storage.");
    private final Pattern regex_left_singular = Pattern.compile("You have one set of (?<type>.*) left in storage.");
    private final Pattern regex_last = Pattern.compile("You used the last of your (?<type>.*).");
    private final Pattern regex_store = Pattern.compile("You put the (?<type>.*) in the crate. You now have (?<count>.+) stored.");
    private final Pattern regex_needed = Pattern.compile("You need 1 (?<type>.*) logs to make this trip.");
    private final Pattern regex_check = Pattern.compile("This crate currently contains (?<regular>.+) logs, (?<oak>.+) oak logs, (?<willow>.+) willow logs, (?<yew>.+) yew logs and (?<magic>.+) magic logs.");

    private final ConfigManager configManager;

    public BalloonStorage(final ConfigManager configManager) {
        this.configManager = configManager;
    }

    public void onChatMessage(final ChatMessage event) {
        if (event.getType() != ChatMessageType.SPAM && event.getType() != ChatMessageType.MESBOX) return;
        final String message = event.getMessage();

        updateLogsCountFromStoreMessage(message);
        updateLogsCountFromCheckMessage(message);
        updateLogsCountFromLeftPluralMessage(message);
        updateLogsCountFromLeftSingularMessage(message);
        updateLogsCountFromLastMessage(message);
        updateLogsCountFromNeededMessage(message);
    }

    private void updateLogsCountFromLeftPluralMessage(final String message) {
        final Matcher matcher = regex_left_plural.matcher(message);

        if (matcher.find()) {
            final String type = matcher.group("type");
            final int count = Integer.parseInt(matcher.group("count"));

            saveLogsCountBasedOnType(type, count);
        }
    }

    private void updateLogsCountFromLeftSingularMessage(final String message) {
        final Matcher matcher = regex_left_singular.matcher(message);

        if (matcher.find()) {
            final String type = matcher.group("type");
            saveLogsCountBasedOnType(type, 1);
        }
    }

    private void updateLogsCountFromLastMessage(final String message) {
        final Matcher matcher = regex_last.matcher(message);

        if (matcher.find()) {
            final String type = matcher.group("type");
            saveLogsCountBasedOnType(type, 0);
        }
    }

    private void updateLogsCountFromCheckMessage(final String message) {
        final Matcher matcher = regex_check.matcher(message);
        if (!matcher.find()) return;

        final int regularLogs = Integer.parseInt(matcher.group("regular"));
        final int oakLogs = Integer.parseInt(matcher.group("oak"));
        final int willowLogs = Integer.parseInt(matcher.group("willow"));
        final int yewLogs = Integer.parseInt(matcher.group("yew"));
        final int magicLogs = Integer.parseInt(matcher.group("magic"));

        saveLogsCountBasedOnType("regular", regularLogs);
        saveLogsCountBasedOnType("oak", oakLogs);
        saveLogsCountBasedOnType("willow", willowLogs);
        saveLogsCountBasedOnType("yew", yewLogs);
        saveLogsCountBasedOnType("magic", magicLogs);
    }

    private void updateLogsCountFromNeededMessage(final String message) {
        final Matcher matcher = regex_needed.matcher(message);

        if (matcher.find()) {
            final String type = matcher.group("type");
            saveLogsCountBasedOnType(type, 0);
        }
    }

    private void updateLogsCountFromStoreMessage(final String message) {
        final Matcher matcher = regex_store.matcher(message);

        if (matcher.find()) {
            final String type = matcher.group("type");
            final int count = Integer.parseInt(matcher.group("count"));
            saveLogsCountBasedOnType(type, count);
        }
    }

    private void saveLogsCountBasedOnType(final String type, final int count) {
        switch (type) {
            case "Logs":
            case "normal":
            case "regular":
                configManager.setConfiguration(TicTac7xBalloonConfig.group, TicTac7xBalloonConfig.logs_regular, count);
                break;
            case "Oak logs":
            case "oak":
                configManager.setConfiguration(TicTac7xBalloonConfig.group, TicTac7xBalloonConfig.logs_oak, count);
                break;
            case "Willow logs":
            case "willow":
                configManager.setConfiguration(TicTac7xBalloonConfig.group, TicTac7xBalloonConfig.logs_willow, count);
                break;
            case "Yew logs":
            case "yew":
                configManager.setConfiguration(TicTac7xBalloonConfig.group, TicTac7xBalloonConfig.logs_yew, count);
                break;
            case "Magic logs":
            case "magic":
                configManager.setConfiguration(TicTac7xBalloonConfig.group, TicTac7xBalloonConfig.logs_magic, count);
                break;
        }
    }
}

package tictac7x.balloon;

import net.runelite.client.config.ConfigManager;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.ui.overlay.infobox.InfoBox;

import java.awt.Color;

public class BalloonInfoBox extends InfoBox {
    private final ConfigManager configManager;
    private final TicTac7xBalloonConfig config;
    private final Balloon balloon;

    private final String logConfigKeyName;
    private final String tooltip;
    private boolean renderRecently = false;

    public BalloonInfoBox(final int item_id, final String logConfigKeyName, final String tooltip, final ConfigManager configManager, final TicTac7xBalloonConfig config, final ItemManager items, final Balloon balloon, final Plugin plugin) {
        super(items.getImage(item_id), plugin);
        this.configManager = configManager;
        this.config = config;
        this.balloon = balloon;

        this.logConfigKeyName = logConfigKeyName;
        this.tooltip = tooltip;
    }

    @Override
    public String getName() {
        return super.getName() + "_" + this.logConfigKeyName;
    }

    @Override
    public String getTooltip() {
        return this.tooltip;
    }

    @Override
    public String getText() {
        return String.valueOf(this.getCount());
    }

    @Override
    public Color getTextColor() {
        return this.getCount() > 0 ? Color.lightGray : Color.red;
    }

    @Override
    public boolean render() {
        return
            config.show() == TicTac7xBalloonConfig.Show.ALL_THE_TIME ||
            config.show() == TicTac7xBalloonConfig.Show.NEAR_THE_BALLOON && balloon.isVisible() ||
            config.show() == TicTac7xBalloonConfig.Show.RECENTLY_USED && this.renderRecently;
    }

    private int getCount() {
        return Integer.parseInt(configManager.getConfiguration(TicTac7xBalloonConfig.group, this.logConfigKeyName));
    }

    // Logs count changed and infoboxes are shown based on recently used.
    public void onConfigChanged(final ConfigChanged event) {
        if (
            event.getGroup().equals(TicTac7xBalloonConfig.group) &&
            event.getKey().equals(this.logConfigKeyName) &&
            config.show() == TicTac7xBalloonConfig.Show.RECENTLY_USED
        ) {
            // Start showing infobox.
            this.renderRecently = true;

            new Thread(() -> {
                try {
                    // Hide the infobox after specified time.
                    Thread.sleep(60L * config.showRecentlyUsedForMinutes() * 1000);
                    this.renderRecently = false;
                } catch (final Exception ignored) {}
            }).start();
        }
    }
}

package tictac7x.balloon;

import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.Range;
import net.runelite.client.config.Units;

@ConfigGroup(TicTac7xBalloonConfig.group)
public interface TicTac7xBalloonConfig extends Config {
	String group = "tictac7x-balloon";
	enum Show { RECENTLY_USED, NEAR_THE_BALLOON, ALL_THE_TIME }

	@ConfigSection(
		name = "Infoboxes",
		description = "Infoboxes",
		position = 1
	) String infoboxes = "infoboxes";

		@ConfigItem(
			keyName = "show",
			name = "Show",
			description = "When to show infoboxes about balloon logs",
			position = 1,
			section = infoboxes
		) default Show show() { return Show.RECENTLY_USED; }

		@Units("min")
		@Range(min = 1, max = 60)
		@ConfigItem(
			keyName = "recently_used",
			name = "Recently used duration",
			description = "Duration for how long infoboxes are visible if showing only recently used logs",
			position = 2,
			section = infoboxes
		) default int showRecentlyUsedForMinutes() { return 3; }

	@ConfigSection(
		name = "Debug",
		description = "Debug",
		position = 2,
		closedByDefault = true
	) String debug = "debug";

		String logs_regular = "logs_regular";
		@ConfigItem(
			keyName = logs_regular,
			name = "Regular logs",
			description = "Amount of regular logs",
			position = 1,
			section = debug
		) default int getLogsRegular() { return 0; }

		String logs_oak = "logs_oak";
		@ConfigItem(
			keyName = logs_oak,
			name = "Oak logs",
			description = "Amount of oak logs",
			position = 2,
			section = debug
		) default int getLogsOak() { return 0; }

		String logs_willow = "logs_willow";
		@ConfigItem(
			keyName = logs_willow,
			name = "Willow logs",
			description = "Amount of willow logs",
			position = 3,
			section = debug
		) default int getLogsWillow() { return 0; }

		String logs_yew = "logs_yew";
		@ConfigItem(
			keyName = logs_yew,
			name = "Yew logs",
			description = "Amount of yew logs",
			position = 4,
			section = debug
		) default int getLogsYew() { return 0; }

		String logs_magic = "logs_magic";
		@ConfigItem(
			keyName = logs_magic,
			name = "Magic logs",
			description = "Amount of magic logs",
			position = 5,
			section = debug
		) default int getLogsMagic() { return 0; }
}

package tictac7x.balloon;

import com.google.common.collect.ImmutableSet;
import net.runelite.api.GameState;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameStateChanged;

import java.util.Set;

public class Balloon {
    private final Set<Integer> GAME_OBJECT_IDS = ImmutableSet.of(19133, 19135, 19137, 19139, 19141, 19143);
    private boolean visible = false;

    public void onGameObjectSpawned(final GameObjectSpawned event) {
        if (GAME_OBJECT_IDS.contains(event.getGameObject().getId())) {
            visible = true;
        }
    }

    public void onGameStateChanged(final GameStateChanged event) {
        if (event.getGameState() == GameState.LOADING) {
            visible = false;
        }
    }

    public boolean isVisible() {
        return visible;
    }
}

package tictac7x.balloon;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;

import javax.inject.Inject;

@Slf4j
@PluginDescriptor(
	name = "Balloon Transport System",
	description = "Show amount of logs stored in the balloon transport system storages.",
	tags = { "balloon", "transport", "logs", "storage" }
)
public class TicTac7xBalloonPlugin extends Plugin {
	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ConfigManager configManager;

	@Inject
	private InfoBoxManager infoBoxManager;

	@Inject
	private ClientThread clientThread;

	@Inject
	private ItemManager itemManager;

	@Inject
	private TicTac7xBalloonConfig config;

	private Balloon balloon;
	private BalloonStorage balloonStorage;
	private BalloonInfoBox[] balloonInfoBoxes;

	@Provides
	TicTac7xBalloonConfig provideConfig(final ConfigManager configManager) {
		return configManager.getConfig(TicTac7xBalloonConfig.class);
	}

	@Override
	protected void startUp() {
		balloon = new Balloon();
		balloonStorage = new BalloonStorage(configManager);
		balloonInfoBoxes = new BalloonInfoBox[]{
			new BalloonInfoBox(ItemID.LOGS, TicTac7xBalloonConfig.logs_regular, "Regular logs - Entrana / Taverley", configManager, config, itemManager, balloon, this),
			new BalloonInfoBox(ItemID.OAK_LOGS, TicTac7xBalloonConfig.logs_oak, "Oak logs - Crafting Guild", configManager, config, itemManager, balloon, this),
			new BalloonInfoBox(ItemID.WILLOW_LOGS, TicTac7xBalloonConfig.logs_willow, "Willow logs - Varrock", configManager, config, itemManager, balloon, this),
			new BalloonInfoBox(ItemID.YEW_LOGS, TicTac7xBalloonConfig.logs_yew, "Yew logs - Castle Wars", configManager, config, itemManager, balloon, this),
			new BalloonInfoBox(ItemID.MAGIC_LOGS, TicTac7xBalloonConfig.logs_magic, "Magic logs - Grand Tree", configManager, config, itemManager, balloon, this),
		};

		for (final BalloonInfoBox infobox : balloonInfoBoxes) {
			infoBoxManager.addInfoBox(infobox);
		}
	}

	@Override
	protected void shutDown() {
		for (final BalloonInfoBox infobox : balloonInfoBoxes) {
			infoBoxManager.removeInfoBox(infobox);
		}
	}

	@Subscribe
	public void onChatMessage(final ChatMessage event) {
		balloonStorage.onChatMessage(event);
	}

	@Subscribe
	public void onGameObjectSpawned(final GameObjectSpawned event) {
		balloon.onGameObjectSpawned(event);
	}

	@Subscribe
	public void onGameStateChanged(final GameStateChanged event) {
		balloon.onGameStateChanged(event);
	}

	@Subscribe
	public void onConfigChanged(final ConfigChanged event) {
		for (final BalloonInfoBox infobox : balloonInfoBoxes) {
			infobox.onConfigChanged(event);
		}
	}
}

package tictac7x.balloon;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class BalloonPluginTest {
	public static void main(String[] args) throws Exception {
		ExternalPluginManager.loadBuiltin(TicTac7xBalloonPlugin.class);
		RuneLite.main(args);
	}
}
