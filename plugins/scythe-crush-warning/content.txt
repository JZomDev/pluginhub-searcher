package com.scythecrushwarning;

import java.util.ArrayList;
import lombok.Getter;

@Getter
public enum NightmareRegion
{
	NIGHTMARE(15515),
	SLEPE_GRAVEYARD(14899),
	SLEPE_DOCK(14643),
	SANCTUARY_1(14999),
	SANCTUARY_2(15255),
	SANCTUARY_3(15257),
	SANCTUARY_NIGHTMARE(15256);

	private final int region;

	private static final ArrayList<Integer> ALL_REGIONS = new ArrayList<>();

	static
	{
		for (NightmareRegion e : values())
		{
			ALL_REGIONS.add(e.region);
		}
	}

	NightmareRegion(int region)
	{
		this.region = region;
	}

	public static ArrayList<Integer> getAllRegions()
	{
		return ALL_REGIONS;
	}
}

package com.scythecrushwarning;

import java.util.ArrayList;
import lombok.Getter;

@Getter
public enum CerberusRegion
{
	CERBERUS(5139),
	CERBERUS_NORTH(5140),
	CERBERUS_EAST(5395),
	CERBERUS_WEST(4883);

	private final int region;

	private static final ArrayList<Integer> ALL_REGIONS = new ArrayList<>();

	static
	{
		for (CerberusRegion e : values())
		{
			ALL_REGIONS.add(e.region);
		}
	}

	CerberusRegion(int region)
	{
		this.region = region;
	}

	public static ArrayList<Integer> getAllRegions()
	{
		return ALL_REGIONS;
	}
}

package com.scythecrushwarning;

import java.awt.Color;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(ScytheCrushWarningPlugin.CONFIG_GROUP)
public interface ScytheCrushWarningConfig extends Config
{
	@ConfigItem(keyName = "ignoreAraxxor", name = "Ignore at Araxxor", description = "Do not show warning at Araxxor")
	default boolean ignoreAraxxor()
	{
		return true;
	}

	@ConfigItem(keyName = "ignoreNightmare", name = "Ignore at Nightmare", description = "Do not show warning at Nightmare")
	default boolean ignoreNightmare()
	{
		return true;
	}

	@ConfigItem(keyName = "ignoreHueycoatl", name = "Ignore at Hueycoatl", description = "Do not show warning at Hueycoatl")
	default boolean ignoreHueycoatl()
	{
		return true;
	}

	@ConfigItem(keyName = "ignoreCerberus", name = "Ignore at Cerberus", description = "Do not show warning at Cerberus")
	default boolean ignoreCerberus()
	{
		return true;
	}

	@ConfigItem(keyName = "ignoreRoyalTitans", name = "Ignore at Royal Titans", description = "Do not show warning at Royal Titans")
	default boolean ignoreRoyalTitans()
	{
		return true;
	}

	@ConfigItem(keyName = "ignoreAmoxliatl", name = "Ignore at Amoxliatl", description = "Do not show warning at Amoxliatl")
	default boolean ignoreAmoxliatl()
	{
		return true;
	}

	@Alpha
	@ConfigItem(keyName = "overlayColor", name = "Overlay Color", description = "Overlay Background Color")
	default Color overlayColor()
	{
		return new Color(255, 0, 0, 150);
	}
}

package com.scythecrushwarning;

import com.google.inject.Provides;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.ItemID;
import net.runelite.api.Player;
import net.runelite.api.PlayerComposition;
import net.runelite.api.VarPlayer;
import net.runelite.api.Varbits;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.events.VarbitChanged;
import net.runelite.api.kit.KitType;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemVariationMapping;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Scythe Crush Warning",
	description = "Show a warning if your Scythe is on crush", tags = {"scythe", "crush", "araxxor", "nightmare", "hueycoatl", "cerberus", "royal titans", "amoxliatl"}
)
public class ScytheCrushWarningPlugin extends Plugin
{
	public static final String CONFIG_GROUP = "scythecrushwarning";
	private final int CRUSH_ATTACK_STYLE = 2;
	private Collection<Integer> SCYTHE_VARIATION_IDS;

	private final List<Integer> SCYTHE_ITEM_IDS = List.of(
		ItemID.SCYTHE_OF_VITUR,
		ItemID.HOLY_SCYTHE_OF_VITUR,
		ItemID.SANGUINE_SCYTHE_OF_VITUR
	);

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private ScytheCrushWarningConfig config;

	@Inject
	private ScytheCrushWarningOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private AllowedRegions allowedRegions;

	@Getter
	private boolean scytheOnCrush = false;

	@Getter
	private boolean inAllowedRegion = false;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);

		SCYTHE_VARIATION_IDS = getAllScytheVariations();

		clientThread.invoke(() -> {
			allowedRegions.buildAllowedRegions();
			reset();

//			log.debug("Scythe variations: {}", SCYTHE_VARIATION_IDS);

			if (client.getGameState() == GameState.LOGGED_IN)
			{
				checkWeapon();
			}
		});
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() == GameState.LOGGED_IN)
		{
			reset();
			checkWeapon();
		}
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		if (event.getVarpId() == VarPlayer.ATTACK_STYLE || event.getVarbitId() == Varbits.EQUIPPED_WEAPON_TYPE)
		{
			checkWeapon();
		}
	}

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event)
	{
		checkWeapon();
	}

	@Subscribe(priority = -1)
	public void onGameTick(GameTick event)
	{
		inAllowedRegion = allowedRegions.updateRegion();
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (event.getGroup().equals(CONFIG_GROUP))
		{
			allowedRegions.buildAllowedRegions();
		}
	}

	private void checkWeapon()
	{
		final Integer currentWeaponId = getCurrentWeaponId();

		if (currentWeaponId == null || !SCYTHE_VARIATION_IDS.contains(currentWeaponId))
		{
			reset();
			return;
		}

		final int currentAttackStyle = client.getVarpValue(VarPlayer.ATTACK_STYLE);
		scytheOnCrush = currentAttackStyle == CRUSH_ATTACK_STYLE;
	}

	private void reset()
	{
		scytheOnCrush = false;
		inAllowedRegion = false;
	}

	private Integer getCurrentWeaponId()
	{
		if (client.getGameState() != GameState.LOGGED_IN)
		{
			return null;
		}

		Player player = client.getLocalPlayer();
		if (player == null)
		{
			return null;
		}

		PlayerComposition playerComposition = player.getPlayerComposition();
		if (playerComposition == null)
		{
			return null;
		}

		return playerComposition.getEquipmentId(KitType.WEAPON);
	}

	private Collection<Integer> getAllScytheVariations()
	{
		return SCYTHE_ITEM_IDS.stream()
			.map(ItemVariationMapping::getVariations)
			.flatMap(Collection::stream)
			.collect(Collectors.toList());
	}

	@Provides
	ScytheCrushWarningConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ScytheCrushWarningConfig.class);
	}
}

package com.scythecrushwarning;

import java.util.ArrayList;
import lombok.Getter;

@Getter
public enum HueycoatlRegion
{
	HUEYCOATL(5939),
	HUEYCOATL_EAST(6195);

	private final int region;

	private static final ArrayList<Integer> ALL_REGIONS = new ArrayList<>();

	static
	{
		for (HueycoatlRegion e : values())
		{
			ALL_REGIONS.add(e.region);
		}
	}

	HueycoatlRegion(int region)
	{
		this.region = region;
	}

	public static ArrayList<Integer> getAllRegions()
	{
		return ALL_REGIONS;
	}
}

package com.scythecrushwarning;

import java.util.ArrayList;
import javax.inject.Inject;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.Client;
import net.runelite.api.Player;
import net.runelite.api.coords.WorldPoint;

class AllowedRegions
{
	@Inject
	private Client client;

	@Inject
	private ScytheCrushWarningConfig config;

	private ArrayList<Integer> allowedRegions = new ArrayList<>();

	@Getter
	@Setter
	private int lastRegionId = -1;

	public boolean isWithinBossRegion()
	{
		return isWithinBossRegion(getRegionId());
	}

	public boolean isWithinBossRegion(int regionId)
	{
		return allowedRegions.contains(regionId);
	}

	public void buildAllowedRegions()
	{
		allowedRegions.clear();

		if (config.ignoreAraxxor())
		{
			allowedRegions.addAll(AraxxorRegion.getAllRegions());
		}

		if (config.ignoreNightmare())
		{
			allowedRegions.addAll(NightmareRegion.getAllRegions());
		}

		if (config.ignoreHueycoatl())
		{
			allowedRegions.addAll(HueycoatlRegion.getAllRegions());
		}

		if (config.ignoreCerberus())
		{
			allowedRegions.addAll(CerberusRegion.getAllRegions());
		}

		if (config.ignoreRoyalTitans())
		{
			allowedRegions.addAll(RoyalTitansRegion.getAllRegions());
		}

		if (config.ignoreAmoxliatl())
		{
			allowedRegions.addAll(AmoxliatlRegion.getAllRegions());
		}
	}

	public boolean regionChanged()
	{
		return lastRegionId != getRegionId();
	}

	/**
	 * Update the last region and check if the player is within a boss region
	 *
	 * @return boolean
	 */
	public boolean updateRegion()
	{
		lastRegionId = getRegionId();
		return isWithinBossRegion(lastRegionId);
	}

	public int getRegionId()
	{
		Player player = client.getLocalPlayer();
		if (player == null)
		{
			return -1;
		}

		return WorldPoint.fromLocalInstance(client, player.getLocalLocation()).getRegionID();
	}
}

package com.scythecrushwarning;

import java.util.ArrayList;
import lombok.Getter;

@Getter
public enum AmoxliatlRegion
{
	AMOXLIATL(5446),
	TWILIGHT_TEMPLE(6450),
	TWILIGHT_TEMPLE_TELEPORT(6706),
	INSIDE_TEMPLE(6550);

	private final int region;

	private static final ArrayList<Integer> ALL_REGIONS = new ArrayList<>();

	static
	{
		for (AmoxliatlRegion e : values())
		{
			ALL_REGIONS.add(e.region);
		}
	}

	AmoxliatlRegion(int region)
	{
		this.region = region;
	}

	public static ArrayList<Integer> getAllRegions()
	{
		return ALL_REGIONS;
	}
}

package com.scythecrushwarning;

import java.util.ArrayList;
import lombok.Getter;

@Getter
public enum RoyalTitansRegion
{
	ROYAL_TITANS(11669),
	ROYAL_TITANS_OUTSIDE_CAVE(11925);

	private final int region;

	private static final ArrayList<Integer> ALL_REGIONS = new ArrayList<>();

	static
	{
		for (RoyalTitansRegion e : values())
		{
			ALL_REGIONS.add(e.region);
		}
	}

	RoyalTitansRegion(int region)
	{
		this.region = region;
	}

	public static ArrayList<Integer> getAllRegions()
	{
		return ALL_REGIONS;
	}
}

/*
 * Copyright (c) 2017, honeyhoney <https://github.com/honeyhoney>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.scythecrushwarning;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.TitleComponent;

class ScytheCrushWarningOverlay extends OverlayPanel
{
	private final ScytheCrushWarningPlugin plugin;
	private final ScytheCrushWarningConfig config;

	@Inject
	private ScytheCrushWarningOverlay(ScytheCrushWarningPlugin plugin, ScytheCrushWarningConfig config)
	{
		super(plugin);

		setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);

		this.plugin = plugin;
		this.config = config;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (!plugin.isScytheOnCrush() || plugin.isInAllowedRegion())
		{
			return null;
		}

		final String text = "Your Scythe is on Crush!";
		final int length = graphics.getFontMetrics().stringWidth(text);

		panelComponent.getChildren().clear();

		panelComponent.getChildren().add(TitleComponent.builder()
			.text(text)
			.color(Color.WHITE)
			.build());

		panelComponent.setPreferredSize(new Dimension(length + 10, 0));
		panelComponent.setBackgroundColor(config.overlayColor());

		return super.render(graphics);
	}
}

package com.scythecrushwarning;

import java.util.ArrayList;
import lombok.Getter;

@Getter
public enum AraxxorRegion
{
	ARAXXOR(14489),
	ARAXXOR_OUTSIDE_CAVE(14645),
	ARAXXOR_INSIDE_CAVE(14745),
	ARAXXOR_DARKMEYER_EAST(14644),
	ARAXXOR_SEPULCHRE(9565);

	private final int region;

	private static final ArrayList<Integer> ALL_REGIONS = new ArrayList<>();

	static
	{
		for (AraxxorRegion e : values())
		{
			ALL_REGIONS.add(e.region);
		}
	}

	AraxxorRegion(int region)
	{
		this.region = region;
	}

	public static ArrayList<Integer> getAllRegions()
	{
		return ALL_REGIONS;
	}
}

package com.scythecrushwarning;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ScytheCrushWarningPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ScytheCrushWarningPlugin.class);
		RuneLite.main(args);
	}
}
