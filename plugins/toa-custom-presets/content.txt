package com.ToACustomPresets;

import com.google.inject.Provides;
import java.awt.Color;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.events.*;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.widgets.*;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

@Slf4j
@PluginDescriptor(
	name = "ToA Custom Presets",
	description = "Allows you to customise the preset names in the ToA preset interface",
	tags = {"toa", "preset", "raids3", "pvm", "custom"}
)
public class ToACustomPresetsPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private ToACustomPresetsConfig config;

	@Provides
	ToACustomPresetsConfig provideConfig(ConfigManager configmanager)
	{
		return configmanager.getConfig(ToACustomPresetsConfig.class);
	}


	@Override
	public void startUp()
	{
	}

	@Subscribe
	public void onGameTick(GameTick e)
	{
		Widget widget = client.getWidget(InterfaceID.ToaPartydetails.INVOCATIONS_TAB);
		if (widget != null)
		{
			clientThread.invokeLater(this::updateTOAPresets);
		}
	}

	private void updateTOAPresets()
	{
		final Widget toaover = client.getWidget(774, 99);
		final Widget toalistener = client.getWidget(774, 98);
		final Widget[] toapresets = toaover.getChildren();
		final Widget[] toalistenerAll = toalistener.getChildren();

		String[] presetText = {
			config.preset1(),
			config.preset2(),
			config.preset3(),
			config.preset4(),
			config.preset5()
		};

		Color[] presetColor = {
			config.color1(),
			config.color2(),
			config.color3(),
			config.color4(),
			config.color5()
		};

		for (int i = 0; i < presetText.length; i++)
		{
			if (toapresets[i] != null && !presetText[i].isEmpty())
			{
				toapresets[i].setText(presetText[i]);
				toapresets[i].setTextColor(presetColor[i].getRGB());
			}
		}

		Object result = toalistenerAll[0].getOnOpListener();

	}

}



package com.ToACustomPresets;

import java.awt.Color;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("ToACustomPresets")
public interface ToACustomPresetsConfig extends Config
{

	@ConfigSection(
		name = "Preset 1",
		description = "Settings for preset slot 1",
		position = 1
	)
	String PRESET_1 = "preset1";
	@ConfigSection(
		name = "Preset 2",
		description = "Settings for preset slot 1",
		position = 1
	)
	String PRESET_2 = "preset2";
	@ConfigSection(
		name = "Preset 3",
		description = "Settings for preset slot 1",
		position = 1
	)
	String PRESET_3 = "preset3";
	@ConfigSection(
		name = "Preset 4",
		description = "Settings for preset slot 1",
		position = 1
	)
	String PRESET_4 = "preset4";
	@ConfigSection(
		name = "Preset 5",
		description = "Settings for preset slot 1",
		position = 1
	)
	String PRESET_5 = "preset5";

	@ConfigItem(
		position = 1,
		keyName = "preset1",
		name = "Name",
		description = "Text that should be displayed in the preset slot",
		section = PRESET_1
	)
	default String preset1()
	{
		return "Preset 1";
	}

	@ConfigItem(
		position = 2,
		keyName = "preset2",
		name = "Name",
		description = "Text that should be displayed in the preset slot",
		section = PRESET_2
	)
	default String preset2()
	{
		return "Preset 2";
	}

	@ConfigItem(
		position = 3,
		keyName = "preset3",
		name = "Name",
		description = "Text that should be displayed in the preset slot",
		section = PRESET_3
	)
	default String preset3()
	{
		return "Preset 3";
	}

	@ConfigItem(
		position = 4,
		keyName = "preset4",
		name = "Name",
		description = "Text that should be displayed in the preset slot",
		section = PRESET_4
	)
	default String preset4()
	{
		return "Preset 4";
	}

	@ConfigItem(
		position = 5,
		keyName = "preset5",
		name = "Name",
		description = "Text that should be displayed in the preset slot",
		section = PRESET_5
	)
	default String preset5()
	{
		return "Preset 5";
	}

	@ConfigItem(
		position = 6,
		keyName = "color1",
		name = "Name Colour",
		description = "The text colour of the preset name",
		section = PRESET_1
	)
	default Color color1()
	{
		return Color.orange;
	}

	@ConfigItem(
		position = 7,
		keyName = "color2",
		name = "Name Colour",
		description = "The text colour of the preset name",
		section = PRESET_2
	)
	default Color color2()
	{
		return Color.orange;
	}

	@ConfigItem(
		position = 8,
		keyName = "color3",
		name = "Name Colour",
		description = "The text colour of the preset name",
		section = PRESET_3
	)
	default Color color3()
	{
		return Color.orange;
	}

	@ConfigItem(
		position = 9,
		keyName = "color4",
		name = "Name Colour",
		description = "The text colour of the preset name",
		section = PRESET_4
	)
	default Color color4()
	{
		return Color.orange;
	}

	@ConfigItem(
		position = 10,
		keyName = "color5",
		name = "Name Colour",
		description = "The text colour of the preset name",
		section = PRESET_5
	)
	default Color color5()
	{
		return Color.orange;
	}
}

package com.ToACustomPresets;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ToACustomPresets
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ToACustomPresetsPlugin.class);
		RuneLite.main(args);
	}
}
