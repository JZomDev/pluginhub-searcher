package MasterFarmer;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class MasterFarmerTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(MasterFarmerPlugin.class);
		RuneLite.main(args);
	}
}
package MasterFarmer;

import java.awt.Dimension;
import java.awt.Graphics2D;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

public class MasterFarmerOverlay extends Overlay
{

	private final Client client;
	private final MasterFarmerPlugin plugin;
	private final MasterFarmerConfig config;

	NumberFormat format = new DecimalFormat("#");

	int MASTER_FARMER_RESPAWN_TIME = 300;

	@Inject
	MasterFarmerOverlay(Client client, MasterFarmerPlugin plugin, MasterFarmerConfig config)
	{
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_SCENE);
		this.plugin = plugin;
		this.config = config;
		this.client = client;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (config.showOverlay())
		{
			plugin.getMasterFarmers().forEach((id, npc) -> renderTimer(npc, graphics));
		}
		return null;
	}

	private void renderTimer(final MasterFarmerNPC npc, final Graphics2D graphics)
	{
		double timeLeft = MASTER_FARMER_RESPAWN_TIME - npc.getTimeWithoutMoving();

		if (timeLeft < 0)
		{
			timeLeft = 0;
		}

		final String timeLeftString = String.valueOf(format.format(timeLeft));

		final Point canvasPoint = npc.getNpc().getCanvasTextLocation(graphics, timeLeftString, npc.getNpc().getLogicalHeight() + config.timerHeight());

		if (canvasPoint != null && (config.maxDisplay() >= timeLeft))
		{
			OverlayUtil.renderTextLocation(graphics, canvasPoint, timeLeftString, config.timerColor());
		}
	}

}

package MasterFarmer;

import java.awt.Color;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;

@ConfigGroup("masterfarmerplugin")
public interface MasterFarmerConfig extends Config
{
	@ConfigItem(
		keyName = "showOverlay",
		name = "Show timer over the master farmer",
		description = "Configures whether or not to have a timer over the master farmer"
	)
	default boolean showOverlay()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
		keyName = "timerColor",
		name = "Color of timer",
		description = "Configures the color of the timer"
	)
	default Color timerColor()
	{
		return Color.WHITE;
	}

	@Range(
		max = 300
	)
	@ConfigItem(
		keyName = "maxDisplay",
		name = "Time at which timer appears",
		description = "The maximum time at which the timer is displayed",
		position = 1
	)
	default int maxDisplay()
	{
		return 300;
	}

	@Range(
		max = 300
	)
	@ConfigItem(
		keyName = "timerHeight",
		name = "Height of timer",
		description = "Change the height of the timer above the master farmer",
		position = 1
	)
	default int timerHeight()
	{
		return 25;
	}
}

package MasterFarmer;

import java.time.Instant;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.NPC;
import net.runelite.api.coords.WorldPoint;

public class MasterFarmerNPC
{
	@Getter
	private int npcIndex;

	@Getter
	private String npcName;

	@Getter
	@Setter
	private NPC npc;

	@Getter
	@Setter
	private Instant stoppedMovingTick;

	@Getter
	@Setter
	private long timeWithoutMoving;

	@Getter
	@Setter
	private WorldPoint currentLocation;

	MasterFarmerNPC(NPC npc)
	{
		this.npc = npc;
		this.npcName = npc.getName();
		this.npcIndex = npc.getIndex();
		this.stoppedMovingTick = Instant.now();
		this.timeWithoutMoving = 0;
		this.currentLocation = npc.getWorldLocation();
	}
}

package MasterFarmer;

import com.google.inject.Provides;
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;
import javax.inject.Inject;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.NPC;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.NpcDespawned;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "MasterFarmer"
)
public class MasterFarmerPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private MasterFarmerOverlay masterfarmeroverlay;

	@Getter(AccessLevel.PACKAGE)
	private Instant lastTickUpdate;

	@Getter(AccessLevel.PACKAGE)
	private final Map<Integer, MasterFarmerNPC> masterFarmers = new HashMap<>();

	@Provides
	MasterFarmerConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(MasterFarmerConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(masterfarmeroverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(masterfarmeroverlay);
		masterFarmers.clear();
	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned npcSpawned)
	{
		final NPC npc = npcSpawned.getNpc();
		final String npcName = npc.getName();

		if (npcName == null)
		{
			return;
		}

		if (npc.getName().equals("Master Farmer"))
		{
			masterFarmers.putIfAbsent(npc.getIndex(), new MasterFarmerNPC(npc));
		}
	}

	@Subscribe
	public void onNpcDespawned(NpcDespawned npcDespawned)
	{
		final NPC npc = npcDespawned.getNpc();
		final String npcName = npc.getName();

		if (npcName == null)
		{
			return;
		}

		if (npc.getName().equals("Master Farmer"))
		{
			masterFarmers.remove(npc.getIndex());
		}
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		if (event.getGameState() == GameState.LOGIN_SCREEN ||
			event.getGameState() == GameState.HOPPING)
		{
			masterFarmers.clear();
		}
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		lastTickUpdate = Instant.now();

		for (NPC npc : client.getNpcs())
		{
			final String npcName = npc.getName();

			if (npcName == null)
			{
				continue;
			}

			if (npcName.equals("Master Farmer"))
			{
				final MasterFarmerNPC mf = masterFarmers.get(npc.getIndex());

				if (mf == null)
				{
					continue;
				}

				if (mf.getCurrentLocation().getX() != npc.getWorldLocation().getX() || mf.getCurrentLocation().getY() != npc.getWorldLocation().getY())
				{
					mf.setCurrentLocation(npc.getWorldLocation());
					mf.setTimeWithoutMoving(0);
					mf.setStoppedMovingTick(Instant.now());
					mf.setNpc(npc);
				}
				else
				{
					mf.setTimeWithoutMoving(lastTickUpdate.getEpochSecond() - mf.getStoppedMovingTick().getEpochSecond());
				}
				continue;
			}
		}
	}
}

