package com.AccountValueOverlay;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("AccountValue")
public interface AccountValueConfig extends Config {
    @ConfigItem(
            keyName = "showPriceSuffix",
            name = "Show Suffix",
            description = "Adds a K/M/B suffix to Bank Value"
    )
    default boolean showPriceSuffix() {
        return true;
    }

    /*@ConfigItem(
            keyName = "ShowProjectedGe",
            name = "Use Ge Sale Price",
            description = "Shows the expected value from the Grand Exchange if all your items instead of the items estimated value."
    )
    default boolean ShowProjectedGe() {
        return false;
    }*/
}

package com.AccountValueOverlay;

import com.google.inject.Provides;

import javax.inject.Inject;
import java.util.stream.*;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.api.widgets.ComponentID;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.chat.ChatCommandManager;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.Widget;
import java.util.Arrays;

@Slf4j
@PluginDescriptor(
        name = "Account Value Overlay",
        description = "Adds an overlay showing your overall account value"
)
public class AccountValuePlugin extends Plugin {
    private long[] GeSlots = new long[8];

    private boolean IsBankSynced;
    @Inject
    private ConfigManager configManager;
    @Inject
    private Client client;
    @Inject
    ClientThread clientThread;
    @Inject
    private ItemManager itemManager;
    @Inject
    private AccountValueConfig config;
    @Inject
    private ChatCommandManager commandManager;
    @Inject
    private AccountValueOverlay overlay;
    @Inject
    private OverlayManager overlayManager;

    @Override
    protected void startUp() throws Exception {
        overlayManager.add(overlay);
    }

    @Override
    protected void shutDown() throws Exception {
        overlayManager.remove(overlay);
    }

    @Subscribe
    public void onItemContainerChanged(ItemContainerChanged event) {
        if (event.getContainerId() == InventoryID.BANK.getId()) {
            if (!overlay.IsBankSynced()) {
                overlay.UpdateBankSynced(true);
            }
            final Item[] items = client.getItemContainer(InventoryID.BANK).getItems();
            updateTotalBankValue(items);
        }
        if (event.getContainerId() == InventoryID.INVENTORY.getId()) {
            final Item[] items = client.getItemContainer(InventoryID.INVENTORY).getItems();
            updateTotalInventoryValue(items);
        }
		/*if (event.getContainerId() == ComponentID.BANK_POTIONSTORE_CONTENT) {
			final Item[] items = client.getItemContainer(ComponentID.BANK_POTIONSTORE_CONTENT).getItems();
			updateTotalPotionValue(items);
		}*/
        if (event.getContainerId() == InventoryID.EQUIPMENT.getId()) {
            final Item[] items = client.getItemContainer(InventoryID.EQUIPMENT).getItems();
            updateTotalWornValue(items);
        }
    }

    @Subscribe
    public void onGameTick(GameTick event) {
        overlay.UpdateGeButton(isCollectButtonVisible());
    }

    public long GetTotalGeValue() {
        return LongStream.of(GeSlots).sum();
    }

    public boolean isCollectButtonVisible() {
        Widget w = client.getWidget(InterfaceID.GRAND_EXCHANGE, 6);
        if (w == null) {
            return false;
        }
        Widget[] children = w.getChildren();
        if(children == null) {
            return false;
        }
        return Arrays.stream(children).anyMatch(c -> !c.isHidden() && "Collect".equals(c.getText()));
    }

    @Subscribe
    public void onGrandExchangeOfferChanged(GrandExchangeOfferChanged event) {
        final Item[] items;

        GeSlots[event.getSlot()] = ((long)event.getOffer().getTotalQuantity() * event.getOffer().getPrice()) - event.getOffer().getSpent();

        overlay.UpdateGeButton(isCollectButtonVisible());

        updateTotalGEValue(GetTotalGeValue());
    }

    private long GetValueOfAllItems(Item[] items) {
        long totalValue = 0;
        for (int i = 0; i < items.length; i++) {
            totalValue += (long) items[i].getQuantity() * itemManager.getItemPrice(items[i].getId());
        }
        return totalValue;
    }

    private void updateTotalBankValue(Item[] items) {
        overlay.updateBankValue(GetValueOfAllItems(items));
    }

    private void updateTotalInventoryValue(Item[] items) {
        overlay.updateInventoryValue(GetValueOfAllItems(items));
    }

    private void updateTotalPotionValue(Item[] items) {
        overlay.updatePotionValue(GetValueOfAllItems(items));
    }

    private void updateTotalGEValue(long value) {
        overlay.updateGeValue(value);
    }

    private void updateTotalWornValue(Item[] items) {
        overlay.updateWornValue(GetValueOfAllItems(items));
    }

    private int getHaValue(int itemId) {
        switch (itemId) {
            case ItemID.COINS_995:
                return 1;
            case ItemID.PLATINUM_TOKEN:
                return 1000;
            default:
                return itemManager.getItemComposition(itemId).getHaPrice();
        }
    }


    @Provides
    AccountValueConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(AccountValueConfig.class);
    }


}

package com.AccountValueOverlay;

import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;
import net.runelite.client.util.QuantityFormatter;

import javax.inject.Inject;
import java.awt.*;

public class AccountValueOverlay extends Overlay {
    private final AccountValueConfig config;
    private long BankValue;
    private long PotionValue;
    private long ProjectedGeValue;
    private long InvValue;
    private long GeValue;
    private long WornValue;
    private boolean isCollectButtonVis;
    private boolean IsBankSynced;
    private final PanelComponent panelComponent = new PanelComponent();

    @Inject
    public AccountValueOverlay(AccountValueConfig config) {
        this.config = config;
        setPosition(OverlayPosition.TOP_LEFT);
        setPriority(OverlayPriority.HIGH);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        panelComponent.getChildren().clear();
        String bankValueTxt = formatNumber(BankValue);
        String potionValueTxt = formatNumber(PotionValue);
        String invValueTxt = formatNumber(InvValue);
        String geValueTxt = formatNumber(GeValue);
        String projectedGeValueTxt = formatNumber(ProjectedGeValue);
        String wornValueTxt = formatNumber(WornValue);
        String totalValueTxt = formatNumber(BankValue + InvValue + GeValue + WornValue);
        panelComponent.setPreferredSize(new Dimension(
                BankValue + InvValue + GeValue + WornValue == 0 ? 150 : graphics.getFontMetrics().stringWidth(QuantityFormatter.formatNumber(BankValue + InvValue + GeValue + WornValue)) + 100,
                0));
        panelComponent.getChildren().add(TitleComponent.builder()
                .text("Account Value")
                .color(Color.GREEN)
                .build());
        panelComponent.getChildren().add(LineComponent.builder()
                .left("Total:")
                .right(totalValueTxt)
                .build());
        panelComponent.getChildren().add(TitleComponent.builder()
                .text("Stored")
                .color(Color.GREEN)
                .build());
        if (IsBankSynced) {
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Bank:")
                    .right(bankValueTxt)
                    .build());
        } else {
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Bank:")
                    .right("Open Bank")
                    .leftColor(Color.RED)
                    .rightColor(Color.RED)
                    .build());
        }
        if (isCollectButtonVis) {
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("GE (COLLECT):")
                    .leftColor(Color.RED)
                    .right(geValueTxt)
                    .build());
        } else {
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("GE:")
                    .leftColor(Color.WHITE)
                    .right(geValueTxt)
                    .build());
        }
        panelComponent.getChildren().add(TitleComponent.builder()
                .text("Character")
                .color(Color.GREEN)
                .build());
        panelComponent.getChildren().add(LineComponent.builder()
                .left("Inventory:")
                .right(invValueTxt)
                .build());
        panelComponent.getChildren().add(LineComponent.builder()
                .left("Worn:")
                .right(wornValueTxt)
                .build());

        return panelComponent.render(graphics);
    }

    public void UpdateGeButton(boolean Value) {
        this.isCollectButtonVis = Value;
    }

    public void UpdateBankSynced(boolean Value) {
        this.IsBankSynced = Value;
    }

    public boolean IsBankSynced() {
        return this.IsBankSynced;
    }

    public void updateBankValue(long Value) {
        this.BankValue = Value;
    }

    public void updateInventoryValue(long Value) {
        this.InvValue = Value;
    }

    public void updatePotionValue(long Value) {
        this.PotionValue = Value;
    }

    public void updateGeValue(long Value) {
        this.GeValue = Value;
    }

    public void updateWornValue(long Value) {
        this.WornValue = Value;
    }

    private String formatNumber(long num) {

        return config.showPriceSuffix() ? QuantityFormatter.quantityToStackSize(num) : QuantityFormatter.formatNumber(num);

    }
}

package com.AccountValueOverlay;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AccountValueOverlayPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AccountValuePlugin.class);
		RuneLite.main(args);
	}
}
