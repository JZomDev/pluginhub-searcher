package com.thatgamerblue.runelite.plugins.fakeiron;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PluginRunner
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(FakeIronPlugin.class);
		RuneLite.main(args);
	}
}
package com.thatgamerblue.runelite.plugins.fakeiron;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("fakeiron")
public interface FakeIronConfig extends Config
{

	@ConfigItem(
		keyName = "icon",
		name = "Icon Color",
		description = ""
	)
	default FakeIronIcons icon()
	{
		return FakeIronIcons.GREEN;
	}

	@ConfigItem(
		keyName = "icon",
		name = "Icon Color",
		description = ""
	)
	void icon(FakeIronIcons icon);

	@ConfigItem(
		keyName = "players",
		name = "Other Players",
		description = "List of other players to show icon for, newline seperated"
	)
	default String otherPlayers()
	{
		return "";
	}

}

package com.thatgamerblue.runelite.plugins.fakeiron;

import com.google.common.base.Splitter;
import com.google.common.base.Strings;
import com.google.inject.Provides;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Objects;
import java.util.stream.Stream;
import javax.imageio.ImageIO;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.IconID;
import net.runelite.api.IndexedSprite;
import net.runelite.api.ScriptID;
import net.runelite.api.events.BeforeRender;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ScriptCallbackEvent;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.RuneLite;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.Text;

@Slf4j
@PluginDescriptor(name = "Fake Ironman Icon", enabledByDefault = false)
public class FakeIronPlugin extends Plugin
{
	@Inject
	@Getter
	private Client client;
	@Inject
	private ClientThread clientThread;
	private HashMap<FakeIronIcons, Integer> iconIds = new HashMap<>();
	@Getter
	private static List<String> players = new ArrayList<>();
	private FakeIronIcons selectedIcon = null;
	@Inject
	@Getter
	private FakeIronConfig pluginConfig;
	private static final Splitter NEWLINE_SPLITTER = Splitter
		.on("\n")
		.omitEmptyStrings()
		.trimResults();

	private void updateSelectedIcon()
	{
		if (selectedIcon != pluginConfig.icon())
		{
			selectedIcon = pluginConfig.icon();
		}
	}

	@Provides
	FakeIronConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(FakeIronConfig.class);
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (event.getGroup().equals("fakeiron"))
		{
			if (pluginConfig.icon().isHeader())
			{
				pluginConfig.icon(FakeIronIcons.valueOf(event.getOldValue()));
				return;
			}

			clientThread.invoke(() -> client.runScript(ScriptID.CHAT_PROMPT_INIT));
			players = NEWLINE_SPLITTER.splitToList(pluginConfig.otherPlayers().toLowerCase());
			updateSelectedIcon();
		}
	}

	@Override
	public void startUp()
	{
		updateSelectedIcon();

		if (client.getModIcons() == null)
		{
			iconIds.clear();
			return;
		}

		loadSprites();
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		updateSelectedIcon();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		updateSelectedIcon();

		if (event.getGameState() != GameState.LOGGED_IN)
		{
			return;
		}

		if ((Stream.of(FakeIronIcons.values())
				 .noneMatch((icon) -> (!Strings.isNullOrEmpty(icon.getImagePath())) && iconIds.getOrDefault(icon, IconID.NO_ENTRY.getIndex()) == IconID.NO_ENTRY.getIndex())))
		{
			return;
		}

		loadSprites();
	}

	private void loadSprites()
	{
		clientThread.invoke(() ->
		{
			IndexedSprite[] modIcons = client.getModIcons();
			List<IndexedSprite> newList = new ArrayList<>();

			int modIconsStart = modIcons.length - 1;

			iconIds.put(FakeIronIcons.IRONMAN, IconID.IRONMAN.getIndex());
			iconIds.put(FakeIronIcons.ULTIMATE, IconID.ULTIMATE_IRONMAN.getIndex());
			iconIds.put(FakeIronIcons.HCIM, IconID.HARDCORE_IRONMAN.getIndex());
			// todo: update this when rl adds the icons to iconid
			iconIds.put(FakeIronIcons.GROUP, /*IconID.GROUP_IRONMAN.getIndex()*/ 41);
			iconIds.put(FakeIronIcons.HARDCORE_GROUP, /*IconID.HARDCORE_GROUP_IRONMAN.getIndex()*/ 42);

			for (FakeIronIcons icon : FakeIronIcons.values())
			{
				if (Strings.isNullOrEmpty(icon.getImagePath()))
				{
					continue;
				}

				final IndexedSprite sprite =
					icon.isEmbedded() ?
						getIndexedSpriteEmbedded(icon.getImagePath()) :
						getIndexedSpriteFile(icon.getImagePath());

				if (sprite == null)
				{
					continue;
				}

				newList.add(sprite);
				modIconsStart++;
				iconIds.put(icon, modIconsStart);
			}

			// copy the icons around as a hack to avoid
			// java.lang.ClassCastException: class [Lnet.runelite.api.IndexedSprite; cannot be cast to class [Lof; ([Lnet.runelite.api.IndexedSprite; is in unnamed module of loader 'app'; [Lof; is in unnamed module of loader net.runelite.client.rs.ClientLoader$1 @2ecb15df)
			IndexedSprite[] newAry = Arrays.copyOf(modIcons, modIcons.length + newList.size());
			System.arraycopy(newList.toArray(new IndexedSprite[0]), 0, newAry, modIcons.length, newList.size());
			client.setModIcons(newAry);
		});
	}

	@Override
	public void shutDown()
	{
		iconIds.clear();

		clientThread.invoke(() -> client.runScript(ScriptID.CHAT_PROMPT_INIT));
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		if (event.getName() == null || client.getLocalPlayer() == null || client.getLocalPlayer().getName() == null)
		{
			return;
		}

		boolean isLocalPlayer =
			Text.standardize(event.getName()).equalsIgnoreCase(Text.standardize(client.getLocalPlayer().getName()));

		if (isLocalPlayer || players.contains(Text.standardize(event.getName().toLowerCase())))
		{
			event.getMessageNode().setName(
				getImgTag(iconIds.getOrDefault(selectedIcon, IconID.NO_ENTRY.getIndex())) +
					Text.removeTags(event.getName()));
		}
	}

	@Subscribe
	public void onScriptCallbackEvent(ScriptCallbackEvent event)
	{
		if (!event.getEventName().equals("setChatboxInput"))
		{
			return;
		}

		updateChatbox();
	}

	@Subscribe
	public void onBeforeRender(BeforeRender event)
	{
		updateChatbox(); // this stops flickering when typing
	}

	private void updateChatbox()
	{
		Widget chatboxTypedText = client.getWidget(WidgetInfo.CHATBOX_INPUT);

		if (getIconIdx() == -1)
		{
			return;
		}

		if (chatboxTypedText == null || chatboxTypedText.isHidden())
		{
			return;
		}

		String[] chatbox = chatboxTypedText.getText().split(":", 2);
		String rsn = Objects.requireNonNull(client.getLocalPlayer()).getName();

		chatboxTypedText.setText(getImgTag(getIconIdx()) + Text.removeTags(rsn) + ":" + chatbox[1]);
	}

	private IndexedSprite getIndexedSpriteEmbedded(String file)
	{
		try
		{
			log.debug("Loading: {}", file);
			BufferedImage image = ImageUtil.loadImageResource(this.getClass(), file);
			return ImageUtil.getImageIndexedSprite(image, client);
		}
		catch (RuntimeException ex)
		{
			log.debug("Unable to load image: ", ex);
		}

		return null;
	}

	private IndexedSprite getIndexedSpriteFile(String file)
	{
		try
		{
			log.debug("Loading: {}", file);
			BufferedImage image = ImageIO.read(new File(RuneLite.RUNELITE_DIR, file));
			return ImageUtil.getImageIndexedSprite(image, client);
		}
		catch (RuntimeException | IOException ex)
		{
			log.debug("Unable to load image: ", ex);
		}

		return null;
	}

	private String getImgTag(int i)
	{
		return "<img=" + i + ">";
	}

	private int getIconIdx()
	{
		if (selectedIcon == null)
		{
			updateSelectedIcon();
		}

		return iconIds.getOrDefault(selectedIcon, IconID.NO_ENTRY.getIndex());
	}
}

package com.thatgamerblue.runelite.plugins.fakeiron;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@AllArgsConstructor
public enum FakeIronIcons
{

	ORIGINAL_ICONS_PLACEHOLDER("--- Original ---", "", true, true),
	IRONMAN("Ironman", "", false, true),
	HCIM("Hardcore", "", false, true),
	ULTIMATE("Ultimate", "", false, true),
	GROUP("Group", "", false, true),
	HARDCORE_GROUP("HC Group", "", false, true),
	CUSTOM_PLACEHOLDER("--- Custom ---", "", true, true),
	GREEN("Green", "green.png", false, true),
	PURPLE("Purple", "purple.png", false, true),
	PINK("Pink", "pink.png", false, true),
	ORANGE("Orange", "orange.png", false, true),
	CUSTOM("helm.png", "helm.png", false, false);

	private final String name;
	private final String imagePath;
	private final boolean header;
	private final boolean embedded;

	public String toString()
	{
		return name;
	}
}

