package com.ywcode.randomeventhider;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class RandomEventHiderTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(RandomEventHiderPlugin.class);
		RuneLite.main(args);
	}
}
package com.ywcode.randomeventhider;

import net.runelite.client.config.*;

@ConfigGroup("RandomEventHider")
public interface RandomEventHiderConfig extends Config
{
	@ConfigSection(
			name = "Others' random events",
			description = "Hide the random events of other players",
			position = 0,
			closedByDefault = true
	)
	String othersRandomsCategory = "othersRandomsCategory";
	@ConfigSection(
			name = "Own random events",
			description = "Hide your own random events",
			position = 1,
			closedByDefault = true
	)
	String ownRandomsCategory = "ownRandomsCategory";
	@ConfigSection(
			name = "Miscellaneous",
			description = "Miscellaneous settings",
			position = 2,
			closedByDefault = true
	)
	String miscCategory = "miscCategory";

	@ConfigItem(
			keyName = "hideOtherBeekeeper",
			name = "Hide others' Beekeeper",
			description = "Hide the Beekeeper random event of other players",
			position = 0,
			section = othersRandomsCategory
	)
	default boolean hideOtherBeekeeper() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOtherCaptArnav",
			name = "Hide others' Capt' Arnav",
			description = "Hide the Capt' Arnav random event of other players",
			position = 1,
			section = othersRandomsCategory
	)
	default boolean hideOtherCaptArnav() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOtherNiles",
			name = "Hide others' Certers (Niles)",
			description = "Hide the Certers (Niles, Miles, Giles) random event of other players",
			position = 2,
			section = othersRandomsCategory
	)
	default boolean hideOtherNiles() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOtherCountCheck",
			name = "Hide others' Count Check",
			description = "Hide the Count Check random event of other players",
			position = 3,
			section = othersRandomsCategory
	)
	default boolean hideOtherCountCheck() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOtherDrillDemon",
			name = "Hide others' Drill Demon",
			description = "Hide the Drill Demon/Sergeant Damien random event of other players",
			position = 4,
			section = othersRandomsCategory
	)
	default boolean hideOtherDrillDemon() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOtherDrunkenDwarf",
			name = "Hide others' Drunken Dwarf",
			description = "Hide the Drunken Dwarf random event of other players",
			position = 5,
			section = othersRandomsCategory
	)
	default boolean hideOtherDrunkenDwarf() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOtherEvilBob",
			name = "Hide others' Evil Bob",
			description = "Hide the Evil Bob random event of other players",
			position = 6,
			section = othersRandomsCategory
	)
	default boolean hideOtherEvilBob() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOtherEvilTwin",
			name = "Hide others' Evil Twin",
			description = "Hide the Evil Twin/Postie Pete/Molly random event of other players",
			position = 7,
			section = othersRandomsCategory
	)
	default boolean hideOtherEvilTwin() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOtherFreakyForester",
			name = "Hide others' Freaky Forester",
			description = "Hide the Freaky Forester random event of other players",
			position = 8,
			section = othersRandomsCategory
	)
	default boolean hideOtherFreakyForester() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOtherGenie",
			name = "Hide others' Genie",
			description = "Hide the Genie random event of other players",
			position = 9,
			section = othersRandomsCategory
	)
	default boolean hideOtherGenie() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOtherGravedigger",
			name = "Hide others' Gravedigger",
			description = "Hide the Gravedigger/Leo random event of other players",
			position = 10,
			section = othersRandomsCategory
	)
	default boolean hideOtherGravedigger() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOtherJekyllHyde",
			name = "Hide others' Jekyll and Hyde",
			description = "Hide the Jekyll and Hyde random event of other players",
			position = 11,
			section = othersRandomsCategory
	)
	default boolean hideOtherJekyllHyde() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOtherKissTheFrog",
			name = "Hide others' Kiss the Frog",
			description = "Hide the Kiss the Frog random event of other players",
			position = 12,
			section = othersRandomsCategory
	)
	default boolean hideOtherKissTheFrog() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOtherMaze",
			name = "Hide others' Maze",
			description = "Hide the Maze random event of other players",
			position = 13,
			section = othersRandomsCategory
	)
	default boolean hideOtherMaze() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOtherMime",
			name = "Hide others' Mime",
			description = "Hide the Mime random event of other players",
			position = 14,
			section = othersRandomsCategory
	)
	default boolean hideOtherMime() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOtherMysteriousOldMan",
			name = "Hide others' Mysterious Old Man",
			description = "Hide the Mysterious Old Man random event of other players",
			position = 15,
			section = othersRandomsCategory
	)
	default boolean hideOtherMysteriousOldMan() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOtherPilloryGuard",
			name = "Hide others' Pillory Guard",
			description = "Hide the Pillory Guard random event of other players",
			position = 16,
			section = othersRandomsCategory
	)
	default boolean hideOtherPilloryGuard() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOtherPinball",
			name = "Hide others' Pinball",
			description = "Hide the Pinball/Flippa/Tilt random event of other players",
			position = 17,
			section = othersRandomsCategory
	)
	default boolean hideOtherPinball() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOtherPrisonPete",
			name = "Hide others' Prison Pete",
			description = "Hide the Prison Pete random event of other players",
			position = 18,
			section = othersRandomsCategory
	)
	default boolean hideOtherPrisonPete() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOtherQuizMaster",
			name = "Hide others' Quiz Master",
			description = "Hide the Quiz Master random event of other players",
			position = 19,
			section = othersRandomsCategory
	)
	default boolean hideOtherQuizMaster() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOtherRickTurpentine",
			name = "Hide others' Rick Turpentine",
			description = "Hide the Rick Turpentine random event of other players",
			position = 20,
			section = othersRandomsCategory
	)
	default boolean hideOtherRickTurpentine() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOtherSandwichLady",
			name = "Hide others' Sandwich Lady",
			description = "Hide the Sandwich Lady random event of other players",
			position = 21,
			section = othersRandomsCategory
	)
	default boolean hideOtherSandwichLady() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOtherSurpriseExam",
			name = "Hide others' Surprise Exam",
			description = "Hide the Surprise Exam/Dunce random event of other players",
			position = 22,
			section = othersRandomsCategory
	)
	default boolean hideOtherSurpriseExam() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOwnBeekeeper",
			name = "Hide your own Beekeeper",
			description = "Hide your own Beekeeper random event",
			position = 0,
			section = ownRandomsCategory
	)
	default boolean hideOwnBeekeeper() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOwnCaptArnav",
			name = "Hide your own Capt' Arnav",
			description = "Hide your own Capt' Arnav random event",
			position = 1,
			section = ownRandomsCategory
	)
	default boolean hideOwnCaptArnav() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOwnNiles",
			name = "Hide your own Certers (Niles)",
			description = "Hide your own Certers (Niles, Miles, Giles) random event",
			position = 2,
			section = ownRandomsCategory
	)
	default boolean hideOwnNiles() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOwnCountCheck",
			name = "Hide your own Count Check",
			description = "Hide your own Count Check random event",
			position = 3,
			section = ownRandomsCategory
	)
	default boolean hideOwnCountCheck() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOwnDrillDemon",
			name = "Hide your own Drill Demon",
			description = "Hide your own Drill Demon/Sergeant Damien random event",
			position = 4,
			section = ownRandomsCategory
	)
	default boolean hideOwnDrillDemon() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOwnDrunkenDwarf",
			name = "Hide your own Drunken Dwarf",
			description = "Hide your own Drunken Dwarf random event",
			position = 5,
			section = ownRandomsCategory
	)
	default boolean hideOwnDrunkenDwarf() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOwnEvilBob",
			name = "Hide your own Evil Bob",
			description = "Hide your own Evil Bob random event",
			position = 6,
			section = ownRandomsCategory
	)
	default boolean hideOwnEvilBob() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOwnEvilTwin",
			name = "Hide your own Evil Twin",
			description = "Hide your own Evil Twin/Postie Pete/Molly random event",
			position = 7,
			section = ownRandomsCategory
	)
	default boolean hideOwnEvilTwin() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOwnFreakyForester",
			name = "Hide your own Freaky Forester",
			description = "Hide your own Freaky Forester random event",
			position = 8,
			section = ownRandomsCategory
	)
	default boolean hideOwnFreakyForester() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOwnGenie",
			name = "Hide your own Genie",
			description = "Hide your own Genie random event",
			position = 9,
			section = ownRandomsCategory
	)
	default boolean hideOwnGenie() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOwnGravedigger",
			name = "Hide your own Gravedigger",
			description = "Hide your own Gravedigger/Leo random event",
			position = 10,
			section = ownRandomsCategory
	)
	default boolean hideOwnGravedigger() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOwnJekyllHyde",
			name = "Hide your own Jekyll and Hyde",
			description = "Hide your own Jekyll and Hyde random event",
			position = 11,
			section = ownRandomsCategory
	)
	default boolean hideOwnJekyllHyde() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOwnKissTheFrog",
			name = "Hide your own Kiss the Frog",
			description = "Hide your own Kiss the Frog random event",
			position = 12,
			section = ownRandomsCategory
	)
	default boolean hideOwnKissTheFrog() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOwnMaze",
			name = "Hide your own Maze",
			description = "Hide your own Maze random event",
			position = 13,
			section = ownRandomsCategory
	)
	default boolean hideOwnMaze() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOwnMime",
			name = "Hide your own Mime",
			description = "Hide your own Mime random event",
			position = 14,
			section = ownRandomsCategory
	)
	default boolean hideOwnMime() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOwnMysteriousOldMan",
			name = "Hide your own Mysterious Old Man",
			description = "Hide your own Mysterious Old Man random event",
			position = 15,
			section = ownRandomsCategory
	)
	default boolean hideOwnMysteriousOldMan() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOwnPilloryGuard",
			name = "Hide your own Pillory Guard",
			description = "Hide your own Pillory Guard random event",
			position = 16,
			section = ownRandomsCategory
	)
	default boolean hideOwnPilloryGuard() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOwnPinball",
			name = "Hide your own Pinball",
			description = "Hide your own Pinball/Flippa/Tilt random event",
			position = 17,
			section = ownRandomsCategory
	)
	default boolean hideOwnPinball() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOwnPrisonPete",
			name = "Hide your own Prison Pete",
			description = "Hide your own Prison Pete random event",
			position = 18,
			section = ownRandomsCategory
	)
	default boolean hideOwnPrisonPete() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOwnQuizMaster",
			name = "Hide your own Quiz Master",
			description = "Hide your own Quiz Master random event",
			position = 19,
			section = ownRandomsCategory
	)
	default boolean hideOwnQuizMaster() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOwnRickTurpentine",
			name = "Hide your own Rick Turpentine",
			description = "Hide your own Rick Turpentine random event",
			position = 20,
			section = ownRandomsCategory
	)
	default boolean hideOwnRickTurpentine() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOwnSandwichLady",
			name = "Hide your own Sandwich Lady",
			description = "Hide your own Sandwich Lady random event",
			position = 21,
			section = ownRandomsCategory
	)
	default boolean hideOwnSandwichLady() {
		return false;
	}

	@ConfigItem(
			keyName = "hideOwnSurpriseExam",
			name = "Hide your own Surprise Exam",
			description = "Hide your own Surprise Exam/Dunce random event",
			position = 22,
			section = ownRandomsCategory
	)
	default boolean hideOwnSurpriseExam() {
		return false;
	}

	//Strange plant does not interact with any person, so we'll hide them all if hideAllStrangePlant is enabled.
	@ConfigItem(
			keyName = "hideAllStrangePlant",
			name = "Hide ALL Strange Plants",
			description = "Hide ALL Strange Plant random events, both your own events and the events of other players",
			position = 0,
			section = miscCategory
	)
	default boolean hideAllStrangePlant() {
		return false;
	}

	@ConfigItem(
			keyName = "muteDwarf",
			name = "Mute Drunken Dwarf",
			description = "Mutes the Drunken Dwarf",
			position = 1,
			section = miscCategory
	)
	default boolean muteDwarf() {
		return false;
	}

	@ConfigItem(
			keyName = "muteBob",
			name = "Mute Evil Bob",
			description = "Mutes Evil Bob's meow",
			position = 2,
			section = miscCategory
	)
	default boolean muteBob() {
		return false;
	}

	@ConfigItem(
			keyName = "muteFrogs",
			name = "Mute the Frogs",
			description = "Mutes the splashes by the Frogs",
			position = 3,
			section = miscCategory
	)
	default boolean muteFrogs() {
		return false;
	}

	@ConfigItem(
			keyName = "mutePoof",
			name = "Mute the Poof",
			description = "Mutes the poof (smoke) sound",
			position = 4,
			section = miscCategory
	)
	default boolean mutePoof() {
		return true;
	}

	@ConfigItem(
			keyName = "muteOtherRandomSounds",
			name = "Mute other sound effects",
			description = "Mutes other sound effects (i.e. sound effects not listed above) made by random events",
			position = 5,
			section = miscCategory
	)
	default boolean muteOtherRandomSounds() {
		return false;
	}

	@ConfigItem(
			keyName = "hidePoof",
			name = "Hide the Poof animation",
			description = "Hides random events' poof (smoke) animation",
			position = 6,
			section = miscCategory
	)
	default boolean hidePoof() {
		return true;
	}

	@ConfigItem(
			keyName = "hideOtherMessengers",
			name = "Hide others' messengers",
			description = "Hide the King's Messenger (Regicide), Messenger (The Frozen Door), Messenger (Into the Tombs/Varlamore),<br>"
					+ "Guardian of Armadyl (WGS) of other players",
			position = 7,
			section = miscCategory
	)
	default boolean hideOtherMessengers() {
		return false;
	}

}
package com.ywcode.randomeventhider;

import com.google.common.annotations.*;
import com.google.common.collect.*;
import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.*;
import net.runelite.api.events.*;
import net.runelite.client.callback.*;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.*;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import java.util.*;

@Slf4j
@PluginDescriptor(
		name = "Random Event Hider",
		description = "Adds the ability to hide specific random events that interact with you or with other players.",
		tags = {"random event,hider,random event hider,ra hider,messenger,strange plant,poof,smoke,star mining,shooting stars,forestry,count check,wgs,while guthix sleeps,guardian of armadyl"}
)

public class RandomEventHiderPlugin extends Plugin {

	private static final Set<Integer> RANDOM_EVENT_NPCS = ImmutableSet.of(
			NpcID.BEE_KEEPER_6747,
			NpcID.CAPT_ARNAV,
			NpcID.COUNT_CHECK_12551, NpcID.COUNT_CHECK_12552,
			NpcID.DR_JEKYLL, NpcID.DR_JEKYLL_314,
			NpcID.DRUNKEN_DWARF,
			NpcID.DUNCE_6749,
			NpcID.EVIL_BOB, NpcID.EVIL_BOB_6754,
			NpcID.FLIPPA_6744,
			NpcID.FREAKY_FORESTER_6748,
			NpcID.FROG_5429, NpcID.FROG_5430, NpcID.FROG_5431, NpcID.FROG_5432, NpcID.FROG, NpcID.FROG_PRINCE, NpcID.FROG_PRINCESS,
			NpcID.GENIE, NpcID.GENIE_327,
			NpcID.GILES, NpcID.GILES_5441,
			NpcID.LEO_6746,
			NpcID.MILES, NpcID.MILES_5440,
			NpcID.MYSTERIOUS_OLD_MAN_6750, NpcID.MYSTERIOUS_OLD_MAN_6751,
			NpcID.MYSTERIOUS_OLD_MAN_6752, NpcID.MYSTERIOUS_OLD_MAN_6753,
			NpcID.NILES, NpcID.NILES_5439,
			NpcID.PILLORY_GUARD,
			NpcID.POSTIE_PETE_6738,
			NpcID.QUIZ_MASTER_6755,
			NpcID.RICK_TURPENTINE, NpcID.RICK_TURPENTINE_376,
			NpcID.SANDWICH_LADY,
			NpcID.SERGEANT_DAMIEN_6743
	);

	private static final Set<Integer> MESSENGER_NPCS = ImmutableSet.of(
			//Regicide
			NpcID.KINGS_MESSENGER,
			//The Frozen Door
			NpcID.MESSENGER,
			//4x Into the Tombs/Varlamore
			NpcID.MESSENGER_11814, NpcID.MESSENGER_11815, NpcID.MESSENGER_11816, NpcID.MESSENGER_11817,
			//WGS Guardian of Armadyl messenger
			NpcID.GUARDIAN_OF_ARMADYL_13509
	);

	private static final Set<Integer> EVENT_NPCS; // Combine sets because everything that happens for RANDOM_EVENT_NPCS should also happen for MESSENGER_NPCS and they are technically different types of NPCs.
	static {
		Set<Integer> combinedSets = new HashSet<>();
		combinedSets.addAll(RANDOM_EVENT_NPCS);
		combinedSets.addAll(MESSENGER_NPCS);
		EVENT_NPCS = Collections.unmodifiableSet(combinedSets);
	}

	private static final Set<Integer> FROGS_NPCS = ImmutableSet.of(
			NpcID.FROG_5429, NpcID.FROG_5430, NpcID.FROG_5431, NpcID.FROG_5432, NpcID.FROG, NpcID.FROG_PRINCE, NpcID.FROG_PRINCESS
	);

	private static final int POOF_SOUND = 1930;
	private static final int DRUNKEN_DWARF_SOUND = 2297;
	private static final int EVIL_BOB_MEOW = 333; //Apparently also cat hiss
	private static final int FROG_SPLASH = 838; //Thanks veknow
	private static final int POOF_GRAPHICSOBJECT_ID = 86; //Apparently called GREY_BUBBLE_TELEPORT in GraphicID.java
	private static final int FROG_REALM_REGIONID = 9802;

	// ------------- Wall of config vars -------------
	// Vars are quite heavily cached so could probably just config.configKey(). However, the best practice behavior in plugins is to have a bunch of variables to store the results of the config methods, and check it in startUp/onConfigChanged. It feels redundant, but it's better than hitting the reflective calls every frame. --LlemonDuck
	private static boolean hideOtherBeekeeper;
	private static boolean hideOtherCaptArnav;
	private static boolean hideOtherNiles;
	private static boolean hideOtherCountCheck;
	private static boolean hideOtherDrillDemon;
	private static boolean hideOtherDrunkenDwarf;
	private static boolean hideOtherEvilBob;
	private static boolean hideOtherEvilTwin;
	private static boolean hideOtherFreakyForester;
	private static boolean hideOtherGenie;
	private static boolean hideOtherGravedigger;
	private static boolean hideOtherJekyllHyde;
	private static boolean hideOtherKissTheFrog;
	private static boolean hideOtherMaze;
	private static boolean hideOtherMime;
	private static boolean hideOtherMysteriousOldMan;
	private static boolean hideOtherPilloryGuard;
	private static boolean hideOtherPinball;
	private static boolean hideOtherPrisonPete;
	private static boolean hideOtherQuizMaster;
	private static boolean hideOtherRickTurpentine;
	private static boolean hideOtherSandwichLady;
	private static boolean hideOtherSurpriseExam;
	private static boolean hideOwnBeekeeper;
	private static boolean hideOwnCaptArnav;
	private static boolean hideOwnCountCheck;
	private static boolean hideOwnNiles;
	private static boolean hideOwnDrillDemon;
	private static boolean hideOwnDrunkenDwarf;
	private static boolean hideOwnEvilBob;
	private static boolean hideOwnEvilTwin;
	private static boolean hideOwnFreakyForester;
	private static boolean hideOwnGenie;
	private static boolean hideOwnGravedigger;
	private static boolean hideOwnJekyllHyde;
	private static boolean hideOwnKissTheFrog;
	private static boolean hideOwnMaze;
	private static boolean hideOwnMime;
	private static boolean hideOwnMysteriousOldMan;
	private static boolean hideOwnPilloryGuard;
	private static boolean hideOwnPinball;
	private static boolean hideOwnPrisonPete;
	private static boolean hideOwnQuizMaster;
	private static boolean hideOwnRickTurpentine;
	private static boolean hideOwnSandwichLady;
	private static boolean hideOwnSurpriseExam;
	private static boolean hideAllStrangePlant;
	private static boolean muteDwarf;
	private static boolean muteBob;
	private static boolean muteFrogs;
	private static boolean mutePoof;
	private static boolean muteOtherRandomSounds;
	private static boolean hidePoof;
	private static boolean hideOtherMessengers;
	// ------------- End of wall of config vars -------------

	private static final LinkedHashMap<Integer, Integer> ownRandomsMap = new LinkedHashMap<>();
	private static final LinkedHashMap<Integer, Integer> otherRandomsMap = new LinkedHashMap<>();
	private static final LinkedHashMap<WorldPoint, Integer> spawnedDespawnedNpcLocations = new LinkedHashMap<>();
	private static final LinkedHashMap<WorldPoint, Integer> spawnedDespawnedNpcLocationsDeletion = new LinkedHashMap<>();
	//Should maybe use a custom class RandomEvent with stuff such as npcIndex, npcId, interactingWith, npcSpawnedLocation, gameCycleSpawned, npcDespawnedLocation, gameCycleDespawned

	private static boolean shouldCleanMap; //False by default
	private static int currentRegionID; //0 by default

	private final Hooks.RenderableDrawListener drawListener = this::shouldDraw;

	@Inject
	private Client client;

	@Inject
	private RandomEventHiderConfig config;

	@Inject
	private Hooks hooks;

	@Override
	public void startUp() {
		hooks.registerRenderableDrawListener(drawListener);
		updateConfig();
	}

	@Override
	public void shutDown() {
		hooks.unregisterRenderableDrawListener(drawListener);
		ownRandomsMap.clear();
		otherRandomsMap.clear();
		spawnedDespawnedNpcLocations.clear();
		spawnedDespawnedNpcLocationsDeletion.clear();
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged) {
		if (configChanged.getGroup().equals("RandomEventHider")) {
			updateConfig();
		}
	}

	private void updateConfig() {
		hideOtherBeekeeper = config.hideOtherBeekeeper();
		hideOtherCaptArnav = config.hideOtherCaptArnav();
		hideOtherNiles = config.hideOtherNiles();
		hideOtherCountCheck = config.hideOtherCountCheck();
		hideOtherDrillDemon = config.hideOtherDrillDemon();
		hideOtherDrunkenDwarf = config.hideOtherDrunkenDwarf();
		hideOtherEvilBob = config.hideOtherEvilBob();
		hideOtherEvilTwin = config.hideOtherEvilTwin();
		hideOtherFreakyForester = config.hideOtherFreakyForester();
		hideOtherGenie = config.hideOtherGenie();
		hideOtherGravedigger = config.hideOtherGravedigger();
		hideOtherJekyllHyde = config.hideOtherJekyllHyde();
		hideOtherKissTheFrog = config.hideOtherKissTheFrog();
		hideOtherMaze = config.hideOtherMaze();
		hideOtherMime = config.hideOtherMime();
		hideOtherMysteriousOldMan = config.hideOtherMysteriousOldMan();
		hideOtherPilloryGuard = config.hideOtherPilloryGuard();
		hideOtherPinball = config.hideOtherPinball();
		hideOtherPrisonPete = config.hideOtherPrisonPete();
		hideOtherQuizMaster = config.hideOtherQuizMaster();
		hideOtherRickTurpentine = config.hideOtherRickTurpentine();
		hideOtherSandwichLady = config.hideOtherSandwichLady();
		hideOtherSurpriseExam = config.hideOtherSurpriseExam();
		hideOwnBeekeeper = config.hideOwnBeekeeper();
		hideOwnCaptArnav = config.hideOwnCaptArnav();
		hideOwnNiles = config.hideOwnNiles();
		hideOwnCountCheck = config.hideOwnCountCheck();
		hideOwnDrillDemon = config.hideOwnDrillDemon();
		hideOwnDrunkenDwarf = config.hideOwnDrunkenDwarf();
		hideOwnEvilBob = config.hideOwnEvilBob();
		hideOwnEvilTwin = config.hideOwnEvilTwin();
		hideOwnFreakyForester = config.hideOwnFreakyForester();
		hideOwnGenie = config.hideOwnGenie();
		hideOwnGravedigger = config.hideOwnGravedigger();
		hideOwnJekyllHyde = config.hideOwnJekyllHyde();
		hideOwnKissTheFrog = config.hideOwnKissTheFrog();
		hideOwnMaze = config.hideOwnMaze();
		hideOwnMime = config.hideOwnMime();
		hideOwnMysteriousOldMan = config.hideOwnMysteriousOldMan();
		hideOwnPilloryGuard = config.hideOwnPilloryGuard();
		hideOwnPinball = config.hideOwnPinball();
		hideOwnPrisonPete = config.hideOwnPrisonPete();
		hideOwnQuizMaster = config.hideOwnQuizMaster();
		hideOwnRickTurpentine = config.hideOwnRickTurpentine();
		hideOwnSandwichLady = config.hideOwnSandwichLady();
		hideOwnSurpriseExam = config.hideOwnSurpriseExam();
		hideAllStrangePlant = config.hideAllStrangePlant();
		muteDwarf = config.muteDwarf();
		muteBob = config.muteBob();
		muteFrogs = config.muteFrogs();
		mutePoof = config.mutePoof();
		muteOtherRandomSounds = config.muteOtherRandomSounds();
		hidePoof = config.hidePoof();
		hideOtherMessengers = config.hideOtherMessengers();
	}

	@Subscribe
	public void onInteractingChanged(InteractingChanged interactingChanged) {
		Actor source = interactingChanged.getSource();
		Actor target = interactingChanged.getTarget();
		Player player = client.getLocalPlayer();

		if (player != null && (source instanceof NPC) && (target instanceof Player) && EVENT_NPCS.contains(((NPC) source).getId())) {
			int sourceIndex = ((NPC) source).getIndex();
			int sourceId = ((NPC) source).getId();

			//This is the player's own random event, assuming the random immediately interacts with the player when spawned.
			//Won't get marked as someone else's NPC later on (even if other people interact with it), since it's already on this map.
			//Assuming random event NPCs for other players immediately interact with another user when they spawn, it'll get on the "other" map, even if the player talks to someone else's random event later on.
			//Also write down the index in case there are multiple random events with the same NPC id on screen
			if (target == player && !ownRandomsMap.containsKey(sourceIndex) && !otherRandomsMap.containsKey(sourceIndex)) { //A potential Id check is redundant, since all NPCs have a unique Index. Additionally, doesn't error out if maps are empty AFAIK, so no isEmpty() check first.
				ownRandomsMap.put(sourceIndex, sourceId); //Id is probably useful for e.g. the Frog random
			}

			//This is someone else's random event, assuming the random immediately interacts with the target when spawned.
			//Won't get marked as your own NPC later on (even if the player interacts with it), since it's already on this map.
			//Also write down the index in case there are multiple random events with the same NPC id on screen
			if (target != player && !ownRandomsMap.containsKey(sourceIndex) && !otherRandomsMap.containsKey(sourceIndex)) { //A potential Id check is redundant, since all NPCs have a unique Index. Additionally, doesn't error out if maps are empty AFAIK, so no isEmpty() check first.
				//Frogs are the only event that spawn multiple Npcs. Not sure if they all interact with the player (very likely not; haven't been able to 100% properly research this yet though).
				//Don't add them to otherRandomMap if there's already a frog targeting the player to not hide the other frog Npcs if "Hide own kiss the frog" is enabled.
				//Will also hide other's frogs if both you and another player have the 'kiss the frog' event at the exact same time, and you only got your own hidden; or it will not hide theirs if you only got 'hide other kiss the frog' enabled. However, we accept that.
				if (! (FROGS_NPCS.contains(sourceId) &&	mapContainsFrogId(ownRandomsMap)) ) {
					otherRandomsMap.put(sourceIndex, sourceId); //sourceId is probs useful for e.g. the Frog random
				}
			}
		}
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged) {
		if (gameStateChanged.getGameState() == GameState.LOGIN_SCREEN || gameStateChanged.getGameState() == GameState.HOPPING) {
			ownRandomsMap.clear();
			otherRandomsMap.clear();
			spawnedDespawnedNpcLocations.clear();
			spawnedDespawnedNpcLocationsDeletion.clear();
		}
	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned npcSpawned) {
		int npcSpawnedId = npcSpawned.getNpc().getId();
		int npcSpawnedIndex = npcSpawned.getNpc().getIndex();
		Actor npcSpawnedActor = npcSpawned.getActor();
		addPoofLocationToList(npcSpawnedId, npcSpawnedIndex, npcSpawnedActor, true);
	}

	@Subscribe
	public void onNpcDespawned(NpcDespawned npcDespawned) {
		int npcDespawnedId = npcDespawned.getNpc().getId();
		int npcDespawnedIndex = npcDespawned.getNpc().getIndex();
		Actor npcDespawnedActor = npcDespawned.getActor();
		addPoofLocationToList(npcDespawnedId, npcDespawnedIndex, npcDespawnedActor, false);

		if (EVENT_NPCS.contains(npcDespawnedId)) {
			if (ownRandomsMap.containsKey(npcDespawnedIndex)) {
				ownRandomsMap.remove(npcDespawnedIndex, npcDespawnedId);
			}
			if (otherRandomsMap.containsKey(npcDespawnedIndex)) {
				otherRandomsMap.remove(npcDespawnedIndex, npcDespawnedId);
			}
		}
	}

	@Subscribe
	public void onGameTick(GameTick gameTick) {
		//Iterate through Map and remove entries that are >5 gameticks (150 GameCycles/ClientTicks) old
		//Alternative is to e.g. add the GraphicsObjects to a list and iterate through them until getPrevious == null conform conform https://discord.com/channels/301497432909414422/419891709883973642/740262232432050247 but that did not seem to work that well.
		//However, would also have to remove frogs etc. still this way (they spawn multiple Npcs, but only one GraphicsObject Poof)!
		currentRegionID = WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation()).getRegionID(); //Somewhat caching this here instead of putting it into ShouldHideBasedOnMaps because then it can get called multiple times per gameCycle around e.g. prif stars.
		if (!spawnedDespawnedNpcLocations.isEmpty()) {
			int currentGameCycle = client.getGameCycle();
			for (Map.Entry<WorldPoint, Integer> entry : spawnedDespawnedNpcLocations.entrySet()) {
				int npcGameCycle = entry.getValue();
				if (currentGameCycle - npcGameCycle > 150) {
					spawnedDespawnedNpcLocationsDeletion.put(entry.getKey(), entry.getValue());
					shouldCleanMap = true;
				}
			}
			cleanupMap(); //Alternative is to use an iterator
		}
	}

	@Subscribe
	public void onSoundEffectPlayed(SoundEffectPlayed soundEffectPlayed) {
		int soundId = soundEffectPlayed.getSoundId();
		if (soundEffectPlayed.getSource() != null && soundEffectPlayed.getSource() instanceof NPC) {
			int sourceNpcId = ((NPC) soundEffectPlayed.getSource()).getId();
			if ((EVENT_NPCS.contains(sourceNpcId) || (sourceNpcId == NpcID.STRANGE_PLANT)) && shouldMute(soundId)) {
				soundEffectPlayed.consume();
			}
		}
		//POOF_SOUND source is null apparently (found through ingame experimentation)
		if ((soundId == POOF_SOUND || soundId == EVIL_BOB_MEOW || soundId == DRUNKEN_DWARF_SOUND || soundId == FROG_SPLASH) && shouldMute(soundId)) {
			soundEffectPlayed.consume();
		}
	}

	@Subscribe
	public void onAreaSoundEffectPlayed(AreaSoundEffectPlayed areaSoundEffectPlayed) {
		int soundId = areaSoundEffectPlayed.getSoundId();
		if (areaSoundEffectPlayed.getSource() != null && areaSoundEffectPlayed.getSource() instanceof NPC) {
			int sourceNpcId = ((NPC) areaSoundEffectPlayed.getSource()).getId();
			if ((EVENT_NPCS.contains(sourceNpcId) || (sourceNpcId == NpcID.STRANGE_PLANT)) && shouldMute(soundId)) {
				areaSoundEffectPlayed.consume();
			}
		}
		//POOF_SOUND source is null apparently (found through ingame experimentation)
		if ((soundId == POOF_SOUND || soundId == EVIL_BOB_MEOW || soundId == DRUNKEN_DWARF_SOUND || soundId == FROG_SPLASH) && shouldMute(soundId)) {
			areaSoundEffectPlayed.consume();
		}
	}

	@VisibleForTesting
	boolean shouldDraw(Renderable renderable, boolean drawingUI) {
		if (renderable instanceof NPC) {
			NPC npc = (NPC) renderable;
			int npcId = npc.getId();
			if (EVENT_NPCS.contains(npcId) || (npcId == NpcID.STRANGE_PLANT)) { // Instance check removed because PoH can still have random events and the events have different overworld NPC ids anyway.
				//Beekeeper uses a different Id, Sergeant Damien uses a different Id, Evil Bob uses a different Id,
				//the Freaky Forester uses a different Id, Leo uses a different Id, the Frog random does not teleport the played anymore,
				//the Pillory Guard likely uses a different Id and is irrelevant in his event, Flippa uses a different Id,
				//the Prison Pete random only has Bob inviting you (not in the random), the maze random doesn't contain any relevant Npcs,
				//Postie Pete doesn't show up in the Evil Twin random.
				int npcIndex = npc.getIndex();
				return !shouldHideBasedOnMaps(npcIndex, npcId);
			}
		}
		if (renderable instanceof GraphicsObject) {
			GraphicsObject graphicsObject = (GraphicsObject) renderable;
			if (graphicsObject.getId() == POOF_GRAPHICSOBJECT_ID) {
				//This code is written with the assumption that POOF_GRAPHICSOBJECT_ID is used for multiple npcs, e.g. imps, double agents etc.
				//Otherwise a simple Id check would have been enough. If the current implementation turns out to be too crappy, I'll just swap to that.
				WorldPoint graphicsObjectWorldPoint = WorldPoint.fromLocalInstance(client, graphicsObject.getLocation());
				if (spawnedDespawnedNpcLocations.containsKey(graphicsObjectWorldPoint)) {
					graphicsObject.setFinished(true);
					return !hidePoof;
				}
			}
		}
		return true;
	}

	private void addPoofLocationToList(int npcId, int npcIndex, Actor npcActor, boolean NpcSpawned) {
		//If an Npc is hidden via the plugin, the poof should happen on the NpcSpawned location (will always happen due to code to prevent Npc flashing)
		//If an Npc is not hidden via the plugin, the poof should happen briefly on the NpcSpawned location (unless both own and other are not hidden!) and also on the NpcDespawned location
		//Tldr: Poof always happens on the spawn location (except when both own and other are NOT hidden), but only on the despawn location if the Npc is not hidden.
		//Edit: turns out via research that NpcDespawned always creates a poof
		if (EVENT_NPCS.contains(npcId) || npcId == NpcID.STRANGE_PLANT) {
			WorldPoint npcWorldPoint = npcActor.getWorldLocation(); // TODO: Potentially try 	WorldPoint npcWorldPoint = WorldPoint.fromLocalInstance(client, npcActor.getLocalLocation()); at some point to fix the poof in the POH?
			if (NpcSpawned && shouldHideBasedOnMaps(npcIndex, npcId)) {
				spawnedDespawnedNpcLocations.put(npcWorldPoint, client.getGameCycle());
			}
			if (!NpcSpawned /*&& !shouldHideBasedOnMaps(npcIndex, npcId)*/) {
				spawnedDespawnedNpcLocations.put(npcWorldPoint, client.getGameCycle());
			}
		}
	}

	private void cleanupMap() {
		if (shouldCleanMap) {
			for (Map.Entry<WorldPoint, Integer> entry : spawnedDespawnedNpcLocationsDeletion.entrySet()) {
				spawnedDespawnedNpcLocations.remove(entry.getKey(), entry.getValue());
			}
			spawnedDespawnedNpcLocationsDeletion.clear();
			shouldCleanMap = false;
		}
	}

	private boolean mapContainsFrogId(LinkedHashMap Map) {
		return Map.containsValue(NpcID.FROG_5429) ||
				Map.containsValue(NpcID.FROG_5430) ||
				Map.containsValue(NpcID.FROG_5431) ||
				Map.containsValue(NpcID.FROG_5432) ||
				Map.containsValue(NpcID.FROG) ||
				Map.containsValue(NpcID.FROG_PRINCE) ||
				Map.containsValue(NpcID.FROG_PRINCESS);
	}

	private boolean shouldHideBasedOnMaps(int npcIndex, int npcId) {
		if (currentRegionID == FROG_REALM_REGIONID) {
			//Disable in frog realm so https://github.com/YvesW/random-event-hider/issues/4 doesn't happen
			return false;
		}

		if (ownRandomsMap.containsKey(npcIndex)) {
			return shouldHide(npcId, true);
		}
		if (otherRandomsMap.containsKey(npcIndex)) {
			return shouldHide(npcId, false);
		}

		//Hide other frogs if a frog is on the ownRandomsMap or otherRandomsMap based on settings
		if (FROGS_NPCS.contains(npcId)) {
			if (mapContainsFrogId(ownRandomsMap)) {
				return shouldHide(npcId, true);
			}
			if (mapContainsFrogId(otherRandomsMap)) {
				return shouldHide(npcId, false);
			}  //return (shouldHide(npcId, true) || shouldHide(npcId, false)); 	//At this point there is no frog on any of the maps. Hide to prevent flashing. => However, not needed since this return statement is already listed a couple lines further down.
		}

		//Strange plant does not interact with any person, so we'll hide them all if hideAllStrangePlant is enabled.
		if (npcId == NpcID.STRANGE_PLANT) {
			return hideAllStrangePlant;
		}

		//Strange plant has already been handled, so it doesn't need to be excluded.
		//Npc is not on any of the maps, so no map.containsKey() check needed here.
		return (shouldHide(npcId, true) || shouldHide(npcId, false)); //Prevent NPCs from flashing when showing up.
	}

	private boolean shouldHide(int id, boolean OwnEvent) {
		if (OwnEvent) {
			switch (id) {
				case NpcID.BEE_KEEPER_6747:
					return hideOwnBeekeeper;
				case NpcID.CAPT_ARNAV:
					return hideOwnCaptArnav;
				case NpcID.GILES:
				case NpcID.GILES_5441:
				case NpcID.MILES:
				case NpcID.MILES_5440:
				case NpcID.NILES:
				case NpcID.NILES_5439:
					return hideOwnNiles;
				case NpcID.COUNT_CHECK_12551:
				case NpcID.COUNT_CHECK_12552:
					return hideOwnCountCheck;
				case NpcID.SERGEANT_DAMIEN_6743:
					return hideOwnDrillDemon;
				case NpcID.DRUNKEN_DWARF:
					return hideOwnDrunkenDwarf;
				case NpcID.EVIL_BOB: //Evil Bob random, see https://discord.com/channels/177206626514632704/269673599554551808/1057450627774562394
					return hideOwnEvilBob;
				case NpcID.POSTIE_PETE_6738:
					return hideOwnEvilTwin;
				case NpcID.FREAKY_FORESTER_6748:
					return hideOwnFreakyForester;
				case NpcID.GENIE:
				case NpcID.GENIE_327:
					return hideOwnGenie;
				case NpcID.LEO_6746:
					return hideOwnGravedigger;
				case NpcID.DR_JEKYLL:
				case NpcID.DR_JEKYLL_314:
					return hideOwnJekyllHyde;
				case NpcID.FROG_5429:
				case NpcID.FROG_5430:
				case NpcID.FROG_5431:
				case NpcID.FROG_5432:
				case NpcID.FROG_PRINCE:
				case NpcID.FROG_PRINCESS:
				case NpcID.FROG:
					return hideOwnKissTheFrog;
				case NpcID.MYSTERIOUS_OLD_MAN_6752:
					return hideOwnMaze; //6752 is maze https://discord.com/channels/177206626514632704/269673599554551808/1059302464622448650
				case NpcID.MYSTERIOUS_OLD_MAN_6753:
					return hideOwnMime; //6753 is mime https://discord.com/channels/177206626514632704/269673599554551808/1059302464622448650
				case NpcID.MYSTERIOUS_OLD_MAN_6750: //Mysterious Old Man (Rick Turpentine style), see https://discord.com/channels/177206626514632704/269673599554551808/1057448583881826374
				case NpcID.MYSTERIOUS_OLD_MAN_6751:
					return hideOwnMysteriousOldMan;
				case NpcID.PILLORY_GUARD:
					return hideOwnPilloryGuard;
				case NpcID.FLIPPA_6744:
					return hideOwnPinball;
				case NpcID.EVIL_BOB_6754: //Prison Pete, see https://discord.com/channels/177206626514632704/269673599554551808/1057450627774562394
					return hideOwnPrisonPete;
				case NpcID.QUIZ_MASTER_6755:
					return hideOwnQuizMaster;
				case NpcID.RICK_TURPENTINE:
				case NpcID.RICK_TURPENTINE_376:
					return hideOwnRickTurpentine;
				case NpcID.SANDWICH_LADY:
					return hideOwnSandwichLady;
				case NpcID.DUNCE_6749:
					return hideOwnSurpriseExam;
			}
		} else { //if (!OwnEvent)
			switch (id) {
				case NpcID.BEE_KEEPER_6747:
					return hideOtherBeekeeper;
				case NpcID.CAPT_ARNAV:
					return hideOtherCaptArnav;
				case NpcID.GILES:
				case NpcID.GILES_5441:
				case NpcID.MILES:
				case NpcID.MILES_5440:
				case NpcID.NILES:
				case NpcID.NILES_5439:
					return hideOtherNiles;
				case NpcID.COUNT_CHECK_12551:
				case NpcID.COUNT_CHECK_12552:
					return hideOtherCountCheck;
				case NpcID.SERGEANT_DAMIEN_6743:
					return hideOtherDrillDemon;
				case NpcID.DRUNKEN_DWARF:
					return hideOtherDrunkenDwarf;
				case NpcID.EVIL_BOB: //Evil Bob random, see https://discord.com/channels/177206626514632704/269673599554551808/1057450627774562394
					return hideOtherEvilBob;
				case NpcID.POSTIE_PETE_6738:
					return hideOtherEvilTwin;
				case NpcID.FREAKY_FORESTER_6748:
					return hideOtherFreakyForester;
				case NpcID.GENIE:
				case NpcID.GENIE_327:
					return hideOtherGenie;
				case NpcID.LEO_6746:
					return hideOtherGravedigger;
				case NpcID.DR_JEKYLL:
				case NpcID.DR_JEKYLL_314:
					return hideOtherJekyllHyde;
				case NpcID.FROG_5429:
				case NpcID.FROG_5430:
				case NpcID.FROG_5431:
				case NpcID.FROG_5432:
				case NpcID.FROG_PRINCE:
				case NpcID.FROG_PRINCESS:
				case NpcID.FROG:
					return hideOtherKissTheFrog;
				case NpcID.MYSTERIOUS_OLD_MAN_6752:
					return hideOtherMaze; //6752 is maze https://discord.com/channels/177206626514632704/269673599554551808/1059302464622448650
				case NpcID.MYSTERIOUS_OLD_MAN_6753:
					return hideOtherMime; //6753 is mime https://discord.com/channels/177206626514632704/269673599554551808/1059302464622448650
				case NpcID.MYSTERIOUS_OLD_MAN_6750: //Mysterious Old Man (Rick Turpentine style), see https://discord.com/channels/177206626514632704/269673599554551808/1057448583881826374
				case NpcID.MYSTERIOUS_OLD_MAN_6751:
					return hideOtherMysteriousOldMan;
				case NpcID.PILLORY_GUARD:
					return hideOtherPilloryGuard;
				case NpcID.FLIPPA_6744:
					return hideOtherPinball;
				case NpcID.EVIL_BOB_6754: //Prison Pete, see https://discord.com/channels/177206626514632704/269673599554551808/1057450627774562394
					return hideOtherPrisonPete;
				case NpcID.QUIZ_MASTER_6755:
					return hideOtherQuizMaster;
				case NpcID.RICK_TURPENTINE:
				case NpcID.RICK_TURPENTINE_376:
					return hideOtherRickTurpentine;
				case NpcID.SANDWICH_LADY:
					return hideOtherSandwichLady;
				case NpcID.DUNCE_6749:
					return hideOtherSurpriseExam;
				//The messengers are the only NpcIDs that are other-specific, i.e. not also listed above as potential 'own' events
				case NpcID.KINGS_MESSENGER:
				case NpcID.MESSENGER:
				case NpcID.MESSENGER_11814:
				case NpcID.MESSENGER_11815:
				case NpcID.MESSENGER_11816:
				case NpcID.MESSENGER_11817:
				case NpcID.GUARDIAN_OF_ARMADYL_13509:
					return hideOtherMessengers;
			}
		}
		return false;
	}

	private boolean shouldMute(int soundId) {
		switch (soundId) {
			case DRUNKEN_DWARF_SOUND:
				return muteDwarf;
			case EVIL_BOB_MEOW:
				return muteBob;
			case FROG_SPLASH:
				return muteFrogs;
			case POOF_SOUND:
				return mutePoof;
		}
		return muteOtherRandomSounds;
	}

	@Provides
	RandomEventHiderConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(RandomEventHiderConfig.class);
	}
}
