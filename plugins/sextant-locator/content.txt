/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.sextantlocator;

import net.runelite.api.coords.Direction;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertSame;

public class SextantCoordinateTest
{
	private final float OBSERVATORY_X = 2440f;
	private final float OBSERVATORY_Y = 3161f;
	private final float minutePerTile = 15f / 8f;

	@Test
	public void observatoryXTest()
	{
		SextantCoordinate x = new SextantCoordinate(OBSERVATORY_X, SextantAxis.HORIZONTAL);

		assertEquals(0, x.getDegrees());
		assertEquals(0f, x.getMinutes(), 0f);
		assertSame(x.getDirection(), Direction.EAST);
	}

	@Test
	public void observatoryYTest()
	{
		SextantCoordinate y = new SextantCoordinate(OBSERVATORY_Y, SextantAxis.VERTICAL);

		assertEquals(0, y.getDegrees());
		assertEquals(0f, y.getMinutes(), 0f);
		assertSame(y.getDirection(), Direction.NORTH);
	}

	@Test
	public void singleStepTest()
	{
		SextantCoordinate coordinate = new SextantCoordinate(OBSERVATORY_X + 1f, SextantAxis.HORIZONTAL);

		assertEquals(0, coordinate.getDegrees());
		assertEquals(1.875f, coordinate.getMinutes(), 0f);
		assertSame(coordinate.getDirection(), Direction.EAST);
	}

	@Test
	public void sixtyMinutesTest()
	{
		SextantCoordinate coordinate = new SextantCoordinate(OBSERVATORY_X + 60 / minutePerTile, SextantAxis.HORIZONTAL);

		assertEquals(1, coordinate.getDegrees());
		assertEquals(0f, coordinate.getMinutes(), 0f);
		assertSame(coordinate.getDirection(), Direction.EAST);
	}

	@Test
	public void ninetyMinutesTest()
	{
		SextantCoordinate coordinate = new SextantCoordinate(OBSERVATORY_X + 90 / minutePerTile, SextantAxis.HORIZONTAL);

		assertEquals(1, coordinate.getDegrees());
		assertEquals(30f, coordinate.getMinutes(), 0f);
		assertSame(coordinate.getDirection(), Direction.EAST);
	}

	@Test
	public void positiveCoordinatesRoundingTest()
	{
		SextantCoordinate coordinate;

		// Good...
		coordinate = new SextantCoordinate(3069f, SextantAxis.HORIZONTAL);

		assertEquals(19, coordinate.getDegrees());
		assertEquals(39f, coordinate.getMinutesInteger(), 0f);
		assertSame(coordinate.getDirection(), Direction.EAST);

		coordinate = new SextantCoordinate(3225f, SextantAxis.HORIZONTAL);

		assertEquals(24, coordinate.getDegrees());
		assertEquals(31f, coordinate.getMinutesInteger(), 0f);
		assertSame(coordinate.getDirection(), Direction.EAST);

		coordinate = new SextantCoordinate(3178f, SextantAxis.HORIZONTAL);

		assertEquals(23, coordinate.getDegrees());
		assertEquals(3f, coordinate.getMinutesInteger(), 0f);
		assertSame(coordinate.getDirection(), Direction.EAST);

		// ... luck
		coordinate = new SextantCoordinate(3517f, SextantAxis.VERTICAL);

		assertEquals(11, coordinate.getDegrees());
		assertEquals(7f, coordinate.getMinutesInteger(), 0f);
		assertSame(coordinate.getDirection(), Direction.NORTH);

		coordinate = new SextantCoordinate(3219f, SextantAxis.VERTICAL);

		assertEquals(1, coordinate.getDegrees());
		assertEquals(48f, coordinate.getMinutesInteger(), 0f);
		assertSame(coordinate.getDirection(), Direction.NORTH);

		coordinate = new SextantCoordinate(3475f, SextantAxis.VERTICAL);

		assertEquals(9, coordinate.getDegrees());
		assertEquals(48f, coordinate.getMinutesInteger(), 0f);
		assertSame(coordinate.getDirection(), Direction.NORTH);
	}

	@Test
	public void negativeCoordinatesRoundingTest()
	{
		SextantCoordinate coordinate;

		coordinate = new SextantCoordinate(2210f, SextantAxis.HORIZONTAL);

		assertEquals(7f, coordinate.getDegrees(), 0f);
		assertEquals(11f, coordinate.getMinutesInteger(), 0f);
		assertSame(coordinate.getDirection(), Direction.WEST);

		coordinate = new SextantCoordinate(2152f, SextantAxis.HORIZONTAL);

		assertEquals(9f, coordinate.getDegrees(), 0f);
		assertEquals(0f, coordinate.getMinutesInteger(), 0f);
		assertSame(coordinate.getDirection(), Direction.WEST);

		coordinate = new SextantCoordinate(2377f, SextantAxis.HORIZONTAL);

		assertEquals(1f, coordinate.getDegrees(), 0f);
		assertEquals(58f, coordinate.getMinutesInteger(), 0f);
		assertSame(coordinate.getDirection(), Direction.WEST);

		coordinate = new SextantCoordinate(2855f, SextantAxis.VERTICAL);

		assertEquals(9f, coordinate.getDegrees(), 0f);
		assertEquals(33f, coordinate.getMinutesInteger(), 0f);
		assertSame(coordinate.getDirection(), Direction.SOUTH);

		coordinate = new SextantCoordinate(3072f, SextantAxis.VERTICAL);

		assertEquals(2f, coordinate.getDegrees(), 0f);
		assertEquals(46f, coordinate.getMinutesInteger(), 0f);
		assertSame(coordinate.getDirection(), Direction.SOUTH);

		coordinate = new SextantCoordinate(3036f, SextantAxis.VERTICAL);

		assertEquals(3f, coordinate.getDegrees(), 0f);
		assertEquals(54f, coordinate.getMinutesInteger(), 0f);
		assertSame(coordinate.getDirection(), Direction.SOUTH);
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.sextantlocator;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SextantLocatorTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(SextantLocatorPlugin.class);
		RuneLite.main(args);
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.sextantlocator;

public class SextantPoint
{
	private SextantCoordinate x;
	private SextantCoordinate y;

	public SextantPoint(SextantCoordinate x, SextantCoordinate y)
	{
		if (x == null)
		{
			this.x = new SextantCoordinate(0, SextantAxis.HORIZONTAL);
		}
		else
		{
			this.x = x;
		}

		if (y == null)
		{
			this.y = new SextantCoordinate(0, SextantAxis.VERTICAL);
		}
		else
		{
			this.y = y;
		}
	}

	public SextantPoint(float worldX, float worldY)
	{
		x = new SextantCoordinate(worldX, SextantAxis.HORIZONTAL);
		y = new SextantCoordinate(worldY, SextantAxis.VERTICAL);
	}

	public void setXCoordinate(SextantCoordinate newX)
	{
		if (newX == null)
		{
			this.x = new SextantCoordinate(0, SextantAxis.HORIZONTAL);
		}
		else
		{
			this.x = newX;
		}
	}

	public void setYCoordinate(SextantCoordinate newY)
	{
		if (newY == null)
		{
			this.y = new SextantCoordinate(0, SextantAxis.VERTICAL);
		}
		else
		{
			this.y = newY;
		}
	}

	public SextantCoordinate getXCoordinate()
	{
		return x;
	}

	public SextantCoordinate getYCoordinate()
	{
		return y;
	}

	@Override
	public String toString()
	{
		if (x == null || y == null)
		{
			return "";
		}

		return y + " | " + x;
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.sextantlocator;

import com.google.inject.Provides;
import com.sextantlocator.ui.CoordinatesMapOverlay;
import com.sextantlocator.ui.CoordinatesOverlay;
import com.sextantlocator.ui.CoordinatesTooltipOverlay;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Sextant Locator",
	description = "Sextant's coordinates helper.",
	tags = {
		"sextant",
		"coordinates",
		"world",
		"location",
		"locator",
		"clues"
	}
)
public class SextantLocatorPlugin extends Plugin
{
	@Inject
	private SextantLocatorConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	CoordinatesOverlay coordinatesOverlay;

	@Inject
	CoordinatesTooltipOverlay coordinatesTooltipOverlay;

	@Inject
	CoordinatesMapOverlay coordinatesMapOverlay;

	@Provides
	SextantLocatorConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(SextantLocatorConfig.class);
	}

	@Override
	protected void startUp()
	{
		addOverlays();
	}

	@Override
	protected void shutDown()
	{
		removeOverlays();
	}

	private void addOverlays()
	{
		overlayManager.add(coordinatesOverlay);
		overlayManager.add(coordinatesTooltipOverlay);
		overlayManager.add(coordinatesMapOverlay);
	}

	private void removeOverlays()
	{
		overlayManager.remove(coordinatesOverlay);
		overlayManager.remove(coordinatesTooltipOverlay);
		overlayManager.remove(coordinatesMapOverlay);
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.sextantlocator;

public enum SextantAxis
{
	HORIZONTAL,
	VERTICAL
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.sextantlocator;

import net.runelite.api.coords.Direction;

import static java.lang.Math.abs;

public class SextantCoordinate
{
	private final float minutes;
	private final SextantAxis axis;

	private final float OBSERVATORY_X = 2440f;
	private final float OBSERVATORY_Y = 3161f;
	private final float MINUTES_PER_TILE = 15f / 8f;

	public SextantCoordinate(float degrees, float minutes, Direction direction)
	{
		if (direction == Direction.NORTH || direction == Direction.SOUTH)
		{
			axis = SextantAxis.VERTICAL;
		}
		else
		{
			axis = SextantAxis.HORIZONTAL;
		}

		this.minutes = degrees * 60 + minutes;
	}

	public SextantCoordinate(float worldCoordinate, SextantAxis axis)
	{
		this.axis = axis;
		this.minutes = worldCoordinateToMinutes(worldCoordinate, axis);
	}

	public int getDegrees()
	{
		return (int) abs(minutes / 60);
	}

	public float getMinutes()
	{
		return abs(minutes % 60);
	}

	public int getMinutesInteger()
	{
		return (int) abs(minutes % 60);
	}

	public Direction getDirection()
	{
		if (minutes >= 0)
		{
			if (axis == SextantAxis.HORIZONTAL)
			{
				return Direction.EAST;
			}

			return Direction.NORTH;
		}

		if (axis == SextantAxis.HORIZONTAL)
		{
			return Direction.WEST;
		}

		return Direction.SOUTH;
	}

	private float worldCoordinateToMinutes(float worldCoordinate, SextantAxis axis)
	{
		if (axis == SextantAxis.HORIZONTAL)
		{
			worldCoordinate -= OBSERVATORY_X;
		}
		else
		{
			worldCoordinate -= OBSERVATORY_Y;
		}

		return worldCoordinate * MINUTES_PER_TILE;
	}

	@Override
	public String toString()
	{
		return getDegrees() + " deg. " + getMinutesInteger() + " min. " + getDirection().toString().charAt(0);
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.sextantlocator.ui;

import com.sextantlocator.SextantLocatorConfig;
import com.sextantlocator.SextantPoint;
import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

public class CoordinatesOverlay extends OverlayPanel
{
	private final Client client;
	private final SextantLocatorConfig sextantLocatorConfig;

	@Inject
	public CoordinatesOverlay(Client client, SextantLocatorConfig sextantLocatorConfig)
	{
		this.client = client;
		this.sextantLocatorConfig = sextantLocatorConfig;

		setPosition(OverlayPosition.TOP_LEFT);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (!sextantLocatorConfig.displayCoordinatesOverlay())
		{
			return null;
		}

		addOverlayComponents();

		return super.render(graphics);
	}

	private void addOverlayComponents()
	{
		if (client.getLocalPlayer() == null)
		{
			return;
		}

		int playerX = client.getLocalPlayer().getWorldLocation().getX();
		int playerY = client.getLocalPlayer().getWorldLocation().getY();
		SextantPoint playerSextantPoint = new SextantPoint(playerX, playerY);

		LineComponent titleLine = LineComponent.builder().left("Sextant coordinates:").build();
		LineComponent xCoordinateLine = LineComponent.builder().right(playerSextantPoint.getXCoordinate().toString()).build();
		LineComponent yCoordinateLine = LineComponent.builder().right(playerSextantPoint.getYCoordinate().toString()).build();

		panelComponent.getChildren().add(titleLine);
		panelComponent.getChildren().add(yCoordinateLine);
		panelComponent.getChildren().add(xCoordinateLine);
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.sextantlocator.ui;

import com.sextantlocator.SextantLocatorConfig;
import com.sextantlocator.SextantPoint;
import java.awt.BasicStroke;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Polygon;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Tile;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;

public class CoordinatesTooltipOverlay extends Overlay
{
	private final Client client;
	private final SextantLocatorConfig sextantLocatorConfig;
	private final TooltipManager tooltipManager;

	@Inject
	public CoordinatesTooltipOverlay(Client client, SextantLocatorConfig sextantLocatorConfig, TooltipManager tooltipManager)
	{
		this.client = client;
		this.sextantLocatorConfig = sextantLocatorConfig;
		this.tooltipManager = tooltipManager;

		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_SCENE);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (!sextantLocatorConfig.displayTileCoordinatesOverlay())
		{
			return null;
		}

		addTooltip();
		renderSelectedTile(graphics);

		return null;
	}

	private void addTooltip()
	{
		Tile selectedTile = client.getSelectedSceneTile();

		if (selectedTile == null || selectedTile.getWorldLocation() == null)
		{
			return;
		}

		int selectedTileX = selectedTile.getWorldLocation().getX();
		int selectedTileY = selectedTile.getWorldLocation().getY();
		SextantPoint selectedTileSextantCoordinates;

		selectedTileSextantCoordinates = new SextantPoint(selectedTileX, selectedTileY);

		tooltipManager.add(new Tooltip(selectedTileSextantCoordinates.toString()));
	}

	private void renderSelectedTile(Graphics2D graphics)
	{
		Tile selectedTile = client.getSelectedSceneTile();

		if (selectedTile == null || selectedTile.getLocalLocation() == null)
		{
			return;
		}

		final Polygon selectedTilePolygon = Perspective.getCanvasTilePoly(client, selectedTile.getLocalLocation());

		if (selectedTilePolygon == null)
		{
			return;
		}

		OverlayUtil.renderPolygon(graphics, selectedTilePolygon, sextantLocatorConfig.selectedTileBorderColor(), sextantLocatorConfig.selectedTileFillColor(), new BasicStroke(sextantLocatorConfig.selectedTileBorderWidth()));
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.sextantlocator.ui;

import com.sextantlocator.SextantLocatorConfig;
import com.sextantlocator.SextantPoint;
import java.awt.Dimension;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.api.RenderOverview;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetID;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.worldmap.WorldMapOverlay;

public class CoordinatesMapOverlay extends Overlay
{
	private final int TEXT_MARGIN = 5;

	private final Client client;
	private final WorldMapOverlay worldMapOverlay;
	private final SextantLocatorConfig sextantLocatorConfig;

	@Inject
	public CoordinatesMapOverlay(Client client, WorldMapOverlay worldMapOverlay, SextantLocatorConfig sextantLocatorConfig)
	{
		this.client = client;
		this.worldMapOverlay = worldMapOverlay;
		this.sextantLocatorConfig = sextantLocatorConfig;

		setPosition(OverlayPosition.DYNAMIC);
		setPriority(OverlayPriority.HIGH);
		setLayer(OverlayLayer.MANUAL);
		drawAfterInterface(WidgetID.WORLD_MAP_GROUP_ID);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (!sextantLocatorConfig.displayMapCoordinatesOverlay())
		{
			return null;
		}

		RenderOverview renderOverview = client.getRenderOverview();
		Widget worldMapWidget = client.getWidget(WidgetInfo.WORLD_MAP_VIEW);

		if (renderOverview == null || worldMapWidget == null)
		{
			return null;
		}

		WorldPoint mapCenterPoint = new WorldPoint(renderOverview.getWorldMapPosition().getX(), renderOverview.getWorldMapPosition().getY(), 0);
		Rectangle worldMapBounds = worldMapWidget.getBounds();

		renderCrosshair(graphics, mapCenterPoint, worldMapBounds);

		SextantPoint mapCenterSextantPoint = new SextantPoint(mapCenterPoint.getX(), mapCenterPoint.getY());

		renderCoordinates(graphics, mapCenterSextantPoint, worldMapBounds);

		return null;
	}

	private void renderCrosshair(Graphics graphics, WorldPoint mapCenterPoint, Rectangle worldMapBounds)
	{
		Point middle = worldMapOverlay.mapWorldPointToGraphicsPoint(mapCenterPoint);

		if (middle == null)
		{
			return;
		}

		graphics.setClip(worldMapBounds);
		graphics.setColor(sextantLocatorConfig.coordinateMapOverlayCrosshairColor());
		graphics.drawLine(middle.getX(), worldMapBounds.y, middle.getX(), worldMapBounds.y + worldMapBounds.height);
		graphics.drawLine(worldMapBounds.x, middle.getY(), worldMapBounds.x + worldMapBounds.width, middle.getY());
	}

	private void renderCoordinates(Graphics graphics, SextantPoint mapCenterSextantPoint, Rectangle worldMapBounds)
	{
		String output = mapCenterSextantPoint.toString();
		FontMetrics fontMetrics = graphics.getFontMetrics();
		int textHeight = fontMetrics.getHeight();
		int textWidth = fontMetrics.stringWidth(output);
		int textX = (int) worldMapBounds.getX() + TEXT_MARGIN;
		int textY = (int) worldMapBounds.getY() + TEXT_MARGIN + textHeight;

		int rectangleX = (int) worldMapBounds.getX();
		int rectangleY = (int) worldMapBounds.getY();
		int rectangleWidth = textWidth + TEXT_MARGIN * 2;
		int rectangleHeight = textHeight + TEXT_MARGIN * 2;

		graphics.setColor(sextantLocatorConfig.coordinateMapOverlayBackgroundColor());
		graphics.fillRect(rectangleX, rectangleY, rectangleWidth, rectangleHeight);

		graphics.setColor(sextantLocatorConfig.coordinateMapOverlayTextColor());
		graphics.drawString(output, textX, textY);
	}
}

/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Miguel Sousa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.sextantlocator;

import java.awt.Color;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;

@ConfigGroup("sextantlocator")
public interface SextantLocatorConfig extends Config
{
	@ConfigSection(
		position = 0,
		name = "Coordinates Overlay",
		description = "Settings for the coordinates overlay."
	)
	String coordinatesOverlaySection = "coordinatesOverlaySection";

	@ConfigItem(
		position = 1,
		keyName = "displayCoordinatesOverlay",
		name = "Coordinates overlay",
		description = "Display the coordinates overlay.",
		section = coordinatesOverlaySection
	)
	default boolean displayCoordinatesOverlay()
	{
		return true;
	}



	@ConfigSection(
		position = 2,
		name = "Tile Tooltip",
		description = "Settings for the coordinates tile tooltip."
	)
	String tileCoordinatesOverlaySection = "tileCoordinatesOverlaySection";

	@ConfigItem(
		position = 3,
		keyName = "displayTileCoordinatesOverlay",
		name = "Tile tooltip",
		description = "Display the coordinates tooltip of the tile hovered tile.",
		section = tileCoordinatesOverlaySection
	)
	default boolean displayTileCoordinatesOverlay()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
		position = 4,
		keyName = "selectedTileFillColor",
		name = "Tile color",
		description = "Color of the tile fill.",
		section = tileCoordinatesOverlaySection
	)
	default Color selectedTileFillColor()
	{
		return new Color(0, 0, 0, 64);
	}

	@Alpha
	@ConfigItem(
		position = 5,
		keyName = "selectedTileBorderColor",
		name = "Border color",
		description = "Color of the tile border.",
		section = tileCoordinatesOverlaySection
	)
	default Color selectedTileBorderColor()
	{
		return Color.YELLOW;
	}

	@Range(
		min = 1
	)
	@ConfigItem(
		position = 6,
		keyName = "selectedTileBorderWidth",
		name = "Border width",
		description = "Width of the tile border.",
		section = tileCoordinatesOverlaySection
	)
	default int selectedTileBorderWidth()
	{
		return 2;
	}



	@ConfigSection(
		position = 7,
		name = "Map Overlay",
		description = "Settings for the map coordinates overlay."
	)
	String mapCoordinatesOverlaySection = "mapCoordinatesOverlaySection";

	@ConfigItem(
		position = 8,
		keyName = "displayMapCoordinatesOverlay",
		name = "Map coordinates",
		description = "Display the sextant coordinates overlay in the map window.",
		section = mapCoordinatesOverlaySection
	)
	default boolean displayMapCoordinatesOverlay()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
		position = 9,
		keyName = "coordinateMapOverlayBackgroundColor",
		name = "Background color",
		description = "Color of the background of the map overlay.",
		section = mapCoordinatesOverlaySection
	)
	default Color coordinateMapOverlayBackgroundColor()
	{
		return Color.BLACK;
	}

	@Alpha
	@ConfigItem(
		position = 10,
		keyName = "coordinateMapOverlayTextColor",
		name = "Text color",
		description = "Color of the text of the map overlay.",
		section = mapCoordinatesOverlaySection
	)
	default Color coordinateMapOverlayTextColor()
	{
		return Color.WHITE;
	}

	@Alpha
	@ConfigItem(
		position = 11,
		keyName = "coordinateMapOverlayCrosshairColor",
		name = "Crosshair color",
		description = "Color of the crosshair of the map overlay.",
		section = mapCoordinatesOverlaySection
	)
	default Color coordinateMapOverlayCrosshairColor()
	{
		return Color.WHITE;
	}
}

