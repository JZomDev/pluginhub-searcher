package com.pinggraph;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PingGraphPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PingGraphPlugin.class);
		RuneLite.main(args);
	}
}

package com.pinggraph;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

import java.awt.Color;

import lombok.AllArgsConstructor;

@ConfigGroup("pinggraph")
public interface PingGraphConfig extends Config {

    @ConfigSection(
            name = "Font Settings",
            description = "Font Settings",
            position = 98
    )
    String fontSection = "fontSection";

    @ConfigSection(
            name = "Warning Settings",
            description = "Change the colors of the overlay when lagging",
            position = 99
    )
    String warnSection = "warnSection";


    @Alpha
    @ConfigItem(
            position = 0,
            keyName = "graphTextColor",
            name = "Graph Text Color",
            description = "The color of the text"
    )
    default Color graphTextColor() {
        return new Color(255, 255, 24, 255);
    }



    @Alpha
    @ConfigItem(
            position = 1,
            keyName = "graphLineColor",
            name = "Graph Line Color",
            description = "The color of the graph line"
    )
    default Color graphLineColor() {
        return new Color(255, 255, 0, 255);
    }



    @Alpha
    @ConfigItem(
            position = 2,
            keyName = "OverlayBackgroundColor",
            name = "Overlay Background Color",
            description = "The background color of the overlay"
    )
    default Color overlayBackgroundColor() {
        return new Color(0, 0, 0, 100);
    }



    @Alpha
    @ConfigItem(
            position = 3,
            keyName = "OverlayBorderColor",
            name = "Overlay Border Color",
            description = "The border color of the overlay"
    )
    default Color overlayBorderColor() {
        return new Color(0, 0, 0, 70);
    }



    @Alpha
    @ConfigItem(
            position = 4,
            keyName = "graphBackgroundColor",
            name = "Graph Background Color",
            description = "The background color of the graph"
    )
    default Color graphBackgroundColor() {
        return new Color(0, 0, 0, 120);
    }



    @Alpha
    @ConfigItem(
            position = 5,
            keyName = "graphBorderColor",
            name = "Graph Border Color",
            description = "The border color of the graph"
    )
    default Color graphBorderColor() {
        return new Color(0, 0, 0, 70);
    }



    @ConfigItem(
            position = 6,
            keyName = "toggleLineOnly",
            name = "Hide Labels",
            description = "Changes the plugin to only show a line"
    )
    default boolean toggleLineOnly() {
        return false;
    }



    @ConfigItem(
            position = 7,
            keyName = "toggleBehind",
            name = "Hide Behind Interfaces",
            description = "Hides graph behind interfaces i.e bank and map"
    )
    default boolean toggleBehind() {
        return false;
    }



    @ConfigItem(
            position = 8,
            keyName = "toggleMaxMin",
            name = "Scale Between Max and Min Ping",
            description = "Only show range between max and min ping"
    )
    default boolean toggleRange() {
        return false;
    }



    @ConfigItem(
            position = 9,
            keyName = "hideMargin",
            name = "Hide Bottom and Side Margins",
            description = "Removes the margins that surround the graph"
    )
    default boolean hideMargin() {
        return false;
    }



    @ConfigItem(
            position = 10,
            keyName = "graphTicks",
            name = "Graph Game Ticks",
            description = "Changes the graph to show game ticks(normally around 600ms)"
    )
    default boolean graphTicks() {
        return false;
    }



    @ConfigItem(
            position = 10,
            keyName = "hideGraph",
            name = "Hide Graph",
            description = "Hides the Graph leaving only labels"
    )
    default boolean hideGraph() {
        return false;
    }



    @ConfigItem(
            position = 11,
            keyName = "leftLabel",
            name = "Left Label",
            description = "Default: \"Current Latency\"",
            section = fontSection
    )
    default Labels leftLabel() {
        return Labels.LATENCY;
    }



    @ConfigItem(
            position = 12,
            keyName = "rightLabel",
            name = "Right Label",
            description = "Default: \"Max Ping Value\"",
            section = fontSection
    )
    default Labels rightLabel() {
        return Labels.PINGMAX;
    }



    @ConfigItem(
            position = 13,
            keyName = "fontName",
            name = "Font Name",
            description = "Default: \"Runescape Small\"",
            section = fontSection
    )
    default String fontName() {
        return "Runescape Small";
    }



    @ConfigItem(
            position = 14,
            keyName = "fontSize",
            name = "Font Size",
            description = "Default: 16",
            section = fontSection
    )
    default int fontSize() {
        return 16;
    }



    @ConfigItem(
            position = 15,
            keyName = "fontStyle",
            name = "Font Style",
            description = "Default: Regular",
            section = fontSection
    )
    default FontStyle fontStyle() {
        return FontStyle.REGULAR;
    }



    enum FontStyle {
        REGULAR(0),
        BOLD(1),
        ITALICS(2);

        private final int value;

        FontStyle(int value) {
            this.value = value;
        }

        public int getValue() {
            return value;
        }
    }



    @AllArgsConstructor
    enum Labels {
        PING("Current Ping"),
        LATENCY("Current Latency"),
        PINGMAX("Max Ping Value"),
        PINGMIN("Min Ping Value"),
        TICK("Current tick"),
        TICKMAX("Max Tick Value"),
        TICKMIN("Min Tick Value"),
        NONE("Blank");


        private final String name;

        @Override
        public String toString() {
            return name;
        }
    }



    @ConfigItem(
            position = 16,
            keyName = "warnPingVal",
            name = "Ping Threshold (ms)",
            description = "Warns you when the ping exceeds this threshold",
            section = warnSection
    )
    default int warnPingVal() {
        return 100;
    }



    @ConfigItem(
            position = 17,
            keyName = "warnTickVal",
            name = "Tick Threshold (ms)",
            description = "Warns you when the tick exceeds this threshold",
            section = warnSection
    )
    default int warnTickVal() {
        return 800;
    }



    @ConfigItem(
            position = 18,
            keyName = "warningFontToggle",
            name = "Swap Font Color on Warning",
            description = "Change the fonts color when the warning value is too high",
            section = warnSection
    )
    default boolean warningFontToggle() {
        return false;
    }



    @ConfigItem(
            position = 19,
            keyName = "warningGraphBGToggle",
            name = "Swap Graph BG Color on Warning",
            description = "Change the Graph background color when the warning value is too high",
            section = warnSection
    )
    default boolean warningGraphBGToggle() {
        return false;
    }



    @ConfigItem(
            position = 20,
            keyName = "warningBGToggle",
            name = "Swap Overlay BG Color on Warning",
            description = "Change the Overlays background color when the warning value is too high",
            section = warnSection
    )
    default boolean warningBGToggle() {
        return false;
    }



    @ConfigItem(
            position = 21,
            keyName = "warnMaxToggle",
            name = "Persisting Warning",
            description = "The warning will persist until the all displayed values are below the warning values",
            section = warnSection
    )
    default boolean warnMaxToggle() {
        return false;
    }



    @Alpha
    @ConfigItem(
            position = 22,
            keyName = "warningBGColor",
            name = "BG Warning Color",
            description = "The color the Overlays background will change to while exceeding the threshold",
            section = warnSection
    )
    default Color warningBGColor() {
        return new Color(255, 30, 30, 64);
    }



    @Alpha
    @ConfigItem(
            position = 23,
            keyName = "warningGraphBGColor",
            name = "Graph BG Warning Color",
            description = "The color the Graph Background will change to while exceeding the threshold",
            section = warnSection
    )
    default Color warningGraphBGColor() {
        return new Color(255, 30, 30, 64);
    }



    @Alpha
    @ConfigItem(
            position = 24,
            keyName = "warningFontColor",
            name = "Text Warning Color",
            description = "The color text will change to while exceeding the threshold",
            section = warnSection
    )
    default Color warningFontColor() {
        return new Color(255, 30, 30, 255);
    }

}

package com.pinggraph;

import com.google.inject.Provides;

import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.ClientTick;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.WorldService;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.worldhopper.ping.Ping;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.http.api.worlds.World;
import net.runelite.http.api.worlds.WorldResult;

import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.function.Supplier;

import javax.inject.Inject;

import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@PluginDescriptor(
    name = "Ping Grapher"
)
public class PingGraphPlugin extends Plugin {
    private final int numCells = 100;
    @Getter
    private final ReadWriteLock pingLock = new ReentrantReadWriteLock();
    @Getter
    private final ReadWriteLock tickLock = new ReentrantReadWriteLock();
    @Getter
    private final LinkedList<Integer> pingList = new LinkedList<>();
    @Getter
    private final LinkedList<Integer> tickTimeList = new LinkedList<>();
    @Inject
    private Client client;
    @Inject
    private PingGraphConfig config;
    @Inject
    private WorldService worldService;
    @Inject
    private OverlayManager overlayManager;
    @Inject
    private PingGraphOverlay pingGraphOverlay;
    private ScheduledFuture<?> currPingFuture;
    @Getter
    private volatile int currentPing = 1;
    @Getter
    private volatile int maxPing = -1;
    @Getter
    private volatile int minPing = Integer.MAX_VALUE;
    @Getter
    private volatile int currentTick = 600;
    @Getter
    private volatile int maxTick = -1;
    @Getter
    private volatile int minTick = Integer.MAX_VALUE;
    @Getter
    private boolean isLagging;
    private long lastTickTime;
    @Setter
    private volatile int graphStart;
    @Inject
    private ScheduledExecutorService pingExecutorService;

    @Override
    protected void startUp() throws Exception {
        write(pingLock, () -> {
            pingList.clear();
            for (int i = 0; i < numCells; i++) pingList.add(1);
            return null;
        });

        write(tickLock, () -> {
            tickTimeList.clear();
            for (int i = 0; i < numCells; i++) tickTimeList.add(600);
            return null;
        });

        log.info("Ping Graph started!");
        overlayManager.add(pingGraphOverlay);
        currPingFuture = pingExecutorService.scheduleWithFixedDelay(this::pingCurrentWorld, 1000, 1000, TimeUnit.MILLISECONDS);
    }

    @Override
    protected void shutDown() throws Exception {
        currPingFuture.cancel(true);
        currPingFuture = null;
        overlayManager.remove(pingGraphOverlay);
        write(pingLock, () -> {
            pingList.clear();
            return null;
        });
        write(tickLock, () -> {
            tickTimeList.clear();
            return null;
        });
        log.info("Ping Graph stopped!");
    }

    @Provides
    PingGraphConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(PingGraphConfig.class);
    }

    @Subscribe
    public void onGameTick(GameTick tick) {
        long tickTime = new Date().getTime();
        int tickDiff = (int) (tickTime - lastTickTime);
        currentTick = tickDiff;
        write(tickLock, () -> {
            if (tickDiff < 10000) { // should be enough to hide initial tick on startup
                tickTimeList.add(tickDiff);
            } else {
                tickTimeList.add(600);
            }
            return tickTimeList.remove();
        });
        lastTickTime = new Date().getTime();
    }

    @Subscribe
    public void onClientTick(ClientTick tick) {
        long now = new Date().getTime();
        isLagging = (now - lastTickTime) > 700;

        //update Max min values
        int[] temp = read(tickLock, () -> getMaxMinFromList(tickTimeList, graphStart));
        maxTick = temp[0];
        minTick = temp[1];

        temp = read(pingLock, () -> getMaxMinFromList(pingList, graphStart));
        maxPing = temp[0];
        minPing = temp[1];
    }

    // Code used from runelites worldhopper
    private void pingCurrentWorld() {
        WorldResult worldResult = worldService.getWorlds();
        // There is no reason to ping the current world if not logged in, as the overlay doesn't draw
        if (worldResult == null || client.getGameState() != GameState.LOGGED_IN) return;
        final World currentWorld = worldResult.findWorld(client.getWorld());
        if (currentWorld == null) return;

        currentPing = Ping.ping(currentWorld);

        write(pingLock, () -> {
            pingList.add(currentPing);
            return pingList.remove(); // remove the first ping
        });

        if (!config.graphTicks()) {
            int[] temp = read(pingLock, () -> getMaxMinFromList(pingList, graphStart));
            maxPing = temp[0];
            minPing = temp[1];
        }
    }

    private static int[] getMaxMinFromList(List<Integer> list, int start) {
        int maxVal = -1;
        int minVal = Integer.MAX_VALUE;

        for (int i = start; i < list.size(); i++) {
            int val = list.get(i);
            if (val > 0) {
                if (maxVal < val)
                    maxVal = val;
                if (minVal > val)
                    minVal = val;
            }
        }
        return new int[] { maxVal, minVal };
    }

    public static <T> T read(ReadWriteLock lock, Supplier<T> supplier) {
        return supplyLocked(lock.readLock(), supplier);
    }

    public static <T> T write(ReadWriteLock lock, Supplier<T> supplier) {
        return supplyLocked(lock.writeLock(), supplier);
    }

    private static <T> T supplyLocked(Lock lock, Supplier<T> supplier) {
        lock.lock();
        try {
            return supplier.get();
        } finally {
            lock.unlock();
        }
    }
}

package com.pinggraph;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LayoutableRenderableEntity;


import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.util.LinkedList;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;

import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class PingGraphOverlay extends OverlayPanel {

    private final Client client;
    private final PingGraphPlugin pingGraphPlugin;
    private final PingGraphConfig pingGraphConfig;

    public int marginGraphHeight;
    public int marginGraphWidth = 10;
    LayoutableRenderableEntity graphEntity = new LayoutableRenderableEntity() {
        @Override
        public Dimension render(Graphics2D graphics) {
            graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);

            int tempPing  = pingGraphPlugin.getCurrentPing();
            int tempTick  = pingGraphPlugin.getCurrentTick();
            if(pingGraphConfig.warnMaxToggle()) {
                tempTick  = pingGraphPlugin.getMaxTick();
                tempPing = pingGraphPlugin.getMaxPing();
            }

            boolean warning = (tempPing > pingGraphConfig.warnPingVal() || tempTick > pingGraphConfig.warnTickVal());
            warning = warning || (pingGraphPlugin.getCurrentPing() < 0); //warn if ping timed out

            if (pingGraphConfig.toggleBehind()) {
                setLayer(OverlayLayer.ABOVE_SCENE);
            } else {
                setLayer(OverlayLayer.ABOVE_WIDGETS);
            }

            int overlayWidth, overlayHeight;                // width and height of the entire overlay
            try {
                overlayWidth = getPreferredSize().width;
                overlayHeight = getPreferredSize().height;
            } catch (NullPointerException e) {
                overlayWidth = 180;                         // Default settings for first time
                overlayHeight = 60;
                PingGraphOverlay.this.setPreferredSize(new Dimension(overlayWidth, overlayHeight));
            }

            int width, height;                       // width and height of the graph
            marginGraphHeight = pingGraphConfig.fontSize();
            if (pingGraphConfig.hideMargin()) {
                width = overlayWidth;                       // set graph width to whole plugin width
                height = overlayHeight - marginGraphHeight; // remove the extra height
            } else {
                width = overlayWidth - marginGraphWidth * 2;
                height = overlayHeight - (marginGraphHeight + 15);
            }

            if (pingGraphConfig.hideGraph()) {
                width = 0;
                height = 0;
                overlayHeight = pingGraphConfig.fontSize();
            }

            //background rect
            if (pingGraphConfig.warningBGToggle() && warning) {
                graphics.setColor(pingGraphConfig.warningBGColor());
            } else {
                graphics.setColor(pingGraphConfig.overlayBackgroundColor());
            }
            graphics.fillRect(0, 0, overlayWidth, overlayHeight);

            //outside border
            graphics.setColor(pingGraphConfig.overlayBorderColor());
            graphics.drawRect(0, 0, overlayWidth, overlayHeight);

            if (!pingGraphConfig.toggleLineOnly()) {
                //inside border
                graphics.setColor(pingGraphConfig.graphBorderColor());
                int x = pingGraphConfig.hideMargin() ? 0 : marginGraphWidth - 1;
                graphics.drawRect(x, marginGraphHeight + 1, width, height);


                //inside rect
                if (pingGraphConfig.warningGraphBGToggle() && warning) {
                    graphics.setColor(pingGraphConfig.warningGraphBGColor());
                } else {
                    graphics.setColor(pingGraphConfig.graphBackgroundColor());
                }
                graphics.fillRect(x, marginGraphHeight + 1, width, height);

                //Font Settings
                if (pingGraphConfig.warningFontToggle() && warning){
                    graphics.setColor(pingGraphConfig.warningFontColor());
                } else {
                    graphics.setColor(pingGraphConfig.graphTextColor());
                }
                String fontName = pingGraphConfig.fontName();
                if (pingGraphConfig.fontName().equals("")) {
                    fontName = "Runescape Small";           // Default name if the font name is empty
                }

                Font userFont = new Font(fontName, pingGraphConfig.fontStyle().getValue(), pingGraphConfig.fontSize());

                if (userFont.getFamily().equals("Dialog")) { // Can't find the font, change to default
                    userFont = new Font("Runescape Small", pingGraphConfig.fontStyle().getValue(), pingGraphConfig.fontSize());
                }
                graphics.setFont(userFont);

                String rightLabel = labelText(pingGraphConfig.rightLabel());

                //Right label
                int strWidth = graphics.getFontMetrics().stringWidth(rightLabel);
                graphics.drawString(rightLabel, overlayWidth - strWidth - marginGraphWidth, marginGraphHeight - 1);

                //Left label
                String leftLabel = labelText(pingGraphConfig.leftLabel());
                graphics.drawString(leftLabel, marginGraphWidth, marginGraphHeight - 1);
            } else {
                width = overlayWidth;
                height = overlayHeight;
            }

            LinkedList<Integer> data;
            ReadWriteLock lock;
            if (pingGraphConfig.graphTicks()) {
                data = pingGraphPlugin.getTickTimeList();
                lock = pingGraphPlugin.getTickLock();
            } else {
                data = pingGraphPlugin.getPingList();
                lock = pingGraphPlugin.getPingLock();
            }

            int dataSize = PingGraphPlugin.read(lock, data::size);
            int dataStart = (dataSize > overlayWidth) ? (dataSize - overlayWidth) : 0;
            pingGraphPlugin.setGraphStart(dataStart);

            int maxValue;
            int minValue;
            if (pingGraphConfig.graphTicks()) {
                maxValue = pingGraphPlugin.getMaxTick();
                minValue = pingGraphPlugin.getMinTick();
            } else {
                maxValue = pingGraphPlugin.getMaxPing();
                minValue = pingGraphPlugin.getMinPing();
            }


            // change maxPing to 100, prevents div by 0 in-case of error
            if (maxValue <= 0) {
                maxValue = 100;
            }
            //if checked the graph will scale between min and max ping
            int tempMax = maxValue;
            if (!pingGraphConfig.toggleRange()) {

                double round = maxValue > 50 ? 50 : 10; // round up to nearest 50ms if > 50 else 10ms
                maxValue = (int) (Math.ceil((double) tempMax / round) * round);

                if ((maxValue - tempMax) <= (0.2 * maxValue)) {
                    maxValue += round; // increase the max value to move the graph away from the top
                }
            }

            if (maxValue == minValue) {
                maxValue++;
                minValue--;
            }
            if (!pingGraphConfig.hideGraph()) {
                Lock l = lock.readLock();
                l.lock();
                try {
                    //drawing line graph
                    drawGraph(graphics, dataStart, data, height, width, maxValue, minValue);
                } finally {
                    l.unlock();
                }
            }
            return new Dimension(overlayWidth - 8, overlayHeight - 8);
        }

        @Override
        public Rectangle getBounds() {
            return new Rectangle(getPreferredSize().width, getPreferredSize().height);
        }

        @Override
        public void setPreferredLocation(java.awt.Point position) {
        }

        @Override
        public void setPreferredSize(Dimension dimension) {
        }
    };

    @Inject
    private PingGraphOverlay(Client client, PingGraphPlugin pingGraphPlugin, PingGraphConfig pingGraphConfig) {
        this.client = client;
        this.pingGraphPlugin = pingGraphPlugin;
        this.pingGraphConfig = pingGraphConfig;
        if (getPreferredSize() == null) {
            PingGraphOverlay.this.setPreferredSize(new Dimension(180, 60));
        }
        setPosition(OverlayPosition.TOP_LEFT);
        setMinimumSize(15);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        panelComponent.render(graphics);
        panelComponent.getChildren().add(graphEntity);
        panelComponent.setBackgroundColor(new Color(0, 0, 0, 0));
        return super.render(graphics);
    }

    // returns a string based on user settings
    private String labelText(PingGraphConfig.Labels setting) {
        String tempLabel = "Label Error";
        switch (setting) {
            case LATENCY:
                tempLabel = "Latency:" + pingGraphPlugin.getCurrentPing() + "ms";
                if (pingGraphPlugin.getCurrentPing() < 0)
                    tempLabel = "Timed out";
                break;
            case PING:
                tempLabel = "Ping:" + pingGraphPlugin.getCurrentPing() + "ms";
                if (pingGraphPlugin.getCurrentPing() < 0)
                    tempLabel = "Timed out";
                break;
            case PINGMAX:
                tempLabel = "Max(P):" + pingGraphPlugin.getMaxPing() + "ms";
                break;
            case PINGMIN:
                tempLabel = "Min(P):" + pingGraphPlugin.getMinPing() + "ms";
                break;
            case TICK:
                tempLabel = "Tick:" + pingGraphPlugin.getCurrentTick() + "ms";
                break;
            case TICKMAX:
                tempLabel = "Max(T):" + pingGraphPlugin.getMaxTick() + "ms";
                break;
            case TICKMIN:
                tempLabel = "Min(T):" + pingGraphPlugin.getMinTick() + "ms";
                break;
            case NONE:
                tempLabel = "";
                break;
        }
        return tempLabel;
    }

    private void drawGraph(Graphics2D graphics, int dataStart, LinkedList<Integer> data, int height, int width, int maxValue, int minValue){
        //drawing line graph
        int tempX;
        graphics.setColor(pingGraphConfig.graphLineColor());
        int oldX, oldY = oldX = -1;

        for (int x = dataStart; x < data.size(); x++) {
            int y = data.get(x);

            y = y < 0 ? maxValue - 1 : y; // change a "timed out" to spike rather than drop

            //((limitMax - limitMin) * (valueIn - baseMin) / (baseMax - baseMin)) + limitMin;
            //scale the x and y values to fit to the plugin
            if (pingGraphConfig.toggleRange()) { //limit between min ping and max ping
                y = height - (((height - 2) * (y - minValue)) / (maxValue - minValue) + 1);
            } else {
                y = height - (height * y / maxValue);
            }

            tempX = ((width) * (x - dataStart) / (data.size() - dataStart));

            y += marginGraphHeight;

            if (!pingGraphConfig.hideMargin()) {
                tempX += marginGraphWidth;
            }

            if (pingGraphConfig.toggleLineOnly()) {
                if (!pingGraphConfig.hideMargin())
                    tempX -= marginGraphWidth;
                y -= marginGraphHeight;
            }

            if (y >= 0) {
                graphics.drawLine(tempX, y, tempX, y);
            }
            if (oldX != -1 && y >= 0) {
                graphics.drawLine(oldX, oldY, tempX, y);
            }

            oldX = tempX;
            oldY = y;
        }
    }




}

