package com.specialattacknotifier;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SpecialAttackNotifierTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(SpecialAttackNotifierPlugin.class);
		RuneLite.main(args);
	}
}
package com.specialattacknotifier;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.time.Duration;
import java.time.Instant;

@Slf4j
@PluginDescriptor(
	name = "Special Attack Notifier"
)
public class SpecialAttackNotifierPlugin extends Plugin
{
	private boolean OverlayClearedByTimeout = false;
	private static final int SPEC_REGEN_TICKS = 50;
	private int LastSpecialAttackEnergy = -1;
	private boolean wearingLightbearer;
	private int ticksSinceSpecRegen;
	private int SpecSoonOverlayDisplayedForTicks = 0;
	private boolean SpecialAttackSoonOverlayShowing = false;
	private int SpecOverlayDisplayedForTicks = 0;
	private boolean SpecialAttackOverlayShowing = false;

	@Inject
	private SpecialAttackNotifierOverlay specialAttackOverlay;

	@Inject
	private SpecialAttackNotifierSoonOverlay specialAttackSoonOverlay;

	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private SpecialAttackNotifierConfig config;

	@Override
	protected void shutDown()
	{
		clearSpecOverlay();
		clearSpecSoonOverlay();
	}

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event)
	{
		if (event.getContainerId() != InventoryID.EQUIPMENT.getId())
		{
			return;
		}

		ItemContainer equipment = event.getItemContainer();
		final boolean hasLightbearer = equipment.contains(ItemID.LIGHTBEARER);
		if (hasLightbearer == wearingLightbearer)
		{
			return;
		}

		ticksSinceSpecRegen = Math.max(0, ticksSinceSpecRegen - 25);
		wearingLightbearer = hasLightbearer;
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged varbitChanged){
		if(config.specialAttackAlert()){
			boolean specialAttackValueChanged = false;
			int specialAttackEnergy = client.getVarpValue(VarPlayer.SPECIAL_ATTACK_PERCENT);
			if(LastSpecialAttackEnergy != specialAttackEnergy){
				LastSpecialAttackEnergy = specialAttackEnergy;
				specialAttackValueChanged = true;
			}
			if(specialAttackEnergy >= (config.specialAttackThreshold() * 10) && !SpecialAttackOverlayShowing && specialAttackValueChanged && specialAttackEnergy < (config.specialAttackThreshold() * 10 + 50)){
				notifySpecialAttack();
			}
		}

	}
	@Subscribe
	public void onGameTick(GameTick event)
	{
		int specialAttackEnergy = client.getVarpValue(VarPlayer.SPECIAL_ATTACK_PERCENT);

		if(config.specialAttackSoonAlert()){
			final int ticksPerSpecRegen = wearingLightbearer ? SPEC_REGEN_TICKS / 2 : SPEC_REGEN_TICKS;

			if(SpecialAttackSoonOverlayShowing){
				if(SpecSoonOverlayDisplayedForTicks == config.specialAttackSoonExpireTime()){
					clearSpecSoonOverlay();
				}
				else{
					SpecSoonOverlayDisplayedForTicks++;
				}
			}

			if(specialAttackEnergy == 1000){
				ticksSinceSpecRegen = 0;
			}
			else
			{
				ticksSinceSpecRegen = (ticksSinceSpecRegen + 1) % ticksPerSpecRegen;
			}
			if((specialAttackEnergy + 100) >= config.specialAttackThreshold() * 10 && (specialAttackEnergy + 50) < config.specialAttackThreshold() * 10){
				if((ticksPerSpecRegen - ticksSinceSpecRegen) == config.specialAttackSoonDelay()){
					notifySpecialAttackSoon();
				}
			}
		}

		if(config.specialAttackAlert()){
			if(SpecialAttackOverlayShowing){
				if(SpecOverlayDisplayedForTicks == config.expireTime()){
					clearSpecOverlay();
				}
				else{
					SpecOverlayDisplayedForTicks++;
				}
			}
			if(specialAttackEnergy < (config.specialAttackThreshold() * 10) && SpecialAttackOverlayShowing){
				clearSpecOverlay();
				OverlayClearedByTimeout = false;
			}
		}


	}

	private void notifySpecialAttackSoon()
	{
		SpecialAttackSoonOverlayShowing = true;
		overlayManager.add(specialAttackSoonOverlay);
	}
	private void notifySpecialAttack()
	{
		SpecialAttackOverlayShowing = true;
		overlayManager.add(specialAttackOverlay);
	}

	private void clearSpecOverlay(){
		overlayManager.remove(specialAttackOverlay);
		SpecialAttackOverlayShowing = false;
		SpecOverlayDisplayedForTicks = 0;

	}
	private void clearSpecSoonOverlay(){
		overlayManager.remove(specialAttackSoonOverlay);
		SpecialAttackSoonOverlayShowing = false;
		SpecSoonOverlayDisplayedForTicks = 0;
	}

	@Provides
	SpecialAttackNotifierConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(SpecialAttackNotifierConfig.class);
	}
}

package com.specialattacknotifier;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.awt.*;
import java.io.ObjectInputFilter;

public class SpecialAttackNotifierSoonOverlay extends OverlayPanel {
    private final Client client;
    private final SpecialAttackNotifierConfig config;

    @Inject
    private SpecialAttackNotifierSoonOverlay(Client client, SpecialAttackNotifierConfig config)
    {
        this.client = client;
        this.config = config;
    }
    @Override
    public Dimension render(Graphics2D graphics){
        panelComponent.getChildren().clear();

        panelComponent.getChildren().add((LineComponent.builder())
                .left("Special attack ready in " + config.specialAttackSoonDelay() + " ticks!")
                .build());

        if (config.shouldFlash()) {
            if (client.getGameCycle() % 40 >= 20)
            {
                panelComponent.setBackgroundColor(config.specialAttackSoonNotificationBoxColor1());
            } else
            {
                panelComponent.setBackgroundColor(config.specialAttackSooNotificationBoxColor2());
            }
        } else {
            panelComponent.setBackgroundColor(config.specialAttackSoonNotificationBoxColor1());
        }

        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);

        return panelComponent.render(graphics);
    }

}

package com.specialattacknotifier;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.awt.*;
import java.io.ObjectInputFilter;

public class SpecialAttackNotifierOverlay extends OverlayPanel {
    private final Client client;
    private final SpecialAttackNotifierConfig config;

    @Inject
    private SpecialAttackNotifierOverlay(Client client, SpecialAttackNotifierConfig config)
    {
        this.client = client;
        this.config = config;
    }
    @Override
    public Dimension render(Graphics2D graphics){
        panelComponent.getChildren().clear();

        panelComponent.getChildren().add((LineComponent.builder())
                .left("Special attack ready!")
                .build());

        if (config.shouldFlash()) {
            if (client.getGameCycle() % 40 >= 20)
            {
                panelComponent.setBackgroundColor(config.notificationBoxColor1());
            } else
            {
                panelComponent.setBackgroundColor(config.notificationBoxColor2());
            }
        } else {
            panelComponent.setBackgroundColor(config.notificationBoxColor1());
        }

        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);

        return panelComponent.render(graphics);
    }

}

package com.specialattacknotifier;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("Config")
public interface SpecialAttackNotifierConfig extends Config
{
	@ConfigSection(
			name = "Special Attack Threshold",
			description = "Special Attack Threshold",
			position = 0
	)
	String specialAttackSettings = "specialAttackThreshold";
	@ConfigItem(
			keyName = "specialAttackAlert",
			name = "Special Attack Alert",
			description = "Displays infobox when special attack is at set threshold",
			position = 1,
			section = specialAttackSettings
	)
	default boolean specialAttackAlert(){
		return true;
	}

	@Range(max=100, min=0)
	@ConfigItem(
			keyName = "specialAttackThreshold",
			name = "Special Attack Threshold",
			description = "Threshold to display special attack alert",
			position = 2,
			section = specialAttackSettings

	)
	default int specialAttackThreshold(){
		return 100;
	}

	@ConfigItem(
			keyName = "shouldFlash",
			name = "Flash notification box",
			description = "Flashes notification box",
			position = 3,
			section = specialAttackSettings
	)
	default boolean shouldFlash(){
		return true;
	}

	@ConfigItem(
			keyName = "expireTime",
			name = "Notification box expire time (ticks)",
			description = "Notification box expire time in ticks",
			position = 4,
			section = specialAttackSettings

	)
	default int expireTime(){
		return 10;
	}

	@ConfigItem(
			keyName = "notificationBoxColor1",
			name = "Spec box color 1",
			description =  "First color for notification box flash",
			position = 5,
			section = specialAttackSettings
	)
	default Color notificationBoxColor1(){return Color.RED;}

	@ConfigItem(
			keyName = "notificationBoxColor2",
			name = "Spec box color 2",
			description =  "Second color for notification box flash",
			position = 6,
			section = specialAttackSettings
	)
	default Color notificationBoxColor2(){return Color.GRAY;}
	@ConfigSection(
			name = "Special Attack Soon",
			description = "Special Attack Soon",
			position = 1
	)
	String specialAttackSoon = "specialAttackSoon";
	@ConfigItem(
			keyName = "specialAttackSoonAlert",
			name = "Special Attack Soon Alert",
			description = "Display alert before special attack is recharged to specified threshold",
			position = 7,
			section = specialAttackSoon

	)
	default boolean specialAttackSoonAlert(){
		return true;
	}

	@Range(max=30, min=1)
	@ConfigItem(
			keyName = "specialAttackSoonDelay",
			name = "Special Attack Soon Delay (ticks)",
			description = "Delay to show special attack soon alert in ticks",
			position = 8,
			section = specialAttackSoon

	)
	default int specialAttackSoonDelay(){
		return 5;
	}

	@ConfigItem(
			keyName = "specialAttackSoonShouldFlash",
			name = "Flash spec soon notification box",
			description = "Flashes notification box",
			position = 9,
			section = specialAttackSoon
	)
	default boolean specialAttackSoonShouldFlash(){
		return true;
	}

	@Range(max=10, min=1)
	@ConfigItem(
			keyName = "specialAttackSoonExpireTime",
			name = "Spec soon notification box expire time",
			description = "Notification box expire time in ticks",
			position = 10,
			section = specialAttackSoon

	)
	default int specialAttackSoonExpireTime(){
		return 6;
	}

	@ConfigItem(
			keyName = "specialAttackSoonNotificationBoxColor1",
			name = "Spec soon box color 1",
			description =  "First color for spec soon notification box flash",
			position = 11,
			section = specialAttackSoon
	)
	default Color specialAttackSoonNotificationBoxColor1(){return Color.CYAN;}

	@ConfigItem(
			keyName = "specialAttackSooNotificationBoxColor2",
			name = "Spec soon box color 2",
			description =  "Second color for spec soon notification box flash",
			position = 12,
			section = specialAttackSoon
	)
	default Color specialAttackSooNotificationBoxColor2(){return Color.GRAY;}




}

