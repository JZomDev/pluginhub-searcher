package com.imbuedheartnotifier;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ImbuedHeartNotifierPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ImbuedHeartNotifierPlugin.class);
		RuneLite.main(args);
	}
}
package com.imbuedheartnotifier;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.ItemContainer;
import net.runelite.api.ItemID;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.client.Notifier;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
@PluginDescriptor(
	name = "Imbued Heart Notifier"
)
public class ImbuedHeartNotifierPlugin extends Plugin {
	public static final int SATURATED_HEART_ITEM_ID = 27641; // replace with ItemID.SATURATED_HEART with new version of runelite library

	private static final Pattern IMBUED_HEART_READY_MESSAGE = Pattern.compile("<col=.{6}>Your (saturated|imbued) heart has regained its magical power.</col>");
	private static final Pattern IMBUED_HEART_BUSY_MESSAGE = Pattern.compile("The heart is still drained of its power. Judging by how it feels, it will be ready in around (\\d) minutes\\.");

	private static final int invigorateDuration = 700;
	private static final int saturatedDuration = 500;

	@Inject
	private Client client;

	@Inject
	private ImbuedHeartNotifierConfig config;

	@Inject
	private ImbuedHeartNotifierOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private Notifier notifier;

	private int invigorateTick;

	private int remainingDuration;


	@Override
	protected void startUp() throws Exception {
		invigorateTick = -1;
		remainingDuration = 0;
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception {
		overlayManager.remove(overlay);
		invigorateTick = -1;
		remainingDuration = 0;
	}

	public boolean isHeartActive() {
		return invigorateTick > 0;
	}

	@Subscribe
	public void onChatMessage(ChatMessage event) {
		String message = event.getMessage();

		Matcher heartReady = IMBUED_HEART_READY_MESSAGE.matcher(message);
		if (heartReady.find()) {
			invigorateTick = -1;
			remainingDuration = 0;
			notifyUser();
		}

		Matcher heartBusy = IMBUED_HEART_BUSY_MESSAGE.matcher(message);
		if (heartBusy.find()) {
			remainingDuration = (int) ((Integer.parseInt(heartBusy.group(1)) * 60) / 0.6);
			invigorateTick = client.getTickCount();
		}
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked event) {
		if (event.getMenuOption().contains("Invigorate")) {
			log.debug("Invigorate option clicked");
			invigorateTick = client.getTickCount();
			ItemContainer playerInventory = client.getItemContainer(InventoryID.INVENTORY);
			if (playerInventory != null && playerInventory.contains(SATURATED_HEART_ITEM_ID)) {
				remainingDuration = saturatedDuration;
			} else {
				remainingDuration = invigorateDuration;
			}
		}
	}

	@Subscribe
	public void onGameTick(GameTick gameTick) {
		if (invigorateTick > 0 && client.getTickCount() > invigorateTick + remainingDuration) {
			invigorateTick = -1;
			remainingDuration = 0;
			notifyUser();
		}
	}

	@Provides
	ImbuedHeartNotifierConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(ImbuedHeartNotifierConfig.class);
	}

	private void notifyUser() {
		if (config.enableNotifier()) {
			ItemContainer playerInventory = client.getItemContainer(InventoryID.INVENTORY);

			if (playerInventory != null && (playerInventory.contains(ItemID.IMBUED_HEART) || playerInventory.contains(SATURATED_HEART_ITEM_ID))) {
				notifier.notify("Your imbued heart can be used again");
			}
		}
	}
}

package com.imbuedheartnotifier;

import net.runelite.api.ItemID;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.WidgetItemOverlay;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;

public class ImbuedHeartNotifierOverlay extends WidgetItemOverlay {
    private final ItemManager itemManager;
    private final ImbuedHeartNotifierPlugin plugin;
    private final ImbuedHeartNotifierConfig config;

    @Inject
    private ImbuedHeartNotifierOverlay(ItemManager itemManager, ImbuedHeartNotifierPlugin plugin, ImbuedHeartNotifierConfig config) {
        this.itemManager = itemManager;
        this.plugin = plugin;
        this.config = config;
        showOnInventory();
    }

    @Override
    public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem itemWidget) {
        if ((itemId == ItemID.IMBUED_HEART || itemId == ImbuedHeartNotifierPlugin.SATURATED_HEART_ITEM_ID) && !plugin.isHeartActive()) {
            Color color = config.getHighlightColor();
            if (color != null) {
                Rectangle bounds = itemWidget.getCanvasBounds();
                if (config.outlineHeart()) {
                    final BufferedImage outline = itemManager.getItemOutline(itemId, itemWidget.getQuantity(), color);
                    graphics.drawImage(outline, (int) bounds.getX(), (int) bounds.getY(), null);
                }

                if (config.fillHeart()) {
                    final Color fillColor = ColorUtil.colorWithAlpha(color, config.getFillHeartOpacity());
                    Image image = ImageUtil.fillImage(itemManager.getImage(itemId, itemWidget.getQuantity(), false), fillColor);
                    graphics.drawImage(image, (int) bounds.getX(), (int) bounds.getY(), null);
                }
            }
        }
    }
}

package com.imbuedheartnotifier;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;

import java.awt.*;

@ConfigGroup("example")
public interface ImbuedHeartNotifierConfig extends Config
{
	@ConfigItem(
		position = 0,
		keyName = "highlightColor",
		name = "Highlight Color",
		description = "Color to highlight your imbued heart when it's ready to invigorate"
	)
	default Color getHighlightColor()
	{
		return new Color(245, 255, 54);
	}

	@ConfigItem(
			position = 1,
			keyName = "fillHeart",
			name = "Fill Heart",
			description = "Fill in the heart with the highlight color"
	)
	default boolean fillHeart() {
		return true;
	}

	@Range(
			max = 255
	)
	@ConfigItem(
			position = 2,
			keyName =  "fillHeartOpacity",
			name = "Fill Opacity",
			description = "The opacity of the highlight color when filling in the heart"
	)
	default int getFillHeartOpacity() {
		return 50;
	}

	@ConfigItem(
			position = 3,
			keyName = "outlineHeart",
			name = "Outline Heart",
			description = "Outline the heart with the highlight color"
	)
	default boolean outlineHeart() {
		return false;
	}

	@ConfigItem(
			position = 4,
			keyName = "enableNotifier",
			name = "Enable Notifier",
			description = "Enable a system notifier when your imbued heart is ready to be used"
	)
	default boolean enableNotifier() {
		return false;
	}
}

