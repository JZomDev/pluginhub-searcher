package com.randomscreenshot;

import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.widgets.ComponentID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class RandomScreenshotPluginTest
{
	@Mock
	Client client;

	@Mock
	RandomScreenshotConfig config;

	@Mock
	ScreenshotUtil screenshotUtil;

	@Mock
	RandomUtil rand;

	@BeforeEach
	void setup() {
		Mockito.lenient().when(config.sampleWeight()).thenReturn(100);
		Mockito.lenient().when(rand.randInt(Mockito.any(Integer.class))).thenReturn(1);
		Mockito.lenient().doNothing().when(screenshotUtil).takeScreenshot();

		Mockito.lenient().when(client.getGameState()).thenReturn(GameState.LOGGED_IN);
		Mockito.lenient().when(client.getWidget(Mockito.eq(ComponentID.BANK_PIN_CONTAINER))).thenReturn(null);
	}

	@InjectMocks
	RandomScreenshotPlugin plugin = new RandomScreenshotPlugin();

	@Test
	public void testShouldTakeScreenshotIfBankPinContainerNull() {
		Mockito.when(client.getWidget(Mockito.eq(ComponentID.BANK_PIN_CONTAINER))).thenReturn(null);
		Mockito.lenient().when(rand.randInt(Mockito.any(Integer.class))).thenReturn(0);
		Assertions.assertTrue(plugin.shouldTakeScreenshot());
	}
}

package com.randomscreenshot;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class RandomScreenshotRuneliteLauncher
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(RandomScreenshotPlugin.class);
		RuneLite.main(args);
	}
}
package com.randomscreenshot;

import java.util.Random;
import javax.inject.Singleton;

@Singleton
public class RandomUtil
{
	private final Random rand = new Random(System.currentTimeMillis());

	public int randInt(int weight)
	{
		return rand.nextInt(weight);
	}
}

package com.randomscreenshot;

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import static net.runelite.client.RuneLite.SCREENSHOT_DIR;
import net.runelite.client.config.RuneScapeProfileType;
import net.runelite.client.util.Text;

@Singleton
@Slf4j
public class FileFactory
{
	private static final DateFormat TIME_FORMAT = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
	@Inject
	private Client client;

	@Inject
	private RandomScreenshotConfig config;

	public File createScreenshotFile() throws IOException {
		File screenshotDirectory = createScreenshotDirectory();
		String fileName = format(new Date());

		File screenshotFile = new File(screenshotDirectory, fileName + ".png");

		// To make sure that screenshots don't get overwritten, check if file exists,
		// and if it does create file with same name and suffix.
		int i = 1;
		while (screenshotFile.exists())
		{
			screenshotFile = new File(screenshotDirectory, fileName + String.format("(%d)", i++) + ".png");
		}

		return screenshotFile;
	}

	/**
	 * Create a directory at `path` if one does not exist, and return the
	 * corresponding `File` object.
	 *
	 * If path is an empty string, the player profile directory is used instead.
	 */
	public File createScreenshotDirectory() throws IOException {
		File screenshotDirectory;
		if (config.useCustomDirectory())
		{
			screenshotDirectory = new File(config.screenshotDirectory());
		}
		else
		{
			screenshotDirectory = getPlayerScreenshotDirectory();
		}

		if (!screenshotDirectory.mkdirs() && !screenshotDirectory.exists())
		{
			throw new IOException("Could not create screenshot directory at " + screenshotDirectory.getAbsolutePath());
		}

		return screenshotDirectory;
	}

	private File getPlayerScreenshotDirectory() {
		File directory;

		if (client.getLocalPlayer() != null && client.getLocalPlayer().getName() != null)
		{
			String playerDir = client.getLocalPlayer().getName();
			RuneScapeProfileType profileType = RuneScapeProfileType.getCurrent(client);
			if (profileType != RuneScapeProfileType.STANDARD)
			{
				playerDir += "-" + Text.titleCase(profileType);
			}
			playerDir += File.separator + "Random Screenshots";

			directory = new File(SCREENSHOT_DIR, playerDir);
		}
		else
		{
			directory = SCREENSHOT_DIR;
		}

		return directory;

	}

	private static String format(Date date)
	{
		synchronized (TIME_FORMAT)
		{
			return TIME_FORMAT.format(date);
		}
	}
}

package com.randomscreenshot;

import com.google.inject.Provides;
import java.util.Random;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameTick;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

@PluginDescriptor(
	name = "Random Screenshot",
	description = "Randomly take screenshots as you go about your adventures",
	tags = {"screenshot", "images", "random", "memories"}
)
@Slf4j
public class RandomScreenshotPlugin extends Plugin
{
	static final String CONFIG_GROUP_KEY = "randomscreenshot";

	@Inject
	private RandomScreenshotConfig config;

	@Inject
	private ScreenshotUtil screenShotUtil;

	@Inject
	private Client client;

	@Inject
	private RandomUtil rand;

	@Provides
	RandomScreenshotConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(RandomScreenshotConfig.class);
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		if (shouldTakeScreenshot())
		{
			takeScreenshot();
		}
	}

	/* TODO: Create a decider interface so that decision strategy can be made modular. */
	boolean shouldTakeScreenshot() {
		if (isBankPinContainerVisible() || isOnLoginScreen()) {
			return false;
		}

		return rand.randInt(config.sampleWeight()) == 0;
	}

	private void takeScreenshot() {
		screenShotUtil.takeScreenshot();
	}

	private boolean isBankPinContainerVisible()
	{
		Widget pinContainer = client.getWidget(ComponentID.BANK_PIN_CONTAINER);
		if (pinContainer == null) {
			return false;
		}

		return !pinContainer.isSelfHidden();
	}

	private boolean isOnLoginScreen() {
		return client.getGameState() == GameState.LOGIN_SCREEN;
	}
}

/*
 * Copyright (c) 2018, Lotto <https://github.com/devLotto>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.randomscreenshot;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.concurrent.ScheduledExecutorService;
import java.util.function.Consumer;
import javax.imageio.ImageIO;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.events.ScreenshotTaken;
import net.runelite.client.ui.DrawManager;
import net.runelite.client.util.ImageUtil;

@Singleton
@Slf4j
public class ScreenshotUtil
{
	@Inject
	private DrawManager drawManager;
	@Inject
	private ScheduledExecutorService executor;
	@Inject
	private EventBus eventBus;
	@Inject
	private FileFactory fileFactory;
	
	public void takeScreenshot()
	{
		Consumer<Image> imageCallback = (img) ->
		{
			// This callback is on the game thread, move to executor thread
			executor.submit(() -> saveScreenshot(img));
		};

		drawManager.requestNextFrameListener(imageCallback);
	}

	private void saveScreenshot(Image image)
	{
		BufferedImage screenshot = ImageUtil.bufferedImageFromImage(image);

		File screenshotFile;
		try
		{
			screenshotFile = fileFactory.createScreenshotFile();
			ImageIO.write(screenshot, "PNG", screenshotFile);
		}
		catch (IOException ex)
		{
			log.error("error writing screenshot", ex);
			return;
		}

		ScreenshotTaken screenshotTaken = new ScreenshotTaken(
			screenshotFile,
			screenshot
		);
		eventBus.post(screenshotTaken);
	}
}

package com.randomscreenshot;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;

@ConfigGroup(RandomScreenshotPlugin.CONFIG_GROUP_KEY)
public interface RandomScreenshotConfig extends Config
{
	@ConfigSection(
		name = "Custom Directory",
		description = "Custom setting for where to save screenshots",
		position = 99
	)
	String customDirectorySection = "Custom Directory";

	@ConfigItem(
		keyName = "sampleWeight",
		name = "Sample Weight",
		description = "The average number of ticks until a screenshot is taken. A game tick occurs every 0.6 seconds, and there are 100 ticks in a minute."
	)
	@Range(min = 1)
	default int sampleWeight() {
		return 500;
	}

	/* TODO: Ideally we'd use a file picker here, but the file picker is not available to the plugin config panel and
	    making it available requires changes to core runelite. */
	@ConfigItem(
		keyName = "screenshotDirectory",
		name = "Custom Screenshot Directory",
		description = "Custom directory to save screenshots to",
		section = customDirectorySection,
		position = 1
	)
	default String screenshotDirectory() {
		return "";
	}

	@ConfigItem(
		keyName = "useCustomDirectory",
		name = "Use Custom Screenshot Directory",
		description = "Save screenshots to the configured custom directory",
		warning =
			"When enabling this option, make sure that the directory you've configured is valid! " +
			"If it isn't, screenshots will be lost!\n\n" +
			"Also note: if you sync your RuneLite settings across multiple computers, " +
			"please make sure the given directory is valid on all your computers!\n\n" +
			"You can disregard this message if you are just disabling this option.",
		section = customDirectorySection,
		position = 2
	)
	default boolean useCustomDirectory() {
		return false;
	}
}

