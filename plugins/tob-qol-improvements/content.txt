package com.tobqolimprovements;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TobQolImprovementsPluginTest
{
    public static void main(String[] args) throws Exception
    {
        ExternalPluginManager.loadBuiltin(ToBQoLImprovementsPlugin.class);
        RuneLite.main(args);
    }
}

package com.tobqolimprovements;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.ImmutableSet;
import com.google.inject.Provides;

import javax.annotation.Nullable;
import javax.inject.Inject;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;

import java.util.List;
import java.util.Locale;
import java.util.Objects;
import java.util.Set;

@Slf4j
@PluginDescriptor(
	name = "ToB QoL Improvements",
		description = "Minor QoL improvements to the Theatre of Blood",
		tags = {"tob", "theatre", "theater", "raids2"},
		enabledByDefault = false
)
public class ToBQoLImprovementsPlugin extends Plugin
{
	private static final Set<String> TOB_CHEST_TARGETS = ImmutableSet.of(
			"stamina potion(4)",
			"prayer potion(4)",
			"saradomin brew(4)",
			"super restore(4)",
			"mushroom potato",
			"shark",
			"sea turtle",
			"manta ray"
	);

	@Inject
	private Client client;

	@Inject
	private ToBQoLImprovementsConfig config;

	@Inject
	private ConfigManager configManager;

	// Multimap for swapping value with buy-1
	private final ArrayListMultimap<String, Integer> optionIndexes = ArrayListMultimap.create();

	@Getter
	private GameObject lootChest;

	@Getter
	boolean chestHasLoot = false;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private RemindersOverlay overlay;

	@Provides
	ToBQoLImprovementsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ToBQoLImprovementsConfig.class);
	}

	@Override
	public void startUp()
	{
		overlayManager.add(overlay);
	}

	@Override
	public void shutDown()
	{
		lootChest = null;
		chestHasLoot = false;
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onClientTick(ClientTick clientTick)
	{
		// The menu is not rebuilt when it is open, so don't swap or else it will
		// repeatedly swap entries
		if (client.getGameState() != GameState.LOGGED_IN || client.isMenuOpen())
		{
			return;
		}

		MenuEntry[] menuEntries = client.getMenuEntries();

		// Build option map for quick lookup in findIndex
		int index = 0;
		optionIndexes.clear();
		for (MenuEntry entry : menuEntries)
		{
			String option = Text.removeTags(entry.getOption()).toLowerCase();
			optionIndexes.put(option, index++);
		}

		// Perform swaps
		index = 0;
		for (MenuEntry entry : menuEntries)
		{
			swapMenuEntry(index++, entry);
		}

		// Remove the force right-click menu
		if (config.lootChestBankAll() && client.getGameState() == GameState.LOGGED_IN && !client.isMenuOpen() && isInVerSinhaza())
		{
			for (MenuEntry entry : menuEntries)
			{
				if (entry.getOption().equals("Bank-all"))
				{
					entry.setForceLeftClick(true);
					break;
				}
			}
			client.setMenuEntries(menuEntries);
		}
	}

	@Subscribe
	public void onGameTick(GameTick gameTick)
	{
		if (isInVerSinhaza())
		{
			// Determine if chest has loot and draw an arrow overhead
			if (lootChest != null && Objects.requireNonNull(getObjectComposition(lootChest.getId())).getId() == 41435 && !chestHasLoot)
			{
				chestHasLoot = true;
				client.setHintArrow(lootChest.getWorldLocation());
			}

			// Clear the arrow if the loot is taken
			if (lootChest != null && Objects.requireNonNull(getObjectComposition(lootChest.getId())).getId() == 41436 && chestHasLoot)
			{
				chestHasLoot = false;
				client.clearHintArrow();
			}
		}
		else
		{
			if (lootChest != null)
			{
				lootChest = null;
			}
		}
	}

	@Nullable
	private ObjectComposition getObjectComposition(int id)
	{
		ObjectComposition objectComposition = client.getObjectDefinition(id);
		return objectComposition.getImpostorIds() == null ? objectComposition : objectComposition.getImpostor();
	}

	private static final Set<Integer> VER_SINHAZA_REGIONS = ImmutableSet.of(
			14386,
			14642
	);

	public boolean isInVerSinhaza()
	{
		return VER_SINHAZA_REGIONS.contains(Objects.requireNonNull(client.getLocalPlayer()).getWorldLocation().getRegionID());
	}

	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned event)
	{
		if (event.getGameObject().getId() == 41437)
		{
			lootChest = event.getGameObject();
		}
	}

	private void swapMenuEntry(int index, MenuEntry menuEntry)
	{
		final String option = Text.removeTags(menuEntry.getOption()).toLowerCase();
		final String target = Text.removeTags(menuEntry.getTarget()).toLowerCase();

		// Swap the "Value" option with "Buy-1" for the given target if it's not off
		if (option.equals("value") && !config.tobSupplyChestBuy().toString().equals("value"))
		{
			if (TOB_CHEST_TARGETS.contains(target))
			{
				swap(option, target, index);
			}
		}
	}

	private void swap(String option, String target, int index)
	{
		MenuEntry[] menuEntries = client.getMenuEntries();

		int thisIndex = findIndex(menuEntries, index, option, target);
		int optionIdx = findIndex(menuEntries, thisIndex, config.tobSupplyChestBuy().toString(), target);

		if (thisIndex >= 0 && optionIdx >= 0)
		{
			swap(optionIndexes, menuEntries, optionIdx, thisIndex);
		}
	}

	private int findIndex(MenuEntry[] entries, int limit, String option, String target)
	{
		List<Integer> indexes = optionIndexes.get(option);

		// We want the last index which matches the target, as that is what is top-most on the menu
		for (int i = indexes.size() - 1; i >= 0; i--)
		{
			int index = indexes.get(i);
			MenuEntry entry = entries[index];
			String entryTarget = Text.removeTags(entry.getTarget()).toLowerCase();

			// Limit to the last index which is prior to the current entry
			if (index <= limit && entryTarget.equals(target))
			{
				return index;
			}
		}

		return -1;
	}

	private void swap(ArrayListMultimap<String, Integer> optionIndexes, MenuEntry[] entries, int index1, int index2)
	{
		MenuEntry entry = entries[index1];
		entries[index1] = entries[index2];
		entries[index2] = entry;

		client.setMenuEntries(entries);

		// Rebuild option indexes
		optionIndexes.clear();
		int idx = 0;
		for (MenuEntry menuEntry : entries)
		{
			String option = Text.removeTags(menuEntry.getOption()).toLowerCase();
			optionIndexes.put(option, idx++);
		}
	}


	private static final int VERZIK_P2_AREA_SOUND_EFFECT_ID = 3987;
	@Subscribe
	public void onAreaSoundEffectPlayed(AreaSoundEffectPlayed areaSoundEffectPlayed) {
		int soundId = areaSoundEffectPlayed.getSoundId();
		if (config.muteVerzikP2AreaSounds() && soundId == VERZIK_P2_AREA_SOUND_EFFECT_ID)
		{
			areaSoundEffectPlayed.consume();
		}
	}
}

package com.tobqolimprovements;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("ToB QoL Improvements")
public interface ToBQoLImprovementsConfig extends Config
{
	@ConfigItem(
			keyName = "tobSupplyChestBuy",
			name = "ToB Supply Chest Buy Options",
			description = "Swaps the Buy options with Value on items in shops."
	)
	default TobChestBuyMode tobSupplyChestBuy()
	{
		return TobChestBuyMode.BUY_1;
	}

	@ConfigItem(
			keyName = "tobLootReminder",
			name = "Loot Reminder",
			description = "Outline and place an arrow over unclaimed loot outside the theatre."
	)
	default boolean lootReminder()
	{
		return true;
	};

	@ConfigItem(
			keyName = "tobLootChestBankAll",
			name = "Bank All at Loot Chest",
			description = "Get rid of the pesky right-click menu when banking by just left-clicking"
	)
	default boolean lootChestBankAll() { return true; }

	@ConfigItem(
			keyName = "muteVerzikP2AreaSounds",
			name = "Mute verzik P2 Area sounds",
			description = "Change verzik back to old P2 sounds"
	)
	default boolean muteVerzikP2AreaSounds() {
		return false;
	}
}

/*
 * Copyright (c) 2022, OsrsCommits <107307382+osrscommits@users.noreply.github.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.tobqolimprovements;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum TobChestBuyMode
{
    OFF("value"),
    BUY_1("buy-1"),
    BUY_ALL("buy-all"),
    BUY_X("buy-x");

    private final String name;

    @Override
    public String toString()
    {
        return name;
    }
}
package com.tobqolimprovements;

import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.OverlayUtil;

import javax.inject.Inject;
import java.awt.*;

public class RemindersOverlay extends Overlay {
    private final ToBQoLImprovementsConfig config;
    private final ToBQoLImprovementsPlugin plugin;

    @Inject
    private RemindersOverlay(ToBQoLImprovementsConfig config, ToBQoLImprovementsPlugin plugin)
    {
        this.config = config;
        this.plugin = plugin;
        setPosition(OverlayPosition.DYNAMIC);
        setPriority(OverlayPriority.HIGH);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (config.lootReminder() && plugin.isInVerSinhaza() && plugin.getLootChest() != null && plugin.isChestHasLoot())
        {
            Shape poly = plugin.getLootChest().getConvexHull();
            if (poly != null)
            {
                OverlayUtil.renderPolygon(graphics, poly, Color.RED);
            }
        }
        return null;
    }
}

