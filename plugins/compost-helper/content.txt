package com.composthelper;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CompostHelperPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CompostHelperPlugin.class);
		RuneLite.main(args);
	}
}
package com.composthelper;

import com.composthelper.compostbin.CompostBin;
import com.composthelper.compostbin.CompostBinObject;
import com.composthelper.compostbin.CompostBinOverlay;
import com.google.inject.Provides;

import javax.annotation.Nullable;
import javax.inject.Inject;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameObjectDespawned;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
        name = "Compost Helper"
)
public class CompostHelperPlugin extends Plugin {

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private CompostBinOverlay overlay;

    @Getter
    @Nullable
    private CompostBin visibleCompostBin;

    @Override
    protected void startUp() throws Exception {
        overlayManager.add(overlay);
    }

    @Override
    protected void shutDown() throws Exception {
        overlayManager.remove(overlay);
        visibleCompostBin = null;
    }

    @Subscribe
    public void onGameObjectSpawned(GameObjectSpawned event) {
        GameObject object = event.getGameObject();
        for (CompostBinObject compostBin : CompostBinObject.values()) {
            if (compostBin.getObjectId() == object.getId()) {
                visibleCompostBin = new CompostBin(object, compostBin);
            }
        }
    }

    @Subscribe
    public void onGameObjectDespawned(GameObjectDespawned event) {
        GameObject object = event.getGameObject();
        if (visibleCompostBin != null && object.getId() == visibleCompostBin.getGameObject().getId()) {
            visibleCompostBin = null;
        }
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged event) {
        if (event.getGameState() == GameState.LOADING) {
            visibleCompostBin = null;
        }
    }

    @Provides
    CompostHelperConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(CompostHelperConfig.class);
    }
}

package com.composthelper;

import lombok.Getter;

import java.awt.*;

public enum CompostType {
    NORMAL("Compost"),
    SUPER("Supercompost"),
    ULTRA("Ultracompost");

    @Getter
    private String text;

    CompostType(String text) {
        this.text = text;
    }

    @Override
    public String toString() {
        return text;
    }
}

package com.composthelper;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("composthelper")
public interface CompostHelperConfig extends Config {
    @ConfigSection(
            name = "Compost Bin",
            description = "Settings for the compost bin overlay",
            position = 0
    )
    String compostBinSection = "compostBinSection";

    @ConfigItem(
            keyName = "showCompostType",
            name = "Show Compost Type",
            description = "Show which kind of compost is in the compost bin",
            position = 1,
            section =  "compostBinSection"
    )
    default boolean showCompostType() { return false; }

    @ConfigItem(
            keyName = "showMaxSize",
            name = "Show Maximum Capacity",
            description = "Show the maximum capacity of the compost bin",
            position = 2,
            section =  "compostBinSection"
    )
    default boolean showMaxSize() {
        return true;
    }
}

package com.composthelper.compostbin;

import lombok.Getter;
import net.runelite.api.GameObject;

public class CompostBin {

    @Getter
    private GameObject gameObject;

    @Getter
    private CompostBinObject compostBinObject;

    public CompostBin(GameObject gameObject, CompostBinObject compostBinObject) {
        this.gameObject = gameObject;
        this.compostBinObject = compostBinObject;
    }
}

package com.composthelper.compostbin;

import lombok.Getter;

import java.awt.*;

public enum CompostBinAction {

    EMPTY(Color.red),
    FILLING(Color.yellow),
    EMPTYING(Color.green),
    ROTTING(Color.white);

    @Getter
    private Color textColor;

    CompostBinAction(Color textColor) {
        this.textColor = textColor;
    }
}

package com.composthelper.compostbin;

import com.composthelper.CompostType;
import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.api.Varbits;

import javax.inject.Inject;

public enum CompostBinObject {
    ARDOUNGE(7839, Varbits.FARMING_4775),
    CATHERBY(7837, Varbits.FARMING_4775),
    FALADOR(7836, Varbits.FARMING_4775),
    HOSIDIUS(27112, Varbits.FARMING_4775),
    MORYTANIA(7838, Varbits.FARMING_4775),
    PRIFDDINAS(34920, Varbits.FARMING_4774),
    FARMING_GUILD(34631, Varbits.FARMING_7912);

    @Getter
    private int objectId;

    @Getter
    private int varbit;

    CompostBinObject(int objectId, int varbit) {
        this.objectId = objectId;
        this.varbit = varbit;
    }

    public CompostBinState getState(int value) {
        if (this == CompostBinObject.FARMING_GUILD) {
            if (value == 0) {
                return new CompostBinState(null, CompostBinAction.EMPTY, 0);
            }
            if (value >= 1 && value <= 15) {
                return new CompostBinState(CompostType.NORMAL, CompostBinAction.FILLING, value);
            }
            if (value >= 16 && value <= 30) {
                return new CompostBinState(CompostType.NORMAL, CompostBinAction.EMPTYING, value - 15);
            }
            if (value >= 33 && value <= 47) {
                return new CompostBinState(CompostType.SUPER, CompostBinAction.FILLING, value - 32);
            }
            if (value >= 48 && value <= 62) {
                return new CompostBinState(CompostType.SUPER, CompostBinAction.EMPTYING, value - 47);
            }
            if (value >= 63 && value <= 77) {
                return new CompostBinState(CompostType.NORMAL, CompostBinAction.FILLING, 15 + value - 62);
            }
            if (value >= 78 && value <= 92) {
                return new CompostBinState(CompostType.NORMAL, CompostBinAction.EMPTYING, 15 + value - 77);
            }
            if (value >= 97 && value <= 98) {
                return new CompostBinState(CompostType.SUPER, CompostBinAction.ROTTING, 30);
            }
            if (value == 99) {
                return new CompostBinState(CompostType.SUPER, CompostBinAction.EMPTYING, 30);
            }
            if (value >= 100 && value <= 114) {
                return new CompostBinState(CompostType.SUPER, CompostBinAction.EMPTYING, 15 + value - 99);
            }
            if (value >= 161 && value <= 175) {
                return new CompostBinState(CompostType.SUPER, CompostBinAction.FILLING, 15 + value - 160);
            }
            if (value >= 176 && value <= 205) {
                return new CompostBinState(CompostType.ULTRA, CompostBinAction.EMPTYING, value - 175);
            }
        } else {
            if (value == 0) {
                return new CompostBinState(null, CompostBinAction.EMPTY, 0);
            }
            if (value >= 1 && value <= 15) {
                return new CompostBinState(CompostType.NORMAL, CompostBinAction.FILLING, value);
            }
            if (value >= 16 && value <= 30) {
                return new CompostBinState(CompostType.NORMAL, CompostBinAction.EMPTYING, value - 15);
            }
            if (value == 31 || value == 32) {
                return new CompostBinState(CompostType.NORMAL, CompostBinAction.ROTTING, 15);
            }
            if (value >= 33 && value <= 47) {
                return new CompostBinState(CompostType.SUPER, CompostBinAction.FILLING, value - 32);
            }
            if (value >= 48 && value <= 62) {
                return new CompostBinState(CompostType.SUPER, CompostBinAction.EMPTYING, value - 47);
            }
            if (value == 94) {
                return new CompostBinState(CompostType.NORMAL, CompostBinAction.EMPTYING, 15);
            }
            if (value == 95 || value == 96) {
                return new CompostBinState(CompostType.SUPER, CompostBinAction.ROTTING, 15);
            }
            if (value == 126) {
                return new CompostBinState(CompostType.SUPER, CompostBinAction.EMPTYING, 15);
            }
            if (value >= 176 && value <= 190) {
                return new CompostBinState(CompostType.ULTRA, CompostBinAction.EMPTYING, value - 175);
            }
        }

        return null;
    }
}

package com.composthelper.compostbin;

import com.composthelper.CompostType;
import lombok.Getter;

public class CompostBinState {

    @Getter
    private CompostType type;

    @Getter
    private CompostBinAction action;

    @Getter
    private int contentCount;

    public CompostBinState(CompostType type, CompostBinAction action, int contentCount) {
        this.type = type;
        this.action = action;
        this.contentCount = contentCount;
    }
}

package com.composthelper.compostbin;

import com.composthelper.CompostHelperConfig;
import com.composthelper.CompostHelperPlugin;
import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.TextComponent;

import javax.inject.Inject;
import java.awt.*;

public class CompostBinOverlay extends Overlay {

    private static final int MAX_DISTANCE = 2350;
    private static final int TEXT_HEIGHT = 11;

    private final Client client;
    private final CompostHelperPlugin plugin;
    private final CompostHelperConfig config;
    private final TextComponent typeTextComponent = new TextComponent();
    private final TextComponent countTextComponent = new TextComponent();

    @Inject
    private CompostBinOverlay(Client client, CompostHelperPlugin plugin, CompostHelperConfig config) {
        this.client = client;
        this.plugin = plugin;
        this.config = config;

        setPosition(OverlayPosition.DYNAMIC);
        setPriority(OverlayPriority.LOW);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        CompostBin compostBin = plugin.getVisibleCompostBin();

        if (compostBin == null) {
            return null;
        }

        GameObject gameObject = compostBin.getGameObject();
        LocalPoint objectMinLocation = LocalPoint.fromScene(
                gameObject.getSceneMinLocation().getX(),
                gameObject.getSceneMinLocation().getY());
        LocalPoint objectMaxLocation = LocalPoint.fromScene(
                gameObject.getSceneMaxLocation().getX(),
                gameObject.getSceneMaxLocation().getY());
        LocalPoint localLocation = client.getLocalPlayer().getLocalLocation();

        if (localLocation.distanceTo(objectMinLocation) <= MAX_DISTANCE) {
            CompostBinObject compostBinObject = compostBin.getCompostBinObject();
            int varbitValue = client.getVarbitValue(compostBinObject.getVarbit());
            CompostBinState state = compostBinObject.getState(varbitValue);

            if (state == null) {
                return null;
            }

            int line = 0;
            if (config.showCompostType()) {
                renderTypeTextComponent(graphics, state, line++, objectMinLocation, objectMaxLocation);
            }

            int capacity = compostBin.getCompostBinObject() == CompostBinObject.FARMING_GUILD ? 30 : 15;
            renderCountTextComponent(graphics, state, capacity, line, objectMinLocation, objectMaxLocation);
        }

        return null;
    }

    private void renderTypeTextComponent(Graphics2D graphics, CompostBinState state, int lineNumber, LocalPoint minLocation, LocalPoint maxLocation) {
        String typeText;
        if (state.getType() != null) {
            typeText = state.getType().toString();
        } else if (state.getAction() == CompostBinAction.EMPTY) {
            typeText = "Empty";
        } else {
            typeText = "Error";
        }
        Color textColor = state.getAction().getTextColor();

        java.awt.Point typeTextLocation = calculateTextLocation(graphics, typeText, lineNumber, minLocation, maxLocation);

        typeTextComponent.setText(typeText);
        typeTextComponent.setColor(textColor);
        typeTextComponent.setPosition(typeTextLocation);
        typeTextComponent.render(graphics);
    }

    private void renderCountTextComponent(Graphics2D graphics, CompostBinState state, int capacity, int lineNumber, LocalPoint minLocation, LocalPoint maxLocation) {
        String countText = Integer.toString(state.getContentCount());
        if (config.showMaxSize()) {
            countText = String.format("%s / %s", countText, capacity);
        }
        Color textColor = state.getAction().getTextColor();

        java.awt.Point countTextLocation = calculateTextLocation(graphics, countText, lineNumber, minLocation, maxLocation);

        countTextComponent.setText(countText);
        countTextComponent.setColor(textColor);
        countTextComponent.setPosition(countTextLocation);
        countTextComponent.render(graphics);
    }

    private java.awt.Point calculateTextLocation(Graphics2D graphics, String text, int lineNumber, LocalPoint... points) {
        int x = 0;
        int y = 0;

        for (LocalPoint point : points) {
            Point textLocation = Perspective.getCanvasTextLocation(client,
                    graphics,
                    point,
                    text,
                    200);
            x += textLocation.getX();
            y += textLocation.getY();
        }

        return new java.awt.Point(x / points.length, y / points.length + lineNumber * TEXT_HEIGHT);
    }
}

