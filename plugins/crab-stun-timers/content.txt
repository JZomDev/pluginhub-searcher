package com.crabstuntimer;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CrabStunTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CrabStunPlugin.class);
		RuneLite.main(args);
	}
}

/*
 * Copyright (c) 2019, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.crabstuntimer;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.Actor;
import net.runelite.api.coords.WorldPoint;

import java.time.Instant;

@AllArgsConstructor
@Getter
@Setter
class CrabStun {
    private final Actor crab;
    private final WorldPoint worldPoint;
    private Instant startTime;
    private final int stunDurationTicks;
    private final int zOffset;
}

/*
 * Copyright (c) 2018, Seth <Sethtroll3@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.crabstuntimer;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.*;

import static com.crabstuntimer.TimerTextStyle.TICKS;

@ConfigGroup("crabstun")
public interface CrabStunConfig extends Config {
	@ConfigItem(
			keyName = "showTimer",
			name = "Show crab stun timer",
			description = "Configures whether or not the timer is displayed",
			position = 1
	)
	default boolean showTimer() {
		return true;
	}

	@ConfigItem(
			keyName = "showText",
			name = "Show crab stun timer text",
			description = "Configures whether or not the text is displayed",
			position = 2
	)
	default boolean showText() {
		return true;
	}

	@ConfigItem(
			keyName = "timerDiameter",
			name = "Size of timer",
			description = "Configures the diameter of the timer",
			position = 3
	)
	default int timerDiameter() {
		return 25;
	}

	@ConfigItem(
			keyName = "textType",
			name = "Choose text type",
			description = "Configures whether ticks or seconds are displayed",
			position = 4
	)
	default TimerTextStyle textType() {
		return TICKS;
	}

	@ConfigItem(
			keyName = "normalTimerColor",
			name = "Timer color",
			description = "Configures the color of the timer that is displayed",
			position = 5
	)
	default Color normalTimerColor() {
		return Color.YELLOW;
	}

	@ConfigItem(
			keyName = "randomTimerColor",
			name = "Random interval color",
			description = "Configures the color of the timer during the random interval",
			position = 6
	)
	default Color randomTimerColor() {
		return Color.CYAN;
	}

	@ConfigItem(
			keyName = "timerWarningColor",
			name = "Timer warning color",
			description = "Configures the color of the timer when the crab is almost unstunned",
			position = 7
	)
	default Color timerWarningColor() {
		return Color.RED;
	}

	@ConfigItem(
			keyName = "timerBorderColor",
			name = "Timer border color",
			description = "Configures the color of the timer that is displayed",
			position = 8
	)
	default Color timerBorderColor() {
		return Color.ORANGE;
	}

	@ConfigItem(
			keyName = "randomBorderColor",
			name = "Random border color",
			description = "Configures the color of the timer that is displayed",
			position = 9
	)
	default Color randomBorderColor() {
		return Color.LIGHT_GRAY;
	}


}


package com.crabstuntimer;

public enum TeamSize {
    ONE(50),
    TWO_TO_THREE(30),
    FOUR_TO_FIVE(20),
    SIX_PLUS(10);

    private int stunDuration;

    TeamSize(int stunDuration) {
        this.stunDuration = stunDuration;
    }

    public int getStunDuration() {
        return stunDuration;
    }
}

/*
 * Copyright (c) 2019, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.crabstuntimer;

import lombok.AccessLevel;
import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ProgressPieComponent;
import net.runelite.client.ui.overlay.components.TextComponent;

import javax.inject.Inject;
import java.awt.*;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

class CrabStunOverlay extends Overlay {
    private final Client client;
    private final CrabStunPlugin plugin;

    @Getter(AccessLevel.PACKAGE)
    private List<CrabStun> randomIntervalTimers = new ArrayList<>();

    @Inject
    private CrabStunConfig config;

    @Inject
    private CrabStunOverlay(Client client, CrabStunPlugin plugin) {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        this.plugin = plugin;
        this.client = client;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        List<CrabStun> stunEvents = plugin.getStunEvents();
        renderGraphicsFromCrabStunList(stunEvents, graphics, false);
        renderGraphicsFromCrabStunList(randomIntervalTimers, graphics, true);
        return null;
    }

    private void renderGraphicsFromCrabStunList(List<CrabStun> stunEvents, Graphics2D graphics, boolean inRandomInterval) {
        if (stunEvents.isEmpty()) {
            return;
        }

        Instant now = Instant.now();
        for (Iterator<CrabStun> it = stunEvents.iterator(); it.hasNext(); ) {
            Color pieFillColor = (inRandomInterval ? config.randomTimerColor() : config.normalTimerColor());
            Color pieBorderColor = (inRandomInterval ? config.randomBorderColor() : config.timerBorderColor());

            CrabStun stun = it.next();
            float stunDurationMillis = (float) (stun.getStunDurationTicks() * 0.6 * 1000.0);
            float percent = (now.toEpochMilli() - stun.getStartTime().toEpochMilli()) / stunDurationMillis;
            float millisLeft = (stunDurationMillis - (now.toEpochMilli() - stun.getStartTime().toEpochMilli()));
            double secondsLeft = Math.round(millisLeft / 100.0) / 10.0;
            WorldPoint worldPoint = stun.getWorldPoint();
            LocalPoint loc = LocalPoint.fromWorld(client, worldPoint);

            if (percent >= .9) {
                pieFillColor = config.timerWarningColor();
            }

            if (loc == null) {
                it.remove();
                continue;
            }

            if (percent > 1.0f) {
                if (!inRandomInterval) {
                    randomIntervalTimers.add(new CrabStun(stun.getCrab(), stun.getWorldPoint(), Instant.now(), 10, 0));
                }
                it.remove();
                continue;
            }

            Point point = Perspective.localToCanvas(client, loc, client.getPlane(), stun.getZOffset());
            if (point == null) {
                it.remove();
                continue;
            }

            if (config.showTimer()) {
                ProgressPieComponent ppc = new ProgressPieComponent();
                ppc.setBorderColor(pieBorderColor);
                ppc.setFill(pieFillColor);
                ppc.setPosition(point);
                ppc.setProgress(percent);
                ppc.setDiameter(config.timerDiameter());
                ppc.render(graphics);
            }

            if (config.showText()) {
                TextComponent tc = new TextComponent();
                switch (config.textType()) {
                    case SECONDS:
                        tc.setText(secondsLeft + (inRandomInterval ? "?" : ""));
                        break;
                    case TICKS:
                        tc.setText(Math.round((millisLeft / 1000.0) / .6) + (inRandomInterval ? "?" : ""));
                        break;
                }
                tc.setColor(pieFillColor);
                tc.setPosition(new java.awt.Point(point.getX() - 5, point.getY() - 17));
                tc.render(graphics);
            }
        }
    }
}

/*
 * Copyright (c) 2019, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.crabstuntimer;

import com.google.inject.Provides;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Actor;
import net.runelite.api.Client;
import net.runelite.api.Varbits;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.GraphicChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;
import java.awt.*;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

@Slf4j
@PluginDescriptor(
		name = "Crab Stun Timers",
		description = "Show crab stun timers",
		tags = {"overlay", "raid", "pvm", "timers"}
)
public class CrabStunPlugin extends Plugin {
	@Inject
	private Client client;

	@Provides
	CrabStunConfig getConfig(ConfigManager configManager) {
		return configManager.getConfig(CrabStunConfig.class);
	}

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private CrabStunOverlay overlay;

	@Getter(AccessLevel.PACKAGE)
	private final List<CrabStun> stunEvents = new ArrayList<>();

	@Override
	protected void startUp() {
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception {
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onGraphicChanged(GraphicChanged event) {
		if (client.getVarbitValue(Varbits.IN_RAID) != 1) {
			return;
		}
		final int CRAB_STUN_GRAPHIC = 245;
		Actor actor = event.getActor();
		if (actor.getName() != null && actor.getName().contains("Jewelled Crab") && actor.getGraphic() == CRAB_STUN_GRAPHIC) {
			WorldPoint worldPoint = actor.getWorldLocation();
			CrabStun stunEvent = new CrabStun(actor, worldPoint, Instant.now(), getStunDurationTicks(), 0);
			for (CrabStun stun : stunEvents) {
				if (stun.getCrab().equals(actor)) {
					stun.setStartTime(Instant.now());
				}
			}
			overlay.getRandomIntervalTimers().removeIf(timer -> (timer.getCrab().equals(stunEvent.getCrab())));
			stunEvents.add(stunEvent);
		}
	}

	@Subscribe
	public void onGameTick(GameTick event) {
		for (Iterator<CrabStun> it = overlay.getRandomIntervalTimers().iterator(); it.hasNext(); ) {
			try {
				CrabStun stun = it.next();
				Point crabStunPoint = new Point(stun.getWorldPoint().getX(), stun.getWorldPoint().getY());
				Point crabCurrentPoint = new Point(stun.getCrab().getWorldLocation().getX(), stun.getCrab().getWorldLocation().getY());

				if (crabStunPoint.distance(crabCurrentPoint) > 0) {
					it.remove();
				}
			} catch (Exception e) {
				return;
			}
		}
	}

	private int getStunDurationTicks() {
		switch (client.getVarbitValue(Varbits.RAID_PARTY_SIZE)) {
			case 1:
				return TeamSize.ONE.getStunDuration();
			case 2:
			case 3:
				return TeamSize.TWO_TO_THREE.getStunDuration();
			case 4:
			case 5:
				return TeamSize.FOUR_TO_FIVE.getStunDuration();
			default:
				return TeamSize.SIX_PLUS.getStunDuration();
		}
	}
}

package com.crabstuntimer;

public enum TimerTextStyle {
    TICKS,
    SECONDS
}

