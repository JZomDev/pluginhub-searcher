package com.boatyExcited;

import lombok.extern.slf4j.Slf4j;
import net.runelite.client.RuneLite;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import java.io.*;
import java.nio.file.*;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static java.util.function.Predicate.not;

@Slf4j
public class SoundFileManager {
    private static final Path DOWNLOAD_DIR = Path.of(RuneLite.RUNELITE_DIR.getPath(), "boaty-excited");
    private static final String DELETE_WARNING_FILENAME = "EXTRA_FILES_WILL_BE_DELETED_BUT_FOLDERS_WILL_REMAIN";
    private static final Path DELETE_WARNING_FILE = DOWNLOAD_DIR.resolve(DELETE_WARNING_FILENAME);
    private static final HttpUrl RAW_GITHUB = HttpUrl.parse("https://raw.githubusercontent.com/Devdeve/boatyHypeMan-plugin/sounds");

    public static File getSoundFile(Sound sound) {
        return DOWNLOAD_DIR.resolve(sound.getResourceName()).toFile();
    }

    public static void prepareSoundFiles(OkHttpClient okHttpClient) {
        ensureDownloadDirectoryExists();
        deleteUndesiredFilesIgnoringFolders();
        downloadNotYetPresentSounds(okHttpClient);
    }

    private static void ensureDownloadDirectoryExists() {
        try {
            if (!Files.exists(DOWNLOAD_DIR))
                Files.createDirectories(DOWNLOAD_DIR);
            Files.createFile(DELETE_WARNING_FILE);
        } catch (FileAlreadyExistsException ignored) {
            /* ignored */
        } catch (IOException e) {
            log.error("Could not create download directory or warning file", e);
        }
    }

    private static void deleteUndesiredFilesIgnoringFolders() {
        Set<String> desiredSoundFileNames = getDesiredSounds()
                .map(Sound::getResourceName)
                .collect(Collectors.toSet());

        Set<Path> toDelete = getFilesPresent().stream()
                .filter(not(desiredSoundFileNames::contains))
                .map(DOWNLOAD_DIR::resolve)
                .collect(Collectors.toSet());
        try {
            for (Path pathToDelete : toDelete) {
                Files.delete(pathToDelete);
            }
        } catch (IOException e) {
            log.error("Failed to delete disused sound files", e);
        }
    }

    private static void downloadNotYetPresentSounds(OkHttpClient okHttpClient) {
        getFilesToDownload()
                .forEach(filename -> downloadFilename(okHttpClient, filename));
    }

    private static void downloadFilename(OkHttpClient okHttpClient, String filename) {
        if (RAW_GITHUB == null) {
            // Hush intellij, it's okay, the potential NPE can't hurt you now
            log.error("Boaty hype man could not download sounds due to an unexpected null RAW_GITHUB value");
            return;
        }
        HttpUrl soundUrl = RAW_GITHUB.newBuilder().addPathSegment(filename).build();
        Request request = new Request.Builder().url(soundUrl).build();
        try (Response res = okHttpClient.newCall(request).execute()) {
            if (res.body() != null)
                Files.copy(new BufferedInputStream(res.body().byteStream()), DOWNLOAD_DIR.resolve(filename), StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException e) {
            log.error("Boaty hype man could not download sounds", e);
        }
    }

    private static Stream<String> getFilesToDownload() {
        Set<String> filesAlreadyPresent = getFilesPresent();

        return getDesiredSounds()
                .map(Sound::getResourceName)
                .filter(not(filesAlreadyPresent::contains));
    }

    private static Set<String> getFilesPresent() {
        try (Stream<Path> paths = Files.list(DOWNLOAD_DIR)) {
            return paths
                    .filter(path -> !Files.isDirectory(path))
                    .map(Path::toFile)
                    .map(File::getName)
                    .filter(filename -> !DELETE_WARNING_FILENAME.equals(filename))
                    .collect(Collectors.toSet());
        } catch (IOException e) {
            log.warn("Could not list files in {}, assuming it to be empty", DOWNLOAD_DIR);
            return Set.of();
        }
    }

    private static Stream<Sound> getDesiredSounds() {
        return Arrays.stream(Sound.values());
    }
}
package com.boatyExcited;

public enum Sound {
    LEVEL_UP("levelup.wav"),
    COLLLOG1("collog1.wav"),
    COLLLOG2("collog2.wav"),
    COMBATTASK1("combat_task1.wav"),
    COMBATTASK2("combat_task2.wav"),
    DEATH1("death1.wav"),
    DEATH2("death2.wav"),
    LEVELUP1("levelup1.wav"),
    LEVELUP2("levelup2.wav"),
    LEVELUP3("levelup3.wav"),
    LOGIN("login.wav"),
    MAXHIT("maxhit.wav"),
    MONEY1("money1.wav"),
    MONEY2("money2.wav"),
    MONEY3("money3.wav"),
    MONEY4("money4.wav"),
    PET("pet.wav"),
    QUEST1("quest1.wav"),
    QUEST2("quest2.wav"),
    RUBYSPEC("rubyspec.wav");


    private final String resourceName;

    Sound(String resNam) {
        resourceName = resNam;
    }

    String getResourceName() {
        return resourceName;
    }

    public static final Sound[] collLog = new Sound[] {
            Sound.COLLLOG1,
            Sound.COLLLOG2,
    };

    public static final Sound[] combat_task = new Sound[] {
            Sound.COMBATTASK1,
            Sound.COMBATTASK2,
    };
    public static final Sound[] death = new Sound[] {
            Sound.DEATH1,
            Sound.DEATH2,
    };
    public static final Sound[] levelup = new Sound[] {
            Sound.LEVELUP1,
            Sound.LEVELUP2,
            Sound.LEVELUP3,
    };
    public static final Sound[] money = new Sound[] {
            Sound.MONEY1,
            Sound.MONEY2,
            Sound.MONEY3,
            Sound.MONEY4,
    };
    public static final Sound[] quest = new Sound[] {
            Sound.QUEST1,
            Sound.QUEST2,
    };
}
package com.boatyExcited;

import com.google.inject.Provides;
import java.io.File;
import java.io.IOException;
import java.util.EnumMap;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.ScheduledExecutorService;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import javax.inject.Inject;

import lombok.AccessLevel;
import static com.boatyExcited.Sound.levelup;
import static com.boatyExcited.Sound.combat_task;
import static com.boatyExcited.Sound.collLog;
import static com.boatyExcited.Sound.death;
import static com.boatyExcited.Sound.money;
import static com.boatyExcited.Sound.quest;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.client.RuneLite;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.grounditems.GroundItemsConfig;
import net.runelite.client.plugins.grounditems.GroundItemsPlugin;
import okhttp3.OkHttpClient;
import net.runelite.client.audio.AudioPlayer;

@Slf4j
@PluginDescriptor(
	name = "Boaty Hype man"
)
@PluginDependency(GroundItemsPlugin.class)
public class boatyExcitedPlugin extends Plugin {
	private static final String DELETE_WARNING_FILENAME = "EXTRA_FILES_WILL_BE_DELETED_BUT_FOLDERS_WILL_REMAIN";
	private static final File DOWNLOAD_DIR = new File(RuneLite.RUNELITE_DIR.getPath() + File.separator + "boaty-excited");
	private static final File DELETE_WARNING_FILE = new File(DOWNLOAD_DIR, DELETE_WARNING_FILENAME);

	@Inject
	private Client client;
	@Getter(AccessLevel.PACKAGE)
	@Inject
	private ClientThread clientThread;
	@Inject
	private ScheduledExecutorService executor;
	@Inject
	private ItemManager itemManager;
	private static final Random random = new Random();
	@Inject
	private GroundItemsConfig groundItemsConfig;
	@Inject
	private boatyExcitedConfig config;
	@Inject
	private ConfigManager configManager;
	@Inject
	private AudioPlayer audioPlayer;
//	@Inject
//	private SoundEngine soundEngine;
	@Inject
	private OkHttpClient okHttpClient;
	private final Map<Skill, Integer> oldExperience = new EnumMap<>(Skill.class);
	private static final Pattern COLLECTION_LOG_ITEM_REGEX = Pattern.compile("New item added to your collection log:.*");
	private static final Pattern COMBAT_TASK_REGEX = Pattern.compile("CA_ID:\\d+\\|Congratulations, you've completed an? \\w+ combat task:.*");
	private static final Pattern LEAGUES_TASK_REGEX = Pattern.compile("Congratulations, you've completed an? (?:\\w+) task:.*");
	private static final Pattern QUEST_REGEX = Pattern.compile("Congratulations, you've completed a quest:.*");
	private static final Pattern HIGHLIGHTED_ITEM = Pattern.compile("^(.+)([<>])([0-9]+)$");
	// Pet Drops
	private static final String FOLLOW_PET = "You have a funny feeling like you're being followed";
	private static final String INVENTORY_PET = "You feel something weird sneaking into your backpack";
	private static final String DUPE_PET = "You have a funny feeling like you would have been followed";


	@Override
	protected void startUp() throws Exception {
		executor.submit(() -> {
			SoundFileManager.prepareSoundFiles(okHttpClient);
		});
	}

	@Override
	protected void shutDown() throws Exception {
	}

	private void playSound(Sound sound){
		float gain = 20f * (float) Math.log10(config.announcementVolume() / 100f);
		try {
			audioPlayer.play(SoundFileManager.getSoundFile(sound), gain);
		} catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

	private boolean isLoggedIn = false;
	@Subscribe
	public void onGameStateChanged(GameStateChanged event) {
		if (!this.isLoggedIn) {
			if (event.getGameState().equals(GameState.LOGGED_IN)) {
				if (config.announceLogin()){
					playSound(Sound.LOGIN);
					this.isLoggedIn = true;
					return;
				}
			}
		}
		if (event.getGameState().equals(GameState.LOGIN_SCREEN) && this.isLoggedIn) {
			// This will only occur when we've just signed out.
			// Next, since we have signed out, let's set the flag to false.
			this.isLoggedIn = false;
			return;
		}
	}

	@Provides
	boatyExcitedConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(boatyExcitedConfig.class);
	}

	@SuppressWarnings("ResultOfMethodCallIgnored")
	public static void ensureDownloadDirectoryExists() {
		if (!DOWNLOAD_DIR.exists()) {
			DOWNLOAD_DIR.mkdirs();
		}
		try {
			DELETE_WARNING_FILE.createNewFile();
		} catch (IOException ignored) {
		}
	}
	
	private static boolean itemListContains(final String list, final String itemName, final int quantity)
	{
		final String[] listItems = list.split(",");
		
		for (String listItem: listItems)
		{
			listItem = listItem.trim();
			
			// Check item name first, quicker;
			if (listItem.equalsIgnoreCase(itemName))
			{
				return true;
			}
			
			final Matcher m = HIGHLIGHTED_ITEM.matcher(listItem);
			if (!m.find())
				continue;
			
			if (!m.group(1).equalsIgnoreCase(itemName))
				continue;
			
			final String comparison = m.group(2);
			final int quantityLimit = Integer.parseInt(m.group(3));
			if (comparison.equals(">"))
			{
				if (quantity > quantityLimit)
				{
					return true;
				}
			}
			else
			{
				if (quantity < quantityLimit)
				{
					return true;
				}
			}
		}
		
		return false;
	}

	@Subscribe
	public void onItemSpawned(ItemSpawned itemSpawned) {
		// If sound disabled, exit method without processing
		if (!config.announceDrops())
			return;
		
		final TileItem item = itemSpawned.getItem();
		final int id = item.getId();
		final int quantity = item.getQuantity();
		final ItemComposition itemComposition = itemManager.getItemComposition(id);
		final String itemName = itemComposition.getName();

        // --- Ownership filter ---
        if (config.ownershipFilter()) {
            int ownership = item.getOwnership();
            if (ownership != TileItem.OWNERSHIP_NONE && ownership != TileItem.OWNERSHIP_SELF) {
                return; // Skip non-owned items
            }
        }

		String hiddenItems = "";
		if (!config.dropCustomConfig()) {
			hiddenItems = configManager.getConfiguration("grounditems", "hiddenItems");
		} else {
			hiddenItems = config.dropHiddenItems();
		}
		// Check hidden list, exit if found
		if (itemListContains(hiddenItems, itemName, quantity))
			return;

		// Check notify value first as easiest to check
		int notifyValue = 0;
		if (!config.dropCustomConfig()) {
			notifyValue = Integer.parseInt(configManager.getConfiguration("grounditems", "highValuePrice"));
		} else {
			notifyValue = config.dropAnnouncementValue();
		}
        //Grab price, dependent on what is configured. GE by default.
		int price = 0;
		switch(config.dropAnnouncementType()){
		    case STORE:
		        price = itemComposition.getPrice();
                break;
		    case HA:
		        price = itemComposition.getHaPrice();
                break;
		    case GE:
		    default:
                price = itemManager.getItemPrice(id);

		}

		if (notifyValue <= price) {
			playSound(money[random.nextInt(money.length)]);
			return;
		}

		String highlightedItems = "";
		if (!config.dropCustomConfig()) {
			highlightedItems = configManager.getConfiguration("grounditems", "highlightedItems");
		} else {
			highlightedItems = config.dropHighlightedItems();
		}
		// Check each item in the list individually - prevents false positives due to partial item names, e.g. A drop of "Seaweed" matching highlighted item "Seaweed spore"
		if (itemListContains(highlightedItems, itemName, quantity)){
			playSound(money[random.nextInt(money.length)]);
			return;
		}
	}

	@Subscribe
	public void onActorDeath(ActorDeath actorDeath) {
		if (config.announceDeath() && actorDeath.getActor() == client.getLocalPlayer()) {
			playSound(death[random.nextInt(death.length)]);
		}
	}

	@Subscribe
	public void onHitsplatApplied(HitsplatApplied hitsplatApplied) {
		if (hitsplatApplied.getHitsplat().isMine()) {
			if (hitsplatApplied.getHitsplat().getHitsplatType() == HitsplatID.DAMAGE_MAX_ME_ORANGE ||
					hitsplatApplied.getHitsplat().getHitsplatType() == HitsplatID.DAMAGE_ME_ORANGE ||
					hitsplatApplied.getHitsplat().getHitsplatType() == HitsplatID.DAMAGE_MAX_ME

			) {
				if (config.announceMaxHit()){
					playSound(Sound.MAXHIT);
			}
			}
		}
	}

	@Subscribe
	public void onSoundEffectPlayed(SoundEffectPlayed event) {
		int soundId = event.getSoundId();

		if (config.rubyBoltSpec()) {
			if (soundId == 2911) {
				event.consume();
				playSound(Sound.RUBYSPEC);
				return;
			}
		}
	}

	@Subscribe
	public void onStatChanged(StatChanged statChanged) {
		final Skill skill = statChanged.getSkill();

		final int xpAfter = client.getSkillExperience(skill);
		final int levelAfter = Experience.getLevelForXp(xpAfter);
		final int xpBefore = oldExperience.getOrDefault(skill, -1);
		final int levelBefore = xpBefore == -1 ? -1 : Experience.getLevelForXp(xpBefore);

		oldExperience.put(skill, xpAfter);
		if (xpBefore == -1 || xpAfter <= xpBefore || levelBefore >= levelAfter) {
			return;
		}

		// If we get here, 'skill' was leveled up!
		if (config.announceLevelUp()) {
			playSound(levelup[random.nextInt(levelup.length)]);
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage) {
		if (chatMessage.getType() != ChatMessageType.GAMEMESSAGE && chatMessage.getType() != ChatMessageType.SPAM) {
			return;
		}
		if (config.announceCollectionLog() && COLLECTION_LOG_ITEM_REGEX.matcher(chatMessage.getMessage()).matches()) {
			playSound(collLog[random.nextInt(collLog.length)]);
		} else if (config.announceCombatAchievement() && COMBAT_TASK_REGEX.matcher(chatMessage.getMessage()).matches()) {
			playSound(combat_task[random.nextInt(combat_task.length)]);
		} else if (config.announceQuestCompletion() && QUEST_REGEX.matcher(chatMessage.getMessage()).matches()) {
			playSound(quest[random.nextInt(quest.length)]);
		} else if (config.announcePets() && chatMessage.getMessage().contains(FOLLOW_PET)){
			playSound(Sound.PET);
		} else if (config.announcePets() && chatMessage.getMessage().contains(INVENTORY_PET)){
			playSound(Sound.PET);
		} else if (config.announcePets() && chatMessage.getMessage().contains(DUPE_PET)){
			playSound(Sound.PET);
		} else if (config.announceLeaguesTask() && LEAGUES_TASK_REGEX.matcher(chatMessage.getMessage()).matches()) {
			playSound(combat_task[random.nextInt(combat_task.length)]);
		}
	}
}


package com.boatyExcited;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;


@ConfigGroup(boatyExcitedConfig.GROUP)
public interface boatyExcitedConfig extends Config {
    String GROUP = "boatyExcited";

    enum PriceType
    {
        GE("Grand Exchange"),
        HA("High Alchemy"),
        STORE("Store price");

        private final String displayName;

        PriceType(String displayName)
        {
            this.displayName = displayName;
        }

        @Override
        public String toString()
        {
            return displayName;
        }
    }

    @ConfigItem(
            keyName = "announceLevel",
            name = "Level ups",
            description = "Should Boaty Hype your level ups?",
            position = 0
    )
    default boolean announceLevelUp() {
        return true;
    }

    @ConfigItem(
            keyName = "announceQuests",
            name = "Quest completions",
            description = "Should Boaty Hype your quest completions?",
            position = 1
    )
    default boolean announceQuestCompletion() {
        return true;
    }

    @ConfigItem(
            keyName = "announceCollectionLog",
            name = "New collection log entry",
            description = "Should Boaty make a sound when you fill in a new slot in your collection log? This one relies on you having chat messages (included with the popup option) enabled in game settings!",
            position = 2
    )
    default boolean announceCollectionLog() {
        return true;
    }

    @ConfigItem(
            keyName = "announceCombatAchievement",
            name = "Completed combat achievement tasks",
            description = "Should Boaty announce when you complete a new combat achievement task?",
            position = 3
    )
    default boolean announceCombatAchievement() {
        return true;
    }

    @ConfigItem(
            keyName = "announceDeath",
            name = "When you die",
            description = "Should Boaty mock you on death?",
            position = 4
    )
    default boolean announceDeath() {
        return true;
    }

    @ConfigItem(
            keyName = "announcePets",
            name = "When you get a pet",
            description = "Should Boaty recognise your luck?",
            position = 5
    )
    default boolean announcePets() {
        return true;
    }

    @ConfigItem(
            keyName = "announceDrops",
            name = "When you get an expensive drop",
            description = "Should Boaty recognise your new found wealth?",
            position = 6
    )
    default boolean announceDrops() {
        return true;
    }

    @ConfigSection(
            name = "Drops",
            description = "Configure drop options.",
            position = 7,
            closedByDefault = true
    )
    String drops = "Drops";
    @ConfigItem(
            keyName = "dropCustomConfig",
            name = "Custom config for drops",
            description = "Would you like to set custom config for drops",
            position = 0,
            section = drops
    )
    default boolean dropCustomConfig() {
        return false;
    }

    @ConfigItem(
            keyName = "dropAnnouncementValue",
            name = "Value of drops to announce",
            description = "At what value should Boaty recognise your new found wealth?",
            position = 1,
            section = drops
    )
    default int dropAnnouncementValue() {
        return 1000000;
    }

    @ConfigItem(
            keyName = "dropAnnouncementType",
            name = "Price calculation type",
            description = "What method should be used to calculate the price?",
            position = 2,
            section = drops
    )

    default PriceType dropAnnouncementType() {
        return PriceType.GE;
    }


    @ConfigItem(
            keyName = "dropHiddenItems",
            name = "Items to ignore",
            description = "Which items should Boaty ignore? Format: item1, item2, item3",
            position = 3,
            section = drops
    )
    default String dropHiddenItems() {
        return "Vial, Ashes, Coins, Bones, Bucket, Jug, Seaweed";
    }

    @ConfigItem(
            keyName = "dropHighlightedItems",
            name = "Items to Highlight",
            description = "Which items should Boaty highlight? Format: item1, item2, item3",
            position = 4,
            section = drops
    )
    default String dropHighlightedItems() {
        return "";
    }

    @ConfigItem(
            keyName = "ownershipFilter",
            name = "Only play sound on my drops",
            description = "Only play a sound when the item belongs to you",
            position = 4,
            section = drops
    )
    default boolean ownershipFilter()
    {
        return false; // default: off
    }

    @ConfigItem(
            keyName = "announceLogin",
            name = "When you login",
            description = "Should Boaty recognise you logging in?",
            position = 8
    )
    default boolean announceLogin() {
        return true;
    }

    @ConfigItem(
            keyName = "announceMaxHit",
            name = "When you get a max hit",
            description = "Should Boaty recognise you hitting good?",
            position = 9
    )
    default boolean announceMaxHit() {
        return true;
    }

    @ConfigItem(
            keyName = "rubyBoltSpec",
            name = "When you Ruby bolt spec",
            description = "Should Boaty recognise you speccing with a ruby bolt?",
            position = 10
    )
    default boolean rubyBoltSpec() {
        return true;
    }

    @ConfigItem(
            keyName = "announceLeaguesTask",
            name = "When you get a task in Leagues",
            description = "Should Boaty recognise you getting a leagues task?",
            position = 11
    )
    default boolean announceLeaguesTask() {
        return true;
    }


    @ConfigItem(
            keyName = "volume",
            name = "Volume",
            description = "Adjust how the audio is",
            position = 12
    )
    default int announcementVolume() {
        return 100;
    }
}
package com.boatyExcited;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class boatyExcitedPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(boatyExcitedPlugin.class);
		RuneLite.main(args);
	}
}
