package com.boatyExcited;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class boatyExcitedPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(boatyExcitedPlugin.class);
		RuneLite.main(args);
	}
}
package com.boatyExcited;

public enum Sound {
    LEVEL_UP("levelup.wav"),
    COLLLOG1("collog1.wav"),
    COLLLOG2("collog2.wav"),
    COMBATTASK1("combat_task1.wav"),
    COMBATTASK2("combat_task2.wav"),
    DEATH1("death1.wav"),
    DEATH2("death2.wav"),
    LEVELUP1("levelup1.wav"),
    LEVELUP2("levelup2.wav"),
    LEVELUP3("levelup3.wav"),
    LOGIN("login.wav"),
    MAXHIT("maxhit.wav"),
    MONEY1("money1.wav"),
    MONEY2("money2.wav"),
    MONEY3("money3.wav"),
    MONEY4("money4.wav"),
    PET("pet.wav"),
    QUEST1("quest1.wav"),
    QUEST2("quest2.wav"),
    RUBYSPEC("rubyspec.wav");


    private final String resourceName;

    Sound(String resNam) {
        this(resNam, false);
    }

    Sound(String resNam, boolean streamTroll) {
        resourceName = resNam;
    }

    String getResourceName() {
        return resourceName;
    }


    public static final Sound[] collLog = new Sound[] {
            Sound.COLLLOG1,
            Sound.COLLLOG2,
    };

    public static final Sound[] combat_task = new Sound[] {
            Sound.COMBATTASK1,
            Sound.COMBATTASK2,
    };
    public static final Sound[] death = new Sound[] {
            Sound.DEATH1,
            Sound.DEATH2,
    };
    public static final Sound[] levelup = new Sound[] {
            Sound.LEVELUP1,
            Sound.LEVELUP2,
            Sound.LEVELUP3,
    };
    public static final Sound[] money = new Sound[] {
            Sound.MONEY1,
            Sound.MONEY2,
            Sound.MONEY3,
            Sound.MONEY4,
    };
    public static final Sound[] quest = new Sound[] {
            Sound.QUEST1,
            Sound.QUEST2,
    };
}
package com.boatyExcited;

import com.google.inject.Provides;
import java.io.File;
import java.io.IOException;
import java.util.EnumMap;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.ScheduledExecutorService;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import javax.inject.Inject;

import lombok.AccessLevel;
import static com.boatyExcited.Sound.levelup;
import static com.boatyExcited.Sound.combat_task;
import static com.boatyExcited.Sound.collLog;
import static com.boatyExcited.Sound.death;
import static com.boatyExcited.Sound.money;
import static com.boatyExcited.Sound.quest;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;
import net.runelite.client.RuneLite;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.grounditems.GroundItemsConfig;
import net.runelite.client.plugins.grounditems.GroundItemsPlugin;
import okhttp3.OkHttpClient;

@Slf4j
@PluginDescriptor(
	name = "Boaty Hype man"
)
@PluginDependency(GroundItemsPlugin.class)
public class boatyExcitedPlugin extends Plugin {
	private static final String DELETE_WARNING_FILENAME = "EXTRA_FILES_WILL_BE_DELETED_BUT_FOLDERS_WILL_REMAIN";
	private static final File DOWNLOAD_DIR = new File(RuneLite.RUNELITE_DIR.getPath() + File.separator + "boaty-excited");
	private static final File DELETE_WARNING_FILE = new File(DOWNLOAD_DIR, DELETE_WARNING_FILENAME);

	@Inject
	private Client client;
	@Getter(AccessLevel.PACKAGE)
	@Inject
	private ClientThread clientThread;
	@Inject
	private ScheduledExecutorService executor;
	@Inject
	private ItemManager itemManager;
	private static final Random random = new Random();
	@Inject
	private GroundItemsConfig groundItemsConfig;
	@Inject
	private boatyExcitedConfig config;
	@Inject
	private ConfigManager configManager;
	@Inject
	private SoundEngine soundEngine;
	@Inject
	private OkHttpClient okHttpClient;
	private final Map<Skill, Integer> oldExperience = new EnumMap<>(Skill.class);
	private static final Pattern COLLECTION_LOG_ITEM_REGEX = Pattern.compile("New item added to your collection log:.*");
	private static final Pattern COMBAT_TASK_REGEX = Pattern.compile("Congratulations, you've completed an? (?:\\w+) combat task:.*");
	private static final Pattern LEAGUES_TASK_REGEX = Pattern.compile("Congratulations, you've completed an? (?:\\w+) task:.*");
	private static final Pattern QUEST_REGEX = Pattern.compile("Congratulations, you've completed a quest:.*");
	private static final Pattern HIGHLIGHTED_ITEM = Pattern.compile("^(.+)([<>])([0-9]+)$");
	// Pet Drops
	private static final String FOLLOW_PET = "You have a funny feeling like you're being followed";
	private static final String INVENTORY_PET = "You feel something weird sneaking into your backpack";
	private static final String DUPE_PET = "You have a funny feeling like you would have been followed";


	@Override
	protected void startUp() throws Exception {
		executor.submit(() -> {
			SoundFileManager.ensureDownloadDirectoryExists();
			SoundFileManager.downloadAllMissingSounds(okHttpClient);
		});
	}

	@Override
	protected void shutDown() throws Exception {
	}

	private boolean isLoggedIn = false;
	@Subscribe
	public void onGameStateChanged(GameStateChanged event) {
		if (!this.isLoggedIn) {
			if (event.getGameState().equals(GameState.LOGGED_IN)) {
				if (config.announceLogin()){
					SoundEngine.playSound(Sound.LOGIN, config.announcementVolume());
					this.isLoggedIn = true;
					return;
				}
			}
		}
		if (event.getGameState().equals(GameState.LOGIN_SCREEN) && this.isLoggedIn) {
			// This will only occur when we've just signed out.
			// Next, since we have signed out, let's set the flag to false.
			this.isLoggedIn = false;
			return;
		}
	}

	@Provides
	boatyExcitedConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(boatyExcitedConfig.class);
	}

	@SuppressWarnings("ResultOfMethodCallIgnored")
	public static void ensureDownloadDirectoryExists() {
		if (!DOWNLOAD_DIR.exists()) {
			DOWNLOAD_DIR.mkdirs();
		}
		try {
			DELETE_WARNING_FILE.createNewFile();
		} catch (IOException ignored) {
		}
	}
	
	private static boolean itemListContains(final String list, final String itemName, final int quantity)
	{
		final String[] listItems = list.split(",");
		
		for (String listItem: listItems)
		{
			listItem = listItem.trim();
			
			// Check item name first, quicker;
			if (listItem.equalsIgnoreCase(itemName))
			{
				return true;
			}
			
			final Matcher m = HIGHLIGHTED_ITEM.matcher(listItem);
			if (!m.find())
				continue;
			
			if (!m.group(1).equalsIgnoreCase(itemName))
				continue;
			
			final String comparison = m.group(2);
			final int quantityLimit = Integer.parseInt(m.group(3));
			if (comparison.equals(">"))
			{
				if (quantity > quantityLimit)
				{
					return true;
				}
			}
			else
			{
				if (quantity < quantityLimit)
				{
					return true;
				}
			}
		}
		
		return false;
	}

	@Subscribe
	public void onItemSpawned(ItemSpawned itemSpawned) {
		// If sound disabled, exit method without processing
		if (!config.announceDrops())
			return;
		
		final TileItem item = itemSpawned.getItem();
		final int id = item.getId();
		final int quantity = item.getQuantity();
		final ItemComposition itemComposition = itemManager.getItemComposition(id);
		final String itemName = itemComposition.getName();

		// Check hidden list, exit if found
		final String hiddenItems = configManager.getConfiguration("grounditems", "hiddenItems");
		if (itemListContains(hiddenItems, itemName, quantity))
			return;

		// Check notify value first as easiest to check
		final int notifyValue = Integer.parseInt(configManager.getConfiguration("grounditems", "highValuePrice"));
		if (notifyValue <= itemComposition.getPrice()) {
			SoundEngine.playSound(money[random.nextInt(money.length)], config.announcementVolume());
			return;
		}

		// Check each item in the list individually - prevents false positives due to partial item names, e.g. A drop of "Seaweed" matching highlighted item "Seaweed spore"
		final String highlightedItems = configManager.getConfiguration("grounditems", "highlightedItems");
		if (itemListContains(highlightedItems, itemName, quantity))
		{
			SoundEngine.playSound(money[random.nextInt(money.length)], config.announcementVolume());
			return;
		}
	}

	@Subscribe
	public void onActorDeath(ActorDeath actorDeath) {
		if (config.announceDeath() && actorDeath.getActor() == client.getLocalPlayer()) {
			SoundEngine.playSound(death[random.nextInt(death.length)], config.announcementVolume());
		}
	}

	@Subscribe
	public void onHitsplatApplied(HitsplatApplied hitsplatApplied) {
		if (hitsplatApplied.getHitsplat().isMine()) {
			if (hitsplatApplied.getHitsplat().getHitsplatType() == HitsplatID.DAMAGE_MAX_ME_ORANGE ||
					hitsplatApplied.getHitsplat().getHitsplatType() == HitsplatID.DAMAGE_ME_ORANGE ||
					hitsplatApplied.getHitsplat().getHitsplatType() == HitsplatID.DAMAGE_MAX_ME

			) {
				if (config.announceMaxHit()){
				SoundEngine.playSound(Sound.MAXHIT, config.announcementVolume());
			}
			}
		}
	}

	@Subscribe
	public void onSoundEffectPlayed(SoundEffectPlayed event) {
		int soundId = event.getSoundId();

		if (config.rubyBoltSpec()) {
			if (soundId == 2911) {
				event.consume();
				SoundEngine.playSound(Sound.RUBYSPEC, config.announcementVolume());
				return;
			}
		}
	}

	@Subscribe
	public void onStatChanged(StatChanged statChanged) {
		final Skill skill = statChanged.getSkill();

		final int xpAfter = client.getSkillExperience(skill);
		final int levelAfter = Experience.getLevelForXp(xpAfter);
		final int xpBefore = oldExperience.getOrDefault(skill, -1);
		final int levelBefore = xpBefore == -1 ? -1 : Experience.getLevelForXp(xpBefore);

		oldExperience.put(skill, xpAfter);
		if (xpBefore == -1 || xpAfter <= xpBefore || levelBefore >= levelAfter) {
			return;
		}

		// If we get here, 'skill' was leveled up!
		if (config.announceLevelUp()) {
			soundEngine.playSound(levelup[random.nextInt(levelup.length)], config.announcementVolume());
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage) {
		if (chatMessage.getType() != ChatMessageType.GAMEMESSAGE && chatMessage.getType() != ChatMessageType.SPAM) {
			return;
		}
		if (config.announceCollectionLog() && COLLECTION_LOG_ITEM_REGEX.matcher(chatMessage.getMessage()).matches()) {
			soundEngine.playSound(collLog[random.nextInt(collLog.length)], config.announcementVolume());
		} else if (config.announceCombatAchievement() && COMBAT_TASK_REGEX.matcher(chatMessage.getMessage()).matches()) {
			soundEngine.playSound(combat_task[random.nextInt(combat_task.length)], config.announcementVolume());
		} else if (config.announceQuestCompletion() && QUEST_REGEX.matcher(chatMessage.getMessage()).matches()) {
			soundEngine.playSound(quest[random.nextInt(quest.length)], config.announcementVolume());
		} else if (config.announcePets() && chatMessage.getMessage().contains(FOLLOW_PET)){
			soundEngine.playSound(Sound.PET, config.announcementVolume());
		} else if (config.announcePets() && chatMessage.getMessage().contains(INVENTORY_PET)){
			soundEngine.playSound(Sound.PET, config.announcementVolume());
		} else if (config.announcePets() && chatMessage.getMessage().contains(DUPE_PET)){
			soundEngine.playSound(Sound.PET, config.announcementVolume());
		} else if (config.announceLeaguesTask() && LEAGUES_TASK_REGEX.matcher(chatMessage.getMessage()).matches()) {
			soundEngine.playSound(combat_task[random.nextInt(combat_task.length)], config.announcementVolume());
		}
	}
}


package com.boatyExcited;

import javax.inject.Inject;
import javax.inject.Singleton;
import javax.sound.sampled.*;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.config.ConfigManager;

@Slf4j
public class SoundEngine {
    @Inject
    private static boatyExcitedConfig config;
    private static Clip clip = null;

    public static void playSound(Sound sound, int volume) {
        try {
            InputStream stream = new BufferedInputStream(SoundFileManager.getSoundStream(sound));
            AudioInputStream is = AudioSystem.getAudioInputStream(stream);
            AudioFormat format = is.getFormat();
            DataLine.Info info = new DataLine.Info(Clip.class, format);
            clip = (Clip) AudioSystem.getLine(info);
            clip.open(is);
            setVolume(volume);
            clip.start();
        } catch (LineUnavailableException | UnsupportedAudioFileException | IOException e) {
            log.warn("Sound file error", e);
        }
    }

    private static void setVolume(int value) {

        float vol = value / 100.0f;
        FloatControl gainControl = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);
        gainControl.setValue(20.0f * (float) Math.log10(vol));
    }
}

package com.boatyExcited;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;




@ConfigGroup(boatyExcitedConfig.GROUP)
public interface boatyExcitedConfig extends Config {
    String GROUP = "boatyExcited";

    @ConfigItem(
            keyName = "announceLevel",
            name = "Level ups",
            description = "Should Boaty Hype your level ups?",
            position = 0
    )
    default boolean announceLevelUp() {
        return true;
    }

    @ConfigItem(
            keyName = "announceQuests",
            name = "Quest completions",
            description = "Should Boaty Hype your quest completions?",
            position = 1
    )
    default boolean announceQuestCompletion() {
        return true;
    }

    @ConfigItem(
            keyName = "announceCollectionLog",
            name = "New collection log entry",
            description = "Should Boaty make a sound when you fill in a new slot in your collection log? This one relies on you having chat messages (included with the popup option) enabled in game settings!",
            position = 2
    )
    default boolean announceCollectionLog() {
        return true;
    }

    @ConfigItem(
            keyName = "announceCombatAchievement",
            name = "Completed combat achievement tasks",
            description = "Should Boaty announce when you complete a new combat achievement task?",
            position = 3
    )
    default boolean announceCombatAchievement() {
        return true;
    }

    @ConfigItem(
            keyName = "announceDeath",
            name = "When you die",
            description = "Should Boaty mock you on death?",
            position = 4
    )
    default boolean announceDeath() {
        return true;
    }

    @ConfigItem(
            keyName = "announcePets",
            name = "When you get a pet",
            description = "Should Boaty recognise your luck?",
            position = 5
    )
    default boolean announcePets() {
        return true;
    }

    @ConfigItem(
            keyName = "announceDrops",
            name = "When you get an expensive drop",
            description = "Should Boaty recognise your new found wealth?",
            position = 6
    )
    default boolean announceDrops() {
        return true;
    }

    @ConfigItem(
            keyName = "announceLogin",
            name = "When you login",
            description = "Should Boaty recognise you logging in?",
            position = 7
    )
    default boolean announceLogin() {
        return true;
    }

    @ConfigItem(
            keyName = "announceMaxHit",
            name = "When you get a max hit",
            description = "Should Boaty recognise you hitting good?",
            position = 8
    )
    default boolean announceMaxHit() {
        return true;
    }

    @ConfigItem(
            keyName = "rubyBoltSpec",
            name = "When you Ruby bolt spec",
            description = "Should Boaty recognise you speccing with a ruby bolt?",
            position = 9
    )
    default boolean rubyBoltSpec() {
        return true;
    }

    @ConfigItem(
            keyName = "announceLeaguesTask",
            name = "When you get a task in Leagues",
            description = "Should Boaty recognise you getting a leagues task?",
            position = 10
    )
    default boolean announceLeaguesTask() {
        return true;
    }


    @ConfigItem(
            keyName = "volume",
            name = "Volume",
            description = "Adjust how the audio is",
            position = 11
    )
    default int announcementVolume() {
        return 100;
    }
}
package com.boatyExcited;

import lombok.extern.slf4j.Slf4j;
import net.runelite.client.RuneLite;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;
@Slf4j
public class SoundFileManager {
    private static final File DOWNLOAD_DIR = new File(RuneLite.RUNELITE_DIR.getPath() + File.separator + "boaty-excited");
    private static final String DELETE_WARNING_FILENAME = "EXTRA_FILES_WILL_BE_DELETED_BUT_FOLDERS_WILL_REMAIN";
    private static final File DELETE_WARNING_FILE = new File(DOWNLOAD_DIR, DELETE_WARNING_FILENAME);
    private static final HttpUrl RAW_GITHUB = HttpUrl.parse("https://raw.githubusercontent.com/Devdeve/boatyHypeMan-plugin/sounds");

    @SuppressWarnings("ResultOfMethodCallIgnored")
    public static void ensureDownloadDirectoryExists() {
        if (!DOWNLOAD_DIR.exists()) {
            DOWNLOAD_DIR.mkdirs();
        }
        try {
            DELETE_WARNING_FILE.createNewFile();
        } catch (IOException ignored) { }
    }

    public static void downloadAllMissingSounds(final OkHttpClient okHttpClient) {
        // Get set of existing files in our dir - existing sounds will be skipped, unexpected files (not dirs, some sounds depending on config) will be deleted
        Set<String> filesPresent = getFilesPresent();

        // Download any sounds that are not yet present but desired
        for (Sound sound : getDesiredSoundList(true)) {
            String fileNameToDownload = sound.getResourceName();
            if (filesPresent.contains(fileNameToDownload)) {
                filesPresent.remove(fileNameToDownload);
                continue;
            }

            if (RAW_GITHUB == null) {
                // Hush intellij, it's okay, the potential NPE can't hurt you now
                log.error("C Engineer Completed could not download sounds due to an unexpected null RAW_GITHUB value");
                return;
            }
            HttpUrl soundUrl = RAW_GITHUB.newBuilder().addPathSegment(fileNameToDownload).build();
            Path outputPath = Paths.get(DOWNLOAD_DIR.getPath(), fileNameToDownload);
            try (Response res = okHttpClient.newCall(new Request.Builder().url(soundUrl).build()).execute()) {
                if (res.body() != null)
                    Files.copy(new BufferedInputStream(res.body().byteStream()), outputPath, StandardCopyOption.REPLACE_EXISTING);
            } catch (IOException e) {
                log.error("C Engineer Completed could not download sounds", e);
                return;
            }
        }

        // filesPresent now contains only files in our directory that weren't desired
        // (e.g. old versions of sounds, streamer trolls if setting was toggled)
        // We now delete them to avoid cluttering up disk space
        // We leave dirs behind (getFilesPresent ignores dirs) as we aren't creating those anyway, so they won't build up over time
        for (String filename : filesPresent) {
            File toDelete = new File(DOWNLOAD_DIR, filename);
            toDelete.delete();
        }
    }

    private static Set<String> getFilesPresent() {
        File[] downloadDirFiles = DOWNLOAD_DIR.listFiles();
        if (downloadDirFiles == null || downloadDirFiles.length == 0)
            return new HashSet<>();

        return Arrays.stream(downloadDirFiles)
                .filter(file -> !file.isDirectory())
                .map(File::getName)
                .filter(filename -> !DELETE_WARNING_FILENAME.equals(filename))
                .collect(Collectors.toSet());
    }

    private static Set<Sound> getDesiredSoundList(boolean includeStreamerTrolls) {
        return Arrays.stream(Sound.values())
                .filter(sound -> includeStreamerTrolls)
                .collect(Collectors.toSet());
    }

    public static InputStream getSoundStream(Sound sound) throws FileNotFoundException {
        return new FileInputStream(new File(DOWNLOAD_DIR, sound.getResourceName()));
    }
}

