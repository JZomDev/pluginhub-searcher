package com.github.ldavid432;

import static com.github.ldavid432.GauntletLootUtil.*;
import com.github.ldavid432.config.GauntletChestColor;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicReference;
import javax.annotation.Nullable;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.ItemStack;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.JagexColors;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.util.ImageUtil;

public class GauntletLootOverlay extends Overlay
{
	private final GauntletLootPlugin plugin;
	private final Client client;
	private final ItemManager itemManager;
	private final SpriteManager spriteManager;
	private final GauntletLootConfig config;

	private BufferedImage closeButtonImage;
	private BufferedImage closeButtonHoveredImage;
	private final BufferedImage backgroundImage;
	private final BufferedImage[] chestImageCache = new BufferedImage[GauntletChestColor.values().length];

	private Rectangle overallBounds;
	private Rectangle closeButtonBounds;
	private final Map<Integer, Rectangle> itemBounds = new HashMap<>();

	@Inject
	public GauntletLootOverlay(GauntletLootPlugin plugin, Client client, ItemManager itemManager, SpriteManager spriteManager, GauntletLootConfig config)
	{
		super(plugin);
		this.plugin = plugin;
		this.client = client;
		this.itemManager = itemManager;
		this.spriteManager = spriteManager;
		this.config = config;

		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_WIDGETS);
		setPriority(200.0f);

		backgroundImage = ImageUtil.loadImageResource(getClass(), "background.png");
	}

	@Nullable
	private BufferedImage getCloseButtonImage()
	{
		net.runelite.api.Point rlMousePos = client.getMouseCanvasPosition();
		if (closeButtonBounds != null && closeButtonBounds.contains(new Point(rlMousePos.getX(), rlMousePos.getY())))
		{
			if (closeButtonHoveredImage == null)
			{
				closeButtonHoveredImage = spriteManager.getSprite(1732, 0);
			}
			return closeButtonHoveredImage;
		}
		else
		{
			if (closeButtonImage == null)
			{
				closeButtonImage = spriteManager.getSprite(1731, 0);
			}
			return closeButtonImage;
		}
	}

	@Nullable
	private BufferedImage getChestImage(GauntletChestColor color, String lootSource)
	{
		BufferedImage image = chestImageCache[color.ordinal()];
		if (image == null)
		{
			image = ImageUtil.loadImageResource(getClass(), color.getPath(lootSource));
			chestImageCache[color.getCacheInt(lootSource)] = image;
		}
		return image;
	}

	// Based on https://github.com/lalochazia/missed-clues
	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (!plugin.isDisplayed())
		{
			resetBounds();
			return null;
		}

		final int canvasWidth = client.getCanvasWidth();
		final int canvasHeight = client.getCanvasHeight();

		final int startX = (canvasWidth - BACKGROUND_WIDTH) / 2;
		final int startY = (canvasHeight - BACKGROUND_HEIGHT) / 2;

		if (backgroundImage != null)
		{
			int incX = startX - (BACKGROUND_WIDTH / 2);
			int incY = startY - (BACKGROUND_HEIGHT / 2);
			overallBounds = rectangleFromImage(incX, incY, backgroundImage);
			graphics.drawImage(backgroundImage, incX, incY, null);

			BufferedImage chestImage = getChestImage(config.getChestSpriteColor(), plugin.getLoot().getSource());
			if (chestImage != null)
			{
				graphics.drawImage(chestImage, incX + CHEST_OFFSET, incY + BACKGROUND_HEIGHT - CHEST_HEIGHT - CHEST_OFFSET, null);
			}

			renderTitle(graphics, incX, incY, plugin.getLoot().getSource());

			final BufferedImage closeButtonImage = getCloseButtonImage();
			if (closeButtonImage != null)
			{
				renderCloseButton(graphics, closeButtonImage, incX, incY);
			}

			renderItems(graphics, plugin.getLoot().getItems(), startX - 5, startY - 60);
		}

		return null;
	}

	private void renderTitle(Graphics2D graphics, int incX, int incY, String lootSource)
	{
		String title = config.getChestTitle2().getText(config, lootSource);
		graphics.setFont(FontManager.getRunescapeBoldFont());

		// Measure
		Rectangle titleBounds = graphics.getFontMetrics().getStringBounds(title, graphics).getBounds();
		int titleX = incX + (backgroundImage.getWidth() / 2) - ((int) titleBounds.getWidth() / 2);
		int titleY = incY + 25;

		// Draw shadow
		graphics.setColor(Color.BLACK);
		graphics.drawString(title, titleX + 1, titleY + 1);

		// Draw actual text
		graphics.setColor(JagexColors.DARK_ORANGE_INTERFACE_TEXT);
		graphics.drawString(title, incX + (backgroundImage.getWidth() / 2) - ((int) titleBounds.getWidth() / 2), incY + 25);
	}

	private void renderCloseButton(Graphics2D graphics, BufferedImage closeButtonImage, int incX, int incY)
	{
		int closeX = incX + backgroundImage.getWidth() - closeButtonImage.getWidth() - 8;
		int closeY = incY + 7;

		closeButtonBounds = rectangleFromImage(
			closeX,
			closeY,
			closeButtonImage
		);

		graphics.drawImage(closeButtonImage, closeX, closeY, null);
	}

	private void renderItems(Graphics2D graphics, List<ItemStack> items, int x, int y)
	{
		for (int i = 0; i < items.size(); i++)
		{
			ItemStack stack = items.get(i);
			int itemId = stack.getId();
			int quantity = stack.getQuantity();

			BufferedImage itemImage;
			if (quantity > 1)
			{
				itemImage = itemManager.getImage(itemId, quantity, true);
			}
			else
			{
				itemImage = itemManager.getImage(itemId);
			}

			if (itemImage != null)
			{
				graphics.drawImage(itemImage, x, y, null);

				itemBounds.put(itemId, rectangleFromImage(x, y, itemImage));

				if ((i + 1) % 3 == 0)
				{
					x = x - (itemImage.getWidth() + 5) * 2;
					y += itemImage.getHeight() + 5;
				}
				else
				{
					x += itemImage.getWidth() + 5;
				}
			}
		}
	}

	private void resetBounds()
	{
		overallBounds = null;
		closeButtonBounds = null;
		itemBounds.clear();
	}

	public boolean isInBounds(Point point)
	{
		return overallBounds != null && overallBounds.contains(point);
	}

	public boolean isInCloseButtonBounds(Point point)
	{
		return closeButtonBounds != null && closeButtonBounds.contains(point);
	}

	public Integer getItemClicked(Point point)
	{
		AtomicReference<Integer> id = new AtomicReference<>();

		itemBounds.forEach(
			(key, value) -> {
				if (value.contains(point))
				{
					id.set(key);
				}
			}
		);

		return id.get();
	}
}

package com.github.ldavid432;

import java.util.List;
import javax.annotation.Nonnull;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import net.runelite.client.game.ItemStack;

@Data
@RequiredArgsConstructor
public class GauntletLoot
{
	// Crystalline or Corrupted Hunllef
	@Nonnull
	private final String source;
	@Nonnull
	private final List<ItemStack> items;
}

package com.github.ldavid432;

import com.github.ldavid432.config.GauntletChestColor;
import com.github.ldavid432.config.GauntletTitle;
import com.github.ldavid432.config.GauntletTitle2;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup(GauntletLootConfig.GROUP)
public interface GauntletLootConfig extends Config
{
	String GROUP = "gauntletchestpopup";

	@ConfigItem(
		name = "Click outside to dismiss",
		description = "Allows clicking outside the popup to dismiss it",
		keyName = "clickOutsideToDismiss",
		position = 0
	)
	default boolean isClickOutsideToDismissEnabled()
	{
		return true;
	}

	@ConfigItem(
		name = "Examine items",
		description = "Adds a menu option to examine loot items",
		keyName = "examineItems",
		position = 1
	)
	default boolean isExamineEnabled()
	{
		return true;
	}

	@ConfigSection(
		name = "Chest theme",
		description = "Configure the look of the chest loot UI",
		position = 2
	)
	String chestSection = "chestSection";

	@ConfigItem(
		name = "Chest Sprite Color",
		description = "Select the color for the chest sprite on the UI (Does not recolor the physical chest object)<br>" +
			"'Auto' selects either original or corrupted based on what you completed",
		keyName = "chestSpriteColor",
		section = chestSection,
		position = 0
	)
	default GauntletChestColor getChestSpriteColor()
	{
		return GauntletChestColor.AUTO;
	}

	@ConfigItem(
		name = "Chest Title (legacy)",
		description = "Customize the title text (legacy)",
		keyName = "chestTitleText",
		section = chestSection,
		position = 1,
		hidden = true
	)
	default GauntletTitle getChestTitleLegacy()
	{
		return GauntletTitle.UNSET;
	}

	@ConfigItem(
		name = "",
		description = "",
		keyName = "chestTitleText"
	)
	void setChestTitleLegacy(GauntletTitle title);

	@ConfigItem(
		name = "Chest Title",
		description = "Customize the title text<br>" +
			"Gauntlet - Either 'The Gauntlet' or 'The Corrupted Gauntlet'<br>" +
			"Hunllef - Either 'Crystalline Hunllef' or 'Corrupted Hunllef'<br>" +
			"Custom - Title set in 'Custom title' below ",
		keyName = "chestTitleText2",
		section = chestSection,
		position = 1
	)
	default GauntletTitle2 getChestTitle2()
	{
		return GauntletTitle2.GAUNTLET;
	}

	@ConfigItem(
		name = "",
		description = "",
		keyName = "chestTitleText2"
	)
	void setChestTitle2(GauntletTitle2 title);

	@ConfigItem(
		name = "Custom title",
		description = "Custom title text, used if 'Chest Title' is set to 'Custom'",
		keyName = "chestCustomTitleText",
		section = chestSection,
		position = 2
	)
	default String getChestCustomTitle()
	{
		return "Red Prison";
	}

	@ConfigSection(
		name = "Rare item sounds",
		description = "Choose which items to play the rare item sound for",
		position = 3
	)
	String soundsSection = "soundsSection";

	@ConfigItem(
		name = "Weapon seed",
		description = "Play rare item sound for Weapon seeds",
		keyName = "playWeaponSeedSound",
		section = soundsSection,
		position = 0
	)
	default boolean shouldPlayWeaponSeedSound()
	{
		return false;
	}

	@ConfigItem(
		name = "Armour seed",
		description = "Play rare item sound for Armour seeds",
		keyName = "playArmourSeedSound",
		section = soundsSection,
		position = 1
	)
	default boolean shouldPlayArmourSeedSound()
	{
		return true;
	}

	@ConfigItem(
		name = "Enhanced Weapon seed",
		description = "Play rare item sound for Enhanced Weapon seeds",
		keyName = "playEnhancedSeedSound",
		section = soundsSection,
		position = 2
	)
	default boolean shouldPlayEnhancedSeedSound()
	{
		return true;
	}

}

package com.github.ldavid432.config;

import static com.github.ldavid432.GauntletLootUtil.CORRUPTED_HUNLLEF;
import java.util.Objects;

public enum GauntletChestColor
{
	ORIGINAL,
	CORRUPTED,
	BLUE,
	GREEN,
	PURPLE,
	WHITE,
	YELLOW,
	AUTO;

	private final String path = "chest_" + name().toLowerCase() + ".png";

	public String getPath(String source)
	{
		return getTrueColor(source).path;
	}

	public int getCacheInt(String source)
	{
		return getTrueColor(source).ordinal();
	}

	private GauntletChestColor getTrueColor(String source)
	{
		if (this == AUTO)
		{
			if (Objects.equals(source, CORRUPTED_HUNLLEF))
			{
				return CORRUPTED;
			}
			else
			{
				return ORIGINAL;
			}
		}
		else
		{
			return this;
		}
	}

}

package com.github.ldavid432.config;

@Deprecated
public enum GauntletTitle
{
	GAUNTLET,
	CORRUPTED_GAUNTLET,
	CUSTOM,
	UNSET
}

package com.github.ldavid432.config;

import com.github.ldavid432.GauntletLootConfig;
import com.github.ldavid432.GauntletLootUtil;
import javax.annotation.Nonnull;

public enum GauntletTitle2
{
	GAUNTLET,
	HUNLLEF,
	CUSTOM;

	@Nonnull
	public String getText(GauntletLootConfig config, String source)
	{
		switch (this)
		{
			case GAUNTLET:
				if (source.equals(GauntletLootUtil.CORRUPTED_HUNLLEF))
				{
					return "The Corrupted Gauntlet";
				}
				else
				{
					return "The Gauntlet";
				}
			case CUSTOM:
				return config.getChestCustomTitle();
			case HUNLLEF:
				// Fall-through
			default:
				return source;
		}
	}
}

package com.github.ldavid432;

import com.google.common.collect.ImmutableList;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.util.Arrays;
import java.util.List;
import java.util.function.Predicate;
import net.runelite.api.Client;
import net.runelite.api.MenuEntry;

public class GauntletLootUtil
{
	static Rectangle rectangleFromImage(int x, int y, BufferedImage image)
	{
		return new Rectangle(x, y, image.getWidth(), image.getHeight());
	}

	static boolean anyMenuEntry(Client client, Predicate<MenuEntry> predicate)
	{
		return Arrays.stream(client.getMenu().getMenuEntries()).anyMatch(predicate);
	}

	static final int BACKGROUND_WIDTH = 230;
	static final int BACKGROUND_HEIGHT = 200;

	static final int CHEST_WIDTH = 112;
	static final int CHEST_HEIGHT = 126;
	static final int CHEST_OFFSET = 7;

	public static final String HUNLLEF = "Crystalline Hunllef";
	public static final String CORRUPTED_HUNLLEF = "Corrupted Hunllef";
	public static final List<String> LOOT_SOURCES = ImmutableList.of(CORRUPTED_HUNLLEF, HUNLLEF);

}

package com.github.ldavid432;

import static com.github.ldavid432.GauntletLootUtil.CORRUPTED_HUNLLEF;
import static com.github.ldavid432.GauntletLootUtil.HUNLLEF;
import static com.github.ldavid432.GauntletLootUtil.LOOT_SOURCES;
import static com.github.ldavid432.GauntletLootUtil.anyMenuEntry;
import com.github.ldavid432.config.GauntletTitle;
import com.github.ldavid432.config.GauntletTitle2;
import com.google.common.collect.ImmutableList;
import com.google.inject.Provides;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.util.Objects;
import javax.inject.Inject;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Menu;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.Point;
import net.runelite.api.events.ClientTick;
import net.runelite.api.events.CommandExecuted;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.MenuShouldLeftClick;
import net.runelite.api.gameval.ItemID;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ServerNpcLoot;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.ItemStack;
import net.runelite.client.input.MouseAdapter;
import net.runelite.client.input.MouseListener;
import net.runelite.client.input.MouseManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.loottracker.LootReceived;
import net.runelite.client.ui.JagexColors;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ColorUtil;

@Slf4j
@PluginDescriptor(
	name = "Gauntlet Chest Popup",
	description = "Barrows chest style UI for the gauntlet chest!",
	tags = {"gauntlet", "loot", "chest", "sound", "hunllef", "hunlef"}
)
public class GauntletLootPlugin extends Plugin
{
	private static final int MENU_EXAMINE_ID = -1_337_000;

	@Inject
	private Client client;

	@Inject
	private MouseManager mouseManager;

	@Inject
	private ItemManager itemManager;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private GauntletLootOverlay overlay;

	@Inject
	private GauntletLootConfig config;

	@Getter
	@Setter
	private GauntletLoot loot = null;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
		mouseManager.registerMouseListener(mouseListener);
		client.getCanvas().addKeyListener(keyListener);

		if (config.getChestTitleLegacy() != GauntletTitle.UNSET)
		{
			// Migrate if custom
			if (config.getChestTitleLegacy() == GauntletTitle.CUSTOM)
			{
				config.setChestTitle2(GauntletTitle2.CUSTOM);
			}

			config.setChestTitleLegacy(GauntletTitle.UNSET);
		}
	}

	@Override
	protected void shutDown() throws Exception
	{
		client.getCanvas().removeKeyListener(keyListener);
		mouseManager.unregisterMouseListener(mouseListener);
		overlayManager.remove(overlay);
	}

	boolean isDisplayed()
	{
		return loot != null;
	}

	private void clearLoot()
	{
		loot = null;
	}

	@Subscribe
	public void onCommandExecuted(CommandExecuted event)
	{
		// For debugging and previewing your theme
		if (event.getCommand().equals("gauntletlootpreview"))
		{
			log.debug("Displaying Gauntlet loot preview");

			String source = HUNLLEF;
			if (event.getArguments().length >= 1 && event.getArguments()[0].equalsIgnoreCase("corrupted"))
			{
				source = CORRUPTED_HUNLLEF;
			}

			loot = new GauntletLoot(
				source,
				ImmutableList.of(
					new ItemStack(ItemID.NATURERUNE, 130),
					new ItemStack(ItemID.PRIF_CRYSTAL_SHARD, 8),
					new ItemStack(ItemID.RUNE_FULL_HELM + 1, 4),
					new ItemStack(ItemID.RUNE_PICKAXE + 1, 3)
				)
			);

			checkSound();
		}
	}

	@Subscribe
	public void onServerNpcLoot(ServerNpcLoot event)
	{
		if (event.getComposition() == null ||
			event.getComposition().getName() == null ||
			!LOOT_SOURCES.contains(event.getComposition().getName())
		)
		{
			return;
		}

		log.debug("Displaying Gauntlet popup. Source: {}", event.getComposition().getName());

		loot = new GauntletLoot(event.getComposition().getName(), ImmutableList.copyOf(event.getItems()));

		checkSound();
	}

	private void checkSound()
	{
		if (loot.getItems().stream().anyMatch(this::shouldPlayRareSound))
		{
			log.debug("Playing rare item sound for Gauntlet loot");
			// Muspah rare item sound
			client.playSoundEffect(6765);
		}
	}

	@Provides
	GauntletLootConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(GauntletLootConfig.class);
	}

	private final KeyListener keyListener = new KeyAdapter()
	{
		@Override
		public void keyPressed(KeyEvent e)
		{
			if (isDisplayed() && e.getKeyCode() == KeyEvent.VK_ESCAPE)
			{
				clearLoot();
			}
		}
	};

	private final MouseListener mouseListener = new MouseAdapter()
	{
		@Override
		public MouseEvent mousePressed(MouseEvent event)
		{
			if (isDisplayed() && event.getButton() == 1)
			{
				if (overlay.isInBounds(event.getPoint()))
				{
					if (!client.isMenuOpen())
					{
						if (overlay.isInCloseButtonBounds(event.getPoint()))
						{
							log.debug("Gauntlet popup closed");
							clearLoot();
						}
						else if (config.isExamineEnabled())
						{
							Integer itemId = overlay.getItemClicked(event.getPoint());
							if (itemId != null)
							{
								// Don't consume event so the menu can be triggered
								return event;
							}
						}

						// Either Random click somewhere on the popup or close button
						event.consume();
					}
				}
				else if (config.isClickOutsideToDismissEnabled() &&
					anyMenuEntry(client, (entry -> Objects.equals(entry.getOption(), "Walk here"))))
				{
					// Dismiss if clicked outside in the world (somewhere with 'Walk here')
					//  This prevents dismissing when clicking UI elements like the inventory or chat
					log.debug("Dismissing Gauntlet popup");
					clearLoot();
				}
			}

			return event;
		}
	};

	@Subscribe
	public void onClientTick(ClientTick clientTick)
	{
		if (isDisplayed() && !client.isMenuOpen())
		{
			Point rlMousePos = client.getMouseCanvasPosition();
			java.awt.Point mousePos = new java.awt.Point(rlMousePos.getX(), rlMousePos.getY());

			Integer itemId = overlay.getItemClicked(mousePos);
			if (config.isExamineEnabled() && itemId != null)
			{
				final String itemName = itemManager.getItemComposition(itemId).getName();

				final Menu menu = client.getMenu();

				MenuEntry examine = menu.createMenuEntry(0)
					.setOption("Examine")
					.setTarget(ColorUtil.wrapWithColorTag(itemName, JagexColors.MENU_TARGET))
					.setType(MenuAction.RUNELITE)
					.setItemId(itemId)
					.setIdentifier(MENU_EXAMINE_ID)
					.onClick(
						entry -> {
							log.debug("Examining Gauntlet popup item");
							client.addChatMessage(ChatMessageType.ITEM_EXAMINE, "", getExamineText(entry.getItemId(), itemName), "");
						}
					);

				MenuEntry cancel = menu.createMenuEntry(1)
					.setOption("Cancel")
					.setType(MenuAction.CANCEL);

				menu.setMenuEntries(new MenuEntry[]{cancel, examine});
			}
			else if (overlay.isInCloseButtonBounds(mousePos))
			{
				final Menu menu = client.getMenu();

				MenuEntry close = menu.createMenuEntry(0)
					.setOption("Close")
					.setType(MenuAction.RUNELITE)
					.onClick(entry -> clearLoot());

				MenuEntry cancel = menu.createMenuEntry(1)
					.setOption("Cancel")
					.setType(MenuAction.CANCEL);

				menu.setMenuEntries(new MenuEntry[]{cancel, close});
			}
			else if (overlay.isInBounds(mousePos))
			{
				// Prevent actions from behind the overlay from showing
				final Menu menu = client.getMenu();

				MenuEntry cancel = menu.createMenuEntry(1)
					.setOption("Cancel")
					.setType(MenuAction.CANCEL);

				menu.setMenuEntries(new MenuEntry[]{cancel});
			}
		}
	}

	@Subscribe
	public void onMenuShouldLeftClick(MenuShouldLeftClick event)
	{
		// Make the menu open on a left click when over on an item
		if (anyMenuEntry(client, entry -> entry.getIdentifier() == MENU_EXAMINE_ID))
		{
			event.setForceRightClick(true);
		}
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		// Reset on logout
		if (event.getGameState() == GameState.LOGIN_SCREEN && isDisplayed())
		{
			clearLoot();
		}
	}

	private boolean shouldPlayRareSound(ItemStack stack)
	{
		switch (stack.getId())
		{
			case ItemID.CRYSTAL_SEED_OLD:
				return config.shouldPlayWeaponSeedSound();
			case ItemID.PRIF_ARMOUR_SEED:
				return config.shouldPlayArmourSeedSound();
			case ItemID.PRIF_WEAPON_SEED_ENHANCED:
				return config.shouldPlayEnhancedSeedSound();
			default:
				return false;
		}
	}

	// For the few notable items return their actual examine text, otherwise just return the item name
	private String getExamineText(int itemId, String itemName)
	{
		switch (itemId)
		{
			case ItemID.PRIF_CRYSTAL_SHARD:
				return "A shard of the finest crystal, from the crystal city itself.";
			case ItemID.CRYSTAL_SEED_OLD:
				return "A seed to be sung into the finest crystal weapons.";
			case ItemID.PRIF_ARMOUR_SEED:
				return "A seed to be sung into the finest crystal armour.";
			case ItemID.PRIF_WEAPON_SEED_ENHANCED:
				return "A seed to be sung into the most powerful crystal weaponry.";
			case ItemID.GAUNTLET_CRYSTALLINE_CAPE:
				return "Earned by only the most accomplished warriors of Prifddinas.";
			default:
				return itemName;
		}
	}
}

package com.github.ldavid432;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class GauntletLootTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(GauntletLootPlugin.class);
		RuneLite.main(args);
	}
}

