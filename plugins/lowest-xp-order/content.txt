package com.lowest.experience;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ExamplePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(LowestExperiencePlugin.class);
		RuneLite.main(args);
	}
}
package com.lowest.experience;

import java.awt.*;

import javax.swing.*;
import javax.swing.border.EmptyBorder;

import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.Text;

public final class DropDownRenderer extends DefaultListCellRenderer
{
    @Override
    public Component getListCellRendererComponent(JList<?> list, Object o, int i, boolean isSelected, boolean b1) {
        setBackground(ColorScheme.DARK_GRAY_COLOR);
        setForeground(Color.WHITE);
        setBorder(new EmptyBorder(0, 0, 0, 0));

        if (!isSelected) {
            setBackground(ColorScheme.DARK_GRAY_COLOR);
            setForeground(Color.WHITE);
        } else {
            setBackground(list.getBackground());
            setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        }

        setText(Text.titleCase((Enum) o));

        return this;
    }
}
package com.lowest.experience;

import java.awt.image.BufferedImage;
import java.util.EnumMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.inject.Inject;

import com.google.inject.Provides;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Skill;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.StatChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

@Slf4j
@PluginDescriptor(
	name = "Lowest Experience",
	description = "Easily see where you're slacking",
	tags = {"panel"}
)
public class LowestExperiencePlugin extends Plugin
{

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	private Client client;

	@Inject
	private LowestExperienceConfig config;

	private NavigationButton navButton;

	private boolean initialized = false;
	private boolean initialize = false;
	private LowestExperiencePanel panel;

	private final EnumMap<Skill, Integer> currentXpMap = new EnumMap<>(Skill.class);

	@Override
	protected void startUp() {

		panel = new LowestExperiencePanel(config);

		final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "lowest_level_icon.png");

		navButton = NavigationButton.builder()
				.tooltip("Lowest Experience")
				.icon(icon)
				.panel(panel)
				.priority(11)
				.build();

		clientToolbar.addNavigation(navButton);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event) {
		GameState state = event.getGameState();
		if (state == GameState.LOGGING_IN) {
			initialize = true;
		}
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		if (initialize && !initialized) {
			initialized = true;

			// Initialize the tracker with the initial xp if not already initialized
			for (Skill skill : Skill.values())
			{
				if (skill == Skill.OVERALL)
				{
					continue;
				}

				int currentXp = client.getSkillExperience(skill);
				currentXpMap.put(skill, currentXp);
			}
			rebuildList();
		}
	}

	@Subscribe
	public void onStatChanged(StatChanged statChanged) {
		if(initialized) {
			final Skill skill = statChanged.getSkill();
			final int currentXp = statChanged.getXp();

			if(currentXp >= 0) {
				currentXpMap.put(skill, currentXp);
			}

			rebuildList();
		}
	}

	private void rebuildList() {
		panel.setCurrentXpMap(currentXpMap);
	}

	@Override
	protected void shutDown() {
		clientToolbar.removeNavigation(navButton);
	}

	@Provides
	LowestExperienceConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(LowestExperienceConfig.class);
	}
}

package com.lowest.experience;

import java.awt.*;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.EnumMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.swing.*;
import javax.swing.border.EmptyBorder;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Skill;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;

@Slf4j
public class LowestExperiencePanel extends PluginPanel {

    private final LowestExperienceConfig config;
    private Skill selectedSkill;
    private final JComboBox<Skill[]> skillDropdown;
    private final int DROPDOWN_HEIGHT = 20;
    private final JPanel listContainer = new JPanel();
    private List<SkillRow> rows = new ArrayList<>();
    private final Map<Skill, SkillRow> rowMap = new EnumMap<>(Skill.class);
    private EnumMap<Skill, Integer> xpMap;

    private static final Skill[] LOWEST_ORDER = new Skill[]{
            Skill.RUNECRAFT,
            Skill.AGILITY,
            Skill.SMITHING,
            Skill.CONSTRUCTION,
            Skill.MINING,
            Skill.HERBLORE,
            Skill.HUNTER,
            Skill.CRAFTING,
            Skill.FARMING,
            Skill.SLAYER,
            Skill.PRAYER,
            Skill.FISHING,
            Skill.THIEVING,
            Skill.WOODCUTTING,
            Skill.FIREMAKING,
            Skill.FLETCHING,
            Skill.MAGIC,
            Skill.DEFENCE,
            Skill.ATTACK,
            Skill.COOKING,
            Skill.RANGED,
            Skill.HITPOINTS,
            Skill.STRENGTH
    };

    public LowestExperiencePanel(LowestExperienceConfig config) {
        this.config = config;
        selectedSkill = config.defaultSkill();
        skillDropdown = makeNewDropdown();

        getParent().setLayout(new BorderLayout());
        getParent().add(this, BorderLayout.CENTER);

        setLayout(new BorderLayout());
        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        setBackground(ColorScheme.DARK_GRAY_COLOR);

        add(levelSelectContainer(), BorderLayout.NORTH);
        add(skillOrderContainer(), BorderLayout.CENTER);

        selectSkill(selectedSkill);
    }

    private JPanel skillOrderContainer() {
        listContainer.setLayout(new GridLayout(0, 1));
        listContainer.setBackground(ColorScheme.LIGHT_GRAY_COLOR.darker());
        Arrays.stream(Skill.values())
                .forEach(skill -> {
                    SkillRow row = new SkillRow(skill, 0, config.displayCurrentXp(), config.displayXpDifference());
                    rows.add(row);
                    rowMap.put(skill, row);
                    listContainer.add(row);
        });
        return listContainer;
    }

    public void updateSkillXp() {
        xpMap.forEach((key, value) -> {
            if(rowMap.containsKey(key)) {
                rowMap.get(key).setXpForSkill(value);
            }
        });
        listContainer.removeAll();
        rows = rows.stream()
                .sorted(Comparator.comparing(SkillRow::getXpForSkill, Integer::compare))
                .collect(Collectors.toList());
        Integer currentXp = xpMap.get(selectedSkill);
        rows.forEach(row -> {
            row.computeDifference(currentXp);
            listContainer.add(row);
        });
        listContainer.revalidate();
        listContainer.repaint();
    }

    private JPanel levelSelectContainer() {
        JPanel levelsContainer = new JPanel();
        levelsContainer.setLayout(new BorderLayout());

        levelsContainer.setBorder(new EmptyBorder(10, 10, 10, 10));

        JPanel filtersPanel = makeDropdownPanel(skillDropdown);
        filtersPanel.setPreferredSize(new Dimension(PANEL_WIDTH, DROPDOWN_HEIGHT));

        levelsContainer.add(filtersPanel, BorderLayout.NORTH);
        return levelsContainer;
    }

    private JComboBox<Skill[]> makeNewDropdown() {
        JComboBox<Skill[]> dropdown = new JComboBox(LOWEST_ORDER);
        dropdown.setFocusable(false);
        for(int i=0; i < LOWEST_ORDER.length; i++) {
            if((LOWEST_ORDER[i]).equals(selectedSkill)) {
                dropdown.setSelectedIndex(i);
                break;
            }
        }
        dropdown.setForeground(Color.WHITE);
        dropdown.setRenderer(new DropDownRenderer());
        dropdown.addItemListener(e ->
        {
            if (e.getStateChange() == ItemEvent.SELECTED)
            {
                Skill skill = (Skill) e.getItem();
                unselectSkill(selectedSkill);
                selectedSkill = skill;
                selectSkill(selectedSkill);
                updateSkillXp();
            }
        });

        return dropdown;
    }

    private void unselectSkill(Skill skill) {
        rowMap.get(skill).unselect();
    }

    private void selectSkill(Skill skill) {
        rowMap.get(skill).select();
    }

    private JPanel makeDropdownPanel(JComboBox<Skill[]> dropdown) {
        JLabel filterName = new JLabel("Skills");
        filterName.setForeground(Color.WHITE);

        JPanel filtersPanel = new JPanel();
        filtersPanel.setLayout(new BorderLayout());
        filtersPanel.setMinimumSize(new Dimension(PANEL_WIDTH, 0));
        filtersPanel.add(filterName, BorderLayout.CENTER);
        filtersPanel.add(dropdown, BorderLayout.EAST);

        return filtersPanel;
    }

    public void setCurrentXpMap(Map<Skill, Integer> currentXpMap) {
        xpMap = (EnumMap<Skill, Integer>) currentXpMap;
        updateSkillXp();
    }
}

package com.lowest.experience;

import net.runelite.api.Skill;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("LowestExperience")
public interface LowestExperienceConfig extends Config
{

	@ConfigItem(
			keyName = "defaultSkill",
			name = "Default Skill",
			description = "default target skill to be the lowest",
			position = 1
	)
	default Skill defaultSkill()
	{
		return Skill.RUNECRAFT;
	}

	@ConfigItem(
			keyName = "displayCurrentXp",
			name = "Display current xp",
			description = "Should the current xp column be displayed",
			position = 1
	)
	default Boolean displayCurrentXp()
	{
		return false;
	}

	@ConfigItem(
			keyName = "displayXpDifference",
			name = "Display difference",
			description = "Should the display difference between lowest xp and each xp column be displayed",
			position = 1
	)
	default Boolean displayXpDifference()
	{
		return true;
	}


}

package com.lowest.experience;

import java.awt.*;
import java.text.NumberFormat;

import javax.swing.*;
import javax.swing.border.EmptyBorder;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Skill;
import net.runelite.client.ui.ColorScheme;

@Slf4j
public class SkillRow extends JPanel {
    private final Skill skill;
    @Getter
    private int xpForSkill;
    private int xpDifference;
    private JLabel xpLabel;
    private JLabel xpDifferenceLabel;

    private static final Color HIGHLIGHT_COLOR = ColorScheme.MEDIUM_GRAY_COLOR;
    private static final Color DEFAULT_BACKGROUND = ColorScheme.DARK_GRAY_COLOR;

    public SkillRow(Skill skill, int xpForSkill, boolean displayCurrentXp, boolean displayXpDifference) {
        this.skill = skill;
        this.xpForSkill = xpForSkill;
        this.xpDifference = 0;

        setLayout(new BoxLayout(this, BoxLayout.X_AXIS));
        setBorder(new EmptyBorder(2, 0, 2, 0));

        JPanel skillNameField = buildSkillNameField();
        skillNameField.setOpaque(false);

        JPanel xpField = buildXpNameField();
        skillNameField.setOpaque(false);

        JPanel xpDifferenceField = buildXpDifferenceField();
        xpDifferenceField.setOpaque(false);

        add(skillNameField, BorderLayout.WEST);
        if(displayCurrentXp) {
            add(xpField, BorderLayout.CENTER);
        }
        if(displayXpDifference) {
            add(xpDifferenceField, BorderLayout.EAST);
        }
    }

    private JPanel buildXpNameField() {
        JPanel column = new JPanel();
        column.setBorder(new EmptyBorder(0, 5, 0, 5));

        xpLabel = new JLabel(formattedXp(xpForSkill));

        column.add(xpLabel, BorderLayout.LINE_START);

        return column;
    }

    private JPanel buildSkillNameField() {
        JPanel column = new JPanel();
        column.setBorder(new EmptyBorder(0, 5, 0, 5));

        JLabel skillNameLabel = new JLabel(skill.getName());

        column.add(skillNameLabel, BorderLayout.LINE_START);

        return column;
    }

    private JPanel buildXpDifferenceField() {
        JPanel column = new JPanel();
        column.setBorder(new EmptyBorder(0, 5, 0, 5));

        xpDifferenceLabel = new JLabel(formattedXpDifference());

        column.add(xpDifferenceLabel, BorderLayout.LINE_END);

        return column;
    }

    private String formattedXpDifference() {
        return formattedXp(xpDifference);
    }

    public void setXpForSkill(int xpForSkill) {
        this.xpForSkill = xpForSkill;
        xpLabel.setText(formattedXp(xpForSkill));
    }

    public void computeDifference(int xpForLowestSkill) {
        this.xpDifference = xpForSkill - xpForLowestSkill;
        xpDifferenceLabel.setText(formattedXpDifference());
    }

    private String formattedXp(int xp) {
        return NumberFormat.getIntegerInstance().format(xp);
    }

    public void select() {
        setBackground(HIGHLIGHT_COLOR);
        repaint();
    }

    public void unselect() {
        setBackground(DEFAULT_BACKGROUND);
        repaint();
    }

}

