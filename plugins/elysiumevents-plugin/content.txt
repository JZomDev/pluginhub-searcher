package com.clanevents;

public enum State {
    IDLE,
    LOADING,
    COMPLETED,
    ERROR,
}

/*
 * Copyright (c) 2022, cmsu224 <https://github.com/cmsu224>
 * Copyright (c) 2022, Brianmm94 <https://github.com/Brianmm94>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.clanevents;

import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.LayoutableRenderableEntity;

import javax.inject.Inject;
import java.awt.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.List;

import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class ClanEventsOverlay extends OverlayPanel
{
    @Inject
    private ClanEventsConfig config;

    @Inject
    private ClanEventsOverlay()
    {
        setPosition(OverlayPosition.TOP_CENTER);
        getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Clan Events overlay"));
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        String text = config.eventPass() + " " + config.challengePass();
        Color passColor = config.passColor();
        Color timeColor = config.timeColor();

        if(passColor.toString().equals(timeColor.toString())){
          passColor = Color.green;
          timeColor = Color.WHITE;
        }

        if (!text.equals(" ") && !text.equals("  ") && config.overlay())
        {
            panelComponent.getChildren().add(LineComponent.builder()
                    .left(text)
                    .leftColor(passColor)
                    .build());

            if (config.dtm())
            {
                text = text + " " + localToGMT();
                List<LayoutableRenderableEntity> elem = panelComponent.getChildren();
                ((LineComponent) elem.get(0)).setRight(localToGMT());
                ((LineComponent) elem.get(0)).setRightColor(timeColor);
            }

            panelComponent.setPreferredSize(new Dimension(graphics.getFontMetrics().stringWidth(text) + 10, 0));
        }
        return super.render(graphics);
    }

    public static String localToGMT() {
        Date date = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm");
        sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
        return sdf.format(date) + " UTC";
    }
}

/*
 * Copyright (c) 2022, cmsu224 <https://github.com/cmsu224>
 * Copyright (c) 2022, Brianmm94 <https://github.com/Brianmm94>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.clanevents;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum KeyName
{
    KN_1("1", 1),
    KN_2("2", 2),
    KN_3("3", 3),
    KN_4("4", 4),
    KN_5("5", 5),
    KN_6("6", 6),
    KN_7("7", 7),
    KN_UP("UP", 8),
    KN_DOWN("DOWN", 9),
    KN_KEYBIND("KEYBIND", 10);

    private final String name;
    private final int value;

    @Override
    public String toString()
    {
        return name;
    }
}


package com.clanevents;

import com.google.api.services.sheets.v4.model.ValueRange;
import lombok.RequiredArgsConstructor;
import lombok.Value;

@Value
@RequiredArgsConstructor
public class SheetValueRange {
    String sheet;
    ValueRange valueRange;
}

/*
 * Copyright (c) 2022, cmsu224 <https://github.com/cmsu224>
 * Copyright (c) 2022, Brianmm94 <https://github.com/Brianmm94>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.clanevents;

import com.clanevents.constants.EntrySelect;
import net.runelite.client.config.*;

import java.awt.*;
import java.awt.event.KeyEvent;

@ConfigGroup(ClanEventsPlugin.CONFIG_GROUP)
public interface ClanEventsConfig extends Config
{
	int REFRESH_PERIOD_MIN = 5;
	int REFRESH_PERIOD_MAX = 1440;

	@ConfigSection(
			name = "Overlay",
			description = "Overlay configuration.",
			position = 0
	)
	String overlaySection = "Overlay section";

	@ConfigSection(
			name = "Plugin Panel",
			description = "Plugin panel configuration",
			position = 1
	)
	String panelSection = "Plugin Panel section";

	@ConfigItem(
			position = 1,
			keyName = "overlay",
			name = "Display Overlay",
			description = "Displays the overlay on your game screen.",
			section = overlaySection
	)
	default boolean overlay()
	{
		return false;
	}

	@ConfigItem(
			position = 2,
			keyName = "dtm",
			name = "Date & Time",
			description = "Adds the date and time to the overlay.",
			section = overlaySection
	)
	default boolean dtm()
	{
		return true;
	}

	@ConfigItem(
			position = 3,
			keyName = "eventPass",
			name = "Event Password:",
			description = "Adds the event password to the overlay.",
			section = overlaySection
	)
	default String eventPass()
	{
		return "";
	}

	@ConfigItem(
			position = 4,
			keyName = "challengePass",
			name = "Challenge Password:",
			description = "Adds the challenge password to the overlay.",
			section = overlaySection
	)
	default String challengePass()
	{
		return "";
	}

	@ConfigItem(
			position = 5,
			keyName = "disclaimer",
			name = "Colors below must be different",
			description = "The Password Color and the Date & Time Color must be different.",
			section = overlaySection
	)
	default void disclaimer() {}

	@ConfigItem(
			position = 6,
			keyName = "passColor",
			name = "Password Color",
			description = "The color of the Event Password and Challenge Password.",
			section = overlaySection
	)
	default Color passColor()
	{
		return Color.GREEN;
	}

	@ConfigItem(
			position = 7,
			keyName = "timeColor",
			name = "Date & Time Color",
			description = "The color of the Date & Time.",
			section = overlaySection
	)
	default Color timeColor()
	{
		return Color.WHITE;
	}

	@ConfigItem(
			position = 1,
			keyName = "sheetId",
			name = "Google Sheet ID:",
			description = "ID of the Google Sheet to read.",
			section = panelSection
	)
	default String sheetId() { return "1YMcXxSL3s1NEzsPVMMkPn7EdGNFKENiwqNyDKkJTO80"; }

	@ConfigItem(
			position = 2,
			keyName = "apiKey",
			name = "Google API Key:",
			description = "Key used to access the Google Sheet (ask your clan for one).",
			section = panelSection
	)
	default String apiKey() { return ""; }

	@ConfigItem(
			position = 4,
			keyName = "autoRefresh",
			name = "Automatic Refresh",
			description = "Enables automatic refreshing of the Clan Events panel.",
			section = panelSection
	)
	default boolean autoRefresh() { return false; }

	@Range(
			min = REFRESH_PERIOD_MIN,
			max = REFRESH_PERIOD_MAX
	)
	@ConfigItem(
			position = 5,
			keyName = "refreshPeriod",
			name = "Refresh Period (min)",
			description = "(5-1440) How often the Automatic Refresh should occur in minutes.",
			section = panelSection
	)
	@Units(Units.MINUTES)
	default int refreshPeriod() { return 10; }

	@ConfigItem(
			position = 6,
			keyName = "entryKeybind",
			name = "Entry Select Keybind",
			description = "Sets the keybind used for opening the entry menu in the Clan Events panel.",
			section = panelSection
	)
	default Keybind entryKeybind() { return new Keybind(KeyEvent.VK_SPACE, 0); }

	@ConfigItem(
			position = 7,
			keyName = "entry_1",
			name = "Entry 1",
			description = "Selects what to show for entry 1 of the Clan Events panel.",
			section = panelSection
	)
	default EntrySelect entry_1() { return EntrySelect.HOME; }

	@ConfigItem(
			position = 8,
			keyName = "entry_2",
			name = "Entry 2",
			description = "Selects what to show for entry 2 of the Clan Events panel.",
			section = panelSection
	)
	default EntrySelect entry_2() { return EntrySelect.HUB; }

	@ConfigItem(
			position = 9,
			keyName = "entry_3",
			name = "Entry 3",
			description = "Selects what to show for entry 3 of the Clan Events panel.",
			section = panelSection
	)
	default EntrySelect entry_3() { return EntrySelect.SOTW; }

	@ConfigItem(
			position = 10,
			keyName = "entry_4",
			name = "Entry 4",
			description = "Selects what to show for entry 4 of the Clan Events panel.",
			section = panelSection
	)
	default EntrySelect entry_4() { return EntrySelect.BOTW; }

	@ConfigItem(
			position = 11,
			keyName = "entry_5",
			name = "Entry 5",
			description = "Selects what to show for entry 5 of the Clan Events panel.",
			section = panelSection
	)
	default EntrySelect entry_5() { return EntrySelect.HOF_OVERALL; }

	@ConfigItem(
			position = 12,
			keyName = "entry_6",
			name = "Entry 6",
			description = "Selects what to show for entry 6 of the Clan Events panel.",
			section = panelSection
	)
	default EntrySelect entry_6() { return EntrySelect.HOF_KC; }

	@ConfigItem(
			position = 13,
			keyName = "entry_7",
			name = "Entry 7",
			description = "Selects what to show for entry 7 of the Clan Events panel.",
			section = panelSection
	)
	default EntrySelect entry_7() { return EntrySelect.HOF_PB; }
}
/*
 * Copyright (c) 2022, cmsu224 <https://github.com/cmsu224>
 * Copyright (c) 2022, Brianmm94 <https://github.com/Brianmm94>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.clanevents;

import java.awt.*;
import java.awt.event.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.*;
import javax.swing.*;

import com.clanevents.components.combobox.ComboBoxIconEntry;
import com.clanevents.components.combobox.ComboBoxIconListRenderer;
import com.clanevents.constants.EntrySelect;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.Timer;
import javax.swing.border.EmptyBorder;
import javax.swing.table.*;

import net.runelite.client.ui.PluginPanel;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.LinkBrowser;
import net.runelite.client.util.SwingUtil;

@Slf4j
class ClanEventsPanel extends PluginPanel implements PropertyChangeListener {
    private final JButton buttonArea = createRefreshButton();
    private final JPanel ssArea = new JPanel();
    private final Service service = new Service();
    private final GoogleSheet sheet = new GoogleSheet();

    private Boolean openedTab = false;
    final JComboBox<ComboBoxIconEntry> dropdown = new JComboBox<>();
    final ComboBoxIconListRenderer renderer = new ComboBoxIconListRenderer();
    private final ActionListener timertask = event -> {
        if (!openedTab) {
            service.refreshData();
        } else {
            openedTab = false;
        }
    };

    private final Timer timer = new Timer(0, timertask);

    public void init(ClanEventsConfig config) {
        if (config.apiKey().equals("") || config.sheetId().equals("")) {
            JTextArea text = new JTextArea();
            text.append("Enter a valid Google Sheet ID " + "\n" + "or API Key in the config.");
            this.add(text);
            return;
        }
        InputMap im = getInputMap(WHEN_IN_FOCUSED_WINDOW);
        ActionMap am = getActionMap();

        //Timer task setup
        if (config.autoRefresh()) {
            timer.setRepeats(true);
            timer.setDelay(config.refreshPeriod() * 1000 * 60);
        } else {
            timer.setRepeats(false);
        }

        //Disable to panel's scrollpane to remove its up and down arrow scrolling
        this.getScrollPane().setEnabled(false);
        //Disable tab as a traversal key
        this.setFocusTraversalKeysEnabled(false);

        //Add a mouselistener for getting focus so that keybindings work
        this.getParent().addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                requestFocus();
            }
        });

        //Google sheet setup
        sheet.setKey(config.apiKey());
        sheet.setSheetId(config.sheetId());

        //Remove the annoying "focus paint" effect on the dropdown
        dropdown.setFocusable(false);

        //Dropdown setup
        dropdown.setForeground(Color.WHITE);
        dropdown.setRenderer(renderer);

        //Remove the item listener before removing all items
        if (dropdown.getItemListeners().length > 0) {
            dropdown.removeItemListener(dropdown.getItemListeners()[0]);
        }
        dropdown.removeAllItems();

        //Dropdown entries
        setEntry(config.entry_1());
        setEntry(config.entry_2());
        setEntry(config.entry_3());
        setEntry(config.entry_4());
        setEntry(config.entry_5());
        setEntry(config.entry_6());
        setEntry(config.entry_7());

        //Select the first entry
        dropdown.setSelectedIndex(0);

        //Dropdown selection listener
        dropdown.addItemListener(event ->
        {
            if (event.getStateChange() == ItemEvent.SELECTED) {
                drawDataPanel();
            }
        });

        //Add dropdown to the panel
        this.add(dropdown);

        //Add refresh button to the panel
        this.add(buttonArea, BorderLayout.NORTH);

        //Keybinding inputs
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_1, 0), KeyName.KN_1);
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_NUMPAD1, 0), KeyName.KN_1);
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_2, 0), KeyName.KN_2);
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_NUMPAD2, 0), KeyName.KN_2);
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_3, 0), KeyName.KN_3);
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_NUMPAD3, 0), KeyName.KN_3);
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_4, 0), KeyName.KN_4);
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_NUMPAD4, 0), KeyName.KN_4);
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_5, 0), KeyName.KN_5);
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_NUMPAD5, 0), KeyName.KN_5);
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_6, 0), KeyName.KN_6);
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_NUMPAD6, 0), KeyName.KN_6);
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_7, 0), KeyName.KN_7);
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_NUMPAD7, 0), KeyName.KN_7);
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0), KeyName.KN_UP);
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_KP_UP, 0), KeyName.KN_UP);
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0), KeyName.KN_DOWN);
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_KP_DOWN, 0), KeyName.KN_DOWN);
        im.put(KeyStroke.getKeyStroke(config.entryKeybind().getKeyCode(), 0), KeyName.KN_KEYBIND);

        //Keybinding actions
        am.put(KeyName.KN_1, new KeyAction(KeyName.KN_1, config));
        am.put(KeyName.KN_2, new KeyAction(KeyName.KN_2, config));
        am.put(KeyName.KN_3, new KeyAction(KeyName.KN_3, config));
        am.put(KeyName.KN_4, new KeyAction(KeyName.KN_4, config));
        am.put(KeyName.KN_5, new KeyAction(KeyName.KN_5, config));
        am.put(KeyName.KN_6, new KeyAction(KeyName.KN_6, config));
        am.put(KeyName.KN_7, new KeyAction(KeyName.KN_7, config));
        am.put(KeyName.KN_UP, new KeyAction(KeyName.KN_UP, config));
        am.put(KeyName.KN_DOWN, new KeyAction(KeyName.KN_DOWN, config));
        am.put(KeyName.KN_KEYBIND, new KeyAction(KeyName.KN_KEYBIND, config));

        //Set the layout for the plugin's main panel
        ssArea.setLayout(new BoxLayout(ssArea, BoxLayout.Y_AXIS));

        //Add the plugin's main panel
        this.add(ssArea, BorderLayout.NORTH);
        service.addListener(this);
        if (service.state.equals(State.IDLE)) service.refreshData();
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals("state") && evt.getNewValue() != evt.getOldValue()) {
            State currentState = (State) evt.getNewValue();
            updateButtonAsync(currentState);
            if (Objects.requireNonNull(currentState) == State.COMPLETED) {
                drawDataPanel();
            } else if (Objects.requireNonNull(currentState) == State.ERROR) {
                updateButtonAsync(State.ERROR);
                try {
                    TimeUnit.SECONDS.sleep(3);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                updateButtonAsync(State.COMPLETED);
            }
        }
    }

    private void drawDataPanel() {
        Optional.ofNullable((ComboBoxIconEntry) dropdown.getSelectedItem())
                .flatMap(ComboBoxIconEntry::getData)
                .ifPresent(this::updateUiAfterAPI);
    }

    private class KeyAction extends AbstractAction {

        KeyName key;
        ClanEventsConfig config;

        KeyAction(KeyName key, ClanEventsConfig config) {
            this.key = key;
            this.config = config;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            int selected;
            switch (key) {
                case KN_1:
                case KN_2:
                case KN_3:
                case KN_4:
                case KN_5:
                case KN_6:
                case KN_7:
                    if (dropdown.isPopupVisible()) {
                        if (dropdown.getItemCount() >= key.getValue()) {
                            dropdown.setSelectedIndex(key.getValue() - 1);
                            dropdown.setPopupVisible(false);
                        }
                    }
                    break;
                case KN_UP:
                    if (dropdown.isPopupVisible()) {
                        selected = dropdown.getSelectedIndex();
                        if (selected == 0) {
                            dropdown.setSelectedIndex(dropdown.getItemCount() - 1);
                        } else {
                            dropdown.setSelectedIndex(selected - 1);
                        }
                        dropdown.setPopupVisible(false);
                    }
                    break;
                case KN_DOWN:
                    if (dropdown.isPopupVisible()) {
                        selected = dropdown.getSelectedIndex();
                        if (selected == (dropdown.getItemCount() - 1)) {
                            dropdown.setSelectedIndex(0);
                        } else {
                            dropdown.setSelectedIndex(selected + 1);
                        }
                        dropdown.setPopupVisible(false);
                    }
                    break;
                case KN_KEYBIND:
                    dropdown.setPopupVisible(!dropdown.isPopupVisible());
                    break;
            }
        }
    }

    public void setEntry(EntrySelect entry) {

        BufferedImage icon;

        switch (entry) {
            case HOME:
                icon = ImageUtil.loadImageResource(getClass(), "home.png");
                dropdown.addItem(new ComboBoxIconEntry(new ImageIcon(icon), " Home", Optional.of("home")));
                break;
            case HUB:
                icon = ImageUtil.loadImageResource(getClass(), "hub.png");
                dropdown.addItem(new ComboBoxIconEntry(new ImageIcon(icon), " Clan Hub", Optional.of("hub")));
                break;
            case SOTW:
                icon = ImageUtil.loadImageResource(getClass(), "sotw.png");
                dropdown.addItem(new ComboBoxIconEntry(new ImageIcon(icon), " Skill of the Week", Optional.of("sotw")));
                break;
            case BOTW:
                icon = ImageUtil.loadImageResource(getClass(), "botw.png");
                dropdown.addItem(new ComboBoxIconEntry(new ImageIcon(icon), " Boss of the Week", Optional.of("botw")));
                break;
            case HOF_OVERALL:
                icon = ImageUtil.loadImageResource(getClass(), "hof.png");
                dropdown.addItem(new ComboBoxIconEntry(new ImageIcon(icon), " Hall of Fame - Overall", Optional.of("hof_overall")));
                break;
            case HOF_KC:
                icon = ImageUtil.loadImageResource(getClass(), "hof.png");
                dropdown.addItem(new ComboBoxIconEntry(new ImageIcon(icon), " Hall of Fame - KC", Optional.of("hof_kc")));
                break;
            case HOF_PB:
                icon = ImageUtil.loadImageResource(getClass(), "hof.png");
                dropdown.addItem(new ComboBoxIconEntry(new ImageIcon(icon), " Hall of Fame - PB", Optional.of("hof_pb")));
                break;
        }
    }

    private JButton createRefreshButton() {
        final JButton button = new JButton("Refresh");
        button.setFocusable(false);

        button.addActionListener(e -> {
            if (service.state != State.LOADING) {
                service.refreshData();
            }
        });

        return button;
    }

    private void updateButtonAsync(State state) {
        SwingUtilities.invokeLater(() -> {
            buttonArea.setVisible(false);
            switch (state) {
                case LOADING:
                    buttonArea.setEnabled(false);
                    buttonArea.setText("Loading data...");
                    break;
                case ERROR:
                    buttonArea.setEnabled(false);
                    buttonArea.setText("<html><center><font color = red>Error fetching data!<br>Please wait a minute before trying again.</font></center></html>");
                    break;
                default:
                    buttonArea.setEnabled(true);
                    buttonArea.setText("Refresh");
                    break;
            }
            buttonArea.revalidate();
            buttonArea.repaint();
            buttonArea.setVisible(true);
        });
    }

    private static void createLinkEvent(JButton button, String url) {
        final String link = url;
        button.addMouseListener(new MouseAdapter() {
            @SneakyThrows
            @Override
            public void mousePressed(MouseEvent event) {
                if (event.getButton() == MouseEvent.BUTTON1) {
                    try {
                        //Open the URL
                        LinkBrowser.browse(new URI(link).toString());
                    } catch (NullPointerException | URISyntaxException e) {
                        log.error(e.getMessage());
                    }
                }
            }
        });
    }

    private void createHideEvent(JButton button) {
        button.addMouseListener(new MouseAdapter() {
            @SneakyThrows
            @Override
            public void mousePressed(MouseEvent event) {
                if (event.getButton() == MouseEvent.BUTTON1) {
                    try {
                        for (int i = 0; i < ssArea.getComponentCount(); ++i) {
                            //Search for the button's panel
                            if (ssArea.getComponent(i) == event.getComponent().getParent()) {
                                //Get the child of the panel directly after the button's panel
                                Container c = (Container) ssArea.getComponent(i + 1);
                                if (!c.getComponent(0).getClass().isAssignableFrom(JButton.class)) {
                                    //Toggle whether the panel is invisible
                                    c.setVisible(!c.isVisible());
                                }
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        });
    }

    private void addTableMouseEvents(JTable table) {
        table.addMouseListener(new MouseAdapter() {
            @SneakyThrows
            @Override
            public void mouseEntered(MouseEvent e) {
                java.awt.Point p = e.getPoint();
                int row = table.rowAtPoint(p);
                int col = table.columnAtPoint(p);
                Object tooltip = table.getValueAt(row, col);
                table.setToolTipText(tooltip == null ? " " : tooltip.toString());
            }

            @SneakyThrows
            @Override
            public void mouseExited(MouseEvent e) {
                table.setToolTipText(null);
            }
        });
    }

    private void addParentMouseEvents(Component comp) {
        comp.addMouseListener(new MouseAdapter() {
            @SneakyThrows
            @Override
            public void mousePressed(MouseEvent e) {
                ssArea.getParent().getParent().dispatchEvent(e);
            }
        });
    }

    public void updateUiAfterAPI(String header) {
        service.getSheet(header).ifPresent(this::updatePanelAsync);
    }

    public void updatePanelAsync(List<List<Object>> values) {
        SwingUtilities.invokeLater(() -> formatPanelData(values));
    }

    private void formatPanelData(List<List<Object>> values) {
        ssArea.setVisible(false);
        SwingUtil.fastRemoveAll(ssArea);
        JPanel panel;
        JScrollPane scroll;
        JButton button;
        TableColumn tc;
        String val1;
        String val2;
        String[] str;
        int i;
        int j;
        List<ColumnCellRenderer> hr;
        List<ColumnCellRenderer> cr;
        List<String> names;
        String[][] rows = new String[values.size()][];
        int style;
        Color color;
        Dimension d;
        String newLine;
        boolean addNewline;
        boolean setInvisible = false;

        j = 0;
        for (List<Object> lst : values) {
            //noinspection SuspiciousToArrayCall
            rows[j++] = lst.toArray(new String[0]);
        }

        // Go through every row from the sheet
        for (j = 0; j < rows.length; ++j) {

            try {
                val1 = ("" + rows[j][0]).trim();
            } catch (Exception e) {
                val1 = "";
            }

            switch (val1) {
                case "<column>":
                    //Create the panel and table
                    panel = new JPanel(new BorderLayout());
                    panel.setBorder(new EmptyBorder(0, 0, 3, 0));
                    DefaultTableModel model = new DefaultTableModel();
                    JTable table = new JTable(model);
                    addTableMouseEvents(table);
                    table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

                    //Add the initial column
                    model.addColumn(null);
                    hr = new ArrayList<>();
                    cr = new ArrayList<>();
                    hr.add(new ColumnCellRenderer(new DefaultTableCellRenderer()));
                    cr.add(new ColumnCellRenderer(new DefaultTableCellRenderer()));
                    names = new ArrayList<>();
                    names.add("");
                    int column_val_idx = 0;

                    //Go through the rest of this row's values
                    for (i = 1; i < rows[j].length; ++i) {
                        try {
                            val2 = ("" + rows[j][i]).trim();
                        } catch (Exception e) {
                            val2 = "";
                        }

                        //A new column is being added
                        if (Objects.equals(val2, "<column>")) {
                            model.addColumn(null);
                            hr.add(new ColumnCellRenderer(new DefaultTableCellRenderer()));
                            cr.add(new ColumnCellRenderer(new DefaultTableCellRenderer()));
                            names.add("");
                            column_val_idx = 0;
                        } else {
                            try {
                                switch (column_val_idx) {
                                    case 0:
                                        //The table column header's string
                                        names.set(model.getColumnCount() - 1, val2);
                                        break;

                                    case 1:
                                        //The table column's max width
                                        hr.get(model.getColumnCount() - 1).setMax(Integer.parseInt(val2));
                                        cr.get(model.getColumnCount() - 1).setMax(Integer.parseInt(val2));

                                    case 2:
                                        //The table column header's font
                                        val2 = val2.replaceAll(" +", " ");
                                        val2 = val2.replaceAll(", ", ",").toLowerCase();
                                        str = val2.split(",");

                                        switch (str[1]) {
                                            case "bold":
                                                style = Font.BOLD;
                                                break;

                                            case "italic":
                                                style = Font.ITALIC;
                                                break;

                                            default:
                                                style = Font.PLAIN;
                                                break;
                                        }
                                        hr.get(model.getColumnCount() - 1).setFont(new Font(str[0], style, Integer.parseInt(str[2])));
                                        break;

                                    case 3:
                                        //The table column header's font color
                                        color = (Color) Color.class.getField(val2).get(null);
                                        hr.get(model.getColumnCount() - 1).setColor(color);
                                        break;

                                    case 4:
                                        //The table column cells' font
                                        val2 = val2.replaceAll(" +", " ");
                                        val2 = val2.replaceAll(", ", ",").toLowerCase();
                                        str = val2.split(",");

                                        switch (str[1]) {
                                            case "bold":
                                                style = Font.BOLD;
                                                break;

                                            case "italic":
                                                style = Font.ITALIC;
                                                break;

                                            default:
                                                style = Font.PLAIN;
                                                break;
                                        }
                                        cr.get(model.getColumnCount() - 1).setFont(new Font(str[0], style, Integer.parseInt(str[2])));
                                        break;

                                    case 5:
                                        //The table column cells' font color
                                        color = (Color) Color.class.getField(val2).get(null);
                                        cr.get(model.getColumnCount() - 1).setColor(color);
                                        break;

                                    default:
                                        break;
                                }
                            } catch (Exception e) {
                                //Invalid value
                            }
                            ++column_val_idx;
                        }
                    }

                    //Now that all the columns have been added, make modifications to them
                    for (i = 0; i < model.getColumnCount(); ++i) {
                        tc = table.getColumnModel().getColumn(i);
                        tc.setPreferredWidth(0);
                        tc.setHeaderValue(names.get(i));
                        tc.setHeaderRenderer(hr.get(i));
                        tc.setCellRenderer(cr.get(i));
                    }

                    ++j;
                    //Add the following rows of data to the table
                    for (; j < rows.length; ++j) {
                        try {
                            val2 = rows[j][0];
                        } catch (Exception e) {
                            val2 = "";
                        }

                        if (Objects.equals(val2.trim().toLowerCase(), "</column>")) {
                            break;
                        } else {
                            model.addRow(rows[j]);
                        }
                    }

                    //Set the preferred size so that a bunch of extra space isn't added below the table
                    d = new Dimension(table.getPreferredSize().width, table.getRowHeight() * table.getRowCount());
                    table.setPreferredScrollableViewportSize(d);
                    //Put it in a scrollpane so that the panel is the correct size
                    scroll = new JScrollPane(table);
                    scroll.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
                    addParentMouseEvents(table);
                    addParentMouseEvents(table.getTableHeader());
                    //Disable it to stop the annoying selection stuff
                    table.setEnabled(false);
                    panel.add(scroll, BorderLayout.NORTH);
                    //Sets it invisible by default
                    if (setInvisible) {
                        panel.setVisible(false);
                        setInvisible = false;
                    }
                    ssArea.add(panel);
                    break;

                case "<button>":
                    //Create the panel and button html text area
                    panel = new JPanel(new BorderLayout());
                    panel.setBorder(new EmptyBorder(0, 0, 3, 0));
                    button = new JButton("<html>");
                    button.setBorder(new EmptyBorder(3, 3, 3, 3));
                    button.setFocusable(false);
                    addParentMouseEvents(button);

                    //Go through the rest of this row's values
                    for (i = 1; i < rows[j].length; ++i) {
                        try {
                            val2 = rows[j][i].trim();
                        } catch (Exception e) {
                            val2 = "";
                        }

                        try {
                            switch (i - 1) {
                                case 0:
                                    //The text's alignment
                                    val2 = val2.toLowerCase();

                                    switch (val2) {
                                        case "right":
                                            style = SwingConstants.RIGHT;
                                            break;

                                        case "center":
                                            style = SwingConstants.CENTER;
                                            break;

                                        default:
                                            style = SwingConstants.LEFT;
                                            break;
                                    }
                                    button.setHorizontalAlignment(style);
                                    break;

                                case 1:
                                    //The button's action
                                    switch (val2.toLowerCase()) {
                                        case "hide":
                                            createHideEvent(button);
                                            setInvisible = true;
                                            break;

                                        case "show":
                                            createHideEvent(button);
                                            break;

                                        default:
                                            if (!val2.isEmpty()) {
                                                createLinkEvent(button, val2);
                                            }
                                            break;
                                    }
                                    break;

                                default:
                                    break;
                            }
                        } catch (Exception e) {
                            // Invalid value
                        }
                    }

                    ++j;
                    newLine = "";
                    addNewline = false;
                    //Add values to the button html text area, where columns are concatenated with spaces between them and rows start on new lines
                    for (; j < rows.length; ++j) {

                        try {
                            val2 = String.join(" ", rows[j]);
                        } catch (Exception e) {
                            val2 = "";
                        }

                        if (Objects.equals(val2.trim().toLowerCase(), "</button>")) {
                            button.setText(button.getText() + "</html>");
                            break;
                        } else {
                            button.setText(button.getText() + newLine + val2);
                        }

                        if (!addNewline) {
                            newLine = "<br>";
                            addNewline = true;
                        }
                    }

                    panel.add(button, BorderLayout.NORTH);
                    ssArea.add(panel);
                    break;

                case "<text>":
                    //Create the panel and text area
                    panel = new JPanel(new BorderLayout());
                    panel.setBorder(new EmptyBorder(0, 0, 3, 0));
                    JTextArea text = new JTextArea();
                    text.setBorder(new EmptyBorder(3, 3, 4, 4));
                    text.setLayout(new BorderLayout());
                    //Enable text wrapping
                    text.setLineWrap(true);
                    text.setWrapStyleWord(true);

                    //Go through the rest of this row's values
                    for (i = 1; i < rows[j].length; ++i) {
                        try {
                            val2 = rows[j][i].trim();
                        } catch (Exception e) {
                            val2 = "";
                        }

                        try {
                            switch (i - 1) {
                                case 0:
                                    //The text's font
                                    val2 = val2.replaceAll(" +", " ");
                                    val2 = val2.replaceAll(", ", ",").toLowerCase();
                                    str = val2.split(",");

                                    switch (str[1]) {
                                        case "bold":
                                            style = Font.BOLD;
                                            break;

                                        case "italic":
                                            style = Font.ITALIC;
                                            break;

                                        default:
                                            style = Font.PLAIN;
                                            break;
                                    }
                                    text.setFont(new Font(str[0], style, Integer.parseInt(str[2])));
                                    break;

                                case 1:
                                    //The text's font color
                                    color = (Color) Color.class.getField(val2).get(null);
                                    text.setForeground(color);
                                    text.setDisabledTextColor(color);
                                    break;

                                default:
                                    break;
                            }
                        } catch (Exception e) {
                            // Invalid value
                        }
                    }

                    ++j;
                    newLine = "";
                    addNewline = false;
                    //Add values to the text area, where columns are concatenated with spaces between them and rows start on new lines
                    for (; j < rows.length; ++j) {

                        try {
                            val2 = String.join(" ", rows[j]);
                        } catch (Exception e) {
                            val2 = "";
                        }

                        if (Objects.equals(val2.trim().toLowerCase(), "</text>")) {
                            break;
                        } else {
                            text.append(newLine + val2);
                        }

                        if (!addNewline) {
                            newLine = System.lineSeparator();
                            addNewline = true;
                        }
                    }

                    //Put it in a scrollpane so that the panel is the correct size
                    scroll = new JScrollPane(text);
                    scroll.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
                    scroll.setBorder(new EmptyBorder(0, 0, -1, -1));
                    addParentMouseEvents(text);
                    //Disable it to stop the annoying selection stuff
                    text.setEnabled(false);
                    panel.add(scroll, BorderLayout.NORTH);
                    //Sets it invisible by default
                    if (setInvisible) {
                        panel.setVisible(false);
                        setInvisible = false;
                    }
                    ssArea.add(panel);
                    break;

                case "<html>":
                    ++j;
                default:
                    //Create the panel and html text area by default
                    panel = new JPanel(new BorderLayout());
                    panel.setBorder(new EmptyBorder(0, 0, 3, 0));
                    JLabel label = new JLabel("<html>");
                    label.setBorder(new EmptyBorder(3, 3, 3, 3));

                    newLine = "";
                    addNewline = false;
                    //Add values to the html text area, where columns are concatenated with spaces between them and rows start on new lines
                    for (; j < rows.length; ++j) {
                        try {
                            val2 = String.join(" ", rows[j]);
                        } catch (Exception e) {
                            val2 = "";
                        }

                        if (Objects.equals(val2.trim().toLowerCase(), "</html>")) {
                            label.setText(label.getText() + val2);
                            break;
                        } else {
                            label.setText(label.getText() + newLine + val2);
                        }

                        if (!addNewline) {
                            newLine = "<br>";
                            addNewline = true;
                        }
                    }

                    panel.add(label, BorderLayout.NORTH);
                    //Sets it invisible by default
                    if (setInvisible) {
                        panel.setVisible(false);
                        setInvisible = false;
                    }
                    ssArea.add(panel);
                    break;
            }
        }

        ssArea.revalidate();
        ssArea.repaint();
        ssArea.setVisible(true);
    }

    @Override
    public void onActivate() {
        openedTab = true;
        timer.start();
    }

    @Override
    public void onDeactivate() {
        timer.stop();
    }
}


package com.clanevents;

import lombok.Data;

import javax.swing.event.SwingPropertyChangeSupport;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

@Data
public class Service {

    SwingPropertyChangeSupport propChangeFirer;
    Optional<List<List<Object>>> apiValues = Optional.empty();
    List<SheetValueRange> sheetValueRangeList = new ArrayList<>();
    State state = State.IDLE;
    public Service() {
        propChangeFirer = new SwingPropertyChangeSupport(this);
    }

    public void addListener(PropertyChangeListener prop) {
        propChangeFirer.addPropertyChangeListener(prop);
    }

    public void setState(State newState) {
        State oldVal = this.state;
        this.state = newState;
        propChangeFirer.firePropertyChange("state", oldVal, newState);
    }
    public void refreshData() {
        setState(State.LOADING);
        CompletableFuture.supplyAsync(() -> {
            try {
                List<SheetValueRange> googleValues = GoogleSheet.getValues();
                setSheetValueRangeList(googleValues);
            } catch (Exception e){
                e.printStackTrace();
                return State.ERROR;
            }
            return State.COMPLETED;
        }).handle((r, v) -> {
            setState(r);
            return null;
        });
    }

    public Optional<List<List<Object>>> getSheet(String header){
        return sheetValueRangeList.stream()
                .filter(s -> s.getSheet().equals(header))
                .findFirst()
                .map(m -> m.getValueRange().getValues());
    }
}
/*
 * Copyright (c) 2022, cmsu224 <https://github.com/cmsu224>
 * Copyright (c) 2022, Brianmm94 <https://github.com/Brianmm94>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.clanevents;

import com.google.api.client.http.HttpRequestInitializer;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sheets.v4.Sheets;
import com.google.api.services.sheets.v4.model.ValueRange;

import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public class GoogleSheet {
    private static final String APPLICATION_NAME = "Google Sheets API Java Quickstart";
    private static Object API_KEY;
    private static String spreadsheetId;
    private final static List<String> RANGES = Collections.unmodifiableList(Arrays.asList("home", "hub", "sotw", "botw", "hof_overall", "hof_kc", "hof_pb"));

    public void setKey(String appKey) {
        API_KEY = appKey;
    }

    public void setSheetId(String sheetID) {
        spreadsheetId = sheetID;
    }

    private static Sheets getSheets() {
        NetHttpTransport transport = new NetHttpTransport.Builder().build();
        JacksonFactory jsonFactory = JacksonFactory.getDefaultInstance();
        HttpRequestInitializer httpRequestInitializer = request -> request.setInterceptor(intercepted -> intercepted.getUrl().set("key", API_KEY));
        return new Sheets.Builder(transport, jsonFactory, httpRequestInitializer)
                .setApplicationName(APPLICATION_NAME)
                .build();
    }

    public static ValueRange getValues(String range) throws IOException {
        return getSheets()
                .spreadsheets()
                .values()
                .get(spreadsheetId, range)
                .execute();
    }

    public static List<SheetValueRange> getValues() {
        return RANGES.parallelStream()
                .map(range -> {
                    try {
                        return new SheetValueRange(range, getValues(range));
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }).collect(Collectors.toList());
    }
}
/*
 * Copyright (c) 2022, cmsu224 <https://github.com/cmsu224>
 * Copyright (c) 2022, Brianmm94 <https://github.com/Brianmm94>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.clanevents;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.SkillIconManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ImageUtil;

import java.awt.image.BufferedImage;
import java.io.IOException;

@Slf4j
@PluginDescriptor(
		name = "Clan Events",
		description = "A plugin used to keep track of clan events.",
		tags = {"ely", "elysium", "cc", "hunt", "pass", "event", "clan"}
)
public class ClanEventsPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClanEventsConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ClanEventsOverlay overlay;

	@Inject
	private SkillIconManager skillIconManager;

	@Inject
	private ClientToolbar clientToolbar;
	private ClanEventsPanel panel;
	private NavigationButton uiNavigationButton;

	static final String CONFIG_GROUP = "clanevents";

	@Override
	protected void startUp()
	{
		overlayManager.add(overlay);
		startClanPanel();
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
		clientToolbar.removeNavigation(uiNavigationButton);
	}

	@Subscribe
	private void onConfigChanged(ConfigChanged event) {
		if (event.getGroup().equals(CONFIG_GROUP))
		{
			panel.removeAll();
			panel.init(config);
			if(!config.sheetId().equals("") && !config.apiKey().equals("")){
				clientToolbar.addNavigation(uiNavigationButton);
			}else{
				clientToolbar.removeNavigation(uiNavigationButton);
			}
		}
	}

	private void startClanPanel()
	{
		final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "icon.png");
		panel = injector.getInstance(ClanEventsPanel.class);
		panel.init(config);
		uiNavigationButton = NavigationButton.builder()
				.tooltip("Clan Events")
				.icon(icon)
				.priority(5)
				.panel(panel)
				.build();
		if(!config.sheetId().equals("") && !config.apiKey().equals("")){
			clientToolbar.addNavigation(uiNavigationButton);
		}
	}

	@Provides
	ClanEventsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ClanEventsConfig.class);
	}
}

/*
 * Copyright (c) 2022, cmsu224 <https://github.com/cmsu224>
 * Copyright (c) 2022, Brianmm94 <https://github.com/Brianmm94>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.clanevents.components.combobox;

import java.awt.Color;
import java.awt.Component;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.border.EmptyBorder;
import lombok.Setter;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.components.TitleCaseListCellRenderer;
import net.runelite.client.util.Text;

/**
 * Based off the {@link TitleCaseListCellRenderer} but supports icons and default text value
 */
public final class ComboBoxIconListRenderer extends JLabel implements ListCellRenderer<Object>
{
    @Setter
    private String defaultText = "Select an option...";

    @Override
    public Component getListCellRendererComponent(JList list, Object o, int index, boolean isSelected, boolean cellHasFocus)
    {
        if (isSelected)
        {
            setBackground(ColorScheme.DARK_GRAY_COLOR);
            setForeground(Color.WHITE);
        }
        else
        {
            setBackground(list.getBackground());
            setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        }

        setBorder(new EmptyBorder(5, 5, 5, 0));

        String text;
        setIcon(null);
        // If using setSelectedItem(null) or setSelectedIndex(-1) show default text until a selection is made
        if (index == -1 && o == null)
        {
            text = defaultText;
        }
        else if (o instanceof Enum)
        {
            text = Text.titleCase((Enum<?>) o);
        }
        else if (o instanceof ComboBoxIconEntry)
        {
            final ComboBoxIconEntry e = (ComboBoxIconEntry) o;
            text = e.getText();
            setIcon(e.getIcon());
        }
        else
        {
            text = o.toString();
        }

        setText(text);

        return this;
    }
}
/*
 * Copyright (c) 2022, cmsu224 <https://github.com/cmsu224>
 * Copyright (c) 2022, Brianmm94 <https://github.com/Brianmm94>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.clanevents.components.combobox;

import javax.annotation.Nullable;
import javax.swing.Icon;
import lombok.AllArgsConstructor;
import lombok.Getter;

import java.util.Optional;

/**
 * Used with ComboBoxListRenderer to render an icon next to the text of the list entry.
 * Also supports adding a data object to be used for more complex selection logic
 */
@AllArgsConstructor
@Getter
public class ComboBoxIconEntry
{
    private Icon icon;
    private String text;
    private Optional<String> data;
}

/*
 * Copyright (c) 2022, cmsu224 <https://github.com/cmsu224>
 * Copyright (c) 2022, Brianmm94 <https://github.com/Brianmm94>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.clanevents;

import javax.swing.*;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import java.awt.*;

public class ColumnCellRenderer implements TableCellRenderer
{
    private final TableCellRenderer original;
    private Font font = null;
    private Color color = null;
    private int max = 20;

    public ColumnCellRenderer(TableCellRenderer original)
    {
        this.original = original;
    }

    public void setFont(Font font) { this.font = font; }

    public void setColor(Color color) { this.color = color; }

    public void setMax(int max) { this.max = max; }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
    {
        Component comp = original.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        JComponent jcomp = (JComponent)comp;

        jcomp.setToolTipText((String)value);

        if (this.font != null) {
            TableColumn tc = table.getColumnModel().getColumn(column);
            tc.setPreferredWidth(this.max);
            comp.setFont(this.font);
        }

        if (this.color != null) {
            comp.setForeground(this.color);
        }

        return comp;
    }
}

/*
 * Copyright (c) 2022, cmsu224 <https://github.com/cmsu224>
 * Copyright (c) 2022, Brianmm94 <https://github.com/Brianmm94>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.clanevents.constants;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum EntrySelect
{
    NONE("None", 0),
    HOME("Home", 1),
    HUB("Clan Hub", 2),
    SOTW("Skill of the Week", 3),
    BOTW("Boss of the Week", 4),
    HOF_OVERALL("Hall of Fame - Overall", 5),
    HOF_KC("Hall of Fame - KC", 6),
    HOF_PB("Hall of Fame - PB", 7);

    private final String name;
    private final int value;

    @Override
    public String toString()
    {
        return name;
    }
}

package com.clanevents;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ClanEventsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ClanEventsPlugin.class);
		RuneLite.main(args);
	}
}
