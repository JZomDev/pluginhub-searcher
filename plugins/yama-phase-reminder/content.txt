package com.yama;

import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

public class PhaseReminderOverlay extends OverlayPanel
{
    private final PhaseReminderConfig config;
    private final Client client;
    private int currentPhase = 0;

    @Inject
    private PhaseReminderOverlay(PhaseReminderConfig config, Client client)
    {
        this.config = config;
        this.client = client;
        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
    }

    public void renderPhase(int phase)
    {
        this.currentPhase = phase;
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (currentPhase == 0){
            return null;
        }

        final String phaseMessage = "Phase " + currentPhase;
        final int length = graphics.getFontMetrics().stringWidth(phaseMessage);

        panelComponent.getChildren().clear();

        panelComponent.getChildren().add((LineComponent.builder())
                .left(phaseMessage)
                .build());

        panelComponent.setPreferredSize(new Dimension(length + 10, 0));
        panelComponent.setBackgroundColor(config.overlayColor());

        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);

        return panelComponent.render(graphics);
    }
}
package com.yama;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.util.Arrays;

@Slf4j
@PluginDescriptor(
	name = "Yama Phase Reminder"
)
public class PhaseReminderPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private PhaseReminderConfig config;

	@Inject
	private PhaseReminderOverlay phaseOverlay;

	@Inject
	private OverlayManager overlayManager;

	private int currentPhase = 0;
	private final int YAMA_ID = 14176;

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(phaseOverlay);
		currentPhase = 0;
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		LocalPoint lp = client.getLocalPlayer().getLocalLocation();
		int regionId = WorldPoint.fromLocalInstance(client,lp).getRegionID();

		if (regionId != 6045) {
			currentPhase = 0;
			overlayManager.remove(phaseOverlay);
		}

		if (currentPhase != 0) {
			overlayManager.add(phaseOverlay);
			phaseOverlay.renderPhase(currentPhase);
		}
	}

	@Subscribe
	private void onNpcSpawned(NpcSpawned event)
	{
		int npcId = event.getNpc().getId();
		if(npcId == YAMA_ID && currentPhase == 0)
		{
			currentPhase = 1;
		}
        int JUDGE_ID = 14180;
        if(npcId == JUDGE_ID && (currentPhase == 1 || currentPhase == 2))
		{
			currentPhase = currentPhase + 1;
		}
	}

	@Subscribe
	private void onNpcDespawned(NpcDespawned event)
	{
		int npcId = event.getNpc().getId();
		if(npcId == YAMA_ID && currentPhase == 3){
			overlayManager.remove(phaseOverlay);
			currentPhase = 0;
		}
	}

	@Subscribe
	public void onActorDeath(ActorDeath actorDeath)
	{
		Actor actor = actorDeath.getActor();
		if (actor == client.getLocalPlayer())
		{
			overlayManager.remove(phaseOverlay);
			currentPhase = 0;
		}
	}

	@Provides
	PhaseReminderConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(PhaseReminderConfig.class);
	}
}
package com.yama;


import java.awt.Color;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("PhaseReminder")
public interface PhaseReminderConfig extends Config
{
	@Alpha
	@ConfigItem(
			keyName = "overlayColor",
			name = "Overlay Color",
			description = "Overlay Background Color"
	)
	default Color overlayColor() {
		return new Color(255, 0, 0, 150);
	}
}
package com.yama;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PhaseReminderPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PhaseReminderPlugin.class);
		RuneLite.main(args);
	}
}
