package com.PartyHeartbeat;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PartyHeartbeatPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PartyHeartbeatPlugin.class);
		RuneLite.main(args);
	}
}
package com.PartyHeartbeat;

import java.io.BufferedInputStream;
import java.util.Hashtable;
import java.util.Objects;
import javax.inject.Inject;
import javax.sound.sampled.*;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Varbits;
import net.runelite.api.GameState;
import net.runelite.api.Player;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.Notifier;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.callback.Hooks;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.party.PartyMember;
import net.runelite.client.party.PartyService;
import net.runelite.client.party.WSClient;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
		name = "Party Heartbeat",
		description = "Show Party Disconnections"
)
public class PartyHeartbeatPlugin extends Plugin
{

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private WSClient wsClient;

	@Inject
	private PartyService party;

	@Inject
	private Hooks hooks;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private HeartbeatOverlay heartbeatOverlay;

	@Inject
	private PartyHeartbeatConfig config;
	protected Clip soundClip;

	@Inject
	private Notifier notifier;

	@Inject
	Hashtable<String, Integer> partyMemberPulses = new Hashtable<String, Integer>();

	@Provides
	PartyHeartbeatConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(PartyHeartbeatConfig.class);
	}

	@Override
	protected void startUp()
	{
		soundClip = loadSoundClip(config.volume());
		wsClient.registerMessage(Pulse.class);
		wsClient.registerMessage(ClearPartyPulse.class);
		overlayManager.add(heartbeatOverlay);
	}

	@Override
	protected void shutDown()
	{
		soundClip.close();
		partyMemberPulses.clear();
		wsClient.unregisterMessage(Pulse.class);
		wsClient.unregisterMessage(ClearPartyPulse.class);
		overlayManager.remove(heartbeatOverlay);
	}

	@Subscribe
	protected void onGameStateChanged(GameStateChanged event)
	{
		if(event.getGameState().equals(GameState.HOPPING) || event.getGameState().equals(GameState.LOGIN_SCREEN)) //Stop tracking player on hop/regular logout
		{
			sendClearPartyPulse();
		}
	}

	//Send a config update over the party
	@Subscribe
	protected void onConfigChanged(ConfigChanged event)
	{
		if (!event.getGroup().equals("PartyHeartbeat") || !Objects.equals(event.getKey(), "sendPulse"))
		{
			return;
		}
		sendClearPartyPulse();
	}

	@Subscribe
	protected void onGameTick(GameTick event)
	{
		if (!party.isInParty()) //Return if not in party
			return;

		if(config.alertNonRendered())
		{
			for (PartyMember p : party.getMembers()) //Notify for each player in party (including players not rendered in the scene)
			{
				notifyPlayers(p.getDisplayName());
			}
		}
		else
		{
			for (Player p : client.getPlayers()) //Notify for each player rendered in the scene
			{
				notifyPlayers(p.getName());
			}
		}

		for (PartyMember p : party.getMembers()) //Add a tick to last seen pulse for each player in the party (if they have sent a pulse)
		{
			if (!p.isLoggedIn()) //Continue if player is not logged in
				continue;
			if(partyMemberPulses.containsKey(p.getDisplayName()))
			{
				partyMemberPulses.put(p.getDisplayName(), partyMemberPulses.get(p.getDisplayName()) + 1); //add the tick
			}
		}

		if(config.sendPulse() == SendStatus.ON) //Send your pulse if enabled or if HC/GHC
		{
			sendPulse();
		}
		else if(config.sendPulse() == SendStatus.HC) {
			if(client.getVarbitValue(Varbits.ACCOUNT_TYPE) == 3 || client.getVarbitValue(Varbits.ACCOUNT_TYPE) == 5)
			{
				sendPulse();
			}
		}
	}

	private void notifyPlayers(String p)
	{
		if(partyMemberPulses.containsKey(p))
		{
			if (partyMemberPulses.get(p) > config.maxTicks() && partyMemberPulses.get(p) <= (config.maxTicks() + config.timeout())) //Check heartbeat
			{
				if(config.shouldNotify()) //RuneLite notification
				{
					notifier.notify("Party member " + p + " has Disconnected!");
				}
				if (config.shouldNotifySound()) //Sound notification
				{
					if (soundClip != null)
					{
						FloatControl control = (FloatControl) soundClip.getControl(FloatControl.Type.MASTER_GAIN);

						if (control != null)
							control.setValue((float) (config.volume() / 2 - 45));

						soundClip.setFramePosition(0);
						soundClip.start();
					}
					else //Play using game sounds if file cannot be loaded
						client.playSoundEffect(3926);
				}
			}
		}
	}

	protected Clip loadSoundClip(int volume)
	{
		try
		{
			AudioInputStream stream = AudioSystem.getAudioInputStream(new
					BufferedInputStream(PartyHeartbeatPlugin.class.getResourceAsStream("/util/offerdeclined.wav")));
			AudioFormat format = stream.getFormat();
			DataLine.Info info = new DataLine.Info(Clip.class, format);
			Clip soundClip = (Clip) AudioSystem.getLine(info);
			soundClip.open(stream);
			FloatControl control = (FloatControl) soundClip.getControl(FloatControl.Type.MASTER_GAIN);

			if (control != null)
				control.setValue((float) (volume / 2 - 45));

			return soundClip;
		}
		catch (Exception exception)
		{
			return null;
		}
	}

	//Receives the heartbeat pulse
	@Subscribe
	protected void onPulse(Pulse event)
	{
		clientThread.invokeLater(() ->
		{
			if(!event.getPlayer().equals(client.getLocalPlayer().getName())) //if player is not local player
			{
				partyMemberPulses.put(event.getPlayer(), 0); //set last seen tick to 0
			}
		});
	}

	//Sends the heartbeat pulse
	private void sendPulse()
	{
		if (party.isInParty())
		{
			Pulse p = new Pulse(client.getLocalPlayer().getName()); //create pulse
			if (p.getPlayer() != null)
			{
				clientThread.invokeLater(() -> party.send(p)); //send
			}
		}
	}

	//Purges the player from the list of tracked players
	@Subscribe
	protected void onClearPartyPulse(ClearPartyPulse event)
	{
		clientThread.invokeLater(() ->
		{
			partyMemberPulses.remove(event.getPlayer());
		});
	}

	//Sends the clear party pulse
	private void sendClearPartyPulse()
	{
		if (party.isInParty())
		{
			ClearPartyPulse p = new ClearPartyPulse(client.getLocalPlayer().getName()); //create pulse
			if (p.getPlayer() != null)
			{
				clientThread.invokeLater(() -> party.send(p)); //send
			}
		}
	}
}
package com.PartyHeartbeat;

import net.runelite.api.Point;
import net.runelite.api.*;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;

public class HeartbeatOverlay extends Overlay
{

    private final PartyHeartbeatPlugin plugin;
    private final PartyHeartbeatConfig config;
    @Inject
    private Client client;


    @Inject
    HeartbeatOverlay(PartyHeartbeatPlugin plugin, PartyHeartbeatConfig config)
    {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        this.plugin = plugin;
        this.config = config;
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if(config.showOverlay())
        {
            renderDisconnects(graphics);
        }
        return null;
    }

    //render the overlay
    private void renderDisconnects(final Graphics2D graphics)
    {
        for (Player p : client.getPlayers())
        {
            if(plugin.partyMemberPulses.containsKey(p.getName()))
            {
                if(plugin.partyMemberPulses.get(p.getName()) > config.maxTicks() && plugin.partyMemberPulses.get(p.getName()) <= (config.maxTicks() + config.timeout()))
                {
                    BufferedImage icon = ImageUtil.loadImageResource(PartyHeartbeatPlugin.class, "/util/icon" + config.iconSize() + ".png");
                    renderSymbol(graphics, p, icon);
                }
            }
        }
    }

    //image util to render the overlay
    private void renderSymbol(Graphics2D graphics, Player player, BufferedImage image)
    {
        Point textLocation = player.getCanvasImageLocation(image, player.getLogicalHeight() / 2);
        if (textLocation != null)
        {
            OverlayUtil.renderImageLocation(graphics, textLocation, image);
        }
    }
}

package com.PartyHeartbeat;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("PartyHeartbeat")
public interface PartyHeartbeatConfig extends Config
{
    @ConfigItem(
            position = 0,
            keyName = "maxTicks",
            name = "Ticks Before Alert",
            description = "Maximum ticks without notification pulse before alert"
    )
    default int maxTicks()
    {
        return 4;
    }

    @ConfigItem(
            position = 1,
            keyName = "sendPulse",
            name = "Send Status",
            description = "Decides whether or not to send connection status"
    )
    default SendStatus sendPulse()
    {
        return SendStatus.HC;
    }

    @ConfigItem(
            position = 2,
            keyName = "showOverlay",
            name = "Show Overlay",
            description = "Show the disconnection icon over the player"
    )
    default boolean showOverlay()
    {
        return true;
    }

    @ConfigItem(
            position = 3,
            keyName = "alertNonRendered",
            name = "Alert for Non-Rendered Players",
            description = "Alert for players not visible on the game screen (logged out/in a different world/instance/too far to see)"
    )
    default boolean alertNonRendered()
    {
        return false;
    }

    @ConfigItem(
            position = 4,
            keyName = "shouldNotify",
            name = "RuneLite Notification",
            description = "Sends a notification event (flash/sound/chatbox message) on lack of heartbeat from party member (requires RuneLite notifications on)"
    )
    default boolean shouldNotify()
    {
        return false;
    }

    @ConfigItem(
            position = 5,
            keyName = "shouldNotifySound",
            name = "Notification Sound on Disconnect",
            description = "Sends a notification sound on party member DC"
    )
    default boolean shouldNotifySound()
    {
        return true;
    }

    @ConfigItem(
            position = 6,
            keyName = "volume",
            name = "Sound Volume",
            description = "Sets the notification volume (requires client restart)"
    )
    default int volume()
    {
        return 50;
    }

    @ConfigItem(
            position = 7,
            keyName = "timeout",
            name = "Notification Timeout",
            description = "Sets the notification timeout in ticks after a disconnect alert occurs"
    )
    default int timeout() { return 15; }

    @ConfigItem(
            position = 8,
            keyName = "iconSize",
            name = "Select Icon Size",
            description = "Select the size of the disconnection icon"
    )
    default IconSize iconSize()
    {
        return IconSize.TWENTY;
    }
}

package com.PartyHeartbeat;

import lombok.EqualsAndHashCode;
import lombok.Value;
import net.runelite.client.party.messages.PartyMemberMessage;

//a message type that triggers a purge of the player off the list of players being tracked
@Value
@EqualsAndHashCode(callSuper = true)
public class ClearPartyPulse extends PartyMemberMessage
{
    String player;
}

package com.PartyHeartbeat;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum IconSize
{
    TEN("10"),
    FIFTEEN("15"),
    TWENTY("20"),
    TWENTYFIVE("25"),
    THIRTY("30"),
    FORTY("40");

    private final String size;

    @Override
    public String toString()
    {
        return size;
    }
}

package com.PartyHeartbeat;

import lombok.EqualsAndHashCode;
import lombok.Value;
import net.runelite.client.party.messages.PartyMemberMessage;

//connection status update
@Value
@EqualsAndHashCode(callSuper = true)
public class Pulse extends PartyMemberMessage
{
	String player;
}

package com.PartyHeartbeat;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum SendStatus
{
    HC("HC"),
    ON("On"),
    OFF("Off");

    private final String name;

    @Override
    public String toString()
    {
        return name;
    }
}
