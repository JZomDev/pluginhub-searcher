package be.Droei.entityMasker;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class EntityMaskerPluginTest
{
    public static void main(String[] args) throws Exception
    {
        ExternalPluginManager.loadBuiltin(EntityMaskerPlugin.class);
        RuneLite.main(args);
    }
}
package be.Droei.entityMasker.Managers;

import be.Droei.entityMasker.config.EntityMaskerConfig;
import be.Droei.entityMasker.enums.NpcStringEnum;
import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.client.util.Text;
import net.runelite.client.util.WildcardMatcher;

import javax.inject.Inject;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class EntityManager {
    @Getter
    private final List<NPC> entities = new ArrayList<>();
    EntityMaskerConfig config;
    private Client client;

    @Inject
    public EntityManager(Client client, EntityMaskerConfig config){
        this.client = client;
        this.config = config; //quiiiiiiiiiiiiiiiiiiiii
    }

    public List<NPC> updateConfigEntities(){
        entities.clear();
        String configNpcs = config.getNpcToHighlight();

        if (configNpcs.isEmpty()) return Collections.emptyList();

        if(config.epilepsy()) configNpcs += NpcStringEnum.EPILEPSY.getNpcString();
        if(config.arachnophobia()) configNpcs += NpcStringEnum.ARACHNOPHOBIA.getNpcString();
        if(config.ophidiophobia()) configNpcs += NpcStringEnum.OPHIDIOPHOBIA.getNpcString();
        if(config.cynophobia()) configNpcs += NpcStringEnum.CYNOPHOBIA.getNpcString();

        List<String> output = Text.fromCSV(configNpcs);

        for (NPC npc : client.getNpcs()) {
            for(String name : output){
                if(WildcardMatcher.matches(npc.getName(), name))
                    entities.add(npc);
            }
        }
        return entities;
    }
}

package be.Droei.entityMasker.Managers;

import be.Droei.entityMasker.config.EntityMaskerConfig;
import net.runelite.api.NPC;
import net.runelite.client.callback.Hooks;
import net.runelite.client.game.npcoverlay.HighlightedNpc;
import net.runelite.client.game.npcoverlay.NpcOverlayService;

import javax.inject.Inject;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;

public class MaskManager {

   public Map<NPC, HighlightedNpc> highlightedNpcs = new HashMap<>();
   final Function<NPC, HighlightedNpc> isHighlighted = highlightedNpcs::get;
   final NpcOverlayService npcOverlayService;
   final Hooks hooks;
   final EntityMaskerConfig config;
    @Inject
    public MaskManager(Hooks hooks, NpcOverlayService npcOverlayService, EntityMaskerConfig config){
        this.hooks = hooks;
        this.npcOverlayService = npcOverlayService;
        this.config = config;
    }
    public void maskEntities(List<NPC> npcs){
        highLightNpcs(npcs);
        npcOverlayService.registerHighlighter(isHighlighted);
    }

    public void clearAllMasksList(List<NPC> npcs){
        highLightNpcs(npcs);
        npcOverlayService.unregisterHighlighter(isHighlighted);
    }

    public void highLightNpcs(List<NPC> npcs){
        highlightedNpcs.clear();
        for(NPC npc : npcs){
            highlightedNpcs.put(npc, HighlightedNpc
                    .builder()
                    .highlightColor(config.getBorderAndTextColor())
                    .npc(npc)
                    .hull(true)
                    .fillColor(config.getMaskColor())
                    .name(config.showEntityName())
                    .build());
        }
    }
}

package be.Droei.entityMasker.Managers;

import be.Droei.entityMasker.config.EntityMaskerConfig;
import be.Droei.entityMasker.overlay.EntityMaskerPluginOverlay;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.Point;
import net.runelite.api.VarClientInt;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.List;

public class ImageManager {

    final EntityMaskerConfig entityMaskerConfig;

    @Inject
    public ImageManager(EntityMaskerConfig entityMaskerConfig) {
        this.entityMaskerConfig = entityMaskerConfig;
    }

    public void placeImage(List<NPC> npcs, Graphics2D graphics, Client client){
        int cameraZoom = (int) (Math.round((getZoom(client) / 8.96) * entityMaskerConfig.getImageScaling()));

        final BufferedImage img = resize(ImageUtil.loadImageResource(EntityMaskerPluginOverlay.class, "/Jad.png"), cameraZoom, cameraZoom) ;

        for (NPC npc : npcs){
            Point imageLocation = npc.getCanvasImageLocation(img, npc.getLogicalHeight());
            if (imageLocation != null)
            {
                OverlayUtil.renderImageLocation(graphics, imageLocation, img);
            }
        }
    }

    public BufferedImage resize(BufferedImage img, int newW, int newH) {
        Image tmp = img.getScaledInstance(newW, newH, Image.SCALE_SMOOTH);
        BufferedImage dimg = new BufferedImage(newW, newH, BufferedImage.TYPE_INT_ARGB);

        Graphics2D g2d = dimg.createGraphics();
        g2d.drawImage(tmp, 0, 0, null);
        g2d.dispose();

        return dimg;
    }

    private int getZoom(Client client)
    {
        return client.getVarcIntValue(VarClientInt.CAMERA_ZOOM_FIXED_VIEWPORT);
    }
}

package be.Droei.entityMasker.config;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.*;

@ConfigGroup("entity masker")
public interface EntityMaskerConfig extends Config {
    @ConfigItem(
            position = 1,
            keyName = "showImage",
            name = "CAN CAUSE LAGG - Display images over masks",
            description = "CAN CAUSE FPS DROPS - Displays a jad image over masked entities."
    )
    default boolean showImages()
    {
        return false;
    }

    @ConfigItem(
            position = 2,
            keyName = "imageScaling",
            name = "Scale the size of images",
            description = "How do you want the images to scale: 5 means original * 5."
    )
    default int getImageScaling()
    {
        return 5;
    }

    @Alpha
    @ConfigItem(
            position = 3,
            keyName = "maskColor",
            name = "Mask Color",
            description = "Color of the mask"
    )
    default Color getMaskColor()
    {
        return Color.PINK;
    }

    @ConfigItem(
            position = 4,
            keyName = "showEntityName",
            name = "show the entity name",
            description = "Show the name of the entity above the Mask."
    )
    default boolean showEntityName()
    {
        return true;
    }

    @Alpha
    @ConfigItem(
            position = 5,
            keyName = "borderLightTextColor",
            name = "Border and text Color",
            description = "Used for the outer edge of the mask and name"
    )
    default Color getBorderAndTextColor()
    {
        return Color.WHITE;
    }

    @ConfigItem(
            position = 6,
            keyName = "entitiesToMask",
            name = "NPC's you want masked",
            description = "List of NPC's you want to mask. Format: (NPC), (NPC)"
    )
    default String getNpcToHighlight()
    {
        return "name,don't mask capybaras,name";
    }

    @ConfigItem(
            position = 7,
            keyName = "epilepsy",
            name = "Epilepsy - mask flashy npc's",
            description = "Mask out all flashy npc's"
    )
    default boolean epilepsy()
    {
        return false;
    }

    @ConfigItem(
            position = 8,
            keyName = "arachnophobia",
            name = "Arachnophobia - mask spiders",
            description = "Mask out all spiders"
    )
    default boolean arachnophobia()
    {
        return false;
    }

    @ConfigItem(
            position = 9,
            keyName = "Ophidiophobia",
            name = "Ophidiophobia - mask snakes",
            description = "Mask out all snakes"
    )
    default boolean ophidiophobia() {
        return false;
    }
    @ConfigItem(
            position = 10,
            keyName = "Cynophobia",
            name = "Cynophobia - mask dogs",
            description = "Mask out all dogs"
    )
    default boolean cynophobia() {
        return false;
    }
}

package be.Droei.entityMasker.overlay;

import be.Droei.entityMasker.Managers.EntityManager;
import be.Droei.entityMasker.Managers.ImageManager;
import be.Droei.entityMasker.Managers.MaskManager;
import be.Droei.entityMasker.config.EntityMaskerConfig;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

import javax.inject.Inject;
import java.awt.*;
import java.util.List;

public class EntityMaskerPluginOverlay extends Overlay {

    final EntityManager entityManager;
    final Client client;
    final EntityMaskerConfig config;
    final ImageManager imageManager;
    final MaskManager maskManager;
    List<NPC> npcs;


    @Inject
    private EntityMaskerPluginOverlay(EntityManager entityManager, Client client,
                                      EntityMaskerConfig config, ImageManager imageManager,
                                      MaskManager maskManager){
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);

        this.client = client;
        this.config = config;
        this.imageManager = imageManager;
        this.entityManager = entityManager;
        this.maskManager = maskManager;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        npcs = entityManager.updateConfigEntities();

        // This line is known to cause lagg
        // I will fix this soon, set it false in config, set a warning and communicated to users
        if(config.showImages()) imageManager.placeImage(npcs, graphics, client);

        maskManager.maskEntities(npcs);

        return null;
    }

    public void clear(){
        npcs = entityManager.updateConfigEntities();
        entityManager.getEntities().clear();
        maskManager.clearAllMasksList(npcs);
    }
}

package be.Droei.entityMasker;

import javax.inject.Inject;

import be.Droei.entityMasker.config.EntityMaskerConfig;
import be.Droei.entityMasker.overlay.EntityMaskerPluginOverlay;
import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
        name = "Entity Masker",
        description = "A plugin made to mask out entities that can potentially disturb players",
        tags = {"entity", "medical", "phobia", "epilepsy"}

)
public class EntityMaskerPlugin extends Plugin
{
    @Inject
    OverlayManager overlayManager;

    @Inject
    EntityMaskerPluginOverlay entityMaskerPluginOverlay;

    @Override
    protected void startUp()
    {
        overlayManager.add(entityMaskerPluginOverlay);
    }
    @Override
    protected void shutDown()
    {
        entityMaskerPluginOverlay.clear();
        overlayManager.remove(entityMaskerPluginOverlay);
    }
    @Provides
    EntityMaskerConfig entityMaskerConfig(ConfigManager configManager){
        return configManager.getConfig(EntityMaskerConfig.class);
    }
}

package be.Droei.entityMasker.enums;

public enum NpcStringEnum {
    EPILEPSY(",Wyrm,Killerwatt"),
    ARACHNOPHOBIA(",Spider,Blessed spider,Crypt spider,Deadly red spider,Fever spider,Giant crypt spider," +
            "Giant spider,Ice spider,Jungle spider,Poison spider,Shadow spider,Sarachnis," +
            "Spawn of Sarachnis,Spindel,Temple Spider,Venenatis,Araxyte,Araxxor,Acidic Araxytes" +
            "Mirrorback Araxytes,Ruptura Araxytes,Arancini"),
    OPHIDIOPHOBIA(",Snake,Poison Snake,Giant Snake,Zulrah"),
    CYNOPHOBIA(",Jackal,Temple guardian,Guard dog,Wild dog,Shadow hound,Reanimated dog");

    private final String npcString;
    NpcStringEnum(String entityLine){
        this.npcString = entityLine;
    }

    public String getNpcString(){
        return npcString;
    }
}

