package com.entityrenderdistance;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;
import java.awt.*;
@ConfigGroup("entityrenderdistance")
public interface EntityRenderDistanceConfig extends Config {
	@ConfigItem(
			keyName = "onlyInWilderness",
			name = "Only show in Wilderness",
			description = "Only display overlays while in the Wilderness.",
			position = 0
	)
	default boolean onlyInWilderness() { return false; }
	@Range(min = 1, max = 64)
	@ConfigItem(
			keyName = "renderDistanceRadius",
			name = "Render distance",
			description = "The radius of the render distance box (1-64).",
			position = 1
	)
	default int renderDistanceRadius() { return 15; }
	@ConfigSection(
			name = "World Box",
			description = "Settings for the world overlay box",
			position = 2
	)
	String worldBoxSection = "worldBoxSection";
	@ConfigItem(
			keyName = "enableWorldBox",
			name = "Enable world box",
			description = "Enable the main world overlay box",
			section = worldBoxSection,
			position = 0
	)
	default boolean enableWorldBox() { return true; }
	@Alpha
	@ConfigItem(
			keyName = "worldBorderColour",
			name = "Border colour",
			description = "The border colour of the world overlay box.",
			section = worldBoxSection,
			position = 1
	)
	default Color worldBorderColour() { return new Color(255, 173, 0, 150); }
	@Range(min = 1, max = 5)
	@ConfigItem(
			keyName = "worldBorderThickness",
			name = "Border thickness",
			description = "The thickness of the world overlay box border.",
			section = worldBoxSection,
			position = 2
	)
	default int worldBorderThickness() { return 1; }
	@ConfigSection(
			name = "Minimap Box",
			description = "Settings for the minimap box",
			position = 3
	)
	String minimapBoxSection = "minimapBoxSection";
	@ConfigItem(
			keyName = "enableMinimapBox",
			name = "Enable minimap box",
			description = "Enable the minimap overlay box",
			section = minimapBoxSection,
			position = 0
	)
	default boolean enableMinimapBox() { return true; }
	@Alpha
	@ConfigItem(
			keyName = "minimapBorderColour",
			name = "Border colour",
			description = "The border colour of the minimap overlay.",
			section = minimapBoxSection,
			position = 1
	)
	default Color minimapBorderColour() { return new Color(255, 173, 0, 150); }
	@Range(min = 1, max = 5)
	@ConfigItem(
			keyName = "minimapBorderThickness",
			name = "Border thickness",
			description = "The thickness of the minimap overlay border.",
			section = minimapBoxSection,
			position = 2
	)
	default int minimapBorderThickness() { return 1; }
	@ConfigSection(
			name = "Fading Players",
			description = "Settings for marking players that leave render distance",
			position = 4,
			closedByDefault = false
	)
	String fadingPlayerSection = "fadingPlayerSection";
	@ConfigItem(
			keyName = "enableFadingPlayers",
			name = "Enable fading players",
			description = "Mark players that leave render distance with a fading marker.",
			section = fadingPlayerSection,
			position = 0
	)
	default boolean enableFadingPlayers() { return true; }
	@ConfigItem(
			keyName = "showFadingInWorld",
			name = "Show in world",
			description = "Show fading player markers in the main game view.",
			section = fadingPlayerSection,
			position = 1
	)
	default boolean showFadingInWorld() { return true; }
	@ConfigItem(
			keyName = "showFadingOnMinimap",
			name = "Show on minimap",
			description = "Show fading player markers on the minimap.",
			section = fadingPlayerSection,
			position = 2
	)
	default boolean showFadingOnMinimap() { return true; }
	@ConfigItem(
			keyName = "showFadeNames",
			name = "Show names",
			description = "Show the player's name on the fading marker in the world view.",
			section = fadingPlayerSection,
			position = 3
	)
	default boolean showFadeNames() { return true; }
	@ConfigItem(
			keyName = "extrapolateMovement",
			name = "Extrapolate movement",
			description = "Fading player markers will continue to move based on their last known velocity.",
			section = fadingPlayerSection,
			position = 4
	)
	default boolean extrapolateMovement() { return true; }
	@Range(min = 1, max = 10)
	@ConfigItem(
			keyName = "fadeDuration",
			name = "Fade duration (ticks)",
			description = "How many game ticks it takes for a marker to completely fade.",
			section = fadingPlayerSection,
			position = 5
	)
	default int fadeDuration() { return 2; }
	@Alpha
	@ConfigItem(
			keyName = "fadeColor",
			name = "Fade marker colour",
			description = "The colour of the fading tile marker.",
			section = fadingPlayerSection,
			position = 6
	)
	default Color fadeColor() { return new Color(255, 0, 0, 150); }
}
package com.entityrenderdistance;
import com.entityrenderdistance.box.EntityRenderDistanceMinimapOverlay;
import com.entityrenderdistance.box.EntityRenderDistanceWorldOverlay;
import com.entityrenderdistance.fade.FadingPlayerManager;
import com.google.inject.Provides;
import javax.inject.Inject;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
@PluginDescriptor(
		name = "Entity Render Distance",
		description = "Draws boxes around the player to mark the maximum entity render distance",
		enabledByDefault = true
)
public class EntityRenderDistancePlugin extends Plugin {
	@Inject
	private OverlayManager overlayManager;
	@Inject
	private EntityRenderDistanceWorldOverlay worldOverlay;
	@Inject
	private EntityRenderDistanceMinimapOverlay minimapOverlay;
	@Inject
	private FadingPlayerManager fadingPlayerManager;
	@Override
	protected void startUp() {
		overlayManager.add(worldOverlay);
		overlayManager.add(minimapOverlay);
		fadingPlayerManager.start();
	}
	@Override
	protected void shutDown() {
		overlayManager.remove(worldOverlay);
		overlayManager.remove(minimapOverlay);
		fadingPlayerManager.stop();
	}
	@Provides
	EntityRenderDistanceConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(EntityRenderDistanceConfig.class);
	}
}
package com.entityrenderdistance.fade;
import com.entityrenderdistance.EntityRenderDistanceConfig;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Player;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.ui.overlay.OverlayManager;
@Singleton
public class FadingPlayerManager {
	@Inject
	private Client client;
	@Inject
	private EntityRenderDistanceConfig config;
	@Inject
	private OverlayManager overlayManager;
	@Inject
	private EventBus eventBus;
	@Inject
	private FadingPlayerOverlay fadingPlayerOverlay;
	@Inject
	private FadingPlayerMinimapOverlay fadingPlayerMinimapOverlay;
	@Getter
	private final Map<Player, FadingPlayer> fadingPlayers = new HashMap<>();
	private final Map<Player, WorldPoint> lastTickPlayerLocations = new HashMap<>();
	private final Map<Player, WorldPoint> twoTicksAgoPlayerLocations = new HashMap<>();
	private WorldPoint lastTickLocalPlayerLocation;
	public void start() {
		overlayManager.add(fadingPlayerOverlay);
		overlayManager.add(fadingPlayerMinimapOverlay);
		eventBus.register(this);
	}
	public void stop() {
		overlayManager.remove(fadingPlayerOverlay);
		overlayManager.remove(fadingPlayerMinimapOverlay);
		eventBus.unregister(this);
		clearAllTracking();
	}
	@Subscribe
	public void onGameStateChanged(GameStateChanged event) {
		if (event.getGameState() == GameState.LOADING) {
			clearAllTracking();
		}
	}
	@Subscribe
	public void onGameTick(GameTick event) {
		if (client.getGameState() != GameState.LOGGED_IN) {
			clearAllTracking();
			return;
		}
		if (!config.enableFadingPlayers()) {
			clearAllTracking();
			return;
		}
		handleFadingPlayers();
		updatePlayerTracking();
	}
	private void clearAllTracking() {
		fadingPlayers.clear();
		lastTickPlayerLocations.clear();
		twoTicksAgoPlayerLocations.clear();
		lastTickLocalPlayerLocation = null;
	}
	private void handleFadingPlayers() {
		fadingPlayers.entrySet().removeIf(entry -> {
			FadingPlayer fp = entry.getValue();
			fp.setTicksSinceDisappeared(fp.getTicksSinceDisappeared() + 1);
			if (fp.getTicksSinceDisappeared() >= config.fadeDuration()) {
				return true;
			}
			if (config.extrapolateMovement()) {
				WorldPoint nextPos = new WorldPoint(
						fp.getLastLocation().getX() + fp.getVelocity().getX(),
						fp.getLastLocation().getY() + fp.getVelocity().getY(),
						fp.getLastLocation().getPlane()
				);
				fp.setLastLocation(nextPos);
			}
			return false;
		});
	}
	private void updatePlayerTracking() {
		Map<Player, WorldPoint> currentPlayerLocations = new HashMap<>();
		Set<String> currentPlayerNames = new HashSet<>();
		for (Player player : client.getPlayers()) {
			if (player != null && player != client.getLocalPlayer()) {
				currentPlayerLocations.put(player, player.getWorldLocation());
				if (player.getName() != null) {
					currentPlayerNames.add(player.getName());
				}
			}
		}
		Set<Player> disappearedPlayers = new HashSet<>(lastTickPlayerLocations.keySet());
		disappearedPlayers.removeAll(currentPlayerLocations.keySet());
		WorldPoint currentLocalPlayerLocation = client.getLocalPlayer().getWorldLocation();
		boolean localPlayerMoved = lastTickLocalPlayerLocation != null &&
				!lastTickLocalPlayerLocation.equals(currentLocalPlayerLocation);
		for (Player player : disappearedPlayers) {
			if (fadingPlayers.containsKey(player)) continue;
			WorldPoint lastLocation = lastTickPlayerLocations.get(player);
			if (lastLocation == null) continue;
			WorldPoint twoTicksAgoLocation = twoTicksAgoPlayerLocations.get(player);
			WorldPoint velocity = (twoTicksAgoLocation != null)
					? new WorldPoint(lastLocation.getX() - twoTicksAgoLocation.getX(), lastLocation.getY() - twoTicksAgoLocation.getY(), 0)
					: new WorldPoint(0, 0, 0);
			WorldPoint initialFadeLocation;
			if (localPlayerMoved) {
				initialFadeLocation = lastLocation;
			} else {
				WorldPoint referencePlayerLocation = lastTickLocalPlayerLocation != null ? lastTickLocalPlayerLocation : currentLocalPlayerLocation;
				int dx = lastLocation.getX() - referencePlayerLocation.getX();
				int dy = lastLocation.getY() - referencePlayerLocation.getY();
				int absDx = Math.abs(dx);
				int absDy = Math.abs(dy);
				int pushX = 0;
				int pushY = 0;
				if (absDx > absDy) {
					pushX = Integer.signum(dx);
				} else if (absDy > absDx) {
					pushY = Integer.signum(dy);
				} else {
					pushX = Integer.signum(dx);
					pushY = Integer.signum(dy);
				}
				initialFadeLocation = new WorldPoint(lastLocation.getX() + pushX, lastLocation.getY() + pushY, lastLocation.getPlane());
			}
			FadingPlayer fp = new FadingPlayer(player, velocity);
			fp.setLastLocation(initialFadeLocation);
			fadingPlayers.put(player, fp);
		}
		twoTicksAgoPlayerLocations.clear();
		twoTicksAgoPlayerLocations.putAll(lastTickPlayerLocations);
		lastTickPlayerLocations.clear();
		lastTickPlayerLocations.putAll(currentPlayerLocations);
		lastTickLocalPlayerLocation = client.getLocalPlayer().getWorldLocation();
		if (!fadingPlayers.isEmpty() && !currentPlayerNames.isEmpty()) {
			fadingPlayers.entrySet().removeIf(entry -> {
				Player fadingPlayer = entry.getKey();
				return fadingPlayer.getName() != null && currentPlayerNames.contains(fadingPlayer.getName());
			});
		}
	}
}
package com.entityrenderdistance.fade;
import com.entityrenderdistance.EntityRenderDistanceConfig;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Polygon;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.Varbits;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
public class FadingPlayerOverlay extends Overlay {
	private final Client client;
	private final EntityRenderDistanceConfig config;
	private final FadingPlayerManager manager;
	@Inject
	protected FadingPlayerOverlay(Client client, EntityRenderDistanceConfig config, FadingPlayerManager manager) {
		this.client = client;
		this.config = config;
		this.manager = manager;
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_SCENE);
	}
	@Override
	public Dimension render(Graphics2D graphics) {
		if (!config.enableFadingPlayers() || !config.showFadingInWorld() || isClientNotReady()) return null;
		if (config.onlyInWilderness() && !isInWilderness()) return null;
		for (FadingPlayer fadingPlayer : manager.getFadingPlayers().values()) {
			renderFadingPlayer(graphics, fadingPlayer);
		}
		return null;
	}
	private void renderFadingPlayer(Graphics2D graphics, FadingPlayer fadingPlayer) {
		WorldPoint wp = fadingPlayer.getLastLocation();
		LocalPoint lp = LocalPoint.fromWorld(client, wp);
		if (lp == null) return;
		Polygon poly = Perspective.getCanvasTilePoly(client, lp);
		if (poly == null) return;
		float fadeDuration = Math.max(1, config.fadeDuration());
		float remainingTicks = fadeDuration - fadingPlayer.getTicksSinceDisappeared();
		float opacity = remainingTicks / fadeDuration;
		Color color = new Color(
				config.fadeColor().getRed() / 255f,
				config.fadeColor().getGreen() / 255f,
				config.fadeColor().getBlue() / 255f,
				(config.fadeColor().getAlpha() / 255f) * opacity
		);
		graphics.setColor(color);
		graphics.fill(poly);
		if (config.showFadeNames()) {
			String name = fadingPlayer.getPlayer().getName();
			if (name != null) {
				Point textLocation = Perspective.getCanvasTextLocation(client, graphics, lp, name, 0);
				if (textLocation != null) {
					OverlayUtil.renderTextLocation(graphics, textLocation, name, color);
				}
			}
		}
	}
	private boolean isInWilderness() { return client.getVarbitValue(Varbits.IN_WILDERNESS) == 1; }
	private boolean isClientNotReady() { return client.getGameState() != GameState.LOGGED_IN || client.getLocalPlayer() == null; }
}
package com.entityrenderdistance.fade;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.Player;
import net.runelite.api.coords.WorldPoint;
@Getter
class FadingPlayer {
	private final Player player;
	@Setter
	private WorldPoint lastLocation;
	private final WorldPoint velocity;
	@Setter
	private int ticksSinceDisappeared = 0;
	FadingPlayer(Player player, WorldPoint velocity) {
		this.player = player;
		this.velocity = velocity;
		this.lastLocation = player.getWorldLocation();
	}
}
package com.entityrenderdistance.fade;
import com.entityrenderdistance.EntityRenderDistanceConfig;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Shape;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.Varbits;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
public class FadingPlayerMinimapOverlay extends Overlay {
	private static final int DOT_SIZE = 4;
	private final Client client;
	private final EntityRenderDistanceConfig config;
	private final FadingPlayerManager manager;
	@Inject
	protected FadingPlayerMinimapOverlay(Client client, EntityRenderDistanceConfig config, FadingPlayerManager manager) {
		this.client = client;
		this.config = config;
		this.manager = manager;
		setPosition(OverlayPosition.DYNAMIC);
		setPriority(OverlayPriority.LOW);
		setLayer(OverlayLayer.ABOVE_WIDGETS);
	}
	@Override
	public Dimension render(Graphics2D graphics) {
		if (!config.enableFadingPlayers() || !config.showFadingOnMinimap() || isClientNotReady()) return null;
		if (config.onlyInWilderness() && isInWilderness()) return null;
		Widget minimapWidget = getMinimapWidget();
		if (minimapWidget == null) return null;
		Shape oldClip = graphics.getClip();
		graphics.setClip(minimapWidget.getBounds());
		for (FadingPlayer fadingPlayer : manager.getFadingPlayers().values()) {
			renderFadingPlayer(graphics, fadingPlayer);
		}
		graphics.setClip(oldClip);
		return null;
	}
	private void renderFadingPlayer(Graphics2D graphics, FadingPlayer fadingPlayer) {
		WorldPoint wp = fadingPlayer.getLastLocation();
		LocalPoint lp = LocalPoint.fromWorld(client, wp);
		if (lp == null) return;
		Point mp = Perspective.localToMinimap(client, lp);
		if (mp == null) return;
		float fadeDuration = Math.max(1, config.fadeDuration());
		float remainingTicks = fadeDuration - fadingPlayer.getTicksSinceDisappeared();
		float opacity = remainingTicks / fadeDuration;
		Color color = new Color(
				config.fadeColor().getRed() / 255f,
				config.fadeColor().getGreen() / 255f,
				config.fadeColor().getBlue() / 255f,
				opacity
		);
		Color shadedColor = color.darker();
		int x = mp.getX() - DOT_SIZE / 2;
		int y = mp.getY() - DOT_SIZE / 2;
		graphics.setColor(shadedColor);
		graphics.fillArc(x, y, DOT_SIZE, DOT_SIZE, 180, 180);
		graphics.setColor(color);
		graphics.fillArc(x, y, DOT_SIZE, DOT_SIZE, 0, 180);
	}
	private boolean isInWilderness() { return client.getVarbitValue(Varbits.IN_WILDERNESS) == 1; }
	private boolean isClientNotReady() { return client.getGameState() != GameState.LOGGED_IN || client.getLocalPlayer() == null; }
	private Widget getMinimapWidget() {
		if (client.isResized()) {
			if (client.getVarbitValue(Varbits.SIDE_PANELS) == 1) {
				return client.getWidget(ComponentID.RESIZABLE_VIEWPORT_BOTTOM_LINE_MINIMAP_DRAW_AREA);
			}
			return client.getWidget(ComponentID.RESIZABLE_VIEWPORT_MINIMAP_DRAW_AREA);
		}
		return client.getWidget(ComponentID.FIXED_VIEWPORT_MINIMAP_DRAW_AREA);
	}
}
package com.entityrenderdistance.box;
import com.entityrenderdistance.EntityRenderDistanceConfig;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.Varbits;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import javax.inject.Inject;
import java.awt.*;
public class EntityRenderDistanceMinimapOverlay extends Overlay {
	private final Client client;
	private final EntityRenderDistanceConfig config;
	@Inject
	public EntityRenderDistanceMinimapOverlay(Client client, EntityRenderDistanceConfig config) {
		this.client = client;
		this.config = config;
		setPosition(OverlayPosition.DYNAMIC);
		setPriority(OverlayPriority.HIGH);
		setLayer(OverlayLayer.ABOVE_WIDGETS);
	}
	@Override
	public Dimension render(Graphics2D graphics) {
		if (!config.enableMinimapBox() || isClientNotReady()) return null;
		if (config.onlyInWilderness() && !isInWilderness()) return null;
		Widget minimapWidget = getMinimapWidget();
		if (minimapWidget == null || minimapWidget.isHidden()) return null;
		int radius = config.renderDistanceRadius();
		WorldPoint centerWp = client.getLocalPlayer().getWorldLocation();
		Shape oldClip = graphics.getClip();
		graphics.setClip(minimapWidget.getBounds());
		graphics.setColor(config.minimapBorderColour());
		graphics.setStroke(new BasicStroke(config.minimapBorderThickness()));
		for (int x = -radius; x <= radius; x++) {
			drawMinimapEdgeOfTile(graphics, new WorldPoint(centerWp.getX() + x, centerWp.getY() + radius, centerWp.getPlane()), "NORTH");
		}
		for (int y = radius; y >= -radius; y--) {
			drawMinimapEdgeOfTile(graphics, new WorldPoint(centerWp.getX() + radius, centerWp.getY() + y, centerWp.getPlane()), "EAST");
		}
		for (int x = radius; x >= -radius; x--) {
			drawMinimapEdgeOfTile(graphics, new WorldPoint(centerWp.getX() + x, centerWp.getY() - radius, centerWp.getPlane()), "SOUTH");
		}
		for (int y = -radius; y <= radius; y++) {
			drawMinimapEdgeOfTile(graphics, new WorldPoint(centerWp.getX() - radius, centerWp.getY() + y, centerWp.getPlane()), "WEST");
		}
		graphics.setClip(oldClip);
		return null;
	}
	private void drawMinimapEdgeOfTile(Graphics2D graphics, WorldPoint wp, String edge) {
		Point p1 = null, p2 = null;
		switch (edge) {
			case "NORTH":
				p1 = getMinimapPoint(new WorldPoint(wp.getX(), wp.getY() + 1, wp.getPlane()));
				p2 = getMinimapPoint(new WorldPoint(wp.getX() + 1, wp.getY() + 1, wp.getPlane()));
				break;
			case "EAST":
				p1 = getMinimapPoint(new WorldPoint(wp.getX() + 1, wp.getY() + 1, wp.getPlane()));
				p2 = getMinimapPoint(new WorldPoint(wp.getX() + 1, wp.getY(), wp.getPlane()));
				break;
			case "SOUTH":
				p1 = getMinimapPoint(new WorldPoint(wp.getX() + 1, wp.getY(), wp.getPlane()));
				p2 = getMinimapPoint(new WorldPoint(wp.getX(), wp.getY(), wp.getPlane()));
				break;
			case "WEST":
				p1 = getMinimapPoint(new WorldPoint(wp.getX(), wp.getY(), wp.getPlane()));
				p2 = getMinimapPoint(new WorldPoint(wp.getX(), wp.getY() + 1, wp.getPlane()));
				break;
		}
		if (p1 != null && p2 != null) {
			graphics.drawLine(p1.getX(), p1.getY(), p2.getX(), p2.getY());
		}
	}
	private Point getMinimapPoint(WorldPoint worldPoint) {
		LocalPoint lp = LocalPoint.fromWorld(client, worldPoint);
		if (lp == null) return null;
		LocalPoint centeredLp = new LocalPoint(lp.getX() - (Perspective.LOCAL_TILE_SIZE / 2), lp.getY() - (Perspective.LOCAL_TILE_SIZE / 2));
		return Perspective.localToMinimap(client, centeredLp);
	}
	private boolean isInWilderness() { return client.getVarbitValue(Varbits.IN_WILDERNESS) == 1; }
	private boolean isClientNotReady() { return client.getGameState() != GameState.LOGGED_IN || client.getLocalPlayer() == null; }
	private Widget getMinimapWidget() {
		if (client.isResized()) {
			if (client.getVarbitValue(Varbits.SIDE_PANELS) == 1) {
				return client.getWidget(ComponentID.RESIZABLE_VIEWPORT_BOTTOM_LINE_MINIMAP_DRAW_AREA);
			}
			return client.getWidget(ComponentID.RESIZABLE_VIEWPORT_MINIMAP_DRAW_AREA);
		}
		return client.getWidget(ComponentID.FIXED_VIEWPORT_MINIMAP_DRAW_AREA);
	}
}
package com.entityrenderdistance.box;
import com.entityrenderdistance.EntityRenderDistanceConfig;
import com.entityrenderdistance.EntityRenderDistancePlugin;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.Varbits;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.geometry.Geometry;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import javax.inject.Inject;
import java.awt.*;
import java.awt.geom.GeneralPath;
public class EntityRenderDistanceWorldOverlay extends Overlay {
    private final Client client;
    private final EntityRenderDistanceConfig config;
    @Inject
    public EntityRenderDistanceWorldOverlay(Client client, EntityRenderDistanceConfig config) {
        this.client = client;
        this.config = config;
        setPosition(OverlayPosition.DYNAMIC);
    }
    @Override
    public Dimension render(Graphics2D graphics) {
        if (!config.enableWorldBox() || isClientNotReady()) return null;
        if (config.onlyInWilderness() && !isInWilderness()) return null;
        int radius = config.renderDistanceRadius();
        WorldPoint centerWp = client.getLocalPlayer().getWorldLocation();
        GeneralPath borderPath = createBorderPath(centerWp, radius);
        if (borderPath != null) { renderPath(graphics, borderPath); }
        return null;
    }
    private GeneralPath createBorderPath(WorldPoint center, int radius) {
        GeneralPath path = new GeneralPath();
        boolean pathStarted = false;
        for (int x = -radius; x <= radius; x++) {
            WorldPoint wp = new WorldPoint(center.getX() + x, center.getY() + radius, center.getPlane());
            LocalPoint lp = LocalPoint.fromWorld(client, wp);
            if (lp != null) {
                int edgeY = lp.getY() + 64;
                if (!pathStarted) {
                    path.moveTo(lp.getX(), edgeY);
                    pathStarted = true;
                } else {
                    path.lineTo(lp.getX(), edgeY);
                }
            }
        }
        for (int y = radius - 1; y >= -radius; y--) {
            WorldPoint wp = new WorldPoint(center.getX() + radius, center.getY() + y, center.getPlane());
            LocalPoint lp = LocalPoint.fromWorld(client, wp);
            if (lp != null) {
                int edgeX = lp.getX() + 64;
                path.lineTo(edgeX, lp.getY());
            }
        }
        for (int x = radius - 1; x >= -radius; x--) {
            WorldPoint wp = new WorldPoint(center.getX() + x, center.getY() - radius, center.getPlane());
            LocalPoint lp = LocalPoint.fromWorld(client, wp);
            if (lp != null) {
                int edgeY = lp.getY() - 64;
                path.lineTo(lp.getX(), edgeY);
            }
        }
        for (int y = -radius + 1; y < radius; y++) {
            WorldPoint wp = new WorldPoint(center.getX() - radius, center.getY() + y, center.getPlane());
            LocalPoint lp = LocalPoint.fromWorld(client, wp);
            if (lp != null) {
                int edgeX = lp.getX() - 64;
                path.lineTo(edgeX, lp.getY());
            }
        }
        if (pathStarted) path.closePath();
        return pathStarted ? path : null;
    }
    private void renderPath(Graphics2D graphics, GeneralPath path) {
        graphics.setColor(config.worldBorderColour());
        graphics.setStroke(new BasicStroke(config.worldBorderThickness()));
        path = Geometry.filterPath(path, (p1, p2) ->
                Perspective.localToCanvas(client, new LocalPoint((int)p1[0], (int)p1[1]), client.getPlane()) != null &&
                        Perspective.localToCanvas(client, new LocalPoint((int)p2[0], (int)p2[1]), client.getPlane()) != null);
        path = Geometry.transformPath(path, coords -> {
            Point point = Perspective.localToCanvas(client, new LocalPoint((int)coords[0], (int)coords[1]), client.getPlane());
            if (point != null) {
                coords[0] = point.getX();
                coords[1] = point.getY();
            }
        });
        graphics.draw(path);
    }
    private boolean isInWilderness() { return client.getVarbitValue(Varbits.IN_WILDERNESS) == 1; }
    private boolean isClientNotReady() { return client.getGameState() != GameState.LOGGED_IN || client.getLocalPlayer() == null; }
}
package com.entityrenderdistance;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class EntityRenderDistance
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(EntityRenderDistancePlugin.class);
		RuneLite.main(args);
	}
}
