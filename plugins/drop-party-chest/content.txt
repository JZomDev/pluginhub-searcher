package io.grnbk.droppartychest;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Notification;

@ConfigGroup("drop-party-chest")
public interface DropPartyChestConfig extends Config
{
	@ConfigItem(
		keyName = "showExact",
		name = "Show exact chest value",
		description = "Show exact chest value.",
        position = 0
	)
	default boolean showExact()
	{
		return false;
	}

    @ConfigItem(
        keyName = "chestValueNotification",
        name = "Chest value notification",
        description = "Configures if chest value notifications are enabled.",
        position = 1
    )
    default Notification getChestValueNotification()
    {
        return Notification.OFF;
    }

    @ConfigItem(
        keyName = "chestValueThreshold",
        name = "Chest value threshold",
        description = "The total value of the chest must exceed this amount to send a notification.",
        position = 2
    )
    default int getChestValueThreshold()
    {
        return 100000;
    }
}

package io.grnbk.droppartychest;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.widgets.Widget;
import net.runelite.client.Notifier;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.QuantityFormatter;

@Slf4j
@PluginDescriptor(
	name = "Drop Party Chest",
	description = "Display value of the party room and clan hall chests.",
	tags = {"party", "room", "clan", "hall", "chest", "value"}
)
public class DropPartyChestPlugin extends Plugin
{
	private static final int CLANHALL_CHEST_ITEMS_CONTAINER_ID = 33684;
	private static final int CLANHALL_CHEST_TITLE_WIDGET_ID = 51314689;
	private static final String CLANHALL_CHEST_TITLE = "Clan Party Drop Chest";
	private static final int PARTYROOM_CHEST_ITEMS_CONTAINER_ID = 91;
	private static final int PARTYROOM_CHEST_TITLE_WIDGET_ID = 17367041;
	private static final String PARTYROOM_CHEST_TITLE = "Party Drop Chest";

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private ItemManager itemManager;

    @Inject
    private Notifier notifier;

	@Inject
	private DropPartyChestConfig config;

    private boolean notifyChestValue = false;
    private long currentThreshold;

    @Override
    protected void startUp() throws Exception
    {
        currentThreshold = config.getChestValueThreshold();
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event)
    {
        if (!event.getGroup().equals("drop-party-chest"))
        {
            return;
        }

        if (event.getKey().equals("chestValueThreshold"))
        {
            currentThreshold = config.getChestValueThreshold();
            notifyChestValue = false;
        }
    }

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event)
	{
		int containerId = event.getContainerId();

		if (containerId == PARTYROOM_CHEST_ITEMS_CONTAINER_ID)
		{
			updateChestItemsValue(containerId, PARTYROOM_CHEST_TITLE_WIDGET_ID, PARTYROOM_CHEST_TITLE);
		}
		else if (containerId == CLANHALL_CHEST_ITEMS_CONTAINER_ID)
		{
			updateChestItemsValue(containerId, CLANHALL_CHEST_TITLE_WIDGET_ID, CLANHALL_CHEST_TITLE);
		}
	}

	private void updateChestItemsValue(int containerId, int widgetId, String title)
	{
		final Widget titleContainer = client.getWidget(widgetId);
		if (titleContainer == null)
		{
			return;
		}

		final Widget titleWidget = titleContainer.getChild(1);
		if (titleWidget == null)
		{
			return;
		}

		ItemContainer itemContainer = client.getItemContainer(containerId);
		if (itemContainer != null)
		{
			final long totalChestItemsValue = getTotalGrandExchangeValue(itemContainer.getItems());

            if (checkChestValueExceeded(totalChestItemsValue))
            {
                String thresholdValue = QuantityFormatter.quantityToStackSize(currentThreshold);
                String message = "Party chest value exceeds " + thresholdValue + " gp!";

                notifier.notify(config.getChestValueNotification(), message);
            }

			if (totalChestItemsValue > 0)
			{
				final String totalChestValueText = createValueText(totalChestItemsValue);
				titleWidget.setText(title + totalChestValueText);
			}
			else
			{
				titleWidget.setText(title);
			}
		}
	}

    private boolean checkChestValueExceeded(final long totalChestItemsValue)
    {
        if (currentThreshold == 0)
        {
            return false;
        }
        if (currentThreshold <= totalChestItemsValue)
        {
            if (!notifyChestValue)
            {
                notifyChestValue = true;
                return true;
            }
        }
        else
        {
            notifyChestValue = false;
        }
        return false;
    }

	private long getTotalGrandExchangeValue(Item[] items)
	{
		long grandExchangeValue = 0;

		for (Item item : items)
		{
			if (item != null)
			{
				grandExchangeValue += (long) itemManager.getItemPrice(item.getId()) * item.getQuantity();
			}
		}

		return grandExchangeValue;
	}

	private String createValueText(long grandExchangeValue)
	{
		StringBuilder stringBuilder = new StringBuilder();
		if (grandExchangeValue != 0)
		{
			stringBuilder.append(" (");

			if (config.showExact())
			{
				stringBuilder.append(QuantityFormatter.formatNumber(grandExchangeValue));
			}
			else
			{
				stringBuilder.append(QuantityFormatter.quantityToStackSize(grandExchangeValue));
			}
			stringBuilder.append(')');
		}

		return stringBuilder.toString();
	}

	@Provides
	DropPartyChestConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(DropPartyChestConfig.class);
	}
}

package io.grnbk.droppartychest;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DropPartyChestPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(DropPartyChestPlugin.class);
		RuneLite.main(args);
	}
}
