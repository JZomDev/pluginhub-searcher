package treecount;

import java.awt.Color;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("treecount")
public interface TreeCountConfig extends Config
{
	boolean DEBUG = true;

	@ConfigItem(
		keyName = "renderTreeHull",
		name = "Draw Tree Hull",
		description = "Configures whether to draw the hull the hull of the tree with the same color as the text."
	)
	default boolean renderTreeHull()
	{
		return false;
	}

    @ConfigItem(
            keyName = "dynamicColors",
            name = "Dynamic Color",
            description = "Use dynamic colors for the chopper count. If disabled, Text Color will be used"
    )
    default boolean dynamicColors()
    {
        return true;
    }

    @ConfigItem(
            keyName = "textColor",
            name = "Text Color",
            description = "The color of the tree count text."
    )
    default Color textColor()
    {
        return Color.YELLOW;
    }

	@ConfigItem(
		keyName = "renderTreeTiles",
		name = "(Debug) Show Tree Tiles",
		description = "Configures whether to show debug info of tree tiles",
		hidden = !DEBUG
	)
	default boolean renderTreeTiles()
	{
		return false;
	}

	@ConfigItem(
		keyName = "renderFacingTree",
		name = "(Debug) Show Facing Tree",
		description = "Configures whether to show debug info about the tree the player is facing",
		hidden = !DEBUG
	)
	default boolean renderFacingTree()
	{
		return false;
	}

	@ConfigItem(
		keyName = "includeSelf",
		name = "(Debug) Include Self",
		description = "Configures whether to help with debug info by including the player in the tree count",
		hidden = !DEBUG
	)
	default boolean includeSelf()
	{
		return false;
	}

	@ConfigItem(
		keyName = "enableWCGuild",
		name = "(Debug) Enable Woodcutting Guild",
		description = "Configures whether to help with debug info by allowing the woodcutting guild to be used",
		hidden = !DEBUG
	)
	default boolean enableWCGuild()
	{
		return false;
	}

	@ConfigItem(
		keyName = "renderPlayerOrientation",
		name = "(Debug) Show Player Orientation",
		description = "Configures whether to show debug info about the tree hull",
		hidden = !DEBUG
	)
	default boolean renderPlayerOrientation()
	{
		return false;
	}

	@ConfigItem(
		keyName = "renderExpectedChoppers",
		name = "(Debug) Show Expected Choppers",
		description = "Configures whether to show debug info about the expected number of people chopping a tree",
		hidden = !DEBUG
	)
	default boolean renderExpectedChoppers()
	{
		return false;
	}
}

package treecount;

import lombok.EqualsAndHashCode;
import lombok.Value;
import net.runelite.api.Player;

@Value
@EqualsAndHashCode
public class PlayerOrientationChanged
{
	Player player;
	int previousOrientation;
	int currentOrientation;
}

/*
 * Copyright (c) 2018, Mantautas Jurksa <https://github.com/Juzzed>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package treecount;

import com.google.common.collect.ImmutableMap;
import java.util.Map;
import lombok.Getter;
import net.runelite.api.NullObjectID;
import net.runelite.api.ObjectID;
import static net.runelite.api.ObjectID.*;

@Getter
public enum Tree
{
	// Trees that provide a hidden boost to woodcutting when chopping in a group
	OAK_TREE(true, ObjectID.OAK_TREE_9734, ObjectID.OAK_TREE_10820, ObjectID.OAK_TREE_37969, ObjectID.OAK_TREE_42395, ObjectID.OAK_TREE_42831),
	WILLOW_TREE(true, ObjectID.WILLOW_TREE_10819, ObjectID.WILLOW_TREE_10829, ObjectID.WILLOW_TREE_10831, ObjectID.WILLOW_TREE_10833),
	TEAK_TREE(true, ObjectID.TEAK_TREE, ObjectID.TEAK_TREE_15062, ObjectID.TEAK_TREE_36686, ObjectID.TEAK_TREE_40758),
	MAPLE_TREE(true, ObjectID.MAPLE_TREE_4674, ObjectID.MAPLE_TREE_10832, ObjectID.MAPLE_TREE_36681, ObjectID.MAPLE_TREE_40754),
	ARCTIC_PINE_TREE(true, ObjectID.ARCTIC_PINE_TREE),
	HOLLOW_TREE(true, HOLLOW_TREE_10821, HOLLOW_TREE_10830),
	MAHOGANY_TREE(true, ObjectID.MAHOGANY_TREE, ObjectID.MAHOGANY_TREE_40760, ObjectID.MAHOGANY_TREE_36688),
	YEW_TREE(true, ObjectID.YEW_TREE_10822, NullObjectID.NULL_10823, ObjectID.YEW_TREE_36683, ObjectID.YEW_TREE_40756, ObjectID.YEW_TREE_42391), // 10823 is an imposter yew tree (see varrock or gnome yews)
	MAGIC_TREE(true, MAGIC_TREE_10834, MAGIC_TREE_36685), // 36685 seems deprecated or placeholder for now, 0 locations as of July 2023
	REDWOOD_TREE(true, ObjectID.REDWOOD_TREE, ObjectID.REDWOOD_TREE_29670, ObjectID.REDWOOD_TREE_34284, ObjectID.REDWOOD_TREE_34286, ObjectID.REDWOOD_TREE_34288, ObjectID.REDWOOD_TREE_34290),

	// Trees that do not provide a hidden boost to woodcutting when chopping in a group and other choppable trees
	REGULAR_TREE(false, ObjectID.TREE, TREE_1277, TREE_1278, TREE_1279, TREE_1280, TREE_1330, TREE_1331, TREE_1332, TREE_2409, TREE_3879,
		TREE_3881, TREE_3882, TREE_3883, TREE_9730, TREE_9731, TREE_9732, TREE_9733, TREE_14308, TREE_14309, TREE_16264, TREE_16265, TREE_36672, TREE_36674,
		TREE_36677, TREE_36679, TREE_37965, TREE_37967, TREE_37971, TREE_37973, TREE_40750, TREE_40752, TREE_42393, TREE_42832),
	DEAD_TREE(false, ObjectID.DEAD_TREE, DEAD_TREE_1283, DEAD_TREE_1284, DEAD_TREE_1285, DEAD_TREE_1286, DEAD_TREE_1289, DEAD_TREE_1290, DEAD_TREE_1291, DEAD_TREE_1365, DEAD_TREE_1383,
		DEAD_TREE_1384, DEAD_TREE_5902, DEAD_TREE_5903, DEAD_TREE_5904, DEAD_TREE_42907),
	DRAMEN_TREE(false, ObjectID.DRAMEN_TREE),
	EVERGREEN_TREE(false, ObjectID.EVERGREEN_TREE, ObjectID.EVERGREEN_TREE_1319, ObjectID.EVERGREEN_TREE_2091, ObjectID.EVERGREEN_TREE_2092, ObjectID.EVERGREEN_TREE_27060, ObjectID.EVERGREEN_TREE_40932, ObjectID.EVERGREEN_TREE_40933),
	ACHEY_TREE(false, ObjectID.ACHEY_TREE),
	JUNGLE_TREE(false, ObjectID.JUNGLE_TREE, JUNGLE_TREE_2889, JUNGLE_TREE_2890, JUNGLE_TREE_4818, JUNGLE_TREE_4820),
	DYING_TREE(false, ObjectID.DYING_TREE),
	DREAM_TREE(false, ObjectID.DREAM_TREE),
	WINDSWEPT_TREE(false, WINDSWEPT_TREE_18137),
	MATURE_JUNIPER_TREE(false, ObjectID.MATURE_JUNIPER_TREE),
	BURNT_TREE(false, ObjectID.BURNT_TREE, BURNT_TREE_30854),
	BLISTERWOOD_TREE(false, ObjectID.BLISTERWOOD_TREE),
	RISING_ROOTS(false, TREE_ROOTS, ObjectID.ANIMAINFUSED_TREE_ROOTS);


	private final boolean providesForestryBoost;
	private final int[] treeIds;

	Tree(boolean providesForestryBoost, int... treeIds)
	{
		this.providesForestryBoost = providesForestryBoost;
		this.treeIds = treeIds;
	}

	private static final Map<Integer, Tree> ALL_TREES;
	private static final Map<Integer, Tree> FORESTRY_TREES;

	static
	{
		ImmutableMap.Builder<Integer, Tree> allTreesBuilder = new ImmutableMap.Builder<>();
		ImmutableMap.Builder<Integer, Tree> forestryTreesBuilder = new ImmutableMap.Builder<>();

		for (Tree tree : values())
		{
			for (int treeId : tree.treeIds)
			{
				allTreesBuilder.put(treeId, tree);
				if (tree.providesForestryBoost)
				{
					forestryTreesBuilder.put(treeId, tree);
				}
			}
		}

		ALL_TREES = allTreesBuilder.build();
		FORESTRY_TREES = forestryTreesBuilder.build();
	}

	/**
	 * Finds the tree that matches the given object ID
	 *
	 * @param objectId
	 * @return tree that matches the given object ID, or null if no match
	 */
	static Tree findTree(int objectId)
	{
		return ALL_TREES.get(objectId);
	}

	/**
	 * Finds the tree that is able to receive a forestry hidden boost that matches the given object ID
	 *
	 * @param objectId
	 * @return forestry-boost-capable tree that matches the given object ID, or null if no match
	 */
	static Tree findForestryTree(int objectId)
	{
		return FORESTRY_TREES.get(objectId);
	}
}

package treecount;

import com.google.inject.Provides;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Actor;
import net.runelite.api.AnimationID;
import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.GameState;
import net.runelite.api.Player;
import net.runelite.api.Point;
import net.runelite.api.coords.Angle;
import net.runelite.api.coords.Direction;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.GameObjectDespawned;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.PlayerDespawned;
import net.runelite.api.events.PlayerSpawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Tree Count",
	description = "Show the number of players chopping a tree",
	tags = {"woodcutting", "wc", "tree", "count", "forestry", "overlay"}
)
public class TreeCountPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private TreeCountConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private TreeCountOverlay overlay;

	@Getter
	private final Map<GameObject, Integer> treeMap = new HashMap<>();
	private final Map<Player, GameObject> playerMap = new HashMap<>();
	@Getter
	private final Map<GameObject, List<WorldPoint>> treeTileMap = new HashMap<>();
	private final Map<WorldPoint, GameObject> tileTreeMap = new HashMap<>();
	// This map is used to track player orientation changes for only players that are chopping trees
	private final Map<Player, Integer> playerOrientationMap = new ConcurrentHashMap<>();

	private int previousPlane;

	private boolean firstRun;

	@Provides
	TreeCountConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(TreeCountConfig.class);
	}

	@Override
	protected void startUp()
	{
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
		treeMap.clear();
		treeTileMap.clear();
		tileTreeMap.clear();
		playerMap.clear();
		playerOrientationMap.clear();
		previousPlane = -1;
		firstRun = true;
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged changedConfig)
	{
		if (changedConfig.getKey().equals("includeSelf"))
		{
			if (Boolean.valueOf(changedConfig.getNewValue()))
			{
				if (isWoodcutting(client.getLocalPlayer()))
				{
					addToTreeFocusedMaps(client.getLocalPlayer());
				}
			}
			else
			{
				removeFromTreeMaps(client.getLocalPlayer());
			}
		}
	}

	@Subscribe
	public void onGameTick(GameTick gameTick)
	{
		if (isRegionInWoodcuttingGuild(client.getLocalPlayer().getWorldLocation().getRegionID()) && !config.enableWCGuild())
		{
			return;
		}

		// Event runs third (or last) upon login
		int currentPlane = client.getPlane();
		if (previousPlane != currentPlane)
		{
			// Only clear values because sometimes the trees are still there when changing planes (Top of Seer's Bank)
			treeMap.replaceAll((k, v) -> 0);
			previousPlane = currentPlane;
		}

		if (firstRun)
		{
			// Any missing players just in case, although it's not really required. Doesn't hurt since one time operation
			client.getPlayers().forEach(player -> {
				if (!player.equals(client.getLocalPlayer()) || config.includeSelf())
				{
					playerMap.putIfAbsent(player, null);
					// Initialize it to -1 because it will be updated when the PlayerOrientationChanged event is fired
					playerOrientationMap.put(player, -1);
				}
			});
			for (Player player : playerMap.keySet())
			{
				if (isWoodcutting(player) && !treeMap.isEmpty())
				{
					addToTreeFocusedMaps(player);
				}
			}
		}

		// Let's create a PlayerOrientationChanged event for cases when the players shift's orientation while chopping
		if (!playerOrientationMap.isEmpty())
		{
			for (Map.Entry<Player, Integer> playerOrientationEntry : playerOrientationMap.entrySet())
			{
				Player player = playerOrientationEntry.getKey();
				int previousOrientation = playerOrientationEntry.getValue();
				int currentOrientation = player.getOrientation();

				if (currentOrientation != previousOrientation)
				{
					final PlayerOrientationChanged playerOrientationChanged = new PlayerOrientationChanged(player, previousOrientation, currentOrientation);
					onPlayerOrientationChanged(playerOrientationChanged);
				}
			}
		}

		if (firstRun)
		{
			firstRun = false;
		}
	}

	@Subscribe
	public void onGameObjectSpawned(final GameObjectSpawned event)
	{
		// Event runs first upon login
		GameObject gameObject = event.getGameObject();

		if (isRegionInWoodcuttingGuild(gameObject.getWorldLocation().getRegionID()) && !config.enableWCGuild())
		{
			return;
		}

		Tree tree = Tree.findTree(gameObject.getId());

		if (tree != null)
		{
			// log.debug("Tree {} spawned at {}", tree, gameObject.getLocalLocation());
			treeMap.put(gameObject, 0);
			List<WorldPoint> points = getPoints(gameObject);
			treeTileMap.put(gameObject, points);
			points.forEach(point -> tileTreeMap.put(point, gameObject));
		}
	}

	private List<WorldPoint> getPoints(GameObject gameObject)
	{
		WorldPoint minPoint = getSWWorldPoint(gameObject);
		WorldPoint maxPoint = getNEWorldPoint(gameObject);

		if (minPoint.equals(maxPoint))
		{
			return Collections.singletonList(minPoint);
		}

		final int plane = minPoint.getPlane();
		final List<WorldPoint> list = new ArrayList<>();
		for (int x = minPoint.getX(); x <= maxPoint.getX(); x++)
		{
			for (int y = minPoint.getY(); y <= maxPoint.getY(); y++)
			{
				list.add(new WorldPoint(x, y, plane));
			}
		}
		return list;
	}

	@Subscribe
	public void onGameObjectDespawned(final GameObjectDespawned event)
	{
		final GameObject gameObject = event.getGameObject();
		if (isRegionInWoodcuttingGuild(gameObject.getWorldLocation().getRegionID()) && !config.enableWCGuild())
		{
			return;
		}
		Tree tree = Tree.findTree(gameObject.getId());
		if (tree != null && !tree.equals(Tree.REGULAR_TREE))
		{
			treeMap.remove(gameObject);
			List<WorldPoint> points = treeTileMap.remove(gameObject);
			if (points != null)
			{
				points.forEach(tileTreeMap::remove);
			}
		}
	}

	@Subscribe
	public void onGameStateChanged(final GameStateChanged event)
	{
		if (event.getGameState() == GameState.LOADING)
		{
			treeMap.clear();
			treeTileMap.clear();
			tileTreeMap.clear();
			playerMap.clear();
			playerOrientationMap.clear();
			firstRun = true;
		}
	}

	@Subscribe
	public void onPlayerSpawned(final PlayerSpawned event)
	{
		// Event runs second upon login

		if (firstRun)
		{
			return;
		}

		Player player = event.getPlayer();
		// log.debug("Player {} spawned at {}", player.getName(), player.getWorldLocation());

		if (player.equals(client.getLocalPlayer()) && !config.includeSelf())
		{
			return;
		}
		if (isRegionInWoodcuttingGuild(player.getWorldLocation().getRegionID()) && !config.enableWCGuild())
		{
			return;
		}

		// Sometimes this event is fired after the onAnimationChanged event and as a result, the chopped tree count
		// is incorrectly incremented, so don't add the player to the map if they are already in it
		if (!playerMap.containsKey(player))
		{
			playerMap.put(player, null);
			playerOrientationMap.put(player, player.getOrientation());

			// Most of the time the player won't have an animation, but since we're already checking we should be safe
			if (isWoodcutting(player))
			{
				addToTreeFocusedMaps(player);
			}
		}
	}

	@Subscribe
	public void onPlayerDespawned(final PlayerDespawned event)
	{
		Player player = event.getPlayer();
		// log.debug("Player {} despawned at {}", player.getName(), player.getWorldLocation());

		if (player.equals(client.getLocalPlayer()) && !config.includeSelf())
		{
			return;
		}

		if (isRegionInWoodcuttingGuild(player.getWorldLocation().getRegionID()) && !config.enableWCGuild())
		{
			return;
		}

		playerOrientationMap.remove(player);

		removeFromTreeMaps(player);
	}

	@Subscribe
	public void onAnimationChanged(final AnimationChanged event)
	{
		if (firstRun)
		{
			return;
		}

		if (event.getActor() instanceof Player)
		{
			Player player = (Player) event.getActor();
			if (Objects.equals(player, client.getLocalPlayer()) && !config.includeSelf())
			{
				return;
			}

			// Check combat level to avoid NPE. Not sure why this happens, maybe the Player isn't really a player?
			// The player isn't null, but all the fields are
			if (player.getCombatLevel() != 0 && (isRegionInWoodcuttingGuild(player.getWorldLocation().getRegionID()) && !config.enableWCGuild()))
			{
				return;
			}

			if (isWoodcutting(player) && !treeMap.isEmpty())
			{
				addToTreeFocusedMaps(player);
			}
			else if (player.getAnimation() == AnimationID.IDLE)
			{
				removeFromTreeMaps(player);
			}
		}
	}

	@Subscribe
	public void onPlayerOrientationChanged(final PlayerOrientationChanged event)
	{
		// Player orientation map should already consist of players chopping trees but check just in case
		// Also, animation changed should? fire before game tick, therefore non-chopping players should be removed
		// But again, just in case perform the necessary checks
		if (firstRun)
		{
			return;
		}

		Player player = event.getPlayer();
		Direction previousDirection = new Angle(event.getPreviousOrientation()).getNearestDirection();
		Direction currentDirection = new Angle(event.getCurrentOrientation()).getNearestDirection();

		// log.debug("Player {} orientation changed from {} ({}) to {} ({})",
		//	player.getName(),
		//	event.getPreviousOrientation(), previousDirection,
		//	event.getCurrentOrientation(), currentDirection
		// );

		if (player.equals(client.getLocalPlayer()) && !config.includeSelf())
		{
			return;
		}

		if (isRegionInWoodcuttingGuild(player.getWorldLocation().getRegionID()) && !config.enableWCGuild())
		{
			return;
		}

		playerOrientationMap.put(player, event.getCurrentOrientation());
		removeFromTreeMaps(player); // Remove the previous tracked case
		if (isWoodcutting(player))
		{
			addToTreeFocusedMaps(player);
		}
	}

	boolean isWoodcutting(Actor actor)
	{
		return isWoodcuttingWithRegularAxe(actor) || isWoodcuttingWithFellingAxe(actor);
	}

	private boolean isWoodcuttingWithRegularAxe(Actor actor)
	{
		switch (actor.getAnimation())
		{
			// Regular axe animation IDs
			case AnimationID.WOODCUTTING_BRONZE:
			case AnimationID.WOODCUTTING_IRON:
			case AnimationID.WOODCUTTING_STEEL:
			case AnimationID.WOODCUTTING_BLACK:
			case AnimationID.WOODCUTTING_MITHRIL:
			case AnimationID.WOODCUTTING_ADAMANT:
			case AnimationID.WOODCUTTING_RUNE:
			case AnimationID.WOODCUTTING_GILDED:
			case AnimationID.WOODCUTTING_DRAGON:
			case AnimationID.WOODCUTTING_DRAGON_OR:
			case AnimationID.WOODCUTTING_INFERNAL:
			case AnimationID.WOODCUTTING_3A_AXE:
			case AnimationID.WOODCUTTING_CRYSTAL:
			case AnimationID.WOODCUTTING_TRAILBLAZER:
				return true;
			default:
				return false;
		}
	}

	private boolean isWoodcuttingWithFellingAxe(Actor actor)
	{
		switch (actor.getAnimation())
		{
			// Felling axes (Forestry Part 2) animation IDs
			case AnimationID.WOODCUTTING_2H_BRONZE:
			case AnimationID.WOODCUTTING_2H_IRON:
			case AnimationID.WOODCUTTING_2H_STEEL:
			case AnimationID.WOODCUTTING_2H_BLACK:
			case AnimationID.WOODCUTTING_2H_MITHRIL:
			case AnimationID.WOODCUTTING_2H_ADAMANT:
			case AnimationID.WOODCUTTING_2H_RUNE:
			case AnimationID.WOODCUTTING_2H_DRAGON:
			case AnimationID.WOODCUTTING_2H_CRYSTAL:
			case AnimationID.WOODCUTTING_2H_3A:
				return true;
			default:
				return false;
		}
	}

	void addToTreeFocusedMaps(Player player)
	{
		GameObject closestTree = findClosestFacingTree(player);

		if (player != client.getLocalPlayer() || config.includeSelf())
		{
			Direction direction = new Angle(player.getOrientation()).getNearestDirection();
			// log.debug("Actor: {}, Direction: {}, Closest Facing Tree: {}, Count: {}", player.getName(), direction,
			//	closestTree != null ? closestTree.getWorldLocation() : "NULL",
			//	closestTree != null ? treeMap.get(closestTree) : -1);
		}

		if (closestTree == null)
		{
			// Hotfix for #24 where players chopping with a felling axe could be chopping a tree that is not facing them
			// This will treat the only adjacent tree as the tree the player is chopping
			if (isWoodcutting(player))
			{
				List<GameObject> adjacentTrees = getAdjacentTrees(player, false);
				if (adjacentTrees.size() == 1)
				{
					playerMap.put(player, adjacentTrees.get(0));
					treeMap.merge(adjacentTrees.get(0), 1, Integer::sum);
				}
			}
			return;
		}

		playerMap.put(player, closestTree);
		treeMap.merge(closestTree, 1, Integer::sum);
	}

	void removeFromTreeMaps(Player player)
	{
		GameObject tree = playerMap.get(player);
		playerMap.remove(player);
		treeMap.computeIfPresent(tree, (unused, value) -> {
			// log.debug("Removing player {} from tree {}. {} -> {}", player.getName(), tree.getWorldLocation(), value, Math.max(0, value - 1));
			return Math.max(0, value - 1);
		});
	}

	GameObject findClosestFacingTree(Actor actor)
	{
		WorldPoint actorLocation = actor.getWorldLocation();
		Direction direction = new Angle(actor.getOrientation()).getNearestDirection();
		WorldPoint facingPoint = neighborPoint(actorLocation, direction);
		return tileTreeMap.get(facingPoint);
	}

	List<GameObject> getAdjacentTrees(Actor actor, boolean ignoreNonForestryTrees)
	{
		WorldPoint actorLocation = actor.getWorldLocation();
		List<GameObject> adjacentTrees = new ArrayList<>();
		for (Direction direction : Direction.values())
		{
			WorldPoint neighborPoint = neighborPoint(actorLocation, direction);
			GameObject tree = tileTreeMap.get(neighborPoint);
			if (tree != null && (!ignoreNonForestryTrees || (ignoreNonForestryTrees && Tree.findForestryTree(tree.getId()) != null)))
			{
				adjacentTrees.add(tree);
			}
		}
		return adjacentTrees;
	}

	WorldPoint neighborPoint(WorldPoint point, Direction direction)
	{
		switch (direction)
		{
			case NORTH:
				return point.dy(1);
			case SOUTH:
				return point.dy(-1);
			case EAST:
				return point.dx(1);
			case WEST:
				return point.dx(-1);
			default:
				throw new IllegalStateException();
		}
	}

	private WorldPoint getSWWorldPoint(GameObject gameObject)
	{
		return getWorldPoint(gameObject, GameObject::getSceneMinLocation);
	}

	private WorldPoint getNEWorldPoint(GameObject gameObject)
	{
		return getWorldPoint(gameObject, GameObject::getSceneMaxLocation);
	}

	private WorldPoint getWorldPoint(GameObject gameObject, Function<GameObject, Point> pointFunction)
	{
		Point point = pointFunction.apply(gameObject);
		return WorldPoint.fromScene(client, point.getX(), point.getY(), gameObject.getPlane());
	}

	boolean isRegionInWoodcuttingGuild(int regionID)
	{
		return regionID == 6198 || regionID == 6454;
	}
}

package treecount;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Random;
import java.util.WeakHashMap;
import java.util.concurrent.ThreadLocalRandom;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.Perspective;
import net.runelite.api.Player;
import net.runelite.api.Point;
import net.runelite.api.coords.Angle;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.geometry.SimplePolygon;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.util.ColorUtil;

@Slf4j
public class TreeCountOverlay extends Overlay
{
	public static final Color BLANK_COLOR = new Color(0, true);
	private final TreeCountPlugin plugin;
	private final TreeCountConfig config;
	private final Client client;

	@Inject
	private TreeCountOverlay(TreeCountPlugin plugin, TreeCountConfig config, Client client)
	{
		this.plugin = plugin;
		this.config = config;
		this.client = client;
		setLayer(OverlayLayer.ABOVE_SCENE);
		setPosition(OverlayPosition.DYNAMIC);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (plugin.isRegionInWoodcuttingGuild(client.getLocalPlayer().getWorldLocation().getRegionID()) && !config.enableWCGuild())
		{
			return null;
		}

		renderDebugOverlay(graphics);

		plugin.getTreeMap().forEach((gameObject, choppers) ->
		{
			if (choppers == null || choppers <= 0 || Tree.findForestryTree(gameObject.getId()) == null)
			{
				return;
			}

			final Color colorForChoppers = getColorForChoppers(choppers);
			if (config.renderTreeHull())
			{
				if (choppers < 10)
				{
					drawOutline(graphics, gameObject, colorForChoppers, 0x50, 1f);
				}
				else
				{
					drawOutline(graphics, gameObject, colorForChoppers, 0xB0, 2f);
				}
			}

			centroidOfObjectHull(gameObject)
				.ifPresent(point -> drawTextCentered(graphics, point, String.valueOf(choppers), colorForChoppers));
		});

		return null;
	}

	private static void drawTextCentered(Graphics2D graphics, Point point, String text, Color color)
	{
		final FontMetrics metrics = graphics.getFontMetrics(graphics.getFont());
		Rectangle2D bounds = metrics.getStringBounds(text, graphics);
		int x = point.getX() - (int) Math.round(bounds.getWidth()) / 2;
		int y = point.getY() + (int) Math.round(bounds.getHeight()) / 2; // y coordinate is the baseline, not top
		OverlayUtil.renderTextLocation(graphics, new Point(x, y), text, color);
	}

	private static Optional<Point> centroidOfObjectHull(GameObject gameObject)
	{
		final Shape convexHull = gameObject.getConvexHull();
		if (!(convexHull instanceof SimplePolygon))
		{
			return Optional.empty();
		}

		return centroidOfPolygon((SimplePolygon) convexHull);
	}

	// https://en.wikipedia.org/wiki/Centroid#Of_a_polygon
	private static Optional<Point> centroidOfPolygon(SimplePolygon poly)
	{
		long xSum = 0, ySum = 0, areaSum = 0;
		for (int i = 0; i < poly.size(); i++)
		{
			final long currX = poly.getX(i);
			final long currY = poly.getY(i);

			// wrap around to the first point if we're on the last index
			final int nextI = i == poly.size() - 1 ? 0 : i + 1;
			final long nextX = poly.getX(nextI);
			final long nextY = poly.getY(nextI);

			final long areaSumComponent = (currX * nextY - nextX * currY);
			areaSum += areaSumComponent;
			xSum += (currX + nextX) * areaSumComponent;
			ySum += (currY + nextY) * areaSumComponent;
		}

		final long divisor = areaSum * 3;
		final long centroidX = xSum / divisor;
		final long centroidY = ySum / divisor;
		return Optional.of(new Point((int) centroidX, (int) centroidY));
	}

	private static void drawOutline(Graphics2D graphics,
									GameObject gameObject,
									Color colorForChoppers,
									int alpha,
									float strokeWidth)
	{
		Color outlineColor = ColorUtil.colorWithAlpha(colorForChoppers, alpha);
		Stroke stroke = new BasicStroke(strokeWidth);
		OverlayUtil.renderPolygon(graphics, gameObject.getConvexHull(), outlineColor, BLANK_COLOR, stroke);
	}

	private Color getColorForChoppers(int choppers)
	{
        if(config.dynamicColors()) {
            return getDynamicColor(choppers);
        } else {
            return config.textColor();
        }
	}

    private static Color getDynamicColor(int choppers)
    {
        final float percent = Math.min(1f, choppers / 10f);
        final float hue1 = rgbToHsbArray(Color.RED)[0];
        final float hue2 = rgbToHsbArray(Color.GREEN)[0];
        final float lerpedHue = hue1 + (hue2 - hue1) * percent;
        return Color.getHSBColor(lerpedHue, 1f, 1f);
    }

	private static float[] rgbToHsbArray(Color color)
	{
		return Color.RGBtoHSB(color.getRed(), color.getGreen(), color.getBlue(), null);
	}

	private static final Random random = ThreadLocalRandom.current();

	private static final Map<GameObject, Color> colorMap = new WeakHashMap<>();

	private void renderDebugOverlay(Graphics2D graphics)
	{
		if (config.renderFacingTree())
		{
			renderFacingTree(graphics);
		}

		if (config.renderTreeTiles())
		{
			renderTreeTiles(graphics);
		}

		if (config.renderPlayerOrientation())
		{
			renderPlayerOrientation(graphics);
		}

		if (config.renderExpectedChoppers())
		{
			renderPlayersAdjacentToTrees(graphics);
		}
	}

	private void renderFacingTree(Graphics2D graphics)
	{
		if (client.getLocalPlayer() != null)
		{
			GameObject tree = plugin.findClosestFacingTree(client.getLocalPlayer());
			if (tree != null)
			{
				OverlayUtil.renderTileOverlay(graphics, tree, "", Color.GREEN);
			}
		}
	}

	private void renderTreeTiles(Graphics2D graphics)
	{
		plugin.getTreeTileMap().forEach((tree, tiles) ->
			{
				final Color color = colorMap.computeIfAbsent(tree, (unused) -> Color.getHSBColor(random.nextFloat(), 1f, 1f));
				tiles.forEach(worldPoint ->
					{
						LocalPoint localPoint = LocalPoint.fromWorld(client, worldPoint);
						if (localPoint == null)
						{
							return;
						}
						Polygon poly = Perspective.getCanvasTilePoly(client, localPoint);
						if (poly == null)
						{
							return;
						}
						OverlayUtil.renderPolygon(graphics, poly, color);
					}
				);
			}
		);
	}

	private void renderPlayerOrientation(Graphics2D graphics)
	{
		client.getPlayers().forEach(player -> {
			Angle playerAngle = new Angle(player.getOrientation());
			String text = player.getOrientation() + " | " + playerAngle.getNearestDirection();
			Point textPoint = player.getCanvasTextLocation(graphics, text, player.getLogicalHeight() + 40);
			if (textPoint != null)
			{
				OverlayUtil.renderTextLocation(graphics, textPoint, text, Color.GREEN);
			}
		});
	}

	private void renderPlayersAdjacentToTrees(Graphics2D graphics)
	{
		Map<GameObject, Integer> expectedChoppers = new HashMap<>();
		for (Player player : client.getPlayers())
		{
			if (player.equals(client.getLocalPlayer()) && !config.includeSelf())
			{
				continue;
			}
			plugin.getAdjacentTrees(player, false).forEach(tree ->
			{
				if (plugin.isWoodcutting(player))
				{
					expectedChoppers.put(tree, expectedChoppers.getOrDefault(tree, 0) + 1);
				}
			});
		}

		expectedChoppers.forEach((tree, finalExpectedCount) ->
		{
			final Color colorForChoppers = getColorForChoppers(finalExpectedCount);
			centroidOfObjectHull(tree).ifPresent(point -> drawTextCentered(graphics, new Point(point.getX(), point.getY() + 15), "Expected: " + finalExpectedCount, colorForChoppers));
		});
	}
}

package treecount;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TreeCountPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(TreeCountPlugin.class);
		RuneLite.main(args);
	}
}
