package com.skeldoor;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DuckPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(DuckPlugin.class);
		RuneLite.main(args);
	}
}
package com.skeldoor;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("DuckDuckGoose")
public interface DuckConfig extends Config{
    @ConfigItem(
            keyName = "silenceDucks",
            name = "Silence Ducks",
            description = "Stops the ducks from quacking and giving encouragement"
    )
    default boolean silenceDucks()
    {
        return false;
    }
}

package com.skeldoor;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.coords.WorldPoint;
import java.util.Random;

@Slf4j
public class DuckPond {

    private WorldPoint NWTile;
    private WorldPoint SETile;
    private WorldPoint SWTile; // Used for orientation with POH
    private int maxDucks;
    private int plane;

    // Going to assume pond areas are square for now so I don't need to do any weird pathfinding for the movement of ducks
    DuckPond(WorldPoint nwtile, WorldPoint setile, int maxDucks){
        this.NWTile = nwtile;
        this.SETile = setile;
        this.maxDucks = maxDucks;
        this.plane = nwtile.getPlane();
        SWTile = new WorldPoint(nwtile.getX(), setile.getY(), plane);
    }

    public WorldPoint getRandomPointInPond(){
        int maxX = Math.max(NWTile.getX(), SETile.getX()) + 1;
        int minX = Math.min(NWTile.getX(), SETile.getX());
        int maxY = Math.max(NWTile.getY(), SETile.getY()) + 1;
        int minY = Math.min(NWTile.getY(), SETile.getY());

        return new WorldPoint(getRandom(minX, maxX), getRandom(minY, maxY), getPlane());
    }

    public int getPlane(){
        return plane;
    }

    public int getMaxDucks(){
        return maxDucks;
    }

    public int getRandom(int min, int max) {
        Random random = new Random();
        return random.nextInt(max - min) + min;
    }

    public boolean compareSWTiles(WorldPoint comparisionPondSWTile){
        return comparisionPondSWTile.distanceTo(SWTile) == 0;
    }
}

package com.skeldoor;
// Code adapted from https://github.com/Mrnice98/Fake-Pet-Plugin
import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.geometry.SimplePolygon;
import net.runelite.api.model.Jarvis;

import java.util.Random;

import static net.runelite.api.Perspective.COSINE;
import static net.runelite.api.Perspective.SINE;

public class Duck {

    private enum POSE_ANIM
    {
        IDLE,
        WALK,
    }

    private Client client;
    private RuneLiteObject rlObject;
    DuckPond pond;
    private int cTargetIndex;

    private class Target
    {
        public WorldPoint worldDestinationPosition;
        public LocalPoint localDestinationPosition;
        public int currentDistance;
    }

    private final int MAX_TARGET_QUEUE_SIZE = 10;
    private final Target[] targetQueue = new Target[MAX_TARGET_QUEUE_SIZE];
    private int targetQueueSize;
    private int lastDistance;
    int currentMovementSpeed = 0;
    int currentAnimationID = 6818;
    int normalDuckIdleAnimationId = 6818;
    int normalDuckMovingAnimationId = 6817;
    int colosseumDuckIdleAnimationId = 6813;
    int colosseumDuckMovingAnimationId = 6819;
    public Animation[] animationPoses = new Animation[2];
    private final int[] duckModelIds = {26873, 26870};
    private final int[] colosseumDuckModelIds = {26873, 26870};
    private final String[] duckNames = {"Drake", "Duck"};
    private String duckName;
    private boolean quacking = false;
    private int quackTimer = 0;
    private final int MAX_QUACK_TIME = 45;
    private final int COLOSSEUM_MAX_QUACK_TIME = 180;
    private final String defaultQuackText = "Quack!";
    private String quackText = "Quack!";
    private final String[] colosseumEncouragementText = {
            "Let's get quacking! You can do this!",
            "Waddle to victory, my friend!",
            "You're the ultimate quack attack!",
            "Flap harder, fight stronger!",
            "Be like water off a duck's back, unshakable and smooth!",
            "Don't just paddle, make waves!",
            "Feather you're ready or not, you can wing this!",
            "Stay in formation, we're flying to victory!",
            "Quack down the obstacles, you've got this!",
            "Keep your beak sharp and your eyes on the prize!",
            "Duck and cover!",
            "Feather your nest with wins!",
            "Just wing it!",
            "Dive in, you'll float!",
            "Paddle through the pain!",
            "Stay quack-tastic!",
            "Fly high, duckling!",
            "Shake your tail feathers!",
            "Quack up the courage!",
            "Beak-lieve in yourself!",
            "Splash into action!",
            "Ruffle some feathers!",
            "Quack on, warrior!",
            "Bill them with bravery!",
            "Migrate to victory!",
            "Why are you listening to encouragement from a duck?"};
    private Boolean isColosseumDuck = false;
    private int sex;

    SimplePolygon clickbox;

    public void init(Client client, DuckPond pond, Boolean isColosseumDuck)
    {
        this.client = client;
        this.rlObject = client.createRuneLiteObject();
        this.pond = pond;
        this.isColosseumDuck = isColosseumDuck;
        assignDuckSex();
        setupDuckNameModelAnimation();
        for (int i = 0; i < MAX_TARGET_QUEUE_SIZE; i++)
            targetQueue[i] = new Target();
    }

    private void setupDuckNameModelAnimation(){
        if (this.isColosseumDuck){
            setModel(client.loadModel(colosseumDuckModelIds[this.sex]));
            this.animationPoses[POSE_ANIM.IDLE.ordinal()] = client.loadAnimation(colosseumDuckIdleAnimationId);
            this.animationPoses[POSE_ANIM.WALK.ordinal()] = client.loadAnimation(colosseumDuckMovingAnimationId);
        }else {
            setModel(client.loadModel(duckModelIds[this.sex]));
            this.animationPoses[POSE_ANIM.IDLE.ordinal()] = client.loadAnimation(normalDuckIdleAnimationId);
            this.animationPoses[POSE_ANIM.WALK.ordinal()] = client.loadAnimation(normalDuckMovingAnimationId);
        }
        this.duckName = duckNames[this.sex];
    }

    // Winner for weirdest function name I've ever written
    private void assignDuckSex(){
        // I figured like 1 in 4 ducks are boy ducks? idk?
        int random = getRandom(0, 4);
        if (random == 0){
            this.sex = 0;
        } else {
            this.sex = 1;
        }
    }

    public void setModel(Model model)
    {
        rlObject.setModel(model);
    }

    public RuneLiteObject getRlObject(){
        return rlObject;
    }

    public String getDuckName(){
        return duckName;
    }

    public void spawn(WorldPoint position, int jauOrientation)
    {
        LocalPoint localPosition = LocalPoint.fromWorld(client, pond.getRandomPointInPond());
        if (localPosition != null && client.getPlane() == position.getPlane()){
            rlObject.setLocation(localPosition, position.getPlane());
        }
        else {
            return;
        }
        rlObject.setOrientation(jauOrientation);
        rlObject.setAnimation(animationPoses[0]);
        rlObject.setShouldLoop(true);
        rlObject.setActive(true);
        this.currentAnimationID = animationPoses[0].getId();
        this.currentMovementSpeed = 0;
        this.targetQueueSize = 0;
    }

    public void despawn()
    {
        rlObject.setActive(false);
        this.currentAnimationID = -1;
        this.currentMovementSpeed = 0;
        this.targetQueueSize = 0;
    }

    public LocalPoint getLocalLocation()
    {
        return rlObject.getLocation();
    }

    public boolean isActive()
    {
        return rlObject.isActive();
    }

    public int getOrientation()
    {
        return rlObject.getOrientation();
    }

    public SimplePolygon getClickbox(){
        return clickbox;
    }

    public boolean getQuacking(){
        return quacking;
    }

    public String getQuackText(){
       return quackText;
    }

    public void quack(Boolean silenceDucks){
        if (silenceDucks) {
            quacking = false;
            return;
        }
        quacking = true;
        if (isColosseumDuck && new java.util.Random().nextInt(30) == 0){
            this.quackText = colosseumEncouragementText[new java.util.Random().nextInt(colosseumEncouragementText.length)];
            quackTimer = COLOSSEUM_MAX_QUACK_TIME;
        } else {
            quackTimer = MAX_QUACK_TIME;
            this.quackText = defaultQuackText;
        }
    }

    public String getExamine(String menuTarget){
        String[] duckExamines = {"Quack?", "It walks like a duck. Well, I guess it waddles like one."};
        String rareDrakeExamine = "This isn't Josh?";
        String duckExamine;
        if (menuTarget.contains("Drake")){
            duckExamine = duckExamines[0];
            if (getRandom(0, 50) == 0) duckExamine = rareDrakeExamine;
        } else {
            duckExamine = duckExamines[1];
        }
        return duckExamine;
    }

    // moveTo() adds target movement states to the queue for later per-frame updating for rendering in onClientTick()
    public void moveTo(WorldPoint worldPosition, int jauOrientation)
    {

        if (!rlObject.isActive())
        {
            spawn(worldPosition, jauOrientation);
        }

        LocalPoint localPosition = LocalPoint.fromWorld(client, worldPosition);

        // just clear the queue and move immediately to the destination if many ticks behind
        if (targetQueueSize >= MAX_TARGET_QUEUE_SIZE - 2)
        {
            targetQueueSize = 0;
        }


        int prevTargetIndex = (cTargetIndex + targetQueueSize - 1) % MAX_TARGET_QUEUE_SIZE;
        int newTargetIndex = (cTargetIndex + targetQueueSize) % MAX_TARGET_QUEUE_SIZE;

        if (localPosition == null)
        {
            return;
        }

        WorldPoint prevWorldPosition;
        if (targetQueueSize++ > 0)
        {
            prevWorldPosition = targetQueue[prevTargetIndex].worldDestinationPosition;
        }
        else
        {
            prevWorldPosition = WorldPoint.fromLocal(client,rlObject.getLocation());
        }

        int distance = prevWorldPosition.distanceTo(worldPosition);

        this.targetQueue[newTargetIndex].worldDestinationPosition = worldPosition;
        this.targetQueue[newTargetIndex].localDestinationPosition = localPosition;
        this.targetQueue[newTargetIndex].currentDistance = distance;

    }


    public void onClientTick()
    {
        if (quackTimer > 0) quackTimer--;
        if (quackTimer == 0) quacking = false;
        if (rlObject.isActive())
        {
            if (targetQueueSize > 0)
            {
                if (targetQueue[cTargetIndex] == null || targetQueue[cTargetIndex].worldDestinationPosition == null) return;
                int targetPlane = targetQueue[cTargetIndex].worldDestinationPosition.getPlane();

                LocalPoint targetPosition = targetQueue[cTargetIndex].localDestinationPosition;

                if (targetPosition == null){
                    despawn();
                    return;
                }

                double intx = rlObject.getLocation().getX() - targetPosition.getX();
                double inty = rlObject.getLocation().getY() - targetPosition.getY();

                boolean rotationDone = rotateObject(intx,inty);

                if (client.getPlane() != targetPlane || !targetPosition.isInScene())
                {
                    // this actor is no longer in a visible area on our client, so let's despawn it
                    despawn();
                    return;
                }

                //apply animation if move-speed / distance has changed
                if (lastDistance != targetQueue[cTargetIndex].currentDistance)
                {
                    int distance = targetQueue[cTargetIndex].currentDistance;

                    // we don't want to go beyond walk (speed of 1)
                    rlObject.setAnimation(distance > 1 ? null : animationPoses[distance]);

                    if (rlObject.getAnimation() == null)
                    {
                        rlObject.setAnimation(animationPoses[1]);
                    }

                }

                this.lastDistance = targetQueue[cTargetIndex].currentDistance;

                LocalPoint currentPosition = rlObject.getLocation();
                int dx = targetPosition.getX()  - currentPosition.getX();
                int dy = targetPosition.getY() - currentPosition.getY();


                // are we not where we need to be?
                if (dx != 0 || dy != 0)
                {

                    int speed = 2;
                    // only use the delta if it won't send up past the target
                    if (Math.abs(dx) > speed)
                    {
                        dx = Integer.signum(dx) * speed;
                    }

                    if (Math.abs(dy) > speed)
                    {
                        dy = Integer.signum(dy) * speed;
                    }




                    LocalPoint newLocation = new LocalPoint(currentPosition.getX() + dx , currentPosition.getY() + dy);


                    rlObject.setLocation(newLocation, targetPlane);

                    dx = targetPosition.getX() - rlObject.getLocation().getX();
                    dy = targetPosition.getY() - rlObject.getLocation().getY();
                }



                // have we arrived at our target?
                if (dx == 0 && dy == 0 && rotationDone)
                {
                    // if so, pull out the next target
                    cTargetIndex = (cTargetIndex + 1) % MAX_TARGET_QUEUE_SIZE;
                    targetQueueSize--;
                    rlObject.setAnimation(animationPoses[0]);
                }

            }

            LocalPoint lp = getLocalLocation();
            int zOff = Perspective.getTileHeight(client, lp, client.getPlane());

            clickbox = calculateAABB(client, getRlObject().getModel(), getOrientation(), lp.getX(), lp.getY(), client.getPlane(), zOff);

        }

    }

    public boolean rotateObject(double intx, double inty)
    {

        final int JAU_FULL_ROTATION = 2048;
        int targetOrientation = radToJau(Math.atan2(intx, inty));
        int currentOrientation = rlObject.getOrientation();

        int dJau = (targetOrientation - currentOrientation) % JAU_FULL_ROTATION;

        if (dJau != 0)
        {
            final int JAU_HALF_ROTATION = 1024;
            final int JAU_TURN_SPEED = 32;
            int dJauCW = Math.abs(dJau);

            if (dJauCW > JAU_HALF_ROTATION)// use the shortest turn
            {
                dJau = (currentOrientation - targetOrientation) % JAU_FULL_ROTATION;
            }

            else if (dJauCW == JAU_HALF_ROTATION)// always turn right when turning around
            {
                dJau = dJauCW;
            }


            // only use the delta if it won't send up past the target
            if (Math.abs(dJau) > JAU_TURN_SPEED)
            {
                dJau = Integer.signum(dJau) * JAU_TURN_SPEED;
            }


            int newOrientation = (JAU_FULL_ROTATION + rlObject.getOrientation() + dJau) % JAU_FULL_ROTATION;

            rlObject.setOrientation(newOrientation);

            dJau = (targetOrientation - newOrientation) % JAU_FULL_ROTATION;
        }

        return dJau == 0;
    }

    static int radToJau(double a)
    {
        int j = (int) Math.round(a / Perspective.UNIT);
        return j & 2047;
    }

    public int getRandom(int min, int max) {
        Random random = new Random();
        return random.nextInt(max - min) + min;
    }

    private static SimplePolygon calculateAABB(Client client, Model m, int jauOrient, int x, int y, int z, int zOff)
    {
        AABB aabb = m.getAABB(jauOrient);

        int x1 = aabb.getCenterX();
        int y1 = aabb.getCenterZ();
        int z1 = aabb.getCenterY() + zOff;

        int ex = aabb.getExtremeX();
        int ey = aabb.getExtremeZ();
        int ez = aabb.getExtremeY();

        int x2 = x1 + ex;
        int y2 = y1 + ey;
        int z2 = z1 + ez;

        x1 -= ex;
        y1 -= ey;
        z1 -= ez;

        int[] xa = new int[]{
                x1, x2, x1, x2,
                x1, x2, x1, x2
        };
        int[] ya = new int[]{
                y1, y1, y2, y2,
                y1, y1, y2, y2
        };
        int[] za = new int[]{
                z1, z1, z1, z1,
                z2, z2, z2, z2
        };

        int[] x2d = new int[8];
        int[] y2d = new int[8];

        modelToCanvasCpu(client, 8, x, y, z, 0, xa, ya, za, x2d, y2d);

        return Jarvis.convexHull(x2d, y2d);
    }

    private static void modelToCanvasCpu(Client client, int end, int x3dCenter, int y3dCenter, int z3dCenter, int rotate, int[] x3d, int[] y3d, int[] z3d, int[] x2d, int[] y2d)
    {
        final int
                cameraPitch = client.getCameraPitch(),
                cameraYaw = client.getCameraYaw(),

                pitchSin = SINE[cameraPitch],
                pitchCos = COSINE[cameraPitch],
                yawSin = SINE[cameraYaw],
                yawCos = COSINE[cameraYaw],
                rotateSin = SINE[rotate],
                rotateCos = COSINE[rotate],

                cx = x3dCenter - client.getCameraX(),
                cy = y3dCenter - client.getCameraY(),
                cz = z3dCenter - client.getCameraZ(),

                viewportXMiddle = client.getViewportWidth() / 2,
                viewportYMiddle = client.getViewportHeight() / 2,
                viewportXOffset = client.getViewportXOffset(),
                viewportYOffset = client.getViewportYOffset(),

                zoom3d = client.getScale();

        for (int i = 0; i < end; i++)
        {
            int x = x3d[i];
            int y = y3d[i];
            int z = z3d[i];

            if (rotate != 0)
            {
                int x0 = x;
                x = x0 * rotateCos + y * rotateSin >> 16;
                y = y * rotateCos - x0 * rotateSin >> 16;
            }

            x += cx;
            y += cy;
            z += cz;

            final int
                    x1 = x * yawCos + y * yawSin >> 16,
                    y1 = y * yawCos - x * yawSin >> 16,
                    y2 = z * pitchCos - y1 * pitchSin >> 16,
                    z1 = y1 * pitchCos + z * pitchSin >> 16;

            int viewX, viewY;

            if (z1 < 50)
            {
                viewX = Integer.MIN_VALUE;
                viewY = Integer.MIN_VALUE;
            }
            else
            {
                viewX = (viewportXMiddle + x1 * zoom3d / z1) + viewportXOffset;
                viewY = (viewportYMiddle + y2 * zoom3d / z1) + viewportYOffset;
            }

            x2d[i] = viewX;
            y2d[i] = viewY;
        }
    }
}

package com.skeldoor;

import javax.inject.Inject;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.task.Schedule;
import net.runelite.client.ui.overlay.OverlayManager;

import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.List;

@Slf4j
@PluginDescriptor(
	name = "Duck Duck Goose",
	description = "Adds ducks to empty ponds to help bring life to the world"
)
public class DuckPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	ChatMessageManager chatMessageManager;

	@Inject
	private DuckOverlay duckOverlay;

	@Inject
	private DuckConfig config;

	List<Duck> ducks;

	DuckPond yanillePond = new DuckPond(new WorldPoint(2542, 3082, 0), new WorldPoint(2544, 3079, 0), 3);
	DuckPond barbVillagePond = new DuckPond(new WorldPoint(3110, 3435, 0), new WorldPoint(3113, 3431, 0), 4);
	DuckPond zulandraFishingPond = new DuckPond(new WorldPoint(2184, 3076,0), new WorldPoint(2195,3071, 0), 5);
	DuckPond zulandraPierPond = new DuckPond(new WorldPoint(2217, 3052,0), new WorldPoint(2210,3055, 0), 3);
	DuckPond undergroundBloodveldPond = new DuckPond(new WorldPoint(3618, 9742,0), new WorldPoint(3624,9736, 0), 2);
	DuckPond southFarmingGuildPond = new DuckPond(new WorldPoint(1235, 3690,0), new WorldPoint(1226,3693, 0), 5);
	DuckPond fossilIslandCleaningPond = new DuckPond(new WorldPoint(3691, 3884,0), new WorldPoint(3692,3882, 0), 2);
	DuckPond lletyaPond = new DuckPond(new WorldPoint(2325, 3152,0), new WorldPoint(2328,3151, 0), 3);
	DuckPond ardyZooPond = new DuckPond(new WorldPoint(2629, 3270,0), new WorldPoint(2631,3269, 0), 2);
	DuckPond[] staticDuckPonds = {yanillePond, barbVillagePond, zulandraFishingPond, zulandraPierPond, undergroundBloodveldPond, southFarmingGuildPond, fossilIslandCleaningPond, lletyaPond, ardyZooPond};
	List<DuckPond> dynamicDuckPonds;

	int breadItemId = 2309;
	int POHPondID = 4527;

	boolean ducksInitialised = false;

	@Override
	protected void startUp()
	{
		ducks = new ArrayList<>();
		dynamicDuckPonds = new ArrayList<>();
		overlayManager.add(duckOverlay);
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(duckOverlay);
		for (Duck duck : ducks)
		{
			duck.despawn();
		}
	}

	public Client getClient(){
		return client;
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() == GameState.LOGGING_IN && !ducksInitialised)
		{
			for (DuckPond duckpond : staticDuckPonds){
				for (int i = 0; i < duckpond.getMaxDucks(); i++)
				{
					Duck duck = new Duck();
					ducks.add(duck);
					duck.init(client, duckpond, false);
				}
			}
			ducksInitialised = true;
		}
		if (gameStateChanged.getGameState() == GameState.LOADING || gameStateChanged.getGameState() == GameState.LOGIN_SCREEN)
		{
			for (Duck duck : ducks)
			{
				duck.despawn();
			}
		}
		if (gameStateChanged.getGameState() == GameState.LOGGED_IN)
		{
			for (Duck duck : ducks){
				duck.spawn(duck.pond.getRandomPointInPond(), getRandom(0, 2047));
			}
		}
	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned npcSpawned){
		NPC npc = npcSpawned.getNpc();
		if (npc.getId() == 12808){ // Minimus in colosseum
			WorldPoint SWTile = npc.getWorldLocation();
			if (!dynamicPondAlreadyExists(SWTile)) {
				DuckPond colosseumPond1 = new DuckPond(new WorldPoint(SWTile.getX()+20, SWTile.getY()+20, 0), new WorldPoint(SWTile.getX()+15, SWTile.getY()+15, 0), 6);
				DuckPond colosseumPond2 = new DuckPond(new WorldPoint(SWTile.getX()-20, SWTile.getY()+20, 0), new WorldPoint(SWTile.getX()-15, SWTile.getY()+15, 0), 6);
				DuckPond colosseumPond3 = new DuckPond(new WorldPoint(SWTile.getX()-20, SWTile.getY()-20, 0), new WorldPoint(SWTile.getX()-15, SWTile.getY()-15, 0), 6);
				DuckPond colosseumPond4 = new DuckPond(new WorldPoint(SWTile.getX()+20, SWTile.getY()-20, 0), new WorldPoint(SWTile.getX()+15, SWTile.getY()-15, 0), 6);

				dynamicDuckPonds.add(colosseumPond1);
				dynamicDuckPonds.add(colosseumPond2);
				dynamicDuckPonds.add(colosseumPond3);
				dynamicDuckPonds.add(colosseumPond4);
				for (DuckPond duckPond: new ArrayList<>(Arrays.asList(colosseumPond1, colosseumPond2, colosseumPond3, colosseumPond4))){
					for (int i = 0; i < duckPond.getMaxDucks(); i++)
					{
						Duck duck = new Duck();
						ducks.add(duck);
						duck.init(client, duckPond, true);
					}
				}
			}
			// Refresh runelite objects after colosseum loading
			for (Duck duck : ducks){
				duck.despawn();
				duck.spawn(duck.pond.getRandomPointInPond(), getRandom(0, 2047));
			}
		}
	}

	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned gos){
		GameObject housePond = gos.getGameObject();
		if (housePond.getId() == POHPondID){
			if (!dynamicPondAlreadyExists(housePond.getWorldLocation())) {
				WorldPoint SWTile = housePond.getWorldLocation();
				DuckPond dynamicHousePond = new DuckPond(new WorldPoint(SWTile.getX(), SWTile.getY() +1, SWTile.getPlane()), new WorldPoint(SWTile.getX() +1, SWTile.getY(),SWTile.getPlane()), 2);
				dynamicDuckPonds.add(dynamicHousePond);
				for (int i = 0; i < dynamicHousePond.getMaxDucks(); i++)
				{
					Duck duck = new Duck();
					ducks.add(duck);
					duck.init(client, dynamicHousePond, false);
					duck.getRlObject().setRadius(250); // Make duck render on top of pond
				}
			}
			// Refresh runelite objects after POH loading screens
			for (Duck duck : ducks){
				duck.despawn();
				duck.spawn(duck.pond.getRandomPointInPond(), getRandom(0, 2047));
			}
		}
	}

	private boolean dynamicPondAlreadyExists(WorldPoint housePondSWTile) {
		for (DuckPond existingDynamicDuckPond : dynamicDuckPonds){
			if (existingDynamicDuckPond.compareSWTiles(housePondSWTile)){
				return true;
			}
		}
		return false;
	}

	@Schedule(
			period = 10,
			unit = ChronoUnit.SECONDS,
			asynchronous = true
	)
	public void waddleToNewPoint(){
		for (Duck duck : ducks) {
			if (duck.isActive()) {
				if (getRandom(0, 3) == 0){ // Only move the ducks a third of the time
					WorldPoint newPoint = duck.pond.getRandomPointInPond();
					duck.moveTo(newPoint, radToJau(Math.atan2(newPoint.getX(), newPoint.getY())));
					duck.quack(config.silenceDucks());
				}
			}
		}
	}

	@Schedule(
			period = 5,
			unit = ChronoUnit.SECONDS,
			asynchronous = true
	)
	public void quack(){
		for (Duck duck : ducks) {
			if (duck.isActive()) {
				if (getRandom(0, 3) == 0){
					duck.quack(config.silenceDucks());
				}
			}
		}
	}

	static int radToJau(double a)
	{
		int j = (int) Math.round(a / Perspective.UNIT);
		return j & 2047;
	}

	@Subscribe
	public void onClientTick(ClientTick ignored) {
		for (Duck duck : ducks) {
			if (duck.getRlObject() != null && duck.animationPoses != null) {
				duck.onClientTick();
			}
		}
	}

	@Subscribe
	public void onMenuOpened(MenuOpened ignored)
	{
		int firstMenuIndex = 1;

		for (Duck duck : ducks){
			if (duck.isActive() && duck.getClickbox() != null && client.getMouseCanvasPosition() != null){
				if (duck.getClickbox().contains(client.getMouseCanvasPosition().getX(),client.getMouseCanvasPosition().getY()))
				{
					String option;
					if (Objects.requireNonNull(client.getItemContainer(InventoryID.INVENTORY)).contains(breadItemId)){
						option = "Feed";
					} else {
						option = "Examine";
					}

					client.createMenuEntry(firstMenuIndex)
							.setOption(option)
							.setTarget("<col=fffe00>" + duck.getDuckName() + "</col>")
							.setType(MenuAction.RUNELITE)
							.setParam0(0)
							.setParam1(0)
							.setDeprioritized(true);
				}
			}
		}
	}

	@Subscribe
	private void onMenuOptionClicked(MenuOptionClicked event) {
		if (event.getMenuOption().equals("Feed") || event.getMenuOption().equals("Examine")) {
			if (!(event.getMenuTarget().equals("<col=fffe00>Duck</col>") || event.getMenuTarget().equals("<col=fffe00>Drake</col>")))
				return;
			event.consume();
			String messageText;
			if (Objects.equals(event.getMenuOption(), "Feed")){
				messageText = "You tear off a chunk of bread and offer it to the duck. They take it enthusiastically and quack.";
			} else {
				messageText = ducks.get(1).getExamine(event.getMenuTarget());
			}
			String chatMessage = new ChatMessageBuilder()
					.append(ChatColorType.NORMAL)
					.append(messageText)
					.build();

			chatMessageManager.queue(QueuedMessage.builder()
					.type(ChatMessageType.NPC_EXAMINE)
					.runeLiteFormattedMessage(chatMessage)
					.timestamp((int) (System.currentTimeMillis() / 1000))
					.build());
		}

	}

	public int getRandom(int min, int max) {
		Random random = new Random();
		return random.nextInt(max - min) + min;
	}

	@Provides
	DuckConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(DuckConfig.class);
	}
}





package com.skeldoor;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import javax.inject.Inject;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.JagexColors;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

public class DuckOverlay extends Overlay{
    public static final int IMAGE_Z_OFFSET = 30;

    private final DuckPlugin plugin;

    @Inject
    public DuckOverlay(DuckPlugin plugin)
    {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        this.plugin = plugin;
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        for (Duck duck : plugin.ducks){
            if (duck.isActive() && duck.getQuacking())
            {
                LocalPoint lp =  duck.getLocalLocation();
                if (lp != null)
                {
                    Point p = Perspective.localToCanvas(plugin.getClient(), lp, plugin.getClient().getPlane(), duck.getRlObject().getModelHeight());
                    if (p != null)
                    {
                        Font overheadFont = FontManager.getRunescapeBoldFont();
                        FontMetrics metrics = graphics.getFontMetrics(overheadFont);
                        String quackText = duck.getQuackText();
                        Point shiftedP = new Point(p.getX() - (metrics.stringWidth(quackText) / 2), p.getY());

                        graphics.setFont(overheadFont);
                        OverlayUtil.renderTextLocation(graphics, shiftedP, quackText,
                                JagexColors.YELLOW_INTERFACE_TEXT);
                    }
                }
            }
        }

        return null;
    }
}

