package com.templetracker;

import com.templetracker.menuentryswapper.MenuSwapperPlugin;
import com.templetracker.overlay.TempleTrackerPlugin;
import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class RunClientAndPlugin
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(TempleTrackerPlugin.class, MenuSwapperPlugin.class);
		RuneLite.main(args);
	}
}
package com.templetracker.menuentryswapper;

import com.google.common.collect.ArrayListMultimap;
import com.google.inject.Provides;
import com.templetracker.constructors.Companion;
import java.util.List;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.MenuEntry;
import net.runelite.api.events.ClientTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.Text;

@Slf4j
@PluginDescriptor(
	name = "Temple Trekking Swapper",
	description = "Adds the possibility to swap to continue-trek, escort (companion), and use on the druid pouch"
)
public class MenuSwapperPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private MenuSwapperConfig config;

	@Provides
	MenuSwapperConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(MenuSwapperConfig.class);
	}

	@Override
	public void startUp() {}

	@Override
	public void shutDown() {}

	private final ArrayListMultimap<String, Integer> optionIndexes = ArrayListMultimap.create();

	@Subscribe(priority = 10)
	public void onClientTick(ClientTick clientTick)
	{
		// The menu is not rebuilt when it is open, so don't swap or else it will
		// repeatedly swap entries
		if (client.getGameState() != GameState.LOGGED_IN || client.isMenuOpen())
		{
			return;
		}

		MenuEntry[] menuEntries = client.getMenuEntries();

		// Build option map for quick lookup in findIndex
		int idx = 0;
		optionIndexes.clear();
		for (MenuEntry entry : menuEntries)
		{
			String option = Text.removeTags(entry.getOption()).toLowerCase();
			optionIndexes.put(option, idx++);
		}

		// Perform swaps
		idx = 0;
		for (MenuEntry entry : menuEntries)
		{
			swapMenuEntry(entry, menuEntries, idx++);
		}
	}

	private void swapMenuEntry(MenuEntry menuEntry, MenuEntry[] menuEntries, int index)
	{
		final String option = Text.removeTags(menuEntry.getOption()).toLowerCase();
		final String target = Text.removeTags(menuEntry.getTarget()).toLowerCase();

		if (config.swapContinueTrek() && option.equals("look-at") && target.equals("path")) {
			swap("continue-trek", option, target, menuEntries, index);
		}
		else if (config.swapUsePouch() && option.equals("fill") && target.equals("druid pouch")) {
			swap("use", option, target, menuEntries, index);
		}
		else if (config.swapEscort() && option.equals("talk-to") && Companion.getCompanion(target) != null) {
			swap("escort", option, target, menuEntries, index);
		}
	}

	private void swap(String priority, String option, String target, MenuEntry[] entries, int index) {
		int thisIndex = findIndex(entries, index, option, target);
		int optionIdx = findIndex(entries, thisIndex, priority, target);

		if (thisIndex >= 0 && optionIdx >= 0)
		{
			swap(optionIdx, thisIndex, entries);
		}
	}

	private void swap(int index1, int index2, MenuEntry[] entries) {
		MenuEntry entry = entries[index1];
		entries[index1] = entries[index2];
		entries[index2] = entry;

		client.setMenuEntries(entries);
	}

	private int findIndex(MenuEntry[] entries, int limit, String option, String target) {
		List<Integer> indexes = optionIndexes.get(option);

		// We want the last index which matches the target, as that is what is top-most
		// on the menu
		for (int i = indexes.size() - 1; i >= 0; --i)
		{
			int idx = indexes.get(i);
			MenuEntry entry = entries[idx];
			String entryTarget = Text.removeTags(entry.getTarget()).toLowerCase();

			// Limit to the last index which is prior to the current entry
			if (idx <= limit && entryTarget.equals(target))
			{
				return idx;
			}
		}
		return -1;
	}

}

package com.templetracker.menuentryswapper;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("templetrekswapper")
public interface MenuSwapperConfig extends Config
{
	@ConfigItem(
		keyName = "swapContinueTrek",
		name = "Prioritize Continue-trek",
		description = "Prioritizes Continue-trek over Look-at"
	)
	default boolean swapContinueTrek()
	{
		return true;
	}

	@ConfigItem(
		keyName = "swapUsePouch",
		name = "Prioritize Use Druid Pouch",
		description = "Prioritizes Use over Fill on the Druid Pouch"
	)
	default boolean swapUsePouch()
	{
		return true;
	}

	@ConfigItem(
		keyName = "swapEscort",
		name = "Prioritize Escort",
		description = "Prioritizes Escort over Talk to on temple trek companions"
	)
	default boolean swapEscort()
	{
		return true;
	}
}

package com.templetracker.constructors;

import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
public enum Companion {
	FYIONY_FRAY("Fyiona Fray (easy)", 1567),
	DALCIAN_FANG("Dalcian Fang (easy)", 1566),
	MAGE("Mage (easy)", 1578),
	ADVENTURER("Adventurer (easy)", 1577),
	JAYENE_KLIYN("Jayene Kliyn (medium)", 1564),
	VALANTINE_EPPEL("Valantay Eppel (medium)", 1565),
	RANGER("Ranger (medium)", 1576),
	APPRENTICE("Apprentice (medium)", 1575),
	ROLAYNE_TWICKIT("Rolayne Twickit (hard)", 1563),
	SMIDDI_RYAK("Smiddi Ryak (hard)", 1562),
	WOMAN_AT_ARMS("Woman-at-arms (Hard)", 1574),
	FORESTER("Forester (hard)", 1573);

	@Getter
	private final String name;

	@Getter
	private final int NpcId;

	public static Companion getCompanion(String npcName) {
		for (Companion c : Companion.values()) {
			if (c.name.toLowerCase().equals(npcName.toLowerCase())) {
				return c;
			}
		}
		return null;
	}
}
package com.templetracker.constructors;

import lombok.Data;

@Data
public class Encounter
{
	Long startTime = System.currentTimeMillis();
	Long endTime = -1L;

	EncounterName name = null;

	int location = -1;
	int route = -1;
}

package com.templetracker.constructors;

import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
public enum StartLocation
{
	BURGH_DE_ROTT("Burgh de rott", 13874),
	PATERDOMUS("Paterdomus", 13622);

	@Getter
	private final String name;

	@Getter
	private final int RegionID;
}

package com.templetracker.constructors;

import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
public enum EncounterName
{
	VAMPYRES("Vampyres"),
	GHASTS("Ghasts"),
	SHADES("Shades"),
	SNAKES("Swamp snakes"),
	SNAILS("Giant snails"),
	NAIL_BEASTS("Nail beasts"),
	TENTACLES("Tentacles"),
	BRIDGE("Broken bridge"),
	BOG("Bog"),
	RIVER("River Swing"),
	ABIDOR("Abidor Crank");

	@Getter
	private final String name;
}

package com.templetracker.constructors;
import lombok.Data;
import java.util.ArrayList;

@Data
public class TempleTracker
{
	Long startTime = System.currentTimeMillis();
	Long endTime = -1L;

	StartLocation startLocation = null;
	Companion companion = null;

	int route = -1;
	int points = -1;

	int check = 0;
	boolean templeTrekking;

	Encounter latestEncounter;

	ArrayList<Encounter> encounterList = new ArrayList<>();

	public void addEncounterToList()
	{
		encounterList.add(latestEncounter);
		setLatestEncounter(null);
	}
}






package com.templetracker.overlay;

import com.google.inject.Provides;
import com.templetracker.FileReadWriter;
import com.templetracker.constructors.Companion;
import com.templetracker.constructors.Encounter;
import com.templetracker.constructors.EncounterName;
import com.templetracker.constructors.StartLocation;
import com.templetracker.constructors.TempleTracker;
import javax.inject.Inject;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.MenuAction;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GroundObjectSpawned;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.events.NpcSpawned;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.OverlayMenuClicked;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.OverlayMenuEntry;

@Slf4j
@PluginDescriptor(
	name = "Temple Tracker",
	description = "Adds an overlay to the screen showing treks/hour, duration of each trek and average points"
)
public class TempleTrackerPlugin extends Plugin
{
	@Getter
	TempleTracker tracker = new TempleTracker();

	@Inject
	private Client client;

	@Inject
	private TempleTrackerConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private TempleTrackerOverlayPanel overlayPanel;

	@Inject TreksPerHourOverlayPanel treksPerHourOverlayPanel;

	private final FileReadWriter fw = new FileReadWriter();

	private int previousRegion = 0;

	@Override
	protected void startUp()
	{
	}

	@Override
	protected void shutDown()
	{
		removePanels();
	}

	@Subscribe
	public void onMenuOptionClicked(MenuOptionClicked menuOptionClicked) {
		if (tracker.getRoute() > 0) {
			return;
		}
		//menu option ID's for the different temple trekking routes. 1 is the easy route, 3 is the hard route.
		final int ROUTE_1 = 21561365;
		final int ROUTE_2 = 21561369;
		final int ROUTE_3 = 21561373;

		switch (menuOptionClicked.getWidgetId()) {
			case ROUTE_1:
				tracker.setRoute(1);
				break;
			case ROUTE_2:
				tracker.setRoute(2);
				break;
			case ROUTE_3:
				tracker.setRoute(3);
				break;
			default:
				break;
		}
	}

	@Subscribe
	public void onGroundObjectSpawned(GroundObjectSpawned groundObjectSpawned) {
		if (!tracker.isTempleTrekking()) {
			return;
		}

		final int BOG = 13838;
		final int BRIDGE = 13834;

		switch(groundObjectSpawned.getGroundObject().getId())
		{
			case BOG:
				newEncounter(EncounterName.BOG);
				break;
			case BRIDGE:
				newEncounter(EncounterName.BRIDGE);
		}
	}

	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned gameObjectSpawned) {
		if (!tracker.isTempleTrekking() || (tracker.getLatestEncounter() != null && tracker.getLatestEncounter().getName() != null)) {
			return;
		}

		final int RIVER_SWING = 13847;
		final int KRAKEN_BOAT = 13864;

		switch (gameObjectSpawned.getGameObject().getId()) {
			case RIVER_SWING:
				newEncounter(EncounterName.RIVER);
				break;
			case KRAKEN_BOAT:
				newEncounter(EncounterName.TENTACLES);
			default:
				break;
		}
	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned npcSpawned) {
		if (!tracker.isTempleTrekking()
			|| npcSpawned == null || npcSpawned.getNpc() == null || npcSpawned.getNpc().getName() == null
			|| (tracker.getLatestEncounter() != null && tracker.getLatestEncounter().getName() != null))
		{
			return;
		}

		if (tracker.getCompanion() == null && Companion.getCompanion(npcSpawned.getNpc().getName()) != null) {
			tracker.setCompanion(Companion.getCompanion(npcSpawned.getNpc().getName()));
		}

		final String GHAST_NAME = "Ghast";
		final String SHADE_NAME = "Shade";
		final String SHADE_RIYL_NAME = "Riyl shadow";
		final String SHADE_ASYN_NAME = "Asyn shadow";
		final String NAIL_BEAST_NAME = "Nail beast";
		final String SNAIL_NAME = "Giant snail";
		final String SNAKE_NAME = "Swamp snake";
		final String VAMPYRE_NAME = "Vampyre Juvinate";
		final String ABIDOR_NAME = "Abidor Crank";

		switch (npcSpawned.getNpc().getName()) {
			case GHAST_NAME:
				newEncounter(EncounterName.GHASTS);
				break;
			case SHADE_NAME:
			case SHADE_ASYN_NAME:
			case SHADE_RIYL_NAME:
				newEncounter(EncounterName.SHADES);
				break;
			case NAIL_BEAST_NAME:
				newEncounter(EncounterName.NAIL_BEASTS);
				break;
			case SNAIL_NAME:
				newEncounter(EncounterName.SNAILS);
				break;
			case SNAKE_NAME:
				newEncounter(EncounterName.SNAKES);
				break;
			case VAMPYRE_NAME:
				newEncounter(EncounterName.VAMPYRES);
				break;
			case ABIDOR_NAME:
				newEncounter(EncounterName.ABIDOR);
				break;
			default:
				break;
		}
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged varbitChanged) {
		int points = client.getVarbitValue(1955);
		int startCheckValue = client.getVarbitValue(1956);
		int encounter = client.getVarbitValue(1958);
		int escaping = client.getVarbitValue(1954);

		if (points != tracker.getPoints()) {
			if (points > tracker.getPoints() && tracker.isTempleTrekking()) {
				tracker.setPoints(points);
			}
		}

		//1956 0 -> 1 is starting trek
		if (startCheckValue == 1 && tracker.getCheck() == 0) {
			tracker.setCheck(1);
		}

		//1958 -> number = new encounter
		if (encounter != 0 && tracker.getLatestEncounter() != null) {
			tracker.getLatestEncounter().setLocation(encounter);
		}

		//1958 -> 0 = end of the encounter
		else if (encounter == 0 && tracker.getLatestEncounter() != null) {
			tracker.getLatestEncounter().setEndTime(System.currentTimeMillis());
			tracker.addEncounterToList();
		}

		//1954 1 -> 0 is tping or escaping
		if (escaping == 0 && tracker.isTempleTrekking()) {
			templeTrekkingEnded();
		}
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged) {
		if (gameStateChanged.getGameState() == GameState.LOGGING_IN)
		{
			fw.updateUsername(client.getUsername());
		}

		if (client.getLocalPlayer() == null) {
			return;
		}

		//player is returning to burgh de rott or paterdomus at the start, or finished the trek
		if (tracker.isTempleTrekking() && (client.getLocalPlayer().getWorldLocation().getRegionID() == StartLocation.BURGH_DE_ROTT.getRegionID()
			|| client.getLocalPlayer().getWorldLocation().getRegionID() == StartLocation.PATERDOMUS.getRegionID()))
		{
			if (tracker.getEndTime() < 0 && tracker.getStartLocation() != null && client.getLocalPlayer().getWorldLocation().getRegionID() != tracker.getStartLocation().getRegionID())
			{
				tracker.setEndTime(System.currentTimeMillis());
			}
			templeTrekkingEnded();
		}
		//game state is changed just before location is changed, so use this bodge to set temple trekking true
		if (!tracker.isTempleTrekking() && tracker.getCheck() == 1 &&
			(client.getLocalPlayer().getWorldLocation().getRegionID() == StartLocation.BURGH_DE_ROTT.getRegionID()
			|| client.getLocalPlayer().getWorldLocation().getRegionID() == StartLocation.PATERDOMUS.getRegionID()))
		{
			templeTrekkingStarted();
		}

		int location = WorldPoint.fromLocalInstance(client, client.getLocalPlayer().getLocalLocation()).getRegionID();
		if (tracker.getEndTime() > 0
			&& location != StartLocation.BURGH_DE_ROTT.getRegionID()
			&& location != StartLocation.PATERDOMUS.getRegionID()
			&& location != 7769 //home
			&& previousRegion != 7769 //region changes for a bit when tp'ing away from home
			&& location != 13613) //elidinis statue
		{
			removePanels();
		}

		if (location != previousRegion) {
			previousRegion = location;
		}
	}

	@Subscribe
	public void onOverlayMenuClicked(OverlayMenuClicked overlayMenuClicked)	{
		OverlayMenuEntry overlayMenuEntry = overlayMenuClicked.getEntry();
		if (overlayMenuEntry.getMenuAction() == MenuAction.RUNELITE_OVERLAY
			&& overlayMenuClicked.getEntry().getOption().equals(TreksPerHourOverlayPanel.TREKS_RESET)
			&& overlayMenuClicked.getOverlay() == treksPerHourOverlayPanel)
		{
			treksPerHourOverlayPanel.reset();
		}
	}

	public void newEncounter(EncounterName name) {
		if (tracker.getLatestEncounter() != null) {
			return;
		}
		Encounter tempEncounter = new Encounter();
		tempEncounter.setName(name);
		tempEncounter.setRoute(tracker.getRoute());

		tracker.setLatestEncounter(tempEncounter);
	}

	private void templeTrekkingStarted() {
		tracker = new TempleTracker();
		tracker.setTempleTrekking(true);

		if (client.getLocalPlayer() != null) {
			if (client.getLocalPlayer().getWorldLocation().getRegionID() == StartLocation.PATERDOMUS.getRegionID()) {
				tracker.setStartLocation(StartLocation.PATERDOMUS);
			}
			else if (client.getLocalPlayer().getWorldLocation().getRegionID() == StartLocation.BURGH_DE_ROTT.getRegionID()) {
				tracker.setStartLocation(StartLocation.BURGH_DE_ROTT);
			}
		}

		if (config.showOverlay())
		{
			addPanels();
		}
	}

	private void templeTrekkingEnded() {
		tracker.setCheck(0);
		tracker.setTempleTrekking(false);
		if (tracker.getEndTime() < 0) {
			overlayManager.remove(overlayPanel);
		}
		else {
			if (config.logData()) {
				fw.writeToFile(tracker);
			}
			treksPerHourOverlayPanel.addTrek(tracker);
		}

	}

	private void addPanels() {
		overlayManager.add(overlayPanel);
		overlayManager.add(treksPerHourOverlayPanel);
	}

	private void removePanels() {
		overlayManager.remove(overlayPanel);
		overlayManager.remove(treksPerHourOverlayPanel);
	}

	@Provides
	TempleTrackerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(TempleTrackerConfig.class);
	}
}

package com.templetracker.overlay;

import com.templetracker.constructors.Encounter;
import com.templetracker.constructors.TempleTracker;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import javax.inject.Inject;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LayoutableRenderableEntity;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

public class TempleTrackerOverlayPanel extends OverlayPanel
{
	private final TempleTrackerPlugin plugin;

	@Inject
	private TempleTrackerOverlayPanel(TempleTrackerPlugin plugin)
	{
		super(plugin);
		this.plugin = plugin;

		setPosition(OverlayPosition.TOP_LEFT);
		setLayer(OverlayLayer.ABOVE_WIDGETS);
	}

	private void addSplitPanel(String first, String second)
	{
		LineComponent splitComponent = LineComponent.builder().left(first).right(second).build();
		panelComponent.getChildren().add(splitComponent);
	}

	private void addSpacer(int height)
	{
		LayoutableRenderableEntity spacer = new LayoutableRenderableEntity()
		{
			@Override
			public Rectangle getBounds()
			{
				return new Rectangle(5,height);
			}

			@Override
			public void setPreferredLocation(Point position)
			{

			}

			@Override
			public void setPreferredSize(Dimension dimension)
			{
			}

			@Override
			public Dimension render(Graphics2D graphics)
			{
				return new Dimension(5,height);
			}
		};

		panelComponent.getChildren().add(spacer);

	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		panelComponent.getChildren().clear();

		TempleTracker tracker = plugin.getTracker();

		if (tracker.getRoute() > 0) {
			panelComponent.getChildren().add(TitleComponent.builder().text("Route " + tracker.getRoute()).build());
			addSpacer(3);
		}

		addSplitPanel("Current Points:", Integer.toString(Math.max(tracker.getPoints(), 0)));
		addSpacer(3);

		long endTime = tracker.getEndTime() > 0 ? tracker.getEndTime() : System.currentTimeMillis();
		addSplitPanel("Duration:", millisToMinuteString(endTime - tracker.getStartTime()));

		if (tracker.getLatestEncounter() != null || tracker.getEncounterList().size() > 0) {
			addSpacer(3);
			panelComponent.getChildren().add(LineComponent.builder().left("Encounters:").build());
			addSpacer(1);
			for (Encounter encounter : tracker.getEncounterList()) {
				addSplitPanel((encounter.getName().getName()), millisToMinuteString(encounter.getEndTime() - encounter.getStartTime()));
			}

			if (tracker.getLatestEncounter() != null) {
				endTime = tracker.getLatestEncounter().getEndTime() > 0 ? tracker.getLatestEncounter().getEndTime() : System.currentTimeMillis();
				addSplitPanel(tracker.getLatestEncounter().getName().getName(), millisToMinuteString(endTime - tracker.getLatestEncounter().getStartTime()));
			}
		}

		return super.render(graphics);
	}

	private static String millisToMinuteString(long time)
	{
		long minutes = (time / 1000) / 60;
		long seconds = (time / 1000) % 60;

		return minutes + ":" + (seconds < 10 ? "0" : "") + seconds;
	}

}

package com.templetracker.overlay;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("templetracker")
public interface TempleTrackerConfig extends Config
{
	@ConfigItem(
		keyName = "showOverlay",
		name = "Show Overlay",
		description = "Toggle whether or not to show the overlay during temple trekking or not"
	)
	default boolean showOverlay()
	{
		return true;
	}

	@ConfigItem(
		keyName = "logData",
		name = "Log Data",
		description = "Toggle whether or not to log the data of each temple trek, to a file in the .runelite folder."
	)
	default boolean logData()
	{
		return false;
	}
}

package com.templetracker.overlay;

import com.templetracker.constructors.TempleTracker;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.stream.Collectors;
import javax.inject.Inject;
import net.runelite.api.MenuAction;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LayoutableRenderableEntity;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

public class TreksPerHourOverlayPanel extends OverlayPanel
{

	private ArrayList<TempleTracker> TTList = new ArrayList<>();
	private long meanTime;
	private int meanPoints;

	public static final String TREKS_RESET = "Reset";

	@Inject
	private TreksPerHourOverlayPanel(TempleTrackerPlugin plugin)
	{
		super(plugin);

		setPosition(OverlayPosition.TOP_LEFT);
		setLayer(OverlayLayer.ABOVE_WIDGETS);

		getMenuEntries().add(new OverlayMenuEntry(MenuAction.RUNELITE_OVERLAY, TREKS_RESET,"Treks per hour"));
	}

	private void addSplitPanel(String first, String second)
	{
		LineComponent splitComponent = LineComponent.builder().left(first).right(second).build();
		panelComponent.getChildren().add(splitComponent);
	}

	private void addSpacer(int height)
	{
		LayoutableRenderableEntity spacer = new LayoutableRenderableEntity()
		{
			@Override
			public Rectangle getBounds()
			{
				return new Rectangle(5,height);
			}

			@Override
			public void setPreferredLocation(Point position)
			{

			}

			@Override
			public void setPreferredSize(Dimension dimension)
			{
			}

			@Override
			public Dimension render(Graphics2D graphics)
			{
				return new Dimension(5,height);
			}
		};

		panelComponent.getChildren().add(spacer);

	}

	public void reset() {
		TTList = new ArrayList<>();
		meanTime = 0;
		meanPoints = 0;
	}

	public void addTrek(TempleTracker tracker) {
		TTList.add(tracker);
		ArrayList<TempleTracker> tempTTList = TTList.stream()
			.filter(TT -> (TT.getRoute() == tracker.getRoute() && TT.getEndTime() > 0))
			.collect(Collectors.toCollection(ArrayList::new));

		if (tempTTList.size() > 1)
		{
			long tempAddTimes = 0;
			int tempAddPoints = tempTTList.get(0).getPoints();
			for (int i = 1; i < tempTTList.size(); i++)
			{
				tempAddTimes += (tempTTList.get(i).getEndTime() - tempTTList.get(i - 1).getEndTime());
				tempAddPoints += tempTTList.get(i).getPoints();
			}

			meanTime = tempAddTimes / (tempTTList.size() - 1);
			meanPoints = tempAddPoints / tempTTList.size();
		}
		else if (tempTTList.size() == 1 && TTList.size() >= 2) {
			meanTime = TTList.get(TTList.size() - 1).getEndTime() - TTList.get(TTList.size() - 2).getEndTime();
			meanPoints = TTList.get(TTList.size() - 1).getPoints();
		}
		else {
			meanTime = 0;
		}

	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (meanTime > 0)
		{
			panelComponent.getChildren().clear();

			panelComponent.getChildren().add(TitleComponent.builder().text("Treks/Hour").build());
			addSpacer(3);

			addSplitPanel("Route " + TTList.get(TTList.size() - 1).getRoute() + ":",
				String.format("%.1f",(double)3600000/(double)meanTime));
			addSpacer(2);

			addSplitPanel("Avg Points:", Integer.toString(meanPoints));

		}
		return super.render(graphics);
	}

	private static String millisToMinuteString(long time)
	{
		long minutes = (time / 1000) / 60;
		long seconds = (time / 1000) % 60;

		return minutes + ":" + (seconds < 10 ? "0" : "") + seconds;
	}

}

package com.templetracker;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParser;
import com.google.gson.JsonSyntaxException;
import com.templetracker.constructors.TempleTracker;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import lombok.extern.slf4j.Slf4j;
import static net.runelite.client.RuneLite.RUNELITE_DIR;

@Slf4j
public class FileReadWriter
{
	private String username;
	private String dir_TT;

	private void createFolders()
	{
		File dir = new File(RUNELITE_DIR, "temple-tracker");
		IGNORE_RESULT(dir.mkdir());
		dir = new File(dir, username);
		IGNORE_RESULT(dir.mkdir());
		File newTTFile = new File(dir + "\\temple_trek_data.log");

		try {
			IGNORE_RESULT(newTTFile.createNewFile());
		} catch (IOException e) {
			e.printStackTrace();
		}

		this.dir_TT = dir.getAbsolutePath();
	}

	public void updateUsername(final String username) {
		this.username = username;
		createFolders();
	}

	public void writeToFile(TempleTracker templeTracker) {
		try
		{
			//use json format so serializing and deserializing is easy
			Gson gson = new GsonBuilder().create();

			String fileName = dir_TT + "\\temple_trek_data.log";

			FileWriter fw = new FileWriter(fileName,true); //the true will append the new data

			gson.toJson(templeTracker, fw);

			fw.append("\n");

			fw.close();
		}
		catch(IOException ioe)
		{
			System.err.println("IOException: " + ioe.getMessage() + " in writeToFile");
		}
	}

	public ArrayList<TempleTracker> readFromFile() {
		try
		{
			//use json format so serializing and deserializing is easy
			Gson gson = new GsonBuilder().create();

			String fileName = dir_TT + "\\temple_trek_data.log";

			JsonParser parser = new JsonParser();

			BufferedReader bufferedreader = new BufferedReader(new FileReader(fileName));
			String line;

			ArrayList<TempleTracker> TTList = new ArrayList<>();

			while ((line = bufferedreader.readLine()) != null && line.length() > 0) {
				try {
					TempleTracker parsed = gson.fromJson(parser.parse(line), TempleTracker.class);
					TTList.add(parsed);
				}
				catch (JsonSyntaxException e) {
					System.out.println("Bad line: " + line);
				}

			}

			bufferedreader.close();
			return TTList;

		}
		catch(IOException ioe)
		{
			System.err.println("IOException: " + ioe.getMessage() + " in writeToFile");
			return new ArrayList<>();
		}
	}


	public void IGNORE_RESULT(boolean b) {}
}

