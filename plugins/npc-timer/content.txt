package com.npctimer;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class NpcTimerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(NpcTimerPlugin.class);
		RuneLite.main(args);
	}
}
package com.npctimer;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("Npc Timer")
public interface NpcTimerConfig extends Config
{
	@ConfigItem(
			keyName = "npcTimer",
			name = "Enable NPC Timer",
			description = "Enables the NPC Timer overlay",
			position = 0
	)
	default boolean npcTimer() { return true; }

	@ConfigItem(
			keyName = "showAverageKillTime",
			name = "Show Average Kill Time",
			description = "Displays the average kill time",
			position = 2
	)
	default boolean showAverageKillTime() { return true; }

	@ConfigItem(
			keyName = "showTotalKills",
			name = "Show Total Kills",
			description = "Displays the total number of kills",
			position = 3
	)
	default boolean showTotalKills() { return true; }

	@ConfigItem(
			keyName = "showPersonalBest",
			name = "Show Personal Best",
			description = "Displays the personal best kill time",
			position = 4
	)
	default boolean showPersonalBest() { return true; }

	@ConfigItem(
			keyName = "npcsToTrack",
			name = "NPCs to Track",
			description = "Comma-separated list of NPC names to track (not case-sensitive)"
	)
	default String npcsToTrack() { return ""; }

	@ConfigItem(
			keyName = "npcsToTrack",
			name = "NPCs to Track",
			description = "Comma-separated list of NPC names to track"
	)
	void setNpcsToTrack(String npcsToTrack);
}

package com.npctimer;

import net.runelite.client.ui.PluginPanel;
import javax.swing.*;
import java.awt.*;

public class NpcTimerPanel extends PluginPanel
{
    private final NpcTimerPlugin plugin;
    private final NpcTimerConfig config;

    public NpcTimerPanel(NpcTimerPlugin plugin, NpcTimerConfig config)
    {
        this.plugin = plugin;
        this.config = config;

        setLayout(new BorderLayout());
        rebuild();
    }

    private void rebuild()
    {
        removeAll();

        JPanel npcPanel = new JPanel(new GridLayout(0, 1));
        for (String npcName : config.npcsToTrack().split(","))
        {
            npcName = npcName.trim();
            if (!npcName.isEmpty())
            {
                JButton resetButton = new JButton("Reset " + npcName);
                String finalNpcName = npcName;
                resetButton.addActionListener(e ->
                {
                    int confirm = JOptionPane.showConfirmDialog(this,
                            "Are you sure you want to reset stats for " + finalNpcName + "?",
                            "Confirm Reset",
                            JOptionPane.YES_NO_OPTION);
                    if (confirm == JOptionPane.YES_OPTION)
                    {
                        plugin.resetStatsForNpc(finalNpcName);
                        JOptionPane.showMessageDialog(this, "Stats for " + finalNpcName + " have been reset.");
                    }
                });
                npcPanel.add(resetButton);
            }
        }

        JScrollPane scrollPane = new JScrollPane(npcPanel);
        add(scrollPane, BorderLayout.CENTER);

        revalidate();
        repaint();
    }

    public void update()
    {
        SwingUtilities.invokeLater(this::rebuild);
    }
}

package com.npctimer;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.inject.Provides;
import javax.inject.Inject;
import javax.swing.*;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;

import java.lang.reflect.Type;
import java.util.*;

import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.events.NpcLootReceived;

import com.npctimer.PotentialKill;

import java.time.Duration;
import java.time.Instant;

@Slf4j
@PluginDescriptor(
	name = "NPC Combat Timer"
)
public class NpcTimerPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private NpcTimerConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private NpcTimerOverlay npcTimerOverlay;

	@Inject
	private ConfigManager configManager;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	private Gson gson;

	private NpcTimerPanel panel;
	private NavigationButton navButton;

	@Getter(AccessLevel.PACKAGE)
	private final List<NPC> targets = new ArrayList<>();

	private Map<String, NpcStats> npcStats = new HashMap<>();
	private Queue<PotentialKill> potentialKills = new LinkedList<>();
	private NPC currentTarget;
	private Instant combatStartTime;
	private int currentTargetHealthRatio = -1;
	private Instant lastKillTime;
	private long lastKillDuration;

	@Getter
	private boolean inCombat = false;

	private static final String CONFIG_GROUP = "NpcTimer";
	private static final String STATS_KEY = "npcStats";
	private static final Duration COMBAT_TIMEOUT = Duration.ofSeconds(10);
	private Instant lastCombatTime;

	@Override
	protected void startUp()
	{
		overlayManager.add(npcTimerOverlay);
		loadNpcStats();
		panel = new NpcTimerPanel(this, config);
		navButton = NavigationButton.builder()
				.tooltip("NPC Timer")
				.icon(ImageUtil.loadImageResource(getClass(), "/icon.png"))
				.priority(5)
				.panel(panel)
				.build();
		clientToolbar.addNavigation(navButton);
	}

	@Override
	protected void shutDown()
	{
		saveNpcStats();
		overlayManager.remove(npcTimerOverlay);
		clientToolbar.removeNavigation(navButton);
	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned npcSpawned)
	{
		NPC npc = npcSpawned.getNpc();
		if (isTarget(npc))
		{
			targets.add(npc);
		}
	}

	@Subscribe
	public void onNpcLootReceived(final NpcLootReceived npcLootReceived)
	{
		final NPC npc = npcLootReceived.getNpc();
		final String name = npc.getName();

		if (isTrackedNpc(name))
		{
			long killTime;
			boolean usePotentialKill = false;

			PotentialKill kill = findPotentialKill(npc);
			if (kill != null)
			{
				killTime = Duration.between(kill.startTime, Instant.now()).toMillis();
				usePotentialKill = true;
			}
			else
				killTime = 0;


			// Only update stats if the kill time is reasonable (e.g., more than 3 seconds)
			if (killTime > 3000)
				updateNpcStats(name, killTime, true);
			else
				updateNpcStats(name, 0, false);

			potentialKills.removeIf(pk -> pk.npc.getName().equals(name));
		}
	}

	@Subscribe
	public void onNpcDespawned(NpcDespawned npcDespawned)
	{
		NPC npc = npcDespawned.getNpc();
		targets.remove(npc);
	}


	@Subscribe
	public void onGameTick(GameTick tick)
	{
		if (client.getLocalPlayer() == null)
			return;

		updateCombatState();
	}

	@Subscribe
	public void onHitsplatApplied(HitsplatApplied event)
	{
		Actor target = event.getActor();
		if (target instanceof NPC && targets.contains((NPC) target))
		{
			NPC npc = (NPC) target;
			if (npc.equals(currentTarget))
			{
				currentTargetHealthRatio = npc.getHealthRatio();
				updateCombatTime();
				checkForKill(npc);
			}
		}
		else if (event.getActor() == client.getLocalPlayer() && client.getLocalPlayer().getInteracting() instanceof NPC)
		{
			NPC npc = (NPC) client.getLocalPlayer().getInteracting();
			if (targets.contains(npc) && npc.equals(currentTarget))
			{
				currentTargetHealthRatio = npc.getHealthRatio();
				updateCombatTime();
				checkForKill(npc);
			}
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (event.getGroup().equals("NpcTimer"))
		{
			SwingUtilities.invokeLater(() -> {
				panel.update();
				loadNpcStats();
			});
		}
	}

	private PotentialKill findPotentialKill(NPC npc)
	{
		PotentialKill oldestKill = null;
		for (PotentialKill kill : potentialKills)
		{
			if (kill.npc.getName().equals(npc.getName()))
				if (oldestKill == null || kill.startTime.isBefore(oldestKill.startTime))
					oldestKill = kill;
		}
		return oldestKill;
	}

	private void startCombat(NPC npc)
	{
		String npcName = npc.getName();
		if (npcName == null)
			return;

		Instant startTime = Instant.now();
		potentialKills.offer(new PotentialKill(npc, startTime));

		if (!inCombat || currentTarget == null || !npcName.equals(currentTarget.getName()))
		{
			currentTarget = npc;
			currentTargetHealthRatio = npc.getHealthRatio();
			combatStartTime = startTime;
			inCombat = true;
		}
		lastCombatTime = startTime;
		lastKillDuration = 0;  // Reset the last kill duration
	}

	private void updateCombatTime()
	{
		Instant now = Instant.now();
		if (combatStartTime != null)
			lastKillDuration = Duration.between(combatStartTime, now).toMillis();

		lastKillTime = now;
		lastCombatTime = now;
	}

	private boolean isTrackedNpc(String npcName)
	{
		if (npcName == null)
			return false;

		return Arrays.stream(config.npcsToTrack().split(","))
				.map(String::trim)
				.map(String::toLowerCase)
				.anyMatch(npcName.toLowerCase()::equals);
	}

	private boolean isTarget(NPC npc)
	{
		if (npc.getName() == null)
			return false;

		return isTrackedNpc(npc.getName());
	}

	private void loadNpcStats()
	{
		String json = configManager.getConfiguration(CONFIG_GROUP, STATS_KEY);
		if (json != null && !json.isEmpty())
		{
			Type type = new TypeToken<HashMap<String, NpcStats>>(){}.getType();
			npcStats = gson.fromJson(json, type);
		}
	}

	private void saveNpcStats()
	{
		String json = gson.toJson(npcStats);
		configManager.setConfiguration(CONFIG_GROUP, STATS_KEY, json);
	}

	public String getCurrentNpcName()
	{
		return currentTarget != null ? currentTarget.getName() : null;
	}

	public NpcStats getNpcStats(String npcName)
	{
		return npcStats.get(npcName);
	}

	private long getRandomizedAverageTime(long averageTime)
	{
		// Create a range of +/- 3 seconds (3000 milliseconds)
		long minTime = Math.max(1000, averageTime - 3000); // Ensure it's at least 1 second
		long maxTime = averageTime + 3000;
		return minTime + (long) (Math.random() * (maxTime - minTime));
	}

	private void updateCombatState()
	{
		Player player = client.getLocalPlayer();
		if (player == null)
			return;

		NPC interacting = null;
		if (player.getInteracting() instanceof NPC)
		{
			interacting = (NPC) player.getInteracting();
		}

		if (interacting != null && targets.contains(interacting))
		{
			if (!inCombat || currentTarget == null || !currentTarget.equals(interacting))
			{
				resetCombatState();
				startCombat(interacting);
			}
			else
			{
				updateCombatTime();
				checkForKill(interacting);
			}
		}
		else if (inCombat)
		{
			checkCombatTimeout();
		}
	}

	private void updateNpcStats(String npcName, long killTime, boolean usePotentialKill)
	{
		NpcStats stats = npcStats.computeIfAbsent(npcName, k -> {
			return new NpcStats();
		});

		stats.killCount++;

		if (usePotentialKill && killTime > 3000)  // Only consider kill times over 3 seconds for PB
		{
			stats.totalKillTime += killTime;
			if (killTime < stats.personalBest || stats.personalBest == 0)
				stats.personalBest = killTime;
		}
		else
		{
			long averageTime = stats.killCount > 1 ? stats.totalKillTime / (stats.killCount - 1) : 30000;
			long randomizedTime = getRandomizedAverageTime(averageTime);
			stats.totalKillTime += randomizedTime;
		}
		saveNpcStats();
	}

	private void checkForKill(NPC npc)
	{
		int newHealthRatio = npc.getHealthRatio();
		if (npc.equals(currentTarget) && newHealthRatio < currentTargetHealthRatio)
		{
			currentTargetHealthRatio = newHealthRatio;
		}
	}

	private void checkCombatTimeout()
	{
		if (lastCombatTime == null || Duration.between(lastCombatTime, Instant.now()).compareTo(COMBAT_TIMEOUT) > 0)
		{
			resetCombatState();
		}
	}

	public void resetStatsForNpc(String npcName)
	{
		String normalizedName = npcName.trim().toLowerCase();
		for (Map.Entry<String, NpcStats> entry : new HashMap<>(npcStats).entrySet())
		{
			if (entry.getKey().toLowerCase().equals(normalizedName))
			{
				npcStats.remove(entry.getKey());
			}
		}
		saveNpcStats();
	}

	private void resetCombatState()
	{
		inCombat = false;
		currentTarget = null;
		currentTargetHealthRatio = -1;
		combatStartTime = null;
		potentialKills.clear();
	}

	@Provides
	NpcTimerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(NpcTimerConfig.class);
	}

	static class NpcStats
	{
		Integer killCount;
		Long totalKillTime;
		Long personalBest;

		NpcStats()
		{
			killCount = 0;
			totalKillTime = 0L;
			personalBest = Long.MAX_VALUE;
		}
	}
}

package com.npctimer;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.awt.*;

public class NpcTimerOverlay extends OverlayPanel
{
    private NpcTimerPlugin plugin;
    private NpcTimerConfig config;
    private Client client;

    @Inject
    public NpcTimerOverlay(NpcTimerPlugin plugin, NpcTimerConfig config, Client client)
    {
        super(plugin);
        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
        this.plugin = plugin;
        this.config = config;
        this.client = client;
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (!config.npcTimer())
        {
            return null;
        }

        panelComponent.getChildren().clear();

        String currentNpcName = plugin.getCurrentNpcName();

        if (currentNpcName != null)
        {
            panelComponent.getChildren().add(LineComponent.builder()
                    .left(currentNpcName)
                    .leftColor(Color.YELLOW)
                    .build());

            NpcTimerPlugin.NpcStats stats = plugin.getNpcStats(currentNpcName);
            if (stats != null)
            {
                if (config.showAverageKillTime() && stats.killCount > 0)
                {
                    panelComponent.getChildren().add(LineComponent.builder()
                            .left("Average Time:")
                            .right(formatTime(stats.totalKillTime / stats.killCount))
                            .build());
                }

                if (config.showTotalKills())
                {
                    panelComponent.getChildren().add(LineComponent.builder()
                            .left("Total Kills:")
                            .right(String.valueOf(stats.killCount))
                            .build());
                }

                if (config.showPersonalBest() && stats.personalBest != Long.MAX_VALUE)
                {
                    panelComponent.getChildren().add(LineComponent.builder()
                            .left("Personal Best:")
                            .right(formatTime(stats.personalBest))
                            .build());
                }
            }
        }
        else
        {
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("No NPC selected")
                    .build());
        }

        return super.render(graphics);
    }

    private String formatTime(long milliseconds)
    {
        long seconds = milliseconds / 1000;
        long minutes = seconds / 60;
        seconds = seconds % 60;
        return String.format("%d:%02d", minutes, seconds);
    }

}

package com.npctimer;

import net.runelite.api.NPC;
import java.time.Instant;

public class PotentialKill
{
    NPC npc;
    Instant startTime;

    PotentialKill(NPC npc, Instant startTime)
    {
        this.npc = npc;
        this.startTime = startTime;
    }
}

