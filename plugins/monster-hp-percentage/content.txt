package com.monsterhp;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class MonsterHPPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(MonsterHPPlugin.class);
		RuneLite.main(args);
	}
}
package com.monsterhp;

import java.awt.Color;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

import net.runelite.client.config.*;

@ConfigGroup("MonsterHP")
public interface MonsterHPConfig extends Config {
    enum FontStyle {
        BOLD("Bold"),
        ITALICS("Italics"),
        BOLD_ITALICS("Bold and italics"),
        DEFAULT("Default");

        String name;

        FontStyle(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }
    }

    @Getter
    @RequiredArgsConstructor
    enum Background
    {
        OFF("Off"),
        SHADOW("Shadow"),
        OUTLINE("Outline");

        @Getter
        private final String group;

        @Override
        public String toString()
        {
            return group;
        }
    }

    @ConfigSection(
            name = "hp settings",
            description = "Settings relating to hp",
            position = 1
    )
    String hp_settings = "hp_settings";

    @ConfigSection(
            name = "font settings",
            description = "Settings relating to fonts",
            position = 2
    )
    String font_settings = "font_settings";

    @ConfigItem(
            position = 0,
            keyName = "showOverlay",
            name = "Show HP over chosen NPCs",
            description = "Configures whether or not to have the HP shown over the chosen NPCs"
    )
    default boolean showOverlay() {
        return true;
    }

    @ConfigItem(
            position = 1,
            keyName = "npcToShowHp",
            name = "NPC Names",
            description = "Enter names of NPCs where you wish to use this plugin",
            section = hp_settings
    )
    default String npcToShowHp() {
        return "";
    }

    @ConfigItem(
            position = 2,
            keyName = "npcIdToShowHp",
            name = "NPC Ids",
            description = "Enter Id of NPCs where you wish to use this plugin (optional)",
            section = hp_settings
    )
    default String npcIdToShowHp() {
        return "";
    }

    @ConfigItem(
            position = 3,
            keyName = "npcShowAll",
            name = "Show All",
            description = "Show for all NPCs",
            section = hp_settings
    )
    default boolean npcShowAll() {
        return false;
    }

    @ConfigItem(
            position = 4,
            keyName = "npcHideFull",
            name = "Hide hp when full",
            description = "Hides the hp when the npc has not been damaged. Works nicely with the Show All option",
            section = hp_settings
    )
    default boolean npcHideFull() {
        return false;
    }

    @Alpha
    @Range(
            max = 300
    )
    @ConfigItem(
            position = 5,
            keyName = "normalHPColor",
            name = "Default hp overlay color",
            description = "Choose the color to be used on the hp",
            section = hp_settings
    )
    default Color normalHPColor() {
        return Color.GREEN;
    }

    @ConfigItem(
            position = 6,
            keyName = "useLowHP",
            name = "Use low HP threshold",
            description = "Configures whether or not you wish to use a 2nd color when the monster hp hits below the low hp threshold",
            section = hp_settings
    )
    default boolean useLowHP() {
        return true;
    }

    @ConfigItem(
            position = 7,
            keyName = "lowHPThreshold",
            name = "Low HP threshold",
            description = "Used to set the low HP threshold",
            section = hp_settings
    )
    default int lowHPThreshold() {
        return 25;
    }
    @Alpha
    @ConfigItem(
            position = 8,
            keyName = "lowHPColor",
            name = "Overlay color Low HP",
            description = "Choose the color to be used when the hp of the npc is below the chosen hp threshold",
            section = hp_settings
    )
    default Color lowHPColor() {
        return Color.RED;
    }

    @ConfigItem(
            position = 9,
            keyName = "aboveHPBar",
            name = "Above HP bar",
            description = "Hp above the monsters hp bar, otherwise the Hp is show on the body of the NPC",
            section = hp_settings
    )
    default boolean aboveHPBar() {
        return true;
    }

    @ConfigItem(
            position = 10,
            keyName = "HPHeight",
            name = "Height of the HP",
            description = "Change the vertical offset of the HP above the npc body or the HP bar",
            section = hp_settings
    )
    default int HPHeight() {
        return 50;
    }

    @ConfigItem(
            position = 11,
            keyName = "hideDeath",
            name = "Hide hp on death",
            description = "Hides the hp when the npc dies. Works nicely with the entity hider: Hide Dead NPCs option",
            section = hp_settings
    )
    default boolean hideDeath() {
        return false;
    }

    @ConfigItem(
            position = 12,
            keyName = "stackHp",
            name = "Stack monster HP",
            description = "Stacks the HP numbers on top of each other if multiple npc's are on the same tile",
            section = hp_settings
    )
    default boolean stackHp() {
        return false;
    }

    @Range(
            min = 0,
            max = 2
    )
    @ConfigItem(
            position = 13,
            keyName = "decimalHp",
            name = "Amount of decimals",
            description = "Show 0-2 decimals of precision, e.g. 13.33 instead of 13.",
            section = hp_settings
    )
    default int decimalHp() {
        return 0;
    }

    @ConfigItem(
            position = 14,
            keyName = "customFont",
            name = "Enable custom fonts",
            description = "Enabling this setting makes it possible to use the custom font from the box below this",
            section = font_settings
    )
    default boolean customFont() {
        return true;
    }

    @ConfigItem(
            position = 15,
            keyName = "fontName",
            name = "Font",
            description = "Name of the font to use for the hp shown. Leave blank to use RuneLite setting.",
            section = font_settings
    )
    default String fontName() {
        return "roboto";
    }

    @ConfigItem(
            position = 16,
            keyName = "fontStyle",
            name = "Style",
            description = "Style of the font to use for the hp shown. Only works with custom font.",
            section = font_settings
    )
    default FontStyle fontStyle() {
        return FontStyle.DEFAULT;
    }

    @ConfigItem(
            position = 17,
            keyName = "fontSize",
            name = "Size",
            description = "Size of the font to use for hp text. Only works with custom font.",
            section = font_settings
    )
    default int fontSize() {
        return 15;
    }

    @ConfigItem(
            position = 18,
            keyName = "numericHealth",
            name = "Numeric Health",
            description = "Show the numeric health of the monster instead of percentage. (Not all npcs supports this)",
            section = hp_settings
    )
    default boolean numericHealth() {
        return false;
    }

    @ConfigItem(
            position = 19,
            name = "Background",
            keyName = "fontBackground",
            description = "Background of the HP text",
            section = font_settings
    )
    default Background fontBackground()
    {
        return Background.SHADOW;
    }

    @Range(
            min = 1,
            max = 100
    )
    @ConfigItem(
            position = 20,
            keyName = "fontShadowSize",
            name = "Shadow size",
            description = "Offset of the shadow drawn, requires font backgrounds.",
            section = font_settings
    )
    default int fontShadowSize() {
        return 1;
    }

    @Range(
            min = 1,
            max = 100
    )
    @ConfigItem(
            position = 21,
            keyName = "fontOutlineSize",
            name = "Outline size",
            description = "Size of the outline drawn, requires font backgrounds.",
            section = font_settings
    )
    default int fontOutlineSize() {
        return 4;
    }
    @Alpha
    @ConfigItem(
            position = 22,
            keyName = "fontOutlineColor",
            name = "Outline color",
            description = "Choose the color for the text outline",
            section = font_settings
    )
    default Color fontOutlineColor() {
        return Color.BLACK;
    }

    @ConfigItem(
            position = 23,
            keyName = "gradientHP",
            name = "Gradient HP",
            description = "HP will be gradient from color preset A to B depending on the percentage. (Overwrites low HP threshold setting)",
            section = hp_settings
    )
    default boolean useGradientHP() {
        return true;
    }

    @Alpha
    @ConfigItem(
            position = 24,
            keyName = "gradientHPColorA",
            name = "Gradient color A",
            description = "Choose the color for gradient A",
            section = hp_settings
    )
    default Color gradientHPColorA() {
        return Color.GREEN;
    }

    @Alpha
    @ConfigItem(
            position = 25,
            keyName = "gradientHPColorB",
            name = "Gradient color B",
            description = "Choose the color for gradient B",
            section = hp_settings
    )
    default Color gradientHPColorB() {
        return Color.RED;
    }
}
package com.monsterhp;

import lombok.Getter;
import lombok.Setter;
import net.runelite.api.NPC;
import net.runelite.api.coords.WorldPoint;

public class WanderingNPC {
    @Getter
    private final int npcIndex;

    @Getter
    private final String npcName;

    @Getter
    private final int id;
    @Getter
    @Setter
    private NPC npc;

    @Getter
    @Setter
    private WorldPoint currentLocation;

    @Getter
    @Setter
    private double currentHp;

    @Getter
    @Setter
    private double healthRatio;

    @Getter
    @Setter
    private double healthScale;

    @Getter
    @Setter
    private boolean isDead;

    @Getter
    @Setter
    private int offset;

    @Getter
    @Setter
    private int isTypeNumeric;

    WanderingNPC(NPC npc) {
        this.npc = npc;
        this.id = npc.getId();
        this.npcName = npc.getName();
        this.npcIndex = npc.getIndex();
        this.currentLocation = npc.getWorldLocation();
        this.currentHp = 100;
        this.healthRatio = 100;
        this.healthScale = npc.getHealthScale();
        this.isDead = false;
        this.offset = 0;
        this.isTypeNumeric = 0;
    }
}
package com.monsterhp;

import java.awt.*;
import java.awt.font.TextLayout;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import javax.inject.Inject;
import java.util.ArrayList;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.NPC;
import net.runelite.api.NpcID;
import net.runelite.api.Point;
import net.runelite.client.game.NPCManager;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

@Slf4j
public class MonsterHPOverlay extends Overlay {
    private final MonsterHPPlugin plugin;
    private final MonsterHPConfig config;

    private NPCManager npcManager;
    protected String lastFont = "";
    protected int lastFontSize = 0;
    protected boolean useRunescapeFont = true;
    protected MonsterHPConfig.FontStyle lastFontStyle = MonsterHPConfig.FontStyle.DEFAULT;
    protected Font font = null;

    NumberFormat format = new DecimalFormat("#");
    NumberFormat oneDecimalFormat = new DecimalFormat("#.#");
    NumberFormat twoDecimalFormat = new DecimalFormat("#.##");

    @Inject
    MonsterHPOverlay(MonsterHPPlugin plugin, MonsterHPConfig config, NPCManager npcManager) {
        setPriority(0.75f);
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        this.plugin = plugin;
        this.config = config;
        this.npcManager = npcManager;
    }

    protected void handleFont(Graphics2D graphics) {
        if (font != null) {
            graphics.setFont(font);
            if (useRunescapeFont) {
                graphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);
            }
        }
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        updateFont();
        handleFont(graphics);
        if (config.showOverlay()) {
            ArrayList<NPC> stackedNpcs = new ArrayList<>();
            plugin.getWanderingNPCs().forEach((id, npc) -> renderTimer(npc, graphics, stackedNpcs));
        }
        return null;
    }

    private String getCurrentHpString(WanderingNPC npc) {
        String currentHPString;
        if (config.numericHealth() || npc.getIsTypeNumeric() == 1) {
            currentHPString = String.valueOf((int) npc.getCurrentHp());
        } else {
            switch (config.decimalHp()) {
                case 1:
                    currentHPString = String.valueOf(oneDecimalFormat.format(npc.getHealthRatio()));
                    break;
                case 2:
                    currentHPString = String.valueOf(twoDecimalFormat.format(npc.getHealthRatio()));
                    break;
                default:
                    currentHPString = String.valueOf(format.format(npc.getHealthRatio()));
                    break;
            }
        }
        return currentHPString;
    }


    private void renderTimer(final WanderingNPC npc, final Graphics2D graphics, ArrayList<NPC> stackedNpcs) {
        if (npc == null || npc.isDead()) {
            return;
        }

        // Skip npc with full hp if enabled
        if (config.npcHideFull() && npc.getHealthRatio() == 100) return;

        // Get max health through NPC manager, returns null if not found
        Integer maxHealth = npcManager.getHealth(npc.getId());

        // Some npcs return null when using npcManager as they seem to not be added with all details to static.runelite.net?
        // i assume because health mimic mechanics like Duke Sucellus poison wakeup that has a 200 fake health before fight id
        // https://github.com/runelite/static.runelite.net/blob/gh-pages/npcs/npcs.json
        if (npc.getNpcName().equals("Duke Sucellus")) {
            if (npc.getId() == NpcID.DUKE_SUCELLUS_12191) { // Duke Sucellus - fight id
                maxHealth = 440; // we assume its health is 440
            }
            if (npc.getId() == NpcID.DUKE_SUCELLUS_12167) { // Duke Sucellus - pre fight id
                maxHealth = 200; // we assume its 'poison' health is 200
            }
        }

        // Use Numeric health
        if (config.numericHealth() || npc.getIsTypeNumeric() == 1) {
            if (maxHealth != null) {
                // Use the current health ratio and round it according to monsters max hp
                double numericHealth = (int) Math.floor((npc.getHealthRatio() / 100) * maxHealth);
                npc.setCurrentHp(numericHealth);
            }
        }

        // Coloring
        Color timerColor = config.normalHPColor();
        boolean isHealthBelowThreshold = npc.getHealthRatio() < config.lowHPThreshold();
        if (config.useLowHP() && isHealthBelowThreshold) {
            timerColor = config.lowHPColor();
        }

        if (config.useGradientHP()) {
            if (maxHealth != null) {
                int curNumericHealth = (int) Math.floor((npc.getHealthRatio() / 100) * maxHealth);
                timerColor = getGradientHpColor(curNumericHealth, maxHealth);
            } else { // Try percentage based gradient hp - happens if npcManager can't get numeric health.
                int curNumericHealth = (int) Math.floor(npc.getHealthRatio());
                timerColor = getGradientHpColor(curNumericHealth, 100);
            }
        }

        String currentHPString = getCurrentHpString(npc);

        if (config.stackHp()) {
            /*
            * Stack method created by github.com/MoreBuchus in his tzhaar-hp-tracker plugin
            * i Xines just modified this method to work with Monster HP plugin.
            * So credits goes to Buchus for the method.
            */

            int offset = 0;
            NPC firstStack = null;
            for (NPC sNpc : stackedNpcs)
            {
                if (sNpc.getWorldLocation().getX() == npc.getNpc().getWorldLocation().getX() && sNpc.getWorldLocation().getY() == npc.getNpc().getWorldLocation().getY())
                {
                    if (firstStack == null)
                    {
                        firstStack = npc.getNpc();
                    }
                    offset += graphics.getFontMetrics().getHeight();
                }
            }

            int zOffset = config.HPHeight();
            if (config.aboveHPBar()) {
                zOffset += npc.getNpc().getLogicalHeight();
            }

            stackedNpcs.add(npc.getNpc());

            Point textLocation = offset > 0 ? firstStack.getCanvasTextLocation(graphics, currentHPString, zOffset) : npc.getNpc().getCanvasTextLocation(graphics, currentHPString, zOffset);
            if (textLocation != null) {
                Point stackOffset = new Point(textLocation.getX(), textLocation.getY() - offset);
                handleText(graphics, stackOffset, currentHPString, timerColor);
            }
        } else {
            Point canvasPoint;
            if (config.aboveHPBar()) {
                canvasPoint = npc.getNpc().getCanvasTextLocation(graphics, currentHPString, npc.getNpc().getLogicalHeight() + config.HPHeight());
            } else {
                canvasPoint = npc.getNpc().getCanvasTextLocation(graphics, currentHPString, config.HPHeight());
            }

            if (canvasPoint != null) {
                handleText(graphics, canvasPoint, currentHPString, timerColor);
            }
        }
    }

    private void updateFont() {
        //only perform anything within this function if any settings related to the font have changed
        if (!lastFont.equals(config.fontName()) || lastFontSize != config.fontSize() || lastFontStyle != config.fontStyle()) {
            if (config.customFont()) {
                lastFont = config.fontName();
            }
            lastFontSize = config.fontSize();
            lastFontStyle = config.fontStyle();

            //use runescape font as default
            if (config.fontName().equals("") || !config.customFont()) {
                if (config.fontSize() < 16) {
                    font = FontManager.getRunescapeSmallFont();
                } else if (config.fontStyle() == MonsterHPConfig.FontStyle.BOLD || config.fontStyle() == MonsterHPConfig.FontStyle.BOLD_ITALICS) {
                    font = FontManager.getRunescapeBoldFont();
                } else {
                    font = FontManager.getRunescapeFont();
                }

                if (config.fontSize() > 16) {
                    font = font.deriveFont((float) config.fontSize());
                }

                if (config.fontStyle() == MonsterHPConfig.FontStyle.BOLD) {
                    font = font.deriveFont(Font.BOLD);
                }
                if (config.fontStyle() == MonsterHPConfig.FontStyle.ITALICS) {
                    font = font.deriveFont(Font.ITALIC);
                }
                if (config.fontStyle() == MonsterHPConfig.FontStyle.BOLD_ITALICS) {
                    font = font.deriveFont(Font.ITALIC | Font.BOLD);
                }

                useRunescapeFont = true;
                return;
            }

            int style = Font.PLAIN;
            switch (config.fontStyle()) {
                case BOLD:
                    style = Font.BOLD;
                    break;
                case ITALICS:
                    style = Font.ITALIC;
                    break;
                case BOLD_ITALICS:
                    style = Font.BOLD | Font.ITALIC;
                    break;
            }

            font = new Font(config.fontName(), style, config.fontSize());
            useRunescapeFont = false;
        }
    }

    private void handleText(Graphics2D graphics, Point textLoc, String text, Color color)
    {
        switch (config.fontBackground())
        {
            case OUTLINE:
            {
                // Create a new Graphics2D instance to avoid modifying the original one
                Graphics2D g2d = (Graphics2D) graphics.create();

                // Enable antialiasing for smoother text (just to be sure)
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

                // Translate the graphics
                g2d.translate(textLoc.getX(), textLoc.getY());

                // Set outline color
                g2d.setColor(config.fontOutlineColor());

                // Text layout
                TextLayout tl = new TextLayout(text, graphics.getFont(), g2d.getFontRenderContext());

                // Get the outline shape
                Shape shape = tl.getOutline(null);

                // Set outline thickness and try to prevent artifacts on sharp angles
                g2d.setStroke(new BasicStroke((float) config.fontOutlineSize(), BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));

                // Draw the outline
                g2d.draw(shape);

                // Set fill color
                g2d.setColor(color);

                // Fill the shape
                g2d.fill(shape);

                // Dispose of the temporary Graphics2D instance
                g2d.dispose();

                break;
            }
            case SHADOW:
            {
                int offsetShadow = config.fontShadowSize();

                graphics.setColor(new Color(0,0,0, color.getAlpha()));
                graphics.drawString(text, textLoc.getX() + offsetShadow, textLoc.getY() + offsetShadow);
                graphics.setColor(color);
                graphics.drawString(text, textLoc.getX(), textLoc.getY());
                break;
            }
            case OFF:
                // Mini shadow
                graphics.setColor(new Color(0,0,0, color.getAlpha()));
                graphics.drawString(text, textLoc.getX() + 1, textLoc.getY() + 1);

                // Draw string (renderTextLocation does not support alpha coloring or is broken...)
                graphics.setColor(color);
                graphics.drawString(text, textLoc.getX(), textLoc.getY());
                break;
            default:
                break;
        }
    }

    private Color getGradientHpColor(int currentHealth, int maxHealth) {
        // Ensure currentHealth is between 0 and maxHealth
        currentHealth = Math.min(maxHealth, Math.max(0, currentHealth));

        // Calculate the health percentage
        double healthPercentage = (double) currentHealth / maxHealth;

        // Get config RGB values
        Color colorA = config.gradientHPColorA();
        Color colorB = config.gradientHPColorB();

        // Calculate the gradient depending on percentage and RGB values
        int red = (int) (colorB.getRed() + (colorA.getRed() - colorB.getRed()) * healthPercentage);
        int green = (int) (colorB.getGreen() + (colorA.getGreen() - colorB.getGreen()) * healthPercentage);
        int blue = (int) (colorB.getBlue() + (colorA.getBlue() - colorB.getBlue()) * healthPercentage);

        return new Color(red, green, blue);
    }
}
package com.monsterhp;

import com.google.common.annotations.VisibleForTesting;
import com.google.inject.Provides;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.inject.Inject;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;
import net.runelite.client.util.WildcardMatcher;

@Slf4j
@PluginDescriptor(
        name = "Monster HP Percentage"
)
public class MonsterHPPlugin extends Plugin {
    @Inject
    private Client client;

    @Inject
    private MonsterHPConfig config;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private MonsterHPOverlay monsterhpoverlay;

    @Getter(AccessLevel.PACKAGE)
    private final Map<Integer, WanderingNPC> wanderingNPCs = new HashMap<>();

    private List<String> selectedNpcs = new ArrayList<>();

    private List<String> selectedNpcsWithTypes = new ArrayList<>();

    private List<String> selectedNpcIDs = new ArrayList<>();

    private boolean npcShowAll = true;

    private HashMap<Integer, WorldPoint> npcLocations = new HashMap<>();

    @Provides
    MonsterHPConfig getConfig(ConfigManager configManager) {
        return configManager.getConfig(MonsterHPConfig.class);
    }

    @Override
    protected void startUp() throws Exception {
        overlayManager.add(monsterhpoverlay);
        selectedNpcs = getSelectedNpcNames(false);
        selectedNpcsWithTypes = getSelectedNpcNames(true);
        selectedNpcIDs = getSelectedNpcIds();
        this.npcShowAll = config.npcShowAll();
        rebuildAllNpcs();
    }

    @Override
    protected void shutDown() throws Exception {
        overlayManager.remove(monsterhpoverlay);
        wanderingNPCs.clear();
        npcLocations.clear();
    }

    @Subscribe
    public void onNpcSpawned(NpcSpawned npcSpawned) {
        final NPC npc = npcSpawned.getNpc();
        if (!isNpcInList(npc)) return;

        WanderingNPC wnpc = new WanderingNPC(npc);

        if (isNpcNumericDefined(npc))
            wnpc.setIsTypeNumeric(1);

        wanderingNPCs.put(npc.getIndex(), wnpc);
        npcLocations.put(npc.getIndex(), npc.getWorldLocation());
    }

    @Subscribe
    public void onNpcDespawned(NpcDespawned npcDespawned) {
        final NPC npc = npcDespawned.getNpc();

        if (npc == null || !isNpcInList(npc)) return;

        wanderingNPCs.remove(npc.getIndex());
        npcLocations.remove(npc.getIndex());
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged gameStateChanged) {
        if (gameStateChanged.getGameState() == GameState.LOGIN_SCREEN ||
                gameStateChanged.getGameState() == GameState.HOPPING) {
            wanderingNPCs.clear();
            npcLocations.clear();
        }
    }

    // onNpcChanged is mostly required for id listing to work when npc is changing id but name remain the same
    // Example: npcs like phantom muspah have multiple ids(transitions) but same static name
    // so this applies and removes the text accordingly on npc id change if in list
    @Subscribe
    public void onNpcChanged(NpcChanged e) {
        final NPC npc = e.getNpc();

        // Duke Sucellus have no onNpcDespawned when dying but fires sometimes on instance leaving if npc is not dead but in 12167 state... (jagex?)
        // So we have to do this special little step
        if (npc.getId() == NpcID.DUKE_SUCELLUS_12192 || npc.getId() == NpcID.DUKE_SUCELLUS_12196) // Duke "dead" ids
        {
            wanderingNPCs.remove(npc.getIndex());
            npcLocations.remove(npc.getIndex());
        }

        // Actual method
        if (isNpcInList(npc)) {
            WanderingNPC wnpc = new WanderingNPC(npc);

            if (isNpcNumericDefined(npc))
                wnpc.setIsTypeNumeric(1);

            wanderingNPCs.put(npc.getIndex(), wnpc);
            npcLocations.put(npc.getIndex(), npc.getWorldLocation());
        } else {
            wanderingNPCs.remove(npc.getIndex());
            npcLocations.remove(npc.getIndex());
        }
    }

    @Subscribe
    public void onGameTick(GameTick event) {
        if (!config.showOverlay()) {
            return;
        }

        HashMap<WorldPoint, Integer> locationCount = new HashMap<>();
        for (WorldPoint location : npcLocations.values()) {
            locationCount.put(location, locationCount.getOrDefault(location, 0) + 1);
        }

        for (NPC npc : client.getNpcs()) {
            if (!isNpcInList(npc)) {
                continue;
            }

            final WanderingNPC wnpc = wanderingNPCs.get(npc.getIndex());

            if (wnpc != null) {
                updateWnpcProperties(npc, wnpc, locationCount);
            }
        }
    }

    private void updateWnpcProperties(NPC npc, WanderingNPC wnpc, Map<WorldPoint, Integer> locationCount) {
        double monsterHp = ((double) npc.getHealthRatio() / (double) npc.getHealthScale() * 100);

        if (!npc.isDead() && npc.getHealthRatio() / npc.getHealthScale() != 1) {
            wnpc.setHealthRatio(monsterHp);
            wnpc.setCurrentLocation(npc.getWorldLocation());
            wnpc.setDead(false);

            WorldPoint currentLocation = wnpc.getCurrentLocation();

            if (locationCount.containsKey(currentLocation)) {
                wnpc.setOffset(locationCount.get(currentLocation) - 1);
                locationCount.put(currentLocation, locationCount.get(currentLocation) - 1);
            }
        } else if (npc.isDead()) {
            wnpc.setHealthRatio(0);
            if (config.hideDeath()) {
                wnpc.setDead(true);
            }
        }

        npcLocations.put(wnpc.getNpcIndex(), wnpc.getCurrentLocation());
    }

    private boolean isNpcNameInList(String npcName) {
        // Check for exact match or wildcard match
        return npcName != null && (selectedNpcs.contains(npcName.toLowerCase()) ||
                selectedNpcs.stream().anyMatch(pattern -> WildcardMatcher.matches(pattern, npcName)));
    }

    private boolean isNpcIdInList(int npcId) {
        String npcIdString = String.valueOf(npcId);
        return selectedNpcIDs.contains(npcIdString);
    }

    private boolean isNpcInList(NPC npc) {
        if (isNpcIdBlacklisted(npc)) return false;

        boolean isInList = (isNpcNameInList(npc.getName()) || isNpcIdInList(npc.getId()));

        if (!isInList) {
            return this.npcShowAll;
        }

        return true;
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged configChanged) {
        if (Objects.equals(configChanged.getGroup(), "MonsterHP") && (Objects.equals(configChanged.getKey(), "npcShowAll") || Objects.equals(configChanged.getKey(), "npcToShowHp") || Objects.equals(configChanged.getKey(), "npcIdToShowHp"))) {
            selectedNpcs = getSelectedNpcNames(false);
            selectedNpcsWithTypes = getSelectedNpcNames(true);
            selectedNpcIDs = getSelectedNpcIds();

            this.npcShowAll = config.npcShowAll();
            rebuildAllNpcs();
        }
    }

    @VisibleForTesting
    List<String> getSelectedNpcNames(boolean includeDisplaytype) {
        String configNPCs = config.npcToShowHp().toLowerCase();
        if (configNPCs.isEmpty()) {
            return Collections.emptyList();
        }

        // "Raw" contains the comma-separated RAW text, so it has ":n" in their names
        List<String> selectedNpcNamesRaw = Text.fromCSV(configNPCs);

        // If false, remove all display types from the string to create a list of only the NPC names
        if (!includeDisplaytype) {
            List<String> strippedNpcNames = new ArrayList<>(selectedNpcNamesRaw);

            // Strips the ":n" suffix from each name if present
            strippedNpcNames.replaceAll(npcName -> npcName != null && npcName.contains(":") ? npcName.split(":")[0] : npcName);

            return strippedNpcNames;
        }

        return selectedNpcNamesRaw;
    }

    @VisibleForTesting
    List<String> getSelectedNpcIds() {
        String configNPCIDs = config.npcIdToShowHp().toLowerCase();
        if (configNPCIDs.isEmpty()) {
            return Collections.emptyList();
        }

        return Text.fromCSV(configNPCIDs);
    }

    @VisibleForTesting
    boolean isNpcNumericDefined(NPC npc) {
        String npcNameTargetLowerCase = Objects.requireNonNull(npc.getName()).toLowerCase();

        // Iterate over each entry in selectedNpcsWithTypes and use WildcardMatcher for matching
        for (String npcNameRaw : selectedNpcsWithTypes) {
            String npcName = npcNameRaw.contains(":") ? npcNameRaw.split(":")[0] : npcNameRaw;
            boolean isMatch = WildcardMatcher.matches(npcName, npcNameTargetLowerCase);

            if (npcNameRaw.contains(":n") && isMatch) {
                return true;
            }
        }
        return false;
    }

    private void rebuildAllNpcs() {
        wanderingNPCs.clear();

        if (client.getGameState() != GameState.LOGGED_IN &&
                client.getGameState() != GameState.LOADING) {
            // NPCs are still in the client after logging out, ignore them
            return;
        }

        for (NPC npc : client.getNpcs()) {
            if (isNpcInList(npc)) {
                WanderingNPC wnpc = new WanderingNPC(npc);

                if (isNpcNumericDefined(npc))
                    wnpc.setIsTypeNumeric(1);

                wanderingNPCs.put(npc.getIndex(), wnpc);
                npcLocations.put(npc.getIndex(), npc.getWorldLocation());
            }
        }
    }

    public boolean isNpcIdBlacklisted(NPC npc) {
        String npcName = npc.getName();
        if (npcName != null && npcName.equals("Duke Sucellus")) { // duke sucellus - allow only fight id to be tracked from duke
            int id = npc.getId();
            return id != NpcID.DUKE_SUCELLUS_12191 && id != NpcID.DUKE_SUCELLUS_12167;
        }

        return false;
    }
}
