package com.blackjack;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class BlackjackPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(BlackjackPlugin.class);
		RuneLite.main(args);
	}
}
package com.blackjack;

public enum BlackjackNPCs {
    BANDIT,
    MENAPHITE_THUG
}

package com.blackjack;

import com.google.inject.Provides;
import lombok.AccessLevel;
import lombok.Getter;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.NPC;
import net.runelite.api.events.*;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.WildcardMatcher;
import javax.inject.Inject;
import java.awt.Color;
import java.util.HashSet;
import java.util.Set;

@PluginDescriptor(
		name = "Blackjack",
		description = "Help show whether a blackjack target is knocked out or not",
		tags = {"blackjack", "thieve", "thieving"}
)
public class BlackjackPlugin extends Plugin {
	private static final String SUCCESS_BLACKJACK = "You smack the bandit over the head and render them unconscious.";

	@Inject
	private BlackjackConfig blackjackConfig;

	@Inject
	private BlackjackOverlay blackjackOverlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ClientThread clientThread;

	@Inject
	private Client client;

	/**
	 * NPCs to highlight
	 */
	@Getter(AccessLevel.PACKAGE)
	private final Set<NPC> highlightedNpcs = new HashSet<>();

	/**
	 * Stores state of if NPC is knocked out or not.
	 */
	@Getter(AccessLevel.PACKAGE)
	private boolean knockedOut = false;

	private String highlight = "";
	private long nextKnockOutTick = 0;

	@Provides
	BlackjackConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(BlackjackConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(blackjackOverlay);
		highlight = npcToHighlight();
		clientThread.invoke(() ->
		{
			rebuildAllNpcs();
		});
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(blackjackOverlay);
		highlightedNpcs.clear();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		if (event.getGameState() == GameState.LOGIN_SCREEN ||
				event.getGameState() == GameState.HOPPING)
		{
			highlightedNpcs.clear();
		}
	}

	@Subscribe
	private void onConfigChanged(ConfigChanged event) {

		if (!event.getGroup().equals("blackjack")) {
			return;
		}

		highlight = npcToHighlight();
		rebuildAllNpcs();
	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned npcSpawned)
	{
		final NPC npc = npcSpawned.getNpc();
		final String npcName = npc.getName();

		if (npcName == null)
		{
			return;
		}

		if (WildcardMatcher.matches(highlight, npcName))
		{
			highlightedNpcs.add(npc);
		}
	}

	@Subscribe
	public void onNpcDespawned(NpcDespawned npcDespawned)
	{
		final NPC npc = npcDespawned.getNpc();

		highlightedNpcs.remove(npc);
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		if (client.getTickCount() >= nextKnockOutTick)
		{
			knockedOut = false;
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		final String msg = event.getMessage();

		if (event.getType() == ChatMessageType.SPAM && msg.equals(SUCCESS_BLACKJACK))
		{
			knockedOut = true;
			nextKnockOutTick = client.getTickCount() + 4;
		}
	}

	public Color getHighlightColor() {
		return knockedOut ? blackjackConfig.knockedOutStateColor() : blackjackConfig.awakeStateColor();
	}

	private String npcToHighlight()
	{
		switch (blackjackConfig.npcToBlackjack()) {
			case BANDIT:
				return "Bandit";
			case MENAPHITE_THUG:
				return "Menaphite Thug";
			default:
				throw new IllegalStateException("Unexpected value: " + blackjackConfig.npcToBlackjack());
		}
	}

	private void rebuildAllNpcs()
	{
		highlightedNpcs.clear();

		if (client.getGameState() != GameState.LOGGED_IN &&
				client.getGameState() != GameState.LOADING)
		{
			// NPCs are still in the client after logging out,
			// but we don't want to highlight those.
			return;
		}

		outer:
		for (NPC npc : client.getNpcs())
		{
			final String npcName = npc.getName();

			if (npcName == null)
			{
				continue;
			}

			if (WildcardMatcher.matches(highlight, npcName))
			{
				highlightedNpcs.add(npc);
				continue outer;
			}
		}
	}

	public String statusText() {
		return isKnockedOut() ? "Knocked-out" : "Awake";
	}
}

package com.blackjack;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.Color;

@ConfigGroup("blackjack")
public interface BlackjackConfig extends Config {
	@ConfigItem(
			keyName = "renderStyle",
			name = "Highlight Style",
			description = "Highlight setting",
			position = 1
	)
	default BlackjackRenderStyle renderStyle()
	{
		return BlackjackRenderStyle.HULL;
	}

	@ConfigItem(
			keyName = "npcToBlackjack",
			name = "NPC to Blackjack",
			description = "Select the NPC you will be Blackjacking",
			position = 2
	)
	default BlackjackNPCs npcToBlackjack()
	{
		return BlackjackNPCs.BANDIT;
	}

	@ConfigItem(
			keyName = "awakeStateColor",
			name = "Awake State Color",
			description = "Change the color of the awake state highlight",
			position = 3
	)
	default Color awakeStateColor() {return Color.ORANGE;}

	@ConfigItem(
			keyName = "knockedOutStateColor",
			name = "Knocked-Out State Color",
			description = "Change the color of the knocked-out state highlight",
			position = 4
	)
	default Color knockedOutStateColor() {return Color.GREEN;}

	@ConfigItem(
			keyName = "statusText",
			name = "Draw status text above NPCs",
			description = "Configures whether or not to write if the target NPC is awake or knocked out",
			position = 5
	)
	default boolean statusText()
	{
		return false;
	}
}
package com.blackjack;

import net.runelite.api.Point;
import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.util.Text;

import javax.inject.Inject;
import java.awt.*;

public class BlackjackOverlay extends Overlay {
    private final Client client;
    private final BlackjackConfig config;
    private final BlackjackPlugin plugin;

    @Inject
    BlackjackOverlay(Client client, BlackjackConfig config, BlackjackPlugin plugin) {
        this.client = client;
        this.config = config;
        this.plugin = plugin;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        for (NPC npc : plugin.getHighlightedNpcs())
        {
            renderNpcOverlay(graphics, npc, plugin.getHighlightColor());
        }
        return null;
    }

    private void renderNpcOverlay(Graphics2D graphics, NPC actor, Color color)
    {
        NPCComposition npcComposition = actor.getTransformedComposition();
        if (npcComposition == null || !npcComposition.isInteractible())
        {
            return;
        }

        switch (config.renderStyle())
        {
            case TILE:
                int size = npcComposition.getSize();
                LocalPoint lp = actor.getLocalLocation();
                Polygon tilePoly = Perspective.getCanvasTileAreaPoly(client, lp, size);

                renderPoly(graphics, color, tilePoly);
                break;

            case HULL:
                Shape objectClickbox = actor.getConvexHull();

                renderPoly(graphics, color, objectClickbox);
                break;
        }

        if (config.statusText() && actor.getName() != null)
        {
            String npcName = Text.removeTags(actor.getName());
            Point textLocation = actor.getCanvasTextLocation(graphics, npcName, actor.getLogicalHeight() + 40);

            if (textLocation != null)
            {
                OverlayUtil.renderTextLocation(graphics, textLocation, plugin.statusText(), color);
            }
        }
    }

    private void renderPoly(Graphics2D graphics, Color color, Shape polygon)
    {
        if (polygon != null)
        {
            graphics.setColor(color);
            graphics.setStroke(new BasicStroke(2));
            graphics.draw(polygon);
            graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), 20));
            graphics.fill(polygon);
        }
    }
}

package com.blackjack;

public enum BlackjackRenderStyle
{
    OFF,
    TILE,
    HULL
}

