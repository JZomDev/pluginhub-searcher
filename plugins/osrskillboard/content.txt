package com.osrskillboard;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class OsrsKillboardPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(OsrsKillboardPlugin.class);
		RuneLite.main(args);
	}
}
package com.osrskillboard;

import com.google.common.base.Strings;
import lombok.AccessLevel;
import lombok.Getter;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.util.AsyncBufferedImage;
import net.runelite.client.util.QuantityFormatter;
import net.runelite.client.util.Text;

import javax.annotation.Nullable;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.BiConsumer;


class OsrsKillboardBox extends JPanel
{
    private static final int ITEMS_PER_ROW = 5;

    private final JPanel itemContainer = new JPanel();
    private final JLabel priceLabel = new JLabel();
    private final JLabel subTitleLabel = new JLabel();
    private final ItemManager itemManager;
    @Getter(AccessLevel.PACKAGE)
    private final String id;

    @Getter
    private final List<OsrsKillboardRecord> records = new ArrayList<>();

    private long totalPrice;
    private boolean hideIgnoredItems;
    private BiConsumer<String, Boolean> onItemToggle;

    OsrsKillboardBox(
            final ItemManager itemManager,
            final String id,
            @Nullable final String subtitle)
    {
        this.id = id;
        this.itemManager = itemManager;
        this.onItemToggle = onItemToggle;
        this.hideIgnoredItems = hideIgnoredItems;

        setLayout(new BorderLayout(0, 1));
        setBorder(new EmptyBorder(5, 0, 0, 0));

        final JPanel logTitle = new JPanel(new BorderLayout(5, 0));
        logTitle.setBorder(new EmptyBorder(7, 7, 7, 7));
        logTitle.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());

        final JLabel titleLabel = new JLabel(Text.removeTags(id));
        titleLabel.setFont(FontManager.getRunescapeSmallFont());
        titleLabel.setForeground(Color.WHITE);

        logTitle.add(titleLabel, BorderLayout.WEST);

        subTitleLabel.setFont(FontManager.getRunescapeSmallFont());
        subTitleLabel.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        logTitle.add(subTitleLabel, BorderLayout.CENTER);

        if (!Strings.isNullOrEmpty(subtitle))
        {
            subTitleLabel.setText(subtitle);
        }

        priceLabel.setFont(FontManager.getRunescapeSmallFont());
        priceLabel.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        logTitle.add(priceLabel, BorderLayout.EAST);

        add(logTitle, BorderLayout.NORTH);
        add(itemContainer, BorderLayout.CENTER);
    }

    private long getTotalKills()
    {
        return records.size();
    }

    /**
     * Checks if this box matches specified record
     *
     * @param record loot record
     * @return true if match is made
     */
    boolean matches(final OsrsKillboardRecord record)
    {
        return record.getTitle().equals(id);
    }

    /**
     * Checks if this box matches specified id
     *
     * @param id other record id
     * @return true if match is made
     */
    boolean matches(final String id)
    {
        if (id == null)
        {
            return true;
        }

        return this.id.equals(id);
    }

    /**
     * Adds an record's data into a loot box.
     * This will add new items to the list, re-calculating price and kill count.
     */
    void combine(final OsrsKillboardRecord record)
    {
        if (!matches(record))
        {
            throw new IllegalArgumentException(record.toString());
        }

        records.add(record);
    }

    void rebuild()
    {
        buildItems();
        String priceTypeString = " ";

        priceLabel.setText(QuantityFormatter.quantityToStackSize(totalPrice) + " gp");
        priceLabel.setToolTipText(QuantityFormatter.formatNumber(totalPrice) + " gp");

        final long kills = getTotalKills();
        if (kills > 1)
        {
            subTitleLabel.setText("x " + kills);
        }

        validate();
        repaint();
    }

    /**
     * This method creates stacked items from the item list, calculates total price and then
     * displays all the items in the UI.
     */
    private void buildItems()
    {
        final List<OsrsKillboardItem> allItems = new ArrayList<>();
        final List<OsrsKillboardItem> items = new ArrayList<>();
        totalPrice = 0;

        for (OsrsKillboardRecord record : records)
        {
            allItems.addAll(Arrays.asList(record.getItems()));
        }

        for (final OsrsKillboardItem entry : allItems)
        {
            totalPrice += entry.getGePrice();

            int quantity = 0;
            for (final OsrsKillboardItem i : items)
            {
                if (i.getId() == entry.getId())
                {
                    quantity = i.getQuantity();
                    items.remove(i);
                    break;
                }
            }

            if (quantity > 0)
            {
                int newQuantity = entry.getQuantity() + quantity;
                long pricePerItem = entry.getGePrice() == 0 ? 0 : (entry.getGePrice() / entry.getQuantity());

                items.add(new OsrsKillboardItem(entry.getId(), entry.getName(), newQuantity, pricePerItem * newQuantity));
            }
            else
            {
                items.add(entry);
            }
        }

        items.sort((i1, i2) -> Long.compare(i2.getGePrice(), i1.getGePrice()));

        // Calculates how many rows need to be display to fit all items
        final int rowSize = ((items.size() % ITEMS_PER_ROW == 0) ? 0 : 1) + items.size() / ITEMS_PER_ROW;

        itemContainer.removeAll();
        itemContainer.setLayout(new GridLayout(rowSize, ITEMS_PER_ROW, 1, 1));

        for (int i = 0; i < rowSize * ITEMS_PER_ROW; i++)
        {
            final JPanel slotContainer = new JPanel();
            slotContainer.setBackground(ColorScheme.DARKER_GRAY_COLOR);

            if (i < items.size())
            {
                final OsrsKillboardItem item = items.get(i);
                final JLabel imageLabel = new JLabel();
                imageLabel.setToolTipText(buildToolTip(item));
                imageLabel.setVerticalAlignment(SwingConstants.CENTER);
                imageLabel.setHorizontalAlignment(SwingConstants.CENTER);

                AsyncBufferedImage itemImage = itemManager.getImage(item.getId(), item.getQuantity(), item.getQuantity() > 1);

                itemImage.addTo(imageLabel);

                slotContainer.add(imageLabel);
            }

            itemContainer.add(slotContainer);
        }

        itemContainer.repaint();
    }

    private static String buildToolTip(OsrsKillboardItem item)
    {
        final String name = item.getName();
        final int quantity = item.getQuantity();
        final long price = item.getGePrice();
        return name + " x " + quantity + " (" + QuantityFormatter.quantityToStackSize(price) + ") ";
    }
}


package com.osrskillboard;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;

@ConfigGroup("osrskillboard")
public interface OsrsKillboardConfig extends Config
{
}

package com.osrskillboard;

import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.PluginErrorPanel;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.QuantityFormatter;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Objects;

class OsrsKillboardPanel extends PluginPanel
{
    private static final int MAX_LOOT_BOXES = 500;
    private static final String HTML_LABEL_TEMPLATE =
            "<html><body style='color:%s'>%s<span style='color:white'>%s</span></body></html>";

    // When there is no loot, display this
    private final PluginErrorPanel errorPanel = new PluginErrorPanel();

    // Handle loot boxes
    private final JPanel logsContainer = new JPanel();

    // Handle overall session data
    private final JPanel overallPanel = new JPanel();
    private final JLabel overallKillsLabel = new JLabel();
    private final JLabel overallGpLabel = new JLabel();
    private final JLabel overallIcon = new JLabel();

    // Details and navigation
    private final JPanel actionsContainer = new JPanel();
    private final JLabel detailsTitle = new JLabel();

    // Log collection
    private final List<OsrsKillboardRecord> records = new ArrayList<>();
    private final List<OsrsKillboardBox> boxes = new ArrayList<>();

    private final ItemManager itemManager;
    private final OsrsKillboardPlugin plugin;
    private final OsrsKillboardConfig config;

    private String currentView;

    OsrsKillboardPanel(final OsrsKillboardPlugin plugin, final ItemManager itemManager, final OsrsKillboardConfig config)
    {
        this.itemManager = itemManager;
        this.plugin = plugin;
        this.config = config;

        setBorder(new EmptyBorder(6, 6, 6, 6));
        setBackground(ColorScheme.DARK_GRAY_COLOR);
        setLayout(new BorderLayout());

        // Create layout panel for wrapping
        final JPanel layoutPanel = new JPanel();
        layoutPanel.setLayout(new BoxLayout(layoutPanel, BoxLayout.Y_AXIS));
        add(layoutPanel, BorderLayout.NORTH);

        final JPanel leftTitleContainer = new JPanel(new BorderLayout(5, 0));
        leftTitleContainer.setBackground(ColorScheme.DARKER_GRAY_COLOR);

        detailsTitle.setForeground(Color.WHITE);

        leftTitleContainer.add(detailsTitle, BorderLayout.CENTER);

        actionsContainer.add(leftTitleContainer, BorderLayout.WEST);

        // Create panel that will contain overall data
        overallPanel.setBorder(
                BorderFactory.createCompoundBorder(
                    BorderFactory.createMatteBorder(5, 0, 0, 0, ColorScheme.DARK_GRAY_COLOR),
                    BorderFactory.createEmptyBorder(8, 10, 8, 10)
                )
        );

        overallPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        overallPanel.setLayout(new BorderLayout());
        overallPanel.setVisible(false);

        // Add icon and contents
        final JPanel overallInfo = new JPanel();
        overallInfo.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        overallInfo.setLayout(new GridLayout(2, 1));
        overallInfo.setBorder(new EmptyBorder(2, 10, 2, 0));
        overallKillsLabel.setFont(FontManager.getRunescapeSmallFont());
        overallGpLabel.setFont(FontManager.getRunescapeSmallFont());
        overallInfo.add(overallKillsLabel);
        overallInfo.add(overallGpLabel);
        overallPanel.add(overallIcon, BorderLayout.WEST);
        overallPanel.add(overallInfo, BorderLayout.CENTER);

        // Create reset all menu
        final JMenuItem reset = new JMenuItem("Reset All");
        reset.addActionListener(e ->
        {
            // If not in detailed view, remove all, otherwise only remove for the currently detailed title
            records.removeIf(r -> r.matches(currentView));
            boxes.removeIf(b -> b.matches(currentView));
            updateOverall();
            logsContainer.removeAll();
            logsContainer.repaint();

            // Delete all loot, or loot matching the current view
            OsrsKillboardClient client = plugin.getOsrsKillboardClient();
        });

        // Create popup menu
        final JPopupMenu popupMenu = new JPopupMenu();
        popupMenu.setBorder(new EmptyBorder(5, 5, 5, 5));
        popupMenu.add(reset);
        overallPanel.setComponentPopupMenu(popupMenu);

        // Create loot boxes wrapper
        logsContainer.setLayout(new BoxLayout(logsContainer, BoxLayout.Y_AXIS));
        layoutPanel.add(actionsContainer);
        layoutPanel.add(overallPanel);
        layoutPanel.add(logsContainer);

        // Add error pane
        errorPanel.setContent("OSRS Killboard", "You haven't killed any players yet.");
        add(errorPanel);
    }

    void loadHeaderIcon(BufferedImage img)
    {
        overallIcon.setIcon(new ImageIcon(img));
    }

    /**
     * Adds a new entry to the plugin.
     * Creates a subtitle, adds a new entry and then passes off to the render methods, that will decide
     * how to display this new data.
     */
    void add(final String eventName, final int actorLevel, OsrsKillboardItem[] items, String killId)
    {
        final String subTitle = actorLevel > -1 ? "(lvl-" + actorLevel + ")" : "";
        final OsrsKillboardRecord record = new OsrsKillboardRecord(eventName, subTitle, items, System.currentTimeMillis(), killId);
        records.add(record);
        OsrsKillboardBox box = buildBox(record);
        if (box != null)
        {
            box.rebuild();
            updateOverall();
        }
    }

    /**
     * Adds a Collection of records to the panel
     */
    void addRecords(Collection<OsrsKillboardRecord> recs)
    {
        records.addAll(recs);
        rebuild();
    }

    /**
     * Rebuilds all the boxes from scratch using existing listed records, depending on the grouping mode.
     */
    private void rebuild()
    {
        logsContainer.removeAll();
        boxes.clear();
        int start = 0;
        if (records.size() > MAX_LOOT_BOXES)
        {
            start = records.size() - MAX_LOOT_BOXES;
        }
        for (int i = start; i < records.size(); i++)
        {
            buildBox(records.get(i));
        }
        boxes.forEach(OsrsKillboardBox::rebuild);
        updateOverall();
        logsContainer.revalidate();
        logsContainer.repaint();
    }

    /**
     * This method decides what to do with a new record, if a similar log exists, it will
     * add its items to it, updating the log's overall price and kills. If not, a new log will be created
     * to hold this entry's information.
     */
    private OsrsKillboardBox buildBox(OsrsKillboardRecord record)
    {
        // If this record is not part of current view, return
        if (!record.matches(currentView))
        {
            return null;
        }

        // Show main view
        remove(errorPanel);
        actionsContainer.setVisible(true);
        overallPanel.setVisible(true);

        // Create box
        final OsrsKillboardBox box = new OsrsKillboardBox(itemManager, record.getTitle(), record.getSubTitle());
        box.combine(record);

        // Create popup menu
        final JPopupMenu popupMenu = new JPopupMenu();
        popupMenu.setBorder(new EmptyBorder(5, 5, 5, 5));
        box.setComponentPopupMenu(popupMenu);

        // Create reset menu
        final JMenuItem reset = new JMenuItem("Reset");
        reset.addActionListener(e ->
        {
            records.removeAll(box.getRecords());
            boxes.remove(box);
            updateOverall();
            logsContainer.remove(box);
            logsContainer.repaint();
        });

        popupMenu.add(reset);

        if(!record.getOsrsKillboardKillId().equals("") || record.getTitle() != "PvP Loot Chest"){
            // Add right click open on OSRSKillboard.com
            final JMenuItem openOsrsKillboardLink = new JMenuItem("Open on OSRSKillboard.com");
            openOsrsKillboardLink.addActionListener(e -> OsrsKillboardPlugin.openOsrsKillboardLink(record.getOsrsKillboardKillId()));
            popupMenu.add(openOsrsKillboardLink);

            // Add right click copy OSRSKillboard.com link
            final JMenuItem copyOsrsKillboardLink = new JMenuItem("Copy kill link");
            String killUrl = OsrsKillboardPlugin.GetKillUrl(record.getOsrsKillboardKillId());
            final StringSelection osrsKillboardLink = new StringSelection(killUrl);
            copyOsrsKillboardLink.addActionListener(e -> Toolkit.getDefaultToolkit().getSystemClipboard().setContents(osrsKillboardLink, null));
            popupMenu.add(copyOsrsKillboardLink);
        }
        // Add box to panel
        boxes.add(box);
        logsContainer.add(box, 0);

        if (boxes.size() > MAX_LOOT_BOXES)
        {
            logsContainer.remove(boxes.remove(0));
        }

        return box;
    }

    private void updateOverall()
    {
        long overallKills = 0;
        long overallGp = 0;

        for (OsrsKillboardRecord record : records)
        {
            if (!record.matches(currentView))
            {
                continue;
            }

            int present = record.getItems().length;

            for (OsrsKillboardItem item : record.getItems())
            {
                overallGp += item.getGePrice();
            }

            if (present > 0)
            {
                overallKills++;
            }
        }

        overallKillsLabel.setText(htmlLabel("Total count: ", overallKills));
        overallGpLabel.setText(htmlLabel("Total value: ", overallGp));
    }

    private static String htmlLabel(String key, long value)
    {
        final String valueStr = QuantityFormatter.quantityToStackSize(value);
        return String.format(HTML_LABEL_TEMPLATE, ColorUtil.toHexColor(ColorScheme.LIGHT_GRAY_COLOR), key, valueStr);
    }
}

package com.osrskillboard;

import com.google.common.collect.ImmutableSet;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.inject.Provides;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.kit.KitType;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.PlayerLootReceived;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.ItemStack;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.LinkBrowser;
import org.apache.commons.lang3.StringUtils;

import javax.inject.Inject;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

@Slf4j
@PluginDescriptor(
		name = "OsrsKillboard",
		description = "Tracks loot from killing players",
		tags = {"drops", "pvp"},
		enabledByDefault = true
)
public class OsrsKillboardPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private OsrsKillboardConfig config;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	private ItemManager itemManager;

	@Inject
	private SpriteManager spriteManager;

	private OsrsKillboardPanel panel;
	private NavigationButton navButton;
	private boolean chestLooted;

	@Provides
	OsrsKillboardConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(OsrsKillboardConfig.class);
	}

	@Getter(AccessLevel.PACKAGE)
	@Inject
	private OsrsKillboardClient osrsKillboardClient;

	private static Collection<ItemStack> stack(Collection<ItemStack> items) {
		final List<ItemStack> list = new ArrayList<>();

		for (final ItemStack item : items) {
			int quantity = 0;
			for (final ItemStack i : list) {
				if (i.getId() == item.getId()) {
					quantity = i.getQuantity();
					list.remove(i);
					break;
				}
			}
			if (quantity > 0) {
				list.add(new ItemStack(item.getId(), item.getQuantity() + quantity, item.getLocation()));
			} else {
				list.add(item);
			}
		}

		return list;
	}

	@Override
	protected void startUp() {
		log.info("OsrsKillboard started!");

		panel = new OsrsKillboardPanel(this, itemManager, config);
		spriteManager.getSpriteAsync(SpriteID.PLAYER_KILLER_SKULL, 0, panel ::loadHeaderIcon);

		final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "panel_icon.png");

		navButton = NavigationButton.builder()
				.tooltip("OsrsKillboard")
				.icon(icon)
				.priority(5)
				.panel(panel)
				.build();

		clientToolbar.addNavigation(navButton);
	}

	@Override
	protected void shutDown() {
		log.info("OsrsKillboard stopped!");

		clientToolbar.removeNavigation(navButton);
		chestLooted = false;
	}

	@Subscribe
	public void onPlayerLootReceived(final PlayerLootReceived playerLootReceived) throws IOException {
		if (isPlayerInSafeMinigame())
		{
			return;
		}

		final Player victim = playerLootReceived.getPlayer();
		final Collection<ItemStack> items = playerLootReceived.getItems();
		final String victimName = victim.getName();
		final int victimCombat = victim.getCombatLevel();
		final OsrsKillboardItem[] victimLoot = buildEntries(stack(items));

		JsonObject killJson = buildKillJson(victim, victimLoot);

		osrsKillboardClient.submitPk(killJson, panel, victimName, victimCombat, victimLoot);
	}

	@Subscribe
	public void onGameStateChanged(final GameStateChanged event)
	{
		if (event.getGameState() == GameState.LOADING && !client.isInInstancedRegion())
		{
			chestLooted = false;
		}
	}

	@Subscribe
	public void onWidgetLoaded(WidgetLoaded widgetLoaded)
	{
		String event;
		Object metadata = null;
		final ItemContainer container;

		switch (widgetLoaded.getGroupId())
		{
			case InterfaceID.WILDERNESS_LOOT_CHEST:
				if (chestLooted)
				{
					return;
				}
				event = "Loot Chest";
				container = client.getItemContainer(InventoryID.WILDERNESS_LOOT_CHEST);
				chestLooted = true;
				break;
			default:
				return;
		}

		if (container == null)
		{
			return;
		}

		// Convert container items to array of ItemStack
		final Collection<ItemStack> items = Arrays.stream(container.getItems())
				.filter(item -> item.getId() > 0)
				.map(item -> new ItemStack(item.getId(), item.getQuantity(), client.getLocalPlayer().getLocalLocation()))
				.collect(Collectors.toList());

		final OsrsKillboardItem[] chestLoot = buildEntries(stack(items));

		if (items.isEmpty())
		{
			log.debug("No items to find for Event: {} | Container: {}", event, container);
			return;
		}

		JsonObject keyJson = buildKeyJson(chestLoot);
		osrsKillboardClient.submitKeyLoot(keyJson, panel, chestLoot);
	}

	private JsonObject buildKillJson(Player victim, OsrsKillboardItem[] lootItems) {
		JsonObject killJson = new JsonObject();

		Player pker = client.getLocalPlayer();

		// Kill Info
		OffsetDateTime utc = OffsetDateTime.now(ZoneOffset.UTC);
		killJson.addProperty("time", DateTimeFormatter.ISO_INSTANT.format(Instant.now()));
		killJson.addProperty("world", client.getWorld());
		killJson.addProperty("worldType", client.getWorldType().toString());
		killJson.addProperty("localLocation", pker.getLocalLocation().toString());
		killJson.addProperty("worldLocation", pker.getWorldLocation().toString());

		// Pker Info
		killJson.addProperty("pkerName", pker.getName());
		killJson.addProperty("pkerAccountType", client.getAccountType().toString());
		killJson.addProperty("pkerCombatLevel", pker.getCombatLevel());
		killJson.add("pkerItemsEquipped", getEquippedGearForPlayer(pker));
		killJson.addProperty("pkerIsSkulled", isPlayerSkulled(pker));
		killJson.add("pkerCombatStats", getPlayerSkillsList());

		// Victim Info
		killJson.addProperty("victimName", victim.getName());
		killJson.addProperty("victimCombatLevel", victim.getCombatLevel());
		killJson.add("victimItemsEquipped", getEquippedGearForPlayer(victim));
		killJson.addProperty("victimIsSkulled", isPlayerSkulled(victim));

		// Misc
		killJson.add("loot", getLootAsJson(lootItems));
		killJson.addProperty("lootValue", getLootValue(lootItems));
		killJson.addProperty("victimIsFriend", victim.isFriend());
		killJson.addProperty("victimIsClanMember", victim.isFriendsChatMember());

		return killJson;
	}

	private JsonObject buildKeyJson(OsrsKillboardItem[] lootItems) {
		JsonObject keyJson = new JsonObject();

		Player pker = client.getLocalPlayer();

		// Kill Info
		OffsetDateTime utc = OffsetDateTime.now(ZoneOffset.UTC);
		keyJson.addProperty("time", DateTimeFormatter.ISO_INSTANT.format(Instant.now()));
		keyJson.addProperty("world", client.getWorld());
		keyJson.addProperty("worldType", client.getWorldType().toString());
		keyJson.addProperty("localLocation", pker.getLocalLocation().toString());
		keyJson.addProperty("worldLocation", pker.getWorldLocation().toString());

		// Pker Info
		keyJson.addProperty("pkerName", pker.getName());
		keyJson.addProperty("pkerAccountType", client.getAccountType().toString());

		// Misc
		keyJson.add("loot", getLootAsJson(lootItems));
		keyJson.addProperty("lootValue", getLootValue(lootItems));

		return keyJson;
	}

	private boolean isPlayerSkulled(Player player) {
		boolean isSkulled = false;
		if (player.getSkullIcon() > -1) {
			isSkulled = true;
		}

		return isSkulled;
	}

	private JsonObject getPlayerSkillsList() {
		JsonObject skillJson = new JsonObject();

		skillJson.addProperty("attack", client.getRealSkillLevel(Skill.ATTACK));
		skillJson.addProperty("strength", client.getRealSkillLevel(Skill.STRENGTH));
		skillJson.addProperty("defence", client.getRealSkillLevel(Skill.DEFENCE));
		skillJson.addProperty("hitpoints", client.getRealSkillLevel(Skill.HITPOINTS));
		skillJson.addProperty("prayer", client.getRealSkillLevel(Skill.PRAYER));
		skillJson.addProperty("magic", client.getRealSkillLevel(Skill.MAGIC));
		skillJson.addProperty("ranged", client.getRealSkillLevel(Skill.RANGED));

		return skillJson;
	}

	private JsonArray getLootAsJson(OsrsKillboardItem[] lootItems) {
		JsonArray lootArray = new JsonArray();

		for (OsrsKillboardItem item : lootItems) {
			lootArray.add(buildLootItem(item));
		}

		return lootArray;
	}

	private JsonObject buildLootItem(OsrsKillboardItem item) {
		JsonObject itemJson = new JsonObject();

		itemJson.addProperty("id", item.getId());
		itemJson.addProperty("name", item.getName());
		itemJson.addProperty("qty", item.getQuantity());
		itemJson.addProperty("price", item.getGePrice());

		return itemJson;
	}

	private int getLootValue(OsrsKillboardItem[] lootItems) {
		int lootValue = 0;

		for (OsrsKillboardItem item : lootItems) {
			lootValue += item.getGePrice();
		}

		return lootValue;
	}

	private OsrsKillboardItem buildOsrsKillboardItem(int itemId, int quantity) {
		final ItemComposition itemComposition = itemManager.getItemComposition(itemId);
		final int realItemId = itemComposition.getNote() != -1 ? itemComposition.getLinkedNoteId() : itemId;
		final long price = (long) itemManager.getItemPrice(realItemId) * (long) quantity;
		return new OsrsKillboardItem(itemId, itemComposition.getName(), quantity, price);
	}

	private JsonObject getEquippedGearForPlayer(Player player) {
		ArrayList<Integer> equipmentIds = new ArrayList<>();

		PlayerComposition playerComposition = player.getPlayerComposition();
		equipmentIds.add(playerComposition.getEquipmentId(KitType.HEAD));
		equipmentIds.add(playerComposition.getEquipmentId(KitType.TORSO));
		equipmentIds.add(playerComposition.getEquipmentId(KitType.LEGS));
		equipmentIds.add(playerComposition.getEquipmentId(KitType.BOOTS));
		equipmentIds.add(playerComposition.getEquipmentId(KitType.HANDS));
		equipmentIds.add(playerComposition.getEquipmentId(KitType.SHIELD));
		equipmentIds.add(playerComposition.getEquipmentId(KitType.WEAPON));
		equipmentIds.add(playerComposition.getEquipmentId(KitType.AMULET));
		equipmentIds.add(playerComposition.getEquipmentId(KitType.CAPE));

		ArrayList<OsrsKillboardItem> realItemList = new ArrayList<>();

		for (int equipmentId : equipmentIds) {
			OsrsKillboardItem newItem = buildOsrsKillboardItem(equipmentId, 1);
			realItemList.add(newItem);
		}

		OsrsKillboardItem[] equipmentArrayList = realItemList.toArray(new OsrsKillboardItem[realItemList.size()]);

		return getEquippedGearAsJson(equipmentArrayList);
	}

	private JsonObject getEquippedGearAsJson(OsrsKillboardItem[] equippedItems) {
		final String[] equipmentSlots = {"Head", "Torso", "Legs", "Boots", "Hands", "Shield", "Weapon", "Amulet", "Cape"};

		JsonObject equipment = new JsonObject();
		for (int i = 0; i < equipmentSlots.length; i++) {
			equipment.add(equipmentSlots[i], buildLootItem(equippedItems[i]));
		}

		return equipment;
	}

	private OsrsKillboardItem[] buildEntries(final Collection<ItemStack> itemStacks) {
		return itemStacks.stream()
				.map(itemStack -> buildOsrsKillboardItem(itemStack.getId(), itemStack.getQuantity()))
				.toArray(OsrsKillboardItem[]::new);
	}

	private boolean isPlayerInSafeMinigame()
	{
		Set<Integer> SOUL_WARS_REGIONS = ImmutableSet.of(8493, 8749, 9005);
		Set<Integer> LAST_MAN_STANDING_REGIONS = ImmutableSet.of(13658, 13659, 13660, 13914, 13915, 13916, 13918, 13919, 13920, 14174, 14175, 14176, 14430, 14431, 14432);

		boolean playerInSafeMinigame = false;
		if (isPlayerWithinMapRegion(LAST_MAN_STANDING_REGIONS) || isPlayerWithinMapRegion(SOUL_WARS_REGIONS)){
			playerInSafeMinigame = true;
		}

		return playerInSafeMinigame;
	}

	private boolean isPlayerWithinMapRegion(Set<Integer> definedMapRegions)
	{
		final int[] mapRegions = client.getMapRegions();

		for (int region : mapRegions)
		{
			if (definedMapRegions.contains(region))
			{
				return true;
			}
		}

		return false;
	}

	static void openOsrsKillboardLink(String killId)
	{
		LinkBrowser.browse(GetKillUrl(killId));
	}

	static String GetKillUrl(String killId){
		String url = "https://osrskillboard.com";
		if(StringUtils.isNotEmpty(killId)){
			url = "https://osrskillboard.com/pks/" + killId;
		}

		return url;
	}
}

package com.osrskillboard;

import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
@Getter
class OsrsKillboardItem
{
    private final int id;
    private final String name;
    private final int quantity;
    private final long gePrice;
}

package com.osrskillboard;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import okhttp3.*;

import javax.swing.*;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;

@Slf4j
public class OsrsKillboardClient
{
    private final OkHttpClient httpClient;
    private static final HttpUrl apiBase = HttpUrl.parse("https://api.osrskillboard.com/");

    @Inject
    private ChatMessageManager chatMessageManager;

    @Inject
    private OsrsKillboardClient(OkHttpClient client, Gson gson)
    {
        this.httpClient = client;
    }

    public CompletableFuture<Void> submitPk(JsonObject killRecord, OsrsKillboardPanel panel, String victimName, int victimCombat, OsrsKillboardItem[] victimLoot)
    {
        CompletableFuture<Void> future = new CompletableFuture<>();

        HttpUrl url = apiBase.newBuilder()
                .addPathSegment("pks")
                .build();

        MediaType JSON = MediaType.parse("application/json; charset=utf-8");

        Request requestBuilder = new Request.Builder()
                .post(RequestBody.create(JSON, killRecord.toString()))
                .url(url)
                .build();

        httpClient.newCall(requestBuilder).enqueue(new Callback()
        {
            @Override
            public void onFailure(Call call, IOException e)
            {
                chatMessageManager.queue(QueuedMessage.builder().type(ChatMessageType.GAMEMESSAGE).value("OSRSKillboard.com - Kill of " + victimName + " failed to log.").build());
                SwingUtilities.invokeLater(() -> panel.add(victimName, victimCombat, victimLoot, ""));
                log.warn("unable to submit pk", e);
            }

            @Override
            public void onResponse(Call call, Response response) {

                String killIdentifier = null;
                try {
                    assert response.body() != null;
                    killIdentifier = response.body().string();
                } catch (IOException e) {
                    throw new RuntimeException(e);
                } finally {
                    response.close();
                }

                chatMessageManager.queue(QueuedMessage.builder().type(ChatMessageType.GAMEMESSAGE).value("OSRSKillboard.com - Kill of " + victimName + " logged.").build());

                String finalKillIdentifier = killIdentifier;
                SwingUtilities.invokeLater(() -> {
                    panel.add(victimName, victimCombat, victimLoot, finalKillIdentifier);
                    future.complete(null);
                });
            }
        });

        return future;
    }

    public CompletableFuture<Void> submitKeyLoot(JsonObject keyJson, OsrsKillboardPanel panel, OsrsKillboardItem[] keyLoot)
    {
        CompletableFuture<Void> future = new CompletableFuture<>();

        HttpUrl url = apiBase.newBuilder()
                .addPathSegment("lootkeys")
                .build();

        MediaType JSON = MediaType.parse("application/json; charset=utf-8");

        Request requestBuilder = new Request.Builder()
                .post(RequestBody.create(JSON, keyJson.toString()))
                .url(url)
                .build();

        httpClient.newCall(requestBuilder).enqueue(new Callback()
        {
            @Override
            public void onFailure(Call call, IOException e)
            {
                chatMessageManager.queue(QueuedMessage.builder().type(ChatMessageType.GAMEMESSAGE).value("OSRSKillboard.com - PvP Loot Chest opening failed to log.").build());
                SwingUtilities.invokeLater(() -> panel.add("PvP Loot Chest", -2, keyLoot, ""));
                log.warn("unable to submit PVP Loot Chest", e);
            }

            @Override
            public void onResponse(Call call, Response response) {

                String killIdentifier = null;
                try {
                    assert response.body() != null;
                    killIdentifier = response.body().string();
                } catch (IOException e) {
                    throw new RuntimeException(e);
                } finally {
                    response.close();
                }

                chatMessageManager.queue(QueuedMessage.builder().type(ChatMessageType.GAMEMESSAGE).value("OSRSKillboard.com - PvP Loot Chest opening logged.").build());

                String serverKeyId = killIdentifier;
                SwingUtilities.invokeLater(() -> {
                    panel.add("PvP Loot Chest", -2, keyLoot, serverKeyId);
                    future.complete(null);
                });
            }
        });

        return future;
    }
}
package com.osrskillboard;

import lombok.Value;

@Value
class OsrsKillboardRecord
{
    private final String title;
    private final String subTitle;
    private final OsrsKillboardItem[] items;
    private final long timestamp;
    private final String OsrsKillboardKillId;

    /**
     * Checks if this record matches specified id
     * @param id other record id
     * @return true if match is made
     */
    boolean matches(final String id)
    {
        if (id == null)
        {
            return true;
        }

        return title.equals(id);
    }
}
