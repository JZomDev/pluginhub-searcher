package com.FeroxRestoreAlert;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class FeroxRestoreAlertTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(FeroxRestoreAlertPlugin.class);
		RuneLite.main(args);
	}
}
package com.FeroxRestoreAlert;

import lombok.Getter;

@Getter
public enum AlertPosition {
    TOP_LEFT("Top Left"),
    TOP_RIGHT("Top Right"),
    TOP_CENTER("Top Center"),
    BOTTOM_LEFT("Bottom Left");

    private final String friendlyName;

    AlertPosition(String name) {
        this.friendlyName = name;
    }
}

package com.FeroxRestoreAlert;

import com.google.inject.Provides;

import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameTick;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
        name = "Ferox Restore Alert"
)
public class FeroxRestoreAlertPlugin extends Plugin {
    @Inject
    private Client client;

    @Inject
    private FeroxRestoreAlertConfig config;

    @Inject
    private ClientThread clientThread;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private FeroxRestoreAlertOverlay feroxRestoreAlertOverlay;

    @Override
    protected void startUp() {
        log.info("Ferox Restore Alert started!");
        overlayManager.add(feroxRestoreAlertOverlay);
    }

    @Override
    protected void shutDown() throws Exception {
        overlayManager.remove(feroxRestoreAlertOverlay);
        log.info("Ferox Restore Alert stopped!");
    }

    private int maxPrayerValue = 0;
    private int currentPrayerValue = 0;
    private int maxHitpointsValue = 0;
    private int currentHitpointsValue = 0;
    private int customEnergyRestoreValue = 0;
    private int currentEnergyPercentage = 0;
    private final WorldArea feroxArea = new WorldArea(3123, 3617, 31, 21, 0);
    int tickCounter = 0;

    @Subscribe
    public void onGameTick(GameTick event) {
        updateMaxStatValues();
        updateCurrentStatValues();
        customEnergyRestoreValue = config.getCustomEnergyRestoreValue();

        WorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();

        if (feroxArea.contains(playerLocation) && !checkStatsAreRestored() && tickCounter % 2 == 0) {
            feroxRestoreAlertOverlay.showOverlay();
            tickCounter++;
        } else {
            feroxRestoreAlertOverlay.hideOverlay();
            tickCounter = 0;
        }

        if (!feroxArea.contains(playerLocation) || checkStatsAreRestored()) {
            feroxRestoreAlertOverlay.hideOverlay();
        }
    }

    public void updateMaxPrayerValue() {
        maxPrayerValue = client.getRealSkillLevel(Skill.PRAYER);
    }

    public void updateCurrentPrayerValue() {
        currentPrayerValue = client.getBoostedSkillLevel(Skill.PRAYER);
    }

    public void updateMaxHitpointsValue() {
        maxHitpointsValue = client.getRealSkillLevel(Skill.HITPOINTS);
    }

    public void updateCurrentHitpointsValue() {
        currentHitpointsValue = client.getBoostedSkillLevel(Skill.HITPOINTS);
    }

    public void updateCurrentEnergyPercentage() {
        currentEnergyPercentage = Math.floorDiv(client.getEnergy(), 100);
    }

    public void updateMaxStatValues() {
        updateMaxPrayerValue();
        updateMaxHitpointsValue();
    }

    public void updateCurrentStatValues() {
        updateCurrentPrayerValue();
        updateCurrentHitpointsValue();
        updateCurrentEnergyPercentage();
    }

    public boolean checkStatsAreRestored() {
        return currentPrayerValue == maxPrayerValue &&
               currentHitpointsValue == maxHitpointsValue &&
               currentEnergyPercentage >= customEnergyRestoreValue;
    }

    @Provides
    FeroxRestoreAlertConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(FeroxRestoreAlertConfig.class);
    }
}
package com.FeroxRestoreAlert;

import java.awt.Color;

import net.runelite.client.config.*;

@ConfigGroup("FeroxRestoreAlert")
public interface FeroxRestoreAlertConfig extends Config {
	@Alpha
	@ConfigItem(
			keyName = "textColor",
			name = "Text Color",
			description = "Color of text in alert overlay",
			position = 0
	)
	default Color getTextColor() {
		return Color.WHITE;
	}

	@Alpha
	@ConfigItem(
			keyName = "backgroundColor",
			name = "Background Color",
			description = "Color of background in alert overlay",
			position = 1
	)
	default Color getBackgroundColor() {
		return new Color(0, 142, 0);
	}

	@ConfigItem(
			keyName = "alertPosition",
			name = "Alert Position",
			description = "Changes where the alert is displayed",
			position = 2
	)
	default AlertPosition getAlertPosition() {
		return AlertPosition.TOP_LEFT;
	}

	@Range(
			min = 1,
			max = 100
	)
	@ConfigItem(
			keyName = "customEnergyValue",
			name = "Energy Threshold",
			description = "% for Energy to be considered restored",
			position = 5
	)
	default int getCustomEnergyRestoreValue() {
		return 90;
	}
}

package com.FeroxRestoreAlert;

import javax.inject.Inject;
import java.awt.*;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class FeroxRestoreAlertOverlay extends Overlay
{
    @Inject
    private FeroxRestoreAlertConfig config;
    private final Client client;
    private final PanelComponent panelComponent = new PanelComponent();
    private final OverlayManager overlayManager;
    private boolean isVisible = false;

    @Inject
    private FeroxRestoreAlertOverlay(FeroxRestoreAlertPlugin plugin,
                                     Client client,
                                     FeroxRestoreAlertConfig config,
                                     OverlayManager overlayManager) {
        super(plugin);
        setPriority(OverlayPriority.LOW);
        this.client = client;
        this.config = config;
        this.overlayManager = overlayManager;
        addMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Ferox Restore Alert overlay");
    }

    public void showOverlay() {
        if (!isVisible)
        {
            isVisible = true;
            overlayManager.add(this);
        }
    }

    public void hideOverlay() {
        if (isVisible)
        {
            isVisible = false;
            overlayManager.remove(this);
        }
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if(!isVisible) {
            return null;
        }

        String titleText = "Restore your stats before leaving!";

        panelComponent.getChildren().clear();
        panelComponent.getChildren().add(TitleComponent.builder()
                .text(titleText)
                .color(config.getTextColor())
                .build());

        panelComponent.setPreferredSize(new Dimension(
                graphics.getFontMetrics().stringWidth(titleText) + 50,
                20
        ));

        panelComponent.setBackgroundColor(config.getBackgroundColor());

        switch (config.getAlertPosition()) {
            case BOTTOM_LEFT:
                setPosition(OverlayPosition.BOTTOM_LEFT);
                break;
            case TOP_LEFT:
                setPosition(OverlayPosition.TOP_LEFT);
                break;
            case TOP_CENTER:
                setPosition(OverlayPosition.TOP_CENTER);
                break;
            case TOP_RIGHT:
                setPosition(OverlayPosition.TOP_RIGHT);
                break;
        }

        return panelComponent.render(graphics);
    }
}

