package com.hablapatabla.implingfinder;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ImplingFinderPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ImplingFinderPlugin.class);
		RuneLite.main(args);
	}
}
package com.hablapatabla.implingfinder;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.hablapatabla.implingfinder.model.ImplingFinderData;
import com.hablapatabla.implingfinder.model.ImplingFinderEnum;
import lombok.Value;
import okhttp3.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.io.IOException;
import java.lang.reflect.Type;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Future;
import java.util.function.Function;


@Singleton
public class ImplingFinderWebManager {
    protected static final String CONTENT = "Content-Type";
    protected static final String JSON = "application/json";
    private static final MediaType JSONTYPE = MediaType.parse("application/json; charset=utf-8");

    @Inject
    private OkHttpClient okHttpClient;

    @Inject
    private ImplingFinderPlugin plugin;

    @Inject
    private GsonBuilder gsonBuilder;

    private Logger logger = LoggerFactory.getLogger(ImplingFinderWebManager.class);


    protected void postImplings() {
        try {
            // Oracle cloud only handles 1 JSON object to be posted at a time
            for (ImplingFinderData data : plugin.getImplingsToUpload()) {
                Request r = new Request.Builder()
                        .url(ImplingFinderPlugin.implingPostEndpoint)
                        .addHeader(CONTENT, JSON)
                        .post(RequestBody.create(JSONTYPE, getGson().toJson(data)))
                        .build();

                okHttpClient.newCall(r).enqueue(new Callback() {
                    @Override
                    public void onFailure(Call call, IOException e) {
                        logger.error("Failed to post implings", e);
                    }

                    @Override
                    public void onResponse(Call call, Response response) throws IOException {
                        try {
                            if (!response.isSuccessful())
                                logger.error("On post response error " + response.body().string());
                        }
                        catch (Exception e) {
                            logger.error("POST responded unsuccessful ", e);
                        }
                        finally {
                            response.close();
                        }
                    }
                });
            }
        } catch (Exception e) {
            logger.error("Outer catch block POST ", e);
        }
        plugin.getImplingsToUpload().clear();
    }

    protected List<ImplingFinderData> getData(List<Integer> ids) {
        List<Future<ImplingsWrapper>> futures = new ArrayList<>();
        List<ImplingFinderData> implings = new ArrayList<>();

        for (Integer id : ids) {
            String endpoint;
            if (id != ImplingFinderPlugin.RECENT_IMPLINGS_ID)
                endpoint = ImplingFinderPlugin.implingGetIdEndpoint + Integer.toString(id);
            else
                endpoint = ImplingFinderPlugin.implingGetAnyEndpoint;

            Future<ImplingsWrapper> f = fetchAndDeserializeSpecificImpling(endpoint, getGson(), new TypeToken<ImplingsWrapper>() {});
            futures.add(f);
        }

        try {
            for (Future<ImplingsWrapper> f : futures) {
                List<ImplingFinderData> l = f.get().implings;
                implings.addAll(l);
            }
        }
        catch (Exception e) {
            logger.error("Error opening futures", e);
        }
        finally {
            Collections.sort(implings, Collections.reverseOrder());
            if (implings.size() > 25)
                implings = implings.subList(0, 25);
            return implings;
        }
    }


    /**
     * Calls getSpecificImplingResponseAsync in order to get a CompletableFuture containing the
     * full response body from the api at url. Uses a TypeToken to deserialize body, see
     * ImplingsWrapper for only use case. Oracle api response is a full JSON array, with
     * impling data of interest in a JSON object called items.
     */
    private <T> Future<T> fetchAndDeserializeSpecificImpling(String url, Gson gson, TypeToken<T> typeToken) {
        CompletableFuture<String> future = getSpecificImplingResponseAsync(url);
        return future.thenApply(new Function<String, T>() {
            public T apply (String body) {
                return gson.fromJson(body, typeToken.getType());
            }
        });
    }


    private CompletableFuture<String> getSpecificImplingResponseAsync(String url) {
        CompletableFuture<String> future = new CompletableFuture<>();
        Request r = new Request.Builder()
                .url(url)
                .build();

        okHttpClient.newCall(r).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                future.completeExceptionally(e);
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                try {
                    if (response.isSuccessful()) {
                        future.complete(response.body().string());
                    }
                    else {
                        throw new IOException("Http error");
                    }
                }
                catch (Exception e) {
                    future.completeExceptionally(e);
                }
                finally {
                    response.close();
                }
            }
        });
        return future;
    }

    @Value
    private static class ImplingsWrapper {
        @SerializedName("items")
        List<ImplingFinderData> implings;
    }

    private Gson getGson() {
        return gsonBuilder.registerTypeAdapter(Instant.class, new InstantSecondsConverter()).create();
    }

    /**
     * Serializes/Deserializes {@link Instant} using {@link Instant#getEpochSecond()}/{@link Instant#ofEpochSecond(long)}
     */
    private static class InstantSecondsConverter implements JsonSerializer<Instant>, JsonDeserializer<Instant>
    {
        @Override
        public JsonElement serialize(Instant src, Type srcType, JsonSerializationContext context) {
            return new JsonPrimitive(src.getEpochSecond());
        }

        @Override
        public Instant deserialize(JsonElement json, Type type, JsonDeserializationContext context)
                throws JsonParseException {
            return Instant.ofEpochSecond(json.getAsLong());
        }
    }
}

package com.hablapatabla.implingfinder;

import com.google.gson.Gson;
import com.google.inject.Provides;
import com.hablapatabla.implingfinder.model.ImplingFinderData;
import com.hablapatabla.implingfinder.model.ImplingFinderEnum;
import com.hablapatabla.implingfinder.model.ImplingFinderWorldMapPoint;
import com.hablapatabla.implingfinder.ui.ImplingFinderPanel;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.Notifier;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.WorldService;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.task.Schedule;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.ui.overlay.worldmap.WorldMapPointManager;
import net.runelite.client.util.ImageUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Inject;
import javax.swing.*;
import java.awt.image.BufferedImage;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.*;

@Slf4j
@PluginDescriptor(
        name = "Impling Finder",
        description = "A plugin to crowdsource impling locations",
        tags = {"config", "menu", "impling", "finder", "hunter", "group",
                    "fun", "crowdsource", "crowd", "party", "implingfinder", "impling finder",
                    "clue", "clue scroll", "medium clue", "Impling Finder", "Impling", "Finder"},
        loadWhenOutdated = true,
        enabledByDefault = true
)
public class ImplingFinderPlugin extends Plugin {
    @Inject
    private ImplingFinderConfig config;

    @Inject
    private ImplingFinderPanel panel;

    @Inject
    private ClientToolbar clientToolbar;

    @Inject
    private Client client;

    @Inject
    private Gson gson;

    @Inject
    private ItemManager itemManager;

    @Inject
    private WorldMapPointManager worldMapPointManager;

    @Inject
    private ImplingFinderWebManager webManager;

    @Inject
    private WorldService worldService;

    @Inject
    private Notifier notifier;

    @Getter(AccessLevel.PACKAGE)
    private NavigationButton button = null;

    @Getter(AccessLevel.PACKAGE)
    private List<ImplingFinderData> implingsToUpload = new ArrayList<>();

    @Setter(AccessLevel.PACKAGE)
    private List<ImplingFinderData> remotelyFetchedImplings = new ArrayList<>();

    protected static String implingGetAnyEndpoint = "https://puos0bfgxc2lno5-implingdb.adb.us-phoenix-1.oraclecloudapps.com/ords/impling/implingdev/dev";

    protected static String implingGetIdEndpoint = "https://puos0bfgxc2lno5-implingdb.adb.us-phoenix-1.oraclecloudapps.com/ords/impling/implingdev/dev/";

    protected static String implingPostEndpoint = "https://puos0bfgxc2lno5-implingdb.adb.us-phoenix-1.oraclecloudapps.com/ords/impling/implingdev/dev";

    public static final int RECENT_IMPLINGS_ID = -1;

    @Provides
    ImplingFinderConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(ImplingFinderConfig.class);
    }

    private Logger logger;
    private BufferedImage icon;
    private BufferedImage mapArrow = null;

    private boolean mapPointSet = false;
    private boolean displayingButton = true;
    private boolean wantSpawnNotifications = false;
    private long lastGetCall = System.currentTimeMillis();

    protected static final String CONFIG_GROUP = "Impling Finder";
    private static final int NPC_UPLOAD_TIME = 20;
    private static final int PANEL_REFRESH_TIME = 1;
    private static final int GET_REQUEST_COOLDOWN_TIME = 2000;



    @Override
    protected void startUp() throws Exception {
        logger = LoggerFactory.getLogger(ImplingFinderPlugin.class);
        loadPluginPanel();
        if (!config.beenOpened())
            panel.showSplash();
        else
            panel.continuePastSplash();
    }

    @Override
    protected void shutDown() throws Exception {
        clientToolbar.removeNavigation(button);
    }

    private void loadPluginPanel() {
        try {
           icon = ImageUtil.loadImageResource(getClass(), "/icon.png");
        }
        catch (Exception e) {
            logger.error("Couldn't load plugin icon");
            return;
        }
        if (button != null) {
            clientToolbar.removeNavigation(button);
        }

        panel = injector.getInstance(ImplingFinderPanel.class);

        button = NavigationButton.builder().tooltip("Impling Finder").icon(icon).priority(6).panel(panel).build();
        if (displayingButton)
            clientToolbar.addNavigation(button);
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event) {
        if (event.getGroup().equals(CONFIG_GROUP)) {
            switch (event.getKey()) {
                case ImplingFinderConfig.HIDE_BUTTON:
                    if (config.hideButton())
                        clientToolbar.removeNavigation(button);
                    else
                        clientToolbar.addNavigation(button);
                    break;
                case ImplingFinderConfig.POST_ENDPOINT_KEYNAME:
                    implingPostEndpoint = config.implingFinderPostEndpointConfig();
                    break;
                case ImplingFinderConfig.GET_ENDPOINT_KEYNAME:
                    implingGetAnyEndpoint = config.implingFinderGetEndpointConfig();
                    break;
                case ImplingFinderConfig.IMPLING_SPAWN_NOTIFY:
                    wantSpawnNotifications = config.implingSpawnNotify();
            }
        }
    }

    @Subscribe
    public void onNpcSpawned(NpcSpawned npcSpawned) {
        final NPC npc = npcSpawned.getNpc();
        if (npc.getName() == null)
            return;

        if (!isImpling(npc.getName()))
            return;

        if (wantSpawnNotifications)
            notifier.notify("An impling just spawned!");

        ImplingFinderData imp = makeImp(npc);
        logger.error(imp.toString());
        implingsToUpload.add(imp);
    }

    private boolean isImpling(String name) {
        return ImplingFinderEnum.getIdByNameStrict(name) != RECENT_IMPLINGS_ID;
    }

    private boolean isImpling(int id) {
        return ImplingFinderEnum.findById(id) != null;
    }

    private ImplingFinderData makeImp(NPC n) {
        int world = client.getWorld();
        WorldArea area = n.getWorldArea();
        WorldPoint point = area.toWorldPoint();
        return ImplingFinderData.builder()
                                    .npcid(ImplingFinderEnum.getIdByNameStrict(n.getName()))
                                    .world(world)
                                    .xcoord(point.getX())
                                    .ycoord(point.getY())
                                    .plane(point.getPlane())
                                    .discoveredtime(Instant.now())
                                    .build();
        //logger.error("Making Imp:" + n.getName() + " " + datum.toString());
    }

    public BufferedImage getWorldMapImage() {
        return ImageUtil.loadImageResource(getClass(), "/icon.png");
    }

    public void addMapPoints(WorldPoint... points) {
        WorldPoint p = client.getLocalPlayer().getWorldLocation();
        if (p == null)
            return;

        if (mapPointSet) {
            mapPointSet = false;
            worldMapPointManager.removeIf(ImplingFinderWorldMapPoint.class::isInstance);
            return;
        }

        mapPointSet = true;
        worldMapPointManager.removeIf(ImplingFinderWorldMapPoint.class::isInstance);
        for (final WorldPoint point : points)
            worldMapPointManager.add(new ImplingFinderWorldMapPoint(point, this));
    }

    @Schedule(
            period = NPC_UPLOAD_TIME,
            unit = ChronoUnit.SECONDS,
            asynchronous = true
    )
    public void uploadFoundImplings() {
        // List is cleared by webManager after uploading
        if (implingsToUpload.size() > 0)
            webManager.postImplings();
    }

    @Schedule(
            period = PANEL_REFRESH_TIME,
            unit = ChronoUnit.SECONDS,
            asynchronous = true
    )
    public void checkPanelRequest() {
        long currTime = System.currentTimeMillis();
        if (panel.isClearRequested()) {
            remotelyFetchedImplings.clear();
            updatePanels();
            panel.setClearRequested(false);
        }

        // 2 second wait between requests
        if (panel.isFetchRequested() && currTime - lastGetCall >= GET_REQUEST_COOLDOWN_TIME) {
            remotelyFetchedImplings.clear();
            remotelyFetchedImplings = webManager.getData(panel.getSelectedButtons());
            panel.setFetchRequested(false);
            lastGetCall = System.currentTimeMillis();
            updatePanels();
        }
    }

    public void updatePanels() {
        Collections.sort(remotelyFetchedImplings, Collections.reverseOrder());
        SwingUtilities.invokeLater(() -> panel.populateNpcs(remotelyFetchedImplings));
    }
}

package com.hablapatabla.implingfinder.model;


import lombok.AllArgsConstructor;
import lombok.Getter;

import java.util.HashMap;
import java.util.Map;

@Getter
@AllArgsConstructor
public enum ImplingFinderEnum {
    MAGPIE(1642, "Magpie impling"),
    NINJA(1643, "Ninja impling"),
    CRYSTAL(8741, "Crystal impling"),
    DRAGON(1644, "Dragon impling"),
    LUCKY(7233, "Lucky impling"),
    RECENT(-1, "Recent");

    private int npcId;
    private String name;

    private static final Map<Integer, ImplingFinderEnum> map;
    static {
        map = new HashMap<>();
        for (ImplingFinderEnum e : ImplingFinderEnum.values())  {
            map.put(e.npcId, e);
        }
    }

    public static ImplingFinderEnum findById(int id) {
        return map.get(id);
    }

    public static int getIdByNameFuzzy(String name) {
        for (ImplingFinderEnum imp : values()) {
            if (imp.name.contains(name))
                return imp.npcId;
        }
        return -1;
    }

    public static int getIdByNameStrict(String name) {
        for (ImplingFinderEnum imp : values()) {
            if (name.contains(imp.name))
                return imp.npcId;
        }
        return -1;
    }
}

package com.hablapatabla.implingfinder.model;


import lombok.Getter;

import java.util.HashMap;
import java.util.Map;

@Getter
public enum ImplingFinderRegion {
    CITY_AL_KHARID("Al Kharid" , 13105, 13106),
    CITY_ARCEUUS_HOUSE("Arceuus" , 6458, 6459, 6460, 6714, 6715),
    CITY_ARDOUGNE("Ardougne" , 9779, 9780, 10035, 10036, 10291, 10292, 10547, 10548),
    CITY_BANDIT_CAMP("Bandit Camp" ,  12590),
    CITY_BARBARIAN_OUTPOST("Barbarian Outpost", 10039),
    CITY_BARBARIAN_VILLAGE("Barbarian Village" , 12341),
    CITY_BEDABIN_CAMP("Bedabin Camp" , 12591),
    CITY_BRIMHAVEN("Brimhaven" , 11057, 11058),
    CITY_BURGH_DE_ROTT("Burgh de Rott" , 13874, 13873, 14130, 14129),
    CITY_BURTHORPE("Burthorpe" , 11319, 11575),
    CITY_CANIFIS("Canifis" , 13878),
    CITY_CATHERBY("Catherby" , 11317, 11318, 11061),
    CITY_CORSAIR_COVE("Corsair Cove" , 10028, 10284),
    CITY_DARKMEYER("Darkmeyer", 14388, 14644),
    CITY_DORGESH_KAAN("Dorgesh-Kaan" ,10835, 10834),
    CITY_DRAYNOR("Draynor" , 12338, 12339),
    CITY_EDGEVILLE("Edgeville" , 12342),
    CITY_ENTRANA("Entrana" , 11060, 11316),
    CITY_ETCETERIA("Etceteria", 10300),
    CITY_FALADOR("Falador" , 11828, 11572, 11827, 12084),
    CITY_GUTANOTH("Gu'Tanoth" , 10031),
    CITY_GWENITH("Gwenith", 8757),
    CITY_HOSIDIUS_HOUSE("Hosidius" , 6710, 6711, 6712, 6455, 6456, 6966, 6967, 6968, 7221, 7223, 7224, 7478, 7479),
    CITY_JATIZSO("Jatizso" , 9531),
    CITY_KELDAGRIM("Keldagrim" , 11423, 11422, 11679, 11678),
    CITY_LANDS_END("Land's End", 5941),
    CITY_LLETYA("Lletya" , 9265, 11103),
    CITY_LOVAKENGJ_HOUSE("Lovakengj" , 5692, 5691, 5947, 6203, 6202, 5690, 5946),
    CITY_LUMBRIDGE("Lumbridge" , 12850),
    CITY_LUNAR_ISLE("Lunar Isle" , 8253, 8252, 8509, 8508),
    CITY_MARIM("Marim", 11051),
    CITY_MEIYERDITCH("Meiyerditch" , 14132, 14387, 14386, 14385),
    CITY_MENAPHOS("Menaphos", 12843),
    CITY_MISCELLANIA("Miscellania" , 10044),
    CITY_MOR_UL_REK("Mor Ul Rek" , 9808, 9807, 10064, 10063),
    CITY_MORTTON("Mort'ton" , 13875),
    CITY_MOS_LE_HARMLESS("Mos Le'Harmless" , 14637, 14638, 14639, 14894, 14895, 15151, 15406, 15407),
    CITY_MOUNT_KARUULM("Mount Karuulm",  5179, 4923, 5180),
    CITY_MOUNTAIN_CAMP("Mountain Camp", 11065),
    CITY_MYNYDD("Mynydd", 8501),
    CITY_NARDAH("Nardah" , 13613),
    CITY_NEITIZNOT("Neitiznot" , 9275),
    CITY_PISCARILIUS_HOUSE("Port Piscarilius" , 6969, 6971, 7227, 6970, 7225, 7226),
    CITY_PISCATORIS("Piscatoris" , 9273),
    CITY_POLLNIVNEACH("Pollnivneach" , 13358),
    CITY_PORT_KHAZARD("Port Khazard" , 10545),
    CITY_PORT_PHASMATYS("Port Phasmatys" ,  14646),
    CITY_PORT_SARIM("Port Sarim" , 12081, 12082),
    CITY_PRIFDDINAS("Prifddinas", 8499, 8500, 8755, 8756, 9011, 9012, 9013, 12894, 12895, 13150, 13151),
    CITY_RELLEKKA("Rellekka" ,  10297, 10553),
    CITY_RIMMINGTON("Rimmington" ,  11826, 11570),
    CITY_SEERS_VILLAGE("Seers' Village" ,  10806),
    CITY_SHAYZIEN_HOUSE("Shayzien" ,  5944, 5943, 6200, 6199, 5686, 5687, 5688, 5689, 5945),
    CITY_SHILO_VILLAGE("Shilo Village" ,  11310),
    CITY_SLEPE("Slepe",  14643, 14899, 14900, 14901),
    CITY_SOPHANEM("Sophanem" , 13099),
    CITY_TAI_BWO_WANNAI("Tai Bwo Wannai" , 11056, 11055),
    CITY_TAVERLEY("Taverley" , 11574, 11573),
    CITY_TREE_GNOME_STRONGHOLD("Gnome Stronghold" , 9525, 9526, 9782, 9781),
    CITY_TREE_GNOME_VILLAGE("Gnome Village" , 10033),
    CITY_TROLL_STRONGHOLD("Troll Stronghold" ,  11321, 11421),
    CITY_UZER("Uzer" , 13872),
    CITY_VARROCK("Varrock" ,  12596, 12597, 12852, 12853, 12854, 13108, 13109, 13110),
    CITY_VER_SINHAZA("Ver Sinhaza", 14642),
    CITY_VOID_OUTPOST("Void Knights' Outpost", 10537),
    CITY_WEISS("Weiss", 11325, 11581),
    CITY_WITCHHAVEN("Witchaven" ,  10803),
    CITY_YANILLE("Yanille" , 10288, 10032),
    CITY_ZANARIS("Zanaris" ,  9285, 9541, 9540, 9797),
    CITY_ZULANDRA("Zul-Andra" , 8495, 8751),

    REGION_ABYSSAL_AREA("Abyssal Area", 12108),
    REGION_ABYSSAL_NEXUS("Abyssal Nexus", 12106),
    REGION_AGILITY_PYRAMID("Agility Pyramid", 12105, 13356),
    REGION_AIR_ALTAR("Air Altar",  11339),
    REGION_AL_KHARID_MINE("Al Kharid Mine", 13107),
    REGION_APE_ATOLL("Ape Atoll" , 10794, 10795, 10974, 11050),
    REGION_ARANDAR("Arandar", 9266, 9267, 9523),
    REGION_ASGARNIA("Asgarnia",  11825, 11829, 11830, 12085, 12086),
    REGION_BATTLEFIELD("Battlefield", 10034),
    REGION_BATTLEFRONT("Battlefront", 5433, 5434),
    REGION_BLAST_MINE("Blast Mine", 5948),
    REGION_BODY_ALTAR("Body Altar", 10059),
    REGION_CHAOS_ALTAR("Chaos Altar", 9035),
    REGION_COSMIC_ALTAR("Cosmic Altar", 8523),
    REGION_COSMIC_ENTITYS_PLANE("Cosmic Entity's Plane", 8267),
    REGION_CRABCLAW_ISLE("Crabclaw Isle", 6965),
    REGION_CRAFTING_GUILD("Crafting Guild",  11571),
    REGION_CRANDOR("Crandor", 11314, 11315),
    REGION_CRASH_ISLAND("Crash Island", 11562),
    REGION_DARK_ALTAR("Dark Altar", 6716),
    REGION_DEATH_ALTAR("Death Altar", 8779),
    REGION_DEATH_PLATEAU("Death Plateau", 11320),
    REGION_DENSE_ESSENCE("Dense Essence Mine", 6972),
    REGION_DESERT_PLATEAU("Desert Plateau", 13361, 13617),
    REGION_DIGSITE("Digsite", 13365),
    REGION_DRAGONTOOTH("Dragontooth Island", 15159),
    REGION_DRAYNOR_MANOR("Draynor Manor", 12340),
    REGION_DRILL_SERGEANT("Drill Sergeant's Training Camp", 12619),
    REGION_EAGLES_PEAK("Eagles' Peak", 9270),
    REGION_EARTH_ALTAR("Earth Altar", 10571),
    REGION_ENCHANTED_VALLEY("Enchanted Valley", 12102),
    REGION_EVIL_TWIN("Evil Twin Crane Room", 7504),
    REGION_EXAM_CENTRE("Exam Centre", 13364),
    REGION_FALADOR_FARM("Falador Farm", 12083),
    REGION_FARMING_GUILD("Farming Guild", 4922),
    REGION_FELDIP_HILLS("Feldip Hills", 9773, 9774, 10029, 10030, 10285, 10286, 10287, 10542, 10543),
    REGION_FENKENSTRAIN("Fenkenstrain's Castle", 14135),
    REGION_FIGHT_ARENA("Fight Arena", 10289),
    REGION_FIRE_ALTAR("Fire Altar", 10315),
    REGION_FISHER_REALM("Fisher Realm", 10569),
    REGION_FISHING_GUILD("Fishing Guild", 10293),
    REGION_FISHING_PLATFORM("Fishing Platform", 11059),
    REGION_FORSAKEN_TOWER("The Forsaken Tower", 5435),
    REGION_FOSSIL_ISLAND("Fossil Island", 14650, 14651, 14652, 14906, 14907, 14908, 15162, 15163, 15164),
    REGION_FREAKY_FORESTER("Freaky Forester's Clearing",  10314),
    REGION_FREMENNIK("Fremennik Province", 10296, 10552, 10808, 10809, 10810, 10811, 11064),
    REGION_FREMENNIK_ISLES("Fremennik Isles",  9276, 9532),
    REGION_FROGLAND("Frogland", 9802),
    REGION_GALVEK_SHIPWRECKS("Galvek Shipwrecks", 6486, 6487, 6488, 6489, 6742, 6743, 6744, 6745),
    REGION_GORAKS_PLANE("Gorak's Plane", 12115),
    REGION_GRAND_EXCHANGE("Grand Exchange", 12598),
    REGION_GWD("God Wars Dungeon", 11578),
    REGION_HARMONY("Harmony Island", 15148),
    REGION_HAZELMERE("Hazelmere's Island", 10544),
    REGION_ICE_PATH("Ice Path", 11322, 11323),
    REGION_ICEBERG("Iceberg", 10558, 10559),
    REGION_ICYENE_GRAVEYARD("Icyene Graveyard", 14641, 14897, 14898),
    REGION_ISAFDAR("Isafdar", 8497, 8753, 8754, 9009, 9010),
    REGION_ISLAND_OF_STONE("Island of Stone", 9790),
    REGION_ISLE_OF_SOULS("Isle of Souls", 8236, 8237, 8238, 8491, 8492, 8494, 8747, 8750, 9003, 9004, 9006, 9260, 9261, 9262),
    REGION_JIGGIG("Jiggig" , 9775),
    REGION_KANDARIN("Kandarin", 9268, 9269, 9014, 9263, 9264, 9519, 9524, 9527, 9776, 9783, 10037, 10290, 10294, 10546, 10551, 10805, 11062),
    REGION_KARAMJA("Karamja" , 10801, 10802, 11054, 11311, 11312, 11313, 11566, 11567, 11568, 11569, 11822),
    REGION_KEBOS_LOWLANDS("Kebos Lowlands", 4665, 4666, 4667, 4921, 5178),
    REGION_KEBOS_SWAMP("Kebos Swamp", 4664, 4920, 5174, 5175, 5176, 5430, 5431),
    REGION_KHARAZI_JUNGLE("Kharazi Jungle", 11053, 11309, 11565, 11821),
    REGION_KHARIDIAN_DESERT("Kharidian Desert", 12587, 12844, 12845, 12846, 12847, 12848, 13100, 13101, 13102, 13103, 13104, 13357, 13359, 13360, 13614, 13615, 13616),
    REGION_KILLERWATT_PLANE("Killerwatt Plane", 10577),
    REGION_KOUREND("Great Kourend", 6201, 6457, 6713),
    REGION_KOUREND_WOODLAND("Kourend Woodland", 5942, 6197, 6453),
    REGION_LAW_ALTAR("Law Altar", 9803),
    REGION_LEGENDS_GUILD("Legends' Guild", 10804),
    REGION_LIGHTHOUSE("Lighthouse", 10040),
    REGION_LITHKREN("Lithkren", 14142, 14398),
    REGION_LUMBRIDGE_SWAMP("Lumbridge Swamp", 12593, 12849),
    REGION_MAX_ISLAND("Max Island", 11063),
    REGION_MCGRUBORS_WOOD("McGrubor's Wood", 10550),
    REGION_MIME_STAGE("Mime's Stage", 8010),
    REGION_MIND_ALTAR("Mind Altar", 11083),
    REGION_MISTHALIN("Misthalin", 12594, 12595, 12851),
    REGION_MOLCH("Molch", 5177),
    REGION_MOLCH_ISLAND("Molch Island", 5432),
    REGION_MORYTANIA("Morytania", 13619, 13620, 13621, 13622, 13876, 13877, 13879, 14133, 14134, 14389, 14390, 14391, 14645, 14647),
    REGION_MOUNT_QUIDAMORTEM("Mount Quidamortem", 4662, 4663, 4918, 4919),
    REGION_MR_MORDAUTS_CLASSROOM("Mr. Mordaut's Classroom", 7502),
    REGION_MUDSKIPPER("Mudskipper Point", 11824),
    REGION_MYSTERIOUS_OLD_MAN_MAZE("Mysterious Old Man's Maze", 11590, 11591, 11846, 11847),
    REGION_MYTHS_GUILD("Myths' Guild", 9772),
    REGION_NATURE_ALTAR("Nature Altar", 9547),
    REGION_NORTHERN_TUNDRAS("Northern Tundras", 6204, 6205, 6717),
    REGION_OBSERVATORY("Observatory", 9777),
    REGION_ODD_ONE_OUT("Odd One Out", 7754),
    REGION_OTTOS_GROTTO("Otto's Grotto", 10038),
    REGION_OURANIA_HUNTER("Ourania Hunter Area", 9778),
    REGION_PIRATES_COVE("Pirates' Cove", 8763),
    REGION_PISCATORIS_HUNTER_AREA("Piscatoris Hunter Area", 9015, 9016, 9271, 9272, 9528),
    REGION_POH("Player Owned House",7513, 7514, 7769, 7770),
    REGION_POISON_WASTE("Poison Waste", 8752, 9008),
    REGION_PORT_TYRAS("Port Tyras", 8496),
    REGION_PURO_PURO("Puro Puro", 10307),
    REGION_QUARRY("Quarry", 12589),
    REGION_RANGING_GUILD("Ranging Guild", 10549),
    REGION_RATCATCHERS_MANSION("Ratcatchers Mansion", 11343),
    REGION_RUINS_OF_UNKAH("Ruins of Unkah",  12588),
    REGION_RUNE_ESSENCE_MINE("Rune Essence Mine", 11595),
    // The Beekeper, Pinball, and Gravedigger randoms share a region (7758), and although they are not technically ScapeRune, that name is most commonly
    // associated with random events, so those three have been denoted ScapeRune to avoid leaving multiple random event regions without an assigned name.
    REGION_SCAPERUNE("ScapeRune", 10058, 7758, 8261),
    REGION_SEA_SPIRIT_DOCK("Sea Spirit Dock", 12332),
    REGION_SHIP_YARD("Ship Yard",11823),
    REGION_SILVAREA("Silvarea",13366),
    REGION_SINCLAR_MANSION("Sinclair Mansion", 10807),
    REGION_SLAYER_TOWER("Slayer Tower",13623, 13723),
    REGION_SOUL_ALTAR("Soul Altar",7228),
    REGION_TROLL_ARENA("Troll Arena",11576),
    REGION_TROLLHEIM("Trollheim",11577),
    REGION_TROLLWEISS_MTN("Trollweiss Mountain", 11066, 11067, 11068),
    REGION_TUTORIAL_ISLAND("Tutorial Island", 12079, 12080, 12335, 12336, 12436, 12592),
    REGION_UNDERWATER("Underwater", 15008, 15264),
    REGION_WATER_ALTAR("Water Altar", 10827),
    REGION_WATERBIRTH_ISLAND("Waterbirth Island", 10042),
    REGION_WINTERTODT_CAMP("Wintertodt Camp", 6461),
    REGION_WIZARDS_TOWER("Wizards' Tower", 12337),
    REGION_WOODCUTTING_GUILD("Woodcutting Guild", 6198, 6454),
    REGION_WRATH_ALTAR("Wrath Altar", 9291);

    private String name;

    private int[] regionIds;

    private static final Map<Integer, ImplingFinderRegion> map;
    static {
        map = new HashMap<Integer, ImplingFinderRegion>();
        for (ImplingFinderRegion e : ImplingFinderRegion.values())  {
            if (e.getRegionIds() == null)
                continue;
            for (int region : e.getRegionIds()) {
                map.put(region, e);
            }
        }
    }

    ImplingFinderRegion(String name, int... ids) {
        this.name = name;
        this.regionIds = ids;
    }

    public static ImplingFinderRegion fromRegion(final int regionId)
    {
        return map.get(regionId);
    }

}

package com.hablapatabla.implingfinder.model;

public enum ImplingFinderConfigMessage {
    PLEASE,
    CONSIDER,
    USING,
    HIDE,
    BUTTON,
    INSTEAD,
    OF,
    UNINSTALLING,
    TO,
    KEEP,
    HELPING,
    OTHERS
}

package com.hablapatabla.implingfinder.model;

import com.google.gson.annotations.SerializedName;
import lombok.Builder;
import lombok.Getter;
import lombok.Value;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.Instant;

@Value
@Builder
public class ImplingFinderData implements Comparable {
    @Getter
    @SerializedName("npcid")
    private int npcid;

    @Getter
    @SerializedName("world")
    private int world;

    @Getter
    @SerializedName("xcoord")
    private int xcoord;

    @Getter
    @SerializedName("ycoord")
    private int ycoord;

    @Getter
    @SerializedName("plane")
    private int plane;

    @Getter
    @SerializedName("discoveredtime")
    private Instant discoveredtime;

    private static Logger logger = LoggerFactory.getLogger(ImplingFinderData.class);

    @Override
    public String toString() {
        return "" + npcid + "  " + world + "  " + xcoord + "  " + ycoord + "  " + plane + "  " + discoveredtime.toString();
    }

    @Override
    public int compareTo(Object o) {
        ImplingFinderData other = (ImplingFinderData) o;
        return this.discoveredtime.compareTo(other.getDiscoveredtime());
    }
}

package com.hablapatabla.implingfinder.model;

import com.hablapatabla.implingfinder.ImplingFinderPlugin;
import net.runelite.api.Point;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.worldmap.WorldMapPoint;

import java.awt.*;
import java.awt.image.BufferedImage;

public class ImplingFinderWorldMapPoint extends WorldMapPoint
{
    private final ImplingFinderPlugin plugin;
    private final BufferedImage worldImage;
    private final Point worldImagePoint;

    public ImplingFinderWorldMapPoint(final WorldPoint worldPoint, ImplingFinderPlugin plugin)
    {
        super(worldPoint, null);

        worldImage = new BufferedImage(plugin.getWorldMapImage().getWidth(), plugin.getWorldMapImage().getHeight(), BufferedImage.TYPE_INT_ARGB);
        Graphics graphics = worldImage.getGraphics();
        graphics.drawImage(plugin.getWorldMapImage(), 0, 0, null);
        graphics.drawImage(plugin.getWorldMapImage(), 0, 0, null);
        worldImagePoint = new Point(
                worldImage.getWidth(),
                worldImage.getHeight());

        this.plugin = plugin;
        this.setName("Impling");
        this.setSnapToEdge(true);
        this.setJumpOnClick(true);
        this.setImage(worldImage);
        this.setImagePoint(worldImagePoint);
    }

    @Override
    public void onEdgeSnap() {
        this.setImage(plugin.getWorldMapImage());
        this.setImagePoint(null);
    }

    @Override
    public void onEdgeUnsnap() {
        this.setImage(worldImage);
        this.setImagePoint(worldImagePoint);
    }
}

package com.hablapatabla.implingfinder;

import com.hablapatabla.implingfinder.model.ImplingFinderConfigMessage;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(ImplingFinderPlugin.CONFIG_GROUP)
public interface ImplingFinderConfig extends Config
{
    String HIDE_BUTTON = "hideButton";
    String POST_ENDPOINT_KEYNAME = "post endpoint";
    String GET_ENDPOINT_KEYNAME = "get endpoint";
    String SPLASH_SEEN = "splashSeen";
    String IMPLING_SPAWN_NOTIFY = "spawnNotify";

    @ConfigItem(
            keyName = POST_ENDPOINT_KEYNAME,
            position = 0,
            name = "POST endpoint",
            description = "Web endpoint to post star data to"
    )
    default String implingFinderPostEndpointConfig()
    {
        return "https://puos0bfgxc2lno5-implingdb.adb.us-phoenix-1.oraclecloudapps.com/ords/impling/implingdev/dev";
    }

    @ConfigItem(
            keyName = GET_ENDPOINT_KEYNAME,
            position = 1,
            name = "GET endpoint",
            description = "Web endpoint to get star data from, only \"Any\" option will work"
    )
    default String implingFinderGetEndpointConfig()
    {
        return "https://puos0bfgxc2lno5-implingdb.adb.us-phoenix-1.oraclecloudapps.com/ords/impling/implingdev/dev";
    }

    @ConfigItem(
            position = 2,
            keyName = "showImpType",
            name = "I'm a cool kid",
            description = "Only cool kids leave this checked!"
    )
    default boolean showImpType() {
        return false;
    }

    @ConfigItem(
            position = 3,
            keyName = IMPLING_SPAWN_NOTIFY,
            name = "Spawn Notification",
            description = "Notifies you if an impling spawns nearby"
    )
    default boolean implingSpawnNotify() { return false; }


    @ConfigItem(
            position = 4,
            keyName = HIDE_BUTTON,
            name = "Hide Button",
            description = "Hides the button from your Runelite sidebar"
    )
    default boolean hideButton() { return false; }

    @ConfigItem(
            position = 5,
            keyName = "uninstallMessage",
            name = "Secret message!",
            description = "There's a secret message in this dropdown"
    )
    default ImplingFinderConfigMessage colorBlindMode()
    {
        return ImplingFinderConfigMessage.PLEASE;
    }

    @ConfigItem(
            position = 6,
            keyName = "splashSeen",
            name = "I've seen the splash page",
            description = "This plugin has been opened before"
    )
    default boolean beenOpened() { return false; }

    @ConfigItem(
            keyName = "issue",
            position = 7,
            name = "Got an issue?",
            description = "Go to this link if you have an issue or want to request a feature. I probably won't do it, but it's worth a shot!"
    )
    default String issue()
    {
        return "https://github.com/Hablapatabla/ImplingFinder/issues/new";
    }
}
package com.hablapatabla.implingfinder.ui;

import java.awt.BorderLayout;
import java.awt.Color;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.components.shadowlabel.JShadowedLabel;

/**
 * A component to display an error/info message (to be used on a plugin panel)
 * Example uses are: no ge search results found, no ge offers found.
 */
public class ImplingFinderSplashPanel extends JPanel
{
    private final JLabel noResultsTitle = new JShadowedLabel();
    private final JLabel noResultsDescription = new JShadowedLabel();

    public ImplingFinderSplashPanel()
    {
        setOpaque(false);
        setBorder(new EmptyBorder(50, 10, 0, 10));
        setLayout(new BorderLayout());

        noResultsTitle.setForeground(Color.WHITE);
        noResultsTitle.setHorizontalAlignment(SwingConstants.CENTER);

        noResultsDescription.setFont(FontManager.getRunescapeFont());
        noResultsDescription.setForeground(Color.GRAY);
        noResultsDescription.setHorizontalAlignment(SwingConstants.CENTER);

        add(noResultsTitle, BorderLayout.NORTH);
        add(noResultsDescription, BorderLayout.CENTER);

        setVisible(false);
    }

    /**
     * Changes the content of the panel to the given parameters.
     * The description has to be wrapped in html so that its text can be wrapped.
     */
    public void setContent(String title, String description)
    {
        noResultsTitle.setText(title);
        noResultsDescription.setText("<html><body style = 'text-align:center'>" + description + "</body></html>");
        setVisible(true);
    }
}
package com.hablapatabla.implingfinder.ui;

import lombok.Getter;
import lombok.Setter;
import net.runelite.client.ui.ColorScheme;

import javax.swing.*;
import javax.swing.border.EtchedBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

@SuppressWarnings("serial")
class ImplingFinderButton extends JButton {

    @Getter
    @Setter
    private boolean selected;

    @Getter
    @Setter
    private String name;

    ImplingFinderButton(Image i, String name) {
        super.setContentAreaFilled(false);
        setBackground(ColorScheme.DARKER_GRAY_COLOR);
        setFocusPainted(false);
        this.setRequestFocusEnabled(false);
        this.selected = false;
        this.name = name;
        this.setIcon(new ImageIcon(i));
        setBorder(new EtchedBorder());
    }

    @Override
    public void paint(Graphics g) {
        Color oldFg = getForeground();
        Color newFg = oldFg;
        ButtonModel mod = getModel();

        if (mod.isPressed()) {
            g.setColor(ColorScheme.DARK_GRAY_COLOR);
        } else if (mod.isRollover())
            g.setColor(ColorScheme.DARKER_GRAY_HOVER_COLOR);
        else {
            if (selected)
                g.setColor(ColorScheme.DARKER_GRAY_COLOR);
            else
                g.setColor(ColorScheme.DARK_GRAY_COLOR);
        }

        g.fillRect(0, 0, getWidth(), getHeight());
        setForeground(newFg);
        super.paintComponent(g);
        setForeground(oldFg);
    }
}

package com.hablapatabla.implingfinder.ui;

import com.hablapatabla.implingfinder.model.ImplingFinderData;
import com.hablapatabla.implingfinder.model.ImplingFinderEnum;
import com.hablapatabla.implingfinder.ImplingFinderPlugin;
import com.hablapatabla.implingfinder.model.ImplingFinderRegion;
import net.runelite.api.ItemID;
import net.runelite.api.NpcID;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.overlay.worldmap.WorldMapPointManager;
import net.runelite.client.util.AsyncBufferedImage;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Inject;
import javax.swing.*;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.time.Instant;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class ImplingFinderImpPanel extends JPanel {
    private static final Dimension ICON_SIZE = new Dimension(32, 32);

    @Inject
    private WorldMapPointManager worldMapPointManager;

    // npc id to ItemID
    private static Map<Integer, Integer> thumbnails = new HashMap<Integer, Integer>() {{
        put(NpcID.MAGPIE_IMPLING, ItemID.MAGPIE_IMPLING_JAR);
        put(NpcID.NINJA_IMPLING, ItemID.NINJA_IMPLING_JAR);
        put(NpcID.CRYSTAL_IMPLING, ItemID.CRYSTAL_IMPLING_JAR);
        put(NpcID.DRAGON_IMPLING, ItemID.DRAGON_IMPLING_JAR);
        put(NpcID.LUCKY_IMPLING, ItemID.LUCKY_IMPLING_JAR);
    }};

    private Logger logger = LoggerFactory.getLogger(ImplingFinderImpPanel.class);
    private List<JPanel> panels = new ArrayList<>();

    protected ImplingFinderPlugin plugin;

    public static int getItemIdFromNpcId(int id) {
        return thumbnails.get(id);
    }

    ImplingFinderImpPanel(ItemManager manager, ImplingFinderData data, Integer defaultId, ImplingFinderPlugin plugin) {
        Color background = getBackground();
        BorderLayout layout = new BorderLayout();
        layout.setHgap(5);
        setLayout(layout);
        setToolTipText(ImplingFinderEnum.findById(data.getNpcid()).getName());
        setBackground(ColorScheme.DARKER_GRAY_COLOR);
        panels.add(this);
        setBorder(new EmptyBorder(7, 0, 0, 0));


        WorldPoint implingWorldPoint = new WorldPoint(data.getXcoord(), data.getYcoord(), data.getPlane());

        MouseAdapter itemPanelMouseListener = new MouseAdapter()
        {
            @Override
            public void mouseEntered(MouseEvent e) {
                for (JPanel p : panels)
                    matchComponentBackground(p, ColorScheme.DARK_GRAY_HOVER_COLOR);
                setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                for (JPanel p : panels)
                    matchComponentBackground(p, ColorScheme.DARKER_GRAY_COLOR);
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                plugin.addMapPoints(implingWorldPoint);
            }
        };

        addMouseListener(itemPanelMouseListener);

        final JLabel itemIcon = new JLabel();
        itemIcon.setPreferredSize(ICON_SIZE);
        Integer id = thumbnails.get(data.getNpcid());
        AsyncBufferedImage icon;
        if (id != null)
            manager.getImage(id).addTo(itemIcon);
        else
            manager.getImage(defaultId).addTo(itemIcon);

        JPanel iconPanel = new JPanel();
        panels.add(iconPanel);
        iconPanel.add(itemIcon);
        add(iconPanel, BorderLayout.LINE_START);


        JPanel rightPanel = new JPanel(new GridLayout(3, 1));
        panels.add(rightPanel);
        rightPanel.setBackground(background);

        JLabel itemName = new JLabel();
        itemName.setForeground(Color.WHITE);
        itemName.setMaximumSize(new Dimension(0, 0));        // to limit the label's size for
        itemName.setPreferredSize(new Dimension(0, 0));    // items with longer names
        itemName.setText(ImplingFinderEnum.findById(data.getNpcid()).getName());
        rightPanel.add(itemName);

        JPanel middleTextPanel = new JPanel(new BorderLayout());
        middleTextPanel.setBackground(background);
        panels.add(middleTextPanel);

        JLabel middleLeftTextLabel = new JLabel();
        middleLeftTextLabel.setForeground(ColorScheme.GRAND_EXCHANGE_PRICE);

        middleLeftTextLabel.setText("World: " + data.getWorld());
        middleTextPanel.add(middleLeftTextLabel, BorderLayout.WEST);

        JLabel middleRightTextLabel = new JLabel();
        middleRightTextLabel.setForeground(ColorScheme.GRAND_EXCHANGE_ALCH);
        String day;
        long daysBetween = ChronoUnit.DAYS.between(data.getDiscoveredtime(), Instant.now());
        if (daysBetween == 0)
            day = "Today";
        else if (daysBetween == 1)
            day = "Yesterday";
        else
            day = daysBetween + " days ago";

        middleRightTextLabel.setText(day);
        middleTextPanel.add(middleRightTextLabel, BorderLayout.EAST);
        rightPanel.add(middleTextPanel);

        JPanel bottomTextRowPanel = new JPanel(new BorderLayout());
        bottomTextRowPanel.setBackground(background);
        panels.add(bottomTextRowPanel);

        JLabel bottomLeftTextLabel = new JLabel();
        String foundTime = data.getDiscoveredtime().atZone(ZoneId.systemDefault())
                        .format(DateTimeFormatter.ofLocalizedTime(FormatStyle.LONG));
        bottomLeftTextLabel.setText(foundTime);
        bottomLeftTextLabel.setForeground(ColorScheme.GRAND_EXCHANGE_ALCH);
        bottomTextRowPanel.add(bottomLeftTextLabel, BorderLayout.WEST);

        final int playerRegionId = implingWorldPoint.getRegionID();
        String location;
        if (ImplingFinderRegion.fromRegion(playerRegionId) != null)
            location = ImplingFinderRegion.fromRegion(playerRegionId).getName();
        else
            location = "Unknown";
        location = StringUtils.abbreviate(location, 12);

        JLabel bottomRightTextLabel = new JLabel();
        bottomRightTextLabel.setText(location);
        bottomRightTextLabel.setForeground(ColorScheme.GRAND_EXCHANGE_LIMIT);
        bottomRightTextLabel.setBorder(new CompoundBorder(bottomRightTextLabel.getBorder(), new EmptyBorder(0, 0, 0, 7)));
        bottomTextRowPanel.add(bottomRightTextLabel, BorderLayout.EAST);

        rightPanel.add(bottomTextRowPanel);

        for (JPanel p : panels)
            matchComponentBackground(p, ColorScheme.DARKER_GRAY_COLOR);

        add(rightPanel, BorderLayout.CENTER);
    }

    private void matchComponentBackground(JPanel panel, Color color) {
        panel.setBackground(color);
        for (Component c : panel.getComponents()) {
            c.setBackground(color);
        }
    }
}
package com.hablapatabla.implingfinder.ui;

import com.hablapatabla.implingfinder.*;
import com.hablapatabla.implingfinder.model.ImplingFinderData;
import com.hablapatabla.implingfinder.model.ImplingFinderEnum;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.*;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.PluginErrorPanel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Inject;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

public class ImplingFinderPanel extends PluginPanel {
    private static final String RESULTS_PANEL = "RESULTS_PANEL";
    private static final String ERROR_PANEL = "ERROR_PANEL";
    private static final String SPLASH_PANEL = "SPLASH_PANEL";
    private static String[] TargetableImplings = {"Recent", "Magpie", "Ninja", "Crystal", "Dragon", "Lucky"};

    private GridBagConstraints c = new GridBagConstraints();
    private final CardLayout cardLayout = new CardLayout();

    private JPanel impListPanel = new JPanel();
    private JPanel implingListContainer = new JPanel(cardLayout);
    private final PluginErrorPanel errorPanel = new PluginErrorPanel();
    private final ImplingFinderSplashPanel splashPanel = new ImplingFinderSplashPanel();


    private Logger logger = LoggerFactory.getLogger(ImplingFinderPanel.class);
    protected ImplingFinderPlugin plugin;

    @Getter
    @Setter
    private boolean clearRequested = false;

    @Getter
    @Setter
    private boolean fetchRequested = false;

    @Getter
    @Setter
    private boolean fetchTargetedRequested = false;


    protected List<ImplingFinderButton> buttonList = new ArrayList<ImplingFinderButton>();

    @Getter
    private boolean splashRequested = false;

    private ItemManager itemManager;

    @Inject
    private Client client;

    @Inject
    protected ImplingFinderPanel(ImplingFinderPlugin plugin, ItemManager itemManager) {
        this.plugin = plugin;
        this.itemManager = itemManager;
        implingFinderPanelHelper(plugin);
    }

    private void implingFinderPanelHelper(ImplingFinderPlugin plugin) {
        setLayout(new BorderLayout());
        setBackground(ColorScheme.DARK_GRAY_COLOR);

        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 1;
        c.gridx = 0;
        c.anchor = GridBagConstraints.PAGE_START;

        /*
         * Mockup of overall Panel
         *
         * {
         *     [(clear)        (Impling Finder)]  - clearButton, title
         *  {
         *     [(Recent)   (Magpie)  (Ninja)
         *     (Crystal)  (Dragon)  (Lucky)   ]  - implingSelections (2x3 GridLayout)
         *     [           (Fetch)            ]  - fetchButton
         *  } - fetchPanel
         * } - topContainer
         *
         * {
         *        [ IMPLING LIST ]
         * } - container
         *
         */

        /*
         * Subpanel for all buttons and info at top of the overall Impling Finder panel
         */
        JPanel topContainer = new JPanel();
        topContainer.setLayout(new BorderLayout());
        topContainer.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0,
                                                            ColorScheme.DARKER_GRAY_HOVER_COLOR));

        /*
         * Subpanel for title and clear button in top row of topContainer panel
         */
        JPanel titlePanel = new JPanel();
        titlePanel.setBorder(new EmptyBorder(10, 0, 10, 0));
        titlePanel.setLayout(new BorderLayout());

        JLabel title = new JLabel();
        title.setText("Impling Finder");
        title.setForeground(Color.WHITE);
        titlePanel.add(title, BorderLayout.EAST);

        JButton clearButton = new JButton("Clear");
        clearButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                clearRequested = true;
            }
        });
        clearButton.setForeground(Color.WHITE);
        clearButton.setRequestFocusEnabled(false);
        titlePanel.add(clearButton, BorderLayout.WEST);

        topContainer.add(titlePanel, BorderLayout.NORTH);

        /*
         * Lower fetch panel, contains impling buttons and fetch button
         */

        JPanel fetchPanel = new JPanel();
        fetchPanel.setLayout(new BorderLayout());
        fetchPanel.setBorder(new EmptyBorder(0, 0, 5, 0));

        JPanel implingSelections = new JPanel(new GridLayout(2, 3));
        implingSelections.setBorder(new EmptyBorder(0, -1, 3, -1));
        populateButtonList();
        for (JButton p : buttonList)
            implingSelections.add(p);
        fetchPanel.add(implingSelections, BorderLayout.NORTH);

        JButton fetchButton = new JButton("Fetch");
        fetchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                fetchRequested = true;
            }
        });
        fetchButton.setForeground(Color.WHITE);
        fetchButton.setRequestFocusEnabled(false);
        fetchPanel.add(fetchButton, BorderLayout.SOUTH);

        topContainer.add(fetchPanel, BorderLayout.SOUTH);

        this.add(topContainer, BorderLayout.NORTH);

        /*
         * End topContainer, add impling list
         */

        impListPanel.setLayout(new GridBagLayout());
        impListPanel.setBackground(ColorScheme.DARK_GRAY_COLOR);

        JPanel impsWrapper = new JPanel(new BorderLayout());
        impsWrapper.setBackground(ColorScheme.DARK_GRAY_COLOR);
        impsWrapper.add(impListPanel, BorderLayout.NORTH);

        JPanel errorWrapper = new JPanel(new BorderLayout());
        errorWrapper.setBackground(ColorScheme.DARK_GRAY_COLOR);
        errorPanel.setContent("Nothing to display    :(",
                "Either I have no implings to show you, or an error has occurred.");
        errorWrapper.add(errorPanel, BorderLayout.NORTH);


        JPanel splashWrapper = new JPanel(new BorderLayout());
        splashWrapper.setBackground(ColorScheme.DARK_GRAY_COLOR);
        splashPanel.setContent("Welcome to Impling Finder!",
                " This plugin watches for implings around you, and uploads the locations of implings of" +
                        " Magpie quality or higher to an external server. Try clicking on a found impling to see its" +
                        " precise location on your worldmap. Make sure to go to the config and check 'Splash Seen' so" +
                        " that you don't see this splash page again. Uploads are only done when implings are actually" +
                        " found, so this plugin has virtually 0 network usage. Please raise an issue in the github repo" +
                        " if you find one, or would like to request a feature! This plugin crowdsources data, so the" +
                        " more people using it, the better. Tell your friends to install!");
        splashWrapper.add(splashPanel, BorderLayout.NORTH);

        JButton getStartedButton = new JButton("Let's get started");
        getStartedButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                continuePastSplash();
            }
        });
        splashWrapper.add(getStartedButton, BorderLayout.SOUTH);

        implingListContainer.add(splashWrapper, SPLASH_PANEL);
        implingListContainer.add(impsWrapper, RESULTS_PANEL);
        implingListContainer.add(errorWrapper, ERROR_PANEL);

        cardLayout.show(implingListContainer, SPLASH_PANEL);

        this.add(implingListContainer, BorderLayout.CENTER);
    }

    public void notifyButtonSelected(String s) {
        for (ImplingFinderButton ib : buttonList) {
            if ((s.equals("Recent") && !ib.getName().equals("Recent")) ||
                    (!s.equals("Recent") && ib.getName().equals("Recent")))
                ib.setSelected(false);
            ib.paint(ib.getGraphics());
        }
    }

    public List<Integer> getSelectedButtons() {
        List<Integer> l = new ArrayList<>();
        for (ImplingFinderButton ib : buttonList) {
            if (ib.isSelected())
                l.add(ImplingFinderEnum.getIdByNameFuzzy(ib.getName()));
        }
        return l;
    }

    private void populateButtonList() {
        buttonList.clear();
        for (String s : TargetableImplings) {
            Image i;
            int id = ImplingFinderEnum.getIdByNameFuzzy(s);
            if (id == ImplingFinderPlugin.RECENT_IMPLINGS_ID)
                i = itemManager.getImage(ItemID.TEAK_CLOCK);
            else {
                int itemid = ImplingFinderImpPanel.getItemIdFromNpcId(id);
                i = itemManager.getImage(itemid);
            }
            ImplingFinderButton b = new ImplingFinderButton(i, s);

            b.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    b.setSelected(!b.isSelected());
                    notifyButtonSelected(b.getName());
                }
            });

            // Always start with Recent selected
            if (id == ImplingFinderPlugin.RECENT_IMPLINGS_ID)
                b.setSelected(true);
            buttonList.add(b);
        }
    }

    public void showSplash() {
        cardLayout.show(implingListContainer, SPLASH_PANEL);
    }

    public void continuePastSplash() {
        cardLayout.show(implingListContainer, ERROR_PANEL);
    }

    public void populateNpcs(List<ImplingFinderData> npcs) {
        c.gridy = 0;
        c.weighty = 0;

        impListPanel.removeAll();

        if (npcs.size() == 0) {
            cardLayout.show(implingListContainer, ERROR_PANEL);
            return;
        }
        cardLayout.show(implingListContainer, RESULTS_PANEL);

        List<JPanel> implings = new ArrayList<>();
        int defaultThumbnailId = ItemID.BABY_MOLERAT;
        for (ImplingFinderData npc : npcs) {
            JPanel marginWrapper = new JPanel(new BorderLayout());
            marginWrapper.setBackground(ColorScheme.DARK_GRAY_COLOR);
            // Magic numbers yikes
            marginWrapper.setBorder(new EmptyBorder(5, 0 ,0 ,-4));

            ImplingFinderImpPanel imp = new ImplingFinderImpPanel(itemManager, npc, defaultThumbnailId, plugin);
            imp.setAutoscrolls(true);
            imp.setBorder(new EmptyBorder(3, 0 ,0 ,7));
            marginWrapper.add(imp);

            implings.add(marginWrapper);
        }

        for (JPanel p : implings) {
            impListPanel.add(p, c);
            c.gridy += 1;
        }

        repaint();
        revalidate();
    }
}

