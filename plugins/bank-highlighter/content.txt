package com.bankhighlighter;

import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import javax.inject.Inject;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.WidgetItemOverlay;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.ImageUtil;

class BankHighlighterOverlay extends WidgetItemOverlay
{
	private final ItemManager itemManager;
	private final BankHighlighterPlugin plugin;
	private final BankHighlighterConfig config;
	private final Cache<Long, Image> fillCache;
	private final Cache<Integer, BankHighlighterTag> tagCache;
	private final BankHighlighterTag NONE = new BankHighlighterTag();

	@Inject
	private BankHighlighterOverlay(ItemManager itemManager, BankHighlighterPlugin plugin, BankHighlighterConfig config)
	{
		this.itemManager = itemManager;
		this.plugin = plugin;
		this.config = config;
		showOnBank();
		showOnInterfaces(
			InterfaceID.BANK_INVENTORY
				);
		fillCache = CacheBuilder.newBuilder()
			.concurrencyLevel(1)
			.maximumSize(32)
			.build();
		tagCache = CacheBuilder.newBuilder()
			.concurrencyLevel(1)
			.maximumSize(39)
			.build();
	}

	@Override
	public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem widgetItem)
	{
		final BankHighlighterTag tag = getTag(itemId);
		if (tag == null || tag.color == null)
		{
			return;
		}

		final Color color = tag.color;

		Rectangle bounds = widgetItem.getCanvasBounds();
		if (config.showTagOutline())
		{
			final BufferedImage outline = itemManager.getItemOutline(itemId, widgetItem.getQuantity(), color);
			graphics.drawImage(outline, (int) bounds.getX(), (int) bounds.getY(), null);
		}

		if (config.showTagFill())
		{
			final Image image = getFillImage(color, widgetItem.getId(), widgetItem.getQuantity());
			graphics.drawImage(image, (int) bounds.getX(), (int) bounds.getY(), null);
		}

		if (config.showTagUnderline())
		{
			int heightOffSet = (int) bounds.getY() + (int) bounds.getHeight() + 2;
			graphics.setColor(color);
			graphics.drawLine((int) bounds.getX(), heightOffSet, (int) bounds.getX() + (int) bounds.getWidth(), heightOffSet);
		}
	}

	private BankHighlighterTag getTag(int itemId)
	{
		BankHighlighterTag tag = tagCache.getIfPresent(itemId);
		if (tag == null)
		{
			tag = plugin.getTag(itemId);
			if (tag == null)
			{
				tagCache.put(itemId, NONE);
				return null;
			}

			if (tag == NONE)
			{
				return null;
			}

			tagCache.put(itemId, tag);
		}
		return tag;
	}

	private Image getFillImage(Color color, int itemId, int qty)
	{
		long key = (((long) itemId) << 32) | qty;
		Image image = fillCache.getIfPresent(key);
		if (image == null)
		{
			final Color fillColor = ColorUtil.colorWithAlpha(color, config.fillOpacity());
			image = ImageUtil.fillImage(itemManager.getImage(itemId, qty, false), fillColor);
			fillCache.put(key, image);
		}
		return image;
	}

	void invalidateCache()
	{
		fillCache.invalidateAll();
		tagCache.invalidateAll();
	}
}

package com.bankhighlighter;

import java.awt.Color;
import lombok.Data;

@Data
class BankHighlighterTag
{
	Color color;
}

package com.bankhighlighter;

import com.google.gson.Gson;
import com.google.inject.Provides;
import java.applet.Applet;
import java.awt.Color;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.inject.Inject;
import javax.swing.SwingUtilities;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import static net.runelite.api.InventoryID.BANK;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.KeyCode;
import net.runelite.api.Menu;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.events.MenuOpened;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetUtil;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.components.colorpicker.ColorPickerManager;
import net.runelite.client.ui.components.colorpicker.RuneliteColorPicker;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ColorUtil;

@PluginDescriptor(
	name = "Bank Highlighter",
	description = "About\n" +
			"Lets you color-code items in your bank or inventory (while the bank is open) for easier visibility. This feature is particularly useful for organizing skill/combat gear sets and quickly finding the items you need. Built from the original \"Inventory Tags,\" coding.",
	tags = {"highlight", "items", "overlay", "tagging", "bank"}
)
@Slf4j
public class BankHighlighterPlugin extends Plugin
{
	private static final String TAG_KEY_PREFIX = "tag_";

	@Inject
	private Client client;

	@Inject
	private ConfigManager configManager;

	@Inject
	private BankHighlighterOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private Gson gson;

	@Inject
	private ColorPickerManager colorPickerManager;

	@Provides
	BankHighlighterConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(BankHighlighterConfig.class);
	}

	@Override
	protected void startUp()
	{
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
	}

	BankHighlighterTag getTag(int itemId)
	{
		String tag = configManager.getConfiguration(BankHighlighterConfig.GROUP, TAG_KEY_PREFIX + itemId);
		if (tag == null || tag.isEmpty())
		{
			return null;
		}

		return gson.fromJson(tag, BankHighlighterTag.class);
	}

	void setTag(int itemId, BankHighlighterTag tag)
	{
		String json = gson.toJson(tag);
		configManager.setConfiguration(BankHighlighterConfig.GROUP, TAG_KEY_PREFIX + itemId, json);
		overlay.invalidateCache();
	}

	void unsetTag(int itemId)
	{
		configManager.unsetConfiguration(BankHighlighterConfig.GROUP, TAG_KEY_PREFIX + itemId);
		overlay.invalidateCache();
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged)
	{
		if (configChanged.getGroup().equals(BankHighlighterConfig.GROUP))
		{
			overlay.invalidateCache();
		}
	}

	@Subscribe
	public void onMenuOpened(final MenuOpened event)
	{
		if (!client.isKeyPressed(KeyCode.KC_SHIFT))
		{
			return;
		}

		final MenuEntry[] entries = event.getMenuEntries();

		for (int idx = entries.length - 1; idx >= 0; --idx)
		{
			final MenuEntry entry = entries[idx];
			final Widget w = entry.getWidget();
			if (w == null)
			{
				continue;
			}

			final int iface = WidgetUtil.componentToInterface(w.getId());
			final boolean isBankIface = iface == InterfaceID.BANK || iface == InterfaceID.BANK_INVENTORY;
			if (!isBankIface)
			{
				continue;
			}

			final int itemId = entry.getItemId() > 0 ? entry.getItemId() : w.getItemId();
			if (itemId <= 0)
			{
				continue;
			}

			final BankHighlighterTag tag = getTag(itemId);

			final MenuEntry parent = client.createMenuEntry(idx)
				.setOption("Bank Highlight")
				.setTarget(entry.getTarget())
				.setType(MenuAction.RUNELITE);

			final Menu submenu = parent.createSubMenu();

			Set<Color> bankColors = new HashSet<>(getColorsFromItemContainer(BANK));
			for (Color color : bankColors)
			{
				if (tag == null || !color.equals(tag.getColor()))
				{
					submenu.createMenuEntry(0)
						.setOption(ColorUtil.prependColorTag("Color", color))
						.setType(MenuAction.RUNELITE)
						.onClick(e ->
						{
							BankHighlighterTag t = new BankHighlighterTag();
							t.setColor(color);
							setTag(itemId, t);
							overlay.invalidateCache();
						});
				}
			}

			// Manual picker
			submenu.createMenuEntry(0)
				.setOption("Pick")
				.setType(MenuAction.RUNELITE)
				.onClick(e ->
				{
					Color base = (tag == null || tag.getColor() == null) ? Color.WHITE : tag.getColor();
					SwingUtilities.invokeLater(() ->
					{
						RuneliteColorPicker colorPicker = colorPickerManager.create(
							SwingUtilities.windowForComponent((Applet) client),
							base,
							"Bank Highlight",
							true
						);
						colorPicker.setOnClose(c ->
						{
							BankHighlighterTag t = new BankHighlighterTag();
							t.setColor(c);
							setTag(itemId, t);
							overlay.invalidateCache();
						});
						colorPicker.setVisible(true);
					});
				});

			// Reset existing tag
			if (tag != null)
			{
				submenu.createMenuEntry(0)
					.setOption("Reset")
					.setType(MenuAction.RUNELITE)
					.onClick(e ->
					{
						unsetTag(itemId);
						overlay.invalidateCache();
					});
			}
		}
	}

	private List<Color> getColorsFromItemContainer(InventoryID inventoryID)
	{
		List<Color> colors = new ArrayList<>();
		ItemContainer container = client.getItemContainer(inventoryID);
		if (container != null)
		{
			for (Item item : container.getItems())
			{
				BankHighlighterTag tag = getTag(item.getId());
				if (tag != null && tag.color != null)
				{
					if (!colors.contains(tag.color))
					{
						colors.add(tag.color);
					}
				}
			}
		}
		return colors;
	}
}

package com.bankhighlighter;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;

@ConfigGroup(BankHighlighterConfig.GROUP)
public interface BankHighlighterConfig extends Config
{
	String GROUP = "com/bankhighlighter";

	@ConfigSection(
		name = "Tag display mode",
		description = "How tags are displayed in the bank",
		position = 0
	)
	String tagStyleSection = "tagStyleSection";

	@ConfigItem(
		position = 0,
		keyName = "showTagOutline",
		name = "Outline",
		description = "Configures whether or not item tags should be outlined",
		section = tagStyleSection
	)
	default boolean showTagOutline()
	{
		return true;
	}

	@ConfigItem(
		position = 1,
		keyName = "tagUnderline",
		name = "Underline",
		description = "Configures whether or not item tags should be underlined",
		section = tagStyleSection
	)
	default boolean showTagUnderline()
	{
		return false;
	}

	@ConfigItem(
		position = 2,
		keyName = "tagFill",
		name = "Fill",
		description = "Configures whether or not item tags should be filled",
		section = tagStyleSection
	)
	default boolean showTagFill()
	{
		return false;
	}

	@Range(
		max = 255
	)
	@ConfigItem(
		position = 3,
		keyName = "fillOpacity",
		name = "Fill opacity",
		description = "Configures the opacity of the tag \"Fill\"",
		section = tagStyleSection
	)
	default int fillOpacity()
	{
		return 50;
	}
}

package com.bankhighlighter;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PluginLauncher
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(BankHighlighterPlugin.class);
		RuneLite.main(args);
	}
}
