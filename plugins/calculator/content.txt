package com.thenorsepantheon.calculator;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CalculatorPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CalculatorPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2020, Spedwards <https://github.com/Spedwards>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.thenorsepantheon.calculator;

import com.thenorsepantheon.calculator.ui.CalculatorPluginPanel;
import java.awt.image.BufferedImage;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

@Slf4j
@PluginDescriptor(
	name = "calculator",
	description = "Adds a calculator panel",
	tags = {"math"}
)
public class CalculatorPlugin extends Plugin
{
	@Inject
	private ClientToolbar clientToolbar;

	private NavigationButton navButton;

	@Override
	protected void startUp()
	{
		log.info("calculator started!");

		CalculatorPluginPanel panel = new CalculatorPluginPanel();

		final BufferedImage icon = ImageUtil.getResourceStreamFromClass(getClass(), "icon.png");

		navButton = NavigationButton.builder()
			.tooltip("Calculator")
			.priority(7)
			.icon(icon)
			.panel(panel)
			.build();

		clientToolbar.addNavigation(navButton);
	}

	@Override
	protected void shutDown()
	{
		clientToolbar.removeNavigation(navButton);

		log.info("calculator stopped!");
	}

}

/*
 * Copyright (c) 2020, Spedwards <https://github.com/Spedwards>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.thenorsepantheon.calculator.ui;

import java.awt.Dimension;
import java.awt.Font;
import javax.swing.Icon;
import javax.swing.JButton;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class CalculatorButton extends JButton
{
	private static final Dimension PREFERRED_SIZE = new Dimension(55, 55);

	public CalculatorButton(String text)
	{
		super(text);

		setPreferredSize(PREFERRED_SIZE);
		// Use Arial. Zero and Asterisk look funny in "Runescape Standard"
		setFont(new Font("Arial", Font.BOLD, 20));
	}

	public CalculatorButton(Icon icon)
	{
		super(icon);

		setPreferredSize(PREFERRED_SIZE);
	}
}

/*
 * Copyright (c) 2020, Spedwards <https://github.com/Spedwards>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.thenorsepantheon.calculator.ui;

import javax.swing.JTextField;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;

@EqualsAndHashCode(callSuper = true)
@Data
public class DisplayField extends JTextField
{
	@AllArgsConstructor
	@Getter
	protected enum Action
	{
		ADDITION("+"), SUBTRACTION("-"), MULTIPLICATION("*"), DIVISION("/");

		private final String character;
	}

	private Integer num1;
	private Integer num2;
	private Action calculatorAction;
	private Integer result;
	private Integer previousResult;
	private String text;
	private boolean finished = true;

	protected void calculateResult()
	{
		if (num1 == null || num2 == null || calculatorAction == null)
		{
			return;
		}
		switch (calculatorAction)
		{
			case ADDITION:
				result = num1 + num2;
				break;
			case SUBTRACTION:
				result = num1 - num2;
				break;
			case MULTIPLICATION:
				result = num1 * num2;
				break;
			case DIVISION:
				if (num2 == 0)
				{
					reset();
					super.setText("Error: Cannot divide by 0!");
					finished = true;
					break;
				}
				result = num1 / num2;
				break;
		}
		previousResult = result;
		finished = true;
	}

	protected void reset()
	{
		num1 = null;
		num2 = null;
		calculatorAction = null;
		result = null;
		text = null;
		update();
	}

	protected void clear()
	{
		reset();
		finished = true;
		previousResult = null;
	}

	protected void update()
	{
		if (num1 == null)
		{
			this.text = "";
		}
		else if (calculatorAction == null)
		{
			this.text = num1.toString();
		}
		else if (num2 == null)
		{
			this.text = String.join(" ", num1.toString(), calculatorAction.getCharacter());
		}
		else if (result == null)
		{
			this.text = String.join(" ", num1.toString(), calculatorAction.getCharacter(), num2.toString());
		}
		else
		{
			this.text = String.join(" ",
				num1.toString(), calculatorAction.getCharacter(), num2.toString(), "=", result.toString());
		}
		super.setText(this.text);
		repaint();
	}

	protected boolean num1IsNegativeZero()
	{
		return num1 == 0 && num1.toString().length() == 2;
	}

	protected boolean num2IsNegativeZero()
	{
		if (num2 == null)
		{
			return false;
		}
		return num2 == 0 && num2.toString().length() == 2;
	}
}

/*
 * Copyright (c) 2020, Spedwards <https://github.com/Spedwards>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.thenorsepantheon.calculator.ui;

import com.thenorsepantheon.calculator.CalculatorPlugin;
import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.image.BufferedImage;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import net.runelite.client.util.ImageUtil;
import org.apache.commons.lang3.StringUtils;

public class CalculatorPanel extends JPanel
{
	private static final ImageIcon PLUS_MINUS_ICON;
	private static final Insets INSETS_LEFT_BORDER = new Insets(1, 0, 1, 1);
	private static final Insets INSETS_RIGHT_BORDER = new Insets(1, 1, 1, 0);
	private static final Insets INSETS = new Insets(1, 1, 1, 1);

	static
	{
		final BufferedImage plusMinusIcon = ImageUtil.resizeImage(ImageUtil.getResourceStreamFromClass(CalculatorPlugin.class, "plus_minus_icon.png"), 25, 25);
		PLUS_MINUS_ICON = new ImageIcon(plusMinusIcon);
	}

	private final CalculatorPluginPanel panel;
	private final DisplayField displayField;
	private final GridBagConstraints c;

	protected CalculatorPanel(CalculatorPluginPanel panel)
	{
		super();

		this.panel = panel;
		this.displayField = panel.getDisplayField();

		setLayout(new GridBagLayout());

		c = new GridBagConstraints();
		c.fill = GridBagConstraints.HORIZONTAL;
		c.gridx = 0;
		c.gridy = 0;

		CalculatorButton plusMinus = new CalculatorButton(PLUS_MINUS_ICON);

		addButton("+");
		addButton("7");
		addButton("8");
		addButton("9");
		
		addButton("-");
		addButton("4");
		addButton("5");
		addButton("6");
		
		addButton("*");
		addButton("1");
		addButton("2");
		addButton("3");
		
		addButton("/");
		addButton("0");
		addComp(plusMinus);
		addButton("=");

		addButton("C");
		c.gridwidth = 3;
		addButton("Clear History");

		plusMinus.addActionListener(e ->
		{
			if (displayField.isFinished())
			{
				displayField.reset();
				if (displayField.getPreviousResult() != null)
				{
					displayField.setNum1(displayField.getPreviousResult());
				}
				else
				{
					displayField.setNum1(0);
				}
				displayField.setNum1(displayField.getNum1() * -1);
				displayField.setFinished(false);
			}
			else
			{
				if (displayField.getCalculatorAction() == null)
				{
					displayField.setNum1(displayField.getNum1() * -1);
				}
				else
				{
					Integer num2 = displayField.getNum2();
					if (num2 == null)
					{
						num2 = 0;
					}
					displayField.setNum2(num2 * -1);
				}
			}
			displayField.update();
		});
	}

	private void addButton(String key)
	{
		CalculatorButton btn = new CalculatorButton(key);
		btn.addActionListener(e ->
		{
			String text = btn.getText();
			if (text.equals("="))
			{
				displayField.calculateResult();
				if (displayField.getResult() == null)
				{
					// Divide by 0 error occured
					return;
				}
				// Add new calculation to history before the displayField is updated
				panel.getHistoryPanel().addHistoryItem(displayField.getText() + " =", displayField.getResult().toString());
			}
			else if (text.equals("C"))
			{
				displayField.clear();
				return;
			}
			else if (text.equals("Clear History"))
			{
				panel.getHistoryPanel().clearHistory();
				return;
			}
			else if (StringUtils.isNumeric(text))
			{
				int num = Integer.parseInt(text);
				// Previous calculation has finised. Start again
				if (displayField.isFinished())
				{
					displayField.reset();
					displayField.setNum1(num);
					displayField.setFinished(false);
				}
				else
				{
					// If there is no action saved, assume we're working with num1
					if (displayField.getCalculatorAction() == null)
					{
						Integer num1 = displayField.getNum1();
						if (num1 == 0)
						{
							if (displayField.num1IsNegativeZero())
							{
								num *= -1;
							}
							displayField.setNum1(num);
						}
						else
						{
							if (num1 < 0)
							{
								displayField.setNum1(num1 * 10 - num);
							}
							else
							{
								displayField.setNum1(num1 * 10 + num);
							}
						}
					}
					else
					{
						Integer num2 = displayField.getNum2();
						if (num2 == null || num2 == 0)
						{
							if (displayField.num2IsNegativeZero())
							{
								num *= -1;
							}
							displayField.setNum2(num);
						}
						else
						{
							if (num2 < 0)
							{
								displayField.setNum2(num2 * 10 - num);
							}
							else
							{
								displayField.setNum2(num2 * 10 + num);
							}
						}
					}
				}
			}
			else
			{
				// If the calculation is finished and there's a previous result to work from,
				// set num1 as the previous result and continue
				if (displayField.isFinished() && displayField.getPreviousResult() != null)
				{
					displayField.reset();
					displayField.setNum1(displayField.getPreviousResult());
					displayField.setFinished(false);
					displayField.update();
				}
				if (displayField.getNum1() != null)
				{
					switch (text)
					{
						case "+":
							displayField.setCalculatorAction(DisplayField.Action.ADDITION);
							break;
						case "-":
							displayField.setCalculatorAction(DisplayField.Action.SUBTRACTION);
							break;
						case "*":
							displayField.setCalculatorAction(DisplayField.Action.MULTIPLICATION);
							break;
						case "/":
							displayField.setCalculatorAction(DisplayField.Action.DIVISION);
							break;
					}
				}
				displayField.setNum2(null);
			}
			displayField.update();
		});
		addComp(btn);
	}

	private void addComp(Component component)
	{
		switch (c.gridx)
		{
			case 0:
				c.insets = INSETS_LEFT_BORDER;
				break;
			case 3:
				c.insets = INSETS_RIGHT_BORDER;
				break;
			default:
				c.insets = INSETS;
		}
		if (c.gridwidth == 3)
		{
			c.insets = INSETS_RIGHT_BORDER;
		}
		add(component, c);
		c.gridx = ++c.gridx % 4;
		c.gridy = c.gridx == 0 ? ++c.gridy : c.gridy;
	}
}

/*
 * Copyright (c) 2020, Spedwards <https://github.com/Spedwards>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.thenorsepantheon.calculator.ui;

import java.awt.BorderLayout;
import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.client.ui.PluginPanel;

public class CalculatorPluginPanel extends PluginPanel
{
	private final DisplayPanel displayPanel = new DisplayPanel();
	@Getter
	private final HistoryPanel historyPanel = new HistoryPanel();

	public CalculatorPluginPanel()
	{
		super();

		CalculatorPanel calculatorPanel = new CalculatorPanel(this);

		setLayout(new BorderLayout(5, 5));

		add(displayPanel, BorderLayout.NORTH);
		add(calculatorPanel, BorderLayout.CENTER);
		add(historyPanel, BorderLayout.SOUTH);
	}

	protected DisplayField getDisplayField()
	{
		return displayPanel.getDisplayField();
	}
}

/*
 * Copyright (c) 2020, Spedwards <https://github.com/Spedwards>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.thenorsepantheon.calculator.ui;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;

public class HistoryPanel extends JPanel
{
	private final List<HistoryItemPanel> itemPanels = new ArrayList<>();
	private final GridBagConstraints c;

	public HistoryPanel()
	{
		super();

		setLayout(new GridBagLayout());

		c = new GridBagConstraints();
		c.fill = GridBagConstraints.HORIZONTAL;
		c.gridx = 0;
		c.gridy = 0;
		c.weightx = 1;
		c.weighty = 0;
		c.insets = new Insets(0, 0, 7, 0);
	}

	protected void addHistoryItem(String line1, String line2)
	{
		// Herein lies my horrible attempt at creating a new item at the top and pushing everything else down
		// ¯\_(ツ)_/¯
		removeAll();
		HistoryItemPanel itemPanel = new HistoryItemPanel(line1, line2);
		itemPanels.add(0, itemPanel);
		c.gridy = 0;
		itemPanels.forEach(panel -> {
			add(panel, c, 0);
			c.gridy++;
		});

		repaint();
		revalidate();
	}

	protected void clearHistory()
	{
		removeAll();
		itemPanels.clear();
		repaint();
		revalidate();
	}
}

/*
 * Copyright (c) 2020, Spedwards <https://github.com/Spedwards>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.thenorsepantheon.calculator.ui;

import com.thenorsepantheon.calculator.CalculatorPlugin;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.image.BufferedImage;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.MatteBorder;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.ImageUtil;

public class HistoryItemPanel extends JPanel
{
	private static final ImageIcon CLIPBOARD_ICON;

	static
	{
		final BufferedImage clipboardIcon = ImageUtil.resizeImage(ImageUtil.getResourceStreamFromClass(CalculatorPlugin.class, "clipboard_icon.png"), 20, 20);
		CLIPBOARD_ICON = new ImageIcon(clipboardIcon);
	}

	public HistoryItemPanel(String line1, String line2)
	{
		super();

		setLayout(new BorderLayout());
		setBackground(ColorScheme.DARKER_GRAY_COLOR);
		setBorder(new MatteBorder(0, 5, 0, 0, ColorScheme.BRAND_ORANGE));

		JPanel text = new JPanel(new BorderLayout());
		text.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		JLabel lineOneLabel = new JLabel(line1);
		lineOneLabel.setHorizontalAlignment(JLabel.CENTER);
		JLabel lineTwoLabel = new JLabel(line2);
		lineTwoLabel.setHorizontalAlignment(JLabel.CENTER);
		text.add(lineOneLabel, BorderLayout.NORTH);
		text.add(lineTwoLabel, BorderLayout.SOUTH);

		add(text, BorderLayout.CENTER);

		JButton copy = new JButton(CLIPBOARD_ICON);
		copy.setPreferredSize(new Dimension(40, 40));
		copy.setToolTipText("Copy result to clipboard");
		copy.addActionListener(e ->
		{
			StringSelection selection = new StringSelection(line2);
			Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
			clipboard.setContents(selection, null);
		});

		add(copy, BorderLayout.EAST);
	}
}

/*
 * Copyright (c) 2020, Spedwards <https://github.com/Spedwards>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.thenorsepantheon.calculator.ui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import lombok.Getter;

public class DisplayPanel extends JPanel
{
	@Getter
	private final DisplayField displayField = new DisplayField();

	public DisplayPanel()
	{
		super();

		setLayout(new BorderLayout(4, 4));
		setBorder(new EmptyBorder(0, 1, 0, 1));

		displayField.setPreferredSize(new Dimension(228, 50));
		displayField.setMinimumSize(new Dimension(170, 50));
		displayField.setEditable(false);

		add(displayField, BorderLayout.CENTER);
	}
}

