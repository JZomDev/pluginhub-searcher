package com.npccontactfilter;

import com.google.inject.Provides;
import java.util.Arrays;
import java.util.Comparator;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.client.events.ConfigChanged;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
@Slf4j
@PluginDescriptor(
	name = "NPC Contact Filter"
)
public class NPCContactFilterPlugin extends Plugin
{
	private static final int NPC_CONTACT_WIDGET_GROUP = 75;
	private static final int NPC_CONTACT_WIDGET_ID = 4915204;
	private static final int X_OFFSET = 67;
	private static final int Y_OFFSET = 125;
	private static final int COLUMNS = 7;

	private static class SortNPCs implements Comparator<Widget>
	{
		public int compare(Widget a, Widget b)
		{
			return (a.getOriginalX() / X_OFFSET + (a.getOriginalY() / Y_OFFSET) * COLUMNS) - (b.getOriginalX() / X_OFFSET + (b.getOriginalY() / Y_OFFSET) * COLUMNS);
		}

	}

	@Inject
	private Client client;

	@Inject
	private NPCContactFilterConfig config;

	@Override
	protected void startUp() throws Exception
	{
		log.info("NPC Contact Filter started!");
	}

	@Override
	protected void shutDown() throws Exception
	{
		log.info("NPC Contact Filter stopped!");
	}

	private boolean shouldHide(String name)
	{
		boolean shouldKeep;
		switch (name)
		{
			case "Honest Jimmy":
				shouldKeep = config.honestJimmy();
				break;
			case "Bert the Sandman":
				shouldKeep = config.bert();
				break;
			case "Advisor Ghrim":
				shouldKeep = config.advisorGhrim();
				break;
			case "Dark Mage":
				shouldKeep = config.darkMage();
				break;
			case "Lanthus":
				shouldKeep = config.lanthus();
				break;
			case "Spria":
				shouldKeep = config.spria();
				break;
			case "Turael":
			case "Aya":
				shouldKeep = config.turael();
				break;
			case "Mazchna":
				shouldKeep = config.mazchna();
				break;
			case "Vannaka":
				shouldKeep = config.vannaka();
				break;
			case "Chaeldar":
				shouldKeep = config.chaeldar();
				break;
			case "Nieve":
			case "Steve":
				shouldKeep = config.nieve();
				break;
			case "Duradel":
			case "Kuradal":
				shouldKeep = config.duradel();
				break;
			case "Krystilia":
				shouldKeep = config.krystilia();
				break;
			case "Konar":
				shouldKeep = config.konar();
				break;
			case "Murphy":
				shouldKeep = config.murphy();
				break;
			case "Cyrisus":
				shouldKeep = config.cyrisus();
				break;
			case "Smoggy":
				shouldKeep = config.smoggy();
				break;
			case "Ginea":
				shouldKeep = config.ginea();
				break;
			case "Watson":
				shouldKeep = config.watson();
				break;
			case "Barbarian Guard":
				shouldKeep = config.barbarianGuard();
				break;
			case "Amy":
				shouldKeep = config.amy();
				break;
			case "Random":
				shouldKeep = config.random();
				break;
			default:
				shouldKeep = true;
		}
		return !shouldKeep;
	}

	private void hideWidgets(Widget[] npcWidgets)
	{
		for (Widget npcWidget : npcWidgets)
		{
			npcWidget.setHidden(shouldHide(npcWidget.getStaticChildren()[1].getText()));
		}
	}

	private void moveWidgets(Widget[] npcWidgets)
	{
		int index = 0;
		for (Widget npcWidget : npcWidgets)
		{
			if (!shouldHide(npcWidget.getStaticChildren()[1].getText()))
			{
				int x = X_OFFSET * (index % COLUMNS);
				int y = Y_OFFSET * (index / COLUMNS);
				npcWidget.setForcedPosition(x, y);
				index++;
			}
		}
	}

	private void modifyNPCContactWidget()
	{
		Widget NPCContactWidget = client.getWidget(NPC_CONTACT_WIDGET_ID);
		if (NPCContactWidget != null)
		{
			Widget[] npcWidgets = NPCContactWidget.getStaticChildren();
			Arrays.sort(npcWidgets, new SortNPCs());

			hideWidgets(npcWidgets);
			moveWidgets(npcWidgets);
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged)
	{
		if (configChanged.getGroup().equals("npc contact filter"))
		{
			modifyNPCContactWidget();
		}
	}

	@Subscribe
	public void onWidgetLoaded(WidgetLoaded widgetloaded)
	{
		if (widgetloaded.getGroupId() == NPC_CONTACT_WIDGET_GROUP)
		{
			modifyNPCContactWidget();
		}
	}

	@Provides
	NPCContactFilterConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(NPCContactFilterConfig.class);
	}
}

package com.npccontactfilter;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("npc contact filter")
public interface NPCContactFilterConfig extends Config
{
	@ConfigSection(name = "NPCs", description = "NPCs to be filtered or kept", position = 0, closedByDefault  = true)
	String npcSection = "NPCs";

	@ConfigItem(
		keyName = "honestJimmy",
		name = "Honest Jimmy",
		description = "Show Honest Jimmy",
		section = npcSection,
		position = 1
	)
	default boolean honestJimmy()
	{
		return true;
	}

	@ConfigItem(
		keyName = "bert",
		name = "Bert the Sandman",
		description = "Show Bert the Sandman",
		section = npcSection,
		position = 2
	)
	default boolean bert()
	{
		return true;
	}

	@ConfigItem(
		keyName = "advisorGhrim",
		name = "Advisor Ghrim",
		description = "Show Advisor Ghrim",
		section = npcSection,
		position = 3
	)
	default boolean advisorGhrim()
	{
		return true;
	}

	@ConfigItem(
		keyName = "darkMage",
		name = "Dark Mage",
		description = "Show Dark Mage",
		section = npcSection,
		position = 4
	)
	default boolean darkMage()
	{
		return true;
	}

	@ConfigItem(
		keyName = "lanthus",
		name = "Lanthus",
		description = "Show Lanthus",
		section = npcSection,
		position = 5
	)
	default boolean lanthus()
	{
		return true;
	}

	@ConfigItem(
		keyName = "spria",
		name = "Spria",
		description = "Show Spria",
		section = npcSection,
		position = 6
	)
	default boolean spria()
	{
		return true;
	}

	@ConfigItem(
		keyName = "turael",
		name = "Turael/Aya",
		description = "Show Turael/Aya",
		section = npcSection,
		position = 7
	)
	default boolean turael()
	{
		return true;
	}

	@ConfigItem(
		keyName = "mazchna",
		name = "Mazchna",
		description = "Show Mazchna",
		section = npcSection,
		position = 8
	)
	default boolean mazchna()
	{
		return true;
	}

	@ConfigItem(
		keyName = "vannaka",
		name = "Vannaka",
		description = "Show Vannaka",
		section = npcSection,
		position = 9
	)
	default boolean vannaka()
	{
		return true;
	}

	@ConfigItem(
		keyName = "chaeldar",
		name = "Chaeldar",
		description = "Show Chaeldar",
		section = npcSection,
		position = 10
	)
	default boolean chaeldar()
	{
		return true;
	}

	@ConfigItem(
		keyName = "nieve",
		name = "Nieve/Steve",
		description = "Show Nieve/Steve",
		section = npcSection,
		position = 11
	)
	default boolean nieve()
	{
		return true;
	}

	@ConfigItem(
		keyName = "duradel",
		name = "Duradel/Kuradal",
		description = "Show Duradel/Kuradal",
		section = npcSection,
		position = 12
	)
	default boolean duradel()
	{
		return true;
	}

	@ConfigItem(
		keyName = "krystilia",
		name = "Krystilia",
		description = "Show Krystilia",
		section = npcSection,
		position = 13
	)
	default boolean krystilia()
	{
		return true;
	}

	@ConfigItem(
		keyName = "konar",
		name = "Konar",
		description = "Show Konar",
		section = npcSection,
		position = 14
	)
	default boolean konar()
	{
		return true;
	}

	@ConfigItem(
		keyName = "murphy",
		name = "Murphy",
		description = "Show Murphy",
		section = npcSection,
		position = 15
	)
	default boolean murphy()
	{
		return true;
	}

	@ConfigItem(
		keyName = "cyrisus",
		name = "Cyrisus",
		description = "Show Cyrisus",
		section = npcSection,
		position = 16
	)
	default boolean cyrisus()
	{
		return true;
	}

	@ConfigItem(
		keyName = "smoggy",
		name = "Smoggy",
		description = "Show Smoggy",
		section = npcSection,
		position = 17
	)
	default boolean smoggy()
	{
		return true;
	}

	@ConfigItem(
		keyName = "ginea",
		name = "Ginea",
		description = "Show Ginea",
		section = npcSection,
		position = 18
	)
	default boolean ginea()
	{
		return true;
	}

	@ConfigItem(
		keyName = "watson",
		name = "Watson",
		description = "Show Watson",
		section = npcSection,
		position = 19
	)
	default boolean watson()
	{
		return true;
	}

	@ConfigItem(
		keyName = "barbarianGuard",
		name = "Barbarian Guard",
		description = "Show Barbarian Guard",
		section = npcSection,
		position = 20
	)
	default boolean barbarianGuard()
	{
		return true;
	}

	@ConfigItem(
		keyName = "amy",
		name = "Amy",
		description = "Show Amy",
		section = npcSection,
		position = 21
	)
	default boolean amy()
	{
		return true;
	}

	@ConfigItem(
		keyName = "random",
		name = "Random",
		description = "Show Random",
		section = npcSection,
		position = 22
	)
	default boolean random()
	{
		return true;
	}
}

package com.npccontactfilter;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class NPCContactFilterPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(NPCContactFilterPlugin.class);
		RuneLite.main(args);
	}
}
