/*
 * Copyright (c) 2022, KMPLX <github.com/KMPLX-KODE>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.combatinformation;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CombatInformationPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CombatInformationPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2022, KMPLX <github.com/KMPLX-KODE>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.combatinformation;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;

@ConfigGroup("combatinformation")
public interface CombatInformationConfig extends Config {}

/*
 * Copyright (c) 2022, KMPLX <github.com/KMPLX-KODE>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.combatinformation;

import net.runelite.api.Skill;

enum AttackStyle
{
    ACCURATE("Accurate", Skill.ATTACK),
    AGGRESSIVE("Aggressive", Skill.STRENGTH),
    DEFENSIVE("Defensive", Skill.DEFENCE),
    CONTROLLED("Controlled", Skill.ATTACK, Skill.STRENGTH, Skill.DEFENCE),
    RANGING("Ranging", Skill.RANGED),
    LONGRANGE("Longrange", Skill.RANGED, Skill.DEFENCE),
    CASTING("Casting", Skill.MAGIC),
    DEFENSIVE_CASTING("Defensive Casting", Skill.MAGIC, Skill.DEFENCE),
    OTHER("Other");

    private final String name;
    private final Skill[] skills;

    AttackStyle(String name, Skill... skills)
    {
        this.name = name;
        this.skills = skills;
    }

    public String getName()
    {
        return name;
    }

    public Skill[] getSkills()
    {
        return skills;
    }
}
/*
 * Copyright (c) 2022, KMPLX <github.com/KMPLX-KODE>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.combatinformation;

import javax.inject.Inject;
import java.awt.*;
import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.util.ColorUtil;

import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class CombatInformationOverlay extends OverlayPanel
{
    private final Client client;
    private final com.combatinformation.CombatInformationConfig config;
    private final com.combatinformation.CombatInformationPlugin plugin;

    @Inject
    private CombatInformationOverlay(Client client, CombatInformationConfig config, CombatInformationPlugin plugin)
    {
        super(plugin);
        this.plugin = plugin;
        this.client = client;
        this.config = config;

        setPosition(OverlayPosition.BOTTOM_LEFT);
        setPriority(OverlayPriority.MED);
        getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Combat information overlay."));
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        // Combat skills will always be displayed.
        setOverlayText(Skill.ATTACK);
        setOverlayText(Skill.STRENGTH);
        setOverlayText(Skill.DEFENCE);
        setOverlayText(Skill.RANGED);
        setOverlayText(Skill.MAGIC);

        // Add attack style text to overlay.
        setAttackStyleText();

        return super.render(graphics);
    }

    private void setOverlayText(Skill skill)
    {
        final int boosted = client.getBoostedSkillLevel(skill);
        final int base = client.getRealSkillLevel(skill);
        final int boost = boosted - base;
        final Color strColor = getTextColor(boost);
        String str;

        str = ColorUtil.prependColorTag(Integer.toString(boosted), strColor);

        panelComponent.getChildren().add(LineComponent.builder()
                .left(skill.getName())
                .right(str)
                .rightColor(strColor)
                .build());
    }

    private void setAttackStyleText()
    {
        // Always display attack style.
        final AttackStyle attackStyle = plugin.getAttackStyle();
        final String attackStyleString = attackStyle.getName();

        panelComponent.getChildren().add(LineComponent.builder()
                .left(attackStyleString)
                .leftColor(Color.ORANGE)
                .right(plugin.getAutoRetaliateText()) // Display auto-retaliate setting.
                .rightColor(Color.ORANGE)
                .build());
    }

    private Color getTextColor(int boost)
    {
        if (boost < 0)
        {
            return new Color(238, 51, 51);
        }

        return boost <= 0 ? Color.WHITE : Color.GREEN;
    }
}

/*
 * Copyright (c) 2022, KMPLX <github.com/KMPLX-KODE>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.combatinformation;

import com.google.common.collect.ImmutableMap;
import java.util.Map;
import static com.combatinformation.AttackStyle.ACCURATE;
import static com.combatinformation.AttackStyle.AGGRESSIVE;
import static com.combatinformation.AttackStyle.CASTING;
import static com.combatinformation.AttackStyle.CONTROLLED;
import static com.combatinformation.AttackStyle.DEFENSIVE;
import static com.combatinformation.AttackStyle.DEFENSIVE_CASTING;
import static com.combatinformation.AttackStyle.LONGRANGE;
import static com.combatinformation.AttackStyle.OTHER;
import static com.combatinformation.AttackStyle.RANGING;

enum WeaponType
{
    TYPE_0(ACCURATE, AGGRESSIVE, null, DEFENSIVE),
    TYPE_1(ACCURATE, AGGRESSIVE, AGGRESSIVE, DEFENSIVE),
    TYPE_2(ACCURATE, AGGRESSIVE, null, DEFENSIVE),
    TYPE_3(RANGING, RANGING, null, LONGRANGE),
    TYPE_4(ACCURATE, AGGRESSIVE, CONTROLLED, DEFENSIVE),
    TYPE_5(RANGING, RANGING, null, LONGRANGE),
    TYPE_6(AGGRESSIVE, RANGING, CASTING, null),
    TYPE_7(RANGING, RANGING, null, LONGRANGE),
    TYPE_8(OTHER, AGGRESSIVE, null, null),
    TYPE_9(ACCURATE, AGGRESSIVE, CONTROLLED, DEFENSIVE),
    TYPE_10(ACCURATE, AGGRESSIVE, AGGRESSIVE, DEFENSIVE),
    TYPE_11(ACCURATE, AGGRESSIVE, AGGRESSIVE, DEFENSIVE),
    TYPE_12(CONTROLLED, AGGRESSIVE, null, DEFENSIVE),
    TYPE_13(ACCURATE, AGGRESSIVE, null, DEFENSIVE),
    TYPE_14(ACCURATE, AGGRESSIVE, AGGRESSIVE, DEFENSIVE),
    TYPE_15(CONTROLLED, CONTROLLED, CONTROLLED, DEFENSIVE),
    TYPE_16(ACCURATE, AGGRESSIVE, CONTROLLED, DEFENSIVE),
    TYPE_17(ACCURATE, AGGRESSIVE, AGGRESSIVE, DEFENSIVE),
    TYPE_18(ACCURATE, AGGRESSIVE, null, DEFENSIVE, CASTING, DEFENSIVE_CASTING),
    TYPE_19(RANGING, RANGING, null, LONGRANGE),
    TYPE_20(ACCURATE, CONTROLLED, null, DEFENSIVE),
    TYPE_21(ACCURATE, AGGRESSIVE, null, DEFENSIVE, CASTING, DEFENSIVE_CASTING),
    TYPE_22(ACCURATE, AGGRESSIVE, AGGRESSIVE, DEFENSIVE),
    TYPE_23(CASTING, CASTING, null, DEFENSIVE_CASTING),
    TYPE_24(ACCURATE, AGGRESSIVE, CONTROLLED, DEFENSIVE),
    TYPE_25(CONTROLLED, AGGRESSIVE, null, DEFENSIVE),
    TYPE_26(AGGRESSIVE, AGGRESSIVE, null, AGGRESSIVE),
    TYPE_27(ACCURATE, null, null, OTHER);

    private final AttackStyle[] attackStyles;

    private static final Map<Integer, WeaponType> weaponTypes;

    static
    {
        ImmutableMap.Builder<Integer, WeaponType> builder = new ImmutableMap.Builder<>();

        for (WeaponType weaponType : values())
        {
            builder.put(weaponType.ordinal(), weaponType);
        }

        weaponTypes = builder.build();
    }

    WeaponType(AttackStyle... attackStyles)
    {
        this.attackStyles = attackStyles;
    }

    public AttackStyle[] getAttackStyles()
    {
        return attackStyles;
    }

    public static WeaponType getWeaponType(int id)
    {
        return weaponTypes.get(id);
    }
}

/*
 * Copyright (c) 2022, KMPLX <github.com/KMPLX-KODE>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.combatinformation;

import com.google.inject.Provides;
import javax.annotation.Nullable;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import static com.combatinformation.AttackStyle.*;

@Slf4j
@PluginDescriptor(
	name = "Combat Information",
	description = "Combat information overlay for combat stats, attack style, and auto-retaliate setting.",
	tags = {"combat", "boosts", "info", "overlay", "auto-retaliate"}
)
public class CombatInformationPlugin extends Plugin
{
	// Varbits for attack style.
	private int attackStyleVarbit = -1;
	private int equippedWeaponTypeVarbit = -1;
	private int castingModeVarbit = -1;

	// Varbits for auto-retaliate.
	private int autoRetaliateVarbit = -1;

	private AttackStyle attackStyle;
	private String autoRetaliate;

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private CombatInformationOverlay combatInformationOverlay;

	@Inject
	private CombatInformationConfig config;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(combatInformationOverlay);

		if (client.getGameState() == GameState.LOGGED_IN)
		{
			clientThread.invoke(this::start);
		}
	}

	private void start()
	{
		attackStyleVarbit = client.getVar(VarPlayer.ATTACK_STYLE);
		equippedWeaponTypeVarbit = client.getVar(Varbits.EQUIPPED_WEAPON_TYPE);
		castingModeVarbit = client.getVar(Varbits.DEFENSIVE_CASTING_MODE);
		updateAttackStyle(
				equippedWeaponTypeVarbit,
				attackStyleVarbit,
				castingModeVarbit);

		getAutoRetaliateVarbit();
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(combatInformationOverlay);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
	}

	@Provides
    CombatInformationConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(CombatInformationConfig.class);
	}

	private void attackStyle()
	{
		attackStyleVarbit = client.getVar(VarPlayer.ATTACK_STYLE);
		equippedWeaponTypeVarbit = client.getVar(Varbits.EQUIPPED_WEAPON_TYPE);
		castingModeVarbit = client.getVar(Varbits.DEFENSIVE_CASTING_MODE);
		updateAttackStyle(
				equippedWeaponTypeVarbit,
				attackStyleVarbit,
				castingModeVarbit);
	}

	@Nullable
	public AttackStyle getAttackStyle()
	{
		return attackStyle;
	}

	private void updateAttackStyle(int equippedWeaponType, int attackStyleIndex, int castingMode)
	{
		AttackStyle[] attackStyles = WeaponType.getWeaponType(equippedWeaponType).getAttackStyles();
		if (attackStyleIndex < attackStyles.length)
		{
			attackStyle = attackStyles[attackStyleIndex];
			if (attackStyle == null)
			{
				attackStyle = OTHER;
			}
			else if ((attackStyle == CASTING) && (castingMode == 1))
			{
				attackStyle = DEFENSIVE_CASTING;
			}
		}
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		int currentAttackStyleVarbit = client.getVar(VarPlayer.ATTACK_STYLE);
		int currentEquippedWeaponTypeVarbit = client.getVar(Varbits.EQUIPPED_WEAPON_TYPE);
		int currentCastingModeVarbit = client.getVar(Varbits.DEFENSIVE_CASTING_MODE);

		if (attackStyleVarbit != currentAttackStyleVarbit || equippedWeaponTypeVarbit != currentEquippedWeaponTypeVarbit || castingModeVarbit != currentCastingModeVarbit)
		{
			boolean weaponSwitch = currentEquippedWeaponTypeVarbit != equippedWeaponTypeVarbit;

			attackStyleVarbit = currentAttackStyleVarbit;
			equippedWeaponTypeVarbit = currentEquippedWeaponTypeVarbit;
			castingModeVarbit = currentCastingModeVarbit;

			updateAttackStyle(equippedWeaponTypeVarbit, attackStyleVarbit,
					castingModeVarbit);
		}


		int currentAutoRetaliateVarbit = client.getVarpValue(172);

		if (currentAutoRetaliateVarbit != autoRetaliateVarbit)
		{
			getAutoRetaliateVarbit();
		}

	}

	@Nullable
	public void getAutoRetaliateVarbit()
	{
		// Auto-retaliate varbit 172
		autoRetaliateVarbit = client.getVarpValue(172);
	}

	@Nullable
	public String getAutoRetaliateText()
	{
		// This has a value of 0 if you have auto retaliate enabled and a value of 1 if you do not.
		if (autoRetaliateVarbit == 0)
		{
			autoRetaliate = "On";
		}

		else
		{
			autoRetaliate = "Off";
		}

		return autoRetaliate;
	}

}

