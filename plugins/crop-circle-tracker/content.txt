package cropcircletracker;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.TitleCaseListCellRenderer;

import javax.inject.Inject;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.util.*;
import java.util.List;

@Slf4j
public class CropCircleTrackerPanel extends PluginPanel
{
    private static final Color BACKGROUND_COLOR = ColorScheme.DARK_GRAY_COLOR;

    private final CropCircleTrackerPlugin plugin;

    /* Keep track of whether the panel is open or not so that we don't redraw things unnecessarily. */
    public boolean open = false;

    /* A mapping of worlds to likelihoods. */
    public JsonObject likelihoods = null;

    private JComboBox<String> locationDropdownMenu;

    private Table table;

    @Inject
    public CropCircleTrackerPanel(CropCircleTrackerPlugin plugin)
    {
        this.plugin = plugin;
        setBackground(BACKGROUND_COLOR);
        setLayout(new GridBagLayout());
        addLocationLabel();
        addLocationDropdownMenu();
        addTable();
    }

    private void addLocationLabel()
    {
        JLabel label = new JLabel();
        label.setText("Location:");
        add(label, constraints(0, 0, 1));
    }

    private void addLocationDropdownMenu()
    {
        locationDropdownMenu = new JComboBox<>();
        locationDropdownMenu.setRenderer(new TitleCaseListCellRenderer());
        locationDropdownMenu.setFocusable(false);
        locationDropdownMenu.setForeground(Color.WHITE);
        locationDropdownMenu.setMaximumRowCount(CropCircle.values().length);
        ArrayList<String> names = new ArrayList<>();
        for (CropCircle cropCircle: CropCircle.values())
        {
            names.add(cropCircle.getName());
        }
        Collections.sort(names);
        for (String name: names)
        {
            locationDropdownMenu.addItem(name);
        }
        locationDropdownMenu.setSelectedItem(plugin.config.defaultLocation().getName());
        locationDropdownMenu.addItemListener(e ->
        {
            if (e.getStateChange() == ItemEvent.SELECTED)
            {
                updateTable();
            }
        });
        add(locationDropdownMenu, constraints(1, 0, 1));
    }

    private void addTable()
    {
        table = new Table(this.plugin);
        GridBagConstraints constraints = constraints(0, 2, 2);
        constraints.insets = new Insets(10, 0, 0, 0);
        add(table, constraints);
    }

    /*
    Repopulate the table based on the given mapping of worlds to likelihoods, and the selected location from the
    dropdown menu.
    */
    public void updateTable()
    {
        if (this.likelihoods != null)
        {
            String selectedLocationName = String.valueOf(locationDropdownMenu.getSelectedItem());
            CropCircle cropCircle = CropCircle.fromName(selectedLocationName);
            if (cropCircle == null)
            {
                log.error("Invalid location selected");
                return;
            }
            String selectedLocationNumber = String.valueOf(cropCircle.getIndex());

            // Get worlds and likelihoods for the selected location.
            List<List<Object>> worldLikelihoodPairs = new ArrayList<>();
            this.likelihoods.keySet().forEach(world ->
            {
                JsonObject likelihoodsForWorld = this.likelihoods.get(world).getAsJsonObject();

                // Accept locations from the server as both location names (e.g. "Gwenith") or
                // location numbers (e.g. "8")
                JsonElement likelihoodJsonElement = null;
                if (likelihoodsForWorld.keySet().contains(selectedLocationName)){
                    likelihoodJsonElement = likelihoodsForWorld.get(selectedLocationName);
                } else if (likelihoodsForWorld.keySet().contains(selectedLocationNumber)) {
                    likelihoodJsonElement = likelihoodsForWorld.get(selectedLocationNumber);
                }

                if (likelihoodJsonElement != null)
                {
                    double likelihood = likelihoodJsonElement.getAsDouble();
                    List<Object> pair = new ArrayList<>();
                    pair.add(world);
                    pair.add(likelihood);
                    worldLikelihoodPairs.add(pair);
                }
            });

            // Repopulate table.
            table.update(worldLikelihoodPairs);
        }
    }

    public void clearTable()
    {
        likelihoods = null;
        table.clear();
    }

    public void displayError(String errorMessage)
    {
        likelihoods = null;
        table.displayError(errorMessage);
    }

    public void displayErrors(List<String> errorMessages)
    {
        likelihoods = null;
        table.displayErrors(errorMessages);
    }

    public void onActivate()
    {
        clearTable();
        open = true;
        plugin.getLikelihoods();
    }

    public void onDeactivate()
    {
        open = false;
    }

    /* Convenience method for returning a GridBagConstraints object with some common values. */
    private GridBagConstraints constraints(int gridx, int gridy, int gridwidth)
    {
        GridBagConstraints c = new GridBagConstraints();
        c.gridx = gridx;
        c.gridy = gridy;
        c.gridwidth = gridwidth;
        c.weightx = 1;
        c.fill = GridBagConstraints.HORIZONTAL;
        return c;
    }
}

package cropcircletracker;

import net.runelite.client.ui.ColorScheme;
import net.runelite.http.api.worlds.World;
import net.runelite.http.api.worlds.WorldType;

import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

public class Table extends JPanel {
    private static final Color HEADING_COLOR = ColorScheme.SCROLL_TRACK_COLOR;
    private static final Color ROW_COLOR_1 = ColorScheme.DARK_GRAY_COLOR;
    private static final Color ROW_COLOR_2 = new Color(44, 44, 44);
    private static final List<WorldType> worldTypesToDisplay = Arrays.asList(
            WorldType.BOUNTY,
            WorldType.HIGH_RISK,
            WorldType.LAST_MAN_STANDING,
            WorldType.MEMBERS,
            WorldType.PVP,
            WorldType.SKILL_TOTAL,
            WorldType.SEASONAL
    );

    private final CropCircleTrackerPlugin plugin;

    public Table(CropCircleTrackerPlugin plugin) {
        super();
        this.plugin = plugin;
        setLayout(new GridLayout(0, 1));
    }

    private void addHeadingRow()
    {
        add(new HeadingRow("World", "Likelihood", "World Type", HEADING_COLOR));
    }

    private void addMessageRow(String message)
    {
        add(new MessageRow(message, ROW_COLOR_1));
    }

    private void addEntryRow(int world, double likelihood, Color rowColor)
    {
        add(new EntryRow(world, likelihood, rowColor, this.plugin));
    }

    public void update(List<List<Object>> worldLikelihoodPairs)
    {
        removeAll();
        addHeadingRow();

        // Sort sightings by likelihood.
        Collections.sort(worldLikelihoodPairs, (a, b) -> {
            double likelihoodA = (double) a.get(1);
            double likelihoodB = (double) b.get(1);
            return likelihoodA < likelihoodB ? 1 : -1;
        });

        AtomicInteger rowIndex = new AtomicInteger();
        if (worldLikelihoodPairs.size() > 0)
        {
            for (List<Object> pair : worldLikelihoodPairs)
            {
                int world = Integer.parseInt((String) pair.get(0));
                double likelihood = (double) pair.get(1);
                if (shouldDisplay(world, likelihood))
                {
                    Color rowColor = rowIndex.get() % 2 == 0 ? ROW_COLOR_1 : ROW_COLOR_2;
                    rowIndex.getAndIncrement();
                    addEntryRow(world, likelihood, rowColor);
                }
            }
        }
        else
        {
            addMessageRow("No known crop circles");
        }
        revalidate();
        repaint();
    }

    public void clear()
    {
        removeAll();
        addMessageRow("Loading...");
        revalidate();
        repaint();
    }

    public void displayError(String errorMessage)
    {
        removeAll();
        addMessageRow(errorMessage);
        revalidate();
        repaint();
    }

    public void displayErrors(List<String> errorMessages)
    {
        removeAll();
        for (String errorMessage: errorMessages)
        {
            addMessageRow(errorMessage);
        }
        revalidate();
        repaint();
    }

    /* Decide if we should display a row for the given world and likelihood. */
    private boolean shouldDisplay(int worldID, double likelihood)
    {
        if (likelihood < plugin.config.minimumLikelihood() / 100d)
        {
            return false;
        }
        World world = plugin.worldMapping.get(worldID);
        if (world == null)
        {
            return false;
        }
        EnumSet<WorldType> worldTypes = world.getTypes();
        for (WorldType worldType: worldTypes)
        {
            // If the given world has any world types that are not considered "good" then don't display it. Even if
            // we don't know about the world type (e.g. if a new world type is added after this code has been written),
            // it's safer to not display worlds than it is to display worlds we know nothing about.
            if (!worldTypesToDisplay.contains(worldType))
            {
                return false;
            }
        }
        if (worldTypes.contains(WorldType.PVP) && !plugin.config.showPVPWorlds())
        {
            return false;
        }
        if (worldTypes.contains(WorldType.HIGH_RISK) && !plugin.config.showHighRiskWorlds())
        {
            return false;
        }
        if (worldTypes.contains(WorldType.SEASONAL) && !plugin.config.showSeasonalWorlds())
        {
            return false;
        }
        if (worldTypes.contains(WorldType.SKILL_TOTAL))
        {
            switch (world.getActivity()) {
                case "1250 skill total":
                    if (!plugin.config.show1250TotalWorlds()) {
                        return false;
                    }
                    break;
                case "1500 skill total":
                    if (!plugin.config.show1500TotalWorlds()) {
                        return false;
                    }
                    break;
                case "1750 skill total":
                    if (!plugin.config.show1750TotalWorlds()) {
                        return false;
                    }
                    break;
                case "2000 skill total":
                    if (!plugin.config.show2000TotalWorlds()) {
                        return false;
                    }
                    break;
                case "2200 skill total":
                    if (!plugin.config.show2200TotalWorlds()) {
                        return false;
                    }
                    break;
            }
        }
        return true;
    }
}

package cropcircletracker;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup(CropCircleTrackerConfig.GROUP)
public interface CropCircleTrackerConfig extends Config {
    String GROUP = "cropcircletracker";
    String HIDE_TOOLBAR_BUTTON_NAME = "hideToolbarButton";

    @ConfigSection(position = 10, name = "World Types", description = "Settings for displaying different world types.")
    String worldTypeSection = "World Types";

    @ConfigSection(position = 20, name = "Endpoints", description = "Settings for external endpoints.")
    String endpointsSection = "Endpoints";

    @ConfigItem(position = 1, keyName = "defaultLocation", name = "Default", description = "The default crop circle location used when first opening the plugin.")
    default CropCircle defaultLocation()
    {
        return CropCircle.BRIMHAVEN;
    }

    @ConfigItem(position = 2, keyName = "minimumLikelihood", name = "Minimum likelihood", description = "Minimum likelihood percentage to show in the table. Increase this to hide low percentage sightings.")
    default int minimumLikelihood()
    {
        return 0;
    }

    @ConfigItem(position = 3, keyName = HIDE_TOOLBAR_BUTTON_NAME, name = "Hide toolbar button", description = "Hide the toolbar button for this plugin. Use this if you want to contribute to crowdsourcing but don't care about the sightings yourself.")
    default boolean hideToolbarButton()
    {
        return false;
    }

    @ConfigItem(position = 1, keyName = "showPVPWorlds", name = "Show PVP worlds", description = "Show PvP worlds in the table.", section = worldTypeSection)
    default boolean showPVPWorlds()
    {
        return false;
    }

    @ConfigItem(position = 2, keyName = "showHighRiskWorlds", name = "Show high risk worlds", description = "Show high risk worlds in the table.", section = worldTypeSection)
    default boolean showHighRiskWorlds()
    {
        return true;
    }

    @ConfigItem(position = 3, keyName = "show1250TotalWorlds", name = "Show 1250 total worlds", description = "Show 1250 total worlds in the table.", section = worldTypeSection)
    default boolean show1250TotalWorlds()
    {
        return true;
    }

    @ConfigItem(position = 4, keyName = "show1500TotalWorlds", name = "Show 1500 total worlds", description = "Show 1500 total worlds in the table.", section = worldTypeSection)
    default boolean show1500TotalWorlds()
    {
        return true;
    }

    @ConfigItem(position = 5, keyName = "show1750TotalWorlds", name = "Show 1750 total worlds", description = "Show 1750 total worlds in the table.", section = worldTypeSection)
    default boolean show1750TotalWorlds()
    {
        return true;
    }

    @ConfigItem(position = 6, keyName = "show2000TotalWorlds", name = "Show 2000 total worlds", description = "Show 2000 total worlds in the table.", section = worldTypeSection)
    default boolean show2000TotalWorlds()
    {
        return true;
    }

    @ConfigItem(position = 7, keyName = "show2200TotalWorlds", name = "Show 2200 total worlds", description = "Show 2200 total worlds in the table.", section = worldTypeSection)
    default boolean show2200TotalWorlds()
    {
        return true;
    }

    @ConfigItem(position = 8, keyName = "showSeasonalWorlds", name = "Show Seasonal/League worlds", description = "Show Seasonal/League worlds in the table.", section = worldTypeSection)
    default boolean showSeasonalWorlds()
    {
        return true;
    }

    @ConfigItem(position = 1, keyName = "getEndpoint", name = "GET endpoint", description = "HTTP endpoint to get sighting information from.", section = endpointsSection)
    default String getEndpoint()
    {
        return "https://cropcircletracker.com/get/";
    }

    @ConfigItem(position = 2, keyName = "postEndpoint", name = "POST endpoint", description = "HTTP endpoint to post sightings to.", section = endpointsSection)
    default String postEndpoint()
    {
        return "https://cropcircletracker.com/post/";
    }

    @ConfigItem(position = 3, keyName = "sharedKey", name = "Shared key", description = "A shared key used to authenticate with the server.", section = endpointsSection)
    default String sharedKey()
    {
        return "gnomechild123";
    }
}

package cropcircletracker;

import net.runelite.client.ui.FontManager;
import net.runelite.http.api.worlds.World;
import net.runelite.http.api.worlds.WorldType;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.*;
import java.util.List;

/*
A component for displaying an entry in the panel table (i.e. for displaying the world/likelihood/world type).
*/
class EntryRow extends JPanel
{
	private static final int COLUMN_1_WIDTH = 50;
	private static final int COLUMN_2_WIDTH = 50;
	private static final int COLUMN_3_WIDTH = 100;
	private static final int COLUMN_HEIGHT = 24;
	private static final Color CURRENT_WORLD_COLOR = new Color(0, 255, 0);
	private static final Color LIKELIHOOD_COLOR_1 = new Color(0, 255, 0);
	private static final Color LIKELIHOOD_COLOR_2 = new Color(128, 255, 0);
	private static final Color LIKELIHOOD_COLOR_3 = new Color(255, 255, 0);
	private static final Color LIKELIHOOD_COLOR_4 = new Color(255, 128, 0);
	private static final Color LIKELIHOOD_COLOR_5 = new Color(255, 0, 0);
	private static final Color DANGEROUS_WORLD_TYPE_COLOR = new Color(255, 0, 0);
	private static final List<WorldType> dangerousWorldTypes = Arrays.asList(
			WorldType.BOUNTY,
			WorldType.HIGH_RISK,
			WorldType.PVP
	);
	private final CropCircleTrackerPlugin plugin;
	private Color lastBackground;

	EntryRow(int world, double likelihood, Color backgroundColor, CropCircleTrackerPlugin plugin)
	{
		super();
		this.plugin = plugin;
		setLayout(new GridBagLayout());
		addLabel(String.valueOf(world), getWorldColor(world), COLUMN_1_WIDTH);
		addLabel(getLikelihoodString(likelihood), getLikelihoodColor(likelihood), COLUMN_2_WIDTH);
		addLabel(getWorldTypeString(world), getWorldTypeColor(world), COLUMN_3_WIDTH);
		if (backgroundColor != null)
		{
			setBackground(backgroundColor);
		}

		addMouseListener(new MouseAdapter()
		{
			@Override
			public void mouseClicked(MouseEvent mouseEvent)
			{
				if (mouseEvent.getClickCount() == 2)
				{
					plugin.worldHopper.scheduleHop(world);
				}
			}
			@Override
			public void mouseEntered(MouseEvent mouseEvent)
			{
				EntryRow.this.lastBackground = getBackground();
				setBackground(getBackground().brighter());
			}
			@Override
			public void mouseExited(MouseEvent mouseEvent)
			{
				setBackground(lastBackground);
			}
		});
	}

	private String getLikelihoodString(double likelihood)
	{
		if (likelihood >= 0.945)
		{
			return "95%+";
		}
		else if (likelihood <= 0.01)
		{
			return "1%";
		}
		else
		{
			return Math.round(likelihood * 100) + "%";
		}
	}

	private String getWorldTypeString(int worldID)
	{
		World world = plugin.worldMapping.get(worldID);
		EnumSet<WorldType> worldTypes = world.getTypes();
		if (worldTypes.contains(WorldType.PVP) && worldTypes.contains(WorldType.HIGH_RISK))
		{
			return "PvP - High Risk";
		}
		else if (worldTypes.contains(WorldType.PVP))
		{
			return "PvP";
		}
		else if (worldTypes.contains(WorldType.HIGH_RISK))
		{
			return "High Risk";
		}
		else if (worldTypes.contains(WorldType.BOUNTY))
		{
			return "Target World";
		}
		else if (worldTypes.contains(WorldType.SKILL_TOTAL))
		{
			return world.getActivity();
		}
		else if (worldTypes.contains(WorldType.SEASONAL))
		{
			return world.getActivity();
		}
		else
		{
			return "-";
		}
	}

	private Color getWorldColor(int worldID)
	{
		if (worldID == plugin.client.getWorld())
		{
			return CURRENT_WORLD_COLOR;
		}
		return null;
	}

	private Color getLikelihoodColor(double likelihood)
	{
		if (likelihood >= 0.8)
		{
			return LIKELIHOOD_COLOR_1;
		}
		else if (likelihood >= 0.6)
		{
			return LIKELIHOOD_COLOR_2;
		}
		else if (likelihood >= 0.4)
		{
			return LIKELIHOOD_COLOR_3;
		}
		else if (likelihood >= 0.2)
		{
			return LIKELIHOOD_COLOR_4;
		}
		else
		{
			return LIKELIHOOD_COLOR_5;
		}
	}

	private Color getWorldTypeColor(int worldID)
	{
		World world = plugin.worldMapping.get(worldID);
		EnumSet<WorldType> worldTypes = world.getTypes();
		for (WorldType dangerousWorldType : dangerousWorldTypes)
		{
			if (worldTypes.contains(dangerousWorldType))
			{
				return DANGEROUS_WORLD_TYPE_COLOR;
			}
		}
		return null;
	}

	private void addLabel(String text, Color textColor, int width)
	{
		JLabel label = new JLabel(text);
		label.setFont(FontManager.getRunescapeFont());
		if (textColor != null)
		{
			label.setForeground(textColor);
		}
		label.setPreferredSize(new Dimension(width, COLUMN_HEIGHT));
		label.setMinimumSize(new Dimension(width, COLUMN_HEIGHT));
		label.setMaximumSize(new Dimension(width, COLUMN_HEIGHT));
		label.setHorizontalAlignment(SwingConstants.CENTER);
		add(label, constraints(1, GridBagConstraints.BOTH));
	}

	/* Convenience method for returning a GridBagConstraints object with some common values. */
	private GridBagConstraints constraints(int weightX, int fill)
	{
		GridBagConstraints c = new GridBagConstraints();
		c.weightx = weightX;
		c.fill = fill;
		return c;
	}
}

package cropcircletracker;

import net.runelite.client.ui.FontManager;

import javax.swing.*;
import java.awt.*;

/*
A component for displaying headings in the panel table.
*/
class HeadingRow extends JPanel
{
	private final static int COLUMN_1_WIDTH = 50;
	private final static int COLUMN_2_WIDTH = 50;
	private final static int COLUMN_3_WIDTH = 100;
	private final static int COLUMN_HEIGHT = 24;

	HeadingRow(String column1, String column2, String column3, Color backgroundColor)
	{
		super();
		setLayout(new GridBagLayout());
		addLabel(column1, COLUMN_1_WIDTH);
		addLabel(column2, COLUMN_2_WIDTH);
		addLabel(column3, COLUMN_3_WIDTH);
		if (backgroundColor != null)
		{
			setBackground(backgroundColor);
		}
	}

	private void addLabel(String text, int width)
	{
		JLabel label = new JLabel(text);
		label.setFont(FontManager.getRunescapeFont());
		label.setPreferredSize(new Dimension(width, COLUMN_HEIGHT));
		label.setMaximumSize(new Dimension(width, COLUMN_HEIGHT));
		label.setMinimumSize(new Dimension(width, COLUMN_HEIGHT));
		label.setHorizontalAlignment(SwingConstants.CENTER);
		add(label, constraints(1, GridBagConstraints.BOTH));
	}

	/* Convenience method for returning a GridBagConstraints object with some common values. */
	private GridBagConstraints constraints(int weightX, int fill)
	{
		GridBagConstraints c = new GridBagConstraints();
		c.weightx = weightX;
		c.fill = fill;
		return c;
	}
}

package cropcircletracker;

import net.runelite.api.GameState;
import net.runelite.api.widgets.ComponentID;
import net.runelite.client.util.WorldUtil;
import net.runelite.http.api.worlds.World;

/* Class for handling all the world hopping logic. Most of the logic was copied from the world hopper plugin. */
public class WorldHopper
{
    private CropCircleTrackerPlugin plugin;
    private net.runelite.api.World targetWorld;
    private static final int DISPLAY_SWITCHER_MAX_ATTEMPTS = 3;
    private int displaySwitcherAttempts = 0;

    WorldHopper(CropCircleTrackerPlugin plugin)
    {
        this.plugin = plugin;
    }

    /*
    Schedule a world hop. This won't immediately world hop, it'll set the target world so that handleHop can perform the
    hop in the next game ticks.
    */
    public void scheduleHop(int worldID)
    {
        plugin.clientThread.invoke(() -> {
            World world = plugin.worldMapping.get(worldID);
            if (world == null)
            {
                return;
            }
            final net.runelite.api.World rsWorld = plugin.client.createWorld();
            rsWorld.setActivity(world.getActivity());
            rsWorld.setAddress(world.getAddress());
            rsWorld.setId(world.getId());
            rsWorld.setPlayerCount(world.getPlayers());
            rsWorld.setLocation(world.getLocation());
            rsWorld.setTypes(WorldUtil.toWorldTypes(world.getTypes()));
            if (plugin.client.getGameState() == GameState.LOGIN_SCREEN)
            {
                plugin.client.changeWorld(rsWorld);
                return;
            }
            targetWorld = rsWorld;
        });
    }

    /*
    Actually perform the world hop if a target world has been set. This method should be called on each game tick. It
    will take multiple ticks to perform the hop (at least one tick to open the world hopper, and another to make the
    hop).
    */
    public void handleHop()
    {
        if (targetWorld == null)
        {
            return;
        }
        if (plugin.client.getWidget(ComponentID.WORLD_SWITCHER_WORLD_LIST) == null)
        {
            plugin.client.openWorldHopper();

            if (++displaySwitcherAttempts >= DISPLAY_SWITCHER_MAX_ATTEMPTS)
            {
                reset();
            }
        }
        else
        {
            plugin.client.hopToWorld(targetWorld);
            reset();
        }
    }

    private void reset()
    {
        targetWorld = null;
        displaySwitcherAttempts = 0;
    }
}

package cropcircletracker;

import com.google.gson.Gson;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.time.temporal.ChronoUnit;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import javax.inject.Inject;
import javax.swing.*;

import com.google.gson.JsonObject;
import com.google.gson.JsonSyntaxException;
import com.google.inject.Provides;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.WorldChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.WorldService;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.task.Schedule;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import net.runelite.http.api.worlds.World;
import net.runelite.http.api.worlds.WorldResult;
import okhttp3.*;

import static net.runelite.api.ObjectID.CENTRE_OF_CROP_CIRCLE;

@Slf4j
@PluginDescriptor(name = "Crop Circle Tracker")
public class CropCircleTrackerPlugin extends Plugin
{
	private static final int CROP_CIRCLE_OBJECT = CENTRE_OF_CROP_CIRCLE;
	private static final int GET_LIKELIHOODS_PERIOD_SECONDS = 10;
	private static final int CROP_CIRCLE_RECHECK_PERIOD_SECONDS = 10;
	private static final MediaType JSON = MediaType.parse("application/json; charset=utf-8");
	private static final Map<WorldPoint, CropCircle> MAPPING = CropCircle.mapping();

	@Inject
	@Getter
	public CropCircleTrackerConfig config;

	@Inject
	private ConfigManager configManager;

	@Inject
	public Client client;

	@Inject
	public ClientThread clientThread;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	private WorldService worldService;

	@Inject
	private OkHttpClient okHttpClient;

	@Inject
	private Gson gson;

	public Map<Integer, World> worldMapping = new HashMap<>();

	public WorldHopper worldHopper = new WorldHopper(this);

	private NavigationButton navButton = null;

	private CropCircleTrackerPanel panel;

	private CropCircle lastCropCircle = null;

	private int currentWorld = -1;

	@Provides
	CropCircleTrackerConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(CropCircleTrackerConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		panel = injector.getInstance(CropCircleTrackerPanel.class);
		final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "/icon.png");
		navButton = NavigationButton.builder()
			.tooltip("Crop Circle Tracker")
			.icon(icon)
			.priority(7)
			.panel(panel)
			.build();
		if (!config.hideToolbarButton())
		{
			clientToolbar.addNavigation(navButton);
		}
		setWorldMapping();
	}
	
	@Override
	protected void shutDown() throws Exception
	{
		clientToolbar.removeNavigation(navButton);
	}

	@Subscribe
	public void onConfigChanged(final ConfigChanged event)
	{
		if (event.getGroup().equals(CropCircleTrackerConfig.GROUP))
		{
			if (event.getKey().equals(CropCircleTrackerConfig.HIDE_TOOLBAR_BUTTON_NAME))
			{
				if (config.hideToolbarButton())
				{
					clientToolbar.removeNavigation(navButton);
				}
				else
				{
					clientToolbar.addNavigation(navButton);
				}
			}
		}
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		if (event.getGameState() == GameState.LOGGED_IN)
		{
			lastCropCircle = null;
			currentWorld = client.getWorld();
		}
	}

	@Subscribe
	public void onGameTick(GameTick gameTick)
	{
		worldHopper.handleHop();
	}

	/* Send an HTTP GET request for crop circle likelihoods and update the table. */
	@Schedule(period = GET_LIKELIHOODS_PERIOD_SECONDS, unit = ChronoUnit.SECONDS, asynchronous = true)
	public void getLikelihoods()
	{
		// Don't make constant GET requests unless the panel is open.
		if (panel.open)
		{
			makeRequest(
					"GET",
					config.getEndpoint(),
					null,
					(call, response) -> {
						try
						{
							JsonObject likelihoods = gson.fromJson(response.body().string(), JsonObject.class);
							SwingUtilities.invokeLater(() -> {
								panel.likelihoods = likelihoods;
								panel.updateTable();
							});
						}
						catch (IOException | JsonSyntaxException e)
						{
							log.error("GET failed: {}", e.getMessage());
						}
					},
					(call, response) -> {
						if (response.code() == 401)
						{
							SwingUtilities.invokeLater(() -> panel.displayError("Server authentication error"));
						}
						else if (response.code() == 503)
						{
							SwingUtilities.invokeLater(() -> panel.displayErrors(
									Arrays.asList(
											"Server temporarily unavailable.",
											"The server goes offline every ",
											"Wednesday between 11:00 and ",
											"12:00 UK time to match the ",
											"weekly game update. If you're",
											"seeing this message outside ",
											"that time, something has ",
											"gone wrong."
									)
							));
						}
						else
						{
							SwingUtilities.invokeLater(() -> panel.displayError("Server error"));
						}
					},
					(call, e) -> SwingUtilities.invokeLater(() -> panel.displayError("Server unavailable"))
			);
		}
	}

	/* Store a mapping of world ID to world. */
	private void setWorldMapping()
	{
		WorldResult worldResult = worldService.getWorlds();
		if (worldResult != null)
		{
			for (World world :  worldResult.getWorlds())
			{
				worldMapping.put(world.getId(), world);
			}
		}
	}

	/* Send an HTTP POST request for a crop circle sighting. */
	private void postSighting(CropCircle cropCircle)
	{
		int world = currentWorld;

		// Check we're actually logged in.
		if (client.getGameState() != GameState.LOGGED_IN)
		{
			lastCropCircle = null;
			return;
		}

		// Check we actually have a current world recorded.
		if (world == -1)
		{
			lastCropCircle = null;
			return;
		}

		// Check that the crop circle is still visible.
		if (!cropCircleVisible(cropCircle.getWorldPoint()))
		{
			lastCropCircle = null;
			return;
		}

		// Check that the world has not changed since determining the crop circle is still visible.
		if (world != currentWorld)
		{
			lastCropCircle = null;
			return;
		}

		Map<String, Object> data = new HashMap<>();
		data.put("world", world);
		data.put("location", cropCircle.getName());
		makeRequest(
				"POST",
				config.postEndpoint(),
				RequestBody.create(JSON, gson.toJson(data)),
				(call, response) -> {},
				(call, response) -> {},
				(call, e) -> {}
		);
		lastCropCircle = cropCircle;
	}

	private void makeRequest(
			String method, String url, RequestBody body, BiConsumer<Call, Response> onSuccessfulResponse,
			BiConsumer<Call, Response> onUnsuccessfulResponse, BiConsumer<Call, Exception> onFailure
	)
	{
		log.debug("Making {} request to {} with body {}", method, url, body);
		Request request = null;
		try
		{
			request = new Request.Builder()
					.url(url)
					.addHeader("Authorization", "Bearer " + config.sharedKey())
					.method(method, body)
					.build();
		}
		catch (IllegalArgumentException e)
		{
			log.error("Invalid URL: {}", e.getMessage());
			SwingUtilities.invokeLater(() -> panel.displayError("Invalid " + method + " endpoint"));
		}
		if (request != null)
		{
			okHttpClient.newCall(request).enqueue(new Callback()
				{
					@Override
					public void onResponse(Call call, Response response)
					{
						if (response.isSuccessful())
						{
							onSuccessfulResponse.accept(call, response);
						}
						else
						{
							log.error("{} unsuccessful: {}", method, response.message());
							onUnsuccessfulResponse.accept(call, response);
						}
						response.close();
					}
					@Override
					public void onFailure(Call call, IOException e)
					{
						log.error("{} failed: {}", method, e.getMessage());
						onFailure.accept(call, e);
					}
				}
			);
		}
	}

	/* Determine if a crop circle is visible on the given WorldPoint. */
	private boolean cropCircleVisible(WorldPoint worldPoint)
	{
		LocalPoint localPoint = LocalPoint.fromWorld(client, worldPoint);
		if (localPoint != null) {
			Tile[][][] tiles = client.getScene().getTiles();
			Tile tile = tiles[worldPoint.getPlane()][localPoint.getSceneX()][localPoint.getSceneY()];
			for (GameObject object : tile.getGameObjects())
			{
				if (object != null && object.getId() == CROP_CIRCLE_OBJECT)
				{
					return true;
				}
			}
		}
		return false;
	}

	/* Periodically check if the last seen crop circle is still visible. */
	@Schedule(period = CROP_CIRCLE_RECHECK_PERIOD_SECONDS, unit = ChronoUnit.SECONDS, asynchronous = true)
	public void poll()
	{
		if (lastCropCircle != null)
		{
			postSighting(lastCropCircle);
		}
	}

	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned event)
	{
		if (event.getGameObject().getId() == CROP_CIRCLE_OBJECT)
		{
			CropCircle cropCircle = MAPPING.get(event.getTile().getWorldLocation());
			if (cropCircle != null)
			{
				postSighting(cropCircle);
			}
		}
	}

	@Subscribe
	public void onWorldChanged(WorldChanged event)
	{
		SwingUtilities.invokeLater(() -> panel.updateTable());
	}
}

package cropcircletracker;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.coords.WorldPoint;

import java.util.HashMap;
import java.util.Map;

@RequiredArgsConstructor
public enum CropCircle
{
    // I'd prefer having these ordered by index, but they're ordered alphabetically so that the defaultLocation config
    // dropdown is in alphabetical order. There's probably a better solution to this problem.
    ALDARIN(16, "Aldarin", new WorldPoint(1396, 2902, 0)),
    BRIMHAVEN(11, "Brimhaven", new WorldPoint(2808, 3200, 0)),
    CATHERBY(9, "Catherby", new WorldPoint(2819, 3470, 0)),
    CIVITAS_ILLA_FORTIS(15, "Civitas illa Fortis", new WorldPoint(1673, 3049, 0)),
    DORICS_HOUSE(0, "Doric's House", new WorldPoint(2953, 3444, 0)),
    DRAYNOR(2, "Draynor", new WorldPoint(3115, 3273, 0)),
    EAST_ARDOUGNE(18, "East Ardougne", new WorldPoint(2647, 3348, 0)),
    FARMING_GUILD(5, "Farming Guild", new WorldPoint(1302, 3711, 0)),
    GRAND_EXCHANGE(4, "Grand Exchange", new WorldPoint(3141, 3461, 0)),
    GWENITH(8, "Gwenith", new WorldPoint(2195, 3402, 0)),
    HARMONY_ISLAND(7, "Harmony Island", new WorldPoint(3810, 2852, 0)),
    HOSIDIUS(6, "Hosidius", new WorldPoint(1738, 3533, 0)),
    KOUREND_CASTLE(14, "Kourend Castle", new WorldPoint(1660, 3637, 0)),
    LUMBRIDGE_MILL(17, "Lumbridge Mill", new WorldPoint(3160, 3299, 0)),
    MISCELLANIA(20, "Miscellania", new WorldPoint(2538, 3845, 0)),
    MOS_LE_HARMLESS(12, "Mos Le'Harmless", new WorldPoint(3703, 2975, 0)),
    RIMMINGTON(3, "Rimmington", new WorldPoint(2978, 3216, 0)),
    SOUTH_OF_VARROCK(19, "South of Varrock", new WorldPoint(3212, 3345, 0)),
    TAVERLEY(13, "Taverley", new WorldPoint(2896, 3406, 0)),
    TREE_GNOME_STRONGHOLD(10, "Tree Gnome Stronghold", new WorldPoint(2435, 3472, 0)),
    YANILLE(1, "Yanille", new WorldPoint(2582, 3104, 0));

    @Getter
    private final int index;

    @Getter
    private final String name;

    @Getter
    private final WorldPoint worldPoint;

    public static Map<WorldPoint, CropCircle> mapping()
    {
        Map<WorldPoint, CropCircle> mapping = new HashMap<>();
        for (CropCircle cropCircle: CropCircle.values())
        {
            mapping.put(cropCircle.getWorldPoint(), cropCircle);
        }
        return mapping;
    }

    public static CropCircle fromName(String name)
    {
        for (CropCircle cropCircle: CropCircle.values())
        {
            if (cropCircle.getName().equals(name))
            {
                return cropCircle;
            }
        }
        return null;
    }
}

package cropcircletracker;

import net.runelite.client.ui.FontManager;

import javax.swing.*;
import java.awt.*;

/*
A component for displaying a message in the panel table (e.g. "Loading..." or an error message).
*/
class MessageRow extends JPanel
{
    MessageRow(String message, Color backgroundColor)
    {
        super();
        setLayout(new GridBagLayout());
        addLabel(message);
        if (backgroundColor != null)
        {
            setBackground(backgroundColor);
        }
    }

    private void addLabel(String message)
    {
        JLabel label = new JLabel(message);
        label.setFont(FontManager.getRunescapeFont());
        label.setHorizontalAlignment(SwingConstants.CENTER);
        add(label, constraints(1, GridBagConstraints.BOTH));
    }

    /* Convenience method for returning a GridBagConstraints object with some common values. */
    private GridBagConstraints constraints(int weightX, int fill)
    {
        GridBagConstraints c = new GridBagConstraints();
        c.weightx = weightX;
        c.fill = fill;
        return c;
    }
}

package cropcircletracker;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CropCirclePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CropCircleTrackerPlugin.class);
		RuneLite.main(args);
	}
}
