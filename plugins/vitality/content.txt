package com.natesky9;

import net.runelite.api.*;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.time.LocalDate;
import java.time.Month;

public class VitalityOverlay extends Overlay {
    private static final Class<?> PLUGIN_CLASS = VitalityPlugin.class;
    public static final ImageIcon HEALSPLAT = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS,
            "/heal.png"));
    public static final ImageIcon APRIL = new ImageIcon(ImageUtil.loadImageResource(PLUGIN_CLASS,
            "/cabbage.png"));

    @Inject
    private VitalityPlugin plugin;
    @Inject
    private VitalityConfig config;
    @Inject
    private Client client;

    @Override
    public Dimension render(Graphics2D graphics) {
        Actor actor = plugin.getLocalPlayer();

        LocalPoint playerLocation = actor.getLocalLocation();
        LocalPoint location = new LocalPoint(playerLocation.getX(),playerLocation.getY());

        //redundant check
        //if (actor == null) return null;

        if (LocalDate.now().getDayOfMonth() == 1
                && LocalDate.now().getMonth() == Month.APRIL
                && config.aprilFools() && !plugin.fools.isEmpty())
        {
            BufferedImage fool = drawJokeHitsplat();
            int offset = getAnchorPoint(actor);
            Point point = Perspective.getCanvasImageLocation(client,location,fool,offset);
            int x = (((client.getGameCycle() % 120) / 30)-1) % 2;
            x *= 16;
            int y = ((((client.getGameCycle()+30) % 120) / 30)-1) % 2;
            y *= 16;
            if (client.getGameCycle() % 30 < 15)
                OverlayUtil.renderImageLocation(graphics, new Point(point.getX()-x-4, point.getY()-y),fool);
        }

        int value = config.ignoreRegen() ? 1:0;

        if (plugin.getDifference() <= value) return null;
        if (plugin.getTimer() > 100) return null;
        plugin.setTimer(plugin.getTimer()+1);

        BufferedImage image = drawHitsplat(plugin.getDifference());
        int offset = getAnchorPoint(actor);
        //Point point = Perspective.getCanvasImageLocation(client,location,image,offset);
        //using a better perspective point
        Point point = actor.getCanvasImageLocation(image,actor.getLogicalHeight()-offset);
        int rise = 0;
        if (config.healRise())
            rise = (plugin.getTimer() /20);
        //not needed anymore?
        //rise -= 2;//offset it so it's not in the crotch
        //Point p = new Point(point.getX(), point.getY());
        OverlayUtil.renderImageLocation(graphics, new Point(point.getX()-4, point.getY()-rise),image);

        return null;
    }
    enum cardinal
    {
        north,
        east,
        south,
        west
    }
    public int getAnchorPoint(Actor actor)
    {
        switch (config.anchorPoints())
        {
            case HEAD: return 0;
            case CHEST: return actor.getLogicalHeight()/5;
            default:return actor.getLogicalHeight();
        }
    }
    private BufferedImage drawHitsplat(int damage)
    {
        BufferedImage bi = iconToBuffered(HEALSPLAT);
        Graphics g = bi.getGraphics();
        bi = drawCenteredDamageNumbers(g, String.valueOf(damage), bi);
        g.dispose();
        return bi;
    }
    private BufferedImage drawJokeHitsplat()
    {
        BufferedImage bi = iconToBuffered(APRIL);
        Graphics g = bi.getGraphics();
        bi = drawCenteredDamageNumbers(g, "OOF", bi);
        g.dispose();
        return bi;
    }
    public BufferedImage drawCenteredDamageNumbers(Graphics g, String text, BufferedImage bi)
    {
        Font font = FontManager.getRunescapeSmallFont();
        if (config.healScaling())
                font = FontManager.getRunescapeSmallFont()
                        .deriveFont(16f + plugin.getDifference()/8f);
        FontMetrics metrics = g.getFontMetrics(font);
        int x = (bi.getWidth() - metrics.stringWidth(text)) /2;
        int y = ((bi.getHeight() - metrics.getHeight())/2) + metrics.getAscent();
        g.setFont(font);
        g.setColor(Color.BLACK);
        g.drawString(text,x+1,y+1);
        g.setColor(Color.WHITE);
        g.drawString(text,x,y);
        return bi;
    }
    private BufferedImage iconToBuffered(ImageIcon icon)
    {
        Image image = icon.getImage();
        int height = icon.getIconHeight();
        int width = icon.getIconWidth();
        int scale = 1;
        if (config.healScaling())
            scale = 1+(int) (plugin.difference*.02);

        Image tempImage;

        if (icon == APRIL)
            tempImage = image.getScaledInstance(width/3, height/3, Image.SCALE_SMOOTH);
        else
            tempImage = image.getScaledInstance(width*scale,height*scale,Image.SCALE_SMOOTH);
        ImageIcon sizedImageIcon = new ImageIcon(tempImage);

        BufferedImage bi = new BufferedImage(
                sizedImageIcon.getIconWidth(),
                sizedImageIcon.getIconHeight(),
                BufferedImage.TYPE_INT_ARGB);
        Graphics g = bi.createGraphics();
        sizedImageIcon.paintIcon(null, g, 0, 0);
        g.dispose();
        return bi;
    }
}

package com.natesky9;

import net.runelite.api.Client;
import net.runelite.api.Model;
import net.runelite.api.ModelData;

import javax.inject.Inject;

public class SecretFeature {

    @Inject
    private Client client;
    @Inject
    private VitalityPlugin plugin;

    private final ModelData[] data;
    private ModelData modelData;
    private final Model model;

    public SecretFeature(Client client)
    {

        data = new ModelData[]
                {
                        client.loadModelData(31794),
                        client.loadModelData(214),
                        client.loadModelData(250),
                        client.loadModelData(31805),
                        client.loadModelData(31797),
                        client.loadModelData(177),
                        client.loadModelData(31783),
                        client.loadModelData(181),
                        client.loadModelData(31911),
                        client.loadModelData(31889),
                };
        modelData = client.mergeModels(data);
        model = modelData.light();
    }



    public Model getBrassica()
    {
        return model;
    }
}

package com.natesky9;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.api.kit.KitType;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.time.LocalDate;
import java.time.Month;
import java.util.*;

@Slf4j
@PluginDescriptor(
	name = "Vitality"
)
public class VitalityPlugin extends Plugin
{
	public Animation IDLE;
	public Animation ATTACK;
	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private VitalityOverlay vitalityOverlay;

	@Inject
	private VitalityConfig config;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(vitalityOverlay);
	}
	@Getter @Setter
	public int health = 255;
	@Getter @Setter
	public int difference = 0;
	@Getter @Setter
	public Actor localPlayer = null;
	@Getter @Setter
	public int timer = 0;

	@Getter @Setter
	public int jokeTimer = 0;
	@Getter @Setter
	WorldPoint tile;
	@Getter @Setter
	public SecretFeature secretFeature;
	@Getter @Setter
	public ArrayList<RuneLiteObject> fools;


	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(vitalityOverlay);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() == GameState.LOGGED_IN)
		{
			//System.out.println("initializing");
			setSecretFeature(new SecretFeature(client));
			IDLE = client.loadAnimation(AnimationID.IDLE);
			ATTACK = client.loadAnimation(AnimationID.CRAFTING_BATTLESTAVES);
			//setHealth(client.getBoostedSkillLevel(Skill.HITPOINTS));
			//setDifference(0);
			//setTimer(1000);
			setLocalPlayer(client.getLocalPlayer());
			setTile(client.getLocalPlayer().getWorldLocation());
			setFools(new ArrayList<>());
		}
	}

	@Subscribe
	public void onStatChanged(StatChanged event)
	{
		Skill skill = event.getSkill();
		if (!(skill == Skill.HITPOINTS)) return;

		int last = getHealth();
		int current = client.getBoostedSkillLevel(Skill.HITPOINTS);

		//region soulreaper edge case
		int weapon = client.getLocalPlayer().getPlayerComposition().getEquipmentId(KitType.WEAPON);
		if (weapon == 28338 && current - last == 8)//if current weapon is the Soulreaper axe
		{
			setHealth(current);
			return;
		}
		//endregion soulreaper edge case

		//region foodHealing
		if (config.excludeFood() && localPlayer.getAnimation() == AnimationID.CONSUMING)
		{
			//test if stats are changed before animation plays
			setHealth(current);
			return;
		}
		//endregion foodHealing

		setDifference(current - last);
		setHealth(current);
		setTimer(0);
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		if (LocalDate.now().getDayOfMonth() == 1
				&& LocalDate.now().getMonth() == Month.APRIL
				&& config.aprilFools())
		{
			//reset if player moves or has any animation
			if (client.getLocalPlayer().getWorldLocation().getX() != getTile().getX()
			|| client.getLocalPlayer().getWorldLocation().getY() != getTile().getY()
			|| getLocalPlayer().getAnimation() != -1)
			{
				setJokeTimer(0);
				setTile(client.getLocalPlayer().getWorldLocation());
			}

			setJokeTimer(getJokeTimer()+1);
			//System.out.println(jokeTimer);

			if (getJokeTimer() > 256 && getFools().size() < 5)
			{
				spawnFool();
			}

			if (!getFools().isEmpty())
			{
				spawnCabbage();
			}
		}
	}
	void spawnCabbage()
	{
		int index = (int) (Math.random()*getFools().size());
		RuneLiteObject actor = getFools().get(index);

		WorldPoint worldPoint = WorldPoint.fromLocal(client,actor.getLocation());
		boolean see = getLocalPlayer().getWorldArea().hasLineOfSightTo(client.getTopLevelWorldView(),worldPoint);
		if (!see)
			return;

		client.playSoundEffect(SoundEffectID.PICK_PLANT_BLOOP);

		int x = actor.getX();
		int y = actor.getY();

		Projectile projectile = client.getWorldView(-1).createProjectile(772,localPlayer.getWorldLocation().getPlane(),
				x,y, -500,
				client.getGameCycle(), client.getGameCycle()+60,
				-100,100,100,
				localPlayer,localPlayer.getWorldLocation().getX(),localPlayer.getWorldLocation().getY());
		//System.out.println("my cabbages!");
		client.getProjectiles().addLast(projectile);

		//set animation
		for (RuneLiteObject object: getFools())
		{
			int angle = findAngle(object.getLocation());
			object.setOrientation(angle);
			object.setAnimation(IDLE);
		}
		actor.setAnimation(ATTACK);

		if (getLocalPlayer().getLocalLocation().distanceTo(actor.getLocation()) > 128*10)
		{//despawn mechanic
			actor.setActive(false);
			getFools().remove(actor);
		}
	}
	void spawnFool()
	{
		//System.out.println("spawning mage");
		SecretFeature fool = getSecretFeature();

		int randomx = (int) (Math.random()*21-10)*128;
		int randomy = (int) (Math.random()*21-10)*128;
		LocalPoint local = client.getLocalPlayer().getLocalLocation().plus(randomx,randomy);

		WorldPoint worldPoint = WorldPoint.fromLocal(client,local);
		boolean see = getLocalPlayer().getWorldArea().hasLineOfSightTo(client.getTopLevelWorldView(),worldPoint);
		boolean tooClose = getLocalPlayer().getLocalLocation().distanceTo(local) < 256;

		if (!see || tooClose)//if the potential location is not visible or too close
			return;

		//NPCComposition composition = client.getNpcDefinition(7310);
		//int[] modelIDS = new int[]{31794, 214, 250, 31805, 31797, 177, 31783, 181, 31911, 31889};

		RuneLiteObject r = client.createRuneLiteObject();
		r.setModel(fool.getBrassica());
		r.setAnimation(IDLE);
		r.setLocation(local,0);
		getLocalPlayer().setOverheadText("April Fools!");
		getLocalPlayer().setOverheadCycle(200);

		int angle = findAngle(r.getLocation());

		r.setOrientation(angle);
		r.setActive(true);
		getFools().add(r);
	}

	int findAngle(LocalPoint point)
	{

		int x1 = getLocalPlayer().getLocalLocation().getX();
		int y1 = getLocalPlayer().getLocalLocation().getY();
		int x2 = point.getX();
		int y2 = point.getY();
		double angle_radians = Math.atan2(y2 - y1, x2 - x1);
		double angle_degrees = (-Math.toDegrees(angle_radians) +360+90) % 360;
		//System.out.println("angle: " + angle_degrees);
		int angle = (int) (angle_degrees/360*2048);
		return angle;
	}


	@Provides
	VitalityConfig provideConfig(ConfigManager configManager)
		{
		return configManager.getConfig(VitalityConfig.class);
		}
}

package com.natesky9;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("Vitality")
public interface VitalityConfig extends Config
{
	@ConfigSection(
			name = "General settings",
			description = "Basic toggles and options",
			position = 0,
			closedByDefault = false
	)
	String generalSettings = "General settings";
	@ConfigSection(
			name = "Fun settings",
			description = "Cosmetic and playful options",
			position = 1,
			closedByDefault = true
	)
	String funSettings = "Fun settings";
	//-----------------//
	@ConfigItem(
			keyName = "anchorPoint",
			name = "Anchor Point",
			description = "Location to draw heal splats",
			section = generalSettings
	)
	default AnchorPoints anchorPoints()
	{
		return AnchorPoints.CHEST;
	}

	enum AnchorPoints
	{
		HEAD,
		CHEST,
		FEET
	}
	@ConfigItem(
			keyName = "ignoreRegen",
			name = "Ignore Regeneration",
			description = "Shows regeneration healing",
			section = generalSettings
	)
    default boolean ignoreRegen()
	{
		return true;
	}

	@ConfigItem(
			keyName = "excludeFood",
			name = "Exclude Food (experimental)",
			description = "Ignore food/potion healing",
			section = generalSettings
	)
	default boolean excludeFood()
	{
		return false;
	}

	@ConfigItem(
			keyName = "healRise",
			name = "Fancy Heal",
			description = "Heal splat does a gentle rise",
			section = generalSettings
	)
	default boolean healRise()
	{
		return true;
	}

	@ConfigItem(
			keyName = "healScaling",
			name = "Scales with heal",
			description = "Size scales with bigger heals",
			section = funSettings
	)
	default boolean healScaling()
	{
		return false;
	}
	@ConfigItem(
			keyName = "aprilFools",
			name = "April fools",
			description = "enables fun",
			section = funSettings
	)
	default boolean aprilFools()
	{
		return true;
	}
}

package com.natesky9;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class vitality
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(VitalityPlugin.class);
		RuneLite.main(args);
	}
}
