package com.pettonpc;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PtnPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(NpcFollowerPlugin.class);
		RuneLite.main(args);
	}
}
package com.pettonpc;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.CountDownLatch;
import javax.inject.Inject;
import javax.swing.JSlider;
import net.runelite.api.Client;
import net.runelite.api.Model;
import net.runelite.api.ModelData;
import net.runelite.api.NPC;
import net.runelite.api.Player;
import net.runelite.api.Renderable;
import net.runelite.api.RuneLiteObject;
import net.runelite.api.WorldView;
import net.runelite.api.coords.Angle;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.events.ClientTick;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.callback.Hooks;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import java.awt.image.BufferedImage;
import javax.swing.JTextField;

@PluginDescriptor(
	name = "Pet-to-NPC Transmog",
	description = "Customize your pets appearance to be any NPC/Object",
	tags = {"pet", "npc", "transmog", "companion", "follower"}
)
public class NpcFollowerPlugin extends Plugin
{
	@Inject
	private Client client;
	@Inject
	private ClientToolbar clientToolbar;
	@Inject
	private ClientThread clientThread;
	@Inject
	private Hooks hooks;
	@Inject
	private ConfigManager configManager;
	private DataManager dataManager;
	private NpcFollowerPanel npcFollowerPanel;

	protected boolean transmogInitialized = false;
	private final Hooks.RenderableDrawListener drawListener = this::shouldDraw;
	protected List<RuneLiteObject> transmogObjects;

	private static final int ANGLE_CONSTANT = 2048;
	private static final int ANGLE_OFFSET = 1500;
	private static final int TILE_TO_LOCAL_UNIT = 128;
	private int currentSpawnAnimationId = -1;


	private AnimationManager animationManager;
	private PlayerStateTracker playerStateTracker;
	private NpcFollowerPanel panel;
	private NavigationButton navButton;

	private static final BufferedImage ICON = ImageUtil.loadImageResource(NpcFollowerPlugin.class, "/icon.png");


	@Override
	protected void startUp()
	{
		initializeVariables();
		dataManager = new DataManager(configManager);
		panel = new NpcFollowerPanel(this, configManager, dataManager);
		animationManager = new AnimationManager(client, panel, null);
		playerStateTracker = new PlayerStateTracker(client, animationManager, this);
		animationManager.setPlayerStateTracker(playerStateTracker);
		hooks.registerRenderableDrawListener(drawListener);

		navButton = NavigationButton.builder()
			.tooltip("Pet-to-NPC Transmog")
			.icon(ICON)
			.panel(panel)
			.build();

		clientToolbar.addNavigation(navButton);

		if (dataManager.getSavedConfigNames() == null || dataManager.getSavedConfigNames().isEmpty())
		{
			panel.toggleCustomFields(false);

		}

		if (panel != null & dataManager.getSavedConfigNames() != null)
		{
			panel.loadLastConfiguration();
		}
	}

	@Override
	protected void shutDown() throws InterruptedException
	{
		final CountDownLatch latch = new CountDownLatch(1);

		clientThread.invokeLater(() -> {
			transmogObjects.forEach(transmogObject -> {
				transmogObject.setActive(false);
				transmogObject.setFinished(true);
			});
			transmogObjects.clear();
			latch.countDown();
		});

		latch.await();

		hooks.unregisterRenderableDrawListener(drawListener);
		initializeVariables();
		clientToolbar.removeNavigation(navButton);
	}

	private void initializeVariables()
	{
		transmogInitialized = false;
		transmogObjects = new ArrayList<>();
	}

	@Subscribe
	public void onClientTick(ClientTick event)
	{
		NPC follower = client.getFollower();

		if (follower != null)
		{
			if (transmogObjects == null)
			{
				transmogObjects = new ArrayList<>();
				if (playerStateTracker != null)
				{
					playerStateTracker.setTransmogObjects(transmogObjects);
				}
				if (animationManager != null)
				{
					animationManager.setTransmogObjects(transmogObjects);
				}
			}
			if (!transmogInitialized)
			{
				RuneLiteObject transmogObject = initializeTransmogObject(follower);
				if (transmogObject != null)
				{
					transmogInitialized = true;
				}
			}
			updateTransmogObject(follower);
			if (playerStateTracker != null)
			{
				playerStateTracker.updateFollowerMovement(follower);
			}
		}
	}

	private RuneLiteObject initializeTransmogObject(NPC follower)
	{
		transmogObjects.clear();
		for (RuneLiteObject transmogObject : transmogObjects)
		{
			transmogObject.setActive(false);
			transmogObject.setFinished(true);
		}

		playerStateTracker.setTransmogObjects(transmogObjects);
		animationManager.setTransmogObjects(transmogObjects);

		RuneLiteObject transmogObject = client.createRuneLiteObject();
		NpcData selectedNpc = panel.getSelectedNpc();

		if (transmogObject != null)
		{
			Model mergedModel = createNpcModel(selectedNpc);
			if (mergedModel != null)
			{
				transmogObject.setModel(mergedModel);
				transmogObjects.add(transmogObject);
				transmogObject.setActive(true);

				int radius = panel.enableCustom() ? panel.getModelRadius() : selectedNpc.getRadius();
				transmogObject.setRadius(radius);

				playerStateTracker.setTransmogObjects(transmogObjects);
				animationManager.setTransmogObjects(transmogObjects);
				playerStateTracker.setCurrentState(PlayerState.SPAWNING);
			}
		}
		return transmogObject;
	}

	public void panelChange()
	{
		if (panel == null)
		{
			return;
		}


		NpcData selectedNpc = panel.getSelectedNpc();
		if (panel.enableCustom())

		{
			if (dataManager.getSavedConfigNames() == null || dataManager.getSavedConfigNames().isEmpty())
			{

				panel.updateFieldsWithNpcData(selectedNpc);


			}
			else
			{
				String configName = (String) panel.getConfigDropdown().getSelectedItem();
				panel.updateFieldsWithDropdownData(configName);
			}
		}
		else
		{
			panel.updateFieldsWithNpcData(selectedNpc);
		}

		clientThread.invokeLater(() -> {
			Model mergedModel = createNpcModel(selectedNpc);
			if (mergedModel != null && !transmogObjects.isEmpty())

			{
				RuneLiteObject transmogObject = transmogObjects.get(0);
				transmogObject.setModel(mergedModel);
				transmogObject.setActive(true);
				int radius = panel.enableCustom() ? panel.getModelRadius() : selectedNpc.getRadius();
				transmogObject.setRadius(radius);
				playerStateTracker.setTransmogObjects(transmogObjects);
				animationManager.setTransmogObjects(transmogObjects);
				playerStateTracker.setCurrentState(PlayerState.SPAWNING);
			}
		});
	}

	private void updateTransmogObject(NPC follower)
	{
		WorldView worldView = client.getTopLevelWorldView();
		LocalPoint followerLocation = follower.getLocalLocation();
		Player player = client.getLocalPlayer();

		int offsetX;
		int offsetY;
		int angle;
		int radius;
		int spawnAnimationId;  // To store the current spawn animation

		if (panel.enableCustom())
		{
			offsetX = panel.getOffsetX() * TILE_TO_LOCAL_UNIT;
			offsetY = panel.getOffsetY() * TILE_TO_LOCAL_UNIT;

			spawnAnimationId = panel.getSpawnAnimationID();
		}
		else
		{
			offsetX = panel.getSelectedNpc().getOffsetX() * TILE_TO_LOCAL_UNIT;
			offsetY = panel.getSelectedNpc().getOffsetY() * TILE_TO_LOCAL_UNIT;

			spawnAnimationId = panel.getSelectedNpc().getSpawnAnim();
		}

		int newX = followerLocation.getX() + offsetX;
		int newY = followerLocation.getY() + offsetY;
		int dx = player.getLocalLocation().getX() - newX;
		int dy = player.getLocalLocation().getY() - newY;
		LocalPoint newLocation = new LocalPoint(newX, newY);

		if (offsetX == 0 && offsetY == 0)
		{
			angle = follower.getCurrentOrientation();
		}
		else
		{
			angle = (int) ((Math.atan2(-dy, dx) * ANGLE_CONSTANT) / (2 * Math.PI) + ANGLE_OFFSET) % ANGLE_CONSTANT;
		}

		Angle followerOrientation = new Angle(angle);

		if (transmogObjects != null)
		{
			for (RuneLiteObject transmogObject : transmogObjects)
			{
				if (transmogObject != null)
				{
					transmogObject.setLocation(newLocation, worldView.getPlane());
					transmogObject.setOrientation(followerOrientation.getAngle());

					if (panel.enableCustom())
					{
						radius = panel.getModelRadius();
					}
					else
					{
						radius = panel.getSelectedNpc().getRadius();
					}
					transmogObject.setRadius(radius);

					Model mergedModel = createNpcModel(panel.getSelectedNpc());
					if (mergedModel != null)
					{
						transmogObject.setModel(mergedModel);
					}

					if (spawnAnimationId != currentSpawnAnimationId)
					{
						currentSpawnAnimationId = spawnAnimationId; // Update the stored spawn animation ID
						playerStateTracker.setCurrentState(PlayerState.SPAWNING); // Trigger spawning state
					}

					playerStateTracker.setTransmogObjects(transmogObjects);
					animationManager.setTransmogObjects(transmogObjects);
				}
			}
		}
	}


	public Model createNpcModel(NpcData selectedNpc)
	{
		List<Integer> modelIds = new ArrayList<>();

		if (panel.enableCustom())
		{
			int[] npcModelIDs = {
				panel.getNpcModelID1(), panel.getNpcModelID2(), panel.getNpcModelID3(), panel.getNpcModelID4(),
				panel.getNpcModelID5(), panel.getNpcModelID6(), panel.getNpcModelID7(), panel.getNpcModelID8(),
				panel.getNpcModelID9(), panel.getNpcModelID10()
			};

			for (int modelId : npcModelIDs)
			{
				if (modelId > 0)
				{
					modelIds.add(modelId);
				}
			}
		}
		else
		{
			modelIds.addAll(selectedNpc.getModelIDs());
		}

		if (modelIds.isEmpty())
		{
			return null;
		}

		ModelData[] modelDataArray = modelIds.stream().map(client::loadModelData).toArray(ModelData[]::new);

		if (Arrays.stream(modelDataArray).anyMatch(Objects::isNull))
		{
			return null;
		}

		ModelData mergedModelData = client.mergeModels(modelDataArray);
		if (mergedModelData == null)
		{
			return null;
		}

		return mergedModelData.light();
	}

	public Model createCustomNpcModel(List<Integer> modelIds, int standingAnim, int walkingAnim, int spawnAnim)
	{
		if (modelIds.isEmpty())
		{
			return null;
		}

		ModelData[] modelDataArray = modelIds.stream().map(client::loadModelData).toArray(ModelData[]::new);

		if (Arrays.stream(modelDataArray).anyMatch(Objects::isNull))
		{
			return null;
		}

		ModelData mergedModelData = client.mergeModels(modelDataArray);
		if (mergedModelData == null)
		{
			return null;
		}


		return mergedModelData.light();
	}

	public void setTransmogObjects(List<RuneLiteObject> transmogObjects)
	{
		this.transmogObjects = transmogObjects;
	}

	boolean shouldDraw(Renderable renderable, boolean drawingUI)
	{
		if (renderable instanceof NPC)
		{
			NPC npc = (NPC) renderable;
			if (npc == client.getFollower())
			{
				return false;
			}
		}
		return true;
	}

	public void loadConfiguration(String name, JTextField... npcModelIDFields)
	{
		for (int i = 0; i < npcModelIDFields.length; i++)
		{
			String npcModelID = loadConfiguration(name, "npcModelID" + (i + 1));
			npcModelIDFields[i].setText(npcModelID);
		}
	}

	public String loadConfiguration(String name, String key)
	{
		return configManager.getConfiguration("petToNpcTransmog", name + "_" + key);
	}

	public void saveConfiguration(String name, String... npcModelIDs)
	{
		for (int i = 0; i < npcModelIDs.length; i++)
		{
			if (npcModelIDs[i] != null && !npcModelIDs[i].isEmpty())
			{
				saveConfiguration(name, "npcModelID" + (i + 1), Integer.parseInt(npcModelIDs[i]));
			}
		}

		dataManager.saveConfiguration(name, "npcStandingAnim", panel.getStandingAnimationId());
		dataManager.saveConfiguration(name, "npcWalkingAnim", panel.getWalkingAnimationId());
		dataManager.saveConfiguration(name, "npcSpawnAnim", panel.getSpawnAnimationID());
		dataManager.saveConfiguration(name, "npcRadius", panel.getModelRadius());
		dataManager.saveConfiguration(name, "npcXoffset", panel.getOffsetX());
		dataManager.saveConfiguration(name, "npcYoffset", panel.getOffsetY());

		updateSavedConfigNames(name);
	}

	public void saveConfiguration(String name, String key, int value)
	{
		configManager.setConfiguration("petToNpcTransmog", name + "_" + key, String.valueOf(value));
	}

	public void loadSliderConfiguration(String name, JSlider... sliders)
	{
		for (JSlider slider : sliders)
		{
			String value = loadConfiguration(name, slider.getName());
			if (value != null)
			{
				slider.setValue(Integer.parseInt(value));
			}
			else
			{
				slider.setValue(0);
			}
		}
	}

	private void updateSavedConfigNames(String newConfigName)
	{
		String savedConfigNames = dataManager.getSavedConfigNames();

		if (savedConfigNames == null)
		{
			savedConfigNames = "";
		}

		if (!savedConfigNames.contains(newConfigName))
		{
			if (savedConfigNames.isEmpty())
			{
				savedConfigNames = newConfigName;
			}
			else
			{
				savedConfigNames = savedConfigNames + "," + newConfigName;
			}
			dataManager.setSavedConfigNames(savedConfigNames);
		}
	}

	public void deleteConfiguration(String name)
	{
		for (int i = 1; i <= 10; i++)
		{
			configManager.unsetConfiguration("petToNpcTransmog", name + "_npcModelID" + i);
		}
		configManager.unsetConfiguration("petToNpcTransmog", name + "_npcStandingAnim");
		configManager.unsetConfiguration("petToNpcTransmog", name + "_npcWalkingAnim");
		configManager.unsetConfiguration("petToNpcTransmog", name + "_npcSpawnAnim");
		configManager.unsetConfiguration("petToNpcTransmog", name + "_npcRadius");
		configManager.unsetConfiguration("petToNpcTransmog", name + "_npcXoffset");
		configManager.unsetConfiguration("petToNpcTransmog", name + "_npcYoffset");

		String savedConfigNames = dataManager.getSavedConfigNames();
		if (savedConfigNames != null && !savedConfigNames.isEmpty())
		{
			String[] configNames = savedConfigNames.split(",");
			StringBuilder updatedConfigNames = new StringBuilder();
			for (String configName : configNames)
			{
				if (!configName.equals(name))
				{
					if (updatedConfigNames.length() > 0)
					{
						updatedConfigNames.append(",");
					}
					updatedConfigNames.append(configName);
				}
			}
			dataManager.setSavedConfigNames(updatedConfigNames.toString());
		}
	}
}
package com.pettonpc;

public enum PlayerState
{
	SPAWNING,
	STANDING,
	MOVING,
	IDLE,
}

package com.pettonpc;

import javax.swing.border.EmptyBorder;
import net.runelite.client.ui.PluginPanel;
import javax.swing.*;
import java.awt.*;
import net.runelite.client.config.ConfigManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class NpcFollowerPanel extends PluginPanel
{
	private final NpcFollowerPlugin plugin;
	private final ConfigManager configManager;
	private final DataManager dataManager;
	private JComboBox<String> npcPresetDropdown;
	JCheckBox enableCustomCheckbox;
	private JComboBox<String> configDropdown;
	private JTextField[] npcModelIDFields;
	private JTextField npcStandingAnim;
	private JTextField npcWalkingAnim;
	private JTextField npcSpawnAnim;
	private JSlider npcRadiusSlider;
	private JSlider npcXoffsetSlider;
	private JSlider npcYoffsetSlider;
	private JButton saveButton;
	private JButton deleteButton;
	private JButton instructionsButton;
	private static final int DEFAULT_MODEL_ID = -1;
	private static final int DEFAULT_RADIUS = 60;
	private static final int DEFAULT_OFFSET = 0;
	private static final int DEFAULT_STANDING_ANIM = -1;
	private static final int DEFAULT_WALKING_ANIM = -1;
	private static final int DEFAULT_SPAWN_ANIM = 4;
	private static final Logger logger = LoggerFactory.getLogger(NpcFollowerPanel.class);


	public NpcFollowerPanel(NpcFollowerPlugin plugin, ConfigManager configManager, DataManager dataManager)
	{
		this.plugin = plugin;
		this.configManager = configManager;
		this.dataManager = dataManager;
		setLayout(new BorderLayout());

		// Create components
		JLabel titleLabel = new JLabel("<html><font color='orange'><u>Pet-To-NPC Transmog</u></font></html>");
		npcPresetDropdown = new JComboBox<>();
		npcPresetDropdown.setToolTipText("Select a preset NPC to transform your pet into.");
		enableCustomCheckbox = new JCheckBox();
		enableCustomCheckbox.setToolTipText("Enable custom NPC transformation.");
		configDropdown = new JComboBox<>();
		configDropdown.setToolTipText("Select a saved custom configuration.");
		npcModelIDFields = new JTextField[10];

		for (int i = 0; i < npcModelIDFields.length; i++)
		{
			npcModelIDFields[i] = new JTextField();
			npcModelIDFields[i].setToolTipText("Enter the model ID's for NPC. If only one Model ID is needed then the remaining ID fields can be left blank.");
		}
		npcStandingAnim = new JTextField();
		npcStandingAnim.setToolTipText("Enter the standing animation ID for the NPC.");
		npcWalkingAnim = new JTextField();
		npcWalkingAnim.setToolTipText("Enter the walking animation ID for the NPC.");
		npcSpawnAnim = new JTextField();
		npcSpawnAnim.setToolTipText("Enter the spawn animation ID for the NPC.");
		npcRadiusSlider = new JSlider(0, 5, 0);
		npcRadiusSlider.setToolTipText("Adjust the radius of the NPC. Doesn't increase size, it prevents clipping for large NPCs.");
		npcXoffsetSlider = new JSlider(0, 5, 0);
		npcXoffsetSlider.setToolTipText("Adjust the X offset of the NPC.");
		npcYoffsetSlider = new JSlider(0, 5, 0);
		npcYoffsetSlider.setToolTipText("Adjust the Y offset of the NPC.");
		saveButton = new JButton("Save Configuration");
		saveButton.setToolTipText("Save the current configuration.");
		deleteButton = new JButton("Delete Configuration");
		deleteButton.setToolTipText("Delete the selected configuration.");
		instructionsButton = new JButton("Instructions");
		instructionsButton.setToolTipText("View instructions for using the plugin.");

		// panel creation
		JPanel titlePanel = new JPanel(new BorderLayout());
		JPanel mainPanel = new JPanel(new GridBagLayout());
		mainPanel.setBorder(new EmptyBorder(10, 0, 10, 0));
		JPanel buttonPanel = new JPanel(new GridLayout(1, 2, 5, 5));

		// Add title to the panel with underline
		titleLabel.setHorizontalAlignment(SwingConstants.CENTER);
		titleLabel.setFont(new Font("Serif", Font.BOLD, 16));
		titlePanel.add(titleLabel, BorderLayout.NORTH);
		titlePanel.add(instructionsButton, BorderLayout.SOUTH);
		titleLabel.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0));

		GridBagConstraints gbc = new GridBagConstraints();
		gbc.fill = GridBagConstraints.HORIZONTAL;

		// Constraints for NPC Presets Label
		gbc.insets = new Insets(5, 0, 20, 0);
		gbc.gridx = 0;
		gbc.gridy = 0;
		mainPanel.add(new JLabel("<html><b>Presets:</b></html>"), gbc);
		gbc.gridx = 1;
		mainPanel.add(npcPresetDropdown, gbc);

		// Constraints for Enable Custom Configuration
		gbc.insets = new Insets(5, 0, 1, 0);
		gbc.gridx = 0;
		gbc.gridy++;
		gbc.weightx = 0.5;
		mainPanel.add(new JLabel("<html><b>Enable Custom:</b></html>"), gbc);
		gbc.gridx = 1;
		gbc.weightx = 0.5;
		mainPanel.add(enableCustomCheckbox, gbc);

		// Constraints for Configuration Dropdown
		gbc.insets = new Insets(5, 0, 5, 0);
		gbc.gridx = 0;
		gbc.gridy++;
		gbc.weightx = 0.5;
		mainPanel.add(new JLabel("<html><b>Saved Customs:</b></html>"), gbc);
		gbc.gridx = 1;
		gbc.weightx = 0.5;
		mainPanel.add(configDropdown, gbc);

		// Model ID fields
		for (int i = 0; i < npcModelIDFields.length; i++)
		{
			gbc.insets = new Insets(5, 0, 5, 20);
			gbc.gridx = 0;
			gbc.gridy++;
			gbc.weightx = 0.5;
			mainPanel.add(new JLabel("NPC Model ID " + (i + 1) + ":"), gbc);
			gbc.gridx = 1;
			gbc.weightx = 0.5;
			mainPanel.add(npcModelIDFields[i], gbc);
		}

		// Standing Animation
		gbc.insets = new Insets(20, 0, 5, 0);
		gbc.gridx = 0;
		gbc.gridy++;
		gbc.weightx = 0.5;
		mainPanel.add(new JLabel("<html><b>Standing ID:</b></html>"), gbc);
		gbc.gridx = 1;
		gbc.weightx = 0.5;
		mainPanel.add(npcStandingAnim, gbc);

		// Walking Animation
		gbc.insets = new Insets(5, 0, 30, 0);
		gbc.gridx = 0;
		gbc.gridy++;
		gbc.weightx = 0.5;
		mainPanel.add(new JLabel("<html><b>Walking ID:</b></html>"), gbc);
		gbc.gridx = 1;
		gbc.weightx = 0.5;
		mainPanel.add(npcWalkingAnim, gbc);

		// "Optional"
		JLabel optionalLabel = new JLabel("<html><font color='orange'><u>Optional Changes</u></font></html>");
		optionalLabel.setFont(new Font("Serif", Font.BOLD, 11));

		gbc.insets = new Insets(5, 0, 1, 0);
		gbc.gridx = 0;
		gbc.gridy++;
		gbc.weightx = 0.5;
		mainPanel.add(optionalLabel, gbc);

		// Spawn Animation
		gbc.insets = new Insets(5, 0, 5, 0);
		gbc.gridx = 0;
		gbc.gridy++;
		gbc.weightx = 0.5;
		mainPanel.add(new JLabel("Animation ID:"), gbc);
		gbc.gridx = 1;
		gbc.weightx = 0.5;
		mainPanel.add(npcSpawnAnim, gbc);

		// Radius
		gbc.gridx = 0;
		gbc.gridy++;
		gbc.weightx = 0.5;
		mainPanel.add(new JLabel("Radius:"), gbc);
		gbc.gridx = 1;
		gbc.weightx = 0.5;
		mainPanel.add(npcRadiusSlider, gbc);

		// X Offset
		gbc.gridx = 0;
		gbc.gridy++;
		gbc.weightx = 0.5;
		mainPanel.add(new JLabel("X Offset:"), gbc);
		gbc.gridx = 1;
		gbc.weightx = 0.5;
		mainPanel.add(npcXoffsetSlider, gbc);

		// Y Offset
		gbc.gridx = 0;
		gbc.gridy++;
		gbc.weightx = 0.5;
		mainPanel.add(new JLabel("Y Offset:"), gbc);
		gbc.gridx = 1;
		gbc.weightx = 0.5;
		mainPanel.add(npcYoffsetSlider, gbc);

		// Add buttons to button panel
		buttonPanel.add(saveButton);
		buttonPanel.add(deleteButton);

		// Add panels to main panel
		add(titlePanel, BorderLayout.NORTH);
		add(mainPanel, BorderLayout.CENTER);
		add(buttonPanel, BorderLayout.SOUTH);

		// Populate the NPC preset dropdown
		populateNpcPresetDropdown();

		// preset dropdown listener
		npcPresetDropdown.addActionListener(e -> {
			plugin.panelChange();
			saveCurrentConfiguration();
		});

		enableCustomCheckbox.addActionListener(e -> {
			if (dataManager.getSavedConfigNames() == null || dataManager.getSavedConfigNames().isEmpty())
			{
				toggleCustomFields(enableCustomCheckbox.isSelected());
				plugin.panelChange();
				setFieldsToDefaults();
				saveCurrentConfiguration();
			}
			else
			{
				plugin.panelChange();
				toggleCustomFields(enableCustomCheckbox.isSelected());
				saveCurrentConfiguration();
			}
		});

		// Save Listener
		saveButton.addActionListener(e -> {
			String configName = JOptionPane.showInputDialog(null, "Enter configuration name:", "Save Configuration", JOptionPane.PLAIN_MESSAGE);
			if (configName == null || configName.isEmpty())
			{
				JOptionPane.showMessageDialog(null, "Please enter a name for the configuration before saving.", "Error", JOptionPane.ERROR_MESSAGE);
				return;
			}

			try
			{
				for (JTextField modelIdField : npcModelIDFields)
				{
					if (!modelIdField.getText().isEmpty())
					{
						Integer.parseInt(modelIdField.getText());
					}
				}
				if (!npcStandingAnim.getText().isEmpty())
				{
					Integer.parseInt(npcStandingAnim.getText());
				}
				if (!npcWalkingAnim.getText().isEmpty())
				{
					Integer.parseInt(npcWalkingAnim.getText());
				}
				if (!npcSpawnAnim.getText().isEmpty())
				{
					Integer.parseInt(npcSpawnAnim.getText());
				}
			}
			catch (NumberFormatException ex)
			{
				JOptionPane.showMessageDialog(null, "Please enter valid integer values in the NPC Model ID and Animation fields.", "Error", JOptionPane.ERROR_MESSAGE);
				return;
			}

			plugin.saveConfiguration(
				configName,
				npcModelIDFields[0].getText(),
				npcModelIDFields[1].getText(),
				npcModelIDFields[2].getText(),
				npcModelIDFields[3].getText(),
				npcModelIDFields[4].getText(),
				npcModelIDFields[5].getText(),
				npcModelIDFields[6].getText(),
				npcModelIDFields[7].getText(),
				npcModelIDFields[8].getText(),
				npcModelIDFields[9].getText(),
				npcStandingAnim.getText(),
				npcWalkingAnim.getText(),
				npcSpawnAnim.getText(),
				String.valueOf(getModelRadius()),
				String.valueOf(npcXoffsetSlider.getValue()),
				String.valueOf(npcYoffsetSlider.getValue())
			);

			dataManager.updateConfigDropdown(configDropdown);
			configDropdown.setSelectedItem(configName);
			plugin.loadConfiguration(configName, npcModelIDFields);
			plugin.loadSliderConfiguration(configName, npcRadiusSlider, npcXoffsetSlider, npcYoffsetSlider);
			plugin.panelChange();
		});

		//instructions listener
		instructionsButton.addActionListener(e -> showInstructionsDialog());

		deleteButton.addActionListener(e -> {
			String selectedConfig = (String) configDropdown.getSelectedItem();
			if (selectedConfig != null && !selectedConfig.isEmpty())
			{
				plugin.deleteConfiguration(selectedConfig);
				dataManager.updateConfigDropdown(configDropdown);
			}
		});

		configDropdown.addActionListener(e -> {
			String selectedConfig = (String) configDropdown.getSelectedItem();
			if (selectedConfig != null && plugin != null && plugin.transmogInitialized)
			{
				plugin.loadConfiguration(selectedConfig, npcModelIDFields);
				plugin.loadSliderConfiguration(selectedConfig, npcRadiusSlider, npcXoffsetSlider, npcYoffsetSlider);
				plugin.panelChange();
				saveCurrentConfiguration();
			}
		});

		initializeConfigDropdown();
		toggleCustomFields(enableCustomCheckbox.isSelected());
	}

	private void addLabelAndField(JPanel panel, String labelText, JComponent field)
	{
		JLabel label = new JLabel(labelText);
		label.setFont(new Font("Arial", Font.PLAIN, 12));
		panel.add(label);
		panel.add(field);
	}

	// Initialize config dropdown
	private void initializeConfigDropdown()
	{
		if (dataManager != null)
		{
			dataManager.initializeConfigDropdown(configDropdown);
		}
	}

	public void saveCurrentConfiguration()
	{
		String selectedConfig = enableCustomCheckbox.isSelected() ? (String) configDropdown.getSelectedItem() : (String) npcPresetDropdown.getSelectedItem();
		boolean isCustomEnabled = enableCustomCheckbox.isSelected();

		if (selectedConfig == null || selectedConfig.isEmpty())
		{
			return;
		}

		try
		{
			configManager.setConfiguration("petToNpcTransmog", "lastSelectedConfig", selectedConfig);
			configManager.setConfiguration("petToNpcTransmog", "isCustomEnabled", String.valueOf(isCustomEnabled));
		}
		catch (NullPointerException ex)
		{
			JOptionPane.showMessageDialog(null, "An error occurred while saving the configuration. Please check all fields.", "Error", JOptionPane.ERROR_MESSAGE);
			logger.error("Error occurred while saving the configuration", ex); // Change to use SLF4J for logging
		}
	}

	public void loadLastConfiguration()
	{
		String lastSelectedConfig = configManager.getConfiguration("petToNpcTransmog", "lastSelectedConfig");
		boolean isCustomEnabled = Boolean.parseBoolean(configManager.getConfiguration("petToNpcTransmog", "isCustomEnabled"));

		enableCustomCheckbox.setSelected(isCustomEnabled);
		if (isCustomEnabled)
		{
			configDropdown.setSelectedItem(lastSelectedConfig);
			plugin.loadConfiguration(lastSelectedConfig, npcModelIDFields);
			plugin.loadSliderConfiguration(lastSelectedConfig, npcRadiusSlider, npcXoffsetSlider, npcYoffsetSlider);
			toggleCustomFields(enableCustomCheckbox.isSelected());
		}
		else
		{
			npcPresetDropdown.setSelectedItem(lastSelectedConfig);
		}
		plugin.panelChange();
	}

	private void populateNpcPresetDropdown()
	{
		for (NpcData npcData : NpcData.values())
		{
			npcPresetDropdown.addItem(npcData.getName());
		}
	}

	public NpcData getSelectedNpc()
	{
		String selectedNpcName = (String) npcPresetDropdown.getSelectedItem();
		for (NpcData npcData : NpcData.values())
		{
			if (npcData.getName().equals(selectedNpcName))
			{
				return npcData;
			}
		}
		return null;
	}

	public boolean enableCustom()
	{
		return enableCustomCheckbox.isSelected();
	}

	public int getModelRadius()
	{
		return (npcRadiusSlider.getValue() + 1) * 60;
	}

	public int getOffsetX()
	{
		return npcXoffsetSlider.getValue();
	}

	public int getOffsetY()
	{
		return npcYoffsetSlider.getValue();
	}

	public int getNpcModelID1()
	{
		try
		{
			return parseIntegerField(npcModelIDFields[0], DEFAULT_MODEL_ID);
		}
		catch (NumberFormatException e)
		{
			return -1;
		}
	}

	public int getNpcModelID2()
	{
		try
		{
			return parseIntegerField(npcModelIDFields[1], DEFAULT_MODEL_ID);
		}
		catch (NumberFormatException e)
		{
			return -1;
		}
	}

	public int getNpcModelID3()
	{
		try
		{
			return parseIntegerField(npcModelIDFields[2], DEFAULT_MODEL_ID);
		}
		catch (NumberFormatException e)
		{
			return -1;
		}
	}

	public int getNpcModelID4()
	{
		try
		{
			return parseIntegerField(npcModelIDFields[3], DEFAULT_MODEL_ID);
		}
		catch (NumberFormatException e)
		{
			return -1;
		}
	}

	public int getNpcModelID5()
	{
		try
		{
			return parseIntegerField(npcModelIDFields[4], DEFAULT_MODEL_ID);
		}
		catch (NumberFormatException e)
		{
			return -1;
		}
	}

	public int getNpcModelID6()
	{
		try
		{
			return parseIntegerField(npcModelIDFields[5], DEFAULT_MODEL_ID);
		}
		catch (NumberFormatException e)
		{
			return -1;
		}
	}

	public int getNpcModelID7()
	{
		try
		{
			return parseIntegerField(npcModelIDFields[6], DEFAULT_MODEL_ID);
		}
		catch (NumberFormatException e)
		{
			return -1;
		}
	}

	public int getNpcModelID8()
	{
		try
		{
			return parseIntegerField(npcModelIDFields[7], DEFAULT_MODEL_ID);
		}
		catch (NumberFormatException e)
		{
			return -1;
		}
	}

	public int getNpcModelID9()
	{
		try
		{
			return parseIntegerField(npcModelIDFields[8], DEFAULT_MODEL_ID);
		}
		catch (NumberFormatException e)
		{
			return -1;
		}
	}

	public int getNpcModelID10()
	{
		try
		{
			return parseIntegerField(npcModelIDFields[9], DEFAULT_MODEL_ID);
		}
		catch (NumberFormatException e)
		{
			return -1;
		}
	}

	public int getStandingAnimationId()
	{
		try
		{
			return parseIntegerField(npcStandingAnim, DEFAULT_STANDING_ANIM);
		}
		catch (NumberFormatException e)
		{
			return -1;
		}
	}

	public int getWalkingAnimationId()
	{
		try
		{
			return parseIntegerField(npcWalkingAnim, DEFAULT_WALKING_ANIM);
		}
		catch (NumberFormatException e)
		{
			return -1;
		}
	}

	public int getSpawnAnimationID()
	{
		try
		{
			return parseIntegerField(npcSpawnAnim, DEFAULT_SPAWN_ANIM);
		}
		catch (NumberFormatException e)
		{
			return -1;
		}
	}

	private int parseIntegerField(JTextField field, int defaultValue)
	{
		String text = field.getText();
		if (text == null || text.isEmpty())
		{
			return defaultValue;
		}
		return Integer.parseInt(text);
	}

	public JComboBox<String> getConfigDropdown()
	{
		return configDropdown;
	}

	public void updateFieldsWithNpcData(NpcData npcData)
	{
		npcModelIDFields[0].setText(String.valueOf(npcData.getModelIDs().get(0)));
		npcModelIDFields[1].setText(npcData.getModelIDs().size() > 1 ? String.valueOf(npcData.getModelIDs().get(1)) : "");
		npcModelIDFields[2].setText(npcData.getModelIDs().size() > 2 ? String.valueOf(npcData.getModelIDs().get(2)) : "");
		npcModelIDFields[3].setText(npcData.getModelIDs().size() > 3 ? String.valueOf(npcData.getModelIDs().get(3)) : "");
		npcModelIDFields[4].setText(npcData.getModelIDs().size() > 4 ? String.valueOf(npcData.getModelIDs().get(4)) : "");
		npcModelIDFields[5].setText(npcData.getModelIDs().size() > 5 ? String.valueOf(npcData.getModelIDs().get(5)) : "");
		npcModelIDFields[6].setText(npcData.getModelIDs().size() > 6 ? String.valueOf(npcData.getModelIDs().get(6)) : "");
		npcModelIDFields[7].setText(npcData.getModelIDs().size() > 7 ? String.valueOf(npcData.getModelIDs().get(7)) : "");
		npcModelIDFields[8].setText(npcData.getModelIDs().size() > 8 ? String.valueOf(npcData.getModelIDs().get(8)) : "");
		npcModelIDFields[9].setText(npcData.getModelIDs().size() > 9 ? String.valueOf(npcData.getModelIDs().get(9)) : "");
		npcStandingAnim.setText(String.valueOf(npcData.getStandingAnim()));
		npcWalkingAnim.setText(String.valueOf(npcData.getWalkAnim()));
		npcSpawnAnim.setText(String.valueOf(npcData.getSpawnAnim()));

		int radius = npcData.getRadius();
		int sliderValue = (radius / 60) - 1;
		npcRadiusSlider.setValue(sliderValue);

		npcXoffsetSlider.setValue(npcData.getOffsetX());
		npcYoffsetSlider.setValue(npcData.getOffsetY());
	}

	public void updateFieldsWithDropdownData(String configName)
	{
		npcModelIDFields[0].setText(plugin.loadConfiguration(configName, "npcModelID1"));
		npcModelIDFields[1].setText(plugin.loadConfiguration(configName, "npcModelID2"));
		npcModelIDFields[2].setText(plugin.loadConfiguration(configName, "npcModelID3"));
		npcModelIDFields[3].setText(plugin.loadConfiguration(configName, "npcModelID4"));
		npcModelIDFields[4].setText(plugin.loadConfiguration(configName, "npcModelID5"));
		npcModelIDFields[5].setText(plugin.loadConfiguration(configName, "npcModelID6"));
		npcModelIDFields[6].setText(plugin.loadConfiguration(configName, "npcModelID7"));
		npcModelIDFields[7].setText(plugin.loadConfiguration(configName, "npcModelID8"));
		npcModelIDFields[8].setText(plugin.loadConfiguration(configName, "npcModelID9"));
		npcModelIDFields[9].setText(plugin.loadConfiguration(configName, "npcModelID10"));
		npcStandingAnim.setText(plugin.loadConfiguration(configName, "npcStandingAnim"));
		npcWalkingAnim.setText(plugin.loadConfiguration(configName, "npcWalkingAnim"));
		npcSpawnAnim.setText(plugin.loadConfiguration(configName, "npcSpawnAnim"));

		String radiusValue = plugin.loadConfiguration(configName, "npcRadius");
		if (radiusValue != null)
		{
			int radius = Integer.parseInt(radiusValue);
			int sliderValue = (radius / 60) - 1;
			npcRadiusSlider.setValue(sliderValue);
		}
		else
		{
			npcRadiusSlider.setValue(0);
		}

		npcXoffsetSlider.setValue(Integer.parseInt(plugin.loadConfiguration(configName, "npcXoffset")));
		npcYoffsetSlider.setValue(Integer.parseInt(plugin.loadConfiguration(configName, "npcYoffset")));
	}

	public void toggleCustomFields(boolean enable)
	{
		npcPresetDropdown.setEnabled(!enable);
		configDropdown.setEnabled(enable);
		for (JTextField field : npcModelIDFields)
		{
			field.setEnabled(enable);
		}
		npcStandingAnim.setEnabled(enable);
		npcWalkingAnim.setEnabled(enable);
		npcSpawnAnim.setEnabled(enable);
		npcRadiusSlider.setEnabled(enable);
		npcXoffsetSlider.setEnabled(enable);
		npcYoffsetSlider.setEnabled(enable);
		saveButton.setEnabled(enable);
		deleteButton.setEnabled(enable);
	}

	public void setFieldsToDefaults()
	{
		npcSpawnAnim.setText("");
		npcRadiusSlider.setValue((DEFAULT_RADIUS / 60) - 1);
		npcXoffsetSlider.setValue(DEFAULT_OFFSET);
		npcYoffsetSlider.setValue(DEFAULT_OFFSET);
	}

	private void showInstructionsDialog()
	{
		String instructionsText = "<html>" +
			"<style>" +
			"ul { padding-left: 0; margin-left: 0; list-style-position: inside; }" +
			"li { margin-left: 0; }" +
			"</style>" +
			"<center><b><u><font color='orange'>Alter Your Pets Appearance To Any NPC/Monster</font></u></b></center><br>" +
			"<b>1)</b> Have any pet out, if you don't have a pet then a cat or a kitten will work<br><br>" +
			"<b>2)</b> For preset NPC's simply select the NPC from the 'NPC Presets' dropdown and you are done<br><br>" +
			"<b>3)</b> To use a different NPC click the 'Enable Custom' checkbox and follow the below steps<br><br>" +
			"<b>4)</b> <font color='orange'>https://runemonk.com/tools/entityviewer/</font> can give you model ID's. This is the site I personally use " +
			"but there are alternatives such as <font color='orange'>https://chisel.weirdgloop.org/moid/npc_name.html</font><br><br>" +
			"<b>5)</b> Search for the NPC you want to use<br><br>" +
			"<b>6)</b> Click on the Data Tab<br><br>" +
			"<b>7)</b> Use the ID under 'models:' (Not the first one listed under 'id:' which is a npcID not a modelID)<br>" +
			"Paste it into the plugin panel NPC ModelID1 field<br><br>" +
			"<b>8)</b> Some models combine multiple ID's in which case you will have to put the other model ID's in the panels other modelID fields<br><br>" +
			"<b>9)</b> Use the standingAnimation ID and the walkingAnimation ID as well and put them in the panel<br><br>" +
			"<b>10)</b> Click Save and type a name you wish to save it under. In order for the new model to be updated you will have to save.<br><br>" +
			"<b>EXTRA INFO</b><br>" +
			"<ul>" +
			"<li>The NPC transmog is only seen on your end. Others will still see your actual pet</li>" +
			"<li>Large models will clip due to their size. Increasing the 'radius' in the panel will prevent this</li>" +
			"<li>If a large model is too close to you, increase the X Offset or the Y Offset to put more distance between you and the NPC</li>" +
			"<li>Spawn ID can be used to try out animations for the NPC. Animation ID's can be found in the 'Model' tab instead of the 'data' tab on RuneMonk</li>" +
			"<li>For now turn the plugin off if you need to pick up your pet until a future update</li>" +
			"</ul>" +
			"</html>";

		JTextPane instructions = new JTextPane();
		instructions.setContentType("text/html");
		instructions.setText(instructionsText);
		instructions.setEditable(false);
		instructions.setBorder(new EmptyBorder(10, 10, 10, 10));
		instructions.setPreferredSize(new Dimension(600, 650));

		JOptionPane.showMessageDialog(null, instructions, "Instructions", JOptionPane.PLAIN_MESSAGE);
	}
}

package com.pettonpc;

import com.google.common.collect.Lists;
import java.util.List;
import lombok.Getter;

@Getter
public enum NpcData
{
	WiseOldMan("Wise Old Man", Lists.newArrayList(187, 9103, 4925, 28515, 323, 26619, 176, 3711, 265, 181), 813, 1146, 60, 10459, 0, 0),
	GnomeChild("Gnome Child", Lists.newArrayList(2909, 2899, 2918), 195, 189, 60, 10492, 0, 0),
	Nieve("Nieve", Lists.newArrayList(392, 27644, 27640, 19951, 3661, 28827, 9644, 27654, 9640, 11048), 10075, 10076, 60, 10036, 0, 0),
	DrunkenDwarf("DrunkenDwarf", Lists.newArrayList(2974, 2986, 2983, 2979, 2981, 2985, 2992), 900, 104, 60, 2342, 0, 0),
	Konar("Konar", Lists.newArrayList(36162), 8219, 8218, 60, 8219, 0, 0),
	Thurgo("Thurgon", Lists.newArrayList(7034, 7049, 7041, 7057, 2985, 19100), 7861, 2156, 60, 100, 0, 0),
	//	Zilyana("Zilyana", Lists.newArrayList(27989, 27937, 27985, 27968, 27990), 6966, 6965, 120, 6967),
	Kklik("Kklik", Lists.newArrayList(13850, 13848, 13849), 3345, 3346, 60, 3345, 0, 0),
	Seren("Seren", Lists.newArrayList(38605), 8372, 8372, 180, 8380, 0, 0),
	Nightmare("Nightmare", Lists.newArrayList(42591), 8593, 8634, 300, 8609, 2, 0),
	Dog("Good Boy", Lists.newArrayList(26253), 6561, 6560, 60, 6561, 0, 0);
//	Whisperer("Nightmare", Lists.newArrayList(49222,49218,49221,49224,49219), 10230, 10232, 300, 8609, 2);


	// Properties
	final String name;
	final List<Integer> modelIDs;
	final int standingAnim;
	final int walkAnim;
	final int radius;
	final int spawnAnim;
	final int offsetX;
	final int offsetY;

	//Constructor
	NpcData(String name, List<Integer> modelIDs, int standingAnim, int walkAnim, int radius, int spawnAnim, int offsetX, int offsetY)
	{
		this.name = name;
		this.modelIDs = modelIDs;
		this.standingAnim = standingAnim;
		this.walkAnim = walkAnim;
		this.radius = radius;
		this.spawnAnim = spawnAnim;
		this.offsetX = offsetX;
		this.offsetY = offsetY;

	}
}




package com.pettonpc;

import javax.swing.JComboBox;
import net.runelite.client.config.ConfigManager;

public class DataManager
{

	private ConfigManager configManager;

	public DataManager(ConfigManager configManager)
	{
		this.configManager = configManager;
	}

	public void saveConfiguration(String name, String key, int value)
	{
		configManager.setConfiguration("petToNpcTransmog", name + "_" + key, String.valueOf(value));
	}

	public String getSavedConfigNames()
	{
		return configManager.getConfiguration("petToNpcTransmog", "savedConfigNames");
	}

	public void setSavedConfigNames(String savedConfigNames)
	{
		configManager.setConfiguration("petToNpcTransmog", "savedConfigNames", savedConfigNames);
	}

	public void initializeConfigDropdown(JComboBox<String> configDropdown)
	{
		updateConfigDropdown(configDropdown);
	}

	public void updateConfigDropdown(JComboBox<String> configDropdown)
	{

		configDropdown.removeAllItems();
		String savedConfigNames = configManager.getConfiguration("petToNpcTransmog", "savedConfigNames");
		if (savedConfigNames != null && !savedConfigNames.isEmpty())
		{
			String[] configNames = savedConfigNames.split(",");
			for (String configName : configNames)
			{
				configDropdown.addItem(configName);
			}
		}
	}
}

package com.pettonpc;

import java.util.List;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.RuneLiteObject;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.ui.overlay.OverlayManager;

public class PlayerStateTracker
{
	@Inject
	private OverlayManager overlayManager;
//	@Inject
//	private TextOverlay textOverlay;

	private PlayerState currentState;
	private final Client client;
	private final AnimationManager animationManager;
	private List<RuneLiteObject> transmogObjects;

	public PlayerStateTracker(Client client, AnimationManager animationManager, NpcFollowerPlugin npcFollowerPlugin)
	{
		this.client = client;
		this.animationManager = animationManager;
	}

	public List<RuneLiteObject> getTransmogObjects()
	{
		return transmogObjects;
	}

	public void setTransmogObjects(List<RuneLiteObject> transmogObjects)
	{
		this.transmogObjects = transmogObjects;
	}

	public void setCurrentState(PlayerState newState)
	{
		NPC follower = client.getFollower();
		this.currentState = newState;
		updateFollowerMovement(follower);
		updateFollowerState(follower);
	}

	public PlayerState getCurrentState()
	{
		return this.currentState;
	}

	public void updateFollowerMovement(NPC follower)
	{
		if (transmogObjects == null || follower == null || currentState == PlayerState.SPAWNING)
		{
			return;
		}

		LocalPoint currentLocation = follower.getLocalLocation();
		PlayerState newState;
		int WALKING_ANIMATION_ID = follower.getWalkAnimation();
		int STANDING_ANIMATION_ID = follower.getIdlePoseAnimation();
		int ACTION_ANIMATION_ID = follower.getPoseAnimation();

		if (ACTION_ANIMATION_ID == WALKING_ANIMATION_ID)
		{
			newState = PlayerState.MOVING;
		}
		else
		{
			newState = PlayerState.STANDING;
		}

		if (newState != currentState)
		{
			animationManager.cancelCurrentAnimation();
		}

		currentState = newState;
		updateFollowerState(follower);
	}

	public void updateFollowerState(NPC follower)
	{
		switch (currentState)
		{
			case MOVING:
				animationManager.handleWalkingAnimation(follower);
				break;
			case STANDING:
				animationManager.handleStandingAnimation(follower);
				break;
			case SPAWNING:
				animationManager.triggerSpawnAnimation(follower);
				break;
			case IDLE:
				updateFollowerMovement(follower);
				break;
		}
	}
}

//package com.pettonpc;
//
////import com.google.inject.Provides;
//
//import java.awt.Color;
//import java.awt.Dimension;
//import java.awt.Font;
//import java.awt.Graphics2D;
//import java.util.List;
//import javax.inject.Inject;
//import net.runelite.api.Client;
//import net.runelite.api.Perspective;
//import net.runelite.api.Point;
//import net.runelite.api.RuneLiteObject;
//import net.runelite.api.coords.LocalPoint;
//import net.runelite.client.callback.ClientThread;
//import net.runelite.client.ui.FontManager;
//import net.runelite.client.ui.overlay.Overlay;
//import net.runelite.client.ui.overlay.OverlayPosition;
//import net.runelite.client.ui.overlay.OverlayUtil;
//
//public class TextOverlay extends Overlay {
//	private final NpcFollowerPlugin plugin;
//	private final Client client;
//	private final NpcFollowerConfig config;
//	private final ClientThread clientThread;
//
//	@Inject
//	public TextOverlay(NpcFollowerPlugin plugin, Client client, NpcFollowerConfig config, ClientThread clientThread) {
//		this.plugin = plugin;
//		this.client = client;
//		this.config = config;
//		this.clientThread = clientThread;
//		setPosition(OverlayPosition.DYNAMIC);
//	}

//	@Override
//	public Dimension render(Graphics2D graphics) {
//		if (plugin.isTransmogInitialized()) {
//			String text = "Hi dad"; // Replace with the text you want to display
//			List<RuneLiteObject> transmogObjects = plugin.getTransmogObjects();
//			for (RuneLiteObject transmogObject : transmogObjects) {
//				if (transmogObject != null) {
//					LocalPoint localPoint = transmogObject.getLocation();
//					if (localPoint != null) {
//						Point textLocation = Perspective.getCanvasTextLocation(client, graphics, localPoint, text, config.textLocation());
//						if (textLocation != null) {
//							Font font = FontManager.getRunescapeBoldFont();
//							graphics.setFont(font);
//							Color textColor = Color.YELLOW;
//							OverlayUtil.renderTextLocation(graphics, textLocation, text, textColor);
//						}
//					}
//				}
//			}
//		}
//		return null;
//	}
//}

package com.pettonpc;

import java.util.List;
import net.runelite.api.Animation;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.RuneLiteObject;

@SuppressWarnings("LombokSetterMayBeUsed")
public class AnimationManager
{
	private final Client client;
	private final NpcFollowerPanel panel;
	private List<RuneLiteObject> transmogObjects;
	private int previousWalkingFrame = -1;
	private int previousStandingFrame = -1;
	private int currentFrame;
	private PlayerStateTracker playerStateTracker;

	public void setPlayerStateTracker(PlayerStateTracker playerStateTracker)
	{
		this.playerStateTracker = playerStateTracker;
	}

	public AnimationManager(Client client, NpcFollowerPanel panel, PlayerStateTracker playerStateTracker)
	{
		this.client = client;
		this.panel = panel;
		this.playerStateTracker = playerStateTracker;
	}

	public void setTransmogObjects(List<RuneLiteObject> transmogObjects)
	{
		this.transmogObjects = transmogObjects;
	}

	public void triggerSpawnAnimation(NPC follower)
	{
		NpcData selectedNpc = panel.getSelectedNpc();
		int spawnAnimationId;
		Animation spawnAnimation;

		if (selectedNpc == null)
		{
			return;
		}

		if (!panel.enableCustom())
		{
			spawnAnimationId = selectedNpc.spawnAnim;
		}
		else
		{
			spawnAnimationId = panel.getSpawnAnimationID();
		}

		spawnAnimation = client.loadAnimation(spawnAnimationId);

		for (RuneLiteObject transmogObject : transmogObjects)
		{
			playerStateTracker.setCurrentState(PlayerState.IDLE);

			if (transmogObject != null && follower != null)
			{
				transmogObject.setActive(true);
				transmogObject.setAnimation(spawnAnimation);
				transmogObject.setShouldLoop(false);

				playerStateTracker.setCurrentState(PlayerState.IDLE);
			}
		}
	}

	public void handleWalkingAnimation(NPC follower)
	{
		PlayerState currentState = playerStateTracker.getCurrentState();

		if (currentState == PlayerState.SPAWNING)
		{
			cancelCurrentAnimation();
		}

		NpcData selectedNpc = panel.getSelectedNpc();
		int walkingAnimationId = (panel.enableCustom()) ? panel.getWalkingAnimationId() : selectedNpc.getWalkAnim();
		Animation walkingAnimation = client.loadAnimation(walkingAnimationId);

		if (selectedNpc == null || walkingAnimation == null || follower == null)
		{
			return;
		}

		transmogObjects.forEach(transmogObject -> {
			if (transmogObject != null)
			{
				currentFrame = transmogObject.getAnimationFrame();
				transmogObject.setActive(true);
				transmogObject.setShouldLoop(true);

				if (previousWalkingFrame == -1 || previousWalkingFrame > currentFrame)
				{
					transmogObject.setAnimation(walkingAnimation);
				}
				previousWalkingFrame = currentFrame;
			}
		});
	}

	public void handleStandingAnimation(NPC follower)
	{
		PlayerState currentState = playerStateTracker.getCurrentState();

		if (currentState == PlayerState.SPAWNING || currentState == PlayerState.IDLE)
		{
			return;
		}

		NpcData selectedNpc = panel.getSelectedNpc();
		if (selectedNpc == null)
		{
			return;
		}

		int standingAnimationId = (panel.enableCustom()) ? panel.getStandingAnimationId() : selectedNpc.getStandingAnim();
		Animation standingAnimation = client.loadAnimation(standingAnimationId);

		if (standingAnimation == null || follower == null)
		{
			return;
		}

		for (RuneLiteObject transmogObject : transmogObjects)
		{
			if (transmogObject != null)
			{
				currentFrame = transmogObject.getAnimationFrame();
				transmogObject.setActive(true);
				transmogObject.setShouldLoop(true);
				if (previousStandingFrame == -1 || previousStandingFrame > currentFrame)
				{
					transmogObject.setAnimation(standingAnimation);
				}
				previousStandingFrame = currentFrame;
			}
		}
	}

	public void cancelCurrentAnimation()
	{
		for (RuneLiteObject transmogObject : transmogObjects)
		{
			if (transmogObject != null)
			{
				transmogObject.setShouldLoop(false);
				transmogObject.setActive(false);
			}
		}
	}
}

