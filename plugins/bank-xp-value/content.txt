package com.bankxpvalue;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class BankXpValuePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(BankXpValuePlugin.class);
		RuneLite.main(args);
	}
}
package com.bankxpvalue;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.HashMap;
import java.util.ArrayList;
import com.google.gson.Gson;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Item;
import java.awt.image.BufferedImage;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.components.ImageComponent;
import lombok.AllArgsConstructor;
import javax.inject.Inject;

@Slf4j
public class ItemDataCache {

    @AllArgsConstructor
    class ItemData{
        public int id;
        public double xp;
        public String skill;
    }

    @AllArgsConstructor
    class SkillContents{
        public double total;
        public List<ImageComponent> images;
    }

    @AllArgsConstructor
    class ItemDataContainer{
        List<ItemData> items;
    }

    private static HashMap<String, Integer> skills = new HashMap<>();
    private static HashMap<Integer, ItemData> cache = new HashMap<>();
    private final ItemManager itemManager;
    private final Gson gson;

    @Inject
    public ItemDataCache(ItemManager itemManager, Gson gson){
        this.itemManager = itemManager;
        this.gson = gson;
        mapSkills();
        populateCache();
    }

    // Set the skills
    private void mapSkills(){
        skills.put("construction", 0);
        skills.put("cooking", 1);
        skills.put("crafting", 2);
        skills.put("farming", 3);
        skills.put("firemaking", 4);
        skills.put("fletching", 5);
        skills.put("herblore", 6);
        skills.put("prayer", 7);
        skills.put("smithing", 8);
    }

    // Stores json data in hashmap
    private void populateCache(){
        try (Reader reader = new InputStreamReader(getClass().getResourceAsStream("/item_xp_data.json"), StandardCharsets.UTF_8)) {
            ItemDataContainer data = gson.fromJson(reader, ItemDataContainer.class);
            for (ItemData item : data.items) {
                cache.put(item.id, item);
            }
        } catch (IOException e) {
            log.warn("Failed to read item xp data", e);
        }
    }

    // Computes the total xp for each skill
    public SkillContents[] getTotals(Item[] items){
        SkillContents[] skillContents = new SkillContents[10];

        for (int i = 0; i < skillContents.length; i++){
            skillContents[i] = new SkillContents(0.0, new ArrayList<>());
        }

        for (int i = 0; i < items.length; i++){
            if (cache.containsKey(items[i].getId())){
                ItemData data = cache.get(items[i].getId());

                // Add the XP to the skill's total
                skillContents[skills.get(data.skill)].total += data.xp * items[i].getQuantity();
                skillContents[9].total += data.xp * items[i].getQuantity();

                // Add the image to the skill's tooltip
                final BufferedImage image = itemManager.getImage(items[i].getId(), items[i].getQuantity(), true);
                skillContents[skills.get(data.skill)].images.add(new ImageComponent(image));
            }
        }
        return skillContents;
    }

    // Outside classes use to search hash table
    public ItemData getItem(int id){
        if (cache.containsKey(id)){
            return cache.get(id);
        }
        return null;
    }
}

package com.bankxpvalue;

import net.runelite.api.*;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetID;
import net.runelite.client.plugins.Plugin;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.events.ConfigChanged;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.eventbus.Subscribe;
import com.google.inject.Provides;
import javax.inject.Inject;
import java.util.Arrays;

@PluginDescriptor(
    name = "Bank XP Value",
    description = "All-in-one banked xp viewer + item xp tooltips",
    tags = {"bank", "xp", "calc", "item", "skill", "overlay", "tooltip"}
)
public class BankXpValuePlugin extends Plugin {
    public static final String CONFIG_GROUP = "bankxpvalue";

    @Inject
    private Client client;

    @Inject
    private BankXpValueOverlay overlay;

    @Inject
    private BankXpValueTutorialOverlay tutorialOverlay;

    @Inject
    private BankXpValueItemOverlay itemOverlay;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private BankXpValueConfig config;

    @Inject
    private ItemDataCache data;

    private Widget bank;
    private ItemContainer bankContainer;
    private ItemContainer seedVaultContainer;
    private boolean pluginToggled = false;

    @Provides
    BankXpValueConfig provideConfig(ConfigManager configManager){
        return configManager.getConfig(BankXpValueConfig.class);
    }

    @Override
    protected void startUp() throws Exception{
        if (config.showTutorial()){
            overlayManager.add(tutorialOverlay);
        }
        if (config.showItemXpTooltips()){
            overlayManager.add(itemOverlay);
        }
    }

    @Override
    protected void shutDown() throws Exception{
        overlayManager.remove(overlay);
        overlayManager.remove(tutorialOverlay);
        overlayManager.remove(itemOverlay);
    }

    @Subscribe
    public void onMenuEntryAdded(MenuEntryAdded event){
        if (event.getType() != MenuAction.CC_OP.getId() || !event.getOption().equals("Show menu")
                || (event.getActionParam1() >> 16) != WidgetID.BANK_GROUP_ID){
            return;
        }

        if (config.showTutorial()){
            client.createMenuEntry(-1)
                .setOption("Disable tutorial")
                .setTarget("")
                .setType(MenuAction.WIDGET_FIFTH_OPTION)
                .setIdentifier(event.getIdentifier())
                .setParam0(event.getActionParam0())
                .setParam1(event.getActionParam1())
                .onClick(e -> this.hideTutorial())
                .setDeprioritized(true);
        }

        client.createMenuEntry(-1)
            .setOption("Toggle Banked XP")
            .setTarget("")
            .setType(MenuAction.RUNELITE)
            .onClick(this::onClick)
            .setDeprioritized(true);
    }

    public void onClick(MenuEntry entry){
        bank = client.getWidget(WidgetInfo.BANK_CONTAINER);
        if (bank == null){
            overlayManager.remove(overlay);
            pluginToggled = false;
            return;
        }

        if (config.showTutorial()){
            tutorialOverlay.nextTip = true;
        }

        pluginToggled = !pluginToggled;
        if (pluginToggled){
            calculate();
            overlayManager.add(overlay);
            if (config.resetToCenter()) {
                overlay.resetPositionToCenter();
            }
        }
        else{
            overlayManager.remove(overlay);
            hideTutorial();
        }
    }

    @Subscribe
    public void onItemContainerChanged(ItemContainerChanged event){
        if (event.getContainerId() == InventoryID.SEED_VAULT.getId() && config.includeSeedVault()){
            seedVaultContainer = client.getItemContainer(InventoryID.SEED_VAULT);
        }
        else if (bank != null && event.getContainerId() == InventoryID.BANK.getId()){
            calculate();
        }
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged configChanged){
        if (configChanged.getKey().equals("bankxpvalueplugin")){
            hideTutorial();
            hideOverlay();
            overlayManager.remove(itemOverlay);
        }

        if (!configChanged.getGroup().equals(CONFIG_GROUP)){
            return;
        }

        // If the overlay is being shown while the user toggles resetToCenter on, move the overlay
        if (pluginToggled && configChanged.getKey().equals("resetToCenter") && config.resetToCenter()) {
            overlay.resetPositionToCenter();
        }

        if (configChanged.getKey().equals("tutorial")){
            if (config.showTutorial()){
                hideOverlay();
                config.setTutorial(true);
                overlayManager.add(tutorialOverlay);
            }
            else{
                hideTutorial();
            }
        }

        if (configChanged.getKey().equals("includeSeedVault")){
            calculate();
        }
    }

    // Includes seed vault items if config set
    private Item[] includeSeedVault(Item[] items){
        ItemContainer container = seedVaultContainer;

        if (container == null || container.size() == 0){
            return items;
        }

        Item[] moreItems = Arrays.copyOf(items, items.length + container.size());

        int count = 0;
        for (int i = items.length; i < moreItems.length; i++){
            moreItems[i] = container.getItem(count);
            count++;
        }
        return moreItems;
    }

    // Sends bank data to calculate totals
    private void calculate(){
        bankContainer = client.getItemContainer(InventoryID.BANK);
        if (bankContainer != null){
            Item[] items = bankContainer.getItems();

            if (config.includeSeedVault()){
                items = includeSeedVault(items);
            }

            overlay.setXpTotals(data.getTotals(items));
        }
    }

    // Hides overlay on hidden detection
    public void hideOverlay(){
        pluginToggled = false;
        overlayManager.remove(overlay);
    }

    // Hides tutorial overlay
    public void hideTutorial(){
        overlayManager.remove(tutorialOverlay);
        config.setTutorial(false);
        tutorialOverlay.nextTip = false;
    }
}
package com.bankxpvalue;

import java.awt.*;
import java.awt.Point;
import java.util.HashMap;
import net.runelite.api.*;
import java.util.ArrayList;
import javax.inject.Inject;
import javax.inject.Singleton;
import java.awt.geom.Rectangle2D;
import net.runelite.api.widgets.Widget;
import net.runelite.client.ui.overlay.*;
import net.runelite.client.ui.SkillColor;
import net.runelite.client.util.ColorUtil;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.game.SkillIconManager;
import net.runelite.client.ui.overlay.components.*;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;
import net.runelite.client.ui.overlay.components.ComponentOrientation;

@Singleton
public class BankXpValueOverlay extends OverlayPanel {

    private final Client client;
    private final BankXpValuePlugin plugin;
    private final BankXpValueConfig config;
    private final TooltipManager tooltipManager;
    private final SkillIconManager iconManager;
    private final PanelComponent skillsBar;
    private final OverlayManager overlayManager;
    private Widget bank;

    private final static String[] xpTotals = new String[10];
    private final static ArrayList<PanelComponent> itemPanels = new ArrayList<>();
    private final static HashMap<String, String> potentialLvlUps = new HashMap<>();
    private int iterationCounter = 0;

    @Inject
    private BankXpValueOverlay(Client client, TooltipManager tooltipManager, BankXpValueConfig config,
                               BankXpValuePlugin plugin, OverlayManager overlayManager){

        this.client = client;
        this.plugin = plugin;
        this.config = config;
        this.tooltipManager = tooltipManager;
        this.overlayManager = overlayManager;

        setLayer(OverlayLayer.ABOVE_WIDGETS);
        setPriority(OverlayPriority.HIGHEST);
        setPosition(OverlayPosition.TOP_CENTER);
        setResizable(false);
        setResettable(false);

        panelComponent.setBackgroundColor(new Color(51, 51, 51, 245));

        iconManager = new SkillIconManager();
        skillsBar = new PanelComponent();
        createSkillsBar();
    }

    @Override
    public Dimension render(Graphics2D graphics){
        // Used when the overlay is set to TOP_CENTER, we'll move it to CENTER_CENTER so that
        // the tutorial actually has a location to use.
        if (getPreferredLocation() == null) {
            // Set the location to something so that this block isn't run on next iteration
            setPreferredLocation(getBounds().getLocation());
            resetPositionToCenter();
        }

        bank = client.getWidget(WidgetInfo.BANK_CONTAINER);

        panelComponent.getChildren().clear();

        if (bank == null || bank.isHidden()){
            plugin.hideOverlay();

            if (config.showTutorial()){
                plugin.hideTutorial();
            }
            return null;
        }

        panelComponent.getChildren().add(TitleComponent.builder()
                .text("Banked Experience")
                .build());

        panelComponent.setPreferredSize(new Dimension(skillsBar.getBounds().width + 6, 0));

        displayTotals();

        if (iterationCounter >= 0){
            iterationCounter++;

            // Takes 2 iterations for the positioning to properly set in the middle
            if (iterationCounter == 2){
                int x = (int)(bank.getBounds().x + (bank.getBounds().getWidth() / 2) - (getBounds().getWidth() / 2));
                int y = (int)(bank.getBounds().y + (bank.getBounds().getHeight()/ 2) - (getBounds().getHeight() / 2));
                setPreferredLocation(new Point(x, y));
                // Saves the preferred location to the config so that there is no flickering when enabling again
                this.overlayManager.saveOverlay(this);
                iterationCounter = -1;
            }
        }

        final net.runelite.api.Point cursor = client.getMouseCanvasPosition();

        if (null != getPreferredLocation()){
            if (getBounds().getHeight() >= 200){
                setBounds(graphics, cursor, getPreferredLocation().x + 5, getPreferredLocation().y + 183);
            }
            else{
                setBounds(graphics, cursor, getPreferredLocation().x + 5, getPreferredLocation().y + 139);
            }
        }

        return super.render(graphics);
    }

    // Sets the calculated XP totals
    public void setXpTotals(ItemDataCache.SkillContents[] skillContents){
        for (int i = 0; i < skillContents.length; i++){
            if ((int)skillContents[i].total == 0){
                xpTotals[i] = "None";
            }
            else{
                xpTotals[i] = String.format("%,d", (int)Math.ceil(skillContents[i].total));
            }
        }
        createTooltips(skillContents);
        setPotentialLevels(skillContents);
    }

    public void resetPositionToCenter() {
        iterationCounter = 0;
    }

    // Displays each total and corresponding skill
    private void displayTotals(){
        panelComponent.getChildren().add(LineComponent.builder()
                .left("Construction: ")
                .leftColor(SkillColor.CONSTRUCTION.getColor().brighter().brighter())
                .right("" + xpTotals[0]).build());

        panelComponent.getChildren().add(LineComponent.builder()
                .left("Cooking: ")
                .leftColor(SkillColor.COOKING.getColor().brighter().brighter())
                .right("" + xpTotals[1]).build());

        panelComponent.getChildren().add(LineComponent.builder()
                .left("Crafting: ")
                .leftColor(SkillColor.CRAFTING.getColor().brighter().brighter())
                .right("" + xpTotals[2]).build());

        panelComponent.getChildren().add(LineComponent.builder()
                .left("Farming: ")
                .leftColor(SkillColor.FARMING.getColor().brighter().brighter())
                .right("" + xpTotals[3]).build());

        panelComponent.getChildren().add(LineComponent.builder()
                .left("Firemaking: ")
                .leftColor(new Color(255, 119, 0))
                .right("" + xpTotals[4]).build());

        panelComponent.getChildren().add(LineComponent.builder()
                .left("Fletching: ")
                .leftColor(SkillColor.FLETCHING.getColor().brighter().brighter())
                .right("" + xpTotals[5]).build());

        panelComponent.getChildren().add(LineComponent.builder()
                .left("Herblore: ")
                .leftColor(SkillColor.HERBLORE.getColor().brighter().brighter())
                .right("" + xpTotals[6]).build());

        panelComponent.getChildren().add(LineComponent.builder()
                .left("Prayer: ")
                .leftColor(SkillColor.PRAYER.getColor().brighter().brighter())
                .right("" + xpTotals[7]).build());

        panelComponent.getChildren().add(LineComponent.builder()
                .left("Smithing: ")
                .leftColor(SkillColor.SMITHING.getColor().brighter().brighter())
                .right("" + xpTotals[8]).build());

        panelComponent.getChildren().add(LineComponent.builder()
                .left("Total: ")
                .right("" + xpTotals[9]).build());

        panelComponent.getChildren().add(skillsBar);
    }

    // Creates the skill bar component (used to see included items)
    private void createSkillsBar(){
        skillsBar.setGap(new Point(6, 0));
        skillsBar.setBackgroundColor(Color.DARK_GRAY);
        skillsBar.setOrientation(ComponentOrientation.HORIZONTAL);
        skillsBar.getChildren().add(new ImageComponent(iconManager.getSkillImage(Skill.CONSTRUCTION, true)));
        skillsBar.getChildren().add(new ImageComponent(iconManager.getSkillImage(Skill.COOKING, true)));
        skillsBar.getChildren().add(new ImageComponent(iconManager.getSkillImage(Skill.CRAFTING, true)));
        skillsBar.getChildren().add(new ImageComponent(iconManager.getSkillImage(Skill.FARMING, true)));
        skillsBar.getChildren().add(new ImageComponent(iconManager.getSkillImage(Skill.FIREMAKING, true)));
        skillsBar.getChildren().add(new ImageComponent(iconManager.getSkillImage(Skill.FLETCHING, true)));
        skillsBar.getChildren().add(new ImageComponent(iconManager.getSkillImage(Skill.HERBLORE, true)));
        skillsBar.getChildren().add(new ImageComponent(iconManager.getSkillImage(Skill.PRAYER, true)));
        skillsBar.getChildren().add(new ImageComponent(iconManager.getSkillImage(Skill.SMITHING, true)));
    }

    // Stores xp needed for a level up in hashmap
    private void setPotentialLevels(ItemDataCache.SkillContents[] skillContents){
        potentialLvlUps.put("construction", colorLvlUps(Experience.getLevelForXp(client.getSkillExperience(Skill.CONSTRUCTION)
                + (int)Math.ceil(skillContents[0].total)) - client.getRealSkillLevel(Skill.CONSTRUCTION)));
        potentialLvlUps.put("cooking", colorLvlUps(Experience.getLevelForXp(client.getSkillExperience(Skill.COOKING)
                + (int)Math.ceil(skillContents[1].total)) - client.getRealSkillLevel(Skill.COOKING)));
        potentialLvlUps.put("crafting", colorLvlUps(Experience.getLevelForXp(client.getSkillExperience(Skill.CRAFTING)
                + (int)Math.ceil(skillContents[2].total)) - client.getRealSkillLevel(Skill.CRAFTING)));
        potentialLvlUps.put("farming", colorLvlUps(Experience.getLevelForXp(client.getSkillExperience(Skill.FARMING)
                + (int)Math.ceil(skillContents[3].total)) - client.getRealSkillLevel(Skill.FARMING)));
        potentialLvlUps.put("firemaking", colorLvlUps(Experience.getLevelForXp(client.getSkillExperience(Skill.FIREMAKING)
                + (int)Math.ceil(skillContents[4].total)) - client.getRealSkillLevel(Skill.FIREMAKING)));
        potentialLvlUps.put("fletching", colorLvlUps(Experience.getLevelForXp(client.getSkillExperience(Skill.FLETCHING)
                + (int)Math.ceil(skillContents[5].total)) - client.getRealSkillLevel(Skill.FLETCHING)));
        potentialLvlUps.put("herblore", colorLvlUps(Experience.getLevelForXp(client.getSkillExperience(Skill.HERBLORE)
                + (int)Math.ceil(skillContents[6].total)) - client.getRealSkillLevel(Skill.HERBLORE)));
        potentialLvlUps.put("prayer", colorLvlUps(Experience.getLevelForXp(client.getSkillExperience(Skill.PRAYER)
                + (int)Math.ceil(skillContents[7].total)) - client.getRealSkillLevel(Skill.PRAYER)));
        potentialLvlUps.put("smithing", colorLvlUps(Experience.getLevelForXp(client.getSkillExperience(Skill.SMITHING)
                + (int)Math.ceil(skillContents[8].total)) - client.getRealSkillLevel(Skill.SMITHING)));
    }

    private String colorLvlUps(int num){
        if (num > 0){
            return ColorUtil.wrapWithColorTag("+" + num, Color.GREEN);
        }
        return "" + num;
    }

    // Creates the tooltips that appear when hovering over skill bar
    private void createTooltips(ItemDataCache.SkillContents[] skillContents){
        if (itemPanels.size() != 0){
            itemPanels.clear();
        }

        for (int i = 0; i < skillContents.length; i++){
            PanelComponent panel = new PanelComponent();
            panel.setOrientation(ComponentOrientation.HORIZONTAL);
            panel.setPreferredSize(new Dimension(250, 0));
            panel.setWrap(true);
            for (int j = 0; j < skillContents[i].images.size(); j++){
                panel.getChildren().add(skillContents[i].images.get(j));
            }
            itemPanels.add(panel);
        }
    }

    // Creates the hover bounds for each skill bar icon
    private Rectangle2D[] createBounds(Graphics2D graphics, int x, int y){
        Rectangle2D[] bounds = new Rectangle2D[9];

        for (int i = 0; i < bounds.length; i++){
            bounds[i] = new Rectangle2D.Double(x, y, 22, 25);
            x+= 22;
        }
        return bounds;
    }

    // Sets the bounds and executes on detection
    private void setBounds(Graphics2D graphics, net.runelite.api.Point cursor, int x, int y){
        Rectangle2D[] bounds = createBounds(graphics, x, y);

        if (bounds[0].contains(cursor.getX(), cursor.getY())){
            tooltipManager.clear();
            if (itemPanels.get(0).getChildren().size() != 0){
                String tooltip = xpTotals[0] + "xp";
                if (config.potentialLevels())
                    tooltip += "  |  Level-Ups: " + potentialLvlUps.get("construction");
                tooltip = ColorUtil.wrapWithColorTag("Construction: ",
                        SkillColor.CONSTRUCTION.getColor().brighter().brighter()) + tooltip;
                tooltipManager.add(new Tooltip(tooltip));
                tooltipManager.add(new Tooltip(itemPanels.get(0)));
            }
            else{
                tooltipManager.add(new Tooltip("Construction: " + xpTotals[0]));
            }
        }
        else if (bounds[1].contains(cursor.getX(), cursor.getY())){
            tooltipManager.clear();
            if (itemPanels.get(1).getChildren().size() != 0){
                String tooltip = xpTotals[1] + "xp";
                if (config.potentialLevels())
                    tooltip += "  |  Level-Ups: " + potentialLvlUps.get("cooking");
                tooltip = ColorUtil.wrapWithColorTag("Cooking: ",
                        SkillColor.COOKING.getColor().brighter().brighter()) + tooltip;
                tooltipManager.add(new Tooltip(tooltip));
                tooltipManager.add(new Tooltip(itemPanels.get(1)));
            }
            else{
                tooltipManager.add(new Tooltip("Cooking: " + xpTotals[1]));
            }
        }
        else if (bounds[2].contains(cursor.getX(), cursor.getY())){
            tooltipManager.clear();
            if (itemPanels.get(2).getChildren().size() != 0){
                String tooltip = xpTotals[2] + "xp";
                if (config.potentialLevels())
                    tooltip += "  |  Level-Ups: " + potentialLvlUps.get("crafting");
                tooltip = ColorUtil.wrapWithColorTag("Crafting: ",
                        SkillColor.CRAFTING.getColor().brighter().brighter()) + tooltip;
                tooltipManager.add(new Tooltip(tooltip));
                tooltipManager.add(new Tooltip(itemPanels.get(2)));
            }
            else{
                tooltipManager.add(new Tooltip("Crafting: " + xpTotals[2]));
            }
        }
        else if (bounds[3].contains(cursor.getX(), cursor.getY())){
            tooltipManager.clear();
            if (itemPanels.get(3).getChildren().size() != 0){
                String tooltip = xpTotals[3] + "xp";
                if (config.potentialLevels())
                    tooltip += "  |  Level-Ups: " + potentialLvlUps.get("farming");
                tooltip = ColorUtil.wrapWithColorTag("Farming: ",
                        SkillColor.FARMING.getColor().brighter().brighter()) + tooltip;
                tooltipManager.add(new Tooltip(tooltip));
                tooltipManager.add(new Tooltip(itemPanels.get(3)));
            }
            else{
                tooltipManager.add(new Tooltip("Farming: " + xpTotals[3]));
            }
        }
        else if (bounds[4].contains(cursor.getX(), cursor.getY())){
            tooltipManager.clear();
            if (itemPanels.get(4).getChildren().size() != 0){
                String tooltip = xpTotals[4] + "xp";
                if (config.potentialLevels())
                    tooltip += "  |  Level-Ups: " + potentialLvlUps.get("firemaking");
                tooltip = ColorUtil.wrapWithColorTag("Firemaking: ",
                        new Color(255, 119, 0)) + tooltip;
                tooltipManager.add(new Tooltip(tooltip));
                tooltipManager.add(new Tooltip(itemPanels.get(4)));
            }
            else {
                tooltipManager.add(new Tooltip("Firemaking: " + xpTotals[4]));
            }
        }
        else if (bounds[5].contains(cursor.getX(), cursor.getY())){
            tooltipManager.clear();
            if (itemPanels.get(5).getChildren().size() != 0){
                String tooltip = xpTotals[5] + "xp";
                if (config.potentialLevels())
                    tooltip += "  |  Level-Ups: " + potentialLvlUps.get("fletching");
                tooltip = ColorUtil.wrapWithColorTag("Fletching: ",
                        SkillColor.FLETCHING.getColor().brighter().brighter()) + tooltip;
                tooltipManager.add(new Tooltip(tooltip));
                tooltipManager.add(new Tooltip(itemPanels.get(5)));
            }
            else{
                tooltipManager.add(new Tooltip("Fletching: " + xpTotals[5]));
            }
        }
        else if (bounds[6].contains(cursor.getX(), cursor.getY())){
            tooltipManager.clear();
            if (itemPanels.get(6).getChildren().size() != 0){
                String tooltip = xpTotals[6] + "xp";
                if (config.potentialLevels())
                    tooltip += "  |  Level-Ups: " + potentialLvlUps.get("herblore");
                tooltip = ColorUtil.wrapWithColorTag("Herblore: ",
                        SkillColor.HERBLORE.getColor().brighter().brighter()) + tooltip;
                tooltipManager.add(new Tooltip(tooltip));
                tooltipManager.add(new Tooltip(itemPanels.get(6)));
            }
            else {
                tooltipManager.add(new Tooltip("Herblore: " + xpTotals[6]));
            }
        }
        else if (bounds[7].contains(cursor.getX(), cursor.getY())){
            tooltipManager.clear();
            if (itemPanels.get(7).getChildren().size() != 0){
                String tooltip = xpTotals[7] + "xp";
                if (config.potentialLevels())
                    tooltip += "  |  Level-Ups: " + potentialLvlUps.get("prayer");
                tooltip = ColorUtil.wrapWithColorTag("Prayer: ",
                        SkillColor.PRAYER.getColor().brighter().brighter()) + tooltip;
                tooltipManager.add(new Tooltip(tooltip));
                tooltipManager.add(new Tooltip(itemPanels.get(7)));
            }
            else {
                tooltipManager.add(new Tooltip("Prayer: " + xpTotals[7]));
            }
        }
        else if (bounds[8].contains(cursor.getX(), cursor.getY())){
            tooltipManager.clear();
            if (itemPanels.get(8).getChildren().size() != 0){
                String tooltip = xpTotals[8] + "xp";
                if (config.potentialLevels())
                    tooltip += "  |  Level-Ups: " + potentialLvlUps.get("smithing");
                tooltip = ColorUtil.wrapWithColorTag("Smithing: ",
                        SkillColor.SMITHING.getColor().brighter().brighter()) + tooltip;
                tooltipManager.add(new Tooltip(tooltip));
                tooltipManager.add(new Tooltip(itemPanels.get(8)));
            }
            else {
                tooltipManager.add(new Tooltip("Smithing: " + xpTotals[8]));
            }
        }
    }
}

package com.bankxpvalue;

import java.awt.*;
import javax.inject.Inject;
import javax.inject.Singleton;

import net.runelite.api.Client;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;

@Singleton
public class BankXpValueTutorialOverlay extends OverlayPanel {
    private final Client client;
    private final BankXpValueConfig config;
    private final BankXpValuePlugin plugin;
    private final BankXpValueOverlay overlay;
    public boolean nextTip = false;
    private Widget bank;

    @Inject
    private BankXpValueTutorialOverlay(Client client, BankXpValueConfig config, BankXpValuePlugin plugin, BankXpValueOverlay overlay){
        this.client = client;
        this.config = config;
        this.plugin = plugin;
        this.overlay = overlay;

        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ALWAYS_ON_TOP);
    }

    @Override
    public Dimension render(Graphics2D graphics){
        if (!config.showTutorial()){
            return null;
        }

        bank = client.getWidget(WidgetInfo.BANK_CONTAINER);

        if (bank == null || bank.isHidden()){
            return null;
        }

        Widget button = client.getWidget(WidgetInfo.BANK_SETTINGS_BUTTON);
        if (button == null || button.isSelfHidden() || button.getDynamicChildren()[0].getSpriteId() != 195){
            return null;
        }

        Rectangle bounds = button.getBounds();

        // If on tutorial step 1/2
        if (!nextTip){
            graphics.setColor(ColorScheme.BRAND_ORANGE);
            graphics.setStroke(new BasicStroke(2));
            graphics.drawRect(bounds.x, bounds.y, bounds.width, bounds.height);

            FontMetrics font = graphics.getFontMetrics();
            int width = font.stringWidth("Right click this button");

            graphics.setColor(ColorScheme.DARKER_GRAY_COLOR);
            graphics.fillRect(bounds.x + bounds.width + 2, bounds.y - 15, width + 6, 30);

            graphics.setColor(ColorScheme.BRAND_ORANGE);
            graphics.drawString("Right click this button", bounds.x + bounds.width + 5, bounds.y);
            graphics.drawString("to see your Banked XP", bounds.x + bounds.width + 5, bounds.y + 12);
        }
        // If on tutorial step 2/2
        else{
            int x = overlay.getPreferredLocation().x + 3;
            int y = overlay.getPreferredLocation().y + 181;

            graphics.setColor(ColorScheme.BRAND_ORANGE);
            graphics.setStroke(new BasicStroke(2));
            graphics.drawRect(x, y, 200, 21);

            FontMetrics font = graphics.getFontMetrics();
            int width = font.stringWidth("Hover over icons");

            graphics.setColor(ColorScheme.DARKER_GRAY_COLOR);
            graphics.fillRect(x + 205, y - 1, width + 2, 30);

            graphics.setColor(ColorScheme.BRAND_ORANGE);
            graphics.drawString("Hover over icons", x + 205, y + 14);
            graphics.drawString("to see items", x + 205, y + 26);

            final net.runelite.api.Point cursor = client.getMouseCanvasPosition();
            if (new Rectangle(x, y, 200, 23).contains(cursor.getX(), cursor.getY())){
                nextTip = false;
                plugin.hideTutorial();
            }
        }
        return super.render(graphics);
    }
}

package com.bankxpvalue;

import java.awt.*;

import net.runelite.api.*;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.ui.SkillColor;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.QuantityFormatter;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;

import javax.inject.Inject;

public class BankXpValueItemOverlay extends Overlay {

    private final Client client;
    private final BankXpValueConfig config;
    private final TooltipManager tooltipManager;

    @Inject
    ItemDataCache data;

    @Inject
    BankXpValueItemOverlay(Client client, BankXpValueConfig config, TooltipManager tooltipManager)
    {
        setPosition(OverlayPosition.DYNAMIC);
        setPriority(OverlayPriority.HIGHEST);
        this.client = client;
        this.config = config;
        this.tooltipManager = tooltipManager;
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (!config.showItemXpTooltips() || client.isMenuOpen()) {
            return null;
        }

        final MenuEntry[] menuEntries = client.getMenuEntries();

        if (menuEntries.length - 1 < 0) {
            return null;
        }

        final ItemContainer bank = client.getItemContainer(InventoryID.BANK);
        final MenuEntry menuEntry = menuEntries[menuEntries.length - 1];
        final int widgetId = menuEntry.getParam1();

        if (widgetId != WidgetInfo.BANK_ITEM_CONTAINER.getId()){
            return null;
        }

        final int index = menuEntry.getParam0();
        Item item;


        if (null == bank.getItem(index)){
            return null;
        }
        else{
            item = bank.getItem(index);
        }

        final StringBuilder xpValue = new StringBuilder();

        try{
            if (null != data.getItem(item.getId())){
                ItemDataCache.ItemData itemData = data.getItem(item.getId());

                xpValue.append(getColoredSkill(itemData.skill.substring(0, 1).toUpperCase() + itemData.skill.substring(1) + ": "));
                xpValue.append(QuantityFormatter.quantityToStackSize((long)(itemData.xp * item.getQuantity())));
                xpValue.append(" xp (" + QuantityFormatter.formatNumber(itemData.xp) + " ea)");
            }
        }
        catch (Exception e){
            // Hovered over "view tab" label
        }

        if (!xpValue.toString().equals("")) {
            tooltipManager.add(new Tooltip(xpValue.toString()));
        }
        return null;
    }

    // Colors the skill portion of the tooltip
    private String getColoredSkill(String skill){
        switch (skill){
            case "Construction: ":
                return ColorUtil.wrapWithColorTag("Construction: ",
                        SkillColor.CONSTRUCTION.getColor().brighter().brighter());
            case "Cooking: ":
                return ColorUtil.wrapWithColorTag("Cooking: ",
                        SkillColor.COOKING.getColor().brighter().brighter());
            case "Crafting: ":
                return ColorUtil.wrapWithColorTag("Crafting: ",
                        SkillColor.CRAFTING.getColor().brighter().brighter());
            case "Farming: ":
                return ColorUtil.wrapWithColorTag("Farming: ",
                        SkillColor.FARMING.getColor().brighter().brighter());
            case "Firemaking: ":
                return ColorUtil.wrapWithColorTag("Firemaking: ",
                        new Color(255, 119, 0));
            case "Fletching: ":
                return ColorUtil.wrapWithColorTag("Fletching: ",
                        SkillColor.FLETCHING.getColor().brighter().brighter());
            case "Herblore: ":
                return ColorUtil.wrapWithColorTag("Herblore: ",
                        SkillColor.HERBLORE.getColor().brighter().brighter());
            case "Prayer: ":
                return ColorUtil.wrapWithColorTag("Prayer: ",
                        SkillColor.PRAYER.getColor().brighter().brighter());
            case "Smithing: ":
                return ColorUtil.wrapWithColorTag("Smithing: ",
                        SkillColor.SMITHING.getColor().brighter().brighter());
        }
        return skill;
    }
}
package com.bankxpvalue;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(BankXpValuePlugin.CONFIG_GROUP)
public interface BankXpValueConfig extends Config{
    @ConfigItem(
            position = 1,
            keyName = "tutorial",
            name = "Show tutorial",
            description = "Shows a tutorial overlay that explains how to use the plugin"
    )
    default boolean showTutorial(){
        return true;
    }

    @ConfigItem(
            keyName = "tutorial",
            name = "",
            description = ""
    )
    void setTutorial(boolean tutorial);

    @ConfigItem(
            position = 2,
            keyName = "resetToCenter",
            name = "Reset overlay to center",
            description = "Resets the overlay to the center of the bank window when shown"
    )
    default boolean resetToCenter(){
        return false;
    }

    @ConfigItem(
            position = 3,
            keyName = "includeSeedVault",
            name = "Include seed vault",
            description = "Includes items in your seed vault"
    )
    default boolean includeSeedVault(){
        return true;
    }

    @ConfigItem(
            position = 4,
            keyName = "itemXpTooltips",
            name = "Show item xp tooltips",
            description = "Displays a tooltip containing the xp of an item stack"
    )
    default boolean showItemXpTooltips(){
        return true;
    }

    @ConfigItem(
            position = 5,
            keyName = "levelUps",
            name = "Show available level-ups",
            description = "Skill-bar tooltips include number of available level-ups"
    )
    default boolean potentialLevels(){
        return true;
    }
}

