package com.bingoeventautomated;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class BingoEventAutomatedPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(BingoEventAutomatedPlugin.class);
		RuneLite.main(args);
	}
}
package com.bingoeventautomated.events;

import net.runelite.api.events.MenuOptionClicked;
import net.runelite.client.game.ItemManager;

import javax.inject.Inject;
import java.util.ArrayList;

public class PlayerEvent {
    public static ArrayList<String> invalidItems = new ArrayList<>();
    @Inject
    private ItemManager itemManager;

    public void UpdateInvalidItemList(MenuOptionClicked event) {
        String menuOption = event.getMenuOption();
        AddDroppedItemToInvalidItems(event, menuOption);
        RemoveTakenItemFromInvalidItems(event, menuOption);
    }

    private void AddDroppedItemToInvalidItems(MenuOptionClicked event, String menuOption) {
        if (!menuOption.equals("Drop"))
            return;

        int itemId = event.getItemId();
        String item = this.itemManager.getItemComposition(itemId).getName();
        invalidItems.add(item);
    }

    private void RemoveTakenItemFromInvalidItems(MenuOptionClicked event, String menuOption) {
        if (!menuOption.equals("Take"))
            return;

        String itemTaken = event.getMenuTarget();
        for (int i = 0; i < invalidItems.size(); i++) {
            String item = invalidItems.get(i);
            if (itemTaken.contains(item)) {
                invalidItems.remove(item);
            }
        }
    }
}

package com.bingoeventautomated.validator;

import com.bingoeventautomated.Mapper.ActionDataItem;
import com.bingoeventautomated.Mapper.ActionDataModel;
import com.bingoeventautomated.events.PlayerEvent;

import java.util.ArrayList;
import java.util.Iterator;

public class ActionDataItemValidator {
    public ActionDataModel validate(ActionDataModel actionData) {
        ArrayList<String> invalidItemList = PlayerEvent.invalidItems;
        actionData.items = ExtractValidItems(actionData, invalidItemList);
        return actionData;
    }

    private ArrayList ExtractValidItems(ActionDataModel actionData, ArrayList<String> invalidItemList) {
        ArrayList validItemList = new ArrayList();
        Iterator iterator = actionData.items.iterator();
        while (iterator.hasNext()) {
            ActionDataItem actionDataItem = (ActionDataItem) iterator.next();
            String itemName = actionDataItem.getName();
            if (!invalidItemList.contains(itemName)) {
                validItemList.add(actionDataItem);
            }
        }
        return validItemList;
    }
}

package com.bingoeventautomated.service;

import lombok.Data;

@Data
class DiscordChatMessageModel {
    private String content;
    private Embed embed;

    @Data
    static class Embed {
        final UrlEmbed image;
    }

    @Data
    static class UrlEmbed {
        final String url;
    }
}
package com.bingoeventautomated.service;

public enum CacheKeys {
    ITEMSOURCES
}

package com.bingoeventautomated.service;

import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import com.google.gson.reflect.TypeToken;
import okhttp3.Call;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.TimeUnit;

public class DynamicConfigClient extends BEAClientBase {
    private final Cache<CacheKeys, ArrayList<String>> configCache;

    public DynamicConfigClient() {
        int nrOfEntries = 1;
        int nrOfHours = 1;
        configCache = CacheBuilder.newBuilder()
                .maximumSize(nrOfEntries)
                .expireAfterWrite(nrOfHours, TimeUnit.HOURS)
                .build();
    }

    public ArrayList<String> GetDynamicConfiguration() {
        ArrayList<String> config = configCache.getIfPresent(CacheKeys.ITEMSOURCES);
        if (config != null) {
            return config;
        }
        HttpUrl.Builder urlBuilder
                = Objects.requireNonNull(HttpUrl.parse(eventConfig.GetDynamicConfigUrl())).newBuilder();
        urlBuilder.addQueryParameter("eventcode", eventConfig.eventCodeInput());

        ArrayList<String> configuration = GetConfig(urlBuilder, CacheKeys.ITEMSOURCES);
        return configuration;
    }

    private ArrayList<String> GetConfig(HttpUrl.Builder urlBuilder, CacheKeys cacheKey) {
        String url = urlBuilder.build().toString();

        Request request = new Request.Builder()
                .url(url)
                .build();

        Call call = okHttpClient.newCall(request);

        try {
            Response response = call.execute();
            if (response.body() != null) {
                String body = response.body().string();
                Type type = new TypeToken<List<String>>() {
                }.getType();
                ArrayList<String> json = gson.fromJson(body, type);
                configCache.put(cacheKey, json);
                return json;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return new ArrayList<>();
    }
}

package com.bingoeventautomated.service;

import net.runelite.client.ui.DrawManager;
import okhttp3.*;

import javax.imageio.ImageIO;
import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayDeque;
import java.util.Queue;

public class BEADiscordClient extends BEAClientBase {
    @Inject
    private DrawManager drawManager;
    private static Queue<Image> screenshots = new ArrayDeque<>();

    public void SendImageToDiscord(String message) {
        byte[] imageBytes = CreateImage((BufferedImage) screenshots.peek());

        DiscordChatMessageModel discordMessageModel = new DiscordChatMessageModel();
        discordMessageModel.setContent(message);

        String body = gson.toJson(discordMessageModel);

        MultipartBody.Builder requestBodyBuilder = new MultipartBody.Builder()
                .setType(MultipartBody.FORM)
                .addFormDataPart("payload_json", body);
        requestBodyBuilder.addFormDataPart("file", "image.png",
                RequestBody.create(MediaType.parse("image/png"), imageBytes));

        Callback callback = new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {

            }

            @Override
            public void onResponse(Call call, Response response) {

            }
        };

        Request request = new Request.Builder()
                .url(eventConfig.webhookUrl())
                .post(requestBodyBuilder.build())
                .build();
        Call call = okHttpClient.newCall(request);
        call.enqueue(callback);
    }

    private byte[] CreateImage(BufferedImage image) {
        byte[] imageBytes = null;
        try {
            imageBytes = convertImageToByteArray(image);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return imageBytes;
    }

    private static byte[] convertImageToByteArray(BufferedImage bufferedImage) throws IOException {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        ImageIO.write(bufferedImage, "png", byteArrayOutputStream);
        return byteArrayOutputStream.toByteArray();
    }

    public void SetScreenshot() {
        drawManager.requestNextFrameListener(image ->
        {
            screenshots.add(image);
        });
    }

    public void removeNextInLineScreenshot() {
        if (screenshots.peek() != null) {
            screenshots.remove();
        }
    }
}

package com.bingoeventautomated.service;

import lombok.Data;

@Data
public class ActionResult {
    public boolean isMessageSet;
    public String message;
}

package com.bingoeventautomated.service;

import com.bingoeventautomated.Mapper.ActionDataModel;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Response;

import javax.inject.Inject;
import java.io.IOException;

public class ActionDataModelClient extends BEAClientBase {
    @Inject
    private BEADiscordClient discordClient;

    public void SendActionDataModel(ActionDataModel actionData) {
        boolean isActionDataSet = actionData.IsSet();
        if (!isActionDataSet) {
            RemoveScreenshot();
            return;
        }

        String body = Serialize(actionData);
        if (eventConfig.SendScreenshot()) {
            SendPostRequestWithScreenshot(body);
        } else {
            AsyncPostRequest(body);
        }
    }

    private void SendPostRequestWithScreenshot(String body) {
        Callback callback = new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                RemoveScreenshot();
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                if (response.code() == 200) {
                    if (response.body() != null) {
                        String responseBody = response.body().string();
                        ActionResult actionResult = Deserialize(responseBody);
                        if (actionResult.isMessageSet) {
                            discordClient.SendImageToDiscord(actionResult.message);
                        }
                    }
                }
                RemoveScreenshot();
            }
        };
        MakeAsyncPostCall(body, callback);
    }

    public void SetScreenshot() {
        //setting screenshot like allows the expansion of sending multiple screenshots (will be added in the future)
        //do not remove otherwise the sreenshot variable in discordclient has to become static. Which is undesirable.
        discordClient.SetScreenshot();
        System.out.println("setting screenshot");
    }

    public void RemoveScreenshot() {
        discordClient.removeNextInLineScreenshot();
    }
}

package com.bingoeventautomated.service;

import com.bingoeventautomated.Mapper.ActionDataModel;
import com.bingoeventautomated.config.IEventConfig;
import com.google.gson.Gson;
import okhttp3.*;

import javax.inject.Inject;
import java.io.IOException;

public abstract class BEAClientBase {
    @Inject
    protected OkHttpClient okHttpClient;
    @Inject
    protected Gson gson;
    @Inject
    protected IEventConfig eventConfig;

    protected String Serialize(ActionDataModel actionData) {
        return gson.toJson(actionData);
    }

    protected ActionResult Deserialize(String responseBody) {
        return gson.fromJson(responseBody, ActionResult.class);
    }

    protected void AsyncPostRequest(String body) {
        Callback callback = new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                e.printStackTrace();
            }

            @Override
            public void onResponse(Call call, Response response) {

            }
        };
        MakeAsyncPostCall(body, callback);
    }

    protected void MakeAsyncPostCall(String body, Callback callback) {
        HttpUrl httpUrl = HttpUrl.parse(eventConfig.urlInput())
                .newBuilder()
                .build();

        RequestBody requestBody = RequestBody
                .create(
                        MediaType.get("application/json; charset=utf-8"),
                        body
                );
        Request request = new Request.Builder()
                .url(httpUrl)
                .post(requestBody)
                .build();
        Call call = okHttpClient.newCall(request);
        call.enqueue(callback);
    }


}

package com.bingoeventautomated.Mapper;

import java.util.ArrayList;
import java.util.List;

public class ActionDataModel {
    public String username;
    public String eventcode;
    public String itemsource;
    public List<ActionDataItem> items = new ArrayList<>();

    public boolean IsSet() {
        if (username == null) {
            return false;
        }
        if (eventcode == null) {
            return false;
        }
        if (itemsource == null) {
            return false;
        }
        return items.size() != 0;
    }
}

package com.bingoeventautomated.Mapper;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class ActionDataItem {
    public String name;
    public int quantity;
}

package com.bingoeventautomated.Mapper;

import com.bingoeventautomated.config.IEventConfig;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.ItemContainer;
import net.runelite.api.widgets.WidgetID;
import net.runelite.client.game.ItemStack;

import javax.inject.Inject;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.stream.Collectors;

public class InventoryActionDataModelMapper {
    @Inject
    Client client;
    @Inject
    IEventConfig eventconfig;
    @Inject
    ActionDataItemMapper actionDataItemMapper;

    //todo refactor so it conforms to dry
    public String GetInventoryName(int widgetId) {
        switch (widgetId) {
            case WidgetID.BARROWS_REWARD_GROUP_ID:
                return "Barrows";
            case WidgetID.CHAMBERS_OF_XERIC_REWARD_GROUP_ID:
                return "COX";
            case WidgetID.THEATRE_OF_BLOOD_GROUP_ID:
                return "TOB";
            case WidgetID.TOA_REWARD_GROUP_ID:
                return "TOA";
            case WidgetID.FISHING_TRAWLER_REWARD_GROUP_ID:
                return "Fishing Trawler";
            case WidgetID.WILDERNESS_LOOT_CHEST:
                return "Wilderniss Loot Chest";
        }
        return "";
    }
    //todo refactor so it conforms to dry
    public InventoryID GetWidgetId(int widgetId) {
        switch (widgetId) {
            case WidgetID.BARROWS_REWARD_GROUP_ID:
                return InventoryID.BARROWS_REWARD;
            case WidgetID.CHAMBERS_OF_XERIC_REWARD_GROUP_ID:
                return InventoryID.CHAMBERS_OF_XERIC_CHEST;
            case WidgetID.THEATRE_OF_BLOOD_GROUP_ID:
                return InventoryID.THEATRE_OF_BLOOD_CHEST;
            case WidgetID.TOA_REWARD_GROUP_ID:
                return InventoryID.TOA_REWARD_CHEST;
            case WidgetID.FISHING_TRAWLER_REWARD_GROUP_ID:
                return InventoryID.FISHING_TRAWLER_REWARD;
            case WidgetID.WILDERNESS_LOOT_CHEST:
                return InventoryID.WILDERNESS_LOOT_CHEST;
        }
        return null;
    }

    public ActionDataModel Map(int widgetId) {
        String inventoryName = GetInventoryName(widgetId);
        ActionDataModel actionData = new ActionDataModel();
        InventoryID foundInventory = GetWidgetId(widgetId);
        if (foundInventory == null)
            return actionData;

        actionData = InventoryToActionDataModel(foundInventory, inventoryName);
        actionData.username = client.getLocalPlayer().getName();
        actionData.eventcode = eventconfig.eventCodeInput();
        return actionData;
    }

    private ActionDataModel InventoryToActionDataModel(InventoryID inventoryID, String itemsource) {
        ActionDataModel actionData = new ActionDataModel();
        actionData.itemsource = itemsource;
        System.out.println(itemsource);
        SetBingoTileItems(inventoryID, actionData);
        return actionData;
    }

    private void SetBingoTileItems(InventoryID inventoryID, ActionDataModel actionData) {
        try {
            Collection<ItemStack> InventoryItemCollection = GetItemListFromInventory(inventoryID);
            AddInventoryItemsToBingoTileItems(actionData, InventoryItemCollection);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private Collection<ItemStack> GetItemListFromInventory(InventoryID inventoryID) {
        ItemContainer container = this.client.getItemContainer(inventoryID);
        Collection<ItemStack> items = new ArrayList<>();
        if (container != null) {
            items = Arrays.stream(container.getItems())
                    .filter((item) -> {
                        return item.getId() > 0;
                    }).map((item) -> {
                        return new ItemStack(item.getId(), item.getQuantity(), this.client.getLocalPlayer().getLocalLocation());
                    }).collect(Collectors.toList());
        }
        return items;
    }

    private void AddInventoryItemsToBingoTileItems(ActionDataModel actionData, Collection<ItemStack> inventoryItemCollection) {
        Iterator iterator = inventoryItemCollection.iterator();
        while (iterator.hasNext()) {
            ItemStack itemStack = (ItemStack) iterator.next();
            ActionDataItem actionDataItem = actionDataItemMapper.ToActionDataItem(itemStack);
            actionData.items.add(actionDataItem);
        }
    }
}

package com.bingoeventautomated.Mapper;

import com.bingoeventautomated.config.IEventConfig;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.client.events.NpcLootReceived;
import net.runelite.client.game.ItemStack;

import javax.inject.Inject;
import java.util.Collection;
import java.util.Iterator;

public class NpcActionDataModelMapper {
    @Inject
    Client client;
    @Inject
    IEventConfig eventconfig;
    @Inject
    ActionDataItemMapper actionDataItemMapper;

    public ActionDataModel ToActionDataModel(final NpcLootReceived npcLootReceived) {
        ActionDataModel actionData = new ActionDataModel();
        NPC npc = npcLootReceived.getNpc();
        actionData.itemsource = npc.getName();
        actionData.username = client.getLocalPlayer().getName();
        actionData.eventcode = eventconfig.eventCodeInput();
        SetBingoTileItems(npcLootReceived, actionData);
        return actionData;
    }

    private void SetBingoTileItems(NpcLootReceived npcLootReceived, ActionDataModel actionData) {
        Collection<ItemStack> lootList = npcLootReceived.getItems();
        Iterator iterator = lootList.iterator();
        while (iterator.hasNext()) {
            ItemStack item = (ItemStack) iterator.next();
            ActionDataItem actionDataItem = actionDataItemMapper.ToActionDataItem(item);
            actionData.items.add(actionDataItem);
        }
    }
}

package com.bingoeventautomated.Mapper;

import net.runelite.client.game.ItemManager;
import net.runelite.client.game.ItemStack;

import javax.inject.Inject;

public class ActionDataItemMapper {
    @Inject
    private ItemManager itemManager;

    private String getItemName(int itemId) {
        return itemManager.getItemComposition(itemId).getName();
    }

    public ActionDataItem ToActionDataItem(ItemStack item) {
        String itemName = getItemName(item.getId());
        ActionDataItem actionDataItem = new ActionDataItem();
        actionDataItem.name = itemName;
        actionDataItem.quantity = item.getQuantity();
        return actionDataItem;
    }
}

package com.bingoeventautomated.config;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("bingoEvent")
public interface IEventConfig extends Config {
    @ConfigItem(
            position = 1,
            keyName = "url",
            name = "Send data to",
            description = "The url of the server which processes the data."
    )
    default String urlInput() {
        return "http://localhost:5000";
    }

    @ConfigItem(
            position = 2,
            keyName = "config",
            name = "Dynamic configuration url",
            description = "The url of the server to set the dynamic config."
    )
    default String GetDynamicConfigUrl() {
        return "http://localhost:5000";
    }

    @ConfigItem(
            position = 3,
            keyName = "eventcode",
            name = "Eventcode",
            description = "The code of the event."
    )
    default String eventCodeInput() {
        return "1A2B3C";
    }

    @ConfigItem(
            position = 4,
            keyName = "Send screenshot",
            name = "Send screenshot",
            description = "Configures whether a message will be automatically sent to discord when you obtain items."
    )
    default boolean SendScreenshot()
    {
        return false;
    }
    @ConfigItem(
            position = 5,
            keyName = "webhook",
            name = "Discord webhook",
            description = "The webhook used to send messages to Discord."
    )
    String webhookUrl();
}

package com.bingoeventautomated;

import com.bingoeventautomated.Mapper.ActionDataModel;
import com.bingoeventautomated.Mapper.InventoryActionDataModelMapper;
import com.bingoeventautomated.Mapper.NpcActionDataModelMapper;
import com.bingoeventautomated.config.IEventConfig;
import com.bingoeventautomated.events.PlayerEvent;
import com.bingoeventautomated.service.ActionDataModelClient;
import com.bingoeventautomated.service.DynamicConfigClient;
import com.bingoeventautomated.validator.ActionDataItemValidator;
import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.NpcLootReceived;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import javax.inject.Inject;
import java.util.ArrayList;

@Slf4j
@PluginDescriptor(
        name = "Bingo Event Automated",
        description = "To send bingo items to the server."
)
public class BingoEventAutomatedPlugin extends Plugin {
    @Inject
    private Client client;
    @Inject
    private ActionDataModelClient actionDataItemClient;
    @Inject
    private DynamicConfigClient dynamicConfigClient;
    @Inject
    private NpcActionDataModelMapper npcActionDataModelMapper;
    @Inject
    private InventoryActionDataModelMapper inventoryActionDataModelMapper;
    @Inject
    private ActionDataItemValidator actionDataItemValidator;
    @Inject
    private PlayerEvent playerEvent;
    @Inject
    private IEventConfig eventconfig;

    @Subscribe
    private void onNpcLootReceived​(NpcLootReceived npcLootReceived) {
        String itemsource = npcLootReceived.getNpc().getName();
        if (!IsLoggedIn() || !IsSupported(itemsource)) {
            return;
        }

        if (eventconfig.SendScreenshot()) {
            //image must always be set first so it gets the screenshot asap
            actionDataItemClient.SetScreenshot();
        }

        ActionDataModel unvalidatedActionData = npcActionDataModelMapper.ToActionDataModel(npcLootReceived);
        ActionDataModel validatedActionData = actionDataItemValidator.validate(unvalidatedActionData);
        actionDataItemClient.SendActionDataModel(validatedActionData);
    }

    private boolean IsSupported(String npcName) {
        ArrayList<String> configuration = dynamicConfigClient.GetDynamicConfiguration();
        return configuration.contains(npcName) && configuration.size() > 0;
    }

    private boolean IsLoggedIn() {
        return client.getGameState() == GameState.LOGGED_IN;
    }

    @Subscribe
    private void onMenuOptionClicked(MenuOptionClicked event) {
        if (!IsLoggedIn())
            return;

        playerEvent.UpdateInvalidItemList(event);
    }

    @Subscribe
    public void onWidgetLoaded(WidgetLoaded widgetLoaded) {
        int groupId = widgetLoaded.getGroupId();
        if (!IsLoggedIn() || !IsSupportedWidget(groupId)) {
            return;
        }

        if (eventconfig.SendScreenshot()) {
            //image must always be set first so it gets the screenshot asap
            actionDataItemClient.SetScreenshot();
        }

        ActionDataModel actionData = inventoryActionDataModelMapper.Map(groupId);
        actionDataItemClient.SendActionDataModel(actionData);
    }

    private boolean IsSupportedWidget(int inventoryId) {
        String inventoryName = inventoryActionDataModelMapper.GetInventoryName(inventoryId);
        return inventoryName != "" && IsSupported(inventoryName);
    }


    @Provides
    IEventConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(IEventConfig.class);
    }
}

