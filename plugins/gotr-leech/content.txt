package com.gotrleech;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class GotrLeechPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(GotrLeechPlugin.class);
		RuneLite.main(args);
	}
}
package com.gotrleech;

import com.google.inject.Provides;
import com.gotrleech.event.GotrGameStateChanged;
import com.gotrleech.item.GotrItemManager;
import com.gotrleech.overlay.GotrOverlayPanel;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.events.GameTick;
import net.runelite.client.Notifier;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;

@Slf4j
@PluginDescriptor(
        name = "Guardians of the Rift Leech"
)
public class GotrLeechPlugin extends Plugin {

    public static final int ENERGY_REQUIRED = 150; // 150 energy required to qualify for points/xp
    static final String CONFIG_GROUP = "gotrLeech";

    @Inject
    private Client client;

    @Inject
    private GotrLeechConfig config;

    @Inject
    private ClientThread clientThread;

    @Inject
    private Notifier notifier;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private GotrOverlayPanel overlayPanel;

    @Inject
    private GotrGameState gotrGameState;

    @Inject
    private GotrPlayerState gotrPlayerState;

    @Inject
    private GotrItemManager gotrItemManager;

    @Override
    protected void startUp() throws Exception {
        // Start gotr state detection
        clientThread.invoke(() -> {
            gotrGameState.startup();
            gotrPlayerState.startup();
            gotrItemManager.startup();
        });

        overlayManager.add(overlayPanel);
    }

    @Override
    protected void shutDown() throws Exception {
        overlayManager.remove(overlayPanel);

        clientThread.invoke(() -> {
            gotrItemManager.shutdown();
            gotrPlayerState.shutdown();
            gotrGameState.shutdown();
        });
    }

    @Subscribe
    public void onGotrGameStateChanged(GotrGameStateChanged event) {
        switch (event.getState()) {
            case START:
                start();
                break;
            case END:
            case FAILED:
                gameOver();
                break;
            case SIXTY_PERCENT:
                sixtyPercent();
                break;
            default:
                break;
        }
    }

    private void start() {
        if (config.notifyOnStart()) {
            notifier.notify("A new Guardians of the Rift game has started!");
        }
    }

    private void gameOver() {
        if (!config.notifyOnEndForNextGame()) return;

        if (gotrItemManager.getBindingNecklaces().getCount() < 1) {
            notifier.notify("You are out of binding necklaces!");
            return;
        }

        int bindingCharges = gotrPlayerState.getBindingNecklaceCharges();
        if (bindingCharges < config.minBindingNecklaceChargesRequired()) {
            notifier.notify("You need more binding necklace charges for the next round!");
            return;
        }

        if (gotrItemManager.getUnchargedCells().getCount() < config.minUnchargedCellsRequired()) {
            notifier.notify("You need more uncharged cells for the next round!");
            return;
        }
    }

    private void sixtyPercent() {
        if (!config.notifyOnSixtyPercentMessage()) return;

        int pointsToQualify = ENERGY_REQUIRED - gotrPlayerState.getTotalEnergy();
        if (pointsToQualify > 0) {
            notifier.notify("You still need " + pointsToQualify + " more points to qualify for GotR rewards!");
            return;
        }
    }

    @Provides
    GotrLeechConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(GotrLeechConfig.class);
    }
}

package com.gotrleech;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;

@ConfigGroup(GotrLeechPlugin.CONFIG_GROUP)
public interface GotrLeechConfig extends Config {

    @ConfigItem(
            keyName = "notifyOnStart",
            name = "Notify on game start",
            description = "Send a notification when a new game starts",
            position = 0
    )
    default boolean notifyOnStart() {
        return true;
    }

    @ConfigItem(
            keyName = "notifyOnEndForNextGame",
            name = "Notify on game end when missing requirements for next game",
            description = "Send a notification when a game ends and you don't have enough requirements met for the " +
                    "next game, like binding necklaces/charges, uncharged cells, etc.",
            position = 1
    )
    default boolean notifyOnEndForNextGame() {
        return true;
    }

    @ConfigItem(
            keyName = "notifyOnSixtyPercentMessage",
            name = "Notify on 60% message if not enough energy still",
            description = "Send a notification when the 60% game message appears and you still don't have enough " +
                    "energy to qualify for points/rewards.",
            position = 2
    )
    default boolean notifyOnSixtyPercentMessage() {
        return true;
    }

    @ConfigItem(
            keyName = "flashOverlayWhenNotMining",
            name = "Flash overlay when not mining",
            description = "Flash the overlay box when not mining",
            position = 3
    )
    default boolean flashOverlayWhenNotMining() {
        return true;
    }

    @ConfigItem(
            keyName = "minBindingNecklaceChargesRequired",
            name = "Minimum binding necklace charges required",
            description = "The minimum binding necklace charges required to be considered okay for the round. Set to " +
                    "0 if not using binding necklaces. The default is 3 since it takes 3 crafts for 1 full altar run.",
            position = 4
    )
    @Range(min = 0, max = 16)
    default int minBindingNecklaceChargesRequired() {
        return 3;
    }

    @ConfigItem(
            keyName = "minUnchargedCellsRequired",
            name = "Minimum uncharged cells required",
            description = "The minimum uncharged cells required to be considered okay for the round. Set to " +
                    "0 if not using uncharged cells.",
            position = 5
    )
    @Range(min = 0, max = 10)
    default int minUnchargedCellsRequired() {
        return 1;
    }
}

package com.gotrleech.event;

import com.gotrleech.GotrGameState;
import lombok.Value;

/**
 * An event denoting that the GotR game state has changed.
 */
@Value
public class GotrGameStateChanged {

    GotrGameState.State state;
}
package com.gotrleech;

import com.gotrleech.event.GotrGameStateChanged;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.GameState;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.util.Text;

import javax.inject.Inject;
import javax.inject.Singleton;

@Slf4j
@Singleton
@RequiredArgsConstructor(onConstructor_ = @Inject)
public class GotrGameState extends EventHandler {

    private static final int GOTR_WIDGET_GROUP_ID = 746;
    private static final int GOTR_WIDGET_CHILD_GAME_ID = 1;

    public enum State {
        START("Creatures from the Abyss will attack in"),
        END("The Great Guardian successfully closed the rift"),
        FAILED("The Great Guardian was defeated"),
        SIXTY_PERCENT("The rift burns intensely"),
        ;

        @Getter
        private final String gameMessage;

        State(String gameMessage) {
            this.gameMessage = gameMessage;
        }
    }

    @Getter
    private boolean inGame;

    @Override
    protected void cleanup() {
        inGame = false;
    }

    @Subscribe(priority = 5)
    public void onGameTick(GameTick e) {
        if (client.getGameState() != GameState.LOGGED_IN) return;

        inGame = client.getWidget(GOTR_WIDGET_GROUP_ID, GOTR_WIDGET_CHILD_GAME_ID) != null;
    }

    @Subscribe
    public void onChatMessage(ChatMessage event) {
        if (!inGame) return;

        if (event.getType() != ChatMessageType.GAMEMESSAGE) return;

        String message = Text.removeTags(event.getMessage());
        if (message == null) return;

        for (State state : State.values()) {
            if (message.startsWith(state.getGameMessage())) {
                eventBus.post(new GotrGameStateChanged(state));
                return;
            }
        }
    }
}

package com.gotrleech.overlay;

import com.gotrleech.GotrGameState;
import com.gotrleech.GotrLeechConfig;
import com.gotrleech.GotrLeechPlugin;
import com.gotrleech.GotrPlayerState;
import com.gotrleech.item.GotrItemManager;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;

import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class GotrOverlayPanel extends OverlayPanel {

    private final static String OVERLAY_NAME = "Guardians of the Rift Leech Overlay";

    private final Client client;
    private final GotrLeechPlugin plugin;
    private final GotrGameState gotrGameState;
    private final GotrPlayerState gotrPlayerState;
    private final GotrItemManager gotrItemManager;
    private final GotrLeechConfig config;
    private final Color originalBackgroundColor;

    @Inject
    public GotrOverlayPanel(Client client,
                            GotrLeechPlugin plugin,
                            GotrGameState gotrGameState,
                            GotrPlayerState gotrPlayerState,
                            GotrItemManager gotrItemManager,
                            GotrLeechConfig config) {
        super(plugin);

        this.client = client;
        this.plugin = plugin;
        this.gotrGameState = gotrGameState;
        this.gotrPlayerState = gotrPlayerState;
        this.gotrItemManager = gotrItemManager;
        this.config = config;
        this.originalBackgroundColor = panelComponent.getBackgroundColor();

        setPosition(OverlayPosition.BOTTOM_LEFT);
        getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, OVERLAY_NAME));
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (!gotrGameState.isInGame()) return null;

        renderBool(gotrPlayerState.isMining(), "Is Mining");

        renderInt(gotrPlayerState.getTotalEnergy(), "Total Energy", GotrLeechPlugin.ENERGY_REQUIRED);
        panelComponent.getChildren().add(LineComponent.builder().build());

        if (config.minBindingNecklaceChargesRequired() > 0) {
            renderInt(gotrPlayerState.getBindingNecklaceCharges(), "Binding Necklace Charges",
                    config.minBindingNecklaceChargesRequired());
            renderInt(gotrItemManager.getBindingNecklaces().getCount(), "Binding Necklaces", 1);
        }

        if (config.minUnchargedCellsRequired() > 0) {
            renderInt(gotrItemManager.getUnchargedCells().getCount(), "Uncharged Cells",
                    config.minUnchargedCellsRequired());
        }

        if (shouldFlash()) {
            flashOverlay();
        } else {
            panelComponent.setBackgroundColor(originalBackgroundColor);
        }

        panelComponent.setPreferredSize(new Dimension(175, 0));

        return super.render(graphics);
    }

    private void renderInt(int val, String label, int minVal) {
        panelComponent.getChildren().add(LineComponent.builder()
                .left(label + ":")
                .right(String.valueOf(val))
                .rightColor(chooseColor(val >= minVal))
                .build());
    }

    private void renderBool(boolean val, String label) {
        panelComponent.getChildren().add(LineComponent.builder()
                .left(label + ":")
                .right(val ? "YES" : "NO")
                .rightColor(chooseColor(val))
                .build());
    }

    private Color chooseColor(boolean val) {
        return val ? Color.GREEN : Color.RED;
    }

    private boolean shouldFlash() {
        return config.flashOverlayWhenNotMining() && !gotrPlayerState.isMining();
    }

    private void flashOverlay() {
        if (client.getTickCount() % 2 == 0) {
            panelComponent.setBackgroundColor(new Color(255, 0, 0, originalBackgroundColor.getAlpha()));
        } else {
            panelComponent.setBackgroundColor(originalBackgroundColor);
        }
    }
}

package com.gotrleech.item;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ItemContainer;

import java.util.Arrays;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;

@Slf4j
public class GotrItem {

    @Getter
    private final int itemId;
    @Getter
    private int count;

    private final Map<Integer, Integer> numItems; // containerId -> count

    public GotrItem(int itemId, Integer... containerIds) {
        this.itemId = itemId;
        this.numItems = Arrays.stream(containerIds).collect(Collectors.toMap(Function.identity(), i -> 0));
    }

    public void recalculate(Client client) {
        for (int containerId : numItems.keySet()) {
            ItemContainer itemContainer = client.getItemContainer(containerId);
            if (itemContainer == null) continue;

            numItems.put(containerId, itemContainer.count(itemId));
        }
        count = numItems.values().stream().mapToInt(Integer::intValue).sum();
    }

    public Set<Integer> getContainerIds() {
        return numItems.keySet();
    }
}

package com.gotrleech.item;

import com.google.common.collect.ImmutableList;
import com.gotrleech.EventHandler;
import com.gotrleech.GotrGameState;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.InventoryID;
import net.runelite.api.ItemID;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.client.eventbus.Subscribe;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * Tracks items for the player like how many of them they have in their inventory/equipment containers
 */
@Slf4j
@Singleton
public class GotrItemManager extends EventHandler {

    @Getter
    private final GotrItem unchargedCells = new GotrItem(ItemID.UNCHARGED_CELL,
            InventoryID.INVENTORY.getId());

    @Getter
    private final GotrItem guardianFragments = new GotrItem(ItemID.GUARDIAN_FRAGMENTS,
            InventoryID.INVENTORY.getId());

    @Getter
    private final GotrItem bindingNecklaces = new GotrItem(ItemID.BINDING_NECKLACE,
            InventoryID.INVENTORY.getId(),
            InventoryID.EQUIPMENT.getId());

    private final List<GotrItem> trackedItems = ImmutableList.of(unchargedCells, guardianFragments, bindingNecklaces);
    private final Set<Integer> trackedContainerIds = trackedItems.stream()
            .map(GotrItem::getContainerIds)
            .flatMap(Collection::stream)
            .collect(Collectors.toSet());

    private final GotrGameState gotrGameState;

    @Inject
    public GotrItemManager(GotrGameState gotrGameState) {
        this.gotrGameState = gotrGameState;
    }

    @Override
    protected void cleanup() {
        trackedItems.forEach(item -> item.recalculate(client));
    }

    @Subscribe
    public void onItemContainerChanged(ItemContainerChanged event) {
        if (!trackedContainerIds.contains(event.getContainerId())) return;

        for (GotrItem gotrItem : trackedItems) {
            if (gotrItem.getContainerIds().contains(event.getContainerId())) {
                gotrItem.recalculate(client);
            }
        }
    }
}

package com.gotrleech;

import com.google.common.collect.ImmutableSet;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.AnimationID;
import net.runelite.api.Player;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.eventbus.Subscribe;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.util.Set;

/**
 * Tracks player state, like their binding necklace charges, their energy, if they're mining, etc.
 */
@Slf4j
@Singleton
@RequiredArgsConstructor(onConstructor_ = @Inject)
public class GotrPlayerState extends EventHandler {

    private static final int ELEMENTAL_ENERGY_VARBIT_ID = 13686;
    private static final int CATALYTIC_ENERGY_VARBIT_ID = 13685;

    private static final int BINDING_NECKLACE_VARP_ID = 487;

    private static final Set<Integer> MINING_ANIMATIONS = ImmutableSet.of(
            AnimationID.MINING_BRONZE_PICKAXE,
            AnimationID.MINING_IRON_PICKAXE,
            AnimationID.MINING_STEEL_PICKAXE,
            AnimationID.MINING_BLACK_PICKAXE,
            AnimationID.MINING_MITHRIL_PICKAXE,
            AnimationID.MINING_ADAMANT_PICKAXE,
            AnimationID.MINING_RUNE_PICKAXE,
            AnimationID.MINING_GILDED_PICKAXE,
            AnimationID.MINING_DRAGON_PICKAXE,
            AnimationID.MINING_DRAGON_PICKAXE_UPGRADED,
            AnimationID.MINING_DRAGON_PICKAXE_OR,
            AnimationID.MINING_DRAGON_PICKAXE_OR_TRAILBLAZER,
            AnimationID.MINING_INFERNAL_PICKAXE,
            AnimationID.MINING_3A_PICKAXE,
            AnimationID.MINING_CRYSTAL_PICKAXE,
            AnimationID.MINING_TRAILBLAZER_PICKAXE,
            AnimationID.MINING_TRAILBLAZER_PICKAXE_2,
            AnimationID.MINING_TRAILBLAZER_PICKAXE_3);

    @Getter
    private boolean isMining;

    @Getter
    private int bindingNecklaceCharges;

    private int elementalEnergy;
    private int catalyticEnergy;

    @Override
    protected void cleanup() {
        if (client.getLocalPlayer() != null) {
            isMining = MINING_ANIMATIONS.contains(client.getLocalPlayer().getAnimation());
        } else {
            isMining = false;
        }

        bindingNecklaceCharges = client.getVarpValue(BINDING_NECKLACE_VARP_ID);
        elementalEnergy = client.getVarbitValue(ELEMENTAL_ENERGY_VARBIT_ID);
        catalyticEnergy = client.getVarbitValue(CATALYTIC_ENERGY_VARBIT_ID);
    }

    public int getTotalEnergy() {
        return elementalEnergy + catalyticEnergy;
    }

    @Subscribe
    public void onAnimationChanged(final AnimationChanged event) {
        Player local = client.getLocalPlayer();
        if (event.getActor() != local) return;

        isMining = MINING_ANIMATIONS.contains(local.getAnimation());
    }

    @Subscribe
    public void onVarbitChanged(VarbitChanged event) {
        if (event.getVarbitId() == -1) {
            // VarPlayer
            if (event.getVarpId() == BINDING_NECKLACE_VARP_ID) {
                bindingNecklaceCharges = event.getValue();
            }
        } else {
            // Varbit
            if (event.getVarbitId() == ELEMENTAL_ENERGY_VARBIT_ID) {
                elementalEnergy = event.getValue();
            } else if (event.getVarbitId() == CATALYTIC_ENERGY_VARBIT_ID) {
                catalyticEnergy = event.getValue();
            }
        }
    }
}

package com.gotrleech;

import net.runelite.api.Client;
import net.runelite.client.eventbus.EventBus;

import javax.inject.Inject;

/**
 * Base class for any class that should listen for events
 */
public abstract class EventHandler {

    @Inject
    protected Client client;
    @Inject
    protected EventBus eventBus;

    public void startup() {
        cleanup();
        eventBus.register(this);
    }

    public void shutdown() {
        eventBus.unregister(this);
        cleanup();
    }

    /**
     * Called during startup and shutdown, to allow subclasses to cleanup/reset any state.
     */
    protected abstract void cleanup();
}

