package io.leikvolle.tileindicators;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public enum TileStyle
{
    RS3("Rs3"),
    RS3_NO_ARROW("Rs3(no arrow)");

    private String name;

    @Override
    public String toString()
    {
        return getName();
    }
}
/*
 * Copyright (c) 2021, LeikvollE
 * Copyright (c) 2018, Tomas Slusny <slusnucky@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package io.leikvolle.tileindicators;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.Comparator;
import java.util.stream.Collectors;
import javax.annotation.Nonnull;
import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.util.ImageUtil;

@Slf4j
public class ImprovedTileIndicatorsOverlay extends Overlay {
    private final Client client;
    private final ImprovedTileIndicatorsConfig config;

    @Inject
    private ImprovedTileIndicatorsPlugin plugin;

    private final BufferedImage ARROW_ICON;

    private LocalPoint lastDestination;
    private LocalPoint lastlastDestination;
    private int spawnGameCycle;
    private int despawnGameCycle;

    @Inject
    private ImprovedTileIndicatorsOverlay(Client client, ImprovedTileIndicatorsConfig config)
    {
        this.client = client;
        this.config = config;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        setPriority(0.6f);

        ARROW_ICON = ImageUtil.loadImageResource(ImprovedTileIndicatorsPlugin.class, "arrow.png");
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {

        final WorldPoint playerPos = client.getLocalPlayer().getWorldLocation();
        if (playerPos == null)
        {
            return null;
        }
        final LocalPoint playerPosLocal = LocalPoint.fromWorld(client, playerPos);
        if (playerPosLocal == null)
        {
            return null;
        }

        if (config.customDestinationTile()) {
            if (lastDestination != null && !lastDestination.equals(client.getLocalDestinationLocation())) {
                lastlastDestination = lastDestination;
                despawnGameCycle = client.getGameCycle();
            }
            if (lastDestination == null || !lastDestination.equals(client.getLocalDestinationLocation()))
            {
                if(client.getLocalDestinationLocation() != null) {
                    spawnGameCycle = client.getGameCycle();
                }
                lastDestination = client.getLocalDestinationLocation();
            }
            switch (config.highlightDestinationStyle())
            {
                case RS3:
                    renderRS3Tile(graphics, lastDestination, config.highlightDestinationColor(), true, true);
                    renderRS3Tile(graphics, lastlastDestination, config.highlightDestinationColor(), false, false);
                    break;
                case RS3_NO_ARROW:
                    renderRS3Tile(graphics, lastDestination, config.highlightDestinationColor(), false, true);
                    renderRS3Tile(graphics, lastlastDestination, config.highlightDestinationColor(), false, false);
                    break;
            }
        }

        if (config.overlaysBelowPlayer() && client.isGpu())
        {
            removeActor(graphics, client.getLocalPlayer());
        }
        if (config.overlaysBelowNPCs() && client.isGpu())
        {
            // Limits the number of npcs drawn below overlays, ranks the NPCs by distance to player.
            for (NPC npc : plugin.getOnTopNpcs().stream().sorted(Comparator.comparingInt(npc -> npc.getLocalLocation().distanceTo(playerPosLocal))).limit(config.maxNPCsDrawn()).collect(Collectors.toSet())) {
                removeActor(graphics, npc);
            }
        }
        return null;
    }

    private void renderRS3Tile(final Graphics2D graphics, final LocalPoint dest, final Color color, boolean drawArrow, boolean appearing)
    {
        if (dest == null)
        {
            return;
        }

        double size;
        if (appearing) {
            size = 0.65 * (Math.min(7.0, client.getGameCycle() - spawnGameCycle) / 7.0);
        } else {
            size = 0.65 * ((7 - (client.getGameCycle() - despawnGameCycle)) / 7.0);
        }

        if (size < 0) return;


        final Polygon poly = getCanvasTargetTileCirclePoly(client, dest, size, client.getPlane(), 10);
        final Polygon shadow = getCanvasTargetTileCirclePoly(client, dest, size, client.getPlane(), 0);
        Point canvasLoc = Perspective.getCanvasImageLocation(client, dest, ARROW_ICON, 150 + (int) (20 * Math.sin(client.getGameCycle() / 10.0)));

        if (poly != null)
        {

            final Stroke originalStroke = graphics.getStroke();
            graphics.setStroke(new BasicStroke((float) config.destinationTileBorderWidth()));
            graphics.setColor(new Color(0x8D000000, true));
            graphics.draw(shadow);
            graphics.setColor(color);
            graphics.draw(poly);
            graphics.setStroke(originalStroke);
        }

        if (canvasLoc != null && drawArrow && shadow != null)
        {
            // TODO: improve scale as you zoom out
            double imageScale = 0.8 * Math.min(client.get3dZoom() / 500.0, 1);
            graphics.drawImage(ARROW_ICON, (int) (shadow.getBounds().width / 2 + shadow.getBounds().x - ARROW_ICON.getWidth() * imageScale / 2), canvasLoc.getY(), (int) (ARROW_ICON.getWidth() * imageScale), (int) (ARROW_ICON.getHeight() * imageScale), null);
        }

    }

    public static Polygon getCanvasTargetTileCirclePoly(
            @Nonnull Client client,
            @Nonnull LocalPoint localLocation,
            double size,
            int plane,
            int zOffset)
    {
        final int sceneX = localLocation.getSceneX();
        final int sceneY = localLocation.getSceneY();

        if (sceneX < 0 || sceneY < 0 || sceneX >= Perspective.SCENE_SIZE || sceneY >= Perspective.SCENE_SIZE)
        {
            return null;
        }

        Polygon poly = new Polygon();
        int resolution = 64;
        final int height = Perspective.getTileHeight(client, localLocation, plane) - zOffset;

        for (int i = 0; i < resolution; i++) {
            double angle = ((float) i / resolution) * 2 * Math.PI;
            double offsetX = Math.cos(angle);
            double offsetY = Math.sin(angle);
            int x = (int) (localLocation.getX() + (offsetX * Perspective.LOCAL_TILE_SIZE * size));
            int y = (int) (localLocation.getY() + (offsetY * Perspective.LOCAL_TILE_SIZE * size));
            Point p = Perspective.localToCanvas(client, x, y, height);
            if (p == null) {
                continue;
            }
            poly.addPoint(p.getX(), p.getY());

        }

        return poly;
    }

    private void removeActor(final Graphics2D graphics, final Actor actor) {
        final int clipX1 = client.getViewportXOffset();
        final int clipY1 = client.getViewportYOffset();
        final int clipX2 = client.getViewportWidth() + clipX1;
        final int clipY2 = client.getViewportHeight() + clipY1;
        Object origAA = graphics.getRenderingHint(RenderingHints.KEY_ANTIALIASING);
        graphics.setRenderingHint(
                RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_OFF);
        Model model = actor.getModel();
        int vCount = model.getVerticesCount();
        float[] x3d = model.getVerticesX();
        float[] y3d = model.getVerticesY();
        float[] z3d = model.getVerticesZ();

        int[] x2d = new int[vCount];
        int[] y2d = new int[vCount];

        int size = 1;
        if (actor instanceof NPC)
        {
            NPCComposition composition = ((NPC) actor).getTransformedComposition();
            if (composition != null)
            {
                size = composition.getSize();
            }
        }

        final LocalPoint lp = actor.getLocalLocation();

        final int localX = lp.getX();
        final int localY = lp.getY();
        final int northEastX = lp.getX() + Perspective.LOCAL_TILE_SIZE * (size - 1) / 2;
        final int northEastY = lp.getY() + Perspective.LOCAL_TILE_SIZE * (size - 1) / 2;
        final LocalPoint northEastLp = new LocalPoint(northEastX, northEastY);
        int localZ = Perspective.getTileHeight(client, northEastLp, client.getPlane());
        int rotation = actor.getCurrentOrientation();

        Perspective.modelToCanvas(client, vCount, localX, localY, localZ, rotation, x3d, z3d, y3d, x2d, y2d);

        boolean anyVisible = false;

        for (int i = 0; i < vCount; i++) {
            int x = x2d[i];
            int y = y2d[i];

            boolean visibleX = x >= clipX1 && x < clipX2;
            boolean visibleY = y >= clipY1 && y < clipY2;
            anyVisible |= visibleX && visibleY;
        }

        if (!anyVisible) return;

        int tCount = model.getFaceCount();
        int[] tx = model.getFaceIndices1();
        int[] ty = model.getFaceIndices2();
        int[] tz = model.getFaceIndices3();

        final byte[] triangleTransparencies = model.getFaceTransparencies();

        Composite orig = graphics.getComposite();
        graphics.setComposite(AlphaComposite.Clear);
        graphics.setColor(Color.WHITE);
        for (int i = 0; i < tCount; i++) {
            // Cull tris facing away from the camera
            if (getTriDirection(x2d[tx[i]], y2d[tx[i]], x2d[ty[i]], y2d[ty[i]], x2d[tz[i]], y2d[tz[i]]) >= 0)
            {
                continue;
            }
            if (triangleTransparencies == null || (triangleTransparencies[i] & 255) < 254) {
                Polygon p = new Polygon(
                        new int[]{x2d[tx[i]], x2d[ty[i]], x2d[tz[i]]},
                        new int[]{y2d[tx[i]], y2d[ty[i]], y2d[tz[i]]},
                        3);
                graphics.fill(p);
            }
        }
        graphics.setComposite(orig);
        graphics.setRenderingHint(
                RenderingHints.KEY_ANTIALIASING,
                origAA);
    }

    private int getTriDirection(int x1, int y1, int x2, int y2, int x3, int y3) {
        int x4 = x2 - x1;
        int y4 = y2 - y1;
        int x5 = x3 - x1;
        int y5 = y3 - y1;
        return x4 * y5 - y4 * x5;
    }

}

/*
 * Copyright (c) 2021, LeikvollE
 * Copyright (c) 2018, Tomas Slusny <slusnucky@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package io.leikvolle.tileindicators;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.*;

import static net.runelite.api.MenuAction.MENU_ACTION_DEPRIORITIZE_OFFSET;

import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.PluginChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.Text;
import net.runelite.client.util.WildcardMatcher;

import java.util.*;

@PluginDescriptor(
		name = "Improved Tile Indicators",
		description = "An improved version of the tile indicators plugin",
		tags = {"rs3", "overlay", "tile", "indicators"}
)
@Slf4j
public class ImprovedTileIndicatorsPlugin extends Plugin
{
	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ImprovedTileIndicatorsOverlay overlay;

	@Inject ImprovedTileIndicatorsConfig config;

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Getter(AccessLevel.PACKAGE)
	private final Set<NPC> onTopNpcs = new HashSet<>();
	private List<String> onTopNPCNames = new ArrayList<>();

	private static final String DRAW_ABOVE = "Draw-Above";
	private static final String DRAW_BELOW = "Draw-Below";
	private static final String UNTAG_ALL = "Un-tag-All";

	@Provides
	ImprovedTileIndicatorsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ImprovedTileIndicatorsConfig.class);
	}

	@Override
	protected void startUp()
	{
		overlayManager.add(overlay);
		clientThread.invoke(this::rebuild);
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		if (event.getGameState() == GameState.LOGIN_SCREEN ||
				event.getGameState() == GameState.HOPPING)
		{
			onTopNpcs.clear();
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged)
	{
		if (!configChanged.getGroup().equals("improvedtileindicators"))
		{
			return;
		}

		clientThread.invoke(this::rebuild);
	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned npcSpawned)
	{
		final NPC npc = npcSpawned.getNpc();
		final String npcName = npc.getName();

		if (npcName == null)
		{
			return;
		}

		if (onTopMatchesNPCName(npcName))
		{
			onTopNpcs.add(npc);
		}
	}

	@Subscribe
	public void onNpcDespawned(NpcDespawned npcDespawned)
	{
		final NPC npc = npcDespawned.getNpc();
		onTopNpcs.remove(npc);
	}


	@Subscribe
	public void onMenuEntryAdded(MenuEntryAdded event)
	{
		int type = event.getType();

		if (type >= MENU_ACTION_DEPRIORITIZE_OFFSET)
		{
			type -= MENU_ACTION_DEPRIORITIZE_OFFSET;
		}

		final MenuAction menuAction = MenuAction.of(type);

		if (menuAction == MenuAction.EXAMINE_NPC && client.isKeyPressed(KeyCode.KC_SHIFT) && config.overlaysBelowNPCs())
		{
			final String npcName = getNameForCachedNPC(event.getIdentifier());
			if (npcName == null) return;
			boolean matchesList = onTopNPCNames.stream()
					.filter(highlight -> !highlight.equalsIgnoreCase(npcName))
					.anyMatch(highlight -> WildcardMatcher.matches(highlight, npcName));

			// Only show draw options to npcs not affected by a wildcard entry, as wildcards will not be removed by menu options
			if (!matchesList)
			{
				client.createMenuEntry(-1)
					.setOption(onTopNPCNames.stream().anyMatch(npcName::equalsIgnoreCase) ? DRAW_BELOW : DRAW_ABOVE)
					.setTarget(event.getTarget())
					.setIdentifier(event.getIdentifier())
					.setType(MenuAction.RUNELITE)
					.onClick(this::toggleDraw);
			}
		}
	}

	public void toggleDraw(MenuEntry click)
	{
		final String name = getNameForCachedNPC(click.getIdentifier());
		if (name == null) return;
		// this trips a config change which triggers the overlay rebuild
		updateNpcsToDrawAbove(name);
	}

	private void updateNpcsToDrawAbove(String npc)
	{
		final List<String> highlightedNpcs = new ArrayList<>(onTopNPCNames);

		if (!highlightedNpcs.removeIf(npc::equalsIgnoreCase))
		{
			highlightedNpcs.add(npc);
		}

		// this triggers the config change event and rebuilds npcs
		config.setTopNPCs(Text.toCSV(highlightedNpcs));
	}

	List<String> getTopNPCs()
	{
		final String configNpcs = config.getTopNPCs();

		if (configNpcs.isEmpty())
		{
			return Collections.emptyList();
		}

		return Text.fromCSV(configNpcs);
	}

	void rebuild()
	{
		onTopNPCNames = getTopNPCs();
		onTopNpcs.clear();

		if (client.getGameState() != GameState.LOGGED_IN &&
				client.getGameState() != GameState.LOADING)
		{
			return;
		}

		for (NPC npc : client.getNpcs())
		{
			final String npcName = npc.getName();

			if (npcName == null)
			{
				continue;
			}

			if (onTopMatchesNPCName(npcName))
			{
				onTopNpcs.add(npc);
			}
		}
	}

	private boolean onTopMatchesNPCName(String npcName)
	{
		for (String matching : onTopNPCNames)
		{
			if (WildcardMatcher.matches(matching, npcName))
			{
				return true;
			}
		}

		return false;
	}

	private String getNameForCachedNPC(int id)
	{
		final NPC npc = client.getTopLevelWorldView().npcs().byIndex(id);

		if (npc == null)
		{
			return null;
		}

		return npc.getName();
	}

}

/*
 * Copyright (c) 2021, LeikvollE
 * Copyright (c) 2018, Tomas Slusny <slusnucky@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package io.leikvolle.tileindicators;

import java.awt.Color;

import net.runelite.client.config.*;

@ConfigGroup("improvedtileindicators")
public interface ImprovedTileIndicatorsConfig extends Config
{

	@ConfigSection(
			name = "Player Tile indicators",
			description = "Settings replacing the normal tile indicators plugin",
			position = 0
	)
	String tileIndicatorsSection = "tileIndicatorsSection";

	@ConfigItem(
			keyName = "currentTileBelowPlayer",
			name = "Draw overlays below player",
			description = "Requires GPU. Draws overlays below the player",
			section = tileIndicatorsSection,
			position = 1
	)
	default boolean overlaysBelowPlayer()
	{
		return true;
	}

	@ConfigSection(
			name = "Destination Tile",
			description = "Settings for modifying the destination tile",
			position = 1
	)
	String destinationTileSection = "destinationTileSection";

	@ConfigItem(
			keyName = "customDestinationTile",
			name = "Custom destination tile",
			description = "Enables the use of custom tile indicators on destination",
			section = destinationTileSection,
			position = 2
	)
	default boolean customDestinationTile() { return false;}

	@ConfigItem(
			keyName = "highlightDestinationStyle",
			name = "Destination Tile Style",
			description = "The style of the destination tile",
			section = destinationTileSection,
			position = 3
	)
	default TileStyle highlightDestinationStyle()  {return TileStyle.RS3;}

	@ConfigItem(
			keyName = "destinationTileBorderWitdh",
			name = "Destination tile border width",
			description = "The width of the custom destination indicator",
			section = destinationTileSection,
			position = 4
	)
	default double destinationTileBorderWidth() { return 2; }

	@Alpha
	@ConfigItem(
			keyName = "highlightDestinationColor",
			name = "Destination tile",
			description = "Configures the highlight color of current destination",
			section = destinationTileSection,
			position = 5
	)
	default Color highlightDestinationColor()
	{
		return new Color(0xFFB3B03F);
	}

	@ConfigSection(
			name = "NPC Indicators",
			description = "Settings enhancing the standard NPC indicators",
			position = 2
	)
	String npcIndicatorsSection = "npcIndicatorsSection";

	@ConfigItem(
			keyName = "overlaysBelowNPCs",
			name = "Draw overlays below NPCs",
			description = "Requires GPU. Draws overlays below specified NPCs. CAUTION: Will make your game laggy if many NPCs are drawn above overlay at once. Best used for bosses, not large groups of NPCs.",
			section = npcIndicatorsSection,
			position = 6
	)
	default boolean overlaysBelowNPCs()
	{
		return true;
	}

	@ConfigItem(
			keyName = "maxNPCsDrawn",
			name = "NPC limit",
			description = "The number of NPCs in the scene at a time to be affected by this plugin. Will affect FPS.",
			section = npcIndicatorsSection,
			position = 7
	)
	@Range(
			max = 20
	)
	default int maxNPCsDrawn() {return 10;}

	@ConfigItem(
			keyName = "topNPCs",
			name = "NPCs to draw on top",
			description = "List of NPCs to draw above overlays. To add NPCs, shift right-click them and click Draw-Above.",
			section = npcIndicatorsSection,
			position = 8
	)
	default String getTopNPCs()
	{
		return "";
	}

	@ConfigItem(
			keyName = "topNPCs",
			name = "",
			description = ""
	)
	void setTopNPCs(String npcsToDrawAbove);
}
package io.leikvolle.tileindicators;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ExamplePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ImprovedTileIndicatorsPlugin.class);
		RuneLite.main(args);
	}
}
