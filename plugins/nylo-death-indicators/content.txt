package com.infernostats;

import lombok.Value;

@Value
public class NylocasHealth {
  final int bigHP;
  final int smallHP;
  final int smSmallHP;
  final int smBigHP;

  private static final NylocasHealth[] HP_BY_PARTY_SIZE = new NylocasHealth[6];

  static {
    HP_BY_PARTY_SIZE[1] = new NylocasHealth(16, 8, 2, 3);
    HP_BY_PARTY_SIZE[2] = new NylocasHealth(16, 8, 3, 5);
    HP_BY_PARTY_SIZE[3] = new NylocasHealth(16, 8, 6, 9);
    HP_BY_PARTY_SIZE[4] = new NylocasHealth(19, 9, 8, 12);
    HP_BY_PARTY_SIZE[5] = new NylocasHealth(22, 11, 10, 15);
  }

  public static int getStoryModeSmall(int partySize) {
    return HP_BY_PARTY_SIZE[partySize].smSmallHP;
  }

  public static int getStoryModeBig(int partySize) {
    return HP_BY_PARTY_SIZE[partySize].smBigHP;
  }

  public static int getNormalModeSmall(int partySize) {
    return HP_BY_PARTY_SIZE[partySize].smallHP;
  }

  public static int getNormalModeBig(int partySize) {
    return HP_BY_PARTY_SIZE[partySize].bigHP;
  }
}

package com.infernostats;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.NPC;

@Getter(AccessLevel.PACKAGE)
public class Nylocas {
  private final NPC npc;
  private final int npcIndex;
  @Setter(AccessLevel.PACKAGE)
  private int hp;
  @Setter(AccessLevel.PACKAGE)
  private int queuedDamage;
  @Setter(AccessLevel.PACKAGE)
  private int hidden;

  public Nylocas(NPC npc, int npcIndex, int hp) {
    this.npc = npc;
    this.npcIndex = npcIndex;
    this.hp = hp;
    this.queuedDamage = 0;
    this.hidden = 0;
  }
}

package com.infernostats;

import com.google.gson.annotations.SerializedName;
import lombok.EqualsAndHashCode;
import lombok.Value;
import net.runelite.client.party.messages.PartyMemberMessage;

@Value
@EqualsAndHashCode(callSuper = true)
public class NpcDamaged extends PartyMemberMessage {
  @SerializedName("i")
  int npcIndex;
  @SerializedName("d")
  int damage;
}

package com.infernostats;

import lombok.AllArgsConstructor;
import net.runelite.api.gameval.NpcID;

import java.util.Map;

@AllArgsConstructor
public final class NylocasType {

  public enum Style {
    MELEE, RANGE, MAGE
  }

  public enum Mode {
    NORMAL,
    HARD,
    STORY
  }

  public enum Size {
    SMALL,
    BIG
  }

  public final Mode mode;
  public final Style style;
  public final Size size;

  private static final Map<Integer, NylocasType> NYLO_ID_TO_INFO = Map.ofEntries(
      // Normal Mode Smalls
      Map.entry(NpcID.TOB_NYLOCAS_INCOMING_MELEE, new NylocasType(Mode.NORMAL, Style.MELEE, Size.SMALL)),
      Map.entry(NpcID.TOB_NYLOCAS_FIGHTING_MELEE, new NylocasType(Mode.NORMAL, Style.MELEE, Size.SMALL)),
      Map.entry(NpcID.TOB_NYLOCAS_INCOMING_RANGED, new NylocasType(Mode.NORMAL, Style.RANGE, Size.SMALL)),
      Map.entry(NpcID.TOB_NYLOCAS_FIGHTING_RANGED, new NylocasType(Mode.NORMAL, Style.RANGE, Size.SMALL)),
      Map.entry(NpcID.TOB_NYLOCAS_INCOMING_MAGIC, new NylocasType(Mode.NORMAL, Style.MAGE, Size.SMALL)),
      Map.entry(NpcID.TOB_NYLOCAS_FIGHTING_MAGIC, new NylocasType(Mode.NORMAL, Style.MAGE, Size.SMALL)),
      // Normal Mode Bigs
      Map.entry(NpcID.TOB_NYLOCAS_BIG_INCOMING_MELEE, new NylocasType(Mode.NORMAL, Style.MELEE, Size.BIG)),
      Map.entry(NpcID.TOB_NYLOCAS_BIG_FIGHTING_MELEE, new NylocasType(Mode.NORMAL, Style.MELEE, Size.BIG)),
      Map.entry(NpcID.TOB_NYLOCAS_BIG_INCOMING_RANGED, new NylocasType(Mode.NORMAL, Style.RANGE, Size.BIG)),
      Map.entry(NpcID.TOB_NYLOCAS_BIG_FIGHTING_RANGED, new NylocasType(Mode.NORMAL, Style.RANGE, Size.BIG)),
      Map.entry(NpcID.TOB_NYLOCAS_BIG_INCOMING_MAGIC, new NylocasType(Mode.NORMAL, Style.MAGE, Size.BIG)),
      Map.entry(NpcID.TOB_NYLOCAS_BIG_FIGHTING_MAGIC, new NylocasType(Mode.NORMAL, Style.MAGE, Size.BIG)),

      // Hard Mode Smalls
      Map.entry(NpcID.TOB_NYLOCAS_INCOMING_MELEE_HARD, new NylocasType(Mode.HARD, Style.MELEE, Size.SMALL)),
      Map.entry(NpcID.TOB_NYLOCAS_FIGHTING_MELEE_HARD, new NylocasType(Mode.HARD, Style.MELEE, Size.SMALL)),
      Map.entry(NpcID.TOB_NYLOCAS_INCOMING_RANGED_HARD, new NylocasType(Mode.HARD, Style.RANGE, Size.SMALL)),
      Map.entry(NpcID.TOB_NYLOCAS_FIGHTING_RANGED_HARD, new NylocasType(Mode.HARD, Style.RANGE, Size.SMALL)),
      Map.entry(NpcID.TOB_NYLOCAS_INCOMING_MAGIC_HARD, new NylocasType(Mode.HARD, Style.MAGE, Size.SMALL)),
      Map.entry(NpcID.TOB_NYLOCAS_FIGHTING_MAGIC_HARD, new NylocasType(Mode.HARD, Style.MAGE, Size.SMALL)),
      // Hard Mode Bigs
      Map.entry(NpcID.TOB_NYLOCAS_BIG_INCOMING_MELEE_HARD, new NylocasType(Mode.HARD, Style.MELEE, Size.BIG)),
      Map.entry(NpcID.TOB_NYLOCAS_BIG_FIGHTING_MELEE_HARD, new NylocasType(Mode.HARD, Style.MELEE, Size.BIG)),
      Map.entry(NpcID.TOB_NYLOCAS_BIG_INCOMING_RANGED_HARD, new NylocasType(Mode.HARD, Style.RANGE, Size.BIG)),
      Map.entry(NpcID.TOB_NYLOCAS_BIG_FIGHTING_RANGED_HARD, new NylocasType(Mode.HARD, Style.RANGE, Size.BIG)),
      Map.entry(NpcID.TOB_NYLOCAS_BIG_INCOMING_MAGIC_HARD, new NylocasType(Mode.HARD, Style.MAGE, Size.BIG)),
      Map.entry(NpcID.TOB_NYLOCAS_BIG_FIGHTING_MAGIC_HARD, new NylocasType(Mode.HARD, Style.MAGE, Size.BIG)),

      // Story Mode Smalls
      Map.entry(NpcID.TOB_NYLOCAS_INCOMING_MELEE_STORY, new NylocasType(Mode.STORY, Style.MELEE, Size.SMALL)),
      Map.entry(NpcID.TOB_NYLOCAS_FIGHTING_MELEE_STORY, new NylocasType(Mode.STORY, Style.MELEE, Size.SMALL)),
      Map.entry(NpcID.TOB_NYLOCAS_INCOMING_RANGED_STORY, new NylocasType(Mode.STORY, Style.RANGE, Size.SMALL)),
      Map.entry(NpcID.TOB_NYLOCAS_FIGHTING_RANGED_STORY, new NylocasType(Mode.STORY, Style.RANGE, Size.SMALL)),
      Map.entry(NpcID.TOB_NYLOCAS_INCOMING_MAGIC_STORY, new NylocasType(Mode.STORY, Style.MAGE, Size.SMALL)),
      Map.entry(NpcID.TOB_NYLOCAS_FIGHTING_MAGIC_STORY, new NylocasType(Mode.STORY, Style.MAGE, Size.SMALL)),
      // Story Mode Bigs
      Map.entry(NpcID.TOB_NYLOCAS_BIG_INCOMING_MELEE_STORY, new NylocasType(Mode.STORY, Style.MELEE, Size.BIG)),
      Map.entry(NpcID.TOB_NYLOCAS_BIG_FIGHTING_MELEE_STORY, new NylocasType(Mode.STORY, Style.MELEE, Size.BIG)),
      Map.entry(NpcID.TOB_NYLOCAS_BIG_INCOMING_RANGED_STORY, new NylocasType(Mode.STORY, Style.RANGE, Size.BIG)),
      Map.entry(NpcID.TOB_NYLOCAS_BIG_FIGHTING_RANGED_STORY, new NylocasType(Mode.STORY, Style.RANGE, Size.BIG)),
      Map.entry(NpcID.TOB_NYLOCAS_BIG_INCOMING_MAGIC_STORY, new NylocasType(Mode.STORY, Style.MAGE, Size.BIG)),
      Map.entry(NpcID.TOB_NYLOCAS_BIG_FIGHTING_MAGIC_STORY, new NylocasType(Mode.STORY, Style.MAGE, Size.BIG)));

  public static NylocasType getNyloType(int npcId) {
    return NYLO_ID_TO_INFO.get(npcId);
  }

  public static boolean isRangeNylocas(int npcId) {
    NylocasType info = getNyloType(npcId);
    if (info == null) {
      return false;
    }
    return info.style == NylocasType.Style.RANGE;
  }

  public static boolean isMageNylocas(int npcId) {
    NylocasType info = getNyloType(npcId);
    if (info == null) {
      return false;
    }
    return info.style == NylocasType.Style.MAGE;
  }
}

package com.infernostats;

import com.google.common.annotations.VisibleForTesting;
import net.runelite.api.*;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.api.gameval.AnimationID;
import net.runelite.api.gameval.ItemID;
import net.runelite.api.gameval.*;
import net.runelite.api.kit.KitType;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.callback.Hooks;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.party.PartyMember;
import net.runelite.client.party.PartyService;
import net.runelite.client.party.WSClient;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import org.apache.commons.lang3.ArrayUtils;

import javax.inject.Inject;
import java.util.*;
import java.util.function.Predicate;
import java.util.stream.Collectors;

@PluginDescriptor(
    name = "Nylo Death Indicators",
    description = "Hide dead nylos faster"
)
public class NyloDeathIndicatorsPlugin extends Plugin {
  private int partySize = 0;
  private boolean isInNyloRegion = false;
  private final List<Nylocas> nylos = new ArrayList<>();
  private final List<Nylocas> deadNylos = new ArrayList<>();
  private final Map<Skill, Integer> fakeXpMap = new EnumMap<>(Skill.class);
  private final Map<Skill, Integer> previousXpMap = new EnumMap<>(Skill.class);

  private static final Set<Integer> CHINCHOMPAS = new HashSet<>(Arrays.asList(
      ItemID.CHINCHOMPA_CAPTURED,
      ItemID.CHINCHOMPA_BIG_CAPTURED,
      ItemID.CHINCHOMPA_BLACK));

  private static final Set<Integer> POWERED_STAVES = new HashSet<>(Arrays.asList(
      ItemID.SANGUINESTI_STAFF,
      ItemID.TOTS,
      ItemID.TOTS_CHARGED,
      ItemID.TOXIC_TOTS_CHARGED,
      ItemID.TOXIC_TOTS_I_CHARGED,
      ItemID.SANGUINESTI_STAFF_OR,
      ItemID.WILD_CAVE_ACCURSED_CHARGED,
      ItemID.WARPED_SCEPTRE,
      ItemID.TUMEKENS_SHADOW,
      ItemID.DEADMAN_BLIGHTED_TUMEKENS_SHADOW));

  private static final Set<Integer> NYLO_MELEE_WEAPONS = new HashSet<>(Arrays.asList(
      ItemID.SWIFT_BLADE, ItemID.JOINT_OF_HAM, ItemID.GOBLIN_RPG,
      ItemID.DRAGON_CLAWS, ItemID.DRAGON_SCIMITAR,
      ItemID.ABYSSAL_BLUDGEON, ItemID.INQUISITORS_MACE,
      ItemID.SARADOMIN_SWORD, ItemID.BLESSED_SARADOMIN_SWORD_DEGRADED,
      ItemID.GHRAZI_RAPIER, ItemID.GHRAZI_RAPIER_OR,
      ItemID.ABYSSAL_WHIP, ItemID.LEAGUE_3_WHIP,
      ItemID.ABYSSAL_WHIP_ICE, ItemID.ABYSSAL_WHIP_LAVA,
      ItemID.ABYSSAL_TENTACLE, ItemID.LEAGUE_3_WHIP_TENTACLE,
      ItemID.BLADE_OF_SAELDOR, ItemID.BLADE_OF_SAELDOR_INFINITE,
      ItemID.BLADE_OF_SAELDOR_INFINITE_DUMMY, ItemID.BLADE_OF_SAELDOR_INFINITE_ITHELL,
      ItemID.BLADE_OF_SAELDOR_INFINITE_IORWERTH, ItemID.BLADE_OF_SAELDOR_INFINITE_TRAHAEARN,
      ItemID.BLADE_OF_SAELDOR_INFINITE_CADARN, ItemID.BLADE_OF_SAELDOR_INFINITE_CRWYS,
      ItemID.BLADE_OF_SAELDOR_INFINITE_MEILYR, ItemID.BLADE_OF_SAELDOR_INFINITE_AMLODD,
      ItemID.BH_DRAGON_CLAWS_CORRUPTED, ItemID.DEADMAN_BLIGHTED_DRAGON_CLAWS, ItemID.VOIDWAKER,
      ItemID.DUAL_MACUAHUITL, ItemID.ELDER_MAUL,
      ItemID.SULPHUR_BLADES, ItemID.GLACIAL_TEMOTLI));

  private static final Set<Integer> MULTIKILL_MELEE_WEAPONS = new HashSet<>(Arrays.asList(
      ItemID.SCYTHE_OF_VITUR_UNCHARGED, ItemID.SCYTHE_OF_VITUR,
      ItemID.SCYTHE_OF_VITUR_UNCHARGED_OR, ItemID.SCYTHE_OF_VITUR_OR,
      ItemID.SCYTHE_OF_VITUR_UNCHARGED_BL, ItemID.SCYTHE_OF_VITUR_BL,
      ItemID.DEADMAN_BLIGHTED_SCYTHE_OF_VITUR, ItemID.DEADMAN_BLIGHTED_SCYTHE_OF_VITUR_UNCHARGED,
      ItemID.DINHS_BULWARK));

  private static final int NYLOCAS_REGION_ID = 13122;

  private final Hooks.RenderableDrawListener drawListener = this::shouldDraw;

  @Inject
  private Client client;

  @Inject
  private ClientThread clientThread;

  @Inject
  private WSClient wsClient;

  @Inject
  private PartyService party;

  @Inject
  private Hooks hooks;

  @Override
  protected void startUp() {
    clientThread.invoke(this::initializePreviousXpMap);

    hooks.registerRenderableDrawListener(drawListener);
    wsClient.registerMessage(NpcDamaged.class);
  }

  @Override
  protected void shutDown() {
    wsClient.unregisterMessage(NpcDamaged.class);
    hooks.unregisterRenderableDrawListener(drawListener);
  }

  private void initializePreviousXpMap() {
    if (client.getGameState() != GameState.LOGGED_IN) {
      previousXpMap.clear();
    } else {
      for (final Skill skill : Skill.values()) {
        previousXpMap.put(skill, client.getSkillExperience(skill));
      }
    }
  }

  @Subscribe
  protected void onGameStateChanged(GameStateChanged event) {
    if (event.getGameState() == GameState.LOGGED_IN) {
      partySize = getPartySize();
      if (!isInNyloRegion) {
        isInNyloRegion = isInNylocasRegion();
      } else {
        isInNyloRegion = isInNylocasRegion();
        if (!isInNyloRegion) {
          nylos.clear();
          deadNylos.clear();
        }
      }
    }
  }

  @Subscribe
  protected void onGameTick(GameTick event) {
    // Group FakeXP drops and process them every game tick
    for (Map.Entry<Skill, Integer> xp : fakeXpMap.entrySet()) {
      processXpDrop(xp.getKey(), xp.getValue());
    }
    fakeXpMap.clear();

    Iterator<Nylocas> nylocasIterator = deadNylos.iterator();
    while (nylocasIterator.hasNext()) {
      Nylocas nylocas = nylocasIterator.next();
      nylocas.setHidden(nylocas.getHidden() + 1);

      final boolean isDead = nylocas.getNpc().getHealthRatio() == 0;
      if (nylocas.getHidden() > 5 && !isDead) {
        nylocas.setHidden(0);
        nylocasIterator.remove();
      }
    }
  }

  @Subscribe
  protected void onNpcSpawned(NpcSpawned event) {
    if (!isInNyloRegion) {
      return;
    }

    if (partySize < 1 || partySize > 5) {
      return;
    }

    int smallHP = NylocasHealth.getNormalModeSmall(partySize);
    int bigHP = NylocasHealth.getNormalModeBig(partySize);
    int smSmallHP = NylocasHealth.getStoryModeSmall(partySize);
    int smBigHP = NylocasHealth.getStoryModeBig(partySize);

    final NPC npc = event.getNpc();
    NylocasType nyloType = NylocasType.getNyloType(npc.getId());
    if (nyloType == null) {
      return;
    }

    int hp = (nyloType.mode == NylocasType.Mode.STORY)
        ? (nyloType.size == NylocasType.Size.BIG ? smBigHP : smSmallHP)
        : (nyloType.size == NylocasType.Size.BIG ? bigHP : smallHP);

    nylos.add(new Nylocas(npc, npc.getIndex(), hp));
  }

  @Subscribe
  protected void onNpcDespawned(NpcDespawned event) {
    if (!isInNyloRegion) {
      return;
    }

    nylos.removeIf((nylo) -> nylo.getNpcIndex() == event.getNpc().getIndex());
    deadNylos.removeIf((nylo) -> nylo.getNpcIndex() == event.getNpc().getIndex());
  }

  @Subscribe
  protected void onHitsplatApplied(HitsplatApplied event) {
    if (!isInNyloRegion) {
      return;
    }

    Actor actor = event.getActor();
    if (actor instanceof NPC) {
      final int npcIndex = ((NPC) actor).getIndex();
      final int damage = event.getHitsplat().getAmount();

      Nylocas nylocas = nylos.stream()
          .filter(n -> n.getNpcIndex() == npcIndex)
          .findFirst().orElse(null);
      if (nylocas == null) {
        return;
      }

      if (event.getHitsplat().getHitsplatType() == HitsplatID.HEAL) {
        nylocas.setHp(nylocas.getHp() + damage);
      } else {
        nylocas.setHp(nylocas.getHp() - damage);
      }
      nylocas.setQueuedDamage(Math.max(0, nylocas.getQueuedDamage() - damage));
    }
  }

  @Subscribe
  protected void onNpcDamaged(NpcDamaged event) {
    if (!isInNyloRegion) {
      return;
    }

    PartyMember member = party.getLocalMember();
    if (member != null) {
      // Ignore party messages from yourself, they're already applied
      if (member.getMemberId() == event.getMemberId()) {
        return;
      }
    }

    final int npcIndex = event.getNpcIndex();
    final int damage = event.getDamage();

    Nylocas nylocas = nylos.stream()
        .filter(n -> n.getNpcIndex() == npcIndex)
        .findFirst().orElse(null);
    if (nylocas == null) {
      return;
    }

    nylocas.setQueuedDamage(nylocas.getQueuedDamage() + damage);

    if (nylocas.getHp() - nylocas.getQueuedDamage() <= 0) {
      if (deadNylos.stream().noneMatch(deadNylo -> deadNylo.getNpcIndex() == npcIndex)) {
        deadNylos.add(nylocas);
        nylocas.getNpc().setDead(true);
      }
    }
  }

  @Subscribe
  protected void onFakeXpDrop(FakeXpDrop event) {
    final int currentXp = fakeXpMap.getOrDefault(event.getSkill(), 0);
    fakeXpMap.put(event.getSkill(), currentXp + event.getXp());
  }

  @Subscribe
  protected void onStatChanged(StatChanged event) {
    preProcessXpDrop(event.getSkill(), event.getXp());
  }

  private void preProcessXpDrop(Skill skill, int xp) {
    final int xpAfter = client.getSkillExperience(skill);
    final int xpBefore = previousXpMap.getOrDefault(skill, -1);

    previousXpMap.put(skill, xpAfter);

    if (xpBefore == -1 || xpAfter <= xpBefore) {
      return;
    }

    processXpDrop(skill, xpAfter - xpBefore);
  }

  private void processXpDrop(Skill skill, final int xp) {
    if (!isInNylocasRegion()) {
      return;
    }

    int damage = 0;

    Player player = client.getLocalPlayer();
    if (player == null) {
      return;
    }

    PlayerComposition playerComposition = player.getPlayerComposition();
    if (playerComposition == null) {
      return;
    }

    final int weaponUsed = playerComposition.getEquipmentId(KitType.WEAPON);
    final int attackStyle = client.getVarpValue(VarPlayerID.COM_MODE);

    final int animation = player.getAnimation();
    boolean isBarrageCast = animation == AnimationID.ZAROS_VERTICAL_CASTING ||
        animation == AnimationID.ZAROS_VERTICAL_CASTING_WALKMERGE;
    boolean isDragonFireShield = animation == AnimationID.QIP_DRAGON_SLAYER_PLAYER_UNLEASHING_FIRE;

    boolean isChinchompa = CHINCHOMPAS.contains(weaponUsed);
    boolean isPoweredStaff = POWERED_STAVES.contains(weaponUsed);

    boolean isDefensiveCast = false;
    if (isBarrageCast && !isPoweredStaff) {
      isDefensiveCast = client.getVarbitValue(VarbitID.AUTOCAST_DEFMODE) == 1;
    } else if (isPoweredStaff) {
      // Manually casting barrage with a powered staff equipped uses the staff's
      // current attack option to decide whether to cast on defensive or not
      isDefensiveCast = attackStyle == 3;
    }

    switch (skill) {
      case MAGIC:
        if (isDefensiveCast) {
          // Ignore all magic xp if we're casting defensively
          // Handle these xp drops in the DEFENCE case below
          return;
        }

        if (isBarrageCast) {
          if (xp % 2 == 0) {
            // Ice Barrage casts are always even due to 52 base xp
            damage = (xp - 52) / 2;
          } else {
            // Blood Barrage casts are always odd due to 51 base xp
            damage = (xp - 51) / 2;
          }
        } else if (isPoweredStaff) {
          damage = (int) ((double) xp / 2.0D);
        }

        break;
      case ATTACK:
      case STRENGTH:
      case DEFENCE:
        if (MULTIKILL_MELEE_WEAPONS.contains(weaponUsed)) {
          return;
        } else if (NYLO_MELEE_WEAPONS.contains(weaponUsed)) {
          damage = (int) ((double) xp / 4.0D);
        } else if (isDragonFireShield) {
          damage = (int) ((double) xp / 4.0D);
        } else if (isDefensiveCast) {
          damage = xp;
        }

        break;
      case RANGED:
        if (attackStyle == 3) {
          // Defensive: Ranged XP = 2x damage dealt
          damage = (int) ((double) xp / 2.0D);
        } else {
          // Accurate/Rapid: Ranged XP = 4x damage dealt
          damage = (int) ((double) xp / 4.0D);
        }
        break;
      default:
        return;
    }

    if (damage > 0) {
      if (isBarrageCast) {
        handleAreaOfEffectAttack(damage, player, NylocasType::isMageNylocas);
      } else if (isChinchompa) {
        handleAreaOfEffectAttack(damage, player, NylocasType::isRangeNylocas);
      } else {
        sendDamage(player, damage);
      }
    }
  }

  private void handleAreaOfEffectAttack(final long hit, Player player, Predicate<Integer> type) {
    Actor interacted = player.getInteracting();
    if (interacted instanceof NPC) {
      NPC interactedNPC = (NPC) interacted;
      WorldPoint targetPoint = interactedNPC.getWorldLocation();

      // Filter all nylos within the radius and then
      // Filter all nylos that can be damaged within the radius
      List<Nylocas> clump = nylos.stream()
          .filter(nylo -> nylo.getNpc().getWorldLocation().distanceTo(targetPoint) <= 1)
          .filter(nylo -> type.test(nylo.getNpc().getId()))
          .collect(Collectors.toList());

      final int clumpHp = clump.stream()
          .mapToInt(Nylocas::getHp)
          .sum();
      if (clumpHp > hit) {
        return;
      }

      sendClumpDamage(clump);
    }
  }

  private void sendDamage(Player player, int damage) {
    if (damage <= 0) {
      return;
    }

    Actor interacted = player.getInteracting();
    if (interacted instanceof NPC) {
      NPC interactedNPC = (NPC) interacted;
      final int npcIndex = interactedNPC.getIndex();
      final NpcDamaged npcDamaged = new NpcDamaged(npcIndex, damage);

      if (party.isInParty()) {
        clientThread.invokeLater(() -> party.send(npcDamaged));
      }

      onNpcDamaged(npcDamaged);
    }
  }

  private void sendClumpDamage(List<Nylocas> clump) {
    for (Nylocas nylocas : clump) {
      final int npcIndex = nylocas.getNpcIndex();
      final NpcDamaged npcDamaged = new NpcDamaged(npcIndex, nylocas.getHp());

      if (party.isInParty()) {
        clientThread.invokeLater(() -> party.send(npcDamaged));
      }

      onNpcDamaged(npcDamaged);
    }
  }

  public int getPartySize() {
    Set<Integer> varbits = Set.of(
        VarbitID.TOB_CLIENT_P0,
        VarbitID.TOB_CLIENT_P1,
        VarbitID.TOB_CLIENT_P2,
        VarbitID.TOB_CLIENT_P3,
        VarbitID.TOB_CLIENT_P4);

    return (int) varbits
        .stream()
        .mapToInt(var -> client.getVarbitValue(var))
        .filter(val -> val != 0)
        .count();
  }

  private boolean isInNylocasRegion() {
    WorldView wv = client.getTopLevelWorldView();
    if (wv == null) {
      return false;
    }

    int[] regions = wv.getMapRegions();
    if (regions == null || regions.length == 0) {
      return false;
    }

    return ArrayUtils.contains(regions, NYLOCAS_REGION_ID);
  }

  @VisibleForTesting
  boolean shouldDraw(Renderable renderable, boolean drawingUI) {
    if (renderable instanceof NPC) {
      return deadNylos.stream()
          .noneMatch(nylocas -> nylocas.getNpcIndex() == ((NPC) renderable).getIndex());
    } else if (renderable instanceof GraphicsObject) {
      switch (((GraphicsObject) renderable).getId()) {
        case SpotanimID.TOB_NYLOCAS_DEATH_MELEE_STANDARD:
        case SpotanimID.TOB_NYLOCAS_DEATH_MELEE_DETONATE:
        case SpotanimID.TOB_NYLOCAS_DEATH_RANGED_STANDARD:
        case SpotanimID.TOB_NYLOCAS_DEATH_RANGED_DETONATE:
        case SpotanimID.TOB_NYLOCAS_DEATH_MAGIC_STANDARD:
        case SpotanimID.TOB_NYLOCAS_DEATH_MAGIC_DETONATE:
          return false;
      }
    }

    return true;
  }
}

package com.infernostats;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class NyloDeathIndicatorsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(NyloDeathIndicatorsPlugin.class);
		RuneLite.main(args);
	}
}
