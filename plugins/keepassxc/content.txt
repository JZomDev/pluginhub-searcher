package abex.os.keepassxc;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class KeePassXcPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(KeePassXcPlugin.class);
		RuneLite.main(args);
	}
}
package abex.os.keepassxc;

import abex.os.keepassxc.proto.msg.GetLogins;
import abex.os.keepassxc.proto.KeePassXCSocket;
import com.google.gson.Gson;

public class ManualTest
{
	public static void main(String... args) throws Exception
	{
		try (KeePassXCSocket s = new KeePassXCSocket(new Gson()))
		{
			s.setDeadline(500);
			long start = System.currentTimeMillis();
			s.init();
			System.out.println((System.currentTimeMillis() - start) + " ms");
			s.clearDeadline();
			GetLogins.Response r = s.call(GetLogins.ACTION, GetLogins.Request.builder()
				.action(GetLogins.ACTION)
				.url("https://secure.runescape.com/")
				.keys(s.getKeys())
				.build(), GetLogins.Response.class);
			System.out.println(r.toString());
		}
	}
}

package abex.os.keepassxc;

import abex.os.keepassxc.proto.DatabaseClosedException;
import abex.os.keepassxc.proto.msg.GetLogins;
import abex.os.keepassxc.proto.IOTimeoutException;
import abex.os.keepassxc.proto.KeePassXCSocket;
import abex.os.keepassxc.proto.NoLoginsFound;
import com.google.gson.Gson;
import java.awt.BorderLayout;
import java.io.IOException;
import javax.inject.Inject;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.DynamicGridLayout;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.SwingUtil;

@Slf4j
public class KeePassXcPanel extends PluginPanel
{
	private static final String URL = "https://secure.runescape.com/";

	private final Client client;
	private final ClientToolbar clientToolbar;

	private final NavigationButton button;

	@Inject
	private KeePassXcConfig config;

	@Inject
	private Gson gson;

	@Inject
	public KeePassXcPanel(Client client, ClientToolbar clientToolbar)
	{
		this.client = client;
		this.clientToolbar = clientToolbar;

		this.button = NavigationButton.builder()
			.icon(ImageUtil.loadImageResource(KeePassXcPlugin.class, "icon.png"))
			.panel(this)
			.priority(999)
			.tooltip("KeePassXC")
			.build();

		setBorder(new EmptyBorder(5, 5, 5, 5));
	}

	public void load()
	{
		Thread t = new Thread(() ->
		{
			String message;
			Throwable ex;
			try (KeePassXCSocket sock = new KeePassXCSocket(gson))
			{
				sock.setDeadline(500);
				sock.init();
				sock.clearDeadline();
				GetLogins.Response r = sock.call(GetLogins.ACTION, GetLogins.Request.builder()
					.action(GetLogins.ACTION)
					.url("https://secure.runescape.com/")
					.keys(sock.getKeys())
					.build(), GetLogins.Response.class);
				SwingUtilities.invokeLater(() -> this.open(r));
				return;
			}
			catch (NoLoginsFound e)
			{
				ex = e;
				message = "No logins found for \"" + URL + "\"";
			}
			catch (DatabaseClosedException e)
			{
				ex = e;
				message = "The database is locked";
			}
			catch (IOTimeoutException e)
			{
				ex = e;
				message = "<html>Cannot connect to KeePassXC. Check that:<br>" +
					"1) KeePassXC is open, and<br>" +
					"2)<a href=\"https://github.com/abextm/keepassxc-runelite\">Browser Integration</a> is enabled<br>";
			}
			catch (IOException e)
			{
				ex = e;
				message = e.toString();
			}
			catch (Throwable e)
			{
				log.warn("error connecting to KeePassXC", e);
				return;
			}
			log.warn("error connecting to KeePassXC", ex);
			SwingUtilities.invokeLater(() -> this.open(message));
		}, "KeePassXCSocketConnection");

		t.setDaemon(true);
		t.start();
	}

	public void open(GetLogins.Response logins)
	{
		SwingUtil.fastRemoveAll(this);
		setLayout(new DynamicGridLayout(0, 1, 0, 0));
		KeePassXcConfig.UsernameVisibility vis = config.usernameVisibility();
		boolean hideUsernames = vis == KeePassXcConfig.UsernameVisibility.AUTO
			? client.getPreferences().getHideUsername()
			:	vis == KeePassXcConfig.UsernameVisibility.NEVER;

		String defaultTitle = config.defaultTitle().trim();

		for (GetLogins.Entry e : logins.getEntries())
		{
			if (!defaultTitle.isEmpty() && e.getName().trim().equalsIgnoreCase(defaultTitle))
			{
				fillCredentials(e);
			}

			String name = hideUsernames ? e.getName() : e.getLogin();
			JButton b = new JButton(name);
			b.addActionListener(_e -> fillCredentials(e));
			add(b);
		}
		open();
	}

	public void open(String error)
	{
		SwingUtil.fastRemoveAll(this);
		setLayout(new BorderLayout());

		JLabel titleLabel = new JLabel("KeePassXC");
		titleLabel.setBorder(new EmptyBorder(5, 5, 5, 5));
		titleLabel.setFont(FontManager.getRunescapeBoldFont());
		add(titleLabel, BorderLayout.NORTH);

		JLabel errorLabel = new JLabel(error);
		errorLabel.setBorder(new EmptyBorder(5, 5, 5, 5));
		add(errorLabel, BorderLayout.CENTER);

		JButton button = new JButton("Retry");
		add(button, BorderLayout.SOUTH);
		button.addActionListener(e -> load());

		open();
	}

	private void open()
	{
		revalidate();
		clientToolbar.addNavigation(button);
		if (config.autoOpenPanel())
		{
			SwingUtilities.invokeLater(() -> clientToolbar.openPanel(button));
		}
	}

	public void close()
	{
		// clientui doesn't unset selected if we close the panel by removing the navbutton
		clientToolbar.removeNavigation(button);
	}

	private void fillCredentials(GetLogins.Entry e)
	{
		client.setPassword(e.getPassword());
		client.setUsername(e.getLogin());

		if (e.getTotp() != null && config.performTotp())
		{
			client.setOtp(e.getTotp());
		}
		else
		{
			client.setOtp("");
		}
	}
}

package abex.os.keepassxc;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("keepassxc")
public interface KeePassXcConfig extends Config
{
	@ConfigItem(
		keyName = "defaultTitle",
		name = "Auto fill entry title",
		description = "The title of the Entry to automatically populate into the login screen"
	)
	default String defaultTitle()
	{
		return "";
	}

	@ConfigItem(
		keyName = "autoOpenPanel",
		name = "Auto open panel",
		description = "Whether or not to open the sidebar panel on the login screen"
	)
	default boolean autoOpenPanel()
	{
		return true;
	}

	@ConfigItem(
		keyName = "usernameVisibility",
		name = "Show usernames",
		description = "if usernames or titles are shown in the sidebar. Auto respects the login screen's \"Hide usernames\" option"
	)
	default UsernameVisibility usernameVisibility()
	{
		return UsernameVisibility.AUTO;
	}

	enum UsernameVisibility
	{
		ALWAYS,
		AUTO,
		NEVER;
	}

	@ConfigItem(
		keyName = "performTotp",
		name = "Perform TOTP",
		description = "If an entry has TOTP configured within the database, auto-fill the TOTP field when prompted."
	)
	default boolean performTotp()
	{
		return true;
	}
}

package abex.os.keepassxc.proto;

public class DatabaseClosedException extends KeePassException
{
	protected DatabaseClosedException(int code, String message)
	{
		super(code, message);
	}
}

package abex.os.keepassxc.proto;

import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import java.lang.reflect.Type;
import java.util.Base64;

public class Base64Adapter implements JsonSerializer<byte[]>, JsonDeserializer<byte[]>
{
	@Override
	public JsonElement serialize(byte[] src, Type typeOfSrc, JsonSerializationContext context)
	{
		return new JsonPrimitive(Base64.getEncoder().encodeToString(src));
	}

	@Override
	public byte[] deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException
	{
		return Base64.getDecoder().decode(json.getAsString());
	}
}

package abex.os.keepassxc.proto.msg;

import lombok.Builder;
import lombok.Data;

public class TestAssociate
{
	private TestAssociate(){};

	public static final String ACTION = "test-associate";

	@Data
	@Builder
	public static class Request {
		@Builder.Default
		String action = ACTION;
		String id;
		byte[] key;
	}

	@Data
	public static class Response {
	}
}

package abex.os.keepassxc.proto.msg;

import lombok.Builder;
import lombok.Data;

public class ChangePublicKeys
{
	private ChangePublicKeys(){}

	public static final String ACTION = "change-public-keys";

	@Data
	@Builder
	public static class Request {
		@Builder.Default
		String action = ACTION;
		byte[] publicKey;
		byte[] nonce;
		byte[] clientID;
	}

	@Data
	public static class Response {
		String action;
		String version;
		byte[] publicKey;
		byte[] nonce;
		boolean success;
	}
}

package abex.os.keepassxc.proto.msg;

import lombok.Data;

public class GetDatabaseHash
{
	private GetDatabaseHash() {};

	public static final String ACTION = "get-databasehash";

	@Data
	public static class Request
	{
		String action = ACTION;
	}

	@Data
	public static class Response
	{
		String hash;
	}
}

package abex.os.keepassxc.proto.msg;

import lombok.Builder;
import lombok.Data;

public class Associate
{
	private Associate(){}

	public static final String ACTION = "associate";

	@Data
	@Builder
	public static class Request {
		@Builder.Default
		String action = ACTION;
		byte[] key;
		byte[] idKey;
	}

	@Data
	public static class Response {
		String id;
	}
}

package abex.os.keepassxc.proto.msg;

import abex.os.keepassxc.proto.Key;
import java.util.Collection;
import java.util.List;
import lombok.Builder;
import lombok.Data;

public class GetLogins
{
	private GetLogins(){}

	public static final String ACTION = "get-logins";

	@Data
	@Builder
	public static class Request {
		@Builder.Default
		String action = ACTION;
		String url;
		String submitUrl;
		String httpAuth;
		Collection<Key> keys;
	}

	@Data
	public static class Response {
		List<Entry> entries;
	}

	@Data
	public static class Entry {
		String login;
		String name;
		String password;
		String totp;
	}
}

package abex.os.keepassxc.proto;

import java.io.IOException;

public class IOTimeoutException extends IOException
{
	public IOTimeoutException()
	{
		super("Hit deadline");
	}

	public IOTimeoutException(Throwable i)
	{
		super("Hit deadline", i);
	}
}

package abex.os.keepassxc.proto;

import java.io.IOException;
import lombok.Getter;

public class KeePassException extends IOException
{
	@Getter
	private final int errorCode;

	protected KeePassException(int code, String message)
	{
		super(message);
		errorCode = code;
	}

	public static KeePassException create(int code, String message)
	{
		switch (code) {
			case 1:
				return new DatabaseClosedException(code, message);
			case 15:
				return new NoLoginsFound(code, message);
			default:
				return new KeePassException(code, message + "(" + code + ")");
		}
	}
}

package abex.os.keepassxc.proto;

public class NoLoginsFound extends KeePassException
{
	protected NoLoginsFound(int code, String message)
	{
		super(code, message);
	}
}

package abex.os.keepassxc.proto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Key
{
	String id;
	byte[] key;
}

package abex.os.keepassxc.proto;

import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;

public class InterruptableInputStream extends FilterInputStream
{
	private long deadline = 0;
	private long timeout = 0;

	public InterruptableInputStream(InputStream in)
	{
		super(in);
	}

	public void setDeadline(long ms)
	{
		timeout = ms * 1_000_000;
		refreshDeadline();
	}

	public void clearDeadline()
	{
		timeout = 0;
		deadline = 0;
	}

	public void refreshDeadline()
	{
		if (timeout > 0)
		{
			deadline = System.nanoTime() + timeout;
		}
	}

	private void check() throws IOException
	{
		if (deadline != 0 && System.nanoTime() > deadline)
		{
			throw new IOTimeoutException();
		}
		try
		{
			Thread.sleep(1);
		}
		catch (InterruptedException e)
		{
			throw new IOTimeoutException(e);
		}
	}

	public int read() throws IOException
	{
		while (in.available() <= 0)
		{
			check();
		}

		return in.read();
	}

	public int read(byte b[], int off, int len) throws IOException
	{
		int read = 0;
		for (; ; )
		{
			int avail = available();
			if (avail <= 0)
			{
				check();
				continue;
			}
			if (avail > len)
			{
				avail = len;
			}

			int thisread = in.read(b, off, avail);
			if (thisread < 0)
			{
				return read;
			}

			read += thisread;
			off += thisread;
			len -= thisread;

			if (len <= 0)
			{
				break;
			}
		}
		return read;
	}
}

package abex.os.keepassxc.proto;

import abex.os.keepassxc.proto.msg.Associate;
import abex.os.keepassxc.proto.msg.ChangePublicKeys;
import abex.os.keepassxc.proto.msg.GetDatabaseHash;
import abex.os.keepassxc.proto.msg.TestAssociate;
import abex.os.keepassxc.proto.path.ProxyPathResolver;
import com.google.common.io.LittleEndianDataInputStream;
import com.google.common.io.LittleEndianDataOutputStream;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import com.neilalexander.jnacl.NaCl;
import com.neilalexander.jnacl.crypto.curve25519xsalsa20poly1305;
import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.StandardOpenOption;
import java.security.SecureRandom;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.RuneLite;

// this whole thing is a trainwreck
// especially jnacl, which takes arguments in the wrong order, gives you the wrong output
// and in general is wrong. Assume there is no crypto happening here because there probably isn't
// Fortunately this is only over a local unix socket / named pipe, so it should be fine
@Slf4j
public class KeePassXCSocket implements Closeable
{
	private static final int KEY_SIZE = 32;
	private static final int ID_SIZE = 24;

	private final Gson gson;
	private final Process proc;
	private final InterruptableInputStream stdoutInterrupt;
	private final LittleEndianDataOutputStream stdin;
	private final LittleEndianDataInputStream stdout;

	private final byte[] clientID = new byte[ID_SIZE];
	private final byte[] publicKey = new byte[KEY_SIZE];

	private NaCl nacl;

	private Map<String, Key> keyring = new HashMap<>();

	private final SecureRandom secureRandom = new SecureRandom();

	public KeePassXCSocket(Gson clientGson) throws IOException
	{
		String keepassProxyPath = ProxyPathResolver.getKeepassProxyPath();
		if (keepassProxyPath == null)
		{
			throw KeePassException.create(0, "Could not locate keepass-proxy.");
		}

		this.gson = clientGson.newBuilder()
			.disableHtmlEscaping()
			.registerTypeHierarchyAdapter(byte[].class, new Base64Adapter())
			.create();

		ProcessBuilder pb = new ProcessBuilder();
		// the kpxc flatpak checks for the extension's id in the arguments to redirect to the proxy instead of the app
		// https://github.com/keepassxreboot/keepassxc/blob/a6d3f973fa8449f0f7dac864b3bd3928c29c649f/utils/keepassxc-flatpak-wrapper.sh#L37
		pb.command(keepassProxyPath, "", "keepassxc-browser@keepassxc.org");
		pb.redirectInput(ProcessBuilder.Redirect.PIPE);
		pb.redirectOutput(ProcessBuilder.Redirect.PIPE);
		// the kpxc AppImage wrapper script checks for this to redirect to the proxy instead of the app
		// https://github.com/keepassxreboot/keepassxc/blob/a6d3f973fa8449f0f7dac864b3bd3928c29c649f/release-tool#L681
		pb.environment().put("MOZ_LAUNCHED_CHILD", "1");
		proc = pb.start();
		stdin = new LittleEndianDataOutputStream(proc.getOutputStream());
		stdoutInterrupt = new InterruptableInputStream(proc.getInputStream());
		stdout = new LittleEndianDataInputStream(stdoutInterrupt);
	}

	public void setDeadline(long ms)
	{
		stdoutInterrupt.setDeadline(ms);
	}

	public void clearDeadline()
	{
		stdoutInterrupt.clearDeadline();
	}

	public void init() throws IOException
	{
		byte[] privateKey = new byte[KEY_SIZE];
		secureRandom.nextBytes(clientID);
		curve25519xsalsa20poly1305.crypto_box_keypair(publicKey, privateKey);

		{
			byte[] nonce = new byte[ID_SIZE];
			secureRandom.nextBytes(nonce);

			byte[] msg = gson.toJson(ChangePublicKeys.Request.builder()
				.nonce(nonce)
				.clientID(clientID)
				.publicKey(publicKey)
				.build()).getBytes(StandardCharsets.UTF_8);
			stdin.writeInt(msg.length);
			stdin.write(msg);
			stdin.flush();

			increment(nonce);

			byte[] rs = new byte[stdout.readInt()];
			stdout.readFully(rs);
			ChangePublicKeys.Response r = gson.fromJson(new String(rs, StandardCharsets.UTF_8), ChangePublicKeys.Response.class);
			if (!Arrays.equals(r.getNonce(), nonce))
			{
				throw new IOException("Incorrect nonce: " + Arrays.toString(r.getNonce()) + " != " + Arrays.toString(nonce));
			}
			if (!r.isSuccess())
			{
				throw new IOException("success == false");
			}

			byte[] serverPublicKey = r.getPublicKey();
			try
			{
				nacl = new NaCl(privateKey, serverPublicKey);
			}
			catch (Exception e)
			{
				throw new RuntimeException(e);
			}
		}

		ensureAssociate();
	}

	private void increment(byte[] nonce)
	{
		int carry = 1;
		for (int i = 0; i < nonce.length; i++)
		{
			int v = (nonce[i] & 0xFF) + carry;
			nonce[i] = (byte) v;
			carry = v >>> 8;
		}
	}

	@AllArgsConstructor
	private static class RequestWrapper
	{
		String action;
		byte[] message;
		byte[] nonce;
		byte[] clientID;
	}

	private static class ResponseWrapper
	{
		byte[] message;
		byte[] nonce;
		String error;
		int errorCode;
	}

	private static class ResponseShared
	{
		byte[] nonce;
		boolean success;
		String error;
		int errorCode;
	}

	public synchronized <T> T call(String action, Object send, Class<T> type) throws IOException
	{
		byte[] nonce = new byte[ID_SIZE];
		secureRandom.nextBytes(nonce);

		byte[] rawMsg = gson.toJson(send).getBytes(StandardCharsets.UTF_8);
		byte[] cryptMsgAndGarbage = nacl.encrypt(rawMsg, nonce);
		byte[] cryptMsg = new byte[cryptMsgAndGarbage.length - curve25519xsalsa20poly1305.crypto_secretbox_BOXZEROBYTES];
		System.arraycopy(cryptMsgAndGarbage, curve25519xsalsa20poly1305.crypto_secretbox_BOXZEROBYTES, cryptMsg, 0, cryptMsg.length);
		byte[] wrappedMsg = gson.toJson(new RequestWrapper(action, cryptMsg, nonce, clientID))
			.getBytes(StandardCharsets.UTF_8);

		stdin.writeInt(wrappedMsg.length);
		stdin.write(wrappedMsg);
		stdin.flush();

		increment(nonce);

		byte[] rs = new byte[stdout.readInt()];
		stdoutInterrupt.refreshDeadline();
		stdout.readFully(rs);
		ResponseWrapper res = gson.fromJson(new String(rs, StandardCharsets.UTF_8), ResponseWrapper.class);
		if (res.error != null)
		{
			throw KeePassException.create(res.errorCode, res.error);
		}
		byte[] cryptResAndGarbage = new byte[res.message.length + curve25519xsalsa20poly1305.crypto_secretbox_BOXZEROBYTES];
		System.arraycopy(res.message, 0, cryptResAndGarbage, curve25519xsalsa20poly1305.crypto_secretbox_BOXZEROBYTES, res.message.length);
		byte[] rawRes = nacl.decrypt(cryptResAndGarbage, res.nonce);
		String resStr = new String(rawRes, StandardCharsets.UTF_8);

		ResponseShared meta = gson.fromJson(resStr, ResponseShared.class);
		if (!meta.success)
		{
			throw KeePassException.create(meta.errorCode, meta.error);
		}
		if (!Arrays.equals(meta.nonce, nonce))
		{
			throw new IOException("Nonce mismatch " + Arrays.toString(meta.nonce) + " != " + Arrays.toString(nonce));
		}

		return gson.fromJson(resStr, type);
	}

	protected File getKeyringFile()
	{
		return new File(RuneLite.RUNELITE_DIR, "keepassxc.keyring");
	}

	synchronized void ensureAssociate() throws IOException
	{
		GetDatabaseHash.Response hashRes = call(GetDatabaseHash.ACTION, new GetDatabaseHash.Request(), GetDatabaseHash.Response.class);
		String hash = hashRes.getHash();
		Key k = keyring.get(hash);
		if (k != null)
		{
			try
			{
				call(TestAssociate.ACTION, TestAssociate.Request.builder()
					.id(k.id)
					.key(k.key)
					.build(), TestAssociate.Response.class);
				return;
			}
			catch (IOException e)
			{
				log.debug("", e);
			}
		}
		try
		{
			keyring = gson.fromJson(new String(Files.readAllBytes(getKeyringFile().toPath()), StandardCharsets.UTF_8),
				new TypeToken<Map<String, Key>>()
				{
				}.getType());
		}
		catch (IOException e)
		{
			log.info("failed to read keyring", e);
		}

		k = keyring.get(hash);
		if (k != null)
		{
			call(TestAssociate.ACTION, TestAssociate.Request.builder()
				.id(k.id)
				.key(k.key)
				.build(), TestAssociate.Response.class);
			return;
		}

		// can block waiting for user input
		clearDeadline();

		byte[] idKey = new byte[KEY_SIZE];
		secureRandom.nextBytes(idKey);

		k = new Key(
			call(Associate.ACTION, Associate.Request.builder()
				.idKey(idKey)
				.key(publicKey)
				.build(), Associate.Response.class)
				.getId(),
			idKey
		);

		keyring.put(hash, k);
		try
		{
			Files.write(getKeyringFile().toPath(), gson.toJson(keyring).getBytes(StandardCharsets.UTF_8),
				StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
		}
		catch (IOException e)
		{
			log.info("failed to write keyring", e);
		}
	}

	public Collection<Key> getKeys()
	{
		return Collections.unmodifiableCollection(keyring.values());
	}

	public void close() throws IOException
	{
		stdin.close();
		proc.destroy();
	}
}

package abex.os.keepassxc.proto.path;

import java.util.List;
import lombok.Data;

@Data
public class NativeMessagingManifest
{
	private List<String> allowedOrigins;
	private String description;
	private String name;
	private String path;
	private String type;
}

package abex.os.keepassxc.proto.path;

import com.google.common.base.Strings;
import com.sun.jna.platform.win32.Advapi32Util;
import com.sun.jna.platform.win32.Win32Exception;
import com.sun.jna.platform.win32.WinReg;
import java.io.File;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.util.OSType;
import net.runelite.http.api.RuneLiteAPI;

@Slf4j
public class ProxyPathResolver
{
	private static String proxyPath;

	private ProxyPathResolver()
	{
	}

	public static String getKeepassProxyPath()
	{
		if (proxyPath == null)
		{
			setProxyPath();
		}

		if (proxyPath == null)
		{
			log.warn("Could not locate keepass-proxy");

			// hope its on the path somewhere
			proxyPath = "keepassxc-proxy";
		}

		return proxyPath;
	}

	private static boolean setProxyPath()
	{
		// https://github.com/keepassxreboot/keepassxc/blob/develop/src/browser/NativeMessageInstaller.cpp#L36
		switch (OSType.getOSType())
		{
			case MacOS:
				return testOSXBrowser("Google/Chrome")
					|| testOSXBrowser("Mozilla")
					|| testOSXBrowser("Chromium")
					|| testOSXBrowser("Vivaldi")
					|| testOSXBrowser("BraveSoftware/Brave-Browser")
					|| testOSXBrowser("Microsoft Edge");
			case Linux:
			{
				File home = new File(System.getProperty("user.home"));
				File config = new File(home, ".config");
				File config2 = new File(home, "/etc/xdg");
				return testManifestDir(new File(config, "/google-chrome/NativeMessagingHosts"))
					|| testManifestDir(new File(config2, "/google-chrome/NativeMessagingHosts"))
					|| testManifestDir(new File(home, "/.mozilla/native-messaging-hosts"))
					|| testManifestDir(new File(config, "/chromium/NativeMessagingHosts"))
					|| testManifestDir(new File(config2, "/chromium/NativeMessagingHosts"))
					|| testManifestDir(new File(config, "/vivaldi/NativeMessagingHosts"))
					|| testManifestDir(new File(config2, "/vivaldi/NativeMessagingHosts"))
					|| testManifestDir(new File(config, "/BraveSoftware/Brave-Browser/NativeMessagingHosts"))
					|| testManifestDir(new File(config2, "/BraveSoftware/Brave-Browser/NativeMessagingHosts"))
					|| testManifestDir(new File(config, "/microsoftedge/NativeMessagingHosts"))
					|| testManifestDir(new File(config2, "/microsoftedge/NativeMessagingHosts"));
			}
			case Windows:
				return testWindowsBrowser("Google\\Chrome")
					|| testWindowsBrowser("Chromium")
					|| testWindowsBrowser("Mozilla")
					|| testWindowsBrowser("Microsoft\\Edge");
		}
		return false;
	}

	private static boolean testPath(File file)
	{
		if (file == null)
		{
			return false;
		}

		if (!file.exists())
		{
			log.info("proxy is not at \"{}\"", file);
			return false;
		}

		proxyPath = file.getAbsolutePath();
		return true;
	}

	private static boolean testOSXBrowser(String name)
	{
		return testManifestDir(new File(System.getProperty("user.home"), "/Library/Application Support/" + name + "/NativeMessagingHosts"));
	}

	private static boolean testManifestDir(File nativeHostsPath)
	{
		return testManifest(new File(nativeHostsPath, "org.keepassxc.keepassxc_browser.json"));
	}

	private static boolean testManifest(File manifestFile)
	{
		if (!manifestFile.exists())
		{
			return false;
		}

		try
		{
			// parse json to NMManifest, which should contain proxy path
			String manifestJson = new String(Files.readAllBytes(manifestFile.toPath()), StandardCharsets.UTF_8);
			NativeMessagingManifest manifest = RuneLiteAPI.GSON.fromJson(manifestJson, NativeMessagingManifest.class);
			return testPath(new File(manifest.getPath()));
		}
		catch (Exception e)
		{
			log.debug("Failed to read manifest file", e);
			return false;
		}
	}

	private static boolean testWindowsBrowser(String browser)
	{
		String regKey = "Software\\" + browser + "\\NativeMessagingHosts\\org.keepassxc.keepassxc_browser";

		try
		{
			String manifestFile = Advapi32Util.registryGetStringValue(WinReg.HKEY_CURRENT_USER, regKey, "");
			return !Strings.isNullOrEmpty(manifestFile) && testManifest(new File(manifestFile));
		}
		catch (Win32Exception e)
		{
			log.debug("Failed to read registry key {}", regKey);
			return false;
		}
	}
}

package abex.os.keepassxc;

import javax.inject.Inject;
import javax.swing.SwingUtilities;
import com.google.inject.Provides;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@PluginDescriptor(
	name = "KeePassXC"
)
public class KeePassXcPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private KeePassXcConfig config;

	private KeePassXcPanel panel;

	@Override
	public void startUp()
	{
		panel = injector.getInstance(KeePassXcPanel.class);

		lastLoginState = -1;
		updatePanel(client.getGameState());
	}

	@Override
	public void shutDown()
	{
		panel.close();
		isTicking = false;
	}

	@Provides
	KeePassXcConfig getConfig(ConfigManager configManager)
	{
		return configManager.getConfig(KeePassXcConfig.class);
	}

	private int lastLoginState = -1;
	private boolean isTicking = false;

	@Subscribe
	public void onGameStateChanged(GameStateChanged ev)
	{
		updatePanel(ev.getGameState());
	}

	private void updatePanel(GameState gs)
	{
		SwingUtilities.invokeLater(() ->
		{
			switch (gs)
			{
				case LOGIN_SCREEN:
				case LOGIN_SCREEN_AUTHENTICATOR:
					if (!isTicking)
					{
						isTicking = true;
						clientThread.invokeLater(() ->
						{
							if (!isTicking)
							{
								SwingUtilities.invokeLater(() -> onLoginStateChanged(-1));
								return true;
							}

							int loginState = client.getLoginIndex();
							if (loginState != lastLoginState)
							{
								lastLoginState = loginState;
								SwingUtilities.invokeLater(() -> onLoginStateChanged(loginState));
							}
							return false;
						});
					}
					break;
				default:
					isTicking = false;
					panel.close();
					break;
			}
		});
	}

	private void onLoginStateChanged(int loginState)
	{
		if (loginState == 2)
		{
			panel.load();
		}
		else
		{
			panel.close();
		}
	}
}

