package com.dateOverlay;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DateOverlay
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(DateOverlayPlugin.class);
		RuneLite.main(args);
	}
}
package com.dateOverlay;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("DateOverlay")
public interface DateOverlayConfig extends Config
{
	String CONFIG_GROUP = "dateOverlay";

	@ConfigItem(
			keyName = "showTime",
			name = "Show Time",
			description = "Show hours, minutes and seconds?"
	)
	default boolean showTime()
	{
		return false;
	}

	@ConfigItem(
			keyName = "nameMonth",
			name = "Month name",
			description = "Show month as text instead of number"
	)
	default boolean nameOfMonth()
	{
		return false;
	}

	@ConfigItem(
			keyName = "shortYear",
			name = "Short Year",
			description = "Have year as 2 characters instead of 4"
	)
	default boolean shortYear()
	{
		return false;
	}

	@ConfigItem(
			keyName = "dateFormat",
			name = "Date Format",
			description = "Which format the date should be shown in"
	)
	default DateTimeFormats dateTimeFormat()
	{
		return DateTimeFormats.ddMMyyyy;
	}

	public static enum DateTimeFormats
	{
		ddMMyyyy,
		yyyyMMdd,
		MMddyyyy
	}
}

package com.dateOverlay;

import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import javax.inject.Inject;
import java.awt.*;

public class DateOverlayOverlay extends Overlay
{
    private  final DateOverlayConfig config;
    private final PanelComponent panelComponent = new PanelComponent();
    private final DateOverlayPlugin dateOverlayPlugin;

    @Inject
    public DateOverlayOverlay(DateOverlayConfig config, DateOverlayPlugin dateOverlayPlugin)
    {
        setPosition(OverlayPosition.TOP_CENTER);
        this.config = config;
        this.dateOverlayPlugin = dateOverlayPlugin;
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        panelComponent.getChildren().clear();

        // Build overlay title
        panelComponent.getChildren().add(TitleComponent.builder()
                .text(dateOverlayPlugin.currentDateTime)
                .color(Color.white)
                .build());

        //Set panel size
        Dimension dim = new Dimension();
        float charMultiplier = dateOverlayPlugin.currentDateTime.length() > 10 ? 7.5f : 9;
        dim.setSize(dateOverlayPlugin.currentDateTime.length() * charMultiplier,2);
        panelComponent.setPreferredSize(dim);

        return panelComponent.render((graphics));
    }
}

package com.dateOverlay;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.task.Schedule;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;

@Slf4j
@PluginDescriptor(
	name = "Date Overlay"
)
public class DateOverlayPlugin extends Plugin
{
	public String currentDateTime;
	@Inject
	private Client client;
	@Inject
	private DateOverlayConfig config;
	@Inject
	private DateOverlayOverlay overlay;
	@Inject
	private OverlayManager overlayManager;

	@Override
	protected void startUp() throws Exception {
		overlayManager.add(overlay);
	}

	@Schedule(period = 1, unit = ChronoUnit.SECONDS)
	public void timeSchedule() {
		if (client.getGameState() == GameState.LOGGED_IN) {
			String dateFormat = getDateFormat();
			LocalDateTime localDateTime = java.time.LocalDateTime.now();
			DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern(dateFormat);
			currentDateTime = localDateTime.format(formatter);
		}
	}

	public String getDateFormat() {
		String dateformat = "dd-MM-yyyy";

		switch (config.dateTimeFormat()) {
			case yyyyMMdd:
				dateformat = "yyyy-MM-dd";
				break;
			case MMddyyyy:
				dateformat = "MM-dd-yyyy";
				break;
		}

		if(config.nameOfMonth())
			dateformat = dateformat.replace("MM", "MMMM");
		if(config.shortYear())
			dateformat = dateformat.replace("yyyy", "yy");

		if(config.showTime())
			dateformat += " HH:mm:ss";

		return dateformat;
	}

	@Override
	protected void shutDown() {
		overlayManager.remove(overlay);
	}

	@Provides
	DateOverlayConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(DateOverlayConfig.class);
	}
}

