package com.energyinfo;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class EnergyInfoPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(EnergyInfoPlugin.class);
		RuneLite.main(args);
	}
}
package com.energyinfo;

import java.awt.Color;
import java.awt.image.BufferedImage;

import net.runelite.api.Client;
import net.runelite.api.Varbits;
import net.runelite.client.ui.overlay.infobox.InfoBox;
import net.runelite.client.ui.overlay.infobox.InfoBoxPriority;

class EnergyInfoBox extends InfoBox
{
    private static final Color STAMINA_ACTIVE = new Color(0, 255, 0, 255);
    private static final Color STAMINA_INACTIVE = new Color(255, 255, 255, 220);
    private static final Color BELOW_THRESHOLD = new Color(255, 0, 0, 220);

    private final EnergyInfoPlugin plugin;
    private final EnergyInfoConfig config;
    private final Client client;


    EnergyInfoBox(BufferedImage image, EnergyInfoPlugin plugin, Client client, EnergyInfoConfig config)
    {
        super(image, plugin);
        this.plugin = plugin;
        this.config = config;
        this.client = client;
        setTooltip("Run energy");
        setPriority(InfoBoxPriority.HIGH);
    }

    public Integer getRunEnergyPercentage()
    {
        return (int) (client.getEnergy() / 100);
    }

    @Override
    public String getText()
    {
        return String.valueOf(getRunEnergyPercentage()) + '%';
    }

    @Override
    public Color getTextColor()
    {
        if (client.getVarbitValue(Varbits.RUN_SLOWED_DEPLETION_ACTIVE) != 0)
        {
            return STAMINA_ACTIVE;
        }
        if (config.lowEnergyThreshold() > 0 & getRunEnergyPercentage() < config.lowEnergyThreshold())
        {
            return BELOW_THRESHOLD;
        }
        else
        {
            return STAMINA_INACTIVE;
        }
    }

    @Override
    public boolean render()
    {
        return config.displayInfobox();
    }

}
package com.energyinfo;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("energyinfo")
public interface EnergyInfoConfig extends Config
{
	@ConfigItem(
		keyName = "displayInfobox",
		name = "Display Infobox",
		description = "Display run energy information as an infobox."
	)
	default boolean displayInfobox()
	{
		return true;
	}

	@ConfigItem(
			keyName = "lowEnergyThreshold",
			name = "Low Energy Threshold",
			description = "Threshold for low run energy."
	)
	default int lowEnergyThreshold()
	{
		return 0;
	}
}

package com.energyinfo;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Skill;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.SkillIconManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;

@Slf4j
@PluginDescriptor(
	name = "Energy Info"
)
public class EnergyInfoPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private InfoBoxManager infoBoxManager;

	@Inject
	private SkillIconManager skillIconManager;

	@Inject
	private EnergyInfoConfig config;

	@Override
	protected void startUp() throws Exception
	{
		infoBoxManager.addInfoBox(new EnergyInfoBox(skillIconManager.getSkillImage(Skill.AGILITY), this, client, config));
	}

	@Override
	protected void shutDown() throws Exception
	{
		infoBoxManager.removeIf(t -> t instanceof EnergyInfoBox);
	}


	@Provides
	EnergyInfoConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(EnergyInfoConfig.class);
	}
}

