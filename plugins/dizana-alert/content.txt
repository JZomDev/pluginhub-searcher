package com.dizanaalert;

import java.awt.Color;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Keybind;
import net.runelite.client.config.Units;

@ConfigGroup("dizanaalert")
public interface DizanaAlertConfig extends Config
{

	@Alpha
	@ConfigItem(
			keyName = "Color",
			name = "Notificatin Color",
			description = "The background color for the notification.",
			position = 6
	)
	default Color Color() { return new Color(255, 0, 0, 150); }

}
package com.dizanaalert;
import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;


public class DizanaAlertOverlay extends OverlayPanel{

    private final DizanaAlertConfig config;
    private final Client client;

    @Inject
    private DizanaAlertOverlay( DizanaAlertConfig config, Client client)
    {
        this.config = config;
        this.client = client;
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        panelComponent.getChildren().clear();
        panelComponent.getChildren().add((LineComponent.builder())
                .left("QUIVER SLOT EMPTY")
                .build());
        panelComponent.setPreferredSize(new Dimension(graphics.getFontMetrics().stringWidth("QUIVER SLOT EMPTY") + 10, 0));
        panelComponent.setBackgroundColor(config.Color());
        setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
        return panelComponent.render(graphics);
    }
}

package com.dizanaalert;

import com.google.inject.Provides;
import java.time.Duration;
import java.time.Instant;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.MenuOptionClicked;
import net.runelite.api.widgets.Widget;
import net.runelite.client.Notifier;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;
import net.runelite.client.util.HotkeyListener;
import net.runelite.client.game.ItemManager;
import net.runelite.api.events.VarbitChanged;

@Slf4j
@PluginDescriptor(
		name = "Dizana Alert",
		description = "Alerts players if the quiver slot is empty",
		tags = {"quiver","empty","alert","ammo"}
)
public class DizanaAlertPlugin extends Plugin
{

	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ItemManager itemManager;

	@Inject
	private DizanaAlertConfig config;

	@Inject
	private DizanaAlertOverlay overlay;


	@Override
	protected void startUp() throws Exception
	{
		checkQuiver();
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
	}


	@Subscribe
	public void onVarbitChanged(VarbitChanged event)
	{
		if (event.getVarpId() == VarPlayer.DIZANAS_QUIVER_ITEM_COUNT || event.getVarpId() == VarPlayer.DIZANAS_QUIVER_ITEM_ID)
		{
			checkQuiver();
		}
	}




	private void checkQuiver()
	{


		final int quiverAmmoId = client.getVarpValue(VarPlayer.DIZANAS_QUIVER_ITEM_ID);
		final int quiverAmmoCount = client.getVarpValue(VarPlayer.DIZANAS_QUIVER_ITEM_COUNT);
		if (quiverAmmoId == -1 || quiverAmmoCount == 0)
		{
			overlayManager.add(overlay);
		}
		else {
			overlayManager.remove(overlay);
		}

	}

	@Provides
	DizanaAlertConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(DizanaAlertConfig.class);
	}

}
package com.dizanaalert;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DizanaAlertPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(DizanaAlertPlugin.class);
		RuneLite.main(args);
	}
}
