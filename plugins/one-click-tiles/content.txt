package com.oneclick;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class OneClickPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(OneClickPlugin.class);
		RuneLite.main(args);
	}
}
package com.oneclick;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;

public class Util {
    public static byte[] readAllBytes(InputStream in) throws IOException {
        ByteArrayOutputStream result = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];

        while (true) {
            int read = in.read(buffer, 0, buffer.length);

            if (read == -1) {
                return result.toByteArray();
            }

            result.write(buffer, 0, read);
        }
    }
}
package com.oneclick;

import com.google.common.base.Strings;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.inject.Provides;

import javax.inject.Inject;

import com.oneclick.pathfinder.CollisionMap;
import com.oneclick.pathfinder.Pathfinder;
import com.oneclick.pathfinder.SplitFlagMap;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.io.IOException;
import java.io.UncheckedIOException;
import java.nio.charset.StandardCharsets;
import java.util.*;
import java.util.stream.Collectors;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

@Slf4j
@PluginDescriptor(
        name = "One Click Tiles",
        description = "Highlight one-click-able tiles in Tileman Mode",
        tags = {"overlay", "tiles", "tileman"}
)
public class OneClickPlugin extends Plugin {
    private static final String CONFIG_GROUP = "tilemanMode";
    private static final String REGION_PREFIX = "region_";
    private static final Gson GSON = new Gson();

    public static final int MAX_DRAW_DISTANCE = 32;

    @Inject
    private Client client;

    @Inject
    private OneClickConfig config;

    @Inject
    private ConfigManager configManager;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private OneClickOverlay overlay;

    private final List<WorldPoint> points = new ArrayList<>();
    public final Set<WorldPoint> oneClickTiles = new HashSet<>();
    private Pathfinder pathfinder;

    private LocalPoint lastTile;

    @Override
    protected void startUp() throws Exception {
        overlayManager.add(this.overlay);

        Map<SplitFlagMap.Position, byte[]> compressedRegions = new HashMap<>();
        HashMap<WorldPoint, List<WorldPoint>> transports = new HashMap<>();
        try (ZipInputStream in = new ZipInputStream(OneClickPlugin.class.getResourceAsStream("/collision-map.zip"))) {
            ZipEntry entry;
            while ((entry = in.getNextEntry()) != null) {
                String[] n = entry.getName().split("_");

                compressedRegions.put(
                        new SplitFlagMap.Position(Integer.parseInt(n[0]), Integer.parseInt(n[1])),
                        Util.readAllBytes(in)
                );
            }
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }

        try {
            String s = new String(Util.readAllBytes(OneClickPlugin.class.getResourceAsStream("/transports.txt")), StandardCharsets.UTF_8);
            Scanner scanner = new Scanner(s);
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();

                if (line.startsWith("#") || line.isEmpty()) {
                    continue;
                }

                String[] l = line.split(" ");
                WorldPoint a = new WorldPoint(Integer.parseInt(l[0]), Integer.parseInt(l[1]), Integer.parseInt(l[2]));
                WorldPoint b = new WorldPoint(Integer.parseInt(l[3]), Integer.parseInt(l[4]), Integer.parseInt(l[5]));
                transports.computeIfAbsent(a, k -> new ArrayList<>()).add(b);
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        CollisionMap map = new CollisionMap(64, compressedRegions);
        pathfinder = new Pathfinder(map, transports);

        this.loadPoints();
    }

    @Override
    protected void shutDown() throws Exception {
        overlayManager.remove(this.overlay);
        this.points.clear();
    }

    @Subscribe
    public void onGameTick(GameTick tick) {
        LocalPoint currentPos = LocalPoint.fromWorld(client, client.getLocalPlayer().getWorldLocation());
        if (!currentPos.equals(lastTile)) {
            this.updateOneClickTiles();
            lastTile = currentPos;
        }
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged gameStateChanged) {
        if (gameStateChanged.getGameState() == GameState.LOGGED_IN) {
            this.loadPoints();
            this.updateOneClickTiles();
        }
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged configChanged) {
        if (!configChanged.getGroup().equals(CONFIG_GROUP)) {
            return;
        }

        this.loadPoints();
        this.updateOneClickTiles();
    }

    private void loadPoints() {
        points.clear();

        int[] regions = client.getMapRegions();

        if (regions == null) {
            return;
        }

        for (int regionId : regions) {
            Collection<WorldPoint> worldPoint = translateToWorldPoint(getTiles(regionId));
            points.addAll(worldPoint);
        }
    }

    private Collection<TilemanModeTile> getConfiguration(String configGroup, String key) {
        String json = configManager.getConfiguration(configGroup, key);

        if (Strings.isNullOrEmpty(json)) {
            return Collections.emptyList();
        }

        return GSON.fromJson(json, new TypeToken<List<TilemanModeTile>>() {
        }.getType());
    }

    Collection<TilemanModeTile> getTiles(int regionId) {
        return getConfiguration(CONFIG_GROUP, REGION_PREFIX + regionId);
    }

    private Collection<WorldPoint> translateToWorldPoint(Collection<TilemanModeTile> points) {
        if (points.isEmpty()) {
            return Collections.emptyList();
        }

        return points.stream()
                .map(point -> WorldPoint.fromRegion(point.getRegionId(), point.getRegionX(), point.getRegionY(), point.getZ()))
                .flatMap(worldPoint ->
                {
                    final Collection<WorldPoint> localWorldPoints = WorldPoint.toLocalInstance(client, worldPoint);
                    return localWorldPoints.stream();
                })
                .collect(Collectors.toList());
    }

    private void updateOneClickTiles() {
        WorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();
        if (playerLocation == null) {
            return;
        }

        if (this.points.isEmpty()) {
            return;
        }

        Set<WorldPoint> localPoints = new HashSet<>();
        for (final WorldPoint point : this.points) {
            if (point.distanceTo(playerLocation) < MAX_DRAW_DISTANCE) {
                localPoints.add(point);
            }
        }

        oneClickTiles.clear();
        for (final WorldPoint localPoint : localPoints) {
            Pathfinder.Path path = pathfinder.new Path(playerLocation, localPoint);
            if (localPoints.containsAll(path.getPath())) {
                oneClickTiles.add(localPoint);
            }
        }
    }

    @Provides
    OneClickConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(OneClickConfig.class);
    }
}

/*
 * Copyright (c) 2018, TheLonelyDev <https://github.com/TheLonelyDev>
 * Copyright (c) 2018, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.oneclick;

import lombok.Value;

/**
 * Used for serialization of ground marker points.
 */
@Value
class TilemanModeTile
{
	private int regionId;
	private int regionX;
	private int regionY;
	private int z;
}

package com.oneclick;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.*;

@ConfigGroup("oneClick")
public interface OneClickConfig extends Config {
    @ConfigItem(
            keyName = "drawBorders",
            name = "Draw one-click tile borders",
            description = "Configures whether to draw the border of one click tiles"
    )
    default boolean drawBorders() {
        return true;
    }

    @Alpha
    @ConfigItem(
            keyName = "borderColor",
            name = "Border Color",
            description = "Configures the color of the border of one click tiles"
    )
    default Color borderColor() {
        return Color.BLUE;
    }

    @ConfigItem(
            keyName = "drawFill",
            name = "Fill one-click tiles",
            description = "Configures whether to fill one click tiles"
    )
    default boolean drawFill() {
        return false;
    }

    @Alpha
    @ConfigItem(
            keyName = "fillColor",
            name = "Fill Color",
            description = "Configures the color of the fill of one click tiles"
    )
    default Color fillColor() {
        return new Color(82, 82, 255, 64);
    }
}

package com.oneclick;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.*;

import javax.inject.Inject;
import java.awt.*;

@Slf4j
public class OneClickOverlay extends Overlay {
    private final Client client;
    private final OneClickPlugin plugin;

    @Inject
    private OneClickConfig config;

    @Inject
    private OneClickOverlay(Client client, OneClickConfig config, OneClickPlugin plugin) {
        this.client = client;
        this.plugin = plugin;
        this.config = config;
        setPosition(OverlayPosition.DYNAMIC);
        setPriority(OverlayPriority.MED);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        for (final WorldPoint point : plugin.oneClickTiles) {
            if (point.getPlane() != client.getPlane()) {
                continue;
            }

            drawTile(graphics, point);
        }
        return null;
    }

    private void drawTile(Graphics2D graphics, WorldPoint point) {
        WorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();

        if (point.distanceTo(playerLocation) >= OneClickPlugin.MAX_DRAW_DISTANCE) {
            return;
        }

        LocalPoint lp = LocalPoint.fromWorld(client, point);
        if (lp == null) {
            return;
        }

        Polygon poly = Perspective.getCanvasTilePoly(client, lp);
        if (poly == null) {
            return;
        }

        if (config.drawBorders()) {
            OverlayUtil.renderPolygon(graphics, poly, config.borderColor());
        }

        if (config.drawFill()) {
            graphics.setColor(config.fillColor());
            graphics.fill(poly);
        }
    }
}

package com.oneclick.pathfinder;

import java.util.Map;

public class CollisionMap extends SplitFlagMap {
    public CollisionMap(int regionSize, Map<Position, byte[]> compressedRegions) {
        super(regionSize, compressedRegions, 2);
    }

    public boolean n(int x, int y, int z) {
        return get(x, y, z, 0);
    }

    public boolean s(int x, int y, int z) {
        return n(x, y - 1, z);
    }

    public boolean e(int x, int y, int z) {
        return get(x, y, z, 1);
    }

    public boolean w(int x, int y, int z) {
        return e(x - 1, y, z);
    }

    public boolean ne(int x, int y, int z) {
        return n(x, y, z) && e(x, y + 1, z) && e(x, y, z) && n(x + 1, y, z);
    }

    public boolean nw(int x, int y, int z) {
        return n(x, y, z) && w(x, y + 1, z) && w(x, y, z) && n(x - 1, y, z);
    }

    public boolean se(int x, int y, int z) {
        return s(x, y, z) && e(x, y - 1, z) && e(x, y, z) && s(x + 1, y, z);
    }

    public boolean sw(int x, int y, int z) {
        return s(x, y, z) && w(x, y - 1, z) && w(x, y, z) && s(x - 1, y, z);
    }
}
package com.oneclick.pathfinder;

import com.google.common.cache.CacheBuilder;
import com.google.common.cache.CacheLoader;
import com.google.common.cache.LoadingCache;
import com.google.common.cache.Weigher;
import com.google.common.util.concurrent.UncheckedExecutionException;
import com.oneclick.Util;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UncheckedIOException;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.zip.GZIPInputStream;

public abstract class SplitFlagMap {
    private static final int MAXIMUM_SIZE = 20 * 1024 * 1024;
    private final int regionSize;
    private final LoadingCache<Position, FlagMap> regionMaps;
    private final int flagCount;

    public SplitFlagMap(int regionSize, Map<Position, byte[]> compressedRegions, int flagCount) {
        this.regionSize = regionSize;
        this.flagCount = flagCount;
        regionMaps = CacheBuilder
                .newBuilder()
                .weigher((Weigher<Position, FlagMap>) (k, v) -> v.flags.size() / 8)
                .maximumWeight(MAXIMUM_SIZE)
                .build(CacheLoader.from(position -> {
                    byte[] compressedRegion = compressedRegions.get(position);

                    if (compressedRegion == null) {
                        return new FlagMap(position.x * regionSize, position.y * regionSize, (position.x + 1) * regionSize - 1, (position.y + 1) * regionSize - 1, this.flagCount);
                    }

                    try (InputStream in = new GZIPInputStream(new ByteArrayInputStream(compressedRegion))) {
                        return new FlagMap(Util.readAllBytes(in), this.flagCount);
                    } catch (IOException e) {
                        throw new UncheckedIOException(e);
                    }
                }));
    }

    public boolean get(int x, int y, int z, int flag) {
        try {
            return regionMaps.get(new Position(x / regionSize, y / regionSize)).get(x, y, z, flag);
        } catch (ExecutionException e) {
            throw new UncheckedExecutionException(e);
        }
    }

    public static class Position {
        public final int x;
        public final int y;

        public Position(int x, int y) {
            this.x = x;
            this.y = y;
        }

        @Override
        public boolean equals(Object o) {
            return o instanceof Position &&
                    ((Position) o).x == x &&
                    ((Position) o).y == y;
        }

        @Override
        public int hashCode() {
            return x * 31 + y;
        }

        @Override
        public String toString() {
            return "(" + x + ", " + y + ")";
        }
    }
}
package com.oneclick.pathfinder;

import java.nio.ByteBuffer;
import java.util.BitSet;

public class FlagMap {
    public static final int PLANE_COUNT = 4;
    protected final BitSet flags;
    public final int minX;
    public final int minY;
    public final int maxX;
    public final int maxY;
    private final int width;
    private final int height;
    private final int flagCount;

    public FlagMap(int minX, int minY, int maxX, int maxY, int flagCount) {
        this.minX = minX;
        this.minY = minY;
        this.maxX = maxX;
        this.maxY = maxY;
        this.flagCount = flagCount;
        width = (maxX - minX + 1);
        height = (maxY - minY + 1);
        flags = new BitSet(width * height * PLANE_COUNT * flagCount);
    }

    public FlagMap(byte[] bytes, int flagCount) {
        ByteBuffer buffer = ByteBuffer.wrap(bytes);
        minX = buffer.getInt();
        minY = buffer.getInt();
        maxX = buffer.getInt();
        maxY = buffer.getInt();
        this.flagCount = flagCount;
        width = (maxX - minX + 1);
        height = (maxY - minY + 1);
        flags = BitSet.valueOf(buffer);
    }

    public byte[] toBytes() {
        byte[] bytes = new byte[16 + flags.size()];
        ByteBuffer buffer = ByteBuffer.wrap(bytes);
        buffer.putInt(minX);
        buffer.putInt(minY);
        buffer.putInt(maxX);
        buffer.putInt(maxY);
        buffer.put(flags.toByteArray());
        return bytes;
    }

    public boolean get(int x, int y, int z, int flag) {
        if (x < minX || x > maxX || y < minY || y > maxY || z < 0 || z > PLANE_COUNT - 1) {
            return false;
        }

        return flags.get(index(x, y, z, flag));
    }

    public void set(int x, int y, int z, int flag, boolean value) {
        flags.set(index(x, y, z, flag), value);
    }

    private int index(int x, int y, int z, int flag) {
        if (x < minX || x > maxX || y < minY || y > maxY || z < 0 || z > PLANE_COUNT - 1 || flag < 0 || flag > flagCount - 1) {
            throw new IndexOutOfBoundsException(x + " " + y + " " + z);
        }

        return (z * width * height + (y - minY) * width + (x - minX)) * flagCount + flag;
    }
}
package com.oneclick.pathfinder;

import net.runelite.api.coords.WorldPoint;

import java.util.*;

public class Pathfinder {

    public final CollisionMap map;
    public final Map<WorldPoint, List<WorldPoint>> transports;

    public Pathfinder(CollisionMap map, Map<WorldPoint, List<WorldPoint>> transports) {
        this.map = map;
        this.transports = transports;
    }

    public class Path {
        private final Node start;
        private final WorldPoint target;
        private final List<Node> boundary = new LinkedList<>();
        private final Set<WorldPoint> visited = new HashSet<>();

        public Node nearest;
        private Set<WorldPoint> path = new HashSet<>();

        public boolean loading;

        public Path(WorldPoint start, WorldPoint target) {
            this.target = target;
            this.start = new Node(start, null);
            this.nearest = null;
            this.loading = true;

            this.calculate();
        }

        private void addNeighbors(Node node) {
            if (map.w(node.position.getX(), node.position.getY(), node.position.getPlane())) {
                addNeighbor(node, new WorldPoint(node.position.getX() - 1, node.position.getY(), node.position.getPlane()));
            }

            if (map.e(node.position.getX(), node.position.getY(), node.position.getPlane())) {
                addNeighbor(node, new WorldPoint(node.position.getX() + 1, node.position.getY(), node.position.getPlane()));
            }

            if (map.s(node.position.getX(), node.position.getY(), node.position.getPlane())) {
                addNeighbor(node, new WorldPoint(node.position.getX(), node.position.getY() - 1, node.position.getPlane()));
            }

            if (map.n(node.position.getX(), node.position.getY(), node.position.getPlane())) {
                addNeighbor(node, new WorldPoint(node.position.getX(), node.position.getY() + 1, node.position.getPlane()));
            }

            if (map.sw(node.position.getX(), node.position.getY(), node.position.getPlane())) {
                addNeighbor(node, new WorldPoint(node.position.getX() - 1, node.position.getY() - 1, node.position.getPlane()));
            }

            if (map.se(node.position.getX(), node.position.getY(), node.position.getPlane())) {
                addNeighbor(node, new WorldPoint(node.position.getX() + 1, node.position.getY() - 1, node.position.getPlane()));
            }

            if (map.nw(node.position.getX(), node.position.getY(), node.position.getPlane())) {
                addNeighbor(node, new WorldPoint(node.position.getX() - 1, node.position.getY() + 1, node.position.getPlane()));
            }

            if (map.ne(node.position.getX(), node.position.getY(), node.position.getPlane())) {
                addNeighbor(node, new WorldPoint(node.position.getX() + 1, node.position.getY() + 1, node.position.getPlane()));
            }

            for (WorldPoint transport : transports.getOrDefault(node.position, new ArrayList<>())) {
                addNeighbor(node, transport);
            }
        }

        public Set<WorldPoint> currentBest() {
            return nearest == null ? null : nearest.path();
        }

        public Set<WorldPoint> getPath() {
            return this.path;
        }

        public WorldPoint getStart() {
            return start.position;
        }

        public WorldPoint getTarget() {
            return target;
        }

        private void addNeighbor(Node node, WorldPoint neighbor) {
            if (!visited.add(neighbor)) {
                return;
            }

            boundary.add(new Node(neighbor, node));
        }

        public void calculate() {
            boundary.add(start);

            int bestDistance = Integer.MAX_VALUE;

            while (!boundary.isEmpty()) {
                Node node = boundary.remove(0);

                if (node.position.equals(target)) {
                    this.path = node.path();
                    this.loading = false;
                    return;
                }

                int distance = node.position.distanceTo(target);
                if (nearest == null || distance < bestDistance) {
                    nearest = node;
                    bestDistance = distance;
                }

                addNeighbors(node);
            }

            if (nearest != null) {
                this.path = nearest.path();
            }

            this.loading = false;
        }
    }

    private static class Node {
        public final WorldPoint position;
        public final Node previous;

        public Node(WorldPoint position, Node previous) {
            this.position = position;
            this.previous = previous;
        }

        public Set<WorldPoint> path() {
            Set<WorldPoint> path = new HashSet<>();
            Node node = this;

            while (node != null) {
                path.add(node.position);
                node = node.previous;
            }

            return path;
        }
    }
}
