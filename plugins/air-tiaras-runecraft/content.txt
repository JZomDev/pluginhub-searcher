package com.airtiarasrunecraft;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AirTiarasRunecraftPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AirTiarasRunecraftPlugin.class);
		RuneLite.main(args);
	}
}
package com.airtiarasrunecraft;

import com.google.inject.Provides;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Player;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.StatChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.xptracker.XpTrackerPlugin;
import net.runelite.client.plugins.xptracker.XpTrackerService;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;

import java.util.function.Predicate;

import static net.runelite.api.Skill.*;

@PluginDescriptor(
        name = "Air Tiaras Runecraft"
)
@PluginDependency(XpTrackerPlugin.class)
@Slf4j
public class AirTiarasRunecraftPlugin extends Plugin {
    private final WorldPoint startLocation = new WorldPoint(2933, 3288, 0);
    private final WorldPoint stopLocation = new WorldPoint(2933, 3289, 0);
    @Inject
    private Client client;
    @Inject
    private AirTiarasRunecraftConfig config;
    @Inject
    private OverlayManager overlayManager;
    @Inject
    private AirTiarasRunecraftOverlay airTiarasRunecraftOverlay;
    @Getter
    @Setter
    private AirTiarasRunecraftSession session;
    @Inject
    private XpTrackerService xpTrackerService;
    private boolean lapStarted = false;
    @Getter
    @Setter
    private Stopwatch stopWatch;
    private boolean hasGainedRcXp = false;
    private boolean hasGainedMiningXp = false;
    private boolean hasGainedSmithingXp = false;
    private boolean hasGainedCraftingXp = false;
    private WorldPoint lastLocation;
    private boolean isFirstGameTick = true;

    @Provides
    AirTiarasRunecraftConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(AirTiarasRunecraftConfig.class);
    }

    @Override
    protected void startUp() throws Exception {
        resetLap();

        session = new AirTiarasRunecraftSession();
        stopWatch = new Stopwatch("Stopwatch");

        lastLocation = getPlayerLocation();
    }

    @Override
    protected void shutDown() throws Exception {
        overlayManager.remove(airTiarasRunecraftOverlay);
        session = null;
        stopWatch = null;
    }

    /**
     * Event listening every game tick.
     * @param tick
     */
    @Subscribe
    public void onGameTick(GameTick tick) {
        if(!isFirstGameTick) {
            try {
                if (isOnStopTile() && lapStarted && isValidLap()) {
                    // Stop the lap
                    stopLap();
                } else if (isOnStartTile() && !lapStarted && lastLocation.hashCode() == stopLocation.hashCode()) {
                    // Start a lap
                    startLap();
                }

                //Register last location tile of the player
                if (lastLocation != getPlayerLocation()) {
                    lastLocation = getPlayerLocation();
                }
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        } else {
            // first tick; save player location
            lastLocation = getPlayerLocation();

            isFirstGameTick = false;
        }
    }

    /**
     * Event listening to stat change.
     * @param statChanged
     */
    @Subscribe
    public void onStatChanged(StatChanged statChanged) {
        if(isFirstGameTick) {
            return;
        }

        if (statChanged.getSkill() == RUNECRAFT) {
            hasGainedRcXp = true;
        } else if(statChanged.getSkill() == MINING) {
            hasGainedMiningXp = true;
        } else if(statChanged.getSkill() == CRAFTING) {
            hasGainedCraftingXp = true;
        } else if(statChanged.getSkill() == SMITHING) {
            hasGainedSmithingXp = true;
        }
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged gameStateChanged)
    {
        if (
                gameStateChanged.getGameState() == GameState.LOGGED_IN ||
                gameStateChanged.getGameState() == GameState.HOPPING
        ) {
            isFirstGameTick = true;
        }
    }

    private boolean isOnStartTile() {
        return startLocation.hashCode() == getPlayerLocation().hashCode();
    }

    private boolean isOnStopTile() {
        return stopLocation.hashCode() == getPlayerLocation().hashCode();
    }

    private boolean isValidLap() {
        return hasGainedRcXp && hasGainedCraftingXp && hasGainedSmithingXp && hasGainedMiningXp;
    }

    private WorldPoint getPlayerLocation() {
        Player local = client.getLocalPlayer();

        if (local == null) {
            return null;
        }

        WorldPoint location = local.getWorldLocation();

        return location;
    }

    private void startLap() {
        // Reset lap attributes
        resetLap();

        // Start timer
        stopWatch.start();

        // Set lap started
        lapStarted = true;

        // Update laps until goal
        session.calculateLapsUntilGoal(client, xpTrackerService);

        // Add overlay if it doesn't already exist
        if(!overlayManager.anyMatch(overlay -> overlay.getName() == airTiarasRunecraftOverlay.getName())) {
            overlayManager.add(airTiarasRunecraftOverlay);
        }
    }

    private void stopLap() {
        // End timer
        stopWatch.pause();

        // Register lap
        stopWatch.lap();

        // Increment lap count
        session.incrementLapCount(client, xpTrackerService);

        // Clear lap data
        resetLap();
    }

    private void resetLap() {
        lapStarted = false;
        hasGainedRcXp = false;
        hasGainedCraftingXp = false;
        hasGainedSmithingXp = false;
        hasGainedMiningXp = false;
    }
}

package com.airtiarasrunecraft;

import java.time.Instant;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
abstract class Clock
{
    protected String name;

    // last updated time (recorded as seconds since epoch)
    protected long lastUpdate;

    // whether the clock is currently running
    protected boolean active;

    Clock(String name)
    {
        this.name = name;
        this.lastUpdate = Instant.now().getEpochSecond();
        this.active = false;
    }

    abstract long getDisplayTime();

    abstract void setDuration(long duration);

    abstract boolean start();

    abstract boolean pause();

    String secondsToString(int pTime) {
        return String.format("%02d:%02d", pTime / 60, pTime % 60);
    }

    abstract void reset();
}

package com.airtiarasrunecraft;

import com.google.common.collect.EvictingQueue;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Experience;
import net.runelite.api.Skill;
import net.runelite.client.plugins.xptracker.XpTrackerService;
import java.time.Duration;
import java.time.Instant;

@Getter
@Setter
@Slf4j
class AirTiarasRunecraftSession {
    private Instant lastLapCompleted;
    private int totalLaps;
    private int lapsTillGoal;

    void incrementLapCount(Client client, XpTrackerService xpTrackerService) {
        ++totalLaps;

        calculateLapsUntilGoal(client, xpTrackerService);
    }

    void calculateLapsUntilGoal(Client client, XpTrackerService xpTrackerService)
    {
        final int currentExp = client.getSkillExperience(Skill.RUNECRAFT);
        final int rcLvl = client.getBoostedSkillLevel(Skill.RUNECRAFT);
        int goalXp = xpTrackerService.getEndGoalXp(Skill.RUNECRAFT);

        // Set goal as next level
        if (goalXp == 0) {
            goalXp = Experience.getXpForLevel(rcLvl + 1);
        }

        final int goalRemainingXp = goalXp - currentExp;
        double courseTotalExp = 650; //hardcoded 26 air tiaras xp lap

        lapsTillGoal = goalRemainingXp > 0 ? (int) Math.ceil(goalRemainingXp / courseTotalExp) : 0;
    }

    void resetLapCount() {
        totalLaps = 0;
        lapsTillGoal = 0;
    }
}
package com.airtiarasrunecraft;

import java.time.Instant;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
@AllArgsConstructor
class Stopwatch extends Clock
{
    // the number of seconds elapsed, as of last updated time
    private long elapsed = 0;

    // a list of lap times (recorded as seconds since epoch)
    private List<Long> laps = new ArrayList<>();

    Stopwatch(String name)
    {
        super(name);
    }

    @Override
    long getDisplayTime()
    {
        if (!active)
        {
            return elapsed;
        }

        return Math.max(0, elapsed + (Instant.now().getEpochSecond() - lastUpdate));
    }

    @Override
    void setDuration(long duration)
    {
        elapsed = duration;
    }

    @Override
    boolean start()
    {
        if (!active)
        {
            lastUpdate = Instant.now().getEpochSecond();
            active = true;
            return true;
        }

        return false;
    }

    @Override
    boolean pause()
    {
        if (active)
        {
            active = false;
            elapsed = Math.max(0, elapsed + (Instant.now().getEpochSecond() - lastUpdate));
            lastUpdate = Instant.now().getEpochSecond();
            return true;
        }

        return false;
    }

    void lap()
    {
        laps.add(getDisplayTime());
        elapsed = 0;
        lastUpdate = Instant.now().getEpochSecond();
    }

    String getFormatedBestLap()
    {
        if(laps == null) {
            return "--";
        }

        return secondsToString(Math.toIntExact(laps.get(laps.indexOf(Collections.min(laps)))));
    }

    @Override
    void reset()
    {
        active = false;
        elapsed = 0;
        laps.clear();
        lastUpdate = Instant.now().getEpochSecond();
    }
}

package com.airtiarasrunecraft;

import lombok.extern.slf4j.Slf4j;

import java.awt.*;
import java.util.EnumSet;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.WorldType;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;
import net.runelite.client.ui.overlay.components.LineComponent;

@Slf4j
class AirTiarasRunecraftOverlay extends Overlay
{
    private final Client client;
    private final AirTiarasRunecraftPlugin plugin;
    private final AirTiarasRunecraftConfig config;
    private final PanelComponent panelComponent = new PanelComponent();

    @Inject
    private AirTiarasRunecraftOverlay(AirTiarasRunecraftPlugin plugin, Client client, AirTiarasRunecraftConfig config)
    {
        super(plugin);
        setPosition(OverlayPosition.TOP_LEFT);
        this.client = client;
        this.config = config;
        this.plugin = plugin;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        AirTiarasRunecraftSession session = plugin.getSession();
        Stopwatch stopwatch = plugin.getStopWatch();

        panelComponent.getChildren().clear();
        String overlayTitle = "Air Tiaras Runecraft:";

        // Build overlay title
        panelComponent.getChildren().add(TitleComponent.builder()
                .text(overlayTitle)
                .build());

        // Set the size of the overlay (width)
        panelComponent.setPreferredSize(new Dimension(
                graphics.getFontMetrics().stringWidth(overlayTitle) + 10,
                0));

        if (config.showCurrentWorld()) {
            EnumSet<WorldType> worldType = client.getWorldType();
            Color currentWorldColor;

            if (worldType.contains(WorldType.MEMBERS))
            {
                currentWorldColor = Color.RED;
            }
            else
            {
                currentWorldColor = Color.WHITE;
            }

            panelComponent.getChildren().add(LineComponent.builder()
                    .left("World:")
                    .right(Integer.toString(client.getWorld()))
                    .rightColor(currentWorldColor)
                    .build());
        }

        if (config.showLapTime()) {
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Lap time:")
                    .right(stopwatch.secondsToString((int) stopwatch.getDisplayTime()))
                    .build());
        }

        if (config.showBestLap()) {
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Best lap:")
                    .right((!stopwatch.getLaps().isEmpty()) ? stopwatch.getFormatedBestLap() : "--")
                    .rightColor((!stopwatch.getLaps().isEmpty()) ? Color.GREEN : Color.WHITE)
                    .build());
        }

        if (config.lapsToLevel() && session.getLapsTillGoal() > 0)
        {
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Laps until goal:")
                    .right(Integer.toString(session.getLapsTillGoal()))
                    .build());
        }

        if (config.showTotalLaps())
        {
        panelComponent.getChildren().add(LineComponent.builder()
                .left("Total laps:")
                .right(Integer.toString(session.getTotalLaps()))
                .build());
        }

        return panelComponent.render(graphics);
    }
}
package com.airtiarasrunecraft;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("airtiarasrunecraft")
public interface AirTiarasRunecraftConfig extends Config
{
	@ConfigItem(
			keyName = "showCurrentWorld",
			name = "Show Current World",
			description = "Enable/disable the current world",
			position = 1
	)
	default boolean showCurrentWorld()
	{
		return true;
	}
	@ConfigItem(
			keyName = "showLapTime",
			name = "Show Lap Time",
			description = "Enable/disable the lap time",
			position = 1
	)
	default boolean showLapTime()
	{
		return true;
	}
	@ConfigItem(
			keyName = "showBestLap",
			name = "Show Best Lap Time",
			description = "Enable/disable the best lap time",
			position = 1
	)
	default boolean showBestLap()
	{
		return true;
	}
	@ConfigItem(
			keyName = "showTotalLaps",
			name = "Show Total Laps Count",
			description = "Enable/disable the lap counter",
			position = 1
	)
	default boolean showTotalLaps()
	{
		return true;
	}

	@ConfigItem(
			keyName = "lapsToLevel",
			name = "Show Laps Until Goal",
			description = "Show number of laps remaining until next goal is reached.",
			position = 1
	)
	default boolean lapsToLevel()
	{
		return true;
	}
}

