package com.mcajben.animation_skipper;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AnimationSkipperPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AnimationSkipperPlugin.class);
		RuneLite.main(args);
	}
}
package com.mcajben.animation_skipper;

import com.google.inject.Inject;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

import java.awt.*;
import java.time.Duration;
import java.time.Instant;

public class AnimationSkipperOverlay extends Overlay {
    private final Client client;
    private final AnimationSkipperConfig config;
    private boolean isVisible = false;
    private Instant lastFadeStart = Instant.MIN;
    private Duration lastFadeDuration = Duration.ZERO;
    private String displayText = "";

    @Inject
    private AnimationSkipperOverlay(AnimationSkipperPlugin plugin, Client client, AnimationSkipperConfig config) {
        super(plugin);
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ALWAYS_ON_TOP);
        this.client = client;
        this.config = config;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        final Instant now = Instant.now();
        float fadeProgress = getFadeProgress(now, lastFadeStart, lastFadeDuration);
        final float opacity = getOpacity(isVisible, fadeProgress);

        if (opacity > 0.01f) {
            final Color overlayColor = config.overlayColor();
            final Color textColor = config.textColor();
            final int textSize = config.textSize();
            graphics.setColor(new Color(overlayColor.getRed(), overlayColor.getGreen(), overlayColor.getBlue(), (int) (overlayColor.getAlpha() * opacity)));
            graphics.fill(new Rectangle(client.getCanvas().getSize()));

            graphics.setFont(new Font("Times New Roman", Font.BOLD, textSize));

            if (textColor.getAlpha() == 0) {
                // Use transparent text
                graphics.setComposite(AlphaComposite.DstOut);
                graphics.setColor(Color.white);
            } else {
                graphics.setColor(textColor);
            }

            drawStringCentered(graphics, client.getCanvasWidth(), client.getCanvasHeight(), displayText);
        }

        return null;
    }

    public void updateVisibility(boolean visible) {
        if (visible == this.isVisible) {
            // No change to visibility
            return;
        }

        final Instant now = Instant.now();

        final Duration fadeDuration = Duration.ofMillis(config.fadeDuration());
        final Duration debounceDuration = Duration.ofMillis(config.debounceDuration());

        final float previousProgressMade = getFadeProgress(now, lastFadeStart, lastFadeDuration);

        final Duration startingFadeDuration = Duration.ofMillis((long) (fadeDuration.toMillis() * (1.0f - previousProgressMade)));

        this.isVisible = visible;
        this.lastFadeDuration = fadeDuration;
        if (!this.isVisible && previousProgressMade >= 1.0f) {
            // add debounceDuration when fading away from 100% visible
            this.lastFadeStart = now.minus(startingFadeDuration).plus(debounceDuration);
        } else {
            this.lastFadeStart = now.minus(startingFadeDuration);
        }
        if (this.isVisible && previousProgressMade >= 1.0f) {
            // reset text only when text was just invisible
            this.displayText = DisplayTextFactory.getRandomText(this.displayText);
        }
    }

    /**
     * @param fadeStart    The {@link Instant} that the fade started or should start.
     * @param fadeDuration The {@link Duration} that the fade lasts for.
     * @return Double between 0.0 inclusive and 1.0 inclusive representing the fade's progress.
     * * 0.0 means the fade either hasn't started, or has just started.
     * * 1.0 means the fade is complete.
     */
    private static float getFadeProgress(Instant now, Instant fadeStart, Duration fadeDuration) {
        final Duration difference = Duration.between(fadeStart, now);
        if (difference.isNegative()) {
            // Fade has not started yet
            return 0.0f;
        }
        if (difference.compareTo(fadeDuration) >= 0) {
            // Fade is complete
            return 1.0f;
        }
        // Fade is happening, so compute what percent of time has passed
        return ((float) difference.toMillis()) / fadeDuration.toMillis();
    }

    /**
     * @param isVisible    true if the overlay is visible
     * @param fadeProgress {@link AnimationSkipperOverlay#getFadeProgress}
     * @return Double between 0.0 inclusive and 1.0 inclusive representing the overlay's opacity.
     */
    private static float getOpacity(boolean isVisible, float fadeProgress) {
        if (isVisible) {
            return fadeProgress;
        } else {
            return 1.0f - fadeProgress;
        }
    }


    private static void drawStringCentered(Graphics2D graphics, int canvasWidth, int canvasHeight, String text) {
        final FontMetrics metrics = graphics.getFontMetrics();
        final int width = metrics.stringWidth(text);
        final int height = metrics.getHeight();
        final int x = (canvasWidth - width) / 2;
        final int y = (canvasHeight + height) / 2;
        graphics.drawString(text, x, y);
    }
}

package com.mcajben.animation_skipper;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Player;
import net.runelite.api.events.ClientTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;

@Slf4j
@PluginDescriptor(name = "Animation Skipper")
public class AnimationSkipperPlugin extends Plugin {
    @Inject
    private OverlayManager overlayManager;
    @Inject
    private Client client;
    @Inject
    private AnimationSkipperConfig config;
    @Inject
    private AnimationSkipperOverlay overlay;
    @Inject
    private AnimationCache cache;

    @Override
    protected void startUp() {
        overlayManager.add(overlay);
    }

    @Override
    protected void shutDown() {
        overlayManager.remove(overlay);
    }

    @Subscribe
    public void onClientTick(ClientTick clientTick) {
        final Player player = client.getLocalPlayer();
        if (player == null) return;

        final int playerAnimation = player.getAnimation();
        final boolean visible = cache.onClientTick(playerAnimation);
        this.overlay.updateVisibility(visible);
    }

    @Provides
    AnimationSkipperConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(AnimationSkipperConfig.class);
    }
}

package com.mcajben.animation_skipper;

import static net.runelite.api.AnimationID.*;

public class AnimationCache {

    /**
     * @return true if the user is in an animation
     */
    public boolean onClientTick(int playerAnimation) {
        switch (playerAnimation) {
            case MAGIC_LUNAR_SHARED:
            case MAGIC_LUNAR_PLANK_MAKE:
            case MAGIC_LUNAR_STRING_JEWELRY:
            case COOKING_FIRE:
            case COOKING_RANGE:
            case COOKING_WINE:
            case FIREMAKING:
            case FIREMAKING_FORESTERS_CAMPFIRE_ARCTIC_PINE:
            case FIREMAKING_FORESTERS_CAMPFIRE_BLISTERWOOD:
            case FIREMAKING_FORESTERS_CAMPFIRE_LOGS:
            case FIREMAKING_FORESTERS_CAMPFIRE_MAGIC:
            case FIREMAKING_FORESTERS_CAMPFIRE_MAHOGANY:
            case FIREMAKING_FORESTERS_CAMPFIRE_MAPLE:
            case FIREMAKING_FORESTERS_CAMPFIRE_OAK:
            case FIREMAKING_FORESTERS_CAMPFIRE_REDWOOD:
            case FIREMAKING_FORESTERS_CAMPFIRE_TEAK:
            case FIREMAKING_FORESTERS_CAMPFIRE_WILLOW:
            case FIREMAKING_FORESTERS_CAMPFIRE_YEW:
            case FISHING_BIG_NET:
            case FISHING_NET:
            case FISHING_POLE_CAST:
            case FISHING_CAGE:
            case FISHING_HARPOON:
            case FISHING_BARBTAIL_HARPOON:
            case FISHING_DRAGON_HARPOON:
            case FISHING_DRAGON_HARPOON_OR:
            case FISHING_CRYSTAL_HARPOON:
            case FISHING_INFERNAL_HARPOON:
            case FISHING_TRAILBLAZER_HARPOON:
            case FISHING_KARAMBWAN:
            case FISHING_OILY_ROD:
            case FISHING_CRUSHING_INFERNAL_EELS:
            case FISHING_CUTTING_SACRED_EELS:
            case FISHING_BAREHAND:
            case FISHING_BAREHAND_CAUGHT_SHARK_1:
            case FISHING_BAREHAND_CAUGHT_SHARK_2:
            case FISHING_BAREHAND_CAUGHT_SWORDFISH_1:
            case FISHING_BAREHAND_CAUGHT_SWORDFISH_2:
            case FISHING_BAREHAND_CAUGHT_TUNA_1:
            case FISHING_BAREHAND_CAUGHT_TUNA_2:
            case FISHING_BAREHAND_WINDUP_1:
            case FISHING_BAREHAND_WINDUP_2:
            case FISHING_PEARL_ROD:
            case FISHING_PEARL_FLY_ROD:
            case FISHING_PEARL_BARBARIAN_ROD:
            case FISHING_PEARL_ROD_2:
            case FISHING_PEARL_FLY_ROD_2:
            case FISHING_PEARL_BARBARIAN_ROD_2:
            case FISHING_PEARL_OILY_ROD:
            case FISHING_BARBARIAN_ROD:
            case MINING_BRONZE_PICKAXE:
            case MINING_IRON_PICKAXE:
            case MINING_STEEL_PICKAXE:
            case MINING_BLACK_PICKAXE:
            case MINING_MITHRIL_PICKAXE:
            case MINING_ADAMANT_PICKAXE:
            case MINING_RUNE_PICKAXE:
            case MINING_GILDED_PICKAXE:
            case MINING_DRAGON_PICKAXE:
            case MINING_DRAGON_PICKAXE_OR:
            case MINING_DRAGON_PICKAXE_UPGRADED:
            case MINING_INFERNAL_PICKAXE:
            case MINING_3A_PICKAXE:
            case MINING_CRYSTAL_PICKAXE:
            case MINING_DRAGON_PICKAXE_OR_TRAILBLAZER:
            case MINING_TRAILBLAZER_PICKAXE:
            case MINING_TRAILBLAZER_PICKAXE_2:
            case MINING_TRAILBLAZER_PICKAXE_3:
            case DENSE_ESSENCE_CHIPPING:
            case MINING_CRASHEDSTAR_BRONZE:
            case MINING_CRASHEDSTAR_IRON:
            case MINING_CRASHEDSTAR_STEEL:
            case MINING_CRASHEDSTAR_BLACK:
            case MINING_CRASHEDSTAR_MITHRIL:
            case MINING_CRASHEDSTAR_ADAMANT:
            case MINING_CRASHEDSTAR_RUNE:
            case MINING_CRASHEDSTAR_GILDED:
            case MINING_CRASHEDSTAR_DRAGON:
            case MINING_CRASHEDSTAR_DRAGON_UPGRADED:
            case MINING_CRASHEDSTAR_DRAGON_OR:
            case MINING_CRASHEDSTAR_DRAGON_OR_TRAILBLAZER:
            case MINING_CRASHEDSTAR_INFERNAL:
            case MINING_CRASHEDSTAR_3A:
            case MINING_CRASHEDSTAR_CRYSTAL:
            case WOODCUTTING_BRONZE:
            case WOODCUTTING_IRON:
            case WOODCUTTING_STEEL:
            case WOODCUTTING_BLACK:
            case WOODCUTTING_MITHRIL:
            case WOODCUTTING_ADAMANT:
            case WOODCUTTING_RUNE:
            case WOODCUTTING_GILDED:
            case WOODCUTTING_DRAGON:
            case WOODCUTTING_DRAGON_OR:
            case WOODCUTTING_INFERNAL:
            case WOODCUTTING_3A_AXE:
            case WOODCUTTING_CRYSTAL:
            case WOODCUTTING_TRAILBLAZER:
            case WOODCUTTING_2H_BRONZE:
            case WOODCUTTING_2H_IRON:
            case WOODCUTTING_2H_STEEL:
            case WOODCUTTING_2H_BLACK:
            case WOODCUTTING_2H_MITHRIL:
            case WOODCUTTING_2H_ADAMANT:
            case WOODCUTTING_2H_RUNE:
            case WOODCUTTING_2H_DRAGON:
            case WOODCUTTING_2H_3A:
            case FLETCHING_BOW_CUTTING:
            case FLETCHING_STRING_NORMAL_SHORTBOW:
            case FLETCHING_STRING_NORMAL_LONGBOW:
            case FLETCHING_STRING_OAK_SHORTBOW:
            case FLETCHING_STRING_OAK_LONGBOW:
            case FLETCHING_STRING_WILLOW_SHORTBOW:
            case FLETCHING_STRING_WILLOW_LONGBOW:
            case FLETCHING_STRING_MAPLE_SHORTBOW:
            case FLETCHING_STRING_MAPLE_LONGBOW:
            case FLETCHING_STRING_YEW_SHORTBOW:
            case FLETCHING_STRING_YEW_LONGBOW:
            case FLETCHING_STRING_MAGIC_SHORTBOW:
            case FLETCHING_STRING_MAGIC_LONGBOW:
            case FLETCHING_ATTACH_BOLT_TIPS_TO_BRONZE_BOLT:
            case FLETCHING_ATTACH_BOLT_TIPS_TO_IRON_BROAD_BOLT:
            case FLETCHING_ATTACH_BOLT_TIPS_TO_BLURITE_BOLT:
            case FLETCHING_ATTACH_BOLT_TIPS_TO_STEEL_BOLT:
            case FLETCHING_ATTACH_BOLT_TIPS_TO_MITHRIL_BOLT:
            case FLETCHING_ATTACH_BOLT_TIPS_TO_ADAMANT_BOLT:
            case FLETCHING_ATTACH_BOLT_TIPS_TO_RUNE_BOLT:
            case FLETCHING_ATTACH_BOLT_TIPS_TO_DRAGON_BOLT:
            case FLETCHING_ATTACH_HEADS:
            case FLETCHING_ATTACH_FEATHERS_TO_ARROWSHAFT:
            case HERBLORE_MAKE_TAR:
            case HERBLORE_POTIONMAKING:
            case HERBLORE_PESTLE_AND_MORTAR:
            case GEM_CUTTING_OPAL:
            case GEM_CUTTING_JADE:
            case GEM_CUTTING_REDTOPAZ:
            case GEM_CUTTING_SAPPHIRE:
            case GEM_CUTTING_EMERALD:
            case GEM_CUTTING_RUBY:
            case GEM_CUTTING_DIAMOND:
            case GEM_CUTTING_AMETHYST:
            case CRAFTING_GLASSBLOWING:
            case CRAFTING_SPINNING:
            case CRAFTING_LOOM:
            case CRAFTING_BATTLESTAVES:
            case CRAFTING_LEATHER:
            case CRAFTING_POTTERS_WHEEL:
            case CRAFTING_POTTERY_OVEN:
            case DENSE_ESSENCE_CHISELING:
            case SMITHING_ANVIL:
            case SMITHING_SMELTING:
            case SMITHING_CANNONBALL:
            case SMITHING_IMCANDO_HAMMER:
            case MINING_MOTHERLODE_BRONZE:
            case MINING_MOTHERLODE_IRON:
            case MINING_MOTHERLODE_STEEL:
            case MINING_MOTHERLODE_BLACK:
            case MINING_MOTHERLODE_MITHRIL:
            case MINING_MOTHERLODE_ADAMANT:
            case MINING_MOTHERLODE_RUNE:
            case MINING_MOTHERLODE_GILDED:
            case MINING_MOTHERLODE_DRAGON:
            case MINING_MOTHERLODE_DRAGON_OR:
            case MINING_MOTHERLODE_DRAGON_UPGRADED:
            case MINING_MOTHERLODE_INFERNAL:
            case MINING_MOTHERLODE_3A:
            case MINING_MOTHERLODE_DRAGON_OR_TRAILBLAZER:
            case MINING_MOTHERLODE_TRAILBLAZER:
            case MINING_MOTHERLODE_CRYSTAL:
                return true;
            case IDLE:
            default:
                return false;
        }
    }
}

package com.mcajben.animation_skipper;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("animationskipper")
public interface AnimationSkipperConfig extends Config {

    @Alpha
    @ConfigItem(
            position = 0,
            keyName = "overlayColor",
            name = "Overlay color",
            description = "Color of the full screen overlay"
    )
    default Color overlayColor() {
        return new Color(0, 0, 0, 160);
    }

    @Alpha
    @ConfigItem(
            position = 1,
            keyName = "textColor",
            name = "Text Color",
            description = "Color of text on full screen overlay. If opacity is set to 0 then text is completely transparent."
    )
    default Color textColor() {
        return new Color(0, 0, 0, 0);
    }

    @ConfigItem(
            position = 2,
            keyName = "textSize",
            name = "Text Size",
            description = "Text Size"
    )
    @Range(min = 8, max = 96)
    default int textSize() {
        return 36;
    }

    @ConfigItem(
            position = 3,
            keyName = "debounceDuration",
            name = "Debounce duration",
            description = "Time between animation ending and the overlay fading out. Increasing the debounce duration can prevent flickering."
    )
    @Units(Units.MILLISECONDS)
    default int debounceDuration() {
        return 1800;
    }

    @ConfigItem(
            position = 4,
            keyName = "fadeDuration",
            name = "Fade duration",
            description = "Time for the overlay to fade in and out"
    )
    @Units(Units.MILLISECONDS)
    default int fadeDuration() {
        return 500;
    }
}

package com.mcajben.animation_skipper;

import java.util.Random;

public class DisplayTextFactory {
    private static final Random rand = new Random();
    private static final String[] TEXT = {
            "A LITTLE LATER",
            "A LOT LATER",
            "A WHOLE LOT LATER",
            "FIVE DAYS LATER",
            "FIVE DAYS PASS",
            "FIVE HOURS LATER",
            "FIVE HOURS PASS",
            "FIVE MINUTES LATER",
            "FIVE MINUTES PASS",
            "ONE DAY LATER",
            "ONE DAY PASSES",
            "ONE HOUR LATER",
            "ONE HOUR PASSES",
            "ONE MINUTE LATER",
            "ONE MINUTE PASSES",
            "SKIPPING...",
            "SOME TIME LATER",
            "SOME TIME PASSES",
            "TEN DAYS LATER",
            "TEN DAYS PASS",
            "TEN HOURS LATER",
            "TEN HOURS PASS",
            "TEN MINUTES LATER",
            "TEN MINUTES PASS",
    };

    public static String getRandomText(String previousText) {
        if (rand.nextInt(1_000_000) == 0) {
            // Special RNG Text
            return "YOU DIED";
        }

        final int randIndex = rand.nextInt(TEXT.length - 1);
        if (TEXT[randIndex].equals(previousText)) {
            final int nextRandIndex = (randIndex + 1) % TEXT.length;
            return TEXT[nextRandIndex];
        } else {
            return TEXT[randIndex];
        }
    }
}

