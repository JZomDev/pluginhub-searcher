package com.inventorycost;

import com.google.inject.Inject;
import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Inventory Cost Tracker",
	description = "Tracks the real-time cost of the players inventory/equipment",
	tags = {"overlay", "tracker", "calculator", "gp", "value", "check", "worth"}
)
public class InventoryCostPlugin extends Plugin
{
	@Inject
	private OverlayManager overlayManager;

	@Inject
	private InventoryCostOverlay overlay;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
		log.info("Inventory Cost Tracker started");
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
		log.info("Inventory Cost Tracker stopped");
	}

	@Provides
	InventoryCostConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(InventoryCostConfig.class);
	}
}
package com.inventorycost;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(InventoryCostConfig.GROUP)
public interface InventoryCostConfig extends Config
{
	String GROUP = "inventorycost";

	@ConfigItem(
			keyName = "saveCost",
			name = "Save Current Total Cost",
			description = "Save the current cost of your inventory and/or equipment",
			position = 1
	)
	default boolean saveCost()
	{
		return false;
	}

	@ConfigItem(
			keyName = "excludeHeadEquipmentCost",
			name = "Exclude Head Slot Cost",
			description = "Exclude player head equipment cost from total cost calculation",
			position = 2
	)
	default boolean excludeHeadEquipmentCost()
	{
		return false;
	}

	@ConfigItem(
			keyName = "excludeBodyEquipmentCost",
			name = "Exclude Body Slot Cost",
			description = "Exclude player body equipment cost from total cost calculation",
			position = 3
	)
	default boolean excludeBodyEquipmentCost()
	{
		return false;
	}

	@ConfigItem(
			keyName = "excludeGlovesEquipmentCost",
			name = "Exclude Gloves Slot Cost",
			description = "Exclude player gloves equipment cost from total cost calculation",
			position = 4
	)
	default boolean excludeGlovesEquipmentCost()
	{
		return false;
	}

	@ConfigItem(
			keyName = "excludeCapeEquipmentCost",
			name = "Exclude Cape Slot Cost",
			description = "Exclude player cape equipment cost from total cost calculation",
			position = 5
	)
	default boolean excludeCapeEquipmentCost()
	{
		return false;
	}

	@ConfigItem(
			keyName = "excludeAmuletEquipmentCost",
			name = "Exclude Amulet Slot Cost",
			description = "Exclude player amulet equipment cost from total cost calculation",
			position = 6
	)
	default boolean excludeAmuletEquipmentCost()
	{
		return false;
	}

	@ConfigItem(
			keyName = "excludeWeaponEquipmentCost",
			name = "Exclude Weapon Slot Cost",
			description = "Exclude player weapon equipment cost from total cost calculation",
			position = 7
	)
	default boolean excludeWeaponEquipmentCost()
	{
		return false;
	}

	@ConfigItem(
			keyName = "excludeShieldEquipmentCost",
			name = "Exclude Shield Slot Cost",
			description = "Exclude player shield equipment cost from total cost calculation",
			position = 8
	)
	default boolean excludeShieldEquipmentCost()
	{
		return false;
	}

	@ConfigItem(
			keyName = "excludeRingEquipmentCost",
			name = "Exclude Ring Slot Cost",
			description = "Exclude player ring equipment cost from total cost calculation",
			position = 9
	)
	default boolean excludeRingEquipmentCost()
	{
		return false;
	}

	@ConfigItem(
			keyName = "excludeAmmoEquipmentCost",
			name = "Exclude Ammo Slot Cost",
			description = "Exclude player ammo equipment cost from total cost calculation",
			position = 10
	)
	default boolean excludeAmmoEquipmentCost()
	{
		return false;
	}

	@ConfigItem(
			keyName = "excludeLegsEquipmentCost",
			name = "Exclude Legs Slot Cost",
			description = "Exclude player legs equipment cost from total cost calculation",
			position = 11
	)
	default boolean excludeLegsEquipmentCost()
	{
		return false;
	}

	@ConfigItem(
			keyName = "excludeBootsEquipmentCost",
			name = "Exclude Boots Slot Cost",
			description = "Exclude player boots equipment cost from total cost calculation",
			position = 12
	)
	default boolean excludeBootsEquipmentCost()
	{
		return false;
	}
}
package com.inventorycost;

import com.google.inject.Inject;
import net.runelite.api.*;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.*;
import net.runelite.client.ui.overlay.components.ComponentConstants;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import java.awt.*;

public class InventoryCostOverlay extends OverlayPanel
{
    @Inject
    private Client client;
	
    @Inject
    private ItemManager itemManager;
	
    @Inject
    private InventoryCostConfig config;
	
    private int SAVED_COST = 0;
    private final int PANEL_WIDTH_OFFSET = 10;

    @Override
    public Dimension render(Graphics2D graphics)
    {
        final String title = "Inventory Cost";
        panelComponent.getChildren().add(
                TitleComponent.builder()
                        .text(title)
                        .build());

        int maxWidth = ComponentConstants.STANDARD_WIDTH;

        panelComponent.getChildren().add(
                LineComponent.builder()
                        .left("CURRENT")
                        .right(setFormattedText(calculateTotalCost()))
                        .build());

        if (config.saveCost())
        {
            if (SAVED_COST >= 0)
            {
                panelComponent.getChildren().add(
                        LineComponent.builder()
                                .left("SAVED")
                                .right(setFormattedText(SAVED_COST))
                                .build());

                panelComponent.getChildren().add(
                        LineComponent.builder()
                                .left("")
                                .right("")
                                .build());

                panelComponent.getChildren().add(
                        LineComponent.builder()
                                .left("DIFF")
                                .right(setCostDifferenceText())
                                .rightColor(setCostDifferenceColor())
                                .build());

                panelComponent.setPreferredSize(new Dimension(maxWidth + PANEL_WIDTH_OFFSET, 0));
            } else {
                setSaveCost();
            }
        } else {
            SAVED_COST = -1;
        }

        return super.render(graphics);
    }

    private int calculateTotalCost()
    {
        int totalCost = 0;

        totalCost += calculateItemsCost(client.getItemContainer(InventoryID.INVENTORY));

        if (!config.excludeHeadEquipmentCost())
        {
            totalCost += calculateEquipmentSlotCost(EquipmentInventorySlot.HEAD.getSlotIdx());
        }

        if (!config.excludeBodyEquipmentCost())
        {
            totalCost += calculateEquipmentSlotCost(EquipmentInventorySlot.BODY.getSlotIdx());
        }

        if (!config.excludeCapeEquipmentCost())
        {
            totalCost += calculateEquipmentSlotCost(EquipmentInventorySlot.CAPE.getSlotIdx());
        }

        if (!config.excludeAmuletEquipmentCost())
        {
            totalCost += calculateEquipmentSlotCost(EquipmentInventorySlot.AMULET.getSlotIdx());
        }

        if (!config.excludeGlovesEquipmentCost())
        {
            totalCost += calculateEquipmentSlotCost(EquipmentInventorySlot.GLOVES.getSlotIdx());
        }

        if (!config.excludeWeaponEquipmentCost())
        {
            totalCost += calculateEquipmentSlotCost(EquipmentInventorySlot.WEAPON.getSlotIdx());
        }

        if (!config.excludeShieldEquipmentCost())
        {
            totalCost += calculateEquipmentSlotCost(EquipmentInventorySlot.SHIELD.getSlotIdx());
        }

        if (!config.excludeRingEquipmentCost())
        {
            totalCost += calculateEquipmentSlotCost(EquipmentInventorySlot.RING.getSlotIdx());
        }

        if (!config.excludeAmmoEquipmentCost())
        {
            totalCost += calculateEquipmentSlotCost(EquipmentInventorySlot.AMMO.getSlotIdx());
        }

        if (!config.excludeLegsEquipmentCost())
        {
            totalCost += calculateEquipmentSlotCost(EquipmentInventorySlot.LEGS.getSlotIdx());
        }

        if (!config.excludeBootsEquipmentCost())
        {
            totalCost += calculateEquipmentSlotCost(EquipmentInventorySlot.BOOTS.getSlotIdx());
        }

        return totalCost;
    }

    private int calculateItemsCost(ItemContainer itemContainer)
    {
        if (itemContainer == null)
        {
            return 0;
        }

        Item[] items = itemContainer.getItems();

        if (items == null || items.length == 0)
        {
            return 0;
        }

        int totalCost = 0;

        for (int i = 0; i < items.length; i++)
        {
            Item item = items[i];
            int itemPrice = itemManager.getItemPrice(item.getId());

            if (item.getQuantity() > 0)
            {
                totalCost += itemPrice * item.getQuantity();
            }
            else
            {
                totalCost += itemPrice;
            }
        }

        return totalCost;
    }

    private int calculateEquipmentSlotCost(int slotIndex)
    {
	ItemContainer itemContainer  = client.getItemContainer(InventoryID.EQUIPMENT);

	if (itemContainer == null)
	{
	    return 0;
	}

        Item slotItem = itemContainer.getItem(slotIndex);

        if (slotItem == null)
        {
            return 0;
        }

        if (slotItem.getQuantity() > 0)
        {
            return itemManager.getItemPrice(slotItem.getId()) * slotItem.getQuantity();
        }

        return itemManager.getItemPrice(slotItem.getId());
    }

    private int calculateSaveCostDifference()
    {
        return calculateTotalCost() - SAVED_COST;
    }

    private String setCostDifferenceText()
    {
        if (SAVED_COST < calculateTotalCost()) {
            return "+" + setFormattedText(calculateSaveCostDifference());
        } else  {
            return setFormattedText(calculateSaveCostDifference());
        }
    }

    private Color setCostDifferenceColor()
    {
        if (SAVED_COST > calculateTotalCost()) {
            return Color.RED;
        } else if (SAVED_COST < calculateTotalCost()) {
            return Color.GREEN;
        } else  {
            return Color.WHITE;
        }
    }

    private String setFormattedText(int value)
    {
        Double numParsed = Double.parseDouble(Integer.toString(value));
        return String.format("%,.0f", numParsed);
    }

    private void setSaveCost()
    {
	SAVED_COST = calculateTotalCost();
    }
}

package com.example;

import com.inventorycost.InventoryCostPlugin;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class InvCostTrackerTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(InventoryCostPlugin.class);
		RuneLite.main(args);
	}
}
