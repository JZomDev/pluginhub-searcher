package com.duckblade.osrs.easyteleports.replacers;

import com.duckblade.osrs.easyteleports.EasyTeleportsConfig;
import com.duckblade.osrs.easyteleports.TeleportReplacement;
import com.google.common.collect.ImmutableList;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.ItemID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.game.ItemMapping;

@Singleton
@RequiredArgsConstructor(onConstructor = @__(@Inject))
public class RingOfDueling implements Replacer
{

	private static final String RING_OF_DUELING_DIALOGUE_HEADER = "Where would you like to teleport to?";

	private final List<TeleportReplacement> replacements = new ArrayList<>(5);

	@Getter(onMethod = @__(@Override))
	private boolean enabled = false;

	@Override
	public void onConfigChanged(EasyTeleportsConfig config)
	{
		this.enabled = config.enableRingOfDueling();

		replacements.clear();
		replacements.add(new TeleportReplacement("Emir's Arena", config.replacementEmirsArena()));
		//replacements.add(new TeleportReplacement("Al Kharid PvP Arena", config.replacementEmirsArena())); // This is not used anymore?
		replacements.add(new TeleportReplacement("Castle Wars", config.replacementCastleWars()));
		replacements.add(new TeleportReplacement("Castle Wars Arena", config.replacementCastleWars()));
		replacements.add(new TeleportReplacement("Ferox Enclave", config.replacementFeroxEnclave()));
		replacements.add(new TeleportReplacement("Fortis Colosseum", config.replacementFortisColosseum()));
	}

	@Override
	public List<TeleportReplacement> getReplacements()
	{
		return ImmutableList.copyOf(replacements);
	}

	@Override
	public boolean isApplicableToDialog(Widget root)
	{
		Widget[] children = root.getChildren();
		return children != null &&
			children.length >= 5 &&
			RING_OF_DUELING_DIALOGUE_HEADER.equals(children[0].getText());
	}

	@Override
	public boolean isApplicableToJewelleryBox()
	{
		return true;
	}

	@Override
	public EquipmentInventorySlot getEquipmentSlot()
	{
		return EquipmentInventorySlot.RING;
	}

	@Override
	public boolean isApplicableToInventory(int itemId)
	{
		Collection<ItemMapping> itemMappings = ItemMapping.map(itemId);
		return itemId == ItemID.RING_OF_DUELING8 || (itemMappings != null && itemMappings.contains(ItemMapping.ITEM_RING_OF_DUELING));
	}
}
package com.duckblade.osrs.easyteleports.replacers;

import com.duckblade.osrs.easyteleports.EasyTeleportsConfig;
import com.duckblade.osrs.easyteleports.TeleportReplacement;
import com.google.common.collect.ImmutableList;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.ItemID;
import net.runelite.api.widgets.Widget;

@Singleton
@RequiredArgsConstructor(onConstructor = @__(@Inject))
public class RingOfShadows implements Replacer
{

	private static final String RING_OF_SHADOWS_DIALOGUE_HEADER = "Where would you like to teleport to?";

	private final List<TeleportReplacement> replacements = new ArrayList<>(6);

	@Getter(onMethod = @__(@Override))
	private boolean enabled = false;

	@Override
	public void onConfigChanged(EasyTeleportsConfig config)
	{
		this.enabled = config.enableRingOfShadows();
		replacements.clear();

		new Color(168, 161, 42);
		replacements.add(new TeleportReplacement("Ancient Vault", config.replacementAncientVault())); // equipped
		replacements.add(new TeleportReplacement("The Ancient Vault", config.replacementAncientVault())); // dialogue
		replacements.add(new TeleportReplacement("Ghorrock Dungeon", config.replacementGhorrockDungeon()));
		replacements.add(new TeleportReplacement("The Scar", config.replacementScar()));
		replacements.add(new TeleportReplacement("Lassar Undercity", config.replacementLassarUndercity()));
		replacements.add(new TeleportReplacement("The Stranglewood", config.replacementStranglewood()));
	}

	@Override
	public List<TeleportReplacement> getReplacements()
	{
		return ImmutableList.copyOf(replacements);
	}

	@Override
	public boolean isApplicableToDialog(Widget root)
	{
		Widget[] children = root.getChildren();
		return children != null &&
			children.length >= 5 &&
			RING_OF_SHADOWS_DIALOGUE_HEADER.equals(children[0].getText());
	}

	@Override
	public EquipmentInventorySlot getEquipmentSlot()
	{
		return EquipmentInventorySlot.RING;
	}

	@Override
	public boolean isApplicableToInventory(int itemId)
	{
		return itemId == ItemID.RING_OF_SHADOWS;
	}
}
package com.duckblade.osrs.easyteleports.replacers;

import com.duckblade.osrs.easyteleports.EasyTeleportsConfig;
import com.duckblade.osrs.easyteleports.TeleportReplacement;
import com.google.common.collect.ImmutableList;
import java.util.ArrayList;
import java.util.List;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.ItemID;
import net.runelite.api.widgets.Widget;

@Singleton
@RequiredArgsConstructor(onConstructor = @__(@Inject))
public class KharedstMemoirs implements Replacer
{

	private static final String KHAREDST_DIALOG_HEADER = "What would you like to remember?";

	private final List<TeleportReplacement> replacements = new ArrayList<>(5);

	@Getter(onMethod = @__(@Override))
	private boolean enabled = false;

	@Override
	public void onConfigChanged(EasyTeleportsConfig config)
	{
		this.enabled = config.enableKharedstsMemoirs();
		replacements.clear();

		// equipped
		replacements.add(new TeleportReplacement("Lunch by the Lancalliums", config.replacementLancalliums()));
		replacements.add(new TeleportReplacement("The Fisher's Flute", config.replacementFishers()));
		replacements.add(new TeleportReplacement("History and Hearsay", config.replacementHistory()));
		replacements.add(new TeleportReplacement("Jewellery of Jubilation", config.replacementJubilation()));
		replacements.add(new TeleportReplacement("A Dark Disposition", config.replacementDisposition()));

		// dialog
		replacements.add(new TeleportReplacement("'Lunch by the Lancalliums' - Hosidius", config.replacementLancalliums()));
		replacements.add(new TeleportReplacement("'The Fisher's Flute' - Piscarilius", config.replacementFishers()));
		replacements.add(new TeleportReplacement("'History and Hearsay' - Shayzien", config.replacementHistory()));
		replacements.add(new TeleportReplacement("'Jewellery of Jubilation' - Lovakengj", config.replacementJubilation()));
		replacements.add(new TeleportReplacement("'A Dark Disposition' - Arceuus", config.replacementDisposition()));
	}

	@Override
	public List<TeleportReplacement> getReplacements()
	{
		return ImmutableList.copyOf(replacements);
	}

	@Override
	public boolean isApplicableToDialog(Widget root)
	{
		Widget[] children = root.getChildren();
		return children != null &&
			children.length >= 5 &&
			KHAREDST_DIALOG_HEADER.equals(children[0].getText());
	}

	@Override
	public EquipmentInventorySlot getEquipmentSlot()
	{
		return EquipmentInventorySlot.SHIELD;
	}

	@Override
	public boolean isApplicableToInventory(int itemId)
	{
		return itemId == ItemID.KHAREDSTS_MEMOIRS || itemId == ItemID.BOOK_OF_THE_DEAD;
	}
}
package com.duckblade.osrs.easyteleports.replacers;

import com.duckblade.osrs.easyteleports.EasyTeleportsConfig;
import com.duckblade.osrs.easyteleports.TeleportReplacement;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.ItemID;
import net.runelite.api.widgets.Widget;

@Singleton
@RequiredArgsConstructor(onConstructor = @__(@Inject))
public class NecklaceOfPassage implements Replacer
{

	private final List<TeleportReplacement> replacements = new ArrayList<>(3);
	private static final String NECKLACE_OF_PASSGE_DIALOG_HEADER = "Teleport to...";

	@Getter(onMethod = @__(@Override))
	private boolean enabled = false;

	@Override
	public void onConfigChanged(EasyTeleportsConfig config)
	{
		this.enabled = config.enableNecklaceOfPassage();

		replacements.clear();
		replacements.add(new TeleportReplacement("Wizards' Tower", config.replacementWizardsTower()));
		replacements.add(new TeleportReplacement("The Outpost", config.replacementOutpost()));
		replacements.add(new TeleportReplacement("Eagles' Eyrie", config.replacementEagleEyrie()));
		replacements.add(new TeleportReplacement("Eagle's Eyrie", config.replacementEagleEyrie()));
	}

	@Override
	public List<TeleportReplacement> getReplacements()
	{
		return ImmutableList.copyOf(replacements);
	}

	@Override
	public boolean isApplicableToDialog(Widget root)
	{
		Widget[] children = root.getChildren();
		return children != null &&
			children.length >= 4 &&
			NECKLACE_OF_PASSGE_DIALOG_HEADER.equals(children[0].getText());
	}

	@Override
	public EquipmentInventorySlot getEquipmentSlot()
	{
		return EquipmentInventorySlot.AMULET;
	}

	@Override
	public boolean isApplicableToInventory(int itemId)
	{
		return itemId == ItemID.NECKLACE_OF_PASSAGE1
			|| itemId == ItemID.NECKLACE_OF_PASSAGE2
			|| itemId == ItemID.NECKLACE_OF_PASSAGE3
			|| itemId == ItemID.NECKLACE_OF_PASSAGE4
			|| itemId == ItemID.NECKLACE_OF_PASSAGE5;
	}
}
package com.duckblade.osrs.easyteleports.replacers;

import com.duckblade.osrs.easyteleports.EasyTeleportsConfig;
import com.duckblade.osrs.easyteleports.TeleportReplacement;
import com.google.common.collect.ImmutableList;
import java.util.ArrayList;
import java.util.List;
import lombok.Getter;
import net.runelite.api.ItemID;
import net.runelite.api.widgets.Widget;

public class SlayerRing implements Replacer
{

	private static final String SLAYER_RING_DIALOG_HEADER = "Select an Option";

	private final List<TeleportReplacement> replacements = new ArrayList<>(5);

	@Getter(onMethod = @__(@Override))
	private boolean enabled = false;

	@Override
	public void onConfigChanged(EasyTeleportsConfig config)
	{
		this.enabled = config.enableSlayerRing();

		replacements.clear();
		replacements.add(new TeleportReplacement("Teleport to the Stronghold Slayer Cave", config.replacementSlayerStronghold()));
		replacements.add(new TeleportReplacement("Teleport to the Morytania Slayer Tower", config.replacementSlayerTower()));
		replacements.add(new TeleportReplacement("Teleport to the Rellekka Slayer Caves", config.replacementSlayerRellekka()));
		replacements.add(new TeleportReplacement("Teleport to Tarn's Lair", config.replacementTarns()));
		replacements.add(new TeleportReplacement("Teleport to Dark Beasts", config.replacementDarkBeasts()));
	}

	@Override
	public List<TeleportReplacement> getReplacements()
	{
		return ImmutableList.copyOf(replacements);
	}

	@Override
	public boolean isApplicableToDialog(Widget root)
	{
		Widget[] children = root.getChildren();
		return children != null &&
			children.length >= 5 &&
			SLAYER_RING_DIALOG_HEADER.equals(children[0].getText());
	}

	@Override
	public boolean isApplicableToInventory(int itemId)
	{
		// There is no ItemMapping for this right now

		return itemId == ItemID.SLAYER_RING_1
			|| itemId == ItemID.SLAYER_RING_2
			|| itemId == ItemID.SLAYER_RING_3
			|| itemId == ItemID.SLAYER_RING_4
			|| itemId == ItemID.SLAYER_RING_5
			|| itemId == ItemID.SLAYER_RING_6
			|| itemId == ItemID.SLAYER_RING_7
			|| itemId == ItemID.SLAYER_RING_8
			|| itemId == ItemID.SLAYER_RING_ETERNAL;
	}
}
package com.duckblade.osrs.easyteleports.replacers;

import com.duckblade.osrs.easyteleports.EasyTeleportsConfig;
import com.duckblade.osrs.easyteleports.TeleportReplacement;
import com.google.common.collect.ImmutableList;
import java.util.ArrayList;
import java.util.List;
import lombok.Getter;
import net.runelite.api.ItemID;
import net.runelite.api.widgets.Widget;

public class DiaryCape implements Replacer
{

	private static final String ADVENTURE_LOG_HEADER = "Diary Masters";

	private final List<TeleportReplacement> replacements = new ArrayList<>(5);

	@Getter(onMethod = @__(@Override))
	private boolean enabled = false;

	@Override
	public void onConfigChanged(EasyTeleportsConfig config)
	{
		this.enabled = config.enableDiaryCape();

		replacements.clear();
		replacements.add(new TeleportReplacement("Ardougne: Two-pints", config.replacementArdougne()));
		replacements.add(new TeleportReplacement("Desert: Jarr", config.replacementDesert()));
		replacements.add(new TeleportReplacement("Falador: Sir Rebral", config.replacementFalador()));
		replacements.add(new TeleportReplacement("Fremennik: Thorodin", config.replacementFremennik()));
		replacements.add(new TeleportReplacement("Kandarin: Flax keeper", config.replacementKandarin()));
		replacements.add(new TeleportReplacement("Karamja: Pirate Jackie the Fruit", config.replacementKaramjaJackie()));
		replacements.add(new TeleportReplacement("Karamja: Kaleb Paramaya (retired)", config.replacementKaramjaKaleb()));
		replacements.add(new TeleportReplacement("Karamja: Jungle forester (retired)", config.replacementKaramjaForester()));
		replacements.add(new TeleportReplacement("Karamja: TzHaar-Mej (retired)", config.replacementKaramjaTzhaar()));
		replacements.add(new TeleportReplacement("Kourend & Kebos: Elise", config.replacementKourend()));
		replacements.add(new TeleportReplacement("Lumbridge & Draynor: Hatius Cosaintus", config.replacementLumbridge()));
		replacements.add(new TeleportReplacement("Morytania: Le-sabrè", config.replacementMorytania()));
		replacements.add(new TeleportReplacement("Varrock: Toby", config.replacementVarrock()));
		replacements.add(new TeleportReplacement("Wilderness: Lesser Fanatic", config.replacementWilderness()));
		replacements.add(new TeleportReplacement("Western Provinces: Elder Gnome child", config.replacementWestern()));
		replacements.add(new TeleportReplacement("Twiggy O'Korn", config.replacementTwiggy()));
	}

	@Override
	public List<TeleportReplacement> getReplacements()
	{
		return ImmutableList.copyOf(replacements);
	}

	@Override
	public boolean isApplicableToAdventureLog(Widget root)
	{
		return root != null &&
			root.getText() != null &&
			ADVENTURE_LOG_HEADER.equals(root.getText());
	}

	@Override
	public boolean isApplicableToInventory(int itemId)
	{
		return itemId == ItemID.ACHIEVEMENT_DIARY_CAPE || itemId == ItemID.ACHIEVEMENT_DIARY_CAPE_T;
	}
}
package com.duckblade.osrs.easyteleports.replacers;

import com.duckblade.osrs.easyteleports.EasyTeleportsConfig;
import com.duckblade.osrs.easyteleports.TeleportReplacement;
import com.google.common.collect.ImmutableList;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.ItemID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.game.ItemMapping;

@Singleton
@RequiredArgsConstructor(onConstructor = @__(@Inject))
public class PharaohSceptre implements Replacer
{

	private static final String SCEPTRE_DIALOG_HEADER = "Where would you like to teleport to?";

	private final List<TeleportReplacement> replacements = new ArrayList<>(4);

	@Getter(onMethod = @__(@Override))
	private boolean enabled = false;

	@Override
	public void onConfigChanged(EasyTeleportsConfig config)
	{
		this.enabled = config.enablePharaohSceptre();

		replacements.clear();
		replacements.add(new TeleportReplacement("Jalsavrah", config.replacementJalsavrah()));
		replacements.add(new TeleportReplacement("Jaleustrophos", config.replacementJaleustrophos()));
		replacements.add(new TeleportReplacement("Jaldraocht", config.replacementJaldraocht()));
		replacements.add(new TeleportReplacement("Jaltevas", config.replacementJaltevas()));
	}

	@Override
	public List<TeleportReplacement> getReplacements()
	{
		return ImmutableList.copyOf(replacements);
	}

	@Override
	public boolean isApplicableToDialog(Widget root)
	{
		Widget[] children = root.getChildren();
		return children != null &&
			children.length >= 5 &&
			SCEPTRE_DIALOG_HEADER.equals(children[0].getText());
	}

	@Override
	public EquipmentInventorySlot getEquipmentSlot()
	{
		return EquipmentInventorySlot.WEAPON;
	}

	@Override
	public boolean isApplicableToInventory(int itemId)
	{
		if (itemId == ItemID.PHARAOHS_SCEPTRE_UNCHARGED)
		{
			return false;
		}
		Collection<ItemMapping> itemMappings = ItemMapping.map(itemId);
		return itemMappings != null && itemMappings.contains(ItemMapping.ITEM_PHARAOHS_SCEPTRE);
	}
}
package com.duckblade.osrs.easyteleports.replacers;

import com.duckblade.osrs.easyteleports.EasyTeleportsConfig;
import com.duckblade.osrs.easyteleports.TeleportReplacement;
import com.google.common.collect.ImmutableList;
import java.util.ArrayList;
import java.util.List;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.ItemID;

@Singleton
@RequiredArgsConstructor(onConstructor = @__(@Inject))
public class DrakansMedallion implements Replacer
{

	private final List<TeleportReplacement> replacements = new ArrayList<>(5);

	@Getter(onMethod = @__(@Override))
	private boolean enabled = false;

	@Override
	public void onConfigChanged(EasyTeleportsConfig config)
	{
		this.enabled = config.enableDrakans();
		replacements.clear();

		replacements.add(new TeleportReplacement("Ver Sinhaza", config.replacementVerSinhaza()));
		replacements.add(new TeleportReplacement("Darkmeyer", config.replacementDarkmeyer()));
		replacements.add(new TeleportReplacement("Slepe", config.replacementSlepe()));
	}

	@Override
	public List<TeleportReplacement> getReplacements()
	{
		return ImmutableList.copyOf(replacements);
	}

	@Override
	public boolean isApplicableToInventory(int itemId)
	{
		return itemId == ItemID.DRAKANS_MEDALLION;
	}

	@Override
	public EquipmentInventorySlot getEquipmentSlot()
	{
		return EquipmentInventorySlot.AMULET;
	}
}
package com.duckblade.osrs.easyteleports.replacers;

import com.duckblade.osrs.easyteleports.EasyTeleportsConfig;
import com.duckblade.osrs.easyteleports.TeleportReplacement;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.ItemID;
import net.runelite.api.widgets.Widget;

@Singleton
@RequiredArgsConstructor(onConstructor = @__(@Inject))
public class XericsTalisman implements Replacer
{

	private static final Set<String> TALISMAN_ADVENTURE_LOG_HEADER_PREFIXES = ImmutableSet.of(
		"The talisman has",
		"Xeric's Talisman teleports"
	);

	private final List<TeleportReplacement> replacements = new ArrayList<>(5);

	@Getter(onMethod = @__(@Override))
	private boolean enabled = false;

	@Override
	public void onConfigChanged(EasyTeleportsConfig config)
	{
		this.enabled = config.enableXericsTalisman();

		replacements.clear();
		replacements.add(new TeleportReplacement("Xeric's Lookout", config.replacementLookout()));
		replacements.add(new TeleportReplacement("Xeric's Glade", config.replacementGlade()));
		replacements.add(new TeleportReplacement("Xeric's Inferno", config.replacementInferno()));
		replacements.add(new TeleportReplacement("Xeric's Heart", config.replacementHeart()));
		replacements.add(new TeleportReplacement("Xeric's Honour", config.replacementHonour()));
	}

	@Override
	public List<TeleportReplacement> getReplacements()
	{
		return ImmutableList.copyOf(replacements);
	}

	@Override
	public boolean isApplicableToAdventureLog(Widget root)
	{
		return root != null &&
			root.getText() != null &&
			TALISMAN_ADVENTURE_LOG_HEADER_PREFIXES.stream()
				.anyMatch(s -> root.getText().startsWith(s));
	}

	@Override
	public boolean isApplicableToInventory(int itemId)
	{
		return itemId == ItemID.XERICS_TALISMAN;
	}

	@Override
	public EquipmentInventorySlot getEquipmentSlot()
	{
		return EquipmentInventorySlot.AMULET;
	}
}
package com.duckblade.osrs.easyteleports.replacers;

import com.duckblade.osrs.easyteleports.EasyTeleportsConfig;
import com.duckblade.osrs.easyteleports.TeleportReplacement;
import java.util.List;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.widgets.Widget;

public interface Replacer
{

	void onConfigChanged(EasyTeleportsConfig config);

	boolean isEnabled();

	List<TeleportReplacement> getReplacements();

	default boolean isApplicableToDialog(Widget root)
	{
		return false;
	}

	default boolean isApplicableToAdventureLog(Widget root)
	{
		return false;
	}

	default boolean isApplicableToJewelleryBox()
	{
		return false;
	}

	default boolean isApplicableToInventory(int itemId)
	{
		return false;
	}

	default EquipmentInventorySlot getEquipmentSlot()
	{
		return null;
	}

}
package com.duckblade.osrs.easyteleports;

import com.duckblade.osrs.easyteleports.replacers.DiaryCape;
import com.duckblade.osrs.easyteleports.replacers.DrakansMedallion;
import com.duckblade.osrs.easyteleports.replacers.KharedstMemoirs;
import com.duckblade.osrs.easyteleports.replacers.NecklaceOfPassage;
import com.duckblade.osrs.easyteleports.replacers.PharaohSceptre;
import com.duckblade.osrs.easyteleports.replacers.Replacer;
import com.duckblade.osrs.easyteleports.replacers.RingOfDueling;
import com.duckblade.osrs.easyteleports.replacers.RingOfShadows;
import com.duckblade.osrs.easyteleports.replacers.SlayerRing;
import com.duckblade.osrs.easyteleports.replacers.XericsTalisman;
import com.google.common.base.Strings;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Binder;
import com.google.inject.Provides;
import com.google.inject.multibindings.Multibinder;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.EquipmentInventorySlot;
import net.runelite.api.MenuEntry;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

@Slf4j
@PluginDescriptor(
	name = "Easy Teleports",
	tags = {"Pharaoh's", "Sceptre", "xeric's", "talisman", "kharedst's", "memoirs"}
)
@Singleton
public class EasyTeleportsPlugin extends Plugin
{

	private static final Map<Integer, EquipmentInventorySlot> ACTION_PARAM_1_TO_EQUIPMENT_SLOT =
		ImmutableMap.<Integer, EquipmentInventorySlot>builder()
			.put(25362447, EquipmentInventorySlot.HEAD)
			.put(25362448, EquipmentInventorySlot.CAPE)
			.put(25362449, EquipmentInventorySlot.AMULET)
			.put(25362457, EquipmentInventorySlot.AMMO)
			.put(25362450, EquipmentInventorySlot.WEAPON)
			.put(25362451, EquipmentInventorySlot.BODY)
			.put(25362452, EquipmentInventorySlot.SHIELD)
			.put(25362453, EquipmentInventorySlot.LEGS)
			.put(25362454, EquipmentInventorySlot.GLOVES)
			.put(25362455, EquipmentInventorySlot.BOOTS)
			.put(25362456, EquipmentInventorySlot.RING)
			.build();

	private static final int ACTION_PARAM_1_INVENTORY = 9764864;

	private static final int GROUP_ID_JEWELLERY_BOX = 590;

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private EasyTeleportsConfig config;

	@Inject
	private Set<Replacer> replacers;

	@Override
	public void configure(Binder binder)
	{
		Multibinder<Replacer> replacers = Multibinder.newSetBinder(binder, Replacer.class);
		replacers.addBinding().to(DiaryCape.class);
		replacers.addBinding().to(DrakansMedallion.class);
		replacers.addBinding().to(KharedstMemoirs.class);
		replacers.addBinding().to(PharaohSceptre.class);
		replacers.addBinding().to(RingOfDueling.class);
		replacers.addBinding().to(RingOfShadows.class);
		replacers.addBinding().to(SlayerRing.class);
		replacers.addBinding().to(XericsTalisman.class);
		replacers.addBinding().to(NecklaceOfPassage.class);
	}

	@Override
	protected void startUp()
	{
		propagateConfig();
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged e)
	{
		if (e.getGroup().equals(EasyTeleportsConfig.CONFIG_GROUP))
		{
			propagateConfig();
		}
	}

	private void propagateConfig()
	{
		this.replacers.forEach(r -> r.onConfigChanged(config));
	}

	@Subscribe
	public void onWidgetLoaded(WidgetLoaded e)
	{
		// chatbox dialog
		if (e.getGroupId() == InterfaceID.DIALOG_OPTION)
		{
			//InterfaceID.DIALOG_OPTION
			Widget chatbox = client.getWidget(ComponentID.DIALOG_OPTION_OPTIONS);
			clientThread.invokeLater(() -> replaceWidgetChildren(chatbox, Replacer::isApplicableToDialog, config.enableShadowedText()));
		}

		// the scroll thing that xeric's talisman uses
		// annoyingly, the header text and teleport entries share a groupId (187.0 vs 187.3),
		// but don't share a parent with that same groupId, their parent is 164.16
		if (e.getGroupId() == InterfaceID.ADVENTURE_LOG)
		{
			clientThread.invokeLater(() ->
			{
				Widget advLogHeader = getAdventureLogHeader();
				replaceWidgetChildren(InterfaceID.ADVENTURE_LOG, 3, (r, w) -> r.isApplicableToAdventureLog(advLogHeader));
			});
			return;
		}

		// jewellery box
		if (e.getGroupId() == GROUP_ID_JEWELLERY_BOX)
		{
			clientThread.invokeLater(() ->
			{
				Widget jewelleryBoxRoot = client.getWidget(GROUP_ID_JEWELLERY_BOX, 0);
				if (jewelleryBoxRoot == null)
				{
					return;
				}

				for (int i = 0; i < 6; i++)
				{
					replaceWidgetChildren(GROUP_ID_JEWELLERY_BOX, 2 + i, (r, w) -> r.isApplicableToJewelleryBox());
				}
			});
		}
	}

	private void replaceWidgetChildren(int groupId, int entriesChildId, BiPredicate<Replacer, Widget> filterSelector)
	{
		Widget root = client.getWidget(groupId, entriesChildId);
		if (root == null)
		{
			return;
		}

		replaceWidgetChildren(root, filterSelector);
	}

	private void replaceWidgetChildren(Widget root, BiPredicate<Replacer, Widget> filterSelector)
	{
		replaceWidgetChildren(root, filterSelector, false);
	}

	private void replaceWidgetChildren(Widget root, BiPredicate<Replacer, Widget> filterSelector, boolean shadowedText)
	{
		Widget[] children = root.getChildren();
		if (children == null)
		{
			return;
		}

		List<TeleportReplacement> applicableReplacements = getApplicableReplacements(r -> filterSelector.test(r, root));
		for (Widget child : children)
		{
			applyReplacement(applicableReplacements, child, Widget::getText, Widget::setText, shadowedText);
		}
	}

	@Subscribe
	public void onMenuEntryAdded(MenuEntryAdded e)
	{
		if (e.getActionParam1() == ACTION_PARAM_1_INVENTORY)
		{
			List<TeleportReplacement> applicableReplacements = getApplicableReplacements(r -> r.isApplicableToInventory(e.getMenuEntry().getItemId()));
			clientThread.invokeLater(() -> applyReplacement(applicableReplacements, e.getMenuEntry(), MenuEntry::getOption, MenuEntry::setOption));
			return;
		}

		EquipmentInventorySlot equipmentSlot = ACTION_PARAM_1_TO_EQUIPMENT_SLOT.get(e.getActionParam1());
		if (equipmentSlot != null)
		{
			List<TeleportReplacement> applicableReplacements = getApplicableReplacements(r -> r.getEquipmentSlot() == equipmentSlot);
			applyReplacement(applicableReplacements, e.getMenuEntry(), MenuEntry::getOption, MenuEntry::setOption);
		}
	}

	private List<TeleportReplacement> getApplicableReplacements(Predicate<Replacer> filter)
	{
		return replacers.stream()
			.filter(Replacer::isEnabled)
			.filter(filter)
			.flatMap(r -> r.getReplacements().stream())
			.collect(Collectors.toList());
	}

	private Widget getAdventureLogHeader()
	{
		Widget adventureLogRoot = client.getWidget(ComponentID.ADVENTURE_LOG_CONTAINER);
		if (adventureLogRoot == null)
		{
			return null;
		}

		Widget[] children = adventureLogRoot.getChildren();
		if (children == null || children.length < 2)
		{
			return null;
		}

		return children[1];
	}

	@Provides
	public EasyTeleportsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(EasyTeleportsConfig.class);
	}

	private static <T> void applyReplacement(List<TeleportReplacement> replacements, T entry, Function<T, String> getter, BiConsumer<T, String> setter)
	{
		applyReplacement(replacements, entry, getter, setter, false);
	}

	private static <T> void applyReplacement(List<TeleportReplacement> replacements, T entry, Function<T, String> getter, BiConsumer<T, String> setter, boolean shadowedText)
	{
		String entryText = null;
		try
		{
			entryText = getter.apply(entry);
			if (Strings.isNullOrEmpty(entryText))
			{
				return;
			}

			for (TeleportReplacement replacement : replacements)
			{
				if (entryText.contains(replacement.getOriginal()))
				{
					if ((replacement.getReplacement().contains("</col>") || replacement.getReplacement().contains("<col=")) && shadowedText && entry instanceof Widget)
					{
						Widget wEntry = ((Widget) entry);
						wEntry.setTextShadowed(true);
						wEntry.revalidate();
					}
					String newText = entryText.replace(replacement.getOriginal(), replacement.getReplacement());
					setter.accept(entry, newText);
				}
			}
		}
		catch (Exception e)
		{
			log.error("Failed to replace option [{}] on entry [{}]", entryText, entry.toString());
		}
	}

}
package com.duckblade.osrs.easyteleports;

import lombok.Value;

@Value
public class TeleportReplacement
{

	private final String original;
	private final String replacement;

}

package com.duckblade.osrs.easyteleports;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup(EasyTeleportsConfig.CONFIG_GROUP)
public interface EasyTeleportsConfig extends Config
{

	String CONFIG_GROUP = "easypharaohsceptre";
	int POSITION_FLAGS = 100;
	int POSITION_PHARAOHS_SCEPTRE = POSITION_FLAGS + 100;
	int POSITION_KHAREDSTS_MEMOIRS = POSITION_PHARAOHS_SCEPTRE + 100;
	int POSITION_XERICS_TALISMAN = POSITION_KHAREDSTS_MEMOIRS + 100;
	int POSITION_RING_OF_DUELING = POSITION_XERICS_TALISMAN + 100;
	int POSITION_DIARY_CAPE = POSITION_RING_OF_DUELING + 100;
	int POSITION_SLAYER_RING = POSITION_DIARY_CAPE + 100;
	int POSITION_DRAKANS = POSITION_SLAYER_RING + 100;
	int POSITION_RING_OF_SHADOWS = POSITION_DRAKANS + 100;
	int POSITION_NECKLACE_OF_PASSAGE = POSITION_RING_OF_SHADOWS + 100;
	int POSITION_TEXT_SHADOWED = POSITION_NECKLACE_OF_PASSAGE + 100;

	@ConfigSection(
		name = "Toggles",
		description = "Turn teleport replacements on or off for specific items.",
		position = POSITION_FLAGS
	)
	String SECTION_ENABLE_FLAGS = "enableFlags";

	@ConfigItem(
		section = SECTION_ENABLE_FLAGS,
		keyName = "enablePharaohSceptre",
		name = "Pharaoh's sceptre",
		description = "Replace teleport entries on the Pharaoh's sceptre with new names.",
		position = POSITION_FLAGS + (POSITION_PHARAOHS_SCEPTRE / 100)
	)
	default boolean enablePharaohSceptre()
	{
		return true;
	}

	@ConfigItem(
		section = SECTION_ENABLE_FLAGS,
		keyName = "enableXericsTalisman",
		name = "Xeric's talisman",
		description = "Replace teleport entries on the Xeric's talisman with new names.",
		position = POSITION_FLAGS + (POSITION_XERICS_TALISMAN / 100)
	)
	default boolean enableXericsTalisman()
	{
		return false;
	}

	@ConfigItem(
		section = SECTION_ENABLE_FLAGS,
		keyName = "enableKharedstsMemoirs",
		name = "Kharedst's memoirs",
		description = "Replace teleport entries on the Kharedst's memoirs / Book of the dead with new names.",
		position = POSITION_FLAGS + (POSITION_KHAREDSTS_MEMOIRS / 100)
	)
	default boolean enableKharedstsMemoirs()
	{
		return false;
	}

	@ConfigItem(
		section = SECTION_ENABLE_FLAGS,
		keyName = "enableRingOfDueling",
		name = "Ring of dueling",
		description = "Replace teleport entries on the Ring of Dueling with new names.",
		position = POSITION_FLAGS + (POSITION_RING_OF_DUELING / 100)
	)
	default boolean enableRingOfDueling()
	{
		return false;
	}

	@ConfigItem(
		section = SECTION_ENABLE_FLAGS,
		keyName = "enableDiaryCape",
		name = "Achievement diary cape",
		description = "Replace teleport entries on the Achievement diary cape with new names.",
		position = POSITION_FLAGS + (POSITION_DIARY_CAPE / 100)
	)
	default boolean enableDiaryCape()
	{
		return false;
	}

	@ConfigItem(
		section = SECTION_ENABLE_FLAGS,
		keyName = "enableSlayerRing",
		name = "Slayer ring",
		description = "Replace teleport entries on the Slayer ring with new names.",
		position = POSITION_FLAGS + (POSITION_SLAYER_RING / 100)
	)
	default boolean enableSlayerRing()
	{
		return false;
	}

	@ConfigItem(
		section = SECTION_ENABLE_FLAGS,
		keyName = "enableDrakans",
		name = "Drakan's medallion",
		description = "Replace teleport entries on Drakan's medallion with new names.",
		position = POSITION_FLAGS + (POSITION_DRAKANS / 100)
	)
	default boolean enableDrakans()
	{
		return false;
	}

	@ConfigItem(
		section = SECTION_ENABLE_FLAGS,
		keyName = "enableRingOfShadows",
		name = "Ring of Shadows (DT2)",
		description = "Replace teleport entries on the Ring of shadows (DT2 ring) with new names.",
		position = POSITION_FLAGS + (POSITION_RING_OF_SHADOWS / 100)
	)
	default boolean enableRingOfShadows()
	{
		return false;
	}

	@ConfigItem(
		section = SECTION_ENABLE_FLAGS,
		keyName = "enableNecklaceOfPassage",
		name = "Necklace Of Passage",
		description = "Replace teleport entries on the Necklace Of Passage with new names.",
		position = POSITION_FLAGS + (POSITION_NECKLACE_OF_PASSAGE / 100)
	)
	default boolean enableNecklaceOfPassage()
	{
		return false;
	}

	@ConfigItem(
		section = SECTION_ENABLE_FLAGS,
		keyName = "enableShadowedText",
		name = "Shadow Dialogue Text",
		description = "Puts a shadow around the text in dialogues (only when using coloured text) to make them stand out more.",
		position = POSITION_FLAGS + (POSITION_TEXT_SHADOWED / 100)
	)
	default boolean enableShadowedText()
	{
		return true;
	}

	@ConfigSection(
		name = "Pharaoh's sceptre",
		description = "Replacement text for the Pharaoh's sceptre teleport locations.",
		position = POSITION_PHARAOHS_SCEPTRE,
		closedByDefault = true
	)
	String SECTION_PHARAOHS_SCEPTRE = "sectionCustomReplacements"; // legacy config name

	@ConfigItem(
		keyName = "replacementJalsavrah",
		name = "Jalsavrah",
		description = "Replace Jalsavrah",
		section = SECTION_PHARAOHS_SCEPTRE,
		position = POSITION_PHARAOHS_SCEPTRE + 1
	)
	default String replacementJalsavrah()
	{
		return "Pyramid Plunder";
	}

	@ConfigItem(
		keyName = "replacementJaleustrophos",
		name = "Jaleustrophos",
		description = "Replace Jaleustrophos",
		section = SECTION_PHARAOHS_SCEPTRE,
		position = POSITION_PHARAOHS_SCEPTRE + 2
	)
	default String replacementJaleustrophos()
	{
		return "Agility Pyramid";
	}

	@ConfigItem(
		keyName = "replacementJaldraocht",
		name = "Jaldraocht",
		description = "Replace Jaldraocht",
		section = SECTION_PHARAOHS_SCEPTRE,
		position = POSITION_PHARAOHS_SCEPTRE + 3
	)
	default String replacementJaldraocht()
	{
		return "Ancients Pyramid";
	}

	@ConfigItem(
		keyName = "replacementJaltevas",
		name = "Jaltevas",
		description = "Replace Jaltevas",
		section = SECTION_PHARAOHS_SCEPTRE,
		position = POSITION_PHARAOHS_SCEPTRE + 4
	)
	default String replacementJaltevas()
	{
		return "Necropolis";
	}

	@ConfigSection(
		name = "Kharedst's memoirs",
		description = "Replacement text for the Kharedst's memoirs teleport locations.",
		position = POSITION_KHAREDSTS_MEMOIRS,
		closedByDefault = true
	)
	String SECTION_KHAREDSTS_MEMOIRS = "sectionKharedstsMemoirs";

	@ConfigItem(
		keyName = "replacementLancalliums",
		name = "Lunch by the Lancalliums",
		description = "Replace Lunch by the Lancalliums",
		section = SECTION_KHAREDSTS_MEMOIRS,
		position = POSITION_KHAREDSTS_MEMOIRS + 1
	)
	default String replacementLancalliums()
	{
		return "<col=2aae4f>Hosidius</col>";
	}

	@ConfigItem(
		keyName = "replacementFishers",
		name = "The Fisher's Flute",
		description = "Replace The Fisher's Flute",
		section = SECTION_KHAREDSTS_MEMOIRS,
		position = POSITION_KHAREDSTS_MEMOIRS + 2
	)
	default String replacementFishers()
	{
		return "<col=2a94ae>Port Piscarilius</col>";
	}

	@ConfigItem(
		keyName = "replacementHistory",
		name = "History and Hearsay",
		description = "Replace History and Hearsay",
		section = SECTION_KHAREDSTS_MEMOIRS,
		position = POSITION_KHAREDSTS_MEMOIRS + 3
	)
	default String replacementHistory()
	{
		return "<col=ae2a2a>Shayzien</col>";
	}

	@ConfigItem(
		keyName = "replacementJubilation",
		name = "Jewellery of Jubilation",
		description = "Replace Jewellery of Jubilation",
		section = SECTION_KHAREDSTS_MEMOIRS,
		position = POSITION_KHAREDSTS_MEMOIRS + 4
	)
	default String replacementJubilation()
	{
		return "<col=ae842a>Lovakengj</col>";
	}

	@ConfigItem(
		keyName = "replacementDisposition",
		name = "A Dark Disposition",
		description = "Replace A Dark Disposition",
		section = SECTION_KHAREDSTS_MEMOIRS,
		position = POSITION_KHAREDSTS_MEMOIRS + 5
	)
	default String replacementDisposition()
	{
		return "<col=8800ff>Arceuus</col>";
	}

	@ConfigSection(
		name = "Xeric's talisman",
		description = "Replacement text for the Xeric's talisman teleport locations.",
		position = POSITION_XERICS_TALISMAN,
		closedByDefault = true
	)
	String SECTION_XERICS_TALISMAN = "sectionXericsTalisman";

	@ConfigItem(
		keyName = "replacementLookout",
		name = "Xeric's Look-out",
		description = "Replace Xeric's Look-out",
		section = SECTION_XERICS_TALISMAN,
		position = POSITION_XERICS_TALISMAN + 1
	)
	default String replacementLookout()
	{
		return "Shayzien";
	}

	@ConfigItem(
		keyName = "replacementGlade",
		name = "Xeric's Glade",
		description = "Replace Xeric's Glade",
		section = SECTION_XERICS_TALISMAN,
		position = POSITION_XERICS_TALISMAN + 2
	)
	default String replacementGlade()
	{
		return "Hosidius";
	}

	@ConfigItem(
		keyName = "replacementInferno",
		name = "Xeric's Inferno",
		description = "Replace Xeric's Inferno",
		section = SECTION_XERICS_TALISMAN,
		position = POSITION_XERICS_TALISMAN + 3
	)
	default String replacementInferno()
	{
		return "Lovakengj";
	}

	@ConfigItem(
		keyName = "replacementHeart",
		name = "Xeric's Heart",
		description = "Replace Xeric's Heart",
		section = SECTION_XERICS_TALISMAN,
		position = POSITION_XERICS_TALISMAN + 4
	)
	default String replacementHeart()
	{
		return "Kourend Castle";
	}

	@ConfigItem(
		keyName = "replacementHonour",
		name = "Xeric's Honour",
		description = "Replace Xeric's Honour",
		section = SECTION_XERICS_TALISMAN,
		position = POSITION_XERICS_TALISMAN + 5
	)
	default String replacementHonour()
	{
		return "Chambers of Xeric";
	}

	@ConfigSection(
		name = "Ring of dueling",
		description = "Replacement text for the ring of dueling teleport locations.",
		position = POSITION_RING_OF_DUELING,
		closedByDefault = true
	)
	String SECTION_RING_OF_DUELING = "sectionRingOfDueling";

	@ConfigItem(
		keyName = "replacementPvPArena",
		name = "Emir's Arena",
		description = "Replace Emir's Arena",
		section = SECTION_RING_OF_DUELING,
		position = POSITION_RING_OF_DUELING + 1
	)
	default String replacementEmirsArena()
	{
		return "Emir's Arena";
	}

	@ConfigItem(
		keyName = "replacementCastleWars",
		name = "Castle Wars",
		description = "Replace Castle Wars",
		section = SECTION_RING_OF_DUELING,
		position = POSITION_RING_OF_DUELING + 2
	)
	default String replacementCastleWars()
	{
		return "Castle Wars";
	}

	@ConfigItem(
		keyName = "replacementFeroxEnclave",
		name = "Ferox Enclave",
		description = "Replace Ferox Enclave",
		section = SECTION_RING_OF_DUELING,
		position = POSITION_RING_OF_DUELING + 3
	)
	default String replacementFeroxEnclave()
	{
		return "Ferox Enclave";
	}

	@ConfigItem(
		keyName = "replacementFortisColosseum",
		name = "Fortis Colosseum",
		description = "Replace Fortis Colosseum",
		section = SECTION_RING_OF_DUELING,
		position = POSITION_RING_OF_DUELING + 4
	)
	default String replacementFortisColosseum()
	{
		return "Fortis Colosseum";
	}

	@ConfigSection(
		name = "Achievement Diary Cape",
		description = "Replacement text for the Achievement diary cape teleport locations.",
		position = POSITION_DIARY_CAPE,
		closedByDefault = true
	)
	String SECTION_DIARY_CAPE = "sectionDiaryCape";

	@ConfigItem(
		keyName = "replacementArdougne",
		name = "Ardougne: Two-pints",
		description = "Replace Ardougne: Two-pints",
		section = SECTION_DIARY_CAPE,
		position = POSITION_DIARY_CAPE + 1
	)
	default String replacementArdougne()
	{
		return "Ardougne: Bar";
	}

	@ConfigItem(
		keyName = "replacementDesert",
		name = "Desert: Jarr",
		description = "Replace Desert: Jarr",
		section = SECTION_DIARY_CAPE,
		position = POSITION_DIARY_CAPE + 2
	)
	default String replacementDesert()
	{
		return "Desert: Shantay Pass";
	}

	@ConfigItem(
		keyName = "replacementFalador",
		name = "Falador: Sir Rebral",
		description = "Replace Falador: Sir Rebral",
		section = SECTION_DIARY_CAPE,
		position = POSITION_DIARY_CAPE + 3
	)
	default String replacementFalador()
	{
		return "Falador: Castle";
	}

	@ConfigItem(
		keyName = "replacementFremennik",
		name = "Fremennik: Thorodin",
		description = "Replace Fremennik: Thorodin",
		section = SECTION_DIARY_CAPE,
		position = POSITION_DIARY_CAPE + 4
	)
	default String replacementFremennik()
	{
		return "Fremennik: POH Portal";
	}

	@ConfigItem(
		keyName = "replacementKandarin",
		name = "Kandarin: Flax keeper",
		description = "Replace Kandarin: Flax keeper",
		section = SECTION_DIARY_CAPE,
		position = POSITION_DIARY_CAPE + 5
	)
	default String replacementKandarin()
	{
		return "Kandarin: Flax";
	}

	@ConfigItem(
		keyName = "replacementKaramjaJackie",
		name = "Karamja: Pirate Jackie the Fruit",
		description = "Replace Karamja: Pirate Jackie the Fruit",
		section = SECTION_DIARY_CAPE,
		position = POSITION_DIARY_CAPE + 6
	)
	default String replacementKaramjaJackie()
	{
		return "Karamja: Agility Arena";
	}

	@ConfigItem(
		keyName = "replacementKaramjaKaleb",
		name = "Karamja: Kaleb Paramaya (retired)",
		description = "Replace Karamja: Kaleb Paramaya (retired)",
		section = SECTION_DIARY_CAPE,
		position = POSITION_DIARY_CAPE + 7
	)
	default String replacementKaramjaKaleb()
	{
		return "Karamja: Shilo Village";
	}

	@ConfigItem(
		keyName = "replacementKaramjaForester",
		name = "Karamja: Jungle forester (retired)",
		description = "Replace Karamja: Jungle forester (retired)",
		section = SECTION_DIARY_CAPE,
		position = POSITION_DIARY_CAPE + 8
	)
	default String replacementKaramjaForester()
	{
		return "Karamja: Kharazi Jungle";
	}

	@ConfigItem(
		keyName = "replacementKaramjaTzhaar",
		name = "Karamja: TzHaar-Mej (retired)",
		description = "Replace Karamja: TzHaar-Mej (retired)",
		section = SECTION_DIARY_CAPE,
		position = POSITION_DIARY_CAPE + 9
	)
	default String replacementKaramjaTzhaar()
	{
		return "Karamja: Mor-Ul-Rek";
	}

	@ConfigItem(
		keyName = "replacementKourend",
		name = "Kourend & Kebos: Elise",
		description = "Replace Kourend & Kebos: Elise",
		section = SECTION_DIARY_CAPE,
		position = POSITION_DIARY_CAPE + 10
	)
	default String replacementKourend()
	{
		return "Kourend: Castle";
	}

	@ConfigItem(
		keyName = "replacementLumbridge",
		name = "Lumbridge & Draynor: Hatius Cosaintus",
		description = "Replace Lumbridge & Draynor: Hatius Cosaintus",
		section = SECTION_DIARY_CAPE,
		position = POSITION_DIARY_CAPE + 11
	)
	default String replacementLumbridge()
	{
		return "Lumbridge: Town Square";
	}

	@ConfigItem(
		keyName = "replacementMorytania",
		name = "Morytania: Le-sabrè",
		description = "Replace Morytania: Le-sabrè",
		section = SECTION_DIARY_CAPE,
		position = POSITION_DIARY_CAPE + 12
	)
	default String replacementMorytania()
	{
		return "Morytania: Canifis";
	}

	@ConfigItem(
		keyName = "replacementVarrock",
		name = "Varrock: Toby",
		description = "Replace Varrock: Toby",
		section = SECTION_DIARY_CAPE,
		position = POSITION_DIARY_CAPE + 13
	)
	default String replacementVarrock()
	{
		return "Varrock: Rooftops";
	}

	@ConfigItem(
		keyName = "replacementWilderness",
		name = "Wilderness: Lesser Fanatic",
		description = "Wilderness: Lesser Fanatic",
		section = SECTION_DIARY_CAPE,
		position = POSITION_DIARY_CAPE + 14
	)
	default String replacementWilderness()
	{
		return "Wilderness: Edgeville";
	}

	@ConfigItem(
		keyName = "replacementWestern",
		name = "Western Provinces: Elder Gnome Child",
		description = "Replace Western Provinces: Elder Gnome Child",
		section = SECTION_DIARY_CAPE,
		position = POSITION_DIARY_CAPE + 15
	)
	default String replacementWestern()
	{
		return "Western: Gnome Stronghold";
	}

	@ConfigItem(
		keyName = "replacementTwiggy",
		name = "Twiggy O'Korn",
		description = "Replace Twiggy O'Korn",
		section = SECTION_DIARY_CAPE,
		position = POSITION_DIARY_CAPE + 16
	)
	default String replacementTwiggy()
	{
		return "Diary Master: Draynor Village";
	}

	@ConfigSection(
		name = "Slayer ring",
		description = "Replacement text for the Slayer ring teleport locations.",
		position = POSITION_SLAYER_RING,
		closedByDefault = true
	)
	String SECTION_SLAYER_RING = "sectionSlayerRing";

	@ConfigItem(
		keyName = "replacementSlayerStronghold",
		name = "Stronghold Slayer Cave",
		description = "Replace Stronghold Slayer Cave",
		section = SECTION_SLAYER_RING,
		position = POSITION_SLAYER_RING + 1
	)
	default String replacementSlayerStronghold()
	{
		return "Gnome Stronghold Caves";
	}

	@ConfigItem(
		keyName = "replacementSlayerTower",
		name = "Morytania Slayer Tower",
		description = "Replace Morytania Slayer Tower",
		section = SECTION_SLAYER_RING,
		position = POSITION_SLAYER_RING + 2
	)
	default String replacementSlayerTower()
	{
		return "Slayer Tower";
	}

	@ConfigItem(
		keyName = "replacementSlayerRellekka",
		name = "Rellekka Slayer Caves",
		description = "Replace Rellekka Slayer Caves",
		section = SECTION_SLAYER_RING,
		position = POSITION_SLAYER_RING + 3
	)
	default String replacementSlayerRellekka()
	{
		return "Rellekka Caves";
	}

	@ConfigItem(
		keyName = "replacementTarns",
		name = "Tarn's Lair",
		description = "Replace Tarn's Lair",
		section = SECTION_SLAYER_RING,
		position = POSITION_SLAYER_RING + 4
	)
	default String replacementTarns()
	{
		return "Haunted Mine";
	}

	@ConfigItem(
		keyName = "replacementDarkBeasts",
		name = "Dark Beasts",
		description = "Replace Dark Beasts",
		section = SECTION_SLAYER_RING,
		position = POSITION_SLAYER_RING + 5
	)
	default String replacementDarkBeasts()
	{
		return "ME2 Caves";
	}

	@ConfigSection(
		name = "Drakan's medallion",
		description = "Replacement text for Drakan's medallion teleport locations.",
		position = POSITION_DRAKANS,
		closedByDefault = true
	)
	String SECTION_DRAKANS = "sectionDrakans";

	@ConfigItem(
		keyName = "replacementVerSinhaza",
		name = "Ver Sinhaza",
		description = "Replace Ver Sinhaza",
		section = SECTION_DRAKANS,
		position = POSITION_DRAKANS + 1
	)
	default String replacementVerSinhaza()
	{
		return "Theatre of Blood";
	}

	@ConfigItem(
		keyName = "replacementDarkmeyer",
		name = "Darkmeyer",
		description = "Replace Darkmeyer",
		section = SECTION_DRAKANS,
		position = POSITION_DRAKANS + 2
	)
	default String replacementDarkmeyer()
	{
		return "Vampyre City";
	}

	@ConfigItem(
		keyName = "replacementSlepe",
		name = "Slepe",
		description = "Replace Slepe",
		section = SECTION_DRAKANS,
		position = POSITION_DRAKANS + 3
	)
	default String replacementSlepe()
	{
		return "Nightmare";
	}

	@ConfigSection(
		name = "Ring of shadows (DT2)",
		description = "Replacement text for the Ring of shadows (DT2) teleport locations.",
		position = POSITION_RING_OF_SHADOWS,
		closedByDefault = true
	)
	String SECTION_RING_OF_SHADOWS = "sectionRingOfShadows";

	@ConfigItem(
		keyName = "replacementAncientVault",
		name = "The Ancient Vault",
		description = "Replace The Ancient Vault",
		section = SECTION_RING_OF_SHADOWS,
		position = POSITION_RING_OF_SHADOWS + 1
	)
	default String replacementAncientVault()
	{
		return "<col=aea92a>DT2 Vault</col>";
	}

	@ConfigItem(
		keyName = "replacementGhorrockDungeon",
		name = "Ghorrock Dungeon",
		description = "Replace Ghorrock Dungeon",
		section = SECTION_RING_OF_SHADOWS,
		position = POSITION_RING_OF_SHADOWS + 2
	)
	default String replacementGhorrockDungeon()
	{
		return "<col=2a94ae>Duke Sucellus</col>";
	}

	@ConfigItem(
		keyName = "replacementScar",
		name = "The Scar",
		description = "Replace The Scar",
		section = SECTION_RING_OF_SHADOWS,
		position = POSITION_RING_OF_SHADOWS + 3
	)
	default String replacementScar()
	{
		return "<col=ae2a43>Leviathan</col>";
	}

	@ConfigItem(
		keyName = "replacementLassarUndercity",
		name = "Lassar Undercity",
		description = "Replace Lassar Undercity",
		section = SECTION_RING_OF_SHADOWS,
		position = POSITION_RING_OF_SHADOWS + 4
	)
	default String replacementLassarUndercity()
	{
		return "<col=5f2aae>Whisperer</col>";
	}

	@ConfigItem(
		keyName = "replacementStranglewood",
		name = "The Stranglewood",
		description = "Replace The Stranglewood",
		section = SECTION_RING_OF_SHADOWS,
		position = POSITION_RING_OF_SHADOWS + 5
	)
	default String replacementStranglewood()
	{
		return "<col=ae2a2a>Vardorvis</col>";
	}

	@ConfigSection(
		name = "Necklace Of Passage",
		description = "Replacement text for the Necklace of Passage teleport locations.",
		position = POSITION_NECKLACE_OF_PASSAGE,
		closedByDefault = true
	)
	String SECTION_NECKLACE_OF_PASSAGE = "sectionNecklaceOfPassage";

	@ConfigItem(
		keyName = "replacementWizardTower",
		name = "Wizard's Tower",
		description = "Replace Wizard's Tower",
		section = SECTION_NECKLACE_OF_PASSAGE,
		position = POSITION_NECKLACE_OF_PASSAGE + 1
	)
	default String replacementWizardsTower()
	{
		return "Wizard's Tower";
	}

	@ConfigItem(
		keyName = "replacementOutpost",
		name = "The Outpost",
		description = "Replace The Outpost",
		section = SECTION_NECKLACE_OF_PASSAGE,
		position = POSITION_NECKLACE_OF_PASSAGE + 2
	)
	default String replacementOutpost()
	{
		return "NW of West Ardougne";
	}

	@ConfigItem(
		keyName = "replacementEagleEyrie",
		name = "Eagle's Eyrie",
		description = "Replace Eagle's Eyrie",
		section = SECTION_NECKLACE_OF_PASSAGE,
		position = POSITION_NECKLACE_OF_PASSAGE + 3
	)
	default String replacementEagleEyrie()
	{
		return "NW of Uzer (Desert)";
	}
}
package com.duckblade.osrs;

import com.duckblade.osrs.easyteleports.EasyTeleportsPlugin;
import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class EasyTeleportsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(EasyTeleportsPlugin.class);
		RuneLite.main(args);
	}
}
