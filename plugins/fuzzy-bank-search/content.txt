package com.github.i.fuzzybanksearch.matcher.fzf;

public enum OrderBy {
    SCORE, LENGTH
}

/*
 * Copyright (c) 2020 Jan Graßegger
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.github.i.fuzzybanksearch.matcher.fzf;

import java.util.List;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

public class Normalizer {

    private static final Pattern diacriticalMarksPattern = Pattern
            .compile("\\p{Block=CombiningDiacriticalMarks}+");

    /**
     * Normalizes a string by applying NFKD normalization and removing all diacritical marks
     * afterwards.
     *
     * @param string to be normalized
     * @return normalized string
     */
    public static String normalize(final String string) {
        final var normalizedString = java.text.Normalizer.normalize(
                string, java.text.Normalizer.Form.NFKD);
        return diacriticalMarksPattern.matcher(normalizedString).replaceAll("");
    }

    public static List<String> normalize(final List<String> strings) {
        return strings.parallelStream().map(Normalizer::normalize).collect(Collectors.toList());
    }
}

/*
 * Copyright (c) 2020 Jan Graßegger
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.github.i.fuzzybanksearch.matcher.fzf;

import java.util.Arrays;

public class Result {

    public static Result empty(final String text, int itemIndex) {
        return new Result(text, 0, 0, 0, null, itemIndex);
    }

    public static Result noMatch(final String text, int itemIndex) {
        return new Result(text, -1, -1, 0, null, itemIndex);
    }

    private final String text;
    private final int start;
    private final int end;
    private final int score;
    private final int[] positions;
    private final int itemIndex;

    public Result(String text, int start, int end, int score, int[] positions, int itemIndex) {
        this.text = text;
        this.start = start;
        this.end = end;
        this.score = score;
        this.positions = positions;
        this.itemIndex = itemIndex;
    }

    public String getText() {
        return text;
    }

    public int getStart() {
        return start;
    }

    public int getEnd() {
        return end;
    }

    public int getScore() {
        return score;
    }

    public int[] getPositions() {
        return positions;
    }

    public boolean isMatch() {
        return start != -1 && end != -1;
    }

    public int getItemIndex() {
        return itemIndex;
    }

    @Override
    public String toString() {
        return "Result{"
               + "text='" + text + '\''
               + ", start=" + start
               + ", end=" + end
               + ", score=" + score
               + ", positions=" + Arrays.toString(positions)
               + ", itemIndex=" + itemIndex
               + '}';
    }
}

package com.github.i.fuzzybanksearch.matcher.fzf;

/*
 * Copyright (c) 2020 Jan Graßegger
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */



import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;


/**
 * Class to filter and rank and items
 * Based on: https://github.com/junegunn/fzf/blob/master/src/algo/algo.go
 */
public class FuzzyMatcherV1 {

    static final int SCORE_MATCH = 16;
    static final int SCORE_GAP_START = -3;
    static final int SCORE_GAP_EXTENSION = -1;

    static final int BONUS_BOUNDARY = SCORE_MATCH / 2;
    static final int BONUS_NON_WORD = SCORE_MATCH / 2;
    static final int BONUS_CAMEL_123 = BONUS_BOUNDARY + SCORE_GAP_EXTENSION;
    static final int BONUS_CONSECUTIVE = -(SCORE_GAP_START + SCORE_GAP_EXTENSION);
    static final int BONUS_FIRST_CHAR_MULTIPLIER = 2;

    private final List<String> items;
    private final OrderBy orderBy;
    private final boolean normalize;
    private final List<String> normalizedItems;
    private final boolean caseSensitive;

    public FuzzyMatcherV1(
            final List<String> items,
            final OrderBy orderBy,
            final boolean normalize,
            final boolean caseSensitive
    ) {
        this.items = items;
        this.orderBy = orderBy;
        this.normalize = normalize;
        this.normalizedItems = normalize ? Normalizer.normalize(items) : items;
        this.caseSensitive = caseSensitive;
    }

    public List<String> match(final String pattern) {
        if (pattern.isEmpty()) {
            return items;
        }

        final var lowercasePattern = caseSensitive ? pattern : pattern.toLowerCase();
        final var normalizedPattern = normalize ? Normalizer.normalize(lowercasePattern)
                : lowercasePattern;

        return IntStream.range(0, items.size()).parallel()
                .mapToObj(i -> match(items.get(i), normalizedItems.get(i), normalizedPattern, i))
                .filter(Result::isMatch)
                .sorted(new ResultComparator(orderBy))
                .map(Result::getText)
                .collect(Collectors.toList());
    }

    private Result match(
            final String text,
            final String normalizedText,
            final String pattern,
            final int itemIndex
    ) {
        var queryIndex = 0;
        var startIndex = -1;
        var endIndex = -1;

        for (int textIndex = 0; textIndex < normalizedText.length(); textIndex++) {
            var textChar = normalizedText.charAt(textIndex);
            final char queryChar = pattern.charAt(queryIndex);

            final var charClass = CharClass.forChar(textChar);

            if (!caseSensitive && charClass == CharClass.UPPER) {
                textChar = Character.toLowerCase(textChar);
            }

            if (textChar == queryChar) {

                if (startIndex == -1) {
                    startIndex = textIndex;
                }

                if (queryIndex == pattern.length() - 1) {
                    endIndex = textIndex + 1;
                    break;
                }

                queryIndex++;
            }
        }

        if (startIndex != -1 && endIndex != -1) {
            for (int textIndex = endIndex - 1; textIndex > startIndex; textIndex--) {
                final var textChar = normalizedText.charAt(textIndex);
                final var queryChar = pattern.charAt(queryIndex);

                if (textChar == queryChar) {
                    if (queryIndex == 0) {
                        startIndex = textIndex;
                        break;
                    }

                    queryIndex--;
                }
            }

            return calculateScore(text, normalizedText, pattern, startIndex, endIndex, itemIndex);
        }

        return Result.noMatch(text, itemIndex);
    }

    private Result calculateScore(
            final String text,
            final String normalizedText,
            final String pattern,
            final int startIndex,
            final int endIndex,
            final int itemIndex
    ) {
        var patternIndex = 0;
        var score = 0;
        var consecutive = 0;
        var firstBonus = 0;
        var inGap = false;
        var pos = new int[pattern.length()];

        var prevClass = startIndex > 0 ? CharClass.forChar(normalizedText.charAt(startIndex - 1))
                : CharClass.NON_WORD;

        for (var i = startIndex; i < endIndex; i++) {
            var c = normalizedText.charAt(i);
            final var charClass = CharClass.forChar(c);

            if (!caseSensitive && charClass == CharClass.UPPER) {
                c = Character.toLowerCase(c);
            }

            if (c == pattern.charAt(patternIndex)) {
                pos[patternIndex] = i;

                score += SCORE_MATCH;
                var bonus = bonusFor(prevClass, charClass);

                if (consecutive == 0) {
                    firstBonus += bonus;
                } else {
                    // Break consecutive chunk
                    if (bonus == BONUS_BOUNDARY) {
                        firstBonus = bonus;
                    }
                    bonus = Math.max(Math.max(bonus, firstBonus), BONUS_CONSECUTIVE);
                }

                if (patternIndex == 0) {
                    score += bonus * BONUS_FIRST_CHAR_MULTIPLIER;
                } else {
                    score += bonus;
                }
                inGap = false;
                consecutive++;
                patternIndex++;
            } else {
                if (inGap) {
                    score += SCORE_GAP_EXTENSION;
                } else {
                    score += SCORE_GAP_START;
                }

                inGap = true;
                consecutive = 0;
                firstBonus = 0;
            }
            prevClass = charClass;
        }

        return new Result(text, startIndex, endIndex, score, pos, itemIndex);
    }

    private int bonusFor(CharClass prevClass, CharClass charClass) {
        if (prevClass == CharClass.NON_WORD && charClass != CharClass.NON_WORD) {
            return BONUS_BOUNDARY;
        } else if (prevClass == CharClass.LOWER && charClass == CharClass.UPPER
                || prevClass != CharClass.NUMBER && charClass == CharClass.NUMBER) {
            // camelCase letter123
            return BONUS_CAMEL_123;
        } else if (charClass == CharClass.NON_WORD) {
            return BONUS_NON_WORD;
        }
        return 0;
    }

    private enum CharClass {
        LOWER, UPPER, LETTER, NUMBER, NON_WORD;

        public static CharClass forChar(char c) {
            if (Character.isLowerCase(c)) {
                return LOWER;
            } else if (Character.isUpperCase(c)) {
                return UPPER;
            } else if (Character.isDigit(c)) {
                return NUMBER;
            } else if (Character.isLetter(c)) {
                return LETTER;
            }
            return NON_WORD;
        }
    }
}
/*
 * Copyright (c) 2020 Jan Graßegger
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.github.i.fuzzybanksearch.matcher.fzf;



import java.util.Comparator;

public class ResultComparator implements Comparator<Result> {

    private final OrderBy orderBy;

    public ResultComparator(final OrderBy orderBy) {

        this.orderBy = orderBy;
    }

    @Override
    public int compare(Result r1, Result r2) {
        if (orderBy == OrderBy.SCORE) {
            return Integer.compare(r2.getScore(), r1.getScore());
        }
        return Integer.compare(r1.getText().trim().length(), r2.getText().trim().length());
    }
}

package com.github.i.fuzzybanksearch.matcher;

import java.util.Collection;
import java.util.Map;
import java.util.Set;

public abstract class Matcher {
    protected Map<Integer, String> itemIdsToNames = null;

   public abstract Set<String> match(String query, int limit);
}

package com.github.i.fuzzybanksearch.matcher;

import com.github.i.fuzzybanksearch.matcher.fzf.FuzzyMatcherV1;
import com.github.i.fuzzybanksearch.matcher.fzf.OrderBy;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Set;
import java.util.stream.Collectors;

public class FZFMatcher extends Matcher {
    private final FuzzyMatcherV1 matcher;

    public FZFMatcher(Collection<String> dictionary) {
        this.matcher = new FuzzyMatcherV1(
                        new ArrayList<>(dictionary),
                        OrderBy.SCORE,
                        true,
                        false);
    }

    @Override
    public Set<String> match(String query, int limit) {
        return this.matcher.match(query)
                .stream()
                .limit(limit)
                .collect(Collectors.toSet());
    }
}

package com.github.i.fuzzybanksearch.matcher;


package com.github.i.fuzzybanksearch.matcher;

import org.apache.commons.text.similarity.JaroWinklerDistance;
import org.apache.commons.text.similarity.SimilarityScore;

import java.util.Collection;
import java.util.Comparator;
import java.util.Set;
import java.util.stream.Collectors;

public class JaroWinklerMatcher extends Matcher {
    private final SimilarityScore<Double> baseAlgorithm = new JaroWinklerDistance();
    private final Collection<String> dictionary;

    public JaroWinklerMatcher( Collection<String> dictionary) {
        this.dictionary = dictionary;
    }

    public Set<String> match(String query, int limit) {
        return this.dictionary
                .stream()
                .map(term -> new MatchResult(term, this.score(query, term)))
                .sorted(Comparator.comparingDouble(res -> (-res.getScore())))
                .map(MatchResult::getTerm)
                .limit(limit)
                .collect(Collectors.toSet());
    }

    private Double score(String query, String itemName) {
        query = query.toLowerCase().replace('-', ' ');
        itemName = itemName.toLowerCase().replace('-', ' ');

        // we raise the score for items that share a prefix with the query
        int prefixLen = 0;
        int maxLen = Math.min(query.length(), itemName.length());
        while (prefixLen < maxLen && query.charAt(prefixLen) == itemName.charAt(prefixLen))
        {
            prefixLen++;
        }
        double prefixScore = ((double) prefixLen) / query.length() - 0.25;

        // and also raise the score for string "closeness"
        double proximityScore = baseAlgorithm.apply(query, itemName) - 0.25;
        return prefixScore + proximityScore;
    }

    private static class MatchResult {
        private final String term;
        private final double score;

        public MatchResult(String term, double score) {
            this.term = term;
            this.score = score;
        }

        public double getScore() {
            return this.score;
        }

        public String getTerm() {
            return this.term;
        }
    }
}

package com.github.i.fuzzybanksearch;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Keybind;

import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;

@ConfigGroup("fuzzybanksearch")
public interface FuzzyBankSearchConfig extends Config
{
	@ConfigItem(
			keyName = "hotkey",
			name = "Hot Key",
			description = "Hot key to enable fuzzy searching"
	)
	default Keybind hotkey() { return new Keybind(KeyEvent.VK_T, InputEvent.CTRL_DOWN_MASK);
	}

	@ConfigItem(
			keyName = "limit",
			name = "Limit",
			description = "Number of results to return"
	)
	default int  limit() { return 10; }

	@ConfigItem(
			keyName = "useFzf",
			name = "Use FZF",
			description = "Uses fzf when enabled, jaro winker if disabled"
	)
	default boolean  useFzf() { return true; }
}

package com.github.i.fuzzybanksearch;

import com.github.i.fuzzybanksearch.matcher.FZFMatcher;
import com.github.i.fuzzybanksearch.matcher.JaroWinklerMatcher;
import com.github.i.fuzzybanksearch.matcher.Matcher;
import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.InventoryID;
import net.runelite.api.ItemComposition;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.events.ScriptCallbackEvent;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemManager;
import net.runelite.client.input.KeyListener;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.bank.BankSearch;

import javax.inject.Inject;
import java.awt.event.KeyEvent;
import java.util.Arrays;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

@Slf4j
@PluginDescriptor(name = "Fuzzy Bank Search")
public class FuzzyBankSearchPlugin extends Plugin {
	@Inject
	private Client client;

	@Inject
	private FuzzyBankSearchConfig config;

	@Inject
	private KeyManager keyManager;

	@Inject
	BankSearch bankSearch;

	@Inject
	ItemManager itemManager;

	@Override
	protected void startUp() {
		keyManager.registerKeyListener(searchHotkeyListener);
	}

	@Override
	protected void shutDown() {
		keyManager.unregisterKeyListener(searchHotkeyListener);
	}

	@Provides
	FuzzyBankSearchConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(FuzzyBankSearchConfig.class);
	}

	private final static String BANK_SEARCH_FILTER_EVENT = "bankSearchFilter";

	// these two fields are used to cache results
	String oldQuery = "";
	Set<String> cachedResults = null;

	private Matcher fzfMatcher = null;
	private Matcher jaroWinklerMatcher = null;

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event) {
		// reindex every time the bank is opened
		if (event.getContainerId() == InventoryID.BANK.getId()) {
			this.itemIdsToNames = Arrays.stream(client.getItemContainer(InventoryID.BANK).getItems())
					.map(item -> this.itemManager.getItemComposition(item.getId()))
					.collect(Collectors.toMap(
							ItemComposition::getId,
							ItemComposition::getName,
							(x, __) -> x));

			this.fzfMatcher = new FZFMatcher(this.itemIdsToNames.values());
			this.jaroWinklerMatcher = new JaroWinklerMatcher(this.itemIdsToNames.values());
		}
	}

	private Map<Integer, String> itemIdsToNames = null;


	public boolean filterBankSearch(final int itemId, final String query) {
		if (query.equals("")) {
			return true;
		}

		// previous results are cached until in text input changes.
		// the client will try to update every 40ms
		if (!oldQuery.equals(query) || cachedResults == null) {
			Matcher matcher;
			if (config.useFzf()) {
				matcher = fzfMatcher;
			} else {
				matcher = jaroWinklerMatcher;
			}

			this.cachedResults = matcher.match(query, config.limit());
			oldQuery = query;
		}

		return cachedResults.contains(itemIdsToNames.get(itemId));
	}

	private final KeyListener searchHotkeyListener = new KeyListener() {
		@Override
		public void keyPressed(KeyEvent e) {
			if (config.hotkey().matches(e)) {
				Widget bankContainer = client.getWidget(ComponentID.BANK_ITEM_CONTAINER);
				if (bankContainer != null && !bankContainer.isSelfHidden())
				{
					bankSearch.initSearch();
					e.consume();
				}
			}
		}

		@Override
		public void keyTyped(KeyEvent e) { }

		@Override
		public void keyReleased(KeyEvent e) { }
	};


	@Subscribe
	public void onScriptCallbackEvent(ScriptCallbackEvent event) {
		int intStackSize = client.getIntStackSize();
		int[] intStack = client.getIntStack();
		int objectStackSize = client.getObjectStackSize();
		Object[] objectStack = client.getObjectStack();

		if (event.getEventName().equals(BANK_SEARCH_FILTER_EVENT)) {
			int itemId = intStack[intStackSize - 1];
			String query = (String) objectStack[objectStackSize - 1];
			intStack[intStackSize - 2] = filterBankSearch(itemId, query) ? 1 : 0;
		}
	}
}

package com.github.i.fuzzybanksearch;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class FuzzyBankSearchPluginTest {
	public static void main(String[] args) throws Exception {


		ExternalPluginManager.loadBuiltin(FuzzyBankSearchPlugin.class);
		RuneLite.main(args);
	}
}
