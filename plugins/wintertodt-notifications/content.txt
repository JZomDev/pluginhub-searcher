package eu.jodelahithit;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class WintertodtNotificationsTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(WintertodtNotificationsPlugin.class);
		RuneLite.main(args);
	}
}

package eu.jodelahithit;

import com.google.inject.Provides;

import javax.inject.Inject;

import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.events.*;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.time.Duration;
import java.time.Instant;
import java.time.temporal.ChronoUnit;

import static eu.jodelahithit.WintertodtInterruptType.*;
import static net.runelite.api.AnimationID.*;
import static net.runelite.api.ItemID.BRUMA_KINDLING;
import static net.runelite.api.ItemID.BRUMA_ROOT;

@PluginDescriptor(
        name = "Wintertodt Notifications",
        description = "Visual notifications for Wintertodt",
        tags = {"notifications", "wintertodt"}
)
public class WintertodtNotificationsPlugin extends Plugin {
    private static final int WINTERTODT_REGION = 6462;
    private boolean isInWintertodt;
    private Instant walkingInstant = Instant.now();
    private Instant lastActionTime = Instant.now();
    private WintertodtActivity currentActivity = WintertodtActivity.IDLE;
    private int timerValue;
    private LocalPoint lastPlayerLocation;

    @Inject
    Client client;

    @Inject
    private WintertodtNotificationsConfig config;

    @Inject
    private WintertodtNotificationsOverlay overlay;

    @Inject
    private OverlayManager overlayManager;

    @Provides
    WintertodtNotificationsConfig getConfig(ConfigManager configManager) {
        return configManager.getConfig(WintertodtNotificationsConfig.class);
    }

    @Override
    protected void startUp() throws Exception {
        currentActivity = WintertodtActivity.IDLE;
        overlayManager.add(overlay);
    }

    @Override
    protected void shutDown() throws Exception {
        overlayManager.remove(overlay);
        currentActivity = WintertodtActivity.IDLE;
    }

    private boolean isInWintertodtRegion() {
        if (client.getLocalPlayer() != null) {
            return client.getLocalPlayer().getWorldLocation().getRegionID() == WINTERTODT_REGION;
        }

        return false;
    }

    @Subscribe
    public void onGameTick(GameTick gameTick) {
        if (!isInWintertodtRegion()) {
            if (isInWintertodt) {
                currentActivity = WintertodtActivity.IDLE;
            }

            isInWintertodt = false;
            return;
        }

        if (!isInWintertodt) {
            currentActivity = WintertodtActivity.IDLE;
        }
        isInWintertodt = true;

        Player player = client.getLocalPlayer();
        if (player != null) {
            LocalPoint playerLocation = player.getLocalLocation();
            if (!playerLocation.equals(lastPlayerLocation)) {
                walkingInstant = Instant.now();
            }
            lastPlayerLocation = playerLocation;
        }

        checkActionTimeout();
    }

    @Subscribe
    public void onVarbitChanged(VarbitChanged varbitChanged) {
        timerValue = client.getVar(Varbits.WINTERTODT_TIMER);
    }

    private void checkActionTimeout() {
        if (currentActivity == WintertodtActivity.IDLE) {
            return;
        }

        int currentAnimation = client.getLocalPlayer() != null ? client.getLocalPlayer().getAnimation() : -1;
        if (currentAnimation != IDLE || lastActionTime == null) {
            return;
        }

        Duration actionTimeout = Duration.ofSeconds(3);
        Duration sinceAction = Duration.between(lastActionTime, Instant.now());

        if (sinceAction.compareTo(actionTimeout) >= 0) {
            currentActivity = WintertodtActivity.IDLE;
        }
    }

    @Subscribe
    public void onChatMessage(ChatMessage chatMessage) {
        if (!isInWintertodt) {
            return;
        }

        ChatMessageType chatMessageType = chatMessage.getType();

        if (chatMessageType != ChatMessageType.GAMEMESSAGE && chatMessageType != ChatMessageType.SPAM) {
            return;
        }

        MessageNode messageNode = chatMessage.getMessageNode();
        final WintertodtInterruptType interruptType;

        if (messageNode.getValue().startsWith("You carefully fletch the root")) {
            setActivity(WintertodtActivity.FLETCHING);
            return;
        }

        if (messageNode.getValue().startsWith("The cold of")) {
            interruptType = COLD;
        } else if (messageNode.getValue().startsWith("The freezing cold attack")) {
            interruptType = SNOWFALL;
        } else if (messageNode.getValue().startsWith("The brazier is broken and shrapnel")) {
            interruptType = BRAZIER;
        } else if (messageNode.getValue().startsWith("You have run out of bruma roots")) {
            interruptType = WintertodtInterruptType.OUT_OF_ROOTS;
        } else if (messageNode.getValue().startsWith("Your inventory is too full")) {
            interruptType = WintertodtInterruptType.INVENTORY_FULL;
        } else if (messageNode.getValue().startsWith("You fix the brazier")) {
            interruptType = WintertodtInterruptType.FIXED_BRAZIER;
        } else if (messageNode.getValue().startsWith("You light the brazier")) {
            interruptType = WintertodtInterruptType.LIT_BRAZIER;
        } else if (messageNode.getValue().startsWith("The brazier has gone out.")) {
            interruptType = WintertodtInterruptType.BRAZIER_WENT_OUT;
        } else if (messageNode.getValue().startsWith("Congratulations, you've just advanced your")) {
            interruptType = WintertodtInterruptType.LEVEL_UP;
        } else {
            return;
        }

        boolean wasInterrupted = false;

        if (interruptType == SNOWFALL || interruptType == COLD || interruptType == BRAZIER) {
            if (currentActivity != WintertodtActivity.WOODCUTTING && currentActivity != WintertodtActivity.IDLE) {
                wasInterrupted = true;
            }
        } else wasInterrupted = true;

        if (wasInterrupted) {
            currentActivity = WintertodtActivity.IDLE;
        }
    }

    @Subscribe
    public void onAnimationChanged(final AnimationChanged event) {
        if (!isInWintertodt) {
            return;
        }

        final Player local = client.getLocalPlayer();

        if (event.getActor() != local) {
            return;
        }

        final int animId = local.getAnimation();
        switch (animId) {
            case WOODCUTTING_BRONZE:
            case WOODCUTTING_IRON:
            case WOODCUTTING_STEEL:
            case WOODCUTTING_BLACK:
            case WOODCUTTING_MITHRIL:
            case WOODCUTTING_ADAMANT:
            case WOODCUTTING_RUNE:
            case WOODCUTTING_GILDED:
            case WOODCUTTING_DRAGON:
            case WOODCUTTING_DRAGON_OR:
            case WOODCUTTING_INFERNAL:
            case WOODCUTTING_3A_AXE:
            case WOODCUTTING_CRYSTAL:
            case WOODCUTTING_TRAILBLAZER:
                setActivity(WintertodtActivity.WOODCUTTING);
                break;

            case FLETCHING_BOW_CUTTING:
                setActivity(WintertodtActivity.FLETCHING);
                break;

            case LOOKING_INTO:
                setActivity(WintertodtActivity.FEEDING_BRAZIER);
                break;

            case FIREMAKING:
                setActivity(WintertodtActivity.LIGHTING_BRAZIER);
                break;

            case CONSTRUCTION:
            case CONSTRUCTION_IMCANDO:
                setActivity(WintertodtActivity.FIXING_BRAZIER);
                break;
        }
    }

    @Subscribe
    public void onItemContainerChanged(ItemContainerChanged event) {
        final ItemContainer container = event.getItemContainer();
        if (!isInWintertodt || container != client.getItemContainer(InventoryID.INVENTORY)) {
            return;
        }
        int numLogs = 0;
        int numKindling = 0;

        final Item[] inv = container.getItems();
        for (Item item : inv) {
            switch (item.getId()) {
                case BRUMA_ROOT:
                    ++numLogs;
                    break;
                case BRUMA_KINDLING:
                    ++numKindling;
                    break;
            }
        }

        if (numLogs == 0 && currentActivity == WintertodtActivity.FLETCHING) {
            currentActivity = WintertodtActivity.IDLE;
        } else if (numLogs == 0 && numKindling == 0 && currentActivity == WintertodtActivity.FEEDING_BRAZIER) {
            currentActivity = WintertodtActivity.IDLE;
        }
    }

    private void setActivity(WintertodtActivity action) {
        if (action != WintertodtActivity.IDLE) {
            walkingInstant = walkingInstant.minus(1, ChronoUnit.MINUTES);
        }
        currentActivity = action;
        lastActionTime = Instant.now();
    }

    public boolean shouldRenderOverlay() {
        return isInWintertodt && currentActivity == WintertodtActivity.IDLE && timerValue == 0 && !Utils.checkInstant(walkingInstant, 1.0f);
    }
}

package eu.jodelahithit;

import com.google.common.base.Strings;
import net.runelite.api.Point;
import net.runelite.client.util.ColorUtil;

import java.awt.*;
import java.time.Duration;
import java.time.Instant;

public class Utils {
    public static int getStringWidth(Graphics graphics, String text) {
        FontMetrics metrics = graphics.getFontMetrics();
        return metrics.stringWidth(text);
    }

    public static void renderTextCentered(Graphics2D graphics, Point txtLoc, String text, Color color) {
        if (!Strings.isNullOrEmpty(text)) {
            int x = txtLoc.getX();
            int y = txtLoc.getY();
            int halfStringWidth = getStringWidth(graphics, text) / 2;
            graphics.setColor(Color.BLACK);
            graphics.drawString(text, x - halfStringWidth+ 1, y + 1);
            graphics.setColor(ColorUtil.colorWithAlpha(color, 255));
            graphics.drawString(text, x - halfStringWidth, y);
        }
    }

    public static boolean checkInstant(Instant instant, float timeout) {
        return Duration.between(instant, Instant.now()).toMillis() < (timeout * 1000);
    }
}

package eu.jodelahithit;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.*;

@ConfigGroup("wintertodt-notifications")
public interface WintertodtNotificationsConfig extends Config
{
    @Alpha
    @ConfigItem(
            keyName = "overlayColor",
            name = "Notification color",
            description = "Set the notification overlay color",
            position = 0
    )
    default Color overlayColor() {
        return new Color(1.0f, 0.0f, 0.0f, 0.5f);
    }

    @ConfigItem(
            keyName = "notificationFlash",
            name = "Notification flash",
            description = "Flash the overlay",
            position = 1
    )
    default boolean flash() {
        return false;
    }

    @ConfigItem(
            keyName = "disableOverlayText",
            name = "Disable overlay text",
            description = "Disable the \"Wintertodt Notification\" text on the overlay",
            position = 2
    )
    default boolean disableOverlayText() {
        return false;
    }
}

package eu.jodelahithit;

public enum WintertodtActivity {
    IDLE,
    WOODCUTTING,
    FLETCHING,
    FEEDING_BRAZIER,
    FIXING_BRAZIER,
    LIGHTING_BRAZIER,

    //CONSTRUCTION(2.0f),
    //WOODCUTTING(0.1f),
    //FLETCHING(0.6f),
    //LIGHTING(2.0f),
    //BURNING(1.5f),
    //WALKING(1.0f),
    //WAITING(1.0f),
    //EATING(1.0f);

    //float timeout;

    //WintertodtActivity(float delay){
    //    this.timeout = delay;
    //}
}

package eu.jodelahithit;

import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
@Getter
enum WintertodtInterruptType {
    COLD,
    SNOWFALL,
    BRAZIER,
    INVENTORY_FULL,
    OUT_OF_ROOTS,
    FIXED_BRAZIER,
    LIT_BRAZIER,
    BRAZIER_WENT_OUT,
    LEVEL_UP

}

package eu.jodelahithit;

import java.awt.*;
import javax.inject.Inject;

import net.runelite.api.Client;
import net.runelite.api.Point;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.util.ColorUtil;

class WintertodtNotificationsOverlay extends Overlay
{
	private final Client client;
	private final WintertodtNotificationsPlugin plugin;
	private final WintertodtNotificationsConfig config;
	private final float TEXT_COLOR_LERP = 0.75f;

	@Inject
	private WintertodtNotificationsOverlay(Client client, WintertodtNotificationsPlugin plugin, WintertodtNotificationsConfig config)
	{
		super(plugin);
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_SCENE);
		this.client = client;
		this.plugin = plugin;
		this.config = config;
	}

	@Override
	public Dimension render(Graphics2D graphics) {
		if (plugin.shouldRenderOverlay()) {
			if(config.flash() && client.getGameCycle() % 40 >= 20) return null;
			Color color = graphics.getColor();
			graphics.setColor(config.overlayColor());
			graphics.fill(new Rectangle(client.getCanvas().getSize()));
			graphics.setColor(color);
			if (!config.disableOverlayText()) {
				net.runelite.api.Point location = new Point(client.getCanvasWidth() / 2, client.getCanvasHeight() / 8);
				Utils.renderTextCentered(graphics, location, "Wintertodt Notification", ColorUtil.colorLerp(Color.white, config.overlayColor(), TEXT_COLOR_LERP));
			}
		}
		return null;
	}
}

