package com.creativetechguy;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class MuteAllPluginTest {
    public static void main(String[] args) throws Exception {
        ExternalPluginManager.loadBuiltin(MuteAllPlugin.class);
        RuneLite.main(args);
    }
}
package com.creativetechguy;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(MuteAllConfig.GROUP_NAME)
public interface MuteAllConfig extends Config {
    String GROUP_NAME = "mute-all";

    @ConfigItem(
            keyName = "seenAlert",
            name = "",
            description = "",
            hidden = true
    )
    default boolean seenAlert() {
        return false;
    }

    @ConfigItem(
            keyName = "seenAlert",
            name = "",
            description = "",
            hidden = true
    )
    void seenAlert(boolean seen);
}

package com.creativetechguy;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.AreaSoundEffectPlayed;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.SoundEffectPlayed;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import javax.inject.Inject;
import javax.swing.*;

@Slf4j
@PluginDescriptor(
        name = "Mute All",
        description = "Mute all sounds from playing, while still enabling sound events for other plugins",
        configName = MuteAllConfig.GROUP_NAME
)
public class MuteAllPlugin extends Plugin {
    @Inject
    private Client client;

    @Inject
    private MuteAllConfig config;

    @Provides
    MuteAllConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(MuteAllConfig.class);
    }

    @Override
    protected void startUp() throws Exception {
        if (client.getGameState() == GameState.LOGGED_IN) {
            if (!config.seenAlert()) {
                showAlert();
            }
        }
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged gameStateChanged) {
        if (gameStateChanged.getGameState() == GameState.LOGGED_IN) {
            if (!config.seenAlert()) {
                showAlert();
            }
        }
    }

    @Subscribe
    public void onSoundEffectPlayed(SoundEffectPlayed soundEffectPlayed) {
        soundEffectPlayed.consume();
    }

    @Subscribe
    public void onAreaSoundEffectPlayed(AreaSoundEffectPlayed areaSoundEffectPlayed) {
        areaSoundEffectPlayed.consume();
    }

    private void showAlert() {
        SwingUtilities.invokeLater(() -> {
            JOptionPane.showMessageDialog(null,
                    "For the 'Mute All' plugin to work, you must manually unmute your in-game Sound Effects and Area Sounds.",
                    "Mute All",
                    JOptionPane.INFORMATION_MESSAGE);
            config.seenAlert(true);
        });
    }
}

