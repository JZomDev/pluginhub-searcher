package com.WIZLights;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class WIZLightsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(WIZLightsPlugin.class);
		RuneLite.main(args);
	}
}
package com.WIZLights;

import com.google.inject.Guice;
import junit.framework.TestCase;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;
import com.google.inject.testing.fieldbinder.BoundFieldModule;

import javax.inject.Inject;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

@RunWith(MockitoJUnitRunner.class)
public class UDPTest extends TestCase {

    @Inject
    private UDP udp;

    @Before
    public void setUp()
    {
        Guice.createInjector(BoundFieldModule.of(this)).injectMembers(this);
    }

    @Test
    public void messageBuilderSetPilotTest() {
        Map<String, Integer> params = new HashMap<>();
        params.put("r", 255);
        params.put("g", 0);
        params.put("b", 230);

        String actualMessage = udp.messageBuilder(UDP.Method.SETPILOT, params);
        String expectedMessage = "{\"method\":\"setPilot\",\"params\":{\"r\":255,\"b\":230,\"g\":0}}";

        assertEquals(expectedMessage, actualMessage);
    }

    @Test
    public void messageBuilderGetPilotTest() {
        String actualMessage = udp.messageBuilder(UDP.Method.GETPILOT);
        String expectedMessage = "{\"method\":\"getPilot\"}";

        assertEquals(expectedMessage, actualMessage);
    }

    @Test
    public void convertGetToSetPilot() {
        String getPilot = "{\"method\":\"getPilot\",\"env\":\"pro\",\"params\":{\"mac\":\"d8a011312d50\",\"rssi\":-58,\"state\":true,\"sceneId\":0,\"r\":255,\"g\":150,\"b\":0,\"c\":0,\"w\":0,\"dimming\":100}}";
        String setPilot = udp.convertGetToSetPilot(getPilot);
        String expectedMessage = "{\"method\":\"setPilot\",\"env\":\"pro\",\"params\":{\"mac\":\"d8a011312d50\",\"rssi\":-58,\"state\":true,\"r\":255,\"g\":150,\"b\":0,\"c\":0,\"w\":0,\"dimming\":100}}";

        assertEquals(expectedMessage, setPilot);
    }
}

package com.WIZLights;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;

import com.google.inject.Guice;
import com.google.inject.testing.fieldbinder.BoundFieldModule;
import junit.framework.TestCase;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;

import javax.inject.Inject;

@RunWith(MockitoJUnitRunner.class)
public class WIZLightsTest extends TestCase
{
    private DatagramSocket socket;
    private InetAddress address;

    private byte[] buf;
    private byte[] bufRecieved = new byte[1000];

    @Inject
    UDP udp;

    @Before
    public void setUp()
    {
        Guice.createInjector(BoundFieldModule.of(this)).injectMembers(this);
    }

    @Test
    public void WizLightTest() throws IOException {
        socket = new DatagramSocket();
        address = InetAddress.getByName("192.168.2.21");

        String msg = "{\"method\":\"setPilot\",\"env\":\"pro\",\"params\":{\"mac\":\"d8a011312d50\",\"rssi\":-58,\"state\":true,\"dimming\":100,\"speed\":40,\"r\":255,\"g\":50,\"b\":50}}";

        //sendMessage(msg);

        udp.sendMessage(msg,"192.168.2.21", 38899);
        String received = udp.receiveMessage();
        System.out.println(received);
    }

    void sendMessage(String msg) throws IOException {
        buf = msg.getBytes();
        DatagramPacket packet
                = new DatagramPacket(buf, buf.length, address, 38899);
        socket.send(packet);
        packet = new DatagramPacket(bufRecieved, bufRecieved.length);
        socket.receive(packet);
        String received = new String(
                packet.getData(), 0, packet.getLength());
        System.out.println(received);
    }
}
package com.WIZLights;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.Map;

@Slf4j
public class UDP {
    private DatagramSocket socket;

    @Getter
    @RequiredArgsConstructor
    public enum Method {
        GETPILOT ("getPilot"),
        SETPILOT("setPilot");

        private final String method;
    }

    public UDP() throws SocketException {
        socket = new DatagramSocket();
    }

    public String messageBuilder(Method method) {
        return "{\"method\":\"" + method.getMethod() + "\"}";
    }

    public String messageBuilder(Method method, Map<String, Integer> params) {
        StringBuilder messageString = new StringBuilder("{");
        messageString.append("\"method\":\"").append(method.getMethod()).append("\",");

        messageString.append("\"params\":{");
        for (String key : params.keySet()) {
            messageString.append("\"").append(key).append("\":").append(params.get(key).toString()).append(",");
        }
        messageString.delete(messageString.length()-1, messageString.length()).append("}}");

        return messageString.toString();
    }

    //TODO figure out the exceptions
    public void sendMessage(String msg, String ipAddress, int port) {
        InetAddress address = null;
        try {
            address = InetAddress.getByName(ipAddress);
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }

        byte[] buffer = msg.getBytes();
        DatagramPacket packet = new DatagramPacket(buffer, buffer.length, address, port);

        try {
            socket.send(packet);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public String receiveMessage() {
        byte[] buffer = new byte[1000];
        DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
        try {
            socket.setSoTimeout(2000);
            socket.receive(packet);
        } catch (IOException e) {
            log.debug(e.getMessage());
            return "";
        }
        return new String(packet.getData(), 0, packet.getLength());
    }

    public String convertGetToSetPilot(String message) {
        return message.replace("result", "params")
                .replace(Method.GETPILOT.getMethod(), Method.SETPILOT.getMethod())
                .replace("\"sceneId\":0,", "");
    }

    public void closeSocket() {
        socket.close();
    }
}

package com.WIZLights;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum ItemGroup {
    NONE("No Group"),
    ONE("Group 1"),
    TWO("Group 2"),
    THREE("Group 3"),
    FOUR("Group 4");

    private final String name;

    @Override
    public String toString() {
        return name;
    }
}

package com.WIZLights.Drops;

import com.WIZLights.ItemGroup;
import com.WIZLights.WIZLights;
import com.WIZLights.WIZLightsConfig;
import com.google.common.collect.ImmutableSet;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Varbits;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.util.Text;

import javax.inject.Inject;
import java.awt.Color;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
public class ChambersOfXeric {

    @Inject
    private WIZLightsConfig config;

    @Inject
    private WIZLights wizLights;

    @Inject
    private Client client;

    private static final Pattern SPECIAL_DROP_MESSAGE = Pattern.compile("(.+) - (.+)");
    private static final Pattern POINTS_MESSAGE = Pattern.compile("Total points: .*, Personal points: ");
    private static final Set<String> uniques = ImmutableSet.of("Dexterous prayer scroll", "Arcane prayer scroll", "Twisted buckler",
            "Dragon hunter crossbow", "Dinh's bulwark", "Ancestral hat", "Ancestral robe top", "Ancestral robe bottom",
            "Dragon claws", "Elder maul", "Kodai insignia", "Twisted bow");

    private boolean uniqueReceived = false;

    //TODO dust and kit need to be based on chat message
    //TODO look at how to do disco lights with dust/kit
    public void onChatMessage(ChatMessage event) {
        if (client.getLocalPlayer() == null || client.getLocalPlayer().getName() == null)
            return;

        if (event.getType() == ChatMessageType.FRIENDSCHATNOTIFICATION)
        {
            String message = Text.removeTags(event.getMessage());

            if (message.contains("your raid is complete!"))
            {
                return;
            }

            Matcher matcher;
            matcher = SPECIAL_DROP_MESSAGE.matcher(message);

            if (matcher.find())
            {
                uniqueReceived = true;

                final String dropReceiver = Text.sanitize(matcher.group(1)).trim();
                final String dropName = matcher.group(2).trim();

                if (uniques.contains(dropName))
                {
                    if (dropReceiver.equals(Text.sanitize(client.getLocalPlayer().getName())))
                    {
                        Color color = getUniqueGroupColor(dropName);
                        if (color != null) {
                            wizLights.setAllLightsColor(color);
                        }
                    } else {
                        if (config.enableRecolorCoxOther()) {
                            wizLights.setAllLightsColor(config.coxOtherPurpleColor());
                        }
                    }
                }
            }

            matcher = POINTS_MESSAGE.matcher(message);
            if (matcher.find()) {
                if (uniqueReceived) {
                    uniqueReceived = false;
                }
                else {
                    if (config.enableCoxStandardLoot()) {
                        wizLights.setAllLightsColor(config.coxStandardLootColor());
                    }
                }
            }
        }
    }

    private Color getUniqueGroupColor(String uniqueName)
    {
        switch (uniqueName.toLowerCase().trim())
        {
            case "twisted bow":
                return getGroupColor(config.groupTwistedBow());
            case "kodai insignia":
                return getGroupColor(config.groupKodai());
            case "elder maul":
                return getGroupColor(config.groupElderMaul());
            case "dragon claws":
                return getGroupColor(config.groupClaws());
            case "ancestral hat":
                return getGroupColor(config.groupAncestralHat());
            case "ancestral robe top":
                return getGroupColor(config.groupAncestralTop());
            case "ancestral robe bottom":
                return getGroupColor(config.groupAncestralBottom());
            case "dinh's bulwark":
                return getGroupColor(config.groupDinhs());
            case "dragon hunter crossbow":
                return getGroupColor(config.groupDHCB());
            case "twisted buckler":
                return getGroupColor(config.groupBuckler());
            case "arcane prayer scroll":
                return getGroupColor(config.groupArcane());
            case "dexterous prayer scroll":
                return getGroupColor(config.groupDex());
            default:
                log.info("Unique received did not match a known item from CoX: {}", uniqueName);
                return null;
        }
    }

    private Color getGroupColor(ItemGroup group)
    {
        switch (group)
        {
            case ONE:
                return (config.enableGroupOne() ? config.groupOneColor() : null);
            case TWO:
                return (config.enableGroupTwo() ? config.groupTwoColor() : null);
            case THREE:
                return (config.enableGroupThree() ? config.groupThreeColor() : null);
            case FOUR:
                return (config.enableGroupFour() ? config.groupFourColor() : null);
            default:
                return null;
        }
    }

    public boolean isInCox() {
        return (client.getGameState() == GameState.LOGGED_IN && client.getVarbitValue(Varbits.IN_RAID) == 1);
    }
}

package com.WIZLights.Drops;

import com.WIZLights.WIZLights;
import com.WIZLights.WIZLightsConfig;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.ItemStack;
import net.runelite.client.util.Text;

import javax.inject.Inject;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

@Slf4j
public class ValuableDrops {

    @Inject
    private WIZLightsConfig config;

    @Inject
    private WIZLights wizLights;

    @Inject
    private ItemManager itemManager;

    public void onChatMessage(ChatMessage event) {
        String message = Text.sanitize(Text.removeTags(event.getMessage()));
        if (event.getType() != ChatMessageType.GAMEMESSAGE) return;
        //Valuable Drop Chat message
        if (message.contains("Your treasure is worth around")) {
            String clueValue = message.replaceAll("\\D+", "");
            log.debug("Clue Value: " + clueValue);
            long valueOfClue = Integer.parseInt(clueValue);
            matchLootValue(valueOfClue);
        }
    }

    public void processLoot(String name, Collection<ItemStack> items) {
        long totalValue = 0;
        for (ItemStack item : stack(items)) {
            int itemId = item.getId();
            int qty = item.getQuantity();

            int price = itemManager.getItemPrice(itemId);
            long total = (long) price * qty;

            totalValue += total;
        }
        log.debug("Loot Received from " + name + ": " + totalValue);
        matchLootValue(totalValue);
    }

    private void matchLootValue(long value) {
        if (config.lowValuePrice() <= value && config.mediumValuePrice() > value && config.enableRecolorLowValue()) {
            wizLights.setAllLightsColor(config.lowValueColor());
        } else if (config.mediumValuePrice() <= value && config.highValuePrice() > value && config.enableRecolorMediumValue()) {
            wizLights.setAllLightsColor(config.mediumValueColor());
        } else if (config.highValuePrice() <= value && config.insaneValuePrice() > value && config.enableRecolorHighValue()) {
            wizLights.setAllLightsColor(config.highValueColor());
        } else if (config.insaneValuePrice() <= value && config.enableRecolorInsaneValue()) {
            wizLights.setAllLightsColor(config.insaneValueColor());
        }
    }

    private static Collection<ItemStack> stack(Collection<ItemStack> items)
    {
        final List<ItemStack> list = new ArrayList<>();

        for (final ItemStack item : items)
        {
            int quantity = 0;
            for (final ItemStack i : list)
            {
                if (i.getId() == item.getId())
                {
                    quantity = i.getQuantity();
                    list.remove(i);
                    break;
                }
            }
            if (quantity > 0)
            {
                list.add(new ItemStack(item.getId(), item.getQuantity() + quantity, item.getLocation()));
            }
            else
            {
                list.add(item);
            }
        }

        return list;
    }
}

package com.WIZLights.Drops;

import com.WIZLights.WIZLights;
import com.WIZLights.WIZLightsConfig;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Varbits;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.client.util.Text;

import javax.inject.Inject;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

@Slf4j
public class TheatreOfBlood {

    @Inject
    private Client client;

    @Inject
    private WIZLightsConfig config;

    @Inject
    private WIZLights wizLights;

    private static final List<Integer> rewardChestIds = Arrays.asList(33086, 33087, 33088, 33089, 33090);
    private static final int yourPurpleChestId = 32993;
    private static final int otherPurpleChestId = 32991;

    public static final int TOB_RAIDERS_VARP = 330;
    public static final int TOB_MAX_SIZE = 5;

    private int teamSize = 0;
    private int chestCount = 0;
    private boolean uniqueReceived = false;

    public void onGameObjectSpawned(GameObjectSpawned event) {
        int objId = event.getGameObject().getId();
        if (rewardChestIds.contains(objId)) {
            chestCount++;
            int impostorId = client.getObjectDefinition(objId).getImpostor().getId();

            if (impostorId == yourPurpleChestId) {
                uniqueReceived = true;
                if (config.enableRecolorTobYour()) {
                    wizLights.setAllLightsColor(config.yourPurpleColor());
                }

            }
            else if (impostorId == otherPurpleChestId) {
                uniqueReceived = true;
                if (config.enableRecolorTobOther()) {
                    wizLights.setAllLightsColor(config.otherPurpleColor());
                }
            }

            if (chestCount == getTobTeamSize()) {
                if (!uniqueReceived) {
                    if (config.enableTobStandardLoot()) {
                        wizLights.setAllLightsColor(config.tobStandardLootColor());
                    }
                }
                reset();
            }
        }
    }

    public boolean isInTob() {
        int tobVar = client.getVarbitValue(Varbits.THEATRE_OF_BLOOD);
        return (tobVar == 2 || tobVar == 3);
    }

    public void reset() {
        teamSize = 0;
        chestCount = 0;
        uniqueReceived = false;
    }

    private int getTobTeamSize()
    {
        if (teamSize == 0) {
            Map<Integer, Object> varcmap = client.getVarcMap();
            for (int i = 0; i < TOB_MAX_SIZE; i++) {
                Integer playervarp = TOB_RAIDERS_VARP + i;
                if (varcmap.containsKey(playervarp)) {
                    String playerName = Text.sanitize(varcmap.get(playervarp).toString());
                    if (playerName != null && !playerName.equals("")) {
                        teamSize++;
                    }
                }
            }
        }

        return teamSize;
    }
}

package com.WIZLights;

import com.WIZLights.Drops.ChambersOfXeric;
import com.WIZLights.Drops.TheatreOfBlood;
import com.WIZLights.Drops.ValuableDrops;
import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.NpcLootReceived;
import net.runelite.client.game.ItemStack;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.loottracker.LootReceived;
import net.runelite.client.util.Text;
import net.runelite.client.util.WildcardMatcher;
import net.runelite.http.api.loottracker.LootRecordType;

import java.awt.Color;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

@Slf4j
@PluginDescriptor(
		name = "WIZ Smart Lights",
		description = "A plugin to control the WIZ Smart Lights"
)
public class WIZLightsPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private WIZLightsConfig config;

	@Inject
	private WIZLights wizLights;

	@Inject
	private ValuableDrops valuableDrops;

	@Inject
	private ChambersOfXeric cox;

	@Inject
	private UDP udp;

	@Inject
	private TheatreOfBlood tob;

	private List<String> lootNpcs;

	@Override
	protected void startUp() throws Exception
	{
		tob.reset();
		lootNpcs = Collections.emptyList();
	}

	@Override
	protected void shutDown() throws Exception
	{
		wizLights.restoreLights();
		udp.closeSocket();
	}

	@Subscribe
	public void onNpcLootReceived(NpcLootReceived npcLootReceived)
	{
		NPC npc = npcLootReceived.getNpc();
		Collection<ItemStack> items = npcLootReceived.getItems();

		if (!lootNpcs.isEmpty())
		{
			for (String npcName : lootNpcs)
			{
				if (WildcardMatcher.matches(npcName, npc.getName()))
				{
					valuableDrops.processLoot(npc.getName(), items);
					return;
				}
			}
		}
		else
		{
			if (!tob.isInTob() && !cox.isInCox()) valuableDrops.processLoot(npc.getName(), items);
		}
	}

	@Subscribe
	public void onLootReceived(LootReceived lootReceived)
	{
		if (lootReceived.getType() != LootRecordType.EVENT && lootReceived.getType() != LootRecordType.PICKPOCKET)
		{
			return;
		}

		if (!tob.isInTob() && !cox.isInCox()) valuableDrops.processLoot(lootReceived.getName(), lootReceived.getItems());
	}


	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		valuableDrops.onChatMessage(event);
		if (cox.isInCox()) cox.onChatMessage(event);

		String message = Text.sanitize(Text.removeTags(event.getMessage()));
		//To test if your lights work
		if (message.contains("Wiztest") && event.getName().contains(client.getLocalPlayer().getName())) {
			String[] msg = message.split(" ",4);
			Color color = new Color(Integer.parseInt(msg[1]), Integer.parseInt(msg[2]), Integer.parseInt(msg[3]));
			wizLights.setAllLightsColor(color);
		}
	}

	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned event)
	{
		if(tob.isInTob()) {
			tob.onGameObjectSpawned(event);
		}
	}

	@Provides
	WIZLightsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(WIZLightsConfig.class);
	}
}

package com.WIZLights;

import lombok.extern.slf4j.Slf4j;
import net.runelite.client.util.Text;

import javax.inject.Inject;
import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

@Slf4j
public class WIZLights {

    @Inject
    private WIZLightsConfig config;

    @Inject
    private UDP udp;

    @Inject
    private ScheduledExecutorService executorService;

    private List<String> previousStates = new ArrayList<>();

    private void setAllLightsColorExecute(Color color) {
        log.debug("Setting lights to " + color.toString());
        List<String> ipAddresses = Text.fromCSV(config.wizLightIPAddresses());

        String getMessage = udp.messageBuilder(UDP.Method.GETPILOT);
        for (String ip : ipAddresses) {
            udp.sendMessage(getMessage, ip, config.wizLightPort());
            String responseMessage = udp.receiveMessage();
            previousStates.add(udp.convertGetToSetPilot(responseMessage));
        }

        String setMessage = udp.messageBuilder(UDP.Method.SETPILOT, getParamsFromColor(color));
        for (String ip : ipAddresses) {
            udp.sendMessage(setMessage, ip, config.wizLightPort());
            String responseMessage = udp.receiveMessage();
            log.debug("Response message: " + responseMessage);
        }

        executorService.schedule(this::restoreLights, config.duration(), TimeUnit.SECONDS);
    }

    public void setAllLightsColor(Color color) {
        executorService.execute(()->setAllLightsColorExecute(color));
    }

    public void restoreLights() {
        if (previousStates.isEmpty()) {
            return;
        }

        log.debug("Restoring lights");
        List<String> ipAddresses = Text.fromCSV(config.wizLightIPAddresses());

        for (int i = 0; i < ipAddresses.size(); i++) {
            String setMessage = previousStates.get(i);
            udp.sendMessage(setMessage, ipAddresses.get(i), config.wizLightPort());
            String responseMessage = udp.receiveMessage();
            log.debug("Response message: " + responseMessage);
        }

        previousStates.clear();
    }

    private Map<String, Integer> getParamsFromColor(Color color) {
        Map<String, Integer> params = new HashMap<>();
        params.put("r", color.getRed());
        params.put("g", color.getGreen());
        params.put("b", color.getBlue());

        params.put("dimming", config.brightness());

        return params;
    }
}

package com.WIZLights;

import java.awt.Color;

import net.runelite.client.config.*;

import static net.runelite.client.config.Units.PERCENT;
import static net.runelite.client.config.Units.SECONDS;

@ConfigGroup("WIZLights")
public interface WIZLightsConfig extends Config
{
	@ConfigSection(
			name = "Wiz Lights",
			description = "IP address and port number of the lights",
			position = 0,
			closedByDefault = false
	)
	String wizLightSection = "wizLights";

	@ConfigItem(
			keyName = "wizLightIPAddresses",
			name = "IP Address",
			description = "IP addresses of the wiz lights, comma separated. Example:192.1.1.1, 192.1.1.2",
			section = wizLightSection
	)
	default String wizLightIPAddresses()
	{
		return "";
	}

	@ConfigItem(
			keyName = "wizLightPort",
			name = "Port",
			description = "Port of the wiz lights",
			section = wizLightSection
	)
	default int wizLightPort()
	{
		return 38899;
	}

	@ConfigSection(
			name = "Lights Options",
			description = "Several options for lights",
			position = 1,
			closedByDefault = false
	)
	String lightsOptionsSection = "lightsOptionsSection";

	@Units(SECONDS)
	@Range()
	@ConfigItem(
			keyName = "duration",
			name = "Duration",
			description = "Duration the lights stay recolored",
			position = 0,
			section = lightsOptionsSection
	)
	default int duration()
	{
		return 30;
	}

	@Units(PERCENT)
	@Range(max=100)
	@ConfigItem(
			keyName = "brightness",
			name = "Brightness",
			description = "The brightness of the lights in percentage",
			position = 1,
			section = lightsOptionsSection
	)
	default int brightness()
	{
		return 100;
	}

	@ConfigSection(
			name = "Valuable drops",
			description = "The color of the lights when receiving a valuable drop",
			position = 2,
			closedByDefault = false
	)
	String valuableDropsColorSection = "dropsColor";

	@ConfigItem(
			keyName = "enableRecolorLowValue",
			name = "Recolor low value loot",
			description = "Enable recoloring the lights when Insane Value loot is received",
			section = valuableDropsColorSection,
			position = 0
	)
	default boolean enableRecolorLowValue()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
			keyName = "lowValueColor",
			name = "Low value items",
			description = "Configures the color for low value items",
			section = valuableDropsColorSection,
			position = 1
	)
	default Color lowValueColor()
	{
		return Color.decode("#66B2FF");
	}

	@ConfigItem(
			keyName = "lowValuePrice",
			name = "Low value price",
			description = "Configures the start price for low value items",
			section = valuableDropsColorSection,
			position = 2
	)
	default int lowValuePrice()
	{
		return 20000;
	}

	@ConfigItem(
			keyName = "enableRecolorMediumValue",
			name = "Recolor medium value loot",
			description = "Enable recoloring the lights when Insane Value loot is received",
			section = valuableDropsColorSection,
			position = 3
	)
	default boolean enableRecolorMediumValue()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
			keyName = "mediumValueColor",
			name = "Medium value items",
			description = "Configures the color for medium value items",
			section = valuableDropsColorSection,
			position = 4
	)
	default Color mediumValueColor()
	{
		return Color.decode("#99FF99");
	}

	@ConfigItem(
			keyName = "mediumValuePrice",
			name = "Medium value price",
			description = "Configures the start price for medium value items",
			section = valuableDropsColorSection,
			position = 5
	)
	default int mediumValuePrice()
	{
		return 100000;
	}

	@ConfigItem(
			keyName = "enableRecolorHighValue",
			name = "Recolor high value loot",
			description = "Enable recoloring the lights when Insane Value loot is received",
			section = valuableDropsColorSection,
			position = 6
	)
	default boolean enableRecolorHighValue()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
			keyName = "highValueColor",
			name = "High value items",
			description = "Configures the color for high value items",
			section = valuableDropsColorSection,
			position = 7
	)
	default Color highValueColor()
	{
		return Color.decode("#FF9600");
	}

	@ConfigItem(
			keyName = "highValuePrice",
			name = "High value price",
			description = "Configures the start price for high value items",
			section = valuableDropsColorSection,
			position = 8
	)
	default int highValuePrice()
	{
		return 1000000;
	}

	@ConfigItem(
			keyName = "enableRecolorInsaneValue",
			name = "Recolor insane value loot",
			description = "Enable recoloring the lights when Insane Value loot is received",
			section = valuableDropsColorSection,
			position = 9
	)
	default boolean enableRecolorInsaneValue()
	{
		return true;
	}

	@Alpha
	@ConfigItem(
			keyName = "insaneValueColor",
			name = "Insane value items",
			description = "Configures the color for insane value items",
			section = valuableDropsColorSection,
			position = 10
	)
	default Color insaneValueColor()
	{
		return Color.decode("#FF66B2");
	}

	@ConfigItem(
			keyName = "insaneValuePrice",
			name = "Insane value price",
			description = "Configures the start price for insane value items",
			section = valuableDropsColorSection,
			position = 11
	)
	default int insaneValuePrice()
	{
		return 10000000;
	}

	@ConfigSection(
			name = "Chamber of Xeric",
			description = "The color of the lights when receiving a drop at CoX",
			position = 3,
			closedByDefault = false
	)
	String coxDropsColorSection = "coxDropsColor";

	@ConfigItem(
			keyName = "enableCoxStandardLoot",
			name = "Recolor standard loot",
			description = "Enable recoloring the light when no unique is obtained",
			position = 0,
			section = coxDropsColorSection
	)
	default boolean enableCoxStandardLoot()
	{
		return false;
	}

	@ConfigItem(
			keyName = "coxStandardLootColor",
			name = "Standard loot",
			description = "Color of light when no unique item is obtained",
			position = 1,
			section = coxDropsColorSection
	)
	default Color coxStandardLootColor()
	{
		return Color.WHITE;
	}

	@ConfigItem(
			keyName = "enableDust",
			name = "Recolor dust",
			description = "Enable recoloring the light when metamorphic dust is obtained",
			position = 2,
			section = coxDropsColorSection
	)
	default boolean enableDust()
	{
		return true;
	}

	@ConfigItem(
			keyName = "dust",
			name = "Metamorphic Dust",
			description = "Color of light when metamorphic dust is obtained",
			position = 3,
			section = coxDropsColorSection
	)
	default Color dust()
	{
		return Color.CYAN;
	}

	@ConfigItem(
			keyName = "enableKit",
			name = "Recolor Twisted kit",
			description = "Enable recoloring the light when a twisted kit is obtained",
			position = 4,
			section = coxDropsColorSection
	)
	default boolean enableKit()
	{
		return true;
	}

	@ConfigItem(
			keyName = "twistedKit",
			name = "Twisted Kit",
			description = "Color of light when a twisted kit is obtained",
			position = 5,
			section = coxDropsColorSection
	)
	default Color twistedKit()
	{
		return Color.GREEN;
	}

	@ConfigItem(
			keyName = "enableGroupOne",
			name = "Recolor group 1",
			description = "Enable recoloring the light when a unique from group 1 is obtained",
			position = 6,
			section = coxDropsColorSection
	)
	default boolean enableGroupOne()
	{
		return true;
	}

	@ConfigItem(
			keyName = "groupOneColor",
			name = "Group 1",
			description = "Color of the light when an item from group 1 is obtained",
			position = 7,
			section = coxDropsColorSection
	)
	default Color groupOneColor()
	{
		return Color.RED;
	}

	@ConfigItem(
			keyName = "enableGroupTwo",
			name = "Recolor group 2",
			description = "Enable recoloring the light when a unique from group 2 is obtained",
			position = 8,
			section = coxDropsColorSection
	)
	default boolean enableGroupTwo()
	{
		return true;
	}

	@ConfigItem(
			keyName = "groupTwoColor",
			name = "Group 2",
			description = "Color of the light when an item from group 2 is obtained",
			position = 9,
			section = coxDropsColorSection
	)
	default Color groupTwoColor()
	{
		return Color.BLUE;
	}

	@ConfigItem(
			keyName = "enableGroupThree",
			name = "Recolor group 3",
			description = "Enable recoloring the light when a unique from group 3 is obtained",
			position = 10,
			section = coxDropsColorSection
	)
	default boolean enableGroupThree()
	{
		return true;
	}

	@ConfigItem(
			keyName = "groupThreeColor",
			name = "Group 3",
			description = "Color of the light when an item from group 3 is obtained",
			position = 11,
			section = coxDropsColorSection
	)
	default Color groupThreeColor()
	{
		return Color.YELLOW;
	}

	@ConfigItem(
			keyName = "enableGroupFour",
			name = "Recolor group 4",
			description = "Enable recoloring the light when a unique from group 4 is obtained",
			position = 12,
			section = coxDropsColorSection
	)
	default boolean enableGroupFour()
	{
		return true;
	}

	@ConfigItem(
			keyName = "groupFourColor",
			name = "Group 4",
			description = "Color of the light when an item from group 4 is obtained",
			position = 13,
			section = coxDropsColorSection
	)
	default Color groupFourColor()
	{
		return new Color(120, 86, 46);
	}

	@ConfigItem(
			keyName = "enableRecolorCoxOther",
			name = "Recolor other purple",
			description = "Enable recoloring the lights when someone else receives a unique",
			position = 14,
			section = coxDropsColorSection
	)
	default boolean enableRecolorCoxOther()
	{
		return true;
	}

	@ConfigItem(
			keyName = "coxOtherPurpleColor",
			name = "Other purple",
			description = "Color of the lights when someone else receives a unique",
			position = 15,
			section = coxDropsColorSection
	)
	default Color coxOtherPurpleColor()
	{
		return new Color(100, 0, 255);
	}

	@ConfigItem(
			keyName = "groupTwistedBow",
			name = "Twisted bow",
			description = "Group color to use when this item is obtained",
			position = 16,
			section = coxDropsColorSection
	)
	default ItemGroup groupTwistedBow()
	{
		return ItemGroup.NONE;
	}

	@ConfigItem(
			keyName = "groupKodai",
			name = "Kodai insignia",
			description = "Group color to use when this item is obtained",
			position = 17,
			section = coxDropsColorSection
	)
	default ItemGroup groupKodai()
	{
		return ItemGroup.NONE;
	}

	@ConfigItem(
			keyName = "groupElderMaul",
			name = "Elder maul",
			description = "Group color to use when this item is obtained",
			position = 18,
			section = coxDropsColorSection
	)
	default ItemGroup groupElderMaul()
	{
		return ItemGroup.NONE;
	}

	@ConfigItem(
			keyName = "groupClaws",
			name = "Dragon claws",
			description = "Group color to use when this item is obtained",
			position = 19,
			section = coxDropsColorSection
	)
	default ItemGroup groupClaws()
	{
		return ItemGroup.NONE;
	}

	@ConfigItem(
			keyName = "groupAncestralHat",
			name = "Ancestral hat",
			description = "Group color to use when this item is obtained",
			position = 20,
			section = coxDropsColorSection
	)
	default ItemGroup groupAncestralHat()
	{
		return ItemGroup.NONE;
	}

	@ConfigItem(
			keyName = "groupAncestralTop",
			name = "Ancestral robe top",
			description = "Group color to use when this item is obtained",
			position = 21,
			section = coxDropsColorSection
	)
	default ItemGroup groupAncestralTop()
	{
		return ItemGroup.NONE;
	}

	@ConfigItem(
			keyName = "groupAncestralBottom",
			name = "Ancestral robe bottom",
			description = "Group color to use when this item is obtained",
			position = 22,
			section = coxDropsColorSection
	)
	default ItemGroup groupAncestralBottom()
	{
		return ItemGroup.NONE;
	}

	@ConfigItem(
			keyName = "groupDinhs",
			name = "Dinh's bulwark",
			description = "Group color to use when this item is obtained",
			position = 23,
			section = coxDropsColorSection
	)
	default ItemGroup groupDinhs()
	{
		return ItemGroup.NONE;
	}

	@ConfigItem(
			keyName = "groupDHCB",
			name = "Dragon hunter crossbow",
			description = "Group color to use when this item is obtained",
			position = 24,
			section = coxDropsColorSection
	)
	default ItemGroup groupDHCB()
	{
		return ItemGroup.NONE;
	}

	@ConfigItem(
			keyName = "groupBuckler",
			name = "Twisted buckler",
			description = "Group color to use when this item is obtained",
			position = 25,
			section = coxDropsColorSection
	)
	default ItemGroup groupBuckler()
	{
		return ItemGroup.NONE;
	}

	@ConfigItem(
			keyName = "groupArcane",
			name = "Arcane prayer scroll",
			description = "Group color to use when this item is obtained",
			position = 26,
			section = coxDropsColorSection
	)
	default ItemGroup groupArcane()
	{
		return ItemGroup.NONE;
	}

	@ConfigItem(
			keyName = "groupDex",
			name = "Dexterous prayer scroll",
			description = "Group color to use when this item is obtained",
			position = 27,
			section = coxDropsColorSection
	)
	default ItemGroup groupDex()
	{
		return ItemGroup.NONE;
	}

	@ConfigSection(
			name = "Theatre of Blood",
			description = "The color of the lights when receiving a drop at Tob",
			position = 4,
			closedByDefault = false
	)
	String tobDropsColorSection = "tobDropsColor";

	@ConfigItem(
			keyName = "enableTobStandardLoot",
			name = "Recolor standard loot",
			description = "Enable recoloring the lights when no unique item is obtained",
			position = 0,
			section = tobDropsColorSection
	)
	default boolean enableTobStandardLoot()
	{
		return false;
	}

	@ConfigItem(
			keyName = "tobStandardLootColor",
			name = "Standard loot",
			description = "Color of the lights when no unique item is obtained",
			position = 1,
			section = tobDropsColorSection
	)
	default Color tobStandardLootColor()
	{
		return Color.WHITE;
	}

	@ConfigItem(
			keyName = "enableRecolorTobYour",
			name = "Recolor your purple",
			description = "Enable recoloring the lights when you receive a unique",
			position = 2,
			section = tobDropsColorSection
	)
	default boolean enableRecolorTobYour()
	{
		return true;
	}

	@ConfigItem(
			keyName = "yourPurpleColor",
			name = "Your purple",
			description = "Color of the lights when you receive a unique",
			position = 3,
			section = tobDropsColorSection
	)
	default Color yourPurpleColor()
	{
		return Color.MAGENTA;
	}

	@ConfigItem(
			keyName = "enableRecolorTobOther",
			name = "Recolor other purple",
			description = "Enable recoloring the lights when someone else receives a unique",
			position = 4,
			section = tobDropsColorSection
	)
	default boolean enableRecolorTobOther()
	{
		return true;
	}

	@ConfigItem(
			keyName = "otherPurpleColor",
			name = "Other purple",
			description = "Color of the lights when someone else receives a unique",
			position = 5,
			section = tobDropsColorSection
	)
	default Color otherPurpleColor()
	{
		return Color.RED;
	}
}

