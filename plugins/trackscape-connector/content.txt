package com.trackscapeconnector;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TrackScapeConnectorPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(TrackScapeConnectorPlugin.class);
		RuneLite.main(args);
	}
}
/**
 * Forked from hex-agon/chat-logger
 * https://github.com/hex-agon/chat-logger/blob/master/src/main/java/fking/work/chatlogger/RemoteSubmitter.java
 */
package com.trackscapeconnector;

import com.google.gson.Gson;
import com.trackscapeconnector.dtos.ChatPayload;
import lombok.extern.slf4j.Slf4j;
import net.jodah.failsafe.CircuitBreaker;
import net.jodah.failsafe.Failsafe;
import okhttp3.*;
import okhttp3.Request.Builder;

import java.io.IOException;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentLinkedDeque;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

@Slf4j
public class RemoteSubmitter {

    private static final MediaType APPLICATION_JSON = MediaType.parse("application/json");
    private static final int MAX_ENTRIES_PER_TICK = 30;
    private static final int TICK_INTERVAL = 2;

    private static final CircuitBreaker<Object> BREAKER = new CircuitBreaker<>()
            .handle(IOException.class)
            .withDelay(Duration.ofMinutes(5))
            .withFailureThreshold(3, Duration.ofSeconds(30))
            .onHalfOpen(RemoteSubmitter::onHalfOpen);

    private final ConcurrentLinkedDeque<ChatPayload> queuedEntries = new ConcurrentLinkedDeque<>();
    private final ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();
    private final OkHttpClient okHttpClient;
    private final Gson gson;
    private final String sendClanChatsEndpoint;

    private final String VerificationCode;

    private RemoteSubmitter(OkHttpClient okHttpClient, Gson gson, String sendClanChatsEndpoint, String verificationCode) {
        this.okHttpClient = okHttpClient;
        this.gson = gson;
        this.sendClanChatsEndpoint = sendClanChatsEndpoint;
        this.VerificationCode = verificationCode;
    }

    public static RemoteSubmitter create(OkHttpClient okHttpClient, Gson gson, String remoteServerRootEndpoint, String verificationCode) {
        return new RemoteSubmitter(okHttpClient, gson, remoteServerRootEndpoint, verificationCode);
    }

    private static void onHalfOpen() {
        log.info("Checking if remote host is answering properly again (HALF_OPEN)");
    }

    public void initialize() {
        executorService.scheduleAtFixedRate(this::processQueue, TICK_INTERVAL, TICK_INTERVAL, TimeUnit.SECONDS);
    }

    public void shutdown() {
        executorService.shutdown();
    }

    public void queue(ChatPayload entry) {
        queuedEntries.add(entry);
    }

    private void processQueue() {

        if (queuedEntries.isEmpty()) {
            return;
        }
        RequestBody payload = buildPayload();
        payload.contentType();
        try {
            Failsafe.with(BREAKER).run(() -> {
                Request request = new Builder()
                        .url(sendClanChatsEndpoint)
                        .addHeader("verification-code", VerificationCode)
                        .post(payload)
                        .build();

                try (Response response = okHttpClient.newCall(request).execute()) {

                    if (!response.isSuccessful()) {
                        log.warn("Remote endpoint returned non successful response, responseCode={}", response.code());
                        log.warn("Response body: {}", response.body().string());
                    }
                }
            });
        } catch (Exception e) {
            if (!BREAKER.isOpen()) {
                log.warn("Failed to submit chat entries: {}", e.getMessage());
            }
        }
    }

    private RequestBody buildPayload() {
        List<ChatPayload> entries = new ArrayList<>();
        int count = 0;

        while (!queuedEntries.isEmpty() && count < MAX_ENTRIES_PER_TICK) {
            entries.add(queuedEntries.poll());
            count++;
        }
        var json = gson.toJson(entries);
        return RequestBody.create(APPLICATION_JSON, json);
    }
}
package com.trackscapeconnector.dtos;

import com.google.gson.annotations.SerializedName;
import lombok.ToString;


@ToString
public class ChatPayload {

    @SerializedName("clan_name")
    public final String clanName;
    public final String sender;
    public final String message;
    public final String rank;
    @SerializedName("icon_id")
    public final int iconId;
    @SerializedName("is_league_world")
    private final boolean isLeagueWorld;

    private ChatPayload(String clanName, String sender, String message, String rank, int iconId, boolean isLeagueWorld) {
        this.clanName = clanName;
        this.sender = sender;
        this.message = message;
        this.rank = rank;
        this.iconId = iconId;
        this.isLeagueWorld = isLeagueWorld;
    }

    public static ChatPayload from(String clanName, String sender, String message, String rank, int iconId, boolean isLeagueWorld) {
        return new ChatPayload(clanName, sender, message, rank, iconId, isLeagueWorld);
    }
}
package com.trackscapeconnector.dtos;

import com.google.gson.annotations.SerializedName;
import lombok.ToString;


@ToString
public class WebSocketMessage<T> {

    public enum MessageType {
        ToClanChat,
        ToDiscord
    }

    @SerializedName("message_type")
    public final MessageType message_type;

    public final T message;

    private WebSocketMessage(MessageType message_type, T message) {
        this.message_type = message_type;
        this.message = message;
    }

}

package com.trackscapeconnector.dtos;

import lombok.ToString;

@ToString
public class DiscordChat {

    public final String sender;
    public final String message;

    public DiscordChat(String sender, String message) {
        this.sender = sender;
        this.message = message;
    }
}

package com.trackscapeconnector;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("trackScapeconnectorplugin")
public interface TrackScapeConnectorConfig extends Config {
    @ConfigItem(
            keyName = "verificationcode",
            name = "Verification Code",
            description = "The code given to you by the TrackScape bot or a Clan Leader that verifies your connection to the clan.",
            position = 1
    )
    default String verificationCode() {
        return "";
    }

    @ConfigItem(
            keyName = "allowMessagesFromDiscord",
            name = "Receive Messages From Discord",
            description = "If checked you will receive messages from Discord in the chat window.",
            position = 2
    )
    default boolean allowMessagesFromDiscord() {
        return true;
    }


    @ConfigSection(
            name = "Advance Settings",
            description = "Settings for setting up your own TrackScape API.",
            position = 3,
            closedByDefault = true
    )
    String advanceSettings = "advancesettings";

    @ConfigItem(
            keyName = "httpApiEndpoint",
            name = "URL for sending Clan Chats",
            description = "Host your own TrackScape API and enter the URL here.",
            section = advanceSettings
    )
    default String httpApiEndpoint() {
        return "https://bot.trackscape.app/api/chat/new-clan-chat";
    }

    @ConfigItem(
            keyName = "wsEndpoint",
            name = "Websocket url for receiving Discord messages",
            description = "Host your own TrackScape API and enter the URL here for WebSockets.",
            section = advanceSettings
    )
    default String webSocketEndpoint() {
        return "wss://bot.trackscape.app/api/chat/ws";
    }
}

package com.trackscapeconnector;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.trackscapeconnector.dtos.DiscordChat;
import com.trackscapeconnector.dtos.WebSocketMessage;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.util.Text;
import okhttp3.OkHttpClient;
import okhttp3.Response;
import okhttp3.WebSocket;

import java.lang.reflect.Type;

@Slf4j
public final class WebSocketListener extends okhttp3.WebSocketListener {

    private ClientThread clientThread;
    private Client client;

    public boolean socketConnected;

    public boolean socketConnecting = true;

    private static final int NORMAL_CLOSURE_STATUS = 1000;

    private final OkHttpClient okHttpClient;

    public WebSocket ws;

    private final Gson gson;
    private final int discordIconLocation;
    Type WebSocketDiscordMessage = new TypeToken<WebSocketMessage<DiscordChat>>() {
    }.getType();

    public WebSocketListener(Client gameClient, ClientThread gameClientThread, OkHttpClient okHttpClient, Gson gson, int DiscordIconLocation) {
        this.client = gameClient;
        this.clientThread = gameClientThread;
        this.okHttpClient = okHttpClient;
        this.gson = gson;
        this.discordIconLocation = DiscordIconLocation;
    }

    @Override
    public void onOpen(WebSocket webSocket, Response response) {
        log.debug("Connected");
        socketConnecting = false;
        socketConnected = true;
    }

    @Override
    public void onMessage(WebSocket webSocket, String jsonString) {
        var data = gson.fromJson(jsonString, WebSocketMessage.class);
        if (data.message_type == WebSocketMessage.MessageType.ToClanChat) {
            WebSocketMessage<DiscordChat> discordMessage = gson.fromJson(jsonString, WebSocketDiscordMessage);
            handleDiscordChat(discordMessage.message);
        }

    }

    @Override
    public void onClosing(WebSocket webSocket, int code, String reason) {
        webSocket.close(NORMAL_CLOSURE_STATUS, null);
        log.debug("Closing: " + code + " " + reason);
        socketConnecting = false;
        socketConnected = false;
    }

    @Override
    public void onFailure(WebSocket webSocket, Throwable t, Response response) {
        t.printStackTrace();
        socketConnecting = false;
        socketConnected = false;
    }

    private void handleDiscordChat(DiscordChat message) {
        clientThread.invokeLater(() -> {
            var clanName = client.getClanChannel().getName();
            var sender = String.format("<img=%d>%s", discordIconLocation, Text.toJagexName(message.sender));
            client.addChatMessage(ChatMessageType.CLAN_CHAT, sender, message.message, clanName, false);
        });
    }

}

package com.trackscapeconnector;

import com.google.gson.Gson;
import com.google.inject.Provides;
import com.trackscapeconnector.dtos.ChatPayload;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.clan.ClanChannel;
import net.runelite.api.clan.ClanChannelMember;
import net.runelite.api.clan.ClanID;
import net.runelite.api.events.*;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.WorldService;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.Text;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.WebSocket;

import javax.inject.Inject;
import java.awt.image.BufferedImage;
import java.util.Arrays;
import java.util.Objects;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;

@Slf4j
@PluginDescriptor(
        name = "TrackScape Connector"
)
public class TrackScapeConnectorPlugin extends Plugin {
    private static final int NORMAL_CLOSURE_STATUS = 1000;
    private static final int WS_RECONNECT_CHECK_INTERVAL = 2;
    private static final Pattern ICON_PATTERN = Pattern.compile("<img=(\\d+)>");
    private static final String CLAN_WELCOME_TEXT = "To talk in your clan's channel, start each line of chat with // or /c.";
    @Inject
    private Client client;
    @Inject
    private ClientThread clientThread;
    @Inject
    private TrackScapeConnectorConfig config;
    @Inject
    private OkHttpClient httpClient;
    @Inject
    private Gson gson;
    @Inject
    private WorldService worldService;
    private RemoteSubmitter remoteSubmitter;
    private WebSocketListener webSocketListener;
    public WebSocket ws;
    private int discordIconLocation = -1;
    private ScheduledExecutorService wsExecutorService;
    private FindWordTypeService findWordTypeService;

    @Override
    protected void startUp() throws Exception {
        clientThread.invoke(() ->
        {
            if (client.getModIcons() == null) {
                return false;
            }
            loadIcon();
            return true;
        });
        startRemoteSubmitter();
        findWordTypeService = new FindWordTypeService(worldService, client);
    }

    @Override
    protected void shutDown() throws Exception {
        stopWebsocket();
        shutdownRemoteSubmitter();
    }

    @Provides
    TrackScapeConnectorConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(TrackScapeConnectorConfig.class);
    }

    @Subscribe
    public void onChatMessage(ChatMessage event) {
        switch (event.getType()) {

            case CLAN_CHAT:
            case CLAN_MESSAGE:
                if (Objects.equals(config.verificationCode(), "") || config.verificationCode() == null) {
                    break;
                }

                if (Objects.equals(event.getName(), "") && Objects.equals(event.getSender(), "")) {
                    break;
                }

                ClanChannel clanChannel = client.getClanChannel();
                String sender = "";
                var isLeagueWorld = false;
                if (event.getType() == ChatMessageType.CLAN_MESSAGE) {
                    sender = clanChannel.getName();
                } else {
                    sender = Text.removeFormattingTags(Text.toJagexName(event.getName()));
                }
                if (Objects.equals(sender, clanChannel.getName())) {
                    if (event.getMessage().equals(CLAN_WELCOME_TEXT)) {
                        break;
                    }
                    isLeagueWorld = findWordTypeService.isPlayerInLeaguesWorld(event.getMessage());
                }

                int iconId = IconID.NO_ENTRY.getIndex();
                var matcher = ICON_PATTERN.matcher(event.getName());
                if (matcher.find()) {
                    iconId = Integer.parseInt(matcher.group(1));
                }

                var rank = GetMembersTitle(sender, clanChannel.getName());
                ChatPayload chatPayload = ChatPayload.from(clanChannel.getName(), sender, event.getMessage(), rank, iconId, isLeagueWorld);
                remoteSubmitter.queue(chatPayload);
                break;
        }
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event) {
        if (event.getGroup().equals("trackScapeconnectorplugin")) {

            shutdownRemoteSubmitter();
            startRemoteSubmitter();
            stopWebsocket();

            if (!config.allowMessagesFromDiscord()) {
                startWebsocket(config.webSocketEndpoint());
            }
        }
    }

    @Subscribe
    public void onClanChannelChanged(ClanChannelChanged event) {

        if (event.getClanId() == ClanID.CLAN) {
            findWordTypeService.loadClanMembers();
            if (event.getClanChannel() == null) {
                shutdownRemoteSubmitter();
                stopWebsocket();
            } else {
                if (config.allowMessagesFromDiscord()) {
                    stopWebsocket();
                    startWebsocket(config.webSocketEndpoint());
                }
                remoteSubmitter = null;
                startRemoteSubmitter();
            }
        }
    }

    @Subscribe
    public void onClanMemberJoined(ClanMemberJoined event) {

        String channelName = event.getClanChannel().getName();
        if (!Objects.equals(channelName, client.getClanChannel().getName())) {
            return;
        }
        findWordTypeService.CLAN_MEMBER_NAMES.add(event.getClanMember().getName());
    }

    @Subscribe
    public void onClanMemberLeft(ClanMemberLeft event) {

        String channelName = event.getClanChannel().getName();
        if (!Objects.equals(channelName, client.getClanChannel().getName())) {
            return;
        }
        findWordTypeService.CLAN_MEMBER_NAMES.remove(event.getClanMember().getName());
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged gameStateChanged) {
        if (gameStateChanged.getGameState() == GameState.LOGIN_SCREEN) {
            shutdownRemoteSubmitter();
            stopWebsocket();
        }
        if (gameStateChanged.getGameState() == GameState.LOGGED_IN) {
            findWordTypeService.loadWorldTypes();
        }
    }

    private void startRemoteSubmitter() {

        if (remoteSubmitter != null) {
            log.debug("Shutting down previous remoteSubmitter...");
            shutdownRemoteSubmitter();
        }

        log.debug("Starting a new remoteSubmitter...");
        remoteSubmitter = RemoteSubmitter.create(httpClient, gson, config.httpApiEndpoint(), config.verificationCode());
        remoteSubmitter.initialize();
    }

    private void shutdownRemoteSubmitter() {
        if (remoteSubmitter != null) {
            remoteSubmitter.shutdown();
            remoteSubmitter = null;
        }
    }

    private String GetMembersTitle(String name, String clanName) {
        String cleanName = Text.removeTags(name);
        ClanChannel clanChannel = client.getClanChannel();
        if (clanChannel != null) {
            ClanChannelMember member = clanChannel.findMember(cleanName);
            if (member != null && clanChannel.getName().equals(clanName)) {
                var rank = member.getRank();
                var clanSettings = client.getClanSettings();
                if (clanSettings != null) {
                    var titleForRank = clanSettings.titleForRank(rank);
                    if (titleForRank == null) {
                        return "Not Ranked";
                    }
                    return titleForRank.getName();
                }
            }
        }
        return "Guest";
    }

    public void startWebsocket(String host) {
        log.debug("Connecting...");
        Request request = new Request.Builder().url(host)
                .addHeader("verification-code", config.verificationCode())
                .build();

        webSocketListener = new com.trackscapeconnector.WebSocketListener(client, clientThread, httpClient, gson, discordIconLocation);
        ws = httpClient.newWebSocket(request, webSocketListener);
        wsExecutorService = Executors.newSingleThreadScheduledExecutor();
        wsExecutorService.scheduleAtFixedRate(this::checkWebSocketConnection, WS_RECONNECT_CHECK_INTERVAL, WS_RECONNECT_CHECK_INTERVAL, TimeUnit.MINUTES);
    }

    public void stopWebsocket() {
        if (ws != null) {
            ws.close(NORMAL_CLOSURE_STATUS, null);
            if (wsExecutorService != null) {
                wsExecutorService.shutdown();
            }
            wsExecutorService = null;
        }
        webSocketListener = null;
    }

    private void checkWebSocketConnection() {
        if (webSocketListener.socketConnected || webSocketListener.socketConnecting) {
            return;
        }
        stopWebsocket();
        startWebsocket(config.webSocketEndpoint());
    }

    private void loadIcon() {

        final IndexedSprite[] modIcons = client.getModIcons();

        if (discordIconLocation != -1 || modIcons == null) {
            return;
        }

        BufferedImage image = ImageUtil.loadImageResource(getClass(), "/discord-mark-blue-smaller.png");
        IndexedSprite indexedSprite = ImageUtil.getImageIndexedSprite(image, client);
        discordIconLocation = modIcons.length;

        final IndexedSprite[] newModIcons = Arrays.copyOf(modIcons, modIcons.length + 1);
        newModIcons[newModIcons.length - 1] = indexedSprite;

        client.setModIcons(newModIcons);

    }
}

package com.trackscapeconnector;

import net.runelite.api.Client;
import net.runelite.api.clan.ClanChannel;
import net.runelite.api.clan.ClanChannelMember;
import net.runelite.client.game.WorldService;
import net.runelite.client.util.Text;
import net.runelite.http.api.worlds.World;
import net.runelite.http.api.worlds.WorldType;

import java.util.HashSet;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

// Finding world type the player is on is based off of League Chat Broadcasts Plugin.
// https://github.com/Memebeams/league-chat-broadcasts/
public class FindWordTypeService {
    public final Set<String> CLAN_MEMBER_NAMES = new HashSet<>();
    private Set<Integer> LEAGUE_WORLDS = new HashSet<>();
    private WorldService worldService;
    private Client client;

    public FindWordTypeService(WorldService worldService, Client client) {
        this.worldService = worldService;
        this.client = client;
    }

    public void loadWorldTypes() {
        LEAGUE_WORLDS = worldService.getWorlds().getWorlds().stream()
                .filter(world -> world.getTypes().contains(WorldType.SEASONAL))
                .map(World::getId)
                .collect(Collectors.toSet());
    }

    public void loadClanMembers() {
        if (client.getClanChannel() == null) {
            return;
        }

        var clanMates = client.getClanChannel().getMembers().stream()
                .map(ClanChannelMember::getName)
                .map(Text::toJagexName)
                .collect(Collectors.toSet());
        CLAN_MEMBER_NAMES.addAll(clanMates);
    }

    public boolean isPlayerInLeaguesWorld(String message) {

        String cleanMessage = Text.sanitize(message);
        Optional<String> possibleClanmateName = CLAN_MEMBER_NAMES.stream().filter(cleanMessage::startsWith).findAny();

        if (possibleClanmateName.isEmpty()) return false;
        String clanmateName = possibleClanmateName.get();

        ClanChannel clan = client.getClanChannel();
        assert clan != null;
        var possibleClanMember = clan.findMember(clanmateName);

        assert possibleClanMember != null;
        return LEAGUE_WORLDS.contains(possibleClanMember.getWorld());
    }
}

