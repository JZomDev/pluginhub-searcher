package com.cachunk;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CaChunkPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CaChunkPlugin.class);
		RuneLite.main(args);
	}
}
package com.cachunk;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("cachunk")
public interface CaChunkConfig extends Config
{
    @ConfigItem(
            keyName = "startingChunks",
            name = "Starting Chunks",
            description = "How many chunks to start with at 0 Combat Achievement Points",
            position = 0
    )
    default int startingChunks() { return 1; }
}

package com.cachunk;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.awt.*;

import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;


public class CaChunkOverlay extends OverlayPanel {
    private final Client client;
    private final CaChunkConfig config;
    private final CaChunkPlugin plugin;

    private final static String UNLOCKED_CHUNKS_STRING = "Chunks Unlocked:";
    private final static String CA_POINTS_STRING = "Combat Achievement Points:";
    private final static String AVAILABLE_CHUNKS = "Available Chunks:";
    private final static String[] STRINGS = new String[] {
            UNLOCKED_CHUNKS_STRING,
            CA_POINTS_STRING,
            AVAILABLE_CHUNKS,
    };

    @Inject
    private CaChunkOverlay(Client client, CaChunkConfig config, CaChunkPlugin plugin) {
        super(plugin);
        this.plugin = plugin;
        this.client = client;
        this.config = config;
        setPosition(OverlayPosition.BOTTOM_LEFT);
        setPriority(OverlayPriority.MED);
        getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "CAChunk Mode Overlay"));
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        int unlockedChunks = plugin.getChunkUnlockCount();
        int caPoints = plugin.getCAPoints();
        int availableChunks = caPoints - unlockedChunks + config.startingChunks();;

        panelComponent.getChildren().add(LineComponent.builder()
                .left(UNLOCKED_CHUNKS_STRING)
                .leftColor(getTextColor())
                .right(String.valueOf(unlockedChunks))
                .rightColor(getTextColor())
                .build());

        panelComponent.getChildren().add(LineComponent.builder()
                .left(CA_POINTS_STRING)
                .right(String.valueOf(caPoints))
                .build());


        panelComponent.getChildren().add(LineComponent.builder()
                .left(AVAILABLE_CHUNKS)
                .right(String.valueOf(availableChunks))
                .build());

        String[] valueStrings = new String[] {
                String.valueOf(unlockedChunks), String.valueOf(caPoints), String.valueOf(availableChunks)
        };
        panelComponent.setPreferredSize(new Dimension(
                getLongestStringWidth(STRINGS, graphics)
                        + getLongestStringWidth(valueStrings, graphics),
                0));

        return super.render(graphics);
    }

    private Color getTextColor() {
        if ((plugin.getCAPoints() + config.startingChunks()) < plugin.getChunkUnlockCount()){
            return Color.RED;
        }
        return Color.WHITE;
    }

    private int getLongestStringWidth(String[] strings, Graphics2D graphics) {
        int longest = graphics.getFontMetrics().stringWidth("000000");
        for(String i: strings) {
            int currentItemWidth = graphics.getFontMetrics().stringWidth(i);
            if(currentItemWidth > longest) {
                longest = currentItemWidth;
            }
        }
        return longest;
    }
}

package com.cachunk;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.ClientTick;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.Text;
import net.runelite.client.ui.overlay.OverlayManager;

import java.util.List;

@Slf4j
@PluginDescriptor(
	name = "CAChunk"
)
public class CaChunkPlugin extends Plugin
{
	public static final int CA_POINTS_TOTAL = 14815;

	private int unlockedChunks;
	private int caPoints;
	private boolean isLoggedIn;

	@Inject
	private Client client;
	@Inject
	private CaChunkConfig config;
	@Inject
	private ConfigManager configManager;
	@Inject
	private OverlayManager overlayManager;
	@Inject
	private CaChunkOverlay infoOverlay;
	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(infoOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(infoOverlay);
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		if (gameStateChanged.getGameState() == GameState.LOGGED_IN)
		{
			isLoggedIn = true;
			//client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Example says " + config.greeting(), null);
			caPoints = getCAPoints();
			unlockedChunks = getChunkUnlockCount();
		} else if (gameStateChanged.getGameState() == GameState.LOGIN_SCREEN){
			isLoggedIn = false;
		}
	}

	@Subscribe
	public void onClientTick(ClientTick t)
	{
		if (isLoggedIn){
			caPoints = getCAPoints();
			unlockedChunks = getChunkUnlockCount();
		}
	}

	@Provides
	CaChunkConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(CaChunkConfig.class);
	}

	private String getChunkUnlockString(){
		return configManager.getConfiguration("regionlocker", "unlockedRegions");
	}

	public int getChunkUnlockCount(){
		String csvChunkString = getChunkUnlockString();
		List<String> chunkStrings = Text.fromCSV(csvChunkString);
		return chunkStrings.size();
	}

	public int getCAPoints(){
		return client.getVarbitValue(CA_POINTS_TOTAL);
	}
}

