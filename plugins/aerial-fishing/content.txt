package com.aerial;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AerialPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AerialPlugin.class);
		RuneLite.main(args);
	}
}
package com.aerial;

import static com.aerial.AerialPlugin.GLOVE_NO_BIRD;
import static com.aerial.AerialPlugin.GLOVE_WITH_BIRD;
import java.awt.BasicStroke;
import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.kit.KitType;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

public class AerialOverlay extends Overlay
{
	Client client;

	AerialConfig config;

	static final int[] distances = new int[] {1, 3, 4, 6, 8 };

	static final WorldArea ignoreArea = new WorldArea(1360, 3627, 16, 32, 0);

	@Inject
	public AerialOverlay(Client client, AerialConfig config)
	{
		this.client = client;
		this.config = config;

		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_SCENE);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (!config.drawRadius()) {
			return null;
		}

		int weaponId = client.getLocalPlayer().getPlayerComposition().getEquipmentId(KitType.WEAPON);
		if (weaponId != GLOVE_WITH_BIRD && weaponId != GLOVE_NO_BIRD) {
			return null;
		}

		WorldPoint center = client.getLocalPlayer().getWorldLocation();
		for (int dist : distances) {
			square(center, graphics, dist);
		}

		return null;
	}

	private void square(WorldPoint center, Graphics2D graphics, int dist)
	{
		int cx = center.getX();
		int cy = center.getY();

		//top side
		for (int i = -dist; i <= dist; i++) {
			renderWorldPointBorders(graphics, new WorldPoint(cx + i, cy + dist, center.getPlane()), true, false, false, false);
		}

		//bottom side
		for (int i = -dist; i <= dist; i++) {
			renderWorldPointBorders(graphics, new WorldPoint(cx + i, cy - dist, center.getPlane()), false, false, true, false);
		}

		//left side
		for (int i = -dist; i <= dist; i++) {
			renderWorldPointBorders(graphics, new WorldPoint(cx - dist, cy - i, center.getPlane()), false, false, false, true);
		}

		//right side
		for (int i = -dist; i <= dist; i++) {
			renderWorldPointBorders(graphics, new WorldPoint(cx + dist, cy + i, center.getPlane()), false, true, false, false);
		}

	}

	private void renderWorldPointBorders(Graphics2D graphics, WorldPoint worldPoint, boolean topBorder, boolean rightBorder, boolean bottomBorder, boolean leftBorder)
	{
		if (ignoreArea.contains2D(worldPoint)) {
			return;
		}

		LocalPoint localPoint = LocalPoint.fromWorld(client, worldPoint);

		if (localPoint == null)
		{
			return;
		}

		int plane = worldPoint.getPlane();

		graphics.setColor(config.borderColor());
		graphics.setStroke(new BasicStroke(config.borderWidth()));

		if (topBorder)
		{
			Point canvasPointA = Perspective.localToCanvas(client, new LocalPoint(localPoint.getX() - 64, localPoint.getY() + 64), plane);

			if (canvasPointA != null)
			{
				int x1 = canvasPointA.getX();
				int y1 = canvasPointA.getY();

				Point canvasPointB = Perspective.localToCanvas(client, new LocalPoint(localPoint.getX() + 64, localPoint.getY() + 64), plane);

				if (canvasPointB != null)
				{
					int x2 = canvasPointB.getX();
					int y2 = canvasPointB.getY();

					graphics.drawLine(x1, y1, x2, y2);
				}
			}
		}

		if (rightBorder)
		{
			Point canvasPointA = Perspective.localToCanvas(client, new LocalPoint(localPoint.getX() + 64, localPoint.getY() - 64), plane);

			if (canvasPointA != null)
			{
				int x1 = canvasPointA.getX();
				int y1 = canvasPointA.getY();

				Point canvasPointB = Perspective.localToCanvas(client, new LocalPoint(localPoint.getX() + 64, localPoint.getY() + 64), plane);

				if (canvasPointB != null)
				{
					int x2 = canvasPointB.getX();
					int y2 = canvasPointB.getY();

					graphics.drawLine(x1, y1, x2, y2);
				}
			}
		}

		if (bottomBorder)
		{
			Point canvasPointA = Perspective.localToCanvas(client, new LocalPoint(localPoint.getX() - 64, localPoint.getY() - 64), plane);

			if (canvasPointA != null)
			{
				int x1 = canvasPointA.getX();
				int y1 = canvasPointA.getY();

				Point canvasPointB = Perspective.localToCanvas(client, new LocalPoint(localPoint.getX() + 64, localPoint.getY() - 64), plane);

				if (canvasPointB != null)
				{
					int x2 = canvasPointB.getX();
					int y2 = canvasPointB.getY();

					graphics.drawLine(x1, y1, x2, y2);
				}
			}
		}

		if (leftBorder)
		{
			Point canvasPointA = Perspective.localToCanvas(client, new LocalPoint(localPoint.getX() - 64, localPoint.getY() - 64), plane);

			if (canvasPointA != null)
			{
				int x1 = canvasPointA.getX();
				int y1 = canvasPointA.getY();

				Point canvasPointB = Perspective.localToCanvas(client, new LocalPoint(localPoint.getX() - 64, localPoint.getY() + 64), plane);

				if (canvasPointB != null)
				{
					int x2 = canvasPointB.getX();
					int y2 = canvasPointB.getY();

					graphics.drawLine(x1, y1, x2, y2);
				}
			}
		}
	}
}

package com.aerial;

import com.google.inject.Provides;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Projectile;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameTick;
import net.runelite.api.kit.KitType;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "Aerial Fishing"
)
public class AerialPlugin extends Plugin
{
	static final int BIRD_PROJECTILE = 1632;
	static final int GLOVE_NO_BIRD = 22816;
	static final int GLOVE_WITH_BIRD = 22817;

	public static Map<Integer, Integer> distToTicks = null;

	@Inject
	private Client client;

	@Inject
	private AerialConfig config;

	@Inject
	private AerialOverlay aerialOverlay;

	@Inject
	private OverlayManager overlayManager;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(aerialOverlay);
		distToTicks = new HashMap<>();
		distToTicks.put(1, 0);
		distToTicks.put(2, 1);
		distToTicks.put(3, 1);
		distToTicks.put(4, 2);
		distToTicks.put(5, 3);
		distToTicks.put(6, 3);
		distToTicks.put(7, 4);
		distToTicks.put(8, 4);
		distToTicks.put(9, 5);
		distToTicks.put(10, 5);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(aerialOverlay);
		distToTicks = null;
		pointToEndTick.clear();
	}

	private final Map<Integer, Integer> pointToEndTick = new HashMap<>();

	@Subscribe
	public void onGameTick(GameTick event) {
		int weaponId = client.getLocalPlayer().getPlayerComposition().getEquipmentId(KitType.WEAPON);
		if (weaponId != GLOVE_WITH_BIRD && weaponId != GLOVE_NO_BIRD) {
			return;
		}

		for (Projectile p : client.getProjectiles()) {
			if (p.getId() != BIRD_PROJECTILE) {
				continue;
			}
			if (p.getInteracting() == null || !p.getInteracting().getName().equals(client.getLocalPlayer().getName())) {
				continue;
			}
			WorldPoint point = WorldPoint.fromLocal(client, new LocalPoint(p.getX1(), p.getY1()));
			int distance = point.distanceTo2D(WorldPoint.fromLocal(client, p.getTarget()));

			int hash = getPointHash(point);
			if (pointToEndTick.containsKey(hash)) {
				continue;
			}

			pointToEndTick.put(hash, client.getTickCount() + distToTicks.getOrDefault(distance, -1));
		}


		for(Iterator<Map.Entry<Integer, Integer>> it = pointToEndTick.entrySet().iterator(); it.hasNext(); ) {
			Map.Entry<Integer, Integer> entry = it.next();
			if (client.getTickCount() + 1 == entry.getValue() && config.warningSound()) {
				client.playSoundEffect(3813);
			}

			if (client.getTickCount() == entry.getValue() && config.idleSound()) {
				client.playSoundEffect(3815);
			}

			if (client.getTickCount() >= entry.getValue() + 6) {
				it.remove();
			}
		}
	}

	private static int getPointHash(WorldPoint point) {
		return point.getX() << 15 + point.getY();
	}

	@Provides
	AerialConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(AerialConfig.class);
	}
}

package com.aerial;

import java.awt.Color;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;

@ConfigGroup("aerial-fishing")
public interface AerialConfig extends Config
{
	@ConfigItem(
		position = 0,
		keyName = "idleSound",
		name = "Play Idle Sound",
		description = "Plays a sound when you can click another spot."
	)
	default boolean idleSound()
	{
		return true;
	}

	@ConfigItem(
		position = 1,
		keyName = "warningSound",
		name = "Play Pre-Idle Sound",
		description = "Plays a sound one tick before you can click another spot."
	)
	default boolean warningSound()
	{
		return true;
	}

	@ConfigItem(
		position = 2,
		keyName = "drawBorder",
		name = "Draw Distance Squares",
		description = "Toggle overlay to help spot closer fishing spots."
	)
	default boolean drawRadius()
	{
		return true;
	}

	@ConfigItem(
		position = 3,
		keyName = "borderColor",
		name = "Border color",
		description = "Color of the overlay's border."
	)
	@Alpha
	default Color borderColor()
	{
		return new Color(0x7AFFFF00, true);
	}

	@ConfigItem(
		position = 4,
		keyName = "borderWidth",
		name = "Border width",
		description = "Width of the overlay's border."
	)
	@Range(
		min = 1
	)
	default int borderWidth()
	{
		return 1;
	}
}

