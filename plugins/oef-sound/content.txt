package com.code;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class OefLauncher
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(OefPlugin.class);
		RuneLite.main(args);
	}
}
package com.code;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import javax.swing.*;

@ConfigGroup("Oof Sound")
public interface OefConfig extends Config
{
	@ConfigItem(
		keyName = "Death",
		name = "Death",
		description = "Make an oof sound when you die!"
	)
	default boolean death()
	{
		return true;
	}

	@ConfigItem(
			keyName = "Damage",
			name = "Damage",
			description = "Make an oof sound when you take damage!"
	)
	default boolean damage()
	{
		return true;
	}


	@ConfigItem(
			keyName = "Overlay",
			name = "Overlay",
			description = "Toggle the overlay."
	)
	default boolean overlay()
	{
		return true;
	}

	@ConfigItem(
			keyName = "Volume",
			name = "Volume",
			description = "At what volume you want to play the oof sounds."
	)
	default int volume()
	{
		return 80;
	}
}

package com.code;

import com.google.inject.Provides;

import javax.inject.Inject;
import javax.sound.sampled.*;

import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.HitsplatApplied;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.io.*;
import java.net.URL;

@Slf4j
@PluginDescriptor(
		name = "Oof Sound"
)
public class OefPlugin extends Plugin {

	String soundFilePath = "MinecraftOefSound.wav";

	public static int oofCount = 0;


	@Inject
	private OverlayManager overlayManager;

	@Inject
	private Client client;

	@Inject
	private OefConfig config;

	@Inject
	private OefOverlay overlay;


	public Clip clip;

	public OefPlugin() {
	}

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);

		Class c = null;
		AudioInputStream soundFileAudioInputStream = null;
		try{
			URL url = OefPlugin.class.getClassLoader().getResource(soundFilePath);
			soundFileAudioInputStream = AudioSystem.getAudioInputStream(url);
		}
		catch (UnsupportedAudioFileException | IOException e) {
			e.printStackTrace();
		}

		if(soundFileAudioInputStream == null) return;

		try
		{
			clip = AudioSystem.getClip();
			clip.open(soundFileAudioInputStream);
		} catch (LineUnavailableException | IOException e) {log.warn("Could not load the file: ", e);}
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
		clip.stop();
		clip.close();
	}



	@Subscribe
	public void onAnimationChanged(AnimationChanged animationChanged)
	{
		if(client.getLocalPlayer() == null) return;
		if (client.getLocalPlayer().getHealthRatio() != 0) return;
		if (client.getLocalPlayer().getAnimation() != AnimationID.DEATH) return;

		if (client.getGameState() == GameState.LOGGED_IN)
		{
			if (config.death())
			{
				System.out.println("Death");

				playSound();
			}
		}
	}

	@Subscribe
	public void onHitsplatApplied(HitsplatApplied hitsplatApplied)
	{
		Actor actor = hitsplatApplied.getActor();
		if (actor == client.getLocalPlayer())
		{
			if (client.getGameState() == GameState.LOGGED_IN)
			{
				if (config.damage())
				{
					playSound();
				}
			}
		}
	}

	private void playSound()
	{
		if(clip.isActive()) clip.stop();

		oofCount++;

		//volume
		FloatControl volume = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);
		float volumeValue = config.volume() - 100;

		volume.setValue(volumeValue);
		clip.setFramePosition(0);
		clip.start();
	}


	@Provides
	OefConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(OefConfig.class);
	}

}

/*
 * Copyright (c) 2021, MakingStan
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.code;

import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import javax.inject.Inject;
import java.awt.*;

public class OefOverlay extends Overlay
{
    private final PanelComponent panelComponent = new PanelComponent();

    @Inject
    OefConfig config;

    @Override
    public Dimension render(Graphics2D graphics)
    {
        panelComponent.getChildren().clear();
        String overlayTitle = "Oofs:";

        // Build overlay title (Current task:)
        panelComponent.getChildren().add(TitleComponent.builder()
                .text(overlayTitle)
                .color(Color.GREEN)
                .build());

        // Set the size of the overlay (width)
        panelComponent.setPreferredSize(new Dimension(
                graphics.getFontMetrics().stringWidth(overlayTitle) + 60,
                50));

        panelComponent.getChildren().add(LineComponent.builder()
                .left(String.valueOf(OefPlugin.oofCount))
                .build());

        if(config.overlay())
        {
            return panelComponent.render(graphics);
        }
        else
        {
            return null;
        }


    }

    @Inject
    private OefOverlay()
    {
        setPosition(OverlayPosition.TOP_LEFT);
    }
}

