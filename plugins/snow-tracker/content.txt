package sh.bitwise.runelite;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SnowTrackerPluginTest {
    public static void main(String[] args) throws Exception {
        ExternalPluginManager.loadBuiltin(SnowTrackerPlugin.class);
        RuneLite.main(args);
    }
}
package sh.bitwise.runelite;

import java.awt.*;

public class Constants {
    public static final Color COLOR_TEXT = new Color(244,241,222,255);
    public static final Color COLOR_WARNING = new Color(242,204,143,255);
    public static final Color COLOR_ERROR = new Color(224,122,95,255);
    public static final Color COLOR_BACKGROUND = new Color(0,0,0,167);

    public static final int THRESHOLD_ERROR = 1;
    public static final int THRESHOLD_WARNING = 7;

    public static final int BACKGROUND_SIZE = 18;
}

package sh.bitwise.runelite;

import net.runelite.client.config.*;

import java.awt.*;


@ConfigGroup("snowtracker")
public interface SnowTrackerConfig extends Config {
    @Alpha
    @ConfigItem(
            keyName = "textColor",
            name = "Text Color",
            description = "Color of normal timer text",
            position = 0
    )
    default Color getTextColor() {
        return Constants.COLOR_TEXT;
    }

    @Alpha
    @ConfigItem(
            keyName = "warningColor",
            name = "Warning Color",
            description = "Color of warning timer text",
            position = 1
    )
    default Color getWarningColor() {
        return Constants.COLOR_WARNING;
    }

    @Range(
            max = 24
    )
    @ConfigItem(
            keyName = "warningThreshold",
            name = "Warning Threshold",
            description = "When the ticks drop BELOW this number, the warning color is applied.\nNOTE: 0 effectively disables the warning color.",
            position = 2
    )
    default int getWarningThreshold() {
        return Constants.THRESHOLD_WARNING;
    }

    @Alpha
    @ConfigItem(
            keyName = "errorColor",
            name = "Error Color",
            description = "Color of error timer text",
            position = 3
    )
    default Color getErrorColor() {
        return Constants.COLOR_ERROR;
    }

    @Range(
            max = 24
    )
    @ConfigItem(
            keyName = "errorThreshold",
            name = "Error Threshold",
            description = "When the ticks drop BELOW this number, the error color is applied.\nNOTE: 0 effectively disables the error color.",
            position = 4
    )
    default int getErrorThreshold() {
        return Constants.THRESHOLD_ERROR;
    }

    @ConfigItem(
            keyName = "enableTextOutline",
            name = "Outline Text",
            description = "If the timer text should have an outline",
            position = 5
    )
    default boolean getEnableTextOutline() {
        return false;
    }

    @ConfigSection(
            name = "Background Settings",
            description = "All settings relating to the timer background",
            position = 100
    )
    String backgroundSettings = "backgroundSettings";

    @ConfigItem(
            keyName = "enableBackground",
            name = "Enable Background",
            description = "If the timer background should be enabled",
            position = 0,
            section = backgroundSettings
    )
    default boolean getEnableBackground() {
        return true;
    }

    @Range(
            min = 16,
            max = 30
    )
    @ConfigItem(
            keyName = "backgroundSize",
            name = "Background Size",
            description = "How large the timer background should be",
            position = 1,
            section = backgroundSettings
    )
    default int getBackgroundSize() {
        return Constants.BACKGROUND_SIZE;
    }

    @Alpha
    @ConfigItem(
            keyName = "backgroundColor",
            name = "Background Color",
            description = "Color of background box surrounding the timer",
            position = 2,
            section = backgroundSettings
    )
    default Color getBackgroundColor() {
        return Constants.COLOR_BACKGROUND;
    }


}
package sh.bitwise.runelite;

import com.google.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

import java.awt.*;
import java.awt.geom.Rectangle2D;

public class SnowOverlay extends Overlay {
    private final SnowTrackerPlugin plugin;
    private final SnowTrackerConfig config;
    private final Client client;

    @Inject
    SnowOverlay(SnowTrackerPlugin plugin, SnowTrackerConfig config, Client client) {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        this.plugin = plugin;
        this.config = config;
        this.client = client;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        final Color colorText = this.config.getTextColor();
        final boolean shouldOutline = this.config.getEnableTextOutline();

        final Color colorWarning = this.config.getWarningColor();
        final int thresholdWarning = this.config.getWarningThreshold();

        final Color colorError = this.config.getErrorColor();
        final int thresholdError = this.config.getErrorThreshold();

        final Color colorBackground = this.config.getBackgroundColor();
        final int backgroundSize = this.config.getBackgroundSize();

        final boolean backgroundEnabled = this.config.getEnableBackground();

        this.plugin.getSnowList().forEach(snow -> {
            final String text = snow.getTicksLeftDisplay();
            final LocalPoint localPoint = LocalPoint.fromWorld(this.client, snow.getLocation());
            if (localPoint != null) {
                final Color color;
                final int counter = snow.getTicksLeft();
                if (counter < thresholdError) {
                    color = colorError;
                } else if (counter < thresholdWarning) {
                    color = colorWarning;
                } else {
                    color = colorText;
                }

                final Point point = Perspective.getCanvasTextLocation(this.client, graphics, localPoint, text, 0);
                Rectangle2D textBounds = graphics.getFontMetrics().getStringBounds(text, graphics);

                if (backgroundEnabled) {
                    this.drawTextBackground(graphics, point, colorBackground, textBounds, backgroundSize);
                }

                this.drawText(graphics, point, color, shouldOutline, text);
            }
        });

        return null;
    }

    private void drawTextBackground(Graphics2D graphics, Point point, Color color, Rectangle2D textBounds, int size) {
        graphics.setColor(color);

        final int x = (int) (point.getX() - (size / 2) + (textBounds.getWidth() / 2));
        final int y = (int) (point.getY() - (size / 2) - (textBounds.getHeight() / 2));

        graphics.fillRect(x, y, size, size);
    }

    private void drawText(Graphics2D graphics, Point point, Color color, boolean shouldOutline, String text) {
        final int x = point.getX();
        final int y = point.getY();

        if (shouldOutline) {
            graphics.setColor(Color.BLACK);
            graphics.drawString(text, x + 1, y + 1);
        }

        graphics.setColor(color);
        graphics.drawString(text, x, y);
    }
}

package sh.bitwise.runelite;

import com.google.inject.Provides;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Player;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;
import java.util.LinkedList;
import java.util.List;
import java.util.Objects;

@Slf4j
@PluginDescriptor(
        name = "Snow Tracker",
        description = "Tracks snow on the ground",
        tags = {"snow", "track", "tracker", "time", "timer"}
)
public class SnowTrackerPlugin extends Plugin {
    private static final String SNOW_MESSAGE = "You made some snow fall!";

    @Getter
    private final List<Snow> snowList = new LinkedList<>();

    @Inject
    private Client client;

    @Inject
    private SnowOverlay overlay;

    @Inject
    private OverlayManager overlayManager;

    private WorldPoint playerLocation;

    @Provides
    SnowTrackerConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(SnowTrackerConfig.class);
    }

    @Override
    protected void startUp() {
        overlayManager.add(overlay);
    }

    @Override
    protected void shutDown() {
        overlayManager.remove(overlay);
        this.snowList.clear();
    }

    @Subscribe
    public void onChatMessage(ChatMessage event) {
        if (Objects.equals(event.getMessage(), SNOW_MESSAGE)) {
            log.debug("Snow created by current player at {}", this.playerLocation);
            this.snowList.add(new Snow(this.playerLocation));
        }
    }

    @Subscribe
    public void onGameTick(GameTick event) {
        this.snowList.forEach(Snow::decrement);
        this.snowList.removeIf(snow -> snow.getTicksLeft() < 0);

        final Player player = client.getLocalPlayer();
        if (null != player) {
            player.getLocalLocation();
            this.playerLocation = player.getWorldLocation();
        }
    }
}

package sh.bitwise.runelite;

import lombok.Getter;
import net.runelite.api.coords.WorldPoint;

/**
 * Wrapper class for a GameObject that represents Snow.
 */
public class Snow {
    private static final int DEFAULT_DURATION = 24;

    @Getter
    private final WorldPoint location;

    @Getter
    private String ticksLeftDisplay;

    @Getter
    private int ticksLeft;

    Snow(WorldPoint location) {
        this.ticksLeft = DEFAULT_DURATION;
        this.ticksLeftDisplay = "" + this.ticksLeft;
        this.location = location;
    }

    public void decrement() {
        this.ticksLeftDisplay = "" + --this.ticksLeft;
    }
}

