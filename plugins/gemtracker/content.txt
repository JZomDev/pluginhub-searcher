package com.gemtracker;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class GemTrackerPluginText
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(GemTrackerPlugin.class);
		RuneLite.main(args);
	}
}
package com.gemtracker;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.*;

@ConfigGroup("gemtracker")
public interface GemTrackerConfig extends Config
        {
            @ConfigItem(
                position = 1,
                keyName = "standAloneMode",
                name = "Stand alone mode?",
                description = "Keeps track of overall mining stats while your mining. Use if not using the mining plugin."
            )
            default boolean standAloneMode() { return false; }

            @ConfigItem(
                    position = 2,
                    keyName = "trackGemTypes",
                    name = "Track gems types?",
                    description = "Keeps track of individual gem types while your mining."
            )
            default boolean trackGemTypes() { return true; }
            @ConfigItem(
                    position = 3,
                    keyName = "trackXpHr",
                    name = "Display xp per hour?",
                    description = "Keeps track of xp per hour while mining."
            )
            default boolean trackXpHr() { return true; }

            @ConfigItem(
                    position = 4,
                    keyName = "trackProfit",
                    name = "Display total profit?",
                    description = "Tracks profit made from mining gem rocks."
            )
            default boolean trackProfit() { return true; }

            @ConfigItem(
                    position = 5,
                    keyName = "trackLoads",
                    name = "Display total loads?",
                    description = "Tracks how many load of 28 gems have been mined."
            )
            default boolean trackLoads() { return false; }

            @ConfigItem(
                    position = 6,
                    keyName = "gemPrices",
                    name = "Display gem prices?",
                    description = "Displays current gem prices beside their count."
            )
            default boolean gemPrices() { return false; }

            @ConfigItem(
                    position = 7,
                    keyName = "textColor",
                    name = "Change text color",
                    description = "Change the color of the text within the overlay."
            )
            default Color cTextColor() {return Color.WHITE;}
}
package com.gemtracker;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ItemID;
import net.runelite.client.game.ItemManager;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.time.Instant;

@Slf4j
@Singleton
public class GemTrackerSession
{
    @Getter
    @Setter
    public Instant gemFound;
    @Inject
    ItemManager itemManager;

    private final GemTrackerPlugin plugin;
    @Getter
    @Setter(AccessLevel.PACKAGE)
    private int jadesFound;
    @Getter
    @Setter(AccessLevel.PACKAGE)
    private int diamondsFound;
    @Getter
    @Setter(AccessLevel.PACKAGE)
    private int rubiesFound;
    @Getter
    @Setter(AccessLevel.PACKAGE)
    private int opalsFound;
    @Getter
    @Setter(AccessLevel.PACKAGE)
    private int sapphiresFound;
    @Getter
    @Setter(AccessLevel.PACKAGE)
    private int emeraldsFound;
    @Getter
    @Setter(AccessLevel.PACKAGE)
    private int redtopazFound;

    @Getter
    @Setter
    public int loadsDone;

    int profitDiamonds;
    int profitRubies;
    int profitEmeralds;
    int profitSapphires;
    int profitJades;
    int profitOpals;
    int profitRedTopaz;
    int tProfit = -1;

    @Getter
    public int currTotalGems;
    @Getter
    private Instant lastMined;



    @Inject
    public GemTrackerSession(ItemManager itemManager, GemTrackerPlugin plugin) {
        this.itemManager = itemManager;
        this.plugin = plugin;
    }

    void incrementGemFound(int gemID)
    {
        gemFound = Instant.now();

        switch (gemID)
        {
                case ItemID.UNCUT_DIAMOND:
                    diamondsFound++;
                    break;

                case ItemID.UNCUT_RUBY:
                    rubiesFound++;
                    break;

                case ItemID.UNCUT_EMERALD:
                    emeraldsFound++;
                    break;

                case ItemID.UNCUT_SAPPHIRE:
                    sapphiresFound++;
                    break;

                case ItemID.UNCUT_JADE:
                    jadesFound++;
                    break;

                case ItemID.UNCUT_OPAL:
                    opalsFound++;
                    break;

                case ItemID.UNCUT_RED_TOPAZ:
                    redtopazFound++;
                    break;

                default:
                    //log.debug("Invalid gem type specified. The gem count will not be incremented.");
                    System.out.println("Invalid gem type.");

        }
    }

    void setLastMined() {
        lastMined = Instant.now();
}

    public int calcLoadsDone () {

        currTotalGems = 0;

        int tGems = (diamondsFound + rubiesFound + emeraldsFound + sapphiresFound + jadesFound + opalsFound + redtopazFound);

        if (tGems > 0) {
            currTotalGems = tGems / 28;
            if (currTotalGems >= 1) {
                return Math.round(currTotalGems);
            }
        }
        return 0;
    }

    public int calcTotalValue() {

        int totalGems = (diamondsFound + rubiesFound + emeraldsFound + sapphiresFound + jadesFound + opalsFound + redtopazFound);

        if (totalGems > 0) {

            if (diamondsFound > 0) {
                profitDiamonds = (diamondsFound * itemManager.getItemPrice(ItemID.UNCUT_DIAMOND));
            }
            if (rubiesFound > 0) {
                profitRubies = (rubiesFound * itemManager.getItemPrice(ItemID.UNCUT_RUBY));
            }
            if (emeraldsFound > 0) {
                profitEmeralds = (emeraldsFound * itemManager.getItemPrice(ItemID.UNCUT_EMERALD));
            }
            if (sapphiresFound > 0) {
                profitSapphires = (sapphiresFound * itemManager.getItemPrice(ItemID.UNCUT_SAPPHIRE));
            }
            if (jadesFound > 0) {
                profitJades = (jadesFound * itemManager.getItemPrice(ItemID.UNCUT_JADE));
            }
            if (opalsFound > 0) {
                profitOpals = (opalsFound * itemManager.getItemPrice(ItemID.UNCUT_OPAL));
            }
            if (redtopazFound > 0) {
                profitRedTopaz = (redtopazFound * itemManager.getItemPrice(ItemID.UNCUT_RED_TOPAZ));
            }

            tProfit = (profitDiamonds + profitRubies + profitEmeralds + profitSapphires + profitJades + profitOpals + profitRedTopaz);

            return tProfit;
        }

        return 0;
    }

}

package com.gemtracker;

import com.google.common.collect.ImmutableSet;
import net.runelite.api.AnimationID;
import net.runelite.api.Client;
import net.runelite.api.Skill;
import net.runelite.client.game.ItemManager;
import net.runelite.api.ItemID;
import net.runelite.client.plugins.xptracker.XpTrackerService;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import javax.inject.Inject;
import java.awt.*;
import java.util.Set;

import static net.runelite.api.MenuAction.RUNELITE_OVERLAY;

class GemTrackerOverlay extends OverlayPanel {
    private static final String GEMTRACKER_RESET = "Reset";

    @Inject
    ItemManager itemManager;


    private static final Set<Integer> MINING_ANIMATION = ImmutableSet.of(
            AnimationID.MINING_BRONZE_PICKAXE,
            AnimationID.MINING_IRON_PICKAXE,
            AnimationID.MINING_STEEL_PICKAXE,
            AnimationID.MINING_BLACK_PICKAXE,
            AnimationID.MINING_MITHRIL_PICKAXE,
            AnimationID.MINING_ADAMANT_PICKAXE,
            AnimationID.MINING_RUNE_PICKAXE,
            AnimationID.MINING_GILDED_PICKAXE,
            AnimationID.MINING_DRAGON_PICKAXE,
            AnimationID.MINING_DRAGON_PICKAXE_OR,
            AnimationID.MINING_DRAGON_PICKAXE_UPGRADED,
            AnimationID.MINING_3A_PICKAXE,
            AnimationID.MINING_INFERNAL_PICKAXE,
            AnimationID.MINING_CRYSTAL_PICKAXE);

    private final Client client;
    private final GemTrackerPlugin plugin;
    private final GemTrackerConfig config;

    private final GemTrackerSession gemTrackerSession;
    private XpTrackerService xpTrackerService;

    @Inject
    public GemTrackerOverlay(Client client, GemTrackerPlugin plugin, GemTrackerConfig config, GemTrackerSession gemTrackerSession, XpTrackerService xpTrackerService, ItemManager itemManager) {
        super(plugin);
        setPosition(OverlayPosition.TOP_LEFT);
        this.client = client;
        this.plugin = plugin;
        this.gemTrackerSession = gemTrackerSession;
        this.config = config;
        this.xpTrackerService = xpTrackerService;
        this.itemManager = itemManager;
        addMenuEntry(RUNELITE_OVERLAY, GEMTRACKER_RESET, "Gem Tracker overlay", e -> plugin.reset());
    }

    @Override
    public Dimension render(Graphics2D graphics) {

        if (gemTrackerSession.getGemFound() == null || !plugin.isInSvm()) {
            return null;
        }

        if (plugin.isInSvm()) {
            if (config.standAloneMode()) {
                if (MINING_ANIMATION.contains(client.getLocalPlayer().getAnimation())) {
                    panelComponent.getChildren().add(TitleComponent.builder()
                            .text("Gem Tracker")
                            .color(Color.GREEN)
                            .build());
                } else {
                    panelComponent.getChildren().add(TitleComponent.builder()
                            .text("Gem Tracker")
                            .color(Color.RED)
                            .build());
                }
            } else {
                if (gemTrackerSession.getGemFound() != null) {
                    panelComponent.getChildren().add(TitleComponent.builder()
                            .text("Gem Tracker")
                            .color(config.cTextColor())
                            .build());
                }
            }

            int actions = xpTrackerService.getActions(Skill.MINING);
            if (actions > 0) {

                if (config.trackGemTypes() && config.gemPrices()) {
                    if (plugin.getSession().getOpalsFound() > 0) {
                        panelComponent.getChildren().add(LineComponent.builder()
                                .leftColor(config.cTextColor())
                                .left("Opal: ")
                                .rightColor(config.cTextColor())
                                .right("("+ itemManager.getItemPrice(ItemID.UNCUT_OPAL) + ")" + " " + plugin.getSession().getOpalsFound())
                                .build());
                    }
                    if (plugin.getSession().getJadesFound() > 0) {
                        panelComponent.getChildren().add(LineComponent.builder()
                                .leftColor(config.cTextColor())
                                .left("Jade: ")
                                .rightColor(config.cTextColor())
                                .right("("+ itemManager.getItemPrice(ItemID.UNCUT_JADE) + ")" + " " + plugin.getSession().getJadesFound())
                                .build());
                    }
                    if (plugin.getSession().getRedtopazFound() > 0) {
                        panelComponent.getChildren().add(LineComponent.builder()
                                .leftColor(config.cTextColor())
                                .left("Red Topaz: ")
                                .rightColor(config.cTextColor())
                                .right("("+ itemManager.getItemPrice(ItemID.UNCUT_RED_TOPAZ) + ")" + " " + plugin.getSession().getRedtopazFound())
                                .build());
                    }
                    if (plugin.getSession().getSapphiresFound() > 0) {
                        panelComponent.getChildren().add(LineComponent.builder()
                                .leftColor(config.cTextColor())
                                .left("Sapphire: ")
                                .rightColor(config.cTextColor())
                                .right("("+ itemManager.getItemPrice(ItemID.UNCUT_SAPPHIRE) + ")" + " " + plugin.getSession().getSapphiresFound())
                                .build());
                    }
                    if (plugin.getSession().getEmeraldsFound() > 0) {
                        panelComponent.getChildren().add(LineComponent.builder()
                                .leftColor(config.cTextColor())
                                .left("Emerald: ")
                                .rightColor(config.cTextColor())
                                .right("("+ itemManager.getItemPrice(ItemID.UNCUT_EMERALD) + ")" + " " + plugin.getSession().getEmeraldsFound())
                                .build());
                    }
                    if (plugin.getSession().getRubiesFound() > 0) {
                        panelComponent.getChildren().add(LineComponent.builder()
                                .leftColor(config.cTextColor())
                                .left("Ruby: ")
                                .rightColor(config.cTextColor())
                                .right("("+ itemManager.getItemPrice(ItemID.UNCUT_RUBY) + ")" + " " + plugin.getSession().getRubiesFound())
                                .build());
                    }
                    if (plugin.getSession().getDiamondsFound() > 0) {
                        panelComponent.getChildren().add(LineComponent.builder()
                                .leftColor(config.cTextColor())
                                .left("Diamond: ")
                                .rightColor(config.cTextColor())
                                .right("("+ itemManager.getItemPrice(ItemID.UNCUT_DIAMOND) + ")" + " " + plugin.getSession().getDiamondsFound())
                                .build());
                    }
                }

                if (config.trackGemTypes() &! config.gemPrices()) {
                    if (plugin.getSession().getOpalsFound() > 0) {
                        panelComponent.getChildren().add(LineComponent.builder()
                                .leftColor(config.cTextColor())
                                .left("Opal: ")
                                .rightColor(config.cTextColor())
                                .right(Integer.toString(plugin.getSession().getOpalsFound()))
                                .build());
                    }
                    if (plugin.getSession().getJadesFound() > 0) {
                        panelComponent.getChildren().add(LineComponent.builder()
                                .leftColor(config.cTextColor())
                                .left("Jade: ")
                                .rightColor(config.cTextColor())
                                .right(Integer.toString(plugin.getSession().getJadesFound()))
                                .build());
                    }
                    if (plugin.getSession().getRedtopazFound() > 0) {
                        panelComponent.getChildren().add(LineComponent.builder()
                                .leftColor(config.cTextColor())
                                .left("Red Topaz: ")
                                .rightColor(config.cTextColor())
                                .right(Integer.toString(plugin.getSession().getRedtopazFound()))
                                .build());
                    }
                    if (plugin.getSession().getSapphiresFound() > 0) {
                        panelComponent.getChildren().add(LineComponent.builder()
                                .leftColor(config.cTextColor())
                                .left("Sapphire: ")
                                .rightColor(config.cTextColor())
                                .right(Integer.toString(plugin.getSession().getSapphiresFound()))
                                .build());
                    }
                    if (plugin.getSession().getEmeraldsFound() > 0) {
                        panelComponent.getChildren().add(LineComponent.builder()
                                .leftColor(config.cTextColor())
                                .left("Emerald: ")
                                .rightColor(config.cTextColor())
                                .right(Integer.toString(plugin.getSession().getEmeraldsFound()))
                                .build());
                    }
                    if (plugin.getSession().getRubiesFound() > 0) {
                        panelComponent.getChildren().add(LineComponent.builder()
                                .leftColor(config.cTextColor())
                                .left("Ruby: ")
                                .rightColor(config.cTextColor())
                                .right(Integer.toString(plugin.getSession().getRubiesFound()))
                                .build());
                    }
                    if (plugin.getSession().getDiamondsFound() > 0) {
                        panelComponent.getChildren().add(LineComponent.builder()
                                .leftColor(config.cTextColor())
                                .left("Diamond: ")
                                .rightColor(config.cTextColor())
                                .right(Integer.toString(plugin.getSession().getDiamondsFound()))
                                .build());
                    }
                }

                if (config.standAloneMode() || config.trackProfit() || config.trackXpHr()) {
                    panelComponent.getChildren().add(LineComponent.builder()
                            .build());
                }

                if (config.trackLoads()) {
                    panelComponent.getChildren().add(LineComponent.builder()
                            .leftColor(config.cTextColor())
                            .left("Total loads:")
                            .rightColor(config.cTextColor())
                            .right(String.format("%,d", gemTrackerSession.calcLoadsDone()))
                            .build());
                }

                if (config.standAloneMode()) {

                    panelComponent.getChildren().add(LineComponent.builder()
                            .leftColor(config.cTextColor())
                            .left("Gems mined:")
                            .rightColor(config.cTextColor())
                            .right(String.format("%,d", actions))
                            .build());

                    panelComponent.getChildren().add(LineComponent.builder()
                            .leftColor(config.cTextColor())
                            .left("Gems/hr:")
                            .rightColor(config.cTextColor())
                            .right(String.format("%,d", xpTrackerService.getActionsHr(Skill.MINING)))
                            .build());
                }

                if (config.trackProfit()) {
                    panelComponent.getChildren().add(LineComponent.builder()
                            .leftColor(config.cTextColor())
                            .left("Profit:")
                            .rightColor(config.cTextColor())
                            .right(String.format("%,d", plugin.getSession().calcTotalValue()))
                            .build());
                }

                if (config.trackXpHr()) {
                    panelComponent.getChildren().add(LineComponent.builder()
                            .leftColor(config.cTextColor())
                            .left("XP/hr:")
                            .rightColor(config.cTextColor())
                            .right(String.format("%,d", xpTrackerService.getXpHr(Skill.MINING)))
                            .build());
                }

            }
        }

        return super.render(graphics);
    }
}
package com.gemtracker;

import com.google.common.collect.ImmutableSet;
import com.google.inject.Provides;
import lombok.AccessLevel;
import lombok.Getter;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.ItemID;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.Notifier;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.xptracker.XpTrackerPlugin;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;
import java.util.Arrays;
import java.util.Set;

@PluginDescriptor(
        name = "Gem Rock Tracker",
        description = "A plugin that tracks gems from gem rocks that you mine in the Shilo Village underground mine.",
        tags = {"gem", "mining"}
)

@PluginDependency(XpTrackerPlugin.class)
public class GemTrackerPlugin extends Plugin
{
    @Getter(AccessLevel.PACKAGE)
    @Inject
    private GemTrackerSession session;

    private static final Set<Integer> MINING_PICKS = ImmutableSet.of(7283, 628, 3873, 625,8347, 7139, 8346, 8887, 642, 8313, 4482, 626, 629, 624, 627);

    private static final Set<Integer> SHILO_VILLAGE_MINE_REGION = ImmutableSet.of(11153, 11154, 11155, 11409, 11410, 11411, 11665, 11666, 11667);
    @Getter
    private static final Set<Integer> UNCUT_GEM_IDS = ImmutableSet.of(ItemID.UNCUT_JADE, ItemID.UNCUT_DIAMOND, ItemID.UNCUT_SAPPHIRE, ItemID.UNCUT_OPAL, ItemID.UNCUT_EMERALD,
                                                                        ItemID.UNCUT_RUBY, ItemID.UNCUT_RED_TOPAZ);
    @Inject
    private Client client;

    @Inject
    private Notifier notifier;
    @Inject
    private OverlayManager overlayManager;

    @Inject
    private ClientThread clientThread;

    @Inject
    private GemTrackerConfig config;
    @Inject
    private GemTrackerOverlay overlay;
    @Getter(AccessLevel.PACKAGE)
    public boolean inSvm;
    @Inject
    @Getter
    public String lastGemFoundS = "";


    @Provides
    GemTrackerConfig getConfig(ConfigManager configManager) {return configManager.getConfig(GemTrackerConfig.class);}

    @Override
    protected void startUp() throws Exception{
        overlayManager.add(overlay);
    }

    @Override
    protected void shutDown() throws Exception
    {
        overlayManager.remove(overlay);
        session.setGemFound(null);
    }

    @Subscribe
    @Inject
    public void onChatMessage(ChatMessage event)
    {
        if (!checkInSvm() || event.getType() != ChatMessageType.SPAM)
        {
            return;
        }

        String chatMessage = event.getMessage();

        switch (chatMessage)
        {
            case "You just mined a Diamond!":
                session.incrementGemFound(ItemID.UNCUT_DIAMOND);
                lastGemFoundS = "Diamond";
                break;

            case "You just mined a Ruby!":
                session.incrementGemFound(ItemID.UNCUT_RUBY);
                lastGemFoundS = "Ruby";
                break;

            case "You just mined an Emerald!":
                session.incrementGemFound(ItemID.UNCUT_EMERALD);
                lastGemFoundS = "Emerald";
                break;

            case "You just mined a Sapphire!":
                session.incrementGemFound(ItemID.UNCUT_SAPPHIRE);
                lastGemFoundS = "Sapphire";
                break;

            case "You just mined an Opal!":
                session.incrementGemFound(ItemID.UNCUT_OPAL);
                lastGemFoundS = "Opal";
                break;

            case "You just mined a piece of Jade!":
                session.incrementGemFound(ItemID.UNCUT_JADE);
                lastGemFoundS = "Jade";
                break;

            case "You just mined a Red Topaz!":
                session.incrementGemFound(ItemID.UNCUT_RED_TOPAZ);
                lastGemFoundS = "Red Topaz";
                break;
        }
    }

    public boolean checkInSvm()
    {
        int[] currentMapRegions = client.getMapRegions();

        GameState gameState = client.getGameState();
        if (gameState == GameState.LOGGED_IN)
        {
            for (int region : currentMapRegions) {
                if (SHILO_VILLAGE_MINE_REGION.contains(region)) {
                    inSvm = true;
                    return true;
                }
            }
        }

        inSvm = false;
        return false;
    }

    void reset() {session.setGemFound(null); }

    public boolean areMining()
    {
        if (Arrays.asList(MINING_PICKS).contains(client.getLocalPlayer().getAnimation()))
        {
            return true;
        }
        return false;
    }

}
