package com.watsoncluetracker;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.lang.reflect.Field;
import java.util.Properties;
import net.runelite.client.RuneLite;
import net.runelite.client.RuneLiteProperties;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ExamplePluginTest
{
	public static void main(String[] args) throws Exception
	{
		setWindowTitle("watson-clue-tracker (" + getCurrentGitBranch() + ") RL-" + RuneLiteProperties.getVersion());

		ExternalPluginManager.loadBuiltin(WatsonPlugin.class);
		RuneLite.main(args);
	}

	private static void setWindowTitle(String title) throws NoSuchFieldException, IllegalAccessException
	{
		Field propertiesField = RuneLiteProperties.class.getDeclaredField("properties");
		propertiesField.setAccessible(true);
		Properties properties = (Properties) propertiesField.get(null);
		properties.setProperty("runelite.title", title);
	}

	public static String getCurrentGitBranch() {
		try
		{
			Process process = Runtime.getRuntime().exec("git rev-parse --abbrev-ref HEAD");
			process.waitFor();

			BufferedReader reader = new BufferedReader(
				new InputStreamReader(process.getInputStream()));

			return reader.readLine();
		}catch (Exception e) {
			return "threw exception";
		}
	}

}
package com.watsoncluetracker;

import lombok.AllArgsConstructor;
import lombok.Getter;

import java.awt.Color;
import java.util.Arrays;
import java.util.Map;
import java.util.stream.Collectors;

@AllArgsConstructor
@Getter
public enum ClueTier
{
	EASY("Clue scroll (easy)", new Color(0x32a836), new Color(0x32a836).darker()),
	MEDIUM("Clue scroll (medium)", new Color(0x3fcc8f), new Color(0x3fcc8f).darker()),
	HARD("Clue scroll (hard)", new Color(0xa641ba), new Color(0xa641ba)),
	ELITE("Clue scroll (elite)", new Color(0xc4b847), new Color(0xc4b847).darker());

	private final String clueName;
	private final Color colorTransparent;
	private final Color colorOpaque;

	private static final Map<String, ClueTier> map;
	static {
		map = Arrays.stream(values())
				.collect(Collectors.toMap(e -> e.clueName, e -> e));
	}

	public static ClueTier getClueTier(String name)
	{
		return map.get(name);
	}

	public Color getColor(boolean transparentChatbox)
	{
		return transparentChatbox ? colorTransparent : colorOpaque;
	}

}

package com.watsoncluetracker;

import static com.watsoncluetracker.WatsonConfig.ShowItemOverlay.*;
import java.awt.Color;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(WatsonPlugin.CONFIG_KEY)
public interface WatsonConfig extends Config
{
	@ConfigItem(
		keyName = "showClueScrollTooltip",
		name = "Clue tooltip",
		description = "Show tooltip on clues listing which clues Watson has.",
		position = 1
	)
	default boolean showClueScrollTooltip()
	{
		return true;
	}

	enum ShowItemOverlay {
		WATSON_HAS_CLUE,
		WATSON_NEEDS_CLUE,
		BOTH,
		NEVER,
		ALL_TIERS
	}

	String WHEN_TO_SHOW_ITEM_OVERLAY_KEY = "whenToShowItemOverlay";
	@ConfigItem(
		keyName = WHEN_TO_SHOW_ITEM_OVERLAY_KEY,
		name = "Item Overlay",
		description = "When to show the 'w' icon on clues in the inventory. If watson needs the clue, it will show in gray, if he has the clue it will show in light blue. \"All tiers\" shows the status of all clue tiers on each clue.",
		position = 2
	)
	default ShowItemOverlay whenToShowItemOverlay()
	{
		return BOTH;
	}

	@ConfigItem(
		keyName = "watsonNeedsClueColor",
		name = "Watson needs clue",
		description = "The color for the item overlay to show that watson needs the clue.",
		position = 3
	)
	default Color watsonNeedsClueColor()
	{
		return Color.LIGHT_GRAY.darker();
	}

	@ConfigItem(
		keyName = "watsonHasClueColor",
		name = "Watson has clue",
		description = "The color for the item overlay to show that watson already has the clue.",
		position = 4
	)
	default Color watsonHasClueColor()
	{
		return new Color(0x59a8eb);
	}

	@ConfigItem(
		keyName = "watsonChatCommand",
		name = "::watson",
		description = "Enables ::watson command to check which clues Watson is holding on to.",
		position = 5
	)
	default boolean watsonChatCommand()
	{
		return true;
	}
}

package com.watsoncluetracker;

import com.google.inject.Inject;
import com.watsoncluetracker.WatsonConfig.ShowItemOverlay;
import static com.watsoncluetracker.WatsonConfig.ShowItemOverlay.ALL_TIERS;
import static com.watsoncluetracker.WatsonConfig.ShowItemOverlay.NEVER;
import static com.watsoncluetracker.WatsonConfig.ShowItemOverlay.WATSON_HAS_CLUE;
import static com.watsoncluetracker.WatsonConfig.ShowItemOverlay.WATSON_NEEDS_CLUE;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.ItemVariationMapping;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.WidgetItemOverlay;
import net.runelite.client.ui.overlay.components.TextComponent;

import java.awt.*;

public class WatsonWidgetItemOverlay extends WidgetItemOverlay
{
    @Inject
    private ItemManager itemManager;

    private final WatsonPlugin plugin;
    private final WatsonConfig config;

    @Inject
    WatsonWidgetItemOverlay(WatsonPlugin watsonPlugin, WatsonConfig config)
    {
        this.plugin = watsonPlugin;
        this.config = config;
        showOnInventory();
        showOnBank();
    }

    @Override
    public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem widgetItem)
    {
		ShowItemOverlay showItemOverlay = config.whenToShowItemOverlay();
		if (showItemOverlay == NEVER) return;

        int baseItemId = ItemVariationMapping.map(itemId);
        if(!WatsonPlugin.CLUE_SCROLL_BASE_IDS.contains(baseItemId))
        {
            return;
        }

        String itemName = itemManager.getItemComposition(itemId).getMembersName();
        ClueTier clueTier = ClueTier.getClueTier(itemName);
        if(clueTier == null)
        {
            return;
        }

		boolean watsonHasClue = plugin.watsonHasClue(clueTier);
		if (
			(watsonHasClue && showItemOverlay == WATSON_NEEDS_CLUE) ||
			(!watsonHasClue && showItemOverlay == WATSON_HAS_CLUE)
		) {
			return;
		}

		final Rectangle bounds = widgetItem.getCanvasBounds();
		if (showItemOverlay == ALL_TIERS) {
			int x = bounds.x + 3;
			for (ClueTier tier : ClueTier.values())
			{
				graphics.setColor(tier.getColor(true));
				if (plugin.watsonHasClue(tier))
				{
					graphics.fillRect(x, bounds.y + 24, 5, 5);
				} else {
					graphics.drawRect(x, bounds.y + 24, 4, 4);
				}
				x += 7;
			}
		} else {
			graphics.setFont(FontManager.getRunescapeSmallFont());
			final TextComponent textComponent = new TextComponent();
			textComponent.setPosition(new Point(bounds.x, bounds.y + (int) bounds.getHeight()));
			textComponent.setText("w");
			textComponent.setColor(watsonHasClue ? config.watsonHasClueColor() : config.watsonNeedsClueColor());
			textComponent.render(graphics);
		}
	}
}

package com.watsoncluetracker;

import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.MenuEntry;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetUtil;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.ItemVariationMapping;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;

import javax.inject.Inject;
import java.awt.*;

public class WatsonOverlay extends Overlay
{
	@Inject
	private Client client;

	@Inject
	private ItemManager itemManager;

	@Inject
	private TooltipManager tooltipManager;

	@Inject
	private WatsonConfig config;

	@Inject
	private WatsonPlugin plugin;

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if(!config.showClueScrollTooltip())
		{
			return null;
		}

		final MenuEntry[] menu = client.getMenuEntries();
		final int menuSize = menu.length;
		if(menuSize <= 0)
		{
			return null;
		}

		final MenuEntry entry = menu[menuSize - 1];
		final Widget widget = entry.getWidget();
		if(widget == null)
		{
			return null;
		}

		int itemId = -1;

		final int widgetGroupId = WidgetUtil.componentToInterface(widget.getId());
		if(widgetGroupId == InterfaceID.INVENTORY
				|| widgetGroupId == InterfaceID.EQUIPMENT
				|| widgetGroupId == InterfaceID.BANK
				|| widgetGroupId == InterfaceID.BANK_INVENTORY)
		{
			itemId = widget.getItemId();
		}
		if(itemId == -1)
		{
			return null;
		}

		int baseItemId = ItemVariationMapping.map(itemId);
		if(!WatsonPlugin.CLUE_SCROLL_BASE_IDS.contains(baseItemId))
		{
			return null;
		}

		String itemName = itemManager.getItemComposition(itemId).getMembersName();
		ClueTier clueTier = ClueTier.getClueTier(itemName);
		if(clueTier == null && itemId != ItemID.CLUE_SCROLL_MASTER)
		{
			return null;
		}

		tooltipManager.add(new Tooltip(plugin.generateWatsonNeedsText("</br>")));

		return null;
	}
}

package com.watsoncluetracker;

import com.watsoncluetracker.WatsonConfig.ShowItemOverlay;
import static com.watsoncluetracker.WatsonConfig.ShowItemOverlay.NEVER;
import static com.watsoncluetracker.WatsonConfig.ShowItemOverlay.WATSON_HAS_CLUE;
import java.util.Set;
import javax.inject.Inject;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.Varbits;
import net.runelite.api.events.CommandExecuted;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ProfileChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ColorUtil;

@PluginDescriptor(
	name = "Watson Clue Tracker",
	description = "Tracks which clues Watson has",
	tags = {"clue", "watson", "master"}
)
@Slf4j
public class WatsonPlugin extends Plugin
{
	public static final String CONFIG_KEY = "watsonClueTracker";

	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private WatsonOverlay overlay;

	@Inject
	private WatsonWidgetItemOverlay itemOverlay;

	@Inject
	private ClientThread clientThread;

	@Inject
	private VarbitChanged varbitChanged;

	@Inject
	private WatsonConfig config;

	@Inject ConfigManager configManager;

	public static final Set<Integer> CLUE_SCROLL_BASE_IDS = Set.of(
		ItemID.CLUE_SCROLL_EASY,
		ItemID.CLUE_SCROLL_MEDIUM,
		ItemID.CLUE_SCROLL_HARD,
		ItemID.CLUE_SCROLL_ELITE,
		ItemID.CLUE_SCROLL_MASTER
	);

	private static final int WATSON_HAS_EASY_VARBIT = 5186;
	private static final int WATSON_HAS_MEDIUM_VARBIT = 5187;
	private static final int WATSON_HAS_HARD_VARBIT = 5188;
	private static final int WATSON_HAS_ELITE_VARBIT = 5189;

	@Provides
	WatsonConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(WatsonConfig.class);
	}

	@Override
	public void startUp()
	{
		migrateItemOverlayConfig();

		overlayManager.add(overlay);
		overlayManager.add(itemOverlay);
	}

	private void migrateItemOverlayConfig()
	{
		// Changed how a settings works. "showClueScrollItemOverlay" was the old config key.
		String wasPreviouslyInstalled = configManager.getConfiguration(CONFIG_KEY, "showClueScrollItemOverlay");
		if (wasPreviouslyInstalled != null) {
			ShowItemOverlay newValue = wasPreviouslyInstalled.equals(Boolean.TRUE.toString()) ?
				WATSON_HAS_CLUE :
				NEVER
			;
			configManager.setConfiguration(CONFIG_KEY, WatsonConfig.WHEN_TO_SHOW_ITEM_OVERLAY_KEY, newValue);
			configManager.unsetConfiguration(CONFIG_KEY, "showClueScrollItemOverlay");
		}

		configManager.setConfiguration(CONFIG_KEY, "serialVersion", 1);
	}

	@Override
	public void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
		overlayManager.remove(itemOverlay);
	}

	@Subscribe
	public void onProfileChanged(ProfileChanged e) {
		migrateItemOverlayConfig();
	}

	@Subscribe
	public void onCommandExecuted(CommandExecuted commandExecuted)
	{
		if(config.watsonChatCommand() && "watson".equalsIgnoreCase(commandExecuted.getCommand()))
		{
			chatMessage(generateWatsonNeedsText(" "));
		}
	}

	private void chatMessage(String message)
	{
		client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", message, "");
	}

	public boolean watsonHasClue(ClueTier tier)
	{
		if(tier == ClueTier.EASY)
		{
			return client.getVarbitValue(WATSON_HAS_EASY_VARBIT) == 1;
		}
		else if(tier == ClueTier.MEDIUM)
		{
			return client.getVarbitValue(WATSON_HAS_MEDIUM_VARBIT) == 1;
		}
		else if(tier == ClueTier.HARD)
		{
			return client.getVarbitValue(WATSON_HAS_HARD_VARBIT) == 1;
		}
		else if(tier == ClueTier.ELITE)
		{
			return client.getVarbitValue(WATSON_HAS_ELITE_VARBIT) == 1;
		}
		return false;
	}

	public String generateWatsonNeedsText(String separator)
	{
		boolean hasEasy = client.getVarbitValue(WATSON_HAS_EASY_VARBIT) == 1;
		boolean hasMedium = client.getVarbitValue(WATSON_HAS_MEDIUM_VARBIT) == 1;
		boolean hasHard = client.getVarbitValue(WATSON_HAS_HARD_VARBIT) == 1;
		boolean hasElite = client.getVarbitValue(WATSON_HAS_ELITE_VARBIT) == 1;
		if (hasEasy && hasMedium && hasHard && hasElite)
		{
			return "Watson is ready to give you a master clue.";
		}
		else
		{
			boolean transparent = client.isResized() && client.getVarbitValue(Varbits.TRANSPARENT_CHATBOX) == 1;
			String message = "Watson needs:" + separator;
			if (!hasEasy) message += ColorUtil.wrapWithColorTag("easy", ClueTier.EASY.getColor(transparent)) + separator;
			if (!hasMedium) message += ColorUtil.wrapWithColorTag("medium", ClueTier.MEDIUM.getColor(transparent)) + separator;
			if (!hasHard) message += ColorUtil.wrapWithColorTag("hard", ClueTier.HARD.getColor(transparent)) + separator;
			if (!hasElite) message += ColorUtil.wrapWithColorTag("elite", ClueTier.ELITE.getColor(transparent)) + separator;
			return message;
		}
	}
}

