package com.herbruns.petreminder;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ActorDeath;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
        name = "Pet Reminder",
        description = "Shows an overlay when you have a pet out",
        tags = {"pet", "reminder", "overlay"}
)
public class PetReminderPlugin extends Plugin
{
    @Inject
    private Client client;

    @Inject
    private PetReminderConfig config;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private PetReminderOverlay overlay;

    private boolean isPetOut = false;
    private boolean playerDidDie = false;

    private final int FOLLOWER_VARBIT = 447;

    @Override
    protected void startUp() throws Exception
    {
        overlayManager.add(overlay);
    }

    @Override
    protected void shutDown() throws Exception
    {
        overlayManager.remove(overlay);
    }

    @Subscribe
    public void onGameTick(GameTick tick)
    {
        // PATCH:
        // rewritten to use VarPlayer value instead to track pet disappearing but still following
        // i.e going in and out of ToA, for example
        int followerNpcId = client.getVarpValue(FOLLOWER_VARBIT);
        boolean overlayCache = isPetOut;

        // You have a pet following
        isPetOut = followerNpcId != -1;

        // if we are not the same state as last tick, change the overlay
        if (overlayCache != isPetOut) {
            overlay.setIsPetOut(isPetOut);
        }
    }

    @Subscribe
    public void onActorDeath(ActorDeath event)
    {
        Actor actor = event.getActor();
        if (!(actor instanceof Player)) {
            return;
        }

        if (event.getActor() == client.getLocalPlayer())
        {
            playerDidDie = true;
        }
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged event)
    {
        if (event.getGameState() == GameState.LOGGED_IN && playerDidDie)
        {
            int followerNpcId = client.getVarpValue(FOLLOWER_VARBIT);
            if (followerNpcId == -1 && isPetOut)
            {
                if (config.deathMessageEnabled())
                {
                    String chatMsg = "Noooo, you forgot about your pet :(";
                    client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", chatMsg, null);
                }

                // force overwrite the var and overlay as death will guarantee loss
                // next tick will then start to monitor again for us automatically
                isPetOut = false;
                overlay.setIsPetOut(isPetOut);
            }
            playerDidDie = false;
        }
    }

    @Provides
    PetReminderConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(PetReminderConfig.class);
    }
}

package com.herbruns.petreminder;

import net.runelite.api.Client;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ImageComponent;
import net.runelite.client.util.AsyncBufferedImage;

import javax.inject.Inject;
import java.awt.*;

public class PetReminderOverlay extends OverlayPanel
{
    private static final int CAT_ITEM_ID = 1555; // Regular cat icon

    private AsyncBufferedImage petImage;
    private boolean isPetOut = false;

    //private final Client client;
    private final ItemManager itemManager;

    @Inject
    public PetReminderOverlay(/*Client client, */ItemManager itemManager)
    {
        //this.client = client;
        this.itemManager = itemManager;

        petImage = itemManager.getImage(CAT_ITEM_ID, 1, false);

        setPosition(OverlayPosition.TOP_LEFT);
        setResizable(false);
        setMovable(true);
    }

    public void setIsPetOut(boolean petOut)
    {
        this.isPetOut = petOut;

        if (petOut)
        {
            // Always fetch the cat icon for display if we do not have it already
            if (petImage == null) {
                petImage = itemManager.getImage(CAT_ITEM_ID, 1, false);
            }
        }
        else
        {
            petImage = null;
        }
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        panelComponent.getChildren().clear();

        if (!isPetOut || petImage == null)
        {
            return null; // nothing to draw
        }

        panelComponent.getChildren().add(new ImageComponent(petImage));
        return super.render(graphics);
    }
}

package com.herbruns.petreminder;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("petreminder")
public interface PetReminderConfig extends Config
{
    @ConfigItem(
            keyName = "deathMessageEnabled",
            name = "Remind of pet loss on death",
            description = "If enabled, sends a chat message when you die",
            position = 1
    )
    default boolean deathMessageEnabled()
    {
        return false;
    }
}

package com.herbruns.petreminder;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PetReminderPluginTest
{
    public static void main(String[] args) throws Exception
    {
        ExternalPluginManager.loadBuiltin(PetReminderPlugin.class);
        RuneLite.main(args);
    }
}
