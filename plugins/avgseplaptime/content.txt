package com.avgseplap;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.MenuAction;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.OverlayMenuEntry;

import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
@PluginDescriptor(
	name = "Sepulchre Lap Tracker"
)
public class AvgSepLapPlugin extends Plugin
{
	private static final Pattern LAP_TIME_PATTERN = Pattern.compile("Overall time: <col=ff0000>(\\d{1}):(\\d{2})");
	private final ArrayList<Long> lapTimes = new ArrayList<>();
	private long totalLapTime = 0;

	@Inject
	private Client client;

	@Inject
	private AvgSepLapConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private AvgSepLapOverlay avgSepLapOverlay;

	@Inject
	private EventBus eventBus;

	@Override
	protected void startUp() throws Exception
	{
		log.info("Sepulchre Lap Tracker started!");
		overlayManager.add(avgSepLapOverlay);
		avgSepLapOverlay.getMenuEntries().add(new OverlayMenuEntry(MenuAction.RUNELITE_OVERLAY, "Reset", "Lap Timer"));
	}

	@Override
	protected void shutDown() throws Exception
	{
		log.info("Sepulchre Lap Tracker stopped!");
		overlayManager.remove(avgSepLapOverlay);
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		if (event.getType() == ChatMessageType.GAMEMESSAGE)
		{
			Matcher matcher = LAP_TIME_PATTERN.matcher(event.getMessage());
			if (matcher.find())
			{
				int minutes = Integer.parseInt(matcher.group(1));
				int seconds = Integer.parseInt(matcher.group(2));
				//int mseconds = Integer.parseInt(matcher.group(3));

				//long lapTime = hours * 3600 + minutes * 60 + seconds; // Convert to seconds
				long lapTime = minutes * 60 + seconds;
				lapTimes.add(lapTime);
				totalLapTime += lapTime;

			}
		}
	}

	@Subscribe
	public void onMenuEntryAdded(MenuEntryAdded event)
	{
		// Check if the menu entry is for the Mysterious Stranger
		if (event.getTarget().contains("Mysterious Stranger") && event.getOption().equals("Talk-to"))
		{
			// Add a custom "Reset" menu option
			client.createMenuEntry(-1)
					.setOption("Reset")
					.setTarget(event.getTarget())
					.setType(MenuAction.RUNELITE) // This ensures itâ€™s a custom option
					.onClick(e -> handleResetOption());
		}
	}

	private void handleResetOption()
	{
		// Your logic to reset the lap data
		lapTimes.clear();
		totalLapTime = 0;

		client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Lap data has been reset!", null);
	}

	public double getAverageLapTime()
	{
		return lapTimes.isEmpty() ? 0 : (double) totalLapTime / lapTimes.size();
	}

	@Provides
	AvgSepLapConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(AvgSepLapConfig.class);
	}
}

package com.avgseplap;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("avgseplapconfig")
public interface AvgSepLapConfig extends Config
{
	@ConfigItem(
			keyName = "greenTime",
			name = "Green Time Threshold",
			description = "The time (in seconds) for green color (default: 365 seconds = 6:05)"
	)
	default int greenTime()
	{
		return 365;  // Default to 6:05 (365 seconds)
	}

	@ConfigItem(
			keyName = "yellowTime",
			name = "Yellow Time Threshold",
			description = "The time (in seconds) for yellow color (default: 420 seconds = 7:00)"
	)
	default int yellowTime()
	{
		return 420;  // Default to 7:00 (420 seconds)
	}

	@ConfigItem(
			keyName = "redTime",
			name = "Red Time Threshold",
			description = "The time (in seconds) for red color (default: 480 seconds = 8:00)"
	)
	default int redTime()
	{
		return 480;  // Default to 8:00 (480 seconds)
	}
}

package com.avgseplap;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.api.MenuAction;
import net.runelite.client.ui.FontManager;

import javax.inject.Inject;
import java.awt.*;

public class AvgSepLapOverlay extends Overlay
{
    @Inject
    private AvgSepLapConfig config;

    private final AvgSepLapPlugin plugin;

    @Inject
    public AvgSepLapOverlay(AvgSepLapPlugin client)
    {
        this.plugin = client;
        setPosition(OverlayPosition.DYNAMIC); // Position the overlay
        setLayer(OverlayLayer.ABOVE_WIDGETS); // Choose where to render
        getMenuEntries().add(new OverlayMenuEntry(MenuAction.RUNELITE_OVERLAY, "Reset", "Inventory"));
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {

        double avgTimeSeconds = plugin.getAverageLapTime();
        long avgMinutes = (long) avgTimeSeconds / 60;
        long avgSeconds = (long) avgTimeSeconds % 60;

        String labelText = "Avg. Lap: ";
        String timeText = (avgMinutes + ":" + String.format("%02d", avgSeconds));

        Color timeColor = determineColor(avgTimeSeconds);

        graphics.setFont(FontManager.getRunescapeBoldFont());

        graphics.setColor(Color.WHITE);
        graphics.drawString(labelText, 23, 65);

        graphics.setColor(timeColor);
        graphics.drawString(timeText, 22 + graphics.getFontMetrics().stringWidth(labelText), 65);  // Adjust position after static text

        return null;
    }

    private Color determineColor(double timeInSeconds)
    {
        if (timeInSeconds == 0)
        {
            return Color.WHITE;
        }
        if (timeInSeconds <= config.greenTime())
        {
            return Color.GREEN;
        }
        else if (timeInSeconds <= config.yellowTime())
        {
            return Color.YELLOW;
        }
        else if (timeInSeconds <= config.redTime())
        {
            return Color.RED;
        }
        else
        {
            return Color.RED;
        }
    }
}

package com.avgseplap;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AvgSepLapPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AvgSepLapPlugin.class);
		RuneLite.main(args);
	}
}
