package com.encryptiron.rest;

import java.time.Instant;

public final class MessageHeaderData 
{
    private static String playerName = "NA";

    public static String getPlayerName()
    {
        return MessageHeaderData.playerName;
    }

    public static void setPlayerName(String playerName)
    {
        MessageHeaderData.playerName = playerName;
    }

    public static String getMessageHeaderJson()
    {
        return "\"header\" : { \"player_name\" : \"" + getPlayerName() + "\", \"time\" : " + Instant.now().toEpochMilli() + " }";
    }
}

package com.encryptiron.rest;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.MenuAction;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ScriptPreFired;
import net.runelite.api.events.WidgetClosed;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.client.config.RuneScapeProfileType;
import net.runelite.client.eventbus.Subscribe;

@Slf4j
public class SendCollectionLog extends PostCommand
{
    public HashMap<Integer, Integer> collection_log_map = new HashMap<>();
    public boolean isClogOpen = false;
    public int hasClogData = 0;

    @Inject
    private Client client;

    @Override
    String endpoint() {
        return "/api/member/save_collection_log";
    }
    
    @Override
    String body()
    {
        String coll_log_list = "";

        for (Map.Entry<Integer, Integer> entry : collection_log_map.entrySet())
        {
            if (!coll_log_list.isEmpty())
            {
                coll_log_list += ", ";
            }

            Integer itemId = entry.getKey();
            Integer quantity = entry.getValue();

            coll_log_list += "\"" + itemId + "\" : " + quantity;
        }

        return "\"collection_log\" : {" + coll_log_list + "}";
    }
    
    @Subscribe
    public void onScriptPreFired(ScriptPreFired preFired)
    {
        if (RuneScapeProfileType.getCurrent(client) != RuneScapeProfileType.STANDARD)
            return;

        if (preFired.getScriptId() == 4100)
        {
            var args = preFired.getScriptEvent().getArguments();

            // 0 -> Script Id
            // 1 -> Item Id
            // 2 -> Quantity
            // 3 & 4 -> ???
            collection_log_map.put((int)args[1], (int)args[2]);
        }
    }

    @Subscribe
    @Override
    public void onGameTick(GameTick gameTick)
    {
        super.onGameTick(gameTick);

        if (RuneScapeProfileType.getCurrent(client) != RuneScapeProfileType.STANDARD || !isClogOpen)
            return;

        // When searching, all clogs get fired through a script we can capture
        // We don't really know when it ends, it seems to always come 1 tick after a search start or end
        // So we will capture everything within a 3 tick window.
        // Tick 0, This tick
        // Tick 1, Search opens & closes
        // Tick 2, Messages are fired
        // Tick 3, Collect all messages
        // Tick 4, Fire them off to the server
        if (hasClogData > 0 && --hasClogData == 0)
        {
            this.send();

            // Clog isn't actually closed, but we don't want to loop submitting clog data
            isClogOpen = false;
        }
        else if (hasClogData == 0)
        {
            // Force the search menu option, and then cancel it
            collection_log_map = new HashMap<>();
            client.menuAction(-1, 40697932, MenuAction.CC_OP, 1, -1, "Search", null);
            client.runScript(2240);
            hasClogData = 4;

            if (config.debug())
                client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Sending your Collection log to the Valiance server...", "ValianceClanPlugin");
        }
    }
    
    @Subscribe
    public void onWidgetLoaded(WidgetLoaded widgetLoaded)
    {
        if (RuneScapeProfileType.getCurrent(client) != RuneScapeProfileType.STANDARD)
            return;

        if (widgetLoaded.getGroupId() == InterfaceID.COLLECTION_LOG)
        {
            isClogOpen = true;
            hasClogData = 0;
        }
    }

    @Subscribe
    public void onWidgetClosed(WidgetClosed widgetClosed)
    {
        if (RuneScapeProfileType.getCurrent(client) != RuneScapeProfileType.STANDARD)
            return;

        if (widgetClosed.getGroupId() == InterfaceID.COLLECTION_LOG)
        {
            isClogOpen = false;

            if (hasClogData > 0)
            {
                client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Aborting sending Collection log data to the Valiance server.", "ValianceClanPlugin");
            }
        }
    }

    @Override
    void onSendSuccess()
    {
        if (!config.debug())
            return;

        client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Sent Collection log progress to the Valiance server!", "ValianceClanPlugin");
    }

    @Override
    void onSendFail(IOException exception)
    {
        log.debug("Failed to send collection log data: " + exception.getMessage());

        if (!config.debug())
            return;

        client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Failed to send Collection log progress to the Valiance server.", "ValianceClanPlugin");
    }
}

package com.encryptiron.rest;

public abstract class GetCommand extends BaseRestCommand {
    @Override
    String requestType()
    {
        return "GET";
    }
}

package com.encryptiron.rest;

import java.io.IOException;
import java.util.Collection;

import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.client.config.RuneScapeProfileType;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.ItemStack;
import net.runelite.client.plugins.loottracker.LootReceived;

@Slf4j
public class SendItemDrop extends PostCommand
{
    @Inject
    private Client client;

    private Collection<ItemStack> items;
    private String npcName;
    private Integer npcQuantity;

    @Override
    String endpoint() {
        return "/api/member/send_item_drop";
    }
    
    @Override
    String body()
    {
        String item_list = "";

        for (ItemStack item : items)
        {
            if (!item_list.isEmpty())
            {
                item_list += ", ";
            }

            item_list += "\"" + item.getId() + "\" : " + item.getQuantity();
        }

        return "\"item_drop\" : { \"name\" : \"" + npcName + "\", \"quantity\" : " + npcQuantity + ", \"items\" : { " + item_list + " } }";
    }
    
    @Subscribe
    public void onLootReceived(final LootReceived event)
    {
        if (RuneScapeProfileType.getCurrent(client) != RuneScapeProfileType.STANDARD)
            return;

        npcName = event.getName();
        npcQuantity = event.getAmount();
        items = event.getItems();

        this.send();
    }

    @Override
    void onSendSuccess()
    {
        if (!config.debug())
            return;
            
        client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Sent item drop to the Valiance Server!", "ValianceClanPlugin");
    }

    @Override
    void onSendFail(IOException exception)
    {
        log.debug("Failed to send item drop data: " + exception.getMessage());
        
        if (!config.debug())
            return;
            
        client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Failed to send item drop to the Valiance server.", "ValianceClanPlugin");
    }
}

package com.encryptiron.rest;

import java.io.IOException;
import java.util.HashMap;

import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.client.config.RuneScapeProfileType;
import net.runelite.client.eventbus.Subscribe;

@Slf4j
public class SendCombatAchievements extends PostCommand
{
    public static int COMBAT_ACHIEVEMENTS_OVERVIEW_INTERFACE_ID = 717;
    
    // This will continue to grow as more CAs get added
    // https://github.com/runelite/cs2-scripts/blob/7efea5b51540e8d35875152b323e19d7e52faf10/scripts/%5Bproc%2Cscript4834%5D.cs2#L4
    public static int[] caVarpIds = new int[] {
        3116, 
        3117, 
        3118, 
        3119, 
        3120, 
        3121, 
        3122, 
        3123, 
        3124, 
        3125, 
        3126, 
        3127, 
        3128, 
        3387, 
        3718, 
        3773, 
        3774, 
        4204, 
        4496
    };

    // https://github.com/runelite/cs2-scripts/blob/7efea5b51540e8d35875152b323e19d7e52faf10/scripts/%5Bproc%2Cscript4834%5D.cs2#L4
    public static int[] caTierEnums = new int[] {
        3981, // Easy
        3982, // Medium
        3983, // Hard
        3984, // Elite
        3985, // Master
        3986  // Grandmaster
    };

    private HashMap<Integer, Boolean> caCompletedMap;

    @Inject
    private Client client;

    @Override
    String endpoint() {
        return "/api/member/save_combat_achievements";
    }
    
    @Override
    String body()
    {
        String caList = "";

        for (HashMap.Entry<Integer, Boolean> entry : caCompletedMap.entrySet())
        {
            Integer id = entry.getKey();
            Boolean completed = entry.getValue();

            if (!completed)
            {
                continue;
            }

            if (!caList.isEmpty())
            {
                caList += ", ";
            }

            caList += id;
        }

        return "\"combat_achievements\" : [" + caList + "]";
    }
    
    @Subscribe
    public void onWidgetLoaded(WidgetLoaded widgetLoaded)
    {
        if (RuneScapeProfileType.getCurrent(client) != RuneScapeProfileType.STANDARD)
            return;

        if (widgetLoaded.getGroupId() == COMBAT_ACHIEVEMENTS_OVERVIEW_INTERFACE_ID)
        {
            collectCombatAchievementDataFromVarbits();
            send();
        }
    }

    void collectCombatAchievementDataFromVarbits()
    {
        caCompletedMap = new HashMap<>();

        for (int enumId : caTierEnums) {
            // Enum containing all CAs in that tier of achievement
            var e = client.getEnum(enumId);

            for (int structId : e.getIntVals()) {
                var struct = client.getStructComposition(structId);
                
                // Get the ID of the combat achievement
                int id = struct.getIntValue(1306);
                
                // Determine if a specific CA is enabled
                boolean unlocked = (client.getVarpValue(caVarpIds[id / 32]) & (1 << (id % 32))) != 0;
                
                caCompletedMap.put(id, unlocked);
            }
        }
    }

    @Override
    void onSendSuccess()
    {
        if (!config.debug())
            return;

        client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Sent Combat Achievement progress to the Valiance server!", "ValianceClanPlugin");
    }

    @Override
    void onSendFail(IOException exception)
    {
        log.debug("Failed to send Combat Achievement progress: " + exception.getMessage());

        if (!config.debug())
            return;

        client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "Failed to send Combat Achievement progress to the Valiance server.", "ValianceClanPlugin");
    }
}

package com.encryptiron.rest;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;

import javax.inject.Inject;

import com.encryptiron.ValianceConfig;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.events.GameTick;
import net.runelite.client.eventbus.Subscribe;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Request.Builder;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

@Slf4j
public abstract class BaseRestCommand {
    private static final MediaType APPLICATION_JSON = MediaType.parse("application/json");
    private static final String MESSAGING_PROTOCOL = "http://";
    private static final int PORT = 8080;

    private MessageSendStatus messageStatus = MessageSendStatus.None;
    private IOException lastException;

    @Inject
    private OkHttpClient httpClient;

    @Inject
    public ValianceConfig config;

    enum MessageSendStatus
    {
        Success,
        Fail,
        None
    }

    private void writeMessageToServer()
    {
        URL url;
        try
        {
            url = new URL(MESSAGING_PROTOCOL + config.valianceServerUrl() + ":" + PORT + endpoint());
        } catch (MalformedURLException e)
        {
            log.error("MalformedURL : " + e.getMessage());
            return;
        }
    
        String headerContent = MessageHeaderData.getMessageHeaderJson();
        String messageContent = "{ " + headerContent + ", " + body() + " }";

        RequestBody requestBody = RequestBody.create(APPLICATION_JSON, messageContent);

        Request httpRequest = new Builder()
            .url(url)
            .header("User-Agent", "ValiancePlugin - " + MessageHeaderData.getPlayerName())
            .post(requestBody)
            .build();

        httpClient.newCall(httpRequest).enqueue(new Callback() 
        {
            @Override
            public void onFailure(Call call, final IOException ex) {
                lastException = ex;
                messageStatus = MessageSendStatus.Fail;
                log.info("Failed to send request " + ex.getMessage());
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                try (ResponseBody responseBody = response.body())
                {
                    if (!response.isSuccessful())
                    {
                        onFailure(call, new IOException("Unexpected code: " + response.code()));
                    }
                    else
                    {
                        log.info("Successful " + requestType() + ", response: " + responseBody.string());
                        messageStatus = MessageSendStatus.Success;
                    }
                }
            }
        });
    }

    public void send()
    {
        Thread sendThread = new Thread(() -> {
            writeMessageToServer();
        });

        sendThread.start();
    }
    
    abstract String requestType();
    abstract String endpoint();
    abstract String body();

    @Subscribe
    public void onGameTick(GameTick gameTick)
    {
        if (messageStatus == MessageSendStatus.Success)
        {
            onSendSuccess();
        }
        else if (messageStatus == MessageSendStatus.Fail)
        {
            onSendFail(lastException);
        }

        messageStatus = MessageSendStatus.None;
    }
    
    abstract void onSendSuccess();
    abstract void onSendFail(IOException exception);
}

package com.encryptiron.rest;

public abstract class PostCommand extends BaseRestCommand {

    @Override
    String requestType()
    {
        return "POST";
    }
}


package com.encryptiron;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("encryptiron")
public interface ValianceConfig extends Config
{
    @ConfigItem(
        keyName = "debug",
        name = "Enable debug",
        description = "Results in the plugin logging debug output to the users chatbox",
        position = 1
    )
    default boolean debug()
    {
        return false;
    }

    @ConfigItem(
        keyName = "valianceServerUrl",
        name = "Server URL",
        description = "URL to the Valiance Server (don't change)",
        position = 2
    )
    default String valianceServerUrl()
    {
        return "valianceosrs.com";
    }
}

package com.encryptiron;

import javax.inject.Inject;

import com.encryptiron.rest.MessageHeaderData;
import com.encryptiron.rest.SendCollectionLog;
import com.encryptiron.rest.SendCombatAchievements;
import com.encryptiron.rest.SendItemDrop;
import com.google.inject.Provides;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.events.PlayerChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

@Slf4j
@PluginDescriptor(
    name = "Valiance",
    description="Valiance clan plugin to help automate events."
)
public class ValianceClanPlugin extends Plugin
{
    @Inject
    private Client client;
    
    @Inject
    public ValianceConfig config;

    @Inject
    public SendCollectionLog sendCollectionLog;

    @Inject
    public SendCombatAchievements sendCombatAchievements;
    
    @Inject
    public SendItemDrop sendItemDrop;

    @Inject
    private EventBus eventBus;

    @Override
    protected void startUp() throws Exception
    {
        eventBus.register(sendCollectionLog);
        eventBus.register(sendCombatAchievements);
        eventBus.register(sendItemDrop);
    }

    @Override
    protected void shutDown() throws Exception
    {
        eventBus.unregister(sendCollectionLog);
        eventBus.unregister(sendCombatAchievements);
        eventBus.unregister(sendItemDrop);
    }

    @Provides
    ValianceConfig getConfig(ConfigManager configManager)
    {
        return configManager.getConfig(ValianceConfig.class);
    }

    @Subscribe
    public void onPlayerChanged(PlayerChanged playerChanged)
    {
        if (playerChanged.getPlayer().getId() == client.getLocalPlayer().getId())
            MessageHeaderData.setPlayerName(client.getLocalPlayer().getName());
    }
}

package com.encryptiron;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ValianceClanPluginTest
{
    public static void main(String[] args) throws Exception
    {
        ExternalPluginManager.loadBuiltin(ValianceClanPlugin.class);
        RuneLite.main(args);
    }
}
