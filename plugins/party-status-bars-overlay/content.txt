package com.lou0815.PartyStatusBarsOverlay;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PartyStatusBarsOverlayTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PartyStatusBarsOverlayPlugin.class);
		RuneLite.main(args);
	}
}
package com.lou0815.PartyStatusBarsOverlay;

import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.overlay.components.ProgressBarComponent;

import javax.inject.Inject;
import java.awt.*;

@Slf4j
public class PartyStatusBarsComponent extends ProgressBarComponent {

    private final BarType type;
    private Integer currValue;
    private Integer maxValue;
    private boolean drawBorder = false;
    private Color borderColor;

    private final PartyStatusBarsOverlayConfig config;

    @Inject
    public PartyStatusBarsComponent(PartyStatusBarsOverlayConfig config, BarType type, Integer currValue, Integer maxValue) {
        this.config = config;
        this.type = type;
        this.currValue = currValue;
        this.maxValue = maxValue;

        initializeProgressBar();
    }

    public PartyStatusBarsComponent(PartyStatusBarsOverlayConfig config, BarType type, Integer currValue) {
        this(config, type, currValue, 100); // Defaults maxValue to 100 if not specified
    }

    private void initializeProgressBar() {
        setLabelDisplayMode(LabelDisplayMode.TEXT_ONLY);
        switch (type) {
            case HP:
                setBackgroundColor(config.backgroundHpColor());
                if (currValue > maxValue) {
                    setForegroundColor(config.overHpColor());
                } else if(currValue <= config.thresholdHp() && config.showHpThresholdWarning()){
                    setForegroundColor(config.thresholdHpColor());
                } else {
                    setForegroundColor(config.hpColor());
                }
                if(currValue <= config.thresholdHp() && config.showHpThresholdWarningBorder()){
                    borderColor = config.thresholdHpColorBorder();
                    drawBorder = true;
                }
                break;
            case PRAY:
                setBackgroundColor(config.backgroundPrayColor());
                if (currValue > maxValue) {
                    setForegroundColor(config.overPrayColor());
                } else if(currValue <= config.thresholdPray() && config.showPrayThresholdWarning()){
                    setForegroundColor(config.thresholdPrayColor());
                } else {
                    setForegroundColor(config.prayColor());
                }
                if(currValue <= config.thresholdPray() && config.showPrayThresholdWarningBorder()){
                    borderColor = config.thresholdPrayColorBorder();
                    drawBorder = true;
                }
                break;
            case SPEC:
                // if we are on the spec Bar, we reverse the if statement since spec makes more sense to Warn when above a value
                setBackgroundColor(config.backgroundSpecColor());
                if (currValue >= config.thresholdSpec() && config.showSpecThresholdWarning()) {
                    setForegroundColor(config.thresholdSpecColor());
                } else {
                    setForegroundColor(config.specColor());
                }
                if(currValue >= config.thresholdSpec() && config.showSpecThresholdWarningBorder()){
                    borderColor = config.thresholdSpecColorBorder();
                    drawBorder = true;
                }
                break;
            case RUN:
                setBackgroundColor(config.backgroundRunColor());
                if (currValue <= config.thresholdRun() && config.showRunThresholdWarning()) {
                    setForegroundColor(config.thresholdRunColor());
                } else {
                    setForegroundColor(config.runColor());
                }
                if(currValue <= config.thresholdRun() && config.showRunThresholdWarningBorder()){
                    borderColor = config.thresholdRunColorBorder();
                    drawBorder = true;
                }
                break;
        }
        updateProgress();  // Call update to set the initial label and progress
    }

    private void updateProgress() {
        double progress = (double) currValue / maxValue * 100;
        setCenterLabel(currValue + "/" + maxValue);
        setValue(progress);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        Dimension dimension = super.render(graphics); // Draws the main progress bar

        // Draw a border if below threshold
        if (drawBorder) {
            drawThresholdBorder(graphics);
        }
        return dimension;
    }

    private void drawThresholdBorder(Graphics2D graphics) {
        graphics.setColor(borderColor); // Define this color in config
        graphics.setStroke(new BasicStroke(config.borderThickness())); // Set border thickness
        graphics.drawRect(getBounds().x, getBounds().y , getBounds().width, getBounds().height); // Draw border around bar
    }
}

package com.lou0815.PartyStatusBarsOverlay;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

import java.awt.*;

@ConfigGroup("PartyStatusBarsOverlay")
public interface PartyStatusBarsOverlayConfig extends Config
{
	@ConfigItem(
			keyName = "showCharName",
			name = "Show Player Names",
			description = "Show Player Names of party members in the Overlay",
			position = 10
	)
	default boolean showCharName()
	{
		return true;
	}

	@ConfigItem(
			keyName = "showSpacer",
			name = "Show Spacer",
			description = "Show Spacer after each party members in the Overlay",
			position = 20
	)
	default boolean showSpacer()
	{
		return true;
	}

	@ConfigItem(
			keyName = "barGap",
			name = "Gap Between Bars",
			description = "How far apart the bars should be",
			position = 30
	)
	default int barGap()
	{
		return 3;
	}

	@ConfigItem(
			keyName = "borderThickness",
			name = "Border Thickness",
			description = "Thickness of Threshold Warning Borders",
			position = 30
	)
	default int borderThickness()
	{
		return 3;
	}

	@ConfigSection(
			name = "Hitpoint Settings",
			description = "Settings for the Hitpoint Bars",
			position = 51
	)
	String HITPOINT_SETTINGS = "hitpointSettings";

	@ConfigSection(
			name = "Prayer Settings",
			description = "Settings for the Prayer Bars",
			position = 52
	)
	String PRAYER_SETTINGS = "PrayerSettings";

	@ConfigSection(
			name = "Special Attack Settings",
			description = "Settings for the Special Attack Bars",
			position = 53
	)
	String SPECIAL_ATTACK_SETTINGS = "specialAttackSettings";

	@ConfigSection(
			name = "Run Energy Settings",
			description = "Settings for the Run Energy Bars",
			position = 54
	)
	String RUN_ENERGY_SETTINGS = "runEnergySettings";

	@ConfigItem(
			section = HITPOINT_SETTINGS,
			keyName = "showBarHealth",
			name = "Show Health Bars",
			description = "Show health bars of party members in the Overlay",
			position = 100
	)
	default boolean showBarHealth()
	{
		return true;
	}

	@ConfigItem(
			section = PRAYER_SETTINGS,
			keyName = "showBarPrayer",
			name = "Show Prayer Bars",
			description = "Show prayer bars of party members in the Overlay",
			position = 200
	)
	default boolean showBarPrayer()
	{
		return true;
	}

	@ConfigItem(
			section = SPECIAL_ATTACK_SETTINGS,
			keyName = "showBarSpecEnergy",
			name = "Show Special Attack Energy Bars",
			description = "Show special attack energy bars of party members in the Overlay",
			position = 300
	)
	default boolean showBarSpecEnergy()
	{
		return false;
	}

	@ConfigItem(
			section = RUN_ENERGY_SETTINGS,
			keyName = "showBarRunEnergy",
			name = "Show Run Energy Bars",
			description = "Show run energy bars of party members in the Overlay",
			position = 400
	)
	default boolean showBarRunEnergy()
	{
		return false;
	}

	@ConfigItem(
			section = HITPOINT_SETTINGS,
			keyName = "hpColor",
			name = "Hitpoints Color",
			description = "Color of Hitpoints",
			position = 110
	)
	default Color hpColor() {return new Color(50, 255, 50, 125);}

	@ConfigItem(
			section = HITPOINT_SETTINGS,
			keyName = "overHpColor",
			name = "Overheal Color",
			description = "Color of Hitpoints above Players Maximum",
			position = 120
	)
	default Color overHpColor() {return new Color(50, 255, 50, 175);}

	@ConfigItem(
			section = HITPOINT_SETTINGS,
			keyName = "backgroundHpColor",
			name = "Hitpoints Background Color",
			description = "Color of missing Hitpoints (Background)",
			position = 130
	)
	default Color backgroundHpColor() {return new Color(225, 35, 0, 125);}

	@ConfigItem(
			section = HITPOINT_SETTINGS,
			keyName = "showHpThresholdWarning",
			name = "Recolor Bar at Threshold",
			description = "Show HP Bar in Warning Color when the value is below the Threshold",
			position = 150
	)
	default boolean showHpThresholdWarning()
	{
		return false;
	}

	@ConfigItem(
			section = HITPOINT_SETTINGS,
			keyName = "thresholdHp",
			name = "HP Threshold",
			description = "HP Threshold",
			position = 140
	)
	default int thresholdHp() {return 10;}

	@ConfigItem(
			section = HITPOINT_SETTINGS,
			keyName = "thresholdHpColor",
			name = "Threshold Bar Color",
			description = "Color of HP Bar below Threshold",
			position = 160
	)
	default Color thresholdHpColor() {return new Color(194, 78, 255, 255);}

	@ConfigItem(
			section = PRAYER_SETTINGS,
			keyName = "prayColor",
			name = "Prayer Color",
			description = "Color of Prayer Points",
			position = 210
	)
	default Color prayColor() {return new Color(50, 200, 200, 175);}

	@ConfigItem(
			section = PRAYER_SETTINGS,
			keyName = "overPrayColor",
			name = "Over Prayer Color",
			description = "Color of Prayer Points above Players Maximum",
			position = 220
	)
	default Color overPrayColor() {return new Color(50, 255, 255, 175);}

	@ConfigItem(
			section = PRAYER_SETTINGS,
			keyName = "backgroundPrayColor",
			name = "Prayer Points Background Color",
			description = "Color of missing Prayer Points (Background)",
			position = 230
	)
	default Color backgroundPrayColor() {return new Color(0, 0, 0, 150);}

	@ConfigItem(
			section = PRAYER_SETTINGS,
			keyName = "showPrayThresholdWarning",
			name = "Recolor Bar at Threshold",
			description = "Show Prayer Bar in Warning Color when the value is below the Threshold",
			position = 250
	)
	default boolean showPrayThresholdWarning()
	{
		return false;
	}

	@ConfigItem(
			section = PRAYER_SETTINGS,
			keyName = "thresholdPray",
			name = "Prayer Threshold",
			description = "Prayer Threshold",
			position = 240
	)
	default int thresholdPray() {return 10;}

	@ConfigItem(
			section = PRAYER_SETTINGS,
			keyName = "thresholdPrayColor",
			name = "Threshold Bar Color",
			description = "Color of Prayer Threshold Warning",
			position = 260
	)
	default Color thresholdPrayColor() {return new Color(194, 78, 255, 255);}

	@ConfigItem(
			section = SPECIAL_ATTACK_SETTINGS,
			keyName = "specColor",
			name = "Special Attack Color",
			description = "Color of Special Attack",
			position = 310
	)
	default Color specColor() {return new Color(255, 143, 51, 175);}

	@ConfigItem(
			section = SPECIAL_ATTACK_SETTINGS,
			keyName = "backgroundSpecColor",
			name = "Special Attack Background Color",
			description = "Color of missing Special Attack (Background)",
			position = 320
	)
	default Color backgroundSpecColor() {return new Color(0, 0, 0, 150);}

	@ConfigItem(
			section = SPECIAL_ATTACK_SETTINGS,
			keyName = "showSpecThresholdWarning",
			name = "Recolor Bar at Threshold",
			description = "Show Special Attack Bar in Warning Color when the value is above the Threshold",
			position = 340
	)
	default boolean showSpecThresholdWarning()
	{
		return false;
	}

	@ConfigItem(
			section = SPECIAL_ATTACK_SETTINGS,
			keyName = "thresholdSpec",
			name = "Special Attack Threshold",
			description = "Special Attack Threshold",
			position = 330
	)
	default int thresholdSpec() {return 100;}

	@ConfigItem(
			section = SPECIAL_ATTACK_SETTINGS,
			keyName = "thresholdSpecColor",
			name = "Threshold Bar Color",
			description = "Color of Special Attack Threshold Warning",
			position = 350
	)
	default Color thresholdSpecColor() {return new Color(194, 78, 255, 255);}

	@ConfigItem(
			section = RUN_ENERGY_SETTINGS,
			keyName = "runColor",
			name = "Run Energy Color",
			description = "Color of Run Energy",
			position = 410
	)
	default Color runColor() {return new Color(255, 233, 78, 150);}

	@ConfigItem(
			section = RUN_ENERGY_SETTINGS,
			keyName = "backgroundRunColor",
			name = "Run Energy Background Color",
			description = "Color of missing Run Energy (Background)",
			position = 420
	)
	default Color backgroundRunColor() {return new Color(0, 0, 0, 150);}

	@ConfigItem(
			section = RUN_ENERGY_SETTINGS,
			keyName = "showRunThresholdWarning",
			name = "Recolor Bar at Threshold",
			description = "Show Run Energy Bar in Warning Color when the value is below the Threshold",
			position = 440
	)
	default boolean showRunThresholdWarning()
	{
		return false;
	}

	@ConfigItem(
			section = RUN_ENERGY_SETTINGS,
			keyName = "thresholdRun",
			name = "Run Energy Threshold",
			description = "Run Energy Threshold",
			position = 430
	)
	default int thresholdRun() {return 10;}

	@ConfigItem(
			section = RUN_ENERGY_SETTINGS,
			keyName = "thresholdRunColor",
			name = "Threshold Bar Color",
			description = "Color of Run Energy Threshold Warning",
			position = 450
	)
	default Color thresholdRunColor() {return new Color(194, 78, 255, 255);}

	@ConfigItem(
			section = HITPOINT_SETTINGS,
			keyName = "showHpThresholdWarningBorder",
			name = "Show Border at Threshold",
			description = "Show Hitpoint Bar Border when Hitpoints are below specified Threshold",
			position = 170
	)
	default boolean showHpThresholdWarningBorder()
	{
		return false;
	}

	@ConfigItem(
			section = HITPOINT_SETTINGS,
			keyName = "thresholdHpColorBorder",
			name = "Threshold Border Color",
			description = "Color of Hitpoint Bar Border when Hitpoints are below specified Threshold",
			position = 180
	)
	default Color thresholdHpColorBorder() {return new Color(194, 78, 255, 255);}

	@ConfigItem(
			section = PRAYER_SETTINGS,
			keyName = "showPrayThresholdWarningBorder",
			name = "Show Border at Threshold",
			description = "Show Prayer Bar Border when Prayer Points are below specified Threshold",
			position = 270
	)
	default boolean showPrayThresholdWarningBorder()
	{
		return false;
	}

	@ConfigItem(
			section = PRAYER_SETTINGS,
			keyName = "thresholdPrayColorBorder",
			name = "Threshold Border Color",
			description = "Color of Prayer Bar Border when Prayer Points are below specified Threshold",
			position = 280
	)
	default Color thresholdPrayColorBorder() {return new Color(194, 78, 255, 255);}

	@ConfigItem(
			section = SPECIAL_ATTACK_SETTINGS,
			keyName = "showSpecThresholdWarningBorder",
			name = "Show Border at Threshold",
			description = "Show Special Attack Energy Bar Border when Special Attack Energy is above specified Threshold",
			position = 360
	)
	default boolean showSpecThresholdWarningBorder()
	{
		return false;
	}

	@ConfigItem(
			section = SPECIAL_ATTACK_SETTINGS,
			keyName = "thresholdSpecColorBorder",
			name = "Threshold Border Color",
			description = "Color of Special Attack Energy Bar Border when Special Attack Energy is above specified Threshold",
			position = 370
	)
	default Color thresholdSpecColorBorder() {return new Color(194, 78, 255, 255);}

	@ConfigItem(
			section = RUN_ENERGY_SETTINGS,
			keyName = "showRunThresholdWarningBorder",
			name = "Show Border at Threshold",
			description = "Show Special Attack Energy Bar Border when Special Attack Energy is below specified Threshold",
			position = 460
	)
	default boolean showRunThresholdWarningBorder()
	{
		return false;
	}

	@ConfigItem(
			section = RUN_ENERGY_SETTINGS,
			keyName = "thresholdRunColorBorder",
			name = "Threshold Border Color",
			description = "Color of Run Energy Bar Border when Run Energy is below specified Threshold",
			position = 470
	)
	default Color thresholdRunColorBorder() {return new Color(194, 78, 255, 255);}
}

package com.lou0815.PartyStatusBarsOverlay;

import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.awt.*;
import java.util.Map;

import static com.lou0815.PartyStatusBarsOverlay.BarType.*;


public class PartyStatusBarsOverlay extends OverlayPanel {

    private final Map<Long, PlayerStats> playerStatsMap;
    private final PartyStatusBarsOverlayConfig config;

    @Inject
    private PartyStatusBarsOverlay(Map<Long, PlayerStats> playerStatsMap, PartyStatusBarsOverlayConfig config) {
        this.playerStatsMap = playerStatsMap;
        this.config = config;

        setPosition(OverlayPosition.TOP_LEFT);
        setPriority(PRIORITY_LOW);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        int i = 0;
        int size = playerStatsMap.values().size();
        for (PlayerStats playerStats : playerStatsMap.values()) {
            i += 1;
            drawPlayerBox(playerStats, i != size); // if i == size we disable the spacer so the last entry is not followed by a spacer
        }
        return super.render(graphics);
    }

    private void drawPlayerBox(PlayerStats playerStats, boolean enableSpacer) {
        getPanelComponent().setGap(new Point(0, config.barGap()));
        if (config.showCharName()) {
            panelComponent.getChildren().add(LineComponent.builder()
                    .left(playerStats.getPlayerName())
                    .build());
        }
        if (config.showBarHealth()) {
            PartyStatusBarsComponent progressBarHP = new PartyStatusBarsComponent(config, HP, playerStats.getCurrHP(), playerStats.getMaxHP());
            panelComponent.getChildren().add(progressBarHP);
        }
        if (config.showBarPrayer()) {
            PartyStatusBarsComponent progressBarPray = new PartyStatusBarsComponent(config, PRAY, playerStats.getCurrPray(), playerStats.getMaxPray());
            panelComponent.getChildren().add(progressBarPray);
        }
        if (config.showBarSpecEnergy()) {
            PartyStatusBarsComponent progressBarSpec = new PartyStatusBarsComponent(config, SPEC, playerStats.getCurrSpec());
            panelComponent.getChildren().add(progressBarSpec);
        }
        if (config.showBarRunEnergy()) {
            PartyStatusBarsComponent progressBarRun = new PartyStatusBarsComponent(config, RUN, playerStats.getCurrRun());
            panelComponent.getChildren().add(progressBarRun);
        }
        if (config.showSpacer() && enableSpacer) {
            panelComponent.getChildren().add(LineComponent.builder()
                    .build());
        }

    }
}

package com.lou0815.PartyStatusBarsOverlay;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public enum BarType {
    HP("Hp"),
    PRAY("Pray"),
    SPEC("Spec"),
    RUN("Run");

    private final String name;

    @Override
    public String toString() {
        return getName();
    }
}

package com.lou0815.PartyStatusBarsOverlay;

import lombok.Getter;
import net.runelite.client.plugins.party.data.PartyData;

// PlayerStats Class for convenient Access to all Stats
public class PlayerStats {
    @Getter
    private final long playerId;
    @Getter
    private final String playerName;
    private PartyData partyData;

    public PlayerStats(Long playerId, String playerName, PartyData partyData) {
        this.playerId = playerId;
        this.playerName = playerName;
        this.partyData = partyData;
    }

    public int getMaxHP() {
        return partyData.getMaxHitpoints();
    }

    public int getCurrHP() {
        return partyData.getHitpoints();
    }

    public int getMaxPray() {
        return partyData.getMaxPrayer();
    }

    public int getCurrPray() {
        return partyData.getPrayer();
    }

    public int getCurrSpec() {
        return partyData.getSpecEnergy();
    }

    public int getCurrRun() {
        return partyData.getRunEnergy();
    }
}

package com.lou0815.PartyStatusBarsOverlay;

import com.google.inject.Provides;
import javax.inject.Inject;
import javax.inject.Singleton;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.party.PartyMember;
import net.runelite.client.party.PartyService;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.party.PartyPlugin;
import net.runelite.client.plugins.party.PartyPluginService;
import net.runelite.client.ui.overlay.OverlayManager;

import java.util.HashMap;
import java.util.Map;

@Slf4j
@PluginDescriptor(
		name = "Party Status Bars Overlay",
		description = "An extension to show status bars for party members",
		tags = {"party", "status", "bars", "overlay"}
)

@PluginDependency(PartyPlugin.class)
public class PartyStatusBarsOverlayPlugin extends Plugin
{
	@Getter(AccessLevel.PACKAGE)
	@Inject
	private PartyPluginService partyPluginService;

	@Inject
	private PartyService partyService;

	@Inject
	private PartyStatusBarsOverlay partyStatusBarsOverlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private PartyStatusBarsOverlayConfig config;

	@Provides
	@Singleton // Singleton so we can use it here to update and in other classes to access the data
	Map<Long, PlayerStats> playerStatsMap() {
		return new HashMap<>();
	}

	@Inject
	private Map<Long, PlayerStats> playerStatsMap;

	@Override
	protected void startUp() throws Exception
	{
		log.info("Party Status Bars Overlay started");
		overlayManager.add(partyStatusBarsOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		log.info("Party Status Bars Overlay stopped");
		overlayManager.remove(partyStatusBarsOverlay);
	}

	@Provides
	PartyStatusBarsOverlayConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(PartyStatusBarsOverlayConfig.class);
	}

	public void refreshPlayerStatsMap() {
		// Remove players who are no longer in the party
		playerStatsMap.keySet().removeIf(id ->
				partyService.getMembers().stream().noneMatch(member -> String.valueOf(member.getMemberId()).equals(id))
		);

		for (PartyMember member : partyService.getMembers()) {
			Long memberId = member.getMemberId();
			PlayerStats existingStats = playerStatsMap.get(memberId);

			// adding a user to the playerStatsMap if not already exists and name not <unknown>
			if (existingStats == null && !member.getDisplayName().equals("<unknown>")) {

				playerStatsMap.put(memberId, new PlayerStats(
						memberId,
						member.getDisplayName(),
						partyPluginService.getPartyData(memberId)
				));
			}
		}
	}

	@Subscribe
	public void onGameTick(GameTick event) {
		refreshPlayerStatsMap();
	}
}

