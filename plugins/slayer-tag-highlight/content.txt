package com.slayertaghighlight;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SlayerTagHighlightPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(SlayerTagHighlightPlugin.class);
		RuneLite.main(args);
	}
}
package com.slayertaghighlight;

import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup("slayertaghighlight")
public interface SlayerTagHighlightConfig extends Config
{
	@ConfigItem(
			position = 0,
			keyName = "filterByList",
			name = "Filter by List",
			description = "Only highlights NPCs included in the list (use * as a wildcard, e.g. '*demon' for all demons)"
	)
	default boolean filterByList() {return false;}
	@ConfigItem(
			position = 1,
			keyName = "filterList",
			name = "",
			description = ""
	)
	default String filterList()
	{
		return "";
	}


	@Alpha
	@ConfigItem(
			position = 2,
			keyName = "highlightColor",
			name = "Highlight Color",
			description = "Sets the color of NPC/menu entry highlights"
	)
	default Color highlightColor() {return Color.RED;}

	@ConfigItem(
			position = 3,
			keyName = "tileHighlight",
			name = "Tile Highlight",
			description = "Highlights NPCs tiles"
	)
	default boolean tileHighlight()
	{
		return false;
	}

	@ConfigItem(
			position = 4,
			keyName = "hullHighlight",
			name = "Hull Highlight",
			description = "Highlights NPCs hulls"
	)
	default boolean hullHighlight()
	{
		return false;
	}

	@ConfigItem(
			position = 5,
			keyName = "outlineHighlight",
			name = "Outline Highlight",
			description = "Highlights NPCs outlines"
	)
	default boolean outlineHighlight(){return true;}

	@ConfigItem(
			position = 6,
			keyName = "areaHighlight",
			name = "Area Highlight",
			description = "Highlight NPCs areas"
	)
	default boolean areaHighlight()
	{
		return false;
	}

	@ConfigItem(
			position = 7,
			keyName = "menuHighlight",
			name = "Highlight Menu Names",
			description = "Highlights names in the right-click menu"
	)
	default boolean menuHighlight() {return true;}

	@ConfigItem(
			position = 8,
			keyName = "minimapHighlight",
			name = "Highlight Minimap",
			description = "Highlights the NPC on the minimap"
	)
	default boolean minimapHighlight(){return true;}

	@Range(min = 0, max = 50)
	@ConfigItem(
			position = 9,
			keyName = "tileWidth",
			name = "Tile Width",
			description = "Sets the width of tile highlight"
	)
	default double tileWidth() {return 2;}

	@Range(min = 0, max = 50)
	@ConfigItem(
			position = 10,
			keyName = "outlineWidth",
			name = "Outline/Hull Width",
			description = "Sets the width of the outline/hull highlights"
	)
	default double outlineWidth() {return 2;}

	@Range(min = 0, max = 5)
	@ConfigItem(
			position = 11,
			keyName = "outlineFeather",
			name = "Outline Feather",
			description = "Sets the feather of the outline highlight"
	)
	default int outlineFeather() {return 2;}

}

package com.slayertaghighlight;

import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.Point;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

import javax.inject.Inject;
import java.awt.*;

public class SlayerTagHighlightMinimapOverlay extends Overlay {

    private Client client;
    private SlayerTagHighlightPlugin plugin;
    private SlayerTagHighlightConfig config;

    @Inject
    private SlayerTagHighlightMinimapOverlay(Client client, SlayerTagHighlightPlugin plugin, SlayerTagHighlightConfig config) {
        this.client = client;
        this.plugin = plugin;
        this.config = config;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if (!config.minimapHighlight())
        {
            return null;
        }
        for (NPC npc : plugin.getHighlights())
        {
            Point minimapLocation = npc.getMinimapLocation();
            if (minimapLocation != null)
            {
                OverlayUtil.renderMinimapLocation(graphics, minimapLocation, config.highlightColor());
            }
        }
        return null;
    }
}
package com.slayertaghighlight;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.MenuEntry;
import net.runelite.api.NPC;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.PluginManager;
import net.runelite.client.plugins.slayer.SlayerPlugin;
import net.runelite.client.plugins.slayer.SlayerPluginService;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.Text;
import net.runelite.client.util.WildcardMatcher;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Slf4j
@PluginDescriptor(
		name = "Slayer Tag Highlight",
		description = "Highlights on task NPCs that aren't tagged yet (not interacting with you)",
		tags = {"Slayer", "Tag", "Highlight", "NPC"}
)
@PluginDependency(SlayerPlugin.class)
public class SlayerTagHighlightPlugin extends Plugin {

	@Inject
	private Client client;
	@Inject
	private OverlayManager overlayManager;
	@Inject
	private SlayerTagHighlightOverlay overlay;
	@Inject
	private SlayerTagHighlightMinimapOverlay minimapOverlay;
	@Inject
	private SlayerTagHighlightConfig config;
	@Inject
	private SlayerPluginService slayerPluginService;
	@Inject
	private PluginManager pluginManager;

	@Provides
	SlayerTagHighlightConfig getConfig(ConfigManager configManager) {
		return configManager.getConfig(SlayerTagHighlightConfig.class);
	}

	@Getter
	private ArrayList<NPC> highlights = new ArrayList<>();
	private List<String> filterNames;

	@Override
	protected void startUp() {
		final Optional<Plugin> slayerPlugin = pluginManager.getPlugins().stream().filter(p -> p.getName().equals("Slayer")).findFirst();
		if (slayerPlugin.isPresent() && pluginManager.isPluginEnabled(slayerPlugin.get())) {
			pluginManager.setPluginEnabled(slayerPlugin.get(), true);
		}
		overlayManager.add(overlay);
		overlayManager.add(minimapOverlay);
		filterNames = Text.fromCSV(config.filterList());
	}

	@Override
	protected void shutDown() {
		overlayManager.remove(overlay);
		overlayManager.remove(minimapOverlay);
	}

	@Subscribe
	public void onGameTick(GameTick event) {
		highlights.clear();
		for (NPC npc : client.getNpcs()) {
			if (slayerPluginService.getTargets().contains(npc)
					&& !highlights.contains(npc)
					&& !npc.isInteracting()
					&& !npc.isDead()
					&& (highlightMatchesNPCName(npc.getName()) || !config.filterByList())
			) {
				highlights.add(npc);
			}
		}
	}

	@Subscribe
	public void onMenuEntryAdded(MenuEntryAdded event) {
		final MenuEntry menuEntry = event.getMenuEntry();
		final NPC npc = menuEntry.getNpc();

		if (highlights.contains(npc) && config.menuHighlight()) {
			String string = ColorUtil.prependColorTag(Text.removeTags(event.getTarget()), config.highlightColor());
			menuEntry.setTarget(string);
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event) {
		if (event.getKey().equals("filterList")) {
			filterNames = Text.fromCSV(config.filterList());
		}
	}

	private boolean highlightMatchesNPCName(String npcName)
	{
		for (String filterName : filterNames)
		{
			if (WildcardMatcher.matches(filterName, npcName))
			{
				return true;
			}
		}

		return false;
	}

}
package com.slayertaghighlight;

import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.outline.ModelOutlineRenderer;

import javax.inject.Inject;
import java.awt.*;

public class SlayerTagHighlightOverlay extends Overlay {

    @Inject
    private Client client;
    @Inject
    private SlayerTagHighlightPlugin plugin;
    @Inject
    private SlayerTagHighlightConfig config;
    private ModelOutlineRenderer modelOutlineRenderer;

    @Inject
    private SlayerTagHighlightOverlay(Client client, SlayerTagHighlightPlugin plugin, SlayerTagHighlightConfig config, ModelOutlineRenderer modelOutlineRenderer)
    {
        this.client = client;
        this.plugin = plugin;
        this.config = config;
        this.modelOutlineRenderer = modelOutlineRenderer;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        for (NPC npc : plugin.getHighlights())
        {
            Color configColor = config.highlightColor();
            renderNpcOverlay(graphics, npc, configColor);
        }
        return null;
    }

    private void renderNpcOverlay(Graphics2D graphics, NPC npc, Color color) {
        if (config.hullHighlight()) {
            Shape shape = npc.getConvexHull();
            if (shape != null) {
                graphics.setColor(color);
                graphics.setStroke(new BasicStroke((float) config.outlineWidth()));
                graphics.draw(shape);
            }
        }
        if (config.areaHighlight()) {
            Shape shape = npc.getConvexHull();
            if (shape != null) {
                graphics.setColor((new Color (color.getRed(), color.getGreen(), color.getBlue(), 50)));
                graphics.fill(shape);
            }
        }

        if (config.tileHighlight()) {
            Shape shape = npc.getCanvasTilePoly();
            if (shape != null) {
                graphics.setColor(color);
                graphics.setStroke(new BasicStroke((float) config.tileWidth()));
                graphics.draw(shape);
            }
        }
        if (config.outlineHighlight())
        {
            int outlineWidth = (int) config.outlineWidth();
            modelOutlineRenderer.drawOutline(npc, outlineWidth, color, config.outlineFeather());
        }
    }
}
