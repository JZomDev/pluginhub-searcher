package com.pyonium.clicker;

import javax.inject.Inject;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.StatChanged;
import net.runelite.client.audio.AudioPlayer;
import net.runelite.client.chat.ChatColorType;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import java.io.File;

import net.runelite.client.RuneLite;
import net.runelite.client.util.Text;

import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.EnumMap;
import java.util.Map;
import java.util.regex.Pattern;

@Slf4j
@PluginDescriptor(
		name = "Clicker Training"
)

public class ClickerPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClickerConfig config;

	@Inject
	private ChatMessageManager chatMessageManager;

	@Inject
	private AudioPlayer audioPlayer;

	private final Map<Skill, Integer> oldExperience = new EnumMap<>(Skill.class);

	private static final File CUSTOM_SOUNDS_DIR = new File(RuneLite.RUNELITE_DIR.getPath() + File.separator + "clicker");
	private static final File CLICKER_SOUND_FILE = new File(CUSTOM_SOUNDS_DIR, "clicker.wav");

	private static final File[] SOUND_FILES = new File[]{
			CLICKER_SOUND_FILE
	};


	private static final Pattern COLLECTION_LOG_ITEM_REGEX = Pattern.compile("New item added to your collection log:.*");

	private ClickerSession session;

	//operation settings
	private ClickerMode mode;
	private int volume;
	private boolean chatMessages;
	private String praise;

	//level mode
	private boolean onVirtualLevel;
	private boolean onPartLevel;
	private int partialDivisor;

	//interval mode
	private int absoluteInterval;

	//misc
	private boolean onClog;

	@Override
	protected void startUp()
	{
		initSoundFiles();

		this.session = new ClickerSession();

		this.mode = config.mode();
		this.volume = config.volume() > 100 ? 100 : config.volume();
		this.chatMessages = config.chatMessages();
		this.praise = config.praise();

		this.onVirtualLevel = config.onVirtualLevel();
		this.onPartLevel = config.onPartLevel();
		this.partialDivisor = config.partialDivisor();

		this.absoluteInterval = config.absoluteInterval();

		this.onClog = config.onClog();
	}

	@Override
	protected void shutDown()
	{
	}

	// creates the directory and sound file to be played later
	private void initSoundFiles() {
		if (!CUSTOM_SOUNDS_DIR.exists()) {
			CUSTOM_SOUNDS_DIR.mkdirs();
		}

		for (File f : SOUND_FILES) {
			try {
				if (f.exists()) {
					continue;
				}
				InputStream stream = ClickerPlugin.class.getClassLoader().getResourceAsStream(f.getName());
				OutputStream out = new FileOutputStream(f);
				byte[] buffer = new byte[8 * 1024];
				int bytesRead;
				while ((bytesRead = stream.read(buffer)) != -1) {
					out.write(buffer, 0, bytesRead);
				}
				out.close();
				stream.close();
			} catch (Exception e) {
				log.debug(e + ": " + f);
			}
		}
	}

	@Subscribe
	public void onStatChanged(StatChanged statChanged) {

		final Skill skill = statChanged.getSkill();

		// Modified from Nightfirecat's virtual level ups plugin as this info isn't (yet?) built in to statChanged event
		final int xpAfter = client.getSkillExperience(skill);
		final int levelAfter = Experience.getLevelForXp(xpAfter);
		final int xpBefore = oldExperience.getOrDefault(skill, -1);
		final int levelBefore = xpBefore == -1 ? -1 : Experience.getLevelForXp(xpBefore);

		oldExperience.put(skill, xpAfter);

		// Do not proceed if any of the following are true (sanity checks):
		//  * xpBefore == -1              (don't fire when first setting new known value)
		//  * xpAfter <= xpBefore         (do not allow 200m -> 200m exp drops)
		if (xpBefore == -1 || xpAfter <= xpBefore) {
			return;
		}

		// if the xp is valid, add it to the current session
		session.xpDrop(skill, xpBefore, xpAfter);

		if(mode.equals(ClickerMode.LEVEL)) {

			//stop if you don't want virtual levels if you're at that point
			if(levelAfter > Experience.MAX_REAL_LEVEL && !onVirtualLevel)
			{
				return;
			}

			//fire if partial level is reached
			if (onPartLevel) {
				for (int i = 0; i < partialDivisor - 1; i++) {

					int partialXpThreshold = Experience.getXpForLevel(levelBefore) +
							(Experience.getXpForLevel(levelBefore + 1) - Experience.getXpForLevel(levelBefore)) / partialDivisor * (i + 1);

					if (xpBefore < partialXpThreshold && xpAfter >= partialXpThreshold) {
						String message = "You're " + (i + 1) + "/" + partialDivisor + " of the way to " + statChanged.getSkill().getName() + " level " + (levelBefore + 1) + "! " + praise;
						sendHighlightedMessage(message);
						playSound(CLICKER_SOUND_FILE);
						return;
					}
				}
			}

			// new level reached
			if (levelBefore < levelAfter) {
				//regular level up message already plays, but do send some praise
				String message = praise;
				sendHighlightedMessage(message);
				playSound(CLICKER_SOUND_FILE);
				return;
			}
		}

		if(mode.equals(ClickerMode.SESSION_INTERVAL))
		{
			//fire when xp after % threshold is smaller than xp before % threshold, this means we passed the threshold
			if (session.getExperience(skill) % absoluteInterval > (session.getExperience(skill) + xpAfter - xpBefore) % absoluteInterval)
			{
				String message = "You got a bunch of " + skill.getName() + " XP! " + praise;
				sendHighlightedMessage(message);
				playSound(CLICKER_SOUND_FILE);
			}
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage)
	{
		if(!onClog)
		{
			return;
		}
		ChatMessageType msgType = chatMessage.getType();
		if(!msgType.equals(ChatMessageType.GAMEMESSAGE))
		{
			return;
		}

		String outputMessage = Text.removeTags(chatMessage.getMessage());
		if(COLLECTION_LOG_ITEM_REGEX.matcher(outputMessage).matches())
		{
			sendHighlightedMessage("A new item in your collection log! " + praise);
			playSound(CLICKER_SOUND_FILE);
		}
	}

	private void playSound(File f)
	{
		float vol = volume / 100f;
		float gain = (float)Math.log10(vol) * 20;

		try {
			audioPlayer.play(f, gain);
		} catch (Exception e) {
			log.warn("Unable to play sound", e);
		}
	}

	@Provides
	ClickerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ClickerConfig.class);
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		//reset session if mode is changed
		if(!mode.equals(config.mode()))
		{
			this.session = new ClickerSession();
		}

		this.mode = config.mode();
		this.volume = config.volume();
		this.chatMessages = config.chatMessages();
		this.praise = config.praise();

		this.onVirtualLevel = config.onVirtualLevel();
		this.onPartLevel = config.onPartLevel();
		this.partialDivisor = config.partialDivisor();

		this.absoluteInterval = config.absoluteInterval();

		this.onClog = config.onClog();
	}

	private void sendHighlightedMessage(String message) {
		if(!chatMessages)
		{
			return;
		}
		String highlightedMessage = new ChatMessageBuilder()
				.append(ChatColorType.HIGHLIGHT)
				.append(message)
				.build();

		chatMessageManager.queue(QueuedMessage.builder()
				.type(ChatMessageType.CONSOLE)
				.runeLiteFormattedMessage(highlightedMessage)
				.build());
	}
}
package com.pyonium.clicker;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Skill;

import java.util.EnumMap;
import java.util.Map;

@Slf4j
public class ClickerSession {
    private final Map<Skill, Integer> sessionExperience = new EnumMap<>(Skill.class);

    public ClickerSession()
    {
        for(int i = 0; i < Skill.values().length; i++)
        {
            sessionExperience.put(Skill.values()[i], 0);
        }
    }

    public void xpDrop(Skill skill, int oldExperience, int newExperience)
    {
        sessionExperience.put(skill, sessionExperience.get(skill) + newExperience - oldExperience);
    }

    public int getExperience(Skill skill)
    {
        return sessionExperience.get(skill);
    }
}

package com.pyonium.clicker;

import net.runelite.client.config.*;

@ConfigGroup("clicker")
public interface ClickerConfig extends Config
{

    @ConfigSection(
            name = "Operation",
            description = "Settings about the operation of the clicker",
            position = 1
    )
    String OPERATION = "Operation";

    @ConfigItem(
            section = OPERATION,
            keyName = "mode",
            name = "Operating Mode",
            description = "Set the mode of operation: on session experience, or by (part of a) level",
            position = 1
    )
    default ClickerMode mode()
    {
        return ClickerMode.LEVEL;
    }

    @ConfigItem(
            section = OPERATION,
            keyName = "clickerVolume",
            name = "Volume",
            description = "How loud do you want want your reward?",
            position = 2
    )
    default int volume()
    {
        return 65;
    }

    @ConfigItem(
            section = OPERATION,
            keyName = "chatMessages",
            name = "Chat Messages",
            description = "Do you want chat messages?",
            position = 3
    )
    default boolean chatMessages()
    {
        return true;
    }

    @ConfigItem(
            section = OPERATION,
            keyName = "praise",
            name = "Praise",
            description = "The term of endearment used",
            position = 4
    )
    default String praise()
    {
        return "Good puppy!";
    }

    @ConfigSection(
            name = "Level mode settings",
            description = "Settings for clicking (parts of) level",
            position = 10
    )
    String LEVEL = "LevelMode";

    @ConfigItem(
            section = LEVEL,
            keyName = "onVirtualLevel",
            name = "Click On Virtual Level",
            description = "For all the maxed puppies out there!",
            position=12
    )
    default boolean onVirtualLevel()
    {
        return true;
    }

    @ConfigItem(
            section = LEVEL,
            keyName = "onPartLevel",
            name = "Click On Partial Level",
            description = "For if it takes too long!",
            position=13
    )
    default boolean onPartLevel()
    {
        return false;
    }

    @ConfigItem(
            section = LEVEL,
            keyName = "levelPartSize",
            name = "Partial Levels",
            description = "How many times do you want to be rewarded per level?",
            position=14
    )
    default int partialDivisor()
    {
        return 2;
    }

    @ConfigSection(
            name = "Interval mode settings",
            description = "Settings for clicking on an interval of experience",
            position = 30
    )
    String INTERVAL = "IntervalMode";

    @ConfigItem(
            section = INTERVAL,
            keyName = "xpInterval",
            name = "Experience Interval",
            description = "How much experience do you want in between clicks?",
            position=31
    )
    default int absoluteInterval()
    {
        return 10000;
    }

    @ConfigItem(
            keyName = "onClog",
            name = "Click On Collection Log",
            description = "Rewards Collection Log Slots",
            position=50
    )
    default boolean onClog()
    {
        return true;
    }




}
package com.pyonium.clicker;

public enum ClickerMode {
    OFF,
    LEVEL,
    SESSION_INTERVAL
}
package com.pyonium.clicker;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ClickerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ClickerPlugin.class);
		RuneLite.main(args);
	}
}
