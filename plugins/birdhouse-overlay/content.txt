package com.birdhouseOverlay;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class BirdhouseOverlayTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(BirdhouseOverlayPlugin.class);
		RuneLite.main(args);

	}
}
package com.birdhouseOverlay;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.*;

@ConfigGroup("Birdhouse Overlay")
public interface BirdhouseOverlayConfig extends Config
{
	@Alpha
	@ConfigItem(
			position = 1,
			keyName = "emptyColor",
			name = "Unbuilt Color",
			description = "Color overlay of unbuilt birdhouse"
	)
	default Color getUnbuiltColor()
	{
		return Color.RED;
	}
	@Alpha
	@ConfigItem(
			position = 2,
			keyName = "unseededColor",
			name = "Unseeded Color",
			description = "Color overlay of unseeded birdhouse"
	)
	default Color getUnseededColor()
	{
		return Color.YELLOW;
	}
	@Alpha
	@ConfigItem(
			position = 3,
			keyName = "seededColor",
			name = "Seeded Color",
			description = "Color overlay of unseeded birdhouse"
	)
	default Color getSeededColor()
	{
		return Color.GREEN;
	}
}

package com.birdhouseOverlay;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.util.Objects;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.outline.ModelOutlineRenderer;

import static net.runelite.api.VarPlayer.BIRD_HOUSE_MEADOW_NORTH;
import static net.runelite.api.VarPlayer.BIRD_HOUSE_MEADOW_SOUTH;
import static net.runelite.api.VarPlayer.BIRD_HOUSE_VALLEY_NORTH;
import static net.runelite.api.VarPlayer.BIRD_HOUSE_VALLEY_SOUTH;

@Slf4j
class BirdhouseColoringOverlay extends Overlay {

    private final Client client;
    private final BirdhouseOverlayConfig config;
    private final BirdhouseOverlayPlugin plugin;

    private static final int MAX_DISTANCE = 2350;

    @Inject
    private BirdhouseColoringOverlay(Client client, BirdhouseOverlayPlugin plugin, BirdhouseOverlayConfig config, ModelOutlineRenderer modelOutlineRenderer)
    {
        this.plugin = plugin;
        this.client = client;
        this.config = config;
        setPosition(OverlayPosition.DYNAMIC);
        setPriority(OverlayPriority.LOW);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        GameObject meadowNorth = plugin.getMeadowNorth();
        GameObject meadowSouth = plugin.getMeadowSouth();
        GameObject valleyNorth = plugin.getValleyNorth();
        GameObject valleySouth = plugin.getValleySouth();

        if (!Objects.isNull(meadowNorth))
        {
            int meadowNorthState = client.getVarpValue(BIRD_HOUSE_MEADOW_NORTH);
            birdhouseStateRenderer(meadowNorth, meadowNorthState, graphics);
        }

        if (!Objects.isNull(meadowSouth))
        {
            int meadowSouthState = client.getVarpValue(BIRD_HOUSE_MEADOW_SOUTH);
            birdhouseStateRenderer(meadowSouth, meadowSouthState, graphics);
        }

        if (!Objects.isNull(valleyNorth))
        {
            int valleyNorthState = client.getVarpValue(BIRD_HOUSE_VALLEY_NORTH);
            birdhouseStateRenderer(valleyNorth, valleyNorthState, graphics);
        }

        if (!Objects.isNull(valleySouth))
        {
            int valleySouthState = client.getVarpValue(BIRD_HOUSE_VALLEY_SOUTH);
            birdhouseStateRenderer(valleySouth, valleySouthState, graphics);
        }

        return null;
    }

    private void birdhouseStateRenderer(GameObject birdhouse, int state, Graphics2D graphics)
    {
        Color unbuiltColor = config.getUnbuiltColor();
        Color unseededColor = config.getUnseededColor();
        Color seededColor = config.getSeededColor();

        if (state == 0)
        {
            renderObject(birdhouse, graphics, unbuiltColor);
            log.debug(birdhouse + "rendered RED");
        }
        else if (state % 3 == 0)
        {
            renderObject(birdhouse, graphics, seededColor);
            log.debug(birdhouse + "rendered GREEN");
        }
        else
        {
            renderObject(birdhouse, graphics, unseededColor);
            log.debug(birdhouse + "rendered YELLOW");
        }
    }

    private void renderObject(GameObject object, Graphics2D graphics, Color color)
    {
        LocalPoint localLocation = client.getLocalPlayer().getLocalLocation();
        if (Objects.isNull(localLocation))
        {
            return;
        }

        Point mousePosition = client.getMouseCanvasPosition();
        LocalPoint location = object.getLocalLocation();

        if (localLocation.distanceTo(location) <= MAX_DISTANCE)
        {
            Shape objectClickbox = object.getClickbox();
            if (objectClickbox != null)
            {
                if (objectClickbox.contains(mousePosition.getX(), mousePosition.getY()))
                {
                    graphics.setColor(color.darker());
                    log.debug("Setting Clickbox - Darker");
                }
                else
                {
                    graphics.setColor(color);
                    log.debug("Setting Clickbox - Normal");
                }

                graphics.draw(objectClickbox);
                graphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), 20));
                graphics.fill(objectClickbox);
            }
        }
    }
}

package com.birdhouseOverlay;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.GameState;
import net.runelite.api.events.GameObjectDespawned;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import static net.runelite.api.NullObjectID.NULL_30565;
import static net.runelite.api.NullObjectID.NULL_30566;
import static net.runelite.api.NullObjectID.NULL_30567;
import static net.runelite.api.NullObjectID.NULL_30568;

@Slf4j
@PluginDescriptor(
	name = "Birdhouse Overlay"
)
public class BirdhouseOverlayPlugin extends Plugin
{
	private static final int MEADOW_NORTH = NULL_30565;
	private static final int MEADOW_SOUTH = NULL_30566;
	private static final int VALLEY_NORTH = NULL_30567;
	private static final int VALLEY_SOUTH = NULL_30568;

	@Inject
	private Client client;

	@Inject
	private BirdhouseOverlayConfig config;

	@Inject
	private BirdhouseColoringOverlay overlay;

	@Getter(AccessLevel.PACKAGE)
	private GameObject meadowNorth;
	@Getter(AccessLevel.PACKAGE)
	private GameObject meadowSouth;
	@Getter(AccessLevel.PACKAGE)
	private GameObject valleyNorth;
	@Getter(AccessLevel.PACKAGE)
	private GameObject valleySouth;

	@Inject
	private OverlayManager overlayManager;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
		meadowNorth = null;
		meadowSouth = null;
		valleyNorth = null;
		valleySouth = null;
	}

	@Provides
	BirdhouseOverlayConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(BirdhouseOverlayConfig.class);
	}

	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned event)
	{
		GameObject gameObject = event.getGameObject();

		switch (gameObject.getId())
		{
			case MEADOW_NORTH:
				meadowNorth = gameObject;
				break;
			case MEADOW_SOUTH:
				meadowSouth = gameObject;
				break;
			case VALLEY_NORTH:
				valleyNorth = gameObject;
				break;
			case VALLEY_SOUTH:
				valleySouth = gameObject;
				break;
		}
	}

	@Subscribe
	public void onGameObjectDespawned(GameObjectDespawned event)
	{
		GameObject gameObject = event.getGameObject();
		switch (gameObject.getId())
		{
			case MEADOW_NORTH:
				meadowNorth = null;
				break;
			case MEADOW_SOUTH:
				meadowSouth = null;
				break;
			case VALLEY_NORTH:
				valleyNorth = null;
				break;
			case VALLEY_SOUTH:
				valleySouth = null;
				break;

		}
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		if (event.getGameState() == GameState.LOADING)
		{
			meadowNorth = null;
			meadowSouth = null;
			valleyNorth = null;
			valleySouth = null;
		}
	}

}

