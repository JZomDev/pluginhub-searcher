package com.scouting;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ScoutingPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ScoutingPlugin.class);
		RuneLite.main(args);
	}
}
package com.scouting;

import com.google.gson.*;
import okhttp3.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.io.IOException;
import java.lang.reflect.Type;
import java.time.Instant;


@Singleton
public class ScoutingWebManager {

    protected static final String CONTENT_TYPE = "Content-Type";
    protected static final String CONTENT_TYPE_JSON = "application/json";
    protected static final MediaType MEDIA_TYPE_JSON = MediaType.parse("application/json; charset=utf-8");

    @Inject
    private OkHttpClient okHttpClient;

    @Inject
    private ScoutingPlugin plugin;

    @Inject
    private ScoutingConfig config;

    @Inject
    private GsonBuilder gsonBuilder;

    private Logger logger = LoggerFactory.getLogger(ScoutingWebManager.class);

    protected void postEvents() {
        try {
            // Oracle cloud only handles 1 JSON object to be posted at a time
            // We could change this if needed, but in the vast majority of cases, only 1 event is likely to be uploaded
            // at a time
            for (EventData eventData : plugin.getEventsToUpload()) {
                Request r = new Request.Builder()
                        .url(config.postEventsEndpoint())
                        .addHeader(CONTENT_TYPE, CONTENT_TYPE_JSON)
                        .post(RequestBody.create(MEDIA_TYPE_JSON, getGson().toJson(eventData)))
                        .build();

                okHttpClient.newCall(r).enqueue(new Callback() {
                    @Override
                    public void onFailure(Call call, IOException e) {
                        logger.error("Failed to post event", e);
                    }

                    @Override
                    public void onResponse(Call call, Response response) {
                        try {
                            if (!response.isSuccessful())
                                logger.error("On post response error " + response.body().string());
                        }
                        catch (Exception e) {
                            logger.error("POST responded unsuccessful ", e);
                        }
                        finally {
                            response.close();
                        }
                    }
                });
            }
        } catch (Exception e) {
            logger.error("Outer catch block POST ", e);
        }
        plugin.getEventsToUpload().clear();
    }

    private Gson getGson() {
        return gsonBuilder.registerTypeAdapter(Instant.class, new InstantSecondsConverter()).create();
    }

    /**
     * Serializes/Deserializes {@link Instant} using {@link Instant#getEpochSecond()}/{@link Instant#ofEpochSecond(long)}
     */
    private static class InstantSecondsConverter implements JsonSerializer<Instant>, JsonDeserializer<Instant>
    {
        @Override
        public JsonElement serialize(Instant src, Type srcType, JsonSerializationContext context) {
            return new JsonPrimitive(src.getEpochSecond());
        }

        @Override
        public Instant deserialize(JsonElement json, Type type, JsonDeserializationContext context)
                throws JsonParseException {
            return Instant.ofEpochSecond(json.getAsLong());
        }
    }
}

package com.scouting;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("event-scouting")
public interface ScoutingConfig extends Config
{

	@ConfigSection(
			name = "Info",
			description = "",
			position = 0
	)
	String infoSection = "Info section";

	@ConfigItem(
			keyName = "Calls discord link",
			name = "Calls Discord link [Hover]",
			description = "Join Log Hunters to view calls on Discord and enable notifications for certain events." +
					" Your calls may take some time to start showing up.",
			position = 0,
			section = infoSection
	)
	default String discordLink() {
		return "https://discord.gg/loghunters";
	}

	@ConfigSection(
			name = "Events",
			description = "Which events to scout for",
			position = 1
	)
	String eventsSection = "Events section";

	@ConfigItem(
			keyName = "forestry",
			name = "Forestry Events",
			description = "Send Forestry events to server",
			position = 1,
			section = eventsSection
	)
	default boolean forestryEventsEnabled()
	{
		return true;
	}

	@ConfigSection(
			name = "Debug",
			description = "Extra settings for advanced users",
			position = 2,
			closedByDefault = true
	)
	String debugSection = "Debug section";

	@ConfigItem(
			keyName = "callsEndpoint",
			name = "Calls URL",
			description = "Which URL to send events to",
			position = 0,
			section = debugSection
	)
	default String postEventsEndpoint()
	{
		return "https://g98c6e9efd32fb1-scouting.adb.us-ashburn-1.oraclecloudapps.com/ords/scouting/calls/";
	}

}

package com.scouting;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.task.Schedule;

import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;

@Slf4j
@PluginDescriptor(
	name = "Event Scouting"
)
public class ScoutingPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ScoutingConfig config;

	@Inject
	private ScoutingWebManager webManager;

	@Getter(AccessLevel.PACKAGE)
	private List<EventData> eventsToUpload = new ArrayList<>();

	protected static String postEventsEndpoint =
			"https://g98c6e9efd32fb1-scouting.adb.us-ashburn-1.oraclecloudapps.com/ords/scouting/calls/";

	// Every X seconds, upload any events found since the last check
	private static final int UPLOAD_INTERVAL_SECONDS = 3;

	List<EventData> recentEvents = new ArrayList<>();

	@Subscribe
	public void onGameObjectSpawned(final GameObjectSpawned event) {
		GameObject gameObject = event.getGameObject();

		SupportedEventsEnum eventType = SupportedEventsEnum.findByObjectId(gameObject.getId());

		eventSpawned(eventType, gameObject.getWorldLocation(), gameObject.getId(), null);
	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned npcSpawned) {
		final NPC npc = npcSpawned.getNpc();

		SupportedEventsEnum eventType = SupportedEventsEnum.findByNpcId(npc.getId());

		eventSpawned(eventType, npc.getWorldArea().toWorldPoint(), npc.getId(), npc.getIndex());
	}

	private void eventSpawned(SupportedEventsEnum eventType, WorldPoint location, Integer id, Integer npcIndex) {
		if (eventType == null) {
			// event not found for this NPC
			return;
		}

		if (!clientOptedIntoEventType(eventType))
			return;

		EventData event = makeEvent(eventType, location, id, null);

		// remove any stale events, since events older than the dedupe duration could never match any new events anyway.
		recentEvents.removeIf(e -> Math.abs(e.getDiscovered_time().getEpochSecond() - Instant.now().getEpochSecond())
				> EventData.EVENT_DEDUPE_DURATION);
		// only attempt to upload the event if it has not already been seen
		if (!recentEvents.contains(event)) {
			eventsToUpload.add(event);
			recentEvents.add(event);
		}
	}

	private EventData makeEvent(SupportedEventsEnum eventType, WorldPoint eventLocation, int id, Integer npcIndex) {
		int world = client.getWorld();
		return EventData.builder()
				.eventType(eventType.name())
				.world(world)
				.xcoord(eventLocation.getX())
				.ycoord(eventLocation.getY())
				.plane(eventLocation.getPlane())
				.discovered_time(Instant.now())
				.npcId(id)
				.npcIndex(npcIndex)
				.rsn(client.getLocalPlayer().getName())
				.build();
	}

	// Only send events if the client is interested in contributing to scouting this event type
	private boolean clientOptedIntoEventType(SupportedEventsEnum eventType) {
		if (eventType == SupportedEventsEnum.ENT
				|| eventType == SupportedEventsEnum.PHEASANT
				|| eventType == SupportedEventsEnum.FOX
				|| eventType == SupportedEventsEnum.BEEHIVE
				|| eventType == SupportedEventsEnum.RITUAL
				|| eventType == SupportedEventsEnum.LEPRECHAUN
				|| eventType == SupportedEventsEnum.ROOTS
				|| eventType == SupportedEventsEnum.SAPLING
				|| eventType == SupportedEventsEnum.FLOWERS
		) {
			return config.forestryEventsEnabled();
		}

		// Future event types go here.

		return false;
	}

	@Schedule(
			period = UPLOAD_INTERVAL_SECONDS,
			unit = ChronoUnit.SECONDS,
			asynchronous = true
	)
	public void uploadEvents() {
		// List is cleared by webManager after uploading successfully
		if (eventsToUpload.size() > 0)
			webManager.postEvents();
	}

	@Provides
	ScoutingConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ScoutingConfig.class);
	}
}

package com.scouting;

import com.google.gson.annotations.SerializedName;
import lombok.Builder;
import lombok.Getter;
import lombok.Value;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.Instant;
import java.util.Objects;

@Value
@Builder
public class EventData implements Comparable {

    private static Logger logger = LoggerFactory.getLogger(EventData.class);

    // Note: These thresholds are a bit conservative since we can always further dedupe events down the line.
    // Any events within X tiles of one another may be considered the same event
    public static int EVENT_DEDUPE_DISTANCE = 20;
    // Any events within X seconds of one another may be considered the same event
    public static int EVENT_DEDUPE_DURATION = 180;

    @Getter
    @SerializedName("event_type")
    private String eventType;

    @Getter
    @SerializedName("world")
    private int world;

    @Getter
    @SerializedName("x_coord")
    private int xcoord;

    @Getter
    @SerializedName("y_coord")
    private int ycoord;

    @Getter
    @SerializedName("plane")
    private int plane;

    @Getter
    @SerializedName("discovered_time")
    private Instant discovered_time;

    @Getter
    @SerializedName("npc_id")
    private Integer npcId;

    @Getter
    @SerializedName("npc_index")
    private Integer npcIndex;

    @Getter
    @SerializedName("custom")
    // Note: must be strictly equal for events to be considered equal
    private String custom;

    @Getter
    @SerializedName("rsn")
    // not considered part of the event in terms of event equality,
    // but sent along with the event for crediting, leaderboards, etc.
    private String rsn;

    @Override
    public String toString() {
        return eventType + "  " + world + "  " + xcoord + "  " + ycoord + "  " + plane + "  " + discovered_time.toString() + "  "
                + npcId + "  " + npcIndex + "  " + custom;
    }

    @Override
    // uses discovered_time for sequential ordering
    public int compareTo(Object o) {
        if (!(o instanceof EventData))
            return -1;

        EventData other = (EventData) o;
        return this.discovered_time.compareTo(other.getDiscovered_time());
    }

    // equal if the objects likely refer to the same event, regardless of timestamp or exact coordinates (for NPCs)
    @Override
    public boolean equals(Object o) {
        if (!(o instanceof EventData))
            return false;

        EventData other = (EventData) o;
        if (!Objects.equals(this.eventType, other.eventType))
            return false;
        if (this.world != other.world)
            return false;
        if (this.plane != other.plane)
            return false;
        if (!Objects.equals(this.custom, other.custom))
            return false;

        // At this point, we know that two events of the same type are in the same world/plane. For now, assume that any
        // events within X tiles of one another are the same event. Even if this isn't completely accurate,
        // people will go to one of the locations and see both events, so it's fine.
        if (Math.abs(this.xcoord - other.xcoord) > EVENT_DEDUPE_DISTANCE) {
            return false;
        }
        if (Math.abs(this.ycoord - other.ycoord) > EVENT_DEDUPE_DISTANCE) {
            return false;
        }

        if (Math.abs(this.discovered_time.getEpochSecond() - other.discovered_time.getEpochSecond()) > EVENT_DEDUPE_DURATION) {
            return false;
        }

        return true;
    }
}

package com.scouting;


import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.api.NpcID;
import net.runelite.api.ObjectID;

import java.util.HashMap;
import java.util.Map;

@Getter
@AllArgsConstructor
public enum SupportedEventsEnum {

    ENT,
    FOX,
    PHEASANT,
    BEEHIVE,
    RITUAL,
    LEPRECHAUN,
    ROOTS,
    SAPLING,
    FLOWERS
    ;

    private static final Map<Integer, SupportedEventsEnum> npcIdToEventMap;
    private static final Map<Integer, SupportedEventsEnum> objectIdToEventMap;

    static {
        npcIdToEventMap = new HashMap<>();
        objectIdToEventMap = new HashMap<>();

        // Omitting PRUNED_ENTLING_12544 because it only signals the end of an event
        npcIdToEventMap.put(NpcID.ENTLING, ENT);

        npcIdToEventMap.put(NpcID.FOX_TRAP, FOX);
        npcIdToEventMap.put(NpcID.POACHER, FOX);
        npcIdToEventMap.put(NpcID.POACHER_12554, FOX);
        npcIdToEventMap.put(NpcID.POACHER_12555, FOX);
        npcIdToEventMap.put(NpcID.POACHER_12556, FOX);
        npcIdToEventMap.put(NpcID.POACHER_12557, FOX);
        npcIdToEventMap.put(NpcID.POACHER_12558, FOX);
        npcIdToEventMap.put(NpcID.FRIGHTENED_FOX, FOX);
        npcIdToEventMap.put(NpcID.FRIGHTENED_FOX_12560, FOX);

        // PHEASANT_12547 and PHEASANT_12549 are pets, not events!
        npcIdToEventMap.put(NpcID.FREAKY_FORESTER_12536, PHEASANT);
        npcIdToEventMap.put(NpcID.PHEASANT_12537, PHEASANT);
        objectIdToEventMap.put(ObjectID.PHEASANT_NEST, PHEASANT);
        objectIdToEventMap.put(ObjectID.PHEASANT_NEST_49937, PHEASANT);

        // Omitting FRIENDLY_BEES which also spawn during flowering bush event
        npcIdToEventMap.put(NpcID.BEE_KEEPER_12514, BEEHIVE);
        npcIdToEventMap.put(NpcID.UNFINISHED_BEEHIVE, BEEHIVE);
        npcIdToEventMap.put(NpcID.UNFINISHED_BEEHIVE_12516, BEEHIVE);
        npcIdToEventMap.put(NpcID.COMPLETE_BEEHIVE, BEEHIVE);
        npcIdToEventMap.put(NpcID.WILD_BEEHIVE, BEEHIVE);

        npcIdToEventMap.put(NpcID.DRYAD_12519, RITUAL);
        npcIdToEventMap.put(NpcID.RITUAL_CIRCLE_GREEN, RITUAL);
        npcIdToEventMap.put(NpcID.RITUAL_CIRCLE_YELLOW, RITUAL);
        npcIdToEventMap.put(NpcID.RITUAL_CIRCLE_BLUE, RITUAL);
        npcIdToEventMap.put(NpcID.RITUAL_CIRCLE_RED, RITUAL);
        npcIdToEventMap.put(NpcID.RITUAL_CIRCLE_GREEN_12524, RITUAL);
        npcIdToEventMap.put(NpcID.RITUAL_CIRCLE_YELLOW_12525, RITUAL);
        npcIdToEventMap.put(NpcID.RITUAL_CIRCLE_BLUE_12526, RITUAL);
        npcIdToEventMap.put(NpcID.RITUAL_CIRCLE_RED_12527, RITUAL);
        npcIdToEventMap.put(NpcID.RITUAL_CIRCLE_GREEN_12528, RITUAL);
        npcIdToEventMap.put(NpcID.RITUAL_CIRCLE_YELLOW_12529, RITUAL);
        npcIdToEventMap.put(NpcID.RITUAL_CIRCLE_BLUE_12530, RITUAL);
        npcIdToEventMap.put(NpcID.RITUAL_CIRCLE_RED_12531, RITUAL);
        npcIdToEventMap.put(NpcID.RITUAL_CIRCLE_GREEN_12532, RITUAL);
        npcIdToEventMap.put(NpcID.RITUAL_CIRCLE_YELLOW_12533, RITUAL);
        npcIdToEventMap.put(NpcID.RITUAL_CIRCLE_BLUE_12534, RITUAL);
        npcIdToEventMap.put(NpcID.RITUAL_CIRCLE_RED_12535, RITUAL);

        npcIdToEventMap.put(NpcID.WOODCUTTING_LEPRECHAUN, LEPRECHAUN);

        npcIdToEventMap.put(NpcID.FLOWERING_BUSH_LILAC, FLOWERS);
        npcIdToEventMap.put(NpcID.FLOWERING_BUSH_PINK, FLOWERS);
        npcIdToEventMap.put(NpcID.FLOWERING_BUSH_RED, FLOWERS);
        npcIdToEventMap.put(NpcID.FLOWERING_BUSH_ORANGE, FLOWERS);
        npcIdToEventMap.put(NpcID.FLOWERING_BUSH_YELLOW, FLOWERS);
        npcIdToEventMap.put(NpcID.FLOWERING_BUSH_WHITE , FLOWERS);
        npcIdToEventMap.put(NpcID.FLOWERING_BUSH_GREEN, FLOWERS);
        npcIdToEventMap.put(NpcID.FLOWERING_BUSH_BLUE, FLOWERS);

        objectIdToEventMap.put(ObjectID.TREE_ROOTS, ROOTS);
        objectIdToEventMap.put(ObjectID.ANIMAINFUSED_TREE_ROOTS, ROOTS);

        objectIdToEventMap.put(ObjectID.STRUGGLING_SAPLING, SAPLING);
        objectIdToEventMap.put(ObjectID.STRUGGLING_SAPLING_47485, SAPLING);
        objectIdToEventMap.put(ObjectID.STRUGGLING_SAPLING_47487, SAPLING);
        objectIdToEventMap.put(ObjectID.STRUGGLING_SAPLING_47488, SAPLING);
        objectIdToEventMap.put(ObjectID.STRUGGLING_SAPLING_47490, SAPLING);
        objectIdToEventMap.put(ObjectID.STRUGGLING_SAPLING_47491, SAPLING);
        objectIdToEventMap.put(ObjectID.ROTTING_LEAVES, SAPLING);
        objectIdToEventMap.put(ObjectID.GREEN_LEAVES, SAPLING);
        objectIdToEventMap.put(ObjectID.DROPPINGS, SAPLING);
        objectIdToEventMap.put(ObjectID.WILD_MUSHROOMS, SAPLING);
        objectIdToEventMap.put(ObjectID.WILD_MUSHROOMS_47497, SAPLING);
        objectIdToEventMap.put(ObjectID.WILD_MUSHROOMS_47498, SAPLING);
        objectIdToEventMap.put(ObjectID.SPLINTERED_BARK, SAPLING);
    }

    public static SupportedEventsEnum findByNpcId(int npcId) {
        return npcIdToEventMap.get(npcId);
    }

    public static SupportedEventsEnum findByObjectId(int objectId) {
        return objectIdToEventMap.get(objectId);
    }

}

