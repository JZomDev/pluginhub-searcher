package com.quyaz.gimbankex;

import lombok.*;

import java.util.List;

@Setter
@Getter
@RequiredArgsConstructor
public class ItemTransaction {
    @NonNull
    String user;
    @NonNull
    String created_at;
    @NonNull
    List<BankItem> items;
    boolean hidden;
}

package com.quyaz.gimbankex;

import com.google.inject.Provides;

import javax.inject.Inject;
import javax.swing.*;

import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.MenuEntryAdded;
import net.runelite.api.events.WidgetClosed;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.gameval.InventoryID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.chatbox.ChatboxPanelManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

import okhttp3.*;

import java.awt.image.BufferedImage;
import java.util.*;

@Slf4j
@PluginDescriptor(
        name = "GIM Bank Ex"
)
public class GimBankExPlugin extends Plugin {
    @Inject
    private Client client;

    @Inject
    private GimBankExConfig config;

    @Inject
    private OkHttpClient okHttpClient;

    @Inject
    private ClientToolbar clientToolbar;

    @Inject
    private ItemManager itemManager;

    @Inject
    private ChatboxPanelManager chatboxPanelManager;

    private List<Item> myInventory = Collections.emptyList();
    @Getter
    private GIMBankExPanel panel;
    private NavigationButton toolbarButton;
    @Getter
    @Setter
    private ArrayList<ItemTransaction> transactions;
    @Inject
    private GIMBankExClient gimClient;
    @Getter
    @Setter
    private ArrayList<GIMMessage> gimMessages;

    protected final String DATE_FORMAT = "HH:mm d/M/y";

    @Override
    protected void startUp() throws Exception {
        log.info("GIM Bank ex started!");
        panel = new GIMBankExPanel(gimClient, itemManager);
        final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "/Group.png");
        toolbarButton = NavigationButton.builder()
                .tooltip("GIM Bank Ex")
                .icon(icon)
                .priority(5)
                .panel(panel)
                .build();

        clientToolbar.addNavigation(toolbarButton);
        gimClient.getBankTransactions(true);
        gimClient.getMessages(true, true);
    }

    protected void updatePanel() {
        updateTransactions();
        updateMessages();
    }

    protected void updateTransactions() {
        panel.refreshTransactions(transactions);
    }

    protected void updateMessages() {
        panel.refreshMessages(gimMessages);
    }

    @Override
    protected void shutDown() throws Exception {
        log.info("GIM Bank Ex stopped!");
        clientToolbar.removeNavigation(toolbarButton);
    }

    @Subscribe
    void onWidgetLoaded(WidgetLoaded event) {
        if (event.getGroupId() != InterfaceID.SHARED_BANK_SIDE) {
            return;
        }
        if (config.autoOpen() != GimBankExConfig.AutoOpen.NONE) {
            SwingUtilities.invokeLater(() -> {
                clientToolbar.openPanel(toolbarButton);
                if (config.autoOpen() == GimBankExConfig.AutoOpen.BANK) {
                    panel.getTopTabGroup().select(panel.getBankTab());
                } else if (config.autoOpen() == GimBankExConfig.AutoOpen.MESSAGES) {
                    panel.getTopTabGroup().select(panel.getMessagesTab());
                }
            });
        }

        gimClient.getBankTransactions(true);
        gimClient.getMessages(true, true);

        if (client.getItemContainer(net.runelite.api.gameval.InventoryID.INV_PLAYER_TEMP) != null) {
            myInventory = getItemsFromContainer(client.getItemContainer(net.runelite.api.gameval.InventoryID.INV_PLAYER_TEMP));
        }
    }

    @Subscribe
    void onWidgetClosed(WidgetClosed event) {
        if (event.getGroupId() != 293) {
            return;
        }
        String messageText = client.getWidget(293, 1).getText();
        if (!messageText.contains("Saving")) {
            return;
        }
        List<Item> exitItems = getItemsFromContainer(client.getItemContainer(InventoryID.INV));
        List<Item> diff = getDiff(canonicalizeItemList(myInventory), canonicalizeItemList(exitItems));

        if (!diff.isEmpty()) {
            gimClient.storeBankTransaction(diff);
        }
        myInventory = Collections.emptyList();
    }

    private List<Item> getDiff(List<Item> before, List<Item> after) {
        // This part taken from https://github.com/Lazyfaith/runelite-bank-memory-plugin/blob/master/src/main/java/com/bankmemory/ItemListDiffGenerator.java

		/*
		BSD 2-Clause License
		Copyright (c) 2020, Samuel Holloway
		All rights reserved.
		Redistribution and use in source and binary forms, with or without
		modification, are permitted provided that the following conditions are met:
		1. Redistributions of source code must retain the above copyright notice, this
		   list of conditions and the following disclaimer.
		2. Redistributions in binary form must reproduce the above copyright notice,
		   this list of conditions and the following disclaimer in the documentation
		   and/or other materials provided with the distribution.
		THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
		AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
		IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
		FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
		DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
		SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
		CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
		OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
		OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*/

        Map<Integer, Integer> beforeItems = new HashMap<>();
        Map<Integer, Integer> afterItems = new HashMap<>();
        after.forEach(i -> afterItems.put(i.getId(), i.getQuantity()));
        List<Item> results = new ArrayList<>();
        for (Item i : before) {
            beforeItems.put(i.getId(), i.getQuantity());
            int diff = afterItems.getOrDefault(i.getId(), 0) - i.getQuantity();
            if (diff != 0) {
                results.add(new Item(i.getId(), diff));
            }
        }
        for (Item i : after) {
            if (!beforeItems.containsKey(i.getId())) {
                results.add(i);
            }
        }
        return results;
    }

    private List<Item> canonicalizeItemList(List<Item> itemList) {
        List<Item> canonList = new ArrayList<>();

        for (int i = 0; i < itemList.size(); i++) {
            int canonId = itemManager.canonicalize(itemList.get(i).getId());
            boolean add = true;

            for (int j = 0; j < canonList.size(); j++) {
                if (canonList.get(j).getId() == canonId) {
                    add = false;
                    int before = canonList.get(j).getQuantity();
                    canonList.remove(j);
                    canonList.add(new Item(canonId, itemList.get(i).getQuantity() + before));
                }
            }

            if (add) {
                canonList.add(new Item(canonId, itemList.get(i).getQuantity()));
            }
        }
        return canonList;
    }

    private List<Item> getItemsFromContainer(ItemContainer shared) {
        Item[] storageItems = shared.getItems();
        if (storageItems.length == 0) return new ArrayList<>();
        List<Item> itemList = Arrays.asList(storageItems);

        storageItems = new Item[itemList.size()];
        itemList.toArray(storageItems);

        Arrays.sort(storageItems, new Comparator<Item>() {
            public int compare(Item b1, Item b2) {
                if (b1.getId() > b2.getId()) {
                    return +1;
                } else if (b1.getId() < b2.getId()) {
                    return -1;
                } else {
                    return 0;
                }
            }
        });

        List<Item> containerItems = new ArrayList<>();

        for (int i = 0; i < storageItems.length; i++) {
            ItemComposition composition = itemManager.getItemComposition(storageItems[i].getId());

            Item[] finalItems = storageItems;
            int finalI = i;
            boolean alreadyIn = containerItems.stream().anyMatch(o -> o.getId() == finalItems[finalI].getId());
            if (alreadyIn) {
                for (int j = 0; j < containerItems.size(); j++) {
                    if (containerItems.get(j).getId() == storageItems[i].getId()) {
                        int count = containerItems.get(j).getQuantity();
                        containerItems.remove(j);
                        containerItems.add(new Item(composition.getId(), count + storageItems[i].getQuantity()));
                    }
                }
            } else {
                containerItems.add(new Item(composition.getId(), storageItems[i].getQuantity()));
            }
        }
        return containerItems;
    }

    @Subscribe
    public void onMenuEntryAdded(MenuEntryAdded event) {
        if (event.getActionParam1() == InterfaceID.SharedBank.ITEMS
                && event.getOption().equals("Examine")) {
            Widget container = client.getWidget(InterfaceID.SharedBank.ITEMS);
            Widget item = container.getChild(event.getActionParam0());
            int itemId = item.getItemId();

            String text = "Pick icon";

            client.createMenuEntry(-1)
                    .setParam0(event.getActionParam0())
                    .setParam1(event.getActionParam1())
                    .setTarget(event.getTarget())
                    .setOption(text)
                    .setType(MenuAction.RUNELITE)
                    .setIdentifier(event.getIdentifier())
                    .setItemId(event.getItemId())
                    .onClick((e) -> {
                        panel.setSelectedItem(new BankItem(itemId, item.getItemQuantity(), item.getName()));
                        panel.reloadPickIcon();
                    });
        }
    }

    @Provides
    GimBankExConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(GimBankExConfig.class);
    }
}

package com.quyaz.gimbankex;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import net.runelite.api.Client;
import net.runelite.api.Item;
import net.runelite.client.game.ItemManager;
import okhttp3.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Inject;
import java.io.IOException;
import java.math.BigInteger;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

import static net.runelite.api.gameval.ItemID.BANK_FILLER;

public class GIMBankExClient {

    private static final Logger log = LoggerFactory.getLogger(GIMBankExClient.class);
    @Inject
    private GimBankExConfig config;

    @Inject
    private GimBankExPlugin plugin;

    @Inject
    private OkHttpClient okHttpClient;

    @Inject
    private Client client;

    @Inject
    private ItemManager itemManager;

    public void saveMessage(String data) {
        String url = config.api();
        String shared = config.messages();
        url = url + (url.endsWith("/") ? shared : ("/" + shared));

        String sender = "Not logged in";
        if (client != null && client.getLocalPlayer() != null) {
            sender = client.getLocalPlayer().getName();
        }

        JsonObject j = new JsonObject();
        j.addProperty("message", data);
        j.addProperty("sender", sender);
        if (plugin.getPanel().getSelectedItem().getItemId() != BANK_FILLER) {
            j.addProperty("item_id", plugin.getPanel().getSelectedItem().getItemId());
            j.addProperty("amount", plugin.getPanel().getSelectedItem().getAmount());
        }
        Request request = new Request.Builder()
                .url(url)
                .post(RequestBody.create(MediaType.parse("application/json; charset=utf-8"), j.toString()))
                .build();

        okHttpClient.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                log.debug(e.toString());
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                ResponseBody body = response.body();
                int code = response.code();
                if (code == 500) {
                    log.debug(body.string());
                } else {
                    getMessages(true, true);
                }
            }
        });

    }

    public void getMessages(boolean async, boolean refresh) {
        String url = config.api();
        String messages = config.messages();
        url = url + (url.endsWith("/") ? messages : ("/" + messages));
        Request request = new Request.Builder()
                .url(url)
                .get()
                .build();
        if (async) {
            okHttpClient.newCall(request).enqueue(new Callback() {
                @Override
                public void onFailure(Call call, IOException e) {
                    throw new RuntimeException(e);
                }

                @Override
                public void onResponse(Call call, Response response) throws IOException {
                    processMessagesResponse(response);
                    if (refresh) {
                        plugin.updateMessages();
                    }
                }
            });
        } else {
            try (Response response = okHttpClient.newCall(request).execute()) {
                processMessagesResponse(response);
                if (refresh) {
                    plugin.updateMessages();
                }
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }

    }

    protected void getBankTransactions(boolean refresh) {
        getBankTransactions(refresh, null);
    }

    protected void getBankTransactions(boolean refresh, String search) {
        String url = config.api();
        String shared = config.shared();
        url = url + (url.endsWith("/") ? shared : ("/" + shared));
        if (search != null && !search.isEmpty()) {
            url = url + "?search=" + search;
        }
        Request request = new Request.Builder()
                .url(url)
                .get()
                .build();
        okHttpClient.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                throw new RuntimeException(e);
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                processTransactionsResponse(response);
                if (refresh) {
                    plugin.updatePanel();
                }
            }
        });

    }

    private void processTransactionsResponse(Response response) throws IOException {
        ResponseBody body = response.body();
        JsonParser parser = new JsonParser();
        JsonElement jsonElement = parser.parse(body.string());
        body.close();
        JsonArray array = jsonElement.getAsJsonArray();
        ArrayList<ItemTransaction> temp = new ArrayList<ItemTransaction>();
        ItemTransaction it = null;
        for (JsonElement element : array) {
            JsonObject object = element.getAsJsonObject();
            if (it == null || (it.getCreated_at().compareTo(object.get("created_at").getAsString()) > 0)) {
                if (it != null) {
                    temp.add(it);
                }
                it = new ItemTransaction(object.get("user").getAsString(), object.get("created_at").getAsString(), new ArrayList<BankItem>());
            }
            it.getItems().add(new BankItem(object.get("item_id").getAsInt(), object.get("amount").getAsInt(), object.get("item").getAsString()));
        }
        temp.add(it);
        plugin.setTransactions(temp);
    }

    private void processMessagesResponse(Response response) throws IOException {
        ResponseBody body = response.body();
        JsonParser parser = new JsonParser();
        JsonElement jsonElement = parser.parse(body.string());
        body.close();
        JsonArray array = jsonElement.getAsJsonArray();
        ArrayList<GIMMessage> temp = new ArrayList<GIMMessage>();
        for (JsonElement element : array) {
            JsonObject object = element.getAsJsonObject();
            GIMMessage gm = new GIMMessage(
                    object.get("id").getAsBigInteger(),
                    object.get("message").getAsString(),
                    object.get("sender").getAsString(),
                    object.get("item_id").isJsonNull() ? null : BigInteger.valueOf(object.get("item_id").getAsLong()),
                    object.get("amount").isJsonNull() ? 1 : object.get("amount").getAsInt(),
                    object.get("created_at").getAsString());
            temp.add(gm);
        }
        plugin.setGimMessages(temp);
    }

    protected void storeBankTransaction(List<Item> diff) {
        String url = config.api();
        String shared = config.shared();
        url = url + (url.endsWith("/") ? shared : ("/" + shared));
        JsonArray j = new JsonArray();
        for (Item item : diff) {
            JsonObject temp = new JsonObject();
            temp.addProperty("user", client.getLocalPlayer().getName());
            temp.addProperty("item_id", item.getId());
            temp.addProperty("item", itemManager.getItemComposition(item.getId()).getMembersName());
            temp.addProperty("amount", -item.getQuantity());
            j.add(temp);
        }
        Request request = new Request.Builder()
                .url(url)
                .post(RequestBody.create(MediaType.parse("application/json; charset=utf-8"), j.toString()))
                .build();

        okHttpClient.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                log.debug(e.toString());
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                ResponseBody body = response.body();
                int code = response.code();
                if (code == 500) {
                    log.debug(body.string());
                }
                getBankTransactions(true);
            }
        });
    }

    public void removeMessage(GIMMessage message) {
        String url = config.api();
        String shared = config.messages();
        url = url + (url.endsWith("/") ? shared : ("/" + shared));
        url = url + "/" + message.getId();
        Request request = new Request.Builder()
                .url(url)
                .delete()
                .build();

        okHttpClient.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                log.debug(e.toString());
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                ResponseBody body = response.body();
                int code = response.code();
                if (code == 500) {
                    log.debug(body.string());
                } else {
                    getMessages(true, true);
                }
            }
        });

    }

    public String formatDateTime(String dateTime) {
        String pattern = "HH:mm d/M/y";
        if(!config.dateTimeFormat().toString().isEmpty()){
            pattern = config.dateTimeFormat().toString();
        }
        return LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern("u-M-d H:m:s")).format(DateTimeFormatter.ofPattern(pattern));
    }
}

package com.quyaz.gimbankex;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("GimBankEx")
public interface GimBankExConfig extends Config {
    @ConfigItem(
            keyName = "api_base",
            name = "API URL",
            description = "The server url",
            position = 1
    )
    default String api() {
        return "https://localhost";
    }

    @ConfigItem(
            keyName = "shared",
            name = "Shared endpoint",
            description = "Endpoint for shared get/post",
            position = 2
    )
    default String shared() {
        return "bank";
    }

    @ConfigItem(
            keyName = "messages",
            name = "Messages endpoint",
            description = "Endpoint for messages get/post",
            position = 3
    )
    default String messages() {
        return "messages";
    }

    @ConfigItem(
            keyName = "groupName",
            name = "Group name",
            description = "Group name",
            position = 4
    )
    default String groupName() {
        return "";
    }

    @ConfigItem(
            keyName = "token",
            name = "Token",
            description = "Token",
            position = 5
    )
    default String token() {
        return "";
    }

    @ConfigItem(
            keyName = "auto_open",
            name = "Open when opening bank",
            description = "Automatically open panel when opening shared",
            position = 6
    )
    default AutoOpen autoOpen() {
        return AutoOpen.NONE;
    }

    @ConfigItem(
            keyName = "datetime_format",
            name = "Datetime format",
            description = "Date time format",
            position = 7
    )
    default DateTimeFormat dateTimeFormat() {
        return DateTimeFormat.TIME_DAY_MONTH;
    }
    // "HH:mm d/M/y")

    @Getter
    @RequiredArgsConstructor
    enum AutoOpen {
        NONE("None"),
        BANK("Bank"),
        MESSAGES("Messages"),
        ;

        @Getter
        private final String group;

        @Override
        public String toString() {
            return group;
        }
    }

    @Getter
    @RequiredArgsConstructor
    enum DateTimeFormat {
        TIME_DAY_MONTH_YEAR("HH:mm dd/MM/y"),
        TIME_MONTH_DAY_YEAR("HH:mm MM/dd/y"),
        TIME_DAY_MONTH("HH:mm dd/MM"),
        TIME_MONTH_DAY("HH:mm MM/dd"),
        ;

        @Getter
        private final String group;

        @Override
        public String toString() {
            return group;
        }
    }
}

package com.quyaz.gimbankex;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

@Getter
@AllArgsConstructor
public class BankItem {
    int itemId;
    @Setter
    int amount;
    String item;
}

package com.quyaz.gimbankex;

import lombok.Getter;
import lombok.Setter;
import net.runelite.api.Player;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.DynamicGridLayout;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.IconTextField;
import net.runelite.client.ui.components.materialtabs.MaterialTab;
import net.runelite.client.ui.components.materialtabs.MaterialTabGroup;
import net.runelite.client.util.AsyncBufferedImage;
import net.runelite.api.Client;
import net.runelite.client.util.ImageUtil;


import javax.inject.Inject;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicBorders;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;

import static net.runelite.api.gameval.ItemID.BANK_FILLER;

public class GIMBankExPanel extends PluginPanel {

    private final ItemManager itemManager;
    @Getter
    private final MaterialTabGroup topTabGroup;
    private final BufferedImage removeIcon;
    @Getter
    private final MaterialTab bankTab;
    @Getter
    private final MaterialTab messagesTab;
    @Getter
    private IconTextField searchBar;

    @Inject
    private Client client;
    private JPanel bankTransactionsPanel;
    private final GIMBankExClient gimBankEx;
    private JPanel messagesListPanel;
    private JTextArea messageInput;
    @Getter
    @Setter
    private JLabel pickedIcon;
    @Getter
    @Setter
    private BankItem selectedItem;


    public GIMBankExPanel(GIMBankExClient client, ItemManager manager) {
        itemManager = manager;
        gimBankEx = client;

        setBorder(new EmptyBorder(5, 7, 0, 7));
        setBackground(ColorScheme.DARK_GRAY_COLOR);
        setLayout(new GridBagLayout());

        GridBagConstraints gc = new GridBagConstraints();
        gc.fill = GridBagConstraints.HORIZONTAL;
        gc.gridx = 0;
        gc.gridy = 0;
        gc.weightx = 1;
        gc.weighty = 0;
        gc.insets = new Insets(0, 0, 7, 0);

        JPanel topDisplay = new JPanel();
        topTabGroup = new MaterialTabGroup(topDisplay);
        bankTab = new MaterialTab("Bank", topTabGroup, createbankPanel());
        messagesTab = new MaterialTab("Messages", topTabGroup, createMessagesPanel());

        topTabGroup.setBorder(new EmptyBorder(0, 0, 0, 0));
        topTabGroup.addTab(bankTab);
        topTabGroup.addTab(messagesTab);
        topTabGroup.select(messagesTab);

        add(topTabGroup, gc);
        gc.gridy++;
        add(topDisplay, gc);
        removeIcon = ImageUtil.loadImageResource(getClass(), "/remove.png");
        clearSelectedItem();
    }

    private void clearSelectedItem() {
        selectedItem = new BankItem(BANK_FILLER, 1, "BANK FILLER");
    }

    private JComponent createMessagesPanel() {
        JPanel messagesPanel = new JPanel();
        messagesPanel.setLayout(new BorderLayout());
        messagesPanel.setBorder(new EmptyBorder(2, 0, 2, 0));

        messagesListPanel = new JPanel();
        messagesListPanel.setLayout(new DynamicGridLayout(0, 1, 0, 5));
        messagesPanel.add(messagesListPanel);
        messagesListPanel.setBackground(ColorScheme.DARK_GRAY_COLOR);

        JScrollPane scrollPane = new JScrollPane(messagesListPanel);
        scrollPane.setHorizontalScrollBarPolicy(31);
        JPanel wrappedBankPanel = new JPanel();
        wrappedBankPanel.setPreferredSize(new Dimension(242, 0));
        wrappedBankPanel.setLayout(new BorderLayout());
        wrappedBankPanel.add(scrollPane, "Center");

        BufferedImage refreshIcon = ImageUtil.loadImageResource(getClass(), "/Refresh.png");
        BufferedImage sendIcon = ImageUtil.loadImageResource(getClass(), "/send.png");
        JButton refreshButton = new JButton("Refresh");
        refreshButton.setIcon(new ImageIcon(refreshIcon));
        refreshButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                messageInput.setText("");
                gimBankEx.getMessages(false, true);
            }
        });

        JButton sendButton = new JButton("Send");
        sendButton.setIcon(new ImageIcon(sendIcon));
        sendButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                gimBankEx.saveMessage(messageInput.getText());
                messageInput.setText("");
            }
        });

        pickedIcon = new JLabel();
        pickedIcon.setVerticalAlignment(SwingConstants.CENTER);
        pickedIcon.setHorizontalAlignment(SwingConstants.CENTER);
        AsyncBufferedImage itemImage = null;
        if (selectedItem == null) {
            itemImage = itemManager.getImage(BANK_FILLER, 1, false);
        } else {
            itemImage = itemManager.getImage(selectedItem.getItemId(), selectedItem.getAmount(), selectedItem.getAmount() > 1);
        }
        itemImage.addTo(pickedIcon);
        BufferedImage clearIcon = ImageUtil.loadImageResource(getClass(), "/remove.png");
        JButton clearButton = new JButton();
        clearButton.setIcon(new ImageIcon(clearIcon));
        clearButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                clearSelectedItem();
                reloadPickIcon();
            }
        });

        JPanel pickIcon = new JPanel();
        pickIcon.setLayout(new DynamicGridLayout(1, 3));
        pickIcon.setBorder(new EmptyBorder(2, 2, 2, 2));
        pickIcon.setBackground(ColorScheme.DARK_GRAY_COLOR);
        pickIcon.add(pickedIcon);
        pickIcon.add(clearButton);
        pickIcon.addMouseWheelListener(new MouseWheelListener() {
            @Override
            public void mouseWheelMoved(MouseWheelEvent e) {
                BankItem mySelectedItem = getSelectedItem();
                if (mySelectedItem.getItemId() != BANK_FILLER) {
                    mySelectedItem.setAmount(mySelectedItem.getAmount() - e.getWheelRotation());
                    selectedItem = mySelectedItem;
                    reloadPickIcon();
                }
            }
        });

        JPanel buttonsPanel = new JPanel();
        buttonsPanel.setLayout(new DynamicGridLayout(1, 2));
        buttonsPanel.setBorder(new EmptyBorder(2, 2, 2, 2));
        buttonsPanel.setBackground(ColorScheme.DARK_GRAY_COLOR);
        buttonsPanel.add(sendButton);
        buttonsPanel.add(pickIcon);

        JPanel messageInputPanel = new JPanel();
        messageInputPanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        messageInputPanel.setLayout(new DynamicGridLayout(3, 1));
        messageInput = new JTextArea();
        messageInput.setToolTipText("Send message..");
        messageInput.setBackground(ColorScheme.DARK_GRAY_COLOR);
        messageInput.setBorder(new BasicBorders.FieldBorder(ColorScheme.DARKER_GRAY_COLOR, ColorScheme.DARKER_GRAY_COLOR, ColorScheme.DARKER_GRAY_COLOR, ColorScheme.DARKER_GRAY_COLOR));
        messageInput.setLineWrap(true);
        messageInput.setTabSize(2);
        messageInput.setMinimumSize(new Dimension(PANEL_WIDTH, 100));
        messageInput.setPreferredSize(new Dimension(PANEL_WIDTH, 100));
        messageInput.setAutoscrolls(true);
        messageInputPanel.add(messageInput);
        messageInputPanel.add(buttonsPanel);
        messageInputPanel.add(refreshButton);

        messagesPanel.add(messageInputPanel, "North");
        messagesPanel.add(messagesListPanel, "Center");
        return messagesPanel;

    }

    protected void reloadPickIcon() {
        pickedIcon.removeAll();
        pickedIcon.setBackground(ColorScheme.BRAND_ORANGE);
        AsyncBufferedImage itemImage = itemManager.getImage(selectedItem.getItemId(), selectedItem.getAmount(), selectedItem.getAmount() > 1);
        itemImage.addTo(pickedIcon);
        pickedIcon.revalidate();
    }

    private JPanel createbankPanel() {
        JPanel bankPanel = new JPanel();
        bankPanel.setLayout(new BorderLayout());
        bankPanel.setBorder(new EmptyBorder(0, 0, 0, 0));

        bankTransactionsPanel = new JPanel();
        bankTransactionsPanel.setLayout(new DynamicGridLayout(0, 1));
        bankPanel.add(bankTransactionsPanel);
        bankTransactionsPanel.setBackground(ColorScheme.DARK_GRAY_COLOR);

        JScrollPane scrollPane = new JScrollPane(bankTransactionsPanel);
        scrollPane.setHorizontalScrollBarPolicy(31);
        JPanel wrappedBankPanel = new JPanel();
        wrappedBankPanel.setPreferredSize(new Dimension(242, 0));
        wrappedBankPanel.setLayout(new BorderLayout());
        wrappedBankPanel.add(scrollPane, "Center");

        searchBar = new IconTextField();
        searchBar.setIcon(IconTextField.Icon.SEARCH);
        searchBar.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH - 20, 30));
        searchBar.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        searchBar.setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
        searchBar.setMinimumSize(new Dimension(0, 30));
        searchBar.addActionListener(e -> lookupTransactions());
        searchBar.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() != 2) {
                    return;
                }
                lookupTransactions();
            }
        });
        searchBar.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyPressed(KeyEvent e) {
            }

            @Override
            public void keyReleased(KeyEvent e) {
                lookupTransactions(searchBar.getText());
            }
        });

        searchBar.addClearListener(() ->
        {
            searchBar.setIcon(IconTextField.Icon.SEARCH);
            searchBar.setEditable(true);
            lookupTransactions();
        });
        bankPanel.add(searchBar, "North");
        bankPanel.add(bankTransactionsPanel, "Center");
        JButton loadMorePanel = new JButton();
        loadMorePanel.setIcon(new ImageIcon(ImageUtil.loadImageResource(getClass(), "/more.png")));
        loadMorePanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                gimBankEx.getBankTransactions(true, searchBar.getText());
            }
        });

        bankPanel.add(loadMorePanel, BorderLayout.SOUTH);
        return bankPanel;
    }

    private void lookupTransactions() {
        if (searchBar.getText().isEmpty()) {
            if (client == null) {
                gimBankEx.getBankTransactions(true);
                return;
            }
            Player localPlayer = client.getLocalPlayer();
            searchBar.setText(localPlayer.getName());
        }
        gimBankEx.getBankTransactions(true, searchBar.getText());
    }

    private void lookupTransactions(String search) {
        if (!search.equals(searchBar.getText())) {
            return;
        }
        if (searchBar.getText().isEmpty()) {
            if (client == null) {
                gimBankEx.getBankTransactions(true);
                return;
            }
            Player localPlayer = client.getLocalPlayer();
            searchBar.setText(localPlayer.getName());
        }
        gimBankEx.getBankTransactions(true, searchBar.getText());
    }

    public void refreshTransactions(ArrayList<ItemTransaction> transactions) {
        bankTransactionsPanel.removeAll();
        if (transactions != null && !transactions.isEmpty()) {
            for (ItemTransaction transaction : transactions) {
                bankTransactionsPanel.add(createTransactionPanel(transaction));
            }
            bankTransactionsPanel.revalidate();
        }
    }

    public void refreshMessages(ArrayList<GIMMessage> messages) {
        messagesListPanel.removeAll();
        if (messages != null && !messages.isEmpty()) {
            for (GIMMessage mess : messages) {
                messagesListPanel.add(createMessage(mess));
            }
            messagesListPanel.revalidate();
        }
    }

    private JPanel createTransactionPanel(ItemTransaction transaction) {
        if (transaction == null) {
            return new JPanel();
        }
        transaction.setHidden(false);
        JPanel transactionPanel = new JPanel();
        transactionPanel.setLayout(new BorderLayout());
        transactionPanel.setBorder(new EmptyBorder(2, 2, 2, 2));

        JPanel textContainer = new JPanel();
        textContainer.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        textContainer.setLayout(new DynamicGridLayout());
        textContainer.setBorder(new EmptyBorder(5, 7, 5, 7));

        JLabel titleLabel = new JLabel(transaction.getUser());
        titleLabel.setForeground(Color.WHITE);
        titleLabel.setFont(FontManager.getRunescapeSmallFont());

        JLabel statusLabel = new JLabel(gimBankEx.formatDateTime(transaction.getCreated_at()));
        statusLabel.setForeground(Color.GRAY);
        statusLabel.setFont(FontManager.getRunescapeSmallFont());

        textContainer.add(titleLabel, BorderLayout.LINE_START);
        textContainer.add(statusLabel, BorderLayout.CENTER);
        textContainer.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                transaction.setHidden(!transaction.isHidden());
                e.getComponent().getParent().getComponent(1).setVisible(!transaction.isHidden());

            }
        });

        JPanel itemsContainer = new JPanel();
//        itemsContainer.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        List<BankItem> items = transaction.getItems();
        final int rowSize = ((items.size() % 5 == 0) ? 0 : 1) + items.size() / 5;

        itemsContainer.setLayout(new GridLayout(rowSize, 5, 1, 1));
        itemsContainer.setBorder(new EmptyBorder(5, 5, 5, 5));
        for (BankItem item : transaction.getItems()) {
            final JPanel slotContainer = new JPanel();
            if (item.getAmount() > 0) {
                slotContainer.setBackground(new Color(26, 96, 39));
            } else {
                slotContainer.setBackground(new Color(144, 44, 44, 180));
            }

            final JLabel imageLabel = new JLabel();
//            imageLabel.setToolTipText(buildToolTip(item));
            imageLabel.setVerticalAlignment(SwingConstants.CENTER);
            imageLabel.setHorizontalAlignment(SwingConstants.CENTER);

            AsyncBufferedImage itemImage = itemManager.getImage(item.getItemId(), item.getAmount(), item.getAmount() > 1 || item.getAmount() < -1);
            itemImage.addTo(imageLabel);
            slotContainer.add(imageLabel);

            itemsContainer.add(slotContainer);
        }
        for (int i = 0; i < (5 * rowSize - transaction.getItems().size()); i++) {
            final JPanel slotContainer = new JPanel();
            slotContainer.setBackground(ColorScheme.DARKER_GRAY_COLOR);
            itemsContainer.add(slotContainer);
        }

        itemsContainer.revalidate();

        transactionPanel.add(textContainer, BorderLayout.NORTH);
        if (!transaction.isHidden()) {
            transactionPanel.add(itemsContainer, BorderLayout.CENTER);
        }

        transactionPanel.revalidate();
        return transactionPanel;
    }

    private JPanel createMessage(GIMMessage message) {

        JPanel messagePanel = new JPanel();
        messagePanel.setLayout(new DynamicGridLayout(2, 1, 2, 2));
        messagePanel.setBorder(new EmptyBorder(2, 2, 2, 2));
        messagePanel.setBackground(ColorScheme.DARKER_GRAY_COLOR);

        JPanel textContainer = new JPanel();
        textContainer.setLayout(new DynamicGridLayout(1, 3));
        textContainer.setBorder(new EmptyBorder(5, 5, 5, 5));

        JLabel titleLabel = new JLabel(message.getSender());
        titleLabel.setForeground(Color.WHITE);
        titleLabel.setFont(FontManager.getRunescapeSmallFont());

        JLabel statusLabel = new JLabel(gimBankEx.formatDateTime(message.getCreated_at()));
        statusLabel.setForeground(Color.GRAY);
        statusLabel.setFont(FontManager.getRunescapeSmallFont());

        JLabel removeLabel = new JLabel();
        removeLabel.setIcon(new ImageIcon(removeIcon));
        removeLabel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                gimBankEx.removeMessage(message);
            }
        });


        textContainer.add(titleLabel, BorderLayout.LINE_START);
        textContainer.add(statusLabel, BorderLayout.LINE_END);
        textContainer.add(removeLabel, BorderLayout.AFTER_LINE_ENDS);

        JPanel messageWrapper = new JPanel();
        if (message.getItem_id() != null) {
            messageWrapper.setLayout(new DynamicGridLayout(1, 2));
            messageWrapper.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        }
        JTextArea myMessage = new JTextArea(message.getMessage());
        JScrollPane sb = new JScrollPane(myMessage);
        myMessage.setBackground(ColorScheme.DARKER_GRAY_COLOR);


        myMessage.setLineWrap(true);
        myMessage.setWrapStyleWord(true);
        myMessage.setOpaque(false);
        myMessage.setEditable(false);
        myMessage.setFocusable(false);
        myMessage.setBorder(new EmptyBorder(0, 0, 0, 0));

        myMessage.setEditable(false);


        messagePanel.add(textContainer);
        if (message.getItem_id() != null) {
            final JLabel imageLabel = new JLabel();
//            imageLabel.setToolTipText(buildToolTip(item));
            imageLabel.setVerticalAlignment(SwingConstants.CENTER);
            imageLabel.setHorizontalAlignment(SwingConstants.CENTER);

            AsyncBufferedImage itemImage = itemManager.getImage(message.getItem_id().intValue(), message.getAmount(), message.getAmount() > 1);
            itemImage.addTo(imageLabel);
            messageWrapper.add(imageLabel);
            messageWrapper.add(myMessage);
            messagePanel.add(messageWrapper);
        } else {
            messagePanel.add(myMessage);
        }

        messagePanel.revalidate();
        return messagePanel;
    }
}

package com.quyaz.gimbankex;

import lombok.Value;

import java.math.BigInteger;

@Value
public class GIMMessage {
    private BigInteger id;
    private String message;
    private String sender;
    private BigInteger item_id;
    private int amount;
    private String created_at;
}

package com.quyaz.gimbankex;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class GimBankExPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(GimBankExPlugin.class);
		RuneLite.main(args);
	}
}
