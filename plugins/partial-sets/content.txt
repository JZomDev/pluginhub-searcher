package com.PartialSets;

import net.runelite.api.ItemContainer;
import net.runelite.client.game.ItemManager;

public class AssociatedSlot extends ItemSlot
{
    AssociatedSlot(PartialSetsConfig aConfig, Integer... aItems)
    {
        super(aConfig, aItems);
        //NonWarningAlternatives(aItems);
    }

    @Override
    EquipStatus IsEquipped(ItemContainer aEquipment, ItemManager aManager)
    {
        if (myConfig.Associated())
            return super.IsEquipped(aEquipment, aManager);

        return EquipStatus.NotRequired;
    }

    @Override
    public String toColoredString(ItemManager aItemManager)
    {
        if (myConfig.Associated())
            return super.toColoredString(aItemManager);

        return "";
    }
}

package com.PartialSets;

import net.runelite.api.ItemContainer;
import net.runelite.client.game.ItemManager;

import java.util.Arrays;
import java.util.List;

public class EquipmentSet {

    public ItemSlot[] mySlots;
    public int myIconId;
    public String myName;

    public int myLastCount;
    public int myFullCount;

    EquipmentSet(String aName, int aIconId, ItemSlot... slots)
    {
        mySlots = slots;
        myIconId = aIconId;
        myName = aName;
    }

    enum CheckResult
    {
        NONE,
        PARTIAL,
        FULL
    }

    CheckResult Check(ItemContainer aEquipment, ItemManager aItemManager)
    {
        int count = 0;
        boolean shouldShow = false;

        myFullCount = mySlots.length;

        for (ItemSlot slot : mySlots) {
            switch (slot.IsEquipped(aEquipment, aItemManager))
            {
                case NotRequired:
                    myFullCount--;
                    break;
                case NotPresent:
                    break;
                case EquippedNoWarning:
                    count++;
                    break;
                case Equipped:
                    count++;
                    shouldShow = true;
                    break;
            }
        }

        myLastCount = count;

        if (shouldShow)
        {
            if (count == myFullCount)
                return  CheckResult.FULL;

            return CheckResult.PARTIAL;
        }

        return CheckResult.NONE;
    }
}

package com.PartialSets;

import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.client.game.ItemManager;
import net.runelite.client.util.ColorUtil;

import java.awt.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Stream;

public class ItemSlot {

    enum EquipStatus
    {
        NotPresent,
        Equipped,
        EquippedNoWarning,
        NotRequired
    }

    enum Mode
    {
        Id,
        Name
    }

    Mode myMode;

    PartialSetsConfig myConfig;
    Integer myLastEquipped = -1;
    String myEmptyName = "";

    Integer[] myItems;
    Integer[] myNonWarning = new Integer[]{};

    ItemSlot(PartialSetsConfig aConfig, Integer... aItems)
    {
        myMode = Mode.Id;

        myConfig = aConfig;
        myItems = aItems;

        assert myItems.length > 0;
    }

    ItemSlot(PartialSetsConfig aConfig, String aName)
    {
        myMode = Mode.Name;

        myConfig = aConfig;
        myEmptyName = aName;
        myItems = new Integer[]{1}; //This should never be visible, here as a safeguard
    }

    // Some sets (Shayzien 5) have items (slayer helm) which can be used for the set bonus
    // but that should not raise a warning when used on their own
    ItemSlot NonWarningAlternatives(Integer... aItems)
    {
        myNonWarning = aItems;

        assert myNonWarning.length > 0;

        return this;
    }

    public String toColoredString(ItemManager aItemManager)
    {
        if (myLastEquipped == -1)
        {
            if (myEmptyName.equals(""))
                myEmptyName = aItemManager.getItemComposition(myItems[0]).getMembersName();

            if (myItems.length > 1)
            {
                return "</br>" + ColorUtil.wrapWithColorTag(myEmptyName + "(+" + (myItems.length - 1) + ")", myConfig.UnequippedTextColor());
            }
            else
            {
                return "</br>" + ColorUtil.wrapWithColorTag(myEmptyName, myConfig.UnequippedTextColor());
            }
        }
        else
        {
            return "</br>" + ColorUtil.wrapWithColorTag(aItemManager.getItemComposition(myLastEquipped).getMembersName(), myConfig.EquippedTextColor());
        }
    }

    EquipStatus IsEquipped(ItemContainer aEquipment, ItemManager aItemManager)
    {
        switch (myMode)
        {
            case Id:
                {
                    Optional<Integer> equipped = Arrays.stream(myItems)
                            .filter(item ->  aEquipment.contains(item))
                            .findFirst();

                    if (equipped.isPresent())
                    {
                        myLastEquipped = equipped.get();
                        return EquipStatus.Equipped;
                    }
                }
                {
                    Optional<Integer> equipped = Arrays.stream(myNonWarning)
                            .filter(item ->  aEquipment.contains(item))
                            .findFirst();

                    if (equipped.isPresent())
                    {
                        myLastEquipped = equipped.get();
                        return EquipStatus.EquippedNoWarning;
                    }
                }

                myLastEquipped = -1;
                return EquipStatus.NotPresent;

            case Name:
                {
                    Optional<Item> equipped = Arrays.stream(aEquipment.getItems())
                            .filter(item -> myEmptyName.equals(aItemManager.getItemComposition(item.getId()).getName()))
                            .findFirst();

                    if (equipped.isPresent())
                    {
                        myLastEquipped = equipped.get().getId();
                        return EquipStatus.Equipped;
                    }
                }
                return EquipStatus.NotPresent;
        }

        return EquipStatus.NotRequired;
    }
}

package com.PartialSets;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

import java.awt.*;

@ConfigGroup("partial_sets")
public interface PartialSetsConfig extends Config
{
	@ConfigSection(
			name = "Appearance",
			description = "How to show things",
			position = 0
	)
	String appearance = "appearance";
	@ConfigSection(
			name = "Misc",
			description = "miscellaneous sets",
			position = 1,
			closedByDefault = true
	)
	String misc = "misc";
	@ConfigSection(
			name = "Skilling",
			description = "Skilling sets",
			position = 2,
			closedByDefault = true
	)
	String skilling = "skilling";
	@ConfigSection(
			name = "Moons",
			description = "Sets from Moons of peril",
			position = 3,
			closedByDefault = true
	)
	String moons = "moons";
	@ConfigSection(
			name = "Barrows",
			description = "Sets from Barrows",
			position = 4,
			closedByDefault = true
	)
	String barrows = "barrows";

	@ConfigItem(
			keyName = "associated_items",
			name = "Associated items",
			description = "Include associated items in sets"
	)
	default boolean Associated() { return false; }

	@ConfigItem(
			keyName = "appearance_text_color",
			name = "Text Color",
			description = "What color to use for text",
			section = appearance
	)
	default Color TextColor() { return Color.RED; }
	@ConfigItem(
			keyName = "appearance_text_color_equipped",
			name = "Equipped text Color",
			description = "What color to use for equipped items",
			section = appearance
	)
	default Color EquippedTextColor() { return Color.GREEN; }
	@ConfigItem(
			keyName = "appearance_text_color_unequipped",
			name = "Unequipped text Color",
			description = "What color to use for unequipped items",
			section = appearance
	)
	default Color UnequippedTextColor() { return Color.RED; }
	@ConfigItem(
			keyName = "appearance_text_color_set",
			name = "Set text Color",
			description = "What color to use for equipment set names",
			section = appearance
	)
	default Color SetTextColor() { return Color.ORANGE; }

	// Misc
	@ConfigItem(
			keyName = "set_void_knight",
			name = "Void Knight",
			description = "Track 'Void Knight'",
			section = misc
	)
	default boolean VoidKnight() { return true; }
	@ConfigItem(
			keyName = "set_obsidian",
			name = "Obsidian",
			description = "Track 'Obsidian'",
			section = misc
	)
	default boolean Obsidian() { return true; }
	@ConfigItem(
			keyName = "set_virtus",
			name = "Virtus",
			description = "Track 'Virtus'",
			section = misc
	)
	default boolean Virtus() { return true; }
	@ConfigItem(
			keyName = "set_swampbark",
			name = "Swampbark",
			description = "Track 'Swampbark'",
			section = misc
	)
	default boolean Swampbark() { return true; }
	@ConfigItem(
			keyName = "set_bloodbark",
			name = "Bloodbark",
			description = "Track 'Bloodbark'",
			section = misc
	)
	default boolean Bloodbark() { return true; }
	@ConfigItem(
			keyName = "set_inquisitor",
			name = "Inquisitor",
			description = "Track 'Inquisitor'",
			section = misc
	)
	default boolean Inquisitor() { return true; }
	@ConfigItem(
			keyName = "set_crystal",
			name = "Crystal",
			description = "Track 'Crystal'",
			section = misc
	)
	default boolean Crystal() { return true; }
	@ConfigItem(
			keyName = "set_shayzien",
			name = "Shayzien",
			description = "Track 'Shayzien'",
			section = misc
	)
	default boolean Shayzien() { return true; }
	@ConfigItem(
			keyName = "set_justicar",
			name = "Justicar",
			description = "Track 'Justicar'",
			section = misc
	)
	default boolean Justicar() { return true; }
	@ConfigItem(
			keyName = "set_graceful",
			name = "Graceful",
			description = "Track 'Graceful'",
			section = misc
	)
	default boolean Graceful() { return true; }
	@ConfigItem(
			keyName = "set_gauntlet",
			name = "Gauntlet",
			description = "Track 'Gauntlet'",
			section = misc
	)
	default boolean Gauntlet() { return true; }

	// Skilling
	@ConfigItem(
			keyName = "set_farming",
			name = "Farming",
			description = "Track 'Farming'",
			section = skilling
	)
	default boolean Farming() { return true; }
	@ConfigItem(
			keyName = "set_rogue",
			name = "Rogue",
			description = "Track 'Rogue'",
			section = skilling
	)
	default boolean Rogue() { return true; }
	@ConfigItem(
			keyName = "set_hunter",
			name = "Hunter",
			description = "Track 'Hunter'",
			section = skilling
	)
	default boolean Hunter() { return true; }
	@ConfigItem(
			keyName = "set_lumberjack",
			name = "Lumberjack",
			description = "Track 'Lumberjack'",
			section = skilling
	)
	default boolean Lumberjack() { return true; }
	@ConfigItem(
			keyName = "set_carpenter",
			name = "Carpenter",
			description = "Track 'Carpenter'",
			section = skilling
	)
	default boolean Carpenter() { return true; }
	@ConfigItem(
			keyName = "set_runecrafting",
			name = "Raiments of the eye",
			description = "Track 'Raiments of the eye'",
			section = skilling
	)
	default boolean Runecrafting() { return true; }

	// Moons
	@ConfigItem(
			keyName = "set_bloodmoon",
			name = "BloodMoon",
			description = "Track 'BloodMoon'",
			section = moons
	)
	default boolean BloodMoon() { return true; }
	@ConfigItem(
			keyName = "set_bluemoon",
			name = "BlueMoon",
			description = "Track 'BlueMoon'",
			section = moons
	)
	default boolean BlueMoon() { return true; }
	@ConfigItem(
			keyName = "set_eclipsemoon",
			name = "EclipseMoon",
			description = "Track 'EclipseMoon'",
			section = moons
	)
	default boolean EclipseMoon() { return true; }

	// Barrows
	@ConfigItem(
			keyName = "set_ahrims",
			name = "Ahrims",
			description = "Track 'Ahrims'",
			section = barrows
	)
	default boolean Ahrims() { return true; }
	@ConfigItem(
			keyName = "set_dharoks",
			name = "Dharoks",
			description = "Track 'Dharoks'",
			section = barrows
	)
	default boolean Dharoks() { return true; }
	@ConfigItem(
			keyName = "set_guthans",
			name = "Guthans",
			description = "Track 'Guthans'",
			section = barrows
	)
	default boolean Guthans() { return true; }
	@ConfigItem(
			keyName = "set_karils",
			name = "Karils",
			description = "Track 'Karils'",
			section = barrows
	)
	default boolean Karils() { return true; }
	@ConfigItem(
			keyName = "set_torags",
			name = "Torags",
			description = "Track 'Torags'",
			section = barrows
	)
	default boolean Torags() { return true; }
	@ConfigItem(
			keyName = "set_veracs",
			name = "Veracs",
			description = "Track 'Veracs'",
			section = barrows
	)
	default boolean Veracs() { return true; }
}

package com.PartialSets.overlay;

import com.PartialSets.*;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.infobox.InfoBox;
import net.runelite.client.util.ColorUtil;

import java.awt.*;

public class EquipmentSetInfoBox extends InfoBox {

    EquipmentSet mySet;
    PartialSetsConfig myConfig;

    public EquipmentSetInfoBox(PartialSetsPlugin aPlugin, ItemManager aItemManager, PartialSetsConfig aConfig, EquipmentSet aSet)
    {
        super(aItemManager.getImage(aSet.myIconId), aPlugin);
        mySet = aSet;
        myConfig = aConfig;

        String tooltip = "Partial " + ColorUtil.wrapWithColorTag(mySet.myName, myConfig.SetTextColor()) + " equipped";

        for (ItemSlot slot : mySet.mySlots) {
            tooltip += slot.toColoredString(aItemManager);
        }

        setTooltip(tooltip);
    }

    @Override
    public String getText() {
        return mySet.myLastCount + "/" + mySet.myFullCount;
    }

    @Override
    public Color getTextColor() {
        return myConfig.TextColor();
    }
}

package com.PartialSets;

import com.PartialSets.overlay.EquipmentSetInfoBox;
import com.google.inject.Provides;
import javax.inject.Inject;
import javax.swing.*;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.infobox.InfoBox;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@Slf4j
@PluginDescriptor(
	name = "Partial Sets"
)
public class PartialSetsPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private PartialSetsConfig myConfig;
	@Inject
	private InfoBoxManager infoBoxes;
	@Inject
	private ItemManager myItemManager;
	@Inject
	private ClientThread myClientThread;

	List<EquipmentSet> mySets;

	@Override
	protected void startUp() throws Exception
	{
		log.info("PartialSets started!");
		Setup();
	}

	@Override
	protected void shutDown() throws Exception
	{
		log.info("PartialSets stopped!");
		mySets = null;
		Reset();
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if (!event.getGroup().equals("partial_sets"))
			return;

		Reset();
		myClientThread.invokeLater(() ->
		{
			Setup();
			Check(client.getItemContainer(InventoryID.EQUIPMENT.getId()));
		});
	}

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged ev)
	{
		if (ev.getContainerId() != InventoryID.EQUIPMENT.getId())
			return;

		Check(ev.getItemContainer());
	}

	private void Check(ItemContainer aEquipment)
	{
		Reset();
		
		for (EquipmentSet set : mySets) {
			switch (set.Check(aEquipment, myItemManager))
			{
				case PARTIAL:
					PartialSetEquipped(set);
					break;
				default:
					break;
			}
		}
	}

	@Provides
	PartialSetsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(PartialSetsConfig.class);
	}

	void PartialSetEquipped(EquipmentSet aSet)
	{
		infoBoxes.addInfoBox(new EquipmentSetInfoBox(this, myItemManager, myConfig, aSet));
	}

	void Setup()
	{
		mySets = new ArrayList<>();

		if (myConfig.VoidKnight()) {
			mySets.add(new EquipmentSet("Void Knight Equipment", ItemID.ELITE_VOID_TOP,
					new ItemSlot(myConfig,
								ItemID.VOID_MELEE_HELM, ItemID.VOID_MELEE_HELM_L, ItemID.VOID_MELEE_HELM_LOR, ItemID.VOID_MELEE_HELM_OR,
								ItemID.VOID_MAGE_HELM, ItemID.VOID_MAGE_HELM_L, ItemID.VOID_MAGE_HELM_LOR, ItemID.VOID_MAGE_HELM_OR,
								ItemID.VOID_RANGER_HELM, ItemID.VOID_RANGER_HELM_L, ItemID.VOID_RANGER_HELM_LOR, ItemID.VOID_RANGER_HELM_OR),
					new ItemSlot(myConfig,
								ItemID.ELITE_VOID_TOP, ItemID.ELITE_VOID_TOP_L, ItemID.ELITE_VOID_TOP_LOR, ItemID.ELITE_VOID_TOP_OR,
								ItemID.VOID_KNIGHT_TOP, ItemID.VOID_KNIGHT_TOP_L, ItemID.VOID_KNIGHT_TOP_LOR, ItemID.VOID_KNIGHT_TOP_OR),
					new ItemSlot(myConfig,
								ItemID.ELITE_VOID_ROBE, ItemID.ELITE_VOID_ROBE_L, ItemID.ELITE_VOID_ROBE_LOR, ItemID.ELITE_VOID_ROBE_OR,
								ItemID.VOID_KNIGHT_ROBE, ItemID.VOID_KNIGHT_ROBE_L, ItemID.VOID_KNIGHT_ROBE_LOR, ItemID.VOID_KNIGHT_ROBE_OR),
					new ItemSlot(myConfig,
								ItemID.VOID_KNIGHT_GLOVES, ItemID.VOID_KNIGHT_GLOVES_L, ItemID.VOID_KNIGHT_GLOVES_LOR, ItemID.VOID_KNIGHT_GLOVES_OR),
					new AssociatedSlot(myConfig,
								ItemID.VOID_KNIGHT_MACE, ItemID.VOID_KNIGHT_MACE_L)
			));
		}

		if (myConfig.Obsidian()) {
			mySets.add(new EquipmentSet("Obsidian", ItemID.OBSIDIAN_HELMET,
					new ItemSlot(myConfig, ItemID.OBSIDIAN_HELMET),
					new ItemSlot(myConfig, ItemID.OBSIDIAN_PLATEBODY),
					new ItemSlot(myConfig, ItemID.OBSIDIAN_PLATELEGS),
					new AssociatedSlot(myConfig, ItemID.BERSERKER_NECKLACE, ItemID.BERSERKER_NECKLACE_OR),
					new AssociatedSlot(myConfig,
							ItemID.TOKTZKETXIL,
							ItemID.TOKTZXILAK,
							ItemID.TOKTZXILAK_20554,
							ItemID.TZHAARKETEM,
							ItemID.TZHAARKETOM,
							ItemID.TZHAARKETOM_T,
							ItemID.TOKTZKETXIL,
							ItemID.TOKTZMEJTAL)
			));
		}

		if (myConfig.Farming()) {
			mySets.add(new EquipmentSet("Farming Set", ItemID.FARMERS_STRAWHAT,
					new ItemSlot(myConfig, ItemID.FARMERS_STRAWHAT, ItemID.FARMERS_STRAWHAT_13647),
					new ItemSlot(myConfig, ItemID.FARMERS_JACKET, ItemID.FARMERS_SHIRT),
					new ItemSlot(myConfig, ItemID.FARMERS_BORO_TROUSERS, ItemID.FARMERS_BORO_TROUSERS_13641),
					new ItemSlot(myConfig, ItemID.FARMERS_BOOTS, ItemID.FARMERS_BOOTS_13645),
					new AssociatedSlot(myConfig, ItemID.MAGIC_SECATEURS)
			));
		}

		if (myConfig.Rogue()) {
			mySets.add(new EquipmentSet("Rogue Equipment", ItemID.ROGUE_MASK,
					new ItemSlot(myConfig, ItemID.ROGUE_MASK),
					new ItemSlot(myConfig, ItemID.ROGUE_TOP),
					new ItemSlot(myConfig, ItemID.ROGUE_GLOVES),
					new ItemSlot(myConfig, ItemID.ROGUE_TROUSERS),
					new ItemSlot(myConfig, ItemID.ROGUE_BOOTS)
			));
		}

		if (myConfig.Hunter()) {
			mySets.add(new EquipmentSet("Hunter Outfit", ItemID.GUILD_HUNTER_HEADWEAR,
					new ItemSlot(myConfig, ItemID.GUILD_HUNTER_HEADWEAR),
					new ItemSlot(myConfig, ItemID.GUILD_HUNTER_TOP),
					new ItemSlot(myConfig, ItemID.GUILD_HUNTER_LEGS),
					new ItemSlot(myConfig, ItemID.GUILD_HUNTER_BOOTS)
			));
		}
		if (myConfig.Lumberjack()) {
			mySets.add(new EquipmentSet("Lumberjack Outfit", ItemID.LUMBERJACK_TOP,
					new ItemSlot(myConfig, ItemID.LUMBERJACK_HAT),
					new ItemSlot(myConfig, ItemID.LUMBERJACK_TOP),
					new ItemSlot(myConfig, ItemID.LUMBERJACK_LEGS),
					new ItemSlot(myConfig, ItemID.LUMBERJACK_BOOTS)
			));
		}
		if (myConfig.Carpenter()) {
			mySets.add(new EquipmentSet("Carpenters Outfit", ItemID.CARPENTERS_HELMET,
					new ItemSlot(myConfig, ItemID.CARPENTERS_HELMET),
					new ItemSlot(myConfig, ItemID.CARPENTERS_SHIRT),
					new ItemSlot(myConfig, ItemID.CARPENTERS_TROUSERS),
					new ItemSlot(myConfig, ItemID.CARPENTERS_BOOTS),
					new AssociatedSlot(myConfig, ItemID.AMYS_SAW, ItemID.IMCANDO_HAMMER),
					new AssociatedSlot(myConfig, ItemID.AMYS_SAW_OFFHAND, ItemID.IMCANDO_HAMMER_OFFHAND)
			));
		}
		if (myConfig.Runecrafting())
		{
			mySets.add(new EquipmentSet("Raiments of the eye", ItemID.HAT_OF_THE_EYE,
					new ItemSlot(myConfig, ItemID.HAT_OF_THE_EYE, ItemID.HAT_OF_THE_EYE_BLUE, ItemID.HAT_OF_THE_EYE_RED, ItemID.HAT_OF_THE_EYE_GREEN),
					new ItemSlot(myConfig, ItemID.ROBE_TOP_OF_THE_EYE, ItemID.ROBE_TOP_OF_THE_EYE_BLUE, ItemID.ROBE_TOP_OF_THE_EYE_RED, ItemID.ROBE_TOP_OF_THE_EYE_GREEN),
					new ItemSlot(myConfig, ItemID.ROBE_BOTTOMS_OF_THE_EYE, ItemID.ROBE_BOTTOMS_OF_THE_EYE_BLUE, ItemID.ROBE_BOTTOMS_OF_THE_EYE_RED, ItemID.ROBE_BOTTOMS_OF_THE_EYE_GREEN),
					new ItemSlot(myConfig, ItemID.BOOTS_OF_THE_EYE)
			));
		}

		if (myConfig.BloodMoon()) {
			mySets.add(new EquipmentSet("Blood Moon Armour", ItemID.BLOOD_MOON_CHESTPLATE,
					new ItemSlot(myConfig, ItemID.BLOOD_MOON_CHESTPLATE, ItemID.BLOOD_MOON_CHESTPLATE_29043),
					new ItemSlot(myConfig, ItemID.BLOOD_MOON_HELM, ItemID.BLOOD_MOON_HELM_29047),
					new ItemSlot(myConfig, ItemID.BLOOD_MOON_TASSETS, ItemID.BLOOD_MOON_TASSETS_29045),
					new AssociatedSlot(myConfig, ItemID.DUAL_MACUAHUITL, ItemID.DUAL_MACUAHUITL_29850)
			));
		}
		if (myConfig.BlueMoon()) {
			mySets.add(new EquipmentSet("Blue Moon Armour", ItemID.BLUE_MOON_CHESTPLATE,
					new ItemSlot(myConfig, ItemID.BLUE_MOON_CHESTPLATE, ItemID.BLUE_MOON_CHESTPLATE_29037),
					new ItemSlot(myConfig, ItemID.BLUE_MOON_HELM, ItemID.BLUE_MOON_HELM_29041),
					new ItemSlot(myConfig, ItemID.BLUE_MOON_TASSETS, ItemID.BLUE_MOON_TASSETS_29039),
					new AssociatedSlot(myConfig, ItemID.BLUE_MOON_SPEAR, ItemID.BLUE_MOON_SPEAR_29849)
			));
		}
		if (myConfig.EclipseMoon()) {
			mySets.add(new EquipmentSet("Eclipse Moon Armour", ItemID.ECLIPSE_MOON_CHESTPLATE,
					new ItemSlot(myConfig, ItemID.ECLIPSE_MOON_CHESTPLATE, ItemID.ECLIPSE_MOON_CHESTPLATE_29031),
					new ItemSlot(myConfig, ItemID.ECLIPSE_MOON_HELM, ItemID.ECLIPSE_MOON_HELM_29035),
					new ItemSlot(myConfig, ItemID.ECLIPSE_MOON_TASSETS, ItemID.ECLIPSE_MOON_TASSETS_29033),
					new AssociatedSlot(myConfig, ItemID.ECLIPSE_ATLATL, ItemID.ECLIPSE_ATLATL_29851)
			));
		}
		if (myConfig.Virtus()) {
			mySets.add(new EquipmentSet("Virtus Robes", ItemID.VIRTUS_MASK,
					new ItemSlot(myConfig, ItemID.VIRTUS_MASK),
					new ItemSlot(myConfig, ItemID.VIRTUS_ROBE_TOP),
					new ItemSlot(myConfig, ItemID.VIRTUS_ROBE_BOTTOM)
			));
		}
		if (myConfig.Swampbark()) {
			mySets.add(new EquipmentSet("Swampbark Armour", ItemID.SWAMPBARK_HELM,
					new ItemSlot(myConfig, ItemID.SWAMPBARK_HELM),
					new ItemSlot(myConfig, ItemID.SWAMPBARK_BODY),
					new ItemSlot(myConfig, ItemID.SWAMPBARK_LEGS),
					new ItemSlot(myConfig, ItemID.SWAMPBARK_BOOTS),
					new ItemSlot(myConfig, ItemID.SWAMPBARK_GAUNTLETS)
			));
		}
		if (myConfig.Bloodbark()) {
			mySets.add(new EquipmentSet("Bloodbark Armour", ItemID.BLOODBARK_HELM,
					new ItemSlot(myConfig, ItemID.BLOODBARK_HELM),
					new ItemSlot(myConfig, ItemID.BLOODBARK_BODY),
					new ItemSlot(myConfig, ItemID.BLOODBARK_LEGS),
					new ItemSlot(myConfig, ItemID.BLOODBARK_BOOTS),
					new ItemSlot(myConfig, ItemID.BLOODBARK_GAUNTLETS)
			));
		}
		if (myConfig.Inquisitor()) {
			mySets.add(new EquipmentSet("Inquisitors Armour", ItemID.INQUISITORS_GREAT_HELM,
					new ItemSlot(myConfig, ItemID.INQUISITORS_GREAT_HELM, ItemID.INQUISITORS_GREAT_HELM_27195),
					new ItemSlot(myConfig, ItemID.INQUISITORS_HAUBERK, ItemID.INQUISITORS_HAUBERK_27196),
					new ItemSlot(myConfig, ItemID.INQUISITORS_PLATESKIRT, ItemID.INQUISITORS_PLATESKIRT_27197),
					new AssociatedSlot(myConfig, ItemID.INQUISITORS_MACE, ItemID.INQUISITORS_MACE_27198)
			));
		}
		if (myConfig.Ahrims()) {
			mySets.add(new EquipmentSet("Ahrims Robes", ItemID.AHRIMS_HOOD,
					new ItemSlot(myConfig, ItemID.AHRIMS_HOOD, ItemID.AHRIMS_HOOD_100, ItemID.AHRIMS_HOOD_75, ItemID.AHRIMS_HOOD_50, ItemID.AHRIMS_HOOD_25),
					new ItemSlot(myConfig, ItemID.AHRIMS_ROBETOP, ItemID.AHRIMS_ROBETOP_100, ItemID.AHRIMS_ROBETOP_75, ItemID.AHRIMS_ROBETOP_50, ItemID.AHRIMS_ROBETOP_25),
					new ItemSlot(myConfig, ItemID.AHRIMS_ROBESKIRT, ItemID.AHRIMS_ROBESKIRT_100, ItemID.AHRIMS_ROBESKIRT_75, ItemID.AHRIMS_ROBESKIRT_50, ItemID.AHRIMS_ROBESKIRT_25),
					new AssociatedSlot(myConfig, ItemID.AHRIMS_STAFF, ItemID.AHRIMS_STAFF_100, ItemID.AHRIMS_STAFF_75, ItemID.AHRIMS_STAFF_50, ItemID.AHRIMS_STAFF_25, ItemID.AHRIMS_STAFF_23653)
			));
		}
		if (myConfig.Dharoks()) {
			mySets.add(new EquipmentSet("Dharoks Armour", ItemID.DHAROKS_HELM,
					new ItemSlot(myConfig, ItemID.DHAROKS_HELM, ItemID.DHAROKS_HELM_100, ItemID.DHAROKS_HELM_75, ItemID.DHAROKS_HELM_50, ItemID.DHAROKS_HELM_25),
					new ItemSlot(myConfig, ItemID.DHAROKS_PLATEBODY, ItemID.DHAROKS_PLATEBODY_100, ItemID.DHAROKS_PLATEBODY_75, ItemID.DHAROKS_PLATEBODY_50, ItemID.DHAROKS_PLATEBODY_25),
					new ItemSlot(myConfig, ItemID.DHAROKS_PLATELEGS, ItemID.DHAROKS_PLATELEGS_100, ItemID.DHAROKS_PLATELEGS_75, ItemID.DHAROKS_PLATELEGS_50, ItemID.DHAROKS_PLATELEGS_25),
					new AssociatedSlot(myConfig, ItemID.DHAROKS_GREATAXE, ItemID.DHAROKS_GREATAXE_100, ItemID.DHAROKS_GREATAXE_75, ItemID.DHAROKS_GREATAXE_50, ItemID.DHAROKS_GREATAXE_25)
			));
		}
		if (myConfig.Guthans()) {
			mySets.add(new EquipmentSet("Guthans Armour", ItemID.GUTHANS_HELM,
					new ItemSlot(myConfig, ItemID.GUTHANS_HELM, ItemID.GUTHANS_HELM_100, ItemID.GUTHANS_HELM_75, ItemID.GUTHANS_HELM_50, ItemID.GUTHANS_HELM_25),
					new ItemSlot(myConfig, ItemID.GUTHANS_PLATEBODY, ItemID.GUTHANS_PLATEBODY_100, ItemID.GUTHANS_PLATEBODY_75, ItemID.GUTHANS_PLATEBODY_50, ItemID.GUTHANS_PLATEBODY_25),
					new ItemSlot(myConfig, ItemID.GUTHANS_CHAINSKIRT, ItemID.GUTHANS_CHAINSKIRT_100, ItemID.GUTHANS_CHAINSKIRT_75, ItemID.GUTHANS_CHAINSKIRT_50, ItemID.GUTHANS_CHAINSKIRT_25),
				new AssociatedSlot(myConfig, ItemID.GUTHANS_WARSPEAR, ItemID.GUTHANS_WARSPEAR_100, ItemID.GUTHANS_WARSPEAR_75, ItemID.GUTHANS_WARSPEAR_50, ItemID.GUTHANS_WARSPEAR_25)
			));
		}
		if (myConfig.Karils()) {
			mySets.add(new EquipmentSet("Karils Armour", ItemID.KARILS_COIF,
					new ItemSlot(myConfig, ItemID.KARILS_COIF, ItemID.KARILS_COIF_100, ItemID.KARILS_COIF_75, ItemID.KARILS_COIF_50, ItemID.KARILS_COIF_25),
					new ItemSlot(myConfig, ItemID.KARILS_LEATHERTOP, ItemID.KARILS_LEATHERTOP_100, ItemID.KARILS_LEATHERTOP_75, ItemID.KARILS_LEATHERTOP_50, ItemID.KARILS_LEATHERTOP_25),
					new ItemSlot(myConfig, ItemID.KARILS_LEATHERSKIRT, ItemID.KARILS_LEATHERSKIRT_100, ItemID.KARILS_LEATHERSKIRT_75, ItemID.KARILS_LEATHERSKIRT_50, ItemID.KARILS_LEATHERSKIRT_25),
					new AssociatedSlot(myConfig, ItemID.KARILS_CROSSBOW, ItemID.KARILS_CROSSBOW_100, ItemID.KARILS_CROSSBOW_75, ItemID.KARILS_CROSSBOW_50, ItemID.KARILS_CROSSBOW_25)
			));
		}
		if (myConfig.Torags()) {
			mySets.add(new EquipmentSet("Torags Armour", ItemID.TORAGS_HELM,
					new ItemSlot(myConfig, ItemID.TORAGS_HELM, ItemID.TORAGS_HELM_100, ItemID.TORAGS_HELM_75, ItemID.TORAGS_HELM_50, ItemID.TORAGS_HELM_25),
					new ItemSlot(myConfig, ItemID.TORAGS_PLATEBODY, ItemID.TORAGS_PLATEBODY_100, ItemID.TORAGS_PLATEBODY_75, ItemID.TORAGS_PLATEBODY_50, ItemID.TORAGS_PLATEBODY_25),
					new ItemSlot(myConfig, ItemID.TORAGS_PLATELEGS, ItemID.TORAGS_PLATELEGS_100, ItemID.TORAGS_PLATELEGS_75, ItemID.TORAGS_PLATELEGS_50, ItemID.TORAGS_PLATELEGS_25),
					new AssociatedSlot(myConfig, ItemID.TORAGS_HAMMERS, ItemID.TORAGS_HAMMERS_100, ItemID.TORAGS_HAMMERS_75, ItemID.TORAGS_HAMMERS_50, ItemID.TORAGS_HAMMERS_25)
			));
		}
		if (myConfig.Veracs()) {
			mySets.add(new EquipmentSet("Veracs Armour", ItemID.VERACS_HELM,
					new ItemSlot(myConfig, ItemID.VERACS_HELM, ItemID.VERACS_HELM_100, ItemID.VERACS_HELM_75, ItemID.VERACS_HELM_50, ItemID.VERACS_HELM_25),
					new ItemSlot(myConfig, ItemID.VERACS_BRASSARD, ItemID.VERACS_BRASSARD_100, ItemID.VERACS_BRASSARD_75, ItemID.VERACS_BRASSARD_50, ItemID.VERACS_BRASSARD_25),
					new ItemSlot(myConfig, ItemID.VERACS_PLATESKIRT, ItemID.VERACS_PLATESKIRT_100, ItemID.VERACS_PLATESKIRT_75, ItemID.VERACS_PLATESKIRT_50, ItemID.VERACS_PLATESKIRT_25),
					new AssociatedSlot(myConfig, ItemID.VERACS_FLAIL, ItemID.VERACS_FLAIL_100, ItemID.VERACS_FLAIL_75, ItemID.VERACS_FLAIL_50, ItemID.VERACS_FLAIL_25)
			));
		}
		if (myConfig.Graceful()) {

			mySets.add(new EquipmentSet("Graceful", ItemID.GRACEFUL_HOOD,
					new ItemSlot(myConfig, "Graceful hood"),
					new ItemSlot(myConfig, "Graceful top"),
					new ItemSlot(myConfig, "Graceful legs"),
					new ItemSlot(myConfig, "Graceful gloves"),
					new ItemSlot(myConfig, "Graceful boots"),
					new ItemSlot(myConfig, "Graceful cape")
			));
		}
		if (myConfig.Crystal()) {
			mySets.add(new EquipmentSet("Crystal armour", ItemID.CRYSTAL_HELM,
					new ItemSlot(myConfig,
							ItemID.CRYSTAL_HELM, 		ItemID.CRYSTAL_HELM_27705, ItemID.CRYSTAL_HELM_27717, ItemID.CRYSTAL_HELM_27729,
							ItemID.CRYSTAL_HELM_27741, 	ItemID.CRYSTAL_HELM_27753, ItemID.CRYSTAL_HELM_27765, ItemID.CRYSTAL_HELM_27777),
					new ItemSlot(myConfig,
							ItemID.CRYSTAL_BODY, 		ItemID.CRYSTAL_BODY_27697, ItemID.CRYSTAL_BODY_27709, ItemID.CRYSTAL_BODY_27721,
							ItemID.CRYSTAL_BODY_27733, 	ItemID.CRYSTAL_BODY_27745, ItemID.CRYSTAL_BODY_27757, ItemID.CRYSTAL_BODY_27769),
					new ItemSlot(myConfig,
							ItemID.CRYSTAL_LEGS, 		ItemID.CRYSTAL_LEGS_27701, ItemID.CRYSTAL_LEGS_27713, ItemID.CRYSTAL_LEGS_27725,
							ItemID.CRYSTAL_LEGS_27737, 	ItemID.CRYSTAL_LEGS_27749, ItemID.CRYSTAL_LEGS_27761, ItemID.CRYSTAL_LEGS_27773)
					//new AssociatedSlot(myConfig, ) there are way too many version of these items, i will add them only if someone complains :p
			));
		}
		if (myConfig.Shayzien()) {
			mySets.add(new EquipmentSet("Shayzien tier 1", ItemID.SHAYZIEN_HELM_1,
					new ItemSlot(myConfig, ItemID.SHAYZIEN_HELM_1),
					new ItemSlot(myConfig, ItemID.SHAYZIEN_PLATEBODY_1),
					new ItemSlot(myConfig, ItemID.SHAYZIEN_GREAVES_1),
					new ItemSlot(myConfig, ItemID.SHAYZIEN_GLOVES_1),
					new ItemSlot(myConfig, ItemID.SHAYZIEN_BOOTS_1)
			));
			mySets.add(new EquipmentSet("Shayzien tier 2", ItemID.SHAYZIEN_HELM_2,
					new ItemSlot(myConfig, ItemID.SHAYZIEN_HELM_2),
					new ItemSlot(myConfig, ItemID.SHAYZIEN_PLATEBODY_2),
					new ItemSlot(myConfig, ItemID.SHAYZIEN_GREAVES_2),
					new ItemSlot(myConfig, ItemID.SHAYZIEN_GLOVES_2),
					new ItemSlot(myConfig, ItemID.SHAYZIEN_BOOTS_2)
			));
			mySets.add(new EquipmentSet("Shayzien tier 3", ItemID.SHAYZIEN_HELM_3,
					new ItemSlot(myConfig, ItemID.SHAYZIEN_HELM_3),
					new ItemSlot(myConfig, ItemID.SHAYZIEN_PLATEBODY_3),
					new ItemSlot(myConfig, ItemID.SHAYZIEN_GREAVES_3),
					new ItemSlot(myConfig, ItemID.SHAYZIEN_GLOVES_3),
					new ItemSlot(myConfig, ItemID.SHAYZIEN_BOOTS_3)
			));
			mySets.add(new EquipmentSet("Shayzien tier 4", ItemID.SHAYZIEN_HELM_4,
					new ItemSlot(myConfig, ItemID.SHAYZIEN_HELM_4),
					new ItemSlot(myConfig, ItemID.SHAYZIEN_PLATEBODY_4),
					new ItemSlot(myConfig, ItemID.SHAYZIEN_GREAVES_4),
					new ItemSlot(myConfig, ItemID.SHAYZIEN_GLOVES_4),
					new ItemSlot(myConfig, ItemID.SHAYZIEN_BOOTS_4)
			));
			mySets.add(new EquipmentSet("Shayzien tier 5", ItemID.SHAYZIEN_HELM_5,
					new ItemSlot(myConfig, ItemID.SHAYZIEN_HELM_5)
							.NonWarningAlternatives(
									ItemID.SLAYER_HELMET, ItemID.SLAYER_HELMET_I, ItemID.BLACK_SLAYER_HELMET,
									ItemID.BLACK_SLAYER_HELMET_I, ItemID.GREEN_SLAYER_HELMET, ItemID.GREEN_SLAYER_HELMET_I,
									ItemID.RED_SLAYER_HELMET, ItemID.RED_SLAYER_HELMET_I, ItemID.PURPLE_SLAYER_HELMET,
									ItemID.PURPLE_SLAYER_HELMET_I, ItemID.TURQUOISE_SLAYER_HELMET, ItemID.TURQUOISE_SLAYER_HELMET_I,
									ItemID.HYDRA_SLAYER_HELMET, ItemID.HYDRA_SLAYER_HELMET_I, ItemID.TWISTED_SLAYER_HELMET,
									ItemID.TWISTED_SLAYER_HELMET_I, ItemID.SLAYER_HELMET_I_25177, ItemID.BLACK_SLAYER_HELMET_I_25179,
									ItemID.GREEN_SLAYER_HELMET_I_25181, ItemID.RED_SLAYER_HELMET_I_25183, ItemID.PURPLE_SLAYER_HELMET_I_25185,
									ItemID.TURQUOISE_SLAYER_HELMET_I_25187, ItemID.HYDRA_SLAYER_HELMET_I_25189, ItemID.TWISTED_SLAYER_HELMET_I_25191,
									ItemID.TZTOK_SLAYER_HELMET, ItemID.TZTOK_SLAYER_HELMET_I, ItemID.TZTOK_SLAYER_HELMET_I_25902,
									ItemID.VAMPYRIC_SLAYER_HELMET, ItemID.VAMPYRIC_SLAYER_HELMET_I, ItemID.VAMPYRIC_SLAYER_HELMET_I_25908,
									ItemID.TZKAL_SLAYER_HELMET, ItemID.TZKAL_SLAYER_HELMET_I, ItemID.TZKAL_SLAYER_HELMET_I_25914,
									ItemID.SLAYER_HELMET_I_26674, ItemID.BLACK_SLAYER_HELMET_I_26675, ItemID.GREEN_SLAYER_HELMET_I_26676,
									ItemID.RED_SLAYER_HELMET_I_26677, ItemID.PURPLE_SLAYER_HELMET_I_26678, ItemID.TURQUOISE_SLAYER_HELMET_I_26679,
									ItemID.HYDRA_SLAYER_HELMET_I_26680, ItemID.TWISTED_SLAYER_HELMET_I_26681, ItemID.TZTOK_SLAYER_HELMET_I_26682,
									ItemID.VAMPYRIC_SLAYER_HELMET_I_26683, ItemID.TZKAL_SLAYER_HELMET_I_26684),
					new ItemSlot(myConfig, ItemID.SHAYZIEN_BODY_5),
					new ItemSlot(myConfig, ItemID.SHAYZIEN_GREAVES_5),
					new ItemSlot(myConfig, ItemID.SHAYZIEN_GLOVES_5),
					new ItemSlot(myConfig, ItemID.SHAYZIEN_BOOTS_5)
			));
		}
		if (myConfig.Justicar()) {
			mySets.add(new EquipmentSet("Justicar Armour", ItemID.JUSTICIAR_FACEGUARD,
					new ItemSlot(myConfig, ItemID.JUSTICIAR_FACEGUARD),
					new ItemSlot(myConfig, ItemID.JUSTICIAR_CHESTGUARD),
					new ItemSlot(myConfig, ItemID.JUSTICIAR_LEGGUARDS)
			));
		}

		if (myConfig.Gauntlet())
		{
			mySets.add(new EquipmentSet("Gauntlet T1 armour", ItemID.CRYSTAL_BODY_BASIC,
					new ItemSlot(myConfig, ItemID.CRYSTAL_HELM_BASIC, ItemID.CRYSTAL_HELM_ATTUNED, ItemID.CRYSTAL_HELM_PERFECTED),
					new ItemSlot(myConfig, ItemID.CRYSTAL_BODY_BASIC, ItemID.CRYSTAL_BODY_ATTUNED, ItemID.CRYSTAL_BODY_PERFECTED),
					new ItemSlot(myConfig, ItemID.CRYSTAL_LEGS_BASIC, ItemID.CRYSTAL_LEGS_ATTUNED, ItemID.CRYSTAL_LEGS_PERFECTED),
					new AssociatedSlot(myConfig,
							ItemID.CRYSTAL_BOW_BASIC, ItemID.CRYSTAL_HALBERD_BASIC, ItemID.CRYSTAL_STAFF_BASIC,
							ItemID.CRYSTAL_BOW_ATTUNED, ItemID.CRYSTAL_HALBERD_ATTUNED, ItemID.CRYSTAL_STAFF_ATTUNED,
							ItemID.CRYSTAL_BOW_PERFECTED, ItemID.CRYSTAL_HALBERD_PERFECTED, ItemID.CRYSTAL_STAFF_PERFECTED)
			));
			mySets.add(new EquipmentSet("Corrupted Gauntlet T1 armour", ItemID.CORRUPTED_BODY_BASIC,
					new ItemSlot(myConfig, ItemID.CORRUPTED_HELM_BASIC, ItemID.CORRUPTED_HELM_ATTUNED, ItemID.CORRUPTED_HELM_PERFECTED),
					new ItemSlot(myConfig, ItemID.CORRUPTED_BODY_BASIC, ItemID.CORRUPTED_BODY_ATTUNED, ItemID.CORRUPTED_BODY_PERFECTED),
					new ItemSlot(myConfig, ItemID.CORRUPTED_LEGS_BASIC, ItemID.CORRUPTED_LEGS_ATTUNED, ItemID.CORRUPTED_LEGS_PERFECTED),
					new AssociatedSlot(myConfig,
							ItemID.CORRUPTED_BOW_BASIC, ItemID.CORRUPTED_HALBERD_BASIC, ItemID.CORRUPTED_STAFF_BASIC,
							ItemID.CORRUPTED_BOW_ATTUNED, ItemID.CORRUPTED_HALBERD_ATTUNED, ItemID.CORRUPTED_STAFF_ATTUNED,
							ItemID.CORRUPTED_BOW_PERFECTED, ItemID.CORRUPTED_HALBERD_PERFECTED, ItemID.CORRUPTED_STAFF_PERFECTED)
			));

			mySets.add(new EquipmentSet("Gauntlet T2 armour", ItemID.CRYSTAL_BODY_ATTUNED,
					new ItemSlot(myConfig, ItemID.CRYSTAL_HELM_ATTUNED, ItemID.CRYSTAL_HELM_PERFECTED),
					new ItemSlot(myConfig, ItemID.CRYSTAL_BODY_ATTUNED, ItemID.CRYSTAL_BODY_PERFECTED),
					new ItemSlot(myConfig, ItemID.CRYSTAL_LEGS_ATTUNED, ItemID.CRYSTAL_LEGS_PERFECTED),
					new AssociatedSlot(myConfig,
							ItemID.CRYSTAL_BOW_ATTUNED, ItemID.CRYSTAL_HALBERD_ATTUNED, ItemID.CRYSTAL_STAFF_ATTUNED,
							ItemID.CRYSTAL_BOW_PERFECTED, ItemID.CRYSTAL_HALBERD_PERFECTED, ItemID.CRYSTAL_STAFF_PERFECTED)
			));
			mySets.add(new EquipmentSet("Corrupted Gauntlet T2 armour", ItemID.CORRUPTED_BODY_ATTUNED,
					new ItemSlot(myConfig, ItemID.CORRUPTED_HELM_ATTUNED, ItemID.CORRUPTED_HELM_PERFECTED),
					new ItemSlot(myConfig, ItemID.CORRUPTED_BODY_ATTUNED, ItemID.CORRUPTED_BODY_PERFECTED),
					new ItemSlot(myConfig, ItemID.CORRUPTED_LEGS_ATTUNED, ItemID.CORRUPTED_LEGS_PERFECTED),
					new AssociatedSlot(myConfig,
							ItemID.CORRUPTED_BOW_ATTUNED, ItemID.CORRUPTED_HALBERD_ATTUNED, ItemID.CORRUPTED_STAFF_ATTUNED,
							ItemID.CORRUPTED_BOW_PERFECTED, ItemID.CORRUPTED_HALBERD_PERFECTED, ItemID.CORRUPTED_STAFF_PERFECTED)
			));

			mySets.add(new EquipmentSet("Gauntlet T3 armour", ItemID.CRYSTAL_BODY_PERFECTED,
					new ItemSlot(myConfig, ItemID.CRYSTAL_HELM_PERFECTED),
					new ItemSlot(myConfig, ItemID.CRYSTAL_BODY_PERFECTED),
					new ItemSlot(myConfig, ItemID.CRYSTAL_LEGS_PERFECTED),
					new AssociatedSlot(myConfig,
							ItemID.CRYSTAL_BOW_PERFECTED, ItemID.CRYSTAL_HALBERD_PERFECTED, ItemID.CRYSTAL_STAFF_PERFECTED)
			));
			mySets.add(new EquipmentSet("Corrupted Gauntlet T3 armour", ItemID.CORRUPTED_BODY_PERFECTED,
					new ItemSlot(myConfig, ItemID.CORRUPTED_HELM_PERFECTED),
					new ItemSlot(myConfig, ItemID.CORRUPTED_BODY_PERFECTED),
					new ItemSlot(myConfig, ItemID.CORRUPTED_LEGS_PERFECTED),
					new AssociatedSlot(myConfig,
							ItemID.CORRUPTED_BOW_PERFECTED, ItemID.CORRUPTED_HALBERD_PERFECTED, ItemID.CORRUPTED_STAFF_PERFECTED)
			));
		}
	}

	void Reset()
	{
		infoBoxes.removeIf(infoBox -> infoBox.getClass() == EquipmentSetInfoBox.class);
	}
}

package com.PartialSets;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PartialSetsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PartialSetsPlugin.class);
		RuneLite.main(args);
	}
}
