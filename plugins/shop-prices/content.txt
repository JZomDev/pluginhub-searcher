package com.shopprices;

import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.Color;

@ConfigGroup("shopprices")
public interface ShopPricesConfig extends Config {
    @ConfigItem(
        position = 0,
        keyName = "displayOverlay",
        name = "Display prices below Items",
        description = "Shows a item value below each item in the shop."
    )
    default boolean displayOverlay() {
        return true;
    }

    @ConfigItem(
        position = 1,
        keyName = "displayTooltip",
        name = "Display prices in Tooltip",
        description = "Shows a small tooltip with items total price when hovering over an item."
    )
    default boolean displayTooltip() {
        return true;
    }

    @ConfigItem(
        position = 2,
        keyName = "overlayValueColor",
        name = "Shop price color",
        description = "Sets the default item value color."
    )
    @Alpha default Color defaultOverlayColor() {
        return Color.WHITE;
    }

    @ConfigItem(
        position = 3,
        keyName = "enablePriceThreshold",
        name = "Enable price threshold",
        description = "Allows you to set a threshold for when a price reaches a certain percentage."
    )
    default boolean priceThresholdEnabled() {
        return true;
    }

    @ConfigItem(
        position = 4,
        keyName = "priceThresholdPercentage",
        name = "Threshold Percentage",
        description = "Sets the threshold percentage."
    )
    default int priceThreshold() {
        return 15;
    }

    @ConfigItem(
        position = 5,
        keyName = "priceThresholdColor",
        name = "Price threshold color",
        description = "Sets the threshold item value color."
    )
    default Color thresholdOverlayColor() {
        return new Color(221, 69, 69);
    }
}

package com.shopprices;

import com.google.common.reflect.TypeToken;
import com.google.gson.Gson;
import com.google.inject.Provides;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;

import javax.inject.Inject;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Type;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Map;


@Slf4j
@PluginDescriptor(
    name = "Shop Prices",
    description = "Display prices for items in NPC shops.",
    tags = {"qol", "shop", "prices", "overlay"}
)
public class ShopPricesPlugin extends Plugin {
    @Inject
    private Client client;

    @Inject
    private ItemManager itemManager;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private TooltipManager tooltipManager;

    @Inject
    private ShopPricesOverlay shopPricesOverlay;

    @Getter
    @Inject
    private ShopPricesConfig config;

    @Inject
    private Gson gson;

    public static Map<String, Shop> shopsMap = new HashMap<>();
    public static final String SHOP_KEY_PATTERN = "[^a-zA-Z ]+";
    public static final float MIN_SELL_MULTIPLIER = 30.0f;

    @Provides
    ShopPricesConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(ShopPricesConfig.class);
    }

    @Override
    protected void startUp() {
        InputStream stream = getClass().getClassLoader().getResourceAsStream("shops.json");

        if (stream == null) {
            throw new IllegalArgumentException("Resource not found.");
        }

        try (InputStreamReader reader = new InputStreamReader(stream)) {
            Type shopMapType = new TypeToken<Map<String, Shop>>(){}.getType();
            ShopPricesPlugin.shopsMap = gson.fromJson(reader, shopMapType);
            overlayManager.add(shopPricesOverlay);
        } catch (IOException e) {
            log.error("Failed to read JSON file: {}", e.getMessage());
        }
    }

    @Override
    protected void shutDown() {
        overlayManager.remove(shopPricesOverlay);
        shopsMap.clear();
    }

    public boolean priceAtThreshold(int sellMult, float currentMult) {
        return this.config.priceThresholdEnabled() && sellMult + this.config.priceThreshold() <= currentMult;
    }

    public static String formatShopKey(String shopName) {
        return String.join("_", shopName.replaceAll(SHOP_KEY_PATTERN, "").toUpperCase().split(" "));
    }

    public static String formatValue(double value) {
        DecimalFormat formatter = new DecimalFormat("#,###,###,###gp");
        return formatter.format(value);
    }

    public static float getSellMultiplier(int sellMult, int defaultStock, int currentStock, float shopDelta) {
        int stockDelta = defaultStock - currentStock;
        return sellMult + (shopDelta * stockDelta);
    }

    public static int getSellPrice(int itemValue, int sellMult, int currentStock, int defaultStock, float shopDelta) {
        return (int) Math.max(
            itemValue * getSellMultiplier(sellMult, defaultStock, currentStock, shopDelta) / 100,
            Math.max(MIN_SELL_MULTIPLIER * itemValue / 100, 1)
        );
    }

    public static int getTotalSellPrice(int itemValue, int sellMult, int itemStock, int defaultStock, float shopDelta, int buyAmount) {
        int totalCost = 0;

        for (int x = 0; x < buyAmount; x++) {
            int currentStock = itemStock - x;
            totalCost += getSellPrice(itemValue, sellMult, currentStock, defaultStock, shopDelta);
        }

        return totalCost;
    }
}

package com.shopprices;

import java.util.Map;

public final class Shop {
    int sellMultiplier;
    float shopDelta;
    Map<String, Integer> itemStocks;
}
package com.shopprices;

import com.google.common.collect.ImmutableSet;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ItemComposition;
import net.runelite.api.ItemContainer;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.gameval.InventoryID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.tooltip.Tooltip;
import net.runelite.client.ui.overlay.tooltip.TooltipManager;

import javax.inject.Inject;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Dimension;
import java.awt.Color;
import java.util.Set;

@Slf4j
public class ShopPricesOverlay extends Overlay {
    private static final int PRICE_PADDING = 10;
    private static final int INVENTORY_SIZE = 28;
    private static final Set<MenuAction> SHOP_WIDGET_ACTIONS = ImmutableSet.of(
        MenuAction.CC_OP,
        MenuAction.CC_OP_LOW_PRIORITY
    );
    private final Client client;
    private final ItemManager itemManager;
    private final TooltipManager tooltipManager;
    private final ShopPricesPlugin plugin;

    @Inject
    public ShopPricesOverlay(ShopPricesPlugin plugin, Client client, ItemManager itemManager, TooltipManager tooltipManager) {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
        this.plugin = plugin;
        this.client = client;
        this.itemManager = itemManager;
        this.tooltipManager = tooltipManager;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        Widget shopWidget = client.getWidget(InterfaceID.Shopmain.ITEMS);
        Widget frameWidget = client.getWidget(InterfaceID.Shopmain.FRAME);
        if (shopWidget == null || frameWidget == null) {
            return null;
        }

        Widget[] shopItems = shopWidget.getDynamicChildren();
        Widget[] frameChildren = frameWidget.getDynamicChildren();

        if (shopItems == null || frameChildren == null) {
            return null;
        }

        String shopName = ShopPricesPlugin.formatShopKey(frameChildren[1].getText());

        for (Widget itemWidget : shopItems) {
            if (itemWidget.getItemId() == -1 || itemWidget.getName().isBlank()) {
                continue;
            }

            Shop activeShop = ShopPricesPlugin.shopsMap.get(shopName);

            if (plugin.getConfig().displayOverlay()) {
                onDisplayOverlay(graphics, activeShop, itemWidget);
            }

            if (plugin.getConfig().displayTooltip()) {
                onDisplayTooltip(activeShop, itemWidget);
            }
        }

        return null;
    }

    private void onDisplayOverlay(Graphics2D graphics, Shop activeShop, Widget itemWidget) {
        ItemComposition itemComposition = itemManager.getItemComposition(itemWidget.getItemId());
        Integer defaultStock = activeShop.itemStocks.get(itemComposition.getName());

        if (defaultStock == null) {
            defaultStock = 0;
        }

        int sellPrice = ShopPricesPlugin.getSellPrice(
            itemComposition.getPrice(),
            activeShop.sellMultiplier,
            itemWidget.getItemQuantity(),
            defaultStock,
            activeShop.shopDelta
        );

        String sellValue = ShopPricesPlugin.formatValue(sellPrice);

        Rectangle bounds = itemWidget.getBounds();

        float currentMultiplier = ShopPricesPlugin.getSellMultiplier(
            activeShop.sellMultiplier,
            defaultStock,
            itemWidget.getItemQuantity(),
            activeShop.shopDelta
        );

        if (plugin.priceAtThreshold(activeShop.sellMultiplier, currentMultiplier)) {
            graphics.setColor(plugin.getConfig().thresholdOverlayColor());
        } else {
            graphics.setColor(plugin.getConfig().defaultOverlayColor());
        }

        graphics.drawString(sellValue, bounds.x, (int) bounds.getMaxY() + PRICE_PADDING);
    }

    private void onDisplayTooltip(Shop activeShop, Widget itemWidget) {
        MenuEntry[] menuEntries = client.getMenu().getMenuEntries();
        int lastEntry = menuEntries.length - 1;

        if (client.isMenuOpen()) {
            return;
        }

        if (lastEntry < 0) {
            return;
        }

        MenuEntry menuEntry = menuEntries[lastEntry];
        MenuAction type = menuEntry.getType();
        String option = menuEntry.getOption();
        int itemId = menuEntry.getItemId();

        if (itemId != itemWidget.getItemId()) {
            return;
        }

        if (!SHOP_WIDGET_ACTIONS.contains(type)) {
            return;
        }

        int buyAmount;

        switch (option) {
            case "Buy 50":
                buyAmount = 50;
                break;
            case "Buy 10":
                buyAmount = 10;
                break;
            case "Buy 5":
                buyAmount = 5;
                break;
            case "Buy 1":
            case "Value":
                buyAmount = 1;
                break;
            default:
                return;
        }

        ItemContainer itemContainer = client.getItemContainer(InventoryID.INV);
        int inventorySpace = itemContainer != null ? INVENTORY_SIZE - itemContainer.count() : 0;

        ItemComposition itemComposition = itemManager.getItemComposition(itemWidget.getItemId());
        Integer defaultStock = activeShop.itemStocks.get(itemComposition.getName());

        if (defaultStock == null) {
            defaultStock = 0;
        }

        if (!itemComposition.isStackable() && inventorySpace > 0 && itemWidget.getItemQuantity() > inventorySpace) {
            buyAmount = inventorySpace;
        } else if (itemWidget.getItemQuantity() > 0 && buyAmount > itemWidget.getItemQuantity()) {
            buyAmount = itemWidget.getItemQuantity();
        }

        int totalPrice = ShopPricesPlugin.getTotalSellPrice(
            itemComposition.getPrice(),
            activeShop.sellMultiplier,
            itemWidget.getItemQuantity(),
            defaultStock,
            activeShop.shopDelta,
            buyAmount
        );

        float currentMultiplier = ShopPricesPlugin.getSellMultiplier(
            activeShop.sellMultiplier,
            defaultStock,
            itemWidget.getItemQuantity(),
            activeShop.shopDelta
        );

        String color = "ffffff";
        if (plugin.priceAtThreshold(activeShop.sellMultiplier, currentMultiplier)) {
            Color thresholdColor = plugin.getConfig().thresholdOverlayColor();
            color = Integer.toHexString(thresholdColor.getRGB()).substring(2);
        }

        Tooltip tooltip = new Tooltip(
            String.format(
                "Sells at: <col=%s>%s</col> (%d)",
                color,
                ShopPricesPlugin.formatValue(totalPrice),
                buyAmount
            )
        );

        tooltipManager.add(tooltip);
    }
}

package com.shopprices;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ShopPricesPluginTest {
	public static void main(String[] args) throws Exception {
		ExternalPluginManager.loadBuiltin(ShopPricesPlugin.class);
		RuneLite.main(args);
	}
}
