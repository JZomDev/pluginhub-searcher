package com.shopprices;

import com.google.common.reflect.TypeToken;
import com.google.gson.Gson;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Type;
import java.util.Map;


@Slf4j
@PluginDescriptor(
	name = "Shop Prices",
    description = "Display prices for items in NPC stores.",
    tags = { "qol", "shop", "prices" }
)
public class ShopPricesPlugin extends Plugin {
    @Inject
    private Client client;

    @Inject
    private ItemManager itemManager;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private ShopPricesOverlay shopPricesOverlay;

    @Inject
    private Gson gson;

    public static Map<String, Store> stores;
    public final static String STORE_KEY_PATTERN = "[^a-zA-Z ]+";

    public static class Store {
        public int sellMultiplier;
        public float storeDelta;
        public Map<String, Integer> items;
    }

    @Override
    protected void startUp() {
        overlayManager.add(shopPricesOverlay);

        InputStream stream = getClass().getClassLoader().getResourceAsStream("stores.json");

        if (stream == null) {
            throw new IllegalArgumentException("File not found.");
        }

        try (InputStreamReader reader = new InputStreamReader(stream)) {
            Type storeMapType = new TypeToken<Map<String, Store>>(){}.getType();
            ShopPricesPlugin.stores = gson.fromJson(reader, storeMapType);
            stream.close();
        } catch (IOException e) {
            log.error("Failed to read JSON file: {}", e.getMessage());
        }

    }

    @Override
    protected void shutDown() {
        overlayManager.remove(shopPricesOverlay);
        stores.clear();
    }

    public static String formatStoreKey(String storeName) {
        return String.join("_", storeName.replaceAll(STORE_KEY_PATTERN, "").toUpperCase().split(" "));
    }

    public static int getSellPrice(int itemValue, int sellMult, int itemStock, int defaultStock, float storeDelta) {
        int stockDelta = defaultStock - itemStock;

        return (int) Math.max(
            itemValue * (sellMult + (storeDelta * stockDelta)) / 100,
            storeDelta * itemValue / 100
        );
    }
}

package com.shopprices;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ItemComposition;
import net.runelite.api.gameval.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

import javax.inject.Inject;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Dimension;

@Slf4j
public class ShopPricesOverlay extends Overlay {

    private final Client client;
    private final ItemManager itemManager;

    private static final int PRICE_PADDING = 10;

    @Inject
    ShopPricesOverlay(ShopPricesPlugin plugin, Client client, ItemManager itemManager) {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
        this.client = client;
        this.itemManager = itemManager;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        Widget shop = client.getWidget(InterfaceID.Shopmain.ITEMS);
        Widget frame = client.getWidget(InterfaceID.Shopmain.FRAME);

        if (shop == null || frame == null) {
            return null;
        }

        Widget[] items = shop.getDynamicChildren();
        Widget[] frameChildren = frame.getDynamicChildren();

        if (items == null || frameChildren == null) {
            return null;
        }

        String shopName = ShopPricesPlugin.formatStoreKey(frameChildren[1].getText());

        for (Widget item : items) {
            if (item.getItemId() == -1 || item.getName().isBlank()) {
                continue;
            }

            ItemComposition composition = itemManager.getItemComposition(item.getItemId());
            ShopPricesPlugin.Store store = ShopPricesPlugin.stores.get(shopName);
            Integer defaultStock = store.items.get(composition.getName());

            if (defaultStock == null) {
                defaultStock = 0;
            }


            int sellPrice = ShopPricesPlugin.getSellPrice(
                composition.getPrice(),
                store.sellMultiplier,
                item.getItemQuantity(),
                defaultStock,
                store.storeDelta
            );

            Rectangle bounds = item.getBounds();
            graphics.drawString(sellPrice + "gp", bounds.x, (int) bounds.getMaxY() + PRICE_PADDING);
        }

        return null;
    }
}

package com.shopprices;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ShopPricesPluginTest {
	public static void main(String[] args) throws Exception {
		ExternalPluginManager.loadBuiltin(ShopPricesPlugin.class);
		RuneLite.main(args);
	}
}
