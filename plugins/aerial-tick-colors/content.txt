package com.AerialFishing;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AerialFishingPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AerialFishingPlugin.class);
		RuneLite.main(args);
	}
}
package com.AerialFishing;

import java.time.Instant;
import lombok.Getter;
import lombok.Setter;

class AerialFishingSession
{
    @Getter
    @Setter
    private Instant lastFishCaught;
}

package com.AerialFishing;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Polygon;
import javax.inject.Inject;
import lombok.AccessLevel;
import lombok.Setter;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.game.FishingSpot;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

class AerialFishingSpotOverlay extends Overlay {
    private static final int ONE_TICK_AERIAL_FISHING = 1;
    private static final int THREE_TICK_AERIAL_FISHING = 4;
    private static final int FIVE_TICK_AERIAL_FISHING = 7;
    private final AerialFishingPlugin plugin;
    private final AerialFishingConfig config;
    private final Client client;
    private final ItemManager itemManager;

    @Setter(AccessLevel.PACKAGE)
    private boolean hidden;

    @Inject
    private AerialFishingSpotOverlay(AerialFishingPlugin plugin, AerialFishingConfig config, Client client, ItemManager itemManager) {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        this.plugin = plugin;
        this.config = config;
        this.client = client;
        this.itemManager = itemManager;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (hidden) {
            return null;
        }

        FishingSpot previousSpot = null;
        WorldPoint previousLocation = null;
        for (NPC npc : plugin.getFishingSpots()) {
            FishingSpot spot = FishingSpot.findSpot(npc.getId());

            if (spot == null) {
                continue;
            }
            Integer distance = npc.getWorldLocation().distanceTo2D(client.getLocalPlayer().getWorldLocation());
            Color color;
            if (distance == ONE_TICK_AERIAL_FISHING) {
                color = config.Color1T();
            }
            else if (distance < THREE_TICK_AERIAL_FISHING) {
                color = config.Color2T();
            }
            else if (distance == THREE_TICK_AERIAL_FISHING) {
                color = config.Color3T();
            }
            else if (distance < FIVE_TICK_AERIAL_FISHING) {
                color = config.Color4T();
            }
            else if (distance == FIVE_TICK_AERIAL_FISHING)
            {
                color = config.Color5T();
            }
            else
            {
                color = config.Color6T();
            }

            Polygon poly = npc.getCanvasTilePoly();

            if (poly != null) {
                OverlayUtil.renderPolygon(graphics, poly, color.darker());
            }
        }
        return null;
    }
}
package com.AerialFishing;

import com.google.inject.Provides;
import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Actor;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;
import net.runelite.api.ItemID;
import net.runelite.api.NPC;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.InteractingChanged;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.events.NpcDespawned;
import net.runelite.api.events.NpcSpawned;
import net.runelite.client.Notifier;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.game.FishingSpot;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.xptracker.XpTrackerPlugin;
import net.runelite.client.ui.overlay.OverlayManager;

@PluginDescriptor(
		name = "Aerial Fishing Colors",
		description = "Let's you set the highlight color of aerial fishing spots by tick length to catch",
		tags = {"overlay", "skilling"}
)
@PluginDependency(XpTrackerPlugin.class)
@Singleton
@Slf4j
public class AerialFishingPlugin extends Plugin
{

	@Getter(AccessLevel.PACKAGE)
	private final AerialFishingSession session = new AerialFishingSession();

	@Getter(AccessLevel.PACKAGE)
	private final List<NPC> fishingSpots = new ArrayList<>();

	@Getter(AccessLevel.PACKAGE)
	private FishingSpot currentSpot;

	@Inject
	private Client client;

	@Inject
	private Notifier notifier;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private AerialFishingConfig config;

	@Inject
	private AerialFishingSpotOverlay spotOverlay;

	@Provides
	AerialFishingConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(AerialFishingConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(spotOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		spotOverlay.setHidden(true);
		overlayManager.remove(spotOverlay);
		fishingSpots.clear();
		currentSpot = null;
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		GameState gameState = gameStateChanged.getGameState();
		if (gameState == GameState.CONNECTION_LOST || gameState == GameState.LOGIN_SCREEN || gameState == GameState.HOPPING)
		{
			fishingSpots.clear();
		}
	}

	void reset()
	{
		session.setLastFishCaught(null);
	}

	@Subscribe
	public void onItemContainerChanged(ItemContainerChanged event)
	{
		if (event.getItemContainer() != client.getItemContainer(InventoryID.INVENTORY)
				&& event.getItemContainer() != client.getItemContainer(InventoryID.EQUIPMENT))
		{
			return;
		}

		final boolean showOverlays = session.getLastFishCaught() != null
				|| canPlayerFish(client.getItemContainer(InventoryID.INVENTORY))
				|| canPlayerFish(client.getItemContainer(InventoryID.EQUIPMENT));

		if (!showOverlays)
		{
			currentSpot = null;
		}

		spotOverlay.setHidden(!showOverlays);
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		if (event.getType() != ChatMessageType.SPAM)
		{
			return;
		}

		if (event.getMessage().contains("You catch a") || event.getMessage().contains("You catch some") ||
				event.getMessage().equals("Your cormorant returns with its catch."))
		{
			session.setLastFishCaught(Instant.now());
			spotOverlay.setHidden(false);
		}
	}

	@Subscribe
	public void onInteractingChanged(InteractingChanged event)
	{
		if (event.getSource() != client.getLocalPlayer())
		{
			return;
		}

		final Actor target = event.getTarget();

		if (!(target instanceof NPC))
		{
			return;
		}

		final NPC npc = (NPC) target;
		FishingSpot spot = FishingSpot.findSpot(npc.getId());

		if (spot == null)
		{
			return;
		}

		currentSpot = spot;
	}

	private boolean canPlayerFish(final ItemContainer itemContainer)
	{
		if (itemContainer == null)
		{
			return false;
		}

		for (Item item : itemContainer.getItems())
		{
			switch (item.getId())
			{
				case ItemID.CORMORANTS_GLOVE:
				case ItemID.CORMORANTS_GLOVE_22817:
					return true;
			}
		}

		return false;
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		// Reset fishing session
		if (session.getLastFishCaught() != null)
		{
			final Duration sinceCaught = Duration.between(session.getLastFishCaught(), Instant.now());
		}
		inverseSortSpotDistanceFromPlayer();
	}

	@Subscribe
	public void onNpcSpawned(NpcSpawned event)
	{
		final NPC npc = event.getNpc();

		if (FishingSpot.findSpot(npc.getId()) == null)
		{
			return;
		}

		fishingSpots.add(npc);
		inverseSortSpotDistanceFromPlayer();
	}

	@Subscribe
	public void onNpcDespawned(NpcDespawned npcDespawned)
	{
		final NPC npc = npcDespawned.getNpc();

		fishingSpots.remove(npc);
	}

	private void inverseSortSpotDistanceFromPlayer()
	{
		if (fishingSpots.isEmpty())
		{
			return;
		}

		final LocalPoint cameraPoint = new LocalPoint(client.getCameraX(), client.getCameraY());
		fishingSpots.sort(
				Comparator.comparingInt(
								// Negate to have the furthest first
								(NPC npc) -> -npc.getLocalLocation().distanceTo(cameraPoint))
						// Order by position
						.thenComparing(NPC::getLocalLocation, Comparator.comparingInt(LocalPoint::getX)
								.thenComparingInt(LocalPoint::getY))
						// And then by id
						.thenComparingInt(NPC::getId)
		);
	}
}
package com.AerialFishing;

import java.awt.Color;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Units;

@ConfigGroup("Aerial-Tick-Colors")
public interface AerialFishingConfig extends Config
{

	@Alpha
	@ConfigItem(
			keyName = "aerialColor1T",
			name = "1-tick color",
			description = "Color of overlays when 1-tick aerial fishing",
			position = 0
	)
	default Color Color1T()
	{
		return Color.GREEN;
	}

	@Alpha
	@ConfigItem(
			keyName = "aerialColor2T",
			name = "2-tick color",
			description = "Color of overlays when 2-tick aerial fishing",
			position = 1
	)
	default Color Color2T()
	{
		return Color.ORANGE;
	}

	@Alpha
	@ConfigItem(
			keyName = "aerialColor3T",
			name = "3-tick color",
			description = "Color of overlays when 3-tick aerial fishing",
			position = 2
	)
	default Color Color3T()
	{
		return Color.RED;
	}
	@Alpha
	@ConfigItem(
			keyName = "aerialColor4T",
			name = "4-tick color",
			description = "Color of overlays when 4-tick aerial fishing",
			position = 3
	)
	default Color Color4T()
	{
		return Color.RED;
	}
	@Alpha
	@ConfigItem(
			keyName = "aerialColor5T",
			name = "5-tick color",
			description = "Color of overlays when 5-tick aerial fishing",
			position = 4
	)
	default Color Color5T()
	{
		return Color.RED;
	}
	@Alpha
	@ConfigItem(
			keyName = "aerialColor6T",
			name = "6-tick color",
			description = "Color of overlays when 6-tick aerial fishing",
			position = 5
	)
	default Color Color6T()
	{
		return Color.RED;
	}
}

