package com.toaspellbookreminder;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ToaSpellbookReminderPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ToaSpellbookReminderPlugin.class);
		RuneLite.main(args);
	}
}
package config;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum SpellbookType
{
    Standard("Standard"),
    Ancient("Ancient"),
    Lunar("Lunar"),
    Arceuus("Arceuus");

    private final String name;

    @Override
    public String toString()
    {
        return name;
    }
}
package com.toaspellbookreminder;

import com.google.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.api.Point;

import java.awt.*;
import java.util.Objects;

import static net.runelite.client.ui.overlay.OverlayUtil.renderTextLocation;

@Slf4j
public class ToaSpellbookReminderOverlay extends Overlay {
    private final ToaSpellbookReminderPlugin plugin;
    private final ToaSpellbookReminderConfig config;

    @Inject
    private ToaSpellbookReminderOverlay(ToaSpellbookReminderPlugin plugin, ToaSpellbookReminderConfig config) {
        this.config = config;
        this.plugin = plugin;

        setPosition(OverlayPosition.DYNAMIC);
        setPriority(OverlayPriority.HIGH);
    }

    @Override
    public Dimension render(Graphics2D graphics2D) {
        if (plugin.getRegionId() == 13454) {
            String text = "Current Spellbook: " + plugin.getSpellbook().toUpperCase();
            Point textLocation = plugin.getToaDoor().getCanvasTextLocation(graphics2D, text, 200);

            if (textLocation != null) {
                if (Objects.equals(config.spellbook().toString(), plugin.getSpellbook())) {
                    renderTextLocation(graphics2D, new Point(textLocation.getX(), textLocation.getY()), text, config.correctSpellbook());
                } else {
                    renderTextLocation(graphics2D, new Point(textLocation.getX(), textLocation.getY()), text, config.wrongSpellbook());
                }
            }
        }

        return null;
    }
}

package com.toaspellbookreminder;

import config.SpellbookType;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.*;

@ConfigGroup("toaspellbookreminder")
public interface ToaSpellbookReminderConfig extends Config {
    @ConfigItem(
            keyName = "spellbook",
            name = "Desired Spellbook",
            description = "The selected spellbook you wanna use regularly"
    )
    default SpellbookType spellbook() {
        return SpellbookType.Standard;
    }

    @ConfigItem(
            keyName = "correctSpellbook",
            name = "Correct Spellbook color",
            description = "The text color when you have the correct spellbook"
    )
    default Color correctSpellbook() {
        return Color.GREEN;
    }

    @ConfigItem(
            keyName = "wrongSpellbook",
            name = "Wrong Spellbook color",
            description = "The text color when you have the wrong spellbook"
    )
    default Color wrongSpellbook() {
        return Color.RED;
    }
}

package com.toaspellbookreminder;

import com.google.inject.Provides;

import javax.inject.Inject;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(name = "ToA Spellbook Reminder")
public class ToaSpellbookReminderPlugin extends Plugin {
    @Inject
    private Client client;

    @Inject
    private ToaSpellbookReminderConfig config;

    @Inject
    ToaSpellbookReminderOverlay overlay;

    @Inject
    public OverlayManager overlayManager;

    @Getter
    private GameObject toaDoor;

    @Override
    protected void startUp() throws Exception {
        overlayManager.add(overlay);
    }

    @Override
    protected void shutDown() throws Exception {
        overlayManager.remove(overlay);
        toaDoor = null;
    }

    @Subscribe
    public void onGameObjectSpawned(GameObjectSpawned event) {
        if (event.getGameObject().getId() == 46089) {
            toaDoor = event.getGameObject();
        }
    }

    public String getSpellbook() {
        int spellbookId = client.getVarbitValue(4070);

        switch (spellbookId) {
            case 0:
                return "Standard";
            case 1:
                return "Ancient";
            case 2:
                return "Lunar";
            case 3:
                return "Arceuus";
            default:
                return "n/a";
        }
    }

    public int getRegionId() {
        return client.getLocalPlayer().getWorldLocation().getRegionID();
    }

    @Provides
    ToaSpellbookReminderConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(ToaSpellbookReminderConfig.class);
    }
}

