package filo.scouter;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ScoutHelperPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ScoutHelperPlugin.class);
		RuneLite.main(args);
	}
}
package filo.scouter;

import filo.scouter.config.Crabs;
import filo.scouter.config.Layout;
import filo.scouter.config.Overload;
import filo.scouter.config.OverloadPosition;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

import java.util.Collections;
import java.util.Set;

@ConfigGroup("coxscoutingqol")
public interface ScoutHelperConfig extends Config
{
	@ConfigSection(
		name = "Overload Settings",
		description = "Select your Overload Rooms (Ctrl and Shift)",
		position = 3,
		closedByDefault = true
	)
	String overloadSection = "Overload Section";

	@ConfigSection(
		name = "Raid Settings",
		description = "Settings for common raid options",
		position = 2,
		closedByDefault = true
	)
	String raidSection = "Raid Section";

	@ConfigSection(
		name = "Layout Settings",
		description = "Filter Layouts (Combat : Puzzle Ratios)",
		position = 1,
		closedByDefault = true
	)
	String layoutSection = "Layout Section";

	@ConfigSection(
		name = "General Settings",
		description = "General Settings",
		position = 0
	)
	String generalSection = "General Settings";

	@ConfigItem(
		keyName = "notifyRaid",
		name = "Notify on Raid",
		description = "Send a notification when a raid is scouted",
		section = generalSection
	)
	default boolean notifyRaid()
	{
		return true;
	}

	@ConfigItem(
		keyName = "layoutType",
		name = "Layout Filter",
		description = "Filter Layout Types: <br><br> 3C2P (3 Combat, 2 Puzzle) <br> 4C1P (4 Combat, 1 Puzzle) <br> 4C2P (4 Combat, 2 Puzzle) <br> None (Exception List) <br><br> To reset right-click 'Layout Filter' -> 'Reset'",
		section = layoutSection,
		position = 1
	)
	default Set<Layout> layoutType()
	{
		return Collections.emptySet();
	}

	@ConfigItem(
		keyName = "layoutKeys",
		name = "Exception Layouts",
		description = "Allows certain layouts to bypass the filter <br> Separate by ',' and spaces are allowed",
		section = layoutSection,
		position = 2
	)
	default String layoutKeys()
	{
		return "";
	}

	@ConfigItem(
		keyName = "rotationEnabled",
		name = "Rotation Toggle",
		description = "Toggle rotations and only searches for the specified rotations.",
		section = raidSection,
		position = 0
	)
	default boolean rotationEnabled()
	{
		return false;
	}

	@ConfigItem(
		keyName = "rotationList",
		name = "Rotations",
		description = "Set a required rotation (only finds these rotations!): <br><br>vasa,shamans,vespula<br>vasa,tekton,vespula<br><br>each must be on their own line!",
		section = raidSection,
		position = 1
	)
	default String rotationList()
	{
		return "";
	}

	@ConfigItem(
		keyName = "blockedRooms",
		name = "Blocked Rooms",
		description = "Block specific rooms (Combat or Puzzle) <br><br>Ice Demon,Vanguards<br><br>Separate by Comma ','",
		section = raidSection,
		position = 2
	)
	default String blockedRooms()
	{
		return "";
	}

	@ConfigItem(
		keyName = "blockedUnknownCombat",
		name = "Block Unknown Combat",
		description = "Block unknown combat rooms",
		section = raidSection,
		position = 3
	)
	default boolean blockedUnknownCombat()
	{
		return true;
	}

	@ConfigItem(
		keyName = "blockedUnknownPuzzles",
		name = "Block Unknown Puzzles",
		description = "Block unknown puzzle rooms",
		section = raidSection,
		position = 4
	)
	default boolean blockedUnknownPuzzles()
	{
		return true;
	}

	@ConfigItem(
		keyName = "preferredCrabs",
		name = "Preferred Crabs",
		description = "Filter crabs to your preferred type",
		section = raidSection,
		position = 5
	)
	default Crabs preferredCrabs()
	{
		return Crabs.ANY;
	}

	@ConfigItem(
		keyName = "overloadRooms",
		name = "Overload Filter",
		description = "A list of overload rooms you can filter <br><br>To select multiple use Ctrl-Click or Shift-Click <br><br>If you want none required Right-Click 'Overload Filter' -> 'Reset'",
		section = overloadSection,
		position = 0
	)
	default Set<Overload> overloadRooms()
	{
		return Collections.emptySet();
	}

	@ConfigItem(
		keyName = "ovlPos",
		name = "Preferred Location",
		description = "Define a preferred location for the Overload to be found",
		section = overloadSection,
		position = 1
	)
	default OverloadPosition ovlPos()
	{
		return OverloadPosition.ANY_ROOM;
	}

	@ConfigItem(
		keyName = "incPuzzleCombat",
		name = "Include Puzzle Combat",
		description = "If you want to include 'Tightrope' and 'Ice Demon' in 'First Combat'",
		section = overloadSection,
		position = 2
	)
	default boolean incPuzzleCombat()
	{
		return false;
	}
}

/*
 * Copyright (c) 2018, Kamiel
 * Copyright (c) 2024, Filofteia <https://github.com/Filofteia>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package filo.scouter;

import com.google.inject.Provides;
import filo.scouter.config.Crabs;
import filo.scouter.config.OverloadPosition;
import filo.scouter.data.PuzzleLayout;
import java.util.stream.Collectors;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Varbits;
import net.runelite.api.events.VarbitChanged;
import net.runelite.client.Notifier;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.config.ConfigManager;
import filo.scouter.config.Layout;
import filo.scouter.config.Overload;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.raids.Raid;
import net.runelite.client.plugins.raids.RaidRoom;
import net.runelite.client.plugins.raids.RoomType;
import net.runelite.client.plugins.raids.events.RaidReset;
import net.runelite.client.plugins.raids.events.RaidScouted;
import net.runelite.api.events.MenuEntryAdded;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import net.runelite.client.plugins.raids.solver.Room;
import net.runelite.client.util.Text;

@Slf4j
@PluginDescriptor(
	name = "CoX Scouting QoL",
	description = "Allows you to choose a define a good raid and removes the reload option until found",
	tags = {"CoX", "Scouting", "QoL", "Chamber", "Chambers of Xeric", "Raid", "Raids", "Raids 1"}
)
public class ScoutHelperPlugin extends Plugin
{
	@Inject
	private Client client;
	@Inject
	private ScoutHelperConfig config;
	@Inject
	private Notifier notifier;

	private boolean raidFound = false;
	private boolean raidSearched = false; // If the current raid was searched prevents double alert

	private boolean isStarted = false;
	private boolean isChallengeMode = false;

	@Override
	protected void startUp() throws Exception
	{
		raidFound = false;
		raidSearched = false;
	}

	@Override
	protected void shutDown() throws Exception
	{
	}

	@Subscribe
	public void onMenuEntryAdded(MenuEntryAdded e)
	{
		int CoX_ENTRY_ID = 49999;

		if (e.getIdentifier() != CoX_ENTRY_ID)
		{
			return;
		}

		if (isStarted)
		{
			return;
		}

		if (isChallengeMode)
		{
			return;
		}

		// Deprioritize 'Climb' for left click Reload
		if (e.getOption().equals("Climb"))
		{
			e.getMenuEntry().setDeprioritized(true);
		}

		// Deprioritize 'Reload' on accepted raids
		if (e.getOption().equals("Reload") && raidFound)
		{
			e.getMenuEntry().setDeprioritized(true);
		}
	}

	/**
	 * Code based on Raid.java getOrderedRooms()
	 *
	 * @param raid      The raid to search
	 * @param roomTypes The rooms to return
	 * @return A List of RaidRooms from the raid which have the type specified
	 */
	private List<RaidRoom> getOrderedRooms(Raid raid, RoomType... roomTypes)
	{
		List<RaidRoom> roomList = new ArrayList<>();

		for (Room r : raid.getLayout().getRooms())
		{
			final int position = r.getPosition();
			final RaidRoom room = raid.getRoom(position);

			if (room == null)
			{
				continue;
			}

			for (RoomType roomType : roomTypes)
			{
				if (roomType == room.getType())
				{
					roomList.add(room);
				}
			}
		}

		return roomList;
	}

	/**
	 * @param raid
	 * @return String: Rotation of the Raid
	 */
	private String getRaidRotation(Raid raid)
	{
		StringBuilder rotation = new StringBuilder();

		for (RaidRoom room : getOrderedRooms(raid, RoomType.COMBAT))
		{
			rotation.append(room.getName()).append(",");
		}

		return rotation.substring(0, rotation.length() - 1);
	}

	/**
	 * @return List<String>: Rotations from Config
	 */
	private List<String> getConfigRotations()
	{
		List<String> rotations = new ArrayList<>();

		if (config.rotationList().isBlank())
			return rotations;

		for (String line : config.rotationList().split("\\n"))
			rotations.add(line.replaceAll("(\\s*,\\s*)", ","));    // Spaces before or after comma allowed

		return rotations;
	}

	private boolean verifyCrabs(String raidLayout, List<RaidRoom> puzzles)
	{
		if (config.preferredCrabs() == Crabs.ANY)
			return true;    // Always good
		if (!puzzles.contains(RaidRoom.CRABS))
			return true;	// Default because you can block other puzzles

		int crabIndex = puzzles.indexOf(RaidRoom.CRABS);

		PuzzleLayout puzzleLayout = PuzzleLayout.getByLayout(raidLayout);
		if (puzzleLayout == null)
			return false;	// This is not a layout my plugin supports so return false

		String crabType = puzzleLayout.getPuzzleType(crabIndex);
		switch (crabType)
		{
			case "N/a": // Only occurs when you are out of index or no crabs exist, shouldn't occur but will stay in line of defaulting true
			case "C":
				return true;
			case "A":
				return false;
			case "B":
				return config.preferredCrabs() == Crabs.RARE;
		}

		return false;
	}

	@Subscribe
	public void onRaidScouted(RaidScouted raidScouted)
	{
		if (isChallengeMode)
		{
			raidSearched = true;
			return;
		}

		Raid raid = raidScouted.getRaid();
		if (raid == null || raidSearched || isStarted)
		{
			return; // Prevent Double Alert
		}

		String raidLayoutCode = raid.getLayout().toCodeString();
		raidSearched = true;

		List<RaidRoom> allRooms = getOrderedRooms(raid, RoomType.COMBAT, RoomType.PUZZLE);
		List<RaidRoom> combatRooms = allRooms.stream().filter(raidRoom -> raidRoom.getType() == RoomType.COMBAT).collect(Collectors.toList());
		List<RaidRoom> puzzleRooms = allRooms.stream().filter(raidRoom -> raidRoom.getType() == RoomType.PUZZLE).collect(Collectors.toList());
		Layout raidLayout = Layout.findLayout(combatRooms.size(), puzzleRooms.size());

		Set<Layout> layoutFilter = config.layoutType();;
		Set<Overload> overloadFilter = config.overloadRooms();
		List<String> roomFilter = Text.fromCSV(config.blockedRooms());

		boolean crabPuzzleFlag = verifyCrabs(raidLayoutCode, puzzleRooms);
		boolean layoutFound = layoutFilter.stream().anyMatch(layout -> raidLayout == layout);	// If current match fits the filter list if not we'll check exception later
		boolean overloadFound = overloadFilter.isEmpty();    	// Skips the check if empty
		boolean rotationFound = !config.rotationEnabled();		// Skips the check if not enabled

		// overloadFound means selected none so instantly know the result
		if (config.ovlPos() == OverloadPosition.COMBAT_FIRST && !overloadFound)
		{
			RaidRoom firstTrueCombat = allRooms.stream()
				.filter(r ->
					!r.getName().equalsIgnoreCase("thieving") &&
						!r.getName().equalsIgnoreCase("crabs")
				)
				.findFirst().orElse(null);

			if (firstTrueCombat == null || firstTrueCombat.getName().isEmpty())
			{
				return; // I'm sure this is impossible but that yellow line annoys me. Shouldn't be able to return even with the config change.
			}

			String firstRoomName = config.incPuzzleCombat() ? firstTrueCombat.getName() : combatRooms.get(0).getName();

			overloadFound = overloadFilter.stream()
				.anyMatch(overload -> firstRoomName.equalsIgnoreCase(overload.getRoomName()));

			if (!overloadFound)
			{
				return; // Failed condition
			}
		}

		// Combat Room Flags
		for (RaidRoom room : combatRooms)
		{
			String roomName = room.getName();

			if (roomName.equalsIgnoreCase("unknown (combat)") && config.blockedUnknownCombat())
				return;

			for (String blockedRoom : roomFilter)
			{
				if (roomName.equalsIgnoreCase(blockedRoom))
					return;
			}

			if (!overloadFound)
				overloadFound = overloadFilter.stream().anyMatch(overload -> roomName.equalsIgnoreCase(overload.getRoomName()));
		}

		for (RaidRoom room : puzzleRooms)
		{
			String roomName = room.getName();

			if (roomName.equalsIgnoreCase("unknown (puzzle)") && config.blockedUnknownPuzzles())
				return;

			for (String blockedRoom : roomFilter)
			{
				if (roomName.equalsIgnoreCase(blockedRoom))
					return;
			}
		}

		if (!rotationFound)
		{
			List<String> rotationList = getConfigRotations();
			String activeRotation = getRaidRotation(raid);

			for (String rotation : rotationList)
			{
				if (activeRotation.equalsIgnoreCase(rotation))
				{    //  Doesn't include puzzles, but it should skip Overload, Layout and Rotation checks because the user specified the combat rooms
					layoutFound = true; // Look into skipping this because of 4c2p 4c1p overlap
					rotationFound = true;
					overloadFound = true;
					break;
				}
			}

			if (rotationList.isEmpty())
				rotationFound = true;
		}

		if (!layoutFound)
		{
			String exceptionList = config.layoutKeys().replaceAll("(\\s*)", "");
			for (String layout : exceptionList.split(","))
			{
				if (!raidLayoutCode.equalsIgnoreCase(layout))
					continue;

				layoutFound = true;
				break;
			}
		}

		// Overall Checker
		if (!crabPuzzleFlag)
			return;
		if (!layoutFound)
			return;
		if (!overloadFound)
			return;
		if (!rotationFound)
			return;

		raidFound = true;
		notifier.notify(String.format("Raid Found! (%s)", getRaidRotation(raid)));
	}

	@Subscribe
	public void onRaidReset(RaidReset raidReset)
	{
		raidFound = false;
		raidSearched = false;
	}

	@Subscribe
	public void onVarbitChanged(VarbitChanged varbitChanged)
	{
		final int varbitId = varbitChanged.getVarbitId();
		final int varbitValue = varbitChanged.getValue();

		final int VARBIT_CM_FLAG = 6385;

		if (varbitId == VARBIT_CM_FLAG)    // Update isChallengeMode
		{
			isChallengeMode = varbitValue == 1;
		}

		if (varbitId == Varbits.RAID_STATE) // Update isStarted
		{
			isStarted = varbitValue == 1;
		}
	}

	@Provides
	ScoutHelperConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ScoutHelperConfig.class);
	}
}
package filo.scouter.data;

public enum PuzzleLayout
{
	// 3C2P
	FSCCSPCPSF("A", "C"),	//1
	SCPFCCSPSF("A", "C"),	//2
	SFCCSPCPSF("A", "C"),	//3
	SPSFPCCCSF("A", "C"),	//4
	SCSPFCCSPF("C", "C"),	//5

	// 4C1P
	SCPFCCCSSF("C"),	//1
	SCCFCPSCSF("A"),	//2
	SCFCPCSCFS("C"),	//3

	// 4C2P
	SCFPCCSPCF("C", "B"), 	//1
	SCFPCSCPCF("A", "B"),	//2
	SFCCPCSCPF("A", "B"),	//3
	SCFCPCCSPF("A", "C"),	//4
	SPCFCCSPCF("C", "C"),	//5
	FSCCPPCSCF("A", "C"),	//6
	SCFPCPCCSF("A", "B"),	//7
	FSCPCCSCPF("A", "B"),	//8
	SCFCPCSCPF("A", "A"),	//9
	SCPFCCSPCF("B", "C"),	//10
	SPCFCSCCPF("A", "C"),	//11
	SCPFCCCPSF("B", "B"),	//12
	FSPCCPSCCF("A", "A"), 	//13
	SCPFCPCSCF("B", "A"),	//14
	SCCFPCCSPF("A", "A");	//15

	private final String[] puzzleType = new String[2];

	PuzzleLayout(String... puzzleTypes)
	{
		for (int i = 0; i < puzzleTypes.length; i++)
		{
			puzzleType[i] = puzzleTypes[i];
		}
	}

	public static PuzzleLayout getByLayout(String raidLayout)
	{
		for (PuzzleLayout layout : PuzzleLayout.values())
		{
			if (layout.name().equalsIgnoreCase(raidLayout))
				return layout;
		}

		return null;	// Only if I don't support the layout (5c2p / 5c3p)
	}

	public String getPuzzleType(int puzzleIndex)
	{
		return puzzleIndex > puzzleType.length || puzzleIndex == -1 ? "N/a" : puzzleType[puzzleIndex];
	}
}

package filo.scouter.config;

import lombok.Getter;

@Getter
public enum Overload
{
	MUTTADILE("Muttadiles"),
	TEKTON("Tekton"),
	VANGUARD("Vanguards"),
	VESPULA("Vespula"),
	VASA("Vasa");

	private final String roomName;

	Overload(String roomName)
	{
		this.roomName = roomName;
	}
}

package filo.scouter.config;

public enum Crabs
{
	ANY("Any"),
	RARE("Rare & Good"),
	GOOD("Good");

	private final String crabType;
	Crabs(String crabType)
	{
		this.crabType = crabType;
	}
}

package filo.scouter.config;

import lombok.Getter;

@Getter
public enum OverloadPosition
{
	ANY_ROOM("Any Rooms"),
	COMBAT_FIRST("First Combat") // This is weird, but it doesn't reset user settings.
	{
		@Override
		public String toString()
		{
			return "Combat First";
		};
	};

	private final String roomType;

	OverloadPosition(String roomType)
	{
		this.roomType = roomType;
	}
}

package filo.scouter.config;

import lombok.Getter;

@Getter
public enum Layout
{
	L_3C2P(3, 2)
		{
			@Override
			public String toString()
			{
				return "3C2P";
			}
		},
	L_4C1P(4, 1)
		{
			@Override
			public String toString()
			{
				return "4C1P";
			}
		},
	L_4C2P(4, 2)
		{
			@Override
			public String toString()
			{
				return "4C2P";
			}
		};

	private final int maxCombat;
	private final int maxPuzzles;

	Layout(int combat, int puzzles)
	{
		this.maxCombat = combat;
		this.maxPuzzles = puzzles;
	}

	/**
	 * Return the accositated layout to your request
	 * @param combatQty The amount of Combat Rooms in the raid
	 * @param puzzleQty The amount of Puzzle Rooms in the raid
	 * @return That Layout or null
	 */
	public static Layout findLayout(int combatQty, int puzzleQty)
	{
		for (Layout layout : Layout.values())
		{
			if (layout.maxCombat == combatQty && layout.maxPuzzles == puzzleQty)
				return layout;
		}

		return null;
	}
}

