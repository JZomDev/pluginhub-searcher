package com.runelogger;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class Runelogger
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(RuneloggerPlugin.class);
		RuneLite.main(args);
	}
}
package com.runelogger;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.lang.Integer;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.widgets.Widget;

import javax.inject.Inject;


@Slf4j
public class SkillingBosses
{
    @Inject private Client client;

    @Inject private ApiCommunication apiCommunication;

    private String message;

    boolean startCoutingWintertodtScore = false;
    private Integer wintertodtScore = 0;
    boolean startCoutingTemporossScore = false;
    private Integer temporossScore = 0;

    public void gametickSkillingBoss()
    {
        //PLAYER IS IN WINTERTODT REGION//
        if(client.getLocalPlayer().getWorldLocation().getRegionID() == 6462)
        {
            //GET WINTERTODT WIDGET
            Widget wintertodtScoreWidget = client.getWidget(396, 7);

            //THERE IS A WINTERTODT SCORE WIDGET; PLAYER IS IN WINTERTODT
            if(wintertodtScoreWidget != null && startCoutingWintertodtScore) {
                //EXTRACT THE SCORE FROM THE WIDGET USING REGEX
                Pattern winterTodtscorePatern = Pattern.compile("Points<br>(\\d+)");
                Matcher winterTodtscoreMatcher = winterTodtscorePatern.matcher(wintertodtScoreWidget.getText());

                //GET MATCHES FOR SCORE ON WINTERTODT WIDGET//
                if (winterTodtscoreMatcher.find()) {
                    //SCORE INCREASED, SET NEW SCORE//
                    if(Integer.parseInt(winterTodtscoreMatcher.group(1)) > wintertodtScore) wintertodtScore = Integer.parseInt(winterTodtscoreMatcher.group(1));
                }
            }
        }
        //PLAYER NOT IN WINTERTODT BUT STILL HAS HIGH ENOUGH SCORE
        else if(startCoutingWintertodtScore)
            stopCountingWintertodtScore();

        //GET TEMPOROSS WIDGET
        Widget temporossScoreWidget = client.getWidget(437, 25);

        //THERE IS A TEMPOROSS SCORE WIDGET; PLAYER IS IN TEMPOROSS
        if(temporossScoreWidget != null && startCoutingTemporossScore) {
            //EXTRACT THE SCORE FROM THE WIDGET USING REGEX
            Pattern temporossscorePatern = Pattern.compile("Points: (\\d+)");
            Matcher temporossscoreMatcher = temporossscorePatern.matcher(temporossScoreWidget.getText());

            //GET MATCHES FOR SCORE ON TEMPOROSS WIDGET//
            if (temporossscoreMatcher.find()) {
                //SCORE INCREASED, SET NEW SCORE//
                if(Integer.parseInt(temporossscoreMatcher.group(1)) > temporossScore) temporossScore = Integer.parseInt(temporossscoreMatcher.group(1));
            }
        }
        //TEMPOROSS SCORE WIDGET NOT ACTIVE
        else if(startCoutingTemporossScore)
            stopCountingTemporossScore();
    }

    public void chatSkillingBoss(String message)
    {
        //CHECK IF THE USE HAS ENOUGH POINTS TO EARN A SUPPLY CRATE
        if(message.contains("You have helped enough to earn a supply crate.")) startCoutingWintertodtScore = true;

        //WINTERTODT SCORE IS COUNTING//
        if(startCoutingWintertodtScore)
        {
            //EXTRACT THE TOTAL AMOUNT WINTERTODT HAS BEEN SUBDUED
            Pattern winterTodtSubduedPatern = Pattern.compile("Your subdued Wintertodt count is: <col=ff0000>(\\d+)</col>.");
            Matcher winterTodtSubduedMatcher = winterTodtSubduedPatern.matcher(message);

            //GET MATCHES FOR SUBDUEING WINTERTODT
            if (winterTodtSubduedMatcher.find()) {
                //COMMUNICATE SCORE//
                apiCommunication.sendSkillingBossInfo("Wintertodt", wintertodtScore);
                stopCountingWintertodtScore();
            }
        }

        //CHECK IF THE USE HAS ENOUGH POINTS TO EARN A REWARD PERMIT
        if(message.contains("You have earned enough points for a reward permit.")) startCoutingTemporossScore = true;

        //TEMPOROSS SCORE IS COUNTING//
        if(startCoutingTemporossScore)
        {
            //EXTRACT THE TOTAL AMOUNT WINTERTODT HAS BEEN SUBDUED
            Pattern temporossSubduedPatern = Pattern.compile("Your Tempoross kill count is: <col=ff0000>(\\d+)</col>.");
            Matcher temporossSubduedMatcher = temporossSubduedPatern.matcher(message);

            //GET MATCHES FOR SUBDUEING WINTERTODT
            if (temporossSubduedMatcher.find()) {
                //COMMUNICATE SCORE//
                apiCommunication.sendSkillingBossInfo("Tempoross", temporossScore);
                stopCountingTemporossScore();
            }
        }
    }

    //STOP COUNTING WINTERTODT SCORE AND RESET SCORE//
    private void stopCountingWintertodtScore()
    {
        wintertodtScore = 0;    //RESET SCORE
        startCoutingWintertodtScore = false;
    }

    //STOP COUNTING WINTERTODT SCORE AND RESET SCORE//
    private void stopCountingTemporossScore()
    {
        temporossScore = 0;    //RESET SCORE
        startCoutingTemporossScore = false;
    }
}
package com.runelogger;

import com.google.inject.Provides;

import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Player;
import net.runelite.api.WorldType;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;


@Slf4j
@PluginDescriptor(
	name = "Runelogger",
	description = "Publishes your RuneScape adventures on Runelogger.com.",
	tags = {"runelogger", "journey"}
)

public class RuneloggerPlugin extends Plugin
{
	@Inject private Client client;
	@Inject private RuneloggerConfig config;

	@Inject private SkillingBosses skillingBosses;
	@Inject private LevelingUp levelingUp;
	@Inject private QuestCompletion questCompletion;
	@Inject private MusicUnlock musicUnlock;
	@Inject private TutorialIsland tutorialIsland;
	@Inject private CollectionLog collectionLog;
	@Inject private Bosses bosses;
	@Inject private DuelArena duelArena;
	@Inject private ClueScrollCompletion clueScrollCompletion;
	@Inject private SoloCombatMinigame soloCombatMinigame;

	@Inject private ApiCommunication apiCommunication;

	private boolean characterInfoSend = false;
	private boolean suportedWorld = false;

	//PLUGIN STARTED//
	@Override
	protected void startUp()
	{
		log.debug("Plugin active!");
	}

	//PLUGIN STOPPED//
	@Override
	protected void shutDown()
	{
		characterInfoSend = false;
		log.debug("Plugin inactive!");
	}

	/*
	ADD:
	VALUABLE_DROP_PATTERN = Pattern.compile(".*Valuable drop: ([^<>]+?\\(((?:\\d+,?)+) coins\\))(?:</col>)?");
	UNTRADEABLE_DROP_PATTERN = Pattern.compile(".*Untradeable drop: ([^<>]+)(?:</col>)?");
	PET_MESSAGES = ImmutableList.of("You have a funny feeling like you're being followed",
		"You feel something weird sneaking into your backpack");
	 */

	@Subscribe
	public void onGameStateChanged(GameStateChanged gameStateChanged)
	{
		//GAME CHANGED TO USER LOGGED IN
		if (gameStateChanged.getGameState() == GameState.LOGGED_IN)
		{
			//PLAYER ISN'T ON AN UNSUPORTED WORLD
			if(!client.getWorldType().contains(WorldType.DEADMAN) && !client.getWorldType().contains(WorldType.NOSAVE_MODE) && !client.getWorldType().contains(WorldType.SEASONAL) && !client.getWorldType().contains(WorldType.TOURNAMENT_WORLD))
				suportedWorld = true;
		}
	}

	//EXECUTE EVERY GAME TICK//
	@Subscribe
	public void onGameTick(GameTick tick)
	{
		//PLAYER IS ON A SUPORTED WORLD
		if(suportedWorld)
		{
			//CHECK IF PLAYER NAME IS NOT NULL
			if(client.getLocalPlayer().getName() != null && !characterInfoSend) {
				//CLONE PLAYER OBJECT
				Player player = client.getLocalPlayer();

				//SEND THE CHARACTER INFO TO THE API
				characterInfoSend = apiCommunication.sendCharacterInfo();
			}

			if(config.skillingBosses()) skillingBosses.gametickSkillingBoss();		//SKILLING BOSSES ARE ENABLED
			if(config.levelingUp()) levelingUp.gametickLevelingUp();				//LEVELING UP IS ENABLED
			if(config.questCompletion()) questCompletion.gametickQuestCompletion();	//QUEST COMPLETION IS ENABLED
			if(config.tutorialIsland()) tutorialIsland.gametickTutorialIsland();	//TUTORIAL ISLAND IS ENABLED
			if(config.duelArena()) duelArena.gametickDuelArena();					//DUEL ARENA IS ENABLED
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage)
	{
		//PLAYER IS ON A SUPORTED WORLD
		if(suportedWorld)
		{
			String message = chatMessage.getMessage();

			if(config.skillingBosses()) skillingBosses.chatSkillingBoss(message);						//SKILLING BOSSES ARE ENABLED
			if(config.musicUnlocks()) musicUnlock.chatMusicUnlock(message);								//MUSIC UNLOCKS ARE ENABLED
			if(config.collectionLog()) collectionLog.chatCollectionLog(message);						//COLLECTION LOG IS ENABLED
			if(config.bosses()) bosses.chatBosses(message);												//BOSS KILLS ARE ENABLED
			if(config.clueScrollCompletion()) clueScrollCompletion.chatClueScrollCompletion(message);	//CLUE SCROLL COMPLETIONS ARE ENABLED
			if(config.soloCombatMinigame()) soloCombatMinigame.chatSoloCombatMinigame(message);			//COMBAT CHALLENGES ARE ENABLED
		}
	}

	@Provides
    RuneloggerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(RuneloggerConfig.class);
	}
}
package com.runelogger;

import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.widgets.WidgetInfo;

import javax.inject.Inject;

@Slf4j
public class LevelingUp
{
    @Inject private Client client;

    @Inject private ApiCommunication apiCommunication;

    private String lastLevelUp;
    private Integer storedCombatLevel = 0;
    private String levelUpWidgetText = "";

    public void gametickLevelingUp()
    {
        //LEVEL UP WIDGET PRESENT
        if (client.getWidget(WidgetInfo.LEVEL_UP_LEVEL) != null)
            levelUpWidgetText = client.getWidget(WidgetInfo.LEVEL_UP_LEVEL).getText();  //EXTRACT TEXT FROM WIDGET
        else if(client.getWidget(WidgetInfo.DIALOG_SPRITE_TEXT) != null)
            levelUpWidgetText = client.getWidget(WidgetInfo.DIALOG_SPRITE_TEXT).getText();  //EXTRACT TEXT FROM WIDGET

        //THERE IS A LEVEL UP TEXT
        if(levelUpWidgetText != "")
        {
            //EXTRACT THE SKILL AND LEVEL
            Pattern levelingUpPatern = Pattern.compile(".*Your ([a-zA-Z]+) (?:level is|are)? now (\\d+)\\.");  //FROM SCREENSHOT PLUGIN
            Matcher levelingUpMatcher = levelingUpPatern.matcher(levelUpWidgetText);

            //GET MATCHES FOR LEVEL UP MESSAGE//
            if (levelingUpMatcher.find()) {
                String skillName = levelingUpMatcher.group(1);
                Integer skillLevel = Integer.parseInt(levelingUpMatcher.group(2));

                //CHECK IF THIS LEVEL UP DIFFERS FROM LAST LEVEL UP (TO AVOID DUPLICATE ENTRIES)
                if(!Objects.equals(lastLevelUp, skillName+skillLevel))
                {
                    apiCommunication.sendLevelingUpInfo(skillName, skillLevel);
                    lastLevelUp = skillName+skillLevel; //SET CURRENT LEVEL UP AS LAST LEVEL UP
                }
            }

            //CURRENT COMBAT LEVEL IS NOT EMPTY AND STORED COMBAT LEVEL IS LOWER THAN CURRENT LEVEL
            if(storedCombatLevel > 0 && storedCombatLevel < client.getLocalPlayer().getCombatLevel())
            {
                apiCommunication.sendLevelingUpInfo("Combat", client.getLocalPlayer().getCombatLevel());
                storedCombatLevel = client.getLocalPlayer().getCombatLevel();   //SET STORED COMBAT LEVEL TO CURRENT LEVEL
            }

            levelUpWidgetText = ""; //RESET LEVEL UP WIDGET TEXT
        }

        //THERE IS NO COMBAT LEVEL STORED
        if(storedCombatLevel == 0 && client.getLocalPlayer().getCombatLevel() > 0)
            storedCombatLevel = client.getLocalPlayer().getCombatLevel();   //SET STORED COMBAT LEVEL TO CURRENT LEVEL
    }
}

package com.runelogger;

import javax.inject.Inject;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class CollectionLog
{
    @Inject private ApiCommunication apiCommunication;

    public void chatCollectionLog(String message)
    {
        //EXTRACT THE UNLOCKED ITEM
        Pattern CollectionLogPatern = Pattern.compile("New item added to your collection log: <col=ff0000>(.*?)(</col>|$)");
        Matcher CollectionLogMatcher = CollectionLogPatern.matcher(message);

        // COMMUNICATE ITEM //
        if (CollectionLogMatcher.find()) apiCommunication.sendCollectionLog(CollectionLogMatcher.group(1));
    }
}

package com.runelogger;

import javax.inject.Inject;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class SoloCombatMinigame
{
    @Inject private ApiCommunication apiCommunication;

    private String completedTzHaarChallengeType = "";

    public void chatSoloCombatMinigame(String message)
    {
        //TzHaar-Ket-Rak's Challenges == UNTESTED BUT SHOULD WORK //

        //EXTRACT THE UNLOCKED ITEM
        Pattern TzHaarChallengePatern = Pattern.compile("Your completion count for TzHaar-Ket-Rak's (.+) Challenge is: <col=[a-zA-Z0-9]{6}>[0-9]+(</col>|$)");
        Matcher TzHaarChallengeMatcher = TzHaarChallengePatern.matcher(message);

        // GET FINISHED CHALLENGE TYPE //
        if (TzHaarChallengeMatcher.find()) completedTzHaarChallengeType = TzHaarChallengeMatcher.group(1);

        // TZHAAR CHALLENGE IS COMPLETE //
        if(completedTzHaarChallengeType != "")
        {
            //EXTRACT TIME MESSAGE
            Pattern TzHaarChallengesTimePatern = Pattern.compile("Challenge duration: <col=[a-zA-Z0-9]{6}>([\\d:]+)</col>");   //FROM SCREENSHOT API
            Matcher TzHaarChallengesTimeMatcher = TzHaarChallengesTimePatern.matcher(message);

            //GET MATCHES FOR TIME
            if (TzHaarChallengesTimeMatcher.find())
            {
                //SET COMPLETED CLUE SCROLL REWARD TO CURRENT
                String completedTzHaarChallengeTime = TzHaarChallengesTimeMatcher.group(1);

                //COMMUNICATE CLUE SCROLL COMPLETION//
                apiCommunication.sendMinigameTime("TzHaar-Ket-Rak's Challenge", completedTzHaarChallengeType, completedTzHaarChallengeTime);

                //RESET COMPLETED CHALLENGE TYPE
                completedTzHaarChallengeType = "";
            }
        }
    }
}

package com.runelogger;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.widgets.Widget;

import javax.inject.Inject;
import java.util.Objects;

@Slf4j
public class DuelArena
{
    @Inject private Client client;

    @Inject private ApiCommunication apiCommunication;

    boolean duelArenaWidgetOpen = false;

    public void gametickDuelArena()
    {
        //GET WINTERTODT WIDGET
        Widget duelArenaWidget = client.getWidget(372, 17);

        //THERE IS A DUEL ARENA WIDGET AND IT NEEDS PROCESSING
        if(duelArenaWidget != null && !duelArenaWidgetOpen)
        {
            duelArenaWidgetOpen = true;

            String winnerCombat = client.getWidget(372, 6).getText();
            String winnerName = client.getWidget(372, 7).getText();

            String loserCombat = client.getWidget(372, 2).getText();
            String loserName = client.getWidget(372, 3).getText();

            String winningValue = client.getWidget(372, 40).getText();

            //CURRENT PLAYER IS WINNER
            if(Objects.equals(winnerName, client.getLocalPlayer().getName()))
                apiCommunication.sendDuelArena("won", winnerCombat, loserName, loserCombat, winningValue);
            else
                apiCommunication.sendDuelArena("lost", loserCombat, winningValue, winnerCombat, loserName);
        }
        else if (duelArenaWidget == null && duelArenaWidgetOpen)
            duelArenaWidgetOpen = false;
    }
}

package com.runelogger;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.VarPlayer;
import okhttp3.*;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import net.runelite.api.Client;
import net.runelite.api.Skill;

import javax.inject.Inject;

@Slf4j
public class ApiCommunication
{
    @Inject private Client client;
    @Inject private OkHttpClient CurrentOkHttpClient;

    //HASH THE USERNAME BEFORE SENDING IT SO WE DONT NEED TO STORE EMAIL ADDRESSES//
    private String getUsernameHash()
    {
        String username = "";

        //TRY HASHING USERNAME
        try {
            //GET MESSAGEDIGEST THAT IMPLEMENTS SHA-256
            MessageDigest sha256Digest = MessageDigest.getInstance("SHA-256");

            //COMPLETE THE HASH COMPUTATION (AND WRITE THE BYTES TO AN ARRAY)
            byte[] usernameHashedBytes = sha256Digest.digest(client.getUsername().getBytes(StandardCharsets.UTF_8));

            //CREATE A STRING BUILDER WITH TWICE THE AMOUNT OF THE NUMBER OF BYTES (BECAUSE EVERY BYTE IS REPRESENTED WITH A 2 CHARACTER HEXIDECIMAL CHARACTER)
            StringBuilder usernameBuiler = new StringBuilder(usernameHashedBytes.length * 2);

            //LOOP EVERY BYTE
            for(byte b: usernameHashedBytes)
            {
                //ADD THE NEW HEXIDECIMAL TO THE END OF THE STRING BUILDER
                usernameBuiler.append(String.format("%02x", b));
            }

            //CONVERT THE HEXIDECIMAL USERNAME TO A STRING
            username = usernameBuiler.toString();
        }catch(NoSuchAlgorithmException e) {
            System.out.println("Something is wrong");
        }

        return username;
    }

    //SEND THE CHARACTER INFO TO THE API
    public boolean sendTutorialInfo(String status)
    {
        //FORM PARAMETERS
        RequestBody formBody = new FormBody.Builder()
                .add("username", getUsernameHash())
                .add("status", status)
                .build();

        String file = "processTutorialIsland.php";  //API FILE TO LOAD
        sendToApi(file, formBody);                  //SEND THE NEEDED FILENAME AND VALUES TO THE API REQUEST

        return true;
    }

    //SEND THE CHARACTER INFO TO THE API
    public void sendLevelingUpInfo(String skill, Integer level)
    {
        //FORM PARAMETERS
        RequestBody formBody = new FormBody.Builder()
                .add("username", getUsernameHash())
                .add("skill", skill)
                .add("level", ""+level)
                .build();

        String file = "processLevelUp.php"; //API FILE TO LOAD
        sendToApi(file, formBody);          //SEND THE NEEDED FILENAME AND VALUES TO THE API REQUEST

        //SEND LEVEL INFO
        sendLevelInfo();
    }

    //SEND THE CHARACTER INFO TO THE API
    public void sendSkillingBossInfo(String boss, Integer score)
    {
        //FORM PARAMETERS
        RequestBody formBody = new FormBody.Builder()
                .add("username", getUsernameHash())
                .add("boss", boss)
                .add("score", ""+score)
                .build();

        String file = "processSkillingBoss.php";    //API FILE TO LOAD
        sendToApi(file, formBody);                  //SEND THE NEEDED FILENAME AND VALUES TO THE API REQUEST
    }

    //SEND THE CHARACTER INFO TO THE API
    public void sendQuestCompletionInfo(String quest)
    {
        //FORM PARAMETERS
        RequestBody formBody = new FormBody.Builder()
                .add("username", getUsernameHash())
                .add("quest", quest)
                .build();

        String file = "processQuestCompletion.php"; //API FILE TO LOAD
        sendToApi(file, formBody);                  //SEND THE NEEDED FILENAME AND VALUES TO THE API REQUEST

        //SEND QUEST INFO
        sendQuestInfo();
    }

    //SEND THE CHARACTER INFO TO THE API
    public void sendBosses(String boss)
    {
        //FORM PARAMETERS
        RequestBody formBody = new FormBody.Builder()
                .add("username", getUsernameHash())
                .add("boss", boss)
                .build();

        String file = "processBosses.php";  //API FILE TO LOAD
        sendToApi(file, formBody);          //SEND THE NEEDED FILENAME AND VALUES TO THE API REQUEST
    }

    //SEND THE CHARACTER INFO TO THE API
    public void sendCollectionLog(String item)
    {
        //FORM PARAMETERS
        RequestBody formBody = new FormBody.Builder()
                .add("username", getUsernameHash())
                .add("item", item)
                .build();

        String file = "processCollectionLog.php";   //API FILE TO LOAD
        sendToApi(file, formBody);                  //SEND THE NEEDED FILENAME AND VALUES TO THE API REQUEST
    }

    //SEND THE CHARACTER INFO TO THE API
    public void sendDuelArena(String outcome, String ownCombat, String opponent, String opponentCombat, String winnings)
    {
        //FORM PARAMETERS
        RequestBody formBody = new FormBody.Builder()
                .add("username", getUsernameHash())
                .add("outcome", outcome)
                .add("ownCombat", ownCombat)
                .add("opponent", opponent)
                .add("opponentCombat", opponentCombat)
                .add("winnings", winnings)
                .build();

        String file = "processDuelArena.php";   //API FILE TO LOAD
        sendToApi(file, formBody);              //SEND THE NEEDED FILENAME AND VALUES TO THE API REQUEST
    }

    //SEND THE CHARACTER INFO TO THE API
    public void sendMusicUnlock(String track)
    {
        //FORM PARAMETERS
        RequestBody formBody = new FormBody.Builder()
                .add("username", getUsernameHash())
                .add("track", track)
                .build();

        String file = "processMusicUnlock.php"; //API FILE TO LOAD
        sendToApi(file, formBody);              //SEND THE NEEDED FILENAME AND VALUES TO THE API REQUEST
    }

    //SEND THE CHARACTER INFO TO THE API
    public void sendClueScrollCompletion(String type, String reward)
    {
        //FORM PARAMETERS
        RequestBody formBody = new FormBody.Builder()
                .add("username", getUsernameHash())
                .add("type", type)
                .add("reward", reward)
                .build();

        String file = "processClueScrollCompletion.php";    //API FILE TO LOAD
        sendToApi(file, formBody);                          //SEND THE NEEDED FILENAME AND VALUES TO THE API REQUEST
    }

    //SEND THE CHARACTER LEVEL INFO TO THE API
    public void sendMinigameTime(String minigame, String type, String time)
    {
        //FORM PARAMETERS
        RequestBody formBody = new FormBody.Builder()
                .add("username", getUsernameHash())
                .add("minigame", minigame)
                .add("type", type)
                .add("time", time)
                .build();

        String file = "processMinigameTime.php";   //API FILE TO LOAD
        sendToApi(file, formBody);          //SEND THE NEEDED FILENAME AND VALUES TO THE API REQUEST
    }

    //SEND THE CHARACTER INFO TO THE API
    public boolean sendCharacterInfo()
    {
        //FORM PARAMETERS
        RequestBody formBody = new FormBody.Builder()
                .add("username", getUsernameHash())
                .add("characterName", client.getLocalPlayer().getName())
                .add("characterType", client.getAccountType().name())
                .add("memberDays", ""+client.getVar(VarPlayer.MEMBERSHIP_DAYS))
                .build();

        String file = "getCharacterInfo.php";   //API FILE TO LOAD
        sendToApi(file, formBody);              //SEND THE NEEDED FILENAME AND VALUES TO THE API REQUEST

        sendLevelInfo();
        sendQuestInfo();

        return true;
    }

    //SEND THE CHARACTER LEVEL INFO TO THE API
    private void sendLevelInfo()
    {
        //FORM PARAMETERS
        RequestBody formBody = new FormBody.Builder()
                .add("username", getUsernameHash())
                .add("combatLevel", ""+client.getLocalPlayer().getCombatLevel())
                .add("agility", ""+client.getRealSkillLevel(Skill.AGILITY))
                .add("attack", ""+client.getRealSkillLevel(Skill.ATTACK))
                .add("construction", ""+client.getRealSkillLevel(Skill.CONSTRUCTION))
                .add("cooking", ""+client.getRealSkillLevel(Skill.COOKING))
                .add("crafting", ""+client.getRealSkillLevel(Skill.CRAFTING))
                .add("defence", ""+client.getRealSkillLevel(Skill.DEFENCE))
                .add("farming", ""+client.getRealSkillLevel(Skill.FARMING))
                .add("firemaking", ""+client.getRealSkillLevel(Skill.FIREMAKING))
                .add("fishing", ""+client.getRealSkillLevel(Skill.FISHING))
                .add("fletching", ""+client.getRealSkillLevel(Skill.FLETCHING))
                .add("herblore", ""+client.getRealSkillLevel(Skill.HERBLORE))
                .add("hitpoints", ""+client.getRealSkillLevel(Skill.HITPOINTS))
                .add("hunter", ""+client.getRealSkillLevel(Skill.HUNTER))
                .add("magic", ""+client.getRealSkillLevel(Skill.MAGIC))
                .add("mining", ""+client.getRealSkillLevel(Skill.MINING))
                .add("prayer", ""+client.getRealSkillLevel(Skill.PRAYER))
                .add("ranged", ""+client.getRealSkillLevel(Skill.RANGED))
                .add("runecraft", ""+client.getRealSkillLevel(Skill.RUNECRAFT))
                .add("slayer", ""+client.getRealSkillLevel(Skill.SLAYER))
                .add("smithing", ""+client.getRealSkillLevel(Skill.SMITHING))
                .add("strenght", ""+client.getRealSkillLevel(Skill.STRENGTH))
                .add("thieving", ""+client.getRealSkillLevel(Skill.THIEVING))
                .add("woodcutting", ""+client.getRealSkillLevel(Skill.WOODCUTTING))
                .add("overall", ""+client.getTotalLevel())
                .build();

        String file = "getSkillingInfo.php";    //API FILE TO LOAD
        sendToApi(file, formBody);              //SEND THE NEEDED FILENAME AND VALUES TO THE API REQUEST
    }

    //SEND THE CHARACTER LEVEL INFO TO THE API
    private void sendQuestInfo()
    {
        //FORM PARAMETERS
        RequestBody formBody = new FormBody.Builder()
                .add("username", getUsernameHash())
                .add("questPoints", ""+client.getVar(VarPlayer.QUEST_POINTS))
                .build();

        String file = "getQuestInfo.php";   //API FILE TO LOAD
        sendToApi(file, formBody);          //SEND THE NEEDED FILENAME AND VALUES TO THE API REQUEST
    }

    //SEND API REQUEST (FILENAME AND VALUES NECESSARY)//
    private void sendToApi(String file, RequestBody formBody)
    {
        //CREATE REQUEST
        Request request = new Request.Builder()
                .addHeader("User-Agent", "RuneLite")
                .addHeader("ContentType", "application/x-www-form-urlencoded")
                .url("https://runelogger.com/api/" + file)
                .post(formBody)
                .build();

        //PERFORM REQUEST
        CurrentOkHttpClient.newCall(request).enqueue(new Callback()
        {
            @Override
            public void onFailure(Call call, IOException e)
            {
                log.warn("Error submitting update, caused by {}.", e.getMessage());
            }

            @Override
            public void onResponse(Call call, Response response)
            {
                log.debug("Succesfully send request to api "+file);
                response.close();
            }
        });
    }
}

package com.runelogger;

import lombok.extern.slf4j.Slf4j;

import javax.inject.Inject;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
public class MusicUnlock
{
    @Inject private ApiCommunication apiCommunication;

    public void chatMusicUnlock(String message)
    {
        //EXTRACT THE UNLOCKED MUSIC
        Pattern MusicUnlockPatern = Pattern.compile("You have unlocked a new music track: <col=ff0000>(.*?)(</col>|$)");
        Matcher MusicUnlockMatcher = MusicUnlockPatern.matcher(message);

        //COMMUNICATE UNLOCKED MUSIC TRACK//
        if (MusicUnlockMatcher.find()) apiCommunication.sendMusicUnlock(MusicUnlockMatcher.group(1));
    }
}

package com.runelogger;

import lombok.extern.slf4j.Slf4j;

import javax.inject.Inject;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
public class ClueScrollCompletion
{
    @Inject private ApiCommunication apiCommunication;

    String completedClueScrollType = "";

    public void chatClueScrollCompletion(String message)
    {
        //EXTRACT CLUE SCROLL COMPLETED MESSAGE
        Pattern ClueScrollCompletionPatern = Pattern.compile("<col=ef1020>You have completed (\\d+) (.+) Treasure Trail(s)?.</col>");   //FROM SCREENSHOT API
        Matcher ClueScrollCompletionMatcher = ClueScrollCompletionPatern.matcher(message);

        //GET MATCHES FOR ITEM
        if (ClueScrollCompletionMatcher.find())
        {
            //SET COMPLETED CLUE SCROLL TYPE TO CURRENT
            completedClueScrollType = ClueScrollCompletionMatcher.group(2);
        }

        //CLUE SCROLL IS COMPLETED
        if(completedClueScrollType != "")
        {
            //EXTRACT CLUE SCROLL REWARD AMOUNT MESSAGE
            Pattern ClueScrollRewardPatern = Pattern.compile("<col=ef1020>Your treasure is worth around ([\\d,]+) coins!</col>");   //FROM SCREENSHOT API
            Matcher ClueScrollRewardMatcher = ClueScrollRewardPatern.matcher(message);

            //GET MATCHES FOR REWARD
            if (ClueScrollRewardMatcher.find())
            {
                //SET COMPLETED CLUE SCROLL REWARD TO CURRENT
                String completedClueScrollReward = ClueScrollRewardMatcher.group(1);

                //COMMUNICATE CLUE SCROLL COMPLETION//
                apiCommunication.sendClueScrollCompletion(completedClueScrollType, completedClueScrollReward);

                //RESET COMPLETED CLUE SCROLL TYPE
                completedClueScrollType = "";
            }
        }
    }
}

package com.runelogger;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("runelogger")
public interface RuneloggerConfig extends Config
{
    @ConfigSection(
            name = "Skilling",
            description = "Choose the skilling activities to send to Runelogger.",
            position = 0,
            closedByDefault = false
    )
    String skilling = "skilling";
    @ConfigItem(
            position = 1,
            keyName = "levelingUp",
            name = "Leveling up skills",
            description = "Send reaching new skill (and combat) levels to Runelogger.",
            section = skilling
    )
    default boolean levelingUp() {
        return true;
    }
    @ConfigItem(
            position = 2,
            keyName = "skillingBosses",
            name = "Defeating skilling bosses",
            description = "Send defeating skilling bosses and your score to Runelogger.",
            section = skilling
    )
    default boolean skillingBosses() {
        return true;
    }

    @ConfigSection(
            name = "Combat",
            description = "Choose the combat activities to send to Runelogger.",
            position = 10,
            closedByDefault = false
    )
    String combat = "combat";
    @ConfigItem(
            position = 11,
            keyName = "bosses",
            name = "Killing bosses",
            description = "Send defeating bosses to Runelogger.",
            section = combat
    )
    default boolean bosses() {
        return true;
    }
    @ConfigItem(
            position = 12,
            keyName = "soloCombatMinigame",
            name = "Solo combat minigames",
            description = "Send solo combat minigames to Runelogger.",
            section = combat
    )
    default boolean soloCombatMinigame() {
        return true;
    }
    @ConfigItem(
            position = 13,
            keyName = "duelArena",
            name = "Duel arena results",
            description = "Send results from your duels in the Duel Arena to Runelogger.",
            section = combat
    )
    default boolean duelArena() {
        return false;
    }

    @ConfigSection(
            name = "Story / Lore",
            description = "Choose the story activities to send to Runelogger.",
            position = 20,
            closedByDefault = false
    )
    String stories = "stories";
    @ConfigItem(
            position = 21,
            keyName = "questCompletion",
            name = "Quest completions",
            description = "Send your quest completions to Runelogger.",
            section = stories
    )
    default boolean questCompletion() { return true; }

    @ConfigSection(
            name = "Item unlocks/rewards",
            description = "Choose the item unlocks/rewards to send to Runelogger.",
            position = 30,
            closedByDefault = false
    )
    String items = "items";
    @ConfigItem(
            position = 31,
            keyName = "clueScrollCompletion",
            name = "Clue scroll completions",
            description = "Send completing clue scrolls to Runelogger.",
            section = items
    )
    default boolean clueScrollCompletion() { return true; }
    @ConfigItem(
            position = 32,
            keyName = "collectionLog",
            name = "Collection log entries",
            description = "Send new additions to your collection log to Runelogger.",
            section = items
    )
    default boolean collectionLog() { return true; }

    @ConfigSection(
            name = "Other",
            description = "Choose other smaller activities/unlocks to send to Runelogger.",
            position = 40,
            closedByDefault = true
    )
    String others = "others";
    @ConfigItem(
            position = 41,
            keyName = "musicUnlocks",
            name = "Music Unlocks",
            description = "Send unlocking new music tracks to Runelogger.",
            section = others
    )
    default boolean musicUnlocks() { return false; }
    @ConfigItem(
            position = 42,
            keyName = "tutorialIsland",
            name = "Tutorial Island",
            description = "Send finishing Tutorial Island to Runelogger.",
            section = others
    )
    default boolean tutorialIsland() { return false; }
}
package com.runelogger;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.widgets.WidgetInfo;

import javax.inject.Inject;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
public class QuestCompletion
{
    @Inject private Client client;

    @Inject private ApiCommunication apiCommunication;

    String lastQuestCompleted;

    public void gametickQuestCompletion()
    {
        //PLAYER LEVELED
        if (client.getWidget(WidgetInfo.QUEST_COMPLETED_NAME_TEXT) != null)
        {
            //GET WIDGET
            String questCompleteWidgetText = client.getWidget(WidgetInfo.QUEST_COMPLETED_NAME_TEXT).getText();

            //EXTRACT THE QUEST
            Pattern questCompletePattern1 = Pattern.compile(".+?ve\\.*? (?<verb>been|rebuilt|.+?ed)? ?(?:the )?'?(?<quest>.+?)'?(?: [Qq]uest)?[!.]?$");  //FROM SCREENSHOT PLUGIN
            Matcher questCompleteMatcher1 = questCompletePattern1.matcher(questCompleteWidgetText);

            Pattern questCompletePattern2 = Pattern.compile("'?(?<quest>.+?)'?(?: [Qq]uest)? (?<verb>[a-z]\\w+?ed)?(?: f.*?)?[!.]?$");  //FROM SCREENSHOT PLUGIN
            Matcher questCompleteMatcher2 = questCompletePattern2.matcher(questCompleteWidgetText);

            Matcher questCompleteMatcher = questCompleteMatcher1.matches() ? questCompleteMatcher1 : questCompleteMatcher2;

            String quest = questCompleteMatcher.group("quest");

            //CHECK IF THIS LEVEL UP DIFFERS FROM LAST LEVEL UP (TO AVOID DUPLICATE ENTRIES)
            if(!Objects.equals(lastQuestCompleted, quest))
            {
                apiCommunication.sendQuestCompletionInfo(quest);
                lastQuestCompleted = quest; //SET CURRENT LEVEL UP AS LAST LEVEL UP
            }
        }
    }
}

package com.runelogger;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.widgets.WidgetInfo;

import javax.inject.Inject;

@Slf4j
public class TutorialIsland
{
    @Inject private Client client;

    @Inject private ApiCommunication apiCommunication;

    String lastDialogText = "";

    public void gametickTutorialIsland()
    {
        //PLAYER HAS A DIALOG SPRITE TEXT AND IS IN FROM OF LUMBRIDGE CASTLE//
        if (client.getWidget(WidgetInfo.DIALOG_SPRITE_TEXT) != null && client.getLocalPlayer().getWorldLocation().getRegionID() == 12850) {
            String dialogText = client.getWidget(WidgetInfo.DIALOG_SPRITE_TEXT).getText();

            //TEXT IS WELCOME TO LUMBRIDGE AND IS DIFFERENT FROM LAST DIALOG TEXT//
            if(dialogText == "Welcome to Lumbridge! If you need some help, simply<br>talk to the Lumbridge Guide. Look for the question<br>mark icon on your minimap to find him." && lastDialogText != dialogText)
            {
                //CURRENTLY UNUSED//
                apiCommunication.sendTutorialInfo("completed");
                lastDialogText = dialogText;    //SET LAST DIALOG TEXT TO CURRENT DIALOG TEXT
            }
        }
    }
}

package com.runelogger;

import javax.inject.Inject;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Bosses
{
    @Inject private ApiCommunication apiCommunication;

    public void chatBosses(String message)
    {
        //EXTRACT THE UNLOCKED ITEM
        Pattern BossesPatern = Pattern.compile("Your (.+) kill count is: <col=ff0000>(\\d+)</col>.");   //FROM SCREENSHOT API
        Matcher BossesMatcher = BossesPatern.matcher(message);

        //GET MATCHES FOR ITEM
        if (BossesMatcher.find())
        {
            //COMMUNICATIE BOSS (WHEN BOSS ISN'T TEMPOROSS)
            if(!Objects.equals(BossesMatcher.group(1), "Tempoross")) apiCommunication.sendBosses(BossesMatcher.group(1));
        }
    }
}

