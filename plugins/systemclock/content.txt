package com.soda3x;

import com.google.inject.Provides;
import javax.inject.Inject;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@PluginDescriptor(name = "System Clock")
public class SystemClockPlugin extends Plugin {

	@Inject
	private OverlayManager m_overlayManager;

	@Inject
	private SystemTimeOverlay m_systemTimeOverlay;

	@Override
	protected void startUp() throws Exception {
		m_overlayManager.add(m_systemTimeOverlay);
	}

	@Override
	protected void shutDown() throws Exception {
		m_overlayManager.remove(m_systemTimeOverlay);
	}

	@Provides
	SystemClockConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(SystemClockConfig.class);
	}
}

package com.soda3x;

import java.awt.Dimension;
import java.awt.Graphics2D;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.inject.Inject;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

public class SystemTimeOverlay extends OverlayPanel {

  private final SystemClockConfig m_config;

  @Inject
  private SystemTimeOverlay(SystemClockConfig config) {
    m_config = config;
    setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);
  }

  @Override
  public Dimension render(Graphics2D graphics) {

    TimeFormat selectedFormat = m_config.format();
    String pattern = selectedFormat.getFormatString();
    DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern(pattern);

    String currentTimeAndDay = LocalDateTime.now().format(timeFormatter);

    if (m_config.showTitle()) {
      panelComponent.getChildren().add(TitleComponent.builder()
          .text("System Time")
          .build());
    }

    panelComponent.getChildren().add(TitleComponent.builder()
        .text(currentTimeAndDay)
        .build());

    return super.render(graphics);
  }
}
package com.soda3x;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.ui.overlay.OverlayPosition;

@ConfigGroup("systemclock")
public interface SystemClockConfig extends Config
{
	@ConfigItem(
		keyName = "format",
		name = "Time Format",
		description = "Choose how the time should be displayed"
	)
	default TimeFormat format() {
		return TimeFormat.CLOCK_24H_SS;
	}

	@ConfigItem(
		keyName = "showTitle",
		name = "Show Title",
		description = "Toggle the display of the 'System Time' title.",
		position = 3
    )
    default boolean showTitle() {
			return true;
    }
}

package com.soda3x;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum TimeFormat {
  CLOCK_24H_SS("24-hour + seconds", "HH:mm:ss"),
  CLOCK_24H("24-hour", "HH:mm"),
  CLOCK_12H_SS("12-hour + seconds", "hh:mm:ss a"),
  CLOCK_12H("12-hour", "hh:mm a"),
  DAY_TIME_24H_SS("Day + 24-hour + seconds", "E HH:mm:ss"),
  DAY_TIME_24H("Day + 24-hour", "E HH:mm"),
  DAY_TIME_12H_SS("Day + 12-hour + seconds", "E hh:mm:ss a"),
  DAY_TIME_12H("Day + 12-hour", "E hh:mm a"),
  DATE_TIME_24H_SS("Date + 24-hour + seconds", "d MMM HH:mm:ss"),
  DATE_TIME_24H("Date + 24-hour", "d MMM HH:mm"),
  DATE_TIME_12H_SS("Date + 12-hour + seconds", "d MMM hh:mm:ss a"),
  DATE_TIME_12H("Date + 12-hour", "d MMM hh:mm a");

  private final String displayName;
  private final String formatString;

  @Override
  public String toString() {
    return displayName;
  }
}
package com.soda3x;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SystemClockPluginTest {
	@SuppressWarnings("unchecked")
	public static void main(String[] args) throws Exception {
		ExternalPluginManager.loadBuiltin(SystemClockPlugin.class);
		RuneLite.main(args);
	}
}
