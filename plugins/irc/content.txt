package com.example;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;
import com.irc.IrcPlugin;

public class ExamplePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(IrcPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2020, Ryan W. O'Hara <ryan@ryanwohara.com>, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.irc.core;

import lombok.Getter;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Getter
class Message
{
	private final Map<String, String> tags = new HashMap<>();
	private String source;
	private String command;
	private String[] arguments;

	public static Message parse(String in)
	{
		Message message = new Message();

		if (in.startsWith("@"))
		{
			String[] tags = in.substring(1)
				.split(";");
			for (String tag : tags)
			{
				int eq = tag.indexOf('=');
				if (eq == -1) continue;

				String key = tag.substring(0, eq);
				String value = tag.substring(eq + 1)
					.replace("\\:", ";")
					.replace("\\s", " ")
					.replace("\\\\", "\\")
					.replace("\\r", "\r")
					.replace("\\n", "\n");

				message.tags.put(key, value);
			}

			int sp = in.indexOf(' ');
			in = in.substring(sp + 1);
		}

		if(in.contains("PRIVMSG") || in.contains("NOTICE"))
		{
			if (in.startsWith(":"))
			{
				String name = in.split("!")[0].replace(":", "");
				String target = in.split(" ")[2];

				if (!target.startsWith("#") && !in.contains("NOTICE"))
				{
					name = "(pm) " + name;
				}

				message.tags.put("display-name", name);
				message.tags.put(target, target);
			}
		}
		if (in.contains("NICK"))
		{
			if (in.startsWith(":"))
			{
				String name = in.split("!")[0].replace(":", "");

				message.tags.put("display-name", name);
			}
		}

		if (in.startsWith(":"))
		{
			int sp = in.indexOf(' ');
			message.source = in.substring(1, sp);

			in = in.substring(sp + 1);
		}

		int sp = in.indexOf(' ');
		if (sp == -1)
		{
			message.command = in;
			message.arguments = new String[0];
			return message;
		}

		message.command = in.substring(0, sp);

		String args = in.substring(sp + 1);
		List<String> argList = new ArrayList<>();
		do
		{
			String arg;
			if (args.startsWith(":"))
			{
				arg = args.substring(1);
				sp = -1;
			}
			else
			{
				sp = args.indexOf(' ');
				arg = sp == -1 ? args : args.substring(0, sp);
			}
			args = args.substring(sp + 1);
			argList.add(arg);
		} while (sp != -1);

		message.arguments = argList.toArray(new String[0]);
		return message;
	}
}

/*
 * Copyright (c) 2020, Ryan W. O'Hara <ryan@ryanwohara.com>, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.irc.core;

import java.util.Map;

public interface IrcListener
{
	void privmsg(Map<String, String> tags, String message);

	void notice(Map<String, String> tags, String message);

	void roomstate(Map<String, String> tags);

	void usernotice(Map<String, String> tags, String message);

	void nick(Map<String, String> tags, String nick);
}

/*
 * Copyright (c) 2020, Ryan W. O'Hara <ryan@ryanwohara.com>, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.irc.core;

import lombok.extern.slf4j.Slf4j;

import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;
import java.io.*;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import com.google.common.base.Strings;

@Slf4j
public class IRCClient extends Thread implements AutoCloseable
{
	private static final String HOST = "irc.swiftirc.net";
	private static final String ident = "runelite";
	private static final int PORT = 6697;
	private static final int READ_TIMEOUT = 120000; // ms
	private static final int PING_TIMEOUT = 60000; // ms

	private final IrcListener ircListener;

	private String username;
	private final String channel;
	private final String password;
	private final String delimiter;

	private Socket socket;
	private BufferedReader in;
	private Writer out;
	private long last;
	private boolean pingSent;

	public IRCClient(IrcListener ircListener, String username, String channel, String password, String delimiter)
	{
		setName("IRC");
		this.ircListener = ircListener;
		this.username = username;
		this.channel = channel;
		this.password = password;
		this.delimiter = delimiter;
	}

	@Override
	public void close()
	{
		try
		{
			if (socket != null)
			{
				socket.close();
			}
		}
		catch (IOException ex)
		{
			log.warn("error closing socket", ex);
		}

		in = null;
		out = null;
	}

	@Override
	public void run()
	{
		try
		{
			SocketFactory socketFactory = SSLSocketFactory.getDefault();
			socket = socketFactory.createSocket(HOST, PORT);
			socket.setSoTimeout(READ_TIMEOUT);

			in = new BufferedReader(new InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8));
			out = new OutputStreamWriter(socket.getOutputStream(), StandardCharsets.UTF_8);
		}
		catch (IOException ex)
		{
			log.warn("unable to setup irc client", ex);
			return;
		}

		try
		{
			register(username);

			String line;

			while ((line = read()) != null)
			{
				log.debug("<- {}", line);

				if((line.startsWith(":fiery.ca.us.SwiftIRC.net 001") || line.startsWith(":tardis.en.uk.SwiftIRC.net 001"))
						&& line.contains("Welcome to the SwiftIRC IRC Network"))
				{
					if (!Strings.isNullOrEmpty(this.password))
					{
						nickservID();

						sleep(500);
					}

					join(channel);
				}
				else if (line.split(" ")[1].equals("433"))
				{
					ircListener.notice(Message.parse(line).getTags(), "Nick already in use. Please choose a new one.");
				}

				last = System.currentTimeMillis();
				pingSent = false;

				Message message = Message.parse(line);

				switch (message.getCommand())
				{
					case "PING":
						send("PONG", message.getArguments()[0]);
						break;
					case "PRIVMSG":
						ircListener.privmsg(message.getTags(),
							message.getArguments()[1]);
						break;
					case "NOTICE":
						ircListener.notice(message.getTags(),
								message.getArguments()[1]);
						break;
					case "ROOMSTATE":
						ircListener.roomstate(message.getTags());
						break;
					case "USERNOTICE":
						ircListener.usernotice(message.getTags(),
							message.getArguments().length > 0 ? message.getArguments()[0] : null);
						break;
					case "NICK":
						String nick = message.getArguments()[0];

						ircListener.nick(message.getTags(), nick);
				}
			}
		}
		catch (IOException | InterruptedException ex)
		{
			log.debug("error in irc client", ex);
		}
		finally
		{
			try
			{
				socket.close();
			}
			catch (IOException e)
			{
				log.warn(null, e);
			}
		}
	}

	public boolean isConnected()
	{
		return socket != null && socket.isConnected() && !socket.isClosed();
	}

	public void pingCheck()
	{
		if (out == null)
		{
			// client is not connected yet
			return;
		}

		if (!pingSent && System.currentTimeMillis() - last >= PING_TIMEOUT)
		{
			try
			{
				ping("swiftirc");
				pingSent = true;
			}
			catch (IOException e)
			{
				log.debug("Ping failure, disconnecting.", e);
				close();
			}
		}
		else if (pingSent)
		{
			log.debug("Ping timeout, disconnecting.");
			close();
		}
	}

	private void register(String username) throws IOException
	{
		send("NICK", username);
		send("USER", this.ident, "3", "*", username);
	}

	private void nickservID() throws IOException
	{
		nickserv("identify " + this.password);
	}

	private void join(String channel) throws IOException
	{
		send("JOIN", channel);
	}

	private void ping(String destination) throws IOException
	{
		send("PING", destination);
	}

	public void privmsg(String message) throws IOException
	{
		send("PRIVMSG", channel, message);
	}

	public void actionMsg(String message) throws IOException
	{
		send("PRIVMSG", channel, "\u0001ACTION " + message + "\u0001");
	}

	public void notice(String message) throws IOException
	{
		send(message);
	}

	public void privateMsg(String message) throws IOException
	{
		String[] split = message.split(" ", 2);

		send("PRIVMSG", split[0], split[1]);
	}

	public void nickserv(String message) throws IOException
	{
		send("PRIVMSG", "NickServ", message);
	}

	public void chanserv(String message) throws IOException
	{
		send("PRIVMSG", "ChanServ", message);
	}

	public void botserv(String message) throws IOException
	{
		send("PRIVMSG", "BotServ", message);
	}

	public void hostserv(String message) throws IOException
	{
		send("PRIVMSG", "HostServ", message);
	}

	public void nick(String nick) throws IOException
	{
		send("NICK", nick);
		this.username = nick;
	}

	public void topic(String channel) throws IOException
	{
		send("TOPIC", channel);
	}

	public void umode(String modes) throws IOException
	{
		send("umode2", modes);
	}

	public void mode(String modes) throws IOException
	{
		send("mode", modes);
	}

	private void send(String command, String... args) throws IOException
	{
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.append(command);
		for (int i = 0; i < args.length; ++i)
		{
			stringBuilder.append(' ');
			if (i + 1 == args.length)
			{
				stringBuilder.append(':');
			}
			stringBuilder.append(args[i]);
		}

		log.debug("-> {}", stringBuilder.toString());

		stringBuilder.append("\r\n");

		out.write(stringBuilder.toString());
		out.flush();
	}

	private String read() throws IOException
	{
		String line = in.readLine();
		if (line == null)
		{
			return null;
		}
		int len = line.length();
		while (len > 0 && (line.charAt(len - 1) == '\r' || line.charAt(len - 1) == '\n'))
		{
			--len;
		}

		return line.substring(0, len);
	}

	public String getUsername()
	{
		return this.username;
	}
}

/*
 * Copyright (c) 2020, Ryan W. O'Hara <ryan@ryanwohara.com>, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.irc;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("irc")
public interface IrcConfig extends Config
{
    @ConfigItem(
            keyName = "username",
            name = "Username",
            description = ";use the chat like this.",
            position = 0
    )
    String username();

    @ConfigItem(
            keyName = "channel",
            name = "Channel",
            description = "Channel to join",
            position = 1
    )
    default String channel()
    {
        return "#rshelp";
    }

    @ConfigItem(
            keyName = "password",
            name = "Password (Optional) (not RS)",
            description = "NickServ password (Optional) (NEVER your RS password!)",
            position = 2,
            secret = true
    )
    String password();

    @ConfigItem(
            keyName = "delimiter",
            name = "Delimiter",
            description = ";chat with this character like this",
            position = 3
    )
    default String delimiter() { return ";"; }

}

/*
 * Copyright (c) 2020, Ryan W. O'Hara <ryan@ryanwohara.com>, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.irc;

import static org.apache.commons.text.StringEscapeUtils.escapeHtml4;
import com.google.common.base.Strings;
import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.client.chat.*;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.api.VarClientStr;
import net.runelite.api.events.ScriptCallbackEvent;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import com.irc.core.IRCClient;
import com.irc.core.IrcListener;
import com.irc.IrcPanel;
import net.runelite.client.task.Schedule;

import javax.inject.Inject;
import java.io.IOException;
import java.time.temporal.ChronoUnit;
import java.util.Map;
import java.awt.image.BufferedImage;
import java.io.IOException;

@PluginDescriptor(
		name = "IRC",
		description = "Integrates IRC with the OSRS chatbox",
		enabledByDefault = false
)
@Slf4j
public class IrcPlugin extends Plugin implements IrcListener
{
	@Inject
	private IrcConfig ircConfig;

	@Inject
	private Client client;

	@Inject
	private ChatMessageManager chatMessageManager;

	@Inject
	private ClientToolbar clientToolbar;
	private IrcPanel panel;
	private NavigationButton uiButton;

	private IRCClient IRCClient;

	@Override
	protected void startUp()
	{
		connect();
		startIrcPanel();
	}

	@Override
	protected void shutDown()
	{
		if (IRCClient != null)
		{
			IRCClient.close();
			IRCClient = null;
		}

		stopIrcPanel();
	}

	@Provides
	IrcConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(IrcConfig.class);
	}

	private synchronized void connect()
	{
		if (IRCClient != null)
		{
			log.debug("Terminating IRC client {}", IRCClient);
			IRCClient.close();
			IRCClient = null;
		}

		if (!Strings.isNullOrEmpty(ircConfig.username()))
		{
			String channel;

			if (Strings.isNullOrEmpty(ircConfig.channel()))
			{
				channel = "#rshelp";
			}
			else
			{
				channel = ircConfig.channel().toLowerCase();
				if (!channel.startsWith("#"))
				{
					channel = "#" + channel;
				}

				if (channel.contains(","))
				{
					channel = channel.split(",")[0];
				}

			}

			log.debug("Connecting to IRC as {}", ircConfig.username());

			IRCClient = new IRCClient(
					this,
					ircConfig.username(),
					channel,
					ircConfig.password(),
					ircConfig.delimiter()
			);
			IRCClient.start();
		}
	}

	@Schedule(period = 30, unit = ChronoUnit.SECONDS, asynchronous = true)
	public void checkClient()
	{
		if (IRCClient != null)
		{
			if (IRCClient.isConnected())
			{
				IRCClient.pingCheck();
			}

			if (!IRCClient.isConnected())
			{
				log.debug("Reconnecting...");

				connect();
			}
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged configChanged)
	{
		if (!configChanged.getGroup().equals("irc"))
		{
			return;
		}

		connect();
	}

	private void addChatMessage(String sender, String message)
	{
		String chatMessage = new ChatMessageBuilder()
				.append(ChatColorType.NORMAL)
				.append(message)
				.build();

		if (client.getGameState() == GameState.LOGGED_IN)
		{
			chatMessageManager.queue(QueuedMessage.builder()
					.type(ChatMessageType.FRIENDSCHAT)
					.sender("IRC")
					.name(sender)
					.runeLiteFormattedMessage(stripColors(chatMessage))
					.timestamp((int) (System.currentTimeMillis() / 1000))
					.build());
		}

		IrcPanel.message(formatMessage(sender + ": " + message));
	}

	private String stripColors(String message)
	{
		return message.replaceAll("\u0003([0-9]{1,2})?|\u0015", "");
	}

	private String formatMessage(String message)
	{
		return escapeHtml4(message)
				.replaceAll("[\u000F\u0003]([^0-9]|$)", "</font>$1")
				.replaceAll("\u000310([^\u0003\u000F]+)", "<font color=\"darkcyan\">$1</font>")
				.replaceAll("\u000311([^\u0003\u000F]+)", "<font color=\"cyan\">$1</font>")
				.replaceAll("\u000312([^\u0003\u000F]+)", "<font color=\"blue\">$1</font>")
				.replaceAll("\u000313([^\u0003\u000F]+)", "<font color=\"pink\">$1</font>")
				.replaceAll("\u000314([^\u0003\u000F]+)", "<font color=\"grey\">$1</font>")
				.replaceAll("\u000315([^\u0003\u000F]+)", "<font color=\"lightgrey`\">$1</font>")
				.replaceAll("\u00030?1([^\u0003\u000F]+)", "<font color=\"black\">$1</font>")
				.replaceAll("\u00030?2([^\u0003\u000F]+)", "<font color=\"darkblue\">$1</font>")
				.replaceAll("\u00030?3([^\u0003\u000F]+)", "<font color=\"green\">$1</font>")
				.replaceAll("\u00030?4([^\u0003\u000F]+)", "<font color=\"red\">$1</font>")
				.replaceAll("\u00030?5([^\u0003\u000F]+)", "<font color=\"brown\">$1</font>")
				.replaceAll("\u00030?6([^\u0003\u000F]+)", "<font color=\"purple\">$1</font>")
				.replaceAll("\u00030?7([^\u0003\u000F]+)", "<font color=\"orange\">$1</font>")
				.replaceAll("\u00030?8([^\u0003\u000F]+)", "<font color=\"yellow\">$1</font>")
				.replaceAll("\u00030?9([^\u0003\u000F]+)", "<font color=\"chartreuse\">$1</font>")
				.replaceAll("\u000300?([^\u0003\u000F]+)", "<font color=\"white\">$1</font>");
	}

	@Override
	public void privmsg(Map<String, String> tags, String message)
	{
		String displayName = tags.get("display-name");

		if (message.startsWith("\u0001"))
		{
			message = message.replaceAll("\u0001(ACTION)?", "");
			addChatMessage("* " + displayName, message);
		}
		else
		{
			addChatMessage(displayName, message);
		}
	}

	@Override
	public void notice(Map<String, String> tags, String message)
	{
		String displayName = "(notice) " + tags.get("display-name");
		addChatMessage(displayName, message);
	}

	@Override
	public void roomstate(Map<String, String> tags)
	{
		log.debug("Room state: {}", tags);
	}

	@Override
	public void usernotice(Map<String, String> tags, String message)
	{
		if (client.getGameState() != GameState.LOGGED_IN)
		{
			return;
		}

		String sysmsg = tags.get("system-msg");
		addChatMessage("[System]", sysmsg);
	}

	@Override
	public void nick(Map<String, String> tags, String nick)
	{
		addChatMessage("* Nick change", tags.get("display-name") + " is now known as " + nick);
	}

	@Subscribe
	public void onScriptCallbackEvent(ScriptCallbackEvent scriptCallbackEvent)
	{
		if (!"chatDefaultReturn".equals(scriptCallbackEvent.getEventName()))
		{
			return;
		}

		final int[] intStack = client.getIntStack();
		int intStackCount = client.getIntStackSize();

		String message = client.getVarcStrValue(VarClientStr.CHATBOX_TYPED_TEXT);

		String delimiter = ircConfig.delimiter();

		if (message.startsWith(delimiter + delimiter))
		{
			message = message.substring(2);
			if (message.isEmpty() || IRCClient == null)
			{
				return;
			}

			intStack[intStackCount - 3] = 1;

			try
			{
				if (message.length() > 3) {
					String trimmed = message.substring(3);

					if (message.startsWith(("ns "))) {
						IRCClient.nickserv(trimmed);
					} else if (message.startsWith("cs ")) {
						IRCClient.chanserv(trimmed);
					} else if (message.startsWith("bs ")) {
						IRCClient.botserv(trimmed);
					} else if (message.startsWith("hs ")) {
						IRCClient.hostserv(trimmed);
					} else if (message.startsWith("notice ")) {
						String[] split = message.split(" ", 3);

						if (split.length > 2) {
							IRCClient.notice(message);
							addChatMessage("(notice) -> " + split[1], split[2]);
						}
					} else if (message.startsWith("msg ")) {
						String msg = trimmed.substring(1);

						String[] split = msg.split(" ", 2);
						if (split.length > 1) {
							IRCClient.privateMsg(trimmed.substring(1));
							addChatMessage("(pm) -> " + split[0], split[1]);
						}
					} else if (message.startsWith("me ")) {
						IRCClient.actionMsg(trimmed);
						addChatMessage("* " + ircConfig.username(), trimmed);
					} else if (message.startsWith("mode ")) {
						IRCClient.mode(trimmed.substring(2));
					} else if (message.startsWith("umode ")) {
						IRCClient.umode(trimmed.substring(3));
					} else if (message.startsWith("topic")) {
						String channel = trimmed.substring(2);

						if ((channel.length() == 0) || (channel == " ")) {
							channel = ircConfig.channel();
						}

						IRCClient.topic(channel);
					} else if (message.startsWith("nick ")) {
						IRCClient.nick(trimmed.substring(2));
					} else if (message.startsWith("clear")) {
						IrcPanel.clearLogs();
					}
				}
			}
			catch (IOException e)
			{
				log.warn("failed to send message", e);
			}

			return;
		}
		else if (message.startsWith(ircConfig.delimiter()))
		{
			message = message.substring(1);
			if (message.isEmpty() || IRCClient == null)
			{
				return;
			}

			intStack[intStackCount - 3] = 1;

			try
			{
				IRCClient.privmsg(message);
				addChatMessage(IRCClient.getUsername(), message);
			}
			catch (IOException e)
			{
				log.warn("failed to send message", e);
			}
		}
	}

	private void startIrcPanel()
	{
		final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "icon.png");
		panel = injector.getInstance(IrcPanel.class);
		panel.init();
		uiButton = NavigationButton.builder()
				.tooltip("SwiftIRC")
				.icon(icon)
				.priority(10)
				.panel(panel)
				.build();

		clientToolbar.addNavigation(uiButton);
	}

	private void stopIrcPanel()
	{
		panel.removeAll();

		clientToolbar.removeNavigation(uiButton);
	}
}
/*
 * Copyright (c) 2020, Ryan W. O'Hara <ryan@ryanwohara.com>, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.irc;

import net.runelite.client.ui.PluginPanel;
import java.awt.*;
import java.awt.event.*;
import java.util.List;
import javax.swing.*;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.util.ImageUtil;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class IrcPanel extends PluginPanel
{
    private static final JPanel panel = new JPanel();
    private static final JLabel label = new JLabel();

    void init()
    {
        this.clearMessages();

        this.add(panel, BorderLayout.NORTH);
    }

    private static void addMessage(String message)
    {
        panel.removeAll();

        String existingMessages = label.getText().replace("</body></html>", "");

        message = message.replaceAll("(http[^ ]+)", "<a href=\"$1\" alt=\"$1\">link</a>");

        label.setText(existingMessages + "<div style=\"width:180px;word-wrap:break-word;overflow:hidden;\">" + message + "</div></body></html>");

        panel.add(label);
    }

    private static void clearMessages()
    {
        panel.removeAll();

        label.setText("<html><body style=\"width:180px;overflow:hidden;\"></body></html>");

        panel.add(label);
    }

    public static void message(String message)
    {
        addMessage(message);
    }

    public static void clearLogs() { clearMessages(); }
}

