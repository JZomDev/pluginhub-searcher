package tictac7x.tithe;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TithePluginTest {
	public static void main(String[] args) throws Exception {
		ExternalPluginManager.loadBuiltin(tictac7x.tithe.TithePlugin.class);
		RuneLite.main(args);
	}
}
package tictac7x.tithe;

import net.runelite.api.InventoryID;
import net.runelite.api.ItemContainer;
import net.runelite.api.ItemID;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.ui.overlay.WidgetItemOverlay;

import java.awt.Graphics2D;

public class TitheOverlayInventory extends WidgetItemOverlay {
    private final TithePlugin plugin;
    private final TitheConfig config;

    public int fruits_inventory = 0;

    public TitheOverlayInventory(final TithePlugin plugin, final TitheConfig config) {
        this.plugin = plugin;
        this.config = config;
        showOnInventory();
    }

    public void onItemContainerChanged(final ItemContainerChanged event) {
        if (event.getContainerId() != InventoryID.INVENTORY.getId()) return;

        final ItemContainer inventory = event.getItemContainer();
        this.fruits_inventory = inventory.count(ItemID.GOLOVANOVA_FRUIT) + inventory.count(ItemID.BOLOGANO_FRUIT) + inventory.count(ItemID.LOGAVANO_FRUIT);
    }

    @Override
    public void renderItemOverlay(final Graphics2D graphics, int item_id, final WidgetItem widget_item) {
        if (!plugin.inTitheFarm() || config.getHighlightSeedsColor().getAlpha() == 0) return;

        switch (item_id) {
            case ItemID.GOLOVANOVA_SEED:
            case ItemID.BOLOGANO_SEED:
            case ItemID.LOGAVANO_SEED:
                graphics.setColor(config.getHighlightSeedsColor());
                graphics.fill(widget_item.getCanvasBounds());
                return;
            case ItemID.WATERING_CAN1:
            case ItemID.WATERING_CAN2:
            case ItemID.WATERING_CAN3:
            case ItemID.WATERING_CAN4:
            case ItemID.WATERING_CAN5:
            case ItemID.WATERING_CAN6:
            case ItemID.WATERING_CAN7:
            case ItemID.WATERING_CAN8:
            case ItemID.GRICOLLERS_CAN:
                graphics.setColor(config.getHighlightWateringCanColor());
                graphics.fill(widget_item.getCanvasBounds());
                return;
        }
    }
}
package tictac7x.tithe;

import net.runelite.api.GameObject;
import net.runelite.api.TileObject;

import java.awt.Color;

public class TithePlant {
    // Tithe empty patch.
    protected static final int TITHE_EMPTY_PATCH = 27383;

    // Golovanova plants.
    protected static final int GOLOVANOVA_SEEDLING = 27384;
    protected static final int GOLOVANOVA_SEEDLING_WATERED = 27385;
    protected static final int GOLOVANOVA_SEEDLING_BLIGHTED = 27386;
    protected static final int GOLOVANOVA_PLANT_1 = 27387;
    protected static final int GOLOVANOVA_PLANT_1_WATERED = 27388;
    protected static final int GOLOVANOVA_PLANT_1_BLIGHTED = 27389;
    protected static final int GOLOVANOVA_PLANT_2 = 27390;
    protected static final int GOLOVANOVA_PLANT_2_WATERED = 27391;
    protected static final int GOLOVANOVA_PLANT_2_BLIGHTED = 27392;
    protected static final int GOLOVANOVA_GROWN = 27393;
    protected static final int GOLOVANOVA_GROWN_BLIGHTED = 27394;

    // Bologano plants.
    protected static final int BOLOGANO_SEEDLING = 27395;
    protected static final int BOLOGANO_SEEDLING_WATERED = 27396;
    protected static final int BOLOGANO_SEEDLING_BLIGHTED = 27397;
    protected static final int BOLOGANO_PLANT_1 = 27398;
    protected static final int BOLOGANO_PLANT_1_WATERED = 27399;
    protected static final int BOLOGANO_PLANT_1_BLIGHTED = 27400;
    protected static final int BOLOGANO_PLANT_2 = 27401;
    protected static final int BOLOGANO_PLANT_2_WATERED = 27402;
    protected static final int BOLOGANO_PLANT_2_BLIGHTED = 27403;
    protected static final int BOLOGANO_GROWN = 27404;
    protected static final int BOLOGANO_GROWN_BLIGHTED = 27405;

    // Logavano plants.
    protected static final int LOGAVANO_SEEDLING = 27406;
    protected static final int LOGAVANO_SEEDLING_WATERED = 27407;
    protected static final int LOGAVANO_SEEDLING_BLIGHTED = 27408;
    protected static final int LOGAVANO_PLANT_1 = 27409;
    protected static final int LOGAVANO_PLANT_1_WATERED = 27410;
    protected static final int LOGAVANO_PLANT_1_BLIGHTED = 27411;
    protected static final int LOGAVANO_PLANT_2 = 27412;
    protected static final int LOGAVANO_PLANT_2_WATERED = 27413;
    protected static final int LOGAVANO_PLANT_2_BLIGHTED = 27414;
    protected static final int LOGAVANO_GROWN = 27415;
    protected static final int LOGAVANO_GROWN_BLIGHTED = 27416;

    // One plant cycle duration in game ticks.
    private final double DURATION_CYCLE_GAME_TICKS = 100;

    public enum State {
        SEEDLING_DRY,
        SEEDLING_WATERED,
        PLANT_1_DRY,
        PLANT_1_WATERED,
        PLANT_2_DRY,
        PLANT_2_WATERED,
        GROWN,
        BLIGHTED
    }

    private final TitheConfig config;
    private GameObject game_object;

    // First state can't be anything else than dry seedling.
    public State state = State.SEEDLING_DRY;

    // Number of ticks to render the progress pie.
    private int ticks = 0;

    public TithePlant(final TitheConfig config, final GameObject seedling) {
        this.config = config;
        this.game_object = seedling;
    }

    public GameObject getGameObject() {
        return this.game_object;
    }

    public void setGameObject(final GameObject game_object) {
        // Not seedling or plant.
        if (!isPatch(game_object)) return;

        // Update game object reference.
        this.game_object = game_object;

        switch (game_object.getId()) {
            case GOLOVANOVA_SEEDLING_WATERED:
            case BOLOGANO_SEEDLING_WATERED:
            case LOGAVANO_SEEDLING_WATERED:
                this.state = State.SEEDLING_WATERED;
                return;

            case GOLOVANOVA_PLANT_1:
            case BOLOGANO_PLANT_1:
            case LOGAVANO_PLANT_1:
                if (this.state != State.PLANT_1_DRY) this.ticks = 0;
                this.state = State.PLANT_1_DRY;
                return;

            case GOLOVANOVA_PLANT_1_WATERED:
            case BOLOGANO_PLANT_1_WATERED:
            case LOGAVANO_PLANT_1_WATERED:
                this.state = State.PLANT_1_WATERED;
                return;

            case GOLOVANOVA_PLANT_2:
            case BOLOGANO_PLANT_2:
            case LOGAVANO_PLANT_2:
                if (this.state != State.PLANT_2_DRY) this.ticks = 0;
                this.state = State.PLANT_2_DRY;
                return;

            case GOLOVANOVA_PLANT_2_WATERED:
            case BOLOGANO_PLANT_2_WATERED:
            case LOGAVANO_PLANT_2_WATERED:
                this.state = State.PLANT_2_WATERED;
                return;

            case GOLOVANOVA_GROWN:
            case BOLOGANO_GROWN:
            case LOGAVANO_GROWN:
                if (this.state != State.GROWN) this.ticks = 0;
                this.state = State.GROWN;
                return;

            case GOLOVANOVA_SEEDLING_BLIGHTED:
            case GOLOVANOVA_PLANT_1_BLIGHTED:
            case GOLOVANOVA_PLANT_2_BLIGHTED:
            case BOLOGANO_SEEDLING_BLIGHTED:
            case BOLOGANO_PLANT_1_BLIGHTED:
            case BOLOGANO_PLANT_2_BLIGHTED:
            case LOGAVANO_SEEDLING_BLIGHTED:
            case LOGAVANO_PLANT_1_BLIGHTED:
            case LOGAVANO_PLANT_2_BLIGHTED:
                if (this.state != State.BLIGHTED) this.ticks = 0;
                this.state = State.BLIGHTED;
                return;
        }
    }

    /**
     * Update how many ticks the cycle has lasted.
     * We need to update the state based on game ticks, because based on game object spawns doesn't work (too far away).
     */
    public void onGameTick() {
        this.ticks++;
        if (this.ticks != DURATION_CYCLE_GAME_TICKS) return;

        // Reset progress pie.
        this.ticks = 0;

        // Cycle complete, update the state.
        switch (this.state) {
            case SEEDLING_DRY:
            case PLANT_1_DRY:
            case PLANT_2_DRY:
            case GROWN:
                this.state = State.BLIGHTED;
                return;

            case SEEDLING_WATERED:
                this.state = State.PLANT_1_DRY;
                return;

            case PLANT_1_WATERED:
                this.state = State.PLANT_2_DRY;
                return;

            case PLANT_2_WATERED:
                this.state = State.GROWN;
                return;
        }
    }

    public Color getCycleColor() {
        switch (state) {
            case SEEDLING_DRY:
            case PLANT_1_DRY:
            case PLANT_2_DRY:
                return config.getPlantsDryColor();

            case SEEDLING_WATERED:
            case PLANT_1_WATERED:
            case PLANT_2_WATERED:
                return config.getPlantsWateredColor();

            case GROWN:
                return config.getPlantsGrownColor();

            case BLIGHTED:
                return config.getPlantsBlightedColor();
        }

        return null;
    }

    public float getCycleProgress() {
        return -1 + (float) (ticks / (DURATION_CYCLE_GAME_TICKS));
    }

    public static boolean isSeedling(final TileObject patch) {
        final int id = patch.getId();
        return id == GOLOVANOVA_SEEDLING || id == BOLOGANO_SEEDLING || id == LOGAVANO_SEEDLING;
    }

    public static boolean isDry(final TileObject patch) {
        final int id = patch.getId();
        return (
               id == GOLOVANOVA_SEEDLING
            || id == GOLOVANOVA_PLANT_1
            || id == GOLOVANOVA_PLANT_2
            || id == BOLOGANO_SEEDLING
            || id == BOLOGANO_PLANT_1
            || id == BOLOGANO_PLANT_2
            || id == LOGAVANO_SEEDLING
            || id == LOGAVANO_PLANT_1
            || id == LOGAVANO_PLANT_2
        );
    }

    public static boolean isWatered(final TileObject patch) {
        final int id = patch.getId();
        return (
               id == GOLOVANOVA_SEEDLING_WATERED
            || id == GOLOVANOVA_PLANT_1_WATERED
            || id == GOLOVANOVA_PLANT_2_WATERED
            || id == BOLOGANO_SEEDLING_WATERED
            || id == BOLOGANO_PLANT_1_WATERED
            || id == BOLOGANO_PLANT_2_WATERED
            || id == LOGAVANO_SEEDLING_WATERED
            || id == LOGAVANO_PLANT_1_WATERED
            || id == LOGAVANO_PLANT_2_WATERED
        );
    }

    public static boolean isGrown(final TileObject patch) {
        final int id = patch.getId();
        return (
               id == GOLOVANOVA_GROWN
            || id == BOLOGANO_GROWN
            || id == LOGAVANO_GROWN
        );
    }

    public static boolean isBlighted(final TileObject patch) {
        final int id = patch.getId();
        return (
               id == GOLOVANOVA_SEEDLING_BLIGHTED
            || id == GOLOVANOVA_PLANT_1_BLIGHTED
            || id == GOLOVANOVA_PLANT_2_BLIGHTED
            || id == GOLOVANOVA_GROWN_BLIGHTED
            || id == BOLOGANO_SEEDLING_BLIGHTED
            || id == BOLOGANO_PLANT_1_BLIGHTED
            || id == BOLOGANO_PLANT_2_BLIGHTED
            || id == BOLOGANO_GROWN_BLIGHTED
            || id == LOGAVANO_SEEDLING_BLIGHTED
            || id == LOGAVANO_PLANT_1_BLIGHTED
            || id == LOGAVANO_PLANT_2_BLIGHTED
            || id == LOGAVANO_GROWN_BLIGHTED
        );
    }

    public static boolean isEmptyPatch(final TileObject patch) {
        return patch.getId() == TITHE_EMPTY_PATCH;
    }

    public static boolean isPatch(final TileObject patch) {
        return isDry(patch) || isWatered(patch) || isGrown(patch) || isBlighted(patch) || isEmptyPatch(patch);
    }
}

package tictac7x.tithe;

import net.runelite.api.events.VarbitChanged;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.ui.overlay.OverlayPanel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;

import net.runelite.api.Client;
import net.runelite.api.Varbits;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

public class TitheOverlayPoints extends OverlayPanel {
    private final static int TITHE_FARM_POINTS = Varbits.TITHE_FARM_POINTS;
    private final static int TITHE_FARM_SACK = Varbits.TITHE_FARM_SACK_AMOUNT;

    private final TithePlugin plugin;
    private final TitheConfig config;
    private final Client client;

    public int points_total = 0;
    public int fruits_sack = 0;


    public TitheOverlayPoints(final TithePlugin plugin, final TitheConfig config, final Client client) {
        this.plugin = plugin;
        this.config = config;
        this.client = client;

        setPosition(OverlayPosition.TOP_LEFT);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
    }

    public void onWidgetLoaded(final WidgetLoaded event) {
        // Not tithe points widget.
        if (event.getGroupId() != WidgetInfo.TITHE_FARM.getGroupId()) return;

        if (config.showCustomPoints()) {
            this.hideNativePoints();
        } else {
            this.showNativePoints();
        }
    }

    public void onConfigChanged(final ConfigChanged event) {
        // Wrong config changed.
        if (!plugin.inTitheFarm() || !event.getGroup().equals(TitheConfig.group) || !event.getKey().equals(TitheConfig.points)) return;

        // Correct config changed.
        this.checkWidget();
    }

    public void showNativePoints() {
        final Widget widget_tithe = client.getWidget(WidgetInfo.TITHE_FARM);
        if (widget_tithe != null) widget_tithe.setHidden(false);
    }

    public void hideNativePoints() {
        final Widget widget_tithe = client.getWidget(WidgetInfo.TITHE_FARM);
        if (widget_tithe != null) widget_tithe.setHidden(true);
    }

    public void startUp() {
        this.checkWidget();
    }

    public void shutDown() {
        showNativePoints();
    }

    private void checkWidget() {
        if (config.showCustomPoints()) {
            this.hideNativePoints();
        } else {
            this.showNativePoints();
        }
    }

    public void onVarbitChanged(final VarbitChanged event) {
        switch (event.getVarbitId()) {
            case TITHE_FARM_POINTS:
                this.points_total = event.getValue();
                return;
            case TITHE_FARM_SACK:
                this.fruits_sack = event.getValue();
                return;
        }
    }

    @Override
    public Dimension render(final Graphics2D graphics) {
        if (!plugin.inTitheFarm() || !config.showCustomPoints()) return null;

        final int fruits = plugin.fruitsInInventory();
        final int points_earned = fruits / 3 + fruits / 100 * 2;

        panelComponent.getChildren().clear();

        // Points.
        panelComponent.getChildren().add(LineComponent.builder()
            .left("Points:").leftColor(new Color(200, 200, 200))
            .right(this.points_total + (points_earned > 0 ? " + " + points_earned : "")).rightColor(Color.green)
            .build()
        );

        return super.render(graphics);
    }
}

package tictac7x.tithe;

import net.runelite.api.GameObject;
import net.runelite.api.TileObject;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ProgressPieComponent;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.util.HashMap;
import java.util.Map;

public class TitheOverlayPlants extends OverlayPanel {
    private final TithePlugin plugin;
    private final TitheConfig config;

    public final Map<LocalPoint, TithePlant> plants = new HashMap<>();

    public TitheOverlayPlants(final TithePlugin plugin, final TitheConfig config) {
        this.plugin = plugin;
        this.config = config;

        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.UNDER_WIDGETS);
    }

    /**
     * Update plant state to watered based on the game object.
     * @param event - Tithe plant spawned event.
     */
    public void onGameObjectSpawned(final GameObjectSpawned event) {
        if (!plugin.inTitheFarm()) return;

        final GameObject game_object = event.getGameObject();
        if (!TithePlant.isPatch(game_object)) return;

        final LocalPoint location_patch = game_object.getLocalLocation();

        // Empty patch, plant completed.
        if (game_object.getId() == TithePlant.TITHE_EMPTY_PATCH) {
            this.plants.remove(location_patch);

        // Update plant state.
        } else if (this.plants.containsKey(location_patch)) {
            this.plants.get(location_patch).setGameObject(game_object);
        }

        // GameObject is seedling.
        if (TithePlant.isSeedling(game_object)) {
            this.plants.put(location_patch, new TithePlant(config, game_object));
        }
    }

    public void onGameTick() {
        // Update plants progress.
        for (final TithePlant plant : this.plants.values()) {
            plant.onGameTick();
        }
    }

    @Override
    public Dimension render(final Graphics2D graphics) {
        if (!plugin.inTitheFarm()) return null;

        for (final TithePlant plant : this.plants.values()) {
            renderPie(graphics, plant.getGameObject(), plant.getCycleColor(), plant.getCycleProgress());
        }

        return null;
    }

    private void renderPie(final Graphics2D graphics, final TileObject object, final Color color, final float progress) {
        if (color == null || color.getAlpha() == 0) return;

        try {
            final ProgressPieComponent pie = new ProgressPieComponent();
            pie.setPosition(object.getCanvasLocation(0));
            pie.setProgress(-progress);
            pie.setBorderColor(color.darker());
            pie.setFill(color);
            pie.render(graphics);
        } catch (final Exception ignored) {}
    }
}

package tictac7x.tithe;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.events.VarbitChanged;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;

@Slf4j
@PluginDescriptor(
	name = "Tithe Farm Improved",
	description = "Improve overall experience for Tithe farm",
	tags = { "tithe", "farm" },
	conflicts = "Tithe Farm"
)
public class TithePlugin extends Plugin {
	private String plugin_version = "v0.4";
	private String plugin_message = "" +
		"<colHIGHLIGHT>Tithe Farm Improved " + plugin_version + ":<br>" +
		"<colHIGHLIGHT>* Updated points calculation based on new forumula";

	private static final int SEED_TABLE = 27430;
	private boolean in_tithe_farm = false;

	@Inject
	private TitheConfig config;

	@Inject
	private Client client;

	@Inject
	private ClientThread client_thread;

	@Inject
	private OverlayManager overlays;

	@Inject
	private ItemManager items;

	@Inject
	private ConfigManager configs;

	@Inject
	private ChatMessageManager chat_messages;

	@Provides
	TitheConfig provideConfig(final ConfigManager configs) {
		return configs.getConfig(tictac7x.tithe.TitheConfig.class);
	}

	private TitheOverlayPlants overlay_plants;
	private TitheOverlayPoints overlay_points;
	private TitheOverlayPatches overlay_patches;
	private TitheOverlayInventory overlay_inventory;

	@Override
	protected void startUp() {
		overlay_points = new TitheOverlayPoints(this, config, client);
		overlay_patches = new TitheOverlayPatches(this, config, client);
		overlay_plants = new TitheOverlayPlants(this, config);
		overlay_inventory = new TitheOverlayInventory(this, config);

		overlays.add(overlay_points);
		overlays.add(overlay_patches);
		overlays.add(overlay_plants);
		overlays.add(overlay_inventory);

		overlay_points.startUp();
	}

	@Override
	protected void shutDown() {
		overlay_points.shutDown();

		overlays.remove(overlay_points);
		overlays.remove(overlay_patches);
		overlays.remove(overlay_plants);
		overlays.remove(overlay_inventory);
	}

	@Subscribe
	public void onGameObjectSpawned(final GameObjectSpawned event) {
		overlay_plants.onGameObjectSpawned(event);
		if (event.getGameObject().getId() == SEED_TABLE) this.in_tithe_farm = true;
	}

	@Subscribe
	public void onItemContainerChanged(final ItemContainerChanged event) {
		overlay_inventory.onItemContainerChanged(event);
	}

	@Subscribe
	public void onVarbitChanged(final VarbitChanged event) {
		overlay_points.onVarbitChanged(event);
	}

	@Subscribe
	public void onGameTick(final GameTick event) {
		overlay_plants.onGameTick();
	}

	@Subscribe
	public void onWidgetLoaded(final WidgetLoaded event) {
		overlay_points.onWidgetLoaded(event);
	}

	@Subscribe
	public void onConfigChanged(final ConfigChanged event) {
		overlay_points.onConfigChanged(event);
	}

	@Subscribe
	public void onGameStateChanged(final GameStateChanged event) {
		// Plugin update message.
		if (event.getGameState() == GameState.LOGGED_IN && !config.getVersion().equals(plugin_version)) {
			configs.setConfiguration(TitheConfig.group, TitheConfig.version, plugin_version);
			chat_messages.queue(QueuedMessage.builder()
				.type(ChatMessageType.CONSOLE)
				.runeLiteFormattedMessage(plugin_message)
				.build()
			);
		}

		if (event.getGameState() == GameState.LOADING) this.in_tithe_farm = false;
	}

	public boolean inTitheFarm() {
		return in_tithe_farm ;
	}

	public int fruitsInInventory() {
		return overlay_inventory.fruits_inventory;
	}
}

package tictac7x.tithe;

import net.runelite.api.DecorativeObject;
import net.runelite.api.GameObject;
import net.runelite.api.GroundObject;
import net.runelite.api.Scene;
import net.runelite.api.Tile;
import net.runelite.api.WallObject;
import net.runelite.client.ui.overlay.OverlayPanel;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Shape;

import net.runelite.api.Client;
import net.runelite.api.MenuAction;
import net.runelite.api.MenuEntry;
import net.runelite.api.TileObject;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;

public class TitheOverlayPatches extends OverlayPanel {
    private final Client client;
    private final TithePlugin plugin;
    private final TitheConfig config;

    public TitheOverlayPatches(final TithePlugin plugin, final TitheConfig config, final Client client) {
        this.plugin = plugin;
        this.config = config;
        this.client = client;

        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.UNDER_WIDGETS);
    }

    @Override
    public Dimension render(final Graphics2D graphics) {
        if (plugin.inTitheFarm()) {
            final MenuEntry[] menu_entries = client.getMenuEntries();

            for (final MenuEntry menu_entry : menu_entries) {
                final MenuAction menu_option = menu_entry.getType();
                if (menu_option == MenuAction.CANCEL || menu_option == MenuAction.WALK) continue;

                final TileObject object = findTileObject(client, menu_entry.getParam0(), menu_entry.getParam1(), menu_entry.getIdentifier());

                if (object != null && TithePlant.isPatch(object)) {
                    renderTile(graphics, object, config.getPatchesHighlightOnHoverColor());
                    break;
                }
            }
        }

        return null;
    }

    private TileObject findTileObject(final Client client, final int x, final int y, final int id) {
        try {
            final Scene scene = client.getScene();
            final Tile[][][] tiles = scene.getTiles();
            final Tile tile = tiles[client.getPlane()][x][y];

            if (tile != null) {
                for (GameObject game_object : tile.getGameObjects()) {
                    if (game_object != null && game_object.getId() == id) {
                        return game_object;
                    }
                }

                final WallObject wall_object = tile.getWallObject();
                if (wall_object != null && wall_object.getId() == id) {
                    return wall_object;
                }

                final DecorativeObject decorative_object = tile.getDecorativeObject();
                if (decorative_object != null && decorative_object.getId() == id) {
                    return decorative_object;
                }

                final GroundObject ground_object = tile.getGroundObject();
                if (ground_object != null && ground_object.getId() == id) {
                    return ground_object;
                }
            }
        } catch (Exception ignored) {}

        return null;
    }

    private void renderTile(final Graphics2D graphics, final TileObject object, final Color color) {
        if (color == null || color.getAlpha() == 0) return;

        try {
            final Shape shape = object.getCanvasTilePoly();

            // Area border.
            graphics.setColor(color.darker());
            graphics.setStroke(new BasicStroke(1));
            graphics.draw(shape);

            // Area fill.
            graphics.setColor(color);
            graphics.fill(shape);
        } catch (final Exception ignored) {}
    }
}

package tictac7x.tithe;

import net.runelite.client.config.Config;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import java.awt.Color;

@ConfigGroup(TitheConfig.group)
public interface TitheConfig extends Config {
	String group = "tictac7x-tithe";
	String version = "version";

	@ConfigItem(
		position = 1,
		keyName = version,
		name = "Version",
		description = "Plugin version",
		hidden = true
	) default String getVersion() {
		return "0";
	}

	@ConfigSection(
		position = 1,
		name = "Farming patches",
		description = "Highlight farming patches and show progress of plants"
	) String section_patches = "farming_patches";

		@Alpha
		@ConfigItem(
			position = 1,
			keyName = "plants_dry",
			name = "Dry plants",
			description = "Highlight dry plants that need to be watered.",
			section = section_patches
		) default Color getPlantsDryColor() {
			return new Color(255, 180, 0, 100);
		}

		@Alpha
		@ConfigItem(
			position = 2,
			keyName = "plants_watered",
			name = "Watered plants",
			description = "Highlight watered plants",
			section = section_patches
		) default Color getPlantsWateredColor() {
			return new Color(60, 240, 255, 100);
		}

		@Alpha
		@ConfigItem(
			position = 3,
			keyName = "plants_grown",
			name = "Grown plants",
			description = "Highlight grown plants",
			section = section_patches
		) default Color getPlantsGrownColor() {
			return new Color(0, 255, 0, 100);
		}

		@Alpha
		@ConfigItem(
			position = 4,
			keyName = "plants_blighted",
			name = "Blighted plants",
			description = "Highlight blighted plants",
			section = section_patches
		) default Color getPlantsBlightedColor() {
			return new Color(200, 200, 200, 100);
		}

		@Alpha
		@ConfigItem(
			position = 5,
			keyName = "farm_patches_hover",
			name = "Farm patches",
			description = "Highlight farm patches on hover",
			section = section_patches
		) default Color getPatchesHighlightOnHoverColor() {
			return new Color(200, 200, 200, 60);
		}

	@ConfigSection(
		position = 2,
		name = "Inventory",
		description = "Highlight items needed for the tithe farming in the inventory"
	) String section_inventory = "inventory";

		@Alpha
		@ConfigItem(
			position = 1,
			keyName = "seeds",
			name = "Seeds",
			description = "Highlight seeds",
			section = section_inventory
		) default Color getHighlightSeedsColor() {
			return new Color(0, 255, 0, 80);
		}

		@Alpha
		@ConfigItem(
			position = 1,
			keyName = "watering_cans",
			name = "Watering cans",
			description = "Highlight watering cans",
			section = section_inventory
		) default Color getHighlightWateringCanColor() {
			return new Color(60, 240, 255, 100);
	}

	@ConfigSection(
		position = 3,
		name = "Points",
		description = "Show custom information about tithe farm points"
	) String section_points = "points";

		String points = "points";
		@ConfigItem(
			position = 1,
			keyName = points,
			name = "Show custom points widget",
			description = "Show total, earned points and harvested fruits.",
			section = section_points
		) default boolean showCustomPoints() {
			return true;
		}
}

