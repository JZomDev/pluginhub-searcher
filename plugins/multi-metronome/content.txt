package com.pwootage.runelite;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class MetronomeOffsetPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(MultiMetronomePlugin.class);
		RuneLite.main(args);
	}
}
package com.pwootage.runelite;

import java.time.Instant;
import java.util.function.Supplier;

public class Beeper {

  private Supplier<Integer> config_offset;
  private Supplier<Integer> config_tickCount;

  private int tickCount = 0;
  private Instant lastTicked = Instant.MIN;
  private BeepBoop lastBeepBoop = BeepBoop.NONE;

  enum BeepBoop {
    BEEP,
    BOOP,
    NONE
  }

  public Beeper(Supplier<Integer> offset, Supplier<Integer> tickCount) {
    this.config_offset = offset;
    this.config_tickCount = tickCount;
  }

  public BeepBoop shouldBeep(Instant lastTick) {
    // don't tick if we've already ticked this tick
    if (lastTicked.equals(lastTick) || lastTicked.isAfter(lastTick)) {
      return BeepBoop.NONE;
    }
    Instant now = Instant.now();

    boolean triggered = false;
    if (now.isAfter(lastTick.plusMillis(this.config_offset.get()))) {
      triggered = true;
      lastTicked = now;
    }

    if (triggered) {
      tickCount++;
      if (tickCount >= this.config_tickCount.get()) {
        tickCount = 0;
      } else {
        triggered = false;
      }
    }

    if (triggered) {
      if (lastBeepBoop == BeepBoop.BEEP) {
        lastBeepBoop = BeepBoop.BOOP;
      } else {
        lastBeepBoop = BeepBoop.BEEP;
      }
      return lastBeepBoop;
    } else {
      return BeepBoop.NONE;
    }
  }
}

package com.pwootage.runelite;

import net.runelite.api.SoundEffectVolume;
import net.runelite.client.config.*;

@ConfigGroup("multimetronome")
public interface MultiMetronomeConfig extends Config {
  int VOLUME_MAX = SoundEffectVolume.HIGH;

  @ConfigSection(
    name = "Metronome 1",
    description = "",
    position = 100
  )
  String SECTION_BEEPER1 = "beeper1";

  @ConfigSection(
    name = "Metronome 2",
    description = "",
    position = 200
  )
  String SECTION_BEEPER2 = "beeper2";

  @ConfigSection(
    name = "Metronome 3",
    description = "",
    position = 300
  )
  String SECTION_BEEPER3 = "beeper3";

  // BEEPER 1

  @Range(max = VOLUME_MAX)
  @ConfigItem(
    keyName = "beepVolume1",
    name = "Tick volume",
    description = "Configures the volume of the tick sound. A value of 0 will disable tick sounds.",
    section = SECTION_BEEPER1
  )
  default int beep1_beepVolume() {
    return SoundEffectVolume.MEDIUM_HIGH;
  }

  @Range(max = VOLUME_MAX)
  @ConfigItem(
    keyName = "boopVolume1",
    name = "Tock volume",
    description = "Configures the volume of the tock sound. A value of 0 will disable tock sounds.",
    section = SECTION_BEEPER1
  )
  default int beep1_boopVolume() {
    return SoundEffectVolume.MUTED;
  }

  @ConfigItem(
    keyName = "tickCountBeeper1",
    name = "Tick count",
    description = "Configures the tick on which a sound will be played.",
    section = SECTION_BEEPER1
  )
  @Units(Units.TICKS)
  default int beep1_tickCount() {
    return 1;
  }

  @Range(max = 600)
  @ConfigItem(
    keyName = "offset1",
    name = "Tick offset (ms)",
    description = "Configures the offset after the tick which the audio will play (in millseconds)",
    section = SECTION_BEEPER1
  )
  @Units(Units.MILLISECONDS)
  default int beep1_offset() {
    return 0;
  }

  // BEEPER 2

  @Range(max = VOLUME_MAX)
  @ConfigItem(
    keyName = "beepVolume2",
    name = "Tick volume",
    description = "Configures the volume of the tick sound. A value of 0 will disable tick sounds.",
    section = SECTION_BEEPER2
  )
  default int beep2_beepVolume() {
    return SoundEffectVolume.MUTED;
  }

  @Range(max = VOLUME_MAX)
  @ConfigItem(
    keyName = "boopVolume2",
    name = "Tock volume",
    description = "Configures the volume of the tock sound. A value of 0 will disable tock sounds.",
    section = SECTION_BEEPER2
  )
  default int beep2_boopVolume() {
    return SoundEffectVolume.MEDIUM_HIGH;
  }

  @ConfigItem(
    keyName = "tickCountBeeper2",
    name = "Tick count",
    description = "Configures the tick on which a sound will be played.",
    section = SECTION_BEEPER2
  )
  @Units(Units.TICKS)
  default int beep2_tickCount() {
    return 1;
  }

  @Range(max = 600)
  @ConfigItem(
    keyName = "offset2",
    name = "Tick offset (ms)",
    description = "Configures the offset after the tick which the audio will play (in millseconds)",
    section = SECTION_BEEPER2
  )
  @Units(Units.MILLISECONDS)
  default int beep2_offset() {
    return 300;
  }

  // BEEPER 3

  @Range(max = VOLUME_MAX)
  @ConfigItem(
    keyName = "beepVolume3",
    name = "Tick volume",
    description = "Configures the volume of the tick sound. A value of 0 will disable tick sounds.",
    section = SECTION_BEEPER3
  )
  default int beep3_beepVolume() {
    return SoundEffectVolume.MUTED;
  }

  @Range(max = VOLUME_MAX)
  @ConfigItem(
    keyName = "boopVolume3",
    name = "Tock volume",
    description = "Configures the volume of the tock sound. A value of 0 will disable tock sounds.",
    section = SECTION_BEEPER3
  )
  default int beep3_boopVolume() {
    return SoundEffectVolume.MUTED;
  }

  @ConfigItem(
    keyName = "tickCountBeeper3",
    name = "Tick count",
    description = "Configures the tick on which a sound will be played.",
    section = SECTION_BEEPER3
  )
  @Units(Units.TICKS)
  default int beep3_tickCount() {
    return 1;
  }

  @Range(max = 600)
  @ConfigItem(
    keyName = "offset3",
    name = "Tick offset (ms)",
    description = "Configures the offset after the tick which the audio will play (in millseconds)",
    section = SECTION_BEEPER3
  )
  @Units(Units.MILLISECONDS)
  default int beep3_offset() {
    return 500;
  }
}

package com.pwootage.runelite;

import com.google.inject.Provides;

import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.BeforeRender;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import java.time.Instant;

@Slf4j
@PluginDescriptor(
  name = "Multi Metronome",
  tags = {"tick"}
)
public class MultiMetronomePlugin extends Plugin {

  @Inject
  private Client client;

  @Inject
  private MultiMetronomeConfig config;

  private Beeper beeper1 = new Beeper(() -> config.beep1_offset(), () -> config.beep1_tickCount());
  private Beeper beeper2 = new Beeper(() -> config.beep2_offset(), () -> config.beep2_tickCount());
  private Beeper beeper3 = new Beeper(() -> config.beep3_offset(), () -> config.beep3_tickCount());

  private Instant lastTick = null;

  @Override
  protected void startUp() throws Exception {
  }

  @Override
  protected void shutDown() throws Exception {
  }

  @Provides
  MultiMetronomeConfig provideConfig(ConfigManager configManager) {
    return configManager.getConfig(MultiMetronomeConfig.class);
  }

  @Subscribe
  public void onGameTick(GameTick tick) {
    lastTick = Instant.now();
  }

  @Subscribe
  public void onBeforeRender(BeforeRender tick) {
    if (lastTick == null) {
      return;
    }

    playBeepBoop(beeper1.shouldBeep(lastTick), config.beep1_beepVolume(), config.beep1_boopVolume());
    playBeepBoop(beeper2.shouldBeep(lastTick), config.beep2_beepVolume(), config.beep2_boopVolume());
    playBeepBoop(beeper3.shouldBeep(lastTick), config.beep3_beepVolume(), config.beep3_boopVolume());
  }


  private void playBeepBoop(Beeper.BeepBoop beepBoop, int beepVolume, int boopVolume) {
    if (beepBoop == Beeper.BeepBoop.NONE) {
      return;
    }
    if (beepVolume <= 0 && boopVolume <= 0) {
      return;
    }

    if (beepBoop == Beeper.BeepBoop.BEEP && beepVolume <= 0) {
      beepBoop = Beeper.BeepBoop.BOOP;
    } else if (beepBoop == Beeper.BeepBoop.BOOP && boopVolume <= 0) {
      beepBoop = Beeper.BeepBoop.BEEP;
    }

    // As playSoundEffect only uses the volume argument when the in-game volume isn't muted, sound effect volume
    // needs to be set to the value desired for beeps or boops then reset to the previous value.
    Preferences preferences = client.getPreferences();
    int previousVolume = preferences.getSoundEffectVolume();

    if (beepBoop == Beeper.BeepBoop.BEEP) {
      preferences.setSoundEffectVolume(beepVolume);
      client.playSoundEffect(SoundEffectID.GE_INCREMENT_PLOP, beepVolume);
    } else {
      preferences.setSoundEffectVolume(boopVolume);
      client.playSoundEffect(SoundEffectID.GE_DECREMENT_PLOP, boopVolume);
    }

    preferences.setSoundEffectVolume(previousVolume);
  }
}

