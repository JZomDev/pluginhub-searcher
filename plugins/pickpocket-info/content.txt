package com.diabolickal.pickpocketinfo;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PickpocketInfoPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PickpocketInfoPlugin.class);
		RuneLite.main(args);
	}
}
package com.diabolickal.pickpocketinfo;

import com.google.inject.Provides;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;
import java.time.Instant;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@PluginDescriptor(
        name = "Pickpocket Info",
        description = "Shows helpful pickpocketing info.",
        tags = {"thieving", "pickpocket"},
        loadWhenOutdated = true,
        enabledByDefault = false
)

@Slf4j
public class PickpocketInfoPlugin extends Plugin
{
    private float attempts, passes, percent;
    private int dodgyCharges = -1, pouchNum, brokenDodgy, totalPouches, lastPouchNum;
    private String lastTarget;
    private Instant lastPickpocket;
    private boolean hasDodgy, targetHasPouches;
    @Getter
    private int bestStreak = 0;
    @Getter
    private int currentStreak = 0;

    private static final Pattern DODGY_CHECK_PATTERN = Pattern.compile(
            "Your dodgy necklace has (\\d+) charges? left\\.");
    private static final Pattern DODGY_PROTECT_PATTERN = Pattern.compile(
            "Your dodgy necklace protects you\\..*It has (\\d+) charges? left\\.");
    private static final Pattern DODGY_BREAK_PATTERN = Pattern.compile(
            "Your dodgy necklace protects you\\..*It then crumbles to dust\\.");
    @Inject
    private Client client;

    @Inject
    private PickpocketInfoOverlay overlay;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private ClientThread clientThread;

    @Inject
    private PickpocketInfoConfig config;

    @Override
    protected void startUp() throws Exception
    {
        overlayManager.add(overlay);
        dodgyCharges = config.dodgyNecklace();
        clientThread.invokeLater(() ->
        {
            final ItemContainer container = client.getItemContainer(InventoryID.EQUIPMENT);
            final ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);

            if (container != null)
            {
                CheckForEquippedDodgy(container.getItems());
                CheckForPouches(inventory.getItems());
            }
        });
    }
    @Override
    protected void shutDown()
    {
        overlayManager.remove(overlay);
    }
    @Subscribe
    public void onChatMessage(ChatMessage chatMessage)
    {
        if(chatMessage.getType() == ChatMessageType.GAMEMESSAGE || chatMessage.getType() == ChatMessageType.SPAM)
        {
            CheckDodgy(chatMessage);
            CheckPickpocket(chatMessage);
        }
    }
    @Subscribe
    public void onItemContainerChanged(ItemContainerChanged event)
    {
        if (event.getItemContainer() == client.getItemContainer(InventoryID.EQUIPMENT))
        {
            CheckForEquippedDodgy(event.getItemContainer().getItems());

        }
        if(event.getItemContainer() == client.getItemContainer(InventoryID.INVENTORY))
        {
            CheckForPouches(event.getItemContainer().getItems());
        }

    }
    @Subscribe
    public void onGameStateChanged(GameStateChanged event)
    {
        if (event.getGameState() == GameState.LOGIN_SCREEN)
        {
            lastPickpocket = null;
            if(config.resetType() == ResetType.LOGOUT)
            {
                ResetRate();
            }
        }
    }

    @Provides
    PickpocketInfoConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(PickpocketInfoConfig.class);
    }

    private void ResetRate()
    {
        attempts = 0.0f;
        passes = 0.0f;
        brokenDodgy = 0;
        targetHasPouches = false;
        currentStreak = 0;
        bestStreak = 0;
    }


    private void CheckForEquippedDodgy(Item[] items)
    {
        Item Necklace = items[EquipmentInventorySlot.AMULET.getSlotIdx()];
        hasDodgy = (Necklace.getId() == 21143);
    }

    private void CheckDodgy(ChatMessage chatMessage)
    {
        Matcher dodgyCheck = DODGY_CHECK_PATTERN.matcher(chatMessage.getMessage());
        Matcher dodgyProtect = DODGY_PROTECT_PATTERN.matcher(chatMessage.getMessage());
        Matcher dodgyBreak = DODGY_BREAK_PATTERN.matcher(chatMessage.getMessage());
        if (dodgyCheck.find())
        {
            dodgyCharges = Integer.parseInt(dodgyCheck.group(1));
            config.dodgyNecklace(dodgyCharges);
        }
        else if(dodgyProtect.find())
        {
            dodgyCharges = Integer.parseInt(dodgyProtect.group(1));
            config.dodgyNecklace(dodgyCharges);
        }
        else if(dodgyBreak.find())
        {
            dodgyCharges = 10;
            brokenDodgy++;
            config.dodgyNecklace(dodgyCharges);
        }
    }

    private void CheckForPouches(Item[] items)
    {
        pouchNum = 0;
        for (int i = 0; i < items.length; i++)
        {
            //Get the name because each NPC's coin pouch has a different ID
            String name = client.getItemDefinition(items[i].getId()).getName();
            if(name.toLowerCase().equals("coin pouch"))
            {
                pouchNum = items[i].getQuantity();
                targetHasPouches = true;

                break;
            }
        }
        if(pouchNum > lastPouchNum)
            totalPouches++;

        lastPouchNum = pouchNum;
    }

    private void CheckPickpocket(ChatMessage chatMessage)
    {
        String msg = chatMessage.getMessage().toLowerCase();
        if (msg.contains("you attempt to pick"))
        {
            //Check chat messages for target, attempt, and successes
            String pickTarget = msg.split("pick the ")[1];
            pickTarget = pickTarget.split("'s")[0];
            lastPickpocket = Instant.now();
            if (!pickTarget.equals(lastTarget))
            {
                ResetCounter();
            }
            attempts += 1.0f;
            lastTarget = pickTarget;
        }
        if (msg.contains("you pick the"))
        {
            passes += 1.0f;
            currentStreak += 1;
            bestStreak = Math.max(bestStreak, currentStreak);
            percent = (passes / attempts) * 100;
        }
        if (msg.contains("you fail to pick"))
        {
            percent = (passes / attempts) * 100;
        }
        if (msg.contains("been stunned"))
        {
            currentStreak = 0;
        }
    }

    //Called when the pickpocket target changes
    private void ResetCounter()
    {
        attempts = 0.0f;
        passes = 0.0f;
        totalPouches = 0;
        brokenDodgy = 0;
        targetHasPouches = false;
        currentStreak = 0;
        bestStreak = 0;
    }

    //Encapsulation stuff
    public float attempts() {return  attempts; }
    public float percent()
    {
        return percent;
    }
    public int dodgyCharges()
    {
        return dodgyCharges;
    }
    public Instant lastPickpocket()
    {
        return lastPickpocket;
    }
    public int pouchNum()
    {
        return pouchNum;
    }
    public boolean hasDodgy()
    {
        return hasDodgy;
    }
    public boolean targetHasPouches()
    {
        return targetHasPouches;
    }
    public int brokenDodgy(){return  brokenDodgy;}
    public int totalPouches(){return  totalPouches;}

}

package com.diabolickal.pickpocketinfo;

import net.runelite.api.Client;
import net.runelite.api.Varbits;
import net.runelite.client.ui.overlay.OverlayMenuEntry;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

import javax.inject.Inject;
import java.awt.*;
import java.time.Duration;
import java.time.Instant;

import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

public class PickpocketInfoOverlay extends OverlayPanel
{

    private final Client client;
    private final PickpocketInfoPlugin plugin;
    private final PickpocketInfoConfig config;

    @Inject
    PickpocketInfoOverlay(Client client, PickpocketInfoPlugin plugin, PickpocketInfoConfig config)
    {
        super(plugin);
        this.client = client;
        this.plugin = plugin;
        this.config = config;
        setPosition(OverlayPosition.TOP_LEFT);
        getMenuEntries().add(new OverlayMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "PP overlay"));
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        String charges = "?";
        if(plugin.dodgyCharges() >= 0)
            charges = ""+plugin.dodgyCharges();
        if(!plugin.hasDodgy())
            charges = "";

        if(plugin.lastPickpocket() != null && (config.overlayDuration() <1  || Duration.between(plugin.lastPickpocket(), Instant.now()).getSeconds() < config.overlayDuration()))
        {
            panelComponent.getChildren().add(TitleComponent.builder()
                    .text("Pickpocket Info")
                    .color(Color.WHITE)
                    .build());
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Rate")
                    .right(String.format("%.1f",plugin.percent())+"%")
                    .build());
            if(config.showSessionTotal())
            {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Attempts")
                        .right(String.format("%.0f",plugin.attempts()))
                        .build());
            }
            if(config.showDodgy())
            {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left(!plugin.hasDodgy() ? "No Dodgy" : "Dodgy Charges")
                        .leftColor(plugin.dodgyCharges() <= config.warnThreshold() || !plugin.hasDodgy() ? Color.RED : Color.WHITE)
                        .right(charges)
                        .rightColor(plugin.dodgyCharges() <= config.warnThreshold() && plugin.hasDodgy() ? Color.RED : Color.WHITE)
                        .build());
            }
            if(config.showPouches() && plugin.targetHasPouches())
            {
                int maxNumberOfPouches;
                if (client.getVarbitValue(Varbits.DIARY_ARDOUGNE_ELITE) > 0) {
                    maxNumberOfPouches = 140;
                } else if (client.getVarbitValue(Varbits.DIARY_ARDOUGNE_HARD) > 0) {
                    maxNumberOfPouches = 84;
                } else if (client.getVarbitValue(Varbits.DIARY_ARDOUGNE_MEDIUM) > 0) {
                    maxNumberOfPouches = 56;
                } else {
                    maxNumberOfPouches = 28;
                }
                Color pouchColor = plugin.pouchNum() >= maxNumberOfPouches - 1 ? Color.RED : Color.WHITE;
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Pouches")
                        .leftColor(pouchColor)
                        .right(""+plugin.pouchNum())
                        .rightColor(pouchColor)
                        .build());
            }
            if(config.showBrokenDodgys())
            {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Broken Dodgies")
                        .right((String.format("%d",plugin.brokenDodgy())))
                        .build());
            }
            if(config.showPouchesTotal())
            {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Total Pouches")
                        .right((String.format("%d",plugin.totalPouches())))
                        .build());
            }
            if (config.showBestStreak())
            {
                panelComponent.getChildren().add(LineComponent.builder()
                    .left("Best Streak")
                    .right((String.format("%d",plugin.getBestStreak())))
                    .build());
            }
            if(config.showCurrentStreak())
            {
                panelComponent.getChildren().add(LineComponent.builder()
                    .left("Current Streak")
                    .right((String.format("%d",plugin.getCurrentStreak())))
                    .build());
            }
        }
        return super.render(graphics);
    }
}

package com.diabolickal.pickpocketinfo;
import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public enum ResetType
{
    LOGOUT("Logout"),
    EXIT("Exit");

    private String name;
}

package com.diabolickal.pickpocketinfo;

import net.runelite.client.config.*;

@ConfigGroup("Pickpocket Info")
public interface PickpocketInfoConfig extends Config
{

    @ConfigItem(
            keyName = "showDodgy",
            name = "Show Dodgy Necklace Info",
            description = "Whether or not to display Dodgy Necklace charges.",
            position = 0
    )
    default boolean showDodgy()
    {
        return true;
    }

    @ConfigItem(
            keyName = "showPouches",
            name = "Show Pouches Counter",
            description = "Whether or not to display the number pouches in your inventory on the overlay.",
            position = 1
    )
    default boolean showPouches()
    {
        return true;
    }

    @ConfigItem(
            keyName = "showSessionTotal",
            name = "Show Attempts",
            description = "Whether or not to display the number of pickpocket attempts for this session",
            position = 2
    )
    default boolean showSessionTotal()
    {
        return false;
    }

    @Range(
            min = 1,
            max = 10
    )
    @ConfigItem(
            keyName = "warnThreshold",
            name = "Warning Threshold",
            description = "At how many dodgy necklace charges should the overlay text turn red.",
            position = 4
    )
    default int warnThreshold(){ return 1;}

    @Range(
            max = 30
    )
    @ConfigItem(
            keyName = "overlayDuration",
            name = "Overlay Duration",
            description = "How long the overlay lasts between pickpockets in seconds. Zero means overlay will never go away.",
            position = 5
    )
    default int overlayDuration(){ return 10;}

    @ConfigItem(
            keyName = "resetType",
            name = "Reset Rate on",
            description = "When to reset the timer. On logout or upon exiting Runelite.",
            position = 6
    )
    default ResetType resetType()
    {
        return ResetType.EXIT;
    }

    /* ======== Extras Dropdown ======== */
    @ConfigSection(
            name = "Extra Stats",
            description = "Settings for showing extra, 'fun', stats",
            position = 7
    )
    String showExtras = "Show Extra";


    @ConfigItem(
            keyName = "showBrokenDodgys",
            name = "Show Broken Dodgy Counter",
            description = "Whether or not to display the number of dodgy necklaces you've broken.",
            section = showExtras,
            position = 8
    )
    default boolean showBrokenDodgys()
    {
        return false;
    }

    @ConfigItem(
            keyName = "showPouchesTotal",
            name = "Show Total Pouches",
            description = "Whether or not to display the number of total pouches you've stolen.",
            section = showExtras,
            position = 9
    )
    default boolean showPouchesTotal()
    {
        return false;
    }

    @ConfigItem(
        keyName = "showBestStreak",
        name = "Show Best Success Streak",
        description = "Whether or not to show your best pickpocket streak",
        section = showExtras,
        position = 10
    )
    default boolean showBestStreak()
    {
        return false;
    }

    @ConfigItem(
        keyName = "showCurrentStreak",
        name = "Show Current Success Streak",
        description = "Whether or not to show your current pickpocket streak",
        section = showExtras,
        position = 11
    )
    default boolean showCurrentStreak()
    {
        return false;
    }


    /*===HIDDEN===*/

    //Keeps track of dodgy necklace charges even if Runelite is closed
    @ConfigItem(
            keyName = "dodgyNecklace",
            name = "",
            description = "",
            hidden = true
    )
    default int dodgyNecklace()
    {
        return -1;
    }

    @ConfigItem(
            keyName = "dodgyNecklace",
            name = "",
            description = ""
    )
    void dodgyNecklace(int dodgyNecklace);

    //Keeps track of total pickpocket attempts
    @ConfigItem(
            keyName = "totalAttempts",
            name = "",
            description = "",
            hidden = true
    )
    default int totalAttempts()
    {
        return 0;
    }

    @ConfigItem(
            keyName = "totalAttempts",
            name = "",
            description = ""
    )
    void totalAttempts(int totalAttempts);

}



