package org.RaidSpellChecker;

public class SpellRuneRequirement
{
    private final int runeId;
    private final int amount;

    @Override
    public String toString()
    {
        return "RuneID: " + runeId + ", Amount: " + amount;
    }

    public SpellRuneRequirement(int runeId, int amount)
    {
        this.runeId = runeId;
        this.amount = amount;
    }

    public int getRuneId()
    {
        return runeId;
    }

    public int getAmount()
    {
        return amount;
    }
}
package org.RaidSpellChecker;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.RuneLite;
import net.runelite.client.audio.AudioPlayer;

import javax.inject.Inject;
import java.nio.file.Path;

@Slf4j
@RequiredArgsConstructor(onConstructor_ = {@Inject})
public class SoundPlayer
{
    private final AudioPlayer audioPlayer;
    private final RaidSpellCheckerConfig config;

    public void play(String fileName, int volume)
    {
        try
        {
            float gainDb = 20f * (float) Math.log10(config.soundVolume() / 100f);
            audioPlayer.play(this.getClass(), "/sounds/" + fileName, gainDb);
        }
        catch (Exception e)
        {
            log.error(e.getMessage(),e);
        }
    }
}


package org.RaidSpellChecker;

import com.google.inject.Provides;

import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.util.ArrayList;
import java.util.List;

import static org.RaidSpellChecker.Spellbook.*;

@Slf4j
@PluginDescriptor(name = "Raid Spell Checker")
public class RaidSpellCheckerPlugin extends Plugin
{
    @Inject
    private Client client;

    @Inject
    private RaidSpellCheckerConfig config;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private MissingSpellOverlay missingSpellOverlay;

    @Inject
    private SoundPlayer soundPlayer;

    // === Constants === //
    private static final WorldArea TOA_ZONE = new WorldArea(3357, 9113, 5, 4, 0);
    private static final WorldArea TOB_ZONE = new WorldArea(3670, 3215, 8, 8, 0);
    private static final int TOA_REGION = 13454;
    private static final int TOB_REGION = 14642;

    // === Dynamic State === //
    private WorldPoint lastPlayerLocation;
    private WorldPoint currentPlayerLocation;
    private WorldArea COX_ZONE;

    // === COX Scene State === //
    private boolean justLoadedRaidScene = false;
    private boolean raidLayoutChecked = false;
    private int lastRaidBaseRegion = -1;
    private long lastSceneIdentity = -1;

    // === Runtime Flags === //
    private boolean wrongSpellbook;
    private boolean noBookOfTheDead;


    @Override
    protected void startUp() throws Exception
    {
        log.info("Raid Rune Checker started!");
        overlayManager.add(missingSpellOverlay);
    }

    @Override
    protected void shutDown() throws Exception
    {
        overlayManager.remove(missingSpellOverlay);
        log.info("Raid Rune Checker stopped!");
    }

    public WorldPoint getPlayerLocation()
    {
        if (client.getLocalPlayer() == null) return null;
        return client.getLocalPlayer().getWorldLocation();
    }

    public List<String> getSelectedSpellsCOX()
    {
        RaidSpellCheckerConfig.Spellbook activeSpellbook = config.spellSelectionCOX();
        List<String> selected = new ArrayList<>();
        int currentSpellbook = client.getVarbitValue(Varbits.SPELLBOOK);
        if (currentSpellbook != activeSpellbook.ordinal())
        {
            selected.add(WRONG_SPELLBOOK);
            return selected;
        }
        switch (activeSpellbook)
        {
            case STANDARD:
                if (config.useAirCOX()) selected.add(AIR_SPELL);
                if (config.useEarthCOX()) selected.add(EARTH_SPELL);
                if (config.useFireCOX()) selected.add(FIRE_SPELL);
                if (config.useWaterCOX()) selected.add(WATER_SPELL);
                break;
            case ARCEUUS:
                if (config.useDemonbaneCOX()) selected.add(DEMONBANE_SPELL);
                if (config.useGraspCOX()) selected.add(GRASP_SPELL);
                if (config.useThrallsCOX()) selected.add(THRALL_SPELL);
                if (config.useDeathChargeCOX()) selected.add(DEATH_CHARGE_SPELL);
                if (config.useMarkOfDarknessCOX()) selected.add(MARK_OF_DARKNESS_SPELL);
                break;
            case ANCIENT:
                if (config.useSmokeCOX()) selected.add(SMOKE_SPELL);
                if (config.useShadowCOX()) selected.add(SHADOW_SPELL);
                if (config.useBloodCOX()) selected.add(BLOOD_SPELL);
                if (config.useIceCOX()) selected.add(ICE_SPELL);
                break;
            case LUNAR:
                if (config.useCureCOX()) selected.add(CURE_SPELL);
                if (config.usePotShareCOX()) selected.add(POT_SHARE);
                if (config.useVengeCOX()) selected.add(VENGE_SPELL);
                if (config.useHumidifyCOX()) selected.add(HUMIDIFY_SPELL);
                break;
        }
        return selected;
    }

    public List<String> getSelectedSpellsTOB()
    {
        RaidSpellCheckerConfig.Spellbook activeSpellbook = config.spellSelectionTOB();
        List<String> selected = new ArrayList<>();
        int currentSpellbook = client.getVarbitValue(Varbits.SPELLBOOK);
        if (currentSpellbook != activeSpellbook.ordinal())
        {
            selected.add(WRONG_SPELLBOOK);
            return selected;
        }
        switch (activeSpellbook)
        {
            case STANDARD:
                if (config.useAirTOB()) selected.add(AIR_SPELL);
                if (config.useEarthTOB()) selected.add(EARTH_SPELL);
                if (config.useFireTOB()) selected.add(FIRE_SPELL);
                if (config.useWaterTOB()) selected.add(WATER_SPELL);
                break;
            case ARCEUUS:
                if (config.useDemonbaneTOB()) selected.add(DEMONBANE_SPELL);
                if (config.useGraspTOB()) selected.add(GRASP_SPELL);
                if (config.useThrallsTOB()) selected.add(THRALL_SPELL);
                if (config.useDeathChargeTOB()) selected.add(DEATH_CHARGE_SPELL);
                if (config.useMarkOfDarknessTOB()) selected.add(MARK_OF_DARKNESS_SPELL);
                break;
            case ANCIENT:
                if (config.useSmokeTOB()) selected.add(SMOKE_SPELL);
                if (config.useShadowTOB()) selected.add(SHADOW_SPELL);
                if (config.useBloodTOB()) selected.add(BLOOD_SPELL);
                if (config.useIceTOB()) selected.add(ICE_SPELL);
                break;
            case LUNAR:
                if (config.useCureTOB()) selected.add(CURE_SPELL);
                if (config.usePotShareTOB()) selected.add(POT_SHARE);
                if (config.useVengeTOB()) selected.add(VENGE_SPELL);
                if (config.useHumidifyTOB()) selected.add(HUMIDIFY_SPELL);
                break;
        }
        return selected;
    }

    public List<String> getSelectedSpellsTOA()
    {
        RaidSpellCheckerConfig.Spellbook activeSpellbook = config.spellSelectionTOA();
        List<String> selected = new ArrayList<>();
        int currentSpellbook = client.getVarbitValue(Varbits.SPELLBOOK);
        if (currentSpellbook != activeSpellbook.ordinal())
        {
            selected.add(WRONG_SPELLBOOK);
            return selected;
        }
        switch (activeSpellbook)
        {
            case STANDARD:
                if (config.useAirTOA()) selected.add(AIR_SPELL);
                if (config.useEarthTOA()) selected.add(EARTH_SPELL);
                if (config.useFireTOA()) selected.add(FIRE_SPELL);
                if (config.useWaterTOA()) selected.add(WATER_SPELL);
                break;
            case ARCEUUS:
                if (config.useDemonbaneTOA()) selected.add(DEMONBANE_SPELL);
                if (config.useGraspTOA()) selected.add(GRASP_SPELL);
                if (config.useThrallsTOA()) selected.add(THRALL_SPELL);
                if (config.useDeathChargeTOA()) selected.add(DEATH_CHARGE_SPELL);
                if (config.useMarkOfDarknessTOA()) selected.add(MARK_OF_DARKNESS_SPELL);
                break;
            case ANCIENT:
                if (config.useSmokeTOA()) selected.add(SMOKE_SPELL);
                if (config.useShadowTOA()) selected.add(SHADOW_SPELL);
                if (config.useBloodTOA()) selected.add(BLOOD_SPELL);
                if (config.useIceTOA()) selected.add(ICE_SPELL);
                break;
            case LUNAR:
                if (config.useCureTOA()) selected.add(CURE_SPELL);
                if (config.usePotShareTOA()) selected.add(POT_SHARE);
                if (config.useVengeTOA()) selected.add(VENGE_SPELL);
                if (config.useHumidifyTOA()) selected.add(HUMIDIFY_SPELL);
                break;
        }
        return selected;
    }

    @Subscribe
    public void onGameTick(GameTick event)
    {
        if (client.getLocalPlayer() == null) return;
        currentPlayerLocation = getPlayerLocation();
        if (lastPlayerLocation == null)
        {
            lastPlayerLocation = currentPlayerLocation;
            return;
        }
        WorldPoint previous = lastPlayerLocation;
        lastPlayerLocation = currentPlayerLocation;
        if (config.enableTOA() && !previous.equals(currentPlayerLocation) && !previous.isInArea(TOA_ZONE) && currentPlayerLocation.isInArea(TOA_ZONE) && previous.getRegionID() == TOA_REGION)
        {
            if (!processSpells(getSelectedSpellsTOA()))
            {
                if (config.enablePopup())
                {
                    if (wrongSpellbook) missingSpellOverlay.show(WRONG_SPELLBOOK, config.popupDuration());
                    else if (noBookOfTheDead) missingSpellOverlay.show(NO_BOOK_OF_THE_DEAD, config.popupDuration());
                    else missingSpellOverlay.show(MISSING_RUNES, config.popupDuration());
                }
                if (config.enableSoundEffect()) playSound(config.soundEffect());
            }
        }
        else if (config.enableTOB() && !previous.equals(currentPlayerLocation) && !previous.isInArea(TOB_ZONE) && currentPlayerLocation.isInArea(TOB_ZONE) && previous.getRegionID() == TOB_REGION)
        {
            if (!processSpells(getSelectedSpellsTOB()))
            {
                if (config.enablePopup())
                {
                    if (wrongSpellbook) missingSpellOverlay.show(WRONG_SPELLBOOK, config.popupDuration());
                    else if (noBookOfTheDead) missingSpellOverlay.show(NO_BOOK_OF_THE_DEAD, config.popupDuration());
                    else missingSpellOverlay.show(MISSING_RUNES, config.popupDuration());
                }
                if (config.enableSoundEffect()) playSound(config.soundEffect());
            }

        }
        // === COX HANDLING. IF I EVER MEET WHO DESIGNED THIS RAID LAYOUT WE'RE THROWING HANDS === //
        else if (config.enableCox())
        {
            int flowerID = 29864;
            GameObject flower = findObjectInScene(client, flowerID);
            if (flower != null && justLoadedRaidScene && !raidLayoutChecked && client.isInInstancedRegion())
            {
                int[] regions = client.getMapRegions();
                if (regions == null || regions.length == 0) return;
                int baseRegion = regions[0];
                long sceneIdentity = flower.getWorldLocation().hashCode();
                if (baseRegion != lastRaidBaseRegion || sceneIdentity != lastSceneIdentity)
                {
                    lastRaidBaseRegion = baseRegion;
                    lastSceneIdentity = sceneIdentity;
                    raidLayoutChecked = true;
                    justLoadedRaidScene = false;
                    getRaidLayout(currentPlayerLocation);
                }
            }
            if (!previous.equals(currentPlayerLocation) && !previous.isInArea(COX_ZONE) && currentPlayerLocation.isInArea(COX_ZONE))
            {
                if (!processSpells(getSelectedSpellsCOX()))
                {
                    if (config.enablePopup())
                    {

                        if (wrongSpellbook) missingSpellOverlay.show(WRONG_SPELLBOOK, config.popupDuration());
                        else if (noBookOfTheDead) missingSpellOverlay.show(NO_BOOK_OF_THE_DEAD, config.popupDuration());
                        else missingSpellOverlay.show(MISSING_RUNES, config.popupDuration());
                    }
                    if (config.enableSoundEffect()) playSound(config.soundEffect());
                }
            }
            // === //
        }
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged event)
    {
        if (event.getGameState() == GameState.LOADING)
        {
            // Scene is unloading, reset flags
            justLoadedRaidScene = true;
            raidLayoutChecked = false;
        }
    }

    public boolean processSpells(List<String> spells)
    {
        wrongSpellbook = false;
        noBookOfTheDead = false;
        for (String spell : spells)
        {
            switch (spell)
            {
                case WRONG_SPELLBOOK:
                    wrongSpellbook = true;
                    return false;
                case THRALL_SPELL:
                    if (!SpellCastingHelper.canCastAnySpell(client, Spellbook.THRALL_SPELLS))
                    {
                        if (!hasBookOfTheDead())
                        {
                            noBookOfTheDead = true;
                        }
                        return false;
                    }
                    break;
                case AIR_SPELL:
                    if (!SpellCastingHelper.canCastAnySpell(client, Spellbook.AIR_SPELLS)) return false;
                    break;
                case EARTH_SPELL:
                    if (!SpellCastingHelper.canCastAnySpell(client, Spellbook.EARTH_SPELLS)) return false;
                    break;
                case FIRE_SPELL:
                    if (!SpellCastingHelper.canCastAnySpell(client, Spellbook.FIRE_SPELLS)) return false;
                    break;
                case WATER_SPELL:
                    if (!SpellCastingHelper.canCastAnySpell(client, Spellbook.WATER_SPELLS)) return false;
                    break;
                case DEMONBANE_SPELL:
                    if (!SpellCastingHelper.canCastAnySpell(client, Spellbook.DEMONBANE_SPELLS)) return false;
                    break;
                case GRASP_SPELL:
                    if (!SpellCastingHelper.canCastAnySpell(client, Spellbook.GRASP_SPELLS)) return false;
                    break;
                case DEATH_CHARGE_SPELL:
                    if (!SpellCastingHelper.canCastSpell(client, Spellbook.DEATH_CHARGE)) return false;
                    break;
                case MARK_OF_DARKNESS_SPELL:
                    if (!SpellCastingHelper.canCastSpell(client, Spellbook.MARK_OF_DARKNESS)) return false;
                    break;
                case SMOKE_SPELL:
                    if (!SpellCastingHelper.canCastAnySpell(client, Spellbook.SMOKE_SPELLS)) return false;
                    break;
                case SHADOW_SPELL:
                    if (!SpellCastingHelper.canCastAnySpell(client, Spellbook.SHADOW_SPELLS)) return false;
                    break;
                case BLOOD_SPELL:
                    if (!SpellCastingHelper.canCastAnySpell(client, Spellbook.BLOOD_SPELLS)) return false;
                    break;
                case ICE_SPELL:
                    if (!SpellCastingHelper.canCastAnySpell(client, Spellbook.ICE_SPELLS)) return false;
                    break;
                case CURE_SPELL:
                    if (!SpellCastingHelper.canCastAnySpell(client, Spellbook.CURE_SPELLS)) return false;
                    break;
                case POT_SHARE:
                    if (!SpellCastingHelper.canCastAnySpell(client, Spellbook.POT_SHARE_SPELLS)) return false;
                    break;
                case VENGE_SPELL:
                    if (!SpellCastingHelper.canCastSpell(client, Spellbook.VENGEANCE)) return false;
                    break;
                case HUMIDIFY_SPELL:
                    if (!SpellCastingHelper.canCastSpell(client, Spellbook.HUMIDIFY)) return false;
                    break;
                default:
                    return true;
            }
        }
        return true;
    }

    private boolean hasBookOfTheDead()
    {
        List<ItemContainer> containers = new ArrayList<>();
        ItemContainer equipment = client.getItemContainer(InventoryID.EQUIPMENT);
        ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);

        if (equipment != null) containers.add(equipment);
        if (inventory != null) containers.add(inventory);

        for (ItemContainer container : containers)
        {
            for (Item item : container.getItems())
            {
                if (item != null && item.getId() == ItemID.BOOK_OF_THE_DEAD)
                {
                    return true;
                }
            }
        }
        return false;
    }

    public void getRaidLayout(WorldPoint playerLocation)
    {
        //Using location of flowers inside the raid when you enter to determine which layout and thus set the COX_ZONE for when the player should be notified
        boolean layout1 = false;
        LocalPoint localPoint = LocalPoint.fromWorld(client, currentPlayerLocation);
        Tile tile = client.getScene().getTiles()[playerLocation.getPlane()][localPoint.getSceneX() + 3][localPoint.getSceneY() + 11];
        for (GameObject g : tile.getGameObjects())
        {
            if (g != null && g.getId() == 29864) layout1 = true;
        }
        if (layout1)
        {
            //SET REGION OF DETECTION
            COX_ZONE = new WorldArea(playerLocation.getX() - 9, playerLocation.getY() + 11, 5, 6, playerLocation.getPlane());
            return;
        }
        boolean layout2 = false;
        for (GameObject g : client.getScene().getTiles()[playerLocation.getPlane()][localPoint.getSceneX() + 13][localPoint.getSceneY() + 8].getGameObjects())
        {
            if (g != null && g.getId() == 29864) layout2 = true;
        }
        if (layout2)
        {
            //SET REGION OF DETECTION
            COX_ZONE = new WorldArea(playerLocation.getX() + 6, playerLocation.getY() + 13, 6, 4, playerLocation.getPlane());
            return;
        }
        boolean layout3 = false;
        for (GameObject g : client.getScene().getTiles()[playerLocation.getPlane()][localPoint.getSceneX() + 4][localPoint.getSceneY() + 1].getGameObjects())
        {
            if (g != null && g.getId() == 29864) layout3 = true;
        }
        if (layout3)
        {
            //SET REGION OF DETECTION
            COX_ZONE = new WorldArea(playerLocation.getX() + 15, playerLocation.getY() + 6, 7, 5, playerLocation.getPlane());
            return;
        }
        //DO NOT MOVE REGION OF DETECTION!!!!!!
    }

    public GameObject findObjectInScene(Client client, int targetObjectId)
    {
        for (int x = 0; x < Constants.SCENE_SIZE; x++)
        {
            for (int y = 0; y < Constants.SCENE_SIZE; y++)
            {
                Tile tile = client.getScene().getTiles()[client.getPlane()][x][y];
                if (tile == null) continue;

                for (GameObject obj : tile.getGameObjects())
                {
                    if (obj != null && obj.getId() == targetObjectId)
                    {
                        return obj;
                    }
                }
            }
        }
        return null;
    }

    public void playSound(RaidSpellCheckerConfig.Sound sound)
    {
        if (sound.equals(RaidSpellCheckerConfig.Sound.RUBY_BOLTS))
        {
            soundPlayer.play("Ruby_bolts_(e).wav", config.soundVolume());
        }
        else if (sound.equals(RaidSpellCheckerConfig.Sound.ICE_BARRAGE))
        {
            soundPlayer.play("Ice_Barrage.wav", config.soundVolume());
        }
        else if (sound.equals(RaidSpellCheckerConfig.Sound.FAIRY_RING))
        {
            soundPlayer.play("Fairy_rings.wav", config.soundVolume());
        }
        else if (sound.equals(RaidSpellCheckerConfig.Sound.EEEEEEEE))
        {
            soundPlayer.play("ACB.wav", config.soundVolume());
        }
        else if (sound.equals(RaidSpellCheckerConfig.Sound.CUSTOM))
        {
            soundPlayer.play(config.customSound(), config.soundVolume());
        }
    }

    @Provides
    RaidSpellCheckerConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(RaidSpellCheckerConfig.class);
    }
}

package org.RaidSpellChecker;

import net.runelite.api.ItemID;
import java.util.List;

public class Spellbook
{
    public static final String AIR_SPELL = "Air Spell";
    public static final String EARTH_SPELL = "Earth Spell";
    public static final String FIRE_SPELL = "Fire Spell";
    public static final String WATER_SPELL = "Water Spell";
    public static final String DEMONBANE_SPELL = "Demonbane";
    public static final String GRASP_SPELL = "Grasp";
    public static final String THRALL_SPELL = "Thralls";
    public static final String DEATH_CHARGE_SPELL = "Death Charge";
    public static final String MARK_OF_DARKNESS_SPELL = "Mark of Darkness";
    public static final String SMOKE_SPELL = "Smoke Spell";
    public static final String SHADOW_SPELL = "Shadow Spell";
    public static final String BLOOD_SPELL = "Blood Spell";
    public static final String ICE_SPELL = "Ice Spell";
    public static final String CURE_SPELL = "Cure Spell";
    public static final String POT_SHARE = "Pot Share";
    public static final String VENGE_SPELL = "Venge";
    public static final String HUMIDIFY_SPELL = "Humidify";
    public static final String WRONG_SPELLBOOK = "WRONG SPELLBOOK";
    public static final String MISSING_RUNES = "MISSING RUNES";
    public static final String NO_BOOK_OF_THE_DEAD = "NO BOOK OF THE DEAD";

    // === ELEMENTAL GROUPS === //
    public static final List<SpellDefinition> AIR_SPELLS = List.of(
            new SpellDefinition("Wind Strike", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 1),
                    new SpellRuneRequirement(ItemID.MIND_RUNE, 1)
            )),
            new SpellDefinition("Wind Bolt", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 2),
                    new SpellRuneRequirement(ItemID.CHAOS_RUNE, 1)
            )),
            new SpellDefinition("Wind Blast", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 3),
                    new SpellRuneRequirement(ItemID.DEATH_RUNE, 1)
            )),
            new SpellDefinition("Wind Wave", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 5),
                    new SpellRuneRequirement(ItemID.BLOOD_RUNE, 1)
            )),
            new SpellDefinition("Wind Surge", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 7),
                    new SpellRuneRequirement(ItemID.WRATH_RUNE, 1)
            ))
    );

    public static final List<SpellDefinition> WATER_SPELLS = List.of(
            new SpellDefinition("Water Strike", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 1),
                    new SpellRuneRequirement(ItemID.WATER_RUNE, 1),
                    new SpellRuneRequirement(ItemID.MIND_RUNE, 1)
            )),
            new SpellDefinition("Water Bolt", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 2),
                    new SpellRuneRequirement(ItemID.WATER_RUNE, 2),
                    new SpellRuneRequirement(ItemID.CHAOS_RUNE, 1)
            )),
            new SpellDefinition("Water Blast", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 3),
                    new SpellRuneRequirement(ItemID.WATER_RUNE, 3),
                    new SpellRuneRequirement(ItemID.DEATH_RUNE, 1)
            )),
            new SpellDefinition("Water Wave", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 5),
                    new SpellRuneRequirement(ItemID.WATER_RUNE, 7),
                    new SpellRuneRequirement(ItemID.BLOOD_RUNE, 1)
            )),
            new SpellDefinition("Water Surge", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 7),
                    new SpellRuneRequirement(ItemID.WATER_RUNE, 10),
                    new SpellRuneRequirement(ItemID.WRATH_RUNE, 1)
            ))
    );

    public static final List<SpellDefinition> EARTH_SPELLS = List.of(
            new SpellDefinition("Earth Strike", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 1),
                    new SpellRuneRequirement(ItemID.EARTH_RUNE, 2),
                    new SpellRuneRequirement(ItemID.MIND_RUNE, 1)
            )),
            new SpellDefinition("Earth Bolt", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 2),
                    new SpellRuneRequirement(ItemID.EARTH_RUNE, 3),
                    new SpellRuneRequirement(ItemID.CHAOS_RUNE, 1)
            )),
            new SpellDefinition("Earth Blast", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 3),
                    new SpellRuneRequirement(ItemID.EARTH_RUNE, 4),
                    new SpellRuneRequirement(ItemID.DEATH_RUNE, 1)
            )),
            new SpellDefinition("Earth Wave", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 5),
                    new SpellRuneRequirement(ItemID.EARTH_RUNE, 7),
                    new SpellRuneRequirement(ItemID.BLOOD_RUNE, 1)
            )),
            new SpellDefinition("Earth Surge", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 7),
                    new SpellRuneRequirement(ItemID.EARTH_RUNE, 10),
                    new SpellRuneRequirement(ItemID.WRATH_RUNE, 1)
            ))
    );

    public static final List<SpellDefinition> FIRE_SPELLS = List.of(
            new SpellDefinition("Fire Strike", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 2),
                    new SpellRuneRequirement(ItemID.FIRE_RUNE, 3),
                    new SpellRuneRequirement(ItemID.MIND_RUNE, 1)
            )),
            new SpellDefinition("Fire Bolt", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 3),
                    new SpellRuneRequirement(ItemID.FIRE_RUNE, 4),
                    new SpellRuneRequirement(ItemID.CHAOS_RUNE, 1)
            )),
            new SpellDefinition("Fire Blast", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 4),
                    new SpellRuneRequirement(ItemID.FIRE_RUNE, 5),
                    new SpellRuneRequirement(ItemID.DEATH_RUNE, 1)
            )),
            new SpellDefinition("Fire Wave", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 5),
                    new SpellRuneRequirement(ItemID.FIRE_RUNE, 7),
                    new SpellRuneRequirement(ItemID.BLOOD_RUNE, 1)
            )),
            new SpellDefinition("Fire Surge", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 7),
                    new SpellRuneRequirement(ItemID.FIRE_RUNE, 10),
                    new SpellRuneRequirement(ItemID.WRATH_RUNE, 1)
            ))
    );

    // === GRASP SPELLS === //
    public static final List<SpellDefinition> GRASP_SPELLS = List.of(
            new SpellDefinition("Ghostly Grasp", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 4),
                    new SpellRuneRequirement(ItemID.CHAOS_RUNE, 1)
            )),
            new SpellDefinition("Skeletal Grasp", List.of(
                    new SpellRuneRequirement(ItemID.EARTH_RUNE, 8),
                    new SpellRuneRequirement(ItemID.DEATH_RUNE, 1)
            )),
            new SpellDefinition("Undead Grasp", List.of(
                    new SpellRuneRequirement(ItemID.FIRE_RUNE, 12),
                    new SpellRuneRequirement(ItemID.BLOOD_RUNE, 1)
            ))
    );

    // === DEMONBANE SPELLS === //
    public static final List<SpellDefinition> DEMONBANE_SPELLS = List.of(
            new SpellDefinition("Inferior Demonbane", List.of(
                    new SpellRuneRequirement(ItemID.FIRE_RUNE, 3),
                    new SpellRuneRequirement(ItemID.CHAOS_RUNE, 1)
            )),
            new SpellDefinition("Superior Demonbane", List.of(
                    new SpellRuneRequirement(ItemID.FIRE_RUNE, 5),
                    new SpellRuneRequirement(ItemID.SOUL_RUNE, 1)
            )),
            new SpellDefinition("Dark Demonbane", List.of(
                    new SpellRuneRequirement(ItemID.FIRE_RUNE, 7),
                    new SpellRuneRequirement(ItemID.SOUL_RUNE, 2)
            ))
    );

    // === THRALL SPELLS === //
    public static final List<SpellDefinition> THRALL_SPELLS = List.of(
            new SpellDefinition("Lesser Ghost", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 10),
                    new SpellRuneRequirement(ItemID.COSMIC_RUNE, 1),
                    new SpellRuneRequirement(ItemID.MIND_RUNE, 5),
                    new SpellRuneRequirement(ItemID.BOOK_OF_THE_DEAD, 1)
            )),
            new SpellDefinition("Lesser Skeleton", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 10),
                    new SpellRuneRequirement(ItemID.COSMIC_RUNE, 1),
                    new SpellRuneRequirement(ItemID.MIND_RUNE, 5),
                    new SpellRuneRequirement(ItemID.BOOK_OF_THE_DEAD, 1)
            )),
            new SpellDefinition("Lesser Zombie", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 10),
                    new SpellRuneRequirement(ItemID.COSMIC_RUNE, 1),
                    new SpellRuneRequirement(ItemID.MIND_RUNE, 5),
                    new SpellRuneRequirement(ItemID.BOOK_OF_THE_DEAD, 1)
            )),
            new SpellDefinition("Superior Ghost", List.of(
                    new SpellRuneRequirement(ItemID.EARTH_RUNE, 10),
                    new SpellRuneRequirement(ItemID.COSMIC_RUNE, 1),
                    new SpellRuneRequirement(ItemID.DEATH_RUNE, 5),
                    new SpellRuneRequirement(ItemID.BOOK_OF_THE_DEAD, 1)
            )),
            new SpellDefinition("Superior Skeleton", List.of(
                    new SpellRuneRequirement(ItemID.EARTH_RUNE, 10),
                    new SpellRuneRequirement(ItemID.COSMIC_RUNE, 1),
                    new SpellRuneRequirement(ItemID.DEATH_RUNE, 5),
                    new SpellRuneRequirement(ItemID.BOOK_OF_THE_DEAD, 1)
            )),
            new SpellDefinition("Superior Zombie", List.of(
                    new SpellRuneRequirement(ItemID.EARTH_RUNE, 10),
                    new SpellRuneRequirement(ItemID.COSMIC_RUNE, 1),
                    new SpellRuneRequirement(ItemID.DEATH_RUNE, 5),
                    new SpellRuneRequirement(ItemID.BOOK_OF_THE_DEAD, 1)
            )),
            new SpellDefinition("Greater Ghost", List.of(
                    new SpellRuneRequirement(ItemID.FIRE_RUNE, 10),
                    new SpellRuneRequirement(ItemID.BLOOD_RUNE, 5),
                    new SpellRuneRequirement(ItemID.COSMIC_RUNE, 1),
                    new SpellRuneRequirement(ItemID.BOOK_OF_THE_DEAD, 1)
            )),
            new SpellDefinition("Greater Skeleton", List.of(
                    new SpellRuneRequirement(ItemID.FIRE_RUNE, 10),
                    new SpellRuneRequirement(ItemID.BLOOD_RUNE, 5),
                    new SpellRuneRequirement(ItemID.COSMIC_RUNE, 1),
                    new SpellRuneRequirement(ItemID.BOOK_OF_THE_DEAD, 1)
            )),
            new SpellDefinition("Greater Zombie", List.of(
                    new SpellRuneRequirement(ItemID.FIRE_RUNE, 10),
                    new SpellRuneRequirement(ItemID.BLOOD_RUNE, 5),
                    new SpellRuneRequirement(ItemID.COSMIC_RUNE, 1),
                    new SpellRuneRequirement(ItemID.BOOK_OF_THE_DEAD, 1)
            ))
    );

    // === MARK OF DARKNESS === //
    public static final SpellDefinition MARK_OF_DARKNESS = new SpellDefinition("Mark of Darkness", List.of(
            new SpellRuneRequirement(ItemID.COSMIC_RUNE, 1),
            new SpellRuneRequirement(ItemID.SOUL_RUNE, 1)
    ));

    // === DEATH CHARGE === //
    public static final SpellDefinition DEATH_CHARGE = new SpellDefinition("Death Charge", List.of(
            new SpellRuneRequirement(ItemID.BLOOD_RUNE, 1),
            new SpellRuneRequirement(ItemID.DEATH_RUNE, 1),
            new SpellRuneRequirement(ItemID.SOUL_RUNE, 1)
    ));

    // === SMOKE SPELLS === //
    public static final List<SpellDefinition> SMOKE_SPELLS = List.of(
            new SpellDefinition("Smoke Burst", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 2),
                    new SpellRuneRequirement(ItemID.FIRE_RUNE, 2),
                    new SpellRuneRequirement(ItemID.CHAOS_RUNE, 4),
                    new SpellRuneRequirement(ItemID.DEATH_RUNE, 2)
            )),
            new SpellDefinition("Smoke Barrage", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 4),
                    new SpellRuneRequirement(ItemID.FIRE_RUNE, 4),
                    new SpellRuneRequirement(ItemID.BLOOD_RUNE, 2),
                    new SpellRuneRequirement(ItemID.DEATH_RUNE, 4)
            ))
    );

    // === SHADOW SPELLS === //
    public static final List<SpellDefinition> SHADOW_SPELLS = List.of(
            new SpellDefinition("Shadow Burst", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 1),
                    new SpellRuneRequirement(ItemID.CHAOS_RUNE, 4),
                    new SpellRuneRequirement(ItemID.DEATH_RUNE, 2),
                    new SpellRuneRequirement(ItemID.SOUL_RUNE, 2)
            )),
            new SpellDefinition("Shadow Barrage", List.of(
                    new SpellRuneRequirement(ItemID.AIR_RUNE, 4),
                    new SpellRuneRequirement(ItemID.BLOOD_RUNE, 2),
                    new SpellRuneRequirement(ItemID.DEATH_RUNE, 4),
                    new SpellRuneRequirement(ItemID.SOUL_RUNE, 3)
            ))
    );

    // === BLOOD SPELLS === //
    public static final List<SpellDefinition> BLOOD_SPELLS = List.of(
            new SpellDefinition("Blood Burst", List.of(
                    new SpellRuneRequirement(ItemID.BLOOD_RUNE, 2),
                    new SpellRuneRequirement(ItemID.CHAOS_RUNE, 4),
                    new SpellRuneRequirement(ItemID.DEATH_RUNE, 2)
            )),
            new SpellDefinition("Blood Barrage", List.of(
                    new SpellRuneRequirement(ItemID.BLOOD_RUNE, 4),
                    new SpellRuneRequirement(ItemID.DEATH_RUNE, 4),
                    new SpellRuneRequirement(ItemID.SOUL_RUNE, 1)
            ))
    );

    // === ICE SPELLS === //
    public static final List<SpellDefinition> ICE_SPELLS = List.of(
            new SpellDefinition("Ice Burst", List.of(
                    new SpellRuneRequirement(ItemID.WATER_RUNE, 4),
                    new SpellRuneRequirement(ItemID.CHAOS_RUNE, 4),
                    new SpellRuneRequirement(ItemID.DEATH_RUNE, 2)
            )),
            new SpellDefinition("Ice Barrage", List.of(
                    new SpellRuneRequirement(ItemID.WATER_RUNE, 6),
                    new SpellRuneRequirement(ItemID.BLOOD_RUNE, 2),
                    new SpellRuneRequirement(ItemID.DEATH_RUNE, 4)
            ))
    );

    // === CURE SPELLS === //
    public static final List<SpellDefinition> CURE_SPELLS = List.of(
            new SpellDefinition("Cure Other", List.of(
                    new SpellRuneRequirement(ItemID.EARTH_RUNE, 10),
                    new SpellRuneRequirement(ItemID.ASTRAL_RUNE, 1),
                    new SpellRuneRequirement(ItemID.LAW_RUNE, 1)
            )),
            new SpellDefinition("Cure Me", List.of(
                    new SpellRuneRequirement(ItemID.ASTRAL_RUNE, 2),
                    new SpellRuneRequirement(ItemID.COSMIC_RUNE, 2),
                    new SpellRuneRequirement(ItemID.LAW_RUNE, 1)
            )),
            new SpellDefinition("Cure Group", List.of(
                    new SpellRuneRequirement(ItemID.ASTRAL_RUNE, 2),
                    new SpellRuneRequirement(ItemID.COSMIC_RUNE, 2),
                    new SpellRuneRequirement(ItemID.LAW_RUNE, 2)
            ))
    );

    // === POTION SHARE SPELLS === //
    public static final List<SpellDefinition> POT_SHARE_SPELLS = List.of(
            new SpellDefinition("Stat Restore Pot Share", List.of(
                    new SpellRuneRequirement(ItemID.EARTH_RUNE, 10),
                    new SpellRuneRequirement(ItemID.WATER_RUNE, 10),
                    new SpellRuneRequirement(ItemID.ASTRAL_RUNE, 2)
            )),
            new SpellDefinition("Boost Potion Share", List.of(
                    new SpellRuneRequirement(ItemID.EARTH_RUNE, 12),
                    new SpellRuneRequirement(ItemID.WATER_RUNE, 10),
                    new SpellRuneRequirement(ItemID.ASTRAL_RUNE, 3)
            ))
    );

    // === VENGEANCE === //
    public static final SpellDefinition VENGEANCE = new SpellDefinition("Vengeance", List.of(
            new SpellRuneRequirement(ItemID.EARTH_RUNE, 10),
            new SpellRuneRequirement(ItemID.ASTRAL_RUNE, 4),
            new SpellRuneRequirement(ItemID.DEATH_RUNE, 2)
    ));

    // === HUMIDIFY === //
    public static final SpellDefinition HUMIDIFY = new SpellDefinition("Humidify", List.of(
            new SpellRuneRequirement(ItemID.FIRE_RUNE, 1),
            new SpellRuneRequirement(ItemID.WATER_RUNE, 3),
            new SpellRuneRequirement(ItemID.ASTRAL_RUNE, 1)
    ));
}
package org.RaidSpellChecker;

import net.runelite.api.*;

import java.util.*;

public class SpellCastingHelper
{
    private static final int[] DIVINE_RUNE_POUCH_RUNES = {
            Varbits.RUNE_POUCH_RUNE1,
            Varbits.RUNE_POUCH_RUNE2,
            Varbits.RUNE_POUCH_RUNE3,
            Varbits.RUNE_POUCH_RUNE4
    };

    private static final int[] DIVINE_RUNE_POUCH_AMOUNTS = {
            Varbits.RUNE_POUCH_AMOUNT1,
            Varbits.RUNE_POUCH_AMOUNT2,
            Varbits.RUNE_POUCH_AMOUNT3,
            Varbits.RUNE_POUCH_AMOUNT4
    };

    private static final Map<Integer, List<Integer>> STAFF_SUBSTITUTIONS = Map.ofEntries(
            Map.entry(ItemID.STAFF_OF_AIR, List.of(ItemID.AIR_RUNE)),
            Map.entry(ItemID.AIR_BATTLESTAFF, List.of(ItemID.AIR_RUNE)),
            Map.entry(ItemID.MYSTIC_AIR_STAFF, List.of(ItemID.AIR_RUNE)),

            Map.entry(ItemID.STAFF_OF_WATER, List.of(ItemID.WATER_RUNE)),
            Map.entry(ItemID.WATER_BATTLESTAFF, List.of(ItemID.WATER_RUNE)),
            Map.entry(ItemID.MYSTIC_WATER_STAFF, List.of(ItemID.WATER_RUNE)),
            Map.entry(ItemID.TOME_OF_WATER, List.of(ItemID.WATER_RUNE)),

            Map.entry(ItemID.STAFF_OF_EARTH, List.of(ItemID.EARTH_RUNE)),
            Map.entry(ItemID.EARTH_BATTLESTAFF, List.of(ItemID.EARTH_RUNE)),
            Map.entry(ItemID.MYSTIC_EARTH_STAFF, List.of(ItemID.EARTH_RUNE)),
            Map.entry(ItemID.TOME_OF_EARTH, List.of(ItemID.EARTH_RUNE)),

            Map.entry(ItemID.STAFF_OF_FIRE, List.of(ItemID.FIRE_RUNE)),
            Map.entry(ItemID.FIRE_BATTLESTAFF, List.of(ItemID.FIRE_RUNE)),
            Map.entry(ItemID.MYSTIC_FIRE_STAFF, List.of(ItemID.FIRE_RUNE)),
            Map.entry(ItemID.TOME_OF_FIRE, List.of(ItemID.FIRE_RUNE)),

            Map.entry(ItemID.MIST_BATTLESTAFF, List.of(ItemID.AIR_RUNE, ItemID.WATER_RUNE)),
            Map.entry(ItemID.MYSTIC_MIST_STAFF, List.of(ItemID.AIR_RUNE, ItemID.WATER_RUNE)),

            Map.entry(ItemID.DUST_BATTLESTAFF, List.of(ItemID.AIR_RUNE, ItemID.EARTH_RUNE)),
            Map.entry(ItemID.MYSTIC_DUST_STAFF, List.of(ItemID.AIR_RUNE, ItemID.EARTH_RUNE)),

            Map.entry(ItemID.SMOKE_BATTLESTAFF, List.of(ItemID.AIR_RUNE, ItemID.FIRE_RUNE)),
            Map.entry(ItemID.MYSTIC_SMOKE_STAFF, List.of(ItemID.AIR_RUNE, ItemID.FIRE_RUNE)),

            Map.entry(ItemID.STEAM_BATTLESTAFF, List.of(ItemID.WATER_RUNE, ItemID.FIRE_RUNE)),
            Map.entry(ItemID.MYSTIC_STEAM_STAFF, List.of(ItemID.WATER_RUNE, ItemID.FIRE_RUNE)),

            Map.entry(ItemID.LAVA_BATTLESTAFF, List.of(ItemID.FIRE_RUNE, ItemID.EARTH_RUNE)),
            Map.entry(ItemID.MYSTIC_LAVA_STAFF, List.of(ItemID.FIRE_RUNE, ItemID.EARTH_RUNE)),

            Map.entry(ItemID.BOOK_OF_THE_DEAD, List.of(ItemID.BOOK_OF_THE_DEAD))
    );

    private static final Map<Integer, List<Integer>> COMBO_RUNE_SUBSTITUTIONS = Map.ofEntries(
            Map.entry(ItemID.MUD_RUNE, List.of(ItemID.WATER_RUNE, ItemID.EARTH_RUNE)),
            Map.entry(ItemID.MIST_RUNE, List.of(ItemID.WATER_RUNE, ItemID.AIR_RUNE)),
            Map.entry(ItemID.DUST_RUNE, List.of(ItemID.EARTH_RUNE, ItemID.AIR_RUNE)),
            Map.entry(ItemID.SMOKE_RUNE, List.of(ItemID.FIRE_RUNE, ItemID.AIR_RUNE)),
            Map.entry(ItemID.STEAM_RUNE, List.of(ItemID.FIRE_RUNE, ItemID.WATER_RUNE)),
            Map.entry(ItemID.LAVA_RUNE, List.of(ItemID.FIRE_RUNE, ItemID.EARTH_RUNE)),
            Map.entry(ItemID.AETHER_RUNE, List.of(ItemID.COSMIC_RUNE, ItemID.SOUL_RUNE)),
            Map.entry(ItemID.SUNFIRE_RUNE, List.of(ItemID.FIRE_RUNE))
    );

    private static final Map<Integer, Integer> RUNE_VARBIT_ID_TO_ITEM_ID = Map.ofEntries(
            Map.entry(0, -1),
            Map.entry(1, ItemID.AIR_RUNE),
            Map.entry(2, ItemID.WATER_RUNE),
            Map.entry(3, ItemID.EARTH_RUNE),
            Map.entry(4, ItemID.FIRE_RUNE),
            Map.entry(5, ItemID.MIND_RUNE),
            Map.entry(6, ItemID.CHAOS_RUNE),
            Map.entry(7, ItemID.DEATH_RUNE),
            Map.entry(8, ItemID.BLOOD_RUNE),
            Map.entry(9, ItemID.COSMIC_RUNE),
            Map.entry(10, ItemID.NATURE_RUNE),
            Map.entry(11, ItemID.LAW_RUNE),
            Map.entry(12, ItemID.BODY_RUNE),
            Map.entry(13, ItemID.SOUL_RUNE),
            Map.entry(14, ItemID.ASTRAL_RUNE),
            Map.entry(15, ItemID.WRATH_RUNE),
            Map.entry(16, ItemID.MIST_RUNE),
            Map.entry(17, ItemID.DUST_RUNE),
            Map.entry(18, ItemID.LAVA_RUNE),
            Map.entry(19, ItemID.SMOKE_RUNE),
            Map.entry(20, ItemID.STEAM_RUNE),
            Map.entry(21, ItemID.MUD_RUNE),
            Map.entry(22, ItemID.SUNFIRE_RUNE),
            Map.entry(23, ItemID.AETHER_RUNE)
    );

    public static boolean canCastSpell(Client client, SpellDefinition spell)
    {
        Set<Integer> staffRunes = getRunesProvidedByEquippedOrInventoryStaff(client);
        Map<Integer, Integer> runeCounts = new HashMap<>();

        mergeRuneCounts(runeCounts, getRunesFromInventory(client));
        mergeRuneCounts(runeCounts, getDivineRunePouchContents(client));

        for (SpellRuneRequirement req : spell.getRuneRequirements())
        {
            int runeId = req.getRuneId();
            int requiredAmount = req.getAmount();

            if (staffRunes.contains(runeId))
                continue;

            int available = runeCounts.getOrDefault(runeId, 0);
            if (available >= requiredAmount)
                continue;

            int comboRuneCount = 0;
            for (Map.Entry<Integer, List<Integer>> combo : COMBO_RUNE_SUBSTITUTIONS.entrySet())
            {
                if (combo.getValue().contains(runeId))
                {
                    comboRuneCount += runeCounts.getOrDefault(combo.getKey(), 0);
                }
            }
            if ((available + comboRuneCount) < requiredAmount)
            {
                return false;
            }
        }

        return true;
    }

    public static boolean canCastAnySpell(Client client, List<SpellDefinition> spellGroup)
    {
        for (SpellDefinition spell : spellGroup)
        {
            if (canCastSpell(client, spell))
            {
                return true;
            }
        }
        return false;
    }

    private static Map<Integer, Integer> getRunesFromInventory(Client client)
    {
        Map<Integer, Integer> result = new HashMap<>();
        ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
        if (inventory == null) return result;

        for (Item item : inventory.getItems())
        {
            if (item == null) continue;

            int id = item.getId();
            int qty = item.getQuantity();

            List<Integer> components = COMBO_RUNE_SUBSTITUTIONS.get(id);
            if (components != null)
            {
                for (int comp : components)
                {
                    result.merge(comp, qty, Integer::sum);
                }
            }
            else
            {
                result.merge(id, qty, Integer::sum);
            }
        }
        return result;
    }

    private static Map<Integer, Integer> getDivineRunePouchContents(Client client)
    {
        Map<Integer, Integer> result = new HashMap<>();
        EnumComposition runePouchEnum = client.getEnum(EnumID.RUNEPOUCH_RUNE);

        for (int i = 0; i < DIVINE_RUNE_POUCH_RUNES.length; i++)
        {
            int index = client.getVarbitValue(DIVINE_RUNE_POUCH_RUNES[i]);
            int amount = client.getVarbitValue(DIVINE_RUNE_POUCH_AMOUNTS[i]);

            if (index == 0 || amount <= 0)
                continue;

            int itemId = runePouchEnum.getIntValue(index);

            List<Integer> components = COMBO_RUNE_SUBSTITUTIONS.get(itemId);
            if (components != null)
            {
                for (Integer comp : components)
                {
                    result.merge(comp, amount, Integer::sum);
                }
            }
            else
            {
                result.merge(itemId, amount, Integer::sum);
            }
        }

        return result;
    }

    private static void mergeRuneCounts(Map<Integer, Integer> target, Map<Integer, Integer> source)
    {
        for (Map.Entry<Integer, Integer> entry : source.entrySet())
        {
            target.merge(entry.getKey(), entry.getValue(), Integer::sum);
        }
    }

    private static Set<Integer> getRunesProvidedByEquippedOrInventoryStaff(Client client)
    {
        Set<Integer> runeSubs = new HashSet<>();

        List<ItemContainer> containers = new ArrayList<>();
        ItemContainer equipment = client.getItemContainer(InventoryID.EQUIPMENT);
        ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);

        if (equipment != null) containers.add(equipment);
        if (inventory != null) containers.add(inventory);

        for (ItemContainer container : containers)
        {
            for (Item item : container.getItems())
            {
                if (item == null) continue;
                List<Integer> runes = STAFF_SUBSTITUTIONS.get(item.getId());
                if (runes != null) runeSubs.addAll(runes);
            }
        }
        return runeSubs;
    }
}

package org.RaidSpellChecker;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;
import net.runelite.client.config.Units;

import java.awt.*;

@ConfigGroup("raidspellchecker")
public interface RaidSpellCheckerConfig extends Config
{
    enum Spellbook
    {
        STANDARD,
        ANCIENT,
        LUNAR,
        ARCEUUS
    }

    enum Sound
    {
        RUBY_BOLTS,
        FAIRY_RING,
        ICE_BARRAGE,
        EEEEEEEE,
        CUSTOM
    }

//region COX
    @ConfigSection(
            name = "COX",
            description = "Spells to use in COX",
            position = 1,
            closedByDefault = true
    )
    String coxSpellbookSection = "COX Spellbook";

    // === COX Spellbook Selector === //
    @ConfigItem(
            position = 1,
            keyName = "enableCOX",
            name = "Enable",
            description = "Enabled for COX",
            section = coxSpellbookSection
    )
    default boolean enableCox()
    {
        return true;
    }

    @ConfigItem(
            position = 2,
            keyName = "spellSelectionCOX",
            name = "Spellbook selection",
            description = "Spellbook to use for COX",
            section = coxSpellbookSection
    )
    default Spellbook spellSelectionCOX()
    {
        return Spellbook.STANDARD;
    }

    // === COX Standard Spells === //
    @ConfigSection(
            name = "COX Standard Spells",
            description = "Standard spells to use in COX",
            position = 2,
            closedByDefault = true
    )
    String coxStandardSpells = "COX Standard Spells";

    @ConfigItem(
            keyName = "labelCOXStandard",
            name = "Standard spell requirements for COX.", description = "",
            position = 1,
            section = coxStandardSpells)
    default String labelCOXStandard()
    {
        return "";
    }

    @ConfigItem(
            keyName = "useFireCOX",
            name = "Fire Spell",
            description = "Use a fire spell (Standard)",
            position = 2,
            section = coxStandardSpells
    )
    default boolean useFireCOX()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useWaterCOX",
            name = "Water Spell",
            description = "Use a water spell (Standard)",
            position = 3,
            section = coxStandardSpells
    )
    default boolean useWaterCOX()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useEarthCOX",
            name = "Earth Spell",
            description = "Use an earth spell (Standard)",
            position = 4,
            section = coxStandardSpells
    )
    default boolean useEarthCOX()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useAirCOX",
            name = "Air Spell",
            description = "Use an air spell (Standard)",
            position = 5,
            section = coxStandardSpells
    )
    default boolean useAirCOX()
    {
        return false;
    }

    // === COX Arceuus Spells === //
    @ConfigSection(
            name = "COX Arceuus Spells",
            description = "Arceuus spells to use in COX",
            position = 3,
            closedByDefault = true
    )
    String coxArceuusSpells = "COX Arceuus Spells";

    @ConfigItem(
            keyName = "labelCOXArceuus",
            name = "Arceuus spell requirements for COX.", description = "",
            position = 1,
            section = coxArceuusSpells)
    default String labelCOXArceuus()
    {
        return "";
    }

    @ConfigItem(
            keyName = "useGraspCOX",
            name = "Grasp Spell",
            description = "Use a grasp spell (Arceuus)",
            position = 2,
            section = coxArceuusSpells
    )
    default boolean useGraspCOX()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useDemonbaneCOX",
            name = "Demonbane Spell",
            description = "Use a demonbane spell (Arceuus)",
            position = 3,
            section = coxArceuusSpells
    )
    default boolean useDemonbaneCOX()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useThrallsCOX",
            name = "Thralls",
            description = "Use a thrall spell (Arceuus)",
            position = 4,
            section = coxArceuusSpells
    )
    default boolean useThrallsCOX()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useDeathChargeCOX",
            name = "Death Charge",
            description = "Use the death charge spell (Arceuus)",
            position = 5,
            section = coxArceuusSpells
    )
    default boolean useDeathChargeCOX()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useMarkOfDarknessCOX",
            name = "Mark of Darkness",
            description = "Use the mark of darkness spell (Arceuus)",
            position = 6,
            section = coxArceuusSpells
    )
    default boolean useMarkOfDarknessCOX()
    {
        return false;
    }

    // === COX Ancient Spells === //
    @ConfigSection(
            name = "COX Ancient Spells",
            description = "Ancient spells to use in COX",
            position = 4,
            closedByDefault = true
    )
    String coxAncientSpells = "COX Ancient Spells";

    @ConfigItem(
            keyName = "labelCOXAncient",
            name = "Ancient spell requirements for COX.", description = "",
            position = 1,
            section = coxAncientSpells)
    default String labelCOXAncient()
    {
        return "";
    }

    @ConfigItem(
            keyName = "useSmokeCOX",
            name = "Smoke Spell",
            description = "Use a smoke spell (Ancient)",
            position = 2,
            section = coxAncientSpells
    )
    default boolean useSmokeCOX()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useShadowCOX",
            name = "Shadow Spell",
            description = "Use a shadow spell (Ancient)",
            position = 3,
            section = coxAncientSpells
    )
    default boolean useShadowCOX()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useBloodCOX",
            name = "Blood Spell",
            description = "Use a blood spell (Ancient)",
            position = 4,
            section = coxAncientSpells
    )
    default boolean useBloodCOX()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useIceCOX",
            name = "Ice Spell",
            description = "Use an ice spell (Ancient)",
            position = 5,
            section = coxAncientSpells
    )
    default boolean useIceCOX()
    {
        return false;
    }

    // === COX Lunar Spells === //
    @ConfigSection(
            name = "COX Lunar Spells",
            description = "Lunar spells to use in COX",
            position = 5,
            closedByDefault = true
    )
    String coxLunarSpells = "COX Lunar Spells";

    @ConfigItem(
            keyName = "labelCOXLunar",
            name = "Lunar spell requirements for COX.", description = "",
            position = 1,
            section = coxLunarSpells)
    default String labelCOXLunar()
    {
        return "";
    }

    @ConfigItem(
            keyName = "useCureCOX",
            name = "Cure Spells",
            description = "Use a cure spell (Lunar)",
            position = 2,
            section = coxLunarSpells
    )
    default boolean useCureCOX()
    {
        return false;
    }

    @ConfigItem(
            keyName = "usePotShareCOX",
            name = "Pot Share",
            description = "Use a potshare spell (Lunar)",
            position = 3,
            section = coxLunarSpells
    )
    default boolean usePotShareCOX()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useVengeCOX",
            name = "Venge",
            description = "Use the venge spell (Lunar)",
            position = 4,
            section = coxLunarSpells
    )
    default boolean useVengeCOX()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useHumidifyCOX",
            name = "Humidify",
            description = "Use the humidify spell (Lunar)",
            position = 5,
            section = coxLunarSpells
    )
    default boolean useHumidifyCOX()
    {
        return false;
    }

//endregion
//---------------------------------------------------------------------------------------------------------------------------------
//region TOB
    @ConfigSection(
            name = "TOB",
            description = "Spells to use in TOB",
            position = 6,
            closedByDefault = true
    )
    String tobSpellbookSection = "TOB";

    @ConfigItem(
            keyName = "enableTOB",
            name = "Enable",
            description = "Enabled for TOB",
            position = 1,
            section = tobSpellbookSection
    )
    default boolean enableTOB()
    {
        return true;
    }

    @ConfigItem(
            keyName = "spellSelectionTOB",
            name = "Spellbook selection",
            description = "Spellbook to use for TOB",
            position = 2,
            section = tobSpellbookSection
    )
    default Spellbook spellSelectionTOB()
    {
        return Spellbook.STANDARD;
    }

    // === TOB Standard Spells === //
    @ConfigSection(
            name = "TOB Standard Spells",
            description = "Standard spells to use in TOB",
            position = 7,
            closedByDefault = true
    )
    String tobStandardSpells = "TOB Standard Spells";

    @ConfigItem(
            keyName = "labelTOBStandard",
            name = "Standard spell requirements for TOB.", description = "",
            position = 1,
            section = tobStandardSpells)
    default String labelTOBStandard()
    {
        return "";
    }

    @ConfigItem(
            keyName = "useFireTOB",
            name = "Fire Spell",
            description = "Use a fire spell (Standard)",
            position = 2,
            section = tobStandardSpells
    )
    default boolean useFireTOB()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useWaterTOB",
            name = "Water Spell",
            description = "Use a water spell (Standard)",
            position = 3,
            section = tobStandardSpells
    )
    default boolean useWaterTOB()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useEarthTOB",
            name = "Earth Spell",
            description = "Use an earth spell (Standard)",
            position = 4,
            section = tobStandardSpells
    )
    default boolean useEarthTOB()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useAirTOB",
            name = "Air Spell",
            description = "Use an air spell (Standard)",
            position = 5,
            section = tobStandardSpells
    )
    default boolean useAirTOB()
    {
        return false;
    }

    // === TOB Arceuus Spells === //
    @ConfigSection(
            name = "TOB Arceuus Spells",
            description = "Arceuus spells to use in TOB",
            position = 8,
            closedByDefault = true
    )
    String tobArceuusSpells = "TOB Arceuus Spells";

    @ConfigItem(
            keyName = "labelTOBArceuus",
            name = "Arceuus spell requirements for TOB.", description = "",
            position = 1,
            section = tobArceuusSpells)
    default String labelTOBArceuus()
    {
        return "";
    }

    @ConfigItem(
            keyName = "useGraspTOB",
            name = "Grasp Spell",
            description = "Use a grasp spell (Arceuus)",
            position = 2,
            section = tobArceuusSpells
    )
    default boolean useGraspTOB()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useDemonbaneTOB",
            name = "Demonbane Spell",
            description = "Use a demonbane spell (Arceuus)",
            position = 3,
            section = tobArceuusSpells
    )
    default boolean useDemonbaneTOB()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useThrallsTOB",
            name = "Thralls",
            description = "Use a thrall spell (Arceuus)",
            position = 4,
            section = tobArceuusSpells
    )
    default boolean useThrallsTOB()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useDeathChargeTOB",
            name = "Death Charge",
            description = "Use the death charge spell (Arceuus)",
            position = 5,
            section = tobArceuusSpells
    )
    default boolean useDeathChargeTOB()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useMarkOfDarknessTOB",
            name = "Mark of Darkness",
            description = "Use the mark of darkness spell (Arceuus)",
            position = 6,
            section = tobArceuusSpells
    )
    default boolean useMarkOfDarknessTOB()
    {
        return false;
    }

    // === TOB Ancient Spells === //
    @ConfigSection(
            name = "TOB Ancient Spells",
            description = "Ancient spells to use in TOB",
            position = 9,
            closedByDefault = true
    )
    String tobAncientSpells = "TOB Ancient Spells";

    @ConfigItem(
            keyName = "labelTOBAncient",
            name = "Ancient spell requirements for TOB.", description = "",
            position = 1,
            section = tobAncientSpells)
    default String labelTOBAncient()
    {
        return "";
    }

    @ConfigItem(
            keyName = "useSmokeTOB",
            name = "Smoke Spell",
            description = "Use a smoke spell (Ancient)",
            position = 2,
            section = tobAncientSpells
    )
    default boolean useSmokeTOB()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useShadowTOB",
            name = "Shadow Spell",
            description = "Use a shadow spell (Ancient)",
            position = 3,
            section = tobAncientSpells
    )
    default boolean useShadowTOB()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useBloodTOB",
            name = "Blood Spell",
            description = "Use a blood spell (Ancient)",
            position = 4,
            section = tobAncientSpells
    )
    default boolean useBloodTOB()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useIceTOB",
            name = "Ice Spell",
            description = "Use an ice spell (Ancient)",
            position = 5,
            section = tobAncientSpells
    )
    default boolean useIceTOB()
    {
        return false;
    }

    // === TOB Lunar Spells === //
    @ConfigSection(
            name = "TOB Lunar Spells",
            description = "Lunar spells to use in TOB",
            position = 10,
            closedByDefault = true
    )
    String tobLunarSpells = "TOB Lunar Spells";

    @ConfigItem(
            keyName = "labelTOBLunar",
            name = "Lunar spell requirements for TOB.", description = "",
            position = 1,
            section = tobLunarSpells)
    default String labelTOBLunar()
    {
        return "";
    }

    @ConfigItem(
            keyName = "useCureTOB",
            name = "Cure Spells",
            description = "Use a cure spell (Lunar)",
            position = 2,
            section = tobLunarSpells
    )
    default boolean useCureTOB()
    {
        return false;
    }

    @ConfigItem(
            keyName = "usePotShareTOB",
            name = "Pot Share",
            description = "Use a potshare spell (Lunar)",
            position = 3,
            section = tobLunarSpells
    )
    default boolean usePotShareTOB()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useVengeTOB",
            name = "Venge",
            description = "Use the venge spell (Lunar)",
            position = 4,
            section = tobLunarSpells
    )
    default boolean useVengeTOB()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useHumidifyTOB",
            name = "Humidify",
            description = "Use the humidify spell (Lunar)",
            position = 5,
            section = tobLunarSpells
    )
    default boolean useHumidifyTOB()
    {
        return false;
    }

//endregion
//---------------------------------------------------------------------------------------------------------------------------------
//region TOA
    @ConfigSection(
            name = "TOA",
            description = "Spells to use in TOA",
            position = 11,
            closedByDefault = true
    )
    String toaSpellbookSection = "TOA";

    @ConfigItem(
            keyName = "enableTOA",
            name = "Enable",
            description = "Enabled for TOA",
            position = 1,
            section = toaSpellbookSection
    )
    default boolean enableTOA()
    {
        return true;
    }

    @ConfigItem(
            keyName = "spellSelectionTOA",
            name = "Spellbook selection",
            description = "Spellbook to use for TOA",
            position = 2,
            section = toaSpellbookSection
    )
    default Spellbook spellSelectionTOA()
    {
        return Spellbook.STANDARD;
    }

    // === TOA Standard Spells === //
    @ConfigSection(
            name = "TOA Standard Spells",
            description = "Standard spells to use in TOA",
            position = 12,
            closedByDefault = true
    )
    String toaStandardSpells = "TOA Standard Spells";

    @ConfigItem(
            keyName = "labelTOAStandard",
            name = "Standard spell requirements for TOA.", description = "",
            position = 1,
            section = toaStandardSpells)
    default String labelTOAStandard()
    {
        return "";
    }

    @ConfigItem(
            keyName = "useFireTOA",
            name = "Fire Spell",
            description = "Use a fire spell (Standard)",
            position = 2,
            section = toaStandardSpells
    )
    default boolean useFireTOA()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useWaterTOA",
            name = "Water Spell",
            description = "Use a water spell (Standard)",
            position = 3,
            section = toaStandardSpells
    )
    default boolean useWaterTOA()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useEarthTOA",
            name = "Earth Spell",
            description = "Use an earth spell (Standard)",
            position = 4,
            section = toaStandardSpells
    )
    default boolean useEarthTOA()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useAirTOA",
            name = "Air Spell",
            description = "Use an air spell (Standard)",
            position = 5,
            section = toaStandardSpells
    )
    default boolean useAirTOA()
    {
        return false;
    }

    // === TOA Arceuus Spells === //
    @ConfigSection(
            name = "TOA Arceuus Spells",
            description = "Arceuus spells to use in TOA",
            position = 13,
            closedByDefault = true
    )
    String toaArceuusSpells = "TOA Arceuus Spells";

    @ConfigItem(
            keyName = "labelTOAArceuus",
            name = "Arceuus spell requirements for TOA.", description = "",
            position = 1,
            section = toaArceuusSpells)
    default String labelTOAArceuus()
    {
        return "";
    }

    @ConfigItem(
            keyName = "useGraspTOA",
            name = "Grasp Spell",
            description = "Use a grasp spell (Arceuus)",
            position = 2,
            section = toaArceuusSpells
    )
    default boolean useGraspTOA()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useDemonbaneTOA",
            name = "Demonbane Spell",
            description = "Use a demonbane spell (Arceuus)",
            position = 3,
            section = toaArceuusSpells
    )
    default boolean useDemonbaneTOA()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useThrallsTOA",
            name = "Thralls",
            description = "Use a thrall spell (Arceuus)",
            position = 4,
            section = toaArceuusSpells
    )
    default boolean useThrallsTOA()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useDeathChargeTOA",
            name = "Death Charge",
            description = "Use the death charge spell (Arceuus)",
            position = 5,
            section = toaArceuusSpells
    )
    default boolean useDeathChargeTOA()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useMarkOfDarknessTOA",
            name = "Mark of Darkness",
            description = "Use the mark of darkness spell (Arceuus)",
            position = 6,
            section = toaArceuusSpells
    )
    default boolean useMarkOfDarknessTOA()
    {
        return false;
    }

    // === TOA Ancient Spells === //
    @ConfigSection(
            name = "TOA Ancient Spells",
            description = "Ancient spells to use in TOA",
            position = 14,
            closedByDefault = true
    )
    String toaAncientSpells = "TOA Ancient Spells";

    @ConfigItem(
            keyName = "labelTOAAncient",
            name = "Ancient spell requirements for TOA.", description = "",
            position = 1,
            section = toaAncientSpells)
    default String labelTOAAncient()
    {
        return "";
    }

    @ConfigItem(
            keyName = "useSmokeTOA",
            name = "Smoke Spell",
            description = "Use a smoke spell (Ancient)",
            position = 2,
            section = toaAncientSpells
    )
    default boolean useSmokeTOA()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useShadowTOA",
            name = "Shadow Spell",
            description = "Use a shadow spell (Ancient)",
            position = 3,
            section = toaAncientSpells
    )
    default boolean useShadowTOA()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useBloodTOA",
            name = "Blood Spell",
            description = "Use a blood spell (Ancient)",
            position = 4,
            section = toaAncientSpells
    )
    default boolean useBloodTOA()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useIceTOA",
            name = "Ice Spell",
            description = "Use an ice spell (Ancient)",
            position = 5,
            section = toaAncientSpells
    )
    default boolean useIceTOA()
    {
        return false;
    }

    // === TOA Lunar Spells === //
    @ConfigSection(
            name = "TOA Lunar Spells",
            description = "Lunar spells to use in TOA",
            position = 15,
            closedByDefault = true
    )
    String toaLunarSpells = "TOA Lunar Spells";

    @ConfigItem(
            keyName = "labelTOALunar",
            name = "Lunar spell requirements for TOA.", description = "",
            position = 1,
            section = toaLunarSpells)
    default String labelTOALunar()
    {
        return "";
    }

    @ConfigItem(
            keyName = "useCureTOA",
            name = "Cure Spells",
            description = "Use a cure spell (Lunar)",
            position = 2,
            section = toaLunarSpells
    )
    default boolean useCureTOA()
    {
        return false;
    }

    @ConfigItem(
            keyName = "usePotShareTOA",
            name = "Pot Share",
            description = "Use a potshare spell (Lunar)",
            position = 3,
            section = toaLunarSpells
    )
    default boolean usePotShareTOA()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useVengeTOA",
            name = "Venge",
            description = "Use the venge spell (Lunar)",
            position = 4,
            section = toaLunarSpells
    )
    default boolean useVengeTOA()
    {
        return false;
    }

    @ConfigItem(
            keyName = "useHumidifyTOA",
            name = "Humidify",
            description = "Use the humidify spell (Lunar)",
            position = 5,
            section = toaLunarSpells
    )
    default boolean useHumidifyTOA()
    {
        return false;
    }

//endregion
//region Notification
    @ConfigSection(
            name = "Notification",
            description = "Notification Settings",
            position = 16,
            closedByDefault = true
    )
    String notification = "Notification";

    @ConfigItem(
            keyName = "enableSoundEffect",
            name = "Enable sound effect",
            description = "Enable sound effect to play",
            position = 1,
            section = notification
    )
    default boolean enableSoundEffect()
    {
        return true;
    }

    @ConfigItem(
            keyName = "soundEffect",
            name = "Sound Effect",
            description = "Sound effect to play",
            position = 2,
            section = notification
    )
    default Sound soundEffect()
    {
        return Sound.FAIRY_RING;
    }

    @Range(min = 0, max = 100)
    @Units(Units.PERCENT)
    @ConfigItem(
            keyName = "soundVolume",
            name = "Sound Volume",
            description = "Volume of the sound effect (0% = mute, 100% = full volume)",
            position = 3,
            section = notification
    )
    default int soundVolume()
    {
        return 10;
    }

    @ConfigItem(
            keyName = "customSound",
            name = "Custom Sound",
            description = "Name of custom .wav file placed in /resources/sounds/",
            position = 4,
            section = notification
    )
    default String customSound()
    {
        return "myfile.wav";
    }

    @ConfigItem(
            keyName = "enablePopup",
            name = "Enable popup",
            description = "Enable popup to display",
            position = 5,
            section = notification
    )
    default boolean enablePopup()
    {
        return true;
    }

    @ConfigItem(
            keyName = "popupSize",
            name = "Popup Size",
            description = "Size of the popup box",
            position = 6,
            section = notification
    )
    @Range(
            min = 10,
            max = 100
    )
    default int popupSize()
    {
        return 20;
    }

    @ConfigItem(
            keyName = "popupDuration",
            name = "Popup Duration (ms)",
            description = "How long the popup message stays on screen",
            position = 7,
            section = notification
    )
    @Range(
            min = 500,
            max = 10000
    )
    default int popupDuration()
    {
        return 3000; // default 3 seconds
    }

    @ConfigItem(
            keyName = "popupBackgroundColor",
            name = "Popup Background Color",
            description = "Color of the popup overlay background",
            position = 8,
            section = notification
    )
    default Color popupBackgroundColor()
    {
        return new Color(255, 0, 0, 200); // semi-transparent red by default
    }

    @ConfigItem(
            keyName = "popupTextColor",
            name = "Popup Text Color",
            description = "Color of the popup overlay text",
            position = 9,
            section = notification
    )
    default Color popupTextColor()
    {
        return new Color(255, 255, 255, 200); // semi-transparent white by default
    }
//endregion
}

package org.RaidSpellChecker;

import java.util.List;

public class SpellDefinition
{
    private final String name;
    private final List<SpellRuneRequirement> runeRequirements;

    public SpellDefinition(String name, List<SpellRuneRequirement> runeRequirements)
    {
        this.name = name;
        this.runeRequirements = runeRequirements;
    }

    public String getName()
    {
        return name;
    }

    public List<SpellRuneRequirement> getRuneRequirements()
    {
        return runeRequirements;
    }
}
package org.RaidSpellChecker;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.awt.*;

@Singleton
public class MissingSpellOverlay extends Overlay
{
    private final Client client;
    private final RaidSpellCheckerConfig config;

    private String message;
    private long startTime;
    private int timeoutMillis;

    @Inject
    public MissingSpellOverlay(Client client, RaidSpellCheckerConfig config)
    {
        this.client = client;
        this.config = config;
        this.setPosition(OverlayPosition.DYNAMIC);
        this.message = null;
        this.startTime = 0;
        this.timeoutMillis = 0;
    }

    public void show(String message, int milliseconds)
    {
        this.message = message;
        this.startTime = System.currentTimeMillis();
        this.timeoutMillis = milliseconds;
    }

    @Override
    public Dimension render(Graphics2D g)
    {
        if (message == null || System.currentTimeMillis() - startTime > timeoutMillis)
        {
            return null;
        }

        g.setFont(new Font("Arial", Font.BOLD, config.popupSize()));
        FontMetrics metrics = g.getFontMetrics();
        int textWidth = metrics.stringWidth(message);
        int textHeight = metrics.getHeight();

        int padding = 10;
        int boxWidth = textWidth + padding * 2;
        int boxHeight = textHeight + padding * 2;

        int screenWidth = client.getCanvas().getWidth();
        int screenHeight = client.getCanvas().getHeight();
        int x = (screenWidth - boxWidth) / 2;
        int y = (screenHeight - boxHeight) / 2;

        g.setColor(config.popupBackgroundColor());
        g.fillRoundRect(x, y, boxWidth, boxHeight, config.popupSize(), config.popupSize());

        g.setColor(Color.BLACK);
        g.drawRoundRect(x, y, boxWidth, boxHeight, config.popupSize(), config.popupSize());

        g.setColor(config.popupTextColor());
        int textX = x + padding;
        int textY = y + padding + metrics.getAscent();
        g.drawString(message, textX, textY);

        return new Dimension(boxWidth, boxHeight);
    }
}
package org.RaidSpellChecker;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PluginLauncher
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(RaidSpellCheckerPlugin.class);
		RuneLite.main(args);
	}
}
