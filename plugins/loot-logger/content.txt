package thestonedturtle.lootlogger;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class LootLoggerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(LootLoggerPlugin.class);
		RuneLite.main(args);
	}
}
package thestonedturtle.lootlogger;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum UniqueItemPlacement
{
	ITEM_BREAKDOWN("Item breakdown"),
	UNIQUES_PANEL("Uniques panel"),
	BOTH("Both panels");

	private final String name;

	@Override
	public String toString()
	{
		return name;
	}
}

package thestonedturtle.lootlogger;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum ItemSortTypes
{
	ALPHABETICAL("Alphabetical"),
	ITEM_ID("Item ID"),
	VALUE("Value"),
	PRICE("Price");

	private final String name;

	@Override
	public String toString()
	{
		return name;
	}
}

/*
 * Copyright (c) 2018, TheStonedTurtle <www.github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.lootlogger.data;

import com.google.common.collect.ImmutableMultimap;
import java.util.Arrays;
import java.util.Collection;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import net.runelite.api.ItemComposition;
import net.runelite.api.ItemID;
import net.runelite.client.game.ItemManager;

@RequiredArgsConstructor
@Getter
public enum UniqueItem
{
	// "Uniques" which are actually dropped by multiple bosses
	// God Wars
	GODSWORD_SHARD_1(ItemID.GODSWORD_SHARD_1, BossTab.KREEARRA, BossTab.GENERAL_GRAARDOR, BossTab.COMMANDER_ZILYANA, BossTab.KRIL_TSUTSAROTH),
	GODSWORD_SHARD_2(ItemID.GODSWORD_SHARD_2, BossTab.KREEARRA, BossTab.GENERAL_GRAARDOR, BossTab.COMMANDER_ZILYANA, BossTab.KRIL_TSUTSAROTH),
	GODSWORD_SHARD_3(ItemID.GODSWORD_SHARD_3, BossTab.KREEARRA, BossTab.GENERAL_GRAARDOR, BossTab.COMMANDER_ZILYANA, BossTab.KRIL_TSUTSAROTH),
	// Wildy
	DRAGON_2H_SWORD(ItemID.DRAGON_2H_SWORD, BossTab.CALLISTO, BossTab.VETION, BossTab.VENENATIS, BossTab.KALPHITE_QUEEN, BossTab.CHAOS_ELEMENTAL),
	DRAGON_PICKAXE(ItemID.DRAGON_PICKAXE, BossTab.CALLISTO, BossTab.VETION, BossTab.VENENATIS, BossTab.KING_BLACK_DRAGON, BossTab.CHAOS_ELEMENTAL, BossTab.KALPHITE_QUEEN),
	PET_CHAOS_ELEMENTAL(ItemID.PET_CHAOS_ELEMENTAL, BossTab.CHAOS_ELEMENTAL, BossTab.CHAOS_FANATIC),
	CURVED_BONE(ItemID.CURVED_BONE, BossTab.CALLISTO, BossTab.VETION, BossTab.VENENATIS, BossTab.GIANT_MOLE),
	// Wildy non-boss tabs
	DRAGON_2H_SWORD_2(ItemID.DRAGON_2H_SWORD,  -1, "Artio", "Calvar'ion", "Spindel"),
	DRAGON_PICKAXE_2(ItemID.DRAGON_PICKAXE, -1, "Artio", "Calvar'ion", "Spindel"),
	CURVED_BONE_2(ItemID.CURVED_BONE, -1, "Artio", "Calvar'ion", "Spindel"),
	//Forgotten Four
	AWAKENERS_ORB(ItemID.AWAKENERS_ORB, BossTab.VARDORVIS, BossTab.THE_WHISPERER, BossTab.THE_LEVIATHAN, BossTab.DUKE_SUCELLUS),
	CHROMIUM_INGOT(ItemID.CHROMIUM_INGOT, BossTab.VARDORVIS, BossTab.THE_WHISPERER, BossTab.THE_LEVIATHAN, BossTab.DUKE_SUCELLUS),
	VIRTUS_MASK(ItemID.VIRTUS_MASK, BossTab.VARDORVIS, BossTab.THE_WHISPERER, BossTab.THE_LEVIATHAN, BossTab.DUKE_SUCELLUS),
	VIRTUS_ROBE_TOP(ItemID.VIRTUS_ROBE_TOP, BossTab.VARDORVIS, BossTab.THE_WHISPERER, BossTab.THE_LEVIATHAN, BossTab.DUKE_SUCELLUS),
	VIRTUS_ROBE_BOTTOM(ItemID.VIRTUS_ROBE_BOTTOM, BossTab.VARDORVIS, BossTab.THE_WHISPERER, BossTab.THE_LEVIATHAN, BossTab.DUKE_SUCELLUS),
	// Other
	DRAGON_CHAINBODY(ItemID.DRAGON_CHAINBODY_3140, BossTab.THERMONUCLEAR_SMOKE_DEVIL, BossTab.KALPHITE_QUEEN),
	DRAGON_AXE(ItemID.DRAGON_AXE, BossTab.DAGANNOTH_REX, BossTab.DAGANNOTH_PRIME, BossTab.DAGANNOTH_SUPREME),
	UNCUT_ONYX(ItemID.UNCUT_ONYX, BossTab.ZULRAH, BossTab.SKOTIZO, BossTab.ZALCANO),

	// Unique Items
	// Barrows Uniques
	// Ahrim
	AHRIMS_HOOD(ItemID.AHRIMS_HOOD, BossTab.BARROWS, 0),
	AHRIMS_ROBETOP(ItemID.AHRIMS_ROBETOP, BossTab.BARROWS, 0),
	AHRIMS_ROBESKIRT(ItemID.AHRIMS_ROBESKIRT, BossTab.BARROWS, 0),
	AHRIMS_STAFF(ItemID.AHRIMS_STAFF, BossTab.BARROWS, 0),
	// Dharok
	DHAROKS_HELM(ItemID.DHAROKS_HELM, BossTab.BARROWS, 1),
	DHAROKS_PLATEBODY(ItemID.DHAROKS_PLATEBODY, BossTab.BARROWS, 1),
	DHAROKS_PLATELEGS(ItemID.DHAROKS_PLATELEGS, BossTab.BARROWS, 1),
	DHAROKS_GREATAXE(ItemID.DHAROKS_GREATAXE, BossTab.BARROWS, 1),
	// Guthans
	GUTHANS_HELM(ItemID.GUTHANS_HELM, BossTab.BARROWS, 2),
	GUTHANS_PLATEBODY(ItemID.GUTHANS_PLATEBODY, BossTab.BARROWS, 2),
	GUTHANS_CHAINSKIRT(ItemID.GUTHANS_CHAINSKIRT, BossTab.BARROWS, 2),
	GUTHANS_WARSPEAR(ItemID.GUTHANS_WARSPEAR, BossTab.BARROWS, 2),
	// Karils
	KARILS_COIF(ItemID.KARILS_COIF, BossTab.BARROWS, 3),
	KARILS_LEATHERTOP(ItemID.KARILS_LEATHERTOP, BossTab.BARROWS, 3),
	KARILS_LEATHERSKIRT(ItemID.KARILS_LEATHERSKIRT, BossTab.BARROWS, 3),
	KARILS_CROSSBOW(ItemID.KARILS_CROSSBOW, BossTab.BARROWS, 3),
	//Torag
	TORAGS_HELM(ItemID.TORAGS_HELM, BossTab.BARROWS, 4),
	TORAGS_PLATEBODY(ItemID.TORAGS_PLATEBODY, BossTab.BARROWS, 4),
	TORAGS_PLATELEGS(ItemID.TORAGS_PLATELEGS, BossTab.BARROWS, 4),
	TORAGS_HAMMERS(ItemID.TORAGS_HAMMERS, BossTab.BARROWS, 4),
	// Veracs
	VERACS_HELM(ItemID.VERACS_HELM, BossTab.BARROWS, 5),
	VERACS_BRASSARD(ItemID.VERACS_BRASSARD, BossTab.BARROWS, 5),
	VERACS_PLATESKIRT(ItemID.VERACS_PLATESKIRT, BossTab.BARROWS, 5),
	VERACS_FLAIL(ItemID.VERACS_FLAIL, BossTab.BARROWS, 5),

	// Raids Uniques
	// Mage
	KODAI_INSIGNIA(ItemID.KODAI_INSIGNIA, BossTab.CHAMBERS_OF_XERIC, 0),
	ANCESTRAL_HAT(ItemID.ANCESTRAL_HAT, BossTab.CHAMBERS_OF_XERIC, 0),
	ANCESTRAL_ROBE_TOP(ItemID.ANCESTRAL_ROBE_TOP, BossTab.CHAMBERS_OF_XERIC, 0),
	ANCESTRAL_ROBE_BOTTOM(ItemID.ANCESTRAL_ROBE_BOTTOM, BossTab.CHAMBERS_OF_XERIC, 0),
	// Range
	DRAGON_HUNTER_CROSSBOW(ItemID.DRAGON_HUNTER_CROSSBOW, BossTab.CHAMBERS_OF_XERIC, 1),
	TWISTED_BUCKLER(ItemID.TWISTED_BUCKLER, BossTab.CHAMBERS_OF_XERIC, 1),
	TWISTED_BOW(ItemID.TWISTED_BOW, BossTab.CHAMBERS_OF_XERIC, 1),
	// Melee
	DRAGON_CLAWS(ItemID.DRAGON_CLAWS, BossTab.CHAMBERS_OF_XERIC, 2),
	DINHS_BULWARK(ItemID.DINHS_BULWARK, BossTab.CHAMBERS_OF_XERIC, 2),
	ELDER_MAUL(ItemID.ELDER_MAUL, BossTab.CHAMBERS_OF_XERIC, 2),
	// Prayers/Other
	TORN_PRAYER_SCROLL(ItemID.TORN_PRAYER_SCROLL, BossTab.CHAMBERS_OF_XERIC, 3),
	ARCANE_PRAYER_SCROLL(ItemID.ARCANE_PRAYER_SCROLL, BossTab.CHAMBERS_OF_XERIC, 3),
	DEXTEROUS_PRAYER_SCROLL(ItemID.DEXTEROUS_PRAYER_SCROLL, BossTab.CHAMBERS_OF_XERIC, 3),
	DARK_RELIC(ItemID.DARK_RELIC, BossTab.CHAMBERS_OF_XERIC, 3),

	// Raids 2 Unqiues (Theater of Blood)
	// Weapons / Pet
	GHRAZI_RAPIER(ItemID.GHRAZI_RAPIER, BossTab.THEATRE_OF_BLOOD, 0),
	SCYTHE_OF_VITUR_UNCHARGED(ItemID.SCYTHE_OF_VITUR_UNCHARGED, BossTab.THEATRE_OF_BLOOD, 0),
	SANGUINESTI_STAFF_UNCHAGRED(ItemID.SANGUINESTI_STAFF_UNCHARGED, BossTab.THEATRE_OF_BLOOD, 0),
	LIL_ZIK(ItemID.LIL_ZIK, BossTab.THEATRE_OF_BLOOD, 0),
	// Armor
	AVERNIC_DEFENDER_HILT(ItemID.AVERNIC_DEFENDER_HILT, BossTab.THEATRE_OF_BLOOD, 1),
	JUSTICIAR_FACEGUARD(ItemID.JUSTICIAR_FACEGUARD, BossTab.THEATRE_OF_BLOOD, 1),
	JUSTICIAR_CHESTGUARD(ItemID.JUSTICIAR_CHESTGUARD, BossTab.THEATRE_OF_BLOOD, 1),
	JUSTICIAR_LEGGUARDS(ItemID.JUSTICIAR_LEGGUARDS, BossTab.THEATRE_OF_BLOOD, 1),

	// Zulrah
	// Uniques
	TANZANITE_FANG(ItemID.TANZANITE_FANG, BossTab.ZULRAH, -1),
	MAGIC_FANG(ItemID.MAGIC_FANG, BossTab.ZULRAH, -1),
	SERPENTINE_VISAGE(ItemID.SERPENTINE_VISAGE, BossTab.ZULRAH, -1),
	// Rares
	PET_SNAKELING(ItemID.PET_SNAKELING, BossTab.ZULRAH, 0),
	TANZANITE_MUTAGEN(ItemID.TANZANITE_MUTAGEN, BossTab.ZULRAH, 0),
	MAGMA_MUTAGEN(ItemID.MAGMA_MUTAGEN, BossTab.ZULRAH, 0),
	JAR_OF_SWAMP(ItemID.JAR_OF_SWAMP, BossTab.ZULRAH, 0),

	// Vorkath
	VORKATHS_HEAD(ItemID.VORKATHS_HEAD_21907, BossTab.VORKATH, 0),
	DRAGONBONE_NECKLACE(ItemID.DRAGONBONE_NECKLACE, BossTab.VORKATH, 0),
	JAR_OF_DECAY(ItemID.JAR_OF_DECAY, BossTab.VORKATH, 0),
	VORKI(ItemID.VORKI, BossTab.VORKATH, 0),
	SKELETAL_VISAGE(ItemID.SKELETAL_VISAGE, BossTab.VORKATH, 0),

	// God Wars Dungeon
	// Kreearra (Armadyl)
	ARMADYL_HELMET(ItemID.ARMADYL_HELMET, BossTab.KREEARRA, 0),
	ARMADYL_CHESTPLATE(ItemID.ARMADYL_CHESTPLATE, BossTab.KREEARRA, 0),
	ARMADYL_CHAINSKIRT(ItemID.ARMADYL_CHAINSKIRT, BossTab.KREEARRA, 0),
	ARMADYL_HILT(ItemID.ARMADYL_HILT, BossTab.KREEARRA, 0),
	PET_KREEARRA(ItemID.PET_KREEARRA, BossTab.KREEARRA, -1),
	// General Graardor (Bandos)
	BANDOS_CHESTPLATE(ItemID.BANDOS_CHESTPLATE, BossTab.GENERAL_GRAARDOR, 0),
	BANDOS_TASSETS(ItemID.BANDOS_TASSETS, BossTab.GENERAL_GRAARDOR, 0),
	BANDOS_BOOTS(ItemID.BANDOS_BOOTS, BossTab.GENERAL_GRAARDOR, 0),
	BANDOS_HILT(ItemID.BANDOS_HILT, BossTab.GENERAL_GRAARDOR, 0),
	PET_GENERAL_GRAARDOR(ItemID.PET_GENERAL_GRAARDOR, BossTab.GENERAL_GRAARDOR, -1),
	// Command Zilyana (Saradomin)
	SARADOMIN_SWORD(ItemID.SARADOMIN_SWORD, BossTab.COMMANDER_ZILYANA, 0),
	SARADOMINS_LIGHT(ItemID.SARADOMINS_LIGHT, BossTab.COMMANDER_ZILYANA, 0),
	ARMADYL_CROSSBOW(ItemID.ARMADYL_CROSSBOW, BossTab.COMMANDER_ZILYANA, 0),
	SARADOMIN_HILT(ItemID.SARADOMIN_HILT, BossTab.COMMANDER_ZILYANA, 0),
	PET_ZILYANA(ItemID.PET_ZILYANA, BossTab.COMMANDER_ZILYANA, -1),
	// Kril Tsutsaroth (Zammy)
	STEAM_BATTLESTAFF(ItemID.STEAM_BATTLESTAFF, BossTab.KRIL_TSUTSAROTH, 0),
	ZAMORAKIAN_SPEAR(ItemID.ZAMORAKIAN_SPEAR, BossTab.KRIL_TSUTSAROTH, 0),
	STAFF_OF_THE_DEAD(ItemID.STAFF_OF_THE_DEAD, BossTab.KRIL_TSUTSAROTH, 0),
	ZAMORAK_HILT(ItemID.ZAMORAK_HILT, BossTab.KRIL_TSUTSAROTH, 0),
	PET_KRIL_TSUTSAROTH(ItemID.PET_KRIL_TSUTSAROTH, BossTab.KRIL_TSUTSAROTH, -1),

	// Wildy Bosses
	// Vetion
	SKELETON_CHAMPION_SCROLL(ItemID.SKELETON_CHAMPION_SCROLL, BossTab.VETION, -1, "Calvar'ion"),

	RING_OF_THE_GODS(ItemID.RING_OF_THE_GODS, BossTab.VETION, 0, "Calvar'ion"),
	SKULL_OF_VETION(ItemID.SKULL_OF_VETION, BossTab.VETION, 0, "Calvar'ion"),
	VOIDWAKER_BLADE(ItemID.VOIDWAKER_BLADE, BossTab.VETION, 0, "Calvar'ion"),
	VETION_JR(ItemID.VETION_JR, BossTab.VETION, 0, "Calvar'ion"),
	// Venenatis
	TREASONOUS_RING(ItemID.TREASONOUS_RING, BossTab.VENENATIS, 0, "Spindel"),
	FANGS_OF_VENENATIS(ItemID.FANGS_OF_VENENATIS, BossTab.VENENATIS, 0, "Spindel"),
	VOIDWAKER_GEM(ItemID.VOIDWAKER_GEM, BossTab.VENENATIS, 0, "Spindel"),
	VENENATIS_SPIDERLING(ItemID.VENENATIS_SPIDERLING, BossTab.VENENATIS, 0, "Spindel"),
	// Callisto
	TYRANNICAL_RING(ItemID.TYRANNICAL_RING, BossTab.CALLISTO, 0, "Artio"),
	CLAWS_OF_CALLISTO(ItemID.CLAWS_OF_CALLISTO, BossTab.CALLISTO, 0, "Artio"),
	VOIDWAKER_HILT(ItemID.VOIDWAKER_HILT, BossTab.CALLISTO, 0, "Artio"),
	CALLISTO_CUB(ItemID.CALLISTO_CUB, BossTab.CALLISTO, 0, "Artio"),
	// Chaos Elemental Uniques are all in Shared
	// Chaos Fanatic
	ODIUM_SHARD_1(ItemID.ODIUM_SHARD_1, BossTab.CHAOS_FANATIC, -1),
	MALEDICTION_SHARD_1(ItemID.MALEDICTION_SHARD_1, BossTab.CHAOS_FANATIC, -1),
	// Crazy Archaeologist
	ODIUM_SHARD_2(ItemID.ODIUM_SHARD_2, BossTab.CRAZY_ARCHAEOLOGIST, 0),
	MALEDICTION_SHARD_2(ItemID.MALEDICTION_SHARD_2, BossTab.CRAZY_ARCHAEOLOGIST, 0),
	FEDORA(ItemID.FEDORA, BossTab.CRAZY_ARCHAEOLOGIST, 0),
	// Scorpia
	ODIUM_SHARD_3(ItemID.ODIUM_SHARD_3, BossTab.SCORPIA, 0),
	MALEDICTION_SHARD_3(ItemID.MALEDICTION_SHARD_3, BossTab.SCORPIA, 0),
	SCORPIAS_OFFSPRING(ItemID.SCORPIAS_OFFSPRING, BossTab.SCORPIA, 0),
	// King Black Dragon,
	KBD_HEADS(ItemID.KBD_HEADS, BossTab.KING_BLACK_DRAGON, -1),
	DRACONIC_VISAGE(ItemID.DRACONIC_VISAGE, BossTab.KING_BLACK_DRAGON, -1),
	PRINCE_BLACK_DRAGON(ItemID.PRINCE_BLACK_DRAGON, BossTab.KING_BLACK_DRAGON, -1),

	// Slayer Bosses
	// Skotizo
	DARK_CLAW(ItemID.DARK_CLAW, BossTab.SKOTIZO, -1),
	SKOTOS(ItemID.SKOTOS, BossTab.SKOTIZO, -1),
	JAR_OF_DARKNESS(ItemID.JAR_OF_DARKNESS, BossTab.SKOTIZO, -1),
	// Grotesque Guardians
	GRANITE_GLOVES(ItemID.GRANITE_GLOVES, BossTab.GROTESQUE_GUARDIANS, 0),
	GRANITE_RING(ItemID.GRANITE_RING, BossTab.GROTESQUE_GUARDIANS, 0),
	GRANITE_HAMMER(ItemID.GRANITE_HAMMER, BossTab.GROTESQUE_GUARDIANS, 0),
	BLACK_TOURMALINE_CORE(ItemID.BLACK_TOURMALINE_CORE, BossTab.GROTESQUE_GUARDIANS, 1),
	NOON(ItemID.NOON, BossTab.GROTESQUE_GUARDIANS, 1),
	JAR_OF_STONE(ItemID.JAR_OF_STONE, BossTab.GROTESQUE_GUARDIANS, 1),
	// Abyssal Sire
	UNSIRED(ItemID.UNSIRED, BossTab.ABYSSAL_SIRE, 0),
	BLUDGEON_CLAW(ItemID.BLUDGEON_CLAW, BossTab.ABYSSAL_SIRE, 0),
	BLUDGEON_SPINE(ItemID.BLUDGEON_SPINE, BossTab.ABYSSAL_SIRE, 0),
	BLUDGEON_AXON(ItemID.BLUDGEON_AXON, BossTab.ABYSSAL_SIRE, 0),
	ABYSSAL_DAGGER(ItemID.ABYSSAL_DAGGER, BossTab.ABYSSAL_SIRE, 1),
	ABYSSAL_WHIP(ItemID.ABYSSAL_WHIP, BossTab.ABYSSAL_SIRE, 1),
	ABYSSAL_ORPHAN(ItemID.ABYSSAL_ORPHAN, BossTab.ABYSSAL_SIRE, 1),
	JAR_OF_MIASMA(ItemID.JAR_OF_MIASMA, BossTab.ABYSSAL_SIRE, 1),
	ABYSSAL_HEAD(ItemID.ABYSSAL_HEAD, BossTab.ABYSSAL_SIRE, 1),
	// Kraken
	TRIDENT_OF_THE_SEAS_FULL(ItemID.TRIDENT_OF_THE_SEAS_FULL, BossTab.KRAKEN, 0),
	KRAKEN_TENTACLE(ItemID.KRAKEN_TENTACLE, BossTab.KRAKEN, 0),
	JAR_OF_DIRT(ItemID.JAR_OF_DIRT, BossTab.KRAKEN, 0),
	PET_KRAKEN(ItemID.PET_KRAKEN, BossTab.KRAKEN, 0),
	// Cerberus
	PRIMORDIAL_CRYSTAL(ItemID.PRIMORDIAL_CRYSTAL, BossTab.CERBERUS, 0),
	PEGASIAN_CRYSTAL(ItemID.PEGASIAN_CRYSTAL, BossTab.CERBERUS, 0),
	ETERNAL_CRYSTAL(ItemID.ETERNAL_CRYSTAL, BossTab.CERBERUS, 0),
	SMOULDERING_STONE(ItemID.SMOULDERING_STONE, BossTab.CERBERUS, 0),
	JAR_OF_SOULS(ItemID.JAR_OF_SOULS, BossTab.CERBERUS, 0),
	HELLPUPPY(ItemID.HELLPUPPY, BossTab.CERBERUS, 0),
	// Thermonuclear Smoke Devil
	SMOKE_BATTLESTAFF(ItemID.SMOKE_BATTLESTAFF, BossTab.THERMONUCLEAR_SMOKE_DEVIL, -1),
	OCCULT_NECKLACE(ItemID.OCCULT_NECKLACE, BossTab.THERMONUCLEAR_SMOKE_DEVIL, -1),
	PET_SMOKE_DEVIL(ItemID.PET_SMOKE_DEVIL, BossTab.THERMONUCLEAR_SMOKE_DEVIL, -1),
	// Alchemical Hydra
	HYDRAS_EYE(ItemID.HYDRAS_EYE, BossTab.ALCHEMICAL_HYDRA, 0),
	HYDRAS_FANG(ItemID.HYDRAS_FANG, BossTab.ALCHEMICAL_HYDRA, 0),
	HYDRAS_HEART(ItemID.HYDRAS_HEART, BossTab.ALCHEMICAL_HYDRA, 0),
	HYDRA_TAIL(ItemID.HYDRA_TAIL, BossTab.ALCHEMICAL_HYDRA, 0),
	HYDRA_HEADS(ItemID.ALCHEMICAL_HYDRA_HEADS, BossTab.ALCHEMICAL_HYDRA, 0),
	HYDRA_LEATHER(ItemID.HYDRA_LEATHER, BossTab.ALCHEMICAL_HYDRA, 1),
	HYDRAS_CLAW(ItemID.HYDRAS_CLAW, BossTab.ALCHEMICAL_HYDRA, 1),
	DRAGON_THROWNAXE(ItemID.DRAGON_THROWNAXE, BossTab.ALCHEMICAL_HYDRA, 1),
	DRAGON_KNIFE(ItemID.DRAGON_KNIFE, BossTab.ALCHEMICAL_HYDRA, 1),
	JAR_OF_CHEMICALS(ItemID.JAR_OF_CHEMICALS, BossTab.ALCHEMICAL_HYDRA, 1),
	IKKLE_HYDRA(ItemID.IKKLE_HYDRA, BossTab.ALCHEMICAL_HYDRA, 1),

	// Other Bosses
	// Giant Mole
	BABY_MOLE(ItemID.BABY_MOLE, BossTab.GIANT_MOLE, -1),
	// Kalphite Queen
	KQ_HEAD(ItemID.KQ_HEAD, BossTab.KALPHITE_QUEEN, 0),
	JAR_OF_SAND(ItemID.JAR_OF_SAND, BossTab.KALPHITE_QUEEN, 0),
	KALPHITE_PRINCESS(ItemID.KALPHITE_PRINCESS, BossTab.KALPHITE_QUEEN, 0),
	// Corporeal Beast
	SPIRIT_SHIELD(ItemID.SPIRIT_SHIELD, BossTab.CORPOREAL_BEAST, 0),
	HOLY_ELIXIR(ItemID.HOLY_ELIXIR, BossTab.CORPOREAL_BEAST, 0),
	PET_DARK_CORE(ItemID.PET_DARK_CORE, BossTab.CORPOREAL_BEAST, 0),
	JAR_OF_SPIRITS(ItemID.JAR_OF_SPIRITS, BossTab.CORPOREAL_BEAST, 0),
	SPECTRAL_SIGIL(ItemID.SPECTRAL_SIGIL, BossTab.CORPOREAL_BEAST, 1),
	ARCANE_SIGIL(ItemID.ARCANE_SIGIL, BossTab.CORPOREAL_BEAST, 1),
	ELYSIAN_SIGIL(ItemID.ELYSIAN_SIGIL, BossTab.CORPOREAL_BEAST, 1),
	// The Gauntlet
	CRYSTAL_SHARD(ItemID.CRYSTAL_SHARD, BossTab.THE_GAUNTLET, 0),
	CRYSTAL_WEAPON_SEED(ItemID.CRYSTAL_WEAPON_SEED, BossTab.THE_GAUNTLET, 0),
	CRYSTAL_ARMOUR_SEED(ItemID.CRYSTAL_ARMOUR_SEED, BossTab.THE_GAUNTLET, 0),
	ENHANCED_CRYSTAL_WEAPON_SEED(ItemID.ENHANCED_CRYSTAL_WEAPON_SEED, BossTab.THE_GAUNTLET, 0, ItemID.BLADE_OF_SAELDOR_INACTIVE),
	YOUNGLLEF(ItemID.YOUNGLLEF, BossTab.THE_GAUNTLET, 0),
	// Dagannoth Rex
	RING_OF_LIFE(ItemID.RING_OF_LIFE, BossTab.DAGANNOTH_REX, -1),
	WARRIOR_RING(ItemID.WARRIOR_RING, BossTab.DAGANNOTH_REX, -1),
	BERSERKER_RING(ItemID.BERSERKER_RING, BossTab.DAGANNOTH_REX, -1),
	PET_DAGANNOTH_REX(ItemID.PET_DAGANNOTH_REX, BossTab.DAGANNOTH_REX, -1),
	// Dagannoth Prime
	MUD_BATTLESTAFF(ItemID.MUD_BATTLESTAFF, BossTab.DAGANNOTH_PRIME, -1),
	SEERS_RING(ItemID.SEERS_RING, BossTab.DAGANNOTH_PRIME, -1),
	PET_DAGANNOTH_PRIME(ItemID.PET_DAGANNOTH_PRIME, BossTab.DAGANNOTH_PRIME, -1),
	// Dagannoth Supreme
	SEERCULL(ItemID.SEERCULL, BossTab.DAGANNOTH_SUPREME, -1),
	ARCHERS_RING(ItemID.ARCHERS_RING, BossTab.DAGANNOTH_SUPREME, -1),
	PET_DAGANNOTH_SUPREME(ItemID.PET_DAGANNOTH_SUPREME, BossTab.DAGANNOTH_SUPREME, -1),

	// Beginner Clue Scrolls
	BEAR_FEET(ItemID.BEAR_FEET, BossTab.CLUE_SCROLL_BEGINNER, -1),
	FROG_SLIPPERS(ItemID.FROG_SLIPPERS, BossTab.CLUE_SCROLL_BEGINNER, -1),
	DEMON_FEET(ItemID.DEMON_FEET, BossTab.CLUE_SCROLL_BEGINNER, -1),
	MOLE_SLIPPERS(ItemID.MOLE_SLIPPERS, BossTab.CLUE_SCROLL_BEGINNER, -1),

	SANDWICH_LADY_HAT(ItemID.SANDWICH_LADY_HAT, BossTab.CLUE_SCROLL_BEGINNER, 0),
	SANDWICH_LADY_TOP(ItemID.SANDWICH_LADY_TOP, BossTab.CLUE_SCROLL_BEGINNER, 0),
	SANDWICH_LADY_BOTTOM(ItemID.SANDWICH_LADY_BOTTOM, BossTab.CLUE_SCROLL_BEGINNER, 0),

	JESTER_CAPE(ItemID.JESTER_CAPE, BossTab.CLUE_SCROLL_BEGINNER, 1),
	SHOULDER_PARROT(ItemID.SHOULDER_PARROT, BossTab.CLUE_SCROLL_BEGINNER, 1),
	AMULET_OF_DEFENCE_T(ItemID.AMULET_OF_DEFENCE_T, BossTab.CLUE_SCROLL_BEGINNER, 1),

	MONKS_ROBE_TOP_T(ItemID.MONKS_ROBE_TOP_T, BossTab.CLUE_SCROLL_BEGINNER, 2),
	MONKS_ROBE_T(ItemID.MONKS_ROBE_T, BossTab.CLUE_SCROLL_BEGINNER, 2),
	RUNE_SCIMITAR_ORNAMENT_KIT_GUTHIX(ItemID.RUNE_SCIMITAR_ORNAMENT_KIT_GUTHIX, BossTab.CLUE_SCROLL_BEGINNER, 2),
	RUNE_SCIMITAR_ORNAMENT_KIT_SARADOMIN(ItemID.RUNE_SCIMITAR_ORNAMENT_KIT_SARADOMIN, BossTab.CLUE_SCROLL_BEGINNER, 2),
	RUNE_SCIMITAR_ORNAMENT_KIT_ZAMORAK(ItemID.RUNE_SCIMITAR_ORNAMENT_KIT_ZAMORAK, BossTab.CLUE_SCROLL_BEGINNER, 2),

	// Easy Clue Scrolls
	BRONZE_FULL_HELM_T(ItemID.BRONZE_FULL_HELM_T, BossTab.CLUE_SCROLL_EASY, -1),
	BRONZE_PLATEBODY_T(ItemID.BRONZE_PLATEBODY_T, BossTab.CLUE_SCROLL_EASY, -1),
	BRONZE_PLATELEGS_T(ItemID.BRONZE_PLATELEGS_T, BossTab.CLUE_SCROLL_EASY, -1),
	BRONZE_PLATESKIRT_T(ItemID.BRONZE_PLATESKIRT_T, BossTab.CLUE_SCROLL_EASY, -1),
	BRONZE_KITESHIELD_T(ItemID.BRONZE_KITESHIELD_T, BossTab.CLUE_SCROLL_EASY, -1),
	BRONZE_FULL_HELM_G(ItemID.BRONZE_FULL_HELM_G, BossTab.CLUE_SCROLL_EASY, 0),
	BRONZE_PLATEBODY_G(ItemID.BRONZE_PLATEBODY_G, BossTab.CLUE_SCROLL_EASY, 0),
	BRONZE_PLATELEGS_G(ItemID.BRONZE_PLATELEGS_G, BossTab.CLUE_SCROLL_EASY, 0),
	BRONZE_PLATESKIRT_G(ItemID.BRONZE_PLATESKIRT_G, BossTab.CLUE_SCROLL_EASY, 0),
	BRONZE_KITESHIELD_G(ItemID.BRONZE_KITESHIELD_G, BossTab.CLUE_SCROLL_EASY, 0),
	IRON_FULL_HELM_T(ItemID.IRON_FULL_HELM_T, BossTab.CLUE_SCROLL_EASY, 1),
	IRON_PLATEBODY_T(ItemID.IRON_PLATEBODY_T, BossTab.CLUE_SCROLL_EASY, 1),
	IRON_PLATELEGS_T(ItemID.IRON_PLATELEGS_T, BossTab.CLUE_SCROLL_EASY, 1),
	IRON_PLATESKIRT_T(ItemID.IRON_PLATESKIRT_T, BossTab.CLUE_SCROLL_EASY, 1),
	IRON_KITESHIELD_T(ItemID.IRON_KITESHIELD_T, BossTab.CLUE_SCROLL_EASY, 1),
	IRON_FULL_HELM_G(ItemID.IRON_FULL_HELM_G, BossTab.CLUE_SCROLL_EASY, 2),
	IRON_PLATEBODY_G(ItemID.IRON_PLATEBODY_G, BossTab.CLUE_SCROLL_EASY, 2),
	IRON_PLATELEGS_G(ItemID.IRON_PLATELEGS_G, BossTab.CLUE_SCROLL_EASY, 2),
	IRON_PLATESKIRT_G(ItemID.IRON_PLATESKIRT_G, BossTab.CLUE_SCROLL_EASY, 2),
	IRON_KITESHIELD_G(ItemID.IRON_KITESHIELD_G, BossTab.CLUE_SCROLL_EASY, 2),
	STEEL_FULL_HELM_T(ItemID.STEEL_FULL_HELM_T, BossTab.CLUE_SCROLL_EASY, 3),
	STEEL_PLATEBODY_T(ItemID.STEEL_PLATEBODY_T, BossTab.CLUE_SCROLL_EASY, 3),
	STEEL_PLATELEGS_T(ItemID.STEEL_PLATELEGS_T, BossTab.CLUE_SCROLL_EASY, 3),
	STEEL_PLATESKIRT_T(ItemID.STEEL_PLATESKIRT_T, BossTab.CLUE_SCROLL_EASY, 3),
	STEEL_KITESHIELD_T(ItemID.STEEL_KITESHIELD_T, BossTab.CLUE_SCROLL_EASY, 3),
	STEEL_FULL_HELM_G(ItemID.STEEL_FULL_HELM_G, BossTab.CLUE_SCROLL_EASY, 4),
	STEEL_PLATEBODY_G(ItemID.STEEL_PLATEBODY_G, BossTab.CLUE_SCROLL_EASY, 4),
	STEEL_PLATELEGS_G(ItemID.STEEL_PLATELEGS_G, BossTab.CLUE_SCROLL_EASY, 4),
	STEEL_PLATESKIRT_G(ItemID.STEEL_PLATESKIRT_G, BossTab.CLUE_SCROLL_EASY, 4),
	STEEL_KITESHIELD_G(ItemID.STEEL_KITESHIELD_G, BossTab.CLUE_SCROLL_EASY, 4),
	BLACK_FULL_HELM_T(ItemID.BLACK_FULL_HELM_T, BossTab.CLUE_SCROLL_EASY, 5),
	BLACK_PLATEBODY_T(ItemID.BLACK_PLATEBODY_T, BossTab.CLUE_SCROLL_EASY, 5),
	BLACK_PLATELEGS_T(ItemID.BLACK_PLATELEGS_T, BossTab.CLUE_SCROLL_EASY, 5),
	BLACK_PLATESKIRT_T(ItemID.BLACK_PLATESKIRT_T, BossTab.CLUE_SCROLL_EASY, 5),
	BLACK_KITESHIELD_T(ItemID.BLACK_KITESHIELD_T, BossTab.CLUE_SCROLL_EASY, 5),
	BLACK_FULL_HELM_G(ItemID.BLACK_FULL_HELM_G, BossTab.CLUE_SCROLL_EASY, 6),
	BLACK_PLATEBODY_G(ItemID.BLACK_PLATEBODY_G, BossTab.CLUE_SCROLL_EASY, 6),
	BLACK_PLATELEGS_G(ItemID.BLACK_PLATELEGS_G, BossTab.CLUE_SCROLL_EASY, 6),
	BLACK_PLATESKIRT_G(ItemID.BLACK_PLATESKIRT_G, BossTab.CLUE_SCROLL_EASY, 6),
	BLACK_KITESHIELD_G(ItemID.BLACK_KITESHIELD_G, BossTab.CLUE_SCROLL_EASY, 6),
	BLUE_WIZARD_HAT_T(ItemID.BLUE_WIZARD_HAT_T, BossTab.CLUE_SCROLL_EASY, 7),
	BLUE_WIZARD_ROBE_T(ItemID.BLUE_WIZARD_ROBE_T, BossTab.CLUE_SCROLL_EASY, 7),
	BLUE_SKIRT_T(ItemID.BLUE_SKIRT_T, BossTab.CLUE_SCROLL_EASY, 7),
	BLUE_WIZARD_HAT_G(ItemID.BLUE_WIZARD_HAT_G, BossTab.CLUE_SCROLL_EASY, 8),
	BLUE_WIZARD_ROBE_G(ItemID.BLUE_WIZARD_ROBE_G, BossTab.CLUE_SCROLL_EASY, 8),
	BLUE_SKIRT_G(ItemID.BLUE_SKIRT_G, BossTab.CLUE_SCROLL_EASY, 8),
	BLACK_WIZARD_HAT_T(ItemID.BLACK_WIZARD_HAT_T, BossTab.CLUE_SCROLL_EASY, 9),
	BLACK_WIZARD_ROBE_T(ItemID.BLACK_WIZARD_ROBE_T, BossTab.CLUE_SCROLL_EASY, 9),
	BLACK_SKIRT_T(ItemID.BLACK_SKIRT_T, BossTab.CLUE_SCROLL_EASY, 9),
	BLACK_WIZARD_HAT_G(ItemID.BLACK_WIZARD_HAT_G, BossTab.CLUE_SCROLL_EASY, 10),
	BLACK_WIZARD_ROBE_G(ItemID.BLACK_WIZARD_ROBE_G, BossTab.CLUE_SCROLL_EASY, 10),
	BLACK_SKIRT_G(ItemID.BLACK_SKIRT_G, BossTab.CLUE_SCROLL_EASY, 10),
	LEATHER_BODY_G(ItemID.LEATHER_BODY_G, BossTab.CLUE_SCROLL_EASY, 11),
	LEATHER_CHAPS_G(ItemID.LEATHER_CHAPS_G, BossTab.CLUE_SCROLL_EASY, 11),
	STUDDED_BODY_T(ItemID.STUDDED_BODY_T, BossTab.CLUE_SCROLL_EASY, 11),
	STUDDED_CHAPS_T(ItemID.STUDDED_CHAPS_T, BossTab.CLUE_SCROLL_EASY, 11),
	STUDDED_BODY_G(ItemID.STUDDED_BODY_G, BossTab.CLUE_SCROLL_EASY, 11),
	STUDDED_CHAPS_G(ItemID.STUDDED_CHAPS_G, BossTab.CLUE_SCROLL_EASY, 11),
	BLACK_HELM_H1(ItemID.BLACK_HELM_H1, BossTab.CLUE_SCROLL_EASY, 12),
	BLACK_HELM_H2(ItemID.BLACK_HELM_H2, BossTab.CLUE_SCROLL_EASY, 12),
	BLACK_HELM_H3(ItemID.BLACK_HELM_H3, BossTab.CLUE_SCROLL_EASY, 12),
	BLACK_HELM_H4(ItemID.BLACK_HELM_H4, BossTab.CLUE_SCROLL_EASY, 12),
	BLACK_HELM_H5(ItemID.BLACK_HELM_H5, BossTab.CLUE_SCROLL_EASY, 12),
	BLACK_SHIELD_H1(ItemID.BLACK_SHIELD_H1, BossTab.CLUE_SCROLL_EASY, 13),
	BLACK_SHIELD_H2(ItemID.BLACK_SHIELD_H2, BossTab.CLUE_SCROLL_EASY, 13),
	BLACK_SHIELD_H3(ItemID.BLACK_SHIELD_H3, BossTab.CLUE_SCROLL_EASY, 13),
	BLACK_SHIELD_H4(ItemID.BLACK_SHIELD_H4, BossTab.CLUE_SCROLL_EASY, 13),
	BLACK_SHIELD_H5(ItemID.BLACK_SHIELD_H5, BossTab.CLUE_SCROLL_EASY, 13),
	BLUE_ELEGANT_SHIRT(ItemID.BLUE_ELEGANT_SHIRT, BossTab.CLUE_SCROLL_EASY, 14),
	BLUE_ELEGANT_LEGS(ItemID.BLUE_ELEGANT_LEGS, BossTab.CLUE_SCROLL_EASY, 14),
	BLUE_ELEGANT_BLOUSE(ItemID.BLUE_ELEGANT_BLOUSE, BossTab.CLUE_SCROLL_EASY, 14),
	BLUE_ELEGANT_SKIRT(ItemID.BLUE_ELEGANT_SKIRT, BossTab.CLUE_SCROLL_EASY, 14),
	GREEN_ELEGANT_SHIRT(ItemID.GREEN_ELEGANT_SHIRT, BossTab.CLUE_SCROLL_EASY, 15),
	GREEN_ELEGANT_LEGS(ItemID.GREEN_ELEGANT_LEGS, BossTab.CLUE_SCROLL_EASY, 15),
	GREEN_ELEGANT_BLOUSE(ItemID.GREEN_ELEGANT_BLOUSE, BossTab.CLUE_SCROLL_EASY, 15),
	GREEN_ELEGANT_SKIRT(ItemID.GREEN_ELEGANT_SKIRT, BossTab.CLUE_SCROLL_EASY, 15),
	RED_ELEGANT_SHIRT(ItemID.RED_ELEGANT_SHIRT, BossTab.CLUE_SCROLL_EASY, 16),
	RED_ELEGANT_LEGS(ItemID.RED_ELEGANT_LEGS, BossTab.CLUE_SCROLL_EASY, 16),
	RED_ELEGANT_BLOUSE(ItemID.RED_ELEGANT_BLOUSE, BossTab.CLUE_SCROLL_EASY, 16),
	RED_ELEGANT_SKIRT(ItemID.RED_ELEGANT_SKIRT, BossTab.CLUE_SCROLL_EASY, 16),
	BOBS_RED_SHIRT(ItemID.BOBS_RED_SHIRT, BossTab.CLUE_SCROLL_EASY, 17),
	BOBS_BLUE_SHIRT(ItemID.BOBS_BLUE_SHIRT, BossTab.CLUE_SCROLL_EASY, 17),
	BOBS_GREEN_SHIRT(ItemID.BOBS_GREEN_SHIRT, BossTab.CLUE_SCROLL_EASY, 17),
	BOBS_BLACK_SHIRT(ItemID.BOBS_BLACK_SHIRT, BossTab.CLUE_SCROLL_EASY, 17),
	BOBS_PURPLE_SHIRT(ItemID.BOBS_PURPLE_SHIRT, BossTab.CLUE_SCROLL_EASY, 17),
	STAFF_OF_BOB_THE_CAT(ItemID.STAFF_OF_BOB_THE_CAT, BossTab.CLUE_SCROLL_EASY, 17),
	A_POWDERED_WIG(ItemID.A_POWDERED_WIG, BossTab.CLUE_SCROLL_EASY, 18),
	FLARED_TROUSERS(ItemID.FLARED_TROUSERS, BossTab.CLUE_SCROLL_EASY, 18),
	PANTALOONS(ItemID.PANTALOONS, BossTab.CLUE_SCROLL_EASY, 18),
	SLEEPING_CAP(ItemID.SLEEPING_CAP, BossTab.CLUE_SCROLL_EASY, 18),
	GUTHIX_ROBE_TOP(ItemID.GUTHIX_ROBE_TOP, BossTab.CLUE_SCROLL_EASY, 19),
	GUTHIX_ROBE_LEGS(ItemID.GUTHIX_ROBE_LEGS, BossTab.CLUE_SCROLL_EASY, 19),
	SARADOMIN_ROBE_TOP(ItemID.SARADOMIN_ROBE_TOP, BossTab.CLUE_SCROLL_EASY, 19),
	SARADOMIN_ROBE_LEGS(ItemID.SARADOMIN_ROBE_LEGS, BossTab.CLUE_SCROLL_EASY, 19),
	ZAMORAK_ROBE_TOP(ItemID.ZAMORAK_ROBE_TOP, BossTab.CLUE_SCROLL_EASY, 19),
	ZAMORAK_ROBE_LEGS(ItemID.ZAMORAK_ROBE_LEGS, BossTab.CLUE_SCROLL_EASY, 19),
	ANCIENT_ROBE_TOP(ItemID.ANCIENT_ROBE_TOP, BossTab.CLUE_SCROLL_EASY, 20),
	ANCIENT_ROBE_LEGS(ItemID.ANCIENT_ROBE_LEGS, BossTab.CLUE_SCROLL_EASY, 20),
	BANDOS_ROBE_TOP(ItemID.BANDOS_ROBE_TOP, BossTab.CLUE_SCROLL_EASY, 20),
	BANDOS_ROBE_LEGS(ItemID.BANDOS_ROBE_LEGS, BossTab.CLUE_SCROLL_EASY, 20),
	ARMADYL_ROBE_TOP(ItemID.ARMADYL_ROBE_TOP, BossTab.CLUE_SCROLL_EASY, 20),
	ARMADYL_ROBE_LEGS(ItemID.ARMADYL_ROBE_LEGS, BossTab.CLUE_SCROLL_EASY, 20),
	BLACK_BERET(ItemID.BLACK_BERET, BossTab.CLUE_SCROLL_EASY, 21),
	BLUE_BERET(ItemID.BLUE_BERET, BossTab.CLUE_SCROLL_EASY, 21),
	WHITE_BERET(ItemID.WHITE_BERET, BossTab.CLUE_SCROLL_EASY, 21),
	RED_BERET(ItemID.RED_BERET, BossTab.CLUE_SCROLL_EASY, 21),
	HIGHWAYMAN_MASK(ItemID.HIGHWAYMAN_MASK, BossTab.CLUE_SCROLL_EASY, 22),
	IMP_MASK(ItemID.IMP_MASK, BossTab.CLUE_SCROLL_EASY, 22),
	GOBLIN_MASK(ItemID.GOBLIN_MASK, BossTab.CLUE_SCROLL_EASY, 22),
	BEANIE(ItemID.BEANIE, BossTab.CLUE_SCROLL_EASY, 22),
	TEAM_CAPE_I(ItemID.TEAM_CAPE_I, BossTab.CLUE_SCROLL_EASY, 23),
	TEAM_CAPE_X(ItemID.TEAM_CAPE_X, BossTab.CLUE_SCROLL_EASY, 23),
	TEAM_CAPE_ZERO(ItemID.TEAM_CAPE_ZERO, BossTab.CLUE_SCROLL_EASY, 23),
	CAPE_OF_SKULLS(ItemID.CAPE_OF_SKULLS, BossTab.CLUE_SCROLL_EASY, 23),
	AMULET_OF_MAGIC_T(ItemID.AMULET_OF_MAGIC_T, BossTab.CLUE_SCROLL_EASY, 24),
	AMULET_OF_POWER_T(ItemID.AMULET_OF_POWER_T, BossTab.CLUE_SCROLL_EASY, 24),
	BLACK_CANE(ItemID.BLACK_CANE, BossTab.CLUE_SCROLL_EASY, 24),
	BLACK_PICKAXE(ItemID.BLACK_PICKAXE, BossTab.CLUE_SCROLL_EASY, 24),
	LARGE_SPADE(ItemID.LARGE_SPADE, BossTab.CLUE_SCROLL_EASY, 24),
	RAIN_BOW(ItemID.RAIN_BOW, BossTab.CLUE_SCROLL_EASY, 24),
	HAM_JOINT(ItemID.HAM_JOINT, BossTab.CLUE_SCROLL_EASY, 24),
	WOODEN_SHIELD_G(ItemID.WOODEN_SHIELD_G, BossTab.CLUE_SCROLL_EASY, 25),
	GOLDEN_CHEFS_HAT(ItemID.GOLDEN_CHEFS_HAT, BossTab.CLUE_SCROLL_EASY, 25),
	GOLDEN_APRON(ItemID.GOLDEN_APRON, BossTab.CLUE_SCROLL_EASY, 25),
	MONKS_ROBE_TOP_G(ItemID.MONKS_ROBE_TOP_G, BossTab.CLUE_SCROLL_EASY, 25),
	MONKS_ROBE_G(ItemID.MONKS_ROBE_G, BossTab.CLUE_SCROLL_EASY, 25),
	BLACK_PLATEBODY_H1(ItemID.BLACK_PLATEBODY_H1, BossTab.CLUE_SCROLL_EASY, 26),
	BLACK_PLATEBODY_H2(ItemID.BLACK_PLATEBODY_H2, BossTab.CLUE_SCROLL_EASY, 26),
	BLACK_PLATEBODY_H3(ItemID.BLACK_PLATEBODY_H3, BossTab.CLUE_SCROLL_EASY, 26),
	BLACK_PLATEBODY_H4(ItemID.BLACK_PLATEBODY_H4, BossTab.CLUE_SCROLL_EASY, 26),
	BLACK_PLATEBODY_H5(ItemID.BLACK_PLATEBODY_H5, BossTab.CLUE_SCROLL_EASY, 26),

	// Medium Clue Scrolls
	MITHRIL_FULL_HELM_T(ItemID.MITHRIL_FULL_HELM_T, BossTab.CLUE_SCROLL_MEDIUM, -1),
	MITHRIL_PLATEBODY_T(ItemID.MITHRIL_PLATEBODY_T, BossTab.CLUE_SCROLL_MEDIUM, -1),
	MITHRIL_PLATELEGS_T(ItemID.MITHRIL_PLATELEGS_T, BossTab.CLUE_SCROLL_MEDIUM, -1),
	MITHRIL_PLATESKIRT_T(ItemID.MITHRIL_PLATESKIRT_T, BossTab.CLUE_SCROLL_MEDIUM, -1),
	MITHRIL_KITESHIELD_T(ItemID.MITHRIL_KITESHIELD_T, BossTab.CLUE_SCROLL_MEDIUM, -1),
	MITHRIL_FULL_HELM_G(ItemID.MITHRIL_FULL_HELM_G, BossTab.CLUE_SCROLL_MEDIUM, 0),
	MITHRIL_PLATEBODY_G(ItemID.MITHRIL_PLATEBODY_G, BossTab.CLUE_SCROLL_MEDIUM, 0),
	MITHRIL_PLATELEGS_G(ItemID.MITHRIL_PLATELEGS_G, BossTab.CLUE_SCROLL_MEDIUM, 0),
	MITHRIL_PLATESKIRT_G(ItemID.MITHRIL_PLATESKIRT_G, BossTab.CLUE_SCROLL_MEDIUM, 0),
	MITHRIL_KITESHIELD_G(ItemID.MITHRIL_KITESHIELD_G, BossTab.CLUE_SCROLL_MEDIUM, 0),
	ADAMANT_FULL_HELM_T(ItemID.ADAMANT_FULL_HELM_T, BossTab.CLUE_SCROLL_MEDIUM, 1),
	ADAMANT_PLATEBODY_T(ItemID.ADAMANT_PLATEBODY_T, BossTab.CLUE_SCROLL_MEDIUM, 1),
	ADAMANT_PLATELEGS_T(ItemID.ADAMANT_PLATELEGS_T, BossTab.CLUE_SCROLL_MEDIUM, 1),
	ADAMANT_PLATESKIRT_T(ItemID.ADAMANT_PLATESKIRT_T, BossTab.CLUE_SCROLL_MEDIUM, 1),
	ADAMANT_KITESHIELD_T(ItemID.ADAMANT_KITESHIELD_T, BossTab.CLUE_SCROLL_MEDIUM, 1),
	ADAMANT_FULL_HELM_G(ItemID.ADAMANT_FULL_HELM_G, BossTab.CLUE_SCROLL_MEDIUM, 2),
	ADAMANT_PLATEBODY_G(ItemID.ADAMANT_PLATEBODY_G, BossTab.CLUE_SCROLL_MEDIUM, 2),
	ADAMANT_PLATELEGS_G(ItemID.ADAMANT_PLATELEGS_G, BossTab.CLUE_SCROLL_MEDIUM, 2),
	ADAMANT_PLATESKIRT_G(ItemID.ADAMANT_PLATESKIRT_G, BossTab.CLUE_SCROLL_MEDIUM, 2),
	ADAMANT_KITESHIELD_G(ItemID.ADAMANT_KITESHIELD_G, BossTab.CLUE_SCROLL_MEDIUM, 2),
	RANGER_BOOTS(ItemID.RANGER_BOOTS, BossTab.CLUE_SCROLL_MEDIUM, 3),
	HOLY_SANDALS(ItemID.HOLY_SANDALS, BossTab.CLUE_SCROLL_MEDIUM, 3),
	WIZARD_BOOTS(ItemID.WIZARD_BOOTS, BossTab.CLUE_SCROLL_MEDIUM, 3),
	CLIMBING_BOOTS_G(ItemID.CLIMBING_BOOTS_G, BossTab.CLUE_SCROLL_MEDIUM, 3),
	RED_HEADBAND(ItemID.RED_HEADBAND, BossTab.CLUE_SCROLL_MEDIUM, 4),
	BLACK_HEADBAND(ItemID.BLACK_HEADBAND, BossTab.CLUE_SCROLL_MEDIUM, 4),
	BROWN_HEADBAND(ItemID.BROWN_HEADBAND, BossTab.CLUE_SCROLL_MEDIUM, 4),
	PINK_HEADBAND(ItemID.PINK_HEADBAND, BossTab.CLUE_SCROLL_MEDIUM, 4),
	GREEN_HEADBAND(ItemID.GREEN_HEADBAND, BossTab.CLUE_SCROLL_MEDIUM, 5),
	BLUE_HEADBAND(ItemID.BLUE_HEADBAND, BossTab.CLUE_SCROLL_MEDIUM, 5),
	GOLD_HEADBAND(ItemID.GOLD_HEADBAND, BossTab.CLUE_SCROLL_MEDIUM, 5),
	WHITE_HEADBAND(ItemID.WHITE_HEADBAND, BossTab.CLUE_SCROLL_MEDIUM, 5),
	RED_BOATER(ItemID.RED_BOATER, BossTab.CLUE_SCROLL_MEDIUM, 6),
	ORANGE_BOATER(ItemID.ORANGE_BOATER, BossTab.CLUE_SCROLL_MEDIUM, 6),
	GREEN_BOATER(ItemID.GREEN_BOATER, BossTab.CLUE_SCROLL_MEDIUM, 6),
	BLUE_BOATER(ItemID.BLUE_BOATER, BossTab.CLUE_SCROLL_MEDIUM, 6),
	BLACK_BOATER(ItemID.BLACK_BOATER, BossTab.CLUE_SCROLL_MEDIUM, 7),
	PINK_BOATER(ItemID.PINK_BOATER, BossTab.CLUE_SCROLL_MEDIUM, 7),
	PURPLE_BOATER(ItemID.PURPLE_BOATER, BossTab.CLUE_SCROLL_MEDIUM, 7),
	WHITE_BOATER(ItemID.WHITE_BOATER, BossTab.CLUE_SCROLL_MEDIUM, 7),
	ADAMANT_HELM_H1(ItemID.ADAMANT_HELM_H1, BossTab.CLUE_SCROLL_MEDIUM, 8),
	ADAMANT_HELM_H2(ItemID.ADAMANT_HELM_H2, BossTab.CLUE_SCROLL_MEDIUM, 8),
	ADAMANT_HELM_H3(ItemID.ADAMANT_HELM_H3, BossTab.CLUE_SCROLL_MEDIUM, 8),
	ADAMANT_HELM_H4(ItemID.ADAMANT_HELM_H4, BossTab.CLUE_SCROLL_MEDIUM, 8),
	ADAMANT_HELM_H5(ItemID.ADAMANT_HELM_H5, BossTab.CLUE_SCROLL_MEDIUM, 8),
	ADAMANT_SHIELD_H1(ItemID.ADAMANT_SHIELD_H1, BossTab.CLUE_SCROLL_MEDIUM, 9),
	ADAMANT_SHIELD_H2(ItemID.ADAMANT_SHIELD_H2, BossTab.CLUE_SCROLL_MEDIUM, 9),
	ADAMANT_SHIELD_H3(ItemID.ADAMANT_SHIELD_H3, BossTab.CLUE_SCROLL_MEDIUM, 9),
	ADAMANT_SHIELD_H4(ItemID.ADAMANT_SHIELD_H4, BossTab.CLUE_SCROLL_MEDIUM, 9),
	ADAMANT_SHIELD_H5(ItemID.ADAMANT_SHIELD_H5, BossTab.CLUE_SCROLL_MEDIUM, 9),
	GREEN_DHIDE_BODY_T(ItemID.GREEN_DHIDE_BODY_T, BossTab.CLUE_SCROLL_MEDIUM, 10),
	GREEN_DHIDE_CHAPS_T(ItemID.GREEN_DHIDE_CHAPS_T, BossTab.CLUE_SCROLL_MEDIUM, 10),
	GREEN_DHIDE_BODY_G(ItemID.GREEN_DHIDE_BODY_G, BossTab.CLUE_SCROLL_MEDIUM, 10),
	GREEN_DHIDE_CHAPS_G(ItemID.GREEN_DHIDE_CHAPS_G, BossTab.CLUE_SCROLL_MEDIUM, 10),
	BLACK_ELEGANT_SHIRT(ItemID.BLACK_ELEGANT_SHIRT, BossTab.CLUE_SCROLL_MEDIUM, 11),
	BLACK_ELEGANT_LEGS(ItemID.BLACK_ELEGANT_LEGS, BossTab.CLUE_SCROLL_MEDIUM, 11),
	WHITE_ELEGANT_BLOUSE(ItemID.WHITE_ELEGANT_BLOUSE, BossTab.CLUE_SCROLL_MEDIUM, 11),
	WHITE_ELEGANT_SKIRT(ItemID.WHITE_ELEGANT_SKIRT, BossTab.CLUE_SCROLL_MEDIUM, 11),
	PURPLE_ELEGANT_SHIRT(ItemID.PURPLE_ELEGANT_SHIRT, BossTab.CLUE_SCROLL_MEDIUM, 12),
	PURPLE_ELEGANT_LEGS(ItemID.PURPLE_ELEGANT_LEGS, BossTab.CLUE_SCROLL_MEDIUM, 12),
	PURPLE_ELEGANT_BLOUSE(ItemID.PURPLE_ELEGANT_BLOUSE, BossTab.CLUE_SCROLL_MEDIUM, 12),
	PURPLE_ELEGANT_SKIRT(ItemID.PURPLE_ELEGANT_SKIRT, BossTab.CLUE_SCROLL_MEDIUM, 12),
	PINK_ELEGANT_SHIRT(ItemID.PINK_ELEGANT_SHIRT, BossTab.CLUE_SCROLL_MEDIUM, 13),
	PINK_ELEGANT_LEGS(ItemID.PINK_ELEGANT_LEGS, BossTab.CLUE_SCROLL_MEDIUM, 13),
	PINK_ELEGANT_BLOUSE(ItemID.PINK_ELEGANT_BLOUSE, BossTab.CLUE_SCROLL_MEDIUM, 13),
	PINK_ELEGANT_SKIRT(ItemID.PINK_ELEGANT_SKIRT, BossTab.CLUE_SCROLL_MEDIUM, 13),
	GOLD_ELEGANT_SHIRT(ItemID.GOLD_ELEGANT_SHIRT, BossTab.CLUE_SCROLL_MEDIUM, 14),
	GOLD_ELEGANT_LEGS(ItemID.GOLD_ELEGANT_LEGS, BossTab.CLUE_SCROLL_MEDIUM, 14),
	GOLD_ELEGANT_BLOUSE(ItemID.GOLD_ELEGANT_BLOUSE, BossTab.CLUE_SCROLL_MEDIUM, 14),
	GOLD_ELEGANT_SKIRT(ItemID.GOLD_ELEGANT_SKIRT, BossTab.CLUE_SCROLL_MEDIUM, 14),
	GUTHIX_MITRE(ItemID.GUTHIX_MITRE, BossTab.CLUE_SCROLL_MEDIUM, 15),
	GUTHIX_CLOAK(ItemID.GUTHIX_CLOAK, BossTab.CLUE_SCROLL_MEDIUM, 15),
	SARADOMIN_MITRE(ItemID.SARADOMIN_MITRE, BossTab.CLUE_SCROLL_MEDIUM, 15),
	SARADOMIN_CLOAK(ItemID.SARADOMIN_CLOAK, BossTab.CLUE_SCROLL_MEDIUM, 15),
	ZAMORAK_MITRE(ItemID.ZAMORAK_MITRE, BossTab.CLUE_SCROLL_MEDIUM, 15),
	ZAMORAK_CLOAK(ItemID.ZAMORAK_CLOAK, BossTab.CLUE_SCROLL_MEDIUM, 15),
	ANCIENT_MITRE(ItemID.ANCIENT_MITRE, BossTab.CLUE_SCROLL_MEDIUM, 16),
	ANCIENT_CLOAK(ItemID.ANCIENT_CLOAK, BossTab.CLUE_SCROLL_MEDIUM, 16),
	BANDOS_MITRE(ItemID.BANDOS_MITRE, BossTab.CLUE_SCROLL_MEDIUM, 16),
	BANDOS_CLOAK(ItemID.BANDOS_CLOAK, BossTab.CLUE_SCROLL_MEDIUM, 16),
	ARMADYL_MITRE(ItemID.ARMADYL_MITRE, BossTab.CLUE_SCROLL_MEDIUM, 16),
	ARMADYL_CLOAK(ItemID.ARMADYL_CLOAK, BossTab.CLUE_SCROLL_MEDIUM, 16),
	ARMADYL_STOLE(ItemID.ARMADYL_STOLE, BossTab.CLUE_SCROLL_MEDIUM, 17),
	ARMADYL_CROZIER(ItemID.ARMADYL_CROZIER, BossTab.CLUE_SCROLL_MEDIUM, 17),
	ANCIENT_STOLE(ItemID.ANCIENT_STOLE, BossTab.CLUE_SCROLL_MEDIUM, 17),
	ANCIENT_CROZIER(ItemID.ANCIENT_CROZIER, BossTab.CLUE_SCROLL_MEDIUM, 17),
	BANDOS_STOLE(ItemID.BANDOS_STOLE, BossTab.CLUE_SCROLL_MEDIUM, 17),
	BANDOS_CROZIER(ItemID.BANDOS_CROZIER, BossTab.CLUE_SCROLL_MEDIUM, 17),
	CAT_MASK(ItemID.CAT_MASK, BossTab.CLUE_SCROLL_MEDIUM, 18),
	PENGUIN_MASK(ItemID.PENGUIN_MASK, BossTab.CLUE_SCROLL_MEDIUM, 18),
	BLACK_UNICORN_MASK(ItemID.BLACK_UNICORN_MASK, BossTab.CLUE_SCROLL_MEDIUM, 18),
	WHITE_UNICORN_MASK(ItemID.WHITE_UNICORN_MASK, BossTab.CLUE_SCROLL_MEDIUM, 18),
	LEPRECHAUN_HAT(ItemID.LEPRECHAUN_HAT, BossTab.CLUE_SCROLL_MEDIUM, 18),
	BLACK_LEPRECHAUN_HAT(ItemID.BLACK_LEPRECHAUN_HAT, BossTab.CLUE_SCROLL_MEDIUM, 18),
	ARCEUUS_BANNER(ItemID.ARCEUUS_BANNER, BossTab.CLUE_SCROLL_MEDIUM, 19),
	HOSIDIUS_BANNER(ItemID.HOSIDIUS_BANNER, BossTab.CLUE_SCROLL_MEDIUM, 19),
	LOVAKENGJ_BANNER(ItemID.LOVAKENGJ_BANNER, BossTab.CLUE_SCROLL_MEDIUM, 19),
	PISCARILIUS_BANNER(ItemID.PISCARILIUS_BANNER, BossTab.CLUE_SCROLL_MEDIUM, 19),
	SHAYZIEN_BANNER(ItemID.SHAYZIEN_BANNER, BossTab.CLUE_SCROLL_MEDIUM, 19),
	CRIER_HAT(ItemID.CRIER_HAT, BossTab.CLUE_SCROLL_MEDIUM, 20),
	CRIER_BELL(ItemID.CRIER_BELL, BossTab.CLUE_SCROLL_MEDIUM, 20),
	CRIER_COAT(ItemID.CRIER_COAT, BossTab.CLUE_SCROLL_MEDIUM, 20),
	WOLF_MASK(ItemID.WOLF_MASK, BossTab.CLUE_SCROLL_MEDIUM, 20),
	WOLF_CLOAK(ItemID.WOLF_CLOAK, BossTab.CLUE_SCROLL_MEDIUM, 20),
	SPIKED_MANACLES(ItemID.SPIKED_MANACLES, BossTab.CLUE_SCROLL_MEDIUM, 21),
	STRENGTH_AMULET_T(ItemID.STRENGTH_AMULET_T, BossTab.CLUE_SCROLL_MEDIUM, 21),
	ADAMANT_CANE(ItemID.ADAMANT_CANE, BossTab.CLUE_SCROLL_MEDIUM, 21),
	GNOMISH_FIRELIGHTER(ItemID.GNOMISH_FIRELIGHTER, BossTab.CLUE_SCROLL_MEDIUM, 21),
	CABBAGE_ROUND_SHIELD(ItemID.CABBAGE_ROUND_SHIELD, BossTab.CLUE_SCROLL_MEDIUM, 21),
	CLUELESS_SCROLL(ItemID.CLUELESS_SCROLL, BossTab.CLUE_SCROLL_MEDIUM, 21),
	ADAMANT_PLATEBODY_H1(ItemID.ADAMANT_PLATEBODY_H1, BossTab.CLUE_SCROLL_MEDIUM, 22),
	ADAMANT_PLATEBODY_H2(ItemID.ADAMANT_PLATEBODY_H2, BossTab.CLUE_SCROLL_MEDIUM, 22),
	ADAMANT_PLATEBODY_H3(ItemID.ADAMANT_PLATEBODY_H3, BossTab.CLUE_SCROLL_MEDIUM, 22),
	ADAMANT_PLATEBODY_H4(ItemID.ADAMANT_PLATEBODY_H4, BossTab.CLUE_SCROLL_MEDIUM, 22),
	ADAMANT_PLATEBODY_H5(ItemID.ADAMANT_PLATEBODY_H5, BossTab.CLUE_SCROLL_MEDIUM, 22),

	// Hard Clue Scrolls
	RUNE_FULL_HELM_T(ItemID.RUNE_FULL_HELM_T, BossTab.CLUE_SCROLL_HARD, -1),
	RUNE_PLATEBODY_T(ItemID.RUNE_PLATEBODY_T, BossTab.CLUE_SCROLL_HARD, -1),
	RUNE_PLATELEGS_T(ItemID.RUNE_PLATELEGS_T, BossTab.CLUE_SCROLL_HARD, -1),
	RUNE_PLATESKIRT_T(ItemID.RUNE_PLATESKIRT_T, BossTab.CLUE_SCROLL_HARD, -1),
	RUNE_KITESHIELD_T(ItemID.RUNE_KITESHIELD_T, BossTab.CLUE_SCROLL_HARD, -1),
	RUNE_FULL_HELM_G(ItemID.RUNE_FULL_HELM_G, BossTab.CLUE_SCROLL_HARD, 0),
	RUNE_PLATEBODY_G(ItemID.RUNE_PLATEBODY_G, BossTab.CLUE_SCROLL_HARD, 0),
	RUNE_PLATELEGS_G(ItemID.RUNE_PLATELEGS_G, BossTab.CLUE_SCROLL_HARD, 0),
	RUNE_PLATESKIRT_G(ItemID.RUNE_PLATESKIRT_G, BossTab.CLUE_SCROLL_HARD, 0),
	RUNE_KITESHIELD_G(ItemID.RUNE_KITESHIELD_G, BossTab.CLUE_SCROLL_HARD, 0),
	GUTHIX_FULL_HELM(ItemID.GUTHIX_FULL_HELM, BossTab.CLUE_SCROLL_HARD, 1),
	GUTHIX_PLATEBODY(ItemID.GUTHIX_PLATEBODY, BossTab.CLUE_SCROLL_HARD, 1),
	GUTHIX_PLATELEGS(ItemID.GUTHIX_PLATELEGS, BossTab.CLUE_SCROLL_HARD, 1),
	GUTHIX_PLATESKIRT(ItemID.GUTHIX_PLATESKIRT, BossTab.CLUE_SCROLL_HARD, 1),
	GUTHIX_KITESHIELD(ItemID.GUTHIX_KITESHIELD, BossTab.CLUE_SCROLL_HARD, 1),
	SARADOMIN_FULL_HELM(ItemID.SARADOMIN_FULL_HELM, BossTab.CLUE_SCROLL_HARD, 2),
	SARADOMIN_PLATEBODY(ItemID.SARADOMIN_PLATEBODY, BossTab.CLUE_SCROLL_HARD, 2),
	SARADOMIN_PLATELEGS(ItemID.SARADOMIN_PLATELEGS, BossTab.CLUE_SCROLL_HARD, 2),
	SARADOMIN_PLATESKIRT(ItemID.SARADOMIN_PLATESKIRT, BossTab.CLUE_SCROLL_HARD, 2),
	SARADOMIN_KITESHIELD(ItemID.SARADOMIN_KITESHIELD, BossTab.CLUE_SCROLL_HARD, 2),
	ZAMORAK_FULL_HELM(ItemID.ZAMORAK_FULL_HELM, BossTab.CLUE_SCROLL_HARD, 3),
	ZAMORAK_PLATEBODY(ItemID.ZAMORAK_PLATEBODY, BossTab.CLUE_SCROLL_HARD, 3),
	ZAMORAK_PLATELEGS(ItemID.ZAMORAK_PLATELEGS, BossTab.CLUE_SCROLL_HARD, 3),
	ZAMORAK_PLATESKIRT(ItemID.ZAMORAK_PLATESKIRT, BossTab.CLUE_SCROLL_HARD, 3),
	ZAMORAK_KITESHIELD(ItemID.ZAMORAK_KITESHIELD, BossTab.CLUE_SCROLL_HARD, 3),
	ANCIENT_FULL_HELM(ItemID.ANCIENT_FULL_HELM, BossTab.CLUE_SCROLL_HARD, 4),
	ANCIENT_PLATEBODY(ItemID.ANCIENT_PLATEBODY, BossTab.CLUE_SCROLL_HARD, 4),
	ANCIENT_PLATELEGS(ItemID.ANCIENT_PLATELEGS, BossTab.CLUE_SCROLL_HARD, 4),
	ANCIENT_PLATESKIRT(ItemID.ANCIENT_PLATESKIRT, BossTab.CLUE_SCROLL_HARD, 4),
	ANCIENT_KITESHIELD(ItemID.ANCIENT_KITESHIELD, BossTab.CLUE_SCROLL_HARD, 4),
	BANDOS_FULL_HELM(ItemID.BANDOS_FULL_HELM, BossTab.CLUE_SCROLL_HARD, 5),
	BANDOS_PLATEBODY(ItemID.BANDOS_PLATEBODY, BossTab.CLUE_SCROLL_HARD, 5),
	BANDOS_PLATELEGS(ItemID.BANDOS_PLATELEGS, BossTab.CLUE_SCROLL_HARD, 5),
	BANDOS_PLATESKIRT(ItemID.BANDOS_PLATESKIRT, BossTab.CLUE_SCROLL_HARD, 5),
	BANDOS_KITESHIELD(ItemID.BANDOS_KITESHIELD, BossTab.CLUE_SCROLL_HARD, 5),
	ARMADYL_FULL_HELM(ItemID.ARMADYL_FULL_HELM, BossTab.CLUE_SCROLL_HARD, 6),
	ARMADYL_PLATEBODY(ItemID.ARMADYL_PLATEBODY, BossTab.CLUE_SCROLL_HARD, 6),
	ARMADYL_PLATELEGS(ItemID.ARMADYL_PLATELEGS, BossTab.CLUE_SCROLL_HARD, 6),
	ARMADYL_PLATESKIRT(ItemID.ARMADYL_PLATESKIRT, BossTab.CLUE_SCROLL_HARD, 6),
	ARMADYL_KITESHIELD(ItemID.ARMADYL_KITESHIELD, BossTab.CLUE_SCROLL_HARD, 6),
	GILDED_FULL_HELM(ItemID.GILDED_FULL_HELM, BossTab.CLUE_SCROLL_HARD, 7),
	GILDED_PLATEBODY(ItemID.GILDED_PLATEBODY, BossTab.CLUE_SCROLL_HARD, 7),
	GILDED_PLATELEGS(ItemID.GILDED_PLATELEGS, BossTab.CLUE_SCROLL_HARD, 7),
	GILDED_PLATESKIRT(ItemID.GILDED_PLATESKIRT, BossTab.CLUE_SCROLL_HARD, 7),
	GILDED_KITESHIELD(ItemID.GILDED_KITESHIELD, BossTab.CLUE_SCROLL_HARD, 7),
	GILDED_MED_HELM(ItemID.GILDED_MED_HELM, BossTab.CLUE_SCROLL_HARD, 8),
	GILDED_CHAINBODY(ItemID.GILDED_CHAINBODY, BossTab.CLUE_SCROLL_HARD, 8),
	GILDED_SQ_SHIELD(ItemID.GILDED_SQ_SHIELD, BossTab.CLUE_SCROLL_HARD, 8),
	GILDED_2H_SWORD(ItemID.GILDED_2H_SWORD, BossTab.CLUE_SCROLL_HARD, 8),
	GILDED_SPEAR(ItemID.GILDED_SPEAR, BossTab.CLUE_SCROLL_HARD, 8),
	GILDED_HASTA(ItemID.GILDED_HASTA, BossTab.CLUE_SCROLL_HARD, 8),
	RUNE_HELM_H1(ItemID.RUNE_HELM_H1, BossTab.CLUE_SCROLL_HARD, 9),
	RUNE_HELM_H2(ItemID.RUNE_HELM_H2, BossTab.CLUE_SCROLL_HARD, 9),
	RUNE_HELM_H3(ItemID.RUNE_HELM_H3, BossTab.CLUE_SCROLL_HARD, 9),
	RUNE_HELM_H4(ItemID.RUNE_HELM_H4, BossTab.CLUE_SCROLL_HARD, 9),
	RUNE_HELM_H5(ItemID.RUNE_HELM_H5, BossTab.CLUE_SCROLL_HARD, 9),
	RUNE_SHIELD_H1(ItemID.RUNE_SHIELD_H1, BossTab.CLUE_SCROLL_HARD, 10),
	RUNE_SHIELD_H2(ItemID.RUNE_SHIELD_H2, BossTab.CLUE_SCROLL_HARD, 10),
	RUNE_SHIELD_H3(ItemID.RUNE_SHIELD_H3, BossTab.CLUE_SCROLL_HARD, 10),
	RUNE_SHIELD_H4(ItemID.RUNE_SHIELD_H4, BossTab.CLUE_SCROLL_HARD, 10),
	RUNE_SHIELD_H5(ItemID.RUNE_SHIELD_H5, BossTab.CLUE_SCROLL_HARD, 10),
	BLUE_DHIDE_BODY_T(ItemID.BLUE_DHIDE_BODY_T, BossTab.CLUE_SCROLL_HARD, 11),
	BLUE_DHIDE_CHAPS_T(ItemID.BLUE_DHIDE_CHAPS_T, BossTab.CLUE_SCROLL_HARD, 11),
	BLUE_DHIDE_BODY_G(ItemID.BLUE_DHIDE_BODY_G, BossTab.CLUE_SCROLL_HARD, 11),
	BLUE_DHIDE_CHAPS_G(ItemID.BLUE_DHIDE_CHAPS_G, BossTab.CLUE_SCROLL_HARD, 11),
	RED_DHIDE_BODY_T(ItemID.RED_DHIDE_BODY_T, BossTab.CLUE_SCROLL_HARD, 12),
	RED_DHIDE_CHAPS_T(ItemID.RED_DHIDE_CHAPS_T, BossTab.CLUE_SCROLL_HARD, 12),
	RED_DHIDE_BODY_G(ItemID.RED_DHIDE_BODY_G, BossTab.CLUE_SCROLL_HARD, 12),
	RED_DHIDE_CHAPS_G(ItemID.RED_DHIDE_CHAPS_G, BossTab.CLUE_SCROLL_HARD, 12),
	ENCHANTED_HAT(ItemID.ENCHANTED_HAT, BossTab.CLUE_SCROLL_HARD, 13),
	ENCHANTED_TOP(ItemID.ENCHANTED_TOP, BossTab.CLUE_SCROLL_HARD, 13),
	ENCHANTED_ROBE(ItemID.ENCHANTED_ROBE, BossTab.CLUE_SCROLL_HARD, 13),
	AMULET_OF_GLORY_T4(ItemID.AMULET_OF_GLORY_T4, BossTab.CLUE_SCROLL_HARD, 13),
	ROBIN_HOOD_HAT(ItemID.ROBIN_HOOD_HAT, BossTab.CLUE_SCROLL_HARD, 14),
	PIRATES_HAT(ItemID.PIRATES_HAT, BossTab.CLUE_SCROLL_HARD, 14),
	PITH_HELMET(ItemID.PITH_HELMET, BossTab.CLUE_SCROLL_HARD, 14),
	EXPLORER_BACKPACK(ItemID.EXPLORER_BACKPACK, BossTab.CLUE_SCROLL_HARD, 14),
	RED_CAVALIER(ItemID.RED_CAVALIER, BossTab.CLUE_SCROLL_HARD, 15),
	TAN_CAVALIER(ItemID.TAN_CAVALIER, BossTab.CLUE_SCROLL_HARD, 15),
	DARK_CAVALIER(ItemID.DARK_CAVALIER, BossTab.CLUE_SCROLL_HARD, 15),
	BLACK_CAVALIER(ItemID.BLACK_CAVALIER, BossTab.CLUE_SCROLL_HARD, 15),
	NAVY_CAVALIER(ItemID.NAVY_CAVALIER, BossTab.CLUE_SCROLL_HARD, 15),
	WHITE_CAVALIER(ItemID.WHITE_CAVALIER, BossTab.CLUE_SCROLL_HARD, 15),
	_3RD_AGE_FULL_HELMET(ItemID._3RD_AGE_FULL_HELMET, BossTab.CLUE_SCROLL_HARD, 16),
	_3RD_AGE_PLATEBODY(ItemID._3RD_AGE_PLATEBODY, BossTab.CLUE_SCROLL_HARD, 16),
	_3RD_AGE_PLATELEGS(ItemID._3RD_AGE_PLATELEGS, BossTab.CLUE_SCROLL_HARD, 16),
	_3RD_AGE_PLATESKIRT(ItemID._3RD_AGE_PLATESKIRT, BossTab.CLUE_SCROLL_HARD, 16),
	_3RD_AGE_KITESHIELD(ItemID._3RD_AGE_KITESHIELD, BossTab.CLUE_SCROLL_HARD, 16),
	_3RD_AGE_RANGE_COIF(ItemID._3RD_AGE_RANGE_COIF, BossTab.CLUE_SCROLL_HARD, 17),
	_3RD_AGE_RANGE_TOP(ItemID._3RD_AGE_RANGE_TOP, BossTab.CLUE_SCROLL_HARD, 17),
	_3RD_AGE_RANGE_LEGS(ItemID._3RD_AGE_RANGE_LEGS, BossTab.CLUE_SCROLL_HARD, 17),
	_3RD_AGE_VAMBRACES(ItemID._3RD_AGE_VAMBRACES, BossTab.CLUE_SCROLL_HARD, 17),
	_3RD_AGE_MAGE_HAT(ItemID._3RD_AGE_MAGE_HAT, BossTab.CLUE_SCROLL_HARD, 18),
	_3RD_AGE_ROBE_TOP(ItemID._3RD_AGE_ROBE_TOP, BossTab.CLUE_SCROLL_HARD, 18),
	_3RD_AGE_ROBE(ItemID._3RD_AGE_ROBE, BossTab.CLUE_SCROLL_HARD, 18),
	_3RD_AGE_AMULET(ItemID._3RD_AGE_AMULET, BossTab.CLUE_SCROLL_HARD, 18),
	GUTHIX_COIF(ItemID.GUTHIX_COIF, BossTab.CLUE_SCROLL_HARD, 19),
	GUTHIX_DHIDE(ItemID.GUTHIX_DHIDE_BODY, BossTab.CLUE_SCROLL_HARD, 19),
	GUTHIX_CHAPS(ItemID.GUTHIX_CHAPS, BossTab.CLUE_SCROLL_HARD, 19),
	GUTHIX_BRACERS(ItemID.GUTHIX_BRACERS, BossTab.CLUE_SCROLL_HARD, 19),
	GUTHIX_DHIDE_BOOTS(ItemID.GUTHIX_DHIDE_BOOTS, BossTab.CLUE_SCROLL_HARD, 19),
	GUTHIX_DHIDE_SHIELD(ItemID.GUTHIX_DHIDE_SHIELD, BossTab.CLUE_SCROLL_HARD, 19),
	SARADOMIN_COIF(ItemID.SARADOMIN_COIF, BossTab.CLUE_SCROLL_HARD, 20),
	SARADOMIN_DHIDE(ItemID.SARADOMIN_DHIDE_BODY, BossTab.CLUE_SCROLL_HARD, 20),
	SARADOMIN_CHAPS(ItemID.SARADOMIN_CHAPS, BossTab.CLUE_SCROLL_HARD, 20),
	SARADOMIN_BRACERS(ItemID.SARADOMIN_BRACERS, BossTab.CLUE_SCROLL_HARD, 20),
	SARADOMIN_DHIDE_BOOTS(ItemID.SARADOMIN_DHIDE_BOOTS, BossTab.CLUE_SCROLL_HARD, 20),
	SARADOMIN_DHIDE_SHIELD(ItemID.SARADOMIN_DHIDE_SHIELD, BossTab.CLUE_SCROLL_HARD, 20),
	ZAMORAK_COIF(ItemID.ZAMORAK_COIF, BossTab.CLUE_SCROLL_HARD, 21),
	ZAMORAK_DHIDE(ItemID.ZAMORAK_DHIDE_BODY, BossTab.CLUE_SCROLL_HARD, 21),
	ZAMORAK_CHAPS(ItemID.ZAMORAK_CHAPS, BossTab.CLUE_SCROLL_HARD, 21),
	ZAMORAK_BRACERS(ItemID.ZAMORAK_BRACERS, BossTab.CLUE_SCROLL_HARD, 21),
	ZAMORAK_DHIDE_BOOTS(ItemID.ZAMORAK_DHIDE_BOOTS, BossTab.CLUE_SCROLL_HARD, 21),
	ZAMORAK_DHIDE_SHIELD(ItemID.ZAMORAK_DHIDE_SHIELD, BossTab.CLUE_SCROLL_HARD, 21),
	ANCIENT_COIF(ItemID.ANCIENT_COIF, BossTab.CLUE_SCROLL_HARD, 22),
	ANCIENT_DHIDE(ItemID.ANCIENT_DHIDE_BODY, BossTab.CLUE_SCROLL_HARD, 22),
	ANCIENT_CHAPS(ItemID.ANCIENT_CHAPS, BossTab.CLUE_SCROLL_HARD, 22),
	ANCIENT_BRACERS(ItemID.ANCIENT_BRACERS, BossTab.CLUE_SCROLL_HARD, 22),
	ANCIENT_DHIDE_BOOTS(ItemID.ANCIENT_DHIDE_BOOTS, BossTab.CLUE_SCROLL_HARD, 22),
	ANCIENT_DHIDE_SHIELD(ItemID.ANCIENT_DHIDE_SHIELD, BossTab.CLUE_SCROLL_HARD, 22),
	BANDOS_COIF(ItemID.BANDOS_COIF, BossTab.CLUE_SCROLL_HARD, 23),
	BANDOS_DHIDE(ItemID.BANDOS_DHIDE_BODY, BossTab.CLUE_SCROLL_HARD, 23),
	BANDOS_CHAPS(ItemID.BANDOS_CHAPS, BossTab.CLUE_SCROLL_HARD, 23),
	BANDOS_BRACERS(ItemID.BANDOS_BRACERS, BossTab.CLUE_SCROLL_HARD, 23),
	BANDOS_DHIDE_BOOTS(ItemID.BANDOS_DHIDE_BOOTS, BossTab.CLUE_SCROLL_HARD, 23),
	BANDOS_DHIDE_SHIELD(ItemID.BANDOS_DHIDE_SHIELD, BossTab.CLUE_SCROLL_HARD, 23),
	ARMADYL_COIF(ItemID.ARMADYL_COIF, BossTab.CLUE_SCROLL_HARD, 24),
	ARMADYL_DHIDE(ItemID.ARMADYL_DHIDE_BODY, BossTab.CLUE_SCROLL_HARD, 24),
	ARMADYL_CHAPS(ItemID.ARMADYL_CHAPS, BossTab.CLUE_SCROLL_HARD, 24),
	ARMADYL_BRACERS(ItemID.ARMADYL_BRACERS, BossTab.CLUE_SCROLL_HARD, 24),
	ARMADYL_DHIDE_BOOTS(ItemID.ARMADYL_DHIDE_BOOTS, BossTab.CLUE_SCROLL_HARD, 24),
	ARMADYL_DHIDE_SHIELD(ItemID.ARMADYL_DHIDE_SHIELD, BossTab.CLUE_SCROLL_HARD, 24),
	GUTHIX_STOLE(ItemID.GUTHIX_STOLE, BossTab.CLUE_SCROLL_HARD, 25),
	GUTHIX_CROZIER(ItemID.GUTHIX_CROZIER, BossTab.CLUE_SCROLL_HARD, 25),
	SARADOMIN_STOLE(ItemID.SARADOMIN_STOLE, BossTab.CLUE_SCROLL_HARD, 25),
	SARADOMIN_CROZIER(ItemID.SARADOMIN_CROZIER, BossTab.CLUE_SCROLL_HARD, 25),
	ZAMORAK_STOLE(ItemID.ZAMORAK_STOLE, BossTab.CLUE_SCROLL_HARD, 25),
	ZAMORAK_CROZIER(ItemID.ZAMORAK_CROZIER, BossTab.CLUE_SCROLL_HARD, 25),
	GREEN_DRAGON_MASK(ItemID.GREEN_DRAGON_MASK, BossTab.CLUE_SCROLL_HARD, 26),
	RED_DRAGON_MASK(ItemID.RED_DRAGON_MASK, BossTab.CLUE_SCROLL_HARD, 26),
	BLUE_DRAGON_MASK(ItemID.BLUE_DRAGON_MASK, BossTab.CLUE_SCROLL_HARD, 26),
	BLACK_DRAGON_MASK(ItemID.BLACK_DRAGON_MASK, BossTab.CLUE_SCROLL_HARD, 26),
	RUNE_CANE(ItemID.RUNE_CANE, BossTab.CLUE_SCROLL_HARD, 27),
	ZOMBIE_HEAD(ItemID.ZOMBIE_HEAD_19912, BossTab.CLUE_SCROLL_HARD, 27),
	CYCLOPS_HEAD(ItemID.CYCLOPS_HEAD, BossTab.CLUE_SCROLL_HARD, 27),
	NUNCHAKU(ItemID.NUNCHAKU, BossTab.CLUE_SCROLL_HARD, 27),
	DUAL_SAI(ItemID.DUAL_SAI, BossTab.CLUE_SCROLL_HARD, 27),
	THIEVING_BAG(ItemID.THIEVING_BAG, BossTab.CLUE_SCROLL_HARD, 27),
	DRAGON_BOOTS_ORNAMENT_KIT(ItemID.DRAGON_BOOTS_ORNAMENT_KIT, BossTab.CLUE_SCROLL_HARD, 28),
	RUNE_DEFENDER_ORNAMENT_KIT(ItemID.RUNE_DEFENDER_ORNAMENT_KIT, BossTab.CLUE_SCROLL_HARD, 28),
	TZHAARKETOM_ORNAMENT_KIT(ItemID.TZHAARKETOM_ORNAMENT_KIT, BossTab.CLUE_SCROLL_HARD, 28),
	BERSERKER_NECKLACE_ORNAMENT_KIT(ItemID.BERSERKER_NECKLACE_ORNAMENT_KIT, BossTab.CLUE_SCROLL_HARD, 28),
	RUNE_PLATEBODY_H1(ItemID.RUNE_PLATEBODY_H1, BossTab.CLUE_SCROLL_HARD, 29),
	RUNE_PLATEBODY_H2(ItemID.RUNE_PLATEBODY_H2, BossTab.CLUE_SCROLL_HARD, 29),
	RUNE_PLATEBODY_H3(ItemID.RUNE_PLATEBODY_H3, BossTab.CLUE_SCROLL_HARD, 29),
	RUNE_PLATEBODY_H4(ItemID.RUNE_PLATEBODY_H4, BossTab.CLUE_SCROLL_HARD, 29),
	RUNE_PLATEBODY_H5(ItemID.RUNE_PLATEBODY_H5, BossTab.CLUE_SCROLL_HARD, 29),

	// Elite Clue Scrolls
	DRAGON_FULL_HELM_ORNAMENT_KIT(ItemID.DRAGON_FULL_HELM_ORNAMENT_KIT, BossTab.CLUE_SCROLL_ELITE, -1),
	DRAGON_CHAINBODY_ORNAMENT_KIT(ItemID.DRAGON_CHAINBODY_ORNAMENT_KIT, BossTab.CLUE_SCROLL_ELITE, -1),
	DRAGON_LEGSSKIRT_ORNAMENT_KIT(ItemID.DRAGON_LEGSSKIRT_ORNAMENT_KIT, BossTab.CLUE_SCROLL_ELITE, -1),
	DRAGON_SQ_SHIELD_ORNAMENT_KIT(ItemID.DRAGON_SQ_SHIELD_ORNAMENT_KIT, BossTab.CLUE_SCROLL_ELITE, -1),
	DRAGON_SCIMITAR_ORNAMENT_KIT(ItemID.DRAGON_SCIMITAR_ORNAMENT_KIT, BossTab.CLUE_SCROLL_ELITE, -1),
	LIGHT_INFINITY_COLOUR_KIT(ItemID.LIGHT_INFINITY_COLOUR_KIT, BossTab.CLUE_SCROLL_ELITE, 0),
	DARK_INFINITY_COLOUR_KIT(ItemID.DARK_INFINITY_COLOUR_KIT, BossTab.CLUE_SCROLL_ELITE, 0),
	FURY_ORNAMENT_KIT(ItemID.FURY_ORNAMENT_KIT, BossTab.CLUE_SCROLL_ELITE, 0),
	MUSKETEER_HAT(ItemID.MUSKETEER_HAT, BossTab.CLUE_SCROLL_ELITE, 1),
	MUSKETEER_TABARD(ItemID.MUSKETEER_TABARD, BossTab.CLUE_SCROLL_ELITE, 1),
	MUSKETEER_PANTS(ItemID.MUSKETEER_PANTS, BossTab.CLUE_SCROLL_ELITE, 1),
	DRAGON_CANE(ItemID.DRAGON_CANE, BossTab.CLUE_SCROLL_ELITE, 1),
	TOP_HAT(ItemID.TOP_HAT, BossTab.CLUE_SCROLL_ELITE, 2),
	MONOCLE(ItemID.MONOCLE, BossTab.CLUE_SCROLL_ELITE, 2),
	BRIEFCASE(ItemID.BRIEFCASE, BossTab.CLUE_SCROLL_ELITE, 2),
	SAGACIOUS_SPECTACLES(ItemID.SAGACIOUS_SPECTACLES, BossTab.CLUE_SCROLL_ELITE, 2),
	GIANT_BOOT(ItemID.GIANT_BOOT, BossTab.CLUE_SCROLL_ELITE, 2),
	BIG_PIRATE_HAT(ItemID.BIG_PIRATE_HAT, BossTab.CLUE_SCROLL_ELITE, 3),
	DEERSTALKER(ItemID.DEERSTALKER, BossTab.CLUE_SCROLL_ELITE, 3),
	BLACKSMITHS_HELM(ItemID.BLACKSMITHS_HELM, BossTab.CLUE_SCROLL_ELITE, 3),
	BUCKET_HELM(ItemID.BUCKET_HELM, BossTab.CLUE_SCROLL_ELITE, 3),
	AFRO(ItemID.AFRO, BossTab.CLUE_SCROLL_ELITE, 3),
	GILDED_COIF(ItemID.GILDED_COIF, BossTab.CLUE_SCROLL_ELITE, 4),
	GILDED_DHIDE_BODY(ItemID.GILDED_DHIDE_BODY, BossTab.CLUE_SCROLL_ELITE, 4),
	GILDED_DHIDE_CHAPS(ItemID.GILDED_DHIDE_CHAPS, BossTab.CLUE_SCROLL_ELITE, 4),
	GILDED_DHIDE_VAMBS(ItemID.GILDED_DHIDE_VAMBRACES, BossTab.CLUE_SCROLL_ELITE, 4),
	GILDED_BOOTS(ItemID.GILDED_BOOTS, BossTab.CLUE_SCROLL_ELITE, 5),
	GILDED_SCIMITAR(ItemID.GILDED_SCIMITAR, BossTab.CLUE_SCROLL_ELITE, 5),
	GILDED_PICKAXE(ItemID.GILDED_PICKAXE, BossTab.CLUE_SCROLL_ELITE, 5),
	GILDED_SPADE(ItemID.GILDED_SPADE, BossTab.CLUE_SCROLL_ELITE, 5),
	GILDED_AXE(ItemID.GILDED_AXE, BossTab.CLUE_SCROLL_ELITE, 5),
	BRONZE_DRAGON_MASK(ItemID.BRONZE_DRAGON_MASK, BossTab.CLUE_SCROLL_ELITE, 6),
	IRON_DRAGON_MASK(ItemID.IRON_DRAGON_MASK, BossTab.CLUE_SCROLL_ELITE, 6),
	STEEL_DRAGON_MASK(ItemID.STEEL_DRAGON_MASK, BossTab.CLUE_SCROLL_ELITE, 6),
	MITHRIL_DRAGON_MASK(ItemID.MITHRIL_DRAGON_MASK, BossTab.CLUE_SCROLL_ELITE, 6),
	ADAMANT_DRAGON_MASK(ItemID.ADAMANT_DRAGON_MASK, BossTab.CLUE_SCROLL_ELITE, 6),
	RUNE_DRAGON_MASK(ItemID.RUNE_DRAGON_MASK, BossTab.CLUE_SCROLL_ELITE, 6),
	LAVA_DRAGON_MASK(ItemID.LAVA_DRAGON_MASK, BossTab.CLUE_SCROLL_ELITE, 6),
	BLACK_DHIDE_BODY_T(ItemID.BLACK_DHIDE_BODY_T, BossTab.CLUE_SCROLL_ELITE, 7),
	BLACK_DHIDE_CHAPS_T(ItemID.BLACK_DHIDE_CHAPS_T, BossTab.CLUE_SCROLL_ELITE, 7),
	BLACK_DHIDE_BODY_G(ItemID.BLACK_DHIDE_BODY_G, BossTab.CLUE_SCROLL_ELITE, 7),
	BLACK_DHIDE_CHAPS_G(ItemID.BLACK_DHIDE_CHAPS_G, BossTab.CLUE_SCROLL_ELITE, 7),
	_3RD_AGE_CLOAK(ItemID._3RD_AGE_CLOAK, BossTab.CLUE_SCROLL_ELITE, 8),
	_3RD_AGE_WAND(ItemID._3RD_AGE_WAND, BossTab.CLUE_SCROLL_ELITE, 8),
	_3RD_AGE_BOW(ItemID._3RD_AGE_BOW, BossTab.CLUE_SCROLL_ELITE, 8),
	_3RD_AGE_LONGSWORD(ItemID._3RD_AGE_LONGSWORD, BossTab.CLUE_SCROLL_ELITE, 8),
	ROYAL_CROWN(ItemID.ROYAL_CROWN, BossTab.CLUE_SCROLL_ELITE, 9),
	ROYAL_GOWN_TOP(ItemID.ROYAL_GOWN_TOP, BossTab.CLUE_SCROLL_ELITE, 9),
	ROYAL_GOWN_BOTTOM(ItemID.ROYAL_GOWN_BOTTOM, BossTab.CLUE_SCROLL_ELITE, 9),
	ROYAL_SCEPTRE(ItemID.ROYAL_SCEPTRE, BossTab.CLUE_SCROLL_ELITE, 9),
	ARCEUUS_SCARF(ItemID.ARCEUUS_SCARF, BossTab.CLUE_SCROLL_ELITE, 10),
	HOSIDIUS_SCARF(ItemID.HOSIDIUS_SCARF, BossTab.CLUE_SCROLL_ELITE, 10),
	LOVAKENGJ_SCARF(ItemID.LOVAKENGJ_SCARF, BossTab.CLUE_SCROLL_ELITE, 10),
	PISCARILIUS_SCARF(ItemID.PISCARILIUS_SCARF, BossTab.CLUE_SCROLL_ELITE, 10),
	SHAYZIEN_SCARF(ItemID.SHAYZIEN_SCARF, BossTab.CLUE_SCROLL_ELITE, 10),
	DARK_BOW_TIE(ItemID.DARK_BOW_TIE, BossTab.CLUE_SCROLL_ELITE, 11),
	DARK_TUXEDO_JACKET(ItemID.DARK_TUXEDO_JACKET, BossTab.CLUE_SCROLL_ELITE, 11),
	DARK_TROUSERS(ItemID.DARK_TROUSERS, BossTab.CLUE_SCROLL_ELITE, 11),
	DARK_TUXEDO_CUFFS(ItemID.DARK_TUXEDO_CUFFS, BossTab.CLUE_SCROLL_ELITE, 11),
	DARK_TUXEDO_SHOES(ItemID.DARK_TUXEDO_SHOES, BossTab.CLUE_SCROLL_ELITE, 11),
	LIGHT_BOW_TIE(ItemID.LIGHT_BOW_TIE, BossTab.CLUE_SCROLL_ELITE, 12),
	LIGHT_TUXEDO_JACKET(ItemID.LIGHT_TUXEDO_JACKET, BossTab.CLUE_SCROLL_ELITE, 12),
	LIGHT_TROUSERS(ItemID.LIGHT_TROUSERS, BossTab.CLUE_SCROLL_ELITE, 12),
	LIGHT_TUXEDO_CUFFS(ItemID.LIGHT_TUXEDO_CUFFS, BossTab.CLUE_SCROLL_ELITE, 12),
	LIGHT_TUXEDO_SHOES(ItemID.LIGHT_TUXEDO_SHOES, BossTab.CLUE_SCROLL_ELITE, 12),
	HOLY_WRAPS(ItemID.HOLY_WRAPS, BossTab.CLUE_SCROLL_ELITE, 13),
	RING_OF_NATURE(ItemID.RING_OF_NATURE, BossTab.CLUE_SCROLL_ELITE, 13),
	HEAVY_CASKET(ItemID.HEAVY_CASKET, BossTab.CLUE_SCROLL_ELITE, 13),
	KATANA(ItemID.KATANA, BossTab.CLUE_SCROLL_ELITE, 13),
	URIS_HAT(ItemID.URIS_HAT, BossTab.CLUE_SCROLL_ELITE, 13),
	FREMENNIK_KILT(ItemID.FREMENNIK_KILT, BossTab.CLUE_SCROLL_ELITE, 13),
	RANGERS_TUNIC(ItemID.RANGERS_TUNIC, BossTab.CLUE_SCROLL_ELITE, 14),
	RANGERS_TIGHTS(ItemID.RANGERS_TIGHTS, BossTab.CLUE_SCROLL_ELITE, 14),
	RANGER_GLOVES(ItemID.RANGER_GLOVES, BossTab.CLUE_SCROLL_ELITE, 14),

	// Master Clue Scrolls
	DRAGON_PLATEBODY_ORNAMENT_KIT(ItemID.DRAGON_PLATEBODY_ORNAMENT_KIT, BossTab.CLUE_SCROLL_MASTER, -1),
	DRAGON_KITESHIELD_ORNAMENT_KIT(ItemID.DRAGON_KITESHIELD_ORNAMENT_KIT, BossTab.CLUE_SCROLL_MASTER, -1),
	DRAGON_DEFENDER_ORNAMENT_KIT(ItemID.DRAGON_DEFENDER_ORNAMENT_KIT, BossTab.CLUE_SCROLL_MASTER, -1),
	ANGUISH_ORNAMENT_KIT(ItemID.ANGUISH_ORNAMENT_KIT, BossTab.CLUE_SCROLL_MASTER, -1),
	TORTURE_ORNAMENT_KIT(ItemID.TORTURE_ORNAMENT_KIT, BossTab.CLUE_SCROLL_MASTER, -1),
	TORMENTED_ORNAMENT_KIT(ItemID.TORMENTED_ORNAMENT_KIT, BossTab.CLUE_SCROLL_MASTER, -1),
	OCCULT_ORNAMENT_KIT(ItemID.OCCULT_ORNAMENT_KIT, BossTab.CLUE_SCROLL_MASTER, 0),
	ARMADYL_GODSWORD_ORNAMENT_KIT(ItemID.ARMADYL_GODSWORD_ORNAMENT_KIT, BossTab.CLUE_SCROLL_MASTER, 0),
	BANDOS_GODSWORD_ORNAMENT_KIT(ItemID.BANDOS_GODSWORD_ORNAMENT_KIT, BossTab.CLUE_SCROLL_MASTER, 0),
	SARADOMIN_GODSWORD_ORNAMENT_KIT(ItemID.SARADOMIN_GODSWORD_ORNAMENT_KIT, BossTab.CLUE_SCROLL_MASTER, 0),
	ZAMORAK_GODSWORD_ORNAMENT_KIT(ItemID.ZAMORAK_GODSWORD_ORNAMENT_KIT, BossTab.CLUE_SCROLL_MASTER, 0),
	_3RD_AGE_DRUIDIC(ItemID._3RD_AGE_DRUIDIC_ROBE_TOP, BossTab.CLUE_SCROLL_MASTER, 1),
	_3RD_AGE_DRUIDIC_ROBE_BOTTOMS(ItemID._3RD_AGE_DRUIDIC_ROBE_BOTTOMS, BossTab.CLUE_SCROLL_MASTER, 1),
	_3RD_AGE_DRUIDIC_CLOAK(ItemID._3RD_AGE_DRUIDIC_CLOAK, BossTab.CLUE_SCROLL_MASTER, 1),
	_3RD_AGE_DRUIDIC_STAFF(ItemID._3RD_AGE_DRUIDIC_STAFF, BossTab.CLUE_SCROLL_MASTER, 1),
	_3RD_AGE_AXE(ItemID._3RD_AGE_AXE, BossTab.CLUE_SCROLL_MASTER, 1),
	_3RD_AGE_PICKAXE(ItemID._3RD_AGE_PICKAXE, BossTab.CLUE_SCROLL_MASTER, 1),
	LESSER_DEMON_MASK(ItemID.LESSER_DEMON_MASK, BossTab.CLUE_SCROLL_MASTER, 2),
	GREATER_DEMON_MASK(ItemID.GREATER_DEMON_MASK, BossTab.CLUE_SCROLL_MASTER, 2),
	BLACK_DEMON_MASK(ItemID.BLACK_DEMON_MASK, BossTab.CLUE_SCROLL_MASTER, 2),
	JUNGLE_DEMON_MASK(ItemID.JUNGLE_DEMON_MASK, BossTab.CLUE_SCROLL_MASTER, 2),
	OLD_DEMON_MASK(ItemID.OLD_DEMON_MASK, BossTab.CLUE_SCROLL_MASTER, 2),
	ARCEUUS_HOOD(ItemID.ARCEUUS_HOOD, BossTab.CLUE_SCROLL_MASTER, 3),
	HOSIDIUS_HOOD(ItemID.HOSIDIUS_HOOD, BossTab.CLUE_SCROLL_MASTER, 3),
	LOVAKENGJ_HOOD(ItemID.LOVAKENGJ_HOOD, BossTab.CLUE_SCROLL_MASTER, 3),
	PISCARILIUS_HOOD(ItemID.PISCARILIUS_HOOD, BossTab.CLUE_SCROLL_MASTER, 3),
	SHAYZIEN_HOUSE_HOOD(ItemID.SHAYZIEN_HOOD, BossTab.CLUE_SCROLL_MASTER, 3),
	SAMURAI_KASA(ItemID.SAMURAI_KASA, BossTab.CLUE_SCROLL_MASTER, 4),
	SAMURAI_SHIRT(ItemID.SAMURAI_SHIRT, BossTab.CLUE_SCROLL_MASTER, 4),
	SAMURAI_GREAVES(ItemID.SAMURAI_GREAVES, BossTab.CLUE_SCROLL_MASTER, 4),
	SAMURAI_GLOVES(ItemID.SAMURAI_GLOVES, BossTab.CLUE_SCROLL_MASTER, 4),
	SAMURAI_BOOTS(ItemID.SAMURAI_BOOTS, BossTab.CLUE_SCROLL_MASTER, 4),
	MUMMYS_HEAD(ItemID.MUMMYS_HEAD, BossTab.CLUE_SCROLL_MASTER, 5),
	MUMMYS_BODY(ItemID.MUMMYS_BODY, BossTab.CLUE_SCROLL_MASTER, 5),
	MUMMYS_LEGS(ItemID.MUMMYS_LEGS, BossTab.CLUE_SCROLL_MASTER, 5),
	MUMMYS_HANDS(ItemID.MUMMYS_HANDS, BossTab.CLUE_SCROLL_MASTER, 5),
	MUMMYS_FEET(ItemID.MUMMYS_FEET, BossTab.CLUE_SCROLL_MASTER, 5),
	ANKOU_MASK(ItemID.ANKOU_MASK, BossTab.CLUE_SCROLL_MASTER, 6),
	ANKOU_TOP(ItemID.ANKOU_TOP, BossTab.CLUE_SCROLL_MASTER, 6),
	ANKOUS_LEGGINGS(ItemID.ANKOUS_LEGGINGS, BossTab.CLUE_SCROLL_MASTER, 6),
	ANKOU_GLOVES(ItemID.ANKOU_GLOVES, BossTab.CLUE_SCROLL_MASTER, 6),
	ANKOU_SOCKS(ItemID.ANKOU_SOCKS, BossTab.CLUE_SCROLL_MASTER, 6),
	HOOD_OF_DARKNESS(ItemID.HOOD_OF_DARKNESS, BossTab.CLUE_SCROLL_MASTER, 7),
	ROBE_TOP_OF_DARKNESS(ItemID.ROBE_TOP_OF_DARKNESS, BossTab.CLUE_SCROLL_MASTER, 7),
	ROBE_BOTTOM_OF_DARKNESS(ItemID.ROBE_BOTTOM_OF_DARKNESS, BossTab.CLUE_SCROLL_MASTER, 7),
	BOOTS_OF_DARKNESS(ItemID.BOOTS_OF_DARKNESS, BossTab.CLUE_SCROLL_MASTER, 7),
	GLOVES_OF_DARKNESS(ItemID.GLOVES_OF_DARKNESS, BossTab.CLUE_SCROLL_MASTER, 7),
	RING_OF_COINS(ItemID.RING_OF_COINS, BossTab.CLUE_SCROLL_MASTER, 8),
	LEFT_EYE_PATCH(ItemID.LEFT_EYE_PATCH, BossTab.CLUE_SCROLL_MASTER, 8),
	OBSIDIAN_CAPE_R(ItemID.OBSIDIAN_CAPE_R, BossTab.CLUE_SCROLL_MASTER, 8),
	FANCY_TIARA(ItemID.FANCY_TIARA, BossTab.CLUE_SCROLL_MASTER, 8),
	HALF_MOON_SPECTACLES(ItemID.HALF_MOON_SPECTACLES, BossTab.CLUE_SCROLL_MASTER, 8),
	ALE_OF_THE_GODS(ItemID.ALE_OF_THE_GODS, BossTab.CLUE_SCROLL_MASTER, 9),
	BUCKET_HELM_G(ItemID.BUCKET_HELM_G, BossTab.CLUE_SCROLL_MASTER, 9),
	BOWL_WIG(ItemID.BOWL_WIG, BossTab.CLUE_SCROLL_MASTER, 9),
	BLOODHOUND(ItemID.BLOODHOUND, BossTab.CLUE_SCROLL_MASTER, 9),
	SCROLL_SACK(ItemID.SCROLL_SACK, BossTab.CLUE_SCROLL_MASTER, 9),

	// Sarachnis
	SARACHNIS_CUDGEL(ItemID.SARACHNIS_CUDGEL, BossTab.SARACHNIS, 0),
	JAR_OF_EYES(ItemID.JAR_OF_EYES, BossTab.SARACHNIS, 0),
	SRARACHA(ItemID.SRARACHA, BossTab.SARACHNIS, 0),

	// Zalcano
	CRYSTAL_TOOL_SEED(ItemID.CRYSTAL_TOOL_SEED, BossTab.ZALCANO, -1),
	ZALCANO_SHARD(ItemID.ZALCANO_SHARD, BossTab.ZALCANO, -1),
	SMOLCANO(ItemID.SMOLCANO, BossTab.ZALCANO, -1),

	// Nightmare
	INQUISITORS_MACE(ItemID.INQUISITORS_MACE, BossTab.NIGHTMARE, -1),
	INQUISITORS_GREAT_HELM(ItemID.INQUISITORS_GREAT_HELM, BossTab.NIGHTMARE, -1),
	INQUISITORS_HAUBERK(ItemID.INQUISITORS_HAUBERK, BossTab.NIGHTMARE, -1),
	INQUISITORS_PLATESKIRT(ItemID.INQUISITORS_PLATESKIRT, BossTab.NIGHTMARE, -1),
	JAR_OF_DREAMS(ItemID.JAR_OF_DREAMS, BossTab.NIGHTMARE, -1),
	NIGHTMARE_STAFF(ItemID.NIGHTMARE_STAFF, BossTab.NIGHTMARE, 0),
	ELDRITCH_ORB(ItemID.ELDRITCH_ORB, BossTab.NIGHTMARE, 0),
	HARMONISED_ORB(ItemID.HARMONISED_ORB, BossTab.NIGHTMARE, 0),
	VOLATILE_ORB(ItemID.VOLATILE_ORB, BossTab.NIGHTMARE, 0),
	LITTLE_NIGHTMARE(ItemID.LITTLE_NIGHTMARE, BossTab.NIGHTMARE, 0),

	// Phosani's Nightmare
	PHOSANIS_INQUISITORS_MACE(ItemID.INQUISITORS_MACE, BossTab.PHOSANIS_NIGHTMARE, -1),
	PHOSANIS_INQUISITORS_GREAT_HELM(ItemID.INQUISITORS_GREAT_HELM, BossTab.PHOSANIS_NIGHTMARE, -1),
	PHOSANIS_INQUISITORS_HAUBERK(ItemID.INQUISITORS_HAUBERK, BossTab.PHOSANIS_NIGHTMARE, -1),
	PHOSANIS_INQUISITORS_PLATESKIRT(ItemID.INQUISITORS_PLATESKIRT, BossTab.PHOSANIS_NIGHTMARE, -1),
	PHOSANIS_JAR_OF_DREAMS(ItemID.JAR_OF_DREAMS, BossTab.PHOSANIS_NIGHTMARE, -1),
	PHOSANIS_NIGHTMARE_STAFF(ItemID.NIGHTMARE_STAFF, BossTab.PHOSANIS_NIGHTMARE, 0),
	PHOSANIS_ELDRITCH_ORB(ItemID.ELDRITCH_ORB, BossTab.PHOSANIS_NIGHTMARE, 0),
	PHOSANIS_HARMONISED_ORB(ItemID.HARMONISED_ORB, BossTab.PHOSANIS_NIGHTMARE, 0),
	PHOSANIS_VOLATILE_ORB(ItemID.VOLATILE_ORB, BossTab.PHOSANIS_NIGHTMARE, 0),
	PHOSANIS_LITTLE_NIGHTMARE(ItemID.LITTLE_NIGHTMARE, BossTab.PHOSANIS_NIGHTMARE, 0),
	PHOSANIS_PARASITIC_EGG(ItemID.PARASITIC_EGG, BossTab.PHOSANIS_NIGHTMARE, 0),
	PHOSANIS_SLEPEY_TABLET(ItemID.SLEPEY_TABLET, BossTab.PHOSANIS_NIGHTMARE, 0),

	// Wintertodt
	PYROMANCER_HOOD(ItemID.PYROMANCER_HOOD, BossTab.WINTERTODT, 0),
	PYROMANCER_GARB(ItemID.PYROMANCER_GARB, BossTab.WINTERTODT, 0),
	PYROMANCER_ROBE(ItemID.PYROMANCER_ROBE, BossTab.WINTERTODT, 0),
	PYROMANCER_BOOTS(ItemID.PYROMANCER_BOOTS, BossTab.WINTERTODT, 0),
	WARM_GLOVES(ItemID.WARM_GLOVES, BossTab.WINTERTODT, 0),
	BRUMA_TORCH(ItemID.BRUMA_TORCH, BossTab.WINTERTODT, 0),
	TOME_OF_FIRE(ItemID.TOME_OF_FIRE_EMPTY, BossTab.WINTERTODT, 1),
	BURNT_PAGE(ItemID.BURNT_PAGE, BossTab.WINTERTODT, 1),
	PHOENIX(ItemID.PHOENIX, BossTab.WINTERTODT, 1),
	WT_DRAGON_AXE(ItemID.DRAGON_AXE, BossTab.WINTERTODT, 1),

	// Tempoross
	SPIRIT_FLAKES(ItemID.SPIRIT_FLAKES, BossTab.TEMPOROSS, 0),
	CASKET_REWARD_POOL(ItemID.CASKET_25590, BossTab.TEMPOROSS, 0),
	FISH_BARREL(ItemID.FISH_BARREL, BossTab.TEMPOROSS, 0),
	TACKLE_BOX(ItemID.TACKLE_BOX, BossTab.TEMPOROSS, 0),
	TOME_OF_WATER(ItemID.TOME_OF_WATER_EMPTY, BossTab.TEMPOROSS, 1),
	SOAKED_PAGE(ItemID.SOAKED_PAGE, BossTab.TEMPOROSS, 1),
	BIG_HARPOONFISH(ItemID.BIG_HARPOONFISH, BossTab.TEMPOROSS, 1),
	DRAGON_HARPOON(ItemID.DRAGON_HARPOON, BossTab.TEMPOROSS, 1),
	TINY_TEMPOR(ItemID.TINY_TEMPOR, BossTab.TEMPOROSS, 1),

	// Nex
	ANCIENT_CEREMONIAL_MASK(ItemID.ANCIENT_CEREMONIAL_MASK, BossTab.NEX, 0),
	ANCIENT_CEREMONIAL_TOP(ItemID.ANCIENT_CEREMONIAL_TOP, BossTab.NEX, 0),
	ANCIENT_CEREMONIAL_LEGS(ItemID.ANCIENT_CEREMONIAL_LEGS, BossTab.NEX, 0),
	ANCIENT_CEREMONIAL_GLOVES(ItemID.ANCIENT_CEREMONIAL_GLOVES, BossTab.NEX, 0),
	ANCIENT_CEREMONIAL_BOOTS(ItemID.ANCIENT_CEREMONIAL_BOOTS, BossTab.NEX, 0),
	TORVA_HELM_DAMAGED(ItemID.TORVA_FULL_HELM_DAMAGED, BossTab.NEX, 1),
	TORVA_PLATEBODY_DAMAGED(ItemID.TORVA_PLATEBODY_DAMAGED, BossTab.NEX, 1),
	TORVA_PLATELEGS_DAMAGED(ItemID.TORVA_PLATELEGS_DAMAGED, BossTab.NEX, 1),
	ANCIENT_HILT(ItemID.ANCIENT_HILT, BossTab.NEX, 1),
	ECUMENICAL_KEY_SHARD(ItemID.ECUMENICAL_KEY_SHARD, BossTab.NEX, 2),
	NIHIL_SHARD(ItemID.NIHIL_SHARD, BossTab.NEX, 2),
	ZARYTE_VAMBRACES(ItemID.ZARYTE_VAMBRACES, BossTab.NEX, 2),
	NIHIL_HORN(ItemID.NIHIL_HORN, BossTab.NEX, 2),
	NEXLING(ItemID.NEXLING, BossTab.NEX, 2),

	// Tombs of Amascut
	THREAD_OF_ELIDINIS(ItemID.THREAD_OF_ELIDINIS, BossTab.TOMBS_OF_AMASCUT, 0),
	EYE_OF_THE_CORRUPTOR(ItemID.EYE_OF_THE_CORRUPTOR, BossTab.TOMBS_OF_AMASCUT, 0),
	JEWEL_OF_THE_SUN(ItemID.JEWEL_OF_THE_SUN, BossTab.TOMBS_OF_AMASCUT, 0),
	BREACH_OF_THE_SCARAB(ItemID.BREACH_OF_THE_SCARAB, BossTab.TOMBS_OF_AMASCUT, 0),
	FOSSILISED_DUNG(ItemID.FOSSILISED_DUNG, BossTab.TOMBS_OF_AMASCUT, 0),

	LIGHTBEARER(ItemID.LIGHTBEARER, BossTab.TOMBS_OF_AMASCUT, 1),
	OSMUMTENS_FANG(ItemID.OSMUMTENS_FANG, BossTab.TOMBS_OF_AMASCUT, 1),
	ELIDINIS_WARD(ItemID.ELIDINIS_WARD, BossTab.TOMBS_OF_AMASCUT, 1),
	TUMEKENS_SHADOW_UNCHARGED(ItemID.TUMEKENS_SHADOW_UNCHARGED, BossTab.TOMBS_OF_AMASCUT, 1),

	MASORI_MASK(ItemID.MASORI_MASK, BossTab.TOMBS_OF_AMASCUT, 2),
	MASORI_BODY(ItemID.MASORI_BODY, BossTab.TOMBS_OF_AMASCUT, 2),
	MASORI_CHAPS(ItemID.MASORI_CHAPS, BossTab.TOMBS_OF_AMASCUT, 2),
	TUMEKENS_GUARDIAN(ItemID.TUMEKENS_GUARDIAN, BossTab.TOMBS_OF_AMASCUT, 2),

	CURSED_PHALANX(ItemID.CURSED_PHALANX, BossTab.TOMBS_OF_AMASCUT, 3),
	MENAPHITE_ORNAMENT_KIT(ItemID.MENAPHITE_ORNAMENT_KIT, BossTab.TOMBS_OF_AMASCUT, 3),
	MASORI_CRAFTING_KIT(ItemID.MASORI_CRAFTING_KIT, BossTab.TOMBS_OF_AMASCUT, 3),

	// Phantom Muspah
	ANCIENT_ESSENCE(ItemID.ANCIENT_ESSENCE, BossTab.PHANTOM_MUSPAH, 0),
	FROZEN_CACHE(ItemID.FROZEN_CACHE, BossTab.PHANTOM_MUSPAH, 0),
	ANCIENT_ICON(ItemID.ANCIENT_ICON, BossTab.PHANTOM_MUSPAH, 0),
	VENATOR_SHARD(ItemID.VENATOR_SHARD, BossTab.PHANTOM_MUSPAH, 0),
	MUPHIN(ItemID.MUPHIN, BossTab.PHANTOM_MUSPAH, 0),
	CHARGED_ICE(ItemID.CHARGED_ICE, BossTab.PHANTOM_MUSPAH, 0),

	//Forgotten Four
	STRANGLED_TABLET(ItemID.STRANGLED_TABLET, BossTab.VARDORVIS, 0),
	BLOOD_QUARTZ(ItemID.BLOOD_QUARTZ, BossTab.VARDORVIS, 0),
	ULTOR_VESTIGE(ItemID.ULTOR_VESTIGE, BossTab.VARDORVIS, 0),
	EXECUTIONERS_AXE_HEAD(ItemID.EXECUTIONERS_AXE_HEAD, BossTab.VARDORVIS, 0),
	BUTCH(ItemID.BUTCH, BossTab.VARDORVIS, 0),

	SCARRED_TABLET(ItemID.SCARRED_TABLET, BossTab.THE_LEVIATHAN, 0),
	SMOKE_QUARTZ(ItemID.SMOKE_QUARTZ, BossTab.THE_LEVIATHAN, 0),
	VENATOR_VESTIGE(ItemID.VENATOR_VESTIGE, BossTab.THE_LEVIATHAN, 0),
	LEVIATHANS_LURE(ItemID.LEVIATHANS_LURE, BossTab.THE_LEVIATHAN, 0),
	LILVIATHAN(ItemID.LILVIATHAN, BossTab.THE_LEVIATHAN, 0),

	FROZEN_TABLET(ItemID.FROZEN_TABLET, BossTab.DUKE_SUCELLUS, 0),
	ICE_QUARTZ(ItemID.ICE_QUARTZ, BossTab.DUKE_SUCELLUS, 0),
	MAGUS_VESTIGE(ItemID.MAGUS_VESTIGE, BossTab.DUKE_SUCELLUS, 0),
	EYE_OF_THE_DUKE(ItemID.EYE_OF_THE_DUKE, BossTab.DUKE_SUCELLUS, 0),
	BARON(ItemID.BARON, BossTab.DUKE_SUCELLUS, 0),

	SIRENIC_TABLET(ItemID.SIRENIC_TABLET, BossTab.THE_WHISPERER, 0),
	SHADOW_QUARTZ(ItemID.SHADOW_QUARTZ, BossTab.THE_WHISPERER, 0),
	BELLATOR_VESTIGE(ItemID.BELLATOR_VESTIGE, BossTab.THE_WHISPERER, 0),
	SIRENS_STAFF(ItemID.SIRENS_STAFF, BossTab.THE_WHISPERER, 0),
	WISP(ItemID.WISP, BossTab.THE_WHISPERER, 0),

	// Moons of Peril
	BLOOD_MOON_HELM(ItemID.BLOOD_MOON_HELM, BossTab.MOONS_OF_PERIL, 0),
	BLOOD_MOON_CHESTPLATE(ItemID.BLOOD_MOON_CHESTPLATE, BossTab.MOONS_OF_PERIL, 0),
	BLOOD_MOON_TASSETS(ItemID.BLOOD_MOON_TASSETS, BossTab.MOONS_OF_PERIL, 0),
	DUAL_MACUAHUITL(ItemID.DUAL_MACUAHUITL, BossTab.MOONS_OF_PERIL, 0),

	BLUE_MOON_HELM(ItemID.BLUE_MOON_HELM, BossTab.MOONS_OF_PERIL, 1),
	BLUE_MOON_CHESTPLATE(ItemID.BLUE_MOON_CHESTPLATE, BossTab.MOONS_OF_PERIL, 1),
	BLUE_MOON_TASSETS(ItemID.BLUE_MOON_TASSETS, BossTab.MOONS_OF_PERIL, 1),
	BLUE_MOON_SPEAR(ItemID.BLUE_MOON_SPEAR, BossTab.MOONS_OF_PERIL, 1),

	ECLIPSE_MOON_HELM(ItemID.ECLIPSE_MOON_HELM, BossTab.MOONS_OF_PERIL, 2),
	ECLIPSE_MOON_CHESTPLATE(ItemID.ECLIPSE_MOON_CHESTPLATE, BossTab.MOONS_OF_PERIL, 2),
	ECLIPSE_MOON_TASSETS(ItemID.ECLIPSE_MOON_TASSETS, BossTab.MOONS_OF_PERIL, 2),
	ECLIPSE_ATLATL(ItemID.ECLIPSE_ATLATL, BossTab.MOONS_OF_PERIL, 2),
	ATLATL_DART(ItemID.ATLATL_DART, BossTab.MOONS_OF_PERIL, 2),


	// Fortis Colosseum
	SUNFIRE_SPLINTERS(ItemID.SUNFIRE_SPLINTERS, BossTab.FORTIS_COLOSSEUM, 0),
	SUNFIRE_FANATIC_HELM(ItemID.SUNFIRE_FANATIC_HELM, BossTab.FORTIS_COLOSSEUM, 0),
	SUNFIRE_FANATIC_CUIRASS(ItemID.SUNFIRE_FANATIC_CUIRASS, BossTab.FORTIS_COLOSSEUM, 0),
	SUNFIRE_FANATIC_CHAUSSES(ItemID.SUNFIRE_FANATIC_CHAUSSES, BossTab.FORTIS_COLOSSEUM, 0),

	ECHO_CRYSTAL(ItemID.ECHO_CRYSTAL, BossTab.FORTIS_COLOSSEUM, 1),
	TONALZTICS_OF_RALOS_UNCHARGED(ItemID.TONALZTICS_OF_RALOS_UNCHARGED, BossTab.FORTIS_COLOSSEUM, 1),
	DIZANAS_QUIVER(ItemID.DIZANAS_QUIVER_UNCHARGED, BossTab.FORTIS_COLOSSEUM, 1),
	SMOL_HEREDIT(ItemID.SMOL_HEREDIT, BossTab.FORTIS_COLOSSEUM, 1),

	// Araxxor
	NOXIOUS_POMMEL(ItemID.NOXIOUS_POMMEL, BossTab.ARAXXOR, 0),
	NOXIOUS_POINT(ItemID.NOXIOUS_POINT, BossTab.ARAXXOR, 0),
	NOXIOUS_BLADE(ItemID.NOXIOUS_BLADE, BossTab.ARAXXOR, 0),
	ARAXYTE_FANG(ItemID.ARAXYTE_FANG, BossTab.ARAXXOR, 0),

	COAGULATED_VENOM(ItemID.COAGULATED_VENOM, BossTab.ARAXXOR, 1),
	ARAXYTE_HEAD(ItemID.ARAXYTE_HEAD, BossTab.ARAXXOR, 1),
	JAR_OF_VENOM(ItemID.JAR_OF_VENOM, BossTab.ARAXXOR, 1),
	NID(ItemID.NID, BossTab.ARAXXOR, 1),

	// Hueycoatl
	SOILED_PAGE(ItemID.SOILED_PAGE, BossTab.HUEYCOATL, 0),
	TOME_OF_EARTH_EMPTY(ItemID.TOME_OF_EARTH_EMPTY, BossTab.HUEYCOATL, 0),
	HUEYCOATL_HIDE(ItemID.HUEYCOATL_HIDE, BossTab.HUEYCOATL, 0),
	DRAGON_HUNTER_WAND(ItemID.DRAGON_HUNTER_WAND, BossTab.HUEYCOATL, 0),
	HUBERTE(ItemID.HUBERTE, BossTab.HUEYCOATL, 0),
	;

	private final int itemID;
	private final String[] bosses;
	private final int position;
	private final int[] alternativeIds;
	private String name;
	private int price;
	private int linkedID;

	@Setter
	// Used to store the qty being displayed on the sprite
	private int qty;

	private static final ImmutableMultimap<String, UniqueItem> BOSS_MAP;
	static
	{
		final ImmutableMultimap.Builder<String, UniqueItem> map = ImmutableMultimap.builder();
		for (UniqueItem item : values())
		{
			for (String s : item.getBosses())
			{
				map.put(s.toUpperCase(), item);
			}
		}

		BOSS_MAP = map.build();
	}

	// Non-Shared Unique Items
	UniqueItem(int id, BossTab boss, int position)
	{
		this.itemID = id;
		this.bosses = new String[]{boss.getName()};
		this.position = position;
		this.alternativeIds = new int[0];
	}

	// Unique item that is shared with other npcs that aren't BossTabs (like the wildy bosses and their single variants)
	UniqueItem(int id, BossTab boss, int position, String... otherNpcs)
	{
		this.itemID = id;
		this.position = position;
		this.alternativeIds = new int[0];
		this.bosses = Arrays.copyOf(otherNpcs, otherNpcs.length + 1);
		this.bosses[this.bosses.length - 1] = boss.getName();
	}

	// Non-Shared Unique Items
	UniqueItem(int id, BossTab boss, int position, int... alternativeIds)
	{
		this.itemID = id;
		this.bosses = new String[]{boss.getName()};
		this.position = position;
		this.alternativeIds = alternativeIds;
	}

	// Shared Unique Items
	UniqueItem(int id, BossTab... bosses)
	{
		this.itemID = id;
		this.position = -1;
		this.alternativeIds = new int[0];

		this.bosses = new String[bosses.length];
		for (int i = 0; i < bosses.length; i++)
		{
			this.bosses[i] = bosses[i].getName();
		}
	}

	// Support for npcs that don't have a BossTab entry
	UniqueItem(int id, int position, String... bosses)
	{
		this.itemID = id;
		this.position = position;
		this.alternativeIds = new int[0];

		this.bosses = bosses;
	}

	public static void prepareUniqueItems(final ItemManager itemManager)
	{
		for (final UniqueItem item : values())
		{
			if (item.getName() != null)
			{
				return;
			}

			final ItemComposition c = itemManager.getItemComposition(item.getItemID());
			item.name = c.getName();
			item.linkedID = c.getLinkedNoteId();
			item.price = itemManager.getItemPrice(c.getId());
		}
	}

	public static Collection<UniqueItem> getUniquesForBoss(final String bossName)
	{
		return BOSS_MAP.get(bossName.toUpperCase());
	}
}

/*
 * Copyright (c) 2019, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.lootlogger.data;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import javax.annotation.Nullable;
import lombok.Getter;
import lombok.Setter;
import net.runelite.api.ItemID;
import net.runelite.http.api.loottracker.LootRecordType;
import thestonedturtle.lootlogger.localstorage.LTItemEntry;
import thestonedturtle.lootlogger.localstorage.LTRecord;

@Getter
public class LootLog
{
	private static final Pattern CLUE_ITEM_TYPE_PATTERN = Pattern.compile("\\((\\w*)\\)");
	private final String name;
	@Setter
	private LootRecordType type;
	// Store all records in case rewrite needs to happen
	private final List<LTRecord> records = new ArrayList<>();
	private final Map<Integer, LTItemEntry> consolidated = new HashMap<>();
	private final Collection<UniqueItem> uniques;

	private final Set<Integer> uniqueIds = new HashSet<>();
	private final Multimap<Integer, UniqueItem> uniquePositionMap = ArrayListMultimap.create();

	// Store a LootLog for all minions
	private final List<LootLog> minionLogs = new ArrayList<>();

	public LootLog(final Collection<LTRecord> records, final String name)
	{
		this.records.addAll(records);
		this.name = name;

		if (records.size() == 0)
		{
			this.type = LootRecordType.UNKNOWN;
		}
		else
		{
			final LTRecord record = this.records.get(0);
			this.type = record.getType();
		}

		for (final LTRecord rec : records)
		{
			for (final LTItemEntry entry : rec.getDrops())
			{
				addItemEntryToMap(entry);
			}
		}

		final Collection<UniqueItem> unsorted = UniqueItem.getUniquesForBoss(name);
		if (unsorted == null)
		{
			uniques = new ArrayList<>();
			return;
		}

		uniques = unsorted.stream().sorted(Comparator.comparingInt(UniqueItem::getPosition)).collect(Collectors.toList());
	}

	public synchronized void addRecord(final LTRecord record)
	{
		records.add(record);
		for (final LTItemEntry entry : record.getDrops())
		{
			addItemEntryToMap(entry);
		}
	}

	private enum ClueType
	{
		SCROLL,
		CASKET
	}

	private void addItemEntryToMap(LTItemEntry item)
	{
		final String itemNameLowercased = item.getName().toLowerCase();

		ClueType type = null;
		if (itemNameLowercased.startsWith("clue scroll"))
		{
			type = ClueType.SCROLL;
		}
		else if(itemNameLowercased.startsWith("casket "))
		{
			type = ClueType.CASKET;
		}

		if (type != null)
		{
			Matcher m = CLUE_ITEM_TYPE_PATTERN.matcher(item.getName());
			if (m.find())
			{
				final String result = m.group(1);
				int id = item.getId();
				switch (result.toLowerCase())
				{
					// Beginner and Master clues only have 1 ID
					case "easy":
						id = type.equals(ClueType.SCROLL) ? ItemID.CLUE_SCROLL_EASY : ItemID.CASKET_EASY;
						break;
					case "medium":
						id = type.equals(ClueType.SCROLL) ? ItemID.CLUE_SCROLL_MEDIUM : ItemID.CASKET_MEDIUM;
						break;
					case "hard":
						id = type.equals(ClueType.SCROLL) ? ItemID.CLUE_SCROLL_HARD : ItemID.CASKET_HARD;
						break;
					case "elite":
						id = type.equals(ClueType.SCROLL) ? ItemID.CLUE_SCROLL_ELITE : ItemID.CASKET_ELITE;
						break;
				}

				item = new LTItemEntry(item.getName(), id, item.getQuantity(), item.getPrice());
			}
		}

		final LTItemEntry oldEntry = consolidated.get(item.getId());
		if (oldEntry != null)
		{
			// Use the most recent price
			oldEntry.setPrice(item.getPrice());
			oldEntry.setQuantity(oldEntry.getQuantity() + item.getQuantity());
		}
		else
		{
			// Create a new instance for consolidated records
			consolidated.put(item.getId(), new LTItemEntry(item.getName(), item.getId(), item.getQuantity(), item.getPrice()));
		}
	}

	@Nullable
	public LootLog getMinionLog(final String name)
	{
		for (final LootLog log : minionLogs)
		{
			if (log.getName().equalsIgnoreCase(name))
			{
				return log;
			}
		}

		return null;
	}

	public long getLootValue(boolean includeMinions)
	{
		long value = getConsolidated()
			.values().stream()
			.mapToLong(e -> e.getPrice() * e.getQuantity())
			.sum();

		if (includeMinions)
		{
			for (final LootLog minionLog : minionLogs)
			{
				value += minionLog.getConsolidated()
					.values().stream()
					.mapToLong(e -> e.getPrice() * e.getQuantity())
					.sum();
			}
		}

		return value;
	}

	// Loop over all UniqueItems and check how many the player has received as a drop for each
	// Also add all Item IDs for uniques to a Set for easy hiding later on.
	public static void recalculateUniques(final LootLog lootLog, final boolean includeMinions)
	{
		lootLog.getUniqueIds().clear();
		lootLog.getUniquePositionMap().clear();

		final Collection<LootLog> allLogs = new ArrayList<>();
		allLogs.add(lootLog);
		if (includeMinions) {
			allLogs.addAll(lootLog.getMinionLogs());
		}

		for (final UniqueItem item : lootLog.getUniques())
		{
			final List<Integer> ids = Arrays.stream(item.getAlternativeIds()).boxed().collect(Collectors.toList());
			ids.add(item.getItemID());
			ids.add(item.getLinkedID());

			int qty = 0;
			for (final int id : ids)
			{
				lootLog.getUniqueIds().add(id);

				for (final LootLog log : allLogs)
				{
					final LTItemEntry entry = log.getConsolidated().get(id);
					qty += (entry == null ? 0 : entry.getQuantity());
				}
			}

			item.setQty(qty);
			lootLog.getUniquePositionMap().put(item.getPosition(), item);
		}
	}
}

/*
 * Copyright (c) 2020, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.lootlogger.data;

import com.google.common.collect.ImmutableMap;
import lombok.Getter;
import net.runelite.api.ItemID;

@Getter
public enum Pet
{
	// GWD Pets
	PET_GENERAL_GRAARDOR(ItemID.PET_GENERAL_GRAARDOR, BossTab.GENERAL_GRAARDOR.getName()),
	PET_KREEARRA(ItemID.PET_KREEARRA, BossTab.KREEARRA.getName()),
	PET_KRIL_TSUTSAROTH(ItemID.PET_KRIL_TSUTSAROTH, BossTab.KRIL_TSUTSAROTH.getName()),
	PET_ZILYANA(ItemID.PET_ZILYANA, BossTab.COMMANDER_ZILYANA.getName()),
	NEXLING(ItemID.NEXLING, BossTab.NEX.getName()),
	// Wildy Pets
	CALLISTO_CUB(ItemID.CALLISTO_CUB, BossTab.CALLISTO.getName(), "Artio"),
	PET_CHAOS_ELEMENTAL(ItemID.PET_CHAOS_ELEMENTAL, BossTab.CHAOS_ELEMENTAL.getName(), BossTab.CHAOS_FANATIC.getName()),
	SCORPIAS_OFFSPRING(ItemID.SCORPIAS_OFFSPRING, BossTab.SCORPIA.getName()),
	VENENATIS_SPIDERLING(ItemID.VENENATIS_SPIDERLING, BossTab.VENENATIS.getName(), "Spindel"),
	VETION_JR(ItemID.VETION_JR, BossTab.VETION.getName(), "Vet'ion", "Calvar'ion"),
	// KBD isn't really in wildy but meh
	PRINCE_BLACK_DRAGON(ItemID.PRINCE_BLACK_DRAGON, BossTab.KING_BLACK_DRAGON.getName()),
	// Slayer Pets
	ABYSSAL_ORPHAN(ItemID.ABYSSAL_ORPHAN, BossTab.ABYSSAL_SIRE.getName()),
	HELLPUPPY(ItemID.HELLPUPPY, BossTab.CERBERUS.getName()),
	NOON(ItemID.NOON, BossTab.GROTESQUE_GUARDIANS.getName()),
	PET_KRAKEN(ItemID.PET_KRAKEN, BossTab.KRAKEN.getName()),
	PET_SMOKE_DEVIL(ItemID.PET_SMOKE_DEVIL, BossTab.THERMONUCLEAR_SMOKE_DEVIL.getName()),
	SKOTOS(ItemID.SKOTOS, BossTab.SKOTIZO.getName()),
	NID(ItemID.NID, BossTab.ARAXXOR.getName()),
	// Other Bosses
	BABY_MOLE(ItemID.BABY_MOLE, BossTab.GIANT_MOLE.getName()),
	KALPHITE_PRINCESS(ItemID.KALPHITE_PRINCESS, BossTab.KALPHITE_QUEEN.getName()),
	OLMLET(ItemID.OLMLET, BossTab.CHAMBERS_OF_XERIC.getName()),
	LIL_ZIK(ItemID.LIL_ZIK, BossTab.THEATRE_OF_BLOOD.getName()),
	PET_DARK_CORE(ItemID.PET_DARK_CORE, BossTab.CORPOREAL_BEAST.getName()),
	PET_SNAKELING(ItemID.PET_SNAKELING, BossTab.ZULRAH.getName()),
	PET_DAGANNOTH_REX(ItemID.PET_DAGANNOTH_REX, BossTab.DAGANNOTH_REX.getName()),
	PET_DAGANNOTH_PRIME(ItemID.PET_DAGANNOTH_PRIME, BossTab.DAGANNOTH_PRIME.getName()),
	PET_DAGANNOTH_SUPREME(ItemID.PET_DAGANNOTH_SUPREME, BossTab.DAGANNOTH_SUPREME.getName()),
	VORKI(ItemID.VORKI, BossTab.VORKATH.getName()),
	BLOODHOUND(ItemID.BLOODHOUND, BossTab.CLUE_SCROLL_MASTER.getName()),
	IKKLE_HYDRA(ItemID.IKKLE_HYDRA, BossTab.ALCHEMICAL_HYDRA.getName()),
	YOUNGLLEF(ItemID.YOUNGLLEF, BossTab.THE_GAUNTLET.getName()),
	SRARACHA(ItemID.SRARACHA, BossTab.SARACHNIS.getName()),
	SMOLCANO(ItemID.SMOLCANO, BossTab.ZALCANO.getName()),
	LITTLE_NIGHTMARE(ItemID.LITTLE_NIGHTMARE, BossTab.NIGHTMARE.getName(), BossTab.PHOSANIS_NIGHTMARE.getName()),
	HERBI(ItemID.HERBI, "Herbiboar"),
	HUBERTE(ItemID.HUBERTE, BossTab.HUEYCOATL.getName()),
	// Pretty sure
	PHOENIX(ItemID.PHOENIX, BossTab.WINTERTODT.getName()),
	PET_PENANCE_QUEEN(ItemID.PET_PENANCE_QUEEN, "Barbarian Assault"),
	TINY_TEMPOR(ItemID.TINY_TEMPOR, BossTab.TEMPOROSS.getName()),
	TUMEKENS_GUARDIAN(ItemID.TUMEKENS_GUARDIAN, BossTab.TOMBS_OF_AMASCUT.getName()),
	MUPHIN(ItemID.MUPHIN, BossTab.PHANTOM_MUSPAH.getName()),

	// Forgotten Four
	BUTCH(ItemID.BUTCH, BossTab.VARDORVIS.getName()),
	LILVIATHAN(ItemID.LILVIATHAN, BossTab.THE_LEVIATHAN.getName()),
	BARON(ItemID.BARON, BossTab.DUKE_SUCELLUS.getName()),
	WISP(ItemID.WISP, BossTab.THE_WHISPERER.getName()),

	// Fortis Colosseum
	SMOL_HEREDIT(ItemID.SMOL_HEREDIT, BossTab.FORTIS_COLOSSEUM.getName()),

	// Pets that aren't tied to a BossTab
	MOXI(ItemID.MOXI, "Amoxliatl"),
	SCURRY(ItemID.SCURRY, "Scurrius"),
	;

	private static final ImmutableMap<String, Pet> BOSS_MAP;
	static
	{
		final ImmutableMap.Builder<String, Pet> byName = ImmutableMap.builder();
		for (final Pet pet : values())
		{
			for (final String bossName : pet.getBossNames())
			{
				byName.put(bossName.toUpperCase(), pet);
			}
		}

		BOSS_MAP = byName.build();
	}

	private final int petID;
	private final String[] bossNames;

	Pet(final int id, final String... bossNames)
	{
		this.petID = id;
		this.bossNames = bossNames;
	}

	public static Pet getByBossName(final String name)
	{
		return BOSS_MAP.get(name.toUpperCase());
	}
}

/*
 * Copyright (c) 2018, TheStonedTurtle <www.github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.lootlogger.data;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableMultimap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Multimap;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.stream.Collectors;
import javax.annotation.Nullable;
import lombok.Getter;
import net.runelite.api.ItemID;
import net.runelite.http.api.loottracker.LootRecordType;

@Getter
public enum BossTab
{
	// Raids
	CHAMBERS_OF_XERIC("Chambers of Xeric", ItemID.OLMLET, "Chests / Raids", LootRecordType.EVENT),
	THEATRE_OF_BLOOD("Theatre of Blood", ItemID.LIL_ZIK, "Chests / Raids", LootRecordType.EVENT),
	TOMBS_OF_AMASCUT("Tombs of Amascut", ItemID.TUMEKENS_GUARDIAN, "Chests / Raids", LootRecordType.EVENT,
		ImmutableSet.of("Cache of runes")),

	BARROWS("Barrows", ItemID.BARROWS_TELEPORT, "Chests / Raids", LootRecordType.EVENT),
	MOONS_OF_PERIL("Moons of Peril", ItemID.DUAL_MACUAHUITL, "Chests / Raids", LootRecordType.EVENT, "Lunar Chest"),
	FORTIS_COLOSSEUM("Fortis Colosseum", ItemID.SMOL_HEREDIT, "Chests / Raids", LootRecordType.EVENT),

	// Loot received on NPC death
	ZULRAH("Zulrah", ItemID.PET_SNAKELING, "Other", LootRecordType.NPC),
	VORKATH("Vorkath", ItemID.VORKI, "Other", LootRecordType.NPC),

	// Forgotten Four
	VARDORVIS("Vardorvis", ItemID.BUTCH, "Forgotten Four", LootRecordType.NPC),
	THE_LEVIATHAN("The Leviathan", ItemID.LILVIATHAN, "Forgotten Four", LootRecordType.NPC),
	DUKE_SUCELLUS("Duke Sucellus", ItemID.BARON, "Forgotten Four", LootRecordType.NPC),
	THE_WHISPERER("The Whisperer", ItemID.WISP, "Forgotten Four", LootRecordType.NPC),

	// God wars dungeon
	KREEARRA("Kree'arra", ItemID.PET_KREEARRA , "God Wars Dungeon", LootRecordType.NPC,
		ImmutableSet.of("Wingman Skree", "Flockleader Geerin", "Flight Kilisa")),
	GENERAL_GRAARDOR("General Graardor", ItemID.PET_GENERAL_GRAARDOR , "God Wars Dungeon", LootRecordType.NPC,
		ImmutableSet.of("Sergeant Strongstack", "Sergeant Steelwill", "Sergeant Grimspike")),
	COMMANDER_ZILYANA("Commander Zilyana", ItemID.PET_ZILYANA , "God Wars Dungeon", LootRecordType.NPC,
		ImmutableSet.of("Growler", "Bree", "Starlight")),
	KRIL_TSUTSAROTH("K'ril Tsutsaroth", ItemID.PET_KRIL_TSUTSAROTH , "God Wars Dungeon", LootRecordType.NPC,
		ImmutableSet.of("Balfrug Kreeyath", "Tstanon Karlak", "Zakl'n Gritch")),
	NEX("Nex", ItemID.NEXLING, "God Wars Dungeon", LootRecordType.NPC,
		ImmutableSet.of("Fumus", "Umbra", "Cruor", "Glacies")),

	// Wildy Bosses
	VETION("Vet'ion Reborn", ItemID.VETION_JR , "Wilderness", LootRecordType.NPC, ImmutableSet.of("Calvar'ion"), "Vet'ion"),
	VENENATIS("Venenatis", ItemID.VENENATIS_SPIDERLING , "Wilderness", LootRecordType.NPC, ImmutableSet.of("Spindel")),
	CALLISTO("Callisto", ItemID.CALLISTO_CUB , "Wilderness", LootRecordType.NPC, ImmutableSet.of("Artio")),
	CHAOS_ELEMENTAL("Chaos Elemental", ItemID.PET_CHAOS_ELEMENTAL , "Wilderness", LootRecordType.NPC),
	// Wildy Demi-Bosses
	SCORPIA("Scorpia", ItemID.SCORPIAS_OFFSPRING, "Wilderness", LootRecordType.NPC),
	CHAOS_FANATIC("Chaos Fanatic", ItemID.ANCIENT_STAFF , "Wilderness", LootRecordType.NPC),
	CRAZY_ARCHAEOLOGIST("Crazy Archaeologist", ItemID.FEDORA , "Wilderness", LootRecordType.NPC),
	// Wildy Other
	KING_BLACK_DRAGON("King Black Dragon", ItemID.PRINCE_BLACK_DRAGON , "Wilderness", LootRecordType.NPC),

	// Slayer Bosses
	SKOTIZO("Skotizo", ItemID.SKOTOS, "Slayer", LootRecordType.NPC),
	GROTESQUE_GUARDIANS("Grotesque Guardians", ItemID.NOON, "Slayer", LootRecordType.NPC, "Dusk"),
	ABYSSAL_SIRE("Abyssal Sire", ItemID.ABYSSAL_ORPHAN, "Slayer", LootRecordType.NPC),
	KRAKEN("Kraken", ItemID.PET_KRAKEN, "Slayer", LootRecordType.NPC),
	CERBERUS("Cerberus", ItemID.HELLPUPPY, "Slayer", LootRecordType.NPC),
	THERMONUCLEAR_SMOKE_DEVIL("Thermonuclear smoke devil", ItemID.PET_SMOKE_DEVIL, "Slayer", LootRecordType.NPC),
	ALCHEMICAL_HYDRA("Alchemical Hydra", ItemID.IKKLE_HYDRA, "Slayer", LootRecordType.NPC),
	ARAXXOR("Araxxor", ItemID.NID, "Slayer", LootRecordType.NPC),

	// Other Bosses
	KALPHITE_QUEEN("Kalphite Queen", ItemID.KALPHITE_PRINCESS, "Other", LootRecordType.NPC),
	GIANT_MOLE("Giant Mole", ItemID.BABY_MOLE, "Other", LootRecordType.NPC),
	CORPOREAL_BEAST("Corporeal Beast", ItemID.PET_CORPOREAL_CRITTER, "Other", LootRecordType.NPC),
	SARACHNIS("Sarachnis", ItemID.SRARACHA, "Other", LootRecordType.NPC),
	THE_GAUNTLET("The Gauntlet", ItemID.YOUNGLLEF, "Other", LootRecordType.EVENT),
	NIGHTMARE("The Nightmare", ItemID.LITTLE_NIGHTMARE, "Other", LootRecordType.NPC),
	PHOSANIS_NIGHTMARE("Phosani's Nightmare", ItemID.LITTLE_PARASITE, "Other", LootRecordType.NPC),
	PHANTOM_MUSPAH("Phantom Muspah", ItemID.MUPHIN, "Other", LootRecordType.NPC),
	HUEYCOATL("Hueycoatl", ItemID.HUBERTE, "Other", LootRecordType.NPC),

	// Dagannoth Kings
	DAGANNOTH_REX("Dagannoth Rex", ItemID.PET_DAGANNOTH_REX, "Dagannoth Kings", LootRecordType.NPC),
	DAGANNOTH_PRIME("Dagannoth Prime", ItemID.PET_DAGANNOTH_PRIME, "Dagannoth Kings", LootRecordType.NPC),
	DAGANNOTH_SUPREME("Dagannoth Supreme", ItemID.PET_DAGANNOTH_SUPREME, "Dagannoth Kings", LootRecordType.NPC),

	// Clue scrolls
	CLUE_SCROLL_BEGINNER("Clue Scroll (Beginner)", ItemID.CLUE_SCROLL_BEGINNER, "Clue Scrolls", LootRecordType.EVENT),
	CLUE_SCROLL_EASY("Clue Scroll (Easy)", ItemID.CLUE_SCROLL_EASY, "Clue Scrolls", LootRecordType.EVENT),
	CLUE_SCROLL_MEDIUM("Clue Scroll (Medium)", ItemID.CLUE_SCROLL_MEDIUM, "Clue Scrolls", LootRecordType.EVENT),
	CLUE_SCROLL_HARD("Clue Scroll (Hard)", ItemID.CLUE_SCROLL_HARD, "Clue Scrolls", LootRecordType.EVENT),
	CLUE_SCROLL_ELITE("Clue Scroll (Elite)", ItemID.CLUE_SCROLL_ELITE, "Clue Scrolls", LootRecordType.EVENT),
	CLUE_SCROLL_MASTER("Clue Scroll (Master)", ItemID.CLUE_SCROLL_MASTER, "Clue Scrolls", LootRecordType.EVENT),

	// Skilling
	WINTERTODT("Wintertodt", ItemID.PHOENIX, "Skilling", LootRecordType.EVENT, "Supply crate (Wintertodt)"),
	TEMPOROSS("Tempoross", ItemID.TINY_TEMPOR, "Skilling", LootRecordType.EVENT,
		ImmutableSet.of("Casket (Tempoross)"), "Reward pool (Tempoross)"),
	ZALCANO("Zalcano", ItemID.SMOLCANO, "Skilling", LootRecordType.NPC),
	;

	private final String name;
	private final int itemID;
	private final String category;
	private final LootRecordType type;
	private final Set<String> aliases = new HashSet<>();
	private final Set<String> minions;

	BossTab(final String name, final int itemID, final String category, final LootRecordType type, final String... aliases)
	{
		this(name, itemID, category, type, Collections.emptyList(), aliases);
	}

	BossTab(final String name, final int itemID, final String category, final LootRecordType type, final Collection<String> minions, final String... aliases)
	{
		this.name = name;
		this.itemID = itemID;
		this.category = category;
		this.type = type;

		this.aliases.add(name);
		this.aliases.addAll(Arrays.asList(aliases));
		this.minions = minions.stream().map(String::toLowerCase).collect(Collectors.toSet());
	}

	private static final Map<String, BossTab> NAME_MAP;
	private static final Multimap<String, BossTab> CATEGORY_MAP;
	static
	{
		final ImmutableMap.Builder<String, BossTab> byName = ImmutableMap.builder();
		final ImmutableMultimap.Builder<String, BossTab> categoryMap = ImmutableMultimap.builder();

		for (BossTab tab : values())
		{
			for (final String name : tab.getAliases()) {
				byName.put(name.toUpperCase(), tab);
			}
			categoryMap.put(tab.getCategory(), tab);
		}

		NAME_MAP = byName.build();
		CATEGORY_MAP = categoryMap.build();
	}

	@Nullable
	public static BossTab getByName(final String name)
	{
		return NAME_MAP.get(name.toUpperCase());
	}

	public static Collection<BossTab> getByCategoryName(final String name)
	{
		return CATEGORY_MAP.get(name);
	}

	public static TreeSet<String> getCategories()
	{
		return new TreeSet<>(CATEGORY_MAP.keySet());
	}
}

package thestonedturtle.lootlogger;

import com.google.common.collect.HashMultimap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.LinkedListMultimap;
import com.google.common.collect.SetMultimap;
import com.google.inject.Provides;
import java.awt.image.BufferedImage;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import javax.inject.Inject;
import javax.swing.SwingUtilities;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.ItemComposition;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.InterfaceID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.config.RuneScapeProfileType;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.ItemStack;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.PluginManager;
import net.runelite.client.plugins.loottracker.LootReceived;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.Text;
import net.runelite.http.api.loottracker.LootRecordType;
import org.apache.commons.lang3.ArrayUtils;
import thestonedturtle.lootlogger.data.BossTab;
import thestonedturtle.lootlogger.data.LootLog;
import thestonedturtle.lootlogger.data.Pet;
import thestonedturtle.lootlogger.data.UniqueItem;
import thestonedturtle.lootlogger.localstorage.LTItemEntry;
import thestonedturtle.lootlogger.localstorage.LTRecord;
import thestonedturtle.lootlogger.localstorage.LootRecordWriter;
import thestonedturtle.lootlogger.ui.LootLoggerPanel;

@Slf4j
@PluginDescriptor(
	name = "Loot Logger"
)
public class LootLoggerPlugin extends Plugin
{
	private static final String SIRE_FONT_TEXT = "you place the unsired into the font of consumption...";
	private static final String SIRE_REWARD_TEXT = "the font consumes the unsired";
	private static final int MAX_TEXT_CHECK = 25;
	private static final int MAX_PET_TICKS = 5;

	// Kill count handling
	private static final Pattern CLUE_SCROLL_PATTERN = Pattern.compile("You have completed ([0-9]+) ([a-z]+) Treasure Trails.");
	private static final Pattern BOSS_NAME_NUMBER_PATTERN = Pattern.compile("Your (.*) kill count is:? ([0-9,]*).");
	private static final Pattern NUMBER_PATTERN = Pattern.compile("([0-9,]+)");

	private static final NumberFormat NUMBER_FORMATTER = NumberFormat.getNumberInstance(Locale.US);

	private static final ImmutableSet<String> PET_MESSAGES = ImmutableSet.of("You have a funny feeling like you're being followed.",
		"You feel something weird sneaking into your backpack.",
		"You have a funny feeling like you would have been followed...");

	private static final int NMZ_MAP_REGION = 9033;

	public static final String SESSION_NAME = "Current Session Data";

	@Inject
	private Client client;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	public LootLoggerConfig config;

	@Inject
	private ItemManager itemManager;

	@Inject
	private ClientThread clientThread;

	@Inject
	private LootRecordWriter writer;

	@Inject
	private PluginManager pluginManager;

	private LootLoggerPanel panel;
	private NavigationButton navButton;

	@Getter
	private SetMultimap<LootRecordType, String> lootNames = HashMultimap.create();

	private boolean prepared = false;
	private boolean unsiredReclaiming = false;
	private int unsiredCheckCount = 0;
	// Some pets aren't handled (skilling pets) so reset gotPet after a few ticks
	private int petTicks = 0;
	private boolean gotPet = false;

	private final Map<String, Integer> killCountMap = new HashMap<>();
	private final LinkedListMultimap<String, LTRecord> sessionData = LinkedListMultimap.create();

	@Provides
	LootLoggerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(LootLoggerConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		panel = new LootLoggerPanel(itemManager, this);

		final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "panel-icon.png");

		navButton = NavigationButton.builder()
			.tooltip("Loot Logger")
			.icon(icon)
			.priority(6)
			.panel(panel)
			.build();

		if (config.enableUI())
		{
			clientToolbar.addNavigation(navButton);
		}

		// Attach necessary info from item manager on load, probably a better method
		if (!prepared)
		{
			prepared = true;
			clientThread.invokeLater(() ->
			{
				switch (client.getGameState())
				{
					case UNKNOWN:
					case STARTING:
						return false;
				}

				UniqueItem.prepareUniqueItems(itemManager);
				return true;
			});
		}

		if (client.getGameState().equals(GameState.LOGGED_IN) || client.getGameState().equals(GameState.LOADING))
		{
			updateWriterUsername();
		}

		final Optional<Plugin> mainPlugin = pluginManager.getPlugins().stream().filter(p -> p.getName().equals("Loot Tracker")).findFirst();
		if (mainPlugin.isPresent() && !pluginManager.isPluginEnabled(mainPlugin.get()))
		{
			pluginManager.setPluginEnabled(mainPlugin.get(), true);
		}
	}

	@Override
	protected void shutDown()
	{
		if (config.enableUI())
		{
			clientToolbar.removeNavigation(navButton);
		}

		gotPet = false;
		petTicks = 0;
		writer.setName(null);
	}

	@Subscribe
	public void onConfigChanged(final ConfigChanged event)
	{
		if (event.getGroup().equals("lootlogger"))
		{
			if (event.getKey().equals("enableUI"))
			{
				if (config.enableUI())
				{
					clientToolbar.addNavigation(navButton);
				}
				else
				{
					clientToolbar.removeNavigation(navButton);
				}
			}

			if (config.enableUI())
			{
				SwingUtilities.invokeLater(panel::refreshUI);
			}
		}
	}

	@Subscribe
	public void onGameStateChanged(final GameStateChanged event)
	{
		if (event.getGameState() == GameState.LOGGED_IN)
		{
			updateWriterUsername();
		}
	}

	private void updateWriterUsername()
	{
		// Check if we're already using this user as we are now updating the username on `LOGGED_IN` instead of `LOGGING_IN`
		// `LOGGED_IN` will be triggered after every `LOADING` state which happens much more frequently
		String folder = String.valueOf(client.getAccountHash());
		RuneScapeProfileType profileType = RuneScapeProfileType.getCurrent(client);
		if (profileType != RuneScapeProfileType.STANDARD)
		{
			folder += "-" + Text.titleCase(profileType);
		}

		if (folder.equalsIgnoreCase(writer.getName()))
		{
			return;
		}

		// If we aren't first attempt to migrate from the deprecated login name to the account hash
		String name = client.getUsername();
		if (name != null && name.length() > 0 && client.getAccountHash() != -1)
		{
			// We are using the accountHash as RL doesn't return a login name when ran through the Jagex launcher
			writer.renameUsernameFolderToAccountHash(name.toLowerCase(), client.getAccountHash());
		}

		if (writer.setPlayerUsername(folder))
		{
			localPlayerNameChanged();
		}
	}

	private void localPlayerNameChanged()
	{
		lootNames = writer.getKnownFileNames();
		if (config.enableUI())
		{
			SwingUtilities.invokeLater(panel::showSelectionView);
		}
	}

	private Collection<LTItemEntry> convertToLTItemEntries(Collection<ItemStack> stacks)
	{
		return stacks.stream().map(i -> createLTItemEntry(i.getId(), i.getQuantity())).collect(Collectors.toList());
	}

	private LTItemEntry createLTItemEntry(final int id, final int qty)
	{
		final ItemComposition c = itemManager.getItemComposition(id);
		final int realId = c.getNote() == -1 ? c.getId() : c.getLinkedNoteId();
		final int price = itemManager.getItemPrice(realId);
		return new LTItemEntry(c.getName(), id, qty, price);
	}

	private void addRecord(final LTRecord record)
	{
		writer.addLootTrackerRecord(record);
		lootNames.put(record.getType(), record.getName().toLowerCase());
		sessionData.put(record.getName().toLowerCase(), record);
		if (config.enableUI())
		{
			SwingUtilities.invokeLater(() -> panel.addLog(record));
		}
	}

	@Subscribe
	public void onLootReceived(final LootReceived event)
	{
		if (isInNightmareZone() && config.ignoreNmz())
		{
			return;
		}

		final Collection<LTItemEntry> drops = convertToLTItemEntries(event.getItems());

		if (gotPet)
		{
			final Pet p = Pet.getByBossName(event.getName());
			if (p != null)
			{
				gotPet = false;
				petTicks = 0;
				drops.add(createLTItemEntry(p.getPetID(), 1));
			}
		}

		int kc = killCountMap.getOrDefault(event.getName().toUpperCase(), -1);

		// Check aliases if they exist for kill counts
		BossTab tab = BossTab.getByName(event.getName());
		if (kc == -1 && tab != null && tab.getAliases().size() > 0) {
			for (final String alias : tab.getAliases()) {
				kc = killCountMap.getOrDefault(alias.toUpperCase(), -1);
				if (kc > 0) {
					break;
				}
			}
		}

		final LTRecord record = new LTRecord(event.getName(), event.getCombatLevel(), kc, event.getType(), drops, new Date());
		addRecord(record);
	}

	public Collection<LTRecord> getDataByName(LootRecordType type, String name)
	{
		final BossTab tab = BossTab.getByName(name);
		if (tab == null)
		{
			return writer.loadLootTrackerRecords(type, name);
		}

		final Collection<LTRecord> records = new ArrayList<>();
		for (final String alias : tab.getAliases()) {
			records.addAll(writer.loadLootTrackerRecords(type, alias));
		}

		return records;
	}

	/**
	 * Creates a loot log for this name and then attaches it to the UI when finished
	 * @param name record name
	 */
	public void requestLootLog(final LootRecordType type, final String name)
	{
		clientThread.invoke(() ->
		{
			if (name.equalsIgnoreCase(SESSION_NAME))
			{
				final LootLog log = new LootLog(Collections.emptyList(), name);
				for (final String key : sessionData.keySet())
				{
					log.getMinionLogs().add(new LootLog(sessionData.get(key), key));
				}

				SwingUtilities.invokeLater(() -> panel.useLog(log));
				return;
			}
			
			final Collection<LTRecord> records = getDataByName(type, name);
			final LootLog log = new LootLog(records, name);
			if (log.getType().equals(LootRecordType.UNKNOWN))
			{
				log.setType(type);
			}

			final BossTab tab = BossTab.getByName(name);
			if (tab != null && tab.getMinions().size() > 0)
			{
				for (final String minion : tab.getMinions())
				{
					final Collection<LTRecord> minionRecords = getDataByName(type, minion);
					final LootLog minionLog = new LootLog(minionRecords, minion);

					log.getMinionLogs().add(minionLog);
				}
			}

			SwingUtilities.invokeLater(() -> panel.useLog(log));
		});
	}

	public boolean clearStoredDataByName(final LootRecordType type, final String name)
	{
		if (name.equalsIgnoreCase(SESSION_NAME))
		{
			sessionData.clear();
			return true;
		}

		if (panel.getLootLog().getName().equalsIgnoreCase(SESSION_NAME))
		{
			sessionData.removeAll(name.toLowerCase());
			return true;
		}

		lootNames.remove(type, name);
		return writer.deleteLootTrackerRecords(type, name);
	}

	@Subscribe
	public void onWidgetLoaded(WidgetLoaded event)
	{
		if (event.getGroupId() != InterfaceID.DIALOG_SPRITE)
		{
			return;
		}

		Widget text = client.getWidget(ComponentID.DIALOG_SPRITE_TEXT);
		if (text != null && text.getText().toLowerCase().contains(SIRE_FONT_TEXT))
		{
			unsiredCheckCount = 0;
			unsiredReclaiming = true;
		}
	}

	@Subscribe
	public void onGameTick(GameTick t)
	{
		if (gotPet)
		{
			if (petTicks > MAX_PET_TICKS)
			{
				gotPet = false;
				petTicks = 0;
			}
			else
			{
				petTicks++;
			}
		}

		if (unsiredReclaiming)
		{
			if (hasUnsiredWidgetUpdated())
			{
				unsiredReclaiming = false;
				return;
			}

			unsiredCheckCount++;
			if (unsiredCheckCount >= MAX_TEXT_CHECK)
			{
				unsiredReclaiming = false;
			}
		}
	}

	// Handles checking for unsired loot reclamation
	private boolean hasUnsiredWidgetUpdated()
	{
		final Widget text = client.getWidget(ComponentID.DIALOG_SPRITE_TEXT);
		// Reclaimed an item?
		if (text != null && text.getText().toLowerCase().contains(SIRE_REWARD_TEXT))
		{
			final Widget sprite = client.getWidget(InterfaceID.DIALOG_SPRITE);
			if (sprite == null || sprite.getItemId() == -1)
			{
				return false;
			}

			log.debug("Unsired was exchanged for item ID: {}", sprite.getItemId());
			receivedUnsiredLoot(sprite.getItemId());
			return true;
		}

		return false;
	}

	// Handles adding the unsired loot to the tracker
	private void receivedUnsiredLoot(int itemID)
	{
		clientThread.invokeLater(() ->
		{
			Collection<LTRecord> data = getDataByName(LootRecordType.NPC, BossTab.ABYSSAL_SIRE.getName());
			ItemComposition c = itemManager.getItemComposition(itemID);
			LTItemEntry itemEntry = new LTItemEntry(c.getName(), itemID, 1, 0);

			log.debug("Received Unsired item: {}", c.getName());

			// Don't have data for sire, create a new record with just this data.
			if (data == null)
			{
				log.debug("No previous Abyssal sire loot, creating new loot record");
				LTRecord r = new LTRecord(BossTab.ABYSSAL_SIRE.getName(), 350, -1, LootRecordType.NPC, Collections.singletonList(itemEntry), new Date());
				addRecord(r);
				return;
			}

			log.debug("Adding drop to last abyssal sire loot record");
			// Add data to last kill count
			final List<LTRecord> items = new ArrayList<>(data);
			final LTRecord r = items.get(items.size() - 1);
			r.addDropEntry(itemEntry);
			writer.writeLootTrackerFile(BossTab.ABYSSAL_SIRE.getName(), items);
			if (config.enableUI())
			{
				SwingUtilities.invokeLater(panel::refreshUI);
			}
		});
	}

	public int convertToInt(String s)
	{
		try {
			return NUMBER_FORMATTER.parse(s).intValue();
		}
		catch (ParseException e)
		{
			return -1;
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		if (event.getType() != ChatMessageType.GAMEMESSAGE && event.getType() != ChatMessageType.SPAM)
		{
			return;
		}

		final String chatMessage = Text.removeTags(event.getMessage());

		if (PET_MESSAGES.contains(chatMessage))
		{
			gotPet = true;
		}

		// Check if message is for a clue scroll reward
		final Matcher m = CLUE_SCROLL_PATTERN.matcher(chatMessage);
		if (m.find())
		{
			final String eventType;
			switch (m.group(2).toLowerCase())
			{
				case "beginner":
					eventType = "Clue Scroll (Beginner)";
					break;
				case "easy":
					eventType = "Clue Scroll (Easy)";
					break;
				case "medium":
					eventType = "Clue Scroll (Medium)";
					break;
				case "hard":
					eventType = "Clue Scroll (Hard)";
					break;
				case "elite":
					eventType = "Clue Scroll (Elite)";
					break;
				case "master":
					eventType = "Clue Scroll (Master)";
					break;
				default:
					return;
			}

			final int killCount = convertToInt(m.group(1));
			killCountMap.put(eventType.toUpperCase(), killCount);
			return;
		}

		// Barrows KC
		if (chatMessage.startsWith("Your Barrows chest count is"))
		{
			Matcher n = NUMBER_PATTERN.matcher(chatMessage);
			if (n.find())
			{
				killCountMap.put("BARROWS", convertToInt(n.group()));
				return;
			}
		}

		// Raids KC
		if (chatMessage.startsWith("Your completed Chambers of Xeric count is"))
		{
			Matcher n = NUMBER_PATTERN.matcher(chatMessage);
			if (n.find())
			{
				killCountMap.put("CHAMBERS OF XERIC", convertToInt(n.group()));
				return;
			}
		}
		
		// Tob KC
		if (chatMessage.startsWith("Your completed Theatre of Blood count is"))
		{
			Matcher n = NUMBER_PATTERN.matcher(chatMessage);
			if (n.find())
			{
				killCountMap.put("THEATRE OF BLOOD", convertToInt(n.group()));
				return;
			}
		}

		// Handle the other bosses
		final Matcher boss = BOSS_NAME_NUMBER_PATTERN.matcher(chatMessage);
		if (boss.find())
		{
			final String bossName = boss.group(1);
			final int killCount = convertToInt(boss.group(2));
			killCountMap.put(bossName.toUpperCase(), killCount);
		}
	}

	/**
	 * Is the player inside the NMZ arena?
	 */
	private boolean isInNightmareZone()
	{
		if (client.getLocalPlayer() == null) {
			return false;
		}

		// It seems that KBD shares the map region with NMZ but NMZ is never in plane 0.
		return ArrayUtils.contains(client.getMapRegions(), NMZ_MAP_REGION) && client.getLocalPlayer().getWorldLocation().getPlane() > 0;
	}
}

package thestonedturtle.lootlogger;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;

@ConfigGroup("lootlogger")
public interface LootLoggerConfig extends Config
{
	@ConfigItem(
		keyName = "enableUI",
		name = "Enable Side-Panel",
		description = "Controls whether the side panel should be displayed, data will be logged either way"
	)
	default boolean enableUI()
	{
		return true;
	}

	@ConfigItem(
		position = 0,
		keyName = "uniquesPlacement",
		name = "Uniques Placement",
		description = "Where should unique items be displayed inside the UI"
	)
	default UniqueItemPlacement uniquesPlacement()
	{
		return UniqueItemPlacement.BOTH;
	}

	@ConfigItem(
		position = 1,
		keyName = "itemSortType",
		name = "Item Sorting",
		description = "Determines how items should be sorted inside the item breakdown"
	)
	default ItemSortTypes itemSortType()
	{
		return ItemSortTypes.VALUE;
	}

	@ConfigItem(
		position = 3,
		keyName = "bossButtons",
		name = "Show boss icons",
		description = "Toggles whether the selection screen will use the boss icons"
	)
	default boolean bossButtons()
	{
		return true;
	}

	@ConfigItem(
		position = 4,
		keyName = "ignoreNmz",
		name = "Ignore nightmare zone",
		description = "Whether to ignore loot received while inside Nightmare Zone"
	)
	default boolean ignoreNmz()
	{
		return true;
	}

	@ConfigItem(
		position = 5,
		keyName = "itemMissingAlpha",
		name = "Missing item opacity",
		description = "Controls the image opacity for unacquired unique items inside the uniques panel.<br/>0 is transparent and 100 is fully opaque. default value is 35"
	)
	@Range(max = 100)
	default int itemMissingAlpha() { return 35; }

	@ConfigItem(
		position = 6,
		keyName = "includeMinions",
		name = "Include Minions",
		description = "Toggles whether loot from minions will be included when looking at specific loot tabs, such as the GWD bosses"
	)
	default boolean includeMinions()
	{
		return true;
	}
}

/*
 * Copyright (c) 2018, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.lootlogger.ui;

import com.google.common.base.Strings;
import com.google.common.collect.HashMultimap;
import com.google.common.collect.Multimaps;
import com.google.common.collect.SetMultimap;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Collection;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.TreeSet;
import javax.annotation.Nullable;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import lombok.Getter;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.DynamicGridLayout;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.IconTextField;
import net.runelite.client.ui.components.materialtabs.MaterialTab;
import net.runelite.client.ui.components.materialtabs.MaterialTabGroup;
import net.runelite.client.util.AsyncBufferedImage;
import net.runelite.client.util.Text;
import net.runelite.http.api.loottracker.LootRecordType;
import org.apache.commons.text.similarity.JaroWinklerDistance;
import thestonedturtle.lootlogger.LootLoggerPlugin;
import thestonedturtle.lootlogger.data.BossTab;

class SelectionPanel extends JPanel
{
	private final static Color BACKGROUND_COLOR = ColorScheme.DARK_GRAY_COLOR;
	private final static Color BUTTON_COLOR = ColorScheme.DARKER_GRAY_COLOR;
	private final static Color BUTTON_HOVER_COLOR = ColorScheme.DARKER_GRAY_HOVER_COLOR;
	private static final JaroWinklerDistance DISTANCE = new JaroWinklerDistance();

	private final SetMultimap<LootRecordType, String> names;
	private final LootLoggerPanel parent;
	private final ItemManager itemManager;

	private final IconTextField searchBar = new IconTextField();
	@Getter
	private final JPanel namePanel = new JPanel();

	private boolean configToggle;

	SelectionPanel(
		final boolean configToggle,
		final SetMultimap<LootRecordType, String> names,
		final LootLoggerPanel parent,
		final ItemManager itemManager)
	{
		this.names = names == null ? HashMultimap.create() : names;
		this.parent = parent;
		this.itemManager = itemManager;
		this.configToggle = configToggle;

		this.setLayout(new GridBagLayout());
		this.setBackground(BACKGROUND_COLOR);

		searchBar.setIcon(IconTextField.Icon.SEARCH);
		searchBar.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH - 20, 30));
		searchBar.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		searchBar.setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
		searchBar.getDocument().addDocumentListener(new DocumentListener()
		{
			@Override
			public void insertUpdate(DocumentEvent e)
			{
				onSearchBarChanged();
			}

			@Override
			public void removeUpdate(DocumentEvent e)
			{
				onSearchBarChanged();
			}

			@Override
			public void changedUpdate(DocumentEvent e)
			{
				onSearchBarChanged();
			}
		});

		namePanel.setLayout(new GridBagLayout());

		createPanel();
	}

	private void createPanel()
	{
		final GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.HORIZONTAL;
		c.weightx = 1;
		c.gridx = 0;
		c.gridy = 0;
		c.insets = new Insets(5, 0, 0, 0);

		// Add Session Data
		this.add(createNamePanel(LootRecordType.UNKNOWN, LootLoggerPlugin.SESSION_NAME), c);
		c.gridy++;

		// Add the bosses tabs, by category, to tabGroup
		if (configToggle)
		{
			this.add(createBossTabPanel(), c);
			c.gridy++;
		}

		this.add(searchBar, c);
		c.gridy++;

		addNamesToPanel(this.names);
		this.add(namePanel, c);
	}

	private JPanel createBossTabPanel()
	{
		final GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.HORIZONTAL;
		c.weightx = 1;
		c.gridx = 0;
		c.gridy = 0;
		c.insets = new Insets(5, 0, 0, 0);

		final JPanel container = new JPanel(new GridBagLayout());
		container.setBorder(new EmptyBorder(0, 0, 10, 0));

		for (final String categoryName : BossTab.getCategories())
		{
			container.add(createTabCategory(categoryName), c);
			c.gridy++;
		}

		return container;
	}

	private void addNamesToPanel(final SetMultimap<LootRecordType, String> names)
	{
		namePanel.removeAll();

		final GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.HORIZONTAL;
		c.weightx = 1;
		c.gridx = 0;
		c.gridy = 0;
		c.insets = new Insets(0, 0, 4, 0);

		for (final LootRecordType type : LootRecordType.values())
		{
			if (!names.containsKey(type))
			{
				continue;
			}

			final JPanel section = createCollapseableSection(type, names.get(type));
			if (section != null)
			{
				namePanel.add(section, c);
				c.gridy++;
			}
		}

		namePanel.revalidate();
	}

	@Nullable
	private JPanel createCollapseableSection(final LootRecordType type, Set<String> names)
	{
		// Filter out boss tabs if the config toggle is enabled
		names = names.stream().filter((n) ->
		{
			if (!configToggle)
			{
				return true;
			}

			BossTab b = BossTab.getByName(n);
			return b == null || !b.getType().equals(type);
		}).collect(Collectors.toSet());
		if (names.size() == 0)
		{
			return null;
		}

		final JPanel container = new JPanel(new DynamicGridLayout(0, 1));
		final JPanel panel = new JPanel(new GridBagLayout());
		panel.setBorder(new EmptyBorder(0, 8, 0, 8));

		final JLabel headerLabel = new JLabel(Text.titleCase(type));
		headerLabel.setToolTipText("Click to toggle this section");
		headerLabel.setHorizontalAlignment(JLabel.CENTER);
		headerLabel.setBackground(BACKGROUND_COLOR);
		headerLabel.setBorder(BorderFactory.createCompoundBorder(
			BorderFactory.createEmptyBorder(4, 0, 2, 0),
			BorderFactory.createMatteBorder(0, 0, 2, 0, BUTTON_HOVER_COLOR)
		));
		headerLabel.setOpaque(true);
		headerLabel.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mouseEntered(MouseEvent e)
			{
				headerLabel.setBackground(BUTTON_HOVER_COLOR);
				panel.setBackground(BUTTON_HOVER_COLOR);
			}

			@Override
			public void mouseExited(MouseEvent e)
			{
				headerLabel.setBackground(BACKGROUND_COLOR);
				panel.setBackground(BACKGROUND_COLOR);
			}

			@Override
			public void mouseClicked(MouseEvent e)
			{
				panel.setVisible(!panel.isVisible());
				if (panel.isVisible())
				{
					container.add(panel);
				}
				else
				{
					container.remove(panel);
				}
				container.revalidate();
				container.repaint();
			}
		});
		container.add(headerLabel);

		final GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.HORIZONTAL;
		c.weightx = 1;
		c.gridx = 0;
		c.gridy = 0;
		c.insets = new Insets(2, 0, 2, 0);

		for (final String name : new TreeSet<>(names))
		{
			panel.add(createNamePanel(type, name), c);
			c.gridy++;
		}
		container.add(panel);
		
		return container;
	}

	private JPanel createNamePanel(final LootRecordType type, final String name)
	{
		final JPanel p = new JPanel();
		p.add(new JLabel(name));
		p.setBackground(BUTTON_COLOR);
		p.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mouseEntered(MouseEvent e)
			{
				p.setBackground(BUTTON_HOVER_COLOR);
			}

			@Override
			public void mouseExited(MouseEvent e)
			{
				p.setBackground(BUTTON_COLOR);
			}

			@Override
			public void mouseClicked(MouseEvent e)
			{
				parent.requestLootLog(type, name);
			}
		});

		return p;
	}

	// Creates all tabs for a specific category
	private JPanel createTabCategory(final String categoryName)
	{
		final JPanel container = new JPanel();
		container.setLayout(new GridBagLayout());
		container.setBorder(new EmptyBorder(0, 5, 0, 5));

		final GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.HORIZONTAL;
		c.weightx = 1;
		c.gridx = 0;
		c.gridy = 0;

		final MaterialTabGroup thisTabGroup = new MaterialTabGroup();
		thisTabGroup.setLayout(new GridLayout(0, 4, 7, 7));
		thisTabGroup.setBorder(new EmptyBorder(0, 0, 4, 0));

		final JLabel name = new JLabel(categoryName);
		name.setBorder(new EmptyBorder(8, 0, 0, 0));
		name.setForeground(Color.WHITE);
		name.setVerticalAlignment(SwingConstants.CENTER);

		final Collection<BossTab> categoryTabs = BossTab.getByCategoryName(categoryName);
		for (final BossTab tab : categoryTabs)
		{
			// Create tab (with hover effects/text)
			final MaterialTab materialTab = new MaterialTab("", thisTabGroup, null);
			materialTab.setName(tab.getName());
			materialTab.setToolTipText(tab.getName());
			materialTab.addMouseListener(new MouseAdapter()
			{
				@Override
				public void mouseEntered(MouseEvent e)
				{
					materialTab.setBackground(BUTTON_HOVER_COLOR);
				}

				@Override
				public void mouseExited(MouseEvent e)
				{
					materialTab.setBackground(BUTTON_COLOR);
				}
			});

			materialTab.setOnSelectEvent(() ->
			{
				parent.requestLootLog(tab.getType(), tab.getName());
				return true;
			});

			// Attach Icon to the Tab
			final AsyncBufferedImage image = itemManager.getImage(tab.getItemID());
			final Runnable resize = () ->
			{
				materialTab.setIcon(new ImageIcon(image.getScaledInstance(35, 35, Image.SCALE_SMOOTH)));
				materialTab.setOpaque(true);
				materialTab.setBackground(BUTTON_COLOR);
				materialTab.setHorizontalAlignment(SwingConstants.CENTER);
				materialTab.setVerticalAlignment(SwingConstants.CENTER);
				materialTab.setPreferredSize(new Dimension(35, 35));
			};
			image.onLoaded(resize);
			resize.run();

			thisTabGroup.addTab(materialTab);
		}

		container.add(name, c);
		c.gridy++;
		container.add(thisTabGroup, c);

		return container;
	}

	private void onSearchBarChanged()
	{
		final String text = searchBar.getText();
		if (Strings.isNullOrEmpty(text))
		{
			addNamesToPanel(this.names);
		}
		else
		{
			addNamesToPanel(filterNames(this.names, text));
		}
	}

	private SetMultimap<LootRecordType, String> filterNames(final SetMultimap<LootRecordType, String> nameMap, final String searchText)
	{
		final String[] searchTerms = searchText.toLowerCase().split(" ");
		return nameMap.entries().stream()
			.filter(entry -> matchesSearchTerm(entry.getValue(), searchTerms))
			.collect(Multimaps.toMultimap(
				Map.Entry::getKey,
				Map.Entry::getValue,
				HashMultimap::create
				)
			);
	}

	private static boolean matchesSearchTerm(final String name, final String[] terms)
	{
		for (final String term : terms)
		{
			if (Arrays.stream(name.toLowerCase().split(" ")).noneMatch((nameTerm ->
				nameTerm.contains(term) || DISTANCE.apply(nameTerm, term) > 0.9)))
			{
				return false;
			}
		}

		return true;
	}
}

/*
 * Copyright (c) 2018, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.lootlogger.ui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.MatteBorder;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.PluginErrorPanel;
import net.runelite.client.util.ImageUtil;
import net.runelite.http.api.loottracker.LootRecordType;
import thestonedturtle.lootlogger.LootLoggerPlugin;
import thestonedturtle.lootlogger.data.BossTab;
import thestonedturtle.lootlogger.data.LootLog;
import thestonedturtle.lootlogger.localstorage.LTRecord;

@Slf4j
public class LootLoggerPanel extends PluginPanel
{
	private static final BufferedImage ICON_DELETE;
	private static final BufferedImage ICON_REFRESH;
	private static final BufferedImage ICON_BACK;
	private static final BufferedImage ICON_REPLAY;

	private final static Color BACKGROUND_COLOR = ColorScheme.DARK_GRAY_COLOR;
	private final static Color BUTTON_HOVER_COLOR = ColorScheme.DARKER_GRAY_HOVER_COLOR;

	static
	{
		ICON_DELETE = ImageUtil.loadImageResource(LootLoggerPlugin.class, "delete-white.png");
		ICON_REFRESH = ImageUtil.loadImageResource(LootLoggerPlugin.class, "refresh-white.png");
		ICON_BACK = ImageUtil.loadImageResource(LootLoggerPlugin.class, "back-arrow-white.png");
		ICON_REPLAY = ImageUtil.loadImageResource(LootLoggerPlugin.class, "replay-white.png");
	}

	private final ItemManager itemManager;
	private final LootLoggerPlugin plugin;

	private LootPanel lootPanel;
	@Getter
	private LootLog lootLog;
	private SelectionPanel selectionPanel;

	public LootLoggerPanel(final ItemManager itemManager, final LootLoggerPlugin plugin)
	{
		super(false);
		this.itemManager = itemManager;
		this.plugin = plugin;

		this.setBackground(ColorScheme.DARK_GRAY_COLOR);
		this.setLayout(new BorderLayout());

		showSelectionView();
	}

	public void useLog(final LootLog log)
	{
		lootLog = log;
		showLootView();
	}

	public void requestLootLog(final LootRecordType type, final String name)
	{
		// For some reason removing all the components when there's a lot of names in the selectionPanel causes lag.
		// Removing them here seems to mitigate the lag
		if (selectionPanel != null)
		{
			selectionPanel.getNamePanel().removeAll();
		}

		plugin.requestLootLog(type, name);
	}

	// Loot Selection view
	public void showSelectionView()
	{
		this.removeAll();
		lootLog = null;
		lootPanel = null;

		final PluginErrorPanel errorPanel = new PluginErrorPanel();
		errorPanel.setBorder(new EmptyBorder(10, 25, 10, 25));
		errorPanel.setContent("Loot Logger", "Select the Activity, Player, or NPC you wish to view loot for");

		selectionPanel = new SelectionPanel(plugin.config.bossButtons(), plugin.getLootNames(), this, itemManager);

		this.add(errorPanel, BorderLayout.NORTH);
		this.add(wrapContainer(selectionPanel), BorderLayout.CENTER);

		this.revalidate();
		this.repaint();
	}

	// Loot breakdown view
	public void showLootView()
	{
		this.removeAll();
		selectionPanel = null;

		final JPanel title = createLootViewTitle();
		lootPanel = new LootPanel(lootLog, plugin.config, itemManager, (lootRecordType, name) -> {
			if (clearData(lootRecordType, name))
			{
				requestLootLog(lootRecordType, lootLog.getName());
			}
		});

		this.add(title, BorderLayout.NORTH);
		this.add(wrapContainer(lootPanel), BorderLayout.CENTER);

		this.revalidate();
		this.repaint();
	}

	// Title element for Loot breakdown view
	private JPanel createLootViewTitle()
	{
		final String name = lootLog.getName();
		final JPanel title = new JPanel();
		title.setBorder(new CompoundBorder(
				new EmptyBorder(10, 8, 8, 8),
				new MatteBorder(0, 0, 1, 0, Color.GRAY)
		));
		title.setLayout(new BorderLayout());
		title.setBackground(BACKGROUND_COLOR);

		final JPanel first = new JPanel();
		first.setBackground(BACKGROUND_COLOR);

		// Back Button
		final JLabel back = createIconLabel(ICON_BACK);
		back.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mouseClicked(MouseEvent e)
			{
				showSelectionView();
			}
		});
		back.setToolTipText("Back to selection screen");

		final JLabel text = new JLabel(name);
		text.setForeground(Color.WHITE);

		first.add(back);
		first.add(text);

		final JPanel second = new JPanel();
		second.setBackground(BACKGROUND_COLOR);

		// Refresh Data button
		final JLabel refresh = createIconLabel(ICON_REFRESH);
		refresh.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mouseClicked(MouseEvent e)
			{
				requestLootLog(lootLog.getType(), name);
			}
		});
		refresh.setToolTipText("Refresh panel");

		// Clear data button
		final JLabel clear = createIconLabel(ICON_DELETE);
		clear.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mouseClicked(MouseEvent e)
			{
				if (clearData(lootLog.getType(), name))
				{
					showSelectionView();
				}
			}
		});
		clear.setToolTipText("Clear stored data");

		// Clear data button
		final JLabel replay = createIconLabel(ICON_REPLAY);
		replay.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mouseClicked(MouseEvent e)
			{
				playbackLoot();
			}
		});
		replay.setToolTipText("Replay Loot");

		second.add(refresh);
		second.add(clear);
		second.add(replay);

		title.add(first, BorderLayout.WEST);
		title.add(second, BorderLayout.EAST);

		return title;
	}

	private JLabel createIconLabel(final BufferedImage icon)
	{
		final JLabel label = new JLabel();
		label.setIcon(new ImageIcon(icon));
		label.setOpaque(true);
		label.setBackground(BACKGROUND_COLOR);

		label.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mouseEntered(MouseEvent e)
			{
				label.setBackground(BUTTON_HOVER_COLOR);
			}

			@Override
			public void mouseExited(MouseEvent e)
			{
				label.setBackground(BACKGROUND_COLOR);
			}
		});

		return label;
	}

	// Wrap the panel inside a scroll pane
	private JScrollPane wrapContainer(final JPanel container)
	{
		final JPanel wrapped = new JPanel(new BorderLayout());
		wrapped.add(container, BorderLayout.NORTH);
		wrapped.setBackground(BACKGROUND_COLOR);

		final JScrollPane scroller = new JScrollPane(wrapped);
		scroller.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		scroller.getVerticalScrollBar().setPreferredSize(new Dimension(8, 0));
		scroller.setBackground(BACKGROUND_COLOR);

		return scroller;
	}

	// Clear stored data and return to selection screen
	private boolean clearData(final LootRecordType type, final String name)
	{
		// Confirm delete action
		final int delete = JOptionPane.showConfirmDialog(this.getRootPane(), "<html>Are you sure you want to clear all data for this tab?<br/>There is no way to undo this action.</html>", "Warning", JOptionPane.YES_NO_OPTION);
		if (delete == JOptionPane.YES_OPTION)
		{
			boolean deletedAtleastOne = plugin.clearStoredDataByName(type, name);

			final BossTab tab = BossTab.getByName(name);
			if (tab != null)
			{
				for (final String alias : tab.getAliases())
				{
					deletedAtleastOne |= plugin.clearStoredDataByName(type, alias);
				}
			}

			if (!deletedAtleastOne)
			{
				JOptionPane.showMessageDialog(this.getRootPane(), "Unable to clear stored data, please try again.");
				return false;
			}

			return true;
		}

		return false;
	}

	public void addLog(final LTRecord r)
	{
		// Account for aliases
		final BossTab tab = BossTab.getByName(r.getName());

		if (lootLog == null)
		{
			// Use tab name so when an alias is killed it shows the main boss tab
			requestLootLog(r.getType(), tab == null ? r.getName() : tab.getName());
		}
		else if (lootLog.getName().equalsIgnoreCase(r.getName()) || (tab != null && lootLog.getName().equalsIgnoreCase(tab.getName())))
		{
			lootPanel.addedRecord(r);
		}
		else if (lootLog.getName().equalsIgnoreCase(LootLoggerPlugin.SESSION_NAME)
			|| lootPanel.getMinionGridMap().containsKey(r.getName().toLowerCase())
			|| (tab != null && tab.getMinions().contains(r.getName().toLowerCase())))
		{
			lootPanel.addMinionRecord(r);
		}
	}

	// Refresh panel when config options are changed
	public void refreshUI()
	{
		log.debug("Refreshing UI");
		if (lootLog == null)
		{
			showSelectionView();
		}
		else
		{
			showLootView();
		}
	}

	private void playbackLoot()
	{
		if (lootPanel == null)
		{
			return;
		}

		// Create a new thread for this so it doesn't cause swing freezes
		final ScheduledExecutorService ex = Executors.newSingleThreadScheduledExecutor();
		if (lootLog != null)
		{
			ex.schedule(lootPanel::playback, 0, TimeUnit.SECONDS);
		}
	}
}

/*
 * Copyright (c) 2021, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.lootlogger.ui;

import java.awt.Color;
import java.awt.Dimension;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.FontManager;
import net.runelite.client.util.QuantityFormatter;

/**
 * Name above the loot grid that roughly matches the RuneLite Loot Tracker LootTrackerBox `logTitle` element
 */
public class LootGridName extends JPanel
{
	private static final int TITLE_PADDING = 5;
	private static final Border VISIBLE_BORDER = new EmptyBorder(7, 7, 7, 7);

	private final JLabel titleLabel = new JLabel();
	private final JLabel priceLabel = new JLabel();

	LootGridName(final String name, final int count, final long price)
	{
		this.setLayout(new BoxLayout(this, BoxLayout.X_AXIS));
		this.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());
		this.setBorder(VISIBLE_BORDER);

		titleLabel.setFont(FontManager.getRunescapeSmallFont());
		titleLabel.setForeground(Color.WHITE);
		// Set a size to make BoxLayout truncate the name
		titleLabel.setMinimumSize(new Dimension(1, titleLabel.getPreferredSize().height));
		this.add(titleLabel);

		this.add(Box.createHorizontalGlue());
		this.add(Box.createRigidArea(new Dimension(TITLE_PADDING, 0)));

		priceLabel.setFont(FontManager.getRunescapeSmallFont());
		priceLabel.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
		this.add(priceLabel);

		updateLabel(name, count, price);
	}

	void updateLabel(final String name, final int count, final long price)
	{
		titleLabel.setText(name + " x " + count);

		priceLabel.setText(QuantityFormatter.quantityToStackSize(price) + " gp");
		priceLabel.setToolTipText(QuantityFormatter.formatNumber(price) + " gp");
	}
}

/*
 * Copyright (c) 2021, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.lootlogger.ui;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.function.BiConsumer;
import javax.swing.BoxLayout;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import lombok.Getter;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.http.api.loottracker.LootRecordType;
import thestonedturtle.lootlogger.data.LootLog;
import thestonedturtle.lootlogger.localstorage.LTItemEntry;

public class NamedLootGrid extends JPanel
{
	private boolean isCollapsed = false;
	private final LootGridName namePanel;
	private final LootGrid grid;
	@Getter
	private long price;

	NamedLootGrid(final String name, final int count, final long price, final LootGrid grid,
				 final LootRecordType type, final BiConsumer<LootRecordType, String> clearData) {
		this.grid = grid;
		this.price = price;

		this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
		this.setBackground(ColorScheme.DARKER_GRAY_COLOR.darker());

		namePanel = new LootGridName(name, count, price);

		// Clear data popup-menu
		final JPopupMenu menu = new JPopupMenu();
		final JMenuItem delete = new JMenuItem("Clear stored data");
		delete.addActionListener(ev -> clearData.accept(type, name));
		menu.add(delete);
		namePanel.setComponentPopupMenu(menu);
		namePanel.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mouseClicked(MouseEvent e)
			{
				if (SwingUtilities.isRightMouseButton(e))
				{
					return;
				}

				changeCollapse();
			}
		});

		this.add(namePanel);
		this.add(grid);
	}

	void updateGrid(final LootLog log, final LTItemEntry[] itemsToDisplay, final ItemManager itemManager)
	{
		price = log.getLootValue(false);
		namePanel.updateLabel(log.getName(), log.getRecords().size(), price);

		grid.updateGrid(itemsToDisplay, itemManager);

		if (isCollapsed)
		{
			changeCollapse();
		}
	}

	void changeCollapse()
	{
		isCollapsed = !isCollapsed;
		grid.setVisible(!isCollapsed);

		// Copied from RuneLite's LootTrackerBox::applyDimmer
		for (Component component : namePanel.getComponents())
		{
			Color color = component.getForeground();
			component.setForeground(isCollapsed ? color.darker() : color.brighter());
		}
	}
}

/*
 * Copyright (c) 2018, TheStonedTurtle <www.github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.lootlogger.ui;

import java.awt.BorderLayout;
import java.awt.Color;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.border.Border;
import lombok.Getter;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.QuantityFormatter;

@Getter
class TextPanel extends JPanel
{
	private static final Color PANEL_BACKGROUND_COLOR = ColorScheme.DARKER_GRAY_COLOR;
	private static final Border PANEL_BORDER = BorderFactory.createMatteBorder(8, 15, 8, 0, PANEL_BACKGROUND_COLOR);

	private final JLabel textLabel = new JLabel("", SwingConstants.LEFT);
	private final JLabel valueLabel = new JLabel("", SwingConstants.LEFT);

	TextPanel()
	{
		this.setLayout(new BorderLayout());
		this.setBackground(PANEL_BACKGROUND_COLOR);
		this.setBorder(PANEL_BORDER);

		textLabel.setForeground(Color.WHITE);
		valueLabel.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 0));

		this.add(textLabel, BorderLayout.LINE_START);
		this.add(valueLabel, BorderLayout.CENTER);
	}

	// Long value should be for Total Value
	public void updatePanel(final String text, final long totalValue)
	{
		textLabel.setText(text);

		// Item Values (Colored off Total Value of item)
		valueLabel.setText(QuantityFormatter.quantityToStackSize(totalValue) + " gp");
		valueLabel.setForeground(getRSValueColor(totalValue));

		this.setToolTipText(QuantityFormatter.formatNumber(totalValue));
	}

	public void updatePanel(final String text, final int value)
	{
		textLabel.setText(text);
		valueLabel.setText(QuantityFormatter.formatNumber(value));
	}

	private static Color getRSValueColor(long val)
	{
		return (val >= 10000000) ? Color.GREEN : (val >= 100000) ? Color.WHITE : Color.YELLOW;
	}
}

/*
 * Copyright (c) 2018, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.lootlogger.ui;

import com.google.common.collect.ImmutableList;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.http.api.loottracker.LootRecordType;
import thestonedturtle.lootlogger.ItemSortTypes;
import thestonedturtle.lootlogger.LootLoggerConfig;
import thestonedturtle.lootlogger.LootLoggerPlugin;
import thestonedturtle.lootlogger.UniqueItemPlacement;
import thestonedturtle.lootlogger.data.LootLog;
import thestonedturtle.lootlogger.data.UniqueItem;
import thestonedturtle.lootlogger.localstorage.LTItemEntry;
import thestonedturtle.lootlogger.localstorage.LTRecord;

@Slf4j
class LootPanel extends JPanel
{
	private static final String CURRENT_KC = "Current Killcount:";
	private static final String KILLS_LOGGED = "Kills Logged:";
	private static final String TOTAL_VALUE = "Total Value:";
	private static final String TOTAL_KILLS = "Total Kills:";

	private final LootLog lootLog;
	private final LootLoggerConfig config;
	private final ItemManager itemManager;

	private boolean playbackPlaying = false;
	private boolean cancelPlayback = false;

	private final BiConsumer<LootRecordType, String> clearData;
	private final LootGrid lootGrid = new LootGrid();
	private final TextPanel currentKillcountPanel = new TextPanel();
	private final TextPanel killsLoggedPanel = new TextPanel();
	private final TextPanel totalValuePanel = new TextPanel();

	@Getter
	private final Map<String, NamedLootGrid> minionGridMap = new HashMap<>();
	private final Map<Integer, UniqueItemPanel> uniqueItemPanelMap = new HashMap<>();
	private final GridBagConstraints gridBagConstraints = new GridBagConstraints();

	LootPanel(
		final LootLog log,
		final LootLoggerConfig config,
		final ItemManager itemManager,
		final BiConsumer<LootRecordType, String> clearData)
	{
		this.lootLog = log;
		this.config = config;
		this.itemManager = itemManager;
		this.clearData = clearData;

		setLayout(new GridBagLayout());
		setBorder(new EmptyBorder(0, 10, 5, 10));
		setBackground(ColorScheme.DARK_GRAY_COLOR);

		gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1;
		gridBagConstraints.insets = new Insets(0, 0, 4, 0);
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;

		createPanel(log);
	}

	private void createPanel(final LootLog lootLog)
	{
		// Reset panel state
		currentKillcountPanel.setVisible(false);
		killsLoggedPanel.setVisible(false);
		totalValuePanel.setVisible(false);
		lootGrid.setVisible(false);
		minionGridMap.clear();
		uniqueItemPanelMap.clear();
		removeAll();
		gridBagConstraints.gridy = 0;

		// Create uniques panel
		if (!config.uniquesPlacement().equals(UniqueItemPlacement.ITEM_BREAKDOWN))
		{
			LootLog.recalculateUniques(lootLog, config.includeMinions());

			for (final int position : lootLog.getUniquePositionMap().keySet())
			{
				final Collection<UniqueItem> uniques = lootLog.getUniquePositionMap().get(position);

				final UniqueItemPanel p = new UniqueItemPanel(uniques, this.itemManager, this.config.itemMissingAlpha());
				uniqueItemPanelMap.put(position, p);
				add(p, gridBagConstraints);
				gridBagConstraints.gridy++;
			}
		}

		add(currentKillcountPanel, gridBagConstraints);
		gridBagConstraints.gridy++;

		add(killsLoggedPanel, gridBagConstraints);
		gridBagConstraints.gridy++;

		add(totalValuePanel, gridBagConstraints);
		gridBagConstraints.gridy++;

		add(lootGrid, gridBagConstraints);
		gridBagConstraints.gridy++;

		int killsLogged = lootLog.getRecords().size();
		if (killsLogged > 0)
		{
			killsLoggedPanel.updatePanel(KILLS_LOGGED, lootLog.getRecords().size());
			killsLoggedPanel.setVisible(true);

			final LTRecord entry = lootLog.getRecords().get(lootLog.getRecords().size() - 1);
			if (entry.getKillCount() != -1)
			{
				currentKillcountPanel.updatePanel(CURRENT_KC, entry.getKillCount());
				currentKillcountPanel.setVisible(true);
			}
		}

		// Include Main Loot
		updateMainLootGrid(lootLog);

		// Store Total Value
		long totalValue = lootLog.getLootValue(false);

		// Include Minion Loot
		if (config.includeMinions())
		{
			for (final LootLog log : lootLog.getMinionLogs())
			{
				if (log.getRecords().size() == 0)
				{
					continue;
				}
				killsLogged += log.getRecords().size();

				final NamedLootGrid namedGrid = createMinionGrid(log);
				minionGridMap.put(log.getName().toLowerCase(), namedGrid);
				add(namedGrid, gridBagConstraints);
				gridBagConstraints.gridy++;

				totalValue += namedGrid.getPrice();
			}
		}

		if (totalValue > 0)
		{
			totalValuePanel.updatePanel(TOTAL_VALUE, totalValue);
			totalValuePanel.setVisible(true);
		}

		// Change text and include minion kills for session data
		if (lootLog.getName().equalsIgnoreCase(LootLoggerPlugin.SESSION_NAME))
		{
			killsLoggedPanel.updatePanel(TOTAL_KILLS, killsLogged);
			killsLoggedPanel.setVisible(killsLogged > 0);
		}
	}

	private LTItemEntry[] getItemsToDisplay(final LootLog log)
	{
		final boolean hideUniques = config.uniquesPlacement().equals(UniqueItemPlacement.UNIQUES_PANEL);

		return log.getConsolidated()
			.values().stream()
			.filter(e -> !(hideUniques && lootLog.getUniqueIds().contains(e.getId())))
			.sorted(createLTItemEntryComparator(config.itemSortType()))
			.toArray(LTItemEntry[]::new);
	}

	private void updateMainLootGrid(final LootLog lootLog)
	{
		final LTItemEntry[] itemsToDisplay = getItemsToDisplay(lootLog);
		if (itemsToDisplay.length > 0)
		{
			lootGrid.updateGrid(itemsToDisplay, itemManager);
			lootGrid.setVisible(true);
		}
	}

	private NamedLootGrid createMinionGrid(final LootLog log)
	{
		final LTItemEntry[] itemsToDisplay = getItemsToDisplay(log);
		final LootGrid grid = new LootGrid(itemsToDisplay, itemManager);

		final long logValue = log.getLootValue(false);
		return new NamedLootGrid(log.getName(), log.getRecords().size(), logValue, grid, log.getType(), clearData);
	}

	private void updateMinionLog(final LootLog log)
	{
		final NamedLootGrid grid = minionGridMap.get(log.getName().toLowerCase());
		if (grid == null)
		{
			return;
		}

		final LTItemEntry[] itemsToDisplay = getItemsToDisplay(log);

		grid.updateGrid(log, itemsToDisplay, itemManager);
	}

	void addedRecord(final LTRecord record)
	{
		lootLog.addRecord(record);
		if (!playbackPlaying)
		{
			refreshPanel(lootLog, false);
		}
	}

	void addMinionRecord(final LTRecord record)
	{
		final LootLog minionLog = lootLog.getMinionLog(record.getName());
		if (minionLog == null)
		{
			final LootLog newMinionLog = new LootLog(ImmutableList.of(record), record.getName());
			lootLog.getMinionLogs().add(newMinionLog);

			final NamedLootGrid grid = createMinionGrid(newMinionLog);
			minionGridMap.put(newMinionLog.getName().toLowerCase(), grid);
			add(grid, gridBagConstraints);
			gridBagConstraints.gridy++;

			if (!playbackPlaying)
			{
				refreshPanel(lootLog, true);
			}
			return;
		}

		minionLog.addRecord(record);
		updateMinionLog(minionLog);

		if (!playbackPlaying)
		{
			refreshPanel(lootLog, true);
		}
	}

	public void refreshPanel(final LootLog lootLog, final boolean minionUpdate)
	{
		// Refresh Uniques panel data. Config option would prevent uniqueItemPanelMap from having anything.
		LootLog.recalculateUniques(lootLog, config.includeMinions());
		for (final Map.Entry<Integer, UniqueItemPanel> entry : uniqueItemPanelMap.entrySet())
		{
			final Collection<UniqueItem> uniques = lootLog.getUniquePositionMap().get(entry.getKey());
			entry.getValue().updatePanel(uniques, itemManager, config.itemMissingAlpha());
		}

		if (!minionUpdate)
		{
			updateMainLootGrid(lootLog);

			// Update KillCount
			if (lootLog.getRecords().size() > 0)
			{
				final LTRecord entry = lootLog.getRecords().get(lootLog.getRecords().size() - 1);
				currentKillcountPanel.updatePanel(CURRENT_KC, entry.getKillCount());
				currentKillcountPanel.setVisible(entry.getKillCount() != -1);
			}
		}

		// Update Total Value
		final long totalValue = lootLog.getLootValue(config.includeMinions());
		totalValuePanel.updatePanel(TOTAL_VALUE, totalValue);
		totalValuePanel.setVisible(totalValue > 0);

		// Update Kills Logged
		int killsLogged = lootLog.getRecords().size();
		if (lootLog.getName().equalsIgnoreCase(LootLoggerPlugin.SESSION_NAME))
		{
			killsLogged += lootLog.getMinionLogs()
				.stream()
				.mapToInt(l -> l.getRecords().size())
				.sum();
		}

		final String killsLoggedText = lootLog.getName().equalsIgnoreCase(LootLoggerPlugin.SESSION_NAME) ? TOTAL_KILLS : KILLS_LOGGED;
		killsLoggedPanel.updatePanel(killsLoggedText, killsLogged);
		killsLoggedPanel.setVisible(killsLogged > 0);
	}

	void playback()
	{
		if (playbackPlaying)
		{
			cancelPlayback = true;
			return;
		}

		playbackPlaying = true;

		if (lootLog.getRecords().size() > 0)
		{
			final LootLog tempLog = new LootLog(new ArrayList<>(), lootLog.getName());
			for (final LTRecord r : lootLog.getRecords())
			{
				tempLog.addRecord(r);

				if (tempLog.getRecords().size() == 1)
				{
					SwingUtilities.invokeLater(() -> createPanel(tempLog));
				}
				else if (tempLog.getRecords().size() == lootLog.getRecords().size())
				{
					cancelPlayback = true;
				}
				else
				{
					SwingUtilities.invokeLater(() -> refreshPanel(tempLog, false));
				}

				try
				{
					if (cancelPlayback)
					{
						playbackPlaying = false;
						cancelPlayback = false;
						SwingUtilities.invokeLater(() -> createPanel(lootLog));
						break;
					}

					// TODO: Allow this rate to be configurable?
					Thread.sleep(250);
				}
				catch (InterruptedException e)
				{
					log.warn(e.getMessage());
				}
			}
		}

		playbackPlaying = false;
	}

	/**
	 * Sorts the collection of LTItemEntry based on the selected {@link ItemSortTypes}
	 * @param sortType The {@link ItemSortTypes} describing how these entries should be sorted
	 * @return returns the sorted list
	 */
	private static Comparator<LTItemEntry> createLTItemEntryComparator(final ItemSortTypes sortType)
	{
		return (o1, o2) ->
		{
			switch (sortType)
			{
				case ITEM_ID:
					return o1.getId() - o2.getId();
				case PRICE:
					if (o1.getPrice() != o2.getPrice())
					{
						return o1.getPrice() > o2.getPrice() ? -1 : 1;
					}
					break;
				case VALUE:
					if (o1.getTotal() != o2.getTotal())
					{
						return o1.getTotal() > o2.getTotal() ? -1 : 1;
					}
					break;
				case ALPHABETICAL:
					// Handled below
					break;
				default:
					log.warn("Sort Type not being handled correctly, defaulting to alphabetical.");
					break;
			}

			// Default to alphabetical
			return o1.getName().compareTo(o2.getName());
		};
	}
}

/*
 * Copyright (c) 2018, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.lootlogger.ui;

import java.awt.Dimension;
import java.awt.GridLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.util.QuantityFormatter;
import thestonedturtle.lootlogger.localstorage.LTItemEntry;

/**
 * Displays an array of {@link LTItemEntry} in a grid with a max of 5 items (columns) per row
 */
class LootGrid extends JPanel
{
	private static final int ITEMS_PER_ROW = 5;
	private static final Dimension ITEM_SIZE = new Dimension(40, 40);

	LootGrid()
	{
	}

	LootGrid(final LTItemEntry[] itemsToDisplay, final ItemManager itemManager)
	{
		updateGrid(itemsToDisplay, itemManager);
	}

	public void updateGrid(final LTItemEntry[] itemsToDisplay, final ItemManager itemManager)
	{
		removeAll();

		// Calculates how many rows need to be display to fit all items
		final int rowSize = ((itemsToDisplay.length % ITEMS_PER_ROW == 0) ? 0 : 1) + itemsToDisplay.length / ITEMS_PER_ROW;
		setLayout(new GridLayout(rowSize, ITEMS_PER_ROW, 1, 1));

		// Create stacked items from the item list, calculates total price and then displays all the items in the UI.
		for (int i = 0; i < rowSize * ITEMS_PER_ROW; i++)
		{
			final JPanel slot = new JPanel();
			slot.setLayout(new GridLayout(1, 1, 0, 0));
			slot.setBackground(ColorScheme.DARKER_GRAY_COLOR);
			slot.setPreferredSize(ITEM_SIZE);
			if (i < itemsToDisplay.length)
			{
				final LTItemEntry item = itemsToDisplay[i];
				if (item == null)
				{
					continue;
				}
				final JLabel itemLabel = new JLabel();
				itemLabel.setToolTipText(buildToolTip(item));
				itemLabel.setVerticalAlignment(SwingConstants.CENTER);
				itemLabel.setHorizontalAlignment(SwingConstants.CENTER);
				itemManager.getImage(item.getId(), item.getQuantity(), item.getQuantity() > 1).addTo(itemLabel);
				slot.add(itemLabel);
			}

			add(slot);
		}

		repaint();
	}

	private static String buildToolTip(final LTItemEntry item)
	{
		final String name = item.getName();
		final int quantity = item.getQuantity();
		final long price = item.getPrice();

		return "<html>" + name + " x " + QuantityFormatter.formatNumber(quantity)
			+ "<br/>Price: " + QuantityFormatter.quantityToStackSize(price)
			+ "<br/>Total: " + QuantityFormatter.quantityToStackSize(quantity * price) +	"</html>";
	}
}

/*
 * Copyright (c) 2018, TheStonedTurtle <www.github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.lootlogger.ui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.image.BufferedImage;
import java.util.Collection;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import lombok.Getter;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.util.AsyncBufferedImage;
import net.runelite.client.util.ImageUtil;
import net.runelite.client.util.QuantityFormatter;
import thestonedturtle.lootlogger.data.UniqueItem;

@Getter
class UniqueItemPanel extends JPanel
{
	final JPanel panel = new JPanel();

	UniqueItemPanel(final Collection<UniqueItem> items, final ItemManager itemManager, final int itemMissingAlpha)
	{
		this.setLayout(new BorderLayout());
		this.setBackground(ColorScheme.DARKER_GRAY_COLOR);
		this.setBorder(new EmptyBorder(3, 0, 3, 0));
		this.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH - 10, 40));

		panel.setLayout(new GridBagLayout());
		panel.setBackground(ColorScheme.DARKER_GRAY_COLOR);

		this.add(panel, BorderLayout.NORTH);

		updatePanel(items, itemManager, itemMissingAlpha);
	}

	public void updatePanel(final Collection<UniqueItem> items, final ItemManager itemManager, final int itemMissingAlpha)
	{
		panel.removeAll();
		float alphaMissing = itemMissingAlpha / 100f;

		GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.BOTH;
		c.weightx = 1;
		c.gridx = 0;
		c.gridy = 0;
		c.ipady = 5;

		// Add each Unique Item icon to the panel
		for (final UniqueItem l : items)
		{
			final int quantity = l.getQty();
			final AsyncBufferedImage image = itemManager.getImage(l.getItemID(), quantity, quantity > 1);

			final float alpha = (quantity > 0 ? 1.0f : alphaMissing);
			final BufferedImage opaque = ImageUtil.alphaOffset(image, alpha);

			final JLabel icon = new JLabel();
			icon.setToolTipText(buildToolTip(l, quantity));
			icon.setIcon(new ImageIcon(opaque));
			icon.setVerticalAlignment(SwingConstants.CENTER);
			icon.setHorizontalAlignment(SwingConstants.CENTER);
			panel.add(icon, c);
			c.gridx++;

			// in case the image is blank we will refresh it upon load
			// Should only trigger if image hasn't been added
			image.onLoaded(() ->
			{
				icon.setIcon(new ImageIcon(ImageUtil.alphaOffset(image, alpha)));
				icon.revalidate();
				icon.repaint();
			});
		}
	}

	private static String buildToolTip(final UniqueItem item, final int qty)
	{
		String s = "<html>" + item.getName();
		if (qty > 0)
		{
			s += " x " + QuantityFormatter.formatNumber(qty);
		}
		if (item.getPrice() > 0)
		{
			s += "<br/>Price: " + QuantityFormatter.quantityToStackSize(item.getPrice());
			// Check for qty here as well as we should only show Total if the item has a value as well
			if (qty > 0)
			{
				s += "<br/>Total: " + QuantityFormatter.quantityToStackSize(qty * item.getPrice()) + "</html";
			}
		}
		s += "</html>";

		return s;
	}
}

/*
 * Copyright (c) 2018, TheStonedTurtle <www.github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.lootlogger.localstorage;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class LTItemEntry
{
	public final String name;
	public final int id;
	public int quantity;
	public long price;

	public long getTotal()
	{
		return this.quantity * this.price;
	}
}

/*
 * Copyright (c) 2018, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.lootlogger.localstorage;

import com.google.common.collect.HashMultimap;
import com.google.common.collect.SetMultimap;
import com.google.gson.Gson;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.inject.Inject;
import javax.inject.Singleton;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import static net.runelite.client.RuneLite.RUNELITE_DIR;
import net.runelite.http.api.RuneLiteAPI;
import net.runelite.http.api.loottracker.LootRecordType;

/**
 * Reads & Writes LootRecord data from `*name*.log` files located in `.runelite/loots/`.
 * Data is stored as json delimited by newlines, aka JSON Lines {@see <a href="http://jsonlines.org">http://jsonlines.org</a>}
 */
@Slf4j
@Singleton
public class LootRecordWriter
{
	private static final String FILE_EXTENSION = ".log";
	private static final File LOOT_RECORD_DIR = new File(RUNELITE_DIR, "loots");

	// Data is stored in a folder with the players username (login name)
	private File playerFolder = LOOT_RECORD_DIR;
	// Data is separated into sub-folders by event type to prevent issues.
	private final Map<LootRecordType, File> eventFolders = new HashMap<>();
	@Setter
	@Getter
	private String name;

	// The default date format does not allow migrating between Java 17 and Java 20+ (in either direction)
	// Java 20+ uses unicode character U+202f while java 17- use a normal space before the AM/PM part of the date string
	// This date adapter will attempt to match between both variants but will always write with a space
	private final Gson CUSTOM_GSON = RuneLiteAPI.GSON.newBuilder()
		.registerTypeAdapter(Date.class, new LootRecordDateAdapter())
		.create();

	@Inject
	public LootRecordWriter()
	{
		LOOT_RECORD_DIR.mkdir();
	}

	public boolean setPlayerUsername(final String username)
	{
		if (username.equalsIgnoreCase(name))
		{
			return false;
		}

		playerFolder = new File(LOOT_RECORD_DIR, username);
		playerFolder.mkdir();
		name = username;
		createSubFolders();
		return true;
	}

	private void createSubFolders()
	{
		eventFolders.clear();
		for (final LootRecordType type : LootRecordType.values())
		{
			final File folder = new File(playerFolder, type.name().toLowerCase());
			folder.mkdir();
			eventFolders.put(type, folder);
		}
	}

	private static String npcNameToFileName(final String npcName)
	{
		return npcName.toLowerCase().trim() + FILE_EXTENSION;
	}

	public SetMultimap<LootRecordType, String> getKnownFileNames()
	{
		final SetMultimap<LootRecordType, String> fileNames = HashMultimap.create();

		for (final Map.Entry<LootRecordType, File> entry : eventFolders.entrySet())
		{
			final File[] files = entry.getValue().listFiles((dir, name) -> name.endsWith(FILE_EXTENSION));
			if (files != null)
			{
				for (final File f : files)
				{
					fileNames.put(entry.getKey(), f.getName().replace(FILE_EXTENSION, ""));
				}
			}
		}

		return fileNames;
	}

	public synchronized Collection<LTRecord> loadLootTrackerRecords(LootRecordType recordType, String npcName)
	{
		final String fileName = npcNameToFileName(npcName);
		final File file = new File(eventFolders.get(recordType), fileName);
		final Collection<LTRecord> data = new ArrayList<>();

		try (final BufferedReader br = new BufferedReader(new FileReader(file)))
		{
			String line;
			while ((line = br.readLine()) != null)
			{
				// Skips the empty line at end of file
				if (line.length() > 0)
				{
					final LTRecord r = CUSTOM_GSON.fromJson(line, LTRecord.class);
					data.add(r);
				}
			}

		}
		catch (FileNotFoundException e)
		{
			log.debug("File not found: {}", fileName);
		}
		catch (IOException e)
		{
			log.warn("IOException for file {}: {}", fileName, e.getMessage());
		}

		return data;
	}

	public synchronized boolean addLootTrackerRecord(LTRecord rec)
	{
		// Grab file
		final String fileName = npcNameToFileName(rec.getName());
		final File lootFile = new File(eventFolders.get(rec.getType()), fileName);

		// Convert entry to JSON
		final String dataAsString = CUSTOM_GSON.toJson(rec);

		// Open File in append mode and write new data
		try
		{
			final BufferedWriter file = new BufferedWriter(new FileWriter(String.valueOf(lootFile), true));
			file.append(dataAsString);
			file.newLine();
			file.close();
			return true;
		}
		catch (IOException ioe)
		{
			log.warn("Error writing loot data to file {}: {}", fileName, ioe.getMessage());
			return false;
		}
	}

	public synchronized boolean deleteLootTrackerRecords(final LootRecordType type, String npcName)
	{
		final String fileName = npcNameToFileName(npcName);
		final File lootFile = new File(eventFolders.get(type), fileName);

		if (lootFile.delete())
		{
			log.debug("Deleted loot file: {}", fileName);
			return true;
		}
		else
		{
			log.debug("Couldn't delete file: {}", fileName);
			return false;
		}
	}

	/**
	 * Writes an entire log file based on the passed collection.
	 * Used when you need to adjust previous data and not just append, such as receiving a pet.
 	 */
	public synchronized boolean writeLootTrackerFile(final String npcName, final Collection<LTRecord> loots)
	{
		final String fileName = npcNameToFileName(npcName);
		final File lootFile = new File(playerFolder, fileName);

		try
		{
			final BufferedWriter file = new BufferedWriter(new FileWriter(String.valueOf(lootFile), false));
			for (final LTRecord rec : loots)
			{
				// Convert entry to JSON
				final String dataAsString = CUSTOM_GSON.toJson(rec);
				file.append(dataAsString);
				file.newLine();
			}
			file.close();

			return true;
		}
		catch (IOException ioe)
		{
			log.warn("Error rewriting loot data to file {}: {}", fileName, ioe.getMessage());
			return false;
		}
	}

	public synchronized boolean renameUsernameFolderToAccountHash(final String username, final long hash)
	{
		final File usernameDir = new File(LOOT_RECORD_DIR, username);
		if (!usernameDir.exists())
		{
			log.debug("Already rewritten");
			return true;
		}

		final File hashDir = new File(LOOT_RECORD_DIR, String.valueOf(hash));
		if (hashDir.exists())
		{
			log.warn("Can't rename username folder to account hash as the folder for this account hash already exists."
				+ " This was most likely caused by running RL through the Jagex launcher before the migration code was added");
			log.warn("Username: {} | AccountHash: {}", username, hash);
			return false;
		}

		return usernameDir.renameTo(hashDir);
	}
}

/*
 * Copyright (c) 2023, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.lootlogger.localstorage;

import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import lombok.extern.slf4j.Slf4j;

/**
 * This class is needed because at some point after Java 17 but including Java 20 the default date format changed
 * For Java 17- it uses a normal space between the AM/PM while in Java 20+ the unicode character U+202f is used
 * This adapter checks to see if the unicode character is within the date and will use the proper GSON object for parsing it
 */
@Slf4j
public class LootRecordDateAdapter extends TypeAdapter<Date>
{
	private final SimpleDateFormat SPACE_FORMAT = new SimpleDateFormat("MMM d, yyyy, h:mm:ss aaa");
	private final SimpleDateFormat UNICODE_FORMAT = new SimpleDateFormat("MMM d, yyyy, h:mm:ss\u202Faaa");

	@Override
	public void write(JsonWriter out, Date value) throws IOException
	{
		if (value == null) {
			out.nullValue();
			return;
		}

		out.value(SPACE_FORMAT.format(value));
	}

	@Override
	public Date read(JsonReader reader) throws IOException {
		if (reader.peek() == JsonToken.NULL) {
			reader.nextNull();
			return null;
		}

		String date = reader.nextString();
		try
		{
			if (date.contains("\u202F"))
			{
				return UNICODE_FORMAT.parse(date);
			}

			return SPACE_FORMAT.parse(date);
		}
		catch (ParseException e)
		{
			log.error("Error parsing LootRecord date value: {}", date);
			e.printStackTrace();
			return null;
		}
	}

}

/*
 * Copyright (c) 2018, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.lootlogger.localstorage;

import java.util.Collection;
import java.util.Date;
import lombok.AllArgsConstructor;
import lombok.Data;
import net.runelite.http.api.loottracker.LootRecordType;

@Data
@AllArgsConstructor
public class LTRecord
{
	public final String name;
	public final int level;
	public final int killCount;
	public LootRecordType type;
	public final Collection<LTItemEntry> drops;
	public Date date;

	public void addDropEntry(LTItemEntry itemEntry)
	{
		drops.add(itemEntry);
	}
}

