package com.skeldoor;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AmazeingChestPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AmazeingChestPlugin.class);
		RuneLite.main(args);
	}
}
package com.skeldoor;

import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.*;

import javax.inject.Inject;
import java.awt.*;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;

public class AmazeingChestOverlay extends Overlay {

    private final Client client;
    private final AmazeingChestPlugin plugin;
    private static final Font FONT = FontManager.getRunescapeFont().deriveFont(Font.BOLD, 16);
    private static final int MAX_DISTANCE = 2400;
    private List<MazeChest> mazeChests = new ArrayList<>();

    @Inject
    private AmazeingChestOverlay(Client client, AmazeingChestPlugin plugin)
    {
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
        setPriority(OverlayPriority.HIGHEST);
        this.client = client;
        this.plugin = plugin;
    }

    public void addMazeChest(MazeChest mazeChest){
        mazeChests.add(mazeChest);
    }

    public void removeMazeChest(WorldPoint loc){
        mazeChests.removeIf(mazeChest -> mazeChest.getLocation().equals(loc));
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        graphics.setFont(FONT);
        graphics.setColor(plugin.overlayColour());
        for (MazeChest mazeChest : mazeChests){
            renderGameObjects(graphics, mazeChest, client);
        }
        return null;
    }

    private void renderGameObjects(Graphics2D graphics, MazeChest mazeChest, Client client)
    {
        if (mazeChest != null && mazeChest.getLocation() != null)
        {
            Player player = client.getLocalPlayer();
            LocalPoint mazeChestLocal = LocalPoint.fromWorld(client, mazeChest.getLocation());
            if (mazeChestLocal != null && player.getLocalLocation().distanceTo(mazeChestLocal) <= MAX_DISTANCE)
            {
                StringBuilder stringBuilder = new StringBuilder();
                long despawnTimeMillis = mazeChest.getDespawnTime().toEpochMilli() - Instant.now().toEpochMilli();
                String timerText = String.format("%.0fs", despawnTimeMillis / 1000f);
                stringBuilder.append("Closing in ").append(timerText);
                OverlayUtil.renderTileOverlay(graphics, mazeChest.getGameObject(), stringBuilder.toString(), plugin.overlayColour());
            }
        }
    }
}

package com.skeldoor;

import net.runelite.api.GameObject;
import net.runelite.api.coords.WorldPoint;

import java.time.Duration;
import java.time.Instant;

public class MazeChest {
    private static final Duration CHEST_OPEN_TIME = Duration.ofMinutes(1);

    private WorldPoint location;
    private Instant spawnTime;
    private GameObject gameObject;

    MazeChest(GameObject obj, WorldPoint loc, Instant time){
        this.gameObject = obj;
        this.location = loc;
        this.spawnTime = time;
    }

    GameObject getGameObject(){
        return gameObject;
    }

    Instant getSpawnTime(){
        return spawnTime;
    }

    Instant getDespawnTime(){
        return spawnTime.plus(CHEST_OPEN_TIME);
    }

    WorldPoint getLocation(){
        return location;
    }
}

package com.skeldoor;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

import java.awt.*;

@ConfigGroup("AmazeingChest")
public interface AmazeingChestConfig extends Config
{
    @ConfigItem(
            keyName = "sendNotification",
            name = "Send Notification",
            description = "Sends you a notification a the chest closes"
    )
    default boolean sendNotification()
    {
        return true;
    }

    @ConfigItem(
            keyName = "overlayColour",
            name = "Overlay Colour",
            description = "Change the colour of the overlay displayed"
    )
    default Color overlayColour()
    {
        return Color.green;
    }
}

package com.skeldoor;

import javax.inject.Inject;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.events.GameObjectDespawned;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.client.Notifier;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.awt.*;
import java.time.Instant;

@Slf4j
@PluginDescriptor(
	name = "Amazeing Chest",
	description = "Shows how long until a maze random chest closes"
)
public class AmazeingChestPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private AmazeingChestOverlay overlay;

	@Inject
	private AmazeingChestConfig config;

	@Inject
	private Notifier notifier;

	private final int openedChestId = 14988;

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
	}

	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned gameObjectSpawned){
		if (gameObjectSpawned.getGameObject().getId() == openedChestId){
			MazeChest mazeChest = new MazeChest(gameObjectSpawned.getGameObject(), gameObjectSpawned.getGameObject().getWorldLocation(), Instant.now());
			overlay.addMazeChest(mazeChest);
		}
	}

	@Subscribe
	public void onGameObjectDespawned(GameObjectDespawned gameObjectDespawned){
		if (gameObjectDespawned.getGameObject().getId() == openedChestId){
			overlay.removeMazeChest(gameObjectDespawned.getGameObject().getWorldLocation());
			if (config.sendNotification()) notifier.notify("Maze random chest closed");
		}
	}

	public Color overlayColour(){
		return config.overlayColour();
	}

	@Provides
	AmazeingChestConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(AmazeingChestConfig.class);
	}
}

