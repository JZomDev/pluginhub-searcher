/*
 * Copyright (c) 2020, Jordan Atwood <nightfirecat@protonmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package at.nightfirec.fightcavewaves;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Guice;
import com.google.inject.testing.fieldbinder.Bind;
import com.google.inject.testing.fieldbinder.BoundFieldModule;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;
import javax.inject.Inject;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.RuneLite;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.externalplugins.ExternalPluginManager;
import net.runelite.client.ui.overlay.OverlayManager;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import static org.mockito.Mockito.when;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class FightCaveWavesPluginTest
{
	@Mock
	@Bind
	private Client client;

	@Mock
	@Bind
	private FightCaveWavesConfig config;

	@Mock
	@Bind
	private ScheduledExecutorService executor;

	@Mock
	@Bind
	private ConfigManager configManager;

	@Mock
	@Bind
	private OverlayManager overlayManager;

	@Inject
	private FightCaveWavesPlugin plugin;

	private static final GameStateChanged LOGGED_IN = new GameStateChanged();

	static
	{
		LOGGED_IN.setGameState(GameState.LOGGED_IN);
	}

	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(FightCaveWavesPlugin.class);
		RuneLite.main(args);
	}

	@Before
	public void before()
	{
		Guice.createInjector(BoundFieldModule.of(this)).injectMembers(this);
	}

	@Test
	public void checkFightCaveWaves()
	{
		final List<Map<WaveMonster, Integer>> waves = FightCaveWavesPlugin.getFIGHT_CAVE_WAVES();

		assertEquals(FightCaveWavesPlugin.MAX_FIGHT_CAVE_WAVE, waves.size());

		assertEquals(ImmutableMap.of(FightCaveMonster.TZ_KIH, 1), waves.get(0));
		assertEquals(ImmutableMap.of(FightCaveMonster.TZ_KIH, 2), waves.get(1));
		assertEquals(ImmutableMap.of(FightCaveMonster.TZ_KEK, 1), waves.get(2));

		assertEquals(ImmutableMap.of(FightCaveMonster.TZ_KEK, 1, FightCaveMonster.TZ_KIH, 2), waves.get(4));
		assertEquals(ImmutableMap.of(FightCaveMonster.TZ_KEK, 2), waves.get(5));
		assertEquals(ImmutableMap.of(FightCaveMonster.TOK_XIL, 1), waves.get(6));

		assertEquals(ImmutableMap.of(FightCaveMonster.TOK_XIL, 1, FightCaveMonster.TZ_KEK, 1, FightCaveMonster.TZ_KIH, 2), waves.get(11));
		assertEquals(ImmutableMap.of(FightCaveMonster.TOK_XIL, 1, FightCaveMonster.TZ_KEK, 2), waves.get(12));
		assertEquals(ImmutableMap.of(FightCaveMonster.TOK_XIL, 2), waves.get(13));
		assertEquals(ImmutableMap.of(FightCaveMonster.YT_MEJKOT, 1), waves.get(14));

		assertEquals(ImmutableMap.of(FightCaveMonster.YT_MEJKOT, 1, FightCaveMonster.TOK_XIL, 1, FightCaveMonster.TZ_KEK, 1, FightCaveMonster.TZ_KIH, 2), waves.get(26));
		assertEquals(ImmutableMap.of(FightCaveMonster.YT_MEJKOT, 1, FightCaveMonster.TOK_XIL, 1, FightCaveMonster.TZ_KEK, 2), waves.get(27));
		assertEquals(ImmutableMap.of(FightCaveMonster.YT_MEJKOT, 1, FightCaveMonster.TOK_XIL, 2), waves.get(28));
		assertEquals(ImmutableMap.of(FightCaveMonster.YT_MEJKOT, 2), waves.get(29));
		assertEquals(ImmutableMap.of(FightCaveMonster.KET_ZEK, 1), waves.get(30));

		assertEquals(ImmutableMap.of(FightCaveMonster.KET_ZEK, 1, FightCaveMonster.YT_MEJKOT, 1, FightCaveMonster.TOK_XIL, 1, FightCaveMonster.TZ_KEK, 1, FightCaveMonster.TZ_KIH, 2), waves.get(57));
		assertEquals(ImmutableMap.of(FightCaveMonster.KET_ZEK, 1, FightCaveMonster.YT_MEJKOT, 1, FightCaveMonster.TOK_XIL, 1, FightCaveMonster.TZ_KEK, 2), waves.get(58));
		assertEquals(ImmutableMap.of(FightCaveMonster.KET_ZEK, 1, FightCaveMonster.YT_MEJKOT, 1, FightCaveMonster.TOK_XIL, 2), waves.get(59));
		assertEquals(ImmutableMap.of(FightCaveMonster.KET_ZEK, 1, FightCaveMonster.YT_MEJKOT, 2), waves.get(60));
		assertEquals(ImmutableMap.of(FightCaveMonster.KET_ZEK, 2), waves.get(61));
		assertEquals(ImmutableMap.of(FightCaveMonster.TZTOK_JAD, 1), waves.get(62));
	}

	@Test
	public void checkInfernoWaves()
	{
		final List<Map<WaveMonster, Integer>> waves = FightCaveWavesPlugin.getINFERNO_WAVES();

		assertEquals(FightCaveWavesPlugin.MAX_INFERNO_WAVE, waves.size());

		assertEquals(ImmutableMap.of(InfernoMonster.JAL_NIB, 3, InfernoMonster.JAL_MEJRAH, 1), waves.get(0));
		assertEquals(ImmutableMap.of(InfernoMonster.JAL_NIB, 3, InfernoMonster.JAL_MEJRAH, 2), waves.get(1));
		assertEquals(ImmutableMap.of(InfernoMonster.JAL_NIB, 6), waves.get(2));
		assertEquals(ImmutableMap.of(InfernoMonster.JAL_NIB, 3, InfernoMonster.JAL_AK, 1), waves.get(3));
		assertEquals(ImmutableMap.of(InfernoMonster.JAL_NIB, 3, InfernoMonster.JAL_AK, 1, InfernoMonster.JAL_MEJRAH, 1), waves.get(4));
		assertEquals(ImmutableMap.of(InfernoMonster.JAL_NIB, 3, InfernoMonster.JAL_AK, 1, InfernoMonster.JAL_MEJRAH, 2), waves.get(5));
		assertEquals(ImmutableMap.of(InfernoMonster.JAL_NIB, 3, InfernoMonster.JAL_AK, 2), waves.get(6));
		assertEquals(ImmutableMap.of(InfernoMonster.JAL_NIB, 6), waves.get(7));
		assertEquals(ImmutableMap.of(InfernoMonster.JAL_NIB, 3, InfernoMonster.JAL_IMKOT, 1), waves.get(8));

		assertEquals(ImmutableMap.of(InfernoMonster.JAL_NIB, 3, InfernoMonster.JAL_IMKOT, 2), waves.get(15));
		assertEquals(ImmutableMap.of(InfernoMonster.JAL_NIB, 6), waves.get(16));
		assertEquals(ImmutableMap.of(InfernoMonster.JAL_NIB, 3, InfernoMonster.JAL_XIL, 1), waves.get(17));

		assertEquals(ImmutableMap.of(InfernoMonster.JAL_NIB, 3, InfernoMonster.JAL_XIL, 2), waves.get(32));
		assertEquals(ImmutableMap.of(InfernoMonster.JAL_NIB, 6), waves.get(33));
		assertEquals(ImmutableMap.of(InfernoMonster.JAL_NIB, 3, InfernoMonster.JAL_ZEK, 1), waves.get(34));

		assertEquals(ImmutableMap.builder()
			.put(InfernoMonster.JAL_NIB, 3)
			.put(InfernoMonster.JAL_ZEK, 1)
			.put(InfernoMonster.JAL_XIL, 1)
			.put(InfernoMonster.JAL_IMKOT, 1)
			.put(InfernoMonster.JAL_AK, 1)
			.put(InfernoMonster.JAL_MEJRAH, 2)
			.build(), waves.get(61));
		assertEquals(ImmutableMap.builder()
			.put(InfernoMonster.JAL_NIB, 3)
			.put(InfernoMonster.JAL_ZEK, 1)
			.put(InfernoMonster.JAL_XIL, 1)
			.put(InfernoMonster.JAL_IMKOT, 1)
			.put(InfernoMonster.JAL_AK, 2)
			.build(), waves.get(62));
		assertEquals(ImmutableMap.builder()
			.put(InfernoMonster.JAL_NIB, 3)
			.put(InfernoMonster.JAL_ZEK, 1)
			.put(InfernoMonster.JAL_XIL, 1)
			.put(InfernoMonster.JAL_IMKOT, 2)
			.build(), waves.get(63));
		assertEquals(ImmutableMap.builder()
			.put(InfernoMonster.JAL_NIB, 3)
			.put(InfernoMonster.JAL_ZEK, 1)
			.put(InfernoMonster.JAL_XIL, 2)
			.build(), waves.get(64));
		assertEquals(ImmutableMap.builder()
			.put(InfernoMonster.JAL_NIB, 3)
			.put(InfernoMonster.JAL_ZEK, 2)
			.build(), waves.get(65));
		assertEquals(ImmutableMap.of(InfernoMonster.JALTOK_JAD, 1), waves.get(66));
		assertEquals(ImmutableMap.of(InfernoMonster.JALTOK_JAD, 3), waves.get(67));
		assertEquals(ImmutableMap.of(InfernoMonster.TZKAL_ZUK, 1), waves.get(68));
	}

	@Test
	public void testLoginOutsideCaves()
	{
		plugin.onGameStateChanged(LOGGED_IN);

		assertEquals(-1, plugin.getCurrentWave());
		assertNull(plugin.getActiveWaves());
	}

	@Test
	public void testLoginWithinFightCave()
	{
		when(client.getMapRegions()).thenReturn(new int[]{ FightCaveWavesPlugin.FIGHT_CAVE_REGION });

		plugin.onGameStateChanged(LOGGED_IN);

		assertEquals(-1, plugin.getCurrentWave());
		assertNull(plugin.getActiveWaves());
	}

	@Test
	public void testLoginWithinInferno()
	{
		when(client.getMapRegions()).thenReturn(new int[]{ FightCaveWavesPlugin.INFERNO_REGION});

		plugin.onGameStateChanged(LOGGED_IN);

		assertEquals(-1, plugin.getCurrentWave());
		assertNull(plugin.getActiveWaves());
	}

	@Test
	public void testFightCaveWave()
	{
		when(client.getMapRegions()).thenReturn(new int[]{ FightCaveWavesPlugin.FIGHT_CAVE_REGION });

		plugin.onChatMessage(new ChatMessage(null, ChatMessageType.GAMEMESSAGE, "", "<col=ef1020>Wave: 1</col>", "", 0));

		assertEquals(1, plugin.getCurrentWave());
		assertEquals(FightCaveWavesPlugin.FIGHT_CAVE_WAVES, plugin.getActiveWaves());
		assertFalse(plugin.isPaused());

		plugin.onChatMessage(new ChatMessage(null, ChatMessageType.GAMEMESSAGE, "", "<col=ef1020>The Fight Cave has been paused. You may now log out.", "", 0));

		assertEquals(1, plugin.getCurrentWave());
		assertTrue(plugin.isPaused());
	}

	@Test
	public void testInfernoWave()
	{
		when(client.getMapRegions()).thenReturn(new int[]{ FightCaveWavesPlugin.INFERNO_REGION});

		plugin.onChatMessage(new ChatMessage(null, ChatMessageType.GAMEMESSAGE, "", "<col=ef1020>Wave: 1</col>", "", 0));

		assertEquals(1, plugin.getCurrentWave());
		assertEquals(FightCaveWavesPlugin.INFERNO_WAVES, plugin.getActiveWaves());
		assertFalse(plugin.isPaused());

		plugin.onChatMessage(new ChatMessage(null, ChatMessageType.GAMEMESSAGE, "", " <col=ef1020>Your logout request has been received. The minigame will be paused at the end of this wave.<br><col=ef1020>If you try to log out before that, you will have to repeat this wave.", "", 0));
		plugin.onChatMessage(new ChatMessage(null, ChatMessageType.GAMEMESSAGE, "", "Wave completed!", "", 0));

		assertEquals(2, plugin.getCurrentWave());
		assertFalse(plugin.isPaused());

		plugin.onChatMessage(new ChatMessage(null, ChatMessageType.GAMEMESSAGE, "", "<col=ef1020>The Inferno has been paused. You may now log out.", "", 0));

		assertTrue(plugin.isPaused());
	}

	@Test
	public void testWaveMonsterDisplayString()
	{
		assertEquals("Bat", FightCaveMonster.TZ_KIH.displayString(true, false));
		assertEquals("Nibbler", InfernoMonster.JAL_NIB.displayString(true, false));
		assertEquals("Zuk - Level 1400", InfernoMonster.TZKAL_ZUK.displayString(true, true));
		assertEquals("TzTok-Jad", FightCaveMonster.TZTOK_JAD.displayString(false, false));
		assertEquals("JalTok-Jad - Level 900", InfernoMonster.JALTOK_JAD.displayString(false, true));
	}
}

/*
 * Copyright (c) 2020, Jordan Atwood <nightfirecat@protonmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package at.nightfirec.fightcavewaves;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import javax.inject.Inject;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

class WaveOverlay extends OverlayPanel
{
	private static final Color HEADER_COLOR = ColorScheme.BRAND_ORANGE;

	private final FightCaveWavesConfig config;
	private final FightCaveWavesPlugin plugin;

	@Inject
	private WaveOverlay(FightCaveWavesConfig config, FightCaveWavesPlugin plugin)
	{
		setPosition(OverlayPosition.TOP_RIGHT);
		this.config = config;
		this.plugin = plugin;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		final List<Map<WaveMonster, Integer>> activeWaves = plugin.getActiveWaves();
		final int currentWave = plugin.getCurrentWave();

		if (!(plugin.inFightCave() || plugin.inInferno())
			|| currentWave <= 0
			|| activeWaves == null)
		{
			return null;
		}

		panelComponent.getChildren().clear();

		final int waveIndex = currentWave - 1;

		if (config.waveDisplay() == WaveDisplayMode.CURRENT
			|| config.waveDisplay() == WaveDisplayMode.BOTH)
		{
			final Map<WaveMonster, Integer> waveContents = activeWaves.get(waveIndex);

			addWaveInfo("Wave " + currentWave, waveContents);
		}

		if ((config.waveDisplay() == WaveDisplayMode.NEXT
			|| config.waveDisplay() == WaveDisplayMode.BOTH)
			&& currentWave < activeWaves.size())
		{
			final Map<WaveMonster, Integer> waveContents = activeWaves.get(waveIndex + 1);

			addWaveInfo("Next wave", waveContents);
		}

		return super.render(graphics);
	}

	private void addWaveInfo(final String headerText, final Map<WaveMonster, Integer> waveContents)
	{
		panelComponent.getChildren().add(TitleComponent.builder()
			.text(headerText)
			.color(HEADER_COLOR)
			.build());

		for (LineComponent line : buildWaveLines(waveContents))
		{
			panelComponent.getChildren().add(line);
		}
	}

	private Collection<LineComponent> buildWaveLines(final Map<WaveMonster, Integer> wave)
	{
		final List<Map.Entry<WaveMonster, Integer>> monsters = new ArrayList<>(wave.entrySet());
		monsters.sort(Comparator.comparingInt(entry -> entry.getKey().getLevel()));
		final List<LineComponent> outputLines = new ArrayList<>();

		for (Map.Entry<WaveMonster, Integer> monsterEntry : monsters)
		{
			final WaveMonster monster = monsterEntry.getKey();
			final int quantity = monsterEntry.getValue();
			final LineComponent line = LineComponent.builder()
				.left(FightCaveWavesPlugin.formatMonsterQuantity(monster, quantity, config.commonNames(), config.showMonsterLevel()))
				.build();

			outputLines.add(line);
		}

		return outputLines;
	}
}

/*
 * Copyright (c) 2020, Jordan Atwood <nightfirecat@protonmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package at.nightfirec.fightcavewaves;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Provides;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.annotation.Nullable;
import javax.inject.Inject;
import lombok.Getter;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import org.apache.commons.lang3.ArrayUtils;

@PluginDescriptor(
	name = "Fight Cave Waves",
	description = "Displays current and upcoming wave monsters in the Fight Caves",
	tags = {"bosses", "combat", "minigame", "overlay", "pve", "pvm", "jad", "fire", "cape", "wave", "inferno", "zuk"}
)
public class FightCaveWavesPlugin extends Plugin
{
	private static final Pattern WAVE_PATTERN = Pattern.compile(".*Wave: (\\d+).*");
	private static final String INFERNO_WAVE_COMPLETE = "Wave completed!";
	private static final Pattern PAUSE_PATTERN = Pattern.compile(".+The (?:Fight Cave|Inferno) has been paused\\. You may now log out\\.");
	@VisibleForTesting
	static final int FIGHT_CAVE_REGION = 9551;
	@VisibleForTesting
	static final int INFERNO_REGION = 9043;
	private static final int MAX_MONSTER_SPAWNS_PER_WAVE = 2;

	@VisibleForTesting
	static final int MAX_FIGHT_CAVE_WAVE = 63;
	@VisibleForTesting
	static final int MAX_INFERNO_WAVE = 69;

	@Getter
	static final List<Map<WaveMonster, Integer>> FIGHT_CAVE_WAVES = new ArrayList<>();

	@Getter
	static final List<Map<WaveMonster, Integer>> INFERNO_WAVES = new ArrayList<>();

	private int currentWave = -1;

	@Getter
	private boolean paused;

	@Nullable
	private CaveType activeCave;

	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private WaveOverlay waveOverlay;

	static
	{
		initializeFightCaveMonsters();
		initializeInfernoMonsters();
	}

	@Provides
	FightCaveWavesConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(FightCaveWavesConfig.class);
	}

	@Override
	public void startUp()
	{
		overlayManager.add(waveOverlay);
	}

	@Override
	public void shutDown()
	{
		overlayManager.remove(waveOverlay);
		resetWaves();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		switch(event.getGameState())
		{
			case LOGGED_IN:
				if (!inFightCave() && !inInferno())
				{
					resetWaves();
				}
				break;
			case LOGIN_SCREEN:
				resetWaves();
				break;
		}
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		if (event.getType() != ChatMessageType.GAMEMESSAGE
			|| !(inFightCave() || inInferno()))
		{
			return;
		}

		final String message = event.getMessage();
		if (activeCave == CaveType.INFERNO
			&& INFERNO_WAVE_COMPLETE.equals(message))
		{
			currentWave++;
			return;
		}

		final Matcher pauseMatcher = PAUSE_PATTERN.matcher(message);
		if (pauseMatcher.matches())
		{
			paused = true;
			return;
		}

		final Matcher waveMatcher = WAVE_PATTERN.matcher(message);
		if (!waveMatcher.matches())
		{
			return;
		}

		currentWave = Integer.parseInt(waveMatcher.group(1));

		if (inFightCave())
		{
			activeCave = CaveType.FIGHT_CAVE;
		}
		else
		{
			activeCave = CaveType.INFERNO;
		}
	}

	boolean inFightCave()
	{
		return ArrayUtils.contains(client.getMapRegions(), FIGHT_CAVE_REGION);
	}

	boolean inInferno()
	{
		return ArrayUtils.contains(client.getMapRegions(), INFERNO_REGION);
	}

	@Nullable
	List<Map<WaveMonster, Integer>> getActiveWaves()
	{
		if (activeCave == null)
		{
			return null;
		}

		switch(activeCave)
		{
			case FIGHT_CAVE:
				return FIGHT_CAVE_WAVES;
			case INFERNO:
				return INFERNO_WAVES;
		}
		return null;
	}

	int getCurrentWave()
	{
		if (activeCave == CaveType.INFERNO && paused)
		{
			return currentWave - 1;
		}

		return currentWave;
	}

	private void resetWaves()
	{
		currentWave = -1;
		activeCave = null;
		paused = false;
	}

	static String formatMonsterQuantity(final WaveMonster monster, final int quantity, final boolean commonNames, final boolean showMonsterLevel)
	{
		return String.format("%dx %s", quantity, monster.displayString(commonNames, showMonsterLevel));
	}

	private static void initializeFightCaveMonsters()
	{
		final FightCaveMonster[] fightCaveMonsters = FightCaveMonster.values();

		// Add wave 1, future waves are derived from its contents
		FIGHT_CAVE_WAVES.add(ImmutableMap.of(fightCaveMonsters[0], fightCaveMonsters[0].getCountPerSpawn()));

		for (int wave = 1; wave < MAX_FIGHT_CAVE_WAVE; wave++)
		{
			final Map<WaveMonster, Integer> prevWave = new HashMap<>(FIGHT_CAVE_WAVES.get(wave - 1));
			int maxMonsterOrdinal = -1;

			for (int i = 0; i < fightCaveMonsters.length; i++)
			{
				final int ordinalMonsterSpawnCount = prevWave.getOrDefault(fightCaveMonsters[i], 0) / fightCaveMonsters[i].getCountPerSpawn();

				if (ordinalMonsterSpawnCount == MAX_MONSTER_SPAWNS_PER_WAVE)
				{
					maxMonsterOrdinal = i;
					break;
				}
			}

			if (maxMonsterOrdinal >= 0)
			{
				prevWave.remove(fightCaveMonsters[maxMonsterOrdinal]);
			}

			final int addedMonsterOrdinal = maxMonsterOrdinal >= 0 ? maxMonsterOrdinal + 1 : 0;
			final FightCaveMonster addedMonster = fightCaveMonsters[addedMonsterOrdinal];
			final int addedMonsterQuantity = prevWave.getOrDefault(addedMonster, 0) + addedMonster.getCountPerSpawn();

			prevWave.put(addedMonster, addedMonsterQuantity);

			FIGHT_CAVE_WAVES.add(prevWave);
		}
	}

	private static void initializeInfernoMonsters()
	{
		final InfernoMonster[] infernoMonsters = InfernoMonster.values();

		// Add wave 1, future waves are derived from its contents
		INFERNO_WAVES.add(ImmutableMap.of(
			InfernoMonster.JAL_NIB, InfernoMonster.JAL_NIB.getCountPerSpawn(),
			InfernoMonster.JAL_MEJRAH, InfernoMonster.JAL_MEJRAH.getCountPerSpawn()
		));

		while (true)
		{
			final Map<WaveMonster, Integer> prevWave = new HashMap<>(INFERNO_WAVES.get(INFERNO_WAVES.size() - 1));

			// Check for waves with double-spawns to either stop adding waves (for double mages) or insert a double nibbler wave
			// Note: because prevWave is defined prior to this check, double nibbler waves will never enter this check
			if (prevWave.size() == 2 && prevWave.entrySet().stream().anyMatch(entry -> entry.getValue() == entry.getKey().getCountPerSpawn() * 2))
			{
				// Double mage is the last wave where this iterative wave algorithm makes sense, don't continue building waves after this
				if (prevWave.containsKey(InfernoMonster.JAL_ZEK))
				{
					break;
				}
				else
				{
					// Add a double nibbler wave after each wave containing only a single nibbler spawn and two identical spawns
					INFERNO_WAVES.add(ImmutableMap.of(InfernoMonster.JAL_NIB, InfernoMonster.JAL_NIB.getCountPerSpawn() * 2));
				}
			}

			int maxMonsterOrdinal = -1;
			for (int i = 0; i < infernoMonsters.length; i++)
			{
				final int ordinalMonsterSpawnCount = prevWave.getOrDefault(infernoMonsters[i], 0) / infernoMonsters[i].getCountPerSpawn();

				if (ordinalMonsterSpawnCount == MAX_MONSTER_SPAWNS_PER_WAVE)
				{
					 maxMonsterOrdinal = i;
					 break;
				}
			}

			if (maxMonsterOrdinal >= 0)
			{
				prevWave.remove(infernoMonsters[maxMonsterOrdinal]);
			}

			final int addedMonsterOrdinal = maxMonsterOrdinal >= 1 ? maxMonsterOrdinal + 1 : 1;
			final InfernoMonster addedMonster = infernoMonsters[addedMonsterOrdinal];
			final int addedMonsterQuantity = prevWave.getOrDefault(addedMonster, 0) + addedMonster.getCountPerSpawn();

			prevWave.put(addedMonster, addedMonsterQuantity);

			INFERNO_WAVES.add(prevWave);
		}

		INFERNO_WAVES.add(ImmutableMap.of(InfernoMonster.JALTOK_JAD, 1));
		INFERNO_WAVES.add(ImmutableMap.of(InfernoMonster.JALTOK_JAD, 3));
		INFERNO_WAVES.add(ImmutableMap.of(InfernoMonster.TZKAL_ZUK, 1));
	}
}

/*
 * Copyright (c) 2020, Jordan Atwood <nightfirecat@protonmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package at.nightfirec.fightcavewaves;

/**
 * Monster "types" within TzHaar wave-based minigames.
 */
enum WaveMonsterType
{
	NIBBLER,
	BAT,
	BLOB,
	RANGER,
	MELEE,
	MAGE,
	JAD,
	ZUK,
}

/*
 * Copyright (c) 2020, Jordan Atwood <nightfirecat@protonmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package at.nightfirec.fightcavewaves;

import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
@Getter
enum FightCaveMonster implements WaveMonster
{
	TZ_KIH("Tz-Kih", WaveMonsterType.BAT, 22),
	TZ_KEK("Tz-Kek", WaveMonsterType.BLOB, 45),
	TOK_XIL("Tok-Xil", WaveMonsterType.RANGER, 90),
	YT_MEJKOT("Yt-MejKot", WaveMonsterType.MELEE, 180),
	KET_ZEK("Ket-Zek", WaveMonsterType.MAGE, 360),
	TZTOK_JAD("TzTok-Jad", WaveMonsterType.JAD, 702);

	private final String name;
	private final WaveMonsterType type;
	private final int level;

	@Override
	public int getCountPerSpawn()
	{
		return 1;
	}
}

/*
 * Copyright (c) 2020, Jordan Atwood <nightfirecat@protonmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package at.nightfirec.fightcavewaves;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("fightcavewaves")
public interface FightCaveWavesConfig extends Config
{
	@ConfigItem(
		keyName = "waveDisplay",
		name = "Wave display",
		description = "Shows monsters that will spawn on the selected wave(s)."
	)
	default WaveDisplayMode waveDisplay()
	{
		return WaveDisplayMode.BOTH;
	}

	@ConfigItem(
		keyName = "commonNames",
		name = "Use common names",
		description = "Display common names for TzHaar wave monsters, e.g. 'Nibbler', 'Bat', 'Mage'"
	)
	default boolean commonNames()
	{
		return false;
	}

	@ConfigItem(
		keyName = "showMonsterLevel",
		name = "Show monster level",
		description = "Show the level of the monster"
	)
	default boolean showMonsterLevel()
	{
		return true;
	}
}

/*
 * Copyright (c) 2020, Jordan Atwood <nightfirecat@protonmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package at.nightfirec.fightcavewaves;

import net.runelite.client.util.Text;

interface WaveMonster
{
	String getName();
	WaveMonsterType getType();
	int getLevel();
	int getCountPerSpawn();

	default String displayString(final boolean commonName, final boolean showMonsterLevel)
	{
		final StringBuilder sb = new StringBuilder();

		if (commonName)
		{
			sb.append(Text.titleCase(getType()));
		}
		else
		{
			sb.append(getName());
		}

		if (showMonsterLevel)
		{
			sb.append(" - Level ");
			sb.append(getLevel());
		}

		return sb.toString();
	}
}

/*
 * Copyright (c) 2023, Jordan Atwood <nightfirecat@nightfirec.at>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package at.nightfirec.fightcavewaves;

public enum CaveType
{
	FIGHT_CAVE,
	INFERNO,
}

/*
 * Copyright (c) 2020, Jordan Atwood <nightfirecat@protonmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package at.nightfirec.fightcavewaves;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public enum WaveDisplayMode
{
	CURRENT("Current wave"),
	NEXT("Next wave"),
	BOTH("Both");

	private final String name;

	@Override
	public String toString()
	{
		return name;
	}
}

/*
 * Copyright (c) 2020, Jordan Atwood <nightfirecat@protonmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package at.nightfirec.fightcavewaves;

import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
@Getter
enum InfernoMonster implements WaveMonster
{
	JAL_NIB("Jal-Nib", WaveMonsterType.NIBBLER, 32, 3),
	JAL_MEJRAH("Jal-MejRah", WaveMonsterType.BAT, 85),
	JAL_AK("Jal-Ak", WaveMonsterType.BLOB, 165),
	JAL_IMKOT("Jal-ImKot", WaveMonsterType.MELEE, 240),
	JAL_XIL("Jal-Xil", WaveMonsterType.RANGER, 370),
	JAL_ZEK("Jal-Zek", WaveMonsterType.MAGE, 490),
	JALTOK_JAD("JalTok-Jad", WaveMonsterType.JAD, 900),
	TZKAL_ZUK("TzKal-Zuk", WaveMonsterType.ZUK, 1400);

	private final String name;
	private final WaveMonsterType type;
	private final int level;
	private final int countPerSpawn;

	InfernoMonster(final String name, final WaveMonsterType type, final int level)
	{
		this(name, type, level, 1);
	}
}

