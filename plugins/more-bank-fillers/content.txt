package com.mbf;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PluginLaucher
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(MoreFillPlugin.class);
		RuneLite.main(args);
	}
}
package com.mbf;

public enum MoreFillOverlayTypes {
    EMPTY,

    FILLER,
    SQUARE,
    SWIRL,
    DOT

}

package com.mbf;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ItemComposition;
import net.runelite.api.ItemID;
import net.runelite.api.events.PostItemComposition;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;

@Slf4j
@PluginDescriptor(
	name = "More Bank Fillers"
)
public class MoreFillPlugin extends Plugin
{

	@Inject
	private Client client;

	@Inject
	private ClientThread clientThread;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private MoreFillOverlay overlay;


	@Override
	protected void startUp() throws Exception
	{
		resetCaches();
		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		resetCaches();
		overlayManager.remove(overlay);
	}

	// Ref unidentified-herbs by hex-agon
	@Subscribe
	public void onPostItemComposition(PostItemComposition event) {
		ItemComposition itemComposition = event.getItemComposition();
		if (itemComposition.getId() == ItemID.BANK_FILLER) {
			itemComposition.setInventoryModel(-1);
		}
	}

	@Provides
	MoreFillConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(MoreFillConfig.class);
	}


	// Ref unidentified-herbs by hex-agon
	private void resetCaches() {
		clientThread.invokeLater(() -> {
			client.getItemCompositionCache().reset();
			client.getItemModelCache().reset();
			client.getItemSpriteCache().reset();
		});
	}


}

package com.mbf;

public enum MoreFillOverlayThemes {
    Bronze,
    Gold,
    Adamant,
    Rune,
    Dragon
}

package com.mbf;


import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ItemID;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.client.ui.overlay.WidgetItemOverlay;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;

@Slf4j
public class MoreFillOverlay extends WidgetItemOverlay
{

    private final MoreFillConfig config;
    private final BufferedImage empty = ImageUtil.loadImageResource(MoreFillPlugin.class,"/empty_tile.png");
    private final BufferedImage addydot = ImageUtil.loadImageResource(MoreFillPlugin.class,"/addy_dot.png");
    private final BufferedImage addysq = ImageUtil.loadImageResource(MoreFillPlugin.class,"/addy_sq.png");
    private final BufferedImage addyswirl = ImageUtil.loadImageResource(MoreFillPlugin.class,"/addy_swirl.png");
    private final BufferedImage bronzedot = ImageUtil.loadImageResource(MoreFillPlugin.class, "/bronze_dot.png");
    private final BufferedImage bronzesq = ImageUtil.loadImageResource(MoreFillPlugin.class, "/bronze_sq.png");
    private final BufferedImage bronzeswirl = ImageUtil.loadImageResource(MoreFillPlugin.class, "/bronze_swirl.png");
    private final BufferedImage dragondot = ImageUtil.loadImageResource(MoreFillPlugin.class, "/dragon_dot.png");
    private final BufferedImage dragonsq = ImageUtil.loadImageResource(MoreFillPlugin.class, "/dragon_sq.png");
    private final BufferedImage dragonswirl = ImageUtil.loadImageResource(MoreFillPlugin.class, "/dragon_swirl.png");
    private final BufferedImage golddot = ImageUtil.loadImageResource(MoreFillPlugin.class, "/gold_dot.png");
    private final BufferedImage goldsq = ImageUtil.loadImageResource(MoreFillPlugin.class, "/gold_sq.png");
    private final BufferedImage goldswirl = ImageUtil.loadImageResource(MoreFillPlugin.class, "/gold_swirl.png");
    private final BufferedImage runedot = ImageUtil.loadImageResource(MoreFillPlugin.class, "/rune_dot.png");
    private final BufferedImage runesq = ImageUtil.loadImageResource(MoreFillPlugin.class, "/rune_sq.png");
    private final BufferedImage runeswirl = ImageUtil.loadImageResource(MoreFillPlugin.class, "/rune_swirl.png");
    private final BufferedImage bronzestandard = ImageUtil.loadImageResource(MoreFillPlugin.class, "/bronze_standard.png");
    private final BufferedImage goldstandard = ImageUtil.loadImageResource(MoreFillPlugin.class, "/gold_standard.png");
    private final BufferedImage addystandard = ImageUtil.loadImageResource(MoreFillPlugin.class, "/addy_standard.png");
    private final BufferedImage runestandard = ImageUtil.loadImageResource(MoreFillPlugin.class, "/rune_standard.png");
    private final BufferedImage dragonstandard = ImageUtil.loadImageResource(MoreFillPlugin.class, "/dragon_standard.png");


    @Inject
    private MoreFillOverlay(MoreFillConfig config)
    {
        this.config = config;
        showOnBank();
    }

    @Override
    public void renderItemOverlay(Graphics2D graphics, int itemId, WidgetItem itemWidget)
    {

        if (config.overlayType() == MoreFillOverlayTypes.EMPTY){
            // Only need to hide the model. no overlay needed
            return;
        }

        // Get the proper image we should use as overlay
        BufferedImage imageToShow = getImage(config.overlayTheme(), config.overlayType());

        if (itemId == ItemID.BANK_FILLER){
            Rectangle bounds = itemWidget.getCanvasBounds();
            graphics.drawImage(imageToShow, (int) bounds.getX(), (int) bounds.getY(), null);
        }


    }
    private BufferedImage getImage(MoreFillOverlayThemes overlayTheme, MoreFillOverlayTypes overlayType){
        BufferedImage imageToShow = null;

        MoreFillOverlayTypes endType = overlayType; // Redundant but may be useful in future.
        MoreFillOverlayThemes endTheme = overlayTheme;



        switch(endType){

            case FILLER:
                switch (endTheme){
                    case Bronze:
                        imageToShow = bronzestandard;
                        break;
                    case Gold:
                        imageToShow = goldstandard;
                        break;
                    case Adamant:
                        imageToShow = addystandard;
                        break;
                    case Rune:
                        imageToShow = runestandard;
                        break;
                    case Dragon:
                        imageToShow = dragonstandard;
                        break;

                }
                break;

            case SQUARE:
                switch (endTheme){
                    case Bronze:
                        imageToShow = bronzesq;
                        break;
                    case Gold:
                        imageToShow = goldsq;
                        break;
                    case Adamant:
                        imageToShow = addysq;
                        break;
                    case Rune:
                        imageToShow = runesq;
                        break;
                    case Dragon:
                        imageToShow = dragonsq;
                        break;

                }
                break;

            case DOT:
                switch (endTheme){
                    case Bronze:
                        imageToShow = bronzedot;
                        break;
                    case Gold:
                        imageToShow = golddot;
                        break;
                    case Adamant:
                        imageToShow = addydot;
                        break;
                    case Rune:
                        imageToShow = runedot;
                        break;
                    case Dragon:
                        imageToShow = dragondot;
                        break;

                }
                break;

            case SWIRL:
                switch (endTheme){
                    case Bronze:
                        imageToShow = bronzeswirl;
                        break;
                    case Gold:
                        imageToShow = goldswirl;
                        break;
                    case Adamant:
                        imageToShow = addyswirl;
                        break;
                    case Rune:
                        imageToShow = runeswirl;
                        break;
                    case Dragon:
                        imageToShow = dragonswirl;
                        break;

                }
                break;
        }

        if (imageToShow == null){
            imageToShow = empty;
        }

        return imageToShow;
    }


}

package com.mbf;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("morebankfillers")
public interface MoreFillConfig extends Config
{
	@ConfigItem(
		keyName = "overlayType",
		name = "Type of Overlay",
		description = "The type of overlay should cover the bank filler",
			position = 0
	)
	default MoreFillOverlayTypes overlayType()
	{
		return MoreFillOverlayTypes.SQUARE;
	}

	@ConfigItem(
			keyName = "overlayTheme",
			name = "Overlay Theme",
			description = "Theme of the overlay",
			position = 2
	)
	default MoreFillOverlayThemes overlayTheme()
	{
		return MoreFillOverlayThemes.Gold;
	}

}

