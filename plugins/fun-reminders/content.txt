package com.ericversteeg;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ProximityPromptPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ProximityPromptPlugin.class);
		RuneLite.main(args);
	}
}
package com.ericversteeg;

import com.ericversteeg.model.config.Location;
import com.ericversteeg.model.config.Sound;
import com.ericversteeg.model.config.TextSize;
import com.ericversteeg.model.config.TimeUnit;
import com.ericversteeg.view.RSAnchorType;
import net.runelite.client.config.*;

import java.awt.*;

@ConfigGroup(ProximityPromptConfig.GROUP)
public interface ProximityPromptConfig extends Config
{
	String GROUP = "proximity_prompt";

	@ConfigItem(
			position = 1,
			keyName = "anchorType",
			name = "Anchor",
			description = "Configure anchor of list panel."
	)
	default RSAnchorType anchorType() {
		return RSAnchorType.TOP_LEFT;
	}

	@ConfigItem(
			position = 2,
			keyName = "anchorX",
			name = "X Position",
			description = "Configure x position relative to anchor of list panel."
	)
	default int anchorX() {
		return 10;
	}

	@ConfigItem(
			position = 3,
			keyName = "anchorY",
			name = "Y Position",
			description = "Configures y position relative to anchor of list panel."
	)
	default int anchorY() {
		return 120;
	}

	@ConfigItem(
			position = 4,
			keyName = "width",
			name = "Width",
			description = "Configures the width of list panel."
	)
	default int width() {
		return 140;
	}

	@ConfigItem(
			position = 0,
			keyName = "idFinder",
			name = "ID Finder",
			description = "Configures whether or not to enable ID Finder in list panel."
	)
	default boolean idFinder() {
		return false;
	}

	@ConfigItem(
			position = 6,
			keyName = "textSize",
			name = "Text Size",
			description = "Configures the text size of list panel."
	)
	default TextSize textSize() {
		return TextSize.SMALL;
	}

	@ConfigSection(
			name = "Custom",
			description = "JSON Reminders",
			position = 50,
			closedByDefault = true
	)
	String customReminders = "customRemindersSection";

	@ConfigItem(
			position = 0,
			keyName = "jsonReminders",
			name = "JSON",
			description = "Json array of reminders.",
			section = customReminders

	)
	default String customReminders() {
		return "";
	}

	@ConfigSection(
			name = "1",
			description = "Reminder 1",
			position = 21,
			closedByDefault = true
	)
	String reminder1= "reminder1";

	@ConfigItem(
			keyName = "enableReminder1",
			position = 0,
			name = "Enable",
			description = "Configures whether or not reminder is enabled.",
			section = reminder1
	)
	default boolean reminder1Enable()  { return false; }

	@ConfigItem(
			keyName = "reminder1Text",
			position = 1,
			name = "Text",
			description = "Configures the reminder text.",
			section = reminder1
	)
	default String reminder1Text() { return ""; }

	@ConfigItem(
			keyName = "reminder1Color",
			position = 2,
			name = "Color",
			description = "Configures the text color.",
			section = reminder1
	)
	default Color reminder1Color() { return Color.WHITE; }

	@ConfigItem(
			keyName = "reminder1Times",
			position = 37,
			name = "Times",
			description = "Configures what times reminder is shown. Set times 10:00pm, 7:30pm or spans 8:30am-12:00pm, 10:00pm-1:00am. (comma separated).",
			section = reminder1
	)
	default String reminder1Times() { return ""; }

	@ConfigItem(
			keyName = "reminder1DaysOfWeek",
			position = 38,
			name = "Days",
			description = "Configures what days of week reminder is shown, e.g. Mon, Thu (comma separated).",
			section = reminder1
	)
	default String reminder1DaysOfWeek() { return ""; }

	@ConfigItem(
			keyName = "reminder1Dates",
			position = 39,
			name = "Dates",
			description = "Configures what dates reminder is shown. Set dates 04/30, 05/28/23 or ranges 9/20/22-10/30/22, 7/20-8/9. (comma separated).",
			section = reminder1
	)
	default String reminder1Dates() { return ""; }

	@ConfigItem(
			keyName = "reminder1Coordinates",
			position = 30,
			name = "Coordinates",
			description = "Configures coordinates where reminder is shown (x, y), e.g. (40, 50), (1000, 750) (comma separated).",
			section = reminder1
	)
	default String reminder1Coordinates() { return ""; }

	@ConfigItem(
			keyName = "reminder1Geofences",
			position = 31,
			name = "Geofences",
			description = "Configures geofences where reminder is shown (west, north, east, south), e.g. (40, 50, 1000, 750) (comma separated).",
			section = reminder1
	)
	default String reminder1Geofences() { return ""; }

	@ConfigItem(
			keyName = "reminder1Radius",
			position = 31,
			name = "Coordinate Radius",
			description = "Configures how far away from coordinates reminder is shown.",
			section = reminder1
	)
	default int reminder1Radius() { return 0; }

	@ConfigItem(
			keyName = "Reminder1RegionId",
			position = 33,
			name = "Regions",
			description = "Configures region ids when reminder is shown (comma separated).",
			section = reminder1
	)
	default String reminder1RegionIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder1NpcIds",
			position = 34,
			name = "Npcs",
			description = "Configures npc ids where reminder is shown (comma separated).",
			section = reminder1
	)
	default String reminder1NpcIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder1ItemIds",
			position = 35,
			name = "Items",
			description = "Configures item ids where reminder is shown (comma separated).",
			section = reminder1
	)
	default String reminder1ItemIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder1Duration",
			position = 3,
			name = "Duration",
			description = "Configures duration of reminder.",
			section = reminder1
	)
	default int reminder1Duration() { return 0; }

	@ConfigItem(
			keyName = "Reminder1Cooldown",
			position = 4,
			name = "Cooldown",
			description = "Configures cooldown of reminder.",
			section = reminder1
	)
	default int reminder1Cooldown() { return 0; }

	@ConfigItem(
			keyName = "Reminder1TimeUnit",
			position = 5,
			name = "Time Unit",
			description = "Configures the time unit for duration and cooldown.",
			section = reminder1
	)
	default TimeUnit reminder1TimeUnit() { return TimeUnit.SECONDS; }

	@ConfigItem(
			keyName = "Reminder1ChatPatterns",
			position = 36,
			name = "Messages",
			description = "Configures text or regex to match messages to show reminder. (comma separated)",
			section = reminder1
	)
	default String reminder1ChatPatterns() { return ""; }

	@ConfigItem(
			keyName = "Reminder1Notification",
			position = 6,
			name = "Notification",
			description = "Configures whether or not to show a background notification.",
			section = reminder1
	)
	default boolean reminder1Notify() { return false; }

	@ConfigItem(
			keyName = "Reminder1SeparatePanel",
			position = 7,
			name = "Location",
			description = "Configures the location for reminder.",
			section = reminder1
	)
	default Location reminder1Location() { return Location.IN_LIST; }

	@ConfigItem(
			keyName = "Reminder1panelAnchorType",
			position = 8,
			name = "Anchor",
			description = "Configures the anchor type of panel.",
			section = reminder1
	)
	default RSAnchorType reminder1PanelAnchorType() { return RSAnchorType.TOP_LEFT; }

	@ConfigItem(
			keyName = "Reminder1PanelAnchorX",
			position = 9,
			name = "X Position",
			description = "Configures the x position of panel.",
			section = reminder1
	)
	default int reminder1PanelAnchorX() { return 0; }

	@ConfigItem(
			keyName = "Reminder1PanelAnchorY",
			position = 10,
			name = "Y Position",
			description = "Configures the y position of panel.",
			section = reminder1
	)
	default int reminder1PanelAnchorY() { return 0; }

	@ConfigItem(
			keyName = "Reminder1ImageId",
			position = 14,
			name = "Image ID",
			description = "Configures image id to display in reminder.",
			section = reminder1
	)
	default int reminder1ImageId() { return 0; }

	@ConfigItem(
			keyName = "Reminder1Sound",
			position = 13,
			name = "Sound",
			description = "Configures sound that plays with reminder.",
			section = reminder1
	)
	default Sound reminder1Sound() { return Sound.NONE; }

	@ConfigItem(
			keyName = "Reminder1ImageOffsetNegative",
			position = 14,
			name = "Offset Negative",
			description = "Configures whether or not image offset is a negative number.",
			section = reminder1
	)
	default boolean reminder1ImageOffsetNegative() { return false; }


	@ConfigItem(
			keyName = "Reminder1PanelWidth",
			position = 11,
			name = "Width",
			description = "Configures width of panel.",
			section = reminder1
	)
	default int reminder1PanelWidth() { return 140; }


	@ConfigItem(
			keyName = "Reminder1PanelTextSize",
			position = 12,
			name = "Text Size",
			description = "Configures text size of reminder.",
			section = reminder1
	)
	default TextSize reminder1PanelTextSize() { return TextSize.SMALL; }


	@ConfigItem(
			keyName = "Reminder1PanelColor",
			position = 12,
			name = "Background Color",
			description = "Configures panel color.",
			section = reminder1
	)
	default Color reminder1PanelColor() { return new Color(115, 115, 115); }

	@Alpha
	@ConfigItem(
			keyName = "Reminder1PanelBorder",
			position = 12,
			name = "Border",
			description = "Configures whether or not panel has border.",
			section = reminder1
	)
	default boolean reminder1PanelBorder() { return true; }


	@ConfigItem(
			keyName = "Reminder1ForceShow",
			position = 0,
			name = "Force",
			description = "Configures whether or not to force the reminder visible.",
			section = reminder1
	)
	default boolean reminder1ForceShow() { return false; }

	@ConfigItem(
			keyName = "Reminder1ImageOffset",
			position = 14,
			name = "Image Offset",
			description = "Configures offset for image.",
			section = reminder1
	)
	default int reminder1ImageOffset() { return 0; }


	@ConfigSection(
			name = "2",
			description = "Reminder 2",
			position = 22,
			closedByDefault = true
	)
	String reminder2= "reminder2";

	@ConfigItem(
			keyName = "enableReminder2",
			position = 0,
			name = "Enable",
			description = "Configures whether or not reminder is enabled.",
			section = reminder2
	)
	default boolean reminder2Enable()  { return false; }

	@ConfigItem(
			keyName = "reminder2Text",
			position = 1,
			name = "Text",
			description = "Configures the reminder text.",
			section = reminder2
	)
	default String reminder2Text() { return ""; }

	@ConfigItem(
			keyName = "reminder2Color",
			position = 2,
			name = "Color",
			description = "Configures the text color.",
			section = reminder2
	)
	default Color reminder2Color() { return Color.WHITE; }

	@ConfigItem(
			keyName = "reminder2Times",
			position = 37,
			name = "Times",
			description = "Configures what times reminder is shown. Set times 10:00pm, 7:30pm or spans 8:30am-12:00pm, 10:00pm-1:00am. (comma separated).",
			section = reminder2
	)
	default String reminder2Times() { return ""; }

	@ConfigItem(
			keyName = "reminder2DaysOfWeek",
			position = 38,
			name = "Days",
			description = "Configures what days of week reminder is shown, e.g. Mon, Thu (comma separated).",
			section = reminder2
	)
	default String reminder2DaysOfWeek() { return ""; }

	@ConfigItem(
			keyName = "reminder2Dates",
			position = 39,
			name = "Dates",
			description = "Configures what dates reminder is shown. Set dates 04/30, 05/28/23 or ranges 9/20/22-10/30/22, 7/20-8/9. (comma separated).",
			section = reminder2
	)
	default String reminder2Dates() { return ""; }

	@ConfigItem(
			keyName = "reminder2Coordinates",
			position = 30,
			name = "Coordinates",
			description = "Configures coordinates where reminder is shown (x, y), e.g. (40, 50), (1000, 750) (comma separated).",
			section = reminder2
	)
	default String reminder2Coordinates() { return ""; }

	@ConfigItem(
			keyName = "reminder2Geofences",
			position = 31,
			name = "Geofences",
			description = "Configures geofences where reminder is shown (west, north, east, south), e.g. (40, 50, 1000, 750) (comma separated).",
			section = reminder2
	)
	default String reminder2Geofences() { return ""; }

	@ConfigItem(
			keyName = "reminder2Radius",
			position = 31,
			name = "Coordinate Radius",
			description = "Configures how far away from coordinates reminder is shown.",
			section = reminder2
	)
	default int reminder2Radius() { return 0; }

	@ConfigItem(
			keyName = "Reminder2RegionId",
			position = 33,
			name = "Regions",
			description = "Configures region ids when reminder is shown (comma separated).",
			section = reminder2
	)
	default String reminder2RegionIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder2NpcIds",
			position = 34,
			name = "Npcs",
			description = "Configures npc ids where reminder is shown (comma separated).",
			section = reminder2
	)
	default String reminder2NpcIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder2ItemIds",
			position = 35,
			name = "Items",
			description = "Configures item ids where reminder is shown (comma separated).",
			section = reminder2
	)
	default String reminder2ItemIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder2Duration",
			position = 3,
			name = "Duration",
			description = "Configures duration of reminder.",
			section = reminder2
	)
	default int reminder2Duration() { return 0; }

	@ConfigItem(
			keyName = "Reminder2Cooldown",
			position = 4,
			name = "Cooldown",
			description = "Configures cooldown of reminder.",
			section = reminder2
	)
	default int reminder2Cooldown() { return 0; }

	@ConfigItem(
			keyName = "Reminder2TimeUnit",
			position = 5,
			name = "Time Unit",
			description = "Configures the time unit for duration and cooldown.",
			section = reminder2
	)
	default TimeUnit reminder2TimeUnit() { return TimeUnit.SECONDS; }

	@ConfigItem(
			keyName = "Reminder2ChatPatterns",
			position = 36,
			name = "Messages",
			description = "Configures text or regex to match messages to show reminder. (comma separated)",
			section = reminder2
	)
	default String reminder2ChatPatterns() { return ""; }

	@ConfigItem(
			keyName = "Reminder2Notification",
			position = 6,
			name = "Notification",
			description = "Configures whether or not to show a background notification.",
			section = reminder2
	)
	default boolean reminder2Notify() { return false; }

	@ConfigItem(
			keyName = "Reminder2SeparatePanel",
			position = 7,
			name = "Location",
			description = "Configures the location for reminder.",
			section = reminder2
	)
	default Location reminder2Location() { return Location.IN_LIST; }

	@ConfigItem(
			keyName = "Reminder2panelAnchorType",
			position = 8,
			name = "Anchor",
			description = "Configures the anchor type of panel.",
			section = reminder2
	)
	default RSAnchorType reminder2PanelAnchorType() { return RSAnchorType.TOP_LEFT; }

	@ConfigItem(
			keyName = "Reminder2PanelAnchorX",
			position = 9,
			name = "X Position",
			description = "Configures the x position of panel.",
			section = reminder2
	)
	default int reminder2PanelAnchorX() { return 0; }

	@ConfigItem(
			keyName = "Reminder2PanelAnchorY",
			position = 10,
			name = "Y Position",
			description = "Configures the y position of panel.",
			section = reminder2
	)
	default int reminder2PanelAnchorY() { return 0; }

	@ConfigItem(
			keyName = "Reminder2ImageId",
			position = 14,
			name = "Image ID",
			description = "Configures image id to display in reminder.",
			section = reminder2
	)
	default int reminder2ImageId() { return 0; }

	@ConfigItem(
			keyName = "Reminder2Sound",
			position = 13,
			name = "Sound",
			description = "Configures sound that plays with reminder.",
			section = reminder2
	)
	default Sound reminder2Sound() { return Sound.NONE; }

	@ConfigItem(
			keyName = "Reminder2ImageOffsetNegative",
			position = 14,
			name = "Offset Negative",
			description = "Configures whether or not image offset is a negative number.",
			section = reminder2
	)
	default boolean reminder2ImageOffsetNegative() { return false; }


	@ConfigItem(
			keyName = "Reminder2PanelWidth",
			position = 11,
			name = "Width",
			description = "Configures width of panel.",
			section = reminder2
	)
	default int reminder2PanelWidth() { return 140; }


	@ConfigItem(
			keyName = "Reminder2PanelTextSize",
			position = 12,
			name = "Text Size",
			description = "Configures text size of reminder.",
			section = reminder2
	)
	default TextSize reminder2PanelTextSize() { return TextSize.SMALL; }


	@ConfigItem(
			keyName = "Reminder2PanelColor",
			position = 12,
			name = "Background Color",
			description = "Configures panel color.",
			section = reminder2
	)
	default Color reminder2PanelColor() { return new Color(115, 115, 115); }

	@Alpha
	@ConfigItem(
			keyName = "Reminder2PanelBorder",
			position = 12,
			name = "Border",
			description = "Configures whether or not panel has border.",
			section = reminder2
	)
	default boolean reminder2PanelBorder() { return true; }


	@ConfigItem(
			keyName = "Reminder2ForceShow",
			position = 0,
			name = "Force",
			description = "Configures whether or not to force the reminder visible.",
			section = reminder2
	)
	default boolean reminder2ForceShow() { return false; }

	@ConfigItem(
			keyName = "Reminder2ImageOffset",
			position = 14,
			name = "Image Offset",
			description = "Configures offset for image.",
			section = reminder2
	)
	default int reminder2ImageOffset() { return 0; }


	@ConfigSection(
			name = "3",
			description = "Reminder 3",
			position = 23,
			closedByDefault = true
	)
	String reminder3= "reminder3";

	@ConfigItem(
			keyName = "enableReminder3",
			position = 0,
			name = "Enable",
			description = "Configures whether or not reminder is enabled.",
			section = reminder3
	)
	default boolean reminder3Enable()  { return false; }

	@ConfigItem(
			keyName = "reminder3Text",
			position = 1,
			name = "Text",
			description = "Configures the reminder text.",
			section = reminder3
	)
	default String reminder3Text() { return ""; }

	@ConfigItem(
			keyName = "reminder3Color",
			position = 2,
			name = "Color",
			description = "Configures the text color.",
			section = reminder3
	)
	default Color reminder3Color() { return Color.WHITE; }

	@ConfigItem(
			keyName = "reminder3Times",
			position = 37,
			name = "Times",
			description = "Configures what times reminder is shown. Set times 10:00pm, 7:30pm or spans 8:30am-12:00pm, 10:00pm-1:00am. (comma separated).",
			section = reminder3
	)
	default String reminder3Times() { return ""; }

	@ConfigItem(
			keyName = "reminder3DaysOfWeek",
			position = 38,
			name = "Days",
			description = "Configures what days of week reminder is shown, e.g. Mon, Thu (comma separated).",
			section = reminder3
	)
	default String reminder3DaysOfWeek() { return ""; }

	@ConfigItem(
			keyName = "reminder3Dates",
			position = 39,
			name = "Dates",
			description = "Configures what dates reminder is shown. Set dates 04/30, 05/28/23 or ranges 9/20/22-10/30/22, 7/20-8/9. (comma separated).",
			section = reminder3
	)
	default String reminder3Dates() { return ""; }

	@ConfigItem(
			keyName = "reminder3Coordinates",
			position = 30,
			name = "Coordinates",
			description = "Configures coordinates where reminder is shown (x, y), e.g. (40, 50), (1000, 750) (comma separated).",
			section = reminder3
	)
	default String reminder3Coordinates() { return ""; }

	@ConfigItem(
			keyName = "reminder3Geofences",
			position = 31,
			name = "Geofences",
			description = "Configures geofences where reminder is shown (west, north, east, south), e.g. (40, 50, 1000, 750) (comma separated).",
			section = reminder3
	)
	default String reminder3Geofences() { return ""; }

	@ConfigItem(
			keyName = "reminder3Radius",
			position = 31,
			name = "Coordinate Radius",
			description = "Configures how far away from coordinates reminder is shown.",
			section = reminder3
	)
	default int reminder3Radius() { return 0; }

	@ConfigItem(
			keyName = "Reminder3RegionId",
			position = 33,
			name = "Regions",
			description = "Configures region ids when reminder is shown (comma separated).",
			section = reminder3
	)
	default String reminder3RegionIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder3NpcIds",
			position = 34,
			name = "Npcs",
			description = "Configures npc ids where reminder is shown (comma separated).",
			section = reminder3
	)
	default String reminder3NpcIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder3ItemIds",
			position = 35,
			name = "Items",
			description = "Configures item ids where reminder is shown (comma separated).",
			section = reminder3
	)
	default String reminder3ItemIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder3Duration",
			position = 3,
			name = "Duration",
			description = "Configures duration of reminder.",
			section = reminder3
	)
	default int reminder3Duration() { return 0; }

	@ConfigItem(
			keyName = "Reminder3Cooldown",
			position = 4,
			name = "Cooldown",
			description = "Configures cooldown of reminder.",
			section = reminder3
	)
	default int reminder3Cooldown() { return 0; }

	@ConfigItem(
			keyName = "Reminder3TimeUnit",
			position = 5,
			name = "Time Unit",
			description = "Configures the time unit for duration and cooldown.",
			section = reminder3
	)
	default TimeUnit reminder3TimeUnit() { return TimeUnit.SECONDS; }

	@ConfigItem(
			keyName = "Reminder3ChatPatterns",
			position = 36,
			name = "Messages",
			description = "Configures text or regex to match messages to show reminder. (comma separated)",
			section = reminder3
	)
	default String reminder3ChatPatterns() { return ""; }

	@ConfigItem(
			keyName = "Reminder3Notification",
			position = 6,
			name = "Notification",
			description = "Configures whether or not to show a background notification.",
			section = reminder3
	)
	default boolean reminder3Notify() { return false; }

	@ConfigItem(
			keyName = "Reminder3SeparatePanel",
			position = 7,
			name = "Location",
			description = "Configures the location for reminder.",
			section = reminder3
	)
	default Location reminder3Location() { return Location.IN_LIST; }

	@ConfigItem(
			keyName = "Reminder3panelAnchorType",
			position = 8,
			name = "Anchor",
			description = "Configures the anchor type of panel.",
			section = reminder3
	)
	default RSAnchorType reminder3PanelAnchorType() { return RSAnchorType.TOP_LEFT; }

	@ConfigItem(
			keyName = "Reminder3PanelAnchorX",
			position = 9,
			name = "X Position",
			description = "Configures the x position of panel.",
			section = reminder3
	)
	default int reminder3PanelAnchorX() { return 0; }

	@ConfigItem(
			keyName = "Reminder3PanelAnchorY",
			position = 10,
			name = "Y Position",
			description = "Configures the y position of panel.",
			section = reminder3
	)
	default int reminder3PanelAnchorY() { return 0; }

	@ConfigItem(
			keyName = "Reminder3ImageId",
			position = 14,
			name = "Image ID",
			description = "Configures image id to display in reminder.",
			section = reminder3
	)
	default int reminder3ImageId() { return 0; }

	@ConfigItem(
			keyName = "Reminder3Sound",
			position = 13,
			name = "Sound",
			description = "Configures sound that plays with reminder.",
			section = reminder3
	)
	default Sound reminder3Sound() { return Sound.NONE; }

	@ConfigItem(
			keyName = "Reminder3ImageOffsetNegative",
			position = 14,
			name = "Offset Negative",
			description = "Configures whether or not image offset is a negative number.",
			section = reminder3
	)
	default boolean reminder3ImageOffsetNegative() { return false; }


	@ConfigItem(
			keyName = "Reminder3PanelWidth",
			position = 11,
			name = "Width",
			description = "Configures width of panel.",
			section = reminder3
	)
	default int reminder3PanelWidth() { return 140; }


	@ConfigItem(
			keyName = "Reminder3PanelTextSize",
			position = 12,
			name = "Text Size",
			description = "Configures text size of reminder.",
			section = reminder3
	)
	default TextSize reminder3PanelTextSize() { return TextSize.SMALL; }


	@ConfigItem(
			keyName = "Reminder3PanelColor",
			position = 12,
			name = "Background Color",
			description = "Configures panel color.",
			section = reminder3
	)
	default Color reminder3PanelColor() { return new Color(115, 115, 115); }

	@Alpha
	@ConfigItem(
			keyName = "Reminder3PanelBorder",
			position = 12,
			name = "Border",
			description = "Configures whether or not panel has border.",
			section = reminder3
	)
	default boolean reminder3PanelBorder() { return true; }


	@ConfigItem(
			keyName = "Reminder3ForceShow",
			position = 0,
			name = "Force",
			description = "Configures whether or not to force the reminder visible.",
			section = reminder3
	)
	default boolean reminder3ForceShow() { return false; }

	@ConfigItem(
			keyName = "Reminder3ImageOffset",
			position = 14,
			name = "Image Offset",
			description = "Configures offset for image.",
			section = reminder3
	)
	default int reminder3ImageOffset() { return 0; }


	@ConfigSection(
			name = "4",
			description = "Reminder 4",
			position = 24,
			closedByDefault = true
	)
	String reminder4= "reminder4";

	@ConfigItem(
			keyName = "enableReminder4",
			position = 0,
			name = "Enable",
			description = "Configures whether or not reminder is enabled.",
			section = reminder4
	)
	default boolean reminder4Enable()  { return false; }

	@ConfigItem(
			keyName = "reminder4Text",
			position = 1,
			name = "Text",
			description = "Configures the reminder text.",
			section = reminder4
	)
	default String reminder4Text() { return ""; }

	@ConfigItem(
			keyName = "reminder4Color",
			position = 2,
			name = "Color",
			description = "Configures the text color.",
			section = reminder4
	)
	default Color reminder4Color() { return Color.WHITE; }

	@ConfigItem(
			keyName = "reminder4Times",
			position = 37,
			name = "Times",
			description = "Configures what times reminder is shown. Set times 10:00pm, 7:30pm or spans 8:30am-12:00pm, 10:00pm-1:00am. (comma separated).",
			section = reminder4
	)
	default String reminder4Times() { return ""; }

	@ConfigItem(
			keyName = "reminder4DaysOfWeek",
			position = 38,
			name = "Days",
			description = "Configures what days of week reminder is shown, e.g. Mon, Thu (comma separated).",
			section = reminder4
	)
	default String reminder4DaysOfWeek() { return ""; }

	@ConfigItem(
			keyName = "reminder4Dates",
			position = 39,
			name = "Dates",
			description = "Configures what dates reminder is shown. Set dates 04/30, 05/28/23 or ranges 9/20/22-10/30/22, 7/20-8/9. (comma separated).",
			section = reminder4
	)
	default String reminder4Dates() { return ""; }

	@ConfigItem(
			keyName = "reminder4Coordinates",
			position = 30,
			name = "Coordinates",
			description = "Configures coordinates where reminder is shown (x, y), e.g. (40, 50), (1000, 750) (comma separated).",
			section = reminder4
	)
	default String reminder4Coordinates() { return ""; }

	@ConfigItem(
			keyName = "reminder4Geofences",
			position = 31,
			name = "Geofences",
			description = "Configures geofences where reminder is shown (west, north, east, south), e.g. (40, 50, 1000, 750) (comma separated).",
			section = reminder4
	)
	default String reminder4Geofences() { return ""; }

	@ConfigItem(
			keyName = "reminder4Radius",
			position = 31,
			name = "Coordinate Radius",
			description = "Configures how far away from coordinates reminder is shown.",
			section = reminder4
	)
	default int reminder4Radius() { return 0; }

	@ConfigItem(
			keyName = "Reminder4RegionId",
			position = 33,
			name = "Regions",
			description = "Configures region ids when reminder is shown (comma separated).",
			section = reminder4
	)
	default String reminder4RegionIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder4NpcIds",
			position = 34,
			name = "Npcs",
			description = "Configures npc ids where reminder is shown (comma separated).",
			section = reminder4
	)
	default String reminder4NpcIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder4ItemIds",
			position = 35,
			name = "Items",
			description = "Configures item ids where reminder is shown (comma separated).",
			section = reminder4
	)
	default String reminder4ItemIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder4Duration",
			position = 3,
			name = "Duration",
			description = "Configures duration of reminder.",
			section = reminder4
	)
	default int reminder4Duration() { return 0; }

	@ConfigItem(
			keyName = "Reminder4Cooldown",
			position = 4,
			name = "Cooldown",
			description = "Configures cooldown of reminder.",
			section = reminder4
	)
	default int reminder4Cooldown() { return 0; }

	@ConfigItem(
			keyName = "Reminder4TimeUnit",
			position = 5,
			name = "Time Unit",
			description = "Configures the time unit for duration and cooldown.",
			section = reminder4
	)
	default TimeUnit reminder4TimeUnit() { return TimeUnit.SECONDS; }

	@ConfigItem(
			keyName = "Reminder4ChatPatterns",
			position = 36,
			name = "Messages",
			description = "Configures text or regex to match messages to show reminder. (comma separated)",
			section = reminder4
	)
	default String reminder4ChatPatterns() { return ""; }

	@ConfigItem(
			keyName = "Reminder4Notification",
			position = 6,
			name = "Notification",
			description = "Configures whether or not to show a background notification.",
			section = reminder4
	)
	default boolean reminder4Notify() { return false; }

	@ConfigItem(
			keyName = "Reminder4SeparatePanel",
			position = 7,
			name = "Location",
			description = "Configures the location for reminder.",
			section = reminder4
	)
	default Location reminder4Location() { return Location.IN_LIST; }

	@ConfigItem(
			keyName = "Reminder4panelAnchorType",
			position = 8,
			name = "Anchor",
			description = "Configures the anchor type of panel.",
			section = reminder4
	)
	default RSAnchorType reminder4PanelAnchorType() { return RSAnchorType.TOP_LEFT; }

	@ConfigItem(
			keyName = "Reminder4PanelAnchorX",
			position = 9,
			name = "X Position",
			description = "Configures the x position of panel.",
			section = reminder4
	)
	default int reminder4PanelAnchorX() { return 0; }

	@ConfigItem(
			keyName = "Reminder4PanelAnchorY",
			position = 10,
			name = "Y Position",
			description = "Configures the y position of panel.",
			section = reminder4
	)
	default int reminder4PanelAnchorY() { return 0; }

	@ConfigItem(
			keyName = "Reminder4ImageId",
			position = 14,
			name = "Image ID",
			description = "Configures image id to display in reminder.",
			section = reminder4
	)
	default int reminder4ImageId() { return 0; }

	@ConfigItem(
			keyName = "Reminder4Sound",
			position = 13,
			name = "Sound",
			description = "Configures sound that plays with reminder.",
			section = reminder4
	)
	default Sound reminder4Sound() { return Sound.NONE; }

	@ConfigItem(
			keyName = "Reminder4ImageOffsetNegative",
			position = 14,
			name = "Offset Negative",
			description = "Configures whether or not image offset is a negative number.",
			section = reminder4
	)
	default boolean reminder4ImageOffsetNegative() { return false; }


	@ConfigItem(
			keyName = "Reminder4PanelWidth",
			position = 11,
			name = "Width",
			description = "Configures width of panel.",
			section = reminder4
	)
	default int reminder4PanelWidth() { return 140; }


	@ConfigItem(
			keyName = "Reminder4PanelTextSize",
			position = 12,
			name = "Text Size",
			description = "Configures text size of reminder.",
			section = reminder4
	)
	default TextSize reminder4PanelTextSize() { return TextSize.SMALL; }


	@ConfigItem(
			keyName = "Reminder4PanelColor",
			position = 12,
			name = "Background Color",
			description = "Configures panel color.",
			section = reminder4
	)
	default Color reminder4PanelColor() { return new Color(115, 115, 115); }

	@Alpha
	@ConfigItem(
			keyName = "Reminder4PanelBorder",
			position = 12,
			name = "Border",
			description = "Configures whether or not panel has border.",
			section = reminder4
	)
	default boolean reminder4PanelBorder() { return true; }


	@ConfigItem(
			keyName = "Reminder4ForceShow",
			position = 0,
			name = "Force",
			description = "Configures whether or not to force the reminder visible.",
			section = reminder4
	)
	default boolean reminder4ForceShow() { return false; }

	@ConfigItem(
			keyName = "Reminder4ImageOffset",
			position = 14,
			name = "Image Offset",
			description = "Configures offset for image.",
			section = reminder4
	)
	default int reminder4ImageOffset() { return 0; }


	@ConfigSection(
			name = "5",
			description = "Reminder 5",
			position = 25,
			closedByDefault = true
	)
	String reminder5= "reminder5";

	@ConfigItem(
			keyName = "enableReminder5",
			position = 0,
			name = "Enable",
			description = "Configures whether or not reminder is enabled.",
			section = reminder5
	)
	default boolean reminder5Enable()  { return false; }

	@ConfigItem(
			keyName = "reminder5Text",
			position = 1,
			name = "Text",
			description = "Configures the reminder text.",
			section = reminder5
	)
	default String reminder5Text() { return ""; }

	@ConfigItem(
			keyName = "reminder5Color",
			position = 2,
			name = "Color",
			description = "Configures the text color.",
			section = reminder5
	)
	default Color reminder5Color() { return Color.WHITE; }

	@ConfigItem(
			keyName = "reminder5Times",
			position = 37,
			name = "Times",
			description = "Configures what times reminder is shown. Set times 10:00pm, 7:30pm or spans 8:30am-12:00pm, 10:00pm-1:00am. (comma separated).",
			section = reminder5
	)
	default String reminder5Times() { return ""; }

	@ConfigItem(
			keyName = "reminder5DaysOfWeek",
			position = 38,
			name = "Days",
			description = "Configures what days of week reminder is shown, e.g. Mon, Thu (comma separated).",
			section = reminder5
	)
	default String reminder5DaysOfWeek() { return ""; }

	@ConfigItem(
			keyName = "reminder5Dates",
			position = 39,
			name = "Dates",
			description = "Configures what dates reminder is shown. Set dates 04/30, 05/28/23 or ranges 9/20/22-10/30/22, 7/20-8/9. (comma separated).",
			section = reminder5
	)
	default String reminder5Dates() { return ""; }

	@ConfigItem(
			keyName = "reminder5Coordinates",
			position = 30,
			name = "Coordinates",
			description = "Configures coordinates where reminder is shown (x, y), e.g. (40, 50), (1000, 750) (comma separated).",
			section = reminder5
	)
	default String reminder5Coordinates() { return ""; }

	@ConfigItem(
			keyName = "reminder5Geofences",
			position = 31,
			name = "Geofences",
			description = "Configures geofences where reminder is shown (west, north, east, south), e.g. (40, 50, 1000, 750) (comma separated).",
			section = reminder5
	)
	default String reminder5Geofences() { return ""; }

	@ConfigItem(
			keyName = "reminder5Radius",
			position = 31,
			name = "Coordinate Radius",
			description = "Configures how far away from coordinates reminder is shown.",
			section = reminder5
	)
	default int reminder5Radius() { return 0; }

	@ConfigItem(
			keyName = "Reminder5RegionId",
			position = 33,
			name = "Regions",
			description = "Configures region ids when reminder is shown (comma separated).",
			section = reminder5
	)
	default String reminder5RegionIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder5NpcIds",
			position = 34,
			name = "Npcs",
			description = "Configures npc ids where reminder is shown (comma separated).",
			section = reminder5
	)
	default String reminder5NpcIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder5ItemIds",
			position = 35,
			name = "Items",
			description = "Configures item ids where reminder is shown (comma separated).",
			section = reminder5
	)
	default String reminder5ItemIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder5Duration",
			position = 3,
			name = "Duration",
			description = "Configures duration of reminder.",
			section = reminder5
	)
	default int reminder5Duration() { return 0; }

	@ConfigItem(
			keyName = "Reminder5Cooldown",
			position = 4,
			name = "Cooldown",
			description = "Configures cooldown of reminder.",
			section = reminder5
	)
	default int reminder5Cooldown() { return 0; }

	@ConfigItem(
			keyName = "Reminder5TimeUnit",
			position = 5,
			name = "Time Unit",
			description = "Configures the time unit for duration and cooldown.",
			section = reminder5
	)
	default TimeUnit reminder5TimeUnit() { return TimeUnit.SECONDS; }

	@ConfigItem(
			keyName = "Reminder5ChatPatterns",
			position = 36,
			name = "Messages",
			description = "Configures text or regex to match messages to show reminder. (comma separated)",
			section = reminder5
	)
	default String reminder5ChatPatterns() { return ""; }

	@ConfigItem(
			keyName = "Reminder5Notification",
			position = 6,
			name = "Notification",
			description = "Configures whether or not to show a background notification.",
			section = reminder5
	)
	default boolean reminder5Notify() { return false; }

	@ConfigItem(
			keyName = "Reminder5SeparatePanel",
			position = 7,
			name = "Location",
			description = "Configures the location for reminder.",
			section = reminder5
	)
	default Location reminder5Location() { return Location.IN_LIST; }

	@ConfigItem(
			keyName = "Reminder5panelAnchorType",
			position = 8,
			name = "Anchor",
			description = "Configures the anchor type of panel.",
			section = reminder5
	)
	default RSAnchorType reminder5PanelAnchorType() { return RSAnchorType.TOP_LEFT; }

	@ConfigItem(
			keyName = "Reminder5PanelAnchorX",
			position = 9,
			name = "X Position",
			description = "Configures the x position of panel.",
			section = reminder5
	)
	default int reminder5PanelAnchorX() { return 0; }

	@ConfigItem(
			keyName = "Reminder5PanelAnchorY",
			position = 10,
			name = "Y Position",
			description = "Configures the y position of panel.",
			section = reminder5
	)
	default int reminder5PanelAnchorY() { return 0; }

	@ConfigItem(
			keyName = "Reminder5ImageId",
			position = 14,
			name = "Image ID",
			description = "Configures image id to display in reminder.",
			section = reminder5
	)
	default int reminder5ImageId() { return 0; }

	@ConfigItem(
			keyName = "Reminder5Sound",
			position = 13,
			name = "Sound",
			description = "Configures sound that plays with reminder.",
			section = reminder5
	)
	default Sound reminder5Sound() { return Sound.NONE; }

	@ConfigItem(
			keyName = "Reminder5ImageOffsetNegative",
			position = 14,
			name = "Offset Negative",
			description = "Configures whether or not image offset is a negative number.",
			section = reminder5
	)
	default boolean reminder5ImageOffsetNegative() { return false; }


	@ConfigItem(
			keyName = "Reminder5PanelWidth",
			position = 11,
			name = "Width",
			description = "Configures width of panel.",
			section = reminder5
	)
	default int reminder5PanelWidth() { return 140; }


	@ConfigItem(
			keyName = "Reminder5PanelTextSize",
			position = 12,
			name = "Text Size",
			description = "Configures text size of reminder.",
			section = reminder5
	)
	default TextSize reminder5PanelTextSize() { return TextSize.SMALL; }


	@ConfigItem(
			keyName = "Reminder5PanelColor",
			position = 12,
			name = "Background Color",
			description = "Configures panel color.",
			section = reminder5
	)
	default Color reminder5PanelColor() { return new Color(115, 115, 115); }

	@Alpha
	@ConfigItem(
			keyName = "Reminder5PanelBorder",
			position = 12,
			name = "Border",
			description = "Configures whether or not panel has border.",
			section = reminder5
	)
	default boolean reminder5PanelBorder() { return true; }


	@ConfigItem(
			keyName = "Reminder5ForceShow",
			position = 0,
			name = "Force",
			description = "Configures whether or not to force the reminder visible.",
			section = reminder5
	)
	default boolean reminder5ForceShow() { return false; }

	@ConfigItem(
			keyName = "Reminder5ImageOffset",
			position = 14,
			name = "Image Offset",
			description = "Configures offset for image.",
			section = reminder5
	)
	default int reminder5ImageOffset() { return 0; }


	@ConfigSection(
			name = "6",
			description = "Reminder 6",
			position = 26,
			closedByDefault = true
	)
	String reminder6= "reminder6";

	@ConfigItem(
			keyName = "enableReminder6",
			position = 0,
			name = "Enable",
			description = "Configures whether or not reminder is enabled.",
			section = reminder6
	)
	default boolean reminder6Enable()  { return false; }

	@ConfigItem(
			keyName = "reminder6Text",
			position = 1,
			name = "Text",
			description = "Configures the reminder text.",
			section = reminder6
	)
	default String reminder6Text() { return ""; }

	@ConfigItem(
			keyName = "reminder6Color",
			position = 2,
			name = "Color",
			description = "Configures the text color.",
			section = reminder6
	)
	default Color reminder6Color() { return Color.WHITE; }

	@ConfigItem(
			keyName = "reminder6Times",
			position = 37,
			name = "Times",
			description = "Configures what times reminder is shown. Set times 10:00pm, 7:30pm or spans 8:30am-12:00pm, 10:00pm-1:00am. (comma separated).",
			section = reminder6
	)
	default String reminder6Times() { return ""; }

	@ConfigItem(
			keyName = "reminder6DaysOfWeek",
			position = 38,
			name = "Days",
			description = "Configures what days of week reminder is shown, e.g. Mon, Thu (comma separated).",
			section = reminder6
	)
	default String reminder6DaysOfWeek() { return ""; }

	@ConfigItem(
			keyName = "reminder6Dates",
			position = 39,
			name = "Dates",
			description = "Configures what dates reminder is shown. Set dates 04/30, 05/28/23 or ranges 9/20/22-10/30/22, 7/20-8/9. (comma separated).",
			section = reminder6
	)
	default String reminder6Dates() { return ""; }

	@ConfigItem(
			keyName = "reminder6Coordinates",
			position = 30,
			name = "Coordinates",
			description = "Configures coordinates where reminder is shown (x, y), e.g. (40, 50), (1000, 750) (comma separated).",
			section = reminder6
	)
	default String reminder6Coordinates() { return ""; }

	@ConfigItem(
			keyName = "reminder6Geofences",
			position = 31,
			name = "Geofences",
			description = "Configures geofences where reminder is shown (west, north, east, south), e.g. (40, 50, 1000, 750) (comma separated).",
			section = reminder6
	)
	default String reminder6Geofences() { return ""; }

	@ConfigItem(
			keyName = "reminder6Radius",
			position = 31,
			name = "Coordinate Radius",
			description = "Configures how far away from coordinates reminder is shown.",
			section = reminder6
	)
	default int reminder6Radius() { return 0; }

	@ConfigItem(
			keyName = "Reminder6RegionId",
			position = 33,
			name = "Regions",
			description = "Configures region ids when reminder is shown (comma separated).",
			section = reminder6
	)
	default String reminder6RegionIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder6NpcIds",
			position = 34,
			name = "Npcs",
			description = "Configures npc ids where reminder is shown (comma separated).",
			section = reminder6
	)
	default String reminder6NpcIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder6ItemIds",
			position = 35,
			name = "Items",
			description = "Configures item ids where reminder is shown (comma separated).",
			section = reminder6
	)
	default String reminder6ItemIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder6Duration",
			position = 3,
			name = "Duration",
			description = "Configures duration of reminder.",
			section = reminder6
	)
	default int reminder6Duration() { return 0; }

	@ConfigItem(
			keyName = "Reminder6Cooldown",
			position = 4,
			name = "Cooldown",
			description = "Configures cooldown of reminder.",
			section = reminder6
	)
	default int reminder6Cooldown() { return 0; }

	@ConfigItem(
			keyName = "Reminder6TimeUnit",
			position = 5,
			name = "Time Unit",
			description = "Configures the time unit for duration and cooldown.",
			section = reminder6
	)
	default TimeUnit reminder6TimeUnit() { return TimeUnit.SECONDS; }

	@ConfigItem(
			keyName = "Reminder6ChatPatterns",
			position = 36,
			name = "Messages",
			description = "Configures text or regex to match messages to show reminder. (comma separated)",
			section = reminder6
	)
	default String reminder6ChatPatterns() { return ""; }

	@ConfigItem(
			keyName = "Reminder6Notification",
			position = 6,
			name = "Notification",
			description = "Configures whether or not to show a background notification.",
			section = reminder6
	)
	default boolean reminder6Notify() { return false; }

	@ConfigItem(
			keyName = "Reminder6SeparatePanel",
			position = 7,
			name = "Location",
			description = "Configures the location for reminder.",
			section = reminder6
	)
	default Location reminder6Location() { return Location.IN_LIST; }

	@ConfigItem(
			keyName = "Reminder6panelAnchorType",
			position = 8,
			name = "Anchor",
			description = "Configures the anchor type of panel.",
			section = reminder6
	)
	default RSAnchorType reminder6PanelAnchorType() { return RSAnchorType.TOP_LEFT; }

	@ConfigItem(
			keyName = "Reminder6PanelAnchorX",
			position = 9,
			name = "X Position",
			description = "Configures the x position of panel.",
			section = reminder6
	)
	default int reminder6PanelAnchorX() { return 0; }

	@ConfigItem(
			keyName = "Reminder6PanelAnchorY",
			position = 10,
			name = "Y Position",
			description = "Configures the y position of panel.",
			section = reminder6
	)
	default int reminder6PanelAnchorY() { return 0; }

	@ConfigItem(
			keyName = "Reminder6ImageId",
			position = 14,
			name = "Image ID",
			description = "Configures image id to display in reminder.",
			section = reminder6
	)
	default int reminder6ImageId() { return 0; }

	@ConfigItem(
			keyName = "Reminder6Sound",
			position = 13,
			name = "Sound",
			description = "Configures sound that plays with reminder.",
			section = reminder6
	)
	default Sound reminder6Sound() { return Sound.NONE; }

	@ConfigItem(
			keyName = "Reminder6ImageOffsetNegative",
			position = 14,
			name = "Offset Negative",
			description = "Configures whether or not image offset is a negative number.",
			section = reminder6
	)
	default boolean reminder6ImageOffsetNegative() { return false; }


	@ConfigItem(
			keyName = "Reminder6PanelWidth",
			position = 11,
			name = "Width",
			description = "Configures width of panel.",
			section = reminder6
	)
	default int reminder6PanelWidth() { return 140; }


	@ConfigItem(
			keyName = "Reminder6PanelTextSize",
			position = 12,
			name = "Text Size",
			description = "Configures text size of reminder.",
			section = reminder6
	)
	default TextSize reminder6PanelTextSize() { return TextSize.SMALL; }


	@ConfigItem(
			keyName = "Reminder6PanelColor",
			position = 12,
			name = "Background Color",
			description = "Configures panel color.",
			section = reminder6
	)
	default Color reminder6PanelColor() { return new Color(115, 115, 115); }

	@Alpha
	@ConfigItem(
			keyName = "Reminder6PanelBorder",
			position = 12,
			name = "Border",
			description = "Configures whether or not panel has border.",
			section = reminder6
	)
	default boolean reminder6PanelBorder() { return true; }


	@ConfigItem(
			keyName = "Reminder6ForceShow",
			position = 0,
			name = "Force",
			description = "Configures whether or not to force the reminder visible.",
			section = reminder6
	)
	default boolean reminder6ForceShow() { return false; }

	@ConfigItem(
			keyName = "Reminder6ImageOffset",
			position = 14,
			name = "Image Offset",
			description = "Configures offset for image.",
			section = reminder6
	)
	default int reminder6ImageOffset() { return 0; }


	@ConfigSection(
			name = "7",
			description = "Reminder 7",
			position = 27,
			closedByDefault = true
	)
	String reminder7= "reminder7";

	@ConfigItem(
			keyName = "enableReminder7",
			position = 0,
			name = "Enable",
			description = "Configures whether or not reminder is enabled.",
			section = reminder7
	)
	default boolean reminder7Enable()  { return false; }

	@ConfigItem(
			keyName = "reminder7Text",
			position = 1,
			name = "Text",
			description = "Configures the reminder text.",
			section = reminder7
	)
	default String reminder7Text() { return ""; }

	@ConfigItem(
			keyName = "reminder7Color",
			position = 2,
			name = "Color",
			description = "Configures the text color.",
			section = reminder7
	)
	default Color reminder7Color() { return Color.WHITE; }

	@ConfigItem(
			keyName = "reminder7Times",
			position = 37,
			name = "Times",
			description = "Configures what times reminder is shown. Set times 10:00pm, 7:30pm or spans 8:30am-12:00pm, 10:00pm-1:00am. (comma separated).",
			section = reminder7
	)
	default String reminder7Times() { return ""; }

	@ConfigItem(
			keyName = "reminder7DaysOfWeek",
			position = 38,
			name = "Days",
			description = "Configures what days of week reminder is shown, e.g. Mon, Thu (comma separated).",
			section = reminder7
	)
	default String reminder7DaysOfWeek() { return ""; }

	@ConfigItem(
			keyName = "reminder7Dates",
			position = 39,
			name = "Dates",
			description = "Configures what dates reminder is shown. Set dates 04/30, 05/28/23 or ranges 9/20/22-10/30/22, 7/20-8/9. (comma separated).",
			section = reminder7
	)
	default String reminder7Dates() { return ""; }

	@ConfigItem(
			keyName = "reminder7Coordinates",
			position = 30,
			name = "Coordinates",
			description = "Configures coordinates where reminder is shown (x, y), e.g. (40, 50), (1000, 750) (comma separated).",
			section = reminder7
	)
	default String reminder7Coordinates() { return ""; }

	@ConfigItem(
			keyName = "reminder7Geofences",
			position = 31,
			name = "Geofences",
			description = "Configures geofences where reminder is shown (west, north, east, south), e.g. (40, 50, 1000, 750) (comma separated).",
			section = reminder7
	)
	default String reminder7Geofences() { return ""; }

	@ConfigItem(
			keyName = "reminder7Radius",
			position = 31,
			name = "Coordinate Radius",
			description = "Configures how far away from coordinates reminder is shown.",
			section = reminder7
	)
	default int reminder7Radius() { return 0; }

	@ConfigItem(
			keyName = "Reminder7RegionId",
			position = 33,
			name = "Regions",
			description = "Configures region ids when reminder is shown (comma separated).",
			section = reminder7
	)
	default String reminder7RegionIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder7NpcIds",
			position = 34,
			name = "Npcs",
			description = "Configures npc ids where reminder is shown (comma separated).",
			section = reminder7
	)
	default String reminder7NpcIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder7ItemIds",
			position = 35,
			name = "Items",
			description = "Configures item ids where reminder is shown (comma separated).",
			section = reminder7
	)
	default String reminder7ItemIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder7Duration",
			position = 3,
			name = "Duration",
			description = "Configures duration of reminder.",
			section = reminder7
	)
	default int reminder7Duration() { return 0; }

	@ConfigItem(
			keyName = "Reminder7Cooldown",
			position = 4,
			name = "Cooldown",
			description = "Configures cooldown of reminder.",
			section = reminder7
	)
	default int reminder7Cooldown() { return 0; }

	@ConfigItem(
			keyName = "Reminder7TimeUnit",
			position = 5,
			name = "Time Unit",
			description = "Configures the time unit for duration and cooldown.",
			section = reminder7
	)
	default TimeUnit reminder7TimeUnit() { return TimeUnit.SECONDS; }

	@ConfigItem(
			keyName = "Reminder7ChatPatterns",
			position = 36,
			name = "Messages",
			description = "Configures text or regex to match messages to show reminder. (comma separated)",
			section = reminder7
	)
	default String reminder7ChatPatterns() { return ""; }

	@ConfigItem(
			keyName = "Reminder7Notification",
			position = 6,
			name = "Notification",
			description = "Configures whether or not to show a background notification.",
			section = reminder7
	)
	default boolean reminder7Notify() { return false; }

	@ConfigItem(
			keyName = "Reminder7SeparatePanel",
			position = 7,
			name = "Location",
			description = "Configures the location for reminder.",
			section = reminder7
	)
	default Location reminder7Location() { return Location.IN_LIST; }

	@ConfigItem(
			keyName = "Reminder7panelAnchorType",
			position = 8,
			name = "Anchor",
			description = "Configures the anchor type of panel.",
			section = reminder7
	)
	default RSAnchorType reminder7PanelAnchorType() { return RSAnchorType.TOP_LEFT; }

	@ConfigItem(
			keyName = "Reminder7PanelAnchorX",
			position = 9,
			name = "X Position",
			description = "Configures the x position of panel.",
			section = reminder7
	)
	default int reminder7PanelAnchorX() { return 0; }

	@ConfigItem(
			keyName = "Reminder7PanelAnchorY",
			position = 10,
			name = "Y Position",
			description = "Configures the y position of panel.",
			section = reminder7
	)
	default int reminder7PanelAnchorY() { return 0; }

	@ConfigItem(
			keyName = "Reminder7ImageId",
			position = 14,
			name = "Image ID",
			description = "Configures image id to display in reminder.",
			section = reminder7
	)
	default int reminder7ImageId() { return 0; }

	@ConfigItem(
			keyName = "Reminder7Sound",
			position = 13,
			name = "Sound",
			description = "Configures sound that plays with reminder.",
			section = reminder7
	)
	default Sound reminder7Sound() { return Sound.NONE; }

	@ConfigItem(
			keyName = "Reminder7ImageOffsetNegative",
			position = 14,
			name = "Offset Negative",
			description = "Configures whether or not image offset is a negative number.",
			section = reminder7
	)
	default boolean reminder7ImageOffsetNegative() { return false; }


	@ConfigItem(
			keyName = "Reminder7PanelWidth",
			position = 11,
			name = "Width",
			description = "Configures width of panel.",
			section = reminder7
	)
	default int reminder7PanelWidth() { return 140; }


	@ConfigItem(
			keyName = "Reminder7PanelTextSize",
			position = 12,
			name = "Text Size",
			description = "Configures text size of reminder.",
			section = reminder7
	)
	default TextSize reminder7PanelTextSize() { return TextSize.SMALL; }


	@ConfigItem(
			keyName = "Reminder7PanelColor",
			position = 12,
			name = "Background Color",
			description = "Configures panel color.",
			section = reminder7
	)
	default Color reminder7PanelColor() { return new Color(115, 115, 115); }

	@Alpha
	@ConfigItem(
			keyName = "Reminder7PanelBorder",
			position = 12,
			name = "Border",
			description = "Configures whether or not panel has border.",
			section = reminder7
	)
	default boolean reminder7PanelBorder() { return true; }


	@ConfigItem(
			keyName = "Reminder7ForceShow",
			position = 0,
			name = "Force",
			description = "Configures whether or not to force the reminder visible.",
			section = reminder7
	)
	default boolean reminder7ForceShow() { return false; }

	@ConfigItem(
			keyName = "Reminder7ImageOffset",
			position = 14,
			name = "Image Offset",
			description = "Configures offset for image.",
			section = reminder7
	)
	default int reminder7ImageOffset() { return 0; }


	@ConfigSection(
			name = "8",
			description = "Reminder 8",
			position = 28,
			closedByDefault = true
	)
	String reminder8= "reminder8";

	@ConfigItem(
			keyName = "enableReminder8",
			position = 0,
			name = "Enable",
			description = "Configures whether or not reminder is enabled.",
			section = reminder8
	)
	default boolean reminder8Enable()  { return false; }

	@ConfigItem(
			keyName = "reminder8Text",
			position = 1,
			name = "Text",
			description = "Configures the reminder text.",
			section = reminder8
	)
	default String reminder8Text() { return ""; }

	@ConfigItem(
			keyName = "reminder8Color",
			position = 2,
			name = "Color",
			description = "Configures the text color.",
			section = reminder8
	)
	default Color reminder8Color() { return Color.WHITE; }

	@ConfigItem(
			keyName = "reminder8Times",
			position = 37,
			name = "Times",
			description = "Configures what times reminder is shown. Set times 10:00pm, 7:30pm or spans 8:30am-12:00pm, 10:00pm-1:00am. (comma separated).",
			section = reminder8
	)
	default String reminder8Times() { return ""; }

	@ConfigItem(
			keyName = "reminder8DaysOfWeek",
			position = 38,
			name = "Days",
			description = "Configures what days of week reminder is shown, e.g. Mon, Thu (comma separated).",
			section = reminder8
	)
	default String reminder8DaysOfWeek() { return ""; }

	@ConfigItem(
			keyName = "reminder8Dates",
			position = 39,
			name = "Dates",
			description = "Configures what dates reminder is shown. Set dates 04/30, 05/28/23 or ranges 9/20/22-10/30/22, 7/20-8/9. (comma separated).",
			section = reminder8
	)
	default String reminder8Dates() { return ""; }

	@ConfigItem(
			keyName = "reminder8Coordinates",
			position = 30,
			name = "Coordinates",
			description = "Configures coordinates where reminder is shown (x, y), e.g. (40, 50), (1000, 750) (comma separated).",
			section = reminder8
	)
	default String reminder8Coordinates() { return ""; }

	@ConfigItem(
			keyName = "reminder8Geofences",
			position = 31,
			name = "Geofences",
			description = "Configures geofences where reminder is shown (west, north, east, south), e.g. (40, 50, 1000, 750) (comma separated).",
			section = reminder8
	)
	default String reminder8Geofences() { return ""; }

	@ConfigItem(
			keyName = "reminder8Radius",
			position = 31,
			name = "Coordinate Radius",
			description = "Configures how far away from coordinates reminder is shown.",
			section = reminder8
	)
	default int reminder8Radius() { return 0; }

	@ConfigItem(
			keyName = "Reminder8RegionId",
			position = 33,
			name = "Regions",
			description = "Configures region ids when reminder is shown (comma separated).",
			section = reminder8
	)
	default String reminder8RegionIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder8NpcIds",
			position = 34,
			name = "Npcs",
			description = "Configures npc ids where reminder is shown (comma separated).",
			section = reminder8
	)
	default String reminder8NpcIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder8ItemIds",
			position = 35,
			name = "Items",
			description = "Configures item ids where reminder is shown (comma separated).",
			section = reminder8
	)
	default String reminder8ItemIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder8Duration",
			position = 3,
			name = "Duration",
			description = "Configures duration of reminder.",
			section = reminder8
	)
	default int reminder8Duration() { return 0; }

	@ConfigItem(
			keyName = "Reminder8Cooldown",
			position = 4,
			name = "Cooldown",
			description = "Configures cooldown of reminder.",
			section = reminder8
	)
	default int reminder8Cooldown() { return 0; }

	@ConfigItem(
			keyName = "Reminder8TimeUnit",
			position = 5,
			name = "Time Unit",
			description = "Configures the time unit for duration and cooldown.",
			section = reminder8
	)
	default TimeUnit reminder8TimeUnit() { return TimeUnit.SECONDS; }

	@ConfigItem(
			keyName = "Reminder8ChatPatterns",
			position = 36,
			name = "Messages",
			description = "Configures text or regex to match messages to show reminder. (comma separated)",
			section = reminder8
	)
	default String reminder8ChatPatterns() { return ""; }

	@ConfigItem(
			keyName = "Reminder8Notification",
			position = 6,
			name = "Notification",
			description = "Configures whether or not to show a background notification.",
			section = reminder8
	)
	default boolean reminder8Notify() { return false; }

	@ConfigItem(
			keyName = "Reminder8SeparatePanel",
			position = 7,
			name = "Location",
			description = "Configures the location for reminder.",
			section = reminder8
	)
	default Location reminder8Location() { return Location.IN_LIST; }

	@ConfigItem(
			keyName = "Reminder8panelAnchorType",
			position = 8,
			name = "Anchor",
			description = "Configures the anchor type of panel.",
			section = reminder8
	)
	default RSAnchorType reminder8PanelAnchorType() { return RSAnchorType.TOP_LEFT; }

	@ConfigItem(
			keyName = "Reminder8PanelAnchorX",
			position = 9,
			name = "X Position",
			description = "Configures the x position of panel.",
			section = reminder8
	)
	default int reminder8PanelAnchorX() { return 0; }

	@ConfigItem(
			keyName = "Reminder8PanelAnchorY",
			position = 10,
			name = "Y Position",
			description = "Configures the y position of panel.",
			section = reminder8
	)
	default int reminder8PanelAnchorY() { return 0; }

	@ConfigItem(
			keyName = "Reminder8ImageId",
			position = 14,
			name = "Image ID",
			description = "Configures image id to display in reminder.",
			section = reminder8
	)
	default int reminder8ImageId() { return 0; }

	@ConfigItem(
			keyName = "Reminder8Sound",
			position = 13,
			name = "Sound",
			description = "Configures sound that plays with reminder.",
			section = reminder8
	)
	default Sound reminder8Sound() { return Sound.NONE; }

	@ConfigItem(
			keyName = "Reminder8ImageOffsetNegative",
			position = 14,
			name = "Offset Negative",
			description = "Configures whether or not image offset is a negative number.",
			section = reminder8
	)
	default boolean reminder8ImageOffsetNegative() { return false; }


	@ConfigItem(
			keyName = "Reminder8PanelWidth",
			position = 11,
			name = "Width",
			description = "Configures width of panel.",
			section = reminder8
	)
	default int reminder8PanelWidth() { return 140; }


	@ConfigItem(
			keyName = "Reminder8PanelTextSize",
			position = 12,
			name = "Text Size",
			description = "Configures text size of reminder.",
			section = reminder8
	)
	default TextSize reminder8PanelTextSize() { return TextSize.SMALL; }


	@ConfigItem(
			keyName = "Reminder8PanelColor",
			position = 12,
			name = "Background Color",
			description = "Configures panel color.",
			section = reminder8
	)
	default Color reminder8PanelColor() { return new Color(115, 115, 115); }

	@Alpha
	@ConfigItem(
			keyName = "Reminder8PanelBorder",
			position = 12,
			name = "Border",
			description = "Configures whether or not panel has border.",
			section = reminder8
	)
	default boolean reminder8PanelBorder() { return true; }


	@ConfigItem(
			keyName = "Reminder8ForceShow",
			position = 0,
			name = "Force",
			description = "Configures whether or not to force the reminder visible.",
			section = reminder8
	)
	default boolean reminder8ForceShow() { return false; }

	@ConfigItem(
			keyName = "Reminder8ImageOffset",
			position = 14,
			name = "Image Offset",
			description = "Configures offset for image.",
			section = reminder8
	)
	default int reminder8ImageOffset() { return 0; }


	@ConfigSection(
			name = "9",
			description = "Reminder 9",
			position = 29,
			closedByDefault = true
	)
	String reminder9= "reminder9";

	@ConfigItem(
			keyName = "enableReminder9",
			position = 0,
			name = "Enable",
			description = "Configures whether or not reminder is enabled.",
			section = reminder9
	)
	default boolean reminder9Enable()  { return false; }

	@ConfigItem(
			keyName = "reminder9Text",
			position = 1,
			name = "Text",
			description = "Configures the reminder text.",
			section = reminder9
	)
	default String reminder9Text() { return ""; }

	@ConfigItem(
			keyName = "reminder9Color",
			position = 2,
			name = "Color",
			description = "Configures the text color.",
			section = reminder9
	)
	default Color reminder9Color() { return Color.WHITE; }

	@ConfigItem(
			keyName = "reminder9Times",
			position = 37,
			name = "Times",
			description = "Configures what times reminder is shown. Set times 10:00pm, 7:30pm or spans 8:30am-12:00pm, 10:00pm-1:00am. (comma separated).",
			section = reminder9
	)
	default String reminder9Times() { return ""; }

	@ConfigItem(
			keyName = "reminder9DaysOfWeek",
			position = 38,
			name = "Days",
			description = "Configures what days of week reminder is shown, e.g. Mon, Thu (comma separated).",
			section = reminder9
	)
	default String reminder9DaysOfWeek() { return ""; }

	@ConfigItem(
			keyName = "reminder9Dates",
			position = 39,
			name = "Dates",
			description = "Configures what dates reminder is shown. Set dates 04/30, 05/28/23 or ranges 9/20/22-10/30/22, 7/20-8/9. (comma separated).",
			section = reminder9
	)
	default String reminder9Dates() { return ""; }

	@ConfigItem(
			keyName = "reminder9Coordinates",
			position = 30,
			name = "Coordinates",
			description = "Configures coordinates where reminder is shown (x, y), e.g. (40, 50), (1000, 750) (comma separated).",
			section = reminder9
	)
	default String reminder9Coordinates() { return ""; }

	@ConfigItem(
			keyName = "reminder9Geofences",
			position = 31,
			name = "Geofences",
			description = "Configures geofences where reminder is shown (west, north, east, south), e.g. (40, 50, 1000, 750) (comma separated).",
			section = reminder9
	)
	default String reminder9Geofences() { return ""; }

	@ConfigItem(
			keyName = "reminder9Radius",
			position = 31,
			name = "Coordinate Radius",
			description = "Configures how far away from coordinates reminder is shown.",
			section = reminder9
	)
	default int reminder9Radius() { return 0; }

	@ConfigItem(
			keyName = "Reminder9RegionId",
			position = 33,
			name = "Regions",
			description = "Configures region ids when reminder is shown (comma separated).",
			section = reminder9
	)
	default String reminder9RegionIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder9NpcIds",
			position = 34,
			name = "Npcs",
			description = "Configures npc ids where reminder is shown (comma separated).",
			section = reminder9
	)
	default String reminder9NpcIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder9ItemIds",
			position = 35,
			name = "Items",
			description = "Configures item ids where reminder is shown (comma separated).",
			section = reminder9
	)
	default String reminder9ItemIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder9Duration",
			position = 3,
			name = "Duration",
			description = "Configures duration of reminder.",
			section = reminder9
	)
	default int reminder9Duration() { return 0; }

	@ConfigItem(
			keyName = "Reminder9Cooldown",
			position = 4,
			name = "Cooldown",
			description = "Configures cooldown of reminder.",
			section = reminder9
	)
	default int reminder9Cooldown() { return 0; }

	@ConfigItem(
			keyName = "Reminder9TimeUnit",
			position = 5,
			name = "Time Unit",
			description = "Configures the time unit for duration and cooldown.",
			section = reminder9
	)
	default TimeUnit reminder9TimeUnit() { return TimeUnit.SECONDS; }

	@ConfigItem(
			keyName = "Reminder9ChatPatterns",
			position = 36,
			name = "Messages",
			description = "Configures text or regex to match messages to show reminder. (comma separated)",
			section = reminder9
	)
	default String reminder9ChatPatterns() { return ""; }

	@ConfigItem(
			keyName = "Reminder9Notification",
			position = 6,
			name = "Notification",
			description = "Configures whether or not to show a background notification.",
			section = reminder9
	)
	default boolean reminder9Notify() { return false; }

	@ConfigItem(
			keyName = "Reminder9SeparatePanel",
			position = 7,
			name = "Location",
			description = "Configures the location for reminder.",
			section = reminder9
	)
	default Location reminder9Location() { return Location.IN_LIST; }

	@ConfigItem(
			keyName = "Reminder9panelAnchorType",
			position = 8,
			name = "Anchor",
			description = "Configures the anchor type of panel.",
			section = reminder9
	)
	default RSAnchorType reminder9PanelAnchorType() { return RSAnchorType.TOP_LEFT; }

	@ConfigItem(
			keyName = "Reminder9PanelAnchorX",
			position = 9,
			name = "X Position",
			description = "Configures the x position of panel.",
			section = reminder9
	)
	default int reminder9PanelAnchorX() { return 0; }

	@ConfigItem(
			keyName = "Reminder9PanelAnchorY",
			position = 10,
			name = "Y Position",
			description = "Configures the y position of panel.",
			section = reminder9
	)
	default int reminder9PanelAnchorY() { return 0; }

	@ConfigItem(
			keyName = "Reminder9ImageId",
			position = 14,
			name = "Image ID",
			description = "Configures image id to display in reminder.",
			section = reminder9
	)
	default int reminder9ImageId() { return 0; }

	@ConfigItem(
			keyName = "Reminder9Sound",
			position = 13,
			name = "Sound",
			description = "Configures sound that plays with reminder.",
			section = reminder9
	)
	default Sound reminder9Sound() { return Sound.NONE; }

	@ConfigItem(
			keyName = "Reminder9ImageOffsetNegative",
			position = 14,
			name = "Offset Negative",
			description = "Configures whether or not image offset is a negative number.",
			section = reminder9
	)
	default boolean reminder9ImageOffsetNegative() { return false; }


	@ConfigItem(
			keyName = "Reminder9PanelWidth",
			position = 11,
			name = "Width",
			description = "Configures width of panel.",
			section = reminder9
	)
	default int reminder9PanelWidth() { return 140; }


	@ConfigItem(
			keyName = "Reminder9PanelTextSize",
			position = 12,
			name = "Text Size",
			description = "Configures text size of reminder.",
			section = reminder9
	)
	default TextSize reminder9PanelTextSize() { return TextSize.SMALL; }


	@ConfigItem(
			keyName = "Reminder9PanelColor",
			position = 12,
			name = "Background Color",
			description = "Configures panel color.",
			section = reminder9
	)
	default Color reminder9PanelColor() { return new Color(115, 115, 115); }

	@Alpha
	@ConfigItem(
			keyName = "Reminder9PanelBorder",
			position = 12,
			name = "Border",
			description = "Configures whether or not panel has border.",
			section = reminder9
	)
	default boolean reminder9PanelBorder() { return true; }


	@ConfigItem(
			keyName = "Reminder9ForceShow",
			position = 0,
			name = "Force",
			description = "Configures whether or not to force the reminder visible.",
			section = reminder9
	)
	default boolean reminder9ForceShow() { return false; }

	@ConfigItem(
			keyName = "Reminder9ImageOffset",
			position = 14,
			name = "Image Offset",
			description = "Configures offset for image.",
			section = reminder9
	)
	default int reminder9ImageOffset() { return 0; }


	@ConfigSection(
			name = "10",
			description = "Reminder 10",
			position = 30,
			closedByDefault = true
	)
	String reminder10= "reminder10";

	@ConfigItem(
			keyName = "enableReminder10",
			position = 0,
			name = "Enable",
			description = "Configures whether or not reminder is enabled.",
			section = reminder10
	)
	default boolean reminder10Enable()  { return false; }

	@ConfigItem(
			keyName = "reminder10Text",
			position = 1,
			name = "Text",
			description = "Configures the reminder text.",
			section = reminder10
	)
	default String reminder10Text() { return ""; }

	@ConfigItem(
			keyName = "reminder10Color",
			position = 2,
			name = "Color",
			description = "Configures the text color.",
			section = reminder10
	)
	default Color reminder10Color() { return Color.WHITE; }

	@ConfigItem(
			keyName = "reminder10Times",
			position = 37,
			name = "Times",
			description = "Configures what times reminder is shown. Set times 10:00pm, 7:30pm or spans 8:30am-12:00pm, 10:00pm-1:00am. (comma separated).",
			section = reminder10
	)
	default String reminder10Times() { return ""; }

	@ConfigItem(
			keyName = "reminder10DaysOfWeek",
			position = 38,
			name = "Days",
			description = "Configures what days of week reminder is shown, e.g. Mon, Thu (comma separated).",
			section = reminder10
	)
	default String reminder10DaysOfWeek() { return ""; }

	@ConfigItem(
			keyName = "reminder10Dates",
			position = 39,
			name = "Dates",
			description = "Configures what dates reminder is shown. Set dates 04/30, 05/28/23 or ranges 9/20/22-10/30/22, 7/20-8/9. (comma separated).",
			section = reminder10
	)
	default String reminder10Dates() { return ""; }

	@ConfigItem(
			keyName = "reminder10Coordinates",
			position = 30,
			name = "Coordinates",
			description = "Configures coordinates where reminder is shown (x, y), e.g. (40, 50), (1000, 750) (comma separated).",
			section = reminder10
	)
	default String reminder10Coordinates() { return ""; }

	@ConfigItem(
			keyName = "reminder10Geofences",
			position = 31,
			name = "Geofences",
			description = "Configures geofences where reminder is shown (west, north, east, south), e.g. (40, 50, 1000, 750) (comma separated).",
			section = reminder10
	)
	default String reminder10Geofences() { return ""; }

	@ConfigItem(
			keyName = "reminder10Radius",
			position = 31,
			name = "Coordinate Radius",
			description = "Configures how far away from coordinates reminder is shown.",
			section = reminder10
	)
	default int reminder10Radius() { return 0; }

	@ConfigItem(
			keyName = "Reminder10RegionId",
			position = 33,
			name = "Regions",
			description = "Configures region ids when reminder is shown (comma separated).",
			section = reminder10
	)
	default String reminder10RegionIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder10NpcIds",
			position = 34,
			name = "Npcs",
			description = "Configures npc ids where reminder is shown (comma separated).",
			section = reminder10
	)
	default String reminder10NpcIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder10ItemIds",
			position = 35,
			name = "Items",
			description = "Configures item ids where reminder is shown (comma separated).",
			section = reminder10
	)
	default String reminder10ItemIds() { return ""; }

	@ConfigItem(
			keyName = "Reminder10Duration",
			position = 3,
			name = "Duration",
			description = "Configures duration of reminder.",
			section = reminder10
	)
	default int reminder10Duration() { return 0; }

	@ConfigItem(
			keyName = "Reminder10Cooldown",
			position = 4,
			name = "Cooldown",
			description = "Configures cooldown of reminder.",
			section = reminder10
	)
	default int reminder10Cooldown() { return 0; }

	@ConfigItem(
			keyName = "Reminder10TimeUnit",
			position = 5,
			name = "Time Unit",
			description = "Configures the time unit for duration and cooldown.",
			section = reminder10
	)
	default TimeUnit reminder10TimeUnit() { return TimeUnit.SECONDS; }

	@ConfigItem(
			keyName = "Reminder10ChatPatterns",
			position = 36,
			name = "Messages",
			description = "Configures text or regex to match messages to show reminder. (comma separated)",
			section = reminder10
	)
	default String reminder10ChatPatterns() { return ""; }

	@ConfigItem(
			keyName = "Reminder10Notification",
			position = 6,
			name = "Notification",
			description = "Configures whether or not to show a background notification.",
			section = reminder10
	)
	default boolean reminder10Notify() { return false; }

	@ConfigItem(
			keyName = "Reminder10SeparatePanel",
			position = 7,
			name = "Location",
			description = "Configures the location for reminder.",
			section = reminder10
	)
	default Location reminder10Location() { return Location.IN_LIST; }

	@ConfigItem(
			keyName = "Reminder10panelAnchorType",
			position = 8,
			name = "Anchor",
			description = "Configures the anchor type of panel.",
			section = reminder10
	)
	default RSAnchorType reminder10PanelAnchorType() { return RSAnchorType.TOP_LEFT; }

	@ConfigItem(
			keyName = "Reminder10PanelAnchorX",
			position = 9,
			name = "X Position",
			description = "Configures the x position of panel.",
			section = reminder10
	)
	default int reminder10PanelAnchorX() { return 0; }

	@ConfigItem(
			keyName = "Reminder10PanelAnchorY",
			position = 10,
			name = "Y Position",
			description = "Configures the y position of panel.",
			section = reminder10
	)
	default int reminder10PanelAnchorY() { return 0; }

	@ConfigItem(
			keyName = "Reminder10ImageId",
			position = 14,
			name = "Image ID",
			description = "Configures image id to display in reminder.",
			section = reminder10
	)
	default int reminder10ImageId() { return 0; }

	@ConfigItem(
			keyName = "Reminder10Sound",
			position = 13,
			name = "Sound",
			description = "Configures sound that plays with reminder.",
			section = reminder10
	)
	default Sound reminder10Sound() { return Sound.NONE; }

	@ConfigItem(
			keyName = "Reminder10ImageOffsetNegative",
			position = 14,
			name = "Offset Negative",
			description = "Configures whether or not image offset is a negative number.",
			section = reminder10
	)
	default boolean reminder10ImageOffsetNegative() { return false; }


	@ConfigItem(
			keyName = "Reminder10PanelWidth",
			position = 11,
			name = "Width",
			description = "Configures width of panel.",
			section = reminder10
	)
	default int reminder10PanelWidth() { return 140; }


	@ConfigItem(
			keyName = "Reminder10PanelTextSize",
			position = 12,
			name = "Text Size",
			description = "Configures text size of reminder.",
			section = reminder10
	)
	default TextSize reminder10PanelTextSize() { return TextSize.SMALL; }


	@ConfigItem(
			keyName = "Reminder10PanelColor",
			position = 12,
			name = "Background Color",
			description = "Configures panel color.",
			section = reminder10
	)
	default Color reminder10PanelColor() { return new Color(115, 115, 115); }

	@Alpha
	@ConfigItem(
			keyName = "Reminder10PanelBorder",
			position = 12,
			name = "Border",
			description = "Configures whether or not panel has border.",
			section = reminder10
	)
	default boolean reminder10PanelBorder() { return true; }


	@ConfigItem(
			keyName = "Reminder10ForceShow",
			position = 0,
			name = "Force",
			description = "Configures whether or not to force the reminder visible.",
			section = reminder10
	)
	default boolean reminder10ForceShow() { return false; }

	@ConfigItem(
			keyName = "Reminder10ImageOffset",
			position = 14,
			name = "Image Offset",
			description = "Configures offset for image.",
			section = reminder10
	)
	default int reminder10ImageOffset() { return 0; }
}
package com.ericversteeg;

import com.ericversteeg.model.config.Location;
import com.ericversteeg.model.config.TextSize;
import com.ericversteeg.model.Prompt;
import com.ericversteeg.view.*;
import net.runelite.api.Client;
import net.runelite.api.ItemComposition;
import net.runelite.api.NPC;
import net.runelite.client.game.ItemManager;
import net.runelite.client.ui.FontManager;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.ComponentConstants;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.InputStream;
import java.time.Instant;
import java.util.ArrayList;
import java.util.stream.Collectors;

class ProximityPromptOverlay extends RSViewOverlay {

	private final Client client;
	private final ItemManager itemManager;
	private final ProximityPromptPlugin plugin;
	private final ProximityPromptConfig config;

	private Font font;

	private final Color panelBackgroundColor = ComponentConstants.STANDARD_BACKGROUND_COLOR;
	private final Color outerBorderColor = new Color(57, 41, 13, 124);
	private final Color innerBorderColor = new Color(147, 141, 130, 37);

	@Inject
	private ProximityPromptOverlay(
			Client client,
			ItemManager itemManager,
			ProximityPromptPlugin plugin,
			ProximityPromptConfig config)
	{
		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_WIDGETS);

		this.client = client;
		this.itemManager = itemManager;
		this.plugin = plugin;
		this.config = config;

		try {
			GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
			InputStream inRunescapeSmall = FontManager.class.getResourceAsStream("runescape_small.ttf");
			Font smallFont = Font.createFont(Font.TRUETYPE_FONT, inRunescapeSmall)
					.deriveFont(Font.PLAIN,  12);
			ge.registerFont(smallFont);
			font = smallFont;
		}
		catch (Exception e)
		{
			font = FontManager.getRunescapeSmallFont();
		}

		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.UNDER_WIDGETS);
	}

	void updateViews()
	{
		clearViewInfo();

		//long start = Instant.now().toEpochMilli();

		font = fontForTextSize(config.textSize().ordinal());

		int minWidth = 140;
		if (font == FontManager.getRunescapeBoldFont())
		{
			minWidth = 160;
		}
		int panelWidth = Math.max(config.width(), minWidth);

		RSColumn panel = new RSColumn(10, 120, panelWidth, RSView.WRAP_CONTENT);
		panel.setBgColor(panelBackgroundColor);
		panel.addBorder(innerBorderColor, outerBorderColor);
		panel.setPadding(4);

		java.util.List<Prompt> listPrompts = plugin.activePrompts.stream()
				.sorted(((o1, o2) -> (int) (o2.posted - o1.posted)))
				.filter(obj -> obj.location == Location.IN_LIST.ordinal())
				.filter(obj -> !obj.text.trim().isEmpty())
				.collect(Collectors.toList());

		for (Prompt prompt : listPrompts)
		{
			String text = prompt.text;
			if (text.trim().isEmpty()) continue;

			Color color;
			if (prompt.color != null)
			{
				color = prompt.color;
			}
			else
			{
				try
				{
					color = Color.decode(prompt.colorStr);
				}
				catch (Exception exception)
				{
					color = Color.WHITE;
				}
			}

			RSRow row = new RSRow(0, 0, RSView.MATCH_PARENT, RSView.WRAP_CONTENT);
			if (listPrompts.indexOf(prompt) + 1 < listPrompts.size())
			{
				row.setMarginBottom(5);
			}

			RSTextView leftText = new RSTextView(0, 0, RSView.WRAP_CONTENT, RSView.WRAP_CONTENT, font);

			leftText.setTextColor(color);
			leftText.setText("•");
			leftText.setMarginEnd(3);

			row.addView(leftText);

			RSTextView rightText = new RSTextView(0, 0, 0, RSView.WRAP_CONTENT, font);

			rightText.setTextColor(color);
			rightText.setText(text);
			rightText.setWeight(1f);

			int imageId = prompt.imageId;

			if (imageId > 0)
			{
				BufferedImage image = itemManager.getImage(imageId);
				if (image != null)
				{
					int imageWidth;
					if (config.textSize() == TextSize.SMALL)
					{
						imageWidth = 24;
					}
					else
					{
						imageWidth = 32;
					}

					image = ImageUtil.resizeImage(image, imageWidth, imageWidth, true);
					rightText.setImage(image, imageWidth, imageWidth, RSViewGroup.Gravity.TOP_START);
					rightText.setImageOffset(prompt.imageOffset, prompt.isOffsetNegative);
				}
			}

			row.addView(rightText);

			panel.addView(row);
		}

		java.util.List<Prompt> panelPrompts = plugin.activePrompts.stream()
				.sorted(((o1, o2) -> (int) (o2.posted - o1.posted)))
				.filter(obj -> obj.location != Location.IN_LIST.ordinal())
				.filter(obj -> !obj.text.trim().isEmpty())
				.collect(Collectors.toList());

		for (Prompt prompt : panelPrompts)
		{
			String text = prompt.text;
			if (text.trim().isEmpty()) continue;

			if (prompt.location == Location.WORD_WRAP.ordinal())
			{
				renderPromptWordWrapPanel(prompt);
			}
			else if (prompt.location == Location.SINGLE_LINE.ordinal())
			{
				renderPromptSingleLinePanel(prompt);
			}
		}

		if (config.idFinder())
		{
			renderIds(panel);
		}
		else if (listPrompts.isEmpty())
		{
			return;
		}

		addViewInfo(new ViewInfo(client, panel, config.anchorType(),
				config.anchorX(), config.anchorY()));

		//System.out.println("View setup in " + (Instant.now().toEpochMilli() - start) + "ms");
	}

	private void renderPromptWordWrapPanel(Prompt prompt)
	{
		String text = prompt.text;
		Color color = prompt.color;

		Color panelColor = prompt.bgColor;

		RSRow panel = new RSRow(10, 120, Math.max(prompt.width, 50), RSView.WRAP_CONTENT);
		panel.setBgColor(new Color(panelColor.getRed(), panelColor.getGreen(), panelColor.getBlue(), 156));

		if (prompt.hasBorder)
		{
			panel.addBorder(panelColor);
		}

		panel.setPadding(4);

		RSTextView textView = new RSTextView(0, 0, RSView.MATCH_PARENT,
				RSView.WRAP_CONTENT, fontForTextSize(prompt.textSize));

		textView.setTextColor(color);
		textView.setText(text);

		int imageId = prompt.imageId;

		if (imageId > 0)
		{
			BufferedImage image = itemManager.getImage(imageId);
			if (image != null)
			{
				int imageWidth;
				if (prompt.textSize == TextSize.SMALL.ordinal())
				{
					imageWidth = 24;
				}
				else
				{
					imageWidth = 32;
				}

				image = ImageUtil.resizeImage(image, imageWidth, imageWidth, true);
				textView.setImage(image, imageWidth, imageWidth, RSViewGroup.Gravity.TOP_START);
				textView.setImageOffset(prompt.imageOffset, prompt.isOffsetNegative);
			}
		}

		panel.addView(textView);

		addViewInfo(new ViewInfo(client, panel, RSAnchorType.values()[prompt.anchorType],
				prompt.anchorX, prompt.anchorY));
	}

	private void renderPromptSingleLinePanel(Prompt prompt)
	{
		String text = prompt.text;
		Color color = prompt.color;

		RSImageView imageView = new RSImageView(RSView.WRAP_CONTENT, RSView.WRAP_CONTENT);
		
		int imageId = prompt.imageId;

		int imageWidth = 0;
		if (imageId > 0)
		{
			BufferedImage image = itemManager.getImage(imageId);
			if (image != null)
			{
				if (prompt.textSize == TextSize.SMALL.ordinal())
				{
					imageWidth = 24;
				}
				else
				{
					imageWidth = 32;
				}

				image = ImageUtil.resizeImage(image, imageWidth, imageWidth, true);
				imageView.setImage(image);
				imageView.setOffset(prompt.imageOffset, prompt.isOffsetNegative);
			}
		}

		Color panelColor = prompt.bgColor;

		int panelHeight = RSView.WRAP_CONTENT;
		if (imageWidth > 0)
		{
			panelHeight = imageWidth;
		}

		RSRow panel = new RSRow(10, 120, RSView.WRAP_CONTENT, panelHeight);
		panel.setBgColor(new Color(panelColor.getRed(), panelColor.getGreen(), panelColor.getBlue(), 156));

		if (prompt.hasBorder)
		{
			panel.addBorder(panelColor);
		}

		panel.setPadding(4);

		panel.addView(imageView);

		RSTextView textView = new RSTextView(0, 0, RSView.WRAP_CONTENT,
				RSView.WRAP_CONTENT, fontForTextSize(prompt.textSize));

		if (imageWidth > 0)
		{
			textView.setLayoutGravity(RSViewGroup.Gravity.START);
		}

		textView.setTextColor(color);
		textView.setText(text);

		panel.addView(textView);

		addViewInfo(new ViewInfo(client, panel, RSAnchorType.values()[prompt.anchorType],
				prompt.anchorX, prompt.anchorY));
	}

	private void renderIds(RSColumn panel)
	{
		RSBox box = new RSBox(0, 0, RSView.MATCH_PARENT, RSView.WRAP_CONTENT);

		RSTextView left = new RSTextView(0, 0, RSView.WRAP_CONTENT, RSView.WRAP_CONTENT, font);
		left.setTextColor(Color.GREEN);
		left.setText("Location");
		left.setLayoutGravity(RSViewGroup.Gravity.START);

		RSTextView right = new RSTextView(0, 0, RSView.WRAP_CONTENT, RSView.WRAP_CONTENT, font);
		right.setText(String.format("(%d, %d)", plugin.worldPos.getX(), plugin.worldPos.getY()));
		right.setLayoutGravity(RSViewGroup.Gravity.END);

		box.addView(left);
		box.addView(right);

		panel.addView(box);

		box = new RSBox(0, 0, RSView.MATCH_PARENT, RSView.WRAP_CONTENT);

		left = new RSTextView(0, 0, RSView.WRAP_CONTENT, RSView.WRAP_CONTENT, font);
		left.setTextColor(Color.GREEN);
		left.setText("Region");
		left.setLayoutGravity(RSViewGroup.Gravity.START);

		right = new RSTextView(0, 0, RSView.WRAP_CONTENT, RSView.WRAP_CONTENT, font);
		right.setText(String.valueOf(plugin.regionId));
		right.setLayoutGravity(RSViewGroup.Gravity.END);

		box.addView(left);
		box.addView(right);

		panel.addView(box);

		java.util.List<Integer> npcIds = new ArrayList<>();
		for (NPC npc: plugin.npcs)
		{
			if (npc.getId() == -1) continue;

			if (!npcIds.contains(npc.getId()))
			{
				RSRow row = new RSRow(0, 0, RSView.MATCH_PARENT, RSView.WRAP_CONTENT);

				left = new RSTextView(0, 0, 0, RSView.WRAP_CONTENT, font);
				left.setTextColor(Color.CYAN);
				left.setText(npc.getName());
				left.setWeight(1f);

				right = new RSTextView(0, 0, RSView.WRAP_CONTENT, RSView.WRAP_CONTENT, font);
				right.setText(String.valueOf(npc.getId()));
				right.setMarginStart(10);

				row.addView(left);
				row.addView(right);

				panel.addView(row);

				npcIds.add(npc.getId());
			}
		}

		for (ItemComposition item: plugin.items)
		{
			if (item.getId() == -1) continue;

			RSRow row = new RSRow(0, 0, RSView.MATCH_PARENT, RSView.WRAP_CONTENT);

			left = new RSTextView(0, 0, 0, RSView.WRAP_CONTENT, font);
			left.setTextColor(Color.YELLOW);
			left.setText(item.getName());
			left.setWeight(1f);

			right = new RSTextView(0, 0, RSView.WRAP_CONTENT, RSView.WRAP_CONTENT, font);
			right.setText(String.valueOf(item.getId()));
			right.setMarginStart(10);

			row.addView(left);
			row.addView(right);

			panel.addView(row);
		}
	}

	private Font fontForTextSize(int textSize)
	{
		Font font;
		if (textSize == TextSize.SMALL.ordinal())
		{
			font = FontManager.getRunescapeSmallFont();
		}
		else if (textSize == TextSize.LARGE.ordinal())
		{
			font = FontManager.getRunescapeFont();
		}
		else
		{
			font = FontManager.getRunescapeBoldFont();
		}

		return font;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		updateViews();
		return super.render(graphics);
	}
}

package com.ericversteeg;

import com.ericversteeg.model.config.Location;
import com.ericversteeg.model.config.Sound;
import com.ericversteeg.model.config.TextSize;
import com.ericversteeg.model.config.TimeUnit;
import com.ericversteeg.model.Prompt;
import com.ericversteeg.view.RSAnchorType;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.inject.Provides;
import net.runelite.api.*;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.client.Notifier;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.RuneScapeProfileChanged;
import net.runelite.client.game.ItemManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;
import javax.inject.Provider;
import java.awt.*;
import java.time.*;
import java.time.temporal.ChronoField;
import java.util.*;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@PluginDescriptor(
	name = "Fun Reminders",
	description = "Create reminders."
)

public class ProximityPromptPlugin extends Plugin {

	@Inject
	private ProximityPromptOverlay overlay;
	@Inject
	private OverlayManager overlayManager;
	@Inject
	private Client client;
	@Inject
	private ProximityPromptConfig config;
	@Inject
	private ConfigManager configManager;
	@Inject
	private Gson gson;
	@Inject
	private ItemManager itemManager;
	@Inject
	private Notifier notifier;
	@Inject
	private Provider<ClientThread> clientThreadProvider;

	List<Prompt> prompts = new ArrayList<>();
	List<Prompt> activePrompts = new ArrayList<>();
	List<Prompt> inactivePrompts = new ArrayList<>();

	LocalDateTime dateTime = LocalDateTime.now(ZoneId.systemDefault());
	long startTime = 0L;

	int regionId = 0;
	int lastRegionId = 0;
	WorldPoint worldPos = new WorldPoint(0, 0, 0);

	List<NPC> npcs = new ArrayList<>();
	List<ChatMessage> chatMessages = new ArrayList<>();
	List<ItemComposition> items = new ArrayList<>();

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);

		prompts = getAllPrompts();
		activePrompts = getActivePrompts(prompts);
	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);
	}

	@Provides
	ProximityPromptConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ProximityPromptConfig.class);
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged config)
	{
		if (config.getGroup().equals(ProximityPromptConfig.GROUP))
		{
			prompts = getAllPrompts();
			activePrompts = getActivePrompts(prompts);

			if (config.getKey().matches("^.*?Sound$"))
			{
				int soundId = Sound.valueOf(config.getNewValue()).getId();

				if (soundId > 0)
				{
					clientThreadProvider.get().invoke(() ->
							client.playSoundEffect(
									soundId,
									SoundEffectVolume.HIGH
							)
					);
				}
			}
		}
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		if (startTime == 0L)
		{
			startTime = Instant.now().toEpochMilli();
		}

		dateTime = LocalDateTime.now(ZoneId.systemDefault());

		activePrompts = getActivePrompts(prompts);

		items.clear();

		regionId = WorldPoint.fromLocalInstance(
				client,
				client.getLocalPlayer().getLocalLocation()
		).getRegionID();

		lastRegionId = regionId;

		worldPos = client.getLocalPlayer().getWorldLocation();

		final ItemContainer itemContainer = client.getItemContainer(InventoryID.INVENTORY);

		if (itemContainer == null)
		{
			return;
		}

		final Item[] inventoryItems = itemContainer.getItems();
		for (Item item : inventoryItems)
		{
			ItemComposition itemComposition = itemManager.getItemComposition(item.getId());

			if (!itemsContainsId(itemComposition.getId()))
			{
				items.add(itemComposition);
			}
		}

		final List<ItemComposition> equipmentItems = getEquipment();
		for (ItemComposition itemComposition: equipmentItems)
		{
			if (!itemsContainsId(itemComposition.getId()))
			{
				items.add(itemComposition);
			}
		}
	}

	@Subscribe(priority = -1)
	private void onNpcSpawned(NpcSpawned npcSpawned)
	{
		NPC npc = npcSpawned.getNpc();
		npcs.add(npc);
	}

	@Subscribe(priority = -1)
	public void onNpcDespawned(NpcDespawned npcDespawned)
	{
		NPC npc = npcDespawned.getNpc();
		npcs.remove(npc);
	}

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage)
	{
		chatMessages.add(chatMessage);
	}

	private boolean npcsContainsName(String name)
	{
		for (NPC npc : npcs) {
			if (name.equals(npc.getName()))
			{
				return true;
			}
		}
		return false;
	}

	private List<Prompt> getAllPrompts()
	{
		long start = Instant.now().toEpochMilli();

		List<Prompt> prompts = new ArrayList<>();

		for (int i = 1; i <= 100; i++)
		{
			Prompt prompt = new Prompt();

			prompt.id = i;
			prompt.enable = isEnable(i);
			prompt.force = isForceShow(i);
			prompt.text = getText(i);
			prompt.color = getColor(i);
			prompt.duration = getDuration(i);
			prompt.cooldown = getCooldown(i);
			prompt.timeUnit = getTimeUnit(i).getType();
			prompt.notify = isNotify(i);
			prompt.location = getLocation(i).ordinal();
			prompt.anchorType = getPanelAnchorType(i).ordinal();
			prompt.anchorX = getPanelAnchorX(i);
			prompt.anchorY = getPanelAnchorY(i);
			prompt.width = getPanelWidth(i);
			prompt.hasBorder = isPanelBorder(i);
			prompt.bgColor = getPanelColor(i);
			prompt.textSize = getPanelTextSize(i).ordinal();
			prompt.sound = getSound(i).ordinal();
			prompt.imageId = getImageId(i);
			prompt.imageOffset = getImageOffset(i);
			prompt.isOffsetNegative = isImageOffsetNegative(i);
			prompt.times = getTimes(i);
			prompt.days = getDaysOfWeek(i);
			prompt.dates = getDates(i);
			prompt.coordinates = getCoordinates(i);
			prompt.radius = getRadius(i);
			prompt.geoFences = getGeofences(i);
			prompt.regionIds = getRegionIds(i);
			prompt.npcIds = getNpcIds(i);
			prompt.itemIds = getItemIds(i);
			prompt.chatPatterns = getChatPatterns(i);

			prompts.add(prompt);
		}

		try {
			JsonArray jsonArray = gson.fromJson(config.customReminders(), JsonArray.class);

			int i = 1;
			for (JsonElement jsonElement: jsonArray)
			{
				JsonObject jsonObject = jsonElement.getAsJsonObject();

				Prompt prompt = new Prompt();

				prompt.id = 100 + i;

				prompt.enable = true;

				if (jsonObject.has("force"))
				{
					prompt.force = jsonObject.get("force").getAsBoolean();
				}

				if (jsonObject.has("text"))
				{
					prompt.text = jsonObject.get("text").getAsString();
				}

				if (jsonObject.has("color"))
				{
					prompt.colorStr = jsonObject.get("color").getAsString();
					prompt.color = Color.decode(prompt.colorStr);
				}

				if (jsonObject.has("duration"))
				{
					prompt.duration = jsonObject.get("duration").getAsInt();
				}

				if (jsonObject.has("cd"))
				{
					prompt.cooldown = jsonObject.get("cd").getAsInt();
				}

				if (jsonObject.has("cooldown"))
				{
					prompt.cooldown = jsonObject.get("cooldown").getAsInt();
				}

				if (jsonObject.has("unit"))
				{
					prompt.timeUnit = jsonObject.get("unit").getAsInt();
				}

				if (jsonObject.has("notify"))
				{
					prompt.notify = jsonObject.get("notify").getAsBoolean();
				}

				if (jsonObject.has("location"))
				{
					prompt.location = jsonObject.get("location").getAsInt();
				}

				if (jsonObject.has("anchor"))
				{
					prompt.anchorType = jsonObject.get("anchor").getAsInt();
				}

				if (jsonObject.has("x"))
				{
					prompt.anchorX = jsonObject.get("x").getAsInt();
				}

				if (jsonObject.has("y"))
				{
					prompt.anchorY = jsonObject.get("y").getAsInt();
				}

				if (jsonObject.has("width"))
				{
					prompt.width = jsonObject.get("width").getAsInt();
				}

				if (jsonObject.has("border"))
				{
					prompt.hasBorder = jsonObject.get("border").getAsBoolean();
				}

				if (jsonObject.has("bg"))
				{
					prompt.bgColorStr = jsonObject.get("bg").getAsString();
					prompt.bgColor = Color.decode(prompt.bgColorStr);
				}

				if (jsonObject.has("tsize"))
				{
					prompt.textSize = jsonObject.get("tsize").getAsInt();
				}

				if (jsonObject.has("sound"))
				{
					prompt.sound = jsonObject.get("sound").getAsInt();
				}

				if (jsonObject.has("image"))
				{
					prompt.imageId = jsonObject.get("image").getAsInt();
				}

				if (jsonObject.has("offset"))
				{
					prompt.imageOffset = jsonObject.get("offset").getAsInt();
				}

				if (jsonObject.has("noffset"))
				{
					prompt.isOffsetNegative = jsonObject.get("noffset").getAsBoolean();
				}

				if (jsonObject.has("coords"))
				{
					prompt.coordinates = toCsv(jsonObject.get("coords").getAsJsonArray());
				}

				if (jsonObject.has("radius"))
				{
					prompt.radius = jsonObject.get("radius").getAsInt();
				}

				if (jsonObject.has("geofences"))
				{
					prompt.geoFences = toCsv(jsonObject.get("geofences").getAsJsonArray());
				}

				if (jsonObject.has("regions"))
				{
					prompt.regionIds = toCsv(jsonObject.get("regions").getAsJsonArray());
				}

				if (jsonObject.has("npcs"))
				{
					prompt.npcIds = toCsv(jsonObject.get("npcs").getAsJsonArray());
				}

				if (jsonObject.has("items"))
				{
					prompt.itemIds = toCsv(jsonObject.get("items").getAsJsonArray());
				}

				if (jsonObject.has("messages"))
				{
					prompt.chatPatterns = toCsv(jsonObject.get("messages").getAsJsonArray());
				}

				if (jsonObject.has("times"))
				{
					prompt.times = toCsv(jsonObject.get("times").getAsJsonArray());
				}

				if (jsonObject.has("days"))
				{
					prompt.days = toCsv(jsonObject.get("days").getAsJsonArray());
				}

				if (jsonObject.has("dates"))
				{
					prompt.dates = toCsv(jsonObject.get("dates").getAsJsonArray());
				}

				prompts.add(prompt);

				i++;
			}
		}
		catch (Exception exception)
		{
			System.out.println(exception.getMessage());
			return prompts;
		}


		//System.out.println("Get prompts took " + (Instant.now().toEpochMilli() - start) + "ms");

		return prompts;
	}

	private List<Prompt> getActivePrompts(List<Prompt> prompts)
	{
		long start = Instant.now().toEpochMilli();

		List<Prompt> activeList = new ArrayList<>();

		activePrompts.addAll(inactivePrompts);
		inactivePrompts.clear();

		for (Prompt prompt : prompts)
		{
			if (prompt.force)
			{
				activeList.add(prompt);
			}
		}

		for (Prompt prompt : prompts)
		{
			if (prompt.enable && !prompt.force)
			{
				if (!((checkTimes(prompt.times) && !matchesTimes(prompt.times)) ||
					(checkDaysOfWeek(prompt.days) && !matchesDaysOfWeek(prompt.days)) ||
					(checkDates(prompt.dates) && !matchesDates(prompt.dates)) ||
					(checkCoordinates(prompt.coordinates) && !matchesCoordinates(prompt.coordinates, prompt.radius)) ||
					(checkGeoFences(prompt.geoFences) && !matchesGeoFences(prompt.geoFences)) ||
					(checkRegions(prompt.regionIds) && !matchesRegions(prompt.regionIds)) ||
					(checkNpcIds(prompt.npcIds) && !matchesNpcIds(prompt.npcIds)) ||
					(checkItemIds(prompt.itemIds) && !matchesItemIds(prompt.itemIds)) ||
					(checkChatPatterns(prompt.chatPatterns) && !matchesChatPatterns(prompt.chatPatterns)))
				)
				{
					Prompt currentActive = currentActivePrompt(prompt.id);
					if (currentActive != null)
					{
						prompt.posted = currentActive.posted;
						prompt.active = currentActive.active;
					}
					else
					{
						prompt.posted = Instant.now().toEpochMilli();
						prompt.active = true;

						playSound(prompt.sound);

						if (prompt.notify && prompt.lastNotified <= Instant.now().toEpochMilli() - 30000)
						{
							notifier.notify(prompt.text);
							prompt.lastNotified = Instant.now().toEpochMilli();
						}
					}

					if (Instant.now().toEpochMilli() >= prompt.posted
							+ prompt.getDurationMillis() + prompt.getCooldownMillis())
					{
						prompt.active = true;
						prompt.posted = Instant.now().toEpochMilli();

						if (prompt.cooldown > 0)
						{
							playSound(prompt.sound);
						}

						if (prompt.notify && prompt.lastNotified <= Instant.now().toEpochMilli() - 30000)
						{
							notifier.notify(prompt.text);
							prompt.lastNotified = Instant.now().toEpochMilli();
						}

						activeList.add(prompt);
						continue;
					}
				}

				if (prompt.posted > 0)
				{
					if (Instant.now().toEpochMilli() >= prompt.posted
							+ prompt.getDurationMillis() + prompt.getCooldownMillis())
					{
						continue;
					}

					prompt.active = Instant.now().toEpochMilli() < prompt.posted
							+ prompt.getDurationMillis();

					if (prompt.active)
					{
						activeList.add(prompt);
					}
					else
					{
						inactivePrompts.add(prompt);
					}
				}
			}
		}

		chatMessages.clear();

		//System.out.println("Get active took " + (Instant.now().toEpochMilli() - start) + "ms");

		return activeList;
	}

	private Prompt currentActivePrompt(int id)
	{
		for (Prompt prompt : activePrompts)
		{
			if (prompt.id == id)
			{
				return prompt;
			}
		}
		return null;
	}

	private void playSound(int sound)
	{
		if (Instant.now().toEpochMilli() - startTime < 5000
				|| sound == 0)
		{
			return;
		}

		clientThreadProvider.get().invoke(() ->
				client.playSoundEffect(
						Sound.values()[sound].getId(),
						SoundEffectVolume.HIGH
				)
		);
	}

	private List<ItemComposition> getEquipment()
	{
		ItemContainer itemContainer = client.getItemContainer(InventoryID.EQUIPMENT);

		if (itemContainer == null)
		{
			return new ArrayList<>();
		}

		Item ring = itemContainer.getItem(EquipmentInventorySlot.RING.getSlotIdx());
		Item ammo = itemContainer.getItem(EquipmentInventorySlot.AMMO.getSlotIdx());

		Player player = client.getLocalPlayer();

		int [] ids = player.getPlayerComposition().getEquipmentIds();

		List<Integer> eIds = new ArrayList<>();

		for (int id: ids)
		{
			if (id < 512)
			{
				continue;
			}

			eIds.add(id - 512);
		}

		if (ring != null)
		{
			eIds.add(ring.getId());
		}

		if (ammo != null)
		{
			eIds.add(ammo.getId());
		}

		return eIds.stream().map(itemManager::getItemComposition)
				.collect(Collectors.toList());
	}

	private boolean itemsContainsId(int id)
	{
		for (ItemComposition item : items)
		{
			if (id == item.getId())
			{
				return true;
			}
		}
		return false;
	}

	private String toCsv(JsonArray jsonArray)
	{
		StringBuilder sb = new StringBuilder();

		for (JsonElement jsonElement: jsonArray)
		{
			sb.append(jsonElement.getAsString());
			sb.append(",");
		}

		return sb.substring(0, sb.length() - 1);
	}

	private boolean checkTimes(String times)
	{
		return !times.isEmpty();
	}

	private boolean matchesTimes(String times)
	{
		try {
			String [] timeRanges = times.split(",");

			for (String timeRangeStr: timeRanges)
			{
				LocalDateTime startDateTime;
				LocalDateTime endDateTime;

				if (!timeRangeStr.contains("-"))
				{
					startDateTime = toLocalDateTime(timeRangeStr);
					endDateTime = startDateTime.plusMinutes(30);
				}
				else
				{
					String [] timeRangeParts = timeRangeStr.split("-");

					startDateTime = toLocalDateTime(timeRangeParts[0]);
					endDateTime = toLocalDateTime(timeRangeParts[1]);
				}

				if (dateTime.isAfter(startDateTime) && dateTime.isBefore(endDateTime))
				{
					return true;
				}
			}

			return false;
		}
		catch (Exception exception)
		{
			System.out.println(exception.getMessage());
			return false;
		}
	}

	private LocalDateTime toLocalDateTime(String amPmTime)
	{
		String [] timeParts = amPmTime.split(":");

		int h = Integer.parseInt(timeParts[0].trim());

		String ma = timeParts[1]
				.toLowerCase()
				.trim();

		int m = Integer.parseInt(ma
				.replace("am", "")
				.replace("pm", ""));


		String aStr = ma
				.substring(ma.length() - 2);

		if (aStr.equals("pm"))
		{
			if (h != 12)
			{
				h += 12;
			}
		}
		else
		{
			if (h == 12)
			{
				h = 0;
			}
		}

		return LocalDate.now(ZoneId.systemDefault()).atTime(h, m);
	}

	private boolean checkDaysOfWeek(String daysOfWeek)
	{
		return !daysOfWeek.isEmpty();
	}

	private boolean matchesDaysOfWeek(String daysOfWeekStr)
	{
		try {
			String [] daysOfWeek = daysOfWeekStr.split(",");

			for (String dayOfWeek: daysOfWeek)
			{
				String lcDayOfWeek = dayOfWeek.toLowerCase();
				int d = 0;
				if (lcDayOfWeek.startsWith("mo")) d = 1;
				else if (lcDayOfWeek.startsWith("tu")) d = 2;
				else if (lcDayOfWeek.startsWith("we")) d = 3;
				else if (lcDayOfWeek.startsWith("th")) d = 4;
				else if (lcDayOfWeek.startsWith("fr")) d = 5;
				else if (lcDayOfWeek.startsWith("sa")) d = 6;
				else if (lcDayOfWeek.startsWith("su")) d = 7;

				boolean matches = dateTime.get(ChronoField.DAY_OF_WEEK) == d;

				if (matches)
				{
					return true;
				}
			}

			return false;
		}
		catch (Exception exception)
		{
			System.out.println(exception.getMessage());
			return false;
		}
	}

	private boolean checkDates(String dates)
	{
		return !dates.isEmpty();
	}

	private boolean matchesDates(String datesStr)
	{
		try {
			String [] dateRanges = datesStr.split(",");

			for (String dateRangeOrStr: dateRanges)
			{
				LocalDate startLocalDate;
				LocalDate endLocalDate;

				if (dateRangeOrStr.contains("-"))
				{
					String [] dateRangeParts = dateRangeOrStr.split("-");

					startLocalDate = toLocalDate(dateRangeParts[0]);
					endLocalDate = toLocalDate(dateRangeParts[1]);
				}
				else
				{
					startLocalDate = toLocalDate(dateRangeOrStr);
					endLocalDate = toLocalDate(dateRangeOrStr);
				}

				if (startLocalDate.atStartOfDay().isBefore(dateTime)
						&& endLocalDate.plusDays(1).atStartOfDay().isAfter(dateTime))
				{
					return true;
				}
			}

			return false;
		}
		catch (Exception exception)
		{
			System.out.println(exception.getMessage());
			return false;
		}
	}

	private LocalDate toLocalDate(String dateStr)
	{
		String [] dateParts = dateStr.split("/");

		int m = Integer.parseInt(dateParts[0].trim());
		int d = Integer.parseInt(dateParts[1].trim());

		if (dateParts.length > 2)
		{
			int y = Integer.parseInt(dateParts[2].trim());
			return LocalDate.of(y + 2000, m, d);
		}

		return LocalDate.of(dateTime.getYear(), m, d);
	}

	private boolean checkCoordinates(String coordinates)
	{
		return !coordinates.isEmpty();
	}

	private boolean matchesCoordinates(String coordinatesStr, int radius)
	{
		try {
			String [] coordinates = coordinatesStr.split(",");

			int x = 0;
			for (int i = 0; i < coordinates.length; i++)
			{
				String xOrY = coordinates[i]
						.replace("(", "")
						.replace(")", "")
						.trim();

				if (i % 2 == 0)
				{
					x = Integer.parseInt(xOrY);
					continue;
				}

				int y = Integer.parseInt(xOrY);

				double distance = Math.sqrt(
						Math.pow(x - worldPos.getX(), 2) +
								Math.pow(y - worldPos.getY(), 2)
				);

				boolean matches = distance <= radius;

				if (matches)
				{
					return true;
				}
			}

			return false;
		}
		catch (Exception exception)
		{
			System.out.println(exception.getMessage());
			return false;
		}
	}

	private boolean checkGeoFences(String geoFences)
	{
		return !geoFences.isEmpty();
	}

	private boolean matchesGeoFences(String geoFences)
	{
		try {
			String [] coordinates = geoFences.split(",");

			int left = 0;
			int top = 0;
			int right = 0;
			for (int i = 0; i < coordinates.length; i++)
			{
				String side = coordinates[i]
						.replace("(", "")
						.replace(")", "")
						.trim();

				if (i % 4 == 0)
				{
					left = Integer.parseInt(side);
					continue;
				}
				else if (i % 4 == 1)
				{
					top = Integer.parseInt(side);
					continue;
				}
				else if (i % 4 == 2)
				{
					right = Integer.parseInt(side);
					continue;
				}

				int bottom = Integer.parseInt(side);

				boolean matches = worldPos.getX() >= left && worldPos.getX() <= right
						&& worldPos.getY() >= bottom && worldPos.getY() <= top;

				if (matches)
				{
					return true;
				}
			}

			return false;
		}
		catch (Exception exception)
		{
			System.out.println(exception.getMessage());
			return false;
		}
	}

	private boolean checkRegions(String regionIds)
	{
		return !regionIds.isEmpty();
	}

	private boolean matchesRegions(String regionIds)
	{
		try {
			String [] ids = regionIds.split(",");

			for (String idStr: ids)
			{
				int id = Integer.parseInt(idStr.trim());

				boolean matches = regionId == id;

				if (matches)
				{
					return true;
				}
			}

			return false;
		}
		catch (Exception exception)
		{
			return false;
		}
	}

	private boolean checkNpcIds(String npcIds)
	{
		return !npcIds.isEmpty();
	}

	private boolean matchesNpcIds(String npcIdsStr)
	{
		try {
			String [] npcIds = npcIdsStr.split(",");

			for (String npcIdStr: npcIds)
			{
				int npcId = Integer.parseInt(npcIdStr.trim());

				boolean matches = false;
				for (NPC npc: npcs)
				{
					if (npc.getId() == npcId) {
						matches = true;
						break;
					}
				}

				if (matches)
				{
					return true;
				}
			}

			return false;
		}
		catch (Exception exception)
		{
			return false;
		}
	}

	private boolean checkItemIds(String itemIds)
	{
		return !itemIds.isEmpty();
	}

	private boolean matchesItemIds(String itemIdsStr)
	{
		try {
			String [] itemIds = itemIdsStr.split(",");

			for (String itemIdStr: itemIds)
			{
				int itemId = Integer.parseInt(itemIdStr.trim());

				boolean matches = false;
				for (ItemComposition item: items)
				{
					if (item.getId() == itemId) {
						matches = true;
						break;
					}
				}

				if (matches)
				{
					return true;
				}
			}

			return false;
		}
		catch (Exception exception)
		{
			return false;
		}
	}

	private boolean checkChatPatterns(String chatPatterns)
	{
		return !chatPatterns.isEmpty();
	}

	private boolean matchesChatPatterns(String chatPatternsStr)
	{
		try {
			String [] chatPatterns = chatPatternsStr.split(",");

			for (String chatPattern: chatPatterns)
			{
				chatPattern = chatPattern.trim();

				for (ChatMessage chatMessage: chatMessages)
				{
					Matcher matcher = Pattern.compile(chatPattern)
							.matcher(chatMessage.getMessage());

					if (matcher.find()) {
						return true;
					}
				}
			}

			return false;
		}
		catch (Exception exception)
		{
			return false;
		}
	}

	boolean isEnable(int promptId)
	{
		if (promptId == 1) return config.reminder1Enable();
		else if (promptId == 2) return config.reminder2Enable();
		else if (promptId == 3) return config.reminder3Enable();
		else if (promptId == 4) return config.reminder4Enable();
		else if (promptId == 5) return config.reminder5Enable();
		else if (promptId == 6) return config.reminder6Enable();
		else if (promptId == 7) return config.reminder7Enable();
		else if (promptId == 8) return config.reminder8Enable();
		else if (promptId == 9) return config.reminder9Enable();
		else if (promptId == 10) return config.reminder10Enable();
		else return false;
	}

	String getText(int promptId)
	{
		if (promptId == 1) return config.reminder1Text();
		else if (promptId == 2) return config.reminder2Text();
		else if (promptId == 3) return config.reminder3Text();
		else if (promptId == 4) return config.reminder4Text();
		else if (promptId == 5) return config.reminder5Text();
		else if (promptId == 6) return config.reminder6Text();
		else if (promptId == 7) return config.reminder7Text();
		else if (promptId == 8) return config.reminder8Text();
		else if (promptId == 9) return config.reminder9Text();
		else if (promptId == 10) return config.reminder10Text();
		else return "";
	}

	Color getColor(int promptId)
	{
		if (promptId == 1) return config.reminder1Color();
		else if (promptId == 2) return config.reminder2Color();
		else if (promptId == 3) return config.reminder3Color();
		else if (promptId == 4) return config.reminder4Color();
		else if (promptId == 5) return config.reminder5Color();
		else if (promptId == 6) return config.reminder6Color();
		else if (promptId == 7) return config.reminder7Color();
		else if (promptId == 8) return config.reminder8Color();
		else if (promptId == 9) return config.reminder9Color();
		else if (promptId == 10) return config.reminder10Color();
		else return Color.WHITE;
	}

	int getDuration(int promptId)
	{
		if (promptId == 1) return config.reminder1Duration();
		else if (promptId == 2) return config.reminder2Duration();
		else if (promptId == 3) return config.reminder3Duration();
		else if (promptId == 4) return config.reminder4Duration();
		else if (promptId == 5) return config.reminder5Duration();
		else if (promptId == 6) return config.reminder6Duration();
		else if (promptId == 7) return config.reminder7Duration();
		else if (promptId == 8) return config.reminder8Duration();
		else if (promptId == 9) return config.reminder9Duration();
		else if (promptId == 10) return config.reminder10Duration();
		else return 0;
	}

	int getCooldown(int promptId)
	{
		if (promptId == 1) return config.reminder1Cooldown();
		else if (promptId == 2) return config.reminder2Cooldown();
		else if (promptId == 3) return config.reminder3Cooldown();
		else if (promptId == 4) return config.reminder4Cooldown();
		else if (promptId == 5) return config.reminder5Cooldown();
		else if (promptId == 6) return config.reminder6Cooldown();
		else if (promptId == 7) return config.reminder7Cooldown();
		else if (promptId == 8) return config.reminder8Cooldown();
		else if (promptId == 9) return config.reminder9Cooldown();
		else if (promptId == 10) return config.reminder10Cooldown();
		else return 0;
	}

	TimeUnit getTimeUnit(int promptId)
	{
		if (promptId == 1) return config.reminder1TimeUnit();
		else if (promptId == 2) return config.reminder2TimeUnit();
		else if (promptId == 3) return config.reminder3TimeUnit();
		else if (promptId == 4) return config.reminder4TimeUnit();
		else if (promptId == 5) return config.reminder5TimeUnit();
		else if (promptId == 6) return config.reminder6TimeUnit();
		else if (promptId == 7) return config.reminder7TimeUnit();
		else if (promptId == 8) return config.reminder8TimeUnit();
		else if (promptId == 9) return config.reminder9TimeUnit();
		else if (promptId == 10) return config.reminder10TimeUnit();
		else return TimeUnit.SECONDS;
	}

	boolean isNotify(int promptId)
	{
		if (promptId == 1) return config.reminder1Notify();
		else if (promptId == 2) return config.reminder2Notify();
		else if (promptId == 3) return config.reminder3Notify();
		else if (promptId == 4) return config.reminder4Notify();
		else if (promptId == 5) return config.reminder5Notify();
		else if (promptId == 6) return config.reminder6Notify();
		else if (promptId == 7) return config.reminder7Notify();
		else if (promptId == 8) return config.reminder8Notify();
		else if (promptId == 9) return config.reminder9Notify();
		else if (promptId == 10) return config.reminder10Notify();
		else return false;
	}

	String getTimes(int promptId)
	{
		if (promptId == 1) return config.reminder1Times();
		else if (promptId == 2) return config.reminder2Times();
		else if (promptId == 3) return config.reminder3Times();
		else if (promptId == 4) return config.reminder4Times();
		else if (promptId == 5) return config.reminder5Times();
		else if (promptId == 6) return config.reminder6Times();
		else if (promptId == 7) return config.reminder7Times();
		else if (promptId == 8) return config.reminder8Times();
		else if (promptId == 9) return config.reminder9Times();
		else if (promptId == 10) return config.reminder10Times();
		else return "";
	}

	String getDaysOfWeek(int promptId)
	{
		if (promptId == 1) return config.reminder1DaysOfWeek();
		else if (promptId == 2) return config.reminder2DaysOfWeek();
		else if (promptId == 3) return config.reminder3DaysOfWeek();
		else if (promptId == 4) return config.reminder4DaysOfWeek();
		else if (promptId == 5) return config.reminder5DaysOfWeek();
		else if (promptId == 6) return config.reminder6DaysOfWeek();
		else if (promptId == 7) return config.reminder7DaysOfWeek();
		else if (promptId == 8) return config.reminder8DaysOfWeek();
		else if (promptId == 9) return config.reminder9DaysOfWeek();
		else if (promptId == 10) return config.reminder10DaysOfWeek();
		else return "";
	}

	String getDates(int promptId)
	{
		if (promptId == 1) return config.reminder1Dates();
		else if (promptId == 2) return config.reminder2Dates();
		else if (promptId == 3) return config.reminder3Dates();
		else if (promptId == 4) return config.reminder4Dates();
		else if (promptId == 5) return config.reminder5Dates();
		else if (promptId == 6) return config.reminder6Dates();
		else if (promptId == 7) return config.reminder7Dates();
		else if (promptId == 8) return config.reminder8Dates();
		else if (promptId == 9) return config.reminder9Dates();
		else if (promptId == 10) return config.reminder10Dates();
		else return "";
	}

	String getCoordinates(int promptId)
	{
		if (promptId == 1) return config.reminder1Coordinates();
		else if (promptId == 2) return config.reminder2Coordinates();
		else if (promptId == 3) return config.reminder3Coordinates();
		else if (promptId == 4) return config.reminder4Coordinates();
		else if (promptId == 5) return config.reminder5Coordinates();
		else if (promptId == 6) return config.reminder6Coordinates();
		else if (promptId == 7) return config.reminder7Coordinates();
		else if (promptId == 8) return config.reminder8Coordinates();
		else if (promptId == 9) return config.reminder9Coordinates();
		else if (promptId == 10) return config.reminder10Coordinates();
		else return "";
	}

	int getRadius(int promptId)
	{
		if (promptId == 1) return config.reminder1Radius();
		else if (promptId == 2) return config.reminder2Radius();
		else if (promptId == 3) return config.reminder3Radius();
		else if (promptId == 4) return config.reminder4Radius();
		else if (promptId == 5) return config.reminder5Radius();
		else if (promptId == 6) return config.reminder6Radius();
		else if (promptId == 7) return config.reminder7Radius();
		else if (promptId == 8) return config.reminder8Radius();
		else if (promptId == 9) return config.reminder9Radius();
		else if (promptId == 10) return config.reminder10Radius();
		else return 0;
	}

	String getGeofences(int promptId)
	{
		if (promptId == 1) return config.reminder1Geofences();
		else if (promptId == 2) return config.reminder2Geofences();
		else if (promptId == 3) return config.reminder3Geofences();
		else if (promptId == 4) return config.reminder4Geofences();
		else if (promptId == 5) return config.reminder5Geofences();
		else if (promptId == 6) return config.reminder6Geofences();
		else if (promptId == 7) return config.reminder7Geofences();
		else if (promptId == 8) return config.reminder8Geofences();
		else if (promptId == 9) return config.reminder9Geofences();
		else if (promptId == 10) return config.reminder10Geofences();
		else return "";
	}

	String getRegionIds(int promptId)
	{
		if (promptId == 1) return config.reminder1RegionIds();
		else if (promptId == 2) return config.reminder2RegionIds();
		else if (promptId == 3) return config.reminder3RegionIds();
		else if (promptId == 4) return config.reminder4RegionIds();
		else if (promptId == 5) return config.reminder5RegionIds();
		else if (promptId == 6) return config.reminder6RegionIds();
		else if (promptId == 7) return config.reminder7RegionIds();
		else if (promptId == 8) return config.reminder8RegionIds();
		else if (promptId == 9) return config.reminder9RegionIds();
		else if (promptId == 10) return config.reminder10RegionIds();
		else return "";
	}

	String getNpcIds(int promptId)
	{
		if (promptId == 1) return config.reminder1NpcIds();
		else if (promptId == 2) return config.reminder2NpcIds();
		else if (promptId == 3) return config.reminder3NpcIds();
		else if (promptId == 4) return config.reminder4NpcIds();
		else if (promptId == 5) return config.reminder5NpcIds();
		else if (promptId == 6) return config.reminder6NpcIds();
		else if (promptId == 7) return config.reminder7NpcIds();
		else if (promptId == 8) return config.reminder8NpcIds();
		else if (promptId == 9) return config.reminder9NpcIds();
		else if (promptId == 10) return config.reminder10NpcIds();
		else return "";
	}

	String getItemIds(int promptId)
	{
		if (promptId == 1) return config.reminder1ItemIds();
		else if (promptId == 2) return config.reminder2ItemIds();
		else if (promptId == 3) return config.reminder3ItemIds();
		else if (promptId == 4) return config.reminder4ItemIds();
		else if (promptId == 5) return config.reminder5ItemIds();
		else if (promptId == 6) return config.reminder6ItemIds();
		else if (promptId == 7) return config.reminder7ItemIds();
		else if (promptId == 8) return config.reminder8ItemIds();
		else if (promptId == 9) return config.reminder9ItemIds();
		else if (promptId == 10) return config.reminder10ItemIds();
		else return "";
	}

	String getChatPatterns(int promptId)
	{
		if (promptId == 1) return config.reminder1ChatPatterns();
		else if (promptId == 2) return config.reminder2ChatPatterns();
		else if (promptId == 3) return config.reminder3ChatPatterns();
		else if (promptId == 4) return config.reminder4ChatPatterns();
		else if (promptId == 5) return config.reminder5ChatPatterns();
		else if (promptId == 6) return config.reminder6ChatPatterns();
		else if (promptId == 7) return config.reminder7ChatPatterns();
		else if (promptId == 8) return config.reminder8ChatPatterns();
		else if (promptId == 9) return config.reminder9ChatPatterns();
		else if (promptId == 10) return config.reminder10ChatPatterns();
		else return "";
	}

	Location getLocation(int promptId)
	{
		if (promptId == 1) return config.reminder1Location();
		else if (promptId == 2) return config.reminder2Location();
		else if (promptId == 3) return config.reminder3Location();
		else if (promptId == 4) return config.reminder4Location();
		else if (promptId == 5) return config.reminder5Location();
		else if (promptId == 6) return config.reminder6Location();
		else if (promptId == 7) return config.reminder7Location();
		else if (promptId == 8) return config.reminder8Location();
		else if (promptId == 9) return config.reminder9Location();
		else if (promptId == 10) return config.reminder10Location();
		else return Location.IN_LIST;
	}

	RSAnchorType getPanelAnchorType(int promptId)
	{
		if (promptId == 1) return config.reminder1PanelAnchorType();
		else if (promptId == 2) return config.reminder2PanelAnchorType();
		else if (promptId == 3) return config.reminder3PanelAnchorType();
		else if (promptId == 4) return config.reminder4PanelAnchorType();
		else if (promptId == 5) return config.reminder5PanelAnchorType();
		else if (promptId == 6) return config.reminder6PanelAnchorType();
		else if (promptId == 7) return config.reminder7PanelAnchorType();
		else if (promptId == 8) return config.reminder8PanelAnchorType();
		else if (promptId == 9) return config.reminder9PanelAnchorType();
		else if (promptId == 10) return config.reminder10PanelAnchorType();
		else return RSAnchorType.TOP_LEFT;
	}

	int getPanelAnchorX(int promptId)
	{
		if (promptId == 1) return config.reminder1PanelAnchorX();
		else if (promptId == 2) return config.reminder2PanelAnchorX();
		else if (promptId == 3) return config.reminder3PanelAnchorX();
		else if (promptId == 4) return config.reminder4PanelAnchorX();
		else if (promptId == 5) return config.reminder5PanelAnchorX();
		else if (promptId == 6) return config.reminder6PanelAnchorX();
		else if (promptId == 7) return config.reminder7PanelAnchorX();
		else if (promptId == 8) return config.reminder8PanelAnchorX();
		else if (promptId == 9) return config.reminder9PanelAnchorX();
		else if (promptId == 10) return config.reminder10PanelAnchorX();
		else return 0;
	}

	int getPanelAnchorY(int promptId)
	{
		if (promptId == 1) return config.reminder1PanelAnchorY();
		else if (promptId == 2) return config.reminder2PanelAnchorY();
		else if (promptId == 3) return config.reminder3PanelAnchorY();
		else if (promptId == 4) return config.reminder4PanelAnchorY();
		else if (promptId == 5) return config.reminder5PanelAnchorY();
		else if (promptId == 6) return config.reminder6PanelAnchorY();
		else if (promptId == 7) return config.reminder7PanelAnchorY();
		else if (promptId == 8) return config.reminder8PanelAnchorY();
		else if (promptId == 9) return config.reminder9PanelAnchorY();
		else if (promptId == 10) return config.reminder10PanelAnchorY();
		else return 0;
	}

	int getImageId(int promptId)
	{
		if (promptId == 1) return config.reminder1ImageId();
		else if (promptId == 2) return config.reminder2ImageId();
		else if (promptId == 3) return config.reminder3ImageId();
		else if (promptId == 4) return config.reminder4ImageId();
		else if (promptId == 5) return config.reminder5ImageId();
		else if (promptId == 6) return config.reminder6ImageId();
		else if (promptId == 7) return config.reminder7ImageId();
		else if (promptId == 8) return config.reminder8ImageId();
		else if (promptId == 9) return config.reminder9ImageId();
		else if (promptId == 10) return config.reminder10ImageId();
		else return 0;
	}

	int getPanelWidth(int promptId)
	{
		if (promptId == 1) return config.reminder1PanelWidth();
		else if (promptId == 2) return config.reminder2PanelWidth();
		else if (promptId == 3) return config.reminder3PanelWidth();
		else if (promptId == 4) return config.reminder4PanelWidth();
		else if (promptId == 5) return config.reminder5PanelWidth();
		else if (promptId == 6) return config.reminder6PanelWidth();
		else if (promptId == 7) return config.reminder7PanelWidth();
		else if (promptId == 8) return config.reminder8PanelWidth();
		else if (promptId == 9) return config.reminder9PanelWidth();
		else if (promptId == 10) return config.reminder10PanelWidth();
		else return 0;
	}

	TextSize getPanelTextSize(int promptId)
	{
		if (promptId == 1) return config.reminder1PanelTextSize();
		else if (promptId == 2) return config.reminder2PanelTextSize();
		else if (promptId == 3) return config.reminder3PanelTextSize();
		else if (promptId == 4) return config.reminder4PanelTextSize();
		else if (promptId == 5) return config.reminder5PanelTextSize();
		else if (promptId == 6) return config.reminder6PanelTextSize();
		else if (promptId == 7) return config.reminder7PanelTextSize();
		else if (promptId == 8) return config.reminder8PanelTextSize();
		else if (promptId == 9) return config.reminder9PanelTextSize();
		else if (promptId == 10) return config.reminder10PanelTextSize();
		else return TextSize.SMALL;
	}

	Color getPanelColor(int promptId)
	{
		if (promptId == 1) return config.reminder1PanelColor();
		else if (promptId == 2) return config.reminder2PanelColor();
		else if (promptId == 3) return config.reminder3PanelColor();
		else if (promptId == 4) return config.reminder4PanelColor();
		else if (promptId == 5) return config.reminder5PanelColor();
		else if (promptId == 6) return config.reminder6PanelColor();
		else if (promptId == 7) return config.reminder7PanelColor();
		else if (promptId == 8) return config.reminder8PanelColor();
		else if (promptId == 9) return config.reminder9PanelColor();
		else if (promptId == 10) return config.reminder10PanelColor();
		else return Color.WHITE;
	}

	boolean isPanelBorder(int promptId)
	{
		if (promptId == 1) return config.reminder1PanelBorder();
		else if (promptId == 2) return config.reminder2PanelBorder();
		else if (promptId == 3) return config.reminder3PanelBorder();
		else if (promptId == 4) return config.reminder4PanelBorder();
		else if (promptId == 5) return config.reminder5PanelBorder();
		else if (promptId == 6) return config.reminder6PanelBorder();
		else if (promptId == 7) return config.reminder7PanelBorder();
		else if (promptId == 8) return config.reminder8PanelBorder();
		else if (promptId == 9) return config.reminder9PanelBorder();
		else if (promptId == 10) return config.reminder10PanelBorder();
		else return false;
	}

	boolean isForceShow(int promptId)
	{
		if (promptId == 1) return config.reminder1ForceShow();
		else if (promptId == 2) return config.reminder2ForceShow();
		else if (promptId == 3) return config.reminder3ForceShow();
		else if (promptId == 4) return config.reminder4ForceShow();
		else if (promptId == 5) return config.reminder5ForceShow();
		else if (promptId == 6) return config.reminder6ForceShow();
		else if (promptId == 7) return config.reminder7ForceShow();
		else if (promptId == 8) return config.reminder8ForceShow();
		else if (promptId == 9) return config.reminder9ForceShow();
		else if (promptId == 10) return config.reminder10ForceShow();
		else return false;
	}

	int getImageOffset(int promptId)
	{
		if (promptId == 1) return config.reminder1ImageOffset();
		else if (promptId == 2) return config.reminder2ImageOffset();
		else if (promptId == 3) return config.reminder3ImageOffset();
		else if (promptId == 4) return config.reminder4ImageOffset();
		else if (promptId == 5) return config.reminder5ImageOffset();
		else if (promptId == 6) return config.reminder6ImageOffset();
		else if (promptId == 7) return config.reminder7ImageOffset();
		else if (promptId == 8) return config.reminder8ImageOffset();
		else if (promptId == 9) return config.reminder9ImageOffset();
		else if (promptId == 10) return config.reminder10ImageOffset();
		else return 0;
	}

	boolean isImageOffsetNegative(int promptId)
	{
		if (promptId == 1) return config.reminder1ImageOffsetNegative();
		else if (promptId == 2) return config.reminder2ImageOffsetNegative();
		else if (promptId == 3) return config.reminder3ImageOffsetNegative();
		else if (promptId == 4) return config.reminder4ImageOffsetNegative();
		else if (promptId == 5) return config.reminder5ImageOffsetNegative();
		else if (promptId == 6) return config.reminder6ImageOffsetNegative();
		else if (promptId == 7) return config.reminder7ImageOffsetNegative();
		else if (promptId == 8) return config.reminder8ImageOffsetNegative();
		else if (promptId == 9) return config.reminder9ImageOffsetNegative();
		else if (promptId == 10) return config.reminder10ImageOffsetNegative();
		else return false;
	}

	Sound getSound(int promptId)
	{
		if (promptId == 1) return config.reminder1Sound();
		else if (promptId == 2) return config.reminder2Sound();
		else if (promptId == 3) return config.reminder3Sound();
		else if (promptId == 4) return config.reminder4Sound();
		else if (promptId == 5) return config.reminder5Sound();
		else if (promptId == 6) return config.reminder6Sound();
		else if (promptId == 7) return config.reminder7Sound();
		else if (promptId == 8) return config.reminder8Sound();
		else if (promptId == 9) return config.reminder9Sound();
		else if (promptId == 10) return config.reminder10Sound();
		else return Sound.NONE;
	}
}
package com.ericversteeg.model.config;

public enum TimeUnit {
    SECONDS(0),
    MINUTES(1);

    private int type;

    TimeUnit(int type) {
        this.type = type;
    }

    public int getType()
    {
        return type;
    }
}

package com.ericversteeg.model.config;

public enum Sound {
    NONE(0),
    UI_BOOP(2266),
    GE_INCREMENT_PLOP(3929),
    GE_DECREMENT_PLOP(3930),
    GE_ADD_OFFER_DINGALING(3925),
    GE_COLLECT_BLOOP(3928),
    GE_COIN_TINKLE(3924),
    CLOSE_DOOR(60),
    OPEN_DOOR(62),
    ITEM_DROP(2739),
    ITEM_PICKUP(2582),
    PICK_PLANT_BLOOP(2581),
    BURY_BONES(2738),
    TINDER_STRIKE(2597),
    FIRE_WOOSH(2596),
    TREE_FALLING(2734),
    TREE_CHOP(2735),
    MINING_TINK(3220),
    COOK_WOOSH(2577),
    MAGIC_SPLASH_BOING(227),
    SMITH_ANVIL_TINK(3790),
    SMITH_ANVIL_TONK(3791),
    NPC_TELEPORT_WOOSH(1930),
    TELEPORT_VWOOP(200),
    ZERO_DAMAGE_SPLAT(511),
    TAKE_DAMAGE_SPLAT(510),
    ATTACK_HIT(2498),
    THICK_SKIN(2690),
    BURST_OF_STRENGTH(2688),
    CLARITY_OF_THOUGHT(2664),
    SHARP_EYE_RIGOUR(2685),
    MYSTIC_WILL_AUGURY(2670),
    ROCK_SKIN(2684),
    SUPERHUMAN_STRENGTH(2689),
    IMPROVED_REFLEXES(2662),
    RAPID_RESTORE_PRESERVE(2679),
    RAPID_HEAL(2678),
    PROTECT_ITEM(1982),
    HAWK_EYE(2666),
    MYSTIC_LORE(2668),
    STEEL_SKIN(2687),
    ULTIMATE_STRENGTH(2691),
    INCREDIBLE_REFLEXES(2667),
    PROTECT_FROM_MAGIC(2675),
    PROTECT_FROM_MISSILES(2677),
    PROTECT_FROM_MELEE(2676),
    EAGLE_EYE(2665),
    MYSTIC_MIGHT(2669),
    RETRIBUTION(2682),
    REDEMPTION(2680),
    SMITE(2686),
    CHIVALRY(3826),
    PIETY(3825),
    VWOOP(2663),
    TWINKLE(2672),
    BELL_DING(3813),
    BELL_DONG(3817),
    SHOUT_SQUEAK(3816);


    private int id;

    Sound(int id)
    {
        this.id = id;
    }

    public int getId()
    {
        return id;
    }
}

package com.ericversteeg.model.config;

public enum Location {
    IN_LIST,
    SINGLE_LINE,
    WORD_WRAP
}

package com.ericversteeg.model.config;

public enum TextSize {
    SMALL,
    LARGE,
    LARGE_BOLD
}

package com.ericversteeg.model;

import com.google.gson.annotations.SerializedName;

import java.awt.*;

public class Prompt {

    public static int TIME_UNIT_SECONDS = 0;
    public static int TIME_UNIT_MINUTES = 1;

    public int id;

    public long posted = 0L;

    @SerializedName("enable")
    public boolean enable = false;

    @SerializedName("force")
    public boolean force = false;

    @SerializedName("duration")
    public int duration = 0;

    @SerializedName("cd")
    public int cooldown = 0;

    @SerializedName("unit")
    public int timeUnit = 0;

    @SerializedName("notify")
    public boolean notify = false;

    public long lastNotified;

    public boolean active = true;

    @SerializedName("text")
    public String text = "";

    @SerializedName("color")
    public String colorStr = "";

    public Color color = Color.WHITE;

    @SerializedName("location")
    public int location = 0;

    @SerializedName("anchor")
    public int anchorType = 0;

    @SerializedName("x")
    public int anchorX = 0;

    @SerializedName("y")
    public int anchorY = 0;

    @SerializedName("width")
    public int width = 140;

    @SerializedName("border")
    public boolean hasBorder = true;

    @SerializedName("bg")
    public String bgColorStr = "";

    public Color bgColor = Color.GRAY;

    @SerializedName("tsize")
    public int textSize = 0;

    @SerializedName("sound")
    public int sound = 0;

    @SerializedName("image")
    public int imageId = 0;

    @SerializedName("offset")
    public int imageOffset = 0;

    @SerializedName("noffset")
    public boolean isOffsetNegative = false;

    @SerializedName("times")
    public String times = "";

    @SerializedName("days")
    public String days = "";

    @SerializedName("dates")
    public String dates = "";

    @SerializedName("coords")
    public String coordinates = "";

    @SerializedName("radius")
    public int radius = 0;

    @SerializedName("geofences")
    public String geoFences = "";

    @SerializedName("regions")
    public String regionIds = "";

    @SerializedName("npcs")
    public String npcIds = "";

    @SerializedName("items")
    public String itemIds = "";

    @SerializedName("patterns")
    public String chatPatterns = "";

    public int savedCount = 0;

    public long getDurationMillis() {
        if (timeUnit == TIME_UNIT_SECONDS)
        {
            return duration * 1000L;
        }
        else if (timeUnit == TIME_UNIT_MINUTES)
        {
            return duration * 60 * 1000L;
        }
        else
        {
            return 0L;
        }
    }

    public long getCooldownMillis() {
        if (timeUnit == TIME_UNIT_SECONDS)
        {
            return cooldown * 1000L;
        }
        else if (timeUnit == TIME_UNIT_MINUTES)
        {
            return cooldown * 60 * 1000L;
        }
        else
        {
            return 0L;
        }
    }
}

package com.ericversteeg.view;

import java.awt.*;
import java.util.Map;

public class RSView implements RSRenderable
{
    class DimensionParams
    {
        private int w;
        private int h;
        public DimensionParams(int w, int h)
        {
            this.w = w;
            this.h = h;
        }

        public int getW()
        {
            return w;
        }

        public void setW(int w)
        {
            this.w = w;
        }

        public int getH()
        {
            return h;
        }

        public void setH(int h)
        {
            this.h = h;
        }
    }

    class WeightParams
    {
        private Float weight;

        public WeightParams(Float weight)
        {
            this.weight = weight;
        }

        public Float getWeight()
        {
            return weight;
        }

        public void setWeight(Float weight)
        {
            this.weight = weight;
        }
    }

    protected DimensionParams dimensionParams;

    public static int MATCH_PARENT = -1;
    public static int WRAP_CONTENT = -2;

    protected RSViewGroup.Gravity layoutGravity = null;

    protected int x;
    protected int y;
    protected int w;
    protected int h;

    private Float weight = null;
    private WeightParams weightParams = null;

    protected int marginStart = 0;
    protected int marginTop = 0;
    protected int marginEnd = 0;
    protected int marginBottom = 0;

    protected int paddingStart = 0;
    protected int paddingTop = 0;
    protected int paddingEnd = 0;
    protected int paddingBottom = 0;

    protected Color bgColor = new Color(0, 0, 0, 0);
    protected RSViewBorder border;

    protected RSViewGroup parent = null;

    public RSView(int x, int y, int w, int h)
    {
        this.dimensionParams = new DimensionParams(w, h);
        this.x = x;
        this.y = y;
    }

    public void addBorder(Color color)
    {
        border = new RSViewBorder(this, color);
    }

    public void addBorder(Color innerColor, Color outerColor)
    {
        border = new RSViewBorder(this, innerColor, outerColor);
    }

    public void setLayoutGravity(RSViewGroup.Gravity layoutGravity)
    {
        this.layoutGravity = layoutGravity;
    }

    public void setX(int x)
    {
        this.x = x;
    }

    public int getX()
    {
        return x;
    }

    public void setY(int y)
    {
        this.y = y;
    }

    public int getY()
    {
        return y;
    }

    public int getW()
    {
        return w;
    }

    public void setW(int w)
    {
        this.w = w;
    }

    public int getH()
    {
        return h;
    }

    public void setH(int h)
    {
        this.h = h;
    }

    public Float getWeight()
    {
        return weight;
    }

    public void setWeight(Float weight)
    {
        this.weight = weight;
        weightParams = new WeightParams(weight);
    }

    public WeightParams getWeightParams() { return weightParams; }

    public int getMarginStart()
    {
        return marginStart;
    }

    public int getMarginTop()
    {
        return marginTop;
    }

    public int getMarginEnd()
    {
        return marginEnd;
    }

    public int getMarginBottom()
    {
        return marginBottom;
    }

    public void setParent(RSViewGroup parent)
    {
        this.parent = parent;
    }

    public void setBgColor(Color bgColor)
    {
        this.bgColor = bgColor;
    }

    public void setMarginStart(int marginStart)
    {
        this.marginStart = marginStart;
    }

    public void setMarginTop(int marginTop)
    {
        this.marginTop = marginTop;
    }

    public void setMarginEnd(int marginEnd)
    {
        this.marginEnd = marginEnd;
    }

    public void setMarginBottom(int marginBottom)
    {
        this.marginBottom = marginBottom;
    }

    public RSView getParent()
    {
        return parent;
    }

    protected Dimension applyDimension(Map<RSLayoutGuide, Integer> guides)
    {
        w = measureWidth(guides);
        h = measureHeight(guides);

        if (guides.containsKey(RSLayoutGuide.MAX_WIDTH))
        {
            int wGuide = guides.get(RSLayoutGuide.MAX_WIDTH);
            if (dimensionParams.getW() == MATCH_PARENT)
            {
                w = wGuide;
            }
        }

        if (guides.containsKey(RSLayoutGuide.MAX_HEIGHT))
        {
            int hGuide = guides.get(RSLayoutGuide.MAX_HEIGHT);
            if (dimensionParams.getH() == MATCH_PARENT)
            {
                h = hGuide;
            }
        }

        return new Dimension(w, h);
    }

    public int measureWidth(Map<RSLayoutGuide, Integer> guides)
    {
        return dimensionParams.getW();
    }

    public int measureHeight(Map<RSLayoutGuide, Integer> guides)
    {
        return dimensionParams.getH();
    }

    protected void applyPosition(Map<RSLayoutGuide, Integer> guides)
    {
        // x
        switch (getLayoutGravity())
        {
            case START:
            case TOP_START:
            case BOTTOM_START:
                x = guideOrThrow(RSLayoutGuide.START, guides);
                break;
            case CENTER:
            case TOP:
            case BOTTOM:
                int wGuide =  guideOrThrow(RSLayoutGuide.MAX_WIDTH, guides);
                x = (wGuide - w) / 2;
                break;
            case END:
            case TOP_END:
            case BOTTOM_END:
                x = guideOrThrow(RSLayoutGuide.END, guides) - w;
                break;
        }

        // y
        switch (getLayoutGravity())
        {
            case TOP_START:
            case TOP:
            case TOP_END:
                y = guideOrThrow(RSLayoutGuide.TOP, guides);
                break;
            case START:
            case CENTER:
            case END:
                int hGuide =  guideOrThrow(RSLayoutGuide.MAX_HEIGHT, guides);
                y = (hGuide - h) / 2;
                break;
            case BOTTOM_START:
            case BOTTOM:
            case BOTTOM_END:
                y = guideOrThrow(RSLayoutGuide.BOTTOM, guides) - h;
                break;
        }
    }

    public int guideOrThrow(RSLayoutGuide guide, Map<RSLayoutGuide, Integer> guides)
    {
        Integer val = guides.get(guide);
        if (val == null) throw new IllegalStateException("Must include a " + guide.toString() + " guide.");
        return val;
    }

    public RSViewGroup.Gravity getLayoutGravity()
    {
        if (layoutGravity == null)
        {
            return parent.getGravity();
        }
        return layoutGravity;
    }

    @Override
    public void render(Graphics2D graphics, Point origin)
    {
        graphics.setColor(bgColor);
        graphics.fillRect(origin.x + x, origin.y + y, w, h);

        if (border != null)
        {
            border.render(graphics, origin);
        }
    }
}
package com.ericversteeg.view;

import java.util.Map;

public class RSRow extends RSViewGroup
{
    public RSRow(int x, int y, int w, int h)
    {
        super(x, y, w, h);
    }

    @Override
    protected Map<RSLayoutGuide, Integer> layoutSubviews(Map<RSLayoutGuide, Integer> guides)
    {
        h = measureHeight(guides);

        int startGuide = paddingTop;
        for (RSView view: subviews)
        {
            if (view.getWeightParams() != null
                    && view.getWeightParams().getWeight() != null)
            {
                view.setW(0);
            }

            startGuide += view.getMarginStart();
            view.applyPosition(
                    new RSLayoutGuide.Builder()
                            .maxHeight(h)
                            .start(startGuide)
                            .top(paddingTop + view.getMarginTop())
                            .bottom(paddingBottom + view.getMarginBottom())
                            .build()
            );
            startGuide += view.getW();
            startGuide += view.getMarginEnd();
        }

        int endGuide = startGuide + paddingEnd;

        return new RSLayoutGuide.Builder().end(endGuide).build();
    }
}

package com.ericversteeg.view;

import java.awt.*;

public class RSViewBorder implements RSRenderable
{
    private RSView view;
    private Color innerColor;
    private Color outerColor;

    public RSViewBorder(RSView view, Color color)
    {
        this.view = view;

        innerColor = color;
    }

    public RSViewBorder(RSView view, Color innerColor, Color outerColor)
    {
        this.view = view;

        this.innerColor = innerColor;
        this.outerColor = outerColor;
    }

    @Override
    public void render(Graphics2D graphics, Point origin)
    {
        if (outerColor != null)
        {
            graphics.setColor(outerColor);
            graphics.drawRect(origin.x + view.getX(), origin.y + view.getY(), view.getW(), view.getH());

            graphics.setColor(outerColor);
            graphics.drawRect(origin.x + view.getX() - 1, origin.y + view.getY() - 1, view.getW() + 2, view.getH() + 2);
        }

        if (innerColor != null)
        {
            graphics.setColor(innerColor);
            graphics.drawRect(origin.x + view.getX() + 1, origin.y + view.getY() + 1, view.getW() - 2, view.getH() - 2);
        }
    }
}

package com.ericversteeg.view;

import java.util.Map;

public class RSBox extends RSViewGroup
{
    public RSBox(int x, int y, int w, int h)
    {
        super(x, y, w, h);
    }

    @Override
    protected Map<RSLayoutGuide, Integer> layoutSubviews(Map<RSLayoutGuide, Integer> guides)
    {
        w = measureWidth(guides);
        h = measureHeight(guides);

        for (RSView view: subviews)
        {
            view.applyPosition(
                    new RSLayoutGuide.Builder()
                            .maxWidth(w)
                            .maxHeight(h)
                            .start(paddingStart + view.getMarginStart())
                            .top(paddingTop + view.getMarginTop())
                            .end(w - paddingEnd - view.getMarginEnd())
                            .bottom(h - paddingBottom - view.getMarginBottom())
                            .build()
            );
        }

        return new RSLayoutGuide.Builder().build();
    }
}

package com.ericversteeg.view;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.Map;

public class RSImageView extends RSView
{
    private BufferedImage image;
    private int offset;
    private boolean offsetNegative = false;

    public RSImageView(int w, int h) {
        super(0, 0, w, h);
    }

    public void setImage(BufferedImage image)
    {
        this.image = image;
    }

    public void setOffset(int offset, boolean negative)
    {
        this.offset = offset;
        this.offsetNegative = negative;
    }

    @Override
    public int measureWidth(Map<RSLayoutGuide, Integer> guides)
    {
        if (image == null) return 0;

        return paddingStart + image.getWidth() + paddingEnd;
    }

    @Override
    public int measureHeight(Map<RSLayoutGuide, Integer> guides)
    {
        if (image == null) return 0;

        return paddingTop + image.getHeight() + paddingBottom;
    }

    @Override
    public void render(Graphics2D graphics, Point origin)
    {
        super.render(graphics, origin);

        int signedOffset = offset;
        if (offsetNegative)
        {
            signedOffset *= -1;
        }

        graphics.drawImage(image, origin.x + x + paddingStart,
                origin.y + y + paddingTop + signedOffset, null);
    }
}

package com.ericversteeg.view;

import net.runelite.client.ui.overlay.components.TextComponent;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;

public class RSTextView extends RSView
{
    private TextComponent textComponent = new TextComponent();
    private FontMetrics fontMetrics;
    private Font font;
    private String text = "";
    private Color textColor = Color.WHITE;
    private int numLines = 1;
    private int lineHeight = 0;
    private boolean hasImage = false;
    private BufferedImage image;
    private Color imageBgColor = new Color(0, 0, 0, 0);
    private int imageX = 0;
    private int imageY = 0;
    private int imageW = 0;
    private int imageH = 0;
    private int imageOffset = 0;
    private boolean imageOffsetNegative = false;
    private RSViewGroup.Gravity imageGravity;
    private boolean animatesColor = false;
    private long animationCycleMillis = 2000L;

    public RSTextView(int x, int y, int w, int h, Font font) {
        super(x, y, w, h);

        this.font = font;
    }

    public void setFontMetrics(Graphics2D graphics)
    {
        if (font == null) return;

        graphics.setFont(font);
        this.fontMetrics = graphics.getFontMetrics();
    }

    public void setText(String text)
    {
        this.text = text;
        textComponent.setText(text);
    }

    public void setTextColor(Color color)
    {
        textColor = color;
    }

    public void setImage(BufferedImage image, int width, int height, RSViewGroup.Gravity gravity)
    {
        this.image = image;
        imageW = width;
        imageH = height;
        imageGravity = gravity;
        hasImage = true;
    }

    public void setImageBgColor(Color imageBgColor)
    {
        this.imageBgColor = imageBgColor;
    }

    public void setImageOffset(int imageOffset, boolean negative)
    {
        this.imageOffset = imageOffset;
        this.imageOffsetNegative = negative;
    }

    private int imageX(int imageW, RSViewGroup.Gravity gravity)
    {
        switch (gravity)
        {
            case TOP_START:
            case START:
            case BOTTOM_START:
                return 0;
            case TOP:
            case CENTER:
            case BOTTOM:
                return (w - paddingStart - paddingEnd - imageW) / 2;
            case TOP_END:
            case END:
            case BOTTOM_END:
                return w - paddingStart - paddingEnd - imageW;
        }
        return 0;
    }

    private int imageY(int imageH, RSViewGroup.Gravity gravity)
    {
        switch (gravity)
        {
            case TOP_START:
            case TOP:
            case TOP_END:
                return 0;
            case START:
            case CENTER:
            case END:
                return (h - paddingTop - paddingBottom - imageH) / 2;
            case BOTTOM_START:
            case BOTTOM:
            case BOTTOM_END:
                return h - paddingTop - paddingBottom - imageH;
        }
        return 0;
    }

    public void setAnimatesColor(boolean animatesColor)
    {
        this.animatesColor = animatesColor;
    }

    public void setAnimationCycleDuration(int duration)
    {
        animationCycleMillis = duration * 1000L;
    }

    private int lineWidth = 0;

    @Override
    public int measureWidth(Map<RSLayoutGuide, Integer> guides)
    {
        int strWidth = fontMetrics.stringWidth(text);
        Integer guide = guides.get(RSLayoutGuide.MAX_WIDTH);

        if (dimensionParams.getW() != WRAP_CONTENT)
        {
            if (guide != null && dimensionParams.getW() == MATCH_PARENT)
            {
                lineWidth = guide - paddingStart - paddingEnd;
                return lineWidth;
            }

            lineWidth = dimensionParams.getW() - paddingStart - paddingEnd;
        }
        else
        {

            String str = Pattern.compile("\\^\\w").matcher(text).replaceAll("");
            lineWidth = fontMetrics.stringWidth(str);
        }

        return paddingStart + lineWidth + paddingEnd;
    }

    @Override
    public int measureHeight(Map<RSLayoutGuide, Integer> guides)
    {
        lineHeight = fontMetrics.getHeight();

        if (dimensionParams.getW() == WRAP_CONTENT)
        {
            return lineHeight;
        }

        if (hasImage)
        {
            numLines = getNumLinesImage(lineWidth);
        }
        else
        {
            numLines = getNumLines(lineWidth);
        }

        int height = lineHeight * numLines;

        return paddingTop + height + paddingBottom;
    }

    @Override
    public void render(Graphics2D graphics, Point origin)
    {
        super.render(graphics, origin);

        graphics.setFont(font);

        if (hasImage)
        {
            charRenderLinesImage(graphics, lineWidth, new Point(origin.x + x + paddingStart,
                    origin.y + y + paddingTop));

            graphics.setColor(imageBgColor);

            graphics.fillRect(origin.x + x + paddingStart + imageX,
                    origin.y + y + paddingTop + imageY, imageW, imageH);

            int offset = imageOffset;
            if (imageOffsetNegative)
            {
                offset *= -1;
            }

            graphics.drawImage(image, origin.x + x + paddingStart + imageX,
                    origin.y + y + paddingTop + imageY + offset, null);
        }
        else
        {
            charRenderLines(graphics, lineWidth, new Point(origin.x + x + paddingStart,
                    origin.y + y + paddingTop));
        }
    }

    private void charRenderLines(Graphics2D graphics, int maxWidth, Point start)
    {
        char [] chars = text.replace("\\s+", " ").toCharArray();

        int rx = 0;
        int ry = lineHeight;

        int cIndex = 0;
        int rIndex = 0;

        int spaceWidth = fontMetrics.stringWidth(" ");

        StringBuilder sb = new StringBuilder();

        boolean readColor = false;
        Map<Integer, Color> colorPositions = new HashMap<>();

        setColor(textColor);

        for (int i = 0; i < chars.length; i++)
        {
            char c = chars[i];
            boolean lastChar = i == chars.length - 1;

            if (readColor)
            {
               colorPositions.put(cIndex, getColor(c));
               readColor = false;

               continue;
            }

            if (c != ' ' && !lastChar)
            {
                if (c == '^')
                {
                    readColor = true;

                    continue;
                }

                sb.append(c);
                cIndex += 1;
            }
            else
            {
                if (c != ' ')
                {
                    sb.append(c);
                    cIndex += 1;
                }

                String word = sb.toString();

                int sw = fontMetrics.stringWidth(word);

                if (rx + sw > maxWidth)
                {
                    rx = 0;
                    ry += lineHeight;
                }

                for (char sc: word.toCharArray())
                {
                    Color color = colorPositions.get(rIndex);
                    if (color != null)
                    {
                        setColor(color);
                    }

                    textComponent.setPosition(new Point(start.x + rx,start.y + ry));
                    textComponent.setText(String.valueOf(sc));
                    textComponent.render(graphics);

                    rx += fontMetrics.stringWidth(String.valueOf(sc));
                    rIndex += 1;
                }
                rx += spaceWidth;

                Color color = colorPositions.get(rIndex);
                if (color != null)
                {
                    setColor(color);
                }

                cIndex += 1;
                rIndex += 1;

                sb = new StringBuilder();
            }
        }
    }

    private void charRenderLinesImage(Graphics2D graphics, int maxWidth, Point start)
    {
        char [] chars = text.replace("\\s+", " ").toCharArray();

        int rx = 0;
        int ry = lineHeight;

        int cIndex = 0;
        int rIndex = 0;

        int spaceWidth = fontMetrics.stringWidth(" ");

        StringBuilder sb = new StringBuilder();

        boolean readColor = false;
        Map<Integer, Color> colorPositions = new HashMap<>();

        RSViewGroup.Gravity horizontalGravity = getHorizontalGravity(imageGravity);

        int imageStart = (maxWidth - imageW) / 2;

        imageX = imageX(imageW, imageGravity);
        imageY = imageY(imageH, imageGravity);

        setColor(textColor);

        for (int i = 0; i < chars.length; i++)
        {
            char c = chars[i];
            boolean lastChar = i == chars.length - 1;

            if (readColor)
            {
                colorPositions.put(cIndex, getColor(c));
                readColor = false;

                continue;
            }

            if (c != ' ' && !lastChar)
            {
                if (c == '^')
                {
                    readColor = true;

                    continue;
                }

                sb.append(c);
                cIndex += 1;
            }
            else
            {
                if (c != ' ')
                {
                    sb.append(c);
                    cIndex += 1;
                }

                String word = sb.toString();

                int sw = fontMetrics.stringWidth(word);

                boolean isHeightRange = isImageHeightRange(ry - lineHeight);
                if (isHeightRange)
                {
                    if (horizontalGravity == RSViewGroup.Gravity.START)
                    {
                        if (rx < imageW)
                        {
                            rx = imageW + 3;
                        }
                    }
                    else if (horizontalGravity == RSViewGroup.Gravity.CENTER)
                    {
                        if (rx + sw > imageStart - 3)
                        {
                            rx = imageX + imageW + 3;
                        }
                    }
                    else if (horizontalGravity == RSViewGroup.Gravity.END)
                    {
                        if (rx + sw > maxWidth - imageW - 3)
                        {
                            rx = 0;
                            ry += lineHeight;
                        }
                    }
                }

                if (rx + sw > maxWidth)
                {
                    ry += lineHeight;
                    isHeightRange = isImageHeightRange(ry - lineHeight);

                    rx = 0;
                    if (isHeightRange && horizontalGravity == RSViewGroup.Gravity.START)
                    {
                        rx = imageW + 3;
                    }
                }

                for (char sc: word.toCharArray())
                {
                    Color color = colorPositions.get(rIndex);
                    if (color != null)
                    {
                        setColor(color);
                    }

                    textComponent.setPosition(new Point(start.x + rx,start.y + ry));
                    textComponent.setText(String.valueOf(sc));
                    textComponent.render(graphics);

                    rx += fontMetrics.stringWidth(String.valueOf(sc));
                    rIndex += 1;
                }
                rx += spaceWidth;

                Color color = colorPositions.get(rIndex);
                if (color != null)
                {
                    setColor(color);
                }

                cIndex += 1;
                rIndex += 1;

                sb = new StringBuilder();
            }
        }
    }

    private void setColor(Color color)
    {
        if (color.getAlpha() < 5)
        {
            float percent = (Instant.now().toEpochMilli() % animationCycleMillis) / ((float) animationCycleMillis);

            Color [] colors;
            if (color.getAlpha() == 0)
            {
                colors = getTriadicColors(color);
            }
            else
            {
                colors = new Color [] { Color.WHITE, Color.BLACK };
            }

            Color animatedColor = getInterpolatedColor(getColorPair(colors, percent), colors.length, percent);
            textComponent.setColor(animatedColor);
        }
        else
        {
            textComponent.setColor(color);
        }
    }

    private boolean isImageHeightRange(int y)
    {
        switch (imageGravity)
        {
            case TOP_START:
            case TOP:
            case TOP_END:
                return y < imageH;
            case START:
            case CENTER:
            case END:
                int imageTop = (h - paddingTop - paddingBottom - imageH) / 2;
                return y >= imageTop && y < imageTop + imageH;
            case BOTTOM_START:
            case BOTTOM:
            case BOTTOM_END:
                return y >= h - paddingTop - paddingBottom - imageH;
        }
        return false;
    }

    private RSViewGroup.Gravity getHorizontalGravity(RSViewGroup.Gravity gravity)
    {
        switch (gravity)
        {
            case TOP_START:
            case START:
            case BOTTOM_START:
                return RSViewGroup.Gravity.START;
            case TOP:
            case CENTER:
            case BOTTOM:
                return RSViewGroup.Gravity.CENTER;
            case TOP_END:
            case END:
            case BOTTOM_END:
                return RSViewGroup.Gravity.END;
        }
        return RSViewGroup.Gravity.START;
    }

    private int getNumLines(int maxWidth)
    {
        String str = Pattern.compile("\\^\\w").matcher(text).replaceAll("");

        char [] chars = str.replace("\\s+", " ").toCharArray();

        int rx = 0;
        int lines = 1;

        int spaceWidth = fontMetrics.stringWidth(" ");

        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < chars.length; i++)
        {
            char c = chars[i];
            boolean lastChar = i == chars.length - 1;

            if (c != ' ' && !lastChar)
            {
                sb.append(c);
            }
            else
            {
                if (c != ' ')
                {
                    sb.append(c);
                }

                String word = sb.toString();

                int sw = fontMetrics.stringWidth(word);

                if (rx + sw > maxWidth)
                {
                    lines += 1;

                    rx = 0;
                }

                for (char sc: word.toCharArray())
                {
                    rx += fontMetrics.stringWidth(String.valueOf(sc));
                }
                rx += spaceWidth;

                sb = new StringBuilder();
            }
        }
        return lines;
    }

    private int getNumLinesImage(int maxWidth)
    {
        String str = Pattern.compile("\\^\\w").matcher(text).replaceAll("");

        char [] chars = str.replace("\\s+", " ").toCharArray();

        int rx = 0;
        int ry = lineHeight;

        int spaceWidth = fontMetrics.stringWidth(" ");

        StringBuilder sb = new StringBuilder();

        RSViewGroup.Gravity horizontalGravity = getHorizontalGravity(imageGravity);

        int imageStart = (maxWidth - imageW) / 2;

        imageX = imageX(imageW, imageGravity);
        imageY = imageY(imageH, imageGravity);

        for (int i = 0; i < chars.length; i++)
        {
            char c = chars[i];
            boolean lastChar = i == chars.length - 1;

            if (c != ' ' && !lastChar)
            {
                sb.append(c);
            }
            else
            {
                if (c != ' ')
                {
                    sb.append(c);
                }

                String word = sb.toString();

                int sw = fontMetrics.stringWidth(word);

                boolean isHeightRange = isImageHeightRange(ry - lineHeight);
                if (isHeightRange)
                {
                    if (horizontalGravity == RSViewGroup.Gravity.START)
                    {
                        if (rx < imageW)
                        {
                            rx = imageW + 3;
                        }
                    }
                    else if (horizontalGravity == RSViewGroup.Gravity.CENTER)
                    {
                        if (rx + sw > imageStart - 3)
                        {
                            rx = imageX + imageW + 3;
                        }
                    }
                    else if (horizontalGravity == RSViewGroup.Gravity.END)
                    {
                        if (rx + sw > maxWidth - imageW - 3)
                        {
                            rx = 0;
                            ry += lineHeight;
                        }
                    }
                }

                if (rx + sw > maxWidth)
                {
                    ry += lineHeight;
                    isHeightRange = isImageHeightRange(ry - lineHeight);

                    rx = 0;
                    if (isHeightRange && horizontalGravity == RSViewGroup.Gravity.START)
                    {
                        rx = imageW + 3;
                    }
                }

                for (char sc: word.toCharArray())
                {
                    rx += fontMetrics.stringWidth(String.valueOf(sc));
                }
                rx += spaceWidth;

                sb = new StringBuilder();
            }
        }

        if (hasImage)
        {
            return Math.max(ry / lineHeight, 2);
        }
        else
        {
            return ry / lineHeight;
        }
    }

    Color getColor(char c)
    {
        if (c == 'w')
        {
            return Color.WHITE;
        }
        else if (c == 'b')
        {
            return Color.BLACK;
        }
        else if (c == 'g')
        {
            return Color.GREEN;
        }
        else if (c == 'p')
        {
            return Color.PINK;
        }
        else if (c == 'u')
        {
            return Color.BLUE;
        }
        else if (c == 'c')
        {
            return Color.CYAN;
        }
        else if (c == 'm')
        {
            return Color.MAGENTA;
        }
        else if (c == 'y')
        {
            return Color.YELLOW;
        }
        else if (c == 'r')
        {
            return Color.RED;
        }
        else if (c == 'o')
        {
            return new Color(252, 154, 78);
        }
        else if (c == '0')
        {
            return textColor;
        }
        else if (c == 'a')
        {
            return new Color(255, 0, 0, 0);
        }
        else if (c == 'l')
        {
            return new Color(107, 242, 73);
        }
        else if (c == 'd')
        {
            return new Color(107, 41, 242);
        }
        else if (c == 'e')
        {
            return new Color(122, 75, 28);
        }
        else if (c == 'f')
        {
            return new Color(35, 94, 49);
        }
        else if (c == 'h')
        {
            return new Color(177, 184, 222);
        }
        else if (c == 'i')
        {
            return new Color(255, 191, 135);
        }
        else if (c == 'j')
        {
            return new Color(165, 11, 94);
        }
        else if (c == 'k')
        {
            return new Color(66, 12, 3);
        }
        else if (c == 'n')
        {
            return new Color(226, 255, 167);
        }
        else if (c == 'q')
        {
            return new Color(0, 0, 0, 1);
        }
        return Color.WHITE;
    }

    private Color [] getTriadicColors(Color color)
    {
        float [] hsb = Color.RGBtoHSB(color.getRed(), color.getGreen(), color.getBlue(), null);

        float hue = hsb[0];

        float triHue = (hue + 120f) % 360f;
        float triHue2 = (hue + 240f) % 360f;

        Color triColor = Color.getHSBColor(triHue / 360f, hsb[1], hsb[2]);
        Color triColor2 = Color.getHSBColor(triHue2 / 360f, hsb[1], hsb[2]);

        return new Color [] {color, triColor, triColor2};
    }

    private Color [] getColorPair(Color [] colors, float percent)
    {
        int count = colors.length;

        int index = (int) (percent / (1f / colors.length));
        int index2 = (index + 1) % count;

        return new Color [] {colors[index], colors[index2]};
    }

    private Color getInterpolatedColor(Color [] colorPair, int colorCount, float percent)
    {
        float t = (percent % (1f / colorCount) / (1f / colorCount));

        Color sColor = colorPair[0];
        Color eColor = colorPair[1];

        int r = (int) (sColor.getRed() * (1 - t) + eColor.getRed() * t);
        int g = (int) (sColor.getGreen() * (1 - t) + eColor.getGreen() * t);
        int b = (int) (sColor.getBlue() * (1 - t) + eColor.getBlue() * t);

        return new Color(r, g, b);
    }
}

package com.ericversteeg.view;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum RSAnchorType
{
    TOP_LEFT,
    TOP_CENTER,
    TOP_RIGHT,
    BOTTOM_LEFT,
    BOTTOM_RIGHT,
    LEFT_CENTER
}

package com.ericversteeg.view;

import java.util.Map;

public class RSColumn extends RSViewGroup
{
    public RSColumn(int x, int y, int w, int h)
    {
        super(x, y, w, h);
    }

    @Override
    protected Map<RSLayoutGuide, Integer> layoutSubviews(Map<RSLayoutGuide, Integer> guides)
    {
        w = measureWidth(guides);

        int topGuide = paddingTop;
        for (RSView view: subviews)
        {
            if (view.getWeightParams() != null
                    && view.getWeightParams().getWeight() != null)
            {
                view.setW(0);
            }

            topGuide += view.getMarginTop();
            view.applyPosition(
                    new RSLayoutGuide.Builder()
                            .maxWidth(w)
                            .top(topGuide)
                            .start(paddingStart + view.getMarginStart())
                            .end(paddingEnd + view.getMarginEnd())
                            .build()
            );
            topGuide += view.getH();
            topGuide += view.getMarginBottom();
        }

        int bottomGuide = topGuide + paddingBottom;

        return new RSLayoutGuide.Builder().bottom(bottomGuide).build();
    }
}

package com.ericversteeg.view;

import java.awt.*;

public interface RSRenderable
{
    public void render(Graphics2D graphics, Point origin);
}

package com.ericversteeg.view;

import net.runelite.api.Client;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.ui.overlay.Overlay;

import java.util.ArrayList;
import java.util.List;
import java.awt.*;
import java.time.Instant;

public class RSViewOverlay extends Overlay
{
    private List<ViewInfo> viewInfo = new ArrayList<>();

    @Override
    public Dimension render(Graphics2D graphics)
    {
        long start = Instant.now().toEpochMilli();

        for (ViewInfo info: viewInfo)
        {
            Client client = info.getClient();
            RSViewGroup view = info.getView();
            RSAnchorType anchorType = info.getAnchorType();
            int anchorX = info.getAnchorX();
            int anchorY = info.getAnchorY();

            applyFonts(view, graphics);

            view.layout();

            if (anchorType != null)
            {
                Widget viewportWidget = getViewportWidget(client);

                view.setX(anchorX);
                view.setY(anchorY);

                if (anchorType == RSAnchorType.TOP_RIGHT || anchorType == RSAnchorType.BOTTOM_RIGHT)
                {
                    view.setX(viewportWidget.getCanvasLocation().getX() + viewportWidget.getWidth() + 28 - anchorX - view.getW());
                }

                if (anchorType == RSAnchorType.BOTTOM_LEFT || anchorType == RSAnchorType.BOTTOM_RIGHT)
                {
                    view.setY(viewportWidget.getCanvasLocation().getY() + viewportWidget.getHeight() + 41 - anchorY - view.getH());
                }

                if (anchorType == RSAnchorType.TOP_CENTER)
                {
                    view.setX((viewportWidget.getCanvasLocation().getX() + viewportWidget.getWidth() + 28 - view.getW()) / 2 + anchorX);
                }

                if (anchorType == RSAnchorType.LEFT_CENTER)
                {
                    view.setY((viewportWidget.getCanvasLocation().getY() + viewportWidget.getHeight() + 41 - view.getH()) / 2 + anchorY);
                }
            }

            view.render(graphics, new Point(0, 0));
        }

        //System.out.println("Render in " + (Instant.now().toEpochMilli() - start) + "ms");

        return new Dimension(0, 0);
    }

    public void addViewInfo(ViewInfo viewInfo) {
        this.viewInfo.add(viewInfo);
    }

    public void clearViewInfo()
    {
        viewInfo.clear();
    }

    private void applyFonts(RSView view, Graphics2D graphics)
    {
        if (view instanceof RSViewGroup)
        {
            for (RSView sView: ((RSViewGroup) view).subviews)
            {
                applyFonts(sView, graphics);
            }
        }

        if (view instanceof RSTextView)
        {
            ((RSTextView) view).setFontMetrics(graphics);
        }
    }

    private Widget getViewportWidget(Client client)
    {
        Widget widget;

        widget = client.getWidget(WidgetInfo.RESIZABLE_VIEWPORT_INTERFACE_CONTAINER);
        if (widget != null) return widget;

        widget = client.getWidget(WidgetInfo.RESIZABLE_VIEWPORT_BOTTOM_LINE_INTERFACE_CONTAINER);
        if (widget != null) return widget;

        widget = client.getWidget(WidgetInfo.FIXED_VIEWPORT_INTERFACE_CONTAINER);
        if (widget != null) return widget;

        return client.getWidget(WidgetInfo.BANK_INVENTORY_ITEMS_CONTAINER);
    }

    public static class ViewInfo {

        private Client client;
        private RSViewGroup view;
        private RSAnchorType anchorType;
        private int anchorX;
        private int anchorY;

        public ViewInfo(Client client, RSViewGroup view, RSAnchorType anchorType, int anchorX, int anchorY)
        {
            this.client = client;
            this.view = view;
            this.anchorType = anchorType;
            this.anchorX = anchorX;
            this.anchorY = anchorY;
        }

        public Client getClient()
        {
            return client;
        }

        public RSViewGroup getView()
        {
            return view;
        }

        public RSAnchorType getAnchorType()
        {
            return anchorType;
        }

        public int getAnchorX()
        {
            return anchorX;
        }

        public int getAnchorY()
        {
            return anchorY;
        }
    }
}

package com.ericversteeg.view;

import java.util.HashMap;
import java.util.Map;

public enum RSLayoutGuide {
    MAX_WIDTH,
    MAX_HEIGHT,
    START,
    TOP,
    END,
    BOTTOM;

    static class Builder
    {
        private Map<RSLayoutGuide, Integer> guides = new HashMap<>();

        public Builder maxWidth(int w)
        {
            guides.put(MAX_WIDTH, w);

            return this;
        }

        public Builder maxHeight(int h)
        {
            guides.put(MAX_HEIGHT, h);

            return this;
        }

        public Builder start(int s)
        {
            guides.put(START, s);

            return this;
        }

        public Builder top(int t)
        {
            guides.put(TOP, t);

            return this;
        }

        public Builder end(int e)
        {
            guides.put(END, e);

            return this;
        }

        public Builder bottom(int b)
        {
            guides.put(BOTTOM, b);

            return this;
        }

        public Map<RSLayoutGuide, Integer> build()
        {
            return guides;
        }
    }
}

package com.ericversteeg.view;

import java.awt.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public abstract class RSViewGroup extends RSView
{
    public enum Gravity
    {
        START,
        TOP_START,
        TOP,
        TOP_END,
        END,
        BOTTOM_END,
        BOTTOM,
        BOTTOM_START,
        CENTER
    }

    protected Gravity gravity = Gravity.TOP_START;

    protected List<RSView> subviews = new ArrayList<>();

    public RSViewGroup(int x, int y, int w, int h)
    {
        super(x, y, w, h);
    }

    public void setGravity(Gravity gravity)
    {
        this.gravity = gravity;
    }

    public void addView(RSView view)
    {
        subviews.add(view);
        view.setParent(this);
    }

    @Override
    public void render(Graphics2D graphics, Point origin)
    {
        super.render(graphics, origin);

        for (RSView view: subviews)
        {
            view.render(graphics, new Point(origin.x + x, origin.y + y));
        }
    }

    public Gravity getGravity()
    {
        return gravity;
    }

    public int getPaddingStart()
    {
        return paddingStart;
    }

    public int getPaddingTop()
    {
        return paddingTop;
    }

    public int getPaddingEnd()
    {
        return paddingEnd;
    }

    public int getPaddingBottom()
    {
        return paddingBottom;
    }

    public void setPadding(int padding)
    {
        paddingStart = padding;
        paddingTop = padding;
        paddingEnd = padding;
        paddingBottom = padding;
    }

    public Dimension layout()
    {
        return applyDimension(new RSLayoutGuide.Builder()
                .maxWidth(w)
                .build()
        );
    }

    abstract protected Map<RSLayoutGuide, Integer> layoutSubviews(Map<RSLayoutGuide, Integer> guides);

    @Override
    protected Dimension applyDimension(Map<RSLayoutGuide, Integer> guides) {
        // calculate width and height for all subviews before layout
        for (RSView view: subviews)
        {
            view.applyDimension(
                    subviewMaxDimensionGuides(guides, view)
            );
        }

        // layout subviews (x, y)
        Map<RSLayoutGuide, Integer> layoutGuides = layoutSubviewsAndResize(guides);

        boolean appliedWeight = false;

        // apply width weights
        if (dimensionParams.getW() != WRAP_CONTENT)
        {
            Integer endGuide = layoutGuides.get(RSLayoutGuide.END);
            if (endGuide != null)
            {
                float totalWeight = 0;
                int totalAddedWidth = 0;
                int weightWidth = measureWidth(guides) - endGuide;

                for (RSView view: subviews)
                {
                    if (view.getWeight() != null)
                    {
                        totalWeight += view.getWeight();
                    }
                }

                if (totalWeight > 0)
                {
                    for (RSView view: subviews)
                    {
                        view.setX(view.getX() + totalAddedWidth);

                        Float weight = view.getWeight();
                        if (weight != null)
                        {
                            int width = (int) (weight / totalWeight * weightWidth);
                            view.setW(width);

                            view.dimensionParams.setW(width);
                            view.applyDimension(subviewMaxDimensionGuides(guides, view));
                            view.getWeightParams().setWeight(null);

                            appliedWeight = true;

                            totalAddedWidth += width;
                        }
                    }

                    int truncatedWidth = weightWidth - totalAddedWidth;
                    boolean foundView = false;

                    for (RSView view: subviews)
                    {
                        if (getWeight() != null && !foundView)
                        {
                            view.setW(view.getW()
                                    + truncatedWidth);

                            view.dimensionParams.setW(view.getW());
                            view.applyDimension(subviewMaxDimensionGuides(guides, view));

                            foundView = true;
                        }

                        if (foundView)
                        {
                            view.setX(view.getX() + truncatedWidth);
                        }
                    }
                }
            }
        }

        // apply height weights
        if (dimensionParams.getH() != WRAP_CONTENT)
        {
            Integer bottomGuide = layoutGuides.get(RSLayoutGuide.BOTTOM);
            if (bottomGuide != null)
            {
                float totalWeight = 0;
                int totalAddedHeight = 0;
                int weightHeight = measureHeight(guides) - bottomGuide;

                for (RSView view: subviews)
                {
                    if (view.getWeight() != null)
                    {
                        totalWeight += view.getWeight();
                    }
                }

                if (totalWeight > 0)
                {
                    for (RSView view: subviews)
                    {
                        view.setY(view.getY() + totalAddedHeight);

                        Float weight = view.getWeight();
                        if (weight != null)
                        {
                            int height = (int) (weight / totalWeight * weightHeight);
                            view.setH(height);

                            view.dimensionParams.setH(view.getH());
                            view.applyDimension(subviewMaxDimensionGuides(guides, view));
                            view.getWeightParams().setWeight(null);

                            appliedWeight = true;

                            totalAddedHeight += height;
                        }
                    }

                    int truncatedHeight = weightHeight - totalAddedHeight;
                    boolean foundView = false;

                    for (RSView view: subviews)
                    {
                        if (getWeight() != null && !foundView)
                        {
                            view.setH(view.getH()
                                    + truncatedHeight);

                            view.dimensionParams.setH(view.getH());
                            view.applyDimension(subviewMaxDimensionGuides(guides, view));

                            foundView = true;
                        }

                        if (foundView)
                        {
                            view.setY(view.getY() + truncatedHeight);
                        }
                    }
                }
            }
        }

        // if weight was applied
        // layout subviews again
        if (appliedWeight)
        {
            layoutSubviewsAndResize(guides);
        }

        return new Dimension(w, h);
    }

    private Map<RSLayoutGuide, Integer> layoutSubviewsAndResize(Map<RSLayoutGuide, Integer> guides)
    {
        Map<RSLayoutGuide, Integer> layoutGuides = layoutSubviews(guides);

        // measure (w, h)
        if (dimensionParams.getW() == WRAP_CONTENT
                && layoutGuides.containsKey(RSLayoutGuide.END))
        {
            w = layoutGuides.get(RSLayoutGuide.END);
        }
        else
        {
            w = measureWidth(guides);
        }

        if (dimensionParams.getH() == WRAP_CONTENT
                && layoutGuides.containsKey(RSLayoutGuide.BOTTOM))
        {
            h = layoutGuides.get(RSLayoutGuide.BOTTOM);
        }
        else
        {
            h = measureHeight(guides);
        }

        return layoutGuides;
    }

    @Override
    public int measureWidth(Map<RSLayoutGuide, Integer> guides)
    {
        if (dimensionParams.getW() == MATCH_PARENT)
        {
            return guides.get(RSLayoutGuide.MAX_WIDTH);
        }
        else if (dimensionParams.getW() == WRAP_CONTENT)
        {
            return getMaxSubviewWidth();
        }
        else
        {
            return dimensionParams.getW();
        }
    }

    protected int getMaxSubviewWidth()
    {
        int max = 0;
        for (RSView view: subviews)
        {
            int sw = view.getW() + view.getMarginStart()
                    + view.getMarginEnd() + paddingStart
                    + paddingEnd;
            if (sw > max)
            {
                max = sw;
            }
        }
        return max;
    }

    @Override
    public int measureHeight(Map<RSLayoutGuide, Integer> guides)
    {
        if (dimensionParams.getH() == MATCH_PARENT)
        {
            return guides.get(RSLayoutGuide.MAX_HEIGHT);
        }
        else if (dimensionParams.getH() == WRAP_CONTENT)
        {
            return getMaxSubviewHeight();
        }
        else
        {
            return dimensionParams.getH();
        }
    }

    protected int getMaxSubviewHeight()
    {
        int max = 0;
        for (RSView view: subviews)
        {
            int sw = view.getH() + view.getMarginTop()
                    + view.getMarginBottom() + paddingTop
                    + paddingBottom;
            if (sw > max)
            {
                max = sw;
            }
        }
        return max;
    }

    protected Map<RSLayoutGuide, Integer> subviewMaxDimensionGuides(
            Map<RSLayoutGuide, Integer> guides, RSView view)
    {
        Map<RSLayoutGuide, Integer> subviewGuides = new HashMap<>();

        if (dimensionParams.getW() != WRAP_CONTENT)
        {
            int wGuide = dimensionParams.getW();
            if (dimensionParams.getW() == MATCH_PARENT
                    && guides.containsKey(RSLayoutGuide.MAX_WIDTH))
            {
                wGuide = guides.get(RSLayoutGuide.MAX_WIDTH);
            }

            subviewGuides.put(RSLayoutGuide.MAX_WIDTH, wGuide
                    - view.getMarginStart() - view.getMarginEnd()
                    - getPaddingStart() - getPaddingEnd());
        }

        if (dimensionParams.getH() != WRAP_CONTENT)
        {
            int hGuide = dimensionParams.getH();
            if (dimensionParams.getH() == MATCH_PARENT
                    && guides.containsKey(RSLayoutGuide.MAX_HEIGHT))
            {
                hGuide = guides.get(RSLayoutGuide.MAX_HEIGHT);
            }

            subviewGuides.put(RSLayoutGuide.MAX_HEIGHT, hGuide
                    - view.getMarginTop() - view.getMarginBottom()
                    - getPaddingTop() - getPaddingBottom());
        }

        return subviewGuides;
    }
}

