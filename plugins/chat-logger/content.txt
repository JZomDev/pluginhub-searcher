package fking.work.chatlogger;

import net.runelite.api.Client;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestInstance.Lifecycle;

import static org.mockito.Mockito.*;

@TestInstance(Lifecycle.PER_CLASS)
public class CrossWorldMessagesTest {

    private static final int ORIGINAL_ARRAY_SIZE = 100;

    @Test
    public void latest_id_test() {
        Client clientMock = mock(Client.class);
        long expected = 123456;
        long[] messageIds = new long[ORIGINAL_ARRAY_SIZE];
        messageIds[0] = expected;

        when(clientMock.getCrossWorldMessageIds()).thenReturn(messageIds);
        when(clientMock.getCrossWorldMessageIdsIndex()).thenReturn(1);

        long latestId = CrossWorldMessages.latestId(clientMock);

        Assertions.assertEquals(expected, latestId);
    }

    @Test
    public void latest_id_rollover_test() {
        Client clientMock = mock(Client.class);
        long expected = 123456;
        long[] messageIds = new long[ORIGINAL_ARRAY_SIZE];
        messageIds[ORIGINAL_ARRAY_SIZE - 1] = expected;

        when(clientMock.getCrossWorldMessageIds()).thenReturn(messageIds);
        when(clientMock.getCrossWorldMessageIdsIndex()).thenReturn(0);

        long latestId = CrossWorldMessages.latestId(clientMock);

        Assertions.assertEquals(expected, latestId);
    }
}

package fking.work.chatlogger;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ChatLoggerPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ChatLoggerPlugin.class);
		RuneLite.main(args);
	}
}
package fking.work.chatlogger;

import com.google.gson.Gson;
import lombok.extern.slf4j.Slf4j;
import net.jodah.failsafe.CircuitBreaker;
import net.jodah.failsafe.Failsafe;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Request.Builder;
import okhttp3.RequestBody;
import okhttp3.Response;

import java.io.IOException;
import java.time.Duration;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentLinkedDeque;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

@Slf4j
public class RemoteSubmitter {

    private static final MediaType APPLICATION_JSON = MediaType.parse("application/json");
    private static final int MAX_ENTRIES_PER_TICK = 30;
    private static final int TICK_INTERVAL = 5;

    private static final CircuitBreaker<Object> BREAKER = new CircuitBreaker<>()
            .handle(IOException.class)
            .withDelay(Duration.ofMinutes(5))
            .withFailureThreshold(3, Duration.ofSeconds(30))
            .onHalfOpen(RemoteSubmitter::onHalfOpen);

    private final ConcurrentLinkedDeque<ChatEntry> queuedEntries = new ConcurrentLinkedDeque<>();
    private final ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();

    private final ChatLoggerConfig config;
    private final OkHttpClient okHttpClient;
    private final Gson gson;

    private RemoteSubmitter(ChatLoggerConfig config, OkHttpClient okHttpClient, Gson gson) {
        this.config = config;
        this.okHttpClient = okHttpClient;
        this.gson = gson.newBuilder()
                        .registerTypeAdapter(ZonedDateTime.class, new ZonedDateTimeAdapter())
                        .create();
    }

    public static RemoteSubmitter create(ChatLoggerConfig config, OkHttpClient okHttpClient, Gson gson) {
        return new RemoteSubmitter(config, okHttpClient, gson);
    }

    private static void onHalfOpen() {
        log.info("Checking if remote host is answering properly again (HALF_OPEN)");
    }

    public void initialize() {
        executorService.scheduleAtFixedRate(this::processQueue, TICK_INTERVAL, TICK_INTERVAL, TimeUnit.SECONDS);
    }

    public void shutdown() {
        executorService.shutdown();
    }

    public void queue(ChatEntry entry) {
        queuedEntries.add(entry);
    }

    private void processQueue() {

        if (queuedEntries.isEmpty()) {
            return;
        }
        RequestBody payload = buildPayload();

        try {
            Failsafe.with(BREAKER).run(() -> {
                String authorization = config.remoteEndpointAuthorization();

                if (authorization == null || authorization.trim().isEmpty()) {
                    authorization = "none";
                }
                Request request = new Builder()
                        .url(config.remoteEndpoint())
                        .addHeader("Authorization", authorization)
                        .post(payload)
                        .build();

                try (Response response = okHttpClient.newCall(request).execute()) {

                    if (!response.isSuccessful()) {
                        log.warn("Remote endpoint returned non successful response, responseCode={}", response.code());
                    }
                }
            });
        } catch (Exception e) {
            if (!BREAKER.isOpen()) {
                log.warn("Failed to submit chat entries: {}", e.getMessage());
            }
        }
    }

    private RequestBody buildPayload() {
        List<ChatEntry> entries = new ArrayList<>();
        int count = 0;

        while (!queuedEntries.isEmpty() && count < MAX_ENTRIES_PER_TICK) {
            entries.add(queuedEntries.poll());
            count++;
        }
        return RequestBody.create(APPLICATION_JSON, gson.toJson(entries));
    }
}

package fking.work.chatlogger;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

import static fking.work.chatlogger.ChatLoggerConfig.*;

@ConfigGroup(GROUP_NAME)
public interface ChatLoggerConfig extends Config {

    String GROUP_NAME = "chatlogger";

    @ConfigSection(
        name = "Channel Select", 
        description = "Enable/Disable chat channels", 
        position = 0
    )
    String CHANNEL_SECT = "Channel Select";

    @ConfigSection(
        name = "Logging Options", 
        description = "Change Logging behaviour", 
        position = 10
    )
    String LOGGING_SECT = "Logging Options";

    @ConfigSection(
            name = "Remote Submission",
            description = "Settings for remote submission of chat messages",
            position = 20,
            closedByDefault = true
    )
    String REMOTE_SECT = "remote";

    // Channel Select
    @ConfigItem(
        section = CHANNEL_SECT, 
        keyName = "game", 
        name = "Game Chat", 
        description = "Enable game chat logging"
    )
    default boolean logGameChat() {
        return false;
    }

    @ConfigItem(
        section = CHANNEL_SECT, 
        keyName = "public",
        name = "Public Chat",
        description = "Enables logging of the public chat"
    )
    default boolean logPublicChat() {
        return false;
    }

    @ConfigItem(
        section = CHANNEL_SECT, 
        keyName = "private",
        name = "Private Chat",
        description = "Enables logging of the private chat"
    )
    default boolean logPrivateChat() {
        return true;
    }

    @ConfigItem(
        section = CHANNEL_SECT, 
        keyName = "friends",
        name = "Friends Chat (Channel Chat)",
        description = "Enables logging of the friends chat"
    )
    default boolean logFriendsChat() {
        return true;
    }

    @ConfigItem(
        section = CHANNEL_SECT, 
        keyName = "clan",
        name = "Clan Chat",
        description = "Enables logging of the clan chat"
    )
    default boolean logClanChat() {
        return true;
    }
    
    @ConfigItem(
        section = CHANNEL_SECT, 
        keyName = "group_iron",
        name = "Group Iron Chat",
        description = "Enables logging of the group iron-man chat"
    )
    default boolean logGroupChat() {
        return true;
    }


    // Logging Config
    
    @ConfigItem(
        section = LOGGING_SECT, 
        keyName = "per_user", 
        name = "Folder Per User", 
        description = "Splits chats up into folders per logged in user"
    )
    default boolean logChatPerUser() {
        return true;
    }

    @ConfigItem(
        section = LOGGING_SECT, 
        keyName = "archive_count", 
        name = "Archive Count", 
        description = "Number of archived days of chat to save (0 for infinite)"
    )
    default int archiveCount() {
        return 30;
    }

    // Remote Submission
    @ConfigItem(
            keyName = "remotelogfriends",
            name = "Remote Friends Chat (Channel Chat)",
            description = "Enables remote submission of the friends chat",
            section = REMOTE_SECT
    )
    default boolean remoteSubmitLogFriendsChat() {
        return false;
    }

    @ConfigItem(
        section = REMOTE_SECT,
        keyName = "remoteloggroup",
        name = "Remote Group Chat",
        description = "Enables remote submission of the group iron-man chat"
    )
    default boolean remoteSubmitLogGroupChat() {
        return false;
    }

    @ConfigItem(
        section = REMOTE_SECT,
        keyName = "remotelogclan",
        name = "Remote Clan Chat",
        description = "Enables remote submission of the clan chat"
    )
    default boolean remoteSubmitLogClanChat() {
        return false;
    }

    @ConfigItem(
        section = REMOTE_SECT,
        keyName = "remoteendpoint",
        name = "Endpoint",
        description = "The endpoint that messages will be submitted to"
    )
    default String remoteEndpoint() {
        return null;
    }

    @ConfigItem(
        section = REMOTE_SECT,
        keyName = "remoteauthorization",
        name = "Authorization",
        description = "The Authorization header value"
    )
    default String remoteEndpointAuthorization() {
        return null;
    }
}

package fking.work.chatlogger;

import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.time.ZonedDateTime;

public class ZonedDateTimeAdapter extends TypeAdapter<ZonedDateTime> {

    @Override
    public void write(JsonWriter jsonWriter, ZonedDateTime zonedDateTime) throws IOException {
        jsonWriter.value(zonedDateTime.toString());
    }

    @Override
    public ZonedDateTime read(JsonReader jsonReader) throws IOException {
        return ZonedDateTime.parse(jsonReader.nextString());
    }
}

package fking.work.chatlogger;

import lombok.ToString;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.util.Text;

import java.time.Clock;
import java.time.ZonedDateTime;

@ToString
public class ChatEntry {

    private final ZonedDateTime timestamp;
    private final long id;
    private final ChatType chatType;
    private final String chatName;
    private final String sender;
    private final int rank;
    private final String message;

    private ChatEntry(long id, ChatType chatType, String chatName, String sender, int rank, String message) {
        this.id = id;
        this.chatType = chatType;
        this.timestamp = ZonedDateTime.now(Clock.systemUTC());
        this.chatName = chatName;
        this.sender = sender;
        this.rank = rank;
        this.message = message;
    }

    public static ChatEntry from(long messageId, ChatType chatType, String chatName, int rank, ChatMessage chatMessage) {
        String sender = chatMessage.getName().isEmpty() ? chatName : Text.removeFormattingTags(chatMessage.getName());
        return new ChatEntry(messageId, chatType, Text.standardize(chatName), sender, rank, chatMessage.getMessage());
    }

    public enum ChatType {
        FRIENDS,
        CLAN
    }
}

package fking.work.chatlogger;

import org.slf4j.LoggerFactory;

import com.google.gson.Gson;
import com.google.inject.Inject;
import com.google.inject.Provides;

import ch.qos.logback.classic.*;
import ch.qos.logback.classic.encoder.PatternLayoutEncoder;
import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.core.rolling.RollingFileAppender;
import ch.qos.logback.core.rolling.TimeBasedRollingPolicy;
import fking.work.chatlogger.ChatEntry.ChatType;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.clan.ClanChannel;
import net.runelite.api.clan.ClanChannelMember;
import net.runelite.api.events.*;
import net.runelite.client.RuneLite;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.util.Text;
import okhttp3.OkHttpClient;

@Slf4j
@PluginDescriptor(name = "Chat Logger", description = "Logs chat messages to a file")
public class ChatLoggerPlugin extends Plugin {

    private static final String BASE_DIRECTORY = RuneLite.RUNELITE_DIR + "/chatlogs/";
    private static final int CHANNEL_UNRANKED = -2;

    @Inject
    private ChatLoggerConfig config;

    @Inject
    private Client client;

    @Inject
    private OkHttpClient httpClient;

    @Inject
    private Gson gson;

    private RemoteSubmitter remoteSubmitter;
    private Logger publicChatLogger;
    private Logger privateChatLogger;
    private Logger friendsChatLogger;
    private Logger clanChatLogger;
    private Logger groupChatLogger;
    private Logger gameChatLogger;

    private boolean can_load = false;

    @Provides
    ChatLoggerConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(ChatLoggerConfig.class);
    }

    @Override
    protected void startUp() {
        startRemoteSubmitter();
        // If plugin enabled while logged in
        if(client.getGameState().equals(GameState.LOGGED_IN)){
            triggerInit();
        }
    }

    @Override
    protected void shutDown() {
        shutdownRemoteSubmitter();
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged event) {
        if (event.getGameState().equals(GameState.LOGGED_IN)) {
            // SO this actually fires BEFORE the player is fully logged in.. sooo we know it
            // is about to happen
            triggerInit();
        }
    }

    @Subscribe
    public void onGameTick(GameTick tick) {
        // If we are logging per player, wait until we have the player login name
        if (can_load && (!config.logChatPerUser() || client.getLocalPlayer().getName() != null)) {
            initLoggers();
            can_load = false;
        }
    }

    private void triggerInit() {
        can_load = true;
    }

    private void initLoggers() {
        publicChatLogger = setupLogger("PublicChatLogger", "public");
        privateChatLogger = setupLogger("PrivateChatLogger", "private");
        friendsChatLogger = setupLogger("FriendsChatLogger", "friends");
        clanChatLogger = setupLogger("ClanChatLogger", "clan");
        groupChatLogger = setupLogger("GroupChatLogger", "group");
        gameChatLogger = setupLogger("GameChatLogger", "game");
    }

    private void startRemoteSubmitter() {
        if (config.remoteSubmitLogFriendsChat() || config.remoteSubmitLogClanChat()) {

            if (remoteSubmitter != null) {
                log.debug("Shutting down previous remoteSubmitter...");
                shutdownRemoteSubmitter();
            }
            log.debug("Starting a new remoteSubmitter...");
            remoteSubmitter = RemoteSubmitter.create(config, httpClient, gson);
            remoteSubmitter.initialize();
        }
    }

    private void shutdownRemoteSubmitter() {
        if (remoteSubmitter != null) {
            remoteSubmitter.shutdown();
            remoteSubmitter = null;
        }
    }

    private int friendsChatMemberRank(String name) {
        FriendsChatManager friendsChatManager = client.getFriendsChatManager();
        if (friendsChatManager != null) {
            FriendsChatMember member = friendsChatManager.findByName(Text.removeTags(name));
            return member != null ? member.getRank().getValue() : CHANNEL_UNRANKED;
        }
        return CHANNEL_UNRANKED;
    }

    private int clanChannelMemberRank(String name, String clanName) {
        String cleanName = Text.removeTags(name);
        ClanChannel clanChannel = client.getClanChannel();

        if (clanChannel != null) {
            ClanChannelMember member = clanChannel.findMember(cleanName);
            if (member != null && clanChannel.getName().equals(clanName)) {
                return member.getRank().getRank();
            }
        }
        clanChannel = client.getGuestClanChannel();

        if (clanChannel != null) {
            ClanChannelMember member = clanChannel.findMember(cleanName);
            if (member != null && clanChannel.getName().equals(clanName)) {
                return member.getRank().getRank();
            }
        }
        return CHANNEL_UNRANKED;
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event) {
        if (!ChatLoggerConfig.GROUP_NAME.equals(event.getGroup())) {
            return;
        }
        // If we need to reload loggers
        if (event.getKey().equals("per_user") || event.getKey().equals("archive_count")) {
            triggerInit();
        }
        startRemoteSubmitter();
    }

    @Subscribe
    public void onChatMessage(ChatMessage event) {
        switch (event.getType()) {
            case CLAN_GIM_CHAT:
            case CLAN_GIM_MESSAGE:
            case CLAN_GIM_FORM_GROUP:
            case CLAN_GIM_GROUP_WITH:
                if (config.logGroupChat()) {
                    if (event.getType() == ChatMessageType.CLAN_GIM_MESSAGE) {
                        groupChatLogger.info("{}", event.getMessage());
                    } else {
                        groupChatLogger.info("{}: {}", event.getName(), event.getMessage());
                    }
                }
                
                if (config.remoteSubmitLogGroupChat() && remoteSubmitter != null) {
                    submitToRemote("groupiron", event, CHANNEL_UNRANKED);
                }

            case FRIENDSCHAT:
                if (config.logFriendsChat()) {
                    friendsChatLogger.info("[{}] {}: {}", event.getSender(), event.getName(), event.getMessage());
                }

                if (config.remoteSubmitLogFriendsChat() && remoteSubmitter != null) {
                    FriendsChatManager friendsChatManager = client.getFriendsChatManager();

                    if (friendsChatManager == null) {
                        return;
                    }
                    String owner = friendsChatManager.getOwner();
                    submitToRemote(owner, event, friendsChatMemberRank(event.getName()));
                }
                break;

            case GAMEMESSAGE:
                if (config.logGameChat()) {
                    gameChatLogger.info(event.getMessage());
                }

                break;
            case CLAN_CHAT:
            case CLAN_GUEST_CHAT:
            case CLAN_MESSAGE:
                if (config.logClanChat()) {
                    if (event.getType() == ChatMessageType.CLAN_MESSAGE) {
                        clanChatLogger.info("{}", event.getMessage());
                    } else {
                        clanChatLogger.info("{}: {}", event.getName(), event.getMessage());
                    }
                }

                if (config.remoteSubmitLogClanChat() && remoteSubmitter != null) {
                    ClanChannel clanChannel = event.getType() == ChatMessageType.CLAN_CHAT || event.getType() == ChatMessageType.CLAN_MESSAGE ? client.getClanChannel() : client.getGuestClanChannel();

                    if (clanChannel == null) {
                        return;
                    }
                    String chatName = clanChannel.getName();
                    submitToRemote(chatName, event, clanChannelMemberRank(event.getName(), chatName));
                }
                break;
            case PRIVATECHAT:
            case MODPRIVATECHAT:
            case PRIVATECHATOUT:
                if (config.logPrivateChat()) {
                    String predicate = event.getType() == ChatMessageType.PRIVATECHATOUT ? "To" : "From";
                    privateChatLogger.info("{} {}: {}", predicate, event.getName(), event.getMessage());
                }
                break;
            case MODCHAT:
            case PUBLICCHAT:
                if (config.logPublicChat()) {
                    publicChatLogger.info("{}: {}", event.getName(), event.getMessage());
                }
                break;
        }
    }

    private void submitToRemote(String channelName, ChatMessage event, int rank) {
        long messageId = CrossWorldMessages.latestId(client);
        remoteSubmitter.queue(ChatEntry.from(messageId, ChatType.CLAN, channelName, rank, event));
    }

    private Logger setupLogger(String loggerName, String subFolder) {
        LoggerContext context = (LoggerContext) LoggerFactory.getILoggerFactory();

        PatternLayoutEncoder encoder = new PatternLayoutEncoder();
        encoder.setContext(context);
        encoder.setPattern("%d{HH:mm:ss} %msg%n");
        encoder.start();

        String directory = BASE_DIRECTORY;

        if (config.logChatPerUser()) {
            directory += client.getLocalPlayer().getName() + "/";
        }

        directory += subFolder + "/";

        RollingFileAppender<ILoggingEvent> appender = new RollingFileAppender<>();
        appender.setFile(directory + "latest.log");
        appender.setAppend(true);
        appender.setEncoder(encoder);
        appender.setContext(context);

        TimeBasedRollingPolicy<ILoggingEvent> logFilePolicy = new TimeBasedRollingPolicy<>();
        logFilePolicy.setContext(context);
        logFilePolicy.setParent(appender);
        logFilePolicy.setFileNamePattern(directory + "chatlog_%d{yyyy-MM-dd}.log");
        logFilePolicy.setMaxHistory(config.archiveCount());
        logFilePolicy.start();

        appender.setRollingPolicy(logFilePolicy);
        appender.start();

        Logger logger = context.getLogger(loggerName);
        logger.detachAndStopAllAppenders();
        logger.setAdditive(false);
        logger.setLevel(Level.INFO);
        logger.addAppender(appender);

        return logger;
    }
}

package fking.work.chatlogger;

import lombok.experimental.UtilityClass;
import net.runelite.api.Client;

@UtilityClass
public class CrossWorldMessages {

    long latestId(Client client) {
        long[] crossWorldMessageIds = client.getCrossWorldMessageIds();
        int index = client.getCrossWorldMessageIdsIndex() - 1;
        if (index == -1) {
            index = crossWorldMessageIds.length - 1;
        }
        return crossWorldMessageIds[index];
    }
}

