package com.infernostats;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DeathChargeReminderPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(DeathChargeReminderPlugin.class);
		RuneLite.main(args);
	}
}
package com.infernostats;

import java.awt.Color;
import net.runelite.client.config.Alpha;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("DeathChargeReminder")
public interface DeathChargeReminderConfig extends Config
{
	@ConfigItem(
		keyName = "overlayDuration",
		name = "Overlay Duration",
		description = "Overlay duration in game ticks"
	)
	default int overlayDuration()
	{
		return 15;
	}

	@Alpha
	@ConfigItem(
		keyName = "overlayColor",
		name = "Overlay Color",
		description = "Overlay Background Color"
	)
	default Color overlayColor() {
		return new Color(255, 0, 0, 150);
	}
}

package com.infernostats;

public enum DeathChargeTimerState
{
	IDLE,
	ACTIVE,
	EXPIRED,
}

package com.infernostats;

import com.google.inject.Provides;
import java.util.regex.Pattern;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;


@Slf4j
@PluginDescriptor(
	name = "Death Charge Reminder"
)
public class DeathChargeReminderPlugin extends Plugin
{
	private DeathChargeTimer timer = null;

	private int overlayVisible;

	@Inject
	private DeathChargeReminderConfig config;

	@Inject
	private DeathChargeReminderOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private Client client;

	public static final Pattern DEATH_CHARGE_ACTIVE =
		Pattern.compile("<col=[A-Fa-f\\d]+>Upon the death of your next foe, some of your special attack energy will be restored\\.</col>");


	@Override
	protected void startUp()
	{
		overlayVisible = -1;
		timer = new DeathChargeTimer();
	}

	@Override
	protected void shutDown()
	{
		removeOverlay();
		timer = null;
	}

	@Provides
	DeathChargeReminderConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(DeathChargeReminderConfig.class);
	}

	@Subscribe
	public void onChatMessage(ChatMessage event)
	{
		final String message = event.getMessage();

		if (message.matches(DEATH_CHARGE_ACTIVE.pattern()))
		{
			timer.start();
		}
	}

	@Subscribe
	public void onGameTick(GameTick e)
	{
		if (overlayVisible != -1)
		{
			checkOverlay();
		}

		if (this.timer == null)
		{
			return;
		}

		switch (this.timer.getState()) {
			case ACTIVE:
				removeOverlay();
				break;
			case EXPIRED:
				addOverlay();
				timer.stop();
				break;
			case IDLE:
			default:
				break;
		}
	}

	private void addOverlay()
	{
		overlayManager.add(overlay);
		overlayVisible = client.getTickCount();
	}

	private void removeOverlay()
	{
		overlayManager.remove(overlay);
		overlayVisible = -1;
	}

	private void checkOverlay()
	{
		if (client.getTickCount() - overlayVisible >= config.overlayDuration())
		{
			removeOverlay();
		}
	}
}

package com.infernostats;

import java.util.Timer;
import java.util.TimerTask;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class DeathChargeTimer
{
	private Timer timer;

	@Getter
	private DeathChargeTimerState state;

	DeathChargeTimer()
	{
		timer = null;
		state = DeathChargeTimerState.IDLE;
	}

	public void start() {
		timer = new Timer();

		timer.schedule(new TimerTask()
		{
			@Override
			public void run()
			{
				state = DeathChargeTimerState.EXPIRED;
			}
		}, 60 * 1000);

		state = DeathChargeTimerState.ACTIVE;
	}

	public void stop() {
		timer = null;
		state = DeathChargeTimerState.IDLE;
	}
}

package com.infernostats;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

public class DeathChargeReminderOverlay extends OverlayPanel
{
	private final DeathChargeReminderConfig config;
	private final Client client;

	@Inject
	private DeathChargeReminderOverlay(DeathChargeReminderConfig config, Client client)
	{
		this.config = config;
		this.client = client;
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		final String deathChargeMessage = "You need to death charge!";
		final int length = graphics.getFontMetrics().stringWidth(deathChargeMessage);

		panelComponent.getChildren().clear();

		panelComponent.getChildren().add((LineComponent.builder())
			.left(deathChargeMessage)
			.build());

		panelComponent.setPreferredSize(new Dimension(length + 10, 0));
		panelComponent.setBackgroundColor(config.overlayColor());

		setPosition(OverlayPosition.ABOVE_CHATBOX_RIGHT);

		return panelComponent.render(graphics);
	}
}

