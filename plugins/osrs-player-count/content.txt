package com.protje.osrsplayercount;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class OsrsPlayerCountTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(OsrsPlayerCountPlugin.class);
		RuneLite.main(args);
	}
}

package com.protje.osrsplayercount;

import com.google.inject.Provides;
import javax.inject.Inject;

import com.protje.osrsplayercount.overlays.OsrsPlayerCountOverlay;
import com.protje.osrsplayercount.scraper.OsrsPlayerCountWebScraper;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
	name = "OSRS Player Count"
)
public class OsrsPlayerCountPlugin extends Plugin
{
	@Inject
	private OverlayManager overlayManager;

	@Inject
	private OsrsPlayerCountOverlay playerCountOverlay;

	@Override
	protected void startUp()
	{
		log.debug("OSRS player count plugin started!");
		overlayManager.add(playerCountOverlay);
	}

	@Override
	protected void shutDown()
	{
		log.debug("OSRS player count plugin stopped!");
		overlayManager.remove(playerCountOverlay);
	}

	@Provides
	OsrsPlayerCountConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(OsrsPlayerCountConfig.class);
	}
}

package com.protje.osrsplayercount.overlays;

import com.google.inject.Inject;
import com.protje.osrsplayercount.scraper.OsrsPlayerCountWebScraper;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.TitleComponent;

import java.awt.*;

public class OsrsPlayerCountOverlay extends OverlayPanel {

	@Inject
	private OsrsPlayerCountWebScraper scraper;

	@Inject
	private OsrsPlayerCountOverlay()
	{
		setPosition(OverlayPosition.TOP_RIGHT);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		panelComponent.getChildren().clear();

		String playerCount = this.scraper.getPlayerCount();

		try {
			addPlayerCount(playerCount);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}

		return super.render(graphics);
	}

	/**
	 * Renders a title and the given amount of playerCount.
	 * @param playerCount Amount of players
	 */
	private void addPlayerCount(final String playerCount) {
		panelComponent.getChildren().add(TitleComponent.builder().text("Players online:").build());
		panelComponent.getChildren().add(TitleComponent.builder().text(playerCount).build());
	}
}

package com.protje.osrsplayercount;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Range;

@ConfigGroup("osrs-player-count")
public interface OsrsPlayerCountConfig extends Config
{
	@ConfigItem(
			keyName = "refreshInterval",
			name = "Refresh interval",
			description = "Controls the time in seconds before the player count gets retrieved from the OSRS home page."
	)
	@Range(
			min = 60,
			max = 3600
	)
	default int refreshInterval()
	{
		return 60;
	}
}

package com.protje.osrsplayercount.scraper;

import com.google.inject.Inject;
import com.protje.osrsplayercount.OsrsPlayerCountConfig;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.RuneLite;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.concurrent.CompletableFuture;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
/**
 * Web scraper specifically made for the OSRS home page to retrieve the amount of players
 */
public class OsrsPlayerCountWebScraper {
	static final String OSRS_HOMEPAGE_URL = "https://oldschool.runescape.com/";
	static final Pattern OSRS_PLAYER_COUNT_PATTERN = Pattern.compile("<p class='player-count'>There are currently ([\\d,]+) people playing!</p>", Pattern.DOTALL);
	static final String USER_AGENT = RuneLite.USER_AGENT + " (osrs-player-count)";

	@Inject
	private OsrsPlayerCountConfig config;
	@Inject
	private OkHttpClient httpClient;
	private String playerCount = "-";
	private long lastCheckedTime;

	/**
	 * This retreive the player count taking into account the set refreshInterval
	 *
	 * @return The amount of OSRS players
	 */
	public String getPlayerCount() {
		// We only want to re-scrape after the set amount of time
		// Time from the config is in seconds, so it gets multiplied it by 1000 to get it in milliseconds
		if (this.getTimestamp() - this.lastCheckedTime >= config.refreshInterval() * 1000) {
			CompletableFuture.runAsync(extractPlayerCountFromHTML());
			this.lastCheckedTime = getTimestamp();
		}
		return this.playerCount;
	}

	private long getTimestamp() {
		Timestamp timestamp = new Timestamp(System.currentTimeMillis());
		return timestamp.getTime();
	}

	/**
	 * Retrieve the OSRS homepage and by using scraping and regex matching it retrieves the current amount of players.
	 * This function should be executed asynchronously so that it does not block the render function of the Runelite overlay.
	 */
	private Runnable extractPlayerCountFromHTML() {
		return () -> {
			final Request request = new Request.Builder().url(OSRS_HOMEPAGE_URL).header("User-Agent", USER_AGENT).build();
			final Response response;
			final String content;

			try {
				response = httpClient.newCall(request).execute();
				content = response.body().string();
			} catch (IOException e) {
				throw new RuntimeException(e);
			}

			// By using regex matching we retrieve the correct amount of players
			final Matcher m = OSRS_PLAYER_COUNT_PATTERN.matcher(content);

			if (m.find()) {
				log.debug("Scraped OSRS homepage player count");
				playerCount = m.group(1);
			} else {
				log.error("Failed to scrape OSRS homepage player count");
				playerCount = "-";
			}
		};
	}

}

