package com.dryrate;

/**
 * Enum representing the different raid types we track
 */
public enum RaidType
{
    TOB("Theatre of Blood", "ToB"),
    TOA("Tombs of Amascut", "ToA"),
    COX("Chambers of Xeric", "CoX");

    private final String fullName;
    private final String shortName;

    RaidType(String fullName, String shortName)
    {
        this.fullName = fullName;
        this.shortName = shortName;
    }

    public String getFullName()
    {
        return fullName;
    }

    public String getShortName()
    {
        return shortName;
    }

    @Override
    public String toString()
    {
        return shortName;
    }
} 
package com.dryrate;

import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import java.util.Map;

/**
 * Panel that displays dry streak information for all raids
 */
@Slf4j
public class DryRatePanel extends PluginPanel
{
    private final DryRateManager dryRateManager;
    private final DecimalFormat decimalFormat;
    
    // UI Components
    private JPanel mainPanel;
    private Map<RaidType, JPanel> raidPanels;

    public DryRatePanel(DryRateManager dryRateManager)
    {
        this.dryRateManager = dryRateManager;
        this.decimalFormat = new DecimalFormat("#.#");
        
        setBackground(ColorScheme.DARK_GRAY_COLOR);
        setLayout(new BorderLayout());
        
        log.debug("Initializing panel");
        initializeComponents();
        updateDisplay();
        log.debug("Panel initialization complete");
    }

    private void initializeComponents()
    {
        // Main panel with vertical layout
        mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
        mainPanel.setBackground(ColorScheme.DARK_GRAY_COLOR);
        mainPanel.setBorder(new EmptyBorder(10, 10, 10, 10));

        // Title with improved styling
        JLabel titleLabel = new JLabel("Dry Rate Tracker");
        titleLabel.setForeground(Color.WHITE);
        titleLabel.setFont(new Font("SansSerif", Font.BOLD, 20));
        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        mainPanel.add(titleLabel);
        
        // Subtitle
        JLabel subtitleLabel = new JLabel("Track your raid dry streaks");
        subtitleLabel.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        subtitleLabel.setFont(new Font("SansSerif", Font.PLAIN, 14));
        subtitleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        mainPanel.add(subtitleLabel);
        
        mainPanel.add(Box.createVerticalStrut(20));

        // Create panels for each raid type
        for (RaidType raidType : RaidType.values())
        {
            JPanel raidPanel = createRaidPanel(raidType);
            mainPanel.add(raidPanel);
            mainPanel.add(Box.createVerticalStrut(15));
        }

        // Scroll pane to handle overflow
        JScrollPane scrollPane = new JScrollPane(mainPanel);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        scrollPane.setBorder(null);
        scrollPane.getVerticalScrollBar().setPreferredSize(new Dimension(8, 0));
        
        add(scrollPane, BorderLayout.CENTER);
    }

    private JPanel createRaidPanel(RaidType raidType)
    {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        panel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(ColorScheme.MEDIUM_GRAY_COLOR),
            new EmptyBorder(8, 8, 8, 8)
        ));

        // Raid title
        JLabel titleLabel = new JLabel(raidType.getShortName());
        titleLabel.setForeground(Color.WHITE);
        titleLabel.setFont(titleLabel.getFont().deriveFont(Font.BOLD, 14f));
        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        panel.add(titleLabel);

        panel.add(Box.createVerticalStrut(5));

        // Current dry streak
        JLabel dryStreakLabel = new JLabel();
        dryStreakLabel.setForeground(Color.WHITE);
        dryStreakLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        panel.add(dryStreakLabel);

        // Statistics
        JLabel statsLabel = new JLabel();
        statsLabel.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
        statsLabel.setFont(statsLabel.getFont().deriveFont(11f));
        statsLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        panel.add(statsLabel);

        // Reset button
        JButton resetButton = new JButton("Reset");
        resetButton.setPreferredSize(new Dimension(80, 25));
        resetButton.setMaximumSize(new Dimension(80, 25));
        resetButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        resetButton.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                int result = JOptionPane.showConfirmDialog(
                    DryRatePanel.this,
                    "Reset dry streak for " + raidType.getShortName() + "?",
                    "Confirm Reset",
                    JOptionPane.YES_NO_OPTION
                );
                
                if (result == JOptionPane.YES_OPTION)
                {
                    dryRateManager.resetDryStreak(raidType);
                    updateDisplay();
                }
            }
        });
        
        panel.add(Box.createVerticalStrut(5));
        panel.add(resetButton);

        return panel;
    }

    public void updateDisplay()
    {
        SwingUtilities.invokeLater(() -> {
            // Remove all components and rebuild
            mainPanel.removeAll();
            
            // Re-add title
            JLabel titleLabel = new JLabel("Dry Rate Tracker");
            titleLabel.setForeground(Color.WHITE);
            titleLabel.setFont(new Font("SansSerif", Font.BOLD, 20));
            titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
            mainPanel.add(titleLabel);
            
            // Subtitle
            JLabel subtitleLabel = new JLabel("Track your raid dry streaks");
            subtitleLabel.setForeground(ColorScheme.LIGHT_GRAY_COLOR);
            subtitleLabel.setFont(new Font("SansSerif", Font.PLAIN, 14));
            subtitleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
            mainPanel.add(subtitleLabel);
            
            mainPanel.add(Box.createVerticalStrut(20));

            // Re-add raid panels with updated data
            for (RaidType raidType : RaidType.values())
            {
                JPanel raidPanel = createUpdatedRaidPanel(raidType);
                mainPanel.add(raidPanel);
                mainPanel.add(Box.createVerticalStrut(15));
            }

            mainPanel.revalidate();
            mainPanel.repaint();
        });
    }

    private JPanel createUpdatedRaidPanel(RaidType raidType)
    {
        DryRateData data = dryRateManager.getRaidData(raidType);
        
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        
        // Different background colors for each raid to improve visual separation
        Color bgColor;
        switch (raidType) {
            case TOB:
                bgColor = new Color(60, 45, 45); // Dark red tint
                break;
            case TOA:
                bgColor = new Color(60, 50, 35); // Dark gold tint  
                break;
            case COX:
                bgColor = new Color(45, 45, 60); // Dark blue tint
                break;
            default:
                bgColor = ColorScheme.DARKER_GRAY_COLOR;
        }
        
        panel.setBackground(bgColor);
        panel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(ColorScheme.LIGHT_GRAY_COLOR, 2),
            new EmptyBorder(20, 16, 20, 16)
        ));

        // Raid title with emoji and better styling
        String titleText = "";
        switch (raidType) {
            case TOB:
                titleText = "‚öîÔ∏è " + raidType.getShortName();
                break;
            case TOA:
                titleText = "üè∫ " + raidType.getShortName();
                break;
            case COX:
                titleText = "üõ°Ô∏è " + raidType.getShortName();
                break;
        }
        
        JLabel titleLabel = new JLabel(titleText);
        titleLabel.setForeground(Color.WHITE);
        titleLabel.setFont(new Font("SansSerif", Font.BOLD, 20));
        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        panel.add(titleLabel);

        panel.add(Box.createVerticalStrut(15));

        // Current dry streak with larger, more prominent display
        String streakText = data.getCurrentDryStreak() == 0 ? "‚úÖ No dry streak!" : 
                           "üíÄ " + data.getCurrentDryStreak() + " raids dry";
        JLabel dryStreakLabel = new JLabel(streakText);
        
        // Enhanced color coding with better contrast
        Color streakColor;
        if (data.getCurrentDryStreak() == 0) {
            streakColor = new Color(100, 255, 100); // Brighter green
        } else if (data.getCurrentDryStreak() < 25) {
            streakColor = new Color(255, 255, 100); // Yellow
        } else if (data.getCurrentDryStreak() < 50) {
            streakColor = new Color(255, 165, 0); // Orange
        } else {
            streakColor = new Color(255, 100, 100); // Bright red
        }
        
        dryStreakLabel.setForeground(streakColor);
        dryStreakLabel.setFont(new Font("SansSerif", Font.BOLD, 17));
        dryStreakLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        panel.add(dryStreakLabel);

        panel.add(Box.createVerticalStrut(15));

        // Statistics in individual rows for better readability
        JPanel statsPanel = new JPanel();
        statsPanel.setLayout(new BoxLayout(statsPanel, BoxLayout.Y_AXIS));
        statsPanel.setBackground(bgColor);
        statsPanel.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        // Completions row
        JLabel completionsLabel = new JLabel("üìä Total Completions: " + data.getTotalCompletions());
        completionsLabel.setForeground(new Color(240, 240, 240));
        completionsLabel.setFont(new Font("SansSerif", Font.PLAIN, 14));
        completionsLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        statsPanel.add(completionsLabel);
        
        statsPanel.add(Box.createVerticalStrut(5));
        
        // Uniques row
        JLabel uniquesLabel = new JLabel("üéÅ Unique Drops: " + data.getTotalUniques());
        uniquesLabel.setForeground(new Color(240, 240, 240));
        uniquesLabel.setFont(new Font("SansSerif", Font.PLAIN, 14));
        uniquesLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        statsPanel.add(uniquesLabel);
        
        statsPanel.add(Box.createVerticalStrut(5));
        
        // Longest streak row
        JLabel longestLabel = new JLabel("üìà Longest Dry: " + data.getLongestDryStreak());
        longestLabel.setForeground(new Color(240, 240, 240));
        longestLabel.setFont(new Font("SansSerif", Font.PLAIN, 14));
        longestLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        statsPanel.add(longestLabel);
        
        statsPanel.add(Box.createVerticalStrut(5));
        
        // Average row
        JLabel avgLabel = new JLabel("üìä Average Dry: " + decimalFormat.format(data.getAverageDryStreak()));
        avgLabel.setForeground(new Color(240, 240, 240));
        avgLabel.setFont(new Font("SansSerif", Font.PLAIN, 14));
        avgLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        statsPanel.add(avgLabel);
        
        panel.add(statsPanel);

        panel.add(Box.createVerticalStrut(18));

        // Reset button with better styling
        JButton resetButton = new JButton("üîÑ Reset");
        resetButton.setPreferredSize(new Dimension(130, 36));
        resetButton.setMaximumSize(new Dimension(130, 36));
        resetButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        resetButton.setBackground(new Color(80, 80, 80));
        resetButton.setForeground(Color.WHITE);
        resetButton.setFocusPainted(false);
        resetButton.setBorder(BorderFactory.createLineBorder(new Color(150, 150, 150), 2));
        resetButton.setFont(new Font("SansSerif", Font.BOLD, 14));
        
        // Hover effect
        resetButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                resetButton.setBackground(new Color(100, 100, 100));
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                resetButton.setBackground(new Color(80, 80, 80));
            }
        });
        
        resetButton.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                int result = JOptionPane.showConfirmDialog(
                    DryRatePanel.this,
                    "Reset dry streak for " + raidType.getShortName() + "?",
                    "Confirm Reset",
                    JOptionPane.YES_NO_OPTION
                );
                
                if (result == JOptionPane.YES_OPTION)
                {
                    dryRateManager.resetDryStreak(raidType);
                    updateDisplay();
                }
            }
        });
        
        panel.add(resetButton);

        return panel;
    }
} 
package com.dryrate;

import lombok.Data;
import java.util.ArrayList;
import java.util.List;

/**
 * Data class to store dry streak information for a specific raid type
 */
@Data
public class DryRateData
{
    private int currentDryStreak;
    private int totalCompletions;
    private int totalUniques;
    private List<Integer> previousDryStreaks;
    private long lastDropTime;

    public DryRateData()
    {
        this.currentDryStreak = 0;
        this.totalCompletions = 0;
        this.totalUniques = 0;
        this.previousDryStreaks = new ArrayList<>();
        this.lastDropTime = 0;
    }

    // Helper methods for dry streak tracking
    public void incrementDryStreak()
    {
        this.currentDryStreak++;
        this.totalCompletions++;
    }

    public void resetDryStreak()
    {
        // Add to history if we had a streak > 0
        if (currentDryStreak > 0)
        {
            previousDryStreaks.add(currentDryStreak);
        }
        
        // Reset streak to 0 and increment uniques
        this.currentDryStreak = 0;
        this.totalUniques++;
        this.lastDropTime = System.currentTimeMillis();
    }

    public int getLongestDryStreak()
    {
        int longest = currentDryStreak;
        for (int streak : previousDryStreaks)
        {
            if (streak > longest)
            {
                longest = streak;
            }
        }
        return longest;
    }

    public double getAverageDryStreak()
    {
        if (previousDryStreaks.isEmpty())
        {
            return 0.0;
        }
        
        int total = 0;
        for (int streak : previousDryStreaks)
        {
            total += streak;
        }
        return (double) total / previousDryStreaks.size();
    }
} 
package com.dryrate;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;

import java.awt.image.BufferedImage;
import java.util.regex.Pattern;

@Slf4j
@PluginDescriptor(
	name = "Dry Rate Tracker",
	description = "Track dry streaks for OSRS raids (ToB, ToA, CoX)",
	tags = {"raids", "tracking", "statistics"}
)
public class DryRatePlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private DryRateConfig config;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	private ConfigManager configManager;

	@Inject
	private DryRateManager dryRateManager;

	private DryRatePanel panel;
	private NavigationButton navButton;

	// Raid completion patterns - very specific to avoid false positives
	private static final Pattern TOB_COMPLETION = Pattern.compile("^Your completed Theatre of Blood count is: (\\d+)\\.$");
	private static final Pattern TOA_COMPLETION = Pattern.compile("^Your completed Tombs of Amascut count is: (\\d+)\\.$");
	private static final Pattern COX_COMPLETION = Pattern.compile("^Your completed Chambers of Xeric count is: (\\d+)\\.$");

	// Personal unique drop patterns (when you get the drop)
	private static final Pattern TOB_UNIQUE_PERSONAL = Pattern.compile("(?i).*you.*received.*(scythe of vitur|ghrazi rapier|sanguinesti staff|justiciar faceguard|justiciar chestguard|justiciar legguards|avernic defender hilt|sanguine ornament kit|holy ornament kit|sanguine dust).*");
	private static final Pattern TOA_UNIQUE_PERSONAL = Pattern.compile("(?i).*you.*received.*(tumeken's shadow|elidinis' ward|masori mask|masori body|masori chaps|lightbearer|osmumten's fang).*");
	private static final Pattern COX_UNIQUE_PERSONAL = Pattern.compile("(?i).*you.*received.*(twisted bow|elder maul|kodai insignia|dragon hunter crossbow|dinhs bulwark|ancestral hat|ancestral robe top|ancestral robe bottom|dragon claws|twisted buckler|twisted ancestral colour kit|metamorphic dust).*");

	// Team unique drop patterns (when anyone gets the drop)
	private static final Pattern TOB_UNIQUE_TEAM = Pattern.compile("(?i).*(scythe of vitur|ghrazi rapier|sanguinesti staff|justiciar faceguard|justiciar chestguard|justiciar legguards|avernic defender hilt|sanguine ornament kit|holy ornament kit|sanguine dust).*");
	private static final Pattern TOA_UNIQUE_TEAM = Pattern.compile("(?i).*(tumeken's shadow|elidinis' ward|masori mask|masori body|masori chaps|lightbearer|osmumten's fang).*");
	private static final Pattern COX_UNIQUE_TEAM = Pattern.compile("(?i).*(twisted bow|elder maul|kodai insignia|dragon hunter crossbow|dinhs bulwark|ancestral hat|ancestral robe top|ancestral robe bottom|dragon claws|twisted buckler|twisted ancestral colour kit|metamorphic dust).*");

	@Override
	protected void startUp() throws Exception
	{
		log.debug("Dry Rate Tracker started!");
		
		// Initialize the dry rate manager
		dryRateManager.loadData();
		
		// Create the panel
		panel = new DryRatePanel(dryRateManager);
		log.debug("Panel created successfully");
		
		// Create a towel icon (perfect for "dry" tracker!)
		BufferedImage icon = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);
		java.awt.Graphics2D g2d = icon.createGraphics();
		g2d.setRenderingHint(java.awt.RenderingHints.KEY_ANTIALIASING, java.awt.RenderingHints.VALUE_ANTIALIAS_ON);
		
		// Draw towel main body (light blue/white towel)
		g2d.setColor(new java.awt.Color(200, 220, 255)); // Light blue towel
		g2d.fillRect(3, 2, 10, 12);
		
		// Add towel texture lines (horizontal stripes)
		g2d.setColor(new java.awt.Color(180, 200, 240)); // Slightly darker blue
		g2d.drawLine(4, 4, 11, 4);   // Top stripe
		g2d.drawLine(4, 6, 11, 6);   // Second stripe
		g2d.drawLine(4, 8, 11, 8);   // Third stripe
		g2d.drawLine(4, 10, 11, 10); // Fourth stripe
		g2d.drawLine(4, 12, 11, 12); // Bottom stripe
		
		// Add towel edges/border for definition
		g2d.setColor(new java.awt.Color(150, 170, 200)); // Darker border
		g2d.drawRect(3, 2, 10, 12);
		
		// Add a small "hanging" effect at the top
		g2d.setColor(new java.awt.Color(100, 100, 100)); // Dark gray hook/hanger
		g2d.fillRect(7, 0, 2, 3);
		
		g2d.dispose();
		
		navButton = NavigationButton.builder()
			.tooltip("Dry Rate Tracker")
			.icon(icon)
			.priority(5)
			.panel(panel)
			.build();
		
		clientToolbar.addNavigation(navButton);
		log.debug("Navigation button added to toolbar");
	}

	@Override
	protected void shutDown() throws Exception
	{
		log.debug("Dry Rate Tracker stopped!");
		
		// Save data before shutting down
		dryRateManager.saveData();
		
		// Remove the panel
		clientToolbar.removeNavigation(navButton);
	}

	@Subscribe
	public void onChatMessage(ChatMessage chatMessage)
	{
		if (chatMessage.getType() != ChatMessageType.GAMEMESSAGE)
		{
			return;
		}

		String message = chatMessage.getMessage();
		
		// Strip HTML tags and clean the message
		String cleanMessage = message.replaceAll("<[^>]*>", "").trim();
		
		// Check for raid completions first
		boolean raidCompleted = false;
		if (TOB_COMPLETION.matcher(cleanMessage).matches())
		{
			handleRaidCompletion(RaidType.TOB, cleanMessage);
			raidCompleted = true;
		}
		else if (TOA_COMPLETION.matcher(cleanMessage).matches())
		{
			handleRaidCompletion(RaidType.TOA, cleanMessage);
			raidCompleted = true;
		}
		else if (COX_COMPLETION.matcher(cleanMessage).matches())
		{
			handleRaidCompletion(RaidType.COX, cleanMessage);
			raidCompleted = true;
		}
		
		// Check for unique drops - these should reset the dry streak
		// First check for personal drops (always reset)
		if (TOB_UNIQUE_PERSONAL.matcher(cleanMessage).matches())
		{
			handlePersonalUniqueDropReceived(RaidType.TOB, cleanMessage);
		}
		else if (TOA_UNIQUE_PERSONAL.matcher(cleanMessage).matches())
		{
			handlePersonalUniqueDropReceived(RaidType.TOA, cleanMessage);
		}
		else if (COX_UNIQUE_PERSONAL.matcher(cleanMessage).matches())
		{
			handlePersonalUniqueDropReceived(RaidType.COX, cleanMessage);
		}
		// Then check for team drops (only if not already personal and if different from personal patterns)
		else if (TOB_UNIQUE_TEAM.matcher(cleanMessage).matches() && !TOB_UNIQUE_PERSONAL.matcher(cleanMessage).matches())
		{
			handleTeamUniqueDropReceived(RaidType.TOB, cleanMessage);
		}
		else if (TOA_UNIQUE_TEAM.matcher(cleanMessage).matches() && !TOA_UNIQUE_PERSONAL.matcher(cleanMessage).matches())
		{
			handleTeamUniqueDropReceived(RaidType.TOA, cleanMessage);
		}
		else if (COX_UNIQUE_TEAM.matcher(cleanMessage).matches() && !COX_UNIQUE_PERSONAL.matcher(cleanMessage).matches())
		{
			handleTeamUniqueDropReceived(RaidType.COX, cleanMessage);
		}
	}

	private void handleRaidCompletion(RaidType raidType, String message)
	{
		log.debug("Raid completion detected: {} - {}", raidType, message);
		
		// Track the completion
		dryRateManager.handleRaidCompletion(raidType);
		
		// Update the panel
		if (panel != null)
		{
			panel.updateDisplay();
		}
	}

	private void handlePersonalUniqueDropReceived(RaidType raidType, String message)
	{
		log.debug("Personal unique drop detected: {} - {}", raidType, message);
		
		// Handle the unique drop
		dryRateManager.handleUniqueDropReceived(raidType);
		
		// Update the panel
		if (panel != null)
		{
			panel.updateDisplay();
		}
	}

	private void handleTeamUniqueDropReceived(RaidType raidType, String message)
	{
		log.debug("Team unique drop detected: {} - {}", raidType, message);
		
		// Handle the team unique drop (may or may not reset based on config)
		dryRateManager.handleTeamUniqueDropReceived(raidType);
		
		// Update the panel
		if (panel != null)
		{
			panel.updateDisplay();
		}
	}

	@Provides
	DryRateConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(DryRateConfig.class);
	}
} 
package com.dryrate;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.config.ConfigManager;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.lang.reflect.Type;
import java.util.EnumMap;
import java.util.Map;

/**
 * Manager class that handles all dry rate tracking logic
 */
@Slf4j
@Singleton
public class DryRateManager
{
    private static final String CONFIG_GROUP = "dryrate";
    private static final String DATA_KEY = "data";

    private final DryRateConfig config;
    private final ConfigManager configManager;
    private final Map<RaidType, DryRateData> raidData;
    private final Gson gson;

    @Inject
    public DryRateManager(DryRateConfig config, ConfigManager configManager, Gson gson)
    {
        this.config = config;
        this.configManager = configManager;
        this.raidData = new EnumMap<>(RaidType.class);
        this.gson = gson;
        
        // Initialize data for each raid type
        for (RaidType raidType : RaidType.values())
        {
            raidData.put(raidType, new DryRateData());
        }
    }

    /**
     * Load data from configuration
     */
    public void loadData()
    {
        try
        {
            String dataJson = configManager.getConfiguration(CONFIG_GROUP, DATA_KEY);
            if (dataJson != null && !dataJson.isEmpty())
            {
                Type type = new TypeToken<Map<RaidType, DryRateData>>(){}.getType();
                Map<RaidType, DryRateData> loadedData = gson.fromJson(dataJson, type);
                
                if (loadedData != null)
                {
                    raidData.putAll(loadedData);
                }
            }
            log.debug("Dry rate data loaded successfully");
        }
        catch (Exception e)
        {
            log.error("Error loading dry rate data", e);
        }
    }

    /**
     * Save data to configuration
     */
    public void saveData()
    {
        try
        {
            String dataJson = gson.toJson(raidData);
            configManager.setConfiguration(CONFIG_GROUP, DATA_KEY, dataJson);
            log.debug("Dry rate data saved successfully");
        }
        catch (Exception e)
        {
            log.error("Error saving dry rate data", e);
        }
    }

    /**
     * Handle a raid completion (increment dry streak and total count)
     */
    public void handleRaidCompletion(RaidType raidType)
    {
        if (!isRaidTrackingEnabled(raidType))
        {
            return;
        }

        DryRateData data = raidData.get(raidType);
        if (data != null)
        {
            // Increment dry streak directly on each completion
            data.incrementDryStreak();
            log.debug("Raid completion for {}: Dry streak now {}, total completions {}", 
                raidType, data.getCurrentDryStreak(), data.getTotalCompletions());
            saveData();
        }
    }

    /**
     * Handle receiving a personal unique drop (reset dry streak and increment unique count)
     */
    public void handleUniqueDropReceived(RaidType raidType)
    {
        if (!isRaidTrackingEnabled(raidType))
        {
            return;
        }

        DryRateData data = raidData.get(raidType);
        if (data != null)
        {
            int previousStreak = data.getCurrentDryStreak();
            
            // Reset dry streak (this handles history and unique count)
            data.resetDryStreak();
            
            log.debug("Personal unique drop for {}: Reset streak from {}, total uniques now {}", 
                raidType, previousStreak, data.getTotalUniques());
            saveData();
        }
    }

    /**
     * Handle team member receiving unique drop (only reset if config enabled)
     */
    public void handleTeamUniqueDropReceived(RaidType raidType)
    {
        if (!isRaidTrackingEnabled(raidType))
        {
            return;
        }

        // Only reset dry streak if team drops are configured to reset personal streak
        if (config != null && config.teamDropResets())
        {
            DryRateData data = raidData.get(raidType);
            if (data != null)
            {
                int previousStreak = data.getCurrentDryStreak();
                
                // Reset dry streak but don't increment personal unique count
                if (previousStreak > 0)
                {
                    data.getPreviousDryStreaks().add(previousStreak);
                }
                data.setCurrentDryStreak(0);
                
                log.debug("Team unique drop for {}: Reset streak from {} (team drops reset enabled)", 
                    raidType, previousStreak);
                saveData();
            }
        }
        else
        {
            log.debug("Team unique drop for {} ignored (team drops reset disabled)", raidType);
        }
    }

    /**
     * Get dry rate data for a specific raid type
     */
    public DryRateData getRaidData(RaidType raidType)
    {
        return raidData.get(raidType);
    }

    /**
     * Get all raid data
     */
    public Map<RaidType, DryRateData> getAllRaidData()
    {
        return new EnumMap<>(raidData);
    }

    /**
     * Reset dry streak for a specific raid type
     */
    public void resetDryStreak(RaidType raidType)
    {
        DryRateData data = raidData.get(raidType);
        if (data != null)
        {
            data.setCurrentDryStreak(0);
            log.debug("Manually reset dry streak for {}", raidType);
            saveData();
        }
    }

    /**
     * Reset all data for a specific raid type
     */
    public void resetAllData(RaidType raidType)
    {
        raidData.put(raidType, new DryRateData());
        log.debug("Reset all data for {}", raidType);
        saveData();
    }

    /**
     * Check if tracking is enabled for a specific raid type
     */
    private boolean isRaidTrackingEnabled(RaidType raidType)
    {
        if (config == null)
        {
            return true; // Default to enabled if config is not available
        }

        switch (raidType)
        {
            case TOB:
                return config.trackToB();
            case TOA:
                return config.trackToA();
            case COX:
                return config.trackCoX();
            default:
                return true;
        }
    }
} 
package com.dryrate;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("dryrate")
public interface DryRateConfig extends Config
{
	@ConfigItem(
		keyName = "showNotifications",
		name = "Show notifications",
		description = "Show notifications when you go dry or get a unique"
	)
	default boolean showNotifications()
	{
		return true;
	}

	@ConfigItem(
		keyName = "trackToB",
		name = "Track Theatre of Blood",
		description = "Track dry streaks for Theatre of Blood"
	)
	default boolean trackToB()
	{
		return true;
	}

	@ConfigItem(
		keyName = "trackToA",
		name = "Track Tombs of Amascut",
		description = "Track dry streaks for Tombs of Amascut"
	)
	default boolean trackToA()
	{
		return true;
	}

	@ConfigItem(
		keyName = "trackCoX",
		name = "Track Chambers of Xeric",
		description = "Track dry streaks for Chambers of Xeric"
	)
	default boolean trackCoX()
	{
		return true;
	}

	@ConfigItem(
		keyName = "resetConfirmation",
		name = "Confirm resets",
		description = "Ask for confirmation before resetting dry streak counters"
	)
	default boolean resetConfirmation()
	{
		return true;
	}

	@ConfigItem(
		keyName = "teamDropResets",
		name = "Team drops reset streaks",
		description = "Reset your dry streak when anyone in your team gets a unique (not just you)"
	)
	default boolean teamDropResets()
	{
		return false;
	}
} 
package com.dryrate;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class DryRatePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(DryRatePlugin.class);
		RuneLite.main(args);
	}
} 
