package com.transcriber;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class TranscriberPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(TranscriberPlugin.class);
		RuneLite.main(args);
	}
}
package com.transcriber;

import com.google.common.base.Strings;
import com.google.inject.Inject;
import com.google.inject.Provides;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.api.NPC;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.OverheadTextChanged;
import net.runelite.api.events.WidgetClosed;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.ImageUtil;

@PluginDescriptor(
	name = "Transcriber",
	description = "Automatically copy text in books, scrolls, parchments, flyers, etc and NPC overhead text to a panel when you see it",
	tags = {"transcribe", "copy", "text"}
)
public class TranscriberPlugin extends Plugin
{
	private static final int TRANSCRIBE_OFFSET = 1;
	private static final String OVERHEAD_TEXT_DELIM = ": ";

	@Inject
	private Client client;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	private ConfigManager configManager;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private TranscriberConfig config;

	@Inject
	private TranscriberOverlay overlay;

	private int scheduledTranscribe;
	private Widget widgetBook;
	@Getter
	private Widget widgetLoaded;
	private TranscriberPanel pluginPanel;
	private NavigationButton navigationButton;
	private List<Integer> blacklist = new ArrayList<>();

	@Provides
	TranscriberConfig providesConfig(ConfigManager configManager)
	{
		return configManager.getConfig(TranscriberConfig.class);
	}

	@Override
	protected void startUp()
	{
		pluginPanel = new TranscriberPanel(config);

		final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "/panel_icon.png");

		navigationButton = NavigationButton.builder()
			.tooltip("Transcriber")
			.icon(icon)
			.priority(100)
			.panel(pluginPanel)
			.build();

		clientToolbar.addNavigation(navigationButton);

		populateBlacklist();

		overlayManager.add(overlay);
	}

	@Override
	protected void shutDown()
	{
		overlayManager.remove(overlay);
		clientToolbar.removeNavigation(navigationButton);
		pluginPanel = null;
		navigationButton = null;
		blacklist.clear();
	}

	private void transcribeWidget(Widget widget)
	{
		if (widget == null)
		{
			return;
		}

		if (!widget.isHidden())
		{
			int animationId = widget.getAnimationId();
			if (animationId > -1 && config.animationIds())
			{
				pluginPanel.appendText("<animationID=" + animationId + ">");
			}

			int itemId = widget.getItemId();
			if (itemId > -1 && config.itemIds())
			{
				pluginPanel.appendText("<itemID=" + itemId + ">");
			}

			int modelId = widget.getModelId();
			if (modelId > -1 && config.modelIds())
			{
				pluginPanel.appendText("<modelID=" + modelId + ">");
			}

			int spriteId = widget.getSpriteId();
			if (spriteId > -1 && config.spriteIds())
			{
				pluginPanel.appendText("<spriteID=" + spriteId + ">");
			}

			String text = widget.getText();
			if (!Strings.isNullOrEmpty(text))
			{
				int fontId = widget.getFontId();
				if (fontId > -1 && config.fontIds())
				{
					pluginPanel.appendText("<fontID=" + fontId + ">");
				}

				pluginPanel.appendText(text);
			}
		}

		try
		{
			Widget[][] childrens = new Widget[][]
			{
				widget.getStaticChildren(), widget.getDynamicChildren(), widget.getNestedChildren()
			};
			for (Widget[] children : childrens)
			{
				for (Widget child : children)
				{
					transcribeWidget(child);
				}
			}
		}
		catch (NullPointerException ignore)
		{
		}
	}

	@Subscribe
	public void onGameTick(GameTick event)
	{
		if (widgetBook != null && scheduledTranscribe == client.getTickCount())
		{
			transcribeWidget(widgetBook);
		}
	}

	@Subscribe
	public void onWidgetLoaded(WidgetLoaded event)
	{
		final int groupId = event.getGroupId();

		if (blacklist.contains(groupId))
		{
			return;
		}

		widgetLoaded = client.getWidget(groupId, 0);
		if (widgetLoaded != null)
		{
			widgetBook = widgetLoaded.getParent();
		}

		scheduledTranscribe = client.getTickCount() + TRANSCRIBE_OFFSET;
	}

	@Subscribe
	public void onWidgetClosed(WidgetClosed event)
	{
		final int groupId = event.getGroupId();

		if (widgetLoaded != null && groupId == WidgetInfo.TO_GROUP(widgetLoaded.getId()))
		{
			widgetLoaded = null;
		}
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if ("transcriber".equals(event.getGroup()))
		{
			populateBlacklist();
		}
	}

	@Subscribe
	public void onOverheadTextChanged(OverheadTextChanged event)
	{
		if (!config.transcribeNpcOverheadText() || !(event.getActor() instanceof NPC))
		{
			return;
		}

		pluginPanel.appendText(event.getActor().getName() + OVERHEAD_TEXT_DELIM + event.getOverheadText());
	}

	public String[] getSelected()
	{
		return pluginPanel.getSelected();
	}

	private void populateBlacklist()
	{
		String[] parts = config.widgetBlacklist().replace(' ', ',').replace(';', ',').replace('\n', ',').split(",");

		blacklist.clear();
		for (String s : parts)
		{
			try
			{
				int id = Integer.parseInt(s);
				blacklist.add(id);
			}
			catch (NumberFormatException ignore)
			{
			}
		}
	}
}

package com.transcriber;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("transcriber")
public interface TranscriberConfig extends Config
{
	@ConfigItem(
		keyName = "animationIds",
		name = "Include animation IDs",
		description = "Whether to include animation IDs in the transcript, e.g. <animationID=100>"
	)
	default boolean animationIds()
	{
		return false;
	}

	@ConfigItem(
		keyName = "fontIds",
		name = "Include font IDs",
		description = "Whether to include font IDs in the transcript, e.g. <fontID=497>"
	)
	default boolean fontIds()
	{
		return false;
	}

	@ConfigItem(
		keyName = "itemIds",
		name = "Include item IDs",
		description = "Whether to include item IDs in the transcript, e.g. <itemID=4151>"
	)
	default boolean itemIds()
	{
		return false;
	}

	@ConfigItem(
		keyName = "modelIds",
		name = "Include model IDs",
		description = "Whether to include model IDs in the transcript, e.g. <modelID=11365>"
	)
	default boolean modelIds()
	{
		return false;
	}

	@ConfigItem(
		keyName = "spriteIds",
		name = "Include sprite IDs",
		description = "Whether to include sprite IDs in the transcript, e.g. <spriteID=537>"
	)
	default boolean spriteIds()
	{
		return false;
	}

	@ConfigItem(
		keyName = "removeUnnecessaryTags",
		name = "Remove unnecessary colour tags",
		description = "Whether to exclude unnecessary black colour tags, e.g. <col=000000>"
	)
	default boolean removeUnnecessaryTags()
	{
		return true;
	}

	@ConfigItem(
		keyName = "showTranscriptionOutline",
		name = "Show transcription outline",
		description = "Whether to outline the selected portion of the transcription"
	)
	default boolean showTranscriptionOutline()
	{
		return false;
	}

	@ConfigItem(
		keyName = "transcribeNpcOverheadText",
		name = "Transcribe NPC overhead text",
		description = "Whether to transcribe overhead text for NPCs"
	)
	default boolean transcribeNpcOverheadText()
	{
		return true;
	}

	@ConfigItem(
		keyName = "widgetBlacklist",
		name = "Blacklist",
		description = "A list of widget group IDs to exclude",
		position = 100
	)
	default String widgetBlacklist()
	{
		return "4,7,65,69,76,77,84,94,109,116,122,134,137,149,156,160,162,182,193,201,216,217," +
			"218,219,229,231,238,239,245,259,278,310,320,370,372,378,387,399,429,432,464," +
			"527,541,553,593,595,600,621,626,629,701,702,707,712,713,714,715,716,717";
	}
}

package com.transcriber;

import com.google.common.base.Strings;
import com.google.inject.Inject;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import net.runelite.api.widgets.Widget;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;

public class TranscriberOverlay extends Overlay
{
	private final TranscriberPlugin plugin;
	private final TranscriberConfig config;

	@Inject
	private TranscriberOverlay(TranscriberPlugin plugin, TranscriberConfig config)
	{
		this.plugin = plugin;
		this.config = config;

		setPosition(OverlayPosition.DYNAMIC);
		setPriority(OverlayPriority.LOW);
		setLayer(OverlayLayer.ALWAYS_ON_TOP);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (config.showTranscriptionOutline() && plugin.getWidgetLoaded() != null)
		{
			outlineWidget(graphics, plugin.getWidgetLoaded().getParent(), plugin.getSelected());
		}
		return null;
	}

	private void outlineWidget(Graphics2D graphics, Widget widget, String[] selected)
	{
		if (widget == null)
		{
			return;
		}

		if (!widget.isHidden())
		{
			if (widget.getAnimationId() > -1)
			{
				draw(graphics, widget, selected, "<animationID=" + widget.getAnimationId() + ">");
			}
			else if (widget.getItemId() > -1)
			{
				draw(graphics, widget, selected, "<itemID=" + widget.getItemId() + ">");
			}
			else if (widget.getModelId() > -1)
			{
				draw(graphics, widget, selected, "<modelID=" + widget.getModelId() + ">");
			}
			else if (widget.getSpriteId() > -1)
			{
				draw(graphics, widget, selected, "<spriteID=" + widget.getSpriteId() + ">");
			}
			else if (!Strings.isNullOrEmpty(widget.getText()))
			{
				if (!draw(graphics, widget, selected, "<fontID=" + widget.getFontId() + ">"))
				{
					draw(graphics, widget, selected, widget.getText());
				}
			}
		}

		try
		{
			Widget[][] childrens = new Widget[][]
			{
				widget.getStaticChildren(), widget.getDynamicChildren(), widget.getNestedChildren()
			};
			for (Widget[] children : childrens)
			{
				for (Widget child : children)
				{
					outlineWidget(graphics, child, selected);
				}
			}
		}
		catch (NullPointerException ignore)
		{
		}
	}

	private boolean selectionContains(String[] selection, String text)
	{
		for (String s : selection)
		{
			if (text.contains(s))
			{
				return true;
			}
		}
		return false;
	}

	private boolean draw(Graphics2D graphics, Widget widget, String[] selection, String text)
	{
		if (!selectionContains(selection, text))
		{
			return false;
		}

		Rectangle rectangle =  widget.getBounds();
		graphics.setColor(Color.CYAN);
		graphics.drawRect(rectangle.x, rectangle.y, rectangle.width, rectangle.height);

		return true;
	}
}

package com.transcriber;

import java.awt.BorderLayout;
import javax.swing.BorderFactory;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.border.EmptyBorder;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;

public class TranscriberPanel extends PluginPanel
{
	private final JTextArea transcriberEditor = new JTextArea();
	private final TranscriberConfig config;

	TranscriberPanel(TranscriberConfig config)
	{
		this.config = config;
		init();
	}

	private void init()
	{
		getParent().setLayout(new BorderLayout());
		getParent().add(this, BorderLayout.CENTER);

		setLayout(new BorderLayout());
		setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
		setBackground(ColorScheme.DARK_GRAY_COLOR);

		transcriberEditor.setTabSize(2);
		transcriberEditor.setLineWrap(true);
		transcriberEditor.setWrapStyleWord(true);

		JPanel notesContainer = new JPanel();
		notesContainer.setLayout(new BorderLayout());
		notesContainer.setBackground(ColorScheme.DARKER_GRAY_COLOR);

		transcriberEditor.setOpaque(false);

		notesContainer.add(transcriberEditor, BorderLayout.CENTER);
		notesContainer.setBorder(new EmptyBorder(10, 10, 10, 10));

		add(notesContainer, BorderLayout.CENTER);
	}

	void appendText(String data)
	{
		data = data.replaceAll("<br>", "\n");
		if (config.removeUnnecessaryTags())
		{
			data = data.replaceAll("<col=000000>", "");
		}
		transcriberEditor.append(data + "\n");
		transcriberEditor.setCaretPosition(transcriberEditor.getDocument().getLength());
	}

	String[] getSelected()
	{
		String text = transcriberEditor.getSelectedText();

		if (text == null)
		{
			return new String[0];
		}

		return text.split("\n");
	}
}

