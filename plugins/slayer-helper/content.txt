package com.slayerhelper;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class SlayerHelperPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(SlayerHelperPlugin.class);
		RuneLite.main(args);
	}
}
package com.slayerhelper.domain;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class SlayerTaskTest {

    private SlayerTask slayerTask;

    @Before
    public void setUp() {
        // Create an example SlayerTask instance for testing
        slayerTask = new SlayerTask(
                "Test Monster",
                75,
                new String[]{"Location 1", "Location 2"},
                new Item[]{new Item("Item 1", "item1.png"), new Item("Item 2", "item2.png")},
                new String[]{"Attribute 1", "Attribute 2"},
                new String[]{"Attack Style 1", "Attack Style 2"},
                new String[]{"Alternative 1", "Alternative 2"},
                new String[]{"Slayer Master 1", "Slayer Master 2"}
        );
    }

    @Test
    public void testGetMonsterLowerCase() {
        // Verify that getMonsterLowerCase returns the monster name in lowercase
        assertEquals("test monster", slayerTask.getMonsterLowerCase());
    }

    @Test
    public void testGetMonsterFileName() {
        // Verify that getMonsterFileName returns the expected file name
        assertEquals("/images/monsters/test_monster.png", slayerTask.getMonsterFileName());
    }

    @Test
    public void testGetItemsRequiredNames() {
        // Verify that getItemsRequiredNames returns the names of required items
        String[] expectedItemNames = {"Item 1", "Item 2"};
        assertArrayEquals(expectedItemNames, slayerTask.getItemsRequiredNames());
    }

    @Test
    public void testGetItemsRequiredIcons() {
        // Verify that getItemsRequiredIcons returns the icons of required items
        String[] expectedItemIcons = {"item1.png", "item2.png"};
        assertArrayEquals(expectedItemIcons, slayerTask.getItemsRequiredIcons());
    }

    @Test
    public void testToString() {
        // Verify that toString returns the expected string representation (e.g., monster name)
        assertEquals("Test Monster", slayerTask.toString());
    }
}

package com.slayerhelper.domain;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class ItemTest {

    private Item item;

    @Before
    public void setUp() {
        // Create an Item instance for testing
        item = new Item("Test Item", "test_icon.png");
    }

    @Test
    public void testGetName() {
        // Test the getName() method
        assertEquals("Test Item", item.getName());
    }

    @Test
    public void testGetIcon() {
        // Test the getIcon() method
        assertEquals("test_icon.png", item.getIcon());
    }

    @Test(expected = NullPointerException.class)
    public void testConstructorWithNullName() {
        // Test that the constructor throws a NullPointerException when the name is null
        new Item(null, "test_icon.png");
    }
}

package com.slayerhelper.data;

import com.slayerhelper.domain.SlayerTask;
import org.junit.Before;
import org.junit.Test;
import java.util.Collection;
import static org.junit.Assert.*;

public class SlayerDataLoaderTest {

    private SlayerDataLoader dataLoader;

    @Before
    public void setUp() {
        dataLoader = new SlayerDataLoader();
    }

    @Test
    public void testLoad() {
        // Load Slayer tasks
        Collection<SlayerTask> slayerTasks = dataLoader.load();

        // Assert that the loaded tasks are not null
        assertNotNull(slayerTasks);

        // Assert that there are some tasks loaded
        assertFalse(slayerTasks.isEmpty());

        SlayerTask firstTask = slayerTasks.iterator().next();
        assertEquals("Aberrant spectre", firstTask.getMonster());
        assertTrue(firstTask.getSlayerLevel() >= 0);
    }

    @Test
    public void testLoadEmptyJsonFile() {
        // Load Slayer tasks from an empty JSON file
        String emptyJsonFilePath = "/data/emptySlayerTasks.json";
        // Load Slayer tasks from the empty JSON file
        dataLoader.setJsonFilePathForTesting(emptyJsonFilePath);
        Collection<SlayerTask> slayerTasks = dataLoader.load();

        // Assert that the loaded tasks collection is empty
        assertTrue(slayerTasks.isEmpty());
    }

    @Test
    public void testLoadInvalidJsonFormat() {
        // Load Slayer tasks from a JSON file with an invalid format (create this for testing)
        String invalidJsonFilePath = "/data/invalidSlayerTasks.json";
        // Load Slayer tasks from the file with invalid format
        dataLoader.setJsonFilePathForTesting(invalidJsonFilePath);
        Collection<SlayerTask> slayerTasks = dataLoader.load();

        // Assert that the loaded tasks collection is empty or handle the error as expected
        assertTrue(slayerTasks.isEmpty());
    }

    @Test
    public void testLoadMissingJsonFile() {
        // Load Slayer tasks from a missing JSON file (a file that doesn't exist)
        String missingJsonFilePath = "/data/nonExistentSlayerTasks.json";
        // Load Slayer tasks from the non-existent JSON file
        dataLoader.setJsonFilePathForTesting(missingJsonFilePath);
        Collection<SlayerTask> slayerTasks = dataLoader.load();

        assertTrue(slayerTasks.isEmpty());
    }
}

package com.slayerhelper.ui;

import com.slayerhelper.ui.components.SearchBar;
import net.runelite.client.ui.components.IconTextField;
import org.junit.Before;
import org.junit.Test;
import java.awt.event.KeyEvent;

import static org.junit.Assert.*;

public class SearchBarTest {

    private SearchBar searchBar;

    @Before
    public void setUp() {
        searchBar = new SearchBar(
                text -> System.out.println("Key Typed: " + text), // Replace with your own implementation
                () -> System.out.println("Cleared")); // Replace with your own implementation
    }

    @Test
    public void testSearchBarInitialization() {
        IconTextField iconTextField = searchBar.getSearchBar();

        // Verify that the search bar is not null
        assertNotNull(iconTextField);

        // Verify that the search bar is editable
        assertTrue(iconTextField.isEnabled());
    }

    @Test
    public void testSearchBarKeyReleasedHandler() {
        IconTextField iconTextField = searchBar.getSearchBar();

        // Simulate key release event with "test" text
        iconTextField.setText("test");
        KeyEvent keyEvent = new KeyEvent(iconTextField, KeyEvent.KEY_RELEASED, System.currentTimeMillis(),
                0, KeyEvent.VK_UNDEFINED, 't');
        iconTextField.dispatchEvent(keyEvent);

        // Verify that the key typed handler was called with the correct text
        // Replace with your own implementation of the handler
        // For testing purposes, you can use a custom listener to capture the text
    }

    @Test
    public void testSearchBarClearListener() {
        IconTextField iconTextField = searchBar.getSearchBar();

        // Simulate clearing the search bar
        iconTextField.setText("");
        // assert that the search bar is cleared
        assertEquals("", iconTextField.getText());
    }
}

package com.slayerhelper.util;

import com.slayerhelper.data.SlayerDataLoader;
import com.slayerhelper.domain.SlayerTask;
import com.slayerhelper.ui.components.SearchBar;

import javax.swing.*;
import java.util.Collection;

public class SearchUtils {

    private final SlayerTasksFetcher slayerTasksFetcher;

    private final SearchBar searchBar;

    private final DefaultListModel<SlayerTask> listModel;

    public SearchUtils(SearchBar searchBar, DefaultListModel<SlayerTask> listModel) {
        slayerTasksFetcher = new SlayerTasksFetcher(new SlayerDataLoader());
        this.searchBar = searchBar;
        this.listModel = listModel;
    }

    public SearchUtils(){
        slayerTasksFetcher = new SlayerTasksFetcher(new SlayerDataLoader());
        searchBar = null;
        listModel = null;
    }

    public void filterList(String searchText) {
        if (!searchText.isEmpty()) {
            Collection<SlayerTask> tasks = slayerTasksFetcher.getSlayerTasksByFilter(searchText);
            updateListModel(tasks);
        } else {
            // Clear the list when the search text is empty
            listModel.clear();
        }
    }

    public void clearFilter() {
        searchBar.getSearchBar().setText(""); // Clear the search bar text
        updateListModel(slayerTasksFetcher.getAllSlayerTasks()); // Reset the list
    }

    // A helper method to update the list model
    public void updateListModel(Collection<SlayerTask> tasks) {
        listModel.clear();
        tasks.forEach(listModel::addElement);
    }
}

package com.slayerhelper.util;

import com.slayerhelper.data.SlayerDataLoader;
import com.slayerhelper.domain.SlayerTask;
import lombok.extern.slf4j.Slf4j;

import java.util.*;
import java.util.stream.Collectors;

@Slf4j
public class SlayerTasksFetcher {
    private Collection<SlayerTask> slayerTasks;

    public SlayerTasksFetcher(SlayerDataLoader dataLoader) {
        try {
            slayerTasks = Objects.requireNonNull(dataLoader.load());
        } catch (RuntimeException e) {
            log.error("Failed to load Slayer Task Data... \n", e);
             slayerTasks = Collections.emptyList();
        }
    }

    public Collection<SlayerTask> getAllSlayerTasks() {
        return slayerTasks;
    }

    public Collection<SlayerTask> getSlayerTasksByFilter(String searchText) {
        String lowerCaseSearchText = searchText.toLowerCase();
        return slayerTasks.stream()
                .filter(slayerTask -> slayerTask.getMonsterLowerCase().contains(lowerCaseSearchText))
                .collect(Collectors.toCollection(ArrayList::new));
    }
}

package com.slayerhelper.util;
import com.slayerhelper.ui.components.Tab;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;

public class WikiUtil {

    public static JButton createLinkButton(String text, final String url) {
        JButton button = new JButton(text);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        button.setFocusPainted(false);

        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openWebpage(url);
            }
        });

        return button;
    }

    private static void openWebpage(String url) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(new URI(url));
            } catch (IOException | URISyntaxException e) {
                e.printStackTrace();
                // Handle the error according to your needs
                // For example, show a dialog to the user with the error message
                JOptionPane.showMessageDialog(null,
                        "Failed to open the URL. Please check your system settings.",
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Handle the case where the desktop is not supported
            JOptionPane.showMessageDialog(null,
                    "Desktop is not supported. Unable to open the browser.",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    public static String getWikiUrl(String type, String name) {
        String baseUrl = "https://oldschool.runescape.wiki/w/";
        String pattern = "_(.+)$"; // Matches an underscore followed by anything at the end
        switch (type.toLowerCase()) {
            case "none":
                return "about:blank";
            case "map location":
            case "items needed":
            case "monster attack style":
            case "slayer master":
                return baseUrl + name.replace(" ", "_").replaceFirst(pattern, "");
            case "monsters attributes":
                return baseUrl + name + "_(attribute)";
            default:
                throw new IllegalArgumentException("Unknown type: " + type);
        }
    }
}


package com.slayerhelper.domain;

import lombok.Getter;

import java.util.Objects;

public class SlayerTask {
    @Getter
    private final String monster;
    @Getter
    private final String[] locations;
    @Getter
    private final String[] attributes;
    @Getter
    private final String[] attackStyles;
    @Getter
    private final String[] slayerMasters;
    @Getter
    private final String[] alternatives;
    @Getter
    private final int slayerLevel;
    @Getter
    private final Item[] itemsRequired;

    public SlayerTask(
            String monster,
            int slayerLevel,
            String[] locations,
            Item[] itemsRequired,
            String[] attributes,
            String[] attackStyles,
            String[] alternatives,
            String[] slayerMasters) {
        this.monster = Objects.requireNonNull(monster, "monster cannot be null");
        this.slayerLevel = slayerLevel;
        this.locations = Objects.requireNonNull(locations, "locations cannot be null");
        this.itemsRequired = Objects.requireNonNull(itemsRequired, "items required cannot be null");
        this.attributes = Objects.requireNonNull(attributes, "attributes cannot be null");
        this.attackStyles = Objects.requireNonNull(attackStyles, "attack styles cannot be null");
        this.alternatives = Objects.requireNonNull(alternatives, "alternatives cannot be null");
        this.slayerMasters = Objects.requireNonNull(slayerMasters, "slayer masters cannot be null");
    }

    public String getMonsterLowerCase() {
        return monster.toLowerCase();
    }

    public String getMonsterFileName() {
        String monsterImageName = monster.replace(" ", "_").concat(".png").toLowerCase();
        String fileName = String.format("/images/monsters/%s", monsterImageName);
        return fileName;
    }

    public String[] getItemsRequiredNames() {
        String[] itemsRequiredNames = new String[itemsRequired.length];
        for (int i = 0; i < itemsRequired.length; i++) {
            itemsRequiredNames[i] = itemsRequired[i].getName();
        }
        return itemsRequiredNames;
    }

    public String[] getItemsRequiredIcons() {
        String[] itemsRequiredIcons = new String[itemsRequired.length];
        for (int i = 0; i < itemsRequired.length; i++) {
            itemsRequiredIcons[i] = itemsRequired[i].getIcon();
        }
        return itemsRequiredIcons;
    }

    @Override
    public String toString() {
        return this.getMonster(); // Replace with the actual property you want to display
    }
}

package com.slayerhelper.domain;

import java.util.Objects;

public class Item {
    private final String name;
    private final String icon;

    public Item(String name, String icon) {
        this.name = Objects.requireNonNull(name, "item name cannot be null");
        this.icon = icon;
    }

    public String getName() {
        return name;
    }

    public String getIcon() {
        return icon;
    }
}
package com.slayerhelper;

import com.slayerhelper.ui.panels.SlayerPluginPanel;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

import javax.inject.Inject;
import java.awt.image.BufferedImage;

@Slf4j
@PluginDescriptor(
	name = "Slayer Helper"
)
public class SlayerHelperPlugin extends Plugin {
	private static final String ICON_PATH = "/images/icon.png";

	@Inject
	private ClientToolbar clientToolbar;

	private SlayerPluginPanel slayerPanel;
	private NavigationButton navButton;

	@Override
	protected void startUp() {
		slayerPanel = injector.getInstance(SlayerPluginPanel.class);
		navButton = getNavButton();
		clientToolbar.addNavigation(navButton);
	}

	@Override
	protected void shutDown() {
		if (navButton != null) {
			clientToolbar.removeNavigation(navButton);
		}
	}

	private NavigationButton getNavButton() {
		BufferedImage bufferedImage = ImageUtil.loadImageResource(getClass(), ICON_PATH);
		if (bufferedImage == null) {
			log.error("Can't find image @ " + ICON_PATH);
		}

		return NavigationButton.builder()
				.tooltip("Slayer Helper")
				.icon(bufferedImage)
				.priority(10)
				.panel(slayerPanel)
				.build();
	}
}


package com.slayerhelper.data;

import com.slayerhelper.domain.SlayerTask;
import lombok.extern.slf4j.Slf4j;
import net.runelite.http.api.RuneLiteAPI;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Objects;

@Slf4j
public class SlayerDataLoader {

    private String jsonFilePath = "/data/slayerTasks.json";

    public Collection<SlayerTask> load() {
        try (InputStream inputStream = Objects.requireNonNull(
                this.getClass().getResourceAsStream(jsonFilePath));
             Reader reader = new InputStreamReader(inputStream)) {

            SlayerTask[] tasks = RuneLiteAPI.GSON.fromJson(reader, SlayerTask[].class);
            return Arrays.asList(tasks);

        } catch (IOException e) {
            log.error("Could not read JSON from slayerTasks.json", e);
            return Collections.emptyList();
        }
    }

    public void setJsonFilePathForTesting(String jsonFilePath) {
        this.jsonFilePath = jsonFilePath;
    }
}
package com.slayerhelper.ui.renderers;

import com.slayerhelper.domain.SlayerTask;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;

public class SlayerTasksRenderer extends JLabel implements ListCellRenderer<SlayerTask> {
    @Override
    public Component getListCellRendererComponent(
            JList<? extends SlayerTask> list,
            SlayerTask value,
            int index,
            boolean isSelected,
            boolean cellHasFocus)
    {
        setText(value.getMonster());
        setVerticalAlignment(CENTER);
        setBorder(new EmptyBorder(10, 5, 10, 5));
        setForeground(Color.WHITE);
        return this;
    }
}
package com.slayerhelper.ui.panels;

import lombok.Getter;

import javax.swing.*;
import java.awt.*;

public class HeaderPanel {
    @Getter
    private final JPanel headerPanel = new JPanel();

    public HeaderPanel(Font font, String title, Color titleColor, ImageIcon imageIcon, int alignment) {
        JLabel titleLabel = new JLabel(title);
        JLabel imgIconLabel = new JLabel(imageIcon);

        titleLabel.setFont(font);
        titleLabel.setForeground(titleColor);
        titleLabel.setHorizontalAlignment(alignment);
        imgIconLabel.setHorizontalAlignment(alignment);

        GridBagConstraints gbc = new GridBagConstraints();

        headerPanel.setLayout(new GridBagLayout());

        gbc.gridy = 1;
        headerPanel.add(imgIconLabel, gbc);

        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.ipady = 50;
        headerPanel.add(titleLabel, gbc);
    }

    public HeaderPanel(Font font, String title, Color titleColor, int alignment) {
        JLabel titleLabel = new JLabel(title);
        titleLabel.setFont(font);
        titleLabel.setForeground(titleColor);
        titleLabel.setHorizontalAlignment(alignment);
        headerPanel.add(titleLabel);
    }
}

package com.slayerhelper.ui.panels;

import com.slayerhelper.ui.components.Tab;
import lombok.Getter;

import javax.swing.*;
import java.awt.*;
import java.util.Objects;

public class TabPanel {
    @Getter
    private final JTabbedPane tabbedPane = new JTabbedPane();

    public TabPanel() {
        tabbedPane.setPreferredSize(new Dimension(200, 250));
        // Set the tab placement to TOP for horizontal tabs
        tabbedPane.setTabPlacement(JTabbedPane.LEFT);
    }

    private void addTab(Tab tab) {
        Objects.requireNonNull(tab, "tab cannot be null");

        JLabel label = new JLabel();
        label.setIcon(tab.getIcon());
        label.setCursor(new Cursor(Cursor.HAND_CURSOR));

        Component component = tabbedPane.add(tab.getContent());
        int index = tabbedPane.indexOfComponent(component);

        tabbedPane.setTabComponentAt(index, label);
    }

    public void addTabs(Tab[] tabs) {
        for (Tab tab : tabs) {
            addTab(tab);
        }
    }
}

package com.slayerhelper.ui.panels;

import com.slayerhelper.util.SlayerTasksFetcher;
import com.slayerhelper.ui.renderers.SlayerTasksRenderer;
import com.slayerhelper.data.SlayerDataLoader;
import com.slayerhelper.domain.SlayerTask;
import com.slayerhelper.ui.components.*;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.util.ImageUtil;

import javax.annotation.Nullable;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.*;
import java.util.List;

@Slf4j
public class SlayerPluginPanel extends PluginPanel {

    private final SlayerTasksFetcher slayerTasksFetcher;
    private final SearchBar searchBar;
    private DefaultListModel<SlayerTask> listModel = new DefaultListModel<>();
    private final String[] tabImageNamesWithExtensions = {
            "world_map.png", "inventory.png", "protect_from_all.png", "combat.png", "slayer_icon.png"
    };

    public SlayerPluginPanel() {
        slayerTasksFetcher = new SlayerTasksFetcher(new SlayerDataLoader());
        searchBar = new SearchBar(this::filterList, this::clearFilter);
        createTaskListPanel(new ArrayList<>());
    }

    private JPanel createHeaderPanel(SlayerTask task) {
        Font font = new Font(Font.SANS_SERIF, Font.PLAIN, 15);
        String monsterName = task.getMonster();
        String monsterFileName = task.getMonsterFileName();

        ImageIcon imageIcon;
        try {
            BufferedImage img = ImageUtil.loadImageResource(getClass(), monsterFileName);
            BufferedImage resizedImg = ImageUtil.resizeImage(img, img.getWidth() / 2, img.getHeight() / 2);

            imageIcon = new ImageIcon(resizedImg);
        } catch (NullPointerException e) {
            log.info(String.format("Couldn't find image with name... %s", monsterFileName), e);
            return new HeaderPanel(font, monsterName, Color.ORANGE, SwingConstants.CENTER).getHeaderPanel();
        }

        return new HeaderPanel(font, monsterName, Color.CYAN, imageIcon, SwingConstants.CENTER).getHeaderPanel();
    }

    private TabPanel createTabPanel(SlayerTask task) {
        TabPanel tabPanel = new TabPanel();

        List<ImageIcon> icons = new ArrayList<>();
        for (String imageNameWithExtension : tabImageNamesWithExtensions) {
            BufferedImage image = ImageUtil.loadImageResource(getClass(), String.format("/images/%s", imageNameWithExtension));
            ImageIcon imageIcon = new ImageIcon(image);
            icons.add(imageIcon);
        }

        Tab locationTab = new Tab(icons.get(0), task.getLocations(), "Map Location");
        Tab itemTab = new Tab(icons.get(1), task.getItemsRequiredNames(), "Items Needed");
        Tab attackStylesTab = new Tab(icons.get(2), task.getAttackStyles(), "Monster Attack Style");
        Tab attributesTab = new Tab(icons.get(3), task.getAttributes(), "Monsters Attributes");
        Tab masterTab = new Tab(icons.get(4), task.getSlayerMasters(), "Slayer Master");
        tabPanel.addTabs(new Tab[]{locationTab, itemTab, attackStylesTab, attributesTab, masterTab});

        return tabPanel;
    }

    public void createTaskListPanel(Collection<SlayerTask> tasks) {
        removeComponents(null);
        BufferedImage image = ImageUtil.loadImageResource(getClass(), String.format("/images/slayer_icon.png"));
        ImageIcon imageIcon = new ImageIcon(image);
        JLabel searchBarIcon = new JLabel();
        searchBarIcon.setVerticalAlignment(SwingConstants.CENTER);
        searchBarIcon.setHorizontalAlignment(SwingConstants.CENTER);
        searchBarIcon.setIcon(imageIcon);
        add(searchBarIcon);
        JLabel searchBarTitle = new JLabel("~ Slayer Helper ~");
        searchBarTitle.setForeground(Color.ORANGE);
        searchBarTitle.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 15));
        searchBarTitle.setHorizontalAlignment(SwingConstants.CENTER);
        searchBarTitle.setBorder(BorderFactory.createEmptyBorder(0, 0, 10, 0));
        JLabel searchBarHelperMsg = new JLabel("Search for a monster...");
        searchBarHelperMsg.setForeground(Color.WHITE);
        searchBarHelperMsg.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 10));
        add(searchBarTitle);
        add(searchBarHelperMsg);
        add(searchBar.getSearchBar());
        this.clearFilter();
        this.updateListModel(tasks);

        JList<SlayerTask> monsterNames = new JList<>(listModel);
        monsterNames.setCellRenderer(new SlayerTasksRenderer());
        monsterNames.setFocusable(true);
        monsterNames.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        monsterNames.setBackground(new Color(30, 30, 30));
        monsterNames.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                SlayerTask selectedTask = monsterNames.getSelectedValue();
                if (selectedTask != null) {
                    openTask(selectedTask);
                }
            }
        });

        add(monsterNames);
        revalidate();
        repaint();
    }

    private void openTask(SlayerTask task) {
        removeComponents(null);
        JButton backButton = new JButton("<- Back");
        backButton.setFocusPainted(false);
        backButton.setPreferredSize(new Dimension(50, 30));
        backButton.addActionListener(e -> {
            closeTask();
            remove(backButton);
        });
        add(backButton);
        add(createTabPanel(task).getTabbedPane());
        add(createHeaderPanel(task));
        backButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }

    private void closeTask() {
        // back to an empty list
        createTaskListPanel(new ArrayList<>());
    }

    private void removeComponents(@Nullable Component[] excludedComponents) {
        Component[] components = this.getComponents();

        for (Component component : components) {
            if (excludedComponents != null && Arrays.stream(excludedComponents).anyMatch(c -> c == component)) {
                continue;
            }
            remove(component);
        }

        revalidate();
        repaint();
    }

    public void filterList(String searchText) {
        if (!searchText.isEmpty()) {
            Collection<SlayerTask> tasks = slayerTasksFetcher.getSlayerTasksByFilter(searchText);
            updateListModel(tasks);
        } else {
            // Clear the list when the search text is empty
            listModel.clear();
        }
    }

    public void clearFilter() {
        searchBar.getSearchBar().setText(""); // Clear the search bar text
        updateListModel(slayerTasksFetcher.getAllSlayerTasks()); // Reset the list
    }

    // A helper method to update the list model
    public void updateListModel(Collection<SlayerTask> tasks) {
        listModel.clear();
        tasks.forEach(listModel::addElement);
    }
}

package com.slayerhelper.ui.components;

import lombok.Getter;
import net.runelite.client.ui.ColorScheme;
import net.runelite.client.ui.PluginPanel;
import net.runelite.client.ui.components.IconTextField;

import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

public class SearchBar {
    @Getter
    private final IconTextField searchBar = new IconTextField();

    // Define the interfaces for the handlers
    public interface OnKeyTypedHandler {
        void run(String text);
    }

    public interface OnClearHandler {
        void run();
    }

    public SearchBar(OnKeyTypedHandler onKeyTypedHandler, OnClearHandler onClearHandler) {
        searchBar.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                // Run the handler with the current text of the search bar
                onKeyTypedHandler.run(searchBar.getText());

            }
        });

        searchBar.addClearListener(() -> {
            onClearHandler.run();
            searchBar.setIcon(IconTextField.Icon.SEARCH);
            searchBar.setEditable(true);
        });

        setSearchBarStyle();
    }

    private void setSearchBarStyle() {
        searchBar.setIcon(IconTextField.Icon.SEARCH);
        searchBar.setPreferredSize(new Dimension(PluginPanel.PANEL_WIDTH - 20, 30));
        searchBar.setBackground(ColorScheme.DARKER_GRAY_COLOR);
        searchBar.setHoverBackgroundColor(ColorScheme.DARK_GRAY_HOVER_COLOR);
        searchBar.setMinimumSize(new Dimension(0, 30));
    }
}

package com.slayerhelper.ui.components;

import com.slayerhelper.util.WikiUtil;
import lombok.Getter;

import javax.swing.*;
import java.awt.*;
import java.util.Objects;
import java.util.Arrays;

public class Tab {
    @Getter
    private final ImageIcon icon;
    @Getter
    private final JPanel content;

    public Tab(ImageIcon icon, String[] content, String type) {
        Arrays.sort(content, (a, b) -> Integer.compare(b.length(), a.length()));
        Objects.requireNonNull(icon, "icon cannot be null");
        Objects.requireNonNull(content, "content cannot be null");
        JPanel contentPanel = new JPanel();
        contentPanel.setBackground(new Color(30, 30, 30));
        JLabel typeLabel = new JLabel(type);
        typeLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 15));
        typeLabel.setForeground(Color.ORANGE);
        typeLabel.setHorizontalAlignment(SwingConstants.CENTER);
        typeLabel.setBorder(BorderFactory.createEmptyBorder(0, 0, 10, 0));
        contentPanel.add(typeLabel);
        for (String s : content) {
            JLabel label = new JLabel(s);
            label.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 15));
            label.setForeground(Color.WHITE);
            label.setHorizontalAlignment(SwingConstants.CENTER);
            Container wikiButton = WikiUtil.createLinkButton(s, WikiUtil.getWikiUrl(type, s));
            contentPanel.add(wikiButton);
        }
        this.icon = icon;
        this.content = contentPanel;
    }

    private String convertStringsToLineSeparatedString(String[] strings) {
        return String.join(System.lineSeparator(), strings);
    }
}

