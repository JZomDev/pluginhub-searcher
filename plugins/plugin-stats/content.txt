package com.pluginstats;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("plugin-stats")
public interface PluginStatsConfig extends Config
{
	@ConfigItem(
			keyName = "showInstalled",
			name = "Show Plugins Installed",
			description = "Show total number of plugins installed"
	)
	default boolean showInstalled() { return true; }

	@ConfigItem(
			keyName = "showEnabled",
			name = "Show Plugins Enabled",
			description = "Show total number of plugins currently enabled"
	)
	default boolean showEnabled() { return true; }
}
package com.pluginstats.overlays;

import com.google.inject.Inject;
import java.awt.Dimension;
import java.awt.Graphics2D;

import com.pluginstats.PluginStatsConfig;
import com.pluginstats.services.PluginStatsService;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;

public class PluginStatsOverlay extends OverlayPanel
{
    private final PluginStatsService service;
    private final PluginStatsConfig config;

    @Inject
    public PluginStatsOverlay(PluginStatsService service, PluginStatsConfig config)
    {
        this.service = service;
        this.config  = config;
        setPosition(OverlayPosition.TOP_RIGHT); // default; we sync to config below
    }

    @Override
    public Dimension render(Graphics2D g)
    {
        final boolean showInstalled = config.showInstalled();
        final boolean showEnabled   = config.showEnabled();

        // If both toggles are off, render nothing (overlay disappears)
        if (!showInstalled && !showEnabled)
        {
            panelComponent.getChildren().clear();
            return null;
        }

        panelComponent.getChildren().clear();

        // Pull counts once
        PluginStatsService.Counts counts = service.getCounts();

        panelComponent.getChildren().add(
                TitleComponent.builder().text("Plugins").build()
        );

        if (showInstalled)
        {
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Installed:")
                    .right(Integer.toString(counts.total()))
                    .build());
        }

        if (showEnabled)
        {
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Enabled:")
                    .right(Integer.toString(counts.enabled()))
                    .build());
        }

        return super.render(g);
    }
}
package com.pluginstats;

import com.google.inject.Provides;
import javax.inject.Inject;

import com.pluginstats.overlays.PluginStatsOverlay;
import com.pluginstats.services.PluginStatsService;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ExternalPluginsChanged;
import net.runelite.client.events.PluginChanged;
import net.runelite.client.events.ProfileChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@Slf4j
@PluginDescriptor(
		name = "Plugin Stats",
		description = "Overlay showing how many plugins are installed and enabled"
)
public class PluginStatsPlugin extends Plugin
{
	@Inject private OverlayManager overlayManager;
	@Inject private PluginStatsOverlay overlay;
	@Inject private PluginStatsService service;

	@Override
	protected void startUp()
	{
		log.debug("Plugin Stats started");
		overlayManager.add(overlay);
		service.recalc();
	}

	@Override
	protected void shutDown()
	{
		log.debug("Plugin Stats stopped");
		overlayManager.remove(overlay);
	}

	// Recalc immediately on relevant changes
	@Subscribe public void onPluginChanged(PluginChanged e) { service.recalc(); }
	@Subscribe public void onExternalPluginsChanged(ExternalPluginsChanged e) { service.recalc(); }
	@Subscribe public void onProfileChanged(ProfileChanged e) { service.recalc(); }

	@Provides
	PluginStatsConfig provideConfig(ConfigManager cm)
	{
		return cm.getConfig(PluginStatsConfig.class);
	}
}

package com.pluginstats.services;

import com.google.inject.Inject;
import java.util.concurrent.atomic.AtomicReference;

import com.pluginstats.PluginStatsConfig;
import net.runelite.client.plugins.PluginManager;

public class PluginStatsService
{
    public static final class Counts {
        private final int total, enabled;
        public Counts(int total, int enabled) { this.total = total; this.enabled = enabled; }
        public int total() { return total; }
        public int enabled() { return enabled; }
    }

    @Inject private PluginManager pluginManager;
    @Inject private PluginStatsConfig config;

    private final AtomicReference<Counts> cached = new AtomicReference<>(new Counts(0, 0));

    public Counts getCounts()
    {

        recalc();

        return cached.get();
    }

    public void recalc()
    {
        int total = pluginManager.getPlugins().size();
        int enabled = (int) pluginManager.getPlugins().stream()
                .filter(pluginManager::isPluginEnabled)
                .count();
        cached.set(new Counts(total, enabled));
    }
}
package com.example;

import com.pluginstats.PluginStatsPlugin;
import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PluginStatsTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PluginStatsPlugin.class);
		RuneLite.main(args);
	}
}
