package com.rymr.npcaccessibilitytagger;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class NpcAcessibilityTaggerTest {
    public static void main(String[] args) throws Exception
    {
        ExternalPluginManager.loadBuiltin(NpcAccessibilityTaggerPlugin.class);
        RuneLite.main(args);
    }
}
package com.rymr.npcaccessibilitytagger;

import java.awt.Color;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

/*
 * Copyright (c) 2023, R-Y-M-R
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
@ConfigGroup(NpcAccessibilityTaggerConfig.GROUP)
public interface NpcAccessibilityTaggerConfig extends Config {
    String GROUP = "npcaccessibilitytagger";

    @ConfigSection(
            name = "Text Style",
            description = "The text style of NPC tagging",
            position = 0
    )
    String textStyleSection = "textStyleSection";

    @ConfigSection(
            name = "Accessibility settings",
            description = "Accessibility settings for NPC tagging",
            position = 1
    )
    String configSettingsSection = "configSettingsSection";

    @ConfigSection(
            name = "Color Swatch",
            description = "Useful for testing colors but not changing anything.",
            position = 2
    )
    String colorSwatchSection = "colorSwatchSection";

    @ConfigItem(
            position = 5,
            keyName = "defaultFontColor",
            name = "Default Font Color",
            description = "The default font color is used when a specific color isn't specified for a specific NPC.",
            section = textStyleSection
    )
    default Color defaultFontColor() {
        return Color.WHITE;
    }


    @ConfigItem(
            position = 0,
            keyName = "appendWordToNPC",
            name = "Append word to NPC",
            description = "Configures whether or not NPC should have a word on it",
            section = textStyleSection
    )
    default boolean appendWordToNPC() {
        return true;
    }

    @ConfigItem(
            position = 1,
            keyName = "heightAboveNPC",
            name = "Height above NPC",
            description = "Configures the height above NPC",
            section = textStyleSection
    )
    default int heightAboveNPC() {
        return 40; // @todo update with legit value
    }

    @ConfigItem(
            position = 4,
            keyName = "enableCustomTextColor",
            name = "Enable custom text coloring",
            description = "Configures whether or not the custom text color should be used",
            section = textStyleSection
    )
    default boolean enableCustomTextColor() {
        return true;
    }

    @ConfigItem(
            position = 2,
            keyName = "fontStyle",
            name = "Font Style",
            description = "Select which font you wish to use",
            section = textStyleSection
    )
    default FontOption fontStyle()
    {
        return FontOption.RUNESCAPE;
    }

    @ConfigItem(
            position = 3,
            keyName = "fontSize",
            name = "Font Size",
            description = "Select which font size you wish to use",
            section = textStyleSection
    )
    default double fontSize() {
        return 15.0f;
    }

    @ConfigItem(
            position = 0,
            keyName = "endUserConfig",
            name = "Config settings",
            description = "Config settings",
            section = configSettingsSection
    )
    default String endUserConfig() {
        if (enableCustomTextColor()) {
            return "3101:Hans:#B40404";
        } else {
            return "3101:Hans";
        }
    }

    @ConfigItem(
            position = 0,
            keyName = "colorSwatch",
            name = "Color swatch",
            description = "Color swatch for custom NPC tagging",
            section = colorSwatchSection
    )
    default Color colorSwatch() {
        return Color.WHITE;
    }
}
package com.rymr.npcaccessibilitytagger;

import lombok.extern.slf4j.Slf4j;
import net.runelite.client.util.Text;

import java.awt.*;
import java.util.ArrayList;
import java.util.List;

/*
 * Copyright (c) 2023, R-Y-M-R
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
@Slf4j
public class NpcAccessibilityTaggerParser {

    private static final NpcAccessibilityTaggerParser INSTANCE = new NpcAccessibilityTaggerParser();
    private final List<StandardEntry> entries = new ArrayList<>(10);

    public List<StandardEntry> getEntries() {
        return entries;
    }

    /**
     * Parses the input config into a list of StandardEntry objects
     *
     * @param config
     * @return List of StandardEntry objects
     */
    public List<StandardEntry> parse(NpcAccessibilityTaggerConfig config) {
        String input = config.endUserConfig();
        if (input == null || input.isEmpty())
            return null;

        for (String entry : Text.fromCSV(input)) {
            try {
                String[] parts = entry.split(":");
//                log.info("Entry: "+entry+"\nParts: " + parts.length);
                if (parts.length == 2) {
                    entries.add(new StandardEntry(Integer.parseInt(parts[0].trim()), parts[1].trim()));
                } else if (parts.length == 3) {
                    entries.add(new ExtendedEntry(Integer.parseInt(parts[0].trim()), parts[1].trim(), Color.decode(appendMissingPound(parts[2].trim()))));
                }
            } catch (Exception e) {
                log.warn("Parse exception: \"" + entry + "\"\n" + e.getMessage());
            }
        }
        return entries;
    }

    /**
     * Appends a missing pound sign to the beginning of the input string
     *
     * @param input
     * @return
     */
    private String appendMissingPound(String input) {
        if (!input.startsWith("#")) {
            input = "#" + input;
        }
        return input;
    }

    public static NpcAccessibilityTaggerParser getInstance() {
        return INSTANCE;
    }
}

package com.rymr.npcaccessibilitytagger;

import com.google.inject.Inject;

import java.awt.*;
import java.util.Optional;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Model;
import net.runelite.api.NPC;
import net.runelite.api.Point;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

/*
 * Copyright (c) 2023, R-Y-M-R
 * Copyright (c) 2021, Xrio
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
@Slf4j
public class NpcAccessibilityTaggerOverlay extends Overlay {
    private final Client client;
    private final NpcAccessibilityTaggerConfig config;

    @Inject
    NpcAccessibilityTaggerOverlay(Client client, NpcAccessibilityTaggerConfig config) {
        this.client = client;
        this.config = config;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (config.appendWordToNPC()) {
            for (NPC npc : client.getCachedNPCs()) {
                if (!shouldShow(npc)) {
                    continue;
                }
                Optional<StandardEntry> matchingEntry = NpcAccessibilityTaggerParser.getInstance().getEntries().stream().filter(entry -> entry.getId() == npc.getId()).findAny();
                matchingEntry.ifPresent(standardEntry -> renderNpcOverlay(graphics, npc, standardEntry));
            }
        }
        return null;
    }

    private void renderNpcOverlay(Graphics2D graphics, NPC npc, StandardEntry entry) {
        final Point textLocation = npc.getCanvasTextLocation(graphics, entry.getText(), npc.getLogicalHeight() + config.heightAboveNPC());
        graphics.setFont(config.fontStyle().getFont().deriveFont((float) config.fontSize()));
        if (textLocation != null) {
            if (config.enableCustomTextColor() && entry instanceof ExtendedEntry) {
                OverlayUtil.renderTextLocation(graphics, textLocation, entry.getText(), ((ExtendedEntry) entry).getColor());
            } else {
                OverlayUtil.renderTextLocation(graphics, textLocation, entry.getText(), config.defaultFontColor());
            }
        }
    }

    // Copied from Buchus.
    private boolean shouldShow(NPC npc) {
        if (npc == null || npc.getComposition() == null) {
            return false;
        }
        if (npc.getName() != null && (npc.getName().equals("") || npc.getName().equals("null"))) {
            return false;
        }
        return !isInvisible(npc.getModel());
    }

    // Copied from Skretzo
    private boolean isInvisible(Model model) {
        // If all the values in model.getFaceColors3() are -1 then the model is invisible
        for (int value : model.getFaceColors3()) {
            if (value != -1) {
                return false;
            }
        }
        return true;
    }
}
package com.rymr.npcaccessibilitytagger;

import lombok.AllArgsConstructor;
import lombok.Getter;

/*
 * Copyright (c) 2023, R-Y-M-R
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
@AllArgsConstructor
public class StandardEntry {
    @Getter
    private int id;
    @Getter
    private String text;
}

package com.rymr.npcaccessibilitytagger;

import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.client.ui.FontManager;

import java.awt.*;

/*
 * Copyright (c) 2023, R-Y-M-R
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
@AllArgsConstructor
public enum FontOption {
    DEFAULT_BOLD("Default Bold", FontManager.getDefaultBoldFont()),
    DEFAULT("Default", FontManager.getDefaultFont()),
    RUNESCAPE("Runescape", FontManager.getRunescapeFont()),
    RUNESCAPE_SMALL("Runescape Small", FontManager.getRunescapeSmallFont()),
    RUNESCAPE_BOLD("Runescape Bold", FontManager.getRunescapeBoldFont());
    @Getter
    private final String name;
    @Getter
    private final Font font;
}
package com.rymr.npcaccessibilitytagger;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;

/*
 * Copyright (c) 2023, R-Y-M-R
 * Copyright (c) 2021, Xrio
 * Copyright (c) 2018, James Swindle <wilingua@gmail.com>
 * Copyright (c) 2018, Adam <Adam@sigterm.info>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Credit to Xrio, James Swindle, and Adam for code I referenced / used in this plugin.
 */
@PluginDescriptor(
        name = "NPC Accessibility Tagger",
        description = "Tags NPCs with text for easier visual identification, aimed at helping people with accessibility issues",
        tags = {"npcs", "accessibility", "tagger", "overlay", "tags"}
)
@Slf4j
public class NpcAccessibilityTaggerPlugin extends Plugin {

    @Inject
    private NpcAccessibilityTaggerConfig config;

    @Inject
    private NpcAccessibilityTaggerOverlay overlay;

    @Inject
    private OverlayManager overlayManager;

    @Override
    protected void startUp() throws Exception {
        log.info("Started plugin");
        updateAddition();
    }

    @Override
    protected void shutDown() throws Exception {
        log.info("Shutdown plugin");
        updateRemoval();
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged configChanged) {
        if (!configChanged.getGroup().equals(NpcAccessibilityTaggerConfig.GROUP)) {
            return;
        }
        update();
    }

    private void update() {
        updateRemoval();
        updateAddition();
    }

    private void updateRemoval() {
        NpcAccessibilityTaggerParser.getInstance().getEntries().clear();
        overlayManager.remove(overlay);
    }

    private void updateAddition() {
        NpcAccessibilityTaggerParser.getInstance().parse(config);
        overlayManager.add(overlay);
    }

    @Provides
    NpcAccessibilityTaggerConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(NpcAccessibilityTaggerConfig.class);
    }
}
package com.rymr.npcaccessibilitytagger;

import java.awt.*;

/*
 * Copyright (c) 2023, R-Y-M-R
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class ExtendedEntry extends StandardEntry {

    public ExtendedEntry(int id, String text, Color color) {
        super(id, text);
        this.color = color;
    }

    private final Color color;

    public Color getColor() {
        return color;
    }
}

