package com.hunllefhelper;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class HunllefHelperPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(HunllefHelperPlugin.class);
		RuneLite.main(args);
	}
}
package com.hunllefhelper;

import com.google.inject.Provides;
import com.hunllefhelper.config.AudioMode;
import com.hunllefhelper.config.HunllefHelperConfig;
import com.hunllefhelper.config.PanelVisibility;
import static com.hunllefhelper.PluginConstants.*;
import com.hunllefhelper.ui.HunllefHelperPluginPanel;
import java.awt.Color;
import java.util.ArrayList;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.inject.Inject;
import javax.swing.SwingUtilities;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Player;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.input.KeyListener;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.ImageUtil;

@Slf4j
@PluginDescriptor(
	name = "Hunllef Helper"
)
public class HunllefHelperPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClientToolbar clientToolbar;

	@Inject
	private HunllefHelperConfig config;

	@Inject
	private AudioPlayer audioPlayer;

	@Inject
	private ConfigManager configManager;

	@Inject
	private KeyManager keyManager;

	private HunllefHelperPluginPanel panel;
	private ScheduledExecutorService executorService;
	private NavigationButton navigationButton;
	private final ArrayList<ConditionalHotkeyListener> keyListeners = new ArrayList<>();

	private int counter;
	private boolean isRanged;
	private boolean isPanelAdded;
	private boolean started;

	@Override
	protected void startUp() throws Exception
	{
		migrate();

		audioPlayer.setVolume(config.audioVolume());
		audioPlayer.tryLoadAudio(config, SOUNDS);

		panel = injector.getInstance(HunllefHelperPluginPanel.class);
		panel.setCounterActiveState(false);

		navigationButton = NavigationButton
			.builder()
			.tooltip("Hunllef Helper")
			.icon(ImageUtil.loadImageResource(getClass(), "/nav-icon.png"))
			.priority(100)
			.panel(panel)
			.build();

		updatePanelVisibility(false);
		setKeyListeners(isPanelAdded);
	}

	@Override
	protected void shutDown() throws Exception
	{
		removeKeyListeners();
		updateNavigationBar(false, false);
		shutdownExecutorService();
		panel = null;
		navigationButton = null;
		audioPlayer.unloadAudio();
	}

	@Subscribe
	public void onGameTick(GameTick tick)
	{
		updatePanelVisibility(true);
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		switch (event.getKey())
		{
			case CONFIG_KEY_AUDIO_MODE:
				audioPlayer.unloadAudio();
				audioPlayer.tryLoadAudio(config, SOUNDS);
				break;
			case CONFIG_KEY_PANEL_VISIBILITY:
				updatePanelVisibility(false);
				break;
			case CONFIG_KEY_AUDIO_VOLUME:
				audioPlayer.setVolume(config.audioVolume());
				break;
			case CONFIG_KEY_HOTKEYS_ONLY_WITH_PANEL:
				setKeyListeners(isPanelAdded);
				break;
		}
	}

	public void start(boolean withRanged)
	{
		started = true;
		isRanged = withRanged;

		if (withRanged)
		{
			panel.setStyle("Ranged", Color.GREEN);
		}
		else
		{
			panel.setStyle("Mage", Color.CYAN);
		}
		panel.setCounterActiveState(started);
		counter = INITIAL_COUNTER;

		executorService = Executors.newSingleThreadScheduledExecutor();
		executorService.scheduleAtFixedRate(this::tickCounter, 0, COUNTER_INTERVAL, TimeUnit.MILLISECONDS);
	}

	public void trample()
	{
		counter += ATTACK_DURATION;
	}

	public void addTicks(int ticks)
	{
		counter += ticks * MILLIS_PER_TICK;
	}

	public void reset()
	{
		started = false;
		shutdownExecutorService();
		panel.setCounterActiveState(started);
	}

	public void setKeyListeners(boolean isPanelVisible)
	{
		if (!config.hotkeysOnlyWithPanel() || isPanelVisible)
		{
			if (keyListeners.isEmpty())
			{
				addKeyListeners();
			}
		}
		else
		{
			removeKeyListeners();
		}
	}

	@Provides
	HunllefHelperConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(HunllefHelperConfig.class);
	}

	private void tickCounter()
	{
		counter -= COUNTER_INTERVAL;
		panel.setTime(counter);

		if (counter == 2000)
		{
			playSoundClip(SOUND_TWO);
			return;
		}

		if (counter == 1000)
		{
			playSoundClip(SOUND_ONE);
			return;
		}

		if (counter <= 0)
		{
			if (isRanged)
			{
				playSoundClip(SOUND_MAGE);
				panel.setStyle("Mage", Color.CYAN);
			}
			else
			{
				playSoundClip(SOUND_RANGE);
				panel.setStyle("Ranged", Color.GREEN);
			}

			isRanged = !isRanged;
			counter += ROTATION_DURATION;
		}
	}

	private void playSoundClip(String soundFile)
	{
		if (config.audioMode() == AudioMode.Disabled)
		{
			return;
		}

		executorService.submit(() -> audioPlayer.playSoundClip(soundFile));
	}

	private void updatePanelVisibility(boolean selectPanel)
	{
		boolean panelShouldBeAdded = shouldShowPanel();

		if (panelShouldBeAdded != isPanelAdded)
		{
			updateNavigationBar(panelShouldBeAdded, selectPanel);
		}
	}

	private boolean shouldShowPanel()
	{
		switch (config.panelVisibility())
		{
			case Always: return true;
			case InsideGauntlet: return isInTheGauntlet();
			case AtHunllef: return isInHunllefRoom();
			case Never:
			default: return false;
		}
	}

	private boolean isInTheGauntlet()
	{
		Player player = client.getLocalPlayer();

		if (player == null)
		{
			return false;
		}

		int regionId = WorldPoint.fromLocalInstance(client, player.getLocalLocation()).getRegionID();
		return REGION_IDS_GAUNTLET.contains(regionId);
	}

	private boolean isInHunllefRoom()
	{
		Player player = client.getLocalPlayer();

		if (player == null)
		{
			return false;
		}

		WorldPoint playerLocation = WorldPoint.fromLocalInstance(client, player.getLocalLocation());
		int regionId = playerLocation.getRegionID();

		if (regionId != REGION_ID_GAUNTLET_NORMAL && regionId != REGION_ID_GAUNTLET_CORRUPTED)
		{
			return false;
		}

		int playerX = playerLocation.getRegionX();
		int playerY = playerLocation.getRegionY();

		return playerX >= HUNLLEF_ROOM_X_MIN && playerX <= HUNLLEF_ROOM_X_MAX
			&& playerY >= HUNLLEF_ROOM_Y_MIN && playerY <= HUNLLEF_ROOM_Y_MAX;
	}

	private void updateNavigationBar(boolean enable, boolean selectPanel)
	{
		if (enable)
		{
			clientToolbar.addNavigation(navigationButton);
			if (selectPanel)
			{
				SwingUtilities.invokeLater(() -> clientToolbar.openPanel(navigationButton));
				isPanelAdded = true;
			}
		}
		else
		{
			reset();
			clientToolbar.removeNavigation(navigationButton);
			isPanelAdded = false;
		}
	}

	private void shutdownExecutorService()
	{
		if (executorService != null)
		{
			executorService.shutdownNow();
			try
			{
				if (!executorService.awaitTermination(100, TimeUnit.MILLISECONDS))
				{
					log.warn("Executor service dit not shut down within the allocated timeout.");
				}
			}
			catch (InterruptedException ex)
			{
				Thread.currentThread().interrupt();
			}
			executorService = null;
		}
	}

	private void migrate()
	{
		// Migrate the old "autoHide" config to the new panel visibility enum.
		Boolean autoHide = configManager.getConfiguration(CONFIG_GROUP, "autoHide", Boolean.TYPE);
		if (autoHide != null)
		{
			if (autoHide == false)
			{
				configManager.setConfiguration(CONFIG_GROUP, CONFIG_KEY_PANEL_VISIBILITY, PanelVisibility.Always);
			}
			configManager.unsetConfiguration(CONFIG_GROUP, "autoHide");
		}
	}

	private void addKeyListeners()
	{
		keyListeners.add(new ConditionalHotkeyListener(() -> config.hotkeyStart(), () -> start(true), () -> !started));
		keyListeners.add(new ConditionalHotkeyListener(() -> config.hotkeyStartMage(), () -> start(false), () -> !started));
		keyListeners.add(new ConditionalHotkeyListener(() -> config.hotkeyMinusOneTick(), () -> addTicks(-1), () -> started));
		keyListeners.add(new ConditionalHotkeyListener(() -> config.hotkeyPlusOneTick(), () -> addTicks(1), () -> started));
		keyListeners.add(new ConditionalHotkeyListener(() -> config.hotkeyReset(), this::reset, () -> started));
		keyListeners.add(new ConditionalHotkeyListener(() -> config.hotkeyTrample(), this::trample, () -> started));

		for (KeyListener listener : keyListeners)
		{
			keyManager.registerKeyListener(listener);
		}
	}

	private void removeKeyListeners()
	{
		for (KeyListener listener : keyListeners)
		{
			keyManager.unregisterKeyListener(listener);
		}

		keyListeners.clear();
	}
}

package com.hunllefhelper;

import com.hunllefhelper.config.AudioMode;
import com.hunllefhelper.config.HunllefHelperConfig;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.RuneLite;

import javax.sound.sampled.*;
import java.io.*;
import java.util.HashMap;

@Slf4j
public class AudioPlayer
{
	private HashMap<String, Clip> clips = new HashMap<String, Clip>();
	private float volume = 1f;

	public void tryLoadAudio(HunllefHelperConfig config, String[] clipNames)
	{
		if (config.audioMode() == AudioMode.Disabled)
		{
			return;
		}

		for (String clipName : clipNames)
		{
			tryLoadClip(config.audioMode(), clipName);
		}
	}

	public void unloadAudio()
	{
		for (Clip clip : clips.values())
		{
			clip.stop();
			clip.flush();
			clip.close();
		}

		clips.clear();
	}

	public synchronized void playSoundClip(String sound)
	{
		if (clips.containsKey(sound))
		{
			Clip clip = clips.get(sound);
			clip.setFramePosition(0);
			clip.start();
		}
	}

	public void setVolume(int volume)
	{
		float volumeF = volume / 100f;
		volumeF = Math.max(volumeF, 0f);
		volumeF = Math.min(volumeF, 2f);

		if (this.volume != volumeF)
		{
			this.volume = volumeF;

			for (Clip clip : clips.values())
			{
				setClipVolume(clip);
			}
		}
	}

	private boolean tryLoadClip(AudioMode audioMode, String clipName)
	{
		if (audioMode == AudioMode.Custom)
		{
			final File customFile = new File(RuneLite.RUNELITE_DIR, clipName);

			try (
				InputStream fileStream = new BufferedInputStream(new FileInputStream(customFile));
				AudioInputStream sound = AudioSystem.getAudioInputStream(fileStream))
			{
				Clip clip = AudioSystem.getClip();
				clips.put(clipName, clip);
				clip.open(sound);
				setClipVolume(clip);
				return true;
			}
			catch (UnsupportedAudioFileException | IOException | LineUnavailableException | SecurityException ex)
			{
				log.error("Unable to load sound " + clipName, ex);
			}
		}

		try (
			InputStream audioSource = getClass().getResourceAsStream(clipName);
			BufferedInputStream bufferedStream = new BufferedInputStream(audioSource);
			AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(bufferedStream))
		{
			Clip clip = AudioSystem.getClip();
			clips.put(clipName, clip);
			clip.open(audioInputStream);
			setClipVolume(clip);
			return true;
		}
		catch (UnsupportedAudioFileException | IOException | LineUnavailableException | SecurityException ex)
		{
			log.error("Unable to load sound " + clipName, ex);
		}

		return false;
	}

	private void setClipVolume(Clip clip)
	{
		FloatControl gainControl = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);
		gainControl.setValue(20f * (float) Math.log10(volume));
	}
}

package com.hunllefhelper.config;

public enum AudioMode
{
	Default,
	Disabled,
	Custom
}

package com.hunllefhelper.config;

import static com.hunllefhelper.PluginConstants.*;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Keybind;
import net.runelite.client.config.Range;

@ConfigGroup(CONFIG_GROUP)
public interface HunllefHelperConfig extends Config
{
	@ConfigItem(
		position = 1,
		keyName = CONFIG_KEY_PANEL_VISIBILITY,
		name = "Show panel",
		description = "Determines when the plugin panel is shown."
	)
	default PanelVisibility panelVisibility()
	{
		return PanelVisibility.InsideGauntlet;
	}

	@ConfigItem(
		position = 2,
		keyName = CONFIG_KEY_AUDIO_MODE,
		name = "Audio mode",
		description = ""
	)
	default AudioMode audioMode()
	{
		return AudioMode.Default;
	}

	@Range(
		min = 0,
		max = 200
	)
	@ConfigItem(
		position = 3,
		keyName = CONFIG_KEY_AUDIO_VOLUME,
		name = "Audio volume",
		description = "Volume relative to the source (0-200)%."
	)
	default int audioVolume()
	{
		return  100;
	}

	@ConfigSection(
		position = 100,
		name = "hotkeys",
		closedByDefault = false,
		description = ""
	)
	String CONFIG_SECTION_HOTKEYS = "hotkeys";

	@ConfigItem(
		position = 0,
		keyName = CONFIG_KEY_HOTKEYS_ONLY_WITH_PANEL,
		name = "Only with panel open",
		description = "Only enable hotkeys while the plugin panel is visible.",
		section = CONFIG_SECTION_HOTKEYS
	)
	default boolean hotkeysOnlyWithPanel()
	{
		return true;
	}

	@ConfigItem(
		position = 1,
		keyName = CONFIG_KEY_HOTKEY_START,
		name = "Start",
		description = "",
		section = CONFIG_SECTION_HOTKEYS
	)
	default Keybind hotkeyStart()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
		position = 2,
		keyName = CONFIG_KEY_HOTKEY_START_MAGE,
		name = "Start mage",
		description = "",
		section = CONFIG_SECTION_HOTKEYS
	)
	default Keybind hotkeyStartMage()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
		position = 3,
		keyName = CONFIG_KEY_HOTKEY_MINUS_ONE_TICK,
		name = "-1 tick",
		description = "",
		section = CONFIG_SECTION_HOTKEYS
	)
	default Keybind hotkeyMinusOneTick()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
		position = 4,
		keyName = CONFIG_KEY_HOTKEY_PLUS_ONE_TICK,
		name = "+1 tick",
		description = "",
		section = CONFIG_SECTION_HOTKEYS
	)
	default Keybind hotkeyPlusOneTick()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
		position = 5,
		keyName = CONFIG_KEY_HOTKEY_TRAMPLE,
		name = "Trample",
		description = "",
		section = CONFIG_SECTION_HOTKEYS
	)
	default Keybind hotkeyTrample()
	{
		return Keybind.NOT_SET;
	}

	@ConfigItem(
		position = 6,
		keyName = CONFIG_KEY_HOTKEY_RESET,
		name = "Reset",
		description = "",
		section = CONFIG_SECTION_HOTKEYS
	)
	default Keybind hotkeyReset()
	{
		return Keybind.NOT_SET;
	}
}

package com.hunllefhelper.config;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum PanelVisibility
{
	Always("Always"),
	InsideGauntlet("Inside Gauntlet"),
	AtHunllef("At Hunllef"),
	Never("Never");

	private final String name;

	@Override
	public String toString()
	{
		return name;
	}
}
package com.hunllefhelper;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public final class PluginConstants
{
	// Region ids
	public static final int REGION_ID_GAUNTLET_LOBBY = 12127;
	public static final int REGION_ID_GAUNTLET_NORMAL = 7512;
	public static final int REGION_ID_GAUNTLET_CORRUPTED = 7768;
	public static final List<Integer> REGION_IDS_GAUNTLET = Collections.unmodifiableList(new ArrayList<Integer>()
	{{
		add(REGION_ID_GAUNTLET_LOBBY);
		add(REGION_ID_GAUNTLET_NORMAL);
		add(REGION_ID_GAUNTLET_CORRUPTED);
	}});

	// Coordinates
	public static final int HUNLLEF_ROOM_X_MIN = 49;
	public static final int HUNLLEF_ROOM_X_MAX = 62;
	public static final int HUNLLEF_ROOM_Y_MIN = 49;
	public static final int HUNLLEF_ROOM_Y_MAX = 62;

	// Timings
	public static final int MILLIS_PER_TICK = 600;
	public static final int COUNTER_INTERVAL = 200;
	public static final int INITIAL_COUNTER = MILLIS_PER_TICK * 14;
	public static final int ATTACK_DURATION = MILLIS_PER_TICK * 5;
	public static final int ROTATION_DURATION = ATTACK_DURATION * 4;

	// Sound files
	public static final String SOUND_TWO = "/audio/two.wav";
	public static final String SOUND_ONE = "/audio/one.wav";
	public static final String SOUND_MAGE = "/audio/mage.wav";
	public static final String SOUND_RANGE = "/audio/range.wav";
	public static final String[] SOUNDS = new String[]{SOUND_MAGE, SOUND_RANGE, SOUND_ONE, SOUND_TWO};

	// Configuration
	public static final String CONFIG_GROUP = "hunllefhelper";
	public static final String CONFIG_KEY_AUDIO_MODE = "audioMode";
	public static final String CONFIG_KEY_PANEL_VISIBILITY = "panelVisibility";
	public static final String CONFIG_KEY_AUDIO_VOLUME = "audioVolume";
	public static final String CONFIG_KEY_HOTKEYS_ONLY_WITH_PANEL = "onlyWithPanel";
	public static final String CONFIG_KEY_HOTKEY_START = "hotkeyStart";
	public static final String CONFIG_KEY_HOTKEY_START_MAGE = "hotkeyStartMage";
	public static final String CONFIG_KEY_HOTKEY_MINUS_ONE_TICK = "hotkeyMinusOneTick";
	public static final String CONFIG_KEY_HOTKEY_PLUS_ONE_TICK = "hotkeyPlusOneTick";
	public static final String CONFIG_KEY_HOTKEY_RESET = "hotkeyReset";
	public static final String CONFIG_KEY_HOTKEY_TRAMPLE = "hotkeyTrample";

	private PluginConstants()
	{
	}
}

package com.hunllefhelper;

import java.util.function.Supplier;
import net.runelite.client.config.Keybind;
import net.runelite.client.util.HotkeyListener;

class ConditionalHotkeyListener extends HotkeyListener
{
	private Runnable hotkeyPressedHandler;
	private Supplier<Boolean> hotkeyPressedEnabledSupplier;

	public ConditionalHotkeyListener(Supplier<Keybind> hotkeySupplier, Runnable hotkeyPressedHandler, Supplier<Boolean> hotkeyPressedEnabledSupplier)
	{
		super(hotkeySupplier);
		this.hotkeyPressedHandler = hotkeyPressedHandler;
		this.hotkeyPressedEnabledSupplier = hotkeyPressedEnabledSupplier;
	}

	@Override
	public void hotkeyPressed()
	{
		if (hotkeyPressedEnabledSupplier.get())
		{
			hotkeyPressedHandler.run();
		}
	}
}

package com.hunllefhelper.ui;

import com.hunllefhelper.HunllefHelperPlugin;
import com.hunllefhelper.ui.components.Button;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.util.ArrayList;
import javax.inject.Inject;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import lombok.extern.slf4j.Slf4j;
import net.runelite.client.ui.DynamicGridLayout;
import net.runelite.client.ui.PluginPanel;

@Slf4j
public class HunllefHelperPluginPanel extends PluginPanel
{
	private final HunllefHelperPlugin plugin;

	private final JPanel contentPanel;
	private final JPanel activeView;
	private final JPanel inactiveView;

	private final ArrayList<Button> activeButtons = new ArrayList<Button>();
	private final ArrayList<Button> inactiveButtons = new ArrayList<Button>();

	private JLabel timeLabel;
	private JLabel styleLabel;

	@Inject
	public HunllefHelperPluginPanel(HunllefHelperPlugin plugin)
	{
		super(false);
		this.plugin = plugin;

		JLabel title = new JLabel("Hunllef Helper");
		title.setBorder(new EmptyBorder(0, 0, BORDER_OFFSET, 0));
		title.setForeground(Color.WHITE);

		contentPanel = new JPanel();
		contentPanel.setLayout(new BorderLayout());

		setLayout(new BorderLayout());
		setBorder(new EmptyBorder(BORDER_OFFSET, BORDER_OFFSET, BORDER_OFFSET, BORDER_OFFSET));
		add(title, BorderLayout.NORTH);
		add(contentPanel, BorderLayout.CENTER);

		activeView = createActiveView();
		inactiveView = createInactiveView();
	}

	public void setTime(int millis)
	{
		SwingUtilities.invokeLater(() ->
		{
			if (millis <= 9000000)
			{
				timeLabel.setText(String.format("%d", (millis + 1000) / 1000));
			}
			else
			{
				timeLabel.setText("Over 9000!");
			}

			timeLabel.repaint();
		});
	}

	public void setStyle(String styleName, Color color)
	{
		SwingUtilities.invokeLater(() ->
		{
			styleLabel.setText(styleName);
			styleLabel.setForeground(color);
			styleLabel.repaint();
		});
	}

	public void setCounterActiveState(boolean active)
	{
		SwingUtilities.invokeLater(() ->
		{
			contentPanel.removeAll();
			contentPanel.add(active ? activeView : inactiveView, BorderLayout.CENTER);
			contentPanel.revalidate();
			contentPanel.repaint();

			// The styling of buttons is messed up because they are removed from
			// the view when switching between active and not active. Reset the
			// styling to prevent this behaviour.
			if (active)
			{
				for (Button button : inactiveButtons)
				{
					button.resetStyling();
				}
			}
			else
			{
				for (Button button : activeButtons)
				{
					button.resetStyling();
				}
			}
		});
	}

	@Override
	public void onActivate()
	{
		plugin.setKeyListeners(true);
	}

	@Override
	public void onDeactivate()
	{
		plugin.setKeyListeners(false);
	}

	private JPanel createActiveView()
	{
		JPanel activePanel = new JPanel();
		activePanel.setLayout(new BorderLayout());

		// North
		activePanel.add(createTimerPanel(), BorderLayout.NORTH);

		// Center
		JPanel centerPanel = new JPanel();
		centerPanel.setLayout(new BorderLayout());
		centerPanel.add(createTickButtonsPanel(), BorderLayout.NORTH);
		JButton trampleButton = createTrampleButton();
		activePanel.add(trampleButton);
		centerPanel.add(trampleButton, BorderLayout.CENTER);
		activePanel.add(centerPanel, BorderLayout.CENTER);

		// South
		Button resetButton = createResetButton();
		activeButtons.add(resetButton);
		activePanel.add(resetButton, BorderLayout.SOUTH);

		return activePanel;
	}

	private JPanel createInactiveView()
	{
		JPanel inactivePanel = new JPanel();
		inactivePanel.setLayout(new BorderLayout());

		// North
		JLabel instructionLabel = new JLabel("<html>Press 'Start' right after you got hit by the first Hunllef attack. Press the 'I got trampled!' button if you get trampled by Hunllef.</html>");
		instructionLabel.setBorder(new EmptyBorder(BORDER_OFFSET, 0, BORDER_OFFSET, 0));
		inactivePanel.add(instructionLabel, BorderLayout.NORTH);

		// Center
		Button startRangedButton = createStartRangedButton();
		inactiveButtons.add(startRangedButton);
		inactivePanel.add(startRangedButton, BorderLayout.CENTER);

		// South
		Button startMageButton = createStartMageButton();
		inactiveButtons.add(startMageButton);
		inactivePanel.add(startMageButton, BorderLayout.SOUTH);

		return inactivePanel;
	}

	private JPanel createTimerPanel()
	{
		JPanel timerPanel = new JPanel();
		timerPanel.setLayout(new DynamicGridLayout(0, 1, 0, 20));

		timeLabel = new JLabel("", SwingConstants.CENTER);
		timeLabel.setForeground(Color.WHITE);
		timeLabel.setFont(new Font(timeLabel.getFont().getName(), Font.PLAIN, 50));

		styleLabel = new JLabel("", SwingConstants.CENTER);
		styleLabel.setForeground(Color.CYAN);
		styleLabel.setFont(new Font(styleLabel.getFont().getName(), Font.PLAIN, 50));

		timerPanel.add(styleLabel, BorderLayout.NORTH);
		timerPanel.add(timeLabel, BorderLayout.NORTH);
		timerPanel.setBorder(new EmptyBorder(BORDER_OFFSET, 0, BORDER_OFFSET, 0));

		return timerPanel;
	}

	private Button createStartRangedButton()
	{
		Button button = new Button("Start");
		button.addMouseButton1PressedHandler(() -> plugin.start(true));
		return button;
	}

	private Button createStartMageButton()
	{
		Button button = new Button("Start mage");
		button.setPreferredSize(new Dimension(PANEL_WIDTH, 60));
		button.addMouseButton1PressedHandler(() -> plugin.start(false));
		return button;
	}

	private JPanel createTickButtonsPanel()
	{
		JPanel tickPanel = new JPanel();
		tickPanel.setLayout(new BorderLayout());

		// West
		Button minus1TickButton = new Button("-1 tick");
		activeButtons.add(minus1TickButton);
		minus1TickButton.setPreferredSize(new Dimension(PANEL_WIDTH / 2 + BORDER_OFFSET / 2, 60));
		minus1TickButton.addMouseButton1PressedHandler(() -> plugin.addTicks(-1));
		tickPanel.add(minus1TickButton, BorderLayout.WEST);

		// East
		Button plus1TickButton = new Button("+1 tick");
		activeButtons.add(plus1TickButton);
		plus1TickButton.setPreferredSize(new Dimension(PANEL_WIDTH / 2 + BORDER_OFFSET / 2, 60));
		plus1TickButton.addMouseButton1PressedHandler(() -> plugin.addTicks(1));
		tickPanel.add(plus1TickButton, BorderLayout.EAST);

		return tickPanel;
	}

	private Button createTrampleButton()
	{
		Button button = new Button("I got trampled!");
		button.addMouseButton1PressedHandler(plugin::trample);
		return button;
	}

	private Button createResetButton()
	{
		Button button = new Button("Reset");
		button.setPreferredSize(new Dimension(PANEL_WIDTH, 60));
		button.addMouseButton1PressedHandler(plugin::reset);
		return button;
	}
}

package com.hunllefhelper.ui.components;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JButton;

public class Button extends JButton
{
	public Button(String text)
	{
		super(text);
		setFocusable(false);
	}

	public void addMouseButton1PressedHandler(Runnable callback)
	{
		addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(MouseEvent e)
			{
				if (e.getButton() == MouseEvent.BUTTON1)
				{
					callback.run();
				}
			}
		});
	}

	public void resetStyling()
	{
		setEnabled(false);
		setEnabled(true);
	}
}

