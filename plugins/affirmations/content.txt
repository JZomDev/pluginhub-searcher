package com.affirmations;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class AffirmationsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(AffirmationsPlugin.class);
		RuneLite.main(args);
	}
}
package com.affirmations;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;

import javax.inject.Inject;
import java.awt.*;

public class AffirmationsPanelOverlay extends OverlayPanel {
    private final Client client;
    private final AffirmationsConfig config;
    private String currentAffirmation = "";
    private long lastUpdateTime = 0;

    @Inject
    private AffirmationsPanelOverlay(Client client, AffirmationsConfig config) {
        this.client = client;
        this.config = config;
        setPosition(OverlayPosition.TOP_CENTER);
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (currentAffirmation.isEmpty() || config.useFullWidthDisplay()) {
            return null;
        }

        long currentTime = System.currentTimeMillis();
        long elapsedTime = currentTime - lastUpdateTime;
        int displayDuration = config.displayDuration() * 1000;
        int fadeDuration = config.fadeDuration();

        if (elapsedTime > displayDuration + fadeDuration * 2) {
            return null;
        }

        float alpha = calculateAlpha(elapsedTime, displayDuration, fadeDuration);
        Color color = new Color(
                config.textColor().getRed(),
                config.textColor().getGreen(),
                config.textColor().getBlue(),
                (int) (alpha * 255)
        );

        panelComponent.getChildren().clear();
        panelComponent.getChildren().add(LineComponent.builder()
                        .left(currentAffirmation)
                        .leftColor(color).build());

        return super.render(graphics);
    }

    public void setAffirmation(String affirmation) {
        this.currentAffirmation = affirmation;
        this.lastUpdateTime = System.currentTimeMillis();
    }

    private float calculateAlpha(long elapsedTime, int displayDuration, int fadeDuration) {
        if (elapsedTime < fadeDuration) {
            return (float) elapsedTime / fadeDuration;
        } else if (elapsedTime > displayDuration + fadeDuration) {
            return 1 - (float) (elapsedTime - displayDuration - fadeDuration) / fadeDuration;
        } else {
            return 1;
        }
    }
}
package com.affirmations;

import java.util.Arrays;
import java.util.List;

public class OSRSAffirmations {
    public static final List<String> AFFIRMATIONS = Arrays.asList(
            "I am strong, and my strength level reflects that",
            "My love heals more than any Super Restore",
            "My faith protects me from any missile",
            "My faith protects me from any magical attack",
            "My faith protects me from any blow",
            "I have the patience and perseverance to max",
            "My journey is my own, not a competition with others",
            "I can face the Inferno",
            "I can face the Colosseum",
            "I am a joy to raid with",
            "My friends love bossing with me",
            "My friendship is more valuable than any purple",
            "My friends list is full of people who value me",
            "My bank value isn't what makes me valuable",
            "My journey matters more than the destination",
            "I am not afraid to set ambitious goals",
            "I have the patience to finish this grind",
            "I deserve every drop I receive",
            "My RNG will come when it's meant to",
            "I am worthy of rare drops",
            "I am making progress, even when it feels slow",
            "My contributions to the team are meaningful",
            "My quest log shows how far I've come",
            "I am ready for whatever this raid brings",
            "I am comfortable learning mechanics at my own pace",
            "My clan members appreciate my presence",
            "I am getting better with every attempt",
            "My grind will be rewarded in time",
            "I am proud of my collection log",
            "My achievements are worth celebrating",
            "I am exactly where I need to be in my journey",
            "My goals are valid, whether small or large"

    );
}

package com.affirmations;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;

import javax.inject.Inject;
import java.awt.*;
import java.awt.font.FontRenderContext;
import java.awt.font.LineBreakMeasurer;
import java.awt.font.TextAttribute;
import java.awt.font.TextLayout;
import java.awt.geom.AffineTransform;
import java.text.AttributedCharacterIterator;
import java.text.AttributedString;
import java.util.ArrayList;
import java.util.List;

public class AffirmationsFullWidthOverlay extends Overlay {
    private final Client client;
    private final AffirmationsConfig config;
    private String currentAffirmation = "";
    private long lastUpdateTime = 0;
    private Font fallbackFont = new Font("Arial", Font.PLAIN, 20);

    private static final double TICK_LENGTH = 0.6;
    private static final int PADDING = 20; // Padding from screen edges

    @Inject
    private AffirmationsFullWidthOverlay(Client client, AffirmationsConfig config) {
        this.client = client;
        this.config = config;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ALWAYS_ON_TOP);
        setPriority(OverlayPriority.HIGHEST);
    }

    private Font createFont() {
        Font font = new Font(config.fontFamily().getFontName(),
                config.fontStyle().toAwtFontStyle(),
                config.fontSize());

        if (!font.getFamily().equalsIgnoreCase("Dialog")) {
            return font;
        }

        for (String fontName : GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames()) {
            if (fontName.toLowerCase().contains(config.fontFamily().getFontName().toLowerCase())) {
                return new Font(fontName, config.fontStyle().toAwtFontStyle(), config.fontSize());
            }
        }

        return fallbackFont;
    }

    private List<TextLayout> createWrappedTextLayouts(String text, Font font, FontRenderContext frc, float wrappingWidth) {
        List<TextLayout> layouts = new ArrayList<>();
        if (text.isEmpty()) return layouts;

        AttributedString attributedText = new AttributedString(text);
        attributedText.addAttribute(TextAttribute.FONT, font);
        AttributedCharacterIterator paragraph = attributedText.getIterator();
        LineBreakMeasurer measurer = new LineBreakMeasurer(paragraph, frc);

        measurer.setPosition(paragraph.getBeginIndex());

        while (measurer.getPosition() < paragraph.getEndIndex()) {
            TextLayout layout = measurer.nextLayout(wrappingWidth);
            layouts.add(layout);
        }

        return layouts;
    }

    @Override
    public Dimension render(Graphics2D graphics) {
        if (currentAffirmation.isEmpty() || !config.useFullWidthDisplay()) {
            return null;
        }

        long currentTime = System.currentTimeMillis();
        long elapsedTime = currentTime - lastUpdateTime;

        int displayDuration = (int)(config.displayDuration() * TICK_LENGTH * 1000);
        int fadeDuration = (int)(config.fadeDuration() * TICK_LENGTH * 1000);

        if (elapsedTime >= displayDuration + fadeDuration * 2) {
            return null;
        }

        float alpha = calculateAlpha(elapsedTime, displayDuration, fadeDuration);
        if (alpha <= 0) {
            return null;
        }

        Color textColor = new Color(
                config.textColor().getRed(),
                config.textColor().getGreen(),
                config.textColor().getBlue(),
                Math.max(0, Math.min(255, (int) (alpha * 255)))
        );
        Color strokeColor = new Color(
                config.strokeColor().getRed(),
                config.strokeColor().getGreen(),
                config.strokeColor().getBlue(),
                Math.max(0, Math.min(255, (int) (alpha * 255)))
        );

        Font font = createFont();
        Graphics2D g2d = (Graphics2D) graphics.create();
        try {
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);

            int canvasWidth = client.getCanvasWidth();
            int canvasHeight = client.getCanvasHeight();
            float wrappingWidth = canvasWidth - (PADDING * 2);

            List<TextLayout> layouts = createWrappedTextLayouts(currentAffirmation, font, g2d.getFontRenderContext(), wrappingWidth);

            if (layouts.isEmpty()) return null;

            float totalHeight = 0;
            for (TextLayout layout : layouts) {
                totalHeight += layout.getAscent() + layout.getDescent() + layout.getLeading();
            }

            float currentY = PADDING + layouts.get(0).getAscent();

            for (TextLayout layout : layouts) {
                float x = (float)(canvasWidth - layout.getBounds().getWidth()) / 2;

                AffineTransform transform = AffineTransform.getTranslateInstance(x, currentY);
                Shape shape = layout.getOutline(transform);

                g2d.setColor(strokeColor);
                g2d.setStroke(new BasicStroke(config.strokeWidth(), BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
                g2d.draw(shape);

                g2d.setColor(textColor);
                g2d.fill(shape);

                currentY += layout.getAscent() + layout.getDescent() + layout.getLeading();
            }

            return new Dimension(canvasWidth, (int)totalHeight + PADDING * 2);
        } finally {
            g2d.dispose();
        }
    }

    public void setAffirmation(String affirmation) {
        this.currentAffirmation = affirmation;
        this.lastUpdateTime = System.currentTimeMillis();
    }

    private float calculateAlpha(long elapsedTime, int displayDuration, int fadeDuration) {
        if (elapsedTime < fadeDuration) {
            return (float) elapsedTime / fadeDuration;
        }

        if (elapsedTime < displayDuration - fadeDuration) {
            return 1.0f;
        }

        long fadeOutStart = displayDuration - fadeDuration;
        long fadeOutProgress = elapsedTime - fadeOutStart;
        if (fadeOutProgress < fadeDuration) {
            return 1.0f - (float) fadeOutProgress / fadeDuration;
        }

        return 0.0f;
    }
}
package com.affirmations;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import java.awt.Color;

@ConfigGroup("affirmations")
public interface AffirmationsConfig extends Config
{
	@ConfigSection(
			name = "General",
			description = "General settings for affirmations",
			position = 0
	)
	String generalSection = "general";

	@ConfigSection(
			name = "Affirmation Packs",
			description = "Configure which affirmation packs to use",
			position = 1
	)
	String packsSection = "packs";

	@ConfigSection(
			name = "Custom Affirmations",
			description = "Settings for custom affirmations",
			position = 2
	)
	String customSection = "custom";

	@ConfigSection(
			name = "Appearance",
			description = "Settings for the display mode",
			position = 3
	)
	String appearanceSection = "appearance";

	// Affirmation Pack Settings
	@ConfigItem(
			keyName = "useStandardPack",
			name = "Standard Affirmations",
			description = "Enable the standard affirmations pack",
			section = packsSection,
			position = 0
	)
	default boolean useStandardPack()
	{
		return true;
	}

	@ConfigItem(
			keyName = "useOSRSPack",
			name = "OSRS Style Affirmations",
			description = "Enable OSRS themed affirmations",
			section = packsSection,
			position = 1
	)
	default boolean useOSRSPack()
	{
		return true;
	}

	// Custom Affirmations Settings
	@ConfigItem(
			keyName = "customAffirmations",
			name = "Custom Affirmations",
			description = "A list of custom affirmations to display, separated by semicolons",
			section = customSection,
			position = 0
	)
	default String customAffirmations()
	{
		return "";
	}

	@ConfigItem(
			keyName = "useOnlyCustom",
			name = "Use Only Custom",
			description = "If enabled, only custom affirmations will be displayed",
			section = customSection,
			position = 1
	)
	default boolean useOnlyCustom()
	{
		return false;
	}

	// General Settings
	@ConfigItem(
			keyName = "displayDuration",
			name = "Display Ticks",
			description = "How long each affirmation should be displayed (in ticks)",
			section = generalSection,
			position = 0
	)
	default int displayDuration()
	{
		return 15;
	}

	@ConfigItem(
			keyName = "pauseDuration",
			name = "Pause Ticks",
			description = "How long to pause between affirmations (in ticks)",
			section = generalSection,
			position = 1
	)
	default int pauseDuration()
	{
		return 5;
	}

	@ConfigItem(
			keyName = "fadeDuration",
			name = "Fade Ticks",
			description = "How long the fade in/out effect should last (in milliseconds)",
			section = generalSection,
			position = 2
	)
	default int fadeDuration()
	{
		return 4;
	}

	// Display Settings (moved from fullWidth to appearance)
	@ConfigItem(
			keyName = "useFullWidthDisplay",
			name = "Use Full Width Display",
			description = "If enabled, displays affirmations as a large string across the top of the screen",
			section = appearanceSection,
			position = 0
	)
	default boolean useFullWidthDisplay()
	{
		return true;
	}

	@ConfigItem(
			keyName = "textColor",
			name = "Text Colour",
			description = "Colour of the affirmation text",
			section = appearanceSection,
			position = 1
	)
	default Color textColor()
	{
		return Color.WHITE;
	}

	@ConfigItem(
			keyName = "fontFamily",
			name = "Font Family",
			description = "Choose the font family for affirmations",
			section = appearanceSection,
			position = 2
	)
	default FontFamily fontFamily()
	{
		return FontFamily.TIMES;
	}

	@ConfigItem(
			keyName = "fontStyle",
			name = "Font Style",
			description = "Choose the font style for affirmations",
			section = appearanceSection,
			position = 3
	)
	default FontStyle fontStyle()
	{
		return FontStyle.PLAIN;
	}

	@ConfigItem(
			keyName = "fontSize",
			name = "Font Size",
			description = "Font size for the display",
			section = appearanceSection,
			position = 4
	)
	default int fontSize()
	{
		return 45;
	}

	@ConfigItem(
			keyName = "strokeWidth",
			name = "Stroke Width",
			description = "Width of the text outline (0 for no outline)",
			section = appearanceSection,
			position = 5
	)
	default int strokeWidth()
	{
		return 0;
	}

	@ConfigItem(
			keyName = "strokeColor",
			name = "Stroke Colour",
			description = "Colour of the text outline (if stroke width > 0)",
			section = appearanceSection,
			position = 6
	)
	default Color strokeColor()
	{
		return Color.BLACK;
	}

	enum FontStyle
	{
		PLAIN("Plain"),
		BOLD("Bold"),
		ITALIC("Italic"),
		BOLD_ITALIC("Bold Italic");

		private final String name;

		FontStyle(String name)
		{
			this.name = name;
		}

		@Override
		public String toString()
		{
			return name;
		}

		public int toAwtFontStyle()
		{
			switch (this)
			{
				case BOLD:
					return java.awt.Font.BOLD;
				case ITALIC:
					return java.awt.Font.ITALIC;
				case BOLD_ITALIC:
					return java.awt.Font.BOLD | java.awt.Font.ITALIC;
				default:
					return java.awt.Font.PLAIN;
			}
		}
	}

	enum FontFamily
	{
		ARIAL("Arial"),
		HELVETICA("Helvetica"),
		VERDANA("Verdana"),
		TAHOMA("Tahoma"),
		TIMES("Times New Roman"),
		GEORGIA("Georgia"),
		TREBUCHET("Trebuchet MS"),
		COURIER("Courier New"),
		COMICSANS("Comic Sans"),
		IMPACT("Impact");

		private final String fontName;

		FontFamily(String fontName)
		{
			this.fontName = fontName;
		}

		@Override
		public String toString()
		{
			return fontName;
		}

		public String getFontName()
		{
			return fontName;
		}
	}
}
package com.affirmations;

import java.util.Arrays;
import java.util.List;

public class StandardAffirmations {
    public static final List<String> AFFIRMATIONS = Arrays.asList(
            "Asking for help is a sign of self-respect and self-awareness",
            "Changing my mind is a strength, not a weakness",
            "Every decision I make is supported by my whole and inarguable experience",
            "I affirm and encourage others, as I do myself",
            "I alone hold the truth of who I am",
            "I am allowed to ask for what I want and what I need",
            "I am allowed to feel good",
            "I am capable of balancing ease and effort in my life",
            "I am complete as I am, others simply support me",
            "I am content and free from pain",
            "I am doing the work that works for me",
            "I am good and getting better",
            "I am growing and I am going at my own pace",
            "I am held and supported by those who love me",
            "I am in charge of how I feel and I choose to feel happy",
            "I am listening and open to the messages the universe has to offer today",
            "I am loved and worthy",
            "I am more than my circumstances dictate",
            "I am open to healing",
            "I am optimistic because today is a new day",
            "I am peaceful and whole",
            "I am proof enough of who I am and what I deserve",
            "I am responsible for myself, and I start there",
            "I am safe and surrounded by love and support",
            "I am still learning so it's okay to make mistakes",
            "I am understood and my perspective is important",
            "I am valued and helpful",
            "I am well-rested and excited for the day",
            "I am worthy of investing in myself",
            "I belong here, and I deserve to take up space",
            "I breathe in healing, I exhale the painful things that burden my heart",
            "I breathe in trust, I exhale doubt",
            "I can be soft in my heart and firm in my boundaries",
            "I can control how I respond to things that are confronting",
            "I can hold two opposing feelings at once, it means I am processing",
            "I celebrate the good qualities in others and myself",
            "I deserve an affirming touch on my own terms",
            "I deserve information and I deserve moments of silence, too",
            "I deserve self-respect and a clean space",
            "I do all things in love",
            "I do not linger in dark places; there is help for me here",
            "I do not pretend to be anyone or anything other than who I am",
            "I do not rise and fall for another",
            "I do not rush through my life, I temper speed with stillness",
            "I embrace change seamlessly and rise to the new opportunity it presents",
            "I embrace the questions in my heart and welcome the answers in their own time",
            "I grow towards my interests, like a plant reaching for the sun",
            "I have come farther than I would have ever thought possible, and I'm learning along the way",
            "I have everything I need to succeed",
            "I hold community for others, and am held in community by others",
            "I hold wisdom beyond knowledge",
            "I invite abundance and a generous heart",
            "I invite art and music into my life",
            "I leave room in my life for spontaneity",
            "I let go of the things that sit achingly out of reach",
            "I look forward to tomorrow and the opportunities that await me",
            "I love that I love what I love",
            "I make decisions based on a good gut, I make changes based on a growing heart",
            "I make time to experience grief and sadness when necessary",
            "I nourish myself with kind words and joyful foods",
            "I practice gratitude for all that I have, and all that is yet to come",
            "I release the fears that do not serve me",
            "I respect the cycle of the seasons",
            "I seek out mystery in the ordinary",
            "I strive for joy, not for perfection",
            "I tell the truth about who I am and what I need from others",
            "I uplift my joy and the joy of others",
            "I welcome the wisdom that comes with growing older",
            "I welcome what is, I welcome what comes",
            "I will allow myself to evolve",
            "Letting go creates space for opportunities to come",
            "My body is beautiful in this moment and at its current size",
            "My body is worthy of being cared for and adorned in beautiful garments",
            "My feelings deserve names, deserve recognition, deserve to be felt",
            "My heart is open to helpfulness from myself and from others",
            "My heart knows its own way",
            "My life is not a race or competition",
            "My perspective is unique and important",
            "My pleasure does not require someone else's pain",
            "My sensitivity is beautiful, and my feelings and emotions are valid",
            "My weirdness is wonderful",
            "Saying 'no' is an act of self-affirmation, too",
            "Sometimes the work is resting",
            "There is growth in stillness",
            "There is peace in changing your mind when it is done in love",
            "There is poetry in everything, if I look for it",
            "There is room for me at the table",
            "There is something in this world that only I can do. That is why I am here",
            "There is strength in quiet, there is vulnerability in being loud",
            "Today I celebrate that I am younger than I'm ever going to be",
            "Today is an opportunity to grow and learn",
            "When I feel fear, I feed trust",
            "When I focus on my reason for being, I am infinitely brave",
            "When I forgive myself, I free myself",
            "When I release shame, I move into myself more beautifully",
            "When I root into the earth, the earth rises to support me",
            "When I speak my needs, I receive them abundantly",
            "When I talk to myself as I would a friend, I see all my best qualities and I allow myself to shine",
            "Words may shape me, but they do not make me. I am here already"
    );
}
package com.affirmations;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.events.ConfigChanged;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

@Slf4j
@PluginDescriptor(
		name = "Affirmations"
)
public class AffirmationsPlugin extends Plugin {
	private static final String CONFIG_GROUP = "affirmations";

	private static final List<String> STANDARD_AFFIRMATIONS = StandardAffirmations.AFFIRMATIONS;

	private static final List<String> OSRS_AFFIRMATIONS = OSRSAffirmations.AFFIRMATIONS;

	@Inject
	private Client client;

	@Inject
	private AffirmationsConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private AffirmationsPanelOverlay panelOverlay;

	@Inject
	private AffirmationsFullWidthOverlay fullWidthOverlay;

	private List<String> activeAffirmations;
	private Random random = new Random();
	private int tickCounter = 0;
	private boolean isPaused = false;
	private int pauseTickCounter = 0;

	@Override
	protected void startUp() {
		updateAffirmationsList();
		overlayManager.add(panelOverlay);
		overlayManager.add(fullWidthOverlay);
		updateAffirmation();
		updateAffirmationsList();
	}

	@Override
	protected void shutDown() {
		overlayManager.remove(panelOverlay);
		overlayManager.remove(fullWidthOverlay);
	}

	@Subscribe
	public void onConfigChanged(ConfigChanged event) {
		if (!event.getGroup().equals(CONFIG_GROUP)) {
			return;
		}

		// List of keys that should trigger an affirmations list update
		switch (event.getKey()) {
			case "customAffirmations":
			case "useOnlyCustom":
			case "useStandardPack":
			case "useOSRSPack":
				updateAffirmationsList();
				// Update the current affirmation immediately
				tickCounter = config.displayDuration();
				break;
		}
	}

	private void updateAffirmationsList() {
		activeAffirmations = new ArrayList<>();

		// Add custom affirmations if enabled
		if (config.useOnlyCustom()) {
			String customAffirmations = config.customAffirmations().trim();
			if (!customAffirmations.isEmpty()) {
				activeAffirmations.addAll(Arrays.asList(customAffirmations.split(";")));
			}
			return;
		}

		// Add standard affirmations if enabled
		if (config.useStandardPack()) {
			activeAffirmations.addAll(STANDARD_AFFIRMATIONS);
		}

		// Add OSRS affirmations if enabled
		if (config.useOSRSPack()) {
			activeAffirmations.addAll(OSRS_AFFIRMATIONS);
		}

		// Add custom affirmations if any exist
		String customAffirmations = config.customAffirmations().trim();
		if (!customAffirmations.isEmpty()) {
			activeAffirmations.addAll(Arrays.asList(customAffirmations.split(";")));
		}

		// Remove any empty strings that might have been created by extra semicolons
		activeAffirmations.removeIf(String::isEmpty);
	}

	@Subscribe
	public void onGameTick(GameTick event) {
		if (activeAffirmations.isEmpty()) {
			clearAffirmation();
			return;
		}

		if (isPaused) {
			pauseTickCounter++;
			if (pauseTickCounter >= config.pauseDuration()) {
				isPaused = false;
				pauseTickCounter = 0;
				updateAffirmation();
			}
		} else {
			tickCounter++;
			if (tickCounter >= config.displayDuration()) {
				tickCounter = 0;

				if (config.pauseDuration() > 0 && config.useFullWidthDisplay()) {
					clearAffirmation();
					isPaused = true;
				} else {
					updateAffirmation();
				}
			}
		}
	}

	private void updateAffirmation() {
		if (activeAffirmations.isEmpty()) {
			clearAffirmation();
			return;
		}
		String newAffirmation = activeAffirmations.get(random.nextInt(activeAffirmations.size()));
		if (config.useFullWidthDisplay()) {
			fullWidthOverlay.setAffirmation(newAffirmation);
		} else {
			panelOverlay.setAffirmation(newAffirmation);
		}
	}

	private void clearAffirmation() {
		if (config.useFullWidthDisplay()) {
			fullWidthOverlay.setAffirmation("");
		} else {
			panelOverlay.setAffirmation("");
		}
	}

	@Provides
	AffirmationsConfig provideConfig(ConfigManager configManager) {
		return configManager.getConfig(AffirmationsConfig.class);
	}
}
