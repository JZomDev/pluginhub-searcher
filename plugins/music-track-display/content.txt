package com.show_music;

import com.show_music.config.DisplayMode;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("musicOverlay")
public interface ShowMusicConfig  extends Config {
    @ConfigItem(
            keyName = "muteHide",
            name = "Hide on Mute",
            description = "If the music volume is muted, the text/overlay will be hidden.",
            position = 1
    )
    default boolean muteHide()
    {
        return false;
    }

    @ConfigItem(
            keyName = "displayToggle",
            name = "Display",
            description = "Toggles display between overlay and chat box",
            position = 2
    )
    default DisplayMode displayToggle(){
        return DisplayMode.Overlay;
    }
}

package com.show_music.config;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public enum DisplayMode {
    Overlay("Overlay"),
    Text("Text");

    private final String name;

    @Override
    public String toString()
    {
        return name;
    }
}

package com.show_music;

import javax.inject.Inject;

import com.google.inject.Provides;
import com.show_music.config.DisplayMode;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.events.*;
import net.runelite.api.widgets.Widget;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;

import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.ui.overlay.OverlayManager;

import java.util.Objects;

@Slf4j
@PluginDescriptor(
	name = "Music Track Display"
)
public class ShowMusicPlugin extends Plugin
{
	private static final int MUSIC_TRACK_WIDGET_ID = 15663113;
	private String lastTrack = "";

	@Inject
	private Client client;

	@Inject
	private OverlayManager overlayManager;
	@Inject
	private ShowMusicOverlay overlay;
	@Inject
	private ConfigManager configManager;
	@Inject
	private ChatMessageManager chatMessageManager;

	@Provides
	ShowMusicConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ShowMusicConfig.class);
	}
	@Override
	protected void startUp() throws Exception
	{
		if(provideConfig(configManager).displayToggle() == DisplayMode.Overlay) overlayManager.add(overlay);
		lastTrack = ""; // Reset on plugin start
	}

	@Override
	protected void shutDown() throws Exception
	{
        overlayManager.removeIf(o -> o instanceof ShowMusicOverlay); // remove if there is an instance
		lastTrack = ""; // Clean up on plugin stop
	}

    @Subscribe
    public void onConfigChanged(ConfigChanged event){
        if(!event.getGroup().equals("musicOverlay") || !event.getKey().equals("displayToggle")) return; // nothing to do if it's not a displayToggle change for our plugin
        overlayManager.removeIf(o -> o instanceof ShowMusicOverlay); // remove if there is already an instance of ShowMusicOverlay
        if(Objects.equals(event.getNewValue(), "Overlay")) overlayManager.add(overlay); // if going from Text > Overlay add to overlayManager
    }

	@Subscribe
	public void onGameTick(GameTick event) {

		if(provideConfig(configManager).displayToggle() == DisplayMode.Overlay || (client.getMusicVolume() == 0 && provideConfig(configManager).muteHide())) return;
		Widget musicWidget = client.getWidget(MUSIC_TRACK_WIDGET_ID);
		if (musicWidget != null) {
			String currentTrack = musicWidget.getText();
			if (currentTrack != null && !currentTrack.equals(lastTrack)) {
				lastTrack = currentTrack;
				chatMessageManager.queue(QueuedMessage.builder()
						.type(net.runelite.api.ChatMessageType.GAMEMESSAGE)
						.runeLiteFormattedMessage("Now playing: " + currentTrack)
						.build());
			}
		}
	}
}

package com.show_music;

import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.inject.Inject;
import static net.runelite.api.MenuAction.RUNELITE_OVERLAY_CONFIG;
import static net.runelite.client.ui.overlay.OverlayManager.OPTION_CONFIGURE;

import com.show_music.config.DisplayMode;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.TitleComponent;

class ShowMusicOverlay extends OverlayPanel
{
    private static final int MUSIC_TRACK_WIDGET_ID = 15663113;
    private final Client client;
    private final ShowMusicConfig config;

    @Inject
    private ShowMusicOverlay(ShowMusicPlugin plugin, ShowMusicConfig config, Client client)
    {
        super(plugin);
        this.client = client;
        setPosition(OverlayPosition.TOP_LEFT);
        setMovable(true);
        setResizable(false);
        setSnappable(true);
        this.config = config;
        addMenuEntry(RUNELITE_OVERLAY_CONFIG, OPTION_CONFIGURE, "Music Overlay");
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        if(config.displayToggle() != DisplayMode.Overlay) return null;
        var musicWidget = client.getWidget(MUSIC_TRACK_WIDGET_ID);
        if(musicWidget == null) return null;
        panelComponent.getChildren().clear(); // reduce stacking
        final var currentTrackString = "Current Track: " + musicWidget.getText();
        if(client.getMusicVolume() == 0 && config.muteHide()) return null;
        panelComponent.getChildren().add((TitleComponent.builder())
                .text(currentTrackString)
                .build());
        panelComponent.setPreferredSize(new Dimension(
                graphics.getFontMetrics().stringWidth(currentTrackString) + 10,
                0));
        return super.render(graphics);
    }
}
package com.show_music;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ShowMusicTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ShowMusicPlugin.class);
		RuneLite.main(args);
	}
}
