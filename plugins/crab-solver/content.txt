package thestonedturtle.crabsolver;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class CrabSolverPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(CrabSolverPlugin.class);
		RuneLite.main(args);
	}
}

/*
 * Copyright (c) 2020, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.crabsolver;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;

@ConfigGroup("crabsolver")
public interface CrabSolverConfig extends Config
{
	@ConfigItem(
		position = 0,
		keyName = "displayColor",
		name = "Display Orb Color",
		description = "Configures whether to display the orb color needed to solve the crystal"
	)
	default boolean displayColor()
	{
		return true;
	}

	@ConfigItem(
		position = 1,
		keyName = "displayStyle",
		name = "Display Combat Style",
		description = "Configures whether to display the combat style needed to solve the crystal"
	)
	default boolean displayStyle()
	{
		return true;
	}

	@ConfigSection(
		name = "Ground Markers",
		description = "The settings for controlling how ground marker are displayed",
		position = 2
	)
	String tileSection = "tileSection";

	@ConfigItem(
		position = 0,
		keyName = "markTiles",
		name = "Mark  Tiles",
		description = "Configures whether to mark the tiles the crabs need to be on to solve the puzzle",
		section = tileSection
	)
	default boolean markTiles()
	{
		return true;
	}

	@ConfigItem(
		position = 1,
		keyName = "borderWidth",
		name = "Border Width",
		description = "Width of the marked tile border",
		section = tileSection
	)
	default double borderWidth()
	{
		return 2;
	}

	@ConfigItem(
		position = 2,
		keyName = "fillOpacity",
		name = "Fill Opacity",
		description = "Opacity of the tile fill color",
		section = tileSection
	)
	default int fillOpacity()
	{
		return 50;
	}
}

/*
 * Copyright (c) 2020, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.crabsolver;

import com.google.common.base.Strings;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Stroke;
import java.awt.image.BufferedImage;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.Perspective;
import net.runelite.api.Point;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.game.SkillIconManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;

@Slf4j
public class CrabSolverOverlay extends Overlay
{
	// Must be within this many tiles for the overlay to render
	private static final int MAX_RENDER_DISTANCE = 32;

	private final CrabSolverPlugin plugin;
	private final CrabSolverConfig config;
	private final SkillIconManager iconManager;
	private final Client client;

	@Inject
	private CrabSolverOverlay(final CrabSolverPlugin plugin, final CrabSolverConfig config,
							final SkillIconManager iconManager, final Client client)
	{
		this.plugin = plugin;
		this.config = config;
		this.iconManager = iconManager;
		this.client = client;

		setPosition(OverlayPosition.DYNAMIC);
		setLayer(OverlayLayer.ABOVE_WIDGETS);
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		if (client.getLocalPlayer() == null)
		{
			return null;
		}

		final WorldPoint playerPosition = client.getLocalPlayer().getWorldLocation();
		plugin.getCrystalMap().forEach((crabCrystal, gameObject) ->
		{
			if (playerPosition.distanceTo(gameObject.getWorldLocation()) > MAX_RENDER_DISTANCE)
			{
				return;
			}

			final Point point = Perspective.localToCanvas(client, gameObject.getLocalLocation(), client.getPlane(), 0);
			if (point == null)
			{
				return;
			}

			if (config.displayColor())
			{
				graphics.setColor(crabCrystal.getSolutionColor());
				graphics.fillOval(point.getX() - 11, point.getY() - 11, 22, 22);
			}

			if (config.displayStyle() && crabCrystal.getSolutionSkill() != null)
			{
				final BufferedImage icon = iconManager.getSkillImage(crabCrystal.getSolutionSkill(), true);
				if (icon == null)
				{
					return;
				}

				OverlayUtil.renderImageLocation(client, graphics, gameObject.getLocalLocation(), icon, 0);
			}
		});

		if (config.markTiles())
		{
			final Stroke borderStroke = new BasicStroke((float) config.borderWidth());
			for (final CrabTile tile : plugin.getTiles())
			{
				for (final WorldPoint p : tile.getWorldPoints())
				{
					if (p.getPlane() != client.getPlane())
					{
						continue;
					}

					if (playerPosition.distanceTo(p) > MAX_RENDER_DISTANCE)
					{
						continue;
					}

					drawTile(graphics, p, tile, borderStroke);
				}
			}
		}

		return null;
	}

	private void drawTile(Graphics2D graphics, WorldPoint p, CrabTile tile, Stroke borderStroke)
	{
		LocalPoint lp = LocalPoint.fromWorld(client, p);
		if (lp == null)
		{
			return;
		}

		Polygon poly = Perspective.getCanvasTilePoly(client, lp);
		if (poly != null)
		{
			OverlayUtil.renderPolygon(graphics, poly, tile.getColor(), new Color(0, 0, 0, config.fillOpacity()), borderStroke);
		}

		if (!Strings.isNullOrEmpty(tile.getLabel()))
		{
			Point canvasTextLocation = Perspective.getCanvasTextLocation(client, graphics, lp, tile.getLabel(), 0);
			if (canvasTextLocation != null)
			{
				OverlayUtil.renderTextLocation(graphics, canvasTextLocation, tile.getLabel(), tile.getColor());
			}
		}
	}
}

/*
 * Copyright (c) 2020, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.crabsolver;

import com.google.common.collect.ImmutableMap;
import java.awt.Color;
import javax.annotation.Nullable;
import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.api.ObjectID;
import net.runelite.api.Skill;

@AllArgsConstructor
@Getter
public enum CrabCrystal
{
	BLACK(ObjectID.BLACK_CRYSTAL, new Color(255, 255, 255, 122), null),
	YELLOW(ObjectID.YELLOW_CRYSTAL, new Color(0, 0, 255, 122), Skill.MAGIC),
	CYAN(ObjectID.CYAN_CRYSTAL, new Color(255, 0, 0, 122), Skill.ATTACK),
	MAGENTA(ObjectID.MAGENTA_CRYSTAL, new Color(0, 255, 0, 122), Skill.RANGED),
	;

	private final int objectID;
	private final Color solutionColor;
	private final Skill solutionSkill;

	private static final ImmutableMap<Integer, CrabCrystal> OBJECT_ID_MAP;
	static
	{
		final ImmutableMap.Builder<Integer, CrabCrystal> builder = ImmutableMap.builder();
		for (final CrabCrystal crystal : values())
		{
			builder.put(crystal.getObjectID(), crystal);
		}
		OBJECT_ID_MAP = builder.build();
	}

	@Nullable
	public static CrabCrystal getByObjectID(final int id)
	{
		return OBJECT_ID_MAP.get(id);
	}
}

/*
 * Copyright (c) 2020, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.crabsolver;

import com.google.inject.Provides;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import javax.inject.Inject;
import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.api.GameObject;
import net.runelite.api.GameState;
import net.runelite.api.events.GameObjectDespawned;
import net.runelite.api.events.GameObjectSpawned;
import net.runelite.api.events.GameStateChanged;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@PluginDescriptor(
	name = "Crab Solver"
)
public class CrabSolverPlugin extends Plugin
{
	@Inject
	private CrabSolverOverlay overlay;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private CrabSolverConfig config;

	@Inject
	private Client client;

	@Provides
	CrabSolverConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(CrabSolverConfig.class);
	}

	@Getter
	private final Map<CrabCrystal, GameObject> crystalMap = new HashMap<>();

	@Getter
	private final Collection<CrabTile> tiles = new ArrayList<>();

	@Override
	public void startUp()
	{
		overlayManager.add(overlay);
		loadTiles();
	}

	@Override
	public void shutDown()
	{
		crystalMap.clear();
		overlayManager.remove(overlay);
		tiles.clear();
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged c)
	{
		if (c.getGameState() == GameState.LOADING)
		{
			crystalMap.clear();
		}
		else if (c.getGameState() == GameState.LOGGED_IN)
		{
			loadTiles();
		}
	}

	@Subscribe
	public void onGameObjectSpawned(GameObjectSpawned e)
	{
		final CrabCrystal crystal = CrabCrystal.getByObjectID(e.getGameObject().getId());
		if (crystal == null)
		{
			return;
		}

		crystalMap.put(crystal, e.getGameObject());
	}

	@Subscribe
	public void onGameObjectDespawned(GameObjectDespawned e)
	{
		final CrabCrystal crystal = CrabCrystal.getByObjectID(e.getGameObject().getId());
		if (crystal == null)
		{
			return;
		}

		crystalMap.remove(crystal);
	}

	private void loadTiles()
	{
		tiles.clear();

		final int[] regions = client.getMapRegions();
		if (regions == null)
		{
			return;
		}

		for (int region : regions)
		{
			final Collection<CrabTile> regionTiles = CrabTile.getByRegion(region);
			regionTiles.forEach(tile -> tile.setWorldPoints(client));
			tiles.addAll(regionTiles);
		}
	}
}

/*
 * Copyright (c) 2022, TrevorMDev
 * Copyright (c) 2023, TheStonedTurtle <https://github.com/TheStonedTurtle>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package thestonedturtle.crabsolver;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Collection;
import lombok.Getter;
import net.runelite.api.Client;
import net.runelite.api.coords.WorldPoint;

public enum CrabTile
{
	// This information came from the TilePacks plugin: https://github.com/TrevorMDev/tile-packs/tree/master
	// Region 1
	R1_ANCHOR_1(Color.YELLOW, "STUN", 13395, 7, 46, 2),
	R1_ANCHOR_2(Color.YELLOW, "STUN", 13395, 8, 48, 2),
	R1_PASSIVE(CrabCrystal.BLACK.getSolutionColor(), "4", 13395, 14, 47, 2),
	R1_MELEE_CLOSE(CrabCrystal.CYAN.getSolutionColor(), "2", 13395, 10, 46, 2),
	R1_MELEE_STUN(CrabCrystal.CYAN.getSolutionColor(), "STUN/MELEE", 13395, 11, 56, 2),
	R1_RANGE(CrabCrystal.MAGENTA.getSolutionColor(), "1/4", 13395, 11, 46, 2),
	R1_MAGE(CrabCrystal.YELLOW.getSolutionColor(), "3", 13395, 10, 47, 2),

	// Region 2
	R2_ANCHOR_1(Color.YELLOW, "STUN", 13139, 25, 41, 2),
	R2_ANCHOR_2(Color.YELLOW, "STUN", 13139, 24, 39, 2),
	R2_PASSIVE(CrabCrystal.BLACK.getSolutionColor(), "2", 13139, 18, 40, 2),
	R2_MELEE(CrabCrystal.CYAN.getSolutionColor(), "1", 13139, 22, 40, 2),
	R2_RANGE(CrabCrystal.MAGENTA.getSolutionColor(), "3", 13139, 17, 40, 2),
	R2_MAGE(CrabCrystal.YELLOW.getSolutionColor(), "4", 13139, 14, 40, 2),
	;

	@Getter
	private final Color color;
	@Getter
	private final String label;
	private final int region;
	private final WorldPoint worldPoint;

	private final Collection<WorldPoint> worldPoints = new ArrayList<>();

	CrabTile(Color c, String l, int region, int x, int y, int z)
	{
		this.color = c;
		this.label = l;
		this.region = region;
		this.worldPoint = WorldPoint.fromRegion(region, x, y, z);
	}

	public void setWorldPoints(Client c)
	{
		worldPoints.clear();
		worldPoints.addAll(WorldPoint.toLocalInstance(c, this.worldPoint));
	}

	public Collection<WorldPoint> getWorldPoints()
	{
		return this.worldPoints;
	}

	private static final Multimap<Integer, CrabTile> BY_REGION = ArrayListMultimap.create();
	static
	{
		for (final CrabTile t : values())
		{
			BY_REGION.put(t.region, t);
		}
	}

	public static Collection<CrabTile> getByRegion(final int region)
	{
		return BY_REGION.get(region);
	}
}

