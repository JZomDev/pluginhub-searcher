/*
 * Copyright (c) 2018, Tomas Slusny <slusnucky@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.killcountviewer;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Range;

import java.awt.*;

@ConfigGroup(KillCountViewerConfig.GROUP)
public interface KillCountViewerConfig extends Config
{
	String GROUP = "killcountviewer";

	@ConfigItem(
		keyName = "lastSeenVersion",
		name = "Last Seen Version",
		description = "Internal use for update notifications",
		hidden = true
	)
	default String lastSeenVersion() { return "1.1.1"; }

	@ConfigItem(
		position = 0,
		keyName = "killcountPosition",
		name = "Kill count position",
		description = "Configures the position of drawn player names, or if they should be disabled."
	)
	default PlayerNameLocation killcountPosition()
	{
		return PlayerNameLocation.ABOVE_HEAD;
	}

	@ConfigItem(
			position = 1,
			keyName = "killcountColor",
			name = "Kill count color",
			description = "Color of the kill count text."
	)
	default Color killCountColor()
	{
		return Color.RED;
	}

	enum IconSetting
	{
		DISABLED,
		RANK,
		ICON,
		BOTH
	}

	@ConfigItem(
		position = 2,
		keyName = "bossRankIcon",
		name = "Boss kill count icon",
		description = "Show rank or boss icon next to kill count."
	)
	default IconSetting bossRankIcon()
	{
		return IconSetting.RANK;
	}

	@ConfigItem(
		position = 2,
		keyName = "levelRankIcon",
		name = "Level icon",
		description = "Show rank or skill icon next to kill count."
	)
	default IconSetting levelRankIcon()
	{
		return IconSetting.RANK;
	}

	@ConfigItem(
		position = 4,
		keyName = "lookupCooldown",
		name = "Lookup cooldown",
		description = "Ticks between each kill count lookup request, to avoid spamming API."
	)
	@Range(
		min = 1,
		max = 20
	)
	default int lookupCooldown()
	{
		return 10;
	}

	@ConfigItem(
		position = 5,
		keyName = "cacheDuration",
		name = "Cache duration",
		description = "Duration in minutes to cache kill count data."
	)
	@Range(
		min = 10,
		max = 360
	)
	default int cacheDuration()
	{
		return 30;
	}

	@ConfigItem(
		position = 6,
		keyName = "showLocalPlayerKc",
		name = "Show own kill count",
		description = "Configures whether to show the player's own kill count."
	)
	default boolean showLocalPlayerKc()
	{
		return true;
	}

	@ConfigItem(
		position = 7,
		keyName = "showOtherPlayerKc",
		name = "Show others kill count",
		description = "Configures whether to show other players' kill count."
	)
	default boolean showOtherPlayerKc()
	{
		return true;
	}

	@ConfigSection(
		name = "Boss options",
		description = "Toggle which bosses to show kill count for (Always will not show everywhere in game, just while in the boss fight as well as the lobby).",
		position = 10
	)
	String BOSS_SECTION = "BossSection";

	@ConfigSection(
		name = "Raid options",
		description = "Toggle which raids to show kill count for and type of kill count (only visible in lobby).",
		position = 20
	)
	String RAID_SECTION = "RaidSection";

	@ConfigSection(
		name = "Activity options",
		description = "Toggle which activities to show kill count for (Always will not show everywhere in game, just while in the activity as well as the lobby).",
		position = 30
	)
	String ACTIVITY_SECTION = "ActivitySection";

	@ConfigSection(
		name = "Skill options",
		description = "Toggle which skills to show level for.",
		position = 40
	)
	String SKILL_SECTION = "SkillSection";

	enum HighlightSetting
	{
		DISABLED,
		LOBBY,
	}

	enum HighlightAlwaysSetting
	{
		DISABLED,
		LOBBY,
		ALWAYS,
	}

	enum HighlightRaidSetting
	{
		DISABLED,
		NORMAL,
		HARD,
	}

	enum HighlightSkillSetting
	{
		DISABLED,
		ENABLED,
	}

	/*
	 * Boss options
	 */

	@ConfigItem(
		position = 0,
		keyName = "bossEnabled",
		name = "BOSSES ENABLED",
		description = "Configures whether raids are enabled or disabled.",
		section = BOSS_SECTION
	)
	default boolean bossEnabled()
	{
		return true;
	}

	@ConfigItem(
		hidden = true,
		position = 1,
		keyName = "bossPhosanisNightmare",
		name = "Phosani's Nightmare",
		description = "Configures whether kill count is displayed within Phosani's Nightmare.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledPhosanisNightmare()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossScurrius",
		name = "Scurrius",
		description = "Configures whether kill count is displayed within Scurrius.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledScurrius()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossCorruptedGauntlet",
		name = "Corrupted Gauntlet",
		description = "Configures whether kill count is displayed within the Corrupted Gauntlet.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledCorruptedGauntlet()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossRoyalTitans",
		name = "Royal Titans",
		description = "Configures whether kill count is displayed within Royal Titans.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledRoyalTitans()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossTzKalZuk",
		name = "TzKal-Zuk",
		description = "Configures whether kill count is displayed within TzKal-Zuk.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledTzKalZuk()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossTzTokJad",
		name = "TzTok-Jad",
		description = "Configures whether kill count is displayed within TzTok-Jad.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledTzTokJad()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossVardorvis",
		name = "Vardorvis",
		description = "Configures whether kill count is displayed within Vardorvis.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledVardorvis()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossVorkath",
		name = "Vorkath",
		description = "Configures whether kill count is displayed within Vorkath.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledVorkath()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossWintertodt",
		name = "Wintertodt",
		description = "Configures whether kill count is displayed within Wintertodt.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledWintertodt()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossYama",
		name = "Yama",
		description = "Configures whether kill count is displayed within Yama.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledYama()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossZalcano",
		name = "Zalcano",
		description = "Configures whether kill count is displayed within Zalcano.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledZalcano()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossZulrah",
		name = "Zulrah",
		description = "Configures whether kill count is displayed within Zulrah.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledZulrah()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossAbyssalSire",
		name = "Abyssal Sire",
		description = "Configures whether kill count is displayed within Abyssal Sire.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledAbyssalSire()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossAlchemicalHydra",
		name = "Alchemical Hydra",
		description = "Configures whether kill count is displayed within Alchemical Hydra.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledAlchemicalHydra()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossAmoxliatl",
		name = "Amoxliatl",
		description = "Configures whether kill count is displayed within Amoxliatl.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledAmoxliatl()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossAraxxor",
		name = "Araxxor",
		description = "Configures whether kill count is displayed within Araxxor.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledAraxxor()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossArtio",
		name = "Artio",
		description = "Configures whether kill count is displayed within Artio.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledArtio()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossBarrowsChests",
		name = "Barrows Chests",
		description = "Configures whether kill count is displayed within Barrows Chests.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledBarrowsChests()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossBryophyta",
		name = "Bryophyta",
		description = "Configures whether kill count is displayed within Bryophyta.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledBryophyta()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossCallisto",
		name = "Callisto",
		description = "Configures whether kill count is displayed within Callisto.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledCallisto()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossCalvarion",
		name = "Calvarion",
		description = "Configures whether kill count is displayed within Calvarion.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledCalvarion()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossCerberus",
		name = "Cerberus",
		description = "Configures whether kill count is displayed within Cerberus.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledCerberus()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossChaosElemental",
		name = "Chaos Elemental",
		description = "Configures whether kill count is displayed within Chaos Elemental.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledChaosElemental()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossChaosFanatic",
		name = "Chaos Fanatic",
		description = "Configures whether kill count is displayed within Chaos Fanatic.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledChaosFanatic()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossCommanderZilyana",
		name = "Commander Zilyana",
		description = "Configures whether kill count is displayed within Commander Zilyana.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledCommanderZilyana()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossCorporealBeast",
		name = "Corporeal Beast",
		description = "Configures whether kill count is displayed within Corporeal Beast.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledCorporealBeast()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossCrazyArchaeologist",
		name = "Crazy Archaeologist",
		description = "Configures whether kill count is displayed within Crazy Archaeologist.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledCrazyArchaeologist()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		hidden = true,
		position = 1,
		keyName = "bossDagannothPrime",
		name = "Dagannoth Prime",
		description = "Configures whether kill count is displayed within Dagannoth Prime.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledDagannothPrime()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		hidden = true,
		position = 1,
		keyName = "bossDagannothRex",
		name = "Dagannoth Rex",
		description = "Configures whether kill count is displayed within Dagannoth Rex.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledDagannothRex()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		hidden = true,
		position = 1,
		keyName = "bossDagannothSupreme",
		name = "Dagannoth Supreme",
		description = "Configures whether kill count is displayed within Dagannoth Supreme.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledDagannothSupreme()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossDerangedArchaeologist",
		name = "Deranged Archaeologist",
		description = "Configures whether kill count is displayed within Deranged Archaeologist.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledDerangedArchaeologist()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		hidden = true,
		position = 1,
		keyName = "bossDukeSucellus",
		name = "Duke Sucellus",
		description = "Configures whether kill count is displayed within Duke Sucellus.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledDukeSucellus()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossGeneralGraardor",
		name = "General Graardor",
		description = "Configures whether kill count is displayed within General Graardor.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledGeneralGraardor()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossGiantMole",
		name = "Giant Mole",
		description = "Configures whether kill count is displayed within Giant Mole.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledGiantMole()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossGrotesqueGuardians",
		name = "Grotesque Guardians",
		description = "Configures whether kill count is displayed within Grotesque Guardians.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledGrotesqueGuardians()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossHespori",
		name = "Hespori",
		description = "Configures whether kill count is displayed within Hespori.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledHespori()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossKalphiteQueen",
		name = "Kalphite Queen",
		description = "Configures whether kill count is displayed within Kalphite Queen.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledKalphiteQueen()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossKingBlackDragon",
		name = "King Black Dragon",
		description = "Configures whether kill count is displayed within King Black Dragon.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledKingBlackDragon()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossKraken",
		name = "Kraken",
		description = "Configures whether kill count is displayed within Kraken.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledKraken()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossKreeArra",
		name = "Kree'arra",
		description = "Configures whether kill count is displayed within Kree'arra.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledKreeArra()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossKrilTsutsaroth",
		name = "K'ril Tsutsaroth",
		description = "Configures whether kill count is displayed within K'ril Tsutsaroth.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledKrilTsutsaroth()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossLunarChests",
		name = "Lunar Chests",
		description = "Configures whether kill count is displayed within Lunar Chests.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledLunarChests()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossMimic",
		name = "Mimic",
		description = "Configures whether kill count is displayed within Mimic.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledMimic()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		hidden = true,
		position = 1,
		keyName = "bossNex",
		name = "Nex",
		description = "Configures whether kill count is displayed within Nex.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledNex()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossNightmare",
		name = "Nightmare",
		description = "Configures whether kill count is displayed within Nightmare.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledNightmare()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossObor",
		name = "Obor",
		description = "Configures whether kill count is displayed within Obor.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledObor()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossPhantomMuspah",
		name = "Phantom Muspah",
		description = "Configures whether kill count is displayed within Phantom Muspah.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledPhantomMuspah()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossSarachnis",
		name = "Sarachnis",
		description = "Configures whether kill count is displayed within Sarachnis.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledSarachnis()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossScorpia",
		name = "Scorpia",
		description = "Configures whether kill count is displayed within Scorpia.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledScorpia()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossSkotizo",
		name = "Skotizo",
		description = "Configures whether kill count is displayed within Skotizo.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledSkotizo()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossSolHeredit",
		name = "Sol Heredit",
		description = "Configures whether kill count is displayed within Sol Heredit.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledSolHeredit()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossSpindel",
		name = "Spindel",
		description = "Configures whether kill count is displayed within Spindel.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledSpindel()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossTempoross",
		name = "Tempoross",
		description = "Configures whether kill count is displayed within Tempoross.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledTempoross()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossTheHueycoatl",
		name = "Hueycoatl",
		description = "Configures whether kill count is displayed within The Hueycoatl.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledTheHueycoatl()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		hidden = true,
		position = 1,
		keyName = "bossTheLeviathan",
		name = "Leviathan",
		description = "Configures whether kill count is displayed within The Leviathan.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledTheLeviathan()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		hidden = true,
		position = 1,
		keyName = "bossTheWhisperer",
		name = "Whisperer",
		description = "Configures whether kill count is displayed within The Whisperer.",
		section = BOSS_SECTION
	)
	default HighlightSetting bossEnabledTheWhisperer()
	{
		return HighlightSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossThermonuclearSmokeDevil",
		name = "Thermonuclear Smoke Devil",
		description = "Configures whether kill count is displayed within Thermonuclear Smoke Devil.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledThermonuclearSmokeDevil()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossVenenatis",
		name = "Venenatis",
		description = "Configures whether kill count is displayed within Venenatis.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledVenenatis()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossVetion",
		name = "Vet'ion",
		description = "Configures whether kill count is displayed within Vet'ion.",
		section = BOSS_SECTION
	)
	default HighlightAlwaysSetting bossEnabledVetion()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	/*
	 * Activity options
	 */

	@ConfigItem(
		position = 0,
		keyName = "activityEnabled",
		name = "ACTIVITIES ENABLED",
		description = "Configures whether raids are enabled or disabled.",
		section = ACTIVITY_SECTION
	)
	default boolean activityEnabled()
	{
		return true;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossGuardiansoftheRift",
		name = "Guardians of the Rift",
		description = "Configures whether kill count is displayed within Guardian of the Guardians of the Rift.",
		section = ACTIVITY_SECTION
	)
	default HighlightAlwaysSetting bossEnabledRiftsClosed()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossLastManStanding",
		name = "Last Man Standing",
		description = "Configures whether kill count is displayed within Last Man Standing.",
		section = ACTIVITY_SECTION
	)
	default HighlightAlwaysSetting bossEnabledLastManStanding()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossSoulWarsZeal",
		name = "Soul Wars Zeal",
		description = "Configures whether kill count is displayed within Soul Wars Zeal.",
		section = ACTIVITY_SECTION
	)
	default HighlightAlwaysSetting bossEnabledSoulWarsZeal()
	{
		return HighlightAlwaysSetting.LOBBY;
	}

	/*
	 * Raid options
	 */

	@ConfigItem(
		position = 0,
		keyName = "raidsEnabled",
		name = "RAIDS ENABLED",
		description = "Configures whether raids are enabled or disabled.",
		section = RAID_SECTION
	)
	default boolean raidsEnabled()
	{
		return true;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossChambersOfXeric",
		name = "Chambers of Xeric",
		description = "Configures whether kill count is displayed within Chambers of Xeric.",
		section = RAID_SECTION
	)
	default HighlightRaidSetting bossEnabledChambersOfXeric()
	{
		return HighlightRaidSetting.NORMAL;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossTheatreOfBlood",
		name = "Theatre of Blood",
		description = "Configures whether kill count is displayed within Theatre of Blood.",
		section = RAID_SECTION
	)
	default HighlightRaidSetting bossEnabledTheatreOfBlood()
	{
		return HighlightRaidSetting.NORMAL;
	}

	@ConfigItem(
		position = 1,
		keyName = "bossTombsOfAmascut",
		name = "Tombs of Amascut",
		description = "Configures whether kill count is displayed within Tombs of Amascut.",
		section = RAID_SECTION
	)
	default HighlightRaidSetting bossEnabledTombsOfAmascut()
	{
		return HighlightRaidSetting.NORMAL;
	}

	/*
	 * Skill options
	 */

	@ConfigItem(
		position = 0,
		keyName = "skillingEnabled",
		name = "SKILLS ENABLED",
		description = "Configures whether skills are enabled or disabled.",
		section = SKILL_SECTION
	)
	default boolean skillingEnabled()
	{
		return true;
	}

	@ConfigItem(
		position = 1,
		keyName = "skillingWoodcutting",
		name = "Woodcutting",
		description = "Configures whether woodcutting level is displayed within Woodcutting Guild.",
		section = SKILL_SECTION
	)
	default HighlightSkillSetting skillEnabledWoodcutting()
	{
		return HighlightSkillSetting.ENABLED;
	}

	@ConfigItem(
		position = 1,
		keyName = "skillingFishing",
		name = "Fishing",
		description = "Configures whether fishing level is displayed within Fishing Guild.",
		section = SKILL_SECTION
	)
	default HighlightSkillSetting skillEnabledFishing()
	{
		return HighlightSkillSetting.ENABLED;
	}

	@ConfigItem(
		position = 1,
		keyName = "skillingRanged",
		name = "Ranged",
		description = "Configures whether ranged level is displayed within Ranging Guild.",
		section = SKILL_SECTION
	)
	default HighlightSkillSetting skillEnabledRanged()
	{
		return HighlightSkillSetting.ENABLED;
	}

	@ConfigItem(
		position = 1,
		keyName = "skillingMining",
		name = "Mining",
		description = "Configures whether mining level is displayed within Mining Guild and Motherlode mine.",
		section = SKILL_SECTION
	)
	default HighlightSkillSetting skillEnabledMining()
	{
		return HighlightSkillSetting.ENABLED;
	}

	@ConfigItem(
		position = 1,
		keyName = "skillingCrafting",
		name = "Crafting",
		description = "Configures whether crafting level is displayed within Crafting Guild.",
		section = SKILL_SECTION
	)
	default HighlightSkillSetting skillEnabledCrafting()
	{
		return HighlightSkillSetting.ENABLED;
	}

	@ConfigItem(
		position = 1,
		keyName = "skillingCooking",
		name = "Cooking",
		description = "Configures whether cooking level is displayed within Cooking Guild.",
		section = SKILL_SECTION
	)
	default HighlightSkillSetting skillEnabledCooking()
	{
		return HighlightSkillSetting.ENABLED;
	}

	@ConfigItem(
		position = 1,
		keyName = "skillingFarming",
		name = "Farming",
		description = "Configures whether farming level is displayed within Farming Guild.",
		section = SKILL_SECTION
	)
	default HighlightSkillSetting skillEnabledFarming()
	{
		return HighlightSkillSetting.ENABLED;
	}

	@ConfigItem(
		position = 1,
		keyName = "skillingHunter",
		name = "Hunter",
		description = "Configures whether hunter level is displayed within Hunter Guild.",
		section = SKILL_SECTION
	)
	default HighlightSkillSetting skillEnabledHunter()
	{
		return HighlightSkillSetting.ENABLED;
	}

	@ConfigItem(
		position = 1,
		keyName = "skillingMagic",
		name = "Magic",
		description = "Configures whether magic level is displayed within Wizards Guild and MTA.",
		section = SKILL_SECTION
	)
	default HighlightSkillSetting skillEnabledMagic()
	{
		return HighlightSkillSetting.ENABLED;
	}

	@ConfigItem(
		position = 1,
		keyName = "skillingSmithing",
		name = "Smithing",
		description = "Configures whether smithing level is displayed within Blast Furnace and Giants Foundry.",
		section = SKILL_SECTION
	)
	default HighlightSkillSetting skillEnabledSmithing()
	{
		return HighlightSkillSetting.ENABLED;
	}

	@ConfigItem(
		position = 1,
		keyName = "skillingHerblore",
		name = "Herblore",
		description = "Configures whether herblore level is displayed within Mastering Mixology.",
		section = SKILL_SECTION
	)
	default HighlightSkillSetting skillEnabledHerblore()
	{
		return HighlightSkillSetting.ENABLED;
	}

	@ConfigItem(
		position = 1,
		keyName = "skillingSlayer",
		name = "Slayer",
		description = "Configures whether slayer level is displayed while near slayer masters.",
		section = SKILL_SECTION
	)
	default HighlightSkillSetting skillEnabledSlayer()
	{
		return HighlightSkillSetting.ENABLED;
	}

	@ConfigItem(
		position = 1,
		keyName = "skillingAgility",
		name = "Agility",
		description = "Configures whether agility level is displayed on some rooftops, sepulchre lobby and brimhaven agility arena.",
		section = SKILL_SECTION
	)
	default HighlightSkillSetting skillEnabledAgility()
	{
		return HighlightSkillSetting.ENABLED;
	}

	@ConfigItem(
		position = 1,
		keyName = "skillingConstruction",
		name = "Construction",
		description = "Configures whether construction level is displayed within Player-Owned House.",
		section = SKILL_SECTION
	)
	default HighlightSkillSetting skillEnabledConstruction()
	{
		return HighlightSkillSetting.ENABLED;
	}

	@ConfigItem(
		position = 1,
		keyName = "skillingStrength",
		name = "Strength",
		description = "Configures whether strength level is displayed within Warriors Guild.",
		section = SKILL_SECTION
	)
	default HighlightSkillSetting skillEnabledStrength()
	{
		return HighlightSkillSetting.ENABLED;
	}

	@ConfigItem(
		position = 1,
		keyName = "skillingPrayer",
		name = "Prayer",
		description = "Configures whether prayer level is displayed within certain monasteries and churches/altars.",
		section = SKILL_SECTION
	)
	default HighlightSkillSetting skillEnabledPrayer()
	{
		return HighlightSkillSetting.ENABLED;
	}

	@ConfigItem(
		position = 1,
		keyName = "skillingFletching",
		name = "Fletching",
		description = "Configures whether fletching level is displayed within Auburnvale.",
		section = SKILL_SECTION
	)
	default HighlightSkillSetting skillEnabledFletching()
	{
		return HighlightSkillSetting.ENABLED;
	}

	@ConfigItem(
		position = 1,
		keyName = "skillingThieving",
		name = "Thieving",
		description = "Configures whether thieving level is displayed within various thieving locations.",
		section = SKILL_SECTION
	)
	default HighlightSkillSetting skillEnabledThieving()
	{
		return HighlightSkillSetting.ENABLED;
	}

	@ConfigItem(
		position = 1,
		keyName = "skillingRunecrafting",
		name = "Runecrafting",
		description = "Configures whether runecrafting level is displayed within the Runecrafting altars.",
		section = SKILL_SECTION
	)
	default HighlightSkillSetting skillEnabledRunecrafting()
	{
		return HighlightSkillSetting.ENABLED;
	}
}

/*
 * Copyright (c) 2018, Tomas Slusny <slusnucky@gmail.com>
 * Copyright (c) 2019, Jordan Atwood <nightfirecat@protonmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.killcountviewer;

import net.runelite.api.Client;
import net.runelite.api.FriendsChatRank;
import net.runelite.api.IconID;
import net.runelite.api.Player;
import net.runelite.api.Point;
import net.runelite.api.Skill;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.game.ChatIconManager;
import net.runelite.client.game.SpriteManager;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayUtil;
import net.runelite.client.util.Text;
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;
import java.util.Queue;

import net.runelite.client.hiscore.HiscoreClient;
import net.runelite.client.hiscore.HiscoreResult;
import net.runelite.client.hiscore.HiscoreSkill;
import net.runelite.client.hiscore.HiscoreSkillType;

import java.time.Duration;
import java.util.concurrent.*;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.nio.Buffer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.killcountviewer.KillCountViewerConfig.IconSetting;

@Singleton
public class KillCountViewerOverlay extends Overlay
{
	private static final Logger log = LoggerFactory.getLogger(KillCountViewerOverlay.class);

	@Inject
	private Client client;

	@Inject
	private HiscoreClient hiscoreClient;

	@Inject
	private ConfigManager configManager;

	private static final int ACTOR_OVERHEAD_TEXT_MARGIN = 25;
	private static final int ACTOR_HORIZONTAL_TEXT_MARGIN = 10;

	private final KillCountViewerService killcountService;
	private final KillCountViewerConfig config;
	private final ChatIconManager chatIconManager;
	private final SpriteManager spriteManager;
	private final Map<String, CachedKC> kcCache = new ConcurrentHashMap<>();
	private final ExecutorService executor = Executors.newSingleThreadExecutor();
	private final Queue<String> kcLookupQueue = new ConcurrentLinkedQueue<>();

	private static final HiscoreSkill[] SCORES = {
		// Skills
		HiscoreSkill.WOODCUTTING,                      // Done
		HiscoreSkill.FISHING,                          // Done
		HiscoreSkill.RANGED,                           // Done
		HiscoreSkill.MINING,                           // Done
		HiscoreSkill.CRAFTING,                         // Done
		HiscoreSkill.COOKING,                          // Done
		HiscoreSkill.FARMING,                          // Done
		HiscoreSkill.MAGIC,                            // Done
		HiscoreSkill.HUNTER,                           // Done
		HiscoreSkill.SMITHING,                         // Done
		HiscoreSkill.HERBLORE,                         // Done
		HiscoreSkill.SLAYER,                           // Done
		HiscoreSkill.AGILITY,                          // Done (probably some rooftops and courses missing)
		HiscoreSkill.CONSTRUCTION,                     // Done
		HiscoreSkill.STRENGTH,                         // Done
		HiscoreSkill.PRAYER,                           // Done
		HiscoreSkill.FLETCHING,                        // Done
		HiscoreSkill.THIEVING,                         // Done
		HiscoreSkill.RUNECRAFT,                        // Done
		// Activities
		HiscoreSkill.SOUL_WARS_ZEAL,                    // Done (test in matchmaking)
		HiscoreSkill.LAST_MAN_STANDING,                 // Done (not in matchmaking)
		HiscoreSkill.RIFTS_CLOSED,                      // Done
		// Bosses
		HiscoreSkill.ABYSSAL_SIRE,                      // Done
		HiscoreSkill.ALCHEMICAL_HYDRA,                  // Done
		HiscoreSkill.AMOXLIATL,                         // Done
		HiscoreSkill.ARAXXOR,                           // Done
		HiscoreSkill.ARTIO,                             // Done
		HiscoreSkill.BARROWS_CHESTS,                    // Done
		HiscoreSkill.BRYOPHYTA,                         // Done
		HiscoreSkill.CALLISTO,                          // Done
		HiscoreSkill.CALVARION,                         // Done
		HiscoreSkill.CERBERUS,                          // Done
		HiscoreSkill.CHAOS_ELEMENTAL,                   // Done
		HiscoreSkill.CHAOS_FANATIC,                     // Done
		HiscoreSkill.COMMANDER_ZILYANA,                 // Done
		HiscoreSkill.CORPOREAL_BEAST,                   // Done
		HiscoreSkill.CRAZY_ARCHAEOLOGIST,               // Done
		HiscoreSkill.DAGANNOTH_PRIME,
		HiscoreSkill.DAGANNOTH_REX,
		HiscoreSkill.DAGANNOTH_SUPREME,
		HiscoreSkill.DERANGED_ARCHAEOLOGIST,            // Done
		HiscoreSkill.DUKE_SUCELLUS,
		HiscoreSkill.GENERAL_GRAARDOR,                  // Done
		HiscoreSkill.GIANT_MOLE,                        // Done
		HiscoreSkill.GROTESQUE_GUARDIANS,               // Done
		HiscoreSkill.HESPORI,                           // Done
		HiscoreSkill.KALPHITE_QUEEN,                    // Done
		HiscoreSkill.KING_BLACK_DRAGON,                 // Done
		HiscoreSkill.KRAKEN,                            // Done
		HiscoreSkill.KREEARRA,                          // Done
		HiscoreSkill.KRIL_TSUTSAROTH,                   // Done
		HiscoreSkill.LUNAR_CHESTS,                      // Done
		HiscoreSkill.MIMIC,                             // Done
		HiscoreSkill.NEX,
		HiscoreSkill.NIGHTMARE,                         // Done (to test)
		HiscoreSkill.PHOSANIS_NIGHTMARE,
		HiscoreSkill.OBOR,                              // Done
		HiscoreSkill.PHANTOM_MUSPAH,                    // Done
		HiscoreSkill.SARACHNIS,                         // Done
		HiscoreSkill.SCORPIA,                           // Done
		HiscoreSkill.SCURRIUS,                          // Done
		HiscoreSkill.SKOTIZO,                           // Done
		HiscoreSkill.SOL_HEREDIT,                       // Done
		HiscoreSkill.SPINDEL,                           // Done
		HiscoreSkill.TEMPOROSS,                         // Done
		HiscoreSkill.THE_CORRUPTED_GAUNTLET,            // Done
		HiscoreSkill.THE_HUEYCOATL,                     // Done
		HiscoreSkill.THE_LEVIATHAN,
		HiscoreSkill.THE_ROYAL_TITANS,                  // Done
		HiscoreSkill.THE_WHISPERER,
		HiscoreSkill.THERMONUCLEAR_SMOKE_DEVIL,
		HiscoreSkill.TZKAL_ZUK,                         // Done
		HiscoreSkill.TZTOK_JAD,                         // Done
		HiscoreSkill.VARDORVIS,
		HiscoreSkill.VENENATIS,                         // Done
		HiscoreSkill.VETION,                            // Done
		HiscoreSkill.VORKATH,                           // Done
		HiscoreSkill.WINTERTODT,                        // Done
		HiscoreSkill.YAMA,                              // Done
		HiscoreSkill.ZALCANO,                           // Done
		HiscoreSkill.ZULRAH,                            // Done
		// Raids
		HiscoreSkill.CHAMBERS_OF_XERIC,                 // Done
		HiscoreSkill.CHAMBERS_OF_XERIC_CHALLENGE_MODE,  // Done
		HiscoreSkill.THEATRE_OF_BLOOD,                  // Done
		HiscoreSkill.THEATRE_OF_BLOOD_HARD_MODE,        // Done
		HiscoreSkill.TOMBS_OF_AMASCUT,                  // Done
		HiscoreSkill.TOMBS_OF_AMASCUT_EXPERT,           // Done
	};

	private static class CachedKC
	{
		final Map<HiscoreSkill, Integer> kcMap;
		final Instant fetchedAt;

		CachedKC(Map<HiscoreSkill, Integer> kcMap, Instant fetchedAt)
		{
			this.kcMap = kcMap;
			this.fetchedAt = fetchedAt;
		}
	}

	@Inject
	private KillCountViewerOverlay(KillCountViewerConfig config, KillCountViewerService killCountService, ChatIconManager chatIconManager, SpriteManager spriteManager)
	{
		this.config = config;
		this.killcountService = killCountService;
		this.chatIconManager = chatIconManager;
		this.spriteManager = spriteManager;
		setPosition(OverlayPosition.DYNAMIC);
		setPriority(PRIORITY_MED);
		// Log any missing activities/bosses from the SCORES array
		HiscoreSkill[] allSkills = HiscoreSkill.values();
		java.util.Set<HiscoreSkill> scoresSet = new java.util.HashSet<>();
		java.util.Collections.addAll(scoresSet, SCORES);
		for (HiscoreSkill skill : allSkills) {
			if (!scoresSet.contains(skill)) {
				log.info("HiscoreSkill missing from SCORES: {}", skill);
			}
		}
	}

	private int lookupCounter = 0;

	public void processKcQueue() {
		if (kcLookupQueue.isEmpty()) {
			// If the queue is empty, reset the counter so it does a look up next tick when a player is added
			lookupCounter = config.lookupCooldown() - 1;
			return;
		}

		if (killcountService.currentBoss == null) {
			// If we don't have a boss zone, clear the queue and return
			kcLookupQueue.clear();
			return;
		}
		
		// Only run every x seconds to avoid spamming the hiscore API
		lookupCounter = (lookupCounter + 1) % config.lookupCooldown();

		if (lookupCounter != 0) {
			return;
		}

		String playerName = kcLookupQueue.poll();
		Map<HiscoreSkill, Integer> data = kcCache.get(playerName) != null ? kcCache.get(playerName).kcMap : null;
		// Update the cache with current time so we don't re-add players that we are currently fetching
		kcCache.put(playerName, new CachedKC(data, Instant.now()));

		executor.submit(() ->
		{
			Map<HiscoreSkill, Integer> kcMap = fetchPlayerKC(playerName);
			// If the lookup failed, use the previous data and set the fetchedAt to 2 minutes less than our cache duration
			if (kcMap.isEmpty()) {
				kcCache.put(playerName, new CachedKC(data, Instant.now().minus(Duration.ofMinutes((long)config.cacheDuration() - 2))));
			} else {
				kcCache.put(playerName, new CachedKC(kcMap, Instant.now()));
			}
		});
	}

	public void gameTick()
	{
		killcountService.getBossZone();
		this.processKcQueue();
	}

	@Override
	public Dimension render(Graphics2D graphics)
	{
		killcountService.forEachPlayer((player, color) -> renderPlayerOverlay(graphics, player, color));
		return null;
	}

	private void renderPlayerOverlay(Graphics2D graphics, Player player, Color color)
	{

		final PlayerNameLocation drawPlayerNamesConfig = config.killcountPosition();
		if (drawPlayerNamesConfig == PlayerNameLocation.DISABLED)
		{
			return;
		}

		String playerName = Text.removeTags(player.getName());

		if (playerName.equalsIgnoreCase(client.getLocalPlayer().getName()) && !config.showLocalPlayerKc()) {
			return; // Don't show local player kill count if the config is set to not show it
		}

		if (!playerName.equalsIgnoreCase(client.getLocalPlayer().getName()) && !config.showOtherPlayerKc()) {
			return; // Don't show other player kill count if the config is set to not show it
		}

		CachedKC cached = kcCache.get(playerName);
		HiscoreSkill boss = killcountService.currentBoss;
		int kc = cached != null && cached.kcMap != null && cached.kcMap.containsKey(boss) ? cached.kcMap.get(boss) : 0;

		// Don't show anything if no KC
		if (kc < 0) {
			return;
		}

		// Re-fetch if it's been more than x minutes and not already in the queue or never fetched
		if (!kcLookupQueue.contains(playerName) && (cached == null || Duration.between(cached.fetchedAt, Instant.now()).toMinutes() >= config.cacheDuration()))
		{
			kcLookupQueue.offer(playerName);
		}

		if (playerName.equalsIgnoreCase(client.getLocalPlayer().getName())) {
			kc = getLocalPlayerKc(killcountService.currentBoss);
		}

		// Draw the kill count
		final int zOffset;
		switch (drawPlayerNamesConfig)
		{
			case MODEL_CENTER:
			case MODEL_RIGHT:
				zOffset = player.getLogicalHeight() / 2;
				break;
			default:
				zOffset = player.getLogicalHeight() + ACTOR_OVERHEAD_TEXT_MARGIN;
		}
		String killCountText = kc == 0 ? "" : kc + "";
		if (killCountText == "" && !kcLookupQueue.contains(playerName))
		{
			killCountText = "...";
		}
		Point textLocation = player.getCanvasTextLocation(graphics, killCountText, zOffset);

		if (drawPlayerNamesConfig == PlayerNameLocation.MODEL_RIGHT)
		{
			textLocation = player.getCanvasTextLocation(graphics, "", zOffset);

			if (textLocation == null)
			{
				return;
			}

			textLocation = new Point(textLocation.getX() + ACTOR_HORIZONTAL_TEXT_MARGIN, textLocation.getY());
		}

		if (textLocation == null)
		{
			return;
		}

		// Should we be using the skill or boss settings for the icon
		IconSetting configIconSetting = boss.getType() == HiscoreSkillType.SKILL ? config.levelRankIcon() : config.bossRankIcon();
		// If the icon setting is disabled, we don't need to draw anything
		Image rankIcon = configIconSetting == IconSetting.BOTH || configIconSetting == IconSetting.RANK ? this.calculateRankImage(boss, kc) : null;
		Image skillIcon = configIconSetting == IconSetting.BOTH || configIconSetting == IconSetting.ICON ? getSkillIcon(boss) : null;

		// If we have a skill icon it should be on the left, otherwise rank icon, or none
		Image leftIcon = skillIcon != null ? skillIcon : rankIcon != null ? rankIcon : null;
		// If we have a skill icon and rank icon, the rank icon should be on the right, otherwise none
		Image rightIcon = skillIcon != null && rankIcon != null ? rankIcon : null;


		if (leftIcon != null && kc > 0)
		{

			final int textHeight = graphics.getFontMetrics().getHeight() - graphics.getFontMetrics().getMaxDescent();
			final int textWidth = graphics.getFontMetrics().stringWidth(killCountText);
			final int imageMargin = 5;

			// If we only have a left icon, center the whole text block
			if (rightIcon == null)
			{
				textLocation = new Point(textLocation.getX() + (imageMargin + leftIcon.getWidth(null)) / 2, textLocation.getY());
			}

			if (leftIcon != null)
			{
				Point iconLoc = new Point(
					textLocation.getX() - imageMargin - leftIcon.getWidth(null),
					textLocation.getY() - textHeight / 2 - leftIcon.getHeight(null) / 2
				);
				graphics.drawImage(leftIcon, iconLoc.getX(), iconLoc.getY(), null);
			}

			if (rightIcon != null)
			{

				Point iconLoc = new Point(
					textLocation.getX() + textWidth + imageMargin,
					textLocation.getY() - textHeight / 2 - rightIcon.getHeight(null) / 2
				);
				graphics.drawImage(rightIcon, iconLoc.getX(), iconLoc.getY(), null);
			}
		}

		OverlayUtil.renderTextLocation(graphics, textLocation, killCountText, color);
	}

	private BufferedImage calculateRankImage(HiscoreSkill skill, int kc)
	{
		FriendsChatRank rank = FriendsChatRank.UNRANKED;
		if (skill.getType() == HiscoreSkillType.SKILL) {
			if (kc >= 99) {
				rank = FriendsChatRank.JMOD;
			} else if (kc >= 95) {
				rank = FriendsChatRank.GENERAL;
			} else if (kc >= 90) {
				rank = FriendsChatRank.CAPTAIN;
			} else if (kc >= 80) {
				rank = FriendsChatRank.LIEUTENANT;
			} else if (kc >= 70) {
				rank = FriendsChatRank.SERGEANT;
			} else if (kc >= 60) {
				rank = FriendsChatRank.CORPORAL;
			} else {
				rank = FriendsChatRank.RECRUIT;
			}
		} else {
			if (kc >= 1000) {
				rank = FriendsChatRank.JMOD;
			} else if (kc >= 700) {
				rank = FriendsChatRank.GENERAL;
			} else if (kc >= 500) {
				rank = FriendsChatRank.CAPTAIN;
			} else if (kc >= 300) {
				rank = FriendsChatRank.LIEUTENANT;
			} else if (kc >= 200) {
				rank = FriendsChatRank.SERGEANT;
			} else if (kc >= 100) {
				rank = FriendsChatRank.CORPORAL;
			} else {
				rank = FriendsChatRank.RECRUIT;
			}
		}
		return chatIconManager.getRankImage(rank);
	}

	private Image getSkillIcon(HiscoreSkill boss)
	{
			BufferedImage skillIcon = spriteManager.getSprite(boss.getSpriteId(), 0);


			if (skillIcon != null)
			{
				// How much we want to scale down the icon
				final int scalePercent = 55;
				int scaledWidth = skillIcon.getWidth() * scalePercent / 100;
				int scaledHeight = skillIcon.getHeight() * scalePercent / 100;

				return skillIcon.getScaledInstance(scaledWidth, scaledHeight, Image.SCALE_SMOOTH);
			}
			return null;
	}

	public void clearCache()
	{
		kcCache.clear();
		kcLookupQueue.clear();
	}

	private Map<HiscoreSkill, Integer> fetchPlayerKC(String playerName)
	{
		Map<HiscoreSkill, Integer> results = new HashMap<>();

		try {
			HiscoreResult result = hiscoreClient.lookup(playerName);
			for (HiscoreSkill boss : SCORES)
			{
				if (boss != null)
				{
					results.put(boss, result.getSkill(boss).getLevel());
				}
			}
		}
		catch (IOException e)
		{
			log.warn("Failed to fetch kill count for {}", playerName);
		}
		return results;
	}

	private String getBossString(HiscoreSkill boss) {
		switch (boss) {
			case CALVARION:
				return "Calvar'ion";
			case KREEARRA:
				return "Kree'arra";
			case KRIL_TSUTSAROTH:
				return "K'ril Tsutsaroth";
			case PHOSANIS_NIGHTMARE:
				return "Phosani's Nightmare";
			case THE_CORRUPTED_GAUNTLET:
				return "Corrupted Gauntlet";
			case THE_HUEYCOATL:
				return "Hueycoatl";
			case THE_LEVIATHAN:
				return "Leviathan";
			case THE_ROYAL_TITANS:
				return "Royal Titans";
			case THE_WHISPERER:
				return "Whisperer";
			case TZKAL_ZUK:
				return "TzKal-Zuk";
			case TZTOK_JAD:
				return "TzTok-Jad";
			case VETION:
				return "Vet'ion";
			case CHAMBERS_OF_XERIC:
				return "Chambers of Xeric";
			case CHAMBERS_OF_XERIC_CHALLENGE_MODE:
				return "Chambers of Xeric Challenge Mode";
			case THEATRE_OF_BLOOD:
				return "Theatre of Blood";
			case THEATRE_OF_BLOOD_HARD_MODE:
				return "Theatre of Blood Hard Mode";
			case TOMBS_OF_AMASCUT:
				return "Tombs of Amascut";
			case TOMBS_OF_AMASCUT_EXPERT:
				return "Tombs of Amascut Expert Mode";
			default:
				return Text.titleCase(boss);
		}

	}

	private int localKc = 0;
	private int lastTick = 0;

	private int getLocalPlayerKc(HiscoreSkill boss)
	{
		// Return cached value if we are on the same tick
		if (lastTick == client.getTickCount())
		{
			return localKc;
		}
		// Update last tick
		lastTick = client.getTickCount();

		// If it's a skill, return the real skill level
		if (boss.getType() == HiscoreSkillType.SKILL)
		{
			int skillLevel = client.getRealSkillLevel(Skill.valueOf(boss.name()));
			if (skillLevel > 0)
			{
				localKc = skillLevel;
				return localKc;
			}
		}
		
		// If it's a boss, check the config for the kill count
		if (boss.getType() == HiscoreSkillType.BOSS)
		{
			String bossNameFormatted = getBossString(boss);
			Integer killCount = configManager.getRSProfileConfiguration("killcount", bossNameFormatted.toLowerCase(), int.class);
			if (killCount != null && killCount >= 0)
			{
				localKc = killCount;
				return localKc;
			}
		}

		// If we couldn't find the kill count, use highscore value if available
		CachedKC cached = kcCache.get(client.getLocalPlayer().getName());
		if (cached != null && cached.kcMap != null && cached.kcMap.containsKey(boss)) {
			localKc = cached.kcMap.get(boss);
			return localKc;
		}

		return 0;
	}
}
/*
 * Copyright (c) 2019, Jordan Atwood <nightfirecat@protonmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.killcountviewer;

import lombok.AllArgsConstructor;

@AllArgsConstructor
public enum PlayerNameLocation
{

	DISABLED("Disabled"),
	ABOVE_HEAD("Above head"),
	MODEL_CENTER("Center of model"),
	MODEL_RIGHT("Right of model");

	private final String name;

	@Override
	public String toString()
	{
		return name;
	}
}

/*
 * Copyright (c) 2018, Tomas Slusny <slusnucky@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.killcountviewer;

import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.ChatMessageType;
import net.runelite.api.Client;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import javax.inject.Inject;

@PluginDescriptor(
	name = "Kill Count Viewer",
	description = "Display players kill counts at various bosses throughout the game",
	tags = {"highlight", "boss", "overlay", "players", "killcount", "kc"}
)
@Slf4j
public class KillCountViewerPlugin extends Plugin
{
	private static final String PLUGIN_VERSION = "1.1.1";

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private KillCountViewerOverlay killcountOverlay;

	@Inject
	private Client client;

	@Inject
	private KillCountViewerConfig config;

	@Inject
	private ConfigManager configManager;

	private int showUpdateMessage = 0;

	@Provides
	KillCountViewerConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(KillCountViewerConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(killcountOverlay);
	}

	@Override
	protected void shutDown() throws Exception
	{
		killcountOverlay.clearCache();
		overlayManager.remove(killcountOverlay);
	}

	@Subscribe
	public void onGameTick(final GameTick event)
	{
		killcountOverlay.gameTick();

		// Send update message to the player if the plugin was updated (wait a few ticks so not up the top)
		if (showUpdateMessage > 0)
		{
			if (--showUpdateMessage == 0)
			{
				client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "<col=c0392b>Kill Count Viewer:</col> Plugin updated to v" + PLUGIN_VERSION, null);
				client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "<col=c0392b>-</col> Added option for cache duration.", null);
				client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "<col=c0392b>-</col> Added option for own/other players shown.", null);
				client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "<col=c0392b>-</col> Added Thermonuclear Smoke Devil.", null);
				client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "<col=c0392b>-</col> Added more skills and locations.", null);
				client.addChatMessage(ChatMessageType.GAMEMESSAGE, "", "<col=c0392b>-</col> Use local storage kill count instead of high score.", null);
			}
		}
	}

	@Subscribe
	public void onGameStateChanged(GameStateChanged event)
	{
		if (event.getGameState() == net.runelite.api.GameState.LOGGED_IN)
		{
			// Check if plugin was updated
			String lastSeenVersion = config.lastSeenVersion();
			if (!PLUGIN_VERSION.equals(lastSeenVersion))
			{
				log.info("Kill Count Viewer plugin updated to version: " + PLUGIN_VERSION);
				showUpdateMessage = 5; // Reset message counter to show update messages
				configManager.setConfiguration("killcountviewer", "lastSeenVersion", PLUGIN_VERSION);
			}
		}
	}
}

/*
 * Copyright (c) 2018, Tomas Slusny <slusnucky@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.killcountviewer;

import net.runelite.api.*;
import net.runelite.api.Point;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.hiscore.HiscoreSkill;
import net.runelite.client.party.PartyService;
import com.killcountviewer.KillCountViewerConfig.HighlightAlwaysSetting;
import com.killcountviewer.KillCountViewerConfig.HighlightRaidSetting;
import com.killcountviewer.KillCountViewerConfig.HighlightSetting;
import com.killcountviewer.KillCountViewerConfig.HighlightSkillSetting;

import java.awt.*;
import java.util.Arrays;
import java.util.List;
import java.util.function.BiConsumer;
import javax.inject.Inject;
import javax.inject.Singleton;

@Singleton
class KillCountViewerService
{
	private final Client client;
	private final KillCountViewerConfig config;

	// The current boss zone the player is in
	// This is used to check if the player is in a boss zone and only check against that boss
	// This is set to null when the player leaves the boss zone and will check against all zones again
	// This is used to prevent checking against all zones every tick
	HiscoreSkill currentBoss = null;

	@Inject
	private KillCountViewerService(Client client, KillCountViewerConfig config, PartyService partyService)
	{
		this.config = config;
		this.client = client;
	}

	void forEachPlayer(final BiConsumer<Player, Color> consumer)
	{

		if (currentBoss == null)	return;

		for (Player player : client.getPlayers())
		{
			if (player == null || player.getName() == null)
			{
				continue;
			}

			consumer.accept(player, config.killCountColor());
		}
	}

	
	private boolean isInArea(Player player, int x1, int y1, int x2, int y2) {
		return isInArea(player, x1, y1, x2, y2, 0);
	}
	private boolean isInArea(Player player, int x1, int y1, int x2, int y2, int z)
	{
		if (player == null || player.getWorldLocation() == null)
		{
			return false;
		}

		WorldPoint location = WorldPoint.fromLocalInstance(client, player.getLocalLocation());

		int minX = Math.min(x1, x2);
		int maxX = Math.max(x1, x2);
		int x = location.getX();
		int minY = Math.min(y1, y2);
		int maxY = Math.max(y1, y2);
		int y = location.getY();

		return x >= minX && x <= maxX && y >= minY && y <= maxY && (z < 0 || location.getPlane() == z);
	}
	private boolean isOnPlane(Player player, int z)
	{
		if (player == null || player.getWorldLocation() == null)
		{
			return false;
		}

		return WorldPoint.fromLocalInstance(client, player.getLocalLocation()).getPlane() == z;
	}

	public boolean isInPolygon(Player player, List<Point> polygonCoords)
	{
		return isInPolygon(player, polygonCoords, 0);
	}
	
	public boolean isInPolygon(Player player, List<Point> polygonCoords, int plane)
	{
		if (player == null || player.getWorldLocation() == null)
		{
			return false;
		}
		WorldPoint location = WorldPoint.fromLocalInstance(client, player.getLocalLocation());

		// Optional: Ensure the polygon is only valid on a specific plane (usually 0)
		if (plane >= 0 && location.getPlane() != plane)
			return false;

		Polygon polygon = new Polygon();
		for (Point p : polygonCoords)
		{
				polygon.addPoint(p.getX(), p.getY());
		}

		return polygon.contains(location.getX(), location.getY());
	}

	// Check if the setting is enabled for the given boss zone
	boolean enabledAlways(HighlightAlwaysSetting setting)
	{
		return setting == HighlightAlwaysSetting.ALWAYS;
	}

	boolean enabledLobby(HighlightAlwaysSetting setting)
	{
		return setting == HighlightAlwaysSetting.LOBBY || setting == HighlightAlwaysSetting.ALWAYS;
	}

	boolean enabledLobby(HighlightSetting setting)
	{
		return setting == HighlightSetting.LOBBY;
	}

	boolean enabledSkill(HighlightSkillSetting setting)
	{
		return setting == HighlightSkillSetting.ENABLED;
	}

	boolean enabledRaidNormal(HighlightRaidSetting setting)
	{
		return setting == HighlightRaidSetting.NORMAL;
	}

	boolean enabledRaidExpert(HighlightRaidSetting setting)
	{
		return setting == HighlightRaidSetting.HARD;
	}

	boolean checkCurrentBoss(HiscoreSkill boss)
	{
		return currentBoss == null || currentBoss == boss;
	}

	// Check if the player is in a boss zone and return the corresponding HiscoreSkill
	HiscoreSkill getBossZone()
	{
		Player player = client.getLocalPlayer();
		if (player == null || player.getWorldLocation() == null) return null;

		int region = WorldPoint.fromLocalInstance(client, player.getLocalLocation()).getRegionID();

		if (config.skillingEnabled())
		{
			HiscoreSkill skillZone = checkSkillZones(player, region);
			if (skillZone != null) return currentBoss = skillZone;
		}
		if (config.activityEnabled())
		{
			HiscoreSkill activityZone = checkActivityZones(player, region);
			if (activityZone != null) return currentBoss = activityZone;
		}
		if (config.bossEnabled())
		{
			HiscoreSkill bossZone = checkBossZones(player, region);
			if (bossZone != null) return currentBoss = bossZone;
		}
		if (config.raidsEnabled())
		{
			HiscoreSkill raidZone = checkRaidZones(player, region);
			if (raidZone != null) return currentBoss = raidZone;
		}
		return currentBoss = null;
	}

	private HiscoreSkill checkSkillZones(Player player, int region)
	{
		if (checkCurrentBoss(HiscoreSkill.WOODCUTTING) && isWoodcutting(player, region)) return HiscoreSkill.WOODCUTTING;
		if (checkCurrentBoss(HiscoreSkill.FISHING) && isFishing(player, region)) return HiscoreSkill.FISHING;
		if (checkCurrentBoss(HiscoreSkill.RANGED) && isRanged(player, region)) return HiscoreSkill.RANGED;
		if (checkCurrentBoss(HiscoreSkill.MINING) && isMining(player, region)) return HiscoreSkill.MINING;
		if (checkCurrentBoss(HiscoreSkill.CRAFTING) && isCrafting(player, region)) return HiscoreSkill.CRAFTING;
		if (checkCurrentBoss(HiscoreSkill.COOKING) && isCooking(player, region)) return HiscoreSkill.COOKING;
		if (checkCurrentBoss(HiscoreSkill.FARMING) && isFarming(player, region)) return HiscoreSkill.FARMING;
		if (checkCurrentBoss(HiscoreSkill.HUNTER) && isHunter(player, region)) return HiscoreSkill.HUNTER;
		if (checkCurrentBoss(HiscoreSkill.MAGIC) && isMagic(player, region)) return HiscoreSkill.MAGIC;
		if (checkCurrentBoss(HiscoreSkill.SMITHING) && isSmithing(player, region)) return HiscoreSkill.SMITHING;
		if (checkCurrentBoss(HiscoreSkill.SLAYER) && isSlayer(player, region)) return HiscoreSkill.SLAYER;
		if (checkCurrentBoss(HiscoreSkill.AGILITY) && isAgility(player, region)) return HiscoreSkill.AGILITY;
		if (checkCurrentBoss(HiscoreSkill.HERBLORE) && isHerblore(player, region)) return HiscoreSkill.HERBLORE;
		if (checkCurrentBoss(HiscoreSkill.CONSTRUCTION) && isConstruction(player, region)) return HiscoreSkill.CONSTRUCTION;
		if (checkCurrentBoss(HiscoreSkill.STRENGTH) && isStrength(player, region)) return HiscoreSkill.STRENGTH;
		if (checkCurrentBoss(HiscoreSkill.PRAYER) && isPrayer(player, region)) return HiscoreSkill.PRAYER;
		if (checkCurrentBoss(HiscoreSkill.FLETCHING) && isFletching(player, region)) return HiscoreSkill.FLETCHING;
		if (checkCurrentBoss(HiscoreSkill.THIEVING) && isThieving(player, region)) return HiscoreSkill.THIEVING;
		if (checkCurrentBoss(HiscoreSkill.RUNECRAFT) && isRunecrafting(player, region)) return HiscoreSkill.RUNECRAFT;
		return null;
	}

	private HiscoreSkill checkActivityZones(Player player, int region)
	{
		if (checkCurrentBoss(HiscoreSkill.SOUL_WARS_ZEAL) && isSoulWarsZeal(player, region)) return HiscoreSkill.SOUL_WARS_ZEAL;
		if (checkCurrentBoss(HiscoreSkill.LAST_MAN_STANDING) && isLastManStanding(player, region)) return HiscoreSkill.LAST_MAN_STANDING;
		if (checkCurrentBoss(HiscoreSkill.RIFTS_CLOSED) && isRiftsClosed(player, region)) return HiscoreSkill.RIFTS_CLOSED;
		return null;
	}

	private HiscoreSkill checkBossZones(Player player, int region)
	{
		if (checkCurrentBoss(HiscoreSkill.ABYSSAL_SIRE) && isAbyssalSire(player, region)) return HiscoreSkill.ABYSSAL_SIRE;
		if (checkCurrentBoss(HiscoreSkill.ALCHEMICAL_HYDRA) && isAlchemicalHydra(player, region)) return HiscoreSkill.ALCHEMICAL_HYDRA;
		if (checkCurrentBoss(HiscoreSkill.AMOXLIATL) && isAmoxliatl(player, region)) return HiscoreSkill.AMOXLIATL;
		if (checkCurrentBoss(HiscoreSkill.ARAXXOR) && isAraxxor(player, region)) return HiscoreSkill.ARAXXOR;
		if (checkCurrentBoss(HiscoreSkill.ARTIO) && isArtio(player, region)) return HiscoreSkill.ARTIO;
		if (checkCurrentBoss(HiscoreSkill.BARROWS_CHESTS) && isBarrowsChests(player, region)) return HiscoreSkill.BARROWS_CHESTS;
		if (checkCurrentBoss(HiscoreSkill.BRYOPHYTA) && isBryophyta(player, region)) return HiscoreSkill.BRYOPHYTA;
		if (checkCurrentBoss(HiscoreSkill.CALLISTO) && isCallisto(player, region)) return HiscoreSkill.CALLISTO;
		if (checkCurrentBoss(HiscoreSkill.CALVARION) && isCalvarion(player, region)) return HiscoreSkill.CALVARION;
		if (checkCurrentBoss(HiscoreSkill.CERBERUS) && isCerberus(player, region)) return HiscoreSkill.CERBERUS;
		if (checkCurrentBoss(HiscoreSkill.CHAOS_ELEMENTAL) && isChaosElemental(player, region)) return HiscoreSkill.CHAOS_ELEMENTAL;
		if (checkCurrentBoss(HiscoreSkill.CHAOS_FANATIC) && isChaosFanatic(player, region)) return HiscoreSkill.CHAOS_FANATIC;
		if (checkCurrentBoss(HiscoreSkill.COMMANDER_ZILYANA) && isCommanderZilyana(player, region)) return HiscoreSkill.COMMANDER_ZILYANA;
		if (checkCurrentBoss(HiscoreSkill.CORPOREAL_BEAST) && isCorporealBeast(player, region)) return HiscoreSkill.CORPOREAL_BEAST;
		if (checkCurrentBoss(HiscoreSkill.CRAZY_ARCHAEOLOGIST) && isCrazyArchaeologist(player, region)) return HiscoreSkill.CRAZY_ARCHAEOLOGIST;
		if (checkCurrentBoss(HiscoreSkill.DAGANNOTH_PRIME) && isDagannothPrime(player, region)) return HiscoreSkill.DAGANNOTH_PRIME;
		if (checkCurrentBoss(HiscoreSkill.DAGANNOTH_REX) && isDagannothRex(player, region)) return HiscoreSkill.DAGANNOTH_REX;
		if (checkCurrentBoss(HiscoreSkill.DAGANNOTH_SUPREME) && isDagannothSupreme(player, region)) return HiscoreSkill.DAGANNOTH_SUPREME;
		if (checkCurrentBoss(HiscoreSkill.DERANGED_ARCHAEOLOGIST) && isDerangedArchaeologist(player, region)) return HiscoreSkill.DERANGED_ARCHAEOLOGIST;
		if (checkCurrentBoss(HiscoreSkill.DUKE_SUCELLUS) && isDukeSucellus(player, region)) return HiscoreSkill.DUKE_SUCELLUS;
		if (checkCurrentBoss(HiscoreSkill.GENERAL_GRAARDOR) && isGeneralGraardor(player, region)) return HiscoreSkill.GENERAL_GRAARDOR;
		if (checkCurrentBoss(HiscoreSkill.GIANT_MOLE) && isGiantMole(player, region)) return HiscoreSkill.GIANT_MOLE;
		if (checkCurrentBoss(HiscoreSkill.GROTESQUE_GUARDIANS) && isGrotesqueGuardians(player, region)) return HiscoreSkill.GROTESQUE_GUARDIANS;
		if (checkCurrentBoss(HiscoreSkill.HESPORI) && isHespori(player, region)) return HiscoreSkill.HESPORI;
		if (checkCurrentBoss(HiscoreSkill.KALPHITE_QUEEN) && isKalphiteQueen(player, region)) return HiscoreSkill.KALPHITE_QUEEN;
		if (checkCurrentBoss(HiscoreSkill.KING_BLACK_DRAGON) && isKingBlackDragon(player, region)) return HiscoreSkill.KING_BLACK_DRAGON;
		if (checkCurrentBoss(HiscoreSkill.KRAKEN) && isKraken(player, region)) return HiscoreSkill.KRAKEN;
		if (checkCurrentBoss(HiscoreSkill.KREEARRA) && isKreeArra(player, region)) return HiscoreSkill.KREEARRA;
		if (checkCurrentBoss(HiscoreSkill.KRIL_TSUTSAROTH) && isKrilTsutsaroth(player, region)) return HiscoreSkill.KRIL_TSUTSAROTH;
		if (checkCurrentBoss(HiscoreSkill.LUNAR_CHESTS) && isLunarChests(player, region)) return HiscoreSkill.LUNAR_CHESTS;
		if (checkCurrentBoss(HiscoreSkill.MIMIC) && isMimic(player, region)) return HiscoreSkill.MIMIC;
		if (checkCurrentBoss(HiscoreSkill.NEX) && isNex(player, region)) return HiscoreSkill.NEX;
		if (checkCurrentBoss(HiscoreSkill.NIGHTMARE) && isNightmare(player, region)) return HiscoreSkill.NIGHTMARE;
		if (checkCurrentBoss(HiscoreSkill.PHOSANIS_NIGHTMARE) && isPhosanisNightmare(player, region)) return HiscoreSkill.PHOSANIS_NIGHTMARE;
		if (checkCurrentBoss(HiscoreSkill.OBOR) && isObor(player, region)) return HiscoreSkill.OBOR;
		if (checkCurrentBoss(HiscoreSkill.PHANTOM_MUSPAH) && isPhantomMuspah(player, region)) return HiscoreSkill.PHANTOM_MUSPAH;
		if (checkCurrentBoss(HiscoreSkill.SARACHNIS) && isSarachnis(player, region)) return HiscoreSkill.SARACHNIS;
		if (checkCurrentBoss(HiscoreSkill.SCORPIA) && isScorpia(player, region)) return HiscoreSkill.SCORPIA;
		if (checkCurrentBoss(HiscoreSkill.SCURRIUS) && isScurrius(player, region)) return HiscoreSkill.SCURRIUS;
		if (checkCurrentBoss(HiscoreSkill.SKOTIZO) && isSkotizo(player, region)) return HiscoreSkill.SKOTIZO;
		if (checkCurrentBoss(HiscoreSkill.SOL_HEREDIT) && isSolHeredit(player, region)) return HiscoreSkill.SOL_HEREDIT;
		if (checkCurrentBoss(HiscoreSkill.SPINDEL) && isSpindel(player, region)) return HiscoreSkill.SPINDEL;
		if (checkCurrentBoss(HiscoreSkill.TEMPOROSS) && isTempoross(player, region)) return HiscoreSkill.TEMPOROSS;
		if (checkCurrentBoss(HiscoreSkill.THE_HUEYCOATL) && isTheHueycoatl(player, region)) return HiscoreSkill.THE_HUEYCOATL;
		if (checkCurrentBoss(HiscoreSkill.THE_LEVIATHAN) && isTheLeviathan(player, region)) return HiscoreSkill.THE_LEVIATHAN;
		if (checkCurrentBoss(HiscoreSkill.THE_WHISPERER) && isTheWhisperer(player, region)) return HiscoreSkill.THE_WHISPERER;
		if (checkCurrentBoss(HiscoreSkill.THERMONUCLEAR_SMOKE_DEVIL) && isThermonuclearSmokeDevil(player, region)) return HiscoreSkill.THERMONUCLEAR_SMOKE_DEVIL;
		if (checkCurrentBoss(HiscoreSkill.VENENATIS) && isVenenatis(player, region)) return HiscoreSkill.VENENATIS;
		if (checkCurrentBoss(HiscoreSkill.VETION) && isVetion(player, region)) return HiscoreSkill.VETION;
		if (checkCurrentBoss(HiscoreSkill.THE_CORRUPTED_GAUNTLET) && isCorruptedGauntlet(player, region)) return HiscoreSkill.THE_CORRUPTED_GAUNTLET;
		if (checkCurrentBoss(HiscoreSkill.THE_ROYAL_TITANS) && isRoyalTitans(player, region)) return HiscoreSkill.THE_ROYAL_TITANS;
		if (checkCurrentBoss(HiscoreSkill.TZKAL_ZUK) && isTzKalZuk(player, region)) return HiscoreSkill.TZKAL_ZUK;
		if (checkCurrentBoss(HiscoreSkill.TZTOK_JAD) && isTzTokJad(player, region)) return HiscoreSkill.TZTOK_JAD;
		if (checkCurrentBoss(HiscoreSkill.VARDORVIS) && isVardorvis(player, region)) return HiscoreSkill.VARDORVIS;
		if (checkCurrentBoss(HiscoreSkill.VORKATH) && isVorkath(player, region)) return HiscoreSkill.VORKATH;
		if (checkCurrentBoss(HiscoreSkill.WINTERTODT) && isWintertodt(player, region)) return HiscoreSkill.WINTERTODT;
		if (checkCurrentBoss(HiscoreSkill.YAMA) && isYama(player, region)) return HiscoreSkill.YAMA;
		if (checkCurrentBoss(HiscoreSkill.ZALCANO) && isZalcano(player, region)) return HiscoreSkill.ZALCANO;
		if (checkCurrentBoss(HiscoreSkill.ZULRAH) && isZulrah(player, region)) return HiscoreSkill.ZULRAH;
		return null;
	}

	private HiscoreSkill checkRaidZones(Player player, int region)
	{
		if (checkCurrentBoss(HiscoreSkill.CHAMBERS_OF_XERIC) && isChambersOfXeric(player, region)) return HiscoreSkill.CHAMBERS_OF_XERIC;
		if (checkCurrentBoss(HiscoreSkill.CHAMBERS_OF_XERIC_CHALLENGE_MODE) && isChambersOfXericChallengeMode(player, region)) return HiscoreSkill.CHAMBERS_OF_XERIC_CHALLENGE_MODE;
		if (checkCurrentBoss(HiscoreSkill.THEATRE_OF_BLOOD) && isTheatreOfBlood(player, region)) return HiscoreSkill.THEATRE_OF_BLOOD;
		if (checkCurrentBoss(HiscoreSkill.THEATRE_OF_BLOOD_HARD_MODE) && isTheatreOfBloodHardMode(player, region)) return HiscoreSkill.THEATRE_OF_BLOOD_HARD_MODE;
		if (checkCurrentBoss(HiscoreSkill.TOMBS_OF_AMASCUT) && isTombsOfAmascut(player, region)) return HiscoreSkill.TOMBS_OF_AMASCUT;
		if (checkCurrentBoss(HiscoreSkill.TOMBS_OF_AMASCUT_EXPERT) && isTombsOfAmascutExpert(player, region)) return HiscoreSkill.TOMBS_OF_AMASCUT_EXPERT;
		return null;
	}

	private boolean isWoodcutting(Player player, int region)
	{
		return enabledSkill(config.skillEnabledWoodcutting()) &&
			(
				// Woodcutting Guild West
				isInArea(player, 1562, 3472, 1600, 3503) ||
				// Woodcutting Guild Middle
				isInArea(player, 1601, 3501, 1606, 3496) ||
				// Woodcutting Guild East
				isInArea(player, 1654, 3516, 1607, 3488) ||
				// Woodcutting Guild RedWoods
				isInArea(player, 1566, 3497, 1575, 3478, 1) ||
				isInArea(player, 1566, 3497, 1575, 3478, 2)
			);
	}

	private boolean isFishing(Player player, int region)
	{
		return enabledSkill(config.skillEnabledFishing()) &&
			(
				// Barbarian Fishing
				isInArea(player, 2509, 3508, 2515, 3496) ||
				// Catherby Fishing
				isInArea(player, 2842, 3430, 2852, 3423) ||
				// Fishing Guild
				isInArea(player, 2579, 3425, 2624, 3415) ||
				isInArea(player, 2587, 3414, 2623, 3394)
			);
	}

	private boolean isRanged(Player player, int region)
	{
		List<Point> rangingGuildPolygon = Arrays.asList(
			new Point(2668, 3446),
			new Point(2686, 3428),
			new Point(2668, 3411),
			new Point(2650, 3428)
		);

		return enabledSkill(config.skillEnabledRanged()) &&
			(
				// Ranging Guild
				isInPolygon(player, rangingGuildPolygon, -1)
			);
	}

	private boolean isMining(Player player, int region)
	{
		return enabledSkill(config.skillEnabledMining()) &&
			(
				// Mining Guild
				isInArea(player, 2999, 9756, 3061, 9698) ||
				// Motherlode Mine
				region == 14936
			);
	}

	private boolean isCrafting(Player player, int region)
	{
		List<Point> craftingGuildPolygon = Arrays.asList(
			new Point(2927, 3292),
			new Point(2934, 3292),
			new Point(2936, 3293),
			new Point(2938, 3293),
			new Point(2939, 3292),
			new Point(2943, 3292),
			new Point(2944, 3291),
			new Point(2944, 3277),
			new Point(2943, 3276),
			new Point(2938, 3276),
			new Point(2937, 3277),
			new Point(2937, 3279),
			new Point(2933, 3279),
			new Point(2929, 3274),
			new Point(2926, 3277),
			new Point(2929, 3281),
			new Point(2929, 3285),
			new Point(2927, 3287)
		);
		return enabledSkill(config.skillEnabledCrafting()) &&
			(
				// Crafting Guild
				isInPolygon(player, craftingGuildPolygon, -1)
			);
	}

	private boolean isCooking(Player player, int region)
	{
		List<Point> cookingGuildPolygon = Arrays.asList(
			new Point(3140, 3454),
			new Point(3147, 3454),
			new Point(3149, 3452),
			new Point(3149, 3447),
			new Point(3145, 3444),
			new Point(3142, 3444),
			new Point(3137, 3449),
			new Point(3137, 3451)
		);
		return enabledSkill(config.skillEnabledCooking()) &&
			(
				// Cooking Guild
				isInPolygon(player, cookingGuildPolygon, -1)
			);
	}

	private boolean isFarming(Player player, int region)
	{
		List<Point> farmingGuildPolygon = Arrays.asList(
			new Point(1226, 3765),
			new Point(1232, 3765),
			new Point(1232, 3762),
			new Point(1240, 3762),
			new Point(1242, 3764),
			new Point(1256, 3764),
			new Point(1259, 3761),
			new Point(1259, 3749),
			new Point(1256, 3746),
			new Point(1251, 3746),
			new Point(1251, 3744),
			new Point(1256, 3744),
			new Point(1256, 3738),
			new Point(1257, 3737),
			new Point(1260, 3740),
			new Point(1263, 3740),
			new Point(1263, 3744),
			new Point(1261, 3746),
			new Point(1261, 3752),
			new Point(1269, 3752),
			new Point(1269, 3745),
			new Point(1267, 3743),
			new Point(1267, 3740),
			new Point(1270, 3740),
			new Point(1275, 3735),
			new Point(1275, 3725),
			new Point(1270, 3720),
			new Point(1261, 3720),
			new Point(1255, 3726),
			new Point(1253, 3726),
			new Point(1253, 3723),
			new Point(1245, 3723),
			new Point(1245, 3728),
			new Point(1243, 3728),
			new Point(1243, 3732),
			new Point(1245, 3732),
			new Point(1245, 3738),
			new Point(1242, 3738),
			new Point(1242, 3744),
			new Point(1247, 3744),
			new Point(1247, 3746),
			new Point(1241, 3746),
			new Point(1239, 3748),
			new Point(1231, 3748),
			new Point(1231, 3745),
			new Point(1227, 3745),
			new Point(1227, 3748),
			new Point(1222, 3748),
			new Point(1222, 3762),
			new Point(1226, 3762)
		);
		return enabledSkill(config.skillEnabledFarming()) &&
			(
				// Farming Guild
				isInPolygon(player, farmingGuildPolygon)
			);
	}

	private boolean isHunter(Player player, int region)
	{
		return enabledSkill(config.skillEnabledHunter()) &&
			(
				// Hunter Guild
				isInArea(player, 1540, 3063, 1574, 3030)
			);
	}

	private boolean isMagic(Player player, int region)
	{

		List<Point> wizardsGuild = Arrays.asList(
			new Point(2589, 3094),
			new Point(2593, 3094),
			new Point(2597, 3090),
			new Point(2597, 3086),
			new Point(2593, 3082),
			new Point(2589, 3082),
			new Point(2585, 3086),
			new Point(2585, 3090)
		);
		return enabledSkill(config.skillEnabledMagic()) &&
			(
				isInPolygon(player, wizardsGuild, -1) ||
				isInArea(player, 3353,3324,3373,3295, -1)
			);
	}

	private boolean isSmithing(Player player, int region)
	{
		return enabledSkill(config.skillEnabledSmithing()) &&
			(
				// Giants Foundry
				region == 13491 ||
				// Blast Furnace
				region == 7757
			);
	}

	private boolean isSlayer(Player player, int region)
	{
		return enabledSkill(config.skillEnabledSlayer()) &&
			(
				// Tureal
				isInArea(player, 2928, 3539, 2933, 3534) ||
				// Spria
				isInArea(player, 3089, 3268, 3095, 3265) ||
				// Krystilia
				isInArea(player, 3107, 3517, 3111, 3511) ||
				// Mazchna
				isInArea(player, 3506, 3514, 3514, 3504) ||
				// Vannaka
				isInArea(player, 3141, 9916, 3150, 9910) ||
				// Chaeldar
				isInArea(player, 2439, 4434, 2454, 4421) ||
				// Neive
				isInArea(player, 2428, 3427, 2436, 3420) ||
				// Duradel
				isInArea(player, 2866, 2984, 2871, 2980, 1) ||
				// Konar
				isInArea(player, 1305, 3791, 1312, 3782)
			);
	}

	private boolean isAgility(Player player, int region)
	{
		return enabledSkill(config.skillEnabledAgility()) &&
			(
				// Brimhaven Agility Arena
				region == 11157 ||
				// Sepulchre Lobby
				region == 9565 ||
				// Seers Village Rooftop
				isInArea(player, 2730, 3500, 2689, 3458, 2) ||
				isInArea(player, 2730, 3500, 2689, 3458, 3) ||
				// Gnome Stronghold Agility Course
				isInArea(player, 2469, 3439, 2490, 3415, -1) ||
				// Canifis Rooftop
				isInArea(player, 3471, 3509, 3517, 3467, 2) ||
				isInArea(player, 3471, 3509, 3517, 3467, 3) ||
				// Agility Pyramid
				isInArea(player, 2690, 3466, 2703, 3459, -1) ||
				// Wilderness Agility Course
				isInArea(player, 2988, 3966, 3009, 3913) ||
				// Colossal Wyrm Agility Course
				isInArea(player, 1622, 2935, 1657, 2903, -1) ||
				// Ape Atoll Agility Course
				isInArea(player, 2769, 2752, 2741, 2726, -1)
			);
	}

	private boolean isConstruction(Player player, int region)
	{
		return enabledSkill(config.skillEnabledConstruction()) &&
			(
				// Player-owned House (POH) regions
				region == 7769 ||
				region == 7770 ||
				region == 7514 ||
				region == 7513 ||
				region == 8026 ||
				region == 8025 ||
				region == 7257
			);
	}

	private boolean isStrength(Player player, int region)
	{
		return enabledSkill(config.skillEnabledStrength()) &&
			(
				isInArea(player, 2837, 3556, 2876, 3536, -1) ||
				isInArea(player, 2848, 3535, 2860, 3533, -1)
			);
	}

	private boolean isPrayer(Player player, int region)
	{
		return enabledSkill(config.skillEnabledPrayer()) &&
			(
				// Edgeville Monastery
				isInArea(player, 3040, 3509, 3062, 3479, -1) ||
				// Lumbridge Church
				isInArea(player, 3239, 3215, 3247, 3204) ||
				// Ardougne Monastery
				isInArea(player, 2621, 3203, 2591, 3223, -1) ||
				// Nardah Altar
				isInArea(player, 3420, 2931, 3433, 2922) ||
				// Varrock Church
				isInArea(player, 3259, 3488, 3249, 3471, -1) ||
				// Seers Village Church
				isInArea(player, 2690, 3466, 2703, 3459)
			);
	}

	private boolean isFletching(Player player, int region)
	{
		List<Point> totemAreaPolygon = Arrays.asList(
			new Point(1360, 3384),
			new Point(1395, 3403),
			new Point(1489, 3365),
			new Point(1485, 3312),
			new Point(1382, 3254),
			new Point(1344, 3282),
			new Point(1327, 3331)
		);

		return enabledSkill(config.skillEnabledFletching()) &&
			(
				// Fletching Guild
				isInPolygon(player, totemAreaPolygon)
			);
	}

	private boolean isThieving(Player player, int region)
	{
		return enabledSkill(config.skillEnabledThieving()) &&
			(
				// Rogue's Den
				isInArea(player, 2905, 3543, 2915, 3536) ||
				region == 12109 || region == 12110 || region == 12111 || region == 11854 || region == 11855 ||
				// Ardougne Market
				isInArea(player, 2667, 3319, 2675, 3315) ||
				isInArea(player, 2672, 3314, 2667, 3301) ||
				// Ardougne Bank
				isInArea(player, 2649, 3287, 2655, 3280) ||
				// Varlamor Bazaar
				isInArea(player, 1692, 3095, 1669, 3118) ||
				// Pyramid Plunder
				region == 7749
			);
	}

	private boolean isRunecrafting(Player player, int region)
	{
		return enabledSkill(config.skillEnabledRunecrafting()) &&
			(
				// Abyss
				region == 12107 ||
				// Runecrafting altars
				region == 8267 ||
				region == 8523 ||
				region == 8779 ||
				region == 9035 ||
				region == 9291 ||
				region == 9547 ||
				region == 9803 ||
				region == 10059 ||
				region == 10315 ||
				region == 10571 ||
				region == 10827 ||
				region == 11083 ||
				region == 11339 ||
				region == 11595 ||
				region == 12875 ||
				// Overworld runecrafting altars
				isInArea(player, 2141, 3875, 2168, 3846) || // Lunar isle
				isInArea(player, 1702, 3839, 1742, 3818) || region == 6972 || region == 7228 || // Soul/Blood altars
				region == 12119 // Ourania Altar
			);
	}

	private boolean isHerblore(Player player, int region)
	{
		return enabledSkill(config.skillEnabledHerblore()) &&
			(
				// Mastering Mixology
				isInArea(player, 1380, 9335, 1404, 9305)
			);
	}

	private boolean isSoulWarsZeal(Player player, int region)
	{
		return
			(region == 8748 && enabledLobby(config.bossEnabledSoulWarsZeal())) ||
			((region == 8493  || region == 8749 || region == 9005) && enabledAlways(config.bossEnabledSoulWarsZeal()));
	}

	private boolean isLastManStanding(Player player, int region)
	{
		return isInArea(player, 3138, 3645, 3145, 3632) && enabledLobby(config.bossEnabledLastManStanding());
	}

	private boolean isRiftsClosed(Player player, int region)
	{
		return
			(isInArea(player, 3601, 9483, 3629, 9458) && enabledLobby(config.bossEnabledRiftsClosed())) ||
			(region == 14484 && enabledAlways(config.bossEnabledRiftsClosed()));
	}

	private boolean isAbyssalSire(Player player, int region)
	{
		return
			(region == 12106 && enabledLobby(config.bossEnabledAbyssalSire())) ||
			((region == 11851 || region == 11850 || region == 12363 || region == 12362) && enabledAlways(config.bossEnabledAbyssalSire()));
	}

	private boolean isAlchemicalHydra(Player player, int region)
	{
		return region == 5536 && enabledLobby(config.bossEnabledAlchemicalHydra());
	}

	private boolean isAmoxliatl(Player player, int region)
	{
		return isInArea(player, 1620, 9621, 1601, 9644) && enabledLobby(config.bossEnabledAmoxliatl());
	}

	private boolean isAraxxor(Player player, int region)
	{
		return enabledLobby(config.bossEnabledAraxxor()) && (region == 14745 || isInArea(player, 3653, 3408, 3662, 3400));
	}

	private boolean isArtio(Player player, int region)
	{
		return
			(isInArea(player, 3108, 3679, 3123, 3665) && enabledLobby(config.bossEnabledArtio())) ||
			(region == 7092 && enabledAlways(config.bossEnabledArtio()));
	}

	private boolean isBarrowsChests(Player player, int region)
	{
		return
			(region == 14131 && enabledLobby(config.bossEnabledBarrowsChests())) ||
			(region == 14231 && enabledAlways(config.bossEnabledBarrowsChests())) ;
	}

	private boolean isBryophyta(Player player, int region)
	{
		return isInArea(player, 3166, 9902, 9180, 9894) && enabledLobby(config.bossEnabledBryophyta());
	}

	private boolean isCallisto(Player player, int region)
	{
		return 
			(isInArea(player, 3282, 3857, 3303, 3840) && enabledLobby(config.bossEnabledCallisto())) ||
			(region == 13473 && enabledAlways(config.bossEnabledCallisto()));
	}

	private boolean isCalvarion(Player player, int region)
	{
		return
			(isInArea(player, 3176, 3687, 3183, 3678) && enabledLobby(config.bossEnabledCalvarion())) ||
			(region == 7604 && enabledAlways(config.bossEnabledCalvarion()));
	}

	private boolean isCerberus(Player player, int region)
	{
		return region == 5139 && enabledLobby(config.bossEnabledCerberus());
	}

	private boolean isChambersOfXeric(Player player, int region)
	{
		return (isInArea(player, 1221, 3578, 1265, 3551) && enabledRaidNormal(config.bossEnabledChambersOfXeric()));
	}

	private boolean isChambersOfXericChallengeMode(Player player, int region)
	{
		return (isInArea(player, 1221, 3578, 1265, 3551) && enabledRaidExpert(config.bossEnabledChambersOfXeric()));
	}

	private boolean isChaosElemental(Player player, int region)
	{
		return isInArea(player, 3274, 3933, 3197, 3904) && enabledLobby(config.bossEnabledChaosElemental());
	}

	private boolean isChaosFanatic(Player player, int region)
	{
		return isInArea(player, 2960, 3858, 2986, 3831) && enabledLobby(config.bossEnabledChaosFanatic());
	}

	private boolean isCommanderZilyana(Player player, int region)
	{
		return (isInArea(player, 2909, 5257, 2932, 5276) && enabledLobby(config.bossEnabledCommanderZilyana())) ||
			(region == 11601 && enabledAlways(config.bossEnabledCommanderZilyana()));
	}

	private boolean isCorporealBeast(Player player, int region)
	{
		return 
			(isInArea(player, 2971, 4260, 2962, 4250, 2) && enabledLobby(config.bossEnabledCorporealBeast())) ||
			(region == 11842 && enabledAlways(config.bossEnabledCorporealBeast()));
	}

	private boolean isCrazyArchaeologist(Player player, int region)
	{
		return isInArea(player, 2967, 3719, 2995, 3693) && enabledLobby(config.bossEnabledCrazyArchaeologist());
	}

	private boolean isDagannothPrime(Player player, int region)
	{
		return false;
	}

	private boolean isDagannothRex(Player player, int region)
	{
		return false;
	}

	private boolean isDagannothSupreme(Player player, int region)
	{
		return false;
	}

	private boolean isDerangedArchaeologist(Player player, int region)
	{
		return isInArea(player, 3657, 3735, 3700, 3712) && enabledLobby(config.bossEnabledDerangedArchaeologist());
	}

	private boolean isDukeSucellus(Player player, int region)
	{
		return false;
	}

	private boolean isGeneralGraardor(Player player, int region)
	{
		return (isInArea(player, 2862, 5369, 2840, 5338, 2) && enabledLobby(config.bossEnabledGeneralGraardor())) ||
			(region == 11347 && enabledAlways(config.bossEnabledGeneralGraardor()));
	}

	private boolean isGiantMole(Player player, int region)
	{
		return
			(isInArea(player, 2983, 3389, 3006, 3380) && enabledLobby(config.bossEnabledGiantMole())) ||
			((region == 6993 || region == 6992) && enabledAlways(config.bossEnabledGiantMole()));
	}

	private boolean isGrotesqueGuardians(Player player, int region)
	{
		return (isInArea(player, 3429, 3545, 3405, 3531, 2) && enabledLobby(config.bossEnabledGrotesqueGuardians()));
	}

	private boolean isHespori(Player player, int region)
	{
		return (isInArea(player, 1242, 3739, 1223, 3720) || region == 5021) && enabledLobby(config.bossEnabledHespori());
	}

	private boolean isKalphiteQueen(Player player, int region)
	{
		return ((region == 13972 && isOnPlane(player, 2)) && enabledLobby(config.bossEnabledKalphiteQueen())) ||
			((region == 13972 && isOnPlane(player, 0)) && enabledAlways(config.bossEnabledKalphiteQueen()));
	}

	private boolean isKingBlackDragon(Player player, int region)
	{
		return (isInArea(player, 3062, 10251, 3072, 10263) && enabledLobby(config.bossEnabledKingBlackDragon())) ||
			(region == 9033 && enabledAlways(config.bossEnabledKingBlackDragon()));
	}

	private boolean isKraken(Player player, int region)
	{
		return
			(isInArea(player, 2270, 10019, 2288, 10008) && enabledLobby(config.bossEnabledKraken())) ||
			(isInArea(player, 2290, 10044, 2269, 10022) && enabledAlways(config.bossEnabledKraken()));
	}

	private boolean isKreeArra(Player player, int region)
	{
		return (isInArea(player, 2822, 5294, 2854, 5279, 2) && enabledLobby(config.bossEnabledKreeArra())) ||
			(region == 11346 && enabledAlways(config.bossEnabledKreeArra()));
	}

	private boolean isKrilTsutsaroth(Player player, int region)
	{
		return (isInArea(player, 2938, 5333, 2909, 5366, 2) && enabledLobby(config.bossEnabledKrilTsutsaroth())) ||
			(region == 11603 && enabledAlways(config.bossEnabledKrilTsutsaroth()));
	}

	private boolean isLunarChests(Player player, int region)
	{
		return
			((region == 5527 || region == 6039 || region == 6037 || region == 5525 || region == 5782) && isOnPlane(player, 0) && enabledLobby(config.bossEnabledLunarChests())) ||
			((region == 6038 || region == 5783 || region == 5526) && enabledAlways(config.bossEnabledLunarChests()));
	}

	private boolean isMimic(Player player, int region)
	{
		return ((isInArea(player, 1633, 3582, 1657, 3561) || isInArea(player, 1633, 3582, 1657, 3561, 1)) && enabledLobby(config.bossEnabledMimic()));
	}

	private boolean isNex(Player player, int region)
	{
		return false;
	}

	private boolean isNightmare(Player player, int region)
	{
		return region == 15256 && enabledLobby(config.bossEnabledNightmare());
	}

	private boolean isPhosanisNightmare(Player player, int region)
	{
		return false;
	}

	private boolean isObor(Player player, int region)
	{
		return isInArea(player, 3094, 9822, 3105, 9841) && enabledLobby(config.bossEnabledObor());
	}

	private boolean isPhantomMuspah(Player player, int region)
	{
		return isInArea(player, 2907, 10313, 2918, 10324) && enabledLobby(config.bossEnabledPhantomMuspah());
	}

	private boolean isSarachnis(Player player, int region)
	{
		return
			(isInArea(player, 1839, 9912, 1849, 9919) && enabledLobby(config.bossEnabledSarachnis())) ||
			(region == 7322 && enabledAlways(config.bossEnabledSarachnis()));
	}

	private boolean isScorpia(Player player, int region)
	{
		return
			(isInArea(player, 3260, 3960, 3216, 3934) && enabledLobby(config.bossEnabledScorpia())) ||
			(region == 12961 && enabledAlways(config.bossEnabledScorpia()));
	}

	private boolean isScurrius(Player player, int region)
	{
		return
			(isInArea(player, 3264, 9878, 3282, 9864) && enabledLobby(config.bossEnabledScurrius())) ||
			(isInArea(player, 3308, 9858, 3289, 9877) && enabledAlways(config.bossEnabledScurrius()));
	}

	private boolean isSkotizo(Player player, int region)
	{
		return isInArea(player, 1667, 10051, 1660, 10044) && enabledLobby(config.bossEnabledSkotizo());
	}

	private boolean isSolHeredit(Player player, int region)
	{
		return region == 7316 && enabledLobby(config.bossEnabledSolHeredit());
	}

	private boolean isSpindel(Player player, int region)
	{
		return (isInArea(player, 3177, 3750, 3189, 3730) && enabledLobby(config.bossEnabledSpindel())) ||
			(region == 6580 && enabledAlways(config.bossEnabledSpindel()));
	}

	private boolean isTempoross(Player player, int region)
	{
		return ((region == 12588 || region == 12332) && enabledLobby(config.bossEnabledTempoross())) ||
			(region == 12078 && enabledAlways(config.bossEnabledTempoross()));
	}

	private boolean isTheHueycoatl(Player player, int region)
	{
		return
			(isInArea(player, 1521, 3296, 1538, 3285) && enabledLobby(config.bossEnabledTheHueycoatl())) ||
			(isInArea(player, 1501, 3296, 1534, 3269) && enabledAlways(config.bossEnabledTheHueycoatl()));
	}

	private boolean isTheLeviathan(Player player, int region)
	{
		return false;
	}

	private boolean isTheWhisperer(Player player, int region)
	{
		return false;
	}

	private boolean isTheatreOfBlood(Player player, int region)
	{
		return (isInArea(player, 3640, 3235, 3684, 3203) && enabledRaidNormal(config.bossEnabledTheatreOfBlood()));
	}

	private boolean isTheatreOfBloodHardMode(Player player, int region)
	{
		return (isInArea(player, 3640, 3235, 3684, 3203) && enabledRaidExpert(config.bossEnabledTheatreOfBlood()));
	}

	private boolean isThermonuclearSmokeDevil(Player player, int region)
	{
		return ((isInArea(player, 2377, 9469, 2430, 9412) || isInArea(player, 2409, 3064, 2416, 3054)) && enabledLobby(config.bossEnabledThermonuclearSmokeDevil())) ||
			(isInArea(player, 2377, 9460, 2348, 9436) && enabledAlways(config.bossEnabledThermonuclearSmokeDevil()));
	}

	private boolean isTombsOfAmascut(Player player, int region)
	{
		return (region == 13454 && enabledRaidNormal(config.bossEnabledTombsOfAmascut()));
	}

	private boolean isTombsOfAmascutExpert(Player player, int region)
	{
		return (region == 13454 && enabledRaidExpert(config.bossEnabledTombsOfAmascut()));
	}

	private boolean isVenenatis(Player player, int region)
	{
		return (isInArea(player, 3309, 3808, 3327, 3782) && enabledLobby(config.bossEnabledVenenatis())) ||
			(region == 13727 && enabledAlways(config.bossEnabledVenenatis()));
	}

	private boolean isVetion(Player player, int region)
	{
		return
			(isInArea(player, 3212, 3798, 3231, 3778) && enabledLobby(config.bossEnabledVetion())) ||
			(region == 13215 && enabledAlways(config.bossEnabledVetion()));
	}
	private boolean isCorruptedGauntlet(Player player, int region)
	{
		return region == 12127 && enabledLobby(config.bossEnabledCorruptedGauntlet());
	}

	private boolean isRoyalTitans(Player player, int region)
	{
		return
			(isInArea(player, 2948, 9571, 2958, 9583) && enabledLobby(config.bossEnabledRoyalTitans())) ||
			(region == 11669 && enabledAlways(config.bossEnabledRoyalTitans()));
	}

	private boolean isTzKalZuk(Player player, int region)
	{
		return isInArea(player, 2482, 5124, 2509, 5090) && enabledLobby(config.bossEnabledTzKalZuk());
	}

	private boolean isTzTokJad(Player player, int region)
	{
		return isInArea(player, 2457, 5162, 2417, 5183) && enabledLobby(config.bossEnabledTzTokJad());
	}

	private boolean isVardorvis(Player player, int region)
	{
		return false;
	}

	private boolean isVorkath(Player player, int region)
	{
		return(region == 9023 && !isInArea(player, 2261, 4054, 2283, 4076) && enabledLobby(config.bossEnabledVorkath()));
	}

	private boolean isWintertodt(Player player, int region)
	{
		return
			(region == 6461 && enabledLobby(config.bossEnabledWintertodt())) ||
			(region == 6462 && enabledAlways(config.bossEnabledWintertodt()));
	}

	private boolean isYama(Player player, int region)
	{
		return
			(region == 5789 && enabledLobby(config.bossEnabledYama())) ||
			(region == 6045 && enabledAlways(config.bossEnabledYama()));
	}

	private boolean isZalcano(Player player, int region)
	{
		return
			(isInArea(player, 3028, 6063, 3039, 6071) && enabledLobby(config.bossEnabledZalcano())) ||
			(region == 12126 && enabledAlways(config.bossEnabledZalcano()));
	}

	private boolean isZulrah(Player player, int region)
	{
		return region == 8751 && enabledLobby(config.bossEnabledZulrah());
	}
}

package com.example;

import com.killcountviewer.KillCountViewerPlugin;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ExamplePluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(KillCountViewerPlugin.class);
		RuneLite.main(args);
	}
}
