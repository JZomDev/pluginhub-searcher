package com.NPCTaunts;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class NPCTauntsPluginTest
{
	@SuppressWarnings("unchecked")
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(NPCTauntsPlugin.class);
		RuneLite.main(args);
	}
}
package com.NPCTaunts;

import com.google.inject.Provides;

import javax.inject.Inject;
import java.sql.Time;
import java.time.Duration;
import java.time.Instant;
import java.time.temporal.ChronoField;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.awt.Color;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.client.chat.ChatMessageBuilder;
import net.runelite.client.chat.ChatMessageManager;
import net.runelite.client.chat.QueuedMessage;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.EventBus;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.JagexColors;
import net.runelite.client.util.Text;
import net.runelite.client.config.ChatColorConfig;
import net.runelite.api.MessageNode;
import net.runelite.api.events.GameStateChanged;


@Slf4j
@PluginDescriptor(
        name = "NPCTaunts"
)
public class NPCTauntsPlugin extends Plugin {
    static final int FIGHT_CAVE_REGION = 9551;
    static final int INFERNO_REGION = 9043;
    static final int COLOSSEUM_REGION = 7216;
    private static final int ZULRAH_SPAWN_REGION_ID = 9007;
    private static final int ZULRAH_REGION_ID = 9008;
    private static final List<Integer> ZulRegionIDs = Arrays.asList(ZULRAH_SPAWN_REGION_ID, ZULRAH_REGION_ID);
    private static final List<String> Gauntletminions = Arrays.asList("Crystalline Bat", "Crystalline Rat", "Crystalline Spider", "Corrupted Rat", "Corrupted Spider", "Corrupted Bat");
    private static final int[] VARBIT_MULTILOC_IDS_CHEST = new int[]{
            14356, 14357, 14358, 14359, 14360, 14370, 14371, 14372
    };
    private static final int VARBIT_VALUE_CHEST_KEY = 2;
    private static final int VARBIT_ID_SARCOPHAGUS = 14373;
    private static final int VARBIT_MODIFIER_SELECTED = 9788;
    private static final int SCRIPT_MODIFIER_SELECT_INIT = 4931;
    private final List<Integer> modifierOptions = new ArrayList<>(3);
    private final List<String> modifiers = Arrays.asList("Mantimayhem", "Reentry", "Bees!", "Volatility", "Blasphemy", "Relentless", "Quartet", "Totemic", "Doom", "Dynamic Duo", "Solarflare", "Myopia", "Frailty", "Red Flag");
    @Inject
    private Client client;
    @Inject
    private NPCTauntsConfig config;
    @Inject
    private Random r = new Random();
    @Inject
    private ChatMessageManager chatMessageManager;
    @Inject
    private EventBus eventBus;
    @Inject
    private ChatColorConfig chatColorConfig;
    private MessageNode messageNode;
    private boolean Died;
    private Instant ForgetTime;
    private String lastOpponent;
    private String Killer;
    private boolean pvpactive;
    private int lastdamagetaken;
    private int finaldamagetaken;
    private boolean Jad;
    private boolean Zuk;
    private boolean Sol;
    private int TOAREWARD_REGION_ID = 14672;
    private boolean prehunleffminion;
    private boolean pvpdeath;
    private boolean sarcophagusIsPurple;
    private boolean purpleIsMine;
    private int gauntletdropamount;
    private List<String> PKTaunts = Arrays.asList("Sit rat", "Smited", "Back to lumby", "Stick to F2p nub", "Sit ******* ******", "Cya in Lumby", "L000000000L", "Sit", "Rat", "TY");
    private List<Integer> Recentlycommented = new ArrayList<>();
    //Prevents minimus from commenting during waves
    private List<Integer> Blacklist = new ArrayList<>(12808);
    private List<NPC> SurroundingNPCS = new ArrayList<>();
    private List<String> DropsReceived = new ArrayList<>();
    private String colotitle = "";
    private int wave;
    private int Modifierselected = -1;

    @Override
    protected void startUp() throws Exception {
        log.info("NPC Taunts started!");
        if (config.exlusivecustomtaunts()) {
            NPCTauntsNPClist.bosslist.clear();
            NPCTauntsNPClist.npclist.clear();
        } else {
            NPCTauntsNPClist.loadbosslist();
            NPCTauntsNPClist.loadnpclist();
        }
        NPCTauntsNPClist.loadcustomlists(config);
    }

    @Override
    protected void shutDown() throws Exception {
        Forget();
        Modifierselected = -1;
        colotitle = "";
        wave = 0;
        log.info("NPC Taunts stopped!");
    }


    private int getRegionId() {
        Player player = client.getLocalPlayer();
        if (player == null) {
            return -1;
        }
        return WorldPoint.fromLocalInstance(client, player.getLocalLocation()).getRegionID();
    }

    private String Phrase(List<String> p) {
        int rand = r.nextInt(p.size());
        int b = 0;
        while (p.get(rand).contains("{Enemyname}") && Killer == null && b < 4) {
            rand = r.nextInt(p.size());
            b++;
        }
        String s = p.get(rand);
        if (s.contains("{Enemyname}")) {
            if (b < 4) {
                String killername = Killer;
                s = s.replace("{Enemyname}", killername);
            } else {
                s = s.replace("{Enemyname}", "mighty foe");

            }
        }
        if (s.contains("{Playername}")) {
            String playername = (String) client.getLocalPlayer().getName();
            s = s.replace("{Playername}", playername);
        }
        if (s.contains("{Title}")) {
            if (!colotitle.matches("")) {
                s = s.replace("{Title}", colotitle);
            } else {
                s = s.replace("{Title}", "colosseum enjoyer");
            }
        }
        if (s.contains("{Wave}")) {
            String Wave = Integer.toString(wave);
            s = s.replace("{Wave}", Wave);
        }
        if (s.contains("{Mod}")) {
            if (Modifierselected == -1) {
                s = s.replace("{Mod}", "That last modifier");
                ;
            } else {
                String mod = modifiers.get(Modifierselected);
                s = s.replace("{Mod}", mod);
            }
        }
        if (s.contains("{Lasthit}")) {
            String lasthit = Integer.toString(lastdamagetaken);
            s = s.replace("{Lasthit}", lasthit);
        }
        return s;
    }

    @Subscribe
    public void onGameTick(GameTick event) {
        if (Died == false || ForgetTime == null) {
            return;
        }
        if (Instant.now().compareTo(ForgetTime) >= 0) {
            Forget();
        }
    }

    @Subscribe
    public void onChatMessage(ChatMessage event) {
        String chatMsg = Text.removeTags(event.getMessage()); //remove color and linebreaks
        if (chatMsg.startsWith("Minimus: A") && (chatMsg.contains("approaches!"))) {
            String colosseumtitle = chatMsg.replace("Minimus: A ", "").replace(" approaches!", "");
            colotitle = colosseumtitle;
        }
        if (chatMsg.startsWith("Wave:")) {
            wave = Integer.valueOf(chatMsg.replace("Wave: ", ""));
        }
        if ((chatMsg.contains(client.getLocalPlayer().getName() + " received a drop:")
                || chatMsg.contains("Valuable drop:")
                || chatMsg.contains("Untradeable drop:"))
                && getRegionId() == 12127) {//&& !Died put this back after testing
            NPC Brynn = getSurroundingNPCnames("Bryn");
            DropsReceived.add(chatMsg);
            if (DropsReceived.size() >= gauntletdropamount) {
                if (getDrops("Enhanced")) {
                    taunt(Brynn, Phrase(Arrays.asList(NPCTauntsPhrases.BrynnEnhanced)));
                } else if (getDrops("weapon seed")) {
                    taunt(Brynn, Phrase(Arrays.asList(NPCTauntsPhrases.BrynnWeaponseed)));
                } else if (getDrops("armour seed")) {
                    taunt(Brynn, Phrase(Arrays.asList(NPCTauntsPhrases.BrynnArmorseed)));
                } else {
                    taunt(Brynn, Phrase(Arrays.asList(NPCTauntsPhrases.BrynnNoUniq)));
                }
                DropsReceived.clear();
            }
        }


        messageNode = event.getMessageNode();
    }

    @Subscribe
    public void onScriptPreFired(ScriptPreFired pre) {
        if (pre.getScriptId() == SCRIPT_MODIFIER_SELECT_INIT) {
            modifierOptions.clear();
            Object[] args = pre.getScriptEvent().getArguments();
            modifierOptions.add((Integer) args[2]);
            modifierOptions.add((Integer) args[3]);
            modifierOptions.add((Integer) args[4]);
        }
    }

    private void SelectedModifier() {
        if (modifierOptions.isEmpty()) {
            log.debug("Modifier options were not loaded");
            return;
        }

        int selectedoption = client.getVarbitValue(VARBIT_MODIFIER_SELECTED);
        if (selectedoption == 0) {
            log.debug("Modifier selected varbit = 0");
            return;
        }

        Modifierselected = modifierOptions.get(selectedoption - 1);
        modifierOptions.clear();
        if (Modifierselected == -1) {
            log.debug("Failed to select modifier");
            ;
        }
    }


    @Subscribe
    public void onInteractingChanged(InteractingChanged event) {
        Actor opponent;
        if (event.getSource().equals(client.getLocalPlayer())) {
            opponent = event.getTarget();
            if (event.getTarget() instanceof Player) {
                pvpactive = true;
            } else {
                pvpactive = false;
            }

        } else if (event.getTarget() == null) {
            return;
        } else if (event.getTarget().equals(client.getLocalPlayer())) {
            opponent = event.getSource();
            if (event.getSource() instanceof Player) {
                pvpactive = true;
            } else {
                pvpactive = false;
            }
        } else // if neither source or target was the player, skip
        {
            return;
        }
        if (opponent != null) {
            lastOpponent = opponent.getName();
        }
    }

    @Subscribe
    public void onHitsplatApplied(HitsplatApplied hitsplatApplied) {
        Actor actor = hitsplatApplied.getActor();
        Hitsplat hitsplat = hitsplatApplied.getHitsplat();
        if (actor instanceof Player) {
            Player player = (Player) actor;

            if (player == client.getLocalPlayer()) {
                lastdamagetaken = hitsplat.getAmount();
            }
        }
    }

    @Subscribe
    public void onVarbitChanged(VarbitChanged varbitChanged) {
        final int Hunleff = client.getVarbitValue(9177);
        if (Hunleff == 1) {
            if (getSurroundingNPCnames("Crystalline Hunllef") != null) {
                gauntletdropamount = 3;
            }
            if (getSurroundingNPCnames("Corrupted Hunllef") != null) {
                gauntletdropamount = 4;
            }
        }
    }

    @Subscribe
    public void onActorDeath(ActorDeath event) {
        Actor actor = event.getActor();
        if (actor instanceof Player) {
            Player player = (Player) actor;

            if (player == client.getLocalPlayer()) {
                Died = true;
                Killer = lastOpponent;
                finaldamagetaken = lastdamagetaken;
                lastOpponent = null;
                Recentlycommented.clear();
                final Duration forgetduration = Duration.ofMinutes(config.ForgetTimeDelay());
                ForgetTime = Instant.now().plus(forgetduration);
                prehunleffminion = false;

                pvpdeath = false;

                //Zulrah
                final int regionId = getRegionId();
                if (ZulRegionIDs.contains(regionId)) {
                    if (!NPCTauntsNPClist.npclist.contains(new NPCTauntsNPC("Priestess Zul-Gwenwynig", NPCTauntsPhrases.Zul))) {
                        NPCTauntsNPClist.npclist.add(new NPCTauntsNPC("Priestess Zul-Gwenwynig", NPCTauntsPhrases.Zul));
                    }
                } else {
                    int T = NPCTauntsNPClist.npclistcontains("Priestess Zul-Gwenwynig");
                    while (T > 0) {
                        NPCTauntsNPClist.npclist.remove(T);
                        T = NPCTauntsNPClist.npclistcontains("Priestess Zul-Gwenwynig");
                    }
                }

                //Fightcaves
                if (regionId == FIGHT_CAVE_REGION) {
                    if (Jad) {
                        int T = NPCTauntsNPClist.npclistcontains("TzHaar-Mej-Jal");
                        while (T > 0) {
                            NPCTauntsNPClist.npclist.remove(T);
                            T = NPCTauntsNPClist.npclistcontains("TzHaar-Mej-Jal");
                        }
                        NPCTauntsNPClist.npclist.add(new NPCTauntsNPC("TzHaar-Mej-Jal", NPCTauntsPhrases.Jad));
                    } else {
                        int T = NPCTauntsNPClist.npclistcontains("TzHaar-Mej-Jal");
                        while (T > 0) {
                            NPCTauntsNPClist.npclist.remove(T);
                            T = NPCTauntsNPClist.npclistcontains("TzHaar-Mej-Jal");
                        }
                        NPCTauntsNPClist.npclist.add(new NPCTauntsNPC("TzHaar-Mej-Jal", NPCTauntsPhrases.PreJad));
                    }
                }
                //Inferno
                if (regionId == INFERNO_REGION) {
                    if (Zuk) {
                        int T = NPCTauntsNPClist.npclistcontains("TzHaar-Ket-Keh");
                        while (T > 0) {
                            NPCTauntsNPClist.npclist.remove(T);
                            T = NPCTauntsNPClist.npclistcontains("TzHaar-Ket-Keh");
                        }
                        NPCTauntsNPClist.npclist.add(new NPCTauntsNPC("TzHaar-Ket-Kehl", NPCTauntsPhrases.Zuk));
                    } else {
                        int T = NPCTauntsNPClist.npclistcontains("TzHaar-Ket-Keh");
                        while (T > 0) {
                            NPCTauntsNPClist.npclist.remove(T);
                            T = NPCTauntsNPClist.npclistcontains("TzHaar-Ket-Keh");
                        }
                        NPCTauntsNPClist.npclist.add(new NPCTauntsNPC("TzHaar-Ket-Kehl", NPCTauntsPhrases.PreZuk));
                    }
                }
                if (regionId == COLOSSEUM_REGION) {
                    if (wave == 12) {
                        int T = NPCTauntsNPClist.npclistcontains("Minimus");
                        while (T > 0) {
                            NPCTauntsNPClist.npclist.remove(T);
                            T = NPCTauntsNPClist.npclistcontains("Minimus");
                        }
                        NPCTauntsNPClist.npclist.add(new NPCTauntsNPC("Minimus", NPCTauntsPhrases.Sol));
                    } else {
                        int T = NPCTauntsNPClist.npclistcontains("Minimus");
                        while (T > 0) {
                            NPCTauntsNPClist.npclist.remove(T);
                            T = NPCTauntsNPClist.npclistcontains("Minimus");
                        }
                        NPCTauntsNPClist.npclist.add(new NPCTauntsNPC("Minimus", NPCTauntsPhrases.PreSol));
                    }
                }

                //gauntlet maze
                final int GauntletMaze = client.getVarbitValue(9178);
                if (GauntletMaze == 1) {
                    if (Killer != null) {
                        int i = 0;
                        while (i < Gauntletminions.size()) {
                            String min = Gauntletminions.get(i);
                            if (min.contains(Killer)) {
                                prehunleffminion = true;
                                int T = NPCTauntsNPClist.npclistcontains("Bryn");
                                while (T > 0) {
                                    NPCTauntsNPClist.npclist.remove(T);
                                    T = NPCTauntsNPClist.npclistcontains("Bryn");
                                }
                                NPCTauntsNPClist.npclist.add(new NPCTauntsNPC("Bryn", NPCTauntsPhrases.Brynrsb));
                                log.debug("You died to a rat/bat/spoder");
                                return;
                            }
                            i++;
                        }
                    }
                    if (prehunleffminion == false) {
                        int T = NPCTauntsNPClist.npclistcontains("Bryn");
                        while (T > 0) {
                            NPCTauntsNPClist.npclist.remove(T);
                            T = NPCTauntsNPClist.npclistcontains("Bryn");
                        }
                        NPCTauntsNPClist.npclist.add(new NPCTauntsNPC("Bryn", NPCTauntsPhrases.Brynph));
                    }
                }
                //gauntlet boss
                final int Hunleff = client.getVarbitValue(9177);
                if (Hunleff == 1) {
                    int T = NPCTauntsNPClist.npclistcontains("Bryn");
                    while (T > 0) {
                        NPCTauntsNPClist.npclist.remove(T);
                        T = NPCTauntsNPClist.npclistcontains("Bryn");
                    }
                    NPCTauntsNPClist.npclist.add(new NPCTauntsNPC("Bryn", NPCTauntsPhrases.Bryn));
                }

                if (pvpactive) {
                    pvpdeath = true;
                }

                //triggers boss taunts
                if (config.Bosstaunts() && !config.pktaunts()) {
                    for (NPC npc : SurroundingNPCS) {
                        int bossid = NPCTauntsNPClist.bosslistcontains(npc.getName());
                        if (bossid != -1) {
                            bosstaunt(npc, NPCTauntsNPClist.bosslist.get(bossid));
                        }
                    }
                }

                if (config.pktaunts()) {
                    for (NPC npc : SurroundingNPCS) {
                        taunt(npc, Phrase(PKTaunts));
                    }
                }

                if (config.Pleae()) {
                    client.getLocalPlayer().setOverheadCycle(200);
                    client.getLocalPlayer().setOverheadText("Pleae");
                    if (config.dialogbox()) {
                        String chatMessage = new ChatMessageBuilder()
                                .append(getPublicChatMessageColor(), "Pleae")
                                .build();

                        chatMessageManager.queue(QueuedMessage.builder()
                                .type(ChatMessageType.PUBLICCHAT)
                                .sender(client.getLocalPlayer().getName())
                                .name(client.getLocalPlayer().getName())
                                .runeLiteFormattedMessage(chatMessage)
                                .build());
                    }
                }
                SurroundingNPCS.clear();
            }
        }
    }

    @Subscribe
    public void onNpcSpawned(NpcSpawned event) {
        SurroundingNPCS.add(event.getNpc());
        if (event.getNpc().getName() == null) {
            return;
        }
        if (event.getNpc().getName().equals("TzTok-Jad")) {
            Jad = true;

        }
        if (event.getNpc().getName().equals("TzKal-Zuk")) {
            Zuk = true;
        }

        String taunt = null;

        if (Died == false) {
            if (event.getNpc().getName().equals("Hatius Cosaintus")&& (config.ShutHaitus()==false)) {
                taunt(event.getNpc(), Phrase(Arrays.asList(NPCTauntsPhrases.Khaled)));
            }
            return;
        }
        if (Recentlycommented.contains(event.getNpc().getId())) {
            return;
        }
        if (Blacklist.contains(event.getNpc().getId())) {
            return;
        }
        if (event.getNpc().getName().equals("Banker")) {
            if (r.nextInt(100) > 50) return;
        }
        int npclistid = NPCTauntsNPClist.npclistcontains(event.getNpc().getName());
        if (npclistid != -1) {
            npctaunt(event.getNpc(), NPCTauntsNPClist.npclist.get(npclistid));
        }

        if (event.getNpc().getName().equals("Osmumten") && getRegionId() == TOAREWARD_REGION_ID && config.Loottaunts()) {
            ToApurpleCheck();
            if (sarcophagusIsPurple) {
                if (purpleIsMine) {
                    taunt = Phrase(Arrays.asList(NPCTauntsPhrases.OsmuYourPurple));
                } else {
                    taunt = Phrase(Arrays.asList(NPCTauntsPhrases.OsmuFriendPurple));
                }
            } else {
                taunt = Phrase(Arrays.asList(NPCTauntsPhrases.OsmuNoPurple));
            }
            event.getNpc().setOverheadCycle(500);
            event.getNpc().setOverheadText(taunt);
            Sendchatmessage(event.getNpc(), taunt);
        }
        if (finaldamagetaken == 69) {
            if (r.nextInt(100) > 50) {
                taunt(event.getNpc(), Phrase(Arrays.asList(NPCTauntsPhrases.SixNine)));
                Recentlycommented.add(event.getNpc().getId());
            }
        }
        if (finaldamagetaken == 73) {
            if (r.nextInt(100) > 70) {
                taunt(event.getNpc(), Phrase(Arrays.asList(NPCTauntsPhrases.SevenThree)));
                Recentlycommented.add(event.getNpc().getId());
            }
        }
        if (finaldamagetaken == 1) {
            if (r.nextInt(100) > 90) {
                taunt(event.getNpc(), Phrase(Arrays.asList(NPCTauntsPhrases.One)));
                Recentlycommented.add(event.getNpc().getId());
            }
        }
    }

    @Subscribe
    public void onNpcDespawned(NpcDespawned event) {
        SurroundingNPCS.remove(event.getNpc());
        if (event.getNpc().getName() == null) {
            return;
        }
        if (event.getNpc().getName().equals("TzTok-Jad")) {
            Jad = false;
        }
        if (event.getNpc().getName().equals("TzKal-Zuk")) {
            Zuk = false;
        }
        final int regionId = getRegionId();
        if (regionId == COLOSSEUM_REGION && event.getNpc().getName().equals("Minimus")) {
            SelectedModifier();
        }
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged gameStateChanged) {
        //Forget on logout
        if (gameStateChanged.getGameState().getState() < GameState.LOADING.getState()) {
            Forget();
        }
    }

    @Provides
    NPCTauntsConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(NPCTauntsConfig.class);
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event) {
        if (config.exlusivecustomtaunts()) {
            NPCTauntsNPClist.bosslist.clear();
            NPCTauntsNPClist.npclist.clear();
        } else {
            NPCTauntsNPClist.loadbosslist();
            NPCTauntsNPClist.loadnpclist();
        }
        NPCTauntsNPClist.loadcustomlists(config);
    }

    private void bosstaunt(NPC npc, NPCTauntsNPC tauntNPC) {
        taunt(npc, Phrase(tauntNPC.phrases));
    }

    private void npctaunt(NPC npc, NPCTauntsNPC tauntNPC) {
        taunt(npc, Phrase(tauntNPC.phrases));
        Recentlycommented.add(npc.getId());
    }

    private void taunt(NPC npc, String taunt) {
        npc.setOverheadCycle(300);
        npc.setOverheadText(taunt);
        Sendchatmessage(npc, taunt);
    }

    private void Sendchatmessage(NPC npc, String taunt) {
        if (config.dialogbox()) {
            String chatMessage = new ChatMessageBuilder()
                    .append(getPublicChatMessageColor(), taunt)
                    .build();

            chatMessageManager.queue(QueuedMessage.builder()
                    .type(ChatMessageType.PUBLICCHAT)
                    .sender(npc.getName())
                    .name(npc.getName())
                    .runeLiteFormattedMessage(chatMessage)
                    .build());
        }
        if (config.texttospeech()) {
            OverheadTextChanged chatmessage1 = new OverheadTextChanged(npc, taunt);
            eventBus.post(chatmessage1);
        }
    }

    private Color getPublicChatMessageColor() {
        boolean isChatboxTransparent = client.isResized() && client.getVarbitValue(Varbits.TRANSPARENT_CHATBOX) == 1;
        Color messageColor;


        if (isChatboxTransparent) {
            messageColor = JagexColors.CHAT_PUBLIC_TEXT_TRANSPARENT_BACKGROUND;//default

            if (chatColorConfig.transparentPublicChat() != null) {
                messageColor = chatColorConfig.transparentPublicChat();
            }
        } else {

            messageColor = JagexColors.CHAT_PUBLIC_TEXT_OPAQUE_BACKGROUND;//default

            if (chatColorConfig.opaquePublicChat() != null) {
                messageColor = chatColorConfig.opaquePublicChat();
            }
        }
        return messageColor;
    }

    private NPC getSurroundingNPCnames(String name) {
        NPC npc = null;
        for (int i = 0; i < SurroundingNPCS.size(); i++) {
            if (SurroundingNPCS.get(i).getName().equals(name)) {
                npc = SurroundingNPCS.get(i);
            }
        }
        return npc;
    }

    private boolean getDrops(String name) {
        boolean bool = false;
        for (int i = 0; i < DropsReceived.size(); i++) {

            if (DropsReceived.get(i).contains(name)) {
                bool = true;
            }
        }
        return bool;
    }

    private void ToApurpleCheck() {
        sarcophagusIsPurple = client.getVarbitValue(VARBIT_ID_SARCOPHAGUS) % 2 != 0;
        purpleIsMine = true;

        for (final int varbitId : VARBIT_MULTILOC_IDS_CHEST) {
            if (client.getVarbitValue(varbitId) == VARBIT_VALUE_CHEST_KEY) {
                purpleIsMine = false;
                break;
            }
        }
    }

    private void Forget() {
        Died = false;
        Recentlycommented.clear();
        lastOpponent = null;
        Killer = null;
        lastdamagetaken = 0;
        finaldamagetaken = 0;
    }

}


package com.NPCTaunts;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("NPCTaunts")
public interface NPCTauntsConfig extends Config
{
	@ConfigItem(
			keyName = "ForgetTime",
			name = "Forget time",
			description = "How long should everyone remember your death. Time specified in minutes",
			position = 1
	)
	default int ForgetTimeDelay()
	{
		return 5;
	}
	@ConfigItem(
			keyName = "Chatmessage",
			name = "Chat message",
			description = "Adds taunts to chatbox",
			position = 2
	)
	default boolean dialogbox()
	{
		return true;
	}
	@ConfigItem(
			keyName = "BossTaunts",
			name = "Boss taunts",
			description = "Makes bosses tell you to sit as soon as you die",
			position = 3
	)
	default boolean Bosstaunts()
	{
		return true;
	}
	@ConfigItem(
			keyName = "LootTaunts",
			name = "Loot taunts",
			description = "Enables taunts when you don't receive",
			position = 4
	)
	default boolean Loottaunts()
	{
		return false;
	}
	@ConfigItem(
			keyName = "PKtaunts",
			name = "PK taunts",
			description = "Replaces all boss taunts with PKer taunts",
			position = 5
	)
	default boolean pktaunts()
	{
		return false;
	}

	@ConfigItem(
			keyName = "Pleae",
			name = "Pleae",
			description = "Pleae",
			position = 6
	)
	default boolean Pleae()
	{
		return false;
	}
	@ConfigItem(
			keyName = "ShutUpHaitus",
			name = "Shut up Haitus",
			description = "Shuts Haitus up outside of death",
			position = 7
	)
	default boolean ShutHaitus()
	{
		return false;
	}

	@ConfigItem(
			keyName = "exlusivecustomtaunts",
			name = "Only custom taunts",
			description = "Disables the default taunts in the plugin and only uses custom taunts added in the config",
			position = 8
	)
	default boolean exlusivecustomtaunts()
	{
		return false;
	}
	@ConfigItem(
			keyName = "custombosstaunts",
			name = "Custom Boss Taunts",
			description = "Adds your own taunts to a boss. See readme on how to use",
			position = 9
	)
	default String custombosstaunts()
	{
		return "ExactBossname;Custom Taunt 1:Custom Taunt 2\n"+"ExactBossname2;Custom Taunt 3:Custom Taunt 4";
	}
	@ConfigItem(
			keyName = "customnpctaunts",
			name = "Custom NPC Taunts",
			description = "Adds your own taunts to a NPC. See readme on how to use",
			position = 10
	)
	default String customnpctaunts()
	{
		return "ExactNPCname;Custom Taunt 1:Custom Taunt 2\n"+"ExactNPCname2;Custom Taunt 3:Custom Taunt 4";
	}

	@ConfigItem(
			keyName = "texttospeech",
			name = "Natural Speech TTS",
			description = "Allows the taunts to trigger the Natural Speech TTS plugin",
			position = 11
	)
	default boolean texttospeech()
	{
		return false;
	}



}

package com.NPCTaunts;

import lombok.Getter;
import lombok.Setter;

import javax.lang.model.element.Name;
import java.util.ArrayList;
import java.util.List;

class NPCTauntsNPC {

    public String name;

    public List<String> phrases = new ArrayList<>();

    public NPCTauntsNPC(String npcname, String[] npcphrases) {
        name=npcname;
        for (int i=0; i< npcphrases.length;i++){
        phrases.add(npcphrases[i]);
        }
    }
}

package com.NPCTaunts;

import java.util.Arrays;
import java.util.List;

/**
 * Stores the phrases for specific NPCs
 */
public class NPCTauntsPhrases {

    public static final String[] Hans = {
        "You'll get them next time Tiger!",
        "I've seen everyone end up here again, so don't worry",
        "Get back on that unicorn and show them!",
        "Unlucky!",
        "They got lucky",
        "It's okay {Playername}. I'm here for you"
    };

    public static final String[] Haitus = {
        "RIP Bozo",
        "Sit idiot",
        "Get some better gear maybe you'll live longer",
        "Obtain good pleb",
        "Just buy your cape like I did",
        "Im living in your game rent free",
        "AH! You're just fresh out of tutorial island",
        "Been caught lackin",
        "Dying is not very stylish is it?",
        "Pauper Poor Primitive Peasant",
        "Good thing they don't measure fashionscape skill levels for you",
        "If only your list of deaths was a small as your staff",
        "Buy an adamant longer sword, yours is too short",
        "I fart in your general direction",
        "If only your staff was as mighty as mine",
        "{Playername} sucks at staying alive!"
    };

    public static final String[] Khaled = {
        "I call her chandelier",
        "Let's go golfing",
        "Call me a tennis ball.",
        "We ain't stoppin, let's go shoppin.",
        "That's when you know you're the greatest: when you're the greatest, and people still put odds against you.",
        "I tell myself every day I love my Jacuzzi, I love my marble floors, I love my high ceilings"
    };

    public static final String[] Priff = {
        "Do all humans die this much?",
        "I think that one is special",
        "All that foreign armor doesn't seem to protect them"
    };

    public static final String[] Banker = {
        "Losing the hardcore status: completed",
        "Please stop dying, your bank value can't handle it",
        "Can you ask Death to give us a commission?",
        "Your bank is full of food! Use it!",
        "Next time if you don't respawn on time your bank will be forclosed"
    };

    public static final String[] Squire = {
        "Why do you even respawn here?",
        "You know all the knights make fun of you right?"
    };

    public static final String[] Ferox = {
        "I see {Playername} got PKed",
        "Death is inevitable around here",
        "This isn't good for your KD"
    };

    public static final String[] Wedge = {
        "We're gonna be winning, and frankly, we're gonna be tired of winning.",
        "When you get killed they let you do anything. Grab 'em by the hellcat.",
        "Despite all the negative deaths, covfefe",
        "If {Enemyname} weren't my daughter I'd be dating her",
        "{Playername} is gonna build a wall, and make {Enemyname} pay for it."
    };

    public static final String[] Elise = {
        "Dying is not the vibe, STOP!!!!!!!!!",
        "You loser, RAT!!!"
    };

    public static final String[] Towncrier = {
        "Hear ye, hear ye {Playername} has died to a {Enemyname}!",
        "Listen all a {Enemyname} got the better of {Playername}"
    };

    public static final String[] PreJad = {
        "JalYts! JalYt {Playername} failed the fight caves!",
        "JalYt {Playername} died fighting {Enemyname}!"
    };

    public static final String[] Jad = {
        "JalYt {Playername} thought they could take a hit from TzTok-Jad",
        "JalYt {Playername} thought they could outdamage Yt-HurKot",
        "Can someone clean up JalYt {Playername}'s remains? TzTok-Jad made a mess again"
    };

    public static final String[] PreZuk = {
        "JalYt {Playername} should avoid taking hits from Jal-Xil's heavy boulders",
        "JalYt {Playername} should avoid taking hits from Jal-Zek's powerful magical abilities",
        "JalYt {Playername} should avoid chasing Jal-Nib",
        "JalYt {Playername} has succumbed to the inferno",
        "Cmon man its easier than the colloseum"
    };

    public static final String[] Zuk = {
        "TzKal-Zuk is unbeatable",
        "Was it worth your fire cape?",
        "JalYt {Playername} you must stay behind the shield"
    };

    // If you die to a rat spider or bat
    public static final String[] Brynrsb = {
        "You died to a {Enemyname}????",
        "How in Seren's name did you die to a {Enemyname}?"
    };

    // if you die before going to hunleff
    public static final String[] Brynph = {
        "Stay away from the corrupted gauntlet if you can't even make it to Hunleff",
        "Have you considered doing easier content instead?"
    };

    // if you die during hunleff
    public static final String[] Bryn = {
        "Hey everyone {Playername} died so will get some cod!",
        "Get stomped",
        "Trying running away from the tornadoes",
        "The floor really is lava",
        "Standing still will get you nill",
        "This one would've been the Enhanced weapon seed"
    };

    public static final String[] Zul = {
        "Snake?? SNAKE??? SNAAAAAAAAAAAAAAAAAAKEEE",
        "You have blessed us with a bountiful eel harvest",
        "Zulrah was pleased",
        "Your sacrifice is appreciated",
        "The sacred contract has been fullfilled once again",
        "Zulrah dislikes the taste of your equipment"
    };


    //Minimus if you don't reach wave 12
    public static final String[] PreSol = {
        "A {Title} has passed away!",
        "{Playername} made it to wave {Wave}",
        "{Mod} was too much for you",
        "Death smiles at us all. All a man can do is smile back",
        "Were you not entertained?",
        "This is FORTIS",
        "Maybe don't select {Mod} next time",
        "Cmon man its easier than inferno",
        "Morituri te salutant"
    };

    //Minimus if wave 12 with Sol
    public static final String[] Sol = {
        "A {Title} was defeated by Sol Heredit!",
        "Sol is known for twisting your knob off",
        "People should know when they are conquered",
        "{Mod} makes Sol stronger"
    };

    public static final String[] Nieve= {
            "Lol how did you die idiot",
            "You shouldn't die to {Enemyname}. That's such a noob move",
            "Maybe a metal dragon task will make you stronger"
    };

    public static final String[] Steve= {
            "I see why Nieve died...",
            "Tureal is stronger than you",
            "Brine rats are a better opponent for you"
    };

    //Phrases for when you die to a specific hit
    public static final String[] SixNine = {
        "hehe nice"
    };

    public static final String[] SevenThree = {
        "You little ginger prick",
        "Thanks for the zerker ring man"
    };

    public static final String[] One = {
        "Seriously, you died to a 1? Eat a cabbage next time, then you might survive. Yuck.",
        "Gratz on your Nightmare Mode loss",
        "EAT {Playername}! EAT!"
    };



    //Boss taunts
    public static final String[] Ahrimt = {
            "Ahrim away Ahrim away, Ahrim away Ahrim awa...",
            "Pro tip: Only I can eat blighted food outside PvP areas."
    };
    public static final String[] Karilt = {
            "I guess you didn't change your quick prayers to Protect from Missiles?",
            "Haha now I drained your Agility to 0."
    };
    public static final String[] Dharok = {
            "{Lasthit}! That's a good one.",
            "Come back with more HP so I can hit higher.",
            "Did you know I can hit even higher than {Lasthit}?"
    };
    public static final String[] Guthan = {
            "You're weaker than Torag."
    };
    public static final String[] Toragt = {
            "See? Dual wielding is the future of PKing.",
            "Screw all of your run energy!",
            "I wish they named me Torag the akimbo.",
            "See? Eating glue does make you strong and smart."
    };
    public static final String[] Veract = {
            "Let me defile your corpse. Fancy some Earl Grey?",
            "Maybe my cousin dung eater would like your corpse."
    };
    public static final String[] Scurri = {
            "Who's the rat now?",
            "I'm the king of the rats, bow to me."
    };
    public static final String[] GiantM = {
            "Giant Mole used Dig! It was super effective!",
            "You forgot to sip your prayer potion, didn't ya?"
    };
    public static final String[] Derang = {
            "Plant food!",
            "I stopped one of them but what if more will come now?"
    };
    public static final String[] Supreme = {
            "Split I ranged!",
            "You are supreme embarassing."
    };
    public static final String[] Rex = {
            "Split I specced!",
            "Good luck on the run back.",
            "Get Rext!"
    };
    public static final String[] Prime = {
            "Split I TBed!",
            "Guess you are not in your prime.",
            "Turned you into primeordial soup."
    };
    public static final String[] Sarach = {
            "You're about to throw as Hsss'y fit, aren't you?"
    };
    public static final String[] BloodM = {
            "Thanks for the heals.",
            "Upgrade your defenses."
    };
    public static final String[] BlueMo = {
            "The cold seeps into your bones.",
            "Not even a blue moon will help you beat me."
    };
    public static final String[] Eclips = {
            "Now you see me, now you don't.",
            "I've eclipsed you."
    };
    public static final String[] Kalphi = {
            "Clearly a skill issue."
    };
    public static final String[] Kree = {
            "Justice has been served.",
            "Your issue is your skill.",
            "Hopefully your death doesn't cause another rodent problem."
    };
    public static final String[] Comman = {
            "Saradomin has helped you sit.",
            "{Playername} stood against Saradomin and failed.",
            "Saradomin has guided you to your place, 6 feet under."
    };
    public static final String[] Genera = {
            "Meat's back on the menu boys.",
            "{Playername} weak like goblin."
    };
    public static final String[] Kril = {
            "What's the matter you gonna cry?",
            "Your skull shall make a nice goblet."
    };
    public static final String[] Corpor = {
            "Bwaaaaaak bwuk bwuk.",
            "Flee from me, {playername}!",
            "Begone, {playername}!",
            "Bwuk bwuk bwuk."
    };
    public static final String[] Nex = {
            "Next.",
            "Zaros speaks through me, his message: Sit."
    };
    public static final String[] ChaosF = {
            "Ah there you are squidgy, you were inside their skull all this time.",
            "x n + 1 = r x n ( x n − 1 )"
    };
    public static final String[] Crazya = {
            "Finally peace.",
            "Doesn't knowledge taste good?"
    };
    public static final String[] Scorpi = {
            "Sit rat.",
            "Smited.",
            "Back to lumby.",
            "Stick to F2p nub.",
            "Sit ******* ********.",
            "Cya in Lumby.",
            "L000000000L.",
            "Sit.",
            "Rat.",
            "TY."
    };
    public static final String[] KingBl = {
            "Say hi to Bob for me",
            "They call me the king. This dragonfire you ain't resisting"
    };
    public static final String[] ChaosE = {
            "Lorem ipsum",
            "{Playername}? {Playername}! {Playername}.",
            "Ad sedes, rattus!."
    };
    public static final String[] Revena = {
            "Sit rat.",
            "Smited.",
            "Back to lumby.",
            "Stick to F2p nub.",
            "Sit ******* ********.",
            "Cya in Lumby.",
            "L000000000L.",
            "Sit.",
            "Rat.",
            "TY."
    };
    public static final String[] Calvar = {
            "Sit rat.",
            "Smited.",
            "Back to lumby.",
            "Stick to F2p nub.",
            "Sit ******* ********.",
            "Cya in Lumby.",
            "L000000000L.",
            "Sit.",
            "Rat.",
            "TY."
    };
    public static final String[] Vetio = {
            "Sit rat.",
            "Smited.",
            "Back to lumby.",
            "Stick to F2p nub.",
            "Sit ******* ********.",
            "Cya in Lumby.",
            "L000000000L.",
            "Sit.",
            "Rat.",
            "TY."
    };
    public static final String[] Spinde = {
            "Sit rat.",
            "Smited.",
            "Back to lumby.",
            "Stick to F2p nub.",
            "Sit ******* ********.",
            "Cya in Lumby.",
            "L000000000L.",
            "Sit.",
            "Rat.",
            "TY."
    };
    public static final String[] Venena = {
            "Sit rat.",
            "Smited.",
            "Back to lumby.",
            "Stick to F2p nub.",
            "Sit ******* ********.",
            "Cya in Lumby.",
            "L000000000L.",
            "Sit.",
            "Rat.",
            "TY."
    };
    public static final String[] Artio = {
            "Sit rat.",
            "Smited.",
            "Back to lumby.",
            "Stick to F2p nub.",
            "Sit ******* ********.",
            "Cya in Lumby.",
            "L000000000L.",
            "Sit.",
            "Rat.",
            "TY."
    };
    public static final String[] Callis = {
            "Sit rat.",
            "Smited.",
            "Back to lumby.",
            "Stick to F2p nub.",
            "Sit ******* ********.",
            "Cya in Lumby.",
            "L000000000L.",
            "Sit.",
            "Rat.",
            "TY."
    };
    public static final String[] Zulrah = {
            "Zulratatata.",
            "ssssucker.",
            "You don't need a blowpipe, you blow enough pipe as is.",
            "ssssit."
    };
    public static final String[] Vorkat = {
            "Now let me sleep.",
            "Tell Torfinn to give me half.",
            "The acid reflux is worth it if they die so easily.",
            "Vork you."
    };
    public static final String[] Phanto = {
            "Get grumbled!",
            "Grumbler wins again."
    };
    public static final String[] TheNight = {
            "Goodnight!",
            "Sleep well.",
            "Sweet dreams."
    };
    public static final String[] Phosan = {
            "Goodnight!",
            "Sleep well.",
            "Sweet dreams.",
            "Seems like I'm not just Phosani's nightmare."
    };
    public static final String[] DukeSu = {
            "*Nom nom*",
            "Food for baron."
    };
    public static final String[] TheLev = {
            "Pew pew pew.",
            "What's the matter, can't pray switch?"
    };
    public static final String[] TheWhi = {
            "And so another voice joins the Silent Choir.",
            "Your voice will be one of thousands, singing an eternal silence.",
            "Do not be afraid, my child."
    };
    public static final String[] Vardor = {
            "Keep your head in the game.",
            "Don't get ahead of yourself.",
            "You were 2/3 for sure."
    };
    public static final String[] Obor = {
            "Obor smash!"
    };
    public static final String[] Bryoph = {
            "Go touch grass."
    };
    public static final String[] TheMim = {
            "Oh no you overdosed on sugar",
            "You got stuck on the sticky",
            "I'll mimic a coffin for you"
    };
    public static final String[] Hespor = {
            "I needed 32 hours to grow to become stronger than you. What's your excuse?",
            "Stop using me as a cheap bank, you ungrateful UIM"
    };
    public static final String[] Skotiz = {
            "Hopfully I get the 1/65 Lil' {Playername} this kill!",
            "What are the odds to get a Jar of Humanity this kill?"
    };
    public static final String[] GrotesDu = {
            "This is hopeless go to bed"
    };
    public static final String[] GrotesDa = {
            "You have to get up earlier to beat me"
    };
    public static final String[] Abyssa = {
            "Imma firin' mah laz0r!",
            "Sire used Explode! It was super effective!"
    };
    public static final String[] Kraken = {
            "I'm better at splashing than you!",
            "Splish splash!"
    };
    public static final String[] Cerber = {
            "Arrooo",
            "Thhhhbt!",
            "Woof woof"
    };
    public static final String[] Thermo = {
            "Now you see me, now you're dead.",
            "You're an inspiration for birth control",
            "Your ass is grass, and I've got the weed whacker",
            "Your face, your ass - what's the difference?"
    };
    public static final String[] Alchem = {
            "Stay hydrated.",
            "Go back to chemistry class.",
            "Tell Konar I said hi."
    };
    public static final String[] Hun = {
            "The only enhanced you'll see is enhanced failure.",
            "You're stuck in this prison with me.",
            "Stick to regular gauntlet.",
            "I don't think perfected armor is even enough for you..."
    };
    public static final String[] TzTok = {
            "No cheese strats for cheese cape.",
            "I gave you plenty of time to react...",
            "Your hands aren't the only thing I can vibrate."
    };
    public static final String[] TzKal = {
            "lol",
            "git gud",
            "gf",
            "rip bozo",
            "idiot",
            "?"
    };

    public static final String[] Winter = {
            "I pour out this cold for the boys.",
            "Getting interrupted by cold is a skill issue.",
            "Feelin' hot, hot, hot..."
    };
    public static final String[] Zalcan = {
            "Imagine dying to a skilling boss.",
            "Even lvl 3 skillers consider me a 0-damage boss."
    };
    public static final String[] Tekton = {
            "Tekton bonk you!",
            "Tekton win!",
            "Tekton strongest!",
            "Hammertime!"
    };
    public static final String[] Vangua = {
            "You should consider investing in a bulwark.",
            "Triple threat supplies your death.",
            "Go back to school to learn your combat triangle."
    };
    public static final String[] Vespul = {
            "I'll see you vespulater.",
            "You've failed your redemption."
    };
    public static final String[] VasaNi = {
            "My victory is crystal clear.",
            "I can't hear you with that boulder in your face."
    };
    public static final String[] Muttad = {
            "*Munch munch munch*",
            "Clearly a skill issue."
    };
    public static final String[] GreatO = {
            "No purple for you.",
            "If you scuff you will not get stuff.",
            "The only twisted you'll see is me twisting your nuts.",
            "You're lucky to get some pure essence, provided you can actually finish..."
    };
    public static final String[] TheMai = {
            "Sugadis nuts.",
            "You're a bloody mess."
    };
    public static final String[] Pestil = {
            "You are the weakest link. Goodbye.",
            "Why are you runnning?"
    };
    public static final String[] Nyloca = {
            "Switching gear and prayer too hard for you?",
            "Good job on keeping the pillars up and then dying on the easy part"
    };
    public static final String[] Sotets = {
            "Amazing how bad you are.",
            "Looks like you're going to the Shadow realm, {Playername}."
    };
    public static final String[] Xarpus = {
            "Xarpus used counter. It's super effective!",
            "Your painting skills are lacking."
    };
    public static final String[] Verzik = {
            "I see {Playername} is the least valuable player.",
            "Your fingers are fatter than me.",
            "Stick to entry mode.",
            "Your night at the theater have become your grave at the theater.",
            "The reviews are in, you're cancelled."
    };
    public static final String[] Akkha = {
            "Akkhan't with you.",
            "Where's your butterfly now?"
    };
    public static final String[] BaBa = {
            "Cake pop! Boop boop",
            "Ba-ba-Byeeeee",
            "Mind the gap! Your skill gap"
    };
    public static final String[] Kephri = {
            "Get pooped on!",
            "Seems like you need this shield more than me.",
            "Don't let it bug you."
    };
    public static final String[] Zebak = {
            "I'll wave you goodbye!",
            "I wish you died closer now I have to move for my snack."
    };
    public static final String[] Tumeke = {
            "ALL YOUR BASE BELONG TO US",
            "EXTERMINATE! EXTERMINATE! EXTERMINATE!",
            "ERROR 404 STRONG OPPONENT NOT FOUND"
    };
    public static final String[] Elidin = {
            "ALL YOUR BASE BELONG TO US",
            "EXTERMINATE! EXTERMINATE! EXTERMINATE!",
            "ERROR 404 STRONG OPPONENT NOT FOUND"
    };
    public static final String[] Guntho = {
            "YAAAAAAAARGH! GUNTHOR STRONG!",
            "BARBARIAN MIGHT SMITES YOU"
    };
    
    
    //Loot taunts
    public static final String[] BrynnNoUniq = {
            "You'll have to go again",
            "Back into the prison you go",
            "At least you got your crystal shards",
            "You could always go get a twisted bow instead",
            "It's 50/50 you get it or you don't. You cleary don't",
            "How many more do you think you need to do?",
            "Next one is surely it",
            "Unlucky",
            "Today is not your day",
            "+1kc without the drop you want to see"
    };
    public static final String[] BrynnArmorseed = {
            "Maybe that's the one you wanted?",
            "That one used to belong to my grandpa"
    };
    public static final String[] BrynnWeaponseed = {
            "Isn't that the one you wanted?"
    };
    public static final String[] BrynnEnhanced = {
            "Congratulations on escaping the prison. I'll see you again when you need more crystal shards"
    };

    public static final String[] OsmuYourPurple = {
            "",
            ""
    };
    public static final String[] OsmuFriendPurple = {
            "",
            ""
    };
    public static final String[] OsmuNoPurple = {
            "No purple?",
            ""
    };


}
package com.NPCTaunts;

import javax.inject.Inject;
import java.util.ArrayList;
import java.util.List;

public class NPCTauntsNPClist {

    @Inject
    private NPCTauntsConfig config;
    public static List<NPCTauntsNPC> bosslist = new ArrayList<>();
    public static List<NPCTauntsNPC> npclist = new ArrayList<>();



    public static void loadnpclist()
    {

        npclist.add(new NPCTauntsNPC("Hans",NPCTauntsPhrases.Hans));
        npclist.add(new NPCTauntsNPC("Hatius Cosaintus",NPCTauntsPhrases.Haitus));
        npclist.add(new NPCTauntsNPC("Vaire",NPCTauntsPhrases.Priff));
        npclist.add(new NPCTauntsNPC("Banker",NPCTauntsPhrases.Banker));
        npclist.add(new NPCTauntsNPC("Squire",NPCTauntsPhrases.Squire));
        npclist.add(new NPCTauntsNPC("Ferox",NPCTauntsPhrases.Ferox));
        npclist.add(new NPCTauntsNPC("The 'Wedge'",NPCTauntsPhrases.Wedge));
        npclist.add(new NPCTauntsNPC("Elise",NPCTauntsPhrases.Elise));
        npclist.add(new NPCTauntsNPC("Town Crier",NPCTauntsPhrases.Towncrier));
        npclist.add(new NPCTauntsNPC("Nieve",NPCTauntsPhrases.Nieve));
        npclist.add(new NPCTauntsNPC("Steve",NPCTauntsPhrases.Steve));

    }

    public static void loadbosslist()
    {

        bosslist.add(new NPCTauntsNPC("Ahrim the Blighted",NPCTauntsPhrases.Ahrimt));
        bosslist.add(new NPCTauntsNPC("Karil the Tainted",NPCTauntsPhrases.Karilt));
        bosslist.add(new NPCTauntsNPC("Dharok the Wretched",NPCTauntsPhrases.Dharok));
        bosslist.add(new NPCTauntsNPC("Guthan the Infested",NPCTauntsPhrases.Guthan));
        bosslist.add(new NPCTauntsNPC("Torag the Corrupted",NPCTauntsPhrases.Toragt));
        bosslist.add(new NPCTauntsNPC("Verac the Defiled",NPCTauntsPhrases.Veract));
        bosslist.add(new NPCTauntsNPC("Scurrius",NPCTauntsPhrases.Scurri));
        bosslist.add(new NPCTauntsNPC("Giant Mole",NPCTauntsPhrases.GiantM));
        bosslist.add(new NPCTauntsNPC("Deranged Archaeologist",NPCTauntsPhrases.Derang));
        bosslist.add(new NPCTauntsNPC("Dagannoth Supreme",NPCTauntsPhrases.Supreme));
        bosslist.add(new NPCTauntsNPC("Dagannoth Rex",NPCTauntsPhrases.Rex));
        bosslist.add(new NPCTauntsNPC("Dagannoth Prime",NPCTauntsPhrases.Prime));
        bosslist.add(new NPCTauntsNPC("Sarachnis",NPCTauntsPhrases.Sarach));
        bosslist.add(new NPCTauntsNPC("Blood Moon",NPCTauntsPhrases.BloodM));
        bosslist.add(new NPCTauntsNPC("Blue Moon",NPCTauntsPhrases.BlueMo));
        bosslist.add(new NPCTauntsNPC("Eclipse Moon",NPCTauntsPhrases.Eclips));
        bosslist.add(new NPCTauntsNPC("Kalphite Queen",NPCTauntsPhrases.Kalphi));
        bosslist.add(new NPCTauntsNPC("Kree'arra",NPCTauntsPhrases.Kree));
        bosslist.add(new NPCTauntsNPC("Commander Zilyana",NPCTauntsPhrases.Comman));
        bosslist.add(new NPCTauntsNPC("General Graardor",NPCTauntsPhrases.Genera));
        bosslist.add(new NPCTauntsNPC("K'ril Tsutsaroth",NPCTauntsPhrases.Kril));
        bosslist.add(new NPCTauntsNPC("Corporeal Beast",NPCTauntsPhrases.Corpor));
        bosslist.add(new NPCTauntsNPC("Nex",NPCTauntsPhrases.Nex));
        bosslist.add(new NPCTauntsNPC("Chaos Fanatic",NPCTauntsPhrases.ChaosF));
        bosslist.add(new NPCTauntsNPC("Crazy archaeologist",NPCTauntsPhrases.Crazya));
        bosslist.add(new NPCTauntsNPC("Scorpia",NPCTauntsPhrases.Scorpi));
        bosslist.add(new NPCTauntsNPC("King Black Dragon",NPCTauntsPhrases.KingBl));
        bosslist.add(new NPCTauntsNPC("Chaos Elemental",NPCTauntsPhrases.ChaosE));
        bosslist.add(new NPCTauntsNPC("Revenant maledictus",NPCTauntsPhrases.Revena));
        bosslist.add(new NPCTauntsNPC("Calvar'ion",NPCTauntsPhrases.Calvar));
        bosslist.add(new NPCTauntsNPC("Vet'ion",NPCTauntsPhrases.Vetio));
        bosslist.add(new NPCTauntsNPC("Spindel",NPCTauntsPhrases.Spinde));
        bosslist.add(new NPCTauntsNPC("Venenatis",NPCTauntsPhrases.Venena));
        bosslist.add(new NPCTauntsNPC("Artio",NPCTauntsPhrases.Artio));
        bosslist.add(new NPCTauntsNPC("Callisto",NPCTauntsPhrases.Callis));
        bosslist.add(new NPCTauntsNPC("Zulrah",NPCTauntsPhrases.Zulrah));
        bosslist.add(new NPCTauntsNPC("Vorkath",NPCTauntsPhrases.Vorkat));
        bosslist.add(new NPCTauntsNPC("Phantom Muspah",NPCTauntsPhrases.Phanto));
        bosslist.add(new NPCTauntsNPC("The Nightmare",NPCTauntsPhrases.TheNight));
        bosslist.add(new NPCTauntsNPC("Phosani's Nightmare",NPCTauntsPhrases.Phosan));
        bosslist.add(new NPCTauntsNPC("Duke Sucellus",NPCTauntsPhrases.DukeSu));
        bosslist.add(new NPCTauntsNPC("The Leviathan",NPCTauntsPhrases.TheLev));
        bosslist.add(new NPCTauntsNPC("The Whisperer",NPCTauntsPhrases.TheWhi));
        bosslist.add(new NPCTauntsNPC("Vardorvis",NPCTauntsPhrases.Vardor));
        bosslist.add(new NPCTauntsNPC("Obor",NPCTauntsPhrases.Obor));
        bosslist.add(new NPCTauntsNPC("Bryophyta",NPCTauntsPhrases.Bryoph));
        bosslist.add(new NPCTauntsNPC("The Mimic",NPCTauntsPhrases.TheMim));
        bosslist.add(new NPCTauntsNPC("Hespori",NPCTauntsPhrases.Hespor));
        bosslist.add(new NPCTauntsNPC("Skotizo",NPCTauntsPhrases.Skotiz));
        bosslist.add(new NPCTauntsNPC("Dusk",NPCTauntsPhrases.GrotesDu));
        bosslist.add(new NPCTauntsNPC("Dawn",NPCTauntsPhrases.GrotesDa));
        bosslist.add(new NPCTauntsNPC("Abyssal Sire",NPCTauntsPhrases.Abyssa));
        bosslist.add(new NPCTauntsNPC("Kraken",NPCTauntsPhrases.Kraken));
        bosslist.add(new NPCTauntsNPC("Cerberus",NPCTauntsPhrases.Cerber));
        bosslist.add(new NPCTauntsNPC("Thermonuclear smoke devil",NPCTauntsPhrases.Thermo));
        bosslist.add(new NPCTauntsNPC("Alchemical Hydra",NPCTauntsPhrases.Alchem));
        bosslist.add(new NPCTauntsNPC("Crystalline Hunllef",NPCTauntsPhrases.Hun));
        bosslist.add(new NPCTauntsNPC("Corrupted Hunllef",NPCTauntsPhrases.Hun));
        bosslist.add(new NPCTauntsNPC("TzTok-Jad",NPCTauntsPhrases.TzTok));
        bosslist.add(new NPCTauntsNPC("TzKal-Zuk",NPCTauntsPhrases.TzKal));
        bosslist.add(new NPCTauntsNPC("Wintertodt",NPCTauntsPhrases.Winter));
        bosslist.add(new NPCTauntsNPC("Zalcano",NPCTauntsPhrases.Zalcan));
        bosslist.add(new NPCTauntsNPC("Tekton",NPCTauntsPhrases.Tekton));
        bosslist.add(new NPCTauntsNPC("Vanguard",NPCTauntsPhrases.Vangua));
        bosslist.add(new NPCTauntsNPC("Vespula",NPCTauntsPhrases.Vespul));
        bosslist.add(new NPCTauntsNPC("Vasa Nistirio",NPCTauntsPhrases.VasaNi));
        bosslist.add(new NPCTauntsNPC("Muttadile",NPCTauntsPhrases.Muttad));
        bosslist.add(new NPCTauntsNPC("Great Olm",NPCTauntsPhrases.GreatO));
        bosslist.add(new NPCTauntsNPC("The Maiden of Sugadinti",NPCTauntsPhrases.TheMai));
        bosslist.add(new NPCTauntsNPC("Pestilent Bloat",NPCTauntsPhrases.Pestil));
        bosslist.add(new NPCTauntsNPC("Nylocas Vasilias",NPCTauntsPhrases.Nyloca));
        bosslist.add(new NPCTauntsNPC("Sotetseg",NPCTauntsPhrases.Sotets));
        bosslist.add(new NPCTauntsNPC("Xarpus",NPCTauntsPhrases.Xarpus));
        bosslist.add(new NPCTauntsNPC("Verzik Vitur",NPCTauntsPhrases.Verzik));
        bosslist.add(new NPCTauntsNPC("Akkha",NPCTauntsPhrases.Akkha));
        bosslist.add(new NPCTauntsNPC("Ba-Ba",NPCTauntsPhrases.BaBa));
        bosslist.add(new NPCTauntsNPC("Kephri",NPCTauntsPhrases.Kephri));
        bosslist.add(new NPCTauntsNPC("Zebak",NPCTauntsPhrases.Zebak));
        bosslist.add(new NPCTauntsNPC("Tumeken's Warden",NPCTauntsPhrases.Tumeke));
        bosslist.add(new NPCTauntsNPC("Elidinis' Warden",NPCTauntsPhrases.Elidin));
        bosslist.add(new NPCTauntsNPC("Gunthor the brave",NPCTauntsPhrases.Guntho));
    }

    public static void loadcustomlists(NPCTauntsConfig config){
        String[] custombosslist = config.custombosstaunts().split("\n");
        for (int i = 0; i < custombosslist.length; i++) {
            if (custombosslist[i].split(";").length <2){
                continue;
            }
            String bossname = custombosslist[i].split(";")[0];
            String [] taunts = custombosslist[i].split(";")[1].split(":");
            int T =bosslistcontains(bossname);
            if (T!=-1){
                for (int j = 0; j < taunts.length; j++) {
                    bosslist.get(T).phrases.add(taunts[j]);
                }
            }
            else {
            bosslist.add(new NPCTauntsNPC(bossname,taunts));
            }
        }

        String[] customnpclist = config.customnpctaunts().split("\n");
        for (int i = 0; i < customnpclist.length; i++) {
            String npcname = customnpclist[i].split(";")[0];
            String [] taunts = customnpclist[i].split(";")[1].split(":");
            int T =npclistcontains(npcname);
            if (T!=-1){
                for (int j = 0; j < taunts.length; j++) {
                    npclist.get(T).phrases.add(taunts[j]);
                }
            }
            else {
                npclist.add(new NPCTauntsNPC(npcname,taunts));
            }
        }
    }

    public static int npclistcontains(String name)
    {
        int f =-1;
        for (int i = 0; i < NPCTauntsNPClist.npclist.size(); i++) {

            if (NPCTauntsNPClist.npclist.get(i).name.contains(name)) {
                f=i;
            }
        }

        return f;
    }
    public static int bosslistcontains(String name)
    {
        int f =-1;

        for (int i = 0; i < NPCTauntsNPClist.bosslist.size(); i++) {
            if (NPCTauntsNPClist.bosslist.get(i).name.contains(name)) {
                f=i;
            }
        }
        return f;
    }
}

