package com.partyhotkeys;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class PartyHotkeysPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(PartyHotkeysPlugin.class);
		RuneLite.main(args);
	}
}
/*
 * Copyright (c) 2023, Jamal <http://github.com/1Defence>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.partyhotkeys;

import java.awt.event.KeyEvent;
import java.util.function.Supplier;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import net.runelite.client.config.Keybind;
import net.runelite.client.input.KeyListener;

@RequiredArgsConstructor
public abstract class CustomHotkeyListener implements KeyListener
{
    private final Supplier<Keybind> keybind;
    @Getter(AccessLevel.PACKAGE)
    private boolean isPressed = false;

    private boolean isConsumingTyped = false;

    @Setter
    private boolean enabledOnLoginScreen;

    @Override
    public boolean isEnabledOnLoginScreen()
    {
        return enabledOnLoginScreen;
    }

    @Override
    public void keyTyped(KeyEvent e)
    {
        if (isConsumingTyped)
        {
            e.consume();
        }
    }

    @Override
    public void keyPressed(KeyEvent e)
    {
        if (keybind.get().matches(e))
        {
            boolean wasPressed = isPressed;
            isPressed = true;
            if (!wasPressed)
            {
                hotkeyPressed();
            }
            if (Keybind.getModifierForKeyCode(e.getKeyCode()) == null)
            {
                isConsumingTyped = true;
                // Only consume non modifier keys
                e.consume();
            }
        }
    }

    @Override
    public void keyReleased(KeyEvent e)
    {
        if (keybind.get().matches(e))
        {
            ReleaseHotkey();
        }
    }

    public void ReleaseHotkey(){
        isPressed = false;
        isConsumingTyped = false;
        hotkeyReleased();
    }

    public void hotkeyPressed()
    {
    }

    public void hotkeyReleased()
    {
    }
}
package com.partyhotkeys;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.Keybind;

import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;

@ConfigGroup(PartyHotkeysConfig.GROUP)
public interface PartyHotkeysConfig extends Config
{
	String GROUP = "partyhotkeys";
	@ConfigItem(
			keyName = "disconnectedWarning",
			name = "Disconnected Warning",
			description = "Displays an info box indicating the user is disconnected from party.",
			position = 0
	)
	default boolean disconnectedWarning()
	{
		return true;
	}

	@ConfigItem(
			keyName = "rejoinPreviousKey",
			name = "Rejoin Previous",
			description = "When you press this key you'll attempt to rejoin your previous party",
			position = 1
	)
	default Keybind rejoinPreviousKey()
	{
		return new Keybind(KeyEvent.VK_R, InputEvent.CTRL_DOWN_MASK);
	}

	@ConfigItem(
			keyName = "leaveKey",
			name = "Leave Party",
			description = "When you press this key you'll leave your current party, you won't be able to rejoin via hotkeys for a few seconds",
			position = 2
	)
	default Keybind leavePartyKey()
	{
		return new Keybind(KeyEvent.VK_L, InputEvent.CTRL_DOWN_MASK);
	}

	@ConfigItem(
			keyName = "presetParty1",
			name = "Preset Party 1",
			description = "Preset name of party 1 that you can join via the below hotkey (you must leave your party first)",
			position = 3
	)
	default String presetParty1()
	{
		return "";
	}
	@ConfigItem(
			keyName = "joinParty1Key",
			name = "Join Party 1",
			description = "When you press this key you'll attempt to join your 1st preset party",
			position = 4
	)
	default Keybind joinParty1Key()
	{
		return new Keybind(KeyEvent.VK_1, InputEvent.CTRL_DOWN_MASK);
	}

	@ConfigItem(
			keyName = "presetParty2",
			name = "Preset Party 2",
			description = "Preset name of party 2 that you can join via the below hotkey (you must leave your party first)",
			position = 5
	)
	default String presetParty2()
	{
		return "";
	}
	@ConfigItem(
			keyName = "joinParty2Key",
			name = "Join Party 2",
			description = "When you press this key you'll attempt to join your 2nd preset party",
			position = 6
	)
	default Keybind joinParty2Key()
	{
		return new Keybind(KeyEvent.VK_2, InputEvent.CTRL_DOWN_MASK);
	}

	@ConfigItem(
			keyName = "presetParty3",
			name = "Preset Party 3",
			description = "Preset name of party 3 that you can join via the below hotkey (you must leave your party first)",
			position = 7
	)
	default String presetParty3()
	{
		return "";
	}
	@ConfigItem(
			keyName = "joinParty3Key",
			name = "Join Party 3",
			description = "When you press this key you'll attempt to join your 3rd preset party",
			position = 8
	)
	default Keybind joinParty3Key()
	{
		return new Keybind(KeyEvent.VK_3, InputEvent.CTRL_DOWN_MASK);
	}
}

package com.partyhotkeys;

import java.awt.Color;
import java.awt.image.BufferedImage;
import net.runelite.client.ui.overlay.infobox.InfoBox;
import net.runelite.client.ui.overlay.infobox.InfoBoxPriority;

class ConnectionIndicator extends InfoBox
{
    ConnectionIndicator(BufferedImage image, PartyHotkeysPlugin plugin, String tooltip)
    {
        super(image, plugin);
        setTooltip(tooltip);
        setPriority(InfoBoxPriority.HIGH);
    }

    @Override
    public String getText()
    {
        return null;
    }

    @Override
    public Color getTextColor()
    {
        return null;
    }
}
package com.partyhotkeys;

import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.ClientTick;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.PartyChanged;
import net.runelite.client.input.KeyManager;
import net.runelite.client.party.PartyService;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.party.PartyPlugin;
import net.runelite.client.ui.ClientUI;
import net.runelite.client.ui.overlay.infobox.InfoBoxManager;
import net.runelite.client.util.HotkeyListener;
import net.runelite.client.util.ImageUtil;

import java.awt.image.BufferedImage;
import java.time.Duration;
import java.time.Instant;
import java.util.Optional;

@PluginDependency(PartyPlugin.class)
@Slf4j
@PluginDescriptor(
	name = "Party Hotkeys",
		description = "Custom Hotkeys for rejoining previous party & joining preset party names",
		tags= "party,hotkeys"
)
public class PartyHotkeysPlugin extends Plugin
{
	@Inject
	private Client client;

	@Inject
	private ClientUI clientUI;

	@Inject
	private ClientThread clientThread;

	@Inject
	private InfoBoxManager infoBoxManager;

	@Inject
	private PartyHotkeysConfig config;

	@Inject
	private ConfigManager configManager;

	@Inject
	private PartyService partyService;

	@Inject
	private KeyManager keyManager;

	final String PARTY_CONFIG_GROUP = "party";
	final String PREVIOUS_PARTY_ID = "previousPartyId";

	boolean isInParty = false;

	Instant lastLeave = null;

	boolean lastFocusStatus = false;

	private final CustomHotkeyListener previousKeyListener = new CustomHotkeyListener(() -> config.rejoinPreviousKey())
	{
		@Override
		public void hotkeyPressed()
		{
			RejoinPreviousParty();
		}
	};

	private final CustomHotkeyListener leavePartyKeyListener = new CustomHotkeyListener(() -> config.leavePartyKey())
	{
		@Override
		public void hotkeyPressed()
		{
			LeaveParty();
		}
	};

	private final CustomHotkeyListener joinParty1KeyListener = new CustomHotkeyListener(() -> config.joinParty1Key())
	{
		@Override
		public void hotkeyPressed()
		{
			changeParty(config.presetParty1());
		}
	};

	private final CustomHotkeyListener joinParty2KeyListener = new CustomHotkeyListener(() -> config.joinParty2Key())
	{
		@Override
		public void hotkeyPressed()
		{
			changeParty(config.presetParty2());
		}
	};

	private final CustomHotkeyListener joinParty3KeyListener = new CustomHotkeyListener(() -> config.joinParty3Key())
	{
		@Override
		public void hotkeyPressed()
		{
			changeParty(config.presetParty3());
		}
	};

	@Provides
	PartyHotkeysConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(PartyHotkeysConfig.class);
	}

	@Override
	protected void startUp() throws Exception
	{
		CheckPartyStatus();
		keyManager.registerKeyListener(previousKeyListener);
		keyManager.registerKeyListener(leavePartyKeyListener);
		keyManager.registerKeyListener(joinParty1KeyListener);
		keyManager.registerKeyListener(joinParty2KeyListener);
		keyManager.registerKeyListener(joinParty3KeyListener);
	}

	@Override
	protected void shutDown() throws Exception
	{
		RemoveInfobox();
		keyManager.unregisterKeyListener(previousKeyListener);
		keyManager.unregisterKeyListener(leavePartyKeyListener);
		keyManager.unregisterKeyListener(joinParty1KeyListener);
		keyManager.unregisterKeyListener(joinParty2KeyListener);
		keyManager.unregisterKeyListener(joinParty3KeyListener);
	}

	@Subscribe
	public void onClientTick(ClientTick event)
	{
		//Fix chat being locked & hotkeys from being unusable if user loses focus
		if(lastFocusStatus != clientUI.isFocused()){
			if(!clientUI.isFocused()){
				if(previousKeyListener.isPressed()){
					previousKeyListener.ReleaseHotkey();
				}
				if(leavePartyKeyListener.isPressed()){
					leavePartyKeyListener.ReleaseHotkey();
				}
				if(joinParty1KeyListener.isPressed()){
					joinParty1KeyListener.ReleaseHotkey();
				}
				if(joinParty2KeyListener.isPressed()){
					joinParty2KeyListener.ReleaseHotkey();
				}
				if(joinParty3KeyListener.isPressed()){
					joinParty3KeyListener.ReleaseHotkey();
				}
			}
		}
		lastFocusStatus = clientUI.isFocused();
	}

	private void CreateInfobox()
	{
		RemoveInfobox();
		final BufferedImage image = ImageUtil.loadImageResource(getClass(), "/icon_Disconnected.png");
		final ConnectionIndicator infobox = new ConnectionIndicator(image,this,"You aren't in a party!");
		infoBoxManager.addInfoBox(infobox);
	}

	private void RemoveInfobox()
	{
		infoBoxManager.removeIf(t -> t instanceof ConnectionIndicator);
	}

	public void CheckPartyStatus()
	{
		isInParty = (partyService != null && partyService.isInParty());

		if(config.disconnectedWarning()){
			if (!isInParty){
				CreateInfobox();
			} else {
				RemoveInfobox();
			}
		}

	}

	public void changeParty(String passphrase)
	{

		//prevent potential spamming misuse by delaying user from joining a new party for a few moments
		if(lastLeave != null && Duration.between(lastLeave,Instant.now()).getSeconds() <= 5){
			//join attempt sfx
			clientThread.invokeLater(()->{client.playSoundEffect(2266);});
			return;
		}

		//only allow joins while logged in
		if(client.getGameState() != GameState.LOGGED_IN && client.getGameState() != GameState.LOADING){
			return;
		}

		//prevent joining while already in a party
		if (isInParty){
			return;
		}

		passphrase = passphrase.replace(" ", "-").trim();
		if (passphrase.length() == 0) {
			return;
		}

		for (int i = 0; i < passphrase.length(); ++i)
		{
			char ch = passphrase.charAt(i);
			if (!Character.isLetter(ch) && !Character.isDigit(ch) && ch != '-')
			{
				return;
			}
		}

		partyService.changeParty(passphrase);

	}

	public void LeaveParty(){
		if(isInParty){
			//leave party sfx
			clientThread.invokeLater(()->{client.playSoundEffect(3930);});
			partyService.changeParty(null);
			lastLeave = Instant.now();
		}
	}

	public void RejoinPreviousParty(){
		changeParty(getPreviousPartyId());
	}

	public String getPreviousPartyId(){
		return Optional.ofNullable(configManager.getConfiguration(PARTY_CONFIG_GROUP, PREVIOUS_PARTY_ID)).orElse("");
	}


	@Subscribe
	public void onConfigChanged(ConfigChanged event)
	{
		if(event.getGroup().equals(PartyHotkeysConfig.GROUP)){
			if(event.getKey().equals("disconnectedWarning")){
				if(event.getNewValue().equals("false")){
					RemoveInfobox();
				}else{
					CheckPartyStatus();
				}
			}
		}
	}


	@Subscribe
	public void onPartyChanged(final PartyChanged event)
	{
		CheckPartyStatus();
	}

}

