package com.smartchatinputcolor;

public enum SlashSwapperMode {
    OFF,
    ON,
    // Slash Swapper enabled with swap guest chat option enabled
    ON_SWAP_GUEST_CHAT,
    // Slash Swapper enabled with bug handling enabled in SCIC
    ON_BUG_HANDLING,
}

package com.smartchatinputcolor;

import com.google.inject.Guice;
import com.google.inject.testing.fieldbinder.Bind;
import com.google.inject.testing.fieldbinder.BoundFieldModule;
import net.runelite.api.Client;
import net.runelite.api.FriendsChatManager;
import net.runelite.api.GameState;
import net.runelite.api.Varbits;
import net.runelite.api.events.GameTick;
import net.runelite.client.RuneLite;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.externalplugins.ExternalPluginManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginManager;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import javax.inject.Inject;
import java.awt.*;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class SmartChatInputColorPluginTest {
    @Inject
    private SmartChatInputColorPlugin smartChatInputColorPlugin;

    @Mock
    @Bind
    private SmartChatInputColorPluginConfig smartChatInputColorPluginConfig;

    @Mock
    @Bind
    private Client client;

    @Mock
    @Bind
    private ConfigManager configManager;

    @Mock
    @Bind
    private PluginManager pluginManager;

    @Before
    public void before() {
        Guice.createInjector(BoundFieldModule.of(this)).injectMembers(this);
    }

    private void setupState(ClientState state) {
        // Mock the client

        // Currently opened chat panel
        when(client.getVarcIntValue(SmartChatInputColorPlugin.OPEN_CHAT_PANEL))
            .thenReturn(state.getOpenChatPanel().getVarClientIntValue());

        // In a friends chat or not?
        when(client.getFriendsChatManager())
            .thenReturn(state.isInFriendsChat() ? mock(FriendsChatManager.class) : null);

        // Current chat mode, ordinals are the same as the var client int value
        when(client.getVarcIntValue(SmartChatInputColorPlugin.CHAT_MODE))
            .thenReturn(state.getChatMode().ordinal());

        // Group Ironman account
        when(client.getVarbitValue(Varbits.ACCOUNT_TYPE)).thenReturn(state.isGroupIronman() ? 4 : 0);

        // Always logged in while testing
        when(client.getGameState()).thenReturn(GameState.LOGGED_IN);

        // Mock client color settings, always return unset value
        //noinspection MagicConstant
        when(client.getVarpValue(anyInt())).thenReturn(0);

        // Using a transparent chatbox, doesn't matter for current testing
        // since we only test the channel output, not the actual color
        when(client.isResized()).thenReturn(true);
        when(client.getVarbitValue(Varbits.TRANSPARENT_CHATBOX)).thenReturn(1);


        // Mock the plugin manager

        // Slash swapper plugin
        Plugin slashSwapperMock = mock(Plugin.class);
        when(slashSwapperMock.getName()).thenReturn("Slash Swapper");
        when(pluginManager.getPlugins()).thenReturn(List.of(slashSwapperMock));
        when(pluginManager.isPluginEnabled(slashSwapperMock))
            .thenReturn(state.getSlashSwapperMode() != SlashSwapperMode.OFF);


        // Mock the config manager

        // Slash swapper swapping clan and guest chat
        when(configManager.getConfiguration("slashswapper", "slashGuestChat", boolean.class))
            .thenReturn(state.getSlashSwapperMode() == SlashSwapperMode.ON_SWAP_GUEST_CHAT);

        // Runelite chat color config
        when(configManager.getConfiguration(eq("textrecolor"), anyString(), eq(Color.class)))
            .thenReturn(mock(Color.class));


        // Mock plugin config

        // Slash swapper bug handling
        when(smartChatInputColorPluginConfig.slashSwapperBug())
            .thenReturn(state.getSlashSwapperMode() == SlashSwapperMode.ON_BUG_HANDLING);


        // Initialize the plugin

        // Start the plugin and fake a game tick to initialize the plugin

        smartChatInputColorPlugin.startUp();

        // Fake a game tick to let plugin initialize
        smartChatInputColorPlugin.onGameTick(new GameTick());
    }

    //region Assertion functions
    private void assertCorrectChatChannel(String input, ChatChannel expectedChannel) {
        assertEquals(expectedChannel, smartChatInputColorPlugin.deriveChatChannel(input));
    }

    private void assertPrefix(String prefix, ChatChannel expectedChannel) {
        // Prefix without @ requires a space after the prefix
        assertCorrectChatChannel("/" + prefix + " test", expectedChannel);
    }

    private void assertAtPrefix(String prefix, ChatChannel expectedChannel) {
        String fullPrefix = "/@" + prefix;
        // Prefix with @ can optionally have a space
        assertCorrectChatChannel(fullPrefix + "test", expectedChannel);
        assertCorrectChatChannel(fullPrefix + " test", expectedChannel);
    }

    private void assertAllPrefixes(String prefix, ChatChannel expectedChannel) {
        assertPrefix(prefix, expectedChannel);
        assertAtPrefix(prefix, expectedChannel);
    }

    private void assertSlash(int slashCount, ChatChannel expectedChannel) {
        assertCorrectChatChannel("/".repeat(slashCount) + "test", expectedChannel);
    }
    //endregion

    //region Non-GIM not in friends chat
    @Test
    public void test() {
        setupState(new ClientState(
            false,
            false,
            SlashSwapperMode.OFF,
            ChatPanel.ALL,
            ChatChannel.PUBLIC
        ));

        assertSlash(0, ChatChannel.PUBLIC);
        assertAllPrefixes("p", ChatChannel.PUBLIC);

        // Messages meant for friends chat go to public when not in a friends chat
        assertSlash(1, ChatChannel.PUBLIC);
        assertAllPrefixes("f", ChatChannel.PUBLIC);

        assertSlash(2, ChatChannel.CLAN);
        assertAllPrefixes("c", ChatChannel.CLAN);

        assertSlash(3, ChatChannel.GUEST);
        assertAllPrefixes("gc", ChatChannel.GUEST);

        // 4 slashes goes to guest chat when not on a GIM account
        assertSlash(4, ChatChannel.GUEST);
        // /g goes to friends chat when not on a GIM account, which goes to public when not in a friends chat
        assertPrefix("g", ChatChannel.PUBLIC);
        // For some reason, /@g goes to clan chat when not on a GIM account
        assertAtPrefix("g", ChatChannel.CLAN);
    }

    @Test
    public void testSlashSwapper() {
        setupState(new ClientState(
            false,
            false,
            SlashSwapperMode.ON_BUG_HANDLING,
            ChatPanel.ALL,
            ChatChannel.PUBLIC
        ));

        assertSlash(0, ChatChannel.PUBLIC);
        assertAllPrefixes("p", ChatChannel.PUBLIC);

        // Slash swapper sends / to clan chat
        assertSlash(1, ChatChannel.CLAN);
        assertAllPrefixes("f", ChatChannel.PUBLIC);

        // Slash swapper sends // to friends chat, which goes to public without friends chat
        assertSlash(2, ChatChannel.PUBLIC);
        assertAllPrefixes("c", ChatChannel.CLAN);

        // Slash swapper bug sends /// to friends chat, which goes to public without friends chat
        assertSlash(3, ChatChannel.PUBLIC);
        assertAllPrefixes("gc", ChatChannel.GUEST);

        // Slash swapper makes //// go to friends chat on a non-GIM account, which goes to public without friends chat
        assertSlash(4, ChatChannel.PUBLIC);
        // /g goes to FC on a non-GIM, but Slash swapper makes it go to clan chat
        assertPrefix("g", ChatChannel.CLAN);
        // For some reason, /@g goes to clan chat when not on a GIM account
        assertAtPrefix("g", ChatChannel.CLAN);
    }

    @Test
    public void testSlashSwapperSwapGuestChat() {
        setupState(new ClientState(
            false,
            false,
            SlashSwapperMode.ON_SWAP_GUEST_CHAT,
            ChatPanel.ALL,
            ChatChannel.PUBLIC
        ));

        assertSlash(0, ChatChannel.PUBLIC);
        assertAllPrefixes("p", ChatChannel.PUBLIC);

        // Slash swapper + swap guest chat sends / to guest chat
        assertSlash(1, ChatChannel.GUEST);
        assertAllPrefixes("f", ChatChannel.PUBLIC);

        // Slash swapper sends // to friends chat, which goes to public without friends chat
        assertSlash(2, ChatChannel.PUBLIC);
        assertAllPrefixes("c", ChatChannel.CLAN);

        // Slash swapper + swap guest chat sends /// to clan chat
        assertSlash(3, ChatChannel.CLAN);
        assertAllPrefixes("gc", ChatChannel.GUEST);

        // Slash swapper + swap guest chat makes //// go to clan chat on a non-GIM account
        assertSlash(4, ChatChannel.CLAN);
        // /g goes to FC on a non-GIM, but Slash swapper makes it go to guest chat
        assertPrefix("g", ChatChannel.GUEST);
        // For some reason, /@g goes to clan chat when not on a GIM account
        assertAtPrefix("g", ChatChannel.CLAN);
    }
    //endregion

    //region Non-GIM in friends chat
    @Test
    public void testFriendsChat() {
        setupState(new ClientState(
            false,
            true,
            SlashSwapperMode.OFF,
            ChatPanel.ALL,
            ChatChannel.PUBLIC
        ));

        assertSlash(0, ChatChannel.PUBLIC);
        assertAllPrefixes("p", ChatChannel.PUBLIC);

        assertSlash(1, ChatChannel.FRIEND);
        assertAllPrefixes("f", ChatChannel.FRIEND);

        assertSlash(2, ChatChannel.CLAN);
        assertAllPrefixes("c", ChatChannel.CLAN);

        assertSlash(3, ChatChannel.GUEST);
        assertAllPrefixes("gc", ChatChannel.GUEST);

        // 4 slashes goes to guest chat when not on a GIM account
        assertSlash(4, ChatChannel.GUEST);
        // /g goes to friends chat when not on a GIM account
        assertPrefix("g", ChatChannel.FRIEND);
        // For some reason, /@g goes to clan chat when not on a GIM account
        assertAtPrefix("g", ChatChannel.CLAN);
    }

    @Test
    public void testFriendsChatSlashSwapper() {
        setupState(new ClientState(
            false,
            true,
            SlashSwapperMode.ON_BUG_HANDLING,
            ChatPanel.ALL,
            ChatChannel.PUBLIC
        ));

        assertSlash(0, ChatChannel.PUBLIC);
        assertAllPrefixes("p", ChatChannel.PUBLIC);

        // Slash swapper sends / to clan chat
        assertSlash(1, ChatChannel.CLAN);
        assertAllPrefixes("f", ChatChannel.FRIEND);

        // Slash swapper sends // to friends chat
        assertSlash(2, ChatChannel.FRIEND);
        assertAllPrefixes("c", ChatChannel.CLAN);

        // Slash swapper bug sends /// to friends chat
        assertSlash(3, ChatChannel.FRIEND);
        assertAllPrefixes("gc", ChatChannel.GUEST);

        // Slash swapper makes //// go to friends chat on a non-GIM account
        assertSlash(4, ChatChannel.FRIEND);
        // /g goes to FC on a non-GIM, but Slash swapper makes it go to clan chat
        assertPrefix("g", ChatChannel.CLAN);
        // For some reason, /@g goes to clan chat when not on a GIM account
        assertAtPrefix("g", ChatChannel.CLAN);
    }

    @Test
    public void testFriendsChatSlashSwapperSwapGuestChat() {
        setupState(new ClientState(
            false,
            true,
            SlashSwapperMode.ON_SWAP_GUEST_CHAT,
            ChatPanel.ALL,
            ChatChannel.PUBLIC
        ));

        assertSlash(0, ChatChannel.PUBLIC);
        assertAllPrefixes("p", ChatChannel.PUBLIC);

        // Slash swapper + swap guest chat sends / to guest chat
        assertSlash(1, ChatChannel.GUEST);
        assertAllPrefixes("f", ChatChannel.FRIEND);

        // Slash swapper sends // to friends chat
        assertSlash(2, ChatChannel.FRIEND);
        assertAllPrefixes("c", ChatChannel.CLAN);

        // Slash swapper + swap guest chat sends /// to clan chat
        assertSlash(3, ChatChannel.CLAN);
        assertAllPrefixes("gc", ChatChannel.GUEST);

        // Slash swapper + swap guest chat makes //// go to clan chat on a non-GIM account
        assertSlash(4, ChatChannel.CLAN);
        // /g goes to FC on a non-GIM, but Slash swapper makes it go to guest chat
        assertPrefix("g", ChatChannel.GUEST);
        // For some reason, /@g goes to clan chat when not on a GIM account
        assertAtPrefix("g", ChatChannel.CLAN);
    }
    //endregion

    //region GIM not in friends chat
    @Test
    public void testGroupIronman() {
        setupState(new ClientState(
            true,
            false,
            SlashSwapperMode.OFF,
            ChatPanel.ALL,
            ChatChannel.PUBLIC
        ));

        assertSlash(0, ChatChannel.PUBLIC);
        assertAllPrefixes("p", ChatChannel.PUBLIC);

        assertSlash(1, ChatChannel.PUBLIC);
        assertAllPrefixes("f", ChatChannel.PUBLIC);

        assertSlash(2, ChatChannel.CLAN);
        assertAllPrefixes("c", ChatChannel.CLAN);

        assertSlash(3, ChatChannel.GUEST);
        assertAllPrefixes("gc", ChatChannel.GUEST);

        assertSlash(4, ChatChannel.GIM);
        assertAllPrefixes("g", ChatChannel.GIM);
    }

    @Test
    public void testGroupIronmanSlashSwapper() {
        setupState(new ClientState(
            true,
            false,
            SlashSwapperMode.ON_BUG_HANDLING,
            ChatPanel.ALL,
            ChatChannel.PUBLIC
        ));

        assertSlash(0, ChatChannel.PUBLIC);
        assertAllPrefixes("p", ChatChannel.PUBLIC);

        // Slash swapper sends / to clan chat
        assertSlash(1, ChatChannel.CLAN);
        assertAllPrefixes("f", ChatChannel.PUBLIC);

        // Slash swapper sends // to friends chat, which goes to public when not in a friends chat
        assertSlash(2, ChatChannel.PUBLIC);
        assertAllPrefixes("c", ChatChannel.CLAN);

        // Slash swapper bug sends /// to friends chat, which goes to public when not in a friends chat
        assertSlash(3, ChatChannel.PUBLIC);
        assertAllPrefixes("gc", ChatChannel.GUEST);

        assertSlash(4, ChatChannel.GIM);
        assertAllPrefixes("g", ChatChannel.GIM);
    }

    @Test
    public void testGroupIronmanSlashSwapperSwappedGuestChat() {
        setupState(new ClientState(
            true,
            false,
            SlashSwapperMode.ON_SWAP_GUEST_CHAT,
            ChatPanel.ALL,
            ChatChannel.PUBLIC
        ));

        assertSlash(0, ChatChannel.PUBLIC);
        assertAllPrefixes("p", ChatChannel.PUBLIC);

        // Slash swapper + swap guest chat sends / to guest chat
        assertSlash(1, ChatChannel.GUEST);
        assertAllPrefixes("f", ChatChannel.PUBLIC);

        // Slash swapper sends // to friends chat, which goes to public when not in a friends chat
        assertSlash(2, ChatChannel.PUBLIC);
        assertAllPrefixes("c", ChatChannel.CLAN);

        // Slash swapper + swap guest chat sends /// to clan chat
        assertSlash(3, ChatChannel.CLAN);
        assertAllPrefixes("gc", ChatChannel.GUEST);

        assertSlash(4, ChatChannel.GIM);
        assertAllPrefixes("g", ChatChannel.GIM);
    }
    //endregion

    //region GIM in friends chat
    @Test
    public void testGroupIronmanFriendsChat() {
        setupState(new ClientState(
            true,
            true,
            SlashSwapperMode.OFF,
            ChatPanel.ALL,
            ChatChannel.PUBLIC
        ));

        assertSlash(0, ChatChannel.PUBLIC);
        assertAllPrefixes("p", ChatChannel.PUBLIC);

        assertSlash(1, ChatChannel.FRIEND);
        assertAllPrefixes("f", ChatChannel.FRIEND);

        assertSlash(2, ChatChannel.CLAN);
        assertAllPrefixes("c", ChatChannel.CLAN);

        assertSlash(3, ChatChannel.GUEST);
        assertAllPrefixes("gc", ChatChannel.GUEST);

        assertSlash(4, ChatChannel.GIM);
        assertAllPrefixes("g", ChatChannel.GIM);
    }

    @Test
    public void testGroupIronmanFriendsChatSlashSwapper() {
        setupState(new ClientState(
            true,
            true,
            SlashSwapperMode.ON_BUG_HANDLING,
            ChatPanel.ALL,
            ChatChannel.PUBLIC
        ));

        assertSlash(0, ChatChannel.PUBLIC);
        assertAllPrefixes("p", ChatChannel.PUBLIC);

        // Slash swapper sends / to clan chat
        assertSlash(1, ChatChannel.CLAN);
        assertAllPrefixes("f", ChatChannel.FRIEND);

        // Slash swapper sends // to friends chat
        assertSlash(2, ChatChannel.FRIEND);
        assertAllPrefixes("c", ChatChannel.CLAN);

        // Slash swapper bug sends /// to friends chat
        assertSlash(3, ChatChannel.FRIEND);
        assertAllPrefixes("gc", ChatChannel.GUEST);

        assertSlash(4, ChatChannel.GIM);
        assertAllPrefixes("g", ChatChannel.GIM);
    }

    @Test
    public void testGroupIronmanFriendsChatSlashSwapperSwappedGuestChat() {
        setupState(new ClientState(
            true,
            true,
            SlashSwapperMode.ON_SWAP_GUEST_CHAT,
            ChatPanel.ALL,
            ChatChannel.PUBLIC
        ));

        assertSlash(0, ChatChannel.PUBLIC);
        assertAllPrefixes("p", ChatChannel.PUBLIC);

        // Slash swapper + swap guest chat sends / to guest chat
        assertSlash(1, ChatChannel.GUEST);
        assertAllPrefixes("f", ChatChannel.FRIEND);

        // Slash swapper sends // to friends chat
        assertSlash(2, ChatChannel.FRIEND);
        assertAllPrefixes("c", ChatChannel.CLAN);

        // Slash swapper + swap guest chat sends /// to clan chat
        assertSlash(3, ChatChannel.CLAN);
        assertAllPrefixes("gc", ChatChannel.GUEST);

        assertSlash(4, ChatChannel.GIM);
        assertAllPrefixes("g", ChatChannel.GIM);
    }
    //endregion

    public static void main(String[] args) throws Exception {
        @SuppressWarnings("unchecked")
        var plugins = (Class<? extends Plugin>[]) new Class[]{SmartChatInputColorPlugin.class};
        ExternalPluginManager.loadBuiltin(plugins);
        RuneLite.main(args);
    }
}

package com.smartchatinputcolor;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public class ClientState {
    private boolean groupIronman;

    private boolean inFriendsChat;

    private SlashSwapperMode slashSwapperMode;

    private ChatPanel openChatPanel;

    private ChatChannel chatMode;
}

package com.smartchatinputcolor;

import java.awt.*;

class DefaultColors {
    final static Color CLAN_AND_GIM = new Color(127, 0, 0);
    final static Color GUEST_CLAN_TRANSPARENT = new Color(0, 211, 0);
    final static Color GUEST_CLAN_OPAQUE = new Color(0, 122, 0);
}

package com.smartchatinputcolor;

import com.google.common.annotations.VisibleForTesting;
import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.annotations.VarCInt;
import net.runelite.api.annotations.Varp;
import net.runelite.api.events.*;
import net.runelite.api.widgets.ComponentID;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.PluginChanged;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.PluginManager;
import net.runelite.client.util.ColorUtil;
import net.runelite.client.util.Text;

import javax.annotation.Nullable;
import javax.inject.Inject;
import java.awt.*;
import java.util.HashMap;
import java.util.Map;

@Slf4j
@PluginDescriptor(name = "Smart Chat Input Color")
public class SmartChatInputColorPlugin extends Plugin {

    @VisibleForTesting
    @VarCInt
    static final int OPEN_CHAT_PANEL = 41;

    @VisibleForTesting
    @VarCInt
    static final int CHAT_MODE = 945;

    @Inject
    private Client client;

    @Inject
    private SmartChatInputColorPluginConfig config;

    @Inject
    private ConfigManager configManager;

    @Inject
    private PluginManager pluginManager;

    @Inject
    private ClientThread clientThread;

    private ChatPanel selectedChatPanel;

    private ChatChannel friendsChatChannel;

    private boolean hoppingWorlds;

    private boolean shouldInitialize;

    private boolean slashSwapperBug;

    private final Map<ChatChannel, Color> channelColorMap = new HashMap<>();

    @Override
    protected void startUp() {
        log.debug("Smart Chat Input Color starting!");
        if (client.getGameState() == GameState.LOGGED_IN) {
            shouldInitialize = true;
        }
    }

    @Override
    protected void shutDown() {
        log.debug("Smart Chat Input Color stopping!");
        // Reset when stopping plugin
        selectedChatPanel = null;
        friendsChatChannel = null;
        channelColorMap.clear();
    }

    @Provides
    SmartChatInputColorPluginConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(SmartChatInputColorPluginConfig.class);
    }

    /**
     * Recolor the text typed in the chat, based on the channel that the message will be sent to
     */
    private void recolorChatTypedText() {
        Widget inputWidget = client.getWidget(ComponentID.CHATBOX_INPUT);
        if (inputWidget == null) {
            return;
        }

        String input = inputWidget.getText();
        // Key Remapping is active and chat is locked, do not recolor
        if (input.endsWith("Press Enter to Chat...")) {
            return;
        }

        int colonIndex = input.indexOf(':');
        if (colonIndex == -1) {
            return;
        }
        String name = input.substring(0, colonIndex);
        String typedText = client.getVarcStrValue(VarClientStr.CHATBOX_TYPED_TEXT);
        Color chatColor = channelColorMap.get(deriveChatChannel(typedText));
        inputWidget.setText(name + ": " + ColorUtil.wrapWithColorTag(Text.escapeJagex(typedText) + "*", chatColor));
    }

    /**
     * Decide which channel color the input text should get
     *
     * @param text Chat input text typed by the player
     * @return Chat channel whose color the input text should be recolored to
     */
    @VisibleForTesting
    ChatChannel deriveChatChannel(String text) {
        // First check if the text starts with one of the prefixes
        ChatChannel channel = findChannelByMessagePrefix(text);
        if (channel != null) {
            return channel;
        }

        // If it didn't match a prefix, check if in a certain chat mode
        channel = ChatChannel.fromChatModeVarClientInt(client.getVarcIntValue(CHAT_MODE));
        if (channel != null) {
            return channel;
        }

        // No indicators from message prefix or chat mode, so the message will be sent to the open chat panel
        return getSelectedChatPanelChannel();
    }

    /**
     * Find the channel that a message would be sent to based on the prefix.
     *
     * @param text Chat message input
     * @return Channel that the message would be sent to or null
     */
    private ChatChannel findChannelByMessagePrefix(String text) {
        // First check if the prefix regex matches
        for (ChatChannel channel : ChatChannel.values()) {
            if (channel.matchesPrefixRegex(text)) {
                return getResultingChannel(channel, text);
            }
        }

        // Check the slash prefix if there is no regex match
        ChatChannel channel = ChatChannel.fromSlashPrefix(text);

        // If Slash Swapper bug is active and the result is guest chat (///) or GIM chat (////), return friend instead
        if (slashSwapperBug && (channel == ChatChannel.GUEST || channel == ChatChannel.GIM && !isGroupIronman())) {
            channel = ChatChannel.FRIEND;
        }

        return getResultingChannel(channel, text);
    }

    /**
     * Compute the color of a chat channel based on RL and in-game settings
     *
     * @param channel Chat channel
     * @return Color that the text should be colored for the given chat channel
     */
    private Color computeChannelColor(ChatChannel channel, boolean transparent) {
        String colorConfigKey = channel.getColorConfigKey();
        if (colorConfigKey != null) {
            Color color = configManager.getConfiguration(
                "textrecolor", (transparent ? "transparent" : "opaque") + colorConfigKey, Color.class);
            if (color != null) {
                return color;
            }
        }

        int colorCode = client.getVarpValue(transparent ? channel.getTransparentVarpId() : channel.getOpaqueVarpId());
        // Zero means there is no value set, return the default value for this channel
        if (colorCode == 0) {
            return transparent ? channel.getTransparentDefaultColor() : channel.getOpaqueDefaultColor();
        }

        // Color code saved in the varp is offset by 1
        return new Color(colorCode - 1);
    }

    /**
     * Update the mapped color for each chat channel
     */
    private void populateChatChannelColorMap() {
        boolean transparent = client.isResized() && client.getVarbitValue(Varbits.TRANSPARENT_CHATBOX) == 1;
        for (ChatChannel c : ChatChannel.values()) {
            channelColorMap.put(c, computeChannelColor(c, transparent));
        }
    }

    /**
     * Set the chat channel that a message will be sent to if trying to send to friends channel
     */
    private void setFriendsChatChannel(boolean isInFriendsChat) {
        friendsChatChannel = isInFriendsChat ? ChatChannel.FRIEND : ChatChannel.PUBLIC;
    }

    /**
     * Set the currently opened chat panel
     */
    private void setOpenChatPanel() {
        selectedChatPanel = ChatPanel.fromVarClientInt(client.getVarcIntValue(OPEN_CHAT_PANEL));
    }

    /**
     * Find the resulting channel, keeping in mind whether the player is currently in a friends channel
     *
     * @param channel Chat channel trying to send the message to
     * @return Chat channel that the message will really go to
     */
    @Nullable
    private ChatChannel getResultingChannel(ChatChannel channel) {
        if (channel == null) {
            return null;
        }

        return channel == ChatChannel.FRIEND ? friendsChatChannel : channel;
    }

    /**
     * Find the resulting channel, checking whether the player is currently in a friends channel or has a GIM account
     *
     * @param channel Chat channel trying to send the message to
     * @return Chat channel that the message will really go to
     */
    @Nullable
    private ChatChannel getResultingChannel(ChatChannel channel, String text) {
        if (channel == null) {
            return null;
        }

        switch (channel) {
            case FRIEND:
                return friendsChatChannel;
            case GIM:
                return getGIMChatChannel(text);
            default:
                return channel;
        }
    }

    /**
     * Find the chat channel that a message will be sent to when trying to send to group ironman channel. If an account
     * is a Group Ironman, the Group Ironman chat channel is available. Otherwise, a bit more logic is involved.
     *
     * @return Chat channel that the message will go to
     */
    private ChatChannel getGIMChatChannel(String text) {
        if (isGroupIronman()) {
            return ChatChannel.GIM;
        }

        if (text.startsWith("/g")) {
            return getResultingChannel(ChatChannel.fromSlashCount(1));
        }

        if (text.startsWith("/@g")) {
            return ChatChannel.CLAN;
        }

        if (text.startsWith("////")) {
            return getResultingChannel(ChatChannel.fromSlashCount(3));
        }

        // This never happens because the string passed into this function
        // will always start with one of the prefixes handled above
        return ChatChannel.GIM;
    }

    /**
     * Get the chat channel that a message should be sent to, based on the currently selected chat panel
     *
     * @return Chat channel that the message will go to
     */
    private ChatChannel getSelectedChatPanelChannel() {
        switch (selectedChatPanel) {
            case CHANNEL:
                return friendsChatChannel;
            case CLAN:
                return ChatChannel.CLAN;
            case TRADE_OR_GIM:
                return isGroupIronman() ? ChatChannel.GIM : ChatChannel.PUBLIC;
        }

        return ChatChannel.PUBLIC;
    }

    private boolean isGroupIronman() {
        switch (client.getVarbitValue(Varbits.ACCOUNT_TYPE)) {
            case 4: // GIM
            case 5: // HCGIM
            case 6: // UGIM
                return true;
        }
        return false;
    }

    private boolean getSlashSwapperGuestChatConfig() {
        return configManager.getConfiguration("slashswapper", "slashGuestChat", boolean.class);
    }

    /**
     * Configure up slash prefixes based on whether Slash Swapper is active
     */
    private void configureSlashPrefixes() {
        boolean slashSwapperEnabled = pluginManager
            .getPlugins()
            .stream()
            .anyMatch(p -> p.getName().equals("Slash Swapper") && pluginManager.isPluginEnabled(p));

        if (slashSwapperEnabled) {
            useSlashSwapperPrefixes();
            return;
        }

        slashSwapperBug = false;
        ChatChannel.useDefaultSlashPrefixes();
    }

    private void useSlashSwapperPrefixes() {
        boolean guestChatConfig = getSlashSwapperGuestChatConfig();
        slashSwapperBug = !guestChatConfig && config.slashSwapperBug();
        ChatChannel.useSlashSwapperPrefixes(guestChatConfig);
    }

    /**
     * Recolor the chat input when the player selects a chat tab, or when the user is typing
     *
     * @param scriptPostFired information about the fired script
     */
    @Subscribe
    public void onScriptPostFired(ScriptPostFired scriptPostFired) {
        if (scriptPostFired.getScriptId() == ScriptID.CHAT_PROMPT_INIT) {
            recolorChatTypedText();
        }
    }

    /**
     * Initialize after an account is logged in, but not when hopping worlds
     *
     * @param gameStateChanged GameState changed event object
     */
    @Subscribe
    public void onGameStateChanged(GameStateChanged gameStateChanged) {
        switch (gameStateChanged.getGameState()) {
            case HOPPING:
                hoppingWorlds = true;
                break;
            case LOGGED_IN: {
                if (hoppingWorlds) {
                    hoppingWorlds = false;
                    return;
                }
                shouldInitialize = true;
            }
        }
    }

    /**
     * Initialize the plugin on the game tick after shouldInitialize is set, it requires Varbits / VarPlayers to be set
     */
    @Subscribe
    public void onGameTick(GameTick ignored) {
        if (!shouldInitialize) {
            return;
        }

        setOpenChatPanel();
        setFriendsChatChannel(client.getFriendsChatManager() != null);
        configureSlashPrefixes();
        populateChatChannelColorMap();
        shouldInitialize = false;
        recolorChatTypedText();
    }

    /**
     * Update chat channel color map when a relevant RL config is changed
     *
     * @param configChanged Config changed event object
     */
    @Subscribe
    public void onConfigChanged(ConfigChanged configChanged) {
        String configGroup = configChanged.getGroup();
        if (configGroup.equals(SmartChatInputColorPluginConfig.GROUP) || configGroup.equals("slashswapper")) {
            clientThread.invoke(() -> {
                configureSlashPrefixes();
                recolorChatTypedText();
            });
        }

        if (configGroup.equals("textrecolor")) {
            clientThread.invoke(() -> {
                populateChatChannelColorMap();
                recolorChatTypedText();
            });
        }
    }

    /**
     * Update chat channel color map when Slash Swapper is turned on or off
     *
     * @param pluginChanged Plugin changed event object
     */
    @Subscribe
    public void onPluginChanged(PluginChanged pluginChanged) {
        Plugin plugin = pluginChanged.getPlugin();
        if (!plugin.getName().equals("Slash Swapper")) {
            return;
        }

        if (pluginManager.isPluginEnabled(plugin)) {
            useSlashSwapperPrefixes();
        } else {
            slashSwapperBug = false;
            ChatChannel.useDefaultSlashPrefixes();
        }

        recolorChatTypedText();
    }

    /**
     * Update chat channel color map when a relevant in-game setting is changed
     *
     * @param varbitChanged Varbit changed event object
     */
    @Subscribe
    public void onVarbitChanged(VarbitChanged varbitChanged) {
        // Check if the setting for transparent chat box changed
        if (varbitChanged.getVarbitId() == Varbits.TRANSPARENT_CHATBOX) {
            populateChatChannelColorMap();
            return;
        }

        // Check if any of the chat channel colours was changed
        @Varp int varPlayerId = varbitChanged.getVarpId();
        for (ChatChannel channel : ChatChannel.values()) {
            if (varPlayerId == channel.getOpaqueVarpId() || varPlayerId == channel.getTransparentVarpId()) {
                populateChatChannelColorMap();
                return;
            }
        }
    }

    /**
     * Update selected chat panel when a new chat panel is opened
     *
     * @param varClientIntChanged VarClientInt changed event object
     */
    @Subscribe
    public void onVarClientIntChanged(VarClientIntChanged varClientIntChanged) {
        if (varClientIntChanged.getIndex() == OPEN_CHAT_PANEL) {
            setOpenChatPanel();
        }
    }

    /**
     * Update state when client joins or leaves a friends chat and recolor the typed text
     *
     * @param friendsChatChanged FriendsChat changed event object
     */
    @Subscribe
    public void onFriendsChatChanged(FriendsChatChanged friendsChatChanged) {
        setFriendsChatChannel(friendsChatChanged.isJoined());
        recolorChatTypedText();
    }
}

package com.smartchatinputcolor;

import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
@Getter
enum ChatPanel {
    NONE(1337),
    ALL(0),
    GAME(1),
    PUBLIC(2),
    PRIVATE(3),
    CHANNEL(4),
    CLAN(5),
    TRADE_OR_GIM(6);

    private final int varClientIntValue;

    public static ChatPanel fromVarClientInt(int varClientIntValue) {
        for (ChatPanel chatPanel : ChatPanel.values()) {
            if (chatPanel.varClientIntValue == varClientIntValue) {
                return chatPanel;
            }
        }
        return NONE;
    }
}

package com.smartchatinputcolor;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup(SmartChatInputColorPluginConfig.GROUP)
public interface SmartChatInputColorPluginConfig extends Config {
    String GROUP = "smartchatinputcolor";

    @ConfigItem(
        keyName = "slashSwapperBug",
        name = "Slash Swapper bug",
        description = "Assume that messages starting with /// are sent to friends chat "
            + "if Slash Swapper is active without swap guest chat config enabled.",
        position = 1)
    default boolean slashSwapperBug() {
        return true;
    }
}

package com.smartchatinputcolor;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.runelite.api.VarPlayer;
import net.runelite.api.annotations.Varp;
import net.runelite.client.ui.JagexColors;

import javax.annotation.Nullable;
import java.awt.*;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;

@RequiredArgsConstructor
@Getter
enum ChatChannel {
    PUBLIC(
        "PublicChat",
        VarPlayer.SETTINGS_TRANSPARENT_CHAT_PUBLIC,
        VarPlayer.SETTINGS_OPAQUE_CHAT_PUBLIC,
        JagexColors.CHAT_TYPED_TEXT_TRANSPARENT_BACKGROUND,
        JagexColors.CHAT_TYPED_TEXT_OPAQUE_BACKGROUND,
        Pattern.compile("^/(@p|p ).*"),
        0
    ),
    FRIEND(
        "ClanChatMessage",
        VarPlayer.SETTINGS_TRANSPARENT_CHAT_FRIEND,
        VarPlayer.SETTINGS_OPAQUE_CHAT_FRIEND,
        JagexColors.CHAT_FC_TEXT_TRANSPARENT_BACKGROUND,
        JagexColors.CHAT_FC_TEXT_OPAQUE_BACKGROUND,
        Pattern.compile("^/(@?f).*"),
        1
    ),
    CLAN(
        "ClanMessage",
        VarPlayer.SETTINGS_TRANSPARENT_CHAT_CLAN,
        VarPlayer.SETTINGS_OPAQUE_CHAT_CLAN,
        DefaultColors.CLAN_AND_GIM,
        DefaultColors.CLAN_AND_GIM,
        Pattern.compile("^/(@c|c ).*"),
        2
    ),
    GUEST(
        "ClanGuestMessage",
        VarPlayer.SETTINGS_TRANSPARENT_CHAT_GUEST_CLAN,
        VarPlayer.SETTINGS_OPAQUE_CHAT_GUEST_CLAN,
        DefaultColors.GUEST_CLAN_TRANSPARENT,
        DefaultColors.GUEST_CLAN_OPAQUE,
        Pattern.compile("^/(@gc|gc ).*"),
        3
    ),
    GIM(
        null,
        VarPlayer.SETTINGS_TRANSPARENT_CHAT_IRON_GROUP_CHAT,
        VarPlayer.SETTINGS_OPAQUE_CHAT_IRON_GROUP_CHAT,
        DefaultColors.CLAN_AND_GIM,
        DefaultColors.CLAN_AND_GIM,
        Pattern.compile("^/(@g[^c]|g ).*"),
        4
    );

    private final String colorConfigKey;
    @Getter(onMethod_ = {@Varp})
    private final @Varp int transparentVarpId;
    @Getter(onMethod_ = {@Varp})
    private final @Varp int opaqueVarpId;
    private final Color transparentDefaultColor;
    private final Color opaqueDefaultColor;

    @Getter(AccessLevel.NONE)
    private final Pattern prefixRegex;
    @Getter(AccessLevel.NONE)
    private final int defaultSlashPrefixCount;

    private final static Map<Integer, ChatChannel> slashPrefixMap = new HashMap<>();

    /**
     * Set the slash prefixes to their default values
     */
    public static void useDefaultSlashPrefixes() {
        slashPrefixMap.clear();
        for (ChatChannel channel : ChatChannel.values()) {
            slashPrefixMap.put(channel.defaultSlashPrefixCount, channel);
        }
        slashPrefixMap.remove(PUBLIC.defaultSlashPrefixCount);
    }

    /**
     * Configure slash prefixes when Slash Swapper is enabled
     *
     * @param guestChatConfig Whether the guest chat config is enabled on Slash Swapper
     */
    public static void useSlashSwapperPrefixes(boolean guestChatConfig) {
        slashPrefixMap.clear();
        slashPrefixMap.put(2, FRIEND);
        slashPrefixMap.put(4, GIM);

        if (guestChatConfig) {
            slashPrefixMap.put(3, CLAN);
            slashPrefixMap.put(1, GUEST);
            return;
        }

        slashPrefixMap.put(1, CLAN);
        slashPrefixMap.put(3, GUEST);
    }

    @Nullable
    public static ChatChannel fromSlashPrefix(String text) {
        int slashCount = 0;
        while (slashCount < text.length() && text.charAt(slashCount) == '/') {
            slashCount++;
        }

        return slashPrefixMap.get(Math.min(slashCount, 4));
    }

    /**
     * Get the chat channel whose slash prefix has the given number of slashes
     *
     * @param count Number of slashes
     * @return Chat channel whose slash prefix has the given number of slashes
     */
    @Nullable
    public static ChatChannel fromSlashCount(int count) {
        return slashPrefixMap.get(count);
    }

    /**
     * @param chatModeVarClientIntValue VarClientInt value
     * @return Current chat mode channel
     */
    @Nullable
    public static ChatChannel fromChatModeVarClientInt(int chatModeVarClientIntValue) {
        switch (chatModeVarClientIntValue) {
            case 1:
                return FRIEND;
            case 2:
                return CLAN;
            case 3:
                return GUEST;
            case 4:
                return GIM;
        }

        return null;
    }

    /**
     * Check if the input text matches this channel's prefix regex
     *
     * @param text Input text
     * @return Whether the text matches this channel's prefix regex
     */
    public boolean matchesPrefixRegex(String text) {
        return prefixRegex.matcher(text).matches();
    }
}

