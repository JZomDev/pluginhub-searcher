package com.tuna.toa;

import net.runelite.client.RuneLite;
import net.runelite.client.externalplugins.ExternalPluginManager;

public class ToAPointsPluginTest
{
	public static void main(String[] args) throws Exception
	{
		ExternalPluginManager.loadBuiltin(ToAPointsPlugin.class);
		RuneLite.main(args);
	}
}
package com.tuna.toa;

import lombok.RequiredArgsConstructor;

import java.util.HashMap;
import java.util.Map;

@RequiredArgsConstructor
public enum ToARegion
{

  TOA_LOBBY(13454),
  MAIN_AREA(14160),
  CHEST_ROOM(14672),
  PUZZLE_MONKEY(15186),
  PUZZLE_CRONDIS(15698),
  PUZZLE_SCABARAS(14162),
  PUZZLE_HET(14674),
  BOSS_BABA(15188),
  BOSS_ZEBAK(15700),
  BOSS_KEPHRI(14164),
  BOSS_AKKHA(14676),
  BOSS_WARDEN(15184),
  BOSS_WARDEN_FINAL(15696);


    public final int regionID;
    private static final Map<Integer, ToARegion> REGION_MAP = new HashMap<>();
    
    static {
        for (ToARegion e: values()) {
            REGION_MAP.put(e.regionID, e);
        }
    }

    public static ToARegion fromRegionID(int regionID) {
        return REGION_MAP.get(regionID);
    }
  
}

package com.tuna.toa;

import java.awt.Dimension;
import java.awt.Graphics2D;
import java.text.DecimalFormat;
import javax.inject.Inject;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.LineComponent;


import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.components.TitleComponent;

public class ToAPointsOverlay extends OverlayPanel
{
    private static final DecimalFormat POINTS_FORMAT = new DecimalFormat("#,###");

    private Client client;
    private ToAPointsPlugin plugin;
    private ToAPointsConfig config;

    private double uniqueChance;
    private double petChance;

    @Inject
    private ToAPointsOverlay(Client client,
                             ToAPointsPlugin plugin,
                             ToAPointsConfig config)
    {
        this.client = client;
        this.plugin = plugin;
        this.config = config;
        setPosition(OverlayPosition.TOP_RIGHT);
        setPriority(OverlayPriority.HIGH);
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {

        double totalPoints = ToAPointsPlugin.getTotalPoints();
        double roomPoints = ToAPointsPlugin.getRoomPoints();
        if (totalPoints >= 5000){
            totalPoints = totalPoints - 5000;
        }

        panelComponent.getChildren().add(TitleComponent.builder()
                        .text("ToA Point Tracker").build());

        panelComponent.getChildren().add(LineComponent.builder()
                .left("Total:")
                .right(POINTS_FORMAT.format(totalPoints))
                .build());
                
        if(config.roomPoints()){
                panelComponent.getChildren().add(LineComponent.builder()
                    .left("Room Points:")
                    .right(POINTS_FORMAT.format(roomPoints))
                    .build());
        }


        if (config.raidsUniqueChance())
        {
            if (totalPoints < 1500)
            {
                uniqueChance = 0;
                petChance = 0;
            }
            int invocationLevel = ToAPointsPlugin.getInvocationLevel();

            if (invocationLevel > 550)
            {
                invocationLevel = 550;
            }
            int invocationMod = 0;
            int petInvocationMod = 0;

            if(invocationLevel < 150)
            {
                panelComponent.getChildren().add(LineComponent.builder()
                        .left("Unique:")
                        .right("Very low")
                        .build());
            }
            else {
                if (invocationLevel > 400)
                {
                    //take the remainder after 400
                    int invocOver = invocationLevel - 400;
                    //levels over 400 count only count as 1/3 more
                    invocOver = invocOver / 3;
                    int expertInvocationLevel = 400 + invocOver;
                    invocationMod = expertInvocationLevel * 20;
                    petInvocationMod = expertInvocationLevel * 700;
                }
                else
                {
                    invocationMod = invocationLevel * 20;
                    petInvocationMod = invocationLevel * 700;
                }

                    int perOnePercentChance = 10500 - invocationMod;
                    double petOnePercentChance = 350000 - petInvocationMod;
                    totalPoints = totalPoints + roomPoints;
                    uniqueChance = totalPoints/perOnePercentChance;
                    petChance = totalPoints/petOnePercentChance;

                    panelComponent.getChildren().add(LineComponent.builder()
                        .left("Unique:")
                        .right(String.valueOf( Math.round(uniqueChance * 100.0) / 100.0 ) + "%")
                        .build());
                        
                    if(config.petChance())
                    {
                        panelComponent.getChildren().add(LineComponent.builder()
                            .left("Pet Chance:")
                            .right(String.valueOf( Math.round(petChance * 100.0) / 100.0 ) + "%")
                            .build());
                    }
            }
        }

        return super.render(graphics);
    }
}

package com.tuna.toa;

import com.google.inject.Provides;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.*;
import net.runelite.api.events.GameTick;
import net.runelite.api.widgets.Widget;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.util.List;

import static com.tuna.toa.ToARegion.*;

@Slf4j
@PluginDescriptor(
		name = "ToA Points Overlay"
)
public class ToAPointsPlugin extends Plugin {

	@Inject
	private Client client;

	@Inject
	private ToAPointsOverlay overlay;

	@Inject
	private ToAPointsConfig config;

	@Inject
	private OverlayManager overlayManager;

	@Inject
	private ClientThread clientThread;

	public static double totalPoints = 5000;

	public static double roomPoints = 0;

	public static int invocationLevel = 0;

	public static int partySize = 0;

	boolean inRaid = false;

	private ToARegion currentRegion = null;

	public static int getInvocationLevel()
	{
		return invocationLevel;
	}

	@Provides
	ToAPointsConfig provideConfig(ConfigManager configManager)
	{
		return configManager.getConfig(ToAPointsConfig.class);
	}

	public static double getTotalPoints()
	{
		return totalPoints;
	}

	public static double getRoomPoints()
	{
		return roomPoints;
	}
	@Override
	protected void startUp() throws Exception
	{
		overlayManager.add(overlay);

	}

	@Override
	protected void shutDown() throws Exception
	{
		overlayManager.remove(overlay);

		reset();
	}

	@Subscribe
	public void onHitsplatApplied(HitsplatApplied hitsplatApplied)
	{
		Actor target = hitsplatApplied.getActor();
		Hitsplat hitsplat = hitsplatApplied.getHitsplat();

		//p2 warden and palm are weird. So take the damage done to warden/palm divide it by group members then multiply by the modifier.
		//Isn't super accurate, but it'll be as close as it can get currently.
		if(!hitsplat.isMine() && !hitsplat.isOthers() && !target.getName().equals("Kephri") &&
		(hitsplat.getHitsplatType() == 53 || hitsplat.getHitsplatType() == 55 || hitsplat.getHitsplatType() == 11))
		{
			NPC npc = (NPC) target;
			List<Player> teamMembers = client.getPlayers();

			int averageHitSplat = hitsplat.getAmount() / teamMembers.size();

			//p2 warden and palm are 2.0 modifier
			averageHitSplat = averageHitSplat * 2;
			roomPoints = roomPoints + averageHitSplat;

			//because points are split between members, we lower the point cap
			//in the crondis puzzle. Mostly to prevent misleading/fake boosting.
			//In solos, we just go with the point cap given to us from the blog.
			if(hitsplat.getHitsplatType() == 11 && roomPoints >= 10000 && teamMembers.size() != 1){
				roomPoints = 10000;
			}
			else if(teamMembers.size() == 1 && hitsplat.getHitsplatType() == 11 && roomPoints >= 20000) {
				roomPoints = 20000;
			}
		}
		else if (!hitsplat.isMine() || target == client.getLocalPlayer())
		{
			//do nothing
		}
		else
		{
			NPC npc = (NPC) target;
			pointCalc(hitsplat, npc);
		}

	}

	@Subscribe
	public void onGameTick(GameTick e)
	{
		LocalPoint lp = client.getLocalPlayer().getLocalLocation();
		int newRegionID = lp == null ? -1 : WorldPoint.fromLocalInstance(client, lp).getRegionID();
		ToARegion newRegion = ToARegion.fromRegionID(newRegionID);
		//we are within ToA
		if(newRegion != null && newRegion != ToARegion.TOA_LOBBY){
			inRaid = true;
			overlayManager.add(overlay);

			Widget invoWidget = client.getWidget(31522858);

			if(invoWidget != null) {
				String invoLevel = invoWidget.getText();
				invocationLevel = Integer.parseInt(invoLevel.replaceAll("[^0-9]", ""));
			}

		}
		else{
			inRaid = false;
			overlayManager.remove(overlay);
		}

		//still in the raid, but we moved to a new area
		if(newRegion != currentRegion && inRaid)
		{

			if(config.puzzlePointsAssumption()){

				switch(newRegion)
				{
					case BOSS_BABA:
						totalPoints = totalPoints + 450;
						break;
					case BOSS_KEPHRI:
						totalPoints = totalPoints + 300;
						break;
				}

			}
			//if we didnt just leave the nexus, or loot room add mvp points
			if( config.mvpAssumption())
			{
				mvpAssumption(currentRegion, newRegion);
			}

			currentRegion = newRegion;

			if(currentRegion != null)
			{
				totalPoints = totalPoints + roomPoints;
				roomPoints = 0;

				//hard cap on total points
				if(totalPoints > 64000){
					totalPoints = 64000;
				}
			}
		}
		currentRegion = newRegion;
	}

	public void mvpAssumption(ToARegion leftRegion, ToARegion enteredRegion)
	{
		//We left a puzzle room and entered the boss room, add mvp points for the puzzle
		if(leftRegion != null)
		{
			switch (leftRegion)
			{
				case PUZZLE_MONKEY:
				{
					if(enteredRegion == BOSS_BABA)
					{
						totalPoints = totalPoints + 300;
					}
				}
				case PUZZLE_CRONDIS:
				{
					if(enteredRegion == BOSS_ZEBAK)
					{
						totalPoints = totalPoints + 300;
					}
				}
				case PUZZLE_SCABARAS:
				{
					if(enteredRegion == BOSS_KEPHRI)
					{
						totalPoints = totalPoints + 300;
					}
				}
				case PUZZLE_HET:
				{
					if(enteredRegion == BOSS_AKKHA)
					{
						totalPoints = totalPoints + 300;
					}
				}
				//wardens don't drop an item so assumption is needed.
				case BOSS_WARDEN_FINAL:
				{
					if(enteredRegion == CHEST_ROOM)
					{
						totalPoints = totalPoints + 300;
					}
				}
			}
		}
	}

	@Subscribe
	public void onItemSpawned(ItemSpawned itemSpawned)
	{

		TileItem item = itemSpawned.getItem();

		List<Player> teamMembers = client.getPlayers();

		if(item.getId() == 27221 && currentRegion == BOSS_BABA)
		{
			totalPoints = totalPoints + (300 * teamMembers.size());
		}
		else if (item.getId() == 27223 && currentRegion == BOSS_AKKHA)
		{
			totalPoints = totalPoints + (300 * teamMembers.size());
		}
		else if (item.getId() == 27219 && currentRegion == BOSS_ZEBAK)
		{
			totalPoints = totalPoints + (300 * teamMembers.size());
		}
		else if (item.getId() == 27214 && currentRegion == BOSS_KEPHRI)
		{
			totalPoints = totalPoints + (300 * teamMembers.size());
		}
	}

	@Subscribe
	public void onActorDeath(ActorDeath actorDeath)
	{
		if (actorDeath.getActor() == client.getLocalPlayer())
		{

			List<Player> teamMembers = client.getPlayers();
			
			if(teamMembers.size() == 1) //dying in a solo means no chance of room completion
			{
				roomPoints = 0; 
			}
			
			double pointLoss = totalPoints * 20;
			pointLoss = pointLoss/100;

			if(pointLoss < 1000)
			{
				pointLoss = 1000;
			}
			if (totalPoints < 1000)
			{
				totalPoints = 0;
			}
			else
			{
				totalPoints = totalPoints - pointLoss;
			}

		}
	}

	public void pointCalc(Hitsplat hitsplat, NPC target)
	{

		double modHit = 0;
		double modifier = 0;
		int rawHit = hitsplat.getAmount();

		ToANpc currentTarget = ToANpc.fromNpcID(target.getId());

		if(currentTarget == null){
			modifier = 1;
		}
		else {

			switch (currentTarget) {
				case BABOON_BRAWLER:
				case BABOON_THROWER:
				case BABOON_MAGE:
				case BABOON_SHAMAN:
				case BABOON_THRALL:
				case BABOON_CURSED:
				case BABOON_VOLATILE: {
					modifier = 1.2;
					break;
				}

				case BABA:

				case WARDEN_TUMEKEN_RANGE:
				case WARDEN_TUMEKEN_MAGE:
				case WARDEN_ELIDINIS_MAGE:
				case WARDEN_ELIDINIS_RANGE: {
					modifier = 2.0;
					break;
				}

				case BOULDER: {
					modifier = 0.0;
					break;
				}

				case HET_OBELISK:
				case WARDEN_TUMEKEN_FINAL:
				case WARDEN_ELIDINIS_FINAL: {
					modifier = 2.5;
					break;
				}

				case ZEBAK:
				case ZEBAK_ENRAGED:
				case WARDEN_OBELISK: {
					modifier = 1.5;
					break;
				}

				case SCARAB_ARCANE:
				case SCARAB_SPITTING:
				case SCARAB_SOLDIER: {
					modifier = 0.5;
					break;
				}

				case WARDEN_ELIDINIS_INACTIVE_P1:
				case WARDEN_ELIDINIS_INACTIVE_P2:
				case WARDEN_ELIDINIS_INACTIVE_P3:
				case WARDEN_TUMEKEN_INACTIVE_P1:
				case WARDEN_TUMEKEN_INACTIVE_P2:
				case WARDEN_TUMEKEN_INACTIVE_P3:
				case WARDEN_CORE_TUMEKEN:
				case WARDEN_CORE_ELIDINIS: {
					modifier = 0;
					break;
				}

				default: {
					modifier = 1.0;
					break;
				}


			}
		}

		modHit = rawHit * modifier;


		roomPoints = roomPoints + modHit;

		//hard cap on room points
		if(roomPoints > 20000)
		{
			roomPoints = 20000;
		}

	}

	@Subscribe
	private void onGameStateChanged(GameStateChanged event)
	{

		if (event.getGameState() == GameState.LOGGED_IN
		    && client.getLocalPlayer() != null && !inRaid)
		{
			reset();
		}
	}

	public void reset()
	{
		roomPoints = 0;
		currentRegion = null;
		totalPoints = 5000;
		inRaid = false;
	}


}

package com.tuna.toa;

import lombok.RequiredArgsConstructor;
import java.util.HashMap;
import java.util.Map;

@RequiredArgsConstructor
public enum ToANpc
{

HET_OBELISK(11707),

ZEBAK(11730),
ZEBAK_ENRAGED(11732),
WARDEN_CORE_ELIDINIS(11770),
WARDEN_CORE_TUMEKEN(11771),
WARDEN_OBELISK(11751),
WARDEN_TUMEKEN_INACTIVE_P1(11749),
WARDEN_TUMEKEN_INACTIVE_P2(11758),
WARDEN_TUMEKEN_INACTIVE_P3(11760),
WARDEN_TUMEKEN_RANGE(11756),
WARDEN_TUMEKEN_MAGE(11757),
WARDEN_TUMEKEN_FINAL(11762),
WARDEN_ELIDINIS_INACTIVE_P1(11748),
WARDEN_ELIDINIS_INACTIVE_P2(11755),
WARDEN_ELIDINIS_INACTIVE_P3(11759),
WARDEN_ELIDINIS_MAGE(11753),
WARDEN_ELIDINIS_RANGE(11754),
WARDEN_ELIDINIS_FINAL(11761),
BABOON_BRAWLER(11709),
BABOON_THROWER(11710),
BABOON_MAGE(11711),
BABOON_SHAMAN(11715),
BABOON_THRALL(11718),
BABOON_CURSED(11717),
BABOON_VOLATILE(11716),
BABA(11778),
BOULDER(11783),
SCARAB_ARCANE(11726),
SCARAB_SPITTING(11725),
SCARAB_SOLDIER(11724);

    public final int npcID;
    private static final Map<Integer, ToANpc> NPC_MAP = new HashMap<>();

    static {
        for (ToANpc e: values()) {
            NPC_MAP.put(e.npcID, e);
        }
    }

    public static ToANpc fromNpcID(int npcID) {
        return NPC_MAP.get(npcID);
    }

}

package com.tuna.toa;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("toapointsoverlay")
public interface ToAPointsConfig extends Config
{

	@ConfigItem(
			keyName = "mvpAssumption",
			name = "Puzzle MvP Points Assumption",
			description = "Puzzles don't calculate MVPs, so this estimates it.",
			position = 1
	)
	default boolean mvpAssumption()
	{
		return true;
	}
	@ConfigItem(
			keyName = "raidsUniqueChance",
			name = "Display the chance of an unique",
			description = "Displays the chance that a single unique could be in raid loot",
			position = 2
	)
	default boolean raidsUniqueChance()
	{
		return true;
	}

	@ConfigItem(
			keyName = "puzzlePointsAssumption",
			name = "Puzzle Points Assumption",
			description = "Gives 300 points after Scarabs puzzles, and 450 after ba-ba's puzzle",
			position = 3
	)
	default boolean puzzlePointsAssumption()
	{
		return true;
	}
	
	@ConfigItem(
			keyName = "roomPoints",
			name = "Display current room points",
			description = "For the fixed andys",
			position = 4
	)
	default boolean roomPoints()
	{
		return true;
	}
	
	@ConfigItem(
		keyName = "petChance",
		name = "Display chance for pet",
		description = "Displays percent chance to get pet",
		position = 5
	)
	default boolean petChance()
	{
		return true;
	}
	

}

